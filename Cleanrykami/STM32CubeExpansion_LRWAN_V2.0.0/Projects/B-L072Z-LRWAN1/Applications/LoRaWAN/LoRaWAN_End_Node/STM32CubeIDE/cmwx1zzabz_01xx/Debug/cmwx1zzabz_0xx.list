
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e988  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016c4  0801ea48  0801ea48  0002ea48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802010c  0802010c  0003010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020114  08020114  00030114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020118  08020118  00030118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000023c  20000000  0802011c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000015a4  2000023c  08020358  0004023c  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  200017e0  08020358  000417e0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0004023c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00056373  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a8b9  00000000  00000000  000965d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b18  00000000  00000000  000a0e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002730  00000000  00000000  000a39a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022712  00000000  00000000  000a60d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003cf5f  00000000  00000000  000c87ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b3cef  00000000  00000000  00105749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001b9438  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009e90  00000000  00000000  001b948c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000023c 	.word	0x2000023c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801ea30 	.word	0x0801ea30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000240 	.word	0x20000240
 8000104:	0801ea30 	.word	0x0801ea30

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fd2d 	bl	8001e88 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fc77 	bl	8001d2c <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd1f 	bl	8001e88 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd15 	bl	8001e88 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc99 	bl	8001da4 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc8f 	bl	8001da4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fb3f 	bl	8000b20 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fac3 	bl	8000a38 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb31 	bl	8000b20 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb27 	bl	8000b20 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fad1 	bl	8000a88 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fac7 	bl	8000a88 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_ldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d115      	bne.n	8000538 <__aeabi_ldivmod+0x30>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d113      	bne.n	8000538 <__aeabi_ldivmod+0x30>
 8000510:	2900      	cmp	r1, #0
 8000512:	db06      	blt.n	8000522 <__aeabi_ldivmod+0x1a>
 8000514:	dc01      	bgt.n	800051a <__aeabi_ldivmod+0x12>
 8000516:	2800      	cmp	r0, #0
 8000518:	d006      	beq.n	8000528 <__aeabi_ldivmod+0x20>
 800051a:	2000      	movs	r0, #0
 800051c:	43c0      	mvns	r0, r0
 800051e:	0841      	lsrs	r1, r0, #1
 8000520:	e002      	b.n	8000528 <__aeabi_ldivmod+0x20>
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	0609      	lsls	r1, r1, #24
 8000526:	2000      	movs	r0, #0
 8000528:	b407      	push	{r0, r1, r2}
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <__aeabi_ldivmod+0x2c>)
 800052c:	a101      	add	r1, pc, #4	; (adr r1, 8000534 <__aeabi_ldivmod+0x2c>)
 800052e:	1840      	adds	r0, r0, r1
 8000530:	9002      	str	r0, [sp, #8]
 8000532:	bd03      	pop	{r0, r1, pc}
 8000534:	fffffee1 	.word	0xfffffee1
 8000538:	b403      	push	{r0, r1}
 800053a:	4668      	mov	r0, sp
 800053c:	b501      	push	{r0, lr}
 800053e:	9802      	ldr	r0, [sp, #8]
 8000540:	f000 f950 	bl	80007e4 <__gnu_ldivmod_helper>
 8000544:	9b01      	ldr	r3, [sp, #4]
 8000546:	469e      	mov	lr, r3
 8000548:	b002      	add	sp, #8
 800054a:	bc0c      	pop	{r2, r3}
 800054c:	4770      	bx	lr
 800054e:	46c0      	nop			; (mov r8, r8)

08000550 <__aeabi_uldivmod>:
 8000550:	2b00      	cmp	r3, #0
 8000552:	d111      	bne.n	8000578 <__aeabi_uldivmod+0x28>
 8000554:	2a00      	cmp	r2, #0
 8000556:	d10f      	bne.n	8000578 <__aeabi_uldivmod+0x28>
 8000558:	2900      	cmp	r1, #0
 800055a:	d100      	bne.n	800055e <__aeabi_uldivmod+0xe>
 800055c:	2800      	cmp	r0, #0
 800055e:	d002      	beq.n	8000566 <__aeabi_uldivmod+0x16>
 8000560:	2100      	movs	r1, #0
 8000562:	43c9      	mvns	r1, r1
 8000564:	1c08      	adds	r0, r1, #0
 8000566:	b407      	push	{r0, r1, r2}
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <__aeabi_uldivmod+0x24>)
 800056a:	a102      	add	r1, pc, #8	; (adr r1, 8000574 <__aeabi_uldivmod+0x24>)
 800056c:	1840      	adds	r0, r0, r1
 800056e:	9002      	str	r0, [sp, #8]
 8000570:	bd03      	pop	{r0, r1, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	fffffea1 	.word	0xfffffea1
 8000578:	b403      	push	{r0, r1}
 800057a:	4668      	mov	r0, sp
 800057c:	b501      	push	{r0, lr}
 800057e:	9802      	ldr	r0, [sp, #8]
 8000580:	f000 f864 	bl	800064c <__udivmoddi4>
 8000584:	9b01      	ldr	r3, [sp, #4]
 8000586:	469e      	mov	lr, r3
 8000588:	b002      	add	sp, #8
 800058a:	bc0c      	pop	{r2, r3}
 800058c:	4770      	bx	lr
 800058e:	46c0      	nop			; (mov r8, r8)

08000590 <__aeabi_lmul>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	0415      	lsls	r5, r2, #16
 8000594:	0c2d      	lsrs	r5, r5, #16
 8000596:	000f      	movs	r7, r1
 8000598:	0001      	movs	r1, r0
 800059a:	002e      	movs	r6, r5
 800059c:	46c6      	mov	lr, r8
 800059e:	4684      	mov	ip, r0
 80005a0:	0400      	lsls	r0, r0, #16
 80005a2:	0c14      	lsrs	r4, r2, #16
 80005a4:	0c00      	lsrs	r0, r0, #16
 80005a6:	0c09      	lsrs	r1, r1, #16
 80005a8:	4346      	muls	r6, r0
 80005aa:	434d      	muls	r5, r1
 80005ac:	4360      	muls	r0, r4
 80005ae:	4361      	muls	r1, r4
 80005b0:	1940      	adds	r0, r0, r5
 80005b2:	0c34      	lsrs	r4, r6, #16
 80005b4:	1824      	adds	r4, r4, r0
 80005b6:	b500      	push	{lr}
 80005b8:	42a5      	cmp	r5, r4
 80005ba:	d903      	bls.n	80005c4 <__aeabi_lmul+0x34>
 80005bc:	2080      	movs	r0, #128	; 0x80
 80005be:	0240      	lsls	r0, r0, #9
 80005c0:	4680      	mov	r8, r0
 80005c2:	4441      	add	r1, r8
 80005c4:	0c25      	lsrs	r5, r4, #16
 80005c6:	186d      	adds	r5, r5, r1
 80005c8:	4661      	mov	r1, ip
 80005ca:	4359      	muls	r1, r3
 80005cc:	437a      	muls	r2, r7
 80005ce:	0430      	lsls	r0, r6, #16
 80005d0:	1949      	adds	r1, r1, r5
 80005d2:	0424      	lsls	r4, r4, #16
 80005d4:	0c00      	lsrs	r0, r0, #16
 80005d6:	1820      	adds	r0, r4, r0
 80005d8:	1889      	adds	r1, r1, r2
 80005da:	bc80      	pop	{r7}
 80005dc:	46b8      	mov	r8, r7
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005e0 <__aeabi_f2uiz>:
 80005e0:	219e      	movs	r1, #158	; 0x9e
 80005e2:	b510      	push	{r4, lr}
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	1c04      	adds	r4, r0, #0
 80005e8:	f7ff ff84 	bl	80004f4 <__aeabi_fcmpge>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d103      	bne.n	80005f8 <__aeabi_f2uiz+0x18>
 80005f0:	1c20      	adds	r0, r4, #0
 80005f2:	f000 fca7 	bl	8000f44 <__aeabi_f2iz>
 80005f6:	bd10      	pop	{r4, pc}
 80005f8:	219e      	movs	r1, #158	; 0x9e
 80005fa:	1c20      	adds	r0, r4, #0
 80005fc:	05c9      	lsls	r1, r1, #23
 80005fe:	f000 fad9 	bl	8000bb4 <__aeabi_fsub>
 8000602:	f000 fc9f 	bl	8000f44 <__aeabi_f2iz>
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	061b      	lsls	r3, r3, #24
 800060a:	469c      	mov	ip, r3
 800060c:	4460      	add	r0, ip
 800060e:	e7f2      	b.n	80005f6 <__aeabi_f2uiz+0x16>

08000610 <__aeabi_d2uiz>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	2200      	movs	r2, #0
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__aeabi_d2uiz+0x38>)
 8000616:	0004      	movs	r4, r0
 8000618:	000d      	movs	r5, r1
 800061a:	f7ff ff31 	bl	8000480 <__aeabi_dcmpge>
 800061e:	2800      	cmp	r0, #0
 8000620:	d104      	bne.n	800062c <__aeabi_d2uiz+0x1c>
 8000622:	0020      	movs	r0, r4
 8000624:	0029      	movs	r1, r5
 8000626:	f002 fa9d 	bl	8002b64 <__aeabi_d2iz>
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <__aeabi_d2uiz+0x38>)
 800062e:	2200      	movs	r2, #0
 8000630:	0020      	movs	r0, r4
 8000632:	0029      	movs	r1, r5
 8000634:	f001 ff04 	bl	8002440 <__aeabi_dsub>
 8000638:	f002 fa94 	bl	8002b64 <__aeabi_d2iz>
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	061b      	lsls	r3, r3, #24
 8000640:	469c      	mov	ip, r3
 8000642:	4460      	add	r0, ip
 8000644:	e7f1      	b.n	800062a <__aeabi_d2uiz+0x1a>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	41e00000 	.word	0x41e00000

0800064c <__udivmoddi4>:
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	4657      	mov	r7, sl
 8000650:	464e      	mov	r6, r9
 8000652:	4645      	mov	r5, r8
 8000654:	46de      	mov	lr, fp
 8000656:	b5e0      	push	{r5, r6, r7, lr}
 8000658:	0004      	movs	r4, r0
 800065a:	000d      	movs	r5, r1
 800065c:	4692      	mov	sl, r2
 800065e:	4699      	mov	r9, r3
 8000660:	b083      	sub	sp, #12
 8000662:	428b      	cmp	r3, r1
 8000664:	d830      	bhi.n	80006c8 <__udivmoddi4+0x7c>
 8000666:	d02d      	beq.n	80006c4 <__udivmoddi4+0x78>
 8000668:	4649      	mov	r1, r9
 800066a:	4650      	mov	r0, sl
 800066c:	f002 fb6c 	bl	8002d48 <__clzdi2>
 8000670:	0029      	movs	r1, r5
 8000672:	0006      	movs	r6, r0
 8000674:	0020      	movs	r0, r4
 8000676:	f002 fb67 	bl	8002d48 <__clzdi2>
 800067a:	1a33      	subs	r3, r6, r0
 800067c:	4698      	mov	r8, r3
 800067e:	3b20      	subs	r3, #32
 8000680:	469b      	mov	fp, r3
 8000682:	d433      	bmi.n	80006ec <__udivmoddi4+0xa0>
 8000684:	465a      	mov	r2, fp
 8000686:	4653      	mov	r3, sl
 8000688:	4093      	lsls	r3, r2
 800068a:	4642      	mov	r2, r8
 800068c:	001f      	movs	r7, r3
 800068e:	4653      	mov	r3, sl
 8000690:	4093      	lsls	r3, r2
 8000692:	001e      	movs	r6, r3
 8000694:	42af      	cmp	r7, r5
 8000696:	d83a      	bhi.n	800070e <__udivmoddi4+0xc2>
 8000698:	42af      	cmp	r7, r5
 800069a:	d100      	bne.n	800069e <__udivmoddi4+0x52>
 800069c:	e078      	b.n	8000790 <__udivmoddi4+0x144>
 800069e:	465b      	mov	r3, fp
 80006a0:	1ba4      	subs	r4, r4, r6
 80006a2:	41bd      	sbcs	r5, r7
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da00      	bge.n	80006aa <__udivmoddi4+0x5e>
 80006a8:	e075      	b.n	8000796 <__udivmoddi4+0x14a>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2300      	movs	r3, #0
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2301      	movs	r3, #1
 80006b4:	465a      	mov	r2, fp
 80006b6:	4093      	lsls	r3, r2
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2301      	movs	r3, #1
 80006bc:	4642      	mov	r2, r8
 80006be:	4093      	lsls	r3, r2
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	e028      	b.n	8000716 <__udivmoddi4+0xca>
 80006c4:	4282      	cmp	r2, r0
 80006c6:	d9cf      	bls.n	8000668 <__udivmoddi4+0x1c>
 80006c8:	2200      	movs	r2, #0
 80006ca:	2300      	movs	r3, #0
 80006cc:	9200      	str	r2, [sp, #0]
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <__udivmoddi4+0x8e>
 80006d6:	601c      	str	r4, [r3, #0]
 80006d8:	605d      	str	r5, [r3, #4]
 80006da:	9800      	ldr	r0, [sp, #0]
 80006dc:	9901      	ldr	r1, [sp, #4]
 80006de:	b003      	add	sp, #12
 80006e0:	bcf0      	pop	{r4, r5, r6, r7}
 80006e2:	46bb      	mov	fp, r7
 80006e4:	46b2      	mov	sl, r6
 80006e6:	46a9      	mov	r9, r5
 80006e8:	46a0      	mov	r8, r4
 80006ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ec:	4642      	mov	r2, r8
 80006ee:	2320      	movs	r3, #32
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	4652      	mov	r2, sl
 80006f4:	40da      	lsrs	r2, r3
 80006f6:	4641      	mov	r1, r8
 80006f8:	0013      	movs	r3, r2
 80006fa:	464a      	mov	r2, r9
 80006fc:	408a      	lsls	r2, r1
 80006fe:	0017      	movs	r7, r2
 8000700:	4642      	mov	r2, r8
 8000702:	431f      	orrs	r7, r3
 8000704:	4653      	mov	r3, sl
 8000706:	4093      	lsls	r3, r2
 8000708:	001e      	movs	r6, r3
 800070a:	42af      	cmp	r7, r5
 800070c:	d9c4      	bls.n	8000698 <__udivmoddi4+0x4c>
 800070e:	2200      	movs	r2, #0
 8000710:	2300      	movs	r3, #0
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	4643      	mov	r3, r8
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0d9      	beq.n	80006d0 <__udivmoddi4+0x84>
 800071c:	07fb      	lsls	r3, r7, #31
 800071e:	0872      	lsrs	r2, r6, #1
 8000720:	431a      	orrs	r2, r3
 8000722:	4646      	mov	r6, r8
 8000724:	087b      	lsrs	r3, r7, #1
 8000726:	e00e      	b.n	8000746 <__udivmoddi4+0xfa>
 8000728:	42ab      	cmp	r3, r5
 800072a:	d101      	bne.n	8000730 <__udivmoddi4+0xe4>
 800072c:	42a2      	cmp	r2, r4
 800072e:	d80c      	bhi.n	800074a <__udivmoddi4+0xfe>
 8000730:	1aa4      	subs	r4, r4, r2
 8000732:	419d      	sbcs	r5, r3
 8000734:	2001      	movs	r0, #1
 8000736:	1924      	adds	r4, r4, r4
 8000738:	416d      	adcs	r5, r5
 800073a:	2100      	movs	r1, #0
 800073c:	3e01      	subs	r6, #1
 800073e:	1824      	adds	r4, r4, r0
 8000740:	414d      	adcs	r5, r1
 8000742:	2e00      	cmp	r6, #0
 8000744:	d006      	beq.n	8000754 <__udivmoddi4+0x108>
 8000746:	42ab      	cmp	r3, r5
 8000748:	d9ee      	bls.n	8000728 <__udivmoddi4+0xdc>
 800074a:	3e01      	subs	r6, #1
 800074c:	1924      	adds	r4, r4, r4
 800074e:	416d      	adcs	r5, r5
 8000750:	2e00      	cmp	r6, #0
 8000752:	d1f8      	bne.n	8000746 <__udivmoddi4+0xfa>
 8000754:	9800      	ldr	r0, [sp, #0]
 8000756:	9901      	ldr	r1, [sp, #4]
 8000758:	465b      	mov	r3, fp
 800075a:	1900      	adds	r0, r0, r4
 800075c:	4169      	adcs	r1, r5
 800075e:	2b00      	cmp	r3, #0
 8000760:	db24      	blt.n	80007ac <__udivmoddi4+0x160>
 8000762:	002b      	movs	r3, r5
 8000764:	465a      	mov	r2, fp
 8000766:	4644      	mov	r4, r8
 8000768:	40d3      	lsrs	r3, r2
 800076a:	002a      	movs	r2, r5
 800076c:	40e2      	lsrs	r2, r4
 800076e:	001c      	movs	r4, r3
 8000770:	465b      	mov	r3, fp
 8000772:	0015      	movs	r5, r2
 8000774:	2b00      	cmp	r3, #0
 8000776:	db2a      	blt.n	80007ce <__udivmoddi4+0x182>
 8000778:	0026      	movs	r6, r4
 800077a:	409e      	lsls	r6, r3
 800077c:	0033      	movs	r3, r6
 800077e:	0026      	movs	r6, r4
 8000780:	4647      	mov	r7, r8
 8000782:	40be      	lsls	r6, r7
 8000784:	0032      	movs	r2, r6
 8000786:	1a80      	subs	r0, r0, r2
 8000788:	4199      	sbcs	r1, r3
 800078a:	9000      	str	r0, [sp, #0]
 800078c:	9101      	str	r1, [sp, #4]
 800078e:	e79f      	b.n	80006d0 <__udivmoddi4+0x84>
 8000790:	42a3      	cmp	r3, r4
 8000792:	d8bc      	bhi.n	800070e <__udivmoddi4+0xc2>
 8000794:	e783      	b.n	800069e <__udivmoddi4+0x52>
 8000796:	4642      	mov	r2, r8
 8000798:	2320      	movs	r3, #32
 800079a:	2100      	movs	r1, #0
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	2200      	movs	r2, #0
 80007a0:	9100      	str	r1, [sp, #0]
 80007a2:	9201      	str	r2, [sp, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	40da      	lsrs	r2, r3
 80007a8:	9201      	str	r2, [sp, #4]
 80007aa:	e786      	b.n	80006ba <__udivmoddi4+0x6e>
 80007ac:	4642      	mov	r2, r8
 80007ae:	2320      	movs	r3, #32
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	002a      	movs	r2, r5
 80007b4:	4646      	mov	r6, r8
 80007b6:	409a      	lsls	r2, r3
 80007b8:	0023      	movs	r3, r4
 80007ba:	40f3      	lsrs	r3, r6
 80007bc:	4644      	mov	r4, r8
 80007be:	4313      	orrs	r3, r2
 80007c0:	002a      	movs	r2, r5
 80007c2:	40e2      	lsrs	r2, r4
 80007c4:	001c      	movs	r4, r3
 80007c6:	465b      	mov	r3, fp
 80007c8:	0015      	movs	r5, r2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dad4      	bge.n	8000778 <__udivmoddi4+0x12c>
 80007ce:	4642      	mov	r2, r8
 80007d0:	002f      	movs	r7, r5
 80007d2:	2320      	movs	r3, #32
 80007d4:	0026      	movs	r6, r4
 80007d6:	4097      	lsls	r7, r2
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	40de      	lsrs	r6, r3
 80007dc:	003b      	movs	r3, r7
 80007de:	4333      	orrs	r3, r6
 80007e0:	e7cd      	b.n	800077e <__udivmoddi4+0x132>
 80007e2:	46c0      	nop			; (mov r8, r8)

080007e4 <__gnu_ldivmod_helper>:
 80007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e6:	46ce      	mov	lr, r9
 80007e8:	4647      	mov	r7, r8
 80007ea:	b580      	push	{r7, lr}
 80007ec:	4691      	mov	r9, r2
 80007ee:	4698      	mov	r8, r3
 80007f0:	0004      	movs	r4, r0
 80007f2:	000d      	movs	r5, r1
 80007f4:	f002 fab4 	bl	8002d60 <__divdi3>
 80007f8:	0007      	movs	r7, r0
 80007fa:	000e      	movs	r6, r1
 80007fc:	0002      	movs	r2, r0
 80007fe:	000b      	movs	r3, r1
 8000800:	4648      	mov	r0, r9
 8000802:	4641      	mov	r1, r8
 8000804:	f7ff fec4 	bl	8000590 <__aeabi_lmul>
 8000808:	1a24      	subs	r4, r4, r0
 800080a:	418d      	sbcs	r5, r1
 800080c:	9b08      	ldr	r3, [sp, #32]
 800080e:	0038      	movs	r0, r7
 8000810:	0031      	movs	r1, r6
 8000812:	601c      	str	r4, [r3, #0]
 8000814:	605d      	str	r5, [r3, #4]
 8000816:	bcc0      	pop	{r6, r7}
 8000818:	46b9      	mov	r9, r7
 800081a:	46b0      	mov	r8, r6
 800081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)

08000820 <__aeabi_fdiv>:
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	464f      	mov	r7, r9
 8000824:	4646      	mov	r6, r8
 8000826:	46d6      	mov	lr, sl
 8000828:	0245      	lsls	r5, r0, #9
 800082a:	b5c0      	push	{r6, r7, lr}
 800082c:	0047      	lsls	r7, r0, #1
 800082e:	1c0c      	adds	r4, r1, #0
 8000830:	0a6d      	lsrs	r5, r5, #9
 8000832:	0e3f      	lsrs	r7, r7, #24
 8000834:	0fc6      	lsrs	r6, r0, #31
 8000836:	2f00      	cmp	r7, #0
 8000838:	d066      	beq.n	8000908 <__aeabi_fdiv+0xe8>
 800083a:	2fff      	cmp	r7, #255	; 0xff
 800083c:	d06c      	beq.n	8000918 <__aeabi_fdiv+0xf8>
 800083e:	2300      	movs	r3, #0
 8000840:	00ea      	lsls	r2, r5, #3
 8000842:	2580      	movs	r5, #128	; 0x80
 8000844:	4699      	mov	r9, r3
 8000846:	469a      	mov	sl, r3
 8000848:	04ed      	lsls	r5, r5, #19
 800084a:	4315      	orrs	r5, r2
 800084c:	3f7f      	subs	r7, #127	; 0x7f
 800084e:	0260      	lsls	r0, r4, #9
 8000850:	0061      	lsls	r1, r4, #1
 8000852:	0a43      	lsrs	r3, r0, #9
 8000854:	4698      	mov	r8, r3
 8000856:	0e09      	lsrs	r1, r1, #24
 8000858:	0fe4      	lsrs	r4, r4, #31
 800085a:	2900      	cmp	r1, #0
 800085c:	d048      	beq.n	80008f0 <__aeabi_fdiv+0xd0>
 800085e:	29ff      	cmp	r1, #255	; 0xff
 8000860:	d010      	beq.n	8000884 <__aeabi_fdiv+0x64>
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	00d8      	lsls	r0, r3, #3
 8000866:	04d2      	lsls	r2, r2, #19
 8000868:	4302      	orrs	r2, r0
 800086a:	4690      	mov	r8, r2
 800086c:	2000      	movs	r0, #0
 800086e:	397f      	subs	r1, #127	; 0x7f
 8000870:	464a      	mov	r2, r9
 8000872:	0033      	movs	r3, r6
 8000874:	1a7f      	subs	r7, r7, r1
 8000876:	4302      	orrs	r2, r0
 8000878:	496c      	ldr	r1, [pc, #432]	; (8000a2c <__aeabi_fdiv+0x20c>)
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	588a      	ldr	r2, [r1, r2]
 800087e:	4063      	eors	r3, r4
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4697      	mov	pc, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d16d      	bne.n	8000964 <__aeabi_fdiv+0x144>
 8000888:	2002      	movs	r0, #2
 800088a:	3fff      	subs	r7, #255	; 0xff
 800088c:	e033      	b.n	80008f6 <__aeabi_fdiv+0xd6>
 800088e:	2300      	movs	r3, #0
 8000890:	4698      	mov	r8, r3
 8000892:	0026      	movs	r6, r4
 8000894:	4645      	mov	r5, r8
 8000896:	4682      	mov	sl, r0
 8000898:	4653      	mov	r3, sl
 800089a:	2b02      	cmp	r3, #2
 800089c:	d100      	bne.n	80008a0 <__aeabi_fdiv+0x80>
 800089e:	e07f      	b.n	80009a0 <__aeabi_fdiv+0x180>
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fdiv+0x86>
 80008a4:	e094      	b.n	80009d0 <__aeabi_fdiv+0x1b0>
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d017      	beq.n	80008da <__aeabi_fdiv+0xba>
 80008aa:	0038      	movs	r0, r7
 80008ac:	307f      	adds	r0, #127	; 0x7f
 80008ae:	2800      	cmp	r0, #0
 80008b0:	dd5f      	ble.n	8000972 <__aeabi_fdiv+0x152>
 80008b2:	076b      	lsls	r3, r5, #29
 80008b4:	d004      	beq.n	80008c0 <__aeabi_fdiv+0xa0>
 80008b6:	230f      	movs	r3, #15
 80008b8:	402b      	ands	r3, r5
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fdiv+0xa0>
 80008be:	3504      	adds	r5, #4
 80008c0:	012b      	lsls	r3, r5, #4
 80008c2:	d503      	bpl.n	80008cc <__aeabi_fdiv+0xac>
 80008c4:	0038      	movs	r0, r7
 80008c6:	4b5a      	ldr	r3, [pc, #360]	; (8000a30 <__aeabi_fdiv+0x210>)
 80008c8:	3080      	adds	r0, #128	; 0x80
 80008ca:	401d      	ands	r5, r3
 80008cc:	28fe      	cmp	r0, #254	; 0xfe
 80008ce:	dc67      	bgt.n	80009a0 <__aeabi_fdiv+0x180>
 80008d0:	01ad      	lsls	r5, r5, #6
 80008d2:	0a6d      	lsrs	r5, r5, #9
 80008d4:	b2c0      	uxtb	r0, r0
 80008d6:	e002      	b.n	80008de <__aeabi_fdiv+0xbe>
 80008d8:	001e      	movs	r6, r3
 80008da:	2000      	movs	r0, #0
 80008dc:	2500      	movs	r5, #0
 80008de:	05c0      	lsls	r0, r0, #23
 80008e0:	4328      	orrs	r0, r5
 80008e2:	07f6      	lsls	r6, r6, #31
 80008e4:	4330      	orrs	r0, r6
 80008e6:	bce0      	pop	{r5, r6, r7}
 80008e8:	46ba      	mov	sl, r7
 80008ea:	46b1      	mov	r9, r6
 80008ec:	46a8      	mov	r8, r5
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d12b      	bne.n	800094c <__aeabi_fdiv+0x12c>
 80008f4:	2001      	movs	r0, #1
 80008f6:	464a      	mov	r2, r9
 80008f8:	0033      	movs	r3, r6
 80008fa:	494e      	ldr	r1, [pc, #312]	; (8000a34 <__aeabi_fdiv+0x214>)
 80008fc:	4302      	orrs	r2, r0
 80008fe:	0092      	lsls	r2, r2, #2
 8000900:	588a      	ldr	r2, [r1, r2]
 8000902:	4063      	eors	r3, r4
 8000904:	b2db      	uxtb	r3, r3
 8000906:	4697      	mov	pc, r2
 8000908:	2d00      	cmp	r5, #0
 800090a:	d113      	bne.n	8000934 <__aeabi_fdiv+0x114>
 800090c:	2304      	movs	r3, #4
 800090e:	4699      	mov	r9, r3
 8000910:	3b03      	subs	r3, #3
 8000912:	2700      	movs	r7, #0
 8000914:	469a      	mov	sl, r3
 8000916:	e79a      	b.n	800084e <__aeabi_fdiv+0x2e>
 8000918:	2d00      	cmp	r5, #0
 800091a:	d105      	bne.n	8000928 <__aeabi_fdiv+0x108>
 800091c:	2308      	movs	r3, #8
 800091e:	4699      	mov	r9, r3
 8000920:	3b06      	subs	r3, #6
 8000922:	27ff      	movs	r7, #255	; 0xff
 8000924:	469a      	mov	sl, r3
 8000926:	e792      	b.n	800084e <__aeabi_fdiv+0x2e>
 8000928:	230c      	movs	r3, #12
 800092a:	4699      	mov	r9, r3
 800092c:	3b09      	subs	r3, #9
 800092e:	27ff      	movs	r7, #255	; 0xff
 8000930:	469a      	mov	sl, r3
 8000932:	e78c      	b.n	800084e <__aeabi_fdiv+0x2e>
 8000934:	0028      	movs	r0, r5
 8000936:	f002 f9e9 	bl	8002d0c <__clzsi2>
 800093a:	2776      	movs	r7, #118	; 0x76
 800093c:	1f43      	subs	r3, r0, #5
 800093e:	409d      	lsls	r5, r3
 8000940:	2300      	movs	r3, #0
 8000942:	427f      	negs	r7, r7
 8000944:	4699      	mov	r9, r3
 8000946:	469a      	mov	sl, r3
 8000948:	1a3f      	subs	r7, r7, r0
 800094a:	e780      	b.n	800084e <__aeabi_fdiv+0x2e>
 800094c:	0018      	movs	r0, r3
 800094e:	f002 f9dd 	bl	8002d0c <__clzsi2>
 8000952:	4642      	mov	r2, r8
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	2176      	movs	r1, #118	; 0x76
 8000958:	409a      	lsls	r2, r3
 800095a:	4249      	negs	r1, r1
 800095c:	1a09      	subs	r1, r1, r0
 800095e:	4690      	mov	r8, r2
 8000960:	2000      	movs	r0, #0
 8000962:	e785      	b.n	8000870 <__aeabi_fdiv+0x50>
 8000964:	21ff      	movs	r1, #255	; 0xff
 8000966:	2003      	movs	r0, #3
 8000968:	e782      	b.n	8000870 <__aeabi_fdiv+0x50>
 800096a:	001e      	movs	r6, r3
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	2500      	movs	r5, #0
 8000970:	e7b5      	b.n	80008de <__aeabi_fdiv+0xbe>
 8000972:	2301      	movs	r3, #1
 8000974:	1a1b      	subs	r3, r3, r0
 8000976:	2b1b      	cmp	r3, #27
 8000978:	dcaf      	bgt.n	80008da <__aeabi_fdiv+0xba>
 800097a:	379e      	adds	r7, #158	; 0x9e
 800097c:	0029      	movs	r1, r5
 800097e:	40bd      	lsls	r5, r7
 8000980:	40d9      	lsrs	r1, r3
 8000982:	1e6a      	subs	r2, r5, #1
 8000984:	4195      	sbcs	r5, r2
 8000986:	430d      	orrs	r5, r1
 8000988:	076b      	lsls	r3, r5, #29
 800098a:	d004      	beq.n	8000996 <__aeabi_fdiv+0x176>
 800098c:	230f      	movs	r3, #15
 800098e:	402b      	ands	r3, r5
 8000990:	2b04      	cmp	r3, #4
 8000992:	d000      	beq.n	8000996 <__aeabi_fdiv+0x176>
 8000994:	3504      	adds	r5, #4
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	d544      	bpl.n	8000a24 <__aeabi_fdiv+0x204>
 800099a:	2001      	movs	r0, #1
 800099c:	2500      	movs	r5, #0
 800099e:	e79e      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009a0:	20ff      	movs	r0, #255	; 0xff
 80009a2:	2500      	movs	r5, #0
 80009a4:	e79b      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009a6:	2580      	movs	r5, #128	; 0x80
 80009a8:	2600      	movs	r6, #0
 80009aa:	20ff      	movs	r0, #255	; 0xff
 80009ac:	03ed      	lsls	r5, r5, #15
 80009ae:	e796      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009b0:	2300      	movs	r3, #0
 80009b2:	4698      	mov	r8, r3
 80009b4:	2080      	movs	r0, #128	; 0x80
 80009b6:	03c0      	lsls	r0, r0, #15
 80009b8:	4205      	tst	r5, r0
 80009ba:	d009      	beq.n	80009d0 <__aeabi_fdiv+0x1b0>
 80009bc:	4643      	mov	r3, r8
 80009be:	4203      	tst	r3, r0
 80009c0:	d106      	bne.n	80009d0 <__aeabi_fdiv+0x1b0>
 80009c2:	4645      	mov	r5, r8
 80009c4:	4305      	orrs	r5, r0
 80009c6:	026d      	lsls	r5, r5, #9
 80009c8:	0026      	movs	r6, r4
 80009ca:	20ff      	movs	r0, #255	; 0xff
 80009cc:	0a6d      	lsrs	r5, r5, #9
 80009ce:	e786      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009d0:	2080      	movs	r0, #128	; 0x80
 80009d2:	03c0      	lsls	r0, r0, #15
 80009d4:	4305      	orrs	r5, r0
 80009d6:	026d      	lsls	r5, r5, #9
 80009d8:	20ff      	movs	r0, #255	; 0xff
 80009da:	0a6d      	lsrs	r5, r5, #9
 80009dc:	e77f      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009de:	4641      	mov	r1, r8
 80009e0:	016a      	lsls	r2, r5, #5
 80009e2:	0148      	lsls	r0, r1, #5
 80009e4:	4282      	cmp	r2, r0
 80009e6:	d219      	bcs.n	8000a1c <__aeabi_fdiv+0x1fc>
 80009e8:	211b      	movs	r1, #27
 80009ea:	2500      	movs	r5, #0
 80009ec:	3f01      	subs	r7, #1
 80009ee:	2601      	movs	r6, #1
 80009f0:	0014      	movs	r4, r2
 80009f2:	006d      	lsls	r5, r5, #1
 80009f4:	0052      	lsls	r2, r2, #1
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	db01      	blt.n	80009fe <__aeabi_fdiv+0x1de>
 80009fa:	4290      	cmp	r0, r2
 80009fc:	d801      	bhi.n	8000a02 <__aeabi_fdiv+0x1e2>
 80009fe:	1a12      	subs	r2, r2, r0
 8000a00:	4335      	orrs	r5, r6
 8000a02:	3901      	subs	r1, #1
 8000a04:	2900      	cmp	r1, #0
 8000a06:	d1f3      	bne.n	80009f0 <__aeabi_fdiv+0x1d0>
 8000a08:	1e50      	subs	r0, r2, #1
 8000a0a:	4182      	sbcs	r2, r0
 8000a0c:	0038      	movs	r0, r7
 8000a0e:	307f      	adds	r0, #127	; 0x7f
 8000a10:	001e      	movs	r6, r3
 8000a12:	4315      	orrs	r5, r2
 8000a14:	2800      	cmp	r0, #0
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_fdiv+0x1fa>
 8000a18:	e74b      	b.n	80008b2 <__aeabi_fdiv+0x92>
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fdiv+0x152>
 8000a1c:	211a      	movs	r1, #26
 8000a1e:	2501      	movs	r5, #1
 8000a20:	1a12      	subs	r2, r2, r0
 8000a22:	e7e4      	b.n	80009ee <__aeabi_fdiv+0x1ce>
 8000a24:	01ad      	lsls	r5, r5, #6
 8000a26:	2000      	movs	r0, #0
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	e758      	b.n	80008de <__aeabi_fdiv+0xbe>
 8000a2c:	0801ffd8 	.word	0x0801ffd8
 8000a30:	f7ffffff 	.word	0xf7ffffff
 8000a34:	08020018 	.word	0x08020018

08000a38 <__eqsf2>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	0042      	lsls	r2, r0, #1
 8000a3c:	024e      	lsls	r6, r1, #9
 8000a3e:	004c      	lsls	r4, r1, #1
 8000a40:	0245      	lsls	r5, r0, #9
 8000a42:	0a6d      	lsrs	r5, r5, #9
 8000a44:	0e12      	lsrs	r2, r2, #24
 8000a46:	0fc3      	lsrs	r3, r0, #31
 8000a48:	0a76      	lsrs	r6, r6, #9
 8000a4a:	0e24      	lsrs	r4, r4, #24
 8000a4c:	0fc9      	lsrs	r1, r1, #31
 8000a4e:	2aff      	cmp	r2, #255	; 0xff
 8000a50:	d00f      	beq.n	8000a72 <__eqsf2+0x3a>
 8000a52:	2cff      	cmp	r4, #255	; 0xff
 8000a54:	d011      	beq.n	8000a7a <__eqsf2+0x42>
 8000a56:	2001      	movs	r0, #1
 8000a58:	42a2      	cmp	r2, r4
 8000a5a:	d000      	beq.n	8000a5e <__eqsf2+0x26>
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
 8000a5e:	42b5      	cmp	r5, r6
 8000a60:	d1fc      	bne.n	8000a5c <__eqsf2+0x24>
 8000a62:	428b      	cmp	r3, r1
 8000a64:	d00d      	beq.n	8000a82 <__eqsf2+0x4a>
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d1f8      	bne.n	8000a5c <__eqsf2+0x24>
 8000a6a:	0028      	movs	r0, r5
 8000a6c:	1e45      	subs	r5, r0, #1
 8000a6e:	41a8      	sbcs	r0, r5
 8000a70:	e7f4      	b.n	8000a5c <__eqsf2+0x24>
 8000a72:	2001      	movs	r0, #1
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d1f1      	bne.n	8000a5c <__eqsf2+0x24>
 8000a78:	e7eb      	b.n	8000a52 <__eqsf2+0x1a>
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d1ed      	bne.n	8000a5c <__eqsf2+0x24>
 8000a80:	e7e9      	b.n	8000a56 <__eqsf2+0x1e>
 8000a82:	2000      	movs	r0, #0
 8000a84:	e7ea      	b.n	8000a5c <__eqsf2+0x24>
 8000a86:	46c0      	nop			; (mov r8, r8)

08000a88 <__gesf2>:
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	0246      	lsls	r6, r0, #9
 8000a8e:	024d      	lsls	r5, r1, #9
 8000a90:	004c      	lsls	r4, r1, #1
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a76      	lsrs	r6, r6, #9
 8000a96:	0e12      	lsrs	r2, r2, #24
 8000a98:	0a6d      	lsrs	r5, r5, #9
 8000a9a:	0e24      	lsrs	r4, r4, #24
 8000a9c:	0fc8      	lsrs	r0, r1, #31
 8000a9e:	2aff      	cmp	r2, #255	; 0xff
 8000aa0:	d01f      	beq.n	8000ae2 <__gesf2+0x5a>
 8000aa2:	2cff      	cmp	r4, #255	; 0xff
 8000aa4:	d010      	beq.n	8000ac8 <__gesf2+0x40>
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d11f      	bne.n	8000aea <__gesf2+0x62>
 8000aaa:	4271      	negs	r1, r6
 8000aac:	4171      	adcs	r1, r6
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d101      	bne.n	8000ab6 <__gesf2+0x2e>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d01e      	beq.n	8000af4 <__gesf2+0x6c>
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d10e      	bne.n	8000ad8 <__gesf2+0x50>
 8000aba:	4283      	cmp	r3, r0
 8000abc:	d01e      	beq.n	8000afc <__gesf2+0x74>
 8000abe:	2102      	movs	r1, #2
 8000ac0:	1e58      	subs	r0, r3, #1
 8000ac2:	4008      	ands	r0, r1
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d126      	bne.n	8000b1a <__gesf2+0x92>
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d1f4      	bne.n	8000aba <__gesf2+0x32>
 8000ad0:	4271      	negs	r1, r6
 8000ad2:	4171      	adcs	r1, r6
 8000ad4:	2900      	cmp	r1, #0
 8000ad6:	d0f0      	beq.n	8000aba <__gesf2+0x32>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d1f4      	bne.n	8000ac6 <__gesf2+0x3e>
 8000adc:	2001      	movs	r0, #1
 8000ade:	4240      	negs	r0, r0
 8000ae0:	e7f1      	b.n	8000ac6 <__gesf2+0x3e>
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d119      	bne.n	8000b1a <__gesf2+0x92>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d0ee      	beq.n	8000ac8 <__gesf2+0x40>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d1e5      	bne.n	8000aba <__gesf2+0x32>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d1e3      	bne.n	8000aba <__gesf2+0x32>
 8000af2:	e7e4      	b.n	8000abe <__gesf2+0x36>
 8000af4:	2000      	movs	r0, #0
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d0e5      	beq.n	8000ac6 <__gesf2+0x3e>
 8000afa:	e7e0      	b.n	8000abe <__gesf2+0x36>
 8000afc:	42a2      	cmp	r2, r4
 8000afe:	dc05      	bgt.n	8000b0c <__gesf2+0x84>
 8000b00:	dbea      	blt.n	8000ad8 <__gesf2+0x50>
 8000b02:	42ae      	cmp	r6, r5
 8000b04:	d802      	bhi.n	8000b0c <__gesf2+0x84>
 8000b06:	d3e7      	bcc.n	8000ad8 <__gesf2+0x50>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e7dc      	b.n	8000ac6 <__gesf2+0x3e>
 8000b0c:	4241      	negs	r1, r0
 8000b0e:	4141      	adcs	r1, r0
 8000b10:	4248      	negs	r0, r1
 8000b12:	2102      	movs	r1, #2
 8000b14:	4008      	ands	r0, r1
 8000b16:	3801      	subs	r0, #1
 8000b18:	e7d5      	b.n	8000ac6 <__gesf2+0x3e>
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	4240      	negs	r0, r0
 8000b1e:	e7d2      	b.n	8000ac6 <__gesf2+0x3e>

08000b20 <__lesf2>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	0042      	lsls	r2, r0, #1
 8000b24:	0246      	lsls	r6, r0, #9
 8000b26:	024d      	lsls	r5, r1, #9
 8000b28:	004c      	lsls	r4, r1, #1
 8000b2a:	0fc3      	lsrs	r3, r0, #31
 8000b2c:	0a76      	lsrs	r6, r6, #9
 8000b2e:	0e12      	lsrs	r2, r2, #24
 8000b30:	0a6d      	lsrs	r5, r5, #9
 8000b32:	0e24      	lsrs	r4, r4, #24
 8000b34:	0fc8      	lsrs	r0, r1, #31
 8000b36:	2aff      	cmp	r2, #255	; 0xff
 8000b38:	d00d      	beq.n	8000b56 <__lesf2+0x36>
 8000b3a:	2cff      	cmp	r4, #255	; 0xff
 8000b3c:	d00f      	beq.n	8000b5e <__lesf2+0x3e>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d123      	bne.n	8000b8a <__lesf2+0x6a>
 8000b42:	4271      	negs	r1, r6
 8000b44:	4171      	adcs	r1, r6
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d10f      	bne.n	8000b6a <__lesf2+0x4a>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d10d      	bne.n	8000b6a <__lesf2+0x4a>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	2e00      	cmp	r6, #0
 8000b52:	d014      	beq.n	8000b7e <__lesf2+0x5e>
 8000b54:	e00d      	b.n	8000b72 <__lesf2+0x52>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d110      	bne.n	8000b7c <__lesf2+0x5c>
 8000b5a:	2cff      	cmp	r4, #255	; 0xff
 8000b5c:	d115      	bne.n	8000b8a <__lesf2+0x6a>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d10c      	bne.n	8000b7c <__lesf2+0x5c>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d103      	bne.n	8000b6e <__lesf2+0x4e>
 8000b66:	4271      	negs	r1, r6
 8000b68:	4171      	adcs	r1, r6
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d108      	bne.n	8000b80 <__lesf2+0x60>
 8000b6e:	4283      	cmp	r3, r0
 8000b70:	d010      	beq.n	8000b94 <__lesf2+0x74>
 8000b72:	2102      	movs	r1, #2
 8000b74:	1e58      	subs	r0, r3, #1
 8000b76:	4008      	ands	r0, r1
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e000      	b.n	8000b7e <__lesf2+0x5e>
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d1fc      	bne.n	8000b7e <__lesf2+0x5e>
 8000b84:	2001      	movs	r0, #1
 8000b86:	4240      	negs	r0, r0
 8000b88:	e7f9      	b.n	8000b7e <__lesf2+0x5e>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d1ef      	bne.n	8000b6e <__lesf2+0x4e>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d1ed      	bne.n	8000b6e <__lesf2+0x4e>
 8000b92:	e7ee      	b.n	8000b72 <__lesf2+0x52>
 8000b94:	42a2      	cmp	r2, r4
 8000b96:	dc05      	bgt.n	8000ba4 <__lesf2+0x84>
 8000b98:	dbf2      	blt.n	8000b80 <__lesf2+0x60>
 8000b9a:	42ae      	cmp	r6, r5
 8000b9c:	d802      	bhi.n	8000ba4 <__lesf2+0x84>
 8000b9e:	d3ef      	bcc.n	8000b80 <__lesf2+0x60>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	e7ec      	b.n	8000b7e <__lesf2+0x5e>
 8000ba4:	4241      	negs	r1, r0
 8000ba6:	4141      	adcs	r1, r0
 8000ba8:	4248      	negs	r0, r1
 8000baa:	2102      	movs	r1, #2
 8000bac:	4008      	ands	r0, r1
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7e5      	b.n	8000b7e <__lesf2+0x5e>
 8000bb2:	46c0      	nop			; (mov r8, r8)

08000bb4 <__aeabi_fsub>:
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	4646      	mov	r6, r8
 8000bb8:	46d6      	mov	lr, sl
 8000bba:	464f      	mov	r7, r9
 8000bbc:	0243      	lsls	r3, r0, #9
 8000bbe:	0a5b      	lsrs	r3, r3, #9
 8000bc0:	00da      	lsls	r2, r3, #3
 8000bc2:	4694      	mov	ip, r2
 8000bc4:	024a      	lsls	r2, r1, #9
 8000bc6:	b5c0      	push	{r6, r7, lr}
 8000bc8:	0044      	lsls	r4, r0, #1
 8000bca:	0a56      	lsrs	r6, r2, #9
 8000bcc:	1c05      	adds	r5, r0, #0
 8000bce:	46b0      	mov	r8, r6
 8000bd0:	0e24      	lsrs	r4, r4, #24
 8000bd2:	004e      	lsls	r6, r1, #1
 8000bd4:	0992      	lsrs	r2, r2, #6
 8000bd6:	001f      	movs	r7, r3
 8000bd8:	0020      	movs	r0, r4
 8000bda:	4692      	mov	sl, r2
 8000bdc:	0fed      	lsrs	r5, r5, #31
 8000bde:	0e36      	lsrs	r6, r6, #24
 8000be0:	0fc9      	lsrs	r1, r1, #31
 8000be2:	2eff      	cmp	r6, #255	; 0xff
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fsub+0x34>
 8000be6:	e07f      	b.n	8000ce8 <__aeabi_fsub+0x134>
 8000be8:	2201      	movs	r2, #1
 8000bea:	4051      	eors	r1, r2
 8000bec:	428d      	cmp	r5, r1
 8000bee:	d051      	beq.n	8000c94 <__aeabi_fsub+0xe0>
 8000bf0:	1ba2      	subs	r2, r4, r6
 8000bf2:	4691      	mov	r9, r2
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	dc00      	bgt.n	8000bfa <__aeabi_fsub+0x46>
 8000bf8:	e07e      	b.n	8000cf8 <__aeabi_fsub+0x144>
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fsub+0x4c>
 8000bfe:	e099      	b.n	8000d34 <__aeabi_fsub+0x180>
 8000c00:	2cff      	cmp	r4, #255	; 0xff
 8000c02:	d100      	bne.n	8000c06 <__aeabi_fsub+0x52>
 8000c04:	e08c      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	4652      	mov	r2, sl
 8000c0a:	04db      	lsls	r3, r3, #19
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	4692      	mov	sl, r2
 8000c10:	464a      	mov	r2, r9
 8000c12:	2301      	movs	r3, #1
 8000c14:	2a1b      	cmp	r2, #27
 8000c16:	dc08      	bgt.n	8000c2a <__aeabi_fsub+0x76>
 8000c18:	4653      	mov	r3, sl
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	40d3      	lsrs	r3, r2
 8000c1e:	1a89      	subs	r1, r1, r2
 8000c20:	4652      	mov	r2, sl
 8000c22:	408a      	lsls	r2, r1
 8000c24:	1e51      	subs	r1, r2, #1
 8000c26:	418a      	sbcs	r2, r1
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	4662      	mov	r2, ip
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	015a      	lsls	r2, r3, #5
 8000c30:	d400      	bmi.n	8000c34 <__aeabi_fsub+0x80>
 8000c32:	e0f3      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	099e      	lsrs	r6, r3, #6
 8000c38:	0030      	movs	r0, r6
 8000c3a:	f002 f867 	bl	8002d0c <__clzsi2>
 8000c3e:	3805      	subs	r0, #5
 8000c40:	4086      	lsls	r6, r0
 8000c42:	4284      	cmp	r4, r0
 8000c44:	dd00      	ble.n	8000c48 <__aeabi_fsub+0x94>
 8000c46:	e0f7      	b.n	8000e38 <__aeabi_fsub+0x284>
 8000c48:	0032      	movs	r2, r6
 8000c4a:	1b04      	subs	r4, r0, r4
 8000c4c:	2020      	movs	r0, #32
 8000c4e:	3401      	adds	r4, #1
 8000c50:	40e2      	lsrs	r2, r4
 8000c52:	1b04      	subs	r4, r0, r4
 8000c54:	40a6      	lsls	r6, r4
 8000c56:	0033      	movs	r3, r6
 8000c58:	1e5e      	subs	r6, r3, #1
 8000c5a:	41b3      	sbcs	r3, r6
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	075a      	lsls	r2, r3, #29
 8000c62:	d004      	beq.n	8000c6e <__aeabi_fsub+0xba>
 8000c64:	220f      	movs	r2, #15
 8000c66:	401a      	ands	r2, r3
 8000c68:	2a04      	cmp	r2, #4
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_fsub+0xba>
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	015a      	lsls	r2, r3, #5
 8000c70:	d400      	bmi.n	8000c74 <__aeabi_fsub+0xc0>
 8000c72:	e0d6      	b.n	8000e22 <__aeabi_fsub+0x26e>
 8000c74:	1c62      	adds	r2, r4, #1
 8000c76:	2cfe      	cmp	r4, #254	; 0xfe
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fsub+0xc8>
 8000c7a:	e0da      	b.n	8000e32 <__aeabi_fsub+0x27e>
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	0a5f      	lsrs	r7, r3, #9
 8000c80:	b2d0      	uxtb	r0, r2
 8000c82:	05c0      	lsls	r0, r0, #23
 8000c84:	4338      	orrs	r0, r7
 8000c86:	07ed      	lsls	r5, r5, #31
 8000c88:	4328      	orrs	r0, r5
 8000c8a:	bce0      	pop	{r5, r6, r7}
 8000c8c:	46ba      	mov	sl, r7
 8000c8e:	46b1      	mov	r9, r6
 8000c90:	46a8      	mov	r8, r5
 8000c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c94:	1ba2      	subs	r2, r4, r6
 8000c96:	4691      	mov	r9, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	dd63      	ble.n	8000d64 <__aeabi_fsub+0x1b0>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_fsub+0xee>
 8000ca0:	e099      	b.n	8000dd6 <__aeabi_fsub+0x222>
 8000ca2:	2cff      	cmp	r4, #255	; 0xff
 8000ca4:	d03c      	beq.n	8000d20 <__aeabi_fsub+0x16c>
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	4652      	mov	r2, sl
 8000caa:	04db      	lsls	r3, r3, #19
 8000cac:	431a      	orrs	r2, r3
 8000cae:	4692      	mov	sl, r2
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	2a1b      	cmp	r2, #27
 8000cb6:	dc08      	bgt.n	8000cca <__aeabi_fsub+0x116>
 8000cb8:	4653      	mov	r3, sl
 8000cba:	2120      	movs	r1, #32
 8000cbc:	40d3      	lsrs	r3, r2
 8000cbe:	1a89      	subs	r1, r1, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	408a      	lsls	r2, r1
 8000cc4:	1e51      	subs	r1, r2, #1
 8000cc6:	418a      	sbcs	r2, r1
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	015a      	lsls	r2, r3, #5
 8000cce:	d400      	bmi.n	8000cd2 <__aeabi_fsub+0x11e>
 8000cd0:	e0a4      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000cd2:	3401      	adds	r4, #1
 8000cd4:	2cff      	cmp	r4, #255	; 0xff
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fsub+0x126>
 8000cd8:	e0ab      	b.n	8000e32 <__aeabi_fsub+0x27e>
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4997      	ldr	r1, [pc, #604]	; (8000f3c <__aeabi_fsub+0x388>)
 8000cde:	401a      	ands	r2, r3
 8000ce0:	085b      	lsrs	r3, r3, #1
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	e7bb      	b.n	8000c60 <__aeabi_fsub+0xac>
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	d032      	beq.n	8000d52 <__aeabi_fsub+0x19e>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d035      	beq.n	8000d5c <__aeabi_fsub+0x1a8>
 8000cf0:	22ff      	movs	r2, #255	; 0xff
 8000cf2:	4252      	negs	r2, r2
 8000cf4:	4691      	mov	r9, r2
 8000cf6:	44a1      	add	r9, r4
 8000cf8:	464a      	mov	r2, r9
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d051      	beq.n	8000da2 <__aeabi_fsub+0x1ee>
 8000cfe:	1b30      	subs	r0, r6, r4
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fsub+0x152>
 8000d04:	e09c      	b.n	8000e40 <__aeabi_fsub+0x28c>
 8000d06:	4663      	mov	r3, ip
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_fsub+0x15a>
 8000d0c:	e0df      	b.n	8000ece <__aeabi_fsub+0x31a>
 8000d0e:	3801      	subs	r0, #1
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x162>
 8000d14:	e0f7      	b.n	8000f06 <__aeabi_fsub+0x352>
 8000d16:	2eff      	cmp	r6, #255	; 0xff
 8000d18:	d000      	beq.n	8000d1c <__aeabi_fsub+0x168>
 8000d1a:	e099      	b.n	8000e50 <__aeabi_fsub+0x29c>
 8000d1c:	000d      	movs	r5, r1
 8000d1e:	4643      	mov	r3, r8
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fsub+0x172>
 8000d24:	e085      	b.n	8000e32 <__aeabi_fsub+0x27e>
 8000d26:	2780      	movs	r7, #128	; 0x80
 8000d28:	03ff      	lsls	r7, r7, #15
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	027f      	lsls	r7, r7, #9
 8000d2e:	20ff      	movs	r0, #255	; 0xff
 8000d30:	0a7f      	lsrs	r7, r7, #9
 8000d32:	e7a6      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000d34:	4652      	mov	r2, sl
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d074      	beq.n	8000e24 <__aeabi_fsub+0x270>
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	4690      	mov	r8, r2
 8000d40:	44c1      	add	r9, r8
 8000d42:	464a      	mov	r2, r9
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_fsub+0x196>
 8000d48:	e0c8      	b.n	8000edc <__aeabi_fsub+0x328>
 8000d4a:	2cff      	cmp	r4, #255	; 0xff
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fsub+0x19c>
 8000d4e:	e75f      	b.n	8000c10 <__aeabi_fsub+0x5c>
 8000d50:	e7e6      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000d52:	2201      	movs	r2, #1
 8000d54:	4051      	eors	r1, r2
 8000d56:	42a9      	cmp	r1, r5
 8000d58:	d000      	beq.n	8000d5c <__aeabi_fsub+0x1a8>
 8000d5a:	e749      	b.n	8000bf0 <__aeabi_fsub+0x3c>
 8000d5c:	22ff      	movs	r2, #255	; 0xff
 8000d5e:	4252      	negs	r2, r2
 8000d60:	4691      	mov	r9, r2
 8000d62:	44a1      	add	r9, r4
 8000d64:	464a      	mov	r2, r9
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d043      	beq.n	8000df2 <__aeabi_fsub+0x23e>
 8000d6a:	1b31      	subs	r1, r6, r4
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_fsub+0x1be>
 8000d70:	e08c      	b.n	8000e8c <__aeabi_fsub+0x2d8>
 8000d72:	2eff      	cmp	r6, #255	; 0xff
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x1c4>
 8000d76:	e092      	b.n	8000e9e <__aeabi_fsub+0x2ea>
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	4662      	mov	r2, ip
 8000d7c:	04db      	lsls	r3, r3, #19
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	4694      	mov	ip, r2
 8000d82:	2301      	movs	r3, #1
 8000d84:	291b      	cmp	r1, #27
 8000d86:	dc09      	bgt.n	8000d9c <__aeabi_fsub+0x1e8>
 8000d88:	2020      	movs	r0, #32
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	4662      	mov	r2, ip
 8000d8e:	40cb      	lsrs	r3, r1
 8000d90:	1a41      	subs	r1, r0, r1
 8000d92:	408a      	lsls	r2, r1
 8000d94:	0011      	movs	r1, r2
 8000d96:	1e48      	subs	r0, r1, #1
 8000d98:	4181      	sbcs	r1, r0
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	0034      	movs	r4, r6
 8000d9e:	4453      	add	r3, sl
 8000da0:	e794      	b.n	8000ccc <__aeabi_fsub+0x118>
 8000da2:	22fe      	movs	r2, #254	; 0xfe
 8000da4:	1c66      	adds	r6, r4, #1
 8000da6:	4232      	tst	r2, r6
 8000da8:	d164      	bne.n	8000e74 <__aeabi_fsub+0x2c0>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d000      	beq.n	8000db0 <__aeabi_fsub+0x1fc>
 8000dae:	e082      	b.n	8000eb6 <__aeabi_fsub+0x302>
 8000db0:	4663      	mov	r3, ip
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d100      	bne.n	8000db8 <__aeabi_fsub+0x204>
 8000db6:	e0ab      	b.n	8000f10 <__aeabi_fsub+0x35c>
 8000db8:	4653      	mov	r3, sl
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x20c>
 8000dbe:	e760      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000dc0:	4663      	mov	r3, ip
 8000dc2:	4652      	mov	r2, sl
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	015a      	lsls	r2, r3, #5
 8000dc8:	d400      	bmi.n	8000dcc <__aeabi_fsub+0x218>
 8000dca:	e0aa      	b.n	8000f22 <__aeabi_fsub+0x36e>
 8000dcc:	4663      	mov	r3, ip
 8000dce:	4652      	mov	r2, sl
 8000dd0:	000d      	movs	r5, r1
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	e744      	b.n	8000c60 <__aeabi_fsub+0xac>
 8000dd6:	4652      	mov	r2, sl
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d023      	beq.n	8000e24 <__aeabi_fsub+0x270>
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4252      	negs	r2, r2
 8000de0:	4690      	mov	r8, r2
 8000de2:	44c1      	add	r9, r8
 8000de4:	464a      	mov	r2, r9
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d075      	beq.n	8000ed6 <__aeabi_fsub+0x322>
 8000dea:	2cff      	cmp	r4, #255	; 0xff
 8000dec:	d000      	beq.n	8000df0 <__aeabi_fsub+0x23c>
 8000dee:	e75f      	b.n	8000cb0 <__aeabi_fsub+0xfc>
 8000df0:	e796      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000df2:	26fe      	movs	r6, #254	; 0xfe
 8000df4:	3401      	adds	r4, #1
 8000df6:	4226      	tst	r6, r4
 8000df8:	d153      	bne.n	8000ea2 <__aeabi_fsub+0x2ee>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d172      	bne.n	8000ee4 <__aeabi_fsub+0x330>
 8000dfe:	4663      	mov	r3, ip
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_fsub+0x252>
 8000e04:	e093      	b.n	8000f2e <__aeabi_fsub+0x37a>
 8000e06:	4653      	mov	r3, sl
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fsub+0x25a>
 8000e0c:	e739      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e0e:	4463      	add	r3, ip
 8000e10:	2400      	movs	r4, #0
 8000e12:	015a      	lsls	r2, r3, #5
 8000e14:	d502      	bpl.n	8000e1c <__aeabi_fsub+0x268>
 8000e16:	4a4a      	ldr	r2, [pc, #296]	; (8000f40 <__aeabi_fsub+0x38c>)
 8000e18:	3401      	adds	r4, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	075a      	lsls	r2, r3, #29
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_fsub+0x26e>
 8000e20:	e720      	b.n	8000c64 <__aeabi_fsub+0xb0>
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	2cff      	cmp	r4, #255	; 0xff
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x276>
 8000e28:	e77a      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000e2a:	025b      	lsls	r3, r3, #9
 8000e2c:	0a5f      	lsrs	r7, r3, #9
 8000e2e:	b2e0      	uxtb	r0, r4
 8000e30:	e727      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e32:	20ff      	movs	r0, #255	; 0xff
 8000e34:	2700      	movs	r7, #0
 8000e36:	e724      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e38:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <__aeabi_fsub+0x38c>)
 8000e3a:	1a24      	subs	r4, r4, r0
 8000e3c:	4033      	ands	r3, r6
 8000e3e:	e70f      	b.n	8000c60 <__aeabi_fsub+0xac>
 8000e40:	2eff      	cmp	r6, #255	; 0xff
 8000e42:	d100      	bne.n	8000e46 <__aeabi_fsub+0x292>
 8000e44:	e76a      	b.n	8000d1c <__aeabi_fsub+0x168>
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	4662      	mov	r2, ip
 8000e4a:	04db      	lsls	r3, r3, #19
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	4694      	mov	ip, r2
 8000e50:	2301      	movs	r3, #1
 8000e52:	281b      	cmp	r0, #27
 8000e54:	dc09      	bgt.n	8000e6a <__aeabi_fsub+0x2b6>
 8000e56:	2420      	movs	r4, #32
 8000e58:	4663      	mov	r3, ip
 8000e5a:	4662      	mov	r2, ip
 8000e5c:	40c3      	lsrs	r3, r0
 8000e5e:	1a20      	subs	r0, r4, r0
 8000e60:	4082      	lsls	r2, r0
 8000e62:	0010      	movs	r0, r2
 8000e64:	1e44      	subs	r4, r0, #1
 8000e66:	41a0      	sbcs	r0, r4
 8000e68:	4303      	orrs	r3, r0
 8000e6a:	4652      	mov	r2, sl
 8000e6c:	000d      	movs	r5, r1
 8000e6e:	0034      	movs	r4, r6
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	e6dc      	b.n	8000c2e <__aeabi_fsub+0x7a>
 8000e74:	4663      	mov	r3, ip
 8000e76:	4652      	mov	r2, sl
 8000e78:	1a9e      	subs	r6, r3, r2
 8000e7a:	0173      	lsls	r3, r6, #5
 8000e7c:	d417      	bmi.n	8000eae <__aeabi_fsub+0x2fa>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d000      	beq.n	8000e84 <__aeabi_fsub+0x2d0>
 8000e82:	e6d9      	b.n	8000c38 <__aeabi_fsub+0x84>
 8000e84:	2500      	movs	r5, #0
 8000e86:	2000      	movs	r0, #0
 8000e88:	2700      	movs	r7, #0
 8000e8a:	e6fa      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e8c:	4663      	mov	r3, ip
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d044      	beq.n	8000f1c <__aeabi_fsub+0x368>
 8000e92:	3901      	subs	r1, #1
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d04c      	beq.n	8000f32 <__aeabi_fsub+0x37e>
 8000e98:	2eff      	cmp	r6, #255	; 0xff
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_fsub+0x2ea>
 8000e9c:	e771      	b.n	8000d82 <__aeabi_fsub+0x1ce>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	e73e      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000ea2:	2cff      	cmp	r4, #255	; 0xff
 8000ea4:	d0c5      	beq.n	8000e32 <__aeabi_fsub+0x27e>
 8000ea6:	4652      	mov	r2, sl
 8000ea8:	4462      	add	r2, ip
 8000eaa:	0853      	lsrs	r3, r2, #1
 8000eac:	e7b6      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	000d      	movs	r5, r1
 8000eb2:	1ad6      	subs	r6, r2, r3
 8000eb4:	e6c0      	b.n	8000c38 <__aeabi_fsub+0x84>
 8000eb6:	4662      	mov	r2, ip
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d116      	bne.n	8000eea <__aeabi_fsub+0x336>
 8000ebc:	4653      	mov	r3, sl
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_fsub+0x310>
 8000ec2:	e72b      	b.n	8000d1c <__aeabi_fsub+0x168>
 8000ec4:	2780      	movs	r7, #128	; 0x80
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	20ff      	movs	r0, #255	; 0xff
 8000eca:	03ff      	lsls	r7, r7, #15
 8000ecc:	e6d9      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000ece:	000d      	movs	r5, r1
 8000ed0:	4643      	mov	r3, r8
 8000ed2:	0034      	movs	r4, r6
 8000ed4:	e7a6      	b.n	8000e24 <__aeabi_fsub+0x270>
 8000ed6:	4653      	mov	r3, sl
 8000ed8:	4463      	add	r3, ip
 8000eda:	e6f7      	b.n	8000ccc <__aeabi_fsub+0x118>
 8000edc:	4663      	mov	r3, ip
 8000ede:	4652      	mov	r2, sl
 8000ee0:	1a9b      	subs	r3, r3, r2
 8000ee2:	e6a4      	b.n	8000c2e <__aeabi_fsub+0x7a>
 8000ee4:	4662      	mov	r2, ip
 8000ee6:	2a00      	cmp	r2, #0
 8000ee8:	d0d9      	beq.n	8000e9e <__aeabi_fsub+0x2ea>
 8000eea:	4652      	mov	r2, sl
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x33e>
 8000ef0:	e716      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	03d2      	lsls	r2, r2, #15
 8000ef6:	4213      	tst	r3, r2
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x348>
 8000efa:	e711      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000efc:	4640      	mov	r0, r8
 8000efe:	4210      	tst	r0, r2
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x350>
 8000f02:	e70d      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000f04:	e70a      	b.n	8000d1c <__aeabi_fsub+0x168>
 8000f06:	4652      	mov	r2, sl
 8000f08:	000d      	movs	r5, r1
 8000f0a:	0034      	movs	r4, r6
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	e68e      	b.n	8000c2e <__aeabi_fsub+0x7a>
 8000f10:	4653      	mov	r3, sl
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <__aeabi_fsub+0x374>
 8000f16:	000d      	movs	r5, r1
 8000f18:	4647      	mov	r7, r8
 8000f1a:	e6b2      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	0034      	movs	r4, r6
 8000f20:	e780      	b.n	8000e24 <__aeabi_fsub+0x270>
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d000      	beq.n	8000f28 <__aeabi_fsub+0x374>
 8000f26:	e779      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000f28:	2500      	movs	r5, #0
 8000f2a:	2700      	movs	r7, #0
 8000f2c:	e6a9      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000f2e:	4647      	mov	r7, r8
 8000f30:	e6a7      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000f32:	4653      	mov	r3, sl
 8000f34:	0034      	movs	r4, r6
 8000f36:	4463      	add	r3, ip
 8000f38:	e6c8      	b.n	8000ccc <__aeabi_fsub+0x118>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	7dffffff 	.word	0x7dffffff
 8000f40:	fbffffff 	.word	0xfbffffff

08000f44 <__aeabi_f2iz>:
 8000f44:	0241      	lsls	r1, r0, #9
 8000f46:	0042      	lsls	r2, r0, #1
 8000f48:	0fc3      	lsrs	r3, r0, #31
 8000f4a:	0a49      	lsrs	r1, r1, #9
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	0e12      	lsrs	r2, r2, #24
 8000f50:	2a7e      	cmp	r2, #126	; 0x7e
 8000f52:	d903      	bls.n	8000f5c <__aeabi_f2iz+0x18>
 8000f54:	2a9d      	cmp	r2, #157	; 0x9d
 8000f56:	d902      	bls.n	8000f5e <__aeabi_f2iz+0x1a>
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <__aeabi_f2iz+0x3c>)
 8000f5a:	1898      	adds	r0, r3, r2
 8000f5c:	4770      	bx	lr
 8000f5e:	2080      	movs	r0, #128	; 0x80
 8000f60:	0400      	lsls	r0, r0, #16
 8000f62:	4301      	orrs	r1, r0
 8000f64:	2a95      	cmp	r2, #149	; 0x95
 8000f66:	dc07      	bgt.n	8000f78 <__aeabi_f2iz+0x34>
 8000f68:	2096      	movs	r0, #150	; 0x96
 8000f6a:	1a82      	subs	r2, r0, r2
 8000f6c:	40d1      	lsrs	r1, r2
 8000f6e:	4248      	negs	r0, r1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f3      	bne.n	8000f5c <__aeabi_f2iz+0x18>
 8000f74:	0008      	movs	r0, r1
 8000f76:	e7f1      	b.n	8000f5c <__aeabi_f2iz+0x18>
 8000f78:	3a96      	subs	r2, #150	; 0x96
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	e7f7      	b.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	7fffffff 	.word	0x7fffffff

08000f84 <__aeabi_i2f>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d013      	beq.n	8000fb2 <__aeabi_i2f+0x2e>
 8000f8a:	17c3      	asrs	r3, r0, #31
 8000f8c:	18c5      	adds	r5, r0, r3
 8000f8e:	405d      	eors	r5, r3
 8000f90:	0fc4      	lsrs	r4, r0, #31
 8000f92:	0028      	movs	r0, r5
 8000f94:	f001 feba 	bl	8002d0c <__clzsi2>
 8000f98:	239e      	movs	r3, #158	; 0x9e
 8000f9a:	0001      	movs	r1, r0
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	2b96      	cmp	r3, #150	; 0x96
 8000fa0:	dc0f      	bgt.n	8000fc2 <__aeabi_i2f+0x3e>
 8000fa2:	2808      	cmp	r0, #8
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_i2f+0x26>
 8000fa6:	3908      	subs	r1, #8
 8000fa8:	408d      	lsls	r5, r1
 8000faa:	026d      	lsls	r5, r5, #9
 8000fac:	0a6d      	lsrs	r5, r5, #9
 8000fae:	b2d8      	uxtb	r0, r3
 8000fb0:	e002      	b.n	8000fb8 <__aeabi_i2f+0x34>
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	05c0      	lsls	r0, r0, #23
 8000fba:	4328      	orrs	r0, r5
 8000fbc:	07e4      	lsls	r4, r4, #31
 8000fbe:	4320      	orrs	r0, r4
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
 8000fc2:	2b99      	cmp	r3, #153	; 0x99
 8000fc4:	dd0b      	ble.n	8000fde <__aeabi_i2f+0x5a>
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	002e      	movs	r6, r5
 8000fca:	1a12      	subs	r2, r2, r0
 8000fcc:	40d6      	lsrs	r6, r2
 8000fce:	0002      	movs	r2, r0
 8000fd0:	321b      	adds	r2, #27
 8000fd2:	4095      	lsls	r5, r2
 8000fd4:	0028      	movs	r0, r5
 8000fd6:	1e45      	subs	r5, r0, #1
 8000fd8:	41a8      	sbcs	r0, r5
 8000fda:	0035      	movs	r5, r6
 8000fdc:	4305      	orrs	r5, r0
 8000fde:	2905      	cmp	r1, #5
 8000fe0:	dd01      	ble.n	8000fe6 <__aeabi_i2f+0x62>
 8000fe2:	1f4a      	subs	r2, r1, #5
 8000fe4:	4095      	lsls	r5, r2
 8000fe6:	002a      	movs	r2, r5
 8000fe8:	4e08      	ldr	r6, [pc, #32]	; (800100c <__aeabi_i2f+0x88>)
 8000fea:	4032      	ands	r2, r6
 8000fec:	0768      	lsls	r0, r5, #29
 8000fee:	d009      	beq.n	8001004 <__aeabi_i2f+0x80>
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	4028      	ands	r0, r5
 8000ff4:	2804      	cmp	r0, #4
 8000ff6:	d005      	beq.n	8001004 <__aeabi_i2f+0x80>
 8000ff8:	3204      	adds	r2, #4
 8000ffa:	0150      	lsls	r0, r2, #5
 8000ffc:	d502      	bpl.n	8001004 <__aeabi_i2f+0x80>
 8000ffe:	239f      	movs	r3, #159	; 0x9f
 8001000:	4032      	ands	r2, r6
 8001002:	1a5b      	subs	r3, r3, r1
 8001004:	0192      	lsls	r2, r2, #6
 8001006:	0a55      	lsrs	r5, r2, #9
 8001008:	b2d8      	uxtb	r0, r3
 800100a:	e7d5      	b.n	8000fb8 <__aeabi_i2f+0x34>
 800100c:	fbffffff 	.word	0xfbffffff

08001010 <__aeabi_ui2f>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	1e05      	subs	r5, r0, #0
 8001014:	d00e      	beq.n	8001034 <__aeabi_ui2f+0x24>
 8001016:	f001 fe79 	bl	8002d0c <__clzsi2>
 800101a:	239e      	movs	r3, #158	; 0x9e
 800101c:	0004      	movs	r4, r0
 800101e:	1a1b      	subs	r3, r3, r0
 8001020:	2b96      	cmp	r3, #150	; 0x96
 8001022:	dc0c      	bgt.n	800103e <__aeabi_ui2f+0x2e>
 8001024:	2808      	cmp	r0, #8
 8001026:	dd01      	ble.n	800102c <__aeabi_ui2f+0x1c>
 8001028:	3c08      	subs	r4, #8
 800102a:	40a5      	lsls	r5, r4
 800102c:	026d      	lsls	r5, r5, #9
 800102e:	0a6d      	lsrs	r5, r5, #9
 8001030:	b2d8      	uxtb	r0, r3
 8001032:	e001      	b.n	8001038 <__aeabi_ui2f+0x28>
 8001034:	2000      	movs	r0, #0
 8001036:	2500      	movs	r5, #0
 8001038:	05c0      	lsls	r0, r0, #23
 800103a:	4328      	orrs	r0, r5
 800103c:	bd70      	pop	{r4, r5, r6, pc}
 800103e:	2b99      	cmp	r3, #153	; 0x99
 8001040:	dd09      	ble.n	8001056 <__aeabi_ui2f+0x46>
 8001042:	0002      	movs	r2, r0
 8001044:	0029      	movs	r1, r5
 8001046:	321b      	adds	r2, #27
 8001048:	4091      	lsls	r1, r2
 800104a:	1e4a      	subs	r2, r1, #1
 800104c:	4191      	sbcs	r1, r2
 800104e:	2205      	movs	r2, #5
 8001050:	1a12      	subs	r2, r2, r0
 8001052:	40d5      	lsrs	r5, r2
 8001054:	430d      	orrs	r5, r1
 8001056:	2c05      	cmp	r4, #5
 8001058:	dd01      	ble.n	800105e <__aeabi_ui2f+0x4e>
 800105a:	1f62      	subs	r2, r4, #5
 800105c:	4095      	lsls	r5, r2
 800105e:	0029      	movs	r1, r5
 8001060:	4e08      	ldr	r6, [pc, #32]	; (8001084 <__aeabi_ui2f+0x74>)
 8001062:	4031      	ands	r1, r6
 8001064:	076a      	lsls	r2, r5, #29
 8001066:	d009      	beq.n	800107c <__aeabi_ui2f+0x6c>
 8001068:	200f      	movs	r0, #15
 800106a:	4028      	ands	r0, r5
 800106c:	2804      	cmp	r0, #4
 800106e:	d005      	beq.n	800107c <__aeabi_ui2f+0x6c>
 8001070:	3104      	adds	r1, #4
 8001072:	014a      	lsls	r2, r1, #5
 8001074:	d502      	bpl.n	800107c <__aeabi_ui2f+0x6c>
 8001076:	239f      	movs	r3, #159	; 0x9f
 8001078:	4031      	ands	r1, r6
 800107a:	1b1b      	subs	r3, r3, r4
 800107c:	0189      	lsls	r1, r1, #6
 800107e:	0a4d      	lsrs	r5, r1, #9
 8001080:	b2d8      	uxtb	r0, r3
 8001082:	e7d9      	b.n	8001038 <__aeabi_ui2f+0x28>
 8001084:	fbffffff 	.word	0xfbffffff

08001088 <__aeabi_dadd>:
 8001088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108a:	464f      	mov	r7, r9
 800108c:	46d6      	mov	lr, sl
 800108e:	4646      	mov	r6, r8
 8001090:	000d      	movs	r5, r1
 8001092:	0001      	movs	r1, r0
 8001094:	0018      	movs	r0, r3
 8001096:	b5c0      	push	{r6, r7, lr}
 8001098:	0017      	movs	r7, r2
 800109a:	032b      	lsls	r3, r5, #12
 800109c:	0a5a      	lsrs	r2, r3, #9
 800109e:	0f4b      	lsrs	r3, r1, #29
 80010a0:	4313      	orrs	r3, r2
 80010a2:	00ca      	lsls	r2, r1, #3
 80010a4:	4691      	mov	r9, r2
 80010a6:	0302      	lsls	r2, r0, #12
 80010a8:	006e      	lsls	r6, r5, #1
 80010aa:	0041      	lsls	r1, r0, #1
 80010ac:	0a52      	lsrs	r2, r2, #9
 80010ae:	0fec      	lsrs	r4, r5, #31
 80010b0:	0f7d      	lsrs	r5, r7, #29
 80010b2:	4315      	orrs	r5, r2
 80010b4:	0d76      	lsrs	r6, r6, #21
 80010b6:	0d49      	lsrs	r1, r1, #21
 80010b8:	0fc0      	lsrs	r0, r0, #31
 80010ba:	4682      	mov	sl, r0
 80010bc:	46ac      	mov	ip, r5
 80010be:	00ff      	lsls	r7, r7, #3
 80010c0:	1a72      	subs	r2, r6, r1
 80010c2:	4284      	cmp	r4, r0
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dadd+0x40>
 80010c6:	e098      	b.n	80011fa <__aeabi_dadd+0x172>
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	dc00      	bgt.n	80010ce <__aeabi_dadd+0x46>
 80010cc:	e081      	b.n	80011d2 <__aeabi_dadd+0x14a>
 80010ce:	2900      	cmp	r1, #0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0x4c>
 80010d2:	e0b6      	b.n	8001242 <__aeabi_dadd+0x1ba>
 80010d4:	49c9      	ldr	r1, [pc, #804]	; (80013fc <__aeabi_dadd+0x374>)
 80010d6:	428e      	cmp	r6, r1
 80010d8:	d100      	bne.n	80010dc <__aeabi_dadd+0x54>
 80010da:	e172      	b.n	80013c2 <__aeabi_dadd+0x33a>
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0028      	movs	r0, r5
 80010e0:	0409      	lsls	r1, r1, #16
 80010e2:	4308      	orrs	r0, r1
 80010e4:	4684      	mov	ip, r0
 80010e6:	2a38      	cmp	r2, #56	; 0x38
 80010e8:	dd00      	ble.n	80010ec <__aeabi_dadd+0x64>
 80010ea:	e15e      	b.n	80013aa <__aeabi_dadd+0x322>
 80010ec:	2a1f      	cmp	r2, #31
 80010ee:	dd00      	ble.n	80010f2 <__aeabi_dadd+0x6a>
 80010f0:	e1ee      	b.n	80014d0 <__aeabi_dadd+0x448>
 80010f2:	2020      	movs	r0, #32
 80010f4:	0039      	movs	r1, r7
 80010f6:	4665      	mov	r5, ip
 80010f8:	1a80      	subs	r0, r0, r2
 80010fa:	4087      	lsls	r7, r0
 80010fc:	40d1      	lsrs	r1, r2
 80010fe:	4085      	lsls	r5, r0
 8001100:	430d      	orrs	r5, r1
 8001102:	0039      	movs	r1, r7
 8001104:	1e4f      	subs	r7, r1, #1
 8001106:	41b9      	sbcs	r1, r7
 8001108:	4667      	mov	r7, ip
 800110a:	40d7      	lsrs	r7, r2
 800110c:	4329      	orrs	r1, r5
 800110e:	1bdb      	subs	r3, r3, r7
 8001110:	464a      	mov	r2, r9
 8001112:	1a55      	subs	r5, r2, r1
 8001114:	45a9      	cmp	r9, r5
 8001116:	4189      	sbcs	r1, r1
 8001118:	4249      	negs	r1, r1
 800111a:	1a5b      	subs	r3, r3, r1
 800111c:	4698      	mov	r8, r3
 800111e:	4643      	mov	r3, r8
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	d400      	bmi.n	8001126 <__aeabi_dadd+0x9e>
 8001124:	e0cc      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001126:	4643      	mov	r3, r8
 8001128:	025b      	lsls	r3, r3, #9
 800112a:	0a5b      	lsrs	r3, r3, #9
 800112c:	4698      	mov	r8, r3
 800112e:	4643      	mov	r3, r8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0xae>
 8001134:	e12c      	b.n	8001390 <__aeabi_dadd+0x308>
 8001136:	4640      	mov	r0, r8
 8001138:	f001 fde8 	bl	8002d0c <__clzsi2>
 800113c:	0001      	movs	r1, r0
 800113e:	3908      	subs	r1, #8
 8001140:	2220      	movs	r2, #32
 8001142:	0028      	movs	r0, r5
 8001144:	4643      	mov	r3, r8
 8001146:	1a52      	subs	r2, r2, r1
 8001148:	408b      	lsls	r3, r1
 800114a:	40d0      	lsrs	r0, r2
 800114c:	408d      	lsls	r5, r1
 800114e:	4303      	orrs	r3, r0
 8001150:	428e      	cmp	r6, r1
 8001152:	dd00      	ble.n	8001156 <__aeabi_dadd+0xce>
 8001154:	e117      	b.n	8001386 <__aeabi_dadd+0x2fe>
 8001156:	1b8e      	subs	r6, r1, r6
 8001158:	1c72      	adds	r2, r6, #1
 800115a:	2a1f      	cmp	r2, #31
 800115c:	dd00      	ble.n	8001160 <__aeabi_dadd+0xd8>
 800115e:	e1a7      	b.n	80014b0 <__aeabi_dadd+0x428>
 8001160:	2120      	movs	r1, #32
 8001162:	0018      	movs	r0, r3
 8001164:	002e      	movs	r6, r5
 8001166:	1a89      	subs	r1, r1, r2
 8001168:	408d      	lsls	r5, r1
 800116a:	4088      	lsls	r0, r1
 800116c:	40d6      	lsrs	r6, r2
 800116e:	40d3      	lsrs	r3, r2
 8001170:	1e69      	subs	r1, r5, #1
 8001172:	418d      	sbcs	r5, r1
 8001174:	4330      	orrs	r0, r6
 8001176:	4698      	mov	r8, r3
 8001178:	2600      	movs	r6, #0
 800117a:	4305      	orrs	r5, r0
 800117c:	076b      	lsls	r3, r5, #29
 800117e:	d009      	beq.n	8001194 <__aeabi_dadd+0x10c>
 8001180:	230f      	movs	r3, #15
 8001182:	402b      	ands	r3, r5
 8001184:	2b04      	cmp	r3, #4
 8001186:	d005      	beq.n	8001194 <__aeabi_dadd+0x10c>
 8001188:	1d2b      	adds	r3, r5, #4
 800118a:	42ab      	cmp	r3, r5
 800118c:	41ad      	sbcs	r5, r5
 800118e:	426d      	negs	r5, r5
 8001190:	44a8      	add	r8, r5
 8001192:	001d      	movs	r5, r3
 8001194:	4643      	mov	r3, r8
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	d400      	bmi.n	800119c <__aeabi_dadd+0x114>
 800119a:	e094      	b.n	80012c6 <__aeabi_dadd+0x23e>
 800119c:	4b97      	ldr	r3, [pc, #604]	; (80013fc <__aeabi_dadd+0x374>)
 800119e:	1c72      	adds	r2, r6, #1
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dadd+0x11e>
 80011a4:	e09d      	b.n	80012e2 <__aeabi_dadd+0x25a>
 80011a6:	4641      	mov	r1, r8
 80011a8:	4b95      	ldr	r3, [pc, #596]	; (8001400 <__aeabi_dadd+0x378>)
 80011aa:	08ed      	lsrs	r5, r5, #3
 80011ac:	4019      	ands	r1, r3
 80011ae:	000b      	movs	r3, r1
 80011b0:	0552      	lsls	r2, r2, #21
 80011b2:	0749      	lsls	r1, r1, #29
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	4329      	orrs	r1, r5
 80011b8:	0b1b      	lsrs	r3, r3, #12
 80011ba:	0d52      	lsrs	r2, r2, #21
 80011bc:	0512      	lsls	r2, r2, #20
 80011be:	4313      	orrs	r3, r2
 80011c0:	07e4      	lsls	r4, r4, #31
 80011c2:	4323      	orrs	r3, r4
 80011c4:	0008      	movs	r0, r1
 80011c6:	0019      	movs	r1, r3
 80011c8:	bce0      	pop	{r5, r6, r7}
 80011ca:	46ba      	mov	sl, r7
 80011cc:	46b1      	mov	r9, r6
 80011ce:	46a8      	mov	r8, r5
 80011d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d043      	beq.n	800125e <__aeabi_dadd+0x1d6>
 80011d6:	1b8a      	subs	r2, r1, r6
 80011d8:	2e00      	cmp	r6, #0
 80011da:	d000      	beq.n	80011de <__aeabi_dadd+0x156>
 80011dc:	e12a      	b.n	8001434 <__aeabi_dadd+0x3ac>
 80011de:	464c      	mov	r4, r9
 80011e0:	431c      	orrs	r4, r3
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x15e>
 80011e4:	e1d1      	b.n	800158a <__aeabi_dadd+0x502>
 80011e6:	1e54      	subs	r4, r2, #1
 80011e8:	2a01      	cmp	r2, #1
 80011ea:	d100      	bne.n	80011ee <__aeabi_dadd+0x166>
 80011ec:	e21f      	b.n	800162e <__aeabi_dadd+0x5a6>
 80011ee:	4d83      	ldr	r5, [pc, #524]	; (80013fc <__aeabi_dadd+0x374>)
 80011f0:	42aa      	cmp	r2, r5
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x16e>
 80011f4:	e272      	b.n	80016dc <__aeabi_dadd+0x654>
 80011f6:	0022      	movs	r2, r4
 80011f8:	e123      	b.n	8001442 <__aeabi_dadd+0x3ba>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	dc00      	bgt.n	8001200 <__aeabi_dadd+0x178>
 80011fe:	e098      	b.n	8001332 <__aeabi_dadd+0x2aa>
 8001200:	2900      	cmp	r1, #0
 8001202:	d042      	beq.n	800128a <__aeabi_dadd+0x202>
 8001204:	497d      	ldr	r1, [pc, #500]	; (80013fc <__aeabi_dadd+0x374>)
 8001206:	428e      	cmp	r6, r1
 8001208:	d100      	bne.n	800120c <__aeabi_dadd+0x184>
 800120a:	e0da      	b.n	80013c2 <__aeabi_dadd+0x33a>
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0028      	movs	r0, r5
 8001210:	0409      	lsls	r1, r1, #16
 8001212:	4308      	orrs	r0, r1
 8001214:	4684      	mov	ip, r0
 8001216:	2a38      	cmp	r2, #56	; 0x38
 8001218:	dd00      	ble.n	800121c <__aeabi_dadd+0x194>
 800121a:	e129      	b.n	8001470 <__aeabi_dadd+0x3e8>
 800121c:	2a1f      	cmp	r2, #31
 800121e:	dc00      	bgt.n	8001222 <__aeabi_dadd+0x19a>
 8001220:	e187      	b.n	8001532 <__aeabi_dadd+0x4aa>
 8001222:	0011      	movs	r1, r2
 8001224:	4665      	mov	r5, ip
 8001226:	3920      	subs	r1, #32
 8001228:	40cd      	lsrs	r5, r1
 800122a:	2a20      	cmp	r2, #32
 800122c:	d004      	beq.n	8001238 <__aeabi_dadd+0x1b0>
 800122e:	2040      	movs	r0, #64	; 0x40
 8001230:	4661      	mov	r1, ip
 8001232:	1a82      	subs	r2, r0, r2
 8001234:	4091      	lsls	r1, r2
 8001236:	430f      	orrs	r7, r1
 8001238:	0039      	movs	r1, r7
 800123a:	1e4f      	subs	r7, r1, #1
 800123c:	41b9      	sbcs	r1, r7
 800123e:	430d      	orrs	r5, r1
 8001240:	e11b      	b.n	800147a <__aeabi_dadd+0x3f2>
 8001242:	0029      	movs	r1, r5
 8001244:	4339      	orrs	r1, r7
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x1c2>
 8001248:	e0b5      	b.n	80013b6 <__aeabi_dadd+0x32e>
 800124a:	1e51      	subs	r1, r2, #1
 800124c:	2a01      	cmp	r2, #1
 800124e:	d100      	bne.n	8001252 <__aeabi_dadd+0x1ca>
 8001250:	e1ab      	b.n	80015aa <__aeabi_dadd+0x522>
 8001252:	486a      	ldr	r0, [pc, #424]	; (80013fc <__aeabi_dadd+0x374>)
 8001254:	4282      	cmp	r2, r0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x1d2>
 8001258:	e1b2      	b.n	80015c0 <__aeabi_dadd+0x538>
 800125a:	000a      	movs	r2, r1
 800125c:	e743      	b.n	80010e6 <__aeabi_dadd+0x5e>
 800125e:	4969      	ldr	r1, [pc, #420]	; (8001404 <__aeabi_dadd+0x37c>)
 8001260:	1c75      	adds	r5, r6, #1
 8001262:	420d      	tst	r5, r1
 8001264:	d000      	beq.n	8001268 <__aeabi_dadd+0x1e0>
 8001266:	e0cf      	b.n	8001408 <__aeabi_dadd+0x380>
 8001268:	2e00      	cmp	r6, #0
 800126a:	d000      	beq.n	800126e <__aeabi_dadd+0x1e6>
 800126c:	e193      	b.n	8001596 <__aeabi_dadd+0x50e>
 800126e:	4649      	mov	r1, r9
 8001270:	4319      	orrs	r1, r3
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x1ee>
 8001274:	e1d1      	b.n	800161a <__aeabi_dadd+0x592>
 8001276:	4661      	mov	r1, ip
 8001278:	4339      	orrs	r1, r7
 800127a:	d000      	beq.n	800127e <__aeabi_dadd+0x1f6>
 800127c:	e1e3      	b.n	8001646 <__aeabi_dadd+0x5be>
 800127e:	4649      	mov	r1, r9
 8001280:	0758      	lsls	r0, r3, #29
 8001282:	08c9      	lsrs	r1, r1, #3
 8001284:	4301      	orrs	r1, r0
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	e026      	b.n	80012d8 <__aeabi_dadd+0x250>
 800128a:	0029      	movs	r1, r5
 800128c:	4339      	orrs	r1, r7
 800128e:	d100      	bne.n	8001292 <__aeabi_dadd+0x20a>
 8001290:	e091      	b.n	80013b6 <__aeabi_dadd+0x32e>
 8001292:	1e51      	subs	r1, r2, #1
 8001294:	2a01      	cmp	r2, #1
 8001296:	d005      	beq.n	80012a4 <__aeabi_dadd+0x21c>
 8001298:	4858      	ldr	r0, [pc, #352]	; (80013fc <__aeabi_dadd+0x374>)
 800129a:	4282      	cmp	r2, r0
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x218>
 800129e:	e18f      	b.n	80015c0 <__aeabi_dadd+0x538>
 80012a0:	000a      	movs	r2, r1
 80012a2:	e7b8      	b.n	8001216 <__aeabi_dadd+0x18e>
 80012a4:	003d      	movs	r5, r7
 80012a6:	444d      	add	r5, r9
 80012a8:	454d      	cmp	r5, r9
 80012aa:	4189      	sbcs	r1, r1
 80012ac:	4463      	add	r3, ip
 80012ae:	4698      	mov	r8, r3
 80012b0:	4249      	negs	r1, r1
 80012b2:	4488      	add	r8, r1
 80012b4:	4643      	mov	r3, r8
 80012b6:	2602      	movs	r6, #2
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	d500      	bpl.n	80012be <__aeabi_dadd+0x236>
 80012bc:	e0eb      	b.n	8001496 <__aeabi_dadd+0x40e>
 80012be:	3e01      	subs	r6, #1
 80012c0:	076b      	lsls	r3, r5, #29
 80012c2:	d000      	beq.n	80012c6 <__aeabi_dadd+0x23e>
 80012c4:	e75c      	b.n	8001180 <__aeabi_dadd+0xf8>
 80012c6:	4643      	mov	r3, r8
 80012c8:	08e9      	lsrs	r1, r5, #3
 80012ca:	075a      	lsls	r2, r3, #29
 80012cc:	4311      	orrs	r1, r2
 80012ce:	0032      	movs	r2, r6
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	484a      	ldr	r0, [pc, #296]	; (80013fc <__aeabi_dadd+0x374>)
 80012d4:	4282      	cmp	r2, r0
 80012d6:	d021      	beq.n	800131c <__aeabi_dadd+0x294>
 80012d8:	031b      	lsls	r3, r3, #12
 80012da:	0552      	lsls	r2, r2, #21
 80012dc:	0b1b      	lsrs	r3, r3, #12
 80012de:	0d52      	lsrs	r2, r2, #21
 80012e0:	e76c      	b.n	80011bc <__aeabi_dadd+0x134>
 80012e2:	2300      	movs	r3, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	e769      	b.n	80011bc <__aeabi_dadd+0x134>
 80012e8:	002a      	movs	r2, r5
 80012ea:	433a      	orrs	r2, r7
 80012ec:	d069      	beq.n	80013c2 <__aeabi_dadd+0x33a>
 80012ee:	464a      	mov	r2, r9
 80012f0:	0758      	lsls	r0, r3, #29
 80012f2:	08d1      	lsrs	r1, r2, #3
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	031b      	lsls	r3, r3, #12
 80012fa:	4308      	orrs	r0, r1
 80012fc:	421a      	tst	r2, r3
 80012fe:	d007      	beq.n	8001310 <__aeabi_dadd+0x288>
 8001300:	0029      	movs	r1, r5
 8001302:	08ed      	lsrs	r5, r5, #3
 8001304:	421d      	tst	r5, r3
 8001306:	d103      	bne.n	8001310 <__aeabi_dadd+0x288>
 8001308:	002a      	movs	r2, r5
 800130a:	08ff      	lsrs	r7, r7, #3
 800130c:	0748      	lsls	r0, r1, #29
 800130e:	4338      	orrs	r0, r7
 8001310:	0f43      	lsrs	r3, r0, #29
 8001312:	00c1      	lsls	r1, r0, #3
 8001314:	075b      	lsls	r3, r3, #29
 8001316:	08c9      	lsrs	r1, r1, #3
 8001318:	4319      	orrs	r1, r3
 800131a:	0013      	movs	r3, r2
 800131c:	000a      	movs	r2, r1
 800131e:	431a      	orrs	r2, r3
 8001320:	d100      	bne.n	8001324 <__aeabi_dadd+0x29c>
 8001322:	e213      	b.n	800174c <__aeabi_dadd+0x6c4>
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	0312      	lsls	r2, r2, #12
 8001328:	4313      	orrs	r3, r2
 800132a:	031b      	lsls	r3, r3, #12
 800132c:	4a33      	ldr	r2, [pc, #204]	; (80013fc <__aeabi_dadd+0x374>)
 800132e:	0b1b      	lsrs	r3, r3, #12
 8001330:	e744      	b.n	80011bc <__aeabi_dadd+0x134>
 8001332:	2a00      	cmp	r2, #0
 8001334:	d04b      	beq.n	80013ce <__aeabi_dadd+0x346>
 8001336:	1b8a      	subs	r2, r1, r6
 8001338:	2e00      	cmp	r6, #0
 800133a:	d100      	bne.n	800133e <__aeabi_dadd+0x2b6>
 800133c:	e0e7      	b.n	800150e <__aeabi_dadd+0x486>
 800133e:	482f      	ldr	r0, [pc, #188]	; (80013fc <__aeabi_dadd+0x374>)
 8001340:	4281      	cmp	r1, r0
 8001342:	d100      	bne.n	8001346 <__aeabi_dadd+0x2be>
 8001344:	e195      	b.n	8001672 <__aeabi_dadd+0x5ea>
 8001346:	2080      	movs	r0, #128	; 0x80
 8001348:	0400      	lsls	r0, r0, #16
 800134a:	4303      	orrs	r3, r0
 800134c:	2a38      	cmp	r2, #56	; 0x38
 800134e:	dd00      	ble.n	8001352 <__aeabi_dadd+0x2ca>
 8001350:	e143      	b.n	80015da <__aeabi_dadd+0x552>
 8001352:	2a1f      	cmp	r2, #31
 8001354:	dd00      	ble.n	8001358 <__aeabi_dadd+0x2d0>
 8001356:	e1db      	b.n	8001710 <__aeabi_dadd+0x688>
 8001358:	2020      	movs	r0, #32
 800135a:	001d      	movs	r5, r3
 800135c:	464e      	mov	r6, r9
 800135e:	1a80      	subs	r0, r0, r2
 8001360:	4085      	lsls	r5, r0
 8001362:	40d6      	lsrs	r6, r2
 8001364:	4335      	orrs	r5, r6
 8001366:	464e      	mov	r6, r9
 8001368:	4086      	lsls	r6, r0
 800136a:	0030      	movs	r0, r6
 800136c:	40d3      	lsrs	r3, r2
 800136e:	1e46      	subs	r6, r0, #1
 8001370:	41b0      	sbcs	r0, r6
 8001372:	449c      	add	ip, r3
 8001374:	4305      	orrs	r5, r0
 8001376:	19ed      	adds	r5, r5, r7
 8001378:	42bd      	cmp	r5, r7
 800137a:	419b      	sbcs	r3, r3
 800137c:	425b      	negs	r3, r3
 800137e:	4463      	add	r3, ip
 8001380:	4698      	mov	r8, r3
 8001382:	000e      	movs	r6, r1
 8001384:	e07f      	b.n	8001486 <__aeabi_dadd+0x3fe>
 8001386:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <__aeabi_dadd+0x378>)
 8001388:	1a76      	subs	r6, r6, r1
 800138a:	4013      	ands	r3, r2
 800138c:	4698      	mov	r8, r3
 800138e:	e6f5      	b.n	800117c <__aeabi_dadd+0xf4>
 8001390:	0028      	movs	r0, r5
 8001392:	f001 fcbb 	bl	8002d0c <__clzsi2>
 8001396:	0001      	movs	r1, r0
 8001398:	3118      	adds	r1, #24
 800139a:	291f      	cmp	r1, #31
 800139c:	dc00      	bgt.n	80013a0 <__aeabi_dadd+0x318>
 800139e:	e6cf      	b.n	8001140 <__aeabi_dadd+0xb8>
 80013a0:	002b      	movs	r3, r5
 80013a2:	3808      	subs	r0, #8
 80013a4:	4083      	lsls	r3, r0
 80013a6:	2500      	movs	r5, #0
 80013a8:	e6d2      	b.n	8001150 <__aeabi_dadd+0xc8>
 80013aa:	4662      	mov	r2, ip
 80013ac:	433a      	orrs	r2, r7
 80013ae:	0011      	movs	r1, r2
 80013b0:	1e4f      	subs	r7, r1, #1
 80013b2:	41b9      	sbcs	r1, r7
 80013b4:	e6ac      	b.n	8001110 <__aeabi_dadd+0x88>
 80013b6:	4649      	mov	r1, r9
 80013b8:	0758      	lsls	r0, r3, #29
 80013ba:	08c9      	lsrs	r1, r1, #3
 80013bc:	4301      	orrs	r1, r0
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	e787      	b.n	80012d2 <__aeabi_dadd+0x24a>
 80013c2:	4649      	mov	r1, r9
 80013c4:	075a      	lsls	r2, r3, #29
 80013c6:	08c9      	lsrs	r1, r1, #3
 80013c8:	4311      	orrs	r1, r2
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	e7a6      	b.n	800131c <__aeabi_dadd+0x294>
 80013ce:	490d      	ldr	r1, [pc, #52]	; (8001404 <__aeabi_dadd+0x37c>)
 80013d0:	1c70      	adds	r0, r6, #1
 80013d2:	4208      	tst	r0, r1
 80013d4:	d000      	beq.n	80013d8 <__aeabi_dadd+0x350>
 80013d6:	e0bb      	b.n	8001550 <__aeabi_dadd+0x4c8>
 80013d8:	2e00      	cmp	r6, #0
 80013da:	d000      	beq.n	80013de <__aeabi_dadd+0x356>
 80013dc:	e114      	b.n	8001608 <__aeabi_dadd+0x580>
 80013de:	4649      	mov	r1, r9
 80013e0:	4319      	orrs	r1, r3
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x35e>
 80013e4:	e175      	b.n	80016d2 <__aeabi_dadd+0x64a>
 80013e6:	0029      	movs	r1, r5
 80013e8:	4339      	orrs	r1, r7
 80013ea:	d000      	beq.n	80013ee <__aeabi_dadd+0x366>
 80013ec:	e17e      	b.n	80016ec <__aeabi_dadd+0x664>
 80013ee:	4649      	mov	r1, r9
 80013f0:	0758      	lsls	r0, r3, #29
 80013f2:	08c9      	lsrs	r1, r1, #3
 80013f4:	4301      	orrs	r1, r0
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	e76e      	b.n	80012d8 <__aeabi_dadd+0x250>
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	000007ff 	.word	0x000007ff
 8001400:	ff7fffff 	.word	0xff7fffff
 8001404:	000007fe 	.word	0x000007fe
 8001408:	4649      	mov	r1, r9
 800140a:	1bcd      	subs	r5, r1, r7
 800140c:	4661      	mov	r1, ip
 800140e:	1a58      	subs	r0, r3, r1
 8001410:	45a9      	cmp	r9, r5
 8001412:	4189      	sbcs	r1, r1
 8001414:	4249      	negs	r1, r1
 8001416:	4688      	mov	r8, r1
 8001418:	0001      	movs	r1, r0
 800141a:	4640      	mov	r0, r8
 800141c:	1a09      	subs	r1, r1, r0
 800141e:	4688      	mov	r8, r1
 8001420:	0209      	lsls	r1, r1, #8
 8001422:	d500      	bpl.n	8001426 <__aeabi_dadd+0x39e>
 8001424:	e0a6      	b.n	8001574 <__aeabi_dadd+0x4ec>
 8001426:	4641      	mov	r1, r8
 8001428:	4329      	orrs	r1, r5
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x3a6>
 800142c:	e67f      	b.n	800112e <__aeabi_dadd+0xa6>
 800142e:	2300      	movs	r3, #0
 8001430:	2400      	movs	r4, #0
 8001432:	e751      	b.n	80012d8 <__aeabi_dadd+0x250>
 8001434:	4cc7      	ldr	r4, [pc, #796]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001436:	42a1      	cmp	r1, r4
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x3b4>
 800143a:	e0c7      	b.n	80015cc <__aeabi_dadd+0x544>
 800143c:	2480      	movs	r4, #128	; 0x80
 800143e:	0424      	lsls	r4, r4, #16
 8001440:	4323      	orrs	r3, r4
 8001442:	2a38      	cmp	r2, #56	; 0x38
 8001444:	dc54      	bgt.n	80014f0 <__aeabi_dadd+0x468>
 8001446:	2a1f      	cmp	r2, #31
 8001448:	dd00      	ble.n	800144c <__aeabi_dadd+0x3c4>
 800144a:	e0cc      	b.n	80015e6 <__aeabi_dadd+0x55e>
 800144c:	2420      	movs	r4, #32
 800144e:	4648      	mov	r0, r9
 8001450:	1aa4      	subs	r4, r4, r2
 8001452:	001d      	movs	r5, r3
 8001454:	464e      	mov	r6, r9
 8001456:	40a0      	lsls	r0, r4
 8001458:	40d6      	lsrs	r6, r2
 800145a:	40a5      	lsls	r5, r4
 800145c:	0004      	movs	r4, r0
 800145e:	40d3      	lsrs	r3, r2
 8001460:	4662      	mov	r2, ip
 8001462:	4335      	orrs	r5, r6
 8001464:	1e66      	subs	r6, r4, #1
 8001466:	41b4      	sbcs	r4, r6
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	469c      	mov	ip, r3
 800146c:	4325      	orrs	r5, r4
 800146e:	e044      	b.n	80014fa <__aeabi_dadd+0x472>
 8001470:	4662      	mov	r2, ip
 8001472:	433a      	orrs	r2, r7
 8001474:	0015      	movs	r5, r2
 8001476:	1e6f      	subs	r7, r5, #1
 8001478:	41bd      	sbcs	r5, r7
 800147a:	444d      	add	r5, r9
 800147c:	454d      	cmp	r5, r9
 800147e:	4189      	sbcs	r1, r1
 8001480:	4249      	negs	r1, r1
 8001482:	4688      	mov	r8, r1
 8001484:	4498      	add	r8, r3
 8001486:	4643      	mov	r3, r8
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	d400      	bmi.n	800148e <__aeabi_dadd+0x406>
 800148c:	e718      	b.n	80012c0 <__aeabi_dadd+0x238>
 800148e:	4bb1      	ldr	r3, [pc, #708]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001490:	3601      	adds	r6, #1
 8001492:	429e      	cmp	r6, r3
 8001494:	d049      	beq.n	800152a <__aeabi_dadd+0x4a2>
 8001496:	4642      	mov	r2, r8
 8001498:	4baf      	ldr	r3, [pc, #700]	; (8001758 <__aeabi_dadd+0x6d0>)
 800149a:	2101      	movs	r1, #1
 800149c:	401a      	ands	r2, r3
 800149e:	0013      	movs	r3, r2
 80014a0:	086a      	lsrs	r2, r5, #1
 80014a2:	400d      	ands	r5, r1
 80014a4:	4315      	orrs	r5, r2
 80014a6:	07d9      	lsls	r1, r3, #31
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	4698      	mov	r8, r3
 80014ac:	430d      	orrs	r5, r1
 80014ae:	e665      	b.n	800117c <__aeabi_dadd+0xf4>
 80014b0:	0018      	movs	r0, r3
 80014b2:	3e1f      	subs	r6, #31
 80014b4:	40f0      	lsrs	r0, r6
 80014b6:	2a20      	cmp	r2, #32
 80014b8:	d003      	beq.n	80014c2 <__aeabi_dadd+0x43a>
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	1a8a      	subs	r2, r1, r2
 80014be:	4093      	lsls	r3, r2
 80014c0:	431d      	orrs	r5, r3
 80014c2:	1e69      	subs	r1, r5, #1
 80014c4:	418d      	sbcs	r5, r1
 80014c6:	2300      	movs	r3, #0
 80014c8:	2600      	movs	r6, #0
 80014ca:	4698      	mov	r8, r3
 80014cc:	4305      	orrs	r5, r0
 80014ce:	e6f7      	b.n	80012c0 <__aeabi_dadd+0x238>
 80014d0:	0011      	movs	r1, r2
 80014d2:	4665      	mov	r5, ip
 80014d4:	3920      	subs	r1, #32
 80014d6:	40cd      	lsrs	r5, r1
 80014d8:	2a20      	cmp	r2, #32
 80014da:	d004      	beq.n	80014e6 <__aeabi_dadd+0x45e>
 80014dc:	2040      	movs	r0, #64	; 0x40
 80014de:	4661      	mov	r1, ip
 80014e0:	1a82      	subs	r2, r0, r2
 80014e2:	4091      	lsls	r1, r2
 80014e4:	430f      	orrs	r7, r1
 80014e6:	0039      	movs	r1, r7
 80014e8:	1e4f      	subs	r7, r1, #1
 80014ea:	41b9      	sbcs	r1, r7
 80014ec:	4329      	orrs	r1, r5
 80014ee:	e60f      	b.n	8001110 <__aeabi_dadd+0x88>
 80014f0:	464a      	mov	r2, r9
 80014f2:	4313      	orrs	r3, r2
 80014f4:	001d      	movs	r5, r3
 80014f6:	1e6b      	subs	r3, r5, #1
 80014f8:	419d      	sbcs	r5, r3
 80014fa:	1b7d      	subs	r5, r7, r5
 80014fc:	42af      	cmp	r7, r5
 80014fe:	419b      	sbcs	r3, r3
 8001500:	4662      	mov	r2, ip
 8001502:	425b      	negs	r3, r3
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	4698      	mov	r8, r3
 8001508:	4654      	mov	r4, sl
 800150a:	000e      	movs	r6, r1
 800150c:	e607      	b.n	800111e <__aeabi_dadd+0x96>
 800150e:	4648      	mov	r0, r9
 8001510:	4318      	orrs	r0, r3
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x48e>
 8001514:	e0b3      	b.n	800167e <__aeabi_dadd+0x5f6>
 8001516:	1e50      	subs	r0, r2, #1
 8001518:	2a01      	cmp	r2, #1
 800151a:	d100      	bne.n	800151e <__aeabi_dadd+0x496>
 800151c:	e10d      	b.n	800173a <__aeabi_dadd+0x6b2>
 800151e:	4d8d      	ldr	r5, [pc, #564]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001520:	42aa      	cmp	r2, r5
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x49e>
 8001524:	e0a5      	b.n	8001672 <__aeabi_dadd+0x5ea>
 8001526:	0002      	movs	r2, r0
 8001528:	e710      	b.n	800134c <__aeabi_dadd+0x2c4>
 800152a:	0032      	movs	r2, r6
 800152c:	2300      	movs	r3, #0
 800152e:	2100      	movs	r1, #0
 8001530:	e644      	b.n	80011bc <__aeabi_dadd+0x134>
 8001532:	2120      	movs	r1, #32
 8001534:	0038      	movs	r0, r7
 8001536:	1a89      	subs	r1, r1, r2
 8001538:	4665      	mov	r5, ip
 800153a:	408f      	lsls	r7, r1
 800153c:	408d      	lsls	r5, r1
 800153e:	40d0      	lsrs	r0, r2
 8001540:	1e79      	subs	r1, r7, #1
 8001542:	418f      	sbcs	r7, r1
 8001544:	4305      	orrs	r5, r0
 8001546:	433d      	orrs	r5, r7
 8001548:	4667      	mov	r7, ip
 800154a:	40d7      	lsrs	r7, r2
 800154c:	19db      	adds	r3, r3, r7
 800154e:	e794      	b.n	800147a <__aeabi_dadd+0x3f2>
 8001550:	4a80      	ldr	r2, [pc, #512]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001552:	4290      	cmp	r0, r2
 8001554:	d100      	bne.n	8001558 <__aeabi_dadd+0x4d0>
 8001556:	e0ec      	b.n	8001732 <__aeabi_dadd+0x6aa>
 8001558:	0039      	movs	r1, r7
 800155a:	4449      	add	r1, r9
 800155c:	4549      	cmp	r1, r9
 800155e:	4192      	sbcs	r2, r2
 8001560:	4463      	add	r3, ip
 8001562:	4252      	negs	r2, r2
 8001564:	189b      	adds	r3, r3, r2
 8001566:	07dd      	lsls	r5, r3, #31
 8001568:	0849      	lsrs	r1, r1, #1
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	4698      	mov	r8, r3
 800156e:	0006      	movs	r6, r0
 8001570:	430d      	orrs	r5, r1
 8001572:	e6a5      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001574:	464a      	mov	r2, r9
 8001576:	1abd      	subs	r5, r7, r2
 8001578:	42af      	cmp	r7, r5
 800157a:	4189      	sbcs	r1, r1
 800157c:	4662      	mov	r2, ip
 800157e:	4249      	negs	r1, r1
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	1a5b      	subs	r3, r3, r1
 8001584:	4698      	mov	r8, r3
 8001586:	4654      	mov	r4, sl
 8001588:	e5d1      	b.n	800112e <__aeabi_dadd+0xa6>
 800158a:	076c      	lsls	r4, r5, #29
 800158c:	08f9      	lsrs	r1, r7, #3
 800158e:	4321      	orrs	r1, r4
 8001590:	08eb      	lsrs	r3, r5, #3
 8001592:	0004      	movs	r4, r0
 8001594:	e69d      	b.n	80012d2 <__aeabi_dadd+0x24a>
 8001596:	464a      	mov	r2, r9
 8001598:	431a      	orrs	r2, r3
 800159a:	d175      	bne.n	8001688 <__aeabi_dadd+0x600>
 800159c:	4661      	mov	r1, ip
 800159e:	4339      	orrs	r1, r7
 80015a0:	d114      	bne.n	80015cc <__aeabi_dadd+0x544>
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	2400      	movs	r4, #0
 80015a6:	031b      	lsls	r3, r3, #12
 80015a8:	e6bc      	b.n	8001324 <__aeabi_dadd+0x29c>
 80015aa:	464a      	mov	r2, r9
 80015ac:	1bd5      	subs	r5, r2, r7
 80015ae:	45a9      	cmp	r9, r5
 80015b0:	4189      	sbcs	r1, r1
 80015b2:	4662      	mov	r2, ip
 80015b4:	4249      	negs	r1, r1
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	1a5b      	subs	r3, r3, r1
 80015ba:	4698      	mov	r8, r3
 80015bc:	2601      	movs	r6, #1
 80015be:	e5ae      	b.n	800111e <__aeabi_dadd+0x96>
 80015c0:	464a      	mov	r2, r9
 80015c2:	08d1      	lsrs	r1, r2, #3
 80015c4:	075a      	lsls	r2, r3, #29
 80015c6:	4311      	orrs	r1, r2
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	e6a7      	b.n	800131c <__aeabi_dadd+0x294>
 80015cc:	4663      	mov	r3, ip
 80015ce:	08f9      	lsrs	r1, r7, #3
 80015d0:	075a      	lsls	r2, r3, #29
 80015d2:	4654      	mov	r4, sl
 80015d4:	4311      	orrs	r1, r2
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	e6a0      	b.n	800131c <__aeabi_dadd+0x294>
 80015da:	464a      	mov	r2, r9
 80015dc:	4313      	orrs	r3, r2
 80015de:	001d      	movs	r5, r3
 80015e0:	1e6b      	subs	r3, r5, #1
 80015e2:	419d      	sbcs	r5, r3
 80015e4:	e6c7      	b.n	8001376 <__aeabi_dadd+0x2ee>
 80015e6:	0014      	movs	r4, r2
 80015e8:	001e      	movs	r6, r3
 80015ea:	3c20      	subs	r4, #32
 80015ec:	40e6      	lsrs	r6, r4
 80015ee:	2a20      	cmp	r2, #32
 80015f0:	d005      	beq.n	80015fe <__aeabi_dadd+0x576>
 80015f2:	2440      	movs	r4, #64	; 0x40
 80015f4:	1aa2      	subs	r2, r4, r2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	464a      	mov	r2, r9
 80015fa:	431a      	orrs	r2, r3
 80015fc:	4691      	mov	r9, r2
 80015fe:	464d      	mov	r5, r9
 8001600:	1e6b      	subs	r3, r5, #1
 8001602:	419d      	sbcs	r5, r3
 8001604:	4335      	orrs	r5, r6
 8001606:	e778      	b.n	80014fa <__aeabi_dadd+0x472>
 8001608:	464a      	mov	r2, r9
 800160a:	431a      	orrs	r2, r3
 800160c:	d000      	beq.n	8001610 <__aeabi_dadd+0x588>
 800160e:	e66b      	b.n	80012e8 <__aeabi_dadd+0x260>
 8001610:	076b      	lsls	r3, r5, #29
 8001612:	08f9      	lsrs	r1, r7, #3
 8001614:	4319      	orrs	r1, r3
 8001616:	08eb      	lsrs	r3, r5, #3
 8001618:	e680      	b.n	800131c <__aeabi_dadd+0x294>
 800161a:	4661      	mov	r1, ip
 800161c:	4339      	orrs	r1, r7
 800161e:	d054      	beq.n	80016ca <__aeabi_dadd+0x642>
 8001620:	4663      	mov	r3, ip
 8001622:	08f9      	lsrs	r1, r7, #3
 8001624:	075c      	lsls	r4, r3, #29
 8001626:	4321      	orrs	r1, r4
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	0004      	movs	r4, r0
 800162c:	e654      	b.n	80012d8 <__aeabi_dadd+0x250>
 800162e:	464a      	mov	r2, r9
 8001630:	1abd      	subs	r5, r7, r2
 8001632:	42af      	cmp	r7, r5
 8001634:	4189      	sbcs	r1, r1
 8001636:	4662      	mov	r2, ip
 8001638:	4249      	negs	r1, r1
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	1a5b      	subs	r3, r3, r1
 800163e:	4698      	mov	r8, r3
 8001640:	0004      	movs	r4, r0
 8001642:	2601      	movs	r6, #1
 8001644:	e56b      	b.n	800111e <__aeabi_dadd+0x96>
 8001646:	464a      	mov	r2, r9
 8001648:	1bd5      	subs	r5, r2, r7
 800164a:	45a9      	cmp	r9, r5
 800164c:	4189      	sbcs	r1, r1
 800164e:	4662      	mov	r2, ip
 8001650:	4249      	negs	r1, r1
 8001652:	1a9a      	subs	r2, r3, r2
 8001654:	1a52      	subs	r2, r2, r1
 8001656:	4690      	mov	r8, r2
 8001658:	0212      	lsls	r2, r2, #8
 800165a:	d532      	bpl.n	80016c2 <__aeabi_dadd+0x63a>
 800165c:	464a      	mov	r2, r9
 800165e:	1abd      	subs	r5, r7, r2
 8001660:	42af      	cmp	r7, r5
 8001662:	4189      	sbcs	r1, r1
 8001664:	4662      	mov	r2, ip
 8001666:	4249      	negs	r1, r1
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	1a5b      	subs	r3, r3, r1
 800166c:	4698      	mov	r8, r3
 800166e:	0004      	movs	r4, r0
 8001670:	e584      	b.n	800117c <__aeabi_dadd+0xf4>
 8001672:	4663      	mov	r3, ip
 8001674:	08f9      	lsrs	r1, r7, #3
 8001676:	075a      	lsls	r2, r3, #29
 8001678:	4311      	orrs	r1, r2
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	e64e      	b.n	800131c <__aeabi_dadd+0x294>
 800167e:	08f9      	lsrs	r1, r7, #3
 8001680:	0768      	lsls	r0, r5, #29
 8001682:	4301      	orrs	r1, r0
 8001684:	08eb      	lsrs	r3, r5, #3
 8001686:	e624      	b.n	80012d2 <__aeabi_dadd+0x24a>
 8001688:	4662      	mov	r2, ip
 800168a:	433a      	orrs	r2, r7
 800168c:	d100      	bne.n	8001690 <__aeabi_dadd+0x608>
 800168e:	e698      	b.n	80013c2 <__aeabi_dadd+0x33a>
 8001690:	464a      	mov	r2, r9
 8001692:	08d1      	lsrs	r1, r2, #3
 8001694:	075a      	lsls	r2, r3, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	08da      	lsrs	r2, r3, #3
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	031b      	lsls	r3, r3, #12
 800169e:	421a      	tst	r2, r3
 80016a0:	d008      	beq.n	80016b4 <__aeabi_dadd+0x62c>
 80016a2:	4660      	mov	r0, ip
 80016a4:	08c5      	lsrs	r5, r0, #3
 80016a6:	421d      	tst	r5, r3
 80016a8:	d104      	bne.n	80016b4 <__aeabi_dadd+0x62c>
 80016aa:	4654      	mov	r4, sl
 80016ac:	002a      	movs	r2, r5
 80016ae:	08f9      	lsrs	r1, r7, #3
 80016b0:	0743      	lsls	r3, r0, #29
 80016b2:	4319      	orrs	r1, r3
 80016b4:	0f4b      	lsrs	r3, r1, #29
 80016b6:	00c9      	lsls	r1, r1, #3
 80016b8:	075b      	lsls	r3, r3, #29
 80016ba:	08c9      	lsrs	r1, r1, #3
 80016bc:	4319      	orrs	r1, r3
 80016be:	0013      	movs	r3, r2
 80016c0:	e62c      	b.n	800131c <__aeabi_dadd+0x294>
 80016c2:	4641      	mov	r1, r8
 80016c4:	4329      	orrs	r1, r5
 80016c6:	d000      	beq.n	80016ca <__aeabi_dadd+0x642>
 80016c8:	e5fa      	b.n	80012c0 <__aeabi_dadd+0x238>
 80016ca:	2300      	movs	r3, #0
 80016cc:	000a      	movs	r2, r1
 80016ce:	2400      	movs	r4, #0
 80016d0:	e602      	b.n	80012d8 <__aeabi_dadd+0x250>
 80016d2:	076b      	lsls	r3, r5, #29
 80016d4:	08f9      	lsrs	r1, r7, #3
 80016d6:	4319      	orrs	r1, r3
 80016d8:	08eb      	lsrs	r3, r5, #3
 80016da:	e5fd      	b.n	80012d8 <__aeabi_dadd+0x250>
 80016dc:	4663      	mov	r3, ip
 80016de:	08f9      	lsrs	r1, r7, #3
 80016e0:	075b      	lsls	r3, r3, #29
 80016e2:	4319      	orrs	r1, r3
 80016e4:	4663      	mov	r3, ip
 80016e6:	0004      	movs	r4, r0
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	e617      	b.n	800131c <__aeabi_dadd+0x294>
 80016ec:	003d      	movs	r5, r7
 80016ee:	444d      	add	r5, r9
 80016f0:	4463      	add	r3, ip
 80016f2:	454d      	cmp	r5, r9
 80016f4:	4189      	sbcs	r1, r1
 80016f6:	4698      	mov	r8, r3
 80016f8:	4249      	negs	r1, r1
 80016fa:	4488      	add	r8, r1
 80016fc:	4643      	mov	r3, r8
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_dadd+0x67c>
 8001702:	e5dd      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001704:	4642      	mov	r2, r8
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <__aeabi_dadd+0x6d0>)
 8001708:	2601      	movs	r6, #1
 800170a:	401a      	ands	r2, r3
 800170c:	4690      	mov	r8, r2
 800170e:	e5d7      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001710:	0010      	movs	r0, r2
 8001712:	001e      	movs	r6, r3
 8001714:	3820      	subs	r0, #32
 8001716:	40c6      	lsrs	r6, r0
 8001718:	2a20      	cmp	r2, #32
 800171a:	d005      	beq.n	8001728 <__aeabi_dadd+0x6a0>
 800171c:	2040      	movs	r0, #64	; 0x40
 800171e:	1a82      	subs	r2, r0, r2
 8001720:	4093      	lsls	r3, r2
 8001722:	464a      	mov	r2, r9
 8001724:	431a      	orrs	r2, r3
 8001726:	4691      	mov	r9, r2
 8001728:	464d      	mov	r5, r9
 800172a:	1e6b      	subs	r3, r5, #1
 800172c:	419d      	sbcs	r5, r3
 800172e:	4335      	orrs	r5, r6
 8001730:	e621      	b.n	8001376 <__aeabi_dadd+0x2ee>
 8001732:	0002      	movs	r2, r0
 8001734:	2300      	movs	r3, #0
 8001736:	2100      	movs	r1, #0
 8001738:	e540      	b.n	80011bc <__aeabi_dadd+0x134>
 800173a:	464a      	mov	r2, r9
 800173c:	19d5      	adds	r5, r2, r7
 800173e:	42bd      	cmp	r5, r7
 8001740:	4189      	sbcs	r1, r1
 8001742:	4463      	add	r3, ip
 8001744:	4698      	mov	r8, r3
 8001746:	4249      	negs	r1, r1
 8001748:	4488      	add	r8, r1
 800174a:	e5b3      	b.n	80012b4 <__aeabi_dadd+0x22c>
 800174c:	2100      	movs	r1, #0
 800174e:	4a01      	ldr	r2, [pc, #4]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001750:	000b      	movs	r3, r1
 8001752:	e533      	b.n	80011bc <__aeabi_dadd+0x134>
 8001754:	000007ff 	.word	0x000007ff
 8001758:	ff7fffff 	.word	0xff7fffff

0800175c <__aeabi_ddiv>:
 800175c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175e:	4657      	mov	r7, sl
 8001760:	464e      	mov	r6, r9
 8001762:	4645      	mov	r5, r8
 8001764:	46de      	mov	lr, fp
 8001766:	b5e0      	push	{r5, r6, r7, lr}
 8001768:	4681      	mov	r9, r0
 800176a:	0005      	movs	r5, r0
 800176c:	030c      	lsls	r4, r1, #12
 800176e:	0048      	lsls	r0, r1, #1
 8001770:	4692      	mov	sl, r2
 8001772:	001f      	movs	r7, r3
 8001774:	b085      	sub	sp, #20
 8001776:	0b24      	lsrs	r4, r4, #12
 8001778:	0d40      	lsrs	r0, r0, #21
 800177a:	0fce      	lsrs	r6, r1, #31
 800177c:	2800      	cmp	r0, #0
 800177e:	d059      	beq.n	8001834 <__aeabi_ddiv+0xd8>
 8001780:	4b87      	ldr	r3, [pc, #540]	; (80019a0 <__aeabi_ddiv+0x244>)
 8001782:	4298      	cmp	r0, r3
 8001784:	d100      	bne.n	8001788 <__aeabi_ddiv+0x2c>
 8001786:	e098      	b.n	80018ba <__aeabi_ddiv+0x15e>
 8001788:	0f6b      	lsrs	r3, r5, #29
 800178a:	00e4      	lsls	r4, r4, #3
 800178c:	431c      	orrs	r4, r3
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	4323      	orrs	r3, r4
 8001794:	4698      	mov	r8, r3
 8001796:	4b83      	ldr	r3, [pc, #524]	; (80019a4 <__aeabi_ddiv+0x248>)
 8001798:	00ed      	lsls	r5, r5, #3
 800179a:	469b      	mov	fp, r3
 800179c:	2300      	movs	r3, #0
 800179e:	4699      	mov	r9, r3
 80017a0:	4483      	add	fp, r0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	033c      	lsls	r4, r7, #12
 80017a6:	007b      	lsls	r3, r7, #1
 80017a8:	4650      	mov	r0, sl
 80017aa:	0b24      	lsrs	r4, r4, #12
 80017ac:	0d5b      	lsrs	r3, r3, #21
 80017ae:	0fff      	lsrs	r7, r7, #31
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d067      	beq.n	8001884 <__aeabi_ddiv+0x128>
 80017b4:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <__aeabi_ddiv+0x244>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d018      	beq.n	80017ec <__aeabi_ddiv+0x90>
 80017ba:	497a      	ldr	r1, [pc, #488]	; (80019a4 <__aeabi_ddiv+0x248>)
 80017bc:	0f42      	lsrs	r2, r0, #29
 80017be:	468c      	mov	ip, r1
 80017c0:	00e4      	lsls	r4, r4, #3
 80017c2:	4659      	mov	r1, fp
 80017c4:	4314      	orrs	r4, r2
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	4463      	add	r3, ip
 80017ca:	0412      	lsls	r2, r2, #16
 80017cc:	1acb      	subs	r3, r1, r3
 80017ce:	4314      	orrs	r4, r2
 80017d0:	469b      	mov	fp, r3
 80017d2:	00c2      	lsls	r2, r0, #3
 80017d4:	2000      	movs	r0, #0
 80017d6:	0033      	movs	r3, r6
 80017d8:	407b      	eors	r3, r7
 80017da:	469a      	mov	sl, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	d900      	bls.n	80017e4 <__aeabi_ddiv+0x88>
 80017e2:	e0ef      	b.n	80019c4 <__aeabi_ddiv+0x268>
 80017e4:	4970      	ldr	r1, [pc, #448]	; (80019a8 <__aeabi_ddiv+0x24c>)
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	58cb      	ldr	r3, [r1, r3]
 80017ea:	469f      	mov	pc, r3
 80017ec:	4b6f      	ldr	r3, [pc, #444]	; (80019ac <__aeabi_ddiv+0x250>)
 80017ee:	4652      	mov	r2, sl
 80017f0:	469c      	mov	ip, r3
 80017f2:	4322      	orrs	r2, r4
 80017f4:	44e3      	add	fp, ip
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d000      	beq.n	80017fc <__aeabi_ddiv+0xa0>
 80017fa:	e095      	b.n	8001928 <__aeabi_ddiv+0x1cc>
 80017fc:	4649      	mov	r1, r9
 80017fe:	2302      	movs	r3, #2
 8001800:	4319      	orrs	r1, r3
 8001802:	4689      	mov	r9, r1
 8001804:	2400      	movs	r4, #0
 8001806:	2002      	movs	r0, #2
 8001808:	e7e5      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 800180a:	2300      	movs	r3, #0
 800180c:	2400      	movs	r4, #0
 800180e:	2500      	movs	r5, #0
 8001810:	4652      	mov	r2, sl
 8001812:	051b      	lsls	r3, r3, #20
 8001814:	4323      	orrs	r3, r4
 8001816:	07d2      	lsls	r2, r2, #31
 8001818:	4313      	orrs	r3, r2
 800181a:	0028      	movs	r0, r5
 800181c:	0019      	movs	r1, r3
 800181e:	b005      	add	sp, #20
 8001820:	bcf0      	pop	{r4, r5, r6, r7}
 8001822:	46bb      	mov	fp, r7
 8001824:	46b2      	mov	sl, r6
 8001826:	46a9      	mov	r9, r5
 8001828:	46a0      	mov	r8, r4
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182c:	2400      	movs	r4, #0
 800182e:	2500      	movs	r5, #0
 8001830:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <__aeabi_ddiv+0x244>)
 8001832:	e7ed      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001834:	464b      	mov	r3, r9
 8001836:	4323      	orrs	r3, r4
 8001838:	4698      	mov	r8, r3
 800183a:	d100      	bne.n	800183e <__aeabi_ddiv+0xe2>
 800183c:	e089      	b.n	8001952 <__aeabi_ddiv+0x1f6>
 800183e:	2c00      	cmp	r4, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_ddiv+0xe8>
 8001842:	e1e0      	b.n	8001c06 <__aeabi_ddiv+0x4aa>
 8001844:	0020      	movs	r0, r4
 8001846:	f001 fa61 	bl	8002d0c <__clzsi2>
 800184a:	0001      	movs	r1, r0
 800184c:	0002      	movs	r2, r0
 800184e:	390b      	subs	r1, #11
 8001850:	231d      	movs	r3, #29
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	4649      	mov	r1, r9
 8001856:	0010      	movs	r0, r2
 8001858:	40d9      	lsrs	r1, r3
 800185a:	3808      	subs	r0, #8
 800185c:	4084      	lsls	r4, r0
 800185e:	000b      	movs	r3, r1
 8001860:	464d      	mov	r5, r9
 8001862:	4323      	orrs	r3, r4
 8001864:	4698      	mov	r8, r3
 8001866:	4085      	lsls	r5, r0
 8001868:	4851      	ldr	r0, [pc, #324]	; (80019b0 <__aeabi_ddiv+0x254>)
 800186a:	033c      	lsls	r4, r7, #12
 800186c:	1a83      	subs	r3, r0, r2
 800186e:	469b      	mov	fp, r3
 8001870:	2300      	movs	r3, #0
 8001872:	4699      	mov	r9, r3
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	007b      	lsls	r3, r7, #1
 8001878:	4650      	mov	r0, sl
 800187a:	0b24      	lsrs	r4, r4, #12
 800187c:	0d5b      	lsrs	r3, r3, #21
 800187e:	0fff      	lsrs	r7, r7, #31
 8001880:	2b00      	cmp	r3, #0
 8001882:	d197      	bne.n	80017b4 <__aeabi_ddiv+0x58>
 8001884:	4652      	mov	r2, sl
 8001886:	4322      	orrs	r2, r4
 8001888:	d055      	beq.n	8001936 <__aeabi_ddiv+0x1da>
 800188a:	2c00      	cmp	r4, #0
 800188c:	d100      	bne.n	8001890 <__aeabi_ddiv+0x134>
 800188e:	e1ca      	b.n	8001c26 <__aeabi_ddiv+0x4ca>
 8001890:	0020      	movs	r0, r4
 8001892:	f001 fa3b 	bl	8002d0c <__clzsi2>
 8001896:	0002      	movs	r2, r0
 8001898:	3a0b      	subs	r2, #11
 800189a:	231d      	movs	r3, #29
 800189c:	0001      	movs	r1, r0
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	4652      	mov	r2, sl
 80018a2:	3908      	subs	r1, #8
 80018a4:	40da      	lsrs	r2, r3
 80018a6:	408c      	lsls	r4, r1
 80018a8:	4314      	orrs	r4, r2
 80018aa:	4652      	mov	r2, sl
 80018ac:	408a      	lsls	r2, r1
 80018ae:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <__aeabi_ddiv+0x258>)
 80018b0:	4458      	add	r0, fp
 80018b2:	469b      	mov	fp, r3
 80018b4:	4483      	add	fp, r0
 80018b6:	2000      	movs	r0, #0
 80018b8:	e78d      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 80018ba:	464b      	mov	r3, r9
 80018bc:	4323      	orrs	r3, r4
 80018be:	4698      	mov	r8, r3
 80018c0:	d140      	bne.n	8001944 <__aeabi_ddiv+0x1e8>
 80018c2:	2308      	movs	r3, #8
 80018c4:	4699      	mov	r9, r3
 80018c6:	3b06      	subs	r3, #6
 80018c8:	2500      	movs	r5, #0
 80018ca:	4683      	mov	fp, r0
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	e769      	b.n	80017a4 <__aeabi_ddiv+0x48>
 80018d0:	46b2      	mov	sl, r6
 80018d2:	9b00      	ldr	r3, [sp, #0]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d0a9      	beq.n	800182c <__aeabi_ddiv+0xd0>
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d100      	bne.n	80018de <__aeabi_ddiv+0x182>
 80018dc:	e211      	b.n	8001d02 <__aeabi_ddiv+0x5a6>
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d093      	beq.n	800180a <__aeabi_ddiv+0xae>
 80018e2:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <__aeabi_ddiv+0x25c>)
 80018e4:	445a      	add	r2, fp
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	dc00      	bgt.n	80018ec <__aeabi_ddiv+0x190>
 80018ea:	e13c      	b.n	8001b66 <__aeabi_ddiv+0x40a>
 80018ec:	076b      	lsls	r3, r5, #29
 80018ee:	d000      	beq.n	80018f2 <__aeabi_ddiv+0x196>
 80018f0:	e1a7      	b.n	8001c42 <__aeabi_ddiv+0x4e6>
 80018f2:	08ed      	lsrs	r5, r5, #3
 80018f4:	4643      	mov	r3, r8
 80018f6:	01db      	lsls	r3, r3, #7
 80018f8:	d506      	bpl.n	8001908 <__aeabi_ddiv+0x1ac>
 80018fa:	4642      	mov	r2, r8
 80018fc:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <__aeabi_ddiv+0x260>)
 80018fe:	401a      	ands	r2, r3
 8001900:	4690      	mov	r8, r2
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	00d2      	lsls	r2, r2, #3
 8001906:	445a      	add	r2, fp
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <__aeabi_ddiv+0x264>)
 800190a:	429a      	cmp	r2, r3
 800190c:	dc8e      	bgt.n	800182c <__aeabi_ddiv+0xd0>
 800190e:	4643      	mov	r3, r8
 8001910:	0552      	lsls	r2, r2, #21
 8001912:	0758      	lsls	r0, r3, #29
 8001914:	025c      	lsls	r4, r3, #9
 8001916:	4305      	orrs	r5, r0
 8001918:	0b24      	lsrs	r4, r4, #12
 800191a:	0d53      	lsrs	r3, r2, #21
 800191c:	e778      	b.n	8001810 <__aeabi_ddiv+0xb4>
 800191e:	46ba      	mov	sl, r7
 8001920:	46a0      	mov	r8, r4
 8001922:	0015      	movs	r5, r2
 8001924:	9000      	str	r0, [sp, #0]
 8001926:	e7d4      	b.n	80018d2 <__aeabi_ddiv+0x176>
 8001928:	464a      	mov	r2, r9
 800192a:	2303      	movs	r3, #3
 800192c:	431a      	orrs	r2, r3
 800192e:	4691      	mov	r9, r2
 8001930:	2003      	movs	r0, #3
 8001932:	4652      	mov	r2, sl
 8001934:	e74f      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 8001936:	4649      	mov	r1, r9
 8001938:	2301      	movs	r3, #1
 800193a:	4319      	orrs	r1, r3
 800193c:	4689      	mov	r9, r1
 800193e:	2400      	movs	r4, #0
 8001940:	2001      	movs	r0, #1
 8001942:	e748      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 8001944:	230c      	movs	r3, #12
 8001946:	4699      	mov	r9, r3
 8001948:	3b09      	subs	r3, #9
 800194a:	46a0      	mov	r8, r4
 800194c:	4683      	mov	fp, r0
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	e728      	b.n	80017a4 <__aeabi_ddiv+0x48>
 8001952:	2304      	movs	r3, #4
 8001954:	4699      	mov	r9, r3
 8001956:	2300      	movs	r3, #0
 8001958:	469b      	mov	fp, r3
 800195a:	3301      	adds	r3, #1
 800195c:	2500      	movs	r5, #0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	e720      	b.n	80017a4 <__aeabi_ddiv+0x48>
 8001962:	2300      	movs	r3, #0
 8001964:	2480      	movs	r4, #128	; 0x80
 8001966:	469a      	mov	sl, r3
 8001968:	2500      	movs	r5, #0
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <__aeabi_ddiv+0x244>)
 800196c:	0324      	lsls	r4, r4, #12
 800196e:	e74f      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	4641      	mov	r1, r8
 8001974:	031b      	lsls	r3, r3, #12
 8001976:	4219      	tst	r1, r3
 8001978:	d008      	beq.n	800198c <__aeabi_ddiv+0x230>
 800197a:	421c      	tst	r4, r3
 800197c:	d106      	bne.n	800198c <__aeabi_ddiv+0x230>
 800197e:	431c      	orrs	r4, r3
 8001980:	0324      	lsls	r4, r4, #12
 8001982:	46ba      	mov	sl, r7
 8001984:	0015      	movs	r5, r2
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <__aeabi_ddiv+0x244>)
 8001988:	0b24      	lsrs	r4, r4, #12
 800198a:	e741      	b.n	8001810 <__aeabi_ddiv+0xb4>
 800198c:	2480      	movs	r4, #128	; 0x80
 800198e:	4643      	mov	r3, r8
 8001990:	0324      	lsls	r4, r4, #12
 8001992:	431c      	orrs	r4, r3
 8001994:	0324      	lsls	r4, r4, #12
 8001996:	46b2      	mov	sl, r6
 8001998:	4b01      	ldr	r3, [pc, #4]	; (80019a0 <__aeabi_ddiv+0x244>)
 800199a:	0b24      	lsrs	r4, r4, #12
 800199c:	e738      	b.n	8001810 <__aeabi_ddiv+0xb4>
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	000007ff 	.word	0x000007ff
 80019a4:	fffffc01 	.word	0xfffffc01
 80019a8:	08020058 	.word	0x08020058
 80019ac:	fffff801 	.word	0xfffff801
 80019b0:	fffffc0d 	.word	0xfffffc0d
 80019b4:	000003f3 	.word	0x000003f3
 80019b8:	000003ff 	.word	0x000003ff
 80019bc:	feffffff 	.word	0xfeffffff
 80019c0:	000007fe 	.word	0x000007fe
 80019c4:	4544      	cmp	r4, r8
 80019c6:	d200      	bcs.n	80019ca <__aeabi_ddiv+0x26e>
 80019c8:	e116      	b.n	8001bf8 <__aeabi_ddiv+0x49c>
 80019ca:	d100      	bne.n	80019ce <__aeabi_ddiv+0x272>
 80019cc:	e111      	b.n	8001bf2 <__aeabi_ddiv+0x496>
 80019ce:	2301      	movs	r3, #1
 80019d0:	425b      	negs	r3, r3
 80019d2:	469c      	mov	ip, r3
 80019d4:	002e      	movs	r6, r5
 80019d6:	4640      	mov	r0, r8
 80019d8:	2500      	movs	r5, #0
 80019da:	44e3      	add	fp, ip
 80019dc:	0223      	lsls	r3, r4, #8
 80019de:	0e14      	lsrs	r4, r2, #24
 80019e0:	431c      	orrs	r4, r3
 80019e2:	0c1b      	lsrs	r3, r3, #16
 80019e4:	4699      	mov	r9, r3
 80019e6:	0423      	lsls	r3, r4, #16
 80019e8:	0c1f      	lsrs	r7, r3, #16
 80019ea:	0212      	lsls	r2, r2, #8
 80019ec:	4649      	mov	r1, r9
 80019ee:	9200      	str	r2, [sp, #0]
 80019f0:	9701      	str	r7, [sp, #4]
 80019f2:	f7fe fc21 	bl	8000238 <__aeabi_uidivmod>
 80019f6:	0002      	movs	r2, r0
 80019f8:	437a      	muls	r2, r7
 80019fa:	040b      	lsls	r3, r1, #16
 80019fc:	0c31      	lsrs	r1, r6, #16
 80019fe:	4680      	mov	r8, r0
 8001a00:	4319      	orrs	r1, r3
 8001a02:	428a      	cmp	r2, r1
 8001a04:	d90b      	bls.n	8001a1e <__aeabi_ddiv+0x2c2>
 8001a06:	2301      	movs	r3, #1
 8001a08:	425b      	negs	r3, r3
 8001a0a:	469c      	mov	ip, r3
 8001a0c:	1909      	adds	r1, r1, r4
 8001a0e:	44e0      	add	r8, ip
 8001a10:	428c      	cmp	r4, r1
 8001a12:	d804      	bhi.n	8001a1e <__aeabi_ddiv+0x2c2>
 8001a14:	428a      	cmp	r2, r1
 8001a16:	d902      	bls.n	8001a1e <__aeabi_ddiv+0x2c2>
 8001a18:	1e83      	subs	r3, r0, #2
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	1909      	adds	r1, r1, r4
 8001a1e:	1a88      	subs	r0, r1, r2
 8001a20:	4649      	mov	r1, r9
 8001a22:	f7fe fc09 	bl	8000238 <__aeabi_uidivmod>
 8001a26:	0409      	lsls	r1, r1, #16
 8001a28:	468c      	mov	ip, r1
 8001a2a:	0431      	lsls	r1, r6, #16
 8001a2c:	4666      	mov	r6, ip
 8001a2e:	9a01      	ldr	r2, [sp, #4]
 8001a30:	0c09      	lsrs	r1, r1, #16
 8001a32:	4342      	muls	r2, r0
 8001a34:	0003      	movs	r3, r0
 8001a36:	4331      	orrs	r1, r6
 8001a38:	428a      	cmp	r2, r1
 8001a3a:	d904      	bls.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001a3c:	1909      	adds	r1, r1, r4
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	428c      	cmp	r4, r1
 8001a42:	d800      	bhi.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001a44:	e111      	b.n	8001c6a <__aeabi_ddiv+0x50e>
 8001a46:	1a89      	subs	r1, r1, r2
 8001a48:	4642      	mov	r2, r8
 8001a4a:	9e00      	ldr	r6, [sp, #0]
 8001a4c:	0412      	lsls	r2, r2, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	0c33      	lsrs	r3, r6, #16
 8001a52:	001f      	movs	r7, r3
 8001a54:	0c10      	lsrs	r0, r2, #16
 8001a56:	4690      	mov	r8, r2
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	0413      	lsls	r3, r2, #16
 8001a5c:	0432      	lsls	r2, r6, #16
 8001a5e:	0c16      	lsrs	r6, r2, #16
 8001a60:	0032      	movs	r2, r6
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	435a      	muls	r2, r3
 8001a66:	9603      	str	r6, [sp, #12]
 8001a68:	437b      	muls	r3, r7
 8001a6a:	4346      	muls	r6, r0
 8001a6c:	4378      	muls	r0, r7
 8001a6e:	0c17      	lsrs	r7, r2, #16
 8001a70:	46bc      	mov	ip, r7
 8001a72:	199b      	adds	r3, r3, r6
 8001a74:	4463      	add	r3, ip
 8001a76:	429e      	cmp	r6, r3
 8001a78:	d903      	bls.n	8001a82 <__aeabi_ddiv+0x326>
 8001a7a:	2680      	movs	r6, #128	; 0x80
 8001a7c:	0276      	lsls	r6, r6, #9
 8001a7e:	46b4      	mov	ip, r6
 8001a80:	4460      	add	r0, ip
 8001a82:	0c1e      	lsrs	r6, r3, #16
 8001a84:	1830      	adds	r0, r6, r0
 8001a86:	0416      	lsls	r6, r2, #16
 8001a88:	041b      	lsls	r3, r3, #16
 8001a8a:	0c36      	lsrs	r6, r6, #16
 8001a8c:	199e      	adds	r6, r3, r6
 8001a8e:	4281      	cmp	r1, r0
 8001a90:	d200      	bcs.n	8001a94 <__aeabi_ddiv+0x338>
 8001a92:	e09c      	b.n	8001bce <__aeabi_ddiv+0x472>
 8001a94:	d100      	bne.n	8001a98 <__aeabi_ddiv+0x33c>
 8001a96:	e097      	b.n	8001bc8 <__aeabi_ddiv+0x46c>
 8001a98:	1bae      	subs	r6, r5, r6
 8001a9a:	1a09      	subs	r1, r1, r0
 8001a9c:	42b5      	cmp	r5, r6
 8001a9e:	4180      	sbcs	r0, r0
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	1a08      	subs	r0, r1, r0
 8001aa4:	4284      	cmp	r4, r0
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_ddiv+0x34e>
 8001aa8:	e111      	b.n	8001cce <__aeabi_ddiv+0x572>
 8001aaa:	4649      	mov	r1, r9
 8001aac:	f7fe fbc4 	bl	8000238 <__aeabi_uidivmod>
 8001ab0:	9a01      	ldr	r2, [sp, #4]
 8001ab2:	040b      	lsls	r3, r1, #16
 8001ab4:	4342      	muls	r2, r0
 8001ab6:	0c31      	lsrs	r1, r6, #16
 8001ab8:	0005      	movs	r5, r0
 8001aba:	4319      	orrs	r1, r3
 8001abc:	428a      	cmp	r2, r1
 8001abe:	d907      	bls.n	8001ad0 <__aeabi_ddiv+0x374>
 8001ac0:	1909      	adds	r1, r1, r4
 8001ac2:	3d01      	subs	r5, #1
 8001ac4:	428c      	cmp	r4, r1
 8001ac6:	d803      	bhi.n	8001ad0 <__aeabi_ddiv+0x374>
 8001ac8:	428a      	cmp	r2, r1
 8001aca:	d901      	bls.n	8001ad0 <__aeabi_ddiv+0x374>
 8001acc:	1e85      	subs	r5, r0, #2
 8001ace:	1909      	adds	r1, r1, r4
 8001ad0:	1a88      	subs	r0, r1, r2
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	f7fe fbb0 	bl	8000238 <__aeabi_uidivmod>
 8001ad8:	0409      	lsls	r1, r1, #16
 8001ada:	468c      	mov	ip, r1
 8001adc:	0431      	lsls	r1, r6, #16
 8001ade:	4666      	mov	r6, ip
 8001ae0:	9a01      	ldr	r2, [sp, #4]
 8001ae2:	0c09      	lsrs	r1, r1, #16
 8001ae4:	4342      	muls	r2, r0
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	4331      	orrs	r1, r6
 8001aea:	428a      	cmp	r2, r1
 8001aec:	d907      	bls.n	8001afe <__aeabi_ddiv+0x3a2>
 8001aee:	1909      	adds	r1, r1, r4
 8001af0:	3b01      	subs	r3, #1
 8001af2:	428c      	cmp	r4, r1
 8001af4:	d803      	bhi.n	8001afe <__aeabi_ddiv+0x3a2>
 8001af6:	428a      	cmp	r2, r1
 8001af8:	d901      	bls.n	8001afe <__aeabi_ddiv+0x3a2>
 8001afa:	1e83      	subs	r3, r0, #2
 8001afc:	1909      	adds	r1, r1, r4
 8001afe:	9e03      	ldr	r6, [sp, #12]
 8001b00:	1a89      	subs	r1, r1, r2
 8001b02:	0032      	movs	r2, r6
 8001b04:	042d      	lsls	r5, r5, #16
 8001b06:	431d      	orrs	r5, r3
 8001b08:	9f02      	ldr	r7, [sp, #8]
 8001b0a:	042b      	lsls	r3, r5, #16
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	435a      	muls	r2, r3
 8001b10:	437b      	muls	r3, r7
 8001b12:	469c      	mov	ip, r3
 8001b14:	0c28      	lsrs	r0, r5, #16
 8001b16:	4346      	muls	r6, r0
 8001b18:	0c13      	lsrs	r3, r2, #16
 8001b1a:	44b4      	add	ip, r6
 8001b1c:	4463      	add	r3, ip
 8001b1e:	4378      	muls	r0, r7
 8001b20:	429e      	cmp	r6, r3
 8001b22:	d903      	bls.n	8001b2c <__aeabi_ddiv+0x3d0>
 8001b24:	2680      	movs	r6, #128	; 0x80
 8001b26:	0276      	lsls	r6, r6, #9
 8001b28:	46b4      	mov	ip, r6
 8001b2a:	4460      	add	r0, ip
 8001b2c:	0c1e      	lsrs	r6, r3, #16
 8001b2e:	0412      	lsls	r2, r2, #16
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	0c12      	lsrs	r2, r2, #16
 8001b34:	1830      	adds	r0, r6, r0
 8001b36:	189b      	adds	r3, r3, r2
 8001b38:	4281      	cmp	r1, r0
 8001b3a:	d306      	bcc.n	8001b4a <__aeabi_ddiv+0x3ee>
 8001b3c:	d002      	beq.n	8001b44 <__aeabi_ddiv+0x3e8>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	431d      	orrs	r5, r3
 8001b42:	e6ce      	b.n	80018e2 <__aeabi_ddiv+0x186>
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x3ee>
 8001b48:	e6cb      	b.n	80018e2 <__aeabi_ddiv+0x186>
 8001b4a:	1861      	adds	r1, r4, r1
 8001b4c:	1e6e      	subs	r6, r5, #1
 8001b4e:	42a1      	cmp	r1, r4
 8001b50:	d200      	bcs.n	8001b54 <__aeabi_ddiv+0x3f8>
 8001b52:	e0a4      	b.n	8001c9e <__aeabi_ddiv+0x542>
 8001b54:	4281      	cmp	r1, r0
 8001b56:	d200      	bcs.n	8001b5a <__aeabi_ddiv+0x3fe>
 8001b58:	e0c9      	b.n	8001cee <__aeabi_ddiv+0x592>
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0x402>
 8001b5c:	e0d9      	b.n	8001d12 <__aeabi_ddiv+0x5b6>
 8001b5e:	0035      	movs	r5, r6
 8001b60:	e7ed      	b.n	8001b3e <__aeabi_ddiv+0x3e2>
 8001b62:	2501      	movs	r5, #1
 8001b64:	426d      	negs	r5, r5
 8001b66:	2101      	movs	r1, #1
 8001b68:	1a89      	subs	r1, r1, r2
 8001b6a:	2938      	cmp	r1, #56	; 0x38
 8001b6c:	dd00      	ble.n	8001b70 <__aeabi_ddiv+0x414>
 8001b6e:	e64c      	b.n	800180a <__aeabi_ddiv+0xae>
 8001b70:	291f      	cmp	r1, #31
 8001b72:	dc00      	bgt.n	8001b76 <__aeabi_ddiv+0x41a>
 8001b74:	e07f      	b.n	8001c76 <__aeabi_ddiv+0x51a>
 8001b76:	231f      	movs	r3, #31
 8001b78:	425b      	negs	r3, r3
 8001b7a:	1a9a      	subs	r2, r3, r2
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	40d3      	lsrs	r3, r2
 8001b80:	2920      	cmp	r1, #32
 8001b82:	d004      	beq.n	8001b8e <__aeabi_ddiv+0x432>
 8001b84:	4644      	mov	r4, r8
 8001b86:	4a65      	ldr	r2, [pc, #404]	; (8001d1c <__aeabi_ddiv+0x5c0>)
 8001b88:	445a      	add	r2, fp
 8001b8a:	4094      	lsls	r4, r2
 8001b8c:	4325      	orrs	r5, r4
 8001b8e:	1e6a      	subs	r2, r5, #1
 8001b90:	4195      	sbcs	r5, r2
 8001b92:	2207      	movs	r2, #7
 8001b94:	432b      	orrs	r3, r5
 8001b96:	0015      	movs	r5, r2
 8001b98:	2400      	movs	r4, #0
 8001b9a:	401d      	ands	r5, r3
 8001b9c:	421a      	tst	r2, r3
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_ddiv+0x446>
 8001ba0:	e0a1      	b.n	8001ce6 <__aeabi_ddiv+0x58a>
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	2400      	movs	r4, #0
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	2a04      	cmp	r2, #4
 8001baa:	d100      	bne.n	8001bae <__aeabi_ddiv+0x452>
 8001bac:	e098      	b.n	8001ce0 <__aeabi_ddiv+0x584>
 8001bae:	1d1a      	adds	r2, r3, #4
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	419b      	sbcs	r3, r3
 8001bb4:	425b      	negs	r3, r3
 8001bb6:	18e4      	adds	r4, r4, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	0222      	lsls	r2, r4, #8
 8001bbc:	d400      	bmi.n	8001bc0 <__aeabi_ddiv+0x464>
 8001bbe:	e08f      	b.n	8001ce0 <__aeabi_ddiv+0x584>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	e623      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001bc8:	42b5      	cmp	r5, r6
 8001bca:	d300      	bcc.n	8001bce <__aeabi_ddiv+0x472>
 8001bcc:	e764      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001bce:	4643      	mov	r3, r8
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	9b00      	ldr	r3, [sp, #0]
 8001bd4:	469c      	mov	ip, r3
 8001bd6:	4465      	add	r5, ip
 8001bd8:	001f      	movs	r7, r3
 8001bda:	429d      	cmp	r5, r3
 8001bdc:	419b      	sbcs	r3, r3
 8001bde:	425b      	negs	r3, r3
 8001be0:	191b      	adds	r3, r3, r4
 8001be2:	18c9      	adds	r1, r1, r3
 8001be4:	428c      	cmp	r4, r1
 8001be6:	d23a      	bcs.n	8001c5e <__aeabi_ddiv+0x502>
 8001be8:	4288      	cmp	r0, r1
 8001bea:	d863      	bhi.n	8001cb4 <__aeabi_ddiv+0x558>
 8001bec:	d060      	beq.n	8001cb0 <__aeabi_ddiv+0x554>
 8001bee:	4690      	mov	r8, r2
 8001bf0:	e752      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001bf2:	42aa      	cmp	r2, r5
 8001bf4:	d900      	bls.n	8001bf8 <__aeabi_ddiv+0x49c>
 8001bf6:	e6ea      	b.n	80019ce <__aeabi_ddiv+0x272>
 8001bf8:	4643      	mov	r3, r8
 8001bfa:	07de      	lsls	r6, r3, #31
 8001bfc:	0858      	lsrs	r0, r3, #1
 8001bfe:	086b      	lsrs	r3, r5, #1
 8001c00:	431e      	orrs	r6, r3
 8001c02:	07ed      	lsls	r5, r5, #31
 8001c04:	e6ea      	b.n	80019dc <__aeabi_ddiv+0x280>
 8001c06:	4648      	mov	r0, r9
 8001c08:	f001 f880 	bl	8002d0c <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	0002      	movs	r2, r0
 8001c10:	3115      	adds	r1, #21
 8001c12:	3220      	adds	r2, #32
 8001c14:	291c      	cmp	r1, #28
 8001c16:	dc00      	bgt.n	8001c1a <__aeabi_ddiv+0x4be>
 8001c18:	e61a      	b.n	8001850 <__aeabi_ddiv+0xf4>
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	3808      	subs	r0, #8
 8001c1e:	4083      	lsls	r3, r0
 8001c20:	2500      	movs	r5, #0
 8001c22:	4698      	mov	r8, r3
 8001c24:	e620      	b.n	8001868 <__aeabi_ddiv+0x10c>
 8001c26:	f001 f871 	bl	8002d0c <__clzsi2>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	3215      	adds	r2, #21
 8001c30:	3020      	adds	r0, #32
 8001c32:	2a1c      	cmp	r2, #28
 8001c34:	dc00      	bgt.n	8001c38 <__aeabi_ddiv+0x4dc>
 8001c36:	e630      	b.n	800189a <__aeabi_ddiv+0x13e>
 8001c38:	4654      	mov	r4, sl
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	409c      	lsls	r4, r3
 8001c40:	e635      	b.n	80018ae <__aeabi_ddiv+0x152>
 8001c42:	230f      	movs	r3, #15
 8001c44:	402b      	ands	r3, r5
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d100      	bne.n	8001c4c <__aeabi_ddiv+0x4f0>
 8001c4a:	e652      	b.n	80018f2 <__aeabi_ddiv+0x196>
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	425b      	negs	r3, r3
 8001c50:	42ab      	cmp	r3, r5
 8001c52:	419b      	sbcs	r3, r3
 8001c54:	3504      	adds	r5, #4
 8001c56:	425b      	negs	r3, r3
 8001c58:	08ed      	lsrs	r5, r5, #3
 8001c5a:	4498      	add	r8, r3
 8001c5c:	e64a      	b.n	80018f4 <__aeabi_ddiv+0x198>
 8001c5e:	428c      	cmp	r4, r1
 8001c60:	d1c5      	bne.n	8001bee <__aeabi_ddiv+0x492>
 8001c62:	42af      	cmp	r7, r5
 8001c64:	d9c0      	bls.n	8001be8 <__aeabi_ddiv+0x48c>
 8001c66:	4690      	mov	r8, r2
 8001c68:	e716      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001c6a:	428a      	cmp	r2, r1
 8001c6c:	d800      	bhi.n	8001c70 <__aeabi_ddiv+0x514>
 8001c6e:	e6ea      	b.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001c70:	1e83      	subs	r3, r0, #2
 8001c72:	1909      	adds	r1, r1, r4
 8001c74:	e6e7      	b.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001c76:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <__aeabi_ddiv+0x5c4>)
 8001c78:	0028      	movs	r0, r5
 8001c7a:	445a      	add	r2, fp
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	4095      	lsls	r5, r2
 8001c80:	4093      	lsls	r3, r2
 8001c82:	40c8      	lsrs	r0, r1
 8001c84:	1e6a      	subs	r2, r5, #1
 8001c86:	4195      	sbcs	r5, r2
 8001c88:	4644      	mov	r4, r8
 8001c8a:	4303      	orrs	r3, r0
 8001c8c:	432b      	orrs	r3, r5
 8001c8e:	40cc      	lsrs	r4, r1
 8001c90:	075a      	lsls	r2, r3, #29
 8001c92:	d092      	beq.n	8001bba <__aeabi_ddiv+0x45e>
 8001c94:	220f      	movs	r2, #15
 8001c96:	401a      	ands	r2, r3
 8001c98:	2a04      	cmp	r2, #4
 8001c9a:	d188      	bne.n	8001bae <__aeabi_ddiv+0x452>
 8001c9c:	e78d      	b.n	8001bba <__aeabi_ddiv+0x45e>
 8001c9e:	0035      	movs	r5, r6
 8001ca0:	4281      	cmp	r1, r0
 8001ca2:	d000      	beq.n	8001ca6 <__aeabi_ddiv+0x54a>
 8001ca4:	e74b      	b.n	8001b3e <__aeabi_ddiv+0x3e2>
 8001ca6:	9a00      	ldr	r2, [sp, #0]
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d000      	beq.n	8001cae <__aeabi_ddiv+0x552>
 8001cac:	e747      	b.n	8001b3e <__aeabi_ddiv+0x3e2>
 8001cae:	e618      	b.n	80018e2 <__aeabi_ddiv+0x186>
 8001cb0:	42ae      	cmp	r6, r5
 8001cb2:	d99c      	bls.n	8001bee <__aeabi_ddiv+0x492>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	425b      	negs	r3, r3
 8001cb8:	469c      	mov	ip, r3
 8001cba:	9b00      	ldr	r3, [sp, #0]
 8001cbc:	44e0      	add	r8, ip
 8001cbe:	469c      	mov	ip, r3
 8001cc0:	4465      	add	r5, ip
 8001cc2:	429d      	cmp	r5, r3
 8001cc4:	419b      	sbcs	r3, r3
 8001cc6:	425b      	negs	r3, r3
 8001cc8:	191b      	adds	r3, r3, r4
 8001cca:	18c9      	adds	r1, r1, r3
 8001ccc:	e6e4      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001cce:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <__aeabi_ddiv+0x5c8>)
 8001cd0:	445a      	add	r2, fp
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	dc00      	bgt.n	8001cd8 <__aeabi_ddiv+0x57c>
 8001cd6:	e744      	b.n	8001b62 <__aeabi_ddiv+0x406>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2500      	movs	r5, #0
 8001cdc:	4498      	add	r8, r3
 8001cde:	e609      	b.n	80018f4 <__aeabi_ddiv+0x198>
 8001ce0:	0765      	lsls	r5, r4, #29
 8001ce2:	0264      	lsls	r4, r4, #9
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	08db      	lsrs	r3, r3, #3
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	2300      	movs	r3, #0
 8001cec:	e590      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001cee:	9e00      	ldr	r6, [sp, #0]
 8001cf0:	3d02      	subs	r5, #2
 8001cf2:	0072      	lsls	r2, r6, #1
 8001cf4:	42b2      	cmp	r2, r6
 8001cf6:	41bf      	sbcs	r7, r7
 8001cf8:	427f      	negs	r7, r7
 8001cfa:	193c      	adds	r4, r7, r4
 8001cfc:	1909      	adds	r1, r1, r4
 8001cfe:	9200      	str	r2, [sp, #0]
 8001d00:	e7ce      	b.n	8001ca0 <__aeabi_ddiv+0x544>
 8001d02:	2480      	movs	r4, #128	; 0x80
 8001d04:	4643      	mov	r3, r8
 8001d06:	0324      	lsls	r4, r4, #12
 8001d08:	431c      	orrs	r4, r3
 8001d0a:	0324      	lsls	r4, r4, #12
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <__aeabi_ddiv+0x5cc>)
 8001d0e:	0b24      	lsrs	r4, r4, #12
 8001d10:	e57e      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001d12:	9a00      	ldr	r2, [sp, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3ea      	bcc.n	8001cee <__aeabi_ddiv+0x592>
 8001d18:	0035      	movs	r5, r6
 8001d1a:	e7c4      	b.n	8001ca6 <__aeabi_ddiv+0x54a>
 8001d1c:	0000043e 	.word	0x0000043e
 8001d20:	0000041e 	.word	0x0000041e
 8001d24:	000003ff 	.word	0x000003ff
 8001d28:	000007ff 	.word	0x000007ff

08001d2c <__eqdf2>:
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	464f      	mov	r7, r9
 8001d30:	4646      	mov	r6, r8
 8001d32:	46d6      	mov	lr, sl
 8001d34:	4694      	mov	ip, r2
 8001d36:	4691      	mov	r9, r2
 8001d38:	031a      	lsls	r2, r3, #12
 8001d3a:	0b12      	lsrs	r2, r2, #12
 8001d3c:	4d18      	ldr	r5, [pc, #96]	; (8001da0 <__eqdf2+0x74>)
 8001d3e:	b5c0      	push	{r6, r7, lr}
 8001d40:	004c      	lsls	r4, r1, #1
 8001d42:	030f      	lsls	r7, r1, #12
 8001d44:	4692      	mov	sl, r2
 8001d46:	005a      	lsls	r2, r3, #1
 8001d48:	0006      	movs	r6, r0
 8001d4a:	4680      	mov	r8, r0
 8001d4c:	0b3f      	lsrs	r7, r7, #12
 8001d4e:	2001      	movs	r0, #1
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	0fc9      	lsrs	r1, r1, #31
 8001d54:	0d52      	lsrs	r2, r2, #21
 8001d56:	0fdb      	lsrs	r3, r3, #31
 8001d58:	42ac      	cmp	r4, r5
 8001d5a:	d00a      	beq.n	8001d72 <__eqdf2+0x46>
 8001d5c:	42aa      	cmp	r2, r5
 8001d5e:	d003      	beq.n	8001d68 <__eqdf2+0x3c>
 8001d60:	4294      	cmp	r4, r2
 8001d62:	d101      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d64:	4557      	cmp	r7, sl
 8001d66:	d00d      	beq.n	8001d84 <__eqdf2+0x58>
 8001d68:	bce0      	pop	{r5, r6, r7}
 8001d6a:	46ba      	mov	sl, r7
 8001d6c:	46b1      	mov	r9, r6
 8001d6e:	46a8      	mov	r8, r5
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d72:	003d      	movs	r5, r7
 8001d74:	4335      	orrs	r5, r6
 8001d76:	d1f7      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d78:	42a2      	cmp	r2, r4
 8001d7a:	d1f5      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d7c:	4652      	mov	r2, sl
 8001d7e:	4665      	mov	r5, ip
 8001d80:	432a      	orrs	r2, r5
 8001d82:	d1f1      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d84:	2001      	movs	r0, #1
 8001d86:	45c8      	cmp	r8, r9
 8001d88:	d1ee      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d8a:	4299      	cmp	r1, r3
 8001d8c:	d006      	beq.n	8001d9c <__eqdf2+0x70>
 8001d8e:	2c00      	cmp	r4, #0
 8001d90:	d1ea      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d92:	433e      	orrs	r6, r7
 8001d94:	0030      	movs	r0, r6
 8001d96:	1e46      	subs	r6, r0, #1
 8001d98:	41b0      	sbcs	r0, r6
 8001d9a:	e7e5      	b.n	8001d68 <__eqdf2+0x3c>
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	e7e3      	b.n	8001d68 <__eqdf2+0x3c>
 8001da0:	000007ff 	.word	0x000007ff

08001da4 <__gedf2>:
 8001da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da6:	464e      	mov	r6, r9
 8001da8:	4645      	mov	r5, r8
 8001daa:	4657      	mov	r7, sl
 8001dac:	46de      	mov	lr, fp
 8001dae:	0004      	movs	r4, r0
 8001db0:	0018      	movs	r0, r3
 8001db2:	b5e0      	push	{r5, r6, r7, lr}
 8001db4:	0016      	movs	r6, r2
 8001db6:	031b      	lsls	r3, r3, #12
 8001db8:	0b1b      	lsrs	r3, r3, #12
 8001dba:	4d32      	ldr	r5, [pc, #200]	; (8001e84 <__gedf2+0xe0>)
 8001dbc:	030f      	lsls	r7, r1, #12
 8001dbe:	004a      	lsls	r2, r1, #1
 8001dc0:	4699      	mov	r9, r3
 8001dc2:	0043      	lsls	r3, r0, #1
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	46b0      	mov	r8, r6
 8001dc8:	0b3f      	lsrs	r7, r7, #12
 8001dca:	0d52      	lsrs	r2, r2, #21
 8001dcc:	0fc9      	lsrs	r1, r1, #31
 8001dce:	0d5b      	lsrs	r3, r3, #21
 8001dd0:	0fc0      	lsrs	r0, r0, #31
 8001dd2:	42aa      	cmp	r2, r5
 8001dd4:	d029      	beq.n	8001e2a <__gedf2+0x86>
 8001dd6:	42ab      	cmp	r3, r5
 8001dd8:	d018      	beq.n	8001e0c <__gedf2+0x68>
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	d12a      	bne.n	8001e34 <__gedf2+0x90>
 8001dde:	433c      	orrs	r4, r7
 8001de0:	46a3      	mov	fp, r4
 8001de2:	4265      	negs	r5, r4
 8001de4:	4165      	adcs	r5, r4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <__gedf2+0x4c>
 8001dea:	464c      	mov	r4, r9
 8001dec:	4326      	orrs	r6, r4
 8001dee:	d027      	beq.n	8001e40 <__gedf2+0x9c>
 8001df0:	2d00      	cmp	r5, #0
 8001df2:	d115      	bne.n	8001e20 <__gedf2+0x7c>
 8001df4:	4281      	cmp	r1, r0
 8001df6:	d028      	beq.n	8001e4a <__gedf2+0xa6>
 8001df8:	2002      	movs	r0, #2
 8001dfa:	3901      	subs	r1, #1
 8001dfc:	4008      	ands	r0, r1
 8001dfe:	3801      	subs	r0, #1
 8001e00:	bcf0      	pop	{r4, r5, r6, r7}
 8001e02:	46bb      	mov	fp, r7
 8001e04:	46b2      	mov	sl, r6
 8001e06:	46a9      	mov	r9, r5
 8001e08:	46a0      	mov	r8, r4
 8001e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0c:	464d      	mov	r5, r9
 8001e0e:	432e      	orrs	r6, r5
 8001e10:	d12f      	bne.n	8001e72 <__gedf2+0xce>
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	d1ee      	bne.n	8001df4 <__gedf2+0x50>
 8001e16:	433c      	orrs	r4, r7
 8001e18:	4265      	negs	r5, r4
 8001e1a:	4165      	adcs	r5, r4
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	d0e9      	beq.n	8001df4 <__gedf2+0x50>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d1ed      	bne.n	8001e00 <__gedf2+0x5c>
 8001e24:	2001      	movs	r0, #1
 8001e26:	4240      	negs	r0, r0
 8001e28:	e7ea      	b.n	8001e00 <__gedf2+0x5c>
 8001e2a:	003d      	movs	r5, r7
 8001e2c:	4325      	orrs	r5, r4
 8001e2e:	d120      	bne.n	8001e72 <__gedf2+0xce>
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d0eb      	beq.n	8001e0c <__gedf2+0x68>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1dd      	bne.n	8001df4 <__gedf2+0x50>
 8001e38:	464c      	mov	r4, r9
 8001e3a:	4326      	orrs	r6, r4
 8001e3c:	d1da      	bne.n	8001df4 <__gedf2+0x50>
 8001e3e:	e7db      	b.n	8001df8 <__gedf2+0x54>
 8001e40:	465b      	mov	r3, fp
 8001e42:	2000      	movs	r0, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0db      	beq.n	8001e00 <__gedf2+0x5c>
 8001e48:	e7d6      	b.n	8001df8 <__gedf2+0x54>
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	dc0a      	bgt.n	8001e64 <__gedf2+0xc0>
 8001e4e:	dbe7      	blt.n	8001e20 <__gedf2+0x7c>
 8001e50:	454f      	cmp	r7, r9
 8001e52:	d8d1      	bhi.n	8001df8 <__gedf2+0x54>
 8001e54:	d010      	beq.n	8001e78 <__gedf2+0xd4>
 8001e56:	2000      	movs	r0, #0
 8001e58:	454f      	cmp	r7, r9
 8001e5a:	d2d1      	bcs.n	8001e00 <__gedf2+0x5c>
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	d0e1      	beq.n	8001e24 <__gedf2+0x80>
 8001e60:	0008      	movs	r0, r1
 8001e62:	e7cd      	b.n	8001e00 <__gedf2+0x5c>
 8001e64:	4243      	negs	r3, r0
 8001e66:	4158      	adcs	r0, r3
 8001e68:	2302      	movs	r3, #2
 8001e6a:	4240      	negs	r0, r0
 8001e6c:	4018      	ands	r0, r3
 8001e6e:	3801      	subs	r0, #1
 8001e70:	e7c6      	b.n	8001e00 <__gedf2+0x5c>
 8001e72:	2002      	movs	r0, #2
 8001e74:	4240      	negs	r0, r0
 8001e76:	e7c3      	b.n	8001e00 <__gedf2+0x5c>
 8001e78:	45c4      	cmp	ip, r8
 8001e7a:	d8bd      	bhi.n	8001df8 <__gedf2+0x54>
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	45c4      	cmp	ip, r8
 8001e80:	d2be      	bcs.n	8001e00 <__gedf2+0x5c>
 8001e82:	e7eb      	b.n	8001e5c <__gedf2+0xb8>
 8001e84:	000007ff 	.word	0x000007ff

08001e88 <__ledf2>:
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	464e      	mov	r6, r9
 8001e8c:	4645      	mov	r5, r8
 8001e8e:	4657      	mov	r7, sl
 8001e90:	46de      	mov	lr, fp
 8001e92:	0004      	movs	r4, r0
 8001e94:	0018      	movs	r0, r3
 8001e96:	b5e0      	push	{r5, r6, r7, lr}
 8001e98:	0016      	movs	r6, r2
 8001e9a:	031b      	lsls	r3, r3, #12
 8001e9c:	0b1b      	lsrs	r3, r3, #12
 8001e9e:	4d31      	ldr	r5, [pc, #196]	; (8001f64 <__ledf2+0xdc>)
 8001ea0:	030f      	lsls	r7, r1, #12
 8001ea2:	004a      	lsls	r2, r1, #1
 8001ea4:	4699      	mov	r9, r3
 8001ea6:	0043      	lsls	r3, r0, #1
 8001ea8:	46a4      	mov	ip, r4
 8001eaa:	46b0      	mov	r8, r6
 8001eac:	0b3f      	lsrs	r7, r7, #12
 8001eae:	0d52      	lsrs	r2, r2, #21
 8001eb0:	0fc9      	lsrs	r1, r1, #31
 8001eb2:	0d5b      	lsrs	r3, r3, #21
 8001eb4:	0fc0      	lsrs	r0, r0, #31
 8001eb6:	42aa      	cmp	r2, r5
 8001eb8:	d011      	beq.n	8001ede <__ledf2+0x56>
 8001eba:	42ab      	cmp	r3, r5
 8001ebc:	d014      	beq.n	8001ee8 <__ledf2+0x60>
 8001ebe:	2a00      	cmp	r2, #0
 8001ec0:	d12f      	bne.n	8001f22 <__ledf2+0x9a>
 8001ec2:	433c      	orrs	r4, r7
 8001ec4:	46a3      	mov	fp, r4
 8001ec6:	4265      	negs	r5, r4
 8001ec8:	4165      	adcs	r5, r4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d114      	bne.n	8001ef8 <__ledf2+0x70>
 8001ece:	464c      	mov	r4, r9
 8001ed0:	4326      	orrs	r6, r4
 8001ed2:	d111      	bne.n	8001ef8 <__ledf2+0x70>
 8001ed4:	465b      	mov	r3, fp
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d017      	beq.n	8001f0c <__ledf2+0x84>
 8001edc:	e010      	b.n	8001f00 <__ledf2+0x78>
 8001ede:	003d      	movs	r5, r7
 8001ee0:	4325      	orrs	r5, r4
 8001ee2:	d112      	bne.n	8001f0a <__ledf2+0x82>
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d11c      	bne.n	8001f22 <__ledf2+0x9a>
 8001ee8:	464d      	mov	r5, r9
 8001eea:	432e      	orrs	r6, r5
 8001eec:	d10d      	bne.n	8001f0a <__ledf2+0x82>
 8001eee:	2a00      	cmp	r2, #0
 8001ef0:	d104      	bne.n	8001efc <__ledf2+0x74>
 8001ef2:	433c      	orrs	r4, r7
 8001ef4:	4265      	negs	r5, r4
 8001ef6:	4165      	adcs	r5, r4
 8001ef8:	2d00      	cmp	r5, #0
 8001efa:	d10d      	bne.n	8001f18 <__ledf2+0x90>
 8001efc:	4281      	cmp	r1, r0
 8001efe:	d016      	beq.n	8001f2e <__ledf2+0xa6>
 8001f00:	2002      	movs	r0, #2
 8001f02:	3901      	subs	r1, #1
 8001f04:	4008      	ands	r0, r1
 8001f06:	3801      	subs	r0, #1
 8001f08:	e000      	b.n	8001f0c <__ledf2+0x84>
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f0e:	46bb      	mov	fp, r7
 8001f10:	46b2      	mov	sl, r6
 8001f12:	46a9      	mov	r9, r5
 8001f14:	46a0      	mov	r8, r4
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d1f7      	bne.n	8001f0c <__ledf2+0x84>
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	4240      	negs	r0, r0
 8001f20:	e7f4      	b.n	8001f0c <__ledf2+0x84>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1ea      	bne.n	8001efc <__ledf2+0x74>
 8001f26:	464c      	mov	r4, r9
 8001f28:	4326      	orrs	r6, r4
 8001f2a:	d1e7      	bne.n	8001efc <__ledf2+0x74>
 8001f2c:	e7e8      	b.n	8001f00 <__ledf2+0x78>
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dd06      	ble.n	8001f40 <__ledf2+0xb8>
 8001f32:	4243      	negs	r3, r0
 8001f34:	4158      	adcs	r0, r3
 8001f36:	2302      	movs	r3, #2
 8001f38:	4240      	negs	r0, r0
 8001f3a:	4018      	ands	r0, r3
 8001f3c:	3801      	subs	r0, #1
 8001f3e:	e7e5      	b.n	8001f0c <__ledf2+0x84>
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbe9      	blt.n	8001f18 <__ledf2+0x90>
 8001f44:	454f      	cmp	r7, r9
 8001f46:	d8db      	bhi.n	8001f00 <__ledf2+0x78>
 8001f48:	d006      	beq.n	8001f58 <__ledf2+0xd0>
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	454f      	cmp	r7, r9
 8001f4e:	d2dd      	bcs.n	8001f0c <__ledf2+0x84>
 8001f50:	2900      	cmp	r1, #0
 8001f52:	d0e3      	beq.n	8001f1c <__ledf2+0x94>
 8001f54:	0008      	movs	r0, r1
 8001f56:	e7d9      	b.n	8001f0c <__ledf2+0x84>
 8001f58:	45c4      	cmp	ip, r8
 8001f5a:	d8d1      	bhi.n	8001f00 <__ledf2+0x78>
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	45c4      	cmp	ip, r8
 8001f60:	d2d4      	bcs.n	8001f0c <__ledf2+0x84>
 8001f62:	e7f5      	b.n	8001f50 <__ledf2+0xc8>
 8001f64:	000007ff 	.word	0x000007ff

08001f68 <__aeabi_dmul>:
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	4657      	mov	r7, sl
 8001f6c:	464e      	mov	r6, r9
 8001f6e:	4645      	mov	r5, r8
 8001f70:	46de      	mov	lr, fp
 8001f72:	b5e0      	push	{r5, r6, r7, lr}
 8001f74:	4698      	mov	r8, r3
 8001f76:	030c      	lsls	r4, r1, #12
 8001f78:	004b      	lsls	r3, r1, #1
 8001f7a:	0006      	movs	r6, r0
 8001f7c:	4692      	mov	sl, r2
 8001f7e:	b087      	sub	sp, #28
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	0d5b      	lsrs	r3, r3, #21
 8001f84:	0fcf      	lsrs	r7, r1, #31
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d06c      	beq.n	8002064 <__aeabi_dmul+0xfc>
 8001f8a:	4add      	ldr	r2, [pc, #884]	; (8002300 <__aeabi_dmul+0x398>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dmul+0x2a>
 8001f90:	e086      	b.n	80020a0 <__aeabi_dmul+0x138>
 8001f92:	0f42      	lsrs	r2, r0, #29
 8001f94:	00e4      	lsls	r4, r4, #3
 8001f96:	4314      	orrs	r4, r2
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	0412      	lsls	r2, r2, #16
 8001f9c:	4314      	orrs	r4, r2
 8001f9e:	4ad9      	ldr	r2, [pc, #868]	; (8002304 <__aeabi_dmul+0x39c>)
 8001fa0:	00c5      	lsls	r5, r0, #3
 8001fa2:	4694      	mov	ip, r2
 8001fa4:	4463      	add	r3, ip
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	4699      	mov	r9, r3
 8001fac:	469b      	mov	fp, r3
 8001fae:	4643      	mov	r3, r8
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	031e      	lsls	r6, r3, #12
 8001fb4:	0fd2      	lsrs	r2, r2, #31
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4650      	mov	r0, sl
 8001fba:	4690      	mov	r8, r2
 8001fbc:	0b36      	lsrs	r6, r6, #12
 8001fbe:	0d5b      	lsrs	r3, r3, #21
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dmul+0x5c>
 8001fc2:	e078      	b.n	80020b6 <__aeabi_dmul+0x14e>
 8001fc4:	4ace      	ldr	r2, [pc, #824]	; (8002300 <__aeabi_dmul+0x398>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01d      	beq.n	8002006 <__aeabi_dmul+0x9e>
 8001fca:	49ce      	ldr	r1, [pc, #824]	; (8002304 <__aeabi_dmul+0x39c>)
 8001fcc:	0f42      	lsrs	r2, r0, #29
 8001fce:	468c      	mov	ip, r1
 8001fd0:	9900      	ldr	r1, [sp, #0]
 8001fd2:	4463      	add	r3, ip
 8001fd4:	00f6      	lsls	r6, r6, #3
 8001fd6:	468c      	mov	ip, r1
 8001fd8:	4316      	orrs	r6, r2
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	449c      	add	ip, r3
 8001fde:	0412      	lsls	r2, r2, #16
 8001fe0:	4663      	mov	r3, ip
 8001fe2:	4316      	orrs	r6, r2
 8001fe4:	00c2      	lsls	r2, r0, #3
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	9900      	ldr	r1, [sp, #0]
 8001fec:	4643      	mov	r3, r8
 8001fee:	3101      	adds	r1, #1
 8001ff0:	468c      	mov	ip, r1
 8001ff2:	4649      	mov	r1, r9
 8001ff4:	407b      	eors	r3, r7
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	290f      	cmp	r1, #15
 8001ffa:	d900      	bls.n	8001ffe <__aeabi_dmul+0x96>
 8001ffc:	e07e      	b.n	80020fc <__aeabi_dmul+0x194>
 8001ffe:	4bc2      	ldr	r3, [pc, #776]	; (8002308 <__aeabi_dmul+0x3a0>)
 8002000:	0089      	lsls	r1, r1, #2
 8002002:	5859      	ldr	r1, [r3, r1]
 8002004:	468f      	mov	pc, r1
 8002006:	4652      	mov	r2, sl
 8002008:	9b00      	ldr	r3, [sp, #0]
 800200a:	4332      	orrs	r2, r6
 800200c:	d000      	beq.n	8002010 <__aeabi_dmul+0xa8>
 800200e:	e156      	b.n	80022be <__aeabi_dmul+0x356>
 8002010:	49bb      	ldr	r1, [pc, #748]	; (8002300 <__aeabi_dmul+0x398>)
 8002012:	2600      	movs	r6, #0
 8002014:	468c      	mov	ip, r1
 8002016:	4463      	add	r3, ip
 8002018:	4649      	mov	r1, r9
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2302      	movs	r3, #2
 800201e:	4319      	orrs	r1, r3
 8002020:	4689      	mov	r9, r1
 8002022:	2002      	movs	r0, #2
 8002024:	e7e1      	b.n	8001fea <__aeabi_dmul+0x82>
 8002026:	4643      	mov	r3, r8
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	0034      	movs	r4, r6
 800202c:	0015      	movs	r5, r2
 800202e:	4683      	mov	fp, r0
 8002030:	465b      	mov	r3, fp
 8002032:	2b02      	cmp	r3, #2
 8002034:	d05e      	beq.n	80020f4 <__aeabi_dmul+0x18c>
 8002036:	2b03      	cmp	r3, #3
 8002038:	d100      	bne.n	800203c <__aeabi_dmul+0xd4>
 800203a:	e1f3      	b.n	8002424 <__aeabi_dmul+0x4bc>
 800203c:	2b01      	cmp	r3, #1
 800203e:	d000      	beq.n	8002042 <__aeabi_dmul+0xda>
 8002040:	e118      	b.n	8002274 <__aeabi_dmul+0x30c>
 8002042:	2200      	movs	r2, #0
 8002044:	2400      	movs	r4, #0
 8002046:	2500      	movs	r5, #0
 8002048:	9b01      	ldr	r3, [sp, #4]
 800204a:	0512      	lsls	r2, r2, #20
 800204c:	4322      	orrs	r2, r4
 800204e:	07db      	lsls	r3, r3, #31
 8002050:	431a      	orrs	r2, r3
 8002052:	0028      	movs	r0, r5
 8002054:	0011      	movs	r1, r2
 8002056:	b007      	add	sp, #28
 8002058:	bcf0      	pop	{r4, r5, r6, r7}
 800205a:	46bb      	mov	fp, r7
 800205c:	46b2      	mov	sl, r6
 800205e:	46a9      	mov	r9, r5
 8002060:	46a0      	mov	r8, r4
 8002062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002064:	0025      	movs	r5, r4
 8002066:	4305      	orrs	r5, r0
 8002068:	d100      	bne.n	800206c <__aeabi_dmul+0x104>
 800206a:	e141      	b.n	80022f0 <__aeabi_dmul+0x388>
 800206c:	2c00      	cmp	r4, #0
 800206e:	d100      	bne.n	8002072 <__aeabi_dmul+0x10a>
 8002070:	e1ad      	b.n	80023ce <__aeabi_dmul+0x466>
 8002072:	0020      	movs	r0, r4
 8002074:	f000 fe4a 	bl	8002d0c <__clzsi2>
 8002078:	0001      	movs	r1, r0
 800207a:	0002      	movs	r2, r0
 800207c:	390b      	subs	r1, #11
 800207e:	231d      	movs	r3, #29
 8002080:	0010      	movs	r0, r2
 8002082:	1a5b      	subs	r3, r3, r1
 8002084:	0031      	movs	r1, r6
 8002086:	0035      	movs	r5, r6
 8002088:	3808      	subs	r0, #8
 800208a:	4084      	lsls	r4, r0
 800208c:	40d9      	lsrs	r1, r3
 800208e:	4085      	lsls	r5, r0
 8002090:	430c      	orrs	r4, r1
 8002092:	489e      	ldr	r0, [pc, #632]	; (800230c <__aeabi_dmul+0x3a4>)
 8002094:	1a83      	subs	r3, r0, r2
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2300      	movs	r3, #0
 800209a:	4699      	mov	r9, r3
 800209c:	469b      	mov	fp, r3
 800209e:	e786      	b.n	8001fae <__aeabi_dmul+0x46>
 80020a0:	0005      	movs	r5, r0
 80020a2:	4325      	orrs	r5, r4
 80020a4:	d000      	beq.n	80020a8 <__aeabi_dmul+0x140>
 80020a6:	e11c      	b.n	80022e2 <__aeabi_dmul+0x37a>
 80020a8:	2208      	movs	r2, #8
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2302      	movs	r3, #2
 80020ae:	2400      	movs	r4, #0
 80020b0:	4691      	mov	r9, r2
 80020b2:	469b      	mov	fp, r3
 80020b4:	e77b      	b.n	8001fae <__aeabi_dmul+0x46>
 80020b6:	4652      	mov	r2, sl
 80020b8:	4332      	orrs	r2, r6
 80020ba:	d100      	bne.n	80020be <__aeabi_dmul+0x156>
 80020bc:	e10a      	b.n	80022d4 <__aeabi_dmul+0x36c>
 80020be:	2e00      	cmp	r6, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dmul+0x15c>
 80020c2:	e176      	b.n	80023b2 <__aeabi_dmul+0x44a>
 80020c4:	0030      	movs	r0, r6
 80020c6:	f000 fe21 	bl	8002d0c <__clzsi2>
 80020ca:	0002      	movs	r2, r0
 80020cc:	3a0b      	subs	r2, #11
 80020ce:	231d      	movs	r3, #29
 80020d0:	0001      	movs	r1, r0
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	4652      	mov	r2, sl
 80020d6:	3908      	subs	r1, #8
 80020d8:	40da      	lsrs	r2, r3
 80020da:	408e      	lsls	r6, r1
 80020dc:	4316      	orrs	r6, r2
 80020de:	4652      	mov	r2, sl
 80020e0:	408a      	lsls	r2, r1
 80020e2:	9b00      	ldr	r3, [sp, #0]
 80020e4:	4989      	ldr	r1, [pc, #548]	; (800230c <__aeabi_dmul+0x3a4>)
 80020e6:	1a18      	subs	r0, r3, r0
 80020e8:	0003      	movs	r3, r0
 80020ea:	468c      	mov	ip, r1
 80020ec:	4463      	add	r3, ip
 80020ee:	2000      	movs	r0, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	e77a      	b.n	8001fea <__aeabi_dmul+0x82>
 80020f4:	2400      	movs	r4, #0
 80020f6:	2500      	movs	r5, #0
 80020f8:	4a81      	ldr	r2, [pc, #516]	; (8002300 <__aeabi_dmul+0x398>)
 80020fa:	e7a5      	b.n	8002048 <__aeabi_dmul+0xe0>
 80020fc:	0c2f      	lsrs	r7, r5, #16
 80020fe:	042d      	lsls	r5, r5, #16
 8002100:	0c2d      	lsrs	r5, r5, #16
 8002102:	002b      	movs	r3, r5
 8002104:	0c11      	lsrs	r1, r2, #16
 8002106:	0412      	lsls	r2, r2, #16
 8002108:	0c12      	lsrs	r2, r2, #16
 800210a:	4353      	muls	r3, r2
 800210c:	4698      	mov	r8, r3
 800210e:	0013      	movs	r3, r2
 8002110:	0028      	movs	r0, r5
 8002112:	437b      	muls	r3, r7
 8002114:	4699      	mov	r9, r3
 8002116:	4348      	muls	r0, r1
 8002118:	4448      	add	r0, r9
 800211a:	4683      	mov	fp, r0
 800211c:	4640      	mov	r0, r8
 800211e:	000b      	movs	r3, r1
 8002120:	0c00      	lsrs	r0, r0, #16
 8002122:	4682      	mov	sl, r0
 8002124:	4658      	mov	r0, fp
 8002126:	437b      	muls	r3, r7
 8002128:	4450      	add	r0, sl
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	4581      	cmp	r9, r0
 800212e:	d906      	bls.n	800213e <__aeabi_dmul+0x1d6>
 8002130:	469a      	mov	sl, r3
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	025b      	lsls	r3, r3, #9
 8002136:	4699      	mov	r9, r3
 8002138:	44ca      	add	sl, r9
 800213a:	4653      	mov	r3, sl
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	0c03      	lsrs	r3, r0, #16
 8002140:	469b      	mov	fp, r3
 8002142:	4643      	mov	r3, r8
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	0400      	lsls	r0, r0, #16
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	4698      	mov	r8, r3
 800214c:	0003      	movs	r3, r0
 800214e:	4443      	add	r3, r8
 8002150:	9304      	str	r3, [sp, #16]
 8002152:	0c33      	lsrs	r3, r6, #16
 8002154:	4699      	mov	r9, r3
 8002156:	002b      	movs	r3, r5
 8002158:	0436      	lsls	r6, r6, #16
 800215a:	0c36      	lsrs	r6, r6, #16
 800215c:	4373      	muls	r3, r6
 800215e:	4698      	mov	r8, r3
 8002160:	0033      	movs	r3, r6
 8002162:	437b      	muls	r3, r7
 8002164:	469a      	mov	sl, r3
 8002166:	464b      	mov	r3, r9
 8002168:	435d      	muls	r5, r3
 800216a:	435f      	muls	r7, r3
 800216c:	4643      	mov	r3, r8
 800216e:	4455      	add	r5, sl
 8002170:	0c18      	lsrs	r0, r3, #16
 8002172:	1940      	adds	r0, r0, r5
 8002174:	4582      	cmp	sl, r0
 8002176:	d903      	bls.n	8002180 <__aeabi_dmul+0x218>
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	025b      	lsls	r3, r3, #9
 800217c:	469a      	mov	sl, r3
 800217e:	4457      	add	r7, sl
 8002180:	0c05      	lsrs	r5, r0, #16
 8002182:	19eb      	adds	r3, r5, r7
 8002184:	9305      	str	r3, [sp, #20]
 8002186:	4643      	mov	r3, r8
 8002188:	041d      	lsls	r5, r3, #16
 800218a:	0c2d      	lsrs	r5, r5, #16
 800218c:	0400      	lsls	r0, r0, #16
 800218e:	1940      	adds	r0, r0, r5
 8002190:	0c25      	lsrs	r5, r4, #16
 8002192:	0424      	lsls	r4, r4, #16
 8002194:	0c24      	lsrs	r4, r4, #16
 8002196:	0027      	movs	r7, r4
 8002198:	4357      	muls	r7, r2
 800219a:	436a      	muls	r2, r5
 800219c:	4690      	mov	r8, r2
 800219e:	002a      	movs	r2, r5
 80021a0:	0c3b      	lsrs	r3, r7, #16
 80021a2:	469a      	mov	sl, r3
 80021a4:	434a      	muls	r2, r1
 80021a6:	4361      	muls	r1, r4
 80021a8:	4441      	add	r1, r8
 80021aa:	4451      	add	r1, sl
 80021ac:	4483      	add	fp, r0
 80021ae:	4588      	cmp	r8, r1
 80021b0:	d903      	bls.n	80021ba <__aeabi_dmul+0x252>
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	025b      	lsls	r3, r3, #9
 80021b6:	4698      	mov	r8, r3
 80021b8:	4442      	add	r2, r8
 80021ba:	043f      	lsls	r7, r7, #16
 80021bc:	0c0b      	lsrs	r3, r1, #16
 80021be:	0c3f      	lsrs	r7, r7, #16
 80021c0:	0409      	lsls	r1, r1, #16
 80021c2:	19c9      	adds	r1, r1, r7
 80021c4:	0027      	movs	r7, r4
 80021c6:	4698      	mov	r8, r3
 80021c8:	464b      	mov	r3, r9
 80021ca:	4377      	muls	r7, r6
 80021cc:	435c      	muls	r4, r3
 80021ce:	436e      	muls	r6, r5
 80021d0:	435d      	muls	r5, r3
 80021d2:	0c3b      	lsrs	r3, r7, #16
 80021d4:	4699      	mov	r9, r3
 80021d6:	19a4      	adds	r4, r4, r6
 80021d8:	444c      	add	r4, r9
 80021da:	4442      	add	r2, r8
 80021dc:	9503      	str	r5, [sp, #12]
 80021de:	42a6      	cmp	r6, r4
 80021e0:	d904      	bls.n	80021ec <__aeabi_dmul+0x284>
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	025b      	lsls	r3, r3, #9
 80021e6:	4698      	mov	r8, r3
 80021e8:	4445      	add	r5, r8
 80021ea:	9503      	str	r5, [sp, #12]
 80021ec:	9b02      	ldr	r3, [sp, #8]
 80021ee:	043f      	lsls	r7, r7, #16
 80021f0:	445b      	add	r3, fp
 80021f2:	001e      	movs	r6, r3
 80021f4:	4283      	cmp	r3, r0
 80021f6:	4180      	sbcs	r0, r0
 80021f8:	0423      	lsls	r3, r4, #16
 80021fa:	4698      	mov	r8, r3
 80021fc:	9b05      	ldr	r3, [sp, #20]
 80021fe:	0c3f      	lsrs	r7, r7, #16
 8002200:	4447      	add	r7, r8
 8002202:	4698      	mov	r8, r3
 8002204:	1876      	adds	r6, r6, r1
 8002206:	428e      	cmp	r6, r1
 8002208:	4189      	sbcs	r1, r1
 800220a:	4447      	add	r7, r8
 800220c:	4240      	negs	r0, r0
 800220e:	183d      	adds	r5, r7, r0
 8002210:	46a8      	mov	r8, r5
 8002212:	4693      	mov	fp, r2
 8002214:	4249      	negs	r1, r1
 8002216:	468a      	mov	sl, r1
 8002218:	44c3      	add	fp, r8
 800221a:	429f      	cmp	r7, r3
 800221c:	41bf      	sbcs	r7, r7
 800221e:	4580      	cmp	r8, r0
 8002220:	4180      	sbcs	r0, r0
 8002222:	9b03      	ldr	r3, [sp, #12]
 8002224:	44da      	add	sl, fp
 8002226:	4698      	mov	r8, r3
 8002228:	4653      	mov	r3, sl
 800222a:	4240      	negs	r0, r0
 800222c:	427f      	negs	r7, r7
 800222e:	4307      	orrs	r7, r0
 8002230:	0c24      	lsrs	r4, r4, #16
 8002232:	4593      	cmp	fp, r2
 8002234:	4192      	sbcs	r2, r2
 8002236:	458a      	cmp	sl, r1
 8002238:	4189      	sbcs	r1, r1
 800223a:	193f      	adds	r7, r7, r4
 800223c:	0ddc      	lsrs	r4, r3, #23
 800223e:	9b04      	ldr	r3, [sp, #16]
 8002240:	0275      	lsls	r5, r6, #9
 8002242:	431d      	orrs	r5, r3
 8002244:	1e68      	subs	r0, r5, #1
 8002246:	4185      	sbcs	r5, r0
 8002248:	4653      	mov	r3, sl
 800224a:	4252      	negs	r2, r2
 800224c:	4249      	negs	r1, r1
 800224e:	430a      	orrs	r2, r1
 8002250:	18bf      	adds	r7, r7, r2
 8002252:	4447      	add	r7, r8
 8002254:	0df6      	lsrs	r6, r6, #23
 8002256:	027f      	lsls	r7, r7, #9
 8002258:	4335      	orrs	r5, r6
 800225a:	025a      	lsls	r2, r3, #9
 800225c:	433c      	orrs	r4, r7
 800225e:	4315      	orrs	r5, r2
 8002260:	01fb      	lsls	r3, r7, #7
 8002262:	d400      	bmi.n	8002266 <__aeabi_dmul+0x2fe>
 8002264:	e0c1      	b.n	80023ea <__aeabi_dmul+0x482>
 8002266:	2101      	movs	r1, #1
 8002268:	086a      	lsrs	r2, r5, #1
 800226a:	400d      	ands	r5, r1
 800226c:	4315      	orrs	r5, r2
 800226e:	07e2      	lsls	r2, r4, #31
 8002270:	4315      	orrs	r5, r2
 8002272:	0864      	lsrs	r4, r4, #1
 8002274:	4926      	ldr	r1, [pc, #152]	; (8002310 <__aeabi_dmul+0x3a8>)
 8002276:	4461      	add	r1, ip
 8002278:	2900      	cmp	r1, #0
 800227a:	dd56      	ble.n	800232a <__aeabi_dmul+0x3c2>
 800227c:	076b      	lsls	r3, r5, #29
 800227e:	d009      	beq.n	8002294 <__aeabi_dmul+0x32c>
 8002280:	220f      	movs	r2, #15
 8002282:	402a      	ands	r2, r5
 8002284:	2a04      	cmp	r2, #4
 8002286:	d005      	beq.n	8002294 <__aeabi_dmul+0x32c>
 8002288:	1d2a      	adds	r2, r5, #4
 800228a:	42aa      	cmp	r2, r5
 800228c:	41ad      	sbcs	r5, r5
 800228e:	426d      	negs	r5, r5
 8002290:	1964      	adds	r4, r4, r5
 8002292:	0015      	movs	r5, r2
 8002294:	01e3      	lsls	r3, r4, #7
 8002296:	d504      	bpl.n	80022a2 <__aeabi_dmul+0x33a>
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <__aeabi_dmul+0x3ac>)
 800229c:	00c9      	lsls	r1, r1, #3
 800229e:	4014      	ands	r4, r2
 80022a0:	4461      	add	r1, ip
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <__aeabi_dmul+0x3b0>)
 80022a4:	4291      	cmp	r1, r2
 80022a6:	dd00      	ble.n	80022aa <__aeabi_dmul+0x342>
 80022a8:	e724      	b.n	80020f4 <__aeabi_dmul+0x18c>
 80022aa:	0762      	lsls	r2, r4, #29
 80022ac:	08ed      	lsrs	r5, r5, #3
 80022ae:	0264      	lsls	r4, r4, #9
 80022b0:	0549      	lsls	r1, r1, #21
 80022b2:	4315      	orrs	r5, r2
 80022b4:	0b24      	lsrs	r4, r4, #12
 80022b6:	0d4a      	lsrs	r2, r1, #21
 80022b8:	e6c6      	b.n	8002048 <__aeabi_dmul+0xe0>
 80022ba:	9701      	str	r7, [sp, #4]
 80022bc:	e6b8      	b.n	8002030 <__aeabi_dmul+0xc8>
 80022be:	4a10      	ldr	r2, [pc, #64]	; (8002300 <__aeabi_dmul+0x398>)
 80022c0:	2003      	movs	r0, #3
 80022c2:	4694      	mov	ip, r2
 80022c4:	4463      	add	r3, ip
 80022c6:	464a      	mov	r2, r9
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	2303      	movs	r3, #3
 80022cc:	431a      	orrs	r2, r3
 80022ce:	4691      	mov	r9, r2
 80022d0:	4652      	mov	r2, sl
 80022d2:	e68a      	b.n	8001fea <__aeabi_dmul+0x82>
 80022d4:	4649      	mov	r1, r9
 80022d6:	2301      	movs	r3, #1
 80022d8:	4319      	orrs	r1, r3
 80022da:	4689      	mov	r9, r1
 80022dc:	2600      	movs	r6, #0
 80022de:	2001      	movs	r0, #1
 80022e0:	e683      	b.n	8001fea <__aeabi_dmul+0x82>
 80022e2:	220c      	movs	r2, #12
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2303      	movs	r3, #3
 80022e8:	0005      	movs	r5, r0
 80022ea:	4691      	mov	r9, r2
 80022ec:	469b      	mov	fp, r3
 80022ee:	e65e      	b.n	8001fae <__aeabi_dmul+0x46>
 80022f0:	2304      	movs	r3, #4
 80022f2:	4699      	mov	r9, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	2400      	movs	r4, #0
 80022fc:	469b      	mov	fp, r3
 80022fe:	e656      	b.n	8001fae <__aeabi_dmul+0x46>
 8002300:	000007ff 	.word	0x000007ff
 8002304:	fffffc01 	.word	0xfffffc01
 8002308:	08020098 	.word	0x08020098
 800230c:	fffffc0d 	.word	0xfffffc0d
 8002310:	000003ff 	.word	0x000003ff
 8002314:	feffffff 	.word	0xfeffffff
 8002318:	000007fe 	.word	0x000007fe
 800231c:	2300      	movs	r3, #0
 800231e:	2480      	movs	r4, #128	; 0x80
 8002320:	2500      	movs	r5, #0
 8002322:	4a44      	ldr	r2, [pc, #272]	; (8002434 <__aeabi_dmul+0x4cc>)
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	0324      	lsls	r4, r4, #12
 8002328:	e68e      	b.n	8002048 <__aeabi_dmul+0xe0>
 800232a:	2001      	movs	r0, #1
 800232c:	1a40      	subs	r0, r0, r1
 800232e:	2838      	cmp	r0, #56	; 0x38
 8002330:	dd00      	ble.n	8002334 <__aeabi_dmul+0x3cc>
 8002332:	e686      	b.n	8002042 <__aeabi_dmul+0xda>
 8002334:	281f      	cmp	r0, #31
 8002336:	dd5b      	ble.n	80023f0 <__aeabi_dmul+0x488>
 8002338:	221f      	movs	r2, #31
 800233a:	0023      	movs	r3, r4
 800233c:	4252      	negs	r2, r2
 800233e:	1a51      	subs	r1, r2, r1
 8002340:	40cb      	lsrs	r3, r1
 8002342:	0019      	movs	r1, r3
 8002344:	2820      	cmp	r0, #32
 8002346:	d003      	beq.n	8002350 <__aeabi_dmul+0x3e8>
 8002348:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <__aeabi_dmul+0x4d0>)
 800234a:	4462      	add	r2, ip
 800234c:	4094      	lsls	r4, r2
 800234e:	4325      	orrs	r5, r4
 8002350:	1e6a      	subs	r2, r5, #1
 8002352:	4195      	sbcs	r5, r2
 8002354:	002a      	movs	r2, r5
 8002356:	430a      	orrs	r2, r1
 8002358:	2107      	movs	r1, #7
 800235a:	000d      	movs	r5, r1
 800235c:	2400      	movs	r4, #0
 800235e:	4015      	ands	r5, r2
 8002360:	4211      	tst	r1, r2
 8002362:	d05b      	beq.n	800241c <__aeabi_dmul+0x4b4>
 8002364:	210f      	movs	r1, #15
 8002366:	2400      	movs	r4, #0
 8002368:	4011      	ands	r1, r2
 800236a:	2904      	cmp	r1, #4
 800236c:	d053      	beq.n	8002416 <__aeabi_dmul+0x4ae>
 800236e:	1d11      	adds	r1, r2, #4
 8002370:	4291      	cmp	r1, r2
 8002372:	4192      	sbcs	r2, r2
 8002374:	4252      	negs	r2, r2
 8002376:	18a4      	adds	r4, r4, r2
 8002378:	000a      	movs	r2, r1
 800237a:	0223      	lsls	r3, r4, #8
 800237c:	d54b      	bpl.n	8002416 <__aeabi_dmul+0x4ae>
 800237e:	2201      	movs	r2, #1
 8002380:	2400      	movs	r4, #0
 8002382:	2500      	movs	r5, #0
 8002384:	e660      	b.n	8002048 <__aeabi_dmul+0xe0>
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	031b      	lsls	r3, r3, #12
 800238a:	421c      	tst	r4, r3
 800238c:	d009      	beq.n	80023a2 <__aeabi_dmul+0x43a>
 800238e:	421e      	tst	r6, r3
 8002390:	d107      	bne.n	80023a2 <__aeabi_dmul+0x43a>
 8002392:	4333      	orrs	r3, r6
 8002394:	031c      	lsls	r4, r3, #12
 8002396:	4643      	mov	r3, r8
 8002398:	0015      	movs	r5, r2
 800239a:	0b24      	lsrs	r4, r4, #12
 800239c:	4a25      	ldr	r2, [pc, #148]	; (8002434 <__aeabi_dmul+0x4cc>)
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	e652      	b.n	8002048 <__aeabi_dmul+0xe0>
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0312      	lsls	r2, r2, #12
 80023a6:	4314      	orrs	r4, r2
 80023a8:	0324      	lsls	r4, r4, #12
 80023aa:	4a22      	ldr	r2, [pc, #136]	; (8002434 <__aeabi_dmul+0x4cc>)
 80023ac:	0b24      	lsrs	r4, r4, #12
 80023ae:	9701      	str	r7, [sp, #4]
 80023b0:	e64a      	b.n	8002048 <__aeabi_dmul+0xe0>
 80023b2:	f000 fcab 	bl	8002d0c <__clzsi2>
 80023b6:	0003      	movs	r3, r0
 80023b8:	001a      	movs	r2, r3
 80023ba:	3215      	adds	r2, #21
 80023bc:	3020      	adds	r0, #32
 80023be:	2a1c      	cmp	r2, #28
 80023c0:	dc00      	bgt.n	80023c4 <__aeabi_dmul+0x45c>
 80023c2:	e684      	b.n	80020ce <__aeabi_dmul+0x166>
 80023c4:	4656      	mov	r6, sl
 80023c6:	3b08      	subs	r3, #8
 80023c8:	2200      	movs	r2, #0
 80023ca:	409e      	lsls	r6, r3
 80023cc:	e689      	b.n	80020e2 <__aeabi_dmul+0x17a>
 80023ce:	f000 fc9d 	bl	8002d0c <__clzsi2>
 80023d2:	0001      	movs	r1, r0
 80023d4:	0002      	movs	r2, r0
 80023d6:	3115      	adds	r1, #21
 80023d8:	3220      	adds	r2, #32
 80023da:	291c      	cmp	r1, #28
 80023dc:	dc00      	bgt.n	80023e0 <__aeabi_dmul+0x478>
 80023de:	e64e      	b.n	800207e <__aeabi_dmul+0x116>
 80023e0:	0034      	movs	r4, r6
 80023e2:	3808      	subs	r0, #8
 80023e4:	2500      	movs	r5, #0
 80023e6:	4084      	lsls	r4, r0
 80023e8:	e653      	b.n	8002092 <__aeabi_dmul+0x12a>
 80023ea:	9b00      	ldr	r3, [sp, #0]
 80023ec:	469c      	mov	ip, r3
 80023ee:	e741      	b.n	8002274 <__aeabi_dmul+0x30c>
 80023f0:	4912      	ldr	r1, [pc, #72]	; (800243c <__aeabi_dmul+0x4d4>)
 80023f2:	0022      	movs	r2, r4
 80023f4:	4461      	add	r1, ip
 80023f6:	002e      	movs	r6, r5
 80023f8:	408d      	lsls	r5, r1
 80023fa:	408a      	lsls	r2, r1
 80023fc:	40c6      	lsrs	r6, r0
 80023fe:	1e69      	subs	r1, r5, #1
 8002400:	418d      	sbcs	r5, r1
 8002402:	4332      	orrs	r2, r6
 8002404:	432a      	orrs	r2, r5
 8002406:	40c4      	lsrs	r4, r0
 8002408:	0753      	lsls	r3, r2, #29
 800240a:	d0b6      	beq.n	800237a <__aeabi_dmul+0x412>
 800240c:	210f      	movs	r1, #15
 800240e:	4011      	ands	r1, r2
 8002410:	2904      	cmp	r1, #4
 8002412:	d1ac      	bne.n	800236e <__aeabi_dmul+0x406>
 8002414:	e7b1      	b.n	800237a <__aeabi_dmul+0x412>
 8002416:	0765      	lsls	r5, r4, #29
 8002418:	0264      	lsls	r4, r4, #9
 800241a:	0b24      	lsrs	r4, r4, #12
 800241c:	08d2      	lsrs	r2, r2, #3
 800241e:	4315      	orrs	r5, r2
 8002420:	2200      	movs	r2, #0
 8002422:	e611      	b.n	8002048 <__aeabi_dmul+0xe0>
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	0312      	lsls	r2, r2, #12
 8002428:	4314      	orrs	r4, r2
 800242a:	0324      	lsls	r4, r4, #12
 800242c:	4a01      	ldr	r2, [pc, #4]	; (8002434 <__aeabi_dmul+0x4cc>)
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	e60a      	b.n	8002048 <__aeabi_dmul+0xe0>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	000007ff 	.word	0x000007ff
 8002438:	0000043e 	.word	0x0000043e
 800243c:	0000041e 	.word	0x0000041e

08002440 <__aeabi_dsub>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	4657      	mov	r7, sl
 8002444:	464e      	mov	r6, r9
 8002446:	4645      	mov	r5, r8
 8002448:	46de      	mov	lr, fp
 800244a:	0004      	movs	r4, r0
 800244c:	b5e0      	push	{r5, r6, r7, lr}
 800244e:	001f      	movs	r7, r3
 8002450:	0010      	movs	r0, r2
 8002452:	030b      	lsls	r3, r1, #12
 8002454:	0f62      	lsrs	r2, r4, #29
 8002456:	004e      	lsls	r6, r1, #1
 8002458:	0fcd      	lsrs	r5, r1, #31
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	0339      	lsls	r1, r7, #12
 800245e:	4313      	orrs	r3, r2
 8002460:	0a49      	lsrs	r1, r1, #9
 8002462:	00e2      	lsls	r2, r4, #3
 8002464:	0f44      	lsrs	r4, r0, #29
 8002466:	4321      	orrs	r1, r4
 8002468:	4cc2      	ldr	r4, [pc, #776]	; (8002774 <__aeabi_dsub+0x334>)
 800246a:	4691      	mov	r9, r2
 800246c:	4692      	mov	sl, r2
 800246e:	00c0      	lsls	r0, r0, #3
 8002470:	007a      	lsls	r2, r7, #1
 8002472:	4680      	mov	r8, r0
 8002474:	0d76      	lsrs	r6, r6, #21
 8002476:	0d52      	lsrs	r2, r2, #21
 8002478:	0fff      	lsrs	r7, r7, #31
 800247a:	42a2      	cmp	r2, r4
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0x40>
 800247e:	e0b4      	b.n	80025ea <__aeabi_dsub+0x1aa>
 8002480:	2401      	movs	r4, #1
 8002482:	4067      	eors	r7, r4
 8002484:	46bb      	mov	fp, r7
 8002486:	42bd      	cmp	r5, r7
 8002488:	d100      	bne.n	800248c <__aeabi_dsub+0x4c>
 800248a:	e088      	b.n	800259e <__aeabi_dsub+0x15e>
 800248c:	1ab4      	subs	r4, r6, r2
 800248e:	46a4      	mov	ip, r4
 8002490:	2c00      	cmp	r4, #0
 8002492:	dc00      	bgt.n	8002496 <__aeabi_dsub+0x56>
 8002494:	e0b2      	b.n	80025fc <__aeabi_dsub+0x1bc>
 8002496:	2a00      	cmp	r2, #0
 8002498:	d100      	bne.n	800249c <__aeabi_dsub+0x5c>
 800249a:	e0c5      	b.n	8002628 <__aeabi_dsub+0x1e8>
 800249c:	4ab5      	ldr	r2, [pc, #724]	; (8002774 <__aeabi_dsub+0x334>)
 800249e:	4296      	cmp	r6, r2
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x64>
 80024a2:	e28b      	b.n	80029bc <__aeabi_dsub+0x57c>
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	0412      	lsls	r2, r2, #16
 80024a8:	4311      	orrs	r1, r2
 80024aa:	4662      	mov	r2, ip
 80024ac:	2a38      	cmp	r2, #56	; 0x38
 80024ae:	dd00      	ble.n	80024b2 <__aeabi_dsub+0x72>
 80024b0:	e1a1      	b.n	80027f6 <__aeabi_dsub+0x3b6>
 80024b2:	2a1f      	cmp	r2, #31
 80024b4:	dd00      	ble.n	80024b8 <__aeabi_dsub+0x78>
 80024b6:	e216      	b.n	80028e6 <__aeabi_dsub+0x4a6>
 80024b8:	2720      	movs	r7, #32
 80024ba:	000c      	movs	r4, r1
 80024bc:	1abf      	subs	r7, r7, r2
 80024be:	40bc      	lsls	r4, r7
 80024c0:	0002      	movs	r2, r0
 80024c2:	46a0      	mov	r8, r4
 80024c4:	4664      	mov	r4, ip
 80024c6:	40b8      	lsls	r0, r7
 80024c8:	40e2      	lsrs	r2, r4
 80024ca:	4644      	mov	r4, r8
 80024cc:	4314      	orrs	r4, r2
 80024ce:	0002      	movs	r2, r0
 80024d0:	1e50      	subs	r0, r2, #1
 80024d2:	4182      	sbcs	r2, r0
 80024d4:	4660      	mov	r0, ip
 80024d6:	40c1      	lsrs	r1, r0
 80024d8:	4322      	orrs	r2, r4
 80024da:	1a5b      	subs	r3, r3, r1
 80024dc:	4649      	mov	r1, r9
 80024de:	1a8c      	subs	r4, r1, r2
 80024e0:	45a1      	cmp	r9, r4
 80024e2:	4192      	sbcs	r2, r2
 80024e4:	4252      	negs	r2, r2
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	4698      	mov	r8, r3
 80024ea:	4643      	mov	r3, r8
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	d400      	bmi.n	80024f2 <__aeabi_dsub+0xb2>
 80024f0:	e117      	b.n	8002722 <__aeabi_dsub+0x2e2>
 80024f2:	4643      	mov	r3, r8
 80024f4:	025b      	lsls	r3, r3, #9
 80024f6:	0a5b      	lsrs	r3, r3, #9
 80024f8:	4698      	mov	r8, r3
 80024fa:	4643      	mov	r3, r8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0xc2>
 8002500:	e16c      	b.n	80027dc <__aeabi_dsub+0x39c>
 8002502:	4640      	mov	r0, r8
 8002504:	f000 fc02 	bl	8002d0c <__clzsi2>
 8002508:	0002      	movs	r2, r0
 800250a:	3a08      	subs	r2, #8
 800250c:	2120      	movs	r1, #32
 800250e:	0020      	movs	r0, r4
 8002510:	4643      	mov	r3, r8
 8002512:	1a89      	subs	r1, r1, r2
 8002514:	4093      	lsls	r3, r2
 8002516:	40c8      	lsrs	r0, r1
 8002518:	4094      	lsls	r4, r2
 800251a:	4303      	orrs	r3, r0
 800251c:	4296      	cmp	r6, r2
 800251e:	dd00      	ble.n	8002522 <__aeabi_dsub+0xe2>
 8002520:	e157      	b.n	80027d2 <__aeabi_dsub+0x392>
 8002522:	1b96      	subs	r6, r2, r6
 8002524:	1c71      	adds	r1, r6, #1
 8002526:	291f      	cmp	r1, #31
 8002528:	dd00      	ble.n	800252c <__aeabi_dsub+0xec>
 800252a:	e1cb      	b.n	80028c4 <__aeabi_dsub+0x484>
 800252c:	2220      	movs	r2, #32
 800252e:	0018      	movs	r0, r3
 8002530:	0026      	movs	r6, r4
 8002532:	1a52      	subs	r2, r2, r1
 8002534:	4094      	lsls	r4, r2
 8002536:	4090      	lsls	r0, r2
 8002538:	40ce      	lsrs	r6, r1
 800253a:	40cb      	lsrs	r3, r1
 800253c:	1e62      	subs	r2, r4, #1
 800253e:	4194      	sbcs	r4, r2
 8002540:	4330      	orrs	r0, r6
 8002542:	4698      	mov	r8, r3
 8002544:	2600      	movs	r6, #0
 8002546:	4304      	orrs	r4, r0
 8002548:	0763      	lsls	r3, r4, #29
 800254a:	d009      	beq.n	8002560 <__aeabi_dsub+0x120>
 800254c:	230f      	movs	r3, #15
 800254e:	4023      	ands	r3, r4
 8002550:	2b04      	cmp	r3, #4
 8002552:	d005      	beq.n	8002560 <__aeabi_dsub+0x120>
 8002554:	1d23      	adds	r3, r4, #4
 8002556:	42a3      	cmp	r3, r4
 8002558:	41a4      	sbcs	r4, r4
 800255a:	4264      	negs	r4, r4
 800255c:	44a0      	add	r8, r4
 800255e:	001c      	movs	r4, r3
 8002560:	4643      	mov	r3, r8
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	d400      	bmi.n	8002568 <__aeabi_dsub+0x128>
 8002566:	e0df      	b.n	8002728 <__aeabi_dsub+0x2e8>
 8002568:	4b82      	ldr	r3, [pc, #520]	; (8002774 <__aeabi_dsub+0x334>)
 800256a:	3601      	adds	r6, #1
 800256c:	429e      	cmp	r6, r3
 800256e:	d100      	bne.n	8002572 <__aeabi_dsub+0x132>
 8002570:	e0fb      	b.n	800276a <__aeabi_dsub+0x32a>
 8002572:	4642      	mov	r2, r8
 8002574:	4b80      	ldr	r3, [pc, #512]	; (8002778 <__aeabi_dsub+0x338>)
 8002576:	08e4      	lsrs	r4, r4, #3
 8002578:	401a      	ands	r2, r3
 800257a:	0013      	movs	r3, r2
 800257c:	0571      	lsls	r1, r6, #21
 800257e:	0752      	lsls	r2, r2, #29
 8002580:	025b      	lsls	r3, r3, #9
 8002582:	4322      	orrs	r2, r4
 8002584:	0b1b      	lsrs	r3, r3, #12
 8002586:	0d49      	lsrs	r1, r1, #21
 8002588:	0509      	lsls	r1, r1, #20
 800258a:	07ed      	lsls	r5, r5, #31
 800258c:	4319      	orrs	r1, r3
 800258e:	4329      	orrs	r1, r5
 8002590:	0010      	movs	r0, r2
 8002592:	bcf0      	pop	{r4, r5, r6, r7}
 8002594:	46bb      	mov	fp, r7
 8002596:	46b2      	mov	sl, r6
 8002598:	46a9      	mov	r9, r5
 800259a:	46a0      	mov	r8, r4
 800259c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800259e:	1ab4      	subs	r4, r6, r2
 80025a0:	46a4      	mov	ip, r4
 80025a2:	2c00      	cmp	r4, #0
 80025a4:	dd58      	ble.n	8002658 <__aeabi_dsub+0x218>
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x16c>
 80025aa:	e09e      	b.n	80026ea <__aeabi_dsub+0x2aa>
 80025ac:	4a71      	ldr	r2, [pc, #452]	; (8002774 <__aeabi_dsub+0x334>)
 80025ae:	4296      	cmp	r6, r2
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x174>
 80025b2:	e13b      	b.n	800282c <__aeabi_dsub+0x3ec>
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	0412      	lsls	r2, r2, #16
 80025b8:	4311      	orrs	r1, r2
 80025ba:	4662      	mov	r2, ip
 80025bc:	2a38      	cmp	r2, #56	; 0x38
 80025be:	dd00      	ble.n	80025c2 <__aeabi_dsub+0x182>
 80025c0:	e0c1      	b.n	8002746 <__aeabi_dsub+0x306>
 80025c2:	2a1f      	cmp	r2, #31
 80025c4:	dc00      	bgt.n	80025c8 <__aeabi_dsub+0x188>
 80025c6:	e1bb      	b.n	8002940 <__aeabi_dsub+0x500>
 80025c8:	000c      	movs	r4, r1
 80025ca:	3a20      	subs	r2, #32
 80025cc:	40d4      	lsrs	r4, r2
 80025ce:	0022      	movs	r2, r4
 80025d0:	4664      	mov	r4, ip
 80025d2:	2c20      	cmp	r4, #32
 80025d4:	d004      	beq.n	80025e0 <__aeabi_dsub+0x1a0>
 80025d6:	2740      	movs	r7, #64	; 0x40
 80025d8:	1b3f      	subs	r7, r7, r4
 80025da:	40b9      	lsls	r1, r7
 80025dc:	4308      	orrs	r0, r1
 80025de:	4680      	mov	r8, r0
 80025e0:	4644      	mov	r4, r8
 80025e2:	1e61      	subs	r1, r4, #1
 80025e4:	418c      	sbcs	r4, r1
 80025e6:	4314      	orrs	r4, r2
 80025e8:	e0b1      	b.n	800274e <__aeabi_dsub+0x30e>
 80025ea:	000c      	movs	r4, r1
 80025ec:	4304      	orrs	r4, r0
 80025ee:	d02a      	beq.n	8002646 <__aeabi_dsub+0x206>
 80025f0:	46bb      	mov	fp, r7
 80025f2:	42bd      	cmp	r5, r7
 80025f4:	d02d      	beq.n	8002652 <__aeabi_dsub+0x212>
 80025f6:	4c61      	ldr	r4, [pc, #388]	; (800277c <__aeabi_dsub+0x33c>)
 80025f8:	46a4      	mov	ip, r4
 80025fa:	44b4      	add	ip, r6
 80025fc:	4664      	mov	r4, ip
 80025fe:	2c00      	cmp	r4, #0
 8002600:	d05c      	beq.n	80026bc <__aeabi_dsub+0x27c>
 8002602:	1b94      	subs	r4, r2, r6
 8002604:	46a4      	mov	ip, r4
 8002606:	2e00      	cmp	r6, #0
 8002608:	d000      	beq.n	800260c <__aeabi_dsub+0x1cc>
 800260a:	e115      	b.n	8002838 <__aeabi_dsub+0x3f8>
 800260c:	464d      	mov	r5, r9
 800260e:	431d      	orrs	r5, r3
 8002610:	d100      	bne.n	8002614 <__aeabi_dsub+0x1d4>
 8002612:	e1c3      	b.n	800299c <__aeabi_dsub+0x55c>
 8002614:	1e65      	subs	r5, r4, #1
 8002616:	2c01      	cmp	r4, #1
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x1dc>
 800261a:	e20c      	b.n	8002a36 <__aeabi_dsub+0x5f6>
 800261c:	4e55      	ldr	r6, [pc, #340]	; (8002774 <__aeabi_dsub+0x334>)
 800261e:	42b4      	cmp	r4, r6
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x1e4>
 8002622:	e1f8      	b.n	8002a16 <__aeabi_dsub+0x5d6>
 8002624:	46ac      	mov	ip, r5
 8002626:	e10e      	b.n	8002846 <__aeabi_dsub+0x406>
 8002628:	000a      	movs	r2, r1
 800262a:	4302      	orrs	r2, r0
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x1f0>
 800262e:	e136      	b.n	800289e <__aeabi_dsub+0x45e>
 8002630:	0022      	movs	r2, r4
 8002632:	3a01      	subs	r2, #1
 8002634:	2c01      	cmp	r4, #1
 8002636:	d100      	bne.n	800263a <__aeabi_dsub+0x1fa>
 8002638:	e1c6      	b.n	80029c8 <__aeabi_dsub+0x588>
 800263a:	4c4e      	ldr	r4, [pc, #312]	; (8002774 <__aeabi_dsub+0x334>)
 800263c:	45a4      	cmp	ip, r4
 800263e:	d100      	bne.n	8002642 <__aeabi_dsub+0x202>
 8002640:	e0f4      	b.n	800282c <__aeabi_dsub+0x3ec>
 8002642:	4694      	mov	ip, r2
 8002644:	e731      	b.n	80024aa <__aeabi_dsub+0x6a>
 8002646:	2401      	movs	r4, #1
 8002648:	4067      	eors	r7, r4
 800264a:	46bb      	mov	fp, r7
 800264c:	42bd      	cmp	r5, r7
 800264e:	d000      	beq.n	8002652 <__aeabi_dsub+0x212>
 8002650:	e71c      	b.n	800248c <__aeabi_dsub+0x4c>
 8002652:	4c4a      	ldr	r4, [pc, #296]	; (800277c <__aeabi_dsub+0x33c>)
 8002654:	46a4      	mov	ip, r4
 8002656:	44b4      	add	ip, r6
 8002658:	4664      	mov	r4, ip
 800265a:	2c00      	cmp	r4, #0
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x220>
 800265e:	e0cf      	b.n	8002800 <__aeabi_dsub+0x3c0>
 8002660:	1b94      	subs	r4, r2, r6
 8002662:	46a4      	mov	ip, r4
 8002664:	2e00      	cmp	r6, #0
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x22a>
 8002668:	e15c      	b.n	8002924 <__aeabi_dsub+0x4e4>
 800266a:	4e42      	ldr	r6, [pc, #264]	; (8002774 <__aeabi_dsub+0x334>)
 800266c:	42b2      	cmp	r2, r6
 800266e:	d100      	bne.n	8002672 <__aeabi_dsub+0x232>
 8002670:	e1ec      	b.n	8002a4c <__aeabi_dsub+0x60c>
 8002672:	2680      	movs	r6, #128	; 0x80
 8002674:	0436      	lsls	r6, r6, #16
 8002676:	4333      	orrs	r3, r6
 8002678:	4664      	mov	r4, ip
 800267a:	2c38      	cmp	r4, #56	; 0x38
 800267c:	dd00      	ble.n	8002680 <__aeabi_dsub+0x240>
 800267e:	e1b3      	b.n	80029e8 <__aeabi_dsub+0x5a8>
 8002680:	2c1f      	cmp	r4, #31
 8002682:	dd00      	ble.n	8002686 <__aeabi_dsub+0x246>
 8002684:	e238      	b.n	8002af8 <__aeabi_dsub+0x6b8>
 8002686:	2620      	movs	r6, #32
 8002688:	1b36      	subs	r6, r6, r4
 800268a:	001c      	movs	r4, r3
 800268c:	40b4      	lsls	r4, r6
 800268e:	464f      	mov	r7, r9
 8002690:	46a0      	mov	r8, r4
 8002692:	4664      	mov	r4, ip
 8002694:	40e7      	lsrs	r7, r4
 8002696:	4644      	mov	r4, r8
 8002698:	433c      	orrs	r4, r7
 800269a:	464f      	mov	r7, r9
 800269c:	40b7      	lsls	r7, r6
 800269e:	003e      	movs	r6, r7
 80026a0:	1e77      	subs	r7, r6, #1
 80026a2:	41be      	sbcs	r6, r7
 80026a4:	4334      	orrs	r4, r6
 80026a6:	4666      	mov	r6, ip
 80026a8:	40f3      	lsrs	r3, r6
 80026aa:	18c9      	adds	r1, r1, r3
 80026ac:	1824      	adds	r4, r4, r0
 80026ae:	4284      	cmp	r4, r0
 80026b0:	419b      	sbcs	r3, r3
 80026b2:	425b      	negs	r3, r3
 80026b4:	4698      	mov	r8, r3
 80026b6:	0016      	movs	r6, r2
 80026b8:	4488      	add	r8, r1
 80026ba:	e04e      	b.n	800275a <__aeabi_dsub+0x31a>
 80026bc:	4a30      	ldr	r2, [pc, #192]	; (8002780 <__aeabi_dsub+0x340>)
 80026be:	1c74      	adds	r4, r6, #1
 80026c0:	4214      	tst	r4, r2
 80026c2:	d000      	beq.n	80026c6 <__aeabi_dsub+0x286>
 80026c4:	e0d6      	b.n	8002874 <__aeabi_dsub+0x434>
 80026c6:	464a      	mov	r2, r9
 80026c8:	431a      	orrs	r2, r3
 80026ca:	2e00      	cmp	r6, #0
 80026cc:	d000      	beq.n	80026d0 <__aeabi_dsub+0x290>
 80026ce:	e15b      	b.n	8002988 <__aeabi_dsub+0x548>
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dsub+0x296>
 80026d4:	e1a5      	b.n	8002a22 <__aeabi_dsub+0x5e2>
 80026d6:	000a      	movs	r2, r1
 80026d8:	4302      	orrs	r2, r0
 80026da:	d000      	beq.n	80026de <__aeabi_dsub+0x29e>
 80026dc:	e1bb      	b.n	8002a56 <__aeabi_dsub+0x616>
 80026de:	464a      	mov	r2, r9
 80026e0:	0759      	lsls	r1, r3, #29
 80026e2:	08d2      	lsrs	r2, r2, #3
 80026e4:	430a      	orrs	r2, r1
 80026e6:	08db      	lsrs	r3, r3, #3
 80026e8:	e027      	b.n	800273a <__aeabi_dsub+0x2fa>
 80026ea:	000a      	movs	r2, r1
 80026ec:	4302      	orrs	r2, r0
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0x2b2>
 80026f0:	e174      	b.n	80029dc <__aeabi_dsub+0x59c>
 80026f2:	0022      	movs	r2, r4
 80026f4:	3a01      	subs	r2, #1
 80026f6:	2c01      	cmp	r4, #1
 80026f8:	d005      	beq.n	8002706 <__aeabi_dsub+0x2c6>
 80026fa:	4c1e      	ldr	r4, [pc, #120]	; (8002774 <__aeabi_dsub+0x334>)
 80026fc:	45a4      	cmp	ip, r4
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x2c2>
 8002700:	e094      	b.n	800282c <__aeabi_dsub+0x3ec>
 8002702:	4694      	mov	ip, r2
 8002704:	e759      	b.n	80025ba <__aeabi_dsub+0x17a>
 8002706:	4448      	add	r0, r9
 8002708:	4548      	cmp	r0, r9
 800270a:	4192      	sbcs	r2, r2
 800270c:	185b      	adds	r3, r3, r1
 800270e:	4698      	mov	r8, r3
 8002710:	0004      	movs	r4, r0
 8002712:	4252      	negs	r2, r2
 8002714:	4490      	add	r8, r2
 8002716:	4643      	mov	r3, r8
 8002718:	2602      	movs	r6, #2
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	d500      	bpl.n	8002720 <__aeabi_dsub+0x2e0>
 800271e:	e0c4      	b.n	80028aa <__aeabi_dsub+0x46a>
 8002720:	3e01      	subs	r6, #1
 8002722:	0763      	lsls	r3, r4, #29
 8002724:	d000      	beq.n	8002728 <__aeabi_dsub+0x2e8>
 8002726:	e711      	b.n	800254c <__aeabi_dsub+0x10c>
 8002728:	4643      	mov	r3, r8
 800272a:	46b4      	mov	ip, r6
 800272c:	0759      	lsls	r1, r3, #29
 800272e:	08e2      	lsrs	r2, r4, #3
 8002730:	430a      	orrs	r2, r1
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	490f      	ldr	r1, [pc, #60]	; (8002774 <__aeabi_dsub+0x334>)
 8002736:	458c      	cmp	ip, r1
 8002738:	d040      	beq.n	80027bc <__aeabi_dsub+0x37c>
 800273a:	4661      	mov	r1, ip
 800273c:	031b      	lsls	r3, r3, #12
 800273e:	0549      	lsls	r1, r1, #21
 8002740:	0b1b      	lsrs	r3, r3, #12
 8002742:	0d49      	lsrs	r1, r1, #21
 8002744:	e720      	b.n	8002588 <__aeabi_dsub+0x148>
 8002746:	4301      	orrs	r1, r0
 8002748:	000c      	movs	r4, r1
 800274a:	1e61      	subs	r1, r4, #1
 800274c:	418c      	sbcs	r4, r1
 800274e:	444c      	add	r4, r9
 8002750:	454c      	cmp	r4, r9
 8002752:	4192      	sbcs	r2, r2
 8002754:	4252      	negs	r2, r2
 8002756:	4690      	mov	r8, r2
 8002758:	4498      	add	r8, r3
 800275a:	4643      	mov	r3, r8
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	d5e0      	bpl.n	8002722 <__aeabi_dsub+0x2e2>
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__aeabi_dsub+0x334>)
 8002762:	3601      	adds	r6, #1
 8002764:	429e      	cmp	r6, r3
 8002766:	d000      	beq.n	800276a <__aeabi_dsub+0x32a>
 8002768:	e09f      	b.n	80028aa <__aeabi_dsub+0x46a>
 800276a:	0031      	movs	r1, r6
 800276c:	2300      	movs	r3, #0
 800276e:	2200      	movs	r2, #0
 8002770:	e70a      	b.n	8002588 <__aeabi_dsub+0x148>
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	000007ff 	.word	0x000007ff
 8002778:	ff7fffff 	.word	0xff7fffff
 800277c:	fffff801 	.word	0xfffff801
 8002780:	000007fe 	.word	0x000007fe
 8002784:	2a00      	cmp	r2, #0
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x34a>
 8002788:	e160      	b.n	8002a4c <__aeabi_dsub+0x60c>
 800278a:	000a      	movs	r2, r1
 800278c:	4302      	orrs	r2, r0
 800278e:	d04d      	beq.n	800282c <__aeabi_dsub+0x3ec>
 8002790:	464a      	mov	r2, r9
 8002792:	075c      	lsls	r4, r3, #29
 8002794:	08d2      	lsrs	r2, r2, #3
 8002796:	4322      	orrs	r2, r4
 8002798:	2480      	movs	r4, #128	; 0x80
 800279a:	08db      	lsrs	r3, r3, #3
 800279c:	0324      	lsls	r4, r4, #12
 800279e:	4223      	tst	r3, r4
 80027a0:	d007      	beq.n	80027b2 <__aeabi_dsub+0x372>
 80027a2:	08ce      	lsrs	r6, r1, #3
 80027a4:	4226      	tst	r6, r4
 80027a6:	d104      	bne.n	80027b2 <__aeabi_dsub+0x372>
 80027a8:	465d      	mov	r5, fp
 80027aa:	0033      	movs	r3, r6
 80027ac:	08c2      	lsrs	r2, r0, #3
 80027ae:	0749      	lsls	r1, r1, #29
 80027b0:	430a      	orrs	r2, r1
 80027b2:	0f51      	lsrs	r1, r2, #29
 80027b4:	00d2      	lsls	r2, r2, #3
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	0749      	lsls	r1, r1, #29
 80027ba:	430a      	orrs	r2, r1
 80027bc:	0011      	movs	r1, r2
 80027be:	4319      	orrs	r1, r3
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x384>
 80027c2:	e1c8      	b.n	8002b56 <__aeabi_dsub+0x716>
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0309      	lsls	r1, r1, #12
 80027c8:	430b      	orrs	r3, r1
 80027ca:	031b      	lsls	r3, r3, #12
 80027cc:	49d5      	ldr	r1, [pc, #852]	; (8002b24 <__aeabi_dsub+0x6e4>)
 80027ce:	0b1b      	lsrs	r3, r3, #12
 80027d0:	e6da      	b.n	8002588 <__aeabi_dsub+0x148>
 80027d2:	49d5      	ldr	r1, [pc, #852]	; (8002b28 <__aeabi_dsub+0x6e8>)
 80027d4:	1ab6      	subs	r6, r6, r2
 80027d6:	400b      	ands	r3, r1
 80027d8:	4698      	mov	r8, r3
 80027da:	e6b5      	b.n	8002548 <__aeabi_dsub+0x108>
 80027dc:	0020      	movs	r0, r4
 80027de:	f000 fa95 	bl	8002d0c <__clzsi2>
 80027e2:	0002      	movs	r2, r0
 80027e4:	3218      	adds	r2, #24
 80027e6:	2a1f      	cmp	r2, #31
 80027e8:	dc00      	bgt.n	80027ec <__aeabi_dsub+0x3ac>
 80027ea:	e68f      	b.n	800250c <__aeabi_dsub+0xcc>
 80027ec:	0023      	movs	r3, r4
 80027ee:	3808      	subs	r0, #8
 80027f0:	4083      	lsls	r3, r0
 80027f2:	2400      	movs	r4, #0
 80027f4:	e692      	b.n	800251c <__aeabi_dsub+0xdc>
 80027f6:	4308      	orrs	r0, r1
 80027f8:	0002      	movs	r2, r0
 80027fa:	1e50      	subs	r0, r2, #1
 80027fc:	4182      	sbcs	r2, r0
 80027fe:	e66d      	b.n	80024dc <__aeabi_dsub+0x9c>
 8002800:	4cca      	ldr	r4, [pc, #808]	; (8002b2c <__aeabi_dsub+0x6ec>)
 8002802:	1c72      	adds	r2, r6, #1
 8002804:	4222      	tst	r2, r4
 8002806:	d000      	beq.n	800280a <__aeabi_dsub+0x3ca>
 8002808:	e0ad      	b.n	8002966 <__aeabi_dsub+0x526>
 800280a:	464a      	mov	r2, r9
 800280c:	431a      	orrs	r2, r3
 800280e:	2e00      	cmp	r6, #0
 8002810:	d1b8      	bne.n	8002784 <__aeabi_dsub+0x344>
 8002812:	2a00      	cmp	r2, #0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x3d8>
 8002816:	e158      	b.n	8002aca <__aeabi_dsub+0x68a>
 8002818:	000a      	movs	r2, r1
 800281a:	4302      	orrs	r2, r0
 800281c:	d000      	beq.n	8002820 <__aeabi_dsub+0x3e0>
 800281e:	e159      	b.n	8002ad4 <__aeabi_dsub+0x694>
 8002820:	464a      	mov	r2, r9
 8002822:	0759      	lsls	r1, r3, #29
 8002824:	08d2      	lsrs	r2, r2, #3
 8002826:	430a      	orrs	r2, r1
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	e786      	b.n	800273a <__aeabi_dsub+0x2fa>
 800282c:	464a      	mov	r2, r9
 800282e:	0759      	lsls	r1, r3, #29
 8002830:	08d2      	lsrs	r2, r2, #3
 8002832:	430a      	orrs	r2, r1
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	e7c1      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002838:	4dba      	ldr	r5, [pc, #744]	; (8002b24 <__aeabi_dsub+0x6e4>)
 800283a:	42aa      	cmp	r2, r5
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x400>
 800283e:	e11e      	b.n	8002a7e <__aeabi_dsub+0x63e>
 8002840:	2580      	movs	r5, #128	; 0x80
 8002842:	042d      	lsls	r5, r5, #16
 8002844:	432b      	orrs	r3, r5
 8002846:	4664      	mov	r4, ip
 8002848:	2c38      	cmp	r4, #56	; 0x38
 800284a:	dc5d      	bgt.n	8002908 <__aeabi_dsub+0x4c8>
 800284c:	2c1f      	cmp	r4, #31
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0x412>
 8002850:	e0d0      	b.n	80029f4 <__aeabi_dsub+0x5b4>
 8002852:	2520      	movs	r5, #32
 8002854:	4667      	mov	r7, ip
 8002856:	1b2d      	subs	r5, r5, r4
 8002858:	464e      	mov	r6, r9
 800285a:	001c      	movs	r4, r3
 800285c:	40fe      	lsrs	r6, r7
 800285e:	40ac      	lsls	r4, r5
 8002860:	4334      	orrs	r4, r6
 8002862:	464e      	mov	r6, r9
 8002864:	40ae      	lsls	r6, r5
 8002866:	0035      	movs	r5, r6
 8002868:	40fb      	lsrs	r3, r7
 800286a:	1e6e      	subs	r6, r5, #1
 800286c:	41b5      	sbcs	r5, r6
 800286e:	1ac9      	subs	r1, r1, r3
 8002870:	432c      	orrs	r4, r5
 8002872:	e04e      	b.n	8002912 <__aeabi_dsub+0x4d2>
 8002874:	464a      	mov	r2, r9
 8002876:	1a14      	subs	r4, r2, r0
 8002878:	45a1      	cmp	r9, r4
 800287a:	4192      	sbcs	r2, r2
 800287c:	4252      	negs	r2, r2
 800287e:	4690      	mov	r8, r2
 8002880:	1a5f      	subs	r7, r3, r1
 8002882:	003a      	movs	r2, r7
 8002884:	4647      	mov	r7, r8
 8002886:	1bd2      	subs	r2, r2, r7
 8002888:	4690      	mov	r8, r2
 800288a:	0212      	lsls	r2, r2, #8
 800288c:	d500      	bpl.n	8002890 <__aeabi_dsub+0x450>
 800288e:	e08b      	b.n	80029a8 <__aeabi_dsub+0x568>
 8002890:	4642      	mov	r2, r8
 8002892:	4322      	orrs	r2, r4
 8002894:	d000      	beq.n	8002898 <__aeabi_dsub+0x458>
 8002896:	e630      	b.n	80024fa <__aeabi_dsub+0xba>
 8002898:	2300      	movs	r3, #0
 800289a:	2500      	movs	r5, #0
 800289c:	e74d      	b.n	800273a <__aeabi_dsub+0x2fa>
 800289e:	464a      	mov	r2, r9
 80028a0:	0759      	lsls	r1, r3, #29
 80028a2:	08d2      	lsrs	r2, r2, #3
 80028a4:	430a      	orrs	r2, r1
 80028a6:	08db      	lsrs	r3, r3, #3
 80028a8:	e744      	b.n	8002734 <__aeabi_dsub+0x2f4>
 80028aa:	4642      	mov	r2, r8
 80028ac:	4b9e      	ldr	r3, [pc, #632]	; (8002b28 <__aeabi_dsub+0x6e8>)
 80028ae:	0861      	lsrs	r1, r4, #1
 80028b0:	401a      	ands	r2, r3
 80028b2:	0013      	movs	r3, r2
 80028b4:	2201      	movs	r2, #1
 80028b6:	4014      	ands	r4, r2
 80028b8:	430c      	orrs	r4, r1
 80028ba:	07da      	lsls	r2, r3, #31
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	4698      	mov	r8, r3
 80028c0:	4314      	orrs	r4, r2
 80028c2:	e641      	b.n	8002548 <__aeabi_dsub+0x108>
 80028c4:	001a      	movs	r2, r3
 80028c6:	3e1f      	subs	r6, #31
 80028c8:	40f2      	lsrs	r2, r6
 80028ca:	0016      	movs	r6, r2
 80028cc:	2920      	cmp	r1, #32
 80028ce:	d003      	beq.n	80028d8 <__aeabi_dsub+0x498>
 80028d0:	2240      	movs	r2, #64	; 0x40
 80028d2:	1a51      	subs	r1, r2, r1
 80028d4:	408b      	lsls	r3, r1
 80028d6:	431c      	orrs	r4, r3
 80028d8:	1e62      	subs	r2, r4, #1
 80028da:	4194      	sbcs	r4, r2
 80028dc:	2300      	movs	r3, #0
 80028de:	4334      	orrs	r4, r6
 80028e0:	4698      	mov	r8, r3
 80028e2:	2600      	movs	r6, #0
 80028e4:	e71d      	b.n	8002722 <__aeabi_dsub+0x2e2>
 80028e6:	000c      	movs	r4, r1
 80028e8:	3a20      	subs	r2, #32
 80028ea:	40d4      	lsrs	r4, r2
 80028ec:	0022      	movs	r2, r4
 80028ee:	4664      	mov	r4, ip
 80028f0:	2c20      	cmp	r4, #32
 80028f2:	d004      	beq.n	80028fe <__aeabi_dsub+0x4be>
 80028f4:	2740      	movs	r7, #64	; 0x40
 80028f6:	1b3f      	subs	r7, r7, r4
 80028f8:	40b9      	lsls	r1, r7
 80028fa:	4308      	orrs	r0, r1
 80028fc:	4680      	mov	r8, r0
 80028fe:	4644      	mov	r4, r8
 8002900:	1e61      	subs	r1, r4, #1
 8002902:	418c      	sbcs	r4, r1
 8002904:	4322      	orrs	r2, r4
 8002906:	e5e9      	b.n	80024dc <__aeabi_dsub+0x9c>
 8002908:	464c      	mov	r4, r9
 800290a:	4323      	orrs	r3, r4
 800290c:	001c      	movs	r4, r3
 800290e:	1e63      	subs	r3, r4, #1
 8002910:	419c      	sbcs	r4, r3
 8002912:	1b04      	subs	r4, r0, r4
 8002914:	42a0      	cmp	r0, r4
 8002916:	419b      	sbcs	r3, r3
 8002918:	425b      	negs	r3, r3
 800291a:	1acb      	subs	r3, r1, r3
 800291c:	4698      	mov	r8, r3
 800291e:	465d      	mov	r5, fp
 8002920:	0016      	movs	r6, r2
 8002922:	e5e2      	b.n	80024ea <__aeabi_dsub+0xaa>
 8002924:	464e      	mov	r6, r9
 8002926:	431e      	orrs	r6, r3
 8002928:	d100      	bne.n	800292c <__aeabi_dsub+0x4ec>
 800292a:	e0ae      	b.n	8002a8a <__aeabi_dsub+0x64a>
 800292c:	1e66      	subs	r6, r4, #1
 800292e:	2c01      	cmp	r4, #1
 8002930:	d100      	bne.n	8002934 <__aeabi_dsub+0x4f4>
 8002932:	e0fd      	b.n	8002b30 <__aeabi_dsub+0x6f0>
 8002934:	4f7b      	ldr	r7, [pc, #492]	; (8002b24 <__aeabi_dsub+0x6e4>)
 8002936:	42bc      	cmp	r4, r7
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x4fc>
 800293a:	e107      	b.n	8002b4c <__aeabi_dsub+0x70c>
 800293c:	46b4      	mov	ip, r6
 800293e:	e69b      	b.n	8002678 <__aeabi_dsub+0x238>
 8002940:	4664      	mov	r4, ip
 8002942:	2220      	movs	r2, #32
 8002944:	1b12      	subs	r2, r2, r4
 8002946:	000c      	movs	r4, r1
 8002948:	4094      	lsls	r4, r2
 800294a:	0007      	movs	r7, r0
 800294c:	4090      	lsls	r0, r2
 800294e:	46a0      	mov	r8, r4
 8002950:	4664      	mov	r4, ip
 8002952:	1e42      	subs	r2, r0, #1
 8002954:	4190      	sbcs	r0, r2
 8002956:	4662      	mov	r2, ip
 8002958:	40e7      	lsrs	r7, r4
 800295a:	4644      	mov	r4, r8
 800295c:	40d1      	lsrs	r1, r2
 800295e:	433c      	orrs	r4, r7
 8002960:	4304      	orrs	r4, r0
 8002962:	185b      	adds	r3, r3, r1
 8002964:	e6f3      	b.n	800274e <__aeabi_dsub+0x30e>
 8002966:	4c6f      	ldr	r4, [pc, #444]	; (8002b24 <__aeabi_dsub+0x6e4>)
 8002968:	42a2      	cmp	r2, r4
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x52e>
 800296c:	e0d5      	b.n	8002b1a <__aeabi_dsub+0x6da>
 800296e:	4448      	add	r0, r9
 8002970:	185b      	adds	r3, r3, r1
 8002972:	4548      	cmp	r0, r9
 8002974:	4189      	sbcs	r1, r1
 8002976:	4249      	negs	r1, r1
 8002978:	185b      	adds	r3, r3, r1
 800297a:	07dc      	lsls	r4, r3, #31
 800297c:	0840      	lsrs	r0, r0, #1
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	4698      	mov	r8, r3
 8002982:	0016      	movs	r6, r2
 8002984:	4304      	orrs	r4, r0
 8002986:	e6cc      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002988:	2a00      	cmp	r2, #0
 800298a:	d000      	beq.n	800298e <__aeabi_dsub+0x54e>
 800298c:	e082      	b.n	8002a94 <__aeabi_dsub+0x654>
 800298e:	000a      	movs	r2, r1
 8002990:	4302      	orrs	r2, r0
 8002992:	d140      	bne.n	8002a16 <__aeabi_dsub+0x5d6>
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	2500      	movs	r5, #0
 8002998:	031b      	lsls	r3, r3, #12
 800299a:	e713      	b.n	80027c4 <__aeabi_dsub+0x384>
 800299c:	074b      	lsls	r3, r1, #29
 800299e:	08c2      	lsrs	r2, r0, #3
 80029a0:	431a      	orrs	r2, r3
 80029a2:	465d      	mov	r5, fp
 80029a4:	08cb      	lsrs	r3, r1, #3
 80029a6:	e6c5      	b.n	8002734 <__aeabi_dsub+0x2f4>
 80029a8:	464a      	mov	r2, r9
 80029aa:	1a84      	subs	r4, r0, r2
 80029ac:	42a0      	cmp	r0, r4
 80029ae:	4192      	sbcs	r2, r2
 80029b0:	1acb      	subs	r3, r1, r3
 80029b2:	4252      	negs	r2, r2
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	4698      	mov	r8, r3
 80029b8:	465d      	mov	r5, fp
 80029ba:	e59e      	b.n	80024fa <__aeabi_dsub+0xba>
 80029bc:	464a      	mov	r2, r9
 80029be:	0759      	lsls	r1, r3, #29
 80029c0:	08d2      	lsrs	r2, r2, #3
 80029c2:	430a      	orrs	r2, r1
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	e6f9      	b.n	80027bc <__aeabi_dsub+0x37c>
 80029c8:	464a      	mov	r2, r9
 80029ca:	1a14      	subs	r4, r2, r0
 80029cc:	45a1      	cmp	r9, r4
 80029ce:	4192      	sbcs	r2, r2
 80029d0:	1a5b      	subs	r3, r3, r1
 80029d2:	4252      	negs	r2, r2
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	4698      	mov	r8, r3
 80029d8:	2601      	movs	r6, #1
 80029da:	e586      	b.n	80024ea <__aeabi_dsub+0xaa>
 80029dc:	464a      	mov	r2, r9
 80029de:	0759      	lsls	r1, r3, #29
 80029e0:	08d2      	lsrs	r2, r2, #3
 80029e2:	430a      	orrs	r2, r1
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	e6a5      	b.n	8002734 <__aeabi_dsub+0x2f4>
 80029e8:	464c      	mov	r4, r9
 80029ea:	4323      	orrs	r3, r4
 80029ec:	001c      	movs	r4, r3
 80029ee:	1e63      	subs	r3, r4, #1
 80029f0:	419c      	sbcs	r4, r3
 80029f2:	e65b      	b.n	80026ac <__aeabi_dsub+0x26c>
 80029f4:	4665      	mov	r5, ip
 80029f6:	001e      	movs	r6, r3
 80029f8:	3d20      	subs	r5, #32
 80029fa:	40ee      	lsrs	r6, r5
 80029fc:	2c20      	cmp	r4, #32
 80029fe:	d005      	beq.n	8002a0c <__aeabi_dsub+0x5cc>
 8002a00:	2540      	movs	r5, #64	; 0x40
 8002a02:	1b2d      	subs	r5, r5, r4
 8002a04:	40ab      	lsls	r3, r5
 8002a06:	464c      	mov	r4, r9
 8002a08:	431c      	orrs	r4, r3
 8002a0a:	46a2      	mov	sl, r4
 8002a0c:	4654      	mov	r4, sl
 8002a0e:	1e63      	subs	r3, r4, #1
 8002a10:	419c      	sbcs	r4, r3
 8002a12:	4334      	orrs	r4, r6
 8002a14:	e77d      	b.n	8002912 <__aeabi_dsub+0x4d2>
 8002a16:	074b      	lsls	r3, r1, #29
 8002a18:	08c2      	lsrs	r2, r0, #3
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	465d      	mov	r5, fp
 8002a1e:	08cb      	lsrs	r3, r1, #3
 8002a20:	e6cc      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002a22:	000a      	movs	r2, r1
 8002a24:	4302      	orrs	r2, r0
 8002a26:	d100      	bne.n	8002a2a <__aeabi_dsub+0x5ea>
 8002a28:	e736      	b.n	8002898 <__aeabi_dsub+0x458>
 8002a2a:	074b      	lsls	r3, r1, #29
 8002a2c:	08c2      	lsrs	r2, r0, #3
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	465d      	mov	r5, fp
 8002a32:	08cb      	lsrs	r3, r1, #3
 8002a34:	e681      	b.n	800273a <__aeabi_dsub+0x2fa>
 8002a36:	464a      	mov	r2, r9
 8002a38:	1a84      	subs	r4, r0, r2
 8002a3a:	42a0      	cmp	r0, r4
 8002a3c:	4192      	sbcs	r2, r2
 8002a3e:	1acb      	subs	r3, r1, r3
 8002a40:	4252      	negs	r2, r2
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	4698      	mov	r8, r3
 8002a46:	465d      	mov	r5, fp
 8002a48:	2601      	movs	r6, #1
 8002a4a:	e54e      	b.n	80024ea <__aeabi_dsub+0xaa>
 8002a4c:	074b      	lsls	r3, r1, #29
 8002a4e:	08c2      	lsrs	r2, r0, #3
 8002a50:	431a      	orrs	r2, r3
 8002a52:	08cb      	lsrs	r3, r1, #3
 8002a54:	e6b2      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002a56:	464a      	mov	r2, r9
 8002a58:	1a14      	subs	r4, r2, r0
 8002a5a:	45a1      	cmp	r9, r4
 8002a5c:	4192      	sbcs	r2, r2
 8002a5e:	1a5f      	subs	r7, r3, r1
 8002a60:	4252      	negs	r2, r2
 8002a62:	1aba      	subs	r2, r7, r2
 8002a64:	4690      	mov	r8, r2
 8002a66:	0212      	lsls	r2, r2, #8
 8002a68:	d56b      	bpl.n	8002b42 <__aeabi_dsub+0x702>
 8002a6a:	464a      	mov	r2, r9
 8002a6c:	1a84      	subs	r4, r0, r2
 8002a6e:	42a0      	cmp	r0, r4
 8002a70:	4192      	sbcs	r2, r2
 8002a72:	1acb      	subs	r3, r1, r3
 8002a74:	4252      	negs	r2, r2
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	4698      	mov	r8, r3
 8002a7a:	465d      	mov	r5, fp
 8002a7c:	e564      	b.n	8002548 <__aeabi_dsub+0x108>
 8002a7e:	074b      	lsls	r3, r1, #29
 8002a80:	08c2      	lsrs	r2, r0, #3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	465d      	mov	r5, fp
 8002a86:	08cb      	lsrs	r3, r1, #3
 8002a88:	e698      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002a8a:	074b      	lsls	r3, r1, #29
 8002a8c:	08c2      	lsrs	r2, r0, #3
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	08cb      	lsrs	r3, r1, #3
 8002a92:	e64f      	b.n	8002734 <__aeabi_dsub+0x2f4>
 8002a94:	000a      	movs	r2, r1
 8002a96:	4302      	orrs	r2, r0
 8002a98:	d090      	beq.n	80029bc <__aeabi_dsub+0x57c>
 8002a9a:	464a      	mov	r2, r9
 8002a9c:	075c      	lsls	r4, r3, #29
 8002a9e:	08d2      	lsrs	r2, r2, #3
 8002aa0:	4314      	orrs	r4, r2
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	0312      	lsls	r2, r2, #12
 8002aa8:	4213      	tst	r3, r2
 8002aaa:	d008      	beq.n	8002abe <__aeabi_dsub+0x67e>
 8002aac:	08ce      	lsrs	r6, r1, #3
 8002aae:	4216      	tst	r6, r2
 8002ab0:	d105      	bne.n	8002abe <__aeabi_dsub+0x67e>
 8002ab2:	08c0      	lsrs	r0, r0, #3
 8002ab4:	0749      	lsls	r1, r1, #29
 8002ab6:	4308      	orrs	r0, r1
 8002ab8:	0004      	movs	r4, r0
 8002aba:	465d      	mov	r5, fp
 8002abc:	0033      	movs	r3, r6
 8002abe:	0f61      	lsrs	r1, r4, #29
 8002ac0:	00e2      	lsls	r2, r4, #3
 8002ac2:	0749      	lsls	r1, r1, #29
 8002ac4:	08d2      	lsrs	r2, r2, #3
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	e678      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002aca:	074b      	lsls	r3, r1, #29
 8002acc:	08c2      	lsrs	r2, r0, #3
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	08cb      	lsrs	r3, r1, #3
 8002ad2:	e632      	b.n	800273a <__aeabi_dsub+0x2fa>
 8002ad4:	4448      	add	r0, r9
 8002ad6:	185b      	adds	r3, r3, r1
 8002ad8:	4548      	cmp	r0, r9
 8002ada:	4192      	sbcs	r2, r2
 8002adc:	4698      	mov	r8, r3
 8002ade:	4252      	negs	r2, r2
 8002ae0:	4490      	add	r8, r2
 8002ae2:	4643      	mov	r3, r8
 8002ae4:	0004      	movs	r4, r0
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	d400      	bmi.n	8002aec <__aeabi_dsub+0x6ac>
 8002aea:	e61a      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002aec:	4642      	mov	r2, r8
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <__aeabi_dsub+0x6e8>)
 8002af0:	2601      	movs	r6, #1
 8002af2:	401a      	ands	r2, r3
 8002af4:	4690      	mov	r8, r2
 8002af6:	e614      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002af8:	4666      	mov	r6, ip
 8002afa:	001f      	movs	r7, r3
 8002afc:	3e20      	subs	r6, #32
 8002afe:	40f7      	lsrs	r7, r6
 8002b00:	2c20      	cmp	r4, #32
 8002b02:	d005      	beq.n	8002b10 <__aeabi_dsub+0x6d0>
 8002b04:	2640      	movs	r6, #64	; 0x40
 8002b06:	1b36      	subs	r6, r6, r4
 8002b08:	40b3      	lsls	r3, r6
 8002b0a:	464c      	mov	r4, r9
 8002b0c:	431c      	orrs	r4, r3
 8002b0e:	46a2      	mov	sl, r4
 8002b10:	4654      	mov	r4, sl
 8002b12:	1e63      	subs	r3, r4, #1
 8002b14:	419c      	sbcs	r4, r3
 8002b16:	433c      	orrs	r4, r7
 8002b18:	e5c8      	b.n	80026ac <__aeabi_dsub+0x26c>
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2200      	movs	r2, #0
 8002b20:	e532      	b.n	8002588 <__aeabi_dsub+0x148>
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	000007ff 	.word	0x000007ff
 8002b28:	ff7fffff 	.word	0xff7fffff
 8002b2c:	000007fe 	.word	0x000007fe
 8002b30:	464a      	mov	r2, r9
 8002b32:	1814      	adds	r4, r2, r0
 8002b34:	4284      	cmp	r4, r0
 8002b36:	4192      	sbcs	r2, r2
 8002b38:	185b      	adds	r3, r3, r1
 8002b3a:	4698      	mov	r8, r3
 8002b3c:	4252      	negs	r2, r2
 8002b3e:	4490      	add	r8, r2
 8002b40:	e5e9      	b.n	8002716 <__aeabi_dsub+0x2d6>
 8002b42:	4642      	mov	r2, r8
 8002b44:	4322      	orrs	r2, r4
 8002b46:	d100      	bne.n	8002b4a <__aeabi_dsub+0x70a>
 8002b48:	e6a6      	b.n	8002898 <__aeabi_dsub+0x458>
 8002b4a:	e5ea      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002b4c:	074b      	lsls	r3, r1, #29
 8002b4e:	08c2      	lsrs	r2, r0, #3
 8002b50:	431a      	orrs	r2, r3
 8002b52:	08cb      	lsrs	r3, r1, #3
 8002b54:	e632      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002b56:	2200      	movs	r2, #0
 8002b58:	4901      	ldr	r1, [pc, #4]	; (8002b60 <__aeabi_dsub+0x720>)
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	e514      	b.n	8002588 <__aeabi_dsub+0x148>
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	000007ff 	.word	0x000007ff

08002b64 <__aeabi_d2iz>:
 8002b64:	000a      	movs	r2, r1
 8002b66:	b530      	push	{r4, r5, lr}
 8002b68:	4c13      	ldr	r4, [pc, #76]	; (8002bb8 <__aeabi_d2iz+0x54>)
 8002b6a:	0053      	lsls	r3, r2, #1
 8002b6c:	0309      	lsls	r1, r1, #12
 8002b6e:	0005      	movs	r5, r0
 8002b70:	0b09      	lsrs	r1, r1, #12
 8002b72:	2000      	movs	r0, #0
 8002b74:	0d5b      	lsrs	r3, r3, #21
 8002b76:	0fd2      	lsrs	r2, r2, #31
 8002b78:	42a3      	cmp	r3, r4
 8002b7a:	dd04      	ble.n	8002b86 <__aeabi_d2iz+0x22>
 8002b7c:	480f      	ldr	r0, [pc, #60]	; (8002bbc <__aeabi_d2iz+0x58>)
 8002b7e:	4283      	cmp	r3, r0
 8002b80:	dd02      	ble.n	8002b88 <__aeabi_d2iz+0x24>
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_d2iz+0x5c>)
 8002b84:	18d0      	adds	r0, r2, r3
 8002b86:	bd30      	pop	{r4, r5, pc}
 8002b88:	2080      	movs	r0, #128	; 0x80
 8002b8a:	0340      	lsls	r0, r0, #13
 8002b8c:	4301      	orrs	r1, r0
 8002b8e:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <__aeabi_d2iz+0x60>)
 8002b90:	1ac0      	subs	r0, r0, r3
 8002b92:	281f      	cmp	r0, #31
 8002b94:	dd08      	ble.n	8002ba8 <__aeabi_d2iz+0x44>
 8002b96:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <__aeabi_d2iz+0x64>)
 8002b98:	1ac3      	subs	r3, r0, r3
 8002b9a:	40d9      	lsrs	r1, r3
 8002b9c:	000b      	movs	r3, r1
 8002b9e:	4258      	negs	r0, r3
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	d1f0      	bne.n	8002b86 <__aeabi_d2iz+0x22>
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	e7ee      	b.n	8002b86 <__aeabi_d2iz+0x22>
 8002ba8:	4c08      	ldr	r4, [pc, #32]	; (8002bcc <__aeabi_d2iz+0x68>)
 8002baa:	40c5      	lsrs	r5, r0
 8002bac:	46a4      	mov	ip, r4
 8002bae:	4463      	add	r3, ip
 8002bb0:	4099      	lsls	r1, r3
 8002bb2:	000b      	movs	r3, r1
 8002bb4:	432b      	orrs	r3, r5
 8002bb6:	e7f2      	b.n	8002b9e <__aeabi_d2iz+0x3a>
 8002bb8:	000003fe 	.word	0x000003fe
 8002bbc:	0000041d 	.word	0x0000041d
 8002bc0:	7fffffff 	.word	0x7fffffff
 8002bc4:	00000433 	.word	0x00000433
 8002bc8:	00000413 	.word	0x00000413
 8002bcc:	fffffbed 	.word	0xfffffbed

08002bd0 <__aeabi_i2d>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d016      	beq.n	8002c04 <__aeabi_i2d+0x34>
 8002bd6:	17c3      	asrs	r3, r0, #31
 8002bd8:	18c5      	adds	r5, r0, r3
 8002bda:	405d      	eors	r5, r3
 8002bdc:	0fc4      	lsrs	r4, r0, #31
 8002bde:	0028      	movs	r0, r5
 8002be0:	f000 f894 	bl	8002d0c <__clzsi2>
 8002be4:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <__aeabi_i2d+0x5c>)
 8002be6:	1a12      	subs	r2, r2, r0
 8002be8:	280a      	cmp	r0, #10
 8002bea:	dc16      	bgt.n	8002c1a <__aeabi_i2d+0x4a>
 8002bec:	0003      	movs	r3, r0
 8002bee:	002e      	movs	r6, r5
 8002bf0:	3315      	adds	r3, #21
 8002bf2:	409e      	lsls	r6, r3
 8002bf4:	230b      	movs	r3, #11
 8002bf6:	1a18      	subs	r0, r3, r0
 8002bf8:	40c5      	lsrs	r5, r0
 8002bfa:	0553      	lsls	r3, r2, #21
 8002bfc:	032d      	lsls	r5, r5, #12
 8002bfe:	0b2d      	lsrs	r5, r5, #12
 8002c00:	0d5b      	lsrs	r3, r3, #21
 8002c02:	e003      	b.n	8002c0c <__aeabi_i2d+0x3c>
 8002c04:	2400      	movs	r4, #0
 8002c06:	2300      	movs	r3, #0
 8002c08:	2500      	movs	r5, #0
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	051b      	lsls	r3, r3, #20
 8002c0e:	432b      	orrs	r3, r5
 8002c10:	07e4      	lsls	r4, r4, #31
 8002c12:	4323      	orrs	r3, r4
 8002c14:	0030      	movs	r0, r6
 8002c16:	0019      	movs	r1, r3
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
 8002c1a:	380b      	subs	r0, #11
 8002c1c:	4085      	lsls	r5, r0
 8002c1e:	0553      	lsls	r3, r2, #21
 8002c20:	032d      	lsls	r5, r5, #12
 8002c22:	2600      	movs	r6, #0
 8002c24:	0b2d      	lsrs	r5, r5, #12
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	e7f0      	b.n	8002c0c <__aeabi_i2d+0x3c>
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	0000041e 	.word	0x0000041e

08002c30 <__aeabi_ui2d>:
 8002c30:	b510      	push	{r4, lr}
 8002c32:	1e04      	subs	r4, r0, #0
 8002c34:	d010      	beq.n	8002c58 <__aeabi_ui2d+0x28>
 8002c36:	f000 f869 	bl	8002d0c <__clzsi2>
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <__aeabi_ui2d+0x48>)
 8002c3c:	1a1b      	subs	r3, r3, r0
 8002c3e:	280a      	cmp	r0, #10
 8002c40:	dc11      	bgt.n	8002c66 <__aeabi_ui2d+0x36>
 8002c42:	220b      	movs	r2, #11
 8002c44:	0021      	movs	r1, r4
 8002c46:	1a12      	subs	r2, r2, r0
 8002c48:	40d1      	lsrs	r1, r2
 8002c4a:	3015      	adds	r0, #21
 8002c4c:	030a      	lsls	r2, r1, #12
 8002c4e:	055b      	lsls	r3, r3, #21
 8002c50:	4084      	lsls	r4, r0
 8002c52:	0b12      	lsrs	r2, r2, #12
 8002c54:	0d5b      	lsrs	r3, r3, #21
 8002c56:	e001      	b.n	8002c5c <__aeabi_ui2d+0x2c>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	051b      	lsls	r3, r3, #20
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	0020      	movs	r0, r4
 8002c62:	0019      	movs	r1, r3
 8002c64:	bd10      	pop	{r4, pc}
 8002c66:	0022      	movs	r2, r4
 8002c68:	380b      	subs	r0, #11
 8002c6a:	4082      	lsls	r2, r0
 8002c6c:	055b      	lsls	r3, r3, #21
 8002c6e:	0312      	lsls	r2, r2, #12
 8002c70:	2400      	movs	r4, #0
 8002c72:	0b12      	lsrs	r2, r2, #12
 8002c74:	0d5b      	lsrs	r3, r3, #21
 8002c76:	e7f1      	b.n	8002c5c <__aeabi_ui2d+0x2c>
 8002c78:	0000041e 	.word	0x0000041e

08002c7c <__aeabi_f2d>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	0043      	lsls	r3, r0, #1
 8002c80:	0246      	lsls	r6, r0, #9
 8002c82:	0fc4      	lsrs	r4, r0, #31
 8002c84:	20fe      	movs	r0, #254	; 0xfe
 8002c86:	0e1b      	lsrs	r3, r3, #24
 8002c88:	1c59      	adds	r1, r3, #1
 8002c8a:	0a75      	lsrs	r5, r6, #9
 8002c8c:	4208      	tst	r0, r1
 8002c8e:	d00c      	beq.n	8002caa <__aeabi_f2d+0x2e>
 8002c90:	22e0      	movs	r2, #224	; 0xe0
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4694      	mov	ip, r2
 8002c96:	076d      	lsls	r5, r5, #29
 8002c98:	0b36      	lsrs	r6, r6, #12
 8002c9a:	4463      	add	r3, ip
 8002c9c:	051b      	lsls	r3, r3, #20
 8002c9e:	4333      	orrs	r3, r6
 8002ca0:	07e4      	lsls	r4, r4, #31
 8002ca2:	4323      	orrs	r3, r4
 8002ca4:	0028      	movs	r0, r5
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	bd70      	pop	{r4, r5, r6, pc}
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d114      	bne.n	8002cd8 <__aeabi_f2d+0x5c>
 8002cae:	2d00      	cmp	r5, #0
 8002cb0:	d01b      	beq.n	8002cea <__aeabi_f2d+0x6e>
 8002cb2:	0028      	movs	r0, r5
 8002cb4:	f000 f82a 	bl	8002d0c <__clzsi2>
 8002cb8:	280a      	cmp	r0, #10
 8002cba:	dc1c      	bgt.n	8002cf6 <__aeabi_f2d+0x7a>
 8002cbc:	230b      	movs	r3, #11
 8002cbe:	002a      	movs	r2, r5
 8002cc0:	1a1b      	subs	r3, r3, r0
 8002cc2:	40da      	lsrs	r2, r3
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	3315      	adds	r3, #21
 8002cc8:	409d      	lsls	r5, r3
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <__aeabi_f2d+0x88>)
 8002ccc:	0312      	lsls	r2, r2, #12
 8002cce:	1a1b      	subs	r3, r3, r0
 8002cd0:	055b      	lsls	r3, r3, #21
 8002cd2:	0b16      	lsrs	r6, r2, #12
 8002cd4:	0d5b      	lsrs	r3, r3, #21
 8002cd6:	e7e1      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cd8:	2d00      	cmp	r5, #0
 8002cda:	d009      	beq.n	8002cf0 <__aeabi_f2d+0x74>
 8002cdc:	0b32      	lsrs	r2, r6, #12
 8002cde:	2680      	movs	r6, #128	; 0x80
 8002ce0:	0336      	lsls	r6, r6, #12
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <__aeabi_f2d+0x8c>)
 8002ce4:	076d      	lsls	r5, r5, #29
 8002ce6:	4316      	orrs	r6, r2
 8002ce8:	e7d8      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2600      	movs	r6, #0
 8002cee:	e7d5      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cf0:	2600      	movs	r6, #0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <__aeabi_f2d+0x8c>)
 8002cf4:	e7d2      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	002a      	movs	r2, r5
 8002cfa:	3b0b      	subs	r3, #11
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	2500      	movs	r5, #0
 8002d00:	e7e3      	b.n	8002cca <__aeabi_f2d+0x4e>
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	00000389 	.word	0x00000389
 8002d08:	000007ff 	.word	0x000007ff

08002d0c <__clzsi2>:
 8002d0c:	211c      	movs	r1, #28
 8002d0e:	2301      	movs	r3, #1
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	4298      	cmp	r0, r3
 8002d14:	d301      	bcc.n	8002d1a <__clzsi2+0xe>
 8002d16:	0c00      	lsrs	r0, r0, #16
 8002d18:	3910      	subs	r1, #16
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	4298      	cmp	r0, r3
 8002d1e:	d301      	bcc.n	8002d24 <__clzsi2+0x18>
 8002d20:	0a00      	lsrs	r0, r0, #8
 8002d22:	3908      	subs	r1, #8
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	4298      	cmp	r0, r3
 8002d28:	d301      	bcc.n	8002d2e <__clzsi2+0x22>
 8002d2a:	0900      	lsrs	r0, r0, #4
 8002d2c:	3904      	subs	r1, #4
 8002d2e:	a202      	add	r2, pc, #8	; (adr r2, 8002d38 <__clzsi2+0x2c>)
 8002d30:	5c10      	ldrb	r0, [r2, r0]
 8002d32:	1840      	adds	r0, r0, r1
 8002d34:	4770      	bx	lr
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	02020304 	.word	0x02020304
 8002d3c:	01010101 	.word	0x01010101
	...

08002d48 <__clzdi2>:
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	2900      	cmp	r1, #0
 8002d4c:	d103      	bne.n	8002d56 <__clzdi2+0xe>
 8002d4e:	f7ff ffdd 	bl	8002d0c <__clzsi2>
 8002d52:	3020      	adds	r0, #32
 8002d54:	e002      	b.n	8002d5c <__clzdi2+0x14>
 8002d56:	1c08      	adds	r0, r1, #0
 8002d58:	f7ff ffd8 	bl	8002d0c <__clzsi2>
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)

08002d60 <__divdi3>:
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d62:	4657      	mov	r7, sl
 8002d64:	464e      	mov	r6, r9
 8002d66:	4645      	mov	r5, r8
 8002d68:	46de      	mov	lr, fp
 8002d6a:	b5e0      	push	{r5, r6, r7, lr}
 8002d6c:	000f      	movs	r7, r1
 8002d6e:	0019      	movs	r1, r3
 8002d70:	2300      	movs	r3, #0
 8002d72:	0006      	movs	r6, r0
 8002d74:	4698      	mov	r8, r3
 8002d76:	0010      	movs	r0, r2
 8002d78:	b083      	sub	sp, #12
 8002d7a:	2f00      	cmp	r7, #0
 8002d7c:	da07      	bge.n	8002d8e <__divdi3+0x2e>
 8002d7e:	0033      	movs	r3, r6
 8002d80:	003c      	movs	r4, r7
 8002d82:	2700      	movs	r7, #0
 8002d84:	425e      	negs	r6, r3
 8002d86:	41a7      	sbcs	r7, r4
 8002d88:	2301      	movs	r3, #1
 8002d8a:	425b      	negs	r3, r3
 8002d8c:	4698      	mov	r8, r3
 8002d8e:	2900      	cmp	r1, #0
 8002d90:	da07      	bge.n	8002da2 <__divdi3+0x42>
 8002d92:	4643      	mov	r3, r8
 8002d94:	43db      	mvns	r3, r3
 8002d96:	000c      	movs	r4, r1
 8002d98:	4698      	mov	r8, r3
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4258      	negs	r0, r3
 8002da0:	41a1      	sbcs	r1, r4
 8002da2:	0034      	movs	r4, r6
 8002da4:	003d      	movs	r5, r7
 8002da6:	4682      	mov	sl, r0
 8002da8:	4689      	mov	r9, r1
 8002daa:	42b9      	cmp	r1, r7
 8002dac:	d86a      	bhi.n	8002e84 <__divdi3+0x124>
 8002dae:	d067      	beq.n	8002e80 <__divdi3+0x120>
 8002db0:	4649      	mov	r1, r9
 8002db2:	4650      	mov	r0, sl
 8002db4:	f7ff ffc8 	bl	8002d48 <__clzdi2>
 8002db8:	4683      	mov	fp, r0
 8002dba:	0039      	movs	r1, r7
 8002dbc:	0030      	movs	r0, r6
 8002dbe:	f7ff ffc3 	bl	8002d48 <__clzdi2>
 8002dc2:	465b      	mov	r3, fp
 8002dc4:	1a1b      	subs	r3, r3, r0
 8002dc6:	469c      	mov	ip, r3
 8002dc8:	3b20      	subs	r3, #32
 8002dca:	469b      	mov	fp, r3
 8002dcc:	d46b      	bmi.n	8002ea6 <__divdi3+0x146>
 8002dce:	4658      	mov	r0, fp
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	4081      	lsls	r1, r0
 8002dd4:	4660      	mov	r0, ip
 8002dd6:	000b      	movs	r3, r1
 8002dd8:	4651      	mov	r1, sl
 8002dda:	4081      	lsls	r1, r0
 8002ddc:	000a      	movs	r2, r1
 8002dde:	42bb      	cmp	r3, r7
 8002de0:	d900      	bls.n	8002de4 <__divdi3+0x84>
 8002de2:	e072      	b.n	8002eca <__divdi3+0x16a>
 8002de4:	42bb      	cmp	r3, r7
 8002de6:	d100      	bne.n	8002dea <__divdi3+0x8a>
 8002de8:	e079      	b.n	8002ede <__divdi3+0x17e>
 8002dea:	0034      	movs	r4, r6
 8002dec:	003d      	movs	r5, r7
 8002dee:	4659      	mov	r1, fp
 8002df0:	1aa4      	subs	r4, r4, r2
 8002df2:	419d      	sbcs	r5, r3
 8002df4:	2900      	cmp	r1, #0
 8002df6:	da00      	bge.n	8002dfa <__divdi3+0x9a>
 8002df8:	e074      	b.n	8002ee4 <__divdi3+0x184>
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	2601      	movs	r6, #1
 8002e00:	9000      	str	r0, [sp, #0]
 8002e02:	9101      	str	r1, [sp, #4]
 8002e04:	4659      	mov	r1, fp
 8002e06:	408e      	lsls	r6, r1
 8002e08:	9601      	str	r6, [sp, #4]
 8002e0a:	4661      	mov	r1, ip
 8002e0c:	2601      	movs	r6, #1
 8002e0e:	408e      	lsls	r6, r1
 8002e10:	4661      	mov	r1, ip
 8002e12:	9600      	str	r6, [sp, #0]
 8002e14:	2900      	cmp	r1, #0
 8002e16:	d05f      	beq.n	8002ed8 <__divdi3+0x178>
 8002e18:	07d9      	lsls	r1, r3, #31
 8002e1a:	0856      	lsrs	r6, r2, #1
 8002e1c:	430e      	orrs	r6, r1
 8002e1e:	085f      	lsrs	r7, r3, #1
 8002e20:	4661      	mov	r1, ip
 8002e22:	2201      	movs	r2, #1
 8002e24:	2300      	movs	r3, #0
 8002e26:	e00c      	b.n	8002e42 <__divdi3+0xe2>
 8002e28:	42af      	cmp	r7, r5
 8002e2a:	d101      	bne.n	8002e30 <__divdi3+0xd0>
 8002e2c:	42a6      	cmp	r6, r4
 8002e2e:	d80a      	bhi.n	8002e46 <__divdi3+0xe6>
 8002e30:	1ba4      	subs	r4, r4, r6
 8002e32:	41bd      	sbcs	r5, r7
 8002e34:	1924      	adds	r4, r4, r4
 8002e36:	416d      	adcs	r5, r5
 8002e38:	3901      	subs	r1, #1
 8002e3a:	18a4      	adds	r4, r4, r2
 8002e3c:	415d      	adcs	r5, r3
 8002e3e:	2900      	cmp	r1, #0
 8002e40:	d006      	beq.n	8002e50 <__divdi3+0xf0>
 8002e42:	42af      	cmp	r7, r5
 8002e44:	d9f0      	bls.n	8002e28 <__divdi3+0xc8>
 8002e46:	3901      	subs	r1, #1
 8002e48:	1924      	adds	r4, r4, r4
 8002e4a:	416d      	adcs	r5, r5
 8002e4c:	2900      	cmp	r1, #0
 8002e4e:	d1f8      	bne.n	8002e42 <__divdi3+0xe2>
 8002e50:	9800      	ldr	r0, [sp, #0]
 8002e52:	9901      	ldr	r1, [sp, #4]
 8002e54:	465b      	mov	r3, fp
 8002e56:	1900      	adds	r0, r0, r4
 8002e58:	4169      	adcs	r1, r5
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db4d      	blt.n	8002efa <__divdi3+0x19a>
 8002e5e:	002e      	movs	r6, r5
 8002e60:	002c      	movs	r4, r5
 8002e62:	40de      	lsrs	r6, r3
 8002e64:	4663      	mov	r3, ip
 8002e66:	40dc      	lsrs	r4, r3
 8002e68:	465b      	mov	r3, fp
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	db55      	blt.n	8002f1a <__divdi3+0x1ba>
 8002e6e:	0034      	movs	r4, r6
 8002e70:	409c      	lsls	r4, r3
 8002e72:	0023      	movs	r3, r4
 8002e74:	4664      	mov	r4, ip
 8002e76:	40a6      	lsls	r6, r4
 8002e78:	0032      	movs	r2, r6
 8002e7a:	1a80      	subs	r0, r0, r2
 8002e7c:	4199      	sbcs	r1, r3
 8002e7e:	e003      	b.n	8002e88 <__divdi3+0x128>
 8002e80:	42b0      	cmp	r0, r6
 8002e82:	d995      	bls.n	8002db0 <__divdi3+0x50>
 8002e84:	2000      	movs	r0, #0
 8002e86:	2100      	movs	r1, #0
 8002e88:	4643      	mov	r3, r8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <__divdi3+0x138>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	000c      	movs	r4, r1
 8002e92:	2100      	movs	r1, #0
 8002e94:	4258      	negs	r0, r3
 8002e96:	41a1      	sbcs	r1, r4
 8002e98:	b003      	add	sp, #12
 8002e9a:	bcf0      	pop	{r4, r5, r6, r7}
 8002e9c:	46bb      	mov	fp, r7
 8002e9e:	46b2      	mov	sl, r6
 8002ea0:	46a9      	mov	r9, r5
 8002ea2:	46a0      	mov	r8, r4
 8002ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	4648      	mov	r0, r9
 8002eaa:	2320      	movs	r3, #32
 8002eac:	4651      	mov	r1, sl
 8002eae:	4090      	lsls	r0, r2
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	40d9      	lsrs	r1, r3
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	9100      	str	r1, [sp, #0]
 8002eb8:	9900      	ldr	r1, [sp, #0]
 8002eba:	4660      	mov	r0, ip
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	4081      	lsls	r1, r0
 8002ec2:	000a      	movs	r2, r1
 8002ec4:	42bb      	cmp	r3, r7
 8002ec6:	d800      	bhi.n	8002eca <__divdi3+0x16a>
 8002ec8:	e78c      	b.n	8002de4 <__divdi3+0x84>
 8002eca:	2100      	movs	r1, #0
 8002ecc:	2000      	movs	r0, #0
 8002ece:	9000      	str	r0, [sp, #0]
 8002ed0:	9101      	str	r1, [sp, #4]
 8002ed2:	4661      	mov	r1, ip
 8002ed4:	2900      	cmp	r1, #0
 8002ed6:	d19f      	bne.n	8002e18 <__divdi3+0xb8>
 8002ed8:	9800      	ldr	r0, [sp, #0]
 8002eda:	9901      	ldr	r1, [sp, #4]
 8002edc:	e7d4      	b.n	8002e88 <__divdi3+0x128>
 8002ede:	42b1      	cmp	r1, r6
 8002ee0:	d8f3      	bhi.n	8002eca <__divdi3+0x16a>
 8002ee2:	e782      	b.n	8002dea <__divdi3+0x8a>
 8002ee4:	4661      	mov	r1, ip
 8002ee6:	2620      	movs	r6, #32
 8002ee8:	2701      	movs	r7, #1
 8002eea:	1a76      	subs	r6, r6, r1
 8002eec:	2000      	movs	r0, #0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	40f7      	lsrs	r7, r6
 8002ef2:	9000      	str	r0, [sp, #0]
 8002ef4:	9101      	str	r1, [sp, #4]
 8002ef6:	9701      	str	r7, [sp, #4]
 8002ef8:	e787      	b.n	8002e0a <__divdi3+0xaa>
 8002efa:	4662      	mov	r2, ip
 8002efc:	2320      	movs	r3, #32
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	002a      	movs	r2, r5
 8002f02:	409a      	lsls	r2, r3
 8002f04:	0026      	movs	r6, r4
 8002f06:	0013      	movs	r3, r2
 8002f08:	4662      	mov	r2, ip
 8002f0a:	40d6      	lsrs	r6, r2
 8002f0c:	002c      	movs	r4, r5
 8002f0e:	431e      	orrs	r6, r3
 8002f10:	4663      	mov	r3, ip
 8002f12:	40dc      	lsrs	r4, r3
 8002f14:	465b      	mov	r3, fp
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	daa9      	bge.n	8002e6e <__divdi3+0x10e>
 8002f1a:	4662      	mov	r2, ip
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	0035      	movs	r5, r6
 8002f20:	4094      	lsls	r4, r2
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	40dd      	lsrs	r5, r3
 8002f26:	0023      	movs	r3, r4
 8002f28:	432b      	orrs	r3, r5
 8002f2a:	e7a3      	b.n	8002e74 <__divdi3+0x114>

08002f2c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002f30:	f001 ffaa 	bl	8004e88 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002f34:	f000 f80e 	bl	8002f54 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002f42:	2301      	movs	r3, #1
 8002f44:	425b      	negs	r3, r3
 8002f46:	0018      	movs	r0, r3
 8002f48:	f019 fb9c 	bl	801c684 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <LoRaWAN_Init>:
//MX_I2C1_Init(hi2c1);
//MX_USART2_Init();
/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af04      	add	r7, sp, #16
	   	bmp280.addr = BMP280_I2C_ADDRESS_0;
	   	bmp280.i2c = &hi2c1;
*/
	   //float pressure1, temperature1, humidity1;
  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 8002f5a:	2002      	movs	r0, #2
 8002f5c:	f002 fe7e 	bl	8005c5c <BSP_LED_Init>
  LED_Init(LED_RED1);
 8002f60:	2001      	movs	r0, #1
 8002f62:	f002 fe7b 	bl	8005c5c <BSP_LED_Init>
  LED_Init(LED_RED2);
 8002f66:	2003      	movs	r0, #3
 8002f68:	f002 fe78 	bl	8005c5c <BSP_LED_Init>
  /* Get LoRa APP version*/
//  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, " ##### Версия протокола:        V%X.%X.%X\r\n",
 8002f6c:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <LoRaWAN_Init+0x10c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	9202      	str	r2, [sp, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	9201      	str	r2, [sp, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	9200      	str	r2, [sp, #0]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f018 ffbe 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT)); // версия радио Middleware
  // APP_LOG(TS_OFF, VLEVEL_M, "MW_:   V%X.%X.%X\r\n",
//  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== EEEPROM EST====\r\n");
  //	 (uint8_t) buffer[20]);
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002f84:	4b37      	ldr	r3, [pc, #220]	; (8003064 <LoRaWAN_Init+0x110>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	4251      	negs	r1, r2
 8002f8a:	4837      	ldr	r0, [pc, #220]	; (8003068 <LoRaWAN_Init+0x114>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	9200      	str	r2, [sp, #0]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f019 fe49 	bl	801cc28 <UTIL_TIMER_Create>
  // HAL_LPTIM_Counter_Start_IT(&hlptim,1000);
 // HAL_LPTIM_TimeOut_Start(&TxLedTimer, uint32_t Period, uint32_t Timeout);
  //  HAL_LPTIM_TimeOut_Start(&TxLedTimer,5000,1000);
   UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002f96:	4b35      	ldr	r3, [pc, #212]	; (800306c <LoRaWAN_Init+0x118>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4251      	negs	r1, r2
 8002f9c:	4834      	ldr	r0, [pc, #208]	; (8003070 <LoRaWAN_Init+0x11c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	9200      	str	r2, [sp, #0]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f019 fe40 	bl	801cc28 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002fa8:	4b32      	ldr	r3, [pc, #200]	; (8003074 <LoRaWAN_Init+0x120>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	4251      	negs	r1, r2
 8002fae:	4832      	ldr	r0, [pc, #200]	; (8003078 <LoRaWAN_Init+0x124>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	9200      	str	r2, [sp, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f019 fe37 	bl	801cc28 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);// 3 стр отрубают светодиоды если их не будет,
 8002fba:	23fa      	movs	r3, #250	; 0xfa
 8002fbc:	005a      	lsls	r2, r3, #1
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <LoRaWAN_Init+0x114>)
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f019 ff58 	bl	801ce78 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002fc8:	23fa      	movs	r3, #250	; 0xfa
 8002fca:	005a      	lsls	r2, r3, #1
 8002fcc:	4b28      	ldr	r3, [pc, #160]	; (8003070 <LoRaWAN_Init+0x11c>)
 8002fce:	0011      	movs	r1, r2
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f019 ff51 	bl	801ce78 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002fd6:	23fa      	movs	r3, #250	; 0xfa
 8002fd8:	005a      	lsls	r2, r3, #1
 8002fda:	4b27      	ldr	r3, [pc, #156]	; (8003078 <LoRaWAN_Init+0x124>)
 8002fdc:	0011      	movs	r1, r2
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f019 ff4a 	bl	801ce78 <UTIL_TIMER_SetPeriod>
 // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <LoRaWAN_Init+0x128>)
 8002fe6:	001a      	movs	r2, r3
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2001      	movs	r0, #1
 8002fec:	f019 fc2c 	bl	801c848 <UTIL_SEQ_RegTask>
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <LoRaWAN_Init+0x12c>)
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	f019 fc26 	bl	801c848 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8002ffc:	f000 fc24 	bl	8003848 <LoraInfo_Init>
  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8003000:	4b20      	ldr	r3, [pc, #128]	; (8003084 <LoRaWAN_Init+0x130>)
 8003002:	0018      	movs	r0, r3
 8003004:	f00a ff9c 	bl	800df40 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8003008:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <LoRaWAN_Init+0x134>)
 800300a:	0018      	movs	r0, r3
 800300c:	f00a ffde 	bl	800dfcc <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <LoRaWAN_Init+0x124>)
 8003012:	0018      	movs	r0, r3
 8003014:	f019 fe40 	bl	801cc98 <UTIL_TIMER_Start>
  // HAL_LPTIM_Counter_Start_IT(&JoinLedTimer,1000); // попытка переделать светодиодом под LPTIM
  LmHandlerJoin(ActivationType);
 8003018:	4b1c      	ldr	r3, [pc, #112]	; (800308c <LoRaWAN_Init+0x138>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	0018      	movs	r0, r3
 800301e:	f00b f8e7 	bl	800e1f0 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <LoRaWAN_Init+0x13c>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d113      	bne.n	8003052 <LoRaWAN_Init+0xfe>
  {
    /* send every time timer elapses */

    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <LoRaWAN_Init+0x140>)
 800302c:	2201      	movs	r2, #1
 800302e:	4251      	negs	r1, r2
 8003030:	4819      	ldr	r0, [pc, #100]	; (8003098 <LoRaWAN_Init+0x144>)
 8003032:	2200      	movs	r2, #0
 8003034:	9200      	str	r2, [sp, #0]
 8003036:	2200      	movs	r2, #0
 8003038:	f019 fdf6 	bl	801cc28 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800303c:	4a17      	ldr	r2, [pc, #92]	; (800309c <LoRaWAN_Init+0x148>)
 800303e:	4b16      	ldr	r3, [pc, #88]	; (8003098 <LoRaWAN_Init+0x144>)
 8003040:	0011      	movs	r1, r2
 8003042:	0018      	movs	r0, r3
 8003044:	f019 ff18 	bl	801ce78 <UTIL_TIMER_SetPeriod>
    //  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    //  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // NEW
      UTIL_TIMER_Start(&TxTimer);
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <LoRaWAN_Init+0x144>)
 800304a:	0018      	movs	r0, r3
 800304c:	f019 fe24 	bl	801cc98 <UTIL_TIMER_Start>
  /* bmp280_init_default_params(&bmp280.params);
   	bmp280.addr = BMP280_I2C_ADDRESS_0;
   	bmp280.i2c = &hi2c1;
   	*/
  /* USER CODE END LoRaWAN_Init_Last */
}
 8003050:	e003      	b.n	800305a <LoRaWAN_Init+0x106>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003052:	2101      	movs	r1, #1
 8003054:	2000      	movs	r0, #0
 8003056:	f002 fec3 	bl	8005de0 <BSP_PB_Init>
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	0801ea58 	.word	0x0801ea58
 8003064:	080035b1 	.word	0x080035b1
 8003068:	20000364 	.word	0x20000364
 800306c:	080035c7 	.word	0x080035c7
 8003070:	2000037c 	.word	0x2000037c
 8003074:	080035dd 	.word	0x080035dd
 8003078:	20000394 	.word	0x20000394
 800307c:	0800e135 	.word	0x0800e135
 8003080:	080031e9 	.word	0x080031e9
 8003084:	2000000c 	.word	0x2000000c
 8003088:	2000002c 	.word	0x2000002c
 800308c:	20000008 	.word	0x20000008
 8003090:	2000034b 	.word	0x2000034b
 8003094:	0800358d 	.word	0x0800358d
 8003098:	2000034c 	.word	0x2000034c
 800309c:	00002710 	.word	0x00002710

080030a0 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a2:	b08b      	sub	sp, #44	; 0x2c
 80030a4:	af06      	add	r7, sp, #24
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d100      	bne.n	80030b2 <OnRxData+0x12>
 80030b0:	e088      	b.n	80031c4 <OnRxData+0x124>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d100      	bne.n	80030ba <OnRxData+0x1a>
 80030b8:	e084      	b.n	80031c4 <OnRxData+0x124>
  {
    LED_On(LED_BLUE);
 80030ba:	2002      	movs	r0, #2
 80030bc:	f002 fe3c 	bl	8005d38 <BSP_LED_On>
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== Индикация приёма данных ==========\r\n");
 80030c0:	4b42      	ldr	r3, [pc, #264]	; (80031cc <OnRxData+0x12c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	2002      	movs	r0, #2
 80030c8:	f018 ff1a 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	7b12      	ldrb	r2, [r2, #12]
 80030d4:	b252      	sxtb	r2, r2
 80030d6:	0011      	movs	r1, r2
 80030d8:	4a3d      	ldr	r2, [pc, #244]	; (80031d0 <OnRxData+0x130>)
 80030da:	0089      	lsls	r1, r1, #2
 80030dc:	588a      	ldr	r2, [r1, r2]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	7809      	ldrb	r1, [r1, #0]
 80030e2:	0008      	movs	r0, r1
 80030e4:	6839      	ldr	r1, [r7, #0]
 80030e6:	7889      	ldrb	r1, [r1, #2]
 80030e8:	b249      	sxtb	r1, r1
 80030ea:	000c      	movs	r4, r1
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	78c9      	ldrb	r1, [r1, #3]
 80030f0:	b249      	sxtb	r1, r1
 80030f2:	000d      	movs	r5, r1
 80030f4:	6839      	ldr	r1, [r7, #0]
 80030f6:	7909      	ldrb	r1, [r1, #4]
 80030f8:	b249      	sxtb	r1, r1
 80030fa:	000e      	movs	r6, r1
 80030fc:	4935      	ldr	r1, [pc, #212]	; (80031d4 <OnRxData+0x134>)
 80030fe:	9605      	str	r6, [sp, #20]
 8003100:	9504      	str	r5, [sp, #16]
 8003102:	9403      	str	r4, [sp, #12]
 8003104:	9002      	str	r0, [sp, #8]
 8003106:	9201      	str	r2, [sp, #4]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	000b      	movs	r3, r1
 800310c:	2200      	movs	r2, #0
 800310e:	2100      	movs	r1, #0
 8003110:	2003      	movs	r0, #3
 8003112:	f018 fef5 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
//      uint16_t eepromBaseAddress = 0x08080000; // Пример адреса EEPROM
	  #define eepromBaseAddress 0x08080000UL
      uint8_t dataToWrite[] = {0x01, 0x02, 0x03}; // Пример данных для записи
 8003116:	230c      	movs	r3, #12
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	4a2f      	ldr	r2, [pc, #188]	; (80031d8 <OnRxData+0x138>)
 800311c:	8811      	ldrh	r1, [r2, #0]
 800311e:	8019      	strh	r1, [r3, #0]
 8003120:	7892      	ldrb	r2, [r2, #2]
 8003122:	709a      	strb	r2, [r3, #2]
      uint8_t dataSize = sizeof(dataToWrite); // Размер данных
 8003124:	230f      	movs	r3, #15
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2203      	movs	r2, #3
 800312a:	701a      	strb	r2, [r3, #0]
//      FLASHEx_EEPROM_WRITE(eepromBaseAddress, dataToWrite, dataSize);
//    FLASHEx_EEPROM_WRITE(0, params->DownlinkCounter, sizeof(params->DownlinkCounter));
//      dataeprom = dataToWrite;
//      EEPROM_CLEAR();
//      EEPROM_WRITE_DATA(eepromBaseAddress, dataToWrite, dataSize);
    switch (appData->Port)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d020      	beq.n	8003176 <OnRxData+0xd6>
 8003134:	2b03      	cmp	r3, #3
 8003136:	d142      	bne.n	80031be <OnRxData+0x11e>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d116      	bne.n	800316e <OnRxData+0xce>
        {
          switch (appData->Buffer[0])
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d00d      	beq.n	8003166 <OnRxData+0xc6>
 800314a:	dc12      	bgt.n	8003172 <OnRxData+0xd2>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <OnRxData+0xb6>
 8003150:	2b01      	cmp	r3, #1
 8003152:	d004      	beq.n	800315e <OnRxData+0xbe>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8003154:	e00d      	b.n	8003172 <OnRxData+0xd2>
              LmHandlerRequestClass(CLASS_A);
 8003156:	2000      	movs	r0, #0
 8003158:	f00b f9a4 	bl	800e4a4 <LmHandlerRequestClass>
              break;
 800315c:	e00a      	b.n	8003174 <OnRxData+0xd4>
              LmHandlerRequestClass(CLASS_B);
 800315e:	2001      	movs	r0, #1
 8003160:	f00b f9a0 	bl	800e4a4 <LmHandlerRequestClass>
              break;
 8003164:	e006      	b.n	8003174 <OnRxData+0xd4>
              LmHandlerRequestClass(CLASS_C);
 8003166:	2002      	movs	r0, #2
 8003168:	f00b f99c 	bl	800e4a4 <LmHandlerRequestClass>
              break;
 800316c:	e002      	b.n	8003174 <OnRxData+0xd4>
          }
        }
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	e028      	b.n	80031c4 <OnRxData+0x124>
              break;
 8003172:	46c0      	nop			; (mov r8, r8)
        break;
 8003174:	e026      	b.n	80031c4 <OnRxData+0x124>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	785b      	ldrb	r3, [r3, #1]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d121      	bne.n	80031c2 <OnRxData+0x122>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	4013      	ands	r3, r2
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <OnRxData+0x13c>)
 800318c:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <OnRxData+0x13c>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <OnRxData+0x10a>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <OnRxData+0x140>)
 8003198:	2200      	movs	r2, #0
 800319a:	2100      	movs	r1, #0
 800319c:	2003      	movs	r0, #3
 800319e:	f018 feaf 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>

            LED_Off(LED_RED1);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f002 fde4 	bl	8005d70 <BSP_LED_Off>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");

            LED_On(LED_RED1);
          }
        }
        break;
 80031a8:	e00b      	b.n	80031c2 <OnRxData+0x122>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <OnRxData+0x144>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	2100      	movs	r1, #0
 80031b0:	2003      	movs	r0, #3
 80031b2:	f018 fea5 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 80031b6:	2001      	movs	r0, #1
 80031b8:	f002 fdbe 	bl	8005d38 <BSP_LED_On>
        break;
 80031bc:	e001      	b.n	80031c2 <OnRxData+0x122>
      /* USER CODE END OnRxData_Switch_case */
      default:
        /* USER CODE BEGIN OnRxData_Switch_default */

        /* USER CODE END OnRxData_Switch_default */
        break;
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	e000      	b.n	80031c4 <OnRxData+0x124>
        break;
 80031c2:	46c0      	nop			; (mov r8, r8)
  }

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b005      	add	sp, #20
 80031ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031cc:	0801ea94 	.word	0x0801ea94
 80031d0:	20000034 	.word	0x20000034
 80031d4:	0801eae4 	.word	0x0801eae4
 80031d8:	0801eb44 	.word	0x0801eb44
 80031dc:	2000034a 	.word	0x2000034a
 80031e0:	0801eb2c 	.word	0x0801eb2c
 80031e4:	0801eb38 	.word	0x0801eb38

080031e8 <SendTxData>:

static void SendTxData(void)
{
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ea:	b0e3      	sub	sp, #396	; 0x18c
 80031ec:	af06      	add	r7, sp, #24
	// uint8_t payload = "textovik";
	 uint16_t pressure = 0;
 80031ee:	23b7      	movs	r3, #183	; 0xb7
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2200      	movs	r2, #0
 80031f6:	801a      	strh	r2, [r3, #0]
	 int16_t temperature = 0;
 80031f8:	23b6      	movs	r3, #182	; 0xb6
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2200      	movs	r2, #0
 8003200:	801a      	strh	r2, [r3, #0]
  	//int16_t temperature = 0;
  	uint16_t Defbuff;  // для счётчика с охранной кнопки
  sensor_t sensor_data;
  uint16_t size;
  uint8_t Datasens[256];
  UTIL_TIMER_Time_t nextTxIn = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	63fb      	str	r3, [r7, #60]	; 0x3c
  bmp280_params_t params;
	RTC_TimeTypeDef sTime1;
  	RTC_DateTypeDef sDate1;
  	uint8_t buffer[20];
  	volatile uint16_t adc = 0;
 8003206:	4bc4      	ldr	r3, [pc, #784]	; (8003518 <SendTxData+0x330>)
 8003208:	22b8      	movs	r2, #184	; 0xb8
 800320a:	0052      	lsls	r2, r2, #1
 800320c:	4694      	mov	ip, r2
 800320e:	44bc      	add	ip, r7
 8003210:	4463      	add	r3, ip
 8003212:	2200      	movs	r2, #0
 8003214:	801a      	strh	r2, [r3, #0]
#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
   uint16_t humidity = 0;
 8003216:	23b5      	movs	r3, #181	; 0xb5
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2200      	movs	r2, #0
 800321e:	801a      	strh	r2, [r3, #0]
  uint32_t i = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	22b2      	movs	r2, #178	; 0xb2
 8003224:	0052      	lsls	r2, r2, #1
 8003226:	18ba      	adds	r2, r7, r2
 8003228:	6013      	str	r3, [r2, #0]
  int32_t latitude = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	22b0      	movs	r2, #176	; 0xb0
 800322e:	0052      	lsls	r2, r2, #1
 8003230:	18ba      	adds	r2, r7, r2
 8003232:	6013      	str	r3, [r2, #0]
  int32_t longitude = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	22ae      	movs	r2, #174	; 0xae
 8003238:	0052      	lsls	r2, r2, #1
 800323a:	18ba      	adds	r2, r7, r2
 800323c:	6013      	str	r3, [r2, #0]
  uint16_t altitudeGps = 0;
 800323e:	23ad      	movs	r3, #173	; 0xad
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2200      	movs	r2, #0
 8003246:	801a      	strh	r2, [r3, #0]
  #else
   temperature = (SYS_GetTemperatureLevel() >> 8);
  #endif  /* SENSOR_ENABLED */
  /*  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */

    AppData.Port = LORAWAN_USER_APP_PORT;
 8003248:	4bb4      	ldr	r3, [pc, #720]	; (800351c <SendTxData+0x334>)
 800324a:	2202      	movs	r2, #2
 800324c:	701a      	strb	r2, [r3, #0]
  //
  // MX_I2C1_Init();
 // MX_USART2_Init();
  // MX_I2C1_Init();
  // BSP_SPI1_Init();
  BSP_I2C1_Init();
 800324e:	f002 fbbd 	bl	80059cc <BSP_I2C1_Init>
  MX_ADC_Init();
 8003252:	f000 fb2d 	bl	80038b0 <MX_ADC_Init>
  MX_LPTIM1_Init();
 8003256:	f000 fa71 	bl	800373c <MX_LPTIM1_Init>

  HAL_LPTIM_Encoder_Start_IT(&hlptim1, 1000);
 800325a:	23fa      	movs	r3, #250	; 0xfa
 800325c:	009a      	lsls	r2, r3, #2
 800325e:	4bb0      	ldr	r3, [pc, #704]	; (8003520 <SendTxData+0x338>)
 8003260:	0011      	movs	r1, r2
 8003262:	0018      	movs	r0, r3
 8003264:	f001 fb2c 	bl	80048c0 <HAL_LPTIM_Encoder_Start_IT>
    		 */
  // MX_I2C1_Init();
 // HAL_I2C_GetState;// cntGetValue(&Defbuff);  // здесь будет сбор значения вскрытий// HTS221_Init(pObj);//HTS221_GetCapabilities(pObj, Capabilities);  //  HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
    //	  HAL_Delay(200);  //	UTIL_TIMER_Create(&ReadLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);  // UTIL_TIMER_SetPeriod(&ReadLedTimer, 5000);  	//UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
  	  bmp280_init_default_params(&bmp280.params);
 8003268:	4bae      	ldr	r3, [pc, #696]	; (8003524 <SendTxData+0x33c>)
 800326a:	0018      	movs	r0, r3
 800326c:	f01a f9b0 	bl	801d5d0 <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003270:	4bad      	ldr	r3, [pc, #692]	; (8003528 <SendTxData+0x340>)
 8003272:	2276      	movs	r2, #118	; 0x76
 8003274:	849a      	strh	r2, [r3, #36]	; 0x24
    	bmp280.i2c = &hi2c1;
 8003276:	4bac      	ldr	r3, [pc, #688]	; (8003528 <SendTxData+0x340>)
 8003278:	4aac      	ldr	r2, [pc, #688]	; (800352c <SendTxData+0x344>)
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
    	bmp280_init(&bmp280, &bmp280.params);
 800327c:	4aa9      	ldr	r2, [pc, #676]	; (8003524 <SendTxData+0x33c>)
 800327e:	4baa      	ldr	r3, [pc, #680]	; (8003528 <SendTxData+0x340>)
 8003280:	0011      	movs	r1, r2
 8003282:	0018      	movs	r0, r3
 8003284:	f01a fb38 	bl	801d8f8 <bmp280_init>
    	// HTS221_Init(&hts221);
    	 // HTS221_GetCapabilities(&hts221, temperature);
  // bmp280.i2c = &hi2c1;
  //  bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1); старое
    	// HAL_Delay(100);
    	 bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
 8003288:	4ba9      	ldr	r3, [pc, #676]	; (8003530 <SendTxData+0x348>)
 800328a:	4aaa      	ldr	r2, [pc, #680]	; (8003534 <SendTxData+0x34c>)
 800328c:	49aa      	ldr	r1, [pc, #680]	; (8003538 <SendTxData+0x350>)
 800328e:	48a6      	ldr	r0, [pc, #664]	; (8003528 <SendTxData+0x340>)
 8003290:	f01a fea0 	bl	801dfd4 <bmp280_read_float>
    	 bmp280_read_fixed(&bmp280, &temperaturei, &pressurei, &humidityi);
 8003294:	4ba9      	ldr	r3, [pc, #676]	; (800353c <SendTxData+0x354>)
 8003296:	4aaa      	ldr	r2, [pc, #680]	; (8003540 <SendTxData+0x358>)
 8003298:	49aa      	ldr	r1, [pc, #680]	; (8003544 <SendTxData+0x35c>)
 800329a:	48a3      	ldr	r0, [pc, #652]	; (8003528 <SendTxData+0x340>)
 800329c:	f01a fe2c 	bl	801def8 <bmp280_read_fixed>
    	  size = sprintf((char *)Datasens,
 80032a0:	4ba5      	ldr	r3, [pc, #660]	; (8003538 <SendTxData+0x350>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	1c18      	adds	r0, r3, #0
 80032a6:	f7fd fe4d 	bl	8000f44 <__aeabi_f2iz>
 80032aa:	0004      	movs	r4, r0
 80032ac:	4ba1      	ldr	r3, [pc, #644]	; (8003534 <SendTxData+0x34c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	1c18      	adds	r0, r3, #0
 80032b2:	f7fd fe47 	bl	8000f44 <__aeabi_f2iz>
 80032b6:	0005      	movs	r5, r0
 80032b8:	4b9d      	ldr	r3, [pc, #628]	; (8003530 <SendTxData+0x348>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	1c18      	adds	r0, r3, #0
 80032be:	f7fd fe41 	bl	8000f44 <__aeabi_f2iz>
 80032c2:	0003      	movs	r3, r0
 80032c4:	49a0      	ldr	r1, [pc, #640]	; (8003548 <SendTxData+0x360>)
 80032c6:	2640      	movs	r6, #64	; 0x40
 80032c8:	19b8      	adds	r0, r7, r6
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	002b      	movs	r3, r5
 80032ce:	0022      	movs	r2, r4
 80032d0:	f01a ff08 	bl	801e0e4 <siprintf>
 80032d4:	0002      	movs	r2, r0
 80032d6:	21ac      	movs	r1, #172	; 0xac
 80032d8:	0049      	lsls	r1, r1, #1
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	801a      	strh	r2, [r3, #0]
    				  					"%d:%d:%d\n", (int)temperature1,(int)pressure1,(int)humidity1);

//    				  HAL_UART_Transmit(&husart2, Data, size, 1000);
    				  HAL_UART_Transmit(&husart1, Datasens, size, 1000);
 80032de:	23fa      	movs	r3, #250	; 0xfa
 80032e0:	009c      	lsls	r4, r3, #2
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	19b9      	adds	r1, r7, r6
 80032e8:	4898      	ldr	r0, [pc, #608]	; (800354c <SendTxData+0x364>)
 80032ea:	0023      	movs	r3, r4
 80032ec:	f007 fd74 	bl	800add8 <HAL_UART_Transmit>
    				  			HAL_Delay(200);
 80032f0:	20c8      	movs	r0, #200	; 0xc8
 80032f2:	f001 ff86 	bl	8005202 <HAL_Delay>
    				  			APP_LOG(TS_OFF, VLEVEL_M, " Температура:%d | Влажность:%d\r\n",
 80032f6:	4a96      	ldr	r2, [pc, #600]	; (8003550 <SendTxData+0x368>)
 80032f8:	19bb      	adds	r3, r7, r6
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	19bb      	adds	r3, r7, r6
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	0013      	movs	r3, r2
 8003302:	2200      	movs	r2, #0
 8003304:	2100      	movs	r1, #0
 8003306:	2002      	movs	r0, #2
 8003308:	f018 fdfa 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
    				  					Datasens, Datasens);
    	 APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d\r\n",
 800330c:	4b91      	ldr	r3, [pc, #580]	; (8003554 <SendTxData+0x36c>)
 800330e:	2200      	movs	r2, #0
 8003310:	5e9b      	ldrsh	r3, [r3, r2]
 8003312:	0018      	movs	r0, r3
 8003314:	4b8b      	ldr	r3, [pc, #556]	; (8003544 <SendTxData+0x35c>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b88      	ldr	r3, [pc, #544]	; (800353c <SendTxData+0x354>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	498e      	ldr	r1, [pc, #568]	; (8003558 <SendTxData+0x370>)
 800331e:	2400      	movs	r4, #0
 8003320:	5f09      	ldrsh	r1, [r1, r4]
 8003322:	000c      	movs	r4, r1
 8003324:	498d      	ldr	r1, [pc, #564]	; (800355c <SendTxData+0x374>)
 8003326:	2500      	movs	r5, #0
 8003328:	5f49      	ldrsh	r1, [r1, r5]
 800332a:	000d      	movs	r5, r1
 800332c:	498c      	ldr	r1, [pc, #560]	; (8003560 <SendTxData+0x378>)
 800332e:	9504      	str	r5, [sp, #16]
 8003330:	9403      	str	r4, [sp, #12]
 8003332:	9302      	str	r3, [sp, #8]
 8003334:	9201      	str	r2, [sp, #4]
 8003336:	9000      	str	r0, [sp, #0]
 8003338:	000b      	movs	r3, r1
 800333a:	2200      	movs	r2, #0
 800333c:	2100      	movs	r1, #0
 800333e:	2002      	movs	r0, #2
 8003340:	f018 fdde 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
    		       		numberdev, temperaturei, humidityi, per, chargebattery);
    	 if(bmp280.dig_T1!=0)
 8003344:	4b78      	ldr	r3, [pc, #480]	; (8003528 <SendTxData+0x340>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d006      	beq.n	800335a <SendTxData+0x172>
    	//*/
    	{
//    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Temp, hum sensor Init ====\r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Датчик измерения активен ====\r\n");
 800334c:	4b85      	ldr	r3, [pc, #532]	; (8003564 <SendTxData+0x37c>)
 800334e:	2200      	movs	r2, #0
 8003350:	2100      	movs	r1, #0
 8003352:	2002      	movs	r0, #2
 8003354:	f018 fdd4 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
 8003358:	e005      	b.n	8003366 <SendTxData+0x17e>
    	} //*/
    	 else
    	 {

//    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Sensor initialization failed ====\r\n");
    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Ошибка инициализации датчика  ====\r\n");
 800335a:	4b83      	ldr	r3, [pc, #524]	; (8003568 <SendTxData+0x380>)
 800335c:	2200      	movs	r2, #0
 800335e:	2100      	movs	r1, #0
 8003360:	2002      	movs	r0, #2
 8003362:	f018 fdcd 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
    	 }

    	 if(temperature1>=1 && temperature1<=30 && pressure1>=1)
 8003366:	4b74      	ldr	r3, [pc, #464]	; (8003538 <SendTxData+0x350>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	21fe      	movs	r1, #254	; 0xfe
 800336c:	0589      	lsls	r1, r1, #22
 800336e:	1c18      	adds	r0, r3, #0
 8003370:	f7fd f8c0 	bl	80004f4 <__aeabi_fcmpge>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d017      	beq.n	80033a8 <SendTxData+0x1c0>
 8003378:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <SendTxData+0x350>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	497b      	ldr	r1, [pc, #492]	; (800356c <SendTxData+0x384>)
 800337e:	1c18      	adds	r0, r3, #0
 8003380:	f7fd f8a4 	bl	80004cc <__aeabi_fcmple>
 8003384:	1e03      	subs	r3, r0, #0
 8003386:	d00f      	beq.n	80033a8 <SendTxData+0x1c0>
 8003388:	4b6a      	ldr	r3, [pc, #424]	; (8003534 <SendTxData+0x34c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	21fe      	movs	r1, #254	; 0xfe
 800338e:	0589      	lsls	r1, r1, #22
 8003390:	1c18      	adds	r0, r3, #0
 8003392:	f7fd f8af 	bl	80004f4 <__aeabi_fcmpge>
 8003396:	1e03      	subs	r3, r0, #0
 8003398:	d006      	beq.n	80033a8 <SendTxData+0x1c0>
    	     	//*/
    	  {
//    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== All parameters normal ====\r\n");
    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Параметры окружающей среды в норме ====\r\n");
 800339a:	4b75      	ldr	r3, [pc, #468]	; (8003570 <SendTxData+0x388>)
 800339c:	2200      	movs	r2, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	2002      	movs	r0, #2
 80033a2:	f018 fdad 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
 80033a6:	e005      	b.n	80033b4 <SendTxData+0x1cc>
    	  } //*/
    	     	 else
    	   {
//    	     		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Accident ====\r\n");
    	       		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Отклонение от нормы ====\r\n");
 80033a8:	4b72      	ldr	r3, [pc, #456]	; (8003574 <SendTxData+0x38c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	2002      	movs	r0, #2
 80033b0:	f018 fda6 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
    	   }
    	 numberdev = 0x01;  // new 0b00010001
 80033b4:	4b67      	ldr	r3, [pc, #412]	; (8003554 <SendTxData+0x36c>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	801a      	strh	r2, [r3, #0]
    	 per = 0xA; // new
 80033ba:	4b67      	ldr	r3, [pc, #412]	; (8003558 <SendTxData+0x370>)
 80033bc:	220a      	movs	r2, #10
 80033be:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = (uint8_t)temperature1 >> 8 ;
  //  AppData.Buffer[i++] = (int)humidity1 >> 16;


    //AppData.Buffer[i++] = 0x00;
     AppData.Buffer[i++] = numberdev; // new номер устройства
 80033c0:	4b64      	ldr	r3, [pc, #400]	; (8003554 <SendTxData+0x36c>)
 80033c2:	2000      	movs	r0, #0
 80033c4:	5e18      	ldrsh	r0, [r3, r0]
 80033c6:	4b55      	ldr	r3, [pc, #340]	; (800351c <SendTxData+0x334>)
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	25b2      	movs	r5, #178	; 0xb2
 80033cc:	006d      	lsls	r5, r5, #1
 80033ce:	197b      	adds	r3, r7, r5
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1c59      	adds	r1, r3, #1
 80033d4:	197c      	adds	r4, r7, r5
 80033d6:	6021      	str	r1, [r4, #0]
 80033d8:	18d3      	adds	r3, r2, r3
 80033da:	b2c2      	uxtb	r2, r0
 80033dc:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = temperature1;
 80033de:	4b56      	ldr	r3, [pc, #344]	; (8003538 <SendTxData+0x350>)
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	4b4e      	ldr	r3, [pc, #312]	; (800351c <SendTxData+0x334>)
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	197b      	adds	r3, r7, r5
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	1c59      	adds	r1, r3, #1
 80033ec:	197c      	adds	r4, r7, r5
 80033ee:	6021      	str	r1, [r4, #0]
 80033f0:	18d4      	adds	r4, r2, r3
 80033f2:	f7fd f8f5 	bl	80005e0 <__aeabi_f2uiz>
 80033f6:	0003      	movs	r3, r0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	7023      	strb	r3, [r4, #0]
     AppData.Buffer[i++] = humidity1;
 80033fc:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <SendTxData+0x348>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <SendTxData+0x334>)
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	197b      	adds	r3, r7, r5
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	1c59      	adds	r1, r3, #1
 800340a:	197c      	adds	r4, r7, r5
 800340c:	6021      	str	r1, [r4, #0]
 800340e:	18d4      	adds	r4, r2, r3
 8003410:	f7fd f8e6 	bl	80005e0 <__aeabi_f2uiz>
 8003414:	0003      	movs	r3, r0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	7023      	strb	r3, [r4, #0]
     AppData.Buffer[i++] = per; // new период включения прибора
 800341a:	4b4f      	ldr	r3, [pc, #316]	; (8003558 <SendTxData+0x370>)
 800341c:	2000      	movs	r0, #0
 800341e:	5e18      	ldrsh	r0, [r3, r0]
 8003420:	4b3e      	ldr	r3, [pc, #248]	; (800351c <SendTxData+0x334>)
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	002c      	movs	r4, r5
 8003426:	193b      	adds	r3, r7, r4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1c59      	adds	r1, r3, #1
 800342c:	193d      	adds	r5, r7, r4
 800342e:	6029      	str	r1, [r5, #0]
 8003430:	18d3      	adds	r3, r2, r3
 8003432:	b2c2      	uxtb	r2, r0
 8003434:	701a      	strb	r2, [r3, #0]
     temperatureint = temperature1;
 8003436:	4b40      	ldr	r3, [pc, #256]	; (8003538 <SendTxData+0x350>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	1c18      	adds	r0, r3, #0
 800343c:	f7fd fd82 	bl	8000f44 <__aeabi_f2iz>
 8003440:	0003      	movs	r3, r0
 8003442:	b21a      	sxth	r2, r3
 8003444:	4b4c      	ldr	r3, [pc, #304]	; (8003578 <SendTxData+0x390>)
 8003446:	801a      	strh	r2, [r3, #0]
     humidityint = humidity1;
 8003448:	4b39      	ldr	r3, [pc, #228]	; (8003530 <SendTxData+0x348>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1c18      	adds	r0, r3, #0
 800344e:	f7fd fd79 	bl	8000f44 <__aeabi_f2iz>
 8003452:	0002      	movs	r2, r0
 8003454:	4b49      	ldr	r3, [pc, #292]	; (800357c <SendTxData+0x394>)
 8003456:	601a      	str	r2, [r3, #0]
      // AppData.Buffer[i++] = BAT_CR2032; // new заряд батареи, CR2032 старая батарейка, новая LS14500
  // SYS_GetBatteryLevel(); // new заряд батареи
     chargebattery = GetBatteryLevel(); // new заряд батареи
 8003458:	f001 fd42 	bl	8004ee0 <GetBatteryLevel>
 800345c:	0003      	movs	r3, r0
 800345e:	b21a      	sxth	r2, r3
 8003460:	4b3e      	ldr	r3, [pc, #248]	; (800355c <SendTxData+0x374>)
 8003462:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = batteryLevel; // new заряд батареи
     AppData.Buffer[i++] = chargebattery;
 8003464:	4b3d      	ldr	r3, [pc, #244]	; (800355c <SendTxData+0x374>)
 8003466:	2000      	movs	r0, #0
 8003468:	5e18      	ldrsh	r0, [r3, r0]
 800346a:	4b2c      	ldr	r3, [pc, #176]	; (800351c <SendTxData+0x334>)
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	193b      	adds	r3, r7, r4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1c59      	adds	r1, r3, #1
 8003474:	0026      	movs	r6, r4
 8003476:	193c      	adds	r4, r7, r4
 8003478:	6021      	str	r1, [r4, #0]
 800347a:	18d3      	adds	r3, r2, r3
 800347c:	b2c2      	uxtb	r2, r0
 800347e:	701a      	strb	r2, [r3, #0]
//     HAL_Delay(1000);
     APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
 8003480:	4b34      	ldr	r3, [pc, #208]	; (8003554 <SendTxData+0x36c>)
 8003482:	2200      	movs	r2, #0
 8003484:	5e9b      	ldrsh	r3, [r3, r2]
 8003486:	0019      	movs	r1, r3
 8003488:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <SendTxData+0x390>)
 800348a:	2200      	movs	r2, #0
 800348c:	5e9b      	ldrsh	r3, [r3, r2]
 800348e:	0018      	movs	r0, r3
 8003490:	4b3a      	ldr	r3, [pc, #232]	; (800357c <SendTxData+0x394>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a30      	ldr	r2, [pc, #192]	; (8003558 <SendTxData+0x370>)
 8003496:	2400      	movs	r4, #0
 8003498:	5f12      	ldrsh	r2, [r2, r4]
 800349a:	0014      	movs	r4, r2
 800349c:	4a2f      	ldr	r2, [pc, #188]	; (800355c <SendTxData+0x374>)
 800349e:	2500      	movs	r5, #0
 80034a0:	5f52      	ldrsh	r2, [r2, r5]
 80034a2:	0015      	movs	r5, r2
 80034a4:	4a36      	ldr	r2, [pc, #216]	; (8003580 <SendTxData+0x398>)
 80034a6:	9504      	str	r5, [sp, #16]
 80034a8:	9403      	str	r4, [sp, #12]
 80034aa:	9302      	str	r3, [sp, #8]
 80034ac:	9001      	str	r0, [sp, #4]
 80034ae:	9100      	str	r1, [sp, #0]
 80034b0:	0013      	movs	r3, r2
 80034b2:	2200      	movs	r2, #0
 80034b4:	2100      	movs	r1, #0
 80034b6:	2002      	movs	r0, #2
 80034b8:	f018 fd22 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
       		numberdev, temperatureint, humidityint, per, chargebattery);
//     APP_LOG(TS_OFF, VLEVEL_M, "Заряд батареи:%d\r\n", chargebattery);
     HAL_Delay(200);
 80034bc:	20c8      	movs	r0, #200	; 0xc8
 80034be:	f001 fea0 	bl	8005202 <HAL_Delay>
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);

	   }
*/
  AppData.BufferSize = i;
 80034c2:	19bb      	adds	r3, r7, r6
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	4b14      	ldr	r3, [pc, #80]	; (800351c <SendTxData+0x334>)
 80034ca:	705a      	strb	r2, [r3, #1]
  /*  #endif /* CAYENNE_LPP */

   if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 80034cc:	233c      	movs	r3, #60	; 0x3c
 80034ce:	18fa      	adds	r2, r7, r3
 80034d0:	4812      	ldr	r0, [pc, #72]	; (800351c <SendTxData+0x334>)
 80034d2:	2300      	movs	r3, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	f00a ff13 	bl	800e300 <LmHandlerSend>
 80034da:	1e03      	subs	r3, r0, #0
 80034dc:	d106      	bne.n	80034ec <SendTxData+0x304>
  {
	  APP_LOG(TS_OFF, VLEVEL_L, "Запрос на подключение отправлен\r\n");
 80034de:	4b29      	ldr	r3, [pc, #164]	; (8003584 <SendTxData+0x39c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	2100      	movs	r1, #0
 80034e4:	2001      	movs	r0, #1
 80034e6:	f018 fd0b 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_L, "Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
  }
  /* USER CODE BEGIN SendTxData_2 */
  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /* USER CODE END SendTxData_2 */
}
 80034ea:	e011      	b.n	8003510 <SendTxData+0x328>
  else if (nextTxIn > 0)
 80034ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00e      	beq.n	8003510 <SendTxData+0x328>
    APP_LOG(TS_OFF, VLEVEL_L, "Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
 80034f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f4:	22fa      	movs	r2, #250	; 0xfa
 80034f6:	0091      	lsls	r1, r2, #2
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7fc fe17 	bl	800012c <__udivsi3>
 80034fe:	0003      	movs	r3, r0
 8003500:	001a      	movs	r2, r3
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <SendTxData+0x3a0>)
 8003504:	9200      	str	r2, [sp, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	2100      	movs	r1, #0
 800350a:	2001      	movs	r0, #1
 800350c:	f018 fcf8 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b05d      	add	sp, #372	; 0x174
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003518:	fffffe96 	.word	0xfffffe96
 800351c:	20000000 	.word	0x20000000
 8003520:	20001468 	.word	0x20001468
 8003524:	20001588 	.word	0x20001588
 8003528:	2000155c 	.word	0x2000155c
 800352c:	200013b0 	.word	0x200013b0
 8003530:	200013fc 	.word	0x200013fc
 8003534:	20001464 	.word	0x20001464
 8003538:	200013ac 	.word	0x200013ac
 800353c:	20001500 	.word	0x20001500
 8003540:	2000145c 	.word	0x2000145c
 8003544:	200014c0 	.word	0x200014c0
 8003548:	0801eb48 	.word	0x0801eb48
 800354c:	20001594 	.word	0x20001594
 8003550:	0801eb54 	.word	0x0801eb54
 8003554:	20001590 	.word	0x20001590
 8003558:	20001352 	.word	0x20001352
 800355c:	200003ac 	.word	0x200003ac
 8003560:	0801eb8c 	.word	0x0801eb8c
 8003564:	0801ec28 	.word	0x0801ec28
 8003568:	0801ec68 	.word	0x0801ec68
 800356c:	41f00000 	.word	0x41f00000
 8003570:	0801ecb0 	.word	0x0801ecb0
 8003574:	0801ed00 	.word	0x0801ed00
 8003578:	200014bc 	.word	0x200014bc
 800357c:	20001460 	.word	0x20001460
 8003580:	0801ed34 	.word	0x0801ed34
 8003584:	0801edd0 	.word	0x0801edd0
 8003588:	0801ee10 	.word	0x0801ee10

0800358c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8003594:	2100      	movs	r1, #0
 8003596:	2002      	movs	r0, #2
 8003598:	f019 f97a 	bl	801c890 <UTIL_SEQ_SetTask>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <OnTxTimerEvent+0x20>)
 800359e:	0018      	movs	r0, r3
 80035a0:	f019 fb7a 	bl	801cc98 <UTIL_TIMER_Start>
 // UTIL_TIMER_Stop(&TxTimer); // попытка передать только одно сообщение
//HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	2000034c 	.word	0x2000034c

080035b0 <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 80035b8:	2003      	movs	r0, #3
 80035ba:	f002 fbd9 	bl	8005d70 <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b002      	add	sp, #8
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE) ;
 80035ce:	2002      	movs	r0, #2
 80035d0:	f002 fbce 	bl	8005d70 <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1) ;
 80035e4:	2001      	movs	r0, #1
 80035e6:	f002 fbdf 	bl	8005da8 <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b002      	add	sp, #8
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d047      	beq.n	8003692 <OnTxData+0x9e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d043      	beq.n	8003692 <OnTxData+0x9e>
  {
    LED_On(LED_RED2) ;
 800360a:	2003      	movs	r0, #3
 800360c:	f002 fb94 	bl	8005d38 <BSP_LED_On>
   // LED_Off(LED_RED2);

    UTIL_TIMER_Start(&TxLedTimer);
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <OnTxData+0xa8>)
 8003612:	0018      	movs	r0, r3
 8003614:	f019 fb40 	bl	801cc98 <UTIL_TIMER_Start>
    //HAL_LPTIM_Counter_Start_IT(&TxTimer,1000);
//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirmation =============\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n MCPS Подтверждение \r\n");
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <OnTxData+0xac>)
 800361a:	2200      	movs	r2, #0
 800361c:	2100      	movs	r1, #0
 800361e:	2002      	movs	r0, #2
 8003620:	f018 fc6e 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " Передача информации :%d", params->AppData.Buffer);
//    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d | Channel:%d", params->UplinkCounter,
//            params->AppData.Port, params->Datarate, params->TxPower,params->Channel);
    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Мощность:%d | Канал связи:%d\r\n",
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	7b12      	ldrb	r2, [r2, #12]
 800362c:	0011      	movs	r1, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	7d12      	ldrb	r2, [r2, #20]
 8003632:	b252      	sxtb	r2, r2
 8003634:	0010      	movs	r0, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	7d52      	ldrb	r2, [r2, #21]
 800363a:	0014      	movs	r4, r2
 800363c:	4a19      	ldr	r2, [pc, #100]	; (80036a4 <OnTxData+0xb0>)
 800363e:	9403      	str	r4, [sp, #12]
 8003640:	9002      	str	r0, [sp, #8]
 8003642:	9101      	str	r1, [sp, #4]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	0013      	movs	r3, r2
 8003648:	2200      	movs	r2, #0
 800364a:	2100      	movs	r1, #0
 800364c:	2002      	movs	r0, #2
 800364e:	f018 fc57 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
    		params->UplinkCounter, params->AppData.Port, params->TxPower, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <OnTxData+0xb4>)
 8003654:	2200      	movs	r2, #0
 8003656:	2100      	movs	r1, #0
 8003658:	2003      	movs	r0, #3
 800365a:	f018 fc51 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " | c:");
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	789b      	ldrb	r3, [r3, #2]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d10f      	bne.n	8003686 <OnTxData+0x92>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	78db      	ldrb	r3, [r3, #3]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <OnTxData+0x7e>
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <OnTxData+0xb8>)
 8003670:	e000      	b.n	8003674 <OnTxData+0x80>
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <OnTxData+0xbc>)
 8003674:	4a0f      	ldr	r2, [pc, #60]	; (80036b4 <OnTxData+0xc0>)
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	0013      	movs	r3, r2
 800367a:	2200      	movs	r2, #0
 800367c:	2100      	movs	r1, #0
 800367e:	2003      	movs	r0, #3
 8003680:	f018 fc3e 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 8003684:	e005      	b.n	8003692 <OnTxData+0x9e>
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n UNCONFIRMED\r\n");
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <OnTxData+0xc4>)
 8003688:	2200      	movs	r2, #0
 800368a:	2100      	movs	r1, #0
 800368c:	2003      	movs	r0, #3
 800368e:	f018 fc37 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	b003      	add	sp, #12
 8003698:	bd90      	pop	{r4, r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	20000364 	.word	0x20000364
 80036a0:	0801ee68 	.word	0x0801ee68
 80036a4:	0801ee90 	.word	0x0801ee90
 80036a8:	0801eef4 	.word	0x0801eef4
 80036ac:	0801ef04 	.word	0x0801ef04
 80036b0:	0801ef08 	.word	0x0801ef08
 80036b4:	0801ef10 	.word	0x0801ef10
 80036b8:	0801ef24 	.word	0x0801ef24

080036bc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d029      	beq.n	800371e <OnJoinRequest+0x62>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11e      	bne.n	8003712 <OnJoinRequest+0x56>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <OnJoinRequest+0x6c>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f019 fb56 	bl	801cd88 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 80036dc:	2001      	movs	r0, #1
 80036de:	f002 fb47 	bl	8005d70 <BSP_LED_Off>

//      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n      Устройство подключено \r\n  ");
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <OnJoinRequest+0x70>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	2100      	movs	r1, #0
 80036e8:	2002      	movs	r0, #2
 80036ea:	f018 fc09 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
      //if (joinParams->Mode == ACTIVATION_TYPE_ABP) //
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	789b      	ldrb	r3, [r3, #2]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d106      	bne.n	8003704 <OnJoinRequest+0x48>
      {
//        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
        APP_LOG(TS_OFF, VLEVEL_M, "  \r\n Активация по персонализации  \r\n");
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <OnJoinRequest+0x74>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	2100      	movs	r1, #0
 80036fc:	2002      	movs	r0, #2
 80036fe:	f018 fbff 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 8003702:	e00c      	b.n	800371e <OnJoinRequest+0x62>
        APP_LOG(TS_OFF, VLEVEL_M, "   Активация по воздуху  \r\n");
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <OnJoinRequest+0x78>)
 8003706:	2200      	movs	r2, #0
 8003708:	2100      	movs	r1, #0
 800370a:	2002      	movs	r0, #2
 800370c:	f018 fbf8 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
}
 8003710:	e005      	b.n	800371e <OnJoinRequest+0x62>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n  Подключение к базовой станции не удалось \r\n");
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <OnJoinRequest+0x7c>)
 8003714:	2200      	movs	r2, #0
 8003716:	2100      	movs	r1, #0
 8003718:	2002      	movs	r0, #2
 800371a:	f018 fbf1 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	20000394 	.word	0x20000394
 800372c:	0801ef38 	.word	0x0801ef38
 8003730:	0801ef70 	.word	0x0801ef70
 8003734:	0801efb0 	.word	0x0801efb0
 8003738:	0801efe0 	.word	0x0801efe0

0800373c <MX_LPTIM1_Init>:
  }
  */
/*

 */ static void MX_LPTIM1_Init(void) // new
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
	  hlptim1.Instance = LPTIM1;
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <MX_LPTIM1_Init+0x54>)
 8003742:	4a14      	ldr	r2, [pc, #80]	; (8003794 <MX_LPTIM1_Init+0x58>)
 8003744:	601a      	str	r2, [r3, #0]
	  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <MX_LPTIM1_Init+0x54>)
 8003748:	2200      	movs	r2, #0
 800374a:	605a      	str	r2, [r3, #4]
	  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800374c:	4b10      	ldr	r3, [pc, #64]	; (8003790 <MX_LPTIM1_Init+0x54>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
	  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <MX_LPTIM1_Init+0x54>)
 8003754:	2200      	movs	r2, #0
 8003756:	60da      	str	r2, [r3, #12]
	  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <MX_LPTIM1_Init+0x54>)
 800375a:	2200      	movs	r2, #0
 800375c:	611a      	str	r2, [r3, #16]
	  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <MX_LPTIM1_Init+0x54>)
 8003760:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <MX_LPTIM1_Init+0x5c>)
 8003762:	615a      	str	r2, [r3, #20]
	  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <MX_LPTIM1_Init+0x54>)
 8003766:	2200      	movs	r2, #0
 8003768:	621a      	str	r2, [r3, #32]
	  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <MX_LPTIM1_Init+0x54>)
 800376c:	2200      	movs	r2, #0
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
	  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <MX_LPTIM1_Init+0x54>)
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	0412      	lsls	r2, r2, #16
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <MX_LPTIM1_Init+0x54>)
 800377a:	0018      	movs	r0, r3
 800377c:	f001 f81e 	bl	80047bc <HAL_LPTIM_Init>
 8003780:	1e03      	subs	r3, r0, #0
 8003782:	d001      	beq.n	8003788 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8003784:	f000 faf4 	bl	8003d70 <Error_Handler>
  /*
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	20001468 	.word	0x20001468
 8003794:	40007c00 	.word	0x40007c00
 8003798:	0000ffff 	.word	0x0000ffff

0800379c <HAL_LPTIM_MspInit>:
  void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
  {
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	240c      	movs	r4, #12
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	0018      	movs	r0, r3
 80037aa:	2314      	movs	r3, #20
 80037ac:	001a      	movs	r2, r3
 80037ae:	2100      	movs	r1, #0
 80037b0:	f01a fc8f 	bl	801e0d2 <memset>
    if(hlptim->Instance==LPTIM1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_LPTIM_MspInit+0x8c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d130      	bne.n	8003820 <HAL_LPTIM_MspInit+0x84>
    {
    /* USER CODE BEGIN LPTIM1_MspInit 0 */

    /* USER CODE END LPTIM1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_LPTIM1_CLK_ENABLE();
 80037be:	4b1b      	ldr	r3, [pc, #108]	; (800382c <HAL_LPTIM_MspInit+0x90>)
 80037c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c2:	4b1a      	ldr	r3, [pc, #104]	; (800382c <HAL_LPTIM_MspInit+0x90>)
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	0609      	lsls	r1, r1, #24
 80037c8:	430a      	orrs	r2, r1
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38

      __HAL_RCC_GPIOB_CLK_ENABLE();
 80037cc:	4b17      	ldr	r3, [pc, #92]	; (800382c <HAL_LPTIM_MspInit+0x90>)
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	4b16      	ldr	r3, [pc, #88]	; (800382c <HAL_LPTIM_MspInit+0x90>)
 80037d2:	2102      	movs	r1, #2
 80037d4:	430a      	orrs	r2, r1
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <HAL_LPTIM_MspInit+0x90>)
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	2202      	movs	r2, #2
 80037de:	4013      	ands	r3, r2
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]
      /**LPTIM1 GPIO Configuration
      PB5     ------> LPTIM1_IN1
      PB7     ------> LPTIM1_IN2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80037e4:	0021      	movs	r1, r4
 80037e6:	187b      	adds	r3, r7, r1
 80037e8:	22a0      	movs	r2, #160	; 0xa0
 80037ea:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	2202      	movs	r2, #2
 80037f0:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	2200      	movs	r2, #0
 80037fc:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
 80037fe:	187b      	adds	r3, r7, r1
 8003800:	2202      	movs	r2, #2
 8003802:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003804:	187b      	adds	r3, r7, r1
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <HAL_LPTIM_MspInit+0x94>)
 8003808:	0019      	movs	r1, r3
 800380a:	0010      	movs	r0, r2
 800380c:	f004 f8a4 	bl	8007958 <HAL_GPIO_Init>

      /* LPTIM1 interrupt Init */
      HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003810:	2200      	movs	r2, #0
 8003812:	2100      	movs	r1, #0
 8003814:	200d      	movs	r0, #13
 8003816:	f003 fd73 	bl	8007300 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800381a:	200d      	movs	r0, #13
 800381c:	f003 fd85 	bl	800732a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM1_MspInit 1 */

    /* USER CODE END LPTIM1_MspInit 1 */
    }

  }
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b009      	add	sp, #36	; 0x24
 8003826:	bd90      	pop	{r4, r7, pc}
 8003828:	40007c00 	.word	0x40007c00
 800382c:	40021000 	.word	0x40021000
 8003830:	50000400 	.word	0x50000400

08003834 <OnMacProcessNotify>:
    }

  }

static void OnMacProcessNotify(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8003838:	2100      	movs	r1, #0
 800383a:	2001      	movs	r0, #1
 800383c:	f019 f828 	bl	801c890 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <LoraInfo_Init+0x50>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <LoraInfo_Init+0x50>)
 8003854:	2200      	movs	r2, #0
 8003856:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <LoraInfo_Init+0x50>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800385e:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <LoraInfo_Init+0x50>)
 8003860:	2200      	movs	r2, #0
 8003862:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <LoraInfo_Init+0x50>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	431a      	orrs	r2, r3
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <LoraInfo_Init+0x50>)
 800386e:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <LoraInfo_Init+0x50>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <LoraInfo_Init+0x3e>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <LoraInfo_Init+0x54>)
 800387a:	2200      	movs	r2, #0
 800387c:	2100      	movs	r1, #0
 800387e:	2000      	movs	r0, #0
 8003880:	f018 fb3e 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 8003884:	e7fe      	b.n	8003884 <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <LoraInfo_Init+0x50>)
 8003888:	2200      	movs	r2, #0
 800388a:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800388c:	4b02      	ldr	r3, [pc, #8]	; (8003898 <LoraInfo_Init+0x50>)
 800388e:	2203      	movs	r2, #3
 8003890:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200003b0 	.word	0x200003b0
 800389c:	0801f080 	.word	0x0801f080

080038a0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 80038a4:	4b01      	ldr	r3, [pc, #4]	; (80038ac <LoraInfo_GetPtr+0xc>)
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200003b0 	.word	0x200003b0

080038b0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 80038b4:	4b22      	ldr	r3, [pc, #136]	; (8003940 <MX_ADC_Init+0x90>)
 80038b6:	4a23      	ldr	r2, [pc, #140]	; (8003944 <MX_ADC_Init+0x94>)
 80038b8:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 80038ba:	4b21      	ldr	r3, [pc, #132]	; (8003940 <MX_ADC_Init+0x90>)
 80038bc:	2200      	movs	r2, #0
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <MX_ADC_Init+0x90>)
 80038c2:	2280      	movs	r2, #128	; 0x80
 80038c4:	0612      	lsls	r2, r2, #24
 80038c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <MX_ADC_Init+0x90>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 80038ce:	4b1c      	ldr	r3, [pc, #112]	; (8003940 <MX_ADC_Init+0x90>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <MX_ADC_Init+0x90>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 80038da:	4b19      	ldr	r3, [pc, #100]	; (8003940 <MX_ADC_Init+0x90>)
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80038e0:	4b17      	ldr	r3, [pc, #92]	; (8003940 <MX_ADC_Init+0x90>)
 80038e2:	2207      	movs	r2, #7
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <MX_ADC_Init+0x90>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80038ec:	4b14      	ldr	r3, [pc, #80]	; (8003940 <MX_ADC_Init+0x90>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <MX_ADC_Init+0x90>)
 80038f4:	2220      	movs	r2, #32
 80038f6:	2100      	movs	r1, #0
 80038f8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80038fa:	4b11      	ldr	r3, [pc, #68]	; (8003940 <MX_ADC_Init+0x90>)
 80038fc:	2221      	movs	r2, #33	; 0x21
 80038fe:	2100      	movs	r1, #0
 8003900:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <MX_ADC_Init+0x90>)
 8003904:	2200      	movs	r2, #0
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8003908:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <MX_ADC_Init+0x90>)
 800390a:	2204      	movs	r2, #4
 800390c:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <MX_ADC_Init+0x90>)
 8003910:	222c      	movs	r2, #44	; 0x2c
 8003912:	2100      	movs	r1, #0
 8003914:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <MX_ADC_Init+0x90>)
 8003918:	0018      	movs	r0, r3
 800391a:	f002 febf 	bl	800669c <HAL_ADC_Init>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d001      	beq.n	8003926 <MX_ADC_Init+0x76>
  {
    Error_Handler();
 8003922:	f000 fa25 	bl	8003d70 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <MX_ADC_Init+0x90>)
 8003928:	2100      	movs	r1, #0
 800392a:	0018      	movs	r0, r3
 800392c:	f003 fba8 	bl	8007080 <HAL_ADCEx_Calibration_Start>
 8003930:	1e03      	subs	r3, r0, #0
 8003932:	d001      	beq.n	8003938 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 8003934:	f000 fa1c 	bl	8003d70 <Error_Handler>
  }
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	20001400 	.word	0x20001400
 8003944:	40012400 	.word	0x40012400

08003948 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b089      	sub	sp, #36	; 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <HAL_ADC_MspInit+0x58>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d11e      	bne.n	8003998 <HAL_ADC_MspInit+0x50>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395a:	240c      	movs	r4, #12
 800395c:	193b      	adds	r3, r7, r4
 800395e:	0018      	movs	r0, r3
 8003960:	2314      	movs	r3, #20
 8003962:	001a      	movs	r2, r3
 8003964:	2100      	movs	r1, #0
 8003966:	f01a fbb4 	bl	801e0d2 <memset>

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <HAL_ADC_MspInit+0x5c>)
 800396c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396e:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <HAL_ADC_MspInit+0x5c>)
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	0089      	lsls	r1, r1, #2
 8003974:	430a      	orrs	r2, r1
 8003976:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4; //N
 8003978:	193b      	adds	r3, r7, r4
 800397a:	2210      	movs	r2, #16
 800397c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; //N
 800397e:	193b      	adds	r3, r7, r4
 8003980:	2203      	movs	r2, #3
 8003982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; //N
 8003984:	193b      	adds	r3, r7, r4
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //N
 800398a:	193a      	adds	r2, r7, r4
 800398c:	23a0      	movs	r3, #160	; 0xa0
 800398e:	05db      	lsls	r3, r3, #23
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f003 ffe0 	bl	8007958 <HAL_GPIO_Init>
    /* USER CODE END ADC_MspInit 1
     * */
  }
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b009      	add	sp, #36	; 0x24
 800399e:	bd90      	pop	{r4, r7, pc}
 80039a0:	40012400 	.word	0x40012400
 80039a4:	40021000 	.word	0x40021000

080039a8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <HAL_ADC_MspDeInit+0x4c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d118      	bne.n	80039ec <HAL_ADC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_ADC_MspDeInit+0x50>)
 80039bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039be:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <HAL_ADC_MspDeInit+0x50>)
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	0089      	lsls	r1, r1, #2
 80039c4:	430a      	orrs	r2, r1
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_ADC_MspDeInit+0x50>)
 80039ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_ADC_MspDeInit+0x50>)
 80039ce:	490b      	ldr	r1, [pc, #44]	; (80039fc <HAL_ADC_MspDeInit+0x54>)
 80039d0:	400a      	ands	r2, r1
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_ADC_MspDeInit+0x50>)
 80039d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_ADC_MspDeInit+0x50>)
 80039da:	4908      	ldr	r1, [pc, #32]	; (80039fc <HAL_ADC_MspDeInit+0x54>)
 80039dc:	400a      	ands	r2, r1
 80039de:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);//N
 80039e0:	23a0      	movs	r3, #160	; 0xa0
 80039e2:	05db      	lsls	r3, r3, #23
 80039e4:	2110      	movs	r1, #16
 80039e6:	0018      	movs	r0, r3
 80039e8:	f004 f934 	bl	8007c54 <HAL_GPIO_DeInit>
    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b002      	add	sp, #8
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40012400 	.word	0x40012400
 80039f8:	40021000 	.word	0x40021000
 80039fc:	fffffdff 	.word	0xfffffdff

08003a00 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 8003a04:	4b02      	ldr	r3, [pc, #8]	; (8003a10 <SYS_InitMeasurement+0x10>)
 8003a06:	4a03      	ldr	r2, [pc, #12]	; (8003a14 <SYS_InitMeasurement+0x14>)
 8003a08:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20001400 	.word	0x20001400
 8003a14:	40012400 	.word	0x40012400

08003a18 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8003a18:	b5b0      	push	{r4, r5, r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8003a1e:	250e      	movs	r5, #14
 8003a20:	197b      	adds	r3, r7, r5
 8003a22:	2200      	movs	r2, #0
 8003a24:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8003a2a:	1dbc      	adds	r4, r7, #6
 8003a2c:	f000 f83c 	bl	8003aa8 <SYS_GetBatteryLevel>
 8003a30:	0003      	movs	r3, r0
 8003a32:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8003a34:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <SYS_GetTemperatureLevel+0x80>)
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 f864 	bl	8003b04 <ADC_ReadChannels>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8003a40:	1dbb      	adds	r3, r7, #6
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	4353      	muls	r3, r2
 8003a48:	4914      	ldr	r1, [pc, #80]	; (8003a9c <SYS_GetTemperatureLevel+0x84>)
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7fc fb6e 	bl	800012c <__udivsi3>
 8003a50:	0003      	movs	r3, r0
 8003a52:	001a      	movs	r2, r3
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <SYS_GetTemperatureLevel+0x88>)
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	1ad2      	subs	r2, r2, r3
 8003a5a:	0013      	movs	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <SYS_GetTemperatureLevel+0x8c>)
 8003a66:	8812      	ldrh	r2, [r2, #0]
 8003a68:	0011      	movs	r1, r2
 8003a6a:	4a0d      	ldr	r2, [pc, #52]	; (8003aa0 <SYS_GetTemperatureLevel+0x88>)
 8003a6c:	8812      	ldrh	r2, [r2, #0]
 8003a6e:	1a8a      	subs	r2, r1, r2
 8003a70:	0011      	movs	r1, r2
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7fc fbe4 	bl	8000240 <__divsi3>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	22f0      	movs	r2, #240	; 0xf0
 8003a7e:	0152      	lsls	r2, r2, #5
 8003a80:	4694      	mov	ip, r2
 8003a82:	4463      	add	r3, ip
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	197b      	adds	r3, r7, r5
 8003a88:	801a      	strh	r2, [r3, #0]

//  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);

  return (int16_t) temperatureDegreeC;
 8003a8a:	197b      	adds	r3, r7, r5
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bdb0      	pop	{r4, r5, r7, pc}
 8003a98:	48040000 	.word	0x48040000
 8003a9c:	00000bb8 	.word	0x00000bb8
 8003aa0:	1ff8007a 	.word	0x1ff8007a
 8003aa4:	1ff8007e 	.word	0x1ff8007e

08003aa8 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8003aae:	1dbb      	adds	r3, r7, #6
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <SYS_GetBatteryLevel+0x50>)
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 f822 	bl	8003b04 <ADC_ReadChannels>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 8003aca:	1dbb      	adds	r3, r7, #6
 8003acc:	2200      	movs	r2, #0
 8003ace:	801a      	strh	r2, [r3, #0]
 8003ad0:	e00c      	b.n	8003aec <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <SYS_GetBatteryLevel+0x54>)
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <SYS_GetBatteryLevel+0x58>)
 8003ada:	4353      	muls	r3, r2
 8003adc:	6839      	ldr	r1, [r7, #0]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f7fc fb24 	bl	800012c <__udivsi3>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	1dbb      	adds	r3, r7, #6
 8003aea:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 8003aec:	1dbb      	adds	r3, r7, #6
 8003aee:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b002      	add	sp, #8
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	44020000 	.word	0x44020000
 8003afc:	1ff80078 	.word	0x1ff80078
 8003b00:	00000bb8 	.word	0x00000bb8

08003b04 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b10:	230c      	movs	r3, #12
 8003b12:	18fb      	adds	r3, r7, r3
 8003b14:	0018      	movs	r0, r3
 8003b16:	2308      	movs	r3, #8
 8003b18:	001a      	movs	r2, r3
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f01a fad9 	bl	801e0d2 <memset>

  MX_ADC_Init();
 8003b20:	f7ff fec6 	bl	80038b0 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	4b2c      	ldr	r3, [pc, #176]	; (8003bd8 <ADC_ReadChannels+0xd4>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2208      	movs	r2, #8
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d1f9      	bne.n	8003b26 <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <ADC_ReadChannels+0xd8>)
 8003b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b36:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <ADC_ReadChannels+0xd8>)
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	0089      	lsls	r1, r1, #2
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	635a      	str	r2, [r3, #52]	; 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <ADC_ReadChannels+0xdc>)
 8003b42:	2100      	movs	r1, #0
 8003b44:	0018      	movs	r0, r3
 8003b46:	f003 fa9b 	bl	8007080 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8003b4a:	240c      	movs	r4, #12
 8003b4c:	193b      	adds	r3, r7, r4
 8003b4e:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <ADC_ReadChannels+0xe0>)
 8003b50:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8003b52:	193b      	adds	r3, r7, r4
 8003b54:	4a24      	ldr	r2, [pc, #144]	; (8003be8 <ADC_ReadChannels+0xe4>)
 8003b56:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003b58:	193a      	adds	r2, r7, r4
 8003b5a:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <ADC_ReadChannels+0xdc>)
 8003b5c:	0011      	movs	r1, r2
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f003 f8e2 	bl	8006d28 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8003b64:	0021      	movs	r1, r4
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	2280      	movs	r2, #128	; 0x80
 8003b70:	0152      	lsls	r2, r2, #5
 8003b72:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b74:	187a      	adds	r2, r7, r1
 8003b76:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <ADC_ReadChannels+0xdc>)
 8003b78:	0011      	movs	r1, r2
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f003 f8d4 	bl	8006d28 <HAL_ADC_ConfigChannel>
 8003b80:	1e03      	subs	r3, r0, #0
 8003b82:	d001      	beq.n	8003b88 <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 8003b84:	f000 f8f4 	bl	8003d70 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8003b88:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <ADC_ReadChannels+0xdc>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f002 ff96 	bl	8006abc <HAL_ADC_Start>
 8003b90:	1e03      	subs	r3, r0, #0
 8003b92:	d001      	beq.n	8003b98 <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 8003b94:	f000 f8ec 	bl	8003d70 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003b98:	2301      	movs	r3, #1
 8003b9a:	425a      	negs	r2, r3
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <ADC_ReadChannels+0xdc>)
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f003 f81f 	bl	8006be4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <ADC_ReadChannels+0xdc>)
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f002 ffdb 	bl	8006b64 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8003bae:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <ADC_ReadChannels+0xdc>)
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f003 f8ad 	bl	8006d10 <HAL_ADC_GetValue>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <ADC_ReadChannels+0xdc>)
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f002 fee1 	bl	8006984 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <ADC_ReadChannels+0xd8>)
 8003bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <ADC_ReadChannels+0xd8>)
 8003bc8:	4908      	ldr	r1, [pc, #32]	; (8003bec <ADC_ReadChannels+0xe8>)
 8003bca:	400a      	ands	r2, r1
 8003bcc:	635a      	str	r2, [r3, #52]	; 0x34

  return ADCxConvertedValues;
 8003bce:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b007      	add	sp, #28
 8003bd6:	bd90      	pop	{r4, r7, pc}
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	20001400 	.word	0x20001400
 8003be4:	0007ffff 	.word	0x0007ffff
 8003be8:	00001001 	.word	0x00001001
 8003bec:	fffffdff 	.word	0xfffffdff

08003bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <MX_DMA_Init+0x38>)
 8003bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <MX_DMA_Init+0x38>)
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <MX_DMA_Init+0x38>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	2201      	movs	r2, #1
 8003c08:	4013      	ands	r3, r2
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	200b      	movs	r0, #11
 8003c14:	f003 fb74 	bl	8007300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003c18:	200b      	movs	r0, #11
 8003c1a:	f003 fb86 	bl	800732a <HAL_NVIC_EnableIRQ>

}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b002      	add	sp, #8
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	40021000 	.word	0x40021000

08003c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c30:	f002 fcba 	bl	80065a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c34:	f000 f806 	bl	8003c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8003c38:	f7ff f978 	bl	8002f2c <MX_LoRaWAN_Init>
    /* USER CODE END WHILE */
	  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);

    MX_LoRaWAN_Process();
 8003c3c:	f7ff f97f 	bl	8002f3e <MX_LoRaWAN_Process>
 8003c40:	e7fc      	b.n	8003c3c <main+0x10>
	...

08003c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) //NEW С МЭЙНА
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b09d      	sub	sp, #116	; 0x74
 8003c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c4a:	2438      	movs	r4, #56	; 0x38
 8003c4c:	193b      	adds	r3, r7, r4
 8003c4e:	0018      	movs	r0, r3
 8003c50:	2338      	movs	r3, #56	; 0x38
 8003c52:	001a      	movs	r2, r3
 8003c54:	2100      	movs	r1, #0
 8003c56:	f01a fa3c 	bl	801e0d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c5a:	2324      	movs	r3, #36	; 0x24
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	0018      	movs	r0, r3
 8003c60:	2314      	movs	r3, #20
 8003c62:	001a      	movs	r2, r3
 8003c64:	2100      	movs	r1, #0
 8003c66:	f01a fa34 	bl	801e0d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c6a:	003b      	movs	r3, r7
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	2324      	movs	r3, #36	; 0x24
 8003c70:	001a      	movs	r2, r3
 8003c72:	2100      	movs	r1, #0
 8003c74:	f01a fa2d 	bl	801e0d2 <memset>
  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003c78:	0021      	movs	r1, r4
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	2200      	movs	r2, #0
 8003c84:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003c86:	187b      	adds	r3, r7, r1
 8003c88:	2201      	movs	r2, #1
 8003c8a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;// n
 8003c8c:	187b      	adds	r3, r7, r1
 8003c8e:	2201      	movs	r2, #1
 8003c90:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c92:	187b      	adds	r3, r7, r1
 8003c94:	2210      	movs	r2, #16
 8003c96:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8003c9e:	187b      	adds	r3, r7, r1
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	0312      	lsls	r2, r2, #12
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003cac:	187b      	adds	r3, r7, r1
 8003cae:	2280      	movs	r2, #128	; 0x80
 8003cb0:	0412      	lsls	r2, r2, #16
 8003cb2:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f004 ffc4 	bl	8008c44 <HAL_RCC_OscConfig>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d001      	beq.n	8003cc4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003cc0:	f000 f856 	bl	8003d70 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
__HAL_RCC_PWR_CLK_ENABLE();
 8003cc4:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <SystemClock_Config+0x120>)
 8003cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc8:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <SystemClock_Config+0x120>)
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	0549      	lsls	r1, r1, #21
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd2:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <SystemClock_Config+0x124>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a25      	ldr	r2, [pc, #148]	; (8003d6c <SystemClock_Config+0x128>)
 8003cd8:	401a      	ands	r2, r3
 8003cda:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <SystemClock_Config+0x124>)
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	0109      	lsls	r1, r1, #4
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
 while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <SystemClock_Config+0x124>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2210      	movs	r2, #16
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d0f9      	beq.n	8003ce6 <SystemClock_Config+0xa2>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8003cf2:	2124      	movs	r1, #36	; 0x24
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	220f      	movs	r2, #15
 8003cf8:	601a      	str	r2, [r3, #0]
		 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2101      	movs	r1, #1
 8003d16:	0018      	movs	r0, r3
 8003d18:	f005 fb68 	bl	80093ec <HAL_RCC_ClockConfig>
 8003d1c:	1e03      	subs	r3, r0, #0
 8003d1e:	d001      	beq.n	8003d24 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003d20:	f000 f826 	bl	8003d70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003d24:	003b      	movs	r3, r7
 8003d26:	22ab      	movs	r2, #171	; 0xab
 8003d28:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d2a:	003b      	movs	r3, r7
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d30:	003b      	movs	r3, r7
 8003d32:	2200      	movs	r2, #0
 8003d34:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003d36:	003b      	movs	r3, r7
 8003d38:	2200      	movs	r2, #0
 8003d3a:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003d3c:	003b      	movs	r3, r7
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	0292      	lsls	r2, r2, #10
 8003d42:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8003d44:	003b      	movs	r3, r7
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d4a:	003b      	movs	r3, r7
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f005 fd71 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d001      	beq.n	8003d5a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8003d56:	f000 f80b 	bl	8003d70 <Error_Handler>
  }
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b01d      	add	sp, #116	; 0x74
 8003d60:	bd90      	pop	{r4, r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	ffffe7ff 	.word	0xffffe7ff

08003d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8003d74:	e7fe      	b.n	8003d74 <Error_Handler+0x4>
	...

08003d78 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b090      	sub	sp, #64	; 0x40
 8003d7c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003d7e:	232c      	movs	r3, #44	; 0x2c
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	0018      	movs	r0, r3
 8003d84:	2314      	movs	r3, #20
 8003d86:	001a      	movs	r2, r3
 8003d88:	2100      	movs	r1, #0
 8003d8a:	f01a f9a2 	bl	801e0d2 <memset>
  RTC_DateTypeDef sDate = {0};
 8003d8e:	2328      	movs	r3, #40	; 0x28
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003d96:	003b      	movs	r3, r7
 8003d98:	0018      	movs	r0, r3
 8003d9a:	2328      	movs	r3, #40	; 0x28
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	2100      	movs	r1, #0
 8003da0:	f01a f997 	bl	801e0d2 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003da4:	4b41      	ldr	r3, [pc, #260]	; (8003eac <MX_RTC_Init+0x134>)
 8003da6:	4a42      	ldr	r2, [pc, #264]	; (8003eb0 <MX_RTC_Init+0x138>)
 8003da8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003daa:	4b40      	ldr	r3, [pc, #256]	; (8003eac <MX_RTC_Init+0x134>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8003db0:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <MX_RTC_Init+0x134>)
 8003db2:	221f      	movs	r2, #31
 8003db4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <MX_RTC_Init+0x134>)
 8003db8:	4a3e      	ldr	r2, [pc, #248]	; (8003eb4 <MX_RTC_Init+0x13c>)
 8003dba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003dbc:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <MX_RTC_Init+0x134>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003dc2:	4b3a      	ldr	r3, [pc, #232]	; (8003eac <MX_RTC_Init+0x134>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003dc8:	4b38      	ldr	r3, [pc, #224]	; (8003eac <MX_RTC_Init+0x134>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003dce:	4b37      	ldr	r3, [pc, #220]	; (8003eac <MX_RTC_Init+0x134>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003dd4:	4b35      	ldr	r3, [pc, #212]	; (8003eac <MX_RTC_Init+0x134>)
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f005 fe82 	bl	8009ae0 <HAL_RTC_Init>
 8003ddc:	1e03      	subs	r3, r0, #0
 8003dde:	d001      	beq.n	8003de4 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003de0:	f7ff ffc6 	bl	8003d70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003dec:	187b      	adds	r3, r7, r1
 8003dee:	2200      	movs	r2, #0
 8003df0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003df2:	187b      	adds	r3, r7, r1
 8003df4:	2200      	movs	r2, #0
 8003df6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003df8:	187b      	adds	r3, r7, r1
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003dfe:	187b      	adds	r3, r7, r1
 8003e00:	2200      	movs	r2, #0
 8003e02:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003e04:	1879      	adds	r1, r7, r1
 8003e06:	4b29      	ldr	r3, [pc, #164]	; (8003eac <MX_RTC_Init+0x134>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f005 ff06 	bl	8009c1c <HAL_RTC_SetTime>
 8003e10:	1e03      	subs	r3, r0, #0
 8003e12:	d001      	beq.n	8003e18 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003e14:	f7ff ffac 	bl	8003d70 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003e18:	2128      	movs	r1, #40	; 0x28
 8003e1a:	187b      	adds	r3, r7, r1
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	2201      	movs	r2, #1
 8003e24:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2201      	movs	r2, #1
 8003e2a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	2200      	movs	r2, #0
 8003e30:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003e32:	1879      	adds	r1, r7, r1
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <MX_RTC_Init+0x134>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f006 f80f 	bl	8009e5c <HAL_RTC_SetDate>
 8003e3e:	1e03      	subs	r3, r0, #0
 8003e40:	d001      	beq.n	8003e46 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003e42:	f7ff ff95 	bl	8003d70 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003e46:	003b      	movs	r3, r7
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003e4c:	003b      	movs	r3, r7
 8003e4e:	2200      	movs	r2, #0
 8003e50:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003e52:	003b      	movs	r3, r7
 8003e54:	2200      	movs	r2, #0
 8003e56:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003e58:	003b      	movs	r3, r7
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e5e:	003b      	movs	r3, r7
 8003e60:	2200      	movs	r2, #0
 8003e62:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e64:	003b      	movs	r3, r7
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003e6a:	003b      	movs	r3, r7
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003e70:	003b      	movs	r3, r7
 8003e72:	22a0      	movs	r2, #160	; 0xa0
 8003e74:	0512      	lsls	r2, r2, #20
 8003e76:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003e78:	003b      	movs	r3, r7
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 8003e7e:	003b      	movs	r3, r7
 8003e80:	2220      	movs	r2, #32
 8003e82:	211e      	movs	r1, #30
 8003e84:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003e86:	003b      	movs	r3, r7
 8003e88:	2280      	movs	r2, #128	; 0x80
 8003e8a:	0052      	lsls	r2, r2, #1
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003e8e:	0039      	movs	r1, r7
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <MX_RTC_Init+0x134>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	0018      	movs	r0, r3
 8003e96:	f006 f8dd 	bl	800a054 <HAL_RTC_SetAlarm_IT>
 8003e9a:	1e03      	subs	r3, r0, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003e9e:	f7ff ff67 	bl	8003d70 <Error_Handler>
  }

}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b010      	add	sp, #64	; 0x40
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	20001498 	.word	0x20001498
 8003eb0:	40002800 	.word	0x40002800
 8003eb4:	000003ff 	.word	0x000003ff

08003eb8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b091      	sub	sp, #68	; 0x44
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ec0:	2408      	movs	r4, #8
 8003ec2:	193b      	adds	r3, r7, r4
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	2338      	movs	r3, #56	; 0x38
 8003ec8:	001a      	movs	r2, r3
 8003eca:	2100      	movs	r1, #0
 8003ecc:	f01a f901 	bl	801e0d2 <memset>
  if (rtcHandle->Instance == RTC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <HAL_RTC_MspInit+0x78>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d126      	bne.n	8003f28 <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003eda:	193b      	adds	r3, r7, r4
 8003edc:	2204      	movs	r2, #4
 8003ede:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; // SWAP OFF НО ТОЛКУ ТО? Спасёт ли это при моей проблеме
 8003ee0:	193b      	adds	r3, r7, r4
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	0052      	lsls	r2, r2, #1
 8003ee6:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;// SWAP ON
 8003ee8:	193b      	adds	r3, r7, r4
 8003eea:	2200      	movs	r2, #0
 8003eec:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8003eee:	193b      	adds	r3, r7, r4
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ef4:	193b      	adds	r3, r7, r4
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003efa:	193b      	adds	r3, r7, r4
 8003efc:	0018      	movs	r0, r3
 8003efe:	f004 fea1 	bl	8008c44 <HAL_RCC_OscConfig>
 8003f02:	1e03      	subs	r3, r0, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8003f06:	f7ff ff33 	bl	8003d70 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <HAL_RTC_MspInit+0x7c>)
 8003f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RTC_MspInit+0x7c>)
 8003f10:	2180      	movs	r1, #128	; 0x80
 8003f12:	02c9      	lsls	r1, r1, #11
 8003f14:	430a      	orrs	r2, r1
 8003f16:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	2002      	movs	r0, #2
 8003f1e:	f003 f9ef 	bl	8007300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn); // вот это отрубать еси шо
 8003f22:	2002      	movs	r0, #2
 8003f24:	f003 fa01 	bl	800732a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b011      	add	sp, #68	; 0x44
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	40002800 	.word	0x40002800
 8003f34:	40021000 	.word	0x40021000

08003f38 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	0c1b      	lsrs	r3, r3, #16
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <RTC_IF_Init+0x60>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	4053      	eors	r3, r2
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01f      	beq.n	8003fa4 <RTC_IF_Init+0x54>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f64:	1d3b      	adds	r3, r7, #4
 8003f66:	2220      	movs	r2, #32
 8003f68:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	0252      	lsls	r2, r2, #9
 8003f70:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f72:	1d3b      	adds	r3, r7, #4
 8003f74:	0018      	movs	r0, r3
 8003f76:	f005 fc5d 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 8003f7a:	1e03      	subs	r3, r0, #0
 8003f7c:	d000      	beq.n	8003f80 <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 8003f7e:	e7fe      	b.n	8003f7e <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 8003f80:	f7ff fefa 	bl	8003d78 <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	005a      	lsls	r2, r3, #1
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <RTC_IF_Init+0x64>)
 8003f8a:	0011      	movs	r1, r2
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f006 f9ad 	bl	800a2ec <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003f92:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <RTC_IF_Init+0x64>)
 8003f94:	0018      	movs	r0, r3
 8003f96:	f006 fb57 	bl	800a648 <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8003f9a:	f000 f859 	bl	8004050 <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 8003f9e:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <RTC_IF_Init+0x60>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b00a      	add	sp, #40	; 0x28
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	200003c0 	.word	0x200003c0
 8003fb4:	20001498 	.word	0x20001498

08003fb8 <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003fc0:	4b14      	ldr	r3, [pc, #80]	; (8004014 <RTC_IF_StartTimer+0x5c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	5e9b      	ldrsh	r3, [r3, r2]
 8003fc6:	3303      	adds	r3, #3
 8003fc8:	001c      	movs	r4, r3
 8003fca:	f000 f861 	bl	8004090 <RTC_IF_GetTimerElapsedTime>
 8003fce:	0002      	movs	r2, r0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	429c      	cmp	r4, r3
 8003fd6:	d204      	bcs.n	8003fe2 <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003fd8:	2100      	movs	r1, #0
 8003fda:	2002      	movs	r0, #2
 8003fdc:	f018 fa48 	bl	801c470 <UTIL_LPM_SetStopMode>
 8003fe0:	e003      	b.n	8003fea <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	2002      	movs	r0, #2
 8003fe6:	f018 fa43 	bl	801c470 <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8003fea:	f018 faa1 	bl	801c530 <UTIL_LPM_GetMode>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d106      	bne.n	8004002 <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003ff4:	4b07      	ldr	r3, [pc, #28]	; (8004014 <RTC_IF_StartTimer+0x5c>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	5e9b      	ldrsh	r3, [r3, r2]
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	0018      	movs	r0, r3
 8004006:	f000 f959 	bl	80042bc <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b003      	add	sp, #12
 8004012:	bd90      	pop	{r4, r7, pc}
 8004014:	200003c2 	.word	0x200003c2

08004018 <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <RTC_IF_StopTimer+0x30>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	22ff      	movs	r2, #255	; 0xff
 8004024:	401a      	ands	r2, r3
 8004026:	4b08      	ldr	r3, [pc, #32]	; (8004048 <RTC_IF_StopTimer+0x30>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4908      	ldr	r1, [pc, #32]	; (800404c <RTC_IF_StopTimer+0x34>)
 800402c:	430a      	orrs	r2, r1
 800402e:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	005a      	lsls	r2, r3, #1
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <RTC_IF_StopTimer+0x30>)
 8004036:	0011      	movs	r1, r2
 8004038:	0018      	movs	r0, r3
 800403a:	f006 f957 	bl	800a2ec <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	0018      	movs	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	20001498 	.word	0x20001498
 800404c:	fffffe7f 	.word	0xfffffe7f

08004050 <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8004054:	4a06      	ldr	r2, [pc, #24]	; (8004070 <RTC_IF_SetTimerContext+0x20>)
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <RTC_IF_SetTimerContext+0x24>)
 8004058:	0011      	movs	r1, r2
 800405a:	0018      	movs	r0, r3
 800405c:	f000 fa94 	bl	8004588 <RTC_GetCalendarValue>
 8004060:	0002      	movs	r2, r0
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <RTC_IF_SetTimerContext+0x28>)
 8004064:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8004066:	4b04      	ldr	r3, [pc, #16]	; (8004078 <RTC_IF_SetTimerContext+0x28>)
 8004068:	681b      	ldr	r3, [r3, #0]
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	200003f0 	.word	0x200003f0
 8004074:	20000404 	.word	0x20000404
 8004078:	200003ec 	.word	0x200003ec

0800407c <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8004080:	4b02      	ldr	r3, [pc, #8]	; (800408c <RTC_IF_GetTimerContext+0x10>)
 8004082:	681b      	ldr	r3, [r3, #0]
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	200003ec 	.word	0x200003ec

08004090 <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8004096:	2308      	movs	r3, #8
 8004098:	18fa      	adds	r2, r7, r3
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	0011      	movs	r1, r2
 800409e:	0018      	movs	r0, r3
 80040a0:	f000 fa72 	bl	8004588 <RTC_GetCalendarValue>
 80040a4:	0003      	movs	r3, r0
 80040a6:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <RTC_IF_GetTimerElapsedTime+0x28>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	1ad3      	subs	r3, r2, r3
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b008      	add	sp, #32
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200003ec 	.word	0x200003ec

080040bc <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <RTC_IF_GetTimerValue+0x30>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80040ce:	2308      	movs	r3, #8
 80040d0:	18fa      	adds	r2, r7, r3
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	0011      	movs	r1, r2
 80040d6:	0018      	movs	r0, r3
 80040d8:	f000 fa56 	bl	8004588 <RTC_GetCalendarValue>
 80040dc:	0003      	movs	r3, r0
 80040de:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 80040e0:	69fb      	ldr	r3, [r7, #28]
}
 80040e2:	0018      	movs	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b008      	add	sp, #32
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	200003c0 	.word	0x200003c0

080040f0 <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 80040f4:	2303      	movs	r3, #3
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80040fc:	b5b0      	push	{r4, r5, r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	000a      	movs	r2, r1
 8004108:	2100      	movs	r1, #0
 800410a:	000b      	movs	r3, r1
 800410c:	0e51      	lsrs	r1, r2, #25
 800410e:	01dd      	lsls	r5, r3, #7
 8004110:	430d      	orrs	r5, r1
 8004112:	01d4      	lsls	r4, r2, #7
 8004114:	227d      	movs	r2, #125	; 0x7d
 8004116:	2300      	movs	r3, #0
 8004118:	0020      	movs	r0, r4
 800411a:	0029      	movs	r1, r5
 800411c:	f7fc fa18 	bl	8000550 <__aeabi_uldivmod>
 8004120:	0002      	movs	r2, r0
 8004122:	000b      	movs	r3, r1
 8004124:	0013      	movs	r3, r2
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b002      	add	sp, #8
 800412c:	bdb0      	pop	{r4, r5, r7, pc}

0800412e <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 800412e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004130:	b089      	sub	sp, #36	; 0x24
 8004132:	af00      	add	r7, sp, #0
 8004134:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	0ed1      	lsrs	r1, r2, #27
 8004144:	0158      	lsls	r0, r3, #5
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	4308      	orrs	r0, r1
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	0153      	lsls	r3, r2, #5
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	68fc      	ldr	r4, [r7, #12]
 8004156:	6939      	ldr	r1, [r7, #16]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	1a5b      	subs	r3, r3, r1
 800415c:	4194      	sbcs	r4, r2
 800415e:	001a      	movs	r2, r3
 8004160:	0023      	movs	r3, r4
 8004162:	0f91      	lsrs	r1, r2, #30
 8004164:	0098      	lsls	r0, r3, #2
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4308      	orrs	r0, r1
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	0093      	lsls	r3, r2, #2
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	6838      	ldr	r0, [r7, #0]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	1812      	adds	r2, r2, r0
 800417c:	414b      	adcs	r3, r1
 800417e:	0659      	lsls	r1, r3, #25
 8004180:	09d0      	lsrs	r0, r2, #7
 8004182:	0005      	movs	r5, r0
 8004184:	0028      	movs	r0, r5
 8004186:	4308      	orrs	r0, r1
 8004188:	0005      	movs	r5, r0
 800418a:	09db      	lsrs	r3, r3, #7
 800418c:	001e      	movs	r6, r3
 800418e:	002b      	movs	r3, r5
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b009      	add	sp, #36	; 0x24
 8004196:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004198 <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7ff ffa6 	bl	80040fc <RTC_IF_Convert_ms2Tick>
 80041b0:	0003      	movs	r3, r0
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 80041b4:	f7ff ff82 	bl	80040bc <RTC_IF_GetTimerValue>
 80041b8:	0003      	movs	r3, r0
 80041ba:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 80041bc:	e000      	b.n	80041c0 <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 80041be:	46c0      	nop			; (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 80041c0:	f7ff ff7c 	bl	80040bc <RTC_IF_GetTimerValue>
 80041c4:	0002      	movs	r2, r0
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d8f6      	bhi.n	80041be <RTC_IF_DelayMs+0x26>
  }
}
 80041d0:	46c0      	nop			; (mov r8, r8)
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b004      	add	sp, #16
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 80041e2:	f018 fe7d 	bl	801cee0 <UTIL_TIMER_IRQ_Handler>
}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b002      	add	sp, #8
 80041ec:	bd80      	pop	{r7, pc}

080041ee <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 80041ee:	b5b0      	push	{r4, r5, r7, lr}
 80041f0:	b08c      	sub	sp, #48	; 0x30
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80041f6:	230c      	movs	r3, #12
 80041f8:	18fa      	adds	r2, r7, r3
 80041fa:	2308      	movs	r3, #8
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	0011      	movs	r1, r2
 8004200:	0018      	movs	r0, r3
 8004202:	f000 f9c1 	bl	8004588 <RTC_GetCalendarValue>
 8004206:	0003      	movs	r3, r0
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
 800420a:	2300      	movs	r3, #0
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	059b      	lsls	r3, r3, #22
 8004212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004214:	0a94      	lsrs	r4, r2, #10
 8004216:	431c      	orrs	r4, r3
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	0a9d      	lsrs	r5, r3, #10
 800421c:	0023      	movs	r3, r4
 800421e:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	059b      	lsls	r3, r3, #22
 8004224:	0d9b      	lsrs	r3, r3, #22
 8004226:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	0018      	movs	r0, r3
 800422c:	f7ff ff7f 	bl	800412e <RTC_IF_Convert_Tick2ms>
 8004230:	0003      	movs	r3, r0
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	801a      	strh	r2, [r3, #0]

  return seconds;
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800423a:	0018      	movs	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	b00c      	add	sp, #48	; 0x30
 8004240:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004244 <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <RTC_IF_BkUp_Write_Seconds+0x1c>)
 8004250:	2100      	movs	r1, #0
 8004252:	0018      	movs	r0, r3
 8004254:	f006 f9ce 	bl	800a5f4 <HAL_RTCEx_BKUPWrite>
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b002      	add	sp, #8
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20001498 	.word	0x20001498

08004264 <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 8004270:	2101      	movs	r1, #1
 8004272:	0018      	movs	r0, r3
 8004274:	f006 f9be 	bl	800a5f4 <HAL_RTCEx_BKUPWrite>
}
 8004278:	46c0      	nop			; (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20001498 	.word	0x20001498

08004284 <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <RTC_IF_BkUp_Read_Seconds+0x18>)
 800428a:	2100      	movs	r1, #0
 800428c:	0018      	movs	r0, r3
 800428e:	f006 f9c7 	bl	800a620 <HAL_RTCEx_BKUPRead>
 8004292:	0003      	movs	r3, r0
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	20001498 	.word	0x20001498

080042a0 <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 80042a6:	2101      	movs	r1, #1
 80042a8:	0018      	movs	r0, r3
 80042aa:	f006 f9b9 	bl	800a620 <HAL_RTCEx_BKUPRead>
 80042ae:	0003      	movs	r3, r0
}
 80042b0:	0018      	movs	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	20001498 	.word	0x20001498

080042bc <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 80042bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042be:	b08d      	sub	sp, #52	; 0x34
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 80042c4:	242e      	movs	r4, #46	; 0x2e
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	2200      	movs	r2, #0
 80042ca:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 80042cc:	232c      	movs	r3, #44	; 0x2c
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	2200      	movs	r2, #0
 80042d2:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 80042d4:	232a      	movs	r3, #42	; 0x2a
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	2200      	movs	r2, #0
 80042da:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 80042dc:	2328      	movs	r3, #40	; 0x28
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	2200      	movs	r2, #0
 80042e2:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 80042e4:	2526      	movs	r5, #38	; 0x26
 80042e6:	197b      	adds	r3, r7, r5
 80042e8:	2200      	movs	r2, #0
 80042ea:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80042ec:	2610      	movs	r6, #16
 80042ee:	19ba      	adds	r2, r7, r6
 80042f0:	4b9b      	ldr	r3, [pc, #620]	; (8004560 <RTC_StartWakeUpAlarm+0x2a4>)
 80042f2:	3304      	adds	r3, #4
 80042f4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80042f6:	c223      	stmia	r2!, {r0, r1, r5}
 80042f8:	cb03      	ldmia	r3!, {r0, r1}
 80042fa:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80042fc:	230c      	movs	r3, #12
 80042fe:	001d      	movs	r5, r3
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	4a97      	ldr	r2, [pc, #604]	; (8004560 <RTC_StartWakeUpAlarm+0x2a4>)
 8004304:	6992      	ldr	r2, [r2, #24]
 8004306:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 8004308:	f7ff fe86 	bl	8004018 <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 800430c:	19bb      	adds	r3, r7, r6
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	b29a      	uxth	r2, r3
 8004312:	193b      	adds	r3, r7, r4
 8004314:	4993      	ldr	r1, [pc, #588]	; (8004564 <RTC_StartWakeUpAlarm+0x2a8>)
 8004316:	1a8a      	subs	r2, r1, r2
 8004318:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	b29b      	uxth	r3, r3
 800431e:	059b      	lsls	r3, r3, #22
 8004320:	0d9b      	lsrs	r3, r3, #22
 8004322:	b299      	uxth	r1, r3
 8004324:	193b      	adds	r3, r7, r4
 8004326:	193a      	adds	r2, r7, r4
 8004328:	8812      	ldrh	r2, [r2, #0]
 800432a:	188a      	adds	r2, r1, r2
 800432c:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0a9b      	lsrs	r3, r3, #10
 8004332:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8004334:	002b      	movs	r3, r5
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	789a      	ldrb	r2, [r3, #2]
 800433a:	2526      	movs	r5, #38	; 0x26
 800433c:	197b      	adds	r3, r7, r5
 800433e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8004340:	e00a      	b.n	8004358 <RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a88      	ldr	r2, [pc, #544]	; (8004568 <RTC_StartWakeUpAlarm+0x2ac>)
 8004346:	4694      	mov	ip, r2
 8004348:	4463      	add	r3, ip
 800434a:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 800434c:	2126      	movs	r1, #38	; 0x26
 800434e:	187b      	adds	r3, r7, r1
 8004350:	881a      	ldrh	r2, [r3, #0]
 8004352:	187b      	adds	r3, r7, r1
 8004354:	3201      	adds	r2, #1
 8004356:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a84      	ldr	r2, [pc, #528]	; (800456c <RTC_StartWakeUpAlarm+0x2b0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d8f0      	bhi.n	8004342 <RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8004360:	2310      	movs	r3, #16
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	2328      	movs	r3, #40	; 0x28
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800436c:	e00a      	b.n	8004384 <RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a7f      	ldr	r2, [pc, #508]	; (8004570 <RTC_StartWakeUpAlarm+0x2b4>)
 8004372:	4694      	mov	ip, r2
 8004374:	4463      	add	r3, ip
 8004376:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8004378:	2128      	movs	r1, #40	; 0x28
 800437a:	187b      	adds	r3, r7, r1
 800437c:	881a      	ldrh	r2, [r3, #0]
 800437e:	187b      	adds	r3, r7, r1
 8004380:	3201      	adds	r2, #1
 8004382:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	23e1      	movs	r3, #225	; 0xe1
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	429a      	cmp	r2, r3
 800438c:	d2ef      	bcs.n	800436e <RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800438e:	2310      	movs	r3, #16
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	785a      	ldrb	r2, [r3, #1]
 8004394:	232a      	movs	r3, #42	; 0x2a
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800439a:	e008      	b.n	80043ae <RTC_StartWakeUpAlarm+0xf2>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3b3c      	subs	r3, #60	; 0x3c
 80043a0:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 80043a2:	212a      	movs	r1, #42	; 0x2a
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	3201      	adds	r2, #1
 80043ac:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b3b      	cmp	r3, #59	; 0x3b
 80043b2:	d8f3      	bhi.n	800439c <RTC_StartWakeUpAlarm+0xe0>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 80043b4:	2310      	movs	r3, #16
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	789b      	ldrb	r3, [r3, #2]
 80043ba:	b299      	uxth	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	b29a      	uxth	r2, r3
 80043c0:	232c      	movs	r3, #44	; 0x2c
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	188a      	adds	r2, r1, r2
 80043c6:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 80043c8:	e00d      	b.n	80043e6 <RTC_StartWakeUpAlarm+0x12a>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 80043ca:	222e      	movs	r2, #46	; 0x2e
 80043cc:	18bb      	adds	r3, r7, r2
 80043ce:	18ba      	adds	r2, r7, r2
 80043d0:	8812      	ldrh	r2, [r2, #0]
 80043d2:	4968      	ldr	r1, [pc, #416]	; (8004574 <RTC_StartWakeUpAlarm+0x2b8>)
 80043d4:	468c      	mov	ip, r1
 80043d6:	4462      	add	r2, ip
 80043d8:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 80043da:	212c      	movs	r1, #44	; 0x2c
 80043dc:	187b      	adds	r3, r7, r1
 80043de:	881a      	ldrh	r2, [r3, #0]
 80043e0:	187b      	adds	r3, r7, r1
 80043e2:	3201      	adds	r2, #1
 80043e4:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 80043e6:	232e      	movs	r3, #46	; 0x2e
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	881a      	ldrh	r2, [r3, #0]
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d2ea      	bcs.n	80043ca <RTC_StartWakeUpAlarm+0x10e>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80043f4:	e00b      	b.n	800440e <RTC_StartWakeUpAlarm+0x152>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80043f6:	222c      	movs	r2, #44	; 0x2c
 80043f8:	18bb      	adds	r3, r7, r2
 80043fa:	18ba      	adds	r2, r7, r2
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	3a3c      	subs	r2, #60	; 0x3c
 8004400:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8004402:	212a      	movs	r1, #42	; 0x2a
 8004404:	187b      	adds	r3, r7, r1
 8004406:	881a      	ldrh	r2, [r3, #0]
 8004408:	187b      	adds	r3, r7, r1
 800440a:	3201      	adds	r2, #1
 800440c:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800440e:	232c      	movs	r3, #44	; 0x2c
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	2b3b      	cmp	r3, #59	; 0x3b
 8004416:	d8ee      	bhi.n	80043f6 <RTC_StartWakeUpAlarm+0x13a>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8004418:	e00b      	b.n	8004432 <RTC_StartWakeUpAlarm+0x176>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800441a:	222a      	movs	r2, #42	; 0x2a
 800441c:	18bb      	adds	r3, r7, r2
 800441e:	18ba      	adds	r2, r7, r2
 8004420:	8812      	ldrh	r2, [r2, #0]
 8004422:	3a3c      	subs	r2, #60	; 0x3c
 8004424:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 8004426:	2128      	movs	r1, #40	; 0x28
 8004428:	187b      	adds	r3, r7, r1
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	187b      	adds	r3, r7, r1
 800442e:	3201      	adds	r2, #1
 8004430:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8004432:	232a      	movs	r3, #42	; 0x2a
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	2b3b      	cmp	r3, #59	; 0x3b
 800443a:	d8ee      	bhi.n	800441a <RTC_StartWakeUpAlarm+0x15e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800443c:	e00b      	b.n	8004456 <RTC_StartWakeUpAlarm+0x19a>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 800443e:	2228      	movs	r2, #40	; 0x28
 8004440:	18bb      	adds	r3, r7, r2
 8004442:	18ba      	adds	r2, r7, r2
 8004444:	8812      	ldrh	r2, [r2, #0]
 8004446:	3a18      	subs	r2, #24
 8004448:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 800444a:	2126      	movs	r1, #38	; 0x26
 800444c:	187b      	adds	r3, r7, r1
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	187b      	adds	r3, r7, r1
 8004452:	3201      	adds	r2, #1
 8004454:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8004456:	2328      	movs	r3, #40	; 0x28
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	2b17      	cmp	r3, #23
 800445e:	d8ee      	bhi.n	800443e <RTC_StartWakeUpAlarm+0x182>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 8004460:	210c      	movs	r1, #12
 8004462:	187b      	adds	r3, r7, r1
 8004464:	78db      	ldrb	r3, [r3, #3]
 8004466:	2203      	movs	r2, #3
 8004468:	4013      	ands	r3, r2
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d119      	bne.n	80044a4 <RTC_StartWakeUpAlarm+0x1e8>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8004470:	187b      	adds	r3, r7, r1
 8004472:	785b      	ldrb	r3, [r3, #1]
 8004474:	3b01      	subs	r3, #1
 8004476:	4a40      	ldr	r2, [pc, #256]	; (8004578 <RTC_StartWakeUpAlarm+0x2bc>)
 8004478:	5cd3      	ldrb	r3, [r2, r3]
 800447a:	b29b      	uxth	r3, r3
 800447c:	2426      	movs	r4, #38	; 0x26
 800447e:	193a      	adds	r2, r7, r4
 8004480:	8812      	ldrh	r2, [r2, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d928      	bls.n	80044d8 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8004486:	193b      	adds	r3, r7, r4
 8004488:	8818      	ldrh	r0, [r3, #0]
 800448a:	187b      	adds	r3, r7, r1
 800448c:	785b      	ldrb	r3, [r3, #1]
 800448e:	3b01      	subs	r3, #1
 8004490:	4a39      	ldr	r2, [pc, #228]	; (8004578 <RTC_StartWakeUpAlarm+0x2bc>)
 8004492:	5cd3      	ldrb	r3, [r2, r3]
 8004494:	0019      	movs	r1, r3
 8004496:	f7fb ffb9 	bl	800040c <__aeabi_idivmod>
 800449a:	000b      	movs	r3, r1
 800449c:	001a      	movs	r2, r3
 800449e:	193b      	adds	r3, r7, r4
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	e019      	b.n	80044d8 <RTC_StartWakeUpAlarm+0x21c>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80044a4:	210c      	movs	r1, #12
 80044a6:	187b      	adds	r3, r7, r1
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	4a33      	ldr	r2, [pc, #204]	; (800457c <RTC_StartWakeUpAlarm+0x2c0>)
 80044ae:	5cd3      	ldrb	r3, [r2, r3]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2426      	movs	r4, #38	; 0x26
 80044b4:	193a      	adds	r2, r7, r4
 80044b6:	8812      	ldrh	r2, [r2, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d90d      	bls.n	80044d8 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80044bc:	193b      	adds	r3, r7, r4
 80044be:	8818      	ldrh	r0, [r3, #0]
 80044c0:	187b      	adds	r3, r7, r1
 80044c2:	785b      	ldrb	r3, [r3, #1]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	4a2d      	ldr	r2, [pc, #180]	; (800457c <RTC_StartWakeUpAlarm+0x2c0>)
 80044c8:	5cd3      	ldrb	r3, [r2, r3]
 80044ca:	0019      	movs	r1, r3
 80044cc:	f7fb ff9e 	bl	800040c <__aeabi_idivmod>
 80044d0:	000b      	movs	r3, r1
 80044d2:	001a      	movs	r2, r3
 80044d4:	193b      	adds	r3, r7, r4
 80044d6:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80044d8:	232e      	movs	r3, #46	; 0x2e
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	4a21      	ldr	r2, [pc, #132]	; (8004564 <RTC_StartWakeUpAlarm+0x2a8>)
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	001a      	movs	r2, r3
 80044e4:	4b26      	ldr	r3, [pc, #152]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 80044e6:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80044e8:	4b25      	ldr	r3, [pc, #148]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 80044ea:	22a0      	movs	r2, #160	; 0xa0
 80044ec:	0512      	lsls	r2, r2, #20
 80044ee:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80044f0:	232c      	movs	r3, #44	; 0x2c
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	4b21      	ldr	r3, [pc, #132]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 80044fa:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80044fc:	232a      	movs	r3, #42	; 0x2a
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 8004506:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8004508:	2328      	movs	r3, #40	; 0x28
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b2da      	uxtb	r2, r3
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 8004512:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8004514:	2326      	movs	r3, #38	; 0x26
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b2d9      	uxtb	r1, r3
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 800451e:	2220      	movs	r2, #32
 8004520:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8004522:	2310      	movs	r3, #16
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	78da      	ldrb	r2, [r3, #3]
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 800452a:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 8004534:	2200      	movs	r2, #0
 8004536:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8004538:	4b11      	ldr	r3, [pc, #68]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 800453a:	2280      	movs	r2, #128	; 0x80
 800453c:	0052      	lsls	r2, r2, #1
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 8004542:	2200      	movs	r2, #0
 8004544:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004546:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 8004548:	2200      	movs	r2, #0
 800454a:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800454c:	490c      	ldr	r1, [pc, #48]	; (8004580 <RTC_StartWakeUpAlarm+0x2c4>)
 800454e:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <RTC_StartWakeUpAlarm+0x2c8>)
 8004550:	2200      	movs	r2, #0
 8004552:	0018      	movs	r0, r3
 8004554:	f005 fd7e 	bl	800a054 <HAL_RTC_SetAlarm_IT>
}
 8004558:	46c0      	nop			; (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	b00d      	add	sp, #52	; 0x34
 800455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004560:	200003ec 	.word	0x200003ec
 8004564:	000003ff 	.word	0x000003ff
 8004568:	fffeae80 	.word	0xfffeae80
 800456c:	0001517f 	.word	0x0001517f
 8004570:	fffff1f0 	.word	0xfffff1f0
 8004574:	fffffc00 	.word	0xfffffc00
 8004578:	0801f0dc 	.word	0x0801f0dc
 800457c:	0801f0d0 	.word	0x0801f0d0
 8004580:	200003c4 	.word	0x200003c4
 8004584:	20001498 	.word	0x20001498

08004588 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8004596:	6839      	ldr	r1, [r7, #0]
 8004598:	4b42      	ldr	r3, [pc, #264]	; (80046a4 <RTC_GetCalendarValue+0x11c>)
 800459a:	2200      	movs	r2, #0
 800459c:	0018      	movs	r0, r3
 800459e:	f005 fc01 	bl	8009da4 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 80045a2:	4b41      	ldr	r3, [pc, #260]	; (80046a8 <RTC_GetCalendarValue+0x120>)
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7ff fcc7 	bl	8003f38 <LL_RTC_TIME_GetSubSecond>
 80045aa:	0003      	movs	r3, r0
 80045ac:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4b3c      	ldr	r3, [pc, #240]	; (80046a4 <RTC_GetCalendarValue+0x11c>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	0018      	movs	r0, r3
 80045b6:	f005 fcff 	bl	8009fb8 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80045ba:	6839      	ldr	r1, [r7, #0]
 80045bc:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <RTC_GetCalendarValue+0x11c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	0018      	movs	r0, r3
 80045c2:	f005 fbef 	bl	8009da4 <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 80045c6:	4b38      	ldr	r3, [pc, #224]	; (80046a8 <RTC_GetCalendarValue+0x120>)
 80045c8:	0018      	movs	r0, r3
 80045ca:	f7ff fcb5 	bl	8003f38 <LL_RTC_TIME_GetSubSecond>
 80045ce:	0002      	movs	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d1e5      	bne.n	80045a2 <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	78db      	ldrb	r3, [r3, #3]
 80045da:	001a      	movs	r2, r3
 80045dc:	4b33      	ldr	r3, [pc, #204]	; (80046ac <RTC_GetCalendarValue+0x124>)
 80045de:	4353      	muls	r3, r2
 80045e0:	3303      	adds	r3, #3
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	78db      	ldrb	r3, [r3, #3]
 80045ea:	2203      	movs	r2, #3
 80045ec:	4013      	ands	r3, r2
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <RTC_GetCalendarValue+0x70>
 80045f4:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <RTC_GetCalendarValue+0x128>)
 80045f6:	e000      	b.n	80045fa <RTC_GetCalendarValue+0x72>
 80045f8:	4b2e      	ldr	r3, [pc, #184]	; (80046b4 <RTC_GetCalendarValue+0x12c>)
 80045fa:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	0013      	movs	r3, r2
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	189b      	adds	r3, r3, r2
 800460c:	3301      	adds	r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	da00      	bge.n	8004614 <RTC_GetCalendarValue+0x8c>
 8004612:	3301      	adds	r3, #1
 8004614:	105b      	asrs	r3, r3, #1
 8004616:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	3b01      	subs	r3, #1
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	40da      	lsrs	r2, r3
 8004624:	0013      	movs	r3, r2
 8004626:	2203      	movs	r2, #3
 8004628:	4013      	ands	r3, r2
 800462a:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	18d3      	adds	r3, r2, r3
 8004630:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	789b      	ldrb	r3, [r3, #2]
 8004636:	001a      	movs	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	18d3      	adds	r3, r2, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	0013      	movs	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	189b      	adds	r3, r3, r2
 8004648:	011a      	lsls	r2, r3, #4
 800464a:	1ad2      	subs	r2, r2, r3
 800464c:	0113      	lsls	r3, r2, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	01db      	lsls	r3, r3, #7
 8004652:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	789b      	ldrb	r3, [r3, #2]
 8004658:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	001a      	movs	r2, r3
 8004660:	0013      	movs	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	011a      	lsls	r2, r3, #4
 8004668:	1ad2      	subs	r2, r2, r3
 800466a:	0113      	lsls	r3, r2, #4
 800466c:	001a      	movs	r2, r3
 800466e:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	001a      	movs	r2, r3
 8004676:	0013      	movs	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	18c3      	adds	r3, r0, r3
 8004680:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	18d3      	adds	r3, r2, r3
 8004686:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	029a      	lsls	r2, r3, #10
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <RTC_GetCalendarValue+0x130>)
 8004694:	4694      	mov	ip, r2
 8004696:	4463      	add	r3, ip
 8004698:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 800469a:	697b      	ldr	r3, [r7, #20]
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	b006      	add	sp, #24
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20001498 	.word	0x20001498
 80046a8:	40002800 	.word	0x40002800
 80046ac:	000005b5 	.word	0x000005b5
 80046b0:	00445550 	.word	0x00445550
 80046b4:	0099aaa0 	.word	0x0099aaa0
 80046b8:	000003ff 	.word	0x000003ff

080046bc <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d6:	f3ef 8310 	mrs	r3, PRIMASK
 80046da:	607b      	str	r3, [r7, #4]
  return(result);
 80046dc:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80046de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80046e0:	b672      	cpsid	i
}
 80046e2:	46c0      	nop			; (mov r8, r8)

  Sx_Board_IoDeInit();
 80046e4:	f001 fd10 	bl	8006108 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <PWR_EnterStopMode+0x48>)
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7ff f95c 	bl	80039a8 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80046f0:	4b0a      	ldr	r3, [pc, #40]	; (800471c <PWR_EnterStopMode+0x4c>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <PWR_EnterStopMode+0x4c>)
 80046f6:	2104      	movs	r1, #4
 80046f8:	430a      	orrs	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f383 8810 	msr	PRIMASK, r3
}
 8004706:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8004708:	2101      	movs	r1, #1
 800470a:	2001      	movs	r0, #1
 800470c:	f004 fa22 	bl	8008b54 <HAL_PWR_EnterSTOPMode>
}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b004      	add	sp, #16
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20001400 	.word	0x20001400
 800471c:	40007000 	.word	0x40007000

08004720 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004726:	f3ef 8310 	mrs	r3, PRIMASK
 800472a:	60bb      	str	r3, [r7, #8]
  return(result);
 800472c:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 800472e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004730:	b672      	cpsid	i
}
 8004732:	46c0      	nop			; (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <PWR_ExitStopMode+0x7c>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b18      	ldr	r3, [pc, #96]	; (800479c <PWR_ExitStopMode+0x7c>)
 800473a:	2101      	movs	r1, #1
 800473c:	430a      	orrs	r2, r1
 800473e:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	4b16      	ldr	r3, [pc, #88]	; (800479c <PWR_ExitStopMode+0x7c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2204      	movs	r2, #4
 8004748:	4013      	ands	r3, r2
 800474a:	d0fa      	beq.n	8004742 <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 800474c:	4b13      	ldr	r3, [pc, #76]	; (800479c <PWR_ExitStopMode+0x7c>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	4b12      	ldr	r3, [pc, #72]	; (800479c <PWR_ExitStopMode+0x7c>)
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	0449      	lsls	r1, r1, #17
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <PWR_ExitStopMode+0x7c>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	049b      	lsls	r3, r3, #18
 8004764:	4013      	ands	r3, r2
 8004766:	d0f9      	beq.n	800475c <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <PWR_ExitStopMode+0x7c>)
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <PWR_ExitStopMode+0x7c>)
 800476e:	2103      	movs	r1, #3
 8004770:	430a      	orrs	r2, r1
 8004772:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <PWR_ExitStopMode+0x7c>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	220c      	movs	r2, #12
 800477c:	4013      	ands	r3, r2
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d1f9      	bne.n	8004776 <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8004782:	f001 fbbb 	bl	8005efc <CMWX1ZZABZ0XX_RADIO_IoInit>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f383 8810 	msr	PRIMASK, r3
}
 8004790:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	b004      	add	sp, #16
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	40021000 	.word	0x40021000

080047a0 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80047a4:	2101      	movs	r1, #1
 80047a6:	2000      	movs	r0, #0
 80047a8:	f004 f97c 	bl	8008aa4 <HAL_PWR_EnterSLEEPMode>
}
 80047ac:	46c0      	nop			; (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	af00      	add	r7, sp, #0
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e06e      	b.n	80048ac <HAL_LPTIM_Init+0xf0>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	222e      	movs	r2, #46	; 0x2e
 80047d2:	5c9b      	ldrb	r3, [r3, r2]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d107      	bne.n	80047ea <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	222d      	movs	r2, #45	; 0x2d
 80047de:	2100      	movs	r1, #0
 80047e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7fe ffd9 	bl	800379c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	222e      	movs	r2, #46	; 0x2e
 80047ee:	2102      	movs	r1, #2
 80047f0:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d103      	bne.n	800480a <HAL_LPTIM_Init+0x4e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2206      	movs	r2, #6
 8004806:	4393      	bics	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	4a29      	ldr	r2, [pc, #164]	; (80048b4 <HAL_LPTIM_Init+0xf8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a28      	ldr	r2, [pc, #160]	; (80048b8 <HAL_LPTIM_Init+0xfc>)
 8004818:	4013      	ands	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d103      	bne.n	800482c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	22d8      	movs	r2, #216	; 0xd8
 8004828:	4393      	bics	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a23      	ldr	r2, [pc, #140]	; (80048bc <HAL_LPTIM_Init+0x100>)
 8004830:	4013      	ands	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800483c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004842:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004848:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800484e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d107      	bne.n	800486e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004866:	4313      	orrs	r3, r2
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d104      	bne.n	8004880 <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	4a0b      	ldr	r2, [pc, #44]	; (80048b4 <HAL_LPTIM_Init+0xf8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <HAL_LPTIM_Init+0xde>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8004892:	4313      	orrs	r3, r2
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	222e      	movs	r2, #46	; 0x2e
 80048a6:	2101      	movs	r1, #1
 80048a8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	0018      	movs	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b004      	add	sp, #16
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	0000ffff 	.word	0x0000ffff
 80048b8:	ffff1fff 	.word	0xffff1fff
 80048bc:	ff19f1f8 	.word	0xff19f1f8

080048c0 <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	222e      	movs	r2, #46	; 0x2e
 80048ce:	2102      	movs	r1, #2
 80048d0:	5499      	strb	r1, [r3, r2]

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2206      	movs	r2, #6
 80048de:	4393      	bics	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2180      	movs	r1, #128	; 0x80
 8004900:	0449      	lsls	r1, r1, #17
 8004902:	430a      	orrs	r2, r1
 8004904:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2101      	movs	r1, #1
 8004912:	430a      	orrs	r2, r1
 8004914:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2210      	movs	r2, #16
 800491c:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2110      	movs	r1, #16
 800492a:	0018      	movs	r0, r3
 800492c:	f000 f922 	bl	8004b74 <LPTIM_WaitForFlag>
 8004930:	0003      	movs	r3, r0
 8004932:	2b03      	cmp	r3, #3
 8004934:	d101      	bne.n	800493a <HAL_LPTIM_Encoder_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e031      	b.n	800499e <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f000 f951 	bl	8004be4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f000 f908 	bl	8004b5a <HAL_LPTIM_GetState>
 800494a:	0003      	movs	r3, r0
 800494c:	2b03      	cmp	r3, #3
 800494e:	d101      	bne.n	8004954 <HAL_LPTIM_Encoder_Start_IT+0x94>
  {
    return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e024      	b.n	800499e <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2140      	movs	r1, #64	; 0x40
 8004960:	430a      	orrs	r2, r1
 8004962:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2120      	movs	r1, #32
 8004970:	430a      	orrs	r2, r1
 8004972:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2101      	movs	r1, #1
 8004980:	430a      	orrs	r2, r1
 8004982:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2104      	movs	r1, #4
 8004990:	430a      	orrs	r2, r1
 8004992:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	222e      	movs	r2, #46	; 0x2e
 8004998:	2101      	movs	r1, #1
 800499a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b004      	add	sp, #16
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2201      	movs	r2, #1
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d10e      	bne.n	80049da <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2201      	movs	r2, #1
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d107      	bne.n	80049da <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2201      	movs	r2, #1
 80049d0:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	0018      	movs	r0, r3
 80049d6:	f000 f888 	bl	8004aea <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2202      	movs	r2, #2
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d10e      	bne.n	8004a06 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2202      	movs	r2, #2
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d107      	bne.n	8004a06 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2202      	movs	r2, #2
 80049fc:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 f87a 	bl	8004afa <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d10e      	bne.n	8004a32 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d107      	bne.n	8004a32 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2204      	movs	r2, #4
 8004a28:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f000 f86c 	bl	8004b0a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d10e      	bne.n	8004a5e <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2208      	movs	r2, #8
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d107      	bne.n	8004a5e <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2208      	movs	r2, #8
 8004a54:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f000 f85e 	bl	8004b1a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2210      	movs	r2, #16
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d10e      	bne.n	8004a8a <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2210      	movs	r2, #16
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d107      	bne.n	8004a8a <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2210      	movs	r2, #16
 8004a80:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 f850 	bl	8004b2a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2220      	movs	r2, #32
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d10e      	bne.n	8004ab6 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	d107      	bne.n	8004ab6 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f000 f842 	bl	8004b3a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2240      	movs	r2, #64	; 0x40
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d10e      	bne.n	8004ae2 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2240      	movs	r2, #64	; 0x40
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b40      	cmp	r3, #64	; 0x40
 8004ad0:	d107      	bne.n	8004ae2 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2240      	movs	r2, #64	; 0x40
 8004ad8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f000 f834 	bl	8004b4a <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b002      	add	sp, #8
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b002      	add	sp, #8
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b002      	add	sp, #8
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b002      	add	sp, #8
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b002      	add	sp, #8
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b002      	add	sp, #8
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b002      	add	sp, #8
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b002      	add	sp, #8
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	222e      	movs	r2, #46	; 0x2e
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	b2db      	uxtb	r3, r3
}
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b002      	add	sp, #8
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004b7e:	230f      	movs	r3, #15
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <LPTIM_WaitForFlag+0x68>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4915      	ldr	r1, [pc, #84]	; (8004be0 <LPTIM_WaitForFlag+0x6c>)
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fb facd 	bl	800012c <__udivsi3>
 8004b92:	0003      	movs	r3, r0
 8004b94:	001a      	movs	r2, r3
 8004b96:	0013      	movs	r3, r2
 8004b98:	015b      	lsls	r3, r3, #5
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	189b      	adds	r3, r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8004bb0:	230f      	movs	r3, #15
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d002      	beq.n	8004bce <LPTIM_WaitForFlag+0x5a>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ea      	bne.n	8004ba4 <LPTIM_WaitForFlag+0x30>

  return result;
 8004bce:	230f      	movs	r3, #15
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	781b      	ldrb	r3, [r3, #0]
}
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b004      	add	sp, #16
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000070 	.word	0x20000070
 8004be0:	00004e20 	.word	0x00004e20

08004be4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf0:	b672      	cpsid	i
}
 8004bf2:	46c0      	nop			; (mov r8, r8)

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	4b55      	ldr	r3, [pc, #340]	; (8004d50 <LPTIM_Disable+0x16c>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d106      	bne.n	8004c0e <LPTIM_Disable+0x2a>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c00:	4b54      	ldr	r3, [pc, #336]	; (8004d54 <LPTIM_Disable+0x170>)
 8004c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c04:	23c0      	movs	r3, #192	; 0xc0
 8004c06:	031b      	lsls	r3, r3, #12
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61fb      	str	r3, [r7, #28]
      break;
 8004c0c:	e000      	b.n	8004c10 <LPTIM_Disable+0x2c>
    default:
      break;
 8004c0e:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	001a      	movs	r2, r3
 8004c36:	4b46      	ldr	r3, [pc, #280]	; (8004d50 <LPTIM_Disable+0x16c>)
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d10d      	bne.n	8004c58 <LPTIM_Disable+0x74>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004c3c:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <LPTIM_Disable+0x170>)
 8004c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c40:	4b44      	ldr	r3, [pc, #272]	; (8004d54 <LPTIM_Disable+0x170>)
 8004c42:	2180      	movs	r1, #128	; 0x80
 8004c44:	0609      	lsls	r1, r1, #24
 8004c46:	430a      	orrs	r2, r1
 8004c48:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004c4a:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <LPTIM_Disable+0x170>)
 8004c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c4e:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <LPTIM_Disable+0x170>)
 8004c50:	0052      	lsls	r2, r2, #1
 8004c52:	0852      	lsrs	r2, r2, #1
 8004c54:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004c56:	e000      	b.n	8004c5a <LPTIM_Disable+0x76>
    default:
      break;
 8004c58:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <LPTIM_Disable+0x82>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d05b      	beq.n	8004d1e <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	001a      	movs	r2, r3
 8004c6c:	4b38      	ldr	r3, [pc, #224]	; (8004d50 <LPTIM_Disable+0x16c>)
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d106      	bne.n	8004c80 <LPTIM_Disable+0x9c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004c72:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <LPTIM_Disable+0x170>)
 8004c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c76:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <LPTIM_Disable+0x170>)
 8004c78:	4937      	ldr	r1, [pc, #220]	; (8004d58 <LPTIM_Disable+0x174>)
 8004c7a:	400a      	ands	r2, r1
 8004c7c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004c7e:	e000      	b.n	8004c82 <LPTIM_Disable+0x9e>
      default:
        break;
 8004c80:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <LPTIM_Disable+0xdc>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2101      	movs	r1, #1
 8004c94:	430a      	orrs	r2, r1
 8004c96:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2108      	movs	r1, #8
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f7ff ff65 	bl	8004b74 <LPTIM_WaitForFlag>
 8004caa:	0003      	movs	r3, r0
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d103      	bne.n	8004cb8 <LPTIM_Disable+0xd4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	222e      	movs	r2, #46	; 0x2e
 8004cb4:	2103      	movs	r1, #3
 8004cb6:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01b      	beq.n	8004cfe <LPTIM_Disable+0x11a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2110      	movs	r1, #16
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f7ff ff46 	bl	8004b74 <LPTIM_WaitForFlag>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d103      	bne.n	8004cf6 <LPTIM_Disable+0x112>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	222e      	movs	r2, #46	; 0x2e
 8004cf2:	2103      	movs	r1, #3
 8004cf4:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	001a      	movs	r2, r3
 8004d04:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <LPTIM_Disable+0x16c>)
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d10b      	bne.n	8004d22 <LPTIM_Disable+0x13e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <LPTIM_Disable+0x170>)
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0e:	4a12      	ldr	r2, [pc, #72]	; (8004d58 <LPTIM_Disable+0x174>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	0019      	movs	r1, r3
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <LPTIM_Disable+0x170>)
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004d1c:	e002      	b.n	8004d24 <LPTIM_Disable+0x140>
      default:
        break;
    }
  }
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	e000      	b.n	8004d24 <LPTIM_Disable+0x140>
        break;
 8004d22:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2101      	movs	r1, #1
 8004d30:	438a      	bics	r2, r1
 8004d32:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d44:	b662      	cpsie	i
}
 8004d46:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
}
 8004d48:	46c0      	nop			; (mov r8, r8)
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b008      	add	sp, #32
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40007c00 	.word	0x40007c00
 8004d54:	40021000 	.word	0x40021000
 8004d58:	fff3ffff 	.word	0xfff3ffff

08004d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d60:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <HAL_MspInit+0x3c>)
 8004d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <HAL_MspInit+0x3c>)
 8004d66:	2180      	movs	r1, #128	; 0x80
 8004d68:	0549      	lsls	r1, r1, #21
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8004d6e:	f003 fe8b 	bl	8008a88 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8004d72:	f003 ff59 	bl	8008c28 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8004d76:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <HAL_MspInit+0x40>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <HAL_MspInit+0x40>)
 8004d7c:	2108      	movs	r1, #8
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 8004d82:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_MspInit+0x40>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_MspInit+0x40>)
 8004d88:	2108      	movs	r1, #8
 8004d8a:	438a      	bics	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8004d8e:	f003 ff3d 	bl	8008c0c <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40022000 	.word	0x40022000

08004da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	e7fd      	b.n	8004dae <HardFault_Handler+0x4>

08004db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dc0:	46c0      	nop			; (mov r8, r8)
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dca:	f001 fc0d 	bl	80065e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <EXTI0_1_IRQHandler+0x1c>)
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f002 fd98 	bl	8007910 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8004de0:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <EXTI0_1_IRQHandler+0x20>)
 8004de2:	0018      	movs	r0, r3
 8004de4:	f002 fd94 	bl	8007910 <HAL_EXTI_IRQHandler>
#endif
}
 8004de8:	46c0      	nop			; (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	200016f8 	.word	0x200016f8
 8004df4:	200016f0 	.word	0x200016f0

08004df8 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <EXTI4_15_IRQHandler+0x1c>)
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f002 fd80 	bl	8007910 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <EXTI4_15_IRQHandler+0x20>)
 8004e12:	0018      	movs	r0, r3
 8004e14:	f002 fd7c 	bl	8007910 <HAL_EXTI_IRQHandler>
#endif
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	200016e8 	.word	0x200016e8
 8004e24:	20001700 	.word	0x20001700

08004e28 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8004e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e30:	0018      	movs	r0, r3
 8004e32:	f002 fc5e 	bl	80076f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20001660 	.word	0x20001660

08004e40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8004e44:	4b03      	ldr	r3, [pc, #12]	; (8004e54 <USART2_IRQHandler+0x14>)
 8004e46:	0018      	movs	r0, r3
 8004e48:	f006 f958 	bl	800b0fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e4c:	46c0      	nop			; (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	20001660 	.word	0x20001660

08004e58 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)// New
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <LPTIM1_IRQHandler+0x14>)
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f7ff fda1 	bl	80049a6 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	20001468 	.word	0x20001468

08004e70 <RTC_IRQHandler>:
/*}*/



void RTC_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc); // тоже поднимает из сна sx1276 и плату
 8004e74:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <RTC_IRQHandler+0x14>)
 8004e76:	0018      	movs	r0, r3
 8004e78:	f005 fad8 	bl	800a42c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	20001498 	.word	0x20001498

08004e88 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8004e8c:	f017 febc 	bl	801cc08 <UTIL_TIMER_Init>

  Gpio_PreInit();
 8004e90:	f000 f8f6 	bl	8005080 <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 8004e94:	f000 f9c2 	bl	800521c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8004e98:	f017 f812 	bl	801bec0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <SystemApp_Init+0x44>)
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f017 f8c6 	bl	801c030 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8004ea4:	2002      	movs	r0, #2
 8004ea6:	f017 f8d1 	bl	801c04c <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8004eaa:	f7fe fda9 	bl	8003a00 <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 8004eae:	f001 fa59 	bl	8006364 <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 8004eb2:	f001 f823 	bl	8005efc <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Initialize the Sensors */
  EnvSensors_Init(); //  dell
 8004eb6:	f000 fa55 	bl	8005364 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8004eba:	f017 fac9 	bl	801c450 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f017 fb05 	bl	801c4d0 <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	08005035 	.word	0x08005035

08004ed0 <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8004ed4:	f017 fb5e 	bl	801c594 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8004ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8004ee6:	250f      	movs	r5, #15
 8004ee8:	197b      	adds	r3, r7, r5
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8004eee:	260c      	movs	r6, #12
 8004ef0:	19bc      	adds	r4, r7, r6
 8004ef2:	f7fe fdd9 	bl	8003aa8 <SYS_GetBatteryLevel>
 8004ef6:	0003      	movs	r3, r0
 8004ef8:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8004efa:	19bb      	adds	r3, r7, r6
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <GetBatteryLevel+0x80>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d903      	bls.n	8004f0c <GetBatteryLevel+0x2c>
  {
//    batteryLevel = LORAWAN_MAX_BAT;
	  batteryLevel = 100;
 8004f04:	197b      	adds	r3, r7, r5
 8004f06:	2264      	movs	r2, #100	; 0x64
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e021      	b.n	8004f50 <GetBatteryLevel+0x70>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	23e1      	movs	r3, #225	; 0xe1
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d204      	bcs.n	8004f24 <GetBatteryLevel+0x44>
  {
    batteryLevel = 0;
 8004f1a:	230f      	movs	r3, #15
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e015      	b.n	8004f50 <GetBatteryLevel+0x70>
  }
  else
  {
//    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
    uint32_t batteryRange = VDD_BAT - VDD_MIN;
 8004f24:	2396      	movs	r3, #150	; 0x96
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	60bb      	str	r3, [r7, #8]
    uint32_t batteryRemaining = batteryLevelmV - VDD_MIN;
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <GetBatteryLevel+0x84>)
 8004f32:	4694      	mov	ip, r2
 8004f34:	4463      	add	r3, ip
 8004f36:	607b      	str	r3, [r7, #4]
    batteryLevel = (batteryRemaining * 100) / batteryRange;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2264      	movs	r2, #100	; 0x64
 8004f3c:	4353      	muls	r3, r2
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7fb f8f3 	bl	800012c <__udivsi3>
 8004f46:	0003      	movs	r3, r0
 8004f48:	001a      	movs	r2, r3
 8004f4a:	230f      	movs	r3, #15
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8004f50:	230f      	movs	r3, #15
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	781b      	ldrb	r3, [r3, #0]
}
 8004f56:	0018      	movs	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b005      	add	sp, #20
 8004f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	00000bb8 	.word	0x00000bb8
 8004f64:	fffff8f8 	.word	0xfffff8f8

08004f68 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8004f6e:	1dbb      	adds	r3, r7, #6
 8004f70:	2200      	movs	r2, #0
 8004f72:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8004f74:	f7fe fd50 	bl	8003a18 <SYS_GetTemperatureLevel>
 8004f78:	1e03      	subs	r3, r0, #0
 8004f7a:	da00      	bge.n	8004f7e <GetTemperatureLevel+0x16>
 8004f7c:	33ff      	adds	r3, #255	; 0xff
 8004f7e:	121b      	asrs	r3, r3, #8
 8004f80:	b21a      	sxth	r2, r3
 8004f82:	1dbb      	adds	r3, r7, #6
 8004f84:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8004f86:	1dbb      	adds	r3, r7, #6
 8004f88:	881b      	ldrh	r3, [r3, #0]
}
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b002      	add	sp, #8
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8004f92:	b590      	push	{r4, r7, lr}
 8004f94:	b085      	sub	sp, #20
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8004f9a:	f001 fb37 	bl	800660c <HAL_GetUIDw0>
 8004f9e:	0004      	movs	r4, r0
 8004fa0:	f001 fb48 	bl	8006634 <HAL_GetUIDw2>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	18e3      	adds	r3, r4, r3
 8004fa8:	60fb      	str	r3, [r7, #12]
  uint32_t ID_2_val = HAL_GetUIDw1();
 8004faa:	f001 fb39 	bl	8006620 <HAL_GetUIDw1>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	60bb      	str	r3, [r7, #8]

  id[7] = (ID_1_3_val) >> 24;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	0e1a      	lsrs	r2, r3, #24
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3307      	adds	r3, #7
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
  id[6] = (ID_1_3_val) >> 16;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	0c1a      	lsrs	r2, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3306      	adds	r3, #6
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
  id[5] = (ID_1_3_val) >> 8;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	0a1a      	lsrs	r2, r3, #8
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3305      	adds	r3, #5
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
  id[4] = (ID_1_3_val);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]
  id[3] = (ID_2_val) >> 24;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	0e1a      	lsrs	r2, r3, #24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3303      	adds	r3, #3
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
  id[2] = (ID_2_val) >> 16;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	0c1a      	lsrs	r2, r3, #16
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
  id[1] = (ID_2_val) >> 8;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	0a1a      	lsrs	r2, r3, #8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3301      	adds	r3, #1
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
  id[0] = (ID_2_val);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	b2da      	uxtb	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800500c:	46c0      	nop			; (mov r8, r8)
 800500e:	46bd      	mov	sp, r7
 8005010:	b005      	add	sp, #20
 8005012:	bd90      	pop	{r4, r7, pc}

08005014 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8005014:	b5b0      	push	{r4, r5, r7, lr}
 8005016:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8005018:	f001 faf8 	bl	800660c <HAL_GetUIDw0>
 800501c:	0004      	movs	r4, r0
 800501e:	f001 faff 	bl	8006620 <HAL_GetUIDw1>
 8005022:	0003      	movs	r3, r0
 8005024:	405c      	eors	r4, r3
 8005026:	f001 fb05 	bl	8006634 <HAL_GetUIDw2>
 800502a:	0003      	movs	r3, r0
 800502c:	4063      	eors	r3, r4
}
 800502e:	0018      	movs	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	bdb0      	pop	{r4, r5, r7, pc}

08005034 <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8005034:	b590      	push	{r4, r7, lr}
 8005036:	b087      	sub	sp, #28
 8005038:	af02      	add	r7, sp, #8
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800503e:	2408      	movs	r4, #8
 8005040:	193b      	adds	r3, r7, r4
 8005042:	0018      	movs	r0, r3
 8005044:	f017 fd7e 	bl	801cb44 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8005048:	0022      	movs	r2, r4
 800504a:	18bb      	adds	r3, r7, r2
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	18bb      	adds	r3, r7, r2
 8005050:	2204      	movs	r2, #4
 8005052:	5e9b      	ldrsh	r3, [r3, r2]
 8005054:	4a09      	ldr	r2, [pc, #36]	; (800507c <TimestampNow+0x48>)
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	000b      	movs	r3, r1
 800505c:	2110      	movs	r1, #16
 800505e:	f000 f8a9 	bl	80051b4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0018      	movs	r0, r3
 8005066:	f7fb f84f 	bl	8000108 <strlen>
 800506a:	0003      	movs	r3, r0
 800506c:	b29a      	uxth	r2, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	46bd      	mov	sp, r7
 8005076:	b005      	add	sp, #20
 8005078:	bd90      	pop	{r4, r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	0801f140 	.word	0x0801f140

08005080 <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b08b      	sub	sp, #44	; 0x2c
 8005084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005086:	2414      	movs	r4, #20
 8005088:	193b      	adds	r3, r7, r4
 800508a:	0018      	movs	r0, r3
 800508c:	2314      	movs	r3, #20
 800508e:	001a      	movs	r2, r3
 8005090:	2100      	movs	r1, #0
 8005092:	f019 f81e 	bl	801e0d2 <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005096:	4b38      	ldr	r3, [pc, #224]	; (8005178 <Gpio_PreInit+0xf8>)
 8005098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509a:	4b37      	ldr	r3, [pc, #220]	; (8005178 <Gpio_PreInit+0xf8>)
 800509c:	2101      	movs	r1, #1
 800509e:	430a      	orrs	r2, r1
 80050a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80050a2:	4b35      	ldr	r3, [pc, #212]	; (8005178 <Gpio_PreInit+0xf8>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	2201      	movs	r2, #1
 80050a8:	4013      	ands	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ae:	4b32      	ldr	r3, [pc, #200]	; (8005178 <Gpio_PreInit+0xf8>)
 80050b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b2:	4b31      	ldr	r3, [pc, #196]	; (8005178 <Gpio_PreInit+0xf8>)
 80050b4:	2102      	movs	r1, #2
 80050b6:	430a      	orrs	r2, r1
 80050b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050ba:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <Gpio_PreInit+0xf8>)
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	2202      	movs	r2, #2
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050c6:	4b2c      	ldr	r3, [pc, #176]	; (8005178 <Gpio_PreInit+0xf8>)
 80050c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ca:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <Gpio_PreInit+0xf8>)
 80050cc:	2104      	movs	r1, #4
 80050ce:	430a      	orrs	r2, r1
 80050d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <Gpio_PreInit+0xf8>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	2204      	movs	r2, #4
 80050d8:	4013      	ands	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050de:	4b26      	ldr	r3, [pc, #152]	; (8005178 <Gpio_PreInit+0xf8>)
 80050e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e2:	4b25      	ldr	r3, [pc, #148]	; (8005178 <Gpio_PreInit+0xf8>)
 80050e4:	2180      	movs	r1, #128	; 0x80
 80050e6:	430a      	orrs	r2, r1
 80050e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050ea:	4b23      	ldr	r3, [pc, #140]	; (8005178 <Gpio_PreInit+0xf8>)
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	4013      	ands	r3, r2
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050f6:	193b      	adds	r3, r7, r4
 80050f8:	2203      	movs	r2, #3
 80050fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fc:	193b      	adds	r3, r7, r4
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8005102:	193b      	adds	r3, r7, r4
 8005104:	4a1d      	ldr	r2, [pc, #116]	; (800517c <Gpio_PreInit+0xfc>)
 8005106:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005108:	193a      	adds	r2, r7, r4
 800510a:	23a0      	movs	r3, #160	; 0xa0
 800510c:	05db      	lsls	r3, r3, #23
 800510e:	0011      	movs	r1, r2
 8005110:	0018      	movs	r0, r3
 8005112:	f002 fc21 	bl	8007958 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8005116:	193b      	adds	r3, r7, r4
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <Gpio_PreInit+0x100>)
 800511a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800511c:	193b      	adds	r3, r7, r4
 800511e:	4a19      	ldr	r2, [pc, #100]	; (8005184 <Gpio_PreInit+0x104>)
 8005120:	0019      	movs	r1, r3
 8005122:	0010      	movs	r0, r2
 8005124:	f002 fc18 	bl	8007958 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005128:	193b      	adds	r3, r7, r4
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <Gpio_PreInit+0x108>)
 800512c:	0019      	movs	r1, r3
 800512e:	0010      	movs	r0, r2
 8005130:	f002 fc12 	bl	8007958 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005134:	193b      	adds	r3, r7, r4
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <Gpio_PreInit+0x10c>)
 8005138:	0019      	movs	r1, r3
 800513a:	0010      	movs	r0, r2
 800513c:	f002 fc0c 	bl	8007958 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8005140:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <Gpio_PreInit+0xf8>)
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <Gpio_PreInit+0xf8>)
 8005146:	2101      	movs	r1, #1
 8005148:	438a      	bics	r2, r1
 800514a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800514c:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <Gpio_PreInit+0xf8>)
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <Gpio_PreInit+0xf8>)
 8005152:	2102      	movs	r1, #2
 8005154:	438a      	bics	r2, r1
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8005158:	4b07      	ldr	r3, [pc, #28]	; (8005178 <Gpio_PreInit+0xf8>)
 800515a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <Gpio_PreInit+0xf8>)
 800515e:	2104      	movs	r1, #4
 8005160:	438a      	bics	r2, r1
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8005164:	4b04      	ldr	r3, [pc, #16]	; (8005178 <Gpio_PreInit+0xf8>)
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <Gpio_PreInit+0xf8>)
 800516a:	2180      	movs	r1, #128	; 0x80
 800516c:	438a      	bics	r2, r1
 800516e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 8005170:	46c0      	nop			; (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b00b      	add	sp, #44	; 0x2c
 8005176:	bd90      	pop	{r4, r7, pc}
 8005178:	40021000 	.word	0x40021000
 800517c:	00009fff 	.word	0x00009fff
 8005180:	0000ffff 	.word	0x0000ffff
 8005184:	50000400 	.word	0x50000400
 8005188:	50000800 	.word	0x50000800
 800518c:	50001c00 	.word	0x50001c00

08005190 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8005194:	2101      	movs	r1, #1
 8005196:	2004      	movs	r0, #4
 8005198:	f017 f96a 	bl	801c470 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 800519c:	46c0      	nop			; (mov r8, r8)
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80051a6:	2100      	movs	r1, #0
 80051a8:	2004      	movs	r0, #4
 80051aa:	f017 f961 	bl	801c470 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80051b4:	b40c      	push	{r2, r3}
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80051c0:	231c      	movs	r3, #28
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f018 f8e5 	bl	801d39c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b004      	add	sp, #16
 80051d8:	bc80      	pop	{r7}
 80051da:	bc08      	pop	{r3}
 80051dc:	b002      	add	sp, #8
 80051de:	4718      	bx	r3

080051e0 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80051ea:	0018      	movs	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b002      	add	sp, #8
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 80051f6:	f7fe ff61 	bl	80040bc <RTC_IF_GetTimerValue>
 80051fa:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80051fc:	0018      	movs	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	0018      	movs	r0, r3
 800520e:	f7fe ffc3 	bl	8004198 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	46bd      	mov	sp, r7
 8005216:	b002      	add	sp, #8
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b08b      	sub	sp, #44	; 0x2c
 8005220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8005222:	2414      	movs	r4, #20
 8005224:	193b      	adds	r3, r7, r4
 8005226:	0018      	movs	r0, r3
 8005228:	2314      	movs	r3, #20
 800522a:	001a      	movs	r2, r3
 800522c:	2100      	movs	r1, #0
 800522e:	f018 ff50 	bl	801e0d2 <memset>

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 8005232:	4b4a      	ldr	r3, [pc, #296]	; (800535c <DBG_Init+0x140>)
 8005234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005236:	4b49      	ldr	r3, [pc, #292]	; (800535c <DBG_Init+0x140>)
 8005238:	2102      	movs	r1, #2
 800523a:	430a      	orrs	r2, r1
 800523c:	62da      	str	r2, [r3, #44]	; 0x2c
 800523e:	4b47      	ldr	r3, [pc, #284]	; (800535c <DBG_Init+0x140>)
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	2202      	movs	r2, #2
 8005244:	4013      	ands	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]
  DGB_LINE2_CLK_ENABLE();
 800524a:	4b44      	ldr	r3, [pc, #272]	; (800535c <DBG_Init+0x140>)
 800524c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524e:	4b43      	ldr	r3, [pc, #268]	; (800535c <DBG_Init+0x140>)
 8005250:	2102      	movs	r1, #2
 8005252:	430a      	orrs	r2, r1
 8005254:	62da      	str	r2, [r3, #44]	; 0x2c
 8005256:	4b41      	ldr	r3, [pc, #260]	; (800535c <DBG_Init+0x140>)
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	2202      	movs	r2, #2
 800525c:	4013      	ands	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
  DGB_LINE3_CLK_ENABLE();
 8005262:	4b3e      	ldr	r3, [pc, #248]	; (800535c <DBG_Init+0x140>)
 8005264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005266:	4b3d      	ldr	r3, [pc, #244]	; (800535c <DBG_Init+0x140>)
 8005268:	2102      	movs	r1, #2
 800526a:	430a      	orrs	r2, r1
 800526c:	62da      	str	r2, [r3, #44]	; 0x2c
 800526e:	4b3b      	ldr	r3, [pc, #236]	; (800535c <DBG_Init+0x140>)
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	2202      	movs	r2, #2
 8005274:	4013      	ands	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	68bb      	ldr	r3, [r7, #8]
  DGB_LINE4_CLK_ENABLE();
 800527a:	4b38      	ldr	r3, [pc, #224]	; (800535c <DBG_Init+0x140>)
 800527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527e:	4b37      	ldr	r3, [pc, #220]	; (800535c <DBG_Init+0x140>)
 8005280:	2102      	movs	r1, #2
 8005282:	430a      	orrs	r2, r1
 8005284:	62da      	str	r2, [r3, #44]	; 0x2c
 8005286:	4b35      	ldr	r3, [pc, #212]	; (800535c <DBG_Init+0x140>)
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	2202      	movs	r2, #2
 800528c:	4013      	ands	r3, r2
 800528e:	607b      	str	r3, [r7, #4]
 8005290:	687b      	ldr	r3, [r7, #4]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8005292:	0021      	movs	r1, r4
 8005294:	187b      	adds	r3, r7, r1
 8005296:	2201      	movs	r2, #1
 8005298:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 800529a:	187b      	adds	r3, r7, r1
 800529c:	2201      	movs	r2, #1
 800529e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 80052a0:	187b      	adds	r3, r7, r1
 80052a2:	2203      	movs	r2, #3
 80052a4:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	2280      	movs	r2, #128	; 0x80
 80052aa:	0152      	lsls	r2, r2, #5
 80052ac:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 80052ae:	000c      	movs	r4, r1
 80052b0:	187b      	adds	r3, r7, r1
 80052b2:	4a2b      	ldr	r2, [pc, #172]	; (8005360 <DBG_Init+0x144>)
 80052b4:	0019      	movs	r1, r3
 80052b6:	0010      	movs	r0, r2
 80052b8:	f002 fb4e 	bl	8007958 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 80052bc:	0021      	movs	r1, r4
 80052be:	187b      	adds	r3, r7, r1
 80052c0:	2280      	movs	r2, #128	; 0x80
 80052c2:	0192      	lsls	r2, r2, #6
 80052c4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 80052c6:	000c      	movs	r4, r1
 80052c8:	187b      	adds	r3, r7, r1
 80052ca:	4a25      	ldr	r2, [pc, #148]	; (8005360 <DBG_Init+0x144>)
 80052cc:	0019      	movs	r1, r3
 80052ce:	0010      	movs	r0, r2
 80052d0:	f002 fb42 	bl	8007958 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 80052d4:	0021      	movs	r1, r4
 80052d6:	187b      	adds	r3, r7, r1
 80052d8:	2280      	movs	r2, #128	; 0x80
 80052da:	01d2      	lsls	r2, r2, #7
 80052dc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 80052de:	000c      	movs	r4, r1
 80052e0:	187b      	adds	r3, r7, r1
 80052e2:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <DBG_Init+0x144>)
 80052e4:	0019      	movs	r1, r3
 80052e6:	0010      	movs	r0, r2
 80052e8:	f002 fb36 	bl	8007958 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 80052ec:	0021      	movs	r1, r4
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	0212      	lsls	r2, r2, #8
 80052f4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 80052f6:	187b      	adds	r3, r7, r1
 80052f8:	4a19      	ldr	r2, [pc, #100]	; (8005360 <DBG_Init+0x144>)
 80052fa:	0019      	movs	r1, r3
 80052fc:	0010      	movs	r0, r2
 80052fe:	f002 fb2b 	bl	8007958 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	015b      	lsls	r3, r3, #5
 8005306:	4816      	ldr	r0, [pc, #88]	; (8005360 <DBG_Init+0x144>)
 8005308:	2200      	movs	r2, #0
 800530a:	0019      	movs	r1, r3
 800530c:	f002 fda1 	bl	8007e52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	019b      	lsls	r3, r3, #6
 8005314:	4812      	ldr	r0, [pc, #72]	; (8005360 <DBG_Init+0x144>)
 8005316:	2200      	movs	r2, #0
 8005318:	0019      	movs	r1, r3
 800531a:	f002 fd9a 	bl	8007e52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	01db      	lsls	r3, r3, #7
 8005322:	480f      	ldr	r0, [pc, #60]	; (8005360 <DBG_Init+0x144>)
 8005324:	2200      	movs	r2, #0
 8005326:	0019      	movs	r1, r3
 8005328:	f002 fd93 	bl	8007e52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	480b      	ldr	r0, [pc, #44]	; (8005360 <DBG_Init+0x144>)
 8005332:	2200      	movs	r2, #0
 8005334:	0019      	movs	r1, r3
 8005336:	f002 fd8c 	bl	8007e52 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 800533a:	4b08      	ldr	r3, [pc, #32]	; (800535c <DBG_Init+0x140>)
 800533c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533e:	4b07      	ldr	r3, [pc, #28]	; (800535c <DBG_Init+0x140>)
 8005340:	2180      	movs	r1, #128	; 0x80
 8005342:	03c9      	lsls	r1, r1, #15
 8005344:	430a      	orrs	r2, r1
 8005346:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8005348:	f001 f97e 	bl	8006648 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800534c:	f001 f98a 	bl	8006664 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8005350:	f001 f996 	bl	8006680 <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8005354:	46c0      	nop			; (mov r8, r8)
 8005356:	46bd      	mov	sp, r7
 8005358:	b00b      	add	sp, #44	; 0x2c
 800535a:	bd90      	pop	{r4, r7, pc}
 800535c:	40021000 	.word	0x40021000
 8005360:	50000400 	.word	0x50000400

08005364 <EnvSensors_Init>:

  /* USER CODE END EnvSensors_Read_Last */
}

void  EnvSensors_Init(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 8005368:	46c0      	nop			; (mov r8, r8)
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <MX_USART2_Init>:
DMA_HandleTypeDef hdma_tx;

/* USART2 init function */

void MX_USART2_Init(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0

  husart2.Instance        = USART2;
 8005374:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <MX_USART2_Init+0x48>)
 8005376:	4a11      	ldr	r2, [pc, #68]	; (80053bc <MX_USART2_Init+0x4c>)
 8005378:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 800537a:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <MX_USART2_Init+0x48>)
 800537c:	22e1      	movs	r2, #225	; 0xe1
 800537e:	0252      	lsls	r2, r2, #9
 8005380:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005382:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <MX_USART2_Init+0x48>)
 8005384:	2200      	movs	r2, #0
 8005386:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <MX_USART2_Init+0x48>)
 800538a:	2200      	movs	r2, #0
 800538c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 800538e:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <MX_USART2_Init+0x48>)
 8005390:	2200      	movs	r2, #0
 8005392:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode       = UART_MODE_TX;
 8005394:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <MX_USART2_Init+0x48>)
 8005396:	2208      	movs	r2, #8
 8005398:	615a      	str	r2, [r3, #20]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <MX_USART2_Init+0x48>)
 800539c:	2200      	movs	r2, #0
 800539e:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <MX_USART2_Init+0x48>)
 80053a2:	0018      	movs	r0, r3
 80053a4:	f005 fcc4 	bl	800ad30 <HAL_UART_Init>
 80053a8:	1e03      	subs	r3, r0, #0
 80053aa:	d001      	beq.n	80053b0 <MX_USART2_Init+0x40>
  {
    Error_Handler();
 80053ac:	f7fe fce0 	bl	8003d70 <Error_Handler>
  }
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	20001660 	.word	0x20001660
 80053bc:	40004400 	.word	0x40004400

080053c0 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b095      	sub	sp, #84	; 0x54
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c8:	233c      	movs	r3, #60	; 0x3c
 80053ca:	18fb      	adds	r3, r7, r3
 80053cc:	0018      	movs	r0, r3
 80053ce:	2314      	movs	r3, #20
 80053d0:	001a      	movs	r2, r3
 80053d2:	2100      	movs	r1, #0
 80053d4:	f018 fe7d 	bl	801e0d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053d8:	2418      	movs	r4, #24
 80053da:	193b      	adds	r3, r7, r4
 80053dc:	0018      	movs	r0, r3
 80053de:	2324      	movs	r3, #36	; 0x24
 80053e0:	001a      	movs	r2, r3
 80053e2:	2100      	movs	r1, #0
 80053e4:	f018 fe75 	bl	801e0d2 <memset>
  if (uartHandle->Instance == USART2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a57      	ldr	r2, [pc, #348]	; (800554c <HAL_UART_MspInit+0x18c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d000      	beq.n	80053f4 <HAL_UART_MspInit+0x34>
 80053f2:	e0a6      	b.n	8005542 <HAL_UART_MspInit+0x182>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 80053f4:	4b56      	ldr	r3, [pc, #344]	; (8005550 <HAL_UART_MspInit+0x190>)
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	4b55      	ldr	r3, [pc, #340]	; (8005550 <HAL_UART_MspInit+0x190>)
 80053fa:	2101      	movs	r1, #1
 80053fc:	430a      	orrs	r2, r1
 80053fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8005400:	4b53      	ldr	r3, [pc, #332]	; (8005550 <HAL_UART_MspInit+0x190>)
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	2201      	movs	r2, #1
 8005406:	4013      	ands	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 800540c:	4b50      	ldr	r3, [pc, #320]	; (8005550 <HAL_UART_MspInit+0x190>)
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b4f      	ldr	r3, [pc, #316]	; (8005550 <HAL_UART_MspInit+0x190>)
 8005412:	2101      	movs	r1, #1
 8005414:	430a      	orrs	r2, r1
 8005416:	62da      	str	r2, [r3, #44]	; 0x2c
 8005418:	4b4d      	ldr	r3, [pc, #308]	; (8005550 <HAL_UART_MspInit+0x190>)
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	2201      	movs	r2, #1
 800541e:	4013      	ands	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 8005424:	4b4a      	ldr	r3, [pc, #296]	; (8005550 <HAL_UART_MspInit+0x190>)
 8005426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005428:	4b49      	ldr	r3, [pc, #292]	; (8005550 <HAL_UART_MspInit+0x190>)
 800542a:	2180      	movs	r1, #128	; 0x80
 800542c:	0289      	lsls	r1, r1, #10
 800542e:	430a      	orrs	r2, r1
 8005430:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8005432:	4b47      	ldr	r3, [pc, #284]	; (8005550 <HAL_UART_MspInit+0x190>)
 8005434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005436:	4b46      	ldr	r3, [pc, #280]	; (8005550 <HAL_UART_MspInit+0x190>)
 8005438:	2101      	movs	r1, #1
 800543a:	430a      	orrs	r2, r1
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
 800543e:	4b44      	ldr	r3, [pc, #272]	; (8005550 <HAL_UART_MspInit+0x190>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	2201      	movs	r2, #1
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800544a:	4b41      	ldr	r3, [pc, #260]	; (8005550 <HAL_UART_MspInit+0x190>)
 800544c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800544e:	4b40      	ldr	r3, [pc, #256]	; (8005550 <HAL_UART_MspInit+0x190>)
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	0289      	lsls	r1, r1, #10
 8005454:	430a      	orrs	r2, r1
 8005456:	639a      	str	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005458:	193b      	adds	r3, r7, r4
 800545a:	2202      	movs	r2, #2
 800545c:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800545e:	193b      	adds	r3, r7, r4
 8005460:	2204      	movs	r2, #4
 8005462:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005464:	193b      	adds	r3, r7, r4
 8005466:	0018      	movs	r0, r3
 8005468:	f004 f9e4 	bl	8009834 <HAL_RCCEx_PeriphCLKConfig>
 800546c:	1e03      	subs	r3, r0, #0
 800546e:	d001      	beq.n	8005474 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8005470:	f7fe fc7e 	bl	8003d70 <Error_Handler>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8005474:	243c      	movs	r4, #60	; 0x3c
 8005476:	193b      	adds	r3, r7, r4
 8005478:	2204      	movs	r2, #4
 800547a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547c:	193b      	adds	r3, r7, r4
 800547e:	2202      	movs	r2, #2
 8005480:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005482:	193b      	adds	r3, r7, r4
 8005484:	2200      	movs	r2, #0
 8005486:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005488:	193b      	adds	r3, r7, r4
 800548a:	2203      	movs	r2, #3
 800548c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800548e:	193b      	adds	r3, r7, r4
 8005490:	2204      	movs	r2, #4
 8005492:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8005494:	193a      	adds	r2, r7, r4
 8005496:	23a0      	movs	r3, #160	; 0xa0
 8005498:	05db      	lsls	r3, r3, #23
 800549a:	0011      	movs	r1, r2
 800549c:	0018      	movs	r0, r3
 800549e:	f002 fa5b 	bl	8007958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80054a2:	0021      	movs	r1, r4
 80054a4:	187b      	adds	r3, r7, r1
 80054a6:	2208      	movs	r2, #8
 80054a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054aa:	187b      	adds	r3, r7, r1
 80054ac:	2202      	movs	r2, #2
 80054ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	2200      	movs	r2, #0
 80054b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80054b6:	187b      	adds	r3, r7, r1
 80054b8:	2203      	movs	r2, #3
 80054ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	2204      	movs	r2, #4
 80054c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80054c2:	187a      	adds	r2, r7, r1
 80054c4:	23a0      	movs	r3, #160	; 0xa0
 80054c6:	05db      	lsls	r3, r3, #23
 80054c8:	0011      	movs	r1, r2
 80054ca:	0018      	movs	r0, r3
 80054cc:	f002 fa44 	bl	8007958 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80054d0:	4b20      	ldr	r3, [pc, #128]	; (8005554 <HAL_UART_MspInit+0x194>)
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <HAL_UART_MspInit+0x198>)
 80054d4:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 80054d6:	4b1f      	ldr	r3, [pc, #124]	; (8005554 <HAL_UART_MspInit+0x194>)
 80054d8:	2204      	movs	r2, #4
 80054da:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80054dc:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <HAL_UART_MspInit+0x194>)
 80054de:	2210      	movs	r2, #16
 80054e0:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80054e2:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <HAL_UART_MspInit+0x194>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80054e8:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <HAL_UART_MspInit+0x194>)
 80054ea:	2280      	movs	r2, #128	; 0x80
 80054ec:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054ee:	4b19      	ldr	r3, [pc, #100]	; (8005554 <HAL_UART_MspInit+0x194>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80054f4:	4b17      	ldr	r3, [pc, #92]	; (8005554 <HAL_UART_MspInit+0x194>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 80054fa:	4b16      	ldr	r3, [pc, #88]	; (8005554 <HAL_UART_MspInit+0x194>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8005500:	4b14      	ldr	r3, [pc, #80]	; (8005554 <HAL_UART_MspInit+0x194>)
 8005502:	2200      	movs	r2, #0
 8005504:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8005506:	4b13      	ldr	r3, [pc, #76]	; (8005554 <HAL_UART_MspInit+0x194>)
 8005508:	0018      	movs	r0, r3
 800550a:	f001 ff2f 	bl	800736c <HAL_DMA_Init>
 800550e:	1e03      	subs	r3, r0, #0
 8005510:	d001      	beq.n	8005516 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8005512:	f7fe fc2d 	bl	8003d70 <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a0e      	ldr	r2, [pc, #56]	; (8005554 <HAL_UART_MspInit+0x194>)
 800551a:	66da      	str	r2, [r3, #108]	; 0x6c
 800551c:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <HAL_UART_MspInit+0x194>)
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	629a      	str	r2, [r3, #40]	; 0x28

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8005522:	2201      	movs	r2, #1
 8005524:	2100      	movs	r1, #0
 8005526:	200b      	movs	r0, #11
 8005528:	f001 feea 	bl	8007300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800552c:	200b      	movs	r0, #11
 800552e:	f001 fefc 	bl	800732a <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8005532:	2201      	movs	r2, #1
 8005534:	2100      	movs	r1, #0
 8005536:	201c      	movs	r0, #28
 8005538:	f001 fee2 	bl	8007300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800553c:	201c      	movs	r0, #28
 800553e:	f001 fef4 	bl	800732a <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	46bd      	mov	sp, r7
 8005546:	b015      	add	sp, #84	; 0x54
 8005548:	bd90      	pop	{r4, r7, pc}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	40004400 	.word	0x40004400
 8005550:	40021000 	.word	0x40021000
 8005554:	20001618 	.word	0x20001618
 8005558:	40020080 	.word	0x40020080

0800555c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == USART2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a0d      	ldr	r2, [pc, #52]	; (80055a0 <HAL_UART_MspDeInit+0x44>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d113      	bne.n	8005596 <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <HAL_UART_MspDeInit+0x48>)
 8005570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005572:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <HAL_UART_MspDeInit+0x48>)
 8005574:	490c      	ldr	r1, [pc, #48]	; (80055a8 <HAL_UART_MspDeInit+0x4c>)
 8005576:	400a      	ands	r2, r1
 8005578:	639a      	str	r2, [r3, #56]	; 0x38

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 800557a:	23a0      	movs	r3, #160	; 0xa0
 800557c:	05db      	lsls	r3, r3, #23
 800557e:	210c      	movs	r1, #12
 8005580:	0018      	movs	r0, r3
 8005582:	f002 fb67 	bl	8007c54 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800558a:	0018      	movs	r0, r3
 800558c:	f001 ff66 	bl	800745c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005590:	201c      	movs	r0, #28
 8005592:	f001 feda 	bl	800734a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	b002      	add	sp, #8
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	40004400 	.word	0x40004400
 80055a4:	40021000 	.word	0x40021000
 80055a8:	fffdffff 	.word	0xfffdffff

080055ac <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <vcom_Init+0x20>)
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 80055ba:	f7fe fb19 	bl	8003bf0 <MX_DMA_Init>
  MX_USART2_Init();
 80055be:	f7ff fed7 	bl	8005370 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
 80055c2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b002      	add	sp, #8
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000408 	.word	0x20000408

080055d0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <vcom_DeInit+0x34>)
 80055d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055d8:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <vcom_DeInit+0x34>)
 80055da:	2180      	movs	r1, #128	; 0x80
 80055dc:	0289      	lsls	r1, r1, #10
 80055de:	430a      	orrs	r2, r1
 80055e0:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 80055e2:	4b08      	ldr	r3, [pc, #32]	; (8005604 <vcom_DeInit+0x34>)
 80055e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <vcom_DeInit+0x34>)
 80055e8:	4907      	ldr	r1, [pc, #28]	; (8005608 <vcom_DeInit+0x38>)
 80055ea:	400a      	ands	r2, r1
 80055ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 80055ee:	4b07      	ldr	r3, [pc, #28]	; (800560c <vcom_DeInit+0x3c>)
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7ff ffb3 	bl	800555c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80055f6:	200b      	movs	r0, #11
 80055f8:	f001 fea7 	bl	800734a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80055fc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80055fe:	0018      	movs	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40021000 	.word	0x40021000
 8005608:	fffdffff 	.word	0xfffdffff
 800560c:	20001660 	.word	0x20001660

08005610 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	000a      	movs	r2, r1
 800561a:	1cbb      	adds	r3, r7, #2
 800561c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 800561e:	1cbb      	adds	r3, r7, #2
 8005620:	881a      	ldrh	r2, [r3, #0]
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <vcom_Trace_DMA+0x28>)
 8005626:	0018      	movs	r0, r3
 8005628:	f005 fcd6 	bl	800afd8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800562c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b002      	add	sp, #8
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	20001660 	.word	0x20001660

0800563c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8005644:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <vcom_ReceiveInit+0x80>)
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800564a:	2108      	movs	r1, #8
 800564c:	187b      	adds	r3, r7, r1
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	0392      	lsls	r2, r2, #14
 8005652:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8005654:	187b      	adds	r3, r7, r1
 8005656:	481a      	ldr	r0, [pc, #104]	; (80056c0 <vcom_ReceiveInit+0x84>)
 8005658:	6819      	ldr	r1, [r3, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	f006 fe14 	bl	800c288 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8005660:	46c0      	nop			; (mov r8, r8)
 8005662:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <vcom_ReceiveInit+0x84>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	025b      	lsls	r3, r3, #9
 800566c:	401a      	ands	r2, r3
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	025b      	lsls	r3, r3, #9
 8005672:	429a      	cmp	r2, r3
 8005674:	d0f5      	beq.n	8005662 <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <vcom_ReceiveInit+0x84>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	03db      	lsls	r3, r3, #15
 8005682:	401a      	ands	r2, r3
 8005684:	2380      	movs	r3, #128	; 0x80
 8005686:	03db      	lsls	r3, r3, #15
 8005688:	429a      	cmp	r2, r3
 800568a:	d1f5      	bne.n	8005678 <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 800568c:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <vcom_ReceiveInit+0x84>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <vcom_ReceiveInit+0x84>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	03c9      	lsls	r1, r1, #15
 800569a:	430a      	orrs	r2, r1
 800569c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <vcom_ReceiveInit+0x84>)
 80056a0:	0018      	movs	r0, r3
 80056a2:	f006 fe57 	bl	800c354 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 80056a6:	4907      	ldr	r1, [pc, #28]	; (80056c4 <vcom_ReceiveInit+0x88>)
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <vcom_ReceiveInit+0x84>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	0018      	movs	r0, r3
 80056ae:	f005 fc3b 	bl	800af28 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80056b2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80056b4:	0018      	movs	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b004      	add	sp, #16
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	2000040c 	.word	0x2000040c
 80056c0:	20001660 	.word	0x20001660
 80056c4:	200016e4 	.word	0x200016e4

080056c8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <HAL_UART_TxCpltCallback+0x18>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2000      	movs	r0, #0
 80056d6:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80056d8:	46c0      	nop			; (mov r8, r8)
 80056da:	46bd      	mov	sp, r7
 80056dc:	b002      	add	sp, #8
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000408 	.word	0x20000408

080056e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <HAL_UART_RxCpltCallback+0x3c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <HAL_UART_RxCpltCallback+0x26>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2280      	movs	r2, #128	; 0x80
 80056f8:	589b      	ldr	r3, [r3, r2]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d105      	bne.n	800570a <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <HAL_UART_RxCpltCallback+0x3c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4808      	ldr	r0, [pc, #32]	; (8005724 <HAL_UART_RxCpltCallback+0x40>)
 8005704:	2200      	movs	r2, #0
 8005706:	2101      	movs	r1, #1
 8005708:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 800570a:	4906      	ldr	r1, [pc, #24]	; (8005724 <HAL_UART_RxCpltCallback+0x40>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	0018      	movs	r0, r3
 8005712:	f005 fc09 	bl	800af28 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	46bd      	mov	sp, r7
 800571a:	b002      	add	sp, #8
 800571c:	bd80      	pop	{r7, pc}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	2000040c 	.word	0x2000040c
 8005724:	200016e4 	.word	0x200016e4

08005728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005728:	480d      	ldr	r0, [pc, #52]	; (8005760 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800572a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800572c:	480d      	ldr	r0, [pc, #52]	; (8005764 <LoopForever+0x6>)
  ldr r1, =_edata
 800572e:	490e      	ldr	r1, [pc, #56]	; (8005768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005730:	4a0e      	ldr	r2, [pc, #56]	; (800576c <LoopForever+0xe>)
  movs r3, #0
 8005732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005734:	e002      	b.n	800573c <LoopCopyDataInit>

08005736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800573a:	3304      	adds	r3, #4

0800573c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800573c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800573e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005740:	d3f9      	bcc.n	8005736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005742:	4a0b      	ldr	r2, [pc, #44]	; (8005770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005744:	4c0b      	ldr	r4, [pc, #44]	; (8005774 <LoopForever+0x16>)
  movs r3, #0
 8005746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005748:	e001      	b.n	800574e <LoopFillZerobss>

0800574a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800574a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800574c:	3204      	adds	r2, #4

0800574e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800574e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005750:	d3fb      	bcc.n	800574a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005752:	f000 feeb 	bl	800652c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005756:	f018 fc8f 	bl	801e078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800575a:	f7fe fa67 	bl	8003c2c <main>

0800575e <LoopForever>:

LoopForever:
    b LoopForever
 800575e:	e7fe      	b.n	800575e <LoopForever>
   ldr   r0, =_estack
 8005760:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005768:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 800576c:	0802011c 	.word	0x0802011c
  ldr r2, =_sbss
 8005770:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8005774:	200017e0 	.word	0x200017e0

08005778 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005778:	e7fe      	b.n	8005778 <ADC1_COMP_IRQHandler>
	...

0800577c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005784:	4b11      	ldr	r3, [pc, #68]	; (80057cc <_sbrk+0x50>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <_sbrk+0x16>
		heap_end = &end;
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <_sbrk+0x50>)
 800578e:	4a10      	ldr	r2, [pc, #64]	; (80057d0 <_sbrk+0x54>)
 8005790:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005792:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <_sbrk+0x50>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <_sbrk+0x50>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	18d2      	adds	r2, r2, r3
 80057a0:	466b      	mov	r3, sp
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d907      	bls.n	80057b6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80057a6:	f018 fc61 	bl	801e06c <__errno>
 80057aa:	0003      	movs	r3, r0
 80057ac:	220c      	movs	r2, #12
 80057ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80057b0:	2301      	movs	r3, #1
 80057b2:	425b      	negs	r3, r3
 80057b4:	e006      	b.n	80057c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <_sbrk+0x50>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	18d2      	adds	r2, r2, r3
 80057be:	4b03      	ldr	r3, [pc, #12]	; (80057cc <_sbrk+0x50>)
 80057c0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80057c2:	68fb      	ldr	r3, [r7, #12]
}
 80057c4:	0018      	movs	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b004      	add	sp, #16
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20000414 	.word	0x20000414
 80057d0:	200017e0 	.word	0x200017e0

080057d4 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80057da:	2300      	movs	r3, #0
 80057dc:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80057de:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <BSP_SPI1_Init+0x40>)
 80057e0:	4a0d      	ldr	r2, [pc, #52]	; (8005818 <BSP_SPI1_Init+0x44>)
 80057e2:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <BSP_SPI1_Init+0x40>)
 80057e6:	0018      	movs	r0, r3
 80057e8:	f005 f9c1 	bl	800ab6e <HAL_SPI_GetState>
 80057ec:	1e03      	subs	r3, r0, #0
 80057ee:	d10c      	bne.n	800580a <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 80057f0:	4b08      	ldr	r3, [pc, #32]	; (8005814 <BSP_SPI1_Init+0x40>)
 80057f2:	0018      	movs	r0, r3
 80057f4:	f000 f87e 	bl	80058f4 <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <BSP_SPI1_Init+0x40>)
 80057fa:	0018      	movs	r0, r3
 80057fc:	f000 f830 	bl	8005860 <MX_SPI1_Init>
 8005800:	1e03      	subs	r3, r0, #0
 8005802:	d002      	beq.n	800580a <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8005804:	2308      	movs	r3, #8
 8005806:	425b      	negs	r3, r3
 8005808:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800580a:	687b      	ldr	r3, [r7, #4]
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	b002      	add	sp, #8
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20001504 	.word	0x20001504
 8005818:	40013000 	.word	0x40013000

0800581c <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b089      	sub	sp, #36	; 0x24
 8005820:	af02      	add	r7, sp, #8
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	1dbb      	adds	r3, r7, #6
 8005828:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800582a:	2306      	movs	r3, #6
 800582c:	425b      	negs	r3, r3
 800582e:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8005830:	1dbb      	adds	r3, r7, #6
 8005832:	881c      	ldrh	r4, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	68f9      	ldr	r1, [r7, #12]
 8005838:	4808      	ldr	r0, [pc, #32]	; (800585c <BSP_SPI1_SendRecv+0x40>)
 800583a:	23fa      	movs	r3, #250	; 0xfa
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	0023      	movs	r3, r4
 8005842:	f004 ffd9 	bl	800a7f8 <HAL_SPI_TransmitReceive>
 8005846:	1e03      	subs	r3, r0, #0
 8005848:	d102      	bne.n	8005850 <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 800584a:	1dbb      	adds	r3, r7, #6
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005850:	697b      	ldr	r3, [r7, #20]
}
 8005852:	0018      	movs	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	b007      	add	sp, #28
 8005858:	bd90      	pop	{r4, r7, pc}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	20001504 	.word	0x20001504

08005860 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005868:	240f      	movs	r4, #15
 800586a:	193b      	adds	r3, r7, r4
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a1e      	ldr	r2, [pc, #120]	; (80058ec <MX_SPI1_Init+0x8c>)
 8005874:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2282      	movs	r2, #130	; 0x82
 800587a:	0052      	lsls	r2, r2, #1
 800587c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2280      	movs	r2, #128	; 0x80
 800589a:	0092      	lsls	r2, r2, #2
 800589c:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 800589e:	f003 ffb3 	bl	8009808 <HAL_RCC_GetPCLK2Freq>
 80058a2:	0003      	movs	r3, r0
 80058a4:	4a12      	ldr	r2, [pc, #72]	; (80058f0 <MX_SPI1_Init+0x90>)
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 f867 	bl	800597c <SPI_GetPrescaler>
 80058ae:	0002      	movs	r2, r0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2207      	movs	r2, #7
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f004 fef6 	bl	800a6c0 <HAL_SPI_Init>
 80058d4:	1e03      	subs	r3, r0, #0
 80058d6:	d002      	beq.n	80058de <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 80058d8:	193b      	adds	r3, r7, r4
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80058de:	230f      	movs	r3, #15
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	781b      	ldrb	r3, [r3, #0]
}
 80058e4:	0018      	movs	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b005      	add	sp, #20
 80058ea:	bd90      	pop	{r4, r7, pc}
 80058ec:	40013000 	.word	0x40013000
 80058f0:	00989680 	.word	0x00989680

080058f4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b089      	sub	sp, #36	; 0x24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 80058fc:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <SPI1_MspInit+0x80>)
 80058fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005900:	4b1c      	ldr	r3, [pc, #112]	; (8005974 <SPI1_MspInit+0x80>)
 8005902:	2180      	movs	r1, #128	; 0x80
 8005904:	0149      	lsls	r1, r1, #5
 8005906:	430a      	orrs	r2, r1
 8005908:	635a      	str	r2, [r3, #52]	; 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800590a:	240c      	movs	r4, #12
 800590c:	193b      	adds	r3, r7, r4
 800590e:	2202      	movs	r2, #2
 8005910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005912:	193b      	adds	r3, r7, r4
 8005914:	2200      	movs	r2, #0
 8005916:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005918:	193b      	adds	r3, r7, r4
 800591a:	2203      	movs	r2, #3
 800591c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800591e:	193b      	adds	r3, r7, r4
 8005920:	2200      	movs	r2, #0
 8005922:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8005924:	193b      	adds	r3, r7, r4
 8005926:	2280      	movs	r2, #128	; 0x80
 8005928:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800592a:	193a      	adds	r2, r7, r4
 800592c:	23a0      	movs	r3, #160	; 0xa0
 800592e:	05db      	lsls	r3, r3, #23
 8005930:	0011      	movs	r1, r2
 8005932:	0018      	movs	r0, r3
 8005934:	f002 f810 	bl	8007958 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8005938:	193b      	adds	r3, r7, r4
 800593a:	2200      	movs	r2, #0
 800593c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800593e:	193b      	adds	r3, r7, r4
 8005940:	2240      	movs	r2, #64	; 0x40
 8005942:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005944:	193a      	adds	r2, r7, r4
 8005946:	23a0      	movs	r3, #160	; 0xa0
 8005948:	05db      	lsls	r3, r3, #23
 800594a:	0011      	movs	r1, r2
 800594c:	0018      	movs	r0, r3
 800594e:	f002 f803 	bl	8007958 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8005952:	193b      	adds	r3, r7, r4
 8005954:	2200      	movs	r2, #0
 8005956:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8005958:	193b      	adds	r3, r7, r4
 800595a:	2208      	movs	r2, #8
 800595c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800595e:	193b      	adds	r3, r7, r4
 8005960:	4a05      	ldr	r2, [pc, #20]	; (8005978 <SPI1_MspInit+0x84>)
 8005962:	0019      	movs	r1, r3
 8005964:	0010      	movs	r0, r2
 8005966:	f001 fff7 	bl	8007958 <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	46bd      	mov	sp, r7
 800596e:	b009      	add	sp, #36	; 0x24
 8005970:	bd90      	pop	{r4, r7, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	40021000 	.word	0x40021000
 8005978:	50000400 	.word	0x50000400

0800597c <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8005992:	e00d      	b.n	80059b0 <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <SPI_GetPrescaler+0x4c>)
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	0092      	lsls	r2, r2, #2
 800599a:	58d3      	ldr	r3, [r2, r3]
 800599c:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	3301      	adds	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b07      	cmp	r3, #7
 80059a8:	d807      	bhi.n	80059ba <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	085b      	lsrs	r3, r3, #1
 80059ae:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d8ed      	bhi.n	8005994 <SPI_GetPrescaler+0x18>
 80059b8:	e000      	b.n	80059bc <SPI_GetPrescaler+0x40>
      break;
 80059ba:	46c0      	nop			; (mov r8, r8)
  }

  return presc;
 80059bc:	68fb      	ldr	r3, [r7, #12]
}
 80059be:	0018      	movs	r0, r3
 80059c0:	46bd      	mov	sp, r7
 80059c2:	b006      	add	sp, #24
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	0801f15c 	.word	0x0801f15c

080059cc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80059d6:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <BSP_I2C1_Init+0x70>)
 80059d8:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <BSP_I2C1_Init+0x74>)
 80059da:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter++ == 0)
 80059dc:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <BSP_I2C1_Init+0x78>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	1c59      	adds	r1, r3, #1
 80059e2:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <BSP_I2C1_Init+0x78>)
 80059e4:	6011      	str	r1, [r2, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d123      	bne.n	8005a32 <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80059ea:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <BSP_I2C1_Init+0x70>)
 80059ec:	0018      	movs	r0, r3
 80059ee:	f002 fd69 	bl	80084c4 <HAL_I2C_GetState>
 80059f2:	1e03      	subs	r3, r0, #0
 80059f4:	d11d      	bne.n	8005a32 <BSP_I2C1_Init+0x66>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80059f6:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <BSP_I2C1_Init+0x70>)
 80059f8:	0018      	movs	r0, r3
 80059fa:	f000 f873 	bl	8005ae4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d116      	bne.n	8005a32 <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if (MX_I2C1_Init(&hi2c1) != HAL_OK)
 8005a04:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <BSP_I2C1_Init+0x70>)
 8005a06:	0018      	movs	r0, r3
 8005a08:	f000 f81e 	bl	8005a48 <MX_I2C1_Init>
 8005a0c:	1e03      	subs	r3, r0, #0
 8005a0e:	d003      	beq.n	8005a18 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005a10:	2308      	movs	r3, #8
 8005a12:	425b      	negs	r3, r3
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	e00c      	b.n	8005a32 <BSP_I2C1_Init+0x66>
        }
        else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a18:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <BSP_I2C1_Init+0x70>)
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f002 ff9b 	bl	8008958 <HAL_I2CEx_ConfigAnalogFilter>
 8005a22:	1e03      	subs	r3, r0, #0
 8005a24:	d003      	beq.n	8005a2e <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005a26:	2308      	movs	r3, #8
 8005a28:	425b      	negs	r3, r3
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	e001      	b.n	8005a32 <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8005a32:	687b      	ldr	r3, [r7, #4]
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	200013b0 	.word	0x200013b0
 8005a40:	40005400 	.word	0x40005400
 8005a44:	20000418 	.word	0x20000418

08005a48 <MX_I2C1_Init>:
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a50:	240f      	movs	r4, #15
 8005a52:	193b      	adds	r3, r7, r4
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]
  hi2c->Instance = I2C1;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a20      	ldr	r2, [pc, #128]	; (8005adc <MX_I2C1_Init+0x94>)
 8005a5c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <MX_I2C1_Init+0x98>)
 8005a62:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f002 fa17 	bl	8007ec4 <HAL_I2C_Init>
 8005a96:	1e03      	subs	r3, r0, #0
 8005a98:	d002      	beq.n	8005aa0 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 8005a9a:	193b      	adds	r3, r7, r4
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f002 ff57 	bl	8008958 <HAL_I2CEx_ConfigAnalogFilter>
 8005aaa:	1e03      	subs	r3, r0, #0
 8005aac:	d003      	beq.n	8005ab6 <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 8005aae:	230f      	movs	r3, #15
 8005ab0:	18fb      	adds	r3, r7, r3
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2100      	movs	r1, #0
 8005aba:	0018      	movs	r0, r3
 8005abc:	f002 ff98 	bl	80089f0 <HAL_I2CEx_ConfigDigitalFilter>
 8005ac0:	1e03      	subs	r3, r0, #0
 8005ac2:	d003      	beq.n	8005acc <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8005ac4:	230f      	movs	r3, #15
 8005ac6:	18fb      	adds	r3, r7, r3
 8005ac8:	2201      	movs	r2, #1
 8005aca:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005acc:	230f      	movs	r3, #15
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	781b      	ldrb	r3, [r3, #0]
}
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b005      	add	sp, #20
 8005ad8:	bd90      	pop	{r4, r7, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	40005400 	.word	0x40005400
 8005ae0:	00707cbb 	.word	0x00707cbb

08005ae4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8005ae4:	b590      	push	{r4, r7, lr}
 8005ae6:	b089      	sub	sp, #36	; 0x24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aec:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <I2C1_MspInit+0x94>)
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	4b21      	ldr	r3, [pc, #132]	; (8005b78 <I2C1_MspInit+0x94>)
 8005af2:	2102      	movs	r1, #2
 8005af4:	430a      	orrs	r2, r1
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c
 8005af8:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <I2C1_MspInit+0x94>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	2202      	movs	r2, #2
 8005afe:	4013      	ands	r3, r2
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	68bb      	ldr	r3, [r7, #8]
  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
    */
  GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8005b04:	210c      	movs	r1, #12
 8005b06:	187b      	adds	r3, r7, r1
 8005b08:	2280      	movs	r2, #128	; 0x80
 8005b0a:	0052      	lsls	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b0e:	000c      	movs	r4, r1
 8005b10:	193b      	adds	r3, r7, r4
 8005b12:	2212      	movs	r2, #18
 8005b14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b16:	193b      	adds	r3, r7, r4
 8005b18:	2201      	movs	r2, #1
 8005b1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b1c:	193b      	adds	r3, r7, r4
 8005b1e:	2203      	movs	r2, #3
 8005b20:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8005b22:	193b      	adds	r3, r7, r4
 8005b24:	2204      	movs	r2, #4
 8005b26:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005b28:	193b      	adds	r3, r7, r4
 8005b2a:	4a14      	ldr	r2, [pc, #80]	; (8005b7c <I2C1_MspInit+0x98>)
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	0010      	movs	r0, r2
 8005b30:	f001 ff12 	bl	8007958 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8005b34:	0021      	movs	r1, r4
 8005b36:	187b      	adds	r3, r7, r1
 8005b38:	2280      	movs	r2, #128	; 0x80
 8005b3a:	0092      	lsls	r2, r2, #2
 8005b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b3e:	187b      	adds	r3, r7, r1
 8005b40:	2212      	movs	r2, #18
 8005b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b44:	187b      	adds	r3, r7, r1
 8005b46:	2201      	movs	r2, #1
 8005b48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b4a:	187b      	adds	r3, r7, r1
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8005b50:	187b      	adds	r3, r7, r1
 8005b52:	2204      	movs	r2, #4
 8005b54:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005b56:	187b      	adds	r3, r7, r1
 8005b58:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <I2C1_MspInit+0x98>)
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	0010      	movs	r0, r2
 8005b5e:	f001 fefb 	bl	8007958 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <I2C1_MspInit+0x94>)
 8005b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b66:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <I2C1_MspInit+0x94>)
 8005b68:	2180      	movs	r1, #128	; 0x80
 8005b6a:	0389      	lsls	r1, r1, #14
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8005b70:	46c0      	nop			; (mov r8, r8)
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b009      	add	sp, #36	; 0x24
 8005b76:	bd90      	pop	{r4, r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	50000400 	.word	0x50000400

08005b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b80:	b590      	push	{r4, r7, lr}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	0002      	movs	r2, r0
 8005b88:	6039      	str	r1, [r7, #0]
 8005b8a:	1dfb      	adds	r3, r7, #7
 8005b8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005b8e:	1dfb      	adds	r3, r7, #7
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b7f      	cmp	r3, #127	; 0x7f
 8005b94:	d828      	bhi.n	8005be8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b96:	4a2f      	ldr	r2, [pc, #188]	; (8005c54 <__NVIC_SetPriority+0xd4>)
 8005b98:	1dfb      	adds	r3, r7, #7
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	089b      	lsrs	r3, r3, #2
 8005ba0:	33c0      	adds	r3, #192	; 0xc0
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	589b      	ldr	r3, [r3, r2]
 8005ba6:	1dfa      	adds	r2, r7, #7
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	0011      	movs	r1, r2
 8005bac:	2203      	movs	r2, #3
 8005bae:	400a      	ands	r2, r1
 8005bb0:	00d2      	lsls	r2, r2, #3
 8005bb2:	21ff      	movs	r1, #255	; 0xff
 8005bb4:	4091      	lsls	r1, r2
 8005bb6:	000a      	movs	r2, r1
 8005bb8:	43d2      	mvns	r2, r2
 8005bba:	401a      	ands	r2, r3
 8005bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	019b      	lsls	r3, r3, #6
 8005bc2:	22ff      	movs	r2, #255	; 0xff
 8005bc4:	401a      	ands	r2, r3
 8005bc6:	1dfb      	adds	r3, r7, #7
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	2303      	movs	r3, #3
 8005bce:	4003      	ands	r3, r0
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005bd4:	481f      	ldr	r0, [pc, #124]	; (8005c54 <__NVIC_SetPriority+0xd4>)
 8005bd6:	1dfb      	adds	r3, r7, #7
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	b25b      	sxtb	r3, r3
 8005bdc:	089b      	lsrs	r3, r3, #2
 8005bde:	430a      	orrs	r2, r1
 8005be0:	33c0      	adds	r3, #192	; 0xc0
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005be6:	e031      	b.n	8005c4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005be8:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <__NVIC_SetPriority+0xd8>)
 8005bea:	1dfb      	adds	r3, r7, #7
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	0019      	movs	r1, r3
 8005bf0:	230f      	movs	r3, #15
 8005bf2:	400b      	ands	r3, r1
 8005bf4:	3b08      	subs	r3, #8
 8005bf6:	089b      	lsrs	r3, r3, #2
 8005bf8:	3306      	adds	r3, #6
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	18d3      	adds	r3, r2, r3
 8005bfe:	3304      	adds	r3, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	1dfa      	adds	r2, r7, #7
 8005c04:	7812      	ldrb	r2, [r2, #0]
 8005c06:	0011      	movs	r1, r2
 8005c08:	2203      	movs	r2, #3
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	00d2      	lsls	r2, r2, #3
 8005c0e:	21ff      	movs	r1, #255	; 0xff
 8005c10:	4091      	lsls	r1, r2
 8005c12:	000a      	movs	r2, r1
 8005c14:	43d2      	mvns	r2, r2
 8005c16:	401a      	ands	r2, r3
 8005c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	019b      	lsls	r3, r3, #6
 8005c1e:	22ff      	movs	r2, #255	; 0xff
 8005c20:	401a      	ands	r2, r3
 8005c22:	1dfb      	adds	r3, r7, #7
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	0018      	movs	r0, r3
 8005c28:	2303      	movs	r3, #3
 8005c2a:	4003      	ands	r3, r0
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005c30:	4809      	ldr	r0, [pc, #36]	; (8005c58 <__NVIC_SetPriority+0xd8>)
 8005c32:	1dfb      	adds	r3, r7, #7
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	001c      	movs	r4, r3
 8005c38:	230f      	movs	r3, #15
 8005c3a:	4023      	ands	r3, r4
 8005c3c:	3b08      	subs	r3, #8
 8005c3e:	089b      	lsrs	r3, r3, #2
 8005c40:	430a      	orrs	r2, r1
 8005c42:	3306      	adds	r3, #6
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	18c3      	adds	r3, r0, r3
 8005c48:	3304      	adds	r3, #4
 8005c4a:	601a      	str	r2, [r3, #0]
}
 8005c4c:	46c0      	nop			; (mov r8, r8)
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	b003      	add	sp, #12
 8005c52:	bd90      	pop	{r4, r7, pc}
 8005c54:	e000e100 	.word	0xe000e100
 8005c58:	e000ed00 	.word	0xe000ed00

08005c5c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08c      	sub	sp, #48	; 0x30
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	0002      	movs	r2, r0
 8005c64:	1dfb      	adds	r3, r7, #7
 8005c66:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005c68:	1dfb      	adds	r3, r7, #7
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d02f      	beq.n	8005cd0 <BSP_LED_Init+0x74>
 8005c70:	dc3a      	bgt.n	8005ce8 <BSP_LED_Init+0x8c>
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d01f      	beq.n	8005cb6 <BSP_LED_Init+0x5a>
 8005c76:	dc37      	bgt.n	8005ce8 <BSP_LED_Init+0x8c>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <BSP_LED_Init+0x26>
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d00d      	beq.n	8005c9c <BSP_LED_Init+0x40>
 8005c80:	e032      	b.n	8005ce8 <BSP_LED_Init+0x8c>
 8005c82:	4b2a      	ldr	r3, [pc, #168]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	4b29      	ldr	r3, [pc, #164]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005c88:	2102      	movs	r1, #2
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c8e:	4b27      	ldr	r3, [pc, #156]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	2202      	movs	r2, #2
 8005c94:	4013      	ands	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	e025      	b.n	8005ce8 <BSP_LED_Init+0x8c>
 8005c9c:	4b23      	ldr	r3, [pc, #140]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca0:	4b22      	ldr	r3, [pc, #136]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ca8:	4b20      	ldr	r3, [pc, #128]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	2201      	movs	r2, #1
 8005cae:	4013      	ands	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	e018      	b.n	8005ce8 <BSP_LED_Init+0x8c>
 8005cb6:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cc2:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	4013      	ands	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	e00b      	b.n	8005ce8 <BSP_LED_Init+0x8c>
 8005cd0:	4b16      	ldr	r3, [pc, #88]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005cd6:	2102      	movs	r1, #2
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cdc:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <BSP_LED_Init+0xd0>)
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005cea:	1dfb      	adds	r3, r7, #7
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <BSP_LED_Init+0xd4>)
 8005cf0:	0052      	lsls	r2, r2, #1
 8005cf2:	5ad3      	ldrh	r3, [r2, r3]
 8005cf4:	001a      	movs	r2, r3
 8005cf6:	211c      	movs	r1, #28
 8005cf8:	187b      	adds	r3, r7, r1
 8005cfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cfc:	187b      	adds	r3, r7, r1
 8005cfe:	2201      	movs	r2, #1
 8005d00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d02:	187b      	adds	r3, r7, r1
 8005d04:	2200      	movs	r2, #0
 8005d06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d08:	187b      	adds	r3, r7, r1
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005d0e:	1dfb      	adds	r3, r7, #7
 8005d10:	781a      	ldrb	r2, [r3, #0]
 8005d12:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <BSP_LED_Init+0xd8>)
 8005d14:	0092      	lsls	r2, r2, #2
 8005d16:	58d3      	ldr	r3, [r2, r3]
 8005d18:	187a      	adds	r2, r7, r1
 8005d1a:	0011      	movs	r1, r2
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f001 fe1b 	bl	8007958 <HAL_GPIO_Init>
}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	46bd      	mov	sp, r7
 8005d26:	b00c      	add	sp, #48	; 0x30
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	0801f17c 	.word	0x0801f17c
 8005d34:	2000004c 	.word	0x2000004c

08005d38 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	0002      	movs	r2, r0
 8005d40:	1dfb      	adds	r3, r7, #7
 8005d42:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8005d44:	1dfb      	adds	r3, r7, #7
 8005d46:	781a      	ldrb	r2, [r3, #0]
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <BSP_LED_On+0x30>)
 8005d4a:	0092      	lsls	r2, r2, #2
 8005d4c:	58d0      	ldr	r0, [r2, r3]
 8005d4e:	1dfb      	adds	r3, r7, #7
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <BSP_LED_On+0x34>)
 8005d54:	0052      	lsls	r2, r2, #1
 8005d56:	5ad3      	ldrh	r3, [r2, r3]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	0019      	movs	r1, r3
 8005d5c:	f002 f879 	bl	8007e52 <HAL_GPIO_WritePin>
}
 8005d60:	46c0      	nop			; (mov r8, r8)
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b002      	add	sp, #8
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	2000004c 	.word	0x2000004c
 8005d6c:	0801f17c 	.word	0x0801f17c

08005d70 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	0002      	movs	r2, r0
 8005d78:	1dfb      	adds	r3, r7, #7
 8005d7a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005d7c:	1dfb      	adds	r3, r7, #7
 8005d7e:	781a      	ldrb	r2, [r3, #0]
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <BSP_LED_Off+0x30>)
 8005d82:	0092      	lsls	r2, r2, #2
 8005d84:	58d0      	ldr	r0, [r2, r3]
 8005d86:	1dfb      	adds	r3, r7, #7
 8005d88:	781a      	ldrb	r2, [r3, #0]
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <BSP_LED_Off+0x34>)
 8005d8c:	0052      	lsls	r2, r2, #1
 8005d8e:	5ad3      	ldrh	r3, [r2, r3]
 8005d90:	2200      	movs	r2, #0
 8005d92:	0019      	movs	r1, r3
 8005d94:	f002 f85d 	bl	8007e52 <HAL_GPIO_WritePin>
}
 8005d98:	46c0      	nop			; (mov r8, r8)
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b002      	add	sp, #8
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	2000004c 	.word	0x2000004c
 8005da4:	0801f17c 	.word	0x0801f17c

08005da8 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	0002      	movs	r2, r0
 8005db0:	1dfb      	adds	r3, r7, #7
 8005db2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005db4:	1dfb      	adds	r3, r7, #7
 8005db6:	781a      	ldrb	r2, [r3, #0]
 8005db8:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <BSP_LED_Toggle+0x30>)
 8005dba:	0092      	lsls	r2, r2, #2
 8005dbc:	58d0      	ldr	r0, [r2, r3]
 8005dbe:	1dfb      	adds	r3, r7, #7
 8005dc0:	781a      	ldrb	r2, [r3, #0]
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <BSP_LED_Toggle+0x34>)
 8005dc4:	0052      	lsls	r2, r2, #1
 8005dc6:	5ad3      	ldrh	r3, [r2, r3]
 8005dc8:	0019      	movs	r1, r3
 8005dca:	f002 f85f 	bl	8007e8c <HAL_GPIO_TogglePin>
}
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b002      	add	sp, #8
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	2000004c 	.word	0x2000004c
 8005ddc:	0801f17c 	.word	0x0801f17c

08005de0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	0002      	movs	r2, r0
 8005de8:	1dfb      	adds	r3, r7, #7
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	1dbb      	adds	r3, r7, #6
 8005dee:	1c0a      	adds	r2, r1, #0
 8005df0:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005df2:	4b2b      	ldr	r3, [pc, #172]	; (8005ea0 <BSP_PB_Init+0xc0>)
 8005df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df6:	4b2a      	ldr	r3, [pc, #168]	; (8005ea0 <BSP_PB_Init+0xc0>)
 8005df8:	2102      	movs	r1, #2
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005dfe:	4b28      	ldr	r3, [pc, #160]	; (8005ea0 <BSP_PB_Init+0xc0>)
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	2202      	movs	r2, #2
 8005e04:	4013      	ands	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]
 8005e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e0a:	4b25      	ldr	r3, [pc, #148]	; (8005ea0 <BSP_PB_Init+0xc0>)
 8005e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e0e:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <BSP_PB_Init+0xc0>)
 8005e10:	2101      	movs	r1, #1
 8005e12:	430a      	orrs	r2, r1
 8005e14:	635a      	str	r2, [r3, #52]	; 0x34

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005e16:	1dbb      	adds	r3, r7, #6
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d117      	bne.n	8005e4e <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005e1e:	2304      	movs	r3, #4
 8005e20:	001a      	movs	r2, r3
 8005e22:	210c      	movs	r1, #12
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e28:	187b      	adds	r3, r7, r1
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005e2e:	187b      	adds	r3, r7, r1
 8005e30:	2202      	movs	r2, #2
 8005e32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e34:	187b      	adds	r3, r7, r1
 8005e36:	2203      	movs	r2, #3
 8005e38:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005e3a:	1dfb      	adds	r3, r7, #7
 8005e3c:	781a      	ldrb	r2, [r3, #0]
 8005e3e:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <BSP_PB_Init+0xc4>)
 8005e40:	0092      	lsls	r2, r2, #2
 8005e42:	58d3      	ldr	r3, [r2, r3]
 8005e44:	187a      	adds	r2, r7, r1
 8005e46:	0011      	movs	r1, r2
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f001 fd85 	bl	8007958 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8005e4e:	1dbb      	adds	r3, r7, #6
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d11f      	bne.n	8005e96 <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005e56:	2304      	movs	r3, #4
 8005e58:	001a      	movs	r2, r3
 8005e5a:	210c      	movs	r1, #12
 8005e5c:	187b      	adds	r3, r7, r1
 8005e5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e60:	187b      	adds	r3, r7, r1
 8005e62:	2200      	movs	r2, #0
 8005e64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	4a0f      	ldr	r2, [pc, #60]	; (8005ea8 <BSP_PB_Init+0xc8>)
 8005e6a:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005e6c:	1dfb      	adds	r3, r7, #7
 8005e6e:	781a      	ldrb	r2, [r3, #0]
 8005e70:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <BSP_PB_Init+0xc4>)
 8005e72:	0092      	lsls	r2, r2, #2
 8005e74:	58d3      	ldr	r3, [r2, r3]
 8005e76:	187a      	adds	r2, r7, r1
 8005e78:	0011      	movs	r1, r2
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f001 fd6c 	bl	8007958 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 8005e80:	2306      	movs	r3, #6
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	2103      	movs	r1, #3
 8005e86:	0018      	movs	r0, r3
 8005e88:	f7ff fe7a 	bl	8005b80 <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005e8c:	2306      	movs	r3, #6
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	0018      	movs	r0, r3
 8005e92:	f001 fa4a 	bl	800732a <HAL_NVIC_EnableIRQ>
  }
}
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b008      	add	sp, #32
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	2000005c 	.word	0x2000005c
 8005ea8:	10110000 	.word	0x10110000

08005eac <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005eb0:	2305      	movs	r3, #5
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	0002      	movs	r2, r0
 8005ec0:	1dfb      	adds	r3, r7, #7
 8005ec2:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 8005ec4:	1dfb      	adds	r3, r7, #7
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d10b      	bne.n	8005ee4 <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	0159      	lsls	r1, r3, #5
 8005ed0:	23a0      	movs	r3, #160	; 0xa0
 8005ed2:	05db      	lsls	r3, r3, #23
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f001 ffbb 	bl	8007e52 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8005edc:	2005      	movs	r0, #5
 8005ede:	f7ff f990 	bl	8005202 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8005ee2:	e007      	b.n	8005ef4 <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	0159      	lsls	r1, r3, #5
 8005ee8:	23a0      	movs	r3, #160	; 0xa0
 8005eea:	05db      	lsls	r3, r3, #23
 8005eec:	2200      	movs	r2, #0
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f001 ffaf 	bl	8007e52 <HAL_GPIO_WritePin>
}
 8005ef4:	46c0      	nop			; (mov r8, r8)
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b002      	add	sp, #8
 8005efa:	bd80      	pop	{r7, pc}

08005efc <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 8005efc:	b590      	push	{r4, r7, lr}
 8005efe:	b0a7      	sub	sp, #156	; 0x9c
 8005f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005f02:	2480      	movs	r4, #128	; 0x80
 8005f04:	193b      	adds	r3, r7, r4
 8005f06:	0018      	movs	r0, r3
 8005f08:	2314      	movs	r3, #20
 8005f0a:	001a      	movs	r2, r3
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	f018 f8e0 	bl	801e0d2 <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8005f12:	4b78      	ldr	r3, [pc, #480]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f16:	4b77      	ldr	r3, [pc, #476]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f18:	2102      	movs	r1, #2
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f1e:	4b75      	ldr	r3, [pc, #468]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	2202      	movs	r2, #2
 8005f24:	4013      	ands	r3, r2
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8005f2a:	4b72      	ldr	r3, [pc, #456]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2e:	4b71      	ldr	r3, [pc, #452]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f30:	2102      	movs	r1, #2
 8005f32:	430a      	orrs	r2, r1
 8005f34:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f36:	4b6f      	ldr	r3, [pc, #444]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	623b      	str	r3, [r7, #32]
 8005f40:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8005f42:	4b6c      	ldr	r3, [pc, #432]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	4b6b      	ldr	r3, [pc, #428]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f48:	2102      	movs	r1, #2
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f4e:	4b69      	ldr	r3, [pc, #420]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	2202      	movs	r2, #2
 8005f54:	4013      	ands	r3, r2
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8005f5a:	4b66      	ldr	r3, [pc, #408]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5e:	4b65      	ldr	r3, [pc, #404]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f60:	2104      	movs	r1, #4
 8005f62:	430a      	orrs	r2, r1
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f66:	4b63      	ldr	r3, [pc, #396]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
 8005f70:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 8005f72:	193b      	adds	r3, r7, r4
 8005f74:	2202      	movs	r2, #2
 8005f76:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005f78:	193b      	adds	r3, r7, r4
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2294      	movs	r2, #148	; 0x94
 8005f82:	18ba      	adds	r2, r7, r2
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	e020      	b.n	8005fca <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005f88:	4b5b      	ldr	r3, [pc, #364]	; (80060f8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 8005f8a:	2194      	movs	r1, #148	; 0x94
 8005f8c:	187a      	adds	r2, r7, r1
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	0092      	lsls	r2, r2, #2
 8005f92:	58d2      	ldr	r2, [r2, r3]
 8005f94:	2080      	movs	r0, #128	; 0x80
 8005f96:	183b      	adds	r3, r7, r0
 8005f98:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005f9a:	4b58      	ldr	r3, [pc, #352]	; (80060fc <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 8005f9c:	187a      	adds	r2, r7, r1
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	0052      	lsls	r2, r2, #1
 8005fa2:	5ad3      	ldrh	r3, [r2, r3]
 8005fa4:	001a      	movs	r2, r3
 8005fa6:	183b      	adds	r3, r7, r0
 8005fa8:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005faa:	4b55      	ldr	r3, [pc, #340]	; (8006100 <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 8005fac:	000c      	movs	r4, r1
 8005fae:	187a      	adds	r2, r7, r1
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	0092      	lsls	r2, r2, #2
 8005fb4:	58d3      	ldr	r3, [r2, r3]
 8005fb6:	183a      	adds	r2, r7, r0
 8005fb8:	0011      	movs	r1, r2
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f001 fccc 	bl	8007958 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005fc0:	193b      	adds	r3, r7, r4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	193a      	adds	r2, r7, r4
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	2394      	movs	r3, #148	; 0x94
 8005fcc:	18fb      	adds	r3, r7, r3
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d9d9      	bls.n	8005f88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 8005fd4:	2328      	movs	r3, #40	; 0x28
 8005fd6:	18fb      	adds	r3, r7, r3
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f000 fa07 	bl	80063ec <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 8005fde:	2480      	movs	r4, #128	; 0x80
 8005fe0:	193b      	adds	r3, r7, r4
 8005fe2:	2280      	movs	r2, #128	; 0x80
 8005fe4:	0212      	lsls	r2, r2, #8
 8005fe6:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fe8:	193b      	adds	r3, r7, r4
 8005fea:	2201      	movs	r2, #1
 8005fec:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 8005fee:	193b      	adds	r3, r7, r4
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 8005ff4:	4b3f      	ldr	r3, [pc, #252]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	4b3e      	ldr	r3, [pc, #248]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c
 8006000:	4b3c      	ldr	r3, [pc, #240]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	2201      	movs	r2, #1
 8006006:	4013      	ands	r3, r2
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 800600c:	193a      	adds	r2, r7, r4
 800600e:	23a0      	movs	r3, #160	; 0xa0
 8006010:	05db      	lsls	r3, r3, #23
 8006012:	0011      	movs	r1, r2
 8006014:	0018      	movs	r0, r3
 8006016:	f001 fc9f 	bl	8007958 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800601a:	2380      	movs	r3, #128	; 0x80
 800601c:	0219      	lsls	r1, r3, #8
 800601e:	23a0      	movs	r3, #160	; 0xa0
 8006020:	05db      	lsls	r3, r3, #23
 8006022:	2201      	movs	r2, #1
 8006024:	0018      	movs	r0, r3
 8006026:	f001 ff14 	bl	8007e52 <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 800602a:	4b32      	ldr	r3, [pc, #200]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800602c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602e:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006030:	2101      	movs	r1, #1
 8006032:	430a      	orrs	r2, r1
 8006034:	62da      	str	r2, [r3, #44]	; 0x2c
 8006036:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	2201      	movs	r2, #1
 800603c:	4013      	ands	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8006042:	4b2c      	ldr	r3, [pc, #176]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006048:	2101      	movs	r1, #1
 800604a:	430a      	orrs	r2, r1
 800604c:	62da      	str	r2, [r3, #44]	; 0x2c
 800604e:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	2201      	movs	r2, #1
 8006054:	4013      	ands	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 800605a:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006060:	2104      	movs	r1, #4
 8006062:	430a      	orrs	r2, r1
 8006064:	62da      	str	r2, [r3, #44]	; 0x2c
 8006066:	4b23      	ldr	r3, [pc, #140]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	2204      	movs	r2, #4
 800606c:	4013      	ands	r3, r2
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8006072:	4b20      	ldr	r3, [pc, #128]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	4b1f      	ldr	r3, [pc, #124]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006078:	2104      	movs	r1, #4
 800607a:	430a      	orrs	r2, r1
 800607c:	62da      	str	r2, [r3, #44]	; 0x2c
 800607e:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	2204      	movs	r2, #4
 8006084:	4013      	ands	r3, r2
 8006086:	607b      	str	r3, [r7, #4]
 8006088:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800608a:	193b      	adds	r3, r7, r4
 800608c:	2201      	movs	r2, #1
 800608e:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8006090:	193b      	adds	r3, r7, r4
 8006092:	2200      	movs	r2, #0
 8006094:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006096:	193b      	adds	r3, r7, r4
 8006098:	2203      	movs	r2, #3
 800609a:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 800609c:	193b      	adds	r3, r7, r4
 800609e:	2280      	movs	r2, #128	; 0x80
 80060a0:	0152      	lsls	r2, r2, #5
 80060a2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80060a4:	193a      	adds	r2, r7, r4
 80060a6:	23a0      	movs	r3, #160	; 0xa0
 80060a8:	05db      	lsls	r3, r3, #23
 80060aa:	0011      	movs	r1, r2
 80060ac:	0018      	movs	r0, r3
 80060ae:	f001 fc53 	bl	8007958 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 80060b2:	193b      	adds	r3, r7, r4
 80060b4:	2202      	movs	r2, #2
 80060b6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80060b8:	193a      	adds	r2, r7, r4
 80060ba:	23a0      	movs	r3, #160	; 0xa0
 80060bc:	05db      	lsls	r3, r3, #23
 80060be:	0011      	movs	r1, r2
 80060c0:	0018      	movs	r0, r3
 80060c2:	f001 fc49 	bl	8007958 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 80060c6:	193b      	adds	r3, r7, r4
 80060c8:	2202      	movs	r2, #2
 80060ca:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 80060cc:	193b      	adds	r3, r7, r4
 80060ce:	4a0d      	ldr	r2, [pc, #52]	; (8006104 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 80060d0:	0019      	movs	r1, r3
 80060d2:	0010      	movs	r0, r2
 80060d4:	f001 fc40 	bl	8007958 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 80060d8:	193b      	adds	r3, r7, r4
 80060da:	2204      	movs	r2, #4
 80060dc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 80060de:	193b      	adds	r3, r7, r4
 80060e0:	4a08      	ldr	r2, [pc, #32]	; (8006104 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 80060e2:	0019      	movs	r1, r3
 80060e4:	0010      	movs	r0, r2
 80060e6:	f001 fc37 	bl	8007958 <HAL_GPIO_Init>
}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	46bd      	mov	sp, r7
 80060ee:	b027      	add	sp, #156	; 0x9c
 80060f0:	bd90      	pop	{r4, r7, pc}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	40021000 	.word	0x40021000
 80060f8:	0801f1b8 	.word	0x0801f1b8
 80060fc:	0801f1b0 	.word	0x0801f1b0
 8006100:	20000060 	.word	0x20000060
 8006104:	50000800 	.word	0x50000800

08006108 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 800610e:	003b      	movs	r3, r7
 8006110:	0018      	movs	r0, r3
 8006112:	2314      	movs	r3, #20
 8006114:	001a      	movs	r2, r3
 8006116:	2100      	movs	r1, #0
 8006118:	f017 ffdb 	bl	801e0d2 <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 800611c:	003b      	movs	r3, r7
 800611e:	2202      	movs	r2, #2
 8006120:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8006122:	2300      	movs	r3, #0
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	e018      	b.n	800615a <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8006128:	4b10      	ldr	r3, [pc, #64]	; (800616c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	0092      	lsls	r2, r2, #2
 800612e:	58d2      	ldr	r2, [r2, r3]
 8006130:	003b      	movs	r3, r7
 8006132:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8006134:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	0052      	lsls	r2, r2, #1
 800613a:	5ad3      	ldrh	r3, [r2, r3]
 800613c:	001a      	movs	r2, r3
 800613e:	003b      	movs	r3, r7
 8006140:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8006142:	4b0c      	ldr	r3, [pc, #48]	; (8006174 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	0092      	lsls	r2, r2, #2
 8006148:	58d3      	ldr	r3, [r2, r3]
 800614a:	003a      	movs	r2, r7
 800614c:	0011      	movs	r1, r2
 800614e:	0018      	movs	r0, r3
 8006150:	f001 fc02 	bl	8007958 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	3301      	adds	r3, #1
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b03      	cmp	r3, #3
 800615e:	d9e3      	bls.n	8006128 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 8006160:	f000 f9a4 	bl	80064ac <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 8006164:	46c0      	nop			; (mov r8, r8)
 8006166:	46bd      	mov	sp, r7
 8006168:	b006      	add	sp, #24
 800616a:	bd80      	pop	{r7, pc}
 800616c:	0801f1b8 	.word	0x0801f1b8
 8006170:	0801f1b0 	.word	0x0801f1b0
 8006174:	20000060 	.word	0x20000060

08006178 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006180:	f3ef 8310 	mrs	r3, PRIMASK
 8006184:	60fb      	str	r3, [r7, #12]
  return(result);
 8006186:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 8006188:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800618a:	b672      	cpsid	i
}
 800618c:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	e02f      	b.n	80061f4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	00da      	lsls	r2, r3, #3
 8006198:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 800619a:	18d0      	adds	r0, r2, r3
 800619c:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	0092      	lsls	r2, r2, #2
 80061a2:	58d3      	ldr	r3, [r2, r3]
 80061a4:	0019      	movs	r1, r3
 80061a6:	f001 fba1 	bl	80078ec <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	00da      	lsls	r2, r3, #3
 80061ae:	4b18      	ldr	r3, [pc, #96]	; (8006210 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 80061b0:	18d0      	adds	r0, r2, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	18d3      	adds	r3, r2, r3
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	001a      	movs	r2, r3
 80061be:	2100      	movs	r1, #0
 80061c0:	f001 fb73 	bl	80078aa <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 80061c4:	4a14      	ldr	r2, [pc, #80]	; (8006218 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	18d3      	adds	r3, r2, r3
 80061ca:	2000      	movs	r0, #0
 80061cc:	5618      	ldrsb	r0, [r3, r0]
 80061ce:	4b13      	ldr	r3, [pc, #76]	; (800621c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	0092      	lsls	r2, r2, #2
 80061d4:	58d3      	ldr	r3, [r2, r3]
 80061d6:	2200      	movs	r2, #0
 80061d8:	0019      	movs	r1, r3
 80061da:	f001 f891 	bl	8007300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 80061de:	4a0e      	ldr	r2, [pc, #56]	; (8006218 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	18d3      	adds	r3, r2, r3
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	b25b      	sxtb	r3, r3
 80061e8:	0018      	movs	r0, r3
 80061ea:	f001 f89e 	bl	800732a <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	3301      	adds	r3, #1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d9cc      	bls.n	8006194 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f383 8810 	msr	PRIMASK, r3
}
 8006204:	46c0      	nop			; (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 8006206:	46c0      	nop			; (mov r8, r8)
 8006208:	46bd      	mov	sp, r7
 800620a:	b006      	add	sp, #24
 800620c:	bd80      	pop	{r7, pc}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	200016e8 	.word	0x200016e8
 8006214:	0801f18c 	.word	0x0801f18c
 8006218:	0801f1ac 	.word	0x0801f1ac
 800621c:	0801f19c 	.word	0x0801f19c

08006220 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 8006228:	2300      	movs	r3, #0
}
 800622a:	0018      	movs	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	b002      	add	sp, #8
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	0002      	movs	r2, r0
 800623c:	1dfb      	adds	r3, r7, #7
 800623e:	701a      	strb	r2, [r3, #0]

  switch (state)
 8006240:	1dfb      	adds	r3, r7, #7
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b04      	cmp	r3, #4
 8006246:	d82e      	bhi.n	80062a6 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 8006248:	009a      	lsls	r2, r3, #2
 800624a:	4b23      	ldr	r3, [pc, #140]	; (80062d8 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 800624c:	18d3      	adds	r3, r2, r3
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8006252:	23a0      	movs	r3, #160	; 0xa0
 8006254:	05db      	lsls	r3, r3, #23
 8006256:	2201      	movs	r2, #1
 8006258:	2102      	movs	r1, #2
 800625a:	0018      	movs	r0, r3
 800625c:	f001 fdf9 	bl	8007e52 <HAL_GPIO_WritePin>
      break;
 8006260:	e036      	b.n	80062d0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 8006262:	4b1e      	ldr	r3, [pc, #120]	; (80062dc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8006264:	2201      	movs	r2, #1
 8006266:	2104      	movs	r1, #4
 8006268:	0018      	movs	r0, r3
 800626a:	f001 fdf2 	bl	8007e52 <HAL_GPIO_WritePin>
      break;
 800626e:	e02f      	b.n	80062d0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8006270:	4b1a      	ldr	r3, [pc, #104]	; (80062dc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8006272:	2201      	movs	r2, #1
 8006274:	2102      	movs	r1, #2
 8006276:	0018      	movs	r0, r3
 8006278:	f001 fdeb 	bl	8007e52 <HAL_GPIO_WritePin>
      break;
 800627c:	e028      	b.n	80062d0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 800627e:	23a0      	movs	r3, #160	; 0xa0
 8006280:	05db      	lsls	r3, r3, #23
 8006282:	2200      	movs	r2, #0
 8006284:	2102      	movs	r1, #2
 8006286:	0018      	movs	r0, r3
 8006288:	f001 fde3 	bl	8007e52 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 800628c:	4b13      	ldr	r3, [pc, #76]	; (80062dc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 800628e:	2200      	movs	r2, #0
 8006290:	2104      	movs	r1, #4
 8006292:	0018      	movs	r0, r3
 8006294:	f001 fddd 	bl	8007e52 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8006298:	4b10      	ldr	r3, [pc, #64]	; (80062dc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 800629a:	2200      	movs	r2, #0
 800629c:	2102      	movs	r1, #2
 800629e:	0018      	movs	r0, r3
 80062a0:	f001 fdd7 	bl	8007e52 <HAL_GPIO_WritePin>
      break;
 80062a4:	e014      	b.n	80062d0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80062a6:	23a0      	movs	r3, #160	; 0xa0
 80062a8:	05db      	lsls	r3, r3, #23
 80062aa:	2200      	movs	r2, #0
 80062ac:	2102      	movs	r1, #2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f001 fdcf 	bl	8007e52 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	2104      	movs	r1, #4
 80062ba:	0018      	movs	r0, r3
 80062bc:	f001 fdc9 	bl	8007e52 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	2102      	movs	r1, #2
 80062c6:	0018      	movs	r0, r3
 80062c8:	f001 fdc3 	bl	8007e52 <HAL_GPIO_WritePin>

      break;
 80062cc:	e000      	b.n	80062d0 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 80062ce:	46c0      	nop			; (mov r8, r8)
  }
}
 80062d0:	46c0      	nop			; (mov r8, r8)
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b002      	add	sp, #8
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	0801f1c8 	.word	0x0801f1c8
 80062dc:	50000800 	.word	0x50000800

080062e0 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 80062e8:	2301      	movs	r3, #1
}
 80062ea:	0018      	movs	r0, r3
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b002      	add	sp, #8
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	0018      	movs	r0, r3
 80062fe:	2314      	movs	r3, #20
 8006300:	001a      	movs	r2, r3
 8006302:	2100      	movs	r1, #0
 8006304:	f017 fee5 	bl	801e0d2 <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006308:	1d3b      	adds	r3, r7, #4
 800630a:	2201      	movs	r2, #1
 800630c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 800630e:	1d3b      	adds	r3, r7, #4
 8006310:	2200      	movs	r2, #0
 8006312:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	2203      	movs	r2, #3
 8006318:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	2201      	movs	r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8006320:	1d3b      	adds	r3, r7, #4
 8006322:	4a0f      	ldr	r2, [pc, #60]	; (8006360 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8006324:	0019      	movs	r1, r3
 8006326:	0010      	movs	r0, r2
 8006328:	f001 fb16 	bl	8007958 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 800632e:	2200      	movs	r2, #0
 8006330:	2101      	movs	r1, #1
 8006332:	0018      	movs	r0, r3
 8006334:	f001 fd8d 	bl	8007e52 <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 8006338:	2001      	movs	r0, #1
 800633a:	f7fe ff62 	bl	8005202 <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	2200      	movs	r2, #0
 8006342:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8006344:	1d3b      	adds	r3, r7, #4
 8006346:	4a06      	ldr	r2, [pc, #24]	; (8006360 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8006348:	0019      	movs	r1, r3
 800634a:	0010      	movs	r0, r2
 800634c:	f001 fb04 	bl	8007958 <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 8006350:	2006      	movs	r0, #6
 8006352:	f7fe ff56 	bl	8005202 <HAL_Delay>
}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	b006      	add	sp, #24
 800635c:	bd80      	pop	{r7, pc}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	50000800 	.word	0x50000800

08006364 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 8006368:	f7ff fa34 	bl	80057d4 <BSP_SPI1_Init>
}
 800636c:	46c0      	nop			; (mov r8, r8)
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 8006372:	b590      	push	{r4, r7, lr}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	0002      	movs	r2, r0
 800637a:	1dbb      	adds	r3, r7, #6
 800637c:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 800637e:	240e      	movs	r4, #14
 8006380:	1939      	adds	r1, r7, r4
 8006382:	1dbb      	adds	r3, r7, #6
 8006384:	2201      	movs	r2, #1
 8006386:	0018      	movs	r0, r3
 8006388:	f7ff fa48 	bl	800581c <BSP_SPI1_SendRecv>

  return rxData;
 800638c:	193b      	adds	r3, r7, r4
 800638e:	881b      	ldrh	r3, [r3, #0]
}
 8006390:	0018      	movs	r0, r3
 8006392:	46bd      	mov	sp, r7
 8006394:	b005      	add	sp, #20
 8006396:	bd90      	pop	{r4, r7, pc}

08006398 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  if (state == 0)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d108      	bne.n	80063b8 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	0219      	lsls	r1, r3, #8
 80063aa:	23a0      	movs	r3, #160	; 0xa0
 80063ac:	05db      	lsls	r3, r3, #23
 80063ae:	2200      	movs	r2, #0
 80063b0:	0018      	movs	r0, r3
 80063b2:	f001 fd4e 	bl	8007e52 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 80063b6:	e007      	b.n	80063c8 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80063b8:	2380      	movs	r3, #128	; 0x80
 80063ba:	0219      	lsls	r1, r3, #8
 80063bc:	23a0      	movs	r3, #160	; 0xa0
 80063be:	05db      	lsls	r3, r3, #23
 80063c0:	2201      	movs	r2, #1
 80063c2:	0018      	movs	r0, r3
 80063c4:	f001 fd45 	bl	8007e52 <HAL_GPIO_WritePin>
}
 80063c8:	46c0      	nop			; (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b002      	add	sp, #8
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 80063d4:	4b04      	ldr	r3, [pc, #16]	; (80063e8 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 80063d6:	2102      	movs	r1, #2
 80063d8:	0018      	movs	r0, r3
 80063da:	f001 fd1d 	bl	8007e18 <HAL_GPIO_ReadPin>
 80063de:	0003      	movs	r3, r0
}
 80063e0:	0018      	movs	r0, r3
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	50000400 	.word	0x50000400

080063ec <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 80063ec:	b590      	push	{r4, r7, lr}
 80063ee:	b08b      	sub	sp, #44	; 0x2c
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80063f4:	4b2b      	ldr	r3, [pc, #172]	; (80064a4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80063f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f8:	4b2a      	ldr	r3, [pc, #168]	; (80064a4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80063fa:	2102      	movs	r1, #2
 80063fc:	430a      	orrs	r2, r1
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8006400:	4b28      	ldr	r3, [pc, #160]	; (80064a4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	2202      	movs	r2, #2
 8006406:	4013      	ands	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800640c:	4b25      	ldr	r3, [pc, #148]	; (80064a4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006412:	2101      	movs	r1, #1
 8006414:	430a      	orrs	r2, r1
 8006416:	62da      	str	r2, [r3, #44]	; 0x2c
 8006418:	4b22      	ldr	r3, [pc, #136]	; (80064a4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	2201      	movs	r2, #1
 800641e:	4013      	ands	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8006424:	4b1f      	ldr	r3, [pc, #124]	; (80064a4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800642a:	2101      	movs	r1, #1
 800642c:	430a      	orrs	r2, r1
 800642e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006430:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	2201      	movs	r2, #1
 8006436:	4013      	ands	r3, r2
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643c:	2414      	movs	r4, #20
 800643e:	193b      	adds	r3, r7, r4
 8006440:	2202      	movs	r2, #2
 8006442:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006444:	193b      	adds	r3, r7, r4
 8006446:	2202      	movs	r2, #2
 8006448:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800644a:	193b      	adds	r3, r7, r4
 800644c:	2203      	movs	r2, #3
 800644e:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8006450:	193b      	adds	r3, r7, r4
 8006452:	2200      	movs	r2, #0
 8006454:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8006456:	193b      	adds	r3, r7, r4
 8006458:	2280      	movs	r2, #128	; 0x80
 800645a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800645c:	193a      	adds	r2, r7, r4
 800645e:	23a0      	movs	r3, #160	; 0xa0
 8006460:	05db      	lsls	r3, r3, #23
 8006462:	0011      	movs	r1, r2
 8006464:	0018      	movs	r0, r3
 8006466:	f001 fa77 	bl	8007958 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 800646a:	193b      	adds	r3, r7, r4
 800646c:	2200      	movs	r2, #0
 800646e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8006470:	193b      	adds	r3, r7, r4
 8006472:	2240      	movs	r2, #64	; 0x40
 8006474:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006476:	193a      	adds	r2, r7, r4
 8006478:	23a0      	movs	r3, #160	; 0xa0
 800647a:	05db      	lsls	r3, r3, #23
 800647c:	0011      	movs	r1, r2
 800647e:	0018      	movs	r0, r3
 8006480:	f001 fa6a 	bl	8007958 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8006484:	193b      	adds	r3, r7, r4
 8006486:	2200      	movs	r2, #0
 8006488:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800648a:	193b      	adds	r3, r7, r4
 800648c:	2208      	movs	r2, #8
 800648e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006490:	193b      	adds	r3, r7, r4
 8006492:	4a05      	ldr	r2, [pc, #20]	; (80064a8 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 8006494:	0019      	movs	r1, r3
 8006496:	0010      	movs	r0, r2
 8006498:	f001 fa5e 	bl	8007958 <HAL_GPIO_Init>
}
 800649c:	46c0      	nop			; (mov r8, r8)
 800649e:	46bd      	mov	sp, r7
 80064a0:	b00b      	add	sp, #44	; 0x2c
 80064a2:	bd90      	pop	{r4, r7, pc}
 80064a4:	40021000 	.word	0x40021000
 80064a8:	50000400 	.word	0x50000400

080064ac <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	2201      	movs	r2, #1
 80064b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80064b8:	1d3b      	adds	r3, r7, #4
 80064ba:	2202      	movs	r2, #2
 80064bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80064be:	1d3b      	adds	r3, r7, #4
 80064c0:	2280      	movs	r2, #128	; 0x80
 80064c2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80064c4:	1d3a      	adds	r2, r7, #4
 80064c6:	23a0      	movs	r3, #160	; 0xa0
 80064c8:	05db      	lsls	r3, r3, #23
 80064ca:	0011      	movs	r1, r2
 80064cc:	0018      	movs	r0, r3
 80064ce:	f001 fa43 	bl	8007958 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80064d2:	1d3b      	adds	r3, r7, #4
 80064d4:	2240      	movs	r2, #64	; 0x40
 80064d6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80064d8:	1d3a      	adds	r2, r7, #4
 80064da:	23a0      	movs	r3, #160	; 0xa0
 80064dc:	05db      	lsls	r3, r3, #23
 80064de:	0011      	movs	r1, r2
 80064e0:	0018      	movs	r0, r3
 80064e2:	f001 fa39 	bl	8007958 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80064e6:	1d3b      	adds	r3, r7, #4
 80064e8:	2208      	movs	r2, #8
 80064ea:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80064ec:	1d3b      	adds	r3, r7, #4
 80064ee:	4a0e      	ldr	r2, [pc, #56]	; (8006528 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 80064f0:	0019      	movs	r1, r3
 80064f2:	0010      	movs	r0, r2
 80064f4:	f001 fa30 	bl	8007958 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 80064f8:	23a0      	movs	r3, #160	; 0xa0
 80064fa:	05db      	lsls	r3, r3, #23
 80064fc:	2200      	movs	r2, #0
 80064fe:	2180      	movs	r1, #128	; 0x80
 8006500:	0018      	movs	r0, r3
 8006502:	f001 fca6 	bl	8007e52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8006506:	23a0      	movs	r3, #160	; 0xa0
 8006508:	05db      	lsls	r3, r3, #23
 800650a:	2200      	movs	r2, #0
 800650c:	2140      	movs	r1, #64	; 0x40
 800650e:	0018      	movs	r0, r3
 8006510:	f001 fc9f 	bl	8007e52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8006514:	4b04      	ldr	r3, [pc, #16]	; (8006528 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8006516:	2200      	movs	r2, #0
 8006518:	2108      	movs	r1, #8
 800651a:	0018      	movs	r0, r3
 800651c:	f001 fc99 	bl	8007e52 <HAL_GPIO_WritePin>

}
 8006520:	46c0      	nop			; (mov r8, r8)
 8006522:	46bd      	mov	sp, r7
 8006524:	b006      	add	sp, #24
 8006526:	bd80      	pop	{r7, pc}
 8006528:	50000400 	.word	0x50000400

0800652c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8006530:	4b17      	ldr	r3, [pc, #92]	; (8006590 <SystemInit+0x64>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4b16      	ldr	r3, [pc, #88]	; (8006590 <SystemInit+0x64>)
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	0049      	lsls	r1, r1, #1
 800653a:	430a      	orrs	r2, r1
 800653c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800653e:	4b14      	ldr	r3, [pc, #80]	; (8006590 <SystemInit+0x64>)
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <SystemInit+0x64>)
 8006544:	4913      	ldr	r1, [pc, #76]	; (8006594 <SystemInit+0x68>)
 8006546:	400a      	ands	r2, r1
 8006548:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800654a:	4b11      	ldr	r3, [pc, #68]	; (8006590 <SystemInit+0x64>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <SystemInit+0x64>)
 8006550:	4911      	ldr	r1, [pc, #68]	; (8006598 <SystemInit+0x6c>)
 8006552:	400a      	ands	r2, r1
 8006554:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006556:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <SystemInit+0x64>)
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <SystemInit+0x64>)
 800655c:	2101      	movs	r1, #1
 800655e:	438a      	bics	r2, r1
 8006560:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <SystemInit+0x64>)
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <SystemInit+0x64>)
 8006568:	490c      	ldr	r1, [pc, #48]	; (800659c <SystemInit+0x70>)
 800656a:	400a      	ands	r2, r1
 800656c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800656e:	4b08      	ldr	r3, [pc, #32]	; (8006590 <SystemInit+0x64>)
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <SystemInit+0x64>)
 8006574:	490a      	ldr	r1, [pc, #40]	; (80065a0 <SystemInit+0x74>)
 8006576:	400a      	ands	r2, r1
 8006578:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <SystemInit+0x64>)
 800657c:	2200      	movs	r2, #0
 800657e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006580:	4b08      	ldr	r3, [pc, #32]	; (80065a4 <SystemInit+0x78>)
 8006582:	2280      	movs	r2, #128	; 0x80
 8006584:	0512      	lsls	r2, r2, #20
 8006586:	609a      	str	r2, [r3, #8]
#endif
}
 8006588:	46c0      	nop			; (mov r8, r8)
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	40021000 	.word	0x40021000
 8006594:	88ff400c 	.word	0x88ff400c
 8006598:	fef6fff6 	.word	0xfef6fff6
 800659c:	fffbffff 	.word	0xfffbffff
 80065a0:	ff02ffff 	.word	0xff02ffff
 80065a4:	e000ed00 	.word	0xe000ed00

080065a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80065ae:	1dfb      	adds	r3, r7, #7
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065b4:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <HAL_Init+0x3c>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <HAL_Init+0x3c>)
 80065ba:	2102      	movs	r1, #2
 80065bc:	430a      	orrs	r2, r1
 80065be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065c0:	2003      	movs	r0, #3
 80065c2:	f7fe fe0d 	bl	80051e0 <HAL_InitTick>
 80065c6:	1e03      	subs	r3, r0, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80065ca:	1dfb      	adds	r3, r7, #7
 80065cc:	2201      	movs	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	e001      	b.n	80065d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80065d2:	f7fe fbc3 	bl	8004d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80065d6:	1dfb      	adds	r3, r7, #7
 80065d8:	781b      	ldrb	r3, [r3, #0]
}
 80065da:	0018      	movs	r0, r3
 80065dc:	46bd      	mov	sp, r7
 80065de:	b002      	add	sp, #8
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	46c0      	nop			; (mov r8, r8)
 80065e4:	40022000 	.word	0x40022000

080065e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065ec:	4b05      	ldr	r3, [pc, #20]	; (8006604 <HAL_IncTick+0x1c>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	001a      	movs	r2, r3
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <HAL_IncTick+0x20>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	18d2      	adds	r2, r2, r3
 80065f8:	4b03      	ldr	r3, [pc, #12]	; (8006608 <HAL_IncTick+0x20>)
 80065fa:	601a      	str	r2, [r3, #0]
}
 80065fc:	46c0      	nop			; (mov r8, r8)
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	20000078 	.word	0x20000078
 8006608:	20001708 	.word	0x20001708

0800660c <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8006610:	4b02      	ldr	r3, [pc, #8]	; (800661c <HAL_GetUIDw0+0x10>)
 8006612:	681b      	ldr	r3, [r3, #0]
}
 8006614:	0018      	movs	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	1ff80050 	.word	0x1ff80050

08006620 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8006624:	4b02      	ldr	r3, [pc, #8]	; (8006630 <HAL_GetUIDw1+0x10>)
 8006626:	681b      	ldr	r3, [r3, #0]
}
 8006628:	0018      	movs	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	1ff80054 	.word	0x1ff80054

08006634 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8006638:	4b02      	ldr	r3, [pc, #8]	; (8006644 <HAL_GetUIDw2+0x10>)
 800663a:	681b      	ldr	r3, [r3, #0]
}
 800663c:	0018      	movs	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	1ff80064 	.word	0x1ff80064

08006648 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800664c:	4b04      	ldr	r3, [pc, #16]	; (8006660 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	4b03      	ldr	r3, [pc, #12]	; (8006660 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8006652:	2101      	movs	r1, #1
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]
}
 8006658:	46c0      	nop			; (mov r8, r8)
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	40015800 	.word	0x40015800

08006664 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	4b03      	ldr	r3, [pc, #12]	; (800667c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800666e:	2102      	movs	r1, #2
 8006670:	430a      	orrs	r2, r1
 8006672:	605a      	str	r2, [r3, #4]
}
 8006674:	46c0      	nop			; (mov r8, r8)
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	40015800 	.word	0x40015800

08006680 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006684:	4b04      	ldr	r3, [pc, #16]	; (8006698 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	4b03      	ldr	r3, [pc, #12]	; (8006698 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800668a:	2104      	movs	r1, #4
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
}
 8006690:	46c0      	nop			; (mov r8, r8)
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	40015800 	.word	0x40015800

0800669c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e159      	b.n	8006962 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2250      	movs	r2, #80	; 0x50
 80066c0:	2100      	movs	r1, #0
 80066c2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	0018      	movs	r0, r3
 80066c8:	f7fd f93e 	bl	8003948 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d0:	2210      	movs	r2, #16
 80066d2:	4013      	ands	r3, r2
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d005      	beq.n	80066e4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2204      	movs	r2, #4
 80066e0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80066e2:	d00b      	beq.n	80066fc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	2210      	movs	r2, #16
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2250      	movs	r2, #80	; 0x50
 80066f4:	2100      	movs	r1, #0
 80066f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e132      	b.n	8006962 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006700:	4a9a      	ldr	r2, [pc, #616]	; (800696c <HAL_ADC_Init+0x2d0>)
 8006702:	4013      	ands	r3, r2
 8006704:	2202      	movs	r2, #2
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2203      	movs	r2, #3
 8006714:	4013      	ands	r3, r2
 8006716:	2b01      	cmp	r3, #1
 8006718:	d108      	bne.n	800672c <HAL_ADC_Init+0x90>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2201      	movs	r2, #1
 8006722:	4013      	ands	r3, r2
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_ADC_Init+0x90>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <HAL_ADC_Init+0x92>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d149      	bne.n	80067c6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	23c0      	movs	r3, #192	; 0xc0
 8006738:	061b      	lsls	r3, r3, #24
 800673a:	429a      	cmp	r2, r3
 800673c:	d00b      	beq.n	8006756 <HAL_ADC_Init+0xba>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	2380      	movs	r3, #128	; 0x80
 8006744:	05db      	lsls	r3, r3, #23
 8006746:	429a      	cmp	r2, r3
 8006748:	d005      	beq.n	8006756 <HAL_ADC_Init+0xba>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	2380      	movs	r3, #128	; 0x80
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	429a      	cmp	r2, r3
 8006754:	d111      	bne.n	800677a <HAL_ADC_Init+0xde>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	0092      	lsls	r2, r2, #2
 8006762:	0892      	lsrs	r2, r2, #2
 8006764:	611a      	str	r2, [r3, #16]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6919      	ldr	r1, [r3, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	611a      	str	r2, [r3, #16]
 8006778:	e014      	b.n	80067a4 <HAL_ADC_Init+0x108>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	0092      	lsls	r2, r2, #2
 8006786:	0892      	lsrs	r2, r2, #2
 8006788:	611a      	str	r2, [r3, #16]
 800678a:	4b79      	ldr	r3, [pc, #484]	; (8006970 <HAL_ADC_Init+0x2d4>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4b78      	ldr	r3, [pc, #480]	; (8006970 <HAL_ADC_Init+0x2d4>)
 8006790:	4978      	ldr	r1, [pc, #480]	; (8006974 <HAL_ADC_Init+0x2d8>)
 8006792:	400a      	ands	r2, r1
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	4b76      	ldr	r3, [pc, #472]	; (8006970 <HAL_ADC_Init+0x2d4>)
 8006798:	6819      	ldr	r1, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	4b74      	ldr	r3, [pc, #464]	; (8006970 <HAL_ADC_Init+0x2d4>)
 80067a0:	430a      	orrs	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2118      	movs	r1, #24
 80067b0:	438a      	bics	r2, r1
 80067b2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68d9      	ldr	r1, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80067c6:	4b6a      	ldr	r3, [pc, #424]	; (8006970 <HAL_ADC_Init+0x2d4>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b69      	ldr	r3, [pc, #420]	; (8006970 <HAL_ADC_Init+0x2d4>)
 80067cc:	496a      	ldr	r1, [pc, #424]	; (8006978 <HAL_ADC_Init+0x2dc>)
 80067ce:	400a      	ands	r2, r1
 80067d0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80067d2:	4b67      	ldr	r3, [pc, #412]	; (8006970 <HAL_ADC_Init+0x2d4>)
 80067d4:	6819      	ldr	r1, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067da:	065a      	lsls	r2, r3, #25
 80067dc:	4b64      	ldr	r3, [pc, #400]	; (8006970 <HAL_ADC_Init+0x2d4>)
 80067de:	430a      	orrs	r2, r1
 80067e0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	055b      	lsls	r3, r3, #21
 80067ec:	4013      	ands	r3, r2
 80067ee:	d108      	bne.n	8006802 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2180      	movs	r1, #128	; 0x80
 80067fc:	0549      	lsls	r1, r1, #21
 80067fe:	430a      	orrs	r2, r1
 8006800:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	495b      	ldr	r1, [pc, #364]	; (800697c <HAL_ADC_Init+0x2e0>)
 800680e:	400a      	ands	r2, r1
 8006810:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68d9      	ldr	r1, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b02      	cmp	r3, #2
 8006822:	d101      	bne.n	8006828 <HAL_ADC_Init+0x18c>
 8006824:	2304      	movs	r3, #4
 8006826:	e000      	b.n	800682a <HAL_ADC_Init+0x18e>
 8006828:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800682a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2020      	movs	r0, #32
 8006830:	5c1b      	ldrb	r3, [r3, r0]
 8006832:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006834:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	202c      	movs	r0, #44	; 0x2c
 800683a:	5c1b      	ldrb	r3, [r3, r0]
 800683c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800683e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006844:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800684c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006854:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006862:	23c2      	movs	r3, #194	; 0xc2
 8006864:	33ff      	adds	r3, #255	; 0xff
 8006866:	429a      	cmp	r2, r3
 8006868:	d00b      	beq.n	8006882 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68d9      	ldr	r1, [r3, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2221      	movs	r2, #33	; 0x21
 8006886:	5c9b      	ldrb	r3, [r3, r2]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d11a      	bne.n	80068c2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2220      	movs	r2, #32
 8006890:	5c9b      	ldrb	r3, [r3, r2]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2180      	movs	r1, #128	; 0x80
 80068a2:	0249      	lsls	r1, r1, #9
 80068a4:	430a      	orrs	r2, r1
 80068a6:	60da      	str	r2, [r3, #12]
 80068a8:	e00b      	b.n	80068c2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ae:	2220      	movs	r2, #32
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	2201      	movs	r2, #1
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d11f      	bne.n	800690a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	492a      	ldr	r1, [pc, #168]	; (8006980 <HAL_ADC_Init+0x2e4>)
 80068d6:	400a      	ands	r2, r1
 80068d8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6919      	ldr	r1, [r3, #16]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80068e8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80068ee:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2101      	movs	r1, #1
 8006904:	430a      	orrs	r2, r1
 8006906:	611a      	str	r2, [r3, #16]
 8006908:	e00e      	b.n	8006928 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2201      	movs	r2, #1
 8006912:	4013      	ands	r3, r2
 8006914:	2b01      	cmp	r3, #1
 8006916:	d107      	bne.n	8006928 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691a      	ldr	r2, [r3, #16]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2101      	movs	r1, #1
 8006924:	438a      	bics	r2, r1
 8006926:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695a      	ldr	r2, [r3, #20]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2107      	movs	r1, #7
 8006934:	438a      	bics	r2, r1
 8006936:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6959      	ldr	r1, [r3, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006954:	2203      	movs	r2, #3
 8006956:	4393      	bics	r3, r2
 8006958:	2201      	movs	r2, #1
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	0018      	movs	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	b002      	add	sp, #8
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	fffffefd 	.word	0xfffffefd
 8006970:	40012708 	.word	0x40012708
 8006974:	ffc3ffff 	.word	0xffc3ffff
 8006978:	fdffffff 	.word	0xfdffffff
 800697c:	fffe0219 	.word	0xfffe0219
 8006980:	fffffc03 	.word	0xfffffc03

08006984 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8006984:	b5b0      	push	{r4, r5, r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800698c:	230f      	movs	r3, #15
 800698e:	18fb      	adds	r3, r7, r3
 8006990:	2200      	movs	r2, #0
 8006992:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e07d      	b.n	8006a9a <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a2:	2202      	movs	r2, #2
 80069a4:	431a      	orrs	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80069aa:	250f      	movs	r5, #15
 80069ac:	197c      	adds	r4, r7, r5
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	0018      	movs	r0, r3
 80069b2:	f000 faff 	bl	8006fb4 <ADC_ConversionStop>
 80069b6:	0003      	movs	r3, r0
 80069b8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80069ba:	197b      	adds	r3, r7, r5
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10d      	bne.n	80069de <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80069c2:	197c      	adds	r4, r7, r5
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	0018      	movs	r0, r3
 80069c8:	f000 fa94 	bl	8006ef4 <ADC_Disable>
 80069cc:	0003      	movs	r3, r0
 80069ce:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 80069d0:	197b      	adds	r3, r7, r5
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d002      	beq.n	80069de <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 80069de:	230f      	movs	r3, #15
 80069e0:	18fb      	adds	r3, r7, r3
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d051      	beq.n	8006a8c <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	492c      	ldr	r1, [pc, #176]	; (8006aa4 <HAL_ADC_DeInit+0x120>)
 80069f4:	400a      	ands	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a2a      	ldr	r2, [pc, #168]	; (8006aa8 <HAL_ADC_DeInit+0x124>)
 80069fe:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4928      	ldr	r1, [pc, #160]	; (8006aac <HAL_ADC_DeInit+0x128>)
 8006a0c:	400a      	ands	r2, r1
 8006a0e:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4925      	ldr	r1, [pc, #148]	; (8006ab0 <HAL_ADC_DeInit+0x12c>)
 8006a1c:	400a      	ands	r2, r1
 8006a1e:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4922      	ldr	r1, [pc, #136]	; (8006ab4 <HAL_ADC_DeInit+0x130>)
 8006a2c:	400a      	ands	r2, r1
 8006a2e:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2107      	movs	r1, #7
 8006a3c:	438a      	bics	r2, r1
 8006a3e:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6a1a      	ldr	r2, [r3, #32]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	491b      	ldr	r1, [pc, #108]	; (8006ab8 <HAL_ADC_DeInit+0x134>)
 8006a4c:	400a      	ands	r2, r1
 8006a4e:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	22b4      	movs	r2, #180	; 0xb4
 8006a56:	589a      	ldr	r2, [r3, r2]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	217f      	movs	r1, #127	; 0x7f
 8006a5e:	438a      	bics	r2, r1
 8006a60:	21b4      	movs	r1, #180	; 0xb4
 8006a62:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	22b4      	movs	r2, #180	; 0xb4
 8006a6a:	589a      	ldr	r2, [r3, r2]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	217f      	movs	r1, #127	; 0x7f
 8006a72:	438a      	bics	r2, r1
 8006a74:	21b4      	movs	r1, #180	; 0xb4
 8006a76:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f7fc ff94 	bl	80039a8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2250      	movs	r2, #80	; 0x50
 8006a90:	2100      	movs	r1, #0
 8006a92:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006a94:	230f      	movs	r3, #15
 8006a96:	18fb      	adds	r3, r7, r3
 8006a98:	781b      	ldrb	r3, [r3, #0]
}
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b004      	add	sp, #16
 8006aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	fffff760 	.word	0xfffff760
 8006aa8:	0000089f 	.word	0x0000089f
 8006aac:	efffffff 	.word	0xefffffff
 8006ab0:	833e0200 	.word	0x833e0200
 8006ab4:	3ffffc02 	.word	0x3ffffc02
 8006ab8:	f000f000 	.word	0xf000f000

08006abc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ac4:	230f      	movs	r3, #15
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d138      	bne.n	8006b4a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2250      	movs	r2, #80	; 0x50
 8006adc:	5c9b      	ldrb	r3, [r3, r2]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <HAL_ADC_Start+0x2a>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e038      	b.n	8006b58 <HAL_ADC_Start+0x9c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2250      	movs	r2, #80	; 0x50
 8006aea:	2101      	movs	r1, #1
 8006aec:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d007      	beq.n	8006b06 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006af6:	230f      	movs	r3, #15
 8006af8:	18fc      	adds	r4, r7, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0018      	movs	r0, r3
 8006afe:	f000 f999 	bl	8006e34 <ADC_Enable>
 8006b02:	0003      	movs	r3, r0
 8006b04:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006b06:	230f      	movs	r3, #15
 8006b08:	18fb      	adds	r3, r7, r3
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d120      	bne.n	8006b52 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b14:	4a12      	ldr	r2, [pc, #72]	; (8006b60 <HAL_ADC_Start+0xa4>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	2280      	movs	r2, #128	; 0x80
 8006b1a:	0052      	lsls	r2, r2, #1
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2250      	movs	r2, #80	; 0x50
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	221c      	movs	r2, #28
 8006b36:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2104      	movs	r1, #4
 8006b44:	430a      	orrs	r2, r1
 8006b46:	609a      	str	r2, [r3, #8]
 8006b48:	e003      	b.n	8006b52 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006b4a:	230f      	movs	r3, #15
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	2202      	movs	r2, #2
 8006b50:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006b52:	230f      	movs	r3, #15
 8006b54:	18fb      	adds	r3, r7, r3
 8006b56:	781b      	ldrb	r3, [r3, #0]
}
 8006b58:	0018      	movs	r0, r3
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b005      	add	sp, #20
 8006b5e:	bd90      	pop	{r4, r7, pc}
 8006b60:	fffff0fe 	.word	0xfffff0fe

08006b64 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006b64:	b5b0      	push	{r4, r5, r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b6c:	230f      	movs	r3, #15
 8006b6e:	18fb      	adds	r3, r7, r3
 8006b70:	2200      	movs	r2, #0
 8006b72:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2250      	movs	r2, #80	; 0x50
 8006b78:	5c9b      	ldrb	r3, [r3, r2]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_ADC_Stop+0x1e>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e029      	b.n	8006bd6 <HAL_ADC_Stop+0x72>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2250      	movs	r2, #80	; 0x50
 8006b86:	2101      	movs	r1, #1
 8006b88:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006b8a:	250f      	movs	r5, #15
 8006b8c:	197c      	adds	r4, r7, r5
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 fa0f 	bl	8006fb4 <ADC_ConversionStop>
 8006b96:	0003      	movs	r3, r0
 8006b98:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006b9a:	197b      	adds	r3, r7, r5
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d112      	bne.n	8006bc8 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006ba2:	197c      	adds	r4, r7, r5
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f000 f9a4 	bl	8006ef4 <ADC_Disable>
 8006bac:	0003      	movs	r3, r0
 8006bae:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006bb0:	197b      	adds	r3, r7, r5
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d107      	bne.n	8006bc8 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbc:	4a08      	ldr	r2, [pc, #32]	; (8006be0 <HAL_ADC_Stop+0x7c>)
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2250      	movs	r2, #80	; 0x50
 8006bcc:	2100      	movs	r1, #0
 8006bce:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006bd0:	230f      	movs	r3, #15
 8006bd2:	18fb      	adds	r3, r7, r3
 8006bd4:	781b      	ldrb	r3, [r3, #0]
}
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b004      	add	sp, #16
 8006bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	fffffefe 	.word	0xfffffefe

08006be4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d102      	bne.n	8006c04 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006bfe:	2308      	movs	r3, #8
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	e014      	b.n	8006c2e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d10b      	bne.n	8006c2a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c16:	2220      	movs	r2, #32
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2250      	movs	r2, #80	; 0x50
 8006c22:	2100      	movs	r1, #0
 8006c24:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e06c      	b.n	8006d04 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8006c2a:	230c      	movs	r3, #12
 8006c2c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006c2e:	f7fe fae0 	bl	80051f2 <HAL_GetTick>
 8006c32:	0003      	movs	r3, r0
 8006c34:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006c36:	e019      	b.n	8006c6c <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	d016      	beq.n	8006c6c <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <HAL_ADC_PollForConversion+0x70>
 8006c44:	f7fe fad5 	bl	80051f2 <HAL_GetTick>
 8006c48:	0002      	movs	r2, r0
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d20b      	bcs.n	8006c6c <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c58:	2204      	movs	r2, #4
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2250      	movs	r2, #80	; 0x50
 8006c64:	2100      	movs	r1, #0
 8006c66:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e04b      	b.n	8006d04 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4013      	ands	r3, r2
 8006c76:	d0df      	beq.n	8006c38 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7c:	2280      	movs	r2, #128	; 0x80
 8006c7e:	0092      	lsls	r2, r2, #2
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68da      	ldr	r2, [r3, #12]
 8006c8c:	23c0      	movs	r3, #192	; 0xc0
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	4013      	ands	r3, r2
 8006c92:	d12e      	bne.n	8006cf2 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d129      	bne.n	8006cf2 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d122      	bne.n	8006cf2 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d110      	bne.n	8006cda <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	210c      	movs	r1, #12
 8006cc4:	438a      	bics	r2, r1
 8006cc6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ccc:	4a0f      	ldr	r2, [pc, #60]	; (8006d0c <HAL_ADC_PollForConversion+0x128>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54
 8006cd8:	e00b      	b.n	8006cf2 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	2220      	movs	r2, #32
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cea:	2201      	movs	r2, #1
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d103      	bne.n	8006d02 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	220c      	movs	r2, #12
 8006d00:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	0018      	movs	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b004      	add	sp, #16
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	fffffefe 	.word	0xfffffefe

08006d10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006d1e:	0018      	movs	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b002      	add	sp, #8
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2250      	movs	r2, #80	; 0x50
 8006d36:	5c9b      	ldrb	r3, [r3, r2]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_ADC_ConfigChannel+0x18>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e06c      	b.n	8006e1a <HAL_ADC_ConfigChannel+0xf2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2250      	movs	r2, #80	; 0x50
 8006d44:	2101      	movs	r1, #1
 8006d46:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	2204      	movs	r2, #4
 8006d50:	4013      	ands	r3, r2
 8006d52:	d00b      	beq.n	8006d6c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d58:	2220      	movs	r2, #32
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2250      	movs	r2, #80	; 0x50
 8006d64:	2100      	movs	r1, #0
 8006d66:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e056      	b.n	8006e1a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4a2c      	ldr	r2, [pc, #176]	; (8006e24 <HAL_ADC_ConfigChannel+0xfc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d028      	beq.n	8006dc8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	035b      	lsls	r3, r3, #13
 8006d82:	0b5a      	lsrs	r2, r3, #13
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	2380      	movs	r3, #128	; 0x80
 8006d92:	02db      	lsls	r3, r3, #11
 8006d94:	4013      	ands	r3, r2
 8006d96:	d009      	beq.n	8006dac <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006d98:	4b23      	ldr	r3, [pc, #140]	; (8006e28 <HAL_ADC_ConfigChannel+0x100>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	4b22      	ldr	r3, [pc, #136]	; (8006e28 <HAL_ADC_ConfigChannel+0x100>)
 8006d9e:	2180      	movs	r1, #128	; 0x80
 8006da0:	0409      	lsls	r1, r1, #16
 8006da2:	430a      	orrs	r2, r1
 8006da4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006da6:	200a      	movs	r0, #10
 8006da8:	f000 f94a 	bl	8007040 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	2380      	movs	r3, #128	; 0x80
 8006db2:	029b      	lsls	r3, r3, #10
 8006db4:	4013      	ands	r3, r2
 8006db6:	d02b      	beq.n	8006e10 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006db8:	4b1b      	ldr	r3, [pc, #108]	; (8006e28 <HAL_ADC_ConfigChannel+0x100>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4b1a      	ldr	r3, [pc, #104]	; (8006e28 <HAL_ADC_ConfigChannel+0x100>)
 8006dbe:	2180      	movs	r1, #128	; 0x80
 8006dc0:	03c9      	lsls	r1, r1, #15
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	e023      	b.n	8006e10 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	035b      	lsls	r3, r3, #13
 8006dd4:	0b5b      	lsrs	r3, r3, #13
 8006dd6:	43d9      	mvns	r1, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	400a      	ands	r2, r1
 8006dde:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	2380      	movs	r3, #128	; 0x80
 8006de6:	02db      	lsls	r3, r3, #11
 8006de8:	4013      	ands	r3, r2
 8006dea:	d005      	beq.n	8006df8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006dec:	4b0e      	ldr	r3, [pc, #56]	; (8006e28 <HAL_ADC_ConfigChannel+0x100>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <HAL_ADC_ConfigChannel+0x100>)
 8006df2:	490e      	ldr	r1, [pc, #56]	; (8006e2c <HAL_ADC_ConfigChannel+0x104>)
 8006df4:	400a      	ands	r2, r1
 8006df6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	2380      	movs	r3, #128	; 0x80
 8006dfe:	029b      	lsls	r3, r3, #10
 8006e00:	4013      	ands	r3, r2
 8006e02:	d005      	beq.n	8006e10 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006e04:	4b08      	ldr	r3, [pc, #32]	; (8006e28 <HAL_ADC_ConfigChannel+0x100>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <HAL_ADC_ConfigChannel+0x100>)
 8006e0a:	4909      	ldr	r1, [pc, #36]	; (8006e30 <HAL_ADC_ConfigChannel+0x108>)
 8006e0c:	400a      	ands	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2250      	movs	r2, #80	; 0x50
 8006e14:	2100      	movs	r1, #0
 8006e16:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b002      	add	sp, #8
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	00001001 	.word	0x00001001
 8006e28:	40012708 	.word	0x40012708
 8006e2c:	ff7fffff 	.word	0xff7fffff
 8006e30:	ffbfffff 	.word	0xffbfffff

08006e34 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2203      	movs	r2, #3
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d108      	bne.n	8006e60 <ADC_Enable+0x2c>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2201      	movs	r2, #1
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <ADC_Enable+0x2c>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <ADC_Enable+0x2e>
 8006e60:	2300      	movs	r3, #0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d13f      	bne.n	8006ee6 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	4a20      	ldr	r2, [pc, #128]	; (8006ef0 <ADC_Enable+0xbc>)
 8006e6e:	4013      	ands	r3, r2
 8006e70:	d00d      	beq.n	8006e8e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e76:	2210      	movs	r2, #16
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	2201      	movs	r2, #1
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e02c      	b.n	8006ee8 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2101      	movs	r1, #1
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	f000 f8ce 	bl	8007040 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ea4:	f7fe f9a5 	bl	80051f2 <HAL_GetTick>
 8006ea8:	0003      	movs	r3, r0
 8006eaa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006eac:	e014      	b.n	8006ed8 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006eae:	f7fe f9a0 	bl	80051f2 <HAL_GetTick>
 8006eb2:	0002      	movs	r2, r0
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b0a      	cmp	r3, #10
 8006eba:	d90d      	bls.n	8006ed8 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec0:	2210      	movs	r2, #16
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ecc:	2201      	movs	r2, #1
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e007      	b.n	8006ee8 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d1e3      	bne.n	8006eae <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	0018      	movs	r0, r3
 8006eea:	46bd      	mov	sp, r7
 8006eec:	b004      	add	sp, #16
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	80000017 	.word	0x80000017

08006ef4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2203      	movs	r2, #3
 8006f08:	4013      	ands	r3, r2
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d108      	bne.n	8006f20 <ADC_Disable+0x2c>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2201      	movs	r2, #1
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <ADC_Disable+0x2c>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e000      	b.n	8006f22 <ADC_Disable+0x2e>
 8006f20:	2300      	movs	r3, #0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d041      	beq.n	8006faa <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2205      	movs	r2, #5
 8006f2e:	4013      	ands	r3, r2
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d110      	bne.n	8006f56 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2102      	movs	r1, #2
 8006f40:	430a      	orrs	r2, r1
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2203      	movs	r2, #3
 8006f4a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006f4c:	f7fe f951 	bl	80051f2 <HAL_GetTick>
 8006f50:	0003      	movs	r3, r0
 8006f52:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006f54:	e022      	b.n	8006f9c <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	2210      	movs	r2, #16
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f66:	2201      	movs	r2, #1
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e01c      	b.n	8006fac <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006f72:	f7fe f93e 	bl	80051f2 <HAL_GetTick>
 8006f76:	0002      	movs	r2, r0
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b0a      	cmp	r3, #10
 8006f7e:	d90d      	bls.n	8006f9c <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f84:	2210      	movs	r2, #16
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	2201      	movs	r2, #1
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e007      	b.n	8006fac <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d0e3      	beq.n	8006f72 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	0018      	movs	r0, r3
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	b004      	add	sp, #16
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	4013      	ands	r3, r2
 8006fca:	d034      	beq.n	8007036 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2204      	movs	r2, #4
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d10d      	bne.n	8006ff6 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006fe4:	d107      	bne.n	8006ff6 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2110      	movs	r1, #16
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ff6:	f7fe f8fc 	bl	80051f2 <HAL_GetTick>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006ffe:	e014      	b.n	800702a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007000:	f7fe f8f7 	bl	80051f2 <HAL_GetTick>
 8007004:	0002      	movs	r2, r0
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b0a      	cmp	r3, #10
 800700c:	d90d      	bls.n	800702a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007012:	2210      	movs	r2, #16
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701e:	2201      	movs	r2, #1
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e006      	b.n	8007038 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2204      	movs	r2, #4
 8007032:	4013      	ands	r3, r2
 8007034:	d1e4      	bne.n	8007000 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	0018      	movs	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	b004      	add	sp, #16
 800703e:	bd80      	pop	{r7, pc}

08007040 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <ADC_DelayMicroSecond+0x38>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	490b      	ldr	r1, [pc, #44]	; (800707c <ADC_DelayMicroSecond+0x3c>)
 800704e:	0018      	movs	r0, r3
 8007050:	f7f9 f86c 	bl	800012c <__udivsi3>
 8007054:	0003      	movs	r3, r0
 8007056:	001a      	movs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4353      	muls	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800705e:	e002      	b.n	8007066 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3b01      	subs	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1f9      	bne.n	8007060 <ADC_DelayMicroSecond+0x20>
  } 
}
 800706c:	46c0      	nop			; (mov r8, r8)
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	46bd      	mov	sp, r7
 8007072:	b004      	add	sp, #16
 8007074:	bd80      	pop	{r7, pc}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	20000070 	.word	0x20000070
 800707c:	000f4240 	.word	0x000f4240

08007080 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800708a:	2317      	movs	r3, #23
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2250      	movs	r2, #80	; 0x50
 800709e:	5c9b      	ldrb	r3, [r3, r2]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_ADCEx_Calibration_Start+0x28>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e07a      	b.n	800719e <HAL_ADCEx_Calibration_Start+0x11e>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2250      	movs	r2, #80	; 0x50
 80070ac:	2101      	movs	r1, #1
 80070ae:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	2203      	movs	r2, #3
 80070b8:	4013      	ands	r3, r2
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d108      	bne.n	80070d0 <HAL_ADCEx_Calibration_Start+0x50>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2201      	movs	r2, #1
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_ADCEx_Calibration_Start+0x50>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e000      	b.n	80070d2 <HAL_ADCEx_Calibration_Start+0x52>
 80070d0:	2300      	movs	r3, #0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d152      	bne.n	800717c <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	4a33      	ldr	r2, [pc, #204]	; (80071a8 <HAL_ADCEx_Calibration_Start+0x128>)
 80070dc:	4013      	ands	r3, r2
 80070de:	2202      	movs	r2, #2
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2203      	movs	r2, #3
 80070ee:	4013      	ands	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2103      	movs	r1, #3
 80070fe:	438a      	bics	r2, r1
 8007100:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2180      	movs	r1, #128	; 0x80
 800710e:	0609      	lsls	r1, r1, #24
 8007110:	430a      	orrs	r2, r1
 8007112:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007114:	f7fe f86d 	bl	80051f2 <HAL_GetTick>
 8007118:	0003      	movs	r3, r0
 800711a:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800711c:	e014      	b.n	8007148 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800711e:	f7fe f868 	bl	80051f2 <HAL_GetTick>
 8007122:	0002      	movs	r2, r0
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b0a      	cmp	r3, #10
 800712a:	d90d      	bls.n	8007148 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007130:	2212      	movs	r2, #18
 8007132:	4393      	bics	r3, r2
 8007134:	2210      	movs	r2, #16
 8007136:	431a      	orrs	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2250      	movs	r2, #80	; 0x50
 8007140:	2100      	movs	r1, #0
 8007142:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e02a      	b.n	800719e <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	0fdb      	lsrs	r3, r3, #31
 8007150:	07da      	lsls	r2, r3, #31
 8007152:	2380      	movs	r3, #128	; 0x80
 8007154:	061b      	lsls	r3, r3, #24
 8007156:	429a      	cmp	r2, r3
 8007158:	d0e1      	beq.n	800711e <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68d9      	ldr	r1, [r3, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	430a      	orrs	r2, r1
 8007168:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716e:	2203      	movs	r2, #3
 8007170:	4393      	bics	r3, r2
 8007172:	2201      	movs	r2, #1
 8007174:	431a      	orrs	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	655a      	str	r2, [r3, #84]	; 0x54
 800717a:	e009      	b.n	8007190 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007180:	2220      	movs	r2, #32
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8007188:	2317      	movs	r3, #23
 800718a:	18fb      	adds	r3, r7, r3
 800718c:	2201      	movs	r2, #1
 800718e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2250      	movs	r2, #80	; 0x50
 8007194:	2100      	movs	r1, #0
 8007196:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8007198:	2317      	movs	r3, #23
 800719a:	18fb      	adds	r3, r7, r3
 800719c:	781b      	ldrb	r3, [r3, #0]
}
 800719e:	0018      	movs	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	b006      	add	sp, #24
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	fffffefd 	.word	0xfffffefd

080071ac <__NVIC_EnableIRQ>:
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	0002      	movs	r2, r0
 80071b4:	1dfb      	adds	r3, r7, #7
 80071b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80071b8:	1dfb      	adds	r3, r7, #7
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b7f      	cmp	r3, #127	; 0x7f
 80071be:	d809      	bhi.n	80071d4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071c0:	1dfb      	adds	r3, r7, #7
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	001a      	movs	r2, r3
 80071c6:	231f      	movs	r3, #31
 80071c8:	401a      	ands	r2, r3
 80071ca:	4b04      	ldr	r3, [pc, #16]	; (80071dc <__NVIC_EnableIRQ+0x30>)
 80071cc:	2101      	movs	r1, #1
 80071ce:	4091      	lsls	r1, r2
 80071d0:	000a      	movs	r2, r1
 80071d2:	601a      	str	r2, [r3, #0]
}
 80071d4:	46c0      	nop			; (mov r8, r8)
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b002      	add	sp, #8
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	e000e100 	.word	0xe000e100

080071e0 <__NVIC_DisableIRQ>:
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	0002      	movs	r2, r0
 80071e8:	1dfb      	adds	r3, r7, #7
 80071ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80071ec:	1dfb      	adds	r3, r7, #7
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b7f      	cmp	r3, #127	; 0x7f
 80071f2:	d810      	bhi.n	8007216 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071f4:	1dfb      	adds	r3, r7, #7
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	001a      	movs	r2, r3
 80071fa:	231f      	movs	r3, #31
 80071fc:	4013      	ands	r3, r2
 80071fe:	4908      	ldr	r1, [pc, #32]	; (8007220 <__NVIC_DisableIRQ+0x40>)
 8007200:	2201      	movs	r2, #1
 8007202:	409a      	lsls	r2, r3
 8007204:	0013      	movs	r3, r2
 8007206:	2280      	movs	r2, #128	; 0x80
 8007208:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800720a:	f3bf 8f4f 	dsb	sy
}
 800720e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007210:	f3bf 8f6f 	isb	sy
}
 8007214:	46c0      	nop			; (mov r8, r8)
}
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	46bd      	mov	sp, r7
 800721a:	b002      	add	sp, #8
 800721c:	bd80      	pop	{r7, pc}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	e000e100 	.word	0xe000e100

08007224 <__NVIC_SetPriority>:
{
 8007224:	b590      	push	{r4, r7, lr}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	0002      	movs	r2, r0
 800722c:	6039      	str	r1, [r7, #0]
 800722e:	1dfb      	adds	r3, r7, #7
 8007230:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007232:	1dfb      	adds	r3, r7, #7
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b7f      	cmp	r3, #127	; 0x7f
 8007238:	d828      	bhi.n	800728c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800723a:	4a2f      	ldr	r2, [pc, #188]	; (80072f8 <__NVIC_SetPriority+0xd4>)
 800723c:	1dfb      	adds	r3, r7, #7
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	b25b      	sxtb	r3, r3
 8007242:	089b      	lsrs	r3, r3, #2
 8007244:	33c0      	adds	r3, #192	; 0xc0
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	589b      	ldr	r3, [r3, r2]
 800724a:	1dfa      	adds	r2, r7, #7
 800724c:	7812      	ldrb	r2, [r2, #0]
 800724e:	0011      	movs	r1, r2
 8007250:	2203      	movs	r2, #3
 8007252:	400a      	ands	r2, r1
 8007254:	00d2      	lsls	r2, r2, #3
 8007256:	21ff      	movs	r1, #255	; 0xff
 8007258:	4091      	lsls	r1, r2
 800725a:	000a      	movs	r2, r1
 800725c:	43d2      	mvns	r2, r2
 800725e:	401a      	ands	r2, r3
 8007260:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	019b      	lsls	r3, r3, #6
 8007266:	22ff      	movs	r2, #255	; 0xff
 8007268:	401a      	ands	r2, r3
 800726a:	1dfb      	adds	r3, r7, #7
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	0018      	movs	r0, r3
 8007270:	2303      	movs	r3, #3
 8007272:	4003      	ands	r3, r0
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007278:	481f      	ldr	r0, [pc, #124]	; (80072f8 <__NVIC_SetPriority+0xd4>)
 800727a:	1dfb      	adds	r3, r7, #7
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	b25b      	sxtb	r3, r3
 8007280:	089b      	lsrs	r3, r3, #2
 8007282:	430a      	orrs	r2, r1
 8007284:	33c0      	adds	r3, #192	; 0xc0
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	501a      	str	r2, [r3, r0]
}
 800728a:	e031      	b.n	80072f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800728c:	4a1b      	ldr	r2, [pc, #108]	; (80072fc <__NVIC_SetPriority+0xd8>)
 800728e:	1dfb      	adds	r3, r7, #7
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	0019      	movs	r1, r3
 8007294:	230f      	movs	r3, #15
 8007296:	400b      	ands	r3, r1
 8007298:	3b08      	subs	r3, #8
 800729a:	089b      	lsrs	r3, r3, #2
 800729c:	3306      	adds	r3, #6
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	18d3      	adds	r3, r2, r3
 80072a2:	3304      	adds	r3, #4
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	1dfa      	adds	r2, r7, #7
 80072a8:	7812      	ldrb	r2, [r2, #0]
 80072aa:	0011      	movs	r1, r2
 80072ac:	2203      	movs	r2, #3
 80072ae:	400a      	ands	r2, r1
 80072b0:	00d2      	lsls	r2, r2, #3
 80072b2:	21ff      	movs	r1, #255	; 0xff
 80072b4:	4091      	lsls	r1, r2
 80072b6:	000a      	movs	r2, r1
 80072b8:	43d2      	mvns	r2, r2
 80072ba:	401a      	ands	r2, r3
 80072bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	019b      	lsls	r3, r3, #6
 80072c2:	22ff      	movs	r2, #255	; 0xff
 80072c4:	401a      	ands	r2, r3
 80072c6:	1dfb      	adds	r3, r7, #7
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	0018      	movs	r0, r3
 80072cc:	2303      	movs	r3, #3
 80072ce:	4003      	ands	r3, r0
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072d4:	4809      	ldr	r0, [pc, #36]	; (80072fc <__NVIC_SetPriority+0xd8>)
 80072d6:	1dfb      	adds	r3, r7, #7
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	001c      	movs	r4, r3
 80072dc:	230f      	movs	r3, #15
 80072de:	4023      	ands	r3, r4
 80072e0:	3b08      	subs	r3, #8
 80072e2:	089b      	lsrs	r3, r3, #2
 80072e4:	430a      	orrs	r2, r1
 80072e6:	3306      	adds	r3, #6
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	18c3      	adds	r3, r0, r3
 80072ec:	3304      	adds	r3, #4
 80072ee:	601a      	str	r2, [r3, #0]
}
 80072f0:	46c0      	nop			; (mov r8, r8)
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b003      	add	sp, #12
 80072f6:	bd90      	pop	{r4, r7, pc}
 80072f8:	e000e100 	.word	0xe000e100
 80072fc:	e000ed00 	.word	0xe000ed00

08007300 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	210f      	movs	r1, #15
 800730c:	187b      	adds	r3, r7, r1
 800730e:	1c02      	adds	r2, r0, #0
 8007310:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	187b      	adds	r3, r7, r1
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	b25b      	sxtb	r3, r3
 800731a:	0011      	movs	r1, r2
 800731c:	0018      	movs	r0, r3
 800731e:	f7ff ff81 	bl	8007224 <__NVIC_SetPriority>
}
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	46bd      	mov	sp, r7
 8007326:	b004      	add	sp, #16
 8007328:	bd80      	pop	{r7, pc}

0800732a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b082      	sub	sp, #8
 800732e:	af00      	add	r7, sp, #0
 8007330:	0002      	movs	r2, r0
 8007332:	1dfb      	adds	r3, r7, #7
 8007334:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007336:	1dfb      	adds	r3, r7, #7
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	b25b      	sxtb	r3, r3
 800733c:	0018      	movs	r0, r3
 800733e:	f7ff ff35 	bl	80071ac <__NVIC_EnableIRQ>
}
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	46bd      	mov	sp, r7
 8007346:	b002      	add	sp, #8
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	0002      	movs	r2, r0
 8007352:	1dfb      	adds	r3, r7, #7
 8007354:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007356:	1dfb      	adds	r3, r7, #7
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	b25b      	sxtb	r3, r3
 800735c:	0018      	movs	r0, r3
 800735e:	f7ff ff3f 	bl	80071e0 <__NVIC_DisableIRQ>
}
 8007362:	46c0      	nop			; (mov r8, r8)
 8007364:	46bd      	mov	sp, r7
 8007366:	b002      	add	sp, #8
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e061      	b.n	8007442 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a32      	ldr	r2, [pc, #200]	; (800744c <HAL_DMA_Init+0xe0>)
 8007384:	4694      	mov	ip, r2
 8007386:	4463      	add	r3, ip
 8007388:	2114      	movs	r1, #20
 800738a:	0018      	movs	r0, r3
 800738c:	f7f8 fece 	bl	800012c <__udivsi3>
 8007390:	0003      	movs	r3, r0
 8007392:	009a      	lsls	r2, r3, #2
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <HAL_DMA_Init+0xe4>)
 800739c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2225      	movs	r2, #37	; 0x25
 80073a2:	2102      	movs	r1, #2
 80073a4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4a28      	ldr	r2, [pc, #160]	; (8007454 <HAL_DMA_Init+0xe8>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80073be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	2380      	movs	r3, #128	; 0x80
 80073f2:	01db      	lsls	r3, r3, #7
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d018      	beq.n	800742a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80073f8:	4b17      	ldr	r3, [pc, #92]	; (8007458 <HAL_DMA_Init+0xec>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007400:	211c      	movs	r1, #28
 8007402:	400b      	ands	r3, r1
 8007404:	210f      	movs	r1, #15
 8007406:	4099      	lsls	r1, r3
 8007408:	000b      	movs	r3, r1
 800740a:	43d9      	mvns	r1, r3
 800740c:	4b12      	ldr	r3, [pc, #72]	; (8007458 <HAL_DMA_Init+0xec>)
 800740e:	400a      	ands	r2, r1
 8007410:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007412:	4b11      	ldr	r3, [pc, #68]	; (8007458 <HAL_DMA_Init+0xec>)
 8007414:	6819      	ldr	r1, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741e:	201c      	movs	r0, #28
 8007420:	4003      	ands	r3, r0
 8007422:	409a      	lsls	r2, r3
 8007424:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <HAL_DMA_Init+0xec>)
 8007426:	430a      	orrs	r2, r1
 8007428:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2225      	movs	r2, #37	; 0x25
 8007434:	2101      	movs	r1, #1
 8007436:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2224      	movs	r2, #36	; 0x24
 800743c:	2100      	movs	r1, #0
 800743e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	0018      	movs	r0, r3
 8007444:	46bd      	mov	sp, r7
 8007446:	b004      	add	sp, #16
 8007448:	bd80      	pop	{r7, pc}
 800744a:	46c0      	nop			; (mov r8, r8)
 800744c:	bffdfff8 	.word	0xbffdfff8
 8007450:	40020000 	.word	0x40020000
 8007454:	ffff800f 	.word	0xffff800f
 8007458:	400200a8 	.word	0x400200a8

0800745c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e04a      	b.n	8007504 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2101      	movs	r1, #1
 800747a:	438a      	bics	r2, r1
 800747c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a22      	ldr	r2, [pc, #136]	; (800750c <HAL_DMA_DeInit+0xb0>)
 8007484:	4694      	mov	ip, r2
 8007486:	4463      	add	r3, ip
 8007488:	2114      	movs	r1, #20
 800748a:	0018      	movs	r0, r3
 800748c:	f7f8 fe4e 	bl	800012c <__udivsi3>
 8007490:	0003      	movs	r3, r0
 8007492:	009a      	lsls	r2, r3, #2
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a1d      	ldr	r2, [pc, #116]	; (8007510 <HAL_DMA_DeInit+0xb4>)
 800749c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074aa:	221c      	movs	r2, #28
 80074ac:	401a      	ands	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	2101      	movs	r1, #1
 80074b4:	4091      	lsls	r1, r2
 80074b6:	000a      	movs	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80074ba:	4b16      	ldr	r3, [pc, #88]	; (8007514 <HAL_DMA_DeInit+0xb8>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c2:	211c      	movs	r1, #28
 80074c4:	400b      	ands	r3, r1
 80074c6:	210f      	movs	r1, #15
 80074c8:	4099      	lsls	r1, r3
 80074ca:	000b      	movs	r3, r1
 80074cc:	43d9      	mvns	r1, r3
 80074ce:	4b11      	ldr	r3, [pc, #68]	; (8007514 <HAL_DMA_DeInit+0xb8>)
 80074d0:	400a      	ands	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2225      	movs	r2, #37	; 0x25
 80074f6:	2100      	movs	r1, #0
 80074f8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2224      	movs	r2, #36	; 0x24
 80074fe:	2100      	movs	r1, #0
 8007500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	0018      	movs	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	b002      	add	sp, #8
 800750a:	bd80      	pop	{r7, pc}
 800750c:	bffdfff8 	.word	0xbffdfff8
 8007510:	40020000 	.word	0x40020000
 8007514:	400200a8 	.word	0x400200a8

08007518 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007526:	2317      	movs	r3, #23
 8007528:	18fb      	adds	r3, r7, r3
 800752a:	2200      	movs	r2, #0
 800752c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2224      	movs	r2, #36	; 0x24
 8007532:	5c9b      	ldrb	r3, [r3, r2]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_DMA_Start_IT+0x24>
 8007538:	2302      	movs	r3, #2
 800753a:	e04f      	b.n	80075dc <HAL_DMA_Start_IT+0xc4>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2224      	movs	r2, #36	; 0x24
 8007540:	2101      	movs	r1, #1
 8007542:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2225      	movs	r2, #37	; 0x25
 8007548:	5c9b      	ldrb	r3, [r3, r2]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d13a      	bne.n	80075c6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2225      	movs	r2, #37	; 0x25
 8007554:	2102      	movs	r1, #2
 8007556:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2101      	movs	r1, #1
 800756a:	438a      	bics	r2, r1
 800756c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f96a 	bl	800784e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757e:	2b00      	cmp	r3, #0
 8007580:	d008      	beq.n	8007594 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	210e      	movs	r1, #14
 800758e:	430a      	orrs	r2, r1
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	e00f      	b.n	80075b4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2104      	movs	r1, #4
 80075a0:	438a      	bics	r2, r1
 80075a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	210a      	movs	r1, #10
 80075b0:	430a      	orrs	r2, r1
 80075b2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2101      	movs	r1, #1
 80075c0:	430a      	orrs	r2, r1
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	e007      	b.n	80075d6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2224      	movs	r2, #36	; 0x24
 80075ca:	2100      	movs	r1, #0
 80075cc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80075ce:	2317      	movs	r3, #23
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	2202      	movs	r2, #2
 80075d4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80075d6:	2317      	movs	r3, #23
 80075d8:	18fb      	adds	r3, r7, r3
 80075da:	781b      	ldrb	r3, [r3, #0]
}
 80075dc:	0018      	movs	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	b006      	add	sp, #24
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075ec:	230f      	movs	r3, #15
 80075ee:	18fb      	adds	r3, r7, r3
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2225      	movs	r2, #37	; 0x25
 80075f8:	5c9b      	ldrb	r3, [r3, r2]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d008      	beq.n	8007612 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2204      	movs	r2, #4
 8007604:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2224      	movs	r2, #36	; 0x24
 800760a:	2100      	movs	r1, #0
 800760c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e024      	b.n	800765c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	210e      	movs	r1, #14
 800761e:	438a      	bics	r2, r1
 8007620:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2101      	movs	r1, #1
 800762e:	438a      	bics	r2, r1
 8007630:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007636:	221c      	movs	r2, #28
 8007638:	401a      	ands	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	2101      	movs	r1, #1
 8007640:	4091      	lsls	r1, r2
 8007642:	000a      	movs	r2, r1
 8007644:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2225      	movs	r2, #37	; 0x25
 800764a:	2101      	movs	r1, #1
 800764c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2224      	movs	r2, #36	; 0x24
 8007652:	2100      	movs	r1, #0
 8007654:	5499      	strb	r1, [r3, r2]

    return status;
 8007656:	230f      	movs	r3, #15
 8007658:	18fb      	adds	r3, r7, r3
 800765a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800765c:	0018      	movs	r0, r3
 800765e:	46bd      	mov	sp, r7
 8007660:	b004      	add	sp, #16
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800766c:	210f      	movs	r1, #15
 800766e:	187b      	adds	r3, r7, r1
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2225      	movs	r2, #37	; 0x25
 8007678:	5c9b      	ldrb	r3, [r3, r2]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d006      	beq.n	800768e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2204      	movs	r2, #4
 8007684:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007686:	187b      	adds	r3, r7, r1
 8007688:	2201      	movs	r2, #1
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	e02a      	b.n	80076e4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	210e      	movs	r1, #14
 800769a:	438a      	bics	r2, r1
 800769c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2101      	movs	r1, #1
 80076aa:	438a      	bics	r2, r1
 80076ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b2:	221c      	movs	r2, #28
 80076b4:	401a      	ands	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	2101      	movs	r1, #1
 80076bc:	4091      	lsls	r1, r2
 80076be:	000a      	movs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2225      	movs	r2, #37	; 0x25
 80076c6:	2101      	movs	r1, #1
 80076c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2224      	movs	r2, #36	; 0x24
 80076ce:	2100      	movs	r1, #0
 80076d0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	0010      	movs	r0, r2
 80076e2:	4798      	blx	r3
    }
  }
  return status;
 80076e4:	230f      	movs	r3, #15
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	781b      	ldrb	r3, [r3, #0]
}
 80076ea:	0018      	movs	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b004      	add	sp, #16
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	221c      	movs	r2, #28
 8007710:	4013      	ands	r3, r2
 8007712:	2204      	movs	r2, #4
 8007714:	409a      	lsls	r2, r3
 8007716:	0013      	movs	r3, r2
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4013      	ands	r3, r2
 800771c:	d026      	beq.n	800776c <HAL_DMA_IRQHandler+0x7a>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2204      	movs	r2, #4
 8007722:	4013      	ands	r3, r2
 8007724:	d022      	beq.n	800776c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2220      	movs	r2, #32
 800772e:	4013      	ands	r3, r2
 8007730:	d107      	bne.n	8007742 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2104      	movs	r1, #4
 800773e:	438a      	bics	r2, r1
 8007740:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007746:	221c      	movs	r2, #28
 8007748:	401a      	ands	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	2104      	movs	r1, #4
 8007750:	4091      	lsls	r1, r2
 8007752:	000a      	movs	r2, r1
 8007754:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	2b00      	cmp	r3, #0
 800775c:	d100      	bne.n	8007760 <HAL_DMA_IRQHandler+0x6e>
 800775e:	e071      	b.n	8007844 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	0010      	movs	r0, r2
 8007768:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800776a:	e06b      	b.n	8007844 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007770:	221c      	movs	r2, #28
 8007772:	4013      	ands	r3, r2
 8007774:	2202      	movs	r2, #2
 8007776:	409a      	lsls	r2, r3
 8007778:	0013      	movs	r3, r2
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4013      	ands	r3, r2
 800777e:	d02d      	beq.n	80077dc <HAL_DMA_IRQHandler+0xea>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2202      	movs	r2, #2
 8007784:	4013      	ands	r3, r2
 8007786:	d029      	beq.n	80077dc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2220      	movs	r2, #32
 8007790:	4013      	ands	r3, r2
 8007792:	d10b      	bne.n	80077ac <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	210a      	movs	r1, #10
 80077a0:	438a      	bics	r2, r1
 80077a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2225      	movs	r2, #37	; 0x25
 80077a8:	2101      	movs	r1, #1
 80077aa:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b0:	221c      	movs	r2, #28
 80077b2:	401a      	ands	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	2102      	movs	r1, #2
 80077ba:	4091      	lsls	r1, r2
 80077bc:	000a      	movs	r2, r1
 80077be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2224      	movs	r2, #36	; 0x24
 80077c4:	2100      	movs	r1, #0
 80077c6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d039      	beq.n	8007844 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	0010      	movs	r0, r2
 80077d8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80077da:	e033      	b.n	8007844 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e0:	221c      	movs	r2, #28
 80077e2:	4013      	ands	r3, r2
 80077e4:	2208      	movs	r2, #8
 80077e6:	409a      	lsls	r2, r3
 80077e8:	0013      	movs	r3, r2
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4013      	ands	r3, r2
 80077ee:	d02a      	beq.n	8007846 <HAL_DMA_IRQHandler+0x154>
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2208      	movs	r2, #8
 80077f4:	4013      	ands	r3, r2
 80077f6:	d026      	beq.n	8007846 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	210e      	movs	r1, #14
 8007804:	438a      	bics	r2, r1
 8007806:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780c:	221c      	movs	r2, #28
 800780e:	401a      	ands	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007814:	2101      	movs	r1, #1
 8007816:	4091      	lsls	r1, r2
 8007818:	000a      	movs	r2, r1
 800781a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2225      	movs	r2, #37	; 0x25
 8007826:	2101      	movs	r1, #1
 8007828:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2224      	movs	r2, #36	; 0x24
 800782e:	2100      	movs	r1, #0
 8007830:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	0010      	movs	r0, r2
 8007842:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007844:	46c0      	nop			; (mov r8, r8)
 8007846:	46c0      	nop			; (mov r8, r8)
}
 8007848:	46bd      	mov	sp, r7
 800784a:	b004      	add	sp, #16
 800784c:	bd80      	pop	{r7, pc}

0800784e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007860:	221c      	movs	r2, #28
 8007862:	401a      	ands	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007868:	2101      	movs	r1, #1
 800786a:	4091      	lsls	r1, r2
 800786c:	000a      	movs	r2, r1
 800786e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b10      	cmp	r3, #16
 800787e:	d108      	bne.n	8007892 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007890:	e007      	b.n	80078a2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	60da      	str	r2, [r3, #12]
}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b004      	add	sp, #16
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b086      	sub	sp, #24
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	200b      	movs	r0, #11
 80078b6:	183b      	adds	r3, r7, r0
 80078b8:	1c0a      	adds	r2, r1, #0
 80078ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078bc:	2317      	movs	r3, #23
 80078be:	18fb      	adds	r3, r7, r3
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 80078c4:	183b      	adds	r3, r7, r0
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d103      	bne.n	80078d4 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	605a      	str	r2, [r3, #4]
      break;
 80078d2:	e004      	b.n	80078de <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 80078d4:	2317      	movs	r3, #23
 80078d6:	18fb      	adds	r3, r7, r3
 80078d8:	2201      	movs	r2, #1
 80078da:	701a      	strb	r2, [r3, #0]
      break;
 80078dc:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80078de:	2317      	movs	r3, #23
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	781b      	ldrb	r3, [r3, #0]
}
 80078e4:	0018      	movs	r0, r3
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b006      	add	sp, #24
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e003      	b.n	8007908 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007906:	2300      	movs	r3, #0
  }
}
 8007908:	0018      	movs	r0, r3
 800790a:	46bd      	mov	sp, r7
 800790c:	b002      	add	sp, #8
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	221f      	movs	r2, #31
 800791e:	4013      	ands	r3, r2
 8007920:	2201      	movs	r2, #1
 8007922:	409a      	lsls	r2, r3
 8007924:	0013      	movs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8007928:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <HAL_EXTI_IRQHandler+0x44>)
 800792a:	695a      	ldr	r2, [r3, #20]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4013      	ands	r3, r2
 8007930:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d009      	beq.n	800794c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8007938:	4b06      	ldr	r3, [pc, #24]	; (8007954 <HAL_EXTI_IRQHandler+0x44>)
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	4798      	blx	r3
    }
  }
}
 800794c:	46c0      	nop			; (mov r8, r8)
 800794e:	46bd      	mov	sp, r7
 8007950:	b004      	add	sp, #16
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40010400 	.word	0x40010400

08007958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007962:	2300      	movs	r3, #0
 8007964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800796a:	2300      	movs	r3, #0
 800796c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800796e:	e155      	b.n	8007c1c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2101      	movs	r1, #1
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4091      	lsls	r1, r2
 800797a:	000a      	movs	r2, r1
 800797c:	4013      	ands	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d100      	bne.n	8007988 <HAL_GPIO_Init+0x30>
 8007986:	e146      	b.n	8007c16 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d00b      	beq.n	80079a8 <HAL_GPIO_Init+0x50>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d007      	beq.n	80079a8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800799c:	2b11      	cmp	r3, #17
 800799e:	d003      	beq.n	80079a8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2b12      	cmp	r3, #18
 80079a6:	d130      	bne.n	8007a0a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	2203      	movs	r2, #3
 80079b4:	409a      	lsls	r2, r3
 80079b6:	0013      	movs	r3, r2
 80079b8:	43da      	mvns	r2, r3
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	4013      	ands	r3, r2
 80079be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	409a      	lsls	r2, r3
 80079ca:	0013      	movs	r3, r2
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079de:	2201      	movs	r2, #1
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	409a      	lsls	r2, r3
 80079e4:	0013      	movs	r3, r2
 80079e6:	43da      	mvns	r2, r3
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4013      	ands	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	091b      	lsrs	r3, r3, #4
 80079f4:	2201      	movs	r2, #1
 80079f6:	401a      	ands	r2, r3
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	409a      	lsls	r2, r3
 80079fc:	0013      	movs	r3, r2
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	2203      	movs	r2, #3
 8007a16:	409a      	lsls	r2, r3
 8007a18:	0013      	movs	r3, r2
 8007a1a:	43da      	mvns	r2, r3
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	409a      	lsls	r2, r3
 8007a2c:	0013      	movs	r3, r2
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d003      	beq.n	8007a4a <HAL_GPIO_Init+0xf2>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2b12      	cmp	r3, #18
 8007a48:	d123      	bne.n	8007a92 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	08da      	lsrs	r2, r3, #3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3208      	adds	r2, #8
 8007a52:	0092      	lsls	r2, r2, #2
 8007a54:	58d3      	ldr	r3, [r2, r3]
 8007a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2207      	movs	r2, #7
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	220f      	movs	r2, #15
 8007a62:	409a      	lsls	r2, r3
 8007a64:	0013      	movs	r3, r2
 8007a66:	43da      	mvns	r2, r3
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2107      	movs	r1, #7
 8007a76:	400b      	ands	r3, r1
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	409a      	lsls	r2, r3
 8007a7c:	0013      	movs	r3, r2
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	08da      	lsrs	r2, r3, #3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3208      	adds	r2, #8
 8007a8c:	0092      	lsls	r2, r2, #2
 8007a8e:	6939      	ldr	r1, [r7, #16]
 8007a90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	0013      	movs	r3, r2
 8007aa2:	43da      	mvns	r2, r3
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2203      	movs	r2, #3
 8007ab0:	401a      	ands	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	409a      	lsls	r2, r3
 8007ab8:	0013      	movs	r3, r2
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	2380      	movs	r3, #128	; 0x80
 8007acc:	055b      	lsls	r3, r3, #21
 8007ace:	4013      	ands	r3, r2
 8007ad0:	d100      	bne.n	8007ad4 <HAL_GPIO_Init+0x17c>
 8007ad2:	e0a0      	b.n	8007c16 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ad4:	4b57      	ldr	r3, [pc, #348]	; (8007c34 <HAL_GPIO_Init+0x2dc>)
 8007ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad8:	4b56      	ldr	r3, [pc, #344]	; (8007c34 <HAL_GPIO_Init+0x2dc>)
 8007ada:	2101      	movs	r1, #1
 8007adc:	430a      	orrs	r2, r1
 8007ade:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ae0:	4a55      	ldr	r2, [pc, #340]	; (8007c38 <HAL_GPIO_Init+0x2e0>)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	089b      	lsrs	r3, r3, #2
 8007ae6:	3302      	adds	r3, #2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	589b      	ldr	r3, [r3, r2]
 8007aec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2203      	movs	r2, #3
 8007af2:	4013      	ands	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	220f      	movs	r2, #15
 8007af8:	409a      	lsls	r2, r3
 8007afa:	0013      	movs	r3, r2
 8007afc:	43da      	mvns	r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	4013      	ands	r3, r2
 8007b02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	23a0      	movs	r3, #160	; 0xa0
 8007b08:	05db      	lsls	r3, r3, #23
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d01f      	beq.n	8007b4e <HAL_GPIO_Init+0x1f6>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a4a      	ldr	r2, [pc, #296]	; (8007c3c <HAL_GPIO_Init+0x2e4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d019      	beq.n	8007b4a <HAL_GPIO_Init+0x1f2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a49      	ldr	r2, [pc, #292]	; (8007c40 <HAL_GPIO_Init+0x2e8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_GPIO_Init+0x1ee>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a48      	ldr	r2, [pc, #288]	; (8007c44 <HAL_GPIO_Init+0x2ec>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00d      	beq.n	8007b42 <HAL_GPIO_Init+0x1ea>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a47      	ldr	r2, [pc, #284]	; (8007c48 <HAL_GPIO_Init+0x2f0>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d007      	beq.n	8007b3e <HAL_GPIO_Init+0x1e6>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a46      	ldr	r2, [pc, #280]	; (8007c4c <HAL_GPIO_Init+0x2f4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d101      	bne.n	8007b3a <HAL_GPIO_Init+0x1e2>
 8007b36:	2305      	movs	r3, #5
 8007b38:	e00a      	b.n	8007b50 <HAL_GPIO_Init+0x1f8>
 8007b3a:	2306      	movs	r3, #6
 8007b3c:	e008      	b.n	8007b50 <HAL_GPIO_Init+0x1f8>
 8007b3e:	2304      	movs	r3, #4
 8007b40:	e006      	b.n	8007b50 <HAL_GPIO_Init+0x1f8>
 8007b42:	2303      	movs	r3, #3
 8007b44:	e004      	b.n	8007b50 <HAL_GPIO_Init+0x1f8>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e002      	b.n	8007b50 <HAL_GPIO_Init+0x1f8>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <HAL_GPIO_Init+0x1f8>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	2103      	movs	r1, #3
 8007b54:	400a      	ands	r2, r1
 8007b56:	0092      	lsls	r2, r2, #2
 8007b58:	4093      	lsls	r3, r2
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b60:	4935      	ldr	r1, [pc, #212]	; (8007c38 <HAL_GPIO_Init+0x2e0>)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	089b      	lsrs	r3, r3, #2
 8007b66:	3302      	adds	r3, #2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b6e:	4b38      	ldr	r3, [pc, #224]	; (8007c50 <HAL_GPIO_Init+0x2f8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	43da      	mvns	r2, r3
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	2380      	movs	r3, #128	; 0x80
 8007b84:	025b      	lsls	r3, r3, #9
 8007b86:	4013      	ands	r3, r2
 8007b88:	d003      	beq.n	8007b92 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007b92:	4b2f      	ldr	r3, [pc, #188]	; (8007c50 <HAL_GPIO_Init+0x2f8>)
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007b98:	4b2d      	ldr	r3, [pc, #180]	; (8007c50 <HAL_GPIO_Init+0x2f8>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	43da      	mvns	r2, r3
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	2380      	movs	r3, #128	; 0x80
 8007bae:	029b      	lsls	r3, r3, #10
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007bbc:	4b24      	ldr	r3, [pc, #144]	; (8007c50 <HAL_GPIO_Init+0x2f8>)
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007bc2:	4b23      	ldr	r3, [pc, #140]	; (8007c50 <HAL_GPIO_Init+0x2f8>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	43da      	mvns	r2, r3
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	2380      	movs	r3, #128	; 0x80
 8007bd8:	035b      	lsls	r3, r3, #13
 8007bda:	4013      	ands	r3, r2
 8007bdc:	d003      	beq.n	8007be6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007be6:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <HAL_GPIO_Init+0x2f8>)
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007bec:	4b18      	ldr	r3, [pc, #96]	; (8007c50 <HAL_GPIO_Init+0x2f8>)
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	43da      	mvns	r2, r3
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	2380      	movs	r3, #128	; 0x80
 8007c02:	039b      	lsls	r3, r3, #14
 8007c04:	4013      	ands	r3, r2
 8007c06:	d003      	beq.n	8007c10 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007c10:	4b0f      	ldr	r3, [pc, #60]	; (8007c50 <HAL_GPIO_Init+0x2f8>)
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	40da      	lsrs	r2, r3
 8007c24:	1e13      	subs	r3, r2, #0
 8007c26:	d000      	beq.n	8007c2a <HAL_GPIO_Init+0x2d2>
 8007c28:	e6a2      	b.n	8007970 <HAL_GPIO_Init+0x18>
  }
}
 8007c2a:	46c0      	nop			; (mov r8, r8)
 8007c2c:	46c0      	nop			; (mov r8, r8)
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	b006      	add	sp, #24
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	40021000 	.word	0x40021000
 8007c38:	40010000 	.word	0x40010000
 8007c3c:	50000400 	.word	0x50000400
 8007c40:	50000800 	.word	0x50000800
 8007c44:	50000c00 	.word	0x50000c00
 8007c48:	50001000 	.word	0x50001000
 8007c4c:	50001c00 	.word	0x50001c00
 8007c50:	40010400 	.word	0x40010400

08007c54 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8007c6a:	e0bc      	b.n	8007de6 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	409a      	lsls	r2, r3
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	4013      	ands	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d100      	bne.n	8007c80 <HAL_GPIO_DeInit+0x2c>
 8007c7e:	e0af      	b.n	8007de0 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8007c80:	4a5e      	ldr	r2, [pc, #376]	; (8007dfc <HAL_GPIO_DeInit+0x1a8>)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	089b      	lsrs	r3, r3, #2
 8007c86:	3302      	adds	r3, #2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	589b      	ldr	r3, [r3, r2]
 8007c8c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2203      	movs	r2, #3
 8007c92:	4013      	ands	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	220f      	movs	r2, #15
 8007c98:	409a      	lsls	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	23a0      	movs	r3, #160	; 0xa0
 8007ca4:	05db      	lsls	r3, r3, #23
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d01f      	beq.n	8007cea <HAL_GPIO_DeInit+0x96>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a54      	ldr	r2, [pc, #336]	; (8007e00 <HAL_GPIO_DeInit+0x1ac>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d019      	beq.n	8007ce6 <HAL_GPIO_DeInit+0x92>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a53      	ldr	r2, [pc, #332]	; (8007e04 <HAL_GPIO_DeInit+0x1b0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d013      	beq.n	8007ce2 <HAL_GPIO_DeInit+0x8e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a52      	ldr	r2, [pc, #328]	; (8007e08 <HAL_GPIO_DeInit+0x1b4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00d      	beq.n	8007cde <HAL_GPIO_DeInit+0x8a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a51      	ldr	r2, [pc, #324]	; (8007e0c <HAL_GPIO_DeInit+0x1b8>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d007      	beq.n	8007cda <HAL_GPIO_DeInit+0x86>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a50      	ldr	r2, [pc, #320]	; (8007e10 <HAL_GPIO_DeInit+0x1bc>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d101      	bne.n	8007cd6 <HAL_GPIO_DeInit+0x82>
 8007cd2:	2305      	movs	r3, #5
 8007cd4:	e00a      	b.n	8007cec <HAL_GPIO_DeInit+0x98>
 8007cd6:	2306      	movs	r3, #6
 8007cd8:	e008      	b.n	8007cec <HAL_GPIO_DeInit+0x98>
 8007cda:	2304      	movs	r3, #4
 8007cdc:	e006      	b.n	8007cec <HAL_GPIO_DeInit+0x98>
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e004      	b.n	8007cec <HAL_GPIO_DeInit+0x98>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e002      	b.n	8007cec <HAL_GPIO_DeInit+0x98>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <HAL_GPIO_DeInit+0x98>
 8007cea:	2300      	movs	r3, #0
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	2103      	movs	r1, #3
 8007cf0:	400a      	ands	r2, r1
 8007cf2:	0092      	lsls	r2, r2, #2
 8007cf4:	4093      	lsls	r3, r2
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d132      	bne.n	8007d62 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007cfc:	4b45      	ldr	r3, [pc, #276]	; (8007e14 <HAL_GPIO_DeInit+0x1c0>)
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	43d9      	mvns	r1, r3
 8007d04:	4b43      	ldr	r3, [pc, #268]	; (8007e14 <HAL_GPIO_DeInit+0x1c0>)
 8007d06:	400a      	ands	r2, r1
 8007d08:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007d0a:	4b42      	ldr	r3, [pc, #264]	; (8007e14 <HAL_GPIO_DeInit+0x1c0>)
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	43d9      	mvns	r1, r3
 8007d12:	4b40      	ldr	r3, [pc, #256]	; (8007e14 <HAL_GPIO_DeInit+0x1c0>)
 8007d14:	400a      	ands	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007d18:	4b3e      	ldr	r3, [pc, #248]	; (8007e14 <HAL_GPIO_DeInit+0x1c0>)
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	43d9      	mvns	r1, r3
 8007d20:	4b3c      	ldr	r3, [pc, #240]	; (8007e14 <HAL_GPIO_DeInit+0x1c0>)
 8007d22:	400a      	ands	r2, r1
 8007d24:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007d26:	4b3b      	ldr	r3, [pc, #236]	; (8007e14 <HAL_GPIO_DeInit+0x1c0>)
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	43d9      	mvns	r1, r3
 8007d2e:	4b39      	ldr	r3, [pc, #228]	; (8007e14 <HAL_GPIO_DeInit+0x1c0>)
 8007d30:	400a      	ands	r2, r1
 8007d32:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2203      	movs	r2, #3
 8007d38:	4013      	ands	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	220f      	movs	r2, #15
 8007d3e:	409a      	lsls	r2, r3
 8007d40:	0013      	movs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007d44:	4a2d      	ldr	r2, [pc, #180]	; (8007dfc <HAL_GPIO_DeInit+0x1a8>)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	089b      	lsrs	r3, r3, #2
 8007d4a:	3302      	adds	r3, #2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	589a      	ldr	r2, [r3, r2]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	43d9      	mvns	r1, r3
 8007d54:	4829      	ldr	r0, [pc, #164]	; (8007dfc <HAL_GPIO_DeInit+0x1a8>)
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	089b      	lsrs	r3, r3, #2
 8007d5a:	400a      	ands	r2, r1
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	2103      	movs	r1, #3
 8007d6c:	4099      	lsls	r1, r3
 8007d6e:	000b      	movs	r3, r1
 8007d70:	431a      	orrs	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	08da      	lsrs	r2, r3, #3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3208      	adds	r2, #8
 8007d7e:	0092      	lsls	r2, r2, #2
 8007d80:	58d3      	ldr	r3, [r2, r3]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	2107      	movs	r1, #7
 8007d86:	400a      	ands	r2, r1
 8007d88:	0092      	lsls	r2, r2, #2
 8007d8a:	210f      	movs	r1, #15
 8007d8c:	4091      	lsls	r1, r2
 8007d8e:	000a      	movs	r2, r1
 8007d90:	43d1      	mvns	r1, r2
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	08d2      	lsrs	r2, r2, #3
 8007d96:	4019      	ands	r1, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3208      	adds	r2, #8
 8007d9c:	0092      	lsls	r2, r2, #2
 8007d9e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	0052      	lsls	r2, r2, #1
 8007da8:	2103      	movs	r1, #3
 8007daa:	4091      	lsls	r1, r2
 8007dac:	000a      	movs	r2, r1
 8007dae:	43d2      	mvns	r2, r2
 8007db0:	401a      	ands	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2101      	movs	r1, #1
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4091      	lsls	r1, r2
 8007dc0:	000a      	movs	r2, r1
 8007dc2:	43d2      	mvns	r2, r2
 8007dc4:	401a      	ands	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	0052      	lsls	r2, r2, #1
 8007dd2:	2103      	movs	r1, #3
 8007dd4:	4091      	lsls	r1, r2
 8007dd6:	000a      	movs	r2, r1
 8007dd8:	43d2      	mvns	r2, r2
 8007dda:	401a      	ands	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	609a      	str	r2, [r3, #8]
    }
    position++;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	3301      	adds	r3, #1
 8007de4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	40da      	lsrs	r2, r3
 8007dec:	1e13      	subs	r3, r2, #0
 8007dee:	d000      	beq.n	8007df2 <HAL_GPIO_DeInit+0x19e>
 8007df0:	e73c      	b.n	8007c6c <HAL_GPIO_DeInit+0x18>
  }
}
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	46c0      	nop			; (mov r8, r8)
 8007df6:	46bd      	mov	sp, r7
 8007df8:	b006      	add	sp, #24
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	50000400 	.word	0x50000400
 8007e04:	50000800 	.word	0x50000800
 8007e08:	50000c00 	.word	0x50000c00
 8007e0c:	50001000 	.word	0x50001000
 8007e10:	50001c00 	.word	0x50001c00
 8007e14:	40010400 	.word	0x40010400

08007e18 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	000a      	movs	r2, r1
 8007e22:	1cbb      	adds	r3, r7, #2
 8007e24:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	1cba      	adds	r2, r7, #2
 8007e2c:	8812      	ldrh	r2, [r2, #0]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	d004      	beq.n	8007e3c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007e32:	230f      	movs	r3, #15
 8007e34:	18fb      	adds	r3, r7, r3
 8007e36:	2201      	movs	r2, #1
 8007e38:	701a      	strb	r2, [r3, #0]
 8007e3a:	e003      	b.n	8007e44 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e3c:	230f      	movs	r3, #15
 8007e3e:	18fb      	adds	r3, r7, r3
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007e44:	230f      	movs	r3, #15
 8007e46:	18fb      	adds	r3, r7, r3
 8007e48:	781b      	ldrb	r3, [r3, #0]
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b004      	add	sp, #16
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	0008      	movs	r0, r1
 8007e5c:	0011      	movs	r1, r2
 8007e5e:	1cbb      	adds	r3, r7, #2
 8007e60:	1c02      	adds	r2, r0, #0
 8007e62:	801a      	strh	r2, [r3, #0]
 8007e64:	1c7b      	adds	r3, r7, #1
 8007e66:	1c0a      	adds	r2, r1, #0
 8007e68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e6a:	1c7b      	adds	r3, r7, #1
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e72:	1cbb      	adds	r3, r7, #2
 8007e74:	881a      	ldrh	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007e7a:	e003      	b.n	8007e84 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007e7c:	1cbb      	adds	r3, r7, #2
 8007e7e:	881a      	ldrh	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007e84:	46c0      	nop			; (mov r8, r8)
 8007e86:	46bd      	mov	sp, r7
 8007e88:	b002      	add	sp, #8
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	000a      	movs	r2, r1
 8007e96:	1cbb      	adds	r3, r7, #2
 8007e98:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ea0:	1cbb      	adds	r3, r7, #2
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	041a      	lsls	r2, r3, #16
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	43db      	mvns	r3, r3
 8007eae:	1cb9      	adds	r1, r7, #2
 8007eb0:	8809      	ldrh	r1, [r1, #0]
 8007eb2:	400b      	ands	r3, r1
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	619a      	str	r2, [r3, #24]
}
 8007eba:	46c0      	nop			; (mov r8, r8)
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b004      	add	sp, #16
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e082      	b.n	8007fdc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2241      	movs	r2, #65	; 0x41
 8007eda:	5c9b      	ldrb	r3, [r3, r2]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d107      	bne.n	8007ef2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2240      	movs	r2, #64	; 0x40
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	0018      	movs	r0, r3
 8007eee:	f000 f87f 	bl	8007ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2241      	movs	r2, #65	; 0x41
 8007ef6:	2124      	movs	r1, #36	; 0x24
 8007ef8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2101      	movs	r1, #1
 8007f06:	438a      	bics	r2, r1
 8007f08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4934      	ldr	r1, [pc, #208]	; (8007fe4 <HAL_I2C_Init+0x120>)
 8007f14:	400a      	ands	r2, r1
 8007f16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4931      	ldr	r1, [pc, #196]	; (8007fe8 <HAL_I2C_Init+0x124>)
 8007f24:	400a      	ands	r2, r1
 8007f26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d108      	bne.n	8007f42 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2180      	movs	r1, #128	; 0x80
 8007f3a:	0209      	lsls	r1, r1, #8
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]
 8007f40:	e007      	b.n	8007f52 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2184      	movs	r1, #132	; 0x84
 8007f4c:	0209      	lsls	r1, r1, #8
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d104      	bne.n	8007f64 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2280      	movs	r2, #128	; 0x80
 8007f60:	0112      	lsls	r2, r2, #4
 8007f62:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	491f      	ldr	r1, [pc, #124]	; (8007fec <HAL_I2C_Init+0x128>)
 8007f70:	430a      	orrs	r2, r1
 8007f72:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	491a      	ldr	r1, [pc, #104]	; (8007fe8 <HAL_I2C_Init+0x124>)
 8007f80:	400a      	ands	r2, r1
 8007f82:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691a      	ldr	r2, [r3, #16]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	0011      	movs	r1, r2
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	021a      	lsls	r2, r3, #8
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69d9      	ldr	r1, [r3, #28]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1a      	ldr	r2, [r3, #32]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2101      	movs	r1, #1
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2241      	movs	r2, #65	; 0x41
 8007fc8:	2120      	movs	r1, #32
 8007fca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2242      	movs	r2, #66	; 0x42
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	0018      	movs	r0, r3
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	b002      	add	sp, #8
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	f0ffffff 	.word	0xf0ffffff
 8007fe8:	ffff7fff 	.word	0xffff7fff
 8007fec:	02008000 	.word	0x02008000

08007ff0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007ff8:	46c0      	nop			; (mov r8, r8)
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b002      	add	sp, #8
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008000:	b590      	push	{r4, r7, lr}
 8008002:	b089      	sub	sp, #36	; 0x24
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	000c      	movs	r4, r1
 800800a:	0010      	movs	r0, r2
 800800c:	0019      	movs	r1, r3
 800800e:	230a      	movs	r3, #10
 8008010:	18fb      	adds	r3, r7, r3
 8008012:	1c22      	adds	r2, r4, #0
 8008014:	801a      	strh	r2, [r3, #0]
 8008016:	2308      	movs	r3, #8
 8008018:	18fb      	adds	r3, r7, r3
 800801a:	1c02      	adds	r2, r0, #0
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	1dbb      	adds	r3, r7, #6
 8008020:	1c0a      	adds	r2, r1, #0
 8008022:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2241      	movs	r2, #65	; 0x41
 8008028:	5c9b      	ldrb	r3, [r3, r2]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b20      	cmp	r3, #32
 800802e:	d000      	beq.n	8008032 <HAL_I2C_Mem_Write+0x32>
 8008030:	e10c      	b.n	800824c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <HAL_I2C_Mem_Write+0x42>
 8008038:	232c      	movs	r3, #44	; 0x2c
 800803a:	18fb      	adds	r3, r7, r3
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2280      	movs	r2, #128	; 0x80
 8008046:	0092      	lsls	r2, r2, #2
 8008048:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e0ff      	b.n	800824e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2240      	movs	r2, #64	; 0x40
 8008052:	5c9b      	ldrb	r3, [r3, r2]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_I2C_Mem_Write+0x5c>
 8008058:	2302      	movs	r3, #2
 800805a:	e0f8      	b.n	800824e <HAL_I2C_Mem_Write+0x24e>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2240      	movs	r2, #64	; 0x40
 8008060:	2101      	movs	r1, #1
 8008062:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008064:	f7fd f8c5 	bl	80051f2 <HAL_GetTick>
 8008068:	0003      	movs	r3, r0
 800806a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800806c:	2380      	movs	r3, #128	; 0x80
 800806e:	0219      	lsls	r1, r3, #8
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	2319      	movs	r3, #25
 8008078:	2201      	movs	r2, #1
 800807a:	f000 fb17 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 800807e:	1e03      	subs	r3, r0, #0
 8008080:	d001      	beq.n	8008086 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e0e3      	b.n	800824e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2241      	movs	r2, #65	; 0x41
 800808a:	2121      	movs	r1, #33	; 0x21
 800808c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2242      	movs	r2, #66	; 0x42
 8008092:	2140      	movs	r1, #64	; 0x40
 8008094:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	222c      	movs	r2, #44	; 0x2c
 80080a6:	18ba      	adds	r2, r7, r2
 80080a8:	8812      	ldrh	r2, [r2, #0]
 80080aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080b2:	1dbb      	adds	r3, r7, #6
 80080b4:	881c      	ldrh	r4, [r3, #0]
 80080b6:	2308      	movs	r3, #8
 80080b8:	18fb      	adds	r3, r7, r3
 80080ba:	881a      	ldrh	r2, [r3, #0]
 80080bc:	230a      	movs	r3, #10
 80080be:	18fb      	adds	r3, r7, r3
 80080c0:	8819      	ldrh	r1, [r3, #0]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	0023      	movs	r3, r4
 80080ce:	f000 fa05 	bl	80084dc <I2C_RequestMemoryWrite>
 80080d2:	1e03      	subs	r3, r0, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2240      	movs	r2, #64	; 0x40
 80080da:	2100      	movs	r1, #0
 80080dc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e0b5      	b.n	800824e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	2bff      	cmp	r3, #255	; 0xff
 80080ea:	d911      	bls.n	8008110 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	22ff      	movs	r2, #255	; 0xff
 80080f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	2380      	movs	r3, #128	; 0x80
 80080fa:	045c      	lsls	r4, r3, #17
 80080fc:	230a      	movs	r3, #10
 80080fe:	18fb      	adds	r3, r7, r3
 8008100:	8819      	ldrh	r1, [r3, #0]
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	2300      	movs	r3, #0
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	0023      	movs	r3, r4
 800810a:	f000 fbef 	bl	80088ec <I2C_TransferConfig>
 800810e:	e012      	b.n	8008136 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008114:	b29a      	uxth	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800811e:	b2da      	uxtb	r2, r3
 8008120:	2380      	movs	r3, #128	; 0x80
 8008122:	049c      	lsls	r4, r3, #18
 8008124:	230a      	movs	r3, #10
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	8819      	ldrh	r1, [r3, #0]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	2300      	movs	r3, #0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	0023      	movs	r3, r4
 8008132:	f000 fbdb 	bl	80088ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	0018      	movs	r0, r3
 800813e:	f000 faf4 	bl	800872a <I2C_WaitOnTXISFlagUntilTimeout>
 8008142:	1e03      	subs	r3, r0, #0
 8008144:	d001      	beq.n	800814a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e081      	b.n	800824e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008164:	b29b      	uxth	r3, r3
 8008166:	3b01      	subs	r3, #1
 8008168:	b29a      	uxth	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008172:	3b01      	subs	r3, #1
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817e:	b29b      	uxth	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d03a      	beq.n	80081fa <HAL_I2C_Mem_Write+0x1fa>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008188:	2b00      	cmp	r3, #0
 800818a:	d136      	bne.n	80081fa <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800818c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	0013      	movs	r3, r2
 8008196:	2200      	movs	r2, #0
 8008198:	2180      	movs	r1, #128	; 0x80
 800819a:	f000 fa87 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 800819e:	1e03      	subs	r3, r0, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e053      	b.n	800824e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2bff      	cmp	r3, #255	; 0xff
 80081ae:	d911      	bls.n	80081d4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	22ff      	movs	r2, #255	; 0xff
 80081b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	2380      	movs	r3, #128	; 0x80
 80081be:	045c      	lsls	r4, r3, #17
 80081c0:	230a      	movs	r3, #10
 80081c2:	18fb      	adds	r3, r7, r3
 80081c4:	8819      	ldrh	r1, [r3, #0]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	2300      	movs	r3, #0
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	0023      	movs	r3, r4
 80081ce:	f000 fb8d 	bl	80088ec <I2C_TransferConfig>
 80081d2:	e012      	b.n	80081fa <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	2380      	movs	r3, #128	; 0x80
 80081e6:	049c      	lsls	r4, r3, #18
 80081e8:	230a      	movs	r3, #10
 80081ea:	18fb      	adds	r3, r7, r3
 80081ec:	8819      	ldrh	r1, [r3, #0]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	2300      	movs	r3, #0
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	0023      	movs	r3, r4
 80081f6:	f000 fb79 	bl	80088ec <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081fe:	b29b      	uxth	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	d198      	bne.n	8008136 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	0018      	movs	r0, r3
 800820c:	f000 facc 	bl	80087a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008210:	1e03      	subs	r3, r0, #0
 8008212:	d001      	beq.n	8008218 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e01a      	b.n	800824e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2220      	movs	r2, #32
 800821e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	490b      	ldr	r1, [pc, #44]	; (8008258 <HAL_I2C_Mem_Write+0x258>)
 800822c:	400a      	ands	r2, r1
 800822e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2241      	movs	r2, #65	; 0x41
 8008234:	2120      	movs	r1, #32
 8008236:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2242      	movs	r2, #66	; 0x42
 800823c:	2100      	movs	r1, #0
 800823e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2240      	movs	r2, #64	; 0x40
 8008244:	2100      	movs	r1, #0
 8008246:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	e000      	b.n	800824e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800824c:	2302      	movs	r3, #2
  }
}
 800824e:	0018      	movs	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	b007      	add	sp, #28
 8008254:	bd90      	pop	{r4, r7, pc}
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	fe00e800 	.word	0xfe00e800

0800825c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800825c:	b590      	push	{r4, r7, lr}
 800825e:	b089      	sub	sp, #36	; 0x24
 8008260:	af02      	add	r7, sp, #8
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	000c      	movs	r4, r1
 8008266:	0010      	movs	r0, r2
 8008268:	0019      	movs	r1, r3
 800826a:	230a      	movs	r3, #10
 800826c:	18fb      	adds	r3, r7, r3
 800826e:	1c22      	adds	r2, r4, #0
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	2308      	movs	r3, #8
 8008274:	18fb      	adds	r3, r7, r3
 8008276:	1c02      	adds	r2, r0, #0
 8008278:	801a      	strh	r2, [r3, #0]
 800827a:	1dbb      	adds	r3, r7, #6
 800827c:	1c0a      	adds	r2, r1, #0
 800827e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2241      	movs	r2, #65	; 0x41
 8008284:	5c9b      	ldrb	r3, [r3, r2]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b20      	cmp	r3, #32
 800828a:	d000      	beq.n	800828e <HAL_I2C_Mem_Read+0x32>
 800828c:	e110      	b.n	80084b0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <HAL_I2C_Mem_Read+0x42>
 8008294:	232c      	movs	r3, #44	; 0x2c
 8008296:	18fb      	adds	r3, r7, r3
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d105      	bne.n	80082aa <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2280      	movs	r2, #128	; 0x80
 80082a2:	0092      	lsls	r2, r2, #2
 80082a4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e103      	b.n	80084b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2240      	movs	r2, #64	; 0x40
 80082ae:	5c9b      	ldrb	r3, [r3, r2]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_I2C_Mem_Read+0x5c>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e0fc      	b.n	80084b2 <HAL_I2C_Mem_Read+0x256>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2240      	movs	r2, #64	; 0x40
 80082bc:	2101      	movs	r1, #1
 80082be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082c0:	f7fc ff97 	bl	80051f2 <HAL_GetTick>
 80082c4:	0003      	movs	r3, r0
 80082c6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082c8:	2380      	movs	r3, #128	; 0x80
 80082ca:	0219      	lsls	r1, r3, #8
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	2319      	movs	r3, #25
 80082d4:	2201      	movs	r2, #1
 80082d6:	f000 f9e9 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 80082da:	1e03      	subs	r3, r0, #0
 80082dc:	d001      	beq.n	80082e2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e0e7      	b.n	80084b2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2241      	movs	r2, #65	; 0x41
 80082e6:	2122      	movs	r1, #34	; 0x22
 80082e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2242      	movs	r2, #66	; 0x42
 80082ee:	2140      	movs	r1, #64	; 0x40
 80082f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	222c      	movs	r2, #44	; 0x2c
 8008302:	18ba      	adds	r2, r7, r2
 8008304:	8812      	ldrh	r2, [r2, #0]
 8008306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800830e:	1dbb      	adds	r3, r7, #6
 8008310:	881c      	ldrh	r4, [r3, #0]
 8008312:	2308      	movs	r3, #8
 8008314:	18fb      	adds	r3, r7, r3
 8008316:	881a      	ldrh	r2, [r3, #0]
 8008318:	230a      	movs	r3, #10
 800831a:	18fb      	adds	r3, r7, r3
 800831c:	8819      	ldrh	r1, [r3, #0]
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	0023      	movs	r3, r4
 800832a:	f000 f93b 	bl	80085a4 <I2C_RequestMemoryRead>
 800832e:	1e03      	subs	r3, r0, #0
 8008330:	d005      	beq.n	800833e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2240      	movs	r2, #64	; 0x40
 8008336:	2100      	movs	r1, #0
 8008338:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e0b9      	b.n	80084b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008342:	b29b      	uxth	r3, r3
 8008344:	2bff      	cmp	r3, #255	; 0xff
 8008346:	d911      	bls.n	800836c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	22ff      	movs	r2, #255	; 0xff
 800834c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008352:	b2da      	uxtb	r2, r3
 8008354:	2380      	movs	r3, #128	; 0x80
 8008356:	045c      	lsls	r4, r3, #17
 8008358:	230a      	movs	r3, #10
 800835a:	18fb      	adds	r3, r7, r3
 800835c:	8819      	ldrh	r1, [r3, #0]
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	4b56      	ldr	r3, [pc, #344]	; (80084bc <HAL_I2C_Mem_Read+0x260>)
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	0023      	movs	r3, r4
 8008366:	f000 fac1 	bl	80088ec <I2C_TransferConfig>
 800836a:	e012      	b.n	8008392 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800837a:	b2da      	uxtb	r2, r3
 800837c:	2380      	movs	r3, #128	; 0x80
 800837e:	049c      	lsls	r4, r3, #18
 8008380:	230a      	movs	r3, #10
 8008382:	18fb      	adds	r3, r7, r3
 8008384:	8819      	ldrh	r1, [r3, #0]
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	4b4c      	ldr	r3, [pc, #304]	; (80084bc <HAL_I2C_Mem_Read+0x260>)
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	0023      	movs	r3, r4
 800838e:	f000 faad 	bl	80088ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	0013      	movs	r3, r2
 800839c:	2200      	movs	r2, #0
 800839e:	2104      	movs	r1, #4
 80083a0:	f000 f984 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 80083a4:	1e03      	subs	r3, r0, #0
 80083a6:	d001      	beq.n	80083ac <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e082      	b.n	80084b2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d03a      	beq.n	800845e <HAL_I2C_Mem_Read+0x202>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d136      	bne.n	800845e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	0013      	movs	r3, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	2180      	movs	r1, #128	; 0x80
 80083fe:	f000 f955 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 8008402:	1e03      	subs	r3, r0, #0
 8008404:	d001      	beq.n	800840a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e053      	b.n	80084b2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800840e:	b29b      	uxth	r3, r3
 8008410:	2bff      	cmp	r3, #255	; 0xff
 8008412:	d911      	bls.n	8008438 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	22ff      	movs	r2, #255	; 0xff
 8008418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841e:	b2da      	uxtb	r2, r3
 8008420:	2380      	movs	r3, #128	; 0x80
 8008422:	045c      	lsls	r4, r3, #17
 8008424:	230a      	movs	r3, #10
 8008426:	18fb      	adds	r3, r7, r3
 8008428:	8819      	ldrh	r1, [r3, #0]
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	2300      	movs	r3, #0
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	0023      	movs	r3, r4
 8008432:	f000 fa5b 	bl	80088ec <I2C_TransferConfig>
 8008436:	e012      	b.n	800845e <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843c:	b29a      	uxth	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008446:	b2da      	uxtb	r2, r3
 8008448:	2380      	movs	r3, #128	; 0x80
 800844a:	049c      	lsls	r4, r3, #18
 800844c:	230a      	movs	r3, #10
 800844e:	18fb      	adds	r3, r7, r3
 8008450:	8819      	ldrh	r1, [r3, #0]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	2300      	movs	r3, #0
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	0023      	movs	r3, r4
 800845a:	f000 fa47 	bl	80088ec <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008462:	b29b      	uxth	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d194      	bne.n	8008392 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	0018      	movs	r0, r3
 8008470:	f000 f99a 	bl	80087a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008474:	1e03      	subs	r3, r0, #0
 8008476:	d001      	beq.n	800847c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e01a      	b.n	80084b2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2220      	movs	r2, #32
 8008482:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	490c      	ldr	r1, [pc, #48]	; (80084c0 <HAL_I2C_Mem_Read+0x264>)
 8008490:	400a      	ands	r2, r1
 8008492:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2241      	movs	r2, #65	; 0x41
 8008498:	2120      	movs	r1, #32
 800849a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2242      	movs	r2, #66	; 0x42
 80084a0:	2100      	movs	r1, #0
 80084a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2240      	movs	r2, #64	; 0x40
 80084a8:	2100      	movs	r1, #0
 80084aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	e000      	b.n	80084b2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80084b0:	2302      	movs	r3, #2
  }
}
 80084b2:	0018      	movs	r0, r3
 80084b4:	46bd      	mov	sp, r7
 80084b6:	b007      	add	sp, #28
 80084b8:	bd90      	pop	{r4, r7, pc}
 80084ba:	46c0      	nop			; (mov r8, r8)
 80084bc:	80002400 	.word	0x80002400
 80084c0:	fe00e800 	.word	0xfe00e800

080084c4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2241      	movs	r2, #65	; 0x41
 80084d0:	5c9b      	ldrb	r3, [r3, r2]
 80084d2:	b2db      	uxtb	r3, r3
}
 80084d4:	0018      	movs	r0, r3
 80084d6:	46bd      	mov	sp, r7
 80084d8:	b002      	add	sp, #8
 80084da:	bd80      	pop	{r7, pc}

080084dc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084dc:	b5b0      	push	{r4, r5, r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af02      	add	r7, sp, #8
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	000c      	movs	r4, r1
 80084e6:	0010      	movs	r0, r2
 80084e8:	0019      	movs	r1, r3
 80084ea:	250a      	movs	r5, #10
 80084ec:	197b      	adds	r3, r7, r5
 80084ee:	1c22      	adds	r2, r4, #0
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	2308      	movs	r3, #8
 80084f4:	18fb      	adds	r3, r7, r3
 80084f6:	1c02      	adds	r2, r0, #0
 80084f8:	801a      	strh	r2, [r3, #0]
 80084fa:	1dbb      	adds	r3, r7, #6
 80084fc:	1c0a      	adds	r2, r1, #0
 80084fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008500:	1dbb      	adds	r3, r7, #6
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b2da      	uxtb	r2, r3
 8008506:	2380      	movs	r3, #128	; 0x80
 8008508:	045c      	lsls	r4, r3, #17
 800850a:	197b      	adds	r3, r7, r5
 800850c:	8819      	ldrh	r1, [r3, #0]
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	4b23      	ldr	r3, [pc, #140]	; (80085a0 <I2C_RequestMemoryWrite+0xc4>)
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	0023      	movs	r3, r4
 8008516:	f000 f9e9 	bl	80088ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800851a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851c:	6a39      	ldr	r1, [r7, #32]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	0018      	movs	r0, r3
 8008522:	f000 f902 	bl	800872a <I2C_WaitOnTXISFlagUntilTimeout>
 8008526:	1e03      	subs	r3, r0, #0
 8008528:	d001      	beq.n	800852e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e033      	b.n	8008596 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800852e:	1dbb      	adds	r3, r7, #6
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d107      	bne.n	8008546 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008536:	2308      	movs	r3, #8
 8008538:	18fb      	adds	r3, r7, r3
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b2da      	uxtb	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	629a      	str	r2, [r3, #40]	; 0x28
 8008544:	e019      	b.n	800857a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008546:	2308      	movs	r3, #8
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	0a1b      	lsrs	r3, r3, #8
 800854e:	b29b      	uxth	r3, r3
 8008550:	b2da      	uxtb	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800855a:	6a39      	ldr	r1, [r7, #32]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	0018      	movs	r0, r3
 8008560:	f000 f8e3 	bl	800872a <I2C_WaitOnTXISFlagUntilTimeout>
 8008564:	1e03      	subs	r3, r0, #0
 8008566:	d001      	beq.n	800856c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e014      	b.n	8008596 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800856c:	2308      	movs	r3, #8
 800856e:	18fb      	adds	r3, r7, r3
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b2da      	uxtb	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800857a:	6a3a      	ldr	r2, [r7, #32]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	0013      	movs	r3, r2
 8008584:	2200      	movs	r2, #0
 8008586:	2180      	movs	r1, #128	; 0x80
 8008588:	f000 f890 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 800858c:	1e03      	subs	r3, r0, #0
 800858e:	d001      	beq.n	8008594 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e000      	b.n	8008596 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	0018      	movs	r0, r3
 8008598:	46bd      	mov	sp, r7
 800859a:	b004      	add	sp, #16
 800859c:	bdb0      	pop	{r4, r5, r7, pc}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	80002000 	.word	0x80002000

080085a4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80085a4:	b5b0      	push	{r4, r5, r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af02      	add	r7, sp, #8
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	000c      	movs	r4, r1
 80085ae:	0010      	movs	r0, r2
 80085b0:	0019      	movs	r1, r3
 80085b2:	250a      	movs	r5, #10
 80085b4:	197b      	adds	r3, r7, r5
 80085b6:	1c22      	adds	r2, r4, #0
 80085b8:	801a      	strh	r2, [r3, #0]
 80085ba:	2308      	movs	r3, #8
 80085bc:	18fb      	adds	r3, r7, r3
 80085be:	1c02      	adds	r2, r0, #0
 80085c0:	801a      	strh	r2, [r3, #0]
 80085c2:	1dbb      	adds	r3, r7, #6
 80085c4:	1c0a      	adds	r2, r1, #0
 80085c6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80085c8:	1dbb      	adds	r3, r7, #6
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	197b      	adds	r3, r7, r5
 80085d0:	8819      	ldrh	r1, [r3, #0]
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	4b23      	ldr	r3, [pc, #140]	; (8008664 <I2C_RequestMemoryRead+0xc0>)
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	2300      	movs	r3, #0
 80085da:	f000 f987 	bl	80088ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e0:	6a39      	ldr	r1, [r7, #32]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	0018      	movs	r0, r3
 80085e6:	f000 f8a0 	bl	800872a <I2C_WaitOnTXISFlagUntilTimeout>
 80085ea:	1e03      	subs	r3, r0, #0
 80085ec:	d001      	beq.n	80085f2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e033      	b.n	800865a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085f2:	1dbb      	adds	r3, r7, #6
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d107      	bne.n	800860a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085fa:	2308      	movs	r3, #8
 80085fc:	18fb      	adds	r3, r7, r3
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	b2da      	uxtb	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	629a      	str	r2, [r3, #40]	; 0x28
 8008608:	e019      	b.n	800863e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800860a:	2308      	movs	r3, #8
 800860c:	18fb      	adds	r3, r7, r3
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	0a1b      	lsrs	r3, r3, #8
 8008612:	b29b      	uxth	r3, r3
 8008614:	b2da      	uxtb	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800861c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861e:	6a39      	ldr	r1, [r7, #32]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	0018      	movs	r0, r3
 8008624:	f000 f881 	bl	800872a <I2C_WaitOnTXISFlagUntilTimeout>
 8008628:	1e03      	subs	r3, r0, #0
 800862a:	d001      	beq.n	8008630 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e014      	b.n	800865a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008630:	2308      	movs	r3, #8
 8008632:	18fb      	adds	r3, r7, r3
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	b2da      	uxtb	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800863e:	6a3a      	ldr	r2, [r7, #32]
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	0013      	movs	r3, r2
 8008648:	2200      	movs	r2, #0
 800864a:	2140      	movs	r1, #64	; 0x40
 800864c:	f000 f82e 	bl	80086ac <I2C_WaitOnFlagUntilTimeout>
 8008650:	1e03      	subs	r3, r0, #0
 8008652:	d001      	beq.n	8008658 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e000      	b.n	800865a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	0018      	movs	r0, r3
 800865c:	46bd      	mov	sp, r7
 800865e:	b004      	add	sp, #16
 8008660:	bdb0      	pop	{r4, r5, r7, pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	80002000 	.word	0x80002000

08008668 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	2202      	movs	r2, #2
 8008678:	4013      	ands	r3, r2
 800867a:	2b02      	cmp	r3, #2
 800867c:	d103      	bne.n	8008686 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2200      	movs	r2, #0
 8008684:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	2201      	movs	r2, #1
 800868e:	4013      	ands	r3, r2
 8008690:	2b01      	cmp	r3, #1
 8008692:	d007      	beq.n	80086a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699a      	ldr	r2, [r3, #24]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2101      	movs	r1, #1
 80086a0:	430a      	orrs	r2, r1
 80086a2:	619a      	str	r2, [r3, #24]
  }
}
 80086a4:	46c0      	nop			; (mov r8, r8)
 80086a6:	46bd      	mov	sp, r7
 80086a8:	b002      	add	sp, #8
 80086aa:	bd80      	pop	{r7, pc}

080086ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	1dfb      	adds	r3, r7, #7
 80086ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086bc:	e021      	b.n	8008702 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	3301      	adds	r3, #1
 80086c2:	d01e      	beq.n	8008702 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086c4:	f7fc fd95 	bl	80051f2 <HAL_GetTick>
 80086c8:	0002      	movs	r2, r0
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d302      	bcc.n	80086da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d113      	bne.n	8008702 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086de:	2220      	movs	r2, #32
 80086e0:	431a      	orrs	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2241      	movs	r2, #65	; 0x41
 80086ea:	2120      	movs	r1, #32
 80086ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2242      	movs	r2, #66	; 0x42
 80086f2:	2100      	movs	r1, #0
 80086f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2240      	movs	r2, #64	; 0x40
 80086fa:	2100      	movs	r1, #0
 80086fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e00f      	b.n	8008722 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	4013      	ands	r3, r2
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	425a      	negs	r2, r3
 8008712:	4153      	adcs	r3, r2
 8008714:	b2db      	uxtb	r3, r3
 8008716:	001a      	movs	r2, r3
 8008718:	1dfb      	adds	r3, r7, #7
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d0ce      	beq.n	80086be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	0018      	movs	r0, r3
 8008724:	46bd      	mov	sp, r7
 8008726:	b004      	add	sp, #16
 8008728:	bd80      	pop	{r7, pc}

0800872a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	60f8      	str	r0, [r7, #12]
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008736:	e02b      	b.n	8008790 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	0018      	movs	r0, r3
 8008740:	f000 f86e 	bl	8008820 <I2C_IsAcknowledgeFailed>
 8008744:	1e03      	subs	r3, r0, #0
 8008746:	d001      	beq.n	800874c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e029      	b.n	80087a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	3301      	adds	r3, #1
 8008750:	d01e      	beq.n	8008790 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008752:	f7fc fd4e 	bl	80051f2 <HAL_GetTick>
 8008756:	0002      	movs	r2, r0
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	429a      	cmp	r2, r3
 8008760:	d302      	bcc.n	8008768 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d113      	bne.n	8008790 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876c:	2220      	movs	r2, #32
 800876e:	431a      	orrs	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2241      	movs	r2, #65	; 0x41
 8008778:	2120      	movs	r1, #32
 800877a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2242      	movs	r2, #66	; 0x42
 8008780:	2100      	movs	r1, #0
 8008782:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2240      	movs	r2, #64	; 0x40
 8008788:	2100      	movs	r1, #0
 800878a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	e007      	b.n	80087a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	2202      	movs	r2, #2
 8008798:	4013      	ands	r3, r2
 800879a:	2b02      	cmp	r3, #2
 800879c:	d1cc      	bne.n	8008738 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	0018      	movs	r0, r3
 80087a2:	46bd      	mov	sp, r7
 80087a4:	b004      	add	sp, #16
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087b4:	e028      	b.n	8008808 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	68b9      	ldr	r1, [r7, #8]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	0018      	movs	r0, r3
 80087be:	f000 f82f 	bl	8008820 <I2C_IsAcknowledgeFailed>
 80087c2:	1e03      	subs	r3, r0, #0
 80087c4:	d001      	beq.n	80087ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e026      	b.n	8008818 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ca:	f7fc fd12 	bl	80051f2 <HAL_GetTick>
 80087ce:	0002      	movs	r2, r0
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d302      	bcc.n	80087e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d113      	bne.n	8008808 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e4:	2220      	movs	r2, #32
 80087e6:	431a      	orrs	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2241      	movs	r2, #65	; 0x41
 80087f0:	2120      	movs	r1, #32
 80087f2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2242      	movs	r2, #66	; 0x42
 80087f8:	2100      	movs	r1, #0
 80087fa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2240      	movs	r2, #64	; 0x40
 8008800:	2100      	movs	r1, #0
 8008802:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e007      	b.n	8008818 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	2220      	movs	r2, #32
 8008810:	4013      	ands	r3, r2
 8008812:	2b20      	cmp	r3, #32
 8008814:	d1cf      	bne.n	80087b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	0018      	movs	r0, r3
 800881a:	46bd      	mov	sp, r7
 800881c:	b004      	add	sp, #16
 800881e:	bd80      	pop	{r7, pc}

08008820 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	2210      	movs	r2, #16
 8008834:	4013      	ands	r3, r2
 8008836:	2b10      	cmp	r3, #16
 8008838:	d151      	bne.n	80088de <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800883a:	e021      	b.n	8008880 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	3301      	adds	r3, #1
 8008840:	d01e      	beq.n	8008880 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008842:	f7fc fcd6 	bl	80051f2 <HAL_GetTick>
 8008846:	0002      	movs	r2, r0
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	429a      	cmp	r2, r3
 8008850:	d302      	bcc.n	8008858 <I2C_IsAcknowledgeFailed+0x38>
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d113      	bne.n	8008880 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885c:	2220      	movs	r2, #32
 800885e:	431a      	orrs	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2241      	movs	r2, #65	; 0x41
 8008868:	2120      	movs	r1, #32
 800886a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2242      	movs	r2, #66	; 0x42
 8008870:	2100      	movs	r1, #0
 8008872:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2240      	movs	r2, #64	; 0x40
 8008878:	2100      	movs	r1, #0
 800887a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e02f      	b.n	80088e0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	2220      	movs	r2, #32
 8008888:	4013      	ands	r3, r2
 800888a:	2b20      	cmp	r3, #32
 800888c:	d1d6      	bne.n	800883c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2210      	movs	r2, #16
 8008894:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2220      	movs	r2, #32
 800889c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	0018      	movs	r0, r3
 80088a2:	f7ff fee1 	bl	8008668 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	490d      	ldr	r1, [pc, #52]	; (80088e8 <I2C_IsAcknowledgeFailed+0xc8>)
 80088b2:	400a      	ands	r2, r1
 80088b4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ba:	2204      	movs	r2, #4
 80088bc:	431a      	orrs	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2241      	movs	r2, #65	; 0x41
 80088c6:	2120      	movs	r1, #32
 80088c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2242      	movs	r2, #66	; 0x42
 80088ce:	2100      	movs	r1, #0
 80088d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2240      	movs	r2, #64	; 0x40
 80088d6:	2100      	movs	r1, #0
 80088d8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e000      	b.n	80088e0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	0018      	movs	r0, r3
 80088e2:	46bd      	mov	sp, r7
 80088e4:	b004      	add	sp, #16
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	fe00e800 	.word	0xfe00e800

080088ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80088ec:	b590      	push	{r4, r7, lr}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	0008      	movs	r0, r1
 80088f6:	0011      	movs	r1, r2
 80088f8:	607b      	str	r3, [r7, #4]
 80088fa:	240a      	movs	r4, #10
 80088fc:	193b      	adds	r3, r7, r4
 80088fe:	1c02      	adds	r2, r0, #0
 8008900:	801a      	strh	r2, [r3, #0]
 8008902:	2009      	movs	r0, #9
 8008904:	183b      	adds	r3, r7, r0
 8008906:	1c0a      	adds	r2, r1, #0
 8008908:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	6a3a      	ldr	r2, [r7, #32]
 8008912:	0d51      	lsrs	r1, r2, #21
 8008914:	2280      	movs	r2, #128	; 0x80
 8008916:	00d2      	lsls	r2, r2, #3
 8008918:	400a      	ands	r2, r1
 800891a:	490e      	ldr	r1, [pc, #56]	; (8008954 <I2C_TransferConfig+0x68>)
 800891c:	430a      	orrs	r2, r1
 800891e:	43d2      	mvns	r2, r2
 8008920:	401a      	ands	r2, r3
 8008922:	0011      	movs	r1, r2
 8008924:	193b      	adds	r3, r7, r4
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	059b      	lsls	r3, r3, #22
 800892a:	0d9a      	lsrs	r2, r3, #22
 800892c:	183b      	adds	r3, r7, r0
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	0418      	lsls	r0, r3, #16
 8008932:	23ff      	movs	r3, #255	; 0xff
 8008934:	041b      	lsls	r3, r3, #16
 8008936:	4003      	ands	r3, r0
 8008938:	431a      	orrs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	431a      	orrs	r2, r3
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	431a      	orrs	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800894a:	46c0      	nop			; (mov r8, r8)
 800894c:	46bd      	mov	sp, r7
 800894e:	b005      	add	sp, #20
 8008950:	bd90      	pop	{r4, r7, pc}
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	03ff63ff 	.word	0x03ff63ff

08008958 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2241      	movs	r2, #65	; 0x41
 8008966:	5c9b      	ldrb	r3, [r3, r2]
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b20      	cmp	r3, #32
 800896c:	d138      	bne.n	80089e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2240      	movs	r2, #64	; 0x40
 8008972:	5c9b      	ldrb	r3, [r3, r2]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d101      	bne.n	800897c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008978:	2302      	movs	r3, #2
 800897a:	e032      	b.n	80089e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2240      	movs	r2, #64	; 0x40
 8008980:	2101      	movs	r1, #1
 8008982:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2241      	movs	r2, #65	; 0x41
 8008988:	2124      	movs	r1, #36	; 0x24
 800898a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2101      	movs	r1, #1
 8008998:	438a      	bics	r2, r1
 800899a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4911      	ldr	r1, [pc, #68]	; (80089ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80089a8:	400a      	ands	r2, r1
 80089aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6819      	ldr	r1, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2101      	movs	r1, #1
 80089c8:	430a      	orrs	r2, r1
 80089ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2241      	movs	r2, #65	; 0x41
 80089d0:	2120      	movs	r1, #32
 80089d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2240      	movs	r2, #64	; 0x40
 80089d8:	2100      	movs	r1, #0
 80089da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	e000      	b.n	80089e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80089e0:	2302      	movs	r3, #2
  }
}
 80089e2:	0018      	movs	r0, r3
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b002      	add	sp, #8
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	ffffefff 	.word	0xffffefff

080089f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2241      	movs	r2, #65	; 0x41
 80089fe:	5c9b      	ldrb	r3, [r3, r2]
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b20      	cmp	r3, #32
 8008a04:	d139      	bne.n	8008a7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2240      	movs	r2, #64	; 0x40
 8008a0a:	5c9b      	ldrb	r3, [r3, r2]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e033      	b.n	8008a7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2240      	movs	r2, #64	; 0x40
 8008a18:	2101      	movs	r1, #1
 8008a1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2241      	movs	r2, #65	; 0x41
 8008a20:	2124      	movs	r1, #36	; 0x24
 8008a22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2101      	movs	r1, #1
 8008a30:	438a      	bics	r2, r1
 8008a32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4a11      	ldr	r2, [pc, #68]	; (8008a84 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	021b      	lsls	r3, r3, #8
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2101      	movs	r1, #1
 8008a62:	430a      	orrs	r2, r1
 8008a64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2241      	movs	r2, #65	; 0x41
 8008a6a:	2120      	movs	r1, #32
 8008a6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2240      	movs	r2, #64	; 0x40
 8008a72:	2100      	movs	r1, #0
 8008a74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e000      	b.n	8008a7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a7a:	2302      	movs	r3, #2
  }
}
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	b004      	add	sp, #16
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	fffff0ff 	.word	0xfffff0ff

08008a88 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8008a8c:	4b04      	ldr	r3, [pc, #16]	; (8008aa0 <HAL_PWR_DisablePVD+0x18>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4b03      	ldr	r3, [pc, #12]	; (8008aa0 <HAL_PWR_DisablePVD+0x18>)
 8008a92:	2110      	movs	r1, #16
 8008a94:	438a      	bics	r2, r1
 8008a96:	601a      	str	r2, [r3, #0]
}
 8008a98:	46c0      	nop			; (mov r8, r8)
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	46c0      	nop			; (mov r8, r8)
 8008aa0:	40007000 	.word	0x40007000

08008aa4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	000a      	movs	r2, r1
 8008aae:	1cfb      	adds	r3, r7, #3
 8008ab0:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008ab6:	4b23      	ldr	r3, [pc, #140]	; (8008b44 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	2380      	movs	r3, #128	; 0x80
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4013      	ands	r3, r2
 8008ac0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008ac2:	4b21      	ldr	r3, [pc, #132]	; (8008b48 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4013      	ands	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d008      	beq.n	8008ae4 <HAL_PWR_EnterSLEEPMode+0x40>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008ad8:	4b1a      	ldr	r3, [pc, #104]	; (8008b44 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	4b19      	ldr	r3, [pc, #100]	; (8008b44 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008ade:	491b      	ldr	r1, [pc, #108]	; (8008b4c <HAL_PWR_EnterSLEEPMode+0xa8>)
 8008ae0:	400a      	ands	r2, r1
 8008ae2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008ae4:	4b17      	ldr	r3, [pc, #92]	; (8008b44 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2203      	movs	r2, #3
 8008aee:	4393      	bics	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008afa:	4b12      	ldr	r3, [pc, #72]	; (8008b44 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008b00:	4b13      	ldr	r3, [pc, #76]	; (8008b50 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008b02:	691a      	ldr	r2, [r3, #16]
 8008b04:	4b12      	ldr	r3, [pc, #72]	; (8008b50 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008b06:	2104      	movs	r1, #4
 8008b08:	438a      	bics	r2, r1
 8008b0a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008b0c:	1cfb      	adds	r3, r7, #3
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008b14:	bf30      	wfi
 8008b16:	e002      	b.n	8008b1e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008b18:	bf40      	sev
    __WFE();
 8008b1a:	bf20      	wfe
    __WFE();
 8008b1c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d009      	beq.n	8008b38 <HAL_PWR_EnterSLEEPMode+0x94>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d006      	beq.n	8008b38 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008b2a:	4b06      	ldr	r3, [pc, #24]	; (8008b44 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b30:	2180      	movs	r1, #128	; 0x80
 8008b32:	0089      	lsls	r1, r1, #2
 8008b34:	430a      	orrs	r2, r1
 8008b36:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8008b38:	46c0      	nop			; (mov r8, r8)

}
 8008b3a:	46c0      	nop			; (mov r8, r8)
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	b006      	add	sp, #24
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	46c0      	nop			; (mov r8, r8)
 8008b44:	40007000 	.word	0x40007000
 8008b48:	40010000 	.word	0x40010000
 8008b4c:	fffffdff 	.word	0xfffffdff
 8008b50:	e000ed00 	.word	0xe000ed00

08008b54 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	000a      	movs	r2, r1
 8008b5e:	1cfb      	adds	r3, r7, #3
 8008b60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008b66:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	2380      	movs	r3, #128	; 0x80
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4013      	ands	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008b72:	4b23      	ldr	r3, [pc, #140]	; (8008c00 <HAL_PWR_EnterSTOPMode+0xac>)
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	2201      	movs	r2, #1
 8008b78:	4013      	ands	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d008      	beq.n	8008b94 <HAL_PWR_EnterSTOPMode+0x40>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d005      	beq.n	8008b94 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008b88:	4b1c      	ldr	r3, [pc, #112]	; (8008bfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	4b1b      	ldr	r3, [pc, #108]	; (8008bfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8008b8e:	491d      	ldr	r1, [pc, #116]	; (8008c04 <HAL_PWR_EnterSTOPMode+0xb0>)
 8008b90:	400a      	ands	r2, r1
 8008b92:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008b94:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	4393      	bics	r3, r2
 8008ba0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008baa:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008bb0:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008bbc:	1cfb      	adds	r3, r7, #3
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008bc4:	bf30      	wfi
 8008bc6:	e002      	b.n	8008bce <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008bc8:	bf40      	sev
    __WFE();
 8008bca:	bf20      	wfe
    __WFE();
 8008bcc:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008bce:	4b0e      	ldr	r3, [pc, #56]	; (8008c08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008bd0:	691a      	ldr	r2, [r3, #16]
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	; (8008c08 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008bd4:	2104      	movs	r1, #4
 8008bd6:	438a      	bics	r2, r1
 8008bd8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d009      	beq.n	8008bf4 <HAL_PWR_EnterSTOPMode+0xa0>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d006      	beq.n	8008bf4 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008be6:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4b04      	ldr	r3, [pc, #16]	; (8008bfc <HAL_PWR_EnterSTOPMode+0xa8>)
 8008bec:	2180      	movs	r1, #128	; 0x80
 8008bee:	0089      	lsls	r1, r1, #2
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	601a      	str	r2, [r3, #0]
  }
}
 8008bf4:	46c0      	nop			; (mov r8, r8)
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	b006      	add	sp, #24
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	40007000 	.word	0x40007000
 8008c00:	40010000 	.word	0x40010000
 8008c04:	fffffdff 	.word	0xfffffdff
 8008c08:	e000ed00 	.word	0xe000ed00

08008c0c <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008c10:	4b04      	ldr	r3, [pc, #16]	; (8008c24 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	4b03      	ldr	r3, [pc, #12]	; (8008c24 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008c16:	2180      	movs	r1, #128	; 0x80
 8008c18:	00c9      	lsls	r1, r1, #3
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	601a      	str	r2, [r3, #0]
}
 8008c1e:	46c0      	nop			; (mov r8, r8)
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	40007000 	.word	0x40007000

08008c28 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8008c2c:	4b04      	ldr	r3, [pc, #16]	; (8008c40 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	4b03      	ldr	r3, [pc, #12]	; (8008c40 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008c32:	2180      	movs	r1, #128	; 0x80
 8008c34:	0089      	lsls	r1, r1, #2
 8008c36:	430a      	orrs	r2, r1
 8008c38:	601a      	str	r2, [r3, #0]
}
 8008c3a:	46c0      	nop			; (mov r8, r8)
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	40007000 	.word	0x40007000

08008c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c44:	b5b0      	push	{r4, r5, r7, lr}
 8008c46:	b08a      	sub	sp, #40	; 0x28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d102      	bne.n	8008c58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f000 fbbf 	bl	80093d6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c58:	4bc9      	ldr	r3, [pc, #804]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	220c      	movs	r2, #12
 8008c5e:	4013      	ands	r3, r2
 8008c60:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c62:	4bc7      	ldr	r3, [pc, #796]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	2380      	movs	r3, #128	; 0x80
 8008c68:	025b      	lsls	r3, r3, #9
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2201      	movs	r2, #1
 8008c74:	4013      	ands	r3, r2
 8008c76:	d100      	bne.n	8008c7a <HAL_RCC_OscConfig+0x36>
 8008c78:	e07e      	b.n	8008d78 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	2b08      	cmp	r3, #8
 8008c7e:	d007      	beq.n	8008c90 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	2b0c      	cmp	r3, #12
 8008c84:	d112      	bne.n	8008cac <HAL_RCC_OscConfig+0x68>
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	2380      	movs	r3, #128	; 0x80
 8008c8a:	025b      	lsls	r3, r3, #9
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d10d      	bne.n	8008cac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c90:	4bbb      	ldr	r3, [pc, #748]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	2380      	movs	r3, #128	; 0x80
 8008c96:	029b      	lsls	r3, r3, #10
 8008c98:	4013      	ands	r3, r2
 8008c9a:	d100      	bne.n	8008c9e <HAL_RCC_OscConfig+0x5a>
 8008c9c:	e06b      	b.n	8008d76 <HAL_RCC_OscConfig+0x132>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d167      	bne.n	8008d76 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f000 fb95 	bl	80093d6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	2380      	movs	r3, #128	; 0x80
 8008cb2:	025b      	lsls	r3, r3, #9
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d107      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x84>
 8008cb8:	4bb1      	ldr	r3, [pc, #708]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	4bb0      	ldr	r3, [pc, #704]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008cbe:	2180      	movs	r1, #128	; 0x80
 8008cc0:	0249      	lsls	r1, r1, #9
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	e027      	b.n	8008d18 <HAL_RCC_OscConfig+0xd4>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	23a0      	movs	r3, #160	; 0xa0
 8008cce:	02db      	lsls	r3, r3, #11
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d10e      	bne.n	8008cf2 <HAL_RCC_OscConfig+0xae>
 8008cd4:	4baa      	ldr	r3, [pc, #680]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	4ba9      	ldr	r3, [pc, #676]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008cda:	2180      	movs	r1, #128	; 0x80
 8008cdc:	02c9      	lsls	r1, r1, #11
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	4ba7      	ldr	r3, [pc, #668]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	4ba6      	ldr	r3, [pc, #664]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008ce8:	2180      	movs	r1, #128	; 0x80
 8008cea:	0249      	lsls	r1, r1, #9
 8008cec:	430a      	orrs	r2, r1
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	e012      	b.n	8008d18 <HAL_RCC_OscConfig+0xd4>
 8008cf2:	4ba3      	ldr	r3, [pc, #652]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	4ba2      	ldr	r3, [pc, #648]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008cf8:	49a2      	ldr	r1, [pc, #648]	; (8008f84 <HAL_RCC_OscConfig+0x340>)
 8008cfa:	400a      	ands	r2, r1
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	4ba0      	ldr	r3, [pc, #640]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	2380      	movs	r3, #128	; 0x80
 8008d04:	025b      	lsls	r3, r3, #9
 8008d06:	4013      	ands	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4b9c      	ldr	r3, [pc, #624]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	4b9b      	ldr	r3, [pc, #620]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008d12:	499d      	ldr	r1, [pc, #628]	; (8008f88 <HAL_RCC_OscConfig+0x344>)
 8008d14:	400a      	ands	r2, r1
 8008d16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d015      	beq.n	8008d4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d20:	f7fc fa67 	bl	80051f2 <HAL_GetTick>
 8008d24:	0003      	movs	r3, r0
 8008d26:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d28:	e009      	b.n	8008d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d2a:	f7fc fa62 	bl	80051f2 <HAL_GetTick>
 8008d2e:	0002      	movs	r2, r0
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	2b64      	cmp	r3, #100	; 0x64
 8008d36:	d902      	bls.n	8008d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	f000 fb4c 	bl	80093d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d3e:	4b90      	ldr	r3, [pc, #576]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	2380      	movs	r3, #128	; 0x80
 8008d44:	029b      	lsls	r3, r3, #10
 8008d46:	4013      	ands	r3, r2
 8008d48:	d0ef      	beq.n	8008d2a <HAL_RCC_OscConfig+0xe6>
 8008d4a:	e015      	b.n	8008d78 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d4c:	f7fc fa51 	bl	80051f2 <HAL_GetTick>
 8008d50:	0003      	movs	r3, r0
 8008d52:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d54:	e008      	b.n	8008d68 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d56:	f7fc fa4c 	bl	80051f2 <HAL_GetTick>
 8008d5a:	0002      	movs	r2, r0
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b64      	cmp	r3, #100	; 0x64
 8008d62:	d901      	bls.n	8008d68 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e336      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d68:	4b85      	ldr	r3, [pc, #532]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	2380      	movs	r3, #128	; 0x80
 8008d6e:	029b      	lsls	r3, r3, #10
 8008d70:	4013      	ands	r3, r2
 8008d72:	d1f0      	bne.n	8008d56 <HAL_RCC_OscConfig+0x112>
 8008d74:	e000      	b.n	8008d78 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d76:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	4013      	ands	r3, r2
 8008d80:	d100      	bne.n	8008d84 <HAL_RCC_OscConfig+0x140>
 8008d82:	e099      	b.n	8008eb8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	4013      	ands	r3, r2
 8008d90:	d009      	beq.n	8008da6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8008d92:	4b7b      	ldr	r3, [pc, #492]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	4b7a      	ldr	r3, [pc, #488]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008d98:	2120      	movs	r1, #32
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	2220      	movs	r2, #32
 8008da2:	4393      	bics	r3, r2
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d005      	beq.n	8008db8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	2b0c      	cmp	r3, #12
 8008db0:	d13e      	bne.n	8008e30 <HAL_RCC_OscConfig+0x1ec>
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d13b      	bne.n	8008e30 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008db8:	4b71      	ldr	r3, [pc, #452]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2204      	movs	r2, #4
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	d004      	beq.n	8008dcc <HAL_RCC_OscConfig+0x188>
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e304      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dcc:	4b6c      	ldr	r3, [pc, #432]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4a6e      	ldr	r2, [pc, #440]	; (8008f8c <HAL_RCC_OscConfig+0x348>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	0019      	movs	r1, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	021a      	lsls	r2, r3, #8
 8008ddc:	4b68      	ldr	r3, [pc, #416]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008dde:	430a      	orrs	r2, r1
 8008de0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008de2:	4b67      	ldr	r3, [pc, #412]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2209      	movs	r2, #9
 8008de8:	4393      	bics	r3, r2
 8008dea:	0019      	movs	r1, r3
 8008dec:	4b64      	ldr	r3, [pc, #400]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df0:	430a      	orrs	r2, r1
 8008df2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008df4:	f000 fc42 	bl	800967c <HAL_RCC_GetSysClockFreq>
 8008df8:	0001      	movs	r1, r0
 8008dfa:	4b61      	ldr	r3, [pc, #388]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	091b      	lsrs	r3, r3, #4
 8008e00:	220f      	movs	r2, #15
 8008e02:	4013      	ands	r3, r2
 8008e04:	4a62      	ldr	r2, [pc, #392]	; (8008f90 <HAL_RCC_OscConfig+0x34c>)
 8008e06:	5cd3      	ldrb	r3, [r2, r3]
 8008e08:	000a      	movs	r2, r1
 8008e0a:	40da      	lsrs	r2, r3
 8008e0c:	4b61      	ldr	r3, [pc, #388]	; (8008f94 <HAL_RCC_OscConfig+0x350>)
 8008e0e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008e10:	4b61      	ldr	r3, [pc, #388]	; (8008f98 <HAL_RCC_OscConfig+0x354>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2513      	movs	r5, #19
 8008e16:	197c      	adds	r4, r7, r5
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f7fc f9e1 	bl	80051e0 <HAL_InitTick>
 8008e1e:	0003      	movs	r3, r0
 8008e20:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008e22:	197b      	adds	r3, r7, r5
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d046      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8008e2a:	197b      	adds	r3, r7, r5
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	e2d2      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d027      	beq.n	8008e86 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008e36:	4b52      	ldr	r3, [pc, #328]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2209      	movs	r2, #9
 8008e3c:	4393      	bics	r3, r2
 8008e3e:	0019      	movs	r1, r3
 8008e40:	4b4f      	ldr	r3, [pc, #316]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e44:	430a      	orrs	r2, r1
 8008e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e48:	f7fc f9d3 	bl	80051f2 <HAL_GetTick>
 8008e4c:	0003      	movs	r3, r0
 8008e4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e50:	e008      	b.n	8008e64 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e52:	f7fc f9ce 	bl	80051f2 <HAL_GetTick>
 8008e56:	0002      	movs	r2, r0
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d901      	bls.n	8008e64 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e2b8      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e64:	4b46      	ldr	r3, [pc, #280]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2204      	movs	r2, #4
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	d0f1      	beq.n	8008e52 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e6e:	4b44      	ldr	r3, [pc, #272]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	4a46      	ldr	r2, [pc, #280]	; (8008f8c <HAL_RCC_OscConfig+0x348>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	0019      	movs	r1, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	021a      	lsls	r2, r3, #8
 8008e7e:	4b40      	ldr	r3, [pc, #256]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008e80:	430a      	orrs	r2, r1
 8008e82:	605a      	str	r2, [r3, #4]
 8008e84:	e018      	b.n	8008eb8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e86:	4b3e      	ldr	r3, [pc, #248]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	4b3d      	ldr	r3, [pc, #244]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	438a      	bics	r2, r1
 8008e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e92:	f7fc f9ae 	bl	80051f2 <HAL_GetTick>
 8008e96:	0003      	movs	r3, r0
 8008e98:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e9a:	e008      	b.n	8008eae <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e9c:	f7fc f9a9 	bl	80051f2 <HAL_GetTick>
 8008ea0:	0002      	movs	r2, r0
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d901      	bls.n	8008eae <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e293      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008eae:	4b34      	ldr	r3, [pc, #208]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2204      	movs	r2, #4
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	d1f1      	bne.n	8008e9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2210      	movs	r2, #16
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	d100      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x280>
 8008ec2:	e0a2      	b.n	800900a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d140      	bne.n	8008f4c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008eca:	4b2d      	ldr	r3, [pc, #180]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	2380      	movs	r3, #128	; 0x80
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	d005      	beq.n	8008ee2 <HAL_RCC_OscConfig+0x29e>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e279      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ee2:	4b27      	ldr	r3, [pc, #156]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	4a2d      	ldr	r2, [pc, #180]	; (8008f9c <HAL_RCC_OscConfig+0x358>)
 8008ee8:	4013      	ands	r3, r2
 8008eea:	0019      	movs	r1, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ef0:	4b23      	ldr	r3, [pc, #140]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ef6:	4b22      	ldr	r3, [pc, #136]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	021b      	lsls	r3, r3, #8
 8008efc:	0a19      	lsrs	r1, r3, #8
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	061a      	lsls	r2, r3, #24
 8008f04:	4b1e      	ldr	r3, [pc, #120]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008f06:	430a      	orrs	r2, r1
 8008f08:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	0b5b      	lsrs	r3, r3, #13
 8008f10:	3301      	adds	r3, #1
 8008f12:	2280      	movs	r2, #128	; 0x80
 8008f14:	0212      	lsls	r2, r2, #8
 8008f16:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008f18:	4b19      	ldr	r3, [pc, #100]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	091b      	lsrs	r3, r3, #4
 8008f1e:	210f      	movs	r1, #15
 8008f20:	400b      	ands	r3, r1
 8008f22:	491b      	ldr	r1, [pc, #108]	; (8008f90 <HAL_RCC_OscConfig+0x34c>)
 8008f24:	5ccb      	ldrb	r3, [r1, r3]
 8008f26:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008f28:	4b1a      	ldr	r3, [pc, #104]	; (8008f94 <HAL_RCC_OscConfig+0x350>)
 8008f2a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8008f2c:	4b1a      	ldr	r3, [pc, #104]	; (8008f98 <HAL_RCC_OscConfig+0x354>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2513      	movs	r5, #19
 8008f32:	197c      	adds	r4, r7, r5
 8008f34:	0018      	movs	r0, r3
 8008f36:	f7fc f953 	bl	80051e0 <HAL_InitTick>
 8008f3a:	0003      	movs	r3, r0
 8008f3c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008f3e:	197b      	adds	r3, r7, r5
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d061      	beq.n	800900a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8008f46:	197b      	adds	r3, r7, r5
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	e244      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d040      	beq.n	8008fd6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008f54:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <HAL_RCC_OscConfig+0x33c>)
 8008f5a:	2180      	movs	r1, #128	; 0x80
 8008f5c:	0049      	lsls	r1, r1, #1
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f62:	f7fc f946 	bl	80051f2 <HAL_GetTick>
 8008f66:	0003      	movs	r3, r0
 8008f68:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008f6a:	e019      	b.n	8008fa0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008f6c:	f7fc f941 	bl	80051f2 <HAL_GetTick>
 8008f70:	0002      	movs	r2, r0
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d912      	bls.n	8008fa0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e22b      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
 8008f7e:	46c0      	nop			; (mov r8, r8)
 8008f80:	40021000 	.word	0x40021000
 8008f84:	fffeffff 	.word	0xfffeffff
 8008f88:	fffbffff 	.word	0xfffbffff
 8008f8c:	ffffe0ff 	.word	0xffffe0ff
 8008f90:	0801f1dc 	.word	0x0801f1dc
 8008f94:	20000070 	.word	0x20000070
 8008f98:	20000074 	.word	0x20000074
 8008f9c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008fa0:	4bca      	ldr	r3, [pc, #808]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	2380      	movs	r3, #128	; 0x80
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4013      	ands	r3, r2
 8008faa:	d0df      	beq.n	8008f6c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fac:	4bc7      	ldr	r3, [pc, #796]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4ac7      	ldr	r2, [pc, #796]	; (80092d0 <HAL_RCC_OscConfig+0x68c>)
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	0019      	movs	r1, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fba:	4bc4      	ldr	r3, [pc, #784]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008fc0:	4bc2      	ldr	r3, [pc, #776]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	021b      	lsls	r3, r3, #8
 8008fc6:	0a19      	lsrs	r1, r3, #8
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	061a      	lsls	r2, r3, #24
 8008fce:	4bbf      	ldr	r3, [pc, #764]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	605a      	str	r2, [r3, #4]
 8008fd4:	e019      	b.n	800900a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008fd6:	4bbd      	ldr	r3, [pc, #756]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	4bbc      	ldr	r3, [pc, #752]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8008fdc:	49bd      	ldr	r1, [pc, #756]	; (80092d4 <HAL_RCC_OscConfig+0x690>)
 8008fde:	400a      	ands	r2, r1
 8008fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fe2:	f7fc f906 	bl	80051f2 <HAL_GetTick>
 8008fe6:	0003      	movs	r3, r0
 8008fe8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008fea:	e008      	b.n	8008ffe <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008fec:	f7fc f901 	bl	80051f2 <HAL_GetTick>
 8008ff0:	0002      	movs	r2, r0
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d901      	bls.n	8008ffe <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	e1eb      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008ffe:	4bb3      	ldr	r3, [pc, #716]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	2380      	movs	r3, #128	; 0x80
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4013      	ands	r3, r2
 8009008:	d1f0      	bne.n	8008fec <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2208      	movs	r2, #8
 8009010:	4013      	ands	r3, r2
 8009012:	d036      	beq.n	8009082 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	695b      	ldr	r3, [r3, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d019      	beq.n	8009050 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800901c:	4bab      	ldr	r3, [pc, #684]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 800901e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009020:	4baa      	ldr	r3, [pc, #680]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009022:	2101      	movs	r1, #1
 8009024:	430a      	orrs	r2, r1
 8009026:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009028:	f7fc f8e3 	bl	80051f2 <HAL_GetTick>
 800902c:	0003      	movs	r3, r0
 800902e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009030:	e008      	b.n	8009044 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009032:	f7fc f8de 	bl	80051f2 <HAL_GetTick>
 8009036:	0002      	movs	r2, r0
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d901      	bls.n	8009044 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e1c8      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009044:	4ba1      	ldr	r3, [pc, #644]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009048:	2202      	movs	r2, #2
 800904a:	4013      	ands	r3, r2
 800904c:	d0f1      	beq.n	8009032 <HAL_RCC_OscConfig+0x3ee>
 800904e:	e018      	b.n	8009082 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009050:	4b9e      	ldr	r3, [pc, #632]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009054:	4b9d      	ldr	r3, [pc, #628]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009056:	2101      	movs	r1, #1
 8009058:	438a      	bics	r2, r1
 800905a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800905c:	f7fc f8c9 	bl	80051f2 <HAL_GetTick>
 8009060:	0003      	movs	r3, r0
 8009062:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009064:	e008      	b.n	8009078 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009066:	f7fc f8c4 	bl	80051f2 <HAL_GetTick>
 800906a:	0002      	movs	r2, r0
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e1ae      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009078:	4b94      	ldr	r3, [pc, #592]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 800907a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800907c:	2202      	movs	r2, #2
 800907e:	4013      	ands	r3, r2
 8009080:	d1f1      	bne.n	8009066 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2204      	movs	r2, #4
 8009088:	4013      	ands	r3, r2
 800908a:	d100      	bne.n	800908e <HAL_RCC_OscConfig+0x44a>
 800908c:	e0ae      	b.n	80091ec <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800908e:	2023      	movs	r0, #35	; 0x23
 8009090:	183b      	adds	r3, r7, r0
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009096:	4b8d      	ldr	r3, [pc, #564]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800909a:	2380      	movs	r3, #128	; 0x80
 800909c:	055b      	lsls	r3, r3, #21
 800909e:	4013      	ands	r3, r2
 80090a0:	d109      	bne.n	80090b6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090a2:	4b8a      	ldr	r3, [pc, #552]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 80090a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090a6:	4b89      	ldr	r3, [pc, #548]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 80090a8:	2180      	movs	r1, #128	; 0x80
 80090aa:	0549      	lsls	r1, r1, #21
 80090ac:	430a      	orrs	r2, r1
 80090ae:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80090b0:	183b      	adds	r3, r7, r0
 80090b2:	2201      	movs	r2, #1
 80090b4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090b6:	4b88      	ldr	r3, [pc, #544]	; (80092d8 <HAL_RCC_OscConfig+0x694>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	2380      	movs	r3, #128	; 0x80
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	4013      	ands	r3, r2
 80090c0:	d11a      	bne.n	80090f8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090c2:	4b85      	ldr	r3, [pc, #532]	; (80092d8 <HAL_RCC_OscConfig+0x694>)
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	4b84      	ldr	r3, [pc, #528]	; (80092d8 <HAL_RCC_OscConfig+0x694>)
 80090c8:	2180      	movs	r1, #128	; 0x80
 80090ca:	0049      	lsls	r1, r1, #1
 80090cc:	430a      	orrs	r2, r1
 80090ce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090d0:	f7fc f88f 	bl	80051f2 <HAL_GetTick>
 80090d4:	0003      	movs	r3, r0
 80090d6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090d8:	e008      	b.n	80090ec <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090da:	f7fc f88a 	bl	80051f2 <HAL_GetTick>
 80090de:	0002      	movs	r2, r0
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b64      	cmp	r3, #100	; 0x64
 80090e6:	d901      	bls.n	80090ec <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e174      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090ec:	4b7a      	ldr	r3, [pc, #488]	; (80092d8 <HAL_RCC_OscConfig+0x694>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	2380      	movs	r3, #128	; 0x80
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	4013      	ands	r3, r2
 80090f6:	d0f0      	beq.n	80090da <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	2380      	movs	r3, #128	; 0x80
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	429a      	cmp	r2, r3
 8009102:	d107      	bne.n	8009114 <HAL_RCC_OscConfig+0x4d0>
 8009104:	4b71      	ldr	r3, [pc, #452]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009106:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009108:	4b70      	ldr	r3, [pc, #448]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 800910a:	2180      	movs	r1, #128	; 0x80
 800910c:	0049      	lsls	r1, r1, #1
 800910e:	430a      	orrs	r2, r1
 8009110:	651a      	str	r2, [r3, #80]	; 0x50
 8009112:	e031      	b.n	8009178 <HAL_RCC_OscConfig+0x534>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10c      	bne.n	8009136 <HAL_RCC_OscConfig+0x4f2>
 800911c:	4b6b      	ldr	r3, [pc, #428]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 800911e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009120:	4b6a      	ldr	r3, [pc, #424]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009122:	496c      	ldr	r1, [pc, #432]	; (80092d4 <HAL_RCC_OscConfig+0x690>)
 8009124:	400a      	ands	r2, r1
 8009126:	651a      	str	r2, [r3, #80]	; 0x50
 8009128:	4b68      	ldr	r3, [pc, #416]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 800912a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800912c:	4b67      	ldr	r3, [pc, #412]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 800912e:	496b      	ldr	r1, [pc, #428]	; (80092dc <HAL_RCC_OscConfig+0x698>)
 8009130:	400a      	ands	r2, r1
 8009132:	651a      	str	r2, [r3, #80]	; 0x50
 8009134:	e020      	b.n	8009178 <HAL_RCC_OscConfig+0x534>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689a      	ldr	r2, [r3, #8]
 800913a:	23a0      	movs	r3, #160	; 0xa0
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	429a      	cmp	r2, r3
 8009140:	d10e      	bne.n	8009160 <HAL_RCC_OscConfig+0x51c>
 8009142:	4b62      	ldr	r3, [pc, #392]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009146:	4b61      	ldr	r3, [pc, #388]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009148:	2180      	movs	r1, #128	; 0x80
 800914a:	00c9      	lsls	r1, r1, #3
 800914c:	430a      	orrs	r2, r1
 800914e:	651a      	str	r2, [r3, #80]	; 0x50
 8009150:	4b5e      	ldr	r3, [pc, #376]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009154:	4b5d      	ldr	r3, [pc, #372]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009156:	2180      	movs	r1, #128	; 0x80
 8009158:	0049      	lsls	r1, r1, #1
 800915a:	430a      	orrs	r2, r1
 800915c:	651a      	str	r2, [r3, #80]	; 0x50
 800915e:	e00b      	b.n	8009178 <HAL_RCC_OscConfig+0x534>
 8009160:	4b5a      	ldr	r3, [pc, #360]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009164:	4b59      	ldr	r3, [pc, #356]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009166:	495b      	ldr	r1, [pc, #364]	; (80092d4 <HAL_RCC_OscConfig+0x690>)
 8009168:	400a      	ands	r2, r1
 800916a:	651a      	str	r2, [r3, #80]	; 0x50
 800916c:	4b57      	ldr	r3, [pc, #348]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 800916e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009170:	4b56      	ldr	r3, [pc, #344]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009172:	495a      	ldr	r1, [pc, #360]	; (80092dc <HAL_RCC_OscConfig+0x698>)
 8009174:	400a      	ands	r2, r1
 8009176:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d015      	beq.n	80091ac <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009180:	f7fc f837 	bl	80051f2 <HAL_GetTick>
 8009184:	0003      	movs	r3, r0
 8009186:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009188:	e009      	b.n	800919e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800918a:	f7fc f832 	bl	80051f2 <HAL_GetTick>
 800918e:	0002      	movs	r2, r0
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	4a52      	ldr	r2, [pc, #328]	; (80092e0 <HAL_RCC_OscConfig+0x69c>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e11b      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800919e:	4b4b      	ldr	r3, [pc, #300]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 80091a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091a2:	2380      	movs	r3, #128	; 0x80
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4013      	ands	r3, r2
 80091a8:	d0ef      	beq.n	800918a <HAL_RCC_OscConfig+0x546>
 80091aa:	e014      	b.n	80091d6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091ac:	f7fc f821 	bl	80051f2 <HAL_GetTick>
 80091b0:	0003      	movs	r3, r0
 80091b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091b4:	e009      	b.n	80091ca <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091b6:	f7fc f81c 	bl	80051f2 <HAL_GetTick>
 80091ba:	0002      	movs	r2, r0
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	4a47      	ldr	r2, [pc, #284]	; (80092e0 <HAL_RCC_OscConfig+0x69c>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e105      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091ca:	4b40      	ldr	r3, [pc, #256]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 80091cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091ce:	2380      	movs	r3, #128	; 0x80
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4013      	ands	r3, r2
 80091d4:	d1ef      	bne.n	80091b6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80091d6:	2323      	movs	r3, #35	; 0x23
 80091d8:	18fb      	adds	r3, r7, r3
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d105      	bne.n	80091ec <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091e0:	4b3a      	ldr	r3, [pc, #232]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 80091e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091e4:	4b39      	ldr	r3, [pc, #228]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 80091e6:	493f      	ldr	r1, [pc, #252]	; (80092e4 <HAL_RCC_OscConfig+0x6a0>)
 80091e8:	400a      	ands	r2, r1
 80091ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2220      	movs	r2, #32
 80091f2:	4013      	ands	r3, r2
 80091f4:	d049      	beq.n	800928a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d026      	beq.n	800924c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80091fe:	4b33      	ldr	r3, [pc, #204]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	4b32      	ldr	r3, [pc, #200]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009204:	2101      	movs	r1, #1
 8009206:	430a      	orrs	r2, r1
 8009208:	609a      	str	r2, [r3, #8]
 800920a:	4b30      	ldr	r3, [pc, #192]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 800920c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800920e:	4b2f      	ldr	r3, [pc, #188]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009210:	2101      	movs	r1, #1
 8009212:	430a      	orrs	r2, r1
 8009214:	635a      	str	r2, [r3, #52]	; 0x34
 8009216:	4b34      	ldr	r3, [pc, #208]	; (80092e8 <HAL_RCC_OscConfig+0x6a4>)
 8009218:	6a1a      	ldr	r2, [r3, #32]
 800921a:	4b33      	ldr	r3, [pc, #204]	; (80092e8 <HAL_RCC_OscConfig+0x6a4>)
 800921c:	2180      	movs	r1, #128	; 0x80
 800921e:	0189      	lsls	r1, r1, #6
 8009220:	430a      	orrs	r2, r1
 8009222:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009224:	f7fb ffe5 	bl	80051f2 <HAL_GetTick>
 8009228:	0003      	movs	r3, r0
 800922a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800922c:	e008      	b.n	8009240 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800922e:	f7fb ffe0 	bl	80051f2 <HAL_GetTick>
 8009232:	0002      	movs	r2, r0
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e0ca      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009240:	4b22      	ldr	r3, [pc, #136]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	2202      	movs	r2, #2
 8009246:	4013      	ands	r3, r2
 8009248:	d0f1      	beq.n	800922e <HAL_RCC_OscConfig+0x5ea>
 800924a:	e01e      	b.n	800928a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800924c:	4b1f      	ldr	r3, [pc, #124]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	4b1e      	ldr	r3, [pc, #120]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009252:	2101      	movs	r1, #1
 8009254:	438a      	bics	r2, r1
 8009256:	609a      	str	r2, [r3, #8]
 8009258:	4b23      	ldr	r3, [pc, #140]	; (80092e8 <HAL_RCC_OscConfig+0x6a4>)
 800925a:	6a1a      	ldr	r2, [r3, #32]
 800925c:	4b22      	ldr	r3, [pc, #136]	; (80092e8 <HAL_RCC_OscConfig+0x6a4>)
 800925e:	4923      	ldr	r1, [pc, #140]	; (80092ec <HAL_RCC_OscConfig+0x6a8>)
 8009260:	400a      	ands	r2, r1
 8009262:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009264:	f7fb ffc5 	bl	80051f2 <HAL_GetTick>
 8009268:	0003      	movs	r3, r0
 800926a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800926c:	e008      	b.n	8009280 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800926e:	f7fb ffc0 	bl	80051f2 <HAL_GetTick>
 8009272:	0002      	movs	r2, r0
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d901      	bls.n	8009280 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e0aa      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009280:	4b12      	ldr	r3, [pc, #72]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	2202      	movs	r2, #2
 8009286:	4013      	ands	r3, r2
 8009288:	d1f1      	bne.n	800926e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928e:	2b00      	cmp	r3, #0
 8009290:	d100      	bne.n	8009294 <HAL_RCC_OscConfig+0x650>
 8009292:	e09f      	b.n	80093d4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	2b0c      	cmp	r3, #12
 8009298:	d100      	bne.n	800929c <HAL_RCC_OscConfig+0x658>
 800929a:	e078      	b.n	800938e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d159      	bne.n	8009358 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092a4:	4b09      	ldr	r3, [pc, #36]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	4b08      	ldr	r3, [pc, #32]	; (80092cc <HAL_RCC_OscConfig+0x688>)
 80092aa:	4911      	ldr	r1, [pc, #68]	; (80092f0 <HAL_RCC_OscConfig+0x6ac>)
 80092ac:	400a      	ands	r2, r1
 80092ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092b0:	f7fb ff9f 	bl	80051f2 <HAL_GetTick>
 80092b4:	0003      	movs	r3, r0
 80092b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80092b8:	e01c      	b.n	80092f4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092ba:	f7fb ff9a 	bl	80051f2 <HAL_GetTick>
 80092be:	0002      	movs	r2, r0
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d915      	bls.n	80092f4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e084      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
 80092cc:	40021000 	.word	0x40021000
 80092d0:	ffff1fff 	.word	0xffff1fff
 80092d4:	fffffeff 	.word	0xfffffeff
 80092d8:	40007000 	.word	0x40007000
 80092dc:	fffffbff 	.word	0xfffffbff
 80092e0:	00001388 	.word	0x00001388
 80092e4:	efffffff 	.word	0xefffffff
 80092e8:	40010000 	.word	0x40010000
 80092ec:	ffffdfff 	.word	0xffffdfff
 80092f0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80092f4:	4b3a      	ldr	r3, [pc, #232]	; (80093e0 <HAL_RCC_OscConfig+0x79c>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	2380      	movs	r3, #128	; 0x80
 80092fa:	049b      	lsls	r3, r3, #18
 80092fc:	4013      	ands	r3, r2
 80092fe:	d1dc      	bne.n	80092ba <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009300:	4b37      	ldr	r3, [pc, #220]	; (80093e0 <HAL_RCC_OscConfig+0x79c>)
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	4a37      	ldr	r2, [pc, #220]	; (80093e4 <HAL_RCC_OscConfig+0x7a0>)
 8009306:	4013      	ands	r3, r2
 8009308:	0019      	movs	r1, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009318:	431a      	orrs	r2, r3
 800931a:	4b31      	ldr	r3, [pc, #196]	; (80093e0 <HAL_RCC_OscConfig+0x79c>)
 800931c:	430a      	orrs	r2, r1
 800931e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009320:	4b2f      	ldr	r3, [pc, #188]	; (80093e0 <HAL_RCC_OscConfig+0x79c>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	4b2e      	ldr	r3, [pc, #184]	; (80093e0 <HAL_RCC_OscConfig+0x79c>)
 8009326:	2180      	movs	r1, #128	; 0x80
 8009328:	0449      	lsls	r1, r1, #17
 800932a:	430a      	orrs	r2, r1
 800932c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800932e:	f7fb ff60 	bl	80051f2 <HAL_GetTick>
 8009332:	0003      	movs	r3, r0
 8009334:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009338:	f7fb ff5b 	bl	80051f2 <HAL_GetTick>
 800933c:	0002      	movs	r2, r0
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b02      	cmp	r3, #2
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e045      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800934a:	4b25      	ldr	r3, [pc, #148]	; (80093e0 <HAL_RCC_OscConfig+0x79c>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	2380      	movs	r3, #128	; 0x80
 8009350:	049b      	lsls	r3, r3, #18
 8009352:	4013      	ands	r3, r2
 8009354:	d0f0      	beq.n	8009338 <HAL_RCC_OscConfig+0x6f4>
 8009356:	e03d      	b.n	80093d4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009358:	4b21      	ldr	r3, [pc, #132]	; (80093e0 <HAL_RCC_OscConfig+0x79c>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	4b20      	ldr	r3, [pc, #128]	; (80093e0 <HAL_RCC_OscConfig+0x79c>)
 800935e:	4922      	ldr	r1, [pc, #136]	; (80093e8 <HAL_RCC_OscConfig+0x7a4>)
 8009360:	400a      	ands	r2, r1
 8009362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009364:	f7fb ff45 	bl	80051f2 <HAL_GetTick>
 8009368:	0003      	movs	r3, r0
 800936a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800936c:	e008      	b.n	8009380 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800936e:	f7fb ff40 	bl	80051f2 <HAL_GetTick>
 8009372:	0002      	movs	r2, r0
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d901      	bls.n	8009380 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e02a      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009380:	4b17      	ldr	r3, [pc, #92]	; (80093e0 <HAL_RCC_OscConfig+0x79c>)
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	2380      	movs	r3, #128	; 0x80
 8009386:	049b      	lsls	r3, r3, #18
 8009388:	4013      	ands	r3, r2
 800938a:	d1f0      	bne.n	800936e <HAL_RCC_OscConfig+0x72a>
 800938c:	e022      	b.n	80093d4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009392:	2b01      	cmp	r3, #1
 8009394:	d101      	bne.n	800939a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e01d      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800939a:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <HAL_RCC_OscConfig+0x79c>)
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	2380      	movs	r3, #128	; 0x80
 80093a4:	025b      	lsls	r3, r3, #9
 80093a6:	401a      	ands	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d10f      	bne.n	80093d0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	23f0      	movs	r3, #240	; 0xf0
 80093b4:	039b      	lsls	r3, r3, #14
 80093b6:	401a      	ands	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093bc:	429a      	cmp	r2, r3
 80093be:	d107      	bne.n	80093d0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80093c0:	69ba      	ldr	r2, [r7, #24]
 80093c2:	23c0      	movs	r3, #192	; 0xc0
 80093c4:	041b      	lsls	r3, r3, #16
 80093c6:	401a      	ands	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d001      	beq.n	80093d4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e000      	b.n	80093d6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	0018      	movs	r0, r3
 80093d8:	46bd      	mov	sp, r7
 80093da:	b00a      	add	sp, #40	; 0x28
 80093dc:	bdb0      	pop	{r4, r5, r7, pc}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	40021000 	.word	0x40021000
 80093e4:	ff02ffff 	.word	0xff02ffff
 80093e8:	feffffff 	.word	0xfeffffff

080093ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093ec:	b5b0      	push	{r4, r5, r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e128      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009400:	4b96      	ldr	r3, [pc, #600]	; (800965c <HAL_RCC_ClockConfig+0x270>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2201      	movs	r2, #1
 8009406:	4013      	ands	r3, r2
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	429a      	cmp	r2, r3
 800940c:	d91e      	bls.n	800944c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800940e:	4b93      	ldr	r3, [pc, #588]	; (800965c <HAL_RCC_ClockConfig+0x270>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2201      	movs	r2, #1
 8009414:	4393      	bics	r3, r2
 8009416:	0019      	movs	r1, r3
 8009418:	4b90      	ldr	r3, [pc, #576]	; (800965c <HAL_RCC_ClockConfig+0x270>)
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009420:	f7fb fee7 	bl	80051f2 <HAL_GetTick>
 8009424:	0003      	movs	r3, r0
 8009426:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009428:	e009      	b.n	800943e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800942a:	f7fb fee2 	bl	80051f2 <HAL_GetTick>
 800942e:	0002      	movs	r2, r0
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	4a8a      	ldr	r2, [pc, #552]	; (8009660 <HAL_RCC_ClockConfig+0x274>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d901      	bls.n	800943e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e109      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800943e:	4b87      	ldr	r3, [pc, #540]	; (800965c <HAL_RCC_ClockConfig+0x270>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2201      	movs	r2, #1
 8009444:	4013      	ands	r3, r2
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	429a      	cmp	r2, r3
 800944a:	d1ee      	bne.n	800942a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2202      	movs	r2, #2
 8009452:	4013      	ands	r3, r2
 8009454:	d009      	beq.n	800946a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009456:	4b83      	ldr	r3, [pc, #524]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	22f0      	movs	r2, #240	; 0xf0
 800945c:	4393      	bics	r3, r2
 800945e:	0019      	movs	r1, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	4b7f      	ldr	r3, [pc, #508]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 8009466:	430a      	orrs	r2, r1
 8009468:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2201      	movs	r2, #1
 8009470:	4013      	ands	r3, r2
 8009472:	d100      	bne.n	8009476 <HAL_RCC_ClockConfig+0x8a>
 8009474:	e089      	b.n	800958a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d107      	bne.n	800948e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800947e:	4b79      	ldr	r3, [pc, #484]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	2380      	movs	r3, #128	; 0x80
 8009484:	029b      	lsls	r3, r3, #10
 8009486:	4013      	ands	r3, r2
 8009488:	d120      	bne.n	80094cc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e0e1      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	2b03      	cmp	r3, #3
 8009494:	d107      	bne.n	80094a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009496:	4b73      	ldr	r3, [pc, #460]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	2380      	movs	r3, #128	; 0x80
 800949c:	049b      	lsls	r3, r3, #18
 800949e:	4013      	ands	r3, r2
 80094a0:	d114      	bne.n	80094cc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e0d5      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d106      	bne.n	80094bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094ae:	4b6d      	ldr	r3, [pc, #436]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2204      	movs	r2, #4
 80094b4:	4013      	ands	r3, r2
 80094b6:	d109      	bne.n	80094cc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e0ca      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80094bc:	4b69      	ldr	r3, [pc, #420]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	2380      	movs	r3, #128	; 0x80
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4013      	ands	r3, r2
 80094c6:	d101      	bne.n	80094cc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0c2      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094cc:	4b65      	ldr	r3, [pc, #404]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	2203      	movs	r2, #3
 80094d2:	4393      	bics	r3, r2
 80094d4:	0019      	movs	r1, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	4b62      	ldr	r3, [pc, #392]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 80094dc:	430a      	orrs	r2, r1
 80094de:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80094e0:	f7fb fe87 	bl	80051f2 <HAL_GetTick>
 80094e4:	0003      	movs	r3, r0
 80094e6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d111      	bne.n	8009514 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80094f0:	e009      	b.n	8009506 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094f2:	f7fb fe7e 	bl	80051f2 <HAL_GetTick>
 80094f6:	0002      	movs	r2, r0
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	4a58      	ldr	r2, [pc, #352]	; (8009660 <HAL_RCC_ClockConfig+0x274>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d901      	bls.n	8009506 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e0a5      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009506:	4b57      	ldr	r3, [pc, #348]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	220c      	movs	r2, #12
 800950c:	4013      	ands	r3, r2
 800950e:	2b08      	cmp	r3, #8
 8009510:	d1ef      	bne.n	80094f2 <HAL_RCC_ClockConfig+0x106>
 8009512:	e03a      	b.n	800958a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2b03      	cmp	r3, #3
 800951a:	d111      	bne.n	8009540 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800951c:	e009      	b.n	8009532 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800951e:	f7fb fe68 	bl	80051f2 <HAL_GetTick>
 8009522:	0002      	movs	r2, r0
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	4a4d      	ldr	r2, [pc, #308]	; (8009660 <HAL_RCC_ClockConfig+0x274>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d901      	bls.n	8009532 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e08f      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009532:	4b4c      	ldr	r3, [pc, #304]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	220c      	movs	r2, #12
 8009538:	4013      	ands	r3, r2
 800953a:	2b0c      	cmp	r3, #12
 800953c:	d1ef      	bne.n	800951e <HAL_RCC_ClockConfig+0x132>
 800953e:	e024      	b.n	800958a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d11b      	bne.n	8009580 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009548:	e009      	b.n	800955e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800954a:	f7fb fe52 	bl	80051f2 <HAL_GetTick>
 800954e:	0002      	movs	r2, r0
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	4a42      	ldr	r2, [pc, #264]	; (8009660 <HAL_RCC_ClockConfig+0x274>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d901      	bls.n	800955e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e079      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800955e:	4b41      	ldr	r3, [pc, #260]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	220c      	movs	r2, #12
 8009564:	4013      	ands	r3, r2
 8009566:	2b04      	cmp	r3, #4
 8009568:	d1ef      	bne.n	800954a <HAL_RCC_ClockConfig+0x15e>
 800956a:	e00e      	b.n	800958a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800956c:	f7fb fe41 	bl	80051f2 <HAL_GetTick>
 8009570:	0002      	movs	r2, r0
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	4a3a      	ldr	r2, [pc, #232]	; (8009660 <HAL_RCC_ClockConfig+0x274>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d901      	bls.n	8009580 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800957c:	2303      	movs	r3, #3
 800957e:	e068      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009580:	4b38      	ldr	r3, [pc, #224]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	220c      	movs	r2, #12
 8009586:	4013      	ands	r3, r2
 8009588:	d1f0      	bne.n	800956c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800958a:	4b34      	ldr	r3, [pc, #208]	; (800965c <HAL_RCC_ClockConfig+0x270>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2201      	movs	r2, #1
 8009590:	4013      	ands	r3, r2
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d21e      	bcs.n	80095d6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009598:	4b30      	ldr	r3, [pc, #192]	; (800965c <HAL_RCC_ClockConfig+0x270>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2201      	movs	r2, #1
 800959e:	4393      	bics	r3, r2
 80095a0:	0019      	movs	r1, r3
 80095a2:	4b2e      	ldr	r3, [pc, #184]	; (800965c <HAL_RCC_ClockConfig+0x270>)
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80095aa:	f7fb fe22 	bl	80051f2 <HAL_GetTick>
 80095ae:	0003      	movs	r3, r0
 80095b0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095b2:	e009      	b.n	80095c8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095b4:	f7fb fe1d 	bl	80051f2 <HAL_GetTick>
 80095b8:	0002      	movs	r2, r0
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	4a28      	ldr	r2, [pc, #160]	; (8009660 <HAL_RCC_ClockConfig+0x274>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d901      	bls.n	80095c8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e044      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095c8:	4b24      	ldr	r3, [pc, #144]	; (800965c <HAL_RCC_ClockConfig+0x270>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2201      	movs	r2, #1
 80095ce:	4013      	ands	r3, r2
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d1ee      	bne.n	80095b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2204      	movs	r2, #4
 80095dc:	4013      	ands	r3, r2
 80095de:	d009      	beq.n	80095f4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095e0:	4b20      	ldr	r3, [pc, #128]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	4a20      	ldr	r2, [pc, #128]	; (8009668 <HAL_RCC_ClockConfig+0x27c>)
 80095e6:	4013      	ands	r3, r2
 80095e8:	0019      	movs	r1, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	4b1d      	ldr	r3, [pc, #116]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 80095f0:	430a      	orrs	r2, r1
 80095f2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2208      	movs	r2, #8
 80095fa:	4013      	ands	r3, r2
 80095fc:	d00a      	beq.n	8009614 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80095fe:	4b19      	ldr	r3, [pc, #100]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	4a1a      	ldr	r2, [pc, #104]	; (800966c <HAL_RCC_ClockConfig+0x280>)
 8009604:	4013      	ands	r3, r2
 8009606:	0019      	movs	r1, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	00da      	lsls	r2, r3, #3
 800960e:	4b15      	ldr	r3, [pc, #84]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 8009610:	430a      	orrs	r2, r1
 8009612:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009614:	f000 f832 	bl	800967c <HAL_RCC_GetSysClockFreq>
 8009618:	0001      	movs	r1, r0
 800961a:	4b12      	ldr	r3, [pc, #72]	; (8009664 <HAL_RCC_ClockConfig+0x278>)
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	091b      	lsrs	r3, r3, #4
 8009620:	220f      	movs	r2, #15
 8009622:	4013      	ands	r3, r2
 8009624:	4a12      	ldr	r2, [pc, #72]	; (8009670 <HAL_RCC_ClockConfig+0x284>)
 8009626:	5cd3      	ldrb	r3, [r2, r3]
 8009628:	000a      	movs	r2, r1
 800962a:	40da      	lsrs	r2, r3
 800962c:	4b11      	ldr	r3, [pc, #68]	; (8009674 <HAL_RCC_ClockConfig+0x288>)
 800962e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009630:	4b11      	ldr	r3, [pc, #68]	; (8009678 <HAL_RCC_ClockConfig+0x28c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	250b      	movs	r5, #11
 8009636:	197c      	adds	r4, r7, r5
 8009638:	0018      	movs	r0, r3
 800963a:	f7fb fdd1 	bl	80051e0 <HAL_InitTick>
 800963e:	0003      	movs	r3, r0
 8009640:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8009642:	197b      	adds	r3, r7, r5
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800964a:	197b      	adds	r3, r7, r5
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	e000      	b.n	8009652 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	0018      	movs	r0, r3
 8009654:	46bd      	mov	sp, r7
 8009656:	b004      	add	sp, #16
 8009658:	bdb0      	pop	{r4, r5, r7, pc}
 800965a:	46c0      	nop			; (mov r8, r8)
 800965c:	40022000 	.word	0x40022000
 8009660:	00001388 	.word	0x00001388
 8009664:	40021000 	.word	0x40021000
 8009668:	fffff8ff 	.word	0xfffff8ff
 800966c:	ffffc7ff 	.word	0xffffc7ff
 8009670:	0801f1dc 	.word	0x0801f1dc
 8009674:	20000070 	.word	0x20000070
 8009678:	20000074 	.word	0x20000074

0800967c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800967c:	b5b0      	push	{r4, r5, r7, lr}
 800967e:	b08e      	sub	sp, #56	; 0x38
 8009680:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8009682:	4b4c      	ldr	r3, [pc, #304]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800968a:	230c      	movs	r3, #12
 800968c:	4013      	ands	r3, r2
 800968e:	2b0c      	cmp	r3, #12
 8009690:	d014      	beq.n	80096bc <HAL_RCC_GetSysClockFreq+0x40>
 8009692:	d900      	bls.n	8009696 <HAL_RCC_GetSysClockFreq+0x1a>
 8009694:	e07b      	b.n	800978e <HAL_RCC_GetSysClockFreq+0x112>
 8009696:	2b04      	cmp	r3, #4
 8009698:	d002      	beq.n	80096a0 <HAL_RCC_GetSysClockFreq+0x24>
 800969a:	2b08      	cmp	r3, #8
 800969c:	d00b      	beq.n	80096b6 <HAL_RCC_GetSysClockFreq+0x3a>
 800969e:	e076      	b.n	800978e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80096a0:	4b44      	ldr	r3, [pc, #272]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x138>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2210      	movs	r2, #16
 80096a6:	4013      	ands	r3, r2
 80096a8:	d002      	beq.n	80096b0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80096aa:	4b43      	ldr	r3, [pc, #268]	; (80097b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80096ac:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80096ae:	e07c      	b.n	80097aa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80096b0:	4b42      	ldr	r3, [pc, #264]	; (80097bc <HAL_RCC_GetSysClockFreq+0x140>)
 80096b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80096b4:	e079      	b.n	80097aa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80096b6:	4b42      	ldr	r3, [pc, #264]	; (80097c0 <HAL_RCC_GetSysClockFreq+0x144>)
 80096b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80096ba:	e076      	b.n	80097aa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	0c9a      	lsrs	r2, r3, #18
 80096c0:	230f      	movs	r3, #15
 80096c2:	401a      	ands	r2, r3
 80096c4:	4b3f      	ldr	r3, [pc, #252]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x148>)
 80096c6:	5c9b      	ldrb	r3, [r3, r2]
 80096c8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80096ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096cc:	0d9a      	lsrs	r2, r3, #22
 80096ce:	2303      	movs	r3, #3
 80096d0:	4013      	ands	r3, r2
 80096d2:	3301      	adds	r3, #1
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096d6:	4b37      	ldr	r3, [pc, #220]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x138>)
 80096d8:	68da      	ldr	r2, [r3, #12]
 80096da:	2380      	movs	r3, #128	; 0x80
 80096dc:	025b      	lsls	r3, r3, #9
 80096de:	4013      	ands	r3, r2
 80096e0:	d01a      	beq.n	8009718 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	61bb      	str	r3, [r7, #24]
 80096e6:	2300      	movs	r3, #0
 80096e8:	61fb      	str	r3, [r7, #28]
 80096ea:	4a35      	ldr	r2, [pc, #212]	; (80097c0 <HAL_RCC_GetSysClockFreq+0x144>)
 80096ec:	2300      	movs	r3, #0
 80096ee:	69b8      	ldr	r0, [r7, #24]
 80096f0:	69f9      	ldr	r1, [r7, #28]
 80096f2:	f7f6 ff4d 	bl	8000590 <__aeabi_lmul>
 80096f6:	0002      	movs	r2, r0
 80096f8:	000b      	movs	r3, r1
 80096fa:	0010      	movs	r0, r2
 80096fc:	0019      	movs	r1, r3
 80096fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009700:	613b      	str	r3, [r7, #16]
 8009702:	2300      	movs	r3, #0
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f7f6 ff21 	bl	8000550 <__aeabi_uldivmod>
 800970e:	0002      	movs	r2, r0
 8009710:	000b      	movs	r3, r1
 8009712:	0013      	movs	r3, r2
 8009714:	637b      	str	r3, [r7, #52]	; 0x34
 8009716:	e037      	b.n	8009788 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009718:	4b26      	ldr	r3, [pc, #152]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2210      	movs	r2, #16
 800971e:	4013      	ands	r3, r2
 8009720:	d01a      	beq.n	8009758 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	60bb      	str	r3, [r7, #8]
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	4a23      	ldr	r2, [pc, #140]	; (80097b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800972c:	2300      	movs	r3, #0
 800972e:	68b8      	ldr	r0, [r7, #8]
 8009730:	68f9      	ldr	r1, [r7, #12]
 8009732:	f7f6 ff2d 	bl	8000590 <__aeabi_lmul>
 8009736:	0002      	movs	r2, r0
 8009738:	000b      	movs	r3, r1
 800973a:	0010      	movs	r0, r2
 800973c:	0019      	movs	r1, r3
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	603b      	str	r3, [r7, #0]
 8009742:	2300      	movs	r3, #0
 8009744:	607b      	str	r3, [r7, #4]
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f7f6 ff01 	bl	8000550 <__aeabi_uldivmod>
 800974e:	0002      	movs	r2, r0
 8009750:	000b      	movs	r3, r1
 8009752:	0013      	movs	r3, r2
 8009754:	637b      	str	r3, [r7, #52]	; 0x34
 8009756:	e017      	b.n	8009788 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	0018      	movs	r0, r3
 800975c:	2300      	movs	r3, #0
 800975e:	0019      	movs	r1, r3
 8009760:	4a16      	ldr	r2, [pc, #88]	; (80097bc <HAL_RCC_GetSysClockFreq+0x140>)
 8009762:	2300      	movs	r3, #0
 8009764:	f7f6 ff14 	bl	8000590 <__aeabi_lmul>
 8009768:	0002      	movs	r2, r0
 800976a:	000b      	movs	r3, r1
 800976c:	0010      	movs	r0, r2
 800976e:	0019      	movs	r1, r3
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	001c      	movs	r4, r3
 8009774:	2300      	movs	r3, #0
 8009776:	001d      	movs	r5, r3
 8009778:	0022      	movs	r2, r4
 800977a:	002b      	movs	r3, r5
 800977c:	f7f6 fee8 	bl	8000550 <__aeabi_uldivmod>
 8009780:	0002      	movs	r2, r0
 8009782:	000b      	movs	r3, r1
 8009784:	0013      	movs	r3, r2
 8009786:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8009788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800978c:	e00d      	b.n	80097aa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800978e:	4b09      	ldr	r3, [pc, #36]	; (80097b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	0b5b      	lsrs	r3, r3, #13
 8009794:	2207      	movs	r2, #7
 8009796:	4013      	ands	r3, r2
 8009798:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	3301      	adds	r3, #1
 800979e:	2280      	movs	r2, #128	; 0x80
 80097a0:	0212      	lsls	r2, r2, #8
 80097a2:	409a      	lsls	r2, r3
 80097a4:	0013      	movs	r3, r2
 80097a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80097a8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80097ac:	0018      	movs	r0, r3
 80097ae:	46bd      	mov	sp, r7
 80097b0:	b00e      	add	sp, #56	; 0x38
 80097b2:	bdb0      	pop	{r4, r5, r7, pc}
 80097b4:	40021000 	.word	0x40021000
 80097b8:	003d0900 	.word	0x003d0900
 80097bc:	00f42400 	.word	0x00f42400
 80097c0:	007a1200 	.word	0x007a1200
 80097c4:	0801f1f4 	.word	0x0801f1f4

080097c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80097ce:	681b      	ldr	r3, [r3, #0]
}
 80097d0:	0018      	movs	r0, r3
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	46c0      	nop			; (mov r8, r8)
 80097d8:	20000070 	.word	0x20000070

080097dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80097e0:	f7ff fff2 	bl	80097c8 <HAL_RCC_GetHCLKFreq>
 80097e4:	0001      	movs	r1, r0
 80097e6:	4b06      	ldr	r3, [pc, #24]	; (8009800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	0a1b      	lsrs	r3, r3, #8
 80097ec:	2207      	movs	r2, #7
 80097ee:	4013      	ands	r3, r2
 80097f0:	4a04      	ldr	r2, [pc, #16]	; (8009804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097f2:	5cd3      	ldrb	r3, [r2, r3]
 80097f4:	40d9      	lsrs	r1, r3
 80097f6:	000b      	movs	r3, r1
}
 80097f8:	0018      	movs	r0, r3
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	46c0      	nop			; (mov r8, r8)
 8009800:	40021000 	.word	0x40021000
 8009804:	0801f1ec 	.word	0x0801f1ec

08009808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800980c:	f7ff ffdc 	bl	80097c8 <HAL_RCC_GetHCLKFreq>
 8009810:	0001      	movs	r1, r0
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	0adb      	lsrs	r3, r3, #11
 8009818:	2207      	movs	r2, #7
 800981a:	4013      	ands	r3, r2
 800981c:	4a04      	ldr	r2, [pc, #16]	; (8009830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800981e:	5cd3      	ldrb	r3, [r2, r3]
 8009820:	40d9      	lsrs	r1, r3
 8009822:	000b      	movs	r3, r1
}
 8009824:	0018      	movs	r0, r3
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	46c0      	nop			; (mov r8, r8)
 800982c:	40021000 	.word	0x40021000
 8009830:	0801f1ec 	.word	0x0801f1ec

08009834 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800983c:	2017      	movs	r0, #23
 800983e:	183b      	adds	r3, r7, r0
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2220      	movs	r2, #32
 800984a:	4013      	ands	r3, r2
 800984c:	d100      	bne.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800984e:	e0c2      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009850:	4b98      	ldr	r3, [pc, #608]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009854:	2380      	movs	r3, #128	; 0x80
 8009856:	055b      	lsls	r3, r3, #21
 8009858:	4013      	ands	r3, r2
 800985a:	d109      	bne.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800985c:	4b95      	ldr	r3, [pc, #596]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800985e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009860:	4b94      	ldr	r3, [pc, #592]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009862:	2180      	movs	r1, #128	; 0x80
 8009864:	0549      	lsls	r1, r1, #21
 8009866:	430a      	orrs	r2, r1
 8009868:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800986a:	183b      	adds	r3, r7, r0
 800986c:	2201      	movs	r2, #1
 800986e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009870:	4b91      	ldr	r3, [pc, #580]	; (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	2380      	movs	r3, #128	; 0x80
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	4013      	ands	r3, r2
 800987a:	d11a      	bne.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800987c:	4b8e      	ldr	r3, [pc, #568]	; (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	4b8d      	ldr	r3, [pc, #564]	; (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009882:	2180      	movs	r1, #128	; 0x80
 8009884:	0049      	lsls	r1, r1, #1
 8009886:	430a      	orrs	r2, r1
 8009888:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800988a:	f7fb fcb2 	bl	80051f2 <HAL_GetTick>
 800988e:	0003      	movs	r3, r0
 8009890:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009892:	e008      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009894:	f7fb fcad 	bl	80051f2 <HAL_GetTick>
 8009898:	0002      	movs	r2, r0
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	2b64      	cmp	r3, #100	; 0x64
 80098a0:	d901      	bls.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e102      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098a6:	4b84      	ldr	r3, [pc, #528]	; (8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	2380      	movs	r3, #128	; 0x80
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	4013      	ands	r3, r2
 80098b0:	d0f0      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80098b2:	4b80      	ldr	r3, [pc, #512]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	23c0      	movs	r3, #192	; 0xc0
 80098b8:	039b      	lsls	r3, r3, #14
 80098ba:	4013      	ands	r3, r2
 80098bc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685a      	ldr	r2, [r3, #4]
 80098c2:	23c0      	movs	r3, #192	; 0xc0
 80098c4:	039b      	lsls	r3, r3, #14
 80098c6:	4013      	ands	r3, r2
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d013      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	23c0      	movs	r3, #192	; 0xc0
 80098d4:	029b      	lsls	r3, r3, #10
 80098d6:	401a      	ands	r2, r3
 80098d8:	23c0      	movs	r3, #192	; 0xc0
 80098da:	029b      	lsls	r3, r3, #10
 80098dc:	429a      	cmp	r2, r3
 80098de:	d10a      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098e0:	4b74      	ldr	r3, [pc, #464]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	2380      	movs	r3, #128	; 0x80
 80098e6:	029b      	lsls	r3, r3, #10
 80098e8:	401a      	ands	r2, r3
 80098ea:	2380      	movs	r3, #128	; 0x80
 80098ec:	029b      	lsls	r3, r3, #10
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d101      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e0da      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80098f6:	4b6f      	ldr	r3, [pc, #444]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098fa:	23c0      	movs	r3, #192	; 0xc0
 80098fc:	029b      	lsls	r3, r3, #10
 80098fe:	4013      	ands	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d03b      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	23c0      	movs	r3, #192	; 0xc0
 800990e:	029b      	lsls	r3, r3, #10
 8009910:	4013      	ands	r3, r2
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	429a      	cmp	r2, r3
 8009916:	d033      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2220      	movs	r2, #32
 800991e:	4013      	ands	r3, r2
 8009920:	d02e      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8009922:	4b64      	ldr	r3, [pc, #400]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009926:	4a65      	ldr	r2, [pc, #404]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009928:	4013      	ands	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800992c:	4b61      	ldr	r3, [pc, #388]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800992e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009930:	4b60      	ldr	r3, [pc, #384]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009932:	2180      	movs	r1, #128	; 0x80
 8009934:	0309      	lsls	r1, r1, #12
 8009936:	430a      	orrs	r2, r1
 8009938:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800993a:	4b5e      	ldr	r3, [pc, #376]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800993c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800993e:	4b5d      	ldr	r3, [pc, #372]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009940:	495f      	ldr	r1, [pc, #380]	; (8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8009942:	400a      	ands	r2, r1
 8009944:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009946:	4b5b      	ldr	r3, [pc, #364]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	2380      	movs	r3, #128	; 0x80
 8009950:	005b      	lsls	r3, r3, #1
 8009952:	4013      	ands	r3, r2
 8009954:	d014      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009956:	f7fb fc4c 	bl	80051f2 <HAL_GetTick>
 800995a:	0003      	movs	r3, r0
 800995c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800995e:	e009      	b.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009960:	f7fb fc47 	bl	80051f2 <HAL_GetTick>
 8009964:	0002      	movs	r2, r0
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	4a56      	ldr	r2, [pc, #344]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d901      	bls.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e09b      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009974:	4b4f      	ldr	r3, [pc, #316]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009978:	2380      	movs	r3, #128	; 0x80
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4013      	ands	r3, r2
 800997e:	d0ef      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	23c0      	movs	r3, #192	; 0xc0
 8009986:	029b      	lsls	r3, r3, #10
 8009988:	401a      	ands	r2, r3
 800998a:	23c0      	movs	r3, #192	; 0xc0
 800998c:	029b      	lsls	r3, r3, #10
 800998e:	429a      	cmp	r2, r3
 8009990:	d10c      	bne.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x178>
 8009992:	4b48      	ldr	r3, [pc, #288]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a4c      	ldr	r2, [pc, #304]	; (8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009998:	4013      	ands	r3, r2
 800999a:	0019      	movs	r1, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	23c0      	movs	r3, #192	; 0xc0
 80099a2:	039b      	lsls	r3, r3, #14
 80099a4:	401a      	ands	r2, r3
 80099a6:	4b43      	ldr	r3, [pc, #268]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099a8:	430a      	orrs	r2, r1
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	4b41      	ldr	r3, [pc, #260]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099ae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	23c0      	movs	r3, #192	; 0xc0
 80099b6:	029b      	lsls	r3, r3, #10
 80099b8:	401a      	ands	r2, r3
 80099ba:	4b3e      	ldr	r3, [pc, #248]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099bc:	430a      	orrs	r2, r1
 80099be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80099c0:	2317      	movs	r3, #23
 80099c2:	18fb      	adds	r3, r7, r3
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d105      	bne.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099ca:	4b3a      	ldr	r3, [pc, #232]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ce:	4b39      	ldr	r3, [pc, #228]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099d0:	493e      	ldr	r1, [pc, #248]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80099d2:	400a      	ands	r2, r1
 80099d4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2201      	movs	r2, #1
 80099dc:	4013      	ands	r3, r2
 80099de:	d009      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80099e0:	4b34      	ldr	r3, [pc, #208]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e4:	2203      	movs	r2, #3
 80099e6:	4393      	bics	r3, r2
 80099e8:	0019      	movs	r1, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689a      	ldr	r2, [r3, #8]
 80099ee:	4b31      	ldr	r3, [pc, #196]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099f0:	430a      	orrs	r2, r1
 80099f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2202      	movs	r2, #2
 80099fa:	4013      	ands	r3, r2
 80099fc:	d009      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80099fe:	4b2d      	ldr	r3, [pc, #180]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a02:	220c      	movs	r2, #12
 8009a04:	4393      	bics	r3, r2
 8009a06:	0019      	movs	r1, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68da      	ldr	r2, [r3, #12]
 8009a0c:	4b29      	ldr	r3, [pc, #164]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a0e:	430a      	orrs	r2, r1
 8009a10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2204      	movs	r2, #4
 8009a18:	4013      	ands	r3, r2
 8009a1a:	d009      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a1c:	4b25      	ldr	r3, [pc, #148]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a20:	4a2b      	ldr	r2, [pc, #172]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009a22:	4013      	ands	r3, r2
 8009a24:	0019      	movs	r1, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	691a      	ldr	r2, [r3, #16]
 8009a2a:	4b22      	ldr	r3, [pc, #136]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2208      	movs	r2, #8
 8009a36:	4013      	ands	r3, r2
 8009a38:	d009      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a3a:	4b1e      	ldr	r3, [pc, #120]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3e:	4a25      	ldr	r2, [pc, #148]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009a40:	4013      	ands	r3, r2
 8009a42:	0019      	movs	r1, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	695a      	ldr	r2, [r3, #20]
 8009a48:	4b1a      	ldr	r3, [pc, #104]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a4a:	430a      	orrs	r2, r1
 8009a4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	2380      	movs	r3, #128	; 0x80
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	4013      	ands	r3, r2
 8009a58:	d009      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a5a:	4b16      	ldr	r3, [pc, #88]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a5e:	4a17      	ldr	r2, [pc, #92]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009a60:	4013      	ands	r3, r2
 8009a62:	0019      	movs	r1, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699a      	ldr	r2, [r3, #24]
 8009a68:	4b12      	ldr	r3, [pc, #72]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a6a:	430a      	orrs	r2, r1
 8009a6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2240      	movs	r2, #64	; 0x40
 8009a74:	4013      	ands	r3, r2
 8009a76:	d009      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a78:	4b0e      	ldr	r3, [pc, #56]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7c:	4a16      	ldr	r2, [pc, #88]	; (8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009a7e:	4013      	ands	r3, r2
 8009a80:	0019      	movs	r1, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1a      	ldr	r2, [r3, #32]
 8009a86:	4b0b      	ldr	r3, [pc, #44]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2280      	movs	r2, #128	; 0x80
 8009a92:	4013      	ands	r3, r2
 8009a94:	d009      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009a96:	4b07      	ldr	r3, [pc, #28]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9a:	4a10      	ldr	r2, [pc, #64]	; (8009adc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	0019      	movs	r1, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	69da      	ldr	r2, [r3, #28]
 8009aa4:	4b03      	ldr	r3, [pc, #12]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	0018      	movs	r0, r3
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	b006      	add	sp, #24
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	40021000 	.word	0x40021000
 8009ab8:	40007000 	.word	0x40007000
 8009abc:	fffcffff 	.word	0xfffcffff
 8009ac0:	fff7ffff 	.word	0xfff7ffff
 8009ac4:	00001388 	.word	0x00001388
 8009ac8:	ffcfffff 	.word	0xffcfffff
 8009acc:	efffffff 	.word	0xefffffff
 8009ad0:	fffff3ff 	.word	0xfffff3ff
 8009ad4:	ffffcfff 	.word	0xffffcfff
 8009ad8:	fbffffff 	.word	0xfbffffff
 8009adc:	fff3ffff 	.word	0xfff3ffff

08009ae0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e08e      	b.n	8009c10 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2221      	movs	r2, #33	; 0x21
 8009af6:	5c9b      	ldrb	r3, [r3, r2]
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d107      	bne.n	8009b0e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2220      	movs	r2, #32
 8009b02:	2100      	movs	r1, #0
 8009b04:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	0018      	movs	r0, r3
 8009b0a:	f7fa f9d5 	bl	8003eb8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2221      	movs	r2, #33	; 0x21
 8009b12:	2102      	movs	r1, #2
 8009b14:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	22ca      	movs	r2, #202	; 0xca
 8009b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2253      	movs	r2, #83	; 0x53
 8009b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	0018      	movs	r0, r3
 8009b2a:	f000 fcf4 	bl	800a516 <RTC_EnterInitMode>
 8009b2e:	1e03      	subs	r3, r0, #0
 8009b30:	d009      	beq.n	8009b46 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	22ff      	movs	r2, #255	; 0xff
 8009b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2221      	movs	r2, #33	; 0x21
 8009b3e:	2104      	movs	r1, #4
 8009b40:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e064      	b.n	8009c10 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4931      	ldr	r1, [pc, #196]	; (8009c18 <HAL_RTC_Init+0x138>)
 8009b52:	400a      	ands	r2, r1
 8009b54:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6899      	ldr	r1, [r3, #8]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	431a      	orrs	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	68d2      	ldr	r2, [r2, #12]
 8009b7c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6919      	ldr	r1, [r3, #16]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	041a      	lsls	r2, r3, #16
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2180      	movs	r1, #128	; 0x80
 8009b9e:	438a      	bics	r2, r1
 8009ba0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2103      	movs	r1, #3
 8009bae:	438a      	bics	r2, r1
 8009bb0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	69da      	ldr	r2, [r3, #28]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	2220      	movs	r2, #32
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	d113      	bne.n	8009bfe <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	0018      	movs	r0, r3
 8009bda:	f000 fc75 	bl	800a4c8 <HAL_RTC_WaitForSynchro>
 8009bde:	1e03      	subs	r3, r0, #0
 8009be0:	d00d      	beq.n	8009bfe <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	22ff      	movs	r2, #255	; 0xff
 8009be8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2221      	movs	r2, #33	; 0x21
 8009bee:	2104      	movs	r1, #4
 8009bf0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e008      	b.n	8009c10 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	22ff      	movs	r2, #255	; 0xff
 8009c04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2221      	movs	r2, #33	; 0x21
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
  }
}
 8009c10:	0018      	movs	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	b002      	add	sp, #8
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	ff8fffbf 	.word	0xff8fffbf

08009c1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c1c:	b590      	push	{r4, r7, lr}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	5c9b      	ldrb	r3, [r3, r2]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_RTC_SetTime+0x1a>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e0ad      	b.n	8009d92 <HAL_RTC_SetTime+0x176>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2220      	movs	r2, #32
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2221      	movs	r2, #33	; 0x21
 8009c42:	2102      	movs	r1, #2
 8009c44:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d125      	bne.n	8009c98 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	2240      	movs	r2, #64	; 0x40
 8009c54:	4013      	ands	r3, r2
 8009c56:	d102      	bne.n	8009c5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	0018      	movs	r0, r3
 8009c64:	f000 fc81 	bl	800a56a <RTC_ByteToBcd2>
 8009c68:	0003      	movs	r3, r0
 8009c6a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	0018      	movs	r0, r3
 8009c72:	f000 fc7a 	bl	800a56a <RTC_ByteToBcd2>
 8009c76:	0003      	movs	r3, r0
 8009c78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009c7a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	789b      	ldrb	r3, [r3, #2]
 8009c80:	0018      	movs	r0, r3
 8009c82:	f000 fc72 	bl	800a56a <RTC_ByteToBcd2>
 8009c86:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009c88:	0022      	movs	r2, r4
 8009c8a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	78db      	ldrb	r3, [r3, #3]
 8009c90:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009c92:	4313      	orrs	r3, r2
 8009c94:	617b      	str	r3, [r7, #20]
 8009c96:	e017      	b.n	8009cc8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	2240      	movs	r2, #64	; 0x40
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	d102      	bne.n	8009caa <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	785b      	ldrb	r3, [r3, #1]
 8009cb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009cb6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009cbc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	78db      	ldrb	r3, [r3, #3]
 8009cc2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	22ca      	movs	r2, #202	; 0xca
 8009cce:	625a      	str	r2, [r3, #36]	; 0x24
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2253      	movs	r2, #83	; 0x53
 8009cd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	0018      	movs	r0, r3
 8009cdc:	f000 fc1b 	bl	800a516 <RTC_EnterInitMode>
 8009ce0:	1e03      	subs	r3, r0, #0
 8009ce2:	d00d      	beq.n	8009d00 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	22ff      	movs	r2, #255	; 0xff
 8009cea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2221      	movs	r2, #33	; 0x21
 8009cf0:	2104      	movs	r1, #4
 8009cf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e048      	b.n	8009d92 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	4925      	ldr	r1, [pc, #148]	; (8009d9c <HAL_RTC_SetTime+0x180>)
 8009d08:	400a      	ands	r2, r1
 8009d0a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689a      	ldr	r2, [r3, #8]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4922      	ldr	r1, [pc, #136]	; (8009da0 <HAL_RTC_SetTime+0x184>)
 8009d18:	400a      	ands	r2, r1
 8009d1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6899      	ldr	r1, [r3, #8]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	68da      	ldr	r2, [r3, #12]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2180      	movs	r1, #128	; 0x80
 8009d40:	438a      	bics	r2, r1
 8009d42:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	d113      	bne.n	8009d78 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	0018      	movs	r0, r3
 8009d54:	f000 fbb8 	bl	800a4c8 <HAL_RTC_WaitForSynchro>
 8009d58:	1e03      	subs	r3, r0, #0
 8009d5a:	d00d      	beq.n	8009d78 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	22ff      	movs	r2, #255	; 0xff
 8009d62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2221      	movs	r2, #33	; 0x21
 8009d68:	2104      	movs	r1, #4
 8009d6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2220      	movs	r2, #32
 8009d70:	2100      	movs	r1, #0
 8009d72:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e00c      	b.n	8009d92 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	22ff      	movs	r2, #255	; 0xff
 8009d7e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2221      	movs	r2, #33	; 0x21
 8009d84:	2101      	movs	r1, #1
 8009d86:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2220      	movs	r2, #32
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009d90:	2300      	movs	r3, #0
  }
}
 8009d92:	0018      	movs	r0, r3
 8009d94:	46bd      	mov	sp, r7
 8009d96:	b007      	add	sp, #28
 8009d98:	bd90      	pop	{r4, r7, pc}
 8009d9a:	46c0      	nop			; (mov r8, r8)
 8009d9c:	007f7f7f 	.word	0x007f7f7f
 8009da0:	fffbffff 	.word	0xfffbffff

08009da4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	045b      	lsls	r3, r3, #17
 8009dc2:	0c5a      	lsrs	r2, r3, #17
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a22      	ldr	r2, [pc, #136]	; (8009e58 <HAL_RTC_GetTime+0xb4>)
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	0c1b      	lsrs	r3, r3, #16
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	223f      	movs	r2, #63	; 0x3f
 8009ddc:	4013      	ands	r3, r2
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	0a1b      	lsrs	r3, r3, #8
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	227f      	movs	r2, #127	; 0x7f
 8009dec:	4013      	ands	r3, r2
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	227f      	movs	r2, #127	; 0x7f
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	0c1b      	lsrs	r3, r3, #16
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2240      	movs	r2, #64	; 0x40
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	b2da      	uxtb	r2, r3
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d11a      	bne.n	8009e4e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	0018      	movs	r0, r3
 8009e1e:	f000 fbcc 	bl	800a5ba <RTC_Bcd2ToByte>
 8009e22:	0003      	movs	r3, r0
 8009e24:	001a      	movs	r2, r3
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	0018      	movs	r0, r3
 8009e30:	f000 fbc3 	bl	800a5ba <RTC_Bcd2ToByte>
 8009e34:	0003      	movs	r3, r0
 8009e36:	001a      	movs	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	789b      	ldrb	r3, [r3, #2]
 8009e40:	0018      	movs	r0, r3
 8009e42:	f000 fbba 	bl	800a5ba <RTC_Bcd2ToByte>
 8009e46:	0003      	movs	r3, r0
 8009e48:	001a      	movs	r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	0018      	movs	r0, r3
 8009e52:	46bd      	mov	sp, r7
 8009e54:	b006      	add	sp, #24
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	007f7f7f 	.word	0x007f7f7f

08009e5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e5c:	b590      	push	{r4, r7, lr}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	5c9b      	ldrb	r3, [r3, r2]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <HAL_RTC_SetDate+0x1a>
 8009e72:	2302      	movs	r3, #2
 8009e74:	e099      	b.n	8009faa <HAL_RTC_SetDate+0x14e>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2221      	movs	r2, #33	; 0x21
 8009e82:	2102      	movs	r1, #2
 8009e84:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10e      	bne.n	8009eaa <HAL_RTC_SetDate+0x4e>
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	785b      	ldrb	r3, [r3, #1]
 8009e90:	001a      	movs	r2, r3
 8009e92:	2310      	movs	r3, #16
 8009e94:	4013      	ands	r3, r2
 8009e96:	d008      	beq.n	8009eaa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	785b      	ldrb	r3, [r3, #1]
 8009e9c:	2210      	movs	r2, #16
 8009e9e:	4393      	bics	r3, r2
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	330a      	adds	r3, #10
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d11c      	bne.n	8009eea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	78db      	ldrb	r3, [r3, #3]
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	f000 fb58 	bl	800a56a <RTC_ByteToBcd2>
 8009eba:	0003      	movs	r3, r0
 8009ebc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	785b      	ldrb	r3, [r3, #1]
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	f000 fb51 	bl	800a56a <RTC_ByteToBcd2>
 8009ec8:	0003      	movs	r3, r0
 8009eca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009ecc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	789b      	ldrb	r3, [r3, #2]
 8009ed2:	0018      	movs	r0, r3
 8009ed4:	f000 fb49 	bl	800a56a <RTC_ByteToBcd2>
 8009ed8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009eda:	0022      	movs	r2, r4
 8009edc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	617b      	str	r3, [r7, #20]
 8009ee8:	e00e      	b.n	8009f08 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	78db      	ldrb	r3, [r3, #3]
 8009eee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009ef6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009efc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009f04:	4313      	orrs	r3, r2
 8009f06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	22ca      	movs	r2, #202	; 0xca
 8009f0e:	625a      	str	r2, [r3, #36]	; 0x24
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2253      	movs	r2, #83	; 0x53
 8009f16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	0018      	movs	r0, r3
 8009f1c:	f000 fafb 	bl	800a516 <RTC_EnterInitMode>
 8009f20:	1e03      	subs	r3, r0, #0
 8009f22:	d00d      	beq.n	8009f40 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	22ff      	movs	r2, #255	; 0xff
 8009f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2221      	movs	r2, #33	; 0x21
 8009f30:	2104      	movs	r1, #4
 8009f32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2220      	movs	r2, #32
 8009f38:	2100      	movs	r1, #0
 8009f3a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e034      	b.n	8009faa <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	491b      	ldr	r1, [pc, #108]	; (8009fb4 <HAL_RTC_SetDate+0x158>)
 8009f48:	400a      	ands	r2, r1
 8009f4a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2180      	movs	r1, #128	; 0x80
 8009f58:	438a      	bics	r2, r1
 8009f5a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	2220      	movs	r2, #32
 8009f64:	4013      	ands	r3, r2
 8009f66:	d113      	bne.n	8009f90 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	0018      	movs	r0, r3
 8009f6c:	f000 faac 	bl	800a4c8 <HAL_RTC_WaitForSynchro>
 8009f70:	1e03      	subs	r3, r0, #0
 8009f72:	d00d      	beq.n	8009f90 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	22ff      	movs	r2, #255	; 0xff
 8009f7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2221      	movs	r2, #33	; 0x21
 8009f80:	2104      	movs	r1, #4
 8009f82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2220      	movs	r2, #32
 8009f88:	2100      	movs	r1, #0
 8009f8a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e00c      	b.n	8009faa <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	22ff      	movs	r2, #255	; 0xff
 8009f96:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2221      	movs	r2, #33	; 0x21
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
  }
}
 8009faa:	0018      	movs	r0, r3
 8009fac:	46bd      	mov	sp, r7
 8009fae:	b007      	add	sp, #28
 8009fb0:	bd90      	pop	{r4, r7, pc}
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	00ffff3f 	.word	0x00ffff3f

08009fb8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	4a21      	ldr	r2, [pc, #132]	; (800a050 <HAL_RTC_GetDate+0x98>)
 8009fcc:	4013      	ands	r3, r2
 8009fce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	0c1b      	lsrs	r3, r3, #16
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	0a1b      	lsrs	r3, r3, #8
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	221f      	movs	r2, #31
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	223f      	movs	r2, #63	; 0x3f
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	b2da      	uxtb	r2, r3
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	0b5b      	lsrs	r3, r3, #13
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	2207      	movs	r2, #7
 800a000:	4013      	ands	r3, r2
 800a002:	b2da      	uxtb	r2, r3
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d11a      	bne.n	800a044 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	78db      	ldrb	r3, [r3, #3]
 800a012:	0018      	movs	r0, r3
 800a014:	f000 fad1 	bl	800a5ba <RTC_Bcd2ToByte>
 800a018:	0003      	movs	r3, r0
 800a01a:	001a      	movs	r2, r3
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	785b      	ldrb	r3, [r3, #1]
 800a024:	0018      	movs	r0, r3
 800a026:	f000 fac8 	bl	800a5ba <RTC_Bcd2ToByte>
 800a02a:	0003      	movs	r3, r0
 800a02c:	001a      	movs	r2, r3
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	789b      	ldrb	r3, [r3, #2]
 800a036:	0018      	movs	r0, r3
 800a038:	f000 fabf 	bl	800a5ba <RTC_Bcd2ToByte>
 800a03c:	0003      	movs	r3, r0
 800a03e:	001a      	movs	r2, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	0018      	movs	r0, r3
 800a048:	46bd      	mov	sp, r7
 800a04a:	b006      	add	sp, #24
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	46c0      	nop			; (mov r8, r8)
 800a050:	00ffff3f 	.word	0x00ffff3f

0800a054 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a054:	b590      	push	{r4, r7, lr}
 800a056:	b089      	sub	sp, #36	; 0x24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2220      	movs	r2, #32
 800a064:	5c9b      	ldrb	r3, [r3, r2]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d101      	bne.n	800a06e <HAL_RTC_SetAlarm_IT+0x1a>
 800a06a:	2302      	movs	r3, #2
 800a06c:	e130      	b.n	800a2d0 <HAL_RTC_SetAlarm_IT+0x27c>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2220      	movs	r2, #32
 800a072:	2101      	movs	r1, #1
 800a074:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2221      	movs	r2, #33	; 0x21
 800a07a:	2102      	movs	r1, #2
 800a07c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d136      	bne.n	800a0f2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	2240      	movs	r2, #64	; 0x40
 800a08c:	4013      	ands	r3, r2
 800a08e:	d102      	bne.n	800a096 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2200      	movs	r2, #0
 800a094:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	0018      	movs	r0, r3
 800a09c:	f000 fa65 	bl	800a56a <RTC_ByteToBcd2>
 800a0a0:	0003      	movs	r3, r0
 800a0a2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	785b      	ldrb	r3, [r3, #1]
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f000 fa5e 	bl	800a56a <RTC_ByteToBcd2>
 800a0ae:	0003      	movs	r3, r0
 800a0b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a0b2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	789b      	ldrb	r3, [r3, #2]
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	f000 fa56 	bl	800a56a <RTC_ByteToBcd2>
 800a0be:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a0c0:	0022      	movs	r2, r4
 800a0c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	78db      	ldrb	r3, [r3, #3]
 800a0c8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	5c9b      	ldrb	r3, [r3, r2]
 800a0d4:	0018      	movs	r0, r3
 800a0d6:	f000 fa48 	bl	800a56a <RTC_ByteToBcd2>
 800a0da:	0003      	movs	r3, r0
 800a0dc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a0de:	0022      	movs	r2, r4
 800a0e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a0e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	61fb      	str	r3, [r7, #28]
 800a0f0:	e022      	b.n	800a138 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	2240      	movs	r2, #64	; 0x40
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	d102      	bne.n	800a104 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2200      	movs	r2, #0
 800a102:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	785b      	ldrb	r3, [r3, #1]
 800a10e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a110:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a116:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	78db      	ldrb	r3, [r3, #3]
 800a11c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a11e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2120      	movs	r1, #32
 800a124:	5c5b      	ldrb	r3, [r3, r1]
 800a126:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a128:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a12e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a134:	4313      	orrs	r3, r2
 800a136:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	4313      	orrs	r3, r2
 800a142:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	22ca      	movs	r2, #202	; 0xca
 800a14a:	625a      	str	r2, [r3, #36]	; 0x24
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2253      	movs	r2, #83	; 0x53
 800a152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a158:	2380      	movs	r3, #128	; 0x80
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d14e      	bne.n	800a1fe <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689a      	ldr	r2, [r3, #8]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	495b      	ldr	r1, [pc, #364]	; (800a2d8 <HAL_RTC_SetAlarm_IT+0x284>)
 800a16c:	400a      	ands	r2, r1
 800a16e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	22ff      	movs	r2, #255	; 0xff
 800a178:	401a      	ands	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4957      	ldr	r1, [pc, #348]	; (800a2dc <HAL_RTC_SetAlarm_IT+0x288>)
 800a180:	430a      	orrs	r2, r1
 800a182:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a184:	f7fb f835 	bl	80051f2 <HAL_GetTick>
 800a188:	0003      	movs	r3, r0
 800a18a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a18c:	e016      	b.n	800a1bc <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a18e:	f7fb f830 	bl	80051f2 <HAL_GetTick>
 800a192:	0002      	movs	r2, r0
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	1ad2      	subs	r2, r2, r3
 800a198:	23fa      	movs	r3, #250	; 0xfa
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d90d      	bls.n	800a1bc <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	22ff      	movs	r2, #255	; 0xff
 800a1a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2221      	movs	r2, #33	; 0x21
 800a1ac:	2103      	movs	r1, #3
 800a1ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e089      	b.n	800a2d0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	d0e2      	beq.n	800a18e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	69fa      	ldr	r2, [r7, #28]
 800a1ce:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689a      	ldr	r2, [r3, #8]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2180      	movs	r1, #128	; 0x80
 800a1e4:	0049      	lsls	r1, r1, #1
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689a      	ldr	r2, [r3, #8]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2180      	movs	r1, #128	; 0x80
 800a1f6:	0149      	lsls	r1, r1, #5
 800a1f8:	430a      	orrs	r2, r1
 800a1fa:	609a      	str	r2, [r3, #8]
 800a1fc:	e04d      	b.n	800a29a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4935      	ldr	r1, [pc, #212]	; (800a2e0 <HAL_RTC_SetAlarm_IT+0x28c>)
 800a20a:	400a      	ands	r2, r1
 800a20c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	22ff      	movs	r2, #255	; 0xff
 800a216:	401a      	ands	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4931      	ldr	r1, [pc, #196]	; (800a2e4 <HAL_RTC_SetAlarm_IT+0x290>)
 800a21e:	430a      	orrs	r2, r1
 800a220:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a222:	f7fa ffe6 	bl	80051f2 <HAL_GetTick>
 800a226:	0003      	movs	r3, r0
 800a228:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a22a:	e016      	b.n	800a25a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a22c:	f7fa ffe1 	bl	80051f2 <HAL_GetTick>
 800a230:	0002      	movs	r2, r0
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	1ad2      	subs	r2, r2, r3
 800a236:	23fa      	movs	r3, #250	; 0xfa
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d90d      	bls.n	800a25a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	22ff      	movs	r2, #255	; 0xff
 800a244:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2221      	movs	r2, #33	; 0x21
 800a24a:	2103      	movs	r1, #3
 800a24c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2220      	movs	r2, #32
 800a252:	2100      	movs	r1, #0
 800a254:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a256:	2303      	movs	r3, #3
 800a258:	e03a      	b.n	800a2d0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	2202      	movs	r2, #2
 800a262:	4013      	ands	r3, r2
 800a264:	d0e2      	beq.n	800a22c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69fa      	ldr	r2, [r7, #28]
 800a26c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	69ba      	ldr	r2, [r7, #24]
 800a274:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2180      	movs	r1, #128	; 0x80
 800a282:	0089      	lsls	r1, r1, #2
 800a284:	430a      	orrs	r2, r1
 800a286:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2180      	movs	r1, #128	; 0x80
 800a294:	0189      	lsls	r1, r1, #6
 800a296:	430a      	orrs	r2, r1
 800a298:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a29a:	4b13      	ldr	r3, [pc, #76]	; (800a2e8 <HAL_RTC_SetAlarm_IT+0x294>)
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	4b12      	ldr	r3, [pc, #72]	; (800a2e8 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2a0:	2180      	movs	r1, #128	; 0x80
 800a2a2:	0289      	lsls	r1, r1, #10
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a2a8:	4b0f      	ldr	r3, [pc, #60]	; (800a2e8 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	4b0e      	ldr	r3, [pc, #56]	; (800a2e8 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2ae:	2180      	movs	r1, #128	; 0x80
 800a2b0:	0289      	lsls	r1, r1, #10
 800a2b2:	430a      	orrs	r2, r1
 800a2b4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	22ff      	movs	r2, #255	; 0xff
 800a2bc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2221      	movs	r2, #33	; 0x21
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	b009      	add	sp, #36	; 0x24
 800a2d6:	bd90      	pop	{r4, r7, pc}
 800a2d8:	fffffeff 	.word	0xfffffeff
 800a2dc:	fffffe7f 	.word	0xfffffe7f
 800a2e0:	fffffdff 	.word	0xfffffdff
 800a2e4:	fffffd7f 	.word	0xfffffd7f
 800a2e8:	40010400 	.word	0x40010400

0800a2ec <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2220      	movs	r2, #32
 800a2fa:	5c9b      	ldrb	r3, [r3, r2]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d101      	bne.n	800a304 <HAL_RTC_DeactivateAlarm+0x18>
 800a300:	2302      	movs	r3, #2
 800a302:	e086      	b.n	800a412 <HAL_RTC_DeactivateAlarm+0x126>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2220      	movs	r2, #32
 800a308:	2101      	movs	r1, #1
 800a30a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2221      	movs	r2, #33	; 0x21
 800a310:	2102      	movs	r1, #2
 800a312:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	22ca      	movs	r2, #202	; 0xca
 800a31a:	625a      	str	r2, [r3, #36]	; 0x24
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2253      	movs	r2, #83	; 0x53
 800a322:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	2380      	movs	r3, #128	; 0x80
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d132      	bne.n	800a394 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4938      	ldr	r1, [pc, #224]	; (800a41c <HAL_RTC_DeactivateAlarm+0x130>)
 800a33a:	400a      	ands	r2, r1
 800a33c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4935      	ldr	r1, [pc, #212]	; (800a420 <HAL_RTC_DeactivateAlarm+0x134>)
 800a34a:	400a      	ands	r2, r1
 800a34c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a34e:	f7fa ff50 	bl	80051f2 <HAL_GetTick>
 800a352:	0003      	movs	r3, r0
 800a354:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a356:	e016      	b.n	800a386 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a358:	f7fa ff4b 	bl	80051f2 <HAL_GetTick>
 800a35c:	0002      	movs	r2, r0
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	1ad2      	subs	r2, r2, r3
 800a362:	23fa      	movs	r3, #250	; 0xfa
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	429a      	cmp	r2, r3
 800a368:	d90d      	bls.n	800a386 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	22ff      	movs	r2, #255	; 0xff
 800a370:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2221      	movs	r2, #33	; 0x21
 800a376:	2103      	movs	r1, #3
 800a378:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2220      	movs	r2, #32
 800a37e:	2100      	movs	r1, #0
 800a380:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e045      	b.n	800a412 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	2201      	movs	r2, #1
 800a38e:	4013      	ands	r3, r2
 800a390:	d0e2      	beq.n	800a358 <HAL_RTC_DeactivateAlarm+0x6c>
 800a392:	e031      	b.n	800a3f8 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689a      	ldr	r2, [r3, #8]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4921      	ldr	r1, [pc, #132]	; (800a424 <HAL_RTC_DeactivateAlarm+0x138>)
 800a3a0:	400a      	ands	r2, r1
 800a3a2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689a      	ldr	r2, [r3, #8]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	491e      	ldr	r1, [pc, #120]	; (800a428 <HAL_RTC_DeactivateAlarm+0x13c>)
 800a3b0:	400a      	ands	r2, r1
 800a3b2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a3b4:	f7fa ff1d 	bl	80051f2 <HAL_GetTick>
 800a3b8:	0003      	movs	r3, r0
 800a3ba:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a3bc:	e016      	b.n	800a3ec <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a3be:	f7fa ff18 	bl	80051f2 <HAL_GetTick>
 800a3c2:	0002      	movs	r2, r0
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	1ad2      	subs	r2, r2, r3
 800a3c8:	23fa      	movs	r3, #250	; 0xfa
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d90d      	bls.n	800a3ec <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	22ff      	movs	r2, #255	; 0xff
 800a3d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2221      	movs	r2, #33	; 0x21
 800a3dc:	2103      	movs	r1, #3
 800a3de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e012      	b.n	800a412 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	d0e2      	beq.n	800a3be <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	22ff      	movs	r2, #255	; 0xff
 800a3fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2221      	movs	r2, #33	; 0x21
 800a404:	2101      	movs	r1, #1
 800a406:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2220      	movs	r2, #32
 800a40c:	2100      	movs	r1, #0
 800a40e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	0018      	movs	r0, r3
 800a414:	46bd      	mov	sp, r7
 800a416:	b004      	add	sp, #16
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	46c0      	nop			; (mov r8, r8)
 800a41c:	fffffeff 	.word	0xfffffeff
 800a420:	ffffefff 	.word	0xffffefff
 800a424:	fffffdff 	.word	0xfffffdff
 800a428:	ffffdfff 	.word	0xffffdfff

0800a42c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	2380      	movs	r3, #128	; 0x80
 800a43c:	015b      	lsls	r3, r3, #5
 800a43e:	4013      	ands	r3, r2
 800a440:	d014      	beq.n	800a46c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68da      	ldr	r2, [r3, #12]
 800a448:	2380      	movs	r3, #128	; 0x80
 800a44a:	005b      	lsls	r3, r3, #1
 800a44c:	4013      	ands	r3, r2
 800a44e:	d00d      	beq.n	800a46c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	0018      	movs	r0, r3
 800a454:	f7f9 fec1 	bl	80041da <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	22ff      	movs	r2, #255	; 0xff
 800a460:	401a      	ands	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4915      	ldr	r1, [pc, #84]	; (800a4bc <HAL_RTC_AlarmIRQHandler+0x90>)
 800a468:	430a      	orrs	r2, r1
 800a46a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	689a      	ldr	r2, [r3, #8]
 800a472:	2380      	movs	r3, #128	; 0x80
 800a474:	019b      	lsls	r3, r3, #6
 800a476:	4013      	ands	r3, r2
 800a478:	d014      	beq.n	800a4a4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	2380      	movs	r3, #128	; 0x80
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4013      	ands	r3, r2
 800a486:	d00d      	beq.n	800a4a4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	0018      	movs	r0, r3
 800a48c:	f000 f910 	bl	800a6b0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	22ff      	movs	r2, #255	; 0xff
 800a498:	401a      	ands	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4908      	ldr	r1, [pc, #32]	; (800a4c0 <HAL_RTC_AlarmIRQHandler+0x94>)
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a4a4:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <HAL_RTC_AlarmIRQHandler+0x98>)
 800a4a6:	2280      	movs	r2, #128	; 0x80
 800a4a8:	0292      	lsls	r2, r2, #10
 800a4aa:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2221      	movs	r2, #33	; 0x21
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	5499      	strb	r1, [r3, r2]
}
 800a4b4:	46c0      	nop			; (mov r8, r8)
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	b002      	add	sp, #8
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	fffffe7f 	.word	0xfffffe7f
 800a4c0:	fffffd7f 	.word	0xfffffd7f
 800a4c4:	40010400 	.word	0x40010400

0800a4c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	21a0      	movs	r1, #160	; 0xa0
 800a4dc:	438a      	bics	r2, r1
 800a4de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a4e0:	f7fa fe87 	bl	80051f2 <HAL_GetTick>
 800a4e4:	0003      	movs	r3, r0
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a4e8:	e00a      	b.n	800a500 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a4ea:	f7fa fe82 	bl	80051f2 <HAL_GetTick>
 800a4ee:	0002      	movs	r2, r0
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	1ad2      	subs	r2, r2, r3
 800a4f4:	23fa      	movs	r3, #250	; 0xfa
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d901      	bls.n	800a500 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e006      	b.n	800a50e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	2220      	movs	r2, #32
 800a508:	4013      	ands	r3, r2
 800a50a:	d0ee      	beq.n	800a4ea <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	0018      	movs	r0, r3
 800a510:	46bd      	mov	sp, r7
 800a512:	b004      	add	sp, #16
 800a514:	bd80      	pop	{r7, pc}

0800a516 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	2240      	movs	r2, #64	; 0x40
 800a526:	4013      	ands	r3, r2
 800a528:	d11a      	bne.n	800a560 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2201      	movs	r2, #1
 800a530:	4252      	negs	r2, r2
 800a532:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a534:	f7fa fe5d 	bl	80051f2 <HAL_GetTick>
 800a538:	0003      	movs	r3, r0
 800a53a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a53c:	e00a      	b.n	800a554 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a53e:	f7fa fe58 	bl	80051f2 <HAL_GetTick>
 800a542:	0002      	movs	r2, r0
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	1ad2      	subs	r2, r2, r3
 800a548:	23fa      	movs	r3, #250	; 0xfa
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d901      	bls.n	800a554 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e006      	b.n	800a562 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	2240      	movs	r2, #64	; 0x40
 800a55c:	4013      	ands	r3, r2
 800a55e:	d0ee      	beq.n	800a53e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	0018      	movs	r0, r3
 800a564:	46bd      	mov	sp, r7
 800a566:	b004      	add	sp, #16
 800a568:	bd80      	pop	{r7, pc}

0800a56a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	0002      	movs	r2, r0
 800a572:	1dfb      	adds	r3, r7, #7
 800a574:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800a57a:	230b      	movs	r3, #11
 800a57c:	18fb      	adds	r3, r7, r3
 800a57e:	1dfa      	adds	r2, r7, #7
 800a580:	7812      	ldrb	r2, [r2, #0]
 800a582:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800a584:	e008      	b.n	800a598 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3301      	adds	r3, #1
 800a58a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800a58c:	220b      	movs	r2, #11
 800a58e:	18bb      	adds	r3, r7, r2
 800a590:	18ba      	adds	r2, r7, r2
 800a592:	7812      	ldrb	r2, [r2, #0]
 800a594:	3a0a      	subs	r2, #10
 800a596:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800a598:	210b      	movs	r1, #11
 800a59a:	187b      	adds	r3, r7, r1
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2b09      	cmp	r3, #9
 800a5a0:	d8f1      	bhi.n	800a586 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	011b      	lsls	r3, r3, #4
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	187b      	adds	r3, r7, r1
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	b2db      	uxtb	r3, r3
}
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	b004      	add	sp, #16
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	0002      	movs	r2, r0
 800a5c2:	1dfb      	adds	r3, r7, #7
 800a5c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800a5c6:	1dfb      	adds	r3, r7, #7
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	091b      	lsrs	r3, r3, #4
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	001a      	movs	r2, r3
 800a5d0:	0013      	movs	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	189b      	adds	r3, r3, r2
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	1dfb      	adds	r3, r7, #7
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	210f      	movs	r1, #15
 800a5e4:	400b      	ands	r3, r1
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	18d3      	adds	r3, r2, r3
 800a5ea:	b2db      	uxtb	r3, r3
}
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	b004      	add	sp, #16
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3350      	adds	r3, #80	; 0x50
 800a606:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	18d3      	adds	r3, r2, r3
 800a610:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	601a      	str	r2, [r3, #0]
}
 800a618:	46c0      	nop			; (mov r8, r8)
 800a61a:	46bd      	mov	sp, r7
 800a61c:	b006      	add	sp, #24
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3350      	adds	r3, #80	; 0x50
 800a630:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	18d3      	adds	r3, r2, r3
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
}
 800a640:	0018      	movs	r0, r3
 800a642:	46bd      	mov	sp, r7
 800a644:	b004      	add	sp, #16
 800a646:	bd80      	pop	{r7, pc}

0800a648 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2220      	movs	r2, #32
 800a654:	5c9b      	ldrb	r3, [r3, r2]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d101      	bne.n	800a65e <HAL_RTCEx_EnableBypassShadow+0x16>
 800a65a:	2302      	movs	r3, #2
 800a65c:	e024      	b.n	800a6a8 <HAL_RTCEx_EnableBypassShadow+0x60>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2220      	movs	r2, #32
 800a662:	2101      	movs	r1, #1
 800a664:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2221      	movs	r2, #33	; 0x21
 800a66a:	2102      	movs	r1, #2
 800a66c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	22ca      	movs	r2, #202	; 0xca
 800a674:	625a      	str	r2, [r3, #36]	; 0x24
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2253      	movs	r2, #83	; 0x53
 800a67c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2120      	movs	r1, #32
 800a68a:	430a      	orrs	r2, r1
 800a68c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	22ff      	movs	r2, #255	; 0xff
 800a694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2221      	movs	r2, #33	; 0x21
 800a69a:	2101      	movs	r1, #1
 800a69c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	b002      	add	sp, #8
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a6b8:	46c0      	nop			; (mov r8, r8)
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	b002      	add	sp, #8
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e083      	b.n	800a7da <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d109      	bne.n	800a6ee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	2382      	movs	r3, #130	; 0x82
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d009      	beq.n	800a6fa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	61da      	str	r2, [r3, #28]
 800a6ec:	e005      	b.n	800a6fa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2251      	movs	r2, #81	; 0x51
 800a704:	5c9b      	ldrb	r3, [r3, r2]
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d107      	bne.n	800a71c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2250      	movs	r2, #80	; 0x50
 800a710:	2100      	movs	r1, #0
 800a712:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	0018      	movs	r0, r3
 800a718:	f000 f866 	bl	800a7e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2251      	movs	r2, #81	; 0x51
 800a720:	2102      	movs	r1, #2
 800a722:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2140      	movs	r1, #64	; 0x40
 800a730:	438a      	bics	r2, r1
 800a732:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	2382      	movs	r3, #130	; 0x82
 800a73a:	005b      	lsls	r3, r3, #1
 800a73c:	401a      	ands	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6899      	ldr	r1, [r3, #8]
 800a742:	2384      	movs	r3, #132	; 0x84
 800a744:	021b      	lsls	r3, r3, #8
 800a746:	400b      	ands	r3, r1
 800a748:	431a      	orrs	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68d9      	ldr	r1, [r3, #12]
 800a74e:	2380      	movs	r3, #128	; 0x80
 800a750:	011b      	lsls	r3, r3, #4
 800a752:	400b      	ands	r3, r1
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	2102      	movs	r1, #2
 800a75c:	400b      	ands	r3, r1
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	2101      	movs	r1, #1
 800a766:	400b      	ands	r3, r1
 800a768:	431a      	orrs	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6999      	ldr	r1, [r3, #24]
 800a76e:	2380      	movs	r3, #128	; 0x80
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	400b      	ands	r3, r1
 800a774:	431a      	orrs	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	2138      	movs	r1, #56	; 0x38
 800a77c:	400b      	ands	r3, r1
 800a77e:	431a      	orrs	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a1b      	ldr	r3, [r3, #32]
 800a784:	2180      	movs	r1, #128	; 0x80
 800a786:	400b      	ands	r3, r1
 800a788:	431a      	orrs	r2, r3
 800a78a:	0011      	movs	r1, r2
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a790:	2380      	movs	r3, #128	; 0x80
 800a792:	019b      	lsls	r3, r3, #6
 800a794:	401a      	ands	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	0c1b      	lsrs	r3, r3, #16
 800a7a4:	2204      	movs	r2, #4
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	0019      	movs	r1, r3
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ae:	2210      	movs	r2, #16
 800a7b0:	401a      	ands	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	69da      	ldr	r2, [r3, #28]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4907      	ldr	r1, [pc, #28]	; (800a7e4 <HAL_SPI_Init+0x124>)
 800a7c6:	400a      	ands	r2, r1
 800a7c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2251      	movs	r2, #81	; 0x51
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	0018      	movs	r0, r3
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	b002      	add	sp, #8
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	46c0      	nop			; (mov r8, r8)
 800a7e4:	fffff7ff 	.word	0xfffff7ff

0800a7e8 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a7f0:	46c0      	nop			; (mov r8, r8)
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	b002      	add	sp, #8
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08c      	sub	sp, #48	; 0x30
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	001a      	movs	r2, r3
 800a806:	1cbb      	adds	r3, r7, #2
 800a808:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a80a:	2301      	movs	r3, #1
 800a80c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a80e:	232b      	movs	r3, #43	; 0x2b
 800a810:	18fb      	adds	r3, r7, r3
 800a812:	2200      	movs	r2, #0
 800a814:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2250      	movs	r2, #80	; 0x50
 800a81a:	5c9b      	ldrb	r3, [r3, r2]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d101      	bne.n	800a824 <HAL_SPI_TransmitReceive+0x2c>
 800a820:	2302      	movs	r3, #2
 800a822:	e1a0      	b.n	800ab66 <HAL_SPI_TransmitReceive+0x36e>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2250      	movs	r2, #80	; 0x50
 800a828:	2101      	movs	r1, #1
 800a82a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a82c:	f7fa fce1 	bl	80051f2 <HAL_GetTick>
 800a830:	0003      	movs	r3, r0
 800a832:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a834:	2023      	movs	r0, #35	; 0x23
 800a836:	183b      	adds	r3, r7, r0
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	2151      	movs	r1, #81	; 0x51
 800a83c:	5c52      	ldrb	r2, [r2, r1]
 800a83e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a846:	231a      	movs	r3, #26
 800a848:	18fb      	adds	r3, r7, r3
 800a84a:	1cba      	adds	r2, r7, #2
 800a84c:	8812      	ldrh	r2, [r2, #0]
 800a84e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a850:	183b      	adds	r3, r7, r0
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d011      	beq.n	800a87c <HAL_SPI_TransmitReceive+0x84>
 800a858:	69fa      	ldr	r2, [r7, #28]
 800a85a:	2382      	movs	r3, #130	; 0x82
 800a85c:	005b      	lsls	r3, r3, #1
 800a85e:	429a      	cmp	r2, r3
 800a860:	d107      	bne.n	800a872 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d103      	bne.n	800a872 <HAL_SPI_TransmitReceive+0x7a>
 800a86a:	183b      	adds	r3, r7, r0
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d004      	beq.n	800a87c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800a872:	232b      	movs	r3, #43	; 0x2b
 800a874:	18fb      	adds	r3, r7, r3
 800a876:	2202      	movs	r2, #2
 800a878:	701a      	strb	r2, [r3, #0]
    goto error;
 800a87a:	e169      	b.n	800ab50 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d006      	beq.n	800a890 <HAL_SPI_TransmitReceive+0x98>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d003      	beq.n	800a890 <HAL_SPI_TransmitReceive+0x98>
 800a888:	1cbb      	adds	r3, r7, #2
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d104      	bne.n	800a89a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800a890:	232b      	movs	r3, #43	; 0x2b
 800a892:	18fb      	adds	r3, r7, r3
 800a894:	2201      	movs	r2, #1
 800a896:	701a      	strb	r2, [r3, #0]
    goto error;
 800a898:	e15a      	b.n	800ab50 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2251      	movs	r2, #81	; 0x51
 800a89e:	5c9b      	ldrb	r3, [r3, r2]
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d003      	beq.n	800a8ae <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2251      	movs	r2, #81	; 0x51
 800a8aa:	2105      	movs	r1, #5
 800a8ac:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	1cba      	adds	r2, r7, #2
 800a8be:	8812      	ldrh	r2, [r2, #0]
 800a8c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	1cba      	adds	r2, r7, #2
 800a8c6:	8812      	ldrh	r2, [r2, #0]
 800a8c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	1cba      	adds	r2, r7, #2
 800a8d4:	8812      	ldrh	r2, [r2, #0]
 800a8d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	1cba      	adds	r2, r7, #2
 800a8dc:	8812      	ldrh	r2, [r2, #0]
 800a8de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2240      	movs	r2, #64	; 0x40
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	2b40      	cmp	r3, #64	; 0x40
 800a8f8:	d007      	beq.n	800a90a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2140      	movs	r1, #64	; 0x40
 800a906:	430a      	orrs	r2, r1
 800a908:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	68da      	ldr	r2, [r3, #12]
 800a90e:	2380      	movs	r3, #128	; 0x80
 800a910:	011b      	lsls	r3, r3, #4
 800a912:	429a      	cmp	r2, r3
 800a914:	d000      	beq.n	800a918 <HAL_SPI_TransmitReceive+0x120>
 800a916:	e07a      	b.n	800aa0e <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d004      	beq.n	800a92a <HAL_SPI_TransmitReceive+0x132>
 800a920:	231a      	movs	r3, #26
 800a922:	18fb      	adds	r3, r7, r3
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d166      	bne.n	800a9f8 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	881a      	ldrh	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93a:	1c9a      	adds	r2, r3, #2
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a944:	b29b      	uxth	r3, r3
 800a946:	3b01      	subs	r3, #1
 800a948:	b29a      	uxth	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a94e:	e053      	b.n	800a9f8 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	2202      	movs	r2, #2
 800a958:	4013      	ands	r3, r2
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d11b      	bne.n	800a996 <HAL_SPI_TransmitReceive+0x19e>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a962:	b29b      	uxth	r3, r3
 800a964:	2b00      	cmp	r3, #0
 800a966:	d016      	beq.n	800a996 <HAL_SPI_TransmitReceive+0x19e>
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d113      	bne.n	800a996 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a972:	881a      	ldrh	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97e:	1c9a      	adds	r2, r3, #2
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a988:	b29b      	uxth	r3, r3
 800a98a:	3b01      	subs	r3, #1
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a992:	2300      	movs	r3, #0
 800a994:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	2201      	movs	r2, #1
 800a99e:	4013      	ands	r3, r2
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d119      	bne.n	800a9d8 <HAL_SPI_TransmitReceive+0x1e0>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d014      	beq.n	800a9d8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68da      	ldr	r2, [r3, #12]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b8:	b292      	uxth	r2, r2
 800a9ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c0:	1c9a      	adds	r2, r3, #2
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a9d8:	f7fa fc0b 	bl	80051f2 <HAL_GetTick>
 800a9dc:	0002      	movs	r2, r0
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d807      	bhi.n	800a9f8 <HAL_SPI_TransmitReceive+0x200>
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	d004      	beq.n	800a9f8 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800a9ee:	232b      	movs	r3, #43	; 0x2b
 800a9f0:	18fb      	adds	r3, r7, r3
 800a9f2:	2203      	movs	r2, #3
 800a9f4:	701a      	strb	r2, [r3, #0]
        goto error;
 800a9f6:	e0ab      	b.n	800ab50 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1a6      	bne.n	800a950 <HAL_SPI_TransmitReceive+0x158>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1a1      	bne.n	800a950 <HAL_SPI_TransmitReceive+0x158>
 800aa0c:	e07f      	b.n	800ab0e <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d005      	beq.n	800aa22 <HAL_SPI_TransmitReceive+0x22a>
 800aa16:	231a      	movs	r3, #26
 800aa18:	18fb      	adds	r3, r7, r3
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d000      	beq.n	800aa22 <HAL_SPI_TransmitReceive+0x22a>
 800aa20:	e06b      	b.n	800aafa <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	330c      	adds	r3, #12
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	3b01      	subs	r3, #1
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa48:	e057      	b.n	800aafa <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	2202      	movs	r2, #2
 800aa52:	4013      	ands	r3, r2
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d11c      	bne.n	800aa92 <HAL_SPI_TransmitReceive+0x29a>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d017      	beq.n	800aa92 <HAL_SPI_TransmitReceive+0x29a>
 800aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d114      	bne.n	800aa92 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	330c      	adds	r3, #12
 800aa72:	7812      	ldrb	r2, [r2, #0]
 800aa74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	3b01      	subs	r3, #1
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d119      	bne.n	800aad4 <HAL_SPI_TransmitReceive+0x2dc>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d014      	beq.n	800aad4 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68da      	ldr	r2, [r3, #12]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab4:	b2d2      	uxtb	r2, r2
 800aab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	1c5a      	adds	r2, r3, #1
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	3b01      	subs	r3, #1
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aad0:	2301      	movs	r3, #1
 800aad2:	62fb      	str	r3, [r7, #44]	; 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aad4:	f7fa fb8d 	bl	80051f2 <HAL_GetTick>
 800aad8:	0002      	movs	r2, r0
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d802      	bhi.n	800aaea <HAL_SPI_TransmitReceive+0x2f2>
 800aae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae6:	3301      	adds	r3, #1
 800aae8:	d102      	bne.n	800aaf0 <HAL_SPI_TransmitReceive+0x2f8>
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d104      	bne.n	800aafa <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800aaf0:	232b      	movs	r3, #43	; 0x2b
 800aaf2:	18fb      	adds	r3, r7, r3
 800aaf4:	2203      	movs	r2, #3
 800aaf6:	701a      	strb	r2, [r3, #0]
        goto error;
 800aaf8:	e02a      	b.n	800ab50 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1a2      	bne.n	800aa4a <HAL_SPI_TransmitReceive+0x252>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d19d      	bne.n	800aa4a <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	0018      	movs	r0, r3
 800ab16:	f000 f8c5 	bl	800aca4 <SPI_EndRxTxTransaction>
 800ab1a:	1e03      	subs	r3, r0, #0
 800ab1c:	d007      	beq.n	800ab2e <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800ab1e:	232b      	movs	r3, #43	; 0x2b
 800ab20:	18fb      	adds	r3, r7, r3
 800ab22:	2201      	movs	r2, #1
 800ab24:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2220      	movs	r2, #32
 800ab2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ab2c:	e010      	b.n	800ab50 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10b      	bne.n	800ab4e <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab36:	2300      	movs	r3, #0
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	617b      	str	r3, [r7, #20]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	e000      	b.n	800ab50 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800ab4e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2251      	movs	r2, #81	; 0x51
 800ab54:	2101      	movs	r1, #1
 800ab56:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2250      	movs	r2, #80	; 0x50
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ab60:	232b      	movs	r3, #43	; 0x2b
 800ab62:	18fb      	adds	r3, r7, r3
 800ab64:	781b      	ldrb	r3, [r3, #0]
}
 800ab66:	0018      	movs	r0, r3
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	b00c      	add	sp, #48	; 0x30
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b082      	sub	sp, #8
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2251      	movs	r2, #81	; 0x51
 800ab7a:	5c9b      	ldrb	r3, [r3, r2]
 800ab7c:	b2db      	uxtb	r3, r3
}
 800ab7e:	0018      	movs	r0, r3
 800ab80:	46bd      	mov	sp, r7
 800ab82:	b002      	add	sp, #8
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	603b      	str	r3, [r7, #0]
 800ab94:	1dfb      	adds	r3, r7, #7
 800ab96:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ab98:	f7fa fb2b 	bl	80051f2 <HAL_GetTick>
 800ab9c:	0002      	movs	r2, r0
 800ab9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba0:	1a9b      	subs	r3, r3, r2
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	18d3      	adds	r3, r2, r3
 800aba6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aba8:	f7fa fb23 	bl	80051f2 <HAL_GetTick>
 800abac:	0003      	movs	r3, r0
 800abae:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800abb0:	4b3a      	ldr	r3, [pc, #232]	; (800ac9c <SPI_WaitFlagStateUntilTimeout+0x114>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	015b      	lsls	r3, r3, #5
 800abb6:	0d1b      	lsrs	r3, r3, #20
 800abb8:	69fa      	ldr	r2, [r7, #28]
 800abba:	4353      	muls	r3, r2
 800abbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800abbe:	e058      	b.n	800ac72 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	3301      	adds	r3, #1
 800abc4:	d055      	beq.n	800ac72 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800abc6:	f7fa fb14 	bl	80051f2 <HAL_GetTick>
 800abca:	0002      	movs	r2, r0
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	69fa      	ldr	r2, [r7, #28]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d902      	bls.n	800abdc <SPI_WaitFlagStateUntilTimeout+0x54>
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d142      	bne.n	800ac62 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	21e0      	movs	r1, #224	; 0xe0
 800abe8:	438a      	bics	r2, r1
 800abea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	2382      	movs	r3, #130	; 0x82
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d113      	bne.n	800ac20 <SPI_WaitFlagStateUntilTimeout+0x98>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	2380      	movs	r3, #128	; 0x80
 800abfe:	021b      	lsls	r3, r3, #8
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d005      	beq.n	800ac10 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	689a      	ldr	r2, [r3, #8]
 800ac08:	2380      	movs	r3, #128	; 0x80
 800ac0a:	00db      	lsls	r3, r3, #3
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d107      	bne.n	800ac20 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2140      	movs	r1, #64	; 0x40
 800ac1c:	438a      	bics	r2, r1
 800ac1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac24:	2380      	movs	r3, #128	; 0x80
 800ac26:	019b      	lsls	r3, r3, #6
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d110      	bne.n	800ac4e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	491a      	ldr	r1, [pc, #104]	; (800aca0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800ac38:	400a      	ands	r2, r1
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2180      	movs	r1, #128	; 0x80
 800ac48:	0189      	lsls	r1, r1, #6
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2251      	movs	r2, #81	; 0x51
 800ac52:	2101      	movs	r1, #1
 800ac54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2250      	movs	r2, #80	; 0x50
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e017      	b.n	800ac92 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	425a      	negs	r2, r3
 800ac82:	4153      	adcs	r3, r2
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	001a      	movs	r2, r3
 800ac88:	1dfb      	adds	r3, r7, #7
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d197      	bne.n	800abc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	0018      	movs	r0, r3
 800ac94:	46bd      	mov	sp, r7
 800ac96:	b008      	add	sp, #32
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	20000070 	.word	0x20000070
 800aca0:	ffffdfff 	.word	0xffffdfff

0800aca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b088      	sub	sp, #32
 800aca8:	af02      	add	r7, sp, #8
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800acb0:	4b1d      	ldr	r3, [pc, #116]	; (800ad28 <SPI_EndRxTxTransaction+0x84>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	491d      	ldr	r1, [pc, #116]	; (800ad2c <SPI_EndRxTxTransaction+0x88>)
 800acb6:	0018      	movs	r0, r3
 800acb8:	f7f5 fa38 	bl	800012c <__udivsi3>
 800acbc:	0003      	movs	r3, r0
 800acbe:	001a      	movs	r2, r3
 800acc0:	0013      	movs	r3, r2
 800acc2:	015b      	lsls	r3, r3, #5
 800acc4:	1a9b      	subs	r3, r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	189b      	adds	r3, r3, r2
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	685a      	ldr	r2, [r3, #4]
 800acd2:	2382      	movs	r3, #130	; 0x82
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d112      	bne.n	800ad00 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	0013      	movs	r3, r2
 800ace4:	2200      	movs	r2, #0
 800ace6:	2180      	movs	r1, #128	; 0x80
 800ace8:	f7ff ff4e 	bl	800ab88 <SPI_WaitFlagStateUntilTimeout>
 800acec:	1e03      	subs	r3, r0, #0
 800acee:	d016      	beq.n	800ad1e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf4:	2220      	movs	r2, #32
 800acf6:	431a      	orrs	r2, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e00f      	b.n	800ad20 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00a      	beq.n	800ad1c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	2280      	movs	r2, #128	; 0x80
 800ad14:	4013      	ands	r3, r2
 800ad16:	2b80      	cmp	r3, #128	; 0x80
 800ad18:	d0f2      	beq.n	800ad00 <SPI_EndRxTxTransaction+0x5c>
 800ad1a:	e000      	b.n	800ad1e <SPI_EndRxTxTransaction+0x7a>
        break;
 800ad1c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	0018      	movs	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b006      	add	sp, #24
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	20000070 	.word	0x20000070
 800ad2c:	016e3600 	.word	0x016e3600

0800ad30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e044      	b.n	800adcc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d107      	bne.n	800ad5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2274      	movs	r2, #116	; 0x74
 800ad4e:	2100      	movs	r1, #0
 800ad50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	0018      	movs	r0, r3
 800ad56:	f7fa fb33 	bl	80053c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2224      	movs	r2, #36	; 0x24
 800ad5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	438a      	bics	r2, r1
 800ad6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	0018      	movs	r0, r3
 800ad74:	f000 fbe2 	bl	800b53c <UART_SetConfig>
 800ad78:	0003      	movs	r3, r0
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d101      	bne.n	800ad82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e024      	b.n	800adcc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f000 fe93 	bl	800bab8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	490d      	ldr	r1, [pc, #52]	; (800add4 <HAL_UART_Init+0xa4>)
 800ad9e:	400a      	ands	r2, r1
 800ada0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	689a      	ldr	r2, [r3, #8]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	212a      	movs	r1, #42	; 0x2a
 800adae:	438a      	bics	r2, r1
 800adb0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2101      	movs	r1, #1
 800adbe:	430a      	orrs	r2, r1
 800adc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	0018      	movs	r0, r3
 800adc6:	f000 ff2b 	bl	800bc20 <UART_CheckIdleState>
 800adca:	0003      	movs	r3, r0
}
 800adcc:	0018      	movs	r0, r3
 800adce:	46bd      	mov	sp, r7
 800add0:	b002      	add	sp, #8
 800add2:	bd80      	pop	{r7, pc}
 800add4:	ffffb7ff 	.word	0xffffb7ff

0800add8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08a      	sub	sp, #40	; 0x28
 800addc:	af02      	add	r7, sp, #8
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	1dbb      	adds	r3, r7, #6
 800ade6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adec:	2b20      	cmp	r3, #32
 800adee:	d000      	beq.n	800adf2 <HAL_UART_Transmit+0x1a>
 800adf0:	e095      	b.n	800af1e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d003      	beq.n	800ae00 <HAL_UART_Transmit+0x28>
 800adf8:	1dbb      	adds	r3, r7, #6
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	e08d      	b.n	800af20 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	689a      	ldr	r2, [r3, #8]
 800ae08:	2380      	movs	r3, #128	; 0x80
 800ae0a:	015b      	lsls	r3, r3, #5
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d109      	bne.n	800ae24 <HAL_UART_Transmit+0x4c>
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d105      	bne.n	800ae24 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	d001      	beq.n	800ae24 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e07d      	b.n	800af20 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2274      	movs	r2, #116	; 0x74
 800ae28:	5c9b      	ldrb	r3, [r3, r2]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d101      	bne.n	800ae32 <HAL_UART_Transmit+0x5a>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	e076      	b.n	800af20 <HAL_UART_Transmit+0x148>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2274      	movs	r2, #116	; 0x74
 800ae36:	2101      	movs	r1, #1
 800ae38:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2280      	movs	r2, #128	; 0x80
 800ae3e:	2100      	movs	r1, #0
 800ae40:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2221      	movs	r2, #33	; 0x21
 800ae46:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae48:	f7fa f9d3 	bl	80051f2 <HAL_GetTick>
 800ae4c:	0003      	movs	r3, r0
 800ae4e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	1dba      	adds	r2, r7, #6
 800ae54:	2150      	movs	r1, #80	; 0x50
 800ae56:	8812      	ldrh	r2, [r2, #0]
 800ae58:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	1dba      	adds	r2, r7, #6
 800ae5e:	2152      	movs	r1, #82	; 0x52
 800ae60:	8812      	ldrh	r2, [r2, #0]
 800ae62:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	2380      	movs	r3, #128	; 0x80
 800ae6a:	015b      	lsls	r3, r3, #5
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d108      	bne.n	800ae82 <HAL_UART_Transmit+0xaa>
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d104      	bne.n	800ae82 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	61bb      	str	r3, [r7, #24]
 800ae80:	e003      	b.n	800ae8a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2274      	movs	r2, #116	; 0x74
 800ae8e:	2100      	movs	r1, #0
 800ae90:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800ae92:	e02c      	b.n	800aeee <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae94:	697a      	ldr	r2, [r7, #20]
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	0013      	movs	r3, r2
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2180      	movs	r1, #128	; 0x80
 800aea2:	f000 ff05 	bl	800bcb0 <UART_WaitOnFlagUntilTimeout>
 800aea6:	1e03      	subs	r3, r0, #0
 800aea8:	d001      	beq.n	800aeae <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800aeaa:	2303      	movs	r3, #3
 800aeac:	e038      	b.n	800af20 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10b      	bne.n	800aecc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	881b      	ldrh	r3, [r3, #0]
 800aeb8:	001a      	movs	r2, r3
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	05d2      	lsls	r2, r2, #23
 800aec0:	0dd2      	lsrs	r2, r2, #23
 800aec2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	3302      	adds	r3, #2
 800aec8:	61bb      	str	r3, [r7, #24]
 800aeca:	e007      	b.n	800aedc <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	781a      	ldrb	r2, [r3, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	3301      	adds	r3, #1
 800aeda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2252      	movs	r2, #82	; 0x52
 800aee0:	5a9b      	ldrh	r3, [r3, r2]
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	3b01      	subs	r3, #1
 800aee6:	b299      	uxth	r1, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2252      	movs	r2, #82	; 0x52
 800aeec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2252      	movs	r2, #82	; 0x52
 800aef2:	5a9b      	ldrh	r3, [r3, r2]
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1cc      	bne.n	800ae94 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	0013      	movs	r3, r2
 800af04:	2200      	movs	r2, #0
 800af06:	2140      	movs	r1, #64	; 0x40
 800af08:	f000 fed2 	bl	800bcb0 <UART_WaitOnFlagUntilTimeout>
 800af0c:	1e03      	subs	r3, r0, #0
 800af0e:	d001      	beq.n	800af14 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e005      	b.n	800af20 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2220      	movs	r2, #32
 800af18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	e000      	b.n	800af20 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800af1e:	2302      	movs	r3, #2
  }
}
 800af20:	0018      	movs	r0, r3
 800af22:	46bd      	mov	sp, r7
 800af24:	b008      	add	sp, #32
 800af26:	bd80      	pop	{r7, pc}

0800af28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	1dbb      	adds	r3, r7, #6
 800af34:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af3a:	2b20      	cmp	r3, #32
 800af3c:	d144      	bne.n	800afc8 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <HAL_UART_Receive_IT+0x24>
 800af44:	1dbb      	adds	r3, r7, #6
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d101      	bne.n	800af50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	e03c      	b.n	800afca <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	689a      	ldr	r2, [r3, #8]
 800af54:	2380      	movs	r3, #128	; 0x80
 800af56:	015b      	lsls	r3, r3, #5
 800af58:	429a      	cmp	r2, r3
 800af5a:	d109      	bne.n	800af70 <HAL_UART_Receive_IT+0x48>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d105      	bne.n	800af70 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2201      	movs	r2, #1
 800af68:	4013      	ands	r3, r2
 800af6a:	d001      	beq.n	800af70 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	e02c      	b.n	800afca <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2274      	movs	r2, #116	; 0x74
 800af74:	5c9b      	ldrb	r3, [r3, r2]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d101      	bne.n	800af7e <HAL_UART_Receive_IT+0x56>
 800af7a:	2302      	movs	r3, #2
 800af7c:	e025      	b.n	800afca <HAL_UART_Receive_IT+0xa2>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2274      	movs	r2, #116	; 0x74
 800af82:	2101      	movs	r1, #1
 800af84:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a10      	ldr	r2, [pc, #64]	; (800afd4 <HAL_UART_Receive_IT+0xac>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d00f      	beq.n	800afb6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	2380      	movs	r3, #128	; 0x80
 800af9e:	041b      	lsls	r3, r3, #16
 800afa0:	4013      	ands	r3, r2
 800afa2:	d008      	beq.n	800afb6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2180      	movs	r1, #128	; 0x80
 800afb0:	04c9      	lsls	r1, r1, #19
 800afb2:	430a      	orrs	r2, r1
 800afb4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800afb6:	1dbb      	adds	r3, r7, #6
 800afb8:	881a      	ldrh	r2, [r3, #0]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	0018      	movs	r0, r3
 800afc0:	f000 fef4 	bl	800bdac <UART_Start_Receive_IT>
 800afc4:	0003      	movs	r3, r0
 800afc6:	e000      	b.n	800afca <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800afc8:	2302      	movs	r3, #2
  }
}
 800afca:	0018      	movs	r0, r3
 800afcc:	46bd      	mov	sp, r7
 800afce:	b004      	add	sp, #16
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	46c0      	nop			; (mov r8, r8)
 800afd4:	40004800 	.word	0x40004800

0800afd8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	1dbb      	adds	r3, r7, #6
 800afe4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afea:	2b20      	cmp	r3, #32
 800afec:	d000      	beq.n	800aff0 <HAL_UART_Transmit_DMA+0x18>
 800afee:	e079      	b.n	800b0e4 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <HAL_UART_Transmit_DMA+0x26>
 800aff6:	1dbb      	adds	r3, r7, #6
 800aff8:	881b      	ldrh	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e071      	b.n	800b0e6 <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	689a      	ldr	r2, [r3, #8]
 800b006:	2380      	movs	r3, #128	; 0x80
 800b008:	015b      	lsls	r3, r3, #5
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d109      	bne.n	800b022 <HAL_UART_Transmit_DMA+0x4a>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d105      	bne.n	800b022 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2201      	movs	r2, #1
 800b01a:	4013      	ands	r3, r2
 800b01c:	d001      	beq.n	800b022 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e061      	b.n	800b0e6 <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2274      	movs	r2, #116	; 0x74
 800b026:	5c9b      	ldrb	r3, [r3, r2]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d101      	bne.n	800b030 <HAL_UART_Transmit_DMA+0x58>
 800b02c:	2302      	movs	r3, #2
 800b02e:	e05a      	b.n	800b0e6 <HAL_UART_Transmit_DMA+0x10e>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2274      	movs	r2, #116	; 0x74
 800b034:	2101      	movs	r1, #1
 800b036:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	1dba      	adds	r2, r7, #6
 800b042:	2150      	movs	r1, #80	; 0x50
 800b044:	8812      	ldrh	r2, [r2, #0]
 800b046:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	1dba      	adds	r2, r7, #6
 800b04c:	2152      	movs	r1, #82	; 0x52
 800b04e:	8812      	ldrh	r2, [r2, #0]
 800b050:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2280      	movs	r2, #128	; 0x80
 800b056:	2100      	movs	r1, #0
 800b058:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2221      	movs	r2, #33	; 0x21
 800b05e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b064:	2b00      	cmp	r3, #0
 800b066:	d02b      	beq.n	800b0c0 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b06c:	4a20      	ldr	r2, [pc, #128]	; (800b0f0 <HAL_UART_Transmit_DMA+0x118>)
 800b06e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b074:	4a1f      	ldr	r2, [pc, #124]	; (800b0f4 <HAL_UART_Transmit_DMA+0x11c>)
 800b076:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b07c:	4a1e      	ldr	r2, [pc, #120]	; (800b0f8 <HAL_UART_Transmit_DMA+0x120>)
 800b07e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b084:	2200      	movs	r2, #0
 800b086:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b090:	0019      	movs	r1, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3328      	adds	r3, #40	; 0x28
 800b098:	001a      	movs	r2, r3
 800b09a:	1dbb      	adds	r3, r7, #6
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	f7fc fa3b 	bl	8007518 <HAL_DMA_Start_IT>
 800b0a2:	1e03      	subs	r3, r0, #0
 800b0a4:	d00c      	beq.n	800b0c0 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2280      	movs	r2, #128	; 0x80
 800b0aa:	2110      	movs	r1, #16
 800b0ac:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2274      	movs	r2, #116	; 0x74
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2220      	movs	r2, #32
 800b0ba:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e012      	b.n	800b0e6 <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2240      	movs	r2, #64	; 0x40
 800b0c6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2274      	movs	r2, #116	; 0x74
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689a      	ldr	r2, [r3, #8]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2180      	movs	r1, #128	; 0x80
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e000      	b.n	800b0e6 <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b0e4:	2302      	movs	r3, #2
  }
}
 800b0e6:	0018      	movs	r0, r3
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	b004      	add	sp, #16
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	46c0      	nop			; (mov r8, r8)
 800b0f0:	0800bf51 	.word	0x0800bf51
 800b0f4:	0800bfa5 	.word	0x0800bfa5
 800b0f8:	0800bfc3 	.word	0x0800bfc3

0800b0fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b088      	sub	sp, #32
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	4ab5      	ldr	r2, [pc, #724]	; (800b3f4 <HAL_UART_IRQHandler+0x2f8>)
 800b120:	4013      	ands	r3, r2
 800b122:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d112      	bne.n	800b150 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	2220      	movs	r2, #32
 800b12e:	4013      	ands	r3, r2
 800b130:	d00e      	beq.n	800b150 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	2220      	movs	r2, #32
 800b136:	4013      	ands	r3, r2
 800b138:	d00a      	beq.n	800b150 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d100      	bne.n	800b144 <HAL_UART_IRQHandler+0x48>
 800b142:	e1d1      	b.n	800b4e8 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	0010      	movs	r0, r2
 800b14c:	4798      	blx	r3
      }
      return;
 800b14e:	e1cb      	b.n	800b4e8 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d100      	bne.n	800b158 <HAL_UART_IRQHandler+0x5c>
 800b156:	e0d9      	b.n	800b30c <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2201      	movs	r2, #1
 800b15c:	4013      	ands	r3, r2
 800b15e:	d104      	bne.n	800b16a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	4aa5      	ldr	r2, [pc, #660]	; (800b3f8 <HAL_UART_IRQHandler+0x2fc>)
 800b164:	4013      	ands	r3, r2
 800b166:	d100      	bne.n	800b16a <HAL_UART_IRQHandler+0x6e>
 800b168:	e0d0      	b.n	800b30c <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	2201      	movs	r2, #1
 800b16e:	4013      	ands	r3, r2
 800b170:	d010      	beq.n	800b194 <HAL_UART_IRQHandler+0x98>
 800b172:	69ba      	ldr	r2, [r7, #24]
 800b174:	2380      	movs	r3, #128	; 0x80
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	4013      	ands	r3, r2
 800b17a:	d00b      	beq.n	800b194 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2201      	movs	r2, #1
 800b182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2280      	movs	r2, #128	; 0x80
 800b188:	589b      	ldr	r3, [r3, r2]
 800b18a:	2201      	movs	r2, #1
 800b18c:	431a      	orrs	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2180      	movs	r1, #128	; 0x80
 800b192:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	2202      	movs	r2, #2
 800b198:	4013      	ands	r3, r2
 800b19a:	d00f      	beq.n	800b1bc <HAL_UART_IRQHandler+0xc0>
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	d00b      	beq.n	800b1bc <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2280      	movs	r2, #128	; 0x80
 800b1b0:	589b      	ldr	r3, [r3, r2]
 800b1b2:	2204      	movs	r2, #4
 800b1b4:	431a      	orrs	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2180      	movs	r1, #128	; 0x80
 800b1ba:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	2204      	movs	r2, #4
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	d00f      	beq.n	800b1e4 <HAL_UART_IRQHandler+0xe8>
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	d00b      	beq.n	800b1e4 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2204      	movs	r2, #4
 800b1d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2280      	movs	r2, #128	; 0x80
 800b1d8:	589b      	ldr	r3, [r3, r2]
 800b1da:	2202      	movs	r2, #2
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2180      	movs	r1, #128	; 0x80
 800b1e2:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	2208      	movs	r2, #8
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	d013      	beq.n	800b214 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	2220      	movs	r2, #32
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	d103      	bne.n	800b1fc <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b1fa:	d00b      	beq.n	800b214 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2208      	movs	r2, #8
 800b202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2280      	movs	r2, #128	; 0x80
 800b208:	589b      	ldr	r3, [r3, r2]
 800b20a:	2208      	movs	r2, #8
 800b20c:	431a      	orrs	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2180      	movs	r1, #128	; 0x80
 800b212:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b214:	69fa      	ldr	r2, [r7, #28]
 800b216:	2380      	movs	r3, #128	; 0x80
 800b218:	011b      	lsls	r3, r3, #4
 800b21a:	4013      	ands	r3, r2
 800b21c:	d011      	beq.n	800b242 <HAL_UART_IRQHandler+0x146>
 800b21e:	69ba      	ldr	r2, [r7, #24]
 800b220:	2380      	movs	r3, #128	; 0x80
 800b222:	04db      	lsls	r3, r3, #19
 800b224:	4013      	ands	r3, r2
 800b226:	d00c      	beq.n	800b242 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2280      	movs	r2, #128	; 0x80
 800b22e:	0112      	lsls	r2, r2, #4
 800b230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2280      	movs	r2, #128	; 0x80
 800b236:	589b      	ldr	r3, [r3, r2]
 800b238:	2220      	movs	r2, #32
 800b23a:	431a      	orrs	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2180      	movs	r1, #128	; 0x80
 800b240:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2280      	movs	r2, #128	; 0x80
 800b246:	589b      	ldr	r3, [r3, r2]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d100      	bne.n	800b24e <HAL_UART_IRQHandler+0x152>
 800b24c:	e14e      	b.n	800b4ec <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	2220      	movs	r2, #32
 800b252:	4013      	ands	r3, r2
 800b254:	d00c      	beq.n	800b270 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	2220      	movs	r2, #32
 800b25a:	4013      	ands	r3, r2
 800b25c:	d008      	beq.n	800b270 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b262:	2b00      	cmp	r3, #0
 800b264:	d004      	beq.n	800b270 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	0010      	movs	r0, r2
 800b26e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2280      	movs	r2, #128	; 0x80
 800b274:	589b      	ldr	r3, [r3, r2]
 800b276:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	2240      	movs	r2, #64	; 0x40
 800b280:	4013      	ands	r3, r2
 800b282:	2b40      	cmp	r3, #64	; 0x40
 800b284:	d003      	beq.n	800b28e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2228      	movs	r2, #40	; 0x28
 800b28a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b28c:	d033      	beq.n	800b2f6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	0018      	movs	r0, r3
 800b292:	f000 fe2d 	bl	800bef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	2240      	movs	r2, #64	; 0x40
 800b29e:	4013      	ands	r3, r2
 800b2a0:	2b40      	cmp	r3, #64	; 0x40
 800b2a2:	d123      	bne.n	800b2ec <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	689a      	ldr	r2, [r3, #8]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2140      	movs	r1, #64	; 0x40
 800b2b0:	438a      	bics	r2, r1
 800b2b2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d012      	beq.n	800b2e2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2c0:	4a4e      	ldr	r2, [pc, #312]	; (800b3fc <HAL_UART_IRQHandler+0x300>)
 800b2c2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	f7fc f9cb 	bl	8007664 <HAL_DMA_Abort_IT>
 800b2ce:	1e03      	subs	r3, r0, #0
 800b2d0:	d01a      	beq.n	800b308 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2dc:	0018      	movs	r0, r3
 800b2de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2e0:	e012      	b.n	800b308 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	0018      	movs	r0, r3
 800b2e6:	f000 f915 	bl	800b514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ea:	e00d      	b.n	800b308 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	0018      	movs	r0, r3
 800b2f0:	f000 f910 	bl	800b514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2f4:	e008      	b.n	800b308 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	0018      	movs	r0, r3
 800b2fa:	f000 f90b 	bl	800b514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2280      	movs	r2, #128	; 0x80
 800b302:	2100      	movs	r1, #0
 800b304:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b306:	e0f1      	b.n	800b4ec <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b308:	46c0      	nop			; (mov r8, r8)
    return;
 800b30a:	e0ef      	b.n	800b4ec <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b310:	2b01      	cmp	r3, #1
 800b312:	d000      	beq.n	800b316 <HAL_UART_IRQHandler+0x21a>
 800b314:	e0b5      	b.n	800b482 <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	2210      	movs	r2, #16
 800b31a:	4013      	ands	r3, r2
 800b31c:	d100      	bne.n	800b320 <HAL_UART_IRQHandler+0x224>
 800b31e:	e0b0      	b.n	800b482 <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	2210      	movs	r2, #16
 800b324:	4013      	ands	r3, r2
 800b326:	d100      	bne.n	800b32a <HAL_UART_IRQHandler+0x22e>
 800b328:	e0ab      	b.n	800b482 <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2210      	movs	r2, #16
 800b330:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	2240      	movs	r2, #64	; 0x40
 800b33a:	4013      	ands	r3, r2
 800b33c:	2b40      	cmp	r3, #64	; 0x40
 800b33e:	d161      	bne.n	800b404 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	2108      	movs	r1, #8
 800b34a:	187b      	adds	r3, r7, r1
 800b34c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800b34e:	187b      	adds	r3, r7, r1
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d100      	bne.n	800b358 <HAL_UART_IRQHandler+0x25c>
 800b356:	e0cb      	b.n	800b4f0 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2258      	movs	r2, #88	; 0x58
 800b35c:	5a9b      	ldrh	r3, [r3, r2]
 800b35e:	187a      	adds	r2, r7, r1
 800b360:	8812      	ldrh	r2, [r2, #0]
 800b362:	429a      	cmp	r2, r3
 800b364:	d300      	bcc.n	800b368 <HAL_UART_IRQHandler+0x26c>
 800b366:	e0c3      	b.n	800b4f0 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	187a      	adds	r2, r7, r1
 800b36c:	215a      	movs	r1, #90	; 0x5a
 800b36e:	8812      	ldrh	r2, [r2, #0]
 800b370:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2220      	movs	r2, #32
 800b37c:	4013      	ands	r3, r2
 800b37e:	d12a      	bne.n	800b3d6 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	491d      	ldr	r1, [pc, #116]	; (800b400 <HAL_UART_IRQHandler+0x304>)
 800b38c:	400a      	ands	r2, r1
 800b38e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689a      	ldr	r2, [r3, #8]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2101      	movs	r1, #1
 800b39c:	438a      	bics	r2, r1
 800b39e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	689a      	ldr	r2, [r3, #8]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2140      	movs	r1, #64	; 0x40
 800b3ac:	438a      	bics	r2, r1
 800b3ae:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2220      	movs	r2, #32
 800b3b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2110      	movs	r1, #16
 800b3c8:	438a      	bics	r2, r1
 800b3ca:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	f7fc f907 	bl	80075e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2258      	movs	r2, #88	; 0x58
 800b3da:	5a9a      	ldrh	r2, [r3, r2]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	215a      	movs	r1, #90	; 0x5a
 800b3e0:	5a5b      	ldrh	r3, [r3, r1]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	0011      	movs	r1, r2
 800b3ec:	0018      	movs	r0, r3
 800b3ee:	f000 f899 	bl	800b524 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b3f2:	e07d      	b.n	800b4f0 <HAL_UART_IRQHandler+0x3f4>
 800b3f4:	0000080f 	.word	0x0000080f
 800b3f8:	04000120 	.word	0x04000120
 800b3fc:	0800c045 	.word	0x0800c045
 800b400:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2258      	movs	r2, #88	; 0x58
 800b408:	5a99      	ldrh	r1, [r3, r2]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	225a      	movs	r2, #90	; 0x5a
 800b40e:	5a9b      	ldrh	r3, [r3, r2]
 800b410:	b29a      	uxth	r2, r3
 800b412:	200a      	movs	r0, #10
 800b414:	183b      	adds	r3, r7, r0
 800b416:	1a8a      	subs	r2, r1, r2
 800b418:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	225a      	movs	r2, #90	; 0x5a
 800b41e:	5a9b      	ldrh	r3, [r3, r2]
 800b420:	b29b      	uxth	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	d100      	bne.n	800b428 <HAL_UART_IRQHandler+0x32c>
 800b426:	e065      	b.n	800b4f4 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800b428:	183b      	adds	r3, r7, r0
 800b42a:	881b      	ldrh	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d061      	beq.n	800b4f4 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4931      	ldr	r1, [pc, #196]	; (800b500 <HAL_UART_IRQHandler+0x404>)
 800b43c:	400a      	ands	r2, r1
 800b43e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689a      	ldr	r2, [r3, #8]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2101      	movs	r1, #1
 800b44c:	438a      	bics	r2, r1
 800b44e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2220      	movs	r2, #32
 800b454:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2110      	movs	r1, #16
 800b46e:	438a      	bics	r2, r1
 800b470:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b472:	183b      	adds	r3, r7, r0
 800b474:	881a      	ldrh	r2, [r3, #0]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	0011      	movs	r1, r2
 800b47a:	0018      	movs	r0, r3
 800b47c:	f000 f852 	bl	800b524 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b480:	e038      	b.n	800b4f4 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b482:	69fa      	ldr	r2, [r7, #28]
 800b484:	2380      	movs	r3, #128	; 0x80
 800b486:	035b      	lsls	r3, r3, #13
 800b488:	4013      	ands	r3, r2
 800b48a:	d00e      	beq.n	800b4aa <HAL_UART_IRQHandler+0x3ae>
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	2380      	movs	r3, #128	; 0x80
 800b490:	03db      	lsls	r3, r3, #15
 800b492:	4013      	ands	r3, r2
 800b494:	d009      	beq.n	800b4aa <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2280      	movs	r2, #128	; 0x80
 800b49c:	0352      	lsls	r2, r2, #13
 800b49e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	0018      	movs	r0, r3
 800b4a4:	f000 fee8 	bl	800c278 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4a8:	e027      	b.n	800b4fa <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	2280      	movs	r2, #128	; 0x80
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	d00d      	beq.n	800b4ce <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	2280      	movs	r2, #128	; 0x80
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	d009      	beq.n	800b4ce <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d01a      	beq.n	800b4f8 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	0010      	movs	r0, r2
 800b4ca:	4798      	blx	r3
    }
    return;
 800b4cc:	e014      	b.n	800b4f8 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	2240      	movs	r2, #64	; 0x40
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	d011      	beq.n	800b4fa <HAL_UART_IRQHandler+0x3fe>
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	2240      	movs	r2, #64	; 0x40
 800b4da:	4013      	ands	r3, r2
 800b4dc:	d00d      	beq.n	800b4fa <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f000 fdc6 	bl	800c072 <UART_EndTransmit_IT>
    return;
 800b4e6:	e008      	b.n	800b4fa <HAL_UART_IRQHandler+0x3fe>
      return;
 800b4e8:	46c0      	nop			; (mov r8, r8)
 800b4ea:	e006      	b.n	800b4fa <HAL_UART_IRQHandler+0x3fe>
    return;
 800b4ec:	46c0      	nop			; (mov r8, r8)
 800b4ee:	e004      	b.n	800b4fa <HAL_UART_IRQHandler+0x3fe>
      return;
 800b4f0:	46c0      	nop			; (mov r8, r8)
 800b4f2:	e002      	b.n	800b4fa <HAL_UART_IRQHandler+0x3fe>
      return;
 800b4f4:	46c0      	nop			; (mov r8, r8)
 800b4f6:	e000      	b.n	800b4fa <HAL_UART_IRQHandler+0x3fe>
    return;
 800b4f8:	46c0      	nop			; (mov r8, r8)
  }

}
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	b008      	add	sp, #32
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	fffffedf 	.word	0xfffffedf

0800b504 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b50c:	46c0      	nop			; (mov r8, r8)
 800b50e:	46bd      	mov	sp, r7
 800b510:	b002      	add	sp, #8
 800b512:	bd80      	pop	{r7, pc}

0800b514 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b51c:	46c0      	nop			; (mov r8, r8)
 800b51e:	46bd      	mov	sp, r7
 800b520:	b002      	add	sp, #8
 800b522:	bd80      	pop	{r7, pc}

0800b524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	000a      	movs	r2, r1
 800b52e:	1cbb      	adds	r3, r7, #2
 800b530:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b532:	46c0      	nop			; (mov r8, r8)
 800b534:	46bd      	mov	sp, r7
 800b536:	b002      	add	sp, #8
 800b538:	bd80      	pop	{r7, pc}
	...

0800b53c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b53c:	b5b0      	push	{r4, r5, r7, lr}
 800b53e:	b08e      	sub	sp, #56	; 0x38
 800b540:	af00      	add	r7, sp, #0
 800b542:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b544:	231a      	movs	r3, #26
 800b546:	2218      	movs	r2, #24
 800b548:	4694      	mov	ip, r2
 800b54a:	44bc      	add	ip, r7
 800b54c:	4463      	add	r3, ip
 800b54e:	2200      	movs	r2, #0
 800b550:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	689a      	ldr	r2, [r3, #8]
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	691b      	ldr	r3, [r3, #16]
 800b55a:	431a      	orrs	r2, r3
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	431a      	orrs	r2, r3
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	4313      	orrs	r3, r2
 800b568:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4ab0      	ldr	r2, [pc, #704]	; (800b834 <UART_SetConfig+0x2f8>)
 800b572:	4013      	ands	r3, r2
 800b574:	0019      	movs	r1, r3
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b57c:	430a      	orrs	r2, r1
 800b57e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	4aac      	ldr	r2, [pc, #688]	; (800b838 <UART_SetConfig+0x2fc>)
 800b588:	4013      	ands	r3, r2
 800b58a:	0019      	movs	r1, r3
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	68da      	ldr	r2, [r3, #12]
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	430a      	orrs	r2, r1
 800b596:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4aa6      	ldr	r2, [pc, #664]	; (800b83c <UART_SetConfig+0x300>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d004      	beq.n	800b5b2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	6a1b      	ldr	r3, [r3, #32]
 800b5ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	4aa1      	ldr	r2, [pc, #644]	; (800b840 <UART_SetConfig+0x304>)
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	0019      	movs	r1, r3
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5c4:	430a      	orrs	r2, r1
 800b5c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a9d      	ldr	r2, [pc, #628]	; (800b844 <UART_SetConfig+0x308>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d136      	bne.n	800b640 <UART_SetConfig+0x104>
 800b5d2:	4b9d      	ldr	r3, [pc, #628]	; (800b848 <UART_SetConfig+0x30c>)
 800b5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d6:	2203      	movs	r2, #3
 800b5d8:	4013      	ands	r3, r2
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d020      	beq.n	800b620 <UART_SetConfig+0xe4>
 800b5de:	d827      	bhi.n	800b630 <UART_SetConfig+0xf4>
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d00d      	beq.n	800b600 <UART_SetConfig+0xc4>
 800b5e4:	d824      	bhi.n	800b630 <UART_SetConfig+0xf4>
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d002      	beq.n	800b5f0 <UART_SetConfig+0xb4>
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d010      	beq.n	800b610 <UART_SetConfig+0xd4>
 800b5ee:	e01f      	b.n	800b630 <UART_SetConfig+0xf4>
 800b5f0:	231b      	movs	r3, #27
 800b5f2:	2218      	movs	r2, #24
 800b5f4:	4694      	mov	ip, r2
 800b5f6:	44bc      	add	ip, r7
 800b5f8:	4463      	add	r3, ip
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	701a      	strb	r2, [r3, #0]
 800b5fe:	e0c5      	b.n	800b78c <UART_SetConfig+0x250>
 800b600:	231b      	movs	r3, #27
 800b602:	2218      	movs	r2, #24
 800b604:	4694      	mov	ip, r2
 800b606:	44bc      	add	ip, r7
 800b608:	4463      	add	r3, ip
 800b60a:	2202      	movs	r2, #2
 800b60c:	701a      	strb	r2, [r3, #0]
 800b60e:	e0bd      	b.n	800b78c <UART_SetConfig+0x250>
 800b610:	231b      	movs	r3, #27
 800b612:	2218      	movs	r2, #24
 800b614:	4694      	mov	ip, r2
 800b616:	44bc      	add	ip, r7
 800b618:	4463      	add	r3, ip
 800b61a:	2204      	movs	r2, #4
 800b61c:	701a      	strb	r2, [r3, #0]
 800b61e:	e0b5      	b.n	800b78c <UART_SetConfig+0x250>
 800b620:	231b      	movs	r3, #27
 800b622:	2218      	movs	r2, #24
 800b624:	4694      	mov	ip, r2
 800b626:	44bc      	add	ip, r7
 800b628:	4463      	add	r3, ip
 800b62a:	2208      	movs	r2, #8
 800b62c:	701a      	strb	r2, [r3, #0]
 800b62e:	e0ad      	b.n	800b78c <UART_SetConfig+0x250>
 800b630:	231b      	movs	r3, #27
 800b632:	2218      	movs	r2, #24
 800b634:	4694      	mov	ip, r2
 800b636:	44bc      	add	ip, r7
 800b638:	4463      	add	r3, ip
 800b63a:	2210      	movs	r2, #16
 800b63c:	701a      	strb	r2, [r3, #0]
 800b63e:	e0a5      	b.n	800b78c <UART_SetConfig+0x250>
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a81      	ldr	r2, [pc, #516]	; (800b84c <UART_SetConfig+0x310>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d136      	bne.n	800b6b8 <UART_SetConfig+0x17c>
 800b64a:	4b7f      	ldr	r3, [pc, #508]	; (800b848 <UART_SetConfig+0x30c>)
 800b64c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b64e:	220c      	movs	r2, #12
 800b650:	4013      	ands	r3, r2
 800b652:	2b0c      	cmp	r3, #12
 800b654:	d020      	beq.n	800b698 <UART_SetConfig+0x15c>
 800b656:	d827      	bhi.n	800b6a8 <UART_SetConfig+0x16c>
 800b658:	2b08      	cmp	r3, #8
 800b65a:	d00d      	beq.n	800b678 <UART_SetConfig+0x13c>
 800b65c:	d824      	bhi.n	800b6a8 <UART_SetConfig+0x16c>
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <UART_SetConfig+0x12c>
 800b662:	2b04      	cmp	r3, #4
 800b664:	d010      	beq.n	800b688 <UART_SetConfig+0x14c>
 800b666:	e01f      	b.n	800b6a8 <UART_SetConfig+0x16c>
 800b668:	231b      	movs	r3, #27
 800b66a:	2218      	movs	r2, #24
 800b66c:	4694      	mov	ip, r2
 800b66e:	44bc      	add	ip, r7
 800b670:	4463      	add	r3, ip
 800b672:	2200      	movs	r2, #0
 800b674:	701a      	strb	r2, [r3, #0]
 800b676:	e089      	b.n	800b78c <UART_SetConfig+0x250>
 800b678:	231b      	movs	r3, #27
 800b67a:	2218      	movs	r2, #24
 800b67c:	4694      	mov	ip, r2
 800b67e:	44bc      	add	ip, r7
 800b680:	4463      	add	r3, ip
 800b682:	2202      	movs	r2, #2
 800b684:	701a      	strb	r2, [r3, #0]
 800b686:	e081      	b.n	800b78c <UART_SetConfig+0x250>
 800b688:	231b      	movs	r3, #27
 800b68a:	2218      	movs	r2, #24
 800b68c:	4694      	mov	ip, r2
 800b68e:	44bc      	add	ip, r7
 800b690:	4463      	add	r3, ip
 800b692:	2204      	movs	r2, #4
 800b694:	701a      	strb	r2, [r3, #0]
 800b696:	e079      	b.n	800b78c <UART_SetConfig+0x250>
 800b698:	231b      	movs	r3, #27
 800b69a:	2218      	movs	r2, #24
 800b69c:	4694      	mov	ip, r2
 800b69e:	44bc      	add	ip, r7
 800b6a0:	4463      	add	r3, ip
 800b6a2:	2208      	movs	r2, #8
 800b6a4:	701a      	strb	r2, [r3, #0]
 800b6a6:	e071      	b.n	800b78c <UART_SetConfig+0x250>
 800b6a8:	231b      	movs	r3, #27
 800b6aa:	2218      	movs	r2, #24
 800b6ac:	4694      	mov	ip, r2
 800b6ae:	44bc      	add	ip, r7
 800b6b0:	4463      	add	r3, ip
 800b6b2:	2210      	movs	r2, #16
 800b6b4:	701a      	strb	r2, [r3, #0]
 800b6b6:	e069      	b.n	800b78c <UART_SetConfig+0x250>
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a64      	ldr	r2, [pc, #400]	; (800b850 <UART_SetConfig+0x314>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d107      	bne.n	800b6d2 <UART_SetConfig+0x196>
 800b6c2:	231b      	movs	r3, #27
 800b6c4:	2218      	movs	r2, #24
 800b6c6:	4694      	mov	ip, r2
 800b6c8:	44bc      	add	ip, r7
 800b6ca:	4463      	add	r3, ip
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	701a      	strb	r2, [r3, #0]
 800b6d0:	e05c      	b.n	800b78c <UART_SetConfig+0x250>
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a5f      	ldr	r2, [pc, #380]	; (800b854 <UART_SetConfig+0x318>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d107      	bne.n	800b6ec <UART_SetConfig+0x1b0>
 800b6dc:	231b      	movs	r3, #27
 800b6de:	2218      	movs	r2, #24
 800b6e0:	4694      	mov	ip, r2
 800b6e2:	44bc      	add	ip, r7
 800b6e4:	4463      	add	r3, ip
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	e04f      	b.n	800b78c <UART_SetConfig+0x250>
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a52      	ldr	r2, [pc, #328]	; (800b83c <UART_SetConfig+0x300>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d143      	bne.n	800b77e <UART_SetConfig+0x242>
 800b6f6:	4b54      	ldr	r3, [pc, #336]	; (800b848 <UART_SetConfig+0x30c>)
 800b6f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6fa:	23c0      	movs	r3, #192	; 0xc0
 800b6fc:	011b      	lsls	r3, r3, #4
 800b6fe:	4013      	ands	r3, r2
 800b700:	22c0      	movs	r2, #192	; 0xc0
 800b702:	0112      	lsls	r2, r2, #4
 800b704:	4293      	cmp	r3, r2
 800b706:	d02a      	beq.n	800b75e <UART_SetConfig+0x222>
 800b708:	22c0      	movs	r2, #192	; 0xc0
 800b70a:	0112      	lsls	r2, r2, #4
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d82e      	bhi.n	800b76e <UART_SetConfig+0x232>
 800b710:	2280      	movs	r2, #128	; 0x80
 800b712:	0112      	lsls	r2, r2, #4
 800b714:	4293      	cmp	r3, r2
 800b716:	d012      	beq.n	800b73e <UART_SetConfig+0x202>
 800b718:	2280      	movs	r2, #128	; 0x80
 800b71a:	0112      	lsls	r2, r2, #4
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d826      	bhi.n	800b76e <UART_SetConfig+0x232>
 800b720:	2b00      	cmp	r3, #0
 800b722:	d004      	beq.n	800b72e <UART_SetConfig+0x1f2>
 800b724:	2280      	movs	r2, #128	; 0x80
 800b726:	00d2      	lsls	r2, r2, #3
 800b728:	4293      	cmp	r3, r2
 800b72a:	d010      	beq.n	800b74e <UART_SetConfig+0x212>
 800b72c:	e01f      	b.n	800b76e <UART_SetConfig+0x232>
 800b72e:	231b      	movs	r3, #27
 800b730:	2218      	movs	r2, #24
 800b732:	4694      	mov	ip, r2
 800b734:	44bc      	add	ip, r7
 800b736:	4463      	add	r3, ip
 800b738:	2200      	movs	r2, #0
 800b73a:	701a      	strb	r2, [r3, #0]
 800b73c:	e026      	b.n	800b78c <UART_SetConfig+0x250>
 800b73e:	231b      	movs	r3, #27
 800b740:	2218      	movs	r2, #24
 800b742:	4694      	mov	ip, r2
 800b744:	44bc      	add	ip, r7
 800b746:	4463      	add	r3, ip
 800b748:	2202      	movs	r2, #2
 800b74a:	701a      	strb	r2, [r3, #0]
 800b74c:	e01e      	b.n	800b78c <UART_SetConfig+0x250>
 800b74e:	231b      	movs	r3, #27
 800b750:	2218      	movs	r2, #24
 800b752:	4694      	mov	ip, r2
 800b754:	44bc      	add	ip, r7
 800b756:	4463      	add	r3, ip
 800b758:	2204      	movs	r2, #4
 800b75a:	701a      	strb	r2, [r3, #0]
 800b75c:	e016      	b.n	800b78c <UART_SetConfig+0x250>
 800b75e:	231b      	movs	r3, #27
 800b760:	2218      	movs	r2, #24
 800b762:	4694      	mov	ip, r2
 800b764:	44bc      	add	ip, r7
 800b766:	4463      	add	r3, ip
 800b768:	2208      	movs	r2, #8
 800b76a:	701a      	strb	r2, [r3, #0]
 800b76c:	e00e      	b.n	800b78c <UART_SetConfig+0x250>
 800b76e:	231b      	movs	r3, #27
 800b770:	2218      	movs	r2, #24
 800b772:	4694      	mov	ip, r2
 800b774:	44bc      	add	ip, r7
 800b776:	4463      	add	r3, ip
 800b778:	2210      	movs	r2, #16
 800b77a:	701a      	strb	r2, [r3, #0]
 800b77c:	e006      	b.n	800b78c <UART_SetConfig+0x250>
 800b77e:	231b      	movs	r3, #27
 800b780:	2218      	movs	r2, #24
 800b782:	4694      	mov	ip, r2
 800b784:	44bc      	add	ip, r7
 800b786:	4463      	add	r3, ip
 800b788:	2210      	movs	r2, #16
 800b78a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a2a      	ldr	r2, [pc, #168]	; (800b83c <UART_SetConfig+0x300>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d000      	beq.n	800b798 <UART_SetConfig+0x25c>
 800b796:	e09e      	b.n	800b8d6 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b798:	231b      	movs	r3, #27
 800b79a:	2218      	movs	r2, #24
 800b79c:	4694      	mov	ip, r2
 800b79e:	44bc      	add	ip, r7
 800b7a0:	4463      	add	r3, ip
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b08      	cmp	r3, #8
 800b7a6:	d01d      	beq.n	800b7e4 <UART_SetConfig+0x2a8>
 800b7a8:	dc20      	bgt.n	800b7ec <UART_SetConfig+0x2b0>
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	d015      	beq.n	800b7da <UART_SetConfig+0x29e>
 800b7ae:	dc1d      	bgt.n	800b7ec <UART_SetConfig+0x2b0>
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <UART_SetConfig+0x27e>
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d005      	beq.n	800b7c4 <UART_SetConfig+0x288>
 800b7b8:	e018      	b.n	800b7ec <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7ba:	f7fe f80f 	bl	80097dc <HAL_RCC_GetPCLK1Freq>
 800b7be:	0003      	movs	r3, r0
 800b7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7c2:	e01d      	b.n	800b800 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7c4:	4b20      	ldr	r3, [pc, #128]	; (800b848 <UART_SetConfig+0x30c>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2210      	movs	r2, #16
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	d002      	beq.n	800b7d4 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b7ce:	4b22      	ldr	r3, [pc, #136]	; (800b858 <UART_SetConfig+0x31c>)
 800b7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7d2:	e015      	b.n	800b800 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800b7d4:	4b21      	ldr	r3, [pc, #132]	; (800b85c <UART_SetConfig+0x320>)
 800b7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7d8:	e012      	b.n	800b800 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7da:	f7fd ff4f 	bl	800967c <HAL_RCC_GetSysClockFreq>
 800b7de:	0003      	movs	r3, r0
 800b7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7e2:	e00d      	b.n	800b800 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7e4:	2380      	movs	r3, #128	; 0x80
 800b7e6:	021b      	lsls	r3, r3, #8
 800b7e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7ea:	e009      	b.n	800b800 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b7f0:	231a      	movs	r3, #26
 800b7f2:	2218      	movs	r2, #24
 800b7f4:	4694      	mov	ip, r2
 800b7f6:	44bc      	add	ip, r7
 800b7f8:	4463      	add	r3, ip
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	701a      	strb	r2, [r3, #0]
        break;
 800b7fe:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	2b00      	cmp	r3, #0
 800b804:	d100      	bne.n	800b808 <UART_SetConfig+0x2cc>
 800b806:	e13c      	b.n	800ba82 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	0013      	movs	r3, r2
 800b80e:	005b      	lsls	r3, r3, #1
 800b810:	189b      	adds	r3, r3, r2
 800b812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b814:	429a      	cmp	r2, r3
 800b816:	d305      	bcc.n	800b824 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b81e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b820:	429a      	cmp	r2, r3
 800b822:	d91d      	bls.n	800b860 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800b824:	231a      	movs	r3, #26
 800b826:	2218      	movs	r2, #24
 800b828:	4694      	mov	ip, r2
 800b82a:	44bc      	add	ip, r7
 800b82c:	4463      	add	r3, ip
 800b82e:	2201      	movs	r2, #1
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	e126      	b.n	800ba82 <UART_SetConfig+0x546>
 800b834:	efff69f3 	.word	0xefff69f3
 800b838:	ffffcfff 	.word	0xffffcfff
 800b83c:	40004800 	.word	0x40004800
 800b840:	fffff4ff 	.word	0xfffff4ff
 800b844:	40013800 	.word	0x40013800
 800b848:	40021000 	.word	0x40021000
 800b84c:	40004400 	.word	0x40004400
 800b850:	40004c00 	.word	0x40004c00
 800b854:	40005000 	.word	0x40005000
 800b858:	003d0900 	.word	0x003d0900
 800b85c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b862:	613b      	str	r3, [r7, #16]
 800b864:	2300      	movs	r3, #0
 800b866:	617b      	str	r3, [r7, #20]
 800b868:	6939      	ldr	r1, [r7, #16]
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	000b      	movs	r3, r1
 800b86e:	0e1b      	lsrs	r3, r3, #24
 800b870:	0010      	movs	r0, r2
 800b872:	0205      	lsls	r5, r0, #8
 800b874:	431d      	orrs	r5, r3
 800b876:	000b      	movs	r3, r1
 800b878:	021c      	lsls	r4, r3, #8
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	085b      	lsrs	r3, r3, #1
 800b880:	60bb      	str	r3, [r7, #8]
 800b882:	2300      	movs	r3, #0
 800b884:	60fb      	str	r3, [r7, #12]
 800b886:	68b8      	ldr	r0, [r7, #8]
 800b888:	68f9      	ldr	r1, [r7, #12]
 800b88a:	1900      	adds	r0, r0, r4
 800b88c:	4169      	adcs	r1, r5
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	603b      	str	r3, [r7, #0]
 800b894:	2300      	movs	r3, #0
 800b896:	607b      	str	r3, [r7, #4]
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f7f4 fe58 	bl	8000550 <__aeabi_uldivmod>
 800b8a0:	0002      	movs	r2, r0
 800b8a2:	000b      	movs	r3, r1
 800b8a4:	0013      	movs	r3, r2
 800b8a6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8aa:	23c0      	movs	r3, #192	; 0xc0
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d309      	bcc.n	800b8c6 <UART_SetConfig+0x38a>
 800b8b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8b4:	2380      	movs	r3, #128	; 0x80
 800b8b6:	035b      	lsls	r3, r3, #13
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d204      	bcs.n	800b8c6 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8c2:	60da      	str	r2, [r3, #12]
 800b8c4:	e0dd      	b.n	800ba82 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800b8c6:	231a      	movs	r3, #26
 800b8c8:	2218      	movs	r2, #24
 800b8ca:	4694      	mov	ip, r2
 800b8cc:	44bc      	add	ip, r7
 800b8ce:	4463      	add	r3, ip
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	701a      	strb	r2, [r3, #0]
 800b8d4:	e0d5      	b.n	800ba82 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	69da      	ldr	r2, [r3, #28]
 800b8da:	2380      	movs	r3, #128	; 0x80
 800b8dc:	021b      	lsls	r3, r3, #8
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d000      	beq.n	800b8e4 <UART_SetConfig+0x3a8>
 800b8e2:	e074      	b.n	800b9ce <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800b8e4:	231b      	movs	r3, #27
 800b8e6:	2218      	movs	r2, #24
 800b8e8:	4694      	mov	ip, r2
 800b8ea:	44bc      	add	ip, r7
 800b8ec:	4463      	add	r3, ip
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	2b08      	cmp	r3, #8
 800b8f2:	d822      	bhi.n	800b93a <UART_SetConfig+0x3fe>
 800b8f4:	009a      	lsls	r2, r3, #2
 800b8f6:	4b6b      	ldr	r3, [pc, #428]	; (800baa4 <UART_SetConfig+0x568>)
 800b8f8:	18d3      	adds	r3, r2, r3
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8fe:	f7fd ff6d 	bl	80097dc <HAL_RCC_GetPCLK1Freq>
 800b902:	0003      	movs	r3, r0
 800b904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b906:	e022      	b.n	800b94e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b908:	f7fd ff7e 	bl	8009808 <HAL_RCC_GetPCLK2Freq>
 800b90c:	0003      	movs	r3, r0
 800b90e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b910:	e01d      	b.n	800b94e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b912:	4b65      	ldr	r3, [pc, #404]	; (800baa8 <UART_SetConfig+0x56c>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2210      	movs	r2, #16
 800b918:	4013      	ands	r3, r2
 800b91a:	d002      	beq.n	800b922 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b91c:	4b63      	ldr	r3, [pc, #396]	; (800baac <UART_SetConfig+0x570>)
 800b91e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b920:	e015      	b.n	800b94e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800b922:	4b63      	ldr	r3, [pc, #396]	; (800bab0 <UART_SetConfig+0x574>)
 800b924:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b926:	e012      	b.n	800b94e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b928:	f7fd fea8 	bl	800967c <HAL_RCC_GetSysClockFreq>
 800b92c:	0003      	movs	r3, r0
 800b92e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b930:	e00d      	b.n	800b94e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b932:	2380      	movs	r3, #128	; 0x80
 800b934:	021b      	lsls	r3, r3, #8
 800b936:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b938:	e009      	b.n	800b94e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b93e:	231a      	movs	r3, #26
 800b940:	2218      	movs	r2, #24
 800b942:	4694      	mov	ip, r2
 800b944:	44bc      	add	ip, r7
 800b946:	4463      	add	r3, ip
 800b948:	2201      	movs	r2, #1
 800b94a:	701a      	strb	r2, [r3, #0]
        break;
 800b94c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b950:	2b00      	cmp	r3, #0
 800b952:	d100      	bne.n	800b956 <UART_SetConfig+0x41a>
 800b954:	e095      	b.n	800ba82 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b958:	005a      	lsls	r2, r3, #1
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	085b      	lsrs	r3, r3, #1
 800b960:	18d2      	adds	r2, r2, r3
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	0019      	movs	r1, r3
 800b968:	0010      	movs	r0, r2
 800b96a:	f7f4 fbdf 	bl	800012c <__udivsi3>
 800b96e:	0003      	movs	r3, r0
 800b970:	b29b      	uxth	r3, r3
 800b972:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b976:	2b0f      	cmp	r3, #15
 800b978:	d921      	bls.n	800b9be <UART_SetConfig+0x482>
 800b97a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b97c:	2380      	movs	r3, #128	; 0x80
 800b97e:	025b      	lsls	r3, r3, #9
 800b980:	429a      	cmp	r2, r3
 800b982:	d21c      	bcs.n	800b9be <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	b29a      	uxth	r2, r3
 800b988:	200e      	movs	r0, #14
 800b98a:	2418      	movs	r4, #24
 800b98c:	193b      	adds	r3, r7, r4
 800b98e:	181b      	adds	r3, r3, r0
 800b990:	210f      	movs	r1, #15
 800b992:	438a      	bics	r2, r1
 800b994:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	085b      	lsrs	r3, r3, #1
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	2207      	movs	r2, #7
 800b99e:	4013      	ands	r3, r2
 800b9a0:	b299      	uxth	r1, r3
 800b9a2:	193b      	adds	r3, r7, r4
 800b9a4:	181b      	adds	r3, r3, r0
 800b9a6:	193a      	adds	r2, r7, r4
 800b9a8:	1812      	adds	r2, r2, r0
 800b9aa:	8812      	ldrh	r2, [r2, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	193a      	adds	r2, r7, r4
 800b9b6:	1812      	adds	r2, r2, r0
 800b9b8:	8812      	ldrh	r2, [r2, #0]
 800b9ba:	60da      	str	r2, [r3, #12]
 800b9bc:	e061      	b.n	800ba82 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b9be:	231a      	movs	r3, #26
 800b9c0:	2218      	movs	r2, #24
 800b9c2:	4694      	mov	ip, r2
 800b9c4:	44bc      	add	ip, r7
 800b9c6:	4463      	add	r3, ip
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	701a      	strb	r2, [r3, #0]
 800b9cc:	e059      	b.n	800ba82 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9ce:	231b      	movs	r3, #27
 800b9d0:	2218      	movs	r2, #24
 800b9d2:	4694      	mov	ip, r2
 800b9d4:	44bc      	add	ip, r7
 800b9d6:	4463      	add	r3, ip
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	2b08      	cmp	r3, #8
 800b9dc:	d822      	bhi.n	800ba24 <UART_SetConfig+0x4e8>
 800b9de:	009a      	lsls	r2, r3, #2
 800b9e0:	4b34      	ldr	r3, [pc, #208]	; (800bab4 <UART_SetConfig+0x578>)
 800b9e2:	18d3      	adds	r3, r2, r3
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9e8:	f7fd fef8 	bl	80097dc <HAL_RCC_GetPCLK1Freq>
 800b9ec:	0003      	movs	r3, r0
 800b9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b9f0:	e022      	b.n	800ba38 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9f2:	f7fd ff09 	bl	8009808 <HAL_RCC_GetPCLK2Freq>
 800b9f6:	0003      	movs	r3, r0
 800b9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b9fa:	e01d      	b.n	800ba38 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9fc:	4b2a      	ldr	r3, [pc, #168]	; (800baa8 <UART_SetConfig+0x56c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2210      	movs	r2, #16
 800ba02:	4013      	ands	r3, r2
 800ba04:	d002      	beq.n	800ba0c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ba06:	4b29      	ldr	r3, [pc, #164]	; (800baac <UART_SetConfig+0x570>)
 800ba08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba0a:	e015      	b.n	800ba38 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800ba0c:	4b28      	ldr	r3, [pc, #160]	; (800bab0 <UART_SetConfig+0x574>)
 800ba0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba10:	e012      	b.n	800ba38 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba12:	f7fd fe33 	bl	800967c <HAL_RCC_GetSysClockFreq>
 800ba16:	0003      	movs	r3, r0
 800ba18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba1a:	e00d      	b.n	800ba38 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba1c:	2380      	movs	r3, #128	; 0x80
 800ba1e:	021b      	lsls	r3, r3, #8
 800ba20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba22:	e009      	b.n	800ba38 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800ba24:	2300      	movs	r3, #0
 800ba26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ba28:	231a      	movs	r3, #26
 800ba2a:	2218      	movs	r2, #24
 800ba2c:	4694      	mov	ip, r2
 800ba2e:	44bc      	add	ip, r7
 800ba30:	4463      	add	r3, ip
 800ba32:	2201      	movs	r2, #1
 800ba34:	701a      	strb	r2, [r3, #0]
        break;
 800ba36:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ba38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d021      	beq.n	800ba82 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	085a      	lsrs	r2, r3, #1
 800ba44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba46:	18d2      	adds	r2, r2, r3
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	0019      	movs	r1, r3
 800ba4e:	0010      	movs	r0, r2
 800ba50:	f7f4 fb6c 	bl	800012c <__udivsi3>
 800ba54:	0003      	movs	r3, r0
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	2b0f      	cmp	r3, #15
 800ba5e:	d909      	bls.n	800ba74 <UART_SetConfig+0x538>
 800ba60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba62:	2380      	movs	r3, #128	; 0x80
 800ba64:	025b      	lsls	r3, r3, #9
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d204      	bcs.n	800ba74 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba70:	60da      	str	r2, [r3, #12]
 800ba72:	e006      	b.n	800ba82 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800ba74:	231a      	movs	r3, #26
 800ba76:	2218      	movs	r2, #24
 800ba78:	4694      	mov	ip, r2
 800ba7a:	44bc      	add	ip, r7
 800ba7c:	4463      	add	r3, ip
 800ba7e:	2201      	movs	r2, #1
 800ba80:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	2200      	movs	r2, #0
 800ba86:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ba8e:	231a      	movs	r3, #26
 800ba90:	2218      	movs	r2, #24
 800ba92:	4694      	mov	ip, r2
 800ba94:	44bc      	add	ip, r7
 800ba96:	4463      	add	r3, ip
 800ba98:	781b      	ldrb	r3, [r3, #0]
}
 800ba9a:	0018      	movs	r0, r3
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	b00e      	add	sp, #56	; 0x38
 800baa0:	bdb0      	pop	{r4, r5, r7, pc}
 800baa2:	46c0      	nop			; (mov r8, r8)
 800baa4:	0801f200 	.word	0x0801f200
 800baa8:	40021000 	.word	0x40021000
 800baac:	003d0900 	.word	0x003d0900
 800bab0:	00f42400 	.word	0x00f42400
 800bab4:	0801f224 	.word	0x0801f224

0800bab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac4:	2201      	movs	r2, #1
 800bac6:	4013      	ands	r3, r2
 800bac8:	d00b      	beq.n	800bae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	4a4a      	ldr	r2, [pc, #296]	; (800bbfc <UART_AdvFeatureConfig+0x144>)
 800bad2:	4013      	ands	r3, r2
 800bad4:	0019      	movs	r1, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	430a      	orrs	r2, r1
 800bae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae6:	2202      	movs	r2, #2
 800bae8:	4013      	ands	r3, r2
 800baea:	d00b      	beq.n	800bb04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	4a43      	ldr	r2, [pc, #268]	; (800bc00 <UART_AdvFeatureConfig+0x148>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	0019      	movs	r1, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	430a      	orrs	r2, r1
 800bb02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	2204      	movs	r2, #4
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	d00b      	beq.n	800bb26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	4a3b      	ldr	r2, [pc, #236]	; (800bc04 <UART_AdvFeatureConfig+0x14c>)
 800bb16:	4013      	ands	r3, r2
 800bb18:	0019      	movs	r1, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	430a      	orrs	r2, r1
 800bb24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2a:	2208      	movs	r2, #8
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	d00b      	beq.n	800bb48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	4a34      	ldr	r2, [pc, #208]	; (800bc08 <UART_AdvFeatureConfig+0x150>)
 800bb38:	4013      	ands	r3, r2
 800bb3a:	0019      	movs	r1, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	430a      	orrs	r2, r1
 800bb46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	2210      	movs	r2, #16
 800bb4e:	4013      	ands	r3, r2
 800bb50:	d00b      	beq.n	800bb6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	4a2c      	ldr	r2, [pc, #176]	; (800bc0c <UART_AdvFeatureConfig+0x154>)
 800bb5a:	4013      	ands	r3, r2
 800bb5c:	0019      	movs	r1, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	430a      	orrs	r2, r1
 800bb68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6e:	2220      	movs	r2, #32
 800bb70:	4013      	ands	r3, r2
 800bb72:	d00b      	beq.n	800bb8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	4a25      	ldr	r2, [pc, #148]	; (800bc10 <UART_AdvFeatureConfig+0x158>)
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	0019      	movs	r1, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	430a      	orrs	r2, r1
 800bb8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	2240      	movs	r2, #64	; 0x40
 800bb92:	4013      	ands	r3, r2
 800bb94:	d01d      	beq.n	800bbd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	4a1d      	ldr	r2, [pc, #116]	; (800bc14 <UART_AdvFeatureConfig+0x15c>)
 800bb9e:	4013      	ands	r3, r2
 800bba0:	0019      	movs	r1, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	430a      	orrs	r2, r1
 800bbac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bbb2:	2380      	movs	r3, #128	; 0x80
 800bbb4:	035b      	lsls	r3, r3, #13
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d10b      	bne.n	800bbd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	4a15      	ldr	r2, [pc, #84]	; (800bc18 <UART_AdvFeatureConfig+0x160>)
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	0019      	movs	r1, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	430a      	orrs	r2, r1
 800bbd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd6:	2280      	movs	r2, #128	; 0x80
 800bbd8:	4013      	ands	r3, r2
 800bbda:	d00b      	beq.n	800bbf4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	4a0e      	ldr	r2, [pc, #56]	; (800bc1c <UART_AdvFeatureConfig+0x164>)
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	0019      	movs	r1, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	605a      	str	r2, [r3, #4]
  }
}
 800bbf4:	46c0      	nop			; (mov r8, r8)
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	b002      	add	sp, #8
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	fffdffff 	.word	0xfffdffff
 800bc00:	fffeffff 	.word	0xfffeffff
 800bc04:	fffbffff 	.word	0xfffbffff
 800bc08:	ffff7fff 	.word	0xffff7fff
 800bc0c:	ffffefff 	.word	0xffffefff
 800bc10:	ffffdfff 	.word	0xffffdfff
 800bc14:	ffefffff 	.word	0xffefffff
 800bc18:	ff9fffff 	.word	0xff9fffff
 800bc1c:	fff7ffff 	.word	0xfff7ffff

0800bc20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2280      	movs	r2, #128	; 0x80
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc30:	f7f9 fadf 	bl	80051f2 <HAL_GetTick>
 800bc34:	0003      	movs	r3, r0
 800bc36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2208      	movs	r2, #8
 800bc40:	4013      	ands	r3, r2
 800bc42:	2b08      	cmp	r3, #8
 800bc44:	d10c      	bne.n	800bc60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2280      	movs	r2, #128	; 0x80
 800bc4a:	0391      	lsls	r1, r2, #14
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	4a17      	ldr	r2, [pc, #92]	; (800bcac <UART_CheckIdleState+0x8c>)
 800bc50:	9200      	str	r2, [sp, #0]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f000 f82c 	bl	800bcb0 <UART_WaitOnFlagUntilTimeout>
 800bc58:	1e03      	subs	r3, r0, #0
 800bc5a:	d001      	beq.n	800bc60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e021      	b.n	800bca4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2204      	movs	r2, #4
 800bc68:	4013      	ands	r3, r2
 800bc6a:	2b04      	cmp	r3, #4
 800bc6c:	d10c      	bne.n	800bc88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2280      	movs	r2, #128	; 0x80
 800bc72:	03d1      	lsls	r1, r2, #15
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	4a0d      	ldr	r2, [pc, #52]	; (800bcac <UART_CheckIdleState+0x8c>)
 800bc78:	9200      	str	r2, [sp, #0]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f000 f818 	bl	800bcb0 <UART_WaitOnFlagUntilTimeout>
 800bc80:	1e03      	subs	r3, r0, #0
 800bc82:	d001      	beq.n	800bc88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc84:	2303      	movs	r3, #3
 800bc86:	e00d      	b.n	800bca4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2220      	movs	r2, #32
 800bc92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2274      	movs	r2, #116	; 0x74
 800bc9e:	2100      	movs	r1, #0
 800bca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	0018      	movs	r0, r3
 800bca6:	46bd      	mov	sp, r7
 800bca8:	b004      	add	sp, #16
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	01ffffff 	.word	0x01ffffff

0800bcb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	603b      	str	r3, [r7, #0]
 800bcbc:	1dfb      	adds	r3, r7, #7
 800bcbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcc0:	e05e      	b.n	800bd80 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	d05b      	beq.n	800bd80 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcc8:	f7f9 fa93 	bl	80051f2 <HAL_GetTick>
 800bccc:	0002      	movs	r2, r0
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	69ba      	ldr	r2, [r7, #24]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d302      	bcc.n	800bcde <UART_WaitOnFlagUntilTimeout+0x2e>
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d11b      	bne.n	800bd16 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	492f      	ldr	r1, [pc, #188]	; (800bda8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800bcea:	400a      	ands	r2, r1
 800bcec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	689a      	ldr	r2, [r3, #8]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	438a      	bics	r2, r1
 800bcfc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2220      	movs	r2, #32
 800bd02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2220      	movs	r2, #32
 800bd08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2274      	movs	r2, #116	; 0x74
 800bd0e:	2100      	movs	r1, #0
 800bd10:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bd12:	2303      	movs	r3, #3
 800bd14:	e044      	b.n	800bda0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2204      	movs	r2, #4
 800bd1e:	4013      	ands	r3, r2
 800bd20:	d02e      	beq.n	800bd80 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	69da      	ldr	r2, [r3, #28]
 800bd28:	2380      	movs	r3, #128	; 0x80
 800bd2a:	011b      	lsls	r3, r3, #4
 800bd2c:	401a      	ands	r2, r3
 800bd2e:	2380      	movs	r3, #128	; 0x80
 800bd30:	011b      	lsls	r3, r3, #4
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d124      	bne.n	800bd80 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2280      	movs	r2, #128	; 0x80
 800bd3c:	0112      	lsls	r2, r2, #4
 800bd3e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4917      	ldr	r1, [pc, #92]	; (800bda8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800bd4c:	400a      	ands	r2, r1
 800bd4e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	689a      	ldr	r2, [r3, #8]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2101      	movs	r1, #1
 800bd5c:	438a      	bics	r2, r1
 800bd5e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2220      	movs	r2, #32
 800bd64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2220      	movs	r2, #32
 800bd6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2280      	movs	r2, #128	; 0x80
 800bd70:	2120      	movs	r1, #32
 800bd72:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2274      	movs	r2, #116	; 0x74
 800bd78:	2100      	movs	r1, #0
 800bd7a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	e00f      	b.n	800bda0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	69db      	ldr	r3, [r3, #28]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	4013      	ands	r3, r2
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	425a      	negs	r2, r3
 800bd90:	4153      	adcs	r3, r2
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	001a      	movs	r2, r3
 800bd96:	1dfb      	adds	r3, r7, #7
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d091      	beq.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	0018      	movs	r0, r3
 800bda2:	46bd      	mov	sp, r7
 800bda4:	b004      	add	sp, #16
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	fffffe5f 	.word	0xfffffe5f

0800bdac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	1dbb      	adds	r3, r7, #6
 800bdb8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	1dba      	adds	r2, r7, #6
 800bdc4:	2158      	movs	r1, #88	; 0x58
 800bdc6:	8812      	ldrh	r2, [r2, #0]
 800bdc8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	1dba      	adds	r2, r7, #6
 800bdce:	215a      	movs	r1, #90	; 0x5a
 800bdd0:	8812      	ldrh	r2, [r2, #0]
 800bdd2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	689a      	ldr	r2, [r3, #8]
 800bdde:	2380      	movs	r3, #128	; 0x80
 800bde0:	015b      	lsls	r3, r3, #5
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d10d      	bne.n	800be02 <UART_Start_Receive_IT+0x56>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d104      	bne.n	800bdf8 <UART_Start_Receive_IT+0x4c>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	225c      	movs	r2, #92	; 0x5c
 800bdf2:	4932      	ldr	r1, [pc, #200]	; (800bebc <UART_Start_Receive_IT+0x110>)
 800bdf4:	5299      	strh	r1, [r3, r2]
 800bdf6:	e02e      	b.n	800be56 <UART_Start_Receive_IT+0xaa>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	225c      	movs	r2, #92	; 0x5c
 800bdfc:	21ff      	movs	r1, #255	; 0xff
 800bdfe:	5299      	strh	r1, [r3, r2]
 800be00:	e029      	b.n	800be56 <UART_Start_Receive_IT+0xaa>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10d      	bne.n	800be26 <UART_Start_Receive_IT+0x7a>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d104      	bne.n	800be1c <UART_Start_Receive_IT+0x70>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	225c      	movs	r2, #92	; 0x5c
 800be16:	21ff      	movs	r1, #255	; 0xff
 800be18:	5299      	strh	r1, [r3, r2]
 800be1a:	e01c      	b.n	800be56 <UART_Start_Receive_IT+0xaa>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	225c      	movs	r2, #92	; 0x5c
 800be20:	217f      	movs	r1, #127	; 0x7f
 800be22:	5299      	strh	r1, [r3, r2]
 800be24:	e017      	b.n	800be56 <UART_Start_Receive_IT+0xaa>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	689a      	ldr	r2, [r3, #8]
 800be2a:	2380      	movs	r3, #128	; 0x80
 800be2c:	055b      	lsls	r3, r3, #21
 800be2e:	429a      	cmp	r2, r3
 800be30:	d10d      	bne.n	800be4e <UART_Start_Receive_IT+0xa2>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d104      	bne.n	800be44 <UART_Start_Receive_IT+0x98>
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	225c      	movs	r2, #92	; 0x5c
 800be3e:	217f      	movs	r1, #127	; 0x7f
 800be40:	5299      	strh	r1, [r3, r2]
 800be42:	e008      	b.n	800be56 <UART_Start_Receive_IT+0xaa>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	225c      	movs	r2, #92	; 0x5c
 800be48:	213f      	movs	r1, #63	; 0x3f
 800be4a:	5299      	strh	r1, [r3, r2]
 800be4c:	e003      	b.n	800be56 <UART_Start_Receive_IT+0xaa>
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	225c      	movs	r2, #92	; 0x5c
 800be52:	2100      	movs	r1, #0
 800be54:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2280      	movs	r2, #128	; 0x80
 800be5a:	2100      	movs	r1, #0
 800be5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2222      	movs	r2, #34	; 0x22
 800be62:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	689a      	ldr	r2, [r3, #8]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2101      	movs	r1, #1
 800be70:	430a      	orrs	r2, r1
 800be72:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	689a      	ldr	r2, [r3, #8]
 800be78:	2380      	movs	r3, #128	; 0x80
 800be7a:	015b      	lsls	r3, r3, #5
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d107      	bne.n	800be90 <UART_Start_Receive_IT+0xe4>
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d103      	bne.n	800be90 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	4a0d      	ldr	r2, [pc, #52]	; (800bec0 <UART_Start_Receive_IT+0x114>)
 800be8c:	665a      	str	r2, [r3, #100]	; 0x64
 800be8e:	e002      	b.n	800be96 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	4a0c      	ldr	r2, [pc, #48]	; (800bec4 <UART_Start_Receive_IT+0x118>)
 800be94:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2274      	movs	r2, #116	; 0x74
 800be9a:	2100      	movs	r1, #0
 800be9c:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2190      	movs	r1, #144	; 0x90
 800beaa:	0049      	lsls	r1, r1, #1
 800beac:	430a      	orrs	r2, r1
 800beae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	0018      	movs	r0, r3
 800beb4:	46bd      	mov	sp, r7
 800beb6:	b004      	add	sp, #16
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	46c0      	nop			; (mov r8, r8)
 800bebc:	000001ff 	.word	0x000001ff
 800bec0:	0800c191 	.word	0x0800c191
 800bec4:	0800c0a9 	.word	0x0800c0a9

0800bec8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	21c0      	movs	r1, #192	; 0xc0
 800bedc:	438a      	bics	r2, r1
 800bede:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2220      	movs	r2, #32
 800bee4:	679a      	str	r2, [r3, #120]	; 0x78
}
 800bee6:	46c0      	nop			; (mov r8, r8)
 800bee8:	46bd      	mov	sp, r7
 800beea:	b002      	add	sp, #8
 800beec:	bd80      	pop	{r7, pc}
	...

0800bef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4912      	ldr	r1, [pc, #72]	; (800bf4c <UART_EndRxTransfer+0x5c>)
 800bf04:	400a      	ands	r2, r1
 800bf06:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	689a      	ldr	r2, [r3, #8]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2101      	movs	r1, #1
 800bf14:	438a      	bics	r2, r1
 800bf16:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d107      	bne.n	800bf30 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2110      	movs	r1, #16
 800bf2c:	438a      	bics	r2, r1
 800bf2e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2220      	movs	r2, #32
 800bf34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bf42:	46c0      	nop			; (mov r8, r8)
 800bf44:	46bd      	mov	sp, r7
 800bf46:	b002      	add	sp, #8
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	46c0      	nop			; (mov r8, r8)
 800bf4c:	fffffedf 	.word	0xfffffedf

0800bf50 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2220      	movs	r2, #32
 800bf66:	4013      	ands	r3, r2
 800bf68:	d114      	bne.n	800bf94 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2252      	movs	r2, #82	; 0x52
 800bf6e:	2100      	movs	r1, #0
 800bf70:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	689a      	ldr	r2, [r3, #8]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2180      	movs	r1, #128	; 0x80
 800bf7e:	438a      	bics	r2, r1
 800bf80:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2140      	movs	r1, #64	; 0x40
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf92:	e003      	b.n	800bf9c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	0018      	movs	r0, r3
 800bf98:	f7f9 fb96 	bl	80056c8 <HAL_UART_TxCpltCallback>
}
 800bf9c:	46c0      	nop			; (mov r8, r8)
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	b004      	add	sp, #16
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	0018      	movs	r0, r3
 800bfb6:	f7ff faa5 	bl	800b504 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfba:	46c0      	nop			; (mov r8, r8)
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	b004      	add	sp, #16
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b086      	sub	sp, #24
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfd4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	2280      	movs	r2, #128	; 0x80
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	2b80      	cmp	r3, #128	; 0x80
 800bfe8:	d10a      	bne.n	800c000 <UART_DMAError+0x3e>
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	2b21      	cmp	r3, #33	; 0x21
 800bfee:	d107      	bne.n	800c000 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	2252      	movs	r2, #82	; 0x52
 800bff4:	2100      	movs	r1, #0
 800bff6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	0018      	movs	r0, r3
 800bffc:	f7ff ff64 	bl	800bec8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	2240      	movs	r2, #64	; 0x40
 800c008:	4013      	ands	r3, r2
 800c00a:	2b40      	cmp	r3, #64	; 0x40
 800c00c:	d10a      	bne.n	800c024 <UART_DMAError+0x62>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2b22      	cmp	r3, #34	; 0x22
 800c012:	d107      	bne.n	800c024 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	225a      	movs	r2, #90	; 0x5a
 800c018:	2100      	movs	r1, #0
 800c01a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	0018      	movs	r0, r3
 800c020:	f7ff ff66 	bl	800bef0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	2280      	movs	r2, #128	; 0x80
 800c028:	589b      	ldr	r3, [r3, r2]
 800c02a:	2210      	movs	r2, #16
 800c02c:	431a      	orrs	r2, r3
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	2180      	movs	r1, #128	; 0x80
 800c032:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	0018      	movs	r0, r3
 800c038:	f7ff fa6c 	bl	800b514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c03c:	46c0      	nop			; (mov r8, r8)
 800c03e:	46bd      	mov	sp, r7
 800c040:	b006      	add	sp, #24
 800c042:	bd80      	pop	{r7, pc}

0800c044 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c050:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	225a      	movs	r2, #90	; 0x5a
 800c056:	2100      	movs	r1, #0
 800c058:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2252      	movs	r2, #82	; 0x52
 800c05e:	2100      	movs	r1, #0
 800c060:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	0018      	movs	r0, r3
 800c066:	f7ff fa55 	bl	800b514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c06a:	46c0      	nop			; (mov r8, r8)
 800c06c:	46bd      	mov	sp, r7
 800c06e:	b004      	add	sp, #16
 800c070:	bd80      	pop	{r7, pc}

0800c072 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b082      	sub	sp, #8
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2140      	movs	r1, #64	; 0x40
 800c086:	438a      	bics	r2, r1
 800c088:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2220      	movs	r2, #32
 800c08e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	0018      	movs	r0, r3
 800c09a:	f7f9 fb15 	bl	80056c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c09e:	46c0      	nop			; (mov r8, r8)
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	b002      	add	sp, #8
 800c0a4:	bd80      	pop	{r7, pc}
	...

0800c0a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c0b0:	200e      	movs	r0, #14
 800c0b2:	183b      	adds	r3, r7, r0
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	215c      	movs	r1, #92	; 0x5c
 800c0b8:	5a52      	ldrh	r2, [r2, r1]
 800c0ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0c0:	2b22      	cmp	r3, #34	; 0x22
 800c0c2:	d157      	bne.n	800c174 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0ca:	210c      	movs	r1, #12
 800c0cc:	187b      	adds	r3, r7, r1
 800c0ce:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c0d0:	187b      	adds	r3, r7, r1
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	183b      	adds	r3, r7, r0
 800c0d8:	881b      	ldrh	r3, [r3, #0]
 800c0da:	b2d9      	uxtb	r1, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e0:	400a      	ands	r2, r1
 800c0e2:	b2d2      	uxtb	r2, r2
 800c0e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ea:	1c5a      	adds	r2, r3, #1
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	225a      	movs	r2, #90	; 0x5a
 800c0f4:	5a9b      	ldrh	r3, [r3, r2]
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	b299      	uxth	r1, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	225a      	movs	r2, #90	; 0x5a
 800c100:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	225a      	movs	r2, #90	; 0x5a
 800c106:	5a9b      	ldrh	r3, [r3, r2]
 800c108:	b29b      	uxth	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d13a      	bne.n	800c184 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	491c      	ldr	r1, [pc, #112]	; (800c18c <UART_RxISR_8BIT+0xe4>)
 800c11a:	400a      	ands	r2, r1
 800c11c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	689a      	ldr	r2, [r3, #8]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2101      	movs	r1, #1
 800c12a:	438a      	bics	r2, r1
 800c12c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2220      	movs	r2, #32
 800c132:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d110      	bne.n	800c164 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2110      	movs	r1, #16
 800c14e:	438a      	bics	r2, r1
 800c150:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2258      	movs	r2, #88	; 0x58
 800c156:	5a9a      	ldrh	r2, [r3, r2]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	0011      	movs	r1, r2
 800c15c:	0018      	movs	r0, r3
 800c15e:	f7ff f9e1 	bl	800b524 <HAL_UARTEx_RxEventCallback>
 800c162:	e003      	b.n	800c16c <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	0018      	movs	r0, r3
 800c168:	f7f9 fabc 	bl	80056e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c172:	e007      	b.n	800c184 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	699a      	ldr	r2, [r3, #24]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2108      	movs	r1, #8
 800c180:	430a      	orrs	r2, r1
 800c182:	619a      	str	r2, [r3, #24]
}
 800c184:	46c0      	nop			; (mov r8, r8)
 800c186:	46bd      	mov	sp, r7
 800c188:	b004      	add	sp, #16
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	fffffedf 	.word	0xfffffedf

0800c190 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c198:	200e      	movs	r0, #14
 800c19a:	183b      	adds	r3, r7, r0
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	215c      	movs	r1, #92	; 0x5c
 800c1a0:	5a52      	ldrh	r2, [r2, r1]
 800c1a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1a8:	2b22      	cmp	r3, #34	; 0x22
 800c1aa:	d157      	bne.n	800c25c <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1b2:	210c      	movs	r1, #12
 800c1b4:	187b      	adds	r3, r7, r1
 800c1b6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1bc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c1be:	187b      	adds	r3, r7, r1
 800c1c0:	183a      	adds	r2, r7, r0
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	8812      	ldrh	r2, [r2, #0]
 800c1c6:	4013      	ands	r3, r2
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d2:	1c9a      	adds	r2, r3, #2
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	225a      	movs	r2, #90	; 0x5a
 800c1dc:	5a9b      	ldrh	r3, [r3, r2]
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	3b01      	subs	r3, #1
 800c1e2:	b299      	uxth	r1, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	225a      	movs	r2, #90	; 0x5a
 800c1e8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	225a      	movs	r2, #90	; 0x5a
 800c1ee:	5a9b      	ldrh	r3, [r3, r2]
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d13a      	bne.n	800c26c <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	491c      	ldr	r1, [pc, #112]	; (800c274 <UART_RxISR_16BIT+0xe4>)
 800c202:	400a      	ands	r2, r1
 800c204:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	689a      	ldr	r2, [r3, #8]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2101      	movs	r1, #1
 800c212:	438a      	bics	r2, r1
 800c214:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2220      	movs	r2, #32
 800c21a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c226:	2b01      	cmp	r3, #1
 800c228:	d110      	bne.n	800c24c <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2110      	movs	r1, #16
 800c236:	438a      	bics	r2, r1
 800c238:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2258      	movs	r2, #88	; 0x58
 800c23e:	5a9a      	ldrh	r2, [r3, r2]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	0011      	movs	r1, r2
 800c244:	0018      	movs	r0, r3
 800c246:	f7ff f96d 	bl	800b524 <HAL_UARTEx_RxEventCallback>
 800c24a:	e003      	b.n	800c254 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	0018      	movs	r0, r3
 800c250:	f7f9 fa48 	bl	80056e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c25a:	e007      	b.n	800c26c <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	699a      	ldr	r2, [r3, #24]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2108      	movs	r1, #8
 800c268:	430a      	orrs	r2, r1
 800c26a:	619a      	str	r2, [r3, #24]
}
 800c26c:	46c0      	nop			; (mov r8, r8)
 800c26e:	46bd      	mov	sp, r7
 800c270:	b004      	add	sp, #16
 800c272:	bd80      	pop	{r7, pc}
 800c274:	fffffedf 	.word	0xfffffedf

0800c278 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c280:	46c0      	nop			; (mov r8, r8)
 800c282:	46bd      	mov	sp, r7
 800c284:	b002      	add	sp, #8
 800c286:	bd80      	pop	{r7, pc}

0800c288 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af02      	add	r7, sp, #8
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	1d3b      	adds	r3, r7, #4
 800c292:	6019      	str	r1, [r3, #0]
 800c294:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c296:	2317      	movs	r3, #23
 800c298:	18fb      	adds	r3, r7, r3
 800c29a:	2200      	movs	r2, #0
 800c29c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2274      	movs	r2, #116	; 0x74
 800c2a2:	5c9b      	ldrb	r3, [r3, r2]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d101      	bne.n	800c2ac <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	e04a      	b.n	800c342 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2274      	movs	r2, #116	; 0x74
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2224      	movs	r2, #36	; 0x24
 800c2b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2101      	movs	r1, #1
 800c2c6:	438a      	bics	r2, r1
 800c2c8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	4a1e      	ldr	r2, [pc, #120]	; (800c34c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800c2d2:	4013      	ands	r3, r2
 800c2d4:	0019      	movs	r1, r3
 800c2d6:	1d3b      	adds	r3, r7, #4
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c2e2:	1d3b      	adds	r3, r7, #4
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d105      	bne.n	800c2f6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c2ea:	1d3b      	adds	r3, r7, #4
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	6819      	ldr	r1, [r3, #0]
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	f000 f84f 	bl	800c394 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2101      	movs	r1, #1
 800c302:	430a      	orrs	r2, r1
 800c304:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c306:	f7f8 ff74 	bl	80051f2 <HAL_GetTick>
 800c30a:	0003      	movs	r3, r0
 800c30c:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	2280      	movs	r2, #128	; 0x80
 800c312:	03d1      	lsls	r1, r2, #15
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	4a0e      	ldr	r2, [pc, #56]	; (800c350 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800c318:	9200      	str	r2, [sp, #0]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f7ff fcc8 	bl	800bcb0 <UART_WaitOnFlagUntilTimeout>
 800c320:	1e03      	subs	r3, r0, #0
 800c322:	d004      	beq.n	800c32e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800c324:	2317      	movs	r3, #23
 800c326:	18fb      	adds	r3, r7, r3
 800c328:	2203      	movs	r2, #3
 800c32a:	701a      	strb	r2, [r3, #0]
 800c32c:	e002      	b.n	800c334 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2220      	movs	r2, #32
 800c332:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2274      	movs	r2, #116	; 0x74
 800c338:	2100      	movs	r1, #0
 800c33a:	5499      	strb	r1, [r3, r2]

  return status;
 800c33c:	2317      	movs	r3, #23
 800c33e:	18fb      	adds	r3, r7, r3
 800c340:	781b      	ldrb	r3, [r3, #0]
}
 800c342:	0018      	movs	r0, r3
 800c344:	46bd      	mov	sp, r7
 800c346:	b006      	add	sp, #24
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	46c0      	nop			; (mov r8, r8)
 800c34c:	ffcfffff 	.word	0xffcfffff
 800c350:	01ffffff 	.word	0x01ffffff

0800c354 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2274      	movs	r2, #116	; 0x74
 800c360:	5c9b      	ldrb	r3, [r3, r2]
 800c362:	2b01      	cmp	r3, #1
 800c364:	d101      	bne.n	800c36a <HAL_UARTEx_EnableStopMode+0x16>
 800c366:	2302      	movs	r3, #2
 800c368:	e010      	b.n	800c38c <HAL_UARTEx_EnableStopMode+0x38>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2274      	movs	r2, #116	; 0x74
 800c36e:	2101      	movs	r1, #1
 800c370:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2102      	movs	r1, #2
 800c37e:	430a      	orrs	r2, r1
 800c380:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2274      	movs	r2, #116	; 0x74
 800c386:	2100      	movs	r1, #0
 800c388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	0018      	movs	r0, r3
 800c38e:	46bd      	mov	sp, r7
 800c390:	b002      	add	sp, #8
 800c392:	bd80      	pop	{r7, pc}

0800c394 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	1d3b      	adds	r3, r7, #4
 800c39e:	6019      	str	r1, [r3, #0]
 800c3a0:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	2210      	movs	r2, #16
 800c3aa:	4393      	bics	r3, r2
 800c3ac:	001a      	movs	r2, r3
 800c3ae:	1d3b      	adds	r3, r7, #4
 800c3b0:	889b      	ldrh	r3, [r3, #4]
 800c3b2:	0019      	movs	r1, r3
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	430a      	orrs	r2, r1
 800c3ba:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	021b      	lsls	r3, r3, #8
 800c3c4:	0a19      	lsrs	r1, r3, #8
 800c3c6:	1d3b      	adds	r3, r7, #4
 800c3c8:	799b      	ldrb	r3, [r3, #6]
 800c3ca:	061a      	lsls	r2, r3, #24
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	430a      	orrs	r2, r1
 800c3d2:	605a      	str	r2, [r3, #4]
}
 800c3d4:	46c0      	nop			; (mov r8, r8)
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	b004      	add	sp, #16
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	33f1      	adds	r3, #241	; 0xf1
 800c3e8:	2210      	movs	r2, #16
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f00d f951 	bl	8019694 <memset1>
    ctx->M_n = 0;
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	238a      	movs	r3, #138	; 0x8a
 800c3f6:	005b      	lsls	r3, r3, #1
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	22f0      	movs	r2, #240	; 0xf0
 800c400:	2100      	movs	r1, #0
 800c402:	0018      	movs	r0, r3
 800c404:	f00d f946 	bl	8019694 <memset1>
}
 800c408:	46c0      	nop			; (mov r8, r8)
 800c40a:	46bd      	mov	sp, r7
 800c40c:	b002      	add	sp, #8
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2110      	movs	r1, #16
 800c420:	0018      	movs	r0, r3
 800c422:	f000 feaf 	bl	800d184 <lorawan_aes_set_key>
}
 800c426:	46c0      	nop			; (mov r8, r8)
 800c428:	46bd      	mov	sp, r7
 800c42a:	b002      	add	sp, #8
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c42e:	b590      	push	{r4, r7, lr}
 800c430:	b08d      	sub	sp, #52	; 0x34
 800c432:	af00      	add	r7, sp, #0
 800c434:	60f8      	str	r0, [r7, #12]
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	238a      	movs	r3, #138	; 0x8a
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	58d3      	ldr	r3, [r2, r3]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d100      	bne.n	800c448 <AES_CMAC_Update+0x1a>
 800c446:	e0a4      	b.n	800c592 <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	238a      	movs	r3, #138	; 0x8a
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	58d3      	ldr	r3, [r2, r3]
 800c450:	2210      	movs	r2, #16
 800c452:	1ad2      	subs	r2, r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4293      	cmp	r3, r2
 800c458:	d900      	bls.n	800c45c <AES_CMAC_Update+0x2e>
 800c45a:	0013      	movs	r3, r2
 800c45c:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	1c9a      	adds	r2, r3, #2
 800c462:	32ff      	adds	r2, #255	; 0xff
 800c464:	68f9      	ldr	r1, [r7, #12]
 800c466:	238a      	movs	r3, #138	; 0x8a
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	58cb      	ldr	r3, [r1, r3]
 800c46c:	18d3      	adds	r3, r2, r3
 800c46e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c470:	b292      	uxth	r2, r2
 800c472:	68b9      	ldr	r1, [r7, #8]
 800c474:	0018      	movs	r0, r3
 800c476:	f00d f8cf 	bl	8019618 <memcpy1>
        ctx->M_n += mlen;
 800c47a:	68fa      	ldr	r2, [r7, #12]
 800c47c:	238a      	movs	r3, #138	; 0x8a
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	58d2      	ldr	r2, [r2, r3]
 800c482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c484:	18d1      	adds	r1, r2, r3
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	238a      	movs	r3, #138	; 0x8a
 800c48a:	005b      	lsls	r3, r3, #1
 800c48c:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	238a      	movs	r3, #138	; 0x8a
 800c492:	005b      	lsls	r3, r3, #1
 800c494:	58d3      	ldr	r3, [r2, r3]
 800c496:	2b0f      	cmp	r3, #15
 800c498:	d800      	bhi.n	800c49c <AES_CMAC_Update+0x6e>
 800c49a:	e08c      	b.n	800c5b6 <AES_CMAC_Update+0x188>
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d100      	bne.n	800c4a6 <AES_CMAC_Update+0x78>
 800c4a4:	e087      	b.n	800c5b6 <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4aa:	e018      	b.n	800c4de <AES_CMAC_Update+0xb0>
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	21f1      	movs	r1, #241	; 0xf1
 800c4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b2:	18d3      	adds	r3, r2, r3
 800c4b4:	185b      	adds	r3, r3, r1
 800c4b6:	781a      	ldrb	r2, [r3, #0]
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	33ff      	adds	r3, #255	; 0xff
 800c4be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4c0:	1841      	adds	r1, r0, r1
 800c4c2:	18cb      	adds	r3, r1, r3
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	4053      	eors	r3, r2
 800c4c8:	b2d8      	uxtb	r0, r3
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	21f1      	movs	r1, #241	; 0xf1
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	18d3      	adds	r3, r2, r3
 800c4d2:	185b      	adds	r3, r3, r1
 800c4d4:	1c02      	adds	r2, r0, #0
 800c4d6:	701a      	strb	r2, [r3, #0]
 800c4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4da:	3301      	adds	r3, #1
 800c4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e0:	2b0f      	cmp	r3, #15
 800c4e2:	dde3      	ble.n	800c4ac <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	33f1      	adds	r3, #241	; 0xf1
 800c4e8:	0019      	movs	r1, r3
 800c4ea:	2414      	movs	r4, #20
 800c4ec:	193b      	adds	r3, r7, r4
 800c4ee:	2210      	movs	r2, #16
 800c4f0:	0018      	movs	r0, r3
 800c4f2:	f00d f891 	bl	8019618 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	1939      	adds	r1, r7, r4
 800c4fa:	193b      	adds	r3, r7, r4
 800c4fc:	0018      	movs	r0, r3
 800c4fe:	f000 ff7d 	bl	800d3fc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	33f1      	adds	r3, #241	; 0xf1
 800c506:	1939      	adds	r1, r7, r4
 800c508:	2210      	movs	r2, #16
 800c50a:	0018      	movs	r0, r3
 800c50c:	f00d f884 	bl	8019618 <memcpy1>

        data += mlen;
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	18d3      	adds	r3, r2, r3
 800c516:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c520:	e037      	b.n	800c592 <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800c522:	2300      	movs	r3, #0
 800c524:	62bb      	str	r3, [r7, #40]	; 0x28
 800c526:	e015      	b.n	800c554 <AES_CMAC_Update+0x126>
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	21f1      	movs	r1, #241	; 0xf1
 800c52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52e:	18d3      	adds	r3, r2, r3
 800c530:	185b      	adds	r3, r3, r1
 800c532:	781a      	ldrb	r2, [r3, #0]
 800c534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c536:	68b9      	ldr	r1, [r7, #8]
 800c538:	18cb      	adds	r3, r1, r3
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	4053      	eors	r3, r2
 800c53e:	b2d8      	uxtb	r0, r3
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	21f1      	movs	r1, #241	; 0xf1
 800c544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c546:	18d3      	adds	r3, r2, r3
 800c548:	185b      	adds	r3, r3, r1
 800c54a:	1c02      	adds	r2, r0, #0
 800c54c:	701a      	strb	r2, [r3, #0]
 800c54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c550:	3301      	adds	r3, #1
 800c552:	62bb      	str	r3, [r7, #40]	; 0x28
 800c554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c556:	2b0f      	cmp	r3, #15
 800c558:	dde6      	ble.n	800c528 <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	33f1      	adds	r3, #241	; 0xf1
 800c55e:	0019      	movs	r1, r3
 800c560:	2414      	movs	r4, #20
 800c562:	193b      	adds	r3, r7, r4
 800c564:	2210      	movs	r2, #16
 800c566:	0018      	movs	r0, r3
 800c568:	f00d f856 	bl	8019618 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	1939      	adds	r1, r7, r4
 800c570:	193b      	adds	r3, r7, r4
 800c572:	0018      	movs	r0, r3
 800c574:	f000 ff42 	bl	800d3fc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	33f1      	adds	r3, #241	; 0xf1
 800c57c:	1939      	adds	r1, r7, r4
 800c57e:	2210      	movs	r2, #16
 800c580:	0018      	movs	r0, r3
 800c582:	f00d f849 	bl	8019618 <memcpy1>

        data += 16;
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	3310      	adds	r3, #16
 800c58a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	3b10      	subs	r3, #16
 800c590:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b10      	cmp	r3, #16
 800c596:	d8c4      	bhi.n	800c522 <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3302      	adds	r3, #2
 800c59c:	33ff      	adds	r3, #255	; 0xff
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	b292      	uxth	r2, r2
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	0018      	movs	r0, r3
 800c5a6:	f00d f837 	bl	8019618 <memcpy1>
    ctx->M_n = len;
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	238a      	movs	r3, #138	; 0x8a
 800c5ae:	005b      	lsls	r3, r3, #1
 800c5b0:	6879      	ldr	r1, [r7, #4]
 800c5b2:	50d1      	str	r1, [r2, r3]
 800c5b4:	e000      	b.n	800c5b8 <AES_CMAC_Update+0x18a>
            return;
 800c5b6:	46c0      	nop			; (mov r8, r8)
}
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	b00d      	add	sp, #52	; 0x34
 800c5bc:	bd90      	pop	{r4, r7, pc}

0800c5be <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c5be:	b590      	push	{r4, r7, lr}
 800c5c0:	b093      	sub	sp, #76	; 0x4c
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c5c8:	241c      	movs	r4, #28
 800c5ca:	193b      	adds	r3, r7, r4
 800c5cc:	2210      	movs	r2, #16
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	f00d f85f 	bl	8019694 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	1939      	adds	r1, r7, r4
 800c5da:	193b      	adds	r3, r7, r4
 800c5dc:	0018      	movs	r0, r3
 800c5de:	f000 ff0d 	bl	800d3fc <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c5e2:	193b      	adds	r3, r7, r4
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	b25b      	sxtb	r3, r3
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	da2e      	bge.n	800c64a <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	647b      	str	r3, [r7, #68]	; 0x44
 800c5f0:	e018      	b.n	800c624 <AES_CMAC_Final+0x66>
 800c5f2:	201c      	movs	r0, #28
 800c5f4:	183a      	adds	r2, r7, r0
 800c5f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5f8:	18d3      	adds	r3, r2, r3
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	b25a      	sxtb	r2, r3
 800c600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c602:	3301      	adds	r3, #1
 800c604:	1839      	adds	r1, r7, r0
 800c606:	5ccb      	ldrb	r3, [r1, r3]
 800c608:	09db      	lsrs	r3, r3, #7
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	b25b      	sxtb	r3, r3
 800c60e:	4313      	orrs	r3, r2
 800c610:	b25b      	sxtb	r3, r3
 800c612:	b2d9      	uxtb	r1, r3
 800c614:	183a      	adds	r2, r7, r0
 800c616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c618:	18d3      	adds	r3, r2, r3
 800c61a:	1c0a      	adds	r2, r1, #0
 800c61c:	701a      	strb	r2, [r3, #0]
 800c61e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c620:	3301      	adds	r3, #1
 800c622:	647b      	str	r3, [r7, #68]	; 0x44
 800c624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c626:	2b0e      	cmp	r3, #14
 800c628:	dde3      	ble.n	800c5f2 <AES_CMAC_Final+0x34>
 800c62a:	211c      	movs	r1, #28
 800c62c:	187b      	adds	r3, r7, r1
 800c62e:	7bdb      	ldrb	r3, [r3, #15]
 800c630:	18db      	adds	r3, r3, r3
 800c632:	b2da      	uxtb	r2, r3
 800c634:	187b      	adds	r3, r7, r1
 800c636:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800c638:	187b      	adds	r3, r7, r1
 800c63a:	7bdb      	ldrb	r3, [r3, #15]
 800c63c:	2279      	movs	r2, #121	; 0x79
 800c63e:	4252      	negs	r2, r2
 800c640:	4053      	eors	r3, r2
 800c642:	b2da      	uxtb	r2, r3
 800c644:	187b      	adds	r3, r7, r1
 800c646:	73da      	strb	r2, [r3, #15]
 800c648:	e025      	b.n	800c696 <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800c64a:	2300      	movs	r3, #0
 800c64c:	643b      	str	r3, [r7, #64]	; 0x40
 800c64e:	e018      	b.n	800c682 <AES_CMAC_Final+0xc4>
 800c650:	201c      	movs	r0, #28
 800c652:	183a      	adds	r2, r7, r0
 800c654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c656:	18d3      	adds	r3, r2, r3
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	005b      	lsls	r3, r3, #1
 800c65c:	b25a      	sxtb	r2, r3
 800c65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c660:	3301      	adds	r3, #1
 800c662:	1839      	adds	r1, r7, r0
 800c664:	5ccb      	ldrb	r3, [r1, r3]
 800c666:	09db      	lsrs	r3, r3, #7
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	b25b      	sxtb	r3, r3
 800c66c:	4313      	orrs	r3, r2
 800c66e:	b25b      	sxtb	r3, r3
 800c670:	b2d9      	uxtb	r1, r3
 800c672:	183a      	adds	r2, r7, r0
 800c674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c676:	18d3      	adds	r3, r2, r3
 800c678:	1c0a      	adds	r2, r1, #0
 800c67a:	701a      	strb	r2, [r3, #0]
 800c67c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c67e:	3301      	adds	r3, #1
 800c680:	643b      	str	r3, [r7, #64]	; 0x40
 800c682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c684:	2b0e      	cmp	r3, #14
 800c686:	dde3      	ble.n	800c650 <AES_CMAC_Final+0x92>
 800c688:	211c      	movs	r1, #28
 800c68a:	187b      	adds	r3, r7, r1
 800c68c:	7bdb      	ldrb	r3, [r3, #15]
 800c68e:	18db      	adds	r3, r3, r3
 800c690:	b2da      	uxtb	r2, r3
 800c692:	187b      	adds	r3, r7, r1
 800c694:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	238a      	movs	r3, #138	; 0x8a
 800c69a:	005b      	lsls	r3, r3, #1
 800c69c:	58d3      	ldr	r3, [r2, r3]
 800c69e:	2b10      	cmp	r3, #16
 800c6a0:	d11f      	bne.n	800c6e2 <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6a6:	e018      	b.n	800c6da <AES_CMAC_Final+0x11c>
 800c6a8:	6839      	ldr	r1, [r7, #0]
 800c6aa:	2302      	movs	r3, #2
 800c6ac:	33ff      	adds	r3, #255	; 0xff
 800c6ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c6b0:	188a      	adds	r2, r1, r2
 800c6b2:	18d3      	adds	r3, r2, r3
 800c6b4:	781a      	ldrb	r2, [r3, #0]
 800c6b6:	231c      	movs	r3, #28
 800c6b8:	18f9      	adds	r1, r7, r3
 800c6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6bc:	18cb      	adds	r3, r1, r3
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	4053      	eors	r3, r2
 800c6c2:	b2d8      	uxtb	r0, r3
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	33ff      	adds	r3, #255	; 0xff
 800c6ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c6cc:	188a      	adds	r2, r1, r2
 800c6ce:	18d3      	adds	r3, r2, r3
 800c6d0:	1c02      	adds	r2, r0, #0
 800c6d2:	701a      	strb	r2, [r3, #0]
 800c6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6dc:	2b0f      	cmp	r3, #15
 800c6de:	dde3      	ble.n	800c6a8 <AES_CMAC_Final+0xea>
 800c6e0:	e09f      	b.n	800c822 <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c6e2:	231c      	movs	r3, #28
 800c6e4:	18fb      	adds	r3, r7, r3
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	b25b      	sxtb	r3, r3
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	da2e      	bge.n	800c74c <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6f2:	e018      	b.n	800c726 <AES_CMAC_Final+0x168>
 800c6f4:	201c      	movs	r0, #28
 800c6f6:	183a      	adds	r2, r7, r0
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fa:	18d3      	adds	r3, r2, r3
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	b25a      	sxtb	r2, r3
 800c702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c704:	3301      	adds	r3, #1
 800c706:	1839      	adds	r1, r7, r0
 800c708:	5ccb      	ldrb	r3, [r1, r3]
 800c70a:	09db      	lsrs	r3, r3, #7
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	b25b      	sxtb	r3, r3
 800c710:	4313      	orrs	r3, r2
 800c712:	b25b      	sxtb	r3, r3
 800c714:	b2d9      	uxtb	r1, r3
 800c716:	183a      	adds	r2, r7, r0
 800c718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71a:	18d3      	adds	r3, r2, r3
 800c71c:	1c0a      	adds	r2, r1, #0
 800c71e:	701a      	strb	r2, [r3, #0]
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	3301      	adds	r3, #1
 800c724:	63bb      	str	r3, [r7, #56]	; 0x38
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	2b0e      	cmp	r3, #14
 800c72a:	dde3      	ble.n	800c6f4 <AES_CMAC_Final+0x136>
 800c72c:	211c      	movs	r1, #28
 800c72e:	187b      	adds	r3, r7, r1
 800c730:	7bdb      	ldrb	r3, [r3, #15]
 800c732:	18db      	adds	r3, r3, r3
 800c734:	b2da      	uxtb	r2, r3
 800c736:	187b      	adds	r3, r7, r1
 800c738:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800c73a:	187b      	adds	r3, r7, r1
 800c73c:	7bdb      	ldrb	r3, [r3, #15]
 800c73e:	2279      	movs	r2, #121	; 0x79
 800c740:	4252      	negs	r2, r2
 800c742:	4053      	eors	r3, r2
 800c744:	b2da      	uxtb	r2, r3
 800c746:	187b      	adds	r3, r7, r1
 800c748:	73da      	strb	r2, [r3, #15]
 800c74a:	e025      	b.n	800c798 <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800c74c:	2300      	movs	r3, #0
 800c74e:	637b      	str	r3, [r7, #52]	; 0x34
 800c750:	e018      	b.n	800c784 <AES_CMAC_Final+0x1c6>
 800c752:	201c      	movs	r0, #28
 800c754:	183a      	adds	r2, r7, r0
 800c756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c758:	18d3      	adds	r3, r2, r3
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	005b      	lsls	r3, r3, #1
 800c75e:	b25a      	sxtb	r2, r3
 800c760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c762:	3301      	adds	r3, #1
 800c764:	1839      	adds	r1, r7, r0
 800c766:	5ccb      	ldrb	r3, [r1, r3]
 800c768:	09db      	lsrs	r3, r3, #7
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	b25b      	sxtb	r3, r3
 800c76e:	4313      	orrs	r3, r2
 800c770:	b25b      	sxtb	r3, r3
 800c772:	b2d9      	uxtb	r1, r3
 800c774:	183a      	adds	r2, r7, r0
 800c776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c778:	18d3      	adds	r3, r2, r3
 800c77a:	1c0a      	adds	r2, r1, #0
 800c77c:	701a      	strb	r2, [r3, #0]
 800c77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c780:	3301      	adds	r3, #1
 800c782:	637b      	str	r3, [r7, #52]	; 0x34
 800c784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c786:	2b0e      	cmp	r3, #14
 800c788:	dde3      	ble.n	800c752 <AES_CMAC_Final+0x194>
 800c78a:	211c      	movs	r1, #28
 800c78c:	187b      	adds	r3, r7, r1
 800c78e:	7bdb      	ldrb	r3, [r3, #15]
 800c790:	18db      	adds	r3, r3, r3
 800c792:	b2da      	uxtb	r2, r3
 800c794:	187b      	adds	r3, r7, r1
 800c796:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c798:	683a      	ldr	r2, [r7, #0]
 800c79a:	238a      	movs	r3, #138	; 0x8a
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	58d2      	ldr	r2, [r2, r3]
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	33ff      	adds	r3, #255	; 0xff
 800c7a6:	188a      	adds	r2, r1, r2
 800c7a8:	18d3      	adds	r3, r2, r3
 800c7aa:	2280      	movs	r2, #128	; 0x80
 800c7ac:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c7ae:	e00a      	b.n	800c7c6 <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	238a      	movs	r3, #138	; 0x8a
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	58d2      	ldr	r2, [r2, r3]
 800c7b8:	6839      	ldr	r1, [r7, #0]
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	33ff      	adds	r3, #255	; 0xff
 800c7be:	188a      	adds	r2, r1, r2
 800c7c0:	18d3      	adds	r3, r2, r3
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c7c6:	683a      	ldr	r2, [r7, #0]
 800c7c8:	238a      	movs	r3, #138	; 0x8a
 800c7ca:	005b      	lsls	r3, r3, #1
 800c7cc:	58d3      	ldr	r3, [r2, r3]
 800c7ce:	1c59      	adds	r1, r3, #1
 800c7d0:	683a      	ldr	r2, [r7, #0]
 800c7d2:	238a      	movs	r3, #138	; 0x8a
 800c7d4:	005b      	lsls	r3, r3, #1
 800c7d6:	50d1      	str	r1, [r2, r3]
 800c7d8:	683a      	ldr	r2, [r7, #0]
 800c7da:	238a      	movs	r3, #138	; 0x8a
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	58d3      	ldr	r3, [r2, r3]
 800c7e0:	2b0f      	cmp	r3, #15
 800c7e2:	d9e5      	bls.n	800c7b0 <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	633b      	str	r3, [r7, #48]	; 0x30
 800c7e8:	e018      	b.n	800c81c <AES_CMAC_Final+0x25e>
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	33ff      	adds	r3, #255	; 0xff
 800c7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f2:	188a      	adds	r2, r1, r2
 800c7f4:	18d3      	adds	r3, r2, r3
 800c7f6:	781a      	ldrb	r2, [r3, #0]
 800c7f8:	231c      	movs	r3, #28
 800c7fa:	18f9      	adds	r1, r7, r3
 800c7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fe:	18cb      	adds	r3, r1, r3
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	4053      	eors	r3, r2
 800c804:	b2d8      	uxtb	r0, r3
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	2302      	movs	r3, #2
 800c80a:	33ff      	adds	r3, #255	; 0xff
 800c80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c80e:	188a      	adds	r2, r1, r2
 800c810:	18d3      	adds	r3, r2, r3
 800c812:	1c02      	adds	r2, r0, #0
 800c814:	701a      	strb	r2, [r3, #0]
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	3301      	adds	r3, #1
 800c81a:	633b      	str	r3, [r7, #48]	; 0x30
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	2b0f      	cmp	r3, #15
 800c820:	dde3      	ble.n	800c7ea <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800c822:	2300      	movs	r3, #0
 800c824:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c826:	e018      	b.n	800c85a <AES_CMAC_Final+0x29c>
 800c828:	683a      	ldr	r2, [r7, #0]
 800c82a:	21f1      	movs	r1, #241	; 0xf1
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	18d3      	adds	r3, r2, r3
 800c830:	185b      	adds	r3, r3, r1
 800c832:	781a      	ldrb	r2, [r3, #0]
 800c834:	6838      	ldr	r0, [r7, #0]
 800c836:	2302      	movs	r3, #2
 800c838:	33ff      	adds	r3, #255	; 0xff
 800c83a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c83c:	1841      	adds	r1, r0, r1
 800c83e:	18cb      	adds	r3, r1, r3
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	4053      	eors	r3, r2
 800c844:	b2d8      	uxtb	r0, r3
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	21f1      	movs	r1, #241	; 0xf1
 800c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84c:	18d3      	adds	r3, r2, r3
 800c84e:	185b      	adds	r3, r3, r1
 800c850:	1c02      	adds	r2, r0, #0
 800c852:	701a      	strb	r2, [r3, #0]
 800c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c856:	3301      	adds	r3, #1
 800c858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85c:	2b0f      	cmp	r3, #15
 800c85e:	dde3      	ble.n	800c828 <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	33f1      	adds	r3, #241	; 0xf1
 800c864:	0019      	movs	r1, r3
 800c866:	240c      	movs	r4, #12
 800c868:	193b      	adds	r3, r7, r4
 800c86a:	2210      	movs	r2, #16
 800c86c:	0018      	movs	r0, r3
 800c86e:	f00c fed3 	bl	8019618 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	6879      	ldr	r1, [r7, #4]
 800c876:	193b      	adds	r3, r7, r4
 800c878:	0018      	movs	r0, r3
 800c87a:	f000 fdbf 	bl	800d3fc <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c87e:	231c      	movs	r3, #28
 800c880:	18fb      	adds	r3, r7, r3
 800c882:	2210      	movs	r2, #16
 800c884:	2100      	movs	r1, #0
 800c886:	0018      	movs	r0, r3
 800c888:	f00c ff04 	bl	8019694 <memset1>
}
 800c88c:	46c0      	nop			; (mov r8, r8)
 800c88e:	46bd      	mov	sp, r7
 800c890:	b013      	add	sp, #76	; 0x4c
 800c892:	bd90      	pop	{r4, r7, pc}

0800c894 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	781a      	ldrb	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	7852      	ldrb	r2, [r2, #1]
 800c8ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3302      	adds	r3, #2
 800c8b4:	683a      	ldr	r2, [r7, #0]
 800c8b6:	7892      	ldrb	r2, [r2, #2]
 800c8b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3303      	adds	r3, #3
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	78d2      	ldrb	r2, [r2, #3]
 800c8c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	7912      	ldrb	r2, [r2, #4]
 800c8cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	3305      	adds	r3, #5
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	7952      	ldrb	r2, [r2, #5]
 800c8d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	3306      	adds	r3, #6
 800c8dc:	683a      	ldr	r2, [r7, #0]
 800c8de:	7992      	ldrb	r2, [r2, #6]
 800c8e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	3307      	adds	r3, #7
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	79d2      	ldrb	r2, [r2, #7]
 800c8ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	7a12      	ldrb	r2, [r2, #8]
 800c8f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	3309      	adds	r3, #9
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	7a52      	ldrb	r2, [r2, #9]
 800c8fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	330a      	adds	r3, #10
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	7a92      	ldrb	r2, [r2, #10]
 800c908:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	330b      	adds	r3, #11
 800c90e:	683a      	ldr	r2, [r7, #0]
 800c910:	7ad2      	ldrb	r2, [r2, #11]
 800c912:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	330c      	adds	r3, #12
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	7b12      	ldrb	r2, [r2, #12]
 800c91c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	330d      	adds	r3, #13
 800c922:	683a      	ldr	r2, [r7, #0]
 800c924:	7b52      	ldrb	r2, [r2, #13]
 800c926:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	330e      	adds	r3, #14
 800c92c:	683a      	ldr	r2, [r7, #0]
 800c92e:	7b92      	ldrb	r2, [r2, #14]
 800c930:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	330f      	adds	r3, #15
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	7bd2      	ldrb	r2, [r2, #15]
 800c93a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c93c:	46c0      	nop			; (mov r8, r8)
 800c93e:	46bd      	mov	sp, r7
 800c940:	b002      	add	sp, #8
 800c942:	bd80      	pop	{r7, pc}

0800c944 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	1dfb      	adds	r3, r7, #7
 800c950:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c952:	e007      	b.n	800c964 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	1c53      	adds	r3, r2, #1
 800c958:	60bb      	str	r3, [r7, #8]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	1c59      	adds	r1, r3, #1
 800c95e:	60f9      	str	r1, [r7, #12]
 800c960:	7812      	ldrb	r2, [r2, #0]
 800c962:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c964:	1dfb      	adds	r3, r7, #7
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	1dfa      	adds	r2, r7, #7
 800c96a:	1e59      	subs	r1, r3, #1
 800c96c:	7011      	strb	r1, [r2, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d1f0      	bne.n	800c954 <copy_block_nn+0x10>
}
 800c972:	46c0      	nop			; (mov r8, r8)
 800c974:	46c0      	nop			; (mov r8, r8)
 800c976:	46bd      	mov	sp, r7
 800c978:	b004      	add	sp, #16
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	781a      	ldrb	r2, [r3, #0]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	4053      	eors	r3, r2
 800c990:	b2da      	uxtb	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	3301      	adds	r3, #1
 800c99a:	7819      	ldrb	r1, [r3, #0]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	781a      	ldrb	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	404a      	eors	r2, r1
 800c9a8:	b2d2      	uxtb	r2, r2
 800c9aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	3302      	adds	r3, #2
 800c9b0:	7819      	ldrb	r1, [r3, #0]
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	3302      	adds	r3, #2
 800c9b6:	781a      	ldrb	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	3302      	adds	r3, #2
 800c9bc:	404a      	eors	r2, r1
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3303      	adds	r3, #3
 800c9c6:	7819      	ldrb	r1, [r3, #0]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	3303      	adds	r3, #3
 800c9cc:	781a      	ldrb	r2, [r3, #0]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	3303      	adds	r3, #3
 800c9d2:	404a      	eors	r2, r1
 800c9d4:	b2d2      	uxtb	r2, r2
 800c9d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	3304      	adds	r3, #4
 800c9dc:	7819      	ldrb	r1, [r3, #0]
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	3304      	adds	r3, #4
 800c9e2:	781a      	ldrb	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	404a      	eors	r2, r1
 800c9ea:	b2d2      	uxtb	r2, r2
 800c9ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	3305      	adds	r3, #5
 800c9f2:	7819      	ldrb	r1, [r3, #0]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	3305      	adds	r3, #5
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	3305      	adds	r3, #5
 800c9fe:	404a      	eors	r2, r1
 800ca00:	b2d2      	uxtb	r2, r2
 800ca02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	3306      	adds	r3, #6
 800ca08:	7819      	ldrb	r1, [r3, #0]
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	3306      	adds	r3, #6
 800ca0e:	781a      	ldrb	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3306      	adds	r3, #6
 800ca14:	404a      	eors	r2, r1
 800ca16:	b2d2      	uxtb	r2, r2
 800ca18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3307      	adds	r3, #7
 800ca1e:	7819      	ldrb	r1, [r3, #0]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	3307      	adds	r3, #7
 800ca24:	781a      	ldrb	r2, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	3307      	adds	r3, #7
 800ca2a:	404a      	eors	r2, r1
 800ca2c:	b2d2      	uxtb	r2, r2
 800ca2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	3308      	adds	r3, #8
 800ca34:	7819      	ldrb	r1, [r3, #0]
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	3308      	adds	r3, #8
 800ca3a:	781a      	ldrb	r2, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	3308      	adds	r3, #8
 800ca40:	404a      	eors	r2, r1
 800ca42:	b2d2      	uxtb	r2, r2
 800ca44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	3309      	adds	r3, #9
 800ca4a:	7819      	ldrb	r1, [r3, #0]
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	3309      	adds	r3, #9
 800ca50:	781a      	ldrb	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	3309      	adds	r3, #9
 800ca56:	404a      	eors	r2, r1
 800ca58:	b2d2      	uxtb	r2, r2
 800ca5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	330a      	adds	r3, #10
 800ca60:	7819      	ldrb	r1, [r3, #0]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	330a      	adds	r3, #10
 800ca66:	781a      	ldrb	r2, [r3, #0]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	330a      	adds	r3, #10
 800ca6c:	404a      	eors	r2, r1
 800ca6e:	b2d2      	uxtb	r2, r2
 800ca70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	330b      	adds	r3, #11
 800ca76:	7819      	ldrb	r1, [r3, #0]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	330b      	adds	r3, #11
 800ca7c:	781a      	ldrb	r2, [r3, #0]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	330b      	adds	r3, #11
 800ca82:	404a      	eors	r2, r1
 800ca84:	b2d2      	uxtb	r2, r2
 800ca86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	330c      	adds	r3, #12
 800ca8c:	7819      	ldrb	r1, [r3, #0]
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	330c      	adds	r3, #12
 800ca92:	781a      	ldrb	r2, [r3, #0]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	330c      	adds	r3, #12
 800ca98:	404a      	eors	r2, r1
 800ca9a:	b2d2      	uxtb	r2, r2
 800ca9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	330d      	adds	r3, #13
 800caa2:	7819      	ldrb	r1, [r3, #0]
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	330d      	adds	r3, #13
 800caa8:	781a      	ldrb	r2, [r3, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	330d      	adds	r3, #13
 800caae:	404a      	eors	r2, r1
 800cab0:	b2d2      	uxtb	r2, r2
 800cab2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	330e      	adds	r3, #14
 800cab8:	7819      	ldrb	r1, [r3, #0]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	330e      	adds	r3, #14
 800cabe:	781a      	ldrb	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	330e      	adds	r3, #14
 800cac4:	404a      	eors	r2, r1
 800cac6:	b2d2      	uxtb	r2, r2
 800cac8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	330f      	adds	r3, #15
 800cace:	7819      	ldrb	r1, [r3, #0]
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	330f      	adds	r3, #15
 800cad4:	781a      	ldrb	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	330f      	adds	r3, #15
 800cada:	404a      	eors	r2, r1
 800cadc:	b2d2      	uxtb	r2, r2
 800cade:	701a      	strb	r2, [r3, #0]
#endif
}
 800cae0:	46c0      	nop			; (mov r8, r8)
 800cae2:	46bd      	mov	sp, r7
 800cae4:	b002      	add	sp, #8
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	781a      	ldrb	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	4053      	eors	r3, r2
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	3301      	adds	r3, #1
 800cb08:	7819      	ldrb	r1, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	781a      	ldrb	r2, [r3, #0]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	3301      	adds	r3, #1
 800cb14:	404a      	eors	r2, r1
 800cb16:	b2d2      	uxtb	r2, r2
 800cb18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	3302      	adds	r3, #2
 800cb1e:	7819      	ldrb	r1, [r3, #0]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	3302      	adds	r3, #2
 800cb24:	781a      	ldrb	r2, [r3, #0]
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	3302      	adds	r3, #2
 800cb2a:	404a      	eors	r2, r1
 800cb2c:	b2d2      	uxtb	r2, r2
 800cb2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	3303      	adds	r3, #3
 800cb34:	7819      	ldrb	r1, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3303      	adds	r3, #3
 800cb3a:	781a      	ldrb	r2, [r3, #0]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3303      	adds	r3, #3
 800cb40:	404a      	eors	r2, r1
 800cb42:	b2d2      	uxtb	r2, r2
 800cb44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	3304      	adds	r3, #4
 800cb4a:	7819      	ldrb	r1, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3304      	adds	r3, #4
 800cb50:	781a      	ldrb	r2, [r3, #0]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3304      	adds	r3, #4
 800cb56:	404a      	eors	r2, r1
 800cb58:	b2d2      	uxtb	r2, r2
 800cb5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	3305      	adds	r3, #5
 800cb60:	7819      	ldrb	r1, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	3305      	adds	r3, #5
 800cb66:	781a      	ldrb	r2, [r3, #0]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	3305      	adds	r3, #5
 800cb6c:	404a      	eors	r2, r1
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	3306      	adds	r3, #6
 800cb76:	7819      	ldrb	r1, [r3, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	3306      	adds	r3, #6
 800cb7c:	781a      	ldrb	r2, [r3, #0]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3306      	adds	r3, #6
 800cb82:	404a      	eors	r2, r1
 800cb84:	b2d2      	uxtb	r2, r2
 800cb86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	3307      	adds	r3, #7
 800cb8c:	7819      	ldrb	r1, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3307      	adds	r3, #7
 800cb92:	781a      	ldrb	r2, [r3, #0]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3307      	adds	r3, #7
 800cb98:	404a      	eors	r2, r1
 800cb9a:	b2d2      	uxtb	r2, r2
 800cb9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	3308      	adds	r3, #8
 800cba2:	7819      	ldrb	r1, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	3308      	adds	r3, #8
 800cba8:	781a      	ldrb	r2, [r3, #0]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3308      	adds	r3, #8
 800cbae:	404a      	eors	r2, r1
 800cbb0:	b2d2      	uxtb	r2, r2
 800cbb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	3309      	adds	r3, #9
 800cbb8:	7819      	ldrb	r1, [r3, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	3309      	adds	r3, #9
 800cbbe:	781a      	ldrb	r2, [r3, #0]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	3309      	adds	r3, #9
 800cbc4:	404a      	eors	r2, r1
 800cbc6:	b2d2      	uxtb	r2, r2
 800cbc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	330a      	adds	r3, #10
 800cbce:	7819      	ldrb	r1, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	330a      	adds	r3, #10
 800cbd4:	781a      	ldrb	r2, [r3, #0]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	330a      	adds	r3, #10
 800cbda:	404a      	eors	r2, r1
 800cbdc:	b2d2      	uxtb	r2, r2
 800cbde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	330b      	adds	r3, #11
 800cbe4:	7819      	ldrb	r1, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	330b      	adds	r3, #11
 800cbea:	781a      	ldrb	r2, [r3, #0]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	330b      	adds	r3, #11
 800cbf0:	404a      	eors	r2, r1
 800cbf2:	b2d2      	uxtb	r2, r2
 800cbf4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	330c      	adds	r3, #12
 800cbfa:	7819      	ldrb	r1, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	330c      	adds	r3, #12
 800cc00:	781a      	ldrb	r2, [r3, #0]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	330c      	adds	r3, #12
 800cc06:	404a      	eors	r2, r1
 800cc08:	b2d2      	uxtb	r2, r2
 800cc0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	330d      	adds	r3, #13
 800cc10:	7819      	ldrb	r1, [r3, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	330d      	adds	r3, #13
 800cc16:	781a      	ldrb	r2, [r3, #0]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	330d      	adds	r3, #13
 800cc1c:	404a      	eors	r2, r1
 800cc1e:	b2d2      	uxtb	r2, r2
 800cc20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	330e      	adds	r3, #14
 800cc26:	7819      	ldrb	r1, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	330e      	adds	r3, #14
 800cc2c:	781a      	ldrb	r2, [r3, #0]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	330e      	adds	r3, #14
 800cc32:	404a      	eors	r2, r1
 800cc34:	b2d2      	uxtb	r2, r2
 800cc36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	330f      	adds	r3, #15
 800cc3c:	7819      	ldrb	r1, [r3, #0]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	330f      	adds	r3, #15
 800cc42:	781a      	ldrb	r2, [r3, #0]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	330f      	adds	r3, #15
 800cc48:	404a      	eors	r2, r1
 800cc4a:	b2d2      	uxtb	r2, r2
 800cc4c:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800cc4e:	46c0      	nop			; (mov r8, r8)
 800cc50:	46bd      	mov	sp, r7
 800cc52:	b004      	add	sp, #16
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b082      	sub	sp, #8
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	0011      	movs	r1, r2
 800cc66:	0018      	movs	r0, r3
 800cc68:	f7ff fe88 	bl	800c97c <xor_block>
}
 800cc6c:	46c0      	nop			; (mov r8, r8)
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	b002      	add	sp, #8
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	001a      	movs	r2, r3
 800cc82:	4b4c      	ldr	r3, [pc, #304]	; (800cdb4 <shift_sub_rows+0x140>)
 800cc84:	5c9a      	ldrb	r2, [r3, r2]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	701a      	strb	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	0019      	movs	r1, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	3304      	adds	r3, #4
 800cc96:	4a47      	ldr	r2, [pc, #284]	; (800cdb4 <shift_sub_rows+0x140>)
 800cc98:	5c52      	ldrb	r2, [r2, r1]
 800cc9a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3308      	adds	r3, #8
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	0019      	movs	r1, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	3308      	adds	r3, #8
 800cca8:	4a42      	ldr	r2, [pc, #264]	; (800cdb4 <shift_sub_rows+0x140>)
 800ccaa:	5c52      	ldrb	r2, [r2, r1]
 800ccac:	701a      	strb	r2, [r3, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	330c      	adds	r3, #12
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	0019      	movs	r1, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	330c      	adds	r3, #12
 800ccba:	4a3e      	ldr	r2, [pc, #248]	; (800cdb4 <shift_sub_rows+0x140>)
 800ccbc:	5c52      	ldrb	r2, [r2, r1]
 800ccbe:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ccc0:	200f      	movs	r0, #15
 800ccc2:	183b      	adds	r3, r7, r0
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	7852      	ldrb	r2, [r2, #1]
 800ccc8:	701a      	strb	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	3305      	adds	r3, #5
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	0019      	movs	r1, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	4a37      	ldr	r2, [pc, #220]	; (800cdb4 <shift_sub_rows+0x140>)
 800ccd8:	5c52      	ldrb	r2, [r2, r1]
 800ccda:	701a      	strb	r2, [r3, #0]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3309      	adds	r3, #9
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	0019      	movs	r1, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3305      	adds	r3, #5
 800cce8:	4a32      	ldr	r2, [pc, #200]	; (800cdb4 <shift_sub_rows+0x140>)
 800ccea:	5c52      	ldrb	r2, [r2, r1]
 800ccec:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	330d      	adds	r3, #13
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	0019      	movs	r1, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3309      	adds	r3, #9
 800ccfa:	4a2e      	ldr	r2, [pc, #184]	; (800cdb4 <shift_sub_rows+0x140>)
 800ccfc:	5c52      	ldrb	r2, [r2, r1]
 800ccfe:	701a      	strb	r2, [r3, #0]
 800cd00:	183b      	adds	r3, r7, r0
 800cd02:	781a      	ldrb	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	330d      	adds	r3, #13
 800cd08:	492a      	ldr	r1, [pc, #168]	; (800cdb4 <shift_sub_rows+0x140>)
 800cd0a:	5c8a      	ldrb	r2, [r1, r2]
 800cd0c:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800cd0e:	183b      	adds	r3, r7, r0
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	7892      	ldrb	r2, [r2, #2]
 800cd14:	701a      	strb	r2, [r3, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	330a      	adds	r3, #10
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	0019      	movs	r1, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3302      	adds	r3, #2
 800cd22:	4a24      	ldr	r2, [pc, #144]	; (800cdb4 <shift_sub_rows+0x140>)
 800cd24:	5c52      	ldrb	r2, [r2, r1]
 800cd26:	701a      	strb	r2, [r3, #0]
 800cd28:	183b      	adds	r3, r7, r0
 800cd2a:	781a      	ldrb	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	330a      	adds	r3, #10
 800cd30:	4920      	ldr	r1, [pc, #128]	; (800cdb4 <shift_sub_rows+0x140>)
 800cd32:	5c8a      	ldrb	r2, [r1, r2]
 800cd34:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800cd36:	183b      	adds	r3, r7, r0
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	7992      	ldrb	r2, [r2, #6]
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	330e      	adds	r3, #14
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	0019      	movs	r1, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	3306      	adds	r3, #6
 800cd4a:	4a1a      	ldr	r2, [pc, #104]	; (800cdb4 <shift_sub_rows+0x140>)
 800cd4c:	5c52      	ldrb	r2, [r2, r1]
 800cd4e:	701a      	strb	r2, [r3, #0]
 800cd50:	183b      	adds	r3, r7, r0
 800cd52:	781a      	ldrb	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	330e      	adds	r3, #14
 800cd58:	4916      	ldr	r1, [pc, #88]	; (800cdb4 <shift_sub_rows+0x140>)
 800cd5a:	5c8a      	ldrb	r2, [r1, r2]
 800cd5c:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800cd5e:	183b      	adds	r3, r7, r0
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	7bd2      	ldrb	r2, [r2, #15]
 800cd64:	701a      	strb	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	330b      	adds	r3, #11
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	0019      	movs	r1, r3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	330f      	adds	r3, #15
 800cd72:	4a10      	ldr	r2, [pc, #64]	; (800cdb4 <shift_sub_rows+0x140>)
 800cd74:	5c52      	ldrb	r2, [r2, r1]
 800cd76:	701a      	strb	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	3307      	adds	r3, #7
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	0019      	movs	r1, r3
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	330b      	adds	r3, #11
 800cd84:	4a0b      	ldr	r2, [pc, #44]	; (800cdb4 <shift_sub_rows+0x140>)
 800cd86:	5c52      	ldrb	r2, [r2, r1]
 800cd88:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	3303      	adds	r3, #3
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	0019      	movs	r1, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	3307      	adds	r3, #7
 800cd96:	4a07      	ldr	r2, [pc, #28]	; (800cdb4 <shift_sub_rows+0x140>)
 800cd98:	5c52      	ldrb	r2, [r2, r1]
 800cd9a:	701a      	strb	r2, [r3, #0]
 800cd9c:	183b      	adds	r3, r7, r0
 800cd9e:	781a      	ldrb	r2, [r3, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3303      	adds	r3, #3
 800cda4:	4903      	ldr	r1, [pc, #12]	; (800cdb4 <shift_sub_rows+0x140>)
 800cda6:	5c8a      	ldrb	r2, [r1, r2]
 800cda8:	701a      	strb	r2, [r3, #0]
}
 800cdaa:	46c0      	nop			; (mov r8, r8)
 800cdac:	46bd      	mov	sp, r7
 800cdae:	b004      	add	sp, #16
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	46c0      	nop			; (mov r8, r8)
 800cdb4:	0801f248 	.word	0x0801f248

0800cdb8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800cdb8:	b590      	push	{r4, r7, lr}
 800cdba:	b087      	sub	sp, #28
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	2408      	movs	r4, #8
 800cdc4:	193b      	adds	r3, r7, r4
 800cdc6:	0011      	movs	r1, r2
 800cdc8:	0018      	movs	r0, r3
 800cdca:	f7ff fd63 	bl	800c894 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800cdce:	0020      	movs	r0, r4
 800cdd0:	183b      	adds	r3, r7, r0
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	001a      	movs	r2, r3
 800cdd6:	4be8      	ldr	r3, [pc, #928]	; (800d178 <mix_sub_columns+0x3c0>)
 800cdd8:	5c9a      	ldrb	r2, [r3, r2]
 800cdda:	183b      	adds	r3, r7, r0
 800cddc:	795b      	ldrb	r3, [r3, #5]
 800cdde:	0019      	movs	r1, r3
 800cde0:	4be6      	ldr	r3, [pc, #920]	; (800d17c <mix_sub_columns+0x3c4>)
 800cde2:	5c5b      	ldrb	r3, [r3, r1]
 800cde4:	4053      	eors	r3, r2
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	183b      	adds	r3, r7, r0
 800cdea:	7a9b      	ldrb	r3, [r3, #10]
 800cdec:	0019      	movs	r1, r3
 800cdee:	4be4      	ldr	r3, [pc, #912]	; (800d180 <mix_sub_columns+0x3c8>)
 800cdf0:	5c5b      	ldrb	r3, [r3, r1]
 800cdf2:	4053      	eors	r3, r2
 800cdf4:	b2da      	uxtb	r2, r3
 800cdf6:	183b      	adds	r3, r7, r0
 800cdf8:	7bdb      	ldrb	r3, [r3, #15]
 800cdfa:	0019      	movs	r1, r3
 800cdfc:	4be0      	ldr	r3, [pc, #896]	; (800d180 <mix_sub_columns+0x3c8>)
 800cdfe:	5c5b      	ldrb	r3, [r3, r1]
 800ce00:	4053      	eors	r3, r2
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ce08:	183b      	adds	r3, r7, r0
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	001a      	movs	r2, r3
 800ce0e:	4bdc      	ldr	r3, [pc, #880]	; (800d180 <mix_sub_columns+0x3c8>)
 800ce10:	5c9a      	ldrb	r2, [r3, r2]
 800ce12:	183b      	adds	r3, r7, r0
 800ce14:	795b      	ldrb	r3, [r3, #5]
 800ce16:	0019      	movs	r1, r3
 800ce18:	4bd7      	ldr	r3, [pc, #860]	; (800d178 <mix_sub_columns+0x3c0>)
 800ce1a:	5c5b      	ldrb	r3, [r3, r1]
 800ce1c:	4053      	eors	r3, r2
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	183b      	adds	r3, r7, r0
 800ce22:	7a9b      	ldrb	r3, [r3, #10]
 800ce24:	0019      	movs	r1, r3
 800ce26:	4bd5      	ldr	r3, [pc, #852]	; (800d17c <mix_sub_columns+0x3c4>)
 800ce28:	5c5b      	ldrb	r3, [r3, r1]
 800ce2a:	4053      	eors	r3, r2
 800ce2c:	b2d9      	uxtb	r1, r3
 800ce2e:	183b      	adds	r3, r7, r0
 800ce30:	7bdb      	ldrb	r3, [r3, #15]
 800ce32:	001a      	movs	r2, r3
 800ce34:	4bd2      	ldr	r3, [pc, #840]	; (800d180 <mix_sub_columns+0x3c8>)
 800ce36:	5c9a      	ldrb	r2, [r3, r2]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	404a      	eors	r2, r1
 800ce3e:	b2d2      	uxtb	r2, r2
 800ce40:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ce42:	183b      	adds	r3, r7, r0
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	001a      	movs	r2, r3
 800ce48:	4bcd      	ldr	r3, [pc, #820]	; (800d180 <mix_sub_columns+0x3c8>)
 800ce4a:	5c9a      	ldrb	r2, [r3, r2]
 800ce4c:	183b      	adds	r3, r7, r0
 800ce4e:	795b      	ldrb	r3, [r3, #5]
 800ce50:	0019      	movs	r1, r3
 800ce52:	4bcb      	ldr	r3, [pc, #812]	; (800d180 <mix_sub_columns+0x3c8>)
 800ce54:	5c5b      	ldrb	r3, [r3, r1]
 800ce56:	4053      	eors	r3, r2
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	183b      	adds	r3, r7, r0
 800ce5c:	7a9b      	ldrb	r3, [r3, #10]
 800ce5e:	0019      	movs	r1, r3
 800ce60:	4bc5      	ldr	r3, [pc, #788]	; (800d178 <mix_sub_columns+0x3c0>)
 800ce62:	5c5b      	ldrb	r3, [r3, r1]
 800ce64:	4053      	eors	r3, r2
 800ce66:	b2d9      	uxtb	r1, r3
 800ce68:	183b      	adds	r3, r7, r0
 800ce6a:	7bdb      	ldrb	r3, [r3, #15]
 800ce6c:	001a      	movs	r2, r3
 800ce6e:	4bc3      	ldr	r3, [pc, #780]	; (800d17c <mix_sub_columns+0x3c4>)
 800ce70:	5c9a      	ldrb	r2, [r3, r2]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	3302      	adds	r3, #2
 800ce76:	404a      	eors	r2, r1
 800ce78:	b2d2      	uxtb	r2, r2
 800ce7a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ce7c:	183b      	adds	r3, r7, r0
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	001a      	movs	r2, r3
 800ce82:	4bbe      	ldr	r3, [pc, #760]	; (800d17c <mix_sub_columns+0x3c4>)
 800ce84:	5c9a      	ldrb	r2, [r3, r2]
 800ce86:	183b      	adds	r3, r7, r0
 800ce88:	795b      	ldrb	r3, [r3, #5]
 800ce8a:	0019      	movs	r1, r3
 800ce8c:	4bbc      	ldr	r3, [pc, #752]	; (800d180 <mix_sub_columns+0x3c8>)
 800ce8e:	5c5b      	ldrb	r3, [r3, r1]
 800ce90:	4053      	eors	r3, r2
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	183b      	adds	r3, r7, r0
 800ce96:	7a9b      	ldrb	r3, [r3, #10]
 800ce98:	0019      	movs	r1, r3
 800ce9a:	4bb9      	ldr	r3, [pc, #740]	; (800d180 <mix_sub_columns+0x3c8>)
 800ce9c:	5c5b      	ldrb	r3, [r3, r1]
 800ce9e:	4053      	eors	r3, r2
 800cea0:	b2d9      	uxtb	r1, r3
 800cea2:	183b      	adds	r3, r7, r0
 800cea4:	7bdb      	ldrb	r3, [r3, #15]
 800cea6:	001a      	movs	r2, r3
 800cea8:	4bb3      	ldr	r3, [pc, #716]	; (800d178 <mix_sub_columns+0x3c0>)
 800ceaa:	5c9a      	ldrb	r2, [r3, r2]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	3303      	adds	r3, #3
 800ceb0:	404a      	eors	r2, r1
 800ceb2:	b2d2      	uxtb	r2, r2
 800ceb4:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ceb6:	183b      	adds	r3, r7, r0
 800ceb8:	791b      	ldrb	r3, [r3, #4]
 800ceba:	001a      	movs	r2, r3
 800cebc:	4bae      	ldr	r3, [pc, #696]	; (800d178 <mix_sub_columns+0x3c0>)
 800cebe:	5c9a      	ldrb	r2, [r3, r2]
 800cec0:	183b      	adds	r3, r7, r0
 800cec2:	7a5b      	ldrb	r3, [r3, #9]
 800cec4:	0019      	movs	r1, r3
 800cec6:	4bad      	ldr	r3, [pc, #692]	; (800d17c <mix_sub_columns+0x3c4>)
 800cec8:	5c5b      	ldrb	r3, [r3, r1]
 800ceca:	4053      	eors	r3, r2
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	183b      	adds	r3, r7, r0
 800ced0:	7b9b      	ldrb	r3, [r3, #14]
 800ced2:	0019      	movs	r1, r3
 800ced4:	4baa      	ldr	r3, [pc, #680]	; (800d180 <mix_sub_columns+0x3c8>)
 800ced6:	5c5b      	ldrb	r3, [r3, r1]
 800ced8:	4053      	eors	r3, r2
 800ceda:	b2d9      	uxtb	r1, r3
 800cedc:	183b      	adds	r3, r7, r0
 800cede:	78db      	ldrb	r3, [r3, #3]
 800cee0:	001a      	movs	r2, r3
 800cee2:	4ba7      	ldr	r3, [pc, #668]	; (800d180 <mix_sub_columns+0x3c8>)
 800cee4:	5c9a      	ldrb	r2, [r3, r2]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	3304      	adds	r3, #4
 800ceea:	404a      	eors	r2, r1
 800ceec:	b2d2      	uxtb	r2, r2
 800ceee:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cef0:	183b      	adds	r3, r7, r0
 800cef2:	791b      	ldrb	r3, [r3, #4]
 800cef4:	001a      	movs	r2, r3
 800cef6:	4ba2      	ldr	r3, [pc, #648]	; (800d180 <mix_sub_columns+0x3c8>)
 800cef8:	5c9a      	ldrb	r2, [r3, r2]
 800cefa:	183b      	adds	r3, r7, r0
 800cefc:	7a5b      	ldrb	r3, [r3, #9]
 800cefe:	0019      	movs	r1, r3
 800cf00:	4b9d      	ldr	r3, [pc, #628]	; (800d178 <mix_sub_columns+0x3c0>)
 800cf02:	5c5b      	ldrb	r3, [r3, r1]
 800cf04:	4053      	eors	r3, r2
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	183b      	adds	r3, r7, r0
 800cf0a:	7b9b      	ldrb	r3, [r3, #14]
 800cf0c:	0019      	movs	r1, r3
 800cf0e:	4b9b      	ldr	r3, [pc, #620]	; (800d17c <mix_sub_columns+0x3c4>)
 800cf10:	5c5b      	ldrb	r3, [r3, r1]
 800cf12:	4053      	eors	r3, r2
 800cf14:	b2d9      	uxtb	r1, r3
 800cf16:	183b      	adds	r3, r7, r0
 800cf18:	78db      	ldrb	r3, [r3, #3]
 800cf1a:	001a      	movs	r2, r3
 800cf1c:	4b98      	ldr	r3, [pc, #608]	; (800d180 <mix_sub_columns+0x3c8>)
 800cf1e:	5c9a      	ldrb	r2, [r3, r2]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	3305      	adds	r3, #5
 800cf24:	404a      	eors	r2, r1
 800cf26:	b2d2      	uxtb	r2, r2
 800cf28:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800cf2a:	183b      	adds	r3, r7, r0
 800cf2c:	791b      	ldrb	r3, [r3, #4]
 800cf2e:	001a      	movs	r2, r3
 800cf30:	4b93      	ldr	r3, [pc, #588]	; (800d180 <mix_sub_columns+0x3c8>)
 800cf32:	5c9a      	ldrb	r2, [r3, r2]
 800cf34:	183b      	adds	r3, r7, r0
 800cf36:	7a5b      	ldrb	r3, [r3, #9]
 800cf38:	0019      	movs	r1, r3
 800cf3a:	4b91      	ldr	r3, [pc, #580]	; (800d180 <mix_sub_columns+0x3c8>)
 800cf3c:	5c5b      	ldrb	r3, [r3, r1]
 800cf3e:	4053      	eors	r3, r2
 800cf40:	b2da      	uxtb	r2, r3
 800cf42:	183b      	adds	r3, r7, r0
 800cf44:	7b9b      	ldrb	r3, [r3, #14]
 800cf46:	0019      	movs	r1, r3
 800cf48:	4b8b      	ldr	r3, [pc, #556]	; (800d178 <mix_sub_columns+0x3c0>)
 800cf4a:	5c5b      	ldrb	r3, [r3, r1]
 800cf4c:	4053      	eors	r3, r2
 800cf4e:	b2d9      	uxtb	r1, r3
 800cf50:	183b      	adds	r3, r7, r0
 800cf52:	78db      	ldrb	r3, [r3, #3]
 800cf54:	001a      	movs	r2, r3
 800cf56:	4b89      	ldr	r3, [pc, #548]	; (800d17c <mix_sub_columns+0x3c4>)
 800cf58:	5c9a      	ldrb	r2, [r3, r2]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	3306      	adds	r3, #6
 800cf5e:	404a      	eors	r2, r1
 800cf60:	b2d2      	uxtb	r2, r2
 800cf62:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800cf64:	183b      	adds	r3, r7, r0
 800cf66:	791b      	ldrb	r3, [r3, #4]
 800cf68:	001a      	movs	r2, r3
 800cf6a:	4b84      	ldr	r3, [pc, #528]	; (800d17c <mix_sub_columns+0x3c4>)
 800cf6c:	5c9a      	ldrb	r2, [r3, r2]
 800cf6e:	183b      	adds	r3, r7, r0
 800cf70:	7a5b      	ldrb	r3, [r3, #9]
 800cf72:	0019      	movs	r1, r3
 800cf74:	4b82      	ldr	r3, [pc, #520]	; (800d180 <mix_sub_columns+0x3c8>)
 800cf76:	5c5b      	ldrb	r3, [r3, r1]
 800cf78:	4053      	eors	r3, r2
 800cf7a:	b2da      	uxtb	r2, r3
 800cf7c:	183b      	adds	r3, r7, r0
 800cf7e:	7b9b      	ldrb	r3, [r3, #14]
 800cf80:	0019      	movs	r1, r3
 800cf82:	4b7f      	ldr	r3, [pc, #508]	; (800d180 <mix_sub_columns+0x3c8>)
 800cf84:	5c5b      	ldrb	r3, [r3, r1]
 800cf86:	4053      	eors	r3, r2
 800cf88:	b2d9      	uxtb	r1, r3
 800cf8a:	183b      	adds	r3, r7, r0
 800cf8c:	78db      	ldrb	r3, [r3, #3]
 800cf8e:	001a      	movs	r2, r3
 800cf90:	4b79      	ldr	r3, [pc, #484]	; (800d178 <mix_sub_columns+0x3c0>)
 800cf92:	5c9a      	ldrb	r2, [r3, r2]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3307      	adds	r3, #7
 800cf98:	404a      	eors	r2, r1
 800cf9a:	b2d2      	uxtb	r2, r2
 800cf9c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800cf9e:	183b      	adds	r3, r7, r0
 800cfa0:	7a1b      	ldrb	r3, [r3, #8]
 800cfa2:	001a      	movs	r2, r3
 800cfa4:	4b74      	ldr	r3, [pc, #464]	; (800d178 <mix_sub_columns+0x3c0>)
 800cfa6:	5c9a      	ldrb	r2, [r3, r2]
 800cfa8:	183b      	adds	r3, r7, r0
 800cfaa:	7b5b      	ldrb	r3, [r3, #13]
 800cfac:	0019      	movs	r1, r3
 800cfae:	4b73      	ldr	r3, [pc, #460]	; (800d17c <mix_sub_columns+0x3c4>)
 800cfb0:	5c5b      	ldrb	r3, [r3, r1]
 800cfb2:	4053      	eors	r3, r2
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	183b      	adds	r3, r7, r0
 800cfb8:	789b      	ldrb	r3, [r3, #2]
 800cfba:	0019      	movs	r1, r3
 800cfbc:	4b70      	ldr	r3, [pc, #448]	; (800d180 <mix_sub_columns+0x3c8>)
 800cfbe:	5c5b      	ldrb	r3, [r3, r1]
 800cfc0:	4053      	eors	r3, r2
 800cfc2:	b2d9      	uxtb	r1, r3
 800cfc4:	183b      	adds	r3, r7, r0
 800cfc6:	79db      	ldrb	r3, [r3, #7]
 800cfc8:	001a      	movs	r2, r3
 800cfca:	4b6d      	ldr	r3, [pc, #436]	; (800d180 <mix_sub_columns+0x3c8>)
 800cfcc:	5c9a      	ldrb	r2, [r3, r2]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	404a      	eors	r2, r1
 800cfd4:	b2d2      	uxtb	r2, r2
 800cfd6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800cfd8:	183b      	adds	r3, r7, r0
 800cfda:	7a1b      	ldrb	r3, [r3, #8]
 800cfdc:	001a      	movs	r2, r3
 800cfde:	4b68      	ldr	r3, [pc, #416]	; (800d180 <mix_sub_columns+0x3c8>)
 800cfe0:	5c9a      	ldrb	r2, [r3, r2]
 800cfe2:	183b      	adds	r3, r7, r0
 800cfe4:	7b5b      	ldrb	r3, [r3, #13]
 800cfe6:	0019      	movs	r1, r3
 800cfe8:	4b63      	ldr	r3, [pc, #396]	; (800d178 <mix_sub_columns+0x3c0>)
 800cfea:	5c5b      	ldrb	r3, [r3, r1]
 800cfec:	4053      	eors	r3, r2
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	183b      	adds	r3, r7, r0
 800cff2:	789b      	ldrb	r3, [r3, #2]
 800cff4:	0019      	movs	r1, r3
 800cff6:	4b61      	ldr	r3, [pc, #388]	; (800d17c <mix_sub_columns+0x3c4>)
 800cff8:	5c5b      	ldrb	r3, [r3, r1]
 800cffa:	4053      	eors	r3, r2
 800cffc:	b2d9      	uxtb	r1, r3
 800cffe:	183b      	adds	r3, r7, r0
 800d000:	79db      	ldrb	r3, [r3, #7]
 800d002:	001a      	movs	r2, r3
 800d004:	4b5e      	ldr	r3, [pc, #376]	; (800d180 <mix_sub_columns+0x3c8>)
 800d006:	5c9a      	ldrb	r2, [r3, r2]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	3309      	adds	r3, #9
 800d00c:	404a      	eors	r2, r1
 800d00e:	b2d2      	uxtb	r2, r2
 800d010:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d012:	183b      	adds	r3, r7, r0
 800d014:	7a1b      	ldrb	r3, [r3, #8]
 800d016:	001a      	movs	r2, r3
 800d018:	4b59      	ldr	r3, [pc, #356]	; (800d180 <mix_sub_columns+0x3c8>)
 800d01a:	5c9a      	ldrb	r2, [r3, r2]
 800d01c:	183b      	adds	r3, r7, r0
 800d01e:	7b5b      	ldrb	r3, [r3, #13]
 800d020:	0019      	movs	r1, r3
 800d022:	4b57      	ldr	r3, [pc, #348]	; (800d180 <mix_sub_columns+0x3c8>)
 800d024:	5c5b      	ldrb	r3, [r3, r1]
 800d026:	4053      	eors	r3, r2
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	183b      	adds	r3, r7, r0
 800d02c:	789b      	ldrb	r3, [r3, #2]
 800d02e:	0019      	movs	r1, r3
 800d030:	4b51      	ldr	r3, [pc, #324]	; (800d178 <mix_sub_columns+0x3c0>)
 800d032:	5c5b      	ldrb	r3, [r3, r1]
 800d034:	4053      	eors	r3, r2
 800d036:	b2d9      	uxtb	r1, r3
 800d038:	183b      	adds	r3, r7, r0
 800d03a:	79db      	ldrb	r3, [r3, #7]
 800d03c:	001a      	movs	r2, r3
 800d03e:	4b4f      	ldr	r3, [pc, #316]	; (800d17c <mix_sub_columns+0x3c4>)
 800d040:	5c9a      	ldrb	r2, [r3, r2]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	330a      	adds	r3, #10
 800d046:	404a      	eors	r2, r1
 800d048:	b2d2      	uxtb	r2, r2
 800d04a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800d04c:	183b      	adds	r3, r7, r0
 800d04e:	7a1b      	ldrb	r3, [r3, #8]
 800d050:	001a      	movs	r2, r3
 800d052:	4b4a      	ldr	r3, [pc, #296]	; (800d17c <mix_sub_columns+0x3c4>)
 800d054:	5c9a      	ldrb	r2, [r3, r2]
 800d056:	183b      	adds	r3, r7, r0
 800d058:	7b5b      	ldrb	r3, [r3, #13]
 800d05a:	0019      	movs	r1, r3
 800d05c:	4b48      	ldr	r3, [pc, #288]	; (800d180 <mix_sub_columns+0x3c8>)
 800d05e:	5c5b      	ldrb	r3, [r3, r1]
 800d060:	4053      	eors	r3, r2
 800d062:	b2da      	uxtb	r2, r3
 800d064:	183b      	adds	r3, r7, r0
 800d066:	789b      	ldrb	r3, [r3, #2]
 800d068:	0019      	movs	r1, r3
 800d06a:	4b45      	ldr	r3, [pc, #276]	; (800d180 <mix_sub_columns+0x3c8>)
 800d06c:	5c5b      	ldrb	r3, [r3, r1]
 800d06e:	4053      	eors	r3, r2
 800d070:	b2d9      	uxtb	r1, r3
 800d072:	183b      	adds	r3, r7, r0
 800d074:	79db      	ldrb	r3, [r3, #7]
 800d076:	001a      	movs	r2, r3
 800d078:	4b3f      	ldr	r3, [pc, #252]	; (800d178 <mix_sub_columns+0x3c0>)
 800d07a:	5c9a      	ldrb	r2, [r3, r2]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	330b      	adds	r3, #11
 800d080:	404a      	eors	r2, r1
 800d082:	b2d2      	uxtb	r2, r2
 800d084:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800d086:	183b      	adds	r3, r7, r0
 800d088:	7b1b      	ldrb	r3, [r3, #12]
 800d08a:	001a      	movs	r2, r3
 800d08c:	4b3a      	ldr	r3, [pc, #232]	; (800d178 <mix_sub_columns+0x3c0>)
 800d08e:	5c9a      	ldrb	r2, [r3, r2]
 800d090:	183b      	adds	r3, r7, r0
 800d092:	785b      	ldrb	r3, [r3, #1]
 800d094:	0019      	movs	r1, r3
 800d096:	4b39      	ldr	r3, [pc, #228]	; (800d17c <mix_sub_columns+0x3c4>)
 800d098:	5c5b      	ldrb	r3, [r3, r1]
 800d09a:	4053      	eors	r3, r2
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	183b      	adds	r3, r7, r0
 800d0a0:	799b      	ldrb	r3, [r3, #6]
 800d0a2:	0019      	movs	r1, r3
 800d0a4:	4b36      	ldr	r3, [pc, #216]	; (800d180 <mix_sub_columns+0x3c8>)
 800d0a6:	5c5b      	ldrb	r3, [r3, r1]
 800d0a8:	4053      	eors	r3, r2
 800d0aa:	b2d9      	uxtb	r1, r3
 800d0ac:	183b      	adds	r3, r7, r0
 800d0ae:	7adb      	ldrb	r3, [r3, #11]
 800d0b0:	001a      	movs	r2, r3
 800d0b2:	4b33      	ldr	r3, [pc, #204]	; (800d180 <mix_sub_columns+0x3c8>)
 800d0b4:	5c9a      	ldrb	r2, [r3, r2]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	330c      	adds	r3, #12
 800d0ba:	404a      	eors	r2, r1
 800d0bc:	b2d2      	uxtb	r2, r2
 800d0be:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800d0c0:	183b      	adds	r3, r7, r0
 800d0c2:	7b1b      	ldrb	r3, [r3, #12]
 800d0c4:	001a      	movs	r2, r3
 800d0c6:	4b2e      	ldr	r3, [pc, #184]	; (800d180 <mix_sub_columns+0x3c8>)
 800d0c8:	5c9a      	ldrb	r2, [r3, r2]
 800d0ca:	183b      	adds	r3, r7, r0
 800d0cc:	785b      	ldrb	r3, [r3, #1]
 800d0ce:	0019      	movs	r1, r3
 800d0d0:	4b29      	ldr	r3, [pc, #164]	; (800d178 <mix_sub_columns+0x3c0>)
 800d0d2:	5c5b      	ldrb	r3, [r3, r1]
 800d0d4:	4053      	eors	r3, r2
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	183b      	adds	r3, r7, r0
 800d0da:	799b      	ldrb	r3, [r3, #6]
 800d0dc:	0019      	movs	r1, r3
 800d0de:	4b27      	ldr	r3, [pc, #156]	; (800d17c <mix_sub_columns+0x3c4>)
 800d0e0:	5c5b      	ldrb	r3, [r3, r1]
 800d0e2:	4053      	eors	r3, r2
 800d0e4:	b2d9      	uxtb	r1, r3
 800d0e6:	183b      	adds	r3, r7, r0
 800d0e8:	7adb      	ldrb	r3, [r3, #11]
 800d0ea:	001a      	movs	r2, r3
 800d0ec:	4b24      	ldr	r3, [pc, #144]	; (800d180 <mix_sub_columns+0x3c8>)
 800d0ee:	5c9a      	ldrb	r2, [r3, r2]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	330d      	adds	r3, #13
 800d0f4:	404a      	eors	r2, r1
 800d0f6:	b2d2      	uxtb	r2, r2
 800d0f8:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800d0fa:	183b      	adds	r3, r7, r0
 800d0fc:	7b1b      	ldrb	r3, [r3, #12]
 800d0fe:	001a      	movs	r2, r3
 800d100:	4b1f      	ldr	r3, [pc, #124]	; (800d180 <mix_sub_columns+0x3c8>)
 800d102:	5c9a      	ldrb	r2, [r3, r2]
 800d104:	183b      	adds	r3, r7, r0
 800d106:	785b      	ldrb	r3, [r3, #1]
 800d108:	0019      	movs	r1, r3
 800d10a:	4b1d      	ldr	r3, [pc, #116]	; (800d180 <mix_sub_columns+0x3c8>)
 800d10c:	5c5b      	ldrb	r3, [r3, r1]
 800d10e:	4053      	eors	r3, r2
 800d110:	b2da      	uxtb	r2, r3
 800d112:	183b      	adds	r3, r7, r0
 800d114:	799b      	ldrb	r3, [r3, #6]
 800d116:	0019      	movs	r1, r3
 800d118:	4b17      	ldr	r3, [pc, #92]	; (800d178 <mix_sub_columns+0x3c0>)
 800d11a:	5c5b      	ldrb	r3, [r3, r1]
 800d11c:	4053      	eors	r3, r2
 800d11e:	b2d9      	uxtb	r1, r3
 800d120:	183b      	adds	r3, r7, r0
 800d122:	7adb      	ldrb	r3, [r3, #11]
 800d124:	001a      	movs	r2, r3
 800d126:	4b15      	ldr	r3, [pc, #84]	; (800d17c <mix_sub_columns+0x3c4>)
 800d128:	5c9a      	ldrb	r2, [r3, r2]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	330e      	adds	r3, #14
 800d12e:	404a      	eors	r2, r1
 800d130:	b2d2      	uxtb	r2, r2
 800d132:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d134:	183b      	adds	r3, r7, r0
 800d136:	7b1b      	ldrb	r3, [r3, #12]
 800d138:	001a      	movs	r2, r3
 800d13a:	4b10      	ldr	r3, [pc, #64]	; (800d17c <mix_sub_columns+0x3c4>)
 800d13c:	5c9a      	ldrb	r2, [r3, r2]
 800d13e:	183b      	adds	r3, r7, r0
 800d140:	785b      	ldrb	r3, [r3, #1]
 800d142:	0019      	movs	r1, r3
 800d144:	4b0e      	ldr	r3, [pc, #56]	; (800d180 <mix_sub_columns+0x3c8>)
 800d146:	5c5b      	ldrb	r3, [r3, r1]
 800d148:	4053      	eors	r3, r2
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	183b      	adds	r3, r7, r0
 800d14e:	799b      	ldrb	r3, [r3, #6]
 800d150:	0019      	movs	r1, r3
 800d152:	4b0b      	ldr	r3, [pc, #44]	; (800d180 <mix_sub_columns+0x3c8>)
 800d154:	5c5b      	ldrb	r3, [r3, r1]
 800d156:	4053      	eors	r3, r2
 800d158:	b2d9      	uxtb	r1, r3
 800d15a:	183b      	adds	r3, r7, r0
 800d15c:	7adb      	ldrb	r3, [r3, #11]
 800d15e:	001a      	movs	r2, r3
 800d160:	4b05      	ldr	r3, [pc, #20]	; (800d178 <mix_sub_columns+0x3c0>)
 800d162:	5c9a      	ldrb	r2, [r3, r2]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	330f      	adds	r3, #15
 800d168:	404a      	eors	r2, r1
 800d16a:	b2d2      	uxtb	r2, r2
 800d16c:	701a      	strb	r2, [r3, #0]
  }
 800d16e:	46c0      	nop			; (mov r8, r8)
 800d170:	46bd      	mov	sp, r7
 800d172:	b007      	add	sp, #28
 800d174:	bd90      	pop	{r4, r7, pc}
 800d176:	46c0      	nop			; (mov r8, r8)
 800d178:	0801f348 	.word	0x0801f348
 800d17c:	0801f448 	.word	0x0801f448
 800d180:	0801f248 	.word	0x0801f248

0800d184 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d186:	b087      	sub	sp, #28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	607a      	str	r2, [r7, #4]
 800d18e:	200b      	movs	r0, #11
 800d190:	183b      	adds	r3, r7, r0
 800d192:	1c0a      	adds	r2, r1, #0
 800d194:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d196:	183b      	adds	r3, r7, r0
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	3b10      	subs	r3, #16
 800d19c:	2210      	movs	r2, #16
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	4192      	sbcs	r2, r2
 800d1a2:	4252      	negs	r2, r2
 800d1a4:	b2d2      	uxtb	r2, r2
 800d1a6:	2a00      	cmp	r2, #0
 800d1a8:	d109      	bne.n	800d1be <lorawan_aes_set_key+0x3a>
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	409a      	lsls	r2, r3
 800d1ae:	0013      	movs	r3, r2
 800d1b0:	4a90      	ldr	r2, [pc, #576]	; (800d3f4 <lorawan_aes_set_key+0x270>)
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	1e5a      	subs	r2, r3, #1
 800d1b6:	4193      	sbcs	r3, r2
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d105      	bne.n	800d1ca <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	22f0      	movs	r2, #240	; 0xf0
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800d1c6:	23ff      	movs	r3, #255	; 0xff
 800d1c8:	e10f      	b.n	800d3ea <lorawan_aes_set_key+0x266>
        break;
 800d1ca:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	240b      	movs	r4, #11
 800d1d0:	193b      	adds	r3, r7, r4
 800d1d2:	781a      	ldrb	r2, [r3, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	0019      	movs	r1, r3
 800d1d8:	f7ff fbb4 	bl	800c944 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d1dc:	0020      	movs	r0, r4
 800d1de:	183b      	adds	r3, r7, r0
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	331c      	adds	r3, #28
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	2111      	movs	r1, #17
 800d1e8:	187b      	adds	r3, r7, r1
 800d1ea:	0092      	lsls	r2, r2, #2
 800d1ec:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800d1ee:	187b      	adds	r3, r7, r1
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	091b      	lsrs	r3, r3, #4
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	b2d9      	uxtb	r1, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	22f0      	movs	r2, #240	; 0xf0
 800d1fe:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d200:	2317      	movs	r3, #23
 800d202:	18fb      	adds	r3, r7, r3
 800d204:	183a      	adds	r2, r7, r0
 800d206:	7812      	ldrb	r2, [r2, #0]
 800d208:	701a      	strb	r2, [r3, #0]
 800d20a:	2316      	movs	r3, #22
 800d20c:	18fb      	adds	r3, r7, r3
 800d20e:	2201      	movs	r2, #1
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	e0e0      	b.n	800d3d6 <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d214:	2017      	movs	r0, #23
 800d216:	183b      	adds	r3, r7, r0
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	1f1a      	subs	r2, r3, #4
 800d21c:	2415      	movs	r4, #21
 800d21e:	193b      	adds	r3, r7, r4
 800d220:	6879      	ldr	r1, [r7, #4]
 800d222:	5c8a      	ldrb	r2, [r1, r2]
 800d224:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800d226:	183b      	adds	r3, r7, r0
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	1eda      	subs	r2, r3, #3
 800d22c:	2514      	movs	r5, #20
 800d22e:	197b      	adds	r3, r7, r5
 800d230:	6879      	ldr	r1, [r7, #4]
 800d232:	5c8a      	ldrb	r2, [r1, r2]
 800d234:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800d236:	183b      	adds	r3, r7, r0
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	1e9a      	subs	r2, r3, #2
 800d23c:	2613      	movs	r6, #19
 800d23e:	19bb      	adds	r3, r7, r6
 800d240:	6879      	ldr	r1, [r7, #4]
 800d242:	5c8a      	ldrb	r2, [r1, r2]
 800d244:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800d246:	183b      	adds	r3, r7, r0
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	1e5a      	subs	r2, r3, #1
 800d24c:	2312      	movs	r3, #18
 800d24e:	18fb      	adds	r3, r7, r3
 800d250:	6879      	ldr	r1, [r7, #4]
 800d252:	5c8a      	ldrb	r2, [r1, r2]
 800d254:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800d256:	183a      	adds	r2, r7, r0
 800d258:	210b      	movs	r1, #11
 800d25a:	187b      	adds	r3, r7, r1
 800d25c:	7812      	ldrb	r2, [r2, #0]
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	0019      	movs	r1, r3
 800d262:	0010      	movs	r0, r2
 800d264:	f7f2 ffe8 	bl	8000238 <__aeabi_uidivmod>
 800d268:	000b      	movs	r3, r1
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d13b      	bne.n	800d2e8 <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800d270:	2210      	movs	r2, #16
 800d272:	18bb      	adds	r3, r7, r2
 800d274:	193a      	adds	r2, r7, r4
 800d276:	7812      	ldrb	r2, [r2, #0]
 800d278:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800d27a:	197b      	adds	r3, r7, r5
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	4a5e      	ldr	r2, [pc, #376]	; (800d3f8 <lorawan_aes_set_key+0x274>)
 800d280:	5cd1      	ldrb	r1, [r2, r3]
 800d282:	193b      	adds	r3, r7, r4
 800d284:	2016      	movs	r0, #22
 800d286:	183a      	adds	r2, r7, r0
 800d288:	7812      	ldrb	r2, [r2, #0]
 800d28a:	404a      	eors	r2, r1
 800d28c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800d28e:	19bb      	adds	r3, r7, r6
 800d290:	781a      	ldrb	r2, [r3, #0]
 800d292:	197b      	adds	r3, r7, r5
 800d294:	4958      	ldr	r1, [pc, #352]	; (800d3f8 <lorawan_aes_set_key+0x274>)
 800d296:	5c8a      	ldrb	r2, [r1, r2]
 800d298:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800d29a:	2412      	movs	r4, #18
 800d29c:	193b      	adds	r3, r7, r4
 800d29e:	781a      	ldrb	r2, [r3, #0]
 800d2a0:	19bb      	adds	r3, r7, r6
 800d2a2:	4955      	ldr	r1, [pc, #340]	; (800d3f8 <lorawan_aes_set_key+0x274>)
 800d2a4:	5c8a      	ldrb	r2, [r1, r2]
 800d2a6:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800d2a8:	2210      	movs	r2, #16
 800d2aa:	18bb      	adds	r3, r7, r2
 800d2ac:	781a      	ldrb	r2, [r3, #0]
 800d2ae:	193b      	adds	r3, r7, r4
 800d2b0:	4951      	ldr	r1, [pc, #324]	; (800d3f8 <lorawan_aes_set_key+0x274>)
 800d2b2:	5c8a      	ldrb	r2, [r1, r2]
 800d2b4:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800d2b6:	183b      	adds	r3, r7, r0
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	b25a      	sxtb	r2, r3
 800d2be:	0004      	movs	r4, r0
 800d2c0:	183b      	adds	r3, r7, r0
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	09db      	lsrs	r3, r3, #7
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	1c19      	adds	r1, r3, #0
 800d2ca:	1c0b      	adds	r3, r1, #0
 800d2cc:	18db      	adds	r3, r3, r3
 800d2ce:	185b      	adds	r3, r3, r1
 800d2d0:	1c19      	adds	r1, r3, #0
 800d2d2:	00c8      	lsls	r0, r1, #3
 800d2d4:	1c19      	adds	r1, r3, #0
 800d2d6:	1c03      	adds	r3, r0, #0
 800d2d8:	18cb      	adds	r3, r1, r3
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	b25b      	sxtb	r3, r3
 800d2de:	4053      	eors	r3, r2
 800d2e0:	b25a      	sxtb	r2, r3
 800d2e2:	193b      	adds	r3, r7, r4
 800d2e4:	701a      	strb	r2, [r3, #0]
 800d2e6:	e02d      	b.n	800d344 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d2e8:	210b      	movs	r1, #11
 800d2ea:	187b      	adds	r3, r7, r1
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2b18      	cmp	r3, #24
 800d2f0:	d928      	bls.n	800d344 <lorawan_aes_set_key+0x1c0>
 800d2f2:	2317      	movs	r3, #23
 800d2f4:	18fa      	adds	r2, r7, r3
 800d2f6:	187b      	adds	r3, r7, r1
 800d2f8:	7812      	ldrb	r2, [r2, #0]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	0019      	movs	r1, r3
 800d2fe:	0010      	movs	r0, r2
 800d300:	f7f2 ff9a 	bl	8000238 <__aeabi_uidivmod>
 800d304:	000b      	movs	r3, r1
 800d306:	b2db      	uxtb	r3, r3
 800d308:	2b10      	cmp	r3, #16
 800d30a:	d11b      	bne.n	800d344 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800d30c:	2115      	movs	r1, #21
 800d30e:	187b      	adds	r3, r7, r1
 800d310:	781a      	ldrb	r2, [r3, #0]
 800d312:	187b      	adds	r3, r7, r1
 800d314:	4938      	ldr	r1, [pc, #224]	; (800d3f8 <lorawan_aes_set_key+0x274>)
 800d316:	5c8a      	ldrb	r2, [r1, r2]
 800d318:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800d31a:	2114      	movs	r1, #20
 800d31c:	187b      	adds	r3, r7, r1
 800d31e:	781a      	ldrb	r2, [r3, #0]
 800d320:	187b      	adds	r3, r7, r1
 800d322:	4935      	ldr	r1, [pc, #212]	; (800d3f8 <lorawan_aes_set_key+0x274>)
 800d324:	5c8a      	ldrb	r2, [r1, r2]
 800d326:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800d328:	2113      	movs	r1, #19
 800d32a:	187b      	adds	r3, r7, r1
 800d32c:	781a      	ldrb	r2, [r3, #0]
 800d32e:	187b      	adds	r3, r7, r1
 800d330:	4931      	ldr	r1, [pc, #196]	; (800d3f8 <lorawan_aes_set_key+0x274>)
 800d332:	5c8a      	ldrb	r2, [r1, r2]
 800d334:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800d336:	2112      	movs	r1, #18
 800d338:	187b      	adds	r3, r7, r1
 800d33a:	781a      	ldrb	r2, [r3, #0]
 800d33c:	187b      	adds	r3, r7, r1
 800d33e:	492e      	ldr	r1, [pc, #184]	; (800d3f8 <lorawan_aes_set_key+0x274>)
 800d340:	5c8a      	ldrb	r2, [r1, r2]
 800d342:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800d344:	2410      	movs	r4, #16
 800d346:	193b      	adds	r3, r7, r4
 800d348:	2017      	movs	r0, #23
 800d34a:	1839      	adds	r1, r7, r0
 800d34c:	220b      	movs	r2, #11
 800d34e:	18ba      	adds	r2, r7, r2
 800d350:	7809      	ldrb	r1, [r1, #0]
 800d352:	7812      	ldrb	r2, [r2, #0]
 800d354:	1a8a      	subs	r2, r1, r2
 800d356:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d358:	193b      	adds	r3, r7, r4
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	5cd1      	ldrb	r1, [r2, r3]
 800d360:	183b      	adds	r3, r7, r0
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2215      	movs	r2, #21
 800d366:	18ba      	adds	r2, r7, r2
 800d368:	7812      	ldrb	r2, [r2, #0]
 800d36a:	404a      	eors	r2, r1
 800d36c:	b2d1      	uxtb	r1, r2
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d372:	193b      	adds	r3, r7, r4
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	3301      	adds	r3, #1
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	5cd1      	ldrb	r1, [r2, r3]
 800d37c:	183b      	adds	r3, r7, r0
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	3301      	adds	r3, #1
 800d382:	2214      	movs	r2, #20
 800d384:	18ba      	adds	r2, r7, r2
 800d386:	7812      	ldrb	r2, [r2, #0]
 800d388:	404a      	eors	r2, r1
 800d38a:	b2d1      	uxtb	r1, r2
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d390:	193b      	adds	r3, r7, r4
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	3302      	adds	r3, #2
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	5cd1      	ldrb	r1, [r2, r3]
 800d39a:	183b      	adds	r3, r7, r0
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	3302      	adds	r3, #2
 800d3a0:	2213      	movs	r2, #19
 800d3a2:	18ba      	adds	r2, r7, r2
 800d3a4:	7812      	ldrb	r2, [r2, #0]
 800d3a6:	404a      	eors	r2, r1
 800d3a8:	b2d1      	uxtb	r1, r2
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d3ae:	193b      	adds	r3, r7, r4
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	3303      	adds	r3, #3
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	5cd1      	ldrb	r1, [r2, r3]
 800d3b8:	183b      	adds	r3, r7, r0
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	3303      	adds	r3, #3
 800d3be:	2212      	movs	r2, #18
 800d3c0:	18ba      	adds	r2, r7, r2
 800d3c2:	7812      	ldrb	r2, [r2, #0]
 800d3c4:	404a      	eors	r2, r1
 800d3c6:	b2d1      	uxtb	r1, r2
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d3cc:	183b      	adds	r3, r7, r0
 800d3ce:	183a      	adds	r2, r7, r0
 800d3d0:	7812      	ldrb	r2, [r2, #0]
 800d3d2:	3204      	adds	r2, #4
 800d3d4:	701a      	strb	r2, [r3, #0]
 800d3d6:	2317      	movs	r3, #23
 800d3d8:	18fa      	adds	r2, r7, r3
 800d3da:	2311      	movs	r3, #17
 800d3dc:	18fb      	adds	r3, r7, r3
 800d3de:	7812      	ldrb	r2, [r2, #0]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d200      	bcs.n	800d3e8 <lorawan_aes_set_key+0x264>
 800d3e6:	e715      	b.n	800d214 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	0018      	movs	r0, r3
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	b007      	add	sp, #28
 800d3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3f2:	46c0      	nop			; (mov r8, r8)
 800d3f4:	00010101 	.word	0x00010101
 800d3f8:	0801f248 	.word	0x0801f248

0800d3fc <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d3fc:	b5b0      	push	{r4, r5, r7, lr}
 800d3fe:	b08a      	sub	sp, #40	; 0x28
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	22f0      	movs	r2, #240	; 0xf0
 800d40c:	5c9b      	ldrb	r3, [r3, r2]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d039      	beq.n	800d486 <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	68f9      	ldr	r1, [r7, #12]
 800d416:	2314      	movs	r3, #20
 800d418:	18fb      	adds	r3, r7, r3
 800d41a:	0018      	movs	r0, r3
 800d41c:	f7ff fb64 	bl	800cae8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d420:	2327      	movs	r3, #39	; 0x27
 800d422:	18fb      	adds	r3, r7, r3
 800d424:	2201      	movs	r2, #1
 800d426:	701a      	strb	r2, [r3, #0]
 800d428:	e014      	b.n	800d454 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d42a:	2514      	movs	r5, #20
 800d42c:	197b      	adds	r3, r7, r5
 800d42e:	0018      	movs	r0, r3
 800d430:	f7ff fcc2 	bl	800cdb8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2427      	movs	r4, #39	; 0x27
 800d438:	193a      	adds	r2, r7, r4
 800d43a:	7812      	ldrb	r2, [r2, #0]
 800d43c:	0112      	lsls	r2, r2, #4
 800d43e:	189a      	adds	r2, r3, r2
 800d440:	197b      	adds	r3, r7, r5
 800d442:	0011      	movs	r1, r2
 800d444:	0018      	movs	r0, r3
 800d446:	f7ff fc06 	bl	800cc56 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d44a:	193b      	adds	r3, r7, r4
 800d44c:	193a      	adds	r2, r7, r4
 800d44e:	7812      	ldrb	r2, [r2, #0]
 800d450:	3201      	adds	r2, #1
 800d452:	701a      	strb	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	22f0      	movs	r2, #240	; 0xf0
 800d458:	5c9b      	ldrb	r3, [r3, r2]
 800d45a:	2427      	movs	r4, #39	; 0x27
 800d45c:	193a      	adds	r2, r7, r4
 800d45e:	7812      	ldrb	r2, [r2, #0]
 800d460:	429a      	cmp	r2, r3
 800d462:	d3e2      	bcc.n	800d42a <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d464:	2514      	movs	r5, #20
 800d466:	197b      	adds	r3, r7, r5
 800d468:	0018      	movs	r0, r3
 800d46a:	f7ff fc03 	bl	800cc74 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	193a      	adds	r2, r7, r4
 800d472:	7812      	ldrb	r2, [r2, #0]
 800d474:	0112      	lsls	r2, r2, #4
 800d476:	189a      	adds	r2, r3, r2
 800d478:	1979      	adds	r1, r7, r5
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	0018      	movs	r0, r3
 800d47e:	f7ff fb33 	bl	800cae8 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d482:	2300      	movs	r3, #0
 800d484:	e000      	b.n	800d488 <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800d486:	23ff      	movs	r3, #255	; 0xff
}
 800d488:	0018      	movs	r0, r3
 800d48a:	46bd      	mov	sp, r7
 800d48c:	b00a      	add	sp, #40	; 0x28
 800d48e:	bdb0      	pop	{r4, r5, r7, pc}

0800d490 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	0002      	movs	r2, r0
 800d498:	6039      	str	r1, [r7, #0]
 800d49a:	1dfb      	adds	r3, r7, #7
 800d49c:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d49e:	230f      	movs	r3, #15
 800d4a0:	18fb      	adds	r3, r7, r3
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	701a      	strb	r2, [r3, #0]
 800d4a6:	e020      	b.n	800d4ea <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d4a8:	200f      	movs	r0, #15
 800d4aa:	183b      	adds	r3, r7, r0
 800d4ac:	781a      	ldrb	r2, [r3, #0]
 800d4ae:	4914      	ldr	r1, [pc, #80]	; (800d500 <GetKeyByID+0x70>)
 800d4b0:	0013      	movs	r3, r2
 800d4b2:	011b      	lsls	r3, r3, #4
 800d4b4:	189b      	adds	r3, r3, r2
 800d4b6:	18cb      	adds	r3, r1, r3
 800d4b8:	3310      	adds	r3, #16
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	1dfa      	adds	r2, r7, #7
 800d4be:	7812      	ldrb	r2, [r2, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d10c      	bne.n	800d4de <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800d4c4:	183b      	adds	r3, r7, r0
 800d4c6:	781a      	ldrb	r2, [r3, #0]
 800d4c8:	0013      	movs	r3, r2
 800d4ca:	011b      	lsls	r3, r3, #4
 800d4cc:	189b      	adds	r3, r3, r2
 800d4ce:	3310      	adds	r3, #16
 800d4d0:	001a      	movs	r2, r3
 800d4d2:	4b0b      	ldr	r3, [pc, #44]	; (800d500 <GetKeyByID+0x70>)
 800d4d4:	18d2      	adds	r2, r2, r3
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	e00b      	b.n	800d4f6 <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d4de:	210f      	movs	r1, #15
 800d4e0:	187b      	adds	r3, r7, r1
 800d4e2:	781a      	ldrb	r2, [r3, #0]
 800d4e4:	187b      	adds	r3, r7, r1
 800d4e6:	3201      	adds	r2, #1
 800d4e8:	701a      	strb	r2, [r3, #0]
 800d4ea:	230f      	movs	r3, #15
 800d4ec:	18fb      	adds	r3, r7, r3
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2b09      	cmp	r3, #9
 800d4f2:	d9d9      	bls.n	800d4a8 <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d4f4:	2303      	movs	r3, #3
}
 800d4f6:	0018      	movs	r0, r3
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	b004      	add	sp, #16
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	46c0      	nop			; (mov r8, r8)
 800d500:	2000007c 	.word	0x2000007c

0800d504 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	af00      	add	r7, sp, #0
  return;
 800d508:	46c0      	nop			; (mov r8, r8)
}
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
	...

0800d510 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800d510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d512:	b0d1      	sub	sp, #324	; 0x144
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	0019      	movs	r1, r3
 800d51c:	4b40      	ldr	r3, [pc, #256]	; (800d620 <ComputeCmac+0x110>)
 800d51e:	20a0      	movs	r0, #160	; 0xa0
 800d520:	0040      	lsls	r0, r0, #1
 800d522:	4684      	mov	ip, r0
 800d524:	44bc      	add	ip, r7
 800d526:	4463      	add	r3, ip
 800d528:	801a      	strh	r2, [r3, #0]
 800d52a:	4b3e      	ldr	r3, [pc, #248]	; (800d624 <ComputeCmac+0x114>)
 800d52c:	22a0      	movs	r2, #160	; 0xa0
 800d52e:	0052      	lsls	r2, r2, #1
 800d530:	4694      	mov	ip, r2
 800d532:	44bc      	add	ip, r7
 800d534:	4463      	add	r3, ip
 800d536:	1c0a      	adds	r2, r1, #0
 800d538:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d53a:	2340      	movs	r3, #64	; 0x40
 800d53c:	33ff      	adds	r3, #255	; 0xff
 800d53e:	18fb      	adds	r3, r7, r3
 800d540:	2206      	movs	r2, #6
 800d542:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d008      	beq.n	800d55c <ComputeCmac+0x4c>
 800d54a:	23a8      	movs	r3, #168	; 0xa8
 800d54c:	005b      	lsls	r3, r3, #1
 800d54e:	2208      	movs	r2, #8
 800d550:	4694      	mov	ip, r2
 800d552:	44bc      	add	ip, r7
 800d554:	4463      	add	r3, ip
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d101      	bne.n	800d560 <ComputeCmac+0x50>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d55c:	2302      	movs	r3, #2
 800d55e:	e05a      	b.n	800d616 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800d560:	2514      	movs	r5, #20
 800d562:	197b      	adds	r3, r7, r5
 800d564:	0018      	movs	r0, r3
 800d566:	f7fe ff39 	bl	800c3dc <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800d56a:	2640      	movs	r6, #64	; 0x40
 800d56c:	36ff      	adds	r6, #255	; 0xff
 800d56e:	19bc      	adds	r4, r7, r6
 800d570:	2310      	movs	r3, #16
 800d572:	18fa      	adds	r2, r7, r3
 800d574:	4b2b      	ldr	r3, [pc, #172]	; (800d624 <ComputeCmac+0x114>)
 800d576:	21a0      	movs	r1, #160	; 0xa0
 800d578:	0049      	lsls	r1, r1, #1
 800d57a:	468c      	mov	ip, r1
 800d57c:	44bc      	add	ip, r7
 800d57e:	4463      	add	r3, ip
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	0011      	movs	r1, r2
 800d584:	0018      	movs	r0, r3
 800d586:	f7ff ff83 	bl	800d490 <GetKeyByID>
 800d58a:	0003      	movs	r3, r0
 800d58c:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800d58e:	19bb      	adds	r3, r7, r6
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d13b      	bne.n	800d60e <ComputeCmac+0xfe>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	1c5a      	adds	r2, r3, #1
 800d59a:	197b      	adds	r3, r7, r5
 800d59c:	0011      	movs	r1, r2
 800d59e:	0018      	movs	r0, r3
 800d5a0:	f7fe ff36 	bl	800c410 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d005      	beq.n	800d5b6 <ComputeCmac+0xa6>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800d5aa:	68f9      	ldr	r1, [r7, #12]
 800d5ac:	197b      	adds	r3, r7, r5
 800d5ae:	2210      	movs	r2, #16
 800d5b0:	0018      	movs	r0, r3
 800d5b2:	f7fe ff3c 	bl	800c42e <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800d5b6:	4b1a      	ldr	r3, [pc, #104]	; (800d620 <ComputeCmac+0x110>)
 800d5b8:	22a0      	movs	r2, #160	; 0xa0
 800d5ba:	0052      	lsls	r2, r2, #1
 800d5bc:	4694      	mov	ip, r2
 800d5be:	44bc      	add	ip, r7
 800d5c0:	4463      	add	r3, ip
 800d5c2:	881a      	ldrh	r2, [r3, #0]
 800d5c4:	68b9      	ldr	r1, [r7, #8]
 800d5c6:	2414      	movs	r4, #20
 800d5c8:	193b      	adds	r3, r7, r4
 800d5ca:	0018      	movs	r0, r3
 800d5cc:	f7fe ff2f 	bl	800c42e <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800d5d0:	193a      	adds	r2, r7, r4
 800d5d2:	2496      	movs	r4, #150	; 0x96
 800d5d4:	0064      	lsls	r4, r4, #1
 800d5d6:	193b      	adds	r3, r7, r4
 800d5d8:	0011      	movs	r1, r2
 800d5da:	0018      	movs	r0, r3
 800d5dc:	f7fe ffef 	bl	800c5be <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d5e0:	0021      	movs	r1, r4
 800d5e2:	187b      	adds	r3, r7, r1
 800d5e4:	78db      	ldrb	r3, [r3, #3]
 800d5e6:	061a      	lsls	r2, r3, #24
 800d5e8:	187b      	adds	r3, r7, r1
 800d5ea:	789b      	ldrb	r3, [r3, #2]
 800d5ec:	041b      	lsls	r3, r3, #16
 800d5ee:	431a      	orrs	r2, r3
 800d5f0:	187b      	adds	r3, r7, r1
 800d5f2:	785b      	ldrb	r3, [r3, #1]
 800d5f4:	021b      	lsls	r3, r3, #8
 800d5f6:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800d5f8:	187a      	adds	r2, r7, r1
 800d5fa:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d5fc:	431a      	orrs	r2, r3
 800d5fe:	23a8      	movs	r3, #168	; 0xa8
 800d600:	005b      	lsls	r3, r3, #1
 800d602:	2108      	movs	r1, #8
 800d604:	468c      	mov	ip, r1
 800d606:	44bc      	add	ip, r7
 800d608:	4463      	add	r3, ip
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d60e:	2340      	movs	r3, #64	; 0x40
 800d610:	33ff      	adds	r3, #255	; 0xff
 800d612:	18fb      	adds	r3, r7, r3
 800d614:	781b      	ldrb	r3, [r3, #0]
}
 800d616:	0018      	movs	r0, r3
 800d618:	46bd      	mov	sp, r7
 800d61a:	b051      	add	sp, #324	; 0x144
 800d61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d61e:	46c0      	nop			; (mov r8, r8)
 800d620:	fffffec6 	.word	0xfffffec6
 800d624:	fffffec5 	.word	0xfffffec5

0800d628 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800d628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d62a:	46de      	mov	lr, fp
 800d62c:	4657      	mov	r7, sl
 800d62e:	464e      	mov	r6, r9
 800d630:	4645      	mov	r5, r8
 800d632:	b5e0      	push	{r5, r6, r7, lr}
 800d634:	b099      	sub	sp, #100	; 0x64
 800d636:	af10      	add	r7, sp, #64	; 0x40
 800d638:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d63a:	250f      	movs	r5, #15
 800d63c:	2610      	movs	r6, #16
 800d63e:	19bb      	adds	r3, r7, r6
 800d640:	195b      	adds	r3, r3, r5
 800d642:	2206      	movs	r2, #6
 800d644:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800d646:	49dd      	ldr	r1, [pc, #884]	; (800d9bc <SecureElementInit+0x394>)
 800d648:	4bdd      	ldr	r3, [pc, #884]	; (800d9c0 <SecureElementInit+0x398>)
 800d64a:	22aa      	movs	r2, #170	; 0xaa
 800d64c:	0018      	movs	r0, r3
 800d64e:	f00b ffe3 	bl	8019618 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800d652:	19bb      	adds	r3, r7, r6
 800d654:	195c      	adds	r4, r3, r5
 800d656:	2308      	movs	r3, #8
 800d658:	2210      	movs	r2, #16
 800d65a:	4694      	mov	ip, r2
 800d65c:	44bc      	add	ip, r7
 800d65e:	4463      	add	r3, ip
 800d660:	0019      	movs	r1, r3
 800d662:	2000      	movs	r0, #0
 800d664:	f7ff ff14 	bl	800d490 <GetKeyByID>
 800d668:	0003      	movs	r3, r0
 800d66a:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d66c:	4bd5      	ldr	r3, [pc, #852]	; (800d9c4 <SecureElementInit+0x39c>)
 800d66e:	2200      	movs	r2, #0
 800d670:	2100      	movs	r1, #0
 800d672:	2002      	movs	r0, #2
 800d674:	f00e fc44 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d678:	19bb      	adds	r3, r7, r6
 800d67a:	195b      	adds	r3, r3, r5
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d14f      	bne.n	800d722 <SecureElementInit+0xfa>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	785b      	ldrb	r3, [r3, #1]
 800d686:	001d      	movs	r5, r3
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	789b      	ldrb	r3, [r3, #2]
 800d68c:	001e      	movs	r6, r3
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	78db      	ldrb	r3, [r3, #3]
 800d692:	469c      	mov	ip, r3
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	791b      	ldrb	r3, [r3, #4]
 800d698:	4698      	mov	r8, r3
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	795b      	ldrb	r3, [r3, #5]
 800d69e:	4699      	mov	r9, r3
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	799b      	ldrb	r3, [r3, #6]
 800d6a4:	469a      	mov	sl, r3
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	79db      	ldrb	r3, [r3, #7]
 800d6aa:	469b      	mov	fp, r3
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	7a1b      	ldrb	r3, [r3, #8]
 800d6b0:	613b      	str	r3, [r7, #16]
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	7a5b      	ldrb	r3, [r3, #9]
 800d6b6:	60fb      	str	r3, [r7, #12]
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	7a9b      	ldrb	r3, [r3, #10]
 800d6bc:	60bb      	str	r3, [r7, #8]
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	7adb      	ldrb	r3, [r3, #11]
 800d6c2:	607b      	str	r3, [r7, #4]
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	7b1b      	ldrb	r3, [r3, #12]
 800d6c8:	603b      	str	r3, [r7, #0]
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	7b5b      	ldrb	r3, [r3, #13]
 800d6ce:	001c      	movs	r4, r3
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	7b9b      	ldrb	r3, [r3, #14]
 800d6d4:	0018      	movs	r0, r3
 800d6d6:	69bb      	ldr	r3, [r7, #24]
 800d6d8:	7bdb      	ldrb	r3, [r3, #15]
 800d6da:	0019      	movs	r1, r3
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	7c1b      	ldrb	r3, [r3, #16]
 800d6e0:	4ab9      	ldr	r2, [pc, #740]	; (800d9c8 <SecureElementInit+0x3a0>)
 800d6e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6e4:	910e      	str	r1, [sp, #56]	; 0x38
 800d6e6:	900d      	str	r0, [sp, #52]	; 0x34
 800d6e8:	940c      	str	r4, [sp, #48]	; 0x30
 800d6ea:	6839      	ldr	r1, [r7, #0]
 800d6ec:	910b      	str	r1, [sp, #44]	; 0x2c
 800d6ee:	6879      	ldr	r1, [r7, #4]
 800d6f0:	910a      	str	r1, [sp, #40]	; 0x28
 800d6f2:	68b9      	ldr	r1, [r7, #8]
 800d6f4:	9109      	str	r1, [sp, #36]	; 0x24
 800d6f6:	68f9      	ldr	r1, [r7, #12]
 800d6f8:	9108      	str	r1, [sp, #32]
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	9307      	str	r3, [sp, #28]
 800d6fe:	465b      	mov	r3, fp
 800d700:	9306      	str	r3, [sp, #24]
 800d702:	4653      	mov	r3, sl
 800d704:	9305      	str	r3, [sp, #20]
 800d706:	464b      	mov	r3, r9
 800d708:	9304      	str	r3, [sp, #16]
 800d70a:	4643      	mov	r3, r8
 800d70c:	9303      	str	r3, [sp, #12]
 800d70e:	4663      	mov	r3, ip
 800d710:	9302      	str	r3, [sp, #8]
 800d712:	9601      	str	r6, [sp, #4]
 800d714:	9500      	str	r5, [sp, #0]
 800d716:	0013      	movs	r3, r2
 800d718:	2200      	movs	r2, #0
 800d71a:	2100      	movs	r1, #0
 800d71c:	2002      	movs	r0, #2
 800d71e:	f00e fbef 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800d722:	250f      	movs	r5, #15
 800d724:	2610      	movs	r6, #16
 800d726:	19bb      	adds	r3, r7, r6
 800d728:	195c      	adds	r4, r3, r5
 800d72a:	2308      	movs	r3, #8
 800d72c:	2210      	movs	r2, #16
 800d72e:	4694      	mov	ip, r2
 800d730:	44bc      	add	ip, r7
 800d732:	4463      	add	r3, ip
 800d734:	0019      	movs	r1, r3
 800d736:	2001      	movs	r0, #1
 800d738:	f7ff feaa 	bl	800d490 <GetKeyByID>
 800d73c:	0003      	movs	r3, r0
 800d73e:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d740:	19bb      	adds	r3, r7, r6
 800d742:	195b      	adds	r3, r3, r5
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d14f      	bne.n	800d7ea <SecureElementInit+0x1c2>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	785b      	ldrb	r3, [r3, #1]
 800d74e:	001d      	movs	r5, r3
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	789b      	ldrb	r3, [r3, #2]
 800d754:	001e      	movs	r6, r3
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	78db      	ldrb	r3, [r3, #3]
 800d75a:	469c      	mov	ip, r3
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	791b      	ldrb	r3, [r3, #4]
 800d760:	4698      	mov	r8, r3
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	795b      	ldrb	r3, [r3, #5]
 800d766:	4699      	mov	r9, r3
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	799b      	ldrb	r3, [r3, #6]
 800d76c:	469a      	mov	sl, r3
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	79db      	ldrb	r3, [r3, #7]
 800d772:	469b      	mov	fp, r3
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	7a1b      	ldrb	r3, [r3, #8]
 800d778:	613b      	str	r3, [r7, #16]
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	7a5b      	ldrb	r3, [r3, #9]
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	7a9b      	ldrb	r3, [r3, #10]
 800d784:	60bb      	str	r3, [r7, #8]
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	7adb      	ldrb	r3, [r3, #11]
 800d78a:	607b      	str	r3, [r7, #4]
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	7b1b      	ldrb	r3, [r3, #12]
 800d790:	603b      	str	r3, [r7, #0]
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	7b5b      	ldrb	r3, [r3, #13]
 800d796:	001c      	movs	r4, r3
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	7b9b      	ldrb	r3, [r3, #14]
 800d79c:	0018      	movs	r0, r3
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	7bdb      	ldrb	r3, [r3, #15]
 800d7a2:	0019      	movs	r1, r3
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	7c1b      	ldrb	r3, [r3, #16]
 800d7a8:	4a88      	ldr	r2, [pc, #544]	; (800d9cc <SecureElementInit+0x3a4>)
 800d7aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7ac:	910e      	str	r1, [sp, #56]	; 0x38
 800d7ae:	900d      	str	r0, [sp, #52]	; 0x34
 800d7b0:	940c      	str	r4, [sp, #48]	; 0x30
 800d7b2:	6839      	ldr	r1, [r7, #0]
 800d7b4:	910b      	str	r1, [sp, #44]	; 0x2c
 800d7b6:	6879      	ldr	r1, [r7, #4]
 800d7b8:	910a      	str	r1, [sp, #40]	; 0x28
 800d7ba:	68b9      	ldr	r1, [r7, #8]
 800d7bc:	9109      	str	r1, [sp, #36]	; 0x24
 800d7be:	68f9      	ldr	r1, [r7, #12]
 800d7c0:	9108      	str	r1, [sp, #32]
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	9307      	str	r3, [sp, #28]
 800d7c6:	465b      	mov	r3, fp
 800d7c8:	9306      	str	r3, [sp, #24]
 800d7ca:	4653      	mov	r3, sl
 800d7cc:	9305      	str	r3, [sp, #20]
 800d7ce:	464b      	mov	r3, r9
 800d7d0:	9304      	str	r3, [sp, #16]
 800d7d2:	4643      	mov	r3, r8
 800d7d4:	9303      	str	r3, [sp, #12]
 800d7d6:	4663      	mov	r3, ip
 800d7d8:	9302      	str	r3, [sp, #8]
 800d7da:	9601      	str	r6, [sp, #4]
 800d7dc:	9500      	str	r5, [sp, #0]
 800d7de:	0013      	movs	r3, r2
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	2002      	movs	r0, #2
 800d7e6:	f00e fb8b 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d7ea:	4b79      	ldr	r3, [pc, #484]	; (800d9d0 <SecureElementInit+0x3a8>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	2002      	movs	r0, #2
 800d7f2:	f00e fb85 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800d7f6:	250f      	movs	r5, #15
 800d7f8:	2610      	movs	r6, #16
 800d7fa:	19bb      	adds	r3, r7, r6
 800d7fc:	195c      	adds	r4, r3, r5
 800d7fe:	2308      	movs	r3, #8
 800d800:	2210      	movs	r2, #16
 800d802:	4694      	mov	ip, r2
 800d804:	44bc      	add	ip, r7
 800d806:	4463      	add	r3, ip
 800d808:	0019      	movs	r1, r3
 800d80a:	2003      	movs	r0, #3
 800d80c:	f7ff fe40 	bl	800d490 <GetKeyByID>
 800d810:	0003      	movs	r3, r0
 800d812:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d814:	19bb      	adds	r3, r7, r6
 800d816:	195b      	adds	r3, r3, r5
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d14f      	bne.n	800d8be <SecureElementInit+0x296>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	785b      	ldrb	r3, [r3, #1]
 800d822:	001d      	movs	r5, r3
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	789b      	ldrb	r3, [r3, #2]
 800d828:	001e      	movs	r6, r3
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	78db      	ldrb	r3, [r3, #3]
 800d82e:	469c      	mov	ip, r3
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	791b      	ldrb	r3, [r3, #4]
 800d834:	4698      	mov	r8, r3
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	795b      	ldrb	r3, [r3, #5]
 800d83a:	4699      	mov	r9, r3
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	799b      	ldrb	r3, [r3, #6]
 800d840:	469a      	mov	sl, r3
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	79db      	ldrb	r3, [r3, #7]
 800d846:	469b      	mov	fp, r3
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	7a1b      	ldrb	r3, [r3, #8]
 800d84c:	613b      	str	r3, [r7, #16]
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	7a5b      	ldrb	r3, [r3, #9]
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	7a9b      	ldrb	r3, [r3, #10]
 800d858:	60bb      	str	r3, [r7, #8]
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	7adb      	ldrb	r3, [r3, #11]
 800d85e:	607b      	str	r3, [r7, #4]
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	7b1b      	ldrb	r3, [r3, #12]
 800d864:	603b      	str	r3, [r7, #0]
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	7b5b      	ldrb	r3, [r3, #13]
 800d86a:	001c      	movs	r4, r3
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	7b9b      	ldrb	r3, [r3, #14]
 800d870:	0018      	movs	r0, r3
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	7bdb      	ldrb	r3, [r3, #15]
 800d876:	0019      	movs	r1, r3
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	7c1b      	ldrb	r3, [r3, #16]
 800d87c:	4a55      	ldr	r2, [pc, #340]	; (800d9d4 <SecureElementInit+0x3ac>)
 800d87e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d880:	910e      	str	r1, [sp, #56]	; 0x38
 800d882:	900d      	str	r0, [sp, #52]	; 0x34
 800d884:	940c      	str	r4, [sp, #48]	; 0x30
 800d886:	6839      	ldr	r1, [r7, #0]
 800d888:	910b      	str	r1, [sp, #44]	; 0x2c
 800d88a:	6879      	ldr	r1, [r7, #4]
 800d88c:	910a      	str	r1, [sp, #40]	; 0x28
 800d88e:	68b9      	ldr	r1, [r7, #8]
 800d890:	9109      	str	r1, [sp, #36]	; 0x24
 800d892:	68f9      	ldr	r1, [r7, #12]
 800d894:	9108      	str	r1, [sp, #32]
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	9307      	str	r3, [sp, #28]
 800d89a:	465b      	mov	r3, fp
 800d89c:	9306      	str	r3, [sp, #24]
 800d89e:	4653      	mov	r3, sl
 800d8a0:	9305      	str	r3, [sp, #20]
 800d8a2:	464b      	mov	r3, r9
 800d8a4:	9304      	str	r3, [sp, #16]
 800d8a6:	4643      	mov	r3, r8
 800d8a8:	9303      	str	r3, [sp, #12]
 800d8aa:	4663      	mov	r3, ip
 800d8ac:	9302      	str	r3, [sp, #8]
 800d8ae:	9601      	str	r6, [sp, #4]
 800d8b0:	9500      	str	r5, [sp, #0]
 800d8b2:	0013      	movs	r3, r2
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	2002      	movs	r0, #2
 800d8ba:	f00e fb21 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800d8be:	250f      	movs	r5, #15
 800d8c0:	2610      	movs	r6, #16
 800d8c2:	19bb      	adds	r3, r7, r6
 800d8c4:	195c      	adds	r4, r3, r5
 800d8c6:	2308      	movs	r3, #8
 800d8c8:	2210      	movs	r2, #16
 800d8ca:	4694      	mov	ip, r2
 800d8cc:	44bc      	add	ip, r7
 800d8ce:	4463      	add	r3, ip
 800d8d0:	0019      	movs	r1, r3
 800d8d2:	2002      	movs	r0, #2
 800d8d4:	f7ff fddc 	bl	800d490 <GetKeyByID>
 800d8d8:	0003      	movs	r3, r0
 800d8da:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d8dc:	19bb      	adds	r3, r7, r6
 800d8de:	195b      	adds	r3, r3, r5
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d14f      	bne.n	800d986 <SecureElementInit+0x35e>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	785b      	ldrb	r3, [r3, #1]
 800d8ea:	001d      	movs	r5, r3
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	789b      	ldrb	r3, [r3, #2]
 800d8f0:	001e      	movs	r6, r3
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	78db      	ldrb	r3, [r3, #3]
 800d8f6:	469c      	mov	ip, r3
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	791b      	ldrb	r3, [r3, #4]
 800d8fc:	4698      	mov	r8, r3
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	795b      	ldrb	r3, [r3, #5]
 800d902:	4699      	mov	r9, r3
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	799b      	ldrb	r3, [r3, #6]
 800d908:	469a      	mov	sl, r3
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	79db      	ldrb	r3, [r3, #7]
 800d90e:	469b      	mov	fp, r3
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	7a1b      	ldrb	r3, [r3, #8]
 800d914:	613b      	str	r3, [r7, #16]
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	7a5b      	ldrb	r3, [r3, #9]
 800d91a:	60fb      	str	r3, [r7, #12]
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	7a9b      	ldrb	r3, [r3, #10]
 800d920:	60bb      	str	r3, [r7, #8]
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	7adb      	ldrb	r3, [r3, #11]
 800d926:	607b      	str	r3, [r7, #4]
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	7b1b      	ldrb	r3, [r3, #12]
 800d92c:	603b      	str	r3, [r7, #0]
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	7b5b      	ldrb	r3, [r3, #13]
 800d932:	001c      	movs	r4, r3
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	7b9b      	ldrb	r3, [r3, #14]
 800d938:	0018      	movs	r0, r3
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	7bdb      	ldrb	r3, [r3, #15]
 800d93e:	0019      	movs	r1, r3
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	7c1b      	ldrb	r3, [r3, #16]
 800d944:	4a24      	ldr	r2, [pc, #144]	; (800d9d8 <SecureElementInit+0x3b0>)
 800d946:	930f      	str	r3, [sp, #60]	; 0x3c
 800d948:	910e      	str	r1, [sp, #56]	; 0x38
 800d94a:	900d      	str	r0, [sp, #52]	; 0x34
 800d94c:	940c      	str	r4, [sp, #48]	; 0x30
 800d94e:	6839      	ldr	r1, [r7, #0]
 800d950:	910b      	str	r1, [sp, #44]	; 0x2c
 800d952:	6879      	ldr	r1, [r7, #4]
 800d954:	910a      	str	r1, [sp, #40]	; 0x28
 800d956:	68b9      	ldr	r1, [r7, #8]
 800d958:	9109      	str	r1, [sp, #36]	; 0x24
 800d95a:	68f9      	ldr	r1, [r7, #12]
 800d95c:	9108      	str	r1, [sp, #32]
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	9307      	str	r3, [sp, #28]
 800d962:	465b      	mov	r3, fp
 800d964:	9306      	str	r3, [sp, #24]
 800d966:	4653      	mov	r3, sl
 800d968:	9305      	str	r3, [sp, #20]
 800d96a:	464b      	mov	r3, r9
 800d96c:	9304      	str	r3, [sp, #16]
 800d96e:	4643      	mov	r3, r8
 800d970:	9303      	str	r3, [sp, #12]
 800d972:	4663      	mov	r3, ip
 800d974:	9302      	str	r3, [sp, #8]
 800d976:	9601      	str	r6, [sp, #4]
 800d978:	9500      	str	r5, [sp, #0]
 800d97a:	0013      	movs	r3, r2
 800d97c:	2200      	movs	r2, #0
 800d97e:	2100      	movs	r1, #0
 800d980:	2002      	movs	r0, #2
 800d982:	f00e fabd 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d003      	beq.n	800d994 <SecureElementInit+0x36c>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800d98c:	4b13      	ldr	r3, [pc, #76]	; (800d9dc <SecureElementInit+0x3b4>)
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	e002      	b.n	800d99a <SecureElementInit+0x372>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800d994:	4b11      	ldr	r3, [pc, #68]	; (800d9dc <SecureElementInit+0x3b4>)
 800d996:	4a12      	ldr	r2, [pc, #72]	; (800d9e0 <SecureElementInit+0x3b8>)
 800d998:	601a      	str	r2, [r3, #0]
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 800d99a:	4b12      	ldr	r3, [pc, #72]	; (800d9e4 <SecureElementInit+0x3bc>)
 800d99c:	0018      	movs	r0, r3
 800d99e:	f7f7 faf8 	bl	8004f92 <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800d9a2:	4b0e      	ldr	r3, [pc, #56]	; (800d9dc <SecureElementInit+0x3b4>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	0018      	movs	r0, r3
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	b009      	add	sp, #36	; 0x24
 800d9b0:	bcf0      	pop	{r4, r5, r6, r7}
 800d9b2:	46bb      	mov	fp, r7
 800d9b4:	46b2      	mov	sl, r6
 800d9b6:	46a9      	mov	r9, r5
 800d9b8:	46a0      	mov	r8, r4
 800d9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9bc:	0801f548 	.word	0x0801f548
 800d9c0:	2000008c 	.word	0x2000008c
 800d9c4:	0801f5f4 	.word	0x0801f5f4
 800d9c8:	0801f60c 	.word	0x0801f60c
 800d9cc:	0801f670 	.word	0x0801f670
 800d9d0:	0801f6d4 	.word	0x0801f6d4
 800d9d4:	0801f6ec 	.word	0x0801f6ec
 800d9d8:	0801f750 	.word	0x0801f750
 800d9dc:	2000041c 	.word	0x2000041c
 800d9e0:	0800d505 	.word	0x0800d505
 800d9e4:	2000007c 	.word	0x2000007c

0800d9e8 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d007      	beq.n	800da06 <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800d9f6:	6879      	ldr	r1, [r7, #4]
 800d9f8:	4b05      	ldr	r3, [pc, #20]	; (800da10 <SecureElementRestoreNvmCtx+0x28>)
 800d9fa:	22ba      	movs	r2, #186	; 0xba
 800d9fc:	0018      	movs	r0, r3
 800d9fe:	f00b fe0b 	bl	8019618 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800da02:	2300      	movs	r3, #0
 800da04:	e000      	b.n	800da08 <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800da06:	2302      	movs	r3, #2
  }
}
 800da08:	0018      	movs	r0, r3
 800da0a:	46bd      	mov	sp, r7
 800da0c:	b002      	add	sp, #8
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	2000007c 	.word	0x2000007c

0800da14 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	22ba      	movs	r2, #186	; 0xba
 800da20:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800da22:	4b02      	ldr	r3, [pc, #8]	; (800da2c <SecureElementGetNvmCtx+0x18>)
}
 800da24:	0018      	movs	r0, r3
 800da26:	46bd      	mov	sp, r7
 800da28:	b002      	add	sp, #8
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	2000007c 	.word	0x2000007c

0800da30 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800da30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da32:	b089      	sub	sp, #36	; 0x24
 800da34:	af00      	add	r7, sp, #0
 800da36:	0002      	movs	r2, r0
 800da38:	6039      	str	r1, [r7, #0]
 800da3a:	1dfb      	adds	r3, r7, #7
 800da3c:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d101      	bne.n	800da48 <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800da44:	2302      	movs	r3, #2
 800da46:	e064      	b.n	800db12 <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800da48:	231f      	movs	r3, #31
 800da4a:	18fb      	adds	r3, r7, r3
 800da4c:	2200      	movs	r2, #0
 800da4e:	701a      	strb	r2, [r3, #0]
 800da50:	e059      	b.n	800db06 <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800da52:	231f      	movs	r3, #31
 800da54:	18fb      	adds	r3, r7, r3
 800da56:	781a      	ldrb	r2, [r3, #0]
 800da58:	4930      	ldr	r1, [pc, #192]	; (800db1c <SecureElementSetKey+0xec>)
 800da5a:	0013      	movs	r3, r2
 800da5c:	011b      	lsls	r3, r3, #4
 800da5e:	189b      	adds	r3, r3, r2
 800da60:	18cb      	adds	r3, r1, r3
 800da62:	3310      	adds	r3, #16
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	1dfa      	adds	r2, r7, #7
 800da68:	7812      	ldrb	r2, [r2, #0]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d145      	bne.n	800dafa <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800da6e:	1dfb      	adds	r3, r7, #7
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b80      	cmp	r3, #128	; 0x80
 800da74:	d12c      	bne.n	800dad0 <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800da76:	251e      	movs	r5, #30
 800da78:	197b      	adds	r3, r7, r5
 800da7a:	2206      	movs	r2, #6
 800da7c:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800da7e:	260c      	movs	r6, #12
 800da80:	19bb      	adds	r3, r7, r6
 800da82:	2200      	movs	r2, #0
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	3304      	adds	r3, #4
 800da88:	220c      	movs	r2, #12
 800da8a:	2100      	movs	r1, #0
 800da8c:	0018      	movs	r0, r3
 800da8e:	f010 fb20 	bl	801e0d2 <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800da92:	197c      	adds	r4, r7, r5
 800da94:	19bb      	adds	r3, r7, r6
 800da96:	6838      	ldr	r0, [r7, #0]
 800da98:	227f      	movs	r2, #127	; 0x7f
 800da9a:	2110      	movs	r1, #16
 800da9c:	f000 f8a5 	bl	800dbea <SecureElementAesEncrypt>
 800daa0:	0003      	movs	r3, r0
 800daa2:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800daa4:	231f      	movs	r3, #31
 800daa6:	18fb      	adds	r3, r7, r3
 800daa8:	781a      	ldrb	r2, [r3, #0]
 800daaa:	0013      	movs	r3, r2
 800daac:	011b      	lsls	r3, r3, #4
 800daae:	189b      	adds	r3, r3, r2
 800dab0:	3310      	adds	r3, #16
 800dab2:	001a      	movs	r2, r3
 800dab4:	4b19      	ldr	r3, [pc, #100]	; (800db1c <SecureElementSetKey+0xec>)
 800dab6:	18d3      	adds	r3, r2, r3
 800dab8:	3301      	adds	r3, #1
 800daba:	19b9      	adds	r1, r7, r6
 800dabc:	2210      	movs	r2, #16
 800dabe:	0018      	movs	r0, r3
 800dac0:	f00b fdaa 	bl	8019618 <memcpy1>
        SeNvmCtxChanged();
 800dac4:	4b16      	ldr	r3, [pc, #88]	; (800db20 <SecureElementSetKey+0xf0>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4798      	blx	r3

        return retval;
 800daca:	197b      	adds	r3, r7, r5
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	e020      	b.n	800db12 <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800dad0:	231f      	movs	r3, #31
 800dad2:	18fb      	adds	r3, r7, r3
 800dad4:	781a      	ldrb	r2, [r3, #0]
 800dad6:	0013      	movs	r3, r2
 800dad8:	011b      	lsls	r3, r3, #4
 800dada:	189b      	adds	r3, r3, r2
 800dadc:	3310      	adds	r3, #16
 800dade:	001a      	movs	r2, r3
 800dae0:	4b0e      	ldr	r3, [pc, #56]	; (800db1c <SecureElementSetKey+0xec>)
 800dae2:	18d3      	adds	r3, r2, r3
 800dae4:	3301      	adds	r3, #1
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	2210      	movs	r2, #16
 800daea:	0018      	movs	r0, r3
 800daec:	f00b fd94 	bl	8019618 <memcpy1>
        SeNvmCtxChanged();
 800daf0:	4b0b      	ldr	r3, [pc, #44]	; (800db20 <SecureElementSetKey+0xf0>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800daf6:	2300      	movs	r3, #0
 800daf8:	e00b      	b.n	800db12 <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800dafa:	211f      	movs	r1, #31
 800dafc:	187b      	adds	r3, r7, r1
 800dafe:	781a      	ldrb	r2, [r3, #0]
 800db00:	187b      	adds	r3, r7, r1
 800db02:	3201      	adds	r2, #1
 800db04:	701a      	strb	r2, [r3, #0]
 800db06:	231f      	movs	r3, #31
 800db08:	18fb      	adds	r3, r7, r3
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	2b09      	cmp	r3, #9
 800db0e:	d9a0      	bls.n	800da52 <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800db10:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800db12:	0018      	movs	r0, r3
 800db14:	46bd      	mov	sp, r7
 800db16:	b009      	add	sp, #36	; 0x24
 800db18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db1a:	46c0      	nop			; (mov r8, r8)
 800db1c:	2000007c 	.word	0x2000007c
 800db20:	2000041c 	.word	0x2000041c

0800db24 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800db24:	b590      	push	{r4, r7, lr}
 800db26:	b087      	sub	sp, #28
 800db28:	af02      	add	r7, sp, #8
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	0019      	movs	r1, r3
 800db30:	1dbb      	adds	r3, r7, #6
 800db32:	801a      	strh	r2, [r3, #0]
 800db34:	1d7b      	adds	r3, r7, #5
 800db36:	1c0a      	adds	r2, r1, #0
 800db38:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800db3a:	1d7b      	adds	r3, r7, #5
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	2b7e      	cmp	r3, #126	; 0x7e
 800db40:	d901      	bls.n	800db46 <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800db42:	2303      	movs	r3, #3
 800db44:	e00b      	b.n	800db5e <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800db46:	1d7b      	adds	r3, r7, #5
 800db48:	781c      	ldrb	r4, [r3, #0]
 800db4a:	1dbb      	adds	r3, r7, #6
 800db4c:	881a      	ldrh	r2, [r3, #0]
 800db4e:	68b9      	ldr	r1, [r7, #8]
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	6a3b      	ldr	r3, [r7, #32]
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	0023      	movs	r3, r4
 800db58:	f7ff fcda 	bl	800d510 <ComputeCmac>
 800db5c:	0003      	movs	r3, r0
}
 800db5e:	0018      	movs	r0, r3
 800db60:	46bd      	mov	sp, r7
 800db62:	b005      	add	sp, #20
 800db64:	bd90      	pop	{r4, r7, pc}

0800db66 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800db66:	b5b0      	push	{r4, r5, r7, lr}
 800db68:	b088      	sub	sp, #32
 800db6a:	af02      	add	r7, sp, #8
 800db6c:	60f8      	str	r0, [r7, #12]
 800db6e:	0008      	movs	r0, r1
 800db70:	607a      	str	r2, [r7, #4]
 800db72:	0019      	movs	r1, r3
 800db74:	230a      	movs	r3, #10
 800db76:	18fb      	adds	r3, r7, r3
 800db78:	1c02      	adds	r2, r0, #0
 800db7a:	801a      	strh	r2, [r3, #0]
 800db7c:	2309      	movs	r3, #9
 800db7e:	18fb      	adds	r3, r7, r3
 800db80:	1c0a      	adds	r2, r1, #0
 800db82:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800db84:	2317      	movs	r3, #23
 800db86:	18fb      	adds	r3, r7, r3
 800db88:	2206      	movs	r2, #6
 800db8a:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d101      	bne.n	800db96 <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800db92:	2302      	movs	r3, #2
 800db94:	e025      	b.n	800dbe2 <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800db96:	2300      	movs	r3, #0
 800db98:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800db9a:	2517      	movs	r5, #23
 800db9c:	197c      	adds	r4, r7, r5
 800db9e:	2309      	movs	r3, #9
 800dba0:	18fb      	adds	r3, r7, r3
 800dba2:	7818      	ldrb	r0, [r3, #0]
 800dba4:	230a      	movs	r3, #10
 800dba6:	18fb      	adds	r3, r7, r3
 800dba8:	881a      	ldrh	r2, [r3, #0]
 800dbaa:	68f9      	ldr	r1, [r7, #12]
 800dbac:	2310      	movs	r3, #16
 800dbae:	18fb      	adds	r3, r7, r3
 800dbb0:	9300      	str	r3, [sp, #0]
 800dbb2:	0003      	movs	r3, r0
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	f7ff fcab 	bl	800d510 <ComputeCmac>
 800dbba:	0003      	movs	r3, r0
 800dbbc:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800dbbe:	197b      	adds	r3, r7, r5
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d002      	beq.n	800dbcc <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800dbc6:	197b      	adds	r3, r7, r5
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	e00a      	b.n	800dbe2 <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d003      	beq.n	800dbdc <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800dbd4:	2317      	movs	r3, #23
 800dbd6:	18fb      	adds	r3, r7, r3
 800dbd8:	2201      	movs	r2, #1
 800dbda:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800dbdc:	2317      	movs	r3, #23
 800dbde:	18fb      	adds	r3, r7, r3
 800dbe0:	781b      	ldrb	r3, [r3, #0]
}
 800dbe2:	0018      	movs	r0, r3
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	b006      	add	sp, #24
 800dbe8:	bdb0      	pop	{r4, r5, r7, pc}

0800dbea <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800dbea:	b5b0      	push	{r4, r5, r7, lr}
 800dbec:	b0c2      	sub	sp, #264	; 0x108
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	60f8      	str	r0, [r7, #12]
 800dbf2:	0008      	movs	r0, r1
 800dbf4:	0011      	movs	r1, r2
 800dbf6:	607b      	str	r3, [r7, #4]
 800dbf8:	230a      	movs	r3, #10
 800dbfa:	18fb      	adds	r3, r7, r3
 800dbfc:	1c02      	adds	r2, r0, #0
 800dbfe:	801a      	strh	r2, [r3, #0]
 800dc00:	2309      	movs	r3, #9
 800dc02:	18fb      	adds	r3, r7, r3
 800dc04:	1c0a      	adds	r2, r1, #0
 800dc06:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800dc08:	1dfb      	adds	r3, r7, #7
 800dc0a:	33ff      	adds	r3, #255	; 0xff
 800dc0c:	2206      	movs	r2, #6
 800dc0e:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d002      	beq.n	800dc1c <SecureElementAesEncrypt+0x32>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d101      	bne.n	800dc20 <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dc1c:	2302      	movs	r3, #2
 800dc1e:	e051      	b.n	800dcc4 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800dc20:	230a      	movs	r3, #10
 800dc22:	18fb      	adds	r3, r7, r3
 800dc24:	881b      	ldrh	r3, [r3, #0]
 800dc26:	220f      	movs	r2, #15
 800dc28:	4013      	ands	r3, r2
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d001      	beq.n	800dc34 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800dc30:	2305      	movs	r3, #5
 800dc32:	e047      	b.n	800dcc4 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800dc34:	2514      	movs	r5, #20
 800dc36:	197b      	adds	r3, r7, r5
 800dc38:	22f0      	movs	r2, #240	; 0xf0
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	f00b fd29 	bl	8019694 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800dc42:	1dfc      	adds	r4, r7, #7
 800dc44:	34ff      	adds	r4, #255	; 0xff
 800dc46:	2310      	movs	r3, #16
 800dc48:	18fa      	adds	r2, r7, r3
 800dc4a:	2309      	movs	r3, #9
 800dc4c:	18fb      	adds	r3, r7, r3
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	0011      	movs	r1, r2
 800dc52:	0018      	movs	r0, r3
 800dc54:	f7ff fc1c 	bl	800d490 <GetKeyByID>
 800dc58:	0003      	movs	r3, r0
 800dc5a:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800dc5c:	1dfb      	adds	r3, r7, #7
 800dc5e:	33ff      	adds	r3, #255	; 0xff
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d12b      	bne.n	800dcbe <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	197a      	adds	r2, r7, r5
 800dc6c:	2110      	movs	r1, #16
 800dc6e:	0018      	movs	r0, r3
 800dc70:	f7ff fa88 	bl	800d184 <lorawan_aes_set_key>

    uint8_t block = 0;
 800dc74:	2308      	movs	r3, #8
 800dc76:	33ff      	adds	r3, #255	; 0xff
 800dc78:	18fb      	adds	r3, r7, r3
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800dc7e:	e019      	b.n	800dcb4 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800dc80:	2408      	movs	r4, #8
 800dc82:	34ff      	adds	r4, #255	; 0xff
 800dc84:	193b      	adds	r3, r7, r4
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	18d0      	adds	r0, r2, r3
 800dc8c:	193b      	adds	r3, r7, r4
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	18d3      	adds	r3, r2, r3
 800dc94:	2214      	movs	r2, #20
 800dc96:	18ba      	adds	r2, r7, r2
 800dc98:	0019      	movs	r1, r3
 800dc9a:	f7ff fbaf 	bl	800d3fc <lorawan_aes_encrypt>
      block = block + 16;
 800dc9e:	193b      	adds	r3, r7, r4
 800dca0:	193a      	adds	r2, r7, r4
 800dca2:	7812      	ldrb	r2, [r2, #0]
 800dca4:	3210      	adds	r2, #16
 800dca6:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800dca8:	220a      	movs	r2, #10
 800dcaa:	18bb      	adds	r3, r7, r2
 800dcac:	18ba      	adds	r2, r7, r2
 800dcae:	8812      	ldrh	r2, [r2, #0]
 800dcb0:	3a10      	subs	r2, #16
 800dcb2:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800dcb4:	230a      	movs	r3, #10
 800dcb6:	18fb      	adds	r3, r7, r3
 800dcb8:	881b      	ldrh	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1e0      	bne.n	800dc80 <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800dcbe:	1dfb      	adds	r3, r7, #7
 800dcc0:	33ff      	adds	r3, #255	; 0xff
 800dcc2:	781b      	ldrb	r3, [r3, #0]
}
 800dcc4:	0018      	movs	r0, r3
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	b042      	add	sp, #264	; 0x108
 800dcca:	bdb0      	pop	{r4, r5, r7, pc}

0800dccc <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800dccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcce:	b08b      	sub	sp, #44	; 0x2c
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	0019      	movs	r1, r3
 800dcd8:	1dfb      	adds	r3, r7, #7
 800dcda:	701a      	strb	r2, [r3, #0]
 800dcdc:	1dbb      	adds	r3, r7, #6
 800dcde:	1c0a      	adds	r2, r1, #0
 800dce0:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800dce2:	2327      	movs	r3, #39	; 0x27
 800dce4:	18fb      	adds	r3, r7, r3
 800dce6:	2206      	movs	r2, #6
 800dce8:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d101      	bne.n	800dcf4 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	e03c      	b.n	800dd6e <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800dcf4:	1dbb      	adds	r3, r7, #6
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	2b7f      	cmp	r3, #127	; 0x7f
 800dcfa:	d105      	bne.n	800dd08 <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800dcfc:	1dfb      	adds	r3, r7, #7
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	2b04      	cmp	r3, #4
 800dd02:	d001      	beq.n	800dd08 <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dd04:	2303      	movs	r3, #3
 800dd06:	e032      	b.n	800dd6e <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800dd08:	2614      	movs	r6, #20
 800dd0a:	19bb      	adds	r3, r7, r6
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	601a      	str	r2, [r3, #0]
 800dd10:	3304      	adds	r3, #4
 800dd12:	220c      	movs	r2, #12
 800dd14:	2100      	movs	r1, #0
 800dd16:	0018      	movs	r0, r3
 800dd18:	f010 f9db 	bl	801e0d2 <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800dd1c:	2527      	movs	r5, #39	; 0x27
 800dd1e:	197c      	adds	r4, r7, r5
 800dd20:	19b9      	adds	r1, r7, r6
 800dd22:	1dfb      	adds	r3, r7, #7
 800dd24:	781a      	ldrb	r2, [r3, #0]
 800dd26:	68b8      	ldr	r0, [r7, #8]
 800dd28:	000b      	movs	r3, r1
 800dd2a:	2110      	movs	r1, #16
 800dd2c:	f7ff ff5d 	bl	800dbea <SecureElementAesEncrypt>
 800dd30:	0003      	movs	r3, r0
 800dd32:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800dd34:	197b      	adds	r3, r7, r5
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d002      	beq.n	800dd42 <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800dd3c:	197b      	adds	r3, r7, r5
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	e015      	b.n	800dd6e <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800dd42:	2527      	movs	r5, #39	; 0x27
 800dd44:	197c      	adds	r4, r7, r5
 800dd46:	2314      	movs	r3, #20
 800dd48:	18fa      	adds	r2, r7, r3
 800dd4a:	1dbb      	adds	r3, r7, #6
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	0011      	movs	r1, r2
 800dd50:	0018      	movs	r0, r3
 800dd52:	f7ff fe6d 	bl	800da30 <SecureElementSetKey>
 800dd56:	0003      	movs	r3, r0
 800dd58:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800dd5a:	197b      	adds	r3, r7, r5
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d002      	beq.n	800dd68 <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800dd62:	197b      	adds	r3, r7, r5
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	e002      	b.n	800dd6e <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800dd68:	2327      	movs	r3, #39	; 0x27
 800dd6a:	18fb      	adds	r3, r7, r3
 800dd6c:	781b      	ldrb	r3, [r3, #0]
}
 800dd6e:	0018      	movs	r0, r3
 800dd70:	46bd      	mov	sp, r7
 800dd72:	b00b      	add	sp, #44	; 0x2c
 800dd74:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd76 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800dd76:	b5b0      	push	{r4, r5, r7, lr}
 800dd78:	b086      	sub	sp, #24
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	0011      	movs	r1, r2
 800dd80:	607b      	str	r3, [r7, #4]
 800dd82:	230f      	movs	r3, #15
 800dd84:	18fb      	adds	r3, r7, r3
 800dd86:	1c02      	adds	r2, r0, #0
 800dd88:	701a      	strb	r2, [r3, #0]
 800dd8a:	230c      	movs	r3, #12
 800dd8c:	18fb      	adds	r3, r7, r3
 800dd8e:	1c0a      	adds	r2, r1, #0
 800dd90:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d005      	beq.n	800dda4 <SecureElementProcessJoinAccept+0x2e>
 800dd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d002      	beq.n	800dda4 <SecureElementProcessJoinAccept+0x2e>
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dda4:	2302      	movs	r3, #2
 800dda6:	e069      	b.n	800de7c <SecureElementProcessJoinAccept+0x106>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800dda8:	2328      	movs	r3, #40	; 0x28
 800ddaa:	18fb      	adds	r3, r7, r3
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	2b21      	cmp	r3, #33	; 0x21
 800ddb0:	d901      	bls.n	800ddb6 <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ddb2:	2305      	movs	r3, #5
 800ddb4:	e062      	b.n	800de7c <SecureElementProcessJoinAccept+0x106>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800ddb6:	2517      	movs	r5, #23
 800ddb8:	197b      	adds	r3, r7, r5
 800ddba:	2201      	movs	r2, #1
 800ddbc:	701a      	strb	r2, [r3, #0]
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800ddbe:	2428      	movs	r4, #40	; 0x28
 800ddc0:	193b      	adds	r3, r7, r4
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	6879      	ldr	r1, [r7, #4]
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddca:	0018      	movs	r0, r3
 800ddcc:	f00b fc24 	bl	8019618 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	1c58      	adds	r0, r3, #1
 800ddd4:	193b      	adds	r3, r7, r4
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	3b01      	subs	r3, #1
 800dddc:	b299      	uxth	r1, r3
 800ddde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde0:	1c5c      	adds	r4, r3, #1
 800dde2:	197b      	adds	r3, r7, r5
 800dde4:	781a      	ldrb	r2, [r3, #0]
 800dde6:	0023      	movs	r3, r4
 800dde8:	f7ff feff 	bl	800dbea <SecureElementAesEncrypt>
 800ddec:	1e03      	subs	r3, r0, #0
 800ddee:	d001      	beq.n	800ddf4 <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800ddf0:	2307      	movs	r3, #7
 800ddf2:	e043      	b.n	800de7c <SecureElementProcessJoinAccept+0x106>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800ddf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf6:	330b      	adds	r3, #11
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	09db      	lsrs	r3, r3, #7
 800ddfc:	b2da      	uxtb	r2, r3
 800ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de00:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800de02:	2300      	movs	r3, #0
 800de04:	613b      	str	r3, [r7, #16]

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800de06:	2128      	movs	r1, #40	; 0x28
 800de08:	187b      	adds	r3, r7, r1
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	3b04      	subs	r3, #4
 800de0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de10:	18d3      	adds	r3, r2, r3
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800de16:	187b      	adds	r3, r7, r1
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	3b03      	subs	r3, #3
 800de1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de1e:	18d3      	adds	r3, r2, r3
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	021b      	lsls	r3, r3, #8
 800de24:	693a      	ldr	r2, [r7, #16]
 800de26:	4313      	orrs	r3, r2
 800de28:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800de2a:	187b      	adds	r3, r7, r1
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	3b02      	subs	r3, #2
 800de30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de32:	18d3      	adds	r3, r2, r3
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	041b      	lsls	r3, r3, #16
 800de38:	693a      	ldr	r2, [r7, #16]
 800de3a:	4313      	orrs	r3, r2
 800de3c:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800de3e:	187b      	adds	r3, r7, r1
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	3b01      	subs	r3, #1
 800de44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de46:	18d3      	adds	r3, r2, r3
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	061b      	lsls	r3, r3, #24
 800de4c:	693a      	ldr	r2, [r7, #16]
 800de4e:	4313      	orrs	r3, r2
 800de50:	613b      	str	r3, [r7, #16]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800de52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d10d      	bne.n	800de76 <SecureElementProcessJoinAccept+0x100>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800de5a:	187b      	adds	r3, r7, r1
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	b29b      	uxth	r3, r3
 800de60:	3b04      	subs	r3, #4
 800de62:	b299      	uxth	r1, r3
 800de64:	693a      	ldr	r2, [r7, #16]
 800de66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de68:	2301      	movs	r3, #1
 800de6a:	f7ff fe7c 	bl	800db66 <SecureElementVerifyAesCmac>
 800de6e:	1e03      	subs	r3, r0, #0
 800de70:	d003      	beq.n	800de7a <SecureElementProcessJoinAccept+0x104>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800de72:	2301      	movs	r3, #1
 800de74:	e002      	b.n	800de7c <SecureElementProcessJoinAccept+0x106>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800de76:	2304      	movs	r3, #4
 800de78:	e000      	b.n	800de7c <SecureElementProcessJoinAccept+0x106>
  }

  return SECURE_ELEMENT_SUCCESS;
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	0018      	movs	r0, r3
 800de7e:	46bd      	mov	sp, r7
 800de80:	b006      	add	sp, #24
 800de82:	bdb0      	pop	{r4, r5, r7, pc}

0800de84 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d101      	bne.n	800de96 <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800de92:	2302      	movs	r3, #2
 800de94:	e006      	b.n	800dea4 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800de96:	4b05      	ldr	r3, [pc, #20]	; (800deac <SecureElementRandomNumber+0x28>)
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	4798      	blx	r3
 800de9c:	0002      	movs	r2, r0
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800dea2:	2300      	movs	r3, #0
}
 800dea4:	0018      	movs	r0, r3
 800dea6:	46bd      	mov	sp, r7
 800dea8:	b002      	add	sp, #8
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	0801fd7c 	.word	0x0801fd7c

0800deb0 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d101      	bne.n	800dec2 <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800debe:	2302      	movs	r3, #2
 800dec0:	e009      	b.n	800ded6 <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800dec2:	6879      	ldr	r1, [r7, #4]
 800dec4:	4b06      	ldr	r3, [pc, #24]	; (800dee0 <SecureElementSetDevEui+0x30>)
 800dec6:	2208      	movs	r2, #8
 800dec8:	0018      	movs	r0, r3
 800deca:	f00b fba5 	bl	8019618 <memcpy1>
  SeNvmCtxChanged();
 800dece:	4b05      	ldr	r3, [pc, #20]	; (800dee4 <SecureElementSetDevEui+0x34>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	0018      	movs	r0, r3
 800ded8:	46bd      	mov	sp, r7
 800deda:	b002      	add	sp, #8
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	46c0      	nop			; (mov r8, r8)
 800dee0:	2000007c 	.word	0x2000007c
 800dee4:	2000041c 	.word	0x2000041c

0800dee8 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800deec:	4b01      	ldr	r3, [pc, #4]	; (800def4 <SecureElementGetDevEui+0xc>)
}
 800deee:	0018      	movs	r0, r3
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	2000007c 	.word	0x2000007c

0800def8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d101      	bne.n	800df0a <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800df06:	2302      	movs	r3, #2
 800df08:	e009      	b.n	800df1e <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800df0a:	6879      	ldr	r1, [r7, #4]
 800df0c:	4b06      	ldr	r3, [pc, #24]	; (800df28 <SecureElementSetJoinEui+0x30>)
 800df0e:	2208      	movs	r2, #8
 800df10:	0018      	movs	r0, r3
 800df12:	f00b fb81 	bl	8019618 <memcpy1>
  SeNvmCtxChanged();
 800df16:	4b05      	ldr	r3, [pc, #20]	; (800df2c <SecureElementSetJoinEui+0x34>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	0018      	movs	r0, r3
 800df20:	46bd      	mov	sp, r7
 800df22:	b002      	add	sp, #8
 800df24:	bd80      	pop	{r7, pc}
 800df26:	46c0      	nop			; (mov r8, r8)
 800df28:	20000084 	.word	0x20000084
 800df2c:	2000041c 	.word	0x2000041c

0800df30 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800df34:	4b01      	ldr	r3, [pc, #4]	; (800df3c <SecureElementGetJoinEui+0xc>)
}
 800df36:	0018      	movs	r0, r3
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	20000084 	.word	0x20000084

0800df40 <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800df48:	6879      	ldr	r1, [r7, #4]
 800df4a:	4b17      	ldr	r3, [pc, #92]	; (800dfa8 <LmHandlerInit+0x68>)
 800df4c:	2220      	movs	r2, #32
 800df4e:	0018      	movs	r0, r3
 800df50:	f00e fb56 	bl	801c600 <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800df54:	4b15      	ldr	r3, [pc, #84]	; (800dfac <LmHandlerInit+0x6c>)
 800df56:	4a16      	ldr	r2, [pc, #88]	; (800dfb0 <LmHandlerInit+0x70>)
 800df58:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800df5a:	4b14      	ldr	r3, [pc, #80]	; (800dfac <LmHandlerInit+0x6c>)
 800df5c:	4a15      	ldr	r2, [pc, #84]	; (800dfb4 <LmHandlerInit+0x74>)
 800df5e:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800df60:	4b12      	ldr	r3, [pc, #72]	; (800dfac <LmHandlerInit+0x6c>)
 800df62:	4a15      	ldr	r2, [pc, #84]	; (800dfb8 <LmHandlerInit+0x78>)
 800df64:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800df66:	4b11      	ldr	r3, [pc, #68]	; (800dfac <LmHandlerInit+0x6c>)
 800df68:	4a14      	ldr	r2, [pc, #80]	; (800dfbc <LmHandlerInit+0x7c>)
 800df6a:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800df6c:	4b0e      	ldr	r3, [pc, #56]	; (800dfa8 <LmHandlerInit+0x68>)
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	4b13      	ldr	r3, [pc, #76]	; (800dfc0 <LmHandlerInit+0x80>)
 800df72:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800df74:	4b0c      	ldr	r3, [pc, #48]	; (800dfa8 <LmHandlerInit+0x68>)
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	4b11      	ldr	r3, [pc, #68]	; (800dfc0 <LmHandlerInit+0x80>)
 800df7a:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800df7c:	4b10      	ldr	r3, [pc, #64]	; (800dfc0 <LmHandlerInit+0x80>)
 800df7e:	4a11      	ldr	r2, [pc, #68]	; (800dfc4 <LmHandlerInit+0x84>)
 800df80:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800df82:	4b09      	ldr	r3, [pc, #36]	; (800dfa8 <LmHandlerInit+0x68>)
 800df84:	689a      	ldr	r2, [r3, #8]
 800df86:	4b0e      	ldr	r3, [pc, #56]	; (800dfc0 <LmHandlerInit+0x80>)
 800df88:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800df8a:	4b0f      	ldr	r3, [pc, #60]	; (800dfc8 <LmHandlerInit+0x88>)
 800df8c:	0019      	movs	r1, r3
 800df8e:	2000      	movs	r0, #0
 800df90:	f000 fb18 	bl	800e5c4 <LmHandlerPackageRegister>
 800df94:	1e03      	subs	r3, r0, #0
 800df96:	d002      	beq.n	800df9e <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	425b      	negs	r3, r3
 800df9c:	e000      	b.n	800dfa0 <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	0018      	movs	r0, r3
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	b002      	add	sp, #8
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	2000043c 	.word	0x2000043c
 800dfac:	2000045c 	.word	0x2000045c
 800dfb0:	0800e731 	.word	0x0800e731
 800dfb4:	0800e79d 	.word	0x0800e79d
 800dfb8:	0800e889 	.word	0x0800e889
 800dfbc:	0800e931 	.word	0x0800e931
 800dfc0:	2000046c 	.word	0x2000046c
 800dfc4:	0800f0cf 	.word	0x0800f0cf
 800dfc8:	20000150 	.word	0x20000150

0800dfcc <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800dfcc:	b590      	push	{r4, r7, lr}
 800dfce:	b091      	sub	sp, #68	; 0x44
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800dfd4:	6879      	ldr	r1, [r7, #4]
 800dfd6:	4b50      	ldr	r3, [pc, #320]	; (800e118 <LmHandlerConfigure+0x14c>)
 800dfd8:	2206      	movs	r2, #6
 800dfda:	0018      	movs	r0, r3
 800dfdc:	f00e fb10 	bl	801c600 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800dfe0:	f7f5 fc5e 	bl	80038a0 <LoraInfo_GetPtr>
 800dfe4:	0003      	movs	r3, r0
 800dfe6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800dfe8:	4b4b      	ldr	r3, [pc, #300]	; (800e118 <LmHandlerConfigure+0x14c>)
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	001a      	movs	r2, r3
 800dfee:	2301      	movs	r3, #1
 800dff0:	4093      	lsls	r3, r2
 800dff2:	001a      	movs	r2, r3
 800dff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	4013      	ands	r3, r2
 800dffa:	d00b      	beq.n	800e014 <LmHandlerConfigure+0x48>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800dffc:	4b46      	ldr	r3, [pc, #280]	; (800e118 <LmHandlerConfigure+0x14c>)
 800dffe:	781a      	ldrb	r2, [r3, #0]
 800e000:	4946      	ldr	r1, [pc, #280]	; (800e11c <LmHandlerConfigure+0x150>)
 800e002:	4b47      	ldr	r3, [pc, #284]	; (800e120 <LmHandlerConfigure+0x154>)
 800e004:	0018      	movs	r0, r3
 800e006:	f004 ff87 	bl	8012f18 <LoRaMacInitialization>
 800e00a:	1e03      	subs	r3, r0, #0
 800e00c:	d009      	beq.n	800e022 <LmHandlerConfigure+0x56>
    {
      return LORAMAC_HANDLER_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	425b      	negs	r3, r3
 800e012:	e07d      	b.n	800e110 <LmHandlerConfigure+0x144>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800e014:	4b43      	ldr	r3, [pc, #268]	; (800e124 <LmHandlerConfigure+0x158>)
 800e016:	2201      	movs	r2, #1
 800e018:	2100      	movs	r1, #0
 800e01a:	2000      	movs	r0, #0
 800e01c:	f00d ff70 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800e020:	e7fe      	b.n	800e020 <LmHandlerConfigure+0x54>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800e022:	f001 f864 	bl	800f0ee <NvmCtxMgmtRestore>
 800e026:	1e03      	subs	r3, r0, #0
 800e028:	d103      	bne.n	800e032 <LmHandlerConfigure+0x66>
  {
    CtxRestoreDone = true;
 800e02a:	4b3f      	ldr	r3, [pc, #252]	; (800e128 <LmHandlerConfigure+0x15c>)
 800e02c:	2201      	movs	r2, #1
 800e02e:	701a      	strb	r2, [r3, #0]
 800e030:	e021      	b.n	800e076 <LmHandlerConfigure+0xaa>
  }
  else
  {
    CtxRestoreDone = false;
 800e032:	4b3d      	ldr	r3, [pc, #244]	; (800e128 <LmHandlerConfigure+0x15c>)
 800e034:	2200      	movs	r2, #0
 800e036:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800e038:	2418      	movs	r4, #24
 800e03a:	193b      	adds	r3, r7, r4
 800e03c:	2202      	movs	r2, #2
 800e03e:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800e040:	193b      	adds	r3, r7, r4
 800e042:	0018      	movs	r0, r3
 800e044:	f005 fbca 	bl	80137dc <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800e048:	193b      	adds	r3, r7, r4
 800e04a:	6859      	ldr	r1, [r3, #4]
 800e04c:	4b37      	ldr	r3, [pc, #220]	; (800e12c <LmHandlerConfigure+0x160>)
 800e04e:	2208      	movs	r2, #8
 800e050:	0018      	movs	r0, r3
 800e052:	f00b fae1 	bl	8019618 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800e056:	0021      	movs	r1, r4
 800e058:	187b      	adds	r3, r7, r1
 800e05a:	2203      	movs	r2, #3
 800e05c:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800e05e:	000c      	movs	r4, r1
 800e060:	187b      	adds	r3, r7, r1
 800e062:	0018      	movs	r0, r3
 800e064:	f005 fbba 	bl	80137dc <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800e068:	193b      	adds	r3, r7, r4
 800e06a:	6859      	ldr	r1, [r3, #4]
 800e06c:	4b30      	ldr	r3, [pc, #192]	; (800e130 <LmHandlerConfigure+0x164>)
 800e06e:	2208      	movs	r2, #8
 800e070:	0018      	movs	r0, r3
 800e072:	f00b fad1 	bl	8019618 <memcpy1>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800e076:	2118      	movs	r1, #24
 800e078:	187b      	adds	r3, r7, r1
 800e07a:	220f      	movs	r2, #15
 800e07c:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800e07e:	187b      	adds	r3, r7, r1
 800e080:	2201      	movs	r2, #1
 800e082:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e084:	000c      	movs	r4, r1
 800e086:	187b      	adds	r3, r7, r1
 800e088:	0018      	movs	r0, r3
 800e08a:	f005 fd05 	bl	8013a98 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800e08e:	0021      	movs	r1, r4
 800e090:	187b      	adds	r3, r7, r1
 800e092:	2210      	movs	r2, #16
 800e094:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e096:	187b      	adds	r3, r7, r1
 800e098:	2200      	movs	r2, #0
 800e09a:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e09c:	000c      	movs	r4, r1
 800e09e:	187b      	adds	r3, r7, r1
 800e0a0:	0018      	movs	r0, r3
 800e0a2:	f005 fcf9 	bl	8013a98 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800e0a6:	0021      	movs	r1, r4
 800e0a8:	187b      	adds	r3, r7, r1
 800e0aa:	2204      	movs	r2, #4
 800e0ac:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e0ae:	4b1a      	ldr	r3, [pc, #104]	; (800e118 <LmHandlerConfigure+0x14c>)
 800e0b0:	789a      	ldrb	r2, [r3, #2]
 800e0b2:	187b      	adds	r3, r7, r1
 800e0b4:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e0b6:	000c      	movs	r4, r1
 800e0b8:	187b      	adds	r3, r7, r1
 800e0ba:	0018      	movs	r0, r3
 800e0bc:	f005 fcec 	bl	8013a98 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e0c0:	0021      	movs	r1, r4
 800e0c2:	187b      	adds	r3, r7, r1
 800e0c4:	2222      	movs	r2, #34	; 0x22
 800e0c6:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800e0c8:	187b      	adds	r3, r7, r1
 800e0ca:	2214      	movs	r2, #20
 800e0cc:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e0ce:	187b      	adds	r3, r7, r1
 800e0d0:	0018      	movs	r0, r3
 800e0d2:	f005 fce1 	bl	8013a98 <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800e0d6:	2110      	movs	r1, #16
 800e0d8:	187b      	adds	r3, r7, r1
 800e0da:	220f      	movs	r2, #15
 800e0dc:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800e0de:	4b0e      	ldr	r3, [pc, #56]	; (800e118 <LmHandlerConfigure+0x14c>)
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	187a      	adds	r2, r7, r1
 800e0e4:	0011      	movs	r1, r2
 800e0e6:	0018      	movs	r0, r3
 800e0e8:	f008 fe17 	bl	8016d1a <RegionGetPhyParam>
 800e0ec:	0003      	movs	r3, r0
 800e0ee:	001a      	movs	r2, r3
 800e0f0:	210c      	movs	r1, #12
 800e0f2:	187b      	adds	r3, r7, r1
 800e0f4:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800e0f6:	187b      	adds	r3, r7, r1
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	1e5a      	subs	r2, r3, #1
 800e0fc:	4193      	sbcs	r3, r2
 800e0fe:	b2da      	uxtb	r2, r3
 800e100:	4b05      	ldr	r3, [pc, #20]	; (800e118 <LmHandlerConfigure+0x14c>)
 800e102:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800e104:	4b04      	ldr	r3, [pc, #16]	; (800e118 <LmHandlerConfigure+0x14c>)
 800e106:	791b      	ldrb	r3, [r3, #4]
 800e108:	0018      	movs	r0, r3
 800e10a:	f006 faf1 	bl	80146f0 <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	0018      	movs	r0, r3
 800e112:	46bd      	mov	sp, r7
 800e114:	b011      	add	sp, #68	; 0x44
 800e116:	bd90      	pop	{r4, r7, pc}
 800e118:	20000434 	.word	0x20000434
 800e11c:	2000046c 	.word	0x2000046c
 800e120:	2000045c 	.word	0x2000045c
 800e124:	0801f7c4 	.word	0x0801f7c4
 800e128:	20000586 	.word	0x20000586
 800e12c:	20000138 	.word	0x20000138
 800e130:	20000140 	.word	0x20000140

0800e134 <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800e13a:	f004 fea7 	bl	8012e8c <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e13e:	1dfb      	adds	r3, r7, #7
 800e140:	2200      	movs	r2, #0
 800e142:	701a      	strb	r2, [r3, #0]
 800e144:	e027      	b.n	800e196 <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800e146:	1dfb      	adds	r3, r7, #7
 800e148:	2200      	movs	r2, #0
 800e14a:	569a      	ldrsb	r2, [r3, r2]
 800e14c:	4b17      	ldr	r3, [pc, #92]	; (800e1ac <LmHandlerProcess+0x78>)
 800e14e:	0092      	lsls	r2, r2, #2
 800e150:	58d3      	ldr	r3, [r2, r3]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d017      	beq.n	800e186 <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800e156:	1dfb      	adds	r3, r7, #7
 800e158:	2200      	movs	r2, #0
 800e15a:	569a      	ldrsb	r2, [r3, r2]
 800e15c:	4b13      	ldr	r3, [pc, #76]	; (800e1ac <LmHandlerProcess+0x78>)
 800e15e:	0092      	lsls	r2, r2, #2
 800e160:	58d3      	ldr	r3, [r2, r3]
 800e162:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00e      	beq.n	800e186 <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800e168:	1dfb      	adds	r3, r7, #7
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	0018      	movs	r0, r3
 800e16e:	f000 fbf1 	bl	800e954 <LmHandlerPackageIsInitialized>
 800e172:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800e174:	d007      	beq.n	800e186 <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800e176:	1dfb      	adds	r3, r7, #7
 800e178:	2200      	movs	r2, #0
 800e17a:	569a      	ldrsb	r2, [r3, r2]
 800e17c:	4b0b      	ldr	r3, [pc, #44]	; (800e1ac <LmHandlerProcess+0x78>)
 800e17e:	0092      	lsls	r2, r2, #2
 800e180:	58d3      	ldr	r3, [r2, r3]
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e186:	1dfb      	adds	r3, r7, #7
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	b25b      	sxtb	r3, r3
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	3301      	adds	r3, #1
 800e190:	b2da      	uxtb	r2, r3
 800e192:	1dfb      	adds	r3, r7, #7
 800e194:	701a      	strb	r2, [r3, #0]
 800e196:	1dfb      	adds	r3, r7, #7
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	b25b      	sxtb	r3, r3
 800e19c:	2b04      	cmp	r3, #4
 800e19e:	ddd2      	ble.n	800e146 <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800e1a0:	f000 ff9f 	bl	800f0e2 <NvmCtxMgmtStore>
}
 800e1a4:	46c0      	nop			; (mov r8, r8)
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	b002      	add	sp, #8
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	20000420 	.word	0x20000420

0800e1b0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800e1b0:	b5b0      	push	{r4, r5, r7, lr}
 800e1b2:	b08a      	sub	sp, #40	; 0x28
 800e1b4:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e1b6:	003b      	movs	r3, r7
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800e1bc:	2527      	movs	r5, #39	; 0x27
 800e1be:	197c      	adds	r4, r7, r5
 800e1c0:	003b      	movs	r3, r7
 800e1c2:	0018      	movs	r0, r3
 800e1c4:	f005 fb0a 	bl	80137dc <LoRaMacMibGetRequestConfirm>
 800e1c8:	0003      	movs	r3, r0
 800e1ca:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e1cc:	197b      	adds	r3, r7, r5
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d107      	bne.n	800e1e4 <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800e1d4:	003b      	movs	r3, r7
 800e1d6:	791b      	ldrb	r3, [r3, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d101      	bne.n	800e1e0 <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	e002      	b.n	800e1e6 <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e000      	b.n	800e1e6 <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800e1e4:	2300      	movs	r3, #0
  }
}
 800e1e6:	0018      	movs	r0, r3
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	b00a      	add	sp, #40	; 0x28
 800e1ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e1f0 <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800e1f0:	b590      	push	{r4, r7, lr}
 800e1f2:	b093      	sub	sp, #76	; 0x4c
 800e1f4:	af02      	add	r7, sp, #8
 800e1f6:	0002      	movs	r2, r0
 800e1f8:	1dfb      	adds	r3, r7, #7
 800e1fa:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800e1fc:	1dfb      	adds	r3, r7, #7
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	2b02      	cmp	r3, #2
 800e202:	d113      	bne.n	800e22c <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e204:	4b37      	ldr	r3, [pc, #220]	; (800e2e4 <LmHandlerJoin+0xf4>)
 800e206:	2202      	movs	r2, #2
 800e208:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800e20a:	f005 fa2d 	bl	8013668 <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800e20e:	2108      	movs	r1, #8
 800e210:	187b      	adds	r3, r7, r1
 800e212:	2201      	movs	r2, #1
 800e214:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e216:	4b34      	ldr	r3, [pc, #208]	; (800e2e8 <LmHandlerJoin+0xf8>)
 800e218:	78db      	ldrb	r3, [r3, #3]
 800e21a:	b25b      	sxtb	r3, r3
 800e21c:	b2da      	uxtb	r2, r3
 800e21e:	187b      	adds	r3, r7, r1
 800e220:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800e222:	187b      	adds	r3, r7, r1
 800e224:	0018      	movs	r0, r3
 800e226:	f005 ffbd 	bl	80141a4 <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800e22a:	e057      	b.n	800e2dc <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e22c:	4b2d      	ldr	r3, [pc, #180]	; (800e2e4 <LmHandlerJoin+0xf4>)
 800e22e:	2201      	movs	r2, #1
 800e230:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e232:	4b2c      	ldr	r3, [pc, #176]	; (800e2e4 <LmHandlerJoin+0xf4>)
 800e234:	2200      	movs	r2, #0
 800e236:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800e238:	4b2c      	ldr	r3, [pc, #176]	; (800e2ec <LmHandlerJoin+0xfc>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	2201      	movs	r2, #1
 800e23e:	4053      	eors	r3, r2
 800e240:	b2db      	uxtb	r3, r3
 800e242:	2b00      	cmp	r3, #0
 800e244:	d033      	beq.n	800e2ae <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e246:	211c      	movs	r1, #28
 800e248:	187b      	adds	r3, r7, r1
 800e24a:	2227      	movs	r2, #39	; 0x27
 800e24c:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e24e:	187b      	adds	r3, r7, r1
 800e250:	4a27      	ldr	r2, [pc, #156]	; (800e2f0 <LmHandlerJoin+0x100>)
 800e252:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e254:	000c      	movs	r4, r1
 800e256:	187b      	adds	r3, r7, r1
 800e258:	0018      	movs	r0, r3
 800e25a:	f005 fc1d 	bl	8013a98 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800e25e:	0021      	movs	r1, r4
 800e260:	187b      	adds	r3, r7, r1
 800e262:	2205      	movs	r2, #5
 800e264:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800e266:	4b23      	ldr	r3, [pc, #140]	; (800e2f4 <LmHandlerJoin+0x104>)
 800e268:	691a      	ldr	r2, [r3, #16]
 800e26a:	187b      	adds	r3, r7, r1
 800e26c:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e26e:	000c      	movs	r4, r1
 800e270:	187b      	adds	r3, r7, r1
 800e272:	0018      	movs	r0, r3
 800e274:	f005 fc10 	bl	8013a98 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800e278:	f7f6 fecc 	bl	8005014 <GetDevAddr>
 800e27c:	0002      	movs	r2, r0
 800e27e:	4b1d      	ldr	r3, [pc, #116]	; (800e2f4 <LmHandlerJoin+0x104>)
 800e280:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800e282:	0021      	movs	r1, r4
 800e284:	187b      	adds	r3, r7, r1
 800e286:	2206      	movs	r2, #6
 800e288:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800e28a:	4b1a      	ldr	r3, [pc, #104]	; (800e2f4 <LmHandlerJoin+0x104>)
 800e28c:	695a      	ldr	r2, [r3, #20]
 800e28e:	187b      	adds	r3, r7, r1
 800e290:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e292:	187b      	adds	r3, r7, r1
 800e294:	0018      	movs	r0, r3
 800e296:	f005 fbff 	bl	8013a98 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800e29a:	4b16      	ldr	r3, [pc, #88]	; (800e2f4 <LmHandlerJoin+0x104>)
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	4a16      	ldr	r2, [pc, #88]	; (800e2f8 <LmHandlerJoin+0x108>)
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	0013      	movs	r3, r2
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	2002      	movs	r0, #2
 800e2aa:	f00d fe29 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800e2ae:	f005 f9db 	bl	8013668 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e2b2:	211c      	movs	r1, #28
 800e2b4:	187b      	adds	r3, r7, r1
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e2ba:	187b      	adds	r3, r7, r1
 800e2bc:	2201      	movs	r2, #1
 800e2be:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800e2c0:	187b      	adds	r3, r7, r1
 800e2c2:	0018      	movs	r0, r3
 800e2c4:	f005 fbe8 	bl	8013a98 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e2c8:	4b0c      	ldr	r3, [pc, #48]	; (800e2fc <LmHandlerJoin+0x10c>)
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	4a05      	ldr	r2, [pc, #20]	; (800e2e4 <LmHandlerJoin+0xf4>)
 800e2ce:	0010      	movs	r0, r2
 800e2d0:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e2d2:	4b05      	ldr	r3, [pc, #20]	; (800e2e8 <LmHandlerJoin+0xf8>)
 800e2d4:	785b      	ldrb	r3, [r3, #1]
 800e2d6:	0018      	movs	r0, r3
 800e2d8:	f000 f8e4 	bl	800e4a4 <LmHandlerRequestClass>
}
 800e2dc:	46c0      	nop			; (mov r8, r8)
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	b011      	add	sp, #68	; 0x44
 800e2e2:	bd90      	pop	{r4, r7, pc}
 800e2e4:	2000015c 	.word	0x2000015c
 800e2e8:	20000434 	.word	0x20000434
 800e2ec:	20000586 	.word	0x20000586
 800e2f0:	01000300 	.word	0x01000300
 800e2f4:	20000138 	.word	0x20000138
 800e2f8:	0801f810 	.word	0x0801f810
 800e2fc:	2000043c 	.word	0x2000043c

0800e300 <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800e300:	b5b0      	push	{r4, r5, r7, lr}
 800e302:	b08c      	sub	sp, #48	; 0x30
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	0008      	movs	r0, r1
 800e30a:	607a      	str	r2, [r7, #4]
 800e30c:	0019      	movs	r1, r3
 800e30e:	230b      	movs	r3, #11
 800e310:	18fb      	adds	r3, r7, r3
 800e312:	1c02      	adds	r2, r0, #0
 800e314:	701a      	strb	r2, [r3, #0]
 800e316:	230a      	movs	r3, #10
 800e318:	18fb      	adds	r3, r7, r3
 800e31a:	1c0a      	adds	r2, r1, #0
 800e31c:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e31e:	232f      	movs	r3, #47	; 0x2f
 800e320:	18fb      	adds	r3, r7, r3
 800e322:	22ff      	movs	r2, #255	; 0xff
 800e324:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800e326:	f004 fd99 	bl	8012e5c <LoRaMacIsBusy>
 800e32a:	1e03      	subs	r3, r0, #0
 800e32c:	d002      	beq.n	800e334 <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800e32e:	2302      	movs	r3, #2
 800e330:	425b      	negs	r3, r3
 800e332:	e0a9      	b.n	800e488 <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e334:	f7ff ff3c 	bl	800e1b0 <LmHandlerJoinStatus>
 800e338:	0003      	movs	r3, r0
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d007      	beq.n	800e34e <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800e33e:	4b54      	ldr	r3, [pc, #336]	; (800e490 <LmHandlerSend+0x190>)
 800e340:	789b      	ldrb	r3, [r3, #2]
 800e342:	0018      	movs	r0, r3
 800e344:	f7ff ff54 	bl	800e1f0 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e348:	2303      	movs	r3, #3
 800e34a:	425b      	negs	r3, r3
 800e34c:	e09c      	b.n	800e488 <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800e34e:	4b51      	ldr	r3, [pc, #324]	; (800e494 <LmHandlerSend+0x194>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	4798      	blx	r3
 800e356:	1e03      	subs	r3, r0, #0
 800e358:	d00d      	beq.n	800e376 <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	781a      	ldrb	r2, [r3, #0]
 800e35e:	4b4d      	ldr	r3, [pc, #308]	; (800e494 <LmHandlerSend+0x194>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	429a      	cmp	r2, r3
 800e366:	d006      	beq.n	800e376 <LmHandlerSend+0x76>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d002      	beq.n	800e376 <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e370:	2304      	movs	r3, #4
 800e372:	425b      	negs	r3, r3
 800e374:	e088      	b.n	800e488 <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e376:	4b48      	ldr	r3, [pc, #288]	; (800e498 <LmHandlerSend+0x198>)
 800e378:	2203      	movs	r2, #3
 800e37a:	569a      	ldrsb	r2, [r3, r2]
 800e37c:	2418      	movs	r4, #24
 800e37e:	193b      	adds	r3, r7, r4
 800e380:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	785b      	ldrb	r3, [r3, #1]
 800e386:	2214      	movs	r2, #20
 800e388:	18ba      	adds	r2, r7, r2
 800e38a:	0011      	movs	r1, r2
 800e38c:	0018      	movs	r0, r3
 800e38e:	f005 f979 	bl	8013684 <LoRaMacQueryTxPossible>
 800e392:	1e03      	subs	r3, r0, #0
 800e394:	d00c      	beq.n	800e3b0 <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e396:	4b41      	ldr	r3, [pc, #260]	; (800e49c <LmHandlerSend+0x19c>)
 800e398:	2200      	movs	r2, #0
 800e39a:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800e39c:	193b      	adds	r3, r7, r4
 800e39e:	2200      	movs	r2, #0
 800e3a0:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e3a2:	193b      	adds	r3, r7, r4
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e3a8:	193b      	adds	r3, r7, r4
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	819a      	strh	r2, [r3, #12]
 800e3ae:	e021      	b.n	800e3f4 <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800e3b0:	4b3a      	ldr	r3, [pc, #232]	; (800e49c <LmHandlerSend+0x19c>)
 800e3b2:	200b      	movs	r0, #11
 800e3b4:	183a      	adds	r2, r7, r0
 800e3b6:	7812      	ldrb	r2, [r2, #0]
 800e3b8:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	781a      	ldrb	r2, [r3, #0]
 800e3be:	2118      	movs	r1, #24
 800e3c0:	187b      	adds	r3, r7, r1
 800e3c2:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	785b      	ldrb	r3, [r3, #1]
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	187b      	adds	r3, r7, r1
 800e3cc:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	685a      	ldr	r2, [r3, #4]
 800e3d2:	187b      	adds	r3, r7, r1
 800e3d4:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800e3d6:	183b      	adds	r3, r7, r0
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d103      	bne.n	800e3e6 <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800e3de:	187b      	adds	r3, r7, r1
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	701a      	strb	r2, [r3, #0]
 800e3e4:	e006      	b.n	800e3f4 <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800e3e6:	2118      	movs	r1, #24
 800e3e8:	187b      	adds	r3, r7, r1
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800e3ee:	187b      	adds	r3, r7, r1
 800e3f0:	2208      	movs	r2, #8
 800e3f2:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800e3f4:	4b29      	ldr	r3, [pc, #164]	; (800e49c <LmHandlerSend+0x19c>)
 800e3f6:	68fa      	ldr	r2, [r7, #12]
 800e3f8:	330c      	adds	r3, #12
 800e3fa:	ca03      	ldmia	r2!, {r0, r1}
 800e3fc:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e3fe:	4b26      	ldr	r3, [pc, #152]	; (800e498 <LmHandlerSend+0x198>)
 800e400:	2203      	movs	r2, #3
 800e402:	569a      	ldrsb	r2, [r3, r2]
 800e404:	4b25      	ldr	r3, [pc, #148]	; (800e49c <LmHandlerSend+0x19c>)
 800e406:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e408:	232e      	movs	r3, #46	; 0x2e
 800e40a:	18fc      	adds	r4, r7, r3
 800e40c:	230a      	movs	r3, #10
 800e40e:	18fb      	adds	r3, r7, r3
 800e410:	781a      	ldrb	r2, [r3, #0]
 800e412:	2518      	movs	r5, #24
 800e414:	197b      	adds	r3, r7, r5
 800e416:	0011      	movs	r1, r2
 800e418:	0018      	movs	r0, r3
 800e41a:	f006 f81b 	bl	8014454 <LoRaMacMcpsRequest>
 800e41e:	0003      	movs	r3, r0
 800e420:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d003      	beq.n	800e430 <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e428:	197b      	adds	r3, r7, r5
 800e42a:	691a      	ldr	r2, [r3, #16]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800e430:	232e      	movs	r3, #46	; 0x2e
 800e432:	18fb      	adds	r3, r7, r3
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	2b11      	cmp	r3, #17
 800e438:	d81d      	bhi.n	800e476 <LmHandlerSend+0x176>
 800e43a:	009a      	lsls	r2, r3, #2
 800e43c:	4b18      	ldr	r3, [pc, #96]	; (800e4a0 <LmHandlerSend+0x1a0>)
 800e43e:	18d3      	adds	r3, r2, r3
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e444:	232f      	movs	r3, #47	; 0x2f
 800e446:	18fb      	adds	r3, r7, r3
 800e448:	2200      	movs	r2, #0
 800e44a:	701a      	strb	r2, [r3, #0]
    break;
 800e44c:	e018      	b.n	800e480 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e44e:	232f      	movs	r3, #47	; 0x2f
 800e450:	18fb      	adds	r3, r7, r3
 800e452:	22fe      	movs	r2, #254	; 0xfe
 800e454:	701a      	strb	r2, [r3, #0]
    break;
 800e456:	e013      	b.n	800e480 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e458:	232f      	movs	r3, #47	; 0x2f
 800e45a:	18fb      	adds	r3, r7, r3
 800e45c:	22fd      	movs	r2, #253	; 0xfd
 800e45e:	701a      	strb	r2, [r3, #0]
    break;
 800e460:	e00e      	b.n	800e480 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e462:	232f      	movs	r3, #47	; 0x2f
 800e464:	18fb      	adds	r3, r7, r3
 800e466:	22fb      	movs	r2, #251	; 0xfb
 800e468:	701a      	strb	r2, [r3, #0]
    break;
 800e46a:	e009      	b.n	800e480 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e46c:	232f      	movs	r3, #47	; 0x2f
 800e46e:	18fb      	adds	r3, r7, r3
 800e470:	22fa      	movs	r2, #250	; 0xfa
 800e472:	701a      	strb	r2, [r3, #0]
    break;
 800e474:	e004      	b.n	800e480 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800e476:	232f      	movs	r3, #47	; 0x2f
 800e478:	18fb      	adds	r3, r7, r3
 800e47a:	22ff      	movs	r2, #255	; 0xff
 800e47c:	701a      	strb	r2, [r3, #0]
    break;
 800e47e:	46c0      	nop			; (mov r8, r8)
  }
      
  return lmhStatus;
 800e480:	232f      	movs	r3, #47	; 0x2f
 800e482:	18fb      	adds	r3, r7, r3
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	b25b      	sxtb	r3, r3
}
 800e488:	0018      	movs	r0, r3
 800e48a:	46bd      	mov	sp, r7
 800e48c:	b00c      	add	sp, #48	; 0x30
 800e48e:	bdb0      	pop	{r4, r5, r7, pc}
 800e490:	2000015c 	.word	0x2000015c
 800e494:	20000420 	.word	0x20000420
 800e498:	20000434 	.word	0x20000434
 800e49c:	2000047c 	.word	0x2000047c
 800e4a0:	0801f82c 	.word	0x0801f82c

0800e4a4 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b08c      	sub	sp, #48	; 0x30
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	0002      	movs	r2, r0
 800e4ac:	1dfb      	adds	r3, r7, #7
 800e4ae:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e4b0:	232f      	movs	r3, #47	; 0x2f
 800e4b2:	18fb      	adds	r3, r7, r3
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e4b8:	f7ff fe7a 	bl	800e1b0 <LmHandlerJoinStatus>
 800e4bc:	0003      	movs	r3, r0
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d002      	beq.n	800e4c8 <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e4c2:	2303      	movs	r3, #3
 800e4c4:	425b      	negs	r3, r3
 800e4c6:	e077      	b.n	800e5b8 <LmHandlerRequestClass+0x114>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e4c8:	2108      	movs	r1, #8
 800e4ca:	187b      	adds	r3, r7, r1
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e4d0:	187b      	adds	r3, r7, r1
 800e4d2:	0018      	movs	r0, r3
 800e4d4:	f005 f982 	bl	80137dc <LoRaMacMibGetRequestConfirm>
 800e4d8:	1e03      	subs	r3, r0, #0
 800e4da:	d002      	beq.n	800e4e2 <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	425b      	negs	r3, r3
 800e4e0:	e06a      	b.n	800e5b8 <LmHandlerRequestClass+0x114>
  }
  currentClass = mibReq.Param.Class;
 800e4e2:	212e      	movs	r1, #46	; 0x2e
 800e4e4:	187b      	adds	r3, r7, r1
 800e4e6:	2208      	movs	r2, #8
 800e4e8:	18ba      	adds	r2, r7, r2
 800e4ea:	7912      	ldrb	r2, [r2, #4]
 800e4ec:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800e4ee:	187a      	adds	r2, r7, r1
 800e4f0:	1dfb      	adds	r3, r7, #7
 800e4f2:	7812      	ldrb	r2, [r2, #0]
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d053      	beq.n	800e5a2 <LmHandlerRequestClass+0xfe>
  {
    switch (newClass)
 800e4fa:	1dfb      	adds	r3, r7, #7
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d02a      	beq.n	800e558 <LmHandlerRequestClass+0xb4>
 800e502:	dc50      	bgt.n	800e5a6 <LmHandlerRequestClass+0x102>
 800e504:	2b00      	cmp	r3, #0
 800e506:	d002      	beq.n	800e50e <LmHandlerRequestClass+0x6a>
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d020      	beq.n	800e54e <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800e50c:	e04b      	b.n	800e5a6 <LmHandlerRequestClass+0x102>
        if (currentClass != CLASS_A)
 800e50e:	232e      	movs	r3, #46	; 0x2e
 800e510:	18fb      	adds	r3, r7, r3
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d048      	beq.n	800e5aa <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_A;
 800e518:	2108      	movs	r1, #8
 800e51a:	187b      	adds	r3, r7, r1
 800e51c:	2200      	movs	r2, #0
 800e51e:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e520:	187b      	adds	r3, r7, r1
 800e522:	0018      	movs	r0, r3
 800e524:	f005 fab8 	bl	8013a98 <LoRaMacMibSetRequestConfirm>
 800e528:	1e03      	subs	r3, r0, #0
 800e52a:	d10b      	bne.n	800e544 <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800e52c:	2000      	movs	r0, #0
 800e52e:	f000 fac9 	bl	800eac4 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e532:	4b23      	ldr	r3, [pc, #140]	; (800e5c0 <LmHandlerRequestClass+0x11c>)
 800e534:	699b      	ldr	r3, [r3, #24]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d037      	beq.n	800e5aa <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800e53a:	4b21      	ldr	r3, [pc, #132]	; (800e5c0 <LmHandlerRequestClass+0x11c>)
 800e53c:	699b      	ldr	r3, [r3, #24]
 800e53e:	2000      	movs	r0, #0
 800e540:	4798      	blx	r3
      break;
 800e542:	e032      	b.n	800e5aa <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e544:	232f      	movs	r3, #47	; 0x2f
 800e546:	18fb      	adds	r3, r7, r3
 800e548:	22ff      	movs	r2, #255	; 0xff
 800e54a:	701a      	strb	r2, [r3, #0]
      break;
 800e54c:	e02d      	b.n	800e5aa <LmHandlerRequestClass+0x106>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800e54e:	232f      	movs	r3, #47	; 0x2f
 800e550:	18fb      	adds	r3, r7, r3
 800e552:	22ff      	movs	r2, #255	; 0xff
 800e554:	701a      	strb	r2, [r3, #0]
      break;
 800e556:	e02b      	b.n	800e5b0 <LmHandlerRequestClass+0x10c>
        if (currentClass != CLASS_A)
 800e558:	232e      	movs	r3, #46	; 0x2e
 800e55a:	18fb      	adds	r3, r7, r3
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d004      	beq.n	800e56c <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800e562:	232f      	movs	r3, #47	; 0x2f
 800e564:	18fb      	adds	r3, r7, r3
 800e566:	22ff      	movs	r2, #255	; 0xff
 800e568:	701a      	strb	r2, [r3, #0]
      break;
 800e56a:	e020      	b.n	800e5ae <LmHandlerRequestClass+0x10a>
          mibReq.Param.Class = CLASS_C;
 800e56c:	2108      	movs	r1, #8
 800e56e:	187b      	adds	r3, r7, r1
 800e570:	2202      	movs	r2, #2
 800e572:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e574:	187b      	adds	r3, r7, r1
 800e576:	0018      	movs	r0, r3
 800e578:	f005 fa8e 	bl	8013a98 <LoRaMacMibSetRequestConfirm>
 800e57c:	1e03      	subs	r3, r0, #0
 800e57e:	d10b      	bne.n	800e598 <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800e580:	2002      	movs	r0, #2
 800e582:	f000 fa9f 	bl	800eac4 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e586:	4b0e      	ldr	r3, [pc, #56]	; (800e5c0 <LmHandlerRequestClass+0x11c>)
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d00f      	beq.n	800e5ae <LmHandlerRequestClass+0x10a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800e58e:	4b0c      	ldr	r3, [pc, #48]	; (800e5c0 <LmHandlerRequestClass+0x11c>)
 800e590:	699b      	ldr	r3, [r3, #24]
 800e592:	2002      	movs	r0, #2
 800e594:	4798      	blx	r3
      break;
 800e596:	e00a      	b.n	800e5ae <LmHandlerRequestClass+0x10a>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e598:	232f      	movs	r3, #47	; 0x2f
 800e59a:	18fb      	adds	r3, r7, r3
 800e59c:	22ff      	movs	r2, #255	; 0xff
 800e59e:	701a      	strb	r2, [r3, #0]
      break;
 800e5a0:	e005      	b.n	800e5ae <LmHandlerRequestClass+0x10a>
    }
  }
 800e5a2:	46c0      	nop			; (mov r8, r8)
 800e5a4:	e004      	b.n	800e5b0 <LmHandlerRequestClass+0x10c>
        break;
 800e5a6:	46c0      	nop			; (mov r8, r8)
 800e5a8:	e002      	b.n	800e5b0 <LmHandlerRequestClass+0x10c>
      break;
 800e5aa:	46c0      	nop			; (mov r8, r8)
 800e5ac:	e000      	b.n	800e5b0 <LmHandlerRequestClass+0x10c>
      break;
 800e5ae:	46c0      	nop			; (mov r8, r8)
  return errorStatus;
 800e5b0:	232f      	movs	r3, #47	; 0x2f
 800e5b2:	18fb      	adds	r3, r7, r3
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	b25b      	sxtb	r3, r3
}
 800e5b8:	0018      	movs	r0, r3
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	b00c      	add	sp, #48	; 0x30
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	2000043c 	.word	0x2000043c

0800e5c4 <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800e5c4:	b590      	push	{r4, r7, lr}
 800e5c6:	b085      	sub	sp, #20
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	0002      	movs	r2, r0
 800e5cc:	6039      	str	r1, [r7, #0]
 800e5ce:	1dfb      	adds	r3, r7, #7
 800e5d0:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	60fb      	str	r3, [r7, #12]
  switch (id)
 800e5d6:	1dfb      	adds	r3, r7, #7
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d104      	bne.n	800e5e8 <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800e5de:	f000 fa8b 	bl	800eaf8 <LmphCompliancePackageFactory>
 800e5e2:	0003      	movs	r3, r0
 800e5e4:	60fb      	str	r3, [r7, #12]
      break;
 800e5e6:	e000      	b.n	800e5ea <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800e5e8:	46c0      	nop			; (mov r8, r8)
  }

  if (package != NULL)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d028      	beq.n	800e642 <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800e5f0:	1dfb      	adds	r3, r7, #7
 800e5f2:	781a      	ldrb	r2, [r3, #0]
 800e5f4:	4b16      	ldr	r3, [pc, #88]	; (800e650 <LmHandlerPackageRegister+0x8c>)
 800e5f6:	0092      	lsls	r2, r2, #2
 800e5f8:	68f9      	ldr	r1, [r7, #12]
 800e5fa:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e5fc:	1dfb      	adds	r3, r7, #7
 800e5fe:	781a      	ldrb	r2, [r3, #0]
 800e600:	4b13      	ldr	r3, [pc, #76]	; (800e650 <LmHandlerPackageRegister+0x8c>)
 800e602:	0092      	lsls	r2, r2, #2
 800e604:	58d3      	ldr	r3, [r2, r3]
 800e606:	4a13      	ldr	r2, [pc, #76]	; (800e654 <LmHandlerPackageRegister+0x90>)
 800e608:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800e60a:	1dfb      	adds	r3, r7, #7
 800e60c:	781a      	ldrb	r2, [r3, #0]
 800e60e:	4b10      	ldr	r3, [pc, #64]	; (800e650 <LmHandlerPackageRegister+0x8c>)
 800e610:	0092      	lsls	r2, r2, #2
 800e612:	58d3      	ldr	r3, [r2, r3]
 800e614:	4a10      	ldr	r2, [pc, #64]	; (800e658 <LmHandlerPackageRegister+0x94>)
 800e616:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e618:	1dfb      	adds	r3, r7, #7
 800e61a:	781a      	ldrb	r2, [r3, #0]
 800e61c:	4b0c      	ldr	r3, [pc, #48]	; (800e650 <LmHandlerPackageRegister+0x8c>)
 800e61e:	0092      	lsls	r2, r2, #2
 800e620:	58d3      	ldr	r3, [r2, r3]
 800e622:	4a0e      	ldr	r2, [pc, #56]	; (800e65c <LmHandlerPackageRegister+0x98>)
 800e624:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800e626:	1dfb      	adds	r3, r7, #7
 800e628:	781a      	ldrb	r2, [r3, #0]
 800e62a:	4b09      	ldr	r3, [pc, #36]	; (800e650 <LmHandlerPackageRegister+0x8c>)
 800e62c:	0092      	lsls	r2, r2, #2
 800e62e:	58d3      	ldr	r3, [r2, r3]
 800e630:	685c      	ldr	r4, [r3, #4]
 800e632:	4b0b      	ldr	r3, [pc, #44]	; (800e660 <LmHandlerPackageRegister+0x9c>)
 800e634:	6859      	ldr	r1, [r3, #4]
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	22f2      	movs	r2, #242	; 0xf2
 800e63a:	0018      	movs	r0, r3
 800e63c:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800e63e:	2300      	movs	r3, #0
 800e640:	e001      	b.n	800e646 <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e642:	2301      	movs	r3, #1
 800e644:	425b      	negs	r3, r3
  }
}
 800e646:	0018      	movs	r0, r3
 800e648:	46bd      	mov	sp, r7
 800e64a:	b005      	add	sp, #20
 800e64c:	bd90      	pop	{r4, r7, pc}
 800e64e:	46c0      	nop			; (mov r8, r8)
 800e650:	20000420 	.word	0x20000420
 800e654:	0800e1f1 	.word	0x0800e1f1
 800e658:	0800e301 	.word	0x0800e301
 800e65c:	0800e6fd 	.word	0x0800e6fd
 800e660:	20000170 	.word	0x20000170

0800e664 <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b08c      	sub	sp, #48	; 0x30
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d102      	bne.n	800e678 <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e672:	2301      	movs	r3, #1
 800e674:	425b      	negs	r3, r3
 800e676:	e012      	b.n	800e69e <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e678:	210c      	movs	r1, #12
 800e67a:	187b      	adds	r3, r7, r1
 800e67c:	2200      	movs	r2, #0
 800e67e:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e680:	187b      	adds	r3, r7, r1
 800e682:	0018      	movs	r0, r3
 800e684:	f005 f8aa 	bl	80137dc <LoRaMacMibGetRequestConfirm>
 800e688:	1e03      	subs	r3, r0, #0
 800e68a:	d002      	beq.n	800e692 <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e68c:	2301      	movs	r3, #1
 800e68e:	425b      	negs	r3, r3
 800e690:	e005      	b.n	800e69e <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800e692:	230c      	movs	r3, #12
 800e694:	18fb      	adds	r3, r7, r3
 800e696:	791a      	ldrb	r2, [r3, #4]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	0018      	movs	r0, r3
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	b00c      	add	sp, #48	; 0x30
 800e6a4:	bd80      	pop	{r7, pc}
	...

0800e6a8 <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08c      	sub	sp, #48	; 0x30
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d102      	bne.n	800e6bc <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	425b      	negs	r3, r3
 800e6ba:	e018      	b.n	800e6ee <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800e6bc:	210c      	movs	r1, #12
 800e6be:	187b      	adds	r3, r7, r1
 800e6c0:	221f      	movs	r2, #31
 800e6c2:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800e6c4:	187b      	adds	r3, r7, r1
 800e6c6:	0018      	movs	r0, r3
 800e6c8:	f005 f888 	bl	80137dc <LoRaMacMibGetRequestConfirm>
 800e6cc:	1e03      	subs	r3, r0, #0
 800e6ce:	d002      	beq.n	800e6d6 <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	425b      	negs	r3, r3
 800e6d4:	e00b      	b.n	800e6ee <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800e6d6:	210c      	movs	r1, #12
 800e6d8:	187b      	adds	r3, r7, r1
 800e6da:	2204      	movs	r2, #4
 800e6dc:	569a      	ldrsb	r2, [r3, r2]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800e6e2:	187b      	adds	r3, r7, r1
 800e6e4:	2204      	movs	r2, #4
 800e6e6:	569a      	ldrsb	r2, [r3, r2]
 800e6e8:	4b03      	ldr	r3, [pc, #12]	; (800e6f8 <LmHandlerGetTxDatarate+0x50>)
 800e6ea:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800e6ec:	2300      	movs	r3, #0
}
 800e6ee:	0018      	movs	r0, r3
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	b00c      	add	sp, #48	; 0x30
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	46c0      	nop			; (mov r8, r8)
 800e6f8:	20000434 	.word	0x20000434

0800e6fc <LmHandlerDeviceTimeReq>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800e6fc:	b5b0      	push	{r4, r5, r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800e702:	003b      	movs	r3, r7
 800e704:	220a      	movs	r2, #10
 800e706:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800e708:	2517      	movs	r5, #23
 800e70a:	197c      	adds	r4, r7, r5
 800e70c:	003b      	movs	r3, r7
 800e70e:	0018      	movs	r0, r3
 800e710:	f005 fd48 	bl	80141a4 <LoRaMacMlmeRequest>
 800e714:	0003      	movs	r3, r0
 800e716:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e718:	197b      	adds	r3, r7, r5
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d101      	bne.n	800e724 <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800e720:	2300      	movs	r3, #0
 800e722:	e001      	b.n	800e728 <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e724:	2301      	movs	r3, #1
 800e726:	425b      	negs	r3, r3
  }
}
 800e728:	0018      	movs	r0, r3
 800e72a:	46bd      	mov	sp, r7
 800e72c:	b006      	add	sp, #24
 800e72e:	bdb0      	pop	{r4, r5, r7, pc}

0800e730 <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1; // Здесь выставляется будет ли подтверждение или нет
 800e738:	4b16      	ldr	r3, [pc, #88]	; (800e794 <McpsConfirm+0x64>)
 800e73a:	2201      	movs	r2, #1
 800e73c:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	785a      	ldrb	r2, [r3, #1]
 800e742:	4b14      	ldr	r3, [pc, #80]	; (800e794 <McpsConfirm+0x64>)
 800e744:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	789b      	ldrb	r3, [r3, #2]
 800e74a:	b25a      	sxtb	r2, r3
 800e74c:	4b11      	ldr	r3, [pc, #68]	; (800e794 <McpsConfirm+0x64>)
 800e74e:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	68da      	ldr	r2, [r3, #12]
 800e754:	4b0f      	ldr	r3, [pc, #60]	; (800e794 <McpsConfirm+0x64>)
 800e756:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2203      	movs	r2, #3
 800e75c:	569a      	ldrsb	r2, [r3, r2]
 800e75e:	4b0d      	ldr	r3, [pc, #52]	; (800e794 <McpsConfirm+0x64>)
 800e760:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	691b      	ldr	r3, [r3, #16]
 800e766:	b2da      	uxtb	r2, r3
 800e768:	4b0a      	ldr	r3, [pc, #40]	; (800e794 <McpsConfirm+0x64>)
 800e76a:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	791b      	ldrb	r3, [r3, #4]
 800e770:	001a      	movs	r2, r3
 800e772:	4b08      	ldr	r3, [pc, #32]	; (800e794 <McpsConfirm+0x64>)
 800e774:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800e776:	4b08      	ldr	r3, [pc, #32]	; (800e798 <McpsConfirm+0x68>)
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	4a06      	ldr	r2, [pc, #24]	; (800e794 <McpsConfirm+0x64>)
 800e77c:	0010      	movs	r0, r2
 800e77e:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	0019      	movs	r1, r3
 800e784:	2000      	movs	r0, #0
 800e786:	f000 f907 	bl	800e998 <LmHandlerPackagesNotify>
}
 800e78a:	46c0      	nop			; (mov r8, r8)
 800e78c:	46bd      	mov	sp, r7
 800e78e:	b002      	add	sp, #8
 800e790:	bd80      	pop	{r7, pc}
 800e792:	46c0      	nop			; (mov r8, r8)
 800e794:	2000047c 	.word	0x2000047c
 800e798:	2000043c 	.word	0x2000043c

0800e79c <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800e79c:	b590      	push	{r4, r7, lr}
 800e79e:	b089      	sub	sp, #36	; 0x24
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800e7a4:	4b36      	ldr	r3, [pc, #216]	; (800e880 <McpsIndication+0xe4>)
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	785a      	ldrb	r2, [r3, #1]
 800e7ae:	4b34      	ldr	r3, [pc, #208]	; (800e880 <McpsIndication+0xe4>)
 800e7b0:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800e7b2:	4b33      	ldr	r3, [pc, #204]	; (800e880 <McpsIndication+0xe4>)
 800e7b4:	785b      	ldrb	r3, [r3, #1]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d15e      	bne.n	800e878 <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	7b1b      	ldrb	r3, [r3, #12]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d02c      	beq.n	800e81c <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	791b      	ldrb	r3, [r3, #4]
 800e7c6:	b25a      	sxtb	r2, r3
 800e7c8:	4b2d      	ldr	r3, [pc, #180]	; (800e880 <McpsIndication+0xe4>)
 800e7ca:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	220e      	movs	r2, #14
 800e7d0:	5e9b      	ldrsh	r3, [r3, r2]
 800e7d2:	b25a      	sxtb	r2, r3
 800e7d4:	4b2a      	ldr	r3, [pc, #168]	; (800e880 <McpsIndication+0xe4>)
 800e7d6:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2210      	movs	r2, #16
 800e7dc:	569a      	ldrsb	r2, [r3, r2]
 800e7de:	4b28      	ldr	r3, [pc, #160]	; (800e880 <McpsIndication+0xe4>)
 800e7e0:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	695a      	ldr	r2, [r3, #20]
 800e7e6:	4b26      	ldr	r3, [pc, #152]	; (800e880 <McpsIndication+0xe4>)
 800e7e8:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	7c5b      	ldrb	r3, [r3, #17]
 800e7ee:	b25a      	sxtb	r2, r3
 800e7f0:	4b23      	ldr	r3, [pc, #140]	; (800e880 <McpsIndication+0xe4>)
 800e7f2:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	78da      	ldrb	r2, [r3, #3]
 800e7f8:	2118      	movs	r1, #24
 800e7fa:	187b      	adds	r3, r7, r1
 800e7fc:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	7b1a      	ldrb	r2, [r3, #12]
 800e802:	187b      	adds	r3, r7, r1
 800e804:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	689a      	ldr	r2, [r3, #8]
 800e80a:	0008      	movs	r0, r1
 800e80c:	187b      	adds	r3, r7, r1
 800e80e:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800e810:	4b1c      	ldr	r3, [pc, #112]	; (800e884 <McpsIndication+0xe8>)
 800e812:	695b      	ldr	r3, [r3, #20]
 800e814:	491a      	ldr	r1, [pc, #104]	; (800e880 <McpsIndication+0xe4>)
 800e816:	183a      	adds	r2, r7, r0
 800e818:	0010      	movs	r0, r2
 800e81a:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	7f1b      	ldrb	r3, [r3, #28]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d006      	beq.n	800e832 <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800e824:	4b17      	ldr	r3, [pc, #92]	; (800e884 <McpsIndication+0xe8>)
 800e826:	69db      	ldr	r3, [r3, #28]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d002      	beq.n	800e832 <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800e82c:	4b15      	ldr	r3, [pc, #84]	; (800e884 <McpsIndication+0xe8>)
 800e82e:	69db      	ldr	r3, [r3, #28]
 800e830:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	0019      	movs	r1, r3
 800e836:	2001      	movs	r0, #1
 800e838:	f000 f8ae 	bl	800e998 <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800e83c:	2417      	movs	r4, #23
 800e83e:	193b      	adds	r3, r7, r4
 800e840:	0018      	movs	r0, r3
 800e842:	f7ff ff0f 	bl	800e664 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	795b      	ldrb	r3, [r3, #5]
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d115      	bne.n	800e87a <McpsIndication+0xde>
 800e84e:	193b      	adds	r3, r7, r4
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d111      	bne.n	800e87a <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800e856:	210c      	movs	r1, #12
 800e858:	187b      	adds	r3, r7, r1
 800e85a:	2200      	movs	r2, #0
 800e85c:	701a      	strb	r2, [r3, #0]
 800e85e:	187b      	adds	r3, r7, r1
 800e860:	2200      	movs	r2, #0
 800e862:	705a      	strb	r2, [r3, #1]
 800e864:	187b      	adds	r3, r7, r1
 800e866:	2200      	movs	r2, #0
 800e868:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800e86a:	1878      	adds	r0, r7, r1
 800e86c:	2301      	movs	r3, #1
 800e86e:	2200      	movs	r2, #0
 800e870:	2100      	movs	r1, #0
 800e872:	f7ff fd45 	bl	800e300 <LmHandlerSend>
 800e876:	e000      	b.n	800e87a <McpsIndication+0xde>
    return;
 800e878:	46c0      	nop			; (mov r8, r8)
  }
}
 800e87a:	46bd      	mov	sp, r7
 800e87c:	b009      	add	sp, #36	; 0x24
 800e87e:	bd90      	pop	{r4, r7, pc}
 800e880:	20000160 	.word	0x20000160
 800e884:	2000043c 	.word	0x2000043c

0800e888 <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800e888:	b590      	push	{r4, r7, lr}
 800e88a:	b08d      	sub	sp, #52	; 0x34
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800e890:	4b22      	ldr	r3, [pc, #136]	; (800e91c <MlmeConfirm+0x94>)
 800e892:	2200      	movs	r2, #0
 800e894:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	785a      	ldrb	r2, [r3, #1]
 800e89a:	4b20      	ldr	r3, [pc, #128]	; (800e91c <MlmeConfirm+0x94>)
 800e89c:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	0019      	movs	r1, r3
 800e8a2:	2002      	movs	r0, #2
 800e8a4:	f000 f878 	bl	800e998 <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	2b0a      	cmp	r3, #10
 800e8ae:	d02c      	beq.n	800e90a <MlmeConfirm+0x82>
 800e8b0:	dc2d      	bgt.n	800e90e <MlmeConfirm+0x86>
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d002      	beq.n	800e8bc <MlmeConfirm+0x34>
 800e8b6:	2b04      	cmp	r3, #4
 800e8b8:	d02b      	beq.n	800e912 <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e8ba:	e028      	b.n	800e90e <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800e8bc:	210c      	movs	r1, #12
 800e8be:	187b      	adds	r3, r7, r1
 800e8c0:	2206      	movs	r2, #6
 800e8c2:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800e8c4:	000c      	movs	r4, r1
 800e8c6:	187b      	adds	r3, r7, r1
 800e8c8:	0018      	movs	r0, r3
 800e8ca:	f004 ff87 	bl	80137dc <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e8ce:	193b      	adds	r3, r7, r4
 800e8d0:	685a      	ldr	r2, [r3, #4]
 800e8d2:	4b13      	ldr	r3, [pc, #76]	; (800e920 <MlmeConfirm+0x98>)
 800e8d4:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800e8d6:	4b13      	ldr	r3, [pc, #76]	; (800e924 <MlmeConfirm+0x9c>)
 800e8d8:	0018      	movs	r0, r3
 800e8da:	f7ff fee5 	bl	800e6a8 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	785b      	ldrb	r3, [r3, #1]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d108      	bne.n	800e8f8 <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e8e6:	4b0f      	ldr	r3, [pc, #60]	; (800e924 <MlmeConfirm+0x9c>)
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e8ec:	4b0e      	ldr	r3, [pc, #56]	; (800e928 <MlmeConfirm+0xa0>)
 800e8ee:	785b      	ldrb	r3, [r3, #1]
 800e8f0:	0018      	movs	r0, r3
 800e8f2:	f7ff fdd7 	bl	800e4a4 <LmHandlerRequestClass>
 800e8f6:	e002      	b.n	800e8fe <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e8f8:	4b0a      	ldr	r3, [pc, #40]	; (800e924 <MlmeConfirm+0x9c>)
 800e8fa:	22ff      	movs	r2, #255	; 0xff
 800e8fc:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e8fe:	4b0b      	ldr	r3, [pc, #44]	; (800e92c <MlmeConfirm+0xa4>)
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	4a08      	ldr	r2, [pc, #32]	; (800e924 <MlmeConfirm+0x9c>)
 800e904:	0010      	movs	r0, r2
 800e906:	4798      	blx	r3
    break;
 800e908:	e004      	b.n	800e914 <MlmeConfirm+0x8c>
    break;
 800e90a:	46c0      	nop			; (mov r8, r8)
 800e90c:	e002      	b.n	800e914 <MlmeConfirm+0x8c>
      break;
 800e90e:	46c0      	nop			; (mov r8, r8)
 800e910:	e000      	b.n	800e914 <MlmeConfirm+0x8c>
    break;
 800e912:	46c0      	nop			; (mov r8, r8)
  }
}
 800e914:	46c0      	nop			; (mov r8, r8)
 800e916:	46bd      	mov	sp, r7
 800e918:	b00d      	add	sp, #52	; 0x34
 800e91a:	bd90      	pop	{r4, r7, pc}
 800e91c:	2000047c 	.word	0x2000047c
 800e920:	20000138 	.word	0x20000138
 800e924:	2000015c 	.word	0x2000015c
 800e928:	20000434 	.word	0x20000434
 800e92c:	2000043c 	.word	0x2000043c

0800e930 <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800e938:	4b05      	ldr	r3, [pc, #20]	; (800e950 <MlmeIndication+0x20>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	785a      	ldrb	r2, [r3, #1]
 800e942:	4b03      	ldr	r3, [pc, #12]	; (800e950 <MlmeIndication+0x20>)
 800e944:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e946:	46c0      	nop			; (mov r8, r8)
  }
}
 800e948:	46c0      	nop			; (mov r8, r8)
 800e94a:	46bd      	mov	sp, r7
 800e94c:	b002      	add	sp, #8
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	20000160 	.word	0x20000160

0800e954 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	0002      	movs	r2, r0
 800e95c:	1dfb      	adds	r3, r7, #7
 800e95e:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800e960:	1dfb      	adds	r3, r7, #7
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	2b04      	cmp	r3, #4
 800e966:	d810      	bhi.n	800e98a <LmHandlerPackageIsInitialized+0x36>
 800e968:	1dfb      	adds	r3, r7, #7
 800e96a:	781a      	ldrb	r2, [r3, #0]
 800e96c:	4b09      	ldr	r3, [pc, #36]	; (800e994 <LmHandlerPackageIsInitialized+0x40>)
 800e96e:	0092      	lsls	r2, r2, #2
 800e970:	58d3      	ldr	r3, [r2, r3]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d008      	beq.n	800e98a <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800e978:	1dfb      	adds	r3, r7, #7
 800e97a:	781a      	ldrb	r2, [r3, #0]
 800e97c:	4b05      	ldr	r3, [pc, #20]	; (800e994 <LmHandlerPackageIsInitialized+0x40>)
 800e97e:	0092      	lsls	r2, r2, #2
 800e980:	58d3      	ldr	r3, [r2, r3]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	4798      	blx	r3
 800e986:	0003      	movs	r3, r0
 800e988:	e000      	b.n	800e98c <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800e98a:	2300      	movs	r3, #0
  }
}
 800e98c:	0018      	movs	r0, r3
 800e98e:	46bd      	mov	sp, r7
 800e990:	b002      	add	sp, #8
 800e992:	bd80      	pop	{r7, pc}
 800e994:	20000420 	.word	0x20000420

0800e998 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	0002      	movs	r2, r0
 800e9a0:	6039      	str	r1, [r7, #0]
 800e9a2:	1dfb      	adds	r3, r7, #7
 800e9a4:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e9a6:	230f      	movs	r3, #15
 800e9a8:	18fb      	adds	r3, r7, r3
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	701a      	strb	r2, [r3, #0]
 800e9ae:	e07b      	b.n	800eaa8 <LmHandlerPackagesNotify+0x110>
  {
    if (LmHandlerPackages[i] != NULL)
 800e9b0:	230f      	movs	r3, #15
 800e9b2:	18fb      	adds	r3, r7, r3
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	569a      	ldrsb	r2, [r3, r2]
 800e9b8:	4b41      	ldr	r3, [pc, #260]	; (800eac0 <LmHandlerPackagesNotify+0x128>)
 800e9ba:	0092      	lsls	r2, r2, #2
 800e9bc:	58d3      	ldr	r3, [r2, r3]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d100      	bne.n	800e9c4 <LmHandlerPackagesNotify+0x2c>
 800e9c2:	e05f      	b.n	800ea84 <LmHandlerPackagesNotify+0xec>
    {
      switch (notifyType)
 800e9c4:	1dfb      	adds	r3, r7, #7
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d046      	beq.n	800ea5a <LmHandlerPackagesNotify+0xc2>
 800e9cc:	dc5c      	bgt.n	800ea88 <LmHandlerPackagesNotify+0xf0>
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d002      	beq.n	800e9d8 <LmHandlerPackagesNotify+0x40>
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d015      	beq.n	800ea02 <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800e9d6:	e057      	b.n	800ea88 <LmHandlerPackagesNotify+0xf0>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800e9d8:	210f      	movs	r1, #15
 800e9da:	187b      	adds	r3, r7, r1
 800e9dc:	2200      	movs	r2, #0
 800e9de:	569a      	ldrsb	r2, [r3, r2]
 800e9e0:	4b37      	ldr	r3, [pc, #220]	; (800eac0 <LmHandlerPackagesNotify+0x128>)
 800e9e2:	0092      	lsls	r2, r2, #2
 800e9e4:	58d3      	ldr	r3, [r2, r3]
 800e9e6:	695b      	ldr	r3, [r3, #20]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d04f      	beq.n	800ea8c <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800e9ec:	187b      	adds	r3, r7, r1
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	569a      	ldrsb	r2, [r3, r2]
 800e9f2:	4b33      	ldr	r3, [pc, #204]	; (800eac0 <LmHandlerPackagesNotify+0x128>)
 800e9f4:	0092      	lsls	r2, r2, #2
 800e9f6:	58d3      	ldr	r3, [r2, r3]
 800e9f8:	695b      	ldr	r3, [r3, #20]
 800e9fa:	683a      	ldr	r2, [r7, #0]
 800e9fc:	0010      	movs	r0, r2
 800e9fe:	4798      	blx	r3
          break;
 800ea00:	e044      	b.n	800ea8c <LmHandlerPackagesNotify+0xf4>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800ea02:	210f      	movs	r1, #15
 800ea04:	187b      	adds	r3, r7, r1
 800ea06:	2200      	movs	r2, #0
 800ea08:	569a      	ldrsb	r2, [r3, r2]
 800ea0a:	4b2d      	ldr	r3, [pc, #180]	; (800eac0 <LmHandlerPackagesNotify+0x128>)
 800ea0c:	0092      	lsls	r2, r2, #2
 800ea0e:	58d3      	ldr	r3, [r2, r3]
 800ea10:	699b      	ldr	r3, [r3, #24]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d03c      	beq.n	800ea90 <LmHandlerPackagesNotify+0xf8>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800ea16:	187b      	adds	r3, r7, r1
 800ea18:	2200      	movs	r2, #0
 800ea1a:	569a      	ldrsb	r2, [r3, r2]
 800ea1c:	4b28      	ldr	r3, [pc, #160]	; (800eac0 <LmHandlerPackagesNotify+0x128>)
 800ea1e:	0092      	lsls	r2, r2, #2
 800ea20:	58d3      	ldr	r3, [r2, r3]
 800ea22:	781a      	ldrb	r2, [r3, #0]
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d00a      	beq.n	800ea42 <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800ea2c:	187b      	adds	r3, r7, r1
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	b25b      	sxtb	r3, r3
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d12c      	bne.n	800ea90 <LmHandlerPackagesNotify+0xf8>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800ea36:	4b22      	ldr	r3, [pc, #136]	; (800eac0 <LmHandlerPackagesNotify+0x128>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	4798      	blx	r3
 800ea3e:	1e03      	subs	r3, r0, #0
 800ea40:	d026      	beq.n	800ea90 <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800ea42:	230f      	movs	r3, #15
 800ea44:	18fb      	adds	r3, r7, r3
 800ea46:	2200      	movs	r2, #0
 800ea48:	569a      	ldrsb	r2, [r3, r2]
 800ea4a:	4b1d      	ldr	r3, [pc, #116]	; (800eac0 <LmHandlerPackagesNotify+0x128>)
 800ea4c:	0092      	lsls	r2, r2, #2
 800ea4e:	58d3      	ldr	r3, [r2, r3]
 800ea50:	699b      	ldr	r3, [r3, #24]
 800ea52:	683a      	ldr	r2, [r7, #0]
 800ea54:	0010      	movs	r0, r2
 800ea56:	4798      	blx	r3
          break;
 800ea58:	e01a      	b.n	800ea90 <LmHandlerPackagesNotify+0xf8>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800ea5a:	210f      	movs	r1, #15
 800ea5c:	187b      	adds	r3, r7, r1
 800ea5e:	2200      	movs	r2, #0
 800ea60:	569a      	ldrsb	r2, [r3, r2]
 800ea62:	4b17      	ldr	r3, [pc, #92]	; (800eac0 <LmHandlerPackagesNotify+0x128>)
 800ea64:	0092      	lsls	r2, r2, #2
 800ea66:	58d3      	ldr	r3, [r2, r3]
 800ea68:	69db      	ldr	r3, [r3, #28]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d012      	beq.n	800ea94 <LmHandlerPackagesNotify+0xfc>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800ea6e:	187b      	adds	r3, r7, r1
 800ea70:	2200      	movs	r2, #0
 800ea72:	569a      	ldrsb	r2, [r3, r2]
 800ea74:	4b12      	ldr	r3, [pc, #72]	; (800eac0 <LmHandlerPackagesNotify+0x128>)
 800ea76:	0092      	lsls	r2, r2, #2
 800ea78:	58d3      	ldr	r3, [r2, r3]
 800ea7a:	69db      	ldr	r3, [r3, #28]
 800ea7c:	683a      	ldr	r2, [r7, #0]
 800ea7e:	0010      	movs	r0, r2
 800ea80:	4798      	blx	r3
          break;
 800ea82:	e007      	b.n	800ea94 <LmHandlerPackagesNotify+0xfc>
      }
    }
 800ea84:	46c0      	nop			; (mov r8, r8)
 800ea86:	e006      	b.n	800ea96 <LmHandlerPackagesNotify+0xfe>
          break;
 800ea88:	46c0      	nop			; (mov r8, r8)
 800ea8a:	e004      	b.n	800ea96 <LmHandlerPackagesNotify+0xfe>
          break;
 800ea8c:	46c0      	nop			; (mov r8, r8)
 800ea8e:	e002      	b.n	800ea96 <LmHandlerPackagesNotify+0xfe>
          break;
 800ea90:	46c0      	nop			; (mov r8, r8)
 800ea92:	e000      	b.n	800ea96 <LmHandlerPackagesNotify+0xfe>
          break;
 800ea94:	46c0      	nop			; (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800ea96:	210f      	movs	r1, #15
 800ea98:	187b      	adds	r3, r7, r1
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	b25b      	sxtb	r3, r3
 800ea9e:	b2db      	uxtb	r3, r3
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	b2da      	uxtb	r2, r3
 800eaa4:	187b      	adds	r3, r7, r1
 800eaa6:	701a      	strb	r2, [r3, #0]
 800eaa8:	230f      	movs	r3, #15
 800eaaa:	18fb      	adds	r3, r7, r3
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	b25b      	sxtb	r3, r3
 800eab0:	2b04      	cmp	r3, #4
 800eab2:	dc00      	bgt.n	800eab6 <LmHandlerPackagesNotify+0x11e>
 800eab4:	e77c      	b.n	800e9b0 <LmHandlerPackagesNotify+0x18>
  }
}
 800eab6:	46c0      	nop			; (mov r8, r8)
 800eab8:	46c0      	nop			; (mov r8, r8)
 800eaba:	46bd      	mov	sp, r7
 800eabc:	b004      	add	sp, #16
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	20000420 	.word	0x20000420

0800eac4 <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af02      	add	r7, sp, #8
 800eaca:	0002      	movs	r2, r0
 800eacc:	1dfb      	adds	r3, r7, #7
 800eace:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800ead0:	1dfb      	adds	r3, r7, #7
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	4a06      	ldr	r2, [pc, #24]	; (800eaf0 <DisplayClassUpdate+0x2c>)
 800ead6:	5cd3      	ldrb	r3, [r2, r3]
 800ead8:	001a      	movs	r2, r3
 800eada:	4b06      	ldr	r3, [pc, #24]	; (800eaf4 <DisplayClassUpdate+0x30>)
 800eadc:	9200      	str	r2, [sp, #0]
 800eade:	2200      	movs	r2, #0
 800eae0:	2100      	movs	r1, #0
 800eae2:	2002      	movs	r0, #2
 800eae4:	f00d fa0c 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
}
 800eae8:	46c0      	nop			; (mov r8, r8)
 800eaea:	46bd      	mov	sp, r7
 800eaec:	b002      	add	sp, #8
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	0801f890 	.word	0x0801f890
 800eaf4:	0801f874 	.word	0x0801f874

0800eaf8 <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800eafc:	4b01      	ldr	r3, [pc, #4]	; (800eb04 <LmphCompliancePackageFactory+0xc>)
}
 800eafe:	0018      	movs	r0, r3
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	20000178 	.word	0x20000178

0800eb08 <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	1dfb      	adds	r3, r7, #7
 800eb14:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d010      	beq.n	800eb3e <LmhpComplianceInit+0x36>
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00d      	beq.n	800eb3e <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800eb22:	4b0c      	ldr	r3, [pc, #48]	; (800eb54 <LmhpComplianceInit+0x4c>)
 800eb24:	68fa      	ldr	r2, [r7, #12]
 800eb26:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800eb28:	4b0b      	ldr	r3, [pc, #44]	; (800eb58 <LmhpComplianceInit+0x50>)
 800eb2a:	68ba      	ldr	r2, [r7, #8]
 800eb2c:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800eb2e:	4b0a      	ldr	r3, [pc, #40]	; (800eb58 <LmhpComplianceInit+0x50>)
 800eb30:	1dfa      	adds	r2, r7, #7
 800eb32:	7812      	ldrb	r2, [r2, #0]
 800eb34:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800eb36:	4b08      	ldr	r3, [pc, #32]	; (800eb58 <LmhpComplianceInit+0x50>)
 800eb38:	2201      	movs	r2, #1
 800eb3a:	701a      	strb	r2, [r3, #0]
 800eb3c:	e006      	b.n	800eb4c <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800eb3e:	4b05      	ldr	r3, [pc, #20]	; (800eb54 <LmhpComplianceInit+0x4c>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800eb44:	4b04      	ldr	r3, [pc, #16]	; (800eb58 <LmhpComplianceInit+0x50>)
 800eb46:	2200      	movs	r2, #0
 800eb48:	701a      	strb	r2, [r3, #0]
  }
}
 800eb4a:	46c0      	nop			; (mov r8, r8)
 800eb4c:	46c0      	nop			; (mov r8, r8)
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	b004      	add	sp, #16
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	200005b4 	.word	0x200005b4
 800eb58:	200005a0 	.word	0x200005a0

0800eb5c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800eb60:	4b02      	ldr	r3, [pc, #8]	; (800eb6c <LmhpComplianceIsInitialized+0x10>)
 800eb62:	781b      	ldrb	r3, [r3, #0]
}
 800eb64:	0018      	movs	r0, r3
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	46c0      	nop			; (mov r8, r8)
 800eb6c:	200005a0 	.word	0x200005a0

0800eb70 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800eb74:	4b06      	ldr	r3, [pc, #24]	; (800eb90 <LmhpComplianceIsRunning+0x20>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	2201      	movs	r2, #1
 800eb7a:	4053      	eors	r3, r2
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800eb82:	2300      	movs	r3, #0
 800eb84:	e001      	b.n	800eb8a <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800eb86:	4b02      	ldr	r3, [pc, #8]	; (800eb90 <LmhpComplianceIsRunning+0x20>)
 800eb88:	785b      	ldrb	r3, [r3, #1]
}
 800eb8a:	0018      	movs	r0, r3
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	200005a0 	.word	0x200005a0

0800eb94 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800eb9c:	4b0e      	ldr	r3, [pc, #56]	; (800ebd8 <LmhpComplianceOnMcpsConfirm+0x44>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	2201      	movs	r2, #1
 800eba2:	4053      	eors	r3, r2
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d112      	bne.n	800ebd0 <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800ebaa:	4b0b      	ldr	r3, [pc, #44]	; (800ebd8 <LmhpComplianceOnMcpsConfirm+0x44>)
 800ebac:	785b      	ldrb	r3, [r3, #1]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00f      	beq.n	800ebd2 <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d10b      	bne.n	800ebd2 <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d007      	beq.n	800ebd2 <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800ebc2:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <LmhpComplianceOnMcpsConfirm+0x44>)
 800ebc4:	899b      	ldrh	r3, [r3, #12]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	b29a      	uxth	r2, r3
 800ebca:	4b03      	ldr	r3, [pc, #12]	; (800ebd8 <LmhpComplianceOnMcpsConfirm+0x44>)
 800ebcc:	819a      	strh	r2, [r3, #12]
 800ebce:	e000      	b.n	800ebd2 <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800ebd0:	46c0      	nop			; (mov r8, r8)
  }
}
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	b002      	add	sp, #8
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	200005a0 	.word	0x200005a0

0800ebdc <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800ebe4:	4b0d      	ldr	r3, [pc, #52]	; (800ec1c <LmhpComplianceOnMlmeConfirm+0x40>)
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	4053      	eors	r3, r2
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10f      	bne.n	800ec12 <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	2b04      	cmp	r3, #4
 800ebf8:	d10c      	bne.n	800ec14 <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800ebfa:	4b08      	ldr	r3, [pc, #32]	; (800ec1c <LmhpComplianceOnMlmeConfirm+0x40>)
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	7a1a      	ldrb	r2, [r3, #8]
 800ec04:	4b05      	ldr	r3, [pc, #20]	; (800ec1c <LmhpComplianceOnMlmeConfirm+0x40>)
 800ec06:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	7a5a      	ldrb	r2, [r3, #9]
 800ec0c:	4b03      	ldr	r3, [pc, #12]	; (800ec1c <LmhpComplianceOnMlmeConfirm+0x40>)
 800ec0e:	741a      	strb	r2, [r3, #16]
 800ec10:	e000      	b.n	800ec14 <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800ec12:	46c0      	nop			; (mov r8, r8)
  }
}
 800ec14:	46bd      	mov	sp, r7
 800ec16:	b002      	add	sp, #8
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	46c0      	nop			; (mov r8, r8)
 800ec1c:	200005a0 	.word	0x200005a0

0800ec20 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800ec20:	b5b0      	push	{r4, r5, r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800ec26:	4b32      	ldr	r3, [pc, #200]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	4053      	eors	r3, r2
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d002      	beq.n	800ec3a <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800ec34:	2301      	movs	r3, #1
 800ec36:	425b      	negs	r3, r3
 800ec38:	e056      	b.n	800ece8 <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800ec3a:	4b2d      	ldr	r3, [pc, #180]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec3c:	7b9b      	ldrb	r3, [r3, #14]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d019      	beq.n	800ec76 <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800ec42:	4b2b      	ldr	r3, [pc, #172]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800ec48:	4b29      	ldr	r3, [pc, #164]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec4a:	2203      	movs	r2, #3
 800ec4c:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800ec4e:	4b28      	ldr	r3, [pc, #160]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	2205      	movs	r2, #5
 800ec54:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800ec56:	4b26      	ldr	r3, [pc, #152]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec58:	689b      	ldr	r3, [r3, #8]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	4a24      	ldr	r2, [pc, #144]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec5e:	7bd2      	ldrb	r2, [r2, #15]
 800ec60:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800ec62:	4b23      	ldr	r3, [pc, #140]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	3302      	adds	r3, #2
 800ec68:	4a21      	ldr	r2, [pc, #132]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec6a:	7c12      	ldrb	r2, [r2, #16]
 800ec6c:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800ec6e:	4b20      	ldr	r3, [pc, #128]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec70:	2201      	movs	r2, #1
 800ec72:	709a      	strb	r2, [r3, #2]
 800ec74:	e01c      	b.n	800ecb0 <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800ec76:	4b1e      	ldr	r3, [pc, #120]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec78:	789b      	ldrb	r3, [r3, #2]
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d005      	beq.n	800ec8a <LmhpComplianceTxProcess+0x6a>
 800ec7e:	2b04      	cmp	r3, #4
 800ec80:	d116      	bne.n	800ecb0 <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800ec82:	4b1b      	ldr	r3, [pc, #108]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec84:	2201      	movs	r2, #1
 800ec86:	709a      	strb	r2, [r3, #2]
        break;
 800ec88:	e012      	b.n	800ecb0 <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800ec8a:	4b19      	ldr	r3, [pc, #100]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec8c:	2202      	movs	r2, #2
 800ec8e:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800ec90:	4b17      	ldr	r3, [pc, #92]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec92:	899b      	ldrh	r3, [r3, #12]
 800ec94:	0a1b      	lsrs	r3, r3, #8
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	4b15      	ldr	r3, [pc, #84]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	b2d2      	uxtb	r2, r2
 800ec9e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800eca0:	4b13      	ldr	r3, [pc, #76]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800eca2:	899a      	ldrh	r2, [r3, #12]
 800eca4:	4b12      	ldr	r3, [pc, #72]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	b2d2      	uxtb	r2, r2
 800ecac:	701a      	strb	r2, [r3, #0]
        break;
 800ecae:	46c0      	nop			; (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800ecb0:	2508      	movs	r5, #8
 800ecb2:	197b      	adds	r3, r7, r5
 800ecb4:	22e0      	movs	r2, #224	; 0xe0
 800ecb6:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800ecb8:	4b0d      	ldr	r3, [pc, #52]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ecba:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800ecbc:	197b      	adds	r3, r7, r5
 800ecbe:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800ecc0:	4b0b      	ldr	r3, [pc, #44]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ecc2:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800ecc4:	197b      	adds	r3, r7, r5
 800ecc6:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800eccc:	4b09      	ldr	r3, [pc, #36]	; (800ecf4 <LmhpComplianceTxProcess+0xd4>)
 800ecce:	0018      	movs	r0, r3
 800ecd0:	f00d ffe2 	bl	801cc98 <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800ecd4:	4b08      	ldr	r3, [pc, #32]	; (800ecf8 <LmhpComplianceTxProcess+0xd8>)
 800ecd6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ecd8:	4b05      	ldr	r3, [pc, #20]	; (800ecf0 <LmhpComplianceTxProcess+0xd0>)
 800ecda:	791b      	ldrb	r3, [r3, #4]
 800ecdc:	0019      	movs	r1, r3
 800ecde:	1d3a      	adds	r2, r7, #4
 800ece0:	1978      	adds	r0, r7, r5
 800ece2:	2301      	movs	r3, #1
 800ece4:	47a0      	blx	r4
 800ece6:	0003      	movs	r3, r0
                                             true);
}
 800ece8:	0018      	movs	r0, r3
 800ecea:	46bd      	mov	sp, r7
 800ecec:	b004      	add	sp, #16
 800ecee:	bdb0      	pop	{r4, r5, r7, pc}
 800ecf0:	200005a0 	.word	0x200005a0
 800ecf4:	20000588 	.word	0x20000588
 800ecf8:	20000178 	.word	0x20000178

0800ecfc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b0a2      	sub	sp, #136	; 0x88
 800ed00:	af02      	add	r7, sp, #8
 800ed02:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800ed04:	4be1      	ldr	r3, [pc, #900]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	2201      	movs	r2, #1
 800ed0a:	4053      	eors	r3, r2
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d000      	beq.n	800ed14 <LmhpComplianceOnMcpsIndication+0x18>
 800ed12:	e1b2      	b.n	800f07a <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	7b5b      	ldrb	r3, [r3, #13]
 800ed18:	2201      	movs	r2, #1
 800ed1a:	4053      	eors	r3, r2
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d000      	beq.n	800ed24 <LmhpComplianceOnMcpsIndication+0x28>
 800ed22:	e1ac      	b.n	800f07e <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800ed24:	4bd9      	ldr	r3, [pc, #868]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed26:	785b      	ldrb	r3, [r3, #1]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00c      	beq.n	800ed46 <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	7c9b      	ldrb	r3, [r3, #18]
 800ed30:	2201      	movs	r2, #1
 800ed32:	4053      	eors	r3, r2
 800ed34:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d005      	beq.n	800ed46 <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800ed3a:	4bd4      	ldr	r3, [pc, #848]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed3c:	899b      	ldrh	r3, [r3, #12]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	4bd2      	ldr	r3, [pc, #840]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed44:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	78db      	ldrb	r3, [r3, #3]
 800ed4a:	2be0      	cmp	r3, #224	; 0xe0
 800ed4c:	d000      	beq.n	800ed50 <LmhpComplianceOnMcpsIndication+0x54>
 800ed4e:	e198      	b.n	800f082 <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800ed50:	4bce      	ldr	r3, [pc, #824]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed52:	785b      	ldrb	r3, [r3, #1]
 800ed54:	2201      	movs	r2, #1
 800ed56:	4053      	eors	r3, r2
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d063      	beq.n	800ee26 <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	7b1b      	ldrb	r3, [r3, #12]
 800ed62:	2b04      	cmp	r3, #4
 800ed64:	d000      	beq.n	800ed68 <LmhpComplianceOnMcpsIndication+0x6c>
 800ed66:	e1a0      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d000      	beq.n	800ed74 <LmhpComplianceOnMcpsIndication+0x78>
 800ed72:	e19a      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d000      	beq.n	800ed82 <LmhpComplianceOnMcpsIndication+0x86>
 800ed80:	e193      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	3302      	adds	r3, #2
 800ed88:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d000      	beq.n	800ed90 <LmhpComplianceOnMcpsIndication+0x94>
 800ed8e:	e18c      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	3303      	adds	r3, #3
 800ed96:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d000      	beq.n	800ed9e <LmhpComplianceOnMcpsIndication+0xa2>
 800ed9c:	e185      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800ed9e:	4bbb      	ldr	r3, [pc, #748]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800eda0:	2200      	movs	r2, #0
 800eda2:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800eda4:	4bb9      	ldr	r3, [pc, #740]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800eda6:	22e0      	movs	r2, #224	; 0xe0
 800eda8:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800edaa:	4bb8      	ldr	r3, [pc, #736]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800edac:	2202      	movs	r2, #2
 800edae:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800edb0:	4bb6      	ldr	r3, [pc, #728]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800edb2:	2200      	movs	r2, #0
 800edb4:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800edb6:	4bb5      	ldr	r3, [pc, #724]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800edb8:	2200      	movs	r2, #0
 800edba:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800edbc:	4bb3      	ldr	r3, [pc, #716]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800edbe:	2200      	movs	r2, #0
 800edc0:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800edc2:	4bb2      	ldr	r3, [pc, #712]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800edc4:	2200      	movs	r2, #0
 800edc6:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800edc8:	4bb0      	ldr	r3, [pc, #704]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800edca:	2201      	movs	r2, #1
 800edcc:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800edce:	4baf      	ldr	r3, [pc, #700]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800edd0:	2201      	movs	r2, #1
 800edd2:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800edd4:	2108      	movs	r1, #8
 800edd6:	187b      	adds	r3, r7, r1
 800edd8:	2204      	movs	r2, #4
 800edda:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800eddc:	187b      	adds	r3, r7, r1
 800edde:	2201      	movs	r2, #1
 800ede0:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800ede2:	187b      	adds	r3, r7, r1
 800ede4:	0018      	movs	r0, r3
 800ede6:	f004 fe57 	bl	8013a98 <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800edea:	2000      	movs	r0, #0
 800edec:	f005 fc80 	bl	80146f0 <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800edf0:	4ba7      	ldr	r3, [pc, #668]	; (800f090 <LmhpComplianceOnMcpsIndication+0x394>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d003      	beq.n	800ee02 <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800edfa:	4ba5      	ldr	r3, [pc, #660]	; (800f090 <LmhpComplianceOnMcpsIndication+0x394>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800ee02:	4ba4      	ldr	r3, [pc, #656]	; (800f094 <LmhpComplianceOnMcpsIndication+0x398>)
 800ee04:	2201      	movs	r2, #1
 800ee06:	4251      	negs	r1, r2
 800ee08:	48a3      	ldr	r0, [pc, #652]	; (800f098 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	9200      	str	r2, [sp, #0]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	f00d ff0a 	bl	801cc28 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800ee14:	4aa1      	ldr	r2, [pc, #644]	; (800f09c <LmhpComplianceOnMcpsIndication+0x3a0>)
 800ee16:	4ba0      	ldr	r3, [pc, #640]	; (800f098 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ee18:	0011      	movs	r1, r2
 800ee1a:	0018      	movs	r0, r3
 800ee1c:	f00e f82c 	bl	801ce78 <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800ee20:	f7ff fefe 	bl	800ec20 <LmhpComplianceTxProcess>
 800ee24:	e141      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	781a      	ldrb	r2, [r3, #0]
 800ee2c:	4b97      	ldr	r3, [pc, #604]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ee2e:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800ee30:	4b96      	ldr	r3, [pc, #600]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ee32:	789b      	ldrb	r3, [r3, #2]
 800ee34:	2b0a      	cmp	r3, #10
 800ee36:	d900      	bls.n	800ee3a <LmhpComplianceOnMcpsIndication+0x13e>
 800ee38:	e125      	b.n	800f086 <LmhpComplianceOnMcpsIndication+0x38a>
 800ee3a:	009a      	lsls	r2, r3, #2
 800ee3c:	4b98      	ldr	r3, [pc, #608]	; (800f0a0 <LmhpComplianceOnMcpsIndication+0x3a4>)
 800ee3e:	18d3      	adds	r3, r2, r3
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800ee44:	4b94      	ldr	r3, [pc, #592]	; (800f098 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ee46:	0018      	movs	r0, r3
 800ee48:	f00d ff9e 	bl	801cd88 <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800ee4c:	4b8f      	ldr	r3, [pc, #572]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ee4e:	2200      	movs	r2, #0
 800ee50:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800ee52:	4b8e      	ldr	r3, [pc, #568]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ee54:	2200      	movs	r2, #0
 800ee56:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800ee58:	2108      	movs	r1, #8
 800ee5a:	187b      	adds	r3, r7, r1
 800ee5c:	2204      	movs	r2, #4
 800ee5e:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ee60:	4b8b      	ldr	r3, [pc, #556]	; (800f090 <LmhpComplianceOnMcpsIndication+0x394>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	781a      	ldrb	r2, [r3, #0]
 800ee66:	187b      	adds	r3, r7, r1
 800ee68:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ee6a:	187b      	adds	r3, r7, r1
 800ee6c:	0018      	movs	r0, r3
 800ee6e:	f004 fe13 	bl	8013a98 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800ee72:	4b87      	ldr	r3, [pc, #540]	; (800f090 <LmhpComplianceOnMcpsIndication+0x394>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	785b      	ldrb	r3, [r3, #1]
 800ee78:	0018      	movs	r0, r3
 800ee7a:	f005 fc39 	bl	80146f0 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800ee7e:	4b84      	ldr	r3, [pc, #528]	; (800f090 <LmhpComplianceOnMcpsIndication+0x394>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	689b      	ldr	r3, [r3, #8]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d100      	bne.n	800ee8a <LmhpComplianceOnMcpsIndication+0x18e>
 800ee88:	e10e      	b.n	800f0a8 <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800ee8a:	4b81      	ldr	r3, [pc, #516]	; (800f090 <LmhpComplianceOnMcpsIndication+0x394>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	4798      	blx	r3
        }
      }
      break;
 800ee92:	e109      	b.n	800f0a8 <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800ee94:	4b7d      	ldr	r3, [pc, #500]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ee96:	2202      	movs	r2, #2
 800ee98:	71da      	strb	r2, [r3, #7]
        break;
 800ee9a:	e106      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800ee9c:	4b7b      	ldr	r3, [pc, #492]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ee9e:	2201      	movs	r2, #1
 800eea0:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800eea2:	4b7a      	ldr	r3, [pc, #488]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800eea4:	2201      	movs	r2, #1
 800eea6:	709a      	strb	r2, [r3, #2]
        break;
 800eea8:	e0ff      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800eeaa:	4b78      	ldr	r3, [pc, #480]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800eeac:	2200      	movs	r2, #0
 800eeae:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800eeb0:	4b76      	ldr	r3, [pc, #472]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	709a      	strb	r2, [r3, #2]
        break;
 800eeb6:	e0f8      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	7b1a      	ldrb	r2, [r3, #12]
 800eebc:	4b73      	ldr	r3, [pc, #460]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800eebe:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800eec0:	4b72      	ldr	r3, [pc, #456]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	2204      	movs	r2, #4
 800eec6:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800eec8:	237f      	movs	r3, #127	; 0x7f
 800eeca:	18fb      	adds	r3, r7, r3
 800eecc:	2201      	movs	r2, #1
 800eece:	701a      	strb	r2, [r3, #0]
 800eed0:	e013      	b.n	800eefa <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	689a      	ldr	r2, [r3, #8]
 800eed6:	207f      	movs	r0, #127	; 0x7f
 800eed8:	183b      	adds	r3, r7, r0
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	18d3      	adds	r3, r2, r3
 800eede:	781a      	ldrb	r2, [r3, #0]
 800eee0:	4b6a      	ldr	r3, [pc, #424]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800eee2:	6899      	ldr	r1, [r3, #8]
 800eee4:	183b      	adds	r3, r7, r0
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	18cb      	adds	r3, r1, r3
 800eeea:	3201      	adds	r2, #1
 800eeec:	b2d2      	uxtb	r2, r2
 800eeee:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800eef0:	183b      	adds	r3, r7, r0
 800eef2:	781a      	ldrb	r2, [r3, #0]
 800eef4:	183b      	adds	r3, r7, r0
 800eef6:	3201      	adds	r2, #1
 800eef8:	701a      	strb	r2, [r3, #0]
 800eefa:	4b64      	ldr	r3, [pc, #400]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800eefc:	799a      	ldrb	r2, [r3, #6]
 800eefe:	4b63      	ldr	r3, [pc, #396]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ef00:	79db      	ldrb	r3, [r3, #7]
 800ef02:	1c18      	adds	r0, r3, #0
 800ef04:	1c11      	adds	r1, r2, #0
 800ef06:	b2ca      	uxtb	r2, r1
 800ef08:	b2c3      	uxtb	r3, r0
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d900      	bls.n	800ef10 <LmhpComplianceOnMcpsIndication+0x214>
 800ef0e:	1c01      	adds	r1, r0, #0
 800ef10:	b2cb      	uxtb	r3, r1
 800ef12:	227f      	movs	r2, #127	; 0x7f
 800ef14:	18ba      	adds	r2, r7, r2
 800ef16:	7812      	ldrb	r2, [r2, #0]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d3da      	bcc.n	800eed2 <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800ef1c:	e0c5      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800ef1e:	2168      	movs	r1, #104	; 0x68
 800ef20:	187b      	adds	r3, r7, r1
 800ef22:	2204      	movs	r2, #4
 800ef24:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800ef26:	187b      	adds	r3, r7, r1
 800ef28:	0018      	movs	r0, r3
 800ef2a:	f005 f93b 	bl	80141a4 <LoRaMacMlmeRequest>
      }
      break;
 800ef2e:	e0bc      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800ef30:	4b59      	ldr	r3, [pc, #356]	; (800f098 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ef32:	0018      	movs	r0, r3
 800ef34:	f00d ff28 	bl	801cd88 <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800ef38:	4b54      	ldr	r3, [pc, #336]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800ef3e:	4b53      	ldr	r3, [pc, #332]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800ef44:	2108      	movs	r1, #8
 800ef46:	187b      	adds	r3, r7, r1
 800ef48:	2204      	movs	r2, #4
 800ef4a:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ef4c:	4b50      	ldr	r3, [pc, #320]	; (800f090 <LmhpComplianceOnMcpsIndication+0x394>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	781a      	ldrb	r2, [r3, #0]
 800ef52:	187b      	adds	r3, r7, r1
 800ef54:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ef56:	187b      	adds	r3, r7, r1
 800ef58:	0018      	movs	r0, r3
 800ef5a:	f004 fd9d 	bl	8013a98 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800ef5e:	4b4c      	ldr	r3, [pc, #304]	; (800f090 <LmhpComplianceOnMcpsIndication+0x394>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	785b      	ldrb	r3, [r3, #1]
 800ef64:	0018      	movs	r0, r3
 800ef66:	f005 fbc3 	bl	80146f0 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800ef6a:	4b49      	ldr	r3, [pc, #292]	; (800f090 <LmhpComplianceOnMcpsIndication+0x394>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d003      	beq.n	800ef7c <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800ef74:	4b46      	ldr	r3, [pc, #280]	; (800f090 <LmhpComplianceOnMcpsIndication+0x394>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	689b      	ldr	r3, [r3, #8]
 800ef7a:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800ef7c:	4b49      	ldr	r3, [pc, #292]	; (800f0a4 <LmhpComplianceOnMcpsIndication+0x3a8>)
 800ef7e:	6a1b      	ldr	r3, [r3, #32]
 800ef80:	2002      	movs	r0, #2
 800ef82:	4798      	blx	r3
      }
      break;
 800ef84:	e091      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	7b1b      	ldrb	r3, [r3, #12]
 800ef8a:	2b03      	cmp	r3, #3
 800ef8c:	d114      	bne.n	800efb8 <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800ef8e:	2154      	movs	r1, #84	; 0x54
 800ef90:	187b      	adds	r3, r7, r1
 800ef92:	2205      	movs	r2, #5
 800ef94:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	021b      	lsls	r3, r3, #8
 800efa0:	b21a      	sxth	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	3302      	adds	r3, #2
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	b21b      	sxth	r3, r3
 800efac:	4313      	orrs	r3, r2
 800efae:	b21b      	sxth	r3, r3
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	187b      	adds	r3, r7, r1
 800efb4:	809a      	strh	r2, [r3, #4]
 800efb6:	e031      	b.n	800f01c <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	7b1b      	ldrb	r3, [r3, #12]
 800efbc:	2b07      	cmp	r3, #7
 800efbe:	d12d      	bne.n	800f01c <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800efc0:	2154      	movs	r1, #84	; 0x54
 800efc2:	187b      	adds	r3, r7, r1
 800efc4:	2206      	movs	r2, #6
 800efc6:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	3301      	adds	r3, #1
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	021b      	lsls	r3, r3, #8
 800efd2:	b21a      	sxth	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	3302      	adds	r3, #2
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	b21b      	sxth	r3, r3
 800efde:	4313      	orrs	r3, r2
 800efe0:	b21b      	sxth	r3, r3
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	187b      	adds	r3, r7, r1
 800efe6:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	689b      	ldr	r3, [r3, #8]
 800efec:	3303      	adds	r3, #3
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	041a      	lsls	r2, r3, #16
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	3304      	adds	r3, #4
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	021b      	lsls	r3, r3, #8
 800effc:	431a      	orrs	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	689b      	ldr	r3, [r3, #8]
 800f002:	3305      	adds	r3, #5
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	4313      	orrs	r3, r2
 800f008:	001a      	movs	r2, r3
 800f00a:	2364      	movs	r3, #100	; 0x64
 800f00c:	435a      	muls	r2, r3
 800f00e:	187b      	adds	r3, r7, r1
 800f010:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	689b      	ldr	r3, [r3, #8]
 800f016:	799a      	ldrb	r2, [r3, #6]
 800f018:	187b      	adds	r3, r7, r1
 800f01a:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800f01c:	2354      	movs	r3, #84	; 0x54
 800f01e:	18fb      	adds	r3, r7, r3
 800f020:	0018      	movs	r0, r3
 800f022:	f005 f8bf 	bl	80141a4 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800f026:	4b19      	ldr	r3, [pc, #100]	; (800f08c <LmhpComplianceOnMcpsIndication+0x390>)
 800f028:	2201      	movs	r2, #1
 800f02a:	709a      	strb	r2, [r3, #2]
      }
      break;
 800f02c:	e03d      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800f02e:	2140      	movs	r1, #64	; 0x40
 800f030:	187b      	adds	r3, r7, r1
 800f032:	220a      	movs	r2, #10
 800f034:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800f036:	187b      	adds	r3, r7, r1
 800f038:	0018      	movs	r0, r3
 800f03a:	f005 f8b3 	bl	80141a4 <LoRaMacMlmeRequest>
      }
      break;
 800f03e:	e034      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800f040:	2108      	movs	r1, #8
 800f042:	187b      	adds	r3, r7, r1
 800f044:	2200      	movs	r2, #0
 800f046:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	689b      	ldr	r3, [r3, #8]
 800f04c:	3301      	adds	r3, #1
 800f04e:	781a      	ldrb	r2, [r3, #0]
 800f050:	187b      	adds	r3, r7, r1
 800f052:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800f054:	187b      	adds	r3, r7, r1
 800f056:	0018      	movs	r0, r3
 800f058:	f004 fd1e 	bl	8013a98 <LoRaMacMibSetRequestConfirm>
      }
      break;
 800f05c:	e025      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800f05e:	212c      	movs	r1, #44	; 0x2c
 800f060:	187b      	adds	r3, r7, r1
 800f062:	220d      	movs	r2, #13
 800f064:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	785a      	ldrb	r2, [r3, #1]
 800f06c:	187b      	adds	r3, r7, r1
 800f06e:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800f070:	187b      	adds	r3, r7, r1
 800f072:	0018      	movs	r0, r3
 800f074:	f005 f896 	bl	80141a4 <LoRaMacMlmeRequest>
      }
      break;
 800f078:	e017      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800f07a:	46c0      	nop			; (mov r8, r8)
 800f07c:	e015      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800f07e:	46c0      	nop			; (mov r8, r8)
 800f080:	e013      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800f082:	46c0      	nop			; (mov r8, r8)
 800f084:	e011      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800f086:	46c0      	nop			; (mov r8, r8)
 800f088:	e00f      	b.n	800f0aa <LmhpComplianceOnMcpsIndication+0x3ae>
 800f08a:	46c0      	nop			; (mov r8, r8)
 800f08c:	200005a0 	.word	0x200005a0
 800f090:	200005b4 	.word	0x200005b4
 800f094:	0800f0bb 	.word	0x0800f0bb
 800f098:	20000588 	.word	0x20000588
 800f09c:	00004e20 	.word	0x00004e20
 800f0a0:	0801f8a4 	.word	0x0801f8a4
 800f0a4:	20000178 	.word	0x20000178
      break;
 800f0a8:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	b020      	add	sp, #128	; 0x80
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800f0b4:	46c0      	nop			; (mov r8, r8)
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b082      	sub	sp, #8
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800f0c2:	f7ff fdad 	bl	800ec20 <LmhpComplianceTxProcess>
}
 800f0c6:	46c0      	nop			; (mov r8, r8)
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	b002      	add	sp, #8
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b082      	sub	sp, #8
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	0002      	movs	r2, r0
 800f0d6:	1dfb      	adds	r3, r7, #7
 800f0d8:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f0da:	46c0      	nop			; (mov r8, r8)
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	b002      	add	sp, #8
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800f0e6:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f0e8:	0018      	movs	r0, r3
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800f0f2:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f0f4:	0018      	movs	r0, r3
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
	...

0800f0fc <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800f0fc:	b5b0      	push	{r4, r5, r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f102:	f00d ff71 	bl	801cfe8 <UTIL_TIMER_GetCurrentTime>
 800f106:	0002      	movs	r2, r0
 800f108:	4b14      	ldr	r3, [pc, #80]	; (800f15c <OnRadioTxDone+0x60>)
 800f10a:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f10c:	4d14      	ldr	r5, [pc, #80]	; (800f160 <OnRadioTxDone+0x64>)
 800f10e:	23ce      	movs	r3, #206	; 0xce
 800f110:	009c      	lsls	r4, r3, #2
 800f112:	003b      	movs	r3, r7
 800f114:	0018      	movs	r0, r3
 800f116:	f00d fd15 	bl	801cb44 <SysTimeGet>
 800f11a:	003a      	movs	r2, r7
 800f11c:	192b      	adds	r3, r5, r4
 800f11e:	ca03      	ldmia	r2!, {r0, r1}
 800f120:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f122:	4b10      	ldr	r3, [pc, #64]	; (800f164 <OnRadioTxDone+0x68>)
 800f124:	781a      	ldrb	r2, [r3, #0]
 800f126:	2110      	movs	r1, #16
 800f128:	430a      	orrs	r2, r1
 800f12a:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f12c:	4a0c      	ldr	r2, [pc, #48]	; (800f160 <OnRadioTxDone+0x64>)
 800f12e:	23d2      	movs	r3, #210	; 0xd2
 800f130:	009b      	lsls	r3, r3, #2
 800f132:	58d3      	ldr	r3, [r2, r3]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00c      	beq.n	800f152 <OnRadioTxDone+0x56>
 800f138:	4a09      	ldr	r2, [pc, #36]	; (800f160 <OnRadioTxDone+0x64>)
 800f13a:	23d2      	movs	r3, #210	; 0xd2
 800f13c:	009b      	lsls	r3, r3, #2
 800f13e:	58d3      	ldr	r3, [r2, r3]
 800f140:	68db      	ldr	r3, [r3, #12]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d005      	beq.n	800f152 <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f146:	4a06      	ldr	r2, [pc, #24]	; (800f160 <OnRadioTxDone+0x64>)
 800f148:	23d2      	movs	r3, #210	; 0xd2
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	58d3      	ldr	r3, [r2, r3]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800f152:	46c0      	nop			; (mov r8, r8)
 800f154:	46bd      	mov	sp, r7
 800f156:	b002      	add	sp, #8
 800f158:	bdb0      	pop	{r4, r5, r7, pc}
 800f15a:	46c0      	nop			; (mov r8, r8)
 800f15c:	2000170c 	.word	0x2000170c
 800f160:	200005b8 	.word	0x200005b8
 800f164:	20000be8 	.word	0x20000be8

0800f168 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f168:	b5b0      	push	{r4, r5, r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	000c      	movs	r4, r1
 800f172:	0010      	movs	r0, r2
 800f174:	0019      	movs	r1, r3
 800f176:	250a      	movs	r5, #10
 800f178:	197b      	adds	r3, r7, r5
 800f17a:	1c22      	adds	r2, r4, #0
 800f17c:	801a      	strh	r2, [r3, #0]
 800f17e:	2408      	movs	r4, #8
 800f180:	193b      	adds	r3, r7, r4
 800f182:	1c02      	adds	r2, r0, #0
 800f184:	801a      	strh	r2, [r3, #0]
 800f186:	1dfb      	adds	r3, r7, #7
 800f188:	1c0a      	adds	r2, r1, #0
 800f18a:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f18c:	f00d ff2c 	bl	801cfe8 <UTIL_TIMER_GetCurrentTime>
 800f190:	0002      	movs	r2, r0
 800f192:	4b16      	ldr	r3, [pc, #88]	; (800f1ec <OnRadioRxDone+0x84>)
 800f194:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800f196:	4b15      	ldr	r3, [pc, #84]	; (800f1ec <OnRadioRxDone+0x84>)
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800f19c:	4b13      	ldr	r3, [pc, #76]	; (800f1ec <OnRadioRxDone+0x84>)
 800f19e:	197a      	adds	r2, r7, r5
 800f1a0:	8812      	ldrh	r2, [r2, #0]
 800f1a2:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800f1a4:	4b11      	ldr	r3, [pc, #68]	; (800f1ec <OnRadioRxDone+0x84>)
 800f1a6:	193a      	adds	r2, r7, r4
 800f1a8:	8812      	ldrh	r2, [r2, #0]
 800f1aa:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800f1ac:	4b0f      	ldr	r3, [pc, #60]	; (800f1ec <OnRadioRxDone+0x84>)
 800f1ae:	1dfa      	adds	r2, r7, #7
 800f1b0:	7812      	ldrb	r2, [r2, #0]
 800f1b2:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f1b4:	4b0e      	ldr	r3, [pc, #56]	; (800f1f0 <OnRadioRxDone+0x88>)
 800f1b6:	781a      	ldrb	r2, [r3, #0]
 800f1b8:	2108      	movs	r1, #8
 800f1ba:	430a      	orrs	r2, r1
 800f1bc:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f1be:	4a0d      	ldr	r2, [pc, #52]	; (800f1f4 <OnRadioRxDone+0x8c>)
 800f1c0:	23d2      	movs	r3, #210	; 0xd2
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	58d3      	ldr	r3, [r2, r3]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00c      	beq.n	800f1e4 <OnRadioRxDone+0x7c>
 800f1ca:	4a0a      	ldr	r2, [pc, #40]	; (800f1f4 <OnRadioRxDone+0x8c>)
 800f1cc:	23d2      	movs	r3, #210	; 0xd2
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	58d3      	ldr	r3, [r2, r3]
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d005      	beq.n	800f1e4 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f1d8:	4a06      	ldr	r2, [pc, #24]	; (800f1f4 <OnRadioRxDone+0x8c>)
 800f1da:	23d2      	movs	r3, #210	; 0xd2
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	58d3      	ldr	r3, [r2, r3]
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800f1e4:	46c0      	nop			; (mov r8, r8)
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	b004      	add	sp, #16
 800f1ea:	bdb0      	pop	{r4, r5, r7, pc}
 800f1ec:	20001710 	.word	0x20001710
 800f1f0:	20000be8 	.word	0x20000be8
 800f1f4:	200005b8 	.word	0x200005b8

0800f1f8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f1fc:	4b0d      	ldr	r3, [pc, #52]	; (800f234 <OnRadioTxTimeout+0x3c>)
 800f1fe:	781a      	ldrb	r2, [r3, #0]
 800f200:	2104      	movs	r1, #4
 800f202:	430a      	orrs	r2, r1
 800f204:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f206:	4a0c      	ldr	r2, [pc, #48]	; (800f238 <OnRadioTxTimeout+0x40>)
 800f208:	23d2      	movs	r3, #210	; 0xd2
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	58d3      	ldr	r3, [r2, r3]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00c      	beq.n	800f22c <OnRadioTxTimeout+0x34>
 800f212:	4a09      	ldr	r2, [pc, #36]	; (800f238 <OnRadioTxTimeout+0x40>)
 800f214:	23d2      	movs	r3, #210	; 0xd2
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	58d3      	ldr	r3, [r2, r3]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d005      	beq.n	800f22c <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f220:	4a05      	ldr	r2, [pc, #20]	; (800f238 <OnRadioTxTimeout+0x40>)
 800f222:	23d2      	movs	r3, #210	; 0xd2
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	58d3      	ldr	r3, [r2, r3]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800f22c:	46c0      	nop			; (mov r8, r8)
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	46c0      	nop			; (mov r8, r8)
 800f234:	20000be8 	.word	0x20000be8
 800f238:	200005b8 	.word	0x200005b8

0800f23c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f240:	4b0d      	ldr	r3, [pc, #52]	; (800f278 <OnRadioRxError+0x3c>)
 800f242:	781a      	ldrb	r2, [r3, #0]
 800f244:	2102      	movs	r1, #2
 800f246:	430a      	orrs	r2, r1
 800f248:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f24a:	4a0c      	ldr	r2, [pc, #48]	; (800f27c <OnRadioRxError+0x40>)
 800f24c:	23d2      	movs	r3, #210	; 0xd2
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	58d3      	ldr	r3, [r2, r3]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00c      	beq.n	800f270 <OnRadioRxError+0x34>
 800f256:	4a09      	ldr	r2, [pc, #36]	; (800f27c <OnRadioRxError+0x40>)
 800f258:	23d2      	movs	r3, #210	; 0xd2
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	58d3      	ldr	r3, [r2, r3]
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d005      	beq.n	800f270 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f264:	4a05      	ldr	r2, [pc, #20]	; (800f27c <OnRadioRxError+0x40>)
 800f266:	23d2      	movs	r3, #210	; 0xd2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	58d3      	ldr	r3, [r2, r3]
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	4798      	blx	r3
    }
}
 800f270:	46c0      	nop			; (mov r8, r8)
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	46c0      	nop			; (mov r8, r8)
 800f278:	20000be8 	.word	0x20000be8
 800f27c:	200005b8 	.word	0x200005b8

0800f280 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f284:	4b0d      	ldr	r3, [pc, #52]	; (800f2bc <OnRadioRxTimeout+0x3c>)
 800f286:	781a      	ldrb	r2, [r3, #0]
 800f288:	2101      	movs	r1, #1
 800f28a:	430a      	orrs	r2, r1
 800f28c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f28e:	4a0c      	ldr	r2, [pc, #48]	; (800f2c0 <OnRadioRxTimeout+0x40>)
 800f290:	23d2      	movs	r3, #210	; 0xd2
 800f292:	009b      	lsls	r3, r3, #2
 800f294:	58d3      	ldr	r3, [r2, r3]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00c      	beq.n	800f2b4 <OnRadioRxTimeout+0x34>
 800f29a:	4a09      	ldr	r2, [pc, #36]	; (800f2c0 <OnRadioRxTimeout+0x40>)
 800f29c:	23d2      	movs	r3, #210	; 0xd2
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	58d3      	ldr	r3, [r2, r3]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d005      	beq.n	800f2b4 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f2a8:	4a05      	ldr	r2, [pc, #20]	; (800f2c0 <OnRadioRxTimeout+0x40>)
 800f2aa:	23d2      	movs	r3, #210	; 0xd2
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	58d3      	ldr	r3, [r2, r3]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800f2b4:	46c0      	nop			; (mov r8, r8)
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	46c0      	nop			; (mov r8, r8)
 800f2bc:	20000be8 	.word	0x20000be8
 800f2c0:	200005b8 	.word	0x200005b8

0800f2c4 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f2c8:	4b0a      	ldr	r3, [pc, #40]	; (800f2f4 <UpdateRxSlotIdleState+0x30>)
 800f2ca:	4a0b      	ldr	r2, [pc, #44]	; (800f2f8 <UpdateRxSlotIdleState+0x34>)
 800f2cc:	589b      	ldr	r3, [r3, r2]
 800f2ce:	227c      	movs	r2, #124	; 0x7c
 800f2d0:	5c9b      	ldrb	r3, [r3, r2]
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d005      	beq.n	800f2e2 <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f2d6:	4a07      	ldr	r2, [pc, #28]	; (800f2f4 <UpdateRxSlotIdleState+0x30>)
 800f2d8:	2390      	movs	r3, #144	; 0x90
 800f2da:	00db      	lsls	r3, r3, #3
 800f2dc:	2106      	movs	r1, #6
 800f2de:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f2e0:	e004      	b.n	800f2ec <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f2e2:	4a04      	ldr	r2, [pc, #16]	; (800f2f4 <UpdateRxSlotIdleState+0x30>)
 800f2e4:	2390      	movs	r3, #144	; 0x90
 800f2e6:	00db      	lsls	r3, r3, #3
 800f2e8:	2102      	movs	r1, #2
 800f2ea:	54d1      	strb	r1, [r2, r3]
}
 800f2ec:	46c0      	nop			; (mov r8, r8)
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	46c0      	nop			; (mov r8, r8)
 800f2f4:	200005b8 	.word	0x200005b8
 800f2f8:	00000484 	.word	0x00000484

0800f2fc <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2fe:	b08f      	sub	sp, #60	; 0x3c
 800f300:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f302:	4b59      	ldr	r3, [pc, #356]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f304:	4a59      	ldr	r2, [pc, #356]	; (800f46c <ProcessRadioTxDone+0x170>)
 800f306:	589b      	ldr	r3, [r3, r2]
 800f308:	227c      	movs	r2, #124	; 0x7c
 800f30a:	5c9b      	ldrb	r3, [r3, r2]
 800f30c:	2b02      	cmp	r3, #2
 800f30e:	d002      	beq.n	800f316 <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800f310:	4b57      	ldr	r3, [pc, #348]	; (800f470 <ProcessRadioTxDone+0x174>)
 800f312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f314:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f316:	4a54      	ldr	r2, [pc, #336]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f318:	23ec      	movs	r3, #236	; 0xec
 800f31a:	009b      	lsls	r3, r3, #2
 800f31c:	58d2      	ldr	r2, [r2, r3]
 800f31e:	4b55      	ldr	r3, [pc, #340]	; (800f474 <ProcessRadioTxDone+0x178>)
 800f320:	0011      	movs	r1, r2
 800f322:	0018      	movs	r0, r3
 800f324:	f00d fda8 	bl	801ce78 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f328:	4b52      	ldr	r3, [pc, #328]	; (800f474 <ProcessRadioTxDone+0x178>)
 800f32a:	0018      	movs	r0, r3
 800f32c:	f00d fcb4 	bl	801cc98 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f330:	4a4d      	ldr	r2, [pc, #308]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f332:	23ed      	movs	r3, #237	; 0xed
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	58d2      	ldr	r2, [r2, r3]
 800f338:	4b4f      	ldr	r3, [pc, #316]	; (800f478 <ProcessRadioTxDone+0x17c>)
 800f33a:	0011      	movs	r1, r2
 800f33c:	0018      	movs	r0, r3
 800f33e:	f00d fd9b 	bl	801ce78 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f342:	4b4d      	ldr	r3, [pc, #308]	; (800f478 <ProcessRadioTxDone+0x17c>)
 800f344:	0018      	movs	r0, r3
 800f346:	f00d fca7 	bl	801cc98 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f34a:	4b47      	ldr	r3, [pc, #284]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f34c:	4a47      	ldr	r2, [pc, #284]	; (800f46c <ProcessRadioTxDone+0x170>)
 800f34e:	589b      	ldr	r3, [r3, r2]
 800f350:	227c      	movs	r2, #124	; 0x7c
 800f352:	5c9b      	ldrb	r3, [r3, r2]
 800f354:	2b02      	cmp	r3, #2
 800f356:	d004      	beq.n	800f362 <ProcessRadioTxDone+0x66>
 800f358:	4b43      	ldr	r3, [pc, #268]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f35a:	4a48      	ldr	r2, [pc, #288]	; (800f47c <ProcessRadioTxDone+0x180>)
 800f35c:	5c9b      	ldrb	r3, [r3, r2]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d021      	beq.n	800f3a6 <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f362:	2120      	movs	r1, #32
 800f364:	187b      	adds	r3, r7, r1
 800f366:	2216      	movs	r2, #22
 800f368:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f36a:	4b3f      	ldr	r3, [pc, #252]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f36c:	4a3f      	ldr	r2, [pc, #252]	; (800f46c <ProcessRadioTxDone+0x170>)
 800f36e:	589b      	ldr	r3, [r3, r2]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	187a      	adds	r2, r7, r1
 800f374:	0011      	movs	r1, r2
 800f376:	0018      	movs	r0, r3
 800f378:	f007 fccf 	bl	8016d1a <RegionGetPhyParam>
 800f37c:	0003      	movs	r3, r0
 800f37e:	001a      	movs	r2, r3
 800f380:	211c      	movs	r1, #28
 800f382:	187b      	adds	r3, r7, r1
 800f384:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f386:	4a38      	ldr	r2, [pc, #224]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f388:	23ed      	movs	r3, #237	; 0xed
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	58d2      	ldr	r2, [r2, r3]
 800f38e:	187b      	adds	r3, r7, r1
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	18d2      	adds	r2, r2, r3
 800f394:	4b3a      	ldr	r3, [pc, #232]	; (800f480 <ProcessRadioTxDone+0x184>)
 800f396:	0011      	movs	r1, r2
 800f398:	0018      	movs	r0, r3
 800f39a:	f00d fd6d 	bl	801ce78 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f39e:	4b38      	ldr	r3, [pc, #224]	; (800f480 <ProcessRadioTxDone+0x184>)
 800f3a0:	0018      	movs	r0, r3
 800f3a2:	f00d fc79 	bl	801cc98 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800f3a6:	4b30      	ldr	r3, [pc, #192]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f3a8:	4a30      	ldr	r2, [pc, #192]	; (800f46c <ProcessRadioTxDone+0x170>)
 800f3aa:	589a      	ldr	r2, [r3, r2]
 800f3ac:	4b35      	ldr	r3, [pc, #212]	; (800f484 <ProcessRadioTxDone+0x188>)
 800f3ae:	6819      	ldr	r1, [r3, #0]
 800f3b0:	23a8      	movs	r3, #168	; 0xa8
 800f3b2:	005b      	lsls	r3, r3, #1
 800f3b4:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f3b6:	4b2c      	ldr	r3, [pc, #176]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f3b8:	4a33      	ldr	r2, [pc, #204]	; (800f488 <ProcessRadioTxDone+0x18c>)
 800f3ba:	5c9a      	ldrb	r2, [r3, r2]
 800f3bc:	2408      	movs	r4, #8
 800f3be:	193b      	adds	r3, r7, r4
 800f3c0:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f3c2:	4b30      	ldr	r3, [pc, #192]	; (800f484 <ProcessRadioTxDone+0x188>)
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	193b      	adds	r3, r7, r4
 800f3c8:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800f3ca:	2328      	movs	r3, #40	; 0x28
 800f3cc:	18fb      	adds	r3, r7, r3
 800f3ce:	0018      	movs	r0, r3
 800f3d0:	f00d fbfa 	bl	801cbc8 <SysTimeGetMcuTime>
 800f3d4:	4b24      	ldr	r3, [pc, #144]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f3d6:	4a25      	ldr	r2, [pc, #148]	; (800f46c <ProcessRadioTxDone+0x170>)
 800f3d8:	5898      	ldr	r0, [r3, r2]
 800f3da:	193d      	adds	r5, r7, r4
 800f3dc:	003e      	movs	r6, r7
 800f3de:	23ac      	movs	r3, #172	; 0xac
 800f3e0:	0059      	lsls	r1, r3, #1
 800f3e2:	2328      	movs	r3, #40	; 0x28
 800f3e4:	18fa      	adds	r2, r7, r3
 800f3e6:	2404      	movs	r4, #4
 800f3e8:	1843      	adds	r3, r0, r1
 800f3ea:	191c      	adds	r4, r3, r4
 800f3ec:	466b      	mov	r3, sp
 800f3ee:	6824      	ldr	r4, [r4, #0]
 800f3f0:	601c      	str	r4, [r3, #0]
 800f3f2:	5843      	ldr	r3, [r0, r1]
 800f3f4:	6811      	ldr	r1, [r2, #0]
 800f3f6:	6852      	ldr	r2, [r2, #4]
 800f3f8:	0030      	movs	r0, r6
 800f3fa:	f00d fb17 	bl	801ca2c <SysTimeSub>
 800f3fe:	003a      	movs	r2, r7
 800f400:	002b      	movs	r3, r5
 800f402:	330c      	adds	r3, #12
 800f404:	ca21      	ldmia	r2!, {r0, r5}
 800f406:	c321      	stmia	r3!, {r0, r5}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f408:	4a17      	ldr	r2, [pc, #92]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f40a:	2383      	movs	r3, #131	; 0x83
 800f40c:	00db      	lsls	r3, r3, #3
 800f40e:	58d2      	ldr	r2, [r2, r3]
 800f410:	2108      	movs	r1, #8
 800f412:	187b      	adds	r3, r7, r1
 800f414:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800f416:	187b      	adds	r3, r7, r1
 800f418:	2201      	movs	r2, #1
 800f41a:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800f41c:	4b12      	ldr	r3, [pc, #72]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f41e:	4a13      	ldr	r2, [pc, #76]	; (800f46c <ProcessRadioTxDone+0x170>)
 800f420:	589a      	ldr	r2, [r3, r2]
 800f422:	23b2      	movs	r3, #178	; 0xb2
 800f424:	005b      	lsls	r3, r3, #1
 800f426:	5cd3      	ldrb	r3, [r2, r3]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d102      	bne.n	800f432 <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800f42c:	187b      	adds	r3, r7, r1
 800f42e:	2200      	movs	r2, #0
 800f430:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800f432:	4b0d      	ldr	r3, [pc, #52]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f434:	4a0d      	ldr	r2, [pc, #52]	; (800f46c <ProcessRadioTxDone+0x170>)
 800f436:	589b      	ldr	r3, [r3, r2]
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2208      	movs	r2, #8
 800f43c:	18ba      	adds	r2, r7, r2
 800f43e:	0011      	movs	r1, r2
 800f440:	0018      	movs	r0, r3
 800f442:	f007 fc92 	bl	8016d6a <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800f446:	4b08      	ldr	r3, [pc, #32]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f448:	4a0c      	ldr	r2, [pc, #48]	; (800f47c <ProcessRadioTxDone+0x180>)
 800f44a:	5c9b      	ldrb	r3, [r3, r2]
 800f44c:	2201      	movs	r2, #1
 800f44e:	4053      	eors	r3, r2
 800f450:	b2db      	uxtb	r3, r3
 800f452:	2b00      	cmp	r3, #0
 800f454:	d003      	beq.n	800f45e <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f456:	4b04      	ldr	r3, [pc, #16]	; (800f468 <ProcessRadioTxDone+0x16c>)
 800f458:	4a0c      	ldr	r2, [pc, #48]	; (800f48c <ProcessRadioTxDone+0x190>)
 800f45a:	2100      	movs	r1, #0
 800f45c:	5499      	strb	r1, [r3, r2]
    }
}
 800f45e:	46c0      	nop			; (mov r8, r8)
 800f460:	46bd      	mov	sp, r7
 800f462:	b00d      	add	sp, #52	; 0x34
 800f464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f466:	46c0      	nop			; (mov r8, r8)
 800f468:	200005b8 	.word	0x200005b8
 800f46c:	00000484 	.word	0x00000484
 800f470:	0801fd7c 	.word	0x0801fd7c
 800f474:	20000938 	.word	0x20000938
 800f478:	20000950 	.word	0x20000950
 800f47c:	00000414 	.word	0x00000414
 800f480:	200009b0 	.word	0x200009b0
 800f484:	2000170c 	.word	0x2000170c
 800f488:	00000415 	.word	0x00000415
 800f48c:	0000043d 	.word	0x0000043d

0800f490 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f494:	4a11      	ldr	r2, [pc, #68]	; (800f4dc <PrepareRxDoneAbort+0x4c>)
 800f496:	23d0      	movs	r3, #208	; 0xd0
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	58d3      	ldr	r3, [r2, r3]
 800f49c:	2280      	movs	r2, #128	; 0x80
 800f49e:	431a      	orrs	r2, r3
 800f4a0:	0011      	movs	r1, r2
 800f4a2:	4a0e      	ldr	r2, [pc, #56]	; (800f4dc <PrepareRxDoneAbort+0x4c>)
 800f4a4:	23d0      	movs	r3, #208	; 0xd0
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800f4aa:	4b0c      	ldr	r3, [pc, #48]	; (800f4dc <PrepareRxDoneAbort+0x4c>)
 800f4ac:	4a0c      	ldr	r2, [pc, #48]	; (800f4e0 <PrepareRxDoneAbort+0x50>)
 800f4ae:	5c9b      	ldrb	r3, [r3, r2]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d002      	beq.n	800f4ba <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	f001 f98d 	bl	80107d4 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f4ba:	4b08      	ldr	r3, [pc, #32]	; (800f4dc <PrepareRxDoneAbort+0x4c>)
 800f4bc:	4a09      	ldr	r2, [pc, #36]	; (800f4e4 <PrepareRxDoneAbort+0x54>)
 800f4be:	5c99      	ldrb	r1, [r3, r2]
 800f4c0:	2002      	movs	r0, #2
 800f4c2:	4301      	orrs	r1, r0
 800f4c4:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f4c6:	4b05      	ldr	r3, [pc, #20]	; (800f4dc <PrepareRxDoneAbort+0x4c>)
 800f4c8:	4a06      	ldr	r2, [pc, #24]	; (800f4e4 <PrepareRxDoneAbort+0x54>)
 800f4ca:	5c99      	ldrb	r1, [r3, r2]
 800f4cc:	2020      	movs	r0, #32
 800f4ce:	4301      	orrs	r1, r0
 800f4d0:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f4d2:	f7ff fef7 	bl	800f2c4 <UpdateRxSlotIdleState>
}
 800f4d6:	46c0      	nop			; (mov r8, r8)
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	200005b8 	.word	0x200005b8
 800f4e0:	00000414 	.word	0x00000414
 800f4e4:	00000481 	.word	0x00000481

0800f4e8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ea:	b0a7      	sub	sp, #156	; 0x9c
 800f4ec:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f4ee:	2380      	movs	r3, #128	; 0x80
 800f4f0:	18fb      	adds	r3, r7, r3
 800f4f2:	2213      	movs	r2, #19
 800f4f4:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f4f6:	4bdf      	ldr	r3, [pc, #892]	; (800f874 <ProcessRadioRxDone+0x38c>)
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800f4fc:	267a      	movs	r6, #122	; 0x7a
 800f4fe:	19bb      	adds	r3, r7, r6
 800f500:	4adc      	ldr	r2, [pc, #880]	; (800f874 <ProcessRadioRxDone+0x38c>)
 800f502:	8912      	ldrh	r2, [r2, #8]
 800f504:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800f506:	2478      	movs	r4, #120	; 0x78
 800f508:	193b      	adds	r3, r7, r4
 800f50a:	4ada      	ldr	r2, [pc, #872]	; (800f874 <ProcessRadioRxDone+0x38c>)
 800f50c:	8952      	ldrh	r2, [r2, #10]
 800f50e:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800f510:	2577      	movs	r5, #119	; 0x77
 800f512:	197b      	adds	r3, r7, r5
 800f514:	4ad7      	ldr	r2, [pc, #860]	; (800f874 <ProcessRadioRxDone+0x38c>)
 800f516:	7b12      	ldrb	r2, [r2, #12]
 800f518:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800f51a:	2376      	movs	r3, #118	; 0x76
 800f51c:	18fb      	adds	r3, r7, r3
 800f51e:	2200      	movs	r2, #0
 800f520:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800f526:	4bd4      	ldr	r3, [pc, #848]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f528:	4ad4      	ldr	r2, [pc, #848]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f52a:	589b      	ldr	r3, [r3, r2]
 800f52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f52e:	2284      	movs	r2, #132	; 0x84
 800f530:	18ba      	adds	r2, r7, r2
 800f532:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800f534:	2383      	movs	r3, #131	; 0x83
 800f536:	18fb      	adds	r3, r7, r3
 800f538:	2200      	movs	r2, #0
 800f53a:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f53c:	2382      	movs	r3, #130	; 0x82
 800f53e:	18fb      	adds	r3, r7, r3
 800f540:	2201      	movs	r2, #1
 800f542:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800f544:	4acc      	ldr	r2, [pc, #816]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f546:	2388      	movs	r3, #136	; 0x88
 800f548:	00db      	lsls	r3, r3, #3
 800f54a:	2100      	movs	r1, #0
 800f54c:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800f54e:	4bca      	ldr	r3, [pc, #808]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f550:	193a      	adds	r2, r7, r4
 800f552:	49cb      	ldr	r1, [pc, #812]	; (800f880 <ProcessRadioRxDone+0x398>)
 800f554:	8812      	ldrh	r2, [r2, #0]
 800f556:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800f558:	4bc7      	ldr	r3, [pc, #796]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f55a:	197a      	adds	r2, r7, r5
 800f55c:	49c9      	ldr	r1, [pc, #804]	; (800f884 <ProcessRadioRxDone+0x39c>)
 800f55e:	7812      	ldrb	r2, [r2, #0]
 800f560:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800f562:	4ac5      	ldr	r2, [pc, #788]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f564:	2390      	movs	r3, #144	; 0x90
 800f566:	00db      	lsls	r3, r3, #3
 800f568:	5cd1      	ldrb	r1, [r2, r3]
 800f56a:	4bc3      	ldr	r3, [pc, #780]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f56c:	4ac6      	ldr	r2, [pc, #792]	; (800f888 <ProcessRadioRxDone+0x3a0>)
 800f56e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800f570:	4bc1      	ldr	r3, [pc, #772]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f572:	4ac6      	ldr	r2, [pc, #792]	; (800f88c <ProcessRadioRxDone+0x3a4>)
 800f574:	2100      	movs	r1, #0
 800f576:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800f578:	4bbf      	ldr	r3, [pc, #764]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f57a:	4ac5      	ldr	r2, [pc, #788]	; (800f890 <ProcessRadioRxDone+0x3a8>)
 800f57c:	2100      	movs	r1, #0
 800f57e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800f580:	4bbd      	ldr	r3, [pc, #756]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f582:	4ac4      	ldr	r2, [pc, #784]	; (800f894 <ProcessRadioRxDone+0x3ac>)
 800f584:	2100      	movs	r1, #0
 800f586:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800f588:	4bbb      	ldr	r3, [pc, #748]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f58a:	4ac3      	ldr	r2, [pc, #780]	; (800f898 <ProcessRadioRxDone+0x3b0>)
 800f58c:	2100      	movs	r1, #0
 800f58e:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800f590:	4ab9      	ldr	r2, [pc, #740]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f592:	2385      	movs	r3, #133	; 0x85
 800f594:	00db      	lsls	r3, r3, #3
 800f596:	2100      	movs	r1, #0
 800f598:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800f59a:	4bb7      	ldr	r3, [pc, #732]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f59c:	4abf      	ldr	r2, [pc, #764]	; (800f89c <ProcessRadioRxDone+0x3b4>)
 800f59e:	2100      	movs	r1, #0
 800f5a0:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800f5a2:	4bb5      	ldr	r3, [pc, #724]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f5a4:	4abe      	ldr	r2, [pc, #760]	; (800f8a0 <ProcessRadioRxDone+0x3b8>)
 800f5a6:	2100      	movs	r1, #0
 800f5a8:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f5aa:	4ab3      	ldr	r2, [pc, #716]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f5ac:	2386      	movs	r3, #134	; 0x86
 800f5ae:	00db      	lsls	r3, r3, #3
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f5b4:	4bb0      	ldr	r3, [pc, #704]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f5b6:	4abb      	ldr	r2, [pc, #748]	; (800f8a4 <ProcessRadioRxDone+0x3bc>)
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800f5bc:	4bae      	ldr	r3, [pc, #696]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f5be:	4aba      	ldr	r2, [pc, #744]	; (800f8a8 <ProcessRadioRxDone+0x3c0>)
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f5c4:	4aac      	ldr	r2, [pc, #688]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f5c6:	2387      	movs	r3, #135	; 0x87
 800f5c8:	00db      	lsls	r3, r3, #3
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800f5ce:	4bb7      	ldr	r3, [pc, #732]	; (800f8ac <ProcessRadioRxDone+0x3c4>)
 800f5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5d2:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f5d4:	4bb6      	ldr	r3, [pc, #728]	; (800f8b0 <ProcessRadioRxDone+0x3c8>)
 800f5d6:	0018      	movs	r0, r3
 800f5d8:	f00d fbd6 	bl	801cd88 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f5dc:	19bb      	adds	r3, r7, r6
 800f5de:	881a      	ldrh	r2, [r3, #0]
 800f5e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5e2:	0011      	movs	r1, r2
 800f5e4:	0018      	movs	r0, r3
 800f5e6:	f005 f9f1 	bl	80149cc <LoRaMacClassBRxBeacon>
 800f5ea:	1e03      	subs	r3, r0, #0
 800f5ec:	d00c      	beq.n	800f608 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f5ee:	4ba2      	ldr	r3, [pc, #648]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f5f0:	193a      	adds	r2, r7, r4
 800f5f2:	49b0      	ldr	r1, [pc, #704]	; (800f8b4 <ProcessRadioRxDone+0x3cc>)
 800f5f4:	8812      	ldrh	r2, [r2, #0]
 800f5f6:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f5f8:	4a9f      	ldr	r2, [pc, #636]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f5fa:	1979      	adds	r1, r7, r5
 800f5fc:	238f      	movs	r3, #143	; 0x8f
 800f5fe:	00db      	lsls	r3, r3, #3
 800f600:	7809      	ldrb	r1, [r1, #0]
 800f602:	54d1      	strb	r1, [r2, r3]
        return;
 800f604:	f000 fc9e 	bl	800ff44 <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f608:	4b9b      	ldr	r3, [pc, #620]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f60a:	4a9c      	ldr	r2, [pc, #624]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f60c:	589b      	ldr	r3, [r3, r2]
 800f60e:	227c      	movs	r2, #124	; 0x7c
 800f610:	5c9b      	ldrb	r3, [r3, r2]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d11c      	bne.n	800f650 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f616:	f005 f9eb 	bl	80149f0 <LoRaMacClassBIsPingExpected>
 800f61a:	1e03      	subs	r3, r0, #0
 800f61c:	d00a      	beq.n	800f634 <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f61e:	2000      	movs	r0, #0
 800f620:	f005 f9a2 	bl	8014968 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f624:	2000      	movs	r0, #0
 800f626:	f005 f9c1 	bl	80149ac <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f62a:	4b93      	ldr	r3, [pc, #588]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f62c:	4a96      	ldr	r2, [pc, #600]	; (800f888 <ProcessRadioRxDone+0x3a0>)
 800f62e:	2104      	movs	r1, #4
 800f630:	5499      	strb	r1, [r3, r2]
 800f632:	e00d      	b.n	800f650 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f634:	f005 f9e2 	bl	80149fc <LoRaMacClassBIsMulticastExpected>
 800f638:	1e03      	subs	r3, r0, #0
 800f63a:	d009      	beq.n	800f650 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f63c:	2000      	movs	r0, #0
 800f63e:	f005 f99d 	bl	801497c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f642:	2000      	movs	r0, #0
 800f644:	f005 f9ba 	bl	80149bc <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f648:	4b8b      	ldr	r3, [pc, #556]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f64a:	4a8f      	ldr	r2, [pc, #572]	; (800f888 <ProcessRadioRxDone+0x3a0>)
 800f64c:	2105      	movs	r1, #5
 800f64e:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f650:	2276      	movs	r2, #118	; 0x76
 800f652:	18bb      	adds	r3, r7, r2
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	18ba      	adds	r2, r7, r2
 800f658:	1c59      	adds	r1, r3, #1
 800f65a:	7011      	strb	r1, [r2, #0]
 800f65c:	001a      	movs	r2, r3
 800f65e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f660:	189b      	adds	r3, r3, r2
 800f662:	781a      	ldrb	r2, [r3, #0]
 800f664:	2174      	movs	r1, #116	; 0x74
 800f666:	187b      	adds	r3, r7, r1
 800f668:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800f66a:	187b      	adds	r3, r7, r1
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	061b      	lsls	r3, r3, #24
 800f670:	0f5b      	lsrs	r3, r3, #29
 800f672:	b2db      	uxtb	r3, r3
 800f674:	2b07      	cmp	r3, #7
 800f676:	d101      	bne.n	800f67c <ProcessRadioRxDone+0x194>
 800f678:	f000 fc0c 	bl	800fe94 <ProcessRadioRxDone+0x9ac>
 800f67c:	dd01      	ble.n	800f682 <ProcessRadioRxDone+0x19a>
 800f67e:	f000 fc38 	bl	800fef2 <ProcessRadioRxDone+0xa0a>
 800f682:	2b05      	cmp	r3, #5
 800f684:	d100      	bne.n	800f688 <ProcessRadioRxDone+0x1a0>
 800f686:	e119      	b.n	800f8bc <ProcessRadioRxDone+0x3d4>
 800f688:	dd01      	ble.n	800f68e <ProcessRadioRxDone+0x1a6>
 800f68a:	f000 fc32 	bl	800fef2 <ProcessRadioRxDone+0xa0a>
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d004      	beq.n	800f69c <ProcessRadioRxDone+0x1b4>
 800f692:	2b03      	cmp	r3, #3
 800f694:	d100      	bne.n	800f698 <ProcessRadioRxDone+0x1b0>
 800f696:	e115      	b.n	800f8c4 <ProcessRadioRxDone+0x3dc>
 800f698:	f000 fc2b 	bl	800fef2 <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f69c:	237a      	movs	r3, #122	; 0x7a
 800f69e:	18fb      	adds	r3, r7, r3
 800f6a0:	881b      	ldrh	r3, [r3, #0]
 800f6a2:	2b10      	cmp	r3, #16
 800f6a4:	d807      	bhi.n	800f6b6 <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f6a6:	4b74      	ldr	r3, [pc, #464]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f6a8:	4a83      	ldr	r2, [pc, #524]	; (800f8b8 <ProcessRadioRxDone+0x3d0>)
 800f6aa:	2101      	movs	r1, #1
 800f6ac:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f6ae:	f7ff feef 	bl	800f490 <PrepareRxDoneAbort>
                return;
 800f6b2:	f000 fc47 	bl	800ff44 <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800f6b6:	2108      	movs	r1, #8
 800f6b8:	187b      	adds	r3, r7, r1
 800f6ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f6bc:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800f6be:	237a      	movs	r3, #122	; 0x7a
 800f6c0:	18fb      	adds	r3, r7, r3
 800f6c2:	881b      	ldrh	r3, [r3, #0]
 800f6c4:	b2da      	uxtb	r2, r3
 800f6c6:	187b      	adds	r3, r7, r1
 800f6c8:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800f6ca:	4b6b      	ldr	r3, [pc, #428]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f6cc:	4a6b      	ldr	r2, [pc, #428]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f6ce:	589a      	ldr	r2, [r3, r2]
 800f6d0:	23b2      	movs	r3, #178	; 0xb2
 800f6d2:	005b      	lsls	r3, r3, #1
 800f6d4:	5cd3      	ldrb	r3, [r2, r3]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d007      	beq.n	800f6ea <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f6da:	4b67      	ldr	r3, [pc, #412]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f6dc:	4a76      	ldr	r2, [pc, #472]	; (800f8b8 <ProcessRadioRxDone+0x3d0>)
 800f6de:	2101      	movs	r1, #1
 800f6e0:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f6e2:	f7ff fed5 	bl	800f490 <PrepareRxDoneAbort>
                return;
 800f6e6:	f000 fc2d 	bl	800ff44 <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800f6ea:	f7fe fc21 	bl	800df30 <SecureElementGetJoinEui>
 800f6ee:	0001      	movs	r1, r0
 800f6f0:	2680      	movs	r6, #128	; 0x80
 800f6f2:	19bc      	adds	r4, r7, r6
 800f6f4:	2508      	movs	r5, #8
 800f6f6:	197b      	adds	r3, r7, r5
 800f6f8:	001a      	movs	r2, r3
 800f6fa:	20ff      	movs	r0, #255	; 0xff
 800f6fc:	f006 fcba 	bl	8016074 <LoRaMacCryptoHandleJoinAccept>
 800f700:	0003      	movs	r3, r0
 800f702:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f704:	19bb      	adds	r3, r7, r6
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d000      	beq.n	800f70e <ProcessRadioRxDone+0x226>
 800f70c:	e0a7      	b.n	800f85e <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f70e:	002c      	movs	r4, r5
 800f710:	193b      	adds	r3, r7, r4
 800f712:	7a59      	ldrb	r1, [r3, #9]
 800f714:	4b58      	ldr	r3, [pc, #352]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f716:	4a59      	ldr	r2, [pc, #356]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f718:	589b      	ldr	r3, [r3, r2]
 800f71a:	000a      	movs	r2, r1
 800f71c:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f71e:	4b56      	ldr	r3, [pc, #344]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f720:	4a56      	ldr	r2, [pc, #344]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f722:	589b      	ldr	r3, [r3, r2]
 800f724:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f726:	193b      	adds	r3, r7, r4
 800f728:	7a9b      	ldrb	r3, [r3, #10]
 800f72a:	021a      	lsls	r2, r3, #8
 800f72c:	4b52      	ldr	r3, [pc, #328]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f72e:	4853      	ldr	r0, [pc, #332]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f730:	581b      	ldr	r3, [r3, r0]
 800f732:	430a      	orrs	r2, r1
 800f734:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f736:	4b50      	ldr	r3, [pc, #320]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f738:	4a50      	ldr	r2, [pc, #320]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f73a:	589b      	ldr	r3, [r3, r2]
 800f73c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f73e:	193b      	adds	r3, r7, r4
 800f740:	7adb      	ldrb	r3, [r3, #11]
 800f742:	041a      	lsls	r2, r3, #16
 800f744:	4b4c      	ldr	r3, [pc, #304]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f746:	484d      	ldr	r0, [pc, #308]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f748:	581b      	ldr	r3, [r3, r0]
 800f74a:	430a      	orrs	r2, r1
 800f74c:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800f74e:	4b4a      	ldr	r3, [pc, #296]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f750:	4a4a      	ldr	r2, [pc, #296]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f752:	589b      	ldr	r3, [r3, r2]
 800f754:	0020      	movs	r0, r4
 800f756:	183a      	adds	r2, r7, r0
 800f758:	68d2      	ldr	r2, [r2, #12]
 800f75a:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f75c:	183b      	adds	r3, r7, r0
 800f75e:	7c1b      	ldrb	r3, [r3, #16]
 800f760:	065b      	lsls	r3, r3, #25
 800f762:	0f5b      	lsrs	r3, r3, #29
 800f764:	b2d9      	uxtb	r1, r3
 800f766:	4b44      	ldr	r3, [pc, #272]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f768:	4a44      	ldr	r2, [pc, #272]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f76a:	589b      	ldr	r3, [r3, r2]
 800f76c:	22a5      	movs	r2, #165	; 0xa5
 800f76e:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f770:	183b      	adds	r3, r7, r0
 800f772:	7c1b      	ldrb	r3, [r3, #16]
 800f774:	071b      	lsls	r3, r3, #28
 800f776:	0f1b      	lsrs	r3, r3, #28
 800f778:	b2d9      	uxtb	r1, r3
 800f77a:	4b3f      	ldr	r3, [pc, #252]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f77c:	4a3f      	ldr	r2, [pc, #252]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f77e:	589b      	ldr	r3, [r3, r2]
 800f780:	22ac      	movs	r2, #172	; 0xac
 800f782:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f784:	183b      	adds	r3, r7, r0
 800f786:	7c1b      	ldrb	r3, [r3, #16]
 800f788:	071b      	lsls	r3, r3, #28
 800f78a:	0f1b      	lsrs	r3, r3, #28
 800f78c:	b2d9      	uxtb	r1, r3
 800f78e:	4b3a      	ldr	r3, [pc, #232]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f790:	4a3a      	ldr	r2, [pc, #232]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f792:	589b      	ldr	r3, [r3, r2]
 800f794:	22b4      	movs	r2, #180	; 0xb4
 800f796:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f798:	183b      	adds	r3, r7, r0
 800f79a:	7c59      	ldrb	r1, [r3, #17]
 800f79c:	4b36      	ldr	r3, [pc, #216]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f79e:	4a37      	ldr	r2, [pc, #220]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f7a0:	589b      	ldr	r3, [r3, r2]
 800f7a2:	2294      	movs	r2, #148	; 0x94
 800f7a4:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800f7a6:	4b34      	ldr	r3, [pc, #208]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f7a8:	4a34      	ldr	r2, [pc, #208]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f7aa:	589b      	ldr	r3, [r3, r2]
 800f7ac:	2294      	movs	r2, #148	; 0x94
 800f7ae:	589b      	ldr	r3, [r3, r2]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d105      	bne.n	800f7c0 <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800f7b4:	4b30      	ldr	r3, [pc, #192]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f7b6:	4a31      	ldr	r2, [pc, #196]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f7b8:	589b      	ldr	r3, [r3, r2]
 800f7ba:	2294      	movs	r2, #148	; 0x94
 800f7bc:	2101      	movs	r1, #1
 800f7be:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800f7c0:	4b2d      	ldr	r3, [pc, #180]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f7c2:	4a2e      	ldr	r2, [pc, #184]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f7c4:	589b      	ldr	r3, [r3, r2]
 800f7c6:	2294      	movs	r2, #148	; 0x94
 800f7c8:	589a      	ldr	r2, [r3, r2]
 800f7ca:	4b2b      	ldr	r3, [pc, #172]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f7cc:	492b      	ldr	r1, [pc, #172]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f7ce:	5859      	ldr	r1, [r3, r1]
 800f7d0:	0013      	movs	r3, r2
 800f7d2:	015b      	lsls	r3, r3, #5
 800f7d4:	1a9b      	subs	r3, r3, r2
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	189b      	adds	r3, r3, r2
 800f7da:	00db      	lsls	r3, r3, #3
 800f7dc:	001a      	movs	r2, r3
 800f7de:	2394      	movs	r3, #148	; 0x94
 800f7e0:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800f7e2:	4b25      	ldr	r3, [pc, #148]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f7e4:	4a25      	ldr	r2, [pc, #148]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f7e6:	589b      	ldr	r3, [r3, r2]
 800f7e8:	2294      	movs	r2, #148	; 0x94
 800f7ea:	589b      	ldr	r3, [r3, r2]
 800f7ec:	4a22      	ldr	r2, [pc, #136]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f7ee:	4923      	ldr	r1, [pc, #140]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f7f0:	5852      	ldr	r2, [r2, r1]
 800f7f2:	21fa      	movs	r1, #250	; 0xfa
 800f7f4:	0089      	lsls	r1, r1, #2
 800f7f6:	468c      	mov	ip, r1
 800f7f8:	4463      	add	r3, ip
 800f7fa:	2198      	movs	r1, #152	; 0x98
 800f7fc:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800f7fe:	4b1e      	ldr	r3, [pc, #120]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f800:	4a1e      	ldr	r2, [pc, #120]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f802:	589a      	ldr	r2, [r3, r2]
 800f804:	23b1      	movs	r3, #177	; 0xb1
 800f806:	005b      	lsls	r3, r3, #1
 800f808:	2100      	movs	r1, #0
 800f80a:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f80c:	216c      	movs	r1, #108	; 0x6c
 800f80e:	187b      	adds	r3, r7, r1
 800f810:	2208      	movs	r2, #8
 800f812:	18ba      	adds	r2, r7, r2
 800f814:	3212      	adds	r2, #18
 800f816:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f818:	237a      	movs	r3, #122	; 0x7a
 800f81a:	18fb      	adds	r3, r7, r3
 800f81c:	881b      	ldrh	r3, [r3, #0]
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	3b11      	subs	r3, #17
 800f822:	b2da      	uxtb	r2, r3
 800f824:	187b      	adds	r3, r7, r1
 800f826:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800f828:	4b13      	ldr	r3, [pc, #76]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f82a:	4a14      	ldr	r2, [pc, #80]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f82c:	589b      	ldr	r3, [r3, r2]
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	187a      	adds	r2, r7, r1
 800f832:	0011      	movs	r1, r2
 800f834:	0018      	movs	r0, r3
 800f836:	f007 faf4 	bl	8016e22 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f83a:	4b0f      	ldr	r3, [pc, #60]	; (800f878 <ProcessRadioRxDone+0x390>)
 800f83c:	4a0f      	ldr	r2, [pc, #60]	; (800f87c <ProcessRadioRxDone+0x394>)
 800f83e:	589a      	ldr	r2, [r3, r2]
 800f840:	23b2      	movs	r3, #178	; 0xb2
 800f842:	005b      	lsls	r3, r3, #1
 800f844:	2102      	movs	r1, #2
 800f846:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f848:	2001      	movs	r0, #1
 800f84a:	f005 fe49 	bl	80154e0 <LoRaMacConfirmQueueIsCmdActive>
 800f84e:	1e03      	subs	r3, r0, #0
 800f850:	d100      	bne.n	800f854 <ProcessRadioRxDone+0x36c>
 800f852:	e355      	b.n	800ff00 <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f854:	2101      	movs	r1, #1
 800f856:	2000      	movs	r0, #0
 800f858:	f005 fda6 	bl	80153a8 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800f85c:	e350      	b.n	800ff00 <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f85e:	2001      	movs	r0, #1
 800f860:	f005 fe3e 	bl	80154e0 <LoRaMacConfirmQueueIsCmdActive>
 800f864:	1e03      	subs	r3, r0, #0
 800f866:	d100      	bne.n	800f86a <ProcessRadioRxDone+0x382>
 800f868:	e34a      	b.n	800ff00 <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f86a:	2101      	movs	r1, #1
 800f86c:	2007      	movs	r0, #7
 800f86e:	f005 fd9b 	bl	80153a8 <LoRaMacConfirmQueueSetStatus>
            break;
 800f872:	e345      	b.n	800ff00 <ProcessRadioRxDone+0xa18>
 800f874:	20001710 	.word	0x20001710
 800f878:	200005b8 	.word	0x200005b8
 800f87c:	00000484 	.word	0x00000484
 800f880:	0000042a 	.word	0x0000042a
 800f884:	0000042c 	.word	0x0000042c
 800f888:	0000042d 	.word	0x0000042d
 800f88c:	0000041f 	.word	0x0000041f
 800f890:	0000041e 	.word	0x0000041e
 800f894:	00000421 	.word	0x00000421
 800f898:	00000424 	.word	0x00000424
 800f89c:	00000429 	.word	0x00000429
 800f8a0:	0000042e 	.word	0x0000042e
 800f8a4:	0000041c 	.word	0x0000041c
 800f8a8:	00000434 	.word	0x00000434
 800f8ac:	0801fd7c 	.word	0x0801fd7c
 800f8b0:	20000950 	.word	0x20000950
 800f8b4:	00000476 	.word	0x00000476
 800f8b8:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f8bc:	4bd5      	ldr	r3, [pc, #852]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f8be:	4ad6      	ldr	r2, [pc, #856]	; (800fc18 <ProcessRadioRxDone+0x730>)
 800f8c0:	2101      	movs	r1, #1
 800f8c2:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f8c4:	4bd3      	ldr	r3, [pc, #844]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f8c6:	4ad5      	ldr	r2, [pc, #852]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800f8c8:	589b      	ldr	r3, [r3, r2]
 800f8ca:	22b9      	movs	r2, #185	; 0xb9
 800f8cc:	5c9a      	ldrb	r2, [r3, r2]
 800f8ce:	2164      	movs	r1, #100	; 0x64
 800f8d0:	187b      	adds	r3, r7, r1
 800f8d2:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f8d4:	4acf      	ldr	r2, [pc, #828]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f8d6:	2384      	movs	r3, #132	; 0x84
 800f8d8:	00db      	lsls	r3, r3, #3
 800f8da:	5cd3      	ldrb	r3, [r2, r3]
 800f8dc:	b25a      	sxtb	r2, r3
 800f8de:	187b      	adds	r3, r7, r1
 800f8e0:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f8e2:	187b      	adds	r3, r7, r1
 800f8e4:	220d      	movs	r2, #13
 800f8e6:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800f8e8:	4bca      	ldr	r3, [pc, #808]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f8ea:	4acc      	ldr	r2, [pc, #816]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800f8ec:	589b      	ldr	r3, [r3, r2]
 800f8ee:	22ca      	movs	r2, #202	; 0xca
 800f8f0:	5c9b      	ldrb	r3, [r3, r2]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f8f6:	187b      	adds	r3, r7, r1
 800f8f8:	220e      	movs	r2, #14
 800f8fa:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f8fc:	4bc5      	ldr	r3, [pc, #788]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f8fe:	4ac7      	ldr	r2, [pc, #796]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800f900:	589b      	ldr	r3, [r3, r2]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	2264      	movs	r2, #100	; 0x64
 800f906:	18ba      	adds	r2, r7, r2
 800f908:	0011      	movs	r1, r2
 800f90a:	0018      	movs	r0, r3
 800f90c:	f007 fa05 	bl	8016d1a <RegionGetPhyParam>
 800f910:	0003      	movs	r3, r0
 800f912:	001a      	movs	r2, r3
 800f914:	2360      	movs	r3, #96	; 0x60
 800f916:	18fb      	adds	r3, r7, r3
 800f918:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f91a:	237a      	movs	r3, #122	; 0x7a
 800f91c:	18fb      	adds	r3, r7, r3
 800f91e:	881b      	ldrh	r3, [r3, #0]
 800f920:	3b0d      	subs	r3, #13
 800f922:	b29b      	uxth	r3, r3
 800f924:	b21b      	sxth	r3, r3
 800f926:	1c1a      	adds	r2, r3, #0
 800f928:	b213      	sxth	r3, r2
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	da01      	bge.n	800f932 <ProcessRadioRxDone+0x44a>
 800f92e:	2300      	movs	r3, #0
 800f930:	1c1a      	adds	r2, r3, #0
 800f932:	b212      	sxth	r2, r2
 800f934:	2360      	movs	r3, #96	; 0x60
 800f936:	18fb      	adds	r3, r7, r3
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	b21b      	sxth	r3, r3
 800f93c:	429a      	cmp	r2, r3
 800f93e:	dc04      	bgt.n	800f94a <ProcessRadioRxDone+0x462>
 800f940:	237a      	movs	r3, #122	; 0x7a
 800f942:	18fb      	adds	r3, r7, r3
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	2b0b      	cmp	r3, #11
 800f948:	d806      	bhi.n	800f958 <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f94a:	4bb2      	ldr	r3, [pc, #712]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f94c:	4ab4      	ldr	r2, [pc, #720]	; (800fc20 <ProcessRadioRxDone+0x738>)
 800f94e:	2101      	movs	r1, #1
 800f950:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f952:	f7ff fd9d 	bl	800f490 <PrepareRxDoneAbort>
                return;
 800f956:	e2f5      	b.n	800ff44 <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 800f958:	2130      	movs	r1, #48	; 0x30
 800f95a:	187b      	adds	r3, r7, r1
 800f95c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f95e:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800f960:	237a      	movs	r3, #122	; 0x7a
 800f962:	18fb      	adds	r3, r7, r3
 800f964:	881b      	ldrh	r3, [r3, #0]
 800f966:	b2da      	uxtb	r2, r3
 800f968:	187b      	adds	r3, r7, r1
 800f96a:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f96c:	187b      	adds	r3, r7, r1
 800f96e:	4aad      	ldr	r2, [pc, #692]	; (800fc24 <ProcessRadioRxDone+0x73c>)
 800f970:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f972:	0008      	movs	r0, r1
 800f974:	187b      	adds	r3, r7, r1
 800f976:	2228      	movs	r2, #40	; 0x28
 800f978:	21ff      	movs	r1, #255	; 0xff
 800f97a:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f97c:	183b      	adds	r3, r7, r0
 800f97e:	0018      	movs	r0, r3
 800f980:	f006 fee4 	bl	801674c <LoRaMacParserData>
 800f984:	1e03      	subs	r3, r0, #0
 800f986:	d006      	beq.n	800f996 <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f988:	4ba2      	ldr	r3, [pc, #648]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f98a:	4aa5      	ldr	r2, [pc, #660]	; (800fc20 <ProcessRadioRxDone+0x738>)
 800f98c:	2101      	movs	r1, #1
 800f98e:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f990:	f7ff fd7e 	bl	800f490 <PrepareRxDoneAbort>
                return;
 800f994:	e2d6      	b.n	800ff44 <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f996:	2030      	movs	r0, #48	; 0x30
 800f998:	183b      	adds	r3, r7, r0
 800f99a:	689a      	ldr	r2, [r3, #8]
 800f99c:	4b9d      	ldr	r3, [pc, #628]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f99e:	49a2      	ldr	r1, [pc, #648]	; (800fc28 <ProcessRadioRxDone+0x740>)
 800f9a0:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f9a2:	1cba      	adds	r2, r7, #2
 800f9a4:	183b      	adds	r3, r7, r0
 800f9a6:	0011      	movs	r1, r2
 800f9a8:	0018      	movs	r0, r3
 800f9aa:	f003 f861 	bl	8012a70 <DetermineFrameType>
 800f9ae:	1e03      	subs	r3, r0, #0
 800f9b0:	d006      	beq.n	800f9c0 <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f9b2:	4b98      	ldr	r3, [pc, #608]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f9b4:	4a9a      	ldr	r2, [pc, #616]	; (800fc20 <ProcessRadioRxDone+0x738>)
 800f9b6:	2101      	movs	r1, #1
 800f9b8:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f9ba:	f7ff fd69 	bl	800f490 <PrepareRxDoneAbort>
                return;
 800f9be:	e2c1      	b.n	800ff44 <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f9c0:	2383      	movs	r3, #131	; 0x83
 800f9c2:	18fb      	adds	r3, r7, r3
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f9cc:	2381      	movs	r3, #129	; 0x81
 800f9ce:	18fb      	adds	r3, r7, r3
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	701a      	strb	r2, [r3, #0]
 800f9d4:	e05b      	b.n	800fa8e <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f9d6:	4b8f      	ldr	r3, [pc, #572]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f9d8:	4a90      	ldr	r2, [pc, #576]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800f9da:	589a      	ldr	r2, [r3, r2]
 800f9dc:	2481      	movs	r4, #129	; 0x81
 800f9de:	193b      	adds	r3, r7, r4
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	212c      	movs	r1, #44	; 0x2c
 800f9e4:	434b      	muls	r3, r1
 800f9e6:	18d3      	adds	r3, r2, r3
 800f9e8:	3354      	adds	r3, #84	; 0x54
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	2330      	movs	r3, #48	; 0x30
 800f9ee:	18fb      	adds	r3, r7, r3
 800f9f0:	689b      	ldr	r3, [r3, #8]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d145      	bne.n	800fa82 <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f9f6:	4b87      	ldr	r3, [pc, #540]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800f9f8:	4a88      	ldr	r2, [pc, #544]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800f9fa:	589a      	ldr	r2, [r3, r2]
 800f9fc:	193b      	adds	r3, r7, r4
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	2152      	movs	r1, #82	; 0x52
 800fa02:	202c      	movs	r0, #44	; 0x2c
 800fa04:	4343      	muls	r3, r0
 800fa06:	18d3      	adds	r3, r2, r3
 800fa08:	185b      	adds	r3, r3, r1
 800fa0a:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d038      	beq.n	800fa82 <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 800fa10:	2383      	movs	r3, #131	; 0x83
 800fa12:	18fb      	adds	r3, r7, r3
 800fa14:	2201      	movs	r2, #1
 800fa16:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800fa18:	4b7e      	ldr	r3, [pc, #504]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fa1a:	4a80      	ldr	r2, [pc, #512]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800fa1c:	5899      	ldr	r1, [r3, r2]
 800fa1e:	0025      	movs	r5, r4
 800fa20:	193b      	adds	r3, r7, r4
 800fa22:	781a      	ldrb	r2, [r3, #0]
 800fa24:	2382      	movs	r3, #130	; 0x82
 800fa26:	18fb      	adds	r3, r7, r3
 800fa28:	2053      	movs	r0, #83	; 0x53
 800fa2a:	242c      	movs	r4, #44	; 0x2c
 800fa2c:	4362      	muls	r2, r4
 800fa2e:	188a      	adds	r2, r1, r2
 800fa30:	1812      	adds	r2, r2, r0
 800fa32:	7812      	ldrb	r2, [r2, #0]
 800fa34:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800fa36:	4b77      	ldr	r3, [pc, #476]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fa38:	4a78      	ldr	r2, [pc, #480]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800fa3a:	589a      	ldr	r2, [r3, r2]
 800fa3c:	002c      	movs	r4, r5
 800fa3e:	193b      	adds	r3, r7, r4
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	212c      	movs	r1, #44	; 0x2c
 800fa44:	434b      	muls	r3, r1
 800fa46:	18d3      	adds	r3, r2, r3
 800fa48:	3370      	adds	r3, #112	; 0x70
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800fa50:	4b70      	ldr	r3, [pc, #448]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fa52:	4a72      	ldr	r2, [pc, #456]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800fa54:	589a      	ldr	r2, [r3, r2]
 800fa56:	193b      	adds	r3, r7, r4
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	212c      	movs	r1, #44	; 0x2c
 800fa5c:	434b      	muls	r3, r1
 800fa5e:	18d3      	adds	r3, r2, r3
 800fa60:	3354      	adds	r3, #84	; 0x54
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	2284      	movs	r2, #132	; 0x84
 800fa66:	18ba      	adds	r2, r7, r2
 800fa68:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800fa6a:	4b6a      	ldr	r3, [pc, #424]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fa6c:	4a6b      	ldr	r2, [pc, #428]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800fa6e:	589b      	ldr	r3, [r3, r2]
 800fa70:	227c      	movs	r2, #124	; 0x7c
 800fa72:	5c9b      	ldrb	r3, [r3, r2]
 800fa74:	2b02      	cmp	r3, #2
 800fa76:	d110      	bne.n	800fa9a <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fa78:	4b66      	ldr	r3, [pc, #408]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fa7a:	4a6c      	ldr	r2, [pc, #432]	; (800fc2c <ProcessRadioRxDone+0x744>)
 800fa7c:	2103      	movs	r1, #3
 800fa7e:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800fa80:	e00b      	b.n	800fa9a <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fa82:	2181      	movs	r1, #129	; 0x81
 800fa84:	187b      	adds	r3, r7, r1
 800fa86:	781a      	ldrb	r2, [r3, #0]
 800fa88:	187b      	adds	r3, r7, r1
 800fa8a:	3201      	adds	r2, #1
 800fa8c:	701a      	strb	r2, [r3, #0]
 800fa8e:	2381      	movs	r3, #129	; 0x81
 800fa90:	18fb      	adds	r3, r7, r3
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d09e      	beq.n	800f9d6 <ProcessRadioRxDone+0x4ee>
 800fa98:	e000      	b.n	800fa9c <ProcessRadioRxDone+0x5b4>
                    break;
 800fa9a:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fa9c:	2383      	movs	r3, #131	; 0x83
 800fa9e:	18fb      	adds	r3, r7, r3
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	d119      	bne.n	800fada <ProcessRadioRxDone+0x5f2>
 800faa6:	1cbb      	adds	r3, r7, #2
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	2b03      	cmp	r3, #3
 800faac:	d10e      	bne.n	800facc <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800faae:	2130      	movs	r1, #48	; 0x30
 800fab0:	187b      	adds	r3, r7, r1
 800fab2:	7b1b      	ldrb	r3, [r3, #12]
 800fab4:	2220      	movs	r2, #32
 800fab6:	4013      	ands	r3, r2
 800fab8:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d106      	bne.n	800facc <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800fabe:	187b      	adds	r3, r7, r1
 800fac0:	7b1b      	ldrb	r3, [r3, #12]
 800fac2:	2240      	movs	r2, #64	; 0x40
 800fac4:	4013      	ands	r3, r2
 800fac6:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d006      	beq.n	800fada <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800facc:	4b51      	ldr	r3, [pc, #324]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800face:	4a54      	ldr	r2, [pc, #336]	; (800fc20 <ProcessRadioRxDone+0x738>)
 800fad0:	2101      	movs	r1, #1
 800fad2:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fad4:	f7ff fcdc 	bl	800f490 <PrepareRxDoneAbort>
                return;
 800fad8:	e234      	b.n	800ff44 <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800fada:	2164      	movs	r1, #100	; 0x64
 800fadc:	187b      	adds	r3, r7, r1
 800fade:	2215      	movs	r2, #21
 800fae0:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800fae2:	4b4c      	ldr	r3, [pc, #304]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fae4:	4a4d      	ldr	r2, [pc, #308]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800fae6:	589b      	ldr	r3, [r3, r2]
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	187a      	adds	r2, r7, r1
 800faec:	0011      	movs	r1, r2
 800faee:	0018      	movs	r0, r3
 800faf0:	f007 f913 	bl	8016d1a <RegionGetPhyParam>
 800faf4:	0003      	movs	r3, r0
 800faf6:	001a      	movs	r2, r3
 800faf8:	2060      	movs	r0, #96	; 0x60
 800fafa:	183b      	adds	r3, r7, r0
 800fafc:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800fafe:	1cbb      	adds	r3, r7, #2
 800fb00:	781d      	ldrb	r5, [r3, #0]
 800fb02:	4b44      	ldr	r3, [pc, #272]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fb04:	4a45      	ldr	r2, [pc, #276]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800fb06:	5899      	ldr	r1, [r3, r2]
 800fb08:	183b      	adds	r3, r7, r0
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	2280      	movs	r2, #128	; 0x80
 800fb10:	18bc      	adds	r4, r7, r2
 800fb12:	22b0      	movs	r2, #176	; 0xb0
 800fb14:	0052      	lsls	r2, r2, #1
 800fb16:	588e      	ldr	r6, [r1, r2]
 800fb18:	2130      	movs	r1, #48	; 0x30
 800fb1a:	1879      	adds	r1, r7, r1
 800fb1c:	2082      	movs	r0, #130	; 0x82
 800fb1e:	183a      	adds	r2, r7, r0
 800fb20:	7810      	ldrb	r0, [r2, #0]
 800fb22:	1d3a      	adds	r2, r7, #4
 800fb24:	9202      	str	r2, [sp, #8]
 800fb26:	1cfa      	adds	r2, r7, #3
 800fb28:	9201      	str	r2, [sp, #4]
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	0033      	movs	r3, r6
 800fb2e:	000a      	movs	r2, r1
 800fb30:	0029      	movs	r1, r5
 800fb32:	f000 fe91 	bl	8010858 <GetFCntDown>
 800fb36:	0003      	movs	r3, r0
 800fb38:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fb3a:	2280      	movs	r2, #128	; 0x80
 800fb3c:	18bb      	adds	r3, r7, r2
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d040      	beq.n	800fbc6 <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800fb44:	18bb      	adds	r3, r7, r2
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	2b07      	cmp	r3, #7
 800fb4a:	d126      	bne.n	800fb9a <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800fb4c:	4b31      	ldr	r3, [pc, #196]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fb4e:	4a34      	ldr	r2, [pc, #208]	; (800fc20 <ProcessRadioRxDone+0x738>)
 800fb50:	2108      	movs	r1, #8
 800fb52:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800fb54:	4b2f      	ldr	r3, [pc, #188]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fb56:	4a31      	ldr	r2, [pc, #196]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800fb58:	589a      	ldr	r2, [r3, r2]
 800fb5a:	23b1      	movs	r3, #177	; 0xb1
 800fb5c:	005b      	lsls	r3, r3, #1
 800fb5e:	5cd3      	ldrb	r3, [r2, r3]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d128      	bne.n	800fbb6 <ProcessRadioRxDone+0x6ce>
 800fb64:	2374      	movs	r3, #116	; 0x74
 800fb66:	18fb      	adds	r3, r7, r3
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	221f      	movs	r2, #31
 800fb6c:	4393      	bics	r3, r2
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	2ba0      	cmp	r3, #160	; 0xa0
 800fb72:	d120      	bne.n	800fbb6 <ProcessRadioRxDone+0x6ce>
 800fb74:	4b27      	ldr	r3, [pc, #156]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fb76:	4a29      	ldr	r2, [pc, #164]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800fb78:	589a      	ldr	r2, [r3, r2]
 800fb7a:	23b4      	movs	r3, #180	; 0xb4
 800fb7c:	005b      	lsls	r3, r3, #1
 800fb7e:	58d2      	ldr	r2, [r2, r3]
 800fb80:	2130      	movs	r1, #48	; 0x30
 800fb82:	187b      	adds	r3, r7, r1
 800fb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d115      	bne.n	800fbb6 <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800fb8a:	4b22      	ldr	r3, [pc, #136]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fb8c:	4a23      	ldr	r2, [pc, #140]	; (800fc1c <ProcessRadioRxDone+0x734>)
 800fb8e:	589a      	ldr	r2, [r3, r2]
 800fb90:	234c      	movs	r3, #76	; 0x4c
 800fb92:	33ff      	adds	r3, #255	; 0xff
 800fb94:	2101      	movs	r1, #1
 800fb96:	54d1      	strb	r1, [r2, r3]
 800fb98:	e00d      	b.n	800fbb6 <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800fb9a:	2380      	movs	r3, #128	; 0x80
 800fb9c:	18fb      	adds	r3, r7, r3
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	2b08      	cmp	r3, #8
 800fba2:	d104      	bne.n	800fbae <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800fba4:	4b1b      	ldr	r3, [pc, #108]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fba6:	4a1e      	ldr	r2, [pc, #120]	; (800fc20 <ProcessRadioRxDone+0x738>)
 800fba8:	210a      	movs	r1, #10
 800fbaa:	5499      	strb	r1, [r3, r2]
 800fbac:	e003      	b.n	800fbb6 <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fbae:	4b19      	ldr	r3, [pc, #100]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fbb0:	4a1b      	ldr	r2, [pc, #108]	; (800fc20 <ProcessRadioRxDone+0x738>)
 800fbb2:	2101      	movs	r1, #1
 800fbb4:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fbb6:	6879      	ldr	r1, [r7, #4]
 800fbb8:	4a16      	ldr	r2, [pc, #88]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fbba:	2386      	movs	r3, #134	; 0x86
 800fbbc:	00db      	lsls	r3, r3, #3
 800fbbe:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800fbc0:	f7ff fc66 	bl	800f490 <PrepareRxDoneAbort>
                return;
 800fbc4:	e1be      	b.n	800ff44 <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800fbc6:	1cfb      	adds	r3, r7, #3
 800fbc8:	781a      	ldrb	r2, [r3, #0]
 800fbca:	687d      	ldr	r5, [r7, #4]
 800fbcc:	2680      	movs	r6, #128	; 0x80
 800fbce:	19bc      	adds	r4, r7, r6
 800fbd0:	2384      	movs	r3, #132	; 0x84
 800fbd2:	18fb      	adds	r3, r7, r3
 800fbd4:	6819      	ldr	r1, [r3, #0]
 800fbd6:	2382      	movs	r3, #130	; 0x82
 800fbd8:	18fb      	adds	r3, r7, r3
 800fbda:	7818      	ldrb	r0, [r3, #0]
 800fbdc:	2330      	movs	r3, #48	; 0x30
 800fbde:	18fb      	adds	r3, r7, r3
 800fbe0:	9300      	str	r3, [sp, #0]
 800fbe2:	002b      	movs	r3, r5
 800fbe4:	f006 fb9c 	bl	8016320 <LoRaMacCryptoUnsecureMessage>
 800fbe8:	0003      	movs	r3, r0
 800fbea:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fbec:	19bb      	adds	r3, r7, r6
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d01d      	beq.n	800fc30 <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800fbf4:	19bb      	adds	r3, r7, r6
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	2b02      	cmp	r3, #2
 800fbfa:	d104      	bne.n	800fc06 <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fbfc:	4b05      	ldr	r3, [pc, #20]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fbfe:	4a08      	ldr	r2, [pc, #32]	; (800fc20 <ProcessRadioRxDone+0x738>)
 800fc00:	210b      	movs	r1, #11
 800fc02:	5499      	strb	r1, [r3, r2]
 800fc04:	e003      	b.n	800fc0e <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fc06:	4b03      	ldr	r3, [pc, #12]	; (800fc14 <ProcessRadioRxDone+0x72c>)
 800fc08:	4a05      	ldr	r2, [pc, #20]	; (800fc20 <ProcessRadioRxDone+0x738>)
 800fc0a:	210c      	movs	r1, #12
 800fc0c:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800fc0e:	f7ff fc3f 	bl	800f490 <PrepareRxDoneAbort>
                return;
 800fc12:	e197      	b.n	800ff44 <ProcessRadioRxDone+0xa5c>
 800fc14:	200005b8 	.word	0x200005b8
 800fc18:	0000041c 	.word	0x0000041c
 800fc1c:	00000484 	.word	0x00000484
 800fc20:	0000041d 	.word	0x0000041d
 800fc24:	200007f0 	.word	0x200007f0
 800fc28:	00000434 	.word	0x00000434
 800fc2c:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fc30:	4bc6      	ldr	r3, [pc, #792]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fc32:	4ac7      	ldr	r2, [pc, #796]	; (800ff50 <ProcessRadioRxDone+0xa68>)
 800fc34:	2100      	movs	r1, #0
 800fc36:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800fc38:	4bc4      	ldr	r3, [pc, #784]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fc3a:	2283      	movs	r2, #131	; 0x83
 800fc3c:	18ba      	adds	r2, r7, r2
 800fc3e:	49c5      	ldr	r1, [pc, #788]	; (800ff54 <ProcessRadioRxDone+0xa6c>)
 800fc40:	7812      	ldrb	r2, [r2, #0]
 800fc42:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800fc44:	2030      	movs	r0, #48	; 0x30
 800fc46:	183b      	adds	r3, r7, r0
 800fc48:	7b1b      	ldrb	r3, [r3, #12]
 800fc4a:	06db      	lsls	r3, r3, #27
 800fc4c:	0fdb      	lsrs	r3, r3, #31
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	0019      	movs	r1, r3
 800fc52:	4bbe      	ldr	r3, [pc, #760]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fc54:	4ac0      	ldr	r2, [pc, #768]	; (800ff58 <ProcessRadioRxDone+0xa70>)
 800fc56:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800fc58:	4bbc      	ldr	r3, [pc, #752]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fc5a:	4ac0      	ldr	r2, [pc, #768]	; (800ff5c <ProcessRadioRxDone+0xa74>)
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800fc60:	4aba      	ldr	r2, [pc, #744]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fc62:	2385      	movs	r3, #133	; 0x85
 800fc64:	00db      	lsls	r3, r3, #3
 800fc66:	2100      	movs	r1, #0
 800fc68:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fc6a:	6879      	ldr	r1, [r7, #4]
 800fc6c:	4ab7      	ldr	r2, [pc, #732]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fc6e:	2386      	movs	r3, #134	; 0x86
 800fc70:	00db      	lsls	r3, r3, #3
 800fc72:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fc74:	183b      	adds	r3, r7, r0
 800fc76:	7b1b      	ldrb	r3, [r3, #12]
 800fc78:	069b      	lsls	r3, r3, #26
 800fc7a:	0fdb      	lsrs	r3, r3, #31
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	1e5a      	subs	r2, r3, #1
 800fc80:	4193      	sbcs	r3, r2
 800fc82:	b2d9      	uxtb	r1, r3
 800fc84:	4bb1      	ldr	r3, [pc, #708]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fc86:	4ab6      	ldr	r2, [pc, #728]	; (800ff60 <ProcessRadioRxDone+0xa78>)
 800fc88:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fc8a:	4bb0      	ldr	r3, [pc, #704]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fc8c:	4ab5      	ldr	r2, [pc, #724]	; (800ff64 <ProcessRadioRxDone+0xa7c>)
 800fc8e:	2100      	movs	r1, #0
 800fc90:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fc92:	183b      	adds	r3, r7, r0
 800fc94:	7b1b      	ldrb	r3, [r3, #12]
 800fc96:	069b      	lsls	r3, r3, #26
 800fc98:	0fdb      	lsrs	r3, r3, #31
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	1e5a      	subs	r2, r3, #1
 800fc9e:	4193      	sbcs	r3, r2
 800fca0:	b2d9      	uxtb	r1, r3
 800fca2:	4aaa      	ldr	r2, [pc, #680]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fca4:	2388      	movs	r3, #136	; 0x88
 800fca6:	00db      	lsls	r3, r3, #3
 800fca8:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800fcaa:	4ba8      	ldr	r3, [pc, #672]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fcac:	4aae      	ldr	r2, [pc, #696]	; (800ff68 <ProcessRadioRxDone+0xa80>)
 800fcae:	5c9b      	ldrb	r3, [r3, r2]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d004      	beq.n	800fcbe <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800fcb4:	4ba5      	ldr	r3, [pc, #660]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fcb6:	4aac      	ldr	r2, [pc, #688]	; (800ff68 <ProcessRadioRxDone+0xa80>)
 800fcb8:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d105      	bne.n	800fcca <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800fcbe:	4ba3      	ldr	r3, [pc, #652]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fcc0:	4aaa      	ldr	r2, [pc, #680]	; (800ff6c <ProcessRadioRxDone+0xa84>)
 800fcc2:	589b      	ldr	r3, [r3, r2]
 800fcc4:	2280      	movs	r2, #128	; 0x80
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800fcca:	2383      	movs	r3, #131	; 0x83
 800fccc:	18fb      	adds	r3, r7, r3
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d104      	bne.n	800fcde <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800fcd4:	4b9d      	ldr	r3, [pc, #628]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fcd6:	4aa6      	ldr	r2, [pc, #664]	; (800ff70 <ProcessRadioRxDone+0xa88>)
 800fcd8:	2102      	movs	r1, #2
 800fcda:	5499      	strb	r1, [r3, r2]
 800fcdc:	e02f      	b.n	800fd3e <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800fcde:	2374      	movs	r3, #116	; 0x74
 800fce0:	18fb      	adds	r3, r7, r3
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	221f      	movs	r2, #31
 800fce6:	4393      	bics	r3, r2
 800fce8:	b2db      	uxtb	r3, r3
 800fcea:	2ba0      	cmp	r3, #160	; 0xa0
 800fcec:	d11c      	bne.n	800fd28 <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800fcee:	4b97      	ldr	r3, [pc, #604]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fcf0:	4a9e      	ldr	r2, [pc, #632]	; (800ff6c <ProcessRadioRxDone+0xa84>)
 800fcf2:	589a      	ldr	r2, [r3, r2]
 800fcf4:	234c      	movs	r3, #76	; 0x4c
 800fcf6:	33ff      	adds	r3, #255	; 0xff
 800fcf8:	2101      	movs	r1, #1
 800fcfa:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800fcfc:	4b93      	ldr	r3, [pc, #588]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fcfe:	4a9b      	ldr	r2, [pc, #620]	; (800ff6c <ProcessRadioRxDone+0xa84>)
 800fd00:	589a      	ldr	r2, [r3, r2]
 800fd02:	23b1      	movs	r3, #177	; 0xb1
 800fd04:	005b      	lsls	r3, r3, #1
 800fd06:	5cd3      	ldrb	r3, [r2, r3]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d108      	bne.n	800fd1e <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800fd0c:	4b8f      	ldr	r3, [pc, #572]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fd0e:	4a97      	ldr	r2, [pc, #604]	; (800ff6c <ProcessRadioRxDone+0xa84>)
 800fd10:	589a      	ldr	r2, [r3, r2]
 800fd12:	2330      	movs	r3, #48	; 0x30
 800fd14:	18fb      	adds	r3, r7, r3
 800fd16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fd18:	23b4      	movs	r3, #180	; 0xb4
 800fd1a:	005b      	lsls	r3, r3, #1
 800fd1c:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fd1e:	4b8b      	ldr	r3, [pc, #556]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fd20:	4a93      	ldr	r2, [pc, #588]	; (800ff70 <ProcessRadioRxDone+0xa88>)
 800fd22:	2101      	movs	r1, #1
 800fd24:	5499      	strb	r1, [r3, r2]
 800fd26:	e00a      	b.n	800fd3e <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800fd28:	4b88      	ldr	r3, [pc, #544]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fd2a:	4a90      	ldr	r2, [pc, #576]	; (800ff6c <ProcessRadioRxDone+0xa84>)
 800fd2c:	589a      	ldr	r2, [r3, r2]
 800fd2e:	234c      	movs	r3, #76	; 0x4c
 800fd30:	33ff      	adds	r3, #255	; 0xff
 800fd32:	2100      	movs	r1, #0
 800fd34:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fd36:	4b85      	ldr	r3, [pc, #532]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fd38:	4a8d      	ldr	r2, [pc, #564]	; (800ff70 <ProcessRadioRxDone+0xa88>)
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fd3e:	4b83      	ldr	r3, [pc, #524]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fd40:	4a89      	ldr	r2, [pc, #548]	; (800ff68 <ProcessRadioRxDone+0xa80>)
 800fd42:	5c98      	ldrb	r0, [r3, r2]
 800fd44:	4b81      	ldr	r3, [pc, #516]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fd46:	4a8b      	ldr	r2, [pc, #556]	; (800ff74 <ProcessRadioRxDone+0xa8c>)
 800fd48:	5c9a      	ldrb	r2, [r3, r2]
 800fd4a:	2330      	movs	r3, #48	; 0x30
 800fd4c:	18fb      	adds	r3, r7, r3
 800fd4e:	7b1b      	ldrb	r3, [r3, #12]
 800fd50:	1c19      	adds	r1, r3, #0
 800fd52:	f002 f94f 	bl	8011ff4 <RemoveMacCommands>

            switch( fType )
 800fd56:	1cbb      	adds	r3, r7, #2
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	2b03      	cmp	r3, #3
 800fd5c:	d100      	bne.n	800fd60 <ProcessRadioRxDone+0x878>
 800fd5e:	e073      	b.n	800fe48 <ProcessRadioRxDone+0x960>
 800fd60:	dd00      	ble.n	800fd64 <ProcessRadioRxDone+0x87c>
 800fd62:	e089      	b.n	800fe78 <ProcessRadioRxDone+0x990>
 800fd64:	2b02      	cmp	r3, #2
 800fd66:	d055      	beq.n	800fe14 <ProcessRadioRxDone+0x92c>
 800fd68:	dd00      	ble.n	800fd6c <ProcessRadioRxDone+0x884>
 800fd6a:	e085      	b.n	800fe78 <ProcessRadioRxDone+0x990>
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d002      	beq.n	800fd76 <ProcessRadioRxDone+0x88e>
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d030      	beq.n	800fdd6 <ProcessRadioRxDone+0x8ee>
 800fd74:	e080      	b.n	800fe78 <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fd76:	2030      	movs	r0, #48	; 0x30
 800fd78:	183b      	adds	r3, r7, r0
 800fd7a:	7b1b      	ldrb	r3, [r3, #12]
 800fd7c:	071b      	lsls	r3, r3, #28
 800fd7e:	0f1b      	lsrs	r3, r3, #28
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	001c      	movs	r4, r3
 800fd84:	4b71      	ldr	r3, [pc, #452]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fd86:	4a78      	ldr	r2, [pc, #480]	; (800ff68 <ProcessRadioRxDone+0xa80>)
 800fd88:	5c9b      	ldrb	r3, [r3, r2]
 800fd8a:	2277      	movs	r2, #119	; 0x77
 800fd8c:	18ba      	adds	r2, r7, r2
 800fd8e:	2100      	movs	r1, #0
 800fd90:	5651      	ldrsb	r1, [r2, r1]
 800fd92:	0005      	movs	r5, r0
 800fd94:	183a      	adds	r2, r7, r0
 800fd96:	3210      	adds	r2, #16
 800fd98:	0010      	movs	r0, r2
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	000b      	movs	r3, r1
 800fd9e:	0022      	movs	r2, r4
 800fda0:	2100      	movs	r1, #0
 800fda2:	f000 ff4f 	bl	8010c44 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fda6:	0028      	movs	r0, r5
 800fda8:	183b      	adds	r3, r7, r0
 800fdaa:	2220      	movs	r2, #32
 800fdac:	5c99      	ldrb	r1, [r3, r2]
 800fdae:	4b67      	ldr	r3, [pc, #412]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fdb0:	4a71      	ldr	r2, [pc, #452]	; (800ff78 <ProcessRadioRxDone+0xa90>)
 800fdb2:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fdb4:	183b      	adds	r3, r7, r0
 800fdb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdb8:	4b64      	ldr	r3, [pc, #400]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fdba:	4968      	ldr	r1, [pc, #416]	; (800ff5c <ProcessRadioRxDone+0xa74>)
 800fdbc:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fdbe:	183b      	adds	r3, r7, r0
 800fdc0:	2228      	movs	r2, #40	; 0x28
 800fdc2:	5c99      	ldrb	r1, [r3, r2]
 800fdc4:	4a61      	ldr	r2, [pc, #388]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fdc6:	2385      	movs	r3, #133	; 0x85
 800fdc8:	00db      	lsls	r3, r3, #3
 800fdca:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fdcc:	4b5f      	ldr	r3, [pc, #380]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fdce:	4a6b      	ldr	r2, [pc, #428]	; (800ff7c <ProcessRadioRxDone+0xa94>)
 800fdd0:	2101      	movs	r1, #1
 800fdd2:	5499      	strb	r1, [r3, r2]
                    break;
 800fdd4:	e057      	b.n	800fe86 <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fdd6:	2030      	movs	r0, #48	; 0x30
 800fdd8:	183b      	adds	r3, r7, r0
 800fdda:	7b1b      	ldrb	r3, [r3, #12]
 800fddc:	071b      	lsls	r3, r3, #28
 800fdde:	0f1b      	lsrs	r3, r3, #28
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	001c      	movs	r4, r3
 800fde4:	4b59      	ldr	r3, [pc, #356]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fde6:	4a60      	ldr	r2, [pc, #384]	; (800ff68 <ProcessRadioRxDone+0xa80>)
 800fde8:	5c9b      	ldrb	r3, [r3, r2]
 800fdea:	2277      	movs	r2, #119	; 0x77
 800fdec:	18ba      	adds	r2, r7, r2
 800fdee:	2100      	movs	r1, #0
 800fdf0:	5651      	ldrsb	r1, [r2, r1]
 800fdf2:	0005      	movs	r5, r0
 800fdf4:	183a      	adds	r2, r7, r0
 800fdf6:	3210      	adds	r2, #16
 800fdf8:	0010      	movs	r0, r2
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	000b      	movs	r3, r1
 800fdfe:	0022      	movs	r2, r4
 800fe00:	2100      	movs	r1, #0
 800fe02:	f000 ff1f 	bl	8010c44 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fe06:	197b      	adds	r3, r7, r5
 800fe08:	2220      	movs	r2, #32
 800fe0a:	5c99      	ldrb	r1, [r3, r2]
 800fe0c:	4b4f      	ldr	r3, [pc, #316]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fe0e:	4a5a      	ldr	r2, [pc, #360]	; (800ff78 <ProcessRadioRxDone+0xa90>)
 800fe10:	5499      	strb	r1, [r3, r2]
                    break;
 800fe12:	e038      	b.n	800fe86 <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800fe14:	2430      	movs	r4, #48	; 0x30
 800fe16:	193b      	adds	r3, r7, r4
 800fe18:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fe1a:	193b      	adds	r3, r7, r4
 800fe1c:	2228      	movs	r2, #40	; 0x28
 800fe1e:	5c99      	ldrb	r1, [r3, r2]
 800fe20:	4b4a      	ldr	r3, [pc, #296]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fe22:	4a51      	ldr	r2, [pc, #324]	; (800ff68 <ProcessRadioRxDone+0xa80>)
 800fe24:	5c9b      	ldrb	r3, [r3, r2]
 800fe26:	2277      	movs	r2, #119	; 0x77
 800fe28:	18ba      	adds	r2, r7, r2
 800fe2a:	7812      	ldrb	r2, [r2, #0]
 800fe2c:	b252      	sxtb	r2, r2
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	0013      	movs	r3, r2
 800fe32:	000a      	movs	r2, r1
 800fe34:	2100      	movs	r1, #0
 800fe36:	f000 ff05 	bl	8010c44 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fe3a:	193b      	adds	r3, r7, r4
 800fe3c:	2220      	movs	r2, #32
 800fe3e:	5c99      	ldrb	r1, [r3, r2]
 800fe40:	4b42      	ldr	r3, [pc, #264]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fe42:	4a4d      	ldr	r2, [pc, #308]	; (800ff78 <ProcessRadioRxDone+0xa90>)
 800fe44:	5499      	strb	r1, [r3, r2]
                    break;
 800fe46:	e01e      	b.n	800fe86 <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fe48:	2030      	movs	r0, #48	; 0x30
 800fe4a:	183b      	adds	r3, r7, r0
 800fe4c:	2220      	movs	r2, #32
 800fe4e:	5c99      	ldrb	r1, [r3, r2]
 800fe50:	4b3e      	ldr	r3, [pc, #248]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fe52:	4a49      	ldr	r2, [pc, #292]	; (800ff78 <ProcessRadioRxDone+0xa90>)
 800fe54:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fe56:	183b      	adds	r3, r7, r0
 800fe58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe5a:	4b3c      	ldr	r3, [pc, #240]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fe5c:	493f      	ldr	r1, [pc, #252]	; (800ff5c <ProcessRadioRxDone+0xa74>)
 800fe5e:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fe60:	183b      	adds	r3, r7, r0
 800fe62:	2228      	movs	r2, #40	; 0x28
 800fe64:	5c99      	ldrb	r1, [r3, r2]
 800fe66:	4a39      	ldr	r2, [pc, #228]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fe68:	2385      	movs	r3, #133	; 0x85
 800fe6a:	00db      	lsls	r3, r3, #3
 800fe6c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fe6e:	4b37      	ldr	r3, [pc, #220]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fe70:	4a42      	ldr	r2, [pc, #264]	; (800ff7c <ProcessRadioRxDone+0xa94>)
 800fe72:	2101      	movs	r1, #1
 800fe74:	5499      	strb	r1, [r3, r2]
                    break;
 800fe76:	e006      	b.n	800fe86 <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe78:	4b34      	ldr	r3, [pc, #208]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fe7a:	4a35      	ldr	r2, [pc, #212]	; (800ff50 <ProcessRadioRxDone+0xa68>)
 800fe7c:	2101      	movs	r1, #1
 800fe7e:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800fe80:	f7ff fb06 	bl	800f490 <PrepareRxDoneAbort>
                    break;
 800fe84:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fe86:	4b31      	ldr	r3, [pc, #196]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fe88:	4a3d      	ldr	r2, [pc, #244]	; (800ff80 <ProcessRadioRxDone+0xa98>)
 800fe8a:	5c99      	ldrb	r1, [r3, r2]
 800fe8c:	2002      	movs	r0, #2
 800fe8e:	4301      	orrs	r1, r0
 800fe90:	5499      	strb	r1, [r3, r2]

            break;
 800fe92:	e036      	b.n	800ff02 <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fe94:	2476      	movs	r4, #118	; 0x76
 800fe96:	193b      	adds	r3, r7, r4
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe9c:	18d1      	adds	r1, r2, r3
 800fe9e:	193b      	adds	r3, r7, r4
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	257a      	movs	r5, #122	; 0x7a
 800fea6:	197a      	adds	r2, r7, r5
 800fea8:	8812      	ldrh	r2, [r2, #0]
 800feaa:	1ad3      	subs	r3, r2, r3
 800feac:	b29a      	uxth	r2, r3
 800feae:	4b35      	ldr	r3, [pc, #212]	; (800ff84 <ProcessRadioRxDone+0xa9c>)
 800feb0:	0018      	movs	r0, r3
 800feb2:	f009 fbb1 	bl	8019618 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800feb6:	4b25      	ldr	r3, [pc, #148]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800feb8:	4a2d      	ldr	r2, [pc, #180]	; (800ff70 <ProcessRadioRxDone+0xa88>)
 800feba:	2103      	movs	r1, #3
 800febc:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800febe:	4b23      	ldr	r3, [pc, #140]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fec0:	4a23      	ldr	r2, [pc, #140]	; (800ff50 <ProcessRadioRxDone+0xa68>)
 800fec2:	2100      	movs	r1, #0
 800fec4:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fec6:	4b21      	ldr	r3, [pc, #132]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fec8:	4924      	ldr	r1, [pc, #144]	; (800ff5c <ProcessRadioRxDone+0xa74>)
 800feca:	4a2e      	ldr	r2, [pc, #184]	; (800ff84 <ProcessRadioRxDone+0xa9c>)
 800fecc:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fece:	197b      	adds	r3, r7, r5
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	b2da      	uxtb	r2, r3
 800fed4:	193b      	adds	r3, r7, r4
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	1ad3      	subs	r3, r2, r3
 800feda:	b2d9      	uxtb	r1, r3
 800fedc:	4a1b      	ldr	r2, [pc, #108]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fede:	2385      	movs	r3, #133	; 0x85
 800fee0:	00db      	lsls	r3, r3, #3
 800fee2:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fee4:	4b19      	ldr	r3, [pc, #100]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fee6:	4a26      	ldr	r2, [pc, #152]	; (800ff80 <ProcessRadioRxDone+0xa98>)
 800fee8:	5c99      	ldrb	r1, [r3, r2]
 800feea:	2002      	movs	r0, #2
 800feec:	4301      	orrs	r1, r0
 800feee:	5499      	strb	r1, [r3, r2]
            break;
 800fef0:	e007      	b.n	800ff02 <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fef2:	4b16      	ldr	r3, [pc, #88]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800fef4:	4a16      	ldr	r2, [pc, #88]	; (800ff50 <ProcessRadioRxDone+0xa68>)
 800fef6:	2101      	movs	r1, #1
 800fef8:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800fefa:	f7ff fac9 	bl	800f490 <PrepareRxDoneAbort>
            break;
 800fefe:	e000      	b.n	800ff02 <ProcessRadioRxDone+0xa1a>
            break;
 800ff00:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800ff02:	4b12      	ldr	r3, [pc, #72]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800ff04:	4a20      	ldr	r2, [pc, #128]	; (800ff88 <ProcessRadioRxDone+0xaa0>)
 800ff06:	5c9b      	ldrb	r3, [r3, r2]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d009      	beq.n	800ff20 <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800ff0c:	4a0f      	ldr	r2, [pc, #60]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800ff0e:	2388      	movs	r3, #136	; 0x88
 800ff10:	00db      	lsls	r3, r3, #3
 800ff12:	5cd3      	ldrb	r3, [r2, r3]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00d      	beq.n	800ff34 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800ff18:	2000      	movs	r0, #0
 800ff1a:	f000 fc5b 	bl	80107d4 <OnAckTimeoutTimerEvent>
 800ff1e:	e009      	b.n	800ff34 <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800ff20:	4b0a      	ldr	r3, [pc, #40]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800ff22:	4a12      	ldr	r2, [pc, #72]	; (800ff6c <ProcessRadioRxDone+0xa84>)
 800ff24:	589b      	ldr	r3, [r3, r2]
 800ff26:	227c      	movs	r2, #124	; 0x7c
 800ff28:	5c9b      	ldrb	r3, [r3, r2]
 800ff2a:	2b02      	cmp	r3, #2
 800ff2c:	d102      	bne.n	800ff34 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800ff2e:	2000      	movs	r0, #0
 800ff30:	f000 fc50 	bl	80107d4 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ff34:	4b05      	ldr	r3, [pc, #20]	; (800ff4c <ProcessRadioRxDone+0xa64>)
 800ff36:	4a12      	ldr	r2, [pc, #72]	; (800ff80 <ProcessRadioRxDone+0xa98>)
 800ff38:	5c99      	ldrb	r1, [r3, r2]
 800ff3a:	2020      	movs	r0, #32
 800ff3c:	4301      	orrs	r1, r0
 800ff3e:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800ff40:	f7ff f9c0 	bl	800f2c4 <UpdateRxSlotIdleState>
}
 800ff44:	46bd      	mov	sp, r7
 800ff46:	b023      	add	sp, #140	; 0x8c
 800ff48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff4a:	46c0      	nop			; (mov r8, r8)
 800ff4c:	200005b8 	.word	0x200005b8
 800ff50:	0000041d 	.word	0x0000041d
 800ff54:	0000041e 	.word	0x0000041e
 800ff58:	00000421 	.word	0x00000421
 800ff5c:	00000424 	.word	0x00000424
 800ff60:	0000042e 	.word	0x0000042e
 800ff64:	0000043d 	.word	0x0000043d
 800ff68:	0000042d 	.word	0x0000042d
 800ff6c:	00000484 	.word	0x00000484
 800ff70:	0000041c 	.word	0x0000041c
 800ff74:	0000043c 	.word	0x0000043c
 800ff78:	0000041f 	.word	0x0000041f
 800ff7c:	00000429 	.word	0x00000429
 800ff80:	00000481 	.word	0x00000481
 800ff84:	200007f0 	.word	0x200007f0
 800ff88:	00000414 	.word	0x00000414

0800ff8c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800ff90:	4b12      	ldr	r3, [pc, #72]	; (800ffdc <ProcessRadioTxTimeout+0x50>)
 800ff92:	4a13      	ldr	r2, [pc, #76]	; (800ffe0 <ProcessRadioTxTimeout+0x54>)
 800ff94:	589b      	ldr	r3, [r3, r2]
 800ff96:	227c      	movs	r2, #124	; 0x7c
 800ff98:	5c9b      	ldrb	r3, [r3, r2]
 800ff9a:	2b02      	cmp	r3, #2
 800ff9c:	d002      	beq.n	800ffa4 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800ff9e:	4b11      	ldr	r3, [pc, #68]	; (800ffe4 <ProcessRadioTxTimeout+0x58>)
 800ffa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa2:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800ffa4:	f7ff f98e 	bl	800f2c4 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800ffa8:	4b0c      	ldr	r3, [pc, #48]	; (800ffdc <ProcessRadioTxTimeout+0x50>)
 800ffaa:	4a0f      	ldr	r2, [pc, #60]	; (800ffe8 <ProcessRadioTxTimeout+0x5c>)
 800ffac:	2102      	movs	r1, #2
 800ffae:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ffb0:	2002      	movs	r0, #2
 800ffb2:	f005 fa5b 	bl	801546c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ffb6:	4b09      	ldr	r3, [pc, #36]	; (800ffdc <ProcessRadioTxTimeout+0x50>)
 800ffb8:	4a0c      	ldr	r2, [pc, #48]	; (800ffec <ProcessRadioTxTimeout+0x60>)
 800ffba:	5c9b      	ldrb	r3, [r3, r2]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d003      	beq.n	800ffc8 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800ffc0:	4b06      	ldr	r3, [pc, #24]	; (800ffdc <ProcessRadioTxTimeout+0x50>)
 800ffc2:	4a0b      	ldr	r2, [pc, #44]	; (800fff0 <ProcessRadioTxTimeout+0x64>)
 800ffc4:	2101      	movs	r1, #1
 800ffc6:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ffc8:	4b04      	ldr	r3, [pc, #16]	; (800ffdc <ProcessRadioTxTimeout+0x50>)
 800ffca:	4a0a      	ldr	r2, [pc, #40]	; (800fff4 <ProcessRadioTxTimeout+0x68>)
 800ffcc:	5c99      	ldrb	r1, [r3, r2]
 800ffce:	2020      	movs	r0, #32
 800ffd0:	4301      	orrs	r1, r0
 800ffd2:	5499      	strb	r1, [r3, r2]
}
 800ffd4:	46c0      	nop			; (mov r8, r8)
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	46c0      	nop			; (mov r8, r8)
 800ffdc:	200005b8 	.word	0x200005b8
 800ffe0:	00000484 	.word	0x00000484
 800ffe4:	0801fd7c 	.word	0x0801fd7c
 800ffe8:	0000043d 	.word	0x0000043d
 800ffec:	00000414 	.word	0x00000414
 800fff0:	00000413 	.word	0x00000413
 800fff4:	00000481 	.word	0x00000481

0800fff8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	0002      	movs	r2, r0
 8010000:	1dfb      	adds	r3, r7, #7
 8010002:	701a      	strb	r2, [r3, #0]
 8010004:	1dbb      	adds	r3, r7, #6
 8010006:	1c0a      	adds	r2, r1, #0
 8010008:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 801000a:	230f      	movs	r3, #15
 801000c:	18fb      	adds	r3, r7, r3
 801000e:	2200      	movs	r2, #0
 8010010:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8010012:	4b4a      	ldr	r3, [pc, #296]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 8010014:	4a4a      	ldr	r2, [pc, #296]	; (8010140 <HandleRadioRxErrorTimeout+0x148>)
 8010016:	589b      	ldr	r3, [r3, r2]
 8010018:	227c      	movs	r2, #124	; 0x7c
 801001a:	5c9b      	ldrb	r3, [r3, r2]
 801001c:	2b02      	cmp	r3, #2
 801001e:	d002      	beq.n	8010026 <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 8010020:	4b48      	ldr	r3, [pc, #288]	; (8010144 <HandleRadioRxErrorTimeout+0x14c>)
 8010022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010024:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010026:	f004 fcdd 	bl	80149e4 <LoRaMacClassBIsBeaconExpected>
 801002a:	1e03      	subs	r3, r0, #0
 801002c:	d009      	beq.n	8010042 <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 801002e:	2002      	movs	r0, #2
 8010030:	f004 fc90 	bl	8014954 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8010034:	2000      	movs	r0, #0
 8010036:	f004 fcb1 	bl	801499c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 801003a:	230f      	movs	r3, #15
 801003c:	18fb      	adds	r3, r7, r3
 801003e:	2201      	movs	r2, #1
 8010040:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8010042:	4b3e      	ldr	r3, [pc, #248]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 8010044:	4a3e      	ldr	r2, [pc, #248]	; (8010140 <HandleRadioRxErrorTimeout+0x148>)
 8010046:	589b      	ldr	r3, [r3, r2]
 8010048:	227c      	movs	r2, #124	; 0x7c
 801004a:	5c9b      	ldrb	r3, [r3, r2]
 801004c:	2b01      	cmp	r3, #1
 801004e:	d11b      	bne.n	8010088 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010050:	f004 fcce 	bl	80149f0 <LoRaMacClassBIsPingExpected>
 8010054:	1e03      	subs	r3, r0, #0
 8010056:	d009      	beq.n	801006c <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010058:	2000      	movs	r0, #0
 801005a:	f004 fc85 	bl	8014968 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 801005e:	2000      	movs	r0, #0
 8010060:	f004 fca4 	bl	80149ac <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8010064:	230f      	movs	r3, #15
 8010066:	18fb      	adds	r3, r7, r3
 8010068:	2201      	movs	r2, #1
 801006a:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 801006c:	f004 fcc6 	bl	80149fc <LoRaMacClassBIsMulticastExpected>
 8010070:	1e03      	subs	r3, r0, #0
 8010072:	d009      	beq.n	8010088 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010074:	2000      	movs	r0, #0
 8010076:	f004 fc81 	bl	801497c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801007a:	2000      	movs	r0, #0
 801007c:	f004 fc9e 	bl	80149bc <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010080:	230f      	movs	r3, #15
 8010082:	18fb      	adds	r3, r7, r3
 8010084:	2201      	movs	r2, #1
 8010086:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 8010088:	230f      	movs	r3, #15
 801008a:	18fb      	adds	r3, r7, r3
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	2201      	movs	r2, #1
 8010090:	4053      	eors	r3, r2
 8010092:	b2db      	uxtb	r3, r3
 8010094:	2b00      	cmp	r3, #0
 8010096:	d04b      	beq.n	8010130 <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010098:	4a28      	ldr	r2, [pc, #160]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 801009a:	2390      	movs	r3, #144	; 0x90
 801009c:	00db      	lsls	r3, r3, #3
 801009e:	5cd3      	ldrb	r3, [r2, r3]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d129      	bne.n	80100f8 <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 80100a4:	4b25      	ldr	r3, [pc, #148]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 80100a6:	4a28      	ldr	r2, [pc, #160]	; (8010148 <HandleRadioRxErrorTimeout+0x150>)
 80100a8:	5c9b      	ldrb	r3, [r3, r2]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d004      	beq.n	80100b8 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80100ae:	4b23      	ldr	r3, [pc, #140]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 80100b0:	1dfa      	adds	r2, r7, #7
 80100b2:	4926      	ldr	r1, [pc, #152]	; (801014c <HandleRadioRxErrorTimeout+0x154>)
 80100b4:	7812      	ldrb	r2, [r2, #0]
 80100b6:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80100b8:	1dfb      	adds	r3, r7, #7
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	0018      	movs	r0, r3
 80100be:	f005 f9d5 	bl	801546c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80100c2:	4b1e      	ldr	r3, [pc, #120]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 80100c4:	4a1e      	ldr	r2, [pc, #120]	; (8010140 <HandleRadioRxErrorTimeout+0x148>)
 80100c6:	589a      	ldr	r2, [r3, r2]
 80100c8:	23a8      	movs	r3, #168	; 0xa8
 80100ca:	005b      	lsls	r3, r3, #1
 80100cc:	58d3      	ldr	r3, [r2, r3]
 80100ce:	0018      	movs	r0, r3
 80100d0:	f00c ff9e 	bl	801d010 <UTIL_TIMER_GetElapsedTime>
 80100d4:	0001      	movs	r1, r0
 80100d6:	4a19      	ldr	r2, [pc, #100]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 80100d8:	23ed      	movs	r3, #237	; 0xed
 80100da:	009b      	lsls	r3, r3, #2
 80100dc:	58d3      	ldr	r3, [r2, r3]
 80100de:	4299      	cmp	r1, r3
 80100e0:	d326      	bcc.n	8010130 <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 80100e2:	4b1b      	ldr	r3, [pc, #108]	; (8010150 <HandleRadioRxErrorTimeout+0x158>)
 80100e4:	0018      	movs	r0, r3
 80100e6:	f00c fe4f 	bl	801cd88 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80100ea:	4b14      	ldr	r3, [pc, #80]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 80100ec:	4a19      	ldr	r2, [pc, #100]	; (8010154 <HandleRadioRxErrorTimeout+0x15c>)
 80100ee:	5c99      	ldrb	r1, [r3, r2]
 80100f0:	2020      	movs	r0, #32
 80100f2:	4301      	orrs	r1, r0
 80100f4:	5499      	strb	r1, [r3, r2]
 80100f6:	e01b      	b.n	8010130 <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80100f8:	4b10      	ldr	r3, [pc, #64]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 80100fa:	4a13      	ldr	r2, [pc, #76]	; (8010148 <HandleRadioRxErrorTimeout+0x150>)
 80100fc:	5c9b      	ldrb	r3, [r3, r2]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d004      	beq.n	801010c <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010102:	4b0e      	ldr	r3, [pc, #56]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 8010104:	1dba      	adds	r2, r7, #6
 8010106:	4911      	ldr	r1, [pc, #68]	; (801014c <HandleRadioRxErrorTimeout+0x154>)
 8010108:	7812      	ldrb	r2, [r2, #0]
 801010a:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 801010c:	1dbb      	adds	r3, r7, #6
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	0018      	movs	r0, r3
 8010112:	f005 f9ab 	bl	801546c <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8010116:	4b09      	ldr	r3, [pc, #36]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 8010118:	4a09      	ldr	r2, [pc, #36]	; (8010140 <HandleRadioRxErrorTimeout+0x148>)
 801011a:	589b      	ldr	r3, [r3, r2]
 801011c:	227c      	movs	r2, #124	; 0x7c
 801011e:	5c9b      	ldrb	r3, [r3, r2]
 8010120:	2b02      	cmp	r3, #2
 8010122:	d005      	beq.n	8010130 <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010124:	4b05      	ldr	r3, [pc, #20]	; (801013c <HandleRadioRxErrorTimeout+0x144>)
 8010126:	4a0b      	ldr	r2, [pc, #44]	; (8010154 <HandleRadioRxErrorTimeout+0x15c>)
 8010128:	5c99      	ldrb	r1, [r3, r2]
 801012a:	2020      	movs	r0, #32
 801012c:	4301      	orrs	r1, r0
 801012e:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 8010130:	f7ff f8c8 	bl	800f2c4 <UpdateRxSlotIdleState>
}
 8010134:	46c0      	nop			; (mov r8, r8)
 8010136:	46bd      	mov	sp, r7
 8010138:	b004      	add	sp, #16
 801013a:	bd80      	pop	{r7, pc}
 801013c:	200005b8 	.word	0x200005b8
 8010140:	00000484 	.word	0x00000484
 8010144:	0801fd7c 	.word	0x0801fd7c
 8010148:	00000414 	.word	0x00000414
 801014c:	0000043d 	.word	0x0000043d
 8010150:	20000950 	.word	0x20000950
 8010154:	00000481 	.word	0x00000481

08010158 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8010158:	b580      	push	{r7, lr}
 801015a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 801015c:	2106      	movs	r1, #6
 801015e:	2005      	movs	r0, #5
 8010160:	f7ff ff4a 	bl	800fff8 <HandleRadioRxErrorTimeout>
}
 8010164:	46c0      	nop			; (mov r8, r8)
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 801016a:	b580      	push	{r7, lr}
 801016c:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 801016e:	2104      	movs	r1, #4
 8010170:	2003      	movs	r0, #3
 8010172:	f7ff ff41 	bl	800fff8 <HandleRadioRxErrorTimeout>
}
 8010176:	46c0      	nop			; (mov r8, r8)
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010182:	f3ef 8310 	mrs	r3, PRIMASK
 8010186:	607b      	str	r3, [r7, #4]
  return(result);
 8010188:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 801018a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801018c:	b672      	cpsid	i
}
 801018e:	46c0      	nop			; (mov r8, r8)
    events = LoRaMacRadioEvents;
 8010190:	4b1f      	ldr	r3, [pc, #124]	; (8010210 <LoRaMacHandleIrqEvents+0x94>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8010196:	4b1e      	ldr	r3, [pc, #120]	; (8010210 <LoRaMacHandleIrqEvents+0x94>)
 8010198:	2200      	movs	r2, #0
 801019a:	601a      	str	r2, [r3, #0]
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	f383 8810 	msr	PRIMASK, r3
}
 80101a6:	46c0      	nop			; (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d02c      	beq.n	8010208 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 80101ae:	003b      	movs	r3, r7
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	2210      	movs	r2, #16
 80101b4:	4013      	ands	r3, r2
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d001      	beq.n	80101c0 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 80101bc:	f7ff f89e 	bl	800f2fc <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80101c0:	003b      	movs	r3, r7
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	2208      	movs	r2, #8
 80101c6:	4013      	ands	r3, r2
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d001      	beq.n	80101d2 <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 80101ce:	f7ff f98b 	bl	800f4e8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80101d2:	003b      	movs	r3, r7
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	2204      	movs	r2, #4
 80101d8:	4013      	ands	r3, r2
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d001      	beq.n	80101e4 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 80101e0:	f7ff fed4 	bl	800ff8c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 80101e4:	003b      	movs	r3, r7
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	2202      	movs	r2, #2
 80101ea:	4013      	ands	r3, r2
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d001      	beq.n	80101f6 <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 80101f2:	f7ff ffb1 	bl	8010158 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 80101f6:	003b      	movs	r3, r7
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2201      	movs	r2, #1
 80101fc:	4013      	ands	r3, r2
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	2b00      	cmp	r3, #0
 8010202:	d001      	beq.n	8010208 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 8010204:	f7ff ffb1 	bl	801016a <ProcessRadioRxTimeout>
        }
    }
}
 8010208:	46c0      	nop			; (mov r8, r8)
 801020a:	46bd      	mov	sp, r7
 801020c:	b004      	add	sp, #16
 801020e:	bd80      	pop	{r7, pc}
 8010210:	20000be8 	.word	0x20000be8

08010214 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	0002      	movs	r2, r0
 801021c:	1dfb      	adds	r3, r7, #7
 801021e:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 8010220:	4b04      	ldr	r3, [pc, #16]	; (8010234 <LoRaMacEnableRequests+0x20>)
 8010222:	1dfa      	adds	r2, r7, #7
 8010224:	4904      	ldr	r1, [pc, #16]	; (8010238 <LoRaMacEnableRequests+0x24>)
 8010226:	7812      	ldrb	r2, [r2, #0]
 8010228:	545a      	strb	r2, [r3, r1]
}
 801022a:	46c0      	nop			; (mov r8, r8)
 801022c:	46bd      	mov	sp, r7
 801022e:	b002      	add	sp, #8
 8010230:	bd80      	pop	{r7, pc}
 8010232:	46c0      	nop			; (mov r8, r8)
 8010234:	200005b8 	.word	0x200005b8
 8010238:	00000482 	.word	0x00000482

0801023c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8010242:	1d3b      	adds	r3, r7, #4
 8010244:	4a2c      	ldr	r2, [pc, #176]	; (80102f8 <LoRaMacHandleRequestEvents+0xbc>)
 8010246:	492d      	ldr	r1, [pc, #180]	; (80102fc <LoRaMacHandleRequestEvents+0xc0>)
 8010248:	5c52      	ldrb	r2, [r2, r1]
 801024a:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 801024c:	4a2a      	ldr	r2, [pc, #168]	; (80102f8 <LoRaMacHandleRequestEvents+0xbc>)
 801024e:	23d0      	movs	r3, #208	; 0xd0
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	58d3      	ldr	r3, [r2, r3]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d14a      	bne.n	80102ee <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010258:	4b27      	ldr	r3, [pc, #156]	; (80102f8 <LoRaMacHandleRequestEvents+0xbc>)
 801025a:	4a28      	ldr	r2, [pc, #160]	; (80102fc <LoRaMacHandleRequestEvents+0xc0>)
 801025c:	5c9b      	ldrb	r3, [r3, r2]
 801025e:	2201      	movs	r2, #1
 8010260:	4013      	ands	r3, r2
 8010262:	b2db      	uxtb	r3, r3
 8010264:	2b00      	cmp	r3, #0
 8010266:	d005      	beq.n	8010274 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010268:	4b23      	ldr	r3, [pc, #140]	; (80102f8 <LoRaMacHandleRequestEvents+0xbc>)
 801026a:	4a24      	ldr	r2, [pc, #144]	; (80102fc <LoRaMacHandleRequestEvents+0xc0>)
 801026c:	5c99      	ldrb	r1, [r3, r2]
 801026e:	2001      	movs	r0, #1
 8010270:	4381      	bics	r1, r0
 8010272:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010274:	4b20      	ldr	r3, [pc, #128]	; (80102f8 <LoRaMacHandleRequestEvents+0xbc>)
 8010276:	4a21      	ldr	r2, [pc, #132]	; (80102fc <LoRaMacHandleRequestEvents+0xc0>)
 8010278:	5c9b      	ldrb	r3, [r3, r2]
 801027a:	2204      	movs	r2, #4
 801027c:	4013      	ands	r3, r2
 801027e:	b2db      	uxtb	r3, r3
 8010280:	2b00      	cmp	r3, #0
 8010282:	d005      	beq.n	8010290 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010284:	4b1c      	ldr	r3, [pc, #112]	; (80102f8 <LoRaMacHandleRequestEvents+0xbc>)
 8010286:	4a1d      	ldr	r2, [pc, #116]	; (80102fc <LoRaMacHandleRequestEvents+0xc0>)
 8010288:	5c99      	ldrb	r1, [r3, r2]
 801028a:	2004      	movs	r0, #4
 801028c:	4381      	bics	r1, r0
 801028e:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010290:	2001      	movs	r0, #1
 8010292:	f7ff ffbf 	bl	8010214 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010296:	1d3b      	adds	r3, r7, #4
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	2201      	movs	r2, #1
 801029c:	4013      	ands	r3, r2
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d007      	beq.n	80102b4 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80102a4:	4a14      	ldr	r2, [pc, #80]	; (80102f8 <LoRaMacHandleRequestEvents+0xbc>)
 80102a6:	23d1      	movs	r3, #209	; 0xd1
 80102a8:	009b      	lsls	r3, r3, #2
 80102aa:	58d3      	ldr	r3, [r2, r3]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a14      	ldr	r2, [pc, #80]	; (8010300 <LoRaMacHandleRequestEvents+0xc4>)
 80102b0:	0010      	movs	r0, r2
 80102b2:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 80102b4:	1d3b      	adds	r3, r7, #4
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	2204      	movs	r2, #4
 80102ba:	4013      	ands	r3, r2
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00d      	beq.n	80102de <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80102c2:	4b10      	ldr	r3, [pc, #64]	; (8010304 <LoRaMacHandleRequestEvents+0xc8>)
 80102c4:	0018      	movs	r0, r3
 80102c6:	f005 f925 	bl	8015514 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80102ca:	f005 f985 	bl	80155d8 <LoRaMacConfirmQueueGetCnt>
 80102ce:	1e03      	subs	r3, r0, #0
 80102d0:	d005      	beq.n	80102de <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80102d2:	4b09      	ldr	r3, [pc, #36]	; (80102f8 <LoRaMacHandleRequestEvents+0xbc>)
 80102d4:	4a09      	ldr	r2, [pc, #36]	; (80102fc <LoRaMacHandleRequestEvents+0xc0>)
 80102d6:	5c99      	ldrb	r1, [r3, r2]
 80102d8:	2004      	movs	r0, #4
 80102da:	4301      	orrs	r1, r0
 80102dc:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80102de:	f004 fba8 	bl	8014a32 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80102e2:	4b05      	ldr	r3, [pc, #20]	; (80102f8 <LoRaMacHandleRequestEvents+0xbc>)
 80102e4:	4a05      	ldr	r2, [pc, #20]	; (80102fc <LoRaMacHandleRequestEvents+0xc0>)
 80102e6:	5c99      	ldrb	r1, [r3, r2]
 80102e8:	2020      	movs	r0, #32
 80102ea:	4381      	bics	r1, r0
 80102ec:	5499      	strb	r1, [r3, r2]
    }
}
 80102ee:	46c0      	nop			; (mov r8, r8)
 80102f0:	46bd      	mov	sp, r7
 80102f2:	b002      	add	sp, #8
 80102f4:	bd80      	pop	{r7, pc}
 80102f6:	46c0      	nop			; (mov r8, r8)
 80102f8:	200005b8 	.word	0x200005b8
 80102fc:	00000481 	.word	0x00000481
 8010300:	200009f4 	.word	0x200009f4
 8010304:	20000a08 	.word	0x20000a08

08010308 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 801030e:	4a0b      	ldr	r2, [pc, #44]	; (801033c <LoRaMacHandleScheduleUplinkEvent+0x34>)
 8010310:	23d0      	movs	r3, #208	; 0xd0
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	58d3      	ldr	r3, [r2, r3]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d10c      	bne.n	8010334 <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 801031a:	1dfb      	adds	r3, r7, #7
 801031c:	2200      	movs	r2, #0
 801031e:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8010320:	1dfb      	adds	r3, r7, #7
 8010322:	0018      	movs	r0, r3
 8010324:	f004 fe94 	bl	8015050 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8010328:	1dfb      	adds	r3, r7, #7
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d001      	beq.n	8010334 <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 8010330:	f000 fc78 	bl	8010c24 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 8010334:	46c0      	nop			; (mov r8, r8)
 8010336:	46bd      	mov	sp, r7
 8010338:	b002      	add	sp, #8
 801033a:	bd80      	pop	{r7, pc}
 801033c:	200005b8 	.word	0x200005b8

08010340 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b088      	sub	sp, #32
 8010344:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010346:	4b26      	ldr	r3, [pc, #152]	; (80103e0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010348:	4a26      	ldr	r2, [pc, #152]	; (80103e4 <LoRaMacHandleIndicationEvents+0xa4>)
 801034a:	5c9b      	ldrb	r3, [r3, r2]
 801034c:	2208      	movs	r2, #8
 801034e:	4013      	ands	r3, r2
 8010350:	b2db      	uxtb	r3, r3
 8010352:	2b00      	cmp	r3, #0
 8010354:	d00d      	beq.n	8010372 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010356:	4b22      	ldr	r3, [pc, #136]	; (80103e0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010358:	4a22      	ldr	r2, [pc, #136]	; (80103e4 <LoRaMacHandleIndicationEvents+0xa4>)
 801035a:	5c99      	ldrb	r1, [r3, r2]
 801035c:	2008      	movs	r0, #8
 801035e:	4381      	bics	r1, r0
 8010360:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8010362:	4a1f      	ldr	r2, [pc, #124]	; (80103e0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010364:	23d1      	movs	r3, #209	; 0xd1
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	58d3      	ldr	r3, [r2, r3]
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	4a1e      	ldr	r2, [pc, #120]	; (80103e8 <LoRaMacHandleIndicationEvents+0xa8>)
 801036e:	0010      	movs	r0, r2
 8010370:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8010372:	4b1b      	ldr	r3, [pc, #108]	; (80103e0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010374:	4a1b      	ldr	r2, [pc, #108]	; (80103e4 <LoRaMacHandleIndicationEvents+0xa4>)
 8010376:	5c9b      	ldrb	r3, [r3, r2]
 8010378:	2210      	movs	r2, #16
 801037a:	4013      	ands	r3, r2
 801037c:	b2db      	uxtb	r3, r3
 801037e:	2b00      	cmp	r3, #0
 8010380:	d013      	beq.n	80103aa <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8010382:	1d3b      	adds	r3, r7, #4
 8010384:	2207      	movs	r2, #7
 8010386:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010388:	1d3b      	adds	r3, r7, #4
 801038a:	2200      	movs	r2, #0
 801038c:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 801038e:	4a14      	ldr	r2, [pc, #80]	; (80103e0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010390:	23d1      	movs	r3, #209	; 0xd1
 8010392:	009b      	lsls	r3, r3, #2
 8010394:	58d3      	ldr	r3, [r2, r3]
 8010396:	68db      	ldr	r3, [r3, #12]
 8010398:	1d3a      	adds	r2, r7, #4
 801039a:	0010      	movs	r0, r2
 801039c:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 801039e:	4b10      	ldr	r3, [pc, #64]	; (80103e0 <LoRaMacHandleIndicationEvents+0xa0>)
 80103a0:	4a10      	ldr	r2, [pc, #64]	; (80103e4 <LoRaMacHandleIndicationEvents+0xa4>)
 80103a2:	5c99      	ldrb	r1, [r3, r2]
 80103a4:	2010      	movs	r0, #16
 80103a6:	4381      	bics	r1, r0
 80103a8:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80103aa:	4b0d      	ldr	r3, [pc, #52]	; (80103e0 <LoRaMacHandleIndicationEvents+0xa0>)
 80103ac:	4a0d      	ldr	r2, [pc, #52]	; (80103e4 <LoRaMacHandleIndicationEvents+0xa4>)
 80103ae:	5c9b      	ldrb	r3, [r3, r2]
 80103b0:	2202      	movs	r2, #2
 80103b2:	4013      	ands	r3, r2
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d00d      	beq.n	80103d6 <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80103ba:	4b09      	ldr	r3, [pc, #36]	; (80103e0 <LoRaMacHandleIndicationEvents+0xa0>)
 80103bc:	4a09      	ldr	r2, [pc, #36]	; (80103e4 <LoRaMacHandleIndicationEvents+0xa4>)
 80103be:	5c99      	ldrb	r1, [r3, r2]
 80103c0:	2002      	movs	r0, #2
 80103c2:	4381      	bics	r1, r0
 80103c4:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80103c6:	4a06      	ldr	r2, [pc, #24]	; (80103e0 <LoRaMacHandleIndicationEvents+0xa0>)
 80103c8:	23d1      	movs	r3, #209	; 0xd1
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	58d3      	ldr	r3, [r2, r3]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	4a06      	ldr	r2, [pc, #24]	; (80103ec <LoRaMacHandleIndicationEvents+0xac>)
 80103d2:	0010      	movs	r0, r2
 80103d4:	4798      	blx	r3
    }
}
 80103d6:	46c0      	nop			; (mov r8, r8)
 80103d8:	46bd      	mov	sp, r7
 80103da:	b008      	add	sp, #32
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	46c0      	nop			; (mov r8, r8)
 80103e0:	200005b8 	.word	0x200005b8
 80103e4:	00000481 	.word	0x00000481
 80103e8:	20000a1c 	.word	0x20000a1c
 80103ec:	200009d4 	.word	0x200009d4

080103f0 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 80103f0:	b590      	push	{r4, r7, lr}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80103f6:	4b39      	ldr	r3, [pc, #228]	; (80104dc <LoRaMacHandleMcpsRequest+0xec>)
 80103f8:	4a39      	ldr	r2, [pc, #228]	; (80104e0 <LoRaMacHandleMcpsRequest+0xf0>)
 80103fa:	5c9b      	ldrb	r3, [r3, r2]
 80103fc:	2201      	movs	r2, #1
 80103fe:	4013      	ands	r3, r2
 8010400:	b2db      	uxtb	r3, r3
 8010402:	2b00      	cmp	r3, #0
 8010404:	d066      	beq.n	80104d4 <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 8010406:	1dfb      	adds	r3, r7, #7
 8010408:	2200      	movs	r2, #0
 801040a:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 801040c:	1dbb      	adds	r3, r7, #6
 801040e:	2200      	movs	r2, #0
 8010410:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010412:	4b32      	ldr	r3, [pc, #200]	; (80104dc <LoRaMacHandleMcpsRequest+0xec>)
 8010414:	4a33      	ldr	r2, [pc, #204]	; (80104e4 <LoRaMacHandleMcpsRequest+0xf4>)
 8010416:	5c9b      	ldrb	r3, [r3, r2]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d004      	beq.n	8010426 <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 801041c:	4b2f      	ldr	r3, [pc, #188]	; (80104dc <LoRaMacHandleMcpsRequest+0xec>)
 801041e:	4a31      	ldr	r2, [pc, #196]	; (80104e4 <LoRaMacHandleMcpsRequest+0xf4>)
 8010420:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010422:	2b03      	cmp	r3, #3
 8010424:	d105      	bne.n	8010432 <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010426:	1dfc      	adds	r4, r7, #7
 8010428:	f002 fb70 	bl	8012b0c <CheckRetransUnconfirmedUplink>
 801042c:	0003      	movs	r3, r0
 801042e:	7023      	strb	r3, [r4, #0]
 8010430:	e026      	b.n	8010480 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010432:	4b2a      	ldr	r3, [pc, #168]	; (80104dc <LoRaMacHandleMcpsRequest+0xec>)
 8010434:	4a2b      	ldr	r2, [pc, #172]	; (80104e4 <LoRaMacHandleMcpsRequest+0xf4>)
 8010436:	5c9b      	ldrb	r3, [r3, r2]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d121      	bne.n	8010480 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 801043c:	4b27      	ldr	r3, [pc, #156]	; (80104dc <LoRaMacHandleMcpsRequest+0xec>)
 801043e:	4a2a      	ldr	r2, [pc, #168]	; (80104e8 <LoRaMacHandleMcpsRequest+0xf8>)
 8010440:	5c9b      	ldrb	r3, [r3, r2]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d019      	beq.n	801047a <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010446:	1dfc      	adds	r4, r7, #7
 8010448:	f002 fb94 	bl	8012b74 <CheckRetransConfirmedUplink>
 801044c:	0003      	movs	r3, r0
 801044e:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8010450:	4b22      	ldr	r3, [pc, #136]	; (80104dc <LoRaMacHandleMcpsRequest+0xec>)
 8010452:	4a26      	ldr	r2, [pc, #152]	; (80104ec <LoRaMacHandleMcpsRequest+0xfc>)
 8010454:	589a      	ldr	r2, [r3, r2]
 8010456:	23b1      	movs	r3, #177	; 0xb1
 8010458:	005b      	lsls	r3, r3, #1
 801045a:	5cd3      	ldrb	r3, [r2, r3]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d10f      	bne.n	8010480 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 8010460:	1dfb      	adds	r3, r7, #7
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	2201      	movs	r2, #1
 8010466:	4053      	eors	r3, r2
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d002      	beq.n	8010474 <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 801046e:	f002 fbf5 	bl	8012c5c <AckTimeoutRetriesProcess>
 8010472:	e005      	b.n	8010480 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8010474:	f002 fc40 	bl	8012cf8 <AckTimeoutRetriesFinalize>
 8010478:	e002      	b.n	8010480 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 801047a:	1dbb      	adds	r3, r7, #6
 801047c:	2201      	movs	r2, #1
 801047e:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 8010480:	1dfb      	adds	r3, r7, #7
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d011      	beq.n	80104ac <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010488:	4b19      	ldr	r3, [pc, #100]	; (80104f0 <LoRaMacHandleMcpsRequest+0x100>)
 801048a:	0018      	movs	r0, r3
 801048c:	f00c fc7c 	bl	801cd88 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010490:	4a12      	ldr	r2, [pc, #72]	; (80104dc <LoRaMacHandleMcpsRequest+0xec>)
 8010492:	23d0      	movs	r3, #208	; 0xd0
 8010494:	009b      	lsls	r3, r3, #2
 8010496:	58d3      	ldr	r3, [r2, r3]
 8010498:	2220      	movs	r2, #32
 801049a:	4393      	bics	r3, r2
 801049c:	0019      	movs	r1, r3
 801049e:	4a0f      	ldr	r2, [pc, #60]	; (80104dc <LoRaMacHandleMcpsRequest+0xec>)
 80104a0:	23d0      	movs	r3, #208	; 0xd0
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 80104a6:	f002 fb8d 	bl	8012bc4 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80104aa:	e013      	b.n	80104d4 <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 80104ac:	1dbb      	adds	r3, r7, #6
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	2201      	movs	r2, #1
 80104b2:	4053      	eors	r3, r2
 80104b4:	b2db      	uxtb	r3, r3
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00c      	beq.n	80104d4 <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80104ba:	4b08      	ldr	r3, [pc, #32]	; (80104dc <LoRaMacHandleMcpsRequest+0xec>)
 80104bc:	4a08      	ldr	r2, [pc, #32]	; (80104e0 <LoRaMacHandleMcpsRequest+0xf0>)
 80104be:	5c99      	ldrb	r1, [r3, r2]
 80104c0:	2020      	movs	r0, #32
 80104c2:	4381      	bics	r1, r0
 80104c4:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 80104c6:	4b05      	ldr	r3, [pc, #20]	; (80104dc <LoRaMacHandleMcpsRequest+0xec>)
 80104c8:	4a07      	ldr	r2, [pc, #28]	; (80104e8 <LoRaMacHandleMcpsRequest+0xf8>)
 80104ca:	2100      	movs	r1, #0
 80104cc:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 80104ce:	2000      	movs	r0, #0
 80104d0:	f000 f8a2 	bl	8010618 <OnTxDelayedTimerEvent>
}
 80104d4:	46c0      	nop			; (mov r8, r8)
 80104d6:	46bd      	mov	sp, r7
 80104d8:	b003      	add	sp, #12
 80104da:	bd90      	pop	{r4, r7, pc}
 80104dc:	200005b8 	.word	0x200005b8
 80104e0:	00000481 	.word	0x00000481
 80104e4:	0000043c 	.word	0x0000043c
 80104e8:	00000413 	.word	0x00000413
 80104ec:	00000484 	.word	0x00000484
 80104f0:	20000920 	.word	0x20000920

080104f4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80104f8:	4b1d      	ldr	r3, [pc, #116]	; (8010570 <LoRaMacHandleMlmeRequest+0x7c>)
 80104fa:	4a1e      	ldr	r2, [pc, #120]	; (8010574 <LoRaMacHandleMlmeRequest+0x80>)
 80104fc:	5c9b      	ldrb	r3, [r3, r2]
 80104fe:	2204      	movs	r2, #4
 8010500:	4013      	ands	r3, r2
 8010502:	b2db      	uxtb	r3, r3
 8010504:	2b00      	cmp	r3, #0
 8010506:	d02f      	beq.n	8010568 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010508:	2001      	movs	r0, #1
 801050a:	f004 ffe9 	bl	80154e0 <LoRaMacConfirmQueueIsCmdActive>
 801050e:	1e03      	subs	r3, r0, #0
 8010510:	d015      	beq.n	801053e <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010512:	2001      	movs	r0, #1
 8010514:	f004 ff7c 	bl	8015410 <LoRaMacConfirmQueueGetStatus>
 8010518:	1e03      	subs	r3, r0, #0
 801051a:	d104      	bne.n	8010526 <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 801051c:	4a14      	ldr	r2, [pc, #80]	; (8010570 <LoRaMacHandleMlmeRequest+0x7c>)
 801051e:	2382      	movs	r3, #130	; 0x82
 8010520:	00db      	lsls	r3, r3, #3
 8010522:	2100      	movs	r1, #0
 8010524:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010526:	4a12      	ldr	r2, [pc, #72]	; (8010570 <LoRaMacHandleMlmeRequest+0x7c>)
 8010528:	23d0      	movs	r3, #208	; 0xd0
 801052a:	009b      	lsls	r3, r3, #2
 801052c:	58d3      	ldr	r3, [r2, r3]
 801052e:	2202      	movs	r2, #2
 8010530:	4393      	bics	r3, r2
 8010532:	0019      	movs	r1, r3
 8010534:	4a0e      	ldr	r2, [pc, #56]	; (8010570 <LoRaMacHandleMlmeRequest+0x7c>)
 8010536:	23d0      	movs	r3, #208	; 0xd0
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 801053c:	e014      	b.n	8010568 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801053e:	2005      	movs	r0, #5
 8010540:	f004 ffce 	bl	80154e0 <LoRaMacConfirmQueueIsCmdActive>
 8010544:	1e03      	subs	r3, r0, #0
 8010546:	d104      	bne.n	8010552 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8010548:	2006      	movs	r0, #6
 801054a:	f004 ffc9 	bl	80154e0 <LoRaMacConfirmQueueIsCmdActive>
 801054e:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010550:	d00a      	beq.n	8010568 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010552:	4a07      	ldr	r2, [pc, #28]	; (8010570 <LoRaMacHandleMlmeRequest+0x7c>)
 8010554:	23d0      	movs	r3, #208	; 0xd0
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	58d3      	ldr	r3, [r2, r3]
 801055a:	2202      	movs	r2, #2
 801055c:	4393      	bics	r3, r2
 801055e:	0019      	movs	r1, r3
 8010560:	4a03      	ldr	r2, [pc, #12]	; (8010570 <LoRaMacHandleMlmeRequest+0x7c>)
 8010562:	23d0      	movs	r3, #208	; 0xd0
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	50d1      	str	r1, [r2, r3]
}
 8010568:	46c0      	nop			; (mov r8, r8)
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
 801056e:	46c0      	nop			; (mov r8, r8)
 8010570:	200005b8 	.word	0x200005b8
 8010574:	00000481 	.word	0x00000481

08010578 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010578:	b580      	push	{r7, lr}
 801057a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801057c:	200c      	movs	r0, #12
 801057e:	f004 ffaf 	bl	80154e0 <LoRaMacConfirmQueueIsCmdActive>
 8010582:	1e03      	subs	r3, r0, #0
 8010584:	d01c      	beq.n	80105c0 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010586:	4b10      	ldr	r3, [pc, #64]	; (80105c8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010588:	4a10      	ldr	r2, [pc, #64]	; (80105cc <LoRaMacCheckForBeaconAcquisition+0x54>)
 801058a:	5c9b      	ldrb	r3, [r3, r2]
 801058c:	2201      	movs	r2, #1
 801058e:	4013      	ands	r3, r2
 8010590:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010592:	2b00      	cmp	r3, #0
 8010594:	d114      	bne.n	80105c0 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010596:	4b0c      	ldr	r3, [pc, #48]	; (80105c8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010598:	4a0c      	ldr	r2, [pc, #48]	; (80105cc <LoRaMacCheckForBeaconAcquisition+0x54>)
 801059a:	5c9b      	ldrb	r3, [r3, r2]
 801059c:	2204      	movs	r2, #4
 801059e:	4013      	ands	r3, r2
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d00c      	beq.n	80105c0 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80105a6:	4a08      	ldr	r2, [pc, #32]	; (80105c8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 80105a8:	23d0      	movs	r3, #208	; 0xd0
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	58d3      	ldr	r3, [r2, r3]
 80105ae:	2202      	movs	r2, #2
 80105b0:	4393      	bics	r3, r2
 80105b2:	0019      	movs	r1, r3
 80105b4:	4a04      	ldr	r2, [pc, #16]	; (80105c8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 80105b6:	23d0      	movs	r3, #208	; 0xd0
 80105b8:	009b      	lsls	r3, r3, #2
 80105ba:	50d1      	str	r1, [r2, r3]
            return 0x01;
 80105bc:	2301      	movs	r3, #1
 80105be:	e000      	b.n	80105c2 <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 80105c0:	2300      	movs	r3, #0
}
 80105c2:	0018      	movs	r0, r3
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	200005b8 	.word	0x200005b8
 80105cc:	00000481 	.word	0x00000481

080105d0 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80105d4:	4a0f      	ldr	r2, [pc, #60]	; (8010614 <LoRaMacCheckForRxAbort+0x44>)
 80105d6:	23d0      	movs	r3, #208	; 0xd0
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	58d3      	ldr	r3, [r2, r3]
 80105dc:	2280      	movs	r2, #128	; 0x80
 80105de:	4013      	ands	r3, r2
 80105e0:	d015      	beq.n	801060e <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80105e2:	4a0c      	ldr	r2, [pc, #48]	; (8010614 <LoRaMacCheckForRxAbort+0x44>)
 80105e4:	23d0      	movs	r3, #208	; 0xd0
 80105e6:	009b      	lsls	r3, r3, #2
 80105e8:	58d3      	ldr	r3, [r2, r3]
 80105ea:	2280      	movs	r2, #128	; 0x80
 80105ec:	4393      	bics	r3, r2
 80105ee:	0019      	movs	r1, r3
 80105f0:	4a08      	ldr	r2, [pc, #32]	; (8010614 <LoRaMacCheckForRxAbort+0x44>)
 80105f2:	23d0      	movs	r3, #208	; 0xd0
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80105f8:	4a06      	ldr	r2, [pc, #24]	; (8010614 <LoRaMacCheckForRxAbort+0x44>)
 80105fa:	23d0      	movs	r3, #208	; 0xd0
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	58d3      	ldr	r3, [r2, r3]
 8010600:	2202      	movs	r2, #2
 8010602:	4393      	bics	r3, r2
 8010604:	0019      	movs	r1, r3
 8010606:	4a03      	ldr	r2, [pc, #12]	; (8010614 <LoRaMacCheckForRxAbort+0x44>)
 8010608:	23d0      	movs	r3, #208	; 0xd0
 801060a:	009b      	lsls	r3, r3, #2
 801060c:	50d1      	str	r1, [r2, r3]
    }
}
 801060e:	46c0      	nop			; (mov r8, r8)
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	200005b8 	.word	0x200005b8

08010618 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010620:	4b19      	ldr	r3, [pc, #100]	; (8010688 <OnTxDelayedTimerEvent+0x70>)
 8010622:	0018      	movs	r0, r3
 8010624:	f00c fbb0 	bl	801cd88 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010628:	4a18      	ldr	r2, [pc, #96]	; (801068c <OnTxDelayedTimerEvent+0x74>)
 801062a:	23d0      	movs	r3, #208	; 0xd0
 801062c:	009b      	lsls	r3, r3, #2
 801062e:	58d3      	ldr	r3, [r2, r3]
 8010630:	2220      	movs	r2, #32
 8010632:	4393      	bics	r3, r2
 8010634:	0019      	movs	r1, r3
 8010636:	4a15      	ldr	r2, [pc, #84]	; (801068c <OnTxDelayedTimerEvent+0x74>)
 8010638:	23d0      	movs	r3, #208	; 0xd0
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801063e:	2001      	movs	r0, #1
 8010640:	f001 fb5a 	bl	8011cf8 <ScheduleTx>
 8010644:	1e03      	subs	r3, r0, #0
 8010646:	d01a      	beq.n	801067e <OnTxDelayedTimerEvent+0x66>
 8010648:	2b0b      	cmp	r3, #11
 801064a:	d018      	beq.n	801067e <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801064c:	4b0f      	ldr	r3, [pc, #60]	; (801068c <OnTxDelayedTimerEvent+0x74>)
 801064e:	4a10      	ldr	r2, [pc, #64]	; (8010690 <OnTxDelayedTimerEvent+0x78>)
 8010650:	589b      	ldr	r3, [r3, r2]
 8010652:	2285      	movs	r2, #133	; 0x85
 8010654:	569b      	ldrsb	r3, [r3, r2]
 8010656:	b2d9      	uxtb	r1, r3
 8010658:	4b0c      	ldr	r3, [pc, #48]	; (801068c <OnTxDelayedTimerEvent+0x74>)
 801065a:	4a0e      	ldr	r2, [pc, #56]	; (8010694 <OnTxDelayedTimerEvent+0x7c>)
 801065c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801065e:	4b0b      	ldr	r3, [pc, #44]	; (801068c <OnTxDelayedTimerEvent+0x74>)
 8010660:	4a0d      	ldr	r2, [pc, #52]	; (8010698 <OnTxDelayedTimerEvent+0x80>)
 8010662:	5c99      	ldrb	r1, [r3, r2]
 8010664:	4b09      	ldr	r3, [pc, #36]	; (801068c <OnTxDelayedTimerEvent+0x74>)
 8010666:	4a0d      	ldr	r2, [pc, #52]	; (801069c <OnTxDelayedTimerEvent+0x84>)
 8010668:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 801066a:	4b08      	ldr	r3, [pc, #32]	; (801068c <OnTxDelayedTimerEvent+0x74>)
 801066c:	4a0c      	ldr	r2, [pc, #48]	; (80106a0 <OnTxDelayedTimerEvent+0x88>)
 801066e:	2109      	movs	r1, #9
 8010670:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010672:	2009      	movs	r0, #9
 8010674:	f004 fefa 	bl	801546c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010678:	f002 faa4 	bl	8012bc4 <StopRetransmission>
            break;
 801067c:	e000      	b.n	8010680 <OnTxDelayedTimerEvent+0x68>
            break;
 801067e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8010680:	46c0      	nop			; (mov r8, r8)
 8010682:	46bd      	mov	sp, r7
 8010684:	b002      	add	sp, #8
 8010686:	bd80      	pop	{r7, pc}
 8010688:	20000920 	.word	0x20000920
 801068c:	200005b8 	.word	0x200005b8
 8010690:	00000484 	.word	0x00000484
 8010694:	0000043e 	.word	0x0000043e
 8010698:	00000412 	.word	0x00000412
 801069c:	00000441 	.word	0x00000441
 80106a0:	0000043d 	.word	0x0000043d

080106a4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b082      	sub	sp, #8
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80106ac:	4b19      	ldr	r3, [pc, #100]	; (8010714 <OnRxWindow1TimerEvent+0x70>)
 80106ae:	4a1a      	ldr	r2, [pc, #104]	; (8010718 <OnRxWindow1TimerEvent+0x74>)
 80106b0:	5c99      	ldrb	r1, [r3, r2]
 80106b2:	4a18      	ldr	r2, [pc, #96]	; (8010714 <OnRxWindow1TimerEvent+0x70>)
 80106b4:	23ee      	movs	r3, #238	; 0xee
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80106ba:	4b16      	ldr	r3, [pc, #88]	; (8010714 <OnRxWindow1TimerEvent+0x70>)
 80106bc:	4a17      	ldr	r2, [pc, #92]	; (801071c <OnRxWindow1TimerEvent+0x78>)
 80106be:	589b      	ldr	r3, [r3, r2]
 80106c0:	22a5      	movs	r2, #165	; 0xa5
 80106c2:	5c9b      	ldrb	r3, [r3, r2]
 80106c4:	b259      	sxtb	r1, r3
 80106c6:	4b13      	ldr	r3, [pc, #76]	; (8010714 <OnRxWindow1TimerEvent+0x70>)
 80106c8:	4a15      	ldr	r2, [pc, #84]	; (8010720 <OnRxWindow1TimerEvent+0x7c>)
 80106ca:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80106cc:	4b11      	ldr	r3, [pc, #68]	; (8010714 <OnRxWindow1TimerEvent+0x70>)
 80106ce:	4a13      	ldr	r2, [pc, #76]	; (801071c <OnRxWindow1TimerEvent+0x78>)
 80106d0:	589b      	ldr	r3, [r3, r2]
 80106d2:	22b9      	movs	r2, #185	; 0xb9
 80106d4:	5c99      	ldrb	r1, [r3, r2]
 80106d6:	4a0f      	ldr	r2, [pc, #60]	; (8010714 <OnRxWindow1TimerEvent+0x70>)
 80106d8:	23f2      	movs	r3, #242	; 0xf2
 80106da:	009b      	lsls	r3, r3, #2
 80106dc:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80106de:	4b0d      	ldr	r3, [pc, #52]	; (8010714 <OnRxWindow1TimerEvent+0x70>)
 80106e0:	4a0e      	ldr	r2, [pc, #56]	; (801071c <OnRxWindow1TimerEvent+0x78>)
 80106e2:	589b      	ldr	r3, [r3, r2]
 80106e4:	22ca      	movs	r2, #202	; 0xca
 80106e6:	5c99      	ldrb	r1, [r3, r2]
 80106e8:	4b0a      	ldr	r3, [pc, #40]	; (8010714 <OnRxWindow1TimerEvent+0x70>)
 80106ea:	4a0e      	ldr	r2, [pc, #56]	; (8010724 <OnRxWindow1TimerEvent+0x80>)
 80106ec:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 80106ee:	4b09      	ldr	r3, [pc, #36]	; (8010714 <OnRxWindow1TimerEvent+0x70>)
 80106f0:	4a0d      	ldr	r2, [pc, #52]	; (8010728 <OnRxWindow1TimerEvent+0x84>)
 80106f2:	2100      	movs	r1, #0
 80106f4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80106f6:	4b07      	ldr	r3, [pc, #28]	; (8010714 <OnRxWindow1TimerEvent+0x70>)
 80106f8:	4a0c      	ldr	r2, [pc, #48]	; (801072c <OnRxWindow1TimerEvent+0x88>)
 80106fa:	2100      	movs	r1, #0
 80106fc:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80106fe:	4a0c      	ldr	r2, [pc, #48]	; (8010730 <OnRxWindow1TimerEvent+0x8c>)
 8010700:	4b0c      	ldr	r3, [pc, #48]	; (8010734 <OnRxWindow1TimerEvent+0x90>)
 8010702:	0011      	movs	r1, r2
 8010704:	0018      	movs	r0, r3
 8010706:	f001 fd9d 	bl	8012244 <RxWindowSetup>
}
 801070a:	46c0      	nop			; (mov r8, r8)
 801070c:	46bd      	mov	sp, r7
 801070e:	b002      	add	sp, #8
 8010710:	bd80      	pop	{r7, pc}
 8010712:	46c0      	nop			; (mov r8, r8)
 8010714:	200005b8 	.word	0x200005b8
 8010718:	00000415 	.word	0x00000415
 801071c:	00000484 	.word	0x00000484
 8010720:	000003bb 	.word	0x000003bb
 8010724:	000003c9 	.word	0x000003c9
 8010728:	000003ca 	.word	0x000003ca
 801072c:	000003cb 	.word	0x000003cb
 8010730:	20000970 	.word	0x20000970
 8010734:	20000938 	.word	0x20000938

08010738 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010740:	4a1c      	ldr	r2, [pc, #112]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 8010742:	2390      	movs	r3, #144	; 0x90
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	5cd3      	ldrb	r3, [r2, r3]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d02f      	beq.n	80107ac <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801074c:	4b19      	ldr	r3, [pc, #100]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 801074e:	4a1a      	ldr	r2, [pc, #104]	; (80107b8 <OnRxWindow2TimerEvent+0x80>)
 8010750:	5c99      	ldrb	r1, [r3, r2]
 8010752:	4a18      	ldr	r2, [pc, #96]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 8010754:	23f3      	movs	r3, #243	; 0xf3
 8010756:	009b      	lsls	r3, r3, #2
 8010758:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 801075a:	4b16      	ldr	r3, [pc, #88]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 801075c:	4a17      	ldr	r2, [pc, #92]	; (80107bc <OnRxWindow2TimerEvent+0x84>)
 801075e:	589b      	ldr	r3, [r3, r2]
 8010760:	22a8      	movs	r2, #168	; 0xa8
 8010762:	5899      	ldr	r1, [r3, r2]
 8010764:	4a13      	ldr	r2, [pc, #76]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 8010766:	23f4      	movs	r3, #244	; 0xf4
 8010768:	009b      	lsls	r3, r3, #2
 801076a:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801076c:	4b11      	ldr	r3, [pc, #68]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 801076e:	4a13      	ldr	r2, [pc, #76]	; (80107bc <OnRxWindow2TimerEvent+0x84>)
 8010770:	589b      	ldr	r3, [r3, r2]
 8010772:	22b9      	movs	r2, #185	; 0xb9
 8010774:	5c99      	ldrb	r1, [r3, r2]
 8010776:	4a0f      	ldr	r2, [pc, #60]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 8010778:	23f7      	movs	r3, #247	; 0xf7
 801077a:	009b      	lsls	r3, r3, #2
 801077c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801077e:	4b0d      	ldr	r3, [pc, #52]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 8010780:	4a0e      	ldr	r2, [pc, #56]	; (80107bc <OnRxWindow2TimerEvent+0x84>)
 8010782:	589b      	ldr	r3, [r3, r2]
 8010784:	22ca      	movs	r2, #202	; 0xca
 8010786:	5c99      	ldrb	r1, [r3, r2]
 8010788:	4b0a      	ldr	r3, [pc, #40]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 801078a:	4a0d      	ldr	r2, [pc, #52]	; (80107c0 <OnRxWindow2TimerEvent+0x88>)
 801078c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 801078e:	4b09      	ldr	r3, [pc, #36]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 8010790:	4a0c      	ldr	r2, [pc, #48]	; (80107c4 <OnRxWindow2TimerEvent+0x8c>)
 8010792:	2100      	movs	r1, #0
 8010794:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010796:	4b07      	ldr	r3, [pc, #28]	; (80107b4 <OnRxWindow2TimerEvent+0x7c>)
 8010798:	4a0b      	ldr	r2, [pc, #44]	; (80107c8 <OnRxWindow2TimerEvent+0x90>)
 801079a:	2101      	movs	r1, #1
 801079c:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 801079e:	4a0b      	ldr	r2, [pc, #44]	; (80107cc <OnRxWindow2TimerEvent+0x94>)
 80107a0:	4b0b      	ldr	r3, [pc, #44]	; (80107d0 <OnRxWindow2TimerEvent+0x98>)
 80107a2:	0011      	movs	r1, r2
 80107a4:	0018      	movs	r0, r3
 80107a6:	f001 fd4d 	bl	8012244 <RxWindowSetup>
 80107aa:	e000      	b.n	80107ae <OnRxWindow2TimerEvent+0x76>
        return;
 80107ac:	46c0      	nop			; (mov r8, r8)
}
 80107ae:	46bd      	mov	sp, r7
 80107b0:	b002      	add	sp, #8
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	200005b8 	.word	0x200005b8
 80107b8:	00000415 	.word	0x00000415
 80107bc:	00000484 	.word	0x00000484
 80107c0:	000003dd 	.word	0x000003dd
 80107c4:	000003de 	.word	0x000003de
 80107c8:	000003df 	.word	0x000003df
 80107cc:	20000984 	.word	0x20000984
 80107d0:	20000950 	.word	0x20000950

080107d4 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 80107dc:	4b18      	ldr	r3, [pc, #96]	; (8010840 <OnAckTimeoutTimerEvent+0x6c>)
 80107de:	0018      	movs	r0, r3
 80107e0:	f00c fad2 	bl	801cd88 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80107e4:	4b17      	ldr	r3, [pc, #92]	; (8010844 <OnAckTimeoutTimerEvent+0x70>)
 80107e6:	4a18      	ldr	r2, [pc, #96]	; (8010848 <OnAckTimeoutTimerEvent+0x74>)
 80107e8:	5c9b      	ldrb	r3, [r3, r2]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d003      	beq.n	80107f6 <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 80107ee:	4b15      	ldr	r3, [pc, #84]	; (8010844 <OnAckTimeoutTimerEvent+0x70>)
 80107f0:	4a16      	ldr	r2, [pc, #88]	; (801084c <OnAckTimeoutTimerEvent+0x78>)
 80107f2:	2101      	movs	r1, #1
 80107f4:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80107f6:	4b13      	ldr	r3, [pc, #76]	; (8010844 <OnAckTimeoutTimerEvent+0x70>)
 80107f8:	4a15      	ldr	r2, [pc, #84]	; (8010850 <OnAckTimeoutTimerEvent+0x7c>)
 80107fa:	589b      	ldr	r3, [r3, r2]
 80107fc:	227c      	movs	r2, #124	; 0x7c
 80107fe:	5c9b      	ldrb	r3, [r3, r2]
 8010800:	2b02      	cmp	r3, #2
 8010802:	d105      	bne.n	8010810 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010804:	4b0f      	ldr	r3, [pc, #60]	; (8010844 <OnAckTimeoutTimerEvent+0x70>)
 8010806:	4a13      	ldr	r2, [pc, #76]	; (8010854 <OnAckTimeoutTimerEvent+0x80>)
 8010808:	5c99      	ldrb	r1, [r3, r2]
 801080a:	2020      	movs	r0, #32
 801080c:	4301      	orrs	r1, r0
 801080e:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010810:	4a0c      	ldr	r2, [pc, #48]	; (8010844 <OnAckTimeoutTimerEvent+0x70>)
 8010812:	23d2      	movs	r3, #210	; 0xd2
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	58d3      	ldr	r3, [r2, r3]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00c      	beq.n	8010836 <OnAckTimeoutTimerEvent+0x62>
 801081c:	4a09      	ldr	r2, [pc, #36]	; (8010844 <OnAckTimeoutTimerEvent+0x70>)
 801081e:	23d2      	movs	r3, #210	; 0xd2
 8010820:	009b      	lsls	r3, r3, #2
 8010822:	58d3      	ldr	r3, [r2, r3]
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d005      	beq.n	8010836 <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801082a:	4a06      	ldr	r2, [pc, #24]	; (8010844 <OnAckTimeoutTimerEvent+0x70>)
 801082c:	23d2      	movs	r3, #210	; 0xd2
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	58d3      	ldr	r3, [r2, r3]
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	4798      	blx	r3
    }
}
 8010836:	46c0      	nop			; (mov r8, r8)
 8010838:	46bd      	mov	sp, r7
 801083a:	b002      	add	sp, #8
 801083c:	bd80      	pop	{r7, pc}
 801083e:	46c0      	nop			; (mov r8, r8)
 8010840:	200009b0 	.word	0x200009b0
 8010844:	200005b8 	.word	0x200005b8
 8010848:	00000414 	.word	0x00000414
 801084c:	00000413 	.word	0x00000413
 8010850:	00000484 	.word	0x00000484
 8010854:	00000481 	.word	0x00000481

08010858 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010858:	b590      	push	{r4, r7, lr}
 801085a:	b085      	sub	sp, #20
 801085c:	af00      	add	r7, sp, #0
 801085e:	60ba      	str	r2, [r7, #8]
 8010860:	607b      	str	r3, [r7, #4]
 8010862:	230f      	movs	r3, #15
 8010864:	18fb      	adds	r3, r7, r3
 8010866:	1c02      	adds	r2, r0, #0
 8010868:	701a      	strb	r2, [r3, #0]
 801086a:	230e      	movs	r3, #14
 801086c:	18fb      	adds	r3, r7, r3
 801086e:	1c0a      	adds	r2, r1, #0
 8010870:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d005      	beq.n	8010884 <GetFCntDown+0x2c>
 8010878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087a:	2b00      	cmp	r3, #0
 801087c:	d002      	beq.n	8010884 <GetFCntDown+0x2c>
 801087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010880:	2b00      	cmp	r3, #0
 8010882:	d101      	bne.n	8010888 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010884:	230a      	movs	r3, #10
 8010886:	e033      	b.n	80108f0 <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010888:	230f      	movs	r3, #15
 801088a:	18fb      	adds	r3, r7, r3
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d01a      	beq.n	80108c8 <GetFCntDown+0x70>
 8010892:	2b01      	cmp	r3, #1
 8010894:	d11c      	bne.n	80108d0 <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010896:	1d3b      	adds	r3, r7, #4
 8010898:	789b      	ldrb	r3, [r3, #2]
 801089a:	2b01      	cmp	r3, #1
 801089c:	d110      	bne.n	80108c0 <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 801089e:	220e      	movs	r2, #14
 80108a0:	18bb      	adds	r3, r7, r2
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d003      	beq.n	80108b0 <GetFCntDown+0x58>
 80108a8:	18bb      	adds	r3, r7, r2
 80108aa:	781b      	ldrb	r3, [r3, #0]
 80108ac:	2b03      	cmp	r3, #3
 80108ae:	d103      	bne.n	80108b8 <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	2202      	movs	r2, #2
 80108b4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 80108b6:	e00d      	b.n	80108d4 <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 80108b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ba:	2201      	movs	r2, #1
 80108bc:	701a      	strb	r2, [r3, #0]
            break;
 80108be:	e009      	b.n	80108d4 <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 80108c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c2:	2203      	movs	r2, #3
 80108c4:	701a      	strb	r2, [r3, #0]
            break;
 80108c6:	e005      	b.n	80108d4 <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80108c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ca:	2204      	movs	r2, #4
 80108cc:	701a      	strb	r2, [r3, #0]
            break;
 80108ce:	e001      	b.n	80108d4 <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80108d0:	2305      	movs	r3, #5
 80108d2:	e00d      	b.n	80108f0 <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80108d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d6:	7818      	ldrb	r0, [r3, #0]
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	89db      	ldrh	r3, [r3, #14]
 80108dc:	001c      	movs	r4, r3
 80108de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108e0:	2320      	movs	r3, #32
 80108e2:	18fb      	adds	r3, r7, r3
 80108e4:	8819      	ldrh	r1, [r3, #0]
 80108e6:	0013      	movs	r3, r2
 80108e8:	0022      	movs	r2, r4
 80108ea:	f005 faa1 	bl	8015e30 <LoRaMacCryptoGetFCntDown>
 80108ee:	0003      	movs	r3, r0
}
 80108f0:	0018      	movs	r0, r3
 80108f2:	46bd      	mov	sp, r7
 80108f4:	b005      	add	sp, #20
 80108f6:	bd90      	pop	{r4, r7, pc}

080108f8 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80108f8:	b5b0      	push	{r4, r5, r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	0002      	movs	r2, r0
 8010900:	1dfb      	adds	r3, r7, #7
 8010902:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010904:	230f      	movs	r3, #15
 8010906:	18fb      	adds	r3, r7, r3
 8010908:	2203      	movs	r2, #3
 801090a:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 801090c:	4b82      	ldr	r3, [pc, #520]	; (8010b18 <SwitchClass+0x220>)
 801090e:	4a83      	ldr	r2, [pc, #524]	; (8010b1c <SwitchClass+0x224>)
 8010910:	589b      	ldr	r3, [r3, r2]
 8010912:	227c      	movs	r2, #124	; 0x7c
 8010914:	5c9b      	ldrb	r3, [r3, r2]
 8010916:	2b02      	cmp	r3, #2
 8010918:	d100      	bne.n	801091c <SwitchClass+0x24>
 801091a:	e0de      	b.n	8010ada <SwitchClass+0x1e2>
 801091c:	dd00      	ble.n	8010920 <SwitchClass+0x28>
 801091e:	e0f4      	b.n	8010b0a <SwitchClass+0x212>
 8010920:	2b00      	cmp	r3, #0
 8010922:	d003      	beq.n	801092c <SwitchClass+0x34>
 8010924:	2b01      	cmp	r3, #1
 8010926:	d100      	bne.n	801092a <SwitchClass+0x32>
 8010928:	e0c2      	b.n	8010ab0 <SwitchClass+0x1b8>
 801092a:	e0ee      	b.n	8010b0a <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 801092c:	1dfb      	adds	r3, r7, #7
 801092e:	781b      	ldrb	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d10b      	bne.n	801094c <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8010934:	4b78      	ldr	r3, [pc, #480]	; (8010b18 <SwitchClass+0x220>)
 8010936:	4a79      	ldr	r2, [pc, #484]	; (8010b1c <SwitchClass+0x224>)
 8010938:	589a      	ldr	r2, [r3, r2]
 801093a:	4b77      	ldr	r3, [pc, #476]	; (8010b18 <SwitchClass+0x220>)
 801093c:	4977      	ldr	r1, [pc, #476]	; (8010b1c <SwitchClass+0x224>)
 801093e:	585b      	ldr	r3, [r3, r1]
 8010940:	20b0      	movs	r0, #176	; 0xb0
 8010942:	21a8      	movs	r1, #168	; 0xa8
 8010944:	181b      	adds	r3, r3, r0
 8010946:	1852      	adds	r2, r2, r1
 8010948:	ca03      	ldmia	r2!, {r0, r1}
 801094a:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 801094c:	1dfb      	adds	r3, r7, #7
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d113      	bne.n	801097c <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010954:	250f      	movs	r5, #15
 8010956:	197c      	adds	r4, r7, r5
 8010958:	1dfb      	adds	r3, r7, #7
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	0018      	movs	r0, r3
 801095e:	f004 f86d 	bl	8014a3c <LoRaMacClassBSwitchClass>
 8010962:	0003      	movs	r3, r0
 8010964:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 8010966:	197b      	adds	r3, r7, r5
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d106      	bne.n	801097c <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 801096e:	4b6a      	ldr	r3, [pc, #424]	; (8010b18 <SwitchClass+0x220>)
 8010970:	4a6a      	ldr	r2, [pc, #424]	; (8010b1c <SwitchClass+0x224>)
 8010972:	589b      	ldr	r3, [r3, r2]
 8010974:	1dfa      	adds	r2, r7, #7
 8010976:	217c      	movs	r1, #124	; 0x7c
 8010978:	7812      	ldrb	r2, [r2, #0]
 801097a:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 801097c:	1dfb      	adds	r3, r7, #7
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	2b02      	cmp	r3, #2
 8010982:	d000      	beq.n	8010986 <SwitchClass+0x8e>
 8010984:	e0bc      	b.n	8010b00 <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010986:	4b64      	ldr	r3, [pc, #400]	; (8010b18 <SwitchClass+0x220>)
 8010988:	4a64      	ldr	r2, [pc, #400]	; (8010b1c <SwitchClass+0x224>)
 801098a:	589b      	ldr	r3, [r3, r2]
 801098c:	1dfa      	adds	r2, r7, #7
 801098e:	217c      	movs	r1, #124	; 0x7c
 8010990:	7812      	ldrb	r2, [r2, #0]
 8010992:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010994:	4860      	ldr	r0, [pc, #384]	; (8010b18 <SwitchClass+0x220>)
 8010996:	23f8      	movs	r3, #248	; 0xf8
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	495f      	ldr	r1, [pc, #380]	; (8010b18 <SwitchClass+0x220>)
 801099c:	22f3      	movs	r2, #243	; 0xf3
 801099e:	0092      	lsls	r2, r2, #2
 80109a0:	18c3      	adds	r3, r0, r3
 80109a2:	188a      	adds	r2, r1, r2
 80109a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80109a6:	c313      	stmia	r3!, {r0, r1, r4}
 80109a8:	ca03      	ldmia	r2!, {r0, r1}
 80109aa:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80109ac:	4b5a      	ldr	r3, [pc, #360]	; (8010b18 <SwitchClass+0x220>)
 80109ae:	4a5c      	ldr	r2, [pc, #368]	; (8010b20 <SwitchClass+0x228>)
 80109b0:	2102      	movs	r1, #2
 80109b2:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80109b4:	230e      	movs	r3, #14
 80109b6:	18fb      	adds	r3, r7, r3
 80109b8:	2200      	movs	r2, #0
 80109ba:	701a      	strb	r2, [r3, #0]
 80109bc:	e064      	b.n	8010a88 <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80109be:	4b56      	ldr	r3, [pc, #344]	; (8010b18 <SwitchClass+0x220>)
 80109c0:	4a56      	ldr	r2, [pc, #344]	; (8010b1c <SwitchClass+0x224>)
 80109c2:	589a      	ldr	r2, [r3, r2]
 80109c4:	240e      	movs	r4, #14
 80109c6:	193b      	adds	r3, r7, r4
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	b25b      	sxtb	r3, r3
 80109cc:	2152      	movs	r1, #82	; 0x52
 80109ce:	202c      	movs	r0, #44	; 0x2c
 80109d0:	4343      	muls	r3, r0
 80109d2:	18d3      	adds	r3, r2, r3
 80109d4:	185b      	adds	r3, r3, r1
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d04c      	beq.n	8010a76 <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80109dc:	4b4e      	ldr	r3, [pc, #312]	; (8010b18 <SwitchClass+0x220>)
 80109de:	4a4f      	ldr	r2, [pc, #316]	; (8010b1c <SwitchClass+0x224>)
 80109e0:	5899      	ldr	r1, [r3, r2]
 80109e2:	193b      	adds	r3, r7, r4
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	b25b      	sxtb	r3, r3
 80109e8:	4a4b      	ldr	r2, [pc, #300]	; (8010b18 <SwitchClass+0x220>)
 80109ea:	484c      	ldr	r0, [pc, #304]	; (8010b1c <SwitchClass+0x224>)
 80109ec:	5812      	ldr	r2, [r2, r0]
 80109ee:	202c      	movs	r0, #44	; 0x2c
 80109f0:	4343      	muls	r3, r0
 80109f2:	18cb      	adds	r3, r1, r3
 80109f4:	3368      	adds	r3, #104	; 0x68
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	21b0      	movs	r1, #176	; 0xb0
 80109fa:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80109fc:	4b46      	ldr	r3, [pc, #280]	; (8010b18 <SwitchClass+0x220>)
 80109fe:	4a47      	ldr	r2, [pc, #284]	; (8010b1c <SwitchClass+0x224>)
 8010a00:	589a      	ldr	r2, [r3, r2]
 8010a02:	193b      	adds	r3, r7, r4
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	b25b      	sxtb	r3, r3
 8010a08:	216c      	movs	r1, #108	; 0x6c
 8010a0a:	202c      	movs	r0, #44	; 0x2c
 8010a0c:	4343      	muls	r3, r0
 8010a0e:	18d3      	adds	r3, r2, r3
 8010a10:	185b      	adds	r3, r3, r1
 8010a12:	2100      	movs	r1, #0
 8010a14:	5659      	ldrsb	r1, [r3, r1]
 8010a16:	4b40      	ldr	r3, [pc, #256]	; (8010b18 <SwitchClass+0x220>)
 8010a18:	4a40      	ldr	r2, [pc, #256]	; (8010b1c <SwitchClass+0x224>)
 8010a1a:	589b      	ldr	r3, [r3, r2]
 8010a1c:	b2c9      	uxtb	r1, r1
 8010a1e:	22b4      	movs	r2, #180	; 0xb4
 8010a20:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010a22:	4b3d      	ldr	r3, [pc, #244]	; (8010b18 <SwitchClass+0x220>)
 8010a24:	4a3f      	ldr	r2, [pc, #252]	; (8010b24 <SwitchClass+0x22c>)
 8010a26:	5c99      	ldrb	r1, [r3, r2]
 8010a28:	4a3b      	ldr	r2, [pc, #236]	; (8010b18 <SwitchClass+0x220>)
 8010a2a:	23f8      	movs	r3, #248	; 0xf8
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8010a30:	4b39      	ldr	r3, [pc, #228]	; (8010b18 <SwitchClass+0x220>)
 8010a32:	4a3a      	ldr	r2, [pc, #232]	; (8010b1c <SwitchClass+0x224>)
 8010a34:	589b      	ldr	r3, [r3, r2]
 8010a36:	22b0      	movs	r2, #176	; 0xb0
 8010a38:	5899      	ldr	r1, [r3, r2]
 8010a3a:	4a37      	ldr	r2, [pc, #220]	; (8010b18 <SwitchClass+0x220>)
 8010a3c:	23f9      	movs	r3, #249	; 0xf9
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010a42:	4b35      	ldr	r3, [pc, #212]	; (8010b18 <SwitchClass+0x220>)
 8010a44:	4a35      	ldr	r2, [pc, #212]	; (8010b1c <SwitchClass+0x224>)
 8010a46:	589b      	ldr	r3, [r3, r2]
 8010a48:	22b9      	movs	r2, #185	; 0xb9
 8010a4a:	5c99      	ldrb	r1, [r3, r2]
 8010a4c:	4a32      	ldr	r2, [pc, #200]	; (8010b18 <SwitchClass+0x220>)
 8010a4e:	23fc      	movs	r3, #252	; 0xfc
 8010a50:	009b      	lsls	r3, r3, #2
 8010a52:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010a54:	4b30      	ldr	r3, [pc, #192]	; (8010b18 <SwitchClass+0x220>)
 8010a56:	4a31      	ldr	r2, [pc, #196]	; (8010b1c <SwitchClass+0x224>)
 8010a58:	589b      	ldr	r3, [r3, r2]
 8010a5a:	22ca      	movs	r2, #202	; 0xca
 8010a5c:	5c99      	ldrb	r1, [r3, r2]
 8010a5e:	4b2e      	ldr	r3, [pc, #184]	; (8010b18 <SwitchClass+0x220>)
 8010a60:	4a31      	ldr	r2, [pc, #196]	; (8010b28 <SwitchClass+0x230>)
 8010a62:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010a64:	4b2c      	ldr	r3, [pc, #176]	; (8010b18 <SwitchClass+0x220>)
 8010a66:	4a2e      	ldr	r2, [pc, #184]	; (8010b20 <SwitchClass+0x228>)
 8010a68:	2103      	movs	r1, #3
 8010a6a:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010a6c:	4b2a      	ldr	r3, [pc, #168]	; (8010b18 <SwitchClass+0x220>)
 8010a6e:	4a2f      	ldr	r2, [pc, #188]	; (8010b2c <SwitchClass+0x234>)
 8010a70:	2101      	movs	r1, #1
 8010a72:	5499      	strb	r1, [r3, r2]
                        break;
 8010a74:	e00e      	b.n	8010a94 <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010a76:	210e      	movs	r1, #14
 8010a78:	187b      	adds	r3, r7, r1
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	b25b      	sxtb	r3, r3
 8010a7e:	b2db      	uxtb	r3, r3
 8010a80:	3301      	adds	r3, #1
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	187b      	adds	r3, r7, r1
 8010a86:	701a      	strb	r2, [r3, #0]
 8010a88:	230e      	movs	r3, #14
 8010a8a:	18fb      	adds	r3, r7, r3
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	b25b      	sxtb	r3, r3
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	dd94      	ble.n	80109be <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010a94:	4b20      	ldr	r3, [pc, #128]	; (8010b18 <SwitchClass+0x220>)
 8010a96:	4a26      	ldr	r2, [pc, #152]	; (8010b30 <SwitchClass+0x238>)
 8010a98:	2100      	movs	r1, #0
 8010a9a:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010a9c:	4b25      	ldr	r3, [pc, #148]	; (8010b34 <SwitchClass+0x23c>)
 8010a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010aa2:	f001 fc01 	bl	80122a8 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010aa6:	230f      	movs	r3, #15
 8010aa8:	18fb      	adds	r3, r7, r3
 8010aaa:	2200      	movs	r2, #0
 8010aac:	701a      	strb	r2, [r3, #0]
            }
            break;
 8010aae:	e027      	b.n	8010b00 <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010ab0:	250f      	movs	r5, #15
 8010ab2:	197c      	adds	r4, r7, r5
 8010ab4:	1dfb      	adds	r3, r7, #7
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	0018      	movs	r0, r3
 8010aba:	f003 ffbf 	bl	8014a3c <LoRaMacClassBSwitchClass>
 8010abe:	0003      	movs	r3, r0
 8010ac0:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 8010ac2:	197b      	adds	r3, r7, r5
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d11c      	bne.n	8010b04 <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010aca:	4b13      	ldr	r3, [pc, #76]	; (8010b18 <SwitchClass+0x220>)
 8010acc:	4a13      	ldr	r2, [pc, #76]	; (8010b1c <SwitchClass+0x224>)
 8010ace:	589b      	ldr	r3, [r3, r2]
 8010ad0:	1dfa      	adds	r2, r7, #7
 8010ad2:	217c      	movs	r1, #124	; 0x7c
 8010ad4:	7812      	ldrb	r2, [r2, #0]
 8010ad6:	545a      	strb	r2, [r3, r1]
            }
            break;
 8010ad8:	e014      	b.n	8010b04 <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010ada:	1dfb      	adds	r3, r7, #7
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d112      	bne.n	8010b08 <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010ae2:	4b0d      	ldr	r3, [pc, #52]	; (8010b18 <SwitchClass+0x220>)
 8010ae4:	4a0d      	ldr	r2, [pc, #52]	; (8010b1c <SwitchClass+0x224>)
 8010ae6:	589b      	ldr	r3, [r3, r2]
 8010ae8:	1dfa      	adds	r2, r7, #7
 8010aea:	217c      	movs	r1, #124	; 0x7c
 8010aec:	7812      	ldrb	r2, [r2, #0]
 8010aee:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010af0:	4b10      	ldr	r3, [pc, #64]	; (8010b34 <SwitchClass+0x23c>)
 8010af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af4:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010af6:	230f      	movs	r3, #15
 8010af8:	18fb      	adds	r3, r7, r3
 8010afa:	2200      	movs	r2, #0
 8010afc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8010afe:	e003      	b.n	8010b08 <SwitchClass+0x210>
            break;
 8010b00:	46c0      	nop			; (mov r8, r8)
 8010b02:	e002      	b.n	8010b0a <SwitchClass+0x212>
            break;
 8010b04:	46c0      	nop			; (mov r8, r8)
 8010b06:	e000      	b.n	8010b0a <SwitchClass+0x212>
            break;
 8010b08:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 8010b0a:	230f      	movs	r3, #15
 8010b0c:	18fb      	adds	r3, r7, r3
 8010b0e:	781b      	ldrb	r3, [r3, #0]
}
 8010b10:	0018      	movs	r0, r3
 8010b12:	46bd      	mov	sp, r7
 8010b14:	b004      	add	sp, #16
 8010b16:	bdb0      	pop	{r4, r5, r7, pc}
 8010b18:	200005b8 	.word	0x200005b8
 8010b1c:	00000484 	.word	0x00000484
 8010b20:	000003f3 	.word	0x000003f3
 8010b24:	00000415 	.word	0x00000415
 8010b28:	000003f1 	.word	0x000003f1
 8010b2c:	000003f2 	.word	0x000003f2
 8010b30:	00000414 	.word	0x00000414
 8010b34:	0801fd7c 	.word	0x0801fd7c

08010b38 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b086      	sub	sp, #24
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	0002      	movs	r2, r0
 8010b40:	1dfb      	adds	r3, r7, #7
 8010b42:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010b44:	4b17      	ldr	r3, [pc, #92]	; (8010ba4 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010b46:	4a18      	ldr	r2, [pc, #96]	; (8010ba8 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010b48:	589b      	ldr	r3, [r3, r2]
 8010b4a:	22b8      	movs	r2, #184	; 0xb8
 8010b4c:	5c9a      	ldrb	r2, [r3, r2]
 8010b4e:	2110      	movs	r1, #16
 8010b50:	187b      	adds	r3, r7, r1
 8010b52:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 8010b54:	187b      	adds	r3, r7, r1
 8010b56:	1dfa      	adds	r2, r7, #7
 8010b58:	7812      	ldrb	r2, [r2, #0]
 8010b5a:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010b5c:	187b      	adds	r3, r7, r1
 8010b5e:	220d      	movs	r2, #13
 8010b60:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8010b62:	4b10      	ldr	r3, [pc, #64]	; (8010ba4 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010b64:	4a10      	ldr	r2, [pc, #64]	; (8010ba8 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010b66:	589b      	ldr	r3, [r3, r2]
 8010b68:	22ca      	movs	r2, #202	; 0xca
 8010b6a:	5c9b      	ldrb	r3, [r3, r2]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d002      	beq.n	8010b76 <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010b70:	187b      	adds	r3, r7, r1
 8010b72:	220e      	movs	r2, #14
 8010b74:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010b76:	4b0b      	ldr	r3, [pc, #44]	; (8010ba4 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010b78:	4a0b      	ldr	r2, [pc, #44]	; (8010ba8 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010b7a:	589b      	ldr	r3, [r3, r2]
 8010b7c:	781b      	ldrb	r3, [r3, #0]
 8010b7e:	2210      	movs	r2, #16
 8010b80:	18ba      	adds	r2, r7, r2
 8010b82:	0011      	movs	r1, r2
 8010b84:	0018      	movs	r0, r3
 8010b86:	f006 f8c8 	bl	8016d1a <RegionGetPhyParam>
 8010b8a:	0003      	movs	r3, r0
 8010b8c:	001a      	movs	r2, r3
 8010b8e:	210c      	movs	r1, #12
 8010b90:	187b      	adds	r3, r7, r1
 8010b92:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 8010b94:	187b      	adds	r3, r7, r1
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	b2db      	uxtb	r3, r3
}
 8010b9a:	0018      	movs	r0, r3
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	b006      	add	sp, #24
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	46c0      	nop			; (mov r8, r8)
 8010ba4:	200005b8 	.word	0x200005b8
 8010ba8:	00000484 	.word	0x00000484

08010bac <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010bac:	b5b0      	push	{r4, r5, r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	0004      	movs	r4, r0
 8010bb4:	0008      	movs	r0, r1
 8010bb6:	0011      	movs	r1, r2
 8010bb8:	1dfb      	adds	r3, r7, #7
 8010bba:	1c22      	adds	r2, r4, #0
 8010bbc:	701a      	strb	r2, [r3, #0]
 8010bbe:	1dbb      	adds	r3, r7, #6
 8010bc0:	1c02      	adds	r2, r0, #0
 8010bc2:	701a      	strb	r2, [r3, #0]
 8010bc4:	1d7b      	adds	r3, r7, #5
 8010bc6:	1c0a      	adds	r2, r1, #0
 8010bc8:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 8010bca:	250e      	movs	r5, #14
 8010bcc:	197b      	adds	r3, r7, r5
 8010bce:	2200      	movs	r2, #0
 8010bd0:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 8010bd2:	240c      	movs	r4, #12
 8010bd4:	193b      	adds	r3, r7, r4
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010bda:	1dbb      	adds	r3, r7, #6
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	b25b      	sxtb	r3, r3
 8010be0:	0018      	movs	r0, r3
 8010be2:	f7ff ffa9 	bl	8010b38 <GetMaxAppPayloadWithoutFOptsLength>
 8010be6:	0003      	movs	r3, r0
 8010be8:	001a      	movs	r2, r3
 8010bea:	0028      	movs	r0, r5
 8010bec:	183b      	adds	r3, r7, r0
 8010bee:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010bf0:	1dfb      	adds	r3, r7, #7
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	b299      	uxth	r1, r3
 8010bf6:	1d7b      	adds	r3, r7, #5
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	193b      	adds	r3, r7, r4
 8010bfe:	188a      	adds	r2, r1, r2
 8010c00:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010c02:	193a      	adds	r2, r7, r4
 8010c04:	183b      	adds	r3, r7, r0
 8010c06:	8812      	ldrh	r2, [r2, #0]
 8010c08:	881b      	ldrh	r3, [r3, #0]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d805      	bhi.n	8010c1a <ValidatePayloadLength+0x6e>
 8010c0e:	193b      	adds	r3, r7, r4
 8010c10:	881b      	ldrh	r3, [r3, #0]
 8010c12:	2bff      	cmp	r3, #255	; 0xff
 8010c14:	d801      	bhi.n	8010c1a <ValidatePayloadLength+0x6e>
    {
        return true;
 8010c16:	2301      	movs	r3, #1
 8010c18:	e000      	b.n	8010c1c <ValidatePayloadLength+0x70>
    }
    return false;
 8010c1a:	2300      	movs	r3, #0
}
 8010c1c:	0018      	movs	r0, r3
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	b004      	add	sp, #16
 8010c22:	bdb0      	pop	{r4, r5, r7, pc}

08010c24 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8010c28:	4b04      	ldr	r3, [pc, #16]	; (8010c3c <SetMlmeScheduleUplinkIndication+0x18>)
 8010c2a:	4a05      	ldr	r2, [pc, #20]	; (8010c40 <SetMlmeScheduleUplinkIndication+0x1c>)
 8010c2c:	5c99      	ldrb	r1, [r3, r2]
 8010c2e:	2010      	movs	r0, #16
 8010c30:	4301      	orrs	r1, r0
 8010c32:	5499      	strb	r1, [r3, r2]
}
 8010c34:	46c0      	nop			; (mov r8, r8)
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	46c0      	nop			; (mov r8, r8)
 8010c3c:	200005b8 	.word	0x200005b8
 8010c40:	00000481 	.word	0x00000481

08010c44 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c46:	b0a5      	sub	sp, #148	; 0x94
 8010c48:	af02      	add	r7, sp, #8
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	000c      	movs	r4, r1
 8010c4e:	0010      	movs	r0, r2
 8010c50:	0019      	movs	r1, r3
 8010c52:	1cfb      	adds	r3, r7, #3
 8010c54:	1c22      	adds	r2, r4, #0
 8010c56:	701a      	strb	r2, [r3, #0]
 8010c58:	1cbb      	adds	r3, r7, #2
 8010c5a:	1c02      	adds	r2, r0, #0
 8010c5c:	701a      	strb	r2, [r3, #0]
 8010c5e:	1c7b      	adds	r3, r7, #1
 8010c60:	1c0a      	adds	r2, r1, #0
 8010c62:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 8010c64:	236b      	movs	r3, #107	; 0x6b
 8010c66:	18fb      	adds	r3, r7, r3
 8010c68:	2200      	movs	r2, #0
 8010c6a:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 8010c6c:	2387      	movs	r3, #135	; 0x87
 8010c6e:	18fb      	adds	r3, r7, r3
 8010c70:	2200      	movs	r2, #0
 8010c72:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010c74:	2368      	movs	r3, #104	; 0x68
 8010c76:	18fb      	adds	r3, r7, r3
 8010c78:	2200      	movs	r2, #0
 8010c7a:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 8010c7c:	f000 fd58 	bl	8011730 <ProcessMacCommands+0xaec>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010c80:	1cfb      	adds	r3, r7, #3
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	18d3      	adds	r3, r2, r3
 8010c88:	781b      	ldrb	r3, [r3, #0]
 8010c8a:	0018      	movs	r0, r3
 8010c8c:	f004 fa06 	bl	801509c <LoRaMacCommandsGetCmdSize>
 8010c90:	0003      	movs	r3, r0
 8010c92:	001a      	movs	r2, r3
 8010c94:	1cfb      	adds	r3, r7, #3
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	18d2      	adds	r2, r2, r3
 8010c9a:	1cbb      	adds	r3, r7, #2
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	dd01      	ble.n	8010ca6 <ProcessMacCommands+0x62>
 8010ca2:	f000 fd4e 	bl	8011742 <ProcessMacCommands+0xafe>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010ca6:	1cfb      	adds	r3, r7, #3
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	1cfa      	adds	r2, r7, #3
 8010cac:	1c59      	adds	r1, r3, #1
 8010cae:	7011      	strb	r1, [r2, #0]
 8010cb0:	001a      	movs	r2, r3
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	189b      	adds	r3, r3, r2
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	2b13      	cmp	r3, #19
 8010cba:	d901      	bls.n	8010cc0 <ProcessMacCommands+0x7c>
 8010cbc:	f000 fd43 	bl	8011746 <ProcessMacCommands+0xb02>
 8010cc0:	009a      	lsls	r2, r3, #2
 8010cc2:	4bee      	ldr	r3, [pc, #952]	; (801107c <ProcessMacCommands+0x438>)
 8010cc4:	18d3      	adds	r3, r2, r3
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010cca:	2004      	movs	r0, #4
 8010ccc:	f004 fc08 	bl	80154e0 <LoRaMacConfirmQueueIsCmdActive>
 8010cd0:	1e03      	subs	r3, r0, #0
 8010cd2:	d101      	bne.n	8010cd8 <ProcessMacCommands+0x94>
 8010cd4:	f000 fd2c 	bl	8011730 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010cd8:	2104      	movs	r1, #4
 8010cda:	2000      	movs	r0, #0
 8010cdc:	f004 fb64 	bl	80153a8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010ce0:	1cfb      	adds	r3, r7, #3
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	1cfa      	adds	r2, r7, #3
 8010ce6:	1c59      	adds	r1, r3, #1
 8010ce8:	7011      	strb	r1, [r2, #0]
 8010cea:	001a      	movs	r2, r3
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	189b      	adds	r3, r3, r2
 8010cf0:	7819      	ldrb	r1, [r3, #0]
 8010cf2:	4ae3      	ldr	r2, [pc, #908]	; (8011080 <ProcessMacCommands+0x43c>)
 8010cf4:	238b      	movs	r3, #139	; 0x8b
 8010cf6:	00db      	lsls	r3, r3, #3
 8010cf8:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010cfa:	1cfb      	adds	r3, r7, #3
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	1cfa      	adds	r2, r7, #3
 8010d00:	1c59      	adds	r1, r3, #1
 8010d02:	7011      	strb	r1, [r2, #0]
 8010d04:	001a      	movs	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	189b      	adds	r3, r3, r2
 8010d0a:	7819      	ldrb	r1, [r3, #0]
 8010d0c:	4bdc      	ldr	r3, [pc, #880]	; (8011080 <ProcessMacCommands+0x43c>)
 8010d0e:	4add      	ldr	r2, [pc, #884]	; (8011084 <ProcessMacCommands+0x440>)
 8010d10:	5499      	strb	r1, [r3, r2]
                }
                break;
 8010d12:	f000 fd0d 	bl	8011730 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010d16:	2657      	movs	r6, #87	; 0x57
 8010d18:	19bb      	adds	r3, r7, r6
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 8010d1e:	2456      	movs	r4, #86	; 0x56
 8010d20:	193b      	adds	r3, r7, r4
 8010d22:	2200      	movs	r2, #0
 8010d24:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 8010d26:	2555      	movs	r5, #85	; 0x55
 8010d28:	197b      	adds	r3, r7, r5
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8010d2e:	2354      	movs	r3, #84	; 0x54
 8010d30:	18fb      	adds	r3, r7, r3
 8010d32:	2200      	movs	r2, #0
 8010d34:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 8010d36:	2187      	movs	r1, #135	; 0x87
 8010d38:	187b      	adds	r3, r7, r1
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	2201      	movs	r2, #1
 8010d3e:	4053      	eors	r3, r2
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d100      	bne.n	8010d48 <ProcessMacCommands+0x104>
 8010d46:	e09d      	b.n	8010e84 <ProcessMacCommands+0x240>
                {
                    adrBlockFound = true;
 8010d48:	187b      	adds	r3, r7, r1
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010d4e:	1cfb      	adds	r3, r7, #3
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	3b01      	subs	r3, #1
 8010d54:	687a      	ldr	r2, [r7, #4]
 8010d56:	18d2      	adds	r2, r2, r3
 8010d58:	2158      	movs	r1, #88	; 0x58
 8010d5a:	187b      	adds	r3, r7, r1
 8010d5c:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010d5e:	1cba      	adds	r2, r7, #2
 8010d60:	1cfb      	adds	r3, r7, #3
 8010d62:	7812      	ldrb	r2, [r2, #0]
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	1ad3      	subs	r3, r2, r3
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	b2da      	uxtb	r2, r3
 8010d6e:	000d      	movs	r5, r1
 8010d70:	197b      	adds	r3, r7, r5
 8010d72:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8010d74:	4bc2      	ldr	r3, [pc, #776]	; (8011080 <ProcessMacCommands+0x43c>)
 8010d76:	4ac4      	ldr	r2, [pc, #784]	; (8011088 <ProcessMacCommands+0x444>)
 8010d78:	589b      	ldr	r3, [r3, r2]
 8010d7a:	227e      	movs	r2, #126	; 0x7e
 8010d7c:	5c9a      	ldrb	r2, [r3, r2]
 8010d7e:	197b      	adds	r3, r7, r5
 8010d80:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010d82:	4bbf      	ldr	r3, [pc, #764]	; (8011080 <ProcessMacCommands+0x43c>)
 8010d84:	4ac0      	ldr	r2, [pc, #768]	; (8011088 <ProcessMacCommands+0x444>)
 8010d86:	589b      	ldr	r3, [r3, r2]
 8010d88:	22b8      	movs	r2, #184	; 0xb8
 8010d8a:	5c9a      	ldrb	r2, [r3, r2]
 8010d8c:	197b      	adds	r3, r7, r5
 8010d8e:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010d90:	4bbb      	ldr	r3, [pc, #748]	; (8011080 <ProcessMacCommands+0x43c>)
 8010d92:	4abd      	ldr	r2, [pc, #756]	; (8011088 <ProcessMacCommands+0x444>)
 8010d94:	589b      	ldr	r3, [r3, r2]
 8010d96:	2285      	movs	r2, #133	; 0x85
 8010d98:	569a      	ldrsb	r2, [r3, r2]
 8010d9a:	197b      	adds	r3, r7, r5
 8010d9c:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010d9e:	4bb8      	ldr	r3, [pc, #736]	; (8011080 <ProcessMacCommands+0x43c>)
 8010da0:	4ab9      	ldr	r2, [pc, #740]	; (8011088 <ProcessMacCommands+0x444>)
 8010da2:	589b      	ldr	r3, [r3, r2]
 8010da4:	2284      	movs	r2, #132	; 0x84
 8010da6:	569a      	ldrsb	r2, [r3, r2]
 8010da8:	197b      	adds	r3, r7, r5
 8010daa:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8010dac:	4bb4      	ldr	r3, [pc, #720]	; (8011080 <ProcessMacCommands+0x43c>)
 8010dae:	4ab6      	ldr	r2, [pc, #728]	; (8011088 <ProcessMacCommands+0x444>)
 8010db0:	589b      	ldr	r3, [r3, r2]
 8010db2:	22a4      	movs	r2, #164	; 0xa4
 8010db4:	5c9a      	ldrb	r2, [r3, r2]
 8010db6:	197b      	adds	r3, r7, r5
 8010db8:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8010dba:	4bb1      	ldr	r3, [pc, #708]	; (8011080 <ProcessMacCommands+0x43c>)
 8010dbc:	4ab2      	ldr	r2, [pc, #712]	; (8011088 <ProcessMacCommands+0x444>)
 8010dbe:	5899      	ldr	r1, [r3, r2]
 8010dc0:	197b      	adds	r3, r7, r5
 8010dc2:	22b0      	movs	r2, #176	; 0xb0
 8010dc4:	0052      	lsls	r2, r2, #1
 8010dc6:	588a      	ldr	r2, [r1, r2]
 8010dc8:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8010dca:	4bad      	ldr	r3, [pc, #692]	; (8011080 <ProcessMacCommands+0x43c>)
 8010dcc:	4aae      	ldr	r2, [pc, #696]	; (8011088 <ProcessMacCommands+0x444>)
 8010dce:	589b      	ldr	r3, [r3, r2]
 8010dd0:	7818      	ldrb	r0, [r3, #0]
 8010dd2:	193c      	adds	r4, r7, r4
 8010dd4:	19ba      	adds	r2, r7, r6
 8010dd6:	1979      	adds	r1, r7, r5
 8010dd8:	2354      	movs	r3, #84	; 0x54
 8010dda:	18fb      	adds	r3, r7, r3
 8010ddc:	9301      	str	r3, [sp, #4]
 8010dde:	2555      	movs	r5, #85	; 0x55
 8010de0:	197b      	adds	r3, r7, r5
 8010de2:	9300      	str	r3, [sp, #0]
 8010de4:	0023      	movs	r3, r4
 8010de6:	f006 f8a0 	bl	8016f2a <RegionLinkAdrReq>
 8010dea:	0003      	movs	r3, r0
 8010dec:	001a      	movs	r2, r3
 8010dee:	216b      	movs	r1, #107	; 0x6b
 8010df0:	187b      	adds	r3, r7, r1
 8010df2:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8010df4:	187b      	adds	r3, r7, r1
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	001a      	movs	r2, r3
 8010dfa:	2307      	movs	r3, #7
 8010dfc:	4013      	ands	r3, r2
 8010dfe:	2b07      	cmp	r3, #7
 8010e00:	d117      	bne.n	8010e32 <ProcessMacCommands+0x1ee>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8010e02:	4b9f      	ldr	r3, [pc, #636]	; (8011080 <ProcessMacCommands+0x43c>)
 8010e04:	4aa0      	ldr	r2, [pc, #640]	; (8011088 <ProcessMacCommands+0x444>)
 8010e06:	589b      	ldr	r3, [r3, r2]
 8010e08:	19ba      	adds	r2, r7, r6
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	5651      	ldrsb	r1, [r2, r1]
 8010e0e:	2285      	movs	r2, #133	; 0x85
 8010e10:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8010e12:	4b9b      	ldr	r3, [pc, #620]	; (8011080 <ProcessMacCommands+0x43c>)
 8010e14:	4a9c      	ldr	r2, [pc, #624]	; (8011088 <ProcessMacCommands+0x444>)
 8010e16:	589b      	ldr	r3, [r3, r2]
 8010e18:	2456      	movs	r4, #86	; 0x56
 8010e1a:	193a      	adds	r2, r7, r4
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	5651      	ldrsb	r1, [r2, r1]
 8010e20:	2284      	movs	r2, #132	; 0x84
 8010e22:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010e24:	4b96      	ldr	r3, [pc, #600]	; (8011080 <ProcessMacCommands+0x43c>)
 8010e26:	4a98      	ldr	r2, [pc, #608]	; (8011088 <ProcessMacCommands+0x444>)
 8010e28:	589b      	ldr	r3, [r3, r2]
 8010e2a:	197a      	adds	r2, r7, r5
 8010e2c:	7811      	ldrb	r1, [r2, #0]
 8010e2e:	22a4      	movs	r2, #164	; 0xa4
 8010e30:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010e32:	2386      	movs	r3, #134	; 0x86
 8010e34:	18fb      	adds	r3, r7, r3
 8010e36:	2200      	movs	r2, #0
 8010e38:	701a      	strb	r2, [r3, #0]
 8010e3a:	e00c      	b.n	8010e56 <ProcessMacCommands+0x212>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010e3c:	236b      	movs	r3, #107	; 0x6b
 8010e3e:	18fb      	adds	r3, r7, r3
 8010e40:	2201      	movs	r2, #1
 8010e42:	0019      	movs	r1, r3
 8010e44:	2003      	movs	r0, #3
 8010e46:	f003 ffb9 	bl	8014dbc <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010e4a:	2186      	movs	r1, #134	; 0x86
 8010e4c:	187b      	adds	r3, r7, r1
 8010e4e:	781a      	ldrb	r2, [r3, #0]
 8010e50:	187b      	adds	r3, r7, r1
 8010e52:	3201      	adds	r2, #1
 8010e54:	701a      	strb	r2, [r3, #0]
 8010e56:	2454      	movs	r4, #84	; 0x54
 8010e58:	193b      	adds	r3, r7, r4
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	2105      	movs	r1, #5
 8010e5e:	0018      	movs	r0, r3
 8010e60:	f7ef f964 	bl	800012c <__udivsi3>
 8010e64:	0003      	movs	r3, r0
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	2286      	movs	r2, #134	; 0x86
 8010e6a:	18ba      	adds	r2, r7, r2
 8010e6c:	7812      	ldrb	r2, [r2, #0]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d3e4      	bcc.n	8010e3c <ProcessMacCommands+0x1f8>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8010e72:	193b      	adds	r3, r7, r4
 8010e74:	781a      	ldrb	r2, [r3, #0]
 8010e76:	1cfb      	adds	r3, r7, #3
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	18d3      	adds	r3, r2, r3
 8010e7c:	b2da      	uxtb	r2, r3
 8010e7e:	1cfb      	adds	r3, r7, #3
 8010e80:	3a01      	subs	r2, #1
 8010e82:	701a      	strb	r2, [r3, #0]
                }
                break;
 8010e84:	46c0      	nop			; (mov r8, r8)
 8010e86:	f000 fc53 	bl	8011730 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8010e8a:	1cfb      	adds	r3, r7, #3
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	1cfa      	adds	r2, r7, #3
 8010e90:	1c59      	adds	r1, r3, #1
 8010e92:	7011      	strb	r1, [r2, #0]
 8010e94:	001a      	movs	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	189b      	adds	r3, r3, r2
 8010e9a:	781a      	ldrb	r2, [r3, #0]
 8010e9c:	4b78      	ldr	r3, [pc, #480]	; (8011080 <ProcessMacCommands+0x43c>)
 8010e9e:	497a      	ldr	r1, [pc, #488]	; (8011088 <ProcessMacCommands+0x444>)
 8010ea0:	585b      	ldr	r3, [r3, r1]
 8010ea2:	210f      	movs	r1, #15
 8010ea4:	400a      	ands	r2, r1
 8010ea6:	b2d1      	uxtb	r1, r2
 8010ea8:	22c8      	movs	r2, #200	; 0xc8
 8010eaa:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8010eac:	4b74      	ldr	r3, [pc, #464]	; (8011080 <ProcessMacCommands+0x43c>)
 8010eae:	4a76      	ldr	r2, [pc, #472]	; (8011088 <ProcessMacCommands+0x444>)
 8010eb0:	589b      	ldr	r3, [r3, r2]
 8010eb2:	22c8      	movs	r2, #200	; 0xc8
 8010eb4:	5c9b      	ldrb	r3, [r3, r2]
 8010eb6:	001a      	movs	r2, r3
 8010eb8:	2301      	movs	r3, #1
 8010eba:	4093      	lsls	r3, r2
 8010ebc:	0019      	movs	r1, r3
 8010ebe:	4b70      	ldr	r3, [pc, #448]	; (8011080 <ProcessMacCommands+0x43c>)
 8010ec0:	4a71      	ldr	r2, [pc, #452]	; (8011088 <ProcessMacCommands+0x444>)
 8010ec2:	589a      	ldr	r2, [r3, r2]
 8010ec4:	b289      	uxth	r1, r1
 8010ec6:	23a6      	movs	r3, #166	; 0xa6
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010ecc:	2368      	movs	r3, #104	; 0x68
 8010ece:	18fb      	adds	r3, r7, r3
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	0019      	movs	r1, r3
 8010ed4:	2004      	movs	r0, #4
 8010ed6:	f003 ff71 	bl	8014dbc <LoRaMacCommandsAddCmd>
                break;
 8010eda:	f000 fc29 	bl	8011730 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010ede:	256b      	movs	r5, #107	; 0x6b
 8010ee0:	197b      	adds	r3, r7, r5
 8010ee2:	2207      	movs	r2, #7
 8010ee4:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010ee6:	1cfb      	adds	r3, r7, #3
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	18d3      	adds	r3, r2, r3
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	091b      	lsrs	r3, r3, #4
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	b25b      	sxtb	r3, r3
 8010ef6:	2207      	movs	r2, #7
 8010ef8:	4013      	ands	r3, r2
 8010efa:	b25a      	sxtb	r2, r3
 8010efc:	204c      	movs	r0, #76	; 0x4c
 8010efe:	183b      	adds	r3, r7, r0
 8010f00:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010f02:	1cfb      	adds	r3, r7, #3
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	687a      	ldr	r2, [r7, #4]
 8010f08:	18d3      	adds	r3, r2, r3
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	b25b      	sxtb	r3, r3
 8010f0e:	220f      	movs	r2, #15
 8010f10:	4013      	ands	r3, r2
 8010f12:	b25a      	sxtb	r2, r3
 8010f14:	183b      	adds	r3, r7, r0
 8010f16:	701a      	strb	r2, [r3, #0]
                macIndex++;
 8010f18:	1cfb      	adds	r3, r7, #3
 8010f1a:	781a      	ldrb	r2, [r3, #0]
 8010f1c:	1cfb      	adds	r3, r7, #3
 8010f1e:	3201      	adds	r2, #1
 8010f20:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010f22:	1cfb      	adds	r3, r7, #3
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	1cfa      	adds	r2, r7, #3
 8010f28:	1c59      	adds	r1, r3, #1
 8010f2a:	7011      	strb	r1, [r2, #0]
 8010f2c:	001a      	movs	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	189b      	adds	r3, r3, r2
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	001a      	movs	r2, r3
 8010f36:	183b      	adds	r3, r7, r0
 8010f38:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010f3a:	1cfb      	adds	r3, r7, #3
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	1cfa      	adds	r2, r7, #3
 8010f40:	1c59      	adds	r1, r3, #1
 8010f42:	7011      	strb	r1, [r2, #0]
 8010f44:	001a      	movs	r2, r3
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	189b      	adds	r3, r3, r2
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	021a      	lsls	r2, r3, #8
 8010f4e:	183b      	adds	r3, r7, r0
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	431a      	orrs	r2, r3
 8010f54:	183b      	adds	r3, r7, r0
 8010f56:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010f58:	1cfb      	adds	r3, r7, #3
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	1cfa      	adds	r2, r7, #3
 8010f5e:	1c59      	adds	r1, r3, #1
 8010f60:	7011      	strb	r1, [r2, #0]
 8010f62:	001a      	movs	r2, r3
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	189b      	adds	r3, r3, r2
 8010f68:	781b      	ldrb	r3, [r3, #0]
 8010f6a:	041a      	lsls	r2, r3, #16
 8010f6c:	183b      	adds	r3, r7, r0
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	431a      	orrs	r2, r3
 8010f72:	0004      	movs	r4, r0
 8010f74:	193b      	adds	r3, r7, r4
 8010f76:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 8010f78:	193b      	adds	r3, r7, r4
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	2264      	movs	r2, #100	; 0x64
 8010f7e:	435a      	muls	r2, r3
 8010f80:	193b      	adds	r3, r7, r4
 8010f82:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8010f84:	4b3e      	ldr	r3, [pc, #248]	; (8011080 <ProcessMacCommands+0x43c>)
 8010f86:	4a40      	ldr	r2, [pc, #256]	; (8011088 <ProcessMacCommands+0x444>)
 8010f88:	589b      	ldr	r3, [r3, r2]
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	193a      	adds	r2, r7, r4
 8010f8e:	0011      	movs	r1, r2
 8010f90:	0018      	movs	r0, r3
 8010f92:	f005 ffe8 	bl	8016f66 <RegionRxParamSetupReq>
 8010f96:	0003      	movs	r3, r0
 8010f98:	001a      	movs	r2, r3
 8010f9a:	197b      	adds	r3, r7, r5
 8010f9c:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 8010f9e:	197b      	adds	r3, r7, r5
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	001a      	movs	r2, r3
 8010fa4:	2307      	movs	r3, #7
 8010fa6:	4013      	ands	r3, r2
 8010fa8:	2b07      	cmp	r3, #7
 8010faa:	d128      	bne.n	8010ffe <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010fac:	193b      	adds	r3, r7, r4
 8010fae:	2100      	movs	r1, #0
 8010fb0:	5659      	ldrsb	r1, [r3, r1]
 8010fb2:	4b33      	ldr	r3, [pc, #204]	; (8011080 <ProcessMacCommands+0x43c>)
 8010fb4:	4a34      	ldr	r2, [pc, #208]	; (8011088 <ProcessMacCommands+0x444>)
 8010fb6:	589b      	ldr	r3, [r3, r2]
 8010fb8:	b2c9      	uxtb	r1, r1
 8010fba:	22ac      	movs	r2, #172	; 0xac
 8010fbc:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010fbe:	193b      	adds	r3, r7, r4
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	5659      	ldrsb	r1, [r3, r1]
 8010fc4:	4b2e      	ldr	r3, [pc, #184]	; (8011080 <ProcessMacCommands+0x43c>)
 8010fc6:	4a30      	ldr	r2, [pc, #192]	; (8011088 <ProcessMacCommands+0x444>)
 8010fc8:	589b      	ldr	r3, [r3, r2]
 8010fca:	b2c9      	uxtb	r1, r1
 8010fcc:	22b4      	movs	r2, #180	; 0xb4
 8010fce:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010fd0:	4b2b      	ldr	r3, [pc, #172]	; (8011080 <ProcessMacCommands+0x43c>)
 8010fd2:	4a2d      	ldr	r2, [pc, #180]	; (8011088 <ProcessMacCommands+0x444>)
 8010fd4:	589a      	ldr	r2, [r3, r2]
 8010fd6:	193b      	adds	r3, r7, r4
 8010fd8:	685b      	ldr	r3, [r3, #4]
 8010fda:	21a8      	movs	r1, #168	; 0xa8
 8010fdc:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010fde:	4b28      	ldr	r3, [pc, #160]	; (8011080 <ProcessMacCommands+0x43c>)
 8010fe0:	4a29      	ldr	r2, [pc, #164]	; (8011088 <ProcessMacCommands+0x444>)
 8010fe2:	589a      	ldr	r2, [r3, r2]
 8010fe4:	193b      	adds	r3, r7, r4
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	21b0      	movs	r1, #176	; 0xb0
 8010fea:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010fec:	193b      	adds	r3, r7, r4
 8010fee:	2101      	movs	r1, #1
 8010ff0:	5659      	ldrsb	r1, [r3, r1]
 8010ff2:	4b23      	ldr	r3, [pc, #140]	; (8011080 <ProcessMacCommands+0x43c>)
 8010ff4:	4a24      	ldr	r2, [pc, #144]	; (8011088 <ProcessMacCommands+0x444>)
 8010ff6:	589b      	ldr	r3, [r3, r2]
 8010ff8:	b2c9      	uxtb	r1, r1
 8010ffa:	22a5      	movs	r2, #165	; 0xa5
 8010ffc:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 8010ffe:	236b      	movs	r3, #107	; 0x6b
 8011000:	18fb      	adds	r3, r7, r3
 8011002:	781a      	ldrb	r2, [r3, #0]
 8011004:	2168      	movs	r1, #104	; 0x68
 8011006:	187b      	adds	r3, r7, r1
 8011008:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801100a:	187b      	adds	r3, r7, r1
 801100c:	2201      	movs	r2, #1
 801100e:	0019      	movs	r1, r3
 8011010:	2005      	movs	r0, #5
 8011012:	f003 fed3 	bl	8014dbc <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8011016:	f7ff fe05 	bl	8010c24 <SetMlmeScheduleUplinkIndication>
                break;
 801101a:	46c0      	nop			; (mov r8, r8)
 801101c:	e388      	b.n	8011730 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 801101e:	2185      	movs	r1, #133	; 0x85
 8011020:	187b      	adds	r3, r7, r1
 8011022:	22ff      	movs	r2, #255	; 0xff
 8011024:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8011026:	4a16      	ldr	r2, [pc, #88]	; (8011080 <ProcessMacCommands+0x43c>)
 8011028:	23d2      	movs	r3, #210	; 0xd2
 801102a:	009b      	lsls	r3, r3, #2
 801102c:	58d3      	ldr	r3, [r2, r3]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00f      	beq.n	8011052 <ProcessMacCommands+0x40e>
 8011032:	4a13      	ldr	r2, [pc, #76]	; (8011080 <ProcessMacCommands+0x43c>)
 8011034:	23d2      	movs	r3, #210	; 0xd2
 8011036:	009b      	lsls	r3, r3, #2
 8011038:	58d3      	ldr	r3, [r2, r3]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d008      	beq.n	8011052 <ProcessMacCommands+0x40e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011040:	4a0f      	ldr	r2, [pc, #60]	; (8011080 <ProcessMacCommands+0x43c>)
 8011042:	23d2      	movs	r3, #210	; 0xd2
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	58d3      	ldr	r3, [r2, r3]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	187c      	adds	r4, r7, r1
 801104c:	4798      	blx	r3
 801104e:	0003      	movs	r3, r0
 8011050:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 8011052:	2168      	movs	r1, #104	; 0x68
 8011054:	187b      	adds	r3, r7, r1
 8011056:	2285      	movs	r2, #133	; 0x85
 8011058:	18ba      	adds	r2, r7, r2
 801105a:	7812      	ldrb	r2, [r2, #0]
 801105c:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 801105e:	1c7b      	adds	r3, r7, #1
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	223f      	movs	r2, #63	; 0x3f
 8011064:	4013      	ands	r3, r2
 8011066:	b2da      	uxtb	r2, r3
 8011068:	187b      	adds	r3, r7, r1
 801106a:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 801106c:	187b      	adds	r3, r7, r1
 801106e:	2202      	movs	r2, #2
 8011070:	0019      	movs	r1, r3
 8011072:	2006      	movs	r0, #6
 8011074:	f003 fea2 	bl	8014dbc <LoRaMacCommandsAddCmd>
                break;
 8011078:	e35a      	b.n	8011730 <ProcessMacCommands+0xaec>
 801107a:	46c0      	nop			; (mov r8, r8)
 801107c:	0801f8e0 	.word	0x0801f8e0
 8011080:	200005b8 	.word	0x200005b8
 8011084:	00000459 	.word	0x00000459
 8011088:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 801108c:	246b      	movs	r4, #107	; 0x6b
 801108e:	193b      	adds	r3, r7, r4
 8011090:	2203      	movs	r2, #3
 8011092:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 8011094:	1cfb      	adds	r3, r7, #3
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	1cfa      	adds	r2, r7, #3
 801109a:	1c59      	adds	r1, r3, #1
 801109c:	7011      	strb	r1, [r2, #0]
 801109e:	001a      	movs	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	189b      	adds	r3, r3, r2
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	b25a      	sxtb	r2, r3
 80110a8:	2544      	movs	r5, #68	; 0x44
 80110aa:	197b      	adds	r3, r7, r5
 80110ac:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 80110ae:	197b      	adds	r3, r7, r5
 80110b0:	2038      	movs	r0, #56	; 0x38
 80110b2:	183a      	adds	r2, r7, r0
 80110b4:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80110b6:	1cfb      	adds	r3, r7, #3
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	1cfa      	adds	r2, r7, #3
 80110bc:	1c59      	adds	r1, r3, #1
 80110be:	7011      	strb	r1, [r2, #0]
 80110c0:	001a      	movs	r2, r3
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	189b      	adds	r3, r3, r2
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	001a      	movs	r2, r3
 80110ca:	183b      	adds	r3, r7, r0
 80110cc:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80110ce:	1cfb      	adds	r3, r7, #3
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	1cfa      	adds	r2, r7, #3
 80110d4:	1c59      	adds	r1, r3, #1
 80110d6:	7011      	strb	r1, [r2, #0]
 80110d8:	001a      	movs	r2, r3
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	189b      	adds	r3, r3, r2
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	021a      	lsls	r2, r3, #8
 80110e2:	183b      	adds	r3, r7, r0
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	431a      	orrs	r2, r3
 80110e8:	183b      	adds	r3, r7, r0
 80110ea:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80110ec:	1cfb      	adds	r3, r7, #3
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	1cfa      	adds	r2, r7, #3
 80110f2:	1c59      	adds	r1, r3, #1
 80110f4:	7011      	strb	r1, [r2, #0]
 80110f6:	001a      	movs	r2, r3
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	189b      	adds	r3, r3, r2
 80110fc:	781b      	ldrb	r3, [r3, #0]
 80110fe:	041a      	lsls	r2, r3, #16
 8011100:	183b      	adds	r3, r7, r0
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	431a      	orrs	r2, r3
 8011106:	183b      	adds	r3, r7, r0
 8011108:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 801110a:	183b      	adds	r3, r7, r0
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2264      	movs	r2, #100	; 0x64
 8011110:	435a      	muls	r2, r3
 8011112:	183b      	adds	r3, r7, r0
 8011114:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 8011116:	183b      	adds	r3, r7, r0
 8011118:	2200      	movs	r2, #0
 801111a:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 801111c:	1cfb      	adds	r3, r7, #3
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	1cfa      	adds	r2, r7, #3
 8011122:	1c59      	adds	r1, r3, #1
 8011124:	7011      	strb	r1, [r2, #0]
 8011126:	001a      	movs	r2, r3
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	189b      	adds	r3, r3, r2
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	b25a      	sxtb	r2, r3
 8011130:	183b      	adds	r3, r7, r0
 8011132:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8011134:	4ba0      	ldr	r3, [pc, #640]	; (80113b8 <ProcessMacCommands+0x774>)
 8011136:	4aa1      	ldr	r2, [pc, #644]	; (80113bc <ProcessMacCommands+0x778>)
 8011138:	589b      	ldr	r3, [r3, r2]
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	197a      	adds	r2, r7, r5
 801113e:	0011      	movs	r1, r2
 8011140:	0018      	movs	r0, r3
 8011142:	f005 ff26 	bl	8016f92 <RegionNewChannelReq>
 8011146:	0003      	movs	r3, r0
 8011148:	001a      	movs	r2, r3
 801114a:	193b      	adds	r3, r7, r4
 801114c:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 801114e:	193b      	adds	r3, r7, r4
 8011150:	781a      	ldrb	r2, [r3, #0]
 8011152:	2168      	movs	r1, #104	; 0x68
 8011154:	187b      	adds	r3, r7, r1
 8011156:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011158:	187b      	adds	r3, r7, r1
 801115a:	2201      	movs	r2, #1
 801115c:	0019      	movs	r1, r3
 801115e:	2007      	movs	r0, #7
 8011160:	f003 fe2c 	bl	8014dbc <LoRaMacCommandsAddCmd>
                break;
 8011164:	46c0      	nop			; (mov r8, r8)
 8011166:	e2e3      	b.n	8011730 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011168:	1cfb      	adds	r3, r7, #3
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	1cfa      	adds	r2, r7, #3
 801116e:	1c59      	adds	r1, r3, #1
 8011170:	7011      	strb	r1, [r2, #0]
 8011172:	001a      	movs	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	189b      	adds	r3, r3, r2
 8011178:	781a      	ldrb	r2, [r3, #0]
 801117a:	2084      	movs	r0, #132	; 0x84
 801117c:	183b      	adds	r3, r7, r0
 801117e:	210f      	movs	r1, #15
 8011180:	400a      	ands	r2, r1
 8011182:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 8011184:	183b      	adds	r3, r7, r0
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d104      	bne.n	8011196 <ProcessMacCommands+0x552>
                {
                    delay++;
 801118c:	183b      	adds	r3, r7, r0
 801118e:	781a      	ldrb	r2, [r3, #0]
 8011190:	183b      	adds	r3, r7, r0
 8011192:	3201      	adds	r2, #1
 8011194:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8011196:	2384      	movs	r3, #132	; 0x84
 8011198:	18fb      	adds	r3, r7, r3
 801119a:	781a      	ldrb	r2, [r3, #0]
 801119c:	0013      	movs	r3, r2
 801119e:	015b      	lsls	r3, r3, #5
 80111a0:	1a9b      	subs	r3, r3, r2
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	189b      	adds	r3, r3, r2
 80111a6:	00db      	lsls	r3, r3, #3
 80111a8:	0019      	movs	r1, r3
 80111aa:	4b83      	ldr	r3, [pc, #524]	; (80113b8 <ProcessMacCommands+0x774>)
 80111ac:	4a83      	ldr	r2, [pc, #524]	; (80113bc <ProcessMacCommands+0x778>)
 80111ae:	589b      	ldr	r3, [r3, r2]
 80111b0:	2294      	movs	r2, #148	; 0x94
 80111b2:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 80111b4:	4b80      	ldr	r3, [pc, #512]	; (80113b8 <ProcessMacCommands+0x774>)
 80111b6:	4a81      	ldr	r2, [pc, #516]	; (80113bc <ProcessMacCommands+0x778>)
 80111b8:	589b      	ldr	r3, [r3, r2]
 80111ba:	2294      	movs	r2, #148	; 0x94
 80111bc:	589b      	ldr	r3, [r3, r2]
 80111be:	4a7e      	ldr	r2, [pc, #504]	; (80113b8 <ProcessMacCommands+0x774>)
 80111c0:	497e      	ldr	r1, [pc, #504]	; (80113bc <ProcessMacCommands+0x778>)
 80111c2:	5852      	ldr	r2, [r2, r1]
 80111c4:	21fa      	movs	r1, #250	; 0xfa
 80111c6:	0089      	lsls	r1, r1, #2
 80111c8:	468c      	mov	ip, r1
 80111ca:	4463      	add	r3, ip
 80111cc:	2198      	movs	r1, #152	; 0x98
 80111ce:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80111d0:	2368      	movs	r3, #104	; 0x68
 80111d2:	18fb      	adds	r3, r7, r3
 80111d4:	2200      	movs	r2, #0
 80111d6:	0019      	movs	r1, r3
 80111d8:	2008      	movs	r0, #8
 80111da:	f003 fdef 	bl	8014dbc <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80111de:	f7ff fd21 	bl	8010c24 <SetMlmeScheduleUplinkIndication>
                break;
 80111e2:	e2a5      	b.n	8011730 <ProcessMacCommands+0xaec>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80111e4:	1cfb      	adds	r3, r7, #3
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	1cfa      	adds	r2, r7, #3
 80111ea:	1c59      	adds	r1, r3, #1
 80111ec:	7011      	strb	r1, [r2, #0]
 80111ee:	001a      	movs	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	189a      	adds	r2, r3, r2
 80111f4:	2076      	movs	r0, #118	; 0x76
 80111f6:	183b      	adds	r3, r7, r0
 80111f8:	7812      	ldrb	r2, [r2, #0]
 80111fa:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 80111fc:	2134      	movs	r1, #52	; 0x34
 80111fe:	187b      	adds	r3, r7, r1
 8011200:	2200      	movs	r2, #0
 8011202:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 8011204:	187b      	adds	r3, r7, r1
 8011206:	2200      	movs	r2, #0
 8011208:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801120a:	183b      	adds	r3, r7, r0
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	2220      	movs	r2, #32
 8011210:	4013      	ands	r3, r2
 8011212:	d002      	beq.n	801121a <ProcessMacCommands+0x5d6>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8011214:	187b      	adds	r3, r7, r1
 8011216:	2201      	movs	r2, #1
 8011218:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801121a:	2376      	movs	r3, #118	; 0x76
 801121c:	18fb      	adds	r3, r7, r3
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	2210      	movs	r2, #16
 8011222:	4013      	ands	r3, r2
 8011224:	d003      	beq.n	801122e <ProcessMacCommands+0x5ea>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8011226:	2334      	movs	r3, #52	; 0x34
 8011228:	18fb      	adds	r3, r7, r3
 801122a:	2201      	movs	r2, #1
 801122c:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 801122e:	2376      	movs	r3, #118	; 0x76
 8011230:	18fb      	adds	r3, r7, r3
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	220f      	movs	r2, #15
 8011236:	4013      	ands	r3, r2
 8011238:	b2da      	uxtb	r2, r3
 801123a:	2434      	movs	r4, #52	; 0x34
 801123c:	193b      	adds	r3, r7, r4
 801123e:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8011240:	4b5d      	ldr	r3, [pc, #372]	; (80113b8 <ProcessMacCommands+0x774>)
 8011242:	4a5e      	ldr	r2, [pc, #376]	; (80113bc <ProcessMacCommands+0x778>)
 8011244:	589b      	ldr	r3, [r3, r2]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	193a      	adds	r2, r7, r4
 801124a:	0011      	movs	r1, r2
 801124c:	0018      	movs	r0, r3
 801124e:	f005 feb6 	bl	8016fbe <RegionTxParamSetupReq>
 8011252:	0003      	movs	r3, r0
 8011254:	3301      	adds	r3, #1
 8011256:	d050      	beq.n	80112fa <ProcessMacCommands+0x6b6>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8011258:	4b57      	ldr	r3, [pc, #348]	; (80113b8 <ProcessMacCommands+0x774>)
 801125a:	4a58      	ldr	r2, [pc, #352]	; (80113bc <ProcessMacCommands+0x778>)
 801125c:	589b      	ldr	r3, [r3, r2]
 801125e:	193a      	adds	r2, r7, r4
 8011260:	7811      	ldrb	r1, [r2, #0]
 8011262:	22b8      	movs	r2, #184	; 0xb8
 8011264:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011266:	4b54      	ldr	r3, [pc, #336]	; (80113b8 <ProcessMacCommands+0x774>)
 8011268:	4a54      	ldr	r2, [pc, #336]	; (80113bc <ProcessMacCommands+0x778>)
 801126a:	589b      	ldr	r3, [r3, r2]
 801126c:	193a      	adds	r2, r7, r4
 801126e:	7851      	ldrb	r1, [r2, #1]
 8011270:	22b9      	movs	r2, #185	; 0xb9
 8011272:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8011274:	193b      	adds	r3, r7, r4
 8011276:	789b      	ldrb	r3, [r3, #2]
 8011278:	001a      	movs	r2, r3
 801127a:	4b51      	ldr	r3, [pc, #324]	; (80113c0 <ProcessMacCommands+0x77c>)
 801127c:	5c9a      	ldrb	r2, [r3, r2]
 801127e:	4b4e      	ldr	r3, [pc, #312]	; (80113b8 <ProcessMacCommands+0x774>)
 8011280:	494e      	ldr	r1, [pc, #312]	; (80113bc <ProcessMacCommands+0x778>)
 8011282:	585c      	ldr	r4, [r3, r1]
 8011284:	0010      	movs	r0, r2
 8011286:	f7ef fec3 	bl	8001010 <__aeabi_ui2f>
 801128a:	1c03      	adds	r3, r0, #0
 801128c:	22bc      	movs	r2, #188	; 0xbc
 801128e:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011290:	212c      	movs	r1, #44	; 0x2c
 8011292:	187b      	adds	r3, r7, r1
 8011294:	2202      	movs	r2, #2
 8011296:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011298:	4b47      	ldr	r3, [pc, #284]	; (80113b8 <ProcessMacCommands+0x774>)
 801129a:	4a48      	ldr	r2, [pc, #288]	; (80113bc <ProcessMacCommands+0x778>)
 801129c:	589b      	ldr	r3, [r3, r2]
 801129e:	22b8      	movs	r2, #184	; 0xb8
 80112a0:	5c9a      	ldrb	r2, [r3, r2]
 80112a2:	187b      	adds	r3, r7, r1
 80112a4:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80112a6:	4b44      	ldr	r3, [pc, #272]	; (80113b8 <ProcessMacCommands+0x774>)
 80112a8:	4a44      	ldr	r2, [pc, #272]	; (80113bc <ProcessMacCommands+0x778>)
 80112aa:	589b      	ldr	r3, [r3, r2]
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	187a      	adds	r2, r7, r1
 80112b0:	0011      	movs	r1, r2
 80112b2:	0018      	movs	r0, r3
 80112b4:	f005 fd31 	bl	8016d1a <RegionGetPhyParam>
 80112b8:	0003      	movs	r3, r0
 80112ba:	001a      	movs	r2, r3
 80112bc:	2128      	movs	r1, #40	; 0x28
 80112be:	187b      	adds	r3, r7, r1
 80112c0:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80112c2:	187b      	adds	r3, r7, r1
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	b259      	sxtb	r1, r3
 80112c8:	4b3b      	ldr	r3, [pc, #236]	; (80113b8 <ProcessMacCommands+0x774>)
 80112ca:	4a3c      	ldr	r2, [pc, #240]	; (80113bc <ProcessMacCommands+0x778>)
 80112cc:	589b      	ldr	r3, [r3, r2]
 80112ce:	2285      	movs	r2, #133	; 0x85
 80112d0:	5698      	ldrsb	r0, [r3, r2]
 80112d2:	4b39      	ldr	r3, [pc, #228]	; (80113b8 <ProcessMacCommands+0x774>)
 80112d4:	4a39      	ldr	r2, [pc, #228]	; (80113bc <ProcessMacCommands+0x778>)
 80112d6:	589b      	ldr	r3, [r3, r2]
 80112d8:	1c04      	adds	r4, r0, #0
 80112da:	1c08      	adds	r0, r1, #0
 80112dc:	b241      	sxtb	r1, r0
 80112de:	b262      	sxtb	r2, r4
 80112e0:	4291      	cmp	r1, r2
 80112e2:	da00      	bge.n	80112e6 <ProcessMacCommands+0x6a2>
 80112e4:	1c20      	adds	r0, r4, #0
 80112e6:	b241      	sxtb	r1, r0
 80112e8:	2285      	movs	r2, #133	; 0x85
 80112ea:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80112ec:	2368      	movs	r3, #104	; 0x68
 80112ee:	18fb      	adds	r3, r7, r3
 80112f0:	2200      	movs	r2, #0
 80112f2:	0019      	movs	r1, r3
 80112f4:	2009      	movs	r0, #9
 80112f6:	f003 fd61 	bl	8014dbc <LoRaMacCommandsAddCmd>
                }
                break;
 80112fa:	46c0      	nop			; (mov r8, r8)
 80112fc:	e218      	b.n	8011730 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80112fe:	246b      	movs	r4, #107	; 0x6b
 8011300:	193b      	adds	r3, r7, r4
 8011302:	2203      	movs	r2, #3
 8011304:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 8011306:	1cfb      	adds	r3, r7, #3
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	1cfa      	adds	r2, r7, #3
 801130c:	1c59      	adds	r1, r3, #1
 801130e:	7011      	strb	r1, [r2, #0]
 8011310:	001a      	movs	r2, r3
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	189b      	adds	r3, r3, r2
 8011316:	781a      	ldrb	r2, [r3, #0]
 8011318:	2020      	movs	r0, #32
 801131a:	183b      	adds	r3, r7, r0
 801131c:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801131e:	1cfb      	adds	r3, r7, #3
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	1cfa      	adds	r2, r7, #3
 8011324:	1c59      	adds	r1, r3, #1
 8011326:	7011      	strb	r1, [r2, #0]
 8011328:	001a      	movs	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	189b      	adds	r3, r3, r2
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	001a      	movs	r2, r3
 8011332:	183b      	adds	r3, r7, r0
 8011334:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011336:	1cfb      	adds	r3, r7, #3
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	1cfa      	adds	r2, r7, #3
 801133c:	1c59      	adds	r1, r3, #1
 801133e:	7011      	strb	r1, [r2, #0]
 8011340:	001a      	movs	r2, r3
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	189b      	adds	r3, r3, r2
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	021a      	lsls	r2, r3, #8
 801134a:	183b      	adds	r3, r7, r0
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	431a      	orrs	r2, r3
 8011350:	183b      	adds	r3, r7, r0
 8011352:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011354:	1cfb      	adds	r3, r7, #3
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	1cfa      	adds	r2, r7, #3
 801135a:	1c59      	adds	r1, r3, #1
 801135c:	7011      	strb	r1, [r2, #0]
 801135e:	001a      	movs	r2, r3
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	189b      	adds	r3, r3, r2
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	041a      	lsls	r2, r3, #16
 8011368:	183b      	adds	r3, r7, r0
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	431a      	orrs	r2, r3
 801136e:	0001      	movs	r1, r0
 8011370:	187b      	adds	r3, r7, r1
 8011372:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 8011374:	187b      	adds	r3, r7, r1
 8011376:	685b      	ldr	r3, [r3, #4]
 8011378:	2264      	movs	r2, #100	; 0x64
 801137a:	435a      	muls	r2, r3
 801137c:	187b      	adds	r3, r7, r1
 801137e:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8011380:	4b0d      	ldr	r3, [pc, #52]	; (80113b8 <ProcessMacCommands+0x774>)
 8011382:	4a0e      	ldr	r2, [pc, #56]	; (80113bc <ProcessMacCommands+0x778>)
 8011384:	589b      	ldr	r3, [r3, r2]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	187a      	adds	r2, r7, r1
 801138a:	0011      	movs	r1, r2
 801138c:	0018      	movs	r0, r3
 801138e:	f005 fe2c 	bl	8016fea <RegionDlChannelReq>
 8011392:	0003      	movs	r3, r0
 8011394:	001a      	movs	r2, r3
 8011396:	193b      	adds	r3, r7, r4
 8011398:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 801139a:	193b      	adds	r3, r7, r4
 801139c:	781a      	ldrb	r2, [r3, #0]
 801139e:	2168      	movs	r1, #104	; 0x68
 80113a0:	187b      	adds	r3, r7, r1
 80113a2:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80113a4:	187b      	adds	r3, r7, r1
 80113a6:	2201      	movs	r2, #1
 80113a8:	0019      	movs	r1, r3
 80113aa:	200a      	movs	r0, #10
 80113ac:	f003 fd06 	bl	8014dbc <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80113b0:	f7ff fc38 	bl	8010c24 <SetMlmeScheduleUplinkIndication>
                break;
 80113b4:	46c0      	nop			; (mov r8, r8)
 80113b6:	e1bb      	b.n	8011730 <ProcessMacCommands+0xaec>
 80113b8:	200005b8 	.word	0x200005b8
 80113bc:	00000484 	.word	0x00000484
 80113c0:	0801f8d0 	.word	0x0801f8d0
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80113c4:	200a      	movs	r0, #10
 80113c6:	f004 f88b 	bl	80154e0 <LoRaMacConfirmQueueIsCmdActive>
 80113ca:	1e03      	subs	r3, r0, #0
 80113cc:	d100      	bne.n	80113d0 <ProcessMacCommands+0x78c>
 80113ce:	e1af      	b.n	8011730 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80113d0:	210a      	movs	r1, #10
 80113d2:	2000      	movs	r0, #0
 80113d4:	f003 ffe8 	bl	80153a8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80113d8:	2418      	movs	r4, #24
 80113da:	193b      	adds	r3, r7, r4
 80113dc:	0018      	movs	r0, r3
 80113de:	2308      	movs	r3, #8
 80113e0:	001a      	movs	r2, r3
 80113e2:	2100      	movs	r1, #0
 80113e4:	f00c fe75 	bl	801e0d2 <memset>
                    SysTime_t sysTime = { 0 };
 80113e8:	2510      	movs	r5, #16
 80113ea:	197b      	adds	r3, r7, r5
 80113ec:	0018      	movs	r0, r3
 80113ee:	2308      	movs	r3, #8
 80113f0:	001a      	movs	r2, r3
 80113f2:	2100      	movs	r1, #0
 80113f4:	f00c fe6d 	bl	801e0d2 <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 80113f8:	2608      	movs	r6, #8
 80113fa:	19bb      	adds	r3, r7, r6
 80113fc:	0018      	movs	r0, r3
 80113fe:	2308      	movs	r3, #8
 8011400:	001a      	movs	r2, r3
 8011402:	2100      	movs	r1, #0
 8011404:	f00c fe65 	bl	801e0d2 <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011408:	1cfb      	adds	r3, r7, #3
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	1cfa      	adds	r2, r7, #3
 801140e:	1c59      	adds	r1, r3, #1
 8011410:	7011      	strb	r1, [r2, #0]
 8011412:	001a      	movs	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	189b      	adds	r3, r3, r2
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	001a      	movs	r2, r3
 801141c:	193b      	adds	r3, r7, r4
 801141e:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011420:	1cfb      	adds	r3, r7, #3
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	1cfa      	adds	r2, r7, #3
 8011426:	1c59      	adds	r1, r3, #1
 8011428:	7011      	strb	r1, [r2, #0]
 801142a:	001a      	movs	r2, r3
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	189b      	adds	r3, r3, r2
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	021a      	lsls	r2, r3, #8
 8011434:	193b      	adds	r3, r7, r4
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	431a      	orrs	r2, r3
 801143a:	0020      	movs	r0, r4
 801143c:	193b      	adds	r3, r7, r4
 801143e:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011440:	1cfb      	adds	r3, r7, #3
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	1cfa      	adds	r2, r7, #3
 8011446:	1c59      	adds	r1, r3, #1
 8011448:	7011      	strb	r1, [r2, #0]
 801144a:	001a      	movs	r2, r3
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	189b      	adds	r3, r3, r2
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	041a      	lsls	r2, r3, #16
 8011454:	183b      	adds	r3, r7, r0
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	431a      	orrs	r2, r3
 801145a:	183b      	adds	r3, r7, r0
 801145c:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 801145e:	1cfb      	adds	r3, r7, #3
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	1cfa      	adds	r2, r7, #3
 8011464:	1c59      	adds	r1, r3, #1
 8011466:	7011      	strb	r1, [r2, #0]
 8011468:	001a      	movs	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	189b      	adds	r3, r3, r2
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	061a      	lsls	r2, r3, #24
 8011472:	183b      	adds	r3, r7, r0
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	431a      	orrs	r2, r3
 8011478:	183b      	adds	r3, r7, r0
 801147a:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801147c:	1cfb      	adds	r3, r7, #3
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	1cfa      	adds	r2, r7, #3
 8011482:	1c59      	adds	r1, r3, #1
 8011484:	7011      	strb	r1, [r2, #0]
 8011486:	001a      	movs	r2, r3
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	189b      	adds	r3, r3, r2
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	b21a      	sxth	r2, r3
 8011490:	183b      	adds	r3, r7, r0
 8011492:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011494:	0001      	movs	r1, r0
 8011496:	183b      	adds	r3, r7, r0
 8011498:	2204      	movs	r2, #4
 801149a:	5e9b      	ldrsh	r3, [r3, r2]
 801149c:	001a      	movs	r2, r3
 801149e:	0013      	movs	r3, r2
 80114a0:	015b      	lsls	r3, r3, #5
 80114a2:	1a9b      	subs	r3, r3, r2
 80114a4:	009b      	lsls	r3, r3, #2
 80114a6:	189b      	adds	r3, r3, r2
 80114a8:	00db      	lsls	r3, r3, #3
 80114aa:	121b      	asrs	r3, r3, #8
 80114ac:	b21a      	sxth	r2, r3
 80114ae:	187b      	adds	r3, r7, r1
 80114b0:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80114b2:	197a      	adds	r2, r7, r5
 80114b4:	187b      	adds	r3, r7, r1
 80114b6:	0010      	movs	r0, r2
 80114b8:	0019      	movs	r1, r3
 80114ba:	2308      	movs	r3, #8
 80114bc:	001a      	movs	r2, r3
 80114be:	f00c fdff 	bl	801e0c0 <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80114c2:	197b      	adds	r3, r7, r5
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	4aa2      	ldr	r2, [pc, #648]	; (8011750 <ProcessMacCommands+0xb0c>)
 80114c8:	189a      	adds	r2, r3, r2
 80114ca:	002c      	movs	r4, r5
 80114cc:	197b      	adds	r3, r7, r5
 80114ce:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80114d0:	19bb      	adds	r3, r7, r6
 80114d2:	0018      	movs	r0, r3
 80114d4:	f00b fb36 	bl	801cb44 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80114d8:	236c      	movs	r3, #108	; 0x6c
 80114da:	18fd      	adds	r5, r7, r3
 80114dc:	489d      	ldr	r0, [pc, #628]	; (8011754 <ProcessMacCommands+0xb10>)
 80114de:	23ce      	movs	r3, #206	; 0xce
 80114e0:	0099      	lsls	r1, r3, #2
 80114e2:	0026      	movs	r6, r4
 80114e4:	193a      	adds	r2, r7, r4
 80114e6:	2404      	movs	r4, #4
 80114e8:	1843      	adds	r3, r0, r1
 80114ea:	191c      	adds	r4, r3, r4
 80114ec:	466b      	mov	r3, sp
 80114ee:	6824      	ldr	r4, [r4, #0]
 80114f0:	601c      	str	r4, [r3, #0]
 80114f2:	5843      	ldr	r3, [r0, r1]
 80114f4:	6811      	ldr	r1, [r2, #0]
 80114f6:	6852      	ldr	r2, [r2, #4]
 80114f8:	0028      	movs	r0, r5
 80114fa:	f00b fa97 	bl	801ca2c <SysTimeSub>
 80114fe:	0035      	movs	r5, r6
 8011500:	197c      	adds	r4, r7, r5
 8011502:	236c      	movs	r3, #108	; 0x6c
 8011504:	18fb      	adds	r3, r7, r3
 8011506:	2608      	movs	r6, #8
 8011508:	19ba      	adds	r2, r7, r6
 801150a:	4669      	mov	r1, sp
 801150c:	6858      	ldr	r0, [r3, #4]
 801150e:	6008      	str	r0, [r1, #0]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	6811      	ldr	r1, [r2, #0]
 8011514:	6852      	ldr	r2, [r2, #4]
 8011516:	0020      	movs	r0, r4
 8011518:	f00b fa32 	bl	801c980 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 801151c:	197b      	adds	r3, r7, r5
 801151e:	6818      	ldr	r0, [r3, #0]
 8011520:	6859      	ldr	r1, [r3, #4]
 8011522:	f00b fad7 	bl	801cad4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011526:	f003 fac5 	bl	8014ab4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 801152a:	4a8a      	ldr	r2, [pc, #552]	; (8011754 <ProcessMacCommands+0xb10>)
 801152c:	2387      	movs	r3, #135	; 0x87
 801152e:	00db      	lsls	r3, r3, #3
 8011530:	2101      	movs	r1, #1
 8011532:	54d1      	strb	r1, [r2, r3]
                }
                break;
 8011534:	e0fc      	b.n	8011730 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011536:	200d      	movs	r0, #13
 8011538:	f003 ffd2 	bl	80154e0 <LoRaMacConfirmQueueIsCmdActive>
 801153c:	1e03      	subs	r3, r0, #0
 801153e:	d100      	bne.n	8011542 <ProcessMacCommands+0x8fe>
 8011540:	e0f6      	b.n	8011730 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011542:	210d      	movs	r1, #13
 8011544:	2000      	movs	r0, #0
 8011546:	f003 ff2f 	bl	80153a8 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801154a:	4a82      	ldr	r2, [pc, #520]	; (8011754 <ProcessMacCommands+0xb10>)
 801154c:	2390      	movs	r3, #144	; 0x90
 801154e:	00db      	lsls	r3, r3, #3
 8011550:	5cd3      	ldrb	r3, [r2, r3]
 8011552:	2b04      	cmp	r3, #4
 8011554:	d100      	bne.n	8011558 <ProcessMacCommands+0x914>
 8011556:	e0eb      	b.n	8011730 <ProcessMacCommands+0xaec>
 8011558:	4a7e      	ldr	r2, [pc, #504]	; (8011754 <ProcessMacCommands+0xb10>)
 801155a:	2390      	movs	r3, #144	; 0x90
 801155c:	00db      	lsls	r3, r3, #3
 801155e:	5cd3      	ldrb	r3, [r2, r3]
 8011560:	2b05      	cmp	r3, #5
 8011562:	d100      	bne.n	8011566 <ProcessMacCommands+0x922>
 8011564:	e0e4      	b.n	8011730 <ProcessMacCommands+0xaec>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011566:	f003 fa86 	bl	8014a76 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801156a:	e0e1      	b.n	8011730 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801156c:	207c      	movs	r0, #124	; 0x7c
 801156e:	183b      	adds	r3, r7, r0
 8011570:	2203      	movs	r2, #3
 8011572:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 8011574:	2300      	movs	r3, #0
 8011576:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011578:	1cfb      	adds	r3, r7, #3
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	1cfa      	adds	r2, r7, #3
 801157e:	1c59      	adds	r1, r3, #1
 8011580:	7011      	strb	r1, [r2, #0]
 8011582:	001a      	movs	r2, r3
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	189b      	adds	r3, r3, r2
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801158c:	1cfb      	adds	r3, r7, #3
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	1cfa      	adds	r2, r7, #3
 8011592:	1c59      	adds	r1, r3, #1
 8011594:	7011      	strb	r1, [r2, #0]
 8011596:	001a      	movs	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	189b      	adds	r3, r3, r2
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	021b      	lsls	r3, r3, #8
 80115a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80115a2:	4313      	orrs	r3, r2
 80115a4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80115a6:	1cfb      	adds	r3, r7, #3
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	1cfa      	adds	r2, r7, #3
 80115ac:	1c59      	adds	r1, r3, #1
 80115ae:	7011      	strb	r1, [r2, #0]
 80115b0:	001a      	movs	r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	189b      	adds	r3, r3, r2
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	041b      	lsls	r3, r3, #16
 80115ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80115bc:	4313      	orrs	r3, r2
 80115be:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80115c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80115c2:	2264      	movs	r2, #100	; 0x64
 80115c4:	4353      	muls	r3, r2
 80115c6:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80115c8:	1cfb      	adds	r3, r7, #3
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	1cfa      	adds	r2, r7, #3
 80115ce:	1c59      	adds	r1, r3, #1
 80115d0:	7011      	strb	r1, [r2, #0]
 80115d2:	001a      	movs	r2, r3
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	189b      	adds	r3, r3, r2
 80115d8:	781a      	ldrb	r2, [r3, #0]
 80115da:	2677      	movs	r6, #119	; 0x77
 80115dc:	19bb      	adds	r3, r7, r6
 80115de:	210f      	movs	r1, #15
 80115e0:	400a      	ands	r2, r1
 80115e2:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80115e4:	0005      	movs	r5, r0
 80115e6:	183c      	adds	r4, r7, r0
 80115e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80115ea:	19bb      	adds	r3, r7, r6
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	0011      	movs	r1, r2
 80115f0:	0018      	movs	r0, r3
 80115f2:	f003 fa45 	bl	8014a80 <LoRaMacClassBPingSlotChannelReq>
 80115f6:	0003      	movs	r3, r0
 80115f8:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 80115fa:	2168      	movs	r1, #104	; 0x68
 80115fc:	187b      	adds	r3, r7, r1
 80115fe:	197a      	adds	r2, r7, r5
 8011600:	7812      	ldrb	r2, [r2, #0]
 8011602:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8011604:	187b      	adds	r3, r7, r1
 8011606:	2201      	movs	r2, #1
 8011608:	0019      	movs	r1, r3
 801160a:	2011      	movs	r0, #17
 801160c:	f003 fbd6 	bl	8014dbc <LoRaMacCommandsAddCmd>
                break;
 8011610:	e08e      	b.n	8011730 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8011612:	200e      	movs	r0, #14
 8011614:	f003 ff64 	bl	80154e0 <LoRaMacConfirmQueueIsCmdActive>
 8011618:	1e03      	subs	r3, r0, #0
 801161a:	d100      	bne.n	801161e <ProcessMacCommands+0x9da>
 801161c:	e088      	b.n	8011730 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801161e:	210e      	movs	r1, #14
 8011620:	2000      	movs	r0, #0
 8011622:	f003 fec1 	bl	80153a8 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011626:	207e      	movs	r0, #126	; 0x7e
 8011628:	183b      	adds	r3, r7, r0
 801162a:	2200      	movs	r2, #0
 801162c:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 801162e:	247d      	movs	r4, #125	; 0x7d
 8011630:	193b      	adds	r3, r7, r4
 8011632:	2200      	movs	r2, #0
 8011634:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011636:	1cfb      	adds	r3, r7, #3
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	1cfa      	adds	r2, r7, #3
 801163c:	1c59      	adds	r1, r3, #1
 801163e:	7011      	strb	r1, [r2, #0]
 8011640:	001a      	movs	r2, r3
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	189b      	adds	r3, r3, r2
 8011646:	781a      	ldrb	r2, [r3, #0]
 8011648:	183b      	adds	r3, r7, r0
 801164a:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 801164c:	1cfb      	adds	r3, r7, #3
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	1cfa      	adds	r2, r7, #3
 8011652:	1c59      	adds	r1, r3, #1
 8011654:	7011      	strb	r1, [r2, #0]
 8011656:	001a      	movs	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	189b      	adds	r3, r3, r2
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	021b      	lsls	r3, r3, #8
 8011660:	b21a      	sxth	r2, r3
 8011662:	183b      	adds	r3, r7, r0
 8011664:	2100      	movs	r1, #0
 8011666:	5e5b      	ldrsh	r3, [r3, r1]
 8011668:	4313      	orrs	r3, r2
 801166a:	b21a      	sxth	r2, r3
 801166c:	183b      	adds	r3, r7, r0
 801166e:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 8011670:	1cfb      	adds	r3, r7, #3
 8011672:	781b      	ldrb	r3, [r3, #0]
 8011674:	1cfa      	adds	r2, r7, #3
 8011676:	1c59      	adds	r1, r3, #1
 8011678:	7011      	strb	r1, [r2, #0]
 801167a:	001a      	movs	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	189a      	adds	r2, r3, r2
 8011680:	193b      	adds	r3, r7, r4
 8011682:	7812      	ldrb	r2, [r2, #0]
 8011684:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011686:	4b34      	ldr	r3, [pc, #208]	; (8011758 <ProcessMacCommands+0xb14>)
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	193b      	adds	r3, r7, r4
 801168c:	7819      	ldrb	r1, [r3, #0]
 801168e:	183b      	adds	r3, r7, r0
 8011690:	881b      	ldrh	r3, [r3, #0]
 8011692:	0018      	movs	r0, r3
 8011694:	f003 fa00 	bl	8014a98 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011698:	e04a      	b.n	8011730 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	2080      	movs	r0, #128	; 0x80
 801169e:	183a      	adds	r2, r7, r0
 80116a0:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 80116a2:	1cfb      	adds	r3, r7, #3
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	1cfa      	adds	r2, r7, #3
 80116a8:	1c59      	adds	r1, r3, #1
 80116aa:	7011      	strb	r1, [r2, #0]
 80116ac:	001a      	movs	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	189b      	adds	r3, r3, r2
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	183a      	adds	r2, r7, r0
 80116b6:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80116b8:	1cfb      	adds	r3, r7, #3
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	1cfa      	adds	r2, r7, #3
 80116be:	1c59      	adds	r1, r3, #1
 80116c0:	7011      	strb	r1, [r2, #0]
 80116c2:	001a      	movs	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	189b      	adds	r3, r3, r2
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	021b      	lsls	r3, r3, #8
 80116cc:	183a      	adds	r2, r7, r0
 80116ce:	6812      	ldr	r2, [r2, #0]
 80116d0:	4313      	orrs	r3, r2
 80116d2:	183a      	adds	r2, r7, r0
 80116d4:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80116d6:	1cfb      	adds	r3, r7, #3
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	1cfa      	adds	r2, r7, #3
 80116dc:	1c59      	adds	r1, r3, #1
 80116de:	7011      	strb	r1, [r2, #0]
 80116e0:	001a      	movs	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	189b      	adds	r3, r3, r2
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	041b      	lsls	r3, r3, #16
 80116ea:	183a      	adds	r2, r7, r0
 80116ec:	6812      	ldr	r2, [r2, #0]
 80116ee:	4313      	orrs	r3, r2
 80116f0:	183a      	adds	r2, r7, r0
 80116f2:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 80116f4:	183b      	adds	r3, r7, r0
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	2264      	movs	r2, #100	; 0x64
 80116fa:	4353      	muls	r3, r2
 80116fc:	183a      	adds	r2, r7, r0
 80116fe:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011700:	183b      	adds	r3, r7, r0
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	0018      	movs	r0, r3
 8011706:	f003 f9da 	bl	8014abe <LoRaMacClassBBeaconFreqReq>
 801170a:	1e03      	subs	r3, r0, #0
 801170c:	d004      	beq.n	8011718 <ProcessMacCommands+0xad4>
                    {
                        macCmdPayload[0] = 1;
 801170e:	2368      	movs	r3, #104	; 0x68
 8011710:	18fb      	adds	r3, r7, r3
 8011712:	2201      	movs	r2, #1
 8011714:	701a      	strb	r2, [r3, #0]
 8011716:	e003      	b.n	8011720 <ProcessMacCommands+0xadc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011718:	2368      	movs	r3, #104	; 0x68
 801171a:	18fb      	adds	r3, r7, r3
 801171c:	2200      	movs	r2, #0
 801171e:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011720:	2368      	movs	r3, #104	; 0x68
 8011722:	18fb      	adds	r3, r7, r3
 8011724:	2201      	movs	r2, #1
 8011726:	0019      	movs	r1, r3
 8011728:	2013      	movs	r0, #19
 801172a:	f003 fb47 	bl	8014dbc <LoRaMacCommandsAddCmd>
                }
                break;
 801172e:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 8011730:	1cfa      	adds	r2, r7, #3
 8011732:	1cbb      	adds	r3, r7, #2
 8011734:	7812      	ldrb	r2, [r2, #0]
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	429a      	cmp	r2, r3
 801173a:	d201      	bcs.n	8011740 <ProcessMacCommands+0xafc>
 801173c:	f7ff faa0 	bl	8010c80 <ProcessMacCommands+0x3c>
 8011740:	e002      	b.n	8011748 <ProcessMacCommands+0xb04>
            return;
 8011742:	46c0      	nop			; (mov r8, r8)
 8011744:	e000      	b.n	8011748 <ProcessMacCommands+0xb04>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011746:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8011748:	46bd      	mov	sp, r7
 801174a:	b023      	add	sp, #140	; 0x8c
 801174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801174e:	46c0      	nop			; (mov r8, r8)
 8011750:	12d53d80 	.word	0x12d53d80
 8011754:	200005b8 	.word	0x200005b8
 8011758:	20001710 	.word	0x20001710

0801175c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801175c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801175e:	b08f      	sub	sp, #60	; 0x3c
 8011760:	af02      	add	r7, sp, #8
 8011762:	60f8      	str	r0, [r7, #12]
 8011764:	0008      	movs	r0, r1
 8011766:	607a      	str	r2, [r7, #4]
 8011768:	0019      	movs	r1, r3
 801176a:	230b      	movs	r3, #11
 801176c:	18fb      	adds	r3, r7, r3
 801176e:	1c02      	adds	r2, r0, #0
 8011770:	701a      	strb	r2, [r3, #0]
 8011772:	2308      	movs	r3, #8
 8011774:	18fb      	adds	r3, r7, r3
 8011776:	1c0a      	adds	r2, r1, #0
 8011778:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801177a:	232f      	movs	r3, #47	; 0x2f
 801177c:	18fb      	adds	r3, r7, r3
 801177e:	2203      	movs	r2, #3
 8011780:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011782:	4b90      	ldr	r3, [pc, #576]	; (80119c4 <Send+0x268>)
 8011784:	4a90      	ldr	r2, [pc, #576]	; (80119c8 <Send+0x26c>)
 8011786:	589a      	ldr	r2, [r3, r2]
 8011788:	232e      	movs	r3, #46	; 0x2e
 801178a:	18fb      	adds	r3, r7, r3
 801178c:	2185      	movs	r1, #133	; 0x85
 801178e:	5c52      	ldrb	r2, [r2, r1]
 8011790:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011792:	4b8c      	ldr	r3, [pc, #560]	; (80119c4 <Send+0x268>)
 8011794:	4a8c      	ldr	r2, [pc, #560]	; (80119c8 <Send+0x26c>)
 8011796:	589a      	ldr	r2, [r3, r2]
 8011798:	232d      	movs	r3, #45	; 0x2d
 801179a:	18fb      	adds	r3, r7, r3
 801179c:	2184      	movs	r1, #132	; 0x84
 801179e:	5c52      	ldrb	r2, [r2, r1]
 80117a0:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80117a2:	4b88      	ldr	r3, [pc, #544]	; (80119c4 <Send+0x268>)
 80117a4:	4a88      	ldr	r2, [pc, #544]	; (80119c8 <Send+0x26c>)
 80117a6:	589b      	ldr	r3, [r3, r2]
 80117a8:	2280      	movs	r2, #128	; 0x80
 80117aa:	589b      	ldr	r3, [r3, r2]
 80117ac:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80117ae:	4b85      	ldr	r3, [pc, #532]	; (80119c4 <Send+0x268>)
 80117b0:	4a85      	ldr	r2, [pc, #532]	; (80119c8 <Send+0x26c>)
 80117b2:	589a      	ldr	r2, [r3, r2]
 80117b4:	23b2      	movs	r3, #178	; 0xb2
 80117b6:	005b      	lsls	r3, r3, #1
 80117b8:	5cd3      	ldrb	r3, [r2, r3]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d101      	bne.n	80117c2 <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80117be:	2307      	movs	r3, #7
 80117c0:	e0fb      	b.n	80119ba <Send+0x25e>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 80117c2:	4b80      	ldr	r3, [pc, #512]	; (80119c4 <Send+0x268>)
 80117c4:	4a80      	ldr	r2, [pc, #512]	; (80119c8 <Send+0x26c>)
 80117c6:	589b      	ldr	r3, [r3, r2]
 80117c8:	22c8      	movs	r2, #200	; 0xc8
 80117ca:	5c9b      	ldrb	r3, [r3, r2]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d106      	bne.n	80117de <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 80117d0:	4b7c      	ldr	r3, [pc, #496]	; (80119c4 <Send+0x268>)
 80117d2:	4a7d      	ldr	r2, [pc, #500]	; (80119c8 <Send+0x26c>)
 80117d4:	589a      	ldr	r2, [r3, r2]
 80117d6:	23aa      	movs	r3, #170	; 0xaa
 80117d8:	005b      	lsls	r3, r3, #1
 80117da:	2100      	movs	r1, #0
 80117dc:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 80117de:	242c      	movs	r4, #44	; 0x2c
 80117e0:	193b      	adds	r3, r7, r4
 80117e2:	2200      	movs	r2, #0
 80117e4:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 80117e6:	193b      	adds	r3, r7, r4
 80117e8:	781a      	ldrb	r2, [r3, #0]
 80117ea:	210f      	movs	r1, #15
 80117ec:	438a      	bics	r2, r1
 80117ee:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 80117f0:	4b74      	ldr	r3, [pc, #464]	; (80119c4 <Send+0x268>)
 80117f2:	4a75      	ldr	r2, [pc, #468]	; (80119c8 <Send+0x26c>)
 80117f4:	589b      	ldr	r3, [r3, r2]
 80117f6:	227e      	movs	r2, #126	; 0x7e
 80117f8:	5c9a      	ldrb	r2, [r3, r2]
 80117fa:	193b      	adds	r3, r7, r4
 80117fc:	01d0      	lsls	r0, r2, #7
 80117fe:	781a      	ldrb	r2, [r3, #0]
 8011800:	217f      	movs	r1, #127	; 0x7f
 8011802:	400a      	ands	r2, r1
 8011804:	1c11      	adds	r1, r2, #0
 8011806:	1c02      	adds	r2, r0, #0
 8011808:	430a      	orrs	r2, r1
 801180a:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 801180c:	4b6d      	ldr	r3, [pc, #436]	; (80119c4 <Send+0x268>)
 801180e:	4a6e      	ldr	r2, [pc, #440]	; (80119c8 <Send+0x26c>)
 8011810:	589b      	ldr	r3, [r3, r2]
 8011812:	227c      	movs	r2, #124	; 0x7c
 8011814:	5c9b      	ldrb	r3, [r3, r2]
 8011816:	2b01      	cmp	r3, #1
 8011818:	d105      	bne.n	8011826 <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 801181a:	193b      	adds	r3, r7, r4
 801181c:	781a      	ldrb	r2, [r3, #0]
 801181e:	2110      	movs	r1, #16
 8011820:	430a      	orrs	r2, r1
 8011822:	701a      	strb	r2, [r3, #0]
 8011824:	e005      	b.n	8011832 <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011826:	232c      	movs	r3, #44	; 0x2c
 8011828:	18fb      	adds	r3, r7, r3
 801182a:	781a      	ldrb	r2, [r3, #0]
 801182c:	2110      	movs	r1, #16
 801182e:	438a      	bics	r2, r1
 8011830:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8011832:	4b64      	ldr	r3, [pc, #400]	; (80119c4 <Send+0x268>)
 8011834:	4a64      	ldr	r2, [pc, #400]	; (80119c8 <Send+0x26c>)
 8011836:	589a      	ldr	r2, [r3, r2]
 8011838:	234c      	movs	r3, #76	; 0x4c
 801183a:	33ff      	adds	r3, #255	; 0xff
 801183c:	5cd3      	ldrb	r3, [r2, r3]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d005      	beq.n	801184e <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 8011842:	232c      	movs	r3, #44	; 0x2c
 8011844:	18fb      	adds	r3, r7, r3
 8011846:	781a      	ldrb	r2, [r3, #0]
 8011848:	2120      	movs	r1, #32
 801184a:	430a      	orrs	r2, r1
 801184c:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 801184e:	4b5d      	ldr	r3, [pc, #372]	; (80119c4 <Send+0x268>)
 8011850:	4a5d      	ldr	r2, [pc, #372]	; (80119c8 <Send+0x26c>)
 8011852:	5899      	ldr	r1, [r3, r2]
 8011854:	2014      	movs	r0, #20
 8011856:	183b      	adds	r3, r7, r0
 8011858:	22b0      	movs	r2, #176	; 0xb0
 801185a:	0052      	lsls	r2, r2, #1
 801185c:	588a      	ldr	r2, [r1, r2]
 801185e:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 8011860:	0001      	movs	r1, r0
 8011862:	187b      	adds	r3, r7, r1
 8011864:	2201      	movs	r2, #1
 8011866:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011868:	242c      	movs	r4, #44	; 0x2c
 801186a:	193b      	adds	r3, r7, r4
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	061b      	lsls	r3, r3, #24
 8011870:	0fdb      	lsrs	r3, r3, #31
 8011872:	b2db      	uxtb	r3, r3
 8011874:	1e5a      	subs	r2, r3, #1
 8011876:	4193      	sbcs	r3, r2
 8011878:	b2da      	uxtb	r2, r3
 801187a:	187b      	adds	r3, r7, r1
 801187c:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801187e:	4b51      	ldr	r3, [pc, #324]	; (80119c4 <Send+0x268>)
 8011880:	4a51      	ldr	r2, [pc, #324]	; (80119c8 <Send+0x26c>)
 8011882:	589b      	ldr	r3, [r3, r2]
 8011884:	2280      	movs	r2, #128	; 0x80
 8011886:	589a      	ldr	r2, [r3, r2]
 8011888:	0008      	movs	r0, r1
 801188a:	183b      	adds	r3, r7, r0
 801188c:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801188e:	4a4d      	ldr	r2, [pc, #308]	; (80119c4 <Send+0x268>)
 8011890:	23fd      	movs	r3, #253	; 0xfd
 8011892:	009b      	lsls	r3, r3, #2
 8011894:	5ad2      	ldrh	r2, [r2, r3]
 8011896:	183b      	adds	r3, r7, r0
 8011898:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801189a:	4b4a      	ldr	r3, [pc, #296]	; (80119c4 <Send+0x268>)
 801189c:	4a4b      	ldr	r2, [pc, #300]	; (80119cc <Send+0x270>)
 801189e:	5a9a      	ldrh	r2, [r3, r2]
 80118a0:	183b      	adds	r3, r7, r0
 80118a2:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80118a4:	4b47      	ldr	r3, [pc, #284]	; (80119c4 <Send+0x268>)
 80118a6:	4a48      	ldr	r2, [pc, #288]	; (80119c8 <Send+0x26c>)
 80118a8:	589b      	ldr	r3, [r3, r2]
 80118aa:	2285      	movs	r2, #133	; 0x85
 80118ac:	569a      	ldrsb	r2, [r3, r2]
 80118ae:	183b      	adds	r3, r7, r0
 80118b0:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80118b2:	4b44      	ldr	r3, [pc, #272]	; (80119c4 <Send+0x268>)
 80118b4:	4a44      	ldr	r2, [pc, #272]	; (80119c8 <Send+0x26c>)
 80118b6:	589b      	ldr	r3, [r3, r2]
 80118b8:	2284      	movs	r2, #132	; 0x84
 80118ba:	569a      	ldrsb	r2, [r3, r2]
 80118bc:	183b      	adds	r3, r7, r0
 80118be:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80118c0:	4b40      	ldr	r3, [pc, #256]	; (80119c4 <Send+0x268>)
 80118c2:	4a41      	ldr	r2, [pc, #260]	; (80119c8 <Send+0x26c>)
 80118c4:	589b      	ldr	r3, [r3, r2]
 80118c6:	22b8      	movs	r2, #184	; 0xb8
 80118c8:	5c9a      	ldrb	r2, [r3, r2]
 80118ca:	183b      	adds	r3, r7, r0
 80118cc:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 80118ce:	4b3d      	ldr	r3, [pc, #244]	; (80119c4 <Send+0x268>)
 80118d0:	4a3d      	ldr	r2, [pc, #244]	; (80119c8 <Send+0x26c>)
 80118d2:	589b      	ldr	r3, [r3, r2]
 80118d4:	781a      	ldrb	r2, [r3, #0]
 80118d6:	183b      	adds	r3, r7, r0
 80118d8:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80118da:	4b3a      	ldr	r3, [pc, #232]	; (80119c4 <Send+0x268>)
 80118dc:	4a3a      	ldr	r2, [pc, #232]	; (80119c8 <Send+0x26c>)
 80118de:	589b      	ldr	r3, [r3, r2]
 80118e0:	3385      	adds	r3, #133	; 0x85
 80118e2:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 80118e4:	4b37      	ldr	r3, [pc, #220]	; (80119c4 <Send+0x268>)
 80118e6:	4a38      	ldr	r2, [pc, #224]	; (80119c8 <Send+0x26c>)
 80118e8:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80118ea:	3384      	adds	r3, #132	; 0x84
 80118ec:	001a      	movs	r2, r3
 80118ee:	2328      	movs	r3, #40	; 0x28
 80118f0:	18fb      	adds	r3, r7, r3
 80118f2:	1838      	adds	r0, r7, r0
 80118f4:	f002 fff7 	bl	80148e6 <LoRaMacAdrCalcNext>
 80118f8:	0003      	movs	r3, r0
 80118fa:	0019      	movs	r1, r3
 80118fc:	0026      	movs	r6, r4
 80118fe:	193b      	adds	r3, r7, r4
 8011900:	2201      	movs	r2, #1
 8011902:	400a      	ands	r2, r1
 8011904:	0190      	lsls	r0, r2, #6
 8011906:	781a      	ldrb	r2, [r3, #0]
 8011908:	2140      	movs	r1, #64	; 0x40
 801190a:	438a      	bics	r2, r1
 801190c:	1c11      	adds	r1, r2, #0
 801190e:	1c02      	adds	r2, r0, #0
 8011910:	430a      	orrs	r2, r1
 8011912:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011914:	222f      	movs	r2, #47	; 0x2f
 8011916:	18bc      	adds	r4, r7, r2
 8011918:	687d      	ldr	r5, [r7, #4]
 801191a:	230b      	movs	r3, #11
 801191c:	18fb      	adds	r3, r7, r3
 801191e:	781a      	ldrb	r2, [r3, #0]
 8011920:	19b9      	adds	r1, r7, r6
 8011922:	68f8      	ldr	r0, [r7, #12]
 8011924:	2308      	movs	r3, #8
 8011926:	18fb      	adds	r3, r7, r3
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	9300      	str	r3, [sp, #0]
 801192c:	002b      	movs	r3, r5
 801192e:	f000 fd07 	bl	8012340 <PrepareFrame>
 8011932:	0003      	movs	r3, r0
 8011934:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011936:	222f      	movs	r2, #47	; 0x2f
 8011938:	18bb      	adds	r3, r7, r2
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d003      	beq.n	8011948 <Send+0x1ec>
 8011940:	18bb      	adds	r3, r7, r2
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	2b0a      	cmp	r3, #10
 8011946:	d10c      	bne.n	8011962 <Send+0x206>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011948:	232f      	movs	r3, #47	; 0x2f
 801194a:	18fc      	adds	r4, r7, r3
 801194c:	2340      	movs	r3, #64	; 0x40
 801194e:	2208      	movs	r2, #8
 8011950:	4694      	mov	ip, r2
 8011952:	44bc      	add	ip, r7
 8011954:	4463      	add	r3, ip
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	0018      	movs	r0, r3
 801195a:	f000 f9cd 	bl	8011cf8 <ScheduleTx>
 801195e:	0003      	movs	r3, r0
 8011960:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011962:	232f      	movs	r3, #47	; 0x2f
 8011964:	18fb      	adds	r3, r7, r3
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d010      	beq.n	801198e <Send+0x232>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 801196c:	4b15      	ldr	r3, [pc, #84]	; (80119c4 <Send+0x268>)
 801196e:	4a16      	ldr	r2, [pc, #88]	; (80119c8 <Send+0x26c>)
 8011970:	589b      	ldr	r3, [r3, r2]
 8011972:	222e      	movs	r2, #46	; 0x2e
 8011974:	18ba      	adds	r2, r7, r2
 8011976:	2185      	movs	r1, #133	; 0x85
 8011978:	7812      	ldrb	r2, [r2, #0]
 801197a:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 801197c:	4b11      	ldr	r3, [pc, #68]	; (80119c4 <Send+0x268>)
 801197e:	4a12      	ldr	r2, [pc, #72]	; (80119c8 <Send+0x26c>)
 8011980:	589b      	ldr	r3, [r3, r2]
 8011982:	222d      	movs	r2, #45	; 0x2d
 8011984:	18ba      	adds	r2, r7, r2
 8011986:	2184      	movs	r1, #132	; 0x84
 8011988:	7812      	ldrb	r2, [r2, #0]
 801198a:	545a      	strb	r2, [r3, r1]
 801198c:	e012      	b.n	80119b4 <Send+0x258>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 801198e:	4b0d      	ldr	r3, [pc, #52]	; (80119c4 <Send+0x268>)
 8011990:	4a0d      	ldr	r2, [pc, #52]	; (80119c8 <Send+0x26c>)
 8011992:	589a      	ldr	r2, [r3, r2]
 8011994:	234c      	movs	r3, #76	; 0x4c
 8011996:	33ff      	adds	r3, #255	; 0xff
 8011998:	2100      	movs	r1, #0
 801199a:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 801199c:	4b09      	ldr	r3, [pc, #36]	; (80119c4 <Send+0x268>)
 801199e:	4a0a      	ldr	r2, [pc, #40]	; (80119c8 <Send+0x26c>)
 80119a0:	589b      	ldr	r3, [r3, r2]
 80119a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119a4:	2180      	movs	r1, #128	; 0x80
 80119a6:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80119a8:	f003 fa92 	bl	8014ed0 <LoRaMacCommandsRemoveNoneStickyCmds>
 80119ac:	1e03      	subs	r3, r0, #0
 80119ae:	d001      	beq.n	80119b4 <Send+0x258>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80119b0:	2313      	movs	r3, #19
 80119b2:	e002      	b.n	80119ba <Send+0x25e>
        }
    }
    return status;
 80119b4:	232f      	movs	r3, #47	; 0x2f
 80119b6:	18fb      	adds	r3, r7, r3
 80119b8:	781b      	ldrb	r3, [r3, #0]
}
 80119ba:	0018      	movs	r0, r3
 80119bc:	46bd      	mov	sp, r7
 80119be:	b00d      	add	sp, #52	; 0x34
 80119c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119c2:	46c0      	nop			; (mov r8, r8)
 80119c4:	200005b8 	.word	0x200005b8
 80119c8:	00000484 	.word	0x00000484
 80119cc:	000003f6 	.word	0x000003f6

080119d0 <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 80119d0:	b5b0      	push	{r4, r5, r7, lr}
 80119d2:	b084      	sub	sp, #16
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	0002      	movs	r2, r0
 80119d8:	1dfb      	adds	r3, r7, #7
 80119da:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80119dc:	230e      	movs	r3, #14
 80119de:	18fb      	adds	r3, r7, r3
 80119e0:	2200      	movs	r2, #0
 80119e2:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 80119e4:	240c      	movs	r4, #12
 80119e6:	193b      	adds	r3, r7, r4
 80119e8:	2200      	movs	r2, #0
 80119ea:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 80119ec:	250f      	movs	r5, #15
 80119ee:	197b      	adds	r3, r7, r5
 80119f0:	2201      	movs	r2, #1
 80119f2:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 80119f4:	1dfb      	adds	r3, r7, #7
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	2bff      	cmp	r3, #255	; 0xff
 80119fa:	d130      	bne.n	8011a5e <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80119fc:	2000      	movs	r0, #0
 80119fe:	f7fe ff7b 	bl	80108f8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011a02:	4a21      	ldr	r2, [pc, #132]	; (8011a88 <SendReJoinReq+0xb8>)
 8011a04:	2382      	movs	r3, #130	; 0x82
 8011a06:	005b      	lsls	r3, r3, #1
 8011a08:	2100      	movs	r1, #0
 8011a0a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011a0c:	4a1e      	ldr	r2, [pc, #120]	; (8011a88 <SendReJoinReq+0xb8>)
 8011a0e:	2384      	movs	r3, #132	; 0x84
 8011a10:	005b      	lsls	r3, r3, #1
 8011a12:	491e      	ldr	r1, [pc, #120]	; (8011a8c <SendReJoinReq+0xbc>)
 8011a14:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011a16:	4a1c      	ldr	r2, [pc, #112]	; (8011a88 <SendReJoinReq+0xb8>)
 8011a18:	2386      	movs	r3, #134	; 0x86
 8011a1a:	005b      	lsls	r3, r3, #1
 8011a1c:	21ff      	movs	r1, #255	; 0xff
 8011a1e:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011a20:	193b      	adds	r3, r7, r4
 8011a22:	781a      	ldrb	r2, [r3, #0]
 8011a24:	211f      	movs	r1, #31
 8011a26:	400a      	ands	r2, r1
 8011a28:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011a2a:	193b      	adds	r3, r7, r4
 8011a2c:	7819      	ldrb	r1, [r3, #0]
 8011a2e:	4a16      	ldr	r2, [pc, #88]	; (8011a88 <SendReJoinReq+0xb8>)
 8011a30:	230e      	movs	r3, #14
 8011a32:	33ff      	adds	r3, #255	; 0xff
 8011a34:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011a36:	f7fc fa7b 	bl	800df30 <SecureElementGetJoinEui>
 8011a3a:	0001      	movs	r1, r0
 8011a3c:	4b14      	ldr	r3, [pc, #80]	; (8011a90 <SendReJoinReq+0xc0>)
 8011a3e:	2208      	movs	r2, #8
 8011a40:	0018      	movs	r0, r3
 8011a42:	f007 fde9 	bl	8019618 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8011a46:	f7fc fa4f 	bl	800dee8 <SecureElementGetDevEui>
 8011a4a:	0001      	movs	r1, r0
 8011a4c:	4b11      	ldr	r3, [pc, #68]	; (8011a94 <SendReJoinReq+0xc4>)
 8011a4e:	2208      	movs	r2, #8
 8011a50:	0018      	movs	r0, r3
 8011a52:	f007 fde1 	bl	8019618 <memcpy1>

            allowDelayedTx = false;
 8011a56:	197b      	adds	r3, r7, r5
 8011a58:	2200      	movs	r2, #0
 8011a5a:	701a      	strb	r2, [r3, #0]

            break;
 8011a5c:	e004      	b.n	8011a68 <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011a5e:	230e      	movs	r3, #14
 8011a60:	18fb      	adds	r3, r7, r3
 8011a62:	2202      	movs	r2, #2
 8011a64:	701a      	strb	r2, [r3, #0]
            break;
 8011a66:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011a68:	250e      	movs	r5, #14
 8011a6a:	197c      	adds	r4, r7, r5
 8011a6c:	230f      	movs	r3, #15
 8011a6e:	18fb      	adds	r3, r7, r3
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	0018      	movs	r0, r3
 8011a74:	f000 f940 	bl	8011cf8 <ScheduleTx>
 8011a78:	0003      	movs	r3, r0
 8011a7a:	7023      	strb	r3, [r4, #0]
    return status;
 8011a7c:	197b      	adds	r3, r7, r5
 8011a7e:	781b      	ldrb	r3, [r3, #0]
}
 8011a80:	0018      	movs	r0, r3
 8011a82:	46bd      	mov	sp, r7
 8011a84:	b004      	add	sp, #16
 8011a86:	bdb0      	pop	{r4, r5, r7, pc}
 8011a88:	200005b8 	.word	0x200005b8
 8011a8c:	200005ba 	.word	0x200005ba
 8011a90:	200006c6 	.word	0x200006c6
 8011a94:	200006ce 	.word	0x200006ce

08011a98 <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011a9c:	f002 ffa2 	bl	80149e4 <LoRaMacClassBIsBeaconExpected>
 8011aa0:	1e03      	subs	r3, r0, #0
 8011aa2:	d001      	beq.n	8011aa8 <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011aa4:	230e      	movs	r3, #14
 8011aa6:	e013      	b.n	8011ad0 <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011aa8:	4b0b      	ldr	r3, [pc, #44]	; (8011ad8 <CheckForClassBCollision+0x40>)
 8011aaa:	4a0c      	ldr	r2, [pc, #48]	; (8011adc <CheckForClassBCollision+0x44>)
 8011aac:	589b      	ldr	r3, [r3, r2]
 8011aae:	227c      	movs	r2, #124	; 0x7c
 8011ab0:	5c9b      	ldrb	r3, [r3, r2]
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	d10b      	bne.n	8011ace <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011ab6:	f002 ff9b 	bl	80149f0 <LoRaMacClassBIsPingExpected>
 8011aba:	1e03      	subs	r3, r0, #0
 8011abc:	d001      	beq.n	8011ac2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011abe:	230f      	movs	r3, #15
 8011ac0:	e006      	b.n	8011ad0 <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011ac2:	f002 ff9b 	bl	80149fc <LoRaMacClassBIsMulticastExpected>
 8011ac6:	1e03      	subs	r3, r0, #0
 8011ac8:	d001      	beq.n	8011ace <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011aca:	230f      	movs	r3, #15
 8011acc:	e000      	b.n	8011ad0 <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 8011ace:	2300      	movs	r3, #0
}
 8011ad0:	0018      	movs	r0, r3
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
 8011ad6:	46c0      	nop			; (mov r8, r8)
 8011ad8:	200005b8 	.word	0x200005b8
 8011adc:	00000484 	.word	0x00000484

08011ae0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011ae0:	b5b0      	push	{r4, r5, r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011ae6:	4b44      	ldr	r3, [pc, #272]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011ae8:	4a44      	ldr	r2, [pc, #272]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011aea:	589b      	ldr	r3, [r3, r2]
 8011aec:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011aee:	4b42      	ldr	r3, [pc, #264]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011af0:	4a42      	ldr	r2, [pc, #264]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011af2:	589b      	ldr	r3, [r3, r2]
 8011af4:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 8011af6:	4b40      	ldr	r3, [pc, #256]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011af8:	4a40      	ldr	r2, [pc, #256]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011afa:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011afc:	22b9      	movs	r2, #185	; 0xb9
 8011afe:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011b00:	4b3d      	ldr	r3, [pc, #244]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b02:	4a3e      	ldr	r2, [pc, #248]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011b04:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011b06:	2285      	movs	r2, #133	; 0x85
 8011b08:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8011b0a:	4b3b      	ldr	r3, [pc, #236]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b0c:	4d3b      	ldr	r5, [pc, #236]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011b0e:	595b      	ldr	r3, [r3, r5]
 8011b10:	25a5      	movs	r5, #165	; 0xa5
 8011b12:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011b14:	b25b      	sxtb	r3, r3
 8011b16:	f005 fad1 	bl	80170bc <RegionApplyDrOffset>
 8011b1a:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b1c:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011b1e:	4b36      	ldr	r3, [pc, #216]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b20:	4a36      	ldr	r2, [pc, #216]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011b22:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b24:	228c      	movs	r2, #140	; 0x8c
 8011b26:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011b28:	4b33      	ldr	r3, [pc, #204]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b2a:	4834      	ldr	r0, [pc, #208]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011b2c:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b2e:	2088      	movs	r0, #136	; 0x88
 8011b30:	5818      	ldr	r0, [r3, r0]
 8011b32:	4b33      	ldr	r3, [pc, #204]	; (8011c00 <ComputeRxWindowParameters+0x120>)
 8011b34:	9300      	str	r3, [sp, #0]
 8011b36:	0003      	movs	r3, r0
 8011b38:	0020      	movs	r0, r4
 8011b3a:	f005 f99d 	bl	8016e78 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b3e:	4b2e      	ldr	r3, [pc, #184]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b40:	4a2e      	ldr	r2, [pc, #184]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011b42:	589b      	ldr	r3, [r3, r2]
 8011b44:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8011b46:	4b2c      	ldr	r3, [pc, #176]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b48:	4a2c      	ldr	r2, [pc, #176]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011b4a:	589b      	ldr	r3, [r3, r2]
 8011b4c:	22ac      	movs	r2, #172	; 0xac
 8011b4e:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b50:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011b52:	4b29      	ldr	r3, [pc, #164]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b54:	4a29      	ldr	r2, [pc, #164]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011b56:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b58:	228c      	movs	r2, #140	; 0x8c
 8011b5a:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011b5c:	4b26      	ldr	r3, [pc, #152]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b5e:	4c27      	ldr	r4, [pc, #156]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011b60:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011b62:	2488      	movs	r4, #136	; 0x88
 8011b64:	591c      	ldr	r4, [r3, r4]
 8011b66:	4b27      	ldr	r3, [pc, #156]	; (8011c04 <ComputeRxWindowParameters+0x124>)
 8011b68:	9300      	str	r3, [sp, #0]
 8011b6a:	0023      	movs	r3, r4
 8011b6c:	f005 f984 	bl	8016e78 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011b70:	4b21      	ldr	r3, [pc, #132]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b72:	4a22      	ldr	r2, [pc, #136]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011b74:	589b      	ldr	r3, [r3, r2]
 8011b76:	2294      	movs	r2, #148	; 0x94
 8011b78:	589b      	ldr	r3, [r3, r2]
 8011b7a:	491f      	ldr	r1, [pc, #124]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b7c:	22f1      	movs	r2, #241	; 0xf1
 8011b7e:	0092      	lsls	r2, r2, #2
 8011b80:	588a      	ldr	r2, [r1, r2]
 8011b82:	1899      	adds	r1, r3, r2
 8011b84:	4a1c      	ldr	r2, [pc, #112]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b86:	23ec      	movs	r3, #236	; 0xec
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011b8c:	4b1a      	ldr	r3, [pc, #104]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b8e:	4a1b      	ldr	r2, [pc, #108]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011b90:	589b      	ldr	r3, [r3, r2]
 8011b92:	2298      	movs	r2, #152	; 0x98
 8011b94:	589b      	ldr	r3, [r3, r2]
 8011b96:	4918      	ldr	r1, [pc, #96]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011b98:	22f6      	movs	r2, #246	; 0xf6
 8011b9a:	0092      	lsls	r2, r2, #2
 8011b9c:	588a      	ldr	r2, [r1, r2]
 8011b9e:	1899      	adds	r1, r3, r2
 8011ba0:	4a15      	ldr	r2, [pc, #84]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011ba2:	23ed      	movs	r3, #237	; 0xed
 8011ba4:	009b      	lsls	r3, r3, #2
 8011ba6:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011ba8:	4b13      	ldr	r3, [pc, #76]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011baa:	4a14      	ldr	r2, [pc, #80]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011bac:	589a      	ldr	r2, [r3, r2]
 8011bae:	23b2      	movs	r3, #178	; 0xb2
 8011bb0:	005b      	lsls	r3, r3, #1
 8011bb2:	5cd3      	ldrb	r3, [r2, r3]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d11b      	bne.n	8011bf0 <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011bb8:	4b0f      	ldr	r3, [pc, #60]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011bba:	4a10      	ldr	r2, [pc, #64]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011bbc:	589b      	ldr	r3, [r3, r2]
 8011bbe:	229c      	movs	r2, #156	; 0x9c
 8011bc0:	589b      	ldr	r3, [r3, r2]
 8011bc2:	490d      	ldr	r1, [pc, #52]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011bc4:	22f1      	movs	r2, #241	; 0xf1
 8011bc6:	0092      	lsls	r2, r2, #2
 8011bc8:	588a      	ldr	r2, [r1, r2]
 8011bca:	1899      	adds	r1, r3, r2
 8011bcc:	4a0a      	ldr	r2, [pc, #40]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011bce:	23ec      	movs	r3, #236	; 0xec
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011bd4:	4b08      	ldr	r3, [pc, #32]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011bd6:	4a09      	ldr	r2, [pc, #36]	; (8011bfc <ComputeRxWindowParameters+0x11c>)
 8011bd8:	589b      	ldr	r3, [r3, r2]
 8011bda:	22a0      	movs	r2, #160	; 0xa0
 8011bdc:	589b      	ldr	r3, [r3, r2]
 8011bde:	4906      	ldr	r1, [pc, #24]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011be0:	22f6      	movs	r2, #246	; 0xf6
 8011be2:	0092      	lsls	r2, r2, #2
 8011be4:	588a      	ldr	r2, [r1, r2]
 8011be6:	1899      	adds	r1, r3, r2
 8011be8:	4a03      	ldr	r2, [pc, #12]	; (8011bf8 <ComputeRxWindowParameters+0x118>)
 8011bea:	23ed      	movs	r3, #237	; 0xed
 8011bec:	009b      	lsls	r3, r3, #2
 8011bee:	50d1      	str	r1, [r2, r3]
    }
}
 8011bf0:	46c0      	nop			; (mov r8, r8)
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8011bf6:	46c0      	nop			; (mov r8, r8)
 8011bf8:	200005b8 	.word	0x200005b8
 8011bfc:	00000484 	.word	0x00000484
 8011c00:	20000970 	.word	0x20000970
 8011c04:	20000984 	.word	0x20000984

08011c08 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8011c12:	4b15      	ldr	r3, [pc, #84]	; (8011c68 <VerifyTxFrame+0x60>)
 8011c14:	4a15      	ldr	r2, [pc, #84]	; (8011c6c <VerifyTxFrame+0x64>)
 8011c16:	589a      	ldr	r2, [r3, r2]
 8011c18:	23b2      	movs	r3, #178	; 0xb2
 8011c1a:	005b      	lsls	r3, r3, #1
 8011c1c:	5cd3      	ldrb	r3, [r2, r3]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d01d      	beq.n	8011c5e <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011c22:	1d3b      	adds	r3, r7, #4
 8011c24:	0018      	movs	r0, r3
 8011c26:	f003 f99f 	bl	8014f68 <LoRaMacCommandsGetSizeSerializedCmds>
 8011c2a:	1e03      	subs	r3, r0, #0
 8011c2c:	d001      	beq.n	8011c32 <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011c2e:	2313      	movs	r3, #19
 8011c30:	e016      	b.n	8011c60 <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8011c32:	4b0d      	ldr	r3, [pc, #52]	; (8011c68 <VerifyTxFrame+0x60>)
 8011c34:	4a0e      	ldr	r2, [pc, #56]	; (8011c70 <VerifyTxFrame+0x68>)
 8011c36:	5c98      	ldrb	r0, [r3, r2]
 8011c38:	4b0b      	ldr	r3, [pc, #44]	; (8011c68 <VerifyTxFrame+0x60>)
 8011c3a:	4a0c      	ldr	r2, [pc, #48]	; (8011c6c <VerifyTxFrame+0x64>)
 8011c3c:	589b      	ldr	r3, [r3, r2]
 8011c3e:	2285      	movs	r2, #133	; 0x85
 8011c40:	569b      	ldrsb	r3, [r3, r2]
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	b2d2      	uxtb	r2, r2
 8011c46:	0019      	movs	r1, r3
 8011c48:	f7fe ffb0 	bl	8010bac <ValidatePayloadLength>
 8011c4c:	0003      	movs	r3, r0
 8011c4e:	001a      	movs	r2, r3
 8011c50:	2301      	movs	r3, #1
 8011c52:	4053      	eors	r3, r2
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d001      	beq.n	8011c5e <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011c5a:	2308      	movs	r3, #8
 8011c5c:	e000      	b.n	8011c60 <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 8011c5e:	2300      	movs	r3, #0
}
 8011c60:	0018      	movs	r0, r3
 8011c62:	46bd      	mov	sp, r7
 8011c64:	b002      	add	sp, #8
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	200005b8 	.word	0x200005b8
 8011c6c:	00000484 	.word	0x00000484
 8011c70:	00000237 	.word	0x00000237

08011c74 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011c74:	b590      	push	{r4, r7, lr}
 8011c76:	b083      	sub	sp, #12
 8011c78:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011c7a:	4a1d      	ldr	r2, [pc, #116]	; (8011cf0 <SerializeTxFrame+0x7c>)
 8011c7c:	2382      	movs	r3, #130	; 0x82
 8011c7e:	005b      	lsls	r3, r3, #1
 8011c80:	5cd3      	ldrb	r3, [r2, r3]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d002      	beq.n	8011c8c <SerializeTxFrame+0x18>
 8011c86:	2b04      	cmp	r3, #4
 8011c88:	d015      	beq.n	8011cb6 <SerializeTxFrame+0x42>
 8011c8a:	e029      	b.n	8011ce0 <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011c8c:	1dfc      	adds	r4, r7, #7
 8011c8e:	4b19      	ldr	r3, [pc, #100]	; (8011cf4 <SerializeTxFrame+0x80>)
 8011c90:	0018      	movs	r0, r3
 8011c92:	f004 fe6b 	bl	801696c <LoRaMacSerializerJoinRequest>
 8011c96:	0003      	movs	r3, r0
 8011c98:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011c9a:	1dfb      	adds	r3, r7, #7
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d001      	beq.n	8011ca6 <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ca2:	2311      	movs	r3, #17
 8011ca4:	e01f      	b.n	8011ce6 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011ca6:	4a12      	ldr	r2, [pc, #72]	; (8011cf0 <SerializeTxFrame+0x7c>)
 8011ca8:	2386      	movs	r3, #134	; 0x86
 8011caa:	005b      	lsls	r3, r3, #1
 8011cac:	5cd3      	ldrb	r3, [r2, r3]
 8011cae:	b29a      	uxth	r2, r3
 8011cb0:	4b0f      	ldr	r3, [pc, #60]	; (8011cf0 <SerializeTxFrame+0x7c>)
 8011cb2:	801a      	strh	r2, [r3, #0]
            break;
 8011cb4:	e016      	b.n	8011ce4 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011cb6:	1dfc      	adds	r4, r7, #7
 8011cb8:	4b0e      	ldr	r3, [pc, #56]	; (8011cf4 <SerializeTxFrame+0x80>)
 8011cba:	0018      	movs	r0, r3
 8011cbc:	f004 fef1 	bl	8016aa2 <LoRaMacSerializerData>
 8011cc0:	0003      	movs	r3, r0
 8011cc2:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011cc4:	1dfb      	adds	r3, r7, #7
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d001      	beq.n	8011cd0 <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ccc:	2311      	movs	r3, #17
 8011cce:	e00a      	b.n	8011ce6 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011cd0:	4a07      	ldr	r2, [pc, #28]	; (8011cf0 <SerializeTxFrame+0x7c>)
 8011cd2:	2386      	movs	r3, #134	; 0x86
 8011cd4:	005b      	lsls	r3, r3, #1
 8011cd6:	5cd3      	ldrb	r3, [r2, r3]
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	4b05      	ldr	r3, [pc, #20]	; (8011cf0 <SerializeTxFrame+0x7c>)
 8011cdc:	801a      	strh	r2, [r3, #0]
            break;
 8011cde:	e001      	b.n	8011ce4 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ce0:	2303      	movs	r3, #3
 8011ce2:	e000      	b.n	8011ce6 <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 8011ce4:	2300      	movs	r3, #0
}
 8011ce6:	0018      	movs	r0, r3
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	b003      	add	sp, #12
 8011cec:	bd90      	pop	{r4, r7, pc}
 8011cee:	46c0      	nop			; (mov r8, r8)
 8011cf0:	200005b8 	.word	0x200005b8
 8011cf4:	200006c0 	.word	0x200006c0

08011cf8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cfa:	b091      	sub	sp, #68	; 0x44
 8011cfc:	af02      	add	r7, sp, #8
 8011cfe:	0002      	movs	r2, r0
 8011d00:	230f      	movs	r3, #15
 8011d02:	18fb      	adds	r3, r7, r3
 8011d04:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d06:	2537      	movs	r5, #55	; 0x37
 8011d08:	197b      	adds	r3, r7, r5
 8011d0a:	2203      	movs	r2, #3
 8011d0c:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011d0e:	197c      	adds	r4, r7, r5
 8011d10:	f7ff fec2 	bl	8011a98 <CheckForClassBCollision>
 8011d14:	0003      	movs	r3, r0
 8011d16:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011d18:	002a      	movs	r2, r5
 8011d1a:	18bb      	adds	r3, r7, r2
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d002      	beq.n	8011d28 <ScheduleTx+0x30>
    {
        return status;
 8011d22:	18bb      	adds	r3, r7, r2
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	e0c3      	b.n	8011eb0 <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 8011d28:	f000 f940 	bl	8011fac <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011d2c:	2537      	movs	r5, #55	; 0x37
 8011d2e:	197c      	adds	r4, r7, r5
 8011d30:	f7ff ffa0 	bl	8011c74 <SerializeTxFrame>
 8011d34:	0003      	movs	r3, r0
 8011d36:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011d38:	002a      	movs	r2, r5
 8011d3a:	18bb      	adds	r3, r7, r2
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d002      	beq.n	8011d48 <ScheduleTx+0x50>
    {
        return status;
 8011d42:	18bb      	adds	r3, r7, r2
 8011d44:	781b      	ldrb	r3, [r3, #0]
 8011d46:	e0b3      	b.n	8011eb0 <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8011d48:	4b5b      	ldr	r3, [pc, #364]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011d4a:	4a5c      	ldr	r2, [pc, #368]	; (8011ebc <ScheduleTx+0x1c4>)
 8011d4c:	589a      	ldr	r2, [r3, r2]
 8011d4e:	23aa      	movs	r3, #170	; 0xaa
 8011d50:	005b      	lsls	r3, r3, #1
 8011d52:	58d2      	ldr	r2, [r2, r3]
 8011d54:	2414      	movs	r4, #20
 8011d56:	193b      	adds	r3, r7, r4
 8011d58:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011d5a:	4b57      	ldr	r3, [pc, #348]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011d5c:	4a57      	ldr	r2, [pc, #348]	; (8011ebc <ScheduleTx+0x1c4>)
 8011d5e:	589b      	ldr	r3, [r3, r2]
 8011d60:	2285      	movs	r2, #133	; 0x85
 8011d62:	569a      	ldrsb	r2, [r3, r2]
 8011d64:	193b      	adds	r3, r7, r4
 8011d66:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8011d68:	4b53      	ldr	r3, [pc, #332]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011d6a:	4a54      	ldr	r2, [pc, #336]	; (8011ebc <ScheduleTx+0x1c4>)
 8011d6c:	589b      	ldr	r3, [r3, r2]
 8011d6e:	22c9      	movs	r2, #201	; 0xc9
 8011d70:	5c9a      	ldrb	r2, [r3, r2]
 8011d72:	193b      	adds	r3, r7, r4
 8011d74:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8011d76:	232c      	movs	r3, #44	; 0x2c
 8011d78:	18fb      	adds	r3, r7, r3
 8011d7a:	0018      	movs	r0, r3
 8011d7c:	f00a ff24 	bl	801cbc8 <SysTimeGetMcuTime>
 8011d80:	4b4d      	ldr	r3, [pc, #308]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011d82:	4a4e      	ldr	r2, [pc, #312]	; (8011ebc <ScheduleTx+0x1c4>)
 8011d84:	5898      	ldr	r0, [r3, r2]
 8011d86:	193d      	adds	r5, r7, r4
 8011d88:	003e      	movs	r6, r7
 8011d8a:	23ac      	movs	r3, #172	; 0xac
 8011d8c:	0059      	lsls	r1, r3, #1
 8011d8e:	232c      	movs	r3, #44	; 0x2c
 8011d90:	18fa      	adds	r2, r7, r3
 8011d92:	2404      	movs	r4, #4
 8011d94:	1843      	adds	r3, r0, r1
 8011d96:	191c      	adds	r4, r3, r4
 8011d98:	466b      	mov	r3, sp
 8011d9a:	6824      	ldr	r4, [r4, #0]
 8011d9c:	601c      	str	r4, [r3, #0]
 8011d9e:	5843      	ldr	r3, [r0, r1]
 8011da0:	6811      	ldr	r1, [r2, #0]
 8011da2:	6852      	ldr	r2, [r2, #4]
 8011da4:	0030      	movs	r0, r6
 8011da6:	f00a fe41 	bl	801ca2c <SysTimeSub>
 8011daa:	003a      	movs	r2, r7
 8011dac:	002b      	movs	r3, r5
 8011dae:	330c      	adds	r3, #12
 8011db0:	ca21      	ldmia	r2!, {r0, r5}
 8011db2:	c321      	stmia	r3!, {r0, r5}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8011db4:	4b40      	ldr	r3, [pc, #256]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011db6:	4a41      	ldr	r2, [pc, #260]	; (8011ebc <ScheduleTx+0x1c4>)
 8011db8:	589a      	ldr	r2, [r3, r2]
 8011dba:	23a8      	movs	r3, #168	; 0xa8
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	58d2      	ldr	r2, [r2, r3]
 8011dc0:	2114      	movs	r1, #20
 8011dc2:	187b      	adds	r3, r7, r1
 8011dc4:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 8011dc6:	187b      	adds	r3, r7, r1
 8011dc8:	2200      	movs	r2, #0
 8011dca:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8011dcc:	187b      	adds	r3, r7, r1
 8011dce:	2201      	movs	r2, #1
 8011dd0:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011dd2:	4b39      	ldr	r3, [pc, #228]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011dd4:	881a      	ldrh	r2, [r3, #0]
 8011dd6:	187b      	adds	r3, r7, r1
 8011dd8:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011dda:	4b37      	ldr	r3, [pc, #220]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011ddc:	4a37      	ldr	r2, [pc, #220]	; (8011ebc <ScheduleTx+0x1c4>)
 8011dde:	589a      	ldr	r2, [r3, r2]
 8011de0:	23b2      	movs	r3, #178	; 0xb2
 8011de2:	005b      	lsls	r3, r3, #1
 8011de4:	5cd3      	ldrb	r3, [r2, r3]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d105      	bne.n	8011df6 <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011dea:	187b      	adds	r3, r7, r1
 8011dec:	2201      	movs	r2, #1
 8011dee:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 8011df0:	187b      	adds	r3, r7, r1
 8011df2:	2200      	movs	r2, #0
 8011df4:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8011df6:	4b30      	ldr	r3, [pc, #192]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011df8:	4a30      	ldr	r2, [pc, #192]	; (8011ebc <ScheduleTx+0x1c4>)
 8011dfa:	589b      	ldr	r3, [r3, r2]
 8011dfc:	7818      	ldrb	r0, [r3, #0]
 8011dfe:	4b2e      	ldr	r3, [pc, #184]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011e00:	4a2e      	ldr	r2, [pc, #184]	; (8011ebc <ScheduleTx+0x1c4>)
 8011e02:	589b      	ldr	r3, [r3, r2]
 8011e04:	3355      	adds	r3, #85	; 0x55
 8011e06:	33ff      	adds	r3, #255	; 0xff
 8011e08:	2637      	movs	r6, #55	; 0x37
 8011e0a:	19bc      	adds	r4, r7, r6
 8011e0c:	4d2c      	ldr	r5, [pc, #176]	; (8011ec0 <ScheduleTx+0x1c8>)
 8011e0e:	4a2d      	ldr	r2, [pc, #180]	; (8011ec4 <ScheduleTx+0x1cc>)
 8011e10:	2114      	movs	r1, #20
 8011e12:	1879      	adds	r1, r7, r1
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	002b      	movs	r3, r5
 8011e18:	f005 f920 	bl	801705c <RegionNextChannel>
 8011e1c:	0003      	movs	r3, r0
 8011e1e:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 8011e20:	19bb      	adds	r3, r7, r6
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d02c      	beq.n	8011e82 <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011e28:	19bb      	adds	r3, r7, r6
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	2b0b      	cmp	r3, #11
 8011e2e:	d124      	bne.n	8011e7a <ScheduleTx+0x182>
 8011e30:	230f      	movs	r3, #15
 8011e32:	18fb      	adds	r3, r7, r3
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d01f      	beq.n	8011e7a <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011e3a:	4a1f      	ldr	r2, [pc, #124]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011e3c:	2391      	movs	r3, #145	; 0x91
 8011e3e:	00db      	lsls	r3, r3, #3
 8011e40:	58d3      	ldr	r3, [r2, r3]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d017      	beq.n	8011e76 <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011e46:	4a1c      	ldr	r2, [pc, #112]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011e48:	23d0      	movs	r3, #208	; 0xd0
 8011e4a:	009b      	lsls	r3, r3, #2
 8011e4c:	58d3      	ldr	r3, [r2, r3]
 8011e4e:	2220      	movs	r2, #32
 8011e50:	431a      	orrs	r2, r3
 8011e52:	0011      	movs	r1, r2
 8011e54:	4a18      	ldr	r2, [pc, #96]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011e56:	23d0      	movs	r3, #208	; 0xd0
 8011e58:	009b      	lsls	r3, r3, #2
 8011e5a:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011e5c:	4a16      	ldr	r2, [pc, #88]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011e5e:	2391      	movs	r3, #145	; 0x91
 8011e60:	00db      	lsls	r3, r3, #3
 8011e62:	58d2      	ldr	r2, [r2, r3]
 8011e64:	4b18      	ldr	r3, [pc, #96]	; (8011ec8 <ScheduleTx+0x1d0>)
 8011e66:	0011      	movs	r1, r2
 8011e68:	0018      	movs	r0, r3
 8011e6a:	f00b f805 	bl	801ce78 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011e6e:	4b16      	ldr	r3, [pc, #88]	; (8011ec8 <ScheduleTx+0x1d0>)
 8011e70:	0018      	movs	r0, r3
 8011e72:	f00a ff11 	bl	801cc98 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011e76:	2300      	movs	r3, #0
 8011e78:	e01a      	b.n	8011eb0 <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011e7a:	2337      	movs	r3, #55	; 0x37
 8011e7c:	18fb      	adds	r3, r7, r3
 8011e7e:	781b      	ldrb	r3, [r3, #0]
 8011e80:	e016      	b.n	8011eb0 <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011e82:	f7ff fe2d 	bl	8011ae0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011e86:	2537      	movs	r5, #55	; 0x37
 8011e88:	197c      	adds	r4, r7, r5
 8011e8a:	f7ff febd 	bl	8011c08 <VerifyTxFrame>
 8011e8e:	0003      	movs	r3, r0
 8011e90:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011e92:	002a      	movs	r2, r5
 8011e94:	18bb      	adds	r3, r7, r2
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d002      	beq.n	8011ea2 <ScheduleTx+0x1aa>
    {
        return status;
 8011e9c:	18bb      	adds	r3, r7, r2
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	e006      	b.n	8011eb0 <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011ea2:	4b05      	ldr	r3, [pc, #20]	; (8011eb8 <ScheduleTx+0x1c0>)
 8011ea4:	4a09      	ldr	r2, [pc, #36]	; (8011ecc <ScheduleTx+0x1d4>)
 8011ea6:	5c9b      	ldrb	r3, [r3, r2]
 8011ea8:	0018      	movs	r0, r3
 8011eaa:	f000 fb99 	bl	80125e0 <SendFrameOnChannel>
 8011eae:	0003      	movs	r3, r0
}
 8011eb0:	0018      	movs	r0, r3
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	b00f      	add	sp, #60	; 0x3c
 8011eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eb8:	200005b8 	.word	0x200005b8
 8011ebc:	00000484 	.word	0x00000484
 8011ec0:	20000a40 	.word	0x20000a40
 8011ec4:	200009cd 	.word	0x200009cd
 8011ec8:	20000920 	.word	0x20000920
 8011ecc:	00000415 	.word	0x00000415

08011ed0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ed2:	b085      	sub	sp, #20
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	0002      	movs	r2, r0
 8011ed8:	1dfb      	adds	r3, r7, #7
 8011eda:	701a      	strb	r2, [r3, #0]
 8011edc:	1dbb      	adds	r3, r7, #6
 8011ede:	1c0a      	adds	r2, r1, #0
 8011ee0:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011ee2:	230f      	movs	r3, #15
 8011ee4:	18fb      	adds	r3, r7, r3
 8011ee6:	2213      	movs	r2, #19
 8011ee8:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 8011eea:	2300      	movs	r3, #0
 8011eec:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011eee:	4a2c      	ldr	r2, [pc, #176]	; (8011fa0 <SecureFrame+0xd0>)
 8011ef0:	2382      	movs	r3, #130	; 0x82
 8011ef2:	005b      	lsls	r3, r3, #1
 8011ef4:	5cd3      	ldrb	r3, [r2, r3]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d002      	beq.n	8011f00 <SecureFrame+0x30>
 8011efa:	2b04      	cmp	r3, #4
 8011efc:	d016      	beq.n	8011f2c <SecureFrame+0x5c>
 8011efe:	e047      	b.n	8011f90 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011f00:	250f      	movs	r5, #15
 8011f02:	197c      	adds	r4, r7, r5
 8011f04:	4b27      	ldr	r3, [pc, #156]	; (8011fa4 <SecureFrame+0xd4>)
 8011f06:	0018      	movs	r0, r3
 8011f08:	f004 f86a 	bl	8015fe0 <LoRaMacCryptoPrepareJoinRequest>
 8011f0c:	0003      	movs	r3, r0
 8011f0e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011f10:	197b      	adds	r3, r7, r5
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d001      	beq.n	8011f1c <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011f18:	2311      	movs	r3, #17
 8011f1a:	e03c      	b.n	8011f96 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011f1c:	4a20      	ldr	r2, [pc, #128]	; (8011fa0 <SecureFrame+0xd0>)
 8011f1e:	2386      	movs	r3, #134	; 0x86
 8011f20:	005b      	lsls	r3, r3, #1
 8011f22:	5cd3      	ldrb	r3, [r2, r3]
 8011f24:	b29a      	uxth	r2, r3
 8011f26:	4b1e      	ldr	r3, [pc, #120]	; (8011fa0 <SecureFrame+0xd0>)
 8011f28:	801a      	strh	r2, [r3, #0]
            break;
 8011f2a:	e033      	b.n	8011f94 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011f2c:	2308      	movs	r3, #8
 8011f2e:	18fb      	adds	r3, r7, r3
 8011f30:	0018      	movs	r0, r3
 8011f32:	f003 ff67 	bl	8015e04 <LoRaMacCryptoGetFCntUp>
 8011f36:	1e03      	subs	r3, r0, #0
 8011f38:	d001      	beq.n	8011f3e <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011f3a:	2312      	movs	r3, #18
 8011f3c:	e02b      	b.n	8011f96 <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011f3e:	4a18      	ldr	r2, [pc, #96]	; (8011fa0 <SecureFrame+0xd0>)
 8011f40:	2382      	movs	r3, #130	; 0x82
 8011f42:	00db      	lsls	r3, r3, #3
 8011f44:	5cd3      	ldrb	r3, [r2, r3]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d104      	bne.n	8011f54 <SecureFrame+0x84>
 8011f4a:	4b15      	ldr	r3, [pc, #84]	; (8011fa0 <SecureFrame+0xd0>)
 8011f4c:	4a16      	ldr	r2, [pc, #88]	; (8011fa8 <SecureFrame+0xd8>)
 8011f4e:	5c9b      	ldrb	r3, [r3, r2]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d902      	bls.n	8011f5a <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	3b01      	subs	r3, #1
 8011f58:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011f5a:	68b8      	ldr	r0, [r7, #8]
 8011f5c:	260f      	movs	r6, #15
 8011f5e:	19bc      	adds	r4, r7, r6
 8011f60:	4d10      	ldr	r5, [pc, #64]	; (8011fa4 <SecureFrame+0xd4>)
 8011f62:	1dbb      	adds	r3, r7, #6
 8011f64:	781a      	ldrb	r2, [r3, #0]
 8011f66:	1dfb      	adds	r3, r7, #7
 8011f68:	7819      	ldrb	r1, [r3, #0]
 8011f6a:	002b      	movs	r3, r5
 8011f6c:	f004 f942 	bl	80161f4 <LoRaMacCryptoSecureMessage>
 8011f70:	0003      	movs	r3, r0
 8011f72:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011f74:	19bb      	adds	r3, r7, r6
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d001      	beq.n	8011f80 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011f7c:	2311      	movs	r3, #17
 8011f7e:	e00a      	b.n	8011f96 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011f80:	4a07      	ldr	r2, [pc, #28]	; (8011fa0 <SecureFrame+0xd0>)
 8011f82:	2386      	movs	r3, #134	; 0x86
 8011f84:	005b      	lsls	r3, r3, #1
 8011f86:	5cd3      	ldrb	r3, [r2, r3]
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	4b05      	ldr	r3, [pc, #20]	; (8011fa0 <SecureFrame+0xd0>)
 8011f8c:	801a      	strh	r2, [r3, #0]
            break;
 8011f8e:	e001      	b.n	8011f94 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f90:	2303      	movs	r3, #3
 8011f92:	e000      	b.n	8011f96 <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 8011f94:	2300      	movs	r3, #0
}
 8011f96:	0018      	movs	r0, r3
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	b005      	add	sp, #20
 8011f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f9e:	46c0      	nop			; (mov r8, r8)
 8011fa0:	200005b8 	.word	0x200005b8
 8011fa4:	200006c0 	.word	0x200006c0
 8011fa8:	00000412 	.word	0x00000412

08011fac <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8011fb0:	4b0e      	ldr	r3, [pc, #56]	; (8011fec <CalculateBackOff+0x40>)
 8011fb2:	4a0f      	ldr	r2, [pc, #60]	; (8011ff0 <CalculateBackOff+0x44>)
 8011fb4:	589a      	ldr	r2, [r3, r2]
 8011fb6:	23aa      	movs	r3, #170	; 0xaa
 8011fb8:	005b      	lsls	r3, r3, #1
 8011fba:	58d3      	ldr	r3, [r2, r3]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d111      	bne.n	8011fe4 <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011fc0:	4b0a      	ldr	r3, [pc, #40]	; (8011fec <CalculateBackOff+0x40>)
 8011fc2:	4a0b      	ldr	r2, [pc, #44]	; (8011ff0 <CalculateBackOff+0x44>)
 8011fc4:	589a      	ldr	r2, [r3, r2]
 8011fc6:	23a6      	movs	r3, #166	; 0xa6
 8011fc8:	005b      	lsls	r3, r3, #1
 8011fca:	5ad3      	ldrh	r3, [r2, r3]
 8011fcc:	3b01      	subs	r3, #1
 8011fce:	4907      	ldr	r1, [pc, #28]	; (8011fec <CalculateBackOff+0x40>)
 8011fd0:	2283      	movs	r2, #131	; 0x83
 8011fd2:	00d2      	lsls	r2, r2, #3
 8011fd4:	5889      	ldr	r1, [r1, r2]
 8011fd6:	4a05      	ldr	r2, [pc, #20]	; (8011fec <CalculateBackOff+0x40>)
 8011fd8:	4805      	ldr	r0, [pc, #20]	; (8011ff0 <CalculateBackOff+0x44>)
 8011fda:	5812      	ldr	r2, [r2, r0]
 8011fdc:	4359      	muls	r1, r3
 8011fde:	23aa      	movs	r3, #170	; 0xaa
 8011fe0:	005b      	lsls	r3, r3, #1
 8011fe2:	50d1      	str	r1, [r2, r3]
    }
}
 8011fe4:	46c0      	nop			; (mov r8, r8)
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	46c0      	nop			; (mov r8, r8)
 8011fec:	200005b8 	.word	0x200005b8
 8011ff0:	00000484 	.word	0x00000484

08011ff4 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	1d3b      	adds	r3, r7, #4
 8011ffc:	7019      	strb	r1, [r3, #0]
 8011ffe:	0011      	movs	r1, r2
 8012000:	1dfb      	adds	r3, r7, #7
 8012002:	1c02      	adds	r2, r0, #0
 8012004:	701a      	strb	r2, [r3, #0]
 8012006:	1dbb      	adds	r3, r7, #6
 8012008:	1c0a      	adds	r2, r1, #0
 801200a:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801200c:	1dfb      	adds	r3, r7, #7
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d003      	beq.n	801201c <RemoveMacCommands+0x28>
 8012014:	1dfb      	adds	r3, r7, #7
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	2b01      	cmp	r3, #1
 801201a:	d10f      	bne.n	801203c <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 801201c:	1dbb      	adds	r3, r7, #6
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	2b01      	cmp	r3, #1
 8012022:	d109      	bne.n	8012038 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 8012024:	1d3b      	adds	r3, r7, #4
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	2220      	movs	r2, #32
 801202a:	4013      	ands	r3, r2
 801202c:	b2db      	uxtb	r3, r3
 801202e:	2b00      	cmp	r3, #0
 8012030:	d004      	beq.n	801203c <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8012032:	f002 ff75 	bl	8014f20 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8012036:	e001      	b.n	801203c <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8012038:	f002 ff72 	bl	8014f20 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 801203c:	46c0      	nop			; (mov r8, r8)
 801203e:	46bd      	mov	sp, r7
 8012040:	b002      	add	sp, #8
 8012042:	bd80      	pop	{r7, pc}

08012044 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8012044:	b590      	push	{r4, r7, lr}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 801204a:	4b72      	ldr	r3, [pc, #456]	; (8012214 <ResetMacParameters+0x1d0>)
 801204c:	4a72      	ldr	r2, [pc, #456]	; (8012218 <ResetMacParameters+0x1d4>)
 801204e:	589a      	ldr	r2, [r3, r2]
 8012050:	23b2      	movs	r3, #178	; 0xb2
 8012052:	005b      	lsls	r3, r3, #1
 8012054:	2100      	movs	r1, #0
 8012056:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8012058:	4b6e      	ldr	r3, [pc, #440]	; (8012214 <ResetMacParameters+0x1d0>)
 801205a:	4a6f      	ldr	r2, [pc, #444]	; (8012218 <ResetMacParameters+0x1d4>)
 801205c:	589b      	ldr	r3, [r3, r2]
 801205e:	2280      	movs	r2, #128	; 0x80
 8012060:	2100      	movs	r1, #0
 8012062:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 8012064:	4a6b      	ldr	r2, [pc, #428]	; (8012214 <ResetMacParameters+0x1d0>)
 8012066:	2382      	movs	r3, #130	; 0x82
 8012068:	00db      	lsls	r3, r3, #3
 801206a:	2100      	movs	r1, #0
 801206c:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 801206e:	4b69      	ldr	r3, [pc, #420]	; (8012214 <ResetMacParameters+0x1d0>)
 8012070:	4a6a      	ldr	r2, [pc, #424]	; (801221c <ResetMacParameters+0x1d8>)
 8012072:	2101      	movs	r1, #1
 8012074:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 8012076:	4b67      	ldr	r3, [pc, #412]	; (8012214 <ResetMacParameters+0x1d0>)
 8012078:	4a69      	ldr	r2, [pc, #420]	; (8012220 <ResetMacParameters+0x1dc>)
 801207a:	2101      	movs	r1, #1
 801207c:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 801207e:	4b65      	ldr	r3, [pc, #404]	; (8012214 <ResetMacParameters+0x1d0>)
 8012080:	4a68      	ldr	r2, [pc, #416]	; (8012224 <ResetMacParameters+0x1e0>)
 8012082:	2100      	movs	r1, #0
 8012084:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 8012086:	4b63      	ldr	r3, [pc, #396]	; (8012214 <ResetMacParameters+0x1d0>)
 8012088:	4a63      	ldr	r2, [pc, #396]	; (8012218 <ResetMacParameters+0x1d4>)
 801208a:	589b      	ldr	r3, [r3, r2]
 801208c:	22c8      	movs	r2, #200	; 0xc8
 801208e:	2100      	movs	r1, #0
 8012090:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8012092:	4b60      	ldr	r3, [pc, #384]	; (8012214 <ResetMacParameters+0x1d0>)
 8012094:	4a60      	ldr	r2, [pc, #384]	; (8012218 <ResetMacParameters+0x1d4>)
 8012096:	589a      	ldr	r2, [r3, r2]
 8012098:	23a6      	movs	r3, #166	; 0xa6
 801209a:	005b      	lsls	r3, r3, #1
 801209c:	2101      	movs	r1, #1
 801209e:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80120a0:	4b5c      	ldr	r3, [pc, #368]	; (8012214 <ResetMacParameters+0x1d0>)
 80120a2:	4a5d      	ldr	r2, [pc, #372]	; (8012218 <ResetMacParameters+0x1d4>)
 80120a4:	589a      	ldr	r2, [r3, r2]
 80120a6:	4b5b      	ldr	r3, [pc, #364]	; (8012214 <ResetMacParameters+0x1d0>)
 80120a8:	495b      	ldr	r1, [pc, #364]	; (8012218 <ResetMacParameters+0x1d4>)
 80120aa:	585b      	ldr	r3, [r3, r1]
 80120ac:	2104      	movs	r1, #4
 80120ae:	5651      	ldrsb	r1, [r2, r1]
 80120b0:	2284      	movs	r2, #132	; 0x84
 80120b2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80120b4:	4b57      	ldr	r3, [pc, #348]	; (8012214 <ResetMacParameters+0x1d0>)
 80120b6:	4a58      	ldr	r2, [pc, #352]	; (8012218 <ResetMacParameters+0x1d4>)
 80120b8:	589a      	ldr	r2, [r3, r2]
 80120ba:	4b56      	ldr	r3, [pc, #344]	; (8012214 <ResetMacParameters+0x1d0>)
 80120bc:	4956      	ldr	r1, [pc, #344]	; (8012218 <ResetMacParameters+0x1d4>)
 80120be:	585b      	ldr	r3, [r3, r1]
 80120c0:	2105      	movs	r1, #5
 80120c2:	5651      	ldrsb	r1, [r2, r1]
 80120c4:	2285      	movs	r2, #133	; 0x85
 80120c6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 80120c8:	4b52      	ldr	r3, [pc, #328]	; (8012214 <ResetMacParameters+0x1d0>)
 80120ca:	4a53      	ldr	r2, [pc, #332]	; (8012218 <ResetMacParameters+0x1d4>)
 80120cc:	589a      	ldr	r2, [r3, r2]
 80120ce:	4b51      	ldr	r3, [pc, #324]	; (8012214 <ResetMacParameters+0x1d0>)
 80120d0:	4951      	ldr	r1, [pc, #324]	; (8012218 <ResetMacParameters+0x1d4>)
 80120d2:	585b      	ldr	r3, [r3, r1]
 80120d4:	2125      	movs	r1, #37	; 0x25
 80120d6:	5c51      	ldrb	r1, [r2, r1]
 80120d8:	22a5      	movs	r2, #165	; 0xa5
 80120da:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80120dc:	4b4d      	ldr	r3, [pc, #308]	; (8012214 <ResetMacParameters+0x1d0>)
 80120de:	4a4e      	ldr	r2, [pc, #312]	; (8012218 <ResetMacParameters+0x1d4>)
 80120e0:	589a      	ldr	r2, [r3, r2]
 80120e2:	4b4c      	ldr	r3, [pc, #304]	; (8012214 <ResetMacParameters+0x1d0>)
 80120e4:	494c      	ldr	r1, [pc, #304]	; (8012218 <ResetMacParameters+0x1d4>)
 80120e6:	585b      	ldr	r3, [r3, r1]
 80120e8:	21a8      	movs	r1, #168	; 0xa8
 80120ea:	185b      	adds	r3, r3, r1
 80120ec:	3228      	adds	r2, #40	; 0x28
 80120ee:	ca03      	ldmia	r2!, {r0, r1}
 80120f0:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80120f2:	4b48      	ldr	r3, [pc, #288]	; (8012214 <ResetMacParameters+0x1d0>)
 80120f4:	4a48      	ldr	r2, [pc, #288]	; (8012218 <ResetMacParameters+0x1d4>)
 80120f6:	589a      	ldr	r2, [r3, r2]
 80120f8:	4b46      	ldr	r3, [pc, #280]	; (8012214 <ResetMacParameters+0x1d0>)
 80120fa:	4947      	ldr	r1, [pc, #284]	; (8012218 <ResetMacParameters+0x1d4>)
 80120fc:	585b      	ldr	r3, [r3, r1]
 80120fe:	21b0      	movs	r1, #176	; 0xb0
 8012100:	185b      	adds	r3, r3, r1
 8012102:	3230      	adds	r2, #48	; 0x30
 8012104:	ca03      	ldmia	r2!, {r0, r1}
 8012106:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8012108:	4b42      	ldr	r3, [pc, #264]	; (8012214 <ResetMacParameters+0x1d0>)
 801210a:	4a43      	ldr	r2, [pc, #268]	; (8012218 <ResetMacParameters+0x1d4>)
 801210c:	589a      	ldr	r2, [r3, r2]
 801210e:	4b41      	ldr	r3, [pc, #260]	; (8012214 <ResetMacParameters+0x1d0>)
 8012110:	4941      	ldr	r1, [pc, #260]	; (8012218 <ResetMacParameters+0x1d4>)
 8012112:	585b      	ldr	r3, [r3, r1]
 8012114:	2138      	movs	r1, #56	; 0x38
 8012116:	5c51      	ldrb	r1, [r2, r1]
 8012118:	22b8      	movs	r2, #184	; 0xb8
 801211a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 801211c:	4b3d      	ldr	r3, [pc, #244]	; (8012214 <ResetMacParameters+0x1d0>)
 801211e:	4a3e      	ldr	r2, [pc, #248]	; (8012218 <ResetMacParameters+0x1d4>)
 8012120:	589a      	ldr	r2, [r3, r2]
 8012122:	4b3c      	ldr	r3, [pc, #240]	; (8012214 <ResetMacParameters+0x1d0>)
 8012124:	493c      	ldr	r1, [pc, #240]	; (8012218 <ResetMacParameters+0x1d4>)
 8012126:	585b      	ldr	r3, [r3, r1]
 8012128:	2139      	movs	r1, #57	; 0x39
 801212a:	5c51      	ldrb	r1, [r2, r1]
 801212c:	22b9      	movs	r2, #185	; 0xb9
 801212e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8012130:	4b38      	ldr	r3, [pc, #224]	; (8012214 <ResetMacParameters+0x1d0>)
 8012132:	4a39      	ldr	r2, [pc, #228]	; (8012218 <ResetMacParameters+0x1d4>)
 8012134:	589b      	ldr	r3, [r3, r2]
 8012136:	4a37      	ldr	r2, [pc, #220]	; (8012214 <ResetMacParameters+0x1d0>)
 8012138:	4937      	ldr	r1, [pc, #220]	; (8012218 <ResetMacParameters+0x1d4>)
 801213a:	5852      	ldr	r2, [r2, r1]
 801213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801213e:	21bc      	movs	r1, #188	; 0xbc
 8012140:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8012142:	4b34      	ldr	r3, [pc, #208]	; (8012214 <ResetMacParameters+0x1d0>)
 8012144:	4a34      	ldr	r2, [pc, #208]	; (8012218 <ResetMacParameters+0x1d4>)
 8012146:	589b      	ldr	r3, [r3, r2]
 8012148:	4a32      	ldr	r2, [pc, #200]	; (8012214 <ResetMacParameters+0x1d0>)
 801214a:	4933      	ldr	r1, [pc, #204]	; (8012218 <ResetMacParameters+0x1d4>)
 801214c:	5852      	ldr	r2, [r2, r1]
 801214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012150:	21c0      	movs	r1, #192	; 0xc0
 8012152:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 8012154:	4b2f      	ldr	r3, [pc, #188]	; (8012214 <ResetMacParameters+0x1d0>)
 8012156:	4a34      	ldr	r2, [pc, #208]	; (8012228 <ResetMacParameters+0x1e4>)
 8012158:	2100      	movs	r1, #0
 801215a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 801215c:	4b2d      	ldr	r3, [pc, #180]	; (8012214 <ResetMacParameters+0x1d0>)
 801215e:	4a2e      	ldr	r2, [pc, #184]	; (8012218 <ResetMacParameters+0x1d4>)
 8012160:	589a      	ldr	r2, [r3, r2]
 8012162:	234c      	movs	r3, #76	; 0x4c
 8012164:	33ff      	adds	r3, #255	; 0xff
 8012166:	2100      	movs	r1, #0
 8012168:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801216a:	003b      	movs	r3, r7
 801216c:	2201      	movs	r2, #1
 801216e:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 8012170:	003b      	movs	r3, r7
 8012172:	2200      	movs	r2, #0
 8012174:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012176:	4b27      	ldr	r3, [pc, #156]	; (8012214 <ResetMacParameters+0x1d0>)
 8012178:	4a27      	ldr	r2, [pc, #156]	; (8012218 <ResetMacParameters+0x1d4>)
 801217a:	589b      	ldr	r3, [r3, r2]
 801217c:	781b      	ldrb	r3, [r3, #0]
 801217e:	003a      	movs	r2, r7
 8012180:	0011      	movs	r1, r2
 8012182:	0018      	movs	r0, r3
 8012184:	f004 fe05 	bl	8016d92 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012188:	4b22      	ldr	r3, [pc, #136]	; (8012214 <ResetMacParameters+0x1d0>)
 801218a:	4a28      	ldr	r2, [pc, #160]	; (801222c <ResetMacParameters+0x1e8>)
 801218c:	2100      	movs	r1, #0
 801218e:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012190:	4b20      	ldr	r3, [pc, #128]	; (8012214 <ResetMacParameters+0x1d0>)
 8012192:	4a26      	ldr	r2, [pc, #152]	; (801222c <ResetMacParameters+0x1e8>)
 8012194:	5c99      	ldrb	r1, [r3, r2]
 8012196:	4a1f      	ldr	r2, [pc, #124]	; (8012214 <ResetMacParameters+0x1d0>)
 8012198:	23f3      	movs	r3, #243	; 0xf3
 801219a:	009b      	lsls	r3, r3, #2
 801219c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 801219e:	4b1d      	ldr	r3, [pc, #116]	; (8012214 <ResetMacParameters+0x1d0>)
 80121a0:	4a1d      	ldr	r2, [pc, #116]	; (8012218 <ResetMacParameters+0x1d4>)
 80121a2:	589b      	ldr	r3, [r3, r2]
 80121a4:	22a8      	movs	r2, #168	; 0xa8
 80121a6:	5899      	ldr	r1, [r3, r2]
 80121a8:	4a1a      	ldr	r2, [pc, #104]	; (8012214 <ResetMacParameters+0x1d0>)
 80121aa:	23f4      	movs	r3, #244	; 0xf4
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80121b0:	4b18      	ldr	r3, [pc, #96]	; (8012214 <ResetMacParameters+0x1d0>)
 80121b2:	4a19      	ldr	r2, [pc, #100]	; (8012218 <ResetMacParameters+0x1d4>)
 80121b4:	589b      	ldr	r3, [r3, r2]
 80121b6:	22b9      	movs	r2, #185	; 0xb9
 80121b8:	5c99      	ldrb	r1, [r3, r2]
 80121ba:	4a16      	ldr	r2, [pc, #88]	; (8012214 <ResetMacParameters+0x1d0>)
 80121bc:	23f7      	movs	r3, #247	; 0xf7
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80121c2:	4b14      	ldr	r3, [pc, #80]	; (8012214 <ResetMacParameters+0x1d0>)
 80121c4:	4a14      	ldr	r2, [pc, #80]	; (8012218 <ResetMacParameters+0x1d4>)
 80121c6:	589b      	ldr	r3, [r3, r2]
 80121c8:	22ca      	movs	r2, #202	; 0xca
 80121ca:	5c99      	ldrb	r1, [r3, r2]
 80121cc:	4b11      	ldr	r3, [pc, #68]	; (8012214 <ResetMacParameters+0x1d0>)
 80121ce:	4a18      	ldr	r2, [pc, #96]	; (8012230 <ResetMacParameters+0x1ec>)
 80121d0:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80121d2:	4b10      	ldr	r3, [pc, #64]	; (8012214 <ResetMacParameters+0x1d0>)
 80121d4:	4a17      	ldr	r2, [pc, #92]	; (8012234 <ResetMacParameters+0x1f0>)
 80121d6:	2100      	movs	r1, #0
 80121d8:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80121da:	4b0e      	ldr	r3, [pc, #56]	; (8012214 <ResetMacParameters+0x1d0>)
 80121dc:	4a16      	ldr	r2, [pc, #88]	; (8012238 <ResetMacParameters+0x1f4>)
 80121de:	2101      	movs	r1, #1
 80121e0:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80121e2:	480c      	ldr	r0, [pc, #48]	; (8012214 <ResetMacParameters+0x1d0>)
 80121e4:	23f8      	movs	r3, #248	; 0xf8
 80121e6:	009b      	lsls	r3, r3, #2
 80121e8:	490a      	ldr	r1, [pc, #40]	; (8012214 <ResetMacParameters+0x1d0>)
 80121ea:	22f3      	movs	r2, #243	; 0xf3
 80121ec:	0092      	lsls	r2, r2, #2
 80121ee:	18c3      	adds	r3, r0, r3
 80121f0:	188a      	adds	r2, r1, r2
 80121f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80121f4:	c313      	stmia	r3!, {r0, r1, r4}
 80121f6:	ca03      	ldmia	r2!, {r0, r1}
 80121f8:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80121fa:	4b06      	ldr	r3, [pc, #24]	; (8012214 <ResetMacParameters+0x1d0>)
 80121fc:	4a0f      	ldr	r2, [pc, #60]	; (801223c <ResetMacParameters+0x1f8>)
 80121fe:	2101      	movs	r1, #1
 8012200:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012202:	4b04      	ldr	r3, [pc, #16]	; (8012214 <ResetMacParameters+0x1d0>)
 8012204:	4a0e      	ldr	r2, [pc, #56]	; (8012240 <ResetMacParameters+0x1fc>)
 8012206:	2102      	movs	r1, #2
 8012208:	5499      	strb	r1, [r3, r2]

}
 801220a:	46c0      	nop			; (mov r8, r8)
 801220c:	46bd      	mov	sp, r7
 801220e:	b003      	add	sp, #12
 8012210:	bd90      	pop	{r4, r7, pc}
 8012212:	46c0      	nop			; (mov r8, r8)
 8012214:	200005b8 	.word	0x200005b8
 8012218:	00000484 	.word	0x00000484
 801221c:	00000411 	.word	0x00000411
 8012220:	00000412 	.word	0x00000412
 8012224:	00000413 	.word	0x00000413
 8012228:	00000414 	.word	0x00000414
 801222c:	00000415 	.word	0x00000415
 8012230:	000003dd 	.word	0x000003dd
 8012234:	000003de 	.word	0x000003de
 8012238:	000003df 	.word	0x000003df
 801223c:	000003f2 	.word	0x000003f2
 8012240:	000003f3 	.word	0x000003f3

08012244 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	0018      	movs	r0, r3
 8012252:	f00a fd99 	bl	801cd88 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012256:	4b10      	ldr	r3, [pc, #64]	; (8012298 <RxWindowSetup+0x54>)
 8012258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801225a:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801225c:	4b0f      	ldr	r3, [pc, #60]	; (801229c <RxWindowSetup+0x58>)
 801225e:	4a10      	ldr	r2, [pc, #64]	; (80122a0 <RxWindowSetup+0x5c>)
 8012260:	589b      	ldr	r3, [r3, r2]
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	4a0f      	ldr	r2, [pc, #60]	; (80122a4 <RxWindowSetup+0x60>)
 8012266:	6839      	ldr	r1, [r7, #0]
 8012268:	0018      	movs	r0, r3
 801226a:	f004 fe29 	bl	8016ec0 <RegionRxConfig>
 801226e:	1e03      	subs	r3, r0, #0
 8012270:	d00e      	beq.n	8012290 <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8012272:	4b09      	ldr	r3, [pc, #36]	; (8012298 <RxWindowSetup+0x54>)
 8012274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012276:	4a09      	ldr	r2, [pc, #36]	; (801229c <RxWindowSetup+0x58>)
 8012278:	4909      	ldr	r1, [pc, #36]	; (80122a0 <RxWindowSetup+0x5c>)
 801227a:	5852      	ldr	r2, [r2, r1]
 801227c:	2190      	movs	r1, #144	; 0x90
 801227e:	5852      	ldr	r2, [r2, r1]
 8012280:	0010      	movs	r0, r2
 8012282:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	7cd9      	ldrb	r1, [r3, #19]
 8012288:	4a04      	ldr	r2, [pc, #16]	; (801229c <RxWindowSetup+0x58>)
 801228a:	2390      	movs	r3, #144	; 0x90
 801228c:	00db      	lsls	r3, r3, #3
 801228e:	54d1      	strb	r1, [r2, r3]
    }
}
 8012290:	46c0      	nop			; (mov r8, r8)
 8012292:	46bd      	mov	sp, r7
 8012294:	b002      	add	sp, #8
 8012296:	bd80      	pop	{r7, pc}
 8012298:	0801fd7c 	.word	0x0801fd7c
 801229c:	200005b8 	.word	0x200005b8
 80122a0:	00000484 	.word	0x00000484
 80122a4:	200009d8 	.word	0x200009d8

080122a8 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80122a8:	b590      	push	{r4, r7, lr}
 80122aa:	b083      	sub	sp, #12
 80122ac:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80122ae:	4b1d      	ldr	r3, [pc, #116]	; (8012324 <OpenContinuousRxCWindow+0x7c>)
 80122b0:	4a1d      	ldr	r2, [pc, #116]	; (8012328 <OpenContinuousRxCWindow+0x80>)
 80122b2:	589b      	ldr	r3, [r3, r2]
 80122b4:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 80122b6:	4b1b      	ldr	r3, [pc, #108]	; (8012324 <OpenContinuousRxCWindow+0x7c>)
 80122b8:	4a1b      	ldr	r2, [pc, #108]	; (8012328 <OpenContinuousRxCWindow+0x80>)
 80122ba:	589b      	ldr	r3, [r3, r2]
 80122bc:	22b4      	movs	r2, #180	; 0xb4
 80122be:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80122c0:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80122c2:	4b18      	ldr	r3, [pc, #96]	; (8012324 <OpenContinuousRxCWindow+0x7c>)
 80122c4:	4a18      	ldr	r2, [pc, #96]	; (8012328 <OpenContinuousRxCWindow+0x80>)
 80122c6:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80122c8:	228c      	movs	r2, #140	; 0x8c
 80122ca:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 80122cc:	4b15      	ldr	r3, [pc, #84]	; (8012324 <OpenContinuousRxCWindow+0x7c>)
 80122ce:	4c16      	ldr	r4, [pc, #88]	; (8012328 <OpenContinuousRxCWindow+0x80>)
 80122d0:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80122d2:	2488      	movs	r4, #136	; 0x88
 80122d4:	591c      	ldr	r4, [r3, r4]
 80122d6:	4b15      	ldr	r3, [pc, #84]	; (801232c <OpenContinuousRxCWindow+0x84>)
 80122d8:	9300      	str	r3, [sp, #0]
 80122da:	0023      	movs	r3, r4
 80122dc:	f004 fdcc 	bl	8016e78 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80122e0:	4b10      	ldr	r3, [pc, #64]	; (8012324 <OpenContinuousRxCWindow+0x7c>)
 80122e2:	4a13      	ldr	r2, [pc, #76]	; (8012330 <OpenContinuousRxCWindow+0x88>)
 80122e4:	2102      	movs	r1, #2
 80122e6:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80122e8:	4b0e      	ldr	r3, [pc, #56]	; (8012324 <OpenContinuousRxCWindow+0x7c>)
 80122ea:	4a12      	ldr	r2, [pc, #72]	; (8012334 <OpenContinuousRxCWindow+0x8c>)
 80122ec:	2101      	movs	r1, #1
 80122ee:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80122f0:	4b0c      	ldr	r3, [pc, #48]	; (8012324 <OpenContinuousRxCWindow+0x7c>)
 80122f2:	4a0d      	ldr	r2, [pc, #52]	; (8012328 <OpenContinuousRxCWindow+0x80>)
 80122f4:	589b      	ldr	r3, [r3, r2]
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	4a0f      	ldr	r2, [pc, #60]	; (8012338 <OpenContinuousRxCWindow+0x90>)
 80122fa:	490c      	ldr	r1, [pc, #48]	; (801232c <OpenContinuousRxCWindow+0x84>)
 80122fc:	0018      	movs	r0, r3
 80122fe:	f004 fddf 	bl	8016ec0 <RegionRxConfig>
 8012302:	1e03      	subs	r3, r0, #0
 8012304:	d00a      	beq.n	801231c <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 8012306:	4b0d      	ldr	r3, [pc, #52]	; (801233c <OpenContinuousRxCWindow+0x94>)
 8012308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801230a:	2000      	movs	r0, #0
 801230c:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 801230e:	4b05      	ldr	r3, [pc, #20]	; (8012324 <OpenContinuousRxCWindow+0x7c>)
 8012310:	4a07      	ldr	r2, [pc, #28]	; (8012330 <OpenContinuousRxCWindow+0x88>)
 8012312:	5c99      	ldrb	r1, [r3, r2]
 8012314:	4a03      	ldr	r2, [pc, #12]	; (8012324 <OpenContinuousRxCWindow+0x7c>)
 8012316:	2390      	movs	r3, #144	; 0x90
 8012318:	00db      	lsls	r3, r3, #3
 801231a:	54d1      	strb	r1, [r2, r3]
    }
}
 801231c:	46c0      	nop			; (mov r8, r8)
 801231e:	46bd      	mov	sp, r7
 8012320:	b001      	add	sp, #4
 8012322:	bd90      	pop	{r4, r7, pc}
 8012324:	200005b8 	.word	0x200005b8
 8012328:	00000484 	.word	0x00000484
 801232c:	20000998 	.word	0x20000998
 8012330:	000003f3 	.word	0x000003f3
 8012334:	000003f2 	.word	0x000003f2
 8012338:	200009d8 	.word	0x200009d8
 801233c:	0801fd7c 	.word	0x0801fd7c

08012340 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012340:	b590      	push	{r4, r7, lr}
 8012342:	b089      	sub	sp, #36	; 0x24
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	603b      	str	r3, [r7, #0]
 801234c:	1dfb      	adds	r3, r7, #7
 801234e:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 8012350:	4b9a      	ldr	r3, [pc, #616]	; (80125bc <PrepareFrame+0x27c>)
 8012352:	2200      	movs	r2, #0
 8012354:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012356:	4b99      	ldr	r3, [pc, #612]	; (80125bc <PrepareFrame+0x27c>)
 8012358:	4a99      	ldr	r2, [pc, #612]	; (80125c0 <PrepareFrame+0x280>)
 801235a:	2100      	movs	r1, #0
 801235c:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 801235e:	2300      	movs	r3, #0
 8012360:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012362:	2300      	movs	r3, #0
 8012364:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012366:	231f      	movs	r3, #31
 8012368:	18fb      	adds	r3, r7, r3
 801236a:	2200      	movs	r2, #0
 801236c:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d103      	bne.n	801237c <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 8012374:	2330      	movs	r3, #48	; 0x30
 8012376:	18fb      	adds	r3, r7, r3
 8012378:	2200      	movs	r2, #0
 801237a:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 801237c:	2430      	movs	r4, #48	; 0x30
 801237e:	193b      	adds	r3, r7, r4
 8012380:	881a      	ldrh	r2, [r3, #0]
 8012382:	6839      	ldr	r1, [r7, #0]
 8012384:	4b8f      	ldr	r3, [pc, #572]	; (80125c4 <PrepareFrame+0x284>)
 8012386:	0018      	movs	r0, r3
 8012388:	f007 f946 	bl	8019618 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 801238c:	193b      	adds	r3, r7, r4
 801238e:	881b      	ldrh	r3, [r3, #0]
 8012390:	b2d9      	uxtb	r1, r3
 8012392:	4b8a      	ldr	r3, [pc, #552]	; (80125bc <PrepareFrame+0x27c>)
 8012394:	4a8c      	ldr	r2, [pc, #560]	; (80125c8 <PrepareFrame+0x288>)
 8012396:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	781a      	ldrb	r2, [r3, #0]
 801239c:	4b87      	ldr	r3, [pc, #540]	; (80125bc <PrepareFrame+0x27c>)
 801239e:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	061b      	lsls	r3, r3, #24
 80123a6:	0f5b      	lsrs	r3, r3, #29
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	2b07      	cmp	r3, #7
 80123ac:	d100      	bne.n	80123b0 <PrepareFrame+0x70>
 80123ae:	e0e0      	b.n	8012572 <PrepareFrame+0x232>
 80123b0:	dd00      	ble.n	80123b4 <PrepareFrame+0x74>
 80123b2:	e0f8      	b.n	80125a6 <PrepareFrame+0x266>
 80123b4:	2b02      	cmp	r3, #2
 80123b6:	d006      	beq.n	80123c6 <PrepareFrame+0x86>
 80123b8:	2b04      	cmp	r3, #4
 80123ba:	d000      	beq.n	80123be <PrepareFrame+0x7e>
 80123bc:	e0f3      	b.n	80125a6 <PrepareFrame+0x266>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80123be:	4b7f      	ldr	r3, [pc, #508]	; (80125bc <PrepareFrame+0x27c>)
 80123c0:	4a7f      	ldr	r2, [pc, #508]	; (80125c0 <PrepareFrame+0x280>)
 80123c2:	2101      	movs	r1, #1
 80123c4:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80123c6:	4a7d      	ldr	r2, [pc, #500]	; (80125bc <PrepareFrame+0x27c>)
 80123c8:	2382      	movs	r3, #130	; 0x82
 80123ca:	005b      	lsls	r3, r3, #1
 80123cc:	2104      	movs	r1, #4
 80123ce:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80123d0:	4a7a      	ldr	r2, [pc, #488]	; (80125bc <PrepareFrame+0x27c>)
 80123d2:	2384      	movs	r3, #132	; 0x84
 80123d4:	005b      	lsls	r3, r3, #1
 80123d6:	497d      	ldr	r1, [pc, #500]	; (80125cc <PrepareFrame+0x28c>)
 80123d8:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80123da:	4a78      	ldr	r2, [pc, #480]	; (80125bc <PrepareFrame+0x27c>)
 80123dc:	2386      	movs	r3, #134	; 0x86
 80123de:	005b      	lsls	r3, r3, #1
 80123e0:	21ff      	movs	r1, #255	; 0xff
 80123e2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	7819      	ldrb	r1, [r3, #0]
 80123e8:	4a74      	ldr	r2, [pc, #464]	; (80125bc <PrepareFrame+0x27c>)
 80123ea:	230e      	movs	r3, #14
 80123ec:	33ff      	adds	r3, #255	; 0xff
 80123ee:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80123f0:	4a72      	ldr	r2, [pc, #456]	; (80125bc <PrepareFrame+0x27c>)
 80123f2:	1df9      	adds	r1, r7, #7
 80123f4:	2394      	movs	r3, #148	; 0x94
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	7809      	ldrb	r1, [r1, #0]
 80123fa:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 80123fc:	4b6f      	ldr	r3, [pc, #444]	; (80125bc <PrepareFrame+0x27c>)
 80123fe:	4a74      	ldr	r2, [pc, #464]	; (80125d0 <PrepareFrame+0x290>)
 8012400:	589b      	ldr	r3, [r3, r2]
 8012402:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012404:	4a6d      	ldr	r2, [pc, #436]	; (80125bc <PrepareFrame+0x27c>)
 8012406:	2388      	movs	r3, #136	; 0x88
 8012408:	005b      	lsls	r3, r3, #1
 801240a:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	7819      	ldrb	r1, [r3, #0]
 8012410:	4a6a      	ldr	r2, [pc, #424]	; (80125bc <PrepareFrame+0x27c>)
 8012412:	238a      	movs	r3, #138	; 0x8a
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8012418:	4b68      	ldr	r3, [pc, #416]	; (80125bc <PrepareFrame+0x27c>)
 801241a:	4a6b      	ldr	r2, [pc, #428]	; (80125c8 <PrepareFrame+0x288>)
 801241c:	5c99      	ldrb	r1, [r3, r2]
 801241e:	4a67      	ldr	r2, [pc, #412]	; (80125bc <PrepareFrame+0x27c>)
 8012420:	2398      	movs	r3, #152	; 0x98
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8012426:	4a65      	ldr	r2, [pc, #404]	; (80125bc <PrepareFrame+0x27c>)
 8012428:	2396      	movs	r3, #150	; 0x96
 801242a:	005b      	lsls	r3, r3, #1
 801242c:	4965      	ldr	r1, [pc, #404]	; (80125c4 <PrepareFrame+0x284>)
 801242e:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012430:	2318      	movs	r3, #24
 8012432:	18fb      	adds	r3, r7, r3
 8012434:	0018      	movs	r0, r3
 8012436:	f003 fce5 	bl	8015e04 <LoRaMacCryptoGetFCntUp>
 801243a:	1e03      	subs	r3, r0, #0
 801243c:	d001      	beq.n	8012442 <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801243e:	2312      	movs	r3, #18
 8012440:	e0b7      	b.n	80125b2 <PrepareFrame+0x272>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	b299      	uxth	r1, r3
 8012446:	4a5d      	ldr	r2, [pc, #372]	; (80125bc <PrepareFrame+0x27c>)
 8012448:	238b      	movs	r3, #139	; 0x8b
 801244a:	005b      	lsls	r3, r3, #1
 801244c:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 801244e:	4b5b      	ldr	r3, [pc, #364]	; (80125bc <PrepareFrame+0x27c>)
 8012450:	4a60      	ldr	r2, [pc, #384]	; (80125d4 <PrepareFrame+0x294>)
 8012452:	2100      	movs	r1, #0
 8012454:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 8012456:	4a59      	ldr	r2, [pc, #356]	; (80125bc <PrepareFrame+0x27c>)
 8012458:	2388      	movs	r3, #136	; 0x88
 801245a:	00db      	lsls	r3, r3, #3
 801245c:	2100      	movs	r1, #0
 801245e:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012460:	69b9      	ldr	r1, [r7, #24]
 8012462:	4a56      	ldr	r2, [pc, #344]	; (80125bc <PrepareFrame+0x27c>)
 8012464:	2389      	movs	r3, #137	; 0x89
 8012466:	00db      	lsls	r3, r3, #3
 8012468:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801246a:	2314      	movs	r3, #20
 801246c:	18fb      	adds	r3, r7, r3
 801246e:	0018      	movs	r0, r3
 8012470:	f002 fd7a 	bl	8014f68 <LoRaMacCommandsGetSizeSerializedCmds>
 8012474:	1e03      	subs	r3, r0, #0
 8012476:	d001      	beq.n	801247c <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012478:	2313      	movs	r3, #19
 801247a:	e09a      	b.n	80125b2 <PrepareFrame+0x272>
            }

            if( macCmdsSize > 0 )
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d100      	bne.n	8012484 <PrepareFrame+0x144>
 8012482:	e092      	b.n	80125aa <PrepareFrame+0x26a>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8012484:	4b4d      	ldr	r3, [pc, #308]	; (80125bc <PrepareFrame+0x27c>)
 8012486:	4a52      	ldr	r2, [pc, #328]	; (80125d0 <PrepareFrame+0x290>)
 8012488:	589b      	ldr	r3, [r3, r2]
 801248a:	2285      	movs	r2, #133	; 0x85
 801248c:	569b      	ldrsb	r3, [r3, r2]
 801248e:	221f      	movs	r2, #31
 8012490:	18bc      	adds	r4, r7, r2
 8012492:	0018      	movs	r0, r3
 8012494:	f7fe fb50 	bl	8010b38 <GetMaxAppPayloadWithoutFOptsLength>
 8012498:	0003      	movs	r3, r0
 801249a:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801249c:	4b47      	ldr	r3, [pc, #284]	; (80125bc <PrepareFrame+0x27c>)
 801249e:	4a4a      	ldr	r2, [pc, #296]	; (80125c8 <PrepareFrame+0x288>)
 80124a0:	5c9b      	ldrb	r3, [r3, r2]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d024      	beq.n	80124f0 <PrepareFrame+0x1b0>
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	2b0f      	cmp	r3, #15
 80124aa:	d821      	bhi.n	80124f0 <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80124ac:	4a4a      	ldr	r2, [pc, #296]	; (80125d8 <PrepareFrame+0x298>)
 80124ae:	2314      	movs	r3, #20
 80124b0:	18fb      	adds	r3, r7, r3
 80124b2:	0019      	movs	r1, r3
 80124b4:	200f      	movs	r0, #15
 80124b6:	f002 fd6d 	bl	8014f94 <LoRaMacCommandsSerializeCmds>
 80124ba:	1e03      	subs	r3, r0, #0
 80124bc:	d001      	beq.n	80124c2 <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80124be:	2313      	movs	r3, #19
 80124c0:	e077      	b.n	80125b2 <PrepareFrame+0x272>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	1c1a      	adds	r2, r3, #0
 80124c6:	230f      	movs	r3, #15
 80124c8:	4013      	ands	r3, r2
 80124ca:	b2da      	uxtb	r2, r3
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	210f      	movs	r1, #15
 80124d0:	400a      	ands	r2, r1
 80124d2:	0010      	movs	r0, r2
 80124d4:	781a      	ldrb	r2, [r3, #0]
 80124d6:	210f      	movs	r1, #15
 80124d8:	438a      	bics	r2, r1
 80124da:	1c11      	adds	r1, r2, #0
 80124dc:	1c02      	adds	r2, r0, #0
 80124de:	430a      	orrs	r2, r1
 80124e0:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	7819      	ldrb	r1, [r3, #0]
 80124e6:	4a35      	ldr	r2, [pc, #212]	; (80125bc <PrepareFrame+0x27c>)
 80124e8:	238a      	movs	r3, #138	; 0x8a
 80124ea:	005b      	lsls	r3, r3, #1
 80124ec:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80124ee:	e05c      	b.n	80125aa <PrepareFrame+0x26a>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80124f0:	4b32      	ldr	r3, [pc, #200]	; (80125bc <PrepareFrame+0x27c>)
 80124f2:	4a35      	ldr	r2, [pc, #212]	; (80125c8 <PrepareFrame+0x288>)
 80124f4:	5c9b      	ldrb	r3, [r3, r2]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d015      	beq.n	8012526 <PrepareFrame+0x1e6>
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	2b0f      	cmp	r3, #15
 80124fe:	d912      	bls.n	8012526 <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012500:	231f      	movs	r3, #31
 8012502:	18fb      	adds	r3, r7, r3
 8012504:	7818      	ldrb	r0, [r3, #0]
 8012506:	4b2d      	ldr	r3, [pc, #180]	; (80125bc <PrepareFrame+0x27c>)
 8012508:	4a31      	ldr	r2, [pc, #196]	; (80125d0 <PrepareFrame+0x290>)
 801250a:	589b      	ldr	r3, [r3, r2]
 801250c:	33cb      	adds	r3, #203	; 0xcb
 801250e:	001a      	movs	r2, r3
 8012510:	2314      	movs	r3, #20
 8012512:	18fb      	adds	r3, r7, r3
 8012514:	0019      	movs	r1, r3
 8012516:	f002 fd3d 	bl	8014f94 <LoRaMacCommandsSerializeCmds>
 801251a:	1e03      	subs	r3, r0, #0
 801251c:	d001      	beq.n	8012522 <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801251e:	2313      	movs	r3, #19
 8012520:	e047      	b.n	80125b2 <PrepareFrame+0x272>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012522:	230a      	movs	r3, #10
 8012524:	e045      	b.n	80125b2 <PrepareFrame+0x272>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012526:	231f      	movs	r3, #31
 8012528:	18fb      	adds	r3, r7, r3
 801252a:	7818      	ldrb	r0, [r3, #0]
 801252c:	4b23      	ldr	r3, [pc, #140]	; (80125bc <PrepareFrame+0x27c>)
 801252e:	4a28      	ldr	r2, [pc, #160]	; (80125d0 <PrepareFrame+0x290>)
 8012530:	589b      	ldr	r3, [r3, r2]
 8012532:	33cb      	adds	r3, #203	; 0xcb
 8012534:	001a      	movs	r2, r3
 8012536:	2314      	movs	r3, #20
 8012538:	18fb      	adds	r3, r7, r3
 801253a:	0019      	movs	r1, r3
 801253c:	f002 fd2a 	bl	8014f94 <LoRaMacCommandsSerializeCmds>
 8012540:	1e03      	subs	r3, r0, #0
 8012542:	d001      	beq.n	8012548 <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012544:	2313      	movs	r3, #19
 8012546:	e034      	b.n	80125b2 <PrepareFrame+0x272>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012548:	4a1c      	ldr	r2, [pc, #112]	; (80125bc <PrepareFrame+0x27c>)
 801254a:	2394      	movs	r3, #148	; 0x94
 801254c:	005b      	lsls	r3, r3, #1
 801254e:	2100      	movs	r1, #0
 8012550:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8012552:	4b1a      	ldr	r3, [pc, #104]	; (80125bc <PrepareFrame+0x27c>)
 8012554:	4a1e      	ldr	r2, [pc, #120]	; (80125d0 <PrepareFrame+0x290>)
 8012556:	589b      	ldr	r3, [r3, r2]
 8012558:	33cb      	adds	r3, #203	; 0xcb
 801255a:	0019      	movs	r1, r3
 801255c:	4a17      	ldr	r2, [pc, #92]	; (80125bc <PrepareFrame+0x27c>)
 801255e:	2396      	movs	r3, #150	; 0x96
 8012560:	005b      	lsls	r3, r3, #1
 8012562:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	b2d9      	uxtb	r1, r3
 8012568:	4a14      	ldr	r2, [pc, #80]	; (80125bc <PrepareFrame+0x27c>)
 801256a:	2398      	movs	r3, #152	; 0x98
 801256c:	005b      	lsls	r3, r3, #1
 801256e:	54d1      	strb	r1, [r2, r3]
            break;
 8012570:	e01b      	b.n	80125aa <PrepareFrame+0x26a>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d01a      	beq.n	80125ae <PrepareFrame+0x26e>
 8012578:	4b10      	ldr	r3, [pc, #64]	; (80125bc <PrepareFrame+0x27c>)
 801257a:	4a13      	ldr	r2, [pc, #76]	; (80125c8 <PrepareFrame+0x288>)
 801257c:	5c9b      	ldrb	r3, [r3, r2]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d015      	beq.n	80125ae <PrepareFrame+0x26e>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012582:	4816      	ldr	r0, [pc, #88]	; (80125dc <PrepareFrame+0x29c>)
 8012584:	4b0d      	ldr	r3, [pc, #52]	; (80125bc <PrepareFrame+0x27c>)
 8012586:	4a10      	ldr	r2, [pc, #64]	; (80125c8 <PrepareFrame+0x288>)
 8012588:	5c9b      	ldrb	r3, [r3, r2]
 801258a:	b29a      	uxth	r2, r3
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	0019      	movs	r1, r3
 8012590:	f007 f842 	bl	8019618 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012594:	4b09      	ldr	r3, [pc, #36]	; (80125bc <PrepareFrame+0x27c>)
 8012596:	4a0c      	ldr	r2, [pc, #48]	; (80125c8 <PrepareFrame+0x288>)
 8012598:	5c9b      	ldrb	r3, [r3, r2]
 801259a:	b29b      	uxth	r3, r3
 801259c:	3301      	adds	r3, #1
 801259e:	b29a      	uxth	r2, r3
 80125a0:	4b06      	ldr	r3, [pc, #24]	; (80125bc <PrepareFrame+0x27c>)
 80125a2:	801a      	strh	r2, [r3, #0]
            }
            break;
 80125a4:	e003      	b.n	80125ae <PrepareFrame+0x26e>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80125a6:	2302      	movs	r3, #2
 80125a8:	e003      	b.n	80125b2 <PrepareFrame+0x272>
            break;
 80125aa:	46c0      	nop			; (mov r8, r8)
 80125ac:	e000      	b.n	80125b0 <PrepareFrame+0x270>
            break;
 80125ae:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 80125b0:	2300      	movs	r3, #0
}
 80125b2:	0018      	movs	r0, r3
 80125b4:	46bd      	mov	sp, r7
 80125b6:	b009      	add	sp, #36	; 0x24
 80125b8:	bd90      	pop	{r4, r7, pc}
 80125ba:	46c0      	nop			; (mov r8, r8)
 80125bc:	200005b8 	.word	0x200005b8
 80125c0:	00000414 	.word	0x00000414
 80125c4:	200006f0 	.word	0x200006f0
 80125c8:	00000237 	.word	0x00000237
 80125cc:	200005ba 	.word	0x200005ba
 80125d0:	00000484 	.word	0x00000484
 80125d4:	00000441 	.word	0x00000441
 80125d8:	200006d0 	.word	0x200006d0
 80125dc:	200005bb 	.word	0x200005bb

080125e0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80125e0:	b5b0      	push	{r4, r5, r7, lr}
 80125e2:	b08a      	sub	sp, #40	; 0x28
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	0002      	movs	r2, r0
 80125e8:	1dfb      	adds	r3, r7, #7
 80125ea:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125ec:	2327      	movs	r3, #39	; 0x27
 80125ee:	18fb      	adds	r3, r7, r3
 80125f0:	2203      	movs	r2, #3
 80125f2:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 10;
 80125f4:	240f      	movs	r4, #15
 80125f6:	193b      	adds	r3, r7, r4
 80125f8:	220a      	movs	r2, #10
 80125fa:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 80125fc:	2110      	movs	r1, #16
 80125fe:	187b      	adds	r3, r7, r1
 8012600:	1dfa      	adds	r2, r7, #7
 8012602:	7812      	ldrb	r2, [r2, #0]
 8012604:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012606:	4b57      	ldr	r3, [pc, #348]	; (8012764 <SendFrameOnChannel+0x184>)
 8012608:	4a57      	ldr	r2, [pc, #348]	; (8012768 <SendFrameOnChannel+0x188>)
 801260a:	589b      	ldr	r3, [r3, r2]
 801260c:	2285      	movs	r2, #133	; 0x85
 801260e:	569a      	ldrsb	r2, [r3, r2]
 8012610:	187b      	adds	r3, r7, r1
 8012612:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012614:	4b53      	ldr	r3, [pc, #332]	; (8012764 <SendFrameOnChannel+0x184>)
 8012616:	4a54      	ldr	r2, [pc, #336]	; (8012768 <SendFrameOnChannel+0x188>)
 8012618:	589b      	ldr	r3, [r3, r2]
 801261a:	2284      	movs	r2, #132	; 0x84
 801261c:	569a      	ldrsb	r2, [r3, r2]
 801261e:	187b      	adds	r3, r7, r1
 8012620:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012622:	4b50      	ldr	r3, [pc, #320]	; (8012764 <SendFrameOnChannel+0x184>)
 8012624:	4a50      	ldr	r2, [pc, #320]	; (8012768 <SendFrameOnChannel+0x188>)
 8012626:	589b      	ldr	r3, [r3, r2]
 8012628:	22bc      	movs	r2, #188	; 0xbc
 801262a:	589a      	ldr	r2, [r3, r2]
 801262c:	187b      	adds	r3, r7, r1
 801262e:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012630:	4b4c      	ldr	r3, [pc, #304]	; (8012764 <SendFrameOnChannel+0x184>)
 8012632:	4a4d      	ldr	r2, [pc, #308]	; (8012768 <SendFrameOnChannel+0x188>)
 8012634:	589b      	ldr	r3, [r3, r2]
 8012636:	22c0      	movs	r2, #192	; 0xc0
 8012638:	589a      	ldr	r2, [r3, r2]
 801263a:	187b      	adds	r3, r7, r1
 801263c:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801263e:	4b49      	ldr	r3, [pc, #292]	; (8012764 <SendFrameOnChannel+0x184>)
 8012640:	881a      	ldrh	r2, [r3, #0]
 8012642:	187b      	adds	r3, r7, r1
 8012644:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012646:	4b47      	ldr	r3, [pc, #284]	; (8012764 <SendFrameOnChannel+0x184>)
 8012648:	4a47      	ldr	r2, [pc, #284]	; (8012768 <SendFrameOnChannel+0x188>)
 801264a:	589b      	ldr	r3, [r3, r2]
 801264c:	7818      	ldrb	r0, [r3, #0]
 801264e:	4b47      	ldr	r3, [pc, #284]	; (801276c <SendFrameOnChannel+0x18c>)
 8012650:	193a      	adds	r2, r7, r4
 8012652:	1879      	adds	r1, r7, r1
 8012654:	f004 fc4e 	bl	8016ef4 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012658:	4b42      	ldr	r3, [pc, #264]	; (8012764 <SendFrameOnChannel+0x184>)
 801265a:	4a45      	ldr	r2, [pc, #276]	; (8012770 <SendFrameOnChannel+0x190>)
 801265c:	2101      	movs	r1, #1
 801265e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012660:	4b40      	ldr	r3, [pc, #256]	; (8012764 <SendFrameOnChannel+0x184>)
 8012662:	4a41      	ldr	r2, [pc, #260]	; (8012768 <SendFrameOnChannel+0x188>)
 8012664:	589b      	ldr	r3, [r3, r2]
 8012666:	2285      	movs	r2, #133	; 0x85
 8012668:	569b      	ldrsb	r3, [r3, r2]
 801266a:	b2d9      	uxtb	r1, r3
 801266c:	4b3d      	ldr	r3, [pc, #244]	; (8012764 <SendFrameOnChannel+0x184>)
 801266e:	4a41      	ldr	r2, [pc, #260]	; (8012774 <SendFrameOnChannel+0x194>)
 8012670:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 8012672:	193b      	adds	r3, r7, r4
 8012674:	2100      	movs	r1, #0
 8012676:	5659      	ldrsb	r1, [r3, r1]
 8012678:	4b3a      	ldr	r3, [pc, #232]	; (8012764 <SendFrameOnChannel+0x184>)
 801267a:	4a3f      	ldr	r2, [pc, #252]	; (8012778 <SendFrameOnChannel+0x198>)
 801267c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 801267e:	1dfb      	adds	r3, r7, #7
 8012680:	781a      	ldrb	r2, [r3, #0]
 8012682:	4b38      	ldr	r3, [pc, #224]	; (8012764 <SendFrameOnChannel+0x184>)
 8012684:	493d      	ldr	r1, [pc, #244]	; (801277c <SendFrameOnChannel+0x19c>)
 8012686:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012688:	4a36      	ldr	r2, [pc, #216]	; (8012764 <SendFrameOnChannel+0x184>)
 801268a:	2383      	movs	r3, #131	; 0x83
 801268c:	00db      	lsls	r3, r3, #3
 801268e:	58d2      	ldr	r2, [r2, r3]
 8012690:	4b34      	ldr	r3, [pc, #208]	; (8012764 <SendFrameOnChannel+0x184>)
 8012692:	493b      	ldr	r1, [pc, #236]	; (8012780 <SendFrameOnChannel+0x1a0>)
 8012694:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012696:	4a33      	ldr	r2, [pc, #204]	; (8012764 <SendFrameOnChannel+0x184>)
 8012698:	2383      	movs	r3, #131	; 0x83
 801269a:	00db      	lsls	r3, r3, #3
 801269c:	58d2      	ldr	r2, [r2, r3]
 801269e:	4b31      	ldr	r3, [pc, #196]	; (8012764 <SendFrameOnChannel+0x184>)
 80126a0:	4938      	ldr	r1, [pc, #224]	; (8012784 <SendFrameOnChannel+0x1a4>)
 80126a2:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80126a4:	f002 f9b0 	bl	8014a08 <LoRaMacClassBIsBeaconModeActive>
 80126a8:	1e03      	subs	r3, r0, #0
 80126aa:	d00d      	beq.n	80126c8 <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80126ac:	4a2d      	ldr	r2, [pc, #180]	; (8012764 <SendFrameOnChannel+0x184>)
 80126ae:	2383      	movs	r3, #131	; 0x83
 80126b0:	00db      	lsls	r3, r3, #3
 80126b2:	58d3      	ldr	r3, [r2, r3]
 80126b4:	0018      	movs	r0, r3
 80126b6:	f002 fa0b 	bl	8014ad0 <LoRaMacClassBIsUplinkCollision>
 80126ba:	0003      	movs	r3, r0
 80126bc:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 80126be:	6a3b      	ldr	r3, [r7, #32]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d001      	beq.n	80126c8 <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80126c4:	2310      	movs	r3, #16
 80126c6:	e048      	b.n	801275a <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80126c8:	4b26      	ldr	r3, [pc, #152]	; (8012764 <SendFrameOnChannel+0x184>)
 80126ca:	4a27      	ldr	r2, [pc, #156]	; (8012768 <SendFrameOnChannel+0x188>)
 80126cc:	589b      	ldr	r3, [r3, r2]
 80126ce:	227c      	movs	r2, #124	; 0x7c
 80126d0:	5c9b      	ldrb	r3, [r3, r2]
 80126d2:	2b01      	cmp	r3, #1
 80126d4:	d101      	bne.n	80126da <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80126d6:	f002 fa04 	bl	8014ae2 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80126da:	f002 f9a5 	bl	8014a28 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80126de:	4b21      	ldr	r3, [pc, #132]	; (8012764 <SendFrameOnChannel+0x184>)
 80126e0:	4a21      	ldr	r2, [pc, #132]	; (8012768 <SendFrameOnChannel+0x188>)
 80126e2:	589b      	ldr	r3, [r3, r2]
 80126e4:	2285      	movs	r2, #133	; 0x85
 80126e6:	569b      	ldrsb	r3, [r3, r2]
 80126e8:	b2da      	uxtb	r2, r3
 80126ea:	4b1e      	ldr	r3, [pc, #120]	; (8012764 <SendFrameOnChannel+0x184>)
 80126ec:	4926      	ldr	r1, [pc, #152]	; (8012788 <SendFrameOnChannel+0x1a8>)
 80126ee:	5c5b      	ldrb	r3, [r3, r1]
 80126f0:	2527      	movs	r5, #39	; 0x27
 80126f2:	197c      	adds	r4, r7, r5
 80126f4:	0019      	movs	r1, r3
 80126f6:	0010      	movs	r0, r2
 80126f8:	f7ff fbea 	bl	8011ed0 <SecureFrame>
 80126fc:	0003      	movs	r3, r0
 80126fe:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8012700:	197b      	adds	r3, r7, r5
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d002      	beq.n	801270e <SendFrameOnChannel+0x12e>
    {
        return status;
 8012708:	197b      	adds	r3, r7, r5
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	e025      	b.n	801275a <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801270e:	4a15      	ldr	r2, [pc, #84]	; (8012764 <SendFrameOnChannel+0x184>)
 8012710:	23d0      	movs	r3, #208	; 0xd0
 8012712:	009b      	lsls	r3, r3, #2
 8012714:	58d3      	ldr	r3, [r2, r3]
 8012716:	2202      	movs	r2, #2
 8012718:	431a      	orrs	r2, r3
 801271a:	0011      	movs	r1, r2
 801271c:	4a11      	ldr	r2, [pc, #68]	; (8012764 <SendFrameOnChannel+0x184>)
 801271e:	23d0      	movs	r3, #208	; 0xd0
 8012720:	009b      	lsls	r3, r3, #2
 8012722:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8012724:	4b0f      	ldr	r3, [pc, #60]	; (8012764 <SendFrameOnChannel+0x184>)
 8012726:	4a19      	ldr	r2, [pc, #100]	; (801278c <SendFrameOnChannel+0x1ac>)
 8012728:	5c9b      	ldrb	r3, [r3, r2]
 801272a:	2201      	movs	r2, #1
 801272c:	4053      	eors	r3, r2
 801272e:	b2db      	uxtb	r3, r3
 8012730:	2b00      	cmp	r3, #0
 8012732:	d009      	beq.n	8012748 <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012734:	4a0b      	ldr	r2, [pc, #44]	; (8012764 <SendFrameOnChannel+0x184>)
 8012736:	2382      	movs	r3, #130	; 0x82
 8012738:	00db      	lsls	r3, r3, #3
 801273a:	5cd3      	ldrb	r3, [r2, r3]
 801273c:	3301      	adds	r3, #1
 801273e:	b2d9      	uxtb	r1, r3
 8012740:	4a08      	ldr	r2, [pc, #32]	; (8012764 <SendFrameOnChannel+0x184>)
 8012742:	2382      	movs	r3, #130	; 0x82
 8012744:	00db      	lsls	r3, r3, #3
 8012746:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012748:	4b11      	ldr	r3, [pc, #68]	; (8012790 <SendFrameOnChannel+0x1b0>)
 801274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801274c:	4a05      	ldr	r2, [pc, #20]	; (8012764 <SendFrameOnChannel+0x184>)
 801274e:	8812      	ldrh	r2, [r2, #0]
 8012750:	b2d1      	uxtb	r1, r2
 8012752:	4a10      	ldr	r2, [pc, #64]	; (8012794 <SendFrameOnChannel+0x1b4>)
 8012754:	0010      	movs	r0, r2
 8012756:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012758:	2300      	movs	r3, #0
}
 801275a:	0018      	movs	r0, r3
 801275c:	46bd      	mov	sp, r7
 801275e:	b00a      	add	sp, #40	; 0x28
 8012760:	bdb0      	pop	{r4, r5, r7, pc}
 8012762:	46c0      	nop			; (mov r8, r8)
 8012764:	200005b8 	.word	0x200005b8
 8012768:	00000484 	.word	0x00000484
 801276c:	200009d0 	.word	0x200009d0
 8012770:	0000043d 	.word	0x0000043d
 8012774:	0000043e 	.word	0x0000043e
 8012778:	0000043f 	.word	0x0000043f
 801277c:	0000044c 	.word	0x0000044c
 8012780:	00000444 	.word	0x00000444
 8012784:	00000454 	.word	0x00000454
 8012788:	00000415 	.word	0x00000415
 801278c:	00000414 	.word	0x00000414
 8012790:	0801fd7c 	.word	0x0801fd7c
 8012794:	200005ba 	.word	0x200005ba

08012798 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b086      	sub	sp, #24
 801279c:	af00      	add	r7, sp, #0
 801279e:	0002      	movs	r2, r0
 80127a0:	1dbb      	adds	r3, r7, #6
 80127a2:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80127a4:	4b1f      	ldr	r3, [pc, #124]	; (8012824 <SetTxContinuousWave+0x8c>)
 80127a6:	4a20      	ldr	r2, [pc, #128]	; (8012828 <SetTxContinuousWave+0x90>)
 80127a8:	5c9a      	ldrb	r2, [r3, r2]
 80127aa:	2108      	movs	r1, #8
 80127ac:	187b      	adds	r3, r7, r1
 80127ae:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80127b0:	4b1c      	ldr	r3, [pc, #112]	; (8012824 <SetTxContinuousWave+0x8c>)
 80127b2:	4a1e      	ldr	r2, [pc, #120]	; (801282c <SetTxContinuousWave+0x94>)
 80127b4:	589b      	ldr	r3, [r3, r2]
 80127b6:	2285      	movs	r2, #133	; 0x85
 80127b8:	569a      	ldrsb	r2, [r3, r2]
 80127ba:	187b      	adds	r3, r7, r1
 80127bc:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80127be:	4b19      	ldr	r3, [pc, #100]	; (8012824 <SetTxContinuousWave+0x8c>)
 80127c0:	4a1a      	ldr	r2, [pc, #104]	; (801282c <SetTxContinuousWave+0x94>)
 80127c2:	589b      	ldr	r3, [r3, r2]
 80127c4:	2284      	movs	r2, #132	; 0x84
 80127c6:	569a      	ldrsb	r2, [r3, r2]
 80127c8:	187b      	adds	r3, r7, r1
 80127ca:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80127cc:	4b15      	ldr	r3, [pc, #84]	; (8012824 <SetTxContinuousWave+0x8c>)
 80127ce:	4a17      	ldr	r2, [pc, #92]	; (801282c <SetTxContinuousWave+0x94>)
 80127d0:	589b      	ldr	r3, [r3, r2]
 80127d2:	22bc      	movs	r2, #188	; 0xbc
 80127d4:	589a      	ldr	r2, [r3, r2]
 80127d6:	187b      	adds	r3, r7, r1
 80127d8:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80127da:	4b12      	ldr	r3, [pc, #72]	; (8012824 <SetTxContinuousWave+0x8c>)
 80127dc:	4a13      	ldr	r2, [pc, #76]	; (801282c <SetTxContinuousWave+0x94>)
 80127de:	589b      	ldr	r3, [r3, r2]
 80127e0:	22c0      	movs	r2, #192	; 0xc0
 80127e2:	589a      	ldr	r2, [r3, r2]
 80127e4:	187b      	adds	r3, r7, r1
 80127e6:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 80127e8:	187b      	adds	r3, r7, r1
 80127ea:	1dba      	adds	r2, r7, #6
 80127ec:	8812      	ldrh	r2, [r2, #0]
 80127ee:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 80127f0:	4b0c      	ldr	r3, [pc, #48]	; (8012824 <SetTxContinuousWave+0x8c>)
 80127f2:	4a0e      	ldr	r2, [pc, #56]	; (801282c <SetTxContinuousWave+0x94>)
 80127f4:	589b      	ldr	r3, [r3, r2]
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	187a      	adds	r2, r7, r1
 80127fa:	0011      	movs	r1, r2
 80127fc:	0018      	movs	r0, r3
 80127fe:	f004 fc48 	bl	8017092 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012802:	4a08      	ldr	r2, [pc, #32]	; (8012824 <SetTxContinuousWave+0x8c>)
 8012804:	23d0      	movs	r3, #208	; 0xd0
 8012806:	009b      	lsls	r3, r3, #2
 8012808:	58d3      	ldr	r3, [r2, r3]
 801280a:	2202      	movs	r2, #2
 801280c:	431a      	orrs	r2, r3
 801280e:	0011      	movs	r1, r2
 8012810:	4a04      	ldr	r2, [pc, #16]	; (8012824 <SetTxContinuousWave+0x8c>)
 8012812:	23d0      	movs	r3, #208	; 0xd0
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8012818:	2300      	movs	r3, #0
}
 801281a:	0018      	movs	r0, r3
 801281c:	46bd      	mov	sp, r7
 801281e:	b006      	add	sp, #24
 8012820:	bd80      	pop	{r7, pc}
 8012822:	46c0      	nop			; (mov r8, r8)
 8012824:	200005b8 	.word	0x200005b8
 8012828:	00000415 	.word	0x00000415
 801282c:	00000484 	.word	0x00000484

08012830 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6039      	str	r1, [r7, #0]
 8012838:	0011      	movs	r1, r2
 801283a:	1dbb      	adds	r3, r7, #6
 801283c:	1c02      	adds	r2, r0, #0
 801283e:	801a      	strh	r2, [r3, #0]
 8012840:	1d7b      	adds	r3, r7, #5
 8012842:	1c0a      	adds	r2, r1, #0
 8012844:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012846:	4b0c      	ldr	r3, [pc, #48]	; (8012878 <SetTxContinuousWave1+0x48>)
 8012848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801284a:	1d7a      	adds	r2, r7, #5
 801284c:	2100      	movs	r1, #0
 801284e:	5651      	ldrsb	r1, [r2, r1]
 8012850:	1dba      	adds	r2, r7, #6
 8012852:	8812      	ldrh	r2, [r2, #0]
 8012854:	6838      	ldr	r0, [r7, #0]
 8012856:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012858:	4a08      	ldr	r2, [pc, #32]	; (801287c <SetTxContinuousWave1+0x4c>)
 801285a:	23d0      	movs	r3, #208	; 0xd0
 801285c:	009b      	lsls	r3, r3, #2
 801285e:	58d3      	ldr	r3, [r2, r3]
 8012860:	2202      	movs	r2, #2
 8012862:	431a      	orrs	r2, r3
 8012864:	0011      	movs	r1, r2
 8012866:	4a05      	ldr	r2, [pc, #20]	; (801287c <SetTxContinuousWave1+0x4c>)
 8012868:	23d0      	movs	r3, #208	; 0xd0
 801286a:	009b      	lsls	r3, r3, #2
 801286c:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 801286e:	2300      	movs	r3, #0
}
 8012870:	0018      	movs	r0, r3
 8012872:	46bd      	mov	sp, r7
 8012874:	b002      	add	sp, #8
 8012876:	bd80      	pop	{r7, pc}
 8012878:	0801fd7c 	.word	0x0801fd7c
 801287c:	200005b8 	.word	0x200005b8

08012880 <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8012886:	4b20      	ldr	r3, [pc, #128]	; (8012908 <GetCtxs+0x88>)
 8012888:	4a20      	ldr	r2, [pc, #128]	; (801290c <GetCtxs+0x8c>)
 801288a:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 801288c:	4b1e      	ldr	r3, [pc, #120]	; (8012908 <GetCtxs+0x88>)
 801288e:	22b6      	movs	r2, #182	; 0xb6
 8012890:	0052      	lsls	r2, r2, #1
 8012892:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8012894:	4b1e      	ldr	r3, [pc, #120]	; (8012910 <GetCtxs+0x90>)
 8012896:	0018      	movs	r0, r3
 8012898:	f003 faa6 	bl	8015de8 <LoRaMacCryptoGetNvmCtx>
 801289c:	0002      	movs	r2, r0
 801289e:	4b1a      	ldr	r3, [pc, #104]	; (8012908 <GetCtxs+0x88>)
 80128a0:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 80128a2:	2300      	movs	r3, #0
 80128a4:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 80128a6:	4b1b      	ldr	r3, [pc, #108]	; (8012914 <GetCtxs+0x94>)
 80128a8:	4a1b      	ldr	r2, [pc, #108]	; (8012918 <GetCtxs+0x98>)
 80128aa:	589b      	ldr	r3, [r3, r2]
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	1d3a      	adds	r2, r7, #4
 80128b0:	0011      	movs	r1, r2
 80128b2:	0018      	movs	r0, r3
 80128b4:	f004 fa82 	bl	8016dbc <RegionGetNvmCtx>
 80128b8:	0002      	movs	r2, r0
 80128ba:	4b13      	ldr	r3, [pc, #76]	; (8012908 <GetCtxs+0x88>)
 80128bc:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 80128be:	687a      	ldr	r2, [r7, #4]
 80128c0:	4b11      	ldr	r3, [pc, #68]	; (8012908 <GetCtxs+0x88>)
 80128c2:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 80128c4:	4b15      	ldr	r3, [pc, #84]	; (801291c <GetCtxs+0x9c>)
 80128c6:	0018      	movs	r0, r3
 80128c8:	f7fb f8a4 	bl	800da14 <SecureElementGetNvmCtx>
 80128cc:	0002      	movs	r2, r0
 80128ce:	4b0e      	ldr	r3, [pc, #56]	; (8012908 <GetCtxs+0x88>)
 80128d0:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 80128d2:	4b13      	ldr	r3, [pc, #76]	; (8012920 <GetCtxs+0xa0>)
 80128d4:	0018      	movs	r0, r3
 80128d6:	f002 fa63 	bl	8014da0 <LoRaMacCommandsGetNvmCtx>
 80128da:	0002      	movs	r2, r0
 80128dc:	4b0a      	ldr	r3, [pc, #40]	; (8012908 <GetCtxs+0x88>)
 80128de:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 80128e0:	4b10      	ldr	r3, [pc, #64]	; (8012924 <GetCtxs+0xa4>)
 80128e2:	0018      	movs	r0, r3
 80128e4:	f002 f82a 	bl	801493c <LoRaMacClassBGetNvmCtx>
 80128e8:	0002      	movs	r2, r0
 80128ea:	4b07      	ldr	r3, [pc, #28]	; (8012908 <GetCtxs+0x88>)
 80128ec:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 80128ee:	4b0e      	ldr	r3, [pc, #56]	; (8012928 <GetCtxs+0xa8>)
 80128f0:	0018      	movs	r0, r3
 80128f2:	f002 fcf5 	bl	80152e0 <LoRaMacConfirmQueueGetNvmCtx>
 80128f6:	0002      	movs	r2, r0
 80128f8:	4b03      	ldr	r3, [pc, #12]	; (8012908 <GetCtxs+0x88>)
 80128fa:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 80128fc:	4b02      	ldr	r3, [pc, #8]	; (8012908 <GetCtxs+0x88>)
}
 80128fe:	0018      	movs	r0, r3
 8012900:	46bd      	mov	sp, r7
 8012902:	b002      	add	sp, #8
 8012904:	bd80      	pop	{r7, pc}
 8012906:	46c0      	nop			; (mov r8, r8)
 8012908:	20000bb0 	.word	0x20000bb0
 801290c:	20000a44 	.word	0x20000a44
 8012910:	20000bc4 	.word	0x20000bc4
 8012914:	200005b8 	.word	0x200005b8
 8012918:	00000484 	.word	0x00000484
 801291c:	20000bcc 	.word	0x20000bcc
 8012920:	20000bd4 	.word	0x20000bd4
 8012924:	20000bdc 	.word	0x20000bdc
 8012928:	20000be4 	.word	0x20000be4

0801292c <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b084      	sub	sp, #16
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d101      	bne.n	801293e <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801293a:	2303      	movs	r3, #3
 801293c:	e086      	b.n	8012a4c <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801293e:	4a45      	ldr	r2, [pc, #276]	; (8012a54 <RestoreCtxs+0x128>)
 8012940:	23d0      	movs	r3, #208	; 0xd0
 8012942:	009b      	lsls	r3, r3, #2
 8012944:	58d3      	ldr	r3, [r2, r3]
 8012946:	2b01      	cmp	r3, #1
 8012948:	d001      	beq.n	801294e <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 801294a:	2301      	movs	r3, #1
 801294c:	e07e      	b.n	8012a4c <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d008      	beq.n	8012968 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6819      	ldr	r1, [r3, #0]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	b29a      	uxth	r2, r3
 8012960:	4b3d      	ldr	r3, [pc, #244]	; (8012a58 <RestoreCtxs+0x12c>)
 8012962:	0018      	movs	r0, r3
 8012964:	f006 fe58 	bl	8019618 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8012968:	2108      	movs	r1, #8
 801296a:	187b      	adds	r3, r7, r1
 801296c:	2203      	movs	r2, #3
 801296e:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	689a      	ldr	r2, [r3, #8]
 8012974:	187b      	adds	r3, r7, r1
 8012976:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012978:	4b36      	ldr	r3, [pc, #216]	; (8012a54 <RestoreCtxs+0x128>)
 801297a:	4a38      	ldr	r2, [pc, #224]	; (8012a5c <RestoreCtxs+0x130>)
 801297c:	589b      	ldr	r3, [r3, r2]
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	187a      	adds	r2, r7, r1
 8012982:	0011      	movs	r1, r2
 8012984:	0018      	movs	r0, r3
 8012986:	f004 fa04 	bl	8016d92 <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801298a:	4b32      	ldr	r3, [pc, #200]	; (8012a54 <RestoreCtxs+0x128>)
 801298c:	4a34      	ldr	r2, [pc, #208]	; (8012a60 <RestoreCtxs+0x134>)
 801298e:	5c99      	ldrb	r1, [r3, r2]
 8012990:	4a30      	ldr	r2, [pc, #192]	; (8012a54 <RestoreCtxs+0x128>)
 8012992:	23f8      	movs	r3, #248	; 0xf8
 8012994:	009b      	lsls	r3, r3, #2
 8012996:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8012998:	4b2e      	ldr	r3, [pc, #184]	; (8012a54 <RestoreCtxs+0x128>)
 801299a:	4a30      	ldr	r2, [pc, #192]	; (8012a5c <RestoreCtxs+0x130>)
 801299c:	589b      	ldr	r3, [r3, r2]
 801299e:	22b0      	movs	r2, #176	; 0xb0
 80129a0:	5899      	ldr	r1, [r3, r2]
 80129a2:	4a2c      	ldr	r2, [pc, #176]	; (8012a54 <RestoreCtxs+0x128>)
 80129a4:	23f9      	movs	r3, #249	; 0xf9
 80129a6:	009b      	lsls	r3, r3, #2
 80129a8:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80129aa:	4b2a      	ldr	r3, [pc, #168]	; (8012a54 <RestoreCtxs+0x128>)
 80129ac:	4a2b      	ldr	r2, [pc, #172]	; (8012a5c <RestoreCtxs+0x130>)
 80129ae:	589b      	ldr	r3, [r3, r2]
 80129b0:	22b9      	movs	r2, #185	; 0xb9
 80129b2:	5c99      	ldrb	r1, [r3, r2]
 80129b4:	4a27      	ldr	r2, [pc, #156]	; (8012a54 <RestoreCtxs+0x128>)
 80129b6:	23fc      	movs	r3, #252	; 0xfc
 80129b8:	009b      	lsls	r3, r3, #2
 80129ba:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80129bc:	4b25      	ldr	r3, [pc, #148]	; (8012a54 <RestoreCtxs+0x128>)
 80129be:	4a27      	ldr	r2, [pc, #156]	; (8012a5c <RestoreCtxs+0x130>)
 80129c0:	589b      	ldr	r3, [r3, r2]
 80129c2:	22ca      	movs	r2, #202	; 0xca
 80129c4:	5c99      	ldrb	r1, [r3, r2]
 80129c6:	4b23      	ldr	r3, [pc, #140]	; (8012a54 <RestoreCtxs+0x128>)
 80129c8:	4a26      	ldr	r2, [pc, #152]	; (8012a64 <RestoreCtxs+0x138>)
 80129ca:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80129cc:	4b21      	ldr	r3, [pc, #132]	; (8012a54 <RestoreCtxs+0x128>)
 80129ce:	4a26      	ldr	r2, [pc, #152]	; (8012a68 <RestoreCtxs+0x13c>)
 80129d0:	2101      	movs	r1, #1
 80129d2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80129d4:	4b1f      	ldr	r3, [pc, #124]	; (8012a54 <RestoreCtxs+0x128>)
 80129d6:	4a25      	ldr	r2, [pc, #148]	; (8012a6c <RestoreCtxs+0x140>)
 80129d8:	2102      	movs	r1, #2
 80129da:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	699b      	ldr	r3, [r3, #24]
 80129e0:	0018      	movs	r0, r3
 80129e2:	f7fb f801 	bl	800d9e8 <SecureElementRestoreNvmCtx>
 80129e6:	1e03      	subs	r3, r0, #0
 80129e8:	d001      	beq.n	80129ee <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80129ea:	2311      	movs	r3, #17
 80129ec:	e02e      	b.n	8012a4c <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	691b      	ldr	r3, [r3, #16]
 80129f2:	0018      	movs	r0, r3
 80129f4:	f003 f9e2 	bl	8015dbc <LoRaMacCryptoRestoreNvmCtx>
 80129f8:	1e03      	subs	r3, r0, #0
 80129fa:	d001      	beq.n	8012a00 <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80129fc:	2311      	movs	r3, #17
 80129fe:	e025      	b.n	8012a4c <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6a1b      	ldr	r3, [r3, #32]
 8012a04:	0018      	movs	r0, r3
 8012a06:	f002 f9b5 	bl	8014d74 <LoRaMacCommandsRestoreNvmCtx>
 8012a0a:	1e03      	subs	r3, r0, #0
 8012a0c:	d001      	beq.n	8012a12 <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012a0e:	2313      	movs	r3, #19
 8012a10:	e01c      	b.n	8012a4c <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a16:	0018      	movs	r0, r3
 8012a18:	f001 ff87 	bl	801492a <LoRaMacClassBRestoreNvmCtx>
 8012a1c:	0003      	movs	r3, r0
 8012a1e:	001a      	movs	r2, r3
 8012a20:	2301      	movs	r3, #1
 8012a22:	4053      	eors	r3, r2
 8012a24:	b2db      	uxtb	r3, r3
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d001      	beq.n	8012a2e <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8012a2a:	2314      	movs	r3, #20
 8012a2c:	e00e      	b.n	8012a4c <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a32:	0018      	movs	r0, r3
 8012a34:	f002 fc3e 	bl	80152b4 <LoRaMacConfirmQueueRestoreNvmCtx>
 8012a38:	0003      	movs	r3, r0
 8012a3a:	001a      	movs	r2, r3
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	4053      	eors	r3, r2
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d001      	beq.n	8012a4a <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8012a46:	2315      	movs	r3, #21
 8012a48:	e000      	b.n	8012a4c <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 8012a4a:	2300      	movs	r3, #0
}
 8012a4c:	0018      	movs	r0, r3
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	b004      	add	sp, #16
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	200005b8 	.word	0x200005b8
 8012a58:	20000a44 	.word	0x20000a44
 8012a5c:	00000484 	.word	0x00000484
 8012a60:	00000415 	.word	0x00000415
 8012a64:	000003f1 	.word	0x000003f1
 8012a68:	000003f2 	.word	0x000003f2
 8012a6c:	000003f3 	.word	0x000003f3

08012a70 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
 8012a78:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d002      	beq.n	8012a86 <DetermineFrameType+0x16>
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d101      	bne.n	8012a8a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012a86:	2303      	movs	r3, #3
 8012a88:	e03b      	b.n	8012b02 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	7b1b      	ldrb	r3, [r3, #12]
 8012a8e:	220f      	movs	r2, #15
 8012a90:	4013      	ands	r3, r2
 8012a92:	b2db      	uxtb	r3, r3
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d008      	beq.n	8012aaa <DetermineFrameType+0x3a>
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2220      	movs	r2, #32
 8012a9c:	5c9b      	ldrb	r3, [r3, r2]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d003      	beq.n	8012aaa <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	701a      	strb	r2, [r3, #0]
 8012aa8:	e02a      	b.n	8012b00 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2228      	movs	r2, #40	; 0x28
 8012aae:	5c9b      	ldrb	r3, [r3, r2]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d103      	bne.n	8012abc <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	701a      	strb	r2, [r3, #0]
 8012aba:	e021      	b.n	8012b00 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	7b1b      	ldrb	r3, [r3, #12]
 8012ac0:	220f      	movs	r2, #15
 8012ac2:	4013      	ands	r3, r2
 8012ac4:	b2db      	uxtb	r3, r3
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d108      	bne.n	8012adc <DetermineFrameType+0x6c>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2220      	movs	r2, #32
 8012ace:	5c9b      	ldrb	r3, [r3, r2]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d103      	bne.n	8012adc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	2202      	movs	r2, #2
 8012ad8:	701a      	strb	r2, [r3, #0]
 8012ada:	e011      	b.n	8012b00 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	7b1b      	ldrb	r3, [r3, #12]
 8012ae0:	220f      	movs	r2, #15
 8012ae2:	4013      	ands	r3, r2
 8012ae4:	b2db      	uxtb	r3, r3
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d108      	bne.n	8012afc <DetermineFrameType+0x8c>
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2220      	movs	r2, #32
 8012aee:	5c9b      	ldrb	r3, [r3, r2]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d003      	beq.n	8012afc <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	2203      	movs	r2, #3
 8012af8:	701a      	strb	r2, [r3, #0]
 8012afa:	e001      	b.n	8012b00 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012afc:	2317      	movs	r3, #23
 8012afe:	e000      	b.n	8012b02 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012b00:	2300      	movs	r3, #0
}
 8012b02:	0018      	movs	r0, r3
 8012b04:	46bd      	mov	sp, r7
 8012b06:	b002      	add	sp, #8
 8012b08:	bd80      	pop	{r7, pc}
	...

08012b0c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8012b10:	4a14      	ldr	r2, [pc, #80]	; (8012b64 <CheckRetransUnconfirmedUplink+0x58>)
 8012b12:	2382      	movs	r3, #130	; 0x82
 8012b14:	00db      	lsls	r3, r3, #3
 8012b16:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8012b18:	4b12      	ldr	r3, [pc, #72]	; (8012b64 <CheckRetransUnconfirmedUplink+0x58>)
 8012b1a:	4913      	ldr	r1, [pc, #76]	; (8012b68 <CheckRetransUnconfirmedUplink+0x5c>)
 8012b1c:	585b      	ldr	r3, [r3, r1]
 8012b1e:	21a4      	movs	r1, #164	; 0xa4
 8012b20:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d301      	bcc.n	8012b2a <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 8012b26:	2301      	movs	r3, #1
 8012b28:	e018      	b.n	8012b5c <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012b2a:	4b0e      	ldr	r3, [pc, #56]	; (8012b64 <CheckRetransUnconfirmedUplink+0x58>)
 8012b2c:	4a0f      	ldr	r2, [pc, #60]	; (8012b6c <CheckRetransUnconfirmedUplink+0x60>)
 8012b2e:	5c9b      	ldrb	r3, [r3, r2]
 8012b30:	2202      	movs	r2, #2
 8012b32:	4013      	ands	r3, r2
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00f      	beq.n	8012b5a <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8012b3a:	4b0a      	ldr	r3, [pc, #40]	; (8012b64 <CheckRetransUnconfirmedUplink+0x58>)
 8012b3c:	4a0a      	ldr	r2, [pc, #40]	; (8012b68 <CheckRetransUnconfirmedUplink+0x5c>)
 8012b3e:	589b      	ldr	r3, [r3, r2]
 8012b40:	227c      	movs	r2, #124	; 0x7c
 8012b42:	5c9b      	ldrb	r3, [r3, r2]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d101      	bne.n	8012b4c <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 8012b48:	2301      	movs	r3, #1
 8012b4a:	e007      	b.n	8012b5c <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8012b4c:	4b05      	ldr	r3, [pc, #20]	; (8012b64 <CheckRetransUnconfirmedUplink+0x58>)
 8012b4e:	4a08      	ldr	r2, [pc, #32]	; (8012b70 <CheckRetransUnconfirmedUplink+0x64>)
 8012b50:	5c9b      	ldrb	r3, [r3, r2]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d101      	bne.n	8012b5a <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 8012b56:	2301      	movs	r3, #1
 8012b58:	e000      	b.n	8012b5c <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 8012b5a:	2300      	movs	r3, #0
}
 8012b5c:	0018      	movs	r0, r3
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	46c0      	nop			; (mov r8, r8)
 8012b64:	200005b8 	.word	0x200005b8
 8012b68:	00000484 	.word	0x00000484
 8012b6c:	00000481 	.word	0x00000481
 8012b70:	0000042d 	.word	0x0000042d

08012b74 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012b78:	4b0e      	ldr	r3, [pc, #56]	; (8012bb4 <CheckRetransConfirmedUplink+0x40>)
 8012b7a:	4a0f      	ldr	r2, [pc, #60]	; (8012bb8 <CheckRetransConfirmedUplink+0x44>)
 8012b7c:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8012b7e:	4b0d      	ldr	r3, [pc, #52]	; (8012bb4 <CheckRetransConfirmedUplink+0x40>)
 8012b80:	490e      	ldr	r1, [pc, #56]	; (8012bbc <CheckRetransConfirmedUplink+0x48>)
 8012b82:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d301      	bcc.n	8012b8c <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	e010      	b.n	8012bae <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012b8c:	4b09      	ldr	r3, [pc, #36]	; (8012bb4 <CheckRetransConfirmedUplink+0x40>)
 8012b8e:	4a0c      	ldr	r2, [pc, #48]	; (8012bc0 <CheckRetransConfirmedUplink+0x4c>)
 8012b90:	5c9b      	ldrb	r3, [r3, r2]
 8012b92:	2202      	movs	r2, #2
 8012b94:	4013      	ands	r3, r2
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d007      	beq.n	8012bac <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012b9c:	4a05      	ldr	r2, [pc, #20]	; (8012bb4 <CheckRetransConfirmedUplink+0x40>)
 8012b9e:	2388      	movs	r3, #136	; 0x88
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	5cd3      	ldrb	r3, [r2, r3]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d001      	beq.n	8012bac <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8012ba8:	2301      	movs	r3, #1
 8012baa:	e000      	b.n	8012bae <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8012bac:	2300      	movs	r3, #0
}
 8012bae:	0018      	movs	r0, r3
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}
 8012bb4:	200005b8 	.word	0x200005b8
 8012bb8:	00000412 	.word	0x00000412
 8012bbc:	00000411 	.word	0x00000411
 8012bc0:	00000481 	.word	0x00000481

08012bc4 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012bc8:	4b1e      	ldr	r3, [pc, #120]	; (8012c44 <StopRetransmission+0x80>)
 8012bca:	4a1f      	ldr	r2, [pc, #124]	; (8012c48 <StopRetransmission+0x84>)
 8012bcc:	5c9b      	ldrb	r3, [r3, r2]
 8012bce:	2202      	movs	r2, #2
 8012bd0:	4013      	ands	r3, r2
 8012bd2:	b2db      	uxtb	r3, r3
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d009      	beq.n	8012bec <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012bd8:	4b1a      	ldr	r3, [pc, #104]	; (8012c44 <StopRetransmission+0x80>)
 8012bda:	4a1c      	ldr	r2, [pc, #112]	; (8012c4c <StopRetransmission+0x88>)
 8012bdc:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d013      	beq.n	8012c0a <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012be2:	4b18      	ldr	r3, [pc, #96]	; (8012c44 <StopRetransmission+0x80>)
 8012be4:	4a19      	ldr	r2, [pc, #100]	; (8012c4c <StopRetransmission+0x88>)
 8012be6:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012be8:	2b01      	cmp	r3, #1
 8012bea:	d00e      	beq.n	8012c0a <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8012bec:	4b15      	ldr	r3, [pc, #84]	; (8012c44 <StopRetransmission+0x80>)
 8012bee:	4a18      	ldr	r2, [pc, #96]	; (8012c50 <StopRetransmission+0x8c>)
 8012bf0:	589b      	ldr	r3, [r3, r2]
 8012bf2:	227e      	movs	r2, #126	; 0x7e
 8012bf4:	5c9b      	ldrb	r3, [r3, r2]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d007      	beq.n	8012c0a <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8012bfa:	4b12      	ldr	r3, [pc, #72]	; (8012c44 <StopRetransmission+0x80>)
 8012bfc:	4a14      	ldr	r2, [pc, #80]	; (8012c50 <StopRetransmission+0x8c>)
 8012bfe:	589b      	ldr	r3, [r3, r2]
 8012c00:	2280      	movs	r2, #128	; 0x80
 8012c02:	589a      	ldr	r2, [r3, r2]
 8012c04:	3201      	adds	r2, #1
 8012c06:	2180      	movs	r1, #128	; 0x80
 8012c08:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012c0a:	4a0e      	ldr	r2, [pc, #56]	; (8012c44 <StopRetransmission+0x80>)
 8012c0c:	2382      	movs	r3, #130	; 0x82
 8012c0e:	00db      	lsls	r3, r3, #3
 8012c10:	2100      	movs	r1, #0
 8012c12:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 8012c14:	4b0b      	ldr	r3, [pc, #44]	; (8012c44 <StopRetransmission+0x80>)
 8012c16:	4a0f      	ldr	r2, [pc, #60]	; (8012c54 <StopRetransmission+0x90>)
 8012c18:	2100      	movs	r1, #0
 8012c1a:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8012c1c:	4b09      	ldr	r3, [pc, #36]	; (8012c44 <StopRetransmission+0x80>)
 8012c1e:	4a0e      	ldr	r2, [pc, #56]	; (8012c58 <StopRetransmission+0x94>)
 8012c20:	2100      	movs	r1, #0
 8012c22:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012c24:	4a07      	ldr	r2, [pc, #28]	; (8012c44 <StopRetransmission+0x80>)
 8012c26:	23d0      	movs	r3, #208	; 0xd0
 8012c28:	009b      	lsls	r3, r3, #2
 8012c2a:	58d3      	ldr	r3, [r2, r3]
 8012c2c:	2202      	movs	r2, #2
 8012c2e:	4393      	bics	r3, r2
 8012c30:	0019      	movs	r1, r3
 8012c32:	4a04      	ldr	r2, [pc, #16]	; (8012c44 <StopRetransmission+0x80>)
 8012c34:	23d0      	movs	r3, #208	; 0xd0
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	50d1      	str	r1, [r2, r3]

    return true;
 8012c3a:	2301      	movs	r3, #1
}
 8012c3c:	0018      	movs	r0, r3
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	46c0      	nop			; (mov r8, r8)
 8012c44:	200005b8 	.word	0x200005b8
 8012c48:	00000481 	.word	0x00000481
 8012c4c:	0000042d 	.word	0x0000042d
 8012c50:	00000484 	.word	0x00000484
 8012c54:	00000414 	.word	0x00000414
 8012c58:	00000413 	.word	0x00000413

08012c5c <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8012c62:	4b21      	ldr	r3, [pc, #132]	; (8012ce8 <AckTimeoutRetriesProcess+0x8c>)
 8012c64:	4a21      	ldr	r2, [pc, #132]	; (8012cec <AckTimeoutRetriesProcess+0x90>)
 8012c66:	5c9a      	ldrb	r2, [r3, r2]
 8012c68:	4b1f      	ldr	r3, [pc, #124]	; (8012ce8 <AckTimeoutRetriesProcess+0x8c>)
 8012c6a:	4921      	ldr	r1, [pc, #132]	; (8012cf0 <AckTimeoutRetriesProcess+0x94>)
 8012c6c:	5c5b      	ldrb	r3, [r3, r1]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d236      	bcs.n	8012ce0 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8012c72:	4b1d      	ldr	r3, [pc, #116]	; (8012ce8 <AckTimeoutRetriesProcess+0x8c>)
 8012c74:	4a1d      	ldr	r2, [pc, #116]	; (8012cec <AckTimeoutRetriesProcess+0x90>)
 8012c76:	5c9b      	ldrb	r3, [r3, r2]
 8012c78:	3301      	adds	r3, #1
 8012c7a:	b2d9      	uxtb	r1, r3
 8012c7c:	4b1a      	ldr	r3, [pc, #104]	; (8012ce8 <AckTimeoutRetriesProcess+0x8c>)
 8012c7e:	4a1b      	ldr	r2, [pc, #108]	; (8012cec <AckTimeoutRetriesProcess+0x90>)
 8012c80:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8012c82:	4b19      	ldr	r3, [pc, #100]	; (8012ce8 <AckTimeoutRetriesProcess+0x8c>)
 8012c84:	4a19      	ldr	r2, [pc, #100]	; (8012cec <AckTimeoutRetriesProcess+0x90>)
 8012c86:	5c9b      	ldrb	r3, [r3, r2]
 8012c88:	2201      	movs	r2, #1
 8012c8a:	4013      	ands	r3, r2
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d026      	beq.n	8012ce0 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012c92:	2108      	movs	r1, #8
 8012c94:	187b      	adds	r3, r7, r1
 8012c96:	2222      	movs	r2, #34	; 0x22
 8012c98:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012c9a:	4b13      	ldr	r3, [pc, #76]	; (8012ce8 <AckTimeoutRetriesProcess+0x8c>)
 8012c9c:	4a15      	ldr	r2, [pc, #84]	; (8012cf4 <AckTimeoutRetriesProcess+0x98>)
 8012c9e:	589b      	ldr	r3, [r3, r2]
 8012ca0:	22b8      	movs	r2, #184	; 0xb8
 8012ca2:	5c9a      	ldrb	r2, [r3, r2]
 8012ca4:	187b      	adds	r3, r7, r1
 8012ca6:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012ca8:	4b0f      	ldr	r3, [pc, #60]	; (8012ce8 <AckTimeoutRetriesProcess+0x8c>)
 8012caa:	4a12      	ldr	r2, [pc, #72]	; (8012cf4 <AckTimeoutRetriesProcess+0x98>)
 8012cac:	589b      	ldr	r3, [r3, r2]
 8012cae:	2285      	movs	r2, #133	; 0x85
 8012cb0:	569a      	ldrsb	r2, [r3, r2]
 8012cb2:	187b      	adds	r3, r7, r1
 8012cb4:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012cb6:	4b0c      	ldr	r3, [pc, #48]	; (8012ce8 <AckTimeoutRetriesProcess+0x8c>)
 8012cb8:	4a0e      	ldr	r2, [pc, #56]	; (8012cf4 <AckTimeoutRetriesProcess+0x98>)
 8012cba:	589b      	ldr	r3, [r3, r2]
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	187a      	adds	r2, r7, r1
 8012cc0:	0011      	movs	r1, r2
 8012cc2:	0018      	movs	r0, r3
 8012cc4:	f004 f829 	bl	8016d1a <RegionGetPhyParam>
 8012cc8:	0003      	movs	r3, r0
 8012cca:	001a      	movs	r2, r3
 8012ccc:	1d3b      	adds	r3, r7, #4
 8012cce:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8012cd0:	1d3b      	adds	r3, r7, #4
 8012cd2:	6819      	ldr	r1, [r3, #0]
 8012cd4:	4b04      	ldr	r3, [pc, #16]	; (8012ce8 <AckTimeoutRetriesProcess+0x8c>)
 8012cd6:	4a07      	ldr	r2, [pc, #28]	; (8012cf4 <AckTimeoutRetriesProcess+0x98>)
 8012cd8:	589b      	ldr	r3, [r3, r2]
 8012cda:	b249      	sxtb	r1, r1
 8012cdc:	2285      	movs	r2, #133	; 0x85
 8012cde:	5499      	strb	r1, [r3, r2]
        }
    }
}
 8012ce0:	46c0      	nop			; (mov r8, r8)
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	b004      	add	sp, #16
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	200005b8 	.word	0x200005b8
 8012cec:	00000412 	.word	0x00000412
 8012cf0:	00000411 	.word	0x00000411
 8012cf4:	00000484 	.word	0x00000484

08012cf8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b082      	sub	sp, #8
 8012cfc:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012cfe:	4a16      	ldr	r2, [pc, #88]	; (8012d58 <AckTimeoutRetriesFinalize+0x60>)
 8012d00:	2388      	movs	r3, #136	; 0x88
 8012d02:	00db      	lsls	r3, r3, #3
 8012d04:	5cd3      	ldrb	r3, [r2, r3]
 8012d06:	2201      	movs	r2, #1
 8012d08:	4053      	eors	r3, r2
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d018      	beq.n	8012d42 <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012d10:	003b      	movs	r3, r7
 8012d12:	2202      	movs	r2, #2
 8012d14:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8012d16:	4b11      	ldr	r3, [pc, #68]	; (8012d5c <AckTimeoutRetriesFinalize+0x64>)
 8012d18:	689a      	ldr	r2, [r3, #8]
 8012d1a:	003b      	movs	r3, r7
 8012d1c:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012d1e:	4b0e      	ldr	r3, [pc, #56]	; (8012d58 <AckTimeoutRetriesFinalize+0x60>)
 8012d20:	4a0f      	ldr	r2, [pc, #60]	; (8012d60 <AckTimeoutRetriesFinalize+0x68>)
 8012d22:	589b      	ldr	r3, [r3, r2]
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	003a      	movs	r2, r7
 8012d28:	0011      	movs	r1, r2
 8012d2a:	0018      	movs	r0, r3
 8012d2c:	f004 f831 	bl	8016d92 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012d30:	4b09      	ldr	r3, [pc, #36]	; (8012d58 <AckTimeoutRetriesFinalize+0x60>)
 8012d32:	4a0c      	ldr	r2, [pc, #48]	; (8012d64 <AckTimeoutRetriesFinalize+0x6c>)
 8012d34:	2100      	movs	r1, #0
 8012d36:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 8012d38:	4a07      	ldr	r2, [pc, #28]	; (8012d58 <AckTimeoutRetriesFinalize+0x60>)
 8012d3a:	2388      	movs	r3, #136	; 0x88
 8012d3c:	00db      	lsls	r3, r3, #3
 8012d3e:	2100      	movs	r1, #0
 8012d40:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012d42:	4b05      	ldr	r3, [pc, #20]	; (8012d58 <AckTimeoutRetriesFinalize+0x60>)
 8012d44:	4a08      	ldr	r2, [pc, #32]	; (8012d68 <AckTimeoutRetriesFinalize+0x70>)
 8012d46:	5c99      	ldrb	r1, [r3, r2]
 8012d48:	4b03      	ldr	r3, [pc, #12]	; (8012d58 <AckTimeoutRetriesFinalize+0x60>)
 8012d4a:	4a08      	ldr	r2, [pc, #32]	; (8012d6c <AckTimeoutRetriesFinalize+0x74>)
 8012d4c:	5499      	strb	r1, [r3, r2]
}
 8012d4e:	46c0      	nop			; (mov r8, r8)
 8012d50:	46bd      	mov	sp, r7
 8012d52:	b002      	add	sp, #8
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	46c0      	nop			; (mov r8, r8)
 8012d58:	200005b8 	.word	0x200005b8
 8012d5c:	20000bb0 	.word	0x20000bb0
 8012d60:	00000484 	.word	0x00000484
 8012d64:	00000414 	.word	0x00000414
 8012d68:	00000412 	.word	0x00000412
 8012d6c:	00000441 	.word	0x00000441

08012d70 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	0002      	movs	r2, r0
 8012d78:	1dfb      	adds	r3, r7, #7
 8012d7a:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8012d7c:	4a0c      	ldr	r2, [pc, #48]	; (8012db0 <CallNvmCtxCallback+0x40>)
 8012d7e:	23d2      	movs	r3, #210	; 0xd2
 8012d80:	009b      	lsls	r3, r3, #2
 8012d82:	58d3      	ldr	r3, [r2, r3]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d00f      	beq.n	8012da8 <CallNvmCtxCallback+0x38>
 8012d88:	4a09      	ldr	r2, [pc, #36]	; (8012db0 <CallNvmCtxCallback+0x40>)
 8012d8a:	23d2      	movs	r3, #210	; 0xd2
 8012d8c:	009b      	lsls	r3, r3, #2
 8012d8e:	58d3      	ldr	r3, [r2, r3]
 8012d90:	689b      	ldr	r3, [r3, #8]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d008      	beq.n	8012da8 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8012d96:	4a06      	ldr	r2, [pc, #24]	; (8012db0 <CallNvmCtxCallback+0x40>)
 8012d98:	23d2      	movs	r3, #210	; 0xd2
 8012d9a:	009b      	lsls	r3, r3, #2
 8012d9c:	58d3      	ldr	r3, [r2, r3]
 8012d9e:	689b      	ldr	r3, [r3, #8]
 8012da0:	1dfa      	adds	r2, r7, #7
 8012da2:	7812      	ldrb	r2, [r2, #0]
 8012da4:	0010      	movs	r0, r2
 8012da6:	4798      	blx	r3
    }
}
 8012da8:	46c0      	nop			; (mov r8, r8)
 8012daa:	46bd      	mov	sp, r7
 8012dac:	b002      	add	sp, #8
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	200005b8 	.word	0x200005b8

08012db4 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8012db8:	2000      	movs	r0, #0
 8012dba:	f7ff ffd9 	bl	8012d70 <CallNvmCtxCallback>
}
 8012dbe:	46c0      	nop			; (mov r8, r8)
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8012dc8:	2001      	movs	r0, #1
 8012dca:	f7ff ffd1 	bl	8012d70 <CallNvmCtxCallback>
}
 8012dce:	46c0      	nop			; (mov r8, r8)
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8012dd8:	2002      	movs	r0, #2
 8012dda:	f7ff ffc9 	bl	8012d70 <CallNvmCtxCallback>
}
 8012dde:	46c0      	nop			; (mov r8, r8)
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}

08012de4 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8012de8:	2003      	movs	r0, #3
 8012dea:	f7ff ffc1 	bl	8012d70 <CallNvmCtxCallback>
}
 8012dee:	46c0      	nop			; (mov r8, r8)
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}

08012df4 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8012df8:	2004      	movs	r0, #4
 8012dfa:	f7ff ffb9 	bl	8012d70 <CallNvmCtxCallback>
}
 8012dfe:	46c0      	nop			; (mov r8, r8)
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}

08012e04 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8012e08:	2005      	movs	r0, #5
 8012e0a:	f7ff ffb1 	bl	8012d70 <CallNvmCtxCallback>
}
 8012e0e:	46c0      	nop			; (mov r8, r8)
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}

08012e14 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8012e18:	2006      	movs	r0, #6
 8012e1a:	f7ff ffa9 	bl	8012d70 <CallNvmCtxCallback>
}
 8012e1e:	46c0      	nop			; (mov r8, r8)
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012e28:	4b0a      	ldr	r3, [pc, #40]	; (8012e54 <IsRequestPending+0x30>)
 8012e2a:	4a0b      	ldr	r2, [pc, #44]	; (8012e58 <IsRequestPending+0x34>)
 8012e2c:	5c9b      	ldrb	r3, [r3, r2]
 8012e2e:	2204      	movs	r2, #4
 8012e30:	4013      	ands	r3, r2
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d107      	bne.n	8012e48 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012e38:	4b06      	ldr	r3, [pc, #24]	; (8012e54 <IsRequestPending+0x30>)
 8012e3a:	4a07      	ldr	r2, [pc, #28]	; (8012e58 <IsRequestPending+0x34>)
 8012e3c:	5c9b      	ldrb	r3, [r3, r2]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	4013      	ands	r3, r2
 8012e42:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d001      	beq.n	8012e4c <IsRequestPending+0x28>
    {
        return 1;
 8012e48:	2301      	movs	r3, #1
 8012e4a:	e000      	b.n	8012e4e <IsRequestPending+0x2a>
    }
    return 0;
 8012e4c:	2300      	movs	r3, #0
}
 8012e4e:	0018      	movs	r0, r3
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	200005b8 	.word	0x200005b8
 8012e58:	00000481 	.word	0x00000481

08012e5c <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012e60:	4a08      	ldr	r2, [pc, #32]	; (8012e84 <LoRaMacIsBusy+0x28>)
 8012e62:	23d0      	movs	r3, #208	; 0xd0
 8012e64:	009b      	lsls	r3, r3, #2
 8012e66:	58d3      	ldr	r3, [r2, r3]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d106      	bne.n	8012e7a <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8012e6c:	4b05      	ldr	r3, [pc, #20]	; (8012e84 <LoRaMacIsBusy+0x28>)
 8012e6e:	4a06      	ldr	r2, [pc, #24]	; (8012e88 <LoRaMacIsBusy+0x2c>)
 8012e70:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d101      	bne.n	8012e7a <LoRaMacIsBusy+0x1e>
    {
        return false;
 8012e76:	2300      	movs	r3, #0
 8012e78:	e000      	b.n	8012e7c <LoRaMacIsBusy+0x20>
    }
    return true;
 8012e7a:	2301      	movs	r3, #1
}
 8012e7c:	0018      	movs	r0, r3
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	46c0      	nop			; (mov r8, r8)
 8012e84:	200005b8 	.word	0x200005b8
 8012e88:	00000482 	.word	0x00000482

08012e8c <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 8012e92:	1dfb      	adds	r3, r7, #7
 8012e94:	2200      	movs	r2, #0
 8012e96:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 8012e98:	f7fd f970 	bl	801017c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012e9c:	f001 fe26 	bl	8014aec <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012ea0:	4b1b      	ldr	r3, [pc, #108]	; (8012f10 <LoRaMacProcess+0x84>)
 8012ea2:	4a1c      	ldr	r2, [pc, #112]	; (8012f14 <LoRaMacProcess+0x88>)
 8012ea4:	5c9b      	ldrb	r3, [r3, r2]
 8012ea6:	2220      	movs	r2, #32
 8012ea8:	4013      	ands	r3, r2
 8012eaa:	b2db      	uxtb	r3, r3
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d020      	beq.n	8012ef2 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012eb0:	2000      	movs	r0, #0
 8012eb2:	f7fd f9af 	bl	8010214 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8012eb6:	f7fd fb8b 	bl	80105d0 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012eba:	f7ff ffb3 	bl	8012e24 <IsRequestPending>
 8012ebe:	1e03      	subs	r3, r0, #0
 8012ec0:	d008      	beq.n	8012ed4 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8012ec2:	f7fd fb59 	bl	8010578 <LoRaMacCheckForBeaconAcquisition>
 8012ec6:	0003      	movs	r3, r0
 8012ec8:	0019      	movs	r1, r3
 8012eca:	1dfb      	adds	r3, r7, #7
 8012ecc:	1dfa      	adds	r2, r7, #7
 8012ece:	7812      	ldrb	r2, [r2, #0]
 8012ed0:	430a      	orrs	r2, r1
 8012ed2:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8012ed4:	1dfb      	adds	r3, r7, #7
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d103      	bne.n	8012ee4 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8012edc:	f7fd fb0a 	bl	80104f4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012ee0:	f7fd fa86 	bl	80103f0 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012ee4:	f7fd f9aa 	bl	801023c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8012ee8:	f7fd fa0e 	bl	8010308 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012eec:	2001      	movs	r0, #1
 8012eee:	f7fd f991 	bl	8010214 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8012ef2:	f7fd fa25 	bl	8010340 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8012ef6:	4a06      	ldr	r2, [pc, #24]	; (8012f10 <LoRaMacProcess+0x84>)
 8012ef8:	2390      	movs	r3, #144	; 0x90
 8012efa:	00db      	lsls	r3, r3, #3
 8012efc:	5cd3      	ldrb	r3, [r2, r3]
 8012efe:	2b02      	cmp	r3, #2
 8012f00:	d101      	bne.n	8012f06 <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 8012f02:	f7ff f9d1 	bl	80122a8 <OpenContinuousRxCWindow>
    }
}
 8012f06:	46c0      	nop			; (mov r8, r8)
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	b002      	add	sp, #8
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	46c0      	nop			; (mov r8, r8)
 8012f10:	200005b8 	.word	0x200005b8
 8012f14:	00000481 	.word	0x00000481

08012f18 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012f18:	b5b0      	push	{r4, r5, r7, lr}
 8012f1a:	b098      	sub	sp, #96	; 0x60
 8012f1c:	af02      	add	r7, sp, #8
 8012f1e:	6178      	str	r0, [r7, #20]
 8012f20:	6139      	str	r1, [r7, #16]
 8012f22:	230f      	movs	r3, #15
 8012f24:	18fb      	adds	r3, r7, r3
 8012f26:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d002      	beq.n	8012f34 <LoRaMacInitialization+0x1c>
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d101      	bne.n	8012f38 <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f34:	2303      	movs	r3, #3
 8012f36:	e35e      	b.n	80135f6 <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d00b      	beq.n	8012f58 <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d007      	beq.n	8012f58 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d003      	beq.n	8012f58 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d101      	bne.n	8012f5c <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f58:	2303      	movs	r3, #3
 8012f5a:	e34c      	b.n	80135f6 <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012f5c:	230f      	movs	r3, #15
 8012f5e:	18fb      	adds	r3, r7, r3
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	0018      	movs	r0, r3
 8012f64:	f003 fec8 	bl	8016cf8 <RegionIsActive>
 8012f68:	0003      	movs	r3, r0
 8012f6a:	001a      	movs	r2, r3
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	4053      	eors	r3, r2
 8012f70:	b2db      	uxtb	r3, r3
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d001      	beq.n	8012f7a <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012f76:	2309      	movs	r3, #9
 8012f78:	e33d      	b.n	80135f6 <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8012f7a:	4afd      	ldr	r2, [pc, #1012]	; (8013370 <LoRaMacInitialization+0x458>)
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	0011      	movs	r1, r2
 8012f80:	0018      	movs	r0, r3
 8012f82:	f002 f967 	bl	8015254 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8012f86:	23b6      	movs	r3, #182	; 0xb6
 8012f88:	005a      	lsls	r2, r3, #1
 8012f8a:	4bfa      	ldr	r3, [pc, #1000]	; (8013374 <LoRaMacInitialization+0x45c>)
 8012f8c:	2100      	movs	r1, #0
 8012f8e:	0018      	movs	r0, r3
 8012f90:	f006 fb80 	bl	8019694 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012f94:	4af8      	ldr	r2, [pc, #992]	; (8013378 <LoRaMacInitialization+0x460>)
 8012f96:	4bf9      	ldr	r3, [pc, #996]	; (801337c <LoRaMacInitialization+0x464>)
 8012f98:	2100      	movs	r1, #0
 8012f9a:	0018      	movs	r0, r3
 8012f9c:	f006 fb7a 	bl	8019694 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 8012fa0:	4bf6      	ldr	r3, [pc, #984]	; (801337c <LoRaMacInitialization+0x464>)
 8012fa2:	49f7      	ldr	r1, [pc, #988]	; (8013380 <LoRaMacInitialization+0x468>)
 8012fa4:	4af3      	ldr	r2, [pc, #972]	; (8013374 <LoRaMacInitialization+0x45c>)
 8012fa6:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012fa8:	4bf4      	ldr	r3, [pc, #976]	; (801337c <LoRaMacInitialization+0x464>)
 8012faa:	4af6      	ldr	r2, [pc, #984]	; (8013384 <LoRaMacInitialization+0x46c>)
 8012fac:	2101      	movs	r1, #1
 8012fae:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 8012fb0:	4bf2      	ldr	r3, [pc, #968]	; (801337c <LoRaMacInitialization+0x464>)
 8012fb2:	4af5      	ldr	r2, [pc, #980]	; (8013388 <LoRaMacInitialization+0x470>)
 8012fb4:	2101      	movs	r1, #1
 8012fb6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 8012fb8:	4bf0      	ldr	r3, [pc, #960]	; (801337c <LoRaMacInitialization+0x464>)
 8012fba:	4af1      	ldr	r2, [pc, #964]	; (8013380 <LoRaMacInitialization+0x468>)
 8012fbc:	589b      	ldr	r3, [r3, r2]
 8012fbe:	220f      	movs	r2, #15
 8012fc0:	18ba      	adds	r2, r7, r2
 8012fc2:	7812      	ldrb	r2, [r2, #0]
 8012fc4:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8012fc6:	4bed      	ldr	r3, [pc, #948]	; (801337c <LoRaMacInitialization+0x464>)
 8012fc8:	4aed      	ldr	r2, [pc, #948]	; (8013380 <LoRaMacInitialization+0x468>)
 8012fca:	589b      	ldr	r3, [r3, r2]
 8012fcc:	227c      	movs	r2, #124	; 0x7c
 8012fce:	2100      	movs	r1, #0
 8012fd0:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8012fd2:	4bea      	ldr	r3, [pc, #936]	; (801337c <LoRaMacInitialization+0x464>)
 8012fd4:	4aea      	ldr	r2, [pc, #936]	; (8013380 <LoRaMacInitialization+0x468>)
 8012fd6:	589b      	ldr	r3, [r3, r2]
 8012fd8:	22ca      	movs	r2, #202	; 0xca
 8012fda:	2100      	movs	r1, #0
 8012fdc:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8012fde:	4be7      	ldr	r3, [pc, #924]	; (801337c <LoRaMacInitialization+0x464>)
 8012fe0:	4ae7      	ldr	r2, [pc, #924]	; (8013380 <LoRaMacInitialization+0x468>)
 8012fe2:	589a      	ldr	r2, [r3, r2]
 8012fe4:	23b0      	movs	r3, #176	; 0xb0
 8012fe6:	005b      	lsls	r3, r3, #1
 8012fe8:	49e8      	ldr	r1, [pc, #928]	; (801338c <LoRaMacInitialization+0x474>)
 8012fea:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012fec:	2550      	movs	r5, #80	; 0x50
 8012fee:	197b      	adds	r3, r7, r5
 8012ff0:	220f      	movs	r2, #15
 8012ff2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012ff4:	4be1      	ldr	r3, [pc, #900]	; (801337c <LoRaMacInitialization+0x464>)
 8012ff6:	4ae2      	ldr	r2, [pc, #904]	; (8013380 <LoRaMacInitialization+0x468>)
 8012ff8:	589b      	ldr	r3, [r3, r2]
 8012ffa:	781b      	ldrb	r3, [r3, #0]
 8012ffc:	197a      	adds	r2, r7, r5
 8012ffe:	0011      	movs	r1, r2
 8013000:	0018      	movs	r0, r3
 8013002:	f003 fe8a 	bl	8016d1a <RegionGetPhyParam>
 8013006:	0003      	movs	r3, r0
 8013008:	001a      	movs	r2, r3
 801300a:	244c      	movs	r4, #76	; 0x4c
 801300c:	193b      	adds	r3, r7, r4
 801300e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8013010:	193b      	adds	r3, r7, r4
 8013012:	681a      	ldr	r2, [r3, #0]
 8013014:	4bd9      	ldr	r3, [pc, #868]	; (801337c <LoRaMacInitialization+0x464>)
 8013016:	49da      	ldr	r1, [pc, #872]	; (8013380 <LoRaMacInitialization+0x468>)
 8013018:	585b      	ldr	r3, [r3, r1]
 801301a:	1e51      	subs	r1, r2, #1
 801301c:	418a      	sbcs	r2, r1
 801301e:	b2d1      	uxtb	r1, r2
 8013020:	22c9      	movs	r2, #201	; 0xc9
 8013022:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8013024:	197b      	adds	r3, r7, r5
 8013026:	220a      	movs	r2, #10
 8013028:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801302a:	4bd4      	ldr	r3, [pc, #848]	; (801337c <LoRaMacInitialization+0x464>)
 801302c:	4ad4      	ldr	r2, [pc, #848]	; (8013380 <LoRaMacInitialization+0x468>)
 801302e:	589b      	ldr	r3, [r3, r2]
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	197a      	adds	r2, r7, r5
 8013034:	0011      	movs	r1, r2
 8013036:	0018      	movs	r0, r3
 8013038:	f003 fe6f 	bl	8016d1a <RegionGetPhyParam>
 801303c:	0003      	movs	r3, r0
 801303e:	001a      	movs	r2, r3
 8013040:	193b      	adds	r3, r7, r4
 8013042:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8013044:	193b      	adds	r3, r7, r4
 8013046:	6819      	ldr	r1, [r3, #0]
 8013048:	4bcc      	ldr	r3, [pc, #816]	; (801337c <LoRaMacInitialization+0x464>)
 801304a:	4acd      	ldr	r2, [pc, #820]	; (8013380 <LoRaMacInitialization+0x468>)
 801304c:	589b      	ldr	r3, [r3, r2]
 801304e:	b24a      	sxtb	r2, r1
 8013050:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013052:	197b      	adds	r3, r7, r5
 8013054:	2206      	movs	r2, #6
 8013056:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013058:	4bc8      	ldr	r3, [pc, #800]	; (801337c <LoRaMacInitialization+0x464>)
 801305a:	4ac9      	ldr	r2, [pc, #804]	; (8013380 <LoRaMacInitialization+0x468>)
 801305c:	589b      	ldr	r3, [r3, r2]
 801305e:	781b      	ldrb	r3, [r3, #0]
 8013060:	197a      	adds	r2, r7, r5
 8013062:	0011      	movs	r1, r2
 8013064:	0018      	movs	r0, r3
 8013066:	f003 fe58 	bl	8016d1a <RegionGetPhyParam>
 801306a:	0003      	movs	r3, r0
 801306c:	001a      	movs	r2, r3
 801306e:	193b      	adds	r3, r7, r4
 8013070:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8013072:	193b      	adds	r3, r7, r4
 8013074:	6819      	ldr	r1, [r3, #0]
 8013076:	4bc1      	ldr	r3, [pc, #772]	; (801337c <LoRaMacInitialization+0x464>)
 8013078:	4ac1      	ldr	r2, [pc, #772]	; (8013380 <LoRaMacInitialization+0x468>)
 801307a:	589b      	ldr	r3, [r3, r2]
 801307c:	b24a      	sxtb	r2, r1
 801307e:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8013080:	197b      	adds	r3, r7, r5
 8013082:	2210      	movs	r2, #16
 8013084:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013086:	4bbd      	ldr	r3, [pc, #756]	; (801337c <LoRaMacInitialization+0x464>)
 8013088:	4abd      	ldr	r2, [pc, #756]	; (8013380 <LoRaMacInitialization+0x468>)
 801308a:	589b      	ldr	r3, [r3, r2]
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	197a      	adds	r2, r7, r5
 8013090:	0011      	movs	r1, r2
 8013092:	0018      	movs	r0, r3
 8013094:	f003 fe41 	bl	8016d1a <RegionGetPhyParam>
 8013098:	0003      	movs	r3, r0
 801309a:	001a      	movs	r2, r3
 801309c:	193b      	adds	r3, r7, r4
 801309e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80130a0:	4bb6      	ldr	r3, [pc, #728]	; (801337c <LoRaMacInitialization+0x464>)
 80130a2:	4ab7      	ldr	r2, [pc, #732]	; (8013380 <LoRaMacInitialization+0x468>)
 80130a4:	589b      	ldr	r3, [r3, r2]
 80130a6:	193a      	adds	r2, r7, r4
 80130a8:	6812      	ldr	r2, [r2, #0]
 80130aa:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80130ac:	197b      	adds	r3, r7, r5
 80130ae:	2211      	movs	r2, #17
 80130b0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80130b2:	4bb2      	ldr	r3, [pc, #712]	; (801337c <LoRaMacInitialization+0x464>)
 80130b4:	4ab2      	ldr	r2, [pc, #712]	; (8013380 <LoRaMacInitialization+0x468>)
 80130b6:	589b      	ldr	r3, [r3, r2]
 80130b8:	781b      	ldrb	r3, [r3, #0]
 80130ba:	197a      	adds	r2, r7, r5
 80130bc:	0011      	movs	r1, r2
 80130be:	0018      	movs	r0, r3
 80130c0:	f003 fe2b 	bl	8016d1a <RegionGetPhyParam>
 80130c4:	0003      	movs	r3, r0
 80130c6:	001a      	movs	r2, r3
 80130c8:	193b      	adds	r3, r7, r4
 80130ca:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80130cc:	4bab      	ldr	r3, [pc, #684]	; (801337c <LoRaMacInitialization+0x464>)
 80130ce:	4aac      	ldr	r2, [pc, #688]	; (8013380 <LoRaMacInitialization+0x468>)
 80130d0:	589b      	ldr	r3, [r3, r2]
 80130d2:	193a      	adds	r2, r7, r4
 80130d4:	6812      	ldr	r2, [r2, #0]
 80130d6:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80130d8:	197b      	adds	r3, r7, r5
 80130da:	2212      	movs	r2, #18
 80130dc:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80130de:	4ba7      	ldr	r3, [pc, #668]	; (801337c <LoRaMacInitialization+0x464>)
 80130e0:	4aa7      	ldr	r2, [pc, #668]	; (8013380 <LoRaMacInitialization+0x468>)
 80130e2:	589b      	ldr	r3, [r3, r2]
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	197a      	adds	r2, r7, r5
 80130e8:	0011      	movs	r1, r2
 80130ea:	0018      	movs	r0, r3
 80130ec:	f003 fe15 	bl	8016d1a <RegionGetPhyParam>
 80130f0:	0003      	movs	r3, r0
 80130f2:	001a      	movs	r2, r3
 80130f4:	193b      	adds	r3, r7, r4
 80130f6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80130f8:	4ba0      	ldr	r3, [pc, #640]	; (801337c <LoRaMacInitialization+0x464>)
 80130fa:	4aa1      	ldr	r2, [pc, #644]	; (8013380 <LoRaMacInitialization+0x468>)
 80130fc:	589b      	ldr	r3, [r3, r2]
 80130fe:	193a      	adds	r2, r7, r4
 8013100:	6812      	ldr	r2, [r2, #0]
 8013102:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8013104:	197b      	adds	r3, r7, r5
 8013106:	2213      	movs	r2, #19
 8013108:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801310a:	4b9c      	ldr	r3, [pc, #624]	; (801337c <LoRaMacInitialization+0x464>)
 801310c:	4a9c      	ldr	r2, [pc, #624]	; (8013380 <LoRaMacInitialization+0x468>)
 801310e:	589b      	ldr	r3, [r3, r2]
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	197a      	adds	r2, r7, r5
 8013114:	0011      	movs	r1, r2
 8013116:	0018      	movs	r0, r3
 8013118:	f003 fdff 	bl	8016d1a <RegionGetPhyParam>
 801311c:	0003      	movs	r3, r0
 801311e:	001a      	movs	r2, r3
 8013120:	193b      	adds	r3, r7, r4
 8013122:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8013124:	4b95      	ldr	r3, [pc, #596]	; (801337c <LoRaMacInitialization+0x464>)
 8013126:	4a96      	ldr	r2, [pc, #600]	; (8013380 <LoRaMacInitialization+0x468>)
 8013128:	589b      	ldr	r3, [r3, r2]
 801312a:	193a      	adds	r2, r7, r4
 801312c:	6812      	ldr	r2, [r2, #0]
 801312e:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8013130:	197b      	adds	r3, r7, r5
 8013132:	2214      	movs	r2, #20
 8013134:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013136:	4b91      	ldr	r3, [pc, #580]	; (801337c <LoRaMacInitialization+0x464>)
 8013138:	4a91      	ldr	r2, [pc, #580]	; (8013380 <LoRaMacInitialization+0x468>)
 801313a:	589b      	ldr	r3, [r3, r2]
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	197a      	adds	r2, r7, r5
 8013140:	0011      	movs	r1, r2
 8013142:	0018      	movs	r0, r3
 8013144:	f003 fde9 	bl	8016d1a <RegionGetPhyParam>
 8013148:	0003      	movs	r3, r0
 801314a:	001a      	movs	r2, r3
 801314c:	193b      	adds	r3, r7, r4
 801314e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8013150:	4b8a      	ldr	r3, [pc, #552]	; (801337c <LoRaMacInitialization+0x464>)
 8013152:	4a8b      	ldr	r2, [pc, #556]	; (8013380 <LoRaMacInitialization+0x468>)
 8013154:	589b      	ldr	r3, [r3, r2]
 8013156:	193a      	adds	r2, r7, r4
 8013158:	6812      	ldr	r2, [r2, #0]
 801315a:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801315c:	197b      	adds	r3, r7, r5
 801315e:	2217      	movs	r2, #23
 8013160:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013162:	4b86      	ldr	r3, [pc, #536]	; (801337c <LoRaMacInitialization+0x464>)
 8013164:	4a86      	ldr	r2, [pc, #536]	; (8013380 <LoRaMacInitialization+0x468>)
 8013166:	589b      	ldr	r3, [r3, r2]
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	197a      	adds	r2, r7, r5
 801316c:	0011      	movs	r1, r2
 801316e:	0018      	movs	r0, r3
 8013170:	f003 fdd3 	bl	8016d1a <RegionGetPhyParam>
 8013174:	0003      	movs	r3, r0
 8013176:	001a      	movs	r2, r3
 8013178:	193b      	adds	r3, r7, r4
 801317a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801317c:	193b      	adds	r3, r7, r4
 801317e:	6819      	ldr	r1, [r3, #0]
 8013180:	4b7e      	ldr	r3, [pc, #504]	; (801337c <LoRaMacInitialization+0x464>)
 8013182:	4a7f      	ldr	r2, [pc, #508]	; (8013380 <LoRaMacInitialization+0x468>)
 8013184:	589b      	ldr	r3, [r3, r2]
 8013186:	b2c9      	uxtb	r1, r1
 8013188:	2225      	movs	r2, #37	; 0x25
 801318a:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801318c:	197b      	adds	r3, r7, r5
 801318e:	2218      	movs	r2, #24
 8013190:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013192:	4b7a      	ldr	r3, [pc, #488]	; (801337c <LoRaMacInitialization+0x464>)
 8013194:	4a7a      	ldr	r2, [pc, #488]	; (8013380 <LoRaMacInitialization+0x468>)
 8013196:	589b      	ldr	r3, [r3, r2]
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	197a      	adds	r2, r7, r5
 801319c:	0011      	movs	r1, r2
 801319e:	0018      	movs	r0, r3
 80131a0:	f003 fdbb 	bl	8016d1a <RegionGetPhyParam>
 80131a4:	0003      	movs	r3, r0
 80131a6:	001a      	movs	r2, r3
 80131a8:	193b      	adds	r3, r7, r4
 80131aa:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80131ac:	4b73      	ldr	r3, [pc, #460]	; (801337c <LoRaMacInitialization+0x464>)
 80131ae:	4a74      	ldr	r2, [pc, #464]	; (8013380 <LoRaMacInitialization+0x468>)
 80131b0:	589b      	ldr	r3, [r3, r2]
 80131b2:	193a      	adds	r2, r7, r4
 80131b4:	6812      	ldr	r2, [r2, #0]
 80131b6:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80131b8:	4b70      	ldr	r3, [pc, #448]	; (801337c <LoRaMacInitialization+0x464>)
 80131ba:	4a71      	ldr	r2, [pc, #452]	; (8013380 <LoRaMacInitialization+0x468>)
 80131bc:	589b      	ldr	r3, [r3, r2]
 80131be:	193a      	adds	r2, r7, r4
 80131c0:	6812      	ldr	r2, [r2, #0]
 80131c2:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80131c4:	197b      	adds	r3, r7, r5
 80131c6:	2219      	movs	r2, #25
 80131c8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80131ca:	4b6c      	ldr	r3, [pc, #432]	; (801337c <LoRaMacInitialization+0x464>)
 80131cc:	4a6c      	ldr	r2, [pc, #432]	; (8013380 <LoRaMacInitialization+0x468>)
 80131ce:	589b      	ldr	r3, [r3, r2]
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	197a      	adds	r2, r7, r5
 80131d4:	0011      	movs	r1, r2
 80131d6:	0018      	movs	r0, r3
 80131d8:	f003 fd9f 	bl	8016d1a <RegionGetPhyParam>
 80131dc:	0003      	movs	r3, r0
 80131de:	001a      	movs	r2, r3
 80131e0:	193b      	adds	r3, r7, r4
 80131e2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80131e4:	193b      	adds	r3, r7, r4
 80131e6:	6819      	ldr	r1, [r3, #0]
 80131e8:	4b64      	ldr	r3, [pc, #400]	; (801337c <LoRaMacInitialization+0x464>)
 80131ea:	4a65      	ldr	r2, [pc, #404]	; (8013380 <LoRaMacInitialization+0x468>)
 80131ec:	589b      	ldr	r3, [r3, r2]
 80131ee:	b2c9      	uxtb	r1, r1
 80131f0:	222c      	movs	r2, #44	; 0x2c
 80131f2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80131f4:	193b      	adds	r3, r7, r4
 80131f6:	6819      	ldr	r1, [r3, #0]
 80131f8:	4b60      	ldr	r3, [pc, #384]	; (801337c <LoRaMacInitialization+0x464>)
 80131fa:	4a61      	ldr	r2, [pc, #388]	; (8013380 <LoRaMacInitialization+0x468>)
 80131fc:	589b      	ldr	r3, [r3, r2]
 80131fe:	b2c9      	uxtb	r1, r1
 8013200:	2234      	movs	r2, #52	; 0x34
 8013202:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8013204:	197b      	adds	r3, r7, r5
 8013206:	221e      	movs	r2, #30
 8013208:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801320a:	4b5c      	ldr	r3, [pc, #368]	; (801337c <LoRaMacInitialization+0x464>)
 801320c:	4a5c      	ldr	r2, [pc, #368]	; (8013380 <LoRaMacInitialization+0x468>)
 801320e:	589b      	ldr	r3, [r3, r2]
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	197a      	adds	r2, r7, r5
 8013214:	0011      	movs	r1, r2
 8013216:	0018      	movs	r0, r3
 8013218:	f003 fd7f 	bl	8016d1a <RegionGetPhyParam>
 801321c:	0003      	movs	r3, r0
 801321e:	001a      	movs	r2, r3
 8013220:	193b      	adds	r3, r7, r4
 8013222:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8013224:	193b      	adds	r3, r7, r4
 8013226:	6819      	ldr	r1, [r3, #0]
 8013228:	4b54      	ldr	r3, [pc, #336]	; (801337c <LoRaMacInitialization+0x464>)
 801322a:	4a55      	ldr	r2, [pc, #340]	; (8013380 <LoRaMacInitialization+0x468>)
 801322c:	589b      	ldr	r3, [r3, r2]
 801322e:	b2c9      	uxtb	r1, r1
 8013230:	2238      	movs	r2, #56	; 0x38
 8013232:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8013234:	197b      	adds	r3, r7, r5
 8013236:	221f      	movs	r2, #31
 8013238:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801323a:	4b50      	ldr	r3, [pc, #320]	; (801337c <LoRaMacInitialization+0x464>)
 801323c:	4a50      	ldr	r2, [pc, #320]	; (8013380 <LoRaMacInitialization+0x468>)
 801323e:	589b      	ldr	r3, [r3, r2]
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	197a      	adds	r2, r7, r5
 8013244:	0011      	movs	r1, r2
 8013246:	0018      	movs	r0, r3
 8013248:	f003 fd67 	bl	8016d1a <RegionGetPhyParam>
 801324c:	0003      	movs	r3, r0
 801324e:	001a      	movs	r2, r3
 8013250:	193b      	adds	r3, r7, r4
 8013252:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8013254:	193b      	adds	r3, r7, r4
 8013256:	6819      	ldr	r1, [r3, #0]
 8013258:	4b48      	ldr	r3, [pc, #288]	; (801337c <LoRaMacInitialization+0x464>)
 801325a:	4a49      	ldr	r2, [pc, #292]	; (8013380 <LoRaMacInitialization+0x468>)
 801325c:	589b      	ldr	r3, [r3, r2]
 801325e:	b2c9      	uxtb	r1, r1
 8013260:	2239      	movs	r2, #57	; 0x39
 8013262:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8013264:	197b      	adds	r3, r7, r5
 8013266:	2220      	movs	r2, #32
 8013268:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801326a:	4b44      	ldr	r3, [pc, #272]	; (801337c <LoRaMacInitialization+0x464>)
 801326c:	4a44      	ldr	r2, [pc, #272]	; (8013380 <LoRaMacInitialization+0x468>)
 801326e:	589b      	ldr	r3, [r3, r2]
 8013270:	781b      	ldrb	r3, [r3, #0]
 8013272:	197a      	adds	r2, r7, r5
 8013274:	0011      	movs	r1, r2
 8013276:	0018      	movs	r0, r3
 8013278:	f003 fd4f 	bl	8016d1a <RegionGetPhyParam>
 801327c:	0003      	movs	r3, r0
 801327e:	001a      	movs	r2, r3
 8013280:	193b      	adds	r3, r7, r4
 8013282:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013284:	4b3d      	ldr	r3, [pc, #244]	; (801337c <LoRaMacInitialization+0x464>)
 8013286:	4a3e      	ldr	r2, [pc, #248]	; (8013380 <LoRaMacInitialization+0x468>)
 8013288:	589b      	ldr	r3, [r3, r2]
 801328a:	193a      	adds	r2, r7, r4
 801328c:	6812      	ldr	r2, [r2, #0]
 801328e:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013290:	197b      	adds	r3, r7, r5
 8013292:	2221      	movs	r2, #33	; 0x21
 8013294:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013296:	4b39      	ldr	r3, [pc, #228]	; (801337c <LoRaMacInitialization+0x464>)
 8013298:	4a39      	ldr	r2, [pc, #228]	; (8013380 <LoRaMacInitialization+0x468>)
 801329a:	589b      	ldr	r3, [r3, r2]
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	197a      	adds	r2, r7, r5
 80132a0:	0011      	movs	r1, r2
 80132a2:	0018      	movs	r0, r3
 80132a4:	f003 fd39 	bl	8016d1a <RegionGetPhyParam>
 80132a8:	0003      	movs	r3, r0
 80132aa:	001a      	movs	r2, r3
 80132ac:	193b      	adds	r3, r7, r4
 80132ae:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 80132b0:	4b32      	ldr	r3, [pc, #200]	; (801337c <LoRaMacInitialization+0x464>)
 80132b2:	4a33      	ldr	r2, [pc, #204]	; (8013380 <LoRaMacInitialization+0x468>)
 80132b4:	589b      	ldr	r3, [r3, r2]
 80132b6:	193a      	adds	r2, r7, r4
 80132b8:	6812      	ldr	r2, [r2, #0]
 80132ba:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80132bc:	197b      	adds	r3, r7, r5
 80132be:	220b      	movs	r2, #11
 80132c0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80132c2:	4b2e      	ldr	r3, [pc, #184]	; (801337c <LoRaMacInitialization+0x464>)
 80132c4:	4a2e      	ldr	r2, [pc, #184]	; (8013380 <LoRaMacInitialization+0x468>)
 80132c6:	589b      	ldr	r3, [r3, r2]
 80132c8:	781b      	ldrb	r3, [r3, #0]
 80132ca:	197a      	adds	r2, r7, r5
 80132cc:	0011      	movs	r1, r2
 80132ce:	0018      	movs	r0, r3
 80132d0:	f003 fd23 	bl	8016d1a <RegionGetPhyParam>
 80132d4:	0003      	movs	r3, r0
 80132d6:	001a      	movs	r2, r3
 80132d8:	193b      	adds	r3, r7, r4
 80132da:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 80132dc:	193b      	adds	r3, r7, r4
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	b299      	uxth	r1, r3
 80132e2:	4a26      	ldr	r2, [pc, #152]	; (801337c <LoRaMacInitialization+0x464>)
 80132e4:	23fd      	movs	r3, #253	; 0xfd
 80132e6:	009b      	lsls	r3, r3, #2
 80132e8:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80132ea:	197b      	adds	r3, r7, r5
 80132ec:	220c      	movs	r2, #12
 80132ee:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80132f0:	4b22      	ldr	r3, [pc, #136]	; (801337c <LoRaMacInitialization+0x464>)
 80132f2:	4a23      	ldr	r2, [pc, #140]	; (8013380 <LoRaMacInitialization+0x468>)
 80132f4:	589b      	ldr	r3, [r3, r2]
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	197a      	adds	r2, r7, r5
 80132fa:	0011      	movs	r1, r2
 80132fc:	0018      	movs	r0, r3
 80132fe:	f003 fd0c 	bl	8016d1a <RegionGetPhyParam>
 8013302:	0003      	movs	r3, r0
 8013304:	001a      	movs	r2, r3
 8013306:	193b      	adds	r3, r7, r4
 8013308:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 801330a:	193b      	adds	r3, r7, r4
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	b299      	uxth	r1, r3
 8013310:	4b1a      	ldr	r3, [pc, #104]	; (801337c <LoRaMacInitialization+0x464>)
 8013312:	4a1f      	ldr	r2, [pc, #124]	; (8013390 <LoRaMacInitialization+0x478>)
 8013314:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8013316:	4b19      	ldr	r3, [pc, #100]	; (801337c <LoRaMacInitialization+0x464>)
 8013318:	4a19      	ldr	r2, [pc, #100]	; (8013380 <LoRaMacInitialization+0x468>)
 801331a:	589b      	ldr	r3, [r3, r2]
 801331c:	2224      	movs	r2, #36	; 0x24
 801331e:	2101      	movs	r1, #1
 8013320:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8013322:	4b16      	ldr	r3, [pc, #88]	; (801337c <LoRaMacInitialization+0x464>)
 8013324:	4a16      	ldr	r2, [pc, #88]	; (8013380 <LoRaMacInitialization+0x468>)
 8013326:	589b      	ldr	r3, [r3, r2]
 8013328:	220a      	movs	r2, #10
 801332a:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 801332c:	4b13      	ldr	r3, [pc, #76]	; (801337c <LoRaMacInitialization+0x464>)
 801332e:	4a14      	ldr	r2, [pc, #80]	; (8013380 <LoRaMacInitialization+0x468>)
 8013330:	589b      	ldr	r3, [r3, r2]
 8013332:	2206      	movs	r2, #6
 8013334:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8013336:	4b11      	ldr	r3, [pc, #68]	; (801337c <LoRaMacInitialization+0x464>)
 8013338:	4a11      	ldr	r2, [pc, #68]	; (8013380 <LoRaMacInitialization+0x468>)
 801333a:	589b      	ldr	r3, [r3, r2]
 801333c:	4a0f      	ldr	r2, [pc, #60]	; (801337c <LoRaMacInitialization+0x464>)
 801333e:	4910      	ldr	r1, [pc, #64]	; (8013380 <LoRaMacInitialization+0x468>)
 8013340:	5852      	ldr	r2, [r2, r1]
 8013342:	689b      	ldr	r3, [r3, #8]
 8013344:	2188      	movs	r1, #136	; 0x88
 8013346:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8013348:	4b0c      	ldr	r3, [pc, #48]	; (801337c <LoRaMacInitialization+0x464>)
 801334a:	4a0d      	ldr	r2, [pc, #52]	; (8013380 <LoRaMacInitialization+0x468>)
 801334c:	589a      	ldr	r2, [r3, r2]
 801334e:	4b0b      	ldr	r3, [pc, #44]	; (801337c <LoRaMacInitialization+0x464>)
 8013350:	490b      	ldr	r1, [pc, #44]	; (8013380 <LoRaMacInitialization+0x468>)
 8013352:	585b      	ldr	r3, [r3, r1]
 8013354:	7b11      	ldrb	r1, [r2, #12]
 8013356:	228c      	movs	r2, #140	; 0x8c
 8013358:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 801335a:	4b08      	ldr	r3, [pc, #32]	; (801337c <LoRaMacInitialization+0x464>)
 801335c:	4a08      	ldr	r2, [pc, #32]	; (8013380 <LoRaMacInitialization+0x468>)
 801335e:	589b      	ldr	r3, [r3, r2]
 8013360:	4a06      	ldr	r2, [pc, #24]	; (801337c <LoRaMacInitialization+0x464>)
 8013362:	4907      	ldr	r1, [pc, #28]	; (8013380 <LoRaMacInitialization+0x468>)
 8013364:	5852      	ldr	r2, [r2, r1]
 8013366:	691b      	ldr	r3, [r3, #16]
 8013368:	2190      	movs	r1, #144	; 0x90
 801336a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 801336c:	4b03      	ldr	r3, [pc, #12]	; (801337c <LoRaMacInitialization+0x464>)
 801336e:	e011      	b.n	8013394 <LoRaMacInitialization+0x47c>
 8013370:	08012e15 	.word	0x08012e15
 8013374:	20000a44 	.word	0x20000a44
 8013378:	0000048c 	.word	0x0000048c
 801337c:	200005b8 	.word	0x200005b8
 8013380:	00000484 	.word	0x00000484
 8013384:	00000412 	.word	0x00000412
 8013388:	00000411 	.word	0x00000411
 801338c:	01000300 	.word	0x01000300
 8013390:	000003f6 	.word	0x000003f6
 8013394:	4a9a      	ldr	r2, [pc, #616]	; (8013600 <LoRaMacInitialization+0x6e8>)
 8013396:	589b      	ldr	r3, [r3, r2]
 8013398:	4a9a      	ldr	r2, [pc, #616]	; (8013604 <LoRaMacInitialization+0x6ec>)
 801339a:	4999      	ldr	r1, [pc, #612]	; (8013600 <LoRaMacInitialization+0x6e8>)
 801339c:	5852      	ldr	r2, [r2, r1]
 801339e:	695b      	ldr	r3, [r3, #20]
 80133a0:	2194      	movs	r1, #148	; 0x94
 80133a2:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 80133a4:	4b97      	ldr	r3, [pc, #604]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80133a6:	4a96      	ldr	r2, [pc, #600]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80133a8:	589b      	ldr	r3, [r3, r2]
 80133aa:	4a96      	ldr	r2, [pc, #600]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80133ac:	4994      	ldr	r1, [pc, #592]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80133ae:	5852      	ldr	r2, [r2, r1]
 80133b0:	699b      	ldr	r3, [r3, #24]
 80133b2:	2198      	movs	r1, #152	; 0x98
 80133b4:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 80133b6:	4b93      	ldr	r3, [pc, #588]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80133b8:	4a91      	ldr	r2, [pc, #580]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80133ba:	589b      	ldr	r3, [r3, r2]
 80133bc:	4a91      	ldr	r2, [pc, #580]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80133be:	4990      	ldr	r1, [pc, #576]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80133c0:	5852      	ldr	r2, [r2, r1]
 80133c2:	69db      	ldr	r3, [r3, #28]
 80133c4:	219c      	movs	r1, #156	; 0x9c
 80133c6:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 80133c8:	4b8e      	ldr	r3, [pc, #568]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80133ca:	4a8d      	ldr	r2, [pc, #564]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80133cc:	589b      	ldr	r3, [r3, r2]
 80133ce:	4a8d      	ldr	r2, [pc, #564]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80133d0:	498b      	ldr	r1, [pc, #556]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80133d2:	5852      	ldr	r2, [r2, r1]
 80133d4:	6a1b      	ldr	r3, [r3, #32]
 80133d6:	21a0      	movs	r1, #160	; 0xa0
 80133d8:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 80133da:	4b8a      	ldr	r3, [pc, #552]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80133dc:	4a88      	ldr	r2, [pc, #544]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80133de:	589a      	ldr	r2, [r3, r2]
 80133e0:	4b88      	ldr	r3, [pc, #544]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80133e2:	4987      	ldr	r1, [pc, #540]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80133e4:	585b      	ldr	r3, [r3, r1]
 80133e6:	2124      	movs	r1, #36	; 0x24
 80133e8:	5c51      	ldrb	r1, [r2, r1]
 80133ea:	22a4      	movs	r2, #164	; 0xa4
 80133ec:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80133ee:	211c      	movs	r1, #28
 80133f0:	187b      	adds	r3, r7, r1
 80133f2:	2200      	movs	r2, #0
 80133f4:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 80133f6:	187b      	adds	r3, r7, r1
 80133f8:	2200      	movs	r2, #0
 80133fa:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80133fc:	4b81      	ldr	r3, [pc, #516]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80133fe:	4a80      	ldr	r2, [pc, #512]	; (8013600 <LoRaMacInitialization+0x6e8>)
 8013400:	589b      	ldr	r3, [r3, r2]
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	187a      	adds	r2, r7, r1
 8013406:	0011      	movs	r1, r2
 8013408:	0018      	movs	r0, r3
 801340a:	f003 fcc2 	bl	8016d92 <RegionInitDefaults>

    ResetMacParameters( );
 801340e:	f7fe fe19 	bl	8012044 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8013412:	4b7c      	ldr	r3, [pc, #496]	; (8013604 <LoRaMacInitialization+0x6ec>)
 8013414:	4a7a      	ldr	r2, [pc, #488]	; (8013600 <LoRaMacInitialization+0x6e8>)
 8013416:	589b      	ldr	r3, [r3, r2]
 8013418:	227d      	movs	r2, #125	; 0x7d
 801341a:	2101      	movs	r1, #1
 801341c:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 801341e:	4a79      	ldr	r2, [pc, #484]	; (8013604 <LoRaMacInitialization+0x6ec>)
 8013420:	23d1      	movs	r3, #209	; 0xd1
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	6979      	ldr	r1, [r7, #20]
 8013426:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 8013428:	4a76      	ldr	r2, [pc, #472]	; (8013604 <LoRaMacInitialization+0x6ec>)
 801342a:	23d2      	movs	r3, #210	; 0xd2
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	6939      	ldr	r1, [r7, #16]
 8013430:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 8013432:	4b74      	ldr	r3, [pc, #464]	; (8013604 <LoRaMacInitialization+0x6ec>)
 8013434:	4a74      	ldr	r2, [pc, #464]	; (8013608 <LoRaMacInitialization+0x6f0>)
 8013436:	2100      	movs	r1, #0
 8013438:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 801343a:	4a72      	ldr	r2, [pc, #456]	; (8013604 <LoRaMacInitialization+0x6ec>)
 801343c:	23d0      	movs	r3, #208	; 0xd0
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	2101      	movs	r1, #1
 8013442:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8013444:	4b6f      	ldr	r3, [pc, #444]	; (8013604 <LoRaMacInitialization+0x6ec>)
 8013446:	4a6e      	ldr	r2, [pc, #440]	; (8013600 <LoRaMacInitialization+0x6e8>)
 8013448:	589a      	ldr	r2, [r3, r2]
 801344a:	23a8      	movs	r3, #168	; 0xa8
 801344c:	005b      	lsls	r3, r3, #1
 801344e:	2100      	movs	r1, #0
 8013450:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8013452:	4b6c      	ldr	r3, [pc, #432]	; (8013604 <LoRaMacInitialization+0x6ec>)
 8013454:	4a6a      	ldr	r2, [pc, #424]	; (8013600 <LoRaMacInitialization+0x6e8>)
 8013456:	589a      	ldr	r2, [r3, r2]
 8013458:	23aa      	movs	r3, #170	; 0xaa
 801345a:	005b      	lsls	r3, r3, #1
 801345c:	2100      	movs	r1, #0
 801345e:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013460:	4b6a      	ldr	r3, [pc, #424]	; (801360c <LoRaMacInitialization+0x6f4>)
 8013462:	2201      	movs	r2, #1
 8013464:	4251      	negs	r1, r2
 8013466:	486a      	ldr	r0, [pc, #424]	; (8013610 <LoRaMacInitialization+0x6f8>)
 8013468:	2200      	movs	r2, #0
 801346a:	9200      	str	r2, [sp, #0]
 801346c:	2200      	movs	r2, #0
 801346e:	f009 fbdb 	bl	801cc28 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013472:	4b68      	ldr	r3, [pc, #416]	; (8013614 <LoRaMacInitialization+0x6fc>)
 8013474:	2201      	movs	r2, #1
 8013476:	4251      	negs	r1, r2
 8013478:	4867      	ldr	r0, [pc, #412]	; (8013618 <LoRaMacInitialization+0x700>)
 801347a:	2200      	movs	r2, #0
 801347c:	9200      	str	r2, [sp, #0]
 801347e:	2200      	movs	r2, #0
 8013480:	f009 fbd2 	bl	801cc28 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013484:	4b65      	ldr	r3, [pc, #404]	; (801361c <LoRaMacInitialization+0x704>)
 8013486:	2201      	movs	r2, #1
 8013488:	4251      	negs	r1, r2
 801348a:	4865      	ldr	r0, [pc, #404]	; (8013620 <LoRaMacInitialization+0x708>)
 801348c:	2200      	movs	r2, #0
 801348e:	9200      	str	r2, [sp, #0]
 8013490:	2200      	movs	r2, #0
 8013492:	f009 fbc9 	bl	801cc28 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013496:	4b63      	ldr	r3, [pc, #396]	; (8013624 <LoRaMacInitialization+0x70c>)
 8013498:	2201      	movs	r2, #1
 801349a:	4251      	negs	r1, r2
 801349c:	4862      	ldr	r0, [pc, #392]	; (8013628 <LoRaMacInitialization+0x710>)
 801349e:	2200      	movs	r2, #0
 80134a0:	9200      	str	r2, [sp, #0]
 80134a2:	2200      	movs	r2, #0
 80134a4:	f009 fbc0 	bl	801cc28 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 80134a8:	4b56      	ldr	r3, [pc, #344]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80134aa:	4a55      	ldr	r2, [pc, #340]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80134ac:	589d      	ldr	r5, [r3, r2]
 80134ae:	23ac      	movs	r3, #172	; 0xac
 80134b0:	005c      	lsls	r4, r3, #1
 80134b2:	003b      	movs	r3, r7
 80134b4:	0018      	movs	r0, r3
 80134b6:	f009 fb87 	bl	801cbc8 <SysTimeGetMcuTime>
 80134ba:	003a      	movs	r2, r7
 80134bc:	192b      	adds	r3, r5, r4
 80134be:	ca03      	ldmia	r2!, {r0, r1}
 80134c0:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80134c2:	4a50      	ldr	r2, [pc, #320]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80134c4:	23d3      	movs	r3, #211	; 0xd3
 80134c6:	009b      	lsls	r3, r3, #2
 80134c8:	4958      	ldr	r1, [pc, #352]	; (801362c <LoRaMacInitialization+0x714>)
 80134ca:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80134cc:	4a4d      	ldr	r2, [pc, #308]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80134ce:	23d5      	movs	r3, #213	; 0xd5
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	4957      	ldr	r1, [pc, #348]	; (8013630 <LoRaMacInitialization+0x718>)
 80134d4:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80134d6:	4a4b      	ldr	r2, [pc, #300]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80134d8:	23d7      	movs	r3, #215	; 0xd7
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	4955      	ldr	r1, [pc, #340]	; (8013634 <LoRaMacInitialization+0x71c>)
 80134de:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80134e0:	4a48      	ldr	r2, [pc, #288]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80134e2:	23d4      	movs	r3, #212	; 0xd4
 80134e4:	009b      	lsls	r3, r3, #2
 80134e6:	4954      	ldr	r1, [pc, #336]	; (8013638 <LoRaMacInitialization+0x720>)
 80134e8:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80134ea:	4a46      	ldr	r2, [pc, #280]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80134ec:	23d6      	movs	r3, #214	; 0xd6
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	4952      	ldr	r1, [pc, #328]	; (801363c <LoRaMacInitialization+0x724>)
 80134f2:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 80134f4:	4b52      	ldr	r3, [pc, #328]	; (8013640 <LoRaMacInitialization+0x728>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	4a52      	ldr	r2, [pc, #328]	; (8013644 <LoRaMacInitialization+0x72c>)
 80134fa:	0010      	movs	r0, r2
 80134fc:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 80134fe:	4b52      	ldr	r3, [pc, #328]	; (8013648 <LoRaMacInitialization+0x730>)
 8013500:	0018      	movs	r0, r3
 8013502:	f7fa f891 	bl	800d628 <SecureElementInit>
 8013506:	1e03      	subs	r3, r0, #0
 8013508:	d001      	beq.n	801350e <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801350a:	2311      	movs	r3, #17
 801350c:	e073      	b.n	80135f6 <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 801350e:	4b4f      	ldr	r3, [pc, #316]	; (801364c <LoRaMacInitialization+0x734>)
 8013510:	0018      	movs	r0, r3
 8013512:	f002 fc0d 	bl	8015d30 <LoRaMacCryptoInit>
 8013516:	1e03      	subs	r3, r0, #0
 8013518:	d001      	beq.n	801351e <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801351a:	2311      	movs	r3, #17
 801351c:	e06b      	b.n	80135f6 <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 801351e:	4b4c      	ldr	r3, [pc, #304]	; (8013650 <LoRaMacInitialization+0x738>)
 8013520:	0018      	movs	r0, r3
 8013522:	f001 fc0d 	bl	8014d40 <LoRaMacCommandsInit>
 8013526:	1e03      	subs	r3, r0, #0
 8013528:	d001      	beq.n	801352e <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801352a:	2313      	movs	r3, #19
 801352c:	e063      	b.n	80135f6 <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801352e:	4b35      	ldr	r3, [pc, #212]	; (8013604 <LoRaMacInitialization+0x6ec>)
 8013530:	4a33      	ldr	r2, [pc, #204]	; (8013600 <LoRaMacInitialization+0x6e8>)
 8013532:	589b      	ldr	r3, [r3, r2]
 8013534:	3350      	adds	r3, #80	; 0x50
 8013536:	0018      	movs	r0, r3
 8013538:	f002 fd10 	bl	8015f5c <LoRaMacCryptoSetMulticastReference>
 801353c:	1e03      	subs	r3, r0, #0
 801353e:	d001      	beq.n	8013544 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013540:	2311      	movs	r3, #17
 8013542:	e058      	b.n	80135f6 <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013544:	4b3e      	ldr	r3, [pc, #248]	; (8013640 <LoRaMacInitialization+0x728>)
 8013546:	695b      	ldr	r3, [r3, #20]
 8013548:	4798      	blx	r3
 801354a:	0003      	movs	r3, r0
 801354c:	0018      	movs	r0, r3
 801354e:	f006 f83f 	bl	80195d0 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8013552:	4b3b      	ldr	r3, [pc, #236]	; (8013640 <LoRaMacInitialization+0x728>)
 8013554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013556:	4a2b      	ldr	r2, [pc, #172]	; (8013604 <LoRaMacInitialization+0x6ec>)
 8013558:	4929      	ldr	r1, [pc, #164]	; (8013600 <LoRaMacInitialization+0x6e8>)
 801355a:	5852      	ldr	r2, [r2, r1]
 801355c:	217d      	movs	r1, #125	; 0x7d
 801355e:	5c52      	ldrb	r2, [r2, r1]
 8013560:	0010      	movs	r0, r2
 8013562:	4798      	blx	r3
    Radio.Sleep( );
 8013564:	4b36      	ldr	r3, [pc, #216]	; (8013640 <LoRaMacInitialization+0x728>)
 8013566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013568:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801356a:	2144      	movs	r1, #68	; 0x44
 801356c:	187b      	adds	r3, r7, r1
 801356e:	2200      	movs	r2, #0
 8013570:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 8013572:	187b      	adds	r3, r7, r1
 8013574:	2200      	movs	r2, #0
 8013576:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d007      	beq.n	801358e <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	685a      	ldr	r2, [r3, #4]
 8013582:	187b      	adds	r3, r7, r1
 8013584:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	68da      	ldr	r2, [r3, #12]
 801358a:	187b      	adds	r3, r7, r1
 801358c:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801358e:	2124      	movs	r1, #36	; 0x24
 8013590:	187b      	adds	r3, r7, r1
 8013592:	4a30      	ldr	r2, [pc, #192]	; (8013654 <LoRaMacInitialization+0x73c>)
 8013594:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013596:	187b      	adds	r3, r7, r1
 8013598:	4a2f      	ldr	r2, [pc, #188]	; (8013658 <LoRaMacInitialization+0x740>)
 801359a:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801359c:	187b      	adds	r3, r7, r1
 801359e:	4a2f      	ldr	r2, [pc, #188]	; (801365c <LoRaMacInitialization+0x744>)
 80135a0:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80135a2:	187b      	adds	r3, r7, r1
 80135a4:	4a2e      	ldr	r2, [pc, #184]	; (8013660 <LoRaMacInitialization+0x748>)
 80135a6:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 80135a8:	4b16      	ldr	r3, [pc, #88]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80135aa:	4a15      	ldr	r2, [pc, #84]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80135ac:	589b      	ldr	r3, [r3, r2]
 80135ae:	334c      	adds	r3, #76	; 0x4c
 80135b0:	001a      	movs	r2, r3
 80135b2:	187b      	adds	r3, r7, r1
 80135b4:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 80135b6:	4b13      	ldr	r3, [pc, #76]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80135b8:	4a11      	ldr	r2, [pc, #68]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80135ba:	589b      	ldr	r3, [r3, r2]
 80135bc:	001a      	movs	r2, r3
 80135be:	187b      	adds	r3, r7, r1
 80135c0:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 80135c2:	4b10      	ldr	r3, [pc, #64]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80135c4:	4a0e      	ldr	r2, [pc, #56]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80135c6:	589b      	ldr	r3, [r3, r2]
 80135c8:	3384      	adds	r3, #132	; 0x84
 80135ca:	001a      	movs	r2, r3
 80135cc:	187b      	adds	r3, r7, r1
 80135ce:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 80135d0:	4b0c      	ldr	r3, [pc, #48]	; (8013604 <LoRaMacInitialization+0x6ec>)
 80135d2:	4a0b      	ldr	r2, [pc, #44]	; (8013600 <LoRaMacInitialization+0x6e8>)
 80135d4:	589b      	ldr	r3, [r3, r2]
 80135d6:	3350      	adds	r3, #80	; 0x50
 80135d8:	001a      	movs	r2, r3
 80135da:	0008      	movs	r0, r1
 80135dc:	187b      	adds	r3, r7, r1
 80135de:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80135e0:	4a20      	ldr	r2, [pc, #128]	; (8013664 <LoRaMacInitialization+0x74c>)
 80135e2:	2344      	movs	r3, #68	; 0x44
 80135e4:	18f9      	adds	r1, r7, r3
 80135e6:	183b      	adds	r3, r7, r0
 80135e8:	0018      	movs	r0, r3
 80135ea:	f001 f994 	bl	8014916 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80135ee:	2001      	movs	r0, #1
 80135f0:	f7fc fe10 	bl	8010214 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80135f4:	2300      	movs	r3, #0
}
 80135f6:	0018      	movs	r0, r3
 80135f8:	46bd      	mov	sp, r7
 80135fa:	b016      	add	sp, #88	; 0x58
 80135fc:	bdb0      	pop	{r4, r5, r7, pc}
 80135fe:	46c0      	nop			; (mov r8, r8)
 8013600:	00000484 	.word	0x00000484
 8013604:	200005b8 	.word	0x200005b8
 8013608:	00000481 	.word	0x00000481
 801360c:	08010619 	.word	0x08010619
 8013610:	20000920 	.word	0x20000920
 8013614:	080106a5 	.word	0x080106a5
 8013618:	20000938 	.word	0x20000938
 801361c:	08010739 	.word	0x08010739
 8013620:	20000950 	.word	0x20000950
 8013624:	080107d5 	.word	0x080107d5
 8013628:	200009b0 	.word	0x200009b0
 801362c:	0800f0fd 	.word	0x0800f0fd
 8013630:	0800f169 	.word	0x0800f169
 8013634:	0800f23d 	.word	0x0800f23d
 8013638:	0800f1f9 	.word	0x0800f1f9
 801363c:	0800f281 	.word	0x0800f281
 8013640:	0801fd7c 	.word	0x0801fd7c
 8013644:	20000904 	.word	0x20000904
 8013648:	08012de5 	.word	0x08012de5
 801364c:	08012dd5 	.word	0x08012dd5
 8013650:	08012df5 	.word	0x08012df5
 8013654:	20000a1c 	.word	0x20000a1c
 8013658:	200009d4 	.word	0x200009d4
 801365c:	20000a08 	.word	0x20000a08
 8013660:	20000a39 	.word	0x20000a39
 8013664:	08012e05 	.word	0x08012e05

08013668 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013668:	b580      	push	{r7, lr}
 801366a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 801366c:	4a04      	ldr	r2, [pc, #16]	; (8013680 <LoRaMacStart+0x18>)
 801366e:	23d0      	movs	r3, #208	; 0xd0
 8013670:	009b      	lsls	r3, r3, #2
 8013672:	2100      	movs	r1, #0
 8013674:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8013676:	2300      	movs	r3, #0
}
 8013678:	0018      	movs	r0, r3
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
 801367e:	46c0      	nop			; (mov r8, r8)
 8013680:	200005b8 	.word	0x200005b8

08013684 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013684:	b590      	push	{r4, r7, lr}
 8013686:	b08b      	sub	sp, #44	; 0x2c
 8013688:	af00      	add	r7, sp, #0
 801368a:	0002      	movs	r2, r0
 801368c:	6039      	str	r1, [r7, #0]
 801368e:	1dfb      	adds	r3, r7, #7
 8013690:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8013692:	4b4f      	ldr	r3, [pc, #316]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 8013694:	4a4f      	ldr	r2, [pc, #316]	; (80137d4 <LoRaMacQueryTxPossible+0x150>)
 8013696:	589b      	ldr	r3, [r3, r2]
 8013698:	2280      	movs	r2, #128	; 0x80
 801369a:	589b      	ldr	r3, [r3, r2]
 801369c:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 801369e:	4b4c      	ldr	r3, [pc, #304]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 80136a0:	4a4c      	ldr	r2, [pc, #304]	; (80137d4 <LoRaMacQueryTxPossible+0x150>)
 80136a2:	589b      	ldr	r3, [r3, r2]
 80136a4:	2205      	movs	r2, #5
 80136a6:	569a      	ldrsb	r2, [r3, r2]
 80136a8:	230f      	movs	r3, #15
 80136aa:	18fb      	adds	r3, r7, r3
 80136ac:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80136ae:	4b48      	ldr	r3, [pc, #288]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 80136b0:	4a48      	ldr	r2, [pc, #288]	; (80137d4 <LoRaMacQueryTxPossible+0x150>)
 80136b2:	589b      	ldr	r3, [r3, r2]
 80136b4:	2204      	movs	r2, #4
 80136b6:	569a      	ldrsb	r2, [r3, r2]
 80136b8:	230e      	movs	r3, #14
 80136ba:	18fb      	adds	r3, r7, r3
 80136bc:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 80136be:	2300      	movs	r3, #0
 80136c0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d101      	bne.n	80136cc <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80136c8:	2303      	movs	r3, #3
 80136ca:	e07d      	b.n	80137c8 <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 80136cc:	4b40      	ldr	r3, [pc, #256]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 80136ce:	4a41      	ldr	r2, [pc, #260]	; (80137d4 <LoRaMacQueryTxPossible+0x150>)
 80136d0:	5899      	ldr	r1, [r3, r2]
 80136d2:	2014      	movs	r0, #20
 80136d4:	183b      	adds	r3, r7, r0
 80136d6:	22b0      	movs	r2, #176	; 0xb0
 80136d8:	0052      	lsls	r2, r2, #1
 80136da:	588a      	ldr	r2, [r1, r2]
 80136dc:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 80136de:	183b      	adds	r3, r7, r0
 80136e0:	2200      	movs	r2, #0
 80136e2:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80136e4:	4b3a      	ldr	r3, [pc, #232]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 80136e6:	4a3b      	ldr	r2, [pc, #236]	; (80137d4 <LoRaMacQueryTxPossible+0x150>)
 80136e8:	589b      	ldr	r3, [r3, r2]
 80136ea:	227e      	movs	r2, #126	; 0x7e
 80136ec:	5c9a      	ldrb	r2, [r3, r2]
 80136ee:	183b      	adds	r3, r7, r0
 80136f0:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80136f2:	4b37      	ldr	r3, [pc, #220]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 80136f4:	4a37      	ldr	r2, [pc, #220]	; (80137d4 <LoRaMacQueryTxPossible+0x150>)
 80136f6:	589b      	ldr	r3, [r3, r2]
 80136f8:	2280      	movs	r2, #128	; 0x80
 80136fa:	589a      	ldr	r2, [r3, r2]
 80136fc:	183b      	adds	r3, r7, r0
 80136fe:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8013700:	4a33      	ldr	r2, [pc, #204]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 8013702:	23fd      	movs	r3, #253	; 0xfd
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	5ad2      	ldrh	r2, [r2, r3]
 8013708:	183b      	adds	r3, r7, r0
 801370a:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801370c:	4b30      	ldr	r3, [pc, #192]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 801370e:	4a32      	ldr	r2, [pc, #200]	; (80137d8 <LoRaMacQueryTxPossible+0x154>)
 8013710:	5a9a      	ldrh	r2, [r3, r2]
 8013712:	183b      	adds	r3, r7, r0
 8013714:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013716:	4b2e      	ldr	r3, [pc, #184]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 8013718:	4a2e      	ldr	r2, [pc, #184]	; (80137d4 <LoRaMacQueryTxPossible+0x150>)
 801371a:	589b      	ldr	r3, [r3, r2]
 801371c:	2285      	movs	r2, #133	; 0x85
 801371e:	569a      	ldrsb	r2, [r3, r2]
 8013720:	183b      	adds	r3, r7, r0
 8013722:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013724:	4b2a      	ldr	r3, [pc, #168]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 8013726:	4a2b      	ldr	r2, [pc, #172]	; (80137d4 <LoRaMacQueryTxPossible+0x150>)
 8013728:	589b      	ldr	r3, [r3, r2]
 801372a:	2284      	movs	r2, #132	; 0x84
 801372c:	569a      	ldrsb	r2, [r3, r2]
 801372e:	183b      	adds	r3, r7, r0
 8013730:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013732:	4b27      	ldr	r3, [pc, #156]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 8013734:	4a27      	ldr	r2, [pc, #156]	; (80137d4 <LoRaMacQueryTxPossible+0x150>)
 8013736:	589b      	ldr	r3, [r3, r2]
 8013738:	22b8      	movs	r2, #184	; 0xb8
 801373a:	5c9a      	ldrb	r2, [r3, r2]
 801373c:	183b      	adds	r3, r7, r0
 801373e:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8013740:	4b23      	ldr	r3, [pc, #140]	; (80137d0 <LoRaMacQueryTxPossible+0x14c>)
 8013742:	4a24      	ldr	r2, [pc, #144]	; (80137d4 <LoRaMacQueryTxPossible+0x150>)
 8013744:	589b      	ldr	r3, [r3, r2]
 8013746:	781a      	ldrb	r2, [r3, #0]
 8013748:	183b      	adds	r3, r7, r0
 801374a:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801374c:	2310      	movs	r3, #16
 801374e:	18fb      	adds	r3, r7, r3
 8013750:	220e      	movs	r2, #14
 8013752:	18ba      	adds	r2, r7, r2
 8013754:	240f      	movs	r4, #15
 8013756:	1939      	adds	r1, r7, r4
 8013758:	1838      	adds	r0, r7, r0
 801375a:	f001 f8c4 	bl	80148e6 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801375e:	193b      	adds	r3, r7, r4
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	b25b      	sxtb	r3, r3
 8013764:	0018      	movs	r0, r3
 8013766:	f7fd f9e7 	bl	8010b38 <GetMaxAppPayloadWithoutFOptsLength>
 801376a:	0003      	movs	r3, r0
 801376c:	001a      	movs	r2, r3
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013772:	2308      	movs	r3, #8
 8013774:	18fb      	adds	r3, r7, r3
 8013776:	0018      	movs	r0, r3
 8013778:	f001 fbf6 	bl	8014f68 <LoRaMacCommandsGetSizeSerializedCmds>
 801377c:	1e03      	subs	r3, r0, #0
 801377e:	d001      	beq.n	8013784 <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013780:	2313      	movs	r3, #19
 8013782:	e021      	b.n	80137c8 <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	2b0f      	cmp	r3, #15
 8013788:	d81a      	bhi.n	80137c0 <LoRaMacQueryTxPossible+0x13c>
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	785b      	ldrb	r3, [r3, #1]
 801378e:	001a      	movs	r2, r3
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	429a      	cmp	r2, r3
 8013794:	d314      	bcc.n	80137c0 <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	785a      	ldrb	r2, [r3, #1]
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	b2db      	uxtb	r3, r3
 801379e:	1ad3      	subs	r3, r2, r3
 80137a0:	b2da      	uxtb	r2, r3
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	785b      	ldrb	r3, [r3, #1]
 80137aa:	0019      	movs	r1, r3
 80137ac:	1dfb      	adds	r3, r7, #7
 80137ae:	781a      	ldrb	r2, [r3, #0]
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	18d3      	adds	r3, r2, r3
 80137b4:	4299      	cmp	r1, r3
 80137b6:	d301      	bcc.n	80137bc <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 80137b8:	2300      	movs	r3, #0
 80137ba:	e005      	b.n	80137c8 <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80137bc:	2308      	movs	r3, #8
 80137be:	e003      	b.n	80137c8 <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	2200      	movs	r2, #0
 80137c4:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80137c6:	2308      	movs	r3, #8
    }
}
 80137c8:	0018      	movs	r0, r3
 80137ca:	46bd      	mov	sp, r7
 80137cc:	b00b      	add	sp, #44	; 0x2c
 80137ce:	bd90      	pop	{r4, r7, pc}
 80137d0:	200005b8 	.word	0x200005b8
 80137d4:	00000484 	.word	0x00000484
 80137d8:	000003f6 	.word	0x000003f6

080137dc <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80137dc:	b590      	push	{r4, r7, lr}
 80137de:	b087      	sub	sp, #28
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80137e4:	2317      	movs	r3, #23
 80137e6:	18fb      	adds	r3, r7, r3
 80137e8:	2200      	movs	r2, #0
 80137ea:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d101      	bne.n	80137f6 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80137f2:	2303      	movs	r3, #3
 80137f4:	e146      	b.n	8013a84 <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	2b28      	cmp	r3, #40	; 0x28
 80137fc:	d900      	bls.n	8013800 <LoRaMacMibGetRequestConfirm+0x24>
 80137fe:	e135      	b.n	8013a6c <LoRaMacMibGetRequestConfirm+0x290>
 8013800:	009a      	lsls	r2, r3, #2
 8013802:	4ba2      	ldr	r3, [pc, #648]	; (8013a8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013804:	18d3      	adds	r3, r2, r3
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 801380a:	4ba1      	ldr	r3, [pc, #644]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801380c:	4aa1      	ldr	r2, [pc, #644]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801380e:	589b      	ldr	r3, [r3, r2]
 8013810:	227c      	movs	r2, #124	; 0x7c
 8013812:	5c9a      	ldrb	r2, [r3, r2]
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	711a      	strb	r2, [r3, #4]
            break;
 8013818:	e131      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 801381a:	4b9d      	ldr	r3, [pc, #628]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801381c:	4a9d      	ldr	r2, [pc, #628]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801381e:	589a      	ldr	r2, [r3, r2]
 8013820:	23b2      	movs	r3, #178	; 0xb2
 8013822:	005b      	lsls	r3, r3, #1
 8013824:	5cd2      	ldrb	r2, [r2, r3]
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	711a      	strb	r2, [r3, #4]
            break;
 801382a:	e128      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 801382c:	f7fa fb5c 	bl	800dee8 <SecureElementGetDevEui>
 8013830:	0002      	movs	r2, r0
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	605a      	str	r2, [r3, #4]
            break;
 8013836:	e122      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8013838:	f7fa fb7a 	bl	800df30 <SecureElementGetJoinEui>
 801383c:	0002      	movs	r2, r0
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	605a      	str	r2, [r3, #4]
            break;
 8013842:	e11c      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8013844:	4b92      	ldr	r3, [pc, #584]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013846:	4a93      	ldr	r2, [pc, #588]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013848:	589b      	ldr	r3, [r3, r2]
 801384a:	227e      	movs	r2, #126	; 0x7e
 801384c:	5c9a      	ldrb	r2, [r3, r2]
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	711a      	strb	r2, [r3, #4]
            break;
 8013852:	e114      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8013854:	4b8e      	ldr	r3, [pc, #568]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013856:	4a8f      	ldr	r2, [pc, #572]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013858:	589b      	ldr	r3, [r3, r2]
 801385a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	605a      	str	r2, [r3, #4]
            break;
 8013860:	e10d      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8013862:	4b8b      	ldr	r3, [pc, #556]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013864:	4a8b      	ldr	r2, [pc, #556]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013866:	589b      	ldr	r3, [r3, r2]
 8013868:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	605a      	str	r2, [r3, #4]
            break;
 801386e:	e106      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8013870:	4b87      	ldr	r3, [pc, #540]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013872:	4a88      	ldr	r2, [pc, #544]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013874:	589b      	ldr	r3, [r3, r2]
 8013876:	227d      	movs	r2, #125	; 0x7d
 8013878:	5c9a      	ldrb	r2, [r3, r2]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	711a      	strb	r2, [r3, #4]
            break;
 801387e:	e0fe      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8013880:	4b83      	ldr	r3, [pc, #524]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013882:	4a84      	ldr	r2, [pc, #528]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013884:	589b      	ldr	r3, [r3, r2]
 8013886:	22ca      	movs	r2, #202	; 0xca
 8013888:	5c9a      	ldrb	r2, [r3, r2]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	711a      	strb	r2, [r3, #4]
            break;
 801388e:	e0f6      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013890:	2110      	movs	r1, #16
 8013892:	187b      	adds	r3, r7, r1
 8013894:	221d      	movs	r2, #29
 8013896:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013898:	4b7d      	ldr	r3, [pc, #500]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801389a:	4a7e      	ldr	r2, [pc, #504]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801389c:	589b      	ldr	r3, [r3, r2]
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	187a      	adds	r2, r7, r1
 80138a2:	0011      	movs	r1, r2
 80138a4:	0018      	movs	r0, r3
 80138a6:	f003 fa38 	bl	8016d1a <RegionGetPhyParam>
 80138aa:	0003      	movs	r3, r0
 80138ac:	001a      	movs	r2, r3
 80138ae:	210c      	movs	r1, #12
 80138b0:	187b      	adds	r3, r7, r1
 80138b2:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 80138b4:	187b      	adds	r3, r7, r1
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	605a      	str	r2, [r3, #4]
            break;
 80138bc:	e0df      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80138be:	4b74      	ldr	r3, [pc, #464]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138c0:	4a74      	ldr	r2, [pc, #464]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138c2:	589a      	ldr	r2, [r3, r2]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	21a8      	movs	r1, #168	; 0xa8
 80138c8:	3304      	adds	r3, #4
 80138ca:	1852      	adds	r2, r2, r1
 80138cc:	ca03      	ldmia	r2!, {r0, r1}
 80138ce:	c303      	stmia	r3!, {r0, r1}
            break;
 80138d0:	e0d5      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80138d2:	4b6f      	ldr	r3, [pc, #444]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138d4:	4a6f      	ldr	r2, [pc, #444]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138d6:	589a      	ldr	r2, [r3, r2]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	3304      	adds	r3, #4
 80138dc:	3228      	adds	r2, #40	; 0x28
 80138de:	ca03      	ldmia	r2!, {r0, r1}
 80138e0:	c303      	stmia	r3!, {r0, r1}
            break;
 80138e2:	e0cc      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 80138e4:	4b6a      	ldr	r3, [pc, #424]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138e6:	4a6b      	ldr	r2, [pc, #428]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138e8:	589a      	ldr	r2, [r3, r2]
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	21b0      	movs	r1, #176	; 0xb0
 80138ee:	3304      	adds	r3, #4
 80138f0:	1852      	adds	r2, r2, r1
 80138f2:	ca03      	ldmia	r2!, {r0, r1}
 80138f4:	c303      	stmia	r3!, {r0, r1}
            break;
 80138f6:	e0c2      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80138f8:	4b65      	ldr	r3, [pc, #404]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138fa:	4a66      	ldr	r2, [pc, #408]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138fc:	589a      	ldr	r2, [r3, r2]
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	3304      	adds	r3, #4
 8013902:	3230      	adds	r2, #48	; 0x30
 8013904:	ca03      	ldmia	r2!, {r0, r1}
 8013906:	c303      	stmia	r3!, {r0, r1}
            break;
 8013908:	e0b9      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801390a:	2110      	movs	r1, #16
 801390c:	187b      	adds	r3, r7, r1
 801390e:	221b      	movs	r2, #27
 8013910:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013912:	4b5f      	ldr	r3, [pc, #380]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013914:	4a5f      	ldr	r2, [pc, #380]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013916:	589b      	ldr	r3, [r3, r2]
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	187a      	adds	r2, r7, r1
 801391c:	0011      	movs	r1, r2
 801391e:	0018      	movs	r0, r3
 8013920:	f003 f9fb 	bl	8016d1a <RegionGetPhyParam>
 8013924:	0003      	movs	r3, r0
 8013926:	001a      	movs	r2, r3
 8013928:	210c      	movs	r1, #12
 801392a:	187b      	adds	r3, r7, r1
 801392c:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801392e:	187b      	adds	r3, r7, r1
 8013930:	681a      	ldr	r2, [r3, #0]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	605a      	str	r2, [r3, #4]
            break;
 8013936:	e0a2      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013938:	2110      	movs	r1, #16
 801393a:	187b      	adds	r3, r7, r1
 801393c:	221a      	movs	r2, #26
 801393e:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013940:	4b53      	ldr	r3, [pc, #332]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013942:	4a54      	ldr	r2, [pc, #336]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013944:	589b      	ldr	r3, [r3, r2]
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	187a      	adds	r2, r7, r1
 801394a:	0011      	movs	r1, r2
 801394c:	0018      	movs	r0, r3
 801394e:	f003 f9e4 	bl	8016d1a <RegionGetPhyParam>
 8013952:	0003      	movs	r3, r0
 8013954:	001a      	movs	r2, r3
 8013956:	210c      	movs	r1, #12
 8013958:	187b      	adds	r3, r7, r1
 801395a:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801395c:	187b      	adds	r3, r7, r1
 801395e:	681a      	ldr	r2, [r3, #0]
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	605a      	str	r2, [r3, #4]
            break;
 8013964:	e08b      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8013966:	4b4a      	ldr	r3, [pc, #296]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013968:	4a4a      	ldr	r2, [pc, #296]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801396a:	589b      	ldr	r3, [r3, r2]
 801396c:	22a4      	movs	r2, #164	; 0xa4
 801396e:	5c9a      	ldrb	r2, [r3, r2]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	711a      	strb	r2, [r3, #4]
            break;
 8013974:	e083      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8013976:	4b46      	ldr	r3, [pc, #280]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013978:	4a46      	ldr	r2, [pc, #280]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801397a:	589b      	ldr	r3, [r3, r2]
 801397c:	2290      	movs	r2, #144	; 0x90
 801397e:	589a      	ldr	r2, [r3, r2]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	605a      	str	r2, [r3, #4]
            break;
 8013984:	e07b      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8013986:	4b42      	ldr	r3, [pc, #264]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013988:	4a42      	ldr	r2, [pc, #264]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801398a:	589b      	ldr	r3, [r3, r2]
 801398c:	2294      	movs	r2, #148	; 0x94
 801398e:	589a      	ldr	r2, [r3, r2]
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	605a      	str	r2, [r3, #4]
            break;
 8013994:	e073      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8013996:	4b3e      	ldr	r3, [pc, #248]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013998:	4a3e      	ldr	r2, [pc, #248]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801399a:	589b      	ldr	r3, [r3, r2]
 801399c:	2298      	movs	r2, #152	; 0x98
 801399e:	589a      	ldr	r2, [r3, r2]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	605a      	str	r2, [r3, #4]
            break;
 80139a4:	e06b      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 80139a6:	4b3a      	ldr	r3, [pc, #232]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80139a8:	4a3a      	ldr	r2, [pc, #232]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80139aa:	589b      	ldr	r3, [r3, r2]
 80139ac:	229c      	movs	r2, #156	; 0x9c
 80139ae:	589a      	ldr	r2, [r3, r2]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	605a      	str	r2, [r3, #4]
            break;
 80139b4:	e063      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 80139b6:	4b36      	ldr	r3, [pc, #216]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80139b8:	4a36      	ldr	r2, [pc, #216]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80139ba:	589b      	ldr	r3, [r3, r2]
 80139bc:	22a0      	movs	r2, #160	; 0xa0
 80139be:	589a      	ldr	r2, [r3, r2]
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	605a      	str	r2, [r3, #4]
            break;
 80139c4:	e05b      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80139c6:	4b32      	ldr	r3, [pc, #200]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80139c8:	4a32      	ldr	r2, [pc, #200]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80139ca:	589b      	ldr	r3, [r3, r2]
 80139cc:	2205      	movs	r2, #5
 80139ce:	569a      	ldrsb	r2, [r3, r2]
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	711a      	strb	r2, [r3, #4]
            break;
 80139d4:	e053      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80139d6:	4b2e      	ldr	r3, [pc, #184]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80139d8:	4a2e      	ldr	r2, [pc, #184]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80139da:	589b      	ldr	r3, [r3, r2]
 80139dc:	2285      	movs	r2, #133	; 0x85
 80139de:	569a      	ldrsb	r2, [r3, r2]
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	711a      	strb	r2, [r3, #4]
            break;
 80139e4:	e04b      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80139e6:	4b2a      	ldr	r3, [pc, #168]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80139e8:	4a2a      	ldr	r2, [pc, #168]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80139ea:	589b      	ldr	r3, [r3, r2]
 80139ec:	2204      	movs	r2, #4
 80139ee:	569a      	ldrsb	r2, [r3, r2]
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	711a      	strb	r2, [r3, #4]
            break;
 80139f4:	e043      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80139f6:	4b26      	ldr	r3, [pc, #152]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80139f8:	4a26      	ldr	r2, [pc, #152]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80139fa:	589b      	ldr	r3, [r3, r2]
 80139fc:	2284      	movs	r2, #132	; 0x84
 80139fe:	569a      	ldrsb	r2, [r3, r2]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	711a      	strb	r2, [r3, #4]
            break;
 8013a04:	e03b      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8013a06:	4b22      	ldr	r3, [pc, #136]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013a08:	4a22      	ldr	r2, [pc, #136]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013a0a:	589b      	ldr	r3, [r3, r2]
 8013a0c:	2288      	movs	r2, #136	; 0x88
 8013a0e:	589a      	ldr	r2, [r3, r2]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	605a      	str	r2, [r3, #4]
            break;
 8013a14:	e033      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8013a16:	4b1e      	ldr	r3, [pc, #120]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013a18:	4a1e      	ldr	r2, [pc, #120]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013a1a:	589b      	ldr	r3, [r3, r2]
 8013a1c:	228c      	movs	r2, #140	; 0x8c
 8013a1e:	5c9a      	ldrb	r2, [r3, r2]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	711a      	strb	r2, [r3, #4]
            break;
 8013a24:	e02b      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8013a26:	4b1a      	ldr	r3, [pc, #104]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013a28:	4a1a      	ldr	r2, [pc, #104]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013a2a:	589b      	ldr	r3, [r3, r2]
 8013a2c:	22c0      	movs	r2, #192	; 0xc0
 8013a2e:	589a      	ldr	r2, [r3, r2]
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	605a      	str	r2, [r3, #4]
            break;
 8013a34:	e023      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 8013a36:	f7fe ff23 	bl	8012880 <GetCtxs>
 8013a3a:	0002      	movs	r2, r0
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	605a      	str	r2, [r3, #4]
            break;
 8013a40:	e01d      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8013a42:	4b13      	ldr	r3, [pc, #76]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013a44:	4a13      	ldr	r2, [pc, #76]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013a46:	589b      	ldr	r3, [r3, r2]
 8013a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	605a      	str	r2, [r3, #4]
            break;
 8013a4e:	e016      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 8013a50:	4b0f      	ldr	r3, [pc, #60]	; (8013a90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013a52:	4a10      	ldr	r2, [pc, #64]	; (8013a94 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013a54:	5899      	ldr	r1, [r3, r2]
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	22b0      	movs	r2, #176	; 0xb0
 8013a5a:	0052      	lsls	r2, r2, #1
 8013a5c:	588a      	ldr	r2, [r1, r2]
 8013a5e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8013a60:	687c      	ldr	r4, [r7, #4]
 8013a62:	f003 fb55 	bl	8017110 <RegionGetVersion>
 8013a66:	0003      	movs	r3, r0
 8013a68:	60a3      	str	r3, [r4, #8]
            break;
 8013a6a:	e008      	b.n	8013a7e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013a6c:	2317      	movs	r3, #23
 8013a6e:	18fc      	adds	r4, r7, r3
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	0018      	movs	r0, r3
 8013a74:	f000 ffed 	bl	8014a52 <LoRaMacClassBMibGetRequestConfirm>
 8013a78:	0003      	movs	r3, r0
 8013a7a:	7023      	strb	r3, [r4, #0]
            break;
 8013a7c:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 8013a7e:	2317      	movs	r3, #23
 8013a80:	18fb      	adds	r3, r7, r3
 8013a82:	781b      	ldrb	r3, [r3, #0]
}
 8013a84:	0018      	movs	r0, r3
 8013a86:	46bd      	mov	sp, r7
 8013a88:	b007      	add	sp, #28
 8013a8a:	bd90      	pop	{r4, r7, pc}
 8013a8c:	0801f930 	.word	0x0801f930
 8013a90:	200005b8 	.word	0x200005b8
 8013a94:	00000484 	.word	0x00000484

08013a98 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013a98:	b590      	push	{r4, r7, lr}
 8013a9a:	b087      	sub	sp, #28
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013aa0:	2317      	movs	r3, #23
 8013aa2:	18fb      	adds	r3, r7, r3
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d102      	bne.n	8013ab4 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013aae:	2303      	movs	r3, #3
 8013ab0:	f000 fb74 	bl	801419c <LoRaMacMibSetRequestConfirm+0x704>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013ab4:	4ac3      	ldr	r2, [pc, #780]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013ab6:	23d0      	movs	r3, #208	; 0xd0
 8013ab8:	009b      	lsls	r3, r3, #2
 8013aba:	58d3      	ldr	r3, [r2, r3]
 8013abc:	2202      	movs	r2, #2
 8013abe:	4013      	ands	r3, r2
 8013ac0:	d002      	beq.n	8013ac8 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	f000 fb6a 	bl	801419c <LoRaMacMibSetRequestConfirm+0x704>
    }

    switch( mibSet->Type )
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	2b27      	cmp	r3, #39	; 0x27
 8013ace:	d900      	bls.n	8013ad2 <LoRaMacMibSetRequestConfirm+0x3a>
 8013ad0:	e333      	b.n	801413a <LoRaMacMibSetRequestConfirm+0x6a2>
 8013ad2:	009a      	lsls	r2, r3, #2
 8013ad4:	4bbc      	ldr	r3, [pc, #752]	; (8013dc8 <LoRaMacMibSetRequestConfirm+0x330>)
 8013ad6:	18d3      	adds	r3, r2, r3
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	791b      	ldrb	r3, [r3, #4]
 8013ae0:	2217      	movs	r2, #23
 8013ae2:	18bc      	adds	r4, r7, r2
 8013ae4:	0018      	movs	r0, r3
 8013ae6:	f7fc ff07 	bl	80108f8 <SwitchClass>
 8013aea:	0003      	movs	r3, r0
 8013aec:	7023      	strb	r3, [r4, #0]
            break;
 8013aee:	e34e      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	791b      	ldrb	r3, [r3, #4]
 8013af4:	2b02      	cmp	r3, #2
 8013af6:	d008      	beq.n	8013b0a <LoRaMacMibSetRequestConfirm+0x72>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8013af8:	4bb2      	ldr	r3, [pc, #712]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013afa:	4ab4      	ldr	r2, [pc, #720]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013afc:	589a      	ldr	r2, [r3, r2]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	7919      	ldrb	r1, [r3, #4]
 8013b02:	23b2      	movs	r3, #178	; 0xb2
 8013b04:	005b      	lsls	r3, r3, #1
 8013b06:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b08:	e341      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b0a:	2317      	movs	r3, #23
 8013b0c:	18fb      	adds	r3, r7, r3
 8013b0e:	2203      	movs	r2, #3
 8013b10:	701a      	strb	r2, [r3, #0]
            break;
 8013b12:	e33c      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	685b      	ldr	r3, [r3, #4]
 8013b18:	0018      	movs	r0, r3
 8013b1a:	f7fa f9c9 	bl	800deb0 <SecureElementSetDevEui>
 8013b1e:	1e03      	subs	r3, r0, #0
 8013b20:	d100      	bne.n	8013b24 <LoRaMacMibSetRequestConfirm+0x8c>
 8013b22:	e319      	b.n	8014158 <LoRaMacMibSetRequestConfirm+0x6c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b24:	2317      	movs	r3, #23
 8013b26:	18fb      	adds	r3, r7, r3
 8013b28:	2203      	movs	r2, #3
 8013b2a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b2c:	e314      	b.n	8014158 <LoRaMacMibSetRequestConfirm+0x6c0>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	685b      	ldr	r3, [r3, #4]
 8013b32:	0018      	movs	r0, r3
 8013b34:	f7fa f9e0 	bl	800def8 <SecureElementSetJoinEui>
 8013b38:	1e03      	subs	r3, r0, #0
 8013b3a:	d100      	bne.n	8013b3e <LoRaMacMibSetRequestConfirm+0xa6>
 8013b3c:	e30e      	b.n	801415c <LoRaMacMibSetRequestConfirm+0x6c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b3e:	2317      	movs	r3, #23
 8013b40:	18fb      	adds	r3, r7, r3
 8013b42:	2203      	movs	r2, #3
 8013b44:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b46:	e309      	b.n	801415c <LoRaMacMibSetRequestConfirm+0x6c4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8013b48:	4b9e      	ldr	r3, [pc, #632]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013b4a:	4aa0      	ldr	r2, [pc, #640]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013b4c:	589b      	ldr	r3, [r3, r2]
 8013b4e:	687a      	ldr	r2, [r7, #4]
 8013b50:	7911      	ldrb	r1, [r2, #4]
 8013b52:	227e      	movs	r2, #126	; 0x7e
 8013b54:	5499      	strb	r1, [r3, r2]
            break;
 8013b56:	e31a      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8013b58:	4b9a      	ldr	r3, [pc, #616]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013b5a:	4a9c      	ldr	r2, [pc, #624]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013b5c:	589b      	ldr	r3, [r3, r2]
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	6852      	ldr	r2, [r2, #4]
 8013b62:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8013b64:	e313      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8013b66:	4b97      	ldr	r3, [pc, #604]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013b68:	4a98      	ldr	r2, [pc, #608]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013b6a:	589b      	ldr	r3, [r3, r2]
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	6852      	ldr	r2, [r2, #4]
 8013b70:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8013b72:	e30c      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d00a      	beq.n	8013b92 <LoRaMacMibSetRequestConfirm+0xfa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	685b      	ldr	r3, [r3, #4]
 8013b80:	0019      	movs	r1, r3
 8013b82:	2000      	movs	r0, #0
 8013b84:	f002 fa00 	bl	8015f88 <LoRaMacCryptoSetKey>
 8013b88:	1e03      	subs	r3, r0, #0
 8013b8a:	d100      	bne.n	8013b8e <LoRaMacMibSetRequestConfirm+0xf6>
 8013b8c:	e2e8      	b.n	8014160 <LoRaMacMibSetRequestConfirm+0x6c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b8e:	2311      	movs	r3, #17
 8013b90:	e304      	b.n	801419c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b92:	2317      	movs	r3, #23
 8013b94:	18fb      	adds	r3, r7, r3
 8013b96:	2203      	movs	r2, #3
 8013b98:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b9a:	e2e1      	b.n	8014160 <LoRaMacMibSetRequestConfirm+0x6c8>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d00a      	beq.n	8013bba <LoRaMacMibSetRequestConfirm+0x122>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	0019      	movs	r1, r3
 8013baa:	2001      	movs	r0, #1
 8013bac:	f002 f9ec 	bl	8015f88 <LoRaMacCryptoSetKey>
 8013bb0:	1e03      	subs	r3, r0, #0
 8013bb2:	d100      	bne.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x11e>
 8013bb4:	e2d6      	b.n	8014164 <LoRaMacMibSetRequestConfirm+0x6cc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013bb6:	2311      	movs	r3, #17
 8013bb8:	e2f0      	b.n	801419c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bba:	2317      	movs	r3, #23
 8013bbc:	18fb      	adds	r3, r7, r3
 8013bbe:	2203      	movs	r2, #3
 8013bc0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013bc2:	e2cf      	b.n	8014164 <LoRaMacMibSetRequestConfirm+0x6cc>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	685b      	ldr	r3, [r3, #4]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00a      	beq.n	8013be2 <LoRaMacMibSetRequestConfirm+0x14a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	685b      	ldr	r3, [r3, #4]
 8013bd0:	0019      	movs	r1, r3
 8013bd2:	2002      	movs	r0, #2
 8013bd4:	f002 f9d8 	bl	8015f88 <LoRaMacCryptoSetKey>
 8013bd8:	1e03      	subs	r3, r0, #0
 8013bda:	d100      	bne.n	8013bde <LoRaMacMibSetRequestConfirm+0x146>
 8013bdc:	e2c4      	b.n	8014168 <LoRaMacMibSetRequestConfirm+0x6d0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013bde:	2311      	movs	r3, #17
 8013be0:	e2dc      	b.n	801419c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013be2:	2317      	movs	r3, #23
 8013be4:	18fb      	adds	r3, r7, r3
 8013be6:	2203      	movs	r2, #3
 8013be8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013bea:	e2bd      	b.n	8014168 <LoRaMacMibSetRequestConfirm+0x6d0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d00a      	beq.n	8013c0a <LoRaMacMibSetRequestConfirm+0x172>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	0019      	movs	r1, r3
 8013bfa:	2003      	movs	r0, #3
 8013bfc:	f002 f9c4 	bl	8015f88 <LoRaMacCryptoSetKey>
 8013c00:	1e03      	subs	r3, r0, #0
 8013c02:	d100      	bne.n	8013c06 <LoRaMacMibSetRequestConfirm+0x16e>
 8013c04:	e2b2      	b.n	801416c <LoRaMacMibSetRequestConfirm+0x6d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c06:	2311      	movs	r3, #17
 8013c08:	e2c8      	b.n	801419c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c0a:	2317      	movs	r3, #23
 8013c0c:	18fb      	adds	r3, r7, r3
 8013c0e:	2203      	movs	r2, #3
 8013c10:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013c12:	e2ab      	b.n	801416c <LoRaMacMibSetRequestConfirm+0x6d4>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	685b      	ldr	r3, [r3, #4]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d00a      	beq.n	8013c32 <LoRaMacMibSetRequestConfirm+0x19a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	0019      	movs	r1, r3
 8013c22:	207f      	movs	r0, #127	; 0x7f
 8013c24:	f002 f9b0 	bl	8015f88 <LoRaMacCryptoSetKey>
 8013c28:	1e03      	subs	r3, r0, #0
 8013c2a:	d100      	bne.n	8013c2e <LoRaMacMibSetRequestConfirm+0x196>
 8013c2c:	e2a0      	b.n	8014170 <LoRaMacMibSetRequestConfirm+0x6d8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c2e:	2311      	movs	r3, #17
 8013c30:	e2b4      	b.n	801419c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c32:	2317      	movs	r3, #23
 8013c34:	18fb      	adds	r3, r7, r3
 8013c36:	2203      	movs	r2, #3
 8013c38:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013c3a:	e299      	b.n	8014170 <LoRaMacMibSetRequestConfirm+0x6d8>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d00a      	beq.n	8013c5a <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	685b      	ldr	r3, [r3, #4]
 8013c48:	0019      	movs	r1, r3
 8013c4a:	2080      	movs	r0, #128	; 0x80
 8013c4c:	f002 f99c 	bl	8015f88 <LoRaMacCryptoSetKey>
 8013c50:	1e03      	subs	r3, r0, #0
 8013c52:	d100      	bne.n	8013c56 <LoRaMacMibSetRequestConfirm+0x1be>
 8013c54:	e28e      	b.n	8014174 <LoRaMacMibSetRequestConfirm+0x6dc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c56:	2311      	movs	r3, #17
 8013c58:	e2a0      	b.n	801419c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c5a:	2317      	movs	r3, #23
 8013c5c:	18fb      	adds	r3, r7, r3
 8013c5e:	2203      	movs	r2, #3
 8013c60:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013c62:	e287      	b.n	8014174 <LoRaMacMibSetRequestConfirm+0x6dc>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	685b      	ldr	r3, [r3, #4]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d00a      	beq.n	8013c82 <LoRaMacMibSetRequestConfirm+0x1ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	685b      	ldr	r3, [r3, #4]
 8013c70:	0019      	movs	r1, r3
 8013c72:	2081      	movs	r0, #129	; 0x81
 8013c74:	f002 f988 	bl	8015f88 <LoRaMacCryptoSetKey>
 8013c78:	1e03      	subs	r3, r0, #0
 8013c7a:	d100      	bne.n	8013c7e <LoRaMacMibSetRequestConfirm+0x1e6>
 8013c7c:	e27c      	b.n	8014178 <LoRaMacMibSetRequestConfirm+0x6e0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c7e:	2311      	movs	r3, #17
 8013c80:	e28c      	b.n	801419c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c82:	2317      	movs	r3, #23
 8013c84:	18fb      	adds	r3, r7, r3
 8013c86:	2203      	movs	r2, #3
 8013c88:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013c8a:	e275      	b.n	8014178 <LoRaMacMibSetRequestConfirm+0x6e0>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d00a      	beq.n	8013caa <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	685b      	ldr	r3, [r3, #4]
 8013c98:	0019      	movs	r1, r3
 8013c9a:	2082      	movs	r0, #130	; 0x82
 8013c9c:	f002 f974 	bl	8015f88 <LoRaMacCryptoSetKey>
 8013ca0:	1e03      	subs	r3, r0, #0
 8013ca2:	d100      	bne.n	8013ca6 <LoRaMacMibSetRequestConfirm+0x20e>
 8013ca4:	e26a      	b.n	801417c <LoRaMacMibSetRequestConfirm+0x6e4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ca6:	2311      	movs	r3, #17
 8013ca8:	e278      	b.n	801419c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013caa:	2317      	movs	r3, #23
 8013cac:	18fb      	adds	r3, r7, r3
 8013cae:	2203      	movs	r2, #3
 8013cb0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013cb2:	e263      	b.n	801417c <LoRaMacMibSetRequestConfirm+0x6e4>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013cb4:	4b43      	ldr	r3, [pc, #268]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013cb6:	4a45      	ldr	r2, [pc, #276]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013cb8:	589b      	ldr	r3, [r3, r2]
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	7911      	ldrb	r1, [r2, #4]
 8013cbe:	227d      	movs	r2, #125	; 0x7d
 8013cc0:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8013cc2:	4b43      	ldr	r3, [pc, #268]	; (8013dd0 <LoRaMacMibSetRequestConfirm+0x338>)
 8013cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cc6:	4a3f      	ldr	r2, [pc, #252]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013cc8:	4940      	ldr	r1, [pc, #256]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013cca:	5852      	ldr	r2, [r2, r1]
 8013ccc:	217d      	movs	r1, #125	; 0x7d
 8013cce:	5c52      	ldrb	r2, [r2, r1]
 8013cd0:	0010      	movs	r0, r2
 8013cd2:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8013cd4:	4b3e      	ldr	r3, [pc, #248]	; (8013dd0 <LoRaMacMibSetRequestConfirm+0x338>)
 8013cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cd8:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8013cda:	e258      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013cdc:	4b39      	ldr	r3, [pc, #228]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013cde:	4a3b      	ldr	r2, [pc, #236]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013ce0:	589b      	ldr	r3, [r3, r2]
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	7911      	ldrb	r1, [r2, #4]
 8013ce6:	22ca      	movs	r2, #202	; 0xca
 8013ce8:	5499      	strb	r1, [r3, r2]
            break;
 8013cea:	e250      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	7a1b      	ldrb	r3, [r3, #8]
 8013cf0:	b25a      	sxtb	r2, r3
 8013cf2:	2108      	movs	r1, #8
 8013cf4:	187b      	adds	r3, r7, r1
 8013cf6:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013cf8:	4b32      	ldr	r3, [pc, #200]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013cfa:	4a34      	ldr	r2, [pc, #208]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013cfc:	589b      	ldr	r3, [r3, r2]
 8013cfe:	22b9      	movs	r2, #185	; 0xb9
 8013d00:	5c9a      	ldrb	r2, [r3, r2]
 8013d02:	187b      	adds	r3, r7, r1
 8013d04:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 8013d06:	4b2f      	ldr	r3, [pc, #188]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013d08:	4a30      	ldr	r2, [pc, #192]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013d0a:	589b      	ldr	r3, [r3, r2]
 8013d0c:	781b      	ldrb	r3, [r3, #0]
 8013d0e:	1879      	adds	r1, r7, r1
 8013d10:	2207      	movs	r2, #7
 8013d12:	0018      	movs	r0, r3
 8013d14:	f003 f868 	bl	8016de8 <RegionVerify>
 8013d18:	0003      	movs	r3, r0
 8013d1a:	001a      	movs	r2, r3
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	4053      	eors	r3, r2
 8013d20:	b2db      	uxtb	r3, r3
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d004      	beq.n	8013d30 <LoRaMacMibSetRequestConfirm+0x298>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d26:	2317      	movs	r3, #23
 8013d28:	18fb      	adds	r3, r7, r3
 8013d2a:	2203      	movs	r2, #3
 8013d2c:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8013d2e:	e22e      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	685a      	ldr	r2, [r3, #4]
 8013d34:	2108      	movs	r1, #8
 8013d36:	187b      	adds	r3, r7, r1
 8013d38:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 8013d3a:	4b22      	ldr	r3, [pc, #136]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013d3c:	4a23      	ldr	r2, [pc, #140]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013d3e:	589b      	ldr	r3, [r3, r2]
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	1879      	adds	r1, r7, r1
 8013d44:	2200      	movs	r2, #0
 8013d46:	0018      	movs	r0, r3
 8013d48:	f003 f84e 	bl	8016de8 <RegionVerify>
 8013d4c:	0003      	movs	r3, r0
 8013d4e:	001a      	movs	r2, r3
 8013d50:	2301      	movs	r3, #1
 8013d52:	4053      	eors	r3, r2
 8013d54:	b2db      	uxtb	r3, r3
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d004      	beq.n	8013d64 <LoRaMacMibSetRequestConfirm+0x2cc>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d5a:	2317      	movs	r3, #23
 8013d5c:	18fb      	adds	r3, r7, r3
 8013d5e:	2203      	movs	r2, #3
 8013d60:	701a      	strb	r2, [r3, #0]
            break;
 8013d62:	e214      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013d64:	4b17      	ldr	r3, [pc, #92]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013d66:	4a19      	ldr	r2, [pc, #100]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013d68:	589b      	ldr	r3, [r3, r2]
 8013d6a:	21a8      	movs	r1, #168	; 0xa8
 8013d6c:	687a      	ldr	r2, [r7, #4]
 8013d6e:	185b      	adds	r3, r3, r1
 8013d70:	3204      	adds	r2, #4
 8013d72:	ca03      	ldmia	r2!, {r0, r1}
 8013d74:	c303      	stmia	r3!, {r0, r1}
            break;
 8013d76:	e20a      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	7a1b      	ldrb	r3, [r3, #8]
 8013d7c:	b25a      	sxtb	r2, r3
 8013d7e:	2108      	movs	r1, #8
 8013d80:	187b      	adds	r3, r7, r1
 8013d82:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013d84:	4b0f      	ldr	r3, [pc, #60]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013d86:	4a11      	ldr	r2, [pc, #68]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013d88:	589b      	ldr	r3, [r3, r2]
 8013d8a:	22b9      	movs	r2, #185	; 0xb9
 8013d8c:	5c9a      	ldrb	r2, [r3, r2]
 8013d8e:	187b      	adds	r3, r7, r1
 8013d90:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013d92:	4b0c      	ldr	r3, [pc, #48]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013d94:	4a0d      	ldr	r2, [pc, #52]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013d96:	589b      	ldr	r3, [r3, r2]
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	1879      	adds	r1, r7, r1
 8013d9c:	2207      	movs	r2, #7
 8013d9e:	0018      	movs	r0, r3
 8013da0:	f003 f822 	bl	8016de8 <RegionVerify>
 8013da4:	1e03      	subs	r3, r0, #0
 8013da6:	d008      	beq.n	8013dba <LoRaMacMibSetRequestConfirm+0x322>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013da8:	4b06      	ldr	r3, [pc, #24]	; (8013dc4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013daa:	4a08      	ldr	r2, [pc, #32]	; (8013dcc <LoRaMacMibSetRequestConfirm+0x334>)
 8013dac:	589b      	ldr	r3, [r3, r2]
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	3328      	adds	r3, #40	; 0x28
 8013db2:	3204      	adds	r2, #4
 8013db4:	ca03      	ldmia	r2!, {r0, r1}
 8013db6:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013db8:	e1e9      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013dba:	2317      	movs	r3, #23
 8013dbc:	18fb      	adds	r3, r7, r3
 8013dbe:	2203      	movs	r2, #3
 8013dc0:	701a      	strb	r2, [r3, #0]
            break;
 8013dc2:	e1e4      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
 8013dc4:	200005b8 	.word	0x200005b8
 8013dc8:	0801f9d4 	.word	0x0801f9d4
 8013dcc:	00000484 	.word	0x00000484
 8013dd0:	0801fd7c 	.word	0x0801fd7c
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	7a1b      	ldrb	r3, [r3, #8]
 8013dd8:	b25a      	sxtb	r2, r3
 8013dda:	2108      	movs	r1, #8
 8013ddc:	187b      	adds	r3, r7, r1
 8013dde:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013de0:	4bda      	ldr	r3, [pc, #872]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013de2:	4adb      	ldr	r2, [pc, #876]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013de4:	589b      	ldr	r3, [r3, r2]
 8013de6:	22b9      	movs	r2, #185	; 0xb9
 8013de8:	5c9a      	ldrb	r2, [r3, r2]
 8013dea:	187b      	adds	r3, r7, r1
 8013dec:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013dee:	4bd7      	ldr	r3, [pc, #860]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013df0:	4ad7      	ldr	r2, [pc, #860]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013df2:	589b      	ldr	r3, [r3, r2]
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	1879      	adds	r1, r7, r1
 8013df8:	2207      	movs	r2, #7
 8013dfa:	0018      	movs	r0, r3
 8013dfc:	f002 fff4 	bl	8016de8 <RegionVerify>
 8013e00:	1e03      	subs	r3, r0, #0
 8013e02:	d01f      	beq.n	8013e44 <LoRaMacMibSetRequestConfirm+0x3ac>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013e04:	4bd1      	ldr	r3, [pc, #836]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e06:	4ad2      	ldr	r2, [pc, #840]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e08:	589b      	ldr	r3, [r3, r2]
 8013e0a:	21b0      	movs	r1, #176	; 0xb0
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	185b      	adds	r3, r3, r1
 8013e10:	3204      	adds	r2, #4
 8013e12:	ca03      	ldmia	r2!, {r0, r1}
 8013e14:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013e16:	4bcd      	ldr	r3, [pc, #820]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e18:	4acd      	ldr	r2, [pc, #820]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e1a:	589b      	ldr	r3, [r3, r2]
 8013e1c:	227c      	movs	r2, #124	; 0x7c
 8013e1e:	5c9b      	ldrb	r3, [r3, r2]
 8013e20:	2b02      	cmp	r3, #2
 8013e22:	d000      	beq.n	8013e26 <LoRaMacMibSetRequestConfirm+0x38e>
 8013e24:	e1ac      	b.n	8014180 <LoRaMacMibSetRequestConfirm+0x6e8>
 8013e26:	4bc9      	ldr	r3, [pc, #804]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e28:	4ac9      	ldr	r2, [pc, #804]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e2a:	589a      	ldr	r2, [r3, r2]
 8013e2c:	23b2      	movs	r3, #178	; 0xb2
 8013e2e:	005b      	lsls	r3, r3, #1
 8013e30:	5cd3      	ldrb	r3, [r2, r3]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d100      	bne.n	8013e38 <LoRaMacMibSetRequestConfirm+0x3a0>
 8013e36:	e1a3      	b.n	8014180 <LoRaMacMibSetRequestConfirm+0x6e8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013e38:	4bc6      	ldr	r3, [pc, #792]	; (8014154 <LoRaMacMibSetRequestConfirm+0x6bc>)
 8013e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e3c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013e3e:	f7fe fa33 	bl	80122a8 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013e42:	e19d      	b.n	8014180 <LoRaMacMibSetRequestConfirm+0x6e8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e44:	2317      	movs	r3, #23
 8013e46:	18fb      	adds	r3, r7, r3
 8013e48:	2203      	movs	r2, #3
 8013e4a:	701a      	strb	r2, [r3, #0]
            break;
 8013e4c:	e198      	b.n	8014180 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	7a1b      	ldrb	r3, [r3, #8]
 8013e52:	b25a      	sxtb	r2, r3
 8013e54:	2108      	movs	r1, #8
 8013e56:	187b      	adds	r3, r7, r1
 8013e58:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013e5a:	4bbc      	ldr	r3, [pc, #752]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e5c:	4abc      	ldr	r2, [pc, #752]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e5e:	589b      	ldr	r3, [r3, r2]
 8013e60:	22b9      	movs	r2, #185	; 0xb9
 8013e62:	5c9a      	ldrb	r2, [r3, r2]
 8013e64:	187b      	adds	r3, r7, r1
 8013e66:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013e68:	4bb8      	ldr	r3, [pc, #736]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e6a:	4ab9      	ldr	r2, [pc, #740]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e6c:	589b      	ldr	r3, [r3, r2]
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	1879      	adds	r1, r7, r1
 8013e72:	2207      	movs	r2, #7
 8013e74:	0018      	movs	r0, r3
 8013e76:	f002 ffb7 	bl	8016de8 <RegionVerify>
 8013e7a:	1e03      	subs	r3, r0, #0
 8013e7c:	d008      	beq.n	8013e90 <LoRaMacMibSetRequestConfirm+0x3f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013e7e:	4bb3      	ldr	r3, [pc, #716]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e80:	4ab3      	ldr	r2, [pc, #716]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e82:	589b      	ldr	r3, [r3, r2]
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	3330      	adds	r3, #48	; 0x30
 8013e88:	3204      	adds	r2, #4
 8013e8a:	ca03      	ldmia	r2!, {r0, r1}
 8013e8c:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013e8e:	e17e      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e90:	2317      	movs	r3, #23
 8013e92:	18fb      	adds	r3, r7, r3
 8013e94:	2203      	movs	r2, #3
 8013e96:	701a      	strb	r2, [r3, #0]
            break;
 8013e98:	e179      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	685a      	ldr	r2, [r3, #4]
 8013e9e:	210c      	movs	r1, #12
 8013ea0:	187b      	adds	r3, r7, r1
 8013ea2:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013ea4:	187b      	adds	r3, r7, r1
 8013ea6:	2201      	movs	r2, #1
 8013ea8:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013eaa:	4ba8      	ldr	r3, [pc, #672]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013eac:	4aa8      	ldr	r2, [pc, #672]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013eae:	589b      	ldr	r3, [r3, r2]
 8013eb0:	781b      	ldrb	r3, [r3, #0]
 8013eb2:	187a      	adds	r2, r7, r1
 8013eb4:	0011      	movs	r1, r2
 8013eb6:	0018      	movs	r0, r3
 8013eb8:	f002 ffc8 	bl	8016e4c <RegionChanMaskSet>
 8013ebc:	0003      	movs	r3, r0
 8013ebe:	001a      	movs	r2, r3
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	4053      	eors	r3, r2
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d100      	bne.n	8013ecc <LoRaMacMibSetRequestConfirm+0x434>
 8013eca:	e15b      	b.n	8014184 <LoRaMacMibSetRequestConfirm+0x6ec>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ecc:	2317      	movs	r3, #23
 8013ece:	18fb      	adds	r3, r7, r3
 8013ed0:	2203      	movs	r2, #3
 8013ed2:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013ed4:	e156      	b.n	8014184 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	685a      	ldr	r2, [r3, #4]
 8013eda:	210c      	movs	r1, #12
 8013edc:	187b      	adds	r3, r7, r1
 8013ede:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013ee0:	187b      	adds	r3, r7, r1
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013ee6:	4b99      	ldr	r3, [pc, #612]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ee8:	4a99      	ldr	r2, [pc, #612]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013eea:	589b      	ldr	r3, [r3, r2]
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	187a      	adds	r2, r7, r1
 8013ef0:	0011      	movs	r1, r2
 8013ef2:	0018      	movs	r0, r3
 8013ef4:	f002 ffaa 	bl	8016e4c <RegionChanMaskSet>
 8013ef8:	0003      	movs	r3, r0
 8013efa:	001a      	movs	r2, r3
 8013efc:	2301      	movs	r3, #1
 8013efe:	4053      	eors	r3, r2
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d100      	bne.n	8013f08 <LoRaMacMibSetRequestConfirm+0x470>
 8013f06:	e13f      	b.n	8014188 <LoRaMacMibSetRequestConfirm+0x6f0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f08:	2317      	movs	r3, #23
 8013f0a:	18fb      	adds	r3, r7, r3
 8013f0c:	2203      	movs	r2, #3
 8013f0e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013f10:	e13a      	b.n	8014188 <LoRaMacMibSetRequestConfirm+0x6f0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	791b      	ldrb	r3, [r3, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d00b      	beq.n	8013f32 <LoRaMacMibSetRequestConfirm+0x49a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013f1e:	2b0f      	cmp	r3, #15
 8013f20:	d807      	bhi.n	8013f32 <LoRaMacMibSetRequestConfirm+0x49a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013f22:	4b8a      	ldr	r3, [pc, #552]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f24:	4a8a      	ldr	r2, [pc, #552]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f26:	589b      	ldr	r3, [r3, r2]
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	7911      	ldrb	r1, [r2, #4]
 8013f2c:	22a4      	movs	r2, #164	; 0xa4
 8013f2e:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f30:	e12d      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f32:	2317      	movs	r3, #23
 8013f34:	18fb      	adds	r3, r7, r3
 8013f36:	2203      	movs	r2, #3
 8013f38:	701a      	strb	r2, [r3, #0]
            break;
 8013f3a:	e128      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013f3c:	4b83      	ldr	r3, [pc, #524]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f3e:	4a84      	ldr	r2, [pc, #528]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f40:	589a      	ldr	r2, [r3, r2]
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	2190      	movs	r1, #144	; 0x90
 8013f48:	5053      	str	r3, [r2, r1]
            break;
 8013f4a:	e120      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013f4c:	4b7f      	ldr	r3, [pc, #508]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f4e:	4a80      	ldr	r2, [pc, #512]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f50:	589a      	ldr	r2, [r3, r2]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	685b      	ldr	r3, [r3, #4]
 8013f56:	2194      	movs	r1, #148	; 0x94
 8013f58:	5053      	str	r3, [r2, r1]
            break;
 8013f5a:	e118      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013f5c:	4b7b      	ldr	r3, [pc, #492]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f5e:	4a7c      	ldr	r2, [pc, #496]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f60:	589a      	ldr	r2, [r3, r2]
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	685b      	ldr	r3, [r3, #4]
 8013f66:	2198      	movs	r1, #152	; 0x98
 8013f68:	5053      	str	r3, [r2, r1]
            break;
 8013f6a:	e110      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013f6c:	4b77      	ldr	r3, [pc, #476]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f6e:	4a78      	ldr	r2, [pc, #480]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f70:	589a      	ldr	r2, [r3, r2]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	219c      	movs	r1, #156	; 0x9c
 8013f78:	5053      	str	r3, [r2, r1]
            break;
 8013f7a:	e108      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013f7c:	4b73      	ldr	r3, [pc, #460]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f7e:	4a74      	ldr	r2, [pc, #464]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f80:	589a      	ldr	r2, [r3, r2]
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	685b      	ldr	r3, [r3, #4]
 8013f86:	21a0      	movs	r1, #160	; 0xa0
 8013f88:	5053      	str	r3, [r2, r1]
            break;
 8013f8a:	e100      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2204      	movs	r2, #4
 8013f90:	569a      	ldrsb	r2, [r3, r2]
 8013f92:	2408      	movs	r4, #8
 8013f94:	193b      	adds	r3, r7, r4
 8013f96:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8013f98:	4b6c      	ldr	r3, [pc, #432]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f9a:	4a6d      	ldr	r2, [pc, #436]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f9c:	589b      	ldr	r3, [r3, r2]
 8013f9e:	781b      	ldrb	r3, [r3, #0]
 8013fa0:	1939      	adds	r1, r7, r4
 8013fa2:	2206      	movs	r2, #6
 8013fa4:	0018      	movs	r0, r3
 8013fa6:	f002 ff1f 	bl	8016de8 <RegionVerify>
 8013faa:	1e03      	subs	r3, r0, #0
 8013fac:	d007      	beq.n	8013fbe <LoRaMacMibSetRequestConfirm+0x526>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013fae:	4b67      	ldr	r3, [pc, #412]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fb0:	4a67      	ldr	r2, [pc, #412]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fb2:	589b      	ldr	r3, [r3, r2]
 8013fb4:	193a      	adds	r2, r7, r4
 8013fb6:	7812      	ldrb	r2, [r2, #0]
 8013fb8:	b252      	sxtb	r2, r2
 8013fba:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013fbc:	e0e7      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013fbe:	2317      	movs	r3, #23
 8013fc0:	18fb      	adds	r3, r7, r3
 8013fc2:	2203      	movs	r2, #3
 8013fc4:	701a      	strb	r2, [r3, #0]
            break;
 8013fc6:	e0e2      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2204      	movs	r2, #4
 8013fcc:	569a      	ldrsb	r2, [r3, r2]
 8013fce:	2408      	movs	r4, #8
 8013fd0:	193b      	adds	r3, r7, r4
 8013fd2:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013fd4:	4b5d      	ldr	r3, [pc, #372]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fd6:	4a5e      	ldr	r2, [pc, #376]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fd8:	589b      	ldr	r3, [r3, r2]
 8013fda:	22b8      	movs	r2, #184	; 0xb8
 8013fdc:	5c9a      	ldrb	r2, [r3, r2]
 8013fde:	193b      	adds	r3, r7, r4
 8013fe0:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8013fe2:	4b5a      	ldr	r3, [pc, #360]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fe4:	4a5a      	ldr	r2, [pc, #360]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fe6:	589b      	ldr	r3, [r3, r2]
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	1939      	adds	r1, r7, r4
 8013fec:	2205      	movs	r2, #5
 8013fee:	0018      	movs	r0, r3
 8013ff0:	f002 fefa 	bl	8016de8 <RegionVerify>
 8013ff4:	1e03      	subs	r3, r0, #0
 8013ff6:	d008      	beq.n	801400a <LoRaMacMibSetRequestConfirm+0x572>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013ff8:	4b54      	ldr	r3, [pc, #336]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ffa:	4a55      	ldr	r2, [pc, #340]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ffc:	589b      	ldr	r3, [r3, r2]
 8013ffe:	193a      	adds	r2, r7, r4
 8014000:	2100      	movs	r1, #0
 8014002:	5651      	ldrsb	r1, [r2, r1]
 8014004:	2285      	movs	r2, #133	; 0x85
 8014006:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014008:	e0c1      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801400a:	2317      	movs	r3, #23
 801400c:	18fb      	adds	r3, r7, r3
 801400e:	2203      	movs	r2, #3
 8014010:	701a      	strb	r2, [r3, #0]
            break;
 8014012:	e0bc      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2204      	movs	r2, #4
 8014018:	569a      	ldrsb	r2, [r3, r2]
 801401a:	2408      	movs	r4, #8
 801401c:	193b      	adds	r3, r7, r4
 801401e:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014020:	4b4a      	ldr	r3, [pc, #296]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014022:	4a4b      	ldr	r2, [pc, #300]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014024:	589b      	ldr	r3, [r3, r2]
 8014026:	781b      	ldrb	r3, [r3, #0]
 8014028:	1939      	adds	r1, r7, r4
 801402a:	220a      	movs	r2, #10
 801402c:	0018      	movs	r0, r3
 801402e:	f002 fedb 	bl	8016de8 <RegionVerify>
 8014032:	1e03      	subs	r3, r0, #0
 8014034:	d007      	beq.n	8014046 <LoRaMacMibSetRequestConfirm+0x5ae>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8014036:	4b45      	ldr	r3, [pc, #276]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014038:	4a45      	ldr	r2, [pc, #276]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801403a:	589b      	ldr	r3, [r3, r2]
 801403c:	193a      	adds	r2, r7, r4
 801403e:	7812      	ldrb	r2, [r2, #0]
 8014040:	b252      	sxtb	r2, r2
 8014042:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014044:	e0a3      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014046:	2317      	movs	r3, #23
 8014048:	18fb      	adds	r3, r7, r3
 801404a:	2203      	movs	r2, #3
 801404c:	701a      	strb	r2, [r3, #0]
            break;
 801404e:	e09e      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2204      	movs	r2, #4
 8014054:	569a      	ldrsb	r2, [r3, r2]
 8014056:	2408      	movs	r4, #8
 8014058:	193b      	adds	r3, r7, r4
 801405a:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 801405c:	4b3b      	ldr	r3, [pc, #236]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 801405e:	4a3c      	ldr	r2, [pc, #240]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014060:	589b      	ldr	r3, [r3, r2]
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	1939      	adds	r1, r7, r4
 8014066:	2209      	movs	r2, #9
 8014068:	0018      	movs	r0, r3
 801406a:	f002 febd 	bl	8016de8 <RegionVerify>
 801406e:	1e03      	subs	r3, r0, #0
 8014070:	d008      	beq.n	8014084 <LoRaMacMibSetRequestConfirm+0x5ec>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8014072:	4b36      	ldr	r3, [pc, #216]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014074:	4a36      	ldr	r2, [pc, #216]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014076:	589b      	ldr	r3, [r3, r2]
 8014078:	193a      	adds	r2, r7, r4
 801407a:	2100      	movs	r1, #0
 801407c:	5651      	ldrsb	r1, [r2, r1]
 801407e:	2284      	movs	r2, #132	; 0x84
 8014080:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014082:	e084      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014084:	2317      	movs	r3, #23
 8014086:	18fb      	adds	r3, r7, r3
 8014088:	2203      	movs	r2, #3
 801408a:	701a      	strb	r2, [r3, #0]
            break;
 801408c:	e07f      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801408e:	4b2f      	ldr	r3, [pc, #188]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014090:	4a2f      	ldr	r2, [pc, #188]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014092:	589b      	ldr	r3, [r3, r2]
 8014094:	687a      	ldr	r2, [r7, #4]
 8014096:	6852      	ldr	r2, [r2, #4]
 8014098:	609a      	str	r2, [r3, #8]
 801409a:	4a2c      	ldr	r2, [pc, #176]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 801409c:	492c      	ldr	r1, [pc, #176]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801409e:	5852      	ldr	r2, [r2, r1]
 80140a0:	689b      	ldr	r3, [r3, #8]
 80140a2:	2188      	movs	r1, #136	; 0x88
 80140a4:	5053      	str	r3, [r2, r1]
            break;
 80140a6:	e072      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80140a8:	4b28      	ldr	r3, [pc, #160]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 80140aa:	4a29      	ldr	r2, [pc, #164]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80140ac:	589b      	ldr	r3, [r3, r2]
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	7912      	ldrb	r2, [r2, #4]
 80140b2:	731a      	strb	r2, [r3, #12]
 80140b4:	4a25      	ldr	r2, [pc, #148]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 80140b6:	4926      	ldr	r1, [pc, #152]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80140b8:	5852      	ldr	r2, [r2, r1]
 80140ba:	7b19      	ldrb	r1, [r3, #12]
 80140bc:	238c      	movs	r3, #140	; 0x8c
 80140be:	54d1      	strb	r1, [r2, r3]
            break;
 80140c0:	e065      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80140c2:	4b22      	ldr	r3, [pc, #136]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 80140c4:	4a22      	ldr	r2, [pc, #136]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80140c6:	589a      	ldr	r2, [r3, r2]
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	685b      	ldr	r3, [r3, #4]
 80140cc:	21c0      	movs	r1, #192	; 0xc0
 80140ce:	5053      	str	r3, [r2, r1]
            break;
 80140d0:	e05d      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80140d2:	4b1e      	ldr	r3, [pc, #120]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 80140d4:	4a1e      	ldr	r2, [pc, #120]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80140d6:	589b      	ldr	r3, [r3, r2]
 80140d8:	687a      	ldr	r2, [r7, #4]
 80140da:	6852      	ldr	r2, [r2, #4]
 80140dc:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 80140de:	e056      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d009      	beq.n	80140fc <LoRaMacMibSetRequestConfirm+0x664>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	2217      	movs	r2, #23
 80140ee:	18bc      	adds	r4, r7, r2
 80140f0:	0018      	movs	r0, r3
 80140f2:	f7fe fc1b 	bl	801292c <RestoreCtxs>
 80140f6:	0003      	movs	r3, r0
 80140f8:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80140fa:	e048      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140fc:	2317      	movs	r3, #23
 80140fe:	18fb      	adds	r3, r7, r3
 8014100:	2203      	movs	r2, #3
 8014102:	701a      	strb	r2, [r3, #0]
            break;
 8014104:	e043      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	799b      	ldrb	r3, [r3, #6]
 801410a:	2b01      	cmp	r3, #1
 801410c:	d810      	bhi.n	8014130 <LoRaMacMibSetRequestConfirm+0x698>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 801410e:	4b0f      	ldr	r3, [pc, #60]	; (801414c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014110:	4a0f      	ldr	r2, [pc, #60]	; (8014150 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014112:	5899      	ldr	r1, [r3, r2]
 8014114:	23b0      	movs	r3, #176	; 0xb0
 8014116:	005a      	lsls	r2, r3, #1
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	685b      	ldr	r3, [r3, #4]
 8014122:	0018      	movs	r0, r3
 8014124:	f001 fe3a 	bl	8015d9c <LoRaMacCryptoSetLrWanVersion>
 8014128:	1e03      	subs	r3, r0, #0
 801412a:	d02f      	beq.n	801418c <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801412c:	2311      	movs	r3, #17
 801412e:	e035      	b.n	801419c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014130:	2317      	movs	r3, #23
 8014132:	18fb      	adds	r3, r7, r3
 8014134:	2203      	movs	r2, #3
 8014136:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014138:	e028      	b.n	801418c <LoRaMacMibSetRequestConfirm+0x6f4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801413a:	2317      	movs	r3, #23
 801413c:	18fc      	adds	r4, r7, r3
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	0018      	movs	r0, r3
 8014142:	f000 fc8f 	bl	8014a64 <LoRaMacMibClassBSetRequestConfirm>
 8014146:	0003      	movs	r3, r0
 8014148:	7023      	strb	r3, [r4, #0]
            break;
 801414a:	e020      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
 801414c:	200005b8 	.word	0x200005b8
 8014150:	00000484 	.word	0x00000484
 8014154:	0801fd7c 	.word	0x0801fd7c
            break;
 8014158:	46c0      	nop			; (mov r8, r8)
 801415a:	e018      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801415c:	46c0      	nop			; (mov r8, r8)
 801415e:	e016      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014160:	46c0      	nop			; (mov r8, r8)
 8014162:	e014      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014164:	46c0      	nop			; (mov r8, r8)
 8014166:	e012      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014168:	46c0      	nop			; (mov r8, r8)
 801416a:	e010      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801416c:	46c0      	nop			; (mov r8, r8)
 801416e:	e00e      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014170:	46c0      	nop			; (mov r8, r8)
 8014172:	e00c      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014174:	46c0      	nop			; (mov r8, r8)
 8014176:	e00a      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014178:	46c0      	nop			; (mov r8, r8)
 801417a:	e008      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801417c:	46c0      	nop			; (mov r8, r8)
 801417e:	e006      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014180:	46c0      	nop			; (mov r8, r8)
 8014182:	e004      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014184:	46c0      	nop			; (mov r8, r8)
 8014186:	e002      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014188:	46c0      	nop			; (mov r8, r8)
 801418a:	e000      	b.n	801418e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801418c:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 801418e:	f7fe fe19 	bl	8012dc4 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 8014192:	f7fe fe0f 	bl	8012db4 <EventMacNvmCtxChanged>
    return status;
 8014196:	2317      	movs	r3, #23
 8014198:	18fb      	adds	r3, r7, r3
 801419a:	781b      	ldrb	r3, [r3, #0]
}
 801419c:	0018      	movs	r0, r3
 801419e:	46bd      	mov	sp, r7
 80141a0:	b007      	add	sp, #28
 80141a2:	bd90      	pop	{r4, r7, pc}

080141a4 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80141a4:	b5b0      	push	{r4, r5, r7, lr}
 80141a6:	b086      	sub	sp, #24
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80141ac:	2317      	movs	r3, #23
 80141ae:	18fb      	adds	r3, r7, r3
 80141b0:	2202      	movs	r2, #2
 80141b2:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80141b4:	230c      	movs	r3, #12
 80141b6:	18fb      	adds	r3, r7, r3
 80141b8:	2200      	movs	r2, #0
 80141ba:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d101      	bne.n	80141c6 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80141c2:	2303      	movs	r3, #3
 80141c4:	e133      	b.n	801442e <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 80141c6:	f7fe fe49 	bl	8012e5c <LoRaMacIsBusy>
 80141ca:	1e03      	subs	r3, r0, #0
 80141cc:	d001      	beq.n	80141d2 <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 80141ce:	2301      	movs	r3, #1
 80141d0:	e12d      	b.n	801442e <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80141d2:	f001 fa0b 	bl	80155ec <LoRaMacConfirmQueueIsFull>
 80141d6:	1e03      	subs	r3, r0, #0
 80141d8:	d001      	beq.n	80141de <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 80141da:	2301      	movs	r3, #1
 80141dc:	e127      	b.n	801442e <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80141de:	f001 f9fb 	bl	80155d8 <LoRaMacConfirmQueueGetCnt>
 80141e2:	1e03      	subs	r3, r0, #0
 80141e4:	d105      	bne.n	80141f2 <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80141e6:	4b94      	ldr	r3, [pc, #592]	; (8014438 <LoRaMacMlmeRequest+0x294>)
 80141e8:	2214      	movs	r2, #20
 80141ea:	2100      	movs	r1, #0
 80141ec:	0018      	movs	r0, r3
 80141ee:	f005 fa51 	bl	8019694 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80141f2:	4b92      	ldr	r3, [pc, #584]	; (801443c <LoRaMacMlmeRequest+0x298>)
 80141f4:	4a92      	ldr	r2, [pc, #584]	; (8014440 <LoRaMacMlmeRequest+0x29c>)
 80141f6:	2101      	movs	r1, #1
 80141f8:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80141fa:	4b90      	ldr	r3, [pc, #576]	; (801443c <LoRaMacMlmeRequest+0x298>)
 80141fc:	4a91      	ldr	r2, [pc, #580]	; (8014444 <LoRaMacMlmeRequest+0x2a0>)
 80141fe:	5c99      	ldrb	r1, [r3, r2]
 8014200:	2004      	movs	r0, #4
 8014202:	4301      	orrs	r1, r0
 8014204:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	781a      	ldrb	r2, [r3, #0]
 801420a:	2110      	movs	r1, #16
 801420c:	187b      	adds	r3, r7, r1
 801420e:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014210:	187b      	adds	r3, r7, r1
 8014212:	2201      	movs	r2, #1
 8014214:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8014216:	187b      	adds	r3, r7, r1
 8014218:	2200      	movs	r2, #0
 801421a:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	2b0e      	cmp	r3, #14
 8014222:	d900      	bls.n	8014226 <LoRaMacMlmeRequest+0x82>
 8014224:	e0d4      	b.n	80143d0 <LoRaMacMlmeRequest+0x22c>
 8014226:	009a      	lsls	r2, r3, #2
 8014228:	4b87      	ldr	r3, [pc, #540]	; (8014448 <LoRaMacMlmeRequest+0x2a4>)
 801422a:	18d3      	adds	r3, r2, r3
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8014230:	4a82      	ldr	r2, [pc, #520]	; (801443c <LoRaMacMlmeRequest+0x298>)
 8014232:	23d0      	movs	r3, #208	; 0xd0
 8014234:	009b      	lsls	r3, r3, #2
 8014236:	58d3      	ldr	r3, [r2, r3]
 8014238:	2220      	movs	r2, #32
 801423a:	4013      	ands	r3, r2
 801423c:	d001      	beq.n	8014242 <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 801423e:	2301      	movs	r3, #1
 8014240:	e0f5      	b.n	801442e <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 8014242:	f7fd feff 	bl	8012044 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014246:	4b7d      	ldr	r3, [pc, #500]	; (801443c <LoRaMacMlmeRequest+0x298>)
 8014248:	4a80      	ldr	r2, [pc, #512]	; (801444c <LoRaMacMlmeRequest+0x2a8>)
 801424a:	589b      	ldr	r3, [r3, r2]
 801424c:	7818      	ldrb	r0, [r3, #0]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	791b      	ldrb	r3, [r3, #4]
 8014252:	b259      	sxtb	r1, r3
 8014254:	4b79      	ldr	r3, [pc, #484]	; (801443c <LoRaMacMlmeRequest+0x298>)
 8014256:	4a7d      	ldr	r2, [pc, #500]	; (801444c <LoRaMacMlmeRequest+0x2a8>)
 8014258:	589c      	ldr	r4, [r3, r2]
 801425a:	2200      	movs	r2, #0
 801425c:	f002 fedb 	bl	8017016 <RegionAlternateDr>
 8014260:	0003      	movs	r3, r0
 8014262:	001a      	movs	r2, r3
 8014264:	2385      	movs	r3, #133	; 0x85
 8014266:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014268:	2310      	movs	r3, #16
 801426a:	18fb      	adds	r3, r7, r3
 801426c:	2207      	movs	r2, #7
 801426e:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 8014270:	2517      	movs	r5, #23
 8014272:	197c      	adds	r4, r7, r5
 8014274:	20ff      	movs	r0, #255	; 0xff
 8014276:	f7fd fbab 	bl	80119d0 <SendReJoinReq>
 801427a:	0003      	movs	r3, r0
 801427c:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 801427e:	197b      	adds	r3, r7, r5
 8014280:	781b      	ldrb	r3, [r3, #0]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d100      	bne.n	8014288 <LoRaMacMlmeRequest+0xe4>
 8014286:	e0a5      	b.n	80143d4 <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014288:	4b6c      	ldr	r3, [pc, #432]	; (801443c <LoRaMacMlmeRequest+0x298>)
 801428a:	4a70      	ldr	r2, [pc, #448]	; (801444c <LoRaMacMlmeRequest+0x2a8>)
 801428c:	589b      	ldr	r3, [r3, r2]
 801428e:	7818      	ldrb	r0, [r3, #0]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	791b      	ldrb	r3, [r3, #4]
 8014294:	b259      	sxtb	r1, r3
 8014296:	4b69      	ldr	r3, [pc, #420]	; (801443c <LoRaMacMlmeRequest+0x298>)
 8014298:	4a6c      	ldr	r2, [pc, #432]	; (801444c <LoRaMacMlmeRequest+0x2a8>)
 801429a:	589c      	ldr	r4, [r3, r2]
 801429c:	2201      	movs	r2, #1
 801429e:	f002 feba 	bl	8017016 <RegionAlternateDr>
 80142a2:	0003      	movs	r3, r0
 80142a4:	001a      	movs	r2, r3
 80142a6:	2385      	movs	r3, #133	; 0x85
 80142a8:	54e2      	strb	r2, [r4, r3]
            }
            break;
 80142aa:	e093      	b.n	80143d4 <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80142ac:	2417      	movs	r4, #23
 80142ae:	193b      	adds	r3, r7, r4
 80142b0:	2200      	movs	r2, #0
 80142b2:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80142b4:	230c      	movs	r3, #12
 80142b6:	18fb      	adds	r3, r7, r3
 80142b8:	2200      	movs	r2, #0
 80142ba:	0019      	movs	r1, r3
 80142bc:	2002      	movs	r0, #2
 80142be:	f000 fd7d 	bl	8014dbc <LoRaMacCommandsAddCmd>
 80142c2:	1e03      	subs	r3, r0, #0
 80142c4:	d100      	bne.n	80142c8 <LoRaMacMlmeRequest+0x124>
 80142c6:	e087      	b.n	80143d8 <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80142c8:	193b      	adds	r3, r7, r4
 80142ca:	2213      	movs	r2, #19
 80142cc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80142ce:	e083      	b.n	80143d8 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	889b      	ldrh	r3, [r3, #4]
 80142d4:	2217      	movs	r2, #23
 80142d6:	18bc      	adds	r4, r7, r2
 80142d8:	0018      	movs	r0, r3
 80142da:	f7fe fa5d 	bl	8012798 <SetTxContinuousWave>
 80142de:	0003      	movs	r3, r0
 80142e0:	7023      	strb	r3, [r4, #0]
            break;
 80142e2:	e080      	b.n	80143e6 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	8898      	ldrh	r0, [r3, #4]
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6899      	ldr	r1, [r3, #8]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	7b1b      	ldrb	r3, [r3, #12]
 80142f0:	2217      	movs	r2, #23
 80142f2:	18bc      	adds	r4, r7, r2
 80142f4:	001a      	movs	r2, r3
 80142f6:	f7fe fa9b 	bl	8012830 <SetTxContinuousWave1>
 80142fa:	0003      	movs	r3, r0
 80142fc:	7023      	strb	r3, [r4, #0]
            break;
 80142fe:	e072      	b.n	80143e6 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014300:	2417      	movs	r4, #23
 8014302:	193b      	adds	r3, r7, r4
 8014304:	2200      	movs	r2, #0
 8014306:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014308:	230c      	movs	r3, #12
 801430a:	18fb      	adds	r3, r7, r3
 801430c:	2200      	movs	r2, #0
 801430e:	0019      	movs	r1, r3
 8014310:	200d      	movs	r0, #13
 8014312:	f000 fd53 	bl	8014dbc <LoRaMacCommandsAddCmd>
 8014316:	1e03      	subs	r3, r0, #0
 8014318:	d060      	beq.n	80143dc <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801431a:	193b      	adds	r3, r7, r4
 801431c:	2213      	movs	r2, #19
 801431e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014320:	e05c      	b.n	80143dc <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8014322:	4b46      	ldr	r3, [pc, #280]	; (801443c <LoRaMacMlmeRequest+0x298>)
 8014324:	4a49      	ldr	r2, [pc, #292]	; (801444c <LoRaMacMlmeRequest+0x2a8>)
 8014326:	589b      	ldr	r3, [r3, r2]
 8014328:	227c      	movs	r2, #124	; 0x7c
 801432a:	5c9b      	ldrb	r3, [r3, r2]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d157      	bne.n	80143e0 <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014330:	2416      	movs	r4, #22
 8014332:	193b      	adds	r3, r7, r4
 8014334:	687a      	ldr	r2, [r7, #4]
 8014336:	7912      	ldrb	r2, [r2, #4]
 8014338:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	791b      	ldrb	r3, [r3, #4]
 801433e:	075b      	lsls	r3, r3, #29
 8014340:	0f5b      	lsrs	r3, r3, #29
 8014342:	b2db      	uxtb	r3, r3
 8014344:	0018      	movs	r0, r3
 8014346:	f000 fb65 	bl	8014a14 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801434a:	210c      	movs	r1, #12
 801434c:	187b      	adds	r3, r7, r1
 801434e:	193a      	adds	r2, r7, r4
 8014350:	7812      	ldrb	r2, [r2, #0]
 8014352:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8014354:	2417      	movs	r4, #23
 8014356:	193b      	adds	r3, r7, r4
 8014358:	2200      	movs	r2, #0
 801435a:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801435c:	187b      	adds	r3, r7, r1
 801435e:	2201      	movs	r2, #1
 8014360:	0019      	movs	r1, r3
 8014362:	2010      	movs	r0, #16
 8014364:	f000 fd2a 	bl	8014dbc <LoRaMacCommandsAddCmd>
 8014368:	1e03      	subs	r3, r0, #0
 801436a:	d039      	beq.n	80143e0 <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801436c:	193b      	adds	r3, r7, r4
 801436e:	2213      	movs	r2, #19
 8014370:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8014372:	e035      	b.n	80143e0 <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014374:	2417      	movs	r4, #23
 8014376:	193b      	adds	r3, r7, r4
 8014378:	2200      	movs	r2, #0
 801437a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801437c:	230c      	movs	r3, #12
 801437e:	18fb      	adds	r3, r7, r3
 8014380:	2200      	movs	r2, #0
 8014382:	0019      	movs	r1, r3
 8014384:	2012      	movs	r0, #18
 8014386:	f000 fd19 	bl	8014dbc <LoRaMacCommandsAddCmd>
 801438a:	1e03      	subs	r3, r0, #0
 801438c:	d02a      	beq.n	80143e4 <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801438e:	193b      	adds	r3, r7, r4
 8014390:	2213      	movs	r2, #19
 8014392:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014394:	e026      	b.n	80143e4 <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014396:	2310      	movs	r3, #16
 8014398:	18fb      	adds	r3, r7, r3
 801439a:	2201      	movs	r2, #1
 801439c:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801439e:	f000 faf7 	bl	8014990 <LoRaMacClassBIsAcquisitionInProgress>
 80143a2:	0003      	movs	r3, r0
 80143a4:	001a      	movs	r2, r3
 80143a6:	2301      	movs	r3, #1
 80143a8:	4053      	eors	r3, r2
 80143aa:	b2db      	uxtb	r3, r3
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d00a      	beq.n	80143c6 <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80143b0:	2000      	movs	r0, #0
 80143b2:	f000 facf 	bl	8014954 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80143b6:	2000      	movs	r0, #0
 80143b8:	f000 faf0 	bl	801499c <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80143bc:	2317      	movs	r3, #23
 80143be:	18fb      	adds	r3, r7, r3
 80143c0:	2200      	movs	r2, #0
 80143c2:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80143c4:	e00f      	b.n	80143e6 <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 80143c6:	2317      	movs	r3, #23
 80143c8:	18fb      	adds	r3, r7, r3
 80143ca:	2201      	movs	r2, #1
 80143cc:	701a      	strb	r2, [r3, #0]
            break;
 80143ce:	e00a      	b.n	80143e6 <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 80143d0:	46c0      	nop			; (mov r8, r8)
 80143d2:	e008      	b.n	80143e6 <LoRaMacMlmeRequest+0x242>
            break;
 80143d4:	46c0      	nop			; (mov r8, r8)
 80143d6:	e006      	b.n	80143e6 <LoRaMacMlmeRequest+0x242>
            break;
 80143d8:	46c0      	nop			; (mov r8, r8)
 80143da:	e004      	b.n	80143e6 <LoRaMacMlmeRequest+0x242>
            break;
 80143dc:	46c0      	nop			; (mov r8, r8)
 80143de:	e002      	b.n	80143e6 <LoRaMacMlmeRequest+0x242>
            break;
 80143e0:	46c0      	nop			; (mov r8, r8)
 80143e2:	e000      	b.n	80143e6 <LoRaMacMlmeRequest+0x242>
            break;
 80143e4:	46c0      	nop			; (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80143e6:	4a15      	ldr	r2, [pc, #84]	; (801443c <LoRaMacMlmeRequest+0x298>)
 80143e8:	2391      	movs	r3, #145	; 0x91
 80143ea:	00db      	lsls	r3, r3, #3
 80143ec:	58d2      	ldr	r2, [r2, r3]
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80143f2:	2317      	movs	r3, #23
 80143f4:	18fb      	adds	r3, r7, r3
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d00e      	beq.n	801441a <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80143fc:	f001 f8ec 	bl	80155d8 <LoRaMacConfirmQueueGetCnt>
 8014400:	1e03      	subs	r3, r0, #0
 8014402:	d111      	bne.n	8014428 <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 8014404:	4b0d      	ldr	r3, [pc, #52]	; (801443c <LoRaMacMlmeRequest+0x298>)
 8014406:	4a12      	ldr	r2, [pc, #72]	; (8014450 <LoRaMacMlmeRequest+0x2ac>)
 8014408:	2100      	movs	r1, #0
 801440a:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801440c:	4b0b      	ldr	r3, [pc, #44]	; (801443c <LoRaMacMlmeRequest+0x298>)
 801440e:	4a0d      	ldr	r2, [pc, #52]	; (8014444 <LoRaMacMlmeRequest+0x2a0>)
 8014410:	5c99      	ldrb	r1, [r3, r2]
 8014412:	2004      	movs	r0, #4
 8014414:	4381      	bics	r1, r0
 8014416:	5499      	strb	r1, [r3, r2]
 8014418:	e006      	b.n	8014428 <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801441a:	2310      	movs	r3, #16
 801441c:	18fb      	adds	r3, r7, r3
 801441e:	0018      	movs	r0, r3
 8014420:	f000 ff6c 	bl	80152fc <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8014424:	f7fe fcc6 	bl	8012db4 <EventMacNvmCtxChanged>
    }
    return status;
 8014428:	2317      	movs	r3, #23
 801442a:	18fb      	adds	r3, r7, r3
 801442c:	781b      	ldrb	r3, [r3, #0]
}
 801442e:	0018      	movs	r0, r3
 8014430:	46bd      	mov	sp, r7
 8014432:	b006      	add	sp, #24
 8014434:	bdb0      	pop	{r4, r5, r7, pc}
 8014436:	46c0      	nop			; (mov r8, r8)
 8014438:	20000a08 	.word	0x20000a08
 801443c:	200005b8 	.word	0x200005b8
 8014440:	00000451 	.word	0x00000451
 8014444:	00000481 	.word	0x00000481
 8014448:	0801fa74 	.word	0x0801fa74
 801444c:	00000484 	.word	0x00000484
 8014450:	00000414 	.word	0x00000414

08014454 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014456:	b08d      	sub	sp, #52	; 0x34
 8014458:	af02      	add	r7, sp, #8
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	000a      	movs	r2, r1
 801445e:	1cfb      	adds	r3, r7, #3
 8014460:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014462:	2327      	movs	r3, #39	; 0x27
 8014464:	18fb      	adds	r3, r7, r3
 8014466:	2202      	movs	r2, #2
 8014468:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801446a:	2326      	movs	r3, #38	; 0x26
 801446c:	18fb      	adds	r3, r7, r3
 801446e:	2200      	movs	r2, #0
 8014470:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014472:	231d      	movs	r3, #29
 8014474:	18fb      	adds	r3, r7, r3
 8014476:	2200      	movs	r2, #0
 8014478:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 801447a:	231c      	movs	r3, #28
 801447c:	18fb      	adds	r3, r7, r3
 801447e:	2200      	movs	r2, #0
 8014480:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d101      	bne.n	801448c <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014488:	2303      	movs	r3, #3
 801448a:	e11b      	b.n	80146c4 <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 801448c:	f7fe fce6 	bl	8012e5c <LoRaMacIsBusy>
 8014490:	1e03      	subs	r3, r0, #0
 8014492:	d001      	beq.n	8014498 <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8014494:	2301      	movs	r3, #1
 8014496:	e115      	b.n	80146c4 <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 8014498:	230c      	movs	r3, #12
 801449a:	18fb      	adds	r3, r7, r3
 801449c:	2200      	movs	r2, #0
 801449e:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80144a0:	4b8a      	ldr	r3, [pc, #552]	; (80146cc <LoRaMacMcpsRequest+0x278>)
 80144a2:	2214      	movs	r2, #20
 80144a4:	2100      	movs	r1, #0
 80144a6:	0018      	movs	r0, r3
 80144a8:	f005 f8f4 	bl	8019694 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80144ac:	4b88      	ldr	r3, [pc, #544]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 80144ae:	4a89      	ldr	r2, [pc, #548]	; (80146d4 <LoRaMacMcpsRequest+0x280>)
 80144b0:	2101      	movs	r1, #1
 80144b2:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80144b4:	4b86      	ldr	r3, [pc, #536]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 80144b6:	4a88      	ldr	r2, [pc, #544]	; (80146d8 <LoRaMacMcpsRequest+0x284>)
 80144b8:	2101      	movs	r1, #1
 80144ba:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	781b      	ldrb	r3, [r3, #0]
 80144c0:	2b03      	cmp	r3, #3
 80144c2:	d056      	beq.n	8014572 <LoRaMacMcpsRequest+0x11e>
 80144c4:	dc72      	bgt.n	80145ac <LoRaMacMcpsRequest+0x158>
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d002      	beq.n	80144d0 <LoRaMacMcpsRequest+0x7c>
 80144ca:	2b01      	cmp	r3, #1
 80144cc:	d024      	beq.n	8014518 <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80144ce:	e06d      	b.n	80145ac <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 80144d0:	231c      	movs	r3, #28
 80144d2:	18fb      	adds	r3, r7, r3
 80144d4:	2201      	movs	r2, #1
 80144d6:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 80144d8:	4b7d      	ldr	r3, [pc, #500]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 80144da:	4a80      	ldr	r2, [pc, #512]	; (80146dc <LoRaMacMcpsRequest+0x288>)
 80144dc:	2101      	movs	r1, #1
 80144de:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80144e0:	230c      	movs	r3, #12
 80144e2:	18fb      	adds	r3, r7, r3
 80144e4:	781a      	ldrb	r2, [r3, #0]
 80144e6:	211f      	movs	r1, #31
 80144e8:	400a      	ands	r2, r1
 80144ea:	1c11      	adds	r1, r2, #0
 80144ec:	2240      	movs	r2, #64	; 0x40
 80144ee:	430a      	orrs	r2, r1
 80144f0:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80144f2:	2326      	movs	r3, #38	; 0x26
 80144f4:	18fb      	adds	r3, r7, r3
 80144f6:	687a      	ldr	r2, [r7, #4]
 80144f8:	7912      	ldrb	r2, [r2, #4]
 80144fa:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	689b      	ldr	r3, [r3, #8]
 8014500:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8014502:	231e      	movs	r3, #30
 8014504:	18fb      	adds	r3, r7, r3
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	8992      	ldrh	r2, [r2, #12]
 801450a:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801450c:	231d      	movs	r3, #29
 801450e:	18fb      	adds	r3, r7, r3
 8014510:	687a      	ldr	r2, [r7, #4]
 8014512:	7b92      	ldrb	r2, [r2, #14]
 8014514:	701a      	strb	r2, [r3, #0]
            break;
 8014516:	e04a      	b.n	80145ae <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8014518:	231c      	movs	r3, #28
 801451a:	18fb      	adds	r3, r7, r3
 801451c:	2201      	movs	r2, #1
 801451e:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	7bdb      	ldrb	r3, [r3, #15]
 8014524:	1c1a      	adds	r2, r3, #0
 8014526:	b2d3      	uxtb	r3, r2
 8014528:	2b08      	cmp	r3, #8
 801452a:	d901      	bls.n	8014530 <LoRaMacMcpsRequest+0xdc>
 801452c:	2308      	movs	r3, #8
 801452e:	1c1a      	adds	r2, r3, #0
 8014530:	b2d1      	uxtb	r1, r2
 8014532:	4b67      	ldr	r3, [pc, #412]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 8014534:	4a69      	ldr	r2, [pc, #420]	; (80146dc <LoRaMacMcpsRequest+0x288>)
 8014536:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014538:	230c      	movs	r3, #12
 801453a:	18fb      	adds	r3, r7, r3
 801453c:	781a      	ldrb	r2, [r3, #0]
 801453e:	211f      	movs	r1, #31
 8014540:	400a      	ands	r2, r1
 8014542:	1c11      	adds	r1, r2, #0
 8014544:	2280      	movs	r2, #128	; 0x80
 8014546:	4252      	negs	r2, r2
 8014548:	430a      	orrs	r2, r1
 801454a:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 801454c:	2326      	movs	r3, #38	; 0x26
 801454e:	18fb      	adds	r3, r7, r3
 8014550:	687a      	ldr	r2, [r7, #4]
 8014552:	7912      	ldrb	r2, [r2, #4]
 8014554:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	689b      	ldr	r3, [r3, #8]
 801455a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 801455c:	231e      	movs	r3, #30
 801455e:	18fb      	adds	r3, r7, r3
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	8992      	ldrh	r2, [r2, #12]
 8014564:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8014566:	231d      	movs	r3, #29
 8014568:	18fb      	adds	r3, r7, r3
 801456a:	687a      	ldr	r2, [r7, #4]
 801456c:	7b92      	ldrb	r2, [r2, #14]
 801456e:	701a      	strb	r2, [r3, #0]
            break;
 8014570:	e01d      	b.n	80145ae <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8014572:	231c      	movs	r3, #28
 8014574:	18fb      	adds	r3, r7, r3
 8014576:	2201      	movs	r2, #1
 8014578:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 801457a:	4b55      	ldr	r3, [pc, #340]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 801457c:	4a57      	ldr	r2, [pc, #348]	; (80146dc <LoRaMacMcpsRequest+0x288>)
 801457e:	2101      	movs	r1, #1
 8014580:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014582:	230c      	movs	r3, #12
 8014584:	18fb      	adds	r3, r7, r3
 8014586:	781a      	ldrb	r2, [r3, #0]
 8014588:	2120      	movs	r1, #32
 801458a:	4249      	negs	r1, r1
 801458c:	430a      	orrs	r2, r1
 801458e:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	685b      	ldr	r3, [r3, #4]
 8014594:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8014596:	231e      	movs	r3, #30
 8014598:	18fb      	adds	r3, r7, r3
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	8912      	ldrh	r2, [r2, #8]
 801459e:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80145a0:	231d      	movs	r3, #29
 80145a2:	18fb      	adds	r3, r7, r3
 80145a4:	687a      	ldr	r2, [r7, #4]
 80145a6:	7a92      	ldrb	r2, [r2, #10]
 80145a8:	701a      	strb	r2, [r3, #0]
            break;
 80145aa:	e000      	b.n	80145ae <LoRaMacMcpsRequest+0x15a>
            break;
 80145ac:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80145ae:	2114      	movs	r1, #20
 80145b0:	187b      	adds	r3, r7, r1
 80145b2:	2202      	movs	r2, #2
 80145b4:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80145b6:	4b46      	ldr	r3, [pc, #280]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 80145b8:	4a49      	ldr	r2, [pc, #292]	; (80146e0 <LoRaMacMcpsRequest+0x28c>)
 80145ba:	589b      	ldr	r3, [r3, r2]
 80145bc:	22b8      	movs	r2, #184	; 0xb8
 80145be:	5c9a      	ldrb	r2, [r3, r2]
 80145c0:	187b      	adds	r3, r7, r1
 80145c2:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80145c4:	4b42      	ldr	r3, [pc, #264]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 80145c6:	4a46      	ldr	r2, [pc, #280]	; (80146e0 <LoRaMacMcpsRequest+0x28c>)
 80145c8:	589b      	ldr	r3, [r3, r2]
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	187a      	adds	r2, r7, r1
 80145ce:	0011      	movs	r1, r2
 80145d0:	0018      	movs	r0, r3
 80145d2:	f002 fba2 	bl	8016d1a <RegionGetPhyParam>
 80145d6:	0003      	movs	r3, r0
 80145d8:	001a      	movs	r2, r3
 80145da:	2110      	movs	r1, #16
 80145dc:	187b      	adds	r3, r7, r1
 80145de:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80145e0:	187b      	adds	r3, r7, r1
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	b259      	sxtb	r1, r3
 80145e6:	231d      	movs	r3, #29
 80145e8:	18fa      	adds	r2, r7, r3
 80145ea:	18fb      	adds	r3, r7, r3
 80145ec:	1c0c      	adds	r4, r1, #0
 80145ee:	781b      	ldrb	r3, [r3, #0]
 80145f0:	b258      	sxtb	r0, r3
 80145f2:	b261      	sxtb	r1, r4
 80145f4:	4288      	cmp	r0, r1
 80145f6:	da00      	bge.n	80145fa <LoRaMacMcpsRequest+0x1a6>
 80145f8:	1c23      	adds	r3, r4, #0
 80145fa:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 80145fc:	231c      	movs	r3, #28
 80145fe:	18fb      	adds	r3, r7, r3
 8014600:	781b      	ldrb	r3, [r3, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d055      	beq.n	80146b2 <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8014606:	4b32      	ldr	r3, [pc, #200]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 8014608:	4a35      	ldr	r2, [pc, #212]	; (80146e0 <LoRaMacMcpsRequest+0x28c>)
 801460a:	589b      	ldr	r3, [r3, r2]
 801460c:	227e      	movs	r2, #126	; 0x7e
 801460e:	5c9b      	ldrb	r3, [r3, r2]
 8014610:	2201      	movs	r2, #1
 8014612:	4053      	eors	r3, r2
 8014614:	b2db      	uxtb	r3, r3
 8014616:	2b00      	cmp	r3, #0
 8014618:	d022      	beq.n	8014660 <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 801461a:	2408      	movs	r4, #8
 801461c:	193b      	adds	r3, r7, r4
 801461e:	221d      	movs	r2, #29
 8014620:	18ba      	adds	r2, r7, r2
 8014622:	7812      	ldrb	r2, [r2, #0]
 8014624:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014626:	4b2a      	ldr	r3, [pc, #168]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 8014628:	4a2d      	ldr	r2, [pc, #180]	; (80146e0 <LoRaMacMcpsRequest+0x28c>)
 801462a:	589b      	ldr	r3, [r3, r2]
 801462c:	22b8      	movs	r2, #184	; 0xb8
 801462e:	5c9a      	ldrb	r2, [r3, r2]
 8014630:	193b      	adds	r3, r7, r4
 8014632:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8014634:	4b26      	ldr	r3, [pc, #152]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 8014636:	4a2a      	ldr	r2, [pc, #168]	; (80146e0 <LoRaMacMcpsRequest+0x28c>)
 8014638:	589b      	ldr	r3, [r3, r2]
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	1939      	adds	r1, r7, r4
 801463e:	2205      	movs	r2, #5
 8014640:	0018      	movs	r0, r3
 8014642:	f002 fbd1 	bl	8016de8 <RegionVerify>
 8014646:	1e03      	subs	r3, r0, #0
 8014648:	d008      	beq.n	801465c <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 801464a:	4b21      	ldr	r3, [pc, #132]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 801464c:	4a24      	ldr	r2, [pc, #144]	; (80146e0 <LoRaMacMcpsRequest+0x28c>)
 801464e:	589b      	ldr	r3, [r3, r2]
 8014650:	193a      	adds	r2, r7, r4
 8014652:	2100      	movs	r1, #0
 8014654:	5651      	ldrsb	r1, [r2, r1]
 8014656:	2285      	movs	r2, #133	; 0x85
 8014658:	5499      	strb	r1, [r3, r2]
 801465a:	e001      	b.n	8014660 <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 801465c:	2303      	movs	r3, #3
 801465e:	e031      	b.n	80146c4 <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014660:	2627      	movs	r6, #39	; 0x27
 8014662:	19bc      	adds	r4, r7, r6
 8014664:	231e      	movs	r3, #30
 8014666:	18fb      	adds	r3, r7, r3
 8014668:	881d      	ldrh	r5, [r3, #0]
 801466a:	6a3a      	ldr	r2, [r7, #32]
 801466c:	2326      	movs	r3, #38	; 0x26
 801466e:	18fb      	adds	r3, r7, r3
 8014670:	7819      	ldrb	r1, [r3, #0]
 8014672:	230c      	movs	r3, #12
 8014674:	18f8      	adds	r0, r7, r3
 8014676:	1cfb      	adds	r3, r7, #3
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	9300      	str	r3, [sp, #0]
 801467c:	002b      	movs	r3, r5
 801467e:	f7fd f86d 	bl	801175c <Send>
 8014682:	0003      	movs	r3, r0
 8014684:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 8014686:	19bb      	adds	r3, r7, r6
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d10d      	bne.n	80146aa <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	7819      	ldrb	r1, [r3, #0]
 8014692:	4b0f      	ldr	r3, [pc, #60]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 8014694:	4a13      	ldr	r2, [pc, #76]	; (80146e4 <LoRaMacMcpsRequest+0x290>)
 8014696:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014698:	4b0d      	ldr	r3, [pc, #52]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 801469a:	4a13      	ldr	r2, [pc, #76]	; (80146e8 <LoRaMacMcpsRequest+0x294>)
 801469c:	5c99      	ldrb	r1, [r3, r2]
 801469e:	2001      	movs	r0, #1
 80146a0:	4301      	orrs	r1, r0
 80146a2:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 80146a4:	f7fe fb86 	bl	8012db4 <EventMacNvmCtxChanged>
 80146a8:	e003      	b.n	80146b2 <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80146aa:	4b09      	ldr	r3, [pc, #36]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 80146ac:	4a0f      	ldr	r2, [pc, #60]	; (80146ec <LoRaMacMcpsRequest+0x298>)
 80146ae:	2100      	movs	r1, #0
 80146b0:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80146b2:	4a07      	ldr	r2, [pc, #28]	; (80146d0 <LoRaMacMcpsRequest+0x27c>)
 80146b4:	2391      	movs	r3, #145	; 0x91
 80146b6:	00db      	lsls	r3, r3, #3
 80146b8:	58d2      	ldr	r2, [r2, r3]
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	611a      	str	r2, [r3, #16]

    return status;
 80146be:	2327      	movs	r3, #39	; 0x27
 80146c0:	18fb      	adds	r3, r7, r3
 80146c2:	781b      	ldrb	r3, [r3, #0]
}
 80146c4:	0018      	movs	r0, r3
 80146c6:	46bd      	mov	sp, r7
 80146c8:	b00b      	add	sp, #44	; 0x2c
 80146ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146cc:	200009f4 	.word	0x200009f4
 80146d0:	200005b8 	.word	0x200005b8
 80146d4:	0000043d 	.word	0x0000043d
 80146d8:	00000412 	.word	0x00000412
 80146dc:	00000411 	.word	0x00000411
 80146e0:	00000484 	.word	0x00000484
 80146e4:	0000043c 	.word	0x0000043c
 80146e8:	00000481 	.word	0x00000481
 80146ec:	00000414 	.word	0x00000414

080146f0 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b084      	sub	sp, #16
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	0002      	movs	r2, r0
 80146f8:	1dfb      	adds	r3, r7, #7
 80146fa:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80146fc:	210c      	movs	r1, #12
 80146fe:	187b      	adds	r3, r7, r1
 8014700:	1dfa      	adds	r2, r7, #7
 8014702:	7812      	ldrb	r2, [r2, #0]
 8014704:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8014706:	4b0b      	ldr	r3, [pc, #44]	; (8014734 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014708:	4a0b      	ldr	r2, [pc, #44]	; (8014738 <LoRaMacTestSetDutyCycleOn+0x48>)
 801470a:	589b      	ldr	r3, [r3, r2]
 801470c:	781b      	ldrb	r3, [r3, #0]
 801470e:	1879      	adds	r1, r7, r1
 8014710:	220f      	movs	r2, #15
 8014712:	0018      	movs	r0, r3
 8014714:	f002 fb68 	bl	8016de8 <RegionVerify>
 8014718:	1e03      	subs	r3, r0, #0
 801471a:	d006      	beq.n	801472a <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 801471c:	4b05      	ldr	r3, [pc, #20]	; (8014734 <LoRaMacTestSetDutyCycleOn+0x44>)
 801471e:	4a06      	ldr	r2, [pc, #24]	; (8014738 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014720:	589b      	ldr	r3, [r3, r2]
 8014722:	1dfa      	adds	r2, r7, #7
 8014724:	21c9      	movs	r1, #201	; 0xc9
 8014726:	7812      	ldrb	r2, [r2, #0]
 8014728:	545a      	strb	r2, [r3, r1]
    }
}
 801472a:	46c0      	nop			; (mov r8, r8)
 801472c:	46bd      	mov	sp, r7
 801472e:	b004      	add	sp, #16
 8014730:	bd80      	pop	{r7, pc}
 8014732:	46c0      	nop			; (mov r8, r8)
 8014734:	200005b8 	.word	0x200005b8
 8014738:	00000484 	.word	0x00000484

0801473c <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801473c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801473e:	b08b      	sub	sp, #44	; 0x2c
 8014740:	af00      	add	r7, sp, #0
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	60b9      	str	r1, [r7, #8]
 8014746:	607a      	str	r2, [r7, #4]
 8014748:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801474a:	2327      	movs	r3, #39	; 0x27
 801474c:	18fb      	adds	r3, r7, r3
 801474e:	2200      	movs	r2, #0
 8014750:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8014752:	2426      	movs	r4, #38	; 0x26
 8014754:	193b      	adds	r3, r7, r4
 8014756:	68fa      	ldr	r2, [r7, #12]
 8014758:	7c12      	ldrb	r2, [r2, #16]
 801475a:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 801475c:	2325      	movs	r3, #37	; 0x25
 801475e:	18fb      	adds	r3, r7, r3
 8014760:	68fa      	ldr	r2, [r7, #12]
 8014762:	7c52      	ldrb	r2, [r2, #17]
 8014764:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	689a      	ldr	r2, [r3, #8]
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	795b      	ldrb	r3, [r3, #5]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d100      	bne.n	8014778 <CalcNextV10X+0x3c>
 8014776:	e0a5      	b.n	80148c4 <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014778:	211c      	movs	r1, #28
 801477a:	187b      	adds	r3, r7, r1
 801477c:	2202      	movs	r2, #2
 801477e:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	7c9a      	ldrb	r2, [r3, #18]
 8014784:	187b      	adds	r3, r7, r1
 8014786:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	7cdb      	ldrb	r3, [r3, #19]
 801478c:	187a      	adds	r2, r7, r1
 801478e:	0011      	movs	r1, r2
 8014790:	0018      	movs	r0, r3
 8014792:	f002 fac2 	bl	8016d1a <RegionGetPhyParam>
 8014796:	0003      	movs	r3, r0
 8014798:	001a      	movs	r2, r3
 801479a:	2118      	movs	r1, #24
 801479c:	187b      	adds	r3, r7, r1
 801479e:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 80147a0:	187b      	adds	r3, r7, r1
 80147a2:	681a      	ldr	r2, [r3, #0]
 80147a4:	2124      	movs	r1, #36	; 0x24
 80147a6:	187b      	adds	r3, r7, r1
 80147a8:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 80147aa:	193a      	adds	r2, r7, r4
 80147ac:	187b      	adds	r3, r7, r1
 80147ae:	1939      	adds	r1, r7, r4
 80147b0:	780c      	ldrb	r4, [r1, #0]
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	b258      	sxtb	r0, r3
 80147b6:	b261      	sxtb	r1, r4
 80147b8:	4288      	cmp	r0, r1
 80147ba:	da00      	bge.n	80147be <CalcNextV10X+0x82>
 80147bc:	1c23      	adds	r3, r4, #0
 80147be:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 80147c0:	2326      	movs	r3, #38	; 0x26
 80147c2:	18fa      	adds	r2, r7, r3
 80147c4:	2324      	movs	r3, #36	; 0x24
 80147c6:	18fb      	adds	r3, r7, r3
 80147c8:	7812      	ldrb	r2, [r2, #0]
 80147ca:	b252      	sxtb	r2, r2
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	b25b      	sxtb	r3, r3
 80147d0:	429a      	cmp	r2, r3
 80147d2:	d107      	bne.n	80147e4 <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	2200      	movs	r2, #0
 80147d8:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80147da:	2327      	movs	r3, #39	; 0x27
 80147dc:	18fb      	adds	r3, r7, r3
 80147de:	2200      	movs	r2, #0
 80147e0:	701a      	strb	r2, [r3, #0]
 80147e2:	e06f      	b.n	80148c4 <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	689b      	ldr	r3, [r3, #8]
 80147e8:	68fa      	ldr	r2, [r7, #12]
 80147ea:	8992      	ldrh	r2, [r2, #12]
 80147ec:	4293      	cmp	r3, r2
 80147ee:	d304      	bcc.n	80147fa <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 80147f0:	2327      	movs	r3, #39	; 0x27
 80147f2:	18fb      	adds	r3, r7, r3
 80147f4:	2201      	movs	r2, #1
 80147f6:	701a      	strb	r2, [r3, #0]
 80147f8:	e003      	b.n	8014802 <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 80147fa:	2327      	movs	r3, #39	; 0x27
 80147fc:	18fb      	adds	r3, r7, r3
 80147fe:	2200      	movs	r2, #0
 8014800:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	689b      	ldr	r3, [r3, #8]
 8014806:	68fa      	ldr	r2, [r7, #12]
 8014808:	8992      	ldrh	r2, [r2, #12]
 801480a:	0011      	movs	r1, r2
 801480c:	68fa      	ldr	r2, [r7, #12]
 801480e:	89d2      	ldrh	r2, [r2, #14]
 8014810:	188a      	adds	r2, r1, r2
 8014812:	4293      	cmp	r3, r2
 8014814:	d356      	bcc.n	80148c4 <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8014816:	241c      	movs	r4, #28
 8014818:	193b      	adds	r3, r7, r4
 801481a:	2208      	movs	r2, #8
 801481c:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	7cdb      	ldrb	r3, [r3, #19]
 8014822:	193a      	adds	r2, r7, r4
 8014824:	0011      	movs	r1, r2
 8014826:	0018      	movs	r0, r3
 8014828:	f002 fa77 	bl	8016d1a <RegionGetPhyParam>
 801482c:	0003      	movs	r3, r0
 801482e:	001a      	movs	r2, r3
 8014830:	2518      	movs	r5, #24
 8014832:	197b      	adds	r3, r7, r5
 8014834:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 8014836:	197b      	adds	r3, r7, r5
 8014838:	681a      	ldr	r2, [r3, #0]
 801483a:	2325      	movs	r3, #37	; 0x25
 801483c:	18fb      	adds	r3, r7, r3
 801483e:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	689a      	ldr	r2, [r3, #8]
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	89db      	ldrh	r3, [r3, #14]
 8014848:	0019      	movs	r1, r3
 801484a:	0010      	movs	r0, r2
 801484c:	f7eb fcf4 	bl	8000238 <__aeabi_uidivmod>
 8014850:	000b      	movs	r3, r1
 8014852:	2b01      	cmp	r3, #1
 8014854:	d136      	bne.n	80148c4 <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014856:	193b      	adds	r3, r7, r4
 8014858:	2222      	movs	r2, #34	; 0x22
 801485a:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 801485c:	193b      	adds	r3, r7, r4
 801485e:	2626      	movs	r6, #38	; 0x26
 8014860:	19ba      	adds	r2, r7, r6
 8014862:	7812      	ldrb	r2, [r2, #0]
 8014864:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	7c9a      	ldrb	r2, [r3, #18]
 801486a:	193b      	adds	r3, r7, r4
 801486c:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	7cdb      	ldrb	r3, [r3, #19]
 8014872:	193a      	adds	r2, r7, r4
 8014874:	0011      	movs	r1, r2
 8014876:	0018      	movs	r0, r3
 8014878:	f002 fa4f 	bl	8016d1a <RegionGetPhyParam>
 801487c:	0003      	movs	r3, r0
 801487e:	001a      	movs	r2, r3
 8014880:	197b      	adds	r3, r7, r5
 8014882:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8014884:	197b      	adds	r3, r7, r5
 8014886:	681a      	ldr	r2, [r3, #0]
 8014888:	19bb      	adds	r3, r7, r6
 801488a:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 801488c:	19ba      	adds	r2, r7, r6
 801488e:	2324      	movs	r3, #36	; 0x24
 8014890:	18fb      	adds	r3, r7, r3
 8014892:	7812      	ldrb	r2, [r2, #0]
 8014894:	b252      	sxtb	r2, r2
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	b25b      	sxtb	r3, r3
 801489a:	429a      	cmp	r2, r3
 801489c:	d112      	bne.n	80148c4 <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801489e:	2327      	movs	r3, #39	; 0x27
 80148a0:	18fb      	adds	r3, r7, r3
 80148a2:	2200      	movs	r2, #0
 80148a4:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	791b      	ldrb	r3, [r3, #4]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d00a      	beq.n	80148c4 <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80148ae:	2110      	movs	r1, #16
 80148b0:	187b      	adds	r3, r7, r1
 80148b2:	2202      	movs	r2, #2
 80148b4:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	7cdb      	ldrb	r3, [r3, #19]
 80148ba:	187a      	adds	r2, r7, r1
 80148bc:	0011      	movs	r1, r2
 80148be:	0018      	movs	r0, r3
 80148c0:	f002 fa67 	bl	8016d92 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	2226      	movs	r2, #38	; 0x26
 80148c8:	18ba      	adds	r2, r7, r2
 80148ca:	7812      	ldrb	r2, [r2, #0]
 80148cc:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2225      	movs	r2, #37	; 0x25
 80148d2:	18ba      	adds	r2, r7, r2
 80148d4:	7812      	ldrb	r2, [r2, #0]
 80148d6:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80148d8:	2327      	movs	r3, #39	; 0x27
 80148da:	18fb      	adds	r3, r7, r3
 80148dc:	781b      	ldrb	r3, [r3, #0]
}
 80148de:	0018      	movs	r0, r3
 80148e0:	46bd      	mov	sp, r7
 80148e2:	b00b      	add	sp, #44	; 0x2c
 80148e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080148e6 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80148e6:	b580      	push	{r7, lr}
 80148e8:	b084      	sub	sp, #16
 80148ea:	af00      	add	r7, sp, #0
 80148ec:	60f8      	str	r0, [r7, #12]
 80148ee:	60b9      	str	r1, [r7, #8]
 80148f0:	607a      	str	r2, [r7, #4]
 80148f2:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	789b      	ldrb	r3, [r3, #2]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d107      	bne.n	801490c <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	687a      	ldr	r2, [r7, #4]
 8014900:	68b9      	ldr	r1, [r7, #8]
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	f7ff ff1a 	bl	801473c <CalcNextV10X>
 8014908:	0003      	movs	r3, r0
 801490a:	e000      	b.n	801490e <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801490c:	2300      	movs	r3, #0
}
 801490e:	0018      	movs	r0, r3
 8014910:	46bd      	mov	sp, r7
 8014912:	b004      	add	sp, #16
 8014914:	bd80      	pop	{r7, pc}

08014916 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 8014916:	b580      	push	{r7, lr}
 8014918:	b084      	sub	sp, #16
 801491a:	af00      	add	r7, sp, #0
 801491c:	60f8      	str	r0, [r7, #12]
 801491e:	60b9      	str	r1, [r7, #8]
 8014920:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014922:	46c0      	nop			; (mov r8, r8)
 8014924:	46bd      	mov	sp, r7
 8014926:	b004      	add	sp, #16
 8014928:	bd80      	pop	{r7, pc}

0801492a <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 801492a:	b580      	push	{r7, lr}
 801492c:	b082      	sub	sp, #8
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 8014932:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8014934:	0018      	movs	r0, r3
 8014936:	46bd      	mov	sp, r7
 8014938:	b002      	add	sp, #8
 801493a:	bd80      	pop	{r7, pc}

0801493c <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b082      	sub	sp, #8
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2200      	movs	r2, #0
 8014948:	601a      	str	r2, [r3, #0]
    return NULL;
 801494a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801494c:	0018      	movs	r0, r3
 801494e:	46bd      	mov	sp, r7
 8014950:	b002      	add	sp, #8
 8014952:	bd80      	pop	{r7, pc}

08014954 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af00      	add	r7, sp, #0
 801495a:	0002      	movs	r2, r0
 801495c:	1dfb      	adds	r3, r7, #7
 801495e:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014960:	46c0      	nop			; (mov r8, r8)
 8014962:	46bd      	mov	sp, r7
 8014964:	b002      	add	sp, #8
 8014966:	bd80      	pop	{r7, pc}

08014968 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b082      	sub	sp, #8
 801496c:	af00      	add	r7, sp, #0
 801496e:	0002      	movs	r2, r0
 8014970:	1dfb      	adds	r3, r7, #7
 8014972:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014974:	46c0      	nop			; (mov r8, r8)
 8014976:	46bd      	mov	sp, r7
 8014978:	b002      	add	sp, #8
 801497a:	bd80      	pop	{r7, pc}

0801497c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
 8014982:	0002      	movs	r2, r0
 8014984:	1dfb      	adds	r3, r7, #7
 8014986:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014988:	46c0      	nop			; (mov r8, r8)
 801498a:	46bd      	mov	sp, r7
 801498c:	b002      	add	sp, #8
 801498e:	bd80      	pop	{r7, pc}

08014990 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014990:	b580      	push	{r7, lr}
 8014992:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014994:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014996:	0018      	movs	r0, r3
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}

0801499c <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b082      	sub	sp, #8
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80149a4:	46c0      	nop			; (mov r8, r8)
 80149a6:	46bd      	mov	sp, r7
 80149a8:	b002      	add	sp, #8
 80149aa:	bd80      	pop	{r7, pc}

080149ac <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80149b4:	46c0      	nop			; (mov r8, r8)
 80149b6:	46bd      	mov	sp, r7
 80149b8:	b002      	add	sp, #8
 80149ba:	bd80      	pop	{r7, pc}

080149bc <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b082      	sub	sp, #8
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80149c4:	46c0      	nop			; (mov r8, r8)
 80149c6:	46bd      	mov	sp, r7
 80149c8:	b002      	add	sp, #8
 80149ca:	bd80      	pop	{r7, pc}

080149cc <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b082      	sub	sp, #8
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	000a      	movs	r2, r1
 80149d6:	1cbb      	adds	r3, r7, #2
 80149d8:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80149da:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80149dc:	0018      	movs	r0, r3
 80149de:	46bd      	mov	sp, r7
 80149e0:	b002      	add	sp, #8
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80149e8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80149ea:	0018      	movs	r0, r3
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80149f4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80149f6:	0018      	movs	r0, r3
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}

080149fc <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014a00:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a02:	0018      	movs	r0, r3
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014a0c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a0e:	0018      	movs	r0, r3
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}

08014a14 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b082      	sub	sp, #8
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	0002      	movs	r2, r0
 8014a1c:	1dfb      	adds	r3, r7, #7
 8014a1e:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a20:	46c0      	nop			; (mov r8, r8)
 8014a22:	46bd      	mov	sp, r7
 8014a24:	b002      	add	sp, #8
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a2c:	46c0      	nop			; (mov r8, r8)
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}

08014a32 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8014a32:	b580      	push	{r7, lr}
 8014a34:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a36:	46c0      	nop			; (mov r8, r8)
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}

08014a3c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	0002      	movs	r2, r0
 8014a44:	1dfb      	adds	r3, r7, #7
 8014a46:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014a48:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a4a:	0018      	movs	r0, r3
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	b002      	add	sp, #8
 8014a50:	bd80      	pop	{r7, pc}

08014a52 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8014a52:	b580      	push	{r7, lr}
 8014a54:	b082      	sub	sp, #8
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014a5a:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a5c:	0018      	movs	r0, r3
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	b002      	add	sp, #8
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014a6c:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a6e:	0018      	movs	r0, r3
 8014a70:	46bd      	mov	sp, r7
 8014a72:	b002      	add	sp, #8
 8014a74:	bd80      	pop	{r7, pc}

08014a76 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014a76:	b580      	push	{r7, lr}
 8014a78:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a7a:	46c0      	nop			; (mov r8, r8)
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}

08014a80 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	0002      	movs	r2, r0
 8014a88:	6039      	str	r1, [r7, #0]
 8014a8a:	1dfb      	adds	r3, r7, #7
 8014a8c:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 8014a8e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a90:	0018      	movs	r0, r3
 8014a92:	46bd      	mov	sp, r7
 8014a94:	b002      	add	sp, #8
 8014a96:	bd80      	pop	{r7, pc}

08014a98 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	603a      	str	r2, [r7, #0]
 8014aa0:	1dbb      	adds	r3, r7, #6
 8014aa2:	1c02      	adds	r2, r0, #0
 8014aa4:	801a      	strh	r2, [r3, #0]
 8014aa6:	1d7b      	adds	r3, r7, #5
 8014aa8:	1c0a      	adds	r2, r1, #0
 8014aaa:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014aac:	46c0      	nop			; (mov r8, r8)
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	b002      	add	sp, #8
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014ab8:	46c0      	nop			; (mov r8, r8)
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}

08014abe <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8014abe:	b580      	push	{r7, lr}
 8014ac0:	b082      	sub	sp, #8
 8014ac2:	af00      	add	r7, sp, #0
 8014ac4:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 8014ac6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014ac8:	0018      	movs	r0, r3
 8014aca:	46bd      	mov	sp, r7
 8014acc:	b002      	add	sp, #8
 8014ace:	bd80      	pop	{r7, pc}

08014ad0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8014ad8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014ada:	0018      	movs	r0, r3
 8014adc:	46bd      	mov	sp, r7
 8014ade:	b002      	add	sp, #8
 8014ae0:	bd80      	pop	{r7, pc}

08014ae2 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8014ae2:	b580      	push	{r7, lr}
 8014ae4:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014ae6:	46c0      	nop			; (mov r8, r8)
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}

08014aec <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014af0:	46c0      	nop			; (mov r8, r8)
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}

08014af6 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8014af6:	b580      	push	{r7, lr}
 8014af8:	b084      	sub	sp, #16
 8014afa:	af00      	add	r7, sp, #0
 8014afc:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014b02:	230e      	movs	r3, #14
 8014b04:	18fb      	adds	r3, r7, r3
 8014b06:	2200      	movs	r2, #0
 8014b08:	801a      	strh	r2, [r3, #0]
 8014b0a:	e00f      	b.n	8014b2c <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 8014b0c:	230e      	movs	r3, #14
 8014b0e:	18fb      	adds	r3, r7, r3
 8014b10:	881b      	ldrh	r3, [r3, #0]
 8014b12:	68ba      	ldr	r2, [r7, #8]
 8014b14:	18d3      	adds	r3, r2, r3
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d001      	beq.n	8014b20 <IsSlotFree+0x2a>
        {
            return false;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	e00b      	b.n	8014b38 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014b20:	210e      	movs	r1, #14
 8014b22:	187b      	adds	r3, r7, r1
 8014b24:	881a      	ldrh	r2, [r3, #0]
 8014b26:	187b      	adds	r3, r7, r1
 8014b28:	3201      	adds	r2, #1
 8014b2a:	801a      	strh	r2, [r3, #0]
 8014b2c:	230e      	movs	r3, #14
 8014b2e:	18fb      	adds	r3, r7, r3
 8014b30:	881b      	ldrh	r3, [r3, #0]
 8014b32:	2b0f      	cmp	r3, #15
 8014b34:	d9ea      	bls.n	8014b0c <IsSlotFree+0x16>
        }
    }
    return true;
 8014b36:	2301      	movs	r3, #1
}
 8014b38:	0018      	movs	r0, r3
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	b004      	add	sp, #16
 8014b3e:	bd80      	pop	{r7, pc}

08014b40 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b082      	sub	sp, #8
 8014b44:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014b46:	1dfb      	adds	r3, r7, #7
 8014b48:	2200      	movs	r2, #0
 8014b4a:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014b4c:	e00a      	b.n	8014b64 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 8014b4e:	1dfb      	adds	r3, r7, #7
 8014b50:	781a      	ldrb	r2, [r3, #0]
 8014b52:	1dfb      	adds	r3, r7, #7
 8014b54:	3201      	adds	r2, #1
 8014b56:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014b58:	1dfb      	adds	r3, r7, #7
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	2b0f      	cmp	r3, #15
 8014b5e:	d101      	bne.n	8014b64 <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 8014b60:	2300      	movs	r3, #0
 8014b62:	e017      	b.n	8014b94 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014b64:	1dfb      	adds	r3, r7, #7
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	011b      	lsls	r3, r3, #4
 8014b6a:	3308      	adds	r3, #8
 8014b6c:	001a      	movs	r2, r3
 8014b6e:	4b0b      	ldr	r3, [pc, #44]	; (8014b9c <MallocNewMacCommandSlot+0x5c>)
 8014b70:	18d3      	adds	r3, r2, r3
 8014b72:	0018      	movs	r0, r3
 8014b74:	f7ff ffbf 	bl	8014af6 <IsSlotFree>
 8014b78:	0003      	movs	r3, r0
 8014b7a:	001a      	movs	r2, r3
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	4053      	eors	r3, r2
 8014b80:	b2db      	uxtb	r3, r3
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d1e3      	bne.n	8014b4e <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8014b86:	1dfb      	adds	r3, r7, #7
 8014b88:	781b      	ldrb	r3, [r3, #0]
 8014b8a:	011b      	lsls	r3, r3, #4
 8014b8c:	3308      	adds	r3, #8
 8014b8e:	001a      	movs	r2, r3
 8014b90:	4b02      	ldr	r3, [pc, #8]	; (8014b9c <MallocNewMacCommandSlot+0x5c>)
 8014b92:	18d3      	adds	r3, r2, r3
}
 8014b94:	0018      	movs	r0, r3
 8014b96:	46bd      	mov	sp, r7
 8014b98:	b002      	add	sp, #8
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	20000bf0 	.word	0x20000bf0

08014ba0 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b082      	sub	sp, #8
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d101      	bne.n	8014bb2 <FreeMacCommandSlot+0x12>
    {
        return false;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	e006      	b.n	8014bc0 <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	2210      	movs	r2, #16
 8014bb6:	2100      	movs	r1, #0
 8014bb8:	0018      	movs	r0, r3
 8014bba:	f004 fd6b 	bl	8019694 <memset1>

    return true;
 8014bbe:	2301      	movs	r3, #1
}
 8014bc0:	0018      	movs	r0, r3
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	b002      	add	sp, #8
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d101      	bne.n	8014bda <LinkedListInit+0x12>
    {
        return false;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	e006      	b.n	8014be8 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	2200      	movs	r2, #0
 8014bde:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	2200      	movs	r2, #0
 8014be4:	605a      	str	r2, [r3, #4]

    return true;
 8014be6:	2301      	movs	r3, #1
}
 8014be8:	0018      	movs	r0, r3
 8014bea:	46bd      	mov	sp, r7
 8014bec:	b002      	add	sp, #8
 8014bee:	bd80      	pop	{r7, pc}

08014bf0 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d002      	beq.n	8014c06 <LinkedListAdd+0x16>
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d101      	bne.n	8014c0a <LinkedListAdd+0x1a>
    {
        return false;
 8014c06:	2300      	movs	r3, #0
 8014c08:	e015      	b.n	8014c36 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d102      	bne.n	8014c18 <LinkedListAdd+0x28>
    {
        list->First = element;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	683a      	ldr	r2, [r7, #0]
 8014c16:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	685b      	ldr	r3, [r3, #4]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d003      	beq.n	8014c28 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	685b      	ldr	r3, [r3, #4]
 8014c24:	683a      	ldr	r2, [r7, #0]
 8014c26:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	683a      	ldr	r2, [r7, #0]
 8014c32:	605a      	str	r2, [r3, #4]

    return true;
 8014c34:	2301      	movs	r3, #1
}
 8014c36:	0018      	movs	r0, r3
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	b002      	add	sp, #8
 8014c3c:	bd80      	pop	{r7, pc}

08014c3e <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014c3e:	b580      	push	{r7, lr}
 8014c40:	b084      	sub	sp, #16
 8014c42:	af00      	add	r7, sp, #0
 8014c44:	6078      	str	r0, [r7, #4]
 8014c46:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d002      	beq.n	8014c54 <LinkedListGetPrevious+0x16>
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d101      	bne.n	8014c58 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014c54:	2300      	movs	r3, #0
 8014c56:	e016      	b.n	8014c86 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014c5e:	683a      	ldr	r2, [r7, #0]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d00c      	beq.n	8014c80 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014c66:	e002      	b.n	8014c6e <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d007      	beq.n	8014c84 <LinkedListGetPrevious+0x46>
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	683a      	ldr	r2, [r7, #0]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d1f4      	bne.n	8014c68 <LinkedListGetPrevious+0x2a>
 8014c7e:	e001      	b.n	8014c84 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014c80:	2300      	movs	r3, #0
 8014c82:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014c84:	68fb      	ldr	r3, [r7, #12]
}
 8014c86:	0018      	movs	r0, r3
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	b004      	add	sp, #16
 8014c8c:	bd80      	pop	{r7, pc}

08014c8e <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014c8e:	b580      	push	{r7, lr}
 8014c90:	b084      	sub	sp, #16
 8014c92:	af00      	add	r7, sp, #0
 8014c94:	6078      	str	r0, [r7, #4]
 8014c96:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d002      	beq.n	8014ca4 <LinkedListRemove+0x16>
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d101      	bne.n	8014ca8 <LinkedListRemove+0x1a>
    {
        return false;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	e023      	b.n	8014cf0 <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014ca8:	683a      	ldr	r2, [r7, #0]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	0011      	movs	r1, r2
 8014cae:	0018      	movs	r0, r3
 8014cb0:	f7ff ffc5 	bl	8014c3e <LinkedListGetPrevious>
 8014cb4:	0003      	movs	r3, r0
 8014cb6:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	683a      	ldr	r2, [r7, #0]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d103      	bne.n	8014cca <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	681a      	ldr	r2, [r3, #0]
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	685b      	ldr	r3, [r3, #4]
 8014cce:	683a      	ldr	r2, [r7, #0]
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d102      	bne.n	8014cda <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	68fa      	ldr	r2, [r7, #12]
 8014cd8:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d003      	beq.n	8014ce8 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	681a      	ldr	r2, [r3, #0]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	2200      	movs	r2, #0
 8014cec:	601a      	str	r2, [r3, #0]

    return true;
 8014cee:	2301      	movs	r3, #1
}
 8014cf0:	0018      	movs	r0, r3
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	b004      	add	sp, #16
 8014cf6:	bd80      	pop	{r7, pc}

08014cf8 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	0002      	movs	r2, r0
 8014d00:	1dfb      	adds	r3, r7, #7
 8014d02:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8014d04:	1dfb      	adds	r3, r7, #7
 8014d06:	781b      	ldrb	r3, [r3, #0]
 8014d08:	2b05      	cmp	r3, #5
 8014d0a:	d003      	beq.n	8014d14 <IsSticky+0x1c>
 8014d0c:	db04      	blt.n	8014d18 <IsSticky+0x20>
 8014d0e:	3b08      	subs	r3, #8
 8014d10:	2b02      	cmp	r3, #2
 8014d12:	d801      	bhi.n	8014d18 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8014d14:	2301      	movs	r3, #1
 8014d16:	e000      	b.n	8014d1a <IsSticky+0x22>
        default:
            return false;
 8014d18:	2300      	movs	r3, #0
    }
}
 8014d1a:	0018      	movs	r0, r3
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	b002      	add	sp, #8
 8014d20:	bd80      	pop	{r7, pc}
	...

08014d24 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 8014d28:	4b04      	ldr	r3, [pc, #16]	; (8014d3c <NvmCtxCallback+0x18>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d002      	beq.n	8014d36 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8014d30:	4b02      	ldr	r3, [pc, #8]	; (8014d3c <NvmCtxCallback+0x18>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	4798      	blx	r3
    }
}
 8014d36:	46c0      	nop			; (mov r8, r8)
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}
 8014d3c:	20000bec 	.word	0x20000bec

08014d40 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b082      	sub	sp, #8
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8014d48:	4b08      	ldr	r3, [pc, #32]	; (8014d6c <LoRaMacCommandsInit+0x2c>)
 8014d4a:	22fc      	movs	r2, #252	; 0xfc
 8014d4c:	2100      	movs	r1, #0
 8014d4e:	0018      	movs	r0, r3
 8014d50:	f004 fca0 	bl	8019694 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 8014d54:	4b05      	ldr	r3, [pc, #20]	; (8014d6c <LoRaMacCommandsInit+0x2c>)
 8014d56:	0018      	movs	r0, r3
 8014d58:	f7ff ff36 	bl	8014bc8 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8014d5c:	4b04      	ldr	r3, [pc, #16]	; (8014d70 <LoRaMacCommandsInit+0x30>)
 8014d5e:	687a      	ldr	r2, [r7, #4]
 8014d60:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 8014d62:	2300      	movs	r3, #0
}
 8014d64:	0018      	movs	r0, r3
 8014d66:	46bd      	mov	sp, r7
 8014d68:	b002      	add	sp, #8
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	20000bf0 	.word	0x20000bf0
 8014d70:	20000bec 	.word	0x20000bec

08014d74 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d007      	beq.n	8014d92 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 8014d82:	6879      	ldr	r1, [r7, #4]
 8014d84:	4b05      	ldr	r3, [pc, #20]	; (8014d9c <LoRaMacCommandsRestoreNvmCtx+0x28>)
 8014d86:	22fc      	movs	r2, #252	; 0xfc
 8014d88:	0018      	movs	r0, r3
 8014d8a:	f004 fc45 	bl	8019618 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	e000      	b.n	8014d94 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d92:	2301      	movs	r3, #1
    }
}
 8014d94:	0018      	movs	r0, r3
 8014d96:	46bd      	mov	sp, r7
 8014d98:	b002      	add	sp, #8
 8014d9a:	bd80      	pop	{r7, pc}
 8014d9c:	20000bf0 	.word	0x20000bf0

08014da0 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	22fc      	movs	r2, #252	; 0xfc
 8014dac:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8014dae:	4b02      	ldr	r3, [pc, #8]	; (8014db8 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8014db0:	0018      	movs	r0, r3
 8014db2:	46bd      	mov	sp, r7
 8014db4:	b002      	add	sp, #8
 8014db6:	bd80      	pop	{r7, pc}
 8014db8:	20000bf0 	.word	0x20000bf0

08014dbc <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014dbc:	b590      	push	{r4, r7, lr}
 8014dbe:	b087      	sub	sp, #28
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	60b9      	str	r1, [r7, #8]
 8014dc4:	607a      	str	r2, [r7, #4]
 8014dc6:	230f      	movs	r3, #15
 8014dc8:	18fb      	adds	r3, r7, r3
 8014dca:	1c02      	adds	r2, r0, #0
 8014dcc:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d101      	bne.n	8014dd8 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	e03c      	b.n	8014e52 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014dd8:	f7ff feb2 	bl	8014b40 <MallocNewMacCommandSlot>
 8014ddc:	0003      	movs	r3, r0
 8014dde:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d101      	bne.n	8014dea <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014de6:	2302      	movs	r3, #2
 8014de8:	e033      	b.n	8014e52 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 8014dea:	697a      	ldr	r2, [r7, #20]
 8014dec:	4b1b      	ldr	r3, [pc, #108]	; (8014e5c <LoRaMacCommandsAddCmd+0xa0>)
 8014dee:	0011      	movs	r1, r2
 8014df0:	0018      	movs	r0, r3
 8014df2:	f7ff fefd 	bl	8014bf0 <LinkedListAdd>
 8014df6:	0003      	movs	r3, r0
 8014df8:	001a      	movs	r2, r3
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	4053      	eors	r3, r2
 8014dfe:	b2db      	uxtb	r3, r3
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d001      	beq.n	8014e08 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014e04:	2305      	movs	r3, #5
 8014e06:	e024      	b.n	8014e52 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	240f      	movs	r4, #15
 8014e0c:	193a      	adds	r2, r7, r4
 8014e0e:	7812      	ldrb	r2, [r2, #0]
 8014e10:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	3305      	adds	r3, #5
 8014e1c:	687a      	ldr	r2, [r7, #4]
 8014e1e:	b292      	uxth	r2, r2
 8014e20:	68b9      	ldr	r1, [r7, #8]
 8014e22:	0018      	movs	r0, r3
 8014e24:	f004 fbf8 	bl	8019618 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014e28:	193b      	adds	r3, r7, r4
 8014e2a:	781b      	ldrb	r3, [r3, #0]
 8014e2c:	0018      	movs	r0, r3
 8014e2e:	f7ff ff63 	bl	8014cf8 <IsSticky>
 8014e32:	0003      	movs	r3, r0
 8014e34:	001a      	movs	r2, r3
 8014e36:	697b      	ldr	r3, [r7, #20]
 8014e38:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014e3a:	4b08      	ldr	r3, [pc, #32]	; (8014e5c <LoRaMacCommandsAddCmd+0xa0>)
 8014e3c:	22f8      	movs	r2, #248	; 0xf8
 8014e3e:	589a      	ldr	r2, [r3, r2]
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	18d3      	adds	r3, r2, r3
 8014e44:	1c5a      	adds	r2, r3, #1
 8014e46:	4b05      	ldr	r3, [pc, #20]	; (8014e5c <LoRaMacCommandsAddCmd+0xa0>)
 8014e48:	21f8      	movs	r1, #248	; 0xf8
 8014e4a:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8014e4c:	f7ff ff6a 	bl	8014d24 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014e50:	2300      	movs	r3, #0
}
 8014e52:	0018      	movs	r0, r3
 8014e54:	46bd      	mov	sp, r7
 8014e56:	b007      	add	sp, #28
 8014e58:	bd90      	pop	{r4, r7, pc}
 8014e5a:	46c0      	nop			; (mov r8, r8)
 8014e5c:	20000bf0 	.word	0x20000bf0

08014e60 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d101      	bne.n	8014e72 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014e6e:	2301      	movs	r3, #1
 8014e70:	e028      	b.n	8014ec4 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 8014e72:	687a      	ldr	r2, [r7, #4]
 8014e74:	4b15      	ldr	r3, [pc, #84]	; (8014ecc <LoRaMacCommandsRemoveCmd+0x6c>)
 8014e76:	0011      	movs	r1, r2
 8014e78:	0018      	movs	r0, r3
 8014e7a:	f7ff ff08 	bl	8014c8e <LinkedListRemove>
 8014e7e:	0003      	movs	r3, r0
 8014e80:	001a      	movs	r2, r3
 8014e82:	2301      	movs	r3, #1
 8014e84:	4053      	eors	r3, r2
 8014e86:	b2db      	uxtb	r3, r3
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d001      	beq.n	8014e90 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014e8c:	2303      	movs	r3, #3
 8014e8e:	e019      	b.n	8014ec4 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014e90:	4b0e      	ldr	r3, [pc, #56]	; (8014ecc <LoRaMacCommandsRemoveCmd+0x6c>)
 8014e92:	22f8      	movs	r2, #248	; 0xf8
 8014e94:	589a      	ldr	r2, [r3, r2]
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	689b      	ldr	r3, [r3, #8]
 8014e9a:	1ad3      	subs	r3, r2, r3
 8014e9c:	1e5a      	subs	r2, r3, #1
 8014e9e:	4b0b      	ldr	r3, [pc, #44]	; (8014ecc <LoRaMacCommandsRemoveCmd+0x6c>)
 8014ea0:	21f8      	movs	r1, #248	; 0xf8
 8014ea2:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	0018      	movs	r0, r3
 8014ea8:	f7ff fe7a 	bl	8014ba0 <FreeMacCommandSlot>
 8014eac:	0003      	movs	r3, r0
 8014eae:	001a      	movs	r2, r3
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	4053      	eors	r3, r2
 8014eb4:	b2db      	uxtb	r3, r3
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d001      	beq.n	8014ebe <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014eba:	2305      	movs	r3, #5
 8014ebc:	e002      	b.n	8014ec4 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8014ebe:	f7ff ff31 	bl	8014d24 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014ec2:	2300      	movs	r3, #0
}
 8014ec4:	0018      	movs	r0, r3
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	b002      	add	sp, #8
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	20000bf0 	.word	0x20000bf0

08014ed0 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014ed6:	4b11      	ldr	r3, [pc, #68]	; (8014f1c <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014edc:	e013      	b.n	8014f06 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	7b1b      	ldrb	r3, [r3, #12]
 8014ee2:	2201      	movs	r2, #1
 8014ee4:	4053      	eors	r3, r2
 8014ee6:	b2db      	uxtb	r3, r3
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d009      	beq.n	8014f00 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	0018      	movs	r0, r3
 8014ef6:	f7ff ffb3 	bl	8014e60 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	607b      	str	r3, [r7, #4]
 8014efe:	e002      	b.n	8014f06 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d1e8      	bne.n	8014ede <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8014f0c:	f7ff ff0a 	bl	8014d24 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014f10:	2300      	movs	r3, #0
}
 8014f12:	0018      	movs	r0, r3
 8014f14:	46bd      	mov	sp, r7
 8014f16:	b002      	add	sp, #8
 8014f18:	bd80      	pop	{r7, pc}
 8014f1a:	46c0      	nop			; (mov r8, r8)
 8014f1c:	20000bf0 	.word	0x20000bf0

08014f20 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b082      	sub	sp, #8
 8014f24:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014f26:	4b0f      	ldr	r3, [pc, #60]	; (8014f64 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014f2c:	e00f      	b.n	8014f4e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	791b      	ldrb	r3, [r3, #4]
 8014f38:	0018      	movs	r0, r3
 8014f3a:	f7ff fedd 	bl	8014cf8 <IsSticky>
 8014f3e:	1e03      	subs	r3, r0, #0
 8014f40:	d003      	beq.n	8014f4a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	0018      	movs	r0, r3
 8014f46:	f7ff ff8b 	bl	8014e60 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d1ec      	bne.n	8014f2e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 8014f54:	f7ff fee6 	bl	8014d24 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014f58:	2300      	movs	r3, #0
}
 8014f5a:	0018      	movs	r0, r3
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	b002      	add	sp, #8
 8014f60:	bd80      	pop	{r7, pc}
 8014f62:	46c0      	nop			; (mov r8, r8)
 8014f64:	20000bf0 	.word	0x20000bf0

08014f68 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b082      	sub	sp, #8
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d101      	bne.n	8014f7a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014f76:	2301      	movs	r3, #1
 8014f78:	e005      	b.n	8014f86 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8014f7a:	4b05      	ldr	r3, [pc, #20]	; (8014f90 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014f7c:	22f8      	movs	r2, #248	; 0xf8
 8014f7e:	589a      	ldr	r2, [r3, r2]
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014f84:	2300      	movs	r3, #0
}
 8014f86:	0018      	movs	r0, r3
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	b002      	add	sp, #8
 8014f8c:	bd80      	pop	{r7, pc}
 8014f8e:	46c0      	nop			; (mov r8, r8)
 8014f90:	20000bf0 	.word	0x20000bf0

08014f94 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014f94:	b590      	push	{r4, r7, lr}
 8014f96:	b089      	sub	sp, #36	; 0x24
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	60f8      	str	r0, [r7, #12]
 8014f9c:	60b9      	str	r1, [r7, #8]
 8014f9e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 8014fa0:	4b2a      	ldr	r3, [pc, #168]	; (801504c <LoRaMacCommandsSerializeCmds+0xb8>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014fa6:	231b      	movs	r3, #27
 8014fa8:	18fb      	adds	r3, r7, r3
 8014faa:	2200      	movs	r2, #0
 8014fac:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d002      	beq.n	8014fba <LoRaMacCommandsSerializeCmds+0x26>
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d12d      	bne.n	8015016 <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014fba:	2301      	movs	r3, #1
 8014fbc:	e042      	b.n	8015044 <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014fbe:	241b      	movs	r4, #27
 8014fc0:	193b      	adds	r3, r7, r4
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	68fa      	ldr	r2, [r7, #12]
 8014fc6:	1ad2      	subs	r2, r2, r3
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	689b      	ldr	r3, [r3, #8]
 8014fcc:	3301      	adds	r3, #1
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	d325      	bcc.n	801501e <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 8014fd2:	193b      	adds	r3, r7, r4
 8014fd4:	781b      	ldrb	r3, [r3, #0]
 8014fd6:	193a      	adds	r2, r7, r4
 8014fd8:	1c59      	adds	r1, r3, #1
 8014fda:	7011      	strb	r1, [r2, #0]
 8014fdc:	001a      	movs	r2, r3
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	189b      	adds	r3, r3, r2
 8014fe2:	69fa      	ldr	r2, [r7, #28]
 8014fe4:	7912      	ldrb	r2, [r2, #4]
 8014fe6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014fe8:	193b      	adds	r3, r7, r4
 8014fea:	781b      	ldrb	r3, [r3, #0]
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	18d0      	adds	r0, r2, r3
 8014ff0:	69fb      	ldr	r3, [r7, #28]
 8014ff2:	1d59      	adds	r1, r3, #5
 8014ff4:	69fb      	ldr	r3, [r7, #28]
 8014ff6:	689b      	ldr	r3, [r3, #8]
 8014ff8:	b29b      	uxth	r3, r3
 8014ffa:	001a      	movs	r2, r3
 8014ffc:	f004 fb0c 	bl	8019618 <memcpy1>
            itr += curElement->PayloadSize;
 8015000:	69fb      	ldr	r3, [r7, #28]
 8015002:	689b      	ldr	r3, [r3, #8]
 8015004:	b2d9      	uxtb	r1, r3
 8015006:	193b      	adds	r3, r7, r4
 8015008:	193a      	adds	r2, r7, r4
 801500a:	7812      	ldrb	r2, [r2, #0]
 801500c:	188a      	adds	r2, r1, r2
 801500e:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015010:	69fb      	ldr	r3, [r7, #28]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015016:	69fb      	ldr	r3, [r7, #28]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d1d0      	bne.n	8014fbe <LoRaMacCommandsSerializeCmds+0x2a>
 801501c:	e00a      	b.n	8015034 <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 801501e:	46c0      	nop			; (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015020:	e008      	b.n	8015034 <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015022:	69fb      	ldr	r3, [r7, #28]
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015028:	69fb      	ldr	r3, [r7, #28]
 801502a:	0018      	movs	r0, r3
 801502c:	f7ff ff18 	bl	8014e60 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015034:	69fb      	ldr	r3, [r7, #28]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d1f3      	bne.n	8015022 <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	0018      	movs	r0, r3
 801503e:	f7ff ff93 	bl	8014f68 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015042:	2300      	movs	r3, #0
}
 8015044:	0018      	movs	r0, r3
 8015046:	46bd      	mov	sp, r7
 8015048:	b009      	add	sp, #36	; 0x24
 801504a:	bd90      	pop	{r4, r7, pc}
 801504c:	20000bf0 	.word	0x20000bf0

08015050 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b084      	sub	sp, #16
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d101      	bne.n	8015062 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801505e:	2301      	movs	r3, #1
 8015060:	e016      	b.n	8015090 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8015062:	4b0d      	ldr	r3, [pc, #52]	; (8015098 <LoRaMacCommandsStickyCmdsPending+0x48>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2200      	movs	r2, #0
 801506c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801506e:	e00b      	b.n	8015088 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	7b1b      	ldrb	r3, [r3, #12]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d004      	beq.n	8015082 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	2201      	movs	r2, #1
 801507c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801507e:	2300      	movs	r3, #0
 8015080:	e006      	b.n	8015090 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d1f0      	bne.n	8015070 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801508e:	2300      	movs	r3, #0
}
 8015090:	0018      	movs	r0, r3
 8015092:	46bd      	mov	sp, r7
 8015094:	b004      	add	sp, #16
 8015096:	bd80      	pop	{r7, pc}
 8015098:	20000bf0 	.word	0x20000bf0

0801509c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	0002      	movs	r2, r0
 80150a4:	1dfb      	adds	r3, r7, #7
 80150a6:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 80150a8:	230f      	movs	r3, #15
 80150aa:	18fb      	adds	r3, r7, r3
 80150ac:	2200      	movs	r2, #0
 80150ae:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 80150b0:	1dfb      	adds	r3, r7, #7
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	2b13      	cmp	r3, #19
 80150b6:	d84a      	bhi.n	801514e <LoRaMacCommandsGetCmdSize+0xb2>
 80150b8:	009a      	lsls	r2, r3, #2
 80150ba:	4b29      	ldr	r3, [pc, #164]	; (8015160 <LoRaMacCommandsGetCmdSize+0xc4>)
 80150bc:	18d3      	adds	r3, r2, r3
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80150c2:	230f      	movs	r3, #15
 80150c4:	18fb      	adds	r3, r7, r3
 80150c6:	2203      	movs	r2, #3
 80150c8:	701a      	strb	r2, [r3, #0]
            break;
 80150ca:	e041      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80150cc:	230f      	movs	r3, #15
 80150ce:	18fb      	adds	r3, r7, r3
 80150d0:	2205      	movs	r2, #5
 80150d2:	701a      	strb	r2, [r3, #0]
            break;
 80150d4:	e03c      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80150d6:	230f      	movs	r3, #15
 80150d8:	18fb      	adds	r3, r7, r3
 80150da:	2202      	movs	r2, #2
 80150dc:	701a      	strb	r2, [r3, #0]
            break;
 80150de:	e037      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80150e0:	230f      	movs	r3, #15
 80150e2:	18fb      	adds	r3, r7, r3
 80150e4:	2205      	movs	r2, #5
 80150e6:	701a      	strb	r2, [r3, #0]
            break;
 80150e8:	e032      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80150ea:	230f      	movs	r3, #15
 80150ec:	18fb      	adds	r3, r7, r3
 80150ee:	2201      	movs	r2, #1
 80150f0:	701a      	strb	r2, [r3, #0]
            break;
 80150f2:	e02d      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80150f4:	230f      	movs	r3, #15
 80150f6:	18fb      	adds	r3, r7, r3
 80150f8:	2206      	movs	r2, #6
 80150fa:	701a      	strb	r2, [r3, #0]
            break;
 80150fc:	e028      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80150fe:	230f      	movs	r3, #15
 8015100:	18fb      	adds	r3, r7, r3
 8015102:	2202      	movs	r2, #2
 8015104:	701a      	strb	r2, [r3, #0]
            break;
 8015106:	e023      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015108:	230f      	movs	r3, #15
 801510a:	18fb      	adds	r3, r7, r3
 801510c:	2202      	movs	r2, #2
 801510e:	701a      	strb	r2, [r3, #0]
            break;
 8015110:	e01e      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015112:	230f      	movs	r3, #15
 8015114:	18fb      	adds	r3, r7, r3
 8015116:	2205      	movs	r2, #5
 8015118:	701a      	strb	r2, [r3, #0]
            break;
 801511a:	e019      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801511c:	230f      	movs	r3, #15
 801511e:	18fb      	adds	r3, r7, r3
 8015120:	2206      	movs	r2, #6
 8015122:	701a      	strb	r2, [r3, #0]
            break;
 8015124:	e014      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015126:	230f      	movs	r3, #15
 8015128:	18fb      	adds	r3, r7, r3
 801512a:	2201      	movs	r2, #1
 801512c:	701a      	strb	r2, [r3, #0]
            break;
 801512e:	e00f      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015130:	230f      	movs	r3, #15
 8015132:	18fb      	adds	r3, r7, r3
 8015134:	2205      	movs	r2, #5
 8015136:	701a      	strb	r2, [r3, #0]
            break;
 8015138:	e00a      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801513a:	230f      	movs	r3, #15
 801513c:	18fb      	adds	r3, r7, r3
 801513e:	2204      	movs	r2, #4
 8015140:	701a      	strb	r2, [r3, #0]
            break;
 8015142:	e005      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015144:	230f      	movs	r3, #15
 8015146:	18fb      	adds	r3, r7, r3
 8015148:	2204      	movs	r2, #4
 801514a:	701a      	strb	r2, [r3, #0]
            break;
 801514c:	e000      	b.n	8015150 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801514e:	46c0      	nop			; (mov r8, r8)
        }
    }
    return cidSize;
 8015150:	230f      	movs	r3, #15
 8015152:	18fb      	adds	r3, r7, r3
 8015154:	781b      	ldrb	r3, [r3, #0]
}
 8015156:	0018      	movs	r0, r3
 8015158:	46bd      	mov	sp, r7
 801515a:	b004      	add	sp, #16
 801515c:	bd80      	pop	{r7, pc}
 801515e:	46c0      	nop			; (mov r8, r8)
 8015160:	0801fac0 	.word	0x0801fac0

08015164 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b082      	sub	sp, #8
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 801516c:	4b08      	ldr	r3, [pc, #32]	; (8015190 <IncreaseBufferPointer+0x2c>)
 801516e:	691b      	ldr	r3, [r3, #16]
 8015170:	3310      	adds	r3, #16
 8015172:	687a      	ldr	r2, [r7, #4]
 8015174:	429a      	cmp	r2, r3
 8015176:	d103      	bne.n	8015180 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015178:	4b05      	ldr	r3, [pc, #20]	; (8015190 <IncreaseBufferPointer+0x2c>)
 801517a:	691b      	ldr	r3, [r3, #16]
 801517c:	607b      	str	r3, [r7, #4]
 801517e:	e002      	b.n	8015186 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	3304      	adds	r3, #4
 8015184:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015186:	687b      	ldr	r3, [r7, #4]
}
 8015188:	0018      	movs	r0, r3
 801518a:	46bd      	mov	sp, r7
 801518c:	b002      	add	sp, #8
 801518e:	bd80      	pop	{r7, pc}
 8015190:	20000d04 	.word	0x20000d04

08015194 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	0002      	movs	r2, r0
 801519c:	1dfb      	adds	r3, r7, #7
 801519e:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 80151a0:	1dfb      	adds	r3, r7, #7
 80151a2:	781b      	ldrb	r3, [r3, #0]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d101      	bne.n	80151ac <IsListEmpty+0x18>
    {
        return true;
 80151a8:	2301      	movs	r3, #1
 80151aa:	e000      	b.n	80151ae <IsListEmpty+0x1a>
    }
    return false;
 80151ac:	2300      	movs	r3, #0
}
 80151ae:	0018      	movs	r0, r3
 80151b0:	46bd      	mov	sp, r7
 80151b2:	b002      	add	sp, #8
 80151b4:	bd80      	pop	{r7, pc}

080151b6 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80151b6:	b580      	push	{r7, lr}
 80151b8:	b082      	sub	sp, #8
 80151ba:	af00      	add	r7, sp, #0
 80151bc:	0002      	movs	r2, r0
 80151be:	1dfb      	adds	r3, r7, #7
 80151c0:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80151c2:	1dfb      	adds	r3, r7, #7
 80151c4:	781b      	ldrb	r3, [r3, #0]
 80151c6:	2b04      	cmp	r3, #4
 80151c8:	d901      	bls.n	80151ce <IsListFull+0x18>
    {
        return true;
 80151ca:	2301      	movs	r3, #1
 80151cc:	e000      	b.n	80151d0 <IsListFull+0x1a>
    }
    return false;
 80151ce:	2300      	movs	r3, #0
}
 80151d0:	0018      	movs	r0, r3
 80151d2:	46bd      	mov	sp, r7
 80151d4:	b002      	add	sp, #8
 80151d6:	bd80      	pop	{r7, pc}

080151d8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b086      	sub	sp, #24
 80151dc:	af00      	add	r7, sp, #0
 80151de:	60b9      	str	r1, [r7, #8]
 80151e0:	607a      	str	r2, [r7, #4]
 80151e2:	230f      	movs	r3, #15
 80151e4:	18fb      	adds	r3, r7, r3
 80151e6:	1c02      	adds	r2, r0, #0
 80151e8:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80151ee:	4b18      	ldr	r3, [pc, #96]	; (8015250 <GetElement+0x78>)
 80151f0:	691b      	ldr	r3, [r3, #16]
 80151f2:	7d1b      	ldrb	r3, [r3, #20]
 80151f4:	0018      	movs	r0, r3
 80151f6:	f7ff ffcd 	bl	8015194 <IsListEmpty>
 80151fa:	1e03      	subs	r3, r0, #0
 80151fc:	d001      	beq.n	8015202 <GetElement+0x2a>
    {
        return NULL;
 80151fe:	2300      	movs	r3, #0
 8015200:	e022      	b.n	8015248 <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8015202:	2313      	movs	r3, #19
 8015204:	18fb      	adds	r3, r7, r3
 8015206:	2200      	movs	r2, #0
 8015208:	701a      	strb	r2, [r3, #0]
 801520a:	e014      	b.n	8015236 <GetElement+0x5e>
    {
        if( element->Request == request )
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	781b      	ldrb	r3, [r3, #0]
 8015210:	220f      	movs	r2, #15
 8015212:	18ba      	adds	r2, r7, r2
 8015214:	7812      	ldrb	r2, [r2, #0]
 8015216:	429a      	cmp	r2, r3
 8015218:	d101      	bne.n	801521e <GetElement+0x46>
        {
            // We have found the element
            return element;
 801521a:	697b      	ldr	r3, [r7, #20]
 801521c:	e014      	b.n	8015248 <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 801521e:	697b      	ldr	r3, [r7, #20]
 8015220:	0018      	movs	r0, r3
 8015222:	f7ff ff9f 	bl	8015164 <IncreaseBufferPointer>
 8015226:	0003      	movs	r3, r0
 8015228:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 801522a:	2113      	movs	r1, #19
 801522c:	187b      	adds	r3, r7, r1
 801522e:	781a      	ldrb	r2, [r3, #0]
 8015230:	187b      	adds	r3, r7, r1
 8015232:	3201      	adds	r2, #1
 8015234:	701a      	strb	r2, [r3, #0]
 8015236:	4b06      	ldr	r3, [pc, #24]	; (8015250 <GetElement+0x78>)
 8015238:	691b      	ldr	r3, [r3, #16]
 801523a:	7d1b      	ldrb	r3, [r3, #20]
 801523c:	2213      	movs	r2, #19
 801523e:	18ba      	adds	r2, r7, r2
 8015240:	7812      	ldrb	r2, [r2, #0]
 8015242:	429a      	cmp	r2, r3
 8015244:	d3e2      	bcc.n	801520c <GetElement+0x34>
    }

    return NULL;
 8015246:	2300      	movs	r3, #0
}
 8015248:	0018      	movs	r0, r3
 801524a:	46bd      	mov	sp, r7
 801524c:	b006      	add	sp, #24
 801524e:	bd80      	pop	{r7, pc}
 8015250:	20000d04 	.word	0x20000d04

08015254 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b082      	sub	sp, #8
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 801525e:	4b13      	ldr	r3, [pc, #76]	; (80152ac <LoRaMacConfirmQueueInit+0x58>)
 8015260:	687a      	ldr	r2, [r7, #4]
 8015262:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8015264:	4b11      	ldr	r3, [pc, #68]	; (80152ac <LoRaMacConfirmQueueInit+0x58>)
 8015266:	4a12      	ldr	r2, [pc, #72]	; (80152b0 <LoRaMacConfirmQueueInit+0x5c>)
 8015268:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 801526a:	4b10      	ldr	r3, [pc, #64]	; (80152ac <LoRaMacConfirmQueueInit+0x58>)
 801526c:	691b      	ldr	r3, [r3, #16]
 801526e:	2200      	movs	r2, #0
 8015270:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015272:	4b0e      	ldr	r3, [pc, #56]	; (80152ac <LoRaMacConfirmQueueInit+0x58>)
 8015274:	691b      	ldr	r3, [r3, #16]
 8015276:	001a      	movs	r2, r3
 8015278:	4b0c      	ldr	r3, [pc, #48]	; (80152ac <LoRaMacConfirmQueueInit+0x58>)
 801527a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 801527c:	4b0b      	ldr	r3, [pc, #44]	; (80152ac <LoRaMacConfirmQueueInit+0x58>)
 801527e:	691b      	ldr	r3, [r3, #16]
 8015280:	001a      	movs	r2, r3
 8015282:	4b0a      	ldr	r3, [pc, #40]	; (80152ac <LoRaMacConfirmQueueInit+0x58>)
 8015284:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8015286:	4b09      	ldr	r3, [pc, #36]	; (80152ac <LoRaMacConfirmQueueInit+0x58>)
 8015288:	691b      	ldr	r3, [r3, #16]
 801528a:	2214      	movs	r2, #20
 801528c:	21ff      	movs	r1, #255	; 0xff
 801528e:	0018      	movs	r0, r3
 8015290:	f004 fa00 	bl	8019694 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015294:	4b05      	ldr	r3, [pc, #20]	; (80152ac <LoRaMacConfirmQueueInit+0x58>)
 8015296:	691b      	ldr	r3, [r3, #16]
 8015298:	2201      	movs	r2, #1
 801529a:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 801529c:	4b03      	ldr	r3, [pc, #12]	; (80152ac <LoRaMacConfirmQueueInit+0x58>)
 801529e:	683a      	ldr	r2, [r7, #0]
 80152a0:	60da      	str	r2, [r3, #12]
}
 80152a2:	46c0      	nop			; (mov r8, r8)
 80152a4:	46bd      	mov	sp, r7
 80152a6:	b002      	add	sp, #8
 80152a8:	bd80      	pop	{r7, pc}
 80152aa:	46c0      	nop			; (mov r8, r8)
 80152ac:	20000d04 	.word	0x20000d04
 80152b0:	20000cec 	.word	0x20000cec

080152b4 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b082      	sub	sp, #8
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d007      	beq.n	80152d2 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80152c2:	6879      	ldr	r1, [r7, #4]
 80152c4:	4b05      	ldr	r3, [pc, #20]	; (80152dc <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 80152c6:	2216      	movs	r2, #22
 80152c8:	0018      	movs	r0, r3
 80152ca:	f004 f9a5 	bl	8019618 <memcpy1>
        return true;
 80152ce:	2301      	movs	r3, #1
 80152d0:	e000      	b.n	80152d4 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 80152d2:	2300      	movs	r3, #0
    }
}
 80152d4:	0018      	movs	r0, r3
 80152d6:	46bd      	mov	sp, r7
 80152d8:	b002      	add	sp, #8
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	20000cec 	.word	0x20000cec

080152e0 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b082      	sub	sp, #8
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2216      	movs	r2, #22
 80152ec:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 80152ee:	4b02      	ldr	r3, [pc, #8]	; (80152f8 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 80152f0:	0018      	movs	r0, r3
 80152f2:	46bd      	mov	sp, r7
 80152f4:	b002      	add	sp, #8
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	20000cec 	.word	0x20000cec

080152fc <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b082      	sub	sp, #8
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015304:	4b17      	ldr	r3, [pc, #92]	; (8015364 <LoRaMacConfirmQueueAdd+0x68>)
 8015306:	691b      	ldr	r3, [r3, #16]
 8015308:	7d1b      	ldrb	r3, [r3, #20]
 801530a:	0018      	movs	r0, r3
 801530c:	f7ff ff53 	bl	80151b6 <IsListFull>
 8015310:	1e03      	subs	r3, r0, #0
 8015312:	d001      	beq.n	8015318 <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 8015314:	2300      	movs	r3, #0
 8015316:	e021      	b.n	801535c <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015318:	4b12      	ldr	r3, [pc, #72]	; (8015364 <LoRaMacConfirmQueueAdd+0x68>)
 801531a:	689b      	ldr	r3, [r3, #8]
 801531c:	687a      	ldr	r2, [r7, #4]
 801531e:	7812      	ldrb	r2, [r2, #0]
 8015320:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015322:	4b10      	ldr	r3, [pc, #64]	; (8015364 <LoRaMacConfirmQueueAdd+0x68>)
 8015324:	689b      	ldr	r3, [r3, #8]
 8015326:	687a      	ldr	r2, [r7, #4]
 8015328:	7852      	ldrb	r2, [r2, #1]
 801532a:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801532c:	4b0d      	ldr	r3, [pc, #52]	; (8015364 <LoRaMacConfirmQueueAdd+0x68>)
 801532e:	689b      	ldr	r3, [r3, #8]
 8015330:	687a      	ldr	r2, [r7, #4]
 8015332:	78d2      	ldrb	r2, [r2, #3]
 8015334:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015336:	4b0b      	ldr	r3, [pc, #44]	; (8015364 <LoRaMacConfirmQueueAdd+0x68>)
 8015338:	689b      	ldr	r3, [r3, #8]
 801533a:	2200      	movs	r2, #0
 801533c:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 801533e:	4b09      	ldr	r3, [pc, #36]	; (8015364 <LoRaMacConfirmQueueAdd+0x68>)
 8015340:	691b      	ldr	r3, [r3, #16]
 8015342:	7d1a      	ldrb	r2, [r3, #20]
 8015344:	3201      	adds	r2, #1
 8015346:	b2d2      	uxtb	r2, r2
 8015348:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801534a:	4b06      	ldr	r3, [pc, #24]	; (8015364 <LoRaMacConfirmQueueAdd+0x68>)
 801534c:	689b      	ldr	r3, [r3, #8]
 801534e:	0018      	movs	r0, r3
 8015350:	f7ff ff08 	bl	8015164 <IncreaseBufferPointer>
 8015354:	0002      	movs	r2, r0
 8015356:	4b03      	ldr	r3, [pc, #12]	; (8015364 <LoRaMacConfirmQueueAdd+0x68>)
 8015358:	609a      	str	r2, [r3, #8]

    return true;
 801535a:	2301      	movs	r3, #1
}
 801535c:	0018      	movs	r0, r3
 801535e:	46bd      	mov	sp, r7
 8015360:	b002      	add	sp, #8
 8015362:	bd80      	pop	{r7, pc}
 8015364:	20000d04 	.word	0x20000d04

08015368 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015368:	b580      	push	{r7, lr}
 801536a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 801536c:	4b0d      	ldr	r3, [pc, #52]	; (80153a4 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801536e:	691b      	ldr	r3, [r3, #16]
 8015370:	7d1b      	ldrb	r3, [r3, #20]
 8015372:	0018      	movs	r0, r3
 8015374:	f7ff ff0e 	bl	8015194 <IsListEmpty>
 8015378:	1e03      	subs	r3, r0, #0
 801537a:	d001      	beq.n	8015380 <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 801537c:	2300      	movs	r3, #0
 801537e:	e00e      	b.n	801539e <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8015380:	4b08      	ldr	r3, [pc, #32]	; (80153a4 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015382:	691b      	ldr	r3, [r3, #16]
 8015384:	7d1a      	ldrb	r2, [r3, #20]
 8015386:	3a01      	subs	r2, #1
 8015388:	b2d2      	uxtb	r2, r2
 801538a:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801538c:	4b05      	ldr	r3, [pc, #20]	; (80153a4 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801538e:	685b      	ldr	r3, [r3, #4]
 8015390:	0018      	movs	r0, r3
 8015392:	f7ff fee7 	bl	8015164 <IncreaseBufferPointer>
 8015396:	0002      	movs	r2, r0
 8015398:	4b02      	ldr	r3, [pc, #8]	; (80153a4 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801539a:	605a      	str	r2, [r3, #4]

    return true;
 801539c:	2301      	movs	r3, #1
}
 801539e:	0018      	movs	r0, r3
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	20000d04 	.word	0x20000d04

080153a8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b084      	sub	sp, #16
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	0002      	movs	r2, r0
 80153b0:	1dfb      	adds	r3, r7, #7
 80153b2:	701a      	strb	r2, [r3, #0]
 80153b4:	1dbb      	adds	r3, r7, #6
 80153b6:	1c0a      	adds	r2, r1, #0
 80153b8:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80153ba:	2300      	movs	r3, #0
 80153bc:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 80153be:	4b13      	ldr	r3, [pc, #76]	; (801540c <LoRaMacConfirmQueueSetStatus+0x64>)
 80153c0:	691b      	ldr	r3, [r3, #16]
 80153c2:	7d1b      	ldrb	r3, [r3, #20]
 80153c4:	0018      	movs	r0, r3
 80153c6:	f7ff fee5 	bl	8015194 <IsListEmpty>
 80153ca:	0003      	movs	r3, r0
 80153cc:	001a      	movs	r2, r3
 80153ce:	2301      	movs	r3, #1
 80153d0:	4053      	eors	r3, r2
 80153d2:	b2db      	uxtb	r3, r3
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d014      	beq.n	8015402 <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80153d8:	4b0c      	ldr	r3, [pc, #48]	; (801540c <LoRaMacConfirmQueueSetStatus+0x64>)
 80153da:	6859      	ldr	r1, [r3, #4]
 80153dc:	4b0b      	ldr	r3, [pc, #44]	; (801540c <LoRaMacConfirmQueueSetStatus+0x64>)
 80153de:	689a      	ldr	r2, [r3, #8]
 80153e0:	1dbb      	adds	r3, r7, #6
 80153e2:	781b      	ldrb	r3, [r3, #0]
 80153e4:	0018      	movs	r0, r3
 80153e6:	f7ff fef7 	bl	80151d8 <GetElement>
 80153ea:	0003      	movs	r3, r0
 80153ec:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d006      	beq.n	8015402 <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	1dfa      	adds	r2, r7, #7
 80153f8:	7812      	ldrb	r2, [r2, #0]
 80153fa:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2201      	movs	r2, #1
 8015400:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8015402:	46c0      	nop			; (mov r8, r8)
 8015404:	46bd      	mov	sp, r7
 8015406:	b004      	add	sp, #16
 8015408:	bd80      	pop	{r7, pc}
 801540a:	46c0      	nop			; (mov r8, r8)
 801540c:	20000d04 	.word	0x20000d04

08015410 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b084      	sub	sp, #16
 8015414:	af00      	add	r7, sp, #0
 8015416:	0002      	movs	r2, r0
 8015418:	1dfb      	adds	r3, r7, #7
 801541a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 801541c:	2300      	movs	r3, #0
 801541e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015420:	4b11      	ldr	r3, [pc, #68]	; (8015468 <LoRaMacConfirmQueueGetStatus+0x58>)
 8015422:	691b      	ldr	r3, [r3, #16]
 8015424:	7d1b      	ldrb	r3, [r3, #20]
 8015426:	0018      	movs	r0, r3
 8015428:	f7ff feb4 	bl	8015194 <IsListEmpty>
 801542c:	0003      	movs	r3, r0
 801542e:	001a      	movs	r2, r3
 8015430:	2301      	movs	r3, #1
 8015432:	4053      	eors	r3, r2
 8015434:	b2db      	uxtb	r3, r3
 8015436:	2b00      	cmp	r3, #0
 8015438:	d010      	beq.n	801545c <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801543a:	4b0b      	ldr	r3, [pc, #44]	; (8015468 <LoRaMacConfirmQueueGetStatus+0x58>)
 801543c:	6859      	ldr	r1, [r3, #4]
 801543e:	4b0a      	ldr	r3, [pc, #40]	; (8015468 <LoRaMacConfirmQueueGetStatus+0x58>)
 8015440:	689a      	ldr	r2, [r3, #8]
 8015442:	1dfb      	adds	r3, r7, #7
 8015444:	781b      	ldrb	r3, [r3, #0]
 8015446:	0018      	movs	r0, r3
 8015448:	f7ff fec6 	bl	80151d8 <GetElement>
 801544c:	0003      	movs	r3, r0
 801544e:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d002      	beq.n	801545c <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	785b      	ldrb	r3, [r3, #1]
 801545a:	e000      	b.n	801545e <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801545c:	2301      	movs	r3, #1
}
 801545e:	0018      	movs	r0, r3
 8015460:	46bd      	mov	sp, r7
 8015462:	b004      	add	sp, #16
 8015464:	bd80      	pop	{r7, pc}
 8015466:	46c0      	nop			; (mov r8, r8)
 8015468:	20000d04 	.word	0x20000d04

0801546c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b084      	sub	sp, #16
 8015470:	af00      	add	r7, sp, #0
 8015472:	0002      	movs	r2, r0
 8015474:	1dfb      	adds	r3, r7, #7
 8015476:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015478:	4b18      	ldr	r3, [pc, #96]	; (80154dc <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 801547a:	685b      	ldr	r3, [r3, #4]
 801547c:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 801547e:	4b17      	ldr	r3, [pc, #92]	; (80154dc <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015480:	691b      	ldr	r3, [r3, #16]
 8015482:	1dfa      	adds	r2, r7, #7
 8015484:	7812      	ldrb	r2, [r2, #0]
 8015486:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015488:	4b14      	ldr	r3, [pc, #80]	; (80154dc <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 801548a:	691b      	ldr	r3, [r3, #16]
 801548c:	7d1b      	ldrb	r3, [r3, #20]
 801548e:	0018      	movs	r0, r3
 8015490:	f7ff fe80 	bl	8015194 <IsListEmpty>
 8015494:	0003      	movs	r3, r0
 8015496:	001a      	movs	r2, r3
 8015498:	2301      	movs	r3, #1
 801549a:	4053      	eors	r3, r2
 801549c:	b2db      	uxtb	r3, r3
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d018      	beq.n	80154d4 <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	1dfa      	adds	r2, r7, #7
 80154a6:	7812      	ldrb	r2, [r2, #0]
 80154a8:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	78db      	ldrb	r3, [r3, #3]
 80154ae:	2201      	movs	r2, #1
 80154b0:	4053      	eors	r3, r2
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d002      	beq.n	80154be <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	2201      	movs	r2, #1
 80154bc:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	0018      	movs	r0, r3
 80154c2:	f7ff fe4f 	bl	8015164 <IncreaseBufferPointer>
 80154c6:	0003      	movs	r3, r0
 80154c8:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80154ca:	4b04      	ldr	r3, [pc, #16]	; (80154dc <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80154cc:	689b      	ldr	r3, [r3, #8]
 80154ce:	68fa      	ldr	r2, [r7, #12]
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d1e6      	bne.n	80154a2 <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 80154d4:	46c0      	nop			; (mov r8, r8)
 80154d6:	46bd      	mov	sp, r7
 80154d8:	b004      	add	sp, #16
 80154da:	bd80      	pop	{r7, pc}
 80154dc:	20000d04 	.word	0x20000d04

080154e0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b082      	sub	sp, #8
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	0002      	movs	r2, r0
 80154e8:	1dfb      	adds	r3, r7, #7
 80154ea:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80154ec:	4b08      	ldr	r3, [pc, #32]	; (8015510 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80154ee:	6859      	ldr	r1, [r3, #4]
 80154f0:	4b07      	ldr	r3, [pc, #28]	; (8015510 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80154f2:	689a      	ldr	r2, [r3, #8]
 80154f4:	1dfb      	adds	r3, r7, #7
 80154f6:	781b      	ldrb	r3, [r3, #0]
 80154f8:	0018      	movs	r0, r3
 80154fa:	f7ff fe6d 	bl	80151d8 <GetElement>
 80154fe:	1e03      	subs	r3, r0, #0
 8015500:	d001      	beq.n	8015506 <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 8015502:	2301      	movs	r3, #1
 8015504:	e000      	b.n	8015508 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 8015506:	2300      	movs	r3, #0
}
 8015508:	0018      	movs	r0, r3
 801550a:	46bd      	mov	sp, r7
 801550c:	b002      	add	sp, #8
 801550e:	bd80      	pop	{r7, pc}
 8015510:	20000d04 	.word	0x20000d04

08015514 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b084      	sub	sp, #16
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 801551c:	4b2d      	ldr	r3, [pc, #180]	; (80155d4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801551e:	691a      	ldr	r2, [r3, #16]
 8015520:	230e      	movs	r3, #14
 8015522:	18fb      	adds	r3, r7, r3
 8015524:	7d12      	ldrb	r2, [r2, #20]
 8015526:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 8015528:	230d      	movs	r3, #13
 801552a:	18fb      	adds	r3, r7, r3
 801552c:	2200      	movs	r2, #0
 801552e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8015530:	230f      	movs	r3, #15
 8015532:	18fb      	adds	r3, r7, r3
 8015534:	2200      	movs	r2, #0
 8015536:	701a      	strb	r2, [r3, #0]
 8015538:	e03f      	b.n	80155ba <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801553a:	4b26      	ldr	r3, [pc, #152]	; (80155d4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801553c:	685b      	ldr	r3, [r3, #4]
 801553e:	781a      	ldrb	r2, [r3, #0]
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015544:	4b23      	ldr	r3, [pc, #140]	; (80155d4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015546:	685b      	ldr	r3, [r3, #4]
 8015548:	785a      	ldrb	r2, [r3, #1]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801554e:	4b21      	ldr	r3, [pc, #132]	; (80155d4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015550:	685a      	ldr	r2, [r3, #4]
 8015552:	210d      	movs	r1, #13
 8015554:	187b      	adds	r3, r7, r1
 8015556:	7892      	ldrb	r2, [r2, #2]
 8015558:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 801555a:	187b      	adds	r3, r7, r1
 801555c:	781b      	ldrb	r3, [r3, #0]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d006      	beq.n	8015570 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015562:	4b1c      	ldr	r3, [pc, #112]	; (80155d4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	689b      	ldr	r3, [r3, #8]
 8015568:	687a      	ldr	r2, [r7, #4]
 801556a:	0010      	movs	r0, r2
 801556c:	4798      	blx	r3
 801556e:	e00f      	b.n	8015590 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015570:	4b18      	ldr	r3, [pc, #96]	; (80155d4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015572:	685b      	ldr	r3, [r3, #4]
 8015574:	781a      	ldrb	r2, [r3, #0]
 8015576:	2108      	movs	r1, #8
 8015578:	187b      	adds	r3, r7, r1
 801557a:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801557c:	4b15      	ldr	r3, [pc, #84]	; (80155d4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	785a      	ldrb	r2, [r3, #1]
 8015582:	187b      	adds	r3, r7, r1
 8015584:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015586:	4b13      	ldr	r3, [pc, #76]	; (80155d4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	78da      	ldrb	r2, [r3, #3]
 801558c:	187b      	adds	r3, r7, r1
 801558e:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015590:	f7ff feea 	bl	8015368 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015594:	230d      	movs	r3, #13
 8015596:	18fb      	adds	r3, r7, r3
 8015598:	781b      	ldrb	r3, [r3, #0]
 801559a:	2201      	movs	r2, #1
 801559c:	4053      	eors	r3, r2
 801559e:	b2db      	uxtb	r3, r3
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d004      	beq.n	80155ae <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80155a4:	2308      	movs	r3, #8
 80155a6:	18fb      	adds	r3, r7, r3
 80155a8:	0018      	movs	r0, r3
 80155aa:	f7ff fea7 	bl	80152fc <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80155ae:	210f      	movs	r1, #15
 80155b0:	187b      	adds	r3, r7, r1
 80155b2:	781a      	ldrb	r2, [r3, #0]
 80155b4:	187b      	adds	r3, r7, r1
 80155b6:	3201      	adds	r2, #1
 80155b8:	701a      	strb	r2, [r3, #0]
 80155ba:	230f      	movs	r3, #15
 80155bc:	18fa      	adds	r2, r7, r3
 80155be:	230e      	movs	r3, #14
 80155c0:	18fb      	adds	r3, r7, r3
 80155c2:	7812      	ldrb	r2, [r2, #0]
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	429a      	cmp	r2, r3
 80155c8:	d3b7      	bcc.n	801553a <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 80155ca:	46c0      	nop			; (mov r8, r8)
 80155cc:	46c0      	nop			; (mov r8, r8)
 80155ce:	46bd      	mov	sp, r7
 80155d0:	b004      	add	sp, #16
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	20000d04 	.word	0x20000d04

080155d8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80155dc:	4b02      	ldr	r3, [pc, #8]	; (80155e8 <LoRaMacConfirmQueueGetCnt+0x10>)
 80155de:	691b      	ldr	r3, [r3, #16]
 80155e0:	7d1b      	ldrb	r3, [r3, #20]
}
 80155e2:	0018      	movs	r0, r3
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	20000d04 	.word	0x20000d04

080155ec <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80155f0:	4b06      	ldr	r3, [pc, #24]	; (801560c <LoRaMacConfirmQueueIsFull+0x20>)
 80155f2:	691b      	ldr	r3, [r3, #16]
 80155f4:	7d1b      	ldrb	r3, [r3, #20]
 80155f6:	0018      	movs	r0, r3
 80155f8:	f7ff fddd 	bl	80151b6 <IsListFull>
 80155fc:	1e03      	subs	r3, r0, #0
 80155fe:	d001      	beq.n	8015604 <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 8015600:	2301      	movs	r3, #1
 8015602:	e000      	b.n	8015606 <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 8015604:	2300      	movs	r3, #0
    }
}
 8015606:	0018      	movs	r0, r3
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}
 801560c:	20000d04 	.word	0x20000d04

08015610 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015610:	b590      	push	{r4, r7, lr}
 8015612:	b08f      	sub	sp, #60	; 0x3c
 8015614:	af00      	add	r7, sp, #0
 8015616:	60f8      	str	r0, [r7, #12]
 8015618:	0008      	movs	r0, r1
 801561a:	0011      	movs	r1, r2
 801561c:	607b      	str	r3, [r7, #4]
 801561e:	230a      	movs	r3, #10
 8015620:	18fb      	adds	r3, r7, r3
 8015622:	1c02      	adds	r2, r0, #0
 8015624:	801a      	strh	r2, [r3, #0]
 8015626:	2309      	movs	r3, #9
 8015628:	18fb      	adds	r3, r7, r3
 801562a:	1c0a      	adds	r2, r1, #0
 801562c:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d101      	bne.n	8015638 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015634:	230a      	movs	r3, #10
 8015636:	e0ae      	b.n	8015796 <PayloadEncrypt+0x186>
    }

    uint8_t bufferIndex = 0;
 8015638:	2337      	movs	r3, #55	; 0x37
 801563a:	18fb      	adds	r3, r7, r3
 801563c:	2200      	movs	r2, #0
 801563e:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8015640:	2334      	movs	r3, #52	; 0x34
 8015642:	18fb      	adds	r3, r7, r3
 8015644:	2201      	movs	r2, #1
 8015646:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8015648:	2320      	movs	r3, #32
 801564a:	18fb      	adds	r3, r7, r3
 801564c:	2200      	movs	r2, #0
 801564e:	601a      	str	r2, [r3, #0]
 8015650:	3304      	adds	r3, #4
 8015652:	220c      	movs	r2, #12
 8015654:	2100      	movs	r1, #0
 8015656:	0018      	movs	r0, r3
 8015658:	f008 fd3b 	bl	801e0d2 <memset>
    uint8_t aBlock[16] = { 0 };
 801565c:	2410      	movs	r4, #16
 801565e:	193b      	adds	r3, r7, r4
 8015660:	2200      	movs	r2, #0
 8015662:	601a      	str	r2, [r3, #0]
 8015664:	3304      	adds	r3, #4
 8015666:	220c      	movs	r2, #12
 8015668:	2100      	movs	r1, #0
 801566a:	0018      	movs	r0, r3
 801566c:	f008 fd31 	bl	801e0d2 <memset>

    aBlock[0] = 0x01;
 8015670:	0021      	movs	r1, r4
 8015672:	187b      	adds	r3, r7, r1
 8015674:	2201      	movs	r2, #1
 8015676:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8015678:	187a      	adds	r2, r7, r1
 801567a:	2340      	movs	r3, #64	; 0x40
 801567c:	2008      	movs	r0, #8
 801567e:	4684      	mov	ip, r0
 8015680:	44bc      	add	ip, r7
 8015682:	4463      	add	r3, ip
 8015684:	781b      	ldrb	r3, [r3, #0]
 8015686:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	b2da      	uxtb	r2, r3
 801568c:	187b      	adds	r3, r7, r1
 801568e:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	0a1b      	lsrs	r3, r3, #8
 8015694:	b2da      	uxtb	r2, r3
 8015696:	187b      	adds	r3, r7, r1
 8015698:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	0c1b      	lsrs	r3, r3, #16
 801569e:	b2da      	uxtb	r2, r3
 80156a0:	187b      	adds	r3, r7, r1
 80156a2:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	0e1b      	lsrs	r3, r3, #24
 80156a8:	b2da      	uxtb	r2, r3
 80156aa:	187b      	adds	r3, r7, r1
 80156ac:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 80156ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156b0:	b2da      	uxtb	r2, r3
 80156b2:	187b      	adds	r3, r7, r1
 80156b4:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80156b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156b8:	0a1b      	lsrs	r3, r3, #8
 80156ba:	b2da      	uxtb	r2, r3
 80156bc:	187b      	adds	r3, r7, r1
 80156be:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80156c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156c2:	0c1b      	lsrs	r3, r3, #16
 80156c4:	b2da      	uxtb	r2, r3
 80156c6:	187b      	adds	r3, r7, r1
 80156c8:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80156ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156cc:	0e1b      	lsrs	r3, r3, #24
 80156ce:	b2da      	uxtb	r2, r3
 80156d0:	187b      	adds	r3, r7, r1
 80156d2:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 80156d4:	e058      	b.n	8015788 <PayloadEncrypt+0x178>
    {
        aBlock[15] = ctr & 0xFF;
 80156d6:	2134      	movs	r1, #52	; 0x34
 80156d8:	187b      	adds	r3, r7, r1
 80156da:	881b      	ldrh	r3, [r3, #0]
 80156dc:	b2da      	uxtb	r2, r3
 80156de:	2010      	movs	r0, #16
 80156e0:	183b      	adds	r3, r7, r0
 80156e2:	73da      	strb	r2, [r3, #15]
        ctr++;
 80156e4:	187b      	adds	r3, r7, r1
 80156e6:	881a      	ldrh	r2, [r3, #0]
 80156e8:	187b      	adds	r3, r7, r1
 80156ea:	3201      	adds	r2, #1
 80156ec:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80156ee:	2320      	movs	r3, #32
 80156f0:	18f9      	adds	r1, r7, r3
 80156f2:	2309      	movs	r3, #9
 80156f4:	18fb      	adds	r3, r7, r3
 80156f6:	781a      	ldrb	r2, [r3, #0]
 80156f8:	1838      	adds	r0, r7, r0
 80156fa:	000b      	movs	r3, r1
 80156fc:	2110      	movs	r1, #16
 80156fe:	f7f8 fa74 	bl	800dbea <SecureElementAesEncrypt>
 8015702:	1e03      	subs	r3, r0, #0
 8015704:	d001      	beq.n	801570a <PayloadEncrypt+0xfa>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015706:	230f      	movs	r3, #15
 8015708:	e045      	b.n	8015796 <PayloadEncrypt+0x186>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801570a:	2333      	movs	r3, #51	; 0x33
 801570c:	18fb      	adds	r3, r7, r3
 801570e:	2200      	movs	r2, #0
 8015710:	701a      	strb	r2, [r3, #0]
 8015712:	e01f      	b.n	8015754 <PayloadEncrypt+0x144>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015714:	2037      	movs	r0, #55	; 0x37
 8015716:	183b      	adds	r3, r7, r0
 8015718:	781a      	ldrb	r2, [r3, #0]
 801571a:	2433      	movs	r4, #51	; 0x33
 801571c:	193b      	adds	r3, r7, r4
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	18d3      	adds	r3, r2, r3
 8015722:	001a      	movs	r2, r3
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	189b      	adds	r3, r3, r2
 8015728:	7819      	ldrb	r1, [r3, #0]
 801572a:	193b      	adds	r3, r7, r4
 801572c:	781b      	ldrb	r3, [r3, #0]
 801572e:	2220      	movs	r2, #32
 8015730:	18ba      	adds	r2, r7, r2
 8015732:	5cd2      	ldrb	r2, [r2, r3]
 8015734:	183b      	adds	r3, r7, r0
 8015736:	7818      	ldrb	r0, [r3, #0]
 8015738:	193b      	adds	r3, r7, r4
 801573a:	781b      	ldrb	r3, [r3, #0]
 801573c:	18c3      	adds	r3, r0, r3
 801573e:	0018      	movs	r0, r3
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	181b      	adds	r3, r3, r0
 8015744:	404a      	eors	r2, r1
 8015746:	b2d2      	uxtb	r2, r2
 8015748:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801574a:	193b      	adds	r3, r7, r4
 801574c:	781a      	ldrb	r2, [r3, #0]
 801574e:	193b      	adds	r3, r7, r4
 8015750:	3201      	adds	r2, #1
 8015752:	701a      	strb	r2, [r3, #0]
 8015754:	2333      	movs	r3, #51	; 0x33
 8015756:	18fb      	adds	r3, r7, r3
 8015758:	781a      	ldrb	r2, [r3, #0]
 801575a:	230a      	movs	r3, #10
 801575c:	18fb      	adds	r3, r7, r3
 801575e:	881b      	ldrh	r3, [r3, #0]
 8015760:	b219      	sxth	r1, r3
 8015762:	2910      	cmp	r1, #16
 8015764:	dd00      	ble.n	8015768 <PayloadEncrypt+0x158>
 8015766:	2310      	movs	r3, #16
 8015768:	b21b      	sxth	r3, r3
 801576a:	429a      	cmp	r2, r3
 801576c:	dbd2      	blt.n	8015714 <PayloadEncrypt+0x104>
        }
        size -= 16;
 801576e:	210a      	movs	r1, #10
 8015770:	187b      	adds	r3, r7, r1
 8015772:	881b      	ldrh	r3, [r3, #0]
 8015774:	3b10      	subs	r3, #16
 8015776:	b29a      	uxth	r2, r3
 8015778:	187b      	adds	r3, r7, r1
 801577a:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 801577c:	2237      	movs	r2, #55	; 0x37
 801577e:	18bb      	adds	r3, r7, r2
 8015780:	18ba      	adds	r2, r7, r2
 8015782:	7812      	ldrb	r2, [r2, #0]
 8015784:	3210      	adds	r2, #16
 8015786:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8015788:	230a      	movs	r3, #10
 801578a:	18fb      	adds	r3, r7, r3
 801578c:	2200      	movs	r2, #0
 801578e:	5e9b      	ldrsh	r3, [r3, r2]
 8015790:	2b00      	cmp	r3, #0
 8015792:	dca0      	bgt.n	80156d6 <PayloadEncrypt+0xc6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015794:	2300      	movs	r3, #0
}
 8015796:	0018      	movs	r0, r3
 8015798:	46bd      	mov	sp, r7
 801579a:	b00f      	add	sp, #60	; 0x3c
 801579c:	bd90      	pop	{r4, r7, pc}

0801579e <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801579e:	b5b0      	push	{r4, r5, r7, lr}
 80157a0:	b082      	sub	sp, #8
 80157a2:	af00      	add	r7, sp, #0
 80157a4:	0005      	movs	r5, r0
 80157a6:	000c      	movs	r4, r1
 80157a8:	0010      	movs	r0, r2
 80157aa:	0019      	movs	r1, r3
 80157ac:	1dbb      	adds	r3, r7, #6
 80157ae:	1c2a      	adds	r2, r5, #0
 80157b0:	801a      	strh	r2, [r3, #0]
 80157b2:	1d7b      	adds	r3, r7, #5
 80157b4:	1c22      	adds	r2, r4, #0
 80157b6:	701a      	strb	r2, [r3, #0]
 80157b8:	1d3b      	adds	r3, r7, #4
 80157ba:	1c02      	adds	r2, r0, #0
 80157bc:	701a      	strb	r2, [r3, #0]
 80157be:	1cfb      	adds	r3, r7, #3
 80157c0:	1c0a      	adds	r2, r1, #0
 80157c2:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 80157c4:	6a3b      	ldr	r3, [r7, #32]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d101      	bne.n	80157ce <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157ca:	230a      	movs	r3, #10
 80157cc:	e050      	b.n	8015870 <PrepareB0+0xd2>
    }

    b0[0] = 0x49;
 80157ce:	6a3b      	ldr	r3, [r7, #32]
 80157d0:	2249      	movs	r2, #73	; 0x49
 80157d2:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80157d4:	6a3b      	ldr	r3, [r7, #32]
 80157d6:	3301      	adds	r3, #1
 80157d8:	2200      	movs	r2, #0
 80157da:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80157dc:	6a3b      	ldr	r3, [r7, #32]
 80157de:	3302      	adds	r3, #2
 80157e0:	2200      	movs	r2, #0
 80157e2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80157e4:	6a3b      	ldr	r3, [r7, #32]
 80157e6:	3303      	adds	r3, #3
 80157e8:	2200      	movs	r2, #0
 80157ea:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80157ec:	6a3b      	ldr	r3, [r7, #32]
 80157ee:	3304      	adds	r3, #4
 80157f0:	2200      	movs	r2, #0
 80157f2:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80157f4:	6a3b      	ldr	r3, [r7, #32]
 80157f6:	3305      	adds	r3, #5
 80157f8:	1cfa      	adds	r2, r7, #3
 80157fa:	7812      	ldrb	r2, [r2, #0]
 80157fc:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80157fe:	6a3b      	ldr	r3, [r7, #32]
 8015800:	3306      	adds	r3, #6
 8015802:	69ba      	ldr	r2, [r7, #24]
 8015804:	b2d2      	uxtb	r2, r2
 8015806:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015808:	69bb      	ldr	r3, [r7, #24]
 801580a:	0a1a      	lsrs	r2, r3, #8
 801580c:	6a3b      	ldr	r3, [r7, #32]
 801580e:	3307      	adds	r3, #7
 8015810:	b2d2      	uxtb	r2, r2
 8015812:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015814:	69bb      	ldr	r3, [r7, #24]
 8015816:	0c1a      	lsrs	r2, r3, #16
 8015818:	6a3b      	ldr	r3, [r7, #32]
 801581a:	3308      	adds	r3, #8
 801581c:	b2d2      	uxtb	r2, r2
 801581e:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015820:	69bb      	ldr	r3, [r7, #24]
 8015822:	0e1a      	lsrs	r2, r3, #24
 8015824:	6a3b      	ldr	r3, [r7, #32]
 8015826:	3309      	adds	r3, #9
 8015828:	b2d2      	uxtb	r2, r2
 801582a:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801582c:	6a3b      	ldr	r3, [r7, #32]
 801582e:	330a      	adds	r3, #10
 8015830:	69fa      	ldr	r2, [r7, #28]
 8015832:	b2d2      	uxtb	r2, r2
 8015834:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015836:	69fb      	ldr	r3, [r7, #28]
 8015838:	0a1a      	lsrs	r2, r3, #8
 801583a:	6a3b      	ldr	r3, [r7, #32]
 801583c:	330b      	adds	r3, #11
 801583e:	b2d2      	uxtb	r2, r2
 8015840:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	0c1a      	lsrs	r2, r3, #16
 8015846:	6a3b      	ldr	r3, [r7, #32]
 8015848:	330c      	adds	r3, #12
 801584a:	b2d2      	uxtb	r2, r2
 801584c:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801584e:	69fb      	ldr	r3, [r7, #28]
 8015850:	0e1a      	lsrs	r2, r3, #24
 8015852:	6a3b      	ldr	r3, [r7, #32]
 8015854:	330d      	adds	r3, #13
 8015856:	b2d2      	uxtb	r2, r2
 8015858:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801585a:	6a3b      	ldr	r3, [r7, #32]
 801585c:	330e      	adds	r3, #14
 801585e:	2200      	movs	r2, #0
 8015860:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015862:	6a3b      	ldr	r3, [r7, #32]
 8015864:	330f      	adds	r3, #15
 8015866:	1dba      	adds	r2, r7, #6
 8015868:	8812      	ldrh	r2, [r2, #0]
 801586a:	b2d2      	uxtb	r2, r2
 801586c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801586e:	2300      	movs	r3, #0
}
 8015870:	0018      	movs	r0, r3
 8015872:	46bd      	mov	sp, r7
 8015874:	b002      	add	sp, #8
 8015876:	bdb0      	pop	{r4, r5, r7, pc}

08015878 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015878:	b5b0      	push	{r4, r5, r7, lr}
 801587a:	b08a      	sub	sp, #40	; 0x28
 801587c:	af04      	add	r7, sp, #16
 801587e:	6078      	str	r0, [r7, #4]
 8015880:	000c      	movs	r4, r1
 8015882:	0010      	movs	r0, r2
 8015884:	0019      	movs	r1, r3
 8015886:	1cbb      	adds	r3, r7, #2
 8015888:	1c22      	adds	r2, r4, #0
 801588a:	801a      	strh	r2, [r3, #0]
 801588c:	1c7b      	adds	r3, r7, #1
 801588e:	1c02      	adds	r2, r0, #0
 8015890:	701a      	strb	r2, [r3, #0]
 8015892:	003b      	movs	r3, r7
 8015894:	1c0a      	adds	r2, r1, #0
 8015896:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d002      	beq.n	80158a4 <ComputeCmacB0+0x2c>
 801589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d101      	bne.n	80158a8 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80158a4:	230a      	movs	r3, #10
 80158a6:	e02a      	b.n	80158fe <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80158a8:	1cbb      	adds	r3, r7, #2
 80158aa:	881a      	ldrh	r2, [r3, #0]
 80158ac:	2380      	movs	r3, #128	; 0x80
 80158ae:	005b      	lsls	r3, r3, #1
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d901      	bls.n	80158b8 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80158b4:	230e      	movs	r3, #14
 80158b6:	e022      	b.n	80158fe <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80158b8:	2328      	movs	r3, #40	; 0x28
 80158ba:	18fb      	adds	r3, r7, r3
 80158bc:	781c      	ldrb	r4, [r3, #0]
 80158be:	003b      	movs	r3, r7
 80158c0:	781a      	ldrb	r2, [r3, #0]
 80158c2:	1c7b      	adds	r3, r7, #1
 80158c4:	7819      	ldrb	r1, [r3, #0]
 80158c6:	1cbb      	adds	r3, r7, #2
 80158c8:	8818      	ldrh	r0, [r3, #0]
 80158ca:	2508      	movs	r5, #8
 80158cc:	197b      	adds	r3, r7, r5
 80158ce:	9302      	str	r3, [sp, #8]
 80158d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d2:	9301      	str	r3, [sp, #4]
 80158d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d6:	9300      	str	r3, [sp, #0]
 80158d8:	0023      	movs	r3, r4
 80158da:	f7ff ff60 	bl	801579e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80158de:	1c7b      	adds	r3, r7, #1
 80158e0:	781c      	ldrb	r4, [r3, #0]
 80158e2:	1cbb      	adds	r3, r7, #2
 80158e4:	881a      	ldrh	r2, [r3, #0]
 80158e6:	6879      	ldr	r1, [r7, #4]
 80158e8:	1978      	adds	r0, r7, r5
 80158ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158ec:	9300      	str	r3, [sp, #0]
 80158ee:	0023      	movs	r3, r4
 80158f0:	f7f8 f918 	bl	800db24 <SecureElementComputeAesCmac>
 80158f4:	1e03      	subs	r3, r0, #0
 80158f6:	d001      	beq.n	80158fc <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80158f8:	230f      	movs	r3, #15
 80158fa:	e000      	b.n	80158fe <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80158fc:	2300      	movs	r3, #0
}
 80158fe:	0018      	movs	r0, r3
 8015900:	46bd      	mov	sp, r7
 8015902:	b006      	add	sp, #24
 8015904:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015908 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8015908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801590a:	b0cd      	sub	sp, #308	; 0x134
 801590c:	af04      	add	r7, sp, #16
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	000c      	movs	r4, r1
 8015912:	0010      	movs	r0, r2
 8015914:	0019      	movs	r1, r3
 8015916:	4b52      	ldr	r3, [pc, #328]	; (8015a60 <VerifyCmacB0+0x158>)
 8015918:	2290      	movs	r2, #144	; 0x90
 801591a:	0052      	lsls	r2, r2, #1
 801591c:	4694      	mov	ip, r2
 801591e:	44bc      	add	ip, r7
 8015920:	4463      	add	r3, ip
 8015922:	1c22      	adds	r2, r4, #0
 8015924:	801a      	strh	r2, [r3, #0]
 8015926:	4b4f      	ldr	r3, [pc, #316]	; (8015a64 <VerifyCmacB0+0x15c>)
 8015928:	2290      	movs	r2, #144	; 0x90
 801592a:	0052      	lsls	r2, r2, #1
 801592c:	4694      	mov	ip, r2
 801592e:	44bc      	add	ip, r7
 8015930:	4463      	add	r3, ip
 8015932:	1c02      	adds	r2, r0, #0
 8015934:	701a      	strb	r2, [r3, #0]
 8015936:	4b4c      	ldr	r3, [pc, #304]	; (8015a68 <VerifyCmacB0+0x160>)
 8015938:	2290      	movs	r2, #144	; 0x90
 801593a:	0052      	lsls	r2, r2, #1
 801593c:	4694      	mov	ip, r2
 801593e:	44bc      	add	ip, r7
 8015940:	4463      	add	r3, ip
 8015942:	1c0a      	adds	r2, r1, #0
 8015944:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d101      	bne.n	8015950 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801594c:	230a      	movs	r3, #10
 801594e:	e083      	b.n	8015a58 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015950:	4b43      	ldr	r3, [pc, #268]	; (8015a60 <VerifyCmacB0+0x158>)
 8015952:	2290      	movs	r2, #144	; 0x90
 8015954:	0052      	lsls	r2, r2, #1
 8015956:	4694      	mov	ip, r2
 8015958:	44bc      	add	ip, r7
 801595a:	4463      	add	r3, ip
 801595c:	881a      	ldrh	r2, [r3, #0]
 801595e:	2380      	movs	r3, #128	; 0x80
 8015960:	005b      	lsls	r3, r3, #1
 8015962:	429a      	cmp	r2, r3
 8015964:	d901      	bls.n	801596a <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015966:	230e      	movs	r3, #14
 8015968:	e076      	b.n	8015a58 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801596a:	2388      	movs	r3, #136	; 0x88
 801596c:	005a      	lsls	r2, r3, #1
 801596e:	250c      	movs	r5, #12
 8015970:	197b      	adds	r3, r7, r5
 8015972:	2100      	movs	r1, #0
 8015974:	0018      	movs	r0, r3
 8015976:	f003 fe8d 	bl	8019694 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801597a:	2398      	movs	r3, #152	; 0x98
 801597c:	005b      	lsls	r3, r3, #1
 801597e:	2208      	movs	r2, #8
 8015980:	4694      	mov	ip, r2
 8015982:	44bc      	add	ip, r7
 8015984:	4463      	add	r3, ip
 8015986:	781c      	ldrb	r4, [r3, #0]
 8015988:	4b37      	ldr	r3, [pc, #220]	; (8015a68 <VerifyCmacB0+0x160>)
 801598a:	2290      	movs	r2, #144	; 0x90
 801598c:	0052      	lsls	r2, r2, #1
 801598e:	4694      	mov	ip, r2
 8015990:	44bc      	add	ip, r7
 8015992:	4463      	add	r3, ip
 8015994:	781a      	ldrb	r2, [r3, #0]
 8015996:	4b33      	ldr	r3, [pc, #204]	; (8015a64 <VerifyCmacB0+0x15c>)
 8015998:	2190      	movs	r1, #144	; 0x90
 801599a:	0049      	lsls	r1, r1, #1
 801599c:	468c      	mov	ip, r1
 801599e:	44bc      	add	ip, r7
 80159a0:	4463      	add	r3, ip
 80159a2:	7819      	ldrb	r1, [r3, #0]
 80159a4:	4b2e      	ldr	r3, [pc, #184]	; (8015a60 <VerifyCmacB0+0x158>)
 80159a6:	2090      	movs	r0, #144	; 0x90
 80159a8:	0040      	lsls	r0, r0, #1
 80159aa:	4684      	mov	ip, r0
 80159ac:	44bc      	add	ip, r7
 80159ae:	4463      	add	r3, ip
 80159b0:	8818      	ldrh	r0, [r3, #0]
 80159b2:	197b      	adds	r3, r7, r5
 80159b4:	9302      	str	r3, [sp, #8]
 80159b6:	239c      	movs	r3, #156	; 0x9c
 80159b8:	005b      	lsls	r3, r3, #1
 80159ba:	2608      	movs	r6, #8
 80159bc:	46b4      	mov	ip, r6
 80159be:	44bc      	add	ip, r7
 80159c0:	4463      	add	r3, ip
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	9301      	str	r3, [sp, #4]
 80159c6:	239a      	movs	r3, #154	; 0x9a
 80159c8:	005b      	lsls	r3, r3, #1
 80159ca:	2608      	movs	r6, #8
 80159cc:	46b4      	mov	ip, r6
 80159ce:	44bc      	add	ip, r7
 80159d0:	4463      	add	r3, ip
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	9300      	str	r3, [sp, #0]
 80159d6:	0023      	movs	r3, r4
 80159d8:	f7ff fee1 	bl	801579e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80159dc:	197b      	adds	r3, r7, r5
 80159de:	3310      	adds	r3, #16
 80159e0:	4a1f      	ldr	r2, [pc, #124]	; (8015a60 <VerifyCmacB0+0x158>)
 80159e2:	2190      	movs	r1, #144	; 0x90
 80159e4:	0049      	lsls	r1, r1, #1
 80159e6:	468c      	mov	ip, r1
 80159e8:	44bc      	add	ip, r7
 80159ea:	4462      	add	r2, ip
 80159ec:	8812      	ldrh	r2, [r2, #0]
 80159ee:	6879      	ldr	r1, [r7, #4]
 80159f0:	0018      	movs	r0, r3
 80159f2:	f003 fe11 	bl	8019618 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80159f6:	2620      	movs	r6, #32
 80159f8:	36ff      	adds	r6, #255	; 0xff
 80159fa:	19bb      	adds	r3, r7, r6
 80159fc:	2206      	movs	r2, #6
 80159fe:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015a00:	4b17      	ldr	r3, [pc, #92]	; (8015a60 <VerifyCmacB0+0x158>)
 8015a02:	2290      	movs	r2, #144	; 0x90
 8015a04:	0052      	lsls	r2, r2, #1
 8015a06:	4694      	mov	ip, r2
 8015a08:	44bc      	add	ip, r7
 8015a0a:	4463      	add	r3, ip
 8015a0c:	881b      	ldrh	r3, [r3, #0]
 8015a0e:	3310      	adds	r3, #16
 8015a10:	b299      	uxth	r1, r3
 8015a12:	19bc      	adds	r4, r7, r6
 8015a14:	4b13      	ldr	r3, [pc, #76]	; (8015a64 <VerifyCmacB0+0x15c>)
 8015a16:	2290      	movs	r2, #144	; 0x90
 8015a18:	0052      	lsls	r2, r2, #1
 8015a1a:	4694      	mov	ip, r2
 8015a1c:	44bc      	add	ip, r7
 8015a1e:	4463      	add	r3, ip
 8015a20:	781b      	ldrb	r3, [r3, #0]
 8015a22:	229e      	movs	r2, #158	; 0x9e
 8015a24:	0052      	lsls	r2, r2, #1
 8015a26:	2008      	movs	r0, #8
 8015a28:	4684      	mov	ip, r0
 8015a2a:	44bc      	add	ip, r7
 8015a2c:	4462      	add	r2, ip
 8015a2e:	6812      	ldr	r2, [r2, #0]
 8015a30:	1978      	adds	r0, r7, r5
 8015a32:	f7f8 f898 	bl	800db66 <SecureElementVerifyAesCmac>
 8015a36:	0003      	movs	r3, r0
 8015a38:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015a3a:	19bb      	adds	r3, r7, r6
 8015a3c:	781b      	ldrb	r3, [r3, #0]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d101      	bne.n	8015a46 <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015a42:	2300      	movs	r3, #0
 8015a44:	e008      	b.n	8015a58 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015a46:	2320      	movs	r3, #32
 8015a48:	33ff      	adds	r3, #255	; 0xff
 8015a4a:	18fb      	adds	r3, r7, r3
 8015a4c:	781b      	ldrb	r3, [r3, #0]
 8015a4e:	2b01      	cmp	r3, #1
 8015a50:	d101      	bne.n	8015a56 <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015a52:	2301      	movs	r3, #1
 8015a54:	e000      	b.n	8015a58 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015a56:	230f      	movs	r3, #15
}
 8015a58:	0018      	movs	r0, r3
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	b049      	add	sp, #292	; 0x124
 8015a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a60:	fffffee2 	.word	0xfffffee2
 8015a64:	fffffee1 	.word	0xfffffee1
 8015a68:	fffffee0 	.word	0xfffffee0

08015a6c <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b084      	sub	sp, #16
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	0002      	movs	r2, r0
 8015a74:	6039      	str	r1, [r7, #0]
 8015a76:	1dfb      	adds	r3, r7, #7
 8015a78:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015a7a:	230f      	movs	r3, #15
 8015a7c:	18fb      	adds	r3, r7, r3
 8015a7e:	2200      	movs	r2, #0
 8015a80:	701a      	strb	r2, [r3, #0]
 8015a82:	e018      	b.n	8015ab6 <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015a84:	210f      	movs	r1, #15
 8015a86:	187b      	adds	r3, r7, r1
 8015a88:	781a      	ldrb	r2, [r3, #0]
 8015a8a:	4b10      	ldr	r3, [pc, #64]	; (8015acc <GetKeyAddrItem+0x60>)
 8015a8c:	0092      	lsls	r2, r2, #2
 8015a8e:	5cd3      	ldrb	r3, [r2, r3]
 8015a90:	1dfa      	adds	r2, r7, #7
 8015a92:	7812      	ldrb	r2, [r2, #0]
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d108      	bne.n	8015aaa <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 8015a98:	187b      	adds	r3, r7, r1
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	009a      	lsls	r2, r3, #2
 8015a9e:	4b0b      	ldr	r3, [pc, #44]	; (8015acc <GetKeyAddrItem+0x60>)
 8015aa0:	18d2      	adds	r2, r2, r3
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	e00b      	b.n	8015ac2 <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015aaa:	210f      	movs	r1, #15
 8015aac:	187b      	adds	r3, r7, r1
 8015aae:	781a      	ldrb	r2, [r3, #0]
 8015ab0:	187b      	adds	r3, r7, r1
 8015ab2:	3201      	adds	r2, #1
 8015ab4:	701a      	strb	r2, [r3, #0]
 8015ab6:	230f      	movs	r3, #15
 8015ab8:	18fb      	adds	r3, r7, r3
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d9e1      	bls.n	8015a84 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8015ac0:	230c      	movs	r3, #12
}
 8015ac2:	0018      	movs	r0, r3
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	b004      	add	sp, #16
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	46c0      	nop			; (mov r8, r8)
 8015acc:	200001a4 	.word	0x200001a4

08015ad0 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 8015ad0:	b590      	push	{r4, r7, lr}
 8015ad2:	b089      	sub	sp, #36	; 0x24
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	60b9      	str	r1, [r7, #8]
 8015ad8:	607a      	str	r2, [r7, #4]
 8015ada:	603b      	str	r3, [r7, #0]
 8015adc:	230f      	movs	r3, #15
 8015ade:	18fb      	adds	r3, r7, r3
 8015ae0:	1c02      	adds	r2, r0, #0
 8015ae2:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d005      	beq.n	8015af6 <DeriveSessionKey10x+0x26>
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d002      	beq.n	8015af6 <DeriveSessionKey10x+0x26>
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d101      	bne.n	8015afa <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015af6:	230a      	movs	r3, #10
 8015af8:	e043      	b.n	8015b82 <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 8015afa:	2310      	movs	r3, #16
 8015afc:	18fb      	adds	r3, r7, r3
 8015afe:	2200      	movs	r2, #0
 8015b00:	601a      	str	r2, [r3, #0]
 8015b02:	3304      	adds	r3, #4
 8015b04:	220c      	movs	r2, #12
 8015b06:	2100      	movs	r1, #0
 8015b08:	0018      	movs	r0, r3
 8015b0a:	f008 fae2 	bl	801e0d2 <memset>

    switch( keyID )
 8015b0e:	230f      	movs	r3, #15
 8015b10:	18fb      	adds	r3, r7, r3
 8015b12:	781b      	ldrb	r3, [r3, #0]
 8015b14:	2b02      	cmp	r3, #2
 8015b16:	d002      	beq.n	8015b1e <DeriveSessionKey10x+0x4e>
 8015b18:	2b03      	cmp	r3, #3
 8015b1a:	d005      	beq.n	8015b28 <DeriveSessionKey10x+0x58>
 8015b1c:	e009      	b.n	8015b32 <DeriveSessionKey10x+0x62>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8015b1e:	2310      	movs	r3, #16
 8015b20:	18fb      	adds	r3, r7, r3
 8015b22:	2201      	movs	r2, #1
 8015b24:	701a      	strb	r2, [r3, #0]
            break;
 8015b26:	e006      	b.n	8015b36 <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015b28:	2310      	movs	r3, #16
 8015b2a:	18fb      	adds	r3, r7, r3
 8015b2c:	2202      	movs	r2, #2
 8015b2e:	701a      	strb	r2, [r3, #0]
            break;
 8015b30:	e001      	b.n	8015b36 <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015b32:	230b      	movs	r3, #11
 8015b34:	e025      	b.n	8015b82 <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8015b36:	2410      	movs	r4, #16
 8015b38:	193b      	adds	r3, r7, r4
 8015b3a:	3301      	adds	r3, #1
 8015b3c:	68b9      	ldr	r1, [r7, #8]
 8015b3e:	2203      	movs	r2, #3
 8015b40:	0018      	movs	r0, r3
 8015b42:	f003 fd69 	bl	8019618 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8015b46:	193b      	adds	r3, r7, r4
 8015b48:	3304      	adds	r3, #4
 8015b4a:	6879      	ldr	r1, [r7, #4]
 8015b4c:	2203      	movs	r2, #3
 8015b4e:	0018      	movs	r0, r3
 8015b50:	f003 fd62 	bl	8019618 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8015b54:	193b      	adds	r3, r7, r4
 8015b56:	3307      	adds	r3, #7
 8015b58:	6839      	ldr	r1, [r7, #0]
 8015b5a:	2202      	movs	r2, #2
 8015b5c:	0018      	movs	r0, r3
 8015b5e:	f003 fd5b 	bl	8019618 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015b62:	4b0a      	ldr	r3, [pc, #40]	; (8015b8c <DeriveSessionKey10x+0xbc>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	220f      	movs	r2, #15
 8015b68:	18ba      	adds	r2, r7, r2
 8015b6a:	7812      	ldrb	r2, [r2, #0]
 8015b6c:	1939      	adds	r1, r7, r4
 8015b6e:	6818      	ldr	r0, [r3, #0]
 8015b70:	0013      	movs	r3, r2
 8015b72:	2201      	movs	r2, #1
 8015b74:	f7f8 f8aa 	bl	800dccc <SecureElementDeriveAndStoreKey>
 8015b78:	1e03      	subs	r3, r0, #0
 8015b7a:	d001      	beq.n	8015b80 <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015b7c:	230f      	movs	r3, #15
 8015b7e:	e000      	b.n	8015b82 <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015b80:	2300      	movs	r3, #0
}
 8015b82:	0018      	movs	r0, r3
 8015b84:	46bd      	mov	sp, r7
 8015b86:	b009      	add	sp, #36	; 0x24
 8015b88:	bd90      	pop	{r4, r7, pc}
 8015b8a:	46c0      	nop			; (mov r8, r8)
 8015b8c:	20000d18 	.word	0x20000d18

08015b90 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b082      	sub	sp, #8
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	0002      	movs	r2, r0
 8015b98:	6039      	str	r1, [r7, #0]
 8015b9a:	1dfb      	adds	r3, r7, #7
 8015b9c:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d101      	bne.n	8015ba8 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015ba4:	230a      	movs	r3, #10
 8015ba6:	e039      	b.n	8015c1c <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 8015ba8:	1dfb      	adds	r3, r7, #7
 8015baa:	781b      	ldrb	r3, [r3, #0]
 8015bac:	2b04      	cmp	r3, #4
 8015bae:	d02c      	beq.n	8015c0a <GetLastFcntDown+0x7a>
 8015bb0:	dc31      	bgt.n	8015c16 <GetLastFcntDown+0x86>
 8015bb2:	2b03      	cmp	r3, #3
 8015bb4:	d01d      	beq.n	8015bf2 <GetLastFcntDown+0x62>
 8015bb6:	dc2e      	bgt.n	8015c16 <GetLastFcntDown+0x86>
 8015bb8:	2b01      	cmp	r3, #1
 8015bba:	d002      	beq.n	8015bc2 <GetLastFcntDown+0x32>
 8015bbc:	2b02      	cmp	r3, #2
 8015bbe:	d00c      	beq.n	8015bda <GetLastFcntDown+0x4a>
 8015bc0:	e029      	b.n	8015c16 <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015bc2:	4b18      	ldr	r3, [pc, #96]	; (8015c24 <GetLastFcntDown+0x94>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	691a      	ldr	r2, [r3, #16]
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015bcc:	4b15      	ldr	r3, [pc, #84]	; (8015c24 <GetLastFcntDown+0x94>)
 8015bce:	681a      	ldr	r2, [r3, #0]
 8015bd0:	4b14      	ldr	r3, [pc, #80]	; (8015c24 <GetLastFcntDown+0x94>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	3210      	adds	r2, #16
 8015bd6:	621a      	str	r2, [r3, #32]
            break;
 8015bd8:	e01f      	b.n	8015c1a <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015bda:	4b12      	ldr	r3, [pc, #72]	; (8015c24 <GetLastFcntDown+0x94>)
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	695a      	ldr	r2, [r3, #20]
 8015be0:	683b      	ldr	r3, [r7, #0]
 8015be2:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015be4:	4b0f      	ldr	r3, [pc, #60]	; (8015c24 <GetLastFcntDown+0x94>)
 8015be6:	681a      	ldr	r2, [r3, #0]
 8015be8:	4b0e      	ldr	r3, [pc, #56]	; (8015c24 <GetLastFcntDown+0x94>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	3214      	adds	r2, #20
 8015bee:	621a      	str	r2, [r3, #32]
            break;
 8015bf0:	e013      	b.n	8015c1a <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015bf2:	4b0c      	ldr	r3, [pc, #48]	; (8015c24 <GetLastFcntDown+0x94>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	699a      	ldr	r2, [r3, #24]
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015bfc:	4b09      	ldr	r3, [pc, #36]	; (8015c24 <GetLastFcntDown+0x94>)
 8015bfe:	681a      	ldr	r2, [r3, #0]
 8015c00:	4b08      	ldr	r3, [pc, #32]	; (8015c24 <GetLastFcntDown+0x94>)
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	3218      	adds	r2, #24
 8015c06:	621a      	str	r2, [r3, #32]
            break;
 8015c08:	e007      	b.n	8015c1a <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8015c0a:	4b06      	ldr	r3, [pc, #24]	; (8015c24 <GetLastFcntDown+0x94>)
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	69da      	ldr	r2, [r3, #28]
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	601a      	str	r2, [r3, #0]
            break;
 8015c14:	e001      	b.n	8015c1a <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015c16:	2305      	movs	r3, #5
 8015c18:	e000      	b.n	8015c1c <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015c1a:	2300      	movs	r3, #0
}
 8015c1c:	0018      	movs	r0, r3
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	b002      	add	sp, #8
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	20000d18 	.word	0x20000d18

08015c28 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	0002      	movs	r2, r0
 8015c30:	6039      	str	r1, [r7, #0]
 8015c32:	1dfb      	adds	r3, r7, #7
 8015c34:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015c36:	2300      	movs	r3, #0
 8015c38:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015c3a:	230c      	movs	r3, #12
 8015c3c:	18fa      	adds	r2, r7, r3
 8015c3e:	1dfb      	adds	r3, r7, #7
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	0011      	movs	r1, r2
 8015c44:	0018      	movs	r0, r3
 8015c46:	f7ff ffa3 	bl	8015b90 <GetLastFcntDown>
 8015c4a:	1e03      	subs	r3, r0, #0
 8015c4c:	d001      	beq.n	8015c52 <CheckFCntDown+0x2a>
    {
        return false;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	e009      	b.n	8015c66 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	683a      	ldr	r2, [r7, #0]
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d802      	bhi.n	8015c60 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8015c5a:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015c5c:	3301      	adds	r3, #1
 8015c5e:	d101      	bne.n	8015c64 <CheckFCntDown+0x3c>
    {
        return true;
 8015c60:	2301      	movs	r3, #1
 8015c62:	e000      	b.n	8015c66 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015c64:	2300      	movs	r3, #0
    }
}
 8015c66:	0018      	movs	r0, r3
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	b004      	add	sp, #16
 8015c6c:	bd80      	pop	{r7, pc}
	...

08015c70 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	0002      	movs	r2, r0
 8015c78:	6039      	str	r1, [r7, #0]
 8015c7a:	1dfb      	adds	r3, r7, #7
 8015c7c:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8015c7e:	1dfb      	adds	r3, r7, #7
 8015c80:	781b      	ldrb	r3, [r3, #0]
 8015c82:	2b04      	cmp	r3, #4
 8015c84:	d017      	beq.n	8015cb6 <UpdateFCntDown+0x46>
 8015c86:	dc1b      	bgt.n	8015cc0 <UpdateFCntDown+0x50>
 8015c88:	2b03      	cmp	r3, #3
 8015c8a:	d00f      	beq.n	8015cac <UpdateFCntDown+0x3c>
 8015c8c:	dc18      	bgt.n	8015cc0 <UpdateFCntDown+0x50>
 8015c8e:	2b01      	cmp	r3, #1
 8015c90:	d002      	beq.n	8015c98 <UpdateFCntDown+0x28>
 8015c92:	2b02      	cmp	r3, #2
 8015c94:	d005      	beq.n	8015ca2 <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 8015c96:	e013      	b.n	8015cc0 <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8015c98:	4b0d      	ldr	r3, [pc, #52]	; (8015cd0 <UpdateFCntDown+0x60>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	683a      	ldr	r2, [r7, #0]
 8015c9e:	611a      	str	r2, [r3, #16]
            break;
 8015ca0:	e00f      	b.n	8015cc2 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 8015ca2:	4b0b      	ldr	r3, [pc, #44]	; (8015cd0 <UpdateFCntDown+0x60>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	683a      	ldr	r2, [r7, #0]
 8015ca8:	615a      	str	r2, [r3, #20]
            break;
 8015caa:	e00a      	b.n	8015cc2 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8015cac:	4b08      	ldr	r3, [pc, #32]	; (8015cd0 <UpdateFCntDown+0x60>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	683a      	ldr	r2, [r7, #0]
 8015cb2:	619a      	str	r2, [r3, #24]
            break;
 8015cb4:	e005      	b.n	8015cc2 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8015cb6:	4b06      	ldr	r3, [pc, #24]	; (8015cd0 <UpdateFCntDown+0x60>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	683a      	ldr	r2, [r7, #0]
 8015cbc:	61da      	str	r2, [r3, #28]
            break;
 8015cbe:	e000      	b.n	8015cc2 <UpdateFCntDown+0x52>
            break;
 8015cc0:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015cc2:	4b03      	ldr	r3, [pc, #12]	; (8015cd0 <UpdateFCntDown+0x60>)
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	4798      	blx	r3
}
 8015cc8:	46c0      	nop			; (mov r8, r8)
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	b002      	add	sp, #8
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	20000d18 	.word	0x20000d18

08015cd4 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8015cd8:	4b11      	ldr	r3, [pc, #68]	; (8015d20 <ResetFCnts+0x4c>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	2200      	movs	r2, #0
 8015cde:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015ce0:	4b0f      	ldr	r3, [pc, #60]	; (8015d20 <ResetFCnts+0x4c>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	2201      	movs	r2, #1
 8015ce6:	4252      	negs	r2, r2
 8015ce8:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015cea:	4b0d      	ldr	r3, [pc, #52]	; (8015d20 <ResetFCnts+0x4c>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	2201      	movs	r2, #1
 8015cf0:	4252      	negs	r2, r2
 8015cf2:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015cf4:	4b0a      	ldr	r3, [pc, #40]	; (8015d20 <ResetFCnts+0x4c>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	2201      	movs	r2, #1
 8015cfa:	4252      	negs	r2, r2
 8015cfc:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015cfe:	4b08      	ldr	r3, [pc, #32]	; (8015d20 <ResetFCnts+0x4c>)
 8015d00:	681a      	ldr	r2, [r3, #0]
 8015d02:	4b07      	ldr	r3, [pc, #28]	; (8015d20 <ResetFCnts+0x4c>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	3218      	adds	r2, #24
 8015d08:	621a      	str	r2, [r3, #32]

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8015d0a:	4b05      	ldr	r3, [pc, #20]	; (8015d20 <ResetFCnts+0x4c>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	2201      	movs	r2, #1
 8015d10:	4252      	negs	r2, r2
 8015d12:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015d14:	4b02      	ldr	r3, [pc, #8]	; (8015d20 <ResetFCnts+0x4c>)
 8015d16:	685b      	ldr	r3, [r3, #4]
 8015d18:	4798      	blx	r3
}
 8015d1a:	46c0      	nop			; (mov r8, r8)
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd80      	pop	{r7, pc}
 8015d20:	20000d18 	.word	0x20000d18

08015d24 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	af00      	add	r7, sp, #0
    return;
 8015d28:	46c0      	nop			; (mov r8, r8)
}
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
	...

08015d30 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b082      	sub	sp, #8
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8015d38:	4b15      	ldr	r3, [pc, #84]	; (8015d90 <LoRaMacCryptoInit+0x60>)
 8015d3a:	4a16      	ldr	r2, [pc, #88]	; (8015d94 <LoRaMacCryptoInit+0x64>)
 8015d3c:	601a      	str	r2, [r3, #0]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d003      	beq.n	8015d4c <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8015d44:	4b12      	ldr	r3, [pc, #72]	; (8015d90 <LoRaMacCryptoInit+0x60>)
 8015d46:	687a      	ldr	r2, [r7, #4]
 8015d48:	605a      	str	r2, [r3, #4]
 8015d4a:	e002      	b.n	8015d52 <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8015d4c:	4b10      	ldr	r3, [pc, #64]	; (8015d90 <LoRaMacCryptoInit+0x60>)
 8015d4e:	4a12      	ldr	r2, [pc, #72]	; (8015d98 <LoRaMacCryptoInit+0x68>)
 8015d50:	605a      	str	r2, [r3, #4]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8015d52:	4b0f      	ldr	r3, [pc, #60]	; (8015d90 <LoRaMacCryptoInit+0x60>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	2224      	movs	r2, #36	; 0x24
 8015d58:	2100      	movs	r1, #0
 8015d5a:	0018      	movs	r0, r3
 8015d5c:	f003 fc9a 	bl	8019694 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 8015d60:	4b0b      	ldr	r3, [pc, #44]	; (8015d90 <LoRaMacCryptoInit+0x60>)
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	2201      	movs	r2, #1
 8015d66:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8015d68:	4b09      	ldr	r3, [pc, #36]	; (8015d90 <LoRaMacCryptoInit+0x60>)
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	2201      	movs	r2, #1
 8015d6e:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 8015d70:	4b07      	ldr	r3, [pc, #28]	; (8015d90 <LoRaMacCryptoInit+0x60>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	2201      	movs	r2, #1
 8015d76:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 8015d78:	4b05      	ldr	r3, [pc, #20]	; (8015d90 <LoRaMacCryptoInit+0x60>)
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8015d80:	f7ff ffa8 	bl	8015cd4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015d84:	2300      	movs	r3, #0
}
 8015d86:	0018      	movs	r0, r3
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	b002      	add	sp, #8
 8015d8c:	bd80      	pop	{r7, pc}
 8015d8e:	46c0      	nop			; (mov r8, r8)
 8015d90:	20000d18 	.word	0x20000d18
 8015d94:	20000d20 	.word	0x20000d20
 8015d98:	08015d25 	.word	0x08015d25

08015d9c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b082      	sub	sp, #8
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8015da4:	4b04      	ldr	r3, [pc, #16]	; (8015db8 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	687a      	ldr	r2, [r7, #4]
 8015daa:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015dac:	2300      	movs	r3, #0
}
 8015dae:	0018      	movs	r0, r3
 8015db0:	46bd      	mov	sp, r7
 8015db2:	b002      	add	sp, #8
 8015db4:	bd80      	pop	{r7, pc}
 8015db6:	46c0      	nop			; (mov r8, r8)
 8015db8:	20000d18 	.word	0x20000d18

08015dbc <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b082      	sub	sp, #8
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d007      	beq.n	8015dda <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8015dca:	6879      	ldr	r1, [r7, #4]
 8015dcc:	4b05      	ldr	r3, [pc, #20]	; (8015de4 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8015dce:	2224      	movs	r2, #36	; 0x24
 8015dd0:	0018      	movs	r0, r3
 8015dd2:	f003 fc21 	bl	8019618 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	e000      	b.n	8015ddc <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015dda:	230a      	movs	r3, #10
    }
}
 8015ddc:	0018      	movs	r0, r3
 8015dde:	46bd      	mov	sp, r7
 8015de0:	b002      	add	sp, #8
 8015de2:	bd80      	pop	{r7, pc}
 8015de4:	20000d20 	.word	0x20000d20

08015de8 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b082      	sub	sp, #8
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2224      	movs	r2, #36	; 0x24
 8015df4:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8015df6:	4b02      	ldr	r3, [pc, #8]	; (8015e00 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8015df8:	0018      	movs	r0, r3
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	b002      	add	sp, #8
 8015dfe:	bd80      	pop	{r7, pc}
 8015e00:	20000d20 	.word	0x20000d20

08015e04 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b082      	sub	sp, #8
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d101      	bne.n	8015e16 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e12:	230a      	movs	r3, #10
 8015e14:	e006      	b.n	8015e24 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8015e16:	4b05      	ldr	r3, [pc, #20]	; (8015e2c <LoRaMacCryptoGetFCntUp+0x28>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	68db      	ldr	r3, [r3, #12]
 8015e1c:	1c5a      	adds	r2, r3, #1
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015e22:	2300      	movs	r3, #0
}
 8015e24:	0018      	movs	r0, r3
 8015e26:	46bd      	mov	sp, r7
 8015e28:	b002      	add	sp, #8
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	20000d18 	.word	0x20000d18

08015e30 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e32:	b08d      	sub	sp, #52	; 0x34
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	61ba      	str	r2, [r7, #24]
 8015e38:	617b      	str	r3, [r7, #20]
 8015e3a:	230f      	movs	r3, #15
 8015e3c:	2210      	movs	r2, #16
 8015e3e:	4694      	mov	ip, r2
 8015e40:	44bc      	add	ip, r7
 8015e42:	4463      	add	r3, ip
 8015e44:	1c02      	adds	r2, r0, #0
 8015e46:	701a      	strb	r2, [r3, #0]
 8015e48:	230c      	movs	r3, #12
 8015e4a:	2210      	movs	r2, #16
 8015e4c:	4694      	mov	ip, r2
 8015e4e:	44bc      	add	ip, r7
 8015e50:	4463      	add	r3, ip
 8015e52:	1c0a      	adds	r2, r1, #0
 8015e54:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015e56:	2300      	movs	r3, #0
 8015e58:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8015e5e:	231b      	movs	r3, #27
 8015e60:	2210      	movs	r2, #16
 8015e62:	4694      	mov	ip, r2
 8015e64:	44bc      	add	ip, r7
 8015e66:	4463      	add	r3, ip
 8015e68:	2213      	movs	r2, #19
 8015e6a:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 8015e6c:	697b      	ldr	r3, [r7, #20]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d101      	bne.n	8015e76 <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e72:	230a      	movs	r3, #10
 8015e74:	e06b      	b.n	8015f4e <LoRaMacCryptoGetFCntDown+0x11e>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015e76:	221b      	movs	r2, #27
 8015e78:	2110      	movs	r1, #16
 8015e7a:	187b      	adds	r3, r7, r1
 8015e7c:	189e      	adds	r6, r3, r2
 8015e7e:	2314      	movs	r3, #20
 8015e80:	187a      	adds	r2, r7, r1
 8015e82:	18d2      	adds	r2, r2, r3
 8015e84:	230f      	movs	r3, #15
 8015e86:	2010      	movs	r0, #16
 8015e88:	4684      	mov	ip, r0
 8015e8a:	44bc      	add	ip, r7
 8015e8c:	4463      	add	r3, ip
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	0011      	movs	r1, r2
 8015e92:	0018      	movs	r0, r3
 8015e94:	f7ff fe7c 	bl	8015b90 <GetLastFcntDown>
 8015e98:	0003      	movs	r3, r0
 8015e9a:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015e9c:	221b      	movs	r2, #27
 8015e9e:	2110      	movs	r1, #16
 8015ea0:	187b      	adds	r3, r7, r1
 8015ea2:	189b      	adds	r3, r3, r2
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d003      	beq.n	8015eb2 <LoRaMacCryptoGetFCntDown+0x82>
    {
        return cryptoStatus;
 8015eaa:	187b      	adds	r3, r7, r1
 8015eac:	189b      	adds	r3, r3, r2
 8015eae:	781b      	ldrb	r3, [r3, #0]
 8015eb0:	e04d      	b.n	8015f4e <LoRaMacCryptoGetFCntDown+0x11e>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8015eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb4:	3301      	adds	r3, #1
 8015eb6:	d103      	bne.n	8015ec0 <LoRaMacCryptoGetFCntDown+0x90>
    {
        *currentDown = frameFcnt;
 8015eb8:	697b      	ldr	r3, [r7, #20]
 8015eba:	69ba      	ldr	r2, [r7, #24]
 8015ebc:	601a      	str	r2, [r3, #0]
 8015ebe:	e020      	b.n	8015f02 <LoRaMacCryptoGetFCntDown+0xd2>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec2:	041b      	lsls	r3, r3, #16
 8015ec4:	0c1b      	lsrs	r3, r3, #16
 8015ec6:	69ba      	ldr	r2, [r7, #24]
 8015ec8:	1ad3      	subs	r3, r2, r3
 8015eca:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8015ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	dd05      	ble.n	8015ede <LoRaMacCryptoGetFCntDown+0xae>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed6:	18d2      	adds	r2, r2, r3
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	601a      	str	r2, [r3, #0]
 8015edc:	e011      	b.n	8015f02 <LoRaMacCryptoGetFCntDown+0xd2>
        }
        else if( fCntDiff == 0 )
 8015ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d104      	bne.n	8015eee <LoRaMacCryptoGetFCntDown+0xbe>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ee6:	697b      	ldr	r3, [r7, #20]
 8015ee8:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015eea:	2307      	movs	r3, #7
 8015eec:	e02f      	b.n	8015f4e <LoRaMacCryptoGetFCntDown+0x11e>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef0:	0c1b      	lsrs	r3, r3, #16
 8015ef2:	041a      	lsls	r2, r3, #16
 8015ef4:	69bb      	ldr	r3, [r7, #24]
 8015ef6:	18d3      	adds	r3, r2, r3
 8015ef8:	2280      	movs	r2, #128	; 0x80
 8015efa:	0252      	lsls	r2, r2, #9
 8015efc:	189a      	adds	r2, r3, r2
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015f02:	4b15      	ldr	r3, [pc, #84]	; (8015f58 <LoRaMacCryptoGetFCntDown+0x128>)
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	789b      	ldrb	r3, [r3, #2]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d11f      	bne.n	8015f4c <LoRaMacCryptoGetFCntDown+0x11c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	60bb      	str	r3, [r7, #8]
 8015f12:	2300      	movs	r3, #0
 8015f14:	60fb      	str	r3, [r7, #12]
 8015f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f18:	603b      	str	r3, [r7, #0]
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	607b      	str	r3, [r7, #4]
 8015f1e:	68ba      	ldr	r2, [r7, #8]
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	6838      	ldr	r0, [r7, #0]
 8015f24:	6879      	ldr	r1, [r7, #4]
 8015f26:	1a12      	subs	r2, r2, r0
 8015f28:	418b      	sbcs	r3, r1
 8015f2a:	210c      	movs	r1, #12
 8015f2c:	2010      	movs	r0, #16
 8015f2e:	4684      	mov	ip, r0
 8015f30:	44bc      	add	ip, r7
 8015f32:	4461      	add	r1, ip
 8015f34:	8809      	ldrh	r1, [r1, #0]
 8015f36:	b289      	uxth	r1, r1
 8015f38:	000c      	movs	r4, r1
 8015f3a:	2100      	movs	r1, #0
 8015f3c:	000d      	movs	r5, r1
 8015f3e:	429d      	cmp	r5, r3
 8015f40:	dc04      	bgt.n	8015f4c <LoRaMacCryptoGetFCntDown+0x11c>
 8015f42:	d101      	bne.n	8015f48 <LoRaMacCryptoGetFCntDown+0x118>
 8015f44:	4294      	cmp	r4, r2
 8015f46:	d801      	bhi.n	8015f4c <LoRaMacCryptoGetFCntDown+0x11c>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8015f48:	2308      	movs	r3, #8
 8015f4a:	e000      	b.n	8015f4e <LoRaMacCryptoGetFCntDown+0x11e>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015f4c:	2300      	movs	r3, #0
}
 8015f4e:	0018      	movs	r0, r3
 8015f50:	46bd      	mov	sp, r7
 8015f52:	b00d      	add	sp, #52	; 0x34
 8015f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f56:	46c0      	nop			; (mov r8, r8)
 8015f58:	20000d18 	.word	0x20000d18

08015f5c <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b082      	sub	sp, #8
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d101      	bne.n	8015f6e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f6a:	230a      	movs	r3, #10
 8015f6c:	e006      	b.n	8015f7c <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8015f6e:	4b05      	ldr	r3, [pc, #20]	; (8015f84 <LoRaMacCryptoSetMulticastReference+0x28>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	331c      	adds	r3, #28
 8015f74:	001a      	movs	r2, r3
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 8015f7a:	2300      	movs	r3, #0
}
 8015f7c:	0018      	movs	r0, r3
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	b002      	add	sp, #8
 8015f82:	bd80      	pop	{r7, pc}
 8015f84:	20000d18 	.word	0x20000d18

08015f88 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	0002      	movs	r2, r0
 8015f90:	6039      	str	r1, [r7, #0]
 8015f92:	1dfb      	adds	r3, r7, #7
 8015f94:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015f96:	683a      	ldr	r2, [r7, #0]
 8015f98:	1dfb      	adds	r3, r7, #7
 8015f9a:	781b      	ldrb	r3, [r3, #0]
 8015f9c:	0011      	movs	r1, r2
 8015f9e:	0018      	movs	r0, r3
 8015fa0:	f7f7 fd46 	bl	800da30 <SecureElementSetKey>
 8015fa4:	1e03      	subs	r3, r0, #0
 8015fa6:	d001      	beq.n	8015fac <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015fa8:	230f      	movs	r3, #15
 8015faa:	e014      	b.n	8015fd6 <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 8015fac:	1dfb      	adds	r3, r7, #7
 8015fae:	781b      	ldrb	r3, [r3, #0]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d10f      	bne.n	8015fd4 <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015fb4:	1dfb      	adds	r3, r7, #7
 8015fb6:	781b      	ldrb	r3, [r3, #0]
 8015fb8:	0018      	movs	r0, r3
 8015fba:	f000 fa79 	bl	80164b0 <LoRaMacCryptoDeriveMcRootKey>
 8015fbe:	1e03      	subs	r3, r0, #0
 8015fc0:	d001      	beq.n	8015fc6 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015fc2:	230f      	movs	r3, #15
 8015fc4:	e007      	b.n	8015fd6 <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015fc6:	2004      	movs	r0, #4
 8015fc8:	f000 faa6 	bl	8016518 <LoRaMacCryptoDeriveMcKEKey>
 8015fcc:	1e03      	subs	r3, r0, #0
 8015fce:	d001      	beq.n	8015fd4 <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015fd0:	230f      	movs	r3, #15
 8015fd2:	e000      	b.n	8015fd6 <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015fd4:	2300      	movs	r3, #0
}
 8015fd6:	0018      	movs	r0, r3
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	b002      	add	sp, #8
 8015fdc:	bd80      	pop	{r7, pc}
	...

08015fe0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b086      	sub	sp, #24
 8015fe4:	af02      	add	r7, sp, #8
 8015fe6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d101      	bne.n	8015ff2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015fee:	230a      	movs	r3, #10
 8015ff0:	e039      	b.n	8016066 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015ff2:	230f      	movs	r3, #15
 8015ff4:	18fb      	adds	r3, r7, r3
 8015ff6:	2201      	movs	r2, #1
 8015ff8:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8015ffe:	2308      	movs	r3, #8
 8016000:	18fb      	adds	r3, r7, r3
 8016002:	0018      	movs	r0, r3
 8016004:	f7f7 ff3e 	bl	800de84 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8016008:	68ba      	ldr	r2, [r7, #8]
 801600a:	4b19      	ldr	r3, [pc, #100]	; (8016070 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	b292      	uxth	r2, r2
 8016010:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8016012:	4b17      	ldr	r3, [pc, #92]	; (8016070 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8016018:	4b15      	ldr	r3, [pc, #84]	; (8016070 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	889a      	ldrh	r2, [r3, #4]
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	0018      	movs	r0, r3
 8016026:	f000 fca1 	bl	801696c <LoRaMacSerializerJoinRequest>
 801602a:	1e03      	subs	r3, r0, #0
 801602c:	d001      	beq.n	8016032 <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801602e:	2311      	movs	r3, #17
 8016030:	e019      	b.n	8016066 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6819      	ldr	r1, [r3, #0]
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	3318      	adds	r3, #24
 801603a:	220f      	movs	r2, #15
 801603c:	18ba      	adds	r2, r7, r2
 801603e:	7812      	ldrb	r2, [r2, #0]
 8016040:	9300      	str	r3, [sp, #0]
 8016042:	0013      	movs	r3, r2
 8016044:	2213      	movs	r2, #19
 8016046:	2000      	movs	r0, #0
 8016048:	f7f7 fd6c 	bl	800db24 <SecureElementComputeAesCmac>
 801604c:	1e03      	subs	r3, r0, #0
 801604e:	d001      	beq.n	8016054 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016050:	230f      	movs	r3, #15
 8016052:	e008      	b.n	8016066 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	0018      	movs	r0, r3
 8016058:	f000 fc88 	bl	801696c <LoRaMacSerializerJoinRequest>
 801605c:	1e03      	subs	r3, r0, #0
 801605e:	d001      	beq.n	8016064 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016060:	2311      	movs	r3, #17
 8016062:	e000      	b.n	8016066 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016064:	2300      	movs	r3, #0
}
 8016066:	0018      	movs	r0, r3
 8016068:	46bd      	mov	sp, r7
 801606a:	b004      	add	sp, #16
 801606c:	bd80      	pop	{r7, pc}
 801606e:	46c0      	nop			; (mov r8, r8)
 8016070:	20000d18 	.word	0x20000d18

08016074 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016076:	b095      	sub	sp, #84	; 0x54
 8016078:	af04      	add	r7, sp, #16
 801607a:	60b9      	str	r1, [r7, #8]
 801607c:	607a      	str	r2, [r7, #4]
 801607e:	230f      	movs	r3, #15
 8016080:	18fb      	adds	r3, r7, r3
 8016082:	1c02      	adds	r2, r0, #0
 8016084:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d002      	beq.n	8016092 <LoRaMacCryptoHandleJoinAccept+0x1e>
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d101      	bne.n	8016096 <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016092:	230a      	movs	r3, #10
 8016094:	e0a7      	b.n	80161e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016096:	233f      	movs	r3, #63	; 0x3f
 8016098:	18fb      	adds	r3, r7, r3
 801609a:	2213      	movs	r2, #19
 801609c:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801609e:	2614      	movs	r6, #20
 80160a0:	19bb      	adds	r3, r7, r6
 80160a2:	2200      	movs	r2, #0
 80160a4:	601a      	str	r2, [r3, #0]
 80160a6:	3304      	adds	r3, #4
 80160a8:	221d      	movs	r2, #29
 80160aa:	2100      	movs	r1, #0
 80160ac:	0018      	movs	r0, r3
 80160ae:	f008 f810 	bl	801e0d2 <memset>
    uint8_t versionMinor         = 0;
 80160b2:	2313      	movs	r3, #19
 80160b4:	18fb      	adds	r3, r7, r3
 80160b6:	2200      	movs	r2, #0
 80160b8:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 80160ba:	4b4d      	ldr	r3, [pc, #308]	; (80161f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	3304      	adds	r3, #4
 80160c0:	63bb      	str	r3, [r7, #56]	; 0x38
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 80160c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160c4:	781b      	ldrb	r3, [r3, #0]
 80160c6:	b29c      	uxth	r4, r3
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681d      	ldr	r5, [r3, #0]
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	791b      	ldrb	r3, [r3, #4]
 80160d0:	68b9      	ldr	r1, [r7, #8]
 80160d2:	200f      	movs	r0, #15
 80160d4:	183a      	adds	r2, r7, r0
 80160d6:	7810      	ldrb	r0, [r2, #0]
 80160d8:	2213      	movs	r2, #19
 80160da:	18ba      	adds	r2, r7, r2
 80160dc:	9202      	str	r2, [sp, #8]
 80160de:	19ba      	adds	r2, r7, r6
 80160e0:	9201      	str	r2, [sp, #4]
 80160e2:	9300      	str	r3, [sp, #0]
 80160e4:	002b      	movs	r3, r5
 80160e6:	0022      	movs	r2, r4
 80160e8:	f7f7 fe45 	bl	800dd76 <SecureElementProcessJoinAccept>
 80160ec:	1e03      	subs	r3, r0, #0
 80160ee:	d001      	beq.n	80160f4 <LoRaMacCryptoHandleJoinAccept+0x80>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80160f0:	230f      	movs	r3, #15
 80160f2:	e078      	b.n	80161e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6818      	ldr	r0, [r3, #0]
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	791b      	ldrb	r3, [r3, #4]
 80160fc:	b29a      	uxth	r2, r3
 80160fe:	2314      	movs	r3, #20
 8016100:	18fb      	adds	r3, r7, r3
 8016102:	0019      	movs	r1, r3
 8016104:	f003 fa88 	bl	8019618 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	0018      	movs	r0, r3
 801610c:	f000 fa2e 	bl	801656c <LoRaMacParserJoinAccept>
 8016110:	1e03      	subs	r3, r0, #0
 8016112:	d001      	beq.n	8016118 <LoRaMacCryptoHandleJoinAccept+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016114:	2310      	movs	r3, #16
 8016116:	e066      	b.n	80161e6 <LoRaMacCryptoHandleJoinAccept+0x172>
            return retval;
        }
    }
#else
    // Operating in LoRaWAN 1.0.x mode
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 8016118:	253f      	movs	r5, #63	; 0x3f
 801611a:	197c      	adds	r4, r7, r5
 801611c:	2000      	movs	r0, #0
 801611e:	f000 f9c7 	bl	80164b0 <LoRaMacCryptoDeriveMcRootKey>
 8016122:	0003      	movs	r3, r0
 8016124:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016126:	002a      	movs	r2, r5
 8016128:	18bb      	adds	r3, r7, r2
 801612a:	781b      	ldrb	r3, [r3, #0]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d002      	beq.n	8016136 <LoRaMacCryptoHandleJoinAccept+0xc2>
    {
        return retval;
 8016130:	18bb      	adds	r3, r7, r2
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	e057      	b.n	80161e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8016136:	253f      	movs	r5, #63	; 0x3f
 8016138:	197c      	adds	r4, r7, r5
 801613a:	2004      	movs	r0, #4
 801613c:	f000 f9ec 	bl	8016518 <LoRaMacCryptoDeriveMcKEKey>
 8016140:	0003      	movs	r3, r0
 8016142:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016144:	002a      	movs	r2, r5
 8016146:	18bb      	adds	r3, r7, r2
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d002      	beq.n	8016154 <LoRaMacCryptoHandleJoinAccept+0xe0>
    {
        return retval;
 801614e:	18bb      	adds	r3, r7, r2
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	e048      	b.n	80161e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	1d99      	adds	r1, r3, #6
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	3309      	adds	r3, #9
 801615c:	001a      	movs	r2, r3
 801615e:	4b24      	ldr	r3, [pc, #144]	; (80161f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	3304      	adds	r3, #4
 8016164:	253f      	movs	r5, #63	; 0x3f
 8016166:	197c      	adds	r4, r7, r5
 8016168:	2003      	movs	r0, #3
 801616a:	f7ff fcb1 	bl	8015ad0 <DeriveSessionKey10x>
 801616e:	0003      	movs	r3, r0
 8016170:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016172:	197b      	adds	r3, r7, r5
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d002      	beq.n	8016180 <LoRaMacCryptoHandleJoinAccept+0x10c>
    {
        return retval;
 801617a:	197b      	adds	r3, r7, r5
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	e032      	b.n	80161e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	1d99      	adds	r1, r3, #6
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	3309      	adds	r3, #9
 8016188:	001a      	movs	r2, r3
 801618a:	4b19      	ldr	r3, [pc, #100]	; (80161f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	3304      	adds	r3, #4
 8016190:	253f      	movs	r5, #63	; 0x3f
 8016192:	197c      	adds	r4, r7, r5
 8016194:	2002      	movs	r0, #2
 8016196:	f7ff fc9b 	bl	8015ad0 <DeriveSessionKey10x>
 801619a:	0003      	movs	r3, r0
 801619c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801619e:	197b      	adds	r3, r7, r5
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d002      	beq.n	80161ac <LoRaMacCryptoHandleJoinAccept+0x138>
    {
        return retval;
 80161a6:	197b      	adds	r3, r7, r5
 80161a8:	781b      	ldrb	r3, [r3, #0]
 80161aa:	e01c      	b.n	80161e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 80161ac:	4b10      	ldr	r3, [pc, #64]	; (80161f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	2213      	movs	r2, #19
 80161b2:	18ba      	adds	r2, r7, r2
 80161b4:	7812      	ldrb	r2, [r2, #0]
 80161b6:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 80161b8:	4b0d      	ldr	r3, [pc, #52]	; (80161f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	2200      	movs	r2, #0
 80161be:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80161c0:	4b0b      	ldr	r3, [pc, #44]	; (80161f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	2201      	movs	r2, #1
 80161c6:	4252      	negs	r2, r2
 80161c8:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80161ca:	4b09      	ldr	r3, [pc, #36]	; (80161f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	2201      	movs	r2, #1
 80161d0:	4252      	negs	r2, r2
 80161d2:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80161d4:	4b06      	ldr	r3, [pc, #24]	; (80161f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	2201      	movs	r2, #1
 80161da:	4252      	negs	r2, r2
 80161dc:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 80161de:	4b04      	ldr	r3, [pc, #16]	; (80161f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 80161e4:	2300      	movs	r3, #0
}
 80161e6:	0018      	movs	r0, r3
 80161e8:	46bd      	mov	sp, r7
 80161ea:	b011      	add	sp, #68	; 0x44
 80161ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161ee:	46c0      	nop			; (mov r8, r8)
 80161f0:	20000d18 	.word	0x20000d18

080161f4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80161f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161f6:	b08b      	sub	sp, #44	; 0x2c
 80161f8:	af04      	add	r7, sp, #16
 80161fa:	60f8      	str	r0, [r7, #12]
 80161fc:	0008      	movs	r0, r1
 80161fe:	0011      	movs	r1, r2
 8016200:	607b      	str	r3, [r7, #4]
 8016202:	230b      	movs	r3, #11
 8016204:	18fb      	adds	r3, r7, r3
 8016206:	1c02      	adds	r2, r0, #0
 8016208:	701a      	strb	r2, [r3, #0]
 801620a:	230a      	movs	r3, #10
 801620c:	18fb      	adds	r3, r7, r3
 801620e:	1c0a      	adds	r2, r1, #0
 8016210:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016212:	2316      	movs	r3, #22
 8016214:	18fb      	adds	r3, r7, r3
 8016216:	2213      	movs	r2, #19
 8016218:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801621a:	2317      	movs	r3, #23
 801621c:	18fb      	adds	r3, r7, r3
 801621e:	2203      	movs	r2, #3
 8016220:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d101      	bne.n	801622c <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016228:	230a      	movs	r3, #10
 801622a:	e072      	b.n	8016312 <LoRaMacCryptoSecureMessage+0x11e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 801622c:	4b3b      	ldr	r3, [pc, #236]	; (801631c <LoRaMacCryptoSecureMessage+0x128>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	68db      	ldr	r3, [r3, #12]
 8016232:	68fa      	ldr	r2, [r7, #12]
 8016234:	429a      	cmp	r2, r3
 8016236:	d201      	bcs.n	801623c <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016238:	2306      	movs	r3, #6
 801623a:	e06a      	b.n	8016312 <LoRaMacCryptoSecureMessage+0x11e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2220      	movs	r2, #32
 8016240:	5c9b      	ldrb	r3, [r3, r2]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d103      	bne.n	801624e <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016246:	2317      	movs	r3, #23
 8016248:	18fb      	adds	r3, r7, r3
 801624a:	2202      	movs	r2, #2
 801624c:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 801624e:	4b33      	ldr	r3, [pc, #204]	; (801631c <LoRaMacCryptoSecureMessage+0x128>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	68db      	ldr	r3, [r3, #12]
 8016254:	68fa      	ldr	r2, [r7, #12]
 8016256:	429a      	cmp	r2, r3
 8016258:	d91c      	bls.n	8016294 <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2228      	movs	r2, #40	; 0x28
 8016262:	5c9b      	ldrb	r3, [r3, r2]
 8016264:	b219      	sxth	r1, r3
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	689d      	ldr	r5, [r3, #8]
 801626a:	2616      	movs	r6, #22
 801626c:	19bc      	adds	r4, r7, r6
 801626e:	2317      	movs	r3, #23
 8016270:	18fb      	adds	r3, r7, r3
 8016272:	781a      	ldrb	r2, [r3, #0]
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	9301      	str	r3, [sp, #4]
 8016278:	2300      	movs	r3, #0
 801627a:	9300      	str	r3, [sp, #0]
 801627c:	002b      	movs	r3, r5
 801627e:	f7ff f9c7 	bl	8015610 <PayloadEncrypt>
 8016282:	0003      	movs	r3, r0
 8016284:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016286:	19bb      	adds	r3, r7, r6
 8016288:	781b      	ldrb	r3, [r3, #0]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d002      	beq.n	8016294 <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 801628e:	19bb      	adds	r3, r7, r6
 8016290:	781b      	ldrb	r3, [r3, #0]
 8016292:	e03e      	b.n	8016312 <LoRaMacCryptoSecureMessage+0x11e>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	0018      	movs	r0, r3
 8016298:	f000 fc03 	bl	8016aa2 <LoRaMacSerializerData>
 801629c:	1e03      	subs	r3, r0, #0
 801629e:	d001      	beq.n	80162a4 <LoRaMacCryptoSecureMessage+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80162a0:	2311      	movs	r3, #17
 80162a2:	e036      	b.n	8016312 <LoRaMacCryptoSecureMessage+0x11e>
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80162a4:	2117      	movs	r1, #23
 80162a6:	187b      	adds	r3, r7, r1
 80162a8:	2202      	movs	r2, #2
 80162aa:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	6818      	ldr	r0, [r3, #0]
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	791b      	ldrb	r3, [r3, #4]
 80162b4:	b29b      	uxth	r3, r3
 80162b6:	3b04      	subs	r3, #4
 80162b8:	b29d      	uxth	r5, r3
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	689b      	ldr	r3, [r3, #8]
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	322c      	adds	r2, #44	; 0x2c
 80162c2:	2616      	movs	r6, #22
 80162c4:	19bc      	adds	r4, r7, r6
 80162c6:	1879      	adds	r1, r7, r1
 80162c8:	7809      	ldrb	r1, [r1, #0]
 80162ca:	9203      	str	r2, [sp, #12]
 80162cc:	68fa      	ldr	r2, [r7, #12]
 80162ce:	9202      	str	r2, [sp, #8]
 80162d0:	9301      	str	r3, [sp, #4]
 80162d2:	2300      	movs	r3, #0
 80162d4:	9300      	str	r3, [sp, #0]
 80162d6:	2300      	movs	r3, #0
 80162d8:	000a      	movs	r2, r1
 80162da:	0029      	movs	r1, r5
 80162dc:	f7ff facc 	bl	8015878 <ComputeCmacB0>
 80162e0:	0003      	movs	r3, r0
 80162e2:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80162e4:	19bb      	adds	r3, r7, r6
 80162e6:	781b      	ldrb	r3, [r3, #0]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d002      	beq.n	80162f2 <LoRaMacCryptoSecureMessage+0xfe>
        {
            return retval;
 80162ec:	19bb      	adds	r3, r7, r6
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	e00f      	b.n	8016312 <LoRaMacCryptoSecureMessage+0x11e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	0018      	movs	r0, r3
 80162f6:	f000 fbd4 	bl	8016aa2 <LoRaMacSerializerData>
 80162fa:	1e03      	subs	r3, r0, #0
 80162fc:	d001      	beq.n	8016302 <LoRaMacCryptoSecureMessage+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80162fe:	2311      	movs	r3, #17
 8016300:	e007      	b.n	8016312 <LoRaMacCryptoSecureMessage+0x11e>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8016302:	4b06      	ldr	r3, [pc, #24]	; (801631c <LoRaMacCryptoSecureMessage+0x128>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	68fa      	ldr	r2, [r7, #12]
 8016308:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801630a:	4b04      	ldr	r3, [pc, #16]	; (801631c <LoRaMacCryptoSecureMessage+0x128>)
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8016310:	2300      	movs	r3, #0
}
 8016312:	0018      	movs	r0, r3
 8016314:	46bd      	mov	sp, r7
 8016316:	b007      	add	sp, #28
 8016318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801631a:	46c0      	nop			; (mov r8, r8)
 801631c:	20000d18 	.word	0x20000d18

08016320 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016322:	b08b      	sub	sp, #44	; 0x2c
 8016324:	af04      	add	r7, sp, #16
 8016326:	60b9      	str	r1, [r7, #8]
 8016328:	0011      	movs	r1, r2
 801632a:	607b      	str	r3, [r7, #4]
 801632c:	230f      	movs	r3, #15
 801632e:	18fb      	adds	r3, r7, r3
 8016330:	1c02      	adds	r2, r0, #0
 8016332:	701a      	strb	r2, [r3, #0]
 8016334:	230e      	movs	r3, #14
 8016336:	18fb      	adds	r3, r7, r3
 8016338:	1c0a      	adds	r2, r1, #0
 801633a:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 801633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633e:	2b00      	cmp	r3, #0
 8016340:	d101      	bne.n	8016346 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016342:	230a      	movs	r3, #10
 8016344:	e0ae      	b.n	80164a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016346:	687a      	ldr	r2, [r7, #4]
 8016348:	230e      	movs	r3, #14
 801634a:	18fb      	adds	r3, r7, r3
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	0011      	movs	r1, r2
 8016350:	0018      	movs	r0, r3
 8016352:	f7ff fc69 	bl	8015c28 <CheckFCntDown>
 8016356:	0003      	movs	r3, r0
 8016358:	001a      	movs	r2, r3
 801635a:	2301      	movs	r3, #1
 801635c:	4053      	eors	r3, r2
 801635e:	b2db      	uxtb	r3, r3
 8016360:	2b00      	cmp	r3, #0
 8016362:	d001      	beq.n	8016368 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016364:	2306      	movs	r3, #6
 8016366:	e09d      	b.n	80164a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016368:	2315      	movs	r3, #21
 801636a:	18fb      	adds	r3, r7, r3
 801636c:	2213      	movs	r2, #19
 801636e:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016370:	2317      	movs	r3, #23
 8016372:	18fb      	adds	r3, r7, r3
 8016374:	2203      	movs	r2, #3
 8016376:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016378:	2314      	movs	r3, #20
 801637a:	18fb      	adds	r3, r7, r3
 801637c:	2202      	movs	r2, #2
 801637e:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016382:	0018      	movs	r0, r3
 8016384:	f000 f9e2 	bl	801674c <LoRaMacParserData>
 8016388:	1e03      	subs	r3, r0, #0
 801638a:	d001      	beq.n	8016390 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801638c:	2310      	movs	r3, #16
 801638e:	e089      	b.n	80164a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016390:	2515      	movs	r5, #21
 8016392:	197c      	adds	r4, r7, r5
 8016394:	2310      	movs	r3, #16
 8016396:	18fa      	adds	r2, r7, r3
 8016398:	230f      	movs	r3, #15
 801639a:	18fb      	adds	r3, r7, r3
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	0011      	movs	r1, r2
 80163a0:	0018      	movs	r0, r3
 80163a2:	f7ff fb63 	bl	8015a6c <GetKeyAddrItem>
 80163a6:	0003      	movs	r3, r0
 80163a8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80163aa:	197b      	adds	r3, r7, r5
 80163ac:	781b      	ldrb	r3, [r3, #0]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d002      	beq.n	80163b8 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 80163b2:	197b      	adds	r3, r7, r5
 80163b4:	781b      	ldrb	r3, [r3, #0]
 80163b6:	e075      	b.n	80164a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80163b8:	693a      	ldr	r2, [r7, #16]
 80163ba:	2317      	movs	r3, #23
 80163bc:	18fb      	adds	r3, r7, r3
 80163be:	7852      	ldrb	r2, [r2, #1]
 80163c0:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 80163c2:	693a      	ldr	r2, [r7, #16]
 80163c4:	2314      	movs	r3, #20
 80163c6:	18fb      	adds	r3, r7, r3
 80163c8:	7892      	ldrb	r2, [r2, #2]
 80163ca:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80163cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ce:	689b      	ldr	r3, [r3, #8]
 80163d0:	68ba      	ldr	r2, [r7, #8]
 80163d2:	429a      	cmp	r2, r3
 80163d4:	d001      	beq.n	80163da <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80163d6:	2302      	movs	r3, #2
 80163d8:	e064      	b.n	80164a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80163da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163dc:	7b1b      	ldrb	r3, [r3, #12]
 80163de:	069b      	lsls	r3, r3, #26
 80163e0:	0fdb      	lsrs	r3, r3, #31
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	001a      	movs	r2, r3
 80163e6:	2016      	movs	r0, #22
 80163e8:	183b      	adds	r3, r7, r0
 80163ea:	1e51      	subs	r1, r2, #1
 80163ec:	418a      	sbcs	r2, r1
 80163ee:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80163f0:	4b2e      	ldr	r3, [pc, #184]	; (80164ac <LoRaMacCryptoUnsecureMessage+0x18c>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	789b      	ldrb	r3, [r3, #2]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d102      	bne.n	8016400 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80163fa:	183b      	adds	r3, r7, r0
 80163fc:	2200      	movs	r2, #0
 80163fe:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016402:	6818      	ldr	r0, [r3, #0]
 8016404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016406:	791b      	ldrb	r3, [r3, #4]
 8016408:	b29b      	uxth	r3, r3
 801640a:	3b04      	subs	r3, #4
 801640c:	b299      	uxth	r1, r3
 801640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016412:	2615      	movs	r6, #21
 8016414:	19bc      	adds	r4, r7, r6
 8016416:	2216      	movs	r2, #22
 8016418:	18ba      	adds	r2, r7, r2
 801641a:	7815      	ldrb	r5, [r2, #0]
 801641c:	2214      	movs	r2, #20
 801641e:	18ba      	adds	r2, r7, r2
 8016420:	7812      	ldrb	r2, [r2, #0]
 8016422:	9303      	str	r3, [sp, #12]
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	9302      	str	r3, [sp, #8]
 8016428:	68bb      	ldr	r3, [r7, #8]
 801642a:	9301      	str	r3, [sp, #4]
 801642c:	2301      	movs	r3, #1
 801642e:	9300      	str	r3, [sp, #0]
 8016430:	002b      	movs	r3, r5
 8016432:	f7ff fa69 	bl	8015908 <VerifyCmacB0>
 8016436:	0003      	movs	r3, r0
 8016438:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801643a:	19bb      	adds	r3, r7, r6
 801643c:	781b      	ldrb	r3, [r3, #0]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d002      	beq.n	8016448 <LoRaMacCryptoUnsecureMessage+0x128>
    {
        return retval;
 8016442:	19bb      	adds	r3, r7, r6
 8016444:	781b      	ldrb	r3, [r3, #0]
 8016446:	e02d      	b.n	80164a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644a:	2220      	movs	r2, #32
 801644c:	5c9b      	ldrb	r3, [r3, r2]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d103      	bne.n	801645a <LoRaMacCryptoUnsecureMessage+0x13a>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016452:	2317      	movs	r3, #23
 8016454:	18fb      	adds	r3, r7, r3
 8016456:	2202      	movs	r2, #2
 8016458:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801645c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016460:	2228      	movs	r2, #40	; 0x28
 8016462:	5c9b      	ldrb	r3, [r3, r2]
 8016464:	b219      	sxth	r1, r3
 8016466:	2615      	movs	r6, #21
 8016468:	19bc      	adds	r4, r7, r6
 801646a:	68bd      	ldr	r5, [r7, #8]
 801646c:	2317      	movs	r3, #23
 801646e:	18fb      	adds	r3, r7, r3
 8016470:	781a      	ldrb	r2, [r3, #0]
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	9301      	str	r3, [sp, #4]
 8016476:	2301      	movs	r3, #1
 8016478:	9300      	str	r3, [sp, #0]
 801647a:	002b      	movs	r3, r5
 801647c:	f7ff f8c8 	bl	8015610 <PayloadEncrypt>
 8016480:	0003      	movs	r3, r0
 8016482:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016484:	19bb      	adds	r3, r7, r6
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d002      	beq.n	8016492 <LoRaMacCryptoUnsecureMessage+0x172>
    {
        return retval;
 801648c:	19bb      	adds	r3, r7, r6
 801648e:	781b      	ldrb	r3, [r3, #0]
 8016490:	e008      	b.n	80164a4 <LoRaMacCryptoUnsecureMessage+0x184>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8016492:	687a      	ldr	r2, [r7, #4]
 8016494:	230e      	movs	r3, #14
 8016496:	18fb      	adds	r3, r7, r3
 8016498:	781b      	ldrb	r3, [r3, #0]
 801649a:	0011      	movs	r1, r2
 801649c:	0018      	movs	r0, r3
 801649e:	f7ff fbe7 	bl	8015c70 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80164a2:	2300      	movs	r3, #0
}
 80164a4:	0018      	movs	r0, r3
 80164a6:	46bd      	mov	sp, r7
 80164a8:	b007      	add	sp, #28
 80164aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164ac:	20000d18 	.word	0x20000d18

080164b0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 80164b0:	b590      	push	{r4, r7, lr}
 80164b2:	b087      	sub	sp, #28
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	0002      	movs	r2, r0
 80164b8:	1dfb      	adds	r3, r7, #7
 80164ba:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80164bc:	1dfb      	adds	r3, r7, #7
 80164be:	781b      	ldrb	r3, [r3, #0]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d001      	beq.n	80164c8 <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80164c4:	230b      	movs	r3, #11
 80164c6:	e020      	b.n	801650a <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 80164c8:	2408      	movs	r4, #8
 80164ca:	193b      	adds	r3, r7, r4
 80164cc:	2200      	movs	r2, #0
 80164ce:	601a      	str	r2, [r3, #0]
 80164d0:	3304      	adds	r3, #4
 80164d2:	220c      	movs	r2, #12
 80164d4:	2100      	movs	r1, #0
 80164d6:	0018      	movs	r0, r3
 80164d8:	f007 fdfb 	bl	801e0d2 <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 80164dc:	4b0d      	ldr	r3, [pc, #52]	; (8016514 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	789b      	ldrb	r3, [r3, #2]
 80164e2:	2b01      	cmp	r3, #1
 80164e4:	d102      	bne.n	80164ec <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 80164e6:	193b      	adds	r3, r7, r4
 80164e8:	2220      	movs	r2, #32
 80164ea:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80164ec:	4b09      	ldr	r3, [pc, #36]	; (8016514 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	1dfa      	adds	r2, r7, #7
 80164f2:	7812      	ldrb	r2, [r2, #0]
 80164f4:	2108      	movs	r1, #8
 80164f6:	1879      	adds	r1, r7, r1
 80164f8:	6818      	ldr	r0, [r3, #0]
 80164fa:	2304      	movs	r3, #4
 80164fc:	f7f7 fbe6 	bl	800dccc <SecureElementDeriveAndStoreKey>
 8016500:	1e03      	subs	r3, r0, #0
 8016502:	d001      	beq.n	8016508 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016504:	230f      	movs	r3, #15
 8016506:	e000      	b.n	801650a <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016508:	2300      	movs	r3, #0
}
 801650a:	0018      	movs	r0, r3
 801650c:	46bd      	mov	sp, r7
 801650e:	b007      	add	sp, #28
 8016510:	bd90      	pop	{r4, r7, pc}
 8016512:	46c0      	nop			; (mov r8, r8)
 8016514:	20000d18 	.word	0x20000d18

08016518 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8016518:	b590      	push	{r4, r7, lr}
 801651a:	b087      	sub	sp, #28
 801651c:	af00      	add	r7, sp, #0
 801651e:	0002      	movs	r2, r0
 8016520:	1dfb      	adds	r3, r7, #7
 8016522:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8016524:	1dfb      	adds	r3, r7, #7
 8016526:	781b      	ldrb	r3, [r3, #0]
 8016528:	2b04      	cmp	r3, #4
 801652a:	d001      	beq.n	8016530 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801652c:	230b      	movs	r3, #11
 801652e:	e017      	b.n	8016560 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 8016530:	2408      	movs	r4, #8
 8016532:	193b      	adds	r3, r7, r4
 8016534:	2200      	movs	r2, #0
 8016536:	601a      	str	r2, [r3, #0]
 8016538:	3304      	adds	r3, #4
 801653a:	220c      	movs	r2, #12
 801653c:	2100      	movs	r1, #0
 801653e:	0018      	movs	r0, r3
 8016540:	f007 fdc7 	bl	801e0d2 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016544:	4b08      	ldr	r3, [pc, #32]	; (8016568 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	1dfa      	adds	r2, r7, #7
 801654a:	7812      	ldrb	r2, [r2, #0]
 801654c:	1939      	adds	r1, r7, r4
 801654e:	6818      	ldr	r0, [r3, #0]
 8016550:	237f      	movs	r3, #127	; 0x7f
 8016552:	f7f7 fbbb 	bl	800dccc <SecureElementDeriveAndStoreKey>
 8016556:	1e03      	subs	r3, r0, #0
 8016558:	d001      	beq.n	801655e <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801655a:	230f      	movs	r3, #15
 801655c:	e000      	b.n	8016560 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801655e:	2300      	movs	r3, #0
}
 8016560:	0018      	movs	r0, r3
 8016562:	46bd      	mov	sp, r7
 8016564:	b007      	add	sp, #28
 8016566:	bd90      	pop	{r4, r7, pc}
 8016568:	20000d18 	.word	0x20000d18

0801656c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801656c:	b590      	push	{r4, r7, lr}
 801656e:	b085      	sub	sp, #20
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d003      	beq.n	8016582 <LoRaMacParserJoinAccept+0x16>
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d101      	bne.n	8016586 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016582:	2302      	movs	r3, #2
 8016584:	e0de      	b.n	8016744 <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 8016586:	240e      	movs	r4, #14
 8016588:	193b      	adds	r3, r7, r4
 801658a:	2200      	movs	r2, #0
 801658c:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681a      	ldr	r2, [r3, #0]
 8016592:	193b      	adds	r3, r7, r4
 8016594:	881b      	ldrh	r3, [r3, #0]
 8016596:	1939      	adds	r1, r7, r4
 8016598:	1c58      	adds	r0, r3, #1
 801659a:	8008      	strh	r0, [r1, #0]
 801659c:	18d3      	adds	r3, r2, r3
 801659e:	781a      	ldrb	r2, [r3, #0]
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	1d98      	adds	r0, r3, #6
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681a      	ldr	r2, [r3, #0]
 80165ac:	193b      	adds	r3, r7, r4
 80165ae:	881b      	ldrh	r3, [r3, #0]
 80165b0:	18d3      	adds	r3, r2, r3
 80165b2:	2203      	movs	r2, #3
 80165b4:	0019      	movs	r1, r3
 80165b6:	f003 f82f 	bl	8019618 <memcpy1>
    bufItr = bufItr + 3;
 80165ba:	193b      	adds	r3, r7, r4
 80165bc:	193a      	adds	r2, r7, r4
 80165be:	8812      	ldrh	r2, [r2, #0]
 80165c0:	3203      	adds	r2, #3
 80165c2:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	3309      	adds	r3, #9
 80165c8:	0018      	movs	r0, r3
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681a      	ldr	r2, [r3, #0]
 80165ce:	193b      	adds	r3, r7, r4
 80165d0:	881b      	ldrh	r3, [r3, #0]
 80165d2:	18d3      	adds	r3, r2, r3
 80165d4:	2203      	movs	r2, #3
 80165d6:	0019      	movs	r1, r3
 80165d8:	f003 f81e 	bl	8019618 <memcpy1>
    bufItr = bufItr + 3;
 80165dc:	193b      	adds	r3, r7, r4
 80165de:	193a      	adds	r2, r7, r4
 80165e0:	8812      	ldrh	r2, [r2, #0]
 80165e2:	3203      	adds	r2, #3
 80165e4:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	193b      	adds	r3, r7, r4
 80165ec:	881b      	ldrh	r3, [r3, #0]
 80165ee:	1939      	adds	r1, r7, r4
 80165f0:	1c58      	adds	r0, r3, #1
 80165f2:	8008      	strh	r0, [r1, #0]
 80165f4:	18d3      	adds	r3, r2, r3
 80165f6:	781b      	ldrb	r3, [r3, #0]
 80165f8:	001a      	movs	r2, r3
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681a      	ldr	r2, [r3, #0]
 8016602:	193b      	adds	r3, r7, r4
 8016604:	881b      	ldrh	r3, [r3, #0]
 8016606:	1939      	adds	r1, r7, r4
 8016608:	1c58      	adds	r0, r3, #1
 801660a:	8008      	strh	r0, [r1, #0]
 801660c:	18d3      	adds	r3, r2, r3
 801660e:	781b      	ldrb	r3, [r3, #0]
 8016610:	021a      	lsls	r2, r3, #8
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	68db      	ldr	r3, [r3, #12]
 8016616:	431a      	orrs	r2, r3
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681a      	ldr	r2, [r3, #0]
 8016620:	193b      	adds	r3, r7, r4
 8016622:	881b      	ldrh	r3, [r3, #0]
 8016624:	1939      	adds	r1, r7, r4
 8016626:	1c58      	adds	r0, r3, #1
 8016628:	8008      	strh	r0, [r1, #0]
 801662a:	18d3      	adds	r3, r2, r3
 801662c:	781b      	ldrb	r3, [r3, #0]
 801662e:	041a      	lsls	r2, r3, #16
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	68db      	ldr	r3, [r3, #12]
 8016634:	431a      	orrs	r2, r3
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681a      	ldr	r2, [r3, #0]
 801663e:	193b      	adds	r3, r7, r4
 8016640:	881b      	ldrh	r3, [r3, #0]
 8016642:	1939      	adds	r1, r7, r4
 8016644:	1c58      	adds	r0, r3, #1
 8016646:	8008      	strh	r0, [r1, #0]
 8016648:	18d3      	adds	r3, r2, r3
 801664a:	781b      	ldrb	r3, [r3, #0]
 801664c:	061a      	lsls	r2, r3, #24
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	431a      	orrs	r2, r3
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681a      	ldr	r2, [r3, #0]
 801665c:	193b      	adds	r3, r7, r4
 801665e:	881b      	ldrh	r3, [r3, #0]
 8016660:	1939      	adds	r1, r7, r4
 8016662:	1c58      	adds	r0, r3, #1
 8016664:	8008      	strh	r0, [r1, #0]
 8016666:	18d3      	adds	r3, r2, r3
 8016668:	781a      	ldrb	r2, [r3, #0]
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	681a      	ldr	r2, [r3, #0]
 8016672:	193b      	adds	r3, r7, r4
 8016674:	881b      	ldrh	r3, [r3, #0]
 8016676:	1939      	adds	r1, r7, r4
 8016678:	1c58      	adds	r0, r3, #1
 801667a:	8008      	strh	r0, [r1, #0]
 801667c:	18d3      	adds	r3, r2, r3
 801667e:	781a      	ldrb	r2, [r3, #0]
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	791b      	ldrb	r3, [r3, #4]
 8016688:	1f1a      	subs	r2, r3, #4
 801668a:	193b      	adds	r3, r7, r4
 801668c:	881b      	ldrh	r3, [r3, #0]
 801668e:	1ad3      	subs	r3, r2, r3
 8016690:	2b10      	cmp	r3, #16
 8016692:	d111      	bne.n	80166b8 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	3312      	adds	r3, #18
 8016698:	0018      	movs	r0, r3
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	681a      	ldr	r2, [r3, #0]
 801669e:	193b      	adds	r3, r7, r4
 80166a0:	881b      	ldrh	r3, [r3, #0]
 80166a2:	18d3      	adds	r3, r2, r3
 80166a4:	2210      	movs	r2, #16
 80166a6:	0019      	movs	r1, r3
 80166a8:	f002 ffb6 	bl	8019618 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80166ac:	193b      	adds	r3, r7, r4
 80166ae:	193a      	adds	r2, r7, r4
 80166b0:	8812      	ldrh	r2, [r2, #0]
 80166b2:	3210      	adds	r2, #16
 80166b4:	801a      	strh	r2, [r3, #0]
 80166b6:	e00a      	b.n	80166ce <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	791b      	ldrb	r3, [r3, #4]
 80166bc:	1f1a      	subs	r2, r3, #4
 80166be:	230e      	movs	r3, #14
 80166c0:	18fb      	adds	r3, r7, r3
 80166c2:	881b      	ldrh	r3, [r3, #0]
 80166c4:	1ad3      	subs	r3, r2, r3
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	dd01      	ble.n	80166ce <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 80166ca:	2301      	movs	r3, #1
 80166cc:	e03a      	b.n	8016744 <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	240e      	movs	r4, #14
 80166d4:	193b      	adds	r3, r7, r4
 80166d6:	881b      	ldrh	r3, [r3, #0]
 80166d8:	1939      	adds	r1, r7, r4
 80166da:	1c58      	adds	r0, r3, #1
 80166dc:	8008      	strh	r0, [r1, #0]
 80166de:	18d3      	adds	r3, r2, r3
 80166e0:	781b      	ldrb	r3, [r3, #0]
 80166e2:	001a      	movs	r2, r3
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681a      	ldr	r2, [r3, #0]
 80166ec:	193b      	adds	r3, r7, r4
 80166ee:	881b      	ldrh	r3, [r3, #0]
 80166f0:	1939      	adds	r1, r7, r4
 80166f2:	1c58      	adds	r0, r3, #1
 80166f4:	8008      	strh	r0, [r1, #0]
 80166f6:	18d3      	adds	r3, r2, r3
 80166f8:	781b      	ldrb	r3, [r3, #0]
 80166fa:	021a      	lsls	r2, r3, #8
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016700:	431a      	orrs	r2, r3
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681a      	ldr	r2, [r3, #0]
 801670a:	193b      	adds	r3, r7, r4
 801670c:	881b      	ldrh	r3, [r3, #0]
 801670e:	1939      	adds	r1, r7, r4
 8016710:	1c58      	adds	r0, r3, #1
 8016712:	8008      	strh	r0, [r1, #0]
 8016714:	18d3      	adds	r3, r2, r3
 8016716:	781b      	ldrb	r3, [r3, #0]
 8016718:	041a      	lsls	r2, r3, #16
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801671e:	431a      	orrs	r2, r3
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	193b      	adds	r3, r7, r4
 801672a:	881b      	ldrh	r3, [r3, #0]
 801672c:	1939      	adds	r1, r7, r4
 801672e:	1c58      	adds	r0, r3, #1
 8016730:	8008      	strh	r0, [r1, #0]
 8016732:	18d3      	adds	r3, r2, r3
 8016734:	781b      	ldrb	r3, [r3, #0]
 8016736:	061a      	lsls	r2, r3, #24
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801673c:	431a      	orrs	r2, r3
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016742:	2300      	movs	r3, #0
}
 8016744:	0018      	movs	r0, r3
 8016746:	46bd      	mov	sp, r7
 8016748:	b005      	add	sp, #20
 801674a:	bd90      	pop	{r4, r7, pc}

0801674c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801674c:	b590      	push	{r4, r7, lr}
 801674e:	b085      	sub	sp, #20
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d003      	beq.n	8016762 <LoRaMacParserData+0x16>
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d101      	bne.n	8016766 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016762:	2302      	movs	r3, #2
 8016764:	e0fe      	b.n	8016964 <LoRaMacParserData+0x218>
    }

    uint16_t bufItr = 0;
 8016766:	240e      	movs	r4, #14
 8016768:	193b      	adds	r3, r7, r4
 801676a:	2200      	movs	r2, #0
 801676c:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681a      	ldr	r2, [r3, #0]
 8016772:	193b      	adds	r3, r7, r4
 8016774:	881b      	ldrh	r3, [r3, #0]
 8016776:	1939      	adds	r1, r7, r4
 8016778:	1c58      	adds	r0, r3, #1
 801677a:	8008      	strh	r0, [r1, #0]
 801677c:	18d3      	adds	r3, r2, r3
 801677e:	781a      	ldrb	r2, [r3, #0]
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681a      	ldr	r2, [r3, #0]
 8016788:	193b      	adds	r3, r7, r4
 801678a:	881b      	ldrh	r3, [r3, #0]
 801678c:	1939      	adds	r1, r7, r4
 801678e:	1c58      	adds	r0, r3, #1
 8016790:	8008      	strh	r0, [r1, #0]
 8016792:	18d3      	adds	r3, r2, r3
 8016794:	781b      	ldrb	r3, [r3, #0]
 8016796:	001a      	movs	r2, r3
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	193b      	adds	r3, r7, r4
 80167a2:	881b      	ldrh	r3, [r3, #0]
 80167a4:	1939      	adds	r1, r7, r4
 80167a6:	1c58      	adds	r0, r3, #1
 80167a8:	8008      	strh	r0, [r1, #0]
 80167aa:	18d3      	adds	r3, r2, r3
 80167ac:	781b      	ldrb	r3, [r3, #0]
 80167ae:	021a      	lsls	r2, r3, #8
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	689b      	ldr	r3, [r3, #8]
 80167b4:	431a      	orrs	r2, r3
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	681a      	ldr	r2, [r3, #0]
 80167be:	193b      	adds	r3, r7, r4
 80167c0:	881b      	ldrh	r3, [r3, #0]
 80167c2:	1939      	adds	r1, r7, r4
 80167c4:	1c58      	adds	r0, r3, #1
 80167c6:	8008      	strh	r0, [r1, #0]
 80167c8:	18d3      	adds	r3, r2, r3
 80167ca:	781b      	ldrb	r3, [r3, #0]
 80167cc:	041a      	lsls	r2, r3, #16
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	689b      	ldr	r3, [r3, #8]
 80167d2:	431a      	orrs	r2, r3
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	681a      	ldr	r2, [r3, #0]
 80167dc:	193b      	adds	r3, r7, r4
 80167de:	881b      	ldrh	r3, [r3, #0]
 80167e0:	1939      	adds	r1, r7, r4
 80167e2:	1c58      	adds	r0, r3, #1
 80167e4:	8008      	strh	r0, [r1, #0]
 80167e6:	18d3      	adds	r3, r2, r3
 80167e8:	781b      	ldrb	r3, [r3, #0]
 80167ea:	061a      	lsls	r2, r3, #24
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	689b      	ldr	r3, [r3, #8]
 80167f0:	431a      	orrs	r2, r3
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	681a      	ldr	r2, [r3, #0]
 80167fa:	193b      	adds	r3, r7, r4
 80167fc:	881b      	ldrh	r3, [r3, #0]
 80167fe:	1939      	adds	r1, r7, r4
 8016800:	1c58      	adds	r0, r3, #1
 8016802:	8008      	strh	r0, [r1, #0]
 8016804:	18d3      	adds	r3, r2, r3
 8016806:	781a      	ldrb	r2, [r3, #0]
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681a      	ldr	r2, [r3, #0]
 8016810:	193b      	adds	r3, r7, r4
 8016812:	881b      	ldrh	r3, [r3, #0]
 8016814:	1939      	adds	r1, r7, r4
 8016816:	1c58      	adds	r0, r3, #1
 8016818:	8008      	strh	r0, [r1, #0]
 801681a:	18d3      	adds	r3, r2, r3
 801681c:	781b      	ldrb	r3, [r3, #0]
 801681e:	b29a      	uxth	r2, r3
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	681a      	ldr	r2, [r3, #0]
 8016828:	193b      	adds	r3, r7, r4
 801682a:	881b      	ldrh	r3, [r3, #0]
 801682c:	1939      	adds	r1, r7, r4
 801682e:	1c58      	adds	r0, r3, #1
 8016830:	8008      	strh	r0, [r1, #0]
 8016832:	18d3      	adds	r3, r2, r3
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	0219      	lsls	r1, r3, #8
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	89db      	ldrh	r3, [r3, #14]
 801683c:	b21a      	sxth	r2, r3
 801683e:	b20b      	sxth	r3, r1
 8016840:	4313      	orrs	r3, r2
 8016842:	b21b      	sxth	r3, r3
 8016844:	b29a      	uxth	r2, r3
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	3310      	adds	r3, #16
 801684e:	0018      	movs	r0, r3
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681a      	ldr	r2, [r3, #0]
 8016854:	193b      	adds	r3, r7, r4
 8016856:	881b      	ldrh	r3, [r3, #0]
 8016858:	18d1      	adds	r1, r2, r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	7b1b      	ldrb	r3, [r3, #12]
 801685e:	071b      	lsls	r3, r3, #28
 8016860:	0f1b      	lsrs	r3, r3, #28
 8016862:	b2db      	uxtb	r3, r3
 8016864:	b29b      	uxth	r3, r3
 8016866:	001a      	movs	r2, r3
 8016868:	f002 fed6 	bl	8019618 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	7b1b      	ldrb	r3, [r3, #12]
 8016870:	071b      	lsls	r3, r3, #28
 8016872:	0f1b      	lsrs	r3, r3, #28
 8016874:	b2db      	uxtb	r3, r3
 8016876:	b299      	uxth	r1, r3
 8016878:	193b      	adds	r3, r7, r4
 801687a:	193a      	adds	r2, r7, r4
 801687c:	8812      	ldrh	r2, [r2, #0]
 801687e:	188a      	adds	r2, r1, r2
 8016880:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	2220      	movs	r2, #32
 8016886:	2100      	movs	r1, #0
 8016888:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	2228      	movs	r2, #40	; 0x28
 801688e:	2100      	movs	r1, #0
 8016890:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	791b      	ldrb	r3, [r3, #4]
 8016896:	001a      	movs	r2, r3
 8016898:	193b      	adds	r3, r7, r4
 801689a:	881b      	ldrh	r3, [r3, #0]
 801689c:	1ad3      	subs	r3, r2, r3
 801689e:	2b04      	cmp	r3, #4
 80168a0:	dd2e      	ble.n	8016900 <LoRaMacParserData+0x1b4>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681a      	ldr	r2, [r3, #0]
 80168a6:	193b      	adds	r3, r7, r4
 80168a8:	881b      	ldrh	r3, [r3, #0]
 80168aa:	1939      	adds	r1, r7, r4
 80168ac:	1c58      	adds	r0, r3, #1
 80168ae:	8008      	strh	r0, [r1, #0]
 80168b0:	18d3      	adds	r3, r2, r3
 80168b2:	7819      	ldrb	r1, [r3, #0]
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2220      	movs	r2, #32
 80168b8:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	791a      	ldrb	r2, [r3, #4]
 80168be:	193b      	adds	r3, r7, r4
 80168c0:	881b      	ldrh	r3, [r3, #0]
 80168c2:	b2db      	uxtb	r3, r3
 80168c4:	1ad3      	subs	r3, r2, r3
 80168c6:	b2db      	uxtb	r3, r3
 80168c8:	3b04      	subs	r3, #4
 80168ca:	b2d9      	uxtb	r1, r3
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2228      	movs	r2, #40	; 0x28
 80168d0:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	681a      	ldr	r2, [r3, #0]
 80168da:	193b      	adds	r3, r7, r4
 80168dc:	881b      	ldrh	r3, [r3, #0]
 80168de:	18d1      	adds	r1, r2, r3
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2228      	movs	r2, #40	; 0x28
 80168e4:	5c9b      	ldrb	r3, [r3, r2]
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	001a      	movs	r2, r3
 80168ea:	f002 fe95 	bl	8019618 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2228      	movs	r2, #40	; 0x28
 80168f2:	5c9b      	ldrb	r3, [r3, r2]
 80168f4:	b299      	uxth	r1, r3
 80168f6:	193b      	adds	r3, r7, r4
 80168f8:	193a      	adds	r2, r7, r4
 80168fa:	8812      	ldrh	r2, [r2, #0]
 80168fc:	188a      	adds	r2, r1, r2
 80168fe:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	681a      	ldr	r2, [r3, #0]
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	791b      	ldrb	r3, [r3, #4]
 8016908:	3b04      	subs	r3, #4
 801690a:	18d3      	adds	r3, r2, r3
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	001a      	movs	r2, r3
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	6819      	ldr	r1, [r3, #0]
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	791b      	ldrb	r3, [r3, #4]
 8016920:	3b03      	subs	r3, #3
 8016922:	18cb      	adds	r3, r1, r3
 8016924:	781b      	ldrb	r3, [r3, #0]
 8016926:	021b      	lsls	r3, r3, #8
 8016928:	431a      	orrs	r2, r3
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	6819      	ldr	r1, [r3, #0]
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	791b      	ldrb	r3, [r3, #4]
 801693a:	3b02      	subs	r3, #2
 801693c:	18cb      	adds	r3, r1, r3
 801693e:	781b      	ldrb	r3, [r3, #0]
 8016940:	041b      	lsls	r3, r3, #16
 8016942:	431a      	orrs	r2, r3
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	6819      	ldr	r1, [r3, #0]
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	791b      	ldrb	r3, [r3, #4]
 8016954:	3b01      	subs	r3, #1
 8016956:	18cb      	adds	r3, r1, r3
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	061b      	lsls	r3, r3, #24
 801695c:	431a      	orrs	r2, r3
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016962:	2300      	movs	r3, #0
}
 8016964:	0018      	movs	r0, r3
 8016966:	46bd      	mov	sp, r7
 8016968:	b005      	add	sp, #20
 801696a:	bd90      	pop	{r4, r7, pc}

0801696c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801696c:	b5b0      	push	{r4, r5, r7, lr}
 801696e:	b084      	sub	sp, #16
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d003      	beq.n	8016982 <LoRaMacSerializerJoinRequest+0x16>
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d101      	bne.n	8016986 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016982:	2301      	movs	r3, #1
 8016984:	e089      	b.n	8016a9a <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8016986:	230e      	movs	r3, #14
 8016988:	18fb      	adds	r3, r7, r3
 801698a:	2200      	movs	r2, #0
 801698c:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	791b      	ldrb	r3, [r3, #4]
 8016992:	2b16      	cmp	r3, #22
 8016994:	d801      	bhi.n	801699a <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016996:	2302      	movs	r3, #2
 8016998:	e07f      	b.n	8016a9a <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	681a      	ldr	r2, [r3, #0]
 801699e:	240e      	movs	r4, #14
 80169a0:	193b      	adds	r3, r7, r4
 80169a2:	881b      	ldrh	r3, [r3, #0]
 80169a4:	1939      	adds	r1, r7, r4
 80169a6:	1c58      	adds	r0, r3, #1
 80169a8:	8008      	strh	r0, [r1, #0]
 80169aa:	18d3      	adds	r3, r2, r3
 80169ac:	687a      	ldr	r2, [r7, #4]
 80169ae:	7952      	ldrb	r2, [r2, #5]
 80169b0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681a      	ldr	r2, [r3, #0]
 80169b6:	193b      	adds	r3, r7, r4
 80169b8:	881b      	ldrh	r3, [r3, #0]
 80169ba:	18d0      	adds	r0, r2, r3
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	3306      	adds	r3, #6
 80169c0:	2208      	movs	r2, #8
 80169c2:	0019      	movs	r1, r3
 80169c4:	f002 fe44 	bl	8019650 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80169c8:	193b      	adds	r3, r7, r4
 80169ca:	193a      	adds	r2, r7, r4
 80169cc:	8812      	ldrh	r2, [r2, #0]
 80169ce:	3208      	adds	r2, #8
 80169d0:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681a      	ldr	r2, [r3, #0]
 80169d6:	193b      	adds	r3, r7, r4
 80169d8:	881b      	ldrh	r3, [r3, #0]
 80169da:	18d0      	adds	r0, r2, r3
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	330e      	adds	r3, #14
 80169e0:	2208      	movs	r2, #8
 80169e2:	0019      	movs	r1, r3
 80169e4:	f002 fe34 	bl	8019650 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80169e8:	193b      	adds	r3, r7, r4
 80169ea:	0025      	movs	r5, r4
 80169ec:	193a      	adds	r2, r7, r4
 80169ee:	8812      	ldrh	r2, [r2, #0]
 80169f0:	3208      	adds	r2, #8
 80169f2:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	8ad8      	ldrh	r0, [r3, #22]
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	681a      	ldr	r2, [r3, #0]
 80169fc:	197b      	adds	r3, r7, r5
 80169fe:	881b      	ldrh	r3, [r3, #0]
 8016a00:	1979      	adds	r1, r7, r5
 8016a02:	1c5c      	adds	r4, r3, #1
 8016a04:	800c      	strh	r4, [r1, #0]
 8016a06:	18d3      	adds	r3, r2, r3
 8016a08:	b2c2      	uxtb	r2, r0
 8016a0a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	8adb      	ldrh	r3, [r3, #22]
 8016a10:	0a1b      	lsrs	r3, r3, #8
 8016a12:	b298      	uxth	r0, r3
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	681a      	ldr	r2, [r3, #0]
 8016a18:	197b      	adds	r3, r7, r5
 8016a1a:	881b      	ldrh	r3, [r3, #0]
 8016a1c:	1979      	adds	r1, r7, r5
 8016a1e:	1c5c      	adds	r4, r3, #1
 8016a20:	800c      	strh	r4, [r1, #0]
 8016a22:	18d3      	adds	r3, r2, r3
 8016a24:	b2c2      	uxtb	r2, r0
 8016a26:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6998      	ldr	r0, [r3, #24]
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	681a      	ldr	r2, [r3, #0]
 8016a30:	197b      	adds	r3, r7, r5
 8016a32:	881b      	ldrh	r3, [r3, #0]
 8016a34:	1979      	adds	r1, r7, r5
 8016a36:	1c5c      	adds	r4, r3, #1
 8016a38:	800c      	strh	r4, [r1, #0]
 8016a3a:	18d3      	adds	r3, r2, r3
 8016a3c:	b2c2      	uxtb	r2, r0
 8016a3e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	699b      	ldr	r3, [r3, #24]
 8016a44:	0a18      	lsrs	r0, r3, #8
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681a      	ldr	r2, [r3, #0]
 8016a4a:	197b      	adds	r3, r7, r5
 8016a4c:	881b      	ldrh	r3, [r3, #0]
 8016a4e:	1979      	adds	r1, r7, r5
 8016a50:	1c5c      	adds	r4, r3, #1
 8016a52:	800c      	strh	r4, [r1, #0]
 8016a54:	18d3      	adds	r3, r2, r3
 8016a56:	b2c2      	uxtb	r2, r0
 8016a58:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	699b      	ldr	r3, [r3, #24]
 8016a5e:	0c18      	lsrs	r0, r3, #16
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	681a      	ldr	r2, [r3, #0]
 8016a64:	197b      	adds	r3, r7, r5
 8016a66:	881b      	ldrh	r3, [r3, #0]
 8016a68:	1979      	adds	r1, r7, r5
 8016a6a:	1c5c      	adds	r4, r3, #1
 8016a6c:	800c      	strh	r4, [r1, #0]
 8016a6e:	18d3      	adds	r3, r2, r3
 8016a70:	b2c2      	uxtb	r2, r0
 8016a72:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	699b      	ldr	r3, [r3, #24]
 8016a78:	0e18      	lsrs	r0, r3, #24
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681a      	ldr	r2, [r3, #0]
 8016a7e:	197b      	adds	r3, r7, r5
 8016a80:	881b      	ldrh	r3, [r3, #0]
 8016a82:	1979      	adds	r1, r7, r5
 8016a84:	1c5c      	adds	r4, r3, #1
 8016a86:	800c      	strh	r4, [r1, #0]
 8016a88:	18d3      	adds	r3, r2, r3
 8016a8a:	b2c2      	uxtb	r2, r0
 8016a8c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016a8e:	197b      	adds	r3, r7, r5
 8016a90:	881b      	ldrh	r3, [r3, #0]
 8016a92:	b2da      	uxtb	r2, r3
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016a98:	2300      	movs	r3, #0
}
 8016a9a:	0018      	movs	r0, r3
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	b004      	add	sp, #16
 8016aa0:	bdb0      	pop	{r4, r5, r7, pc}

08016aa2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8016aa2:	b5b0      	push	{r4, r5, r7, lr}
 8016aa4:	b084      	sub	sp, #16
 8016aa6:	af00      	add	r7, sp, #0
 8016aa8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d003      	beq.n	8016ab8 <LoRaMacSerializerData+0x16>
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d101      	bne.n	8016abc <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016ab8:	2301      	movs	r3, #1
 8016aba:	e119      	b.n	8016cf0 <LoRaMacSerializerData+0x24e>
    }

    uint16_t bufItr = 0;
 8016abc:	230e      	movs	r3, #14
 8016abe:	18fb      	adds	r3, r7, r3
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8016ac4:	200c      	movs	r0, #12
 8016ac6:	183b      	adds	r3, r7, r0
 8016ac8:	2208      	movs	r2, #8
 8016aca:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	7b1b      	ldrb	r3, [r3, #12]
 8016ad0:	071b      	lsls	r3, r3, #28
 8016ad2:	0f1b      	lsrs	r3, r3, #28
 8016ad4:	b2db      	uxtb	r3, r3
 8016ad6:	b299      	uxth	r1, r3
 8016ad8:	183b      	adds	r3, r7, r0
 8016ada:	183a      	adds	r2, r7, r0
 8016adc:	8812      	ldrh	r2, [r2, #0]
 8016ade:	188a      	adds	r2, r1, r2
 8016ae0:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	2228      	movs	r2, #40	; 0x28
 8016ae6:	5c9b      	ldrb	r3, [r3, r2]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d004      	beq.n	8016af6 <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8016aec:	183b      	adds	r3, r7, r0
 8016aee:	183a      	adds	r2, r7, r0
 8016af0:	8812      	ldrh	r2, [r2, #0]
 8016af2:	3201      	adds	r2, #1
 8016af4:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2228      	movs	r2, #40	; 0x28
 8016afa:	5c9b      	ldrb	r3, [r3, r2]
 8016afc:	b299      	uxth	r1, r3
 8016afe:	200c      	movs	r0, #12
 8016b00:	183b      	adds	r3, r7, r0
 8016b02:	183a      	adds	r2, r7, r0
 8016b04:	8812      	ldrh	r2, [r2, #0]
 8016b06:	188a      	adds	r2, r1, r2
 8016b08:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8016b0a:	0001      	movs	r1, r0
 8016b0c:	187b      	adds	r3, r7, r1
 8016b0e:	187a      	adds	r2, r7, r1
 8016b10:	8812      	ldrh	r2, [r2, #0]
 8016b12:	3204      	adds	r2, #4
 8016b14:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	791b      	ldrb	r3, [r3, #4]
 8016b1a:	b29b      	uxth	r3, r3
 8016b1c:	187a      	adds	r2, r7, r1
 8016b1e:	8812      	ldrh	r2, [r2, #0]
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d901      	bls.n	8016b28 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016b24:	2302      	movs	r3, #2
 8016b26:	e0e3      	b.n	8016cf0 <LoRaMacSerializerData+0x24e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	681a      	ldr	r2, [r3, #0]
 8016b2c:	250e      	movs	r5, #14
 8016b2e:	197b      	adds	r3, r7, r5
 8016b30:	881b      	ldrh	r3, [r3, #0]
 8016b32:	1979      	adds	r1, r7, r5
 8016b34:	1c58      	adds	r0, r3, #1
 8016b36:	8008      	strh	r0, [r1, #0]
 8016b38:	18d3      	adds	r3, r2, r3
 8016b3a:	687a      	ldr	r2, [r7, #4]
 8016b3c:	7952      	ldrb	r2, [r2, #5]
 8016b3e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	6898      	ldr	r0, [r3, #8]
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	681a      	ldr	r2, [r3, #0]
 8016b48:	197b      	adds	r3, r7, r5
 8016b4a:	881b      	ldrh	r3, [r3, #0]
 8016b4c:	1979      	adds	r1, r7, r5
 8016b4e:	1c5c      	adds	r4, r3, #1
 8016b50:	800c      	strh	r4, [r1, #0]
 8016b52:	18d3      	adds	r3, r2, r3
 8016b54:	b2c2      	uxtb	r2, r0
 8016b56:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	689b      	ldr	r3, [r3, #8]
 8016b5c:	0a18      	lsrs	r0, r3, #8
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	681a      	ldr	r2, [r3, #0]
 8016b62:	197b      	adds	r3, r7, r5
 8016b64:	881b      	ldrh	r3, [r3, #0]
 8016b66:	1979      	adds	r1, r7, r5
 8016b68:	1c5c      	adds	r4, r3, #1
 8016b6a:	800c      	strh	r4, [r1, #0]
 8016b6c:	18d3      	adds	r3, r2, r3
 8016b6e:	b2c2      	uxtb	r2, r0
 8016b70:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	689b      	ldr	r3, [r3, #8]
 8016b76:	0c18      	lsrs	r0, r3, #16
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	681a      	ldr	r2, [r3, #0]
 8016b7c:	197b      	adds	r3, r7, r5
 8016b7e:	881b      	ldrh	r3, [r3, #0]
 8016b80:	1979      	adds	r1, r7, r5
 8016b82:	1c5c      	adds	r4, r3, #1
 8016b84:	800c      	strh	r4, [r1, #0]
 8016b86:	18d3      	adds	r3, r2, r3
 8016b88:	b2c2      	uxtb	r2, r0
 8016b8a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	689b      	ldr	r3, [r3, #8]
 8016b90:	0e18      	lsrs	r0, r3, #24
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	681a      	ldr	r2, [r3, #0]
 8016b96:	197b      	adds	r3, r7, r5
 8016b98:	881b      	ldrh	r3, [r3, #0]
 8016b9a:	1979      	adds	r1, r7, r5
 8016b9c:	1c5c      	adds	r4, r3, #1
 8016b9e:	800c      	strh	r4, [r1, #0]
 8016ba0:	18d3      	adds	r3, r2, r3
 8016ba2:	b2c2      	uxtb	r2, r0
 8016ba4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	681a      	ldr	r2, [r3, #0]
 8016baa:	197b      	adds	r3, r7, r5
 8016bac:	881b      	ldrh	r3, [r3, #0]
 8016bae:	1979      	adds	r1, r7, r5
 8016bb0:	1c58      	adds	r0, r3, #1
 8016bb2:	8008      	strh	r0, [r1, #0]
 8016bb4:	18d3      	adds	r3, r2, r3
 8016bb6:	687a      	ldr	r2, [r7, #4]
 8016bb8:	7b12      	ldrb	r2, [r2, #12]
 8016bba:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	89d8      	ldrh	r0, [r3, #14]
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681a      	ldr	r2, [r3, #0]
 8016bc4:	197b      	adds	r3, r7, r5
 8016bc6:	881b      	ldrh	r3, [r3, #0]
 8016bc8:	1979      	adds	r1, r7, r5
 8016bca:	1c5c      	adds	r4, r3, #1
 8016bcc:	800c      	strh	r4, [r1, #0]
 8016bce:	18d3      	adds	r3, r2, r3
 8016bd0:	b2c2      	uxtb	r2, r0
 8016bd2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	89db      	ldrh	r3, [r3, #14]
 8016bd8:	0a1b      	lsrs	r3, r3, #8
 8016bda:	b298      	uxth	r0, r3
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	197b      	adds	r3, r7, r5
 8016be2:	881b      	ldrh	r3, [r3, #0]
 8016be4:	1979      	adds	r1, r7, r5
 8016be6:	1c5c      	adds	r4, r3, #1
 8016be8:	800c      	strh	r4, [r1, #0]
 8016bea:	18d3      	adds	r3, r2, r3
 8016bec:	b2c2      	uxtb	r2, r0
 8016bee:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681a      	ldr	r2, [r3, #0]
 8016bf4:	002c      	movs	r4, r5
 8016bf6:	197b      	adds	r3, r7, r5
 8016bf8:	881b      	ldrh	r3, [r3, #0]
 8016bfa:	18d0      	adds	r0, r2, r3
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	3310      	adds	r3, #16
 8016c00:	0019      	movs	r1, r3
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	7b1b      	ldrb	r3, [r3, #12]
 8016c06:	071b      	lsls	r3, r3, #28
 8016c08:	0f1b      	lsrs	r3, r3, #28
 8016c0a:	b2db      	uxtb	r3, r3
 8016c0c:	b29b      	uxth	r3, r3
 8016c0e:	001a      	movs	r2, r3
 8016c10:	f002 fd02 	bl	8019618 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	7b1b      	ldrb	r3, [r3, #12]
 8016c18:	071b      	lsls	r3, r3, #28
 8016c1a:	0f1b      	lsrs	r3, r3, #28
 8016c1c:	b2db      	uxtb	r3, r3
 8016c1e:	b299      	uxth	r1, r3
 8016c20:	193b      	adds	r3, r7, r4
 8016c22:	193a      	adds	r2, r7, r4
 8016c24:	8812      	ldrh	r2, [r2, #0]
 8016c26:	188a      	adds	r2, r1, r2
 8016c28:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	2228      	movs	r2, #40	; 0x28
 8016c2e:	5c9b      	ldrb	r3, [r3, r2]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d00b      	beq.n	8016c4c <LoRaMacSerializerData+0x1aa>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	681a      	ldr	r2, [r3, #0]
 8016c38:	193b      	adds	r3, r7, r4
 8016c3a:	881b      	ldrh	r3, [r3, #0]
 8016c3c:	1939      	adds	r1, r7, r4
 8016c3e:	1c58      	adds	r0, r3, #1
 8016c40:	8008      	strh	r0, [r1, #0]
 8016c42:	18d3      	adds	r3, r2, r3
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	2120      	movs	r1, #32
 8016c48:	5c52      	ldrb	r2, [r2, r1]
 8016c4a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681a      	ldr	r2, [r3, #0]
 8016c50:	240e      	movs	r4, #14
 8016c52:	193b      	adds	r3, r7, r4
 8016c54:	881b      	ldrh	r3, [r3, #0]
 8016c56:	18d0      	adds	r0, r2, r3
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	2228      	movs	r2, #40	; 0x28
 8016c60:	5c9b      	ldrb	r3, [r3, r2]
 8016c62:	b29b      	uxth	r3, r3
 8016c64:	001a      	movs	r2, r3
 8016c66:	f002 fcd7 	bl	8019618 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2228      	movs	r2, #40	; 0x28
 8016c6e:	5c9b      	ldrb	r3, [r3, r2]
 8016c70:	b299      	uxth	r1, r3
 8016c72:	193b      	adds	r3, r7, r4
 8016c74:	193a      	adds	r2, r7, r4
 8016c76:	8812      	ldrh	r2, [r2, #0]
 8016c78:	188a      	adds	r2, r1, r2
 8016c7a:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	681a      	ldr	r2, [r3, #0]
 8016c84:	193b      	adds	r3, r7, r4
 8016c86:	881b      	ldrh	r3, [r3, #0]
 8016c88:	0025      	movs	r5, r4
 8016c8a:	1939      	adds	r1, r7, r4
 8016c8c:	1c5c      	adds	r4, r3, #1
 8016c8e:	800c      	strh	r4, [r1, #0]
 8016c90:	18d3      	adds	r3, r2, r3
 8016c92:	b2c2      	uxtb	r2, r0
 8016c94:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c9a:	0a18      	lsrs	r0, r3, #8
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	681a      	ldr	r2, [r3, #0]
 8016ca0:	197b      	adds	r3, r7, r5
 8016ca2:	881b      	ldrh	r3, [r3, #0]
 8016ca4:	1979      	adds	r1, r7, r5
 8016ca6:	1c5c      	adds	r4, r3, #1
 8016ca8:	800c      	strh	r4, [r1, #0]
 8016caa:	18d3      	adds	r3, r2, r3
 8016cac:	b2c2      	uxtb	r2, r0
 8016cae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cb4:	0c18      	lsrs	r0, r3, #16
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	681a      	ldr	r2, [r3, #0]
 8016cba:	197b      	adds	r3, r7, r5
 8016cbc:	881b      	ldrh	r3, [r3, #0]
 8016cbe:	1979      	adds	r1, r7, r5
 8016cc0:	1c5c      	adds	r4, r3, #1
 8016cc2:	800c      	strh	r4, [r1, #0]
 8016cc4:	18d3      	adds	r3, r2, r3
 8016cc6:	b2c2      	uxtb	r2, r0
 8016cc8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cce:	0e18      	lsrs	r0, r3, #24
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	681a      	ldr	r2, [r3, #0]
 8016cd4:	197b      	adds	r3, r7, r5
 8016cd6:	881b      	ldrh	r3, [r3, #0]
 8016cd8:	1979      	adds	r1, r7, r5
 8016cda:	1c5c      	adds	r4, r3, #1
 8016cdc:	800c      	strh	r4, [r1, #0]
 8016cde:	18d3      	adds	r3, r2, r3
 8016ce0:	b2c2      	uxtb	r2, r0
 8016ce2:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016ce4:	197b      	adds	r3, r7, r5
 8016ce6:	881b      	ldrh	r3, [r3, #0]
 8016ce8:	b2da      	uxtb	r2, r3
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016cee:	2300      	movs	r3, #0
}
 8016cf0:	0018      	movs	r0, r3
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	b004      	add	sp, #16
 8016cf6:	bdb0      	pop	{r4, r5, r7, pc}

08016cf8 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b082      	sub	sp, #8
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	0002      	movs	r2, r0
 8016d00:	1dfb      	adds	r3, r7, #7
 8016d02:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d04:	1dfb      	adds	r3, r7, #7
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	2b05      	cmp	r3, #5
 8016d0a:	d101      	bne.n	8016d10 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016d0c:	2301      	movs	r3, #1
 8016d0e:	e000      	b.n	8016d12 <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016d10:	2300      	movs	r3, #0
        }
    }
}
 8016d12:	0018      	movs	r0, r3
 8016d14:	46bd      	mov	sp, r7
 8016d16:	b002      	add	sp, #8
 8016d18:	bd80      	pop	{r7, pc}

08016d1a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016d1a:	b580      	push	{r7, lr}
 8016d1c:	b084      	sub	sp, #16
 8016d1e:	af00      	add	r7, sp, #0
 8016d20:	0002      	movs	r2, r0
 8016d22:	6039      	str	r1, [r7, #0]
 8016d24:	1dfb      	adds	r3, r7, #7
 8016d26:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8016d28:	2308      	movs	r3, #8
 8016d2a:	18fb      	adds	r3, r7, r3
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	601a      	str	r2, [r3, #0]
    switch( region )
 8016d30:	1dfb      	adds	r3, r7, #7
 8016d32:	781b      	ldrb	r3, [r3, #0]
 8016d34:	2b05      	cmp	r3, #5
 8016d36:	d109      	bne.n	8016d4c <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016d38:	683b      	ldr	r3, [r7, #0]
 8016d3a:	0018      	movs	r0, r3
 8016d3c:	f001 fa4e 	bl	80181dc <RegionEU868GetPhyParam>
 8016d40:	0003      	movs	r3, r0
 8016d42:	001a      	movs	r2, r3
 8016d44:	230c      	movs	r3, #12
 8016d46:	18fb      	adds	r3, r7, r3
 8016d48:	601a      	str	r2, [r3, #0]
 8016d4a:	e005      	b.n	8016d58 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016d4c:	230c      	movs	r3, #12
 8016d4e:	18fb      	adds	r3, r7, r3
 8016d50:	2208      	movs	r2, #8
 8016d52:	18ba      	adds	r2, r7, r2
 8016d54:	6812      	ldr	r2, [r2, #0]
 8016d56:	601a      	str	r2, [r3, #0]
 8016d58:	230c      	movs	r3, #12
 8016d5a:	18fb      	adds	r3, r7, r3
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	681a      	ldr	r2, [r3, #0]
 8016d60:	0013      	movs	r3, r2
        }
    }
}
 8016d62:	0018      	movs	r0, r3
 8016d64:	46bd      	mov	sp, r7
 8016d66:	b004      	add	sp, #16
 8016d68:	bd80      	pop	{r7, pc}

08016d6a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016d6a:	b580      	push	{r7, lr}
 8016d6c:	b082      	sub	sp, #8
 8016d6e:	af00      	add	r7, sp, #0
 8016d70:	0002      	movs	r2, r0
 8016d72:	6039      	str	r1, [r7, #0]
 8016d74:	1dfb      	adds	r3, r7, #7
 8016d76:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d78:	1dfb      	adds	r3, r7, #7
 8016d7a:	781b      	ldrb	r3, [r3, #0]
 8016d7c:	2b05      	cmp	r3, #5
 8016d7e:	d104      	bne.n	8016d8a <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8016d80:	683b      	ldr	r3, [r7, #0]
 8016d82:	0018      	movs	r0, r3
 8016d84:	f001 fb4a 	bl	801841c <RegionEU868SetBandTxDone>
 8016d88:	e000      	b.n	8016d8c <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016d8a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	b002      	add	sp, #8
 8016d90:	bd80      	pop	{r7, pc}

08016d92 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016d92:	b580      	push	{r7, lr}
 8016d94:	b082      	sub	sp, #8
 8016d96:	af00      	add	r7, sp, #0
 8016d98:	0002      	movs	r2, r0
 8016d9a:	6039      	str	r1, [r7, #0]
 8016d9c:	1dfb      	adds	r3, r7, #7
 8016d9e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016da0:	1dfb      	adds	r3, r7, #7
 8016da2:	781b      	ldrb	r3, [r3, #0]
 8016da4:	2b05      	cmp	r3, #5
 8016da6:	d104      	bne.n	8016db2 <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016da8:	683b      	ldr	r3, [r7, #0]
 8016daa:	0018      	movs	r0, r3
 8016dac:	f001 fb62 	bl	8018474 <RegionEU868InitDefaults>
 8016db0:	e000      	b.n	8016db4 <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016db2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016db4:	46c0      	nop			; (mov r8, r8)
 8016db6:	46bd      	mov	sp, r7
 8016db8:	b002      	add	sp, #8
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b082      	sub	sp, #8
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	0002      	movs	r2, r0
 8016dc4:	6039      	str	r1, [r7, #0]
 8016dc6:	1dfb      	adds	r3, r7, #7
 8016dc8:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016dca:	1dfb      	adds	r3, r7, #7
 8016dcc:	781b      	ldrb	r3, [r3, #0]
 8016dce:	2b05      	cmp	r3, #5
 8016dd0:	d105      	bne.n	8016dde <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	0018      	movs	r0, r3
 8016dd6:	f001 fbe1 	bl	801859c <RegionEU868GetNvmCtx>
 8016dda:	0003      	movs	r3, r0
 8016ddc:	e000      	b.n	8016de0 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8016dde:	2300      	movs	r3, #0
        }
    }
}
 8016de0:	0018      	movs	r0, r3
 8016de2:	46bd      	mov	sp, r7
 8016de4:	b002      	add	sp, #8
 8016de6:	bd80      	pop	{r7, pc}

08016de8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b082      	sub	sp, #8
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6039      	str	r1, [r7, #0]
 8016df0:	0011      	movs	r1, r2
 8016df2:	1dfb      	adds	r3, r7, #7
 8016df4:	1c02      	adds	r2, r0, #0
 8016df6:	701a      	strb	r2, [r3, #0]
 8016df8:	1dbb      	adds	r3, r7, #6
 8016dfa:	1c0a      	adds	r2, r1, #0
 8016dfc:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016dfe:	1dfb      	adds	r3, r7, #7
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	2b05      	cmp	r3, #5
 8016e04:	d108      	bne.n	8016e18 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016e06:	1dbb      	adds	r3, r7, #6
 8016e08:	781a      	ldrb	r2, [r3, #0]
 8016e0a:	683b      	ldr	r3, [r7, #0]
 8016e0c:	0011      	movs	r1, r2
 8016e0e:	0018      	movs	r0, r3
 8016e10:	f001 fbd4 	bl	80185bc <RegionEU868Verify>
 8016e14:	0003      	movs	r3, r0
 8016e16:	e000      	b.n	8016e1a <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016e18:	2300      	movs	r3, #0
        }
    }
}
 8016e1a:	0018      	movs	r0, r3
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	b002      	add	sp, #8
 8016e20:	bd80      	pop	{r7, pc}

08016e22 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016e22:	b580      	push	{r7, lr}
 8016e24:	b082      	sub	sp, #8
 8016e26:	af00      	add	r7, sp, #0
 8016e28:	0002      	movs	r2, r0
 8016e2a:	6039      	str	r1, [r7, #0]
 8016e2c:	1dfb      	adds	r3, r7, #7
 8016e2e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e30:	1dfb      	adds	r3, r7, #7
 8016e32:	781b      	ldrb	r3, [r3, #0]
 8016e34:	2b05      	cmp	r3, #5
 8016e36:	d104      	bne.n	8016e42 <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8016e38:	683b      	ldr	r3, [r7, #0]
 8016e3a:	0018      	movs	r0, r3
 8016e3c:	f001 fc18 	bl	8018670 <RegionEU868ApplyCFList>
 8016e40:	e000      	b.n	8016e44 <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016e42:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016e44:	46c0      	nop			; (mov r8, r8)
 8016e46:	46bd      	mov	sp, r7
 8016e48:	b002      	add	sp, #8
 8016e4a:	bd80      	pop	{r7, pc}

08016e4c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b082      	sub	sp, #8
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	0002      	movs	r2, r0
 8016e54:	6039      	str	r1, [r7, #0]
 8016e56:	1dfb      	adds	r3, r7, #7
 8016e58:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e5a:	1dfb      	adds	r3, r7, #7
 8016e5c:	781b      	ldrb	r3, [r3, #0]
 8016e5e:	2b05      	cmp	r3, #5
 8016e60:	d105      	bne.n	8016e6e <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016e62:	683b      	ldr	r3, [r7, #0]
 8016e64:	0018      	movs	r0, r3
 8016e66:	f001 fc93 	bl	8018790 <RegionEU868ChanMaskSet>
 8016e6a:	0003      	movs	r3, r0
 8016e6c:	e000      	b.n	8016e70 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016e6e:	2300      	movs	r3, #0
        }
    }
}
 8016e70:	0018      	movs	r0, r3
 8016e72:	46bd      	mov	sp, r7
 8016e74:	b002      	add	sp, #8
 8016e76:	bd80      	pop	{r7, pc}

08016e78 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016e78:	b590      	push	{r4, r7, lr}
 8016e7a:	b083      	sub	sp, #12
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	0004      	movs	r4, r0
 8016e80:	0008      	movs	r0, r1
 8016e82:	0011      	movs	r1, r2
 8016e84:	603b      	str	r3, [r7, #0]
 8016e86:	1dfb      	adds	r3, r7, #7
 8016e88:	1c22      	adds	r2, r4, #0
 8016e8a:	701a      	strb	r2, [r3, #0]
 8016e8c:	1dbb      	adds	r3, r7, #6
 8016e8e:	1c02      	adds	r2, r0, #0
 8016e90:	701a      	strb	r2, [r3, #0]
 8016e92:	1d7b      	adds	r3, r7, #5
 8016e94:	1c0a      	adds	r2, r1, #0
 8016e96:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e98:	1dfb      	adds	r3, r7, #7
 8016e9a:	781b      	ldrb	r3, [r3, #0]
 8016e9c:	2b05      	cmp	r3, #5
 8016e9e:	d10a      	bne.n	8016eb6 <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016ea0:	69bc      	ldr	r4, [r7, #24]
 8016ea2:	683a      	ldr	r2, [r7, #0]
 8016ea4:	1d7b      	adds	r3, r7, #5
 8016ea6:	7819      	ldrb	r1, [r3, #0]
 8016ea8:	1dbb      	adds	r3, r7, #6
 8016eaa:	2000      	movs	r0, #0
 8016eac:	5618      	ldrsb	r0, [r3, r0]
 8016eae:	0023      	movs	r3, r4
 8016eb0:	f001 fc94 	bl	80187dc <RegionEU868ComputeRxWindowParameters>
 8016eb4:	e000      	b.n	8016eb8 <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016eb6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016eb8:	46c0      	nop			; (mov r8, r8)
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	b003      	add	sp, #12
 8016ebe:	bd90      	pop	{r4, r7, pc}

08016ec0 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b084      	sub	sp, #16
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	60b9      	str	r1, [r7, #8]
 8016ec8:	607a      	str	r2, [r7, #4]
 8016eca:	210f      	movs	r1, #15
 8016ecc:	187b      	adds	r3, r7, r1
 8016ece:	1c02      	adds	r2, r0, #0
 8016ed0:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016ed2:	187b      	adds	r3, r7, r1
 8016ed4:	781b      	ldrb	r3, [r3, #0]
 8016ed6:	2b05      	cmp	r3, #5
 8016ed8:	d107      	bne.n	8016eea <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016eda:	687a      	ldr	r2, [r7, #4]
 8016edc:	68bb      	ldr	r3, [r7, #8]
 8016ede:	0011      	movs	r1, r2
 8016ee0:	0018      	movs	r0, r3
 8016ee2:	f001 fcdd 	bl	80188a0 <RegionEU868RxConfig>
 8016ee6:	0003      	movs	r3, r0
 8016ee8:	e000      	b.n	8016eec <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016eea:	2300      	movs	r3, #0
        }
    }
}
 8016eec:	0018      	movs	r0, r3
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	b004      	add	sp, #16
 8016ef2:	bd80      	pop	{r7, pc}

08016ef4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b084      	sub	sp, #16
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	60b9      	str	r1, [r7, #8]
 8016efc:	607a      	str	r2, [r7, #4]
 8016efe:	603b      	str	r3, [r7, #0]
 8016f00:	210f      	movs	r1, #15
 8016f02:	187b      	adds	r3, r7, r1
 8016f04:	1c02      	adds	r2, r0, #0
 8016f06:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f08:	187b      	adds	r3, r7, r1
 8016f0a:	781b      	ldrb	r3, [r3, #0]
 8016f0c:	2b05      	cmp	r3, #5
 8016f0e:	d107      	bne.n	8016f20 <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016f10:	683a      	ldr	r2, [r7, #0]
 8016f12:	6879      	ldr	r1, [r7, #4]
 8016f14:	68bb      	ldr	r3, [r7, #8]
 8016f16:	0018      	movs	r0, r3
 8016f18:	f001 fdb6 	bl	8018a88 <RegionEU868TxConfig>
 8016f1c:	0003      	movs	r3, r0
 8016f1e:	e000      	b.n	8016f22 <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016f20:	2300      	movs	r3, #0
        }
    }
}
 8016f22:	0018      	movs	r0, r3
 8016f24:	46bd      	mov	sp, r7
 8016f26:	b004      	add	sp, #16
 8016f28:	bd80      	pop	{r7, pc}

08016f2a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016f2a:	b590      	push	{r4, r7, lr}
 8016f2c:	b087      	sub	sp, #28
 8016f2e:	af02      	add	r7, sp, #8
 8016f30:	60b9      	str	r1, [r7, #8]
 8016f32:	607a      	str	r2, [r7, #4]
 8016f34:	603b      	str	r3, [r7, #0]
 8016f36:	210f      	movs	r1, #15
 8016f38:	187b      	adds	r3, r7, r1
 8016f3a:	1c02      	adds	r2, r0, #0
 8016f3c:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f3e:	187b      	adds	r3, r7, r1
 8016f40:	781b      	ldrb	r3, [r3, #0]
 8016f42:	2b05      	cmp	r3, #5
 8016f44:	d10a      	bne.n	8016f5c <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016f46:	6a3c      	ldr	r4, [r7, #32]
 8016f48:	683a      	ldr	r2, [r7, #0]
 8016f4a:	6879      	ldr	r1, [r7, #4]
 8016f4c:	68b8      	ldr	r0, [r7, #8]
 8016f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f50:	9300      	str	r3, [sp, #0]
 8016f52:	0023      	movs	r3, r4
 8016f54:	f001 fe84 	bl	8018c60 <RegionEU868LinkAdrReq>
 8016f58:	0003      	movs	r3, r0
 8016f5a:	e000      	b.n	8016f5e <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016f5c:	2300      	movs	r3, #0
        }
    }
}
 8016f5e:	0018      	movs	r0, r3
 8016f60:	46bd      	mov	sp, r7
 8016f62:	b005      	add	sp, #20
 8016f64:	bd90      	pop	{r4, r7, pc}

08016f66 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016f66:	b580      	push	{r7, lr}
 8016f68:	b082      	sub	sp, #8
 8016f6a:	af00      	add	r7, sp, #0
 8016f6c:	0002      	movs	r2, r0
 8016f6e:	6039      	str	r1, [r7, #0]
 8016f70:	1dfb      	adds	r3, r7, #7
 8016f72:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f74:	1dfb      	adds	r3, r7, #7
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	2b05      	cmp	r3, #5
 8016f7a:	d105      	bne.n	8016f88 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	0018      	movs	r0, r3
 8016f80:	f001 ffc6 	bl	8018f10 <RegionEU868RxParamSetupReq>
 8016f84:	0003      	movs	r3, r0
 8016f86:	e000      	b.n	8016f8a <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016f88:	2300      	movs	r3, #0
        }
    }
}
 8016f8a:	0018      	movs	r0, r3
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	b002      	add	sp, #8
 8016f90:	bd80      	pop	{r7, pc}

08016f92 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016f92:	b580      	push	{r7, lr}
 8016f94:	b082      	sub	sp, #8
 8016f96:	af00      	add	r7, sp, #0
 8016f98:	0002      	movs	r2, r0
 8016f9a:	6039      	str	r1, [r7, #0]
 8016f9c:	1dfb      	adds	r3, r7, #7
 8016f9e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016fa0:	1dfb      	adds	r3, r7, #7
 8016fa2:	781b      	ldrb	r3, [r3, #0]
 8016fa4:	2b05      	cmp	r3, #5
 8016fa6:	d105      	bne.n	8016fb4 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	0018      	movs	r0, r3
 8016fac:	f001 fff9 	bl	8018fa2 <RegionEU868NewChannelReq>
 8016fb0:	0003      	movs	r3, r0
 8016fb2:	e000      	b.n	8016fb6 <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016fb4:	2300      	movs	r3, #0
        }
    }
}
 8016fb6:	0018      	movs	r0, r3
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	b002      	add	sp, #8
 8016fbc:	bd80      	pop	{r7, pc}

08016fbe <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016fbe:	b580      	push	{r7, lr}
 8016fc0:	b082      	sub	sp, #8
 8016fc2:	af00      	add	r7, sp, #0
 8016fc4:	0002      	movs	r2, r0
 8016fc6:	6039      	str	r1, [r7, #0]
 8016fc8:	1dfb      	adds	r3, r7, #7
 8016fca:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016fcc:	1dfb      	adds	r3, r7, #7
 8016fce:	781b      	ldrb	r3, [r3, #0]
 8016fd0:	2b05      	cmp	r3, #5
 8016fd2:	d105      	bne.n	8016fe0 <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	0018      	movs	r0, r3
 8016fd8:	f002 f84b 	bl	8019072 <RegionEU868TxParamSetupReq>
 8016fdc:	0003      	movs	r3, r0
 8016fde:	e000      	b.n	8016fe2 <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016fe0:	2300      	movs	r3, #0
        }
    }
}
 8016fe2:	0018      	movs	r0, r3
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	b002      	add	sp, #8
 8016fe8:	bd80      	pop	{r7, pc}

08016fea <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016fea:	b580      	push	{r7, lr}
 8016fec:	b082      	sub	sp, #8
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	0002      	movs	r2, r0
 8016ff2:	6039      	str	r1, [r7, #0]
 8016ff4:	1dfb      	adds	r3, r7, #7
 8016ff6:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016ff8:	1dfb      	adds	r3, r7, #7
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	2b05      	cmp	r3, #5
 8016ffe:	d105      	bne.n	801700c <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017000:	683b      	ldr	r3, [r7, #0]
 8017002:	0018      	movs	r0, r3
 8017004:	f002 f840 	bl	8019088 <RegionEU868DlChannelReq>
 8017008:	0003      	movs	r3, r0
 801700a:	e000      	b.n	801700e <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801700c:	2300      	movs	r3, #0
        }
    }
}
 801700e:	0018      	movs	r0, r3
 8017010:	46bd      	mov	sp, r7
 8017012:	b002      	add	sp, #8
 8017014:	bd80      	pop	{r7, pc}

08017016 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017016:	b590      	push	{r4, r7, lr}
 8017018:	b083      	sub	sp, #12
 801701a:	af00      	add	r7, sp, #0
 801701c:	0004      	movs	r4, r0
 801701e:	0008      	movs	r0, r1
 8017020:	0011      	movs	r1, r2
 8017022:	1dfb      	adds	r3, r7, #7
 8017024:	1c22      	adds	r2, r4, #0
 8017026:	701a      	strb	r2, [r3, #0]
 8017028:	1dbb      	adds	r3, r7, #6
 801702a:	1c02      	adds	r2, r0, #0
 801702c:	701a      	strb	r2, [r3, #0]
 801702e:	1d7b      	adds	r3, r7, #5
 8017030:	1c0a      	adds	r2, r1, #0
 8017032:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017034:	1dfb      	adds	r3, r7, #7
 8017036:	781b      	ldrb	r3, [r3, #0]
 8017038:	2b05      	cmp	r3, #5
 801703a:	d10a      	bne.n	8017052 <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801703c:	1d7b      	adds	r3, r7, #5
 801703e:	781a      	ldrb	r2, [r3, #0]
 8017040:	1dbb      	adds	r3, r7, #6
 8017042:	781b      	ldrb	r3, [r3, #0]
 8017044:	b25b      	sxtb	r3, r3
 8017046:	0011      	movs	r1, r2
 8017048:	0018      	movs	r0, r3
 801704a:	f002 f86b 	bl	8019124 <RegionEU868AlternateDr>
 801704e:	0003      	movs	r3, r0
 8017050:	e000      	b.n	8017054 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017052:	2300      	movs	r3, #0
        }
    }
}
 8017054:	0018      	movs	r0, r3
 8017056:	46bd      	mov	sp, r7
 8017058:	b003      	add	sp, #12
 801705a:	bd90      	pop	{r4, r7, pc}

0801705c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b084      	sub	sp, #16
 8017060:	af00      	add	r7, sp, #0
 8017062:	60b9      	str	r1, [r7, #8]
 8017064:	607a      	str	r2, [r7, #4]
 8017066:	603b      	str	r3, [r7, #0]
 8017068:	210f      	movs	r1, #15
 801706a:	187b      	adds	r3, r7, r1
 801706c:	1c02      	adds	r2, r0, #0
 801706e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017070:	187b      	adds	r3, r7, r1
 8017072:	781b      	ldrb	r3, [r3, #0]
 8017074:	2b05      	cmp	r3, #5
 8017076:	d107      	bne.n	8017088 <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017078:	69bb      	ldr	r3, [r7, #24]
 801707a:	683a      	ldr	r2, [r7, #0]
 801707c:	6879      	ldr	r1, [r7, #4]
 801707e:	68b8      	ldr	r0, [r7, #8]
 8017080:	f002 f860 	bl	8019144 <RegionEU868NextChannel>
 8017084:	0003      	movs	r3, r0
 8017086:	e000      	b.n	801708a <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017088:	2309      	movs	r3, #9
        }
    }
}
 801708a:	0018      	movs	r0, r3
 801708c:	46bd      	mov	sp, r7
 801708e:	b004      	add	sp, #16
 8017090:	bd80      	pop	{r7, pc}

08017092 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017092:	b580      	push	{r7, lr}
 8017094:	b082      	sub	sp, #8
 8017096:	af00      	add	r7, sp, #0
 8017098:	0002      	movs	r2, r0
 801709a:	6039      	str	r1, [r7, #0]
 801709c:	1dfb      	adds	r3, r7, #7
 801709e:	701a      	strb	r2, [r3, #0]
    switch( region )
 80170a0:	1dfb      	adds	r3, r7, #7
 80170a2:	781b      	ldrb	r3, [r3, #0]
 80170a4:	2b05      	cmp	r3, #5
 80170a6:	d104      	bne.n	80170b2 <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	0018      	movs	r0, r3
 80170ac:	f002 f9f4 	bl	8019498 <RegionEU868SetContinuousWave>
 80170b0:	e000      	b.n	80170b4 <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80170b2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80170b4:	46c0      	nop			; (mov r8, r8)
 80170b6:	46bd      	mov	sp, r7
 80170b8:	b002      	add	sp, #8
 80170ba:	bd80      	pop	{r7, pc}

080170bc <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80170bc:	b5b0      	push	{r4, r5, r7, lr}
 80170be:	b082      	sub	sp, #8
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	0005      	movs	r5, r0
 80170c4:	000c      	movs	r4, r1
 80170c6:	0010      	movs	r0, r2
 80170c8:	0019      	movs	r1, r3
 80170ca:	1dfb      	adds	r3, r7, #7
 80170cc:	1c2a      	adds	r2, r5, #0
 80170ce:	701a      	strb	r2, [r3, #0]
 80170d0:	1dbb      	adds	r3, r7, #6
 80170d2:	1c22      	adds	r2, r4, #0
 80170d4:	701a      	strb	r2, [r3, #0]
 80170d6:	1d7b      	adds	r3, r7, #5
 80170d8:	1c02      	adds	r2, r0, #0
 80170da:	701a      	strb	r2, [r3, #0]
 80170dc:	1d3b      	adds	r3, r7, #4
 80170de:	1c0a      	adds	r2, r1, #0
 80170e0:	701a      	strb	r2, [r3, #0]
    switch( region )
 80170e2:	1dfb      	adds	r3, r7, #7
 80170e4:	781b      	ldrb	r3, [r3, #0]
 80170e6:	2b05      	cmp	r3, #5
 80170e8:	d10c      	bne.n	8017104 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80170ea:	1d3b      	adds	r3, r7, #4
 80170ec:	2200      	movs	r2, #0
 80170ee:	569a      	ldrsb	r2, [r3, r2]
 80170f0:	1d7b      	adds	r3, r7, #5
 80170f2:	2100      	movs	r1, #0
 80170f4:	5659      	ldrsb	r1, [r3, r1]
 80170f6:	1dbb      	adds	r3, r7, #6
 80170f8:	781b      	ldrb	r3, [r3, #0]
 80170fa:	0018      	movs	r0, r3
 80170fc:	f002 fa24 	bl	8019548 <RegionEU868ApplyDrOffset>
 8017100:	0003      	movs	r3, r0
 8017102:	e001      	b.n	8017108 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017104:	1d7b      	adds	r3, r7, #5
 8017106:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8017108:	0018      	movs	r0, r3
 801710a:	46bd      	mov	sp, r7
 801710c:	b002      	add	sp, #8
 801710e:	bdb0      	pop	{r4, r5, r7, pc}

08017110 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b082      	sub	sp, #8
 8017114:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017116:	4b03      	ldr	r3, [pc, #12]	; (8017124 <RegionGetVersion+0x14>)
 8017118:	607b      	str	r3, [r7, #4]

    return version;
 801711a:	687b      	ldr	r3, [r7, #4]
}
 801711c:	0018      	movs	r0, r3
 801711e:	46bd      	mov	sp, r7
 8017120:	b002      	add	sp, #8
 8017122:	bd80      	pop	{r7, pc}
 8017124:	01000300 	.word	0x01000300

08017128 <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801712a:	b087      	sub	sp, #28
 801712c:	af00      	add	r7, sp, #0
 801712e:	60f8      	str	r0, [r7, #12]
 8017130:	0008      	movs	r0, r1
 8017132:	0039      	movs	r1, r7
 8017134:	600a      	str	r2, [r1, #0]
 8017136:	604b      	str	r3, [r1, #4]
 8017138:	230b      	movs	r3, #11
 801713a:	18fb      	adds	r3, r7, r3
 801713c:	1c02      	adds	r2, r0, #0
 801713e:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8017140:	2514      	movs	r5, #20
 8017142:	197c      	adds	r4, r7, r5
 8017144:	003b      	movs	r3, r7
 8017146:	6818      	ldr	r0, [r3, #0]
 8017148:	6859      	ldr	r1, [r3, #4]
 801714a:	f000 f91b 	bl	8017384 <RegionCommonGetJoinDc>
 801714e:	0003      	movs	r3, r0
 8017150:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 8017152:	2616      	movs	r6, #22
 8017154:	19bb      	adds	r3, r7, r6
 8017156:	68fa      	ldr	r2, [r7, #12]
 8017158:	8812      	ldrh	r2, [r2, #0]
 801715a:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 801715c:	230b      	movs	r3, #11
 801715e:	18fb      	adds	r3, r7, r3
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	2201      	movs	r2, #1
 8017164:	4053      	eors	r3, r2
 8017166:	b2db      	uxtb	r3, r3
 8017168:	2b00      	cmp	r3, #0
 801716a:	d012      	beq.n	8017192 <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 801716c:	197c      	adds	r4, r7, r5
 801716e:	003b      	movs	r3, r7
 8017170:	6818      	ldr	r0, [r3, #0]
 8017172:	6859      	ldr	r1, [r3, #4]
 8017174:	f000 f906 	bl	8017384 <RegionCommonGetJoinDc>
 8017178:	0003      	movs	r3, r0
 801717a:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801717c:	19ba      	adds	r2, r7, r6
 801717e:	197b      	adds	r3, r7, r5
 8017180:	19b9      	adds	r1, r7, r6
 8017182:	880c      	ldrh	r4, [r1, #0]
 8017184:	881b      	ldrh	r3, [r3, #0]
 8017186:	b298      	uxth	r0, r3
 8017188:	b2a1      	uxth	r1, r4
 801718a:	4288      	cmp	r0, r1
 801718c:	d200      	bcs.n	8017190 <GetDutyCycle+0x68>
 801718e:	1c23      	adds	r3, r4, #0
 8017190:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017192:	2216      	movs	r2, #22
 8017194:	18bb      	adds	r3, r7, r2
 8017196:	881b      	ldrh	r3, [r3, #0]
 8017198:	2b00      	cmp	r3, #0
 801719a:	d102      	bne.n	80171a2 <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 801719c:	18bb      	adds	r3, r7, r2
 801719e:	2201      	movs	r2, #1
 80171a0:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 80171a2:	2316      	movs	r3, #22
 80171a4:	18fb      	adds	r3, r7, r3
 80171a6:	881b      	ldrh	r3, [r3, #0]
}
 80171a8:	0018      	movs	r0, r3
 80171aa:	46bd      	mov	sp, r7
 80171ac:	b007      	add	sp, #28
 80171ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080171b0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80171b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171b2:	b087      	sub	sp, #28
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	60f8      	str	r0, [r7, #12]
 80171b8:	0008      	movs	r0, r1
 80171ba:	0039      	movs	r1, r7
 80171bc:	600a      	str	r2, [r1, #0]
 80171be:	604b      	str	r3, [r1, #4]
 80171c0:	210b      	movs	r1, #11
 80171c2:	187b      	adds	r3, r7, r1
 80171c4:	1c02      	adds	r2, r0, #0
 80171c6:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 80171c8:	2614      	movs	r6, #20
 80171ca:	19bb      	adds	r3, r7, r6
 80171cc:	68fa      	ldr	r2, [r7, #12]
 80171ce:	8812      	ldrh	r2, [r2, #0]
 80171d0:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 80171d2:	2317      	movs	r3, #23
 80171d4:	18fb      	adds	r3, r7, r3
 80171d6:	2201      	movs	r2, #1
 80171d8:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80171da:	19bc      	adds	r4, r7, r6
 80171dc:	003b      	movs	r3, r7
 80171de:	000d      	movs	r5, r1
 80171e0:	187a      	adds	r2, r7, r1
 80171e2:	7811      	ldrb	r1, [r2, #0]
 80171e4:	68f8      	ldr	r0, [r7, #12]
 80171e6:	681a      	ldr	r2, [r3, #0]
 80171e8:	685b      	ldr	r3, [r3, #4]
 80171ea:	f7ff ff9d 	bl	8017128 <GetDutyCycle>
 80171ee:	0003      	movs	r3, r0
 80171f0:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 80171f2:	197b      	adds	r3, r7, r5
 80171f4:	781b      	ldrb	r3, [r3, #0]
 80171f6:	2201      	movs	r2, #1
 80171f8:	4053      	eors	r3, r2
 80171fa:	b2db      	uxtb	r3, r3
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d00a      	beq.n	8017216 <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 8017200:	19bb      	adds	r3, r7, r6
 8017202:	881b      	ldrh	r3, [r3, #0]
 8017204:	2164      	movs	r1, #100	; 0x64
 8017206:	0018      	movs	r0, r3
 8017208:	f7e8 ff90 	bl	800012c <__udivsi3>
 801720c:	0003      	movs	r3, r0
 801720e:	b29a      	uxth	r2, r3
 8017210:	2317      	movs	r3, #23
 8017212:	18fb      	adds	r3, r7, r3
 8017214:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 8017216:	2317      	movs	r3, #23
 8017218:	18fb      	adds	r3, r7, r3
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	4a09      	ldr	r2, [pc, #36]	; (8017244 <SetMaxTimeCredits+0x94>)
 801721e:	4353      	muls	r3, r2
 8017220:	001a      	movs	r2, r3
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	685b      	ldr	r3, [r3, #4]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d103      	bne.n	8017236 <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	68da      	ldr	r2, [r3, #12]
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 8017236:	2314      	movs	r3, #20
 8017238:	18fb      	adds	r3, r7, r3
 801723a:	881b      	ldrh	r3, [r3, #0]
}
 801723c:	0018      	movs	r0, r3
 801723e:	46bd      	mov	sp, r7
 8017240:	b007      	add	sp, #28
 8017242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017244:	0036ee80 	.word	0x0036ee80

08017248 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017248:	b590      	push	{r4, r7, lr}
 801724a:	b085      	sub	sp, #20
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
 8017250:	000c      	movs	r4, r1
 8017252:	0010      	movs	r0, r2
 8017254:	0019      	movs	r1, r3
 8017256:	1cfb      	adds	r3, r7, #3
 8017258:	1c22      	adds	r2, r4, #0
 801725a:	701a      	strb	r2, [r3, #0]
 801725c:	1cbb      	adds	r3, r7, #2
 801725e:	1c02      	adds	r2, r0, #0
 8017260:	701a      	strb	r2, [r3, #0]
 8017262:	1c7b      	adds	r3, r7, #1
 8017264:	1c0a      	adds	r2, r1, #0
 8017266:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 8017268:	230e      	movs	r3, #14
 801726a:	18fc      	adds	r4, r7, r3
 801726c:	2320      	movs	r3, #32
 801726e:	18fb      	adds	r3, r7, r3
 8017270:	1cfa      	adds	r2, r7, #3
 8017272:	7811      	ldrb	r1, [r2, #0]
 8017274:	6878      	ldr	r0, [r7, #4]
 8017276:	681a      	ldr	r2, [r3, #0]
 8017278:	685b      	ldr	r3, [r3, #4]
 801727a:	f7ff ff99 	bl	80171b0 <SetMaxTimeCredits>
 801727e:	0003      	movs	r3, r0
 8017280:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8017282:	1cfb      	adds	r3, r7, #3
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	2201      	movs	r2, #1
 8017288:	4053      	eors	r3, r2
 801728a:	b2db      	uxtb	r3, r3
 801728c:	2b00      	cmp	r3, #0
 801728e:	d012      	beq.n	80172b6 <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 8017290:	1cbb      	adds	r3, r7, #2
 8017292:	781b      	ldrb	r3, [r3, #0]
 8017294:	2201      	movs	r2, #1
 8017296:	4053      	eors	r3, r2
 8017298:	b2db      	uxtb	r3, r3
 801729a:	2b00      	cmp	r3, #0
 801729c:	d016      	beq.n	80172cc <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 801729e:	1c7b      	adds	r3, r7, #1
 80172a0:	781b      	ldrb	r3, [r3, #0]
 80172a2:	2201      	movs	r2, #1
 80172a4:	4053      	eors	r3, r2
 80172a6:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d00f      	beq.n	80172cc <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	68da      	ldr	r2, [r3, #12]
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	609a      	str	r2, [r3, #8]
 80172b4:	e00a      	b.n	80172cc <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80172b6:	1cbb      	adds	r3, r7, #2
 80172b8:	781b      	ldrb	r3, [r3, #0]
 80172ba:	2201      	movs	r2, #1
 80172bc:	4053      	eors	r3, r2
 80172be:	b2db      	uxtb	r3, r3
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d003      	beq.n	80172cc <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	68da      	ldr	r2, [r3, #12]
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	685b      	ldr	r3, [r3, #4]
 80172d0:	0018      	movs	r0, r3
 80172d2:	f005 fe9d 	bl	801d010 <UTIL_TIMER_GetElapsedTime>
 80172d6:	0002      	movs	r2, r0
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	689b      	ldr	r3, [r3, #8]
 80172dc:	18d2      	adds	r2, r2, r3
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	689a      	ldr	r2, [r3, #8]
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	68db      	ldr	r3, [r3, #12]
 80172ea:	429a      	cmp	r2, r3
 80172ec:	d903      	bls.n	80172f6 <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	68da      	ldr	r2, [r3, #12]
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172fa:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80172fc:	230e      	movs	r3, #14
 80172fe:	18fb      	adds	r3, r7, r3
 8017300:	881b      	ldrh	r3, [r3, #0]
}
 8017302:	0018      	movs	r0, r3
 8017304:	46bd      	mov	sp, r7
 8017306:	b005      	add	sp, #20
 8017308:	bd90      	pop	{r4, r7, pc}

0801730a <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801730a:	b580      	push	{r7, lr}
 801730c:	b084      	sub	sp, #16
 801730e:	af00      	add	r7, sp, #0
 8017310:	0002      	movs	r2, r0
 8017312:	1dbb      	adds	r3, r7, #6
 8017314:	801a      	strh	r2, [r3, #0]
 8017316:	1d7b      	adds	r3, r7, #5
 8017318:	1c0a      	adds	r2, r1, #0
 801731a:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 801731c:	230f      	movs	r3, #15
 801731e:	18fb      	adds	r3, r7, r3
 8017320:	2200      	movs	r2, #0
 8017322:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017324:	230e      	movs	r3, #14
 8017326:	18fb      	adds	r3, r7, r3
 8017328:	2200      	movs	r2, #0
 801732a:	701a      	strb	r2, [r3, #0]
 801732c:	e01b      	b.n	8017366 <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801732e:	1dbb      	adds	r3, r7, #6
 8017330:	881b      	ldrh	r3, [r3, #0]
 8017332:	200e      	movs	r0, #14
 8017334:	183a      	adds	r2, r7, r0
 8017336:	7812      	ldrb	r2, [r2, #0]
 8017338:	2101      	movs	r1, #1
 801733a:	4091      	lsls	r1, r2
 801733c:	000a      	movs	r2, r1
 801733e:	401a      	ands	r2, r3
 8017340:	183b      	adds	r3, r7, r0
 8017342:	781b      	ldrb	r3, [r3, #0]
 8017344:	2101      	movs	r1, #1
 8017346:	4099      	lsls	r1, r3
 8017348:	000b      	movs	r3, r1
 801734a:	429a      	cmp	r2, r3
 801734c:	d105      	bne.n	801735a <CountChannels+0x50>
        {
            nbActiveBits++;
 801734e:	210f      	movs	r1, #15
 8017350:	187b      	adds	r3, r7, r1
 8017352:	781a      	ldrb	r2, [r3, #0]
 8017354:	187b      	adds	r3, r7, r1
 8017356:	3201      	adds	r2, #1
 8017358:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 801735a:	210e      	movs	r1, #14
 801735c:	187b      	adds	r3, r7, r1
 801735e:	781a      	ldrb	r2, [r3, #0]
 8017360:	187b      	adds	r3, r7, r1
 8017362:	3201      	adds	r2, #1
 8017364:	701a      	strb	r2, [r3, #0]
 8017366:	230e      	movs	r3, #14
 8017368:	18fa      	adds	r2, r7, r3
 801736a:	1d7b      	adds	r3, r7, #5
 801736c:	7812      	ldrb	r2, [r2, #0]
 801736e:	781b      	ldrb	r3, [r3, #0]
 8017370:	429a      	cmp	r2, r3
 8017372:	d3dc      	bcc.n	801732e <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8017374:	230f      	movs	r3, #15
 8017376:	18fb      	adds	r3, r7, r3
 8017378:	781b      	ldrb	r3, [r3, #0]
}
 801737a:	0018      	movs	r0, r3
 801737c:	46bd      	mov	sp, r7
 801737e:	b004      	add	sp, #16
 8017380:	bd80      	pop	{r7, pc}
	...

08017384 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	003b      	movs	r3, r7
 801738c:	6018      	str	r0, [r3, #0]
 801738e:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 8017390:	210e      	movs	r1, #14
 8017392:	187b      	adds	r3, r7, r1
 8017394:	2200      	movs	r2, #0
 8017396:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 8017398:	003b      	movs	r3, r7
 801739a:	681a      	ldr	r2, [r3, #0]
 801739c:	23e1      	movs	r3, #225	; 0xe1
 801739e:	011b      	lsls	r3, r3, #4
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d203      	bcs.n	80173ac <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 80173a4:	187b      	adds	r3, r7, r1
 80173a6:	2264      	movs	r2, #100	; 0x64
 80173a8:	801a      	strh	r2, [r3, #0]
 80173aa:	e00e      	b.n	80173ca <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 80173ac:	003b      	movs	r3, r7
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	4a09      	ldr	r2, [pc, #36]	; (80173d8 <RegionCommonGetJoinDc+0x54>)
 80173b2:	4293      	cmp	r3, r2
 80173b4:	d805      	bhi.n	80173c2 <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 80173b6:	230e      	movs	r3, #14
 80173b8:	18fb      	adds	r3, r7, r3
 80173ba:	22fa      	movs	r2, #250	; 0xfa
 80173bc:	0092      	lsls	r2, r2, #2
 80173be:	801a      	strh	r2, [r3, #0]
 80173c0:	e003      	b.n	80173ca <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 80173c2:	230e      	movs	r3, #14
 80173c4:	18fb      	adds	r3, r7, r3
 80173c6:	4a05      	ldr	r2, [pc, #20]	; (80173dc <RegionCommonGetJoinDc+0x58>)
 80173c8:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 80173ca:	230e      	movs	r3, #14
 80173cc:	18fb      	adds	r3, r7, r3
 80173ce:	881b      	ldrh	r3, [r3, #0]
}
 80173d0:	0018      	movs	r0, r3
 80173d2:	46bd      	mov	sp, r7
 80173d4:	b004      	add	sp, #16
 80173d6:	bd80      	pop	{r7, pc}
 80173d8:	00009aaf 	.word	0x00009aaf
 80173dc:	00002710 	.word	0x00002710

080173e0 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80173e0:	b590      	push	{r4, r7, lr}
 80173e2:	b085      	sub	sp, #20
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	0004      	movs	r4, r0
 80173e8:	6039      	str	r1, [r7, #0]
 80173ea:	0010      	movs	r0, r2
 80173ec:	0019      	movs	r1, r3
 80173ee:	1dfb      	adds	r3, r7, #7
 80173f0:	1c22      	adds	r2, r4, #0
 80173f2:	701a      	strb	r2, [r3, #0]
 80173f4:	1dbb      	adds	r3, r7, #6
 80173f6:	1c02      	adds	r2, r0, #0
 80173f8:	701a      	strb	r2, [r3, #0]
 80173fa:	1d7b      	adds	r3, r7, #5
 80173fc:	1c0a      	adds	r2, r1, #0
 80173fe:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017400:	2320      	movs	r3, #32
 8017402:	18fb      	adds	r3, r7, r3
 8017404:	2200      	movs	r2, #0
 8017406:	569a      	ldrsb	r2, [r3, r2]
 8017408:	1d7b      	adds	r3, r7, #5
 801740a:	2100      	movs	r1, #0
 801740c:	5659      	ldrsb	r1, [r3, r1]
 801740e:	1dbb      	adds	r3, r7, #6
 8017410:	781b      	ldrb	r3, [r3, #0]
 8017412:	b25b      	sxtb	r3, r3
 8017414:	0018      	movs	r0, r3
 8017416:	f000 f87c 	bl	8017512 <RegionCommonValueInRange>
 801741a:	1e03      	subs	r3, r0, #0
 801741c:	d101      	bne.n	8017422 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 801741e:	2300      	movs	r3, #0
 8017420:	e073      	b.n	801750a <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017422:	230f      	movs	r3, #15
 8017424:	18fb      	adds	r3, r7, r3
 8017426:	2200      	movs	r2, #0
 8017428:	701a      	strb	r2, [r3, #0]
 801742a:	230e      	movs	r3, #14
 801742c:	18fb      	adds	r3, r7, r3
 801742e:	2200      	movs	r2, #0
 8017430:	701a      	strb	r2, [r3, #0]
 8017432:	e062      	b.n	80174fa <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017434:	230d      	movs	r3, #13
 8017436:	18fb      	adds	r3, r7, r3
 8017438:	2200      	movs	r2, #0
 801743a:	701a      	strb	r2, [r3, #0]
 801743c:	e04c      	b.n	80174d8 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801743e:	230e      	movs	r3, #14
 8017440:	18fb      	adds	r3, r7, r3
 8017442:	781b      	ldrb	r3, [r3, #0]
 8017444:	005b      	lsls	r3, r3, #1
 8017446:	683a      	ldr	r2, [r7, #0]
 8017448:	18d3      	adds	r3, r2, r3
 801744a:	881b      	ldrh	r3, [r3, #0]
 801744c:	001a      	movs	r2, r3
 801744e:	200d      	movs	r0, #13
 8017450:	183b      	adds	r3, r7, r0
 8017452:	781b      	ldrb	r3, [r3, #0]
 8017454:	411a      	asrs	r2, r3
 8017456:	0013      	movs	r3, r2
 8017458:	2201      	movs	r2, #1
 801745a:	4013      	ands	r3, r2
 801745c:	d036      	beq.n	80174cc <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801745e:	240f      	movs	r4, #15
 8017460:	193b      	adds	r3, r7, r4
 8017462:	781a      	ldrb	r2, [r3, #0]
 8017464:	183b      	adds	r3, r7, r0
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	18d3      	adds	r3, r2, r3
 801746a:	001a      	movs	r2, r3
 801746c:	0013      	movs	r3, r2
 801746e:	005b      	lsls	r3, r3, #1
 8017470:	189b      	adds	r3, r3, r2
 8017472:	009b      	lsls	r3, r3, #2
 8017474:	001a      	movs	r2, r3
 8017476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017478:	189b      	adds	r3, r3, r2
 801747a:	7a1b      	ldrb	r3, [r3, #8]
 801747c:	011b      	lsls	r3, r3, #4
 801747e:	b25b      	sxtb	r3, r3
 8017480:	111b      	asrs	r3, r3, #4
 8017482:	b25b      	sxtb	r3, r3
 8017484:	001a      	movs	r2, r3
 8017486:	230f      	movs	r3, #15
 8017488:	4013      	ands	r3, r2
 801748a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801748c:	193b      	adds	r3, r7, r4
 801748e:	781a      	ldrb	r2, [r3, #0]
 8017490:	183b      	adds	r3, r7, r0
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	18d3      	adds	r3, r2, r3
 8017496:	001a      	movs	r2, r3
 8017498:	0013      	movs	r3, r2
 801749a:	005b      	lsls	r3, r3, #1
 801749c:	189b      	adds	r3, r3, r2
 801749e:	009b      	lsls	r3, r3, #2
 80174a0:	001a      	movs	r2, r3
 80174a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174a4:	189b      	adds	r3, r3, r2
 80174a6:	7a1b      	ldrb	r3, [r3, #8]
 80174a8:	b25b      	sxtb	r3, r3
 80174aa:	111b      	asrs	r3, r3, #4
 80174ac:	b25b      	sxtb	r3, r3
 80174ae:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80174b0:	230f      	movs	r3, #15
 80174b2:	4013      	ands	r3, r2
 80174b4:	b25a      	sxtb	r2, r3
 80174b6:	1dbb      	adds	r3, r7, #6
 80174b8:	781b      	ldrb	r3, [r3, #0]
 80174ba:	b25b      	sxtb	r3, r3
 80174bc:	0018      	movs	r0, r3
 80174be:	f000 f828 	bl	8017512 <RegionCommonValueInRange>
 80174c2:	0003      	movs	r3, r0
 80174c4:	2b01      	cmp	r3, #1
 80174c6:	d101      	bne.n	80174cc <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80174c8:	2301      	movs	r3, #1
 80174ca:	e01e      	b.n	801750a <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 80174cc:	210d      	movs	r1, #13
 80174ce:	187b      	adds	r3, r7, r1
 80174d0:	781a      	ldrb	r2, [r3, #0]
 80174d2:	187b      	adds	r3, r7, r1
 80174d4:	3201      	adds	r2, #1
 80174d6:	701a      	strb	r2, [r3, #0]
 80174d8:	230d      	movs	r3, #13
 80174da:	18fb      	adds	r3, r7, r3
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	2b0f      	cmp	r3, #15
 80174e0:	d9ad      	bls.n	801743e <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80174e2:	220f      	movs	r2, #15
 80174e4:	18bb      	adds	r3, r7, r2
 80174e6:	18ba      	adds	r2, r7, r2
 80174e8:	7812      	ldrb	r2, [r2, #0]
 80174ea:	3210      	adds	r2, #16
 80174ec:	701a      	strb	r2, [r3, #0]
 80174ee:	210e      	movs	r1, #14
 80174f0:	187b      	adds	r3, r7, r1
 80174f2:	781a      	ldrb	r2, [r3, #0]
 80174f4:	187b      	adds	r3, r7, r1
 80174f6:	3201      	adds	r2, #1
 80174f8:	701a      	strb	r2, [r3, #0]
 80174fa:	230f      	movs	r3, #15
 80174fc:	18fa      	adds	r2, r7, r3
 80174fe:	1dfb      	adds	r3, r7, #7
 8017500:	7812      	ldrb	r2, [r2, #0]
 8017502:	781b      	ldrb	r3, [r3, #0]
 8017504:	429a      	cmp	r2, r3
 8017506:	d395      	bcc.n	8017434 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8017508:	2300      	movs	r3, #0
}
 801750a:	0018      	movs	r0, r3
 801750c:	46bd      	mov	sp, r7
 801750e:	b005      	add	sp, #20
 8017510:	bd90      	pop	{r4, r7, pc}

08017512 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017512:	b590      	push	{r4, r7, lr}
 8017514:	b083      	sub	sp, #12
 8017516:	af00      	add	r7, sp, #0
 8017518:	0004      	movs	r4, r0
 801751a:	0008      	movs	r0, r1
 801751c:	0011      	movs	r1, r2
 801751e:	1dfb      	adds	r3, r7, #7
 8017520:	1c22      	adds	r2, r4, #0
 8017522:	701a      	strb	r2, [r3, #0]
 8017524:	1dbb      	adds	r3, r7, #6
 8017526:	1c02      	adds	r2, r0, #0
 8017528:	701a      	strb	r2, [r3, #0]
 801752a:	1d7b      	adds	r3, r7, #5
 801752c:	1c0a      	adds	r2, r1, #0
 801752e:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8017530:	1dfa      	adds	r2, r7, #7
 8017532:	1dbb      	adds	r3, r7, #6
 8017534:	7812      	ldrb	r2, [r2, #0]
 8017536:	b252      	sxtb	r2, r2
 8017538:	781b      	ldrb	r3, [r3, #0]
 801753a:	b25b      	sxtb	r3, r3
 801753c:	429a      	cmp	r2, r3
 801753e:	db09      	blt.n	8017554 <RegionCommonValueInRange+0x42>
 8017540:	1dfa      	adds	r2, r7, #7
 8017542:	1d7b      	adds	r3, r7, #5
 8017544:	7812      	ldrb	r2, [r2, #0]
 8017546:	b252      	sxtb	r2, r2
 8017548:	781b      	ldrb	r3, [r3, #0]
 801754a:	b25b      	sxtb	r3, r3
 801754c:	429a      	cmp	r2, r3
 801754e:	dc01      	bgt.n	8017554 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8017550:	2301      	movs	r3, #1
 8017552:	e000      	b.n	8017556 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8017554:	2300      	movs	r3, #0
}
 8017556:	0018      	movs	r0, r3
 8017558:	46bd      	mov	sp, r7
 801755a:	b003      	add	sp, #12
 801755c:	bd90      	pop	{r4, r7, pc}

0801755e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801755e:	b580      	push	{r7, lr}
 8017560:	b084      	sub	sp, #16
 8017562:	af00      	add	r7, sp, #0
 8017564:	6078      	str	r0, [r7, #4]
 8017566:	0008      	movs	r0, r1
 8017568:	0011      	movs	r1, r2
 801756a:	1cfb      	adds	r3, r7, #3
 801756c:	1c02      	adds	r2, r0, #0
 801756e:	701a      	strb	r2, [r3, #0]
 8017570:	1cbb      	adds	r3, r7, #2
 8017572:	1c0a      	adds	r2, r1, #0
 8017574:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8017576:	210f      	movs	r1, #15
 8017578:	187b      	adds	r3, r7, r1
 801757a:	1cfa      	adds	r2, r7, #3
 801757c:	7812      	ldrb	r2, [r2, #0]
 801757e:	0912      	lsrs	r2, r2, #4
 8017580:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017582:	1cbb      	adds	r3, r7, #2
 8017584:	781b      	ldrb	r3, [r3, #0]
 8017586:	091b      	lsrs	r3, r3, #4
 8017588:	b2db      	uxtb	r3, r3
 801758a:	187a      	adds	r2, r7, r1
 801758c:	7812      	ldrb	r2, [r2, #0]
 801758e:	429a      	cmp	r2, r3
 8017590:	d805      	bhi.n	801759e <RegionCommonChanDisable+0x40>
 8017592:	1cfa      	adds	r2, r7, #3
 8017594:	1cbb      	adds	r3, r7, #2
 8017596:	7812      	ldrb	r2, [r2, #0]
 8017598:	781b      	ldrb	r3, [r3, #0]
 801759a:	429a      	cmp	r2, r3
 801759c:	d301      	bcc.n	80175a2 <RegionCommonChanDisable+0x44>
    {
        return false;
 801759e:	2300      	movs	r3, #0
 80175a0:	e01b      	b.n	80175da <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80175a2:	200f      	movs	r0, #15
 80175a4:	183b      	adds	r3, r7, r0
 80175a6:	781b      	ldrb	r3, [r3, #0]
 80175a8:	005b      	lsls	r3, r3, #1
 80175aa:	687a      	ldr	r2, [r7, #4]
 80175ac:	18d3      	adds	r3, r2, r3
 80175ae:	881b      	ldrh	r3, [r3, #0]
 80175b0:	b21b      	sxth	r3, r3
 80175b2:	1cfa      	adds	r2, r7, #3
 80175b4:	7812      	ldrb	r2, [r2, #0]
 80175b6:	210f      	movs	r1, #15
 80175b8:	400a      	ands	r2, r1
 80175ba:	2101      	movs	r1, #1
 80175bc:	4091      	lsls	r1, r2
 80175be:	000a      	movs	r2, r1
 80175c0:	b212      	sxth	r2, r2
 80175c2:	43d2      	mvns	r2, r2
 80175c4:	b212      	sxth	r2, r2
 80175c6:	4013      	ands	r3, r2
 80175c8:	b219      	sxth	r1, r3
 80175ca:	183b      	adds	r3, r7, r0
 80175cc:	781b      	ldrb	r3, [r3, #0]
 80175ce:	005b      	lsls	r3, r3, #1
 80175d0:	687a      	ldr	r2, [r7, #4]
 80175d2:	18d3      	adds	r3, r2, r3
 80175d4:	b28a      	uxth	r2, r1
 80175d6:	801a      	strh	r2, [r3, #0]

    return true;
 80175d8:	2301      	movs	r3, #1
}
 80175da:	0018      	movs	r0, r3
 80175dc:	46bd      	mov	sp, r7
 80175de:	b004      	add	sp, #16
 80175e0:	bd80      	pop	{r7, pc}

080175e2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80175e2:	b590      	push	{r4, r7, lr}
 80175e4:	b085      	sub	sp, #20
 80175e6:	af00      	add	r7, sp, #0
 80175e8:	6078      	str	r0, [r7, #4]
 80175ea:	0008      	movs	r0, r1
 80175ec:	0011      	movs	r1, r2
 80175ee:	1cfb      	adds	r3, r7, #3
 80175f0:	1c02      	adds	r2, r0, #0
 80175f2:	701a      	strb	r2, [r3, #0]
 80175f4:	1cbb      	adds	r3, r7, #2
 80175f6:	1c0a      	adds	r2, r1, #0
 80175f8:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 80175fa:	230f      	movs	r3, #15
 80175fc:	18fb      	adds	r3, r7, r3
 80175fe:	2200      	movs	r2, #0
 8017600:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d101      	bne.n	801760c <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8017608:	2300      	movs	r3, #0
 801760a:	e027      	b.n	801765c <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801760c:	230e      	movs	r3, #14
 801760e:	18fb      	adds	r3, r7, r3
 8017610:	1cfa      	adds	r2, r7, #3
 8017612:	7812      	ldrb	r2, [r2, #0]
 8017614:	701a      	strb	r2, [r3, #0]
 8017616:	e017      	b.n	8017648 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017618:	240e      	movs	r4, #14
 801761a:	193b      	adds	r3, r7, r4
 801761c:	781b      	ldrb	r3, [r3, #0]
 801761e:	005b      	lsls	r3, r3, #1
 8017620:	687a      	ldr	r2, [r7, #4]
 8017622:	18d3      	adds	r3, r2, r3
 8017624:	881b      	ldrh	r3, [r3, #0]
 8017626:	2110      	movs	r1, #16
 8017628:	0018      	movs	r0, r3
 801762a:	f7ff fe6e 	bl	801730a <CountChannels>
 801762e:	0003      	movs	r3, r0
 8017630:	0019      	movs	r1, r3
 8017632:	220f      	movs	r2, #15
 8017634:	18bb      	adds	r3, r7, r2
 8017636:	18ba      	adds	r2, r7, r2
 8017638:	7812      	ldrb	r2, [r2, #0]
 801763a:	188a      	adds	r2, r1, r2
 801763c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801763e:	193b      	adds	r3, r7, r4
 8017640:	781a      	ldrb	r2, [r3, #0]
 8017642:	193b      	adds	r3, r7, r4
 8017644:	3201      	adds	r2, #1
 8017646:	701a      	strb	r2, [r3, #0]
 8017648:	230e      	movs	r3, #14
 801764a:	18fa      	adds	r2, r7, r3
 801764c:	1cbb      	adds	r3, r7, #2
 801764e:	7812      	ldrb	r2, [r2, #0]
 8017650:	781b      	ldrb	r3, [r3, #0]
 8017652:	429a      	cmp	r2, r3
 8017654:	d3e0      	bcc.n	8017618 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8017656:	230f      	movs	r3, #15
 8017658:	18fb      	adds	r3, r7, r3
 801765a:	781b      	ldrb	r3, [r3, #0]
}
 801765c:	0018      	movs	r0, r3
 801765e:	46bd      	mov	sp, r7
 8017660:	b005      	add	sp, #20
 8017662:	bd90      	pop	{r4, r7, pc}

08017664 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b086      	sub	sp, #24
 8017668:	af00      	add	r7, sp, #0
 801766a:	60f8      	str	r0, [r7, #12]
 801766c:	60b9      	str	r1, [r7, #8]
 801766e:	1dfb      	adds	r3, r7, #7
 8017670:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d020      	beq.n	80176ba <RegionCommonChanMaskCopy+0x56>
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d01d      	beq.n	80176ba <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 801767e:	2317      	movs	r3, #23
 8017680:	18fb      	adds	r3, r7, r3
 8017682:	2200      	movs	r2, #0
 8017684:	701a      	strb	r2, [r3, #0]
 8017686:	e011      	b.n	80176ac <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017688:	2017      	movs	r0, #23
 801768a:	183b      	adds	r3, r7, r0
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	005b      	lsls	r3, r3, #1
 8017690:	68ba      	ldr	r2, [r7, #8]
 8017692:	18d2      	adds	r2, r2, r3
 8017694:	183b      	adds	r3, r7, r0
 8017696:	781b      	ldrb	r3, [r3, #0]
 8017698:	005b      	lsls	r3, r3, #1
 801769a:	68f9      	ldr	r1, [r7, #12]
 801769c:	18cb      	adds	r3, r1, r3
 801769e:	8812      	ldrh	r2, [r2, #0]
 80176a0:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80176a2:	183b      	adds	r3, r7, r0
 80176a4:	781a      	ldrb	r2, [r3, #0]
 80176a6:	183b      	adds	r3, r7, r0
 80176a8:	3201      	adds	r2, #1
 80176aa:	701a      	strb	r2, [r3, #0]
 80176ac:	2317      	movs	r3, #23
 80176ae:	18fa      	adds	r2, r7, r3
 80176b0:	1dfb      	adds	r3, r7, #7
 80176b2:	7812      	ldrb	r2, [r2, #0]
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	429a      	cmp	r2, r3
 80176b8:	d3e6      	bcc.n	8017688 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 80176ba:	46c0      	nop			; (mov r8, r8)
 80176bc:	46bd      	mov	sp, r7
 80176be:	b006      	add	sp, #24
 80176c0:	bd80      	pop	{r7, pc}

080176c2 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80176c2:	b082      	sub	sp, #8
 80176c4:	b5b0      	push	{r4, r5, r7, lr}
 80176c6:	b086      	sub	sp, #24
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	60f8      	str	r0, [r7, #12]
 80176cc:	60b9      	str	r1, [r7, #8]
 80176ce:	0011      	movs	r1, r2
 80176d0:	2204      	movs	r2, #4
 80176d2:	2028      	movs	r0, #40	; 0x28
 80176d4:	4684      	mov	ip, r0
 80176d6:	44bc      	add	ip, r7
 80176d8:	4462      	add	r2, ip
 80176da:	6013      	str	r3, [r2, #0]
 80176dc:	1dfb      	adds	r3, r7, #7
 80176de:	1c0a      	adds	r2, r1, #0
 80176e0:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80176e2:	2516      	movs	r5, #22
 80176e4:	197c      	adds	r4, r7, r5
 80176e6:	2304      	movs	r3, #4
 80176e8:	2228      	movs	r2, #40	; 0x28
 80176ea:	4694      	mov	ip, r2
 80176ec:	44bc      	add	ip, r7
 80176ee:	4463      	add	r3, ip
 80176f0:	1dfa      	adds	r2, r7, #7
 80176f2:	7811      	ldrb	r1, [r2, #0]
 80176f4:	68f8      	ldr	r0, [r7, #12]
 80176f6:	681a      	ldr	r2, [r3, #0]
 80176f8:	685b      	ldr	r3, [r3, #4]
 80176fa:	f7ff fd15 	bl	8017128 <GetDutyCycle>
 80176fe:	0003      	movs	r3, r0
 8017700:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	689a      	ldr	r2, [r3, #8]
 8017706:	197b      	adds	r3, r7, r5
 8017708:	881b      	ldrh	r3, [r3, #0]
 801770a:	68b9      	ldr	r1, [r7, #8]
 801770c:	434b      	muls	r3, r1
 801770e:	429a      	cmp	r2, r3
 8017710:	d909      	bls.n	8017726 <RegionCommonSetBandTxDone+0x64>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	689a      	ldr	r2, [r3, #8]
 8017716:	197b      	adds	r3, r7, r5
 8017718:	881b      	ldrh	r3, [r3, #0]
 801771a:	68b9      	ldr	r1, [r7, #8]
 801771c:	434b      	muls	r3, r1
 801771e:	1ad2      	subs	r2, r2, r3
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017724:	e002      	b.n	801772c <RegionCommonSetBandTxDone+0x6a>
        band->TimeCredits = 0;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	2200      	movs	r2, #0
 801772a:	609a      	str	r2, [r3, #8]
}
 801772c:	46c0      	nop			; (mov r8, r8)
 801772e:	46bd      	mov	sp, r7
 8017730:	b006      	add	sp, #24
 8017732:	bcb0      	pop	{r4, r5, r7}
 8017734:	bc08      	pop	{r3}
 8017736:	b002      	add	sp, #8
 8017738:	4718      	bx	r3

0801773a <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801773a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801773c:	46c6      	mov	lr, r8
 801773e:	b500      	push	{lr}
 8017740:	b08c      	sub	sp, #48	; 0x30
 8017742:	af04      	add	r7, sp, #16
 8017744:	0004      	movs	r4, r0
 8017746:	6039      	str	r1, [r7, #0]
 8017748:	0010      	movs	r0, r2
 801774a:	0019      	movs	r1, r3
 801774c:	1dfb      	adds	r3, r7, #7
 801774e:	1c22      	adds	r2, r4, #0
 8017750:	701a      	strb	r2, [r3, #0]
 8017752:	1dbb      	adds	r3, r7, #6
 8017754:	1c02      	adds	r2, r0, #0
 8017756:	701a      	strb	r2, [r3, #0]
 8017758:	1d7b      	adds	r3, r7, #5
 801775a:	1c0a      	adds	r2, r1, #0
 801775c:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801775e:	2301      	movs	r3, #1
 8017760:	425b      	negs	r3, r3
 8017762:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017764:	f005 fc40 	bl	801cfe8 <UTIL_TIMER_GetCurrentTime>
 8017768:	0003      	movs	r3, r0
 801776a:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 801776c:	2300      	movs	r3, #0
 801776e:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 8017770:	230e      	movs	r3, #14
 8017772:	18fb      	adds	r3, r7, r3
 8017774:	2201      	movs	r2, #1
 8017776:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 8017778:	231b      	movs	r3, #27
 801777a:	18fb      	adds	r3, r7, r3
 801777c:	2200      	movs	r2, #0
 801777e:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 8017780:	231a      	movs	r3, #26
 8017782:	18fb      	adds	r3, r7, r3
 8017784:	2200      	movs	r2, #0
 8017786:	701a      	strb	r2, [r3, #0]
 8017788:	e089      	b.n	801789e <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801778a:	231a      	movs	r3, #26
 801778c:	18fb      	adds	r3, r7, r3
 801778e:	781a      	ldrb	r2, [r3, #0]
 8017790:	0013      	movs	r3, r2
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	189b      	adds	r3, r3, r2
 8017796:	009b      	lsls	r3, r3, #2
 8017798:	001a      	movs	r2, r3
 801779a:	683b      	ldr	r3, [r7, #0]
 801779c:	469c      	mov	ip, r3
 801779e:	4494      	add	ip, r2
 80177a0:	220e      	movs	r2, #14
 80177a2:	18bc      	adds	r4, r7, r2
 80177a4:	2138      	movs	r1, #56	; 0x38
 80177a6:	000a      	movs	r2, r1
 80177a8:	187b      	adds	r3, r7, r1
 80177aa:	781e      	ldrb	r6, [r3, #0]
 80177ac:	1d7b      	adds	r3, r7, #5
 80177ae:	781d      	ldrb	r5, [r3, #0]
 80177b0:	1dfb      	adds	r3, r7, #7
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	4698      	mov	r8, r3
 80177b6:	697b      	ldr	r3, [r7, #20]
 80177b8:	9302      	str	r3, [sp, #8]
 80177ba:	2304      	movs	r3, #4
 80177bc:	18ba      	adds	r2, r7, r2
 80177be:	18d2      	adds	r2, r2, r3
 80177c0:	466b      	mov	r3, sp
 80177c2:	ca03      	ldmia	r2!, {r0, r1}
 80177c4:	c303      	stmia	r3!, {r0, r1}
 80177c6:	0033      	movs	r3, r6
 80177c8:	002a      	movs	r2, r5
 80177ca:	4641      	mov	r1, r8
 80177cc:	4660      	mov	r0, ip
 80177ce:	f7ff fd3b 	bl	8017248 <UpdateTimeCredits>
 80177d2:	0003      	movs	r3, r0
 80177d4:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80177d6:	220e      	movs	r2, #14
 80177d8:	18bb      	adds	r3, r7, r2
 80177da:	881a      	ldrh	r2, [r3, #0]
 80177dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80177de:	4353      	muls	r3, r2
 80177e0:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80177e2:	231a      	movs	r3, #26
 80177e4:	18fb      	adds	r3, r7, r3
 80177e6:	781a      	ldrb	r2, [r3, #0]
 80177e8:	0013      	movs	r3, r2
 80177ea:	009b      	lsls	r3, r3, #2
 80177ec:	189b      	adds	r3, r3, r2
 80177ee:	009b      	lsls	r3, r3, #2
 80177f0:	001a      	movs	r2, r3
 80177f2:	683b      	ldr	r3, [r7, #0]
 80177f4:	189b      	adds	r3, r3, r2
 80177f6:	689b      	ldr	r3, [r3, #8]
 80177f8:	693a      	ldr	r2, [r7, #16]
 80177fa:	429a      	cmp	r2, r3
 80177fc:	d306      	bcc.n	801780c <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 80177fe:	1d7b      	adds	r3, r7, #5
 8017800:	781b      	ldrb	r3, [r3, #0]
 8017802:	2201      	movs	r2, #1
 8017804:	4053      	eors	r3, r2
 8017806:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017808:	2b00      	cmp	r3, #0
 801780a:	d012      	beq.n	8017832 <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 801780c:	231a      	movs	r3, #26
 801780e:	18fb      	adds	r3, r7, r3
 8017810:	781a      	ldrb	r2, [r3, #0]
 8017812:	0013      	movs	r3, r2
 8017814:	009b      	lsls	r3, r3, #2
 8017816:	189b      	adds	r3, r3, r2
 8017818:	009b      	lsls	r3, r3, #2
 801781a:	001a      	movs	r2, r3
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	189b      	adds	r3, r3, r2
 8017820:	2201      	movs	r2, #1
 8017822:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017824:	211b      	movs	r1, #27
 8017826:	187b      	adds	r3, r7, r1
 8017828:	781a      	ldrb	r2, [r3, #0]
 801782a:	187b      	adds	r3, r7, r1
 801782c:	3201      	adds	r2, #1
 801782e:	701a      	strb	r2, [r3, #0]
 8017830:	e02f      	b.n	8017892 <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017832:	211a      	movs	r1, #26
 8017834:	187b      	adds	r3, r7, r1
 8017836:	781a      	ldrb	r2, [r3, #0]
 8017838:	0013      	movs	r3, r2
 801783a:	009b      	lsls	r3, r3, #2
 801783c:	189b      	adds	r3, r3, r2
 801783e:	009b      	lsls	r3, r3, #2
 8017840:	001a      	movs	r2, r3
 8017842:	683b      	ldr	r3, [r7, #0]
 8017844:	189b      	adds	r3, r3, r2
 8017846:	2200      	movs	r2, #0
 8017848:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 801784a:	187b      	adds	r3, r7, r1
 801784c:	781a      	ldrb	r2, [r3, #0]
 801784e:	0013      	movs	r3, r2
 8017850:	009b      	lsls	r3, r3, #2
 8017852:	189b      	adds	r3, r3, r2
 8017854:	009b      	lsls	r3, r3, #2
 8017856:	001a      	movs	r2, r3
 8017858:	683b      	ldr	r3, [r7, #0]
 801785a:	189b      	adds	r3, r3, r2
 801785c:	68db      	ldr	r3, [r3, #12]
 801785e:	693a      	ldr	r2, [r7, #16]
 8017860:	429a      	cmp	r2, r3
 8017862:	d216      	bcs.n	8017892 <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017864:	187b      	adds	r3, r7, r1
 8017866:	781a      	ldrb	r2, [r3, #0]
 8017868:	0013      	movs	r3, r2
 801786a:	009b      	lsls	r3, r3, #2
 801786c:	189b      	adds	r3, r3, r2
 801786e:	009b      	lsls	r3, r3, #2
 8017870:	001a      	movs	r2, r3
 8017872:	683b      	ldr	r3, [r7, #0]
 8017874:	189b      	adds	r3, r3, r2
 8017876:	689b      	ldr	r3, [r3, #8]
 8017878:	693a      	ldr	r2, [r7, #16]
 801787a:	1ad2      	subs	r2, r2, r3
 801787c:	69fb      	ldr	r3, [r7, #28]
 801787e:	4293      	cmp	r3, r2
 8017880:	d900      	bls.n	8017884 <RegionCommonUpdateBandTimeOff+0x14a>
 8017882:	0013      	movs	r3, r2
 8017884:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017886:	211b      	movs	r1, #27
 8017888:	187b      	adds	r3, r7, r1
 801788a:	781a      	ldrb	r2, [r3, #0]
 801788c:	187b      	adds	r3, r7, r1
 801788e:	3201      	adds	r2, #1
 8017890:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 8017892:	211a      	movs	r1, #26
 8017894:	187b      	adds	r3, r7, r1
 8017896:	781a      	ldrb	r2, [r3, #0]
 8017898:	187b      	adds	r3, r7, r1
 801789a:	3201      	adds	r2, #1
 801789c:	701a      	strb	r2, [r3, #0]
 801789e:	231a      	movs	r3, #26
 80178a0:	18fa      	adds	r2, r7, r3
 80178a2:	1dbb      	adds	r3, r7, #6
 80178a4:	7812      	ldrb	r2, [r2, #0]
 80178a6:	781b      	ldrb	r3, [r3, #0]
 80178a8:	429a      	cmp	r2, r3
 80178aa:	d200      	bcs.n	80178ae <RegionCommonUpdateBandTimeOff+0x174>
 80178ac:	e76d      	b.n	801778a <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 80178ae:	231b      	movs	r3, #27
 80178b0:	18fb      	adds	r3, r7, r3
 80178b2:	781b      	ldrb	r3, [r3, #0]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d102      	bne.n	80178be <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80178b8:	2301      	movs	r3, #1
 80178ba:	425b      	negs	r3, r3
 80178bc:	e000      	b.n	80178c0 <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 80178be:	69fb      	ldr	r3, [r7, #28]
}
 80178c0:	0018      	movs	r0, r3
 80178c2:	46bd      	mov	sp, r7
 80178c4:	b008      	add	sp, #32
 80178c6:	bc80      	pop	{r7}
 80178c8:	46b8      	mov	r8, r7
 80178ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080178cc <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b084      	sub	sp, #16
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
 80178d4:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80178d6:	210f      	movs	r1, #15
 80178d8:	187b      	adds	r3, r7, r1
 80178da:	2200      	movs	r2, #0
 80178dc:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	781b      	ldrb	r3, [r3, #0]
 80178e2:	2b03      	cmp	r3, #3
 80178e4:	d140      	bne.n	8017968 <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	3301      	adds	r3, #1
 80178ea:	781b      	ldrb	r3, [r3, #0]
 80178ec:	b25a      	sxtb	r2, r3
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80178f2:	683b      	ldr	r3, [r7, #0]
 80178f4:	785b      	ldrb	r3, [r3, #1]
 80178f6:	b25b      	sxtb	r3, r3
 80178f8:	220f      	movs	r2, #15
 80178fa:	4013      	ands	r3, r2
 80178fc:	b25a      	sxtb	r2, r3
 80178fe:	683b      	ldr	r3, [r7, #0]
 8017900:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017902:	683b      	ldr	r3, [r7, #0]
 8017904:	785b      	ldrb	r3, [r3, #1]
 8017906:	b25b      	sxtb	r3, r3
 8017908:	b2db      	uxtb	r3, r3
 801790a:	091b      	lsrs	r3, r3, #4
 801790c:	b2db      	uxtb	r3, r3
 801790e:	b25a      	sxtb	r2, r3
 8017910:	683b      	ldr	r3, [r7, #0]
 8017912:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	3302      	adds	r3, #2
 8017918:	781b      	ldrb	r3, [r3, #0]
 801791a:	b29a      	uxth	r2, r3
 801791c:	683b      	ldr	r3, [r7, #0]
 801791e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	889b      	ldrh	r3, [r3, #4]
 8017924:	b21a      	sxth	r2, r3
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	3303      	adds	r3, #3
 801792a:	781b      	ldrb	r3, [r3, #0]
 801792c:	021b      	lsls	r3, r3, #8
 801792e:	b21b      	sxth	r3, r3
 8017930:	4313      	orrs	r3, r2
 8017932:	b21b      	sxth	r3, r3
 8017934:	b29a      	uxth	r2, r3
 8017936:	683b      	ldr	r3, [r7, #0]
 8017938:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	791a      	ldrb	r2, [r3, #4]
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017942:	683b      	ldr	r3, [r7, #0]
 8017944:	781b      	ldrb	r3, [r3, #0]
 8017946:	091b      	lsrs	r3, r3, #4
 8017948:	b2db      	uxtb	r3, r3
 801794a:	2207      	movs	r2, #7
 801794c:	4013      	ands	r3, r2
 801794e:	b2da      	uxtb	r2, r3
 8017950:	683b      	ldr	r3, [r7, #0]
 8017952:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017954:	683b      	ldr	r3, [r7, #0]
 8017956:	781b      	ldrb	r3, [r3, #0]
 8017958:	220f      	movs	r2, #15
 801795a:	4013      	ands	r3, r2
 801795c:	b2da      	uxtb	r2, r3
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017962:	187b      	adds	r3, r7, r1
 8017964:	2205      	movs	r2, #5
 8017966:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8017968:	230f      	movs	r3, #15
 801796a:	18fb      	adds	r3, r7, r3
 801796c:	781b      	ldrb	r3, [r3, #0]
}
 801796e:	0018      	movs	r0, r3
 8017970:	46bd      	mov	sp, r7
 8017972:	b004      	add	sp, #16
 8017974:	bd80      	pop	{r7, pc}

08017976 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017978:	b089      	sub	sp, #36	; 0x24
 801797a:	af02      	add	r7, sp, #8
 801797c:	60f8      	str	r0, [r7, #12]
 801797e:	60b9      	str	r1, [r7, #8]
 8017980:	607a      	str	r2, [r7, #4]
 8017982:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017984:	2317      	movs	r3, #23
 8017986:	18fb      	adds	r3, r7, r3
 8017988:	68fa      	ldr	r2, [r7, #12]
 801798a:	7912      	ldrb	r2, [r2, #4]
 801798c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 801798e:	2116      	movs	r1, #22
 8017990:	187b      	adds	r3, r7, r1
 8017992:	68fa      	ldr	r2, [r7, #12]
 8017994:	7992      	ldrb	r2, [r2, #6]
 8017996:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8017998:	2015      	movs	r0, #21
 801799a:	183b      	adds	r3, r7, r0
 801799c:	68fa      	ldr	r2, [r7, #12]
 801799e:	79d2      	ldrb	r2, [r2, #7]
 80179a0:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	7a1a      	ldrb	r2, [r3, #8]
 80179a6:	2414      	movs	r4, #20
 80179a8:	193b      	adds	r3, r7, r4
 80179aa:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	795b      	ldrb	r3, [r3, #5]
 80179b0:	2201      	movs	r2, #1
 80179b2:	4053      	eors	r3, r2
 80179b4:	b2db      	uxtb	r3, r3
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d00b      	beq.n	80179d2 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80179ba:	193b      	adds	r3, r7, r4
 80179bc:	68fa      	ldr	r2, [r7, #12]
 80179be:	7ad2      	ldrb	r2, [r2, #11]
 80179c0:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 80179c2:	187b      	adds	r3, r7, r1
 80179c4:	68fa      	ldr	r2, [r7, #12]
 80179c6:	7a52      	ldrb	r2, [r2, #9]
 80179c8:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 80179ca:	183b      	adds	r3, r7, r0
 80179cc:	68fa      	ldr	r2, [r7, #12]
 80179ce:	7a92      	ldrb	r2, [r2, #10]
 80179d0:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 80179d2:	2617      	movs	r6, #23
 80179d4:	19bb      	adds	r3, r7, r6
 80179d6:	781b      	ldrb	r3, [r3, #0]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d046      	beq.n	8017a6a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	7b18      	ldrb	r0, [r3, #12]
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	691c      	ldr	r4, [r3, #16]
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	2514      	movs	r5, #20
 80179e8:	575d      	ldrsb	r5, [r3, r5]
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	2215      	movs	r2, #21
 80179ee:	569a      	ldrsb	r2, [r3, r2]
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	699b      	ldr	r3, [r3, #24]
 80179f4:	2116      	movs	r1, #22
 80179f6:	1879      	adds	r1, r7, r1
 80179f8:	7809      	ldrb	r1, [r1, #0]
 80179fa:	b249      	sxtb	r1, r1
 80179fc:	9301      	str	r3, [sp, #4]
 80179fe:	9200      	str	r2, [sp, #0]
 8017a00:	002b      	movs	r3, r5
 8017a02:	000a      	movs	r2, r1
 8017a04:	0021      	movs	r1, r4
 8017a06:	f7ff fceb 	bl	80173e0 <RegionCommonChanVerifyDr>
 8017a0a:	0003      	movs	r3, r0
 8017a0c:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017a0e:	2301      	movs	r3, #1
 8017a10:	4053      	eors	r3, r2
 8017a12:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d005      	beq.n	8017a24 <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 8017a18:	19bb      	adds	r3, r7, r6
 8017a1a:	19ba      	adds	r2, r7, r6
 8017a1c:	7812      	ldrb	r2, [r2, #0]
 8017a1e:	2102      	movs	r1, #2
 8017a20:	438a      	bics	r2, r1
 8017a22:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	211d      	movs	r1, #29
 8017a28:	5659      	ldrsb	r1, [r3, r1]
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	221c      	movs	r2, #28
 8017a2e:	569a      	ldrsb	r2, [r3, r2]
 8017a30:	2415      	movs	r4, #21
 8017a32:	193b      	adds	r3, r7, r4
 8017a34:	781b      	ldrb	r3, [r3, #0]
 8017a36:	b25b      	sxtb	r3, r3
 8017a38:	0018      	movs	r0, r3
 8017a3a:	f7ff fd6a 	bl	8017512 <RegionCommonValueInRange>
 8017a3e:	1e03      	subs	r3, r0, #0
 8017a40:	d113      	bne.n	8017a6a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
//        	verifyParams->MaxTxPower = 20;
            // Verify if the maximum TX power is exceeded Проверьте, не превышена ли максимальная мощность TX
            if( verifyParams->MaxTxPower > txPower )
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	7f5b      	ldrb	r3, [r3, #29]
 8017a46:	b25b      	sxtb	r3, r3
 8017a48:	193a      	adds	r2, r7, r4
 8017a4a:	7812      	ldrb	r2, [r2, #0]
 8017a4c:	b252      	sxtb	r2, r2
 8017a4e:	429a      	cmp	r2, r3
 8017a50:	da04      	bge.n	8017a5c <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017a52:	193b      	adds	r3, r7, r4
 8017a54:	68fa      	ldr	r2, [r7, #12]
 8017a56:	7f52      	ldrb	r2, [r2, #29]
 8017a58:	701a      	strb	r2, [r3, #0]
 8017a5a:	e006      	b.n	8017a6a <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017a5c:	2217      	movs	r2, #23
 8017a5e:	18bb      	adds	r3, r7, r2
 8017a60:	18ba      	adds	r2, r7, r2
 8017a62:	7812      	ldrb	r2, [r2, #0]
 8017a64:	2104      	movs	r1, #4
 8017a66:	438a      	bics	r2, r1
 8017a68:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017a6a:	2317      	movs	r3, #23
 8017a6c:	18fb      	adds	r3, r7, r3
 8017a6e:	781b      	ldrb	r3, [r3, #0]
 8017a70:	2b07      	cmp	r3, #7
 8017a72:	d108      	bne.n	8017a86 <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 8017a74:	2214      	movs	r2, #20
 8017a76:	18bb      	adds	r3, r7, r2
 8017a78:	781b      	ldrb	r3, [r3, #0]
 8017a7a:	b25b      	sxtb	r3, r3
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d102      	bne.n	8017a86 <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8017a80:	18bb      	adds	r3, r7, r2
 8017a82:	2201      	movs	r2, #1
 8017a84:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8017a86:	68bb      	ldr	r3, [r7, #8]
 8017a88:	2216      	movs	r2, #22
 8017a8a:	18ba      	adds	r2, r7, r2
 8017a8c:	7812      	ldrb	r2, [r2, #0]
 8017a8e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	2215      	movs	r2, #21
 8017a94:	18ba      	adds	r2, r7, r2
 8017a96:	7812      	ldrb	r2, [r2, #0]
 8017a98:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017a9a:	2314      	movs	r3, #20
 8017a9c:	18fb      	adds	r3, r7, r3
 8017a9e:	781a      	ldrb	r2, [r3, #0]
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	701a      	strb	r2, [r3, #0]

    return status;
 8017aa4:	2317      	movs	r3, #23
 8017aa6:	18fb      	adds	r3, r7, r3
 8017aa8:	781b      	ldrb	r3, [r3, #0]
}
 8017aaa:	0018      	movs	r0, r3
 8017aac:	46bd      	mov	sp, r7
 8017aae:	b007      	add	sp, #28
 8017ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017ab4 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b082      	sub	sp, #8
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	0002      	movs	r2, r0
 8017abc:	6039      	str	r1, [r7, #0]
 8017abe:	1dfb      	adds	r3, r7, #7
 8017ac0:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 8017ac2:	6839      	ldr	r1, [r7, #0]
 8017ac4:	4806      	ldr	r0, [pc, #24]	; (8017ae0 <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 8017ac6:	f7e8 fb31 	bl	800012c <__udivsi3>
 8017aca:	0003      	movs	r3, r0
 8017acc:	001a      	movs	r2, r3
 8017ace:	1dfb      	adds	r3, r7, #7
 8017ad0:	781b      	ldrb	r3, [r3, #0]
 8017ad2:	409a      	lsls	r2, r3
 8017ad4:	0013      	movs	r3, r2
}
 8017ad6:	0018      	movs	r0, r3
 8017ad8:	46bd      	mov	sp, r7
 8017ada:	b002      	add	sp, #8
 8017adc:	bd80      	pop	{r7, pc}
 8017ade:	46c0      	nop			; (mov r8, r8)
 8017ae0:	3b9aca00 	.word	0x3b9aca00

08017ae4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b082      	sub	sp, #8
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	0002      	movs	r2, r0
 8017aec:	1dfb      	adds	r3, r7, #7
 8017aee:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 8017af0:	4b02      	ldr	r3, [pc, #8]	; (8017afc <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 8017af2:	0018      	movs	r0, r3
 8017af4:	46bd      	mov	sp, r7
 8017af6:	b002      	add	sp, #8
 8017af8:	bd80      	pop	{r7, pc}
 8017afa:	46c0      	nop			; (mov r8, r8)
 8017afc:	00027100 	.word	0x00027100

08017b00 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8017b00:	b5b0      	push	{r4, r5, r7, lr}
 8017b02:	b084      	sub	sp, #16
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	60f8      	str	r0, [r7, #12]
 8017b08:	607a      	str	r2, [r7, #4]
 8017b0a:	603b      	str	r3, [r7, #0]
 8017b0c:	200b      	movs	r0, #11
 8017b0e:	183b      	adds	r3, r7, r0
 8017b10:	1c0a      	adds	r2, r1, #0
 8017b12:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 8017b14:	0002      	movs	r2, r0
 8017b16:	18bb      	adds	r3, r7, r2
 8017b18:	781d      	ldrb	r5, [r3, #0]
 8017b1a:	18bb      	adds	r3, r7, r2
 8017b1c:	781b      	ldrb	r3, [r3, #0]
 8017b1e:	4a1c      	ldr	r2, [pc, #112]	; (8017b90 <RegionCommonComputeRxWindowParameters+0x90>)
 8017b20:	4694      	mov	ip, r2
 8017b22:	4463      	add	r3, ip
 8017b24:	005c      	lsls	r4, r3, #1
 8017b26:	6879      	ldr	r1, [r7, #4]
 8017b28:	000a      	movs	r2, r1
 8017b2a:	0152      	lsls	r2, r2, #5
 8017b2c:	1a52      	subs	r2, r2, r1
 8017b2e:	0193      	lsls	r3, r2, #6
 8017b30:	1a9b      	subs	r3, r3, r2
 8017b32:	00db      	lsls	r3, r3, #3
 8017b34:	185b      	adds	r3, r3, r1
 8017b36:	01db      	lsls	r3, r3, #7
 8017b38:	001a      	movs	r2, r3
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	18d3      	adds	r3, r2, r3
 8017b3e:	3b01      	subs	r3, #1
 8017b40:	68f9      	ldr	r1, [r7, #12]
 8017b42:	0018      	movs	r0, r3
 8017b44:	f7e8 faf2 	bl	800012c <__udivsi3>
 8017b48:	0003      	movs	r3, r0
 8017b4a:	18e2      	adds	r2, r4, r3
 8017b4c:	002b      	movs	r3, r5
 8017b4e:	4293      	cmp	r3, r2
 8017b50:	d200      	bcs.n	8017b54 <RegionCommonComputeRxWindowParameters+0x54>
 8017b52:	0013      	movs	r3, r2
 8017b54:	6a3a      	ldr	r2, [r7, #32]
 8017b56:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	009a      	lsls	r2, r3, #2
 8017b5c:	6a3b      	ldr	r3, [r7, #32]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	68f9      	ldr	r1, [r7, #12]
 8017b62:	434b      	muls	r3, r1
 8017b64:	085b      	lsrs	r3, r3, #1
 8017b66:	1ad3      	subs	r3, r2, r3
 8017b68:	4a0a      	ldr	r2, [pc, #40]	; (8017b94 <RegionCommonComputeRxWindowParameters+0x94>)
 8017b6a:	4694      	mov	ip, r2
 8017b6c:	4463      	add	r3, ip
 8017b6e:	490a      	ldr	r1, [pc, #40]	; (8017b98 <RegionCommonComputeRxWindowParameters+0x98>)
 8017b70:	0018      	movs	r0, r3
 8017b72:	f7e8 fb65 	bl	8000240 <__divsi3>
 8017b76:	0003      	movs	r3, r0
 8017b78:	001a      	movs	r2, r3
 8017b7a:	683b      	ldr	r3, [r7, #0]
 8017b7c:	1ad3      	subs	r3, r2, r3
 8017b7e:	3b01      	subs	r3, #1
 8017b80:	001a      	movs	r2, r3
 8017b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b84:	601a      	str	r2, [r3, #0]
}
 8017b86:	46c0      	nop			; (mov r8, r8)
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	b004      	add	sp, #16
 8017b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8017b8e:	46c0      	nop			; (mov r8, r8)
 8017b90:	7ffffffc 	.word	0x7ffffffc
 8017b94:	000f423f 	.word	0x000f423f
 8017b98:	000f4240 	.word	0x000f4240

08017b9c <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017b9c:	b5b0      	push	{r4, r5, r7, lr}
 8017b9e:	b086      	sub	sp, #24
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	60b9      	str	r1, [r7, #8]
 8017ba4:	607a      	str	r2, [r7, #4]
 8017ba6:	210f      	movs	r1, #15
 8017ba8:	187b      	adds	r3, r7, r1
 8017baa:	1c02      	adds	r2, r0, #0
 8017bac:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 14;
 8017bae:	2417      	movs	r4, #23
 8017bb0:	193b      	adds	r3, r7, r4
 8017bb2:	220e      	movs	r2, #14
 8017bb4:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017bb6:	187b      	adds	r3, r7, r1
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	b25b      	sxtb	r3, r3
 8017bbc:	005b      	lsls	r3, r3, #1
 8017bbe:	0018      	movs	r0, r3
 8017bc0:	f7e9 fa26 	bl	8001010 <__aeabi_ui2f>
 8017bc4:	1c03      	adds	r3, r0, #0
 8017bc6:	1c19      	adds	r1, r3, #0
 8017bc8:	68b8      	ldr	r0, [r7, #8]
 8017bca:	f7e8 fff3 	bl	8000bb4 <__aeabi_fsub>
 8017bce:	1c03      	adds	r3, r0, #0
 8017bd0:	6879      	ldr	r1, [r7, #4]
 8017bd2:	1c18      	adds	r0, r3, #0
 8017bd4:	f7e8 ffee 	bl	8000bb4 <__aeabi_fsub>
 8017bd8:	1c03      	adds	r3, r0, #0
 8017bda:	1c18      	adds	r0, r3, #0
 8017bdc:	f7eb f84e 	bl	8002c7c <__aeabi_f2d>
 8017be0:	0002      	movs	r2, r0
 8017be2:	000b      	movs	r3, r1
 8017be4:	0010      	movs	r0, r2
 8017be6:	0019      	movs	r1, r3
 8017be8:	f006 fe98 	bl	801e91c <floor>
 8017bec:	0002      	movs	r2, r0
 8017bee:	000b      	movs	r3, r1
 8017bf0:	0025      	movs	r5, r4
 8017bf2:	193c      	adds	r4, r7, r4
 8017bf4:	0010      	movs	r0, r2
 8017bf6:	0019      	movs	r1, r3
 8017bf8:	f7ea ffb4 	bl	8002b64 <__aeabi_d2iz>
 8017bfc:	0003      	movs	r3, r0
 8017bfe:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8017c00:	197b      	adds	r3, r7, r5
 8017c02:	781b      	ldrb	r3, [r3, #0]
 8017c04:	b25b      	sxtb	r3, r3
}
 8017c06:	0018      	movs	r0, r3
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	b006      	add	sp, #24
 8017c0c:	bdb0      	pop	{r4, r5, r7, pc}

08017c0e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c10:	b087      	sub	sp, #28
 8017c12:	af00      	add	r7, sp, #0
 8017c14:	60f8      	str	r0, [r7, #12]
 8017c16:	60b9      	str	r1, [r7, #8]
 8017c18:	607a      	str	r2, [r7, #4]
 8017c1a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017c1c:	2317      	movs	r3, #23
 8017c1e:	18fb      	adds	r3, r7, r3
 8017c20:	2200      	movs	r2, #0
 8017c22:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 8017c24:	2316      	movs	r3, #22
 8017c26:	18fb      	adds	r3, r7, r3
 8017c28:	2200      	movs	r2, #0
 8017c2a:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017c2c:	2315      	movs	r3, #21
 8017c2e:	18fb      	adds	r3, r7, r3
 8017c30:	2200      	movs	r2, #0
 8017c32:	701a      	strb	r2, [r3, #0]
 8017c34:	2314      	movs	r3, #20
 8017c36:	18fb      	adds	r3, r7, r3
 8017c38:	2200      	movs	r2, #0
 8017c3a:	701a      	strb	r2, [r3, #0]
 8017c3c:	e0bf      	b.n	8017dbe <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017c3e:	2313      	movs	r3, #19
 8017c40:	18fb      	adds	r3, r7, r3
 8017c42:	2200      	movs	r2, #0
 8017c44:	701a      	strb	r2, [r3, #0]
 8017c46:	e0a8      	b.n	8017d9a <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	685a      	ldr	r2, [r3, #4]
 8017c4c:	2314      	movs	r3, #20
 8017c4e:	18fb      	adds	r3, r7, r3
 8017c50:	781b      	ldrb	r3, [r3, #0]
 8017c52:	005b      	lsls	r3, r3, #1
 8017c54:	18d3      	adds	r3, r2, r3
 8017c56:	881b      	ldrh	r3, [r3, #0]
 8017c58:	001a      	movs	r2, r3
 8017c5a:	2013      	movs	r0, #19
 8017c5c:	183b      	adds	r3, r7, r0
 8017c5e:	781b      	ldrb	r3, [r3, #0]
 8017c60:	411a      	asrs	r2, r3
 8017c62:	0013      	movs	r3, r2
 8017c64:	2201      	movs	r2, #1
 8017c66:	4013      	ands	r3, r2
 8017c68:	d100      	bne.n	8017c6c <RegionCommonCountNbOfEnabledChannels+0x5e>
 8017c6a:	e090      	b.n	8017d8e <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	689a      	ldr	r2, [r3, #8]
 8017c70:	2315      	movs	r3, #21
 8017c72:	18fb      	adds	r3, r7, r3
 8017c74:	7819      	ldrb	r1, [r3, #0]
 8017c76:	183b      	adds	r3, r7, r0
 8017c78:	781b      	ldrb	r3, [r3, #0]
 8017c7a:	18cb      	adds	r3, r1, r3
 8017c7c:	0019      	movs	r1, r3
 8017c7e:	000b      	movs	r3, r1
 8017c80:	005b      	lsls	r3, r3, #1
 8017c82:	185b      	adds	r3, r3, r1
 8017c84:	009b      	lsls	r3, r3, #2
 8017c86:	18d3      	adds	r3, r2, r3
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d100      	bne.n	8017c90 <RegionCommonCountNbOfEnabledChannels+0x82>
 8017c8e:	e079      	b.n	8017d84 <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	781b      	ldrb	r3, [r3, #0]
 8017c94:	2201      	movs	r2, #1
 8017c96:	4053      	eors	r3, r2
 8017c98:	b2db      	uxtb	r3, r3
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d00d      	beq.n	8017cba <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d009      	beq.n	8017cba <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	8a5b      	ldrh	r3, [r3, #18]
 8017caa:	001a      	movs	r2, r3
 8017cac:	183b      	adds	r3, r7, r0
 8017cae:	781b      	ldrb	r3, [r3, #0]
 8017cb0:	411a      	asrs	r2, r3
 8017cb2:	0013      	movs	r3, r2
 8017cb4:	2201      	movs	r2, #1
 8017cb6:	4013      	ands	r3, r2
 8017cb8:	d066      	beq.n	8017d88 <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	785b      	ldrb	r3, [r3, #1]
 8017cbe:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	689a      	ldr	r2, [r3, #8]
 8017cc4:	2515      	movs	r5, #21
 8017cc6:	197b      	adds	r3, r7, r5
 8017cc8:	7819      	ldrb	r1, [r3, #0]
 8017cca:	2613      	movs	r6, #19
 8017ccc:	19bb      	adds	r3, r7, r6
 8017cce:	781b      	ldrb	r3, [r3, #0]
 8017cd0:	18cb      	adds	r3, r1, r3
 8017cd2:	0019      	movs	r1, r3
 8017cd4:	000b      	movs	r3, r1
 8017cd6:	005b      	lsls	r3, r3, #1
 8017cd8:	185b      	adds	r3, r3, r1
 8017cda:	009b      	lsls	r3, r3, #2
 8017cdc:	18d3      	adds	r3, r2, r3
 8017cde:	7a1b      	ldrb	r3, [r3, #8]
 8017ce0:	011b      	lsls	r3, r3, #4
 8017ce2:	b25b      	sxtb	r3, r3
 8017ce4:	111b      	asrs	r3, r3, #4
 8017ce6:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017ce8:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	689a      	ldr	r2, [r3, #8]
 8017cee:	197b      	adds	r3, r7, r5
 8017cf0:	7819      	ldrb	r1, [r3, #0]
 8017cf2:	19bb      	adds	r3, r7, r6
 8017cf4:	781b      	ldrb	r3, [r3, #0]
 8017cf6:	18cb      	adds	r3, r1, r3
 8017cf8:	0019      	movs	r1, r3
 8017cfa:	000b      	movs	r3, r1
 8017cfc:	005b      	lsls	r3, r3, #1
 8017cfe:	185b      	adds	r3, r3, r1
 8017d00:	009b      	lsls	r3, r3, #2
 8017d02:	18d3      	adds	r3, r2, r3
 8017d04:	7a1b      	ldrb	r3, [r3, #8]
 8017d06:	b25b      	sxtb	r3, r3
 8017d08:	111b      	asrs	r3, r3, #4
 8017d0a:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017d0c:	001a      	movs	r2, r3
 8017d0e:	0021      	movs	r1, r4
 8017d10:	f7ff fbff 	bl	8017512 <RegionCommonValueInRange>
 8017d14:	1e03      	subs	r3, r0, #0
 8017d16:	d039      	beq.n	8017d8c <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	68da      	ldr	r2, [r3, #12]
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	6899      	ldr	r1, [r3, #8]
 8017d20:	197b      	adds	r3, r7, r5
 8017d22:	7818      	ldrb	r0, [r3, #0]
 8017d24:	19bb      	adds	r3, r7, r6
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	18c3      	adds	r3, r0, r3
 8017d2a:	0018      	movs	r0, r3
 8017d2c:	0003      	movs	r3, r0
 8017d2e:	005b      	lsls	r3, r3, #1
 8017d30:	181b      	adds	r3, r3, r0
 8017d32:	009b      	lsls	r3, r3, #2
 8017d34:	18cb      	adds	r3, r1, r3
 8017d36:	7a5b      	ldrb	r3, [r3, #9]
 8017d38:	0019      	movs	r1, r3
 8017d3a:	000b      	movs	r3, r1
 8017d3c:	009b      	lsls	r3, r3, #2
 8017d3e:	185b      	adds	r3, r3, r1
 8017d40:	009b      	lsls	r3, r3, #2
 8017d42:	18d3      	adds	r3, r2, r3
 8017d44:	7c1b      	ldrb	r3, [r3, #16]
 8017d46:	2201      	movs	r2, #1
 8017d48:	4053      	eors	r3, r2
 8017d4a:	b2db      	uxtb	r3, r3
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d006      	beq.n	8017d5e <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017d50:	2116      	movs	r1, #22
 8017d52:	187b      	adds	r3, r7, r1
 8017d54:	781a      	ldrb	r2, [r3, #0]
 8017d56:	187b      	adds	r3, r7, r1
 8017d58:	3201      	adds	r2, #1
 8017d5a:	701a      	strb	r2, [r3, #0]
                    continue;
 8017d5c:	e017      	b.n	8017d8e <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017d5e:	2217      	movs	r2, #23
 8017d60:	18bb      	adds	r3, r7, r2
 8017d62:	781b      	ldrb	r3, [r3, #0]
 8017d64:	18ba      	adds	r2, r7, r2
 8017d66:	1c59      	adds	r1, r3, #1
 8017d68:	7011      	strb	r1, [r2, #0]
 8017d6a:	001a      	movs	r2, r3
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	189b      	adds	r3, r3, r2
 8017d70:	2215      	movs	r2, #21
 8017d72:	18b9      	adds	r1, r7, r2
 8017d74:	2213      	movs	r2, #19
 8017d76:	18ba      	adds	r2, r7, r2
 8017d78:	7809      	ldrb	r1, [r1, #0]
 8017d7a:	7812      	ldrb	r2, [r2, #0]
 8017d7c:	188a      	adds	r2, r1, r2
 8017d7e:	b2d2      	uxtb	r2, r2
 8017d80:	701a      	strb	r2, [r3, #0]
 8017d82:	e004      	b.n	8017d8e <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017d84:	46c0      	nop			; (mov r8, r8)
 8017d86:	e002      	b.n	8017d8e <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 8017d88:	46c0      	nop			; (mov r8, r8)
 8017d8a:	e000      	b.n	8017d8e <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017d8c:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8017d8e:	2113      	movs	r1, #19
 8017d90:	187b      	adds	r3, r7, r1
 8017d92:	781a      	ldrb	r2, [r3, #0]
 8017d94:	187b      	adds	r3, r7, r1
 8017d96:	3201      	adds	r2, #1
 8017d98:	701a      	strb	r2, [r3, #0]
 8017d9a:	2313      	movs	r3, #19
 8017d9c:	18fb      	adds	r3, r7, r3
 8017d9e:	781b      	ldrb	r3, [r3, #0]
 8017da0:	2b0f      	cmp	r3, #15
 8017da2:	d800      	bhi.n	8017da6 <RegionCommonCountNbOfEnabledChannels+0x198>
 8017da4:	e750      	b.n	8017c48 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017da6:	2215      	movs	r2, #21
 8017da8:	18bb      	adds	r3, r7, r2
 8017daa:	18ba      	adds	r2, r7, r2
 8017dac:	7812      	ldrb	r2, [r2, #0]
 8017dae:	3210      	adds	r2, #16
 8017db0:	701a      	strb	r2, [r3, #0]
 8017db2:	2114      	movs	r1, #20
 8017db4:	187b      	adds	r3, r7, r1
 8017db6:	781a      	ldrb	r2, [r3, #0]
 8017db8:	187b      	adds	r3, r7, r1
 8017dba:	3201      	adds	r2, #1
 8017dbc:	701a      	strb	r2, [r3, #0]
 8017dbe:	2315      	movs	r3, #21
 8017dc0:	18fb      	adds	r3, r7, r3
 8017dc2:	781b      	ldrb	r3, [r3, #0]
 8017dc4:	b29a      	uxth	r2, r3
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	8a1b      	ldrh	r3, [r3, #16]
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	d200      	bcs.n	8017dd0 <RegionCommonCountNbOfEnabledChannels+0x1c2>
 8017dce:	e736      	b.n	8017c3e <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	2217      	movs	r2, #23
 8017dd4:	18ba      	adds	r2, r7, r2
 8017dd6:	7812      	ldrb	r2, [r2, #0]
 8017dd8:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	2216      	movs	r2, #22
 8017dde:	18ba      	adds	r2, r7, r2
 8017de0:	7812      	ldrb	r2, [r2, #0]
 8017de2:	701a      	strb	r2, [r3, #0]
}
 8017de4:	46c0      	nop			; (mov r8, r8)
 8017de6:	46bd      	mov	sp, r7
 8017de8:	b007      	add	sp, #28
 8017dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017dec <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dee:	46c6      	mov	lr, r8
 8017df0:	b500      	push	{lr}
 8017df2:	b08a      	sub	sp, #40	; 0x28
 8017df4:	af04      	add	r7, sp, #16
 8017df6:	60f8      	str	r0, [r7, #12]
 8017df8:	60b9      	str	r1, [r7, #8]
 8017dfa:	607a      	str	r2, [r7, #4]
 8017dfc:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	685b      	ldr	r3, [r3, #4]
 8017e02:	0018      	movs	r0, r3
 8017e04:	f005 f904 	bl	801d010 <UTIL_TIMER_GetElapsedTime>
 8017e08:	0003      	movs	r3, r0
 8017e0a:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	681a      	ldr	r2, [r3, #0]
 8017e10:	697b      	ldr	r3, [r7, #20]
 8017e12:	1ad2      	subs	r2, r2, r3
 8017e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e16:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e1a:	2201      	movs	r2, #1
 8017e1c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	2200      	movs	r2, #0
 8017e22:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	685b      	ldr	r3, [r3, #4]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d004      	beq.n	8017e36 <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017e30:	697a      	ldr	r2, [r7, #20]
 8017e32:	429a      	cmp	r2, r3
 8017e34:	d32b      	bcc.n	8017e8e <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017e36:	68bb      	ldr	r3, [r7, #8]
 8017e38:	2200      	movs	r2, #0
 8017e3a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	69db      	ldr	r3, [r3, #28]
 8017e40:	781b      	ldrb	r3, [r3, #0]
 8017e42:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017e48:	68dc      	ldr	r4, [r3, #12]
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	7a5d      	ldrb	r5, [r3, #9]
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	7a1e      	ldrb	r6, [r3, #8]
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	7d1b      	ldrb	r3, [r3, #20]
 8017e56:	4698      	mov	r8, r3
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	699b      	ldr	r3, [r3, #24]
 8017e5c:	9303      	str	r3, [sp, #12]
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	2204      	movs	r2, #4
 8017e62:	446a      	add	r2, sp
 8017e64:	330c      	adds	r3, #12
 8017e66:	cb03      	ldmia	r3!, {r0, r1}
 8017e68:	c203      	stmia	r2!, {r0, r1}
 8017e6a:	4643      	mov	r3, r8
 8017e6c:	9300      	str	r3, [sp, #0]
 8017e6e:	0033      	movs	r3, r6
 8017e70:	002a      	movs	r2, r5
 8017e72:	0021      	movs	r1, r4
 8017e74:	4660      	mov	r0, ip
 8017e76:	f7ff fc60 	bl	801773a <RegionCommonUpdateBandTimeOff>
 8017e7a:	0002      	movs	r2, r0
 8017e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e7e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	69d8      	ldr	r0, [r3, #28]
 8017e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e86:	683a      	ldr	r2, [r7, #0]
 8017e88:	6879      	ldr	r1, [r7, #4]
 8017e8a:	f7ff fec0 	bl	8017c0e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017e8e:	683b      	ldr	r3, [r7, #0]
 8017e90:	781b      	ldrb	r3, [r3, #0]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d004      	beq.n	8017ea0 <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 8017e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e98:	2200      	movs	r2, #0
 8017e9a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	e006      	b.n	8017eae <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 8017ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d001      	beq.n	8017eac <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017ea8:	230b      	movs	r3, #11
 8017eaa:	e000      	b.n	8017eae <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017eac:	230c      	movs	r3, #12
    }
}
 8017eae:	0018      	movs	r0, r3
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	b006      	add	sp, #24
 8017eb4:	bc80      	pop	{r7}
 8017eb6:	46b8      	mov	r8, r7
 8017eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017ebc <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017ebc:	b590      	push	{r4, r7, lr}
 8017ebe:	b089      	sub	sp, #36	; 0x24
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6039      	str	r1, [r7, #0]
 8017ec4:	0011      	movs	r1, r2
 8017ec6:	1dfb      	adds	r3, r7, #7
 8017ec8:	1c02      	adds	r2, r0, #0
 8017eca:	701a      	strb	r2, [r3, #0]
 8017ecc:	1dbb      	adds	r3, r7, #6
 8017ece:	1c0a      	adds	r2, r1, #0
 8017ed0:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8017ed2:	2308      	movs	r3, #8
 8017ed4:	18fb      	adds	r3, r7, r3
 8017ed6:	4a04      	ldr	r2, [pc, #16]	; (8017ee8 <RegionCommonRxConfigPrint+0x2c>)
 8017ed8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017eda:	c313      	stmia	r3!, {r0, r1, r4}
 8017edc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017ede:	c313      	stmia	r3!, {r0, r1, r4}
    }
    else
    {
//        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017ee0:	46c0      	nop			; (mov r8, r8)
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	b009      	add	sp, #36	; 0x24
 8017ee6:	bd90      	pop	{r4, r7, pc}
 8017ee8:	0801fb60 	.word	0x0801fb60

08017eec <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b088      	sub	sp, #32
 8017ef0:	af04      	add	r7, sp, #16
 8017ef2:	6078      	str	r0, [r7, #4]
 8017ef4:	000a      	movs	r2, r1
 8017ef6:	1cfb      	adds	r3, r7, #3
 8017ef8:	701a      	strb	r2, [r3, #0]
	uint32_t freq_mhz = frequency / 1000000; // Конвертируем частоту в мегагерцы
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	4912      	ldr	r1, [pc, #72]	; (8017f48 <RegionCommonTxConfigPrint+0x5c>)
 8017efe:	0018      	movs	r0, r3
 8017f00:	f7e8 f914 	bl	800012c <__udivsi3>
 8017f04:	0003      	movs	r3, r0
 8017f06:	60fb      	str	r3, [r7, #12]
	uint32_t freq_decimal = (frequency % 1000000) / 100000; // Получаем 1-ю цифру после запятой
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	490f      	ldr	r1, [pc, #60]	; (8017f48 <RegionCommonTxConfigPrint+0x5c>)
 8017f0c:	0018      	movs	r0, r3
 8017f0e:	f7e8 f993 	bl	8000238 <__aeabi_uidivmod>
 8017f12:	000b      	movs	r3, r1
 8017f14:	490d      	ldr	r1, [pc, #52]	; (8017f4c <RegionCommonTxConfigPrint+0x60>)
 8017f16:	0018      	movs	r0, r3
 8017f18:	f7e8 f908 	bl	800012c <__udivsi3>
 8017f1c:	0003      	movs	r3, r0
 8017f1e:	60bb      	str	r3, [r7, #8]
//	float freq_mhz2 = frequency / 1000000.0f; // Конвертируем частоту в мегагерцы
//    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
    MW_LOG(TS_OFF, VLEVEL_M,  "Отправка на частоте %d.%d МГц по каналу скорости передачи DR%d\r\n", freq_mhz, freq_decimal, dr );
 8017f20:	1cfb      	adds	r3, r7, #3
 8017f22:	781b      	ldrb	r3, [r3, #0]
 8017f24:	b25b      	sxtb	r3, r3
 8017f26:	4a0a      	ldr	r2, [pc, #40]	; (8017f50 <RegionCommonTxConfigPrint+0x64>)
 8017f28:	9302      	str	r3, [sp, #8]
 8017f2a:	68bb      	ldr	r3, [r7, #8]
 8017f2c:	9301      	str	r3, [sp, #4]
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	9300      	str	r3, [sp, #0]
 8017f32:	0013      	movs	r3, r2
 8017f34:	2200      	movs	r2, #0
 8017f36:	2100      	movs	r1, #0
 8017f38:	2002      	movs	r0, #2
 8017f3a:	f003 ffe1 	bl	801bf00 <UTIL_ADV_TRACE_COND_FSend>
}
 8017f3e:	46c0      	nop			; (mov r8, r8)
 8017f40:	46bd      	mov	sp, r7
 8017f42:	b004      	add	sp, #16
 8017f44:	bd80      	pop	{r7, pc}
 8017f46:	46c0      	nop			; (mov r8, r8)
 8017f48:	000f4240 	.word	0x000f4240
 8017f4c:	000186a0 	.word	0x000186a0
 8017f50:	0801fb78 	.word	0x0801fb78

08017f54 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b084      	sub	sp, #16
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	0002      	movs	r2, r0
 8017f5c:	1dfb      	adds	r3, r7, #7
 8017f5e:	701a      	strb	r2, [r3, #0]
 8017f60:	1dbb      	adds	r3, r7, #6
 8017f62:	1c0a      	adds	r2, r1, #0
 8017f64:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8017f66:	210f      	movs	r1, #15
 8017f68:	187b      	adds	r3, r7, r1
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8017f6e:	1dfa      	adds	r2, r7, #7
 8017f70:	1dbb      	adds	r3, r7, #6
 8017f72:	7812      	ldrb	r2, [r2, #0]
 8017f74:	b252      	sxtb	r2, r2
 8017f76:	781b      	ldrb	r3, [r3, #0]
 8017f78:	b25b      	sxtb	r3, r3
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d104      	bne.n	8017f88 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 8017f7e:	187b      	adds	r3, r7, r1
 8017f80:	1dba      	adds	r2, r7, #6
 8017f82:	7812      	ldrb	r2, [r2, #0]
 8017f84:	701a      	strb	r2, [r3, #0]
 8017f86:	e005      	b.n	8017f94 <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 8017f88:	1dfb      	adds	r3, r7, #7
 8017f8a:	781a      	ldrb	r2, [r3, #0]
 8017f8c:	230f      	movs	r3, #15
 8017f8e:	18fb      	adds	r3, r7, r3
 8017f90:	3a01      	subs	r2, #1
 8017f92:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8017f94:	230f      	movs	r3, #15
 8017f96:	18fb      	adds	r3, r7, r3
 8017f98:	781b      	ldrb	r3, [r3, #0]
 8017f9a:	b25b      	sxtb	r3, r3
}
 8017f9c:	0018      	movs	r0, r3
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	b004      	add	sp, #16
 8017fa2:	bd80      	pop	{r7, pc}

08017fa4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b082      	sub	sp, #8
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8017fac:	4b09      	ldr	r3, [pc, #36]	; (8017fd4 <GetBandwidth+0x30>)
 8017fae:	687a      	ldr	r2, [r7, #4]
 8017fb0:	0092      	lsls	r2, r2, #2
 8017fb2:	58d3      	ldr	r3, [r2, r3]
 8017fb4:	4a08      	ldr	r2, [pc, #32]	; (8017fd8 <GetBandwidth+0x34>)
 8017fb6:	4293      	cmp	r3, r2
 8017fb8:	d004      	beq.n	8017fc4 <GetBandwidth+0x20>
 8017fba:	4a08      	ldr	r2, [pc, #32]	; (8017fdc <GetBandwidth+0x38>)
 8017fbc:	4293      	cmp	r3, r2
 8017fbe:	d003      	beq.n	8017fc8 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	e002      	b.n	8017fca <GetBandwidth+0x26>
        case 250000:
            return 1;
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	e000      	b.n	8017fca <GetBandwidth+0x26>
        case 500000:
            return 2;
 8017fc8:	2302      	movs	r3, #2
    }
}
 8017fca:	0018      	movs	r0, r3
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	b002      	add	sp, #8
 8017fd0:	bd80      	pop	{r7, pc}
 8017fd2:	46c0      	nop			; (mov r8, r8)
 8017fd4:	0801fc00 	.word	0x0801fc00
 8017fd8:	0003d090 	.word	0x0003d090
 8017fdc:	0007a120 	.word	0x0007a120

08017fe0 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017fe0:	b590      	push	{r4, r7, lr}
 8017fe2:	b085      	sub	sp, #20
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	0004      	movs	r4, r0
 8017fe8:	0008      	movs	r0, r1
 8017fea:	0011      	movs	r1, r2
 8017fec:	603b      	str	r3, [r7, #0]
 8017fee:	1dfb      	adds	r3, r7, #7
 8017ff0:	1c22      	adds	r2, r4, #0
 8017ff2:	701a      	strb	r2, [r3, #0]
 8017ff4:	1dbb      	adds	r3, r7, #6
 8017ff6:	1c02      	adds	r2, r0, #0
 8017ff8:	701a      	strb	r2, [r3, #0]
 8017ffa:	1d7b      	adds	r3, r7, #5
 8017ffc:	1c0a      	adds	r2, r1, #0
 8017ffe:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8018000:	210f      	movs	r1, #15
 8018002:	187b      	adds	r3, r7, r1
 8018004:	1dfa      	adds	r2, r7, #7
 8018006:	7812      	ldrb	r2, [r2, #0]
 8018008:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 801800a:	187a      	adds	r2, r7, r1
 801800c:	1dbb      	adds	r3, r7, #6
 801800e:	1df9      	adds	r1, r7, #7
 8018010:	780c      	ldrb	r4, [r1, #0]
 8018012:	781b      	ldrb	r3, [r3, #0]
 8018014:	b258      	sxtb	r0, r3
 8018016:	b261      	sxtb	r1, r4
 8018018:	4288      	cmp	r0, r1
 801801a:	da00      	bge.n	801801e <LimitTxPower+0x3e>
 801801c:	1c23      	adds	r3, r4, #0
 801801e:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8018020:	230f      	movs	r3, #15
 8018022:	18fb      	adds	r3, r7, r3
 8018024:	781b      	ldrb	r3, [r3, #0]
 8018026:	b25b      	sxtb	r3, r3
}
 8018028:	0018      	movs	r0, r3
 801802a:	46bd      	mov	sp, r7
 801802c:	b005      	add	sp, #20
 801802e:	bd90      	pop	{r4, r7, pc}

08018030 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b082      	sub	sp, #8
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
 8018038:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801803a:	4b2e      	ldr	r3, [pc, #184]	; (80180f4 <VerifyRfFreq+0xc4>)
 801803c:	6a1b      	ldr	r3, [r3, #32]
 801803e:	687a      	ldr	r2, [r7, #4]
 8018040:	0010      	movs	r0, r2
 8018042:	4798      	blx	r3
 8018044:	0003      	movs	r3, r0
 8018046:	001a      	movs	r2, r3
 8018048:	2301      	movs	r3, #1
 801804a:	4053      	eors	r3, r2
 801804c:	b2db      	uxtb	r3, r3
 801804e:	2b00      	cmp	r3, #0
 8018050:	d001      	beq.n	8018056 <VerifyRfFreq+0x26>
    {
        return false;
 8018052:	2300      	movs	r3, #0
 8018054:	e04a      	b.n	80180ec <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	4a27      	ldr	r2, [pc, #156]	; (80180f8 <VerifyRfFreq+0xc8>)
 801805a:	4293      	cmp	r3, r2
 801805c:	d907      	bls.n	801806e <VerifyRfFreq+0x3e>
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	4a26      	ldr	r2, [pc, #152]	; (80180fc <VerifyRfFreq+0xcc>)
 8018062:	4293      	cmp	r3, r2
 8018064:	d803      	bhi.n	801806e <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8018066:	683b      	ldr	r3, [r7, #0]
 8018068:	2202      	movs	r2, #2
 801806a:	701a      	strb	r2, [r3, #0]
 801806c:	e03d      	b.n	80180ea <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	4a22      	ldr	r2, [pc, #136]	; (80180fc <VerifyRfFreq+0xcc>)
 8018072:	4293      	cmp	r3, r2
 8018074:	d907      	bls.n	8018086 <VerifyRfFreq+0x56>
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	4a21      	ldr	r2, [pc, #132]	; (8018100 <VerifyRfFreq+0xd0>)
 801807a:	4293      	cmp	r3, r2
 801807c:	d803      	bhi.n	8018086 <VerifyRfFreq+0x56>
    {
        *band = 0;
 801807e:	683b      	ldr	r3, [r7, #0]
 8018080:	2200      	movs	r2, #0
 8018082:	701a      	strb	r2, [r3, #0]
 8018084:	e031      	b.n	80180ea <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	4a1d      	ldr	r2, [pc, #116]	; (8018100 <VerifyRfFreq+0xd0>)
 801808a:	4293      	cmp	r3, r2
 801808c:	d907      	bls.n	801809e <VerifyRfFreq+0x6e>
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	4a1c      	ldr	r2, [pc, #112]	; (8018104 <VerifyRfFreq+0xd4>)
 8018092:	4293      	cmp	r3, r2
 8018094:	d803      	bhi.n	801809e <VerifyRfFreq+0x6e>
    {
        *band = 1;
 8018096:	683b      	ldr	r3, [r7, #0]
 8018098:	2201      	movs	r2, #1
 801809a:	701a      	strb	r2, [r3, #0]
 801809c:	e025      	b.n	80180ea <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	4a19      	ldr	r2, [pc, #100]	; (8018108 <VerifyRfFreq+0xd8>)
 80180a2:	4293      	cmp	r3, r2
 80180a4:	d907      	bls.n	80180b6 <VerifyRfFreq+0x86>
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	4a18      	ldr	r2, [pc, #96]	; (801810c <VerifyRfFreq+0xdc>)
 80180aa:	4293      	cmp	r3, r2
 80180ac:	d803      	bhi.n	80180b6 <VerifyRfFreq+0x86>
    {
        *band = 5;
 80180ae:	683b      	ldr	r3, [r7, #0]
 80180b0:	2205      	movs	r2, #5
 80180b2:	701a      	strb	r2, [r3, #0]
 80180b4:	e019      	b.n	80180ea <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	4a15      	ldr	r2, [pc, #84]	; (8018110 <VerifyRfFreq+0xe0>)
 80180ba:	4293      	cmp	r3, r2
 80180bc:	d907      	bls.n	80180ce <VerifyRfFreq+0x9e>
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	4a14      	ldr	r2, [pc, #80]	; (8018114 <VerifyRfFreq+0xe4>)
 80180c2:	4293      	cmp	r3, r2
 80180c4:	d803      	bhi.n	80180ce <VerifyRfFreq+0x9e>
    {
        *band = 3;
 80180c6:	683b      	ldr	r3, [r7, #0]
 80180c8:	2203      	movs	r2, #3
 80180ca:	701a      	strb	r2, [r3, #0]
 80180cc:	e00d      	b.n	80180ea <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	4a11      	ldr	r2, [pc, #68]	; (8018118 <VerifyRfFreq+0xe8>)
 80180d2:	4293      	cmp	r3, r2
 80180d4:	d907      	bls.n	80180e6 <VerifyRfFreq+0xb6>
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	4a10      	ldr	r2, [pc, #64]	; (801811c <VerifyRfFreq+0xec>)
 80180da:	4293      	cmp	r3, r2
 80180dc:	d803      	bhi.n	80180e6 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 80180de:	683b      	ldr	r3, [r7, #0]
 80180e0:	2204      	movs	r2, #4
 80180e2:	701a      	strb	r2, [r3, #0]
 80180e4:	e001      	b.n	80180ea <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 80180e6:	2300      	movs	r3, #0
 80180e8:	e000      	b.n	80180ec <VerifyRfFreq+0xbc>
    }
    return true;
 80180ea:	2301      	movs	r3, #1
}
 80180ec:	0018      	movs	r0, r3
 80180ee:	46bd      	mov	sp, r7
 80180f0:	b002      	add	sp, #8
 80180f2:	bd80      	pop	{r7, pc}
 80180f4:	0801fd7c 	.word	0x0801fd7c
 80180f8:	337055bf 	.word	0x337055bf
 80180fc:	338eda3f 	.word	0x338eda3f
 8018100:	33bca100 	.word	0x33bca100
 8018104:	33c5c8c0 	.word	0x33c5c8c0
 8018108:	33c74f5f 	.word	0x33c74f5f
 801810c:	33cef080 	.word	0x33cef080
 8018110:	33d1fdbf 	.word	0x33d1fdbf
 8018114:	33d5ce50 	.word	0x33d5ce50
 8018118:	33d6919f 	.word	0x33d6919f
 801811c:	33db2580 	.word	0x33db2580

08018120 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018120:	b5b0      	push	{r4, r5, r7, lr}
 8018122:	b08a      	sub	sp, #40	; 0x28
 8018124:	af04      	add	r7, sp, #16
 8018126:	0002      	movs	r2, r0
 8018128:	1dfb      	adds	r3, r7, #7
 801812a:	701a      	strb	r2, [r3, #0]
 801812c:	1d3b      	adds	r3, r7, #4
 801812e:	1c0a      	adds	r2, r1, #0
 8018130:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 8018132:	1dfb      	adds	r3, r7, #7
 8018134:	781b      	ldrb	r3, [r3, #0]
 8018136:	b25b      	sxtb	r3, r3
 8018138:	4a26      	ldr	r2, [pc, #152]	; (80181d4 <GetTimeOnAir+0xb4>)
 801813a:	5cd2      	ldrb	r2, [r2, r3]
 801813c:	2513      	movs	r5, #19
 801813e:	197b      	adds	r3, r7, r5
 8018140:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 8018142:	1dfb      	adds	r3, r7, #7
 8018144:	781b      	ldrb	r3, [r3, #0]
 8018146:	b25b      	sxtb	r3, r3
 8018148:	0018      	movs	r0, r3
 801814a:	f7ff ff2b 	bl	8017fa4 <GetBandwidth>
 801814e:	0003      	movs	r3, r0
 8018150:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018152:	2300      	movs	r3, #0
 8018154:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018156:	1dfb      	adds	r3, r7, #7
 8018158:	781b      	ldrb	r3, [r3, #0]
 801815a:	b25b      	sxtb	r3, r3
 801815c:	2b07      	cmp	r3, #7
 801815e:	d11d      	bne.n	801819c <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018160:	4b1d      	ldr	r3, [pc, #116]	; (80181d8 <GetTimeOnAir+0xb8>)
 8018162:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018164:	197b      	adds	r3, r7, r5
 8018166:	2200      	movs	r2, #0
 8018168:	569a      	ldrsb	r2, [r3, r2]
 801816a:	0013      	movs	r3, r2
 801816c:	015b      	lsls	r3, r3, #5
 801816e:	1a9b      	subs	r3, r3, r2
 8018170:	009b      	lsls	r3, r3, #2
 8018172:	189b      	adds	r3, r3, r2
 8018174:	00db      	lsls	r3, r3, #3
 8018176:	0018      	movs	r0, r3
 8018178:	1d3b      	adds	r3, r7, #4
 801817a:	881b      	ldrh	r3, [r3, #0]
 801817c:	b2db      	uxtb	r3, r3
 801817e:	68f9      	ldr	r1, [r7, #12]
 8018180:	2201      	movs	r2, #1
 8018182:	9203      	str	r2, [sp, #12]
 8018184:	9302      	str	r3, [sp, #8]
 8018186:	2300      	movs	r3, #0
 8018188:	9301      	str	r3, [sp, #4]
 801818a:	2305      	movs	r3, #5
 801818c:	9300      	str	r3, [sp, #0]
 801818e:	2300      	movs	r3, #0
 8018190:	0002      	movs	r2, r0
 8018192:	2000      	movs	r0, #0
 8018194:	47a0      	blx	r4
 8018196:	0003      	movs	r3, r0
 8018198:	617b      	str	r3, [r7, #20]
 801819a:	e015      	b.n	80181c8 <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801819c:	4b0e      	ldr	r3, [pc, #56]	; (80181d8 <GetTimeOnAir+0xb8>)
 801819e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80181a0:	2313      	movs	r3, #19
 80181a2:	18fb      	adds	r3, r7, r3
 80181a4:	2200      	movs	r2, #0
 80181a6:	569a      	ldrsb	r2, [r3, r2]
 80181a8:	1d3b      	adds	r3, r7, #4
 80181aa:	881b      	ldrh	r3, [r3, #0]
 80181ac:	b2db      	uxtb	r3, r3
 80181ae:	68f9      	ldr	r1, [r7, #12]
 80181b0:	2001      	movs	r0, #1
 80181b2:	9003      	str	r0, [sp, #12]
 80181b4:	9302      	str	r3, [sp, #8]
 80181b6:	2300      	movs	r3, #0
 80181b8:	9301      	str	r3, [sp, #4]
 80181ba:	2308      	movs	r3, #8
 80181bc:	9300      	str	r3, [sp, #0]
 80181be:	2301      	movs	r3, #1
 80181c0:	2001      	movs	r0, #1
 80181c2:	47a0      	blx	r4
 80181c4:	0003      	movs	r3, r0
 80181c6:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 80181c8:	697b      	ldr	r3, [r7, #20]
}
 80181ca:	0018      	movs	r0, r3
 80181cc:	46bd      	mov	sp, r7
 80181ce:	b006      	add	sp, #24
 80181d0:	bdb0      	pop	{r4, r5, r7, pc}
 80181d2:	46c0      	nop			; (mov r8, r8)
 80181d4:	0801fbf8 	.word	0x0801fbf8
 80181d8:	0801fd7c 	.word	0x0801fd7c

080181dc <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b084      	sub	sp, #16
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80181e4:	2308      	movs	r3, #8
 80181e6:	18fb      	adds	r3, r7, r3
 80181e8:	2200      	movs	r2, #0
 80181ea:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	781b      	ldrb	r3, [r3, #0]
 80181f0:	2b39      	cmp	r3, #57	; 0x39
 80181f2:	d900      	bls.n	80181f6 <RegionEU868GetPhyParam+0x1a>
 80181f4:	e0e9      	b.n	80183ca <RegionEU868GetPhyParam+0x1ee>
 80181f6:	009a      	lsls	r2, r3, #2
 80181f8:	4b7b      	ldr	r3, [pc, #492]	; (80183e8 <RegionEU868GetPhyParam+0x20c>)
 80181fa:	18d3      	adds	r3, r2, r3
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018200:	2308      	movs	r3, #8
 8018202:	18fb      	adds	r3, r7, r3
 8018204:	2200      	movs	r2, #0
 8018206:	601a      	str	r2, [r3, #0]
            break;
 8018208:	e0e0      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801820a:	2308      	movs	r3, #8
 801820c:	18fb      	adds	r3, r7, r3
 801820e:	2200      	movs	r2, #0
 8018210:	601a      	str	r2, [r3, #0]
            break;
 8018212:	e0db      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018214:	2308      	movs	r3, #8
 8018216:	18fb      	adds	r3, r7, r3
 8018218:	2200      	movs	r2, #0
 801821a:	601a      	str	r2, [r3, #0]
            break;
 801821c:	e0d6      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	785b      	ldrb	r3, [r3, #1]
 8018222:	b25b      	sxtb	r3, r3
 8018224:	2100      	movs	r1, #0
 8018226:	0018      	movs	r0, r3
 8018228:	f7ff fe94 	bl	8017f54 <GetNextLowerTxDr>
 801822c:	0003      	movs	r3, r0
 801822e:	001a      	movs	r2, r3
 8018230:	2308      	movs	r3, #8
 8018232:	18fb      	adds	r3, r7, r3
 8018234:	601a      	str	r2, [r3, #0]
            break;
 8018236:	e0c9      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018238:	2308      	movs	r3, #8
 801823a:	18fb      	adds	r3, r7, r3
 801823c:	2200      	movs	r2, #0
 801823e:	601a      	str	r2, [r3, #0]
            break;
 8018240:	e0c4      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018242:	2308      	movs	r3, #8
 8018244:	18fb      	adds	r3, r7, r3
 8018246:	2200      	movs	r2, #0
 8018248:	601a      	str	r2, [r3, #0]
            break;
 801824a:	e0bf      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 801824c:	2308      	movs	r3, #8
 801824e:	18fb      	adds	r3, r7, r3
 8018250:	2240      	movs	r2, #64	; 0x40
 8018252:	601a      	str	r2, [r3, #0]
            break;
 8018254:	e0ba      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8018256:	2308      	movs	r3, #8
 8018258:	18fb      	adds	r3, r7, r3
 801825a:	2220      	movs	r2, #32
 801825c:	601a      	str	r2, [r3, #0]
            break;
 801825e:	e0b5      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	785b      	ldrb	r3, [r3, #1]
 8018264:	b25b      	sxtb	r3, r3
 8018266:	001a      	movs	r2, r3
 8018268:	4b60      	ldr	r3, [pc, #384]	; (80183ec <RegionEU868GetPhyParam+0x210>)
 801826a:	5c9b      	ldrb	r3, [r3, r2]
 801826c:	001a      	movs	r2, r3
 801826e:	2308      	movs	r3, #8
 8018270:	18fb      	adds	r3, r7, r3
 8018272:	601a      	str	r2, [r3, #0]
            break;
 8018274:	e0aa      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	785b      	ldrb	r3, [r3, #1]
 801827a:	b25b      	sxtb	r3, r3
 801827c:	001a      	movs	r2, r3
 801827e:	4b5c      	ldr	r3, [pc, #368]	; (80183f0 <RegionEU868GetPhyParam+0x214>)
 8018280:	5c9b      	ldrb	r3, [r3, r2]
 8018282:	001a      	movs	r2, r3
 8018284:	2308      	movs	r3, #8
 8018286:	18fb      	adds	r3, r7, r3
 8018288:	601a      	str	r2, [r3, #0]
            break;
 801828a:	e09f      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801828c:	2308      	movs	r3, #8
 801828e:	18fb      	adds	r3, r7, r3
 8018290:	2201      	movs	r2, #1
 8018292:	601a      	str	r2, [r3, #0]
            break;
 8018294:	e09a      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018296:	2308      	movs	r3, #8
 8018298:	18fb      	adds	r3, r7, r3
 801829a:	4a56      	ldr	r2, [pc, #344]	; (80183f4 <RegionEU868GetPhyParam+0x218>)
 801829c:	601a      	str	r2, [r3, #0]
            break;
 801829e:	e095      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 80182a0:	2308      	movs	r3, #8
 80182a2:	18fb      	adds	r3, r7, r3
 80182a4:	22fa      	movs	r2, #250	; 0xfa
 80182a6:	0092      	lsls	r2, r2, #2
 80182a8:	601a      	str	r2, [r3, #0]
            break;
 80182aa:	e08f      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 80182ac:	2308      	movs	r3, #8
 80182ae:	18fb      	adds	r3, r7, r3
 80182b0:	22fa      	movs	r2, #250	; 0xfa
 80182b2:	00d2      	lsls	r2, r2, #3
 80182b4:	601a      	str	r2, [r3, #0]
            break;
 80182b6:	e089      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 80182b8:	2308      	movs	r3, #8
 80182ba:	18fb      	adds	r3, r7, r3
 80182bc:	4a4e      	ldr	r2, [pc, #312]	; (80183f8 <RegionEU868GetPhyParam+0x21c>)
 80182be:	601a      	str	r2, [r3, #0]
            break;
 80182c0:	e084      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 80182c2:	2308      	movs	r3, #8
 80182c4:	18fb      	adds	r3, r7, r3
 80182c6:	4a4d      	ldr	r2, [pc, #308]	; (80183fc <RegionEU868GetPhyParam+0x220>)
 80182c8:	601a      	str	r2, [r3, #0]
            break;
 80182ca:	e07f      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 80182cc:	2308      	movs	r3, #8
 80182ce:	18fb      	adds	r3, r7, r3
 80182d0:	2280      	movs	r2, #128	; 0x80
 80182d2:	01d2      	lsls	r2, r2, #7
 80182d4:	601a      	str	r2, [r3, #0]
            break;
 80182d6:	e079      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 80182d8:	23fa      	movs	r3, #250	; 0xfa
 80182da:	009b      	lsls	r3, r3, #2
 80182dc:	4a48      	ldr	r2, [pc, #288]	; (8018400 <RegionEU868GetPhyParam+0x224>)
 80182de:	0019      	movs	r1, r3
 80182e0:	0010      	movs	r0, r2
 80182e2:	f001 f983 	bl	80195ec <randr>
 80182e6:	0003      	movs	r3, r0
 80182e8:	22fa      	movs	r2, #250	; 0xfa
 80182ea:	00d2      	lsls	r2, r2, #3
 80182ec:	4694      	mov	ip, r2
 80182ee:	4463      	add	r3, ip
 80182f0:	001a      	movs	r2, r3
 80182f2:	2308      	movs	r3, #8
 80182f4:	18fb      	adds	r3, r7, r3
 80182f6:	601a      	str	r2, [r3, #0]
            break;
 80182f8:	e068      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 80182fa:	2308      	movs	r3, #8
 80182fc:	18fb      	adds	r3, r7, r3
 80182fe:	2200      	movs	r2, #0
 8018300:	601a      	str	r2, [r3, #0]
            break;
 8018302:	e063      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018304:	2308      	movs	r3, #8
 8018306:	18fb      	adds	r3, r7, r3
 8018308:	4a3e      	ldr	r2, [pc, #248]	; (8018404 <RegionEU868GetPhyParam+0x228>)
 801830a:	601a      	str	r2, [r3, #0]
            break;
 801830c:	e05e      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801830e:	2308      	movs	r3, #8
 8018310:	18fb      	adds	r3, r7, r3
 8018312:	2200      	movs	r2, #0
 8018314:	601a      	str	r2, [r3, #0]
            break;
 8018316:	e059      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8018318:	2308      	movs	r3, #8
 801831a:	18fb      	adds	r3, r7, r3
 801831c:	4a3a      	ldr	r2, [pc, #232]	; (8018408 <RegionEU868GetPhyParam+0x22c>)
 801831e:	601a      	str	r2, [r3, #0]
            break;
 8018320:	e054      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8018322:	2308      	movs	r3, #8
 8018324:	18fb      	adds	r3, r7, r3
 8018326:	4a39      	ldr	r2, [pc, #228]	; (801840c <RegionEU868GetPhyParam+0x230>)
 8018328:	601a      	str	r2, [r3, #0]
            break;
 801832a:	e04f      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801832c:	2308      	movs	r3, #8
 801832e:	18fb      	adds	r3, r7, r3
 8018330:	2210      	movs	r2, #16
 8018332:	601a      	str	r2, [r3, #0]
            break;
 8018334:	e04a      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8018336:	2308      	movs	r3, #8
 8018338:	18fb      	adds	r3, r7, r3
 801833a:	4a35      	ldr	r2, [pc, #212]	; (8018410 <RegionEU868GetPhyParam+0x234>)
 801833c:	601a      	str	r2, [r3, #0]
            break;
 801833e:	e045      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8018340:	2308      	movs	r3, #8
 8018342:	18fb      	adds	r3, r7, r3
 8018344:	2200      	movs	r2, #0
 8018346:	601a      	str	r2, [r3, #0]
            break;
 8018348:	e040      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801834a:	2308      	movs	r3, #8
 801834c:	18fb      	adds	r3, r7, r3
 801834e:	2283      	movs	r2, #131	; 0x83
 8018350:	05d2      	lsls	r2, r2, #23
 8018352:	601a      	str	r2, [r3, #0]
            break;
 8018354:	e03a      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018356:	2308      	movs	r3, #8
 8018358:	18fb      	adds	r3, r7, r3
 801835a:	4a2e      	ldr	r2, [pc, #184]	; (8018414 <RegionEU868GetPhyParam+0x238>)
 801835c:	601a      	str	r2, [r3, #0]
            break;
 801835e:	e035      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018360:	2308      	movs	r3, #8
 8018362:	18fb      	adds	r3, r7, r3
 8018364:	4a27      	ldr	r2, [pc, #156]	; (8018404 <RegionEU868GetPhyParam+0x228>)
 8018366:	601a      	str	r2, [r3, #0]
            break;
 8018368:	e030      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801836a:	2108      	movs	r1, #8
 801836c:	187b      	adds	r3, r7, r1
 801836e:	2211      	movs	r2, #17
 8018370:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018372:	187b      	adds	r3, r7, r1
 8018374:	2202      	movs	r2, #2
 8018376:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018378:	187b      	adds	r3, r7, r1
 801837a:	2200      	movs	r2, #0
 801837c:	709a      	strb	r2, [r3, #2]
            break;
 801837e:	e025      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018380:	2308      	movs	r3, #8
 8018382:	18fb      	adds	r3, r7, r3
 8018384:	2203      	movs	r2, #3
 8018386:	601a      	str	r2, [r3, #0]
            break;
 8018388:	e020      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801838a:	2308      	movs	r3, #8
 801838c:	18fb      	adds	r3, r7, r3
 801838e:	4a1d      	ldr	r2, [pc, #116]	; (8018404 <RegionEU868GetPhyParam+0x228>)
 8018390:	601a      	str	r2, [r3, #0]
            break;
 8018392:	e01b      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018394:	2308      	movs	r3, #8
 8018396:	18fb      	adds	r3, r7, r3
 8018398:	2203      	movs	r2, #3
 801839a:	601a      	str	r2, [r3, #0]
            break;
 801839c:	e016      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	785b      	ldrb	r3, [r3, #1]
 80183a2:	b25b      	sxtb	r3, r3
 80183a4:	001a      	movs	r2, r3
 80183a6:	4b1c      	ldr	r3, [pc, #112]	; (8018418 <RegionEU868GetPhyParam+0x23c>)
 80183a8:	5c9b      	ldrb	r3, [r3, r2]
 80183aa:	001a      	movs	r2, r3
 80183ac:	2308      	movs	r3, #8
 80183ae:	18fb      	adds	r3, r7, r3
 80183b0:	601a      	str	r2, [r3, #0]
            break;
 80183b2:	e00b      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	785b      	ldrb	r3, [r3, #1]
 80183b8:	b25b      	sxtb	r3, r3
 80183ba:	0018      	movs	r0, r3
 80183bc:	f7ff fdf2 	bl	8017fa4 <GetBandwidth>
 80183c0:	0002      	movs	r2, r0
 80183c2:	2308      	movs	r3, #8
 80183c4:	18fb      	adds	r3, r7, r3
 80183c6:	601a      	str	r2, [r3, #0]
            break;
 80183c8:	e000      	b.n	80183cc <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 80183ca:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80183cc:	210c      	movs	r1, #12
 80183ce:	187b      	adds	r3, r7, r1
 80183d0:	2208      	movs	r2, #8
 80183d2:	18ba      	adds	r2, r7, r2
 80183d4:	6812      	ldr	r2, [r2, #0]
 80183d6:	601a      	str	r2, [r3, #0]
 80183d8:	187b      	adds	r3, r7, r1
 80183da:	2200      	movs	r2, #0
 80183dc:	681a      	ldr	r2, [r3, #0]
 80183de:	0013      	movs	r3, r2
}
 80183e0:	0018      	movs	r0, r3
 80183e2:	46bd      	mov	sp, r7
 80183e4:	b004      	add	sp, #16
 80183e6:	bd80      	pop	{r7, pc}
 80183e8:	0801fc30 	.word	0x0801fc30
 80183ec:	0801fc20 	.word	0x0801fc20
 80183f0:	0801fc28 	.word	0x0801fc28
 80183f4:	00000bb8 	.word	0x00000bb8
 80183f8:	00001388 	.word	0x00001388
 80183fc:	00001770 	.word	0x00001770
 8018400:	fffffc18 	.word	0xfffffc18
 8018404:	33d3e608 	.word	0x33d3e608
 8018408:	20000e7c 	.word	0x20000e7c
 801840c:	20000e7e 	.word	0x20000e7e
 8018410:	20000d44 	.word	0x20000d44
 8018414:	4009999a 	.word	0x4009999a
 8018418:	0801fbf8 	.word	0x0801fbf8

0801841c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801841c:	b5b0      	push	{r4, r5, r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af02      	add	r7, sp, #8
 8018422:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	781b      	ldrb	r3, [r3, #0]
 8018428:	0019      	movs	r1, r3
 801842a:	4a11      	ldr	r2, [pc, #68]	; (8018470 <RegionEU868SetBandTxDone+0x54>)
 801842c:	000b      	movs	r3, r1
 801842e:	005b      	lsls	r3, r3, #1
 8018430:	185b      	adds	r3, r3, r1
 8018432:	009b      	lsls	r3, r3, #2
 8018434:	18d3      	adds	r3, r2, r3
 8018436:	3309      	adds	r3, #9
 8018438:	781b      	ldrb	r3, [r3, #0]
 801843a:	001a      	movs	r2, r3
 801843c:	0013      	movs	r3, r2
 801843e:	009b      	lsls	r3, r3, #2
 8018440:	189b      	adds	r3, r3, r2
 8018442:	009b      	lsls	r3, r3, #2
 8018444:	33c0      	adds	r3, #192	; 0xc0
 8018446:	001a      	movs	r2, r3
 8018448:	4b09      	ldr	r3, [pc, #36]	; (8018470 <RegionEU868SetBandTxDone+0x54>)
 801844a:	18d0      	adds	r0, r2, r3
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	689c      	ldr	r4, [r3, #8]
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	785d      	ldrb	r5, [r3, #1]
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	466a      	mov	r2, sp
 8018458:	6919      	ldr	r1, [r3, #16]
 801845a:	6011      	str	r1, [r2, #0]
 801845c:	68db      	ldr	r3, [r3, #12]
 801845e:	002a      	movs	r2, r5
 8018460:	0021      	movs	r1, r4
 8018462:	f7ff f92e 	bl	80176c2 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 8018466:	46c0      	nop			; (mov r8, r8)
 8018468:	46bd      	mov	sp, r7
 801846a:	b002      	add	sp, #8
 801846c:	bdb0      	pop	{r4, r5, r7, pc}
 801846e:	46c0      	nop			; (mov r8, r8)
 8018470:	20000d44 	.word	0x20000d44

08018474 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018474:	b590      	push	{r4, r7, lr}
 8018476:	b0ab      	sub	sp, #172	; 0xac
 8018478:	af00      	add	r7, sp, #0
 801847a:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 801847c:	2430      	movs	r4, #48	; 0x30
 801847e:	193b      	adds	r3, r7, r4
 8018480:	0018      	movs	r0, r3
 8018482:	2378      	movs	r3, #120	; 0x78
 8018484:	001a      	movs	r2, r3
 8018486:	2100      	movs	r1, #0
 8018488:	f005 fe23 	bl	801e0d2 <memset>
 801848c:	0021      	movs	r1, r4
 801848e:	187b      	adds	r3, r7, r1
 8018490:	2264      	movs	r2, #100	; 0x64
 8018492:	801a      	strh	r2, [r3, #0]
 8018494:	187b      	adds	r3, r7, r1
 8018496:	2264      	movs	r2, #100	; 0x64
 8018498:	829a      	strh	r2, [r3, #20]
 801849a:	187b      	adds	r3, r7, r1
 801849c:	22fa      	movs	r2, #250	; 0xfa
 801849e:	0092      	lsls	r2, r2, #2
 80184a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80184a2:	187b      	adds	r3, r7, r1
 80184a4:	220a      	movs	r2, #10
 80184a6:	879a      	strh	r2, [r3, #60]	; 0x3c
 80184a8:	0008      	movs	r0, r1
 80184aa:	187b      	adds	r3, r7, r1
 80184ac:	2250      	movs	r2, #80	; 0x50
 80184ae:	2164      	movs	r1, #100	; 0x64
 80184b0:	5299      	strh	r1, [r3, r2]
 80184b2:	183b      	adds	r3, r7, r0
 80184b4:	2264      	movs	r2, #100	; 0x64
 80184b6:	21fa      	movs	r1, #250	; 0xfa
 80184b8:	0089      	lsls	r1, r1, #2
 80184ba:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	791b      	ldrb	r3, [r3, #4]
 80184c0:	2b03      	cmp	r3, #3
 80184c2:	d048      	beq.n	8018556 <RegionEU868InitDefaults+0xe2>
 80184c4:	dc54      	bgt.n	8018570 <RegionEU868InitDefaults+0xfc>
 80184c6:	2b02      	cmp	r3, #2
 80184c8:	d036      	beq.n	8018538 <RegionEU868InitDefaults+0xc4>
 80184ca:	dc51      	bgt.n	8018570 <RegionEU868InitDefaults+0xfc>
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d002      	beq.n	80184d6 <RegionEU868InitDefaults+0x62>
 80184d0:	2b01      	cmp	r3, #1
 80184d2:	d021      	beq.n	8018518 <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 80184d4:	e04c      	b.n	8018570 <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80184d6:	2330      	movs	r3, #48	; 0x30
 80184d8:	18f9      	adds	r1, r7, r3
 80184da:	4b29      	ldr	r3, [pc, #164]	; (8018580 <RegionEU868InitDefaults+0x10c>)
 80184dc:	2278      	movs	r2, #120	; 0x78
 80184de:	0018      	movs	r0, r3
 80184e0:	f001 f89a 	bl	8019618 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80184e4:	4b27      	ldr	r3, [pc, #156]	; (8018584 <RegionEU868InitDefaults+0x110>)
 80184e6:	4a28      	ldr	r2, [pc, #160]	; (8018588 <RegionEU868InitDefaults+0x114>)
 80184e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80184ea:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80184ec:	4b25      	ldr	r3, [pc, #148]	; (8018584 <RegionEU868InitDefaults+0x110>)
 80184ee:	4a27      	ldr	r2, [pc, #156]	; (801858c <RegionEU868InitDefaults+0x118>)
 80184f0:	330c      	adds	r3, #12
 80184f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80184f4:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80184f6:	4b23      	ldr	r3, [pc, #140]	; (8018584 <RegionEU868InitDefaults+0x110>)
 80184f8:	4a25      	ldr	r2, [pc, #148]	; (8018590 <RegionEU868InitDefaults+0x11c>)
 80184fa:	3318      	adds	r3, #24
 80184fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80184fe:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018500:	4a20      	ldr	r2, [pc, #128]	; (8018584 <RegionEU868InitDefaults+0x110>)
 8018502:	239d      	movs	r3, #157	; 0x9d
 8018504:	005b      	lsls	r3, r3, #1
 8018506:	2107      	movs	r1, #7
 8018508:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801850a:	4922      	ldr	r1, [pc, #136]	; (8018594 <RegionEU868InitDefaults+0x120>)
 801850c:	4b22      	ldr	r3, [pc, #136]	; (8018598 <RegionEU868InitDefaults+0x124>)
 801850e:	2201      	movs	r2, #1
 8018510:	0018      	movs	r0, r3
 8018512:	f7ff f8a7 	bl	8017664 <RegionCommonChanMaskCopy>
            break;
 8018516:	e02e      	b.n	8018576 <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 8018518:	4b1a      	ldr	r3, [pc, #104]	; (8018584 <RegionEU868InitDefaults+0x110>)
 801851a:	2200      	movs	r2, #0
 801851c:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 801851e:	4b19      	ldr	r3, [pc, #100]	; (8018584 <RegionEU868InitDefaults+0x110>)
 8018520:	2200      	movs	r2, #0
 8018522:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 8018524:	4b17      	ldr	r3, [pc, #92]	; (8018584 <RegionEU868InitDefaults+0x110>)
 8018526:	2200      	movs	r2, #0
 8018528:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801852a:	491a      	ldr	r1, [pc, #104]	; (8018594 <RegionEU868InitDefaults+0x120>)
 801852c:	4b1a      	ldr	r3, [pc, #104]	; (8018598 <RegionEU868InitDefaults+0x124>)
 801852e:	2201      	movs	r2, #1
 8018530:	0018      	movs	r0, r3
 8018532:	f7ff f897 	bl	8017664 <RegionCommonChanMaskCopy>
            break;
 8018536:	e01e      	b.n	8018576 <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8018538:	4a12      	ldr	r2, [pc, #72]	; (8018584 <RegionEU868InitDefaults+0x110>)
 801853a:	239c      	movs	r3, #156	; 0x9c
 801853c:	005b      	lsls	r3, r3, #1
 801853e:	5ad2      	ldrh	r2, [r2, r3]
 8018540:	4910      	ldr	r1, [pc, #64]	; (8018584 <RegionEU868InitDefaults+0x110>)
 8018542:	239d      	movs	r3, #157	; 0x9d
 8018544:	005b      	lsls	r3, r3, #1
 8018546:	5acb      	ldrh	r3, [r1, r3]
 8018548:	4313      	orrs	r3, r2
 801854a:	b299      	uxth	r1, r3
 801854c:	4a0d      	ldr	r2, [pc, #52]	; (8018584 <RegionEU868InitDefaults+0x110>)
 801854e:	239c      	movs	r3, #156	; 0x9c
 8018550:	005b      	lsls	r3, r3, #1
 8018552:	52d1      	strh	r1, [r2, r3]
            break;
 8018554:	e00f      	b.n	8018576 <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d00a      	beq.n	8018574 <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	6819      	ldr	r1, [r3, #0]
 8018562:	239e      	movs	r3, #158	; 0x9e
 8018564:	005a      	lsls	r2, r3, #1
 8018566:	4b07      	ldr	r3, [pc, #28]	; (8018584 <RegionEU868InitDefaults+0x110>)
 8018568:	0018      	movs	r0, r3
 801856a:	f001 f855 	bl	8019618 <memcpy1>
            break;
 801856e:	e001      	b.n	8018574 <RegionEU868InitDefaults+0x100>
            break;
 8018570:	46c0      	nop			; (mov r8, r8)
 8018572:	e000      	b.n	8018576 <RegionEU868InitDefaults+0x102>
            break;
 8018574:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018576:	46c0      	nop			; (mov r8, r8)
 8018578:	46bd      	mov	sp, r7
 801857a:	b02b      	add	sp, #172	; 0xac
 801857c:	bd90      	pop	{r4, r7, pc}
 801857e:	46c0      	nop			; (mov r8, r8)
 8018580:	20000e04 	.word	0x20000e04
 8018584:	20000d44 	.word	0x20000d44
 8018588:	0801fd18 	.word	0x0801fd18
 801858c:	0801fd24 	.word	0x0801fd24
 8018590:	0801fd30 	.word	0x0801fd30
 8018594:	20000e7e 	.word	0x20000e7e
 8018598:	20000e7c 	.word	0x20000e7c

0801859c <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b082      	sub	sp, #8
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	229e      	movs	r2, #158	; 0x9e
 80185a8:	0052      	lsls	r2, r2, #1
 80185aa:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 80185ac:	4b02      	ldr	r3, [pc, #8]	; (80185b8 <RegionEU868GetNvmCtx+0x1c>)
}
 80185ae:	0018      	movs	r0, r3
 80185b0:	46bd      	mov	sp, r7
 80185b2:	b002      	add	sp, #8
 80185b4:	bd80      	pop	{r7, pc}
 80185b6:	46c0      	nop			; (mov r8, r8)
 80185b8:	20000d44 	.word	0x20000d44

080185bc <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b084      	sub	sp, #16
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
 80185c4:	000a      	movs	r2, r1
 80185c6:	1cfb      	adds	r3, r7, #3
 80185c8:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 80185ca:	1cfb      	adds	r3, r7, #3
 80185cc:	781b      	ldrb	r3, [r3, #0]
 80185ce:	2b0f      	cmp	r3, #15
 80185d0:	d847      	bhi.n	8018662 <RegionEU868Verify+0xa6>
 80185d2:	009a      	lsls	r2, r3, #2
 80185d4:	4b25      	ldr	r3, [pc, #148]	; (801866c <RegionEU868Verify+0xb0>)
 80185d6:	18d3      	adds	r3, r2, r3
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80185dc:	210f      	movs	r1, #15
 80185de:	187b      	adds	r3, r7, r1
 80185e0:	2200      	movs	r2, #0
 80185e2:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	187a      	adds	r2, r7, r1
 80185ea:	0011      	movs	r1, r2
 80185ec:	0018      	movs	r0, r3
 80185ee:	f7ff fd1f 	bl	8018030 <VerifyRfFreq>
 80185f2:	0003      	movs	r3, r0
 80185f4:	e036      	b.n	8018664 <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	b25b      	sxtb	r3, r3
 80185fc:	2207      	movs	r2, #7
 80185fe:	2100      	movs	r1, #0
 8018600:	0018      	movs	r0, r3
 8018602:	f7fe ff86 	bl	8017512 <RegionCommonValueInRange>
 8018606:	0003      	movs	r3, r0
 8018608:	1e5a      	subs	r2, r3, #1
 801860a:	4193      	sbcs	r3, r2
 801860c:	b2db      	uxtb	r3, r3
 801860e:	e029      	b.n	8018664 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	781b      	ldrb	r3, [r3, #0]
 8018614:	b25b      	sxtb	r3, r3
 8018616:	2205      	movs	r2, #5
 8018618:	2100      	movs	r1, #0
 801861a:	0018      	movs	r0, r3
 801861c:	f7fe ff79 	bl	8017512 <RegionCommonValueInRange>
 8018620:	0003      	movs	r3, r0
 8018622:	1e5a      	subs	r2, r3, #1
 8018624:	4193      	sbcs	r3, r2
 8018626:	b2db      	uxtb	r3, r3
 8018628:	e01c      	b.n	8018664 <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	781b      	ldrb	r3, [r3, #0]
 801862e:	b25b      	sxtb	r3, r3
 8018630:	2207      	movs	r2, #7
 8018632:	2100      	movs	r1, #0
 8018634:	0018      	movs	r0, r3
 8018636:	f7fe ff6c 	bl	8017512 <RegionCommonValueInRange>
 801863a:	0003      	movs	r3, r0
 801863c:	1e5a      	subs	r2, r3, #1
 801863e:	4193      	sbcs	r3, r2
 8018640:	b2db      	uxtb	r3, r3
 8018642:	e00f      	b.n	8018664 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	781b      	ldrb	r3, [r3, #0]
 8018648:	b25b      	sxtb	r3, r3
 801864a:	2200      	movs	r2, #0
 801864c:	2100      	movs	r1, #0
 801864e:	0018      	movs	r0, r3
 8018650:	f7fe ff5f 	bl	8017512 <RegionCommonValueInRange>
 8018654:	0003      	movs	r3, r0
 8018656:	1e5a      	subs	r2, r3, #1
 8018658:	4193      	sbcs	r3, r2
 801865a:	b2db      	uxtb	r3, r3
 801865c:	e002      	b.n	8018664 <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801865e:	2301      	movs	r3, #1
 8018660:	e000      	b.n	8018664 <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 8018662:	2300      	movs	r3, #0
    }
}
 8018664:	0018      	movs	r0, r3
 8018666:	46bd      	mov	sp, r7
 8018668:	b004      	add	sp, #16
 801866a:	bd80      	pop	{r7, pc}
 801866c:	0801fd3c 	.word	0x0801fd3c

08018670 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018670:	b590      	push	{r4, r7, lr}
 8018672:	b08b      	sub	sp, #44	; 0x2c
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018678:	2318      	movs	r3, #24
 801867a:	18fb      	adds	r3, r7, r3
 801867c:	2250      	movs	r2, #80	; 0x50
 801867e:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	791b      	ldrb	r3, [r3, #4]
 8018684:	2b10      	cmp	r3, #16
 8018686:	d000      	beq.n	801868a <RegionEU868ApplyCFList+0x1a>
 8018688:	e07c      	b.n	8018784 <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	330f      	adds	r3, #15
 8018690:	781b      	ldrb	r3, [r3, #0]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d000      	beq.n	8018698 <RegionEU868ApplyCFList+0x28>
 8018696:	e077      	b.n	8018788 <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018698:	2327      	movs	r3, #39	; 0x27
 801869a:	18fb      	adds	r3, r7, r3
 801869c:	2200      	movs	r2, #0
 801869e:	701a      	strb	r2, [r3, #0]
 80186a0:	2326      	movs	r3, #38	; 0x26
 80186a2:	18fb      	adds	r3, r7, r3
 80186a4:	2203      	movs	r2, #3
 80186a6:	701a      	strb	r2, [r3, #0]
 80186a8:	e066      	b.n	8018778 <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80186aa:	2326      	movs	r3, #38	; 0x26
 80186ac:	18fb      	adds	r3, r7, r3
 80186ae:	781b      	ldrb	r3, [r3, #0]
 80186b0:	2b07      	cmp	r3, #7
 80186b2:	d82e      	bhi.n	8018712 <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681a      	ldr	r2, [r3, #0]
 80186b8:	2427      	movs	r4, #39	; 0x27
 80186ba:	193b      	adds	r3, r7, r4
 80186bc:	781b      	ldrb	r3, [r3, #0]
 80186be:	18d3      	adds	r3, r2, r3
 80186c0:	781b      	ldrb	r3, [r3, #0]
 80186c2:	001a      	movs	r2, r3
 80186c4:	2018      	movs	r0, #24
 80186c6:	183b      	adds	r3, r7, r0
 80186c8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80186ca:	183b      	adds	r3, r7, r0
 80186cc:	681a      	ldr	r2, [r3, #0]
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	6819      	ldr	r1, [r3, #0]
 80186d2:	193b      	adds	r3, r7, r4
 80186d4:	781b      	ldrb	r3, [r3, #0]
 80186d6:	3301      	adds	r3, #1
 80186d8:	18cb      	adds	r3, r1, r3
 80186da:	781b      	ldrb	r3, [r3, #0]
 80186dc:	021b      	lsls	r3, r3, #8
 80186de:	431a      	orrs	r2, r3
 80186e0:	183b      	adds	r3, r7, r0
 80186e2:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80186e4:	183b      	adds	r3, r7, r0
 80186e6:	681a      	ldr	r2, [r3, #0]
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	6819      	ldr	r1, [r3, #0]
 80186ec:	193b      	adds	r3, r7, r4
 80186ee:	781b      	ldrb	r3, [r3, #0]
 80186f0:	3302      	adds	r3, #2
 80186f2:	18cb      	adds	r3, r1, r3
 80186f4:	781b      	ldrb	r3, [r3, #0]
 80186f6:	041b      	lsls	r3, r3, #16
 80186f8:	431a      	orrs	r2, r3
 80186fa:	183b      	adds	r3, r7, r0
 80186fc:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80186fe:	183b      	adds	r3, r7, r0
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	2264      	movs	r2, #100	; 0x64
 8018704:	435a      	muls	r2, r3
 8018706:	183b      	adds	r3, r7, r0
 8018708:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801870a:	183b      	adds	r3, r7, r0
 801870c:	2200      	movs	r2, #0
 801870e:	605a      	str	r2, [r3, #4]
 8018710:	e009      	b.n	8018726 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8018712:	2118      	movs	r1, #24
 8018714:	187b      	adds	r3, r7, r1
 8018716:	2200      	movs	r2, #0
 8018718:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 801871a:	187b      	adds	r3, r7, r1
 801871c:	2200      	movs	r2, #0
 801871e:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8018720:	187b      	adds	r3, r7, r1
 8018722:	2200      	movs	r2, #0
 8018724:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8018726:	2218      	movs	r2, #24
 8018728:	18bb      	adds	r3, r7, r2
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d00d      	beq.n	801874c <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 8018730:	2110      	movs	r1, #16
 8018732:	187b      	adds	r3, r7, r1
 8018734:	18ba      	adds	r2, r7, r2
 8018736:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8018738:	187b      	adds	r3, r7, r1
 801873a:	2226      	movs	r2, #38	; 0x26
 801873c:	18ba      	adds	r2, r7, r2
 801873e:	7812      	ldrb	r2, [r2, #0]
 8018740:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018742:	187b      	adds	r3, r7, r1
 8018744:	0018      	movs	r0, r3
 8018746:	f000 fdb5 	bl	80192b4 <RegionEU868ChannelAdd>
 801874a:	e009      	b.n	8018760 <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801874c:	210c      	movs	r1, #12
 801874e:	187b      	adds	r3, r7, r1
 8018750:	2226      	movs	r2, #38	; 0x26
 8018752:	18ba      	adds	r2, r7, r2
 8018754:	7812      	ldrb	r2, [r2, #0]
 8018756:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8018758:	187b      	adds	r3, r7, r1
 801875a:	0018      	movs	r0, r3
 801875c:	f000 fe6e 	bl	801943c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018760:	2227      	movs	r2, #39	; 0x27
 8018762:	18bb      	adds	r3, r7, r2
 8018764:	18ba      	adds	r2, r7, r2
 8018766:	7812      	ldrb	r2, [r2, #0]
 8018768:	3203      	adds	r2, #3
 801876a:	701a      	strb	r2, [r3, #0]
 801876c:	2126      	movs	r1, #38	; 0x26
 801876e:	187b      	adds	r3, r7, r1
 8018770:	781a      	ldrb	r2, [r3, #0]
 8018772:	187b      	adds	r3, r7, r1
 8018774:	3201      	adds	r2, #1
 8018776:	701a      	strb	r2, [r3, #0]
 8018778:	2326      	movs	r3, #38	; 0x26
 801877a:	18fb      	adds	r3, r7, r3
 801877c:	781b      	ldrb	r3, [r3, #0]
 801877e:	2b0f      	cmp	r3, #15
 8018780:	d993      	bls.n	80186aa <RegionEU868ApplyCFList+0x3a>
 8018782:	e002      	b.n	801878a <RegionEU868ApplyCFList+0x11a>
        return;
 8018784:	46c0      	nop			; (mov r8, r8)
 8018786:	e000      	b.n	801878a <RegionEU868ApplyCFList+0x11a>
        return;
 8018788:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801878a:	46bd      	mov	sp, r7
 801878c:	b00b      	add	sp, #44	; 0x2c
 801878e:	bd90      	pop	{r4, r7, pc}

08018790 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018790:	b580      	push	{r7, lr}
 8018792:	b082      	sub	sp, #8
 8018794:	af00      	add	r7, sp, #0
 8018796:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	791b      	ldrb	r3, [r3, #4]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d002      	beq.n	80187a6 <RegionEU868ChanMaskSet+0x16>
 80187a0:	2b01      	cmp	r3, #1
 80187a2:	d008      	beq.n	80187b6 <RegionEU868ChanMaskSet+0x26>
 80187a4:	e00f      	b.n	80187c6 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	6819      	ldr	r1, [r3, #0]
 80187aa:	4b0a      	ldr	r3, [pc, #40]	; (80187d4 <RegionEU868ChanMaskSet+0x44>)
 80187ac:	2201      	movs	r2, #1
 80187ae:	0018      	movs	r0, r3
 80187b0:	f7fe ff58 	bl	8017664 <RegionCommonChanMaskCopy>
            break;
 80187b4:	e009      	b.n	80187ca <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	6819      	ldr	r1, [r3, #0]
 80187ba:	4b07      	ldr	r3, [pc, #28]	; (80187d8 <RegionEU868ChanMaskSet+0x48>)
 80187bc:	2201      	movs	r2, #1
 80187be:	0018      	movs	r0, r3
 80187c0:	f7fe ff50 	bl	8017664 <RegionCommonChanMaskCopy>
            break;
 80187c4:	e001      	b.n	80187ca <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 80187c6:	2300      	movs	r3, #0
 80187c8:	e000      	b.n	80187cc <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 80187ca:	2301      	movs	r3, #1
}
 80187cc:	0018      	movs	r0, r3
 80187ce:	46bd      	mov	sp, r7
 80187d0:	b002      	add	sp, #8
 80187d2:	bd80      	pop	{r7, pc}
 80187d4:	20000e7c 	.word	0x20000e7c
 80187d8:	20000e7e 	.word	0x20000e7e

080187dc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80187dc:	b5b0      	push	{r4, r5, r7, lr}
 80187de:	b088      	sub	sp, #32
 80187e0:	af02      	add	r7, sp, #8
 80187e2:	60ba      	str	r2, [r7, #8]
 80187e4:	607b      	str	r3, [r7, #4]
 80187e6:	240f      	movs	r4, #15
 80187e8:	193b      	adds	r3, r7, r4
 80187ea:	1c02      	adds	r2, r0, #0
 80187ec:	701a      	strb	r2, [r3, #0]
 80187ee:	230e      	movs	r3, #14
 80187f0:	18fb      	adds	r3, r7, r3
 80187f2:	1c0a      	adds	r2, r1, #0
 80187f4:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 80187f6:	2300      	movs	r3, #0
 80187f8:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80187fa:	193b      	adds	r3, r7, r4
 80187fc:	781b      	ldrb	r3, [r3, #0]
 80187fe:	b25a      	sxtb	r2, r3
 8018800:	2a07      	cmp	r2, #7
 8018802:	dd00      	ble.n	8018806 <RegionEU868ComputeRxWindowParameters+0x2a>
 8018804:	2307      	movs	r3, #7
 8018806:	b25a      	sxtb	r2, r3
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	785b      	ldrb	r3, [r3, #1]
 8018810:	b25b      	sxtb	r3, r3
 8018812:	0018      	movs	r0, r3
 8018814:	f7ff fbc6 	bl	8017fa4 <GetBandwidth>
 8018818:	0003      	movs	r3, r0
 801881a:	b2da      	uxtb	r2, r3
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	785b      	ldrb	r3, [r3, #1]
 8018824:	b25b      	sxtb	r3, r3
 8018826:	2b07      	cmp	r3, #7
 8018828:	d10b      	bne.n	8018842 <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	785b      	ldrb	r3, [r3, #1]
 801882e:	b25b      	sxtb	r3, r3
 8018830:	001a      	movs	r2, r3
 8018832:	4b18      	ldr	r3, [pc, #96]	; (8018894 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8018834:	5c9b      	ldrb	r3, [r3, r2]
 8018836:	0018      	movs	r0, r3
 8018838:	f7ff f954 	bl	8017ae4 <RegionCommonComputeSymbolTimeFsk>
 801883c:	0003      	movs	r3, r0
 801883e:	617b      	str	r3, [r7, #20]
 8018840:	e011      	b.n	8018866 <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	785b      	ldrb	r3, [r3, #1]
 8018846:	b25b      	sxtb	r3, r3
 8018848:	001a      	movs	r2, r3
 801884a:	4b12      	ldr	r3, [pc, #72]	; (8018894 <RegionEU868ComputeRxWindowParameters+0xb8>)
 801884c:	5c98      	ldrb	r0, [r3, r2]
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	785b      	ldrb	r3, [r3, #1]
 8018852:	b25b      	sxtb	r3, r3
 8018854:	001a      	movs	r2, r3
 8018856:	4b10      	ldr	r3, [pc, #64]	; (8018898 <RegionEU868ComputeRxWindowParameters+0xbc>)
 8018858:	0092      	lsls	r2, r2, #2
 801885a:	58d3      	ldr	r3, [r2, r3]
 801885c:	0019      	movs	r1, r3
 801885e:	f7ff f929 	bl	8017ab4 <RegionCommonComputeSymbolTimeLoRa>
 8018862:	0003      	movs	r3, r0
 8018864:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018866:	4b0d      	ldr	r3, [pc, #52]	; (801889c <RegionEU868ComputeRxWindowParameters+0xc0>)
 8018868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801886a:	4798      	blx	r3
 801886c:	0005      	movs	r5, r0
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	3308      	adds	r3, #8
 8018872:	687a      	ldr	r2, [r7, #4]
 8018874:	320c      	adds	r2, #12
 8018876:	68bc      	ldr	r4, [r7, #8]
 8018878:	210e      	movs	r1, #14
 801887a:	1879      	adds	r1, r7, r1
 801887c:	7809      	ldrb	r1, [r1, #0]
 801887e:	6978      	ldr	r0, [r7, #20]
 8018880:	9201      	str	r2, [sp, #4]
 8018882:	9300      	str	r3, [sp, #0]
 8018884:	002b      	movs	r3, r5
 8018886:	0022      	movs	r2, r4
 8018888:	f7ff f93a 	bl	8017b00 <RegionCommonComputeRxWindowParameters>
}
 801888c:	46c0      	nop			; (mov r8, r8)
 801888e:	46bd      	mov	sp, r7
 8018890:	b006      	add	sp, #24
 8018892:	bdb0      	pop	{r4, r5, r7, pc}
 8018894:	0801fbf8 	.word	0x0801fbf8
 8018898:	0801fc00 	.word	0x0801fc00
 801889c:	0801fd7c 	.word	0x0801fd7c

080188a0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80188a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188a2:	b091      	sub	sp, #68	; 0x44
 80188a4:	af0a      	add	r7, sp, #40	; 0x28
 80188a6:	6078      	str	r0, [r7, #4]
 80188a8:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80188aa:	230f      	movs	r3, #15
 80188ac:	18fb      	adds	r3, r7, r3
 80188ae:	687a      	ldr	r2, [r7, #4]
 80188b0:	7852      	ldrb	r2, [r2, #1]
 80188b2:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 80188b4:	2316      	movs	r3, #22
 80188b6:	18fb      	adds	r3, r7, r3
 80188b8:	2200      	movs	r2, #0
 80188ba:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 80188bc:	230e      	movs	r3, #14
 80188be:	18fb      	adds	r3, r7, r3
 80188c0:	2200      	movs	r2, #0
 80188c2:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	685b      	ldr	r3, [r3, #4]
 80188c8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80188ca:	4b68      	ldr	r3, [pc, #416]	; (8018a6c <RegionEU868RxConfig+0x1cc>)
 80188cc:	685b      	ldr	r3, [r3, #4]
 80188ce:	4798      	blx	r3
 80188d0:	1e03      	subs	r3, r0, #0
 80188d2:	d001      	beq.n	80188d8 <RegionEU868RxConfig+0x38>
    {
        return false;
 80188d4:	2300      	movs	r3, #0
 80188d6:	e0c4      	b.n	8018a62 <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	7cdb      	ldrb	r3, [r3, #19]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d122      	bne.n	8018926 <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	781b      	ldrb	r3, [r3, #0]
 80188e4:	0019      	movs	r1, r3
 80188e6:	4a62      	ldr	r2, [pc, #392]	; (8018a70 <RegionEU868RxConfig+0x1d0>)
 80188e8:	000b      	movs	r3, r1
 80188ea:	005b      	lsls	r3, r3, #1
 80188ec:	185b      	adds	r3, r3, r1
 80188ee:	009b      	lsls	r3, r3, #2
 80188f0:	589b      	ldr	r3, [r3, r2]
 80188f2:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	781b      	ldrb	r3, [r3, #0]
 80188f8:	0019      	movs	r1, r3
 80188fa:	4a5d      	ldr	r2, [pc, #372]	; (8018a70 <RegionEU868RxConfig+0x1d0>)
 80188fc:	000b      	movs	r3, r1
 80188fe:	005b      	lsls	r3, r3, #1
 8018900:	185b      	adds	r3, r3, r1
 8018902:	009b      	lsls	r3, r3, #2
 8018904:	18d3      	adds	r3, r2, r3
 8018906:	3304      	adds	r3, #4
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d00b      	beq.n	8018926 <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	781b      	ldrb	r3, [r3, #0]
 8018912:	0019      	movs	r1, r3
 8018914:	4a56      	ldr	r2, [pc, #344]	; (8018a70 <RegionEU868RxConfig+0x1d0>)
 8018916:	000b      	movs	r3, r1
 8018918:	005b      	lsls	r3, r3, #1
 801891a:	185b      	adds	r3, r3, r1
 801891c:	009b      	lsls	r3, r3, #2
 801891e:	18d3      	adds	r3, r2, r3
 8018920:	3304      	adds	r3, #4
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018926:	240f      	movs	r4, #15
 8018928:	193b      	adds	r3, r7, r4
 801892a:	781b      	ldrb	r3, [r3, #0]
 801892c:	b25b      	sxtb	r3, r3
 801892e:	4a51      	ldr	r2, [pc, #324]	; (8018a74 <RegionEU868RxConfig+0x1d4>)
 8018930:	5cd2      	ldrb	r2, [r2, r3]
 8018932:	250e      	movs	r5, #14
 8018934:	197b      	adds	r3, r7, r5
 8018936:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8018938:	4b4c      	ldr	r3, [pc, #304]	; (8018a6c <RegionEU868RxConfig+0x1cc>)
 801893a:	68db      	ldr	r3, [r3, #12]
 801893c:	693a      	ldr	r2, [r7, #16]
 801893e:	0010      	movs	r0, r2
 8018940:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018942:	193b      	adds	r3, r7, r4
 8018944:	781b      	ldrb	r3, [r3, #0]
 8018946:	b25b      	sxtb	r3, r3
 8018948:	2b07      	cmp	r3, #7
 801894a:	d12e      	bne.n	80189aa <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 801894c:	2117      	movs	r1, #23
 801894e:	187b      	adds	r3, r7, r1
 8018950:	2200      	movs	r2, #0
 8018952:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018954:	4b45      	ldr	r3, [pc, #276]	; (8018a6c <RegionEU868RxConfig+0x1cc>)
 8018956:	699c      	ldr	r4, [r3, #24]
 8018958:	197b      	adds	r3, r7, r5
 801895a:	2200      	movs	r2, #0
 801895c:	569a      	ldrsb	r2, [r3, r2]
 801895e:	0013      	movs	r3, r2
 8018960:	015b      	lsls	r3, r3, #5
 8018962:	1a9b      	subs	r3, r3, r2
 8018964:	009b      	lsls	r3, r3, #2
 8018966:	189b      	adds	r3, r3, r2
 8018968:	00db      	lsls	r3, r3, #3
 801896a:	001e      	movs	r6, r3
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	689b      	ldr	r3, [r3, #8]
 8018970:	b29b      	uxth	r3, r3
 8018972:	687a      	ldr	r2, [r7, #4]
 8018974:	7c92      	ldrb	r2, [r2, #18]
 8018976:	4d40      	ldr	r5, [pc, #256]	; (8018a78 <RegionEU868RxConfig+0x1d8>)
 8018978:	1879      	adds	r1, r7, r1
 801897a:	7808      	ldrb	r0, [r1, #0]
 801897c:	9209      	str	r2, [sp, #36]	; 0x24
 801897e:	2200      	movs	r2, #0
 8018980:	9208      	str	r2, [sp, #32]
 8018982:	2200      	movs	r2, #0
 8018984:	9207      	str	r2, [sp, #28]
 8018986:	2200      	movs	r2, #0
 8018988:	9206      	str	r2, [sp, #24]
 801898a:	2201      	movs	r2, #1
 801898c:	9205      	str	r2, [sp, #20]
 801898e:	2200      	movs	r2, #0
 8018990:	9204      	str	r2, [sp, #16]
 8018992:	2200      	movs	r2, #0
 8018994:	9203      	str	r2, [sp, #12]
 8018996:	9302      	str	r3, [sp, #8]
 8018998:	2305      	movs	r3, #5
 801899a:	9301      	str	r3, [sp, #4]
 801899c:	4b37      	ldr	r3, [pc, #220]	; (8018a7c <RegionEU868RxConfig+0x1dc>)
 801899e:	9300      	str	r3, [sp, #0]
 80189a0:	2300      	movs	r3, #0
 80189a2:	0032      	movs	r2, r6
 80189a4:	0029      	movs	r1, r5
 80189a6:	47a0      	blx	r4
 80189a8:	e029      	b.n	80189fe <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 80189aa:	2117      	movs	r1, #23
 80189ac:	187b      	adds	r3, r7, r1
 80189ae:	2201      	movs	r2, #1
 80189b0:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80189b2:	4b2e      	ldr	r3, [pc, #184]	; (8018a6c <RegionEU868RxConfig+0x1cc>)
 80189b4:	699c      	ldr	r4, [r3, #24]
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	789b      	ldrb	r3, [r3, #2]
 80189ba:	001e      	movs	r6, r3
 80189bc:	230e      	movs	r3, #14
 80189be:	18fb      	adds	r3, r7, r3
 80189c0:	2500      	movs	r5, #0
 80189c2:	575d      	ldrsb	r5, [r3, r5]
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	689b      	ldr	r3, [r3, #8]
 80189c8:	b29b      	uxth	r3, r3
 80189ca:	687a      	ldr	r2, [r7, #4]
 80189cc:	7c92      	ldrb	r2, [r2, #18]
 80189ce:	1879      	adds	r1, r7, r1
 80189d0:	7808      	ldrb	r0, [r1, #0]
 80189d2:	9209      	str	r2, [sp, #36]	; 0x24
 80189d4:	2201      	movs	r2, #1
 80189d6:	9208      	str	r2, [sp, #32]
 80189d8:	2200      	movs	r2, #0
 80189da:	9207      	str	r2, [sp, #28]
 80189dc:	2200      	movs	r2, #0
 80189de:	9206      	str	r2, [sp, #24]
 80189e0:	2200      	movs	r2, #0
 80189e2:	9205      	str	r2, [sp, #20]
 80189e4:	2200      	movs	r2, #0
 80189e6:	9204      	str	r2, [sp, #16]
 80189e8:	2200      	movs	r2, #0
 80189ea:	9203      	str	r2, [sp, #12]
 80189ec:	9302      	str	r3, [sp, #8]
 80189ee:	2308      	movs	r3, #8
 80189f0:	9301      	str	r3, [sp, #4]
 80189f2:	2300      	movs	r3, #0
 80189f4:	9300      	str	r3, [sp, #0]
 80189f6:	2301      	movs	r3, #1
 80189f8:	002a      	movs	r2, r5
 80189fa:	0031      	movs	r1, r6
 80189fc:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	7c5b      	ldrb	r3, [r3, #17]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d009      	beq.n	8018a1a <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8018a06:	230f      	movs	r3, #15
 8018a08:	18fb      	adds	r3, r7, r3
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	569a      	ldrsb	r2, [r3, r2]
 8018a0e:	2316      	movs	r3, #22
 8018a10:	18fb      	adds	r3, r7, r3
 8018a12:	491b      	ldr	r1, [pc, #108]	; (8018a80 <RegionEU868RxConfig+0x1e0>)
 8018a14:	5c8a      	ldrb	r2, [r1, r2]
 8018a16:	701a      	strb	r2, [r3, #0]
 8018a18:	e008      	b.n	8018a2c <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8018a1a:	230f      	movs	r3, #15
 8018a1c:	18fb      	adds	r3, r7, r3
 8018a1e:	2200      	movs	r2, #0
 8018a20:	569a      	ldrsb	r2, [r3, r2]
 8018a22:	2316      	movs	r3, #22
 8018a24:	18fb      	adds	r3, r7, r3
 8018a26:	4917      	ldr	r1, [pc, #92]	; (8018a84 <RegionEU868RxConfig+0x1e4>)
 8018a28:	5c8a      	ldrb	r2, [r1, r2]
 8018a2a:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018a2c:	4b0f      	ldr	r3, [pc, #60]	; (8018a6c <RegionEU868RxConfig+0x1cc>)
 8018a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018a30:	2216      	movs	r2, #22
 8018a32:	18ba      	adds	r2, r7, r2
 8018a34:	7812      	ldrb	r2, [r2, #0]
 8018a36:	320d      	adds	r2, #13
 8018a38:	b2d1      	uxtb	r1, r2
 8018a3a:	2217      	movs	r2, #23
 8018a3c:	18ba      	adds	r2, r7, r2
 8018a3e:	7812      	ldrb	r2, [r2, #0]
 8018a40:	0010      	movs	r0, r2
 8018a42:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	7cd8      	ldrb	r0, [r3, #19]
 8018a48:	240f      	movs	r4, #15
 8018a4a:	193b      	adds	r3, r7, r4
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	569a      	ldrsb	r2, [r3, r2]
 8018a50:	693b      	ldr	r3, [r7, #16]
 8018a52:	0019      	movs	r1, r3
 8018a54:	f7ff fa32 	bl	8017ebc <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8018a58:	683b      	ldr	r3, [r7, #0]
 8018a5a:	193a      	adds	r2, r7, r4
 8018a5c:	7812      	ldrb	r2, [r2, #0]
 8018a5e:	701a      	strb	r2, [r3, #0]
    return true;
 8018a60:	2301      	movs	r3, #1
}
 8018a62:	0018      	movs	r0, r3
 8018a64:	46bd      	mov	sp, r7
 8018a66:	b007      	add	sp, #28
 8018a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a6a:	46c0      	nop			; (mov r8, r8)
 8018a6c:	0801fd7c 	.word	0x0801fd7c
 8018a70:	20000d44 	.word	0x20000d44
 8018a74:	0801fbf8 	.word	0x0801fbf8
 8018a78:	0000c350 	.word	0x0000c350
 8018a7c:	00014585 	.word	0x00014585
 8018a80:	0801fc28 	.word	0x0801fc28
 8018a84:	0801fc20 	.word	0x0801fc20

08018a88 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a8a:	b093      	sub	sp, #76	; 0x4c
 8018a8c:	af0a      	add	r7, sp, #40	; 0x28
 8018a8e:	60f8      	str	r0, [r7, #12]
 8018a90:	60b9      	str	r1, [r7, #8]
 8018a92:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	785b      	ldrb	r3, [r3, #1]
 8018a98:	b25b      	sxtb	r3, r3
 8018a9a:	001a      	movs	r2, r3
 8018a9c:	4b6b      	ldr	r3, [pc, #428]	; (8018c4c <RegionEU868TxConfig+0x1c4>)
 8018a9e:	5c9a      	ldrb	r2, [r3, r2]
 8018aa0:	251e      	movs	r5, #30
 8018aa2:	197b      	adds	r3, r7, r5
 8018aa4:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	2002      	movs	r0, #2
 8018aaa:	5618      	ldrsb	r0, [r3, r0]
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	781b      	ldrb	r3, [r3, #0]
 8018ab0:	0019      	movs	r1, r3
 8018ab2:	4a67      	ldr	r2, [pc, #412]	; (8018c50 <RegionEU868TxConfig+0x1c8>)
 8018ab4:	000b      	movs	r3, r1
 8018ab6:	005b      	lsls	r3, r3, #1
 8018ab8:	185b      	adds	r3, r3, r1
 8018aba:	009b      	lsls	r3, r3, #2
 8018abc:	18d3      	adds	r3, r2, r3
 8018abe:	3309      	adds	r3, #9
 8018ac0:	781b      	ldrb	r3, [r3, #0]
 8018ac2:	001c      	movs	r4, r3
 8018ac4:	4a62      	ldr	r2, [pc, #392]	; (8018c50 <RegionEU868TxConfig+0x1c8>)
 8018ac6:	21c2      	movs	r1, #194	; 0xc2
 8018ac8:	0023      	movs	r3, r4
 8018aca:	009b      	lsls	r3, r3, #2
 8018acc:	191b      	adds	r3, r3, r4
 8018ace:	009b      	lsls	r3, r3, #2
 8018ad0:	18d3      	adds	r3, r2, r3
 8018ad2:	185b      	adds	r3, r3, r1
 8018ad4:	2100      	movs	r1, #0
 8018ad6:	5659      	ldrsb	r1, [r3, r1]
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	2201      	movs	r2, #1
 8018adc:	569a      	ldrsb	r2, [r3, r2]
 8018ade:	261d      	movs	r6, #29
 8018ae0:	19bc      	adds	r4, r7, r6
 8018ae2:	4b5c      	ldr	r3, [pc, #368]	; (8018c54 <RegionEU868TxConfig+0x1cc>)
 8018ae4:	f7ff fa7c 	bl	8017fe0 <LimitTxPower>
 8018ae8:	0003      	movs	r3, r0
 8018aea:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	785b      	ldrb	r3, [r3, #1]
 8018af0:	b25b      	sxtb	r3, r3
 8018af2:	0018      	movs	r0, r3
 8018af4:	f7ff fa56 	bl	8017fa4 <GetBandwidth>
 8018af8:	0003      	movs	r3, r0
 8018afa:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8018afc:	2017      	movs	r0, #23
 8018afe:	183b      	adds	r3, r7, r0
 8018b00:	2200      	movs	r2, #0
 8018b02:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	6859      	ldr	r1, [r3, #4]
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	689a      	ldr	r2, [r3, #8]
 8018b0c:	183c      	adds	r4, r7, r0
 8018b0e:	19bb      	adds	r3, r7, r6
 8018b10:	781b      	ldrb	r3, [r3, #0]
 8018b12:	b25b      	sxtb	r3, r3
 8018b14:	0018      	movs	r0, r3
 8018b16:	f7ff f841 	bl	8017b9c <RegionCommonComputeTxPower>
 8018b1a:	0003      	movs	r3, r0
 8018b1c:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8018b1e:	4b4e      	ldr	r3, [pc, #312]	; (8018c58 <RegionEU868TxConfig+0x1d0>)
 8018b20:	68da      	ldr	r2, [r3, #12]
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	781b      	ldrb	r3, [r3, #0]
 8018b26:	0018      	movs	r0, r3
 8018b28:	4949      	ldr	r1, [pc, #292]	; (8018c50 <RegionEU868TxConfig+0x1c8>)
 8018b2a:	0003      	movs	r3, r0
 8018b2c:	005b      	lsls	r3, r3, #1
 8018b2e:	181b      	adds	r3, r3, r0
 8018b30:	009b      	lsls	r3, r3, #2
 8018b32:	585b      	ldr	r3, [r3, r1]
 8018b34:	0018      	movs	r0, r3
 8018b36:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	785b      	ldrb	r3, [r3, #1]
 8018b3c:	b25b      	sxtb	r3, r3
 8018b3e:	2b07      	cmp	r3, #7
 8018b40:	d12e      	bne.n	8018ba0 <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018b42:	231f      	movs	r3, #31
 8018b44:	18fb      	adds	r3, r7, r3
 8018b46:	2200      	movs	r2, #0
 8018b48:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018b4a:	4b43      	ldr	r3, [pc, #268]	; (8018c58 <RegionEU868TxConfig+0x1d0>)
 8018b4c:	69dc      	ldr	r4, [r3, #28]
 8018b4e:	197b      	adds	r3, r7, r5
 8018b50:	2200      	movs	r2, #0
 8018b52:	569a      	ldrsb	r2, [r3, r2]
 8018b54:	0013      	movs	r3, r2
 8018b56:	015b      	lsls	r3, r3, #5
 8018b58:	1a9b      	subs	r3, r3, r2
 8018b5a:	009b      	lsls	r3, r3, #2
 8018b5c:	189b      	adds	r3, r3, r2
 8018b5e:	00db      	lsls	r3, r3, #3
 8018b60:	001e      	movs	r6, r3
 8018b62:	69ba      	ldr	r2, [r7, #24]
 8018b64:	4d3d      	ldr	r5, [pc, #244]	; (8018c5c <RegionEU868TxConfig+0x1d4>)
 8018b66:	2017      	movs	r0, #23
 8018b68:	183b      	adds	r3, r7, r0
 8018b6a:	2100      	movs	r1, #0
 8018b6c:	5659      	ldrsb	r1, [r3, r1]
 8018b6e:	231f      	movs	r3, #31
 8018b70:	18fb      	adds	r3, r7, r3
 8018b72:	7818      	ldrb	r0, [r3, #0]
 8018b74:	23fa      	movs	r3, #250	; 0xfa
 8018b76:	011b      	lsls	r3, r3, #4
 8018b78:	9308      	str	r3, [sp, #32]
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	9307      	str	r3, [sp, #28]
 8018b7e:	2300      	movs	r3, #0
 8018b80:	9306      	str	r3, [sp, #24]
 8018b82:	2300      	movs	r3, #0
 8018b84:	9305      	str	r3, [sp, #20]
 8018b86:	2301      	movs	r3, #1
 8018b88:	9304      	str	r3, [sp, #16]
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	9303      	str	r3, [sp, #12]
 8018b8e:	2305      	movs	r3, #5
 8018b90:	9302      	str	r3, [sp, #8]
 8018b92:	2300      	movs	r3, #0
 8018b94:	9301      	str	r3, [sp, #4]
 8018b96:	9600      	str	r6, [sp, #0]
 8018b98:	0013      	movs	r3, r2
 8018b9a:	002a      	movs	r2, r5
 8018b9c:	47a0      	blx	r4
 8018b9e:	e025      	b.n	8018bec <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 8018ba0:	201f      	movs	r0, #31
 8018ba2:	183b      	adds	r3, r7, r0
 8018ba4:	2201      	movs	r2, #1
 8018ba6:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018ba8:	4b2b      	ldr	r3, [pc, #172]	; (8018c58 <RegionEU868TxConfig+0x1d0>)
 8018baa:	69dc      	ldr	r4, [r3, #28]
 8018bac:	231e      	movs	r3, #30
 8018bae:	18fb      	adds	r3, r7, r3
 8018bb0:	781b      	ldrb	r3, [r3, #0]
 8018bb2:	b25b      	sxtb	r3, r3
 8018bb4:	69bd      	ldr	r5, [r7, #24]
 8018bb6:	2217      	movs	r2, #23
 8018bb8:	18ba      	adds	r2, r7, r2
 8018bba:	2100      	movs	r1, #0
 8018bbc:	5651      	ldrsb	r1, [r2, r1]
 8018bbe:	183a      	adds	r2, r7, r0
 8018bc0:	7810      	ldrb	r0, [r2, #0]
 8018bc2:	22fa      	movs	r2, #250	; 0xfa
 8018bc4:	0112      	lsls	r2, r2, #4
 8018bc6:	9208      	str	r2, [sp, #32]
 8018bc8:	2200      	movs	r2, #0
 8018bca:	9207      	str	r2, [sp, #28]
 8018bcc:	2200      	movs	r2, #0
 8018bce:	9206      	str	r2, [sp, #24]
 8018bd0:	2200      	movs	r2, #0
 8018bd2:	9205      	str	r2, [sp, #20]
 8018bd4:	2201      	movs	r2, #1
 8018bd6:	9204      	str	r2, [sp, #16]
 8018bd8:	2200      	movs	r2, #0
 8018bda:	9203      	str	r2, [sp, #12]
 8018bdc:	2208      	movs	r2, #8
 8018bde:	9202      	str	r2, [sp, #8]
 8018be0:	2201      	movs	r2, #1
 8018be2:	9201      	str	r2, [sp, #4]
 8018be4:	9300      	str	r3, [sp, #0]
 8018be6:	002b      	movs	r3, r5
 8018be8:	2200      	movs	r2, #0
 8018bea:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	781b      	ldrb	r3, [r3, #0]
 8018bf0:	0019      	movs	r1, r3
 8018bf2:	4a17      	ldr	r2, [pc, #92]	; (8018c50 <RegionEU868TxConfig+0x1c8>)
 8018bf4:	000b      	movs	r3, r1
 8018bf6:	005b      	lsls	r3, r3, #1
 8018bf8:	185b      	adds	r3, r3, r1
 8018bfa:	009b      	lsls	r3, r3, #2
 8018bfc:	589a      	ldr	r2, [r3, r2]
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	785b      	ldrb	r3, [r3, #1]
 8018c02:	b25b      	sxtb	r3, r3
 8018c04:	0019      	movs	r1, r3
 8018c06:	0010      	movs	r0, r2
 8018c08:	f7ff f970 	bl	8017eec <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	2201      	movs	r2, #1
 8018c10:	569a      	ldrsb	r2, [r3, r2]
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	899b      	ldrh	r3, [r3, #12]
 8018c16:	0019      	movs	r1, r3
 8018c18:	0010      	movs	r0, r2
 8018c1a:	f7ff fa81 	bl	8018120 <GetTimeOnAir>
 8018c1e:	0002      	movs	r2, r0
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018c24:	4b0c      	ldr	r3, [pc, #48]	; (8018c58 <RegionEU868TxConfig+0x1d0>)
 8018c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018c28:	68fa      	ldr	r2, [r7, #12]
 8018c2a:	8992      	ldrh	r2, [r2, #12]
 8018c2c:	b2d1      	uxtb	r1, r2
 8018c2e:	221f      	movs	r2, #31
 8018c30:	18ba      	adds	r2, r7, r2
 8018c32:	7812      	ldrb	r2, [r2, #0]
 8018c34:	0010      	movs	r0, r2
 8018c36:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018c38:	68bb      	ldr	r3, [r7, #8]
 8018c3a:	221d      	movs	r2, #29
 8018c3c:	18ba      	adds	r2, r7, r2
 8018c3e:	7812      	ldrb	r2, [r2, #0]
 8018c40:	701a      	strb	r2, [r3, #0]
    return true;
 8018c42:	2301      	movs	r3, #1
}
 8018c44:	0018      	movs	r0, r3
 8018c46:	46bd      	mov	sp, r7
 8018c48:	b009      	add	sp, #36	; 0x24
 8018c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c4c:	0801fbf8 	.word	0x0801fbf8
 8018c50:	20000d44 	.word	0x20000d44
 8018c54:	20000e7c 	.word	0x20000e7c
 8018c58:	0801fd7c 	.word	0x0801fd7c
 8018c5c:	000061a8 	.word	0x000061a8

08018c60 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c62:	b093      	sub	sp, #76	; 0x4c
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	60f8      	str	r0, [r7, #12]
 8018c68:	60b9      	str	r1, [r7, #8]
 8018c6a:	607a      	str	r2, [r7, #4]
 8018c6c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018c6e:	2347      	movs	r3, #71	; 0x47
 8018c70:	18fb      	adds	r3, r7, r3
 8018c72:	2207      	movs	r2, #7
 8018c74:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018c76:	233c      	movs	r3, #60	; 0x3c
 8018c78:	18fb      	adds	r3, r7, r3
 8018c7a:	0018      	movs	r0, r3
 8018c7c:	2306      	movs	r3, #6
 8018c7e:	001a      	movs	r2, r3
 8018c80:	2100      	movs	r1, #0
 8018c82:	f005 fa26 	bl	801e0d2 <memset>
    uint8_t nextIndex = 0;
 8018c86:	2344      	movs	r3, #68	; 0x44
 8018c88:	18fb      	adds	r3, r7, r3
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8018c8e:	2346      	movs	r3, #70	; 0x46
 8018c90:	18fb      	adds	r3, r7, r3
 8018c92:	2200      	movs	r2, #0
 8018c94:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8018c96:	233a      	movs	r3, #58	; 0x3a
 8018c98:	18fb      	adds	r3, r7, r3
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018c9e:	e098      	b.n	8018dd2 <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	685a      	ldr	r2, [r3, #4]
 8018ca4:	2546      	movs	r5, #70	; 0x46
 8018ca6:	197b      	adds	r3, r7, r5
 8018ca8:	781b      	ldrb	r3, [r3, #0]
 8018caa:	18d3      	adds	r3, r2, r3
 8018cac:	2644      	movs	r6, #68	; 0x44
 8018cae:	19bc      	adds	r4, r7, r6
 8018cb0:	203c      	movs	r0, #60	; 0x3c
 8018cb2:	183a      	adds	r2, r7, r0
 8018cb4:	0011      	movs	r1, r2
 8018cb6:	0018      	movs	r0, r3
 8018cb8:	f7fe fe08 	bl	80178cc <RegionCommonParseLinkAdrReq>
 8018cbc:	0003      	movs	r3, r0
 8018cbe:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8018cc0:	0032      	movs	r2, r6
 8018cc2:	18bb      	adds	r3, r7, r2
 8018cc4:	781b      	ldrb	r3, [r3, #0]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d100      	bne.n	8018ccc <RegionEU868LinkAdrReq+0x6c>
 8018cca:	e08b      	b.n	8018de4 <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018ccc:	197b      	adds	r3, r7, r5
 8018cce:	1979      	adds	r1, r7, r5
 8018cd0:	18ba      	adds	r2, r7, r2
 8018cd2:	7809      	ldrb	r1, [r1, #0]
 8018cd4:	7812      	ldrb	r2, [r2, #0]
 8018cd6:	188a      	adds	r2, r1, r2
 8018cd8:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018cda:	2147      	movs	r1, #71	; 0x47
 8018cdc:	187b      	adds	r3, r7, r1
 8018cde:	2207      	movs	r2, #7
 8018ce0:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018ce2:	203c      	movs	r0, #60	; 0x3c
 8018ce4:	183b      	adds	r3, r7, r0
 8018ce6:	889a      	ldrh	r2, [r3, #4]
 8018ce8:	243a      	movs	r4, #58	; 0x3a
 8018cea:	193b      	adds	r3, r7, r4
 8018cec:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8018cee:	183b      	adds	r3, r7, r0
 8018cf0:	78db      	ldrb	r3, [r3, #3]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d10a      	bne.n	8018d0c <RegionEU868LinkAdrReq+0xac>
 8018cf6:	193b      	adds	r3, r7, r4
 8018cf8:	881b      	ldrh	r3, [r3, #0]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d106      	bne.n	8018d0c <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 8018cfe:	187b      	adds	r3, r7, r1
 8018d00:	187a      	adds	r2, r7, r1
 8018d02:	7812      	ldrb	r2, [r2, #0]
 8018d04:	2101      	movs	r1, #1
 8018d06:	438a      	bics	r2, r1
 8018d08:	701a      	strb	r2, [r3, #0]
 8018d0a:	e062      	b.n	8018dd2 <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018d0c:	223c      	movs	r2, #60	; 0x3c
 8018d0e:	18bb      	adds	r3, r7, r2
 8018d10:	78db      	ldrb	r3, [r3, #3]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d003      	beq.n	8018d1e <RegionEU868LinkAdrReq+0xbe>
 8018d16:	18bb      	adds	r3, r7, r2
 8018d18:	78db      	ldrb	r3, [r3, #3]
 8018d1a:	2b05      	cmp	r3, #5
 8018d1c:	d904      	bls.n	8018d28 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8018d1e:	233c      	movs	r3, #60	; 0x3c
 8018d20:	18fb      	adds	r3, r7, r3
 8018d22:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018d24:	2b06      	cmp	r3, #6
 8018d26:	d907      	bls.n	8018d38 <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018d28:	2247      	movs	r2, #71	; 0x47
 8018d2a:	18bb      	adds	r3, r7, r2
 8018d2c:	18ba      	adds	r2, r7, r2
 8018d2e:	7812      	ldrb	r2, [r2, #0]
 8018d30:	2101      	movs	r1, #1
 8018d32:	438a      	bics	r2, r1
 8018d34:	701a      	strb	r2, [r3, #0]
 8018d36:	e04c      	b.n	8018dd2 <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018d38:	2345      	movs	r3, #69	; 0x45
 8018d3a:	18fb      	adds	r3, r7, r3
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	701a      	strb	r2, [r3, #0]
 8018d40:	e042      	b.n	8018dc8 <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018d42:	233c      	movs	r3, #60	; 0x3c
 8018d44:	18fb      	adds	r3, r7, r3
 8018d46:	78db      	ldrb	r3, [r3, #3]
 8018d48:	2b06      	cmp	r3, #6
 8018d4a:	d11a      	bne.n	8018d82 <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8018d4c:	2045      	movs	r0, #69	; 0x45
 8018d4e:	183b      	adds	r3, r7, r0
 8018d50:	781a      	ldrb	r2, [r3, #0]
 8018d52:	496d      	ldr	r1, [pc, #436]	; (8018f08 <RegionEU868LinkAdrReq+0x2a8>)
 8018d54:	0013      	movs	r3, r2
 8018d56:	005b      	lsls	r3, r3, #1
 8018d58:	189b      	adds	r3, r3, r2
 8018d5a:	009b      	lsls	r3, r3, #2
 8018d5c:	585b      	ldr	r3, [r3, r1]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d02c      	beq.n	8018dbc <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 8018d62:	183b      	adds	r3, r7, r0
 8018d64:	781b      	ldrb	r3, [r3, #0]
 8018d66:	2201      	movs	r2, #1
 8018d68:	409a      	lsls	r2, r3
 8018d6a:	0013      	movs	r3, r2
 8018d6c:	b21a      	sxth	r2, r3
 8018d6e:	213a      	movs	r1, #58	; 0x3a
 8018d70:	187b      	adds	r3, r7, r1
 8018d72:	881b      	ldrh	r3, [r3, #0]
 8018d74:	b21b      	sxth	r3, r3
 8018d76:	4313      	orrs	r3, r2
 8018d78:	b21b      	sxth	r3, r3
 8018d7a:	b29a      	uxth	r2, r3
 8018d7c:	187b      	adds	r3, r7, r1
 8018d7e:	801a      	strh	r2, [r3, #0]
 8018d80:	e01c      	b.n	8018dbc <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018d82:	233a      	movs	r3, #58	; 0x3a
 8018d84:	18fb      	adds	r3, r7, r3
 8018d86:	881b      	ldrh	r3, [r3, #0]
 8018d88:	001a      	movs	r2, r3
 8018d8a:	2145      	movs	r1, #69	; 0x45
 8018d8c:	187b      	adds	r3, r7, r1
 8018d8e:	781b      	ldrb	r3, [r3, #0]
 8018d90:	411a      	asrs	r2, r3
 8018d92:	0013      	movs	r3, r2
 8018d94:	2201      	movs	r2, #1
 8018d96:	4013      	ands	r3, r2
 8018d98:	d010      	beq.n	8018dbc <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8018d9a:	187b      	adds	r3, r7, r1
 8018d9c:	781a      	ldrb	r2, [r3, #0]
 8018d9e:	495a      	ldr	r1, [pc, #360]	; (8018f08 <RegionEU868LinkAdrReq+0x2a8>)
 8018da0:	0013      	movs	r3, r2
 8018da2:	005b      	lsls	r3, r3, #1
 8018da4:	189b      	adds	r3, r3, r2
 8018da6:	009b      	lsls	r3, r3, #2
 8018da8:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d106      	bne.n	8018dbc <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8018dae:	2247      	movs	r2, #71	; 0x47
 8018db0:	18bb      	adds	r3, r7, r2
 8018db2:	18ba      	adds	r2, r7, r2
 8018db4:	7812      	ldrb	r2, [r2, #0]
 8018db6:	2101      	movs	r1, #1
 8018db8:	438a      	bics	r2, r1
 8018dba:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018dbc:	2145      	movs	r1, #69	; 0x45
 8018dbe:	187b      	adds	r3, r7, r1
 8018dc0:	781a      	ldrb	r2, [r3, #0]
 8018dc2:	187b      	adds	r3, r7, r1
 8018dc4:	3201      	adds	r2, #1
 8018dc6:	701a      	strb	r2, [r3, #0]
 8018dc8:	2345      	movs	r3, #69	; 0x45
 8018dca:	18fb      	adds	r3, r7, r3
 8018dcc:	781b      	ldrb	r3, [r3, #0]
 8018dce:	2b0f      	cmp	r3, #15
 8018dd0:	d9b7      	bls.n	8018d42 <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	7a1b      	ldrb	r3, [r3, #8]
 8018dd6:	2246      	movs	r2, #70	; 0x46
 8018dd8:	18ba      	adds	r2, r7, r2
 8018dda:	7812      	ldrb	r2, [r2, #0]
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d200      	bcs.n	8018de2 <RegionEU868LinkAdrReq+0x182>
 8018de0:	e75e      	b.n	8018ca0 <RegionEU868LinkAdrReq+0x40>
 8018de2:	e000      	b.n	8018de6 <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 8018de4:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018de6:	2134      	movs	r1, #52	; 0x34
 8018de8:	187b      	adds	r3, r7, r1
 8018dea:	2202      	movs	r2, #2
 8018dec:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	7a5a      	ldrb	r2, [r3, #9]
 8018df2:	187b      	adds	r3, r7, r1
 8018df4:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018df6:	187b      	adds	r3, r7, r1
 8018df8:	0018      	movs	r0, r3
 8018dfa:	f7ff f9ef 	bl	80181dc <RegionEU868GetPhyParam>
 8018dfe:	0003      	movs	r3, r0
 8018e00:	001a      	movs	r2, r3
 8018e02:	2030      	movs	r0, #48	; 0x30
 8018e04:	183b      	adds	r3, r7, r0
 8018e06:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8018e08:	2110      	movs	r1, #16
 8018e0a:	187b      	adds	r3, r7, r1
 8018e0c:	2447      	movs	r4, #71	; 0x47
 8018e0e:	193a      	adds	r2, r7, r4
 8018e10:	7812      	ldrb	r2, [r2, #0]
 8018e12:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	7a9a      	ldrb	r2, [r3, #10]
 8018e18:	187b      	adds	r3, r7, r1
 8018e1a:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018e1c:	253c      	movs	r5, #60	; 0x3c
 8018e1e:	197b      	adds	r3, r7, r5
 8018e20:	2201      	movs	r2, #1
 8018e22:	569a      	ldrsb	r2, [r3, r2]
 8018e24:	187b      	adds	r3, r7, r1
 8018e26:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018e28:	197b      	adds	r3, r7, r5
 8018e2a:	2202      	movs	r2, #2
 8018e2c:	569a      	ldrsb	r2, [r3, r2]
 8018e2e:	187b      	adds	r3, r7, r1
 8018e30:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018e32:	197b      	adds	r3, r7, r5
 8018e34:	781a      	ldrb	r2, [r3, #0]
 8018e36:	187b      	adds	r3, r7, r1
 8018e38:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	220b      	movs	r2, #11
 8018e3e:	569a      	ldrsb	r2, [r3, r2]
 8018e40:	187b      	adds	r3, r7, r1
 8018e42:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	220c      	movs	r2, #12
 8018e48:	569a      	ldrsb	r2, [r3, r2]
 8018e4a:	187b      	adds	r3, r7, r1
 8018e4c:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	7b5b      	ldrb	r3, [r3, #13]
 8018e52:	b25a      	sxtb	r2, r3
 8018e54:	187b      	adds	r3, r7, r1
 8018e56:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018e58:	187b      	adds	r3, r7, r1
 8018e5a:	2210      	movs	r2, #16
 8018e5c:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8018e5e:	187b      	adds	r3, r7, r1
 8018e60:	223a      	movs	r2, #58	; 0x3a
 8018e62:	18ba      	adds	r2, r7, r2
 8018e64:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018e66:	183b      	adds	r3, r7, r0
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	b25a      	sxtb	r2, r3
 8018e6c:	0008      	movs	r0, r1
 8018e6e:	183b      	adds	r3, r7, r0
 8018e70:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8018e72:	183b      	adds	r3, r7, r0
 8018e74:	2207      	movs	r2, #7
 8018e76:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8018e78:	183b      	adds	r3, r7, r0
 8018e7a:	4a23      	ldr	r2, [pc, #140]	; (8018f08 <RegionEU868LinkAdrReq+0x2a8>)
 8018e7c:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018e7e:	183b      	adds	r3, r7, r0
 8018e80:	2200      	movs	r2, #0
 8018e82:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018e84:	183b      	adds	r3, r7, r0
 8018e86:	2200      	movs	r2, #0
 8018e88:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018e8a:	183b      	adds	r3, r7, r0
 8018e8c:	68fa      	ldr	r2, [r7, #12]
 8018e8e:	6812      	ldr	r2, [r2, #0]
 8018e90:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018e92:	0026      	movs	r6, r4
 8018e94:	193c      	adds	r4, r7, r4
 8018e96:	0029      	movs	r1, r5
 8018e98:	187d      	adds	r5, r7, r1
 8018e9a:	187b      	adds	r3, r7, r1
 8018e9c:	1c9a      	adds	r2, r3, #2
 8018e9e:	187b      	adds	r3, r7, r1
 8018ea0:	1c59      	adds	r1, r3, #1
 8018ea2:	1838      	adds	r0, r7, r0
 8018ea4:	002b      	movs	r3, r5
 8018ea6:	f7fe fd66 	bl	8017976 <RegionCommonLinkAdrReqVerifyParams>
 8018eaa:	0003      	movs	r3, r0
 8018eac:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018eae:	19bb      	adds	r3, r7, r6
 8018eb0:	781b      	ldrb	r3, [r3, #0]
 8018eb2:	2b07      	cmp	r3, #7
 8018eb4:	d10c      	bne.n	8018ed0 <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8018eb6:	4b15      	ldr	r3, [pc, #84]	; (8018f0c <RegionEU868LinkAdrReq+0x2ac>)
 8018eb8:	2202      	movs	r2, #2
 8018eba:	2100      	movs	r1, #0
 8018ebc:	0018      	movs	r0, r3
 8018ebe:	f000 fbe9 	bl	8019694 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8018ec2:	223a      	movs	r2, #58	; 0x3a
 8018ec4:	18bb      	adds	r3, r7, r2
 8018ec6:	8819      	ldrh	r1, [r3, #0]
 8018ec8:	4a0f      	ldr	r2, [pc, #60]	; (8018f08 <RegionEU868LinkAdrReq+0x2a8>)
 8018eca:	239c      	movs	r3, #156	; 0x9c
 8018ecc:	005b      	lsls	r3, r3, #1
 8018ece:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018ed0:	213c      	movs	r1, #60	; 0x3c
 8018ed2:	187b      	adds	r3, r7, r1
 8018ed4:	2201      	movs	r2, #1
 8018ed6:	569a      	ldrsb	r2, [r3, r2]
 8018ed8:	68bb      	ldr	r3, [r7, #8]
 8018eda:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018edc:	187b      	adds	r3, r7, r1
 8018ede:	2202      	movs	r2, #2
 8018ee0:	569a      	ldrsb	r2, [r3, r2]
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018ee6:	187b      	adds	r3, r7, r1
 8018ee8:	781a      	ldrb	r2, [r3, #0]
 8018eea:	683b      	ldr	r3, [r7, #0]
 8018eec:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018ef0:	2246      	movs	r2, #70	; 0x46
 8018ef2:	18ba      	adds	r2, r7, r2
 8018ef4:	7812      	ldrb	r2, [r2, #0]
 8018ef6:	701a      	strb	r2, [r3, #0]

    return status;
 8018ef8:	2347      	movs	r3, #71	; 0x47
 8018efa:	18fb      	adds	r3, r7, r3
 8018efc:	781b      	ldrb	r3, [r3, #0]
}
 8018efe:	0018      	movs	r0, r3
 8018f00:	46bd      	mov	sp, r7
 8018f02:	b013      	add	sp, #76	; 0x4c
 8018f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f06:	46c0      	nop			; (mov r8, r8)
 8018f08:	20000d44 	.word	0x20000d44
 8018f0c:	20000e7c 	.word	0x20000e7c

08018f10 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018f10:	b590      	push	{r4, r7, lr}
 8018f12:	b085      	sub	sp, #20
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018f18:	240f      	movs	r4, #15
 8018f1a:	193b      	adds	r3, r7, r4
 8018f1c:	2207      	movs	r2, #7
 8018f1e:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018f20:	210e      	movs	r1, #14
 8018f22:	187b      	adds	r3, r7, r1
 8018f24:	2200      	movs	r2, #0
 8018f26:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	685b      	ldr	r3, [r3, #4]
 8018f2c:	187a      	adds	r2, r7, r1
 8018f2e:	0011      	movs	r1, r2
 8018f30:	0018      	movs	r0, r3
 8018f32:	f7ff f87d 	bl	8018030 <VerifyRfFreq>
 8018f36:	0003      	movs	r3, r0
 8018f38:	001a      	movs	r2, r3
 8018f3a:	2301      	movs	r3, #1
 8018f3c:	4053      	eors	r3, r2
 8018f3e:	b2db      	uxtb	r3, r3
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d005      	beq.n	8018f50 <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 8018f44:	193b      	adds	r3, r7, r4
 8018f46:	193a      	adds	r2, r7, r4
 8018f48:	7812      	ldrb	r2, [r2, #0]
 8018f4a:	2101      	movs	r1, #1
 8018f4c:	438a      	bics	r2, r1
 8018f4e:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	781b      	ldrb	r3, [r3, #0]
 8018f54:	b25b      	sxtb	r3, r3
 8018f56:	2207      	movs	r2, #7
 8018f58:	2100      	movs	r1, #0
 8018f5a:	0018      	movs	r0, r3
 8018f5c:	f7fe fad9 	bl	8017512 <RegionCommonValueInRange>
 8018f60:	1e03      	subs	r3, r0, #0
 8018f62:	d106      	bne.n	8018f72 <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 8018f64:	220f      	movs	r2, #15
 8018f66:	18bb      	adds	r3, r7, r2
 8018f68:	18ba      	adds	r2, r7, r2
 8018f6a:	7812      	ldrb	r2, [r2, #0]
 8018f6c:	2102      	movs	r1, #2
 8018f6e:	438a      	bics	r2, r1
 8018f70:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	785b      	ldrb	r3, [r3, #1]
 8018f76:	b25b      	sxtb	r3, r3
 8018f78:	2205      	movs	r2, #5
 8018f7a:	2100      	movs	r1, #0
 8018f7c:	0018      	movs	r0, r3
 8018f7e:	f7fe fac8 	bl	8017512 <RegionCommonValueInRange>
 8018f82:	1e03      	subs	r3, r0, #0
 8018f84:	d106      	bne.n	8018f94 <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018f86:	220f      	movs	r2, #15
 8018f88:	18bb      	adds	r3, r7, r2
 8018f8a:	18ba      	adds	r2, r7, r2
 8018f8c:	7812      	ldrb	r2, [r2, #0]
 8018f8e:	2104      	movs	r1, #4
 8018f90:	438a      	bics	r2, r1
 8018f92:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8018f94:	230f      	movs	r3, #15
 8018f96:	18fb      	adds	r3, r7, r3
 8018f98:	781b      	ldrb	r3, [r3, #0]
}
 8018f9a:	0018      	movs	r0, r3
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	b005      	add	sp, #20
 8018fa0:	bd90      	pop	{r4, r7, pc}

08018fa2 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018fa2:	b590      	push	{r4, r7, lr}
 8018fa4:	b087      	sub	sp, #28
 8018fa6:	af00      	add	r7, sp, #0
 8018fa8:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018faa:	2417      	movs	r4, #23
 8018fac:	193b      	adds	r3, r7, r4
 8018fae:	2203      	movs	r2, #3
 8018fb0:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d118      	bne.n	8018fee <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	791b      	ldrb	r3, [r3, #4]
 8018fc0:	b25b      	sxtb	r3, r3
 8018fc2:	b2da      	uxtb	r2, r3
 8018fc4:	2108      	movs	r1, #8
 8018fc6:	187b      	adds	r3, r7, r1
 8018fc8:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018fca:	187b      	adds	r3, r7, r1
 8018fcc:	0018      	movs	r0, r3
 8018fce:	f000 fa35 	bl	801943c <RegionEU868ChannelsRemove>
 8018fd2:	0003      	movs	r3, r0
 8018fd4:	001a      	movs	r2, r3
 8018fd6:	2301      	movs	r3, #1
 8018fd8:	4053      	eors	r3, r2
 8018fda:	b2db      	uxtb	r3, r3
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d041      	beq.n	8019064 <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 8018fe0:	193b      	adds	r3, r7, r4
 8018fe2:	193a      	adds	r2, r7, r4
 8018fe4:	7812      	ldrb	r2, [r2, #0]
 8018fe6:	2103      	movs	r1, #3
 8018fe8:	438a      	bics	r2, r1
 8018fea:	701a      	strb	r2, [r3, #0]
 8018fec:	e03a      	b.n	8019064 <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681a      	ldr	r2, [r3, #0]
 8018ff2:	210c      	movs	r1, #12
 8018ff4:	187b      	adds	r3, r7, r1
 8018ff6:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	791b      	ldrb	r3, [r3, #4]
 8018ffc:	b25b      	sxtb	r3, r3
 8018ffe:	b2da      	uxtb	r2, r3
 8019000:	187b      	adds	r3, r7, r1
 8019002:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019004:	187b      	adds	r3, r7, r1
 8019006:	0018      	movs	r0, r3
 8019008:	f000 f954 	bl	80192b4 <RegionEU868ChannelAdd>
 801900c:	0003      	movs	r3, r0
 801900e:	2b06      	cmp	r3, #6
 8019010:	d017      	beq.n	8019042 <RegionEU868NewChannelReq+0xa0>
 8019012:	dc1e      	bgt.n	8019052 <RegionEU868NewChannelReq+0xb0>
 8019014:	2b05      	cmp	r3, #5
 8019016:	d00c      	beq.n	8019032 <RegionEU868NewChannelReq+0x90>
 8019018:	dc1b      	bgt.n	8019052 <RegionEU868NewChannelReq+0xb0>
 801901a:	2b00      	cmp	r3, #0
 801901c:	d021      	beq.n	8019062 <RegionEU868NewChannelReq+0xc0>
 801901e:	2b04      	cmp	r3, #4
 8019020:	d117      	bne.n	8019052 <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019022:	2217      	movs	r2, #23
 8019024:	18bb      	adds	r3, r7, r2
 8019026:	18ba      	adds	r2, r7, r2
 8019028:	7812      	ldrb	r2, [r2, #0]
 801902a:	2101      	movs	r1, #1
 801902c:	438a      	bics	r2, r1
 801902e:	701a      	strb	r2, [r3, #0]
                break;
 8019030:	e018      	b.n	8019064 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019032:	2217      	movs	r2, #23
 8019034:	18bb      	adds	r3, r7, r2
 8019036:	18ba      	adds	r2, r7, r2
 8019038:	7812      	ldrb	r2, [r2, #0]
 801903a:	2102      	movs	r1, #2
 801903c:	438a      	bics	r2, r1
 801903e:	701a      	strb	r2, [r3, #0]
                break;
 8019040:	e010      	b.n	8019064 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019042:	2217      	movs	r2, #23
 8019044:	18bb      	adds	r3, r7, r2
 8019046:	18ba      	adds	r2, r7, r2
 8019048:	7812      	ldrb	r2, [r2, #0]
 801904a:	2103      	movs	r1, #3
 801904c:	438a      	bics	r2, r1
 801904e:	701a      	strb	r2, [r3, #0]
                break;
 8019050:	e008      	b.n	8019064 <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 8019052:	2217      	movs	r2, #23
 8019054:	18bb      	adds	r3, r7, r2
 8019056:	18ba      	adds	r2, r7, r2
 8019058:	7812      	ldrb	r2, [r2, #0]
 801905a:	2103      	movs	r1, #3
 801905c:	438a      	bics	r2, r1
 801905e:	701a      	strb	r2, [r3, #0]
                break;
 8019060:	e000      	b.n	8019064 <RegionEU868NewChannelReq+0xc2>
                break;
 8019062:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8019064:	2317      	movs	r3, #23
 8019066:	18fb      	adds	r3, r7, r3
 8019068:	781b      	ldrb	r3, [r3, #0]
}
 801906a:	0018      	movs	r0, r3
 801906c:	46bd      	mov	sp, r7
 801906e:	b007      	add	sp, #28
 8019070:	bd90      	pop	{r4, r7, pc}

08019072 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019072:	b580      	push	{r7, lr}
 8019074:	b082      	sub	sp, #8
 8019076:	af00      	add	r7, sp, #0
 8019078:	6078      	str	r0, [r7, #4]
    return -1;
 801907a:	2301      	movs	r3, #1
 801907c:	425b      	negs	r3, r3
}
 801907e:	0018      	movs	r0, r3
 8019080:	46bd      	mov	sp, r7
 8019082:	b002      	add	sp, #8
 8019084:	bd80      	pop	{r7, pc}
	...

08019088 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019088:	b590      	push	{r4, r7, lr}
 801908a:	b085      	sub	sp, #20
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019090:	240f      	movs	r4, #15
 8019092:	193b      	adds	r3, r7, r4
 8019094:	2203      	movs	r2, #3
 8019096:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8019098:	210e      	movs	r1, #14
 801909a:	187b      	adds	r3, r7, r1
 801909c:	2200      	movs	r2, #0
 801909e:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	685b      	ldr	r3, [r3, #4]
 80190a4:	187a      	adds	r2, r7, r1
 80190a6:	0011      	movs	r1, r2
 80190a8:	0018      	movs	r0, r3
 80190aa:	f7fe ffc1 	bl	8018030 <VerifyRfFreq>
 80190ae:	0003      	movs	r3, r0
 80190b0:	001a      	movs	r2, r3
 80190b2:	2301      	movs	r3, #1
 80190b4:	4053      	eors	r3, r2
 80190b6:	b2db      	uxtb	r3, r3
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d005      	beq.n	80190c8 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80190bc:	193b      	adds	r3, r7, r4
 80190be:	193a      	adds	r2, r7, r4
 80190c0:	7812      	ldrb	r2, [r2, #0]
 80190c2:	2101      	movs	r1, #1
 80190c4:	438a      	bics	r2, r1
 80190c6:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	781b      	ldrb	r3, [r3, #0]
 80190cc:	0019      	movs	r1, r3
 80190ce:	4a14      	ldr	r2, [pc, #80]	; (8019120 <RegionEU868DlChannelReq+0x98>)
 80190d0:	000b      	movs	r3, r1
 80190d2:	005b      	lsls	r3, r3, #1
 80190d4:	185b      	adds	r3, r3, r1
 80190d6:	009b      	lsls	r3, r3, #2
 80190d8:	589b      	ldr	r3, [r3, r2]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d106      	bne.n	80190ec <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 80190de:	220f      	movs	r2, #15
 80190e0:	18bb      	adds	r3, r7, r2
 80190e2:	18ba      	adds	r2, r7, r2
 80190e4:	7812      	ldrb	r2, [r2, #0]
 80190e6:	2102      	movs	r1, #2
 80190e8:	438a      	bics	r2, r1
 80190ea:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80190ec:	230f      	movs	r3, #15
 80190ee:	18fb      	adds	r3, r7, r3
 80190f0:	781b      	ldrb	r3, [r3, #0]
 80190f2:	2b03      	cmp	r3, #3
 80190f4:	d10c      	bne.n	8019110 <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	781b      	ldrb	r3, [r3, #0]
 80190fa:	0018      	movs	r0, r3
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	685a      	ldr	r2, [r3, #4]
 8019100:	4907      	ldr	r1, [pc, #28]	; (8019120 <RegionEU868DlChannelReq+0x98>)
 8019102:	0003      	movs	r3, r0
 8019104:	005b      	lsls	r3, r3, #1
 8019106:	181b      	adds	r3, r3, r0
 8019108:	009b      	lsls	r3, r3, #2
 801910a:	18cb      	adds	r3, r1, r3
 801910c:	3304      	adds	r3, #4
 801910e:	601a      	str	r2, [r3, #0]
    }

    return status;
 8019110:	230f      	movs	r3, #15
 8019112:	18fb      	adds	r3, r7, r3
 8019114:	781b      	ldrb	r3, [r3, #0]
}
 8019116:	0018      	movs	r0, r3
 8019118:	46bd      	mov	sp, r7
 801911a:	b005      	add	sp, #20
 801911c:	bd90      	pop	{r4, r7, pc}
 801911e:	46c0      	nop			; (mov r8, r8)
 8019120:	20000d44 	.word	0x20000d44

08019124 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b082      	sub	sp, #8
 8019128:	af00      	add	r7, sp, #0
 801912a:	0002      	movs	r2, r0
 801912c:	1dfb      	adds	r3, r7, #7
 801912e:	701a      	strb	r2, [r3, #0]
 8019130:	1dbb      	adds	r3, r7, #6
 8019132:	1c0a      	adds	r2, r1, #0
 8019134:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8019136:	1dfb      	adds	r3, r7, #7
 8019138:	781b      	ldrb	r3, [r3, #0]
 801913a:	b25b      	sxtb	r3, r3
}
 801913c:	0018      	movs	r0, r3
 801913e:	46bd      	mov	sp, r7
 8019140:	b002      	add	sp, #8
 8019142:	bd80      	pop	{r7, pc}

08019144 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019146:	b099      	sub	sp, #100	; 0x64
 8019148:	af02      	add	r7, sp, #8
 801914a:	60f8      	str	r0, [r7, #12]
 801914c:	60b9      	str	r1, [r7, #8]
 801914e:	607a      	str	r2, [r7, #4]
 8019150:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8019152:	2356      	movs	r3, #86	; 0x56
 8019154:	18fb      	adds	r3, r7, r3
 8019156:	2200      	movs	r2, #0
 8019158:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 801915a:	2355      	movs	r3, #85	; 0x55
 801915c:	18fb      	adds	r3, r7, r3
 801915e:	2200      	movs	r2, #0
 8019160:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8019162:	2344      	movs	r3, #68	; 0x44
 8019164:	18fb      	adds	r3, r7, r3
 8019166:	2200      	movs	r2, #0
 8019168:	601a      	str	r2, [r3, #0]
 801916a:	3304      	adds	r3, #4
 801916c:	220c      	movs	r2, #12
 801916e:	2100      	movs	r1, #0
 8019170:	0018      	movs	r0, r3
 8019172:	f004 ffae 	bl	801e0d2 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019176:	2357      	movs	r3, #87	; 0x57
 8019178:	18fb      	adds	r3, r7, r3
 801917a:	220c      	movs	r2, #12
 801917c:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 801917e:	4b4a      	ldr	r3, [pc, #296]	; (80192a8 <RegionEU868NextChannel+0x164>)
 8019180:	2201      	movs	r2, #1
 8019182:	2100      	movs	r1, #0
 8019184:	0018      	movs	r0, r3
 8019186:	f7fe fa2c 	bl	80175e2 <RegionCommonCountChannels>
 801918a:	1e03      	subs	r3, r0, #0
 801918c:	d10a      	bne.n	80191a4 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801918e:	4a47      	ldr	r2, [pc, #284]	; (80192ac <RegionEU868NextChannel+0x168>)
 8019190:	239c      	movs	r3, #156	; 0x9c
 8019192:	005b      	lsls	r3, r3, #1
 8019194:	5ad3      	ldrh	r3, [r2, r3]
 8019196:	2207      	movs	r2, #7
 8019198:	4313      	orrs	r3, r2
 801919a:	b299      	uxth	r1, r3
 801919c:	4a43      	ldr	r2, [pc, #268]	; (80192ac <RegionEU868NextChannel+0x168>)
 801919e:	239c      	movs	r3, #156	; 0x9c
 80191a0:	005b      	lsls	r3, r3, #1
 80191a2:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	7a5a      	ldrb	r2, [r3, #9]
 80191a8:	2110      	movs	r1, #16
 80191aa:	187b      	adds	r3, r7, r1
 80191ac:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	7a1b      	ldrb	r3, [r3, #8]
 80191b2:	b25b      	sxtb	r3, r3
 80191b4:	b2da      	uxtb	r2, r3
 80191b6:	187b      	adds	r3, r7, r1
 80191b8:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 80191ba:	000d      	movs	r5, r1
 80191bc:	197b      	adds	r3, r7, r5
 80191be:	4a3a      	ldr	r2, [pc, #232]	; (80192a8 <RegionEU868NextChannel+0x164>)
 80191c0:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 80191c2:	197b      	adds	r3, r7, r5
 80191c4:	4a39      	ldr	r2, [pc, #228]	; (80192ac <RegionEU868NextChannel+0x168>)
 80191c6:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 80191c8:	197b      	adds	r3, r7, r5
 80191ca:	4a39      	ldr	r2, [pc, #228]	; (80192b0 <RegionEU868NextChannel+0x16c>)
 80191cc:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80191ce:	197b      	adds	r3, r7, r5
 80191d0:	2210      	movs	r2, #16
 80191d2:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 80191d4:	197b      	adds	r3, r7, r5
 80191d6:	2207      	movs	r2, #7
 80191d8:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	681a      	ldr	r2, [r3, #0]
 80191de:	2424      	movs	r4, #36	; 0x24
 80191e0:	193b      	adds	r3, r7, r4
 80191e2:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	685a      	ldr	r2, [r3, #4]
 80191e8:	193b      	adds	r3, r7, r4
 80191ea:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	7a9a      	ldrb	r2, [r3, #10]
 80191f0:	193b      	adds	r3, r7, r4
 80191f2:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80191f4:	193b      	adds	r3, r7, r4
 80191f6:	2206      	movs	r2, #6
 80191f8:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80191fa:	193b      	adds	r3, r7, r4
 80191fc:	68fa      	ldr	r2, [r7, #12]
 80191fe:	330c      	adds	r3, #12
 8019200:	320c      	adds	r2, #12
 8019202:	ca03      	ldmia	r2!, {r0, r1}
 8019204:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	7d1a      	ldrb	r2, [r3, #20]
 801920a:	193b      	adds	r3, r7, r4
 801920c:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	2208      	movs	r2, #8
 8019212:	569a      	ldrsb	r2, [r3, r2]
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	8adb      	ldrh	r3, [r3, #22]
 8019218:	0019      	movs	r1, r3
 801921a:	0010      	movs	r0, r2
 801921c:	f7fe ff80 	bl	8018120 <GetTimeOnAir>
 8019220:	0002      	movs	r2, r0
 8019222:	0020      	movs	r0, r4
 8019224:	183b      	adds	r3, r7, r0
 8019226:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019228:	183b      	adds	r3, r7, r0
 801922a:	197a      	adds	r2, r7, r5
 801922c:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801922e:	2657      	movs	r6, #87	; 0x57
 8019230:	19bc      	adds	r4, r7, r6
 8019232:	2356      	movs	r3, #86	; 0x56
 8019234:	18fd      	adds	r5, r7, r3
 8019236:	2244      	movs	r2, #68	; 0x44
 8019238:	18ba      	adds	r2, r7, r2
 801923a:	6839      	ldr	r1, [r7, #0]
 801923c:	1838      	adds	r0, r7, r0
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	9301      	str	r3, [sp, #4]
 8019242:	2355      	movs	r3, #85	; 0x55
 8019244:	18fb      	adds	r3, r7, r3
 8019246:	9300      	str	r3, [sp, #0]
 8019248:	002b      	movs	r3, r5
 801924a:	f7fe fdcf 	bl	8017dec <RegionCommonIdentifyChannels>
 801924e:	0003      	movs	r3, r0
 8019250:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019252:	19bb      	adds	r3, r7, r6
 8019254:	781b      	ldrb	r3, [r3, #0]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d10e      	bne.n	8019278 <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801925a:	2356      	movs	r3, #86	; 0x56
 801925c:	18fb      	adds	r3, r7, r3
 801925e:	781b      	ldrb	r3, [r3, #0]
 8019260:	3b01      	subs	r3, #1
 8019262:	0019      	movs	r1, r3
 8019264:	2000      	movs	r0, #0
 8019266:	f000 f9c1 	bl	80195ec <randr>
 801926a:	0002      	movs	r2, r0
 801926c:	2344      	movs	r3, #68	; 0x44
 801926e:	18fb      	adds	r3, r7, r3
 8019270:	5c9a      	ldrb	r2, [r3, r2]
 8019272:	68bb      	ldr	r3, [r7, #8]
 8019274:	701a      	strb	r2, [r3, #0]
 8019276:	e00f      	b.n	8019298 <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019278:	2357      	movs	r3, #87	; 0x57
 801927a:	18fb      	adds	r3, r7, r3
 801927c:	781b      	ldrb	r3, [r3, #0]
 801927e:	2b0c      	cmp	r3, #12
 8019280:	d10a      	bne.n	8019298 <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019282:	4a0a      	ldr	r2, [pc, #40]	; (80192ac <RegionEU868NextChannel+0x168>)
 8019284:	239c      	movs	r3, #156	; 0x9c
 8019286:	005b      	lsls	r3, r3, #1
 8019288:	5ad3      	ldrh	r3, [r2, r3]
 801928a:	2207      	movs	r2, #7
 801928c:	4313      	orrs	r3, r2
 801928e:	b299      	uxth	r1, r3
 8019290:	4a06      	ldr	r2, [pc, #24]	; (80192ac <RegionEU868NextChannel+0x168>)
 8019292:	239c      	movs	r3, #156	; 0x9c
 8019294:	005b      	lsls	r3, r3, #1
 8019296:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 8019298:	2357      	movs	r3, #87	; 0x57
 801929a:	18fb      	adds	r3, r7, r3
 801929c:	781b      	ldrb	r3, [r3, #0]
}
 801929e:	0018      	movs	r0, r3
 80192a0:	46bd      	mov	sp, r7
 80192a2:	b017      	add	sp, #92	; 0x5c
 80192a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192a6:	46c0      	nop			; (mov r8, r8)
 80192a8:	20000e7c 	.word	0x20000e7c
 80192ac:	20000d44 	.word	0x20000d44
 80192b0:	20000e04 	.word	0x20000e04

080192b4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80192b4:	b590      	push	{r4, r7, lr}
 80192b6:	b085      	sub	sp, #20
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 80192bc:	230c      	movs	r3, #12
 80192be:	18fb      	adds	r3, r7, r3
 80192c0:	2200      	movs	r2, #0
 80192c2:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 80192c4:	230f      	movs	r3, #15
 80192c6:	18fb      	adds	r3, r7, r3
 80192c8:	2200      	movs	r2, #0
 80192ca:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 80192cc:	230e      	movs	r3, #14
 80192ce:	18fb      	adds	r3, r7, r3
 80192d0:	2200      	movs	r2, #0
 80192d2:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 80192d4:	210d      	movs	r1, #13
 80192d6:	187b      	adds	r3, r7, r1
 80192d8:	687a      	ldr	r2, [r7, #4]
 80192da:	7912      	ldrb	r2, [r2, #4]
 80192dc:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80192de:	187b      	adds	r3, r7, r1
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	2b02      	cmp	r3, #2
 80192e4:	d801      	bhi.n	80192ea <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80192e6:	2306      	movs	r3, #6
 80192e8:	e0a1      	b.n	801942e <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80192ea:	230d      	movs	r3, #13
 80192ec:	18fb      	adds	r3, r7, r3
 80192ee:	781b      	ldrb	r3, [r3, #0]
 80192f0:	2b0f      	cmp	r3, #15
 80192f2:	d901      	bls.n	80192f8 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80192f4:	2303      	movs	r3, #3
 80192f6:	e09a      	b.n	801942e <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	7a1b      	ldrb	r3, [r3, #8]
 80192fe:	011b      	lsls	r3, r3, #4
 8019300:	b25b      	sxtb	r3, r3
 8019302:	111b      	asrs	r3, r3, #4
 8019304:	b25b      	sxtb	r3, r3
 8019306:	2207      	movs	r2, #7
 8019308:	2100      	movs	r1, #0
 801930a:	0018      	movs	r0, r3
 801930c:	f7fe f901 	bl	8017512 <RegionCommonValueInRange>
 8019310:	1e03      	subs	r3, r0, #0
 8019312:	d103      	bne.n	801931c <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8019314:	230f      	movs	r3, #15
 8019316:	18fb      	adds	r3, r7, r3
 8019318:	2201      	movs	r2, #1
 801931a:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	7a1b      	ldrb	r3, [r3, #8]
 8019322:	b25b      	sxtb	r3, r3
 8019324:	111b      	asrs	r3, r3, #4
 8019326:	b25b      	sxtb	r3, r3
 8019328:	2207      	movs	r2, #7
 801932a:	2100      	movs	r1, #0
 801932c:	0018      	movs	r0, r3
 801932e:	f7fe f8f0 	bl	8017512 <RegionCommonValueInRange>
 8019332:	1e03      	subs	r3, r0, #0
 8019334:	d103      	bne.n	801933e <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8019336:	230f      	movs	r3, #15
 8019338:	18fb      	adds	r3, r7, r3
 801933a:	2201      	movs	r2, #1
 801933c:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	7a1b      	ldrb	r3, [r3, #8]
 8019344:	011b      	lsls	r3, r3, #4
 8019346:	b25b      	sxtb	r3, r3
 8019348:	111b      	asrs	r3, r3, #4
 801934a:	b25a      	sxtb	r2, r3
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	7a1b      	ldrb	r3, [r3, #8]
 8019352:	b25b      	sxtb	r3, r3
 8019354:	111b      	asrs	r3, r3, #4
 8019356:	b25b      	sxtb	r3, r3
 8019358:	429a      	cmp	r2, r3
 801935a:	dd03      	ble.n	8019364 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 801935c:	230f      	movs	r3, #15
 801935e:	18fb      	adds	r3, r7, r3
 8019360:	2201      	movs	r2, #1
 8019362:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8019364:	240e      	movs	r4, #14
 8019366:	193b      	adds	r3, r7, r4
 8019368:	781b      	ldrb	r3, [r3, #0]
 801936a:	2201      	movs	r2, #1
 801936c:	4053      	eors	r3, r2
 801936e:	b2db      	uxtb	r3, r3
 8019370:	2b00      	cmp	r3, #0
 8019372:	d012      	beq.n	801939a <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	220c      	movs	r2, #12
 801937c:	18ba      	adds	r2, r7, r2
 801937e:	0011      	movs	r1, r2
 8019380:	0018      	movs	r0, r3
 8019382:	f7fe fe55 	bl	8018030 <VerifyRfFreq>
 8019386:	0003      	movs	r3, r0
 8019388:	001a      	movs	r2, r3
 801938a:	2301      	movs	r3, #1
 801938c:	4053      	eors	r3, r2
 801938e:	b2db      	uxtb	r3, r3
 8019390:	2b00      	cmp	r3, #0
 8019392:	d002      	beq.n	801939a <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 8019394:	193b      	adds	r3, r7, r4
 8019396:	2201      	movs	r2, #1
 8019398:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801939a:	230f      	movs	r3, #15
 801939c:	18fb      	adds	r3, r7, r3
 801939e:	781b      	ldrb	r3, [r3, #0]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d006      	beq.n	80193b2 <RegionEU868ChannelAdd+0xfe>
 80193a4:	230e      	movs	r3, #14
 80193a6:	18fb      	adds	r3, r7, r3
 80193a8:	781b      	ldrb	r3, [r3, #0]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d001      	beq.n	80193b2 <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80193ae:	2306      	movs	r3, #6
 80193b0:	e03d      	b.n	801942e <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 80193b2:	230f      	movs	r3, #15
 80193b4:	18fb      	adds	r3, r7, r3
 80193b6:	781b      	ldrb	r3, [r3, #0]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d001      	beq.n	80193c0 <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80193bc:	2305      	movs	r3, #5
 80193be:	e036      	b.n	801942e <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 80193c0:	230e      	movs	r3, #14
 80193c2:	18fb      	adds	r3, r7, r3
 80193c4:	781b      	ldrb	r3, [r3, #0]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d001      	beq.n	80193ce <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80193ca:	2304      	movs	r3, #4
 80193cc:	e02f      	b.n	801942e <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80193ce:	240d      	movs	r4, #13
 80193d0:	193b      	adds	r3, r7, r4
 80193d2:	781a      	ldrb	r2, [r3, #0]
 80193d4:	0013      	movs	r3, r2
 80193d6:	005b      	lsls	r3, r3, #1
 80193d8:	189b      	adds	r3, r3, r2
 80193da:	009b      	lsls	r3, r3, #2
 80193dc:	4a16      	ldr	r2, [pc, #88]	; (8019438 <RegionEU868ChannelAdd+0x184>)
 80193de:	1898      	adds	r0, r3, r2
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	220c      	movs	r2, #12
 80193e6:	0019      	movs	r1, r3
 80193e8:	f000 f916 	bl	8019618 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 80193ec:	193b      	adds	r3, r7, r4
 80193ee:	781a      	ldrb	r2, [r3, #0]
 80193f0:	230c      	movs	r3, #12
 80193f2:	18fb      	adds	r3, r7, r3
 80193f4:	7818      	ldrb	r0, [r3, #0]
 80193f6:	4910      	ldr	r1, [pc, #64]	; (8019438 <RegionEU868ChannelAdd+0x184>)
 80193f8:	0013      	movs	r3, r2
 80193fa:	005b      	lsls	r3, r3, #1
 80193fc:	189b      	adds	r3, r3, r2
 80193fe:	009b      	lsls	r3, r3, #2
 8019400:	18cb      	adds	r3, r1, r3
 8019402:	3309      	adds	r3, #9
 8019404:	1c02      	adds	r2, r0, #0
 8019406:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8019408:	4a0b      	ldr	r2, [pc, #44]	; (8019438 <RegionEU868ChannelAdd+0x184>)
 801940a:	239c      	movs	r3, #156	; 0x9c
 801940c:	005b      	lsls	r3, r3, #1
 801940e:	5ad3      	ldrh	r3, [r2, r3]
 8019410:	b21a      	sxth	r2, r3
 8019412:	193b      	adds	r3, r7, r4
 8019414:	781b      	ldrb	r3, [r3, #0]
 8019416:	2101      	movs	r1, #1
 8019418:	4099      	lsls	r1, r3
 801941a:	000b      	movs	r3, r1
 801941c:	b21b      	sxth	r3, r3
 801941e:	4313      	orrs	r3, r2
 8019420:	b21b      	sxth	r3, r3
 8019422:	b299      	uxth	r1, r3
 8019424:	4a04      	ldr	r2, [pc, #16]	; (8019438 <RegionEU868ChannelAdd+0x184>)
 8019426:	239c      	movs	r3, #156	; 0x9c
 8019428:	005b      	lsls	r3, r3, #1
 801942a:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 801942c:	2300      	movs	r3, #0
}
 801942e:	0018      	movs	r0, r3
 8019430:	46bd      	mov	sp, r7
 8019432:	b005      	add	sp, #20
 8019434:	bd90      	pop	{r4, r7, pc}
 8019436:	46c0      	nop			; (mov r8, r8)
 8019438:	20000d44 	.word	0x20000d44

0801943c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801943c:	b590      	push	{r4, r7, lr}
 801943e:	b087      	sub	sp, #28
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8019444:	2117      	movs	r1, #23
 8019446:	187b      	adds	r3, r7, r1
 8019448:	687a      	ldr	r2, [r7, #4]
 801944a:	7812      	ldrb	r2, [r2, #0]
 801944c:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801944e:	187b      	adds	r3, r7, r1
 8019450:	781b      	ldrb	r3, [r3, #0]
 8019452:	2b02      	cmp	r3, #2
 8019454:	d801      	bhi.n	801945a <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8019456:	2300      	movs	r3, #0
 8019458:	e015      	b.n	8019486 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801945a:	2417      	movs	r4, #23
 801945c:	193b      	adds	r3, r7, r4
 801945e:	781a      	ldrb	r2, [r3, #0]
 8019460:	490b      	ldr	r1, [pc, #44]	; (8019490 <RegionEU868ChannelsRemove+0x54>)
 8019462:	0013      	movs	r3, r2
 8019464:	005b      	lsls	r3, r3, #1
 8019466:	189b      	adds	r3, r3, r2
 8019468:	009b      	lsls	r3, r3, #2
 801946a:	18cb      	adds	r3, r1, r3
 801946c:	220c      	movs	r2, #12
 801946e:	2100      	movs	r1, #0
 8019470:	0018      	movs	r0, r3
 8019472:	f004 fe2e 	bl	801e0d2 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019476:	193b      	adds	r3, r7, r4
 8019478:	7819      	ldrb	r1, [r3, #0]
 801947a:	4b06      	ldr	r3, [pc, #24]	; (8019494 <RegionEU868ChannelsRemove+0x58>)
 801947c:	2210      	movs	r2, #16
 801947e:	0018      	movs	r0, r3
 8019480:	f7fe f86d 	bl	801755e <RegionCommonChanDisable>
 8019484:	0003      	movs	r3, r0
}
 8019486:	0018      	movs	r0, r3
 8019488:	46bd      	mov	sp, r7
 801948a:	b007      	add	sp, #28
 801948c:	bd90      	pop	{r4, r7, pc}
 801948e:	46c0      	nop			; (mov r8, r8)
 8019490:	20000d44 	.word	0x20000d44
 8019494:	20000e7c 	.word	0x20000e7c

08019498 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801949a:	b085      	sub	sp, #20
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	2002      	movs	r0, #2
 80194a4:	5618      	ldrsb	r0, [r3, r0]
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	781b      	ldrb	r3, [r3, #0]
 80194aa:	0019      	movs	r1, r3
 80194ac:	4a23      	ldr	r2, [pc, #140]	; (801953c <RegionEU868SetContinuousWave+0xa4>)
 80194ae:	000b      	movs	r3, r1
 80194b0:	005b      	lsls	r3, r3, #1
 80194b2:	185b      	adds	r3, r3, r1
 80194b4:	009b      	lsls	r3, r3, #2
 80194b6:	18d3      	adds	r3, r2, r3
 80194b8:	3309      	adds	r3, #9
 80194ba:	781b      	ldrb	r3, [r3, #0]
 80194bc:	001c      	movs	r4, r3
 80194be:	4a1f      	ldr	r2, [pc, #124]	; (801953c <RegionEU868SetContinuousWave+0xa4>)
 80194c0:	21c2      	movs	r1, #194	; 0xc2
 80194c2:	0023      	movs	r3, r4
 80194c4:	009b      	lsls	r3, r3, #2
 80194c6:	191b      	adds	r3, r3, r4
 80194c8:	009b      	lsls	r3, r3, #2
 80194ca:	18d3      	adds	r3, r2, r3
 80194cc:	185b      	adds	r3, r3, r1
 80194ce:	2100      	movs	r1, #0
 80194d0:	5659      	ldrsb	r1, [r3, r1]
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	2201      	movs	r2, #1
 80194d6:	569a      	ldrsb	r2, [r3, r2]
 80194d8:	260f      	movs	r6, #15
 80194da:	19bc      	adds	r4, r7, r6
 80194dc:	4b18      	ldr	r3, [pc, #96]	; (8019540 <RegionEU868SetContinuousWave+0xa8>)
 80194de:	f7fe fd7f 	bl	8017fe0 <LimitTxPower>
 80194e2:	0003      	movs	r3, r0
 80194e4:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80194e6:	200e      	movs	r0, #14
 80194e8:	183b      	adds	r3, r7, r0
 80194ea:	2200      	movs	r2, #0
 80194ec:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	781b      	ldrb	r3, [r3, #0]
 80194f2:	0019      	movs	r1, r3
 80194f4:	4a11      	ldr	r2, [pc, #68]	; (801953c <RegionEU868SetContinuousWave+0xa4>)
 80194f6:	000b      	movs	r3, r1
 80194f8:	005b      	lsls	r3, r3, #1
 80194fa:	185b      	adds	r3, r3, r1
 80194fc:	009b      	lsls	r3, r3, #2
 80194fe:	589b      	ldr	r3, [r3, r2]
 8019500:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	6859      	ldr	r1, [r3, #4]
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	689a      	ldr	r2, [r3, #8]
 801950a:	0005      	movs	r5, r0
 801950c:	183c      	adds	r4, r7, r0
 801950e:	19bb      	adds	r3, r7, r6
 8019510:	781b      	ldrb	r3, [r3, #0]
 8019512:	b25b      	sxtb	r3, r3
 8019514:	0018      	movs	r0, r3
 8019516:	f7fe fb41 	bl	8017b9c <RegionCommonComputeTxPower>
 801951a:	0003      	movs	r3, r0
 801951c:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801951e:	4b09      	ldr	r3, [pc, #36]	; (8019544 <RegionEU868SetContinuousWave+0xac>)
 8019520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019522:	687a      	ldr	r2, [r7, #4]
 8019524:	8994      	ldrh	r4, [r2, #12]
 8019526:	197a      	adds	r2, r7, r5
 8019528:	2100      	movs	r1, #0
 801952a:	5651      	ldrsb	r1, [r2, r1]
 801952c:	68b8      	ldr	r0, [r7, #8]
 801952e:	0022      	movs	r2, r4
 8019530:	4798      	blx	r3
}
 8019532:	46c0      	nop			; (mov r8, r8)
 8019534:	46bd      	mov	sp, r7
 8019536:	b005      	add	sp, #20
 8019538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801953a:	46c0      	nop			; (mov r8, r8)
 801953c:	20000d44 	.word	0x20000d44
 8019540:	20000e7c 	.word	0x20000e7c
 8019544:	0801fd7c 	.word	0x0801fd7c

08019548 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019548:	b590      	push	{r4, r7, lr}
 801954a:	b085      	sub	sp, #20
 801954c:	af00      	add	r7, sp, #0
 801954e:	0004      	movs	r4, r0
 8019550:	0008      	movs	r0, r1
 8019552:	0011      	movs	r1, r2
 8019554:	1dfb      	adds	r3, r7, #7
 8019556:	1c22      	adds	r2, r4, #0
 8019558:	701a      	strb	r2, [r3, #0]
 801955a:	1dbb      	adds	r3, r7, #6
 801955c:	1c02      	adds	r2, r0, #0
 801955e:	701a      	strb	r2, [r3, #0]
 8019560:	1d7b      	adds	r3, r7, #5
 8019562:	1c0a      	adds	r2, r1, #0
 8019564:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8019566:	1dbb      	adds	r3, r7, #6
 8019568:	781a      	ldrb	r2, [r3, #0]
 801956a:	1d7b      	adds	r3, r7, #5
 801956c:	781b      	ldrb	r3, [r3, #0]
 801956e:	1ad3      	subs	r3, r2, r3
 8019570:	b2da      	uxtb	r2, r3
 8019572:	210f      	movs	r1, #15
 8019574:	187b      	adds	r3, r7, r1
 8019576:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8019578:	000a      	movs	r2, r1
 801957a:	18bb      	adds	r3, r7, r2
 801957c:	781b      	ldrb	r3, [r3, #0]
 801957e:	2b7f      	cmp	r3, #127	; 0x7f
 8019580:	d902      	bls.n	8019588 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8019582:	18bb      	adds	r3, r7, r2
 8019584:	2200      	movs	r2, #0
 8019586:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8019588:	230f      	movs	r3, #15
 801958a:	18fb      	adds	r3, r7, r3
 801958c:	781b      	ldrb	r3, [r3, #0]
}
 801958e:	0018      	movs	r0, r3
 8019590:	46bd      	mov	sp, r7
 8019592:	b005      	add	sp, #20
 8019594:	bd90      	pop	{r4, r7, pc}
	...

08019598 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019598:	b580      	push	{r7, lr}
 801959a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801959c:	4b08      	ldr	r3, [pc, #32]	; (80195c0 <rand1+0x28>)
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	4a08      	ldr	r2, [pc, #32]	; (80195c4 <rand1+0x2c>)
 80195a2:	4353      	muls	r3, r2
 80195a4:	4a08      	ldr	r2, [pc, #32]	; (80195c8 <rand1+0x30>)
 80195a6:	189a      	adds	r2, r3, r2
 80195a8:	4b05      	ldr	r3, [pc, #20]	; (80195c0 <rand1+0x28>)
 80195aa:	601a      	str	r2, [r3, #0]
 80195ac:	4b04      	ldr	r3, [pc, #16]	; (80195c0 <rand1+0x28>)
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	4906      	ldr	r1, [pc, #24]	; (80195cc <rand1+0x34>)
 80195b2:	0018      	movs	r0, r3
 80195b4:	f7e6 fe40 	bl	8000238 <__aeabi_uidivmod>
 80195b8:	000b      	movs	r3, r1
}
 80195ba:	0018      	movs	r0, r3
 80195bc:	46bd      	mov	sp, r7
 80195be:	bd80      	pop	{r7, pc}
 80195c0:	200001ac 	.word	0x200001ac
 80195c4:	41c64e6d 	.word	0x41c64e6d
 80195c8:	00003039 	.word	0x00003039
 80195cc:	7fffffff 	.word	0x7fffffff

080195d0 <srand1>:

void srand1( uint32_t seed )
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b082      	sub	sp, #8
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
    next = seed;
 80195d8:	4b03      	ldr	r3, [pc, #12]	; (80195e8 <srand1+0x18>)
 80195da:	687a      	ldr	r2, [r7, #4]
 80195dc:	601a      	str	r2, [r3, #0]
}
 80195de:	46c0      	nop			; (mov r8, r8)
 80195e0:	46bd      	mov	sp, r7
 80195e2:	b002      	add	sp, #8
 80195e4:	bd80      	pop	{r7, pc}
 80195e6:	46c0      	nop			; (mov r8, r8)
 80195e8:	200001ac 	.word	0x200001ac

080195ec <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b082      	sub	sp, #8
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
 80195f4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80195f6:	f7ff ffcf 	bl	8019598 <rand1>
 80195fa:	683a      	ldr	r2, [r7, #0]
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	1ad3      	subs	r3, r2, r3
 8019600:	3301      	adds	r3, #1
 8019602:	0019      	movs	r1, r3
 8019604:	f7e6 ff02 	bl	800040c <__aeabi_idivmod>
 8019608:	000b      	movs	r3, r1
 801960a:	001a      	movs	r2, r3
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	18d3      	adds	r3, r2, r3
}
 8019610:	0018      	movs	r0, r3
 8019612:	46bd      	mov	sp, r7
 8019614:	b002      	add	sp, #8
 8019616:	bd80      	pop	{r7, pc}

08019618 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019618:	b580      	push	{r7, lr}
 801961a:	b084      	sub	sp, #16
 801961c:	af00      	add	r7, sp, #0
 801961e:	60f8      	str	r0, [r7, #12]
 8019620:	60b9      	str	r1, [r7, #8]
 8019622:	1dbb      	adds	r3, r7, #6
 8019624:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8019626:	e007      	b.n	8019638 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019628:	68ba      	ldr	r2, [r7, #8]
 801962a:	1c53      	adds	r3, r2, #1
 801962c:	60bb      	str	r3, [r7, #8]
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	1c59      	adds	r1, r3, #1
 8019632:	60f9      	str	r1, [r7, #12]
 8019634:	7812      	ldrb	r2, [r2, #0]
 8019636:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019638:	1dbb      	adds	r3, r7, #6
 801963a:	881b      	ldrh	r3, [r3, #0]
 801963c:	1dba      	adds	r2, r7, #6
 801963e:	1e59      	subs	r1, r3, #1
 8019640:	8011      	strh	r1, [r2, #0]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d1f0      	bne.n	8019628 <memcpy1+0x10>
    }
}
 8019646:	46c0      	nop			; (mov r8, r8)
 8019648:	46c0      	nop			; (mov r8, r8)
 801964a:	46bd      	mov	sp, r7
 801964c:	b004      	add	sp, #16
 801964e:	bd80      	pop	{r7, pc}

08019650 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b084      	sub	sp, #16
 8019654:	af00      	add	r7, sp, #0
 8019656:	60f8      	str	r0, [r7, #12]
 8019658:	60b9      	str	r1, [r7, #8]
 801965a:	1dbb      	adds	r3, r7, #6
 801965c:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 801965e:	1dbb      	adds	r3, r7, #6
 8019660:	881b      	ldrh	r3, [r3, #0]
 8019662:	3b01      	subs	r3, #1
 8019664:	68fa      	ldr	r2, [r7, #12]
 8019666:	18d3      	adds	r3, r2, r3
 8019668:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801966a:	e007      	b.n	801967c <memcpyr+0x2c>
    {
        *dst-- = *src++;
 801966c:	68ba      	ldr	r2, [r7, #8]
 801966e:	1c53      	adds	r3, r2, #1
 8019670:	60bb      	str	r3, [r7, #8]
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	1e59      	subs	r1, r3, #1
 8019676:	60f9      	str	r1, [r7, #12]
 8019678:	7812      	ldrb	r2, [r2, #0]
 801967a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801967c:	1dbb      	adds	r3, r7, #6
 801967e:	881b      	ldrh	r3, [r3, #0]
 8019680:	1dba      	adds	r2, r7, #6
 8019682:	1e59      	subs	r1, r3, #1
 8019684:	8011      	strh	r1, [r2, #0]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d1f0      	bne.n	801966c <memcpyr+0x1c>
    }
}
 801968a:	46c0      	nop			; (mov r8, r8)
 801968c:	46c0      	nop			; (mov r8, r8)
 801968e:	46bd      	mov	sp, r7
 8019690:	b004      	add	sp, #16
 8019692:	bd80      	pop	{r7, pc}

08019694 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b082      	sub	sp, #8
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
 801969c:	0008      	movs	r0, r1
 801969e:	0011      	movs	r1, r2
 80196a0:	1cfb      	adds	r3, r7, #3
 80196a2:	1c02      	adds	r2, r0, #0
 80196a4:	701a      	strb	r2, [r3, #0]
 80196a6:	003b      	movs	r3, r7
 80196a8:	1c0a      	adds	r2, r1, #0
 80196aa:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80196ac:	e005      	b.n	80196ba <memset1+0x26>
    {
        *dst++ = value;
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	1c5a      	adds	r2, r3, #1
 80196b2:	607a      	str	r2, [r7, #4]
 80196b4:	1cfa      	adds	r2, r7, #3
 80196b6:	7812      	ldrb	r2, [r2, #0]
 80196b8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80196ba:	003b      	movs	r3, r7
 80196bc:	881b      	ldrh	r3, [r3, #0]
 80196be:	003a      	movs	r2, r7
 80196c0:	1e59      	subs	r1, r3, #1
 80196c2:	8011      	strh	r1, [r2, #0]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d1f2      	bne.n	80196ae <memset1+0x1a>
    }
}
 80196c8:	46c0      	nop			; (mov r8, r8)
 80196ca:	46c0      	nop			; (mov r8, r8)
 80196cc:	46bd      	mov	sp, r7
 80196ce:	b002      	add	sp, #8
 80196d0:	bd80      	pop	{r7, pc}
	...

080196d4 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 80196d4:	b590      	push	{r4, r7, lr}
 80196d6:	b087      	sub	sp, #28
 80196d8:	af02      	add	r7, sp, #8
 80196da:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80196dc:	4b34      	ldr	r3, [pc, #208]	; (80197b0 <SX1276Init+0xdc>)
 80196de:	687a      	ldr	r2, [r7, #4]
 80196e0:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80196e2:	4b34      	ldr	r3, [pc, #208]	; (80197b4 <SX1276Init+0xe0>)
 80196e4:	2201      	movs	r2, #1
 80196e6:	4251      	negs	r1, r2
 80196e8:	4833      	ldr	r0, [pc, #204]	; (80197b8 <SX1276Init+0xe4>)
 80196ea:	2200      	movs	r2, #0
 80196ec:	9200      	str	r2, [sp, #0]
 80196ee:	2200      	movs	r2, #0
 80196f0:	f003 fa9a 	bl	801cc28 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80196f4:	4b2f      	ldr	r3, [pc, #188]	; (80197b4 <SX1276Init+0xe0>)
 80196f6:	2201      	movs	r2, #1
 80196f8:	4251      	negs	r1, r2
 80196fa:	4830      	ldr	r0, [pc, #192]	; (80197bc <SX1276Init+0xe8>)
 80196fc:	2200      	movs	r2, #0
 80196fe:	9200      	str	r2, [sp, #0]
 8019700:	2200      	movs	r2, #0
 8019702:	f003 fa91 	bl	801cc28 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8019706:	4b2b      	ldr	r3, [pc, #172]	; (80197b4 <SX1276Init+0xe0>)
 8019708:	2201      	movs	r2, #1
 801970a:	4251      	negs	r1, r2
 801970c:	482c      	ldr	r0, [pc, #176]	; (80197c0 <SX1276Init+0xec>)
 801970e:	2200      	movs	r2, #0
 8019710:	9200      	str	r2, [sp, #0]
 8019712:	2200      	movs	r2, #0
 8019714:	f003 fa88 	bl	801cc28 <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 8019718:	2001      	movs	r0, #1
 801971a:	f7ec fbcd 	bl	8005eb8 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 801971e:	f001 fbf1 	bl	801af04 <SX1276Reset>

    RxChainCalibration( );
 8019722:	f000 f937 	bl	8019994 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8019726:	2000      	movs	r0, #0
 8019728:	f001 fbf3 	bl	801af12 <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 801972c:	4b25      	ldr	r3, [pc, #148]	; (80197c4 <SX1276Init+0xf0>)
 801972e:	0018      	movs	r0, r3
 8019730:	f7ec fd22 	bl	8006178 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019734:	230f      	movs	r3, #15
 8019736:	18fb      	adds	r3, r7, r3
 8019738:	2200      	movs	r2, #0
 801973a:	701a      	strb	r2, [r3, #0]
 801973c:	e025      	b.n	801978a <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 801973e:	240f      	movs	r4, #15
 8019740:	193b      	adds	r3, r7, r4
 8019742:	781a      	ldrb	r2, [r3, #0]
 8019744:	4920      	ldr	r1, [pc, #128]	; (80197c8 <SX1276Init+0xf4>)
 8019746:	0013      	movs	r3, r2
 8019748:	005b      	lsls	r3, r3, #1
 801974a:	189b      	adds	r3, r3, r2
 801974c:	5c5b      	ldrb	r3, [r3, r1]
 801974e:	0018      	movs	r0, r3
 8019750:	f001 fc4c 	bl	801afec <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8019754:	193b      	adds	r3, r7, r4
 8019756:	781a      	ldrb	r2, [r3, #0]
 8019758:	491b      	ldr	r1, [pc, #108]	; (80197c8 <SX1276Init+0xf4>)
 801975a:	0013      	movs	r3, r2
 801975c:	005b      	lsls	r3, r3, #1
 801975e:	189b      	adds	r3, r3, r2
 8019760:	18cb      	adds	r3, r1, r3
 8019762:	3301      	adds	r3, #1
 8019764:	781b      	ldrb	r3, [r3, #0]
 8019766:	0018      	movs	r0, r3
 8019768:	193b      	adds	r3, r7, r4
 801976a:	781a      	ldrb	r2, [r3, #0]
 801976c:	4916      	ldr	r1, [pc, #88]	; (80197c8 <SX1276Init+0xf4>)
 801976e:	0013      	movs	r3, r2
 8019770:	005b      	lsls	r3, r3, #1
 8019772:	189b      	adds	r3, r3, r2
 8019774:	18cb      	adds	r3, r1, r3
 8019776:	3302      	adds	r3, #2
 8019778:	781b      	ldrb	r3, [r3, #0]
 801977a:	0019      	movs	r1, r3
 801977c:	f001 fc90 	bl	801b0a0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019780:	193b      	adds	r3, r7, r4
 8019782:	781a      	ldrb	r2, [r3, #0]
 8019784:	193b      	adds	r3, r7, r4
 8019786:	3201      	adds	r2, #1
 8019788:	701a      	strb	r2, [r3, #0]
 801978a:	230f      	movs	r3, #15
 801978c:	18fb      	adds	r3, r7, r3
 801978e:	781b      	ldrb	r3, [r3, #0]
 8019790:	2b0f      	cmp	r3, #15
 8019792:	d9d4      	bls.n	801973e <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 8019794:	2000      	movs	r0, #0
 8019796:	f001 fc29 	bl	801afec <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 801979a:	4b0c      	ldr	r3, [pc, #48]	; (80197cc <SX1276Init+0xf8>)
 801979c:	2200      	movs	r2, #0
 801979e:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 80197a0:	f7ec fb84 	bl	8005eac <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 80197a4:	0003      	movs	r3, r0
 80197a6:	3302      	adds	r3, #2
}
 80197a8:	0018      	movs	r0, r3
 80197aa:	46bd      	mov	sp, r7
 80197ac:	b005      	add	sp, #20
 80197ae:	bd90      	pop	{r4, r7, pc}
 80197b0:	20000e80 	.word	0x20000e80
 80197b4:	0801b519 	.word	0x0801b519
 80197b8:	20001720 	.word	0x20001720
 80197bc:	200017b8 	.word	0x200017b8
 80197c0:	20001738 	.word	0x20001738
 80197c4:	200001b0 	.word	0x200001b0
 80197c8:	0801fde8 	.word	0x0801fde8
 80197cc:	20001750 	.word	0x20001750

080197d0 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 80197d4:	4b02      	ldr	r3, [pc, #8]	; (80197e0 <SX1276GetStatus+0x10>)
 80197d6:	791b      	ldrb	r3, [r3, #4]
}
 80197d8:	0018      	movs	r0, r3
 80197da:	46bd      	mov	sp, r7
 80197dc:	bd80      	pop	{r7, pc}
 80197de:	46c0      	nop			; (mov r8, r8)
 80197e0:	20001750 	.word	0x20001750

080197e4 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80197e4:	b590      	push	{r4, r7, lr}
 80197e6:	b087      	sub	sp, #28
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 80197ec:	4b1d      	ldr	r3, [pc, #116]	; (8019864 <SX1276SetChannel+0x80>)
 80197ee:	687a      	ldr	r2, [r7, #4]
 80197f0:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	491c      	ldr	r1, [pc, #112]	; (8019868 <SX1276SetChannel+0x84>)
 80197f6:	0018      	movs	r0, r3
 80197f8:	f7e6 fc98 	bl	800012c <__udivsi3>
 80197fc:	0003      	movs	r3, r0
 80197fe:	617b      	str	r3, [r7, #20]
 8019800:	6979      	ldr	r1, [r7, #20]
 8019802:	000b      	movs	r3, r1
 8019804:	015b      	lsls	r3, r3, #5
 8019806:	1a5b      	subs	r3, r3, r1
 8019808:	019a      	lsls	r2, r3, #6
 801980a:	1ad2      	subs	r2, r2, r3
 801980c:	00d2      	lsls	r2, r2, #3
 801980e:	1853      	adds	r3, r2, r1
 8019810:	687a      	ldr	r2, [r7, #4]
 8019812:	1ad3      	subs	r3, r2, r3
 8019814:	613b      	str	r3, [r7, #16]
 8019816:	697b      	ldr	r3, [r7, #20]
 8019818:	021c      	lsls	r4, r3, #8
 801981a:	693b      	ldr	r3, [r7, #16]
 801981c:	021b      	lsls	r3, r3, #8
 801981e:	4a13      	ldr	r2, [pc, #76]	; (801986c <SX1276SetChannel+0x88>)
 8019820:	4694      	mov	ip, r2
 8019822:	4463      	add	r3, ip
 8019824:	4910      	ldr	r1, [pc, #64]	; (8019868 <SX1276SetChannel+0x84>)
 8019826:	0018      	movs	r0, r3
 8019828:	f7e6 fc80 	bl	800012c <__udivsi3>
 801982c:	0003      	movs	r3, r0
 801982e:	18e3      	adds	r3, r4, r3
 8019830:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	0c1b      	lsrs	r3, r3, #16
 8019836:	b2db      	uxtb	r3, r3
 8019838:	0019      	movs	r1, r3
 801983a:	2006      	movs	r0, #6
 801983c:	f001 fc30 	bl	801b0a0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	0a1b      	lsrs	r3, r3, #8
 8019844:	b2db      	uxtb	r3, r3
 8019846:	0019      	movs	r1, r3
 8019848:	2007      	movs	r0, #7
 801984a:	f001 fc29 	bl	801b0a0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	b2db      	uxtb	r3, r3
 8019852:	0019      	movs	r1, r3
 8019854:	2008      	movs	r0, #8
 8019856:	f001 fc23 	bl	801b0a0 <SX1276Write>
}
 801985a:	46c0      	nop			; (mov r8, r8)
 801985c:	46bd      	mov	sp, r7
 801985e:	b007      	add	sp, #28
 8019860:	bd90      	pop	{r4, r7, pc}
 8019862:	46c0      	nop			; (mov r8, r8)
 8019864:	20001750 	.word	0x20001750
 8019868:	00003d09 	.word	0x00003d09
 801986c:	00001e84 	.word	0x00001e84

08019870 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019870:	b5b0      	push	{r4, r5, r7, lr}
 8019872:	b086      	sub	sp, #24
 8019874:	af00      	add	r7, sp, #0
 8019876:	60f8      	str	r0, [r7, #12]
 8019878:	60b9      	str	r1, [r7, #8]
 801987a:	603b      	str	r3, [r7, #0]
 801987c:	1dbb      	adds	r3, r7, #6
 801987e:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8019880:	2317      	movs	r3, #23
 8019882:	18fb      	adds	r3, r7, r3
 8019884:	2201      	movs	r2, #1
 8019886:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8019888:	2314      	movs	r3, #20
 801988a:	18fb      	adds	r3, r7, r3
 801988c:	2200      	movs	r2, #0
 801988e:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8019890:	2300      	movs	r3, #0
 8019892:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 8019894:	f001 f80c 	bl	801a8b0 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 8019898:	2000      	movs	r0, #0
 801989a:	f001 fba7 	bl	801afec <SX1276SetModem>

    SX1276SetChannel( freq );
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	0018      	movs	r0, r3
 80198a2:	f7ff ff9f 	bl	80197e4 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80198a6:	68bb      	ldr	r3, [r7, #8]
 80198a8:	0018      	movs	r0, r3
 80198aa:	f001 fd07 	bl	801b2bc <GetFskBandwidthRegValue>
 80198ae:	0003      	movs	r3, r0
 80198b0:	0019      	movs	r1, r3
 80198b2:	2012      	movs	r0, #18
 80198b4:	f001 fbf4 	bl	801b0a0 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80198b8:	68bb      	ldr	r3, [r7, #8]
 80198ba:	0018      	movs	r0, r3
 80198bc:	f001 fcfe 	bl	801b2bc <GetFskBandwidthRegValue>
 80198c0:	0003      	movs	r3, r0
 80198c2:	0019      	movs	r1, r3
 80198c4:	2013      	movs	r0, #19
 80198c6:	f001 fbeb 	bl	801b0a0 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80198ca:	2005      	movs	r0, #5
 80198cc:	f001 fb21 	bl	801af12 <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 80198d0:	2001      	movs	r0, #1
 80198d2:	f7eb fc96 	bl	8005202 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80198d6:	f003 fb87 	bl	801cfe8 <UTIL_TIMER_GetCurrentTime>
 80198da:	0003      	movs	r3, r0
 80198dc:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80198de:	e013      	b.n	8019908 <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 80198e0:	2514      	movs	r5, #20
 80198e2:	197c      	adds	r4, r7, r5
 80198e4:	2000      	movs	r0, #0
 80198e6:	f001 fac1 	bl	801ae6c <SX1276ReadRssi>
 80198ea:	0003      	movs	r3, r0
 80198ec:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 80198ee:	197a      	adds	r2, r7, r5
 80198f0:	1dbb      	adds	r3, r7, #6
 80198f2:	2100      	movs	r1, #0
 80198f4:	5e52      	ldrsh	r2, [r2, r1]
 80198f6:	2100      	movs	r1, #0
 80198f8:	5e5b      	ldrsh	r3, [r3, r1]
 80198fa:	429a      	cmp	r2, r3
 80198fc:	dd04      	ble.n	8019908 <SX1276IsChannelFree+0x98>
        {
            status = false;
 80198fe:	2317      	movs	r3, #23
 8019900:	18fb      	adds	r3, r7, r3
 8019902:	2200      	movs	r2, #0
 8019904:	701a      	strb	r2, [r3, #0]
            break;
 8019906:	e007      	b.n	8019918 <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019908:	693b      	ldr	r3, [r7, #16]
 801990a:	0018      	movs	r0, r3
 801990c:	f003 fb80 	bl	801d010 <UTIL_TIMER_GetElapsedTime>
 8019910:	0002      	movs	r2, r0
 8019912:	683b      	ldr	r3, [r7, #0]
 8019914:	4293      	cmp	r3, r2
 8019916:	d8e3      	bhi.n	80198e0 <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 8019918:	f000 ffca 	bl	801a8b0 <SX1276SetSleep>
    return status;
 801991c:	2317      	movs	r3, #23
 801991e:	18fb      	adds	r3, r7, r3
 8019920:	781b      	ldrb	r3, [r3, #0]
}
 8019922:	0018      	movs	r0, r3
 8019924:	46bd      	mov	sp, r7
 8019926:	b006      	add	sp, #24
 8019928:	bdb0      	pop	{r4, r5, r7, pc}

0801992a <SX1276Random>:

uint32_t SX1276Random( void )
{
 801992a:	b580      	push	{r7, lr}
 801992c:	b082      	sub	sp, #8
 801992e:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8019930:	2300      	movs	r3, #0
 8019932:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8019934:	2001      	movs	r0, #1
 8019936:	f001 fb59 	bl	801afec <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801993a:	21ff      	movs	r1, #255	; 0xff
 801993c:	2011      	movs	r0, #17
 801993e:	f001 fbaf 	bl	801b0a0 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8019942:	2005      	movs	r0, #5
 8019944:	f001 fae5 	bl	801af12 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8019948:	1dfb      	adds	r3, r7, #7
 801994a:	2200      	movs	r2, #0
 801994c:	701a      	strb	r2, [r3, #0]
 801994e:	e015      	b.n	801997c <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 8019950:	2001      	movs	r0, #1
 8019952:	f7eb fc56 	bl	8005202 <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8019956:	202c      	movs	r0, #44	; 0x2c
 8019958:	f001 fbb3 	bl	801b0c2 <SX1276Read>
 801995c:	0003      	movs	r3, r0
 801995e:	001a      	movs	r2, r3
 8019960:	2301      	movs	r3, #1
 8019962:	401a      	ands	r2, r3
 8019964:	1dfb      	adds	r3, r7, #7
 8019966:	781b      	ldrb	r3, [r3, #0]
 8019968:	409a      	lsls	r2, r3
 801996a:	0013      	movs	r3, r2
 801996c:	683a      	ldr	r2, [r7, #0]
 801996e:	4313      	orrs	r3, r2
 8019970:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8019972:	1dfb      	adds	r3, r7, #7
 8019974:	781a      	ldrb	r2, [r3, #0]
 8019976:	1dfb      	adds	r3, r7, #7
 8019978:	3201      	adds	r2, #1
 801997a:	701a      	strb	r2, [r3, #0]
 801997c:	1dfb      	adds	r3, r7, #7
 801997e:	781b      	ldrb	r3, [r3, #0]
 8019980:	2b1f      	cmp	r3, #31
 8019982:	d9e5      	bls.n	8019950 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8019984:	f000 ff94 	bl	801a8b0 <SX1276SetSleep>

    return rnd;
 8019988:	683b      	ldr	r3, [r7, #0]
}
 801998a:	0018      	movs	r0, r3
 801998c:	46bd      	mov	sp, r7
 801998e:	b002      	add	sp, #8
 8019990:	bd80      	pop	{r7, pc}
	...

08019994 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8019994:	b590      	push	{r4, r7, lr}
 8019996:	b087      	sub	sp, #28
 8019998:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 801999a:	2317      	movs	r3, #23
 801999c:	18fc      	adds	r4, r7, r3
 801999e:	2009      	movs	r0, #9
 80199a0:	f001 fb8f 	bl	801b0c2 <SX1276Read>
 80199a4:	0003      	movs	r3, r0
 80199a6:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80199a8:	2006      	movs	r0, #6
 80199aa:	f001 fb8a 	bl	801b0c2 <SX1276Read>
 80199ae:	0003      	movs	r3, r0
 80199b0:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80199b2:	2007      	movs	r0, #7
 80199b4:	f001 fb85 	bl	801b0c2 <SX1276Read>
 80199b8:	0003      	movs	r3, r0
 80199ba:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80199bc:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80199be:	2008      	movs	r0, #8
 80199c0:	f001 fb7f 	bl	801b0c2 <SX1276Read>
 80199c4:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80199c6:	4323      	orrs	r3, r4
 80199c8:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80199ca:	693b      	ldr	r3, [r7, #16]
 80199cc:	0a1b      	lsrs	r3, r3, #8
 80199ce:	60fb      	str	r3, [r7, #12]
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	021b      	lsls	r3, r3, #8
 80199d4:	693a      	ldr	r2, [r7, #16]
 80199d6:	1ad3      	subs	r3, r2, r3
 80199d8:	60bb      	str	r3, [r7, #8]
 80199da:	68f9      	ldr	r1, [r7, #12]
 80199dc:	000b      	movs	r3, r1
 80199de:	015b      	lsls	r3, r3, #5
 80199e0:	1a5b      	subs	r3, r3, r1
 80199e2:	019a      	lsls	r2, r3, #6
 80199e4:	1ad2      	subs	r2, r2, r3
 80199e6:	00d2      	lsls	r2, r2, #3
 80199e8:	1850      	adds	r0, r2, r1
 80199ea:	68b9      	ldr	r1, [r7, #8]
 80199ec:	000b      	movs	r3, r1
 80199ee:	015b      	lsls	r3, r3, #5
 80199f0:	1a5b      	subs	r3, r3, r1
 80199f2:	019a      	lsls	r2, r3, #6
 80199f4:	1ad2      	subs	r2, r2, r3
 80199f6:	00d2      	lsls	r2, r2, #3
 80199f8:	1853      	adds	r3, r2, r1
 80199fa:	3380      	adds	r3, #128	; 0x80
 80199fc:	0a1b      	lsrs	r3, r3, #8
 80199fe:	18c3      	adds	r3, r0, r3
 8019a00:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8019a02:	2100      	movs	r1, #0
 8019a04:	2009      	movs	r0, #9
 8019a06:	f001 fb4b 	bl	801b0a0 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8019a0a:	203b      	movs	r0, #59	; 0x3b
 8019a0c:	f001 fb59 	bl	801b0c2 <SX1276Read>
 8019a10:	0003      	movs	r3, r0
 8019a12:	001a      	movs	r2, r3
 8019a14:	2340      	movs	r3, #64	; 0x40
 8019a16:	4313      	orrs	r3, r2
 8019a18:	b2db      	uxtb	r3, r3
 8019a1a:	0019      	movs	r1, r3
 8019a1c:	203b      	movs	r0, #59	; 0x3b
 8019a1e:	f001 fb3f 	bl	801b0a0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8019a22:	46c0      	nop			; (mov r8, r8)
 8019a24:	203b      	movs	r0, #59	; 0x3b
 8019a26:	f001 fb4c 	bl	801b0c2 <SX1276Read>
 8019a2a:	0003      	movs	r3, r0
 8019a2c:	001a      	movs	r2, r3
 8019a2e:	2320      	movs	r3, #32
 8019a30:	4013      	ands	r3, r2
 8019a32:	2b20      	cmp	r3, #32
 8019a34:	d0f6      	beq.n	8019a24 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8019a36:	4b14      	ldr	r3, [pc, #80]	; (8019a88 <RxChainCalibration+0xf4>)
 8019a38:	0018      	movs	r0, r3
 8019a3a:	f7ff fed3 	bl	80197e4 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8019a3e:	203b      	movs	r0, #59	; 0x3b
 8019a40:	f001 fb3f 	bl	801b0c2 <SX1276Read>
 8019a44:	0003      	movs	r3, r0
 8019a46:	001a      	movs	r2, r3
 8019a48:	2340      	movs	r3, #64	; 0x40
 8019a4a:	4313      	orrs	r3, r2
 8019a4c:	b2db      	uxtb	r3, r3
 8019a4e:	0019      	movs	r1, r3
 8019a50:	203b      	movs	r0, #59	; 0x3b
 8019a52:	f001 fb25 	bl	801b0a0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8019a56:	46c0      	nop			; (mov r8, r8)
 8019a58:	203b      	movs	r0, #59	; 0x3b
 8019a5a:	f001 fb32 	bl	801b0c2 <SX1276Read>
 8019a5e:	0003      	movs	r3, r0
 8019a60:	001a      	movs	r2, r3
 8019a62:	2320      	movs	r3, #32
 8019a64:	4013      	ands	r3, r2
 8019a66:	2b20      	cmp	r3, #32
 8019a68:	d0f6      	beq.n	8019a58 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8019a6a:	2317      	movs	r3, #23
 8019a6c:	18fb      	adds	r3, r7, r3
 8019a6e:	781b      	ldrb	r3, [r3, #0]
 8019a70:	0019      	movs	r1, r3
 8019a72:	2009      	movs	r0, #9
 8019a74:	f001 fb14 	bl	801b0a0 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	0018      	movs	r0, r3
 8019a7c:	f7ff feb2 	bl	80197e4 <SX1276SetChannel>
}
 8019a80:	46c0      	nop			; (mov r8, r8)
 8019a82:	46bd      	mov	sp, r7
 8019a84:	b007      	add	sp, #28
 8019a86:	bd90      	pop	{r4, r7, pc}
 8019a88:	33bca100 	.word	0x33bca100

08019a8c <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8019a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a8e:	46c6      	mov	lr, r8
 8019a90:	b500      	push	{lr}
 8019a92:	b084      	sub	sp, #16
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	60b9      	str	r1, [r7, #8]
 8019a98:	607a      	str	r2, [r7, #4]
 8019a9a:	0019      	movs	r1, r3
 8019a9c:	240f      	movs	r4, #15
 8019a9e:	193b      	adds	r3, r7, r4
 8019aa0:	1c02      	adds	r2, r0, #0
 8019aa2:	701a      	strb	r2, [r3, #0]
 8019aa4:	230e      	movs	r3, #14
 8019aa6:	18fb      	adds	r3, r7, r3
 8019aa8:	1c0a      	adds	r2, r1, #0
 8019aaa:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8019aac:	193b      	adds	r3, r7, r4
 8019aae:	781b      	ldrb	r3, [r3, #0]
 8019ab0:	0018      	movs	r0, r3
 8019ab2:	f001 fa9b 	bl	801afec <SX1276SetModem>

    switch( modem )
 8019ab6:	193b      	adds	r3, r7, r4
 8019ab8:	781b      	ldrb	r3, [r3, #0]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d003      	beq.n	8019ac6 <SX1276SetRxConfig+0x3a>
 8019abe:	2b01      	cmp	r3, #1
 8019ac0:	d100      	bne.n	8019ac4 <SX1276SetRxConfig+0x38>
 8019ac2:	e0fb      	b.n	8019cbc <SX1276SetRxConfig+0x230>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8019ac4:	e26e      	b.n	8019fa4 <SX1276SetRxConfig+0x518>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8019ac6:	4bbd      	ldr	r3, [pc, #756]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019ac8:	68ba      	ldr	r2, [r7, #8]
 8019aca:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8019acc:	4bbb      	ldr	r3, [pc, #748]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019ace:	687a      	ldr	r2, [r7, #4]
 8019ad0:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8019ad2:	4bba      	ldr	r3, [pc, #744]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ad6:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019ad8:	4bb8      	ldr	r3, [pc, #736]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019ada:	222c      	movs	r2, #44	; 0x2c
 8019adc:	2108      	movs	r1, #8
 8019ade:	468c      	mov	ip, r1
 8019ae0:	44bc      	add	ip, r7
 8019ae2:	4462      	add	r2, ip
 8019ae4:	2122      	movs	r1, #34	; 0x22
 8019ae6:	7812      	ldrb	r2, [r2, #0]
 8019ae8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8019aea:	4bb4      	ldr	r3, [pc, #720]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019aec:	2130      	movs	r1, #48	; 0x30
 8019aee:	2408      	movs	r4, #8
 8019af0:	193a      	adds	r2, r7, r4
 8019af2:	1852      	adds	r2, r2, r1
 8019af4:	2123      	movs	r1, #35	; 0x23
 8019af6:	7812      	ldrb	r2, [r2, #0]
 8019af8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019afa:	4bb0      	ldr	r3, [pc, #704]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019afc:	2034      	movs	r0, #52	; 0x34
 8019afe:	193a      	adds	r2, r7, r4
 8019b00:	1812      	adds	r2, r2, r0
 8019b02:	2124      	movs	r1, #36	; 0x24
 8019b04:	7812      	ldrb	r2, [r2, #0]
 8019b06:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019b08:	4bac      	ldr	r3, [pc, #688]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019b0a:	2220      	movs	r2, #32
 8019b0c:	2020      	movs	r0, #32
 8019b0e:	4684      	mov	ip, r0
 8019b10:	2108      	movs	r1, #8
 8019b12:	4688      	mov	r8, r1
 8019b14:	44b8      	add	r8, r7
 8019b16:	44c4      	add	ip, r8
 8019b18:	4462      	add	r2, ip
 8019b1a:	2125      	movs	r1, #37	; 0x25
 8019b1c:	7812      	ldrb	r2, [r2, #0]
 8019b1e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8019b20:	4ba6      	ldr	r3, [pc, #664]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019b22:	2224      	movs	r2, #36	; 0x24
 8019b24:	2020      	movs	r0, #32
 8019b26:	4684      	mov	ip, r0
 8019b28:	2108      	movs	r1, #8
 8019b2a:	4688      	mov	r8, r1
 8019b2c:	44b8      	add	r8, r7
 8019b2e:	44c4      	add	ip, r8
 8019b30:	4462      	add	r2, ip
 8019b32:	2126      	movs	r1, #38	; 0x26
 8019b34:	7812      	ldrb	r2, [r2, #0]
 8019b36:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019b38:	4ba0      	ldr	r3, [pc, #640]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019b3a:	2624      	movs	r6, #36	; 0x24
 8019b3c:	193a      	adds	r2, r7, r4
 8019b3e:	1992      	adds	r2, r2, r6
 8019b40:	8812      	ldrh	r2, [r2, #0]
 8019b42:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8019b44:	2328      	movs	r3, #40	; 0x28
 8019b46:	2208      	movs	r2, #8
 8019b48:	4694      	mov	ip, r2
 8019b4a:	44bc      	add	ip, r7
 8019b4c:	4463      	add	r3, ip
 8019b4e:	881b      	ldrh	r3, [r3, #0]
 8019b50:	0018      	movs	r0, r3
 8019b52:	f7e9 f83d 	bl	8002bd0 <__aeabi_i2d>
 8019b56:	0004      	movs	r4, r0
 8019b58:	000d      	movs	r5, r1
 8019b5a:	6878      	ldr	r0, [r7, #4]
 8019b5c:	f7e9 f868 	bl	8002c30 <__aeabi_ui2d>
 8019b60:	0002      	movs	r2, r0
 8019b62:	000b      	movs	r3, r1
 8019b64:	2000      	movs	r0, #0
 8019b66:	4996      	ldr	r1, [pc, #600]	; (8019dc0 <SX1276SetRxConfig+0x334>)
 8019b68:	f7e7 fdf8 	bl	800175c <__aeabi_ddiv>
 8019b6c:	0002      	movs	r2, r0
 8019b6e:	000b      	movs	r3, r1
 8019b70:	0010      	movs	r0, r2
 8019b72:	0019      	movs	r1, r3
 8019b74:	2200      	movs	r2, #0
 8019b76:	4b93      	ldr	r3, [pc, #588]	; (8019dc4 <SX1276SetRxConfig+0x338>)
 8019b78:	f7e8 f9f6 	bl	8001f68 <__aeabi_dmul>
 8019b7c:	0002      	movs	r2, r0
 8019b7e:	000b      	movs	r3, r1
 8019b80:	0020      	movs	r0, r4
 8019b82:	0029      	movs	r1, r5
 8019b84:	f7e8 f9f0 	bl	8001f68 <__aeabi_dmul>
 8019b88:	0002      	movs	r2, r0
 8019b8a:	000b      	movs	r3, r1
 8019b8c:	0010      	movs	r0, r2
 8019b8e:	0019      	movs	r1, r3
 8019b90:	2200      	movs	r2, #0
 8019b92:	4b8d      	ldr	r3, [pc, #564]	; (8019dc8 <SX1276SetRxConfig+0x33c>)
 8019b94:	f7e8 f9e8 	bl	8001f68 <__aeabi_dmul>
 8019b98:	0002      	movs	r2, r0
 8019b9a:	000b      	movs	r3, r1
 8019b9c:	0010      	movs	r0, r2
 8019b9e:	0019      	movs	r1, r3
 8019ba0:	f7e6 fd36 	bl	8000610 <__aeabi_d2uiz>
 8019ba4:	0002      	movs	r2, r0
 8019ba6:	4b85      	ldr	r3, [pc, #532]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019ba8:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019baa:	6878      	ldr	r0, [r7, #4]
 8019bac:	f7e9 f840 	bl	8002c30 <__aeabi_ui2d>
 8019bb0:	0002      	movs	r2, r0
 8019bb2:	000b      	movs	r3, r1
 8019bb4:	2000      	movs	r0, #0
 8019bb6:	4985      	ldr	r1, [pc, #532]	; (8019dcc <SX1276SetRxConfig+0x340>)
 8019bb8:	f7e7 fdd0 	bl	800175c <__aeabi_ddiv>
 8019bbc:	0002      	movs	r2, r0
 8019bbe:	000b      	movs	r3, r1
 8019bc0:	0010      	movs	r0, r2
 8019bc2:	0019      	movs	r1, r3
 8019bc4:	f7e6 fd24 	bl	8000610 <__aeabi_d2uiz>
 8019bc8:	0003      	movs	r3, r0
 8019bca:	b29b      	uxth	r3, r3
 8019bcc:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	0a1b      	lsrs	r3, r3, #8
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	0019      	movs	r1, r3
 8019bd6:	2002      	movs	r0, #2
 8019bd8:	f001 fa62 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	b2db      	uxtb	r3, r3
 8019be0:	0019      	movs	r1, r3
 8019be2:	2003      	movs	r0, #3
 8019be4:	f001 fa5c 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8019be8:	68bb      	ldr	r3, [r7, #8]
 8019bea:	0018      	movs	r0, r3
 8019bec:	f001 fb66 	bl	801b2bc <GetFskBandwidthRegValue>
 8019bf0:	0003      	movs	r3, r0
 8019bf2:	0019      	movs	r1, r3
 8019bf4:	2012      	movs	r0, #18
 8019bf6:	f001 fa53 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8019bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bfc:	0018      	movs	r0, r3
 8019bfe:	f001 fb5d 	bl	801b2bc <GetFskBandwidthRegValue>
 8019c02:	0003      	movs	r3, r0
 8019c04:	0019      	movs	r1, r3
 8019c06:	2013      	movs	r0, #19
 8019c08:	f001 fa4a 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019c0c:	2408      	movs	r4, #8
 8019c0e:	193b      	adds	r3, r7, r4
 8019c10:	199b      	adds	r3, r3, r6
 8019c12:	881b      	ldrh	r3, [r3, #0]
 8019c14:	0a1b      	lsrs	r3, r3, #8
 8019c16:	b29b      	uxth	r3, r3
 8019c18:	b2db      	uxtb	r3, r3
 8019c1a:	0019      	movs	r1, r3
 8019c1c:	2025      	movs	r0, #37	; 0x25
 8019c1e:	f001 fa3f 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019c22:	193b      	adds	r3, r7, r4
 8019c24:	199b      	adds	r3, r3, r6
 8019c26:	881b      	ldrh	r3, [r3, #0]
 8019c28:	b2db      	uxtb	r3, r3
 8019c2a:	0019      	movs	r1, r3
 8019c2c:	2026      	movs	r0, #38	; 0x26
 8019c2e:	f001 fa37 	bl	801b0a0 <SX1276Write>
            if( fixLen == 1 )
 8019c32:	222c      	movs	r2, #44	; 0x2c
 8019c34:	193b      	adds	r3, r7, r4
 8019c36:	189b      	adds	r3, r3, r2
 8019c38:	781b      	ldrb	r3, [r3, #0]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d008      	beq.n	8019c50 <SX1276SetRxConfig+0x1c4>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8019c3e:	2130      	movs	r1, #48	; 0x30
 8019c40:	193b      	adds	r3, r7, r4
 8019c42:	185b      	adds	r3, r3, r1
 8019c44:	781b      	ldrb	r3, [r3, #0]
 8019c46:	0019      	movs	r1, r3
 8019c48:	2032      	movs	r0, #50	; 0x32
 8019c4a:	f001 fa29 	bl	801b0a0 <SX1276Write>
 8019c4e:	e003      	b.n	8019c58 <SX1276SetRxConfig+0x1cc>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8019c50:	21ff      	movs	r1, #255	; 0xff
 8019c52:	2032      	movs	r0, #50	; 0x32
 8019c54:	f001 fa24 	bl	801b0a0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019c58:	2030      	movs	r0, #48	; 0x30
 8019c5a:	f001 fa32 	bl	801b0c2 <SX1276Read>
 8019c5e:	0003      	movs	r3, r0
 8019c60:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8019c62:	226f      	movs	r2, #111	; 0x6f
 8019c64:	4013      	ands	r3, r2
 8019c66:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019c68:	232c      	movs	r3, #44	; 0x2c
 8019c6a:	2108      	movs	r1, #8
 8019c6c:	468c      	mov	ip, r1
 8019c6e:	44bc      	add	ip, r7
 8019c70:	4463      	add	r3, ip
 8019c72:	781b      	ldrb	r3, [r3, #0]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d001      	beq.n	8019c7c <SX1276SetRxConfig+0x1f0>
 8019c78:	2300      	movs	r3, #0
 8019c7a:	e001      	b.n	8019c80 <SX1276SetRxConfig+0x1f4>
 8019c7c:	2380      	movs	r3, #128	; 0x80
 8019c7e:	425b      	negs	r3, r3
 8019c80:	4313      	orrs	r3, r2
 8019c82:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019c84:	2334      	movs	r3, #52	; 0x34
 8019c86:	2108      	movs	r1, #8
 8019c88:	468c      	mov	ip, r1
 8019c8a:	44bc      	add	ip, r7
 8019c8c:	4463      	add	r3, ip
 8019c8e:	781b      	ldrb	r3, [r3, #0]
 8019c90:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8019c92:	b25b      	sxtb	r3, r3
 8019c94:	4313      	orrs	r3, r2
 8019c96:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8019c98:	b2db      	uxtb	r3, r3
 8019c9a:	0019      	movs	r1, r3
 8019c9c:	2030      	movs	r0, #48	; 0x30
 8019c9e:	f001 f9ff 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8019ca2:	2031      	movs	r0, #49	; 0x31
 8019ca4:	f001 fa0d 	bl	801b0c2 <SX1276Read>
 8019ca8:	0003      	movs	r3, r0
 8019caa:	001a      	movs	r2, r3
 8019cac:	2340      	movs	r3, #64	; 0x40
 8019cae:	4313      	orrs	r3, r2
 8019cb0:	b2db      	uxtb	r3, r3
 8019cb2:	0019      	movs	r1, r3
 8019cb4:	2031      	movs	r0, #49	; 0x31
 8019cb6:	f001 f9f3 	bl	801b0a0 <SX1276Write>
        break;
 8019cba:	e173      	b.n	8019fa4 <SX1276SetRxConfig+0x518>
            if( bandwidth > 2 )
 8019cbc:	68bb      	ldr	r3, [r7, #8]
 8019cbe:	2b02      	cmp	r3, #2
 8019cc0:	d900      	bls.n	8019cc4 <SX1276SetRxConfig+0x238>
                while( 1 );
 8019cc2:	e7fe      	b.n	8019cc2 <SX1276SetRxConfig+0x236>
            bandwidth += 7;
 8019cc4:	68bb      	ldr	r3, [r7, #8]
 8019cc6:	3307      	adds	r3, #7
 8019cc8:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8019cca:	4b3c      	ldr	r3, [pc, #240]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019ccc:	68ba      	ldr	r2, [r7, #8]
 8019cce:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8019cd0:	4b3a      	ldr	r3, [pc, #232]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019cd2:	687a      	ldr	r2, [r7, #4]
 8019cd4:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8019cd6:	4b39      	ldr	r3, [pc, #228]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019cd8:	220e      	movs	r2, #14
 8019cda:	18ba      	adds	r2, r7, r2
 8019cdc:	214d      	movs	r1, #77	; 0x4d
 8019cde:	7812      	ldrb	r2, [r2, #0]
 8019ce0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8019ce2:	4b36      	ldr	r3, [pc, #216]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019ce4:	2224      	movs	r2, #36	; 0x24
 8019ce6:	2108      	movs	r1, #8
 8019ce8:	468c      	mov	ip, r1
 8019cea:	44bc      	add	ip, r7
 8019cec:	4462      	add	r2, ip
 8019cee:	214e      	movs	r1, #78	; 0x4e
 8019cf0:	8812      	ldrh	r2, [r2, #0]
 8019cf2:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019cf4:	4b31      	ldr	r3, [pc, #196]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019cf6:	222c      	movs	r2, #44	; 0x2c
 8019cf8:	2108      	movs	r1, #8
 8019cfa:	468c      	mov	ip, r1
 8019cfc:	44bc      	add	ip, r7
 8019cfe:	4462      	add	r2, ip
 8019d00:	2150      	movs	r1, #80	; 0x50
 8019d02:	7812      	ldrb	r2, [r2, #0]
 8019d04:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8019d06:	4b2d      	ldr	r3, [pc, #180]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019d08:	2230      	movs	r2, #48	; 0x30
 8019d0a:	2108      	movs	r1, #8
 8019d0c:	468c      	mov	ip, r1
 8019d0e:	44bc      	add	ip, r7
 8019d10:	4462      	add	r2, ip
 8019d12:	2151      	movs	r1, #81	; 0x51
 8019d14:	7812      	ldrb	r2, [r2, #0]
 8019d16:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019d18:	4b28      	ldr	r3, [pc, #160]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019d1a:	2234      	movs	r2, #52	; 0x34
 8019d1c:	2108      	movs	r1, #8
 8019d1e:	468c      	mov	ip, r1
 8019d20:	44bc      	add	ip, r7
 8019d22:	4462      	add	r2, ip
 8019d24:	2152      	movs	r1, #82	; 0x52
 8019d26:	7812      	ldrb	r2, [r2, #0]
 8019d28:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019d2a:	4b24      	ldr	r3, [pc, #144]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019d2c:	2238      	movs	r2, #56	; 0x38
 8019d2e:	2108      	movs	r1, #8
 8019d30:	468c      	mov	ip, r1
 8019d32:	44bc      	add	ip, r7
 8019d34:	4462      	add	r2, ip
 8019d36:	2153      	movs	r1, #83	; 0x53
 8019d38:	7812      	ldrb	r2, [r2, #0]
 8019d3a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019d3c:	4b1f      	ldr	r3, [pc, #124]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019d3e:	223c      	movs	r2, #60	; 0x3c
 8019d40:	2108      	movs	r1, #8
 8019d42:	468c      	mov	ip, r1
 8019d44:	44bc      	add	ip, r7
 8019d46:	4462      	add	r2, ip
 8019d48:	2154      	movs	r1, #84	; 0x54
 8019d4a:	7812      	ldrb	r2, [r2, #0]
 8019d4c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019d4e:	4b1b      	ldr	r3, [pc, #108]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019d50:	2220      	movs	r2, #32
 8019d52:	2120      	movs	r1, #32
 8019d54:	468c      	mov	ip, r1
 8019d56:	2108      	movs	r1, #8
 8019d58:	4688      	mov	r8, r1
 8019d5a:	44b8      	add	r8, r7
 8019d5c:	44c4      	add	ip, r8
 8019d5e:	4462      	add	r2, ip
 8019d60:	2155      	movs	r1, #85	; 0x55
 8019d62:	7812      	ldrb	r2, [r2, #0]
 8019d64:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8019d66:	4b15      	ldr	r3, [pc, #84]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019d68:	2224      	movs	r2, #36	; 0x24
 8019d6a:	2120      	movs	r1, #32
 8019d6c:	468c      	mov	ip, r1
 8019d6e:	2108      	movs	r1, #8
 8019d70:	4688      	mov	r8, r1
 8019d72:	44b8      	add	r8, r7
 8019d74:	44c4      	add	ip, r8
 8019d76:	4462      	add	r2, ip
 8019d78:	2156      	movs	r1, #86	; 0x56
 8019d7a:	7812      	ldrb	r2, [r2, #0]
 8019d7c:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	2b0c      	cmp	r3, #12
 8019d82:	d902      	bls.n	8019d8a <SX1276SetRxConfig+0x2fe>
                datarate = 12;
 8019d84:	230c      	movs	r3, #12
 8019d86:	607b      	str	r3, [r7, #4]
 8019d88:	e004      	b.n	8019d94 <SX1276SetRxConfig+0x308>
            else if( datarate < 6 )
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	2b05      	cmp	r3, #5
 8019d8e:	d801      	bhi.n	8019d94 <SX1276SetRxConfig+0x308>
                datarate = 6;
 8019d90:	2306      	movs	r3, #6
 8019d92:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019d94:	68bb      	ldr	r3, [r7, #8]
 8019d96:	2b07      	cmp	r3, #7
 8019d98:	d105      	bne.n	8019da6 <SX1276SetRxConfig+0x31a>
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	2b0b      	cmp	r3, #11
 8019d9e:	d008      	beq.n	8019db2 <SX1276SetRxConfig+0x326>
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	2b0c      	cmp	r3, #12
 8019da4:	d005      	beq.n	8019db2 <SX1276SetRxConfig+0x326>
 8019da6:	68bb      	ldr	r3, [r7, #8]
 8019da8:	2b08      	cmp	r3, #8
 8019daa:	d111      	bne.n	8019dd0 <SX1276SetRxConfig+0x344>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	2b0c      	cmp	r3, #12
 8019db0:	d10e      	bne.n	8019dd0 <SX1276SetRxConfig+0x344>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019db2:	4b02      	ldr	r3, [pc, #8]	; (8019dbc <SX1276SetRxConfig+0x330>)
 8019db4:	224c      	movs	r2, #76	; 0x4c
 8019db6:	2101      	movs	r1, #1
 8019db8:	5499      	strb	r1, [r3, r2]
 8019dba:	e00d      	b.n	8019dd8 <SX1276SetRxConfig+0x34c>
 8019dbc:	20001750 	.word	0x20001750
 8019dc0:	3ff00000 	.word	0x3ff00000
 8019dc4:	40200000 	.word	0x40200000
 8019dc8:	408f4000 	.word	0x408f4000
 8019dcc:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019dd0:	4b77      	ldr	r3, [pc, #476]	; (8019fb0 <SX1276SetRxConfig+0x524>)
 8019dd2:	224c      	movs	r2, #76	; 0x4c
 8019dd4:	2100      	movs	r1, #0
 8019dd6:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019dd8:	201d      	movs	r0, #29
 8019dda:	f001 f972 	bl	801b0c2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019dde:	68bb      	ldr	r3, [r7, #8]
 8019de0:	b2db      	uxtb	r3, r3
 8019de2:	011b      	lsls	r3, r3, #4
 8019de4:	b2da      	uxtb	r2, r3
 8019de6:	230e      	movs	r3, #14
 8019de8:	18fb      	adds	r3, r7, r3
 8019dea:	781b      	ldrb	r3, [r3, #0]
 8019dec:	18db      	adds	r3, r3, r3
 8019dee:	b2db      	uxtb	r3, r3
 8019df0:	4313      	orrs	r3, r2
 8019df2:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019df4:	242c      	movs	r4, #44	; 0x2c
 8019df6:	2608      	movs	r6, #8
 8019df8:	19bb      	adds	r3, r7, r6
 8019dfa:	191b      	adds	r3, r3, r4
 8019dfc:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019dfe:	4313      	orrs	r3, r2
 8019e00:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019e02:	0019      	movs	r1, r3
 8019e04:	201d      	movs	r0, #29
 8019e06:	f001 f94b 	bl	801b0a0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8019e0a:	201e      	movs	r0, #30
 8019e0c:	f001 f959 	bl	801b0c2 <SX1276Read>
 8019e10:	0003      	movs	r3, r0
 8019e12:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8019e14:	2308      	movs	r3, #8
 8019e16:	4013      	ands	r3, r2
 8019e18:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	b2db      	uxtb	r3, r3
 8019e1e:	011b      	lsls	r3, r3, #4
 8019e20:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8019e22:	4313      	orrs	r3, r2
 8019e24:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019e26:	2334      	movs	r3, #52	; 0x34
 8019e28:	2108      	movs	r1, #8
 8019e2a:	468c      	mov	ip, r1
 8019e2c:	44bc      	add	ip, r7
 8019e2e:	4463      	add	r3, ip
 8019e30:	781b      	ldrb	r3, [r3, #0]
 8019e32:	009b      	lsls	r3, r3, #2
 8019e34:	b2db      	uxtb	r3, r3
 8019e36:	4313      	orrs	r3, r2
 8019e38:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8019e3a:	2528      	movs	r5, #40	; 0x28
 8019e3c:	19bb      	adds	r3, r7, r6
 8019e3e:	195b      	adds	r3, r3, r5
 8019e40:	881b      	ldrh	r3, [r3, #0]
 8019e42:	0a1b      	lsrs	r3, r3, #8
 8019e44:	b29b      	uxth	r3, r3
 8019e46:	b2db      	uxtb	r3, r3
 8019e48:	2103      	movs	r1, #3
 8019e4a:	400b      	ands	r3, r1
 8019e4c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019e4e:	4313      	orrs	r3, r2
 8019e50:	b2db      	uxtb	r3, r3
 8019e52:	0019      	movs	r1, r3
 8019e54:	201e      	movs	r0, #30
 8019e56:	f001 f923 	bl	801b0a0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019e5a:	2026      	movs	r0, #38	; 0x26
 8019e5c:	f001 f931 	bl	801b0c2 <SX1276Read>
 8019e60:	0003      	movs	r3, r0
 8019e62:	b25b      	sxtb	r3, r3
 8019e64:	2208      	movs	r2, #8
 8019e66:	4393      	bics	r3, r2
 8019e68:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019e6a:	4b51      	ldr	r3, [pc, #324]	; (8019fb0 <SX1276SetRxConfig+0x524>)
 8019e6c:	214c      	movs	r1, #76	; 0x4c
 8019e6e:	5c5b      	ldrb	r3, [r3, r1]
 8019e70:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019e72:	b25b      	sxtb	r3, r3
 8019e74:	4313      	orrs	r3, r2
 8019e76:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019e78:	b2db      	uxtb	r3, r3
 8019e7a:	0019      	movs	r1, r3
 8019e7c:	2026      	movs	r0, #38	; 0x26
 8019e7e:	f001 f90f 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8019e82:	19bb      	adds	r3, r7, r6
 8019e84:	195b      	adds	r3, r3, r5
 8019e86:	881b      	ldrh	r3, [r3, #0]
 8019e88:	b2db      	uxtb	r3, r3
 8019e8a:	0019      	movs	r1, r3
 8019e8c:	201f      	movs	r0, #31
 8019e8e:	f001 f907 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019e92:	2524      	movs	r5, #36	; 0x24
 8019e94:	19bb      	adds	r3, r7, r6
 8019e96:	195b      	adds	r3, r3, r5
 8019e98:	881b      	ldrh	r3, [r3, #0]
 8019e9a:	0a1b      	lsrs	r3, r3, #8
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	b2db      	uxtb	r3, r3
 8019ea0:	0019      	movs	r1, r3
 8019ea2:	2020      	movs	r0, #32
 8019ea4:	f001 f8fc 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019ea8:	19bb      	adds	r3, r7, r6
 8019eaa:	195b      	adds	r3, r3, r5
 8019eac:	881b      	ldrh	r3, [r3, #0]
 8019eae:	b2db      	uxtb	r3, r3
 8019eb0:	0019      	movs	r1, r3
 8019eb2:	2021      	movs	r0, #33	; 0x21
 8019eb4:	f001 f8f4 	bl	801b0a0 <SX1276Write>
            if( fixLen == 1 )
 8019eb8:	19bb      	adds	r3, r7, r6
 8019eba:	191b      	adds	r3, r3, r4
 8019ebc:	781b      	ldrb	r3, [r3, #0]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d009      	beq.n	8019ed6 <SX1276SetRxConfig+0x44a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8019ec2:	2330      	movs	r3, #48	; 0x30
 8019ec4:	2208      	movs	r2, #8
 8019ec6:	4694      	mov	ip, r2
 8019ec8:	44bc      	add	ip, r7
 8019eca:	4463      	add	r3, ip
 8019ecc:	781b      	ldrb	r3, [r3, #0]
 8019ece:	0019      	movs	r1, r3
 8019ed0:	2022      	movs	r0, #34	; 0x22
 8019ed2:	f001 f8e5 	bl	801b0a0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019ed6:	4b36      	ldr	r3, [pc, #216]	; (8019fb0 <SX1276SetRxConfig+0x524>)
 8019ed8:	2253      	movs	r2, #83	; 0x53
 8019eda:	5c9b      	ldrb	r3, [r3, r2]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d013      	beq.n	8019f08 <SX1276SetRxConfig+0x47c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019ee0:	2044      	movs	r0, #68	; 0x44
 8019ee2:	f001 f8ee 	bl	801b0c2 <SX1276Read>
 8019ee6:	0003      	movs	r3, r0
 8019ee8:	001a      	movs	r2, r3
 8019eea:	2380      	movs	r3, #128	; 0x80
 8019eec:	425b      	negs	r3, r3
 8019eee:	4313      	orrs	r3, r2
 8019ef0:	b2db      	uxtb	r3, r3
 8019ef2:	0019      	movs	r1, r3
 8019ef4:	2044      	movs	r0, #68	; 0x44
 8019ef6:	f001 f8d3 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8019efa:	4b2d      	ldr	r3, [pc, #180]	; (8019fb0 <SX1276SetRxConfig+0x524>)
 8019efc:	2254      	movs	r2, #84	; 0x54
 8019efe:	5c9b      	ldrb	r3, [r3, r2]
 8019f00:	0019      	movs	r1, r3
 8019f02:	2024      	movs	r0, #36	; 0x24
 8019f04:	f001 f8cc 	bl	801b0a0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	2b09      	cmp	r3, #9
 8019f0c:	d10d      	bne.n	8019f2a <SX1276SetRxConfig+0x49e>
 8019f0e:	4b28      	ldr	r3, [pc, #160]	; (8019fb0 <SX1276SetRxConfig+0x524>)
 8019f10:	689b      	ldr	r3, [r3, #8]
 8019f12:	4a28      	ldr	r2, [pc, #160]	; (8019fb4 <SX1276SetRxConfig+0x528>)
 8019f14:	4293      	cmp	r3, r2
 8019f16:	d908      	bls.n	8019f2a <SX1276SetRxConfig+0x49e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019f18:	2102      	movs	r1, #2
 8019f1a:	2036      	movs	r0, #54	; 0x36
 8019f1c:	f001 f8c0 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8019f20:	2164      	movs	r1, #100	; 0x64
 8019f22:	203a      	movs	r0, #58	; 0x3a
 8019f24:	f001 f8bc 	bl	801b0a0 <SX1276Write>
 8019f28:	e00f      	b.n	8019f4a <SX1276SetRxConfig+0x4be>
            else if( bandwidth == 9 )
 8019f2a:	68bb      	ldr	r3, [r7, #8]
 8019f2c:	2b09      	cmp	r3, #9
 8019f2e:	d108      	bne.n	8019f42 <SX1276SetRxConfig+0x4b6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019f30:	2102      	movs	r1, #2
 8019f32:	2036      	movs	r0, #54	; 0x36
 8019f34:	f001 f8b4 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8019f38:	217f      	movs	r1, #127	; 0x7f
 8019f3a:	203a      	movs	r0, #58	; 0x3a
 8019f3c:	f001 f8b0 	bl	801b0a0 <SX1276Write>
 8019f40:	e003      	b.n	8019f4a <SX1276SetRxConfig+0x4be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8019f42:	2103      	movs	r1, #3
 8019f44:	2036      	movs	r0, #54	; 0x36
 8019f46:	f001 f8ab 	bl	801b0a0 <SX1276Write>
            if( datarate == 6 )
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	2b06      	cmp	r3, #6
 8019f4e:	d114      	bne.n	8019f7a <SX1276SetRxConfig+0x4ee>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019f50:	2031      	movs	r0, #49	; 0x31
 8019f52:	f001 f8b6 	bl	801b0c2 <SX1276Read>
 8019f56:	0003      	movs	r3, r0
 8019f58:	b25b      	sxtb	r3, r3
 8019f5a:	2207      	movs	r2, #7
 8019f5c:	4393      	bics	r3, r2
 8019f5e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019f60:	2205      	movs	r2, #5
 8019f62:	4313      	orrs	r3, r2
 8019f64:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019f66:	b2db      	uxtb	r3, r3
 8019f68:	0019      	movs	r1, r3
 8019f6a:	2031      	movs	r0, #49	; 0x31
 8019f6c:	f001 f898 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019f70:	210c      	movs	r1, #12
 8019f72:	2037      	movs	r0, #55	; 0x37
 8019f74:	f001 f894 	bl	801b0a0 <SX1276Write>
        break;
 8019f78:	e013      	b.n	8019fa2 <SX1276SetRxConfig+0x516>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019f7a:	2031      	movs	r0, #49	; 0x31
 8019f7c:	f001 f8a1 	bl	801b0c2 <SX1276Read>
 8019f80:	0003      	movs	r3, r0
 8019f82:	b25b      	sxtb	r3, r3
 8019f84:	2207      	movs	r2, #7
 8019f86:	4393      	bics	r3, r2
 8019f88:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019f8a:	2203      	movs	r2, #3
 8019f8c:	4313      	orrs	r3, r2
 8019f8e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019f90:	b2db      	uxtb	r3, r3
 8019f92:	0019      	movs	r1, r3
 8019f94:	2031      	movs	r0, #49	; 0x31
 8019f96:	f001 f883 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019f9a:	210a      	movs	r1, #10
 8019f9c:	2037      	movs	r0, #55	; 0x37
 8019f9e:	f001 f87f 	bl	801b0a0 <SX1276Write>
        break;
 8019fa2:	46c0      	nop			; (mov r8, r8)
}
 8019fa4:	46c0      	nop			; (mov r8, r8)
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	b004      	add	sp, #16
 8019faa:	bc80      	pop	{r7}
 8019fac:	46b8      	mov	r8, r7
 8019fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fb0:	20001750 	.word	0x20001750
 8019fb4:	1f4add40 	.word	0x1f4add40

08019fb8 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fba:	46c6      	mov	lr, r8
 8019fbc:	b500      	push	{lr}
 8019fbe:	b084      	sub	sp, #16
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	60ba      	str	r2, [r7, #8]
 8019fc4:	607b      	str	r3, [r7, #4]
 8019fc6:	240f      	movs	r4, #15
 8019fc8:	193b      	adds	r3, r7, r4
 8019fca:	1c02      	adds	r2, r0, #0
 8019fcc:	701a      	strb	r2, [r3, #0]
 8019fce:	230e      	movs	r3, #14
 8019fd0:	18fb      	adds	r3, r7, r3
 8019fd2:	1c0a      	adds	r2, r1, #0
 8019fd4:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8019fd6:	4bb7      	ldr	r3, [pc, #732]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 8019fd8:	791b      	ldrb	r3, [r3, #4]
 8019fda:	2b01      	cmp	r3, #1
 8019fdc:	d108      	bne.n	8019ff0 <SX1276SetTxConfig+0x38>
 8019fde:	193b      	adds	r3, r7, r4
 8019fe0:	781b      	ldrb	r3, [r3, #0]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d104      	bne.n	8019ff0 <SX1276SetTxConfig+0x38>
    {
        SX1276SetSleep( );
 8019fe6:	f000 fc63 	bl	801a8b0 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8019fea:	2001      	movs	r0, #1
 8019fec:	f7eb f909 	bl	8005202 <HAL_Delay>
    }

    SX1276SetModem( modem );
 8019ff0:	240f      	movs	r4, #15
 8019ff2:	193b      	adds	r3, r7, r4
 8019ff4:	781b      	ldrb	r3, [r3, #0]
 8019ff6:	0018      	movs	r0, r3
 8019ff8:	f000 fff8 	bl	801afec <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8019ffc:	250e      	movs	r5, #14
 8019ffe:	197b      	adds	r3, r7, r5
 801a000:	781b      	ldrb	r3, [r3, #0]
 801a002:	b25b      	sxtb	r3, r3
 801a004:	0018      	movs	r0, r3
 801a006:	f000 fb41 	bl	801a68c <SX1276SetRfTxPower>
    power = 0;  // Изменение параметра мощности передачи
 801a00a:	197b      	adds	r3, r7, r5
 801a00c:	2200      	movs	r2, #0
 801a00e:	701a      	strb	r2, [r3, #0]
    switch( modem )
 801a010:	193b      	adds	r3, r7, r4
 801a012:	781b      	ldrb	r3, [r3, #0]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d003      	beq.n	801a020 <SX1276SetTxConfig+0x68>
 801a018:	2b01      	cmp	r3, #1
 801a01a:	d100      	bne.n	801a01e <SX1276SetTxConfig+0x66>
 801a01c:	e0c1      	b.n	801a1a2 <SX1276SetTxConfig+0x1ea>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 801a01e:	e207      	b.n	801a430 <SX1276SetTxConfig+0x478>
            SX1276.Settings.Fsk.Power = power;
 801a020:	4ba4      	ldr	r3, [pc, #656]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a022:	220e      	movs	r2, #14
 801a024:	18ba      	adds	r2, r7, r2
 801a026:	7812      	ldrb	r2, [r2, #0]
 801a028:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 801a02a:	4ba2      	ldr	r3, [pc, #648]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a02c:	68ba      	ldr	r2, [r7, #8]
 801a02e:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 801a030:	4ba0      	ldr	r3, [pc, #640]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a032:	687a      	ldr	r2, [r7, #4]
 801a034:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 801a036:	4b9f      	ldr	r3, [pc, #636]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a03a:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 801a03c:	4b9d      	ldr	r3, [pc, #628]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a03e:	2420      	movs	r4, #32
 801a040:	2608      	movs	r6, #8
 801a042:	2208      	movs	r2, #8
 801a044:	18ba      	adds	r2, r7, r2
 801a046:	1992      	adds	r2, r2, r6
 801a048:	1912      	adds	r2, r2, r4
 801a04a:	8812      	ldrh	r2, [r2, #0]
 801a04c:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 801a04e:	4b99      	ldr	r3, [pc, #612]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a050:	2524      	movs	r5, #36	; 0x24
 801a052:	2208      	movs	r2, #8
 801a054:	18ba      	adds	r2, r7, r2
 801a056:	1992      	adds	r2, r2, r6
 801a058:	1952      	adds	r2, r2, r5
 801a05a:	2122      	movs	r1, #34	; 0x22
 801a05c:	7812      	ldrb	r2, [r2, #0]
 801a05e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 801a060:	4b94      	ldr	r3, [pc, #592]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a062:	2228      	movs	r2, #40	; 0x28
 801a064:	2108      	movs	r1, #8
 801a066:	468c      	mov	ip, r1
 801a068:	2108      	movs	r1, #8
 801a06a:	4688      	mov	r8, r1
 801a06c:	44b8      	add	r8, r7
 801a06e:	44c4      	add	ip, r8
 801a070:	4462      	add	r2, ip
 801a072:	2124      	movs	r1, #36	; 0x24
 801a074:	7812      	ldrb	r2, [r2, #0]
 801a076:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 801a078:	4b8e      	ldr	r3, [pc, #568]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a07a:	2234      	movs	r2, #52	; 0x34
 801a07c:	2108      	movs	r1, #8
 801a07e:	468c      	mov	ip, r1
 801a080:	2108      	movs	r1, #8
 801a082:	4688      	mov	r8, r1
 801a084:	44b8      	add	r8, r7
 801a086:	44c4      	add	ip, r8
 801a088:	4462      	add	r2, ip
 801a08a:	2125      	movs	r1, #37	; 0x25
 801a08c:	7812      	ldrb	r2, [r2, #0]
 801a08e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 801a090:	4b88      	ldr	r3, [pc, #544]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a094:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 801a096:	68b8      	ldr	r0, [r7, #8]
 801a098:	f7e8 fdca 	bl	8002c30 <__aeabi_ui2d>
 801a09c:	2200      	movs	r2, #0
 801a09e:	4b86      	ldr	r3, [pc, #536]	; (801a2b8 <SX1276SetTxConfig+0x300>)
 801a0a0:	f7e7 fb5c 	bl	800175c <__aeabi_ddiv>
 801a0a4:	0002      	movs	r2, r0
 801a0a6:	000b      	movs	r3, r1
 801a0a8:	0010      	movs	r0, r2
 801a0aa:	0019      	movs	r1, r3
 801a0ac:	f7e6 fab0 	bl	8000610 <__aeabi_d2uiz>
 801a0b0:	0003      	movs	r3, r0
 801a0b2:	b29b      	uxth	r3, r3
 801a0b4:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 801a0b6:	68bb      	ldr	r3, [r7, #8]
 801a0b8:	0a1b      	lsrs	r3, r3, #8
 801a0ba:	b2db      	uxtb	r3, r3
 801a0bc:	0019      	movs	r1, r3
 801a0be:	2004      	movs	r0, #4
 801a0c0:	f000 ffee 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 801a0c4:	68bb      	ldr	r3, [r7, #8]
 801a0c6:	b2db      	uxtb	r3, r3
 801a0c8:	0019      	movs	r1, r3
 801a0ca:	2005      	movs	r0, #5
 801a0cc:	f000 ffe8 	bl	801b0a0 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 801a0d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0d2:	f7e8 fdad 	bl	8002c30 <__aeabi_ui2d>
 801a0d6:	0002      	movs	r2, r0
 801a0d8:	000b      	movs	r3, r1
 801a0da:	2000      	movs	r0, #0
 801a0dc:	4977      	ldr	r1, [pc, #476]	; (801a2bc <SX1276SetTxConfig+0x304>)
 801a0de:	f7e7 fb3d 	bl	800175c <__aeabi_ddiv>
 801a0e2:	0002      	movs	r2, r0
 801a0e4:	000b      	movs	r3, r1
 801a0e6:	0010      	movs	r0, r2
 801a0e8:	0019      	movs	r1, r3
 801a0ea:	f7e6 fa91 	bl	8000610 <__aeabi_d2uiz>
 801a0ee:	0003      	movs	r3, r0
 801a0f0:	b29b      	uxth	r3, r3
 801a0f2:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f6:	0a1b      	lsrs	r3, r3, #8
 801a0f8:	b2db      	uxtb	r3, r3
 801a0fa:	0019      	movs	r1, r3
 801a0fc:	2002      	movs	r0, #2
 801a0fe:	f000 ffcf 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a104:	b2db      	uxtb	r3, r3
 801a106:	0019      	movs	r1, r3
 801a108:	2003      	movs	r0, #3
 801a10a:	f000 ffc9 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801a10e:	2308      	movs	r3, #8
 801a110:	18fb      	adds	r3, r7, r3
 801a112:	199b      	adds	r3, r3, r6
 801a114:	191b      	adds	r3, r3, r4
 801a116:	881b      	ldrh	r3, [r3, #0]
 801a118:	0a1b      	lsrs	r3, r3, #8
 801a11a:	b29b      	uxth	r3, r3
 801a11c:	b2db      	uxtb	r3, r3
 801a11e:	0019      	movs	r1, r3
 801a120:	2025      	movs	r0, #37	; 0x25
 801a122:	f000 ffbd 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 801a126:	2308      	movs	r3, #8
 801a128:	18fb      	adds	r3, r7, r3
 801a12a:	199b      	adds	r3, r3, r6
 801a12c:	191b      	adds	r3, r3, r4
 801a12e:	881b      	ldrh	r3, [r3, #0]
 801a130:	b2db      	uxtb	r3, r3
 801a132:	0019      	movs	r1, r3
 801a134:	2026      	movs	r0, #38	; 0x26
 801a136:	f000 ffb3 	bl	801b0a0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801a13a:	2030      	movs	r0, #48	; 0x30
 801a13c:	f000 ffc1 	bl	801b0c2 <SX1276Read>
 801a140:	0003      	movs	r3, r0
 801a142:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801a144:	226f      	movs	r2, #111	; 0x6f
 801a146:	4013      	ands	r3, r2
 801a148:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801a14a:	2308      	movs	r3, #8
 801a14c:	18fb      	adds	r3, r7, r3
 801a14e:	199b      	adds	r3, r3, r6
 801a150:	195b      	adds	r3, r3, r5
 801a152:	781b      	ldrb	r3, [r3, #0]
 801a154:	2b00      	cmp	r3, #0
 801a156:	d001      	beq.n	801a15c <SX1276SetTxConfig+0x1a4>
 801a158:	2300      	movs	r3, #0
 801a15a:	e001      	b.n	801a160 <SX1276SetTxConfig+0x1a8>
 801a15c:	2380      	movs	r3, #128	; 0x80
 801a15e:	425b      	negs	r3, r3
 801a160:	4313      	orrs	r3, r2
 801a162:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801a164:	2328      	movs	r3, #40	; 0x28
 801a166:	2108      	movs	r1, #8
 801a168:	468c      	mov	ip, r1
 801a16a:	2108      	movs	r1, #8
 801a16c:	4688      	mov	r8, r1
 801a16e:	44b8      	add	r8, r7
 801a170:	44c4      	add	ip, r8
 801a172:	4463      	add	r3, ip
 801a174:	781b      	ldrb	r3, [r3, #0]
 801a176:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801a178:	b25b      	sxtb	r3, r3
 801a17a:	4313      	orrs	r3, r2
 801a17c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801a17e:	b2db      	uxtb	r3, r3
 801a180:	0019      	movs	r1, r3
 801a182:	2030      	movs	r0, #48	; 0x30
 801a184:	f000 ff8c 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801a188:	2031      	movs	r0, #49	; 0x31
 801a18a:	f000 ff9a 	bl	801b0c2 <SX1276Read>
 801a18e:	0003      	movs	r3, r0
 801a190:	001a      	movs	r2, r3
 801a192:	2340      	movs	r3, #64	; 0x40
 801a194:	4313      	orrs	r3, r2
 801a196:	b2db      	uxtb	r3, r3
 801a198:	0019      	movs	r1, r3
 801a19a:	2031      	movs	r0, #49	; 0x31
 801a19c:	f000 ff80 	bl	801b0a0 <SX1276Write>
        break;
 801a1a0:	e146      	b.n	801a430 <SX1276SetTxConfig+0x478>
            SX1276.Settings.LoRa.Power = power;
 801a1a2:	4b44      	ldr	r3, [pc, #272]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a1a4:	220e      	movs	r2, #14
 801a1a6:	18ba      	adds	r2, r7, r2
 801a1a8:	2140      	movs	r1, #64	; 0x40
 801a1aa:	7812      	ldrb	r2, [r2, #0]
 801a1ac:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	2b02      	cmp	r3, #2
 801a1b2:	d900      	bls.n	801a1b6 <SX1276SetTxConfig+0x1fe>
                while( 1 );
 801a1b4:	e7fe      	b.n	801a1b4 <SX1276SetTxConfig+0x1fc>
            bandwidth += 7;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	3307      	adds	r3, #7
 801a1ba:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801a1bc:	4b3d      	ldr	r3, [pc, #244]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a1be:	687a      	ldr	r2, [r7, #4]
 801a1c0:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801a1c2:	4b3c      	ldr	r3, [pc, #240]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a1c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1c6:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801a1c8:	4b3a      	ldr	r3, [pc, #232]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a1ca:	221c      	movs	r2, #28
 801a1cc:	2108      	movs	r1, #8
 801a1ce:	468c      	mov	ip, r1
 801a1d0:	2108      	movs	r1, #8
 801a1d2:	4688      	mov	r8, r1
 801a1d4:	44b8      	add	r8, r7
 801a1d6:	44c4      	add	ip, r8
 801a1d8:	4462      	add	r2, ip
 801a1da:	214d      	movs	r1, #77	; 0x4d
 801a1dc:	7812      	ldrb	r2, [r2, #0]
 801a1de:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801a1e0:	4b34      	ldr	r3, [pc, #208]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a1e2:	2220      	movs	r2, #32
 801a1e4:	2108      	movs	r1, #8
 801a1e6:	468c      	mov	ip, r1
 801a1e8:	2108      	movs	r1, #8
 801a1ea:	4688      	mov	r8, r1
 801a1ec:	44b8      	add	r8, r7
 801a1ee:	44c4      	add	ip, r8
 801a1f0:	4462      	add	r2, ip
 801a1f2:	214e      	movs	r1, #78	; 0x4e
 801a1f4:	8812      	ldrh	r2, [r2, #0]
 801a1f6:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 801a1f8:	4b2e      	ldr	r3, [pc, #184]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a1fa:	2224      	movs	r2, #36	; 0x24
 801a1fc:	2108      	movs	r1, #8
 801a1fe:	468c      	mov	ip, r1
 801a200:	2108      	movs	r1, #8
 801a202:	4688      	mov	r8, r1
 801a204:	44b8      	add	r8, r7
 801a206:	44c4      	add	ip, r8
 801a208:	4462      	add	r2, ip
 801a20a:	2150      	movs	r1, #80	; 0x50
 801a20c:	7812      	ldrb	r2, [r2, #0]
 801a20e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801a210:	4b28      	ldr	r3, [pc, #160]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a212:	222c      	movs	r2, #44	; 0x2c
 801a214:	2108      	movs	r1, #8
 801a216:	468c      	mov	ip, r1
 801a218:	2108      	movs	r1, #8
 801a21a:	4688      	mov	r8, r1
 801a21c:	44b8      	add	r8, r7
 801a21e:	44c4      	add	ip, r8
 801a220:	4462      	add	r2, ip
 801a222:	2153      	movs	r1, #83	; 0x53
 801a224:	7812      	ldrb	r2, [r2, #0]
 801a226:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801a228:	4b22      	ldr	r3, [pc, #136]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a22a:	2230      	movs	r2, #48	; 0x30
 801a22c:	2108      	movs	r1, #8
 801a22e:	468c      	mov	ip, r1
 801a230:	2108      	movs	r1, #8
 801a232:	4688      	mov	r8, r1
 801a234:	44b8      	add	r8, r7
 801a236:	44c4      	add	ip, r8
 801a238:	4462      	add	r2, ip
 801a23a:	2154      	movs	r1, #84	; 0x54
 801a23c:	7812      	ldrb	r2, [r2, #0]
 801a23e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801a240:	4b1c      	ldr	r3, [pc, #112]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a242:	2228      	movs	r2, #40	; 0x28
 801a244:	2108      	movs	r1, #8
 801a246:	468c      	mov	ip, r1
 801a248:	2108      	movs	r1, #8
 801a24a:	4688      	mov	r8, r1
 801a24c:	44b8      	add	r8, r7
 801a24e:	44c4      	add	ip, r8
 801a250:	4462      	add	r2, ip
 801a252:	2152      	movs	r1, #82	; 0x52
 801a254:	7812      	ldrb	r2, [r2, #0]
 801a256:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801a258:	4b16      	ldr	r3, [pc, #88]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a25a:	2234      	movs	r2, #52	; 0x34
 801a25c:	2108      	movs	r1, #8
 801a25e:	468c      	mov	ip, r1
 801a260:	2108      	movs	r1, #8
 801a262:	4688      	mov	r8, r1
 801a264:	44b8      	add	r8, r7
 801a266:	44c4      	add	ip, r8
 801a268:	4462      	add	r2, ip
 801a26a:	2155      	movs	r1, #85	; 0x55
 801a26c:	7812      	ldrb	r2, [r2, #0]
 801a26e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 801a270:	4b10      	ldr	r3, [pc, #64]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a274:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 801a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a278:	2b0c      	cmp	r3, #12
 801a27a:	d902      	bls.n	801a282 <SX1276SetTxConfig+0x2ca>
                datarate = 12;
 801a27c:	230c      	movs	r3, #12
 801a27e:	62bb      	str	r3, [r7, #40]	; 0x28
 801a280:	e004      	b.n	801a28c <SX1276SetTxConfig+0x2d4>
            else if( datarate < 6 )
 801a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a284:	2b05      	cmp	r3, #5
 801a286:	d801      	bhi.n	801a28c <SX1276SetTxConfig+0x2d4>
                datarate = 6;
 801a288:	2306      	movs	r3, #6
 801a28a:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	2b07      	cmp	r3, #7
 801a290:	d105      	bne.n	801a29e <SX1276SetTxConfig+0x2e6>
 801a292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a294:	2b0b      	cmp	r3, #11
 801a296:	d008      	beq.n	801a2aa <SX1276SetTxConfig+0x2f2>
 801a298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a29a:	2b0c      	cmp	r3, #12
 801a29c:	d005      	beq.n	801a2aa <SX1276SetTxConfig+0x2f2>
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	2b08      	cmp	r3, #8
 801a2a2:	d10d      	bne.n	801a2c0 <SX1276SetTxConfig+0x308>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2a6:	2b0c      	cmp	r3, #12
 801a2a8:	d10a      	bne.n	801a2c0 <SX1276SetTxConfig+0x308>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801a2aa:	4b02      	ldr	r3, [pc, #8]	; (801a2b4 <SX1276SetTxConfig+0x2fc>)
 801a2ac:	224c      	movs	r2, #76	; 0x4c
 801a2ae:	2101      	movs	r1, #1
 801a2b0:	5499      	strb	r1, [r3, r2]
 801a2b2:	e009      	b.n	801a2c8 <SX1276SetTxConfig+0x310>
 801a2b4:	20001750 	.word	0x20001750
 801a2b8:	404e8480 	.word	0x404e8480
 801a2bc:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801a2c0:	4b5e      	ldr	r3, [pc, #376]	; (801a43c <SX1276SetTxConfig+0x484>)
 801a2c2:	224c      	movs	r2, #76	; 0x4c
 801a2c4:	2100      	movs	r1, #0
 801a2c6:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a2c8:	4b5c      	ldr	r3, [pc, #368]	; (801a43c <SX1276SetTxConfig+0x484>)
 801a2ca:	2253      	movs	r2, #83	; 0x53
 801a2cc:	5c9b      	ldrb	r3, [r3, r2]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d013      	beq.n	801a2fa <SX1276SetTxConfig+0x342>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801a2d2:	2044      	movs	r0, #68	; 0x44
 801a2d4:	f000 fef5 	bl	801b0c2 <SX1276Read>
 801a2d8:	0003      	movs	r3, r0
 801a2da:	001a      	movs	r2, r3
 801a2dc:	2380      	movs	r3, #128	; 0x80
 801a2de:	425b      	negs	r3, r3
 801a2e0:	4313      	orrs	r3, r2
 801a2e2:	b2db      	uxtb	r3, r3
 801a2e4:	0019      	movs	r1, r3
 801a2e6:	2044      	movs	r0, #68	; 0x44
 801a2e8:	f000 feda 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801a2ec:	4b53      	ldr	r3, [pc, #332]	; (801a43c <SX1276SetTxConfig+0x484>)
 801a2ee:	2254      	movs	r2, #84	; 0x54
 801a2f0:	5c9b      	ldrb	r3, [r3, r2]
 801a2f2:	0019      	movs	r1, r3
 801a2f4:	2024      	movs	r0, #36	; 0x24
 801a2f6:	f000 fed3 	bl	801b0a0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801a2fa:	201d      	movs	r0, #29
 801a2fc:	f000 fee1 	bl	801b0c2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	b2db      	uxtb	r3, r3
 801a304:	011b      	lsls	r3, r3, #4
 801a306:	b2da      	uxtb	r2, r3
 801a308:	231c      	movs	r3, #28
 801a30a:	2108      	movs	r1, #8
 801a30c:	468c      	mov	ip, r1
 801a30e:	2108      	movs	r1, #8
 801a310:	4688      	mov	r8, r1
 801a312:	44b8      	add	r8, r7
 801a314:	44c4      	add	ip, r8
 801a316:	4463      	add	r3, ip
 801a318:	781b      	ldrb	r3, [r3, #0]
 801a31a:	18db      	adds	r3, r3, r3
 801a31c:	b2db      	uxtb	r3, r3
 801a31e:	4313      	orrs	r3, r2
 801a320:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a322:	2324      	movs	r3, #36	; 0x24
 801a324:	2108      	movs	r1, #8
 801a326:	468c      	mov	ip, r1
 801a328:	2108      	movs	r1, #8
 801a32a:	4688      	mov	r8, r1
 801a32c:	44b8      	add	r8, r7
 801a32e:	44c4      	add	ip, r8
 801a330:	4463      	add	r3, ip
 801a332:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a334:	4313      	orrs	r3, r2
 801a336:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a338:	0019      	movs	r1, r3
 801a33a:	201d      	movs	r0, #29
 801a33c:	f000 feb0 	bl	801b0a0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801a340:	201e      	movs	r0, #30
 801a342:	f000 febe 	bl	801b0c2 <SX1276Read>
 801a346:	0003      	movs	r3, r0
 801a348:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 801a34a:	230b      	movs	r3, #11
 801a34c:	4013      	ands	r3, r2
 801a34e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a352:	b2db      	uxtb	r3, r3
 801a354:	011b      	lsls	r3, r3, #4
 801a356:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 801a358:	4313      	orrs	r3, r2
 801a35a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a35c:	2328      	movs	r3, #40	; 0x28
 801a35e:	2108      	movs	r1, #8
 801a360:	468c      	mov	ip, r1
 801a362:	2108      	movs	r1, #8
 801a364:	4688      	mov	r8, r1
 801a366:	44b8      	add	r8, r7
 801a368:	44c4      	add	ip, r8
 801a36a:	4463      	add	r3, ip
 801a36c:	781b      	ldrb	r3, [r3, #0]
 801a36e:	009b      	lsls	r3, r3, #2
 801a370:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801a372:	4313      	orrs	r3, r2
 801a374:	b2db      	uxtb	r3, r3
 801a376:	0019      	movs	r1, r3
 801a378:	201e      	movs	r0, #30
 801a37a:	f000 fe91 	bl	801b0a0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801a37e:	2026      	movs	r0, #38	; 0x26
 801a380:	f000 fe9f 	bl	801b0c2 <SX1276Read>
 801a384:	0003      	movs	r3, r0
 801a386:	b25b      	sxtb	r3, r3
 801a388:	2208      	movs	r2, #8
 801a38a:	4393      	bics	r3, r2
 801a38c:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801a38e:	4b2b      	ldr	r3, [pc, #172]	; (801a43c <SX1276SetTxConfig+0x484>)
 801a390:	214c      	movs	r1, #76	; 0x4c
 801a392:	5c5b      	ldrb	r3, [r3, r1]
 801a394:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801a396:	b25b      	sxtb	r3, r3
 801a398:	4313      	orrs	r3, r2
 801a39a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801a39c:	b2db      	uxtb	r3, r3
 801a39e:	0019      	movs	r1, r3
 801a3a0:	2026      	movs	r0, #38	; 0x26
 801a3a2:	f000 fe7d 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801a3a6:	2420      	movs	r4, #32
 801a3a8:	2508      	movs	r5, #8
 801a3aa:	2308      	movs	r3, #8
 801a3ac:	18fb      	adds	r3, r7, r3
 801a3ae:	195b      	adds	r3, r3, r5
 801a3b0:	191b      	adds	r3, r3, r4
 801a3b2:	881b      	ldrh	r3, [r3, #0]
 801a3b4:	0a1b      	lsrs	r3, r3, #8
 801a3b6:	b29b      	uxth	r3, r3
 801a3b8:	b2db      	uxtb	r3, r3
 801a3ba:	0019      	movs	r1, r3
 801a3bc:	2020      	movs	r0, #32
 801a3be:	f000 fe6f 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 801a3c2:	2308      	movs	r3, #8
 801a3c4:	18fb      	adds	r3, r7, r3
 801a3c6:	195b      	adds	r3, r3, r5
 801a3c8:	191b      	adds	r3, r3, r4
 801a3ca:	881b      	ldrh	r3, [r3, #0]
 801a3cc:	b2db      	uxtb	r3, r3
 801a3ce:	0019      	movs	r1, r3
 801a3d0:	2021      	movs	r0, #33	; 0x21
 801a3d2:	f000 fe65 	bl	801b0a0 <SX1276Write>
            if( datarate == 6 )
 801a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d8:	2b06      	cmp	r3, #6
 801a3da:	d114      	bne.n	801a406 <SX1276SetTxConfig+0x44e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a3dc:	2031      	movs	r0, #49	; 0x31
 801a3de:	f000 fe70 	bl	801b0c2 <SX1276Read>
 801a3e2:	0003      	movs	r3, r0
 801a3e4:	b25b      	sxtb	r3, r3
 801a3e6:	2207      	movs	r2, #7
 801a3e8:	4393      	bics	r3, r2
 801a3ea:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a3ec:	2205      	movs	r2, #5
 801a3ee:	4313      	orrs	r3, r2
 801a3f0:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a3f2:	b2db      	uxtb	r3, r3
 801a3f4:	0019      	movs	r1, r3
 801a3f6:	2031      	movs	r0, #49	; 0x31
 801a3f8:	f000 fe52 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a3fc:	210c      	movs	r1, #12
 801a3fe:	2037      	movs	r0, #55	; 0x37
 801a400:	f000 fe4e 	bl	801b0a0 <SX1276Write>
        break;
 801a404:	e013      	b.n	801a42e <SX1276SetTxConfig+0x476>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a406:	2031      	movs	r0, #49	; 0x31
 801a408:	f000 fe5b 	bl	801b0c2 <SX1276Read>
 801a40c:	0003      	movs	r3, r0
 801a40e:	b25b      	sxtb	r3, r3
 801a410:	2207      	movs	r2, #7
 801a412:	4393      	bics	r3, r2
 801a414:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a416:	2203      	movs	r2, #3
 801a418:	4313      	orrs	r3, r2
 801a41a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a41c:	b2db      	uxtb	r3, r3
 801a41e:	0019      	movs	r1, r3
 801a420:	2031      	movs	r0, #49	; 0x31
 801a422:	f000 fe3d 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a426:	210a      	movs	r1, #10
 801a428:	2037      	movs	r0, #55	; 0x37
 801a42a:	f000 fe39 	bl	801b0a0 <SX1276Write>
        break;
 801a42e:	46c0      	nop			; (mov r8, r8)
}
 801a430:	46c0      	nop			; (mov r8, r8)
 801a432:	46bd      	mov	sp, r7
 801a434:	b004      	add	sp, #16
 801a436:	bc80      	pop	{r7}
 801a438:	46b8      	mov	r8, r7
 801a43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a43c:	20001750 	.word	0x20001750

0801a440 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801a440:	b590      	push	{r4, r7, lr}
 801a442:	b08b      	sub	sp, #44	; 0x2c
 801a444:	af04      	add	r7, sp, #16
 801a446:	60b9      	str	r1, [r7, #8]
 801a448:	607a      	str	r2, [r7, #4]
 801a44a:	0019      	movs	r1, r3
 801a44c:	240f      	movs	r4, #15
 801a44e:	193b      	adds	r3, r7, r4
 801a450:	1c02      	adds	r2, r0, #0
 801a452:	701a      	strb	r2, [r3, #0]
 801a454:	230e      	movs	r3, #14
 801a456:	18fb      	adds	r3, r7, r3
 801a458:	1c0a      	adds	r2, r1, #0
 801a45a:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 801a45c:	2300      	movs	r3, #0
 801a45e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a460:	2301      	movs	r3, #1
 801a462:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a464:	193b      	adds	r3, r7, r4
 801a466:	781b      	ldrb	r3, [r3, #0]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d002      	beq.n	801a472 <SX1276GetTimeOnAir+0x32>
 801a46c:	2b01      	cmp	r3, #1
 801a46e:	d01a      	beq.n	801a4a6 <SX1276GetTimeOnAir+0x66>
 801a470:	e03f      	b.n	801a4f2 <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 801a472:	2334      	movs	r3, #52	; 0x34
 801a474:	18fb      	adds	r3, r7, r3
 801a476:	781c      	ldrb	r4, [r3, #0]
 801a478:	2330      	movs	r3, #48	; 0x30
 801a47a:	18fb      	adds	r3, r7, r3
 801a47c:	781a      	ldrb	r2, [r3, #0]
 801a47e:	232c      	movs	r3, #44	; 0x2c
 801a480:	18fb      	adds	r3, r7, r3
 801a482:	7819      	ldrb	r1, [r3, #0]
 801a484:	2328      	movs	r3, #40	; 0x28
 801a486:	18fb      	adds	r3, r7, r3
 801a488:	8818      	ldrh	r0, [r3, #0]
 801a48a:	0023      	movs	r3, r4
 801a48c:	f000 ff7e 	bl	801b38c <SX1276GetGfskTimeOnAirNumerator>
 801a490:	0002      	movs	r2, r0
 801a492:	0013      	movs	r3, r2
 801a494:	015b      	lsls	r3, r3, #5
 801a496:	1a9b      	subs	r3, r3, r2
 801a498:	009b      	lsls	r3, r3, #2
 801a49a:	189b      	adds	r3, r3, r2
 801a49c:	00db      	lsls	r3, r3, #3
 801a49e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	613b      	str	r3, [r7, #16]
        }
        break;
 801a4a4:	e025      	b.n	801a4f2 <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 801a4a6:	2328      	movs	r3, #40	; 0x28
 801a4a8:	18fb      	adds	r3, r7, r3
 801a4aa:	881c      	ldrh	r4, [r3, #0]
 801a4ac:	230e      	movs	r3, #14
 801a4ae:	18fb      	adds	r3, r7, r3
 801a4b0:	781a      	ldrb	r2, [r3, #0]
 801a4b2:	6879      	ldr	r1, [r7, #4]
 801a4b4:	68b8      	ldr	r0, [r7, #8]
 801a4b6:	2334      	movs	r3, #52	; 0x34
 801a4b8:	18fb      	adds	r3, r7, r3
 801a4ba:	781b      	ldrb	r3, [r3, #0]
 801a4bc:	9302      	str	r3, [sp, #8]
 801a4be:	2330      	movs	r3, #48	; 0x30
 801a4c0:	18fb      	adds	r3, r7, r3
 801a4c2:	781b      	ldrb	r3, [r3, #0]
 801a4c4:	9301      	str	r3, [sp, #4]
 801a4c6:	232c      	movs	r3, #44	; 0x2c
 801a4c8:	18fb      	adds	r3, r7, r3
 801a4ca:	781b      	ldrb	r3, [r3, #0]
 801a4cc:	9300      	str	r3, [sp, #0]
 801a4ce:	0023      	movs	r3, r4
 801a4d0:	f000 ff96 	bl	801b400 <SX1276GetLoRaTimeOnAirNumerator>
 801a4d4:	0002      	movs	r2, r0
 801a4d6:	0013      	movs	r3, r2
 801a4d8:	015b      	lsls	r3, r3, #5
 801a4da:	1a9b      	subs	r3, r3, r2
 801a4dc:	009b      	lsls	r3, r3, #2
 801a4de:	189b      	adds	r3, r3, r2
 801a4e0:	00db      	lsls	r3, r3, #3
 801a4e2:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 801a4e4:	68bb      	ldr	r3, [r7, #8]
 801a4e6:	0018      	movs	r0, r3
 801a4e8:	f000 ff1e 	bl	801b328 <SX1276GetLoRaBandwidthInHz>
 801a4ec:	0003      	movs	r3, r0
 801a4ee:	613b      	str	r3, [r7, #16]
        }
        break;
 801a4f0:	46c0      	nop			; (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 801a4f2:	697a      	ldr	r2, [r7, #20]
 801a4f4:	693b      	ldr	r3, [r7, #16]
 801a4f6:	18d3      	adds	r3, r2, r3
 801a4f8:	3b01      	subs	r3, #1
 801a4fa:	6939      	ldr	r1, [r7, #16]
 801a4fc:	0018      	movs	r0, r3
 801a4fe:	f7e5 fe15 	bl	800012c <__udivsi3>
 801a502:	0003      	movs	r3, r0
}
 801a504:	0018      	movs	r0, r3
 801a506:	46bd      	mov	sp, r7
 801a508:	b007      	add	sp, #28
 801a50a:	bd90      	pop	{r4, r7, pc}

0801a50c <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b084      	sub	sp, #16
 801a510:	af00      	add	r7, sp, #0
 801a512:	6078      	str	r0, [r7, #4]
 801a514:	000a      	movs	r2, r1
 801a516:	1cfb      	adds	r3, r7, #3
 801a518:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 801a51a:	2300      	movs	r3, #0
 801a51c:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 801a51e:	4b59      	ldr	r3, [pc, #356]	; (801a684 <SX1276Send+0x178>)
 801a520:	795b      	ldrb	r3, [r3, #5]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d002      	beq.n	801a52c <SX1276Send+0x20>
 801a526:	2b01      	cmp	r3, #1
 801a528:	d04c      	beq.n	801a5c4 <SX1276Send+0xb8>
 801a52a:	e0a2      	b.n	801a672 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a52c:	4b55      	ldr	r3, [pc, #340]	; (801a684 <SX1276Send+0x178>)
 801a52e:	2200      	movs	r2, #0
 801a530:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801a532:	1cfb      	adds	r3, r7, #3
 801a534:	781b      	ldrb	r3, [r3, #0]
 801a536:	b29a      	uxth	r2, r3
 801a538:	4b52      	ldr	r3, [pc, #328]	; (801a684 <SX1276Send+0x178>)
 801a53a:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 801a53c:	4b51      	ldr	r3, [pc, #324]	; (801a684 <SX1276Send+0x178>)
 801a53e:	2222      	movs	r2, #34	; 0x22
 801a540:	5c9b      	ldrb	r3, [r3, r2]
 801a542:	2201      	movs	r2, #1
 801a544:	4053      	eors	r3, r2
 801a546:	b2db      	uxtb	r3, r3
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d005      	beq.n	801a558 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 801a54c:	1cfb      	adds	r3, r7, #3
 801a54e:	2101      	movs	r1, #1
 801a550:	0018      	movs	r0, r3
 801a552:	f000 fe31 	bl	801b1b8 <SX1276WriteFifo>
 801a556:	e005      	b.n	801a564 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 801a558:	1cfb      	adds	r3, r7, #3
 801a55a:	781b      	ldrb	r3, [r3, #0]
 801a55c:	0019      	movs	r1, r3
 801a55e:	2032      	movs	r0, #50	; 0x32
 801a560:	f000 fd9e 	bl	801b0a0 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801a564:	1cfb      	adds	r3, r7, #3
 801a566:	781b      	ldrb	r3, [r3, #0]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d009      	beq.n	801a580 <SX1276Send+0x74>
 801a56c:	1cfb      	adds	r3, r7, #3
 801a56e:	781b      	ldrb	r3, [r3, #0]
 801a570:	2b40      	cmp	r3, #64	; 0x40
 801a572:	d805      	bhi.n	801a580 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801a574:	1cfb      	adds	r3, r7, #3
 801a576:	7819      	ldrb	r1, [r3, #0]
 801a578:	4b42      	ldr	r3, [pc, #264]	; (801a684 <SX1276Send+0x178>)
 801a57a:	223f      	movs	r2, #63	; 0x3f
 801a57c:	5499      	strb	r1, [r3, r2]
 801a57e:	e00b      	b.n	801a598 <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 801a580:	1cfb      	adds	r3, r7, #3
 801a582:	781b      	ldrb	r3, [r3, #0]
 801a584:	b29a      	uxth	r2, r3
 801a586:	6879      	ldr	r1, [r7, #4]
 801a588:	4b3f      	ldr	r3, [pc, #252]	; (801a688 <SX1276Send+0x17c>)
 801a58a:	0018      	movs	r0, r3
 801a58c:	f002 f838 	bl	801c600 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801a590:	4b3c      	ldr	r3, [pc, #240]	; (801a684 <SX1276Send+0x178>)
 801a592:	223f      	movs	r2, #63	; 0x3f
 801a594:	2120      	movs	r1, #32
 801a596:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801a598:	4b3a      	ldr	r3, [pc, #232]	; (801a684 <SX1276Send+0x178>)
 801a59a:	223f      	movs	r2, #63	; 0x3f
 801a59c:	5c9a      	ldrb	r2, [r3, r2]
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	0011      	movs	r1, r2
 801a5a2:	0018      	movs	r0, r3
 801a5a4:	f000 fe08 	bl	801b1b8 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801a5a8:	4b36      	ldr	r3, [pc, #216]	; (801a684 <SX1276Send+0x178>)
 801a5aa:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801a5ac:	4b35      	ldr	r3, [pc, #212]	; (801a684 <SX1276Send+0x178>)
 801a5ae:	213f      	movs	r1, #63	; 0x3f
 801a5b0:	5c5b      	ldrb	r3, [r3, r1]
 801a5b2:	b29b      	uxth	r3, r3
 801a5b4:	18d3      	adds	r3, r2, r3
 801a5b6:	b29a      	uxth	r2, r3
 801a5b8:	4b32      	ldr	r3, [pc, #200]	; (801a684 <SX1276Send+0x178>)
 801a5ba:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 801a5bc:	4b31      	ldr	r3, [pc, #196]	; (801a684 <SX1276Send+0x178>)
 801a5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5c0:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a5c2:	e056      	b.n	801a672 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a5c4:	4b2f      	ldr	r3, [pc, #188]	; (801a684 <SX1276Send+0x178>)
 801a5c6:	2255      	movs	r2, #85	; 0x55
 801a5c8:	5c9b      	ldrb	r3, [r3, r2]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d011      	beq.n	801a5f2 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801a5ce:	2033      	movs	r0, #51	; 0x33
 801a5d0:	f000 fd77 	bl	801b0c2 <SX1276Read>
 801a5d4:	0003      	movs	r3, r0
 801a5d6:	001a      	movs	r2, r3
 801a5d8:	2341      	movs	r3, #65	; 0x41
 801a5da:	439a      	bics	r2, r3
 801a5dc:	0013      	movs	r3, r2
 801a5de:	b2db      	uxtb	r3, r3
 801a5e0:	0019      	movs	r1, r3
 801a5e2:	2033      	movs	r0, #51	; 0x33
 801a5e4:	f000 fd5c 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a5e8:	2119      	movs	r1, #25
 801a5ea:	203b      	movs	r0, #59	; 0x3b
 801a5ec:	f000 fd58 	bl	801b0a0 <SX1276Write>
 801a5f0:	e013      	b.n	801a61a <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a5f2:	2033      	movs	r0, #51	; 0x33
 801a5f4:	f000 fd65 	bl	801b0c2 <SX1276Read>
 801a5f8:	0003      	movs	r3, r0
 801a5fa:	b25b      	sxtb	r3, r3
 801a5fc:	2241      	movs	r2, #65	; 0x41
 801a5fe:	4393      	bics	r3, r2
 801a600:	b25b      	sxtb	r3, r3
 801a602:	2201      	movs	r2, #1
 801a604:	4313      	orrs	r3, r2
 801a606:	b25b      	sxtb	r3, r3
 801a608:	b2db      	uxtb	r3, r3
 801a60a:	0019      	movs	r1, r3
 801a60c:	2033      	movs	r0, #51	; 0x33
 801a60e:	f000 fd47 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a612:	211d      	movs	r1, #29
 801a614:	203b      	movs	r0, #59	; 0x3b
 801a616:	f000 fd43 	bl	801b0a0 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 801a61a:	1cfb      	adds	r3, r7, #3
 801a61c:	7819      	ldrb	r1, [r3, #0]
 801a61e:	4b19      	ldr	r3, [pc, #100]	; (801a684 <SX1276Send+0x178>)
 801a620:	2264      	movs	r2, #100	; 0x64
 801a622:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801a624:	1cfb      	adds	r3, r7, #3
 801a626:	781b      	ldrb	r3, [r3, #0]
 801a628:	0019      	movs	r1, r3
 801a62a:	2022      	movs	r0, #34	; 0x22
 801a62c:	f000 fd38 	bl	801b0a0 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 801a630:	2100      	movs	r1, #0
 801a632:	200e      	movs	r0, #14
 801a634:	f000 fd34 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801a638:	2100      	movs	r1, #0
 801a63a:	200d      	movs	r0, #13
 801a63c:	f000 fd30 	bl	801b0a0 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 801a640:	2001      	movs	r0, #1
 801a642:	f000 fd3e 	bl	801b0c2 <SX1276Read>
 801a646:	0003      	movs	r3, r0
 801a648:	001a      	movs	r2, r3
 801a64a:	23f8      	movs	r3, #248	; 0xf8
 801a64c:	439a      	bics	r2, r3
 801a64e:	1e13      	subs	r3, r2, #0
 801a650:	d104      	bne.n	801a65c <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801a652:	f000 f94f 	bl	801a8f4 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 801a656:	2001      	movs	r0, #1
 801a658:	f7ea fdd3 	bl	8005202 <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 801a65c:	1cfb      	adds	r3, r7, #3
 801a65e:	781a      	ldrb	r2, [r3, #0]
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	0011      	movs	r1, r2
 801a664:	0018      	movs	r0, r3
 801a666:	f000 fda7 	bl	801b1b8 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 801a66a:	4b06      	ldr	r3, [pc, #24]	; (801a684 <SX1276Send+0x178>)
 801a66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a66e:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a670:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	0018      	movs	r0, r3
 801a676:	f000 faf3 	bl	801ac60 <SX1276SetTx>
}
 801a67a:	46c0      	nop			; (mov r8, r8)
 801a67c:	46bd      	mov	sp, r7
 801a67e:	b004      	add	sp, #16
 801a680:	bd80      	pop	{r7, pc}
 801a682:	46c0      	nop			; (mov r8, r8)
 801a684:	20001750 	.word	0x20001750
 801a688:	20000e84 	.word	0x20000e84

0801a68c <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 801a68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a68e:	b085      	sub	sp, #20
 801a690:	af00      	add	r7, sp, #0
 801a692:	0002      	movs	r2, r0
 801a694:	1dfb      	adds	r3, r7, #7
 801a696:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 801a698:	210f      	movs	r1, #15
 801a69a:	187b      	adds	r3, r7, r1
 801a69c:	2200      	movs	r2, #0
 801a69e:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 801a6a0:	250e      	movs	r5, #14
 801a6a2:	197b      	adds	r3, r7, r5
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 801a6a8:	260d      	movs	r6, #13
 801a6aa:	19bb      	adds	r3, r7, r6
 801a6ac:	2200      	movs	r2, #0
 801a6ae:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 801a6b0:	187c      	adds	r4, r7, r1
 801a6b2:	2009      	movs	r0, #9
 801a6b4:	f000 fd05 	bl	801b0c2 <SX1276Read>
 801a6b8:	0003      	movs	r3, r0
 801a6ba:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 801a6bc:	197c      	adds	r4, r7, r5
 801a6be:	204d      	movs	r0, #77	; 0x4d
 801a6c0:	f000 fcff 	bl	801b0c2 <SX1276Read>
 801a6c4:	0003      	movs	r3, r0
 801a6c6:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 801a6c8:	4b78      	ldr	r3, [pc, #480]	; (801a8ac <SX1276SetRfTxPower+0x220>)
 801a6ca:	689b      	ldr	r3, [r3, #8]
 801a6cc:	0018      	movs	r0, r3
 801a6ce:	f7eb fda7 	bl	8006220 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 801a6d2:	0003      	movs	r3, r0
 801a6d4:	2b03      	cmp	r3, #3
 801a6d6:	d01f      	beq.n	801a718 <SX1276SetRfTxPower+0x8c>
 801a6d8:	dc23      	bgt.n	801a722 <SX1276SetRfTxPower+0x96>
 801a6da:	2b02      	cmp	r3, #2
 801a6dc:	d008      	beq.n	801a6f0 <SX1276SetRfTxPower+0x64>
 801a6de:	dc20      	bgt.n	801a722 <SX1276SetRfTxPower+0x96>
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d00a      	beq.n	801a6fa <SX1276SetRfTxPower+0x6e>
 801a6e4:	2b01      	cmp	r3, #1
 801a6e6:	d11c      	bne.n	801a722 <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 801a6e8:	19bb      	adds	r3, r7, r6
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	701a      	strb	r2, [r3, #0]
        break;
 801a6ee:	e019      	b.n	801a724 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a6f0:	230d      	movs	r3, #13
 801a6f2:	18fb      	adds	r3, r7, r3
 801a6f4:	2280      	movs	r2, #128	; 0x80
 801a6f6:	701a      	strb	r2, [r3, #0]
        break;
 801a6f8:	e014      	b.n	801a724 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 801a6fa:	1dfb      	adds	r3, r7, #7
 801a6fc:	781b      	ldrb	r3, [r3, #0]
 801a6fe:	b25b      	sxtb	r3, r3
 801a700:	2b0e      	cmp	r3, #14
 801a702:	dd04      	ble.n	801a70e <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a704:	230d      	movs	r3, #13
 801a706:	18fb      	adds	r3, r7, r3
 801a708:	2280      	movs	r2, #128	; 0x80
 801a70a:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 801a70c:	e00a      	b.n	801a724 <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 801a70e:	230d      	movs	r3, #13
 801a710:	18fb      	adds	r3, r7, r3
 801a712:	2200      	movs	r2, #0
 801a714:	701a      	strb	r2, [r3, #0]
        break;
 801a716:	e005      	b.n	801a724 <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 801a718:	230d      	movs	r3, #13
 801a71a:	18fb      	adds	r3, r7, r3
 801a71c:	2280      	movs	r2, #128	; 0x80
 801a71e:	701a      	strb	r2, [r3, #0]
          break;
 801a720:	e000      	b.n	801a724 <SX1276SetRfTxPower+0x98>
        default:
        break;
 801a722:	46c0      	nop			; (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 801a724:	210f      	movs	r1, #15
 801a726:	187b      	adds	r3, r7, r1
 801a728:	781b      	ldrb	r3, [r3, #0]
 801a72a:	b25b      	sxtb	r3, r3
 801a72c:	227f      	movs	r2, #127	; 0x7f
 801a72e:	4013      	ands	r3, r2
 801a730:	b25a      	sxtb	r2, r3
 801a732:	230d      	movs	r3, #13
 801a734:	18fb      	adds	r3, r7, r3
 801a736:	781b      	ldrb	r3, [r3, #0]
 801a738:	b25b      	sxtb	r3, r3
 801a73a:	4313      	orrs	r3, r2
 801a73c:	b25a      	sxtb	r2, r3
 801a73e:	187b      	adds	r3, r7, r1
 801a740:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a742:	187b      	adds	r3, r7, r1
 801a744:	781b      	ldrb	r3, [r3, #0]
 801a746:	b25b      	sxtb	r3, r3
 801a748:	2b00      	cmp	r3, #0
 801a74a:	da67      	bge.n	801a81c <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 801a74c:	1dfb      	adds	r3, r7, #7
 801a74e:	781b      	ldrb	r3, [r3, #0]
 801a750:	b25b      	sxtb	r3, r3
 801a752:	2b11      	cmp	r3, #17
 801a754:	dd07      	ble.n	801a766 <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801a756:	220e      	movs	r2, #14
 801a758:	18bb      	adds	r3, r7, r2
 801a75a:	18ba      	adds	r2, r7, r2
 801a75c:	7812      	ldrb	r2, [r2, #0]
 801a75e:	2107      	movs	r1, #7
 801a760:	430a      	orrs	r2, r1
 801a762:	701a      	strb	r2, [r3, #0]
 801a764:	e00b      	b.n	801a77e <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801a766:	210e      	movs	r1, #14
 801a768:	187b      	adds	r3, r7, r1
 801a76a:	781b      	ldrb	r3, [r3, #0]
 801a76c:	b25b      	sxtb	r3, r3
 801a76e:	2207      	movs	r2, #7
 801a770:	4393      	bics	r3, r2
 801a772:	b25b      	sxtb	r3, r3
 801a774:	2204      	movs	r2, #4
 801a776:	4313      	orrs	r3, r2
 801a778:	b25a      	sxtb	r2, r3
 801a77a:	187b      	adds	r3, r7, r1
 801a77c:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801a77e:	230e      	movs	r3, #14
 801a780:	18fb      	adds	r3, r7, r3
 801a782:	781b      	ldrb	r3, [r3, #0]
 801a784:	2207      	movs	r2, #7
 801a786:	4013      	ands	r3, r2
 801a788:	2b07      	cmp	r3, #7
 801a78a:	d123      	bne.n	801a7d4 <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 801a78c:	1dfb      	adds	r3, r7, #7
 801a78e:	781b      	ldrb	r3, [r3, #0]
 801a790:	b25b      	sxtb	r3, r3
 801a792:	2b04      	cmp	r3, #4
 801a794:	dc02      	bgt.n	801a79c <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 801a796:	1dfb      	adds	r3, r7, #7
 801a798:	2205      	movs	r2, #5
 801a79a:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801a79c:	1dfb      	adds	r3, r7, #7
 801a79e:	781b      	ldrb	r3, [r3, #0]
 801a7a0:	b25b      	sxtb	r3, r3
 801a7a2:	2b14      	cmp	r3, #20
 801a7a4:	dd02      	ble.n	801a7ac <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 801a7a6:	1dfb      	adds	r3, r7, #7
 801a7a8:	2214      	movs	r2, #20
 801a7aa:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801a7ac:	200f      	movs	r0, #15
 801a7ae:	183b      	adds	r3, r7, r0
 801a7b0:	781b      	ldrb	r3, [r3, #0]
 801a7b2:	b25b      	sxtb	r3, r3
 801a7b4:	220f      	movs	r2, #15
 801a7b6:	4393      	bics	r3, r2
 801a7b8:	b25a      	sxtb	r2, r3
 801a7ba:	1dfb      	adds	r3, r7, #7
 801a7bc:	781b      	ldrb	r3, [r3, #0]
 801a7be:	3b05      	subs	r3, #5
 801a7c0:	b2db      	uxtb	r3, r3
 801a7c2:	b25b      	sxtb	r3, r3
 801a7c4:	210f      	movs	r1, #15
 801a7c6:	400b      	ands	r3, r1
 801a7c8:	b25b      	sxtb	r3, r3
 801a7ca:	4313      	orrs	r3, r2
 801a7cc:	b25a      	sxtb	r2, r3
 801a7ce:	183b      	adds	r3, r7, r0
 801a7d0:	701a      	strb	r2, [r3, #0]
 801a7d2:	e059      	b.n	801a888 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 801a7d4:	1dfb      	adds	r3, r7, #7
 801a7d6:	781b      	ldrb	r3, [r3, #0]
 801a7d8:	b25b      	sxtb	r3, r3
 801a7da:	2b01      	cmp	r3, #1
 801a7dc:	dc02      	bgt.n	801a7e4 <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 801a7de:	1dfb      	adds	r3, r7, #7
 801a7e0:	2202      	movs	r2, #2
 801a7e2:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801a7e4:	1dfb      	adds	r3, r7, #7
 801a7e6:	781b      	ldrb	r3, [r3, #0]
 801a7e8:	b25b      	sxtb	r3, r3
 801a7ea:	2b11      	cmp	r3, #17
 801a7ec:	dd02      	ble.n	801a7f4 <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 801a7ee:	1dfb      	adds	r3, r7, #7
 801a7f0:	2211      	movs	r2, #17
 801a7f2:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801a7f4:	200f      	movs	r0, #15
 801a7f6:	183b      	adds	r3, r7, r0
 801a7f8:	781b      	ldrb	r3, [r3, #0]
 801a7fa:	b25b      	sxtb	r3, r3
 801a7fc:	220f      	movs	r2, #15
 801a7fe:	4393      	bics	r3, r2
 801a800:	b25a      	sxtb	r2, r3
 801a802:	1dfb      	adds	r3, r7, #7
 801a804:	781b      	ldrb	r3, [r3, #0]
 801a806:	3b02      	subs	r3, #2
 801a808:	b2db      	uxtb	r3, r3
 801a80a:	b25b      	sxtb	r3, r3
 801a80c:	210f      	movs	r1, #15
 801a80e:	400b      	ands	r3, r1
 801a810:	b25b      	sxtb	r3, r3
 801a812:	4313      	orrs	r3, r2
 801a814:	b25a      	sxtb	r2, r3
 801a816:	183b      	adds	r3, r7, r0
 801a818:	701a      	strb	r2, [r3, #0]
 801a81a:	e035      	b.n	801a888 <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 801a81c:	1dfb      	adds	r3, r7, #7
 801a81e:	781b      	ldrb	r3, [r3, #0]
 801a820:	b25b      	sxtb	r3, r3
 801a822:	2b00      	cmp	r3, #0
 801a824:	dd18      	ble.n	801a858 <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 801a826:	1dfb      	adds	r3, r7, #7
 801a828:	781b      	ldrb	r3, [r3, #0]
 801a82a:	b25b      	sxtb	r3, r3
 801a82c:	2b0f      	cmp	r3, #15
 801a82e:	dd02      	ble.n	801a836 <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 801a830:	1dfb      	adds	r3, r7, #7
 801a832:	220f      	movs	r2, #15
 801a834:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 801a836:	210f      	movs	r1, #15
 801a838:	187b      	adds	r3, r7, r1
 801a83a:	781b      	ldrb	r3, [r3, #0]
 801a83c:	b25b      	sxtb	r3, r3
 801a83e:	227f      	movs	r2, #127	; 0x7f
 801a840:	4393      	bics	r3, r2
 801a842:	b25b      	sxtb	r3, r3
 801a844:	2270      	movs	r2, #112	; 0x70
 801a846:	4313      	orrs	r3, r2
 801a848:	b25a      	sxtb	r2, r3
 801a84a:	1dfb      	adds	r3, r7, #7
 801a84c:	781b      	ldrb	r3, [r3, #0]
 801a84e:	4313      	orrs	r3, r2
 801a850:	b25a      	sxtb	r2, r3
 801a852:	187b      	adds	r3, r7, r1
 801a854:	701a      	strb	r2, [r3, #0]
 801a856:	e017      	b.n	801a888 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 801a858:	1dfb      	adds	r3, r7, #7
 801a85a:	781b      	ldrb	r3, [r3, #0]
 801a85c:	b25b      	sxtb	r3, r3
 801a85e:	3304      	adds	r3, #4
 801a860:	da02      	bge.n	801a868 <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 801a862:	1dfb      	adds	r3, r7, #7
 801a864:	22fc      	movs	r2, #252	; 0xfc
 801a866:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 801a868:	210f      	movs	r1, #15
 801a86a:	187b      	adds	r3, r7, r1
 801a86c:	781b      	ldrb	r3, [r3, #0]
 801a86e:	b25b      	sxtb	r3, r3
 801a870:	227f      	movs	r2, #127	; 0x7f
 801a872:	4393      	bics	r3, r2
 801a874:	b25a      	sxtb	r2, r3
 801a876:	1dfb      	adds	r3, r7, #7
 801a878:	781b      	ldrb	r3, [r3, #0]
 801a87a:	3304      	adds	r3, #4
 801a87c:	b2db      	uxtb	r3, r3
 801a87e:	b25b      	sxtb	r3, r3
 801a880:	4313      	orrs	r3, r2
 801a882:	b25a      	sxtb	r2, r3
 801a884:	187b      	adds	r3, r7, r1
 801a886:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801a888:	230f      	movs	r3, #15
 801a88a:	18fb      	adds	r3, r7, r3
 801a88c:	781b      	ldrb	r3, [r3, #0]
 801a88e:	0019      	movs	r1, r3
 801a890:	2009      	movs	r0, #9
 801a892:	f000 fc05 	bl	801b0a0 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801a896:	230e      	movs	r3, #14
 801a898:	18fb      	adds	r3, r7, r3
 801a89a:	781b      	ldrb	r3, [r3, #0]
 801a89c:	0019      	movs	r1, r3
 801a89e:	204d      	movs	r0, #77	; 0x4d
 801a8a0:	f000 fbfe 	bl	801b0a0 <SX1276Write>
}
 801a8a4:	46c0      	nop			; (mov r8, r8)
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	b005      	add	sp, #20
 801a8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8ac:	20001750 	.word	0x20001750

0801a8b0 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801a8b0:	b580      	push	{r7, lr}
 801a8b2:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 801a8b4:	4b0b      	ldr	r3, [pc, #44]	; (801a8e4 <SX1276SetSleep+0x34>)
 801a8b6:	0018      	movs	r0, r3
 801a8b8:	f002 fa66 	bl	801cd88 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a8bc:	4b0a      	ldr	r3, [pc, #40]	; (801a8e8 <SX1276SetSleep+0x38>)
 801a8be:	0018      	movs	r0, r3
 801a8c0:	f002 fa62 	bl	801cd88 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a8c4:	4b09      	ldr	r3, [pc, #36]	; (801a8ec <SX1276SetSleep+0x3c>)
 801a8c6:	0018      	movs	r0, r3
 801a8c8:	f002 fa5e 	bl	801cd88 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a8cc:	2000      	movs	r0, #0
 801a8ce:	f000 fb20 	bl	801af12 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 801a8d2:	2000      	movs	r0, #0
 801a8d4:	f7eb faf0 	bl	8005eb8 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 801a8d8:	4b05      	ldr	r3, [pc, #20]	; (801a8f0 <SX1276SetSleep+0x40>)
 801a8da:	2200      	movs	r2, #0
 801a8dc:	711a      	strb	r2, [r3, #4]
}
 801a8de:	46c0      	nop			; (mov r8, r8)
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	bd80      	pop	{r7, pc}
 801a8e4:	200017b8 	.word	0x200017b8
 801a8e8:	20001720 	.word	0x20001720
 801a8ec:	20001738 	.word	0x20001738
 801a8f0:	20001750 	.word	0x20001750

0801a8f4 <SX1276SetStby>:

void SX1276SetStby( void )
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 801a8f8:	4b0a      	ldr	r3, [pc, #40]	; (801a924 <SX1276SetStby+0x30>)
 801a8fa:	0018      	movs	r0, r3
 801a8fc:	f002 fa44 	bl	801cd88 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a900:	4b09      	ldr	r3, [pc, #36]	; (801a928 <SX1276SetStby+0x34>)
 801a902:	0018      	movs	r0, r3
 801a904:	f002 fa40 	bl	801cd88 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a908:	4b08      	ldr	r3, [pc, #32]	; (801a92c <SX1276SetStby+0x38>)
 801a90a:	0018      	movs	r0, r3
 801a90c:	f002 fa3c 	bl	801cd88 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801a910:	2001      	movs	r0, #1
 801a912:	f000 fafe 	bl	801af12 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801a916:	4b06      	ldr	r3, [pc, #24]	; (801a930 <SX1276SetStby+0x3c>)
 801a918:	2200      	movs	r2, #0
 801a91a:	711a      	strb	r2, [r3, #4]
}
 801a91c:	46c0      	nop			; (mov r8, r8)
 801a91e:	46bd      	mov	sp, r7
 801a920:	bd80      	pop	{r7, pc}
 801a922:	46c0      	nop			; (mov r8, r8)
 801a924:	200017b8 	.word	0x200017b8
 801a928:	20001720 	.word	0x20001720
 801a92c:	20001738 	.word	0x20001738
 801a930:	20001750 	.word	0x20001750

0801a934 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801a934:	b580      	push	{r7, lr}
 801a936:	b084      	sub	sp, #16
 801a938:	af00      	add	r7, sp, #0
 801a93a:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 801a93c:	230f      	movs	r3, #15
 801a93e:	18fb      	adds	r3, r7, r3
 801a940:	2200      	movs	r2, #0
 801a942:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 801a944:	4bba      	ldr	r3, [pc, #744]	; (801ac30 <SX1276SetRx+0x2fc>)
 801a946:	0018      	movs	r0, r3
 801a948:	f002 fa1e 	bl	801cd88 <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 801a94c:	4bb9      	ldr	r3, [pc, #740]	; (801ac34 <SX1276SetRx+0x300>)
 801a94e:	795b      	ldrb	r3, [r3, #5]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d002      	beq.n	801a95a <SX1276SetRx+0x26>
 801a954:	2b01      	cmp	r3, #1
 801a956:	d041      	beq.n	801a9dc <SX1276SetRx+0xa8>
 801a958:	e127      	b.n	801abaa <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801a95a:	230f      	movs	r3, #15
 801a95c:	18fb      	adds	r3, r7, r3
 801a95e:	4ab5      	ldr	r2, [pc, #724]	; (801ac34 <SX1276SetRx+0x300>)
 801a960:	2126      	movs	r1, #38	; 0x26
 801a962:	5c52      	ldrb	r2, [r2, r1]
 801a964:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a966:	2040      	movs	r0, #64	; 0x40
 801a968:	f000 fbab 	bl	801b0c2 <SX1276Read>
 801a96c:	0003      	movs	r3, r0
 801a96e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801a970:	2203      	movs	r2, #3
 801a972:	4013      	ands	r3, r2
 801a974:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801a976:	220c      	movs	r2, #12
 801a978:	4313      	orrs	r3, r2
 801a97a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a97c:	b2db      	uxtb	r3, r3
 801a97e:	0019      	movs	r1, r3
 801a980:	2040      	movs	r0, #64	; 0x40
 801a982:	f000 fb8d 	bl	801b0a0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a986:	2041      	movs	r0, #65	; 0x41
 801a988:	f000 fb9b 	bl	801b0c2 <SX1276Read>
 801a98c:	0003      	movs	r3, r0
 801a98e:	001a      	movs	r2, r3
 801a990:	233f      	movs	r3, #63	; 0x3f
 801a992:	425b      	negs	r3, r3
 801a994:	4313      	orrs	r3, r2
 801a996:	b2db      	uxtb	r3, r3
 801a998:	0019      	movs	r1, r3
 801a99a:	2041      	movs	r0, #65	; 0x41
 801a99c:	f000 fb80 	bl	801b0a0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a9a0:	2035      	movs	r0, #53	; 0x35
 801a9a2:	f000 fb8e 	bl	801b0c2 <SX1276Read>
 801a9a6:	0003      	movs	r3, r0
 801a9a8:	001a      	movs	r2, r3
 801a9aa:	233f      	movs	r3, #63	; 0x3f
 801a9ac:	4013      	ands	r3, r2
 801a9ae:	b2d9      	uxtb	r1, r3
 801a9b0:	4ba0      	ldr	r3, [pc, #640]	; (801ac34 <SX1276SetRx+0x300>)
 801a9b2:	223e      	movs	r2, #62	; 0x3e
 801a9b4:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801a9b6:	211e      	movs	r1, #30
 801a9b8:	200d      	movs	r0, #13
 801a9ba:	f000 fb71 	bl	801b0a0 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a9be:	4b9d      	ldr	r3, [pc, #628]	; (801ac34 <SX1276SetRx+0x300>)
 801a9c0:	2230      	movs	r2, #48	; 0x30
 801a9c2:	2100      	movs	r1, #0
 801a9c4:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a9c6:	4b9b      	ldr	r3, [pc, #620]	; (801ac34 <SX1276SetRx+0x300>)
 801a9c8:	2231      	movs	r2, #49	; 0x31
 801a9ca:	2100      	movs	r1, #0
 801a9cc:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a9ce:	4b99      	ldr	r3, [pc, #612]	; (801ac34 <SX1276SetRx+0x300>)
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801a9d4:	4b97      	ldr	r3, [pc, #604]	; (801ac34 <SX1276SetRx+0x300>)
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801a9da:	e0e6      	b.n	801abaa <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a9dc:	4b95      	ldr	r3, [pc, #596]	; (801ac34 <SX1276SetRx+0x300>)
 801a9de:	2255      	movs	r2, #85	; 0x55
 801a9e0:	5c9b      	ldrb	r3, [r3, r2]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d010      	beq.n	801aa08 <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801a9e6:	2033      	movs	r0, #51	; 0x33
 801a9e8:	f000 fb6b 	bl	801b0c2 <SX1276Read>
 801a9ec:	0003      	movs	r3, r0
 801a9ee:	001a      	movs	r2, r3
 801a9f0:	2341      	movs	r3, #65	; 0x41
 801a9f2:	4313      	orrs	r3, r2
 801a9f4:	b2db      	uxtb	r3, r3
 801a9f6:	0019      	movs	r1, r3
 801a9f8:	2033      	movs	r0, #51	; 0x33
 801a9fa:	f000 fb51 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a9fe:	2119      	movs	r1, #25
 801aa00:	203b      	movs	r0, #59	; 0x3b
 801aa02:	f000 fb4d 	bl	801b0a0 <SX1276Write>
 801aa06:	e013      	b.n	801aa30 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801aa08:	2033      	movs	r0, #51	; 0x33
 801aa0a:	f000 fb5a 	bl	801b0c2 <SX1276Read>
 801aa0e:	0003      	movs	r3, r0
 801aa10:	b25b      	sxtb	r3, r3
 801aa12:	2241      	movs	r2, #65	; 0x41
 801aa14:	4393      	bics	r3, r2
 801aa16:	b25b      	sxtb	r3, r3
 801aa18:	2201      	movs	r2, #1
 801aa1a:	4313      	orrs	r3, r2
 801aa1c:	b25b      	sxtb	r3, r3
 801aa1e:	b2db      	uxtb	r3, r3
 801aa20:	0019      	movs	r1, r3
 801aa22:	2033      	movs	r0, #51	; 0x33
 801aa24:	f000 fb3c 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801aa28:	211d      	movs	r1, #29
 801aa2a:	203b      	movs	r0, #59	; 0x3b
 801aa2c:	f000 fb38 	bl	801b0a0 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801aa30:	4b80      	ldr	r3, [pc, #512]	; (801ac34 <SX1276SetRx+0x300>)
 801aa32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa34:	2b08      	cmp	r3, #8
 801aa36:	d900      	bls.n	801aa3a <SX1276SetRx+0x106>
 801aa38:	e075      	b.n	801ab26 <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801aa3a:	2031      	movs	r0, #49	; 0x31
 801aa3c:	f000 fb41 	bl	801b0c2 <SX1276Read>
 801aa40:	0003      	movs	r3, r0
 801aa42:	001a      	movs	r2, r3
 801aa44:	237f      	movs	r3, #127	; 0x7f
 801aa46:	4013      	ands	r3, r2
 801aa48:	b2db      	uxtb	r3, r3
 801aa4a:	0019      	movs	r1, r3
 801aa4c:	2031      	movs	r0, #49	; 0x31
 801aa4e:	f000 fb27 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801aa52:	2100      	movs	r1, #0
 801aa54:	2030      	movs	r0, #48	; 0x30
 801aa56:	f000 fb23 	bl	801b0a0 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801aa5a:	4b76      	ldr	r3, [pc, #472]	; (801ac34 <SX1276SetRx+0x300>)
 801aa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa5e:	2b08      	cmp	r3, #8
 801aa60:	d86e      	bhi.n	801ab40 <SX1276SetRx+0x20c>
 801aa62:	009a      	lsls	r2, r3, #2
 801aa64:	4b74      	ldr	r3, [pc, #464]	; (801ac38 <SX1276SetRx+0x304>)
 801aa66:	18d3      	adds	r3, r2, r3
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801aa6c:	2148      	movs	r1, #72	; 0x48
 801aa6e:	202f      	movs	r0, #47	; 0x2f
 801aa70:	f000 fb16 	bl	801b0a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801aa74:	4b6f      	ldr	r3, [pc, #444]	; (801ac34 <SX1276SetRx+0x300>)
 801aa76:	689b      	ldr	r3, [r3, #8]
 801aa78:	4a70      	ldr	r2, [pc, #448]	; (801ac3c <SX1276SetRx+0x308>)
 801aa7a:	4694      	mov	ip, r2
 801aa7c:	4463      	add	r3, ip
 801aa7e:	0018      	movs	r0, r3
 801aa80:	f7fe feb0 	bl	80197e4 <SX1276SetChannel>
                    break;
 801aa84:	e05c      	b.n	801ab40 <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aa86:	2144      	movs	r1, #68	; 0x44
 801aa88:	202f      	movs	r0, #47	; 0x2f
 801aa8a:	f000 fb09 	bl	801b0a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801aa8e:	4b69      	ldr	r3, [pc, #420]	; (801ac34 <SX1276SetRx+0x300>)
 801aa90:	689b      	ldr	r3, [r3, #8]
 801aa92:	4a6b      	ldr	r2, [pc, #428]	; (801ac40 <SX1276SetRx+0x30c>)
 801aa94:	4694      	mov	ip, r2
 801aa96:	4463      	add	r3, ip
 801aa98:	0018      	movs	r0, r3
 801aa9a:	f7fe fea3 	bl	80197e4 <SX1276SetChannel>
                    break;
 801aa9e:	e04f      	b.n	801ab40 <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aaa0:	2144      	movs	r1, #68	; 0x44
 801aaa2:	202f      	movs	r0, #47	; 0x2f
 801aaa4:	f000 fafc 	bl	801b0a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801aaa8:	4b62      	ldr	r3, [pc, #392]	; (801ac34 <SX1276SetRx+0x300>)
 801aaaa:	689b      	ldr	r3, [r3, #8]
 801aaac:	4a65      	ldr	r2, [pc, #404]	; (801ac44 <SX1276SetRx+0x310>)
 801aaae:	4694      	mov	ip, r2
 801aab0:	4463      	add	r3, ip
 801aab2:	0018      	movs	r0, r3
 801aab4:	f7fe fe96 	bl	80197e4 <SX1276SetChannel>
                    break;
 801aab8:	e042      	b.n	801ab40 <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aaba:	2144      	movs	r1, #68	; 0x44
 801aabc:	202f      	movs	r0, #47	; 0x2f
 801aabe:	f000 faef 	bl	801b0a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801aac2:	4b5c      	ldr	r3, [pc, #368]	; (801ac34 <SX1276SetRx+0x300>)
 801aac4:	689b      	ldr	r3, [r3, #8]
 801aac6:	4a60      	ldr	r2, [pc, #384]	; (801ac48 <SX1276SetRx+0x314>)
 801aac8:	4694      	mov	ip, r2
 801aaca:	4463      	add	r3, ip
 801aacc:	0018      	movs	r0, r3
 801aace:	f7fe fe89 	bl	80197e4 <SX1276SetChannel>
                    break;
 801aad2:	e035      	b.n	801ab40 <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aad4:	2144      	movs	r1, #68	; 0x44
 801aad6:	202f      	movs	r0, #47	; 0x2f
 801aad8:	f000 fae2 	bl	801b0a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801aadc:	4b55      	ldr	r3, [pc, #340]	; (801ac34 <SX1276SetRx+0x300>)
 801aade:	689b      	ldr	r3, [r3, #8]
 801aae0:	4a5a      	ldr	r2, [pc, #360]	; (801ac4c <SX1276SetRx+0x318>)
 801aae2:	4694      	mov	ip, r2
 801aae4:	4463      	add	r3, ip
 801aae6:	0018      	movs	r0, r3
 801aae8:	f7fe fe7c 	bl	80197e4 <SX1276SetChannel>
                    break;
 801aaec:	e028      	b.n	801ab40 <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aaee:	2144      	movs	r1, #68	; 0x44
 801aaf0:	202f      	movs	r0, #47	; 0x2f
 801aaf2:	f000 fad5 	bl	801b0a0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801aaf6:	4b4f      	ldr	r3, [pc, #316]	; (801ac34 <SX1276SetRx+0x300>)
 801aaf8:	689b      	ldr	r3, [r3, #8]
 801aafa:	4a55      	ldr	r2, [pc, #340]	; (801ac50 <SX1276SetRx+0x31c>)
 801aafc:	4694      	mov	ip, r2
 801aafe:	4463      	add	r3, ip
 801ab00:	0018      	movs	r0, r3
 801ab02:	f7fe fe6f 	bl	80197e4 <SX1276SetChannel>
                    break;
 801ab06:	e01b      	b.n	801ab40 <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801ab08:	2140      	movs	r1, #64	; 0x40
 801ab0a:	202f      	movs	r0, #47	; 0x2f
 801ab0c:	f000 fac8 	bl	801b0a0 <SX1276Write>
                    break;
 801ab10:	e016      	b.n	801ab40 <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801ab12:	2140      	movs	r1, #64	; 0x40
 801ab14:	202f      	movs	r0, #47	; 0x2f
 801ab16:	f000 fac3 	bl	801b0a0 <SX1276Write>
                    break;
 801ab1a:	e011      	b.n	801ab40 <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801ab1c:	2140      	movs	r1, #64	; 0x40
 801ab1e:	202f      	movs	r0, #47	; 0x2f
 801ab20:	f000 fabe 	bl	801b0a0 <SX1276Write>
                    break;
 801ab24:	e00c      	b.n	801ab40 <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801ab26:	2031      	movs	r0, #49	; 0x31
 801ab28:	f000 facb 	bl	801b0c2 <SX1276Read>
 801ab2c:	0003      	movs	r3, r0
 801ab2e:	001a      	movs	r2, r3
 801ab30:	2380      	movs	r3, #128	; 0x80
 801ab32:	425b      	negs	r3, r3
 801ab34:	4313      	orrs	r3, r2
 801ab36:	b2db      	uxtb	r3, r3
 801ab38:	0019      	movs	r1, r3
 801ab3a:	2031      	movs	r0, #49	; 0x31
 801ab3c:	f000 fab0 	bl	801b0a0 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801ab40:	230f      	movs	r3, #15
 801ab42:	18fb      	adds	r3, r7, r3
 801ab44:	4a3b      	ldr	r2, [pc, #236]	; (801ac34 <SX1276SetRx+0x300>)
 801ab46:	2156      	movs	r1, #86	; 0x56
 801ab48:	5c52      	ldrb	r2, [r2, r1]
 801ab4a:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801ab4c:	4b39      	ldr	r3, [pc, #228]	; (801ac34 <SX1276SetRx+0x300>)
 801ab4e:	2253      	movs	r2, #83	; 0x53
 801ab50:	5c9b      	ldrb	r3, [r3, r2]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d010      	beq.n	801ab78 <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801ab56:	211d      	movs	r1, #29
 801ab58:	2011      	movs	r0, #17
 801ab5a:	f000 faa1 	bl	801b0a0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801ab5e:	2040      	movs	r0, #64	; 0x40
 801ab60:	f000 faaf 	bl	801b0c2 <SX1276Read>
 801ab64:	0003      	movs	r3, r0
 801ab66:	001a      	movs	r2, r3
 801ab68:	2333      	movs	r3, #51	; 0x33
 801ab6a:	4013      	ands	r3, r2
 801ab6c:	b2db      	uxtb	r3, r3
 801ab6e:	0019      	movs	r1, r3
 801ab70:	2040      	movs	r0, #64	; 0x40
 801ab72:	f000 fa95 	bl	801b0a0 <SX1276Write>
 801ab76:	e00f      	b.n	801ab98 <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801ab78:	211f      	movs	r1, #31
 801ab7a:	2011      	movs	r0, #17
 801ab7c:	f000 fa90 	bl	801b0a0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801ab80:	2040      	movs	r0, #64	; 0x40
 801ab82:	f000 fa9e 	bl	801b0c2 <SX1276Read>
 801ab86:	0003      	movs	r3, r0
 801ab88:	001a      	movs	r2, r3
 801ab8a:	233f      	movs	r3, #63	; 0x3f
 801ab8c:	4013      	ands	r3, r2
 801ab8e:	b2db      	uxtb	r3, r3
 801ab90:	0019      	movs	r1, r3
 801ab92:	2040      	movs	r0, #64	; 0x40
 801ab94:	f000 fa84 	bl	801b0a0 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801ab98:	2100      	movs	r1, #0
 801ab9a:	200f      	movs	r0, #15
 801ab9c:	f000 fa80 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801aba0:	2100      	movs	r1, #0
 801aba2:	200d      	movs	r0, #13
 801aba4:	f000 fa7c 	bl	801b0a0 <SX1276Write>
        }
        break;
 801aba8:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801abaa:	2380      	movs	r3, #128	; 0x80
 801abac:	005a      	lsls	r2, r3, #1
 801abae:	4b29      	ldr	r3, [pc, #164]	; (801ac54 <SX1276SetRx+0x320>)
 801abb0:	2100      	movs	r1, #0
 801abb2:	0018      	movs	r0, r3
 801abb4:	f003 fa8d 	bl	801e0d2 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801abb8:	4b1e      	ldr	r3, [pc, #120]	; (801ac34 <SX1276SetRx+0x300>)
 801abba:	2201      	movs	r2, #1
 801abbc:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d009      	beq.n	801abd8 <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801abc4:	687a      	ldr	r2, [r7, #4]
 801abc6:	4b24      	ldr	r3, [pc, #144]	; (801ac58 <SX1276SetRx+0x324>)
 801abc8:	0011      	movs	r1, r2
 801abca:	0018      	movs	r0, r3
 801abcc:	f002 f954 	bl	801ce78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801abd0:	4b21      	ldr	r3, [pc, #132]	; (801ac58 <SX1276SetRx+0x324>)
 801abd2:	0018      	movs	r0, r3
 801abd4:	f002 f860 	bl	801cc98 <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801abd8:	4b16      	ldr	r3, [pc, #88]	; (801ac34 <SX1276SetRx+0x300>)
 801abda:	795b      	ldrb	r3, [r3, #5]
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d116      	bne.n	801ac0e <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801abe0:	2005      	movs	r0, #5
 801abe2:	f000 f996 	bl	801af12 <SX1276SetOpMode>

        if( rxContinuous == false )
 801abe6:	230f      	movs	r3, #15
 801abe8:	18fb      	adds	r3, r7, r3
 801abea:	781b      	ldrb	r3, [r3, #0]
 801abec:	2201      	movs	r2, #1
 801abee:	4053      	eors	r3, r2
 801abf0:	b2db      	uxtb	r3, r3
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d017      	beq.n	801ac26 <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801abf6:	4b0f      	ldr	r3, [pc, #60]	; (801ac34 <SX1276SetRx+0x300>)
 801abf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801abfa:	4b18      	ldr	r3, [pc, #96]	; (801ac5c <SX1276SetRx+0x328>)
 801abfc:	0011      	movs	r1, r2
 801abfe:	0018      	movs	r0, r3
 801ac00:	f002 f93a 	bl	801ce78 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 801ac04:	4b15      	ldr	r3, [pc, #84]	; (801ac5c <SX1276SetRx+0x328>)
 801ac06:	0018      	movs	r0, r3
 801ac08:	f002 f846 	bl	801cc98 <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801ac0c:	e00b      	b.n	801ac26 <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 801ac0e:	230f      	movs	r3, #15
 801ac10:	18fb      	adds	r3, r7, r3
 801ac12:	781b      	ldrb	r3, [r3, #0]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d003      	beq.n	801ac20 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801ac18:	2005      	movs	r0, #5
 801ac1a:	f000 f97a 	bl	801af12 <SX1276SetOpMode>
}
 801ac1e:	e002      	b.n	801ac26 <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801ac20:	2006      	movs	r0, #6
 801ac22:	f000 f976 	bl	801af12 <SX1276SetOpMode>
}
 801ac26:	46c0      	nop			; (mov r8, r8)
 801ac28:	46bd      	mov	sp, r7
 801ac2a:	b004      	add	sp, #16
 801ac2c:	bd80      	pop	{r7, pc}
 801ac2e:	46c0      	nop			; (mov r8, r8)
 801ac30:	20001720 	.word	0x20001720
 801ac34:	20001750 	.word	0x20001750
 801ac38:	0801fec8 	.word	0x0801fec8
 801ac3c:	00001e82 	.word	0x00001e82
 801ac40:	000028b4 	.word	0x000028b4
 801ac44:	00003d04 	.word	0x00003d04
 801ac48:	0000515e 	.word	0x0000515e
 801ac4c:	00007a12 	.word	0x00007a12
 801ac50:	0000a2c6 	.word	0x0000a2c6
 801ac54:	20000e84 	.word	0x20000e84
 801ac58:	200017b8 	.word	0x200017b8
 801ac5c:	20001738 	.word	0x20001738

0801ac60 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b082      	sub	sp, #8
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 801ac68:	4b38      	ldr	r3, [pc, #224]	; (801ad4c <SX1276SetTx+0xec>)
 801ac6a:	0018      	movs	r0, r3
 801ac6c:	f002 f88c 	bl	801cd88 <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ac70:	687a      	ldr	r2, [r7, #4]
 801ac72:	4b37      	ldr	r3, [pc, #220]	; (801ad50 <SX1276SetTx+0xf0>)
 801ac74:	0011      	movs	r1, r2
 801ac76:	0018      	movs	r0, r3
 801ac78:	f002 f8fe 	bl	801ce78 <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 801ac7c:	4b35      	ldr	r3, [pc, #212]	; (801ad54 <SX1276SetTx+0xf4>)
 801ac7e:	795b      	ldrb	r3, [r3, #5]
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d002      	beq.n	801ac8a <SX1276SetTx+0x2a>
 801ac84:	2b01      	cmp	r3, #1
 801ac86:	d024      	beq.n	801acd2 <SX1276SetTx+0x72>
 801ac88:	e052      	b.n	801ad30 <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801ac8a:	2040      	movs	r0, #64	; 0x40
 801ac8c:	f000 fa19 	bl	801b0c2 <SX1276Read>
 801ac90:	0003      	movs	r3, r0
 801ac92:	001a      	movs	r2, r3
 801ac94:	2303      	movs	r3, #3
 801ac96:	4013      	ands	r3, r2
 801ac98:	b2db      	uxtb	r3, r3
 801ac9a:	0019      	movs	r1, r3
 801ac9c:	2040      	movs	r0, #64	; 0x40
 801ac9e:	f000 f9ff 	bl	801b0a0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801aca2:	2041      	movs	r0, #65	; 0x41
 801aca4:	f000 fa0d 	bl	801b0c2 <SX1276Read>
 801aca8:	0003      	movs	r3, r0
 801acaa:	001a      	movs	r2, r3
 801acac:	233e      	movs	r3, #62	; 0x3e
 801acae:	4013      	ands	r3, r2
 801acb0:	b2db      	uxtb	r3, r3
 801acb2:	0019      	movs	r1, r3
 801acb4:	2041      	movs	r0, #65	; 0x41
 801acb6:	f000 f9f3 	bl	801b0a0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801acba:	2035      	movs	r0, #53	; 0x35
 801acbc:	f000 fa01 	bl	801b0c2 <SX1276Read>
 801acc0:	0003      	movs	r3, r0
 801acc2:	001a      	movs	r2, r3
 801acc4:	233f      	movs	r3, #63	; 0x3f
 801acc6:	4013      	ands	r3, r2
 801acc8:	b2d9      	uxtb	r1, r3
 801acca:	4b22      	ldr	r3, [pc, #136]	; (801ad54 <SX1276SetTx+0xf4>)
 801accc:	223e      	movs	r2, #62	; 0x3e
 801acce:	5499      	strb	r1, [r3, r2]
        }
        break;
 801acd0:	e02e      	b.n	801ad30 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801acd2:	4b20      	ldr	r3, [pc, #128]	; (801ad54 <SX1276SetTx+0xf4>)
 801acd4:	2253      	movs	r2, #83	; 0x53
 801acd6:	5c9b      	ldrb	r3, [r3, r2]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d014      	beq.n	801ad06 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801acdc:	21f5      	movs	r1, #245	; 0xf5
 801acde:	2011      	movs	r0, #17
 801ace0:	f000 f9de 	bl	801b0a0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801ace4:	2040      	movs	r0, #64	; 0x40
 801ace6:	f000 f9ec 	bl	801b0c2 <SX1276Read>
 801acea:	0003      	movs	r3, r0
 801acec:	b25b      	sxtb	r3, r3
 801acee:	2233      	movs	r2, #51	; 0x33
 801acf0:	4013      	ands	r3, r2
 801acf2:	b25b      	sxtb	r3, r3
 801acf4:	2240      	movs	r2, #64	; 0x40
 801acf6:	4313      	orrs	r3, r2
 801acf8:	b25b      	sxtb	r3, r3
 801acfa:	b2db      	uxtb	r3, r3
 801acfc:	0019      	movs	r1, r3
 801acfe:	2040      	movs	r0, #64	; 0x40
 801ad00:	f000 f9ce 	bl	801b0a0 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801ad04:	e013      	b.n	801ad2e <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801ad06:	21f7      	movs	r1, #247	; 0xf7
 801ad08:	2011      	movs	r0, #17
 801ad0a:	f000 f9c9 	bl	801b0a0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801ad0e:	2040      	movs	r0, #64	; 0x40
 801ad10:	f000 f9d7 	bl	801b0c2 <SX1276Read>
 801ad14:	0003      	movs	r3, r0
 801ad16:	b25b      	sxtb	r3, r3
 801ad18:	223f      	movs	r2, #63	; 0x3f
 801ad1a:	4013      	ands	r3, r2
 801ad1c:	b25b      	sxtb	r3, r3
 801ad1e:	2240      	movs	r2, #64	; 0x40
 801ad20:	4313      	orrs	r3, r2
 801ad22:	b25b      	sxtb	r3, r3
 801ad24:	b2db      	uxtb	r3, r3
 801ad26:	0019      	movs	r1, r3
 801ad28:	2040      	movs	r0, #64	; 0x40
 801ad2a:	f000 f9b9 	bl	801b0a0 <SX1276Write>
        break;
 801ad2e:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801ad30:	4b08      	ldr	r3, [pc, #32]	; (801ad54 <SX1276SetTx+0xf4>)
 801ad32:	2202      	movs	r2, #2
 801ad34:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801ad36:	4b06      	ldr	r3, [pc, #24]	; (801ad50 <SX1276SetTx+0xf0>)
 801ad38:	0018      	movs	r0, r3
 801ad3a:	f001 ffad 	bl	801cc98 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801ad3e:	2003      	movs	r0, #3
 801ad40:	f000 f8e7 	bl	801af12 <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 801ad44:	46c0      	nop			; (mov r8, r8)
 801ad46:	46bd      	mov	sp, r7
 801ad48:	b002      	add	sp, #8
 801ad4a:	bd80      	pop	{r7, pc}
 801ad4c:	200017b8 	.word	0x200017b8
 801ad50:	20001720 	.word	0x20001720
 801ad54:	20001750 	.word	0x20001750

0801ad58 <SX1276StartCad>:

void SX1276StartCad( void )
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801ad5c:	4b11      	ldr	r3, [pc, #68]	; (801ada4 <SX1276StartCad+0x4c>)
 801ad5e:	795b      	ldrb	r3, [r3, #5]
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d01a      	beq.n	801ad9a <SX1276StartCad+0x42>
 801ad64:	2b01      	cmp	r3, #1
 801ad66:	d000      	beq.n	801ad6a <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801ad68:	e018      	b.n	801ad9c <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801ad6a:	21fa      	movs	r1, #250	; 0xfa
 801ad6c:	2011      	movs	r0, #17
 801ad6e:	f000 f997 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801ad72:	2040      	movs	r0, #64	; 0x40
 801ad74:	f000 f9a5 	bl	801b0c2 <SX1276Read>
 801ad78:	0003      	movs	r3, r0
 801ad7a:	001a      	movs	r2, r3
 801ad7c:	2303      	movs	r3, #3
 801ad7e:	439a      	bics	r2, r3
 801ad80:	0013      	movs	r3, r2
 801ad82:	b2db      	uxtb	r3, r3
 801ad84:	0019      	movs	r1, r3
 801ad86:	2040      	movs	r0, #64	; 0x40
 801ad88:	f000 f98a 	bl	801b0a0 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801ad8c:	4b05      	ldr	r3, [pc, #20]	; (801ada4 <SX1276StartCad+0x4c>)
 801ad8e:	2203      	movs	r2, #3
 801ad90:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801ad92:	2007      	movs	r0, #7
 801ad94:	f000 f8bd 	bl	801af12 <SX1276SetOpMode>
        break;
 801ad98:	e000      	b.n	801ad9c <SX1276StartCad+0x44>
        break;
 801ad9a:	46c0      	nop			; (mov r8, r8)
    }
}
 801ad9c:	46c0      	nop			; (mov r8, r8)
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	bd80      	pop	{r7, pc}
 801ada2:	46c0      	nop			; (mov r8, r8)
 801ada4:	20001750 	.word	0x20001750

0801ada8 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801ada8:	b580      	push	{r7, lr}
 801adaa:	b08e      	sub	sp, #56	; 0x38
 801adac:	af0a      	add	r7, sp, #40	; 0x28
 801adae:	6078      	str	r0, [r7, #4]
 801adb0:	0008      	movs	r0, r1
 801adb2:	0011      	movs	r1, r2
 801adb4:	1cfb      	adds	r3, r7, #3
 801adb6:	1c02      	adds	r2, r0, #0
 801adb8:	701a      	strb	r2, [r3, #0]
 801adba:	003b      	movs	r3, r7
 801adbc:	1c0a      	adds	r2, r1, #0
 801adbe:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801adc0:	003b      	movs	r3, r7
 801adc2:	881a      	ldrh	r2, [r3, #0]
 801adc4:	0013      	movs	r3, r2
 801adc6:	015b      	lsls	r3, r3, #5
 801adc8:	1a9b      	subs	r3, r3, r2
 801adca:	009b      	lsls	r3, r3, #2
 801adcc:	189b      	adds	r3, r3, r2
 801adce:	00db      	lsls	r3, r3, #3
 801add0:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	0018      	movs	r0, r3
 801add6:	f7fe fd05 	bl	80197e4 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801adda:	1cfb      	adds	r3, r7, #3
 801addc:	2100      	movs	r1, #0
 801adde:	5659      	ldrsb	r1, [r3, r1]
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	9308      	str	r3, [sp, #32]
 801ade4:	2300      	movs	r3, #0
 801ade6:	9307      	str	r3, [sp, #28]
 801ade8:	2300      	movs	r3, #0
 801adea:	9306      	str	r3, [sp, #24]
 801adec:	2300      	movs	r3, #0
 801adee:	9305      	str	r3, [sp, #20]
 801adf0:	2300      	movs	r3, #0
 801adf2:	9304      	str	r3, [sp, #16]
 801adf4:	2300      	movs	r3, #0
 801adf6:	9303      	str	r3, [sp, #12]
 801adf8:	2305      	movs	r3, #5
 801adfa:	9302      	str	r3, [sp, #8]
 801adfc:	2300      	movs	r3, #0
 801adfe:	9301      	str	r3, [sp, #4]
 801ae00:	2396      	movs	r3, #150	; 0x96
 801ae02:	015b      	lsls	r3, r3, #5
 801ae04:	9300      	str	r3, [sp, #0]
 801ae06:	2300      	movs	r3, #0
 801ae08:	2200      	movs	r2, #0
 801ae0a:	2000      	movs	r0, #0
 801ae0c:	f7ff f8d4 	bl	8019fb8 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801ae10:	2031      	movs	r0, #49	; 0x31
 801ae12:	f000 f956 	bl	801b0c2 <SX1276Read>
 801ae16:	0003      	movs	r3, r0
 801ae18:	001a      	movs	r2, r3
 801ae1a:	2340      	movs	r3, #64	; 0x40
 801ae1c:	439a      	bics	r2, r3
 801ae1e:	0013      	movs	r3, r2
 801ae20:	b2db      	uxtb	r3, r3
 801ae22:	0019      	movs	r1, r3
 801ae24:	2031      	movs	r0, #49	; 0x31
 801ae26:	f000 f93b 	bl	801b0a0 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801ae2a:	21f0      	movs	r1, #240	; 0xf0
 801ae2c:	2040      	movs	r0, #64	; 0x40
 801ae2e:	f000 f937 	bl	801b0a0 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801ae32:	21a0      	movs	r1, #160	; 0xa0
 801ae34:	2041      	movs	r0, #65	; 0x41
 801ae36:	f000 f933 	bl	801b0a0 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ae3a:	68fa      	ldr	r2, [r7, #12]
 801ae3c:	4b09      	ldr	r3, [pc, #36]	; (801ae64 <SX1276SetTxContinuousWave+0xbc>)
 801ae3e:	0011      	movs	r1, r2
 801ae40:	0018      	movs	r0, r3
 801ae42:	f002 f819 	bl	801ce78 <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801ae46:	4b08      	ldr	r3, [pc, #32]	; (801ae68 <SX1276SetTxContinuousWave+0xc0>)
 801ae48:	2202      	movs	r2, #2
 801ae4a:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801ae4c:	4b05      	ldr	r3, [pc, #20]	; (801ae64 <SX1276SetTxContinuousWave+0xbc>)
 801ae4e:	0018      	movs	r0, r3
 801ae50:	f001 ff22 	bl	801cc98 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801ae54:	2003      	movs	r0, #3
 801ae56:	f000 f85c 	bl	801af12 <SX1276SetOpMode>
}
 801ae5a:	46c0      	nop			; (mov r8, r8)
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	b004      	add	sp, #16
 801ae60:	bd80      	pop	{r7, pc}
 801ae62:	46c0      	nop			; (mov r8, r8)
 801ae64:	20001720 	.word	0x20001720
 801ae68:	20001750 	.word	0x20001750

0801ae6c <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b084      	sub	sp, #16
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	0002      	movs	r2, r0
 801ae74:	1dfb      	adds	r3, r7, #7
 801ae76:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801ae78:	230e      	movs	r3, #14
 801ae7a:	18fb      	adds	r3, r7, r3
 801ae7c:	2200      	movs	r2, #0
 801ae7e:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801ae80:	1dfb      	adds	r3, r7, #7
 801ae82:	781b      	ldrb	r3, [r3, #0]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d002      	beq.n	801ae8e <SX1276ReadRssi+0x22>
 801ae88:	2b01      	cmp	r3, #1
 801ae8a:	d00d      	beq.n	801aea8 <SX1276ReadRssi+0x3c>
 801ae8c:	e027      	b.n	801aede <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801ae8e:	2011      	movs	r0, #17
 801ae90:	f000 f917 	bl	801b0c2 <SX1276Read>
 801ae94:	0003      	movs	r3, r0
 801ae96:	085b      	lsrs	r3, r3, #1
 801ae98:	b2db      	uxtb	r3, r3
 801ae9a:	b29b      	uxth	r3, r3
 801ae9c:	425b      	negs	r3, r3
 801ae9e:	b29a      	uxth	r2, r3
 801aea0:	230e      	movs	r3, #14
 801aea2:	18fb      	adds	r3, r7, r3
 801aea4:	801a      	strh	r2, [r3, #0]
        break;
 801aea6:	e020      	b.n	801aeea <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801aea8:	4b14      	ldr	r3, [pc, #80]	; (801aefc <SX1276ReadRssi+0x90>)
 801aeaa:	689b      	ldr	r3, [r3, #8]
 801aeac:	4a14      	ldr	r2, [pc, #80]	; (801af00 <SX1276ReadRssi+0x94>)
 801aeae:	4293      	cmp	r3, r2
 801aeb0:	d90a      	bls.n	801aec8 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801aeb2:	201b      	movs	r0, #27
 801aeb4:	f000 f905 	bl	801b0c2 <SX1276Read>
 801aeb8:	0003      	movs	r3, r0
 801aeba:	b29b      	uxth	r3, r3
 801aebc:	3b9d      	subs	r3, #157	; 0x9d
 801aebe:	b29a      	uxth	r2, r3
 801aec0:	230e      	movs	r3, #14
 801aec2:	18fb      	adds	r3, r7, r3
 801aec4:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801aec6:	e010      	b.n	801aeea <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801aec8:	201b      	movs	r0, #27
 801aeca:	f000 f8fa 	bl	801b0c2 <SX1276Read>
 801aece:	0003      	movs	r3, r0
 801aed0:	b29b      	uxth	r3, r3
 801aed2:	3ba4      	subs	r3, #164	; 0xa4
 801aed4:	b29a      	uxth	r2, r3
 801aed6:	230e      	movs	r3, #14
 801aed8:	18fb      	adds	r3, r7, r3
 801aeda:	801a      	strh	r2, [r3, #0]
        break;
 801aedc:	e005      	b.n	801aeea <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801aede:	230e      	movs	r3, #14
 801aee0:	18fb      	adds	r3, r7, r3
 801aee2:	2201      	movs	r2, #1
 801aee4:	4252      	negs	r2, r2
 801aee6:	801a      	strh	r2, [r3, #0]
        break;
 801aee8:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801aeea:	230e      	movs	r3, #14
 801aeec:	18fb      	adds	r3, r7, r3
 801aeee:	2200      	movs	r2, #0
 801aef0:	5e9b      	ldrsh	r3, [r3, r2]
}
 801aef2:	0018      	movs	r0, r3
 801aef4:	46bd      	mov	sp, r7
 801aef6:	b004      	add	sp, #16
 801aef8:	bd80      	pop	{r7, pc}
 801aefa:	46c0      	nop			; (mov r8, r8)
 801aefc:	20001750 	.word	0x20001750
 801af00:	1f4add40 	.word	0x1f4add40

0801af04 <SX1276Reset>:

static void SX1276Reset( void )
{
 801af04:	b580      	push	{r7, lr}
 801af06:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801af08:	f7eb f9f4 	bl	80062f4 <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801af0c:	46c0      	nop			; (mov r8, r8)
 801af0e:	46bd      	mov	sp, r7
 801af10:	bd80      	pop	{r7, pc}

0801af12 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801af12:	b5b0      	push	{r4, r5, r7, lr}
 801af14:	b084      	sub	sp, #16
 801af16:	af00      	add	r7, sp, #0
 801af18:	0002      	movs	r2, r0
 801af1a:	1dfb      	adds	r3, r7, #7
 801af1c:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801af1e:	1dfb      	adds	r3, r7, #7
 801af20:	781b      	ldrb	r3, [r3, #0]
 801af22:	2b00      	cmp	r3, #0
 801af24:	d118      	bne.n	801af58 <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801af26:	2001      	movs	r0, #1
 801af28:	f000 f8cb 	bl	801b0c2 <SX1276Read>
 801af2c:	0003      	movs	r3, r0
 801af2e:	b25b      	sxtb	r3, r3
 801af30:	2207      	movs	r2, #7
 801af32:	4393      	bics	r3, r2
 801af34:	b25a      	sxtb	r2, r3
 801af36:	1dfb      	adds	r3, r7, #7
 801af38:	781b      	ldrb	r3, [r3, #0]
 801af3a:	b25b      	sxtb	r3, r3
 801af3c:	4313      	orrs	r3, r2
 801af3e:	b25b      	sxtb	r3, r3
 801af40:	b2db      	uxtb	r3, r3
 801af42:	0019      	movs	r1, r3
 801af44:	2001      	movs	r0, #1
 801af46:	f000 f8ab 	bl	801b0a0 <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801af4a:	2000      	movs	r0, #0
 801af4c:	f7eb f972 	bl	8006234 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801af50:	2000      	movs	r0, #0
 801af52:	f7ea ffb1 	bl	8005eb8 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801af56:	e044      	b.n	801afe2 <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801af58:	1dfb      	adds	r3, r7, #7
 801af5a:	781b      	ldrb	r3, [r3, #0]
 801af5c:	2b05      	cmp	r3, #5
 801af5e:	d118      	bne.n	801af92 <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801af60:	2001      	movs	r0, #1
 801af62:	f7ea ffa9 	bl	8005eb8 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801af66:	2001      	movs	r0, #1
 801af68:	f7eb f964 	bl	8006234 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801af6c:	2001      	movs	r0, #1
 801af6e:	f000 f8a8 	bl	801b0c2 <SX1276Read>
 801af72:	0003      	movs	r3, r0
 801af74:	b25b      	sxtb	r3, r3
 801af76:	2207      	movs	r2, #7
 801af78:	4393      	bics	r3, r2
 801af7a:	b25a      	sxtb	r2, r3
 801af7c:	1dfb      	adds	r3, r7, #7
 801af7e:	781b      	ldrb	r3, [r3, #0]
 801af80:	b25b      	sxtb	r3, r3
 801af82:	4313      	orrs	r3, r2
 801af84:	b25b      	sxtb	r3, r3
 801af86:	b2db      	uxtb	r3, r3
 801af88:	0019      	movs	r1, r3
 801af8a:	2001      	movs	r0, #1
 801af8c:	f000 f888 	bl	801b0a0 <SX1276Write>
}
 801af90:	e027      	b.n	801afe2 <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801af92:	250f      	movs	r5, #15
 801af94:	197c      	adds	r4, r7, r5
 801af96:	2009      	movs	r0, #9
 801af98:	f000 f893 	bl	801b0c2 <SX1276Read>
 801af9c:	0003      	movs	r3, r0
 801af9e:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801afa0:	2001      	movs	r0, #1
 801afa2:	f7ea ff89 	bl	8005eb8 <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801afa6:	197b      	adds	r3, r7, r5
 801afa8:	781b      	ldrb	r3, [r3, #0]
 801afaa:	b25b      	sxtb	r3, r3
 801afac:	2b00      	cmp	r3, #0
 801afae:	da03      	bge.n	801afb8 <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801afb0:	2003      	movs	r0, #3
 801afb2:	f7eb f93f 	bl	8006234 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801afb6:	e002      	b.n	801afbe <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801afb8:	2002      	movs	r0, #2
 801afba:	f7eb f93b 	bl	8006234 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801afbe:	2001      	movs	r0, #1
 801afc0:	f000 f87f 	bl	801b0c2 <SX1276Read>
 801afc4:	0003      	movs	r3, r0
 801afc6:	b25b      	sxtb	r3, r3
 801afc8:	2207      	movs	r2, #7
 801afca:	4393      	bics	r3, r2
 801afcc:	b25a      	sxtb	r2, r3
 801afce:	1dfb      	adds	r3, r7, #7
 801afd0:	781b      	ldrb	r3, [r3, #0]
 801afd2:	b25b      	sxtb	r3, r3
 801afd4:	4313      	orrs	r3, r2
 801afd6:	b25b      	sxtb	r3, r3
 801afd8:	b2db      	uxtb	r3, r3
 801afda:	0019      	movs	r1, r3
 801afdc:	2001      	movs	r0, #1
 801afde:	f000 f85f 	bl	801b0a0 <SX1276Write>
}
 801afe2:	46c0      	nop			; (mov r8, r8)
 801afe4:	46bd      	mov	sp, r7
 801afe6:	b004      	add	sp, #16
 801afe8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801afec <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801afec:	b580      	push	{r7, lr}
 801afee:	b082      	sub	sp, #8
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	0002      	movs	r2, r0
 801aff4:	1dfb      	adds	r3, r7, #7
 801aff6:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801aff8:	2001      	movs	r0, #1
 801affa:	f000 f862 	bl	801b0c2 <SX1276Read>
 801affe:	0003      	movs	r3, r0
 801b000:	b25b      	sxtb	r3, r3
 801b002:	2b00      	cmp	r3, #0
 801b004:	da03      	bge.n	801b00e <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801b006:	4b25      	ldr	r3, [pc, #148]	; (801b09c <SX1276SetModem+0xb0>)
 801b008:	2201      	movs	r2, #1
 801b00a:	715a      	strb	r2, [r3, #5]
 801b00c:	e002      	b.n	801b014 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801b00e:	4b23      	ldr	r3, [pc, #140]	; (801b09c <SX1276SetModem+0xb0>)
 801b010:	2200      	movs	r2, #0
 801b012:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801b014:	4b21      	ldr	r3, [pc, #132]	; (801b09c <SX1276SetModem+0xb0>)
 801b016:	795b      	ldrb	r3, [r3, #5]
 801b018:	1dfa      	adds	r2, r7, #7
 801b01a:	7812      	ldrb	r2, [r2, #0]
 801b01c:	429a      	cmp	r2, r3
 801b01e:	d038      	beq.n	801b092 <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801b020:	4b1e      	ldr	r3, [pc, #120]	; (801b09c <SX1276SetModem+0xb0>)
 801b022:	1dfa      	adds	r2, r7, #7
 801b024:	7812      	ldrb	r2, [r2, #0]
 801b026:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801b028:	4b1c      	ldr	r3, [pc, #112]	; (801b09c <SX1276SetModem+0xb0>)
 801b02a:	795b      	ldrb	r3, [r3, #5]
 801b02c:	2b01      	cmp	r3, #1
 801b02e:	d017      	beq.n	801b060 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b030:	2000      	movs	r0, #0
 801b032:	f7ff ff6e 	bl	801af12 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801b036:	2001      	movs	r0, #1
 801b038:	f000 f843 	bl	801b0c2 <SX1276Read>
 801b03c:	0003      	movs	r3, r0
 801b03e:	001a      	movs	r2, r3
 801b040:	237f      	movs	r3, #127	; 0x7f
 801b042:	4013      	ands	r3, r2
 801b044:	b2db      	uxtb	r3, r3
 801b046:	0019      	movs	r1, r3
 801b048:	2001      	movs	r0, #1
 801b04a:	f000 f829 	bl	801b0a0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801b04e:	2100      	movs	r1, #0
 801b050:	2040      	movs	r0, #64	; 0x40
 801b052:	f000 f825 	bl	801b0a0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801b056:	2130      	movs	r1, #48	; 0x30
 801b058:	2041      	movs	r0, #65	; 0x41
 801b05a:	f000 f821 	bl	801b0a0 <SX1276Write>
        break;
 801b05e:	e019      	b.n	801b094 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b060:	2000      	movs	r0, #0
 801b062:	f7ff ff56 	bl	801af12 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801b066:	2001      	movs	r0, #1
 801b068:	f000 f82b 	bl	801b0c2 <SX1276Read>
 801b06c:	0003      	movs	r3, r0
 801b06e:	001a      	movs	r2, r3
 801b070:	2380      	movs	r3, #128	; 0x80
 801b072:	425b      	negs	r3, r3
 801b074:	4313      	orrs	r3, r2
 801b076:	b2db      	uxtb	r3, r3
 801b078:	0019      	movs	r1, r3
 801b07a:	2001      	movs	r0, #1
 801b07c:	f000 f810 	bl	801b0a0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801b080:	2100      	movs	r1, #0
 801b082:	2040      	movs	r0, #64	; 0x40
 801b084:	f000 f80c 	bl	801b0a0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801b088:	2100      	movs	r1, #0
 801b08a:	2041      	movs	r0, #65	; 0x41
 801b08c:	f000 f808 	bl	801b0a0 <SX1276Write>
        break;
 801b090:	e000      	b.n	801b094 <SX1276SetModem+0xa8>
        return;
 801b092:	46c0      	nop			; (mov r8, r8)
    }
}
 801b094:	46bd      	mov	sp, r7
 801b096:	b002      	add	sp, #8
 801b098:	bd80      	pop	{r7, pc}
 801b09a:	46c0      	nop			; (mov r8, r8)
 801b09c:	20001750 	.word	0x20001750

0801b0a0 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b082      	sub	sp, #8
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	6078      	str	r0, [r7, #4]
 801b0a8:	000a      	movs	r2, r1
 801b0aa:	1cfb      	adds	r3, r7, #3
 801b0ac:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801b0ae:	1cf9      	adds	r1, r7, #3
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	2201      	movs	r2, #1
 801b0b4:	0018      	movs	r0, r3
 801b0b6:	f000 f815 	bl	801b0e4 <SX1276WriteBuffer>
}
 801b0ba:	46c0      	nop			; (mov r8, r8)
 801b0bc:	46bd      	mov	sp, r7
 801b0be:	b002      	add	sp, #8
 801b0c0:	bd80      	pop	{r7, pc}

0801b0c2 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801b0c2:	b590      	push	{r4, r7, lr}
 801b0c4:	b085      	sub	sp, #20
 801b0c6:	af00      	add	r7, sp, #0
 801b0c8:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801b0ca:	240f      	movs	r4, #15
 801b0cc:	1939      	adds	r1, r7, r4
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	2201      	movs	r2, #1
 801b0d2:	0018      	movs	r0, r3
 801b0d4:	f000 f83a 	bl	801b14c <SX1276ReadBuffer>
    return data;
 801b0d8:	193b      	adds	r3, r7, r4
 801b0da:	781b      	ldrb	r3, [r3, #0]
}
 801b0dc:	0018      	movs	r0, r3
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	b005      	add	sp, #20
 801b0e2:	bd90      	pop	{r4, r7, pc}

0801b0e4 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801b0e4:	b590      	push	{r4, r7, lr}
 801b0e6:	b087      	sub	sp, #28
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	60f8      	str	r0, [r7, #12]
 801b0ec:	60b9      	str	r1, [r7, #8]
 801b0ee:	1dfb      	adds	r3, r7, #7
 801b0f0:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801b0f2:	2000      	movs	r0, #0
 801b0f4:	f7eb f950 	bl	8006398 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	b29b      	uxth	r3, r3
 801b0fc:	2280      	movs	r2, #128	; 0x80
 801b0fe:	4313      	orrs	r3, r2
 801b100:	b29b      	uxth	r3, r3
 801b102:	0018      	movs	r0, r3
 801b104:	f7eb f935 	bl	8006372 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801b108:	2317      	movs	r3, #23
 801b10a:	18fb      	adds	r3, r7, r3
 801b10c:	2200      	movs	r2, #0
 801b10e:	701a      	strb	r2, [r3, #0]
 801b110:	e00e      	b.n	801b130 <SX1276WriteBuffer+0x4c>
    {
        Sx_Board_SendRecv( buffer[i] );
 801b112:	2417      	movs	r4, #23
 801b114:	193b      	adds	r3, r7, r4
 801b116:	781b      	ldrb	r3, [r3, #0]
 801b118:	68ba      	ldr	r2, [r7, #8]
 801b11a:	18d3      	adds	r3, r2, r3
 801b11c:	781b      	ldrb	r3, [r3, #0]
 801b11e:	b29b      	uxth	r3, r3
 801b120:	0018      	movs	r0, r3
 801b122:	f7eb f926 	bl	8006372 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801b126:	193b      	adds	r3, r7, r4
 801b128:	781a      	ldrb	r2, [r3, #0]
 801b12a:	193b      	adds	r3, r7, r4
 801b12c:	3201      	adds	r2, #1
 801b12e:	701a      	strb	r2, [r3, #0]
 801b130:	2317      	movs	r3, #23
 801b132:	18fa      	adds	r2, r7, r3
 801b134:	1dfb      	adds	r3, r7, #7
 801b136:	7812      	ldrb	r2, [r2, #0]
 801b138:	781b      	ldrb	r3, [r3, #0]
 801b13a:	429a      	cmp	r2, r3
 801b13c:	d3e9      	bcc.n	801b112 <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801b13e:	2001      	movs	r0, #1
 801b140:	f7eb f92a 	bl	8006398 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801b144:	46c0      	nop			; (mov r8, r8)
 801b146:	46bd      	mov	sp, r7
 801b148:	b007      	add	sp, #28
 801b14a:	bd90      	pop	{r4, r7, pc}

0801b14c <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801b14c:	b580      	push	{r7, lr}
 801b14e:	b086      	sub	sp, #24
 801b150:	af00      	add	r7, sp, #0
 801b152:	60f8      	str	r0, [r7, #12]
 801b154:	60b9      	str	r1, [r7, #8]
 801b156:	1dfb      	adds	r3, r7, #7
 801b158:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801b15a:	2000      	movs	r0, #0
 801b15c:	f7eb f91c 	bl	8006398 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	b29b      	uxth	r3, r3
 801b164:	227f      	movs	r2, #127	; 0x7f
 801b166:	4013      	ands	r3, r2
 801b168:	b29b      	uxth	r3, r3
 801b16a:	0018      	movs	r0, r3
 801b16c:	f7eb f901 	bl	8006372 <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801b170:	2317      	movs	r3, #23
 801b172:	18fb      	adds	r3, r7, r3
 801b174:	2200      	movs	r2, #0
 801b176:	701a      	strb	r2, [r3, #0]
 801b178:	e010      	b.n	801b19c <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801b17a:	2000      	movs	r0, #0
 801b17c:	f7eb f8f9 	bl	8006372 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801b180:	0003      	movs	r3, r0
 801b182:	0019      	movs	r1, r3
 801b184:	2017      	movs	r0, #23
 801b186:	183b      	adds	r3, r7, r0
 801b188:	781b      	ldrb	r3, [r3, #0]
 801b18a:	68ba      	ldr	r2, [r7, #8]
 801b18c:	18d3      	adds	r3, r2, r3
 801b18e:	b2ca      	uxtb	r2, r1
 801b190:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b192:	183b      	adds	r3, r7, r0
 801b194:	781a      	ldrb	r2, [r3, #0]
 801b196:	183b      	adds	r3, r7, r0
 801b198:	3201      	adds	r2, #1
 801b19a:	701a      	strb	r2, [r3, #0]
 801b19c:	2317      	movs	r3, #23
 801b19e:	18fa      	adds	r2, r7, r3
 801b1a0:	1dfb      	adds	r3, r7, #7
 801b1a2:	7812      	ldrb	r2, [r2, #0]
 801b1a4:	781b      	ldrb	r3, [r3, #0]
 801b1a6:	429a      	cmp	r2, r3
 801b1a8:	d3e7      	bcc.n	801b17a <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801b1aa:	2001      	movs	r0, #1
 801b1ac:	f7eb f8f4 	bl	8006398 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801b1b0:	46c0      	nop			; (mov r8, r8)
 801b1b2:	46bd      	mov	sp, r7
 801b1b4:	b006      	add	sp, #24
 801b1b6:	bd80      	pop	{r7, pc}

0801b1b8 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b082      	sub	sp, #8
 801b1bc:	af00      	add	r7, sp, #0
 801b1be:	6078      	str	r0, [r7, #4]
 801b1c0:	000a      	movs	r2, r1
 801b1c2:	1cfb      	adds	r3, r7, #3
 801b1c4:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801b1c6:	1cfb      	adds	r3, r7, #3
 801b1c8:	781a      	ldrb	r2, [r3, #0]
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	0019      	movs	r1, r3
 801b1ce:	2000      	movs	r0, #0
 801b1d0:	f7ff ff88 	bl	801b0e4 <SX1276WriteBuffer>
}
 801b1d4:	46c0      	nop			; (mov r8, r8)
 801b1d6:	46bd      	mov	sp, r7
 801b1d8:	b002      	add	sp, #8
 801b1da:	bd80      	pop	{r7, pc}

0801b1dc <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	b082      	sub	sp, #8
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	6078      	str	r0, [r7, #4]
 801b1e4:	000a      	movs	r2, r1
 801b1e6:	1cfb      	adds	r3, r7, #3
 801b1e8:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801b1ea:	1cfb      	adds	r3, r7, #3
 801b1ec:	781a      	ldrb	r2, [r3, #0]
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	0019      	movs	r1, r3
 801b1f2:	2000      	movs	r0, #0
 801b1f4:	f7ff ffaa 	bl	801b14c <SX1276ReadBuffer>
}
 801b1f8:	46c0      	nop			; (mov r8, r8)
 801b1fa:	46bd      	mov	sp, r7
 801b1fc:	b002      	add	sp, #8
 801b1fe:	bd80      	pop	{r7, pc}

0801b200 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801b200:	b580      	push	{r7, lr}
 801b202:	b082      	sub	sp, #8
 801b204:	af00      	add	r7, sp, #0
 801b206:	0002      	movs	r2, r0
 801b208:	1dfb      	adds	r3, r7, #7
 801b20a:	701a      	strb	r2, [r3, #0]
 801b20c:	1dbb      	adds	r3, r7, #6
 801b20e:	1c0a      	adds	r2, r1, #0
 801b210:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801b212:	1dfb      	adds	r3, r7, #7
 801b214:	781b      	ldrb	r3, [r3, #0]
 801b216:	0018      	movs	r0, r3
 801b218:	f7ff fee8 	bl	801afec <SX1276SetModem>

    switch( modem )
 801b21c:	1dfb      	adds	r3, r7, #7
 801b21e:	781b      	ldrb	r3, [r3, #0]
 801b220:	2b00      	cmp	r3, #0
 801b222:	d002      	beq.n	801b22a <SX1276SetMaxPayloadLength+0x2a>
 801b224:	2b01      	cmp	r3, #1
 801b226:	d00f      	beq.n	801b248 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801b228:	e016      	b.n	801b258 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801b22a:	4b0d      	ldr	r3, [pc, #52]	; (801b260 <SX1276SetMaxPayloadLength+0x60>)
 801b22c:	2222      	movs	r2, #34	; 0x22
 801b22e:	5c9b      	ldrb	r3, [r3, r2]
 801b230:	2201      	movs	r2, #1
 801b232:	4053      	eors	r3, r2
 801b234:	b2db      	uxtb	r3, r3
 801b236:	2b00      	cmp	r3, #0
 801b238:	d00d      	beq.n	801b256 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801b23a:	1dbb      	adds	r3, r7, #6
 801b23c:	781b      	ldrb	r3, [r3, #0]
 801b23e:	0019      	movs	r1, r3
 801b240:	2032      	movs	r0, #50	; 0x32
 801b242:	f7ff ff2d 	bl	801b0a0 <SX1276Write>
        break;
 801b246:	e006      	b.n	801b256 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801b248:	1dbb      	adds	r3, r7, #6
 801b24a:	781b      	ldrb	r3, [r3, #0]
 801b24c:	0019      	movs	r1, r3
 801b24e:	2023      	movs	r0, #35	; 0x23
 801b250:	f7ff ff26 	bl	801b0a0 <SX1276Write>
        break;
 801b254:	e000      	b.n	801b258 <SX1276SetMaxPayloadLength+0x58>
        break;
 801b256:	46c0      	nop			; (mov r8, r8)
}
 801b258:	46c0      	nop			; (mov r8, r8)
 801b25a:	46bd      	mov	sp, r7
 801b25c:	b002      	add	sp, #8
 801b25e:	bd80      	pop	{r7, pc}
 801b260:	20001750 	.word	0x20001750

0801b264 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b082      	sub	sp, #8
 801b268:	af00      	add	r7, sp, #0
 801b26a:	0002      	movs	r2, r0
 801b26c:	1dfb      	adds	r3, r7, #7
 801b26e:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801b270:	2001      	movs	r0, #1
 801b272:	f7ff febb 	bl	801afec <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801b276:	4b0b      	ldr	r3, [pc, #44]	; (801b2a4 <SX1276SetPublicNetwork+0x40>)
 801b278:	1dfa      	adds	r2, r7, #7
 801b27a:	215c      	movs	r1, #92	; 0x5c
 801b27c:	7812      	ldrb	r2, [r2, #0]
 801b27e:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801b280:	1dfb      	adds	r3, r7, #7
 801b282:	781b      	ldrb	r3, [r3, #0]
 801b284:	2b00      	cmp	r3, #0
 801b286:	d004      	beq.n	801b292 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801b288:	2134      	movs	r1, #52	; 0x34
 801b28a:	2039      	movs	r0, #57	; 0x39
 801b28c:	f7ff ff08 	bl	801b0a0 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801b290:	e003      	b.n	801b29a <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801b292:	2112      	movs	r1, #18
 801b294:	2039      	movs	r0, #57	; 0x39
 801b296:	f7ff ff03 	bl	801b0a0 <SX1276Write>
}
 801b29a:	46c0      	nop			; (mov r8, r8)
 801b29c:	46bd      	mov	sp, r7
 801b29e:	b002      	add	sp, #8
 801b2a0:	bd80      	pop	{r7, pc}
 801b2a2:	46c0      	nop			; (mov r8, r8)
 801b2a4:	20001750 	.word	0x20001750

0801b2a8 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801b2a8:	b580      	push	{r7, lr}
 801b2aa:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801b2ac:	f7ea fdfe 	bl	8005eac <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801b2b0:	0003      	movs	r3, r0
 801b2b2:	3302      	adds	r3, #2
}
 801b2b4:	0018      	movs	r0, r3
 801b2b6:	46bd      	mov	sp, r7
 801b2b8:	bd80      	pop	{r7, pc}
	...

0801b2bc <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	b084      	sub	sp, #16
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801b2c4:	230f      	movs	r3, #15
 801b2c6:	18fb      	adds	r3, r7, r3
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	701a      	strb	r2, [r3, #0]
 801b2cc:	e01f      	b.n	801b30e <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801b2ce:	210f      	movs	r1, #15
 801b2d0:	187b      	adds	r3, r7, r1
 801b2d2:	781a      	ldrb	r2, [r3, #0]
 801b2d4:	4b13      	ldr	r3, [pc, #76]	; (801b324 <GetFskBandwidthRegValue+0x68>)
 801b2d6:	00d2      	lsls	r2, r2, #3
 801b2d8:	58d3      	ldr	r3, [r2, r3]
 801b2da:	687a      	ldr	r2, [r7, #4]
 801b2dc:	429a      	cmp	r2, r3
 801b2de:	d310      	bcc.n	801b302 <GetFskBandwidthRegValue+0x46>
 801b2e0:	187b      	adds	r3, r7, r1
 801b2e2:	781b      	ldrb	r3, [r3, #0]
 801b2e4:	1c5a      	adds	r2, r3, #1
 801b2e6:	4b0f      	ldr	r3, [pc, #60]	; (801b324 <GetFskBandwidthRegValue+0x68>)
 801b2e8:	00d2      	lsls	r2, r2, #3
 801b2ea:	58d3      	ldr	r3, [r2, r3]
 801b2ec:	687a      	ldr	r2, [r7, #4]
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	d207      	bcs.n	801b302 <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801b2f2:	187b      	adds	r3, r7, r1
 801b2f4:	781b      	ldrb	r3, [r3, #0]
 801b2f6:	4a0b      	ldr	r2, [pc, #44]	; (801b324 <GetFskBandwidthRegValue+0x68>)
 801b2f8:	00db      	lsls	r3, r3, #3
 801b2fa:	18d3      	adds	r3, r2, r3
 801b2fc:	3304      	adds	r3, #4
 801b2fe:	781b      	ldrb	r3, [r3, #0]
 801b300:	e00b      	b.n	801b31a <GetFskBandwidthRegValue+0x5e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801b302:	210f      	movs	r1, #15
 801b304:	187b      	adds	r3, r7, r1
 801b306:	781a      	ldrb	r2, [r3, #0]
 801b308:	187b      	adds	r3, r7, r1
 801b30a:	3201      	adds	r2, #1
 801b30c:	701a      	strb	r2, [r3, #0]
 801b30e:	230f      	movs	r3, #15
 801b310:	18fb      	adds	r3, r7, r3
 801b312:	781b      	ldrb	r3, [r3, #0]
 801b314:	2b14      	cmp	r3, #20
 801b316:	d9da      	bls.n	801b2ce <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801b318:	e7fe      	b.n	801b318 <GetFskBandwidthRegValue+0x5c>
}
 801b31a:	0018      	movs	r0, r3
 801b31c:	46bd      	mov	sp, r7
 801b31e:	b004      	add	sp, #16
 801b320:	bd80      	pop	{r7, pc}
 801b322:	46c0      	nop			; (mov r8, r8)
 801b324:	0801fe18 	.word	0x0801fe18

0801b328 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b084      	sub	sp, #16
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801b330:	2300      	movs	r3, #0
 801b332:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	2b03      	cmp	r3, #3
 801b338:	d018      	beq.n	801b36c <SX1276GetLoRaBandwidthInHz+0x44>
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	2b03      	cmp	r3, #3
 801b33e:	d818      	bhi.n	801b372 <SX1276GetLoRaBandwidthInHz+0x4a>
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	2b02      	cmp	r3, #2
 801b344:	d00f      	beq.n	801b366 <SX1276GetLoRaBandwidthInHz+0x3e>
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	2b02      	cmp	r3, #2
 801b34a:	d812      	bhi.n	801b372 <SX1276GetLoRaBandwidthInHz+0x4a>
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d003      	beq.n	801b35a <SX1276GetLoRaBandwidthInHz+0x32>
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	2b01      	cmp	r3, #1
 801b356:	d003      	beq.n	801b360 <SX1276GetLoRaBandwidthInHz+0x38>
 801b358:	e00b      	b.n	801b372 <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801b35a:	4b08      	ldr	r3, [pc, #32]	; (801b37c <SX1276GetLoRaBandwidthInHz+0x54>)
 801b35c:	60fb      	str	r3, [r7, #12]
        break;
 801b35e:	e008      	b.n	801b372 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801b360:	4b07      	ldr	r3, [pc, #28]	; (801b380 <SX1276GetLoRaBandwidthInHz+0x58>)
 801b362:	60fb      	str	r3, [r7, #12]
        break;
 801b364:	e005      	b.n	801b372 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801b366:	4b07      	ldr	r3, [pc, #28]	; (801b384 <SX1276GetLoRaBandwidthInHz+0x5c>)
 801b368:	60fb      	str	r3, [r7, #12]
        break;
 801b36a:	e002      	b.n	801b372 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801b36c:	4b06      	ldr	r3, [pc, #24]	; (801b388 <SX1276GetLoRaBandwidthInHz+0x60>)
 801b36e:	60fb      	str	r3, [r7, #12]
            break;
 801b370:	46c0      	nop			; (mov r8, r8)
    }

    return bandwidthInHz;
 801b372:	68fb      	ldr	r3, [r7, #12]
}
 801b374:	0018      	movs	r0, r3
 801b376:	46bd      	mov	sp, r7
 801b378:	b004      	add	sp, #16
 801b37a:	bd80      	pop	{r7, pc}
 801b37c:	0001e848 	.word	0x0001e848
 801b380:	0003d090 	.word	0x0003d090
 801b384:	0007a120 	.word	0x0007a120
 801b388:	0000f424 	.word	0x0000f424

0801b38c <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801b38c:	b5b0      	push	{r4, r5, r7, lr}
 801b38e:	b084      	sub	sp, #16
 801b390:	af00      	add	r7, sp, #0
 801b392:	0005      	movs	r5, r0
 801b394:	000c      	movs	r4, r1
 801b396:	0010      	movs	r0, r2
 801b398:	0019      	movs	r1, r3
 801b39a:	1dbb      	adds	r3, r7, #6
 801b39c:	1c2a      	adds	r2, r5, #0
 801b39e:	801a      	strh	r2, [r3, #0]
 801b3a0:	1d7b      	adds	r3, r7, #5
 801b3a2:	1c22      	adds	r2, r4, #0
 801b3a4:	701a      	strb	r2, [r3, #0]
 801b3a6:	1d3b      	adds	r3, r7, #4
 801b3a8:	1c02      	adds	r2, r0, #0
 801b3aa:	701a      	strb	r2, [r3, #0]
 801b3ac:	1cfb      	adds	r3, r7, #3
 801b3ae:	1c0a      	adds	r2, r1, #0
 801b3b0:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801b3b2:	230f      	movs	r3, #15
 801b3b4:	18fb      	adds	r3, r7, r3
 801b3b6:	2203      	movs	r2, #3
 801b3b8:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801b3ba:	1dbb      	adds	r3, r7, #6
 801b3bc:	881b      	ldrh	r3, [r3, #0]
 801b3be:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b3c0:	1d7b      	adds	r3, r7, #5
 801b3c2:	781b      	ldrb	r3, [r3, #0]
 801b3c4:	2101      	movs	r1, #1
 801b3c6:	404b      	eors	r3, r1
 801b3c8:	b2db      	uxtb	r3, r3
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d001      	beq.n	801b3d2 <SX1276GetGfskTimeOnAirNumerator+0x46>
 801b3ce:	2308      	movs	r3, #8
 801b3d0:	e000      	b.n	801b3d4 <SX1276GetGfskTimeOnAirNumerator+0x48>
 801b3d2:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801b3d4:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801b3d6:	230f      	movs	r3, #15
 801b3d8:	18fb      	adds	r3, r7, r3
 801b3da:	781b      	ldrb	r3, [r3, #0]
 801b3dc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b3de:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801b3e0:	1d3b      	adds	r3, r7, #4
 801b3e2:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801b3e4:	1cfb      	adds	r3, r7, #3
 801b3e6:	781b      	ldrb	r3, [r3, #0]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d001      	beq.n	801b3f0 <SX1276GetGfskTimeOnAirNumerator+0x64>
 801b3ec:	2302      	movs	r3, #2
 801b3ee:	e000      	b.n	801b3f2 <SX1276GetGfskTimeOnAirNumerator+0x66>
 801b3f0:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801b3f2:	185b      	adds	r3, r3, r1
               ) << 3 
 801b3f4:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801b3f6:	18d3      	adds	r3, r2, r3
             );
}
 801b3f8:	0018      	movs	r0, r3
 801b3fa:	46bd      	mov	sp, r7
 801b3fc:	b004      	add	sp, #16
 801b3fe:	bdb0      	pop	{r4, r5, r7, pc}

0801b400 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801b400:	b580      	push	{r7, lr}
 801b402:	b08a      	sub	sp, #40	; 0x28
 801b404:	af00      	add	r7, sp, #0
 801b406:	60f8      	str	r0, [r7, #12]
 801b408:	60b9      	str	r1, [r7, #8]
 801b40a:	0019      	movs	r1, r3
 801b40c:	1dfb      	adds	r3, r7, #7
 801b40e:	701a      	strb	r2, [r3, #0]
 801b410:	1d3b      	adds	r3, r7, #4
 801b412:	1c0a      	adds	r2, r1, #0
 801b414:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801b416:	1dfb      	adds	r3, r7, #7
 801b418:	781b      	ldrb	r3, [r3, #0]
 801b41a:	3304      	adds	r3, #4
 801b41c:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801b41e:	2327      	movs	r3, #39	; 0x27
 801b420:	18fb      	adds	r3, r7, r3
 801b422:	2200      	movs	r2, #0
 801b424:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801b426:	68bb      	ldr	r3, [r7, #8]
 801b428:	2b05      	cmp	r3, #5
 801b42a:	d002      	beq.n	801b432 <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801b42c:	68bb      	ldr	r3, [r7, #8]
 801b42e:	2b06      	cmp	r3, #6
 801b430:	d106      	bne.n	801b440 <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801b432:	1d3b      	adds	r3, r7, #4
 801b434:	881b      	ldrh	r3, [r3, #0]
 801b436:	2b0b      	cmp	r3, #11
 801b438:	d802      	bhi.n	801b440 <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801b43a:	1d3b      	adds	r3, r7, #4
 801b43c:	220c      	movs	r2, #12
 801b43e:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d105      	bne.n	801b452 <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801b446:	68bb      	ldr	r3, [r7, #8]
 801b448:	2b0b      	cmp	r3, #11
 801b44a:	d008      	beq.n	801b45e <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b44c:	68bb      	ldr	r3, [r7, #8]
 801b44e:	2b0c      	cmp	r3, #12
 801b450:	d005      	beq.n	801b45e <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	2b01      	cmp	r3, #1
 801b456:	d106      	bne.n	801b466 <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801b458:	68bb      	ldr	r3, [r7, #8]
 801b45a:	2b0c      	cmp	r3, #12
 801b45c:	d103      	bne.n	801b466 <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801b45e:	2327      	movs	r3, #39	; 0x27
 801b460:	18fb      	adds	r3, r7, r3
 801b462:	2201      	movs	r2, #1
 801b464:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b466:	2334      	movs	r3, #52	; 0x34
 801b468:	18fb      	adds	r3, r7, r3
 801b46a:	781b      	ldrb	r3, [r3, #0]
 801b46c:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801b46e:	2338      	movs	r3, #56	; 0x38
 801b470:	18fb      	adds	r3, r7, r3
 801b472:	781b      	ldrb	r3, [r3, #0]
 801b474:	2b00      	cmp	r3, #0
 801b476:	d001      	beq.n	801b47c <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801b478:	2310      	movs	r3, #16
 801b47a:	e000      	b.n	801b47e <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801b47c:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b47e:	189b      	adds	r3, r3, r2
 801b480:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801b482:	68bb      	ldr	r3, [r7, #8]
 801b484:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801b486:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801b488:	2330      	movs	r3, #48	; 0x30
 801b48a:	18fb      	adds	r3, r7, r3
 801b48c:	781b      	ldrb	r3, [r3, #0]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d001      	beq.n	801b496 <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801b492:	2300      	movs	r3, #0
 801b494:	e000      	b.n	801b498 <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801b496:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801b498:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b49a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801b49c:	68bb      	ldr	r3, [r7, #8]
 801b49e:	2b06      	cmp	r3, #6
 801b4a0:	d803      	bhi.n	801b4aa <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801b4a2:	68bb      	ldr	r3, [r7, #8]
 801b4a4:	009b      	lsls	r3, r3, #2
 801b4a6:	623b      	str	r3, [r7, #32]
 801b4a8:	e00f      	b.n	801b4ca <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801b4aa:	69fb      	ldr	r3, [r7, #28]
 801b4ac:	3308      	adds	r3, #8
 801b4ae:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801b4b0:	2327      	movs	r3, #39	; 0x27
 801b4b2:	18fb      	adds	r3, r7, r3
 801b4b4:	781b      	ldrb	r3, [r3, #0]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d004      	beq.n	801b4c4 <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801b4ba:	68bb      	ldr	r3, [r7, #8]
 801b4bc:	3b02      	subs	r3, #2
 801b4be:	009b      	lsls	r3, r3, #2
 801b4c0:	623b      	str	r3, [r7, #32]
 801b4c2:	e002      	b.n	801b4ca <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801b4c4:	68bb      	ldr	r3, [r7, #8]
 801b4c6:	009b      	lsls	r3, r3, #2
 801b4c8:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801b4ca:	69fb      	ldr	r3, [r7, #28]
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	da01      	bge.n	801b4d4 <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801b4d0:	2300      	movs	r3, #0
 801b4d2:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801b4d4:	69fa      	ldr	r2, [r7, #28]
 801b4d6:	6a3b      	ldr	r3, [r7, #32]
 801b4d8:	18d3      	adds	r3, r2, r3
 801b4da:	3b01      	subs	r3, #1
 801b4dc:	6a39      	ldr	r1, [r7, #32]
 801b4de:	0018      	movs	r0, r3
 801b4e0:	f7e4 feae 	bl	8000240 <__divsi3>
 801b4e4:	0003      	movs	r3, r0
 801b4e6:	001a      	movs	r2, r3
 801b4e8:	697b      	ldr	r3, [r7, #20]
 801b4ea:	435a      	muls	r2, r3
 801b4ec:	1d3b      	adds	r3, r7, #4
 801b4ee:	881b      	ldrh	r3, [r3, #0]
 801b4f0:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801b4f2:	330c      	adds	r3, #12
 801b4f4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801b4f6:	68bb      	ldr	r3, [r7, #8]
 801b4f8:	2b06      	cmp	r3, #6
 801b4fa:	d802      	bhi.n	801b502 <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801b4fc:	69bb      	ldr	r3, [r7, #24]
 801b4fe:	3302      	adds	r3, #2
 801b500:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801b502:	69bb      	ldr	r3, [r7, #24]
 801b504:	009b      	lsls	r3, r3, #2
 801b506:	1c5a      	adds	r2, r3, #1
 801b508:	68bb      	ldr	r3, [r7, #8]
 801b50a:	3b02      	subs	r3, #2
 801b50c:	409a      	lsls	r2, r3
 801b50e:	0013      	movs	r3, r2
}
 801b510:	0018      	movs	r0, r3
 801b512:	46bd      	mov	sp, r7
 801b514:	b00a      	add	sp, #40	; 0x28
 801b516:	bd80      	pop	{r7, pc}

0801b518 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801b518:	b590      	push	{r4, r7, lr}
 801b51a:	b085      	sub	sp, #20
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801b520:	4b4f      	ldr	r3, [pc, #316]	; (801b660 <SX1276OnTimeoutIrq+0x148>)
 801b522:	791b      	ldrb	r3, [r3, #4]
 801b524:	2b01      	cmp	r3, #1
 801b526:	d002      	beq.n	801b52e <SX1276OnTimeoutIrq+0x16>
 801b528:	2b02      	cmp	r3, #2
 801b52a:	d041      	beq.n	801b5b0 <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801b52c:	e094      	b.n	801b658 <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801b52e:	4b4c      	ldr	r3, [pc, #304]	; (801b660 <SX1276OnTimeoutIrq+0x148>)
 801b530:	795b      	ldrb	r3, [r3, #5]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d12e      	bne.n	801b594 <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b536:	4b4a      	ldr	r3, [pc, #296]	; (801b660 <SX1276OnTimeoutIrq+0x148>)
 801b538:	2230      	movs	r2, #48	; 0x30
 801b53a:	2100      	movs	r1, #0
 801b53c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b53e:	4b48      	ldr	r3, [pc, #288]	; (801b660 <SX1276OnTimeoutIrq+0x148>)
 801b540:	2231      	movs	r2, #49	; 0x31
 801b542:	2100      	movs	r1, #0
 801b544:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b546:	4b46      	ldr	r3, [pc, #280]	; (801b660 <SX1276OnTimeoutIrq+0x148>)
 801b548:	2200      	movs	r2, #0
 801b54a:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801b54c:	4b44      	ldr	r3, [pc, #272]	; (801b660 <SX1276OnTimeoutIrq+0x148>)
 801b54e:	2200      	movs	r2, #0
 801b550:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b552:	210b      	movs	r1, #11
 801b554:	203e      	movs	r0, #62	; 0x3e
 801b556:	f7ff fda3 	bl	801b0a0 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b55a:	2110      	movs	r1, #16
 801b55c:	203f      	movs	r0, #63	; 0x3f
 801b55e:	f7ff fd9f 	bl	801b0a0 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801b562:	4b3f      	ldr	r3, [pc, #252]	; (801b660 <SX1276OnTimeoutIrq+0x148>)
 801b564:	2226      	movs	r2, #38	; 0x26
 801b566:	5c9b      	ldrb	r3, [r3, r2]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d00c      	beq.n	801b586 <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b56c:	200d      	movs	r0, #13
 801b56e:	f7ff fda8 	bl	801b0c2 <SX1276Read>
 801b572:	0003      	movs	r3, r0
 801b574:	001a      	movs	r2, r3
 801b576:	2340      	movs	r3, #64	; 0x40
 801b578:	4313      	orrs	r3, r2
 801b57a:	b2db      	uxtb	r3, r3
 801b57c:	0019      	movs	r1, r3
 801b57e:	200d      	movs	r0, #13
 801b580:	f7ff fd8e 	bl	801b0a0 <SX1276Write>
 801b584:	e006      	b.n	801b594 <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801b586:	4b36      	ldr	r3, [pc, #216]	; (801b660 <SX1276OnTimeoutIrq+0x148>)
 801b588:	2200      	movs	r2, #0
 801b58a:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801b58c:	4b35      	ldr	r3, [pc, #212]	; (801b664 <SX1276OnTimeoutIrq+0x14c>)
 801b58e:	0018      	movs	r0, r3
 801b590:	f001 fbfa 	bl	801cd88 <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b594:	4b34      	ldr	r3, [pc, #208]	; (801b668 <SX1276OnTimeoutIrq+0x150>)
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d05a      	beq.n	801b652 <SX1276OnTimeoutIrq+0x13a>
 801b59c:	4b32      	ldr	r3, [pc, #200]	; (801b668 <SX1276OnTimeoutIrq+0x150>)
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	68db      	ldr	r3, [r3, #12]
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d055      	beq.n	801b652 <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801b5a6:	4b30      	ldr	r3, [pc, #192]	; (801b668 <SX1276OnTimeoutIrq+0x150>)
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	68db      	ldr	r3, [r3, #12]
 801b5ac:	4798      	blx	r3
        break;
 801b5ae:	e050      	b.n	801b652 <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801b5b0:	f7ff fca8 	bl	801af04 <SX1276Reset>
        RxChainCalibration( );
 801b5b4:	f7fe f9ee 	bl	8019994 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b5b8:	2000      	movs	r0, #0
 801b5ba:	f7ff fcaa 	bl	801af12 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b5be:	230f      	movs	r3, #15
 801b5c0:	18fb      	adds	r3, r7, r3
 801b5c2:	2200      	movs	r2, #0
 801b5c4:	701a      	strb	r2, [r3, #0]
 801b5c6:	e025      	b.n	801b614 <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801b5c8:	240f      	movs	r4, #15
 801b5ca:	193b      	adds	r3, r7, r4
 801b5cc:	781a      	ldrb	r2, [r3, #0]
 801b5ce:	4927      	ldr	r1, [pc, #156]	; (801b66c <SX1276OnTimeoutIrq+0x154>)
 801b5d0:	0013      	movs	r3, r2
 801b5d2:	005b      	lsls	r3, r3, #1
 801b5d4:	189b      	adds	r3, r3, r2
 801b5d6:	5c5b      	ldrb	r3, [r3, r1]
 801b5d8:	0018      	movs	r0, r3
 801b5da:	f7ff fd07 	bl	801afec <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801b5de:	193b      	adds	r3, r7, r4
 801b5e0:	781a      	ldrb	r2, [r3, #0]
 801b5e2:	4922      	ldr	r1, [pc, #136]	; (801b66c <SX1276OnTimeoutIrq+0x154>)
 801b5e4:	0013      	movs	r3, r2
 801b5e6:	005b      	lsls	r3, r3, #1
 801b5e8:	189b      	adds	r3, r3, r2
 801b5ea:	18cb      	adds	r3, r1, r3
 801b5ec:	3301      	adds	r3, #1
 801b5ee:	781b      	ldrb	r3, [r3, #0]
 801b5f0:	0018      	movs	r0, r3
 801b5f2:	193b      	adds	r3, r7, r4
 801b5f4:	781a      	ldrb	r2, [r3, #0]
 801b5f6:	491d      	ldr	r1, [pc, #116]	; (801b66c <SX1276OnTimeoutIrq+0x154>)
 801b5f8:	0013      	movs	r3, r2
 801b5fa:	005b      	lsls	r3, r3, #1
 801b5fc:	189b      	adds	r3, r3, r2
 801b5fe:	18cb      	adds	r3, r1, r3
 801b600:	3302      	adds	r3, #2
 801b602:	781b      	ldrb	r3, [r3, #0]
 801b604:	0019      	movs	r1, r3
 801b606:	f7ff fd4b 	bl	801b0a0 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b60a:	193b      	adds	r3, r7, r4
 801b60c:	781a      	ldrb	r2, [r3, #0]
 801b60e:	193b      	adds	r3, r7, r4
 801b610:	3201      	adds	r2, #1
 801b612:	701a      	strb	r2, [r3, #0]
 801b614:	230f      	movs	r3, #15
 801b616:	18fb      	adds	r3, r7, r3
 801b618:	781b      	ldrb	r3, [r3, #0]
 801b61a:	2b0f      	cmp	r3, #15
 801b61c:	d9d4      	bls.n	801b5c8 <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801b61e:	2000      	movs	r0, #0
 801b620:	f7ff fce4 	bl	801afec <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801b624:	4b0e      	ldr	r3, [pc, #56]	; (801b660 <SX1276OnTimeoutIrq+0x148>)
 801b626:	225c      	movs	r2, #92	; 0x5c
 801b628:	5c9b      	ldrb	r3, [r3, r2]
 801b62a:	0018      	movs	r0, r3
 801b62c:	f7ff fe1a 	bl	801b264 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801b630:	4b0b      	ldr	r3, [pc, #44]	; (801b660 <SX1276OnTimeoutIrq+0x148>)
 801b632:	2200      	movs	r2, #0
 801b634:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b636:	4b0c      	ldr	r3, [pc, #48]	; (801b668 <SX1276OnTimeoutIrq+0x150>)
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d00b      	beq.n	801b656 <SX1276OnTimeoutIrq+0x13e>
 801b63e:	4b0a      	ldr	r3, [pc, #40]	; (801b668 <SX1276OnTimeoutIrq+0x150>)
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	685b      	ldr	r3, [r3, #4]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d006      	beq.n	801b656 <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801b648:	4b07      	ldr	r3, [pc, #28]	; (801b668 <SX1276OnTimeoutIrq+0x150>)
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	685b      	ldr	r3, [r3, #4]
 801b64e:	4798      	blx	r3
        break;
 801b650:	e001      	b.n	801b656 <SX1276OnTimeoutIrq+0x13e>
        break;
 801b652:	46c0      	nop			; (mov r8, r8)
 801b654:	e000      	b.n	801b658 <SX1276OnTimeoutIrq+0x140>
        break;
 801b656:	46c0      	nop			; (mov r8, r8)
    }
}
 801b658:	46c0      	nop			; (mov r8, r8)
 801b65a:	46bd      	mov	sp, r7
 801b65c:	b005      	add	sp, #20
 801b65e:	bd90      	pop	{r4, r7, pc}
 801b660:	20001750 	.word	0x20001750
 801b664:	20001738 	.word	0x20001738
 801b668:	20000e80 	.word	0x20000e80
 801b66c:	0801fde8 	.word	0x0801fde8

0801b670 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801b670:	b590      	push	{r4, r7, lr}
 801b672:	b083      	sub	sp, #12
 801b674:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801b676:	1d7b      	adds	r3, r7, #5
 801b678:	2200      	movs	r2, #0
 801b67a:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801b67c:	4bc3      	ldr	r3, [pc, #780]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b67e:	791b      	ldrb	r3, [r3, #4]
 801b680:	2b01      	cmp	r3, #1
 801b682:	d003      	beq.n	801b68c <SX1276OnDio0Irq+0x1c>
 801b684:	2b02      	cmp	r3, #2
 801b686:	d100      	bne.n	801b68a <SX1276OnDio0Irq+0x1a>
 801b688:	e1e2      	b.n	801ba50 <SX1276OnDio0Irq+0x3e0>
                }
                break;
            }
            break;
        default:
            break;
 801b68a:	e1ff      	b.n	801ba8c <SX1276OnDio0Irq+0x41c>
            switch( SX1276.Settings.Modem )
 801b68c:	4bbf      	ldr	r3, [pc, #764]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b68e:	795b      	ldrb	r3, [r3, #5]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d003      	beq.n	801b69c <SX1276OnDio0Irq+0x2c>
 801b694:	2b01      	cmp	r3, #1
 801b696:	d100      	bne.n	801b69a <SX1276OnDio0Irq+0x2a>
 801b698:	e0e2      	b.n	801b860 <SX1276OnDio0Irq+0x1f0>
                break;
 801b69a:	e1d8      	b.n	801ba4e <SX1276OnDio0Irq+0x3de>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801b69c:	4bbb      	ldr	r3, [pc, #748]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b69e:	2224      	movs	r2, #36	; 0x24
 801b6a0:	5c9b      	ldrb	r3, [r3, r2]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d052      	beq.n	801b74c <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801b6a6:	203f      	movs	r0, #63	; 0x3f
 801b6a8:	f7ff fd0b 	bl	801b0c2 <SX1276Read>
 801b6ac:	0003      	movs	r3, r0
 801b6ae:	001a      	movs	r2, r3
 801b6b0:	1d7b      	adds	r3, r7, #5
 801b6b2:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801b6b4:	1d7b      	adds	r3, r7, #5
 801b6b6:	781b      	ldrb	r3, [r3, #0]
 801b6b8:	b2db      	uxtb	r3, r3
 801b6ba:	001a      	movs	r2, r3
 801b6bc:	2302      	movs	r3, #2
 801b6be:	4013      	ands	r3, r2
 801b6c0:	2b02      	cmp	r3, #2
 801b6c2:	d043      	beq.n	801b74c <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b6c4:	210b      	movs	r1, #11
 801b6c6:	203e      	movs	r0, #62	; 0x3e
 801b6c8:	f7ff fcea 	bl	801b0a0 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b6cc:	2110      	movs	r1, #16
 801b6ce:	203f      	movs	r0, #63	; 0x3f
 801b6d0:	f7ff fce6 	bl	801b0a0 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801b6d4:	4bae      	ldr	r3, [pc, #696]	; (801b990 <SX1276OnDio0Irq+0x320>)
 801b6d6:	0018      	movs	r0, r3
 801b6d8:	f001 fb56 	bl	801cd88 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801b6dc:	4bab      	ldr	r3, [pc, #684]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b6de:	2226      	movs	r2, #38	; 0x26
 801b6e0:	5c9b      	ldrb	r3, [r3, r2]
 801b6e2:	2201      	movs	r2, #1
 801b6e4:	4053      	eors	r3, r2
 801b6e6:	b2db      	uxtb	r3, r3
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d007      	beq.n	801b6fc <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801b6ec:	4ba9      	ldr	r3, [pc, #676]	; (801b994 <SX1276OnDio0Irq+0x324>)
 801b6ee:	0018      	movs	r0, r3
 801b6f0:	f001 fb4a 	bl	801cd88 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801b6f4:	4ba5      	ldr	r3, [pc, #660]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b6f6:	2200      	movs	r2, #0
 801b6f8:	711a      	strb	r2, [r3, #4]
 801b6fa:	e00b      	b.n	801b714 <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b6fc:	200d      	movs	r0, #13
 801b6fe:	f7ff fce0 	bl	801b0c2 <SX1276Read>
 801b702:	0003      	movs	r3, r0
 801b704:	001a      	movs	r2, r3
 801b706:	2340      	movs	r3, #64	; 0x40
 801b708:	4313      	orrs	r3, r2
 801b70a:	b2db      	uxtb	r3, r3
 801b70c:	0019      	movs	r1, r3
 801b70e:	200d      	movs	r0, #13
 801b710:	f7ff fcc6 	bl	801b0a0 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b714:	4ba0      	ldr	r3, [pc, #640]	; (801b998 <SX1276OnDio0Irq+0x328>)
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d008      	beq.n	801b72e <SX1276OnDio0Irq+0xbe>
 801b71c:	4b9e      	ldr	r3, [pc, #632]	; (801b998 <SX1276OnDio0Irq+0x328>)
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	691b      	ldr	r3, [r3, #16]
 801b722:	2b00      	cmp	r3, #0
 801b724:	d003      	beq.n	801b72e <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801b726:	4b9c      	ldr	r3, [pc, #624]	; (801b998 <SX1276OnDio0Irq+0x328>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	691b      	ldr	r3, [r3, #16]
 801b72c:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b72e:	4b97      	ldr	r3, [pc, #604]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b730:	2230      	movs	r2, #48	; 0x30
 801b732:	2100      	movs	r1, #0
 801b734:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b736:	4b95      	ldr	r3, [pc, #596]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b738:	2231      	movs	r2, #49	; 0x31
 801b73a:	2100      	movs	r1, #0
 801b73c:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b73e:	4b93      	ldr	r3, [pc, #588]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b740:	2200      	movs	r2, #0
 801b742:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801b744:	4b91      	ldr	r3, [pc, #580]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b746:	2200      	movs	r2, #0
 801b748:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801b74a:	e180      	b.n	801ba4e <SX1276OnDio0Irq+0x3de>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b74c:	4b8f      	ldr	r3, [pc, #572]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b74e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b750:	2b00      	cmp	r3, #0
 801b752:	d12d      	bne.n	801b7b0 <SX1276OnDio0Irq+0x140>
 801b754:	4b8d      	ldr	r3, [pc, #564]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b756:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d129      	bne.n	801b7b0 <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b75c:	4b8b      	ldr	r3, [pc, #556]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b75e:	2222      	movs	r2, #34	; 0x22
 801b760:	5c9b      	ldrb	r3, [r3, r2]
 801b762:	2201      	movs	r2, #1
 801b764:	4053      	eors	r3, r2
 801b766:	b2db      	uxtb	r3, r3
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d005      	beq.n	801b778 <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b76c:	4b8b      	ldr	r3, [pc, #556]	; (801b99c <SX1276OnDio0Irq+0x32c>)
 801b76e:	2101      	movs	r1, #1
 801b770:	0018      	movs	r0, r3
 801b772:	f7ff fd33 	bl	801b1dc <SX1276ReadFifo>
 801b776:	e006      	b.n	801b786 <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b778:	2032      	movs	r0, #50	; 0x32
 801b77a:	f7ff fca2 	bl	801b0c2 <SX1276Read>
 801b77e:	0003      	movs	r3, r0
 801b780:	b29a      	uxth	r2, r3
 801b782:	4b82      	ldr	r3, [pc, #520]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b784:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b786:	4b81      	ldr	r3, [pc, #516]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b788:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b78a:	001a      	movs	r2, r3
 801b78c:	4b84      	ldr	r3, [pc, #528]	; (801b9a0 <SX1276OnDio0Irq+0x330>)
 801b78e:	18d0      	adds	r0, r2, r3
 801b790:	4b7e      	ldr	r3, [pc, #504]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b792:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b794:	b2da      	uxtb	r2, r3
 801b796:	4b7d      	ldr	r3, [pc, #500]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b798:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b79a:	b2db      	uxtb	r3, r3
 801b79c:	1ad3      	subs	r3, r2, r3
 801b79e:	b2db      	uxtb	r3, r3
 801b7a0:	0019      	movs	r1, r3
 801b7a2:	f7ff fd1b 	bl	801b1dc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b7a6:	4b79      	ldr	r3, [pc, #484]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b7a8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b7aa:	4b78      	ldr	r3, [pc, #480]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b7ac:	879a      	strh	r2, [r3, #60]	; 0x3c
 801b7ae:	e013      	b.n	801b7d8 <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b7b0:	4b76      	ldr	r3, [pc, #472]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b7b2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b7b4:	001a      	movs	r2, r3
 801b7b6:	4b7a      	ldr	r3, [pc, #488]	; (801b9a0 <SX1276OnDio0Irq+0x330>)
 801b7b8:	18d0      	adds	r0, r2, r3
 801b7ba:	4b74      	ldr	r3, [pc, #464]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b7bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b7be:	b2da      	uxtb	r2, r3
 801b7c0:	4b72      	ldr	r3, [pc, #456]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b7c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b7c4:	b2db      	uxtb	r3, r3
 801b7c6:	1ad3      	subs	r3, r2, r3
 801b7c8:	b2db      	uxtb	r3, r3
 801b7ca:	0019      	movs	r1, r3
 801b7cc:	f7ff fd06 	bl	801b1dc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b7d0:	4b6e      	ldr	r3, [pc, #440]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b7d2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b7d4:	4b6d      	ldr	r3, [pc, #436]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b7d6:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801b7d8:	4b6d      	ldr	r3, [pc, #436]	; (801b990 <SX1276OnDio0Irq+0x320>)
 801b7da:	0018      	movs	r0, r3
 801b7dc:	f001 fad4 	bl	801cd88 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801b7e0:	4b6a      	ldr	r3, [pc, #424]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b7e2:	2226      	movs	r2, #38	; 0x26
 801b7e4:	5c9b      	ldrb	r3, [r3, r2]
 801b7e6:	2201      	movs	r2, #1
 801b7e8:	4053      	eors	r3, r2
 801b7ea:	b2db      	uxtb	r3, r3
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d007      	beq.n	801b800 <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801b7f0:	4b66      	ldr	r3, [pc, #408]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b7f2:	2200      	movs	r2, #0
 801b7f4:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801b7f6:	4b67      	ldr	r3, [pc, #412]	; (801b994 <SX1276OnDio0Irq+0x324>)
 801b7f8:	0018      	movs	r0, r3
 801b7fa:	f001 fac5 	bl	801cd88 <UTIL_TIMER_Stop>
 801b7fe:	e00b      	b.n	801b818 <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b800:	200d      	movs	r0, #13
 801b802:	f7ff fc5e 	bl	801b0c2 <SX1276Read>
 801b806:	0003      	movs	r3, r0
 801b808:	001a      	movs	r2, r3
 801b80a:	2340      	movs	r3, #64	; 0x40
 801b80c:	4313      	orrs	r3, r2
 801b80e:	b2db      	uxtb	r3, r3
 801b810:	0019      	movs	r1, r3
 801b812:	200d      	movs	r0, #13
 801b814:	f7ff fc44 	bl	801b0a0 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b818:	4b5f      	ldr	r3, [pc, #380]	; (801b998 <SX1276OnDio0Irq+0x328>)
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d010      	beq.n	801b842 <SX1276OnDio0Irq+0x1d2>
 801b820:	4b5d      	ldr	r3, [pc, #372]	; (801b998 <SX1276OnDio0Irq+0x328>)
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	689b      	ldr	r3, [r3, #8]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d00b      	beq.n	801b842 <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801b82a:	4b5b      	ldr	r3, [pc, #364]	; (801b998 <SX1276OnDio0Irq+0x328>)
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	689c      	ldr	r4, [r3, #8]
 801b830:	4b56      	ldr	r3, [pc, #344]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b832:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801b834:	4b55      	ldr	r3, [pc, #340]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b836:	2232      	movs	r2, #50	; 0x32
 801b838:	569b      	ldrsb	r3, [r3, r2]
 801b83a:	b21a      	sxth	r2, r3
 801b83c:	4858      	ldr	r0, [pc, #352]	; (801b9a0 <SX1276OnDio0Irq+0x330>)
 801b83e:	2300      	movs	r3, #0
 801b840:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b842:	4b52      	ldr	r3, [pc, #328]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b844:	2230      	movs	r2, #48	; 0x30
 801b846:	2100      	movs	r1, #0
 801b848:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b84a:	4b50      	ldr	r3, [pc, #320]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b84c:	2231      	movs	r2, #49	; 0x31
 801b84e:	2100      	movs	r1, #0
 801b850:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b852:	4b4e      	ldr	r3, [pc, #312]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b854:	2200      	movs	r2, #0
 801b856:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801b858:	4b4c      	ldr	r3, [pc, #304]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b85a:	2200      	movs	r2, #0
 801b85c:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801b85e:	e0f6      	b.n	801ba4e <SX1276OnDio0Irq+0x3de>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801b860:	2140      	movs	r1, #64	; 0x40
 801b862:	2012      	movs	r0, #18
 801b864:	f7ff fc1c 	bl	801b0a0 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801b868:	2012      	movs	r0, #18
 801b86a:	f7ff fc2a 	bl	801b0c2 <SX1276Read>
 801b86e:	0003      	movs	r3, r0
 801b870:	001a      	movs	r2, r3
 801b872:	1d7b      	adds	r3, r7, #5
 801b874:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801b876:	1d7b      	adds	r3, r7, #5
 801b878:	781b      	ldrb	r3, [r3, #0]
 801b87a:	b2db      	uxtb	r3, r3
 801b87c:	001a      	movs	r2, r3
 801b87e:	2320      	movs	r3, #32
 801b880:	4013      	ands	r3, r2
 801b882:	2b20      	cmp	r3, #32
 801b884:	d122      	bne.n	801b8cc <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801b886:	2120      	movs	r1, #32
 801b888:	2012      	movs	r0, #18
 801b88a:	f7ff fc09 	bl	801b0a0 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801b88e:	4b3f      	ldr	r3, [pc, #252]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b890:	2256      	movs	r2, #86	; 0x56
 801b892:	5c9b      	ldrb	r3, [r3, r2]
 801b894:	2201      	movs	r2, #1
 801b896:	4053      	eors	r3, r2
 801b898:	b2db      	uxtb	r3, r3
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d002      	beq.n	801b8a4 <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801b89e:	4b3b      	ldr	r3, [pc, #236]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b8a0:	2200      	movs	r2, #0
 801b8a2:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801b8a4:	4b3a      	ldr	r3, [pc, #232]	; (801b990 <SX1276OnDio0Irq+0x320>)
 801b8a6:	0018      	movs	r0, r3
 801b8a8:	f001 fa6e 	bl	801cd88 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b8ac:	4b3a      	ldr	r3, [pc, #232]	; (801b998 <SX1276OnDio0Irq+0x328>)
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d100      	bne.n	801b8b6 <SX1276OnDio0Irq+0x246>
 801b8b4:	e0c8      	b.n	801ba48 <SX1276OnDio0Irq+0x3d8>
 801b8b6:	4b38      	ldr	r3, [pc, #224]	; (801b998 <SX1276OnDio0Irq+0x328>)
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	691b      	ldr	r3, [r3, #16]
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d100      	bne.n	801b8c2 <SX1276OnDio0Irq+0x252>
 801b8c0:	e0c2      	b.n	801ba48 <SX1276OnDio0Irq+0x3d8>
                            RadioEvents->RxError( );
 801b8c2:	4b35      	ldr	r3, [pc, #212]	; (801b998 <SX1276OnDio0Irq+0x328>)
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	691b      	ldr	r3, [r3, #16]
 801b8c8:	4798      	blx	r3
                        break;
 801b8ca:	e0bd      	b.n	801ba48 <SX1276OnDio0Irq+0x3d8>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801b8cc:	2019      	movs	r0, #25
 801b8ce:	f7ff fbf8 	bl	801b0c2 <SX1276Read>
 801b8d2:	0003      	movs	r3, r0
 801b8d4:	b25b      	sxtb	r3, r3
 801b8d6:	3302      	adds	r3, #2
 801b8d8:	109b      	asrs	r3, r3, #2
 801b8da:	b259      	sxtb	r1, r3
 801b8dc:	4b2b      	ldr	r3, [pc, #172]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b8de:	2260      	movs	r2, #96	; 0x60
 801b8e0:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801b8e2:	201a      	movs	r0, #26
 801b8e4:	f7ff fbed 	bl	801b0c2 <SX1276Read>
 801b8e8:	0003      	movs	r3, r0
 801b8ea:	001a      	movs	r2, r3
 801b8ec:	1dbb      	adds	r3, r7, #6
 801b8ee:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801b8f0:	4b26      	ldr	r3, [pc, #152]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b8f2:	2260      	movs	r2, #96	; 0x60
 801b8f4:	569b      	ldrsb	r3, [r3, r2]
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	da32      	bge.n	801b960 <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b8fa:	4b24      	ldr	r3, [pc, #144]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b8fc:	689b      	ldr	r3, [r3, #8]
 801b8fe:	4a29      	ldr	r2, [pc, #164]	; (801b9a4 <SX1276OnDio0Irq+0x334>)
 801b900:	4293      	cmp	r3, r2
 801b902:	d916      	bls.n	801b932 <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b904:	1dbb      	adds	r3, r7, #6
 801b906:	2200      	movs	r2, #0
 801b908:	5e9b      	ldrsh	r3, [r3, r2]
 801b90a:	111b      	asrs	r3, r3, #4
 801b90c:	b21b      	sxth	r3, r3
 801b90e:	b29a      	uxth	r2, r3
 801b910:	1dbb      	adds	r3, r7, #6
 801b912:	881b      	ldrh	r3, [r3, #0]
 801b914:	18d3      	adds	r3, r2, r3
 801b916:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b918:	4b1c      	ldr	r3, [pc, #112]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b91a:	2160      	movs	r1, #96	; 0x60
 801b91c:	565b      	ldrsb	r3, [r3, r1]
 801b91e:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b920:	18d3      	adds	r3, r2, r3
 801b922:	b29b      	uxth	r3, r3
 801b924:	3b9d      	subs	r3, #157	; 0x9d
 801b926:	b29b      	uxth	r3, r3
 801b928:	b219      	sxth	r1, r3
 801b92a:	4b18      	ldr	r3, [pc, #96]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b92c:	2262      	movs	r2, #98	; 0x62
 801b92e:	5299      	strh	r1, [r3, r2]
 801b930:	e04a      	b.n	801b9c8 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b932:	1dbb      	adds	r3, r7, #6
 801b934:	2200      	movs	r2, #0
 801b936:	5e9b      	ldrsh	r3, [r3, r2]
 801b938:	111b      	asrs	r3, r3, #4
 801b93a:	b21b      	sxth	r3, r3
 801b93c:	b29a      	uxth	r2, r3
 801b93e:	1dbb      	adds	r3, r7, #6
 801b940:	881b      	ldrh	r3, [r3, #0]
 801b942:	18d3      	adds	r3, r2, r3
 801b944:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b946:	4b11      	ldr	r3, [pc, #68]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b948:	2160      	movs	r1, #96	; 0x60
 801b94a:	565b      	ldrsb	r3, [r3, r1]
 801b94c:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b94e:	18d3      	adds	r3, r2, r3
 801b950:	b29b      	uxth	r3, r3
 801b952:	3ba4      	subs	r3, #164	; 0xa4
 801b954:	b29b      	uxth	r3, r3
 801b956:	b219      	sxth	r1, r3
 801b958:	4b0c      	ldr	r3, [pc, #48]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b95a:	2262      	movs	r2, #98	; 0x62
 801b95c:	5299      	strh	r1, [r3, r2]
 801b95e:	e033      	b.n	801b9c8 <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b960:	4b0a      	ldr	r3, [pc, #40]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b962:	689b      	ldr	r3, [r3, #8]
 801b964:	4a0f      	ldr	r2, [pc, #60]	; (801b9a4 <SX1276OnDio0Irq+0x334>)
 801b966:	4293      	cmp	r3, r2
 801b968:	d91e      	bls.n	801b9a8 <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801b96a:	1dbb      	adds	r3, r7, #6
 801b96c:	2200      	movs	r2, #0
 801b96e:	5e9b      	ldrsh	r3, [r3, r2]
 801b970:	111b      	asrs	r3, r3, #4
 801b972:	b21b      	sxth	r3, r3
 801b974:	b29a      	uxth	r2, r3
 801b976:	1dbb      	adds	r3, r7, #6
 801b978:	881b      	ldrh	r3, [r3, #0]
 801b97a:	18d3      	adds	r3, r2, r3
 801b97c:	b29b      	uxth	r3, r3
 801b97e:	3b9d      	subs	r3, #157	; 0x9d
 801b980:	b29b      	uxth	r3, r3
 801b982:	b219      	sxth	r1, r3
 801b984:	4b01      	ldr	r3, [pc, #4]	; (801b98c <SX1276OnDio0Irq+0x31c>)
 801b986:	2262      	movs	r2, #98	; 0x62
 801b988:	5299      	strh	r1, [r3, r2]
 801b98a:	e01d      	b.n	801b9c8 <SX1276OnDio0Irq+0x358>
 801b98c:	20001750 	.word	0x20001750
 801b990:	200017b8 	.word	0x200017b8
 801b994:	20001738 	.word	0x20001738
 801b998:	20000e80 	.word	0x20000e80
 801b99c:	2000178a 	.word	0x2000178a
 801b9a0:	20000e84 	.word	0x20000e84
 801b9a4:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801b9a8:	1dbb      	adds	r3, r7, #6
 801b9aa:	2200      	movs	r2, #0
 801b9ac:	5e9b      	ldrsh	r3, [r3, r2]
 801b9ae:	111b      	asrs	r3, r3, #4
 801b9b0:	b21b      	sxth	r3, r3
 801b9b2:	b29a      	uxth	r2, r3
 801b9b4:	1dbb      	adds	r3, r7, #6
 801b9b6:	881b      	ldrh	r3, [r3, #0]
 801b9b8:	18d3      	adds	r3, r2, r3
 801b9ba:	b29b      	uxth	r3, r3
 801b9bc:	3ba4      	subs	r3, #164	; 0xa4
 801b9be:	b29b      	uxth	r3, r3
 801b9c0:	b219      	sxth	r1, r3
 801b9c2:	4b34      	ldr	r3, [pc, #208]	; (801ba94 <SX1276OnDio0Irq+0x424>)
 801b9c4:	2262      	movs	r2, #98	; 0x62
 801b9c6:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801b9c8:	2013      	movs	r0, #19
 801b9ca:	f7ff fb7a 	bl	801b0c2 <SX1276Read>
 801b9ce:	0003      	movs	r3, r0
 801b9d0:	0019      	movs	r1, r3
 801b9d2:	4b30      	ldr	r3, [pc, #192]	; (801ba94 <SX1276OnDio0Irq+0x424>)
 801b9d4:	2264      	movs	r2, #100	; 0x64
 801b9d6:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801b9d8:	2010      	movs	r0, #16
 801b9da:	f7ff fb72 	bl	801b0c2 <SX1276Read>
 801b9de:	0003      	movs	r3, r0
 801b9e0:	0019      	movs	r1, r3
 801b9e2:	200d      	movs	r0, #13
 801b9e4:	f7ff fb5c 	bl	801b0a0 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801b9e8:	4b2a      	ldr	r3, [pc, #168]	; (801ba94 <SX1276OnDio0Irq+0x424>)
 801b9ea:	2264      	movs	r2, #100	; 0x64
 801b9ec:	5c9a      	ldrb	r2, [r3, r2]
 801b9ee:	4b2a      	ldr	r3, [pc, #168]	; (801ba98 <SX1276OnDio0Irq+0x428>)
 801b9f0:	0011      	movs	r1, r2
 801b9f2:	0018      	movs	r0, r3
 801b9f4:	f7ff fbf2 	bl	801b1dc <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801b9f8:	4b26      	ldr	r3, [pc, #152]	; (801ba94 <SX1276OnDio0Irq+0x424>)
 801b9fa:	2256      	movs	r2, #86	; 0x56
 801b9fc:	5c9b      	ldrb	r3, [r3, r2]
 801b9fe:	2201      	movs	r2, #1
 801ba00:	4053      	eors	r3, r2
 801ba02:	b2db      	uxtb	r3, r3
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d002      	beq.n	801ba0e <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801ba08:	4b22      	ldr	r3, [pc, #136]	; (801ba94 <SX1276OnDio0Irq+0x424>)
 801ba0a:	2200      	movs	r2, #0
 801ba0c:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801ba0e:	4b23      	ldr	r3, [pc, #140]	; (801ba9c <SX1276OnDio0Irq+0x42c>)
 801ba10:	0018      	movs	r0, r3
 801ba12:	f001 f9b9 	bl	801cd88 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801ba16:	4b22      	ldr	r3, [pc, #136]	; (801baa0 <SX1276OnDio0Irq+0x430>)
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d016      	beq.n	801ba4c <SX1276OnDio0Irq+0x3dc>
 801ba1e:	4b20      	ldr	r3, [pc, #128]	; (801baa0 <SX1276OnDio0Irq+0x430>)
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	689b      	ldr	r3, [r3, #8]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d011      	beq.n	801ba4c <SX1276OnDio0Irq+0x3dc>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801ba28:	4b1d      	ldr	r3, [pc, #116]	; (801baa0 <SX1276OnDio0Irq+0x430>)
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	689c      	ldr	r4, [r3, #8]
 801ba2e:	4b19      	ldr	r3, [pc, #100]	; (801ba94 <SX1276OnDio0Irq+0x424>)
 801ba30:	2264      	movs	r2, #100	; 0x64
 801ba32:	5c9b      	ldrb	r3, [r3, r2]
 801ba34:	b299      	uxth	r1, r3
 801ba36:	4b17      	ldr	r3, [pc, #92]	; (801ba94 <SX1276OnDio0Irq+0x424>)
 801ba38:	2262      	movs	r2, #98	; 0x62
 801ba3a:	5e9a      	ldrsh	r2, [r3, r2]
 801ba3c:	4b15      	ldr	r3, [pc, #84]	; (801ba94 <SX1276OnDio0Irq+0x424>)
 801ba3e:	2060      	movs	r0, #96	; 0x60
 801ba40:	561b      	ldrsb	r3, [r3, r0]
 801ba42:	4815      	ldr	r0, [pc, #84]	; (801ba98 <SX1276OnDio0Irq+0x428>)
 801ba44:	47a0      	blx	r4
                break;
 801ba46:	e001      	b.n	801ba4c <SX1276OnDio0Irq+0x3dc>
                        break;
 801ba48:	46c0      	nop			; (mov r8, r8)
 801ba4a:	e01f      	b.n	801ba8c <SX1276OnDio0Irq+0x41c>
                break;
 801ba4c:	46c0      	nop			; (mov r8, r8)
            break;
 801ba4e:	e01d      	b.n	801ba8c <SX1276OnDio0Irq+0x41c>
            TimerStop( &TxTimeoutTimer );
 801ba50:	4b14      	ldr	r3, [pc, #80]	; (801baa4 <SX1276OnDio0Irq+0x434>)
 801ba52:	0018      	movs	r0, r3
 801ba54:	f001 f998 	bl	801cd88 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801ba58:	4b0e      	ldr	r3, [pc, #56]	; (801ba94 <SX1276OnDio0Irq+0x424>)
 801ba5a:	795b      	ldrb	r3, [r3, #5]
 801ba5c:	2b01      	cmp	r3, #1
 801ba5e:	d103      	bne.n	801ba68 <SX1276OnDio0Irq+0x3f8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801ba60:	2108      	movs	r1, #8
 801ba62:	2012      	movs	r0, #18
 801ba64:	f7ff fb1c 	bl	801b0a0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801ba68:	4b0a      	ldr	r3, [pc, #40]	; (801ba94 <SX1276OnDio0Irq+0x424>)
 801ba6a:	2200      	movs	r2, #0
 801ba6c:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801ba6e:	4b0c      	ldr	r3, [pc, #48]	; (801baa0 <SX1276OnDio0Irq+0x430>)
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d008      	beq.n	801ba88 <SX1276OnDio0Irq+0x418>
 801ba76:	4b0a      	ldr	r3, [pc, #40]	; (801baa0 <SX1276OnDio0Irq+0x430>)
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d003      	beq.n	801ba88 <SX1276OnDio0Irq+0x418>
                    RadioEvents->TxDone( );
 801ba80:	4b07      	ldr	r3, [pc, #28]	; (801baa0 <SX1276OnDio0Irq+0x430>)
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	4798      	blx	r3
                break;
 801ba88:	46c0      	nop			; (mov r8, r8)
            break;
 801ba8a:	46c0      	nop			; (mov r8, r8)
    }
}
 801ba8c:	46c0      	nop			; (mov r8, r8)
 801ba8e:	46bd      	mov	sp, r7
 801ba90:	b003      	add	sp, #12
 801ba92:	bd90      	pop	{r4, r7, pc}
 801ba94:	20001750 	.word	0x20001750
 801ba98:	20000e84 	.word	0x20000e84
 801ba9c:	200017b8 	.word	0x200017b8
 801baa0:	20000e80 	.word	0x20000e80
 801baa4:	20001720 	.word	0x20001720

0801baa8 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801baac:	4b6c      	ldr	r3, [pc, #432]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801baae:	791b      	ldrb	r3, [r3, #4]
 801bab0:	2b01      	cmp	r3, #1
 801bab2:	d003      	beq.n	801babc <SX1276OnDio1Irq+0x14>
 801bab4:	2b02      	cmp	r3, #2
 801bab6:	d100      	bne.n	801baba <SX1276OnDio1Irq+0x12>
 801bab8:	e08b      	b.n	801bbd2 <SX1276OnDio1Irq+0x12a>
            default:
                break;
            }
            break;
        default:
            break;
 801baba:	e0ce      	b.n	801bc5a <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801babc:	4b68      	ldr	r3, [pc, #416]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801babe:	795b      	ldrb	r3, [r3, #5]
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d002      	beq.n	801baca <SX1276OnDio1Irq+0x22>
 801bac4:	2b01      	cmp	r3, #1
 801bac6:	d061      	beq.n	801bb8c <SX1276OnDio1Irq+0xe4>
                break;
 801bac8:	e082      	b.n	801bbd0 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801baca:	f7ea fc81 	bl	80063d0 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801bace:	1e03      	subs	r3, r0, #0
 801bad0:	d100      	bne.n	801bad4 <SX1276OnDio1Irq+0x2c>
 801bad2:	e078      	b.n	801bbc6 <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutSyncWord );
 801bad4:	4b63      	ldr	r3, [pc, #396]	; (801bc64 <SX1276OnDio1Irq+0x1bc>)
 801bad6:	0018      	movs	r0, r3
 801bad8:	f001 f956 	bl	801cd88 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801badc:	4b60      	ldr	r3, [pc, #384]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bade:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d118      	bne.n	801bb16 <SX1276OnDio1Irq+0x6e>
 801bae4:	4b5e      	ldr	r3, [pc, #376]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bae6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d114      	bne.n	801bb16 <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801baec:	4b5c      	ldr	r3, [pc, #368]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801baee:	2222      	movs	r2, #34	; 0x22
 801baf0:	5c9b      	ldrb	r3, [r3, r2]
 801baf2:	2201      	movs	r2, #1
 801baf4:	4053      	eors	r3, r2
 801baf6:	b2db      	uxtb	r3, r3
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d005      	beq.n	801bb08 <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801bafc:	4b5a      	ldr	r3, [pc, #360]	; (801bc68 <SX1276OnDio1Irq+0x1c0>)
 801bafe:	2101      	movs	r1, #1
 801bb00:	0018      	movs	r0, r3
 801bb02:	f7ff fb6b 	bl	801b1dc <SX1276ReadFifo>
 801bb06:	e006      	b.n	801bb16 <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801bb08:	2032      	movs	r0, #50	; 0x32
 801bb0a:	f7ff fada 	bl	801b0c2 <SX1276Read>
 801bb0e:	0003      	movs	r3, r0
 801bb10:	b29a      	uxth	r2, r3
 801bb12:	4b53      	ldr	r3, [pc, #332]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb14:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801bb16:	4b52      	ldr	r3, [pc, #328]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb18:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bb1a:	001a      	movs	r2, r3
 801bb1c:	4b50      	ldr	r3, [pc, #320]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb1e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb20:	1ad3      	subs	r3, r2, r3
 801bb22:	4a4f      	ldr	r2, [pc, #316]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb24:	213e      	movs	r1, #62	; 0x3e
 801bb26:	5c52      	ldrb	r2, [r2, r1]
 801bb28:	4293      	cmp	r3, r2
 801bb2a:	db1a      	blt.n	801bb62 <SX1276OnDio1Irq+0xba>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801bb2c:	4b4c      	ldr	r3, [pc, #304]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb2e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb30:	001a      	movs	r2, r3
 801bb32:	4b4e      	ldr	r3, [pc, #312]	; (801bc6c <SX1276OnDio1Irq+0x1c4>)
 801bb34:	18d2      	adds	r2, r2, r3
 801bb36:	4b4a      	ldr	r3, [pc, #296]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb38:	213e      	movs	r1, #62	; 0x3e
 801bb3a:	5c5b      	ldrb	r3, [r3, r1]
 801bb3c:	3b01      	subs	r3, #1
 801bb3e:	b2db      	uxtb	r3, r3
 801bb40:	0019      	movs	r1, r3
 801bb42:	0010      	movs	r0, r2
 801bb44:	f7ff fb4a 	bl	801b1dc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801bb48:	4b45      	ldr	r3, [pc, #276]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb4a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801bb4c:	4b44      	ldr	r3, [pc, #272]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb4e:	213e      	movs	r1, #62	; 0x3e
 801bb50:	5c5b      	ldrb	r3, [r3, r1]
 801bb52:	b29b      	uxth	r3, r3
 801bb54:	18d3      	adds	r3, r2, r3
 801bb56:	b29b      	uxth	r3, r3
 801bb58:	3b01      	subs	r3, #1
 801bb5a:	b29a      	uxth	r2, r3
 801bb5c:	4b40      	ldr	r3, [pc, #256]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb5e:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bb60:	e036      	b.n	801bbd0 <SX1276OnDio1Irq+0x128>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bb62:	4b3f      	ldr	r3, [pc, #252]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb64:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb66:	001a      	movs	r2, r3
 801bb68:	4b40      	ldr	r3, [pc, #256]	; (801bc6c <SX1276OnDio1Irq+0x1c4>)
 801bb6a:	18d0      	adds	r0, r2, r3
 801bb6c:	4b3c      	ldr	r3, [pc, #240]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb6e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bb70:	b2da      	uxtb	r2, r3
 801bb72:	4b3b      	ldr	r3, [pc, #236]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb74:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb76:	b2db      	uxtb	r3, r3
 801bb78:	1ad3      	subs	r3, r2, r3
 801bb7a:	b2db      	uxtb	r3, r3
 801bb7c:	0019      	movs	r1, r3
 801bb7e:	f7ff fb2d 	bl	801b1dc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bb82:	4b37      	ldr	r3, [pc, #220]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb84:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801bb86:	4b36      	ldr	r3, [pc, #216]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bb88:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bb8a:	e021      	b.n	801bbd0 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801bb8c:	f7ea fc20 	bl	80063d0 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801bb90:	1e03      	subs	r3, r0, #0
 801bb92:	d01a      	beq.n	801bbca <SX1276OnDio1Irq+0x122>
                TimerStop( &RxTimeoutTimer );
 801bb94:	4b36      	ldr	r3, [pc, #216]	; (801bc70 <SX1276OnDio1Irq+0x1c8>)
 801bb96:	0018      	movs	r0, r3
 801bb98:	f001 f8f6 	bl	801cd88 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801bb9c:	2180      	movs	r1, #128	; 0x80
 801bb9e:	2012      	movs	r0, #18
 801bba0:	f7ff fa7e 	bl	801b0a0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801bba4:	4b2e      	ldr	r3, [pc, #184]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bba6:	2200      	movs	r2, #0
 801bba8:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801bbaa:	4b32      	ldr	r3, [pc, #200]	; (801bc74 <SX1276OnDio1Irq+0x1cc>)
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d00d      	beq.n	801bbce <SX1276OnDio1Irq+0x126>
 801bbb2:	4b30      	ldr	r3, [pc, #192]	; (801bc74 <SX1276OnDio1Irq+0x1cc>)
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	68db      	ldr	r3, [r3, #12]
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d008      	beq.n	801bbce <SX1276OnDio1Irq+0x126>
                    RadioEvents->RxTimeout( );
 801bbbc:	4b2d      	ldr	r3, [pc, #180]	; (801bc74 <SX1276OnDio1Irq+0x1cc>)
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	68db      	ldr	r3, [r3, #12]
 801bbc2:	4798      	blx	r3
                break;
 801bbc4:	e003      	b.n	801bbce <SX1276OnDio1Irq+0x126>
                    break;
 801bbc6:	46c0      	nop			; (mov r8, r8)
 801bbc8:	e047      	b.n	801bc5a <SX1276OnDio1Irq+0x1b2>
                    break;
 801bbca:	46c0      	nop			; (mov r8, r8)
 801bbcc:	e045      	b.n	801bc5a <SX1276OnDio1Irq+0x1b2>
                break;
 801bbce:	46c0      	nop			; (mov r8, r8)
            break;
 801bbd0:	e043      	b.n	801bc5a <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801bbd2:	4b23      	ldr	r3, [pc, #140]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bbd4:	795b      	ldrb	r3, [r3, #5]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d13b      	bne.n	801bc52 <SX1276OnDio1Irq+0x1aa>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801bbda:	f7ea fbf9 	bl	80063d0 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801bbde:	0003      	movs	r3, r0
 801bbe0:	2b01      	cmp	r3, #1
 801bbe2:	d038      	beq.n	801bc56 <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801bbe4:	4b1e      	ldr	r3, [pc, #120]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bbe6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bbe8:	001a      	movs	r2, r3
 801bbea:	4b1d      	ldr	r3, [pc, #116]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bbec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bbee:	1ad3      	subs	r3, r2, r3
 801bbf0:	4a1b      	ldr	r2, [pc, #108]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bbf2:	213f      	movs	r1, #63	; 0x3f
 801bbf4:	5c52      	ldrb	r2, [r2, r1]
 801bbf6:	4293      	cmp	r3, r2
 801bbf8:	dd16      	ble.n	801bc28 <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801bbfa:	4b19      	ldr	r3, [pc, #100]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bbfc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bbfe:	001a      	movs	r2, r3
 801bc00:	4b1a      	ldr	r3, [pc, #104]	; (801bc6c <SX1276OnDio1Irq+0x1c4>)
 801bc02:	18d2      	adds	r2, r2, r3
 801bc04:	4b16      	ldr	r3, [pc, #88]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bc06:	213f      	movs	r1, #63	; 0x3f
 801bc08:	5c5b      	ldrb	r3, [r3, r1]
 801bc0a:	0019      	movs	r1, r3
 801bc0c:	0010      	movs	r0, r2
 801bc0e:	f7ff fad3 	bl	801b1b8 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801bc12:	4b13      	ldr	r3, [pc, #76]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bc14:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801bc16:	4b12      	ldr	r3, [pc, #72]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bc18:	213f      	movs	r1, #63	; 0x3f
 801bc1a:	5c5b      	ldrb	r3, [r3, r1]
 801bc1c:	b29b      	uxth	r3, r3
 801bc1e:	18d3      	adds	r3, r2, r3
 801bc20:	b29a      	uxth	r2, r3
 801bc22:	4b0f      	ldr	r3, [pc, #60]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bc24:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bc26:	e017      	b.n	801bc58 <SX1276OnDio1Irq+0x1b0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bc28:	4b0d      	ldr	r3, [pc, #52]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bc2a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bc2c:	001a      	movs	r2, r3
 801bc2e:	4b0f      	ldr	r3, [pc, #60]	; (801bc6c <SX1276OnDio1Irq+0x1c4>)
 801bc30:	18d0      	adds	r0, r2, r3
 801bc32:	4b0b      	ldr	r3, [pc, #44]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bc34:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bc36:	b2da      	uxtb	r2, r3
 801bc38:	4b09      	ldr	r3, [pc, #36]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bc3a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bc3c:	b2db      	uxtb	r3, r3
 801bc3e:	1ad3      	subs	r3, r2, r3
 801bc40:	b2db      	uxtb	r3, r3
 801bc42:	0019      	movs	r1, r3
 801bc44:	f7ff fab8 	bl	801b1b8 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801bc48:	4b05      	ldr	r3, [pc, #20]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bc4a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801bc4c:	4b04      	ldr	r3, [pc, #16]	; (801bc60 <SX1276OnDio1Irq+0x1b8>)
 801bc4e:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bc50:	e002      	b.n	801bc58 <SX1276OnDio1Irq+0x1b0>
                break;
 801bc52:	46c0      	nop			; (mov r8, r8)
 801bc54:	e000      	b.n	801bc58 <SX1276OnDio1Irq+0x1b0>
                    break;
 801bc56:	46c0      	nop			; (mov r8, r8)
            break;
 801bc58:	46c0      	nop			; (mov r8, r8)
    }
}
 801bc5a:	46c0      	nop			; (mov r8, r8)
 801bc5c:	46bd      	mov	sp, r7
 801bc5e:	bd80      	pop	{r7, pc}
 801bc60:	20001750 	.word	0x20001750
 801bc64:	20001738 	.word	0x20001738
 801bc68:	2000178a 	.word	0x2000178a
 801bc6c:	20000e84 	.word	0x20000e84
 801bc70:	200017b8 	.word	0x200017b8
 801bc74:	20000e80 	.word	0x20000e80

0801bc78 <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801bc78:	b590      	push	{r4, r7, lr}
 801bc7a:	b085      	sub	sp, #20
 801bc7c:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801bc7e:	2300      	movs	r3, #0
 801bc80:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801bc82:	4b5d      	ldr	r3, [pc, #372]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bc84:	791b      	ldrb	r3, [r3, #4]
 801bc86:	2b01      	cmp	r3, #1
 801bc88:	d003      	beq.n	801bc92 <SX1276OnDio2Irq+0x1a>
 801bc8a:	2b02      	cmp	r3, #2
 801bc8c:	d100      	bne.n	801bc90 <SX1276OnDio2Irq+0x18>
 801bc8e:	e083      	b.n	801bd98 <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801bc90:	e0ae      	b.n	801bdf0 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801bc92:	4b59      	ldr	r3, [pc, #356]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bc94:	795b      	ldrb	r3, [r3, #5]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d002      	beq.n	801bca0 <SX1276OnDio2Irq+0x28>
 801bc9a:	2b01      	cmp	r3, #1
 801bc9c:	d058      	beq.n	801bd50 <SX1276OnDio2Irq+0xd8>
                break;
 801bc9e:	e07a      	b.n	801bd96 <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801bca0:	4b55      	ldr	r3, [pc, #340]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bca2:	2230      	movs	r2, #48	; 0x30
 801bca4:	2101      	movs	r1, #1
 801bca6:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801bca8:	4b53      	ldr	r3, [pc, #332]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bcaa:	2230      	movs	r2, #48	; 0x30
 801bcac:	5c9b      	ldrb	r3, [r3, r2]
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d06e      	beq.n	801bd90 <SX1276OnDio2Irq+0x118>
 801bcb2:	4b51      	ldr	r3, [pc, #324]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bcb4:	2231      	movs	r2, #49	; 0x31
 801bcb6:	5c9b      	ldrb	r3, [r3, r2]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d169      	bne.n	801bd90 <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801bcbc:	4b4f      	ldr	r3, [pc, #316]	; (801bdfc <SX1276OnDio2Irq+0x184>)
 801bcbe:	0018      	movs	r0, r3
 801bcc0:	f001 f862 	bl	801cd88 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801bcc4:	4b4c      	ldr	r3, [pc, #304]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bcc6:	2231      	movs	r2, #49	; 0x31
 801bcc8:	2101      	movs	r1, #1
 801bcca:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801bccc:	2011      	movs	r0, #17
 801bcce:	f7ff f9f8 	bl	801b0c2 <SX1276Read>
 801bcd2:	0003      	movs	r3, r0
 801bcd4:	085b      	lsrs	r3, r3, #1
 801bcd6:	b2db      	uxtb	r3, r3
 801bcd8:	425b      	negs	r3, r3
 801bcda:	b2db      	uxtb	r3, r3
 801bcdc:	b259      	sxtb	r1, r3
 801bcde:	4b46      	ldr	r3, [pc, #280]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bce0:	2232      	movs	r2, #50	; 0x32
 801bce2:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801bce4:	201b      	movs	r0, #27
 801bce6:	f7ff f9ec 	bl	801b0c2 <SX1276Read>
 801bcea:	0003      	movs	r3, r0
 801bcec:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801bcee:	201c      	movs	r0, #28
 801bcf0:	f7ff f9e7 	bl	801b0c2 <SX1276Read>
 801bcf4:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801bcf6:	4323      	orrs	r3, r4
 801bcf8:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801bcfa:	68fb      	ldr	r3, [r7, #12]
 801bcfc:	0a1b      	lsrs	r3, r3, #8
 801bcfe:	60bb      	str	r3, [r7, #8]
 801bd00:	68bb      	ldr	r3, [r7, #8]
 801bd02:	021b      	lsls	r3, r3, #8
 801bd04:	68fa      	ldr	r2, [r7, #12]
 801bd06:	1ad3      	subs	r3, r2, r3
 801bd08:	607b      	str	r3, [r7, #4]
 801bd0a:	68b9      	ldr	r1, [r7, #8]
 801bd0c:	000b      	movs	r3, r1
 801bd0e:	015b      	lsls	r3, r3, #5
 801bd10:	1a5b      	subs	r3, r3, r1
 801bd12:	019a      	lsls	r2, r3, #6
 801bd14:	1ad2      	subs	r2, r2, r3
 801bd16:	00d2      	lsls	r2, r2, #3
 801bd18:	1850      	adds	r0, r2, r1
 801bd1a:	6879      	ldr	r1, [r7, #4]
 801bd1c:	000b      	movs	r3, r1
 801bd1e:	015b      	lsls	r3, r3, #5
 801bd20:	1a5b      	subs	r3, r3, r1
 801bd22:	019a      	lsls	r2, r3, #6
 801bd24:	1ad2      	subs	r2, r2, r3
 801bd26:	00d2      	lsls	r2, r2, #3
 801bd28:	1853      	adds	r3, r2, r1
 801bd2a:	3380      	adds	r3, #128	; 0x80
 801bd2c:	0a1b      	lsrs	r3, r3, #8
 801bd2e:	18c3      	adds	r3, r0, r3
 801bd30:	001a      	movs	r2, r3
 801bd32:	4b31      	ldr	r3, [pc, #196]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bd34:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801bd36:	200c      	movs	r0, #12
 801bd38:	f7ff f9c3 	bl	801b0c2 <SX1276Read>
 801bd3c:	0003      	movs	r3, r0
 801bd3e:	095b      	lsrs	r3, r3, #5
 801bd40:	b2db      	uxtb	r3, r3
 801bd42:	2207      	movs	r2, #7
 801bd44:	4013      	ands	r3, r2
 801bd46:	b2d9      	uxtb	r1, r3
 801bd48:	4b2b      	ldr	r3, [pc, #172]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bd4a:	2238      	movs	r2, #56	; 0x38
 801bd4c:	5499      	strb	r1, [r3, r2]
                break;
 801bd4e:	e01f      	b.n	801bd90 <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801bd50:	4b29      	ldr	r3, [pc, #164]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bd52:	2253      	movs	r2, #83	; 0x53
 801bd54:	5c9b      	ldrb	r3, [r3, r2]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d01c      	beq.n	801bd94 <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801bd5a:	2102      	movs	r1, #2
 801bd5c:	2012      	movs	r0, #18
 801bd5e:	f7ff f99f 	bl	801b0a0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801bd62:	4b27      	ldr	r3, [pc, #156]	; (801be00 <SX1276OnDio2Irq+0x188>)
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d014      	beq.n	801bd94 <SX1276OnDio2Irq+0x11c>
 801bd6a:	4b25      	ldr	r3, [pc, #148]	; (801be00 <SX1276OnDio2Irq+0x188>)
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	695b      	ldr	r3, [r3, #20]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d00f      	beq.n	801bd94 <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801bd74:	4b22      	ldr	r3, [pc, #136]	; (801be00 <SX1276OnDio2Irq+0x188>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	695c      	ldr	r4, [r3, #20]
 801bd7a:	201c      	movs	r0, #28
 801bd7c:	f7ff f9a1 	bl	801b0c2 <SX1276Read>
 801bd80:	0003      	movs	r3, r0
 801bd82:	001a      	movs	r2, r3
 801bd84:	233f      	movs	r3, #63	; 0x3f
 801bd86:	4013      	ands	r3, r2
 801bd88:	b2db      	uxtb	r3, r3
 801bd8a:	0018      	movs	r0, r3
 801bd8c:	47a0      	blx	r4
                break;
 801bd8e:	e001      	b.n	801bd94 <SX1276OnDio2Irq+0x11c>
                break;
 801bd90:	46c0      	nop			; (mov r8, r8)
 801bd92:	e02d      	b.n	801bdf0 <SX1276OnDio2Irq+0x178>
                break;
 801bd94:	46c0      	nop			; (mov r8, r8)
            break;
 801bd96:	e02b      	b.n	801bdf0 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801bd98:	4b17      	ldr	r3, [pc, #92]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bd9a:	795b      	ldrb	r3, [r3, #5]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d021      	beq.n	801bde4 <SX1276OnDio2Irq+0x16c>
 801bda0:	2b01      	cmp	r3, #1
 801bda2:	d121      	bne.n	801bde8 <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801bda4:	4b14      	ldr	r3, [pc, #80]	; (801bdf8 <SX1276OnDio2Irq+0x180>)
 801bda6:	2253      	movs	r2, #83	; 0x53
 801bda8:	5c9b      	ldrb	r3, [r3, r2]
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d01e      	beq.n	801bdec <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801bdae:	2102      	movs	r1, #2
 801bdb0:	2012      	movs	r0, #18
 801bdb2:	f7ff f975 	bl	801b0a0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801bdb6:	4b12      	ldr	r3, [pc, #72]	; (801be00 <SX1276OnDio2Irq+0x188>)
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d016      	beq.n	801bdec <SX1276OnDio2Irq+0x174>
 801bdbe:	4b10      	ldr	r3, [pc, #64]	; (801be00 <SX1276OnDio2Irq+0x188>)
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	695b      	ldr	r3, [r3, #20]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d011      	beq.n	801bdec <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801bdc8:	4b0d      	ldr	r3, [pc, #52]	; (801be00 <SX1276OnDio2Irq+0x188>)
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	695c      	ldr	r4, [r3, #20]
 801bdce:	201c      	movs	r0, #28
 801bdd0:	f7ff f977 	bl	801b0c2 <SX1276Read>
 801bdd4:	0003      	movs	r3, r0
 801bdd6:	001a      	movs	r2, r3
 801bdd8:	233f      	movs	r3, #63	; 0x3f
 801bdda:	4013      	ands	r3, r2
 801bddc:	b2db      	uxtb	r3, r3
 801bdde:	0018      	movs	r0, r3
 801bde0:	47a0      	blx	r4
                break;
 801bde2:	e003      	b.n	801bdec <SX1276OnDio2Irq+0x174>
                break;
 801bde4:	46c0      	nop			; (mov r8, r8)
 801bde6:	e002      	b.n	801bdee <SX1276OnDio2Irq+0x176>
                break;
 801bde8:	46c0      	nop			; (mov r8, r8)
 801bdea:	e000      	b.n	801bdee <SX1276OnDio2Irq+0x176>
                break;
 801bdec:	46c0      	nop			; (mov r8, r8)
            break;
 801bdee:	46c0      	nop			; (mov r8, r8)
    }
}
 801bdf0:	46c0      	nop			; (mov r8, r8)
 801bdf2:	46bd      	mov	sp, r7
 801bdf4:	b005      	add	sp, #20
 801bdf6:	bd90      	pop	{r4, r7, pc}
 801bdf8:	20001750 	.word	0x20001750
 801bdfc:	20001738 	.word	0x20001738
 801be00:	20000e80 	.word	0x20000e80

0801be04 <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801be04:	b580      	push	{r7, lr}
 801be06:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801be08:	4b1d      	ldr	r3, [pc, #116]	; (801be80 <SX1276OnDio3Irq+0x7c>)
 801be0a:	795b      	ldrb	r3, [r3, #5]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d031      	beq.n	801be74 <SX1276OnDio3Irq+0x70>
 801be10:	2b01      	cmp	r3, #1
 801be12:	d000      	beq.n	801be16 <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801be14:	e031      	b.n	801be7a <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801be16:	2012      	movs	r0, #18
 801be18:	f7ff f953 	bl	801b0c2 <SX1276Read>
 801be1c:	0003      	movs	r3, r0
 801be1e:	001a      	movs	r2, r3
 801be20:	2301      	movs	r3, #1
 801be22:	4013      	ands	r3, r2
 801be24:	2b01      	cmp	r3, #1
 801be26:	d112      	bne.n	801be4e <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801be28:	2105      	movs	r1, #5
 801be2a:	2012      	movs	r0, #18
 801be2c:	f7ff f938 	bl	801b0a0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801be30:	4b14      	ldr	r3, [pc, #80]	; (801be84 <SX1276OnDio3Irq+0x80>)
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d01f      	beq.n	801be78 <SX1276OnDio3Irq+0x74>
 801be38:	4b12      	ldr	r3, [pc, #72]	; (801be84 <SX1276OnDio3Irq+0x80>)
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	699b      	ldr	r3, [r3, #24]
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d01a      	beq.n	801be78 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801be42:	4b10      	ldr	r3, [pc, #64]	; (801be84 <SX1276OnDio3Irq+0x80>)
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	699b      	ldr	r3, [r3, #24]
 801be48:	2001      	movs	r0, #1
 801be4a:	4798      	blx	r3
        break;
 801be4c:	e014      	b.n	801be78 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801be4e:	2104      	movs	r1, #4
 801be50:	2012      	movs	r0, #18
 801be52:	f7ff f925 	bl	801b0a0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801be56:	4b0b      	ldr	r3, [pc, #44]	; (801be84 <SX1276OnDio3Irq+0x80>)
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d00c      	beq.n	801be78 <SX1276OnDio3Irq+0x74>
 801be5e:	4b09      	ldr	r3, [pc, #36]	; (801be84 <SX1276OnDio3Irq+0x80>)
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	699b      	ldr	r3, [r3, #24]
 801be64:	2b00      	cmp	r3, #0
 801be66:	d007      	beq.n	801be78 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801be68:	4b06      	ldr	r3, [pc, #24]	; (801be84 <SX1276OnDio3Irq+0x80>)
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	699b      	ldr	r3, [r3, #24]
 801be6e:	2000      	movs	r0, #0
 801be70:	4798      	blx	r3
        break;
 801be72:	e001      	b.n	801be78 <SX1276OnDio3Irq+0x74>
        break;
 801be74:	46c0      	nop			; (mov r8, r8)
 801be76:	e000      	b.n	801be7a <SX1276OnDio3Irq+0x76>
        break;
 801be78:	46c0      	nop			; (mov r8, r8)
    }
}
 801be7a:	46c0      	nop			; (mov r8, r8)
 801be7c:	46bd      	mov	sp, r7
 801be7e:	bd80      	pop	{r7, pc}
 801be80:	20001750 	.word	0x20001750
 801be84:	20000e80 	.word	0x20000e80

0801be88 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801be88:	b580      	push	{r7, lr}
 801be8a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801be8c:	4b0b      	ldr	r3, [pc, #44]	; (801bebc <SX1276OnDio4Irq+0x34>)
 801be8e:	795b      	ldrb	r3, [r3, #5]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d002      	beq.n	801be9a <SX1276OnDio4Irq+0x12>
 801be94:	2b01      	cmp	r3, #1
 801be96:	d00a      	beq.n	801beae <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801be98:	e00c      	b.n	801beb4 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801be9a:	4b08      	ldr	r3, [pc, #32]	; (801bebc <SX1276OnDio4Irq+0x34>)
 801be9c:	2230      	movs	r2, #48	; 0x30
 801be9e:	5c9b      	ldrb	r3, [r3, r2]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d106      	bne.n	801beb2 <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801bea4:	4b05      	ldr	r3, [pc, #20]	; (801bebc <SX1276OnDio4Irq+0x34>)
 801bea6:	2230      	movs	r2, #48	; 0x30
 801bea8:	2101      	movs	r1, #1
 801beaa:	5499      	strb	r1, [r3, r2]
        break;
 801beac:	e001      	b.n	801beb2 <SX1276OnDio4Irq+0x2a>
        break;
 801beae:	46c0      	nop			; (mov r8, r8)
 801beb0:	e000      	b.n	801beb4 <SX1276OnDio4Irq+0x2c>
        break;
 801beb2:	46c0      	nop			; (mov r8, r8)
    }
}
 801beb4:	46c0      	nop			; (mov r8, r8)
 801beb6:	46bd      	mov	sp, r7
 801beb8:	bd80      	pop	{r7, pc}
 801beba:	46c0      	nop			; (mov r8, r8)
 801bebc:	20001750 	.word	0x20001750

0801bec0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bec0:	b580      	push	{r7, lr}
 801bec2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bec4:	4b0a      	ldr	r3, [pc, #40]	; (801bef0 <UTIL_ADV_TRACE_Init+0x30>)
 801bec6:	2218      	movs	r2, #24
 801bec8:	2100      	movs	r1, #0
 801beca:	0018      	movs	r0, r3
 801becc:	f000 fbb8 	bl	801c640 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bed0:	2380      	movs	r3, #128	; 0x80
 801bed2:	009a      	lsls	r2, r3, #2
 801bed4:	4b07      	ldr	r3, [pc, #28]	; (801bef4 <UTIL_ADV_TRACE_Init+0x34>)
 801bed6:	2100      	movs	r1, #0
 801bed8:	0018      	movs	r0, r3
 801beda:	f000 fbb1 	bl	801c640 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801bede:	4b06      	ldr	r3, [pc, #24]	; (801bef8 <UTIL_ADV_TRACE_Init+0x38>)
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	4a06      	ldr	r2, [pc, #24]	; (801befc <UTIL_ADV_TRACE_Init+0x3c>)
 801bee4:	0010      	movs	r0, r2
 801bee6:	4798      	blx	r3
 801bee8:	0003      	movs	r3, r0
}
 801beea:	0018      	movs	r0, r3
 801beec:	46bd      	mov	sp, r7
 801beee:	bd80      	pop	{r7, pc}
 801bef0:	20000f84 	.word	0x20000f84
 801bef4:	20000f9c 	.word	0x20000f9c
 801bef8:	0801f14c 	.word	0x0801f14c
 801befc:	0801c181 	.word	0x0801c181

0801bf00 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801bf00:	b408      	push	{r3}
 801bf02:	b590      	push	{r4, r7, lr}
 801bf04:	b08c      	sub	sp, #48	; 0x30
 801bf06:	af00      	add	r7, sp, #0
 801bf08:	60f8      	str	r0, [r7, #12]
 801bf0a:	60b9      	str	r1, [r7, #8]
 801bf0c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801bf0e:	2316      	movs	r3, #22
 801bf10:	18fb      	adds	r3, r7, r3
 801bf12:	2200      	movs	r2, #0
 801bf14:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801bf16:	232c      	movs	r3, #44	; 0x2c
 801bf18:	18fb      	adds	r3, r7, r3
 801bf1a:	2200      	movs	r2, #0
 801bf1c:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801bf1e:	4b41      	ldr	r3, [pc, #260]	; (801c024 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bf20:	7a1b      	ldrb	r3, [r3, #8]
 801bf22:	001a      	movs	r2, r3
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	4293      	cmp	r3, r2
 801bf28:	d902      	bls.n	801bf30 <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801bf2a:	2305      	movs	r3, #5
 801bf2c:	425b      	negs	r3, r3
 801bf2e:	e072      	b.n	801c016 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801bf30:	4b3c      	ldr	r3, [pc, #240]	; (801c024 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bf32:	68db      	ldr	r3, [r3, #12]
 801bf34:	68ba      	ldr	r2, [r7, #8]
 801bf36:	4013      	ands	r3, r2
 801bf38:	68ba      	ldr	r2, [r7, #8]
 801bf3a:	429a      	cmp	r2, r3
 801bf3c:	d002      	beq.n	801bf44 <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801bf3e:	2306      	movs	r3, #6
 801bf40:	425b      	negs	r3, r3
 801bf42:	e068      	b.n	801c016 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801bf44:	4b37      	ldr	r3, [pc, #220]	; (801c024 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bf46:	685b      	ldr	r3, [r3, #4]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d00a      	beq.n	801bf62 <UTIL_ADV_TRACE_COND_FSend+0x62>
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d007      	beq.n	801bf62 <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801bf52:	4b34      	ldr	r3, [pc, #208]	; (801c024 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bf54:	685b      	ldr	r3, [r3, #4]
 801bf56:	2216      	movs	r2, #22
 801bf58:	18b9      	adds	r1, r7, r2
 801bf5a:	2218      	movs	r2, #24
 801bf5c:	18ba      	adds	r2, r7, r2
 801bf5e:	0010      	movs	r0, r2
 801bf60:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801bf62:	2340      	movs	r3, #64	; 0x40
 801bf64:	18fb      	adds	r3, r7, r3
 801bf66:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bf6c:	2180      	movs	r1, #128	; 0x80
 801bf6e:	0049      	lsls	r1, r1, #1
 801bf70:	482d      	ldr	r0, [pc, #180]	; (801c028 <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801bf72:	f001 fa13 	bl	801d39c <tiny_vsnprintf_like>
 801bf76:	0002      	movs	r2, r0
 801bf78:	242c      	movs	r4, #44	; 0x2c
 801bf7a:	193b      	adds	r3, r7, r4
 801bf7c:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801bf7e:	f000 fa23 	bl	801c3c8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801bf82:	2316      	movs	r3, #22
 801bf84:	18fb      	adds	r3, r7, r3
 801bf86:	881a      	ldrh	r2, [r3, #0]
 801bf88:	193b      	adds	r3, r7, r4
 801bf8a:	881b      	ldrh	r3, [r3, #0]
 801bf8c:	18d3      	adds	r3, r2, r3
 801bf8e:	b29b      	uxth	r3, r3
 801bf90:	2214      	movs	r2, #20
 801bf92:	18ba      	adds	r2, r7, r2
 801bf94:	0011      	movs	r1, r2
 801bf96:	0018      	movs	r0, r3
 801bf98:	f000 f97c 	bl	801c294 <TRACE_AllocateBufer>
 801bf9c:	0003      	movs	r3, r0
 801bf9e:	3301      	adds	r3, #1
 801bfa0:	d035      	beq.n	801c00e <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801bfa2:	232e      	movs	r3, #46	; 0x2e
 801bfa4:	18fb      	adds	r3, r7, r3
 801bfa6:	2200      	movs	r2, #0
 801bfa8:	801a      	strh	r2, [r3, #0]
 801bfaa:	e016      	b.n	801bfda <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801bfac:	202e      	movs	r0, #46	; 0x2e
 801bfae:	183b      	adds	r3, r7, r0
 801bfb0:	881b      	ldrh	r3, [r3, #0]
 801bfb2:	2414      	movs	r4, #20
 801bfb4:	193a      	adds	r2, r7, r4
 801bfb6:	8812      	ldrh	r2, [r2, #0]
 801bfb8:	0011      	movs	r1, r2
 801bfba:	2218      	movs	r2, #24
 801bfbc:	18ba      	adds	r2, r7, r2
 801bfbe:	5cd2      	ldrb	r2, [r2, r3]
 801bfc0:	4b1a      	ldr	r3, [pc, #104]	; (801c02c <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bfc2:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801bfc4:	193b      	adds	r3, r7, r4
 801bfc6:	881b      	ldrh	r3, [r3, #0]
 801bfc8:	3301      	adds	r3, #1
 801bfca:	b29a      	uxth	r2, r3
 801bfcc:	193b      	adds	r3, r7, r4
 801bfce:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801bfd0:	183b      	adds	r3, r7, r0
 801bfd2:	881a      	ldrh	r2, [r3, #0]
 801bfd4:	183b      	adds	r3, r7, r0
 801bfd6:	3201      	adds	r2, #1
 801bfd8:	801a      	strh	r2, [r3, #0]
 801bfda:	2316      	movs	r3, #22
 801bfdc:	18fb      	adds	r3, r7, r3
 801bfde:	881b      	ldrh	r3, [r3, #0]
 801bfe0:	222e      	movs	r2, #46	; 0x2e
 801bfe2:	18ba      	adds	r2, r7, r2
 801bfe4:	8812      	ldrh	r2, [r2, #0]
 801bfe6:	429a      	cmp	r2, r3
 801bfe8:	d3e0      	bcc.n	801bfac <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bfea:	2314      	movs	r3, #20
 801bfec:	18fb      	adds	r3, r7, r3
 801bfee:	881b      	ldrh	r3, [r3, #0]
 801bff0:	001a      	movs	r2, r3
 801bff2:	4b0e      	ldr	r3, [pc, #56]	; (801c02c <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bff4:	18d0      	adds	r0, r2, r3
 801bff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bffa:	2180      	movs	r1, #128	; 0x80
 801bffc:	0049      	lsls	r1, r1, #1
 801bffe:	f001 f9cd 	bl	801d39c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c002:	f000 f9fd 	bl	801c400 <TRACE_UnLock>

    return TRACE_Send();
 801c006:	f000 f831 	bl	801c06c <TRACE_Send>
 801c00a:	0003      	movs	r3, r0
 801c00c:	e003      	b.n	801c016 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c00e:	f000 f9f7 	bl	801c400 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c012:	2303      	movs	r3, #3
 801c014:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c016:	0018      	movs	r0, r3
 801c018:	46bd      	mov	sp, r7
 801c01a:	b00c      	add	sp, #48	; 0x30
 801c01c:	bc90      	pop	{r4, r7}
 801c01e:	bc08      	pop	{r3}
 801c020:	b001      	add	sp, #4
 801c022:	4718      	bx	r3
 801c024:	20000f84 	.word	0x20000f84
 801c028:	2000119c 	.word	0x2000119c
 801c02c:	20000f9c 	.word	0x20000f9c

0801c030 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b082      	sub	sp, #8
 801c034:	af00      	add	r7, sp, #0
 801c036:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801c038:	4b03      	ldr	r3, [pc, #12]	; (801c048 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c03a:	687a      	ldr	r2, [r7, #4]
 801c03c:	605a      	str	r2, [r3, #4]
}
 801c03e:	46c0      	nop			; (mov r8, r8)
 801c040:	46bd      	mov	sp, r7
 801c042:	b002      	add	sp, #8
 801c044:	bd80      	pop	{r7, pc}
 801c046:	46c0      	nop			; (mov r8, r8)
 801c048:	20000f84 	.word	0x20000f84

0801c04c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b082      	sub	sp, #8
 801c050:	af00      	add	r7, sp, #0
 801c052:	0002      	movs	r2, r0
 801c054:	1dfb      	adds	r3, r7, #7
 801c056:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c058:	4b03      	ldr	r3, [pc, #12]	; (801c068 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c05a:	1dfa      	adds	r2, r7, #7
 801c05c:	7812      	ldrb	r2, [r2, #0]
 801c05e:	721a      	strb	r2, [r3, #8]
}
 801c060:	46c0      	nop			; (mov r8, r8)
 801c062:	46bd      	mov	sp, r7
 801c064:	b002      	add	sp, #8
 801c066:	bd80      	pop	{r7, pc}
 801c068:	20000f84 	.word	0x20000f84

0801c06c <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c06c:	b590      	push	{r4, r7, lr}
 801c06e:	b089      	sub	sp, #36	; 0x24
 801c070:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801c072:	231f      	movs	r3, #31
 801c074:	18fb      	adds	r3, r7, r3
 801c076:	2200      	movs	r2, #0
 801c078:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801c07a:	2300      	movs	r3, #0
 801c07c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c07e:	f3ef 8310 	mrs	r3, PRIMASK
 801c082:	613b      	str	r3, [r7, #16]
  return(result);
 801c084:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801c086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c088:	b672      	cpsid	i
}
 801c08a:	46c0      	nop			; (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801c08c:	f000 f9d4 	bl	801c438 <TRACE_IsLocked>
 801c090:	1e03      	subs	r3, r0, #0
 801c092:	d160      	bne.n	801c156 <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801c094:	f000 f998 	bl	801c3c8 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c098:	4b36      	ldr	r3, [pc, #216]	; (801c174 <TRACE_Send+0x108>)
 801c09a:	8a1a      	ldrh	r2, [r3, #16]
 801c09c:	4b35      	ldr	r3, [pc, #212]	; (801c174 <TRACE_Send+0x108>)
 801c09e:	8a5b      	ldrh	r3, [r3, #18]
 801c0a0:	429a      	cmp	r2, r3
 801c0a2:	d050      	beq.n	801c146 <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c0a4:	4b33      	ldr	r3, [pc, #204]	; (801c174 <TRACE_Send+0x108>)
 801c0a6:	789b      	ldrb	r3, [r3, #2]
 801c0a8:	2b01      	cmp	r3, #1
 801c0aa:	d117      	bne.n	801c0dc <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c0ac:	4b31      	ldr	r3, [pc, #196]	; (801c174 <TRACE_Send+0x108>)
 801c0ae:	881a      	ldrh	r2, [r3, #0]
 801c0b0:	4b30      	ldr	r3, [pc, #192]	; (801c174 <TRACE_Send+0x108>)
 801c0b2:	8a1b      	ldrh	r3, [r3, #16]
 801c0b4:	1ad3      	subs	r3, r2, r3
 801c0b6:	b29a      	uxth	r2, r3
 801c0b8:	4b2e      	ldr	r3, [pc, #184]	; (801c174 <TRACE_Send+0x108>)
 801c0ba:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c0bc:	4b2d      	ldr	r3, [pc, #180]	; (801c174 <TRACE_Send+0x108>)
 801c0be:	2202      	movs	r2, #2
 801c0c0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c0c2:	4b2c      	ldr	r3, [pc, #176]	; (801c174 <TRACE_Send+0x108>)
 801c0c4:	2200      	movs	r2, #0
 801c0c6:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801c0c8:	4b2a      	ldr	r3, [pc, #168]	; (801c174 <TRACE_Send+0x108>)
 801c0ca:	8a9b      	ldrh	r3, [r3, #20]
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d105      	bne.n	801c0dc <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c0d0:	4b28      	ldr	r3, [pc, #160]	; (801c174 <TRACE_Send+0x108>)
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c0d6:	4b27      	ldr	r3, [pc, #156]	; (801c174 <TRACE_Send+0x108>)
 801c0d8:	2200      	movs	r2, #0
 801c0da:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c0dc:	4b25      	ldr	r3, [pc, #148]	; (801c174 <TRACE_Send+0x108>)
 801c0de:	789b      	ldrb	r3, [r3, #2]
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d116      	bne.n	801c112 <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c0e4:	4b23      	ldr	r3, [pc, #140]	; (801c174 <TRACE_Send+0x108>)
 801c0e6:	8a5a      	ldrh	r2, [r3, #18]
 801c0e8:	4b22      	ldr	r3, [pc, #136]	; (801c174 <TRACE_Send+0x108>)
 801c0ea:	8a1b      	ldrh	r3, [r3, #16]
 801c0ec:	429a      	cmp	r2, r3
 801c0ee:	d908      	bls.n	801c102 <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c0f0:	4b20      	ldr	r3, [pc, #128]	; (801c174 <TRACE_Send+0x108>)
 801c0f2:	8a5a      	ldrh	r2, [r3, #18]
 801c0f4:	4b1f      	ldr	r3, [pc, #124]	; (801c174 <TRACE_Send+0x108>)
 801c0f6:	8a1b      	ldrh	r3, [r3, #16]
 801c0f8:	1ad3      	subs	r3, r2, r3
 801c0fa:	b29a      	uxth	r2, r3
 801c0fc:	4b1d      	ldr	r3, [pc, #116]	; (801c174 <TRACE_Send+0x108>)
 801c0fe:	829a      	strh	r2, [r3, #20]
 801c100:	e007      	b.n	801c112 <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c102:	4b1c      	ldr	r3, [pc, #112]	; (801c174 <TRACE_Send+0x108>)
 801c104:	8a1b      	ldrh	r3, [r3, #16]
 801c106:	2280      	movs	r2, #128	; 0x80
 801c108:	0092      	lsls	r2, r2, #2
 801c10a:	1ad3      	subs	r3, r2, r3
 801c10c:	b29a      	uxth	r2, r3
 801c10e:	4b19      	ldr	r3, [pc, #100]	; (801c174 <TRACE_Send+0x108>)
 801c110:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c112:	4b18      	ldr	r3, [pc, #96]	; (801c174 <TRACE_Send+0x108>)
 801c114:	8a1b      	ldrh	r3, [r3, #16]
 801c116:	001a      	movs	r2, r3
 801c118:	4b17      	ldr	r3, [pc, #92]	; (801c178 <TRACE_Send+0x10c>)
 801c11a:	18d3      	adds	r3, r2, r3
 801c11c:	61bb      	str	r3, [r7, #24]
 801c11e:	697b      	ldr	r3, [r7, #20]
 801c120:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	f383 8810 	msr	PRIMASK, r3
}
 801c128:	46c0      	nop			; (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801c12a:	f7e9 f831 	bl	8005190 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c12e:	4b13      	ldr	r3, [pc, #76]	; (801c17c <TRACE_Send+0x110>)
 801c130:	68db      	ldr	r3, [r3, #12]
 801c132:	4a10      	ldr	r2, [pc, #64]	; (801c174 <TRACE_Send+0x108>)
 801c134:	8a91      	ldrh	r1, [r2, #20]
 801c136:	221f      	movs	r2, #31
 801c138:	18bc      	adds	r4, r7, r2
 801c13a:	69ba      	ldr	r2, [r7, #24]
 801c13c:	0010      	movs	r0, r2
 801c13e:	4798      	blx	r3
 801c140:	0003      	movs	r3, r0
 801c142:	7023      	strb	r3, [r4, #0]
 801c144:	e00d      	b.n	801c162 <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801c146:	f000 f95b 	bl	801c400 <TRACE_UnLock>
 801c14a:	697b      	ldr	r3, [r7, #20]
 801c14c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c14e:	68bb      	ldr	r3, [r7, #8]
 801c150:	f383 8810 	msr	PRIMASK, r3
}
 801c154:	e005      	b.n	801c162 <TRACE_Send+0xf6>
 801c156:	697b      	ldr	r3, [r7, #20]
 801c158:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	f383 8810 	msr	PRIMASK, r3
}
 801c160:	46c0      	nop			; (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801c162:	231f      	movs	r3, #31
 801c164:	18fb      	adds	r3, r7, r3
 801c166:	781b      	ldrb	r3, [r3, #0]
 801c168:	b25b      	sxtb	r3, r3
}
 801c16a:	0018      	movs	r0, r3
 801c16c:	46bd      	mov	sp, r7
 801c16e:	b009      	add	sp, #36	; 0x24
 801c170:	bd90      	pop	{r4, r7, pc}
 801c172:	46c0      	nop			; (mov r8, r8)
 801c174:	20000f84 	.word	0x20000f84
 801c178:	20000f9c 	.word	0x20000f9c
 801c17c:	0801f14c 	.word	0x0801f14c

0801c180 <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801c180:	b580      	push	{r7, lr}
 801c182:	b086      	sub	sp, #24
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c188:	f3ef 8310 	mrs	r3, PRIMASK
 801c18c:	613b      	str	r3, [r7, #16]
  return(result);
 801c18e:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c190:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c192:	b672      	cpsid	i
}
 801c194:	46c0      	nop			; (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c196:	4b3c      	ldr	r3, [pc, #240]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c198:	789b      	ldrb	r3, [r3, #2]
 801c19a:	2b02      	cmp	r3, #2
 801c19c:	d106      	bne.n	801c1ac <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c19e:	4b3a      	ldr	r3, [pc, #232]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1a0:	2200      	movs	r2, #0
 801c1a2:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c1a4:	4b38      	ldr	r3, [pc, #224]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1a6:	2200      	movs	r2, #0
 801c1a8:	821a      	strh	r2, [r3, #16]
 801c1aa:	e00a      	b.n	801c1c2 <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c1ac:	4b36      	ldr	r3, [pc, #216]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1ae:	8a1a      	ldrh	r2, [r3, #16]
 801c1b0:	4b35      	ldr	r3, [pc, #212]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1b2:	8a9b      	ldrh	r3, [r3, #20]
 801c1b4:	18d3      	adds	r3, r2, r3
 801c1b6:	b29b      	uxth	r3, r3
 801c1b8:	05db      	lsls	r3, r3, #23
 801c1ba:	0ddb      	lsrs	r3, r3, #23
 801c1bc:	b29a      	uxth	r2, r3
 801c1be:	4b32      	ldr	r3, [pc, #200]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1c0:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c1c2:	4b31      	ldr	r3, [pc, #196]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1c4:	8a1a      	ldrh	r2, [r3, #16]
 801c1c6:	4b30      	ldr	r3, [pc, #192]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1c8:	8a5b      	ldrh	r3, [r3, #18]
 801c1ca:	429a      	cmp	r2, r3
 801c1cc:	d04c      	beq.n	801c268 <TRACE_TxCpltCallback+0xe8>
 801c1ce:	4b2e      	ldr	r3, [pc, #184]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1d0:	8adb      	ldrh	r3, [r3, #22]
 801c1d2:	2b01      	cmp	r3, #1
 801c1d4:	d148      	bne.n	801c268 <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c1d6:	4b2c      	ldr	r3, [pc, #176]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1d8:	789b      	ldrb	r3, [r3, #2]
 801c1da:	2b01      	cmp	r3, #1
 801c1dc:	d117      	bne.n	801c20e <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c1de:	4b2a      	ldr	r3, [pc, #168]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1e0:	881a      	ldrh	r2, [r3, #0]
 801c1e2:	4b29      	ldr	r3, [pc, #164]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1e4:	8a1b      	ldrh	r3, [r3, #16]
 801c1e6:	1ad3      	subs	r3, r2, r3
 801c1e8:	b29a      	uxth	r2, r3
 801c1ea:	4b27      	ldr	r3, [pc, #156]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1ec:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c1ee:	4b26      	ldr	r3, [pc, #152]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1f0:	2202      	movs	r2, #2
 801c1f2:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c1f4:	4b24      	ldr	r3, [pc, #144]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1f6:	2200      	movs	r2, #0
 801c1f8:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801c1fa:	4b23      	ldr	r3, [pc, #140]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c1fc:	8a9b      	ldrh	r3, [r3, #20]
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d105      	bne.n	801c20e <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c202:	4b21      	ldr	r3, [pc, #132]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c204:	2200      	movs	r2, #0
 801c206:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c208:	4b1f      	ldr	r3, [pc, #124]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c20a:	2200      	movs	r2, #0
 801c20c:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c20e:	4b1e      	ldr	r3, [pc, #120]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c210:	789b      	ldrb	r3, [r3, #2]
 801c212:	2b00      	cmp	r3, #0
 801c214:	d116      	bne.n	801c244 <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c216:	4b1c      	ldr	r3, [pc, #112]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c218:	8a5a      	ldrh	r2, [r3, #18]
 801c21a:	4b1b      	ldr	r3, [pc, #108]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c21c:	8a1b      	ldrh	r3, [r3, #16]
 801c21e:	429a      	cmp	r2, r3
 801c220:	d908      	bls.n	801c234 <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c222:	4b19      	ldr	r3, [pc, #100]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c224:	8a5a      	ldrh	r2, [r3, #18]
 801c226:	4b18      	ldr	r3, [pc, #96]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c228:	8a1b      	ldrh	r3, [r3, #16]
 801c22a:	1ad3      	subs	r3, r2, r3
 801c22c:	b29a      	uxth	r2, r3
 801c22e:	4b16      	ldr	r3, [pc, #88]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c230:	829a      	strh	r2, [r3, #20]
 801c232:	e007      	b.n	801c244 <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c234:	4b14      	ldr	r3, [pc, #80]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c236:	8a1b      	ldrh	r3, [r3, #16]
 801c238:	2280      	movs	r2, #128	; 0x80
 801c23a:	0092      	lsls	r2, r2, #2
 801c23c:	1ad3      	subs	r3, r2, r3
 801c23e:	b29a      	uxth	r2, r3
 801c240:	4b11      	ldr	r3, [pc, #68]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c242:	829a      	strh	r2, [r3, #20]
 801c244:	697b      	ldr	r3, [r7, #20]
 801c246:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	f383 8810 	msr	PRIMASK, r3
}
 801c24e:	46c0      	nop			; (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801c250:	4b0e      	ldr	r3, [pc, #56]	; (801c28c <TRACE_TxCpltCallback+0x10c>)
 801c252:	68db      	ldr	r3, [r3, #12]
 801c254:	4a0c      	ldr	r2, [pc, #48]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c256:	8a12      	ldrh	r2, [r2, #16]
 801c258:	0011      	movs	r1, r2
 801c25a:	4a0d      	ldr	r2, [pc, #52]	; (801c290 <TRACE_TxCpltCallback+0x110>)
 801c25c:	1888      	adds	r0, r1, r2
 801c25e:	4a0a      	ldr	r2, [pc, #40]	; (801c288 <TRACE_TxCpltCallback+0x108>)
 801c260:	8a92      	ldrh	r2, [r2, #20]
 801c262:	0011      	movs	r1, r2
 801c264:	4798      	blx	r3
 801c266:	e00a      	b.n	801c27e <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801c268:	f7e8 ff9b 	bl	80051a2 <UTIL_ADV_TRACE_PostSendHook>
 801c26c:	697b      	ldr	r3, [r7, #20]
 801c26e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c270:	68bb      	ldr	r3, [r7, #8]
 801c272:	f383 8810 	msr	PRIMASK, r3
}
 801c276:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801c278:	f000 f8c2 	bl	801c400 <TRACE_UnLock>
  }
}
 801c27c:	46c0      	nop			; (mov r8, r8)
 801c27e:	46c0      	nop			; (mov r8, r8)
 801c280:	46bd      	mov	sp, r7
 801c282:	b006      	add	sp, #24
 801c284:	bd80      	pop	{r7, pc}
 801c286:	46c0      	nop			; (mov r8, r8)
 801c288:	20000f84 	.word	0x20000f84
 801c28c:	0801f14c 	.word	0x0801f14c
 801c290:	20000f9c 	.word	0x20000f9c

0801c294 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c294:	b580      	push	{r7, lr}
 801c296:	b086      	sub	sp, #24
 801c298:	af00      	add	r7, sp, #0
 801c29a:	0002      	movs	r2, r0
 801c29c:	6039      	str	r1, [r7, #0]
 801c29e:	1dbb      	adds	r3, r7, #6
 801c2a0:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801c2a2:	2314      	movs	r3, #20
 801c2a4:	18fb      	adds	r3, r7, r3
 801c2a6:	2201      	movs	r2, #1
 801c2a8:	4252      	negs	r2, r2
 801c2aa:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2ac:	f3ef 8310 	mrs	r3, PRIMASK
 801c2b0:	60fb      	str	r3, [r7, #12]
  return(result);
 801c2b2:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c2b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2b6:	b672      	cpsid	i
}
 801c2b8:	46c0      	nop			; (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c2ba:	4b42      	ldr	r3, [pc, #264]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c2bc:	8a5a      	ldrh	r2, [r3, #18]
 801c2be:	4b41      	ldr	r3, [pc, #260]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c2c0:	8a1b      	ldrh	r3, [r3, #16]
 801c2c2:	429a      	cmp	r2, r3
 801c2c4:	d123      	bne.n	801c30e <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c2c6:	4b3f      	ldr	r3, [pc, #252]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c2c8:	8a5a      	ldrh	r2, [r3, #18]
 801c2ca:	2016      	movs	r0, #22
 801c2cc:	183b      	adds	r3, r7, r0
 801c2ce:	2180      	movs	r1, #128	; 0x80
 801c2d0:	0089      	lsls	r1, r1, #2
 801c2d2:	1a8a      	subs	r2, r1, r2
 801c2d4:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c2d6:	1dba      	adds	r2, r7, #6
 801c2d8:	0001      	movs	r1, r0
 801c2da:	187b      	adds	r3, r7, r1
 801c2dc:	8812      	ldrh	r2, [r2, #0]
 801c2de:	881b      	ldrh	r3, [r3, #0]
 801c2e0:	429a      	cmp	r2, r3
 801c2e2:	d346      	bcc.n	801c372 <TRACE_AllocateBufer+0xde>
 801c2e4:	4b37      	ldr	r3, [pc, #220]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c2e6:	8a1b      	ldrh	r3, [r3, #16]
 801c2e8:	1dba      	adds	r2, r7, #6
 801c2ea:	8812      	ldrh	r2, [r2, #0]
 801c2ec:	429a      	cmp	r2, r3
 801c2ee:	d240      	bcs.n	801c372 <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c2f0:	4b34      	ldr	r3, [pc, #208]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c2f2:	2201      	movs	r2, #1
 801c2f4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c2f6:	4b33      	ldr	r3, [pc, #204]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c2f8:	8a5a      	ldrh	r2, [r3, #18]
 801c2fa:	4b32      	ldr	r3, [pc, #200]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c2fc:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c2fe:	187b      	adds	r3, r7, r1
 801c300:	4a30      	ldr	r2, [pc, #192]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c302:	8a12      	ldrh	r2, [r2, #16]
 801c304:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c306:	4b2f      	ldr	r3, [pc, #188]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c308:	2200      	movs	r2, #0
 801c30a:	825a      	strh	r2, [r3, #18]
 801c30c:	e031      	b.n	801c372 <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c30e:	4b2d      	ldr	r3, [pc, #180]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c310:	8a5a      	ldrh	r2, [r3, #18]
 801c312:	4b2c      	ldr	r3, [pc, #176]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c314:	8a1b      	ldrh	r3, [r3, #16]
 801c316:	429a      	cmp	r2, r3
 801c318:	d923      	bls.n	801c362 <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c31a:	4b2a      	ldr	r3, [pc, #168]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c31c:	8a5a      	ldrh	r2, [r3, #18]
 801c31e:	2016      	movs	r0, #22
 801c320:	183b      	adds	r3, r7, r0
 801c322:	2180      	movs	r1, #128	; 0x80
 801c324:	0089      	lsls	r1, r1, #2
 801c326:	1a8a      	subs	r2, r1, r2
 801c328:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c32a:	1dba      	adds	r2, r7, #6
 801c32c:	0001      	movs	r1, r0
 801c32e:	187b      	adds	r3, r7, r1
 801c330:	8812      	ldrh	r2, [r2, #0]
 801c332:	881b      	ldrh	r3, [r3, #0]
 801c334:	429a      	cmp	r2, r3
 801c336:	d31c      	bcc.n	801c372 <TRACE_AllocateBufer+0xde>
 801c338:	4b22      	ldr	r3, [pc, #136]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c33a:	8a1b      	ldrh	r3, [r3, #16]
 801c33c:	1dba      	adds	r2, r7, #6
 801c33e:	8812      	ldrh	r2, [r2, #0]
 801c340:	429a      	cmp	r2, r3
 801c342:	d216      	bcs.n	801c372 <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c344:	4b1f      	ldr	r3, [pc, #124]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c346:	2201      	movs	r2, #1
 801c348:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c34a:	4b1e      	ldr	r3, [pc, #120]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c34c:	8a5a      	ldrh	r2, [r3, #18]
 801c34e:	4b1d      	ldr	r3, [pc, #116]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c350:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c352:	187b      	adds	r3, r7, r1
 801c354:	4a1b      	ldr	r2, [pc, #108]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c356:	8a12      	ldrh	r2, [r2, #16]
 801c358:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c35a:	4b1a      	ldr	r3, [pc, #104]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c35c:	2200      	movs	r2, #0
 801c35e:	825a      	strh	r2, [r3, #18]
 801c360:	e007      	b.n	801c372 <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c362:	4b18      	ldr	r3, [pc, #96]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c364:	8a19      	ldrh	r1, [r3, #16]
 801c366:	4b17      	ldr	r3, [pc, #92]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c368:	8a5a      	ldrh	r2, [r3, #18]
 801c36a:	2316      	movs	r3, #22
 801c36c:	18fb      	adds	r3, r7, r3
 801c36e:	1a8a      	subs	r2, r1, r2
 801c370:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801c372:	2316      	movs	r3, #22
 801c374:	18fa      	adds	r2, r7, r3
 801c376:	1dbb      	adds	r3, r7, #6
 801c378:	8812      	ldrh	r2, [r2, #0]
 801c37a:	881b      	ldrh	r3, [r3, #0]
 801c37c:	429a      	cmp	r2, r3
 801c37e:	d912      	bls.n	801c3a6 <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c380:	4b10      	ldr	r3, [pc, #64]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c382:	8a5a      	ldrh	r2, [r3, #18]
 801c384:	683b      	ldr	r3, [r7, #0]
 801c386:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c388:	4b0e      	ldr	r3, [pc, #56]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c38a:	8a5a      	ldrh	r2, [r3, #18]
 801c38c:	1dbb      	adds	r3, r7, #6
 801c38e:	881b      	ldrh	r3, [r3, #0]
 801c390:	18d3      	adds	r3, r2, r3
 801c392:	b29b      	uxth	r3, r3
 801c394:	05db      	lsls	r3, r3, #23
 801c396:	0ddb      	lsrs	r3, r3, #23
 801c398:	b29a      	uxth	r2, r3
 801c39a:	4b0a      	ldr	r3, [pc, #40]	; (801c3c4 <TRACE_AllocateBufer+0x130>)
 801c39c:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c39e:	2314      	movs	r3, #20
 801c3a0:	18fb      	adds	r3, r7, r3
 801c3a2:	2200      	movs	r2, #0
 801c3a4:	801a      	strh	r2, [r3, #0]
 801c3a6:	693b      	ldr	r3, [r7, #16]
 801c3a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3aa:	68bb      	ldr	r3, [r7, #8]
 801c3ac:	f383 8810 	msr	PRIMASK, r3
}
 801c3b0:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801c3b2:	2314      	movs	r3, #20
 801c3b4:	18fb      	adds	r3, r7, r3
 801c3b6:	2200      	movs	r2, #0
 801c3b8:	5e9b      	ldrsh	r3, [r3, r2]
}
 801c3ba:	0018      	movs	r0, r3
 801c3bc:	46bd      	mov	sp, r7
 801c3be:	b006      	add	sp, #24
 801c3c0:	bd80      	pop	{r7, pc}
 801c3c2:	46c0      	nop			; (mov r8, r8)
 801c3c4:	20000f84 	.word	0x20000f84

0801c3c8 <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801c3c8:	b580      	push	{r7, lr}
 801c3ca:	b084      	sub	sp, #16
 801c3cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3ce:	f3ef 8310 	mrs	r3, PRIMASK
 801c3d2:	607b      	str	r3, [r7, #4]
  return(result);
 801c3d4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c3d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c3d8:	b672      	cpsid	i
}
 801c3da:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801c3dc:	4b07      	ldr	r3, [pc, #28]	; (801c3fc <TRACE_Lock+0x34>)
 801c3de:	8adb      	ldrh	r3, [r3, #22]
 801c3e0:	3301      	adds	r3, #1
 801c3e2:	b29a      	uxth	r2, r3
 801c3e4:	4b05      	ldr	r3, [pc, #20]	; (801c3fc <TRACE_Lock+0x34>)
 801c3e6:	82da      	strh	r2, [r3, #22]
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3ec:	68bb      	ldr	r3, [r7, #8]
 801c3ee:	f383 8810 	msr	PRIMASK, r3
}
 801c3f2:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c3f4:	46c0      	nop			; (mov r8, r8)
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	b004      	add	sp, #16
 801c3fa:	bd80      	pop	{r7, pc}
 801c3fc:	20000f84 	.word	0x20000f84

0801c400 <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801c400:	b580      	push	{r7, lr}
 801c402:	b084      	sub	sp, #16
 801c404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c406:	f3ef 8310 	mrs	r3, PRIMASK
 801c40a:	607b      	str	r3, [r7, #4]
  return(result);
 801c40c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c40e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c410:	b672      	cpsid	i
}
 801c412:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801c414:	4b07      	ldr	r3, [pc, #28]	; (801c434 <TRACE_UnLock+0x34>)
 801c416:	8adb      	ldrh	r3, [r3, #22]
 801c418:	3b01      	subs	r3, #1
 801c41a:	b29a      	uxth	r2, r3
 801c41c:	4b05      	ldr	r3, [pc, #20]	; (801c434 <TRACE_UnLock+0x34>)
 801c41e:	82da      	strh	r2, [r3, #22]
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c424:	68bb      	ldr	r3, [r7, #8]
 801c426:	f383 8810 	msr	PRIMASK, r3
}
 801c42a:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c42c:	46c0      	nop			; (mov r8, r8)
 801c42e:	46bd      	mov	sp, r7
 801c430:	b004      	add	sp, #16
 801c432:	bd80      	pop	{r7, pc}
 801c434:	20000f84 	.word	0x20000f84

0801c438 <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801c438:	b580      	push	{r7, lr}
 801c43a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c43c:	4b03      	ldr	r3, [pc, #12]	; (801c44c <TRACE_IsLocked+0x14>)
 801c43e:	8adb      	ldrh	r3, [r3, #22]
 801c440:	1e5a      	subs	r2, r3, #1
 801c442:	4193      	sbcs	r3, r2
 801c444:	b2db      	uxtb	r3, r3
}
 801c446:	0018      	movs	r0, r3
 801c448:	46bd      	mov	sp, r7
 801c44a:	bd80      	pop	{r7, pc}
 801c44c:	20000f84 	.word	0x20000f84

0801c450 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c450:	b580      	push	{r7, lr}
 801c452:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c454:	4b04      	ldr	r3, [pc, #16]	; (801c468 <UTIL_LPM_Init+0x18>)
 801c456:	2200      	movs	r2, #0
 801c458:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c45a:	4b04      	ldr	r3, [pc, #16]	; (801c46c <UTIL_LPM_Init+0x1c>)
 801c45c:	2200      	movs	r2, #0
 801c45e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c460:	46c0      	nop			; (mov r8, r8)
 801c462:	46bd      	mov	sp, r7
 801c464:	bd80      	pop	{r7, pc}
 801c466:	46c0      	nop			; (mov r8, r8)
 801c468:	2000129c 	.word	0x2000129c
 801c46c:	200012a0 	.word	0x200012a0

0801c470 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b086      	sub	sp, #24
 801c474:	af00      	add	r7, sp, #0
 801c476:	6078      	str	r0, [r7, #4]
 801c478:	000a      	movs	r2, r1
 801c47a:	1cfb      	adds	r3, r7, #3
 801c47c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c47e:	f3ef 8310 	mrs	r3, PRIMASK
 801c482:	613b      	str	r3, [r7, #16]
  return(result);
 801c484:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c486:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c488:	b672      	cpsid	i
}
 801c48a:	46c0      	nop			; (mov r8, r8)
  
  switch( state )
 801c48c:	1cfb      	adds	r3, r7, #3
 801c48e:	781b      	ldrb	r3, [r3, #0]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d008      	beq.n	801c4a6 <UTIL_LPM_SetStopMode+0x36>
 801c494:	2b01      	cmp	r3, #1
 801c496:	d10e      	bne.n	801c4b6 <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c498:	4b0c      	ldr	r3, [pc, #48]	; (801c4cc <UTIL_LPM_SetStopMode+0x5c>)
 801c49a:	681a      	ldr	r2, [r3, #0]
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	431a      	orrs	r2, r3
 801c4a0:	4b0a      	ldr	r3, [pc, #40]	; (801c4cc <UTIL_LPM_SetStopMode+0x5c>)
 801c4a2:	601a      	str	r2, [r3, #0]
      break;
 801c4a4:	e008      	b.n	801c4b8 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	43da      	mvns	r2, r3
 801c4aa:	4b08      	ldr	r3, [pc, #32]	; (801c4cc <UTIL_LPM_SetStopMode+0x5c>)
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	401a      	ands	r2, r3
 801c4b0:	4b06      	ldr	r3, [pc, #24]	; (801c4cc <UTIL_LPM_SetStopMode+0x5c>)
 801c4b2:	601a      	str	r2, [r3, #0]
      break;
 801c4b4:	e000      	b.n	801c4b8 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801c4b6:	46c0      	nop			; (mov r8, r8)
 801c4b8:	697b      	ldr	r3, [r7, #20]
 801c4ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	f383 8810 	msr	PRIMASK, r3
}
 801c4c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c4c4:	46c0      	nop			; (mov r8, r8)
 801c4c6:	46bd      	mov	sp, r7
 801c4c8:	b006      	add	sp, #24
 801c4ca:	bd80      	pop	{r7, pc}
 801c4cc:	2000129c 	.word	0x2000129c

0801c4d0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c4d0:	b580      	push	{r7, lr}
 801c4d2:	b086      	sub	sp, #24
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
 801c4d8:	000a      	movs	r2, r1
 801c4da:	1cfb      	adds	r3, r7, #3
 801c4dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4de:	f3ef 8310 	mrs	r3, PRIMASK
 801c4e2:	613b      	str	r3, [r7, #16]
  return(result);
 801c4e4:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c4e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4e8:	b672      	cpsid	i
}
 801c4ea:	46c0      	nop			; (mov r8, r8)
  
  switch(state)
 801c4ec:	1cfb      	adds	r3, r7, #3
 801c4ee:	781b      	ldrb	r3, [r3, #0]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d008      	beq.n	801c506 <UTIL_LPM_SetOffMode+0x36>
 801c4f4:	2b01      	cmp	r3, #1
 801c4f6:	d10e      	bne.n	801c516 <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c4f8:	4b0c      	ldr	r3, [pc, #48]	; (801c52c <UTIL_LPM_SetOffMode+0x5c>)
 801c4fa:	681a      	ldr	r2, [r3, #0]
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	431a      	orrs	r2, r3
 801c500:	4b0a      	ldr	r3, [pc, #40]	; (801c52c <UTIL_LPM_SetOffMode+0x5c>)
 801c502:	601a      	str	r2, [r3, #0]
      break;
 801c504:	e008      	b.n	801c518 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	43da      	mvns	r2, r3
 801c50a:	4b08      	ldr	r3, [pc, #32]	; (801c52c <UTIL_LPM_SetOffMode+0x5c>)
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	401a      	ands	r2, r3
 801c510:	4b06      	ldr	r3, [pc, #24]	; (801c52c <UTIL_LPM_SetOffMode+0x5c>)
 801c512:	601a      	str	r2, [r3, #0]
      break;
 801c514:	e000      	b.n	801c518 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801c516:	46c0      	nop			; (mov r8, r8)
 801c518:	697b      	ldr	r3, [r7, #20]
 801c51a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	f383 8810 	msr	PRIMASK, r3
}
 801c522:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c524:	46c0      	nop			; (mov r8, r8)
 801c526:	46bd      	mov	sp, r7
 801c528:	b006      	add	sp, #24
 801c52a:	bd80      	pop	{r7, pc}
 801c52c:	200012a0 	.word	0x200012a0

0801c530 <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801c530:	b580      	push	{r7, lr}
 801c532:	b084      	sub	sp, #16
 801c534:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c536:	f3ef 8310 	mrs	r3, PRIMASK
 801c53a:	607b      	str	r3, [r7, #4]
  return(result);
 801c53c:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c53e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801c540:	b672      	cpsid	i
}
 801c542:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c544:	4b11      	ldr	r3, [pc, #68]	; (801c58c <UTIL_LPM_GetMode+0x5c>)
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d004      	beq.n	801c556 <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801c54c:	230f      	movs	r3, #15
 801c54e:	18fb      	adds	r3, r7, r3
 801c550:	2200      	movs	r2, #0
 801c552:	701a      	strb	r2, [r3, #0]
 801c554:	e00c      	b.n	801c570 <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c556:	4b0e      	ldr	r3, [pc, #56]	; (801c590 <UTIL_LPM_GetMode+0x60>)
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d004      	beq.n	801c568 <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801c55e:	230f      	movs	r3, #15
 801c560:	18fb      	adds	r3, r7, r3
 801c562:	2201      	movs	r2, #1
 801c564:	701a      	strb	r2, [r3, #0]
 801c566:	e003      	b.n	801c570 <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801c568:	230f      	movs	r3, #15
 801c56a:	18fb      	adds	r3, r7, r3
 801c56c:	2202      	movs	r2, #2
 801c56e:	701a      	strb	r2, [r3, #0]
 801c570:	68bb      	ldr	r3, [r7, #8]
 801c572:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c574:	683b      	ldr	r3, [r7, #0]
 801c576:	f383 8810 	msr	PRIMASK, r3
}
 801c57a:	46c0      	nop			; (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801c57c:	230f      	movs	r3, #15
 801c57e:	18fb      	adds	r3, r7, r3
 801c580:	781b      	ldrb	r3, [r3, #0]
}
 801c582:	0018      	movs	r0, r3
 801c584:	46bd      	mov	sp, r7
 801c586:	b004      	add	sp, #16
 801c588:	bd80      	pop	{r7, pc}
 801c58a:	46c0      	nop			; (mov r8, r8)
 801c58c:	2000129c 	.word	0x2000129c
 801c590:	200012a0 	.word	0x200012a0

0801c594 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b084      	sub	sp, #16
 801c598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c59a:	f3ef 8310 	mrs	r3, PRIMASK
 801c59e:	60bb      	str	r3, [r7, #8]
  return(result);
 801c5a0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c5a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5a4:	b672      	cpsid	i
}
 801c5a6:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c5a8:	4b12      	ldr	r3, [pc, #72]	; (801c5f4 <UTIL_LPM_EnterLowPower+0x60>)
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d006      	beq.n	801c5be <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c5b0:	4b11      	ldr	r3, [pc, #68]	; (801c5f8 <UTIL_LPM_EnterLowPower+0x64>)
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c5b6:	4b10      	ldr	r3, [pc, #64]	; (801c5f8 <UTIL_LPM_EnterLowPower+0x64>)
 801c5b8:	685b      	ldr	r3, [r3, #4]
 801c5ba:	4798      	blx	r3
 801c5bc:	e010      	b.n	801c5e0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c5be:	4b0f      	ldr	r3, [pc, #60]	; (801c5fc <UTIL_LPM_EnterLowPower+0x68>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d006      	beq.n	801c5d4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c5c6:	4b0c      	ldr	r3, [pc, #48]	; (801c5f8 <UTIL_LPM_EnterLowPower+0x64>)
 801c5c8:	689b      	ldr	r3, [r3, #8]
 801c5ca:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c5cc:	4b0a      	ldr	r3, [pc, #40]	; (801c5f8 <UTIL_LPM_EnterLowPower+0x64>)
 801c5ce:	68db      	ldr	r3, [r3, #12]
 801c5d0:	4798      	blx	r3
 801c5d2:	e005      	b.n	801c5e0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c5d4:	4b08      	ldr	r3, [pc, #32]	; (801c5f8 <UTIL_LPM_EnterLowPower+0x64>)
 801c5d6:	691b      	ldr	r3, [r3, #16]
 801c5d8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c5da:	4b07      	ldr	r3, [pc, #28]	; (801c5f8 <UTIL_LPM_EnterLowPower+0x64>)
 801c5dc:	695b      	ldr	r3, [r3, #20]
 801c5de:	4798      	blx	r3
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	f383 8810 	msr	PRIMASK, r3
}
 801c5ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c5ec:	46c0      	nop			; (mov r8, r8)
 801c5ee:	46bd      	mov	sp, r7
 801c5f0:	b004      	add	sp, #16
 801c5f2:	bd80      	pop	{r7, pc}
 801c5f4:	2000129c 	.word	0x2000129c
 801c5f8:	0801f128 	.word	0x0801f128
 801c5fc:	200012a0 	.word	0x200012a0

0801c600 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c600:	b580      	push	{r7, lr}
 801c602:	b086      	sub	sp, #24
 801c604:	af00      	add	r7, sp, #0
 801c606:	60f8      	str	r0, [r7, #12]
 801c608:	60b9      	str	r1, [r7, #8]
 801c60a:	1dbb      	adds	r3, r7, #6
 801c60c:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c612:	68bb      	ldr	r3, [r7, #8]
 801c614:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c616:	e007      	b.n	801c628 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c618:	693a      	ldr	r2, [r7, #16]
 801c61a:	1c53      	adds	r3, r2, #1
 801c61c:	613b      	str	r3, [r7, #16]
 801c61e:	697b      	ldr	r3, [r7, #20]
 801c620:	1c59      	adds	r1, r3, #1
 801c622:	6179      	str	r1, [r7, #20]
 801c624:	7812      	ldrb	r2, [r2, #0]
 801c626:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c628:	1dbb      	adds	r3, r7, #6
 801c62a:	881b      	ldrh	r3, [r3, #0]
 801c62c:	1dba      	adds	r2, r7, #6
 801c62e:	1e59      	subs	r1, r3, #1
 801c630:	8011      	strh	r1, [r2, #0]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d1f0      	bne.n	801c618 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c636:	46c0      	nop			; (mov r8, r8)
 801c638:	46c0      	nop			; (mov r8, r8)
 801c63a:	46bd      	mov	sp, r7
 801c63c:	b006      	add	sp, #24
 801c63e:	bd80      	pop	{r7, pc}

0801c640 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c640:	b580      	push	{r7, lr}
 801c642:	b084      	sub	sp, #16
 801c644:	af00      	add	r7, sp, #0
 801c646:	6078      	str	r0, [r7, #4]
 801c648:	0008      	movs	r0, r1
 801c64a:	0011      	movs	r1, r2
 801c64c:	1cfb      	adds	r3, r7, #3
 801c64e:	1c02      	adds	r2, r0, #0
 801c650:	701a      	strb	r2, [r3, #0]
 801c652:	003b      	movs	r3, r7
 801c654:	1c0a      	adds	r2, r1, #0
 801c656:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c65c:	e005      	b.n	801c66a <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	1c5a      	adds	r2, r3, #1
 801c662:	60fa      	str	r2, [r7, #12]
 801c664:	1cfa      	adds	r2, r7, #3
 801c666:	7812      	ldrb	r2, [r2, #0]
 801c668:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c66a:	003b      	movs	r3, r7
 801c66c:	881b      	ldrh	r3, [r3, #0]
 801c66e:	003a      	movs	r2, r7
 801c670:	1e59      	subs	r1, r3, #1
 801c672:	8011      	strh	r1, [r2, #0]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d1f2      	bne.n	801c65e <UTIL_MEM_set_8+0x1e>
  }
}
 801c678:	46c0      	nop			; (mov r8, r8)
 801c67a:	46c0      	nop			; (mov r8, r8)
 801c67c:	46bd      	mov	sp, r7
 801c67e:	b004      	add	sp, #16
 801c680:	bd80      	pop	{r7, pc}
	...

0801c684 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c684:	b580      	push	{r7, lr}
 801c686:	b08c      	sub	sp, #48	; 0x30
 801c688:	af00      	add	r7, sp, #0
 801c68a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c68c:	4b66      	ldr	r3, [pc, #408]	; (801c828 <UTIL_SEQ_Run+0x1a4>)
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c692:	4b65      	ldr	r3, [pc, #404]	; (801c828 <UTIL_SEQ_Run+0x1a4>)
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	687a      	ldr	r2, [r7, #4]
 801c698:	401a      	ands	r2, r3
 801c69a:	4b63      	ldr	r3, [pc, #396]	; (801c828 <UTIL_SEQ_Run+0x1a4>)
 801c69c:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c69e:	e086      	b.n	801c7ae <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801c6a0:	2300      	movs	r3, #0
 801c6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c6a4:	e002      	b.n	801c6ac <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801c6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6a8:	3301      	adds	r3, #1
 801c6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c6ac:	4b5f      	ldr	r3, [pc, #380]	; (801c82c <UTIL_SEQ_Run+0x1a8>)
 801c6ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c6b0:	00d2      	lsls	r2, r2, #3
 801c6b2:	58d2      	ldr	r2, [r2, r3]
 801c6b4:	4b5e      	ldr	r3, [pc, #376]	; (801c830 <UTIL_SEQ_Run+0x1ac>)
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	401a      	ands	r2, r3
 801c6ba:	4b5b      	ldr	r3, [pc, #364]	; (801c828 <UTIL_SEQ_Run+0x1a4>)
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	4013      	ands	r3, r2
 801c6c0:	d0f1      	beq.n	801c6a6 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801c6c2:	4b5a      	ldr	r3, [pc, #360]	; (801c82c <UTIL_SEQ_Run+0x1a8>)
 801c6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c6c6:	00d2      	lsls	r2, r2, #3
 801c6c8:	58d2      	ldr	r2, [r2, r3]
 801c6ca:	4b59      	ldr	r3, [pc, #356]	; (801c830 <UTIL_SEQ_Run+0x1ac>)
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	401a      	ands	r2, r3
 801c6d0:	4b55      	ldr	r3, [pc, #340]	; (801c828 <UTIL_SEQ_Run+0x1a4>)
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	4013      	ands	r3, r2
 801c6d6:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c6d8:	4a54      	ldr	r2, [pc, #336]	; (801c82c <UTIL_SEQ_Run+0x1a8>)
 801c6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6dc:	00db      	lsls	r3, r3, #3
 801c6de:	18d3      	adds	r3, r2, r3
 801c6e0:	3304      	adds	r3, #4
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c6e6:	4013      	ands	r3, r2
 801c6e8:	d107      	bne.n	801c6fa <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c6ea:	4a50      	ldr	r2, [pc, #320]	; (801c82c <UTIL_SEQ_Run+0x1a8>)
 801c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6ee:	00db      	lsls	r3, r3, #3
 801c6f0:	18d3      	adds	r3, r2, r3
 801c6f2:	3304      	adds	r3, #4
 801c6f4:	2201      	movs	r2, #1
 801c6f6:	4252      	negs	r2, r2
 801c6f8:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c6fa:	4a4c      	ldr	r2, [pc, #304]	; (801c82c <UTIL_SEQ_Run+0x1a8>)
 801c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6fe:	00db      	lsls	r3, r3, #3
 801c700:	18d3      	adds	r3, r2, r3
 801c702:	3304      	adds	r3, #4
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c708:	4013      	ands	r3, r2
 801c70a:	0018      	movs	r0, r3
 801c70c:	f000 f8f6 	bl	801c8fc <SEQ_BitPosition>
 801c710:	0003      	movs	r3, r0
 801c712:	001a      	movs	r2, r3
 801c714:	4b47      	ldr	r3, [pc, #284]	; (801c834 <UTIL_SEQ_Run+0x1b0>)
 801c716:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c718:	4a44      	ldr	r2, [pc, #272]	; (801c82c <UTIL_SEQ_Run+0x1a8>)
 801c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c71c:	00db      	lsls	r3, r3, #3
 801c71e:	18d3      	adds	r3, r2, r3
 801c720:	3304      	adds	r3, #4
 801c722:	681a      	ldr	r2, [r3, #0]
 801c724:	4b43      	ldr	r3, [pc, #268]	; (801c834 <UTIL_SEQ_Run+0x1b0>)
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	2101      	movs	r1, #1
 801c72a:	4099      	lsls	r1, r3
 801c72c:	000b      	movs	r3, r1
 801c72e:	43db      	mvns	r3, r3
 801c730:	401a      	ands	r2, r3
 801c732:	493e      	ldr	r1, [pc, #248]	; (801c82c <UTIL_SEQ_Run+0x1a8>)
 801c734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c736:	00db      	lsls	r3, r3, #3
 801c738:	18cb      	adds	r3, r1, r3
 801c73a:	3304      	adds	r3, #4
 801c73c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c73e:	f3ef 8310 	mrs	r3, PRIMASK
 801c742:	61bb      	str	r3, [r7, #24]
  return(result);
 801c744:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c746:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c748:	b672      	cpsid	i
}
 801c74a:	46c0      	nop			; (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c74c:	4b39      	ldr	r3, [pc, #228]	; (801c834 <UTIL_SEQ_Run+0x1b0>)
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	2201      	movs	r2, #1
 801c752:	409a      	lsls	r2, r3
 801c754:	0013      	movs	r3, r2
 801c756:	43da      	mvns	r2, r3
 801c758:	4b37      	ldr	r3, [pc, #220]	; (801c838 <UTIL_SEQ_Run+0x1b4>)
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	401a      	ands	r2, r3
 801c75e:	4b36      	ldr	r3, [pc, #216]	; (801c838 <UTIL_SEQ_Run+0x1b4>)
 801c760:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c762:	2302      	movs	r3, #2
 801c764:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c766:	e013      	b.n	801c790 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c76a:	1e5a      	subs	r2, r3, #1
 801c76c:	4b2f      	ldr	r3, [pc, #188]	; (801c82c <UTIL_SEQ_Run+0x1a8>)
 801c76e:	00d2      	lsls	r2, r2, #3
 801c770:	58d1      	ldr	r1, [r2, r3]
 801c772:	4b30      	ldr	r3, [pc, #192]	; (801c834 <UTIL_SEQ_Run+0x1b0>)
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	2201      	movs	r2, #1
 801c778:	409a      	lsls	r2, r3
 801c77a:	0013      	movs	r3, r2
 801c77c:	43db      	mvns	r3, r3
 801c77e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c780:	3a01      	subs	r2, #1
 801c782:	4019      	ands	r1, r3
 801c784:	4b29      	ldr	r3, [pc, #164]	; (801c82c <UTIL_SEQ_Run+0x1a8>)
 801c786:	00d2      	lsls	r2, r2, #3
 801c788:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c78c:	3b01      	subs	r3, #1
 801c78e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c792:	2b00      	cmp	r3, #0
 801c794:	d1e8      	bne.n	801c768 <UTIL_SEQ_Run+0xe4>
 801c796:	6a3b      	ldr	r3, [r7, #32]
 801c798:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c79a:	697b      	ldr	r3, [r7, #20]
 801c79c:	f383 8810 	msr	PRIMASK, r3
}
 801c7a0:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c7a2:	4b24      	ldr	r3, [pc, #144]	; (801c834 <UTIL_SEQ_Run+0x1b0>)
 801c7a4:	681a      	ldr	r2, [r3, #0]
 801c7a6:	4b25      	ldr	r3, [pc, #148]	; (801c83c <UTIL_SEQ_Run+0x1b8>)
 801c7a8:	0092      	lsls	r2, r2, #2
 801c7aa:	58d3      	ldr	r3, [r2, r3]
 801c7ac:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c7ae:	4b22      	ldr	r3, [pc, #136]	; (801c838 <UTIL_SEQ_Run+0x1b4>)
 801c7b0:	681a      	ldr	r2, [r3, #0]
 801c7b2:	4b1f      	ldr	r3, [pc, #124]	; (801c830 <UTIL_SEQ_Run+0x1ac>)
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	401a      	ands	r2, r3
 801c7b8:	4b1b      	ldr	r3, [pc, #108]	; (801c828 <UTIL_SEQ_Run+0x1a4>)
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	4013      	ands	r3, r2
 801c7be:	d006      	beq.n	801c7ce <UTIL_SEQ_Run+0x14a>
 801c7c0:	4b1f      	ldr	r3, [pc, #124]	; (801c840 <UTIL_SEQ_Run+0x1bc>)
 801c7c2:	681a      	ldr	r2, [r3, #0]
 801c7c4:	4b1f      	ldr	r3, [pc, #124]	; (801c844 <UTIL_SEQ_Run+0x1c0>)
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	4013      	ands	r3, r2
 801c7ca:	d100      	bne.n	801c7ce <UTIL_SEQ_Run+0x14a>
 801c7cc:	e768      	b.n	801c6a0 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c7ce:	4b19      	ldr	r3, [pc, #100]	; (801c834 <UTIL_SEQ_Run+0x1b0>)
 801c7d0:	2201      	movs	r2, #1
 801c7d2:	4252      	negs	r2, r2
 801c7d4:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c7d6:	f000 f887 	bl	801c8e8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7da:	f3ef 8310 	mrs	r3, PRIMASK
 801c7de:	613b      	str	r3, [r7, #16]
  return(result);
 801c7e0:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c7e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7e4:	b672      	cpsid	i
}
 801c7e6:	46c0      	nop			; (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c7e8:	4b13      	ldr	r3, [pc, #76]	; (801c838 <UTIL_SEQ_Run+0x1b4>)
 801c7ea:	681a      	ldr	r2, [r3, #0]
 801c7ec:	4b10      	ldr	r3, [pc, #64]	; (801c830 <UTIL_SEQ_Run+0x1ac>)
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	401a      	ands	r2, r3
 801c7f2:	4b0d      	ldr	r3, [pc, #52]	; (801c828 <UTIL_SEQ_Run+0x1a4>)
 801c7f4:	681b      	ldr	r3, [r3, #0]
 801c7f6:	4013      	ands	r3, r2
 801c7f8:	d107      	bne.n	801c80a <UTIL_SEQ_Run+0x186>
 801c7fa:	4b11      	ldr	r3, [pc, #68]	; (801c840 <UTIL_SEQ_Run+0x1bc>)
 801c7fc:	681a      	ldr	r2, [r3, #0]
 801c7fe:	4b11      	ldr	r3, [pc, #68]	; (801c844 <UTIL_SEQ_Run+0x1c0>)
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	4013      	ands	r3, r2
 801c804:	d101      	bne.n	801c80a <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801c806:	f7e8 fb63 	bl	8004ed0 <UTIL_SEQ_Idle>
 801c80a:	69fb      	ldr	r3, [r7, #28]
 801c80c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	f383 8810 	msr	PRIMASK, r3
}
 801c814:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c816:	f000 f86c 	bl	801c8f2 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c81a:	4b03      	ldr	r3, [pc, #12]	; (801c828 <UTIL_SEQ_Run+0x1a4>)
 801c81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c81e:	601a      	str	r2, [r3, #0]

  return;
 801c820:	46c0      	nop			; (mov r8, r8)
}
 801c822:	46bd      	mov	sp, r7
 801c824:	b00c      	add	sp, #48	; 0x30
 801c826:	bd80      	pop	{r7, pc}
 801c828:	200001cc 	.word	0x200001cc
 801c82c:	20001334 	.word	0x20001334
 801c830:	200001c8 	.word	0x200001c8
 801c834:	200012b0 	.word	0x200012b0
 801c838:	200012a4 	.word	0x200012a4
 801c83c:	200012b4 	.word	0x200012b4
 801c840:	200012a8 	.word	0x200012a8
 801c844:	200012ac 	.word	0x200012ac

0801c848 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c848:	b580      	push	{r7, lr}
 801c84a:	b088      	sub	sp, #32
 801c84c:	af00      	add	r7, sp, #0
 801c84e:	60f8      	str	r0, [r7, #12]
 801c850:	60b9      	str	r1, [r7, #8]
 801c852:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c854:	f3ef 8310 	mrs	r3, PRIMASK
 801c858:	617b      	str	r3, [r7, #20]
  return(result);
 801c85a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c85c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c85e:	b672      	cpsid	i
}
 801c860:	46c0      	nop			; (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	0018      	movs	r0, r3
 801c866:	f000 f849 	bl	801c8fc <SEQ_BitPosition>
 801c86a:	0003      	movs	r3, r0
 801c86c:	001a      	movs	r2, r3
 801c86e:	4b07      	ldr	r3, [pc, #28]	; (801c88c <UTIL_SEQ_RegTask+0x44>)
 801c870:	0092      	lsls	r2, r2, #2
 801c872:	6879      	ldr	r1, [r7, #4]
 801c874:	50d1      	str	r1, [r2, r3]
 801c876:	69fb      	ldr	r3, [r7, #28]
 801c878:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c87a:	69bb      	ldr	r3, [r7, #24]
 801c87c:	f383 8810 	msr	PRIMASK, r3
}
 801c880:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c882:	46c0      	nop			; (mov r8, r8)
}
 801c884:	46bd      	mov	sp, r7
 801c886:	b008      	add	sp, #32
 801c888:	bd80      	pop	{r7, pc}
 801c88a:	46c0      	nop			; (mov r8, r8)
 801c88c:	200012b4 	.word	0x200012b4

0801c890 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c890:	b580      	push	{r7, lr}
 801c892:	b086      	sub	sp, #24
 801c894:	af00      	add	r7, sp, #0
 801c896:	6078      	str	r0, [r7, #4]
 801c898:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c89a:	f3ef 8310 	mrs	r3, PRIMASK
 801c89e:	60fb      	str	r3, [r7, #12]
  return(result);
 801c8a0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c8a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c8a4:	b672      	cpsid	i
}
 801c8a6:	46c0      	nop			; (mov r8, r8)

  TaskSet |= TaskId_bm;
 801c8a8:	4b0d      	ldr	r3, [pc, #52]	; (801c8e0 <UTIL_SEQ_SetTask+0x50>)
 801c8aa:	681a      	ldr	r2, [r3, #0]
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	431a      	orrs	r2, r3
 801c8b0:	4b0b      	ldr	r3, [pc, #44]	; (801c8e0 <UTIL_SEQ_SetTask+0x50>)
 801c8b2:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c8b4:	4b0b      	ldr	r3, [pc, #44]	; (801c8e4 <UTIL_SEQ_SetTask+0x54>)
 801c8b6:	683a      	ldr	r2, [r7, #0]
 801c8b8:	00d2      	lsls	r2, r2, #3
 801c8ba:	58d2      	ldr	r2, [r2, r3]
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	431a      	orrs	r2, r3
 801c8c0:	0011      	movs	r1, r2
 801c8c2:	4b08      	ldr	r3, [pc, #32]	; (801c8e4 <UTIL_SEQ_SetTask+0x54>)
 801c8c4:	683a      	ldr	r2, [r7, #0]
 801c8c6:	00d2      	lsls	r2, r2, #3
 801c8c8:	50d1      	str	r1, [r2, r3]
 801c8ca:	697b      	ldr	r3, [r7, #20]
 801c8cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8ce:	693b      	ldr	r3, [r7, #16]
 801c8d0:	f383 8810 	msr	PRIMASK, r3
}
 801c8d4:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c8d6:	46c0      	nop			; (mov r8, r8)
}
 801c8d8:	46bd      	mov	sp, r7
 801c8da:	b006      	add	sp, #24
 801c8dc:	bd80      	pop	{r7, pc}
 801c8de:	46c0      	nop			; (mov r8, r8)
 801c8e0:	200012a4 	.word	0x200012a4
 801c8e4:	20001334 	.word	0x20001334

0801c8e8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c8e8:	b580      	push	{r7, lr}
 801c8ea:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c8ec:	46c0      	nop			; (mov r8, r8)
}
 801c8ee:	46bd      	mov	sp, r7
 801c8f0:	bd80      	pop	{r7, pc}

0801c8f2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c8f2:	b580      	push	{r7, lr}
 801c8f4:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c8f6:	46c0      	nop			; (mov r8, r8)
}
 801c8f8:	46bd      	mov	sp, r7
 801c8fa:	bd80      	pop	{r7, pc}

0801c8fc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b084      	sub	sp, #16
 801c900:	af00      	add	r7, sp, #0
 801c902:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801c904:	210f      	movs	r1, #15
 801c906:	187b      	adds	r3, r7, r1
 801c908:	2200      	movs	r2, #0
 801c90a:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	0c1b      	lsrs	r3, r3, #16
 801c910:	041b      	lsls	r3, r3, #16
 801c912:	d105      	bne.n	801c920 <SEQ_BitPosition+0x24>
 801c914:	187b      	adds	r3, r7, r1
 801c916:	2210      	movs	r2, #16
 801c918:	701a      	strb	r2, [r3, #0]
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	041b      	lsls	r3, r3, #16
 801c91e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	0e1b      	lsrs	r3, r3, #24
 801c924:	061b      	lsls	r3, r3, #24
 801c926:	d108      	bne.n	801c93a <SEQ_BitPosition+0x3e>
 801c928:	220f      	movs	r2, #15
 801c92a:	18bb      	adds	r3, r7, r2
 801c92c:	18ba      	adds	r2, r7, r2
 801c92e:	7812      	ldrb	r2, [r2, #0]
 801c930:	3208      	adds	r2, #8
 801c932:	701a      	strb	r2, [r3, #0]
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	021b      	lsls	r3, r3, #8
 801c938:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	0f1b      	lsrs	r3, r3, #28
 801c93e:	071b      	lsls	r3, r3, #28
 801c940:	d108      	bne.n	801c954 <SEQ_BitPosition+0x58>
 801c942:	220f      	movs	r2, #15
 801c944:	18bb      	adds	r3, r7, r2
 801c946:	18ba      	adds	r2, r7, r2
 801c948:	7812      	ldrb	r2, [r2, #0]
 801c94a:	3204      	adds	r2, #4
 801c94c:	701a      	strb	r2, [r3, #0]
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	011b      	lsls	r3, r3, #4
 801c952:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	0f1b      	lsrs	r3, r3, #28
 801c958:	4a08      	ldr	r2, [pc, #32]	; (801c97c <SEQ_BitPosition+0x80>)
 801c95a:	5cd1      	ldrb	r1, [r2, r3]
 801c95c:	200f      	movs	r0, #15
 801c95e:	183b      	adds	r3, r7, r0
 801c960:	183a      	adds	r2, r7, r0
 801c962:	7812      	ldrb	r2, [r2, #0]
 801c964:	188a      	adds	r2, r1, r2
 801c966:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801c968:	183b      	adds	r3, r7, r0
 801c96a:	781b      	ldrb	r3, [r3, #0]
 801c96c:	221f      	movs	r2, #31
 801c96e:	1ad3      	subs	r3, r2, r3
 801c970:	b2db      	uxtb	r3, r3
}
 801c972:	0018      	movs	r0, r3
 801c974:	46bd      	mov	sp, r7
 801c976:	b004      	add	sp, #16
 801c978:	bd80      	pop	{r7, pc}
 801c97a:	46c0      	nop			; (mov r8, r8)
 801c97c:	0801feec 	.word	0x0801feec

0801c980 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c980:	b082      	sub	sp, #8
 801c982:	b580      	push	{r7, lr}
 801c984:	b086      	sub	sp, #24
 801c986:	af00      	add	r7, sp, #0
 801c988:	60f8      	str	r0, [r7, #12]
 801c98a:	1d38      	adds	r0, r7, #4
 801c98c:	6001      	str	r1, [r0, #0]
 801c98e:	6042      	str	r2, [r0, #4]
 801c990:	2204      	movs	r2, #4
 801c992:	2120      	movs	r1, #32
 801c994:	468c      	mov	ip, r1
 801c996:	44bc      	add	ip, r7
 801c998:	4462      	add	r2, ip
 801c99a:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c99c:	2110      	movs	r1, #16
 801c99e:	187b      	adds	r3, r7, r1
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	601a      	str	r2, [r3, #0]
 801c9a4:	187b      	adds	r3, r7, r1
 801c9a6:	2200      	movs	r2, #0
 801c9a8:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801c9aa:	1d3b      	adds	r3, r7, #4
 801c9ac:	681a      	ldr	r2, [r3, #0]
 801c9ae:	2304      	movs	r3, #4
 801c9b0:	2020      	movs	r0, #32
 801c9b2:	4684      	mov	ip, r0
 801c9b4:	44bc      	add	ip, r7
 801c9b6:	4463      	add	r3, ip
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	18d2      	adds	r2, r2, r3
 801c9bc:	187b      	adds	r3, r7, r1
 801c9be:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c9c0:	1d3b      	adds	r3, r7, #4
 801c9c2:	2204      	movs	r2, #4
 801c9c4:	5e9b      	ldrsh	r3, [r3, r2]
 801c9c6:	b29a      	uxth	r2, r3
 801c9c8:	2304      	movs	r3, #4
 801c9ca:	2020      	movs	r0, #32
 801c9cc:	4684      	mov	ip, r0
 801c9ce:	44bc      	add	ip, r7
 801c9d0:	4463      	add	r3, ip
 801c9d2:	2004      	movs	r0, #4
 801c9d4:	5e1b      	ldrsh	r3, [r3, r0]
 801c9d6:	b29b      	uxth	r3, r3
 801c9d8:	18d3      	adds	r3, r2, r3
 801c9da:	b29b      	uxth	r3, r3
 801c9dc:	b21a      	sxth	r2, r3
 801c9de:	187b      	adds	r3, r7, r1
 801c9e0:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801c9e2:	187b      	adds	r3, r7, r1
 801c9e4:	2204      	movs	r2, #4
 801c9e6:	5e9a      	ldrsh	r2, [r3, r2]
 801c9e8:	23fa      	movs	r3, #250	; 0xfa
 801c9ea:	009b      	lsls	r3, r3, #2
 801c9ec:	429a      	cmp	r2, r3
 801c9ee:	db0f      	blt.n	801ca10 <SysTimeAdd+0x90>
  {
    c.Seconds++;
 801c9f0:	187b      	adds	r3, r7, r1
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	1c5a      	adds	r2, r3, #1
 801c9f6:	187b      	adds	r3, r7, r1
 801c9f8:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801c9fa:	187b      	adds	r3, r7, r1
 801c9fc:	2204      	movs	r2, #4
 801c9fe:	5e9b      	ldrsh	r3, [r3, r2]
 801ca00:	b29b      	uxth	r3, r3
 801ca02:	4a09      	ldr	r2, [pc, #36]	; (801ca28 <SysTimeAdd+0xa8>)
 801ca04:	4694      	mov	ip, r2
 801ca06:	4463      	add	r3, ip
 801ca08:	b29b      	uxth	r3, r3
 801ca0a:	b21a      	sxth	r2, r3
 801ca0c:	187b      	adds	r3, r7, r1
 801ca0e:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801ca10:	68fb      	ldr	r3, [r7, #12]
 801ca12:	2210      	movs	r2, #16
 801ca14:	18ba      	adds	r2, r7, r2
 801ca16:	ca03      	ldmia	r2!, {r0, r1}
 801ca18:	c303      	stmia	r3!, {r0, r1}
}
 801ca1a:	68f8      	ldr	r0, [r7, #12]
 801ca1c:	46bd      	mov	sp, r7
 801ca1e:	b006      	add	sp, #24
 801ca20:	bc80      	pop	{r7}
 801ca22:	bc08      	pop	{r3}
 801ca24:	b002      	add	sp, #8
 801ca26:	4718      	bx	r3
 801ca28:	fffffc18 	.word	0xfffffc18

0801ca2c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801ca2c:	b082      	sub	sp, #8
 801ca2e:	b580      	push	{r7, lr}
 801ca30:	b086      	sub	sp, #24
 801ca32:	af00      	add	r7, sp, #0
 801ca34:	60f8      	str	r0, [r7, #12]
 801ca36:	1d38      	adds	r0, r7, #4
 801ca38:	6001      	str	r1, [r0, #0]
 801ca3a:	6042      	str	r2, [r0, #4]
 801ca3c:	2204      	movs	r2, #4
 801ca3e:	2120      	movs	r1, #32
 801ca40:	468c      	mov	ip, r1
 801ca42:	44bc      	add	ip, r7
 801ca44:	4462      	add	r2, ip
 801ca46:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801ca48:	2110      	movs	r1, #16
 801ca4a:	187b      	adds	r3, r7, r1
 801ca4c:	2200      	movs	r2, #0
 801ca4e:	601a      	str	r2, [r3, #0]
 801ca50:	187b      	adds	r3, r7, r1
 801ca52:	2200      	movs	r2, #0
 801ca54:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801ca56:	1d3b      	adds	r3, r7, #4
 801ca58:	681a      	ldr	r2, [r3, #0]
 801ca5a:	2304      	movs	r3, #4
 801ca5c:	2020      	movs	r0, #32
 801ca5e:	4684      	mov	ip, r0
 801ca60:	44bc      	add	ip, r7
 801ca62:	4463      	add	r3, ip
 801ca64:	681b      	ldr	r3, [r3, #0]
 801ca66:	1ad2      	subs	r2, r2, r3
 801ca68:	187b      	adds	r3, r7, r1
 801ca6a:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801ca6c:	1d3b      	adds	r3, r7, #4
 801ca6e:	2204      	movs	r2, #4
 801ca70:	5e9b      	ldrsh	r3, [r3, r2]
 801ca72:	b29a      	uxth	r2, r3
 801ca74:	2304      	movs	r3, #4
 801ca76:	2020      	movs	r0, #32
 801ca78:	4684      	mov	ip, r0
 801ca7a:	44bc      	add	ip, r7
 801ca7c:	4463      	add	r3, ip
 801ca7e:	2004      	movs	r0, #4
 801ca80:	5e1b      	ldrsh	r3, [r3, r0]
 801ca82:	b29b      	uxth	r3, r3
 801ca84:	1ad3      	subs	r3, r2, r3
 801ca86:	b29b      	uxth	r3, r3
 801ca88:	b21a      	sxth	r2, r3
 801ca8a:	187b      	adds	r3, r7, r1
 801ca8c:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801ca8e:	187b      	adds	r3, r7, r1
 801ca90:	2204      	movs	r2, #4
 801ca92:	5e9b      	ldrsh	r3, [r3, r2]
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	da10      	bge.n	801caba <SysTimeSub+0x8e>
  {
    c.Seconds--;
 801ca98:	187b      	adds	r3, r7, r1
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	1e5a      	subs	r2, r3, #1
 801ca9e:	187b      	adds	r3, r7, r1
 801caa0:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801caa2:	187b      	adds	r3, r7, r1
 801caa4:	2204      	movs	r2, #4
 801caa6:	5e9b      	ldrsh	r3, [r3, r2]
 801caa8:	b29b      	uxth	r3, r3
 801caaa:	22fa      	movs	r2, #250	; 0xfa
 801caac:	0092      	lsls	r2, r2, #2
 801caae:	4694      	mov	ip, r2
 801cab0:	4463      	add	r3, ip
 801cab2:	b29b      	uxth	r3, r3
 801cab4:	b21a      	sxth	r2, r3
 801cab6:	187b      	adds	r3, r7, r1
 801cab8:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	2210      	movs	r2, #16
 801cabe:	18ba      	adds	r2, r7, r2
 801cac0:	ca03      	ldmia	r2!, {r0, r1}
 801cac2:	c303      	stmia	r3!, {r0, r1}
}
 801cac4:	68f8      	ldr	r0, [r7, #12]
 801cac6:	46bd      	mov	sp, r7
 801cac8:	b006      	add	sp, #24
 801caca:	bc80      	pop	{r7}
 801cacc:	bc08      	pop	{r3}
 801cace:	b002      	add	sp, #8
 801cad0:	4718      	bx	r3
	...

0801cad4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801cad4:	b5b0      	push	{r4, r5, r7, lr}
 801cad6:	b088      	sub	sp, #32
 801cad8:	af02      	add	r7, sp, #8
 801cada:	003b      	movs	r3, r7
 801cadc:	6018      	str	r0, [r3, #0]
 801cade:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cae0:	2108      	movs	r1, #8
 801cae2:	187b      	adds	r3, r7, r1
 801cae4:	2200      	movs	r2, #0
 801cae6:	601a      	str	r2, [r3, #0]
 801cae8:	187b      	adds	r3, r7, r1
 801caea:	2200      	movs	r2, #0
 801caec:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801caee:	4b14      	ldr	r3, [pc, #80]	; (801cb40 <SysTimeSet+0x6c>)
 801caf0:	691b      	ldr	r3, [r3, #16]
 801caf2:	000c      	movs	r4, r1
 801caf4:	187a      	adds	r2, r7, r1
 801caf6:	3204      	adds	r2, #4
 801caf8:	0010      	movs	r0, r2
 801cafa:	4798      	blx	r3
 801cafc:	0002      	movs	r2, r0
 801cafe:	0021      	movs	r1, r4
 801cb00:	187b      	adds	r3, r7, r1
 801cb02:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801cb04:	2510      	movs	r5, #16
 801cb06:	197c      	adds	r4, r7, r5
 801cb08:	187b      	adds	r3, r7, r1
 801cb0a:	003a      	movs	r2, r7
 801cb0c:	4669      	mov	r1, sp
 801cb0e:	6858      	ldr	r0, [r3, #4]
 801cb10:	6008      	str	r0, [r1, #0]
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	6811      	ldr	r1, [r2, #0]
 801cb16:	6852      	ldr	r2, [r2, #4]
 801cb18:	0020      	movs	r0, r4
 801cb1a:	f7ff ff87 	bl	801ca2c <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801cb1e:	4b08      	ldr	r3, [pc, #32]	; (801cb40 <SysTimeSet+0x6c>)
 801cb20:	681a      	ldr	r2, [r3, #0]
 801cb22:	197b      	adds	r3, r7, r5
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	0018      	movs	r0, r3
 801cb28:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801cb2a:	4b05      	ldr	r3, [pc, #20]	; (801cb40 <SysTimeSet+0x6c>)
 801cb2c:	689b      	ldr	r3, [r3, #8]
 801cb2e:	197a      	adds	r2, r7, r5
 801cb30:	2104      	movs	r1, #4
 801cb32:	5e52      	ldrsh	r2, [r2, r1]
 801cb34:	0010      	movs	r0, r2
 801cb36:	4798      	blx	r3
}
 801cb38:	46c0      	nop			; (mov r8, r8)
 801cb3a:	46bd      	mov	sp, r7
 801cb3c:	b006      	add	sp, #24
 801cb3e:	bdb0      	pop	{r4, r5, r7, pc}
 801cb40:	0801f114 	.word	0x0801f114

0801cb44 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801cb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb46:	b08b      	sub	sp, #44	; 0x2c
 801cb48:	af02      	add	r7, sp, #8
 801cb4a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cb4c:	2518      	movs	r5, #24
 801cb4e:	197b      	adds	r3, r7, r5
 801cb50:	2200      	movs	r2, #0
 801cb52:	601a      	str	r2, [r3, #0]
 801cb54:	197b      	adds	r3, r7, r5
 801cb56:	2200      	movs	r2, #0
 801cb58:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801cb5a:	2410      	movs	r4, #16
 801cb5c:	193b      	adds	r3, r7, r4
 801cb5e:	2200      	movs	r2, #0
 801cb60:	601a      	str	r2, [r3, #0]
 801cb62:	193b      	adds	r3, r7, r4
 801cb64:	2200      	movs	r2, #0
 801cb66:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cb68:	4b16      	ldr	r3, [pc, #88]	; (801cbc4 <SysTimeGet+0x80>)
 801cb6a:	691b      	ldr	r3, [r3, #16]
 801cb6c:	197a      	adds	r2, r7, r5
 801cb6e:	3204      	adds	r2, #4
 801cb70:	0010      	movs	r0, r2
 801cb72:	4798      	blx	r3
 801cb74:	0002      	movs	r2, r0
 801cb76:	197b      	adds	r3, r7, r5
 801cb78:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801cb7a:	4b12      	ldr	r3, [pc, #72]	; (801cbc4 <SysTimeGet+0x80>)
 801cb7c:	68db      	ldr	r3, [r3, #12]
 801cb7e:	4798      	blx	r3
 801cb80:	0003      	movs	r3, r0
 801cb82:	b21a      	sxth	r2, r3
 801cb84:	2608      	movs	r6, #8
 801cb86:	19bb      	adds	r3, r7, r6
 801cb88:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cb8a:	4b0e      	ldr	r3, [pc, #56]	; (801cbc4 <SysTimeGet+0x80>)
 801cb8c:	685b      	ldr	r3, [r3, #4]
 801cb8e:	4798      	blx	r3
 801cb90:	0002      	movs	r2, r0
 801cb92:	0031      	movs	r1, r6
 801cb94:	187b      	adds	r3, r7, r1
 801cb96:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801cb98:	0026      	movs	r6, r4
 801cb9a:	193c      	adds	r4, r7, r4
 801cb9c:	197b      	adds	r3, r7, r5
 801cb9e:	187a      	adds	r2, r7, r1
 801cba0:	4669      	mov	r1, sp
 801cba2:	6858      	ldr	r0, [r3, #4]
 801cba4:	6008      	str	r0, [r1, #0]
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	6811      	ldr	r1, [r2, #0]
 801cbaa:	6852      	ldr	r2, [r2, #4]
 801cbac:	0020      	movs	r0, r4
 801cbae:	f7ff fee7 	bl	801c980 <SysTimeAdd>

  return sysTime;
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	19ba      	adds	r2, r7, r6
 801cbb6:	ca03      	ldmia	r2!, {r0, r1}
 801cbb8:	c303      	stmia	r3!, {r0, r1}
}
 801cbba:	6878      	ldr	r0, [r7, #4]
 801cbbc:	46bd      	mov	sp, r7
 801cbbe:	b009      	add	sp, #36	; 0x24
 801cbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbc2:	46c0      	nop			; (mov r8, r8)
 801cbc4:	0801f114 	.word	0x0801f114

0801cbc8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801cbc8:	b590      	push	{r4, r7, lr}
 801cbca:	b085      	sub	sp, #20
 801cbcc:	af00      	add	r7, sp, #0
 801cbce:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cbd0:	2108      	movs	r1, #8
 801cbd2:	187b      	adds	r3, r7, r1
 801cbd4:	2200      	movs	r2, #0
 801cbd6:	601a      	str	r2, [r3, #0]
 801cbd8:	187b      	adds	r3, r7, r1
 801cbda:	2200      	movs	r2, #0
 801cbdc:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cbde:	4b09      	ldr	r3, [pc, #36]	; (801cc04 <SysTimeGetMcuTime+0x3c>)
 801cbe0:	691b      	ldr	r3, [r3, #16]
 801cbe2:	000c      	movs	r4, r1
 801cbe4:	187a      	adds	r2, r7, r1
 801cbe6:	3204      	adds	r2, #4
 801cbe8:	0010      	movs	r0, r2
 801cbea:	4798      	blx	r3
 801cbec:	0002      	movs	r2, r0
 801cbee:	193b      	adds	r3, r7, r4
 801cbf0:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	193a      	adds	r2, r7, r4
 801cbf6:	ca03      	ldmia	r2!, {r0, r1}
 801cbf8:	c303      	stmia	r3!, {r0, r1}
}
 801cbfa:	6878      	ldr	r0, [r7, #4]
 801cbfc:	46bd      	mov	sp, r7
 801cbfe:	b005      	add	sp, #20
 801cc00:	bd90      	pop	{r4, r7, pc}
 801cc02:	46c0      	nop			; (mov r8, r8)
 801cc04:	0801f114 	.word	0x0801f114

0801cc08 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801cc0c:	4b04      	ldr	r3, [pc, #16]	; (801cc20 <UTIL_TIMER_Init+0x18>)
 801cc0e:	2200      	movs	r2, #0
 801cc10:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cc12:	4b04      	ldr	r3, [pc, #16]	; (801cc24 <UTIL_TIMER_Init+0x1c>)
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	4798      	blx	r3
 801cc18:	0003      	movs	r3, r0
}
 801cc1a:	0018      	movs	r0, r3
 801cc1c:	46bd      	mov	sp, r7
 801cc1e:	bd80      	pop	{r7, pc}
 801cc20:	20001344 	.word	0x20001344
 801cc24:	0801f0e8 	.word	0x0801f0e8

0801cc28 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b084      	sub	sp, #16
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	60f8      	str	r0, [r7, #12]
 801cc30:	60b9      	str	r1, [r7, #8]
 801cc32:	603b      	str	r3, [r7, #0]
 801cc34:	1dfb      	adds	r3, r7, #7
 801cc36:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d025      	beq.n	801cc8a <UTIL_TIMER_Create+0x62>
 801cc3e:	683b      	ldr	r3, [r7, #0]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d022      	beq.n	801cc8a <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	2200      	movs	r2, #0
 801cc48:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cc4a:	4b12      	ldr	r3, [pc, #72]	; (801cc94 <UTIL_TIMER_Create+0x6c>)
 801cc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc4e:	68ba      	ldr	r2, [r7, #8]
 801cc50:	0010      	movs	r0, r2
 801cc52:	4798      	blx	r3
 801cc54:	0002      	movs	r2, r0
 801cc56:	68fb      	ldr	r3, [r7, #12]
 801cc58:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	2200      	movs	r2, #0
 801cc5e:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	2200      	movs	r2, #0
 801cc64:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	2200      	movs	r2, #0
 801cc6a:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	683a      	ldr	r2, [r7, #0]
 801cc70:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	69ba      	ldr	r2, [r7, #24]
 801cc76:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	1dfa      	adds	r2, r7, #7
 801cc7c:	7812      	ldrb	r2, [r2, #0]
 801cc7e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	2200      	movs	r2, #0
 801cc84:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801cc86:	2300      	movs	r3, #0
 801cc88:	e000      	b.n	801cc8c <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801cc8a:	2301      	movs	r3, #1
  }
}
 801cc8c:	0018      	movs	r0, r3
 801cc8e:	46bd      	mov	sp, r7
 801cc90:	b004      	add	sp, #16
 801cc92:	bd80      	pop	{r7, pc}
 801cc94:	0801f0e8 	.word	0x0801f0e8

0801cc98 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cc98:	b580      	push	{r7, lr}
 801cc9a:	b08a      	sub	sp, #40	; 0x28
 801cc9c:	af00      	add	r7, sp, #0
 801cc9e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cca0:	2327      	movs	r3, #39	; 0x27
 801cca2:	18fb      	adds	r3, r7, r3
 801cca4:	2200      	movs	r2, #0
 801cca6:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d05d      	beq.n	801cd6a <UTIL_TIMER_Start+0xd2>
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	0018      	movs	r0, r3
 801ccb2:	f000 f9cb 	bl	801d04c <TimerExists>
 801ccb6:	0003      	movs	r3, r0
 801ccb8:	001a      	movs	r2, r3
 801ccba:	2301      	movs	r3, #1
 801ccbc:	4053      	eors	r3, r2
 801ccbe:	b2db      	uxtb	r3, r3
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d052      	beq.n	801cd6a <UTIL_TIMER_Start+0xd2>
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	7a5b      	ldrb	r3, [r3, #9]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d14e      	bne.n	801cd6a <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cccc:	f3ef 8310 	mrs	r3, PRIMASK
 801ccd0:	613b      	str	r3, [r7, #16]
  return(result);
 801ccd2:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ccd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ccd6:	b672      	cpsid	i
}
 801ccd8:	46c0      	nop			; (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	685b      	ldr	r3, [r3, #4]
 801ccde:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801cce0:	4b27      	ldr	r3, [pc, #156]	; (801cd80 <UTIL_TIMER_Start+0xe8>)
 801cce2:	6a1b      	ldr	r3, [r3, #32]
 801cce4:	4798      	blx	r3
 801cce6:	0003      	movs	r3, r0
 801cce8:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801ccea:	6a3a      	ldr	r2, [r7, #32]
 801ccec:	69bb      	ldr	r3, [r7, #24]
 801ccee:	429a      	cmp	r2, r3
 801ccf0:	d201      	bcs.n	801ccf6 <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801ccf2:	69bb      	ldr	r3, [r7, #24]
 801ccf4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	6a3a      	ldr	r2, [r7, #32]
 801ccfa:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	2200      	movs	r2, #0
 801cd00:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	2201      	movs	r2, #1
 801cd06:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	2200      	movs	r2, #0
 801cd0c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801cd0e:	4b1d      	ldr	r3, [pc, #116]	; (801cd84 <UTIL_TIMER_Start+0xec>)
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d107      	bne.n	801cd26 <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801cd16:	4b1a      	ldr	r3, [pc, #104]	; (801cd80 <UTIL_TIMER_Start+0xe8>)
 801cd18:	691b      	ldr	r3, [r3, #16]
 801cd1a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	0018      	movs	r0, r3
 801cd20:	f000 fa08 	bl	801d134 <TimerInsertNewHeadTimer>
 801cd24:	e01a      	b.n	801cd5c <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801cd26:	4b16      	ldr	r3, [pc, #88]	; (801cd80 <UTIL_TIMER_Start+0xe8>)
 801cd28:	699b      	ldr	r3, [r3, #24]
 801cd2a:	4798      	blx	r3
 801cd2c:	0003      	movs	r3, r0
 801cd2e:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	681a      	ldr	r2, [r3, #0]
 801cd34:	697b      	ldr	r3, [r7, #20]
 801cd36:	18d2      	adds	r2, r2, r3
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	681a      	ldr	r2, [r3, #0]
 801cd40:	4b10      	ldr	r3, [pc, #64]	; (801cd84 <UTIL_TIMER_Start+0xec>)
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	429a      	cmp	r2, r3
 801cd48:	d204      	bcs.n	801cd54 <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	0018      	movs	r0, r3
 801cd4e:	f000 f9f1 	bl	801d134 <TimerInsertNewHeadTimer>
 801cd52:	e003      	b.n	801cd5c <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	0018      	movs	r0, r3
 801cd58:	f000 f9be 	bl	801d0d8 <TimerInsertTimer>
 801cd5c:	69fb      	ldr	r3, [r7, #28]
 801cd5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	f383 8810 	msr	PRIMASK, r3
}
 801cd66:	46c0      	nop			; (mov r8, r8)
  {
 801cd68:	e003      	b.n	801cd72 <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801cd6a:	2327      	movs	r3, #39	; 0x27
 801cd6c:	18fb      	adds	r3, r7, r3
 801cd6e:	2201      	movs	r2, #1
 801cd70:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801cd72:	2327      	movs	r3, #39	; 0x27
 801cd74:	18fb      	adds	r3, r7, r3
 801cd76:	781b      	ldrb	r3, [r3, #0]
}
 801cd78:	0018      	movs	r0, r3
 801cd7a:	46bd      	mov	sp, r7
 801cd7c:	b00a      	add	sp, #40	; 0x28
 801cd7e:	bd80      	pop	{r7, pc}
 801cd80:	0801f0e8 	.word	0x0801f0e8
 801cd84:	20001344 	.word	0x20001344

0801cd88 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801cd88:	b580      	push	{r7, lr}
 801cd8a:	b088      	sub	sp, #32
 801cd8c:	af00      	add	r7, sp, #0
 801cd8e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cd90:	231f      	movs	r3, #31
 801cd92:	18fb      	adds	r3, r7, r3
 801cd94:	2200      	movs	r2, #0
 801cd96:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d05d      	beq.n	801ce5a <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd9e:	f3ef 8310 	mrs	r3, PRIMASK
 801cda2:	60fb      	str	r3, [r7, #12]
  return(result);
 801cda4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cda6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cda8:	b672      	cpsid	i
}
 801cdaa:	46c0      	nop			; (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801cdac:	4b30      	ldr	r3, [pc, #192]	; (801ce70 <UTIL_TIMER_Stop+0xe8>)
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801cdb2:	4b2f      	ldr	r3, [pc, #188]	; (801ce70 <UTIL_TIMER_Stop+0xe8>)
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	2201      	movs	r2, #1
 801cdbc:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801cdbe:	4b2c      	ldr	r3, [pc, #176]	; (801ce70 <UTIL_TIMER_Stop+0xe8>)
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d043      	beq.n	801ce4e <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	2200      	movs	r2, #0
 801cdca:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801cdcc:	4b28      	ldr	r3, [pc, #160]	; (801ce70 <UTIL_TIMER_Stop+0xe8>)
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	687a      	ldr	r2, [r7, #4]
 801cdd2:	429a      	cmp	r2, r3
 801cdd4:	d134      	bne.n	801ce40 <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801cdd6:	4b26      	ldr	r3, [pc, #152]	; (801ce70 <UTIL_TIMER_Stop+0xe8>)
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	2200      	movs	r2, #0
 801cddc:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801cdde:	4b24      	ldr	r3, [pc, #144]	; (801ce70 <UTIL_TIMER_Stop+0xe8>)
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	695b      	ldr	r3, [r3, #20]
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d00a      	beq.n	801cdfe <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801cde8:	4b21      	ldr	r3, [pc, #132]	; (801ce70 <UTIL_TIMER_Stop+0xe8>)
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	695a      	ldr	r2, [r3, #20]
 801cdee:	4b20      	ldr	r3, [pc, #128]	; (801ce70 <UTIL_TIMER_Stop+0xe8>)
 801cdf0:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801cdf2:	4b1f      	ldr	r3, [pc, #124]	; (801ce70 <UTIL_TIMER_Stop+0xe8>)
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	0018      	movs	r0, r3
 801cdf8:	f000 f944 	bl	801d084 <TimerSetTimeout>
 801cdfc:	e023      	b.n	801ce46 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801cdfe:	4b1d      	ldr	r3, [pc, #116]	; (801ce74 <UTIL_TIMER_Stop+0xec>)
 801ce00:	68db      	ldr	r3, [r3, #12]
 801ce02:	4798      	blx	r3
            TimerListHead = NULL;
 801ce04:	4b1a      	ldr	r3, [pc, #104]	; (801ce70 <UTIL_TIMER_Stop+0xe8>)
 801ce06:	2200      	movs	r2, #0
 801ce08:	601a      	str	r2, [r3, #0]
 801ce0a:	e01c      	b.n	801ce46 <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ce0c:	697a      	ldr	r2, [r7, #20]
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	429a      	cmp	r2, r3
 801ce12:	d110      	bne.n	801ce36 <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801ce14:	697b      	ldr	r3, [r7, #20]
 801ce16:	695b      	ldr	r3, [r3, #20]
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d006      	beq.n	801ce2a <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801ce1c:	697b      	ldr	r3, [r7, #20]
 801ce1e:	695b      	ldr	r3, [r3, #20]
 801ce20:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ce22:	69bb      	ldr	r3, [r7, #24]
 801ce24:	697a      	ldr	r2, [r7, #20]
 801ce26:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ce28:	e00d      	b.n	801ce46 <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801ce2a:	2300      	movs	r3, #0
 801ce2c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ce2e:	69bb      	ldr	r3, [r7, #24]
 801ce30:	697a      	ldr	r2, [r7, #20]
 801ce32:	615a      	str	r2, [r3, #20]
            break;
 801ce34:	e007      	b.n	801ce46 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801ce36:	697b      	ldr	r3, [r7, #20]
 801ce38:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ce3a:	697b      	ldr	r3, [r7, #20]
 801ce3c:	695b      	ldr	r3, [r3, #20]
 801ce3e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ce40:	697b      	ldr	r3, [r7, #20]
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d1e2      	bne.n	801ce0c <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ce46:	231f      	movs	r3, #31
 801ce48:	18fb      	adds	r3, r7, r3
 801ce4a:	2200      	movs	r2, #0
 801ce4c:	701a      	strb	r2, [r3, #0]
 801ce4e:	693b      	ldr	r3, [r7, #16]
 801ce50:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce52:	68bb      	ldr	r3, [r7, #8]
 801ce54:	f383 8810 	msr	PRIMASK, r3
}
 801ce58:	e003      	b.n	801ce62 <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801ce5a:	231f      	movs	r3, #31
 801ce5c:	18fb      	adds	r3, r7, r3
 801ce5e:	2201      	movs	r2, #1
 801ce60:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801ce62:	231f      	movs	r3, #31
 801ce64:	18fb      	adds	r3, r7, r3
 801ce66:	781b      	ldrb	r3, [r3, #0]
}
 801ce68:	0018      	movs	r0, r3
 801ce6a:	46bd      	mov	sp, r7
 801ce6c:	b008      	add	sp, #32
 801ce6e:	bd80      	pop	{r7, pc}
 801ce70:	20001344 	.word	0x20001344
 801ce74:	0801f0e8 	.word	0x0801f0e8

0801ce78 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801ce78:	b590      	push	{r4, r7, lr}
 801ce7a:	b085      	sub	sp, #20
 801ce7c:	af00      	add	r7, sp, #0
 801ce7e:	6078      	str	r0, [r7, #4]
 801ce80:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ce82:	210f      	movs	r1, #15
 801ce84:	187b      	adds	r3, r7, r1
 801ce86:	2200      	movs	r2, #0
 801ce88:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d103      	bne.n	801ce98 <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ce90:	187b      	adds	r3, r7, r1
 801ce92:	2201      	movs	r2, #1
 801ce94:	701a      	strb	r2, [r3, #0]
 801ce96:	e019      	b.n	801cecc <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ce98:	4b10      	ldr	r3, [pc, #64]	; (801cedc <UTIL_TIMER_SetPeriod+0x64>)
 801ce9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce9c:	683a      	ldr	r2, [r7, #0]
 801ce9e:	0010      	movs	r0, r2
 801cea0:	4798      	blx	r3
 801cea2:	0002      	movs	r2, r0
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	0018      	movs	r0, r3
 801ceac:	f000 f8ce 	bl	801d04c <TimerExists>
 801ceb0:	1e03      	subs	r3, r0, #0
 801ceb2:	d00b      	beq.n	801cecc <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	0018      	movs	r0, r3
 801ceb8:	f7ff ff66 	bl	801cd88 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801cebc:	230f      	movs	r3, #15
 801cebe:	18fc      	adds	r4, r7, r3
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	0018      	movs	r0, r3
 801cec4:	f7ff fee8 	bl	801cc98 <UTIL_TIMER_Start>
 801cec8:	0003      	movs	r3, r0
 801ceca:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801cecc:	230f      	movs	r3, #15
 801cece:	18fb      	adds	r3, r7, r3
 801ced0:	781b      	ldrb	r3, [r3, #0]
}
 801ced2:	0018      	movs	r0, r3
 801ced4:	46bd      	mov	sp, r7
 801ced6:	b005      	add	sp, #20
 801ced8:	bd90      	pop	{r4, r7, pc}
 801ceda:	46c0      	nop			; (mov r8, r8)
 801cedc:	0801f0e8 	.word	0x0801f0e8

0801cee0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801cee0:	b590      	push	{r4, r7, lr}
 801cee2:	b089      	sub	sp, #36	; 0x24
 801cee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cee6:	f3ef 8310 	mrs	r3, PRIMASK
 801ceea:	60bb      	str	r3, [r7, #8]
  return(result);
 801ceec:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ceee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801cef0:	b672      	cpsid	i
}
 801cef2:	46c0      	nop			; (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801cef4:	4b3a      	ldr	r3, [pc, #232]	; (801cfe0 <UTIL_TIMER_IRQ_Handler+0x100>)
 801cef6:	695b      	ldr	r3, [r3, #20]
 801cef8:	4798      	blx	r3
 801cefa:	0003      	movs	r3, r0
 801cefc:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801cefe:	4b38      	ldr	r3, [pc, #224]	; (801cfe0 <UTIL_TIMER_IRQ_Handler+0x100>)
 801cf00:	691b      	ldr	r3, [r3, #16]
 801cf02:	4798      	blx	r3
 801cf04:	0003      	movs	r3, r0
 801cf06:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801cf08:	693a      	ldr	r2, [r7, #16]
 801cf0a:	697b      	ldr	r3, [r7, #20]
 801cf0c:	1ad3      	subs	r3, r2, r3
 801cf0e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801cf10:	4b34      	ldr	r3, [pc, #208]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d038      	beq.n	801cf8a <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801cf18:	4b32      	ldr	r3, [pc, #200]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801cf1e:	69fb      	ldr	r3, [r7, #28]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	68fa      	ldr	r2, [r7, #12]
 801cf24:	429a      	cmp	r2, r3
 801cf26:	d206      	bcs.n	801cf36 <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801cf28:	69fb      	ldr	r3, [r7, #28]
 801cf2a:	681a      	ldr	r2, [r3, #0]
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	1ad2      	subs	r2, r2, r3
 801cf30:	69fb      	ldr	r3, [r7, #28]
 801cf32:	601a      	str	r2, [r3, #0]
 801cf34:	e002      	b.n	801cf3c <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801cf36:	69fb      	ldr	r3, [r7, #28]
 801cf38:	2200      	movs	r2, #0
 801cf3a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801cf3c:	69fb      	ldr	r3, [r7, #28]
 801cf3e:	695b      	ldr	r3, [r3, #20]
 801cf40:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801cf42:	69fb      	ldr	r3, [r7, #28]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d1ea      	bne.n	801cf1e <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cf48:	e01f      	b.n	801cf8a <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801cf4a:	4b26      	ldr	r3, [pc, #152]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801cf50:	4b24      	ldr	r3, [pc, #144]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	695a      	ldr	r2, [r3, #20]
 801cf56:	4b23      	ldr	r3, [pc, #140]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf58:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801cf5a:	69fb      	ldr	r3, [r7, #28]
 801cf5c:	2200      	movs	r2, #0
 801cf5e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801cf60:	69fb      	ldr	r3, [r7, #28]
 801cf62:	2200      	movs	r2, #0
 801cf64:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801cf66:	69fb      	ldr	r3, [r7, #28]
 801cf68:	68da      	ldr	r2, [r3, #12]
 801cf6a:	69fb      	ldr	r3, [r7, #28]
 801cf6c:	691b      	ldr	r3, [r3, #16]
 801cf6e:	0018      	movs	r0, r3
 801cf70:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801cf72:	69fb      	ldr	r3, [r7, #28]
 801cf74:	7adb      	ldrb	r3, [r3, #11]
 801cf76:	2b01      	cmp	r3, #1
 801cf78:	d107      	bne.n	801cf8a <UTIL_TIMER_IRQ_Handler+0xaa>
 801cf7a:	69fb      	ldr	r3, [r7, #28]
 801cf7c:	7a9b      	ldrb	r3, [r3, #10]
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d103      	bne.n	801cf8a <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801cf82:	69fb      	ldr	r3, [r7, #28]
 801cf84:	0018      	movs	r0, r3
 801cf86:	f7ff fe87 	bl	801cc98 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cf8a:	4b16      	ldr	r3, [pc, #88]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d00d      	beq.n	801cfae <UTIL_TIMER_IRQ_Handler+0xce>
 801cf92:	4b14      	ldr	r3, [pc, #80]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d0d6      	beq.n	801cf4a <UTIL_TIMER_IRQ_Handler+0x6a>
 801cf9c:	4b11      	ldr	r3, [pc, #68]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	681c      	ldr	r4, [r3, #0]
 801cfa2:	4b0f      	ldr	r3, [pc, #60]	; (801cfe0 <UTIL_TIMER_IRQ_Handler+0x100>)
 801cfa4:	699b      	ldr	r3, [r3, #24]
 801cfa6:	4798      	blx	r3
 801cfa8:	0003      	movs	r3, r0
 801cfaa:	429c      	cmp	r4, r3
 801cfac:	d3cd      	bcc.n	801cf4a <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801cfae:	4b0d      	ldr	r3, [pc, #52]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d009      	beq.n	801cfca <UTIL_TIMER_IRQ_Handler+0xea>
 801cfb6:	4b0b      	ldr	r3, [pc, #44]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cfb8:	681b      	ldr	r3, [r3, #0]
 801cfba:	7a1b      	ldrb	r3, [r3, #8]
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d104      	bne.n	801cfca <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801cfc0:	4b08      	ldr	r3, [pc, #32]	; (801cfe4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	0018      	movs	r0, r3
 801cfc6:	f000 f85d 	bl	801d084 <TimerSetTimeout>
 801cfca:	69bb      	ldr	r3, [r7, #24]
 801cfcc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	f383 8810 	msr	PRIMASK, r3
}
 801cfd4:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801cfd6:	46c0      	nop			; (mov r8, r8)
 801cfd8:	46bd      	mov	sp, r7
 801cfda:	b009      	add	sp, #36	; 0x24
 801cfdc:	bd90      	pop	{r4, r7, pc}
 801cfde:	46c0      	nop			; (mov r8, r8)
 801cfe0:	0801f0e8 	.word	0x0801f0e8
 801cfe4:	20001344 	.word	0x20001344

0801cfe8 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b082      	sub	sp, #8
 801cfec:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cfee:	4b07      	ldr	r3, [pc, #28]	; (801d00c <UTIL_TIMER_GetCurrentTime+0x24>)
 801cff0:	69db      	ldr	r3, [r3, #28]
 801cff2:	4798      	blx	r3
 801cff4:	0003      	movs	r3, r0
 801cff6:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801cff8:	4b04      	ldr	r3, [pc, #16]	; (801d00c <UTIL_TIMER_GetCurrentTime+0x24>)
 801cffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cffc:	687a      	ldr	r2, [r7, #4]
 801cffe:	0010      	movs	r0, r2
 801d000:	4798      	blx	r3
 801d002:	0003      	movs	r3, r0
}
 801d004:	0018      	movs	r0, r3
 801d006:	46bd      	mov	sp, r7
 801d008:	b002      	add	sp, #8
 801d00a:	bd80      	pop	{r7, pc}
 801d00c:	0801f0e8 	.word	0x0801f0e8

0801d010 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d010:	b580      	push	{r7, lr}
 801d012:	b084      	sub	sp, #16
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d018:	4b0b      	ldr	r3, [pc, #44]	; (801d048 <UTIL_TIMER_GetElapsedTime+0x38>)
 801d01a:	69db      	ldr	r3, [r3, #28]
 801d01c:	4798      	blx	r3
 801d01e:	0003      	movs	r3, r0
 801d020:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d022:	4b09      	ldr	r3, [pc, #36]	; (801d048 <UTIL_TIMER_GetElapsedTime+0x38>)
 801d024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d026:	687a      	ldr	r2, [r7, #4]
 801d028:	0010      	movs	r0, r2
 801d02a:	4798      	blx	r3
 801d02c:	0003      	movs	r3, r0
 801d02e:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d030:	4b05      	ldr	r3, [pc, #20]	; (801d048 <UTIL_TIMER_GetElapsedTime+0x38>)
 801d032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d034:	68f9      	ldr	r1, [r7, #12]
 801d036:	68ba      	ldr	r2, [r7, #8]
 801d038:	1a8a      	subs	r2, r1, r2
 801d03a:	0010      	movs	r0, r2
 801d03c:	4798      	blx	r3
 801d03e:	0003      	movs	r3, r0
}
 801d040:	0018      	movs	r0, r3
 801d042:	46bd      	mov	sp, r7
 801d044:	b004      	add	sp, #16
 801d046:	bd80      	pop	{r7, pc}
 801d048:	0801f0e8 	.word	0x0801f0e8

0801d04c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d04c:	b580      	push	{r7, lr}
 801d04e:	b084      	sub	sp, #16
 801d050:	af00      	add	r7, sp, #0
 801d052:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d054:	4b0a      	ldr	r3, [pc, #40]	; (801d080 <TimerExists+0x34>)
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d05a:	e008      	b.n	801d06e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d05c:	68fa      	ldr	r2, [r7, #12]
 801d05e:	687b      	ldr	r3, [r7, #4]
 801d060:	429a      	cmp	r2, r3
 801d062:	d101      	bne.n	801d068 <TimerExists+0x1c>
    {
      return true;
 801d064:	2301      	movs	r3, #1
 801d066:	e006      	b.n	801d076 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	695b      	ldr	r3, [r3, #20]
 801d06c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d06e:	68fb      	ldr	r3, [r7, #12]
 801d070:	2b00      	cmp	r3, #0
 801d072:	d1f3      	bne.n	801d05c <TimerExists+0x10>
  }
  return false;
 801d074:	2300      	movs	r3, #0
}
 801d076:	0018      	movs	r0, r3
 801d078:	46bd      	mov	sp, r7
 801d07a:	b004      	add	sp, #16
 801d07c:	bd80      	pop	{r7, pc}
 801d07e:	46c0      	nop			; (mov r8, r8)
 801d080:	20001344 	.word	0x20001344

0801d084 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d084:	b590      	push	{r4, r7, lr}
 801d086:	b085      	sub	sp, #20
 801d088:	af00      	add	r7, sp, #0
 801d08a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d08c:	4b11      	ldr	r3, [pc, #68]	; (801d0d4 <TimerSetTimeout+0x50>)
 801d08e:	6a1b      	ldr	r3, [r3, #32]
 801d090:	4798      	blx	r3
 801d092:	0003      	movs	r3, r0
 801d094:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	2201      	movs	r2, #1
 801d09a:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	681c      	ldr	r4, [r3, #0]
 801d0a0:	4b0c      	ldr	r3, [pc, #48]	; (801d0d4 <TimerSetTimeout+0x50>)
 801d0a2:	699b      	ldr	r3, [r3, #24]
 801d0a4:	4798      	blx	r3
 801d0a6:	0002      	movs	r2, r0
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	18d3      	adds	r3, r2, r3
 801d0ac:	429c      	cmp	r4, r3
 801d0ae:	d207      	bcs.n	801d0c0 <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d0b0:	4b08      	ldr	r3, [pc, #32]	; (801d0d4 <TimerSetTimeout+0x50>)
 801d0b2:	699b      	ldr	r3, [r3, #24]
 801d0b4:	4798      	blx	r3
 801d0b6:	0002      	movs	r2, r0
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	18d2      	adds	r2, r2, r3
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d0c0:	4b04      	ldr	r3, [pc, #16]	; (801d0d4 <TimerSetTimeout+0x50>)
 801d0c2:	689a      	ldr	r2, [r3, #8]
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	0018      	movs	r0, r3
 801d0ca:	4790      	blx	r2
}
 801d0cc:	46c0      	nop			; (mov r8, r8)
 801d0ce:	46bd      	mov	sp, r7
 801d0d0:	b005      	add	sp, #20
 801d0d2:	bd90      	pop	{r4, r7, pc}
 801d0d4:	0801f0e8 	.word	0x0801f0e8

0801d0d8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d0d8:	b580      	push	{r7, lr}
 801d0da:	b084      	sub	sp, #16
 801d0dc:	af00      	add	r7, sp, #0
 801d0de:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d0e0:	4b13      	ldr	r3, [pc, #76]	; (801d130 <TimerInsertTimer+0x58>)
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d0e6:	4b12      	ldr	r3, [pc, #72]	; (801d130 <TimerInsertTimer+0x58>)
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	695b      	ldr	r3, [r3, #20]
 801d0ec:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d0ee:	e012      	b.n	801d116 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	681a      	ldr	r2, [r3, #0]
 801d0f4:	68bb      	ldr	r3, [r7, #8]
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	429a      	cmp	r2, r3
 801d0fa:	d905      	bls.n	801d108 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d0fc:	68bb      	ldr	r3, [r7, #8]
 801d0fe:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d100:	68bb      	ldr	r3, [r7, #8]
 801d102:	695b      	ldr	r3, [r3, #20]
 801d104:	60bb      	str	r3, [r7, #8]
 801d106:	e006      	b.n	801d116 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d108:	68fb      	ldr	r3, [r7, #12]
 801d10a:	687a      	ldr	r2, [r7, #4]
 801d10c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	68ba      	ldr	r2, [r7, #8]
 801d112:	615a      	str	r2, [r3, #20]
        return;
 801d114:	e009      	b.n	801d12a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	695b      	ldr	r3, [r3, #20]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d1e8      	bne.n	801d0f0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d11e:	68fb      	ldr	r3, [r7, #12]
 801d120:	687a      	ldr	r2, [r7, #4]
 801d122:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	2200      	movs	r2, #0
 801d128:	615a      	str	r2, [r3, #20]
}
 801d12a:	46bd      	mov	sp, r7
 801d12c:	b004      	add	sp, #16
 801d12e:	bd80      	pop	{r7, pc}
 801d130:	20001344 	.word	0x20001344

0801d134 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d134:	b580      	push	{r7, lr}
 801d136:	b084      	sub	sp, #16
 801d138:	af00      	add	r7, sp, #0
 801d13a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d13c:	4b0b      	ldr	r3, [pc, #44]	; (801d16c <TimerInsertNewHeadTimer+0x38>)
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d142:	68fb      	ldr	r3, [r7, #12]
 801d144:	2b00      	cmp	r3, #0
 801d146:	d002      	beq.n	801d14e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	2200      	movs	r2, #0
 801d14c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	68fa      	ldr	r2, [r7, #12]
 801d152:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d154:	4b05      	ldr	r3, [pc, #20]	; (801d16c <TimerInsertNewHeadTimer+0x38>)
 801d156:	687a      	ldr	r2, [r7, #4]
 801d158:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801d15a:	4b04      	ldr	r3, [pc, #16]	; (801d16c <TimerInsertNewHeadTimer+0x38>)
 801d15c:	681b      	ldr	r3, [r3, #0]
 801d15e:	0018      	movs	r0, r3
 801d160:	f7ff ff90 	bl	801d084 <TimerSetTimeout>
}
 801d164:	46c0      	nop			; (mov r8, r8)
 801d166:	46bd      	mov	sp, r7
 801d168:	b004      	add	sp, #16
 801d16a:	bd80      	pop	{r7, pc}
 801d16c:	20001344 	.word	0x20001344

0801d170 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d170:	b580      	push	{r7, lr}
 801d172:	b084      	sub	sp, #16
 801d174:	af00      	add	r7, sp, #0
 801d176:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d178:	2300      	movs	r3, #0
 801d17a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d17c:	e00e      	b.n	801d19c <ee_skip_atoi+0x2c>
 801d17e:	68fa      	ldr	r2, [r7, #12]
 801d180:	0013      	movs	r3, r2
 801d182:	009b      	lsls	r3, r3, #2
 801d184:	189b      	adds	r3, r3, r2
 801d186:	005b      	lsls	r3, r3, #1
 801d188:	0018      	movs	r0, r3
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	1c59      	adds	r1, r3, #1
 801d190:	687a      	ldr	r2, [r7, #4]
 801d192:	6011      	str	r1, [r2, #0]
 801d194:	781b      	ldrb	r3, [r3, #0]
 801d196:	18c3      	adds	r3, r0, r3
 801d198:	3b30      	subs	r3, #48	; 0x30
 801d19a:	60fb      	str	r3, [r7, #12]
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	781b      	ldrb	r3, [r3, #0]
 801d1a2:	2b2f      	cmp	r3, #47	; 0x2f
 801d1a4:	d904      	bls.n	801d1b0 <ee_skip_atoi+0x40>
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	781b      	ldrb	r3, [r3, #0]
 801d1ac:	2b39      	cmp	r3, #57	; 0x39
 801d1ae:	d9e6      	bls.n	801d17e <ee_skip_atoi+0xe>
  return i;
 801d1b0:	68fb      	ldr	r3, [r7, #12]
}
 801d1b2:	0018      	movs	r0, r3
 801d1b4:	46bd      	mov	sp, r7
 801d1b6:	b004      	add	sp, #16
 801d1b8:	bd80      	pop	{r7, pc}
	...

0801d1bc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d1bc:	b580      	push	{r7, lr}
 801d1be:	b098      	sub	sp, #96	; 0x60
 801d1c0:	af00      	add	r7, sp, #0
 801d1c2:	60f8      	str	r0, [r7, #12]
 801d1c4:	60b9      	str	r1, [r7, #8]
 801d1c6:	607a      	str	r2, [r7, #4]
 801d1c8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d1ca:	4b72      	ldr	r3, [pc, #456]	; (801d394 <ee_number+0x1d8>)
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d1d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1d2:	2240      	movs	r2, #64	; 0x40
 801d1d4:	4013      	ands	r3, r2
 801d1d6:	d002      	beq.n	801d1de <ee_number+0x22>
 801d1d8:	4b6f      	ldr	r3, [pc, #444]	; (801d398 <ee_number+0x1dc>)
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d1de:	683b      	ldr	r3, [r7, #0]
 801d1e0:	2b01      	cmp	r3, #1
 801d1e2:	dd02      	ble.n	801d1ea <ee_number+0x2e>
 801d1e4:	683b      	ldr	r3, [r7, #0]
 801d1e6:	2b24      	cmp	r3, #36	; 0x24
 801d1e8:	dd01      	ble.n	801d1ee <ee_number+0x32>
 801d1ea:	2300      	movs	r3, #0
 801d1ec:	e0cd      	b.n	801d38a <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801d1ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1f0:	2201      	movs	r2, #1
 801d1f2:	4013      	ands	r3, r2
 801d1f4:	d001      	beq.n	801d1fa <ee_number+0x3e>
 801d1f6:	2230      	movs	r2, #48	; 0x30
 801d1f8:	e000      	b.n	801d1fc <ee_number+0x40>
 801d1fa:	2220      	movs	r2, #32
 801d1fc:	2353      	movs	r3, #83	; 0x53
 801d1fe:	18fb      	adds	r3, r7, r3
 801d200:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801d202:	215f      	movs	r1, #95	; 0x5f
 801d204:	187b      	adds	r3, r7, r1
 801d206:	2200      	movs	r2, #0
 801d208:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801d20a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d20c:	2202      	movs	r2, #2
 801d20e:	4013      	ands	r3, r2
 801d210:	d00b      	beq.n	801d22a <ee_number+0x6e>
  {
    if (num < 0)
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	2b00      	cmp	r3, #0
 801d216:	da08      	bge.n	801d22a <ee_number+0x6e>
    {
      sign = '-';
 801d218:	187b      	adds	r3, r7, r1
 801d21a:	222d      	movs	r2, #45	; 0x2d
 801d21c:	701a      	strb	r2, [r3, #0]
      num = -num;
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	425b      	negs	r3, r3
 801d222:	607b      	str	r3, [r7, #4]
      size--;
 801d224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d226:	3b01      	subs	r3, #1
 801d228:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801d22a:	2300      	movs	r3, #0
 801d22c:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d120      	bne.n	801d276 <ee_number+0xba>
    tmp[i++] = '0';
 801d234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d236:	1c5a      	adds	r2, r3, #1
 801d238:	657a      	str	r2, [r7, #84]	; 0x54
 801d23a:	2210      	movs	r2, #16
 801d23c:	18ba      	adds	r2, r7, r2
 801d23e:	2130      	movs	r1, #48	; 0x30
 801d240:	54d1      	strb	r1, [r2, r3]
 801d242:	e01b      	b.n	801d27c <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	683a      	ldr	r2, [r7, #0]
 801d248:	0011      	movs	r1, r2
 801d24a:	0018      	movs	r0, r3
 801d24c:	f7e2 fff4 	bl	8000238 <__aeabi_uidivmod>
 801d250:	000b      	movs	r3, r1
 801d252:	001a      	movs	r2, r3
 801d254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d256:	189a      	adds	r2, r3, r2
 801d258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d25a:	1c59      	adds	r1, r3, #1
 801d25c:	6579      	str	r1, [r7, #84]	; 0x54
 801d25e:	7811      	ldrb	r1, [r2, #0]
 801d260:	2210      	movs	r2, #16
 801d262:	18ba      	adds	r2, r7, r2
 801d264:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	683a      	ldr	r2, [r7, #0]
 801d26a:	0011      	movs	r1, r2
 801d26c:	0018      	movs	r0, r3
 801d26e:	f7e2 ff5d 	bl	800012c <__udivsi3>
 801d272:	0003      	movs	r3, r0
 801d274:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d1e3      	bne.n	801d244 <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801d27c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d27e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d280:	429a      	cmp	r2, r3
 801d282:	dd01      	ble.n	801d288 <ee_number+0xcc>
 801d284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d286:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d288:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d28c:	1ad3      	subs	r3, r2, r3
 801d28e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d292:	2201      	movs	r2, #1
 801d294:	4013      	ands	r3, r2
 801d296:	d112      	bne.n	801d2be <ee_number+0x102>
 801d298:	e00c      	b.n	801d2b4 <ee_number+0xf8>
 801d29a:	68fb      	ldr	r3, [r7, #12]
 801d29c:	1c5a      	adds	r2, r3, #1
 801d29e:	60fa      	str	r2, [r7, #12]
 801d2a0:	2220      	movs	r2, #32
 801d2a2:	701a      	strb	r2, [r3, #0]
 801d2a4:	68bb      	ldr	r3, [r7, #8]
 801d2a6:	3b01      	subs	r3, #1
 801d2a8:	60bb      	str	r3, [r7, #8]
 801d2aa:	68bb      	ldr	r3, [r7, #8]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d101      	bne.n	801d2b4 <ee_number+0xf8>
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	e06a      	b.n	801d38a <ee_number+0x1ce>
 801d2b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2b6:	1e5a      	subs	r2, r3, #1
 801d2b8:	66ba      	str	r2, [r7, #104]	; 0x68
 801d2ba:	2b00      	cmp	r3, #0
 801d2bc:	dced      	bgt.n	801d29a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d2be:	215f      	movs	r1, #95	; 0x5f
 801d2c0:	187b      	adds	r3, r7, r1
 801d2c2:	781b      	ldrb	r3, [r3, #0]
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d01c      	beq.n	801d302 <ee_number+0x146>
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	1c5a      	adds	r2, r3, #1
 801d2cc:	60fa      	str	r2, [r7, #12]
 801d2ce:	187a      	adds	r2, r7, r1
 801d2d0:	7812      	ldrb	r2, [r2, #0]
 801d2d2:	701a      	strb	r2, [r3, #0]
 801d2d4:	68bb      	ldr	r3, [r7, #8]
 801d2d6:	3b01      	subs	r3, #1
 801d2d8:	60bb      	str	r3, [r7, #8]
 801d2da:	68bb      	ldr	r3, [r7, #8]
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d110      	bne.n	801d302 <ee_number+0x146>
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	e052      	b.n	801d38a <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	1c5a      	adds	r2, r3, #1
 801d2e8:	60fa      	str	r2, [r7, #12]
 801d2ea:	2253      	movs	r2, #83	; 0x53
 801d2ec:	18ba      	adds	r2, r7, r2
 801d2ee:	7812      	ldrb	r2, [r2, #0]
 801d2f0:	701a      	strb	r2, [r3, #0]
 801d2f2:	68bb      	ldr	r3, [r7, #8]
 801d2f4:	3b01      	subs	r3, #1
 801d2f6:	60bb      	str	r3, [r7, #8]
 801d2f8:	68bb      	ldr	r3, [r7, #8]
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d101      	bne.n	801d302 <ee_number+0x146>
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	e043      	b.n	801d38a <ee_number+0x1ce>
 801d302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d304:	1e5a      	subs	r2, r3, #1
 801d306:	66ba      	str	r2, [r7, #104]	; 0x68
 801d308:	2b00      	cmp	r3, #0
 801d30a:	dceb      	bgt.n	801d2e4 <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d30c:	e00c      	b.n	801d328 <ee_number+0x16c>
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	1c5a      	adds	r2, r3, #1
 801d312:	60fa      	str	r2, [r7, #12]
 801d314:	2230      	movs	r2, #48	; 0x30
 801d316:	701a      	strb	r2, [r3, #0]
 801d318:	68bb      	ldr	r3, [r7, #8]
 801d31a:	3b01      	subs	r3, #1
 801d31c:	60bb      	str	r3, [r7, #8]
 801d31e:	68bb      	ldr	r3, [r7, #8]
 801d320:	2b00      	cmp	r3, #0
 801d322:	d101      	bne.n	801d328 <ee_number+0x16c>
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	e030      	b.n	801d38a <ee_number+0x1ce>
 801d328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d32a:	1e5a      	subs	r2, r3, #1
 801d32c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d32e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d330:	429a      	cmp	r2, r3
 801d332:	dbec      	blt.n	801d30e <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d334:	e010      	b.n	801d358 <ee_number+0x19c>
 801d336:	68fb      	ldr	r3, [r7, #12]
 801d338:	1c5a      	adds	r2, r3, #1
 801d33a:	60fa      	str	r2, [r7, #12]
 801d33c:	2210      	movs	r2, #16
 801d33e:	18b9      	adds	r1, r7, r2
 801d340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d342:	188a      	adds	r2, r1, r2
 801d344:	7812      	ldrb	r2, [r2, #0]
 801d346:	701a      	strb	r2, [r3, #0]
 801d348:	68bb      	ldr	r3, [r7, #8]
 801d34a:	3b01      	subs	r3, #1
 801d34c:	60bb      	str	r3, [r7, #8]
 801d34e:	68bb      	ldr	r3, [r7, #8]
 801d350:	2b00      	cmp	r3, #0
 801d352:	d101      	bne.n	801d358 <ee_number+0x19c>
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	e018      	b.n	801d38a <ee_number+0x1ce>
 801d358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d35a:	1e5a      	subs	r2, r3, #1
 801d35c:	657a      	str	r2, [r7, #84]	; 0x54
 801d35e:	2b00      	cmp	r3, #0
 801d360:	dce9      	bgt.n	801d336 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801d362:	e00c      	b.n	801d37e <ee_number+0x1c2>
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	1c5a      	adds	r2, r3, #1
 801d368:	60fa      	str	r2, [r7, #12]
 801d36a:	2220      	movs	r2, #32
 801d36c:	701a      	strb	r2, [r3, #0]
 801d36e:	68bb      	ldr	r3, [r7, #8]
 801d370:	3b01      	subs	r3, #1
 801d372:	60bb      	str	r3, [r7, #8]
 801d374:	68bb      	ldr	r3, [r7, #8]
 801d376:	2b00      	cmp	r3, #0
 801d378:	d101      	bne.n	801d37e <ee_number+0x1c2>
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	e005      	b.n	801d38a <ee_number+0x1ce>
 801d37e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d380:	1e5a      	subs	r2, r3, #1
 801d382:	66ba      	str	r2, [r7, #104]	; 0x68
 801d384:	2b00      	cmp	r3, #0
 801d386:	dced      	bgt.n	801d364 <ee_number+0x1a8>

  return str;
 801d388:	68fb      	ldr	r3, [r7, #12]
}
 801d38a:	0018      	movs	r0, r3
 801d38c:	46bd      	mov	sp, r7
 801d38e:	b018      	add	sp, #96	; 0x60
 801d390:	bd80      	pop	{r7, pc}
 801d392:	46c0      	nop			; (mov r8, r8)
 801d394:	200001d0 	.word	0x200001d0
 801d398:	200001d4 	.word	0x200001d4

0801d39c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d39c:	b590      	push	{r4, r7, lr}
 801d39e:	b093      	sub	sp, #76	; 0x4c
 801d3a0:	af04      	add	r7, sp, #16
 801d3a2:	60f8      	str	r0, [r7, #12]
 801d3a4:	60b9      	str	r1, [r7, #8]
 801d3a6:	607a      	str	r2, [r7, #4]
 801d3a8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d3aa:	68bb      	ldr	r3, [r7, #8]
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	dc01      	bgt.n	801d3b4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d3b0:	2300      	movs	r3, #0
 801d3b2:	e104      	b.n	801d5be <tiny_vsnprintf_like+0x222>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d3b8:	e0ec      	b.n	801d594 <tiny_vsnprintf_like+0x1f8>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d3ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	1ad2      	subs	r2, r2, r3
 801d3c0:	68bb      	ldr	r3, [r7, #8]
 801d3c2:	3b01      	subs	r3, #1
 801d3c4:	429a      	cmp	r2, r3
 801d3c6:	db00      	blt.n	801d3ca <tiny_vsnprintf_like+0x2e>
 801d3c8:	e0f2      	b.n	801d5b0 <tiny_vsnprintf_like+0x214>
    
    if (*fmt != '%')
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	781b      	ldrb	r3, [r3, #0]
 801d3ce:	2b25      	cmp	r3, #37	; 0x25
 801d3d0:	d006      	beq.n	801d3e0 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d3d2:	687a      	ldr	r2, [r7, #4]
 801d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3d6:	1c59      	adds	r1, r3, #1
 801d3d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d3da:	7812      	ldrb	r2, [r2, #0]
 801d3dc:	701a      	strb	r2, [r3, #0]
      continue;
 801d3de:	e0d6      	b.n	801d58e <tiny_vsnprintf_like+0x1f2>
    }
                  
    // Process flags
    flags = 0;
 801d3e0:	2300      	movs	r3, #0
 801d3e2:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	3301      	adds	r3, #1
 801d3e8:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	781b      	ldrb	r3, [r3, #0]
 801d3ee:	2b30      	cmp	r3, #48	; 0x30
 801d3f0:	d103      	bne.n	801d3fa <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d3f2:	6a3b      	ldr	r3, [r7, #32]
 801d3f4:	2201      	movs	r2, #1
 801d3f6:	4313      	orrs	r3, r2
 801d3f8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801d3fa:	2301      	movs	r3, #1
 801d3fc:	425b      	negs	r3, r3
 801d3fe:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	781b      	ldrb	r3, [r3, #0]
 801d404:	2b2f      	cmp	r3, #47	; 0x2f
 801d406:	d909      	bls.n	801d41c <tiny_vsnprintf_like+0x80>
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	781b      	ldrb	r3, [r3, #0]
 801d40c:	2b39      	cmp	r3, #57	; 0x39
 801d40e:	d805      	bhi.n	801d41c <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801d410:	1d3b      	adds	r3, r7, #4
 801d412:	0018      	movs	r0, r3
 801d414:	f7ff feac 	bl	801d170 <ee_skip_atoi>
 801d418:	0003      	movs	r3, r0
 801d41a:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801d41c:	2301      	movs	r3, #1
 801d41e:	425b      	negs	r3, r3
 801d420:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801d422:	2301      	movs	r3, #1
 801d424:	425b      	negs	r3, r3
 801d426:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801d428:	230a      	movs	r3, #10
 801d42a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	781b      	ldrb	r3, [r3, #0]
 801d430:	3b58      	subs	r3, #88	; 0x58
 801d432:	2b20      	cmp	r3, #32
 801d434:	d854      	bhi.n	801d4e0 <tiny_vsnprintf_like+0x144>
 801d436:	009a      	lsls	r2, r3, #2
 801d438:	4b63      	ldr	r3, [pc, #396]	; (801d5c8 <tiny_vsnprintf_like+0x22c>)
 801d43a:	18d3      	adds	r3, r2, r3
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d442:	1c5a      	adds	r2, r3, #1
 801d444:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d446:	2220      	movs	r2, #32
 801d448:	701a      	strb	r2, [r3, #0]
 801d44a:	69fb      	ldr	r3, [r7, #28]
 801d44c:	3b01      	subs	r3, #1
 801d44e:	61fb      	str	r3, [r7, #28]
 801d450:	69fb      	ldr	r3, [r7, #28]
 801d452:	2b00      	cmp	r3, #0
 801d454:	dcf4      	bgt.n	801d440 <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801d456:	683b      	ldr	r3, [r7, #0]
 801d458:	1d1a      	adds	r2, r3, #4
 801d45a:	603a      	str	r2, [r7, #0]
 801d45c:	6819      	ldr	r1, [r3, #0]
 801d45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d460:	1c5a      	adds	r2, r3, #1
 801d462:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d464:	b2ca      	uxtb	r2, r1
 801d466:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d468:	e091      	b.n	801d58e <tiny_vsnprintf_like+0x1f2>

      case 's':
        s = va_arg(args, char *);
 801d46a:	683b      	ldr	r3, [r7, #0]
 801d46c:	1d1a      	adds	r2, r3, #4
 801d46e:	603a      	str	r2, [r7, #0]
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d476:	2b00      	cmp	r3, #0
 801d478:	d101      	bne.n	801d47e <tiny_vsnprintf_like+0xe2>
 801d47a:	4b54      	ldr	r3, [pc, #336]	; (801d5cc <tiny_vsnprintf_like+0x230>)
 801d47c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d480:	0018      	movs	r0, r3
 801d482:	f7e2 fe41 	bl	8000108 <strlen>
 801d486:	0003      	movs	r3, r0
 801d488:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d48a:	e004      	b.n	801d496 <tiny_vsnprintf_like+0xfa>
 801d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d48e:	1c5a      	adds	r2, r3, #1
 801d490:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d492:	2220      	movs	r2, #32
 801d494:	701a      	strb	r2, [r3, #0]
 801d496:	69fb      	ldr	r3, [r7, #28]
 801d498:	1e5a      	subs	r2, r3, #1
 801d49a:	61fa      	str	r2, [r7, #28]
 801d49c:	693a      	ldr	r2, [r7, #16]
 801d49e:	429a      	cmp	r2, r3
 801d4a0:	dbf4      	blt.n	801d48c <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d4a2:	2300      	movs	r3, #0
 801d4a4:	62bb      	str	r3, [r7, #40]	; 0x28
 801d4a6:	e00a      	b.n	801d4be <tiny_vsnprintf_like+0x122>
 801d4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d4aa:	1c53      	adds	r3, r2, #1
 801d4ac:	627b      	str	r3, [r7, #36]	; 0x24
 801d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4b0:	1c59      	adds	r1, r3, #1
 801d4b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d4b4:	7812      	ldrb	r2, [r2, #0]
 801d4b6:	701a      	strb	r2, [r3, #0]
 801d4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4ba:	3301      	adds	r3, #1
 801d4bc:	62bb      	str	r3, [r7, #40]	; 0x28
 801d4be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d4c0:	693b      	ldr	r3, [r7, #16]
 801d4c2:	429a      	cmp	r2, r3
 801d4c4:	dbf0      	blt.n	801d4a8 <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d4c6:	e062      	b.n	801d58e <tiny_vsnprintf_like+0x1f2>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801d4c8:	6a3b      	ldr	r3, [r7, #32]
 801d4ca:	2240      	movs	r2, #64	; 0x40
 801d4cc:	4313      	orrs	r3, r2
 801d4ce:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d4d0:	2310      	movs	r3, #16
 801d4d2:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d4d4:	e02d      	b.n	801d532 <tiny_vsnprintf_like+0x196>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d4d6:	6a3b      	ldr	r3, [r7, #32]
 801d4d8:	2202      	movs	r2, #2
 801d4da:	4313      	orrs	r3, r2
 801d4dc:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d4de:	e025      	b.n	801d52c <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	781b      	ldrb	r3, [r3, #0]
 801d4e4:	2b25      	cmp	r3, #37	; 0x25
 801d4e6:	d004      	beq.n	801d4f2 <tiny_vsnprintf_like+0x156>
 801d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4ea:	1c5a      	adds	r2, r3, #1
 801d4ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d4ee:	2225      	movs	r2, #37	; 0x25
 801d4f0:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d4f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d4f4:	68fb      	ldr	r3, [r7, #12]
 801d4f6:	1ad2      	subs	r2, r2, r3
 801d4f8:	68bb      	ldr	r3, [r7, #8]
 801d4fa:	3b01      	subs	r3, #1
 801d4fc:	429a      	cmp	r2, r3
 801d4fe:	da17      	bge.n	801d530 <tiny_vsnprintf_like+0x194>
        if (*fmt)
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	781b      	ldrb	r3, [r3, #0]
 801d504:	2b00      	cmp	r3, #0
 801d506:	d006      	beq.n	801d516 <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801d508:	687a      	ldr	r2, [r7, #4]
 801d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d50c:	1c59      	adds	r1, r3, #1
 801d50e:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d510:	7812      	ldrb	r2, [r2, #0]
 801d512:	701a      	strb	r2, [r3, #0]
 801d514:	e002      	b.n	801d51c <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	3b01      	subs	r3, #1
 801d51a:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d51c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	1ad2      	subs	r2, r2, r3
 801d522:	68bb      	ldr	r3, [r7, #8]
 801d524:	3b01      	subs	r3, #1
 801d526:	429a      	cmp	r2, r3
 801d528:	db30      	blt.n	801d58c <tiny_vsnprintf_like+0x1f0>
 801d52a:	e002      	b.n	801d532 <tiny_vsnprintf_like+0x196>
        break;
 801d52c:	46c0      	nop			; (mov r8, r8)
 801d52e:	e000      	b.n	801d532 <tiny_vsnprintf_like+0x196>
        CHECK_STR_SIZE(buf, str, size);
 801d530:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801d532:	697b      	ldr	r3, [r7, #20]
 801d534:	2b6c      	cmp	r3, #108	; 0x6c
 801d536:	d105      	bne.n	801d544 <tiny_vsnprintf_like+0x1a8>
      num = va_arg(args, unsigned long);
 801d538:	683b      	ldr	r3, [r7, #0]
 801d53a:	1d1a      	adds	r2, r3, #4
 801d53c:	603a      	str	r2, [r7, #0]
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	637b      	str	r3, [r7, #52]	; 0x34
 801d542:	e00e      	b.n	801d562 <tiny_vsnprintf_like+0x1c6>
    else if (flags & SIGN)
 801d544:	6a3b      	ldr	r3, [r7, #32]
 801d546:	2202      	movs	r2, #2
 801d548:	4013      	ands	r3, r2
 801d54a:	d005      	beq.n	801d558 <tiny_vsnprintf_like+0x1bc>
      num = va_arg(args, int);
 801d54c:	683b      	ldr	r3, [r7, #0]
 801d54e:	1d1a      	adds	r2, r3, #4
 801d550:	603a      	str	r2, [r7, #0]
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	637b      	str	r3, [r7, #52]	; 0x34
 801d556:	e004      	b.n	801d562 <tiny_vsnprintf_like+0x1c6>
    else
      num = va_arg(args, unsigned int);
 801d558:	683b      	ldr	r3, [r7, #0]
 801d55a:	1d1a      	adds	r2, r3, #4
 801d55c:	603a      	str	r2, [r7, #0]
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d562:	68bb      	ldr	r3, [r7, #8]
 801d564:	1e5a      	subs	r2, r3, #1
 801d566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d568:	68fb      	ldr	r3, [r7, #12]
 801d56a:	1acb      	subs	r3, r1, r3
 801d56c:	1ad1      	subs	r1, r2, r3
 801d56e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d570:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801d572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d574:	6a3b      	ldr	r3, [r7, #32]
 801d576:	9302      	str	r3, [sp, #8]
 801d578:	69bb      	ldr	r3, [r7, #24]
 801d57a:	9301      	str	r3, [sp, #4]
 801d57c:	69fb      	ldr	r3, [r7, #28]
 801d57e:	9300      	str	r3, [sp, #0]
 801d580:	0023      	movs	r3, r4
 801d582:	f7ff fe1b 	bl	801d1bc <ee_number>
 801d586:	0003      	movs	r3, r0
 801d588:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d58a:	e000      	b.n	801d58e <tiny_vsnprintf_like+0x1f2>
        continue;
 801d58c:	46c0      	nop			; (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	3301      	adds	r3, #1
 801d592:	607b      	str	r3, [r7, #4]
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	781b      	ldrb	r3, [r3, #0]
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d000      	beq.n	801d59e <tiny_vsnprintf_like+0x202>
 801d59c:	e70d      	b.n	801d3ba <tiny_vsnprintf_like+0x1e>
 801d59e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d5a0:	68fb      	ldr	r3, [r7, #12]
 801d5a2:	1ad2      	subs	r2, r2, r3
 801d5a4:	68bb      	ldr	r3, [r7, #8]
 801d5a6:	3b01      	subs	r3, #1
 801d5a8:	429a      	cmp	r2, r3
 801d5aa:	db00      	blt.n	801d5ae <tiny_vsnprintf_like+0x212>
 801d5ac:	e705      	b.n	801d3ba <tiny_vsnprintf_like+0x1e>
 801d5ae:	e000      	b.n	801d5b2 <tiny_vsnprintf_like+0x216>
    CHECK_STR_SIZE(buf, str, size);
 801d5b0:	46c0      	nop			; (mov r8, r8)
  }

  *str = '\0';
 801d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5b4:	2200      	movs	r2, #0
 801d5b6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d5b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	1ad3      	subs	r3, r2, r3
}
 801d5be:	0018      	movs	r0, r3
 801d5c0:	46bd      	mov	sp, r7
 801d5c2:	b00f      	add	sp, #60	; 0x3c
 801d5c4:	bd90      	pop	{r4, r7, pc}
 801d5c6:	46c0      	nop			; (mov r8, r8)
 801d5c8:	0801ff54 	.word	0x0801ff54
 801d5cc:	0801ff4c 	.word	0x0801ff4c

0801d5d0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801d5d0:	b580      	push	{r7, lr}
 801d5d2:	b082      	sub	sp, #8
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	2203      	movs	r2, #3
 801d5dc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	2200      	movs	r2, #0
 801d5e2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	2203      	movs	r2, #3
 801d5e8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	2203      	movs	r2, #3
 801d5ee:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	2203      	movs	r2, #3
 801d5f4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	2203      	movs	r2, #3
 801d5fa:	715a      	strb	r2, [r3, #5]
}
 801d5fc:	46c0      	nop			; (mov r8, r8)
 801d5fe:	46bd      	mov	sp, r7
 801d600:	b002      	add	sp, #8
 801d602:	bd80      	pop	{r7, pc}

0801d604 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801d604:	b590      	push	{r4, r7, lr}
 801d606:	b08b      	sub	sp, #44	; 0x2c
 801d608:	af04      	add	r7, sp, #16
 801d60a:	60f8      	str	r0, [r7, #12]
 801d60c:	607a      	str	r2, [r7, #4]
 801d60e:	240b      	movs	r4, #11
 801d610:	193b      	adds	r3, r7, r4
 801d612:	1c0a      	adds	r2, r1, #0
 801d614:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d61a:	2116      	movs	r1, #22
 801d61c:	187a      	adds	r2, r7, r1
 801d61e:	18db      	adds	r3, r3, r3
 801d620:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801d622:	68fb      	ldr	r3, [r7, #12]
 801d624:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d626:	193b      	adds	r3, r7, r4
 801d628:	781b      	ldrb	r3, [r3, #0]
 801d62a:	b29a      	uxth	r2, r3
 801d62c:	187b      	adds	r3, r7, r1
 801d62e:	8819      	ldrh	r1, [r3, #0]
 801d630:	4b0f      	ldr	r3, [pc, #60]	; (801d670 <read_register16+0x6c>)
 801d632:	9302      	str	r3, [sp, #8]
 801d634:	2302      	movs	r3, #2
 801d636:	9301      	str	r3, [sp, #4]
 801d638:	2414      	movs	r4, #20
 801d63a:	193b      	adds	r3, r7, r4
 801d63c:	9300      	str	r3, [sp, #0]
 801d63e:	2301      	movs	r3, #1
 801d640:	f7ea fe0c 	bl	800825c <HAL_I2C_Mem_Read>
 801d644:	1e03      	subs	r3, r0, #0
 801d646:	d10e      	bne.n	801d666 <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801d648:	0021      	movs	r1, r4
 801d64a:	187b      	adds	r3, r7, r1
 801d64c:	785b      	ldrb	r3, [r3, #1]
 801d64e:	021b      	lsls	r3, r3, #8
 801d650:	b21a      	sxth	r2, r3
 801d652:	187b      	adds	r3, r7, r1
 801d654:	781b      	ldrb	r3, [r3, #0]
 801d656:	b21b      	sxth	r3, r3
 801d658:	4313      	orrs	r3, r2
 801d65a:	b21b      	sxth	r3, r3
 801d65c:	b29a      	uxth	r2, r3
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	801a      	strh	r2, [r3, #0]
		return true;
 801d662:	2301      	movs	r3, #1
 801d664:	e000      	b.n	801d668 <read_register16+0x64>
	} else
		return false;
 801d666:	2300      	movs	r3, #0

}
 801d668:	0018      	movs	r0, r3
 801d66a:	46bd      	mov	sp, r7
 801d66c:	b007      	add	sp, #28
 801d66e:	bd90      	pop	{r4, r7, pc}
 801d670:	00001388 	.word	0x00001388

0801d674 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801d674:	b5b0      	push	{r4, r5, r7, lr}
 801d676:	b08a      	sub	sp, #40	; 0x28
 801d678:	af04      	add	r7, sp, #16
 801d67a:	60f8      	str	r0, [r7, #12]
 801d67c:	0008      	movs	r0, r1
 801d67e:	607a      	str	r2, [r7, #4]
 801d680:	0019      	movs	r1, r3
 801d682:	240b      	movs	r4, #11
 801d684:	193b      	adds	r3, r7, r4
 801d686:	1c02      	adds	r2, r0, #0
 801d688:	701a      	strb	r2, [r3, #0]
 801d68a:	250a      	movs	r5, #10
 801d68c:	197b      	adds	r3, r7, r5
 801d68e:	1c0a      	adds	r2, r1, #0
 801d690:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d696:	2116      	movs	r1, #22
 801d698:	187a      	adds	r2, r7, r1
 801d69a:	18db      	adds	r3, r3, r3
 801d69c:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d6a2:	193b      	adds	r3, r7, r4
 801d6a4:	781b      	ldrb	r3, [r3, #0]
 801d6a6:	b29c      	uxth	r4, r3
 801d6a8:	197b      	adds	r3, r7, r5
 801d6aa:	781b      	ldrb	r3, [r3, #0]
 801d6ac:	b29b      	uxth	r3, r3
 801d6ae:	187a      	adds	r2, r7, r1
 801d6b0:	8811      	ldrh	r1, [r2, #0]
 801d6b2:	4a09      	ldr	r2, [pc, #36]	; (801d6d8 <read_data+0x64>)
 801d6b4:	9202      	str	r2, [sp, #8]
 801d6b6:	9301      	str	r3, [sp, #4]
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	9300      	str	r3, [sp, #0]
 801d6bc:	2301      	movs	r3, #1
 801d6be:	0022      	movs	r2, r4
 801d6c0:	f7ea fdcc 	bl	800825c <HAL_I2C_Mem_Read>
 801d6c4:	1e03      	subs	r3, r0, #0
 801d6c6:	d101      	bne.n	801d6cc <read_data+0x58>
		return 0;
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	e000      	b.n	801d6ce <read_data+0x5a>
	else
		return 1;
 801d6cc:	2301      	movs	r3, #1

}
 801d6ce:	0018      	movs	r0, r3
 801d6d0:	46bd      	mov	sp, r7
 801d6d2:	b006      	add	sp, #24
 801d6d4:	bdb0      	pop	{r4, r5, r7, pc}
 801d6d6:	46c0      	nop			; (mov r8, r8)
 801d6d8:	00001388 	.word	0x00001388

0801d6dc <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801d6dc:	b580      	push	{r7, lr}
 801d6de:	b082      	sub	sp, #8
 801d6e0:	af00      	add	r7, sp, #0
 801d6e2:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801d6e4:	687a      	ldr	r2, [r7, #4]
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	2188      	movs	r1, #136	; 0x88
 801d6ea:	0018      	movs	r0, r3
 801d6ec:	f7ff ff8a 	bl	801d604 <read_register16>
 801d6f0:	1e03      	subs	r3, r0, #0
 801d6f2:	d100      	bne.n	801d6f6 <read_calibration_data+0x1a>
 801d6f4:	e06d      	b.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	1c9a      	adds	r2, r3, #2
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	218a      	movs	r1, #138	; 0x8a
 801d6fe:	0018      	movs	r0, r3
 801d700:	f7ff ff80 	bl	801d604 <read_register16>
 801d704:	1e03      	subs	r3, r0, #0
 801d706:	d100      	bne.n	801d70a <read_calibration_data+0x2e>
 801d708:	e063      	b.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	1d1a      	adds	r2, r3, #4
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	218c      	movs	r1, #140	; 0x8c
 801d712:	0018      	movs	r0, r3
 801d714:	f7ff ff76 	bl	801d604 <read_register16>
 801d718:	1e03      	subs	r3, r0, #0
 801d71a:	d05a      	beq.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	1d9a      	adds	r2, r3, #6
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	218e      	movs	r1, #142	; 0x8e
 801d724:	0018      	movs	r0, r3
 801d726:	f7ff ff6d 	bl	801d604 <read_register16>
 801d72a:	1e03      	subs	r3, r0, #0
 801d72c:	d051      	beq.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	3308      	adds	r3, #8
 801d732:	001a      	movs	r2, r3
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	2190      	movs	r1, #144	; 0x90
 801d738:	0018      	movs	r0, r3
 801d73a:	f7ff ff63 	bl	801d604 <read_register16>
 801d73e:	1e03      	subs	r3, r0, #0
 801d740:	d047      	beq.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	330a      	adds	r3, #10
 801d746:	001a      	movs	r2, r3
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	2192      	movs	r1, #146	; 0x92
 801d74c:	0018      	movs	r0, r3
 801d74e:	f7ff ff59 	bl	801d604 <read_register16>
 801d752:	1e03      	subs	r3, r0, #0
 801d754:	d03d      	beq.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	330c      	adds	r3, #12
 801d75a:	001a      	movs	r2, r3
 801d75c:	687b      	ldr	r3, [r7, #4]
 801d75e:	2194      	movs	r1, #148	; 0x94
 801d760:	0018      	movs	r0, r3
 801d762:	f7ff ff4f 	bl	801d604 <read_register16>
 801d766:	1e03      	subs	r3, r0, #0
 801d768:	d033      	beq.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	330e      	adds	r3, #14
 801d76e:	001a      	movs	r2, r3
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	2196      	movs	r1, #150	; 0x96
 801d774:	0018      	movs	r0, r3
 801d776:	f7ff ff45 	bl	801d604 <read_register16>
 801d77a:	1e03      	subs	r3, r0, #0
 801d77c:	d029      	beq.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	3310      	adds	r3, #16
 801d782:	001a      	movs	r2, r3
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	2198      	movs	r1, #152	; 0x98
 801d788:	0018      	movs	r0, r3
 801d78a:	f7ff ff3b 	bl	801d604 <read_register16>
 801d78e:	1e03      	subs	r3, r0, #0
 801d790:	d01f      	beq.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	3312      	adds	r3, #18
 801d796:	001a      	movs	r2, r3
 801d798:	687b      	ldr	r3, [r7, #4]
 801d79a:	219a      	movs	r1, #154	; 0x9a
 801d79c:	0018      	movs	r0, r3
 801d79e:	f7ff ff31 	bl	801d604 <read_register16>
 801d7a2:	1e03      	subs	r3, r0, #0
 801d7a4:	d015      	beq.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	3314      	adds	r3, #20
 801d7aa:	001a      	movs	r2, r3
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	219c      	movs	r1, #156	; 0x9c
 801d7b0:	0018      	movs	r0, r3
 801d7b2:	f7ff ff27 	bl	801d604 <read_register16>
 801d7b6:	1e03      	subs	r3, r0, #0
 801d7b8:	d00b      	beq.n	801d7d2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	3316      	adds	r3, #22
 801d7be:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	219e      	movs	r1, #158	; 0x9e
 801d7c4:	0018      	movs	r0, r3
 801d7c6:	f7ff ff1d 	bl	801d604 <read_register16>
 801d7ca:	1e03      	subs	r3, r0, #0
 801d7cc:	d001      	beq.n	801d7d2 <read_calibration_data+0xf6>

		return true;
 801d7ce:	2301      	movs	r3, #1
 801d7d0:	e000      	b.n	801d7d4 <read_calibration_data+0xf8>
	}

	return false;
 801d7d2:	2300      	movs	r3, #0
}
 801d7d4:	0018      	movs	r0, r3
 801d7d6:	46bd      	mov	sp, r7
 801d7d8:	b002      	add	sp, #8
 801d7da:	bd80      	pop	{r7, pc}

0801d7dc <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801d7dc:	b5b0      	push	{r4, r5, r7, lr}
 801d7de:	b084      	sub	sp, #16
 801d7e0:	af00      	add	r7, sp, #0
 801d7e2:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	3318      	adds	r3, #24
 801d7e8:	001a      	movs	r2, r3
 801d7ea:	6878      	ldr	r0, [r7, #4]
 801d7ec:	2301      	movs	r3, #1
 801d7ee:	21a1      	movs	r1, #161	; 0xa1
 801d7f0:	f7ff ff40 	bl	801d674 <read_data>
 801d7f4:	1e03      	subs	r3, r0, #0
 801d7f6:	d14b      	bne.n	801d890 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	331a      	adds	r3, #26
 801d7fc:	001a      	movs	r2, r3
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	21e1      	movs	r1, #225	; 0xe1
 801d802:	0018      	movs	r0, r3
 801d804:	f7ff fefe 	bl	801d604 <read_register16>
 801d808:	1e03      	subs	r3, r0, #0
 801d80a:	d041      	beq.n	801d890 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	331c      	adds	r3, #28
 801d810:	001a      	movs	r2, r3
 801d812:	6878      	ldr	r0, [r7, #4]
 801d814:	2301      	movs	r3, #1
 801d816:	21e3      	movs	r1, #227	; 0xe3
 801d818:	f7ff ff2c 	bl	801d674 <read_data>
 801d81c:	1e03      	subs	r3, r0, #0
 801d81e:	d137      	bne.n	801d890 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 801d820:	240e      	movs	r4, #14
 801d822:	193a      	adds	r2, r7, r4
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	21e4      	movs	r1, #228	; 0xe4
 801d828:	0018      	movs	r0, r3
 801d82a:	f7ff feeb 	bl	801d604 <read_register16>
 801d82e:	1e03      	subs	r3, r0, #0
 801d830:	d02e      	beq.n	801d890 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 801d832:	250c      	movs	r5, #12
 801d834:	197a      	adds	r2, r7, r5
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	21e5      	movs	r1, #229	; 0xe5
 801d83a:	0018      	movs	r0, r3
 801d83c:	f7ff fee2 	bl	801d604 <read_register16>
 801d840:	1e03      	subs	r3, r0, #0
 801d842:	d025      	beq.n	801d890 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	3322      	adds	r3, #34	; 0x22
 801d848:	001a      	movs	r2, r3
 801d84a:	6878      	ldr	r0, [r7, #4]
 801d84c:	2301      	movs	r3, #1
 801d84e:	21e7      	movs	r1, #231	; 0xe7
 801d850:	f7ff ff10 	bl	801d674 <read_data>
 801d854:	1e03      	subs	r3, r0, #0
 801d856:	d11b      	bne.n	801d890 <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801d858:	193b      	adds	r3, r7, r4
 801d85a:	881b      	ldrh	r3, [r3, #0]
 801d85c:	011b      	lsls	r3, r3, #4
 801d85e:	b21a      	sxth	r2, r3
 801d860:	23ff      	movs	r3, #255	; 0xff
 801d862:	011b      	lsls	r3, r3, #4
 801d864:	4013      	ands	r3, r2
 801d866:	b21a      	sxth	r2, r3
 801d868:	193b      	adds	r3, r7, r4
 801d86a:	881b      	ldrh	r3, [r3, #0]
 801d86c:	121b      	asrs	r3, r3, #8
 801d86e:	b21b      	sxth	r3, r3
 801d870:	210f      	movs	r1, #15
 801d872:	400b      	ands	r3, r1
 801d874:	b21b      	sxth	r3, r3
 801d876:	4313      	orrs	r3, r2
 801d878:	b21a      	sxth	r2, r3
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801d87e:	197b      	adds	r3, r7, r5
 801d880:	881b      	ldrh	r3, [r3, #0]
 801d882:	091b      	lsrs	r3, r3, #4
 801d884:	b29b      	uxth	r3, r3
 801d886:	b21a      	sxth	r2, r3
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	841a      	strh	r2, [r3, #32]

		return true;
 801d88c:	2301      	movs	r3, #1
 801d88e:	e000      	b.n	801d892 <read_hum_calibration_data+0xb6>
	}

	return false;
 801d890:	2300      	movs	r3, #0
}
 801d892:	0018      	movs	r0, r3
 801d894:	46bd      	mov	sp, r7
 801d896:	b004      	add	sp, #16
 801d898:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d89c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801d89c:	b580      	push	{r7, lr}
 801d89e:	b088      	sub	sp, #32
 801d8a0:	af04      	add	r7, sp, #16
 801d8a2:	6078      	str	r0, [r7, #4]
 801d8a4:	0008      	movs	r0, r1
 801d8a6:	0011      	movs	r1, r2
 801d8a8:	1cfb      	adds	r3, r7, #3
 801d8aa:	1c02      	adds	r2, r0, #0
 801d8ac:	701a      	strb	r2, [r3, #0]
 801d8ae:	1cbb      	adds	r3, r7, #2
 801d8b0:	1c0a      	adds	r2, r1, #0
 801d8b2:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d8b8:	210e      	movs	r1, #14
 801d8ba:	187a      	adds	r2, r7, r1
 801d8bc:	18db      	adds	r3, r3, r3
 801d8be:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d8c4:	1cfb      	adds	r3, r7, #3
 801d8c6:	781b      	ldrb	r3, [r3, #0]
 801d8c8:	b29a      	uxth	r2, r3
 801d8ca:	187b      	adds	r3, r7, r1
 801d8cc:	8819      	ldrh	r1, [r3, #0]
 801d8ce:	4b09      	ldr	r3, [pc, #36]	; (801d8f4 <write_register8+0x58>)
 801d8d0:	9302      	str	r3, [sp, #8]
 801d8d2:	2301      	movs	r3, #1
 801d8d4:	9301      	str	r3, [sp, #4]
 801d8d6:	1cbb      	adds	r3, r7, #2
 801d8d8:	9300      	str	r3, [sp, #0]
 801d8da:	2301      	movs	r3, #1
 801d8dc:	f7ea fb90 	bl	8008000 <HAL_I2C_Mem_Write>
 801d8e0:	1e03      	subs	r3, r0, #0
 801d8e2:	d101      	bne.n	801d8e8 <write_register8+0x4c>
		return false;
 801d8e4:	2300      	movs	r3, #0
 801d8e6:	e000      	b.n	801d8ea <write_register8+0x4e>
	else
		return true;
 801d8e8:	2301      	movs	r3, #1
}
 801d8ea:	0018      	movs	r0, r3
 801d8ec:	46bd      	mov	sp, r7
 801d8ee:	b004      	add	sp, #16
 801d8f0:	bd80      	pop	{r7, pc}
 801d8f2:	46c0      	nop			; (mov r8, r8)
 801d8f4:	00002710 	.word	0x00002710

0801d8f8 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801d8f8:	b590      	push	{r4, r7, lr}
 801d8fa:	b085      	sub	sp, #20
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
 801d900:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d906:	2b76      	cmp	r3, #118	; 0x76
 801d908:	d005      	beq.n	801d916 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d90e:	2b77      	cmp	r3, #119	; 0x77
 801d910:	d001      	beq.n	801d916 <bmp280_init+0x1e>

		return false;
 801d912:	2300      	movs	r3, #0
 801d914:	e0a3      	b.n	801da5e <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	3332      	adds	r3, #50	; 0x32
 801d91a:	001a      	movs	r2, r3
 801d91c:	6878      	ldr	r0, [r7, #4]
 801d91e:	2301      	movs	r3, #1
 801d920:	21d0      	movs	r1, #208	; 0xd0
 801d922:	f7ff fea7 	bl	801d674 <read_data>
 801d926:	1e03      	subs	r3, r0, #0
 801d928:	d001      	beq.n	801d92e <bmp280_init+0x36>
		return false;
 801d92a:	2300      	movs	r3, #0
 801d92c:	e097      	b.n	801da5e <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	2232      	movs	r2, #50	; 0x32
 801d932:	5c9b      	ldrb	r3, [r3, r2]
 801d934:	2b58      	cmp	r3, #88	; 0x58
 801d936:	d006      	beq.n	801d946 <bmp280_init+0x4e>
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	2232      	movs	r2, #50	; 0x32
 801d93c:	5c9b      	ldrb	r3, [r3, r2]
 801d93e:	2b60      	cmp	r3, #96	; 0x60
 801d940:	d001      	beq.n	801d946 <bmp280_init+0x4e>

		return false;
 801d942:	2300      	movs	r3, #0
 801d944:	e08b      	b.n	801da5e <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	22b6      	movs	r2, #182	; 0xb6
 801d94a:	21e0      	movs	r1, #224	; 0xe0
 801d94c:	0018      	movs	r0, r3
 801d94e:	f7ff ffa5 	bl	801d89c <write_register8>
 801d952:	1e03      	subs	r3, r0, #0
 801d954:	d001      	beq.n	801d95a <bmp280_init+0x62>
		return false;
 801d956:	2300      	movs	r3, #0
 801d958:	e081      	b.n	801da5e <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801d95a:	240c      	movs	r4, #12
 801d95c:	193a      	adds	r2, r7, r4
 801d95e:	6878      	ldr	r0, [r7, #4]
 801d960:	2301      	movs	r3, #1
 801d962:	21f3      	movs	r1, #243	; 0xf3
 801d964:	f7ff fe86 	bl	801d674 <read_data>
 801d968:	1e03      	subs	r3, r0, #0
 801d96a:	d1f6      	bne.n	801d95a <bmp280_init+0x62>
				&& (status & 1) == 0)
 801d96c:	193b      	adds	r3, r7, r4
 801d96e:	781b      	ldrb	r3, [r3, #0]
 801d970:	001a      	movs	r2, r3
 801d972:	2301      	movs	r3, #1
 801d974:	4013      	ands	r3, r2
 801d976:	d1f0      	bne.n	801d95a <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	0018      	movs	r0, r3
 801d97c:	f7ff feae 	bl	801d6dc <read_calibration_data>
 801d980:	0003      	movs	r3, r0
 801d982:	001a      	movs	r2, r3
 801d984:	2301      	movs	r3, #1
 801d986:	4053      	eors	r3, r2
 801d988:	b2db      	uxtb	r3, r3
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d100      	bne.n	801d990 <bmp280_init+0x98>
 801d98e:	e001      	b.n	801d994 <bmp280_init+0x9c>
		return false;
 801d990:	2300      	movs	r3, #0
 801d992:	e064      	b.n	801da5e <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	2232      	movs	r2, #50	; 0x32
 801d998:	5c9b      	ldrb	r3, [r3, r2]
 801d99a:	2b60      	cmp	r3, #96	; 0x60
 801d99c:	d10c      	bne.n	801d9b8 <bmp280_init+0xc0>
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	0018      	movs	r0, r3
 801d9a2:	f7ff ff1b 	bl	801d7dc <read_hum_calibration_data>
 801d9a6:	0003      	movs	r3, r0
 801d9a8:	001a      	movs	r2, r3
 801d9aa:	2301      	movs	r3, #1
 801d9ac:	4053      	eors	r3, r2
 801d9ae:	b2db      	uxtb	r3, r3
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d001      	beq.n	801d9b8 <bmp280_init+0xc0>
		return false;
 801d9b4:	2300      	movs	r3, #0
 801d9b6:	e052      	b.n	801da5e <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801d9b8:	683b      	ldr	r3, [r7, #0]
 801d9ba:	795b      	ldrb	r3, [r3, #5]
 801d9bc:	015b      	lsls	r3, r3, #5
 801d9be:	b25a      	sxtb	r2, r3
 801d9c0:	683b      	ldr	r3, [r7, #0]
 801d9c2:	785b      	ldrb	r3, [r3, #1]
 801d9c4:	009b      	lsls	r3, r3, #2
 801d9c6:	b25b      	sxtb	r3, r3
 801d9c8:	4313      	orrs	r3, r2
 801d9ca:	b25a      	sxtb	r2, r3
 801d9cc:	210f      	movs	r1, #15
 801d9ce:	187b      	adds	r3, r7, r1
 801d9d0:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801d9d2:	187b      	adds	r3, r7, r1
 801d9d4:	781a      	ldrb	r2, [r3, #0]
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	21f5      	movs	r1, #245	; 0xf5
 801d9da:	0018      	movs	r0, r3
 801d9dc:	f7ff ff5e 	bl	801d89c <write_register8>
 801d9e0:	1e03      	subs	r3, r0, #0
 801d9e2:	d001      	beq.n	801d9e8 <bmp280_init+0xf0>
		return false;
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	e03a      	b.n	801da5e <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801d9e8:	683b      	ldr	r3, [r7, #0]
 801d9ea:	781b      	ldrb	r3, [r3, #0]
 801d9ec:	2b01      	cmp	r3, #1
 801d9ee:	d102      	bne.n	801d9f6 <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801d9f0:	683b      	ldr	r3, [r7, #0]
 801d9f2:	2200      	movs	r2, #0
 801d9f4:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d9f6:	683b      	ldr	r3, [r7, #0]
 801d9f8:	78db      	ldrb	r3, [r3, #3]
 801d9fa:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801d9fc:	b25a      	sxtb	r2, r3
 801d9fe:	683b      	ldr	r3, [r7, #0]
 801da00:	789b      	ldrb	r3, [r3, #2]
 801da02:	009b      	lsls	r3, r3, #2
 801da04:	b25b      	sxtb	r3, r3
 801da06:	4313      	orrs	r3, r2
 801da08:	b25a      	sxtb	r2, r3
 801da0a:	683b      	ldr	r3, [r7, #0]
 801da0c:	781b      	ldrb	r3, [r3, #0]
 801da0e:	b25b      	sxtb	r3, r3
 801da10:	4313      	orrs	r3, r2
 801da12:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801da14:	230e      	movs	r3, #14
 801da16:	18fb      	adds	r3, r7, r3
 801da18:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	2232      	movs	r2, #50	; 0x32
 801da1e:	5c9b      	ldrb	r3, [r3, r2]
 801da20:	2b60      	cmp	r3, #96	; 0x60
 801da22:	d10f      	bne.n	801da44 <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801da24:	210d      	movs	r1, #13
 801da26:	187b      	adds	r3, r7, r1
 801da28:	683a      	ldr	r2, [r7, #0]
 801da2a:	7912      	ldrb	r2, [r2, #4]
 801da2c:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801da2e:	187b      	adds	r3, r7, r1
 801da30:	781a      	ldrb	r2, [r3, #0]
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	21f2      	movs	r1, #242	; 0xf2
 801da36:	0018      	movs	r0, r3
 801da38:	f7ff ff30 	bl	801d89c <write_register8>
 801da3c:	1e03      	subs	r3, r0, #0
 801da3e:	d001      	beq.n	801da44 <bmp280_init+0x14c>
			return false;
 801da40:	2300      	movs	r3, #0
 801da42:	e00c      	b.n	801da5e <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801da44:	230e      	movs	r3, #14
 801da46:	18fb      	adds	r3, r7, r3
 801da48:	781a      	ldrb	r2, [r3, #0]
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	21f4      	movs	r1, #244	; 0xf4
 801da4e:	0018      	movs	r0, r3
 801da50:	f7ff ff24 	bl	801d89c <write_register8>
 801da54:	1e03      	subs	r3, r0, #0
 801da56:	d001      	beq.n	801da5c <bmp280_init+0x164>
		return false;
 801da58:	2300      	movs	r3, #0
 801da5a:	e000      	b.n	801da5e <bmp280_init+0x166>
	}

	return true;
 801da5c:	2301      	movs	r3, #1
}
 801da5e:	0018      	movs	r0, r3
 801da60:	46bd      	mov	sp, r7
 801da62:	b005      	add	sp, #20
 801da64:	bd90      	pop	{r4, r7, pc}

0801da66 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801da66:	b580      	push	{r7, lr}
 801da68:	b086      	sub	sp, #24
 801da6a:	af00      	add	r7, sp, #0
 801da6c:	60f8      	str	r0, [r7, #12]
 801da6e:	60b9      	str	r1, [r7, #8]
 801da70:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801da72:	68bb      	ldr	r3, [r7, #8]
 801da74:	10da      	asrs	r2, r3, #3
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	881b      	ldrh	r3, [r3, #0]
 801da7a:	005b      	lsls	r3, r3, #1
 801da7c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801da7e:	68fa      	ldr	r2, [r7, #12]
 801da80:	2102      	movs	r1, #2
 801da82:	5e52      	ldrsh	r2, [r2, r1]
 801da84:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801da86:	12db      	asrs	r3, r3, #11
 801da88:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801da8a:	68bb      	ldr	r3, [r7, #8]
 801da8c:	111b      	asrs	r3, r3, #4
 801da8e:	68fa      	ldr	r2, [r7, #12]
 801da90:	8812      	ldrh	r2, [r2, #0]
 801da92:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801da94:	68ba      	ldr	r2, [r7, #8]
 801da96:	1112      	asrs	r2, r2, #4
 801da98:	68f9      	ldr	r1, [r7, #12]
 801da9a:	8809      	ldrh	r1, [r1, #0]
 801da9c:	1a52      	subs	r2, r2, r1
 801da9e:	4353      	muls	r3, r2
 801daa0:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801daa2:	68fa      	ldr	r2, [r7, #12]
 801daa4:	2104      	movs	r1, #4
 801daa6:	5e52      	ldrsh	r2, [r2, r1]
 801daa8:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801daaa:	139b      	asrs	r3, r3, #14
 801daac:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801daae:	697a      	ldr	r2, [r7, #20]
 801dab0:	693b      	ldr	r3, [r7, #16]
 801dab2:	18d2      	adds	r2, r2, r3
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	681a      	ldr	r2, [r3, #0]
 801dabc:	0013      	movs	r3, r2
 801dabe:	009b      	lsls	r3, r3, #2
 801dac0:	189b      	adds	r3, r3, r2
 801dac2:	3380      	adds	r3, #128	; 0x80
 801dac4:	121b      	asrs	r3, r3, #8
}
 801dac6:	0018      	movs	r0, r3
 801dac8:	46bd      	mov	sp, r7
 801daca:	b006      	add	sp, #24
 801dacc:	bd80      	pop	{r7, pc}
	...

0801dad0 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801dad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dad2:	b0af      	sub	sp, #188	; 0xbc
 801dad4:	af00      	add	r7, sp, #0
 801dad6:	239c      	movs	r3, #156	; 0x9c
 801dad8:	18fe      	adds	r6, r7, r3
 801dada:	6030      	str	r0, [r6, #0]
 801dadc:	2098      	movs	r0, #152	; 0x98
 801dade:	1838      	adds	r0, r7, r0
 801dae0:	6001      	str	r1, [r0, #0]
 801dae2:	2194      	movs	r1, #148	; 0x94
 801dae4:	1878      	adds	r0, r7, r1
 801dae6:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801dae8:	187a      	adds	r2, r7, r1
 801daea:	6813      	ldr	r3, [r2, #0]
 801daec:	65bb      	str	r3, [r7, #88]	; 0x58
 801daee:	17db      	asrs	r3, r3, #31
 801daf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801daf2:	4ace      	ldr	r2, [pc, #824]	; (801de2c <compensate_pressure+0x35c>)
 801daf4:	2301      	movs	r3, #1
 801daf6:	425b      	negs	r3, r3
 801daf8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801dafa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801dafc:	1880      	adds	r0, r0, r2
 801dafe:	4159      	adcs	r1, r3
 801db00:	0002      	movs	r2, r0
 801db02:	000b      	movs	r3, r1
 801db04:	26b0      	movs	r6, #176	; 0xb0
 801db06:	19b9      	adds	r1, r7, r6
 801db08:	600a      	str	r2, [r1, #0]
 801db0a:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801db0c:	19ba      	adds	r2, r7, r6
 801db0e:	6853      	ldr	r3, [r2, #4]
 801db10:	6812      	ldr	r2, [r2, #0]
 801db12:	19b9      	adds	r1, r7, r6
 801db14:	6808      	ldr	r0, [r1, #0]
 801db16:	6849      	ldr	r1, [r1, #4]
 801db18:	f7e2 fd3a 	bl	8000590 <__aeabi_lmul>
 801db1c:	0002      	movs	r2, r0
 801db1e:	000b      	movs	r3, r1
 801db20:	0010      	movs	r0, r2
 801db22:	0019      	movs	r1, r3
 801db24:	239c      	movs	r3, #156	; 0x9c
 801db26:	18fa      	adds	r2, r7, r3
 801db28:	6813      	ldr	r3, [r2, #0]
 801db2a:	2210      	movs	r2, #16
 801db2c:	5e9b      	ldrsh	r3, [r3, r2]
 801db2e:	653b      	str	r3, [r7, #80]	; 0x50
 801db30:	17db      	asrs	r3, r3, #31
 801db32:	657b      	str	r3, [r7, #84]	; 0x54
 801db34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801db36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db38:	f7e2 fd2a 	bl	8000590 <__aeabi_lmul>
 801db3c:	0002      	movs	r2, r0
 801db3e:	000b      	movs	r3, r1
 801db40:	21a8      	movs	r1, #168	; 0xa8
 801db42:	1878      	adds	r0, r7, r1
 801db44:	6002      	str	r2, [r0, #0]
 801db46:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801db48:	239c      	movs	r3, #156	; 0x9c
 801db4a:	18fa      	adds	r2, r7, r3
 801db4c:	6813      	ldr	r3, [r2, #0]
 801db4e:	220e      	movs	r2, #14
 801db50:	5e9b      	ldrsh	r3, [r3, r2]
 801db52:	64bb      	str	r3, [r7, #72]	; 0x48
 801db54:	17db      	asrs	r3, r3, #31
 801db56:	64fb      	str	r3, [r7, #76]	; 0x4c
 801db58:	19ba      	adds	r2, r7, r6
 801db5a:	6853      	ldr	r3, [r2, #4]
 801db5c:	6812      	ldr	r2, [r2, #0]
 801db5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801db60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801db62:	f7e2 fd15 	bl	8000590 <__aeabi_lmul>
 801db66:	0002      	movs	r2, r0
 801db68:	000b      	movs	r3, r1
 801db6a:	0bd1      	lsrs	r1, r2, #15
 801db6c:	045d      	lsls	r5, r3, #17
 801db6e:	430d      	orrs	r5, r1
 801db70:	0454      	lsls	r4, r2, #17
 801db72:	21a8      	movs	r1, #168	; 0xa8
 801db74:	187a      	adds	r2, r7, r1
 801db76:	6853      	ldr	r3, [r2, #4]
 801db78:	6812      	ldr	r2, [r2, #0]
 801db7a:	1912      	adds	r2, r2, r4
 801db7c:	416b      	adcs	r3, r5
 801db7e:	1878      	adds	r0, r7, r1
 801db80:	6002      	str	r2, [r0, #0]
 801db82:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801db84:	259c      	movs	r5, #156	; 0x9c
 801db86:	197b      	adds	r3, r7, r5
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	220c      	movs	r2, #12
 801db8c:	5e9b      	ldrsh	r3, [r3, r2]
 801db8e:	643b      	str	r3, [r7, #64]	; 0x40
 801db90:	17db      	asrs	r3, r3, #31
 801db92:	647b      	str	r3, [r7, #68]	; 0x44
 801db94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db96:	00db      	lsls	r3, r3, #3
 801db98:	63fb      	str	r3, [r7, #60]	; 0x3c
 801db9a:	2300      	movs	r3, #0
 801db9c:	63bb      	str	r3, [r7, #56]	; 0x38
 801db9e:	000c      	movs	r4, r1
 801dba0:	187b      	adds	r3, r7, r1
 801dba2:	681a      	ldr	r2, [r3, #0]
 801dba4:	685b      	ldr	r3, [r3, #4]
 801dba6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801dba8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801dbaa:	1812      	adds	r2, r2, r0
 801dbac:	414b      	adcs	r3, r1
 801dbae:	1939      	adds	r1, r7, r4
 801dbb0:	600a      	str	r2, [r1, #0]
 801dbb2:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801dbb4:	0034      	movs	r4, r6
 801dbb6:	193b      	adds	r3, r7, r4
 801dbb8:	681a      	ldr	r2, [r3, #0]
 801dbba:	685b      	ldr	r3, [r3, #4]
 801dbbc:	1939      	adds	r1, r7, r4
 801dbbe:	6808      	ldr	r0, [r1, #0]
 801dbc0:	6849      	ldr	r1, [r1, #4]
 801dbc2:	f7e2 fce5 	bl	8000590 <__aeabi_lmul>
 801dbc6:	0002      	movs	r2, r0
 801dbc8:	000b      	movs	r3, r1
 801dbca:	0010      	movs	r0, r2
 801dbcc:	0019      	movs	r1, r3
 801dbce:	197b      	adds	r3, r7, r5
 801dbd0:	681b      	ldr	r3, [r3, #0]
 801dbd2:	220a      	movs	r2, #10
 801dbd4:	5e9b      	ldrsh	r3, [r3, r2]
 801dbd6:	633b      	str	r3, [r7, #48]	; 0x30
 801dbd8:	17db      	asrs	r3, r3, #31
 801dbda:	637b      	str	r3, [r7, #52]	; 0x34
 801dbdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbe0:	f7e2 fcd6 	bl	8000590 <__aeabi_lmul>
 801dbe4:	0002      	movs	r2, r0
 801dbe6:	000b      	movs	r3, r1
 801dbe8:	0619      	lsls	r1, r3, #24
 801dbea:	468c      	mov	ip, r1
 801dbec:	0a10      	lsrs	r0, r2, #8
 801dbee:	2688      	movs	r6, #136	; 0x88
 801dbf0:	19b9      	adds	r1, r7, r6
 801dbf2:	6008      	str	r0, [r1, #0]
 801dbf4:	19b8      	adds	r0, r7, r6
 801dbf6:	6800      	ldr	r0, [r0, #0]
 801dbf8:	4661      	mov	r1, ip
 801dbfa:	4308      	orrs	r0, r1
 801dbfc:	19b9      	adds	r1, r7, r6
 801dbfe:	6008      	str	r0, [r1, #0]
 801dc00:	121b      	asrs	r3, r3, #8
 801dc02:	228c      	movs	r2, #140	; 0x8c
 801dc04:	18ba      	adds	r2, r7, r2
 801dc06:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801dc08:	197b      	adds	r3, r7, r5
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	2208      	movs	r2, #8
 801dc0e:	5e9b      	ldrsh	r3, [r3, r2]
 801dc10:	62bb      	str	r3, [r7, #40]	; 0x28
 801dc12:	17db      	asrs	r3, r3, #31
 801dc14:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dc16:	193b      	adds	r3, r7, r4
 801dc18:	681a      	ldr	r2, [r3, #0]
 801dc1a:	685b      	ldr	r3, [r3, #4]
 801dc1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dc1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dc20:	f7e2 fcb6 	bl	8000590 <__aeabi_lmul>
 801dc24:	0002      	movs	r2, r0
 801dc26:	000b      	movs	r3, r1
 801dc28:	0d11      	lsrs	r1, r2, #20
 801dc2a:	468c      	mov	ip, r1
 801dc2c:	0318      	lsls	r0, r3, #12
 801dc2e:	2184      	movs	r1, #132	; 0x84
 801dc30:	1879      	adds	r1, r7, r1
 801dc32:	6008      	str	r0, [r1, #0]
 801dc34:	2084      	movs	r0, #132	; 0x84
 801dc36:	1839      	adds	r1, r7, r0
 801dc38:	6808      	ldr	r0, [r1, #0]
 801dc3a:	4661      	mov	r1, ip
 801dc3c:	4308      	orrs	r0, r1
 801dc3e:	2184      	movs	r1, #132	; 0x84
 801dc40:	1879      	adds	r1, r7, r1
 801dc42:	6008      	str	r0, [r1, #0]
 801dc44:	0313      	lsls	r3, r2, #12
 801dc46:	2180      	movs	r1, #128	; 0x80
 801dc48:	187a      	adds	r2, r7, r1
 801dc4a:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801dc4c:	19bb      	adds	r3, r7, r6
 801dc4e:	681a      	ldr	r2, [r3, #0]
 801dc50:	685b      	ldr	r3, [r3, #4]
 801dc52:	1879      	adds	r1, r7, r1
 801dc54:	6808      	ldr	r0, [r1, #0]
 801dc56:	6849      	ldr	r1, [r1, #4]
 801dc58:	1812      	adds	r2, r2, r0
 801dc5a:	414b      	adcs	r3, r1
 801dc5c:	1939      	adds	r1, r7, r4
 801dc5e:	600a      	str	r2, [r1, #0]
 801dc60:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801dc62:	193b      	adds	r3, r7, r4
 801dc64:	6818      	ldr	r0, [r3, #0]
 801dc66:	6859      	ldr	r1, [r3, #4]
 801dc68:	2200      	movs	r2, #0
 801dc6a:	2380      	movs	r3, #128	; 0x80
 801dc6c:	021b      	lsls	r3, r3, #8
 801dc6e:	1880      	adds	r0, r0, r2
 801dc70:	4159      	adcs	r1, r3
 801dc72:	197b      	adds	r3, r7, r5
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	88db      	ldrh	r3, [r3, #6]
 801dc78:	623b      	str	r3, [r7, #32]
 801dc7a:	2300      	movs	r3, #0
 801dc7c:	627b      	str	r3, [r7, #36]	; 0x24
 801dc7e:	6a3a      	ldr	r2, [r7, #32]
 801dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc82:	f7e2 fc85 	bl	8000590 <__aeabi_lmul>
 801dc86:	0002      	movs	r2, r0
 801dc88:	000b      	movs	r3, r1
 801dc8a:	1059      	asrs	r1, r3, #1
 801dc8c:	1938      	adds	r0, r7, r4
 801dc8e:	6001      	str	r1, [r0, #0]
 801dc90:	17db      	asrs	r3, r3, #31
 801dc92:	21b4      	movs	r1, #180	; 0xb4
 801dc94:	187a      	adds	r2, r7, r1
 801dc96:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 801dc98:	193b      	adds	r3, r7, r4
 801dc9a:	681a      	ldr	r2, [r3, #0]
 801dc9c:	187b      	adds	r3, r7, r1
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	431a      	orrs	r2, r3
 801dca2:	d101      	bne.n	801dca8 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 801dca4:	2300      	movs	r3, #0
 801dca6:	e0bc      	b.n	801de22 <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 801dca8:	2398      	movs	r3, #152	; 0x98
 801dcaa:	18fb      	adds	r3, r7, r3
 801dcac:	681a      	ldr	r2, [r3, #0]
 801dcae:	2380      	movs	r3, #128	; 0x80
 801dcb0:	035b      	lsls	r3, r3, #13
 801dcb2:	1a9b      	subs	r3, r3, r2
 801dcb4:	24a0      	movs	r4, #160	; 0xa0
 801dcb6:	193a      	adds	r2, r7, r4
 801dcb8:	6013      	str	r3, [r2, #0]
 801dcba:	17db      	asrs	r3, r3, #31
 801dcbc:	25a4      	movs	r5, #164	; 0xa4
 801dcbe:	197a      	adds	r2, r7, r5
 801dcc0:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 801dcc2:	193b      	adds	r3, r7, r4
 801dcc4:	681b      	ldr	r3, [r3, #0]
 801dcc6:	105b      	asrs	r3, r3, #1
 801dcc8:	61fb      	str	r3, [r7, #28]
 801dcca:	193b      	adds	r3, r7, r4
 801dccc:	681b      	ldr	r3, [r3, #0]
 801dcce:	07db      	lsls	r3, r3, #31
 801dcd0:	61bb      	str	r3, [r7, #24]
 801dcd2:	20a8      	movs	r0, #168	; 0xa8
 801dcd4:	183a      	adds	r2, r7, r0
 801dcd6:	6853      	ldr	r3, [r2, #4]
 801dcd8:	6812      	ldr	r2, [r2, #0]
 801dcda:	69b8      	ldr	r0, [r7, #24]
 801dcdc:	69f9      	ldr	r1, [r7, #28]
 801dcde:	1a80      	subs	r0, r0, r2
 801dce0:	4199      	sbcs	r1, r3
 801dce2:	4a53      	ldr	r2, [pc, #332]	; (801de30 <compensate_pressure+0x360>)
 801dce4:	2300      	movs	r3, #0
 801dce6:	f7e2 fc53 	bl	8000590 <__aeabi_lmul>
 801dcea:	0002      	movs	r2, r0
 801dcec:	000b      	movs	r3, r1
 801dcee:	0010      	movs	r0, r2
 801dcf0:	0019      	movs	r1, r3
 801dcf2:	23b0      	movs	r3, #176	; 0xb0
 801dcf4:	18fa      	adds	r2, r7, r3
 801dcf6:	6853      	ldr	r3, [r2, #4]
 801dcf8:	6812      	ldr	r2, [r2, #0]
 801dcfa:	f7e2 fc05 	bl	8000508 <__aeabi_ldivmod>
 801dcfe:	0002      	movs	r2, r0
 801dd00:	000b      	movs	r3, r1
 801dd02:	1939      	adds	r1, r7, r4
 801dd04:	600a      	str	r2, [r1, #0]
 801dd06:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801dd08:	269c      	movs	r6, #156	; 0x9c
 801dd0a:	19ba      	adds	r2, r7, r6
 801dd0c:	6813      	ldr	r3, [r2, #0]
 801dd0e:	2216      	movs	r2, #22
 801dd10:	5e9b      	ldrsh	r3, [r3, r2]
 801dd12:	613b      	str	r3, [r7, #16]
 801dd14:	17db      	asrs	r3, r3, #31
 801dd16:	617b      	str	r3, [r7, #20]
 801dd18:	197a      	adds	r2, r7, r5
 801dd1a:	6813      	ldr	r3, [r2, #0]
 801dd1c:	04da      	lsls	r2, r3, #19
 801dd1e:	1939      	adds	r1, r7, r4
 801dd20:	680b      	ldr	r3, [r1, #0]
 801dd22:	0b5b      	lsrs	r3, r3, #13
 801dd24:	67bb      	str	r3, [r7, #120]	; 0x78
 801dd26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801dd28:	4313      	orrs	r3, r2
 801dd2a:	67bb      	str	r3, [r7, #120]	; 0x78
 801dd2c:	197a      	adds	r2, r7, r5
 801dd2e:	6813      	ldr	r3, [r2, #0]
 801dd30:	135b      	asrs	r3, r3, #13
 801dd32:	67fb      	str	r3, [r7, #124]	; 0x7c
 801dd34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801dd36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dd38:	6938      	ldr	r0, [r7, #16]
 801dd3a:	6979      	ldr	r1, [r7, #20]
 801dd3c:	f7e2 fc28 	bl	8000590 <__aeabi_lmul>
 801dd40:	0002      	movs	r2, r0
 801dd42:	000b      	movs	r3, r1
 801dd44:	0010      	movs	r0, r2
 801dd46:	0019      	movs	r1, r3
 801dd48:	197a      	adds	r2, r7, r5
 801dd4a:	6813      	ldr	r3, [r2, #0]
 801dd4c:	04da      	lsls	r2, r3, #19
 801dd4e:	193b      	adds	r3, r7, r4
 801dd50:	681b      	ldr	r3, [r3, #0]
 801dd52:	0b5b      	lsrs	r3, r3, #13
 801dd54:	673b      	str	r3, [r7, #112]	; 0x70
 801dd56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dd58:	4313      	orrs	r3, r2
 801dd5a:	673b      	str	r3, [r7, #112]	; 0x70
 801dd5c:	197a      	adds	r2, r7, r5
 801dd5e:	6813      	ldr	r3, [r2, #0]
 801dd60:	135b      	asrs	r3, r3, #13
 801dd62:	677b      	str	r3, [r7, #116]	; 0x74
 801dd64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801dd66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dd68:	f7e2 fc12 	bl	8000590 <__aeabi_lmul>
 801dd6c:	0002      	movs	r2, r0
 801dd6e:	000b      	movs	r3, r1
 801dd70:	01d9      	lsls	r1, r3, #7
 801dd72:	0e50      	lsrs	r0, r2, #25
 801dd74:	4301      	orrs	r1, r0
 801dd76:	25b0      	movs	r5, #176	; 0xb0
 801dd78:	1978      	adds	r0, r7, r5
 801dd7a:	6001      	str	r1, [r0, #0]
 801dd7c:	165b      	asrs	r3, r3, #25
 801dd7e:	22b4      	movs	r2, #180	; 0xb4
 801dd80:	18ba      	adds	r2, r7, r2
 801dd82:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801dd84:	19ba      	adds	r2, r7, r6
 801dd86:	6813      	ldr	r3, [r2, #0]
 801dd88:	2214      	movs	r2, #20
 801dd8a:	5e9b      	ldrsh	r3, [r3, r2]
 801dd8c:	60bb      	str	r3, [r7, #8]
 801dd8e:	17db      	asrs	r3, r3, #31
 801dd90:	60fb      	str	r3, [r7, #12]
 801dd92:	193a      	adds	r2, r7, r4
 801dd94:	6853      	ldr	r3, [r2, #4]
 801dd96:	6812      	ldr	r2, [r2, #0]
 801dd98:	68b8      	ldr	r0, [r7, #8]
 801dd9a:	68f9      	ldr	r1, [r7, #12]
 801dd9c:	f7e2 fbf8 	bl	8000590 <__aeabi_lmul>
 801dda0:	0002      	movs	r2, r0
 801dda2:	000b      	movs	r3, r1
 801dda4:	0359      	lsls	r1, r3, #13
 801dda6:	0cd0      	lsrs	r0, r2, #19
 801dda8:	4301      	orrs	r1, r0
 801ddaa:	20a8      	movs	r0, #168	; 0xa8
 801ddac:	1838      	adds	r0, r7, r0
 801ddae:	6001      	str	r1, [r0, #0]
 801ddb0:	14db      	asrs	r3, r3, #19
 801ddb2:	22ac      	movs	r2, #172	; 0xac
 801ddb4:	18ba      	adds	r2, r7, r2
 801ddb6:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801ddb8:	193a      	adds	r2, r7, r4
 801ddba:	6810      	ldr	r0, [r2, #0]
 801ddbc:	6851      	ldr	r1, [r2, #4]
 801ddbe:	197a      	adds	r2, r7, r5
 801ddc0:	6853      	ldr	r3, [r2, #4]
 801ddc2:	6812      	ldr	r2, [r2, #0]
 801ddc4:	1880      	adds	r0, r0, r2
 801ddc6:	4159      	adcs	r1, r3
 801ddc8:	23a8      	movs	r3, #168	; 0xa8
 801ddca:	18fb      	adds	r3, r7, r3
 801ddcc:	681a      	ldr	r2, [r3, #0]
 801ddce:	685b      	ldr	r3, [r3, #4]
 801ddd0:	1812      	adds	r2, r2, r0
 801ddd2:	414b      	adcs	r3, r1
 801ddd4:	0619      	lsls	r1, r3, #24
 801ddd6:	0a10      	lsrs	r0, r2, #8
 801ddd8:	66b8      	str	r0, [r7, #104]	; 0x68
 801ddda:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801dddc:	4308      	orrs	r0, r1
 801ddde:	66b8      	str	r0, [r7, #104]	; 0x68
 801dde0:	121b      	asrs	r3, r3, #8
 801dde2:	66fb      	str	r3, [r7, #108]	; 0x6c
 801dde4:	19bb      	adds	r3, r7, r6
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	2212      	movs	r2, #18
 801ddea:	5e9b      	ldrsh	r3, [r3, r2]
 801ddec:	603b      	str	r3, [r7, #0]
 801ddee:	17db      	asrs	r3, r3, #31
 801ddf0:	607b      	str	r3, [r7, #4]
 801ddf2:	6839      	ldr	r1, [r7, #0]
 801ddf4:	687a      	ldr	r2, [r7, #4]
 801ddf6:	000b      	movs	r3, r1
 801ddf8:	0f1b      	lsrs	r3, r3, #28
 801ddfa:	0010      	movs	r0, r2
 801ddfc:	0100      	lsls	r0, r0, #4
 801ddfe:	6678      	str	r0, [r7, #100]	; 0x64
 801de00:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801de02:	4318      	orrs	r0, r3
 801de04:	6678      	str	r0, [r7, #100]	; 0x64
 801de06:	000b      	movs	r3, r1
 801de08:	011b      	lsls	r3, r3, #4
 801de0a:	663b      	str	r3, [r7, #96]	; 0x60
 801de0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801de0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801de10:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801de12:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801de14:	1812      	adds	r2, r2, r0
 801de16:	414b      	adcs	r3, r1
 801de18:	1939      	adds	r1, r7, r4
 801de1a:	600a      	str	r2, [r1, #0]
 801de1c:	604b      	str	r3, [r1, #4]
	return p;
 801de1e:	193b      	adds	r3, r7, r4
 801de20:	681b      	ldr	r3, [r3, #0]
}
 801de22:	0018      	movs	r0, r3
 801de24:	46bd      	mov	sp, r7
 801de26:	b02f      	add	sp, #188	; 0xbc
 801de28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de2a:	46c0      	nop			; (mov r8, r8)
 801de2c:	fffe0c00 	.word	0xfffe0c00
 801de30:	00000c35 	.word	0x00000c35

0801de34 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801de34:	b580      	push	{r7, lr}
 801de36:	b086      	sub	sp, #24
 801de38:	af00      	add	r7, sp, #0
 801de3a:	60f8      	str	r0, [r7, #12]
 801de3c:	60b9      	str	r1, [r7, #8]
 801de3e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	4a2c      	ldr	r2, [pc, #176]	; (801def4 <compensate_humidity+0xc0>)
 801de44:	4694      	mov	ip, r2
 801de46:	4463      	add	r3, ip
 801de48:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801de4a:	68bb      	ldr	r3, [r7, #8]
 801de4c:	039a      	lsls	r2, r3, #14
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	211e      	movs	r1, #30
 801de52:	5e5b      	ldrsh	r3, [r3, r1]
 801de54:	051b      	lsls	r3, r3, #20
 801de56:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801de58:	68fb      	ldr	r3, [r7, #12]
 801de5a:	2120      	movs	r1, #32
 801de5c:	5e5b      	ldrsh	r3, [r3, r1]
 801de5e:	0019      	movs	r1, r3
 801de60:	697b      	ldr	r3, [r7, #20]
 801de62:	434b      	muls	r3, r1
 801de64:	1ad3      	subs	r3, r2, r3
 801de66:	2280      	movs	r2, #128	; 0x80
 801de68:	01d2      	lsls	r2, r2, #7
 801de6a:	4694      	mov	ip, r2
 801de6c:	4463      	add	r3, ip
 801de6e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801de70:	68fa      	ldr	r2, [r7, #12]
 801de72:	2122      	movs	r1, #34	; 0x22
 801de74:	5652      	ldrsb	r2, [r2, r1]
 801de76:	0011      	movs	r1, r2
 801de78:	697a      	ldr	r2, [r7, #20]
 801de7a:	434a      	muls	r2, r1
 801de7c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801de7e:	68f9      	ldr	r1, [r7, #12]
 801de80:	7f09      	ldrb	r1, [r1, #28]
 801de82:	0008      	movs	r0, r1
 801de84:	6979      	ldr	r1, [r7, #20]
 801de86:	4341      	muls	r1, r0
 801de88:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801de8a:	2080      	movs	r0, #128	; 0x80
 801de8c:	0200      	lsls	r0, r0, #8
 801de8e:	4684      	mov	ip, r0
 801de90:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801de92:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801de94:	1292      	asrs	r2, r2, #10
 801de96:	2180      	movs	r1, #128	; 0x80
 801de98:	0389      	lsls	r1, r1, #14
 801de9a:	468c      	mov	ip, r1
 801de9c:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801de9e:	68f9      	ldr	r1, [r7, #12]
 801dea0:	201a      	movs	r0, #26
 801dea2:	5e09      	ldrsh	r1, [r1, r0]
 801dea4:	434a      	muls	r2, r1
 801dea6:	2180      	movs	r1, #128	; 0x80
 801dea8:	0189      	lsls	r1, r1, #6
 801deaa:	468c      	mov	ip, r1
 801deac:	4462      	add	r2, ip
 801deae:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801deb0:	4353      	muls	r3, r2
 801deb2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801deb4:	697b      	ldr	r3, [r7, #20]
 801deb6:	13db      	asrs	r3, r3, #15
 801deb8:	697a      	ldr	r2, [r7, #20]
 801deba:	13d2      	asrs	r2, r2, #15
 801debc:	4353      	muls	r3, r2
 801debe:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801dec0:	68fa      	ldr	r2, [r7, #12]
 801dec2:	7e12      	ldrb	r2, [r2, #24]
 801dec4:	4353      	muls	r3, r2
 801dec6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801dec8:	697a      	ldr	r2, [r7, #20]
 801deca:	1ad3      	subs	r3, r2, r3
 801decc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801dece:	697b      	ldr	r3, [r7, #20]
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	da00      	bge.n	801ded6 <compensate_humidity+0xa2>
 801ded4:	2300      	movs	r3, #0
 801ded6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801ded8:	697b      	ldr	r3, [r7, #20]
 801deda:	22c8      	movs	r2, #200	; 0xc8
 801dedc:	0552      	lsls	r2, r2, #21
 801dede:	4293      	cmp	r3, r2
 801dee0:	dd01      	ble.n	801dee6 <compensate_humidity+0xb2>
 801dee2:	23c8      	movs	r3, #200	; 0xc8
 801dee4:	055b      	lsls	r3, r3, #21
 801dee6:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801dee8:	697b      	ldr	r3, [r7, #20]
 801deea:	131b      	asrs	r3, r3, #12
}
 801deec:	0018      	movs	r0, r3
 801deee:	46bd      	mov	sp, r7
 801def0:	b006      	add	sp, #24
 801def2:	bd80      	pop	{r7, pc}
 801def4:	fffed400 	.word	0xfffed400

0801def8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801def8:	b590      	push	{r4, r7, lr}
 801defa:	b08d      	sub	sp, #52	; 0x34
 801defc:	af00      	add	r7, sp, #0
 801defe:	60f8      	str	r0, [r7, #12]
 801df00:	60b9      	str	r1, [r7, #8]
 801df02:	607a      	str	r2, [r7, #4]
 801df04:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801df06:	68fb      	ldr	r3, [r7, #12]
 801df08:	2232      	movs	r2, #50	; 0x32
 801df0a:	5c9b      	ldrb	r3, [r3, r2]
 801df0c:	2b60      	cmp	r3, #96	; 0x60
 801df0e:	d007      	beq.n	801df20 <bmp280_read_fixed+0x28>
		if (humidity)
 801df10:	683b      	ldr	r3, [r7, #0]
 801df12:	2b00      	cmp	r3, #0
 801df14:	d002      	beq.n	801df1c <bmp280_read_fixed+0x24>
			*humidity = 0;
 801df16:	683b      	ldr	r3, [r7, #0]
 801df18:	2200      	movs	r2, #0
 801df1a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801df1c:	2300      	movs	r3, #0
 801df1e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801df20:	683b      	ldr	r3, [r7, #0]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d001      	beq.n	801df2a <bmp280_read_fixed+0x32>
 801df26:	2308      	movs	r3, #8
 801df28:	e000      	b.n	801df2c <bmp280_read_fixed+0x34>
 801df2a:	2306      	movs	r3, #6
 801df2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801df2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df30:	b2db      	uxtb	r3, r3
 801df32:	2218      	movs	r2, #24
 801df34:	18ba      	adds	r2, r7, r2
 801df36:	68f8      	ldr	r0, [r7, #12]
 801df38:	21f7      	movs	r1, #247	; 0xf7
 801df3a:	f7ff fb9b 	bl	801d674 <read_data>
 801df3e:	1e03      	subs	r3, r0, #0
 801df40:	d001      	beq.n	801df46 <bmp280_read_fixed+0x4e>
		return false;
 801df42:	2300      	movs	r3, #0
 801df44:	e041      	b.n	801dfca <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801df46:	2418      	movs	r4, #24
 801df48:	193b      	adds	r3, r7, r4
 801df4a:	781b      	ldrb	r3, [r3, #0]
 801df4c:	031a      	lsls	r2, r3, #12
 801df4e:	193b      	adds	r3, r7, r4
 801df50:	785b      	ldrb	r3, [r3, #1]
 801df52:	011b      	lsls	r3, r3, #4
 801df54:	4313      	orrs	r3, r2
 801df56:	193a      	adds	r2, r7, r4
 801df58:	7892      	ldrb	r2, [r2, #2]
 801df5a:	0912      	lsrs	r2, r2, #4
 801df5c:	b2d2      	uxtb	r2, r2
 801df5e:	4313      	orrs	r3, r2
 801df60:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801df62:	193b      	adds	r3, r7, r4
 801df64:	78db      	ldrb	r3, [r3, #3]
 801df66:	031a      	lsls	r2, r3, #12
 801df68:	193b      	adds	r3, r7, r4
 801df6a:	791b      	ldrb	r3, [r3, #4]
 801df6c:	011b      	lsls	r3, r3, #4
 801df6e:	4313      	orrs	r3, r2
 801df70:	193a      	adds	r2, r7, r4
 801df72:	7952      	ldrb	r2, [r2, #5]
 801df74:	0912      	lsrs	r2, r2, #4
 801df76:	b2d2      	uxtb	r2, r2
 801df78:	4313      	orrs	r3, r2
 801df7a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801df7c:	2314      	movs	r3, #20
 801df7e:	18fa      	adds	r2, r7, r3
 801df80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	0018      	movs	r0, r3
 801df86:	f7ff fd6e 	bl	801da66 <compensate_temperature>
 801df8a:	0002      	movs	r2, r0
 801df8c:	68bb      	ldr	r3, [r7, #8]
 801df8e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801df90:	697a      	ldr	r2, [r7, #20]
 801df92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	0018      	movs	r0, r3
 801df98:	f7ff fd9a 	bl	801dad0 <compensate_pressure>
 801df9c:	0002      	movs	r2, r0
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801dfa2:	683b      	ldr	r3, [r7, #0]
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d00f      	beq.n	801dfc8 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801dfa8:	193b      	adds	r3, r7, r4
 801dfaa:	799b      	ldrb	r3, [r3, #6]
 801dfac:	021b      	lsls	r3, r3, #8
 801dfae:	193a      	adds	r2, r7, r4
 801dfb0:	79d2      	ldrb	r2, [r2, #7]
 801dfb2:	4313      	orrs	r3, r2
 801dfb4:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801dfb6:	697a      	ldr	r2, [r7, #20]
 801dfb8:	6a39      	ldr	r1, [r7, #32]
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	0018      	movs	r0, r3
 801dfbe:	f7ff ff39 	bl	801de34 <compensate_humidity>
 801dfc2:	0002      	movs	r2, r0
 801dfc4:	683b      	ldr	r3, [r7, #0]
 801dfc6:	601a      	str	r2, [r3, #0]
	}

	return true;
 801dfc8:	2301      	movs	r3, #1
}
 801dfca:	0018      	movs	r0, r3
 801dfcc:	46bd      	mov	sp, r7
 801dfce:	b00d      	add	sp, #52	; 0x34
 801dfd0:	bd90      	pop	{r4, r7, pc}
	...

0801dfd4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 801dfd4:	b580      	push	{r7, lr}
 801dfd6:	b088      	sub	sp, #32
 801dfd8:	af00      	add	r7, sp, #0
 801dfda:	60f8      	str	r0, [r7, #12]
 801dfdc:	60b9      	str	r1, [r7, #8]
 801dfde:	607a      	str	r2, [r7, #4]
 801dfe0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 801dfe2:	683b      	ldr	r3, [r7, #0]
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	d002      	beq.n	801dfee <bmp280_read_float+0x1a>
 801dfe8:	2314      	movs	r3, #20
 801dfea:	18fb      	adds	r3, r7, r3
 801dfec:	e000      	b.n	801dff0 <bmp280_read_float+0x1c>
 801dfee:	2300      	movs	r3, #0
 801dff0:	2218      	movs	r2, #24
 801dff2:	18ba      	adds	r2, r7, r2
 801dff4:	211c      	movs	r1, #28
 801dff6:	1879      	adds	r1, r7, r1
 801dff8:	68f8      	ldr	r0, [r7, #12]
 801dffa:	f7ff ff7d 	bl	801def8 <bmp280_read_fixed>
 801dffe:	1e03      	subs	r3, r0, #0
 801e000:	d02d      	beq.n	801e05e <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 801e002:	69fb      	ldr	r3, [r7, #28]
 801e004:	0018      	movs	r0, r3
 801e006:	f7e2 ffbd 	bl	8000f84 <__aeabi_i2f>
 801e00a:	1c03      	adds	r3, r0, #0
 801e00c:	4916      	ldr	r1, [pc, #88]	; (801e068 <bmp280_read_float+0x94>)
 801e00e:	1c18      	adds	r0, r3, #0
 801e010:	f7e2 fc06 	bl	8000820 <__aeabi_fdiv>
 801e014:	1c03      	adds	r3, r0, #0
 801e016:	1c1a      	adds	r2, r3, #0
 801e018:	68bb      	ldr	r3, [r7, #8]
 801e01a:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 801e01c:	69bb      	ldr	r3, [r7, #24]
 801e01e:	0018      	movs	r0, r3
 801e020:	f7e2 fff6 	bl	8001010 <__aeabi_ui2f>
 801e024:	1c03      	adds	r3, r0, #0
 801e026:	2187      	movs	r1, #135	; 0x87
 801e028:	05c9      	lsls	r1, r1, #23
 801e02a:	1c18      	adds	r0, r3, #0
 801e02c:	f7e2 fbf8 	bl	8000820 <__aeabi_fdiv>
 801e030:	1c03      	adds	r3, r0, #0
 801e032:	1c1a      	adds	r2, r3, #0
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	601a      	str	r2, [r3, #0]
		if (humidity)
 801e038:	683b      	ldr	r3, [r7, #0]
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d00d      	beq.n	801e05a <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 801e03e:	697b      	ldr	r3, [r7, #20]
 801e040:	0018      	movs	r0, r3
 801e042:	f7e2 ffe5 	bl	8001010 <__aeabi_ui2f>
 801e046:	1c03      	adds	r3, r0, #0
 801e048:	2189      	movs	r1, #137	; 0x89
 801e04a:	05c9      	lsls	r1, r1, #23
 801e04c:	1c18      	adds	r0, r3, #0
 801e04e:	f7e2 fbe7 	bl	8000820 <__aeabi_fdiv>
 801e052:	1c03      	adds	r3, r0, #0
 801e054:	1c1a      	adds	r2, r3, #0
 801e056:	683b      	ldr	r3, [r7, #0]
 801e058:	601a      	str	r2, [r3, #0]
		return true;
 801e05a:	2301      	movs	r3, #1
 801e05c:	e000      	b.n	801e060 <bmp280_read_float+0x8c>
	}

	return false;
 801e05e:	2300      	movs	r3, #0
}
 801e060:	0018      	movs	r0, r3
 801e062:	46bd      	mov	sp, r7
 801e064:	b008      	add	sp, #32
 801e066:	bd80      	pop	{r7, pc}
 801e068:	42c80000 	.word	0x42c80000

0801e06c <__errno>:
 801e06c:	4b01      	ldr	r3, [pc, #4]	; (801e074 <__errno+0x8>)
 801e06e:	6818      	ldr	r0, [r3, #0]
 801e070:	4770      	bx	lr
 801e072:	46c0      	nop			; (mov r8, r8)
 801e074:	200001d8 	.word	0x200001d8

0801e078 <__libc_init_array>:
 801e078:	b570      	push	{r4, r5, r6, lr}
 801e07a:	2600      	movs	r6, #0
 801e07c:	4d0c      	ldr	r5, [pc, #48]	; (801e0b0 <__libc_init_array+0x38>)
 801e07e:	4c0d      	ldr	r4, [pc, #52]	; (801e0b4 <__libc_init_array+0x3c>)
 801e080:	1b64      	subs	r4, r4, r5
 801e082:	10a4      	asrs	r4, r4, #2
 801e084:	42a6      	cmp	r6, r4
 801e086:	d109      	bne.n	801e09c <__libc_init_array+0x24>
 801e088:	2600      	movs	r6, #0
 801e08a:	f000 fcd1 	bl	801ea30 <_init>
 801e08e:	4d0a      	ldr	r5, [pc, #40]	; (801e0b8 <__libc_init_array+0x40>)
 801e090:	4c0a      	ldr	r4, [pc, #40]	; (801e0bc <__libc_init_array+0x44>)
 801e092:	1b64      	subs	r4, r4, r5
 801e094:	10a4      	asrs	r4, r4, #2
 801e096:	42a6      	cmp	r6, r4
 801e098:	d105      	bne.n	801e0a6 <__libc_init_array+0x2e>
 801e09a:	bd70      	pop	{r4, r5, r6, pc}
 801e09c:	00b3      	lsls	r3, r6, #2
 801e09e:	58eb      	ldr	r3, [r5, r3]
 801e0a0:	4798      	blx	r3
 801e0a2:	3601      	adds	r6, #1
 801e0a4:	e7ee      	b.n	801e084 <__libc_init_array+0xc>
 801e0a6:	00b3      	lsls	r3, r6, #2
 801e0a8:	58eb      	ldr	r3, [r5, r3]
 801e0aa:	4798      	blx	r3
 801e0ac:	3601      	adds	r6, #1
 801e0ae:	e7f2      	b.n	801e096 <__libc_init_array+0x1e>
 801e0b0:	08020114 	.word	0x08020114
 801e0b4:	08020114 	.word	0x08020114
 801e0b8:	08020114 	.word	0x08020114
 801e0bc:	08020118 	.word	0x08020118

0801e0c0 <memcpy>:
 801e0c0:	2300      	movs	r3, #0
 801e0c2:	b510      	push	{r4, lr}
 801e0c4:	429a      	cmp	r2, r3
 801e0c6:	d100      	bne.n	801e0ca <memcpy+0xa>
 801e0c8:	bd10      	pop	{r4, pc}
 801e0ca:	5ccc      	ldrb	r4, [r1, r3]
 801e0cc:	54c4      	strb	r4, [r0, r3]
 801e0ce:	3301      	adds	r3, #1
 801e0d0:	e7f8      	b.n	801e0c4 <memcpy+0x4>

0801e0d2 <memset>:
 801e0d2:	0003      	movs	r3, r0
 801e0d4:	1882      	adds	r2, r0, r2
 801e0d6:	4293      	cmp	r3, r2
 801e0d8:	d100      	bne.n	801e0dc <memset+0xa>
 801e0da:	4770      	bx	lr
 801e0dc:	7019      	strb	r1, [r3, #0]
 801e0de:	3301      	adds	r3, #1
 801e0e0:	e7f9      	b.n	801e0d6 <memset+0x4>
	...

0801e0e4 <siprintf>:
 801e0e4:	b40e      	push	{r1, r2, r3}
 801e0e6:	b500      	push	{lr}
 801e0e8:	490b      	ldr	r1, [pc, #44]	; (801e118 <siprintf+0x34>)
 801e0ea:	b09c      	sub	sp, #112	; 0x70
 801e0ec:	ab1d      	add	r3, sp, #116	; 0x74
 801e0ee:	9002      	str	r0, [sp, #8]
 801e0f0:	9006      	str	r0, [sp, #24]
 801e0f2:	9107      	str	r1, [sp, #28]
 801e0f4:	9104      	str	r1, [sp, #16]
 801e0f6:	4809      	ldr	r0, [pc, #36]	; (801e11c <siprintf+0x38>)
 801e0f8:	4909      	ldr	r1, [pc, #36]	; (801e120 <siprintf+0x3c>)
 801e0fa:	cb04      	ldmia	r3!, {r2}
 801e0fc:	9105      	str	r1, [sp, #20]
 801e0fe:	6800      	ldr	r0, [r0, #0]
 801e100:	a902      	add	r1, sp, #8
 801e102:	9301      	str	r3, [sp, #4]
 801e104:	f000 f870 	bl	801e1e8 <_svfiprintf_r>
 801e108:	2300      	movs	r3, #0
 801e10a:	9a02      	ldr	r2, [sp, #8]
 801e10c:	7013      	strb	r3, [r2, #0]
 801e10e:	b01c      	add	sp, #112	; 0x70
 801e110:	bc08      	pop	{r3}
 801e112:	b003      	add	sp, #12
 801e114:	4718      	bx	r3
 801e116:	46c0      	nop			; (mov r8, r8)
 801e118:	7fffffff 	.word	0x7fffffff
 801e11c:	200001d8 	.word	0x200001d8
 801e120:	ffff0208 	.word	0xffff0208

0801e124 <__ssputs_r>:
 801e124:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e126:	688e      	ldr	r6, [r1, #8]
 801e128:	b085      	sub	sp, #20
 801e12a:	0007      	movs	r7, r0
 801e12c:	000c      	movs	r4, r1
 801e12e:	9203      	str	r2, [sp, #12]
 801e130:	9301      	str	r3, [sp, #4]
 801e132:	429e      	cmp	r6, r3
 801e134:	d83c      	bhi.n	801e1b0 <__ssputs_r+0x8c>
 801e136:	2390      	movs	r3, #144	; 0x90
 801e138:	898a      	ldrh	r2, [r1, #12]
 801e13a:	00db      	lsls	r3, r3, #3
 801e13c:	421a      	tst	r2, r3
 801e13e:	d034      	beq.n	801e1aa <__ssputs_r+0x86>
 801e140:	2503      	movs	r5, #3
 801e142:	6909      	ldr	r1, [r1, #16]
 801e144:	6823      	ldr	r3, [r4, #0]
 801e146:	1a5b      	subs	r3, r3, r1
 801e148:	9302      	str	r3, [sp, #8]
 801e14a:	6963      	ldr	r3, [r4, #20]
 801e14c:	9802      	ldr	r0, [sp, #8]
 801e14e:	435d      	muls	r5, r3
 801e150:	0feb      	lsrs	r3, r5, #31
 801e152:	195d      	adds	r5, r3, r5
 801e154:	9b01      	ldr	r3, [sp, #4]
 801e156:	106d      	asrs	r5, r5, #1
 801e158:	3301      	adds	r3, #1
 801e15a:	181b      	adds	r3, r3, r0
 801e15c:	42ab      	cmp	r3, r5
 801e15e:	d900      	bls.n	801e162 <__ssputs_r+0x3e>
 801e160:	001d      	movs	r5, r3
 801e162:	0553      	lsls	r3, r2, #21
 801e164:	d532      	bpl.n	801e1cc <__ssputs_r+0xa8>
 801e166:	0029      	movs	r1, r5
 801e168:	0038      	movs	r0, r7
 801e16a:	f000 fb27 	bl	801e7bc <_malloc_r>
 801e16e:	1e06      	subs	r6, r0, #0
 801e170:	d109      	bne.n	801e186 <__ssputs_r+0x62>
 801e172:	230c      	movs	r3, #12
 801e174:	603b      	str	r3, [r7, #0]
 801e176:	2340      	movs	r3, #64	; 0x40
 801e178:	2001      	movs	r0, #1
 801e17a:	89a2      	ldrh	r2, [r4, #12]
 801e17c:	4240      	negs	r0, r0
 801e17e:	4313      	orrs	r3, r2
 801e180:	81a3      	strh	r3, [r4, #12]
 801e182:	b005      	add	sp, #20
 801e184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e186:	9a02      	ldr	r2, [sp, #8]
 801e188:	6921      	ldr	r1, [r4, #16]
 801e18a:	f7ff ff99 	bl	801e0c0 <memcpy>
 801e18e:	89a3      	ldrh	r3, [r4, #12]
 801e190:	4a14      	ldr	r2, [pc, #80]	; (801e1e4 <__ssputs_r+0xc0>)
 801e192:	401a      	ands	r2, r3
 801e194:	2380      	movs	r3, #128	; 0x80
 801e196:	4313      	orrs	r3, r2
 801e198:	81a3      	strh	r3, [r4, #12]
 801e19a:	9b02      	ldr	r3, [sp, #8]
 801e19c:	6126      	str	r6, [r4, #16]
 801e19e:	18f6      	adds	r6, r6, r3
 801e1a0:	6026      	str	r6, [r4, #0]
 801e1a2:	6165      	str	r5, [r4, #20]
 801e1a4:	9e01      	ldr	r6, [sp, #4]
 801e1a6:	1aed      	subs	r5, r5, r3
 801e1a8:	60a5      	str	r5, [r4, #8]
 801e1aa:	9b01      	ldr	r3, [sp, #4]
 801e1ac:	429e      	cmp	r6, r3
 801e1ae:	d900      	bls.n	801e1b2 <__ssputs_r+0x8e>
 801e1b0:	9e01      	ldr	r6, [sp, #4]
 801e1b2:	0032      	movs	r2, r6
 801e1b4:	9903      	ldr	r1, [sp, #12]
 801e1b6:	6820      	ldr	r0, [r4, #0]
 801e1b8:	f000 faa3 	bl	801e702 <memmove>
 801e1bc:	68a3      	ldr	r3, [r4, #8]
 801e1be:	2000      	movs	r0, #0
 801e1c0:	1b9b      	subs	r3, r3, r6
 801e1c2:	60a3      	str	r3, [r4, #8]
 801e1c4:	6823      	ldr	r3, [r4, #0]
 801e1c6:	199e      	adds	r6, r3, r6
 801e1c8:	6026      	str	r6, [r4, #0]
 801e1ca:	e7da      	b.n	801e182 <__ssputs_r+0x5e>
 801e1cc:	002a      	movs	r2, r5
 801e1ce:	0038      	movs	r0, r7
 801e1d0:	f000 fb52 	bl	801e878 <_realloc_r>
 801e1d4:	1e06      	subs	r6, r0, #0
 801e1d6:	d1e0      	bne.n	801e19a <__ssputs_r+0x76>
 801e1d8:	0038      	movs	r0, r7
 801e1da:	6921      	ldr	r1, [r4, #16]
 801e1dc:	f000 faa4 	bl	801e728 <_free_r>
 801e1e0:	e7c7      	b.n	801e172 <__ssputs_r+0x4e>
 801e1e2:	46c0      	nop			; (mov r8, r8)
 801e1e4:	fffffb7f 	.word	0xfffffb7f

0801e1e8 <_svfiprintf_r>:
 801e1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1ea:	b0a1      	sub	sp, #132	; 0x84
 801e1ec:	9003      	str	r0, [sp, #12]
 801e1ee:	001d      	movs	r5, r3
 801e1f0:	898b      	ldrh	r3, [r1, #12]
 801e1f2:	000f      	movs	r7, r1
 801e1f4:	0016      	movs	r6, r2
 801e1f6:	061b      	lsls	r3, r3, #24
 801e1f8:	d511      	bpl.n	801e21e <_svfiprintf_r+0x36>
 801e1fa:	690b      	ldr	r3, [r1, #16]
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d10e      	bne.n	801e21e <_svfiprintf_r+0x36>
 801e200:	2140      	movs	r1, #64	; 0x40
 801e202:	f000 fadb 	bl	801e7bc <_malloc_r>
 801e206:	6038      	str	r0, [r7, #0]
 801e208:	6138      	str	r0, [r7, #16]
 801e20a:	2800      	cmp	r0, #0
 801e20c:	d105      	bne.n	801e21a <_svfiprintf_r+0x32>
 801e20e:	230c      	movs	r3, #12
 801e210:	9a03      	ldr	r2, [sp, #12]
 801e212:	3801      	subs	r0, #1
 801e214:	6013      	str	r3, [r2, #0]
 801e216:	b021      	add	sp, #132	; 0x84
 801e218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e21a:	2340      	movs	r3, #64	; 0x40
 801e21c:	617b      	str	r3, [r7, #20]
 801e21e:	2300      	movs	r3, #0
 801e220:	ac08      	add	r4, sp, #32
 801e222:	6163      	str	r3, [r4, #20]
 801e224:	3320      	adds	r3, #32
 801e226:	7663      	strb	r3, [r4, #25]
 801e228:	3310      	adds	r3, #16
 801e22a:	76a3      	strb	r3, [r4, #26]
 801e22c:	9507      	str	r5, [sp, #28]
 801e22e:	0035      	movs	r5, r6
 801e230:	782b      	ldrb	r3, [r5, #0]
 801e232:	2b00      	cmp	r3, #0
 801e234:	d001      	beq.n	801e23a <_svfiprintf_r+0x52>
 801e236:	2b25      	cmp	r3, #37	; 0x25
 801e238:	d147      	bne.n	801e2ca <_svfiprintf_r+0xe2>
 801e23a:	1bab      	subs	r3, r5, r6
 801e23c:	9305      	str	r3, [sp, #20]
 801e23e:	42b5      	cmp	r5, r6
 801e240:	d00c      	beq.n	801e25c <_svfiprintf_r+0x74>
 801e242:	0032      	movs	r2, r6
 801e244:	0039      	movs	r1, r7
 801e246:	9803      	ldr	r0, [sp, #12]
 801e248:	f7ff ff6c 	bl	801e124 <__ssputs_r>
 801e24c:	1c43      	adds	r3, r0, #1
 801e24e:	d100      	bne.n	801e252 <_svfiprintf_r+0x6a>
 801e250:	e0ae      	b.n	801e3b0 <_svfiprintf_r+0x1c8>
 801e252:	6962      	ldr	r2, [r4, #20]
 801e254:	9b05      	ldr	r3, [sp, #20]
 801e256:	4694      	mov	ip, r2
 801e258:	4463      	add	r3, ip
 801e25a:	6163      	str	r3, [r4, #20]
 801e25c:	782b      	ldrb	r3, [r5, #0]
 801e25e:	2b00      	cmp	r3, #0
 801e260:	d100      	bne.n	801e264 <_svfiprintf_r+0x7c>
 801e262:	e0a5      	b.n	801e3b0 <_svfiprintf_r+0x1c8>
 801e264:	2201      	movs	r2, #1
 801e266:	2300      	movs	r3, #0
 801e268:	4252      	negs	r2, r2
 801e26a:	6062      	str	r2, [r4, #4]
 801e26c:	a904      	add	r1, sp, #16
 801e26e:	3254      	adds	r2, #84	; 0x54
 801e270:	1852      	adds	r2, r2, r1
 801e272:	1c6e      	adds	r6, r5, #1
 801e274:	6023      	str	r3, [r4, #0]
 801e276:	60e3      	str	r3, [r4, #12]
 801e278:	60a3      	str	r3, [r4, #8]
 801e27a:	7013      	strb	r3, [r2, #0]
 801e27c:	65a3      	str	r3, [r4, #88]	; 0x58
 801e27e:	2205      	movs	r2, #5
 801e280:	7831      	ldrb	r1, [r6, #0]
 801e282:	4854      	ldr	r0, [pc, #336]	; (801e3d4 <_svfiprintf_r+0x1ec>)
 801e284:	f000 fa32 	bl	801e6ec <memchr>
 801e288:	1c75      	adds	r5, r6, #1
 801e28a:	2800      	cmp	r0, #0
 801e28c:	d11f      	bne.n	801e2ce <_svfiprintf_r+0xe6>
 801e28e:	6822      	ldr	r2, [r4, #0]
 801e290:	06d3      	lsls	r3, r2, #27
 801e292:	d504      	bpl.n	801e29e <_svfiprintf_r+0xb6>
 801e294:	2353      	movs	r3, #83	; 0x53
 801e296:	a904      	add	r1, sp, #16
 801e298:	185b      	adds	r3, r3, r1
 801e29a:	2120      	movs	r1, #32
 801e29c:	7019      	strb	r1, [r3, #0]
 801e29e:	0713      	lsls	r3, r2, #28
 801e2a0:	d504      	bpl.n	801e2ac <_svfiprintf_r+0xc4>
 801e2a2:	2353      	movs	r3, #83	; 0x53
 801e2a4:	a904      	add	r1, sp, #16
 801e2a6:	185b      	adds	r3, r3, r1
 801e2a8:	212b      	movs	r1, #43	; 0x2b
 801e2aa:	7019      	strb	r1, [r3, #0]
 801e2ac:	7833      	ldrb	r3, [r6, #0]
 801e2ae:	2b2a      	cmp	r3, #42	; 0x2a
 801e2b0:	d016      	beq.n	801e2e0 <_svfiprintf_r+0xf8>
 801e2b2:	0035      	movs	r5, r6
 801e2b4:	2100      	movs	r1, #0
 801e2b6:	200a      	movs	r0, #10
 801e2b8:	68e3      	ldr	r3, [r4, #12]
 801e2ba:	782a      	ldrb	r2, [r5, #0]
 801e2bc:	1c6e      	adds	r6, r5, #1
 801e2be:	3a30      	subs	r2, #48	; 0x30
 801e2c0:	2a09      	cmp	r2, #9
 801e2c2:	d94e      	bls.n	801e362 <_svfiprintf_r+0x17a>
 801e2c4:	2900      	cmp	r1, #0
 801e2c6:	d111      	bne.n	801e2ec <_svfiprintf_r+0x104>
 801e2c8:	e017      	b.n	801e2fa <_svfiprintf_r+0x112>
 801e2ca:	3501      	adds	r5, #1
 801e2cc:	e7b0      	b.n	801e230 <_svfiprintf_r+0x48>
 801e2ce:	4b41      	ldr	r3, [pc, #260]	; (801e3d4 <_svfiprintf_r+0x1ec>)
 801e2d0:	6822      	ldr	r2, [r4, #0]
 801e2d2:	1ac0      	subs	r0, r0, r3
 801e2d4:	2301      	movs	r3, #1
 801e2d6:	4083      	lsls	r3, r0
 801e2d8:	4313      	orrs	r3, r2
 801e2da:	002e      	movs	r6, r5
 801e2dc:	6023      	str	r3, [r4, #0]
 801e2de:	e7ce      	b.n	801e27e <_svfiprintf_r+0x96>
 801e2e0:	9b07      	ldr	r3, [sp, #28]
 801e2e2:	1d19      	adds	r1, r3, #4
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	9107      	str	r1, [sp, #28]
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	db01      	blt.n	801e2f0 <_svfiprintf_r+0x108>
 801e2ec:	930b      	str	r3, [sp, #44]	; 0x2c
 801e2ee:	e004      	b.n	801e2fa <_svfiprintf_r+0x112>
 801e2f0:	425b      	negs	r3, r3
 801e2f2:	60e3      	str	r3, [r4, #12]
 801e2f4:	2302      	movs	r3, #2
 801e2f6:	4313      	orrs	r3, r2
 801e2f8:	6023      	str	r3, [r4, #0]
 801e2fa:	782b      	ldrb	r3, [r5, #0]
 801e2fc:	2b2e      	cmp	r3, #46	; 0x2e
 801e2fe:	d10a      	bne.n	801e316 <_svfiprintf_r+0x12e>
 801e300:	786b      	ldrb	r3, [r5, #1]
 801e302:	2b2a      	cmp	r3, #42	; 0x2a
 801e304:	d135      	bne.n	801e372 <_svfiprintf_r+0x18a>
 801e306:	9b07      	ldr	r3, [sp, #28]
 801e308:	3502      	adds	r5, #2
 801e30a:	1d1a      	adds	r2, r3, #4
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	9207      	str	r2, [sp, #28]
 801e310:	2b00      	cmp	r3, #0
 801e312:	db2b      	blt.n	801e36c <_svfiprintf_r+0x184>
 801e314:	9309      	str	r3, [sp, #36]	; 0x24
 801e316:	4e30      	ldr	r6, [pc, #192]	; (801e3d8 <_svfiprintf_r+0x1f0>)
 801e318:	2203      	movs	r2, #3
 801e31a:	0030      	movs	r0, r6
 801e31c:	7829      	ldrb	r1, [r5, #0]
 801e31e:	f000 f9e5 	bl	801e6ec <memchr>
 801e322:	2800      	cmp	r0, #0
 801e324:	d006      	beq.n	801e334 <_svfiprintf_r+0x14c>
 801e326:	2340      	movs	r3, #64	; 0x40
 801e328:	1b80      	subs	r0, r0, r6
 801e32a:	4083      	lsls	r3, r0
 801e32c:	6822      	ldr	r2, [r4, #0]
 801e32e:	3501      	adds	r5, #1
 801e330:	4313      	orrs	r3, r2
 801e332:	6023      	str	r3, [r4, #0]
 801e334:	7829      	ldrb	r1, [r5, #0]
 801e336:	2206      	movs	r2, #6
 801e338:	4828      	ldr	r0, [pc, #160]	; (801e3dc <_svfiprintf_r+0x1f4>)
 801e33a:	1c6e      	adds	r6, r5, #1
 801e33c:	7621      	strb	r1, [r4, #24]
 801e33e:	f000 f9d5 	bl	801e6ec <memchr>
 801e342:	2800      	cmp	r0, #0
 801e344:	d03c      	beq.n	801e3c0 <_svfiprintf_r+0x1d8>
 801e346:	4b26      	ldr	r3, [pc, #152]	; (801e3e0 <_svfiprintf_r+0x1f8>)
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d125      	bne.n	801e398 <_svfiprintf_r+0x1b0>
 801e34c:	2207      	movs	r2, #7
 801e34e:	9b07      	ldr	r3, [sp, #28]
 801e350:	3307      	adds	r3, #7
 801e352:	4393      	bics	r3, r2
 801e354:	3308      	adds	r3, #8
 801e356:	9307      	str	r3, [sp, #28]
 801e358:	6963      	ldr	r3, [r4, #20]
 801e35a:	9a04      	ldr	r2, [sp, #16]
 801e35c:	189b      	adds	r3, r3, r2
 801e35e:	6163      	str	r3, [r4, #20]
 801e360:	e765      	b.n	801e22e <_svfiprintf_r+0x46>
 801e362:	4343      	muls	r3, r0
 801e364:	0035      	movs	r5, r6
 801e366:	2101      	movs	r1, #1
 801e368:	189b      	adds	r3, r3, r2
 801e36a:	e7a6      	b.n	801e2ba <_svfiprintf_r+0xd2>
 801e36c:	2301      	movs	r3, #1
 801e36e:	425b      	negs	r3, r3
 801e370:	e7d0      	b.n	801e314 <_svfiprintf_r+0x12c>
 801e372:	2300      	movs	r3, #0
 801e374:	200a      	movs	r0, #10
 801e376:	001a      	movs	r2, r3
 801e378:	3501      	adds	r5, #1
 801e37a:	6063      	str	r3, [r4, #4]
 801e37c:	7829      	ldrb	r1, [r5, #0]
 801e37e:	1c6e      	adds	r6, r5, #1
 801e380:	3930      	subs	r1, #48	; 0x30
 801e382:	2909      	cmp	r1, #9
 801e384:	d903      	bls.n	801e38e <_svfiprintf_r+0x1a6>
 801e386:	2b00      	cmp	r3, #0
 801e388:	d0c5      	beq.n	801e316 <_svfiprintf_r+0x12e>
 801e38a:	9209      	str	r2, [sp, #36]	; 0x24
 801e38c:	e7c3      	b.n	801e316 <_svfiprintf_r+0x12e>
 801e38e:	4342      	muls	r2, r0
 801e390:	0035      	movs	r5, r6
 801e392:	2301      	movs	r3, #1
 801e394:	1852      	adds	r2, r2, r1
 801e396:	e7f1      	b.n	801e37c <_svfiprintf_r+0x194>
 801e398:	ab07      	add	r3, sp, #28
 801e39a:	9300      	str	r3, [sp, #0]
 801e39c:	003a      	movs	r2, r7
 801e39e:	0021      	movs	r1, r4
 801e3a0:	4b10      	ldr	r3, [pc, #64]	; (801e3e4 <_svfiprintf_r+0x1fc>)
 801e3a2:	9803      	ldr	r0, [sp, #12]
 801e3a4:	e000      	b.n	801e3a8 <_svfiprintf_r+0x1c0>
 801e3a6:	bf00      	nop
 801e3a8:	9004      	str	r0, [sp, #16]
 801e3aa:	9b04      	ldr	r3, [sp, #16]
 801e3ac:	3301      	adds	r3, #1
 801e3ae:	d1d3      	bne.n	801e358 <_svfiprintf_r+0x170>
 801e3b0:	89bb      	ldrh	r3, [r7, #12]
 801e3b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e3b4:	065b      	lsls	r3, r3, #25
 801e3b6:	d400      	bmi.n	801e3ba <_svfiprintf_r+0x1d2>
 801e3b8:	e72d      	b.n	801e216 <_svfiprintf_r+0x2e>
 801e3ba:	2001      	movs	r0, #1
 801e3bc:	4240      	negs	r0, r0
 801e3be:	e72a      	b.n	801e216 <_svfiprintf_r+0x2e>
 801e3c0:	ab07      	add	r3, sp, #28
 801e3c2:	9300      	str	r3, [sp, #0]
 801e3c4:	003a      	movs	r2, r7
 801e3c6:	0021      	movs	r1, r4
 801e3c8:	4b06      	ldr	r3, [pc, #24]	; (801e3e4 <_svfiprintf_r+0x1fc>)
 801e3ca:	9803      	ldr	r0, [sp, #12]
 801e3cc:	f000 f87c 	bl	801e4c8 <_printf_i>
 801e3d0:	e7ea      	b.n	801e3a8 <_svfiprintf_r+0x1c0>
 801e3d2:	46c0      	nop			; (mov r8, r8)
 801e3d4:	080200d8 	.word	0x080200d8
 801e3d8:	080200de 	.word	0x080200de
 801e3dc:	080200e2 	.word	0x080200e2
 801e3e0:	00000000 	.word	0x00000000
 801e3e4:	0801e125 	.word	0x0801e125

0801e3e8 <_printf_common>:
 801e3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e3ea:	0015      	movs	r5, r2
 801e3ec:	9301      	str	r3, [sp, #4]
 801e3ee:	688a      	ldr	r2, [r1, #8]
 801e3f0:	690b      	ldr	r3, [r1, #16]
 801e3f2:	000c      	movs	r4, r1
 801e3f4:	9000      	str	r0, [sp, #0]
 801e3f6:	4293      	cmp	r3, r2
 801e3f8:	da00      	bge.n	801e3fc <_printf_common+0x14>
 801e3fa:	0013      	movs	r3, r2
 801e3fc:	0022      	movs	r2, r4
 801e3fe:	602b      	str	r3, [r5, #0]
 801e400:	3243      	adds	r2, #67	; 0x43
 801e402:	7812      	ldrb	r2, [r2, #0]
 801e404:	2a00      	cmp	r2, #0
 801e406:	d001      	beq.n	801e40c <_printf_common+0x24>
 801e408:	3301      	adds	r3, #1
 801e40a:	602b      	str	r3, [r5, #0]
 801e40c:	6823      	ldr	r3, [r4, #0]
 801e40e:	069b      	lsls	r3, r3, #26
 801e410:	d502      	bpl.n	801e418 <_printf_common+0x30>
 801e412:	682b      	ldr	r3, [r5, #0]
 801e414:	3302      	adds	r3, #2
 801e416:	602b      	str	r3, [r5, #0]
 801e418:	6822      	ldr	r2, [r4, #0]
 801e41a:	2306      	movs	r3, #6
 801e41c:	0017      	movs	r7, r2
 801e41e:	401f      	ands	r7, r3
 801e420:	421a      	tst	r2, r3
 801e422:	d027      	beq.n	801e474 <_printf_common+0x8c>
 801e424:	0023      	movs	r3, r4
 801e426:	3343      	adds	r3, #67	; 0x43
 801e428:	781b      	ldrb	r3, [r3, #0]
 801e42a:	1e5a      	subs	r2, r3, #1
 801e42c:	4193      	sbcs	r3, r2
 801e42e:	6822      	ldr	r2, [r4, #0]
 801e430:	0692      	lsls	r2, r2, #26
 801e432:	d430      	bmi.n	801e496 <_printf_common+0xae>
 801e434:	0022      	movs	r2, r4
 801e436:	9901      	ldr	r1, [sp, #4]
 801e438:	9800      	ldr	r0, [sp, #0]
 801e43a:	9e08      	ldr	r6, [sp, #32]
 801e43c:	3243      	adds	r2, #67	; 0x43
 801e43e:	47b0      	blx	r6
 801e440:	1c43      	adds	r3, r0, #1
 801e442:	d025      	beq.n	801e490 <_printf_common+0xa8>
 801e444:	2306      	movs	r3, #6
 801e446:	6820      	ldr	r0, [r4, #0]
 801e448:	682a      	ldr	r2, [r5, #0]
 801e44a:	68e1      	ldr	r1, [r4, #12]
 801e44c:	2500      	movs	r5, #0
 801e44e:	4003      	ands	r3, r0
 801e450:	2b04      	cmp	r3, #4
 801e452:	d103      	bne.n	801e45c <_printf_common+0x74>
 801e454:	1a8d      	subs	r5, r1, r2
 801e456:	43eb      	mvns	r3, r5
 801e458:	17db      	asrs	r3, r3, #31
 801e45a:	401d      	ands	r5, r3
 801e45c:	68a3      	ldr	r3, [r4, #8]
 801e45e:	6922      	ldr	r2, [r4, #16]
 801e460:	4293      	cmp	r3, r2
 801e462:	dd01      	ble.n	801e468 <_printf_common+0x80>
 801e464:	1a9b      	subs	r3, r3, r2
 801e466:	18ed      	adds	r5, r5, r3
 801e468:	2700      	movs	r7, #0
 801e46a:	42bd      	cmp	r5, r7
 801e46c:	d120      	bne.n	801e4b0 <_printf_common+0xc8>
 801e46e:	2000      	movs	r0, #0
 801e470:	e010      	b.n	801e494 <_printf_common+0xac>
 801e472:	3701      	adds	r7, #1
 801e474:	68e3      	ldr	r3, [r4, #12]
 801e476:	682a      	ldr	r2, [r5, #0]
 801e478:	1a9b      	subs	r3, r3, r2
 801e47a:	42bb      	cmp	r3, r7
 801e47c:	ddd2      	ble.n	801e424 <_printf_common+0x3c>
 801e47e:	0022      	movs	r2, r4
 801e480:	2301      	movs	r3, #1
 801e482:	9901      	ldr	r1, [sp, #4]
 801e484:	9800      	ldr	r0, [sp, #0]
 801e486:	9e08      	ldr	r6, [sp, #32]
 801e488:	3219      	adds	r2, #25
 801e48a:	47b0      	blx	r6
 801e48c:	1c43      	adds	r3, r0, #1
 801e48e:	d1f0      	bne.n	801e472 <_printf_common+0x8a>
 801e490:	2001      	movs	r0, #1
 801e492:	4240      	negs	r0, r0
 801e494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e496:	2030      	movs	r0, #48	; 0x30
 801e498:	18e1      	adds	r1, r4, r3
 801e49a:	3143      	adds	r1, #67	; 0x43
 801e49c:	7008      	strb	r0, [r1, #0]
 801e49e:	0021      	movs	r1, r4
 801e4a0:	1c5a      	adds	r2, r3, #1
 801e4a2:	3145      	adds	r1, #69	; 0x45
 801e4a4:	7809      	ldrb	r1, [r1, #0]
 801e4a6:	18a2      	adds	r2, r4, r2
 801e4a8:	3243      	adds	r2, #67	; 0x43
 801e4aa:	3302      	adds	r3, #2
 801e4ac:	7011      	strb	r1, [r2, #0]
 801e4ae:	e7c1      	b.n	801e434 <_printf_common+0x4c>
 801e4b0:	0022      	movs	r2, r4
 801e4b2:	2301      	movs	r3, #1
 801e4b4:	9901      	ldr	r1, [sp, #4]
 801e4b6:	9800      	ldr	r0, [sp, #0]
 801e4b8:	9e08      	ldr	r6, [sp, #32]
 801e4ba:	321a      	adds	r2, #26
 801e4bc:	47b0      	blx	r6
 801e4be:	1c43      	adds	r3, r0, #1
 801e4c0:	d0e6      	beq.n	801e490 <_printf_common+0xa8>
 801e4c2:	3701      	adds	r7, #1
 801e4c4:	e7d1      	b.n	801e46a <_printf_common+0x82>
	...

0801e4c8 <_printf_i>:
 801e4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4ca:	b08b      	sub	sp, #44	; 0x2c
 801e4cc:	9206      	str	r2, [sp, #24]
 801e4ce:	000a      	movs	r2, r1
 801e4d0:	3243      	adds	r2, #67	; 0x43
 801e4d2:	9307      	str	r3, [sp, #28]
 801e4d4:	9005      	str	r0, [sp, #20]
 801e4d6:	9204      	str	r2, [sp, #16]
 801e4d8:	7e0a      	ldrb	r2, [r1, #24]
 801e4da:	000c      	movs	r4, r1
 801e4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e4de:	2a78      	cmp	r2, #120	; 0x78
 801e4e0:	d806      	bhi.n	801e4f0 <_printf_i+0x28>
 801e4e2:	2a62      	cmp	r2, #98	; 0x62
 801e4e4:	d808      	bhi.n	801e4f8 <_printf_i+0x30>
 801e4e6:	2a00      	cmp	r2, #0
 801e4e8:	d100      	bne.n	801e4ec <_printf_i+0x24>
 801e4ea:	e0c0      	b.n	801e66e <_printf_i+0x1a6>
 801e4ec:	2a58      	cmp	r2, #88	; 0x58
 801e4ee:	d052      	beq.n	801e596 <_printf_i+0xce>
 801e4f0:	0026      	movs	r6, r4
 801e4f2:	3642      	adds	r6, #66	; 0x42
 801e4f4:	7032      	strb	r2, [r6, #0]
 801e4f6:	e022      	b.n	801e53e <_printf_i+0x76>
 801e4f8:	0010      	movs	r0, r2
 801e4fa:	3863      	subs	r0, #99	; 0x63
 801e4fc:	2815      	cmp	r0, #21
 801e4fe:	d8f7      	bhi.n	801e4f0 <_printf_i+0x28>
 801e500:	f7e1 fe0a 	bl	8000118 <__gnu_thumb1_case_shi>
 801e504:	001f0016 	.word	0x001f0016
 801e508:	fff6fff6 	.word	0xfff6fff6
 801e50c:	fff6fff6 	.word	0xfff6fff6
 801e510:	fff6001f 	.word	0xfff6001f
 801e514:	fff6fff6 	.word	0xfff6fff6
 801e518:	00a8fff6 	.word	0x00a8fff6
 801e51c:	009a0036 	.word	0x009a0036
 801e520:	fff6fff6 	.word	0xfff6fff6
 801e524:	fff600b9 	.word	0xfff600b9
 801e528:	fff60036 	.word	0xfff60036
 801e52c:	009efff6 	.word	0x009efff6
 801e530:	0026      	movs	r6, r4
 801e532:	681a      	ldr	r2, [r3, #0]
 801e534:	3642      	adds	r6, #66	; 0x42
 801e536:	1d11      	adds	r1, r2, #4
 801e538:	6019      	str	r1, [r3, #0]
 801e53a:	6813      	ldr	r3, [r2, #0]
 801e53c:	7033      	strb	r3, [r6, #0]
 801e53e:	2301      	movs	r3, #1
 801e540:	e0a7      	b.n	801e692 <_printf_i+0x1ca>
 801e542:	6808      	ldr	r0, [r1, #0]
 801e544:	6819      	ldr	r1, [r3, #0]
 801e546:	1d0a      	adds	r2, r1, #4
 801e548:	0605      	lsls	r5, r0, #24
 801e54a:	d50b      	bpl.n	801e564 <_printf_i+0x9c>
 801e54c:	680d      	ldr	r5, [r1, #0]
 801e54e:	601a      	str	r2, [r3, #0]
 801e550:	2d00      	cmp	r5, #0
 801e552:	da03      	bge.n	801e55c <_printf_i+0x94>
 801e554:	232d      	movs	r3, #45	; 0x2d
 801e556:	9a04      	ldr	r2, [sp, #16]
 801e558:	426d      	negs	r5, r5
 801e55a:	7013      	strb	r3, [r2, #0]
 801e55c:	4b61      	ldr	r3, [pc, #388]	; (801e6e4 <_printf_i+0x21c>)
 801e55e:	270a      	movs	r7, #10
 801e560:	9303      	str	r3, [sp, #12]
 801e562:	e032      	b.n	801e5ca <_printf_i+0x102>
 801e564:	680d      	ldr	r5, [r1, #0]
 801e566:	601a      	str	r2, [r3, #0]
 801e568:	0641      	lsls	r1, r0, #25
 801e56a:	d5f1      	bpl.n	801e550 <_printf_i+0x88>
 801e56c:	b22d      	sxth	r5, r5
 801e56e:	e7ef      	b.n	801e550 <_printf_i+0x88>
 801e570:	680d      	ldr	r5, [r1, #0]
 801e572:	6819      	ldr	r1, [r3, #0]
 801e574:	1d08      	adds	r0, r1, #4
 801e576:	6018      	str	r0, [r3, #0]
 801e578:	062e      	lsls	r6, r5, #24
 801e57a:	d501      	bpl.n	801e580 <_printf_i+0xb8>
 801e57c:	680d      	ldr	r5, [r1, #0]
 801e57e:	e003      	b.n	801e588 <_printf_i+0xc0>
 801e580:	066d      	lsls	r5, r5, #25
 801e582:	d5fb      	bpl.n	801e57c <_printf_i+0xb4>
 801e584:	680d      	ldr	r5, [r1, #0]
 801e586:	b2ad      	uxth	r5, r5
 801e588:	4b56      	ldr	r3, [pc, #344]	; (801e6e4 <_printf_i+0x21c>)
 801e58a:	270a      	movs	r7, #10
 801e58c:	9303      	str	r3, [sp, #12]
 801e58e:	2a6f      	cmp	r2, #111	; 0x6f
 801e590:	d117      	bne.n	801e5c2 <_printf_i+0xfa>
 801e592:	2708      	movs	r7, #8
 801e594:	e015      	b.n	801e5c2 <_printf_i+0xfa>
 801e596:	3145      	adds	r1, #69	; 0x45
 801e598:	700a      	strb	r2, [r1, #0]
 801e59a:	4a52      	ldr	r2, [pc, #328]	; (801e6e4 <_printf_i+0x21c>)
 801e59c:	9203      	str	r2, [sp, #12]
 801e59e:	681a      	ldr	r2, [r3, #0]
 801e5a0:	6821      	ldr	r1, [r4, #0]
 801e5a2:	ca20      	ldmia	r2!, {r5}
 801e5a4:	601a      	str	r2, [r3, #0]
 801e5a6:	0608      	lsls	r0, r1, #24
 801e5a8:	d550      	bpl.n	801e64c <_printf_i+0x184>
 801e5aa:	07cb      	lsls	r3, r1, #31
 801e5ac:	d502      	bpl.n	801e5b4 <_printf_i+0xec>
 801e5ae:	2320      	movs	r3, #32
 801e5b0:	4319      	orrs	r1, r3
 801e5b2:	6021      	str	r1, [r4, #0]
 801e5b4:	2710      	movs	r7, #16
 801e5b6:	2d00      	cmp	r5, #0
 801e5b8:	d103      	bne.n	801e5c2 <_printf_i+0xfa>
 801e5ba:	2320      	movs	r3, #32
 801e5bc:	6822      	ldr	r2, [r4, #0]
 801e5be:	439a      	bics	r2, r3
 801e5c0:	6022      	str	r2, [r4, #0]
 801e5c2:	0023      	movs	r3, r4
 801e5c4:	2200      	movs	r2, #0
 801e5c6:	3343      	adds	r3, #67	; 0x43
 801e5c8:	701a      	strb	r2, [r3, #0]
 801e5ca:	6863      	ldr	r3, [r4, #4]
 801e5cc:	60a3      	str	r3, [r4, #8]
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	db03      	blt.n	801e5da <_printf_i+0x112>
 801e5d2:	2204      	movs	r2, #4
 801e5d4:	6821      	ldr	r1, [r4, #0]
 801e5d6:	4391      	bics	r1, r2
 801e5d8:	6021      	str	r1, [r4, #0]
 801e5da:	2d00      	cmp	r5, #0
 801e5dc:	d102      	bne.n	801e5e4 <_printf_i+0x11c>
 801e5de:	9e04      	ldr	r6, [sp, #16]
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	d00c      	beq.n	801e5fe <_printf_i+0x136>
 801e5e4:	9e04      	ldr	r6, [sp, #16]
 801e5e6:	0028      	movs	r0, r5
 801e5e8:	0039      	movs	r1, r7
 801e5ea:	f7e1 fe25 	bl	8000238 <__aeabi_uidivmod>
 801e5ee:	9b03      	ldr	r3, [sp, #12]
 801e5f0:	3e01      	subs	r6, #1
 801e5f2:	5c5b      	ldrb	r3, [r3, r1]
 801e5f4:	7033      	strb	r3, [r6, #0]
 801e5f6:	002b      	movs	r3, r5
 801e5f8:	0005      	movs	r5, r0
 801e5fa:	429f      	cmp	r7, r3
 801e5fc:	d9f3      	bls.n	801e5e6 <_printf_i+0x11e>
 801e5fe:	2f08      	cmp	r7, #8
 801e600:	d109      	bne.n	801e616 <_printf_i+0x14e>
 801e602:	6823      	ldr	r3, [r4, #0]
 801e604:	07db      	lsls	r3, r3, #31
 801e606:	d506      	bpl.n	801e616 <_printf_i+0x14e>
 801e608:	6863      	ldr	r3, [r4, #4]
 801e60a:	6922      	ldr	r2, [r4, #16]
 801e60c:	4293      	cmp	r3, r2
 801e60e:	dc02      	bgt.n	801e616 <_printf_i+0x14e>
 801e610:	2330      	movs	r3, #48	; 0x30
 801e612:	3e01      	subs	r6, #1
 801e614:	7033      	strb	r3, [r6, #0]
 801e616:	9b04      	ldr	r3, [sp, #16]
 801e618:	1b9b      	subs	r3, r3, r6
 801e61a:	6123      	str	r3, [r4, #16]
 801e61c:	9b07      	ldr	r3, [sp, #28]
 801e61e:	0021      	movs	r1, r4
 801e620:	9300      	str	r3, [sp, #0]
 801e622:	9805      	ldr	r0, [sp, #20]
 801e624:	9b06      	ldr	r3, [sp, #24]
 801e626:	aa09      	add	r2, sp, #36	; 0x24
 801e628:	f7ff fede 	bl	801e3e8 <_printf_common>
 801e62c:	1c43      	adds	r3, r0, #1
 801e62e:	d135      	bne.n	801e69c <_printf_i+0x1d4>
 801e630:	2001      	movs	r0, #1
 801e632:	4240      	negs	r0, r0
 801e634:	b00b      	add	sp, #44	; 0x2c
 801e636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e638:	2220      	movs	r2, #32
 801e63a:	6809      	ldr	r1, [r1, #0]
 801e63c:	430a      	orrs	r2, r1
 801e63e:	6022      	str	r2, [r4, #0]
 801e640:	0022      	movs	r2, r4
 801e642:	2178      	movs	r1, #120	; 0x78
 801e644:	3245      	adds	r2, #69	; 0x45
 801e646:	7011      	strb	r1, [r2, #0]
 801e648:	4a27      	ldr	r2, [pc, #156]	; (801e6e8 <_printf_i+0x220>)
 801e64a:	e7a7      	b.n	801e59c <_printf_i+0xd4>
 801e64c:	0648      	lsls	r0, r1, #25
 801e64e:	d5ac      	bpl.n	801e5aa <_printf_i+0xe2>
 801e650:	b2ad      	uxth	r5, r5
 801e652:	e7aa      	b.n	801e5aa <_printf_i+0xe2>
 801e654:	681a      	ldr	r2, [r3, #0]
 801e656:	680d      	ldr	r5, [r1, #0]
 801e658:	1d10      	adds	r0, r2, #4
 801e65a:	6949      	ldr	r1, [r1, #20]
 801e65c:	6018      	str	r0, [r3, #0]
 801e65e:	6813      	ldr	r3, [r2, #0]
 801e660:	062e      	lsls	r6, r5, #24
 801e662:	d501      	bpl.n	801e668 <_printf_i+0x1a0>
 801e664:	6019      	str	r1, [r3, #0]
 801e666:	e002      	b.n	801e66e <_printf_i+0x1a6>
 801e668:	066d      	lsls	r5, r5, #25
 801e66a:	d5fb      	bpl.n	801e664 <_printf_i+0x19c>
 801e66c:	8019      	strh	r1, [r3, #0]
 801e66e:	2300      	movs	r3, #0
 801e670:	9e04      	ldr	r6, [sp, #16]
 801e672:	6123      	str	r3, [r4, #16]
 801e674:	e7d2      	b.n	801e61c <_printf_i+0x154>
 801e676:	681a      	ldr	r2, [r3, #0]
 801e678:	1d11      	adds	r1, r2, #4
 801e67a:	6019      	str	r1, [r3, #0]
 801e67c:	6816      	ldr	r6, [r2, #0]
 801e67e:	2100      	movs	r1, #0
 801e680:	0030      	movs	r0, r6
 801e682:	6862      	ldr	r2, [r4, #4]
 801e684:	f000 f832 	bl	801e6ec <memchr>
 801e688:	2800      	cmp	r0, #0
 801e68a:	d001      	beq.n	801e690 <_printf_i+0x1c8>
 801e68c:	1b80      	subs	r0, r0, r6
 801e68e:	6060      	str	r0, [r4, #4]
 801e690:	6863      	ldr	r3, [r4, #4]
 801e692:	6123      	str	r3, [r4, #16]
 801e694:	2300      	movs	r3, #0
 801e696:	9a04      	ldr	r2, [sp, #16]
 801e698:	7013      	strb	r3, [r2, #0]
 801e69a:	e7bf      	b.n	801e61c <_printf_i+0x154>
 801e69c:	6923      	ldr	r3, [r4, #16]
 801e69e:	0032      	movs	r2, r6
 801e6a0:	9906      	ldr	r1, [sp, #24]
 801e6a2:	9805      	ldr	r0, [sp, #20]
 801e6a4:	9d07      	ldr	r5, [sp, #28]
 801e6a6:	47a8      	blx	r5
 801e6a8:	1c43      	adds	r3, r0, #1
 801e6aa:	d0c1      	beq.n	801e630 <_printf_i+0x168>
 801e6ac:	6823      	ldr	r3, [r4, #0]
 801e6ae:	079b      	lsls	r3, r3, #30
 801e6b0:	d415      	bmi.n	801e6de <_printf_i+0x216>
 801e6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6b4:	68e0      	ldr	r0, [r4, #12]
 801e6b6:	4298      	cmp	r0, r3
 801e6b8:	dabc      	bge.n	801e634 <_printf_i+0x16c>
 801e6ba:	0018      	movs	r0, r3
 801e6bc:	e7ba      	b.n	801e634 <_printf_i+0x16c>
 801e6be:	0022      	movs	r2, r4
 801e6c0:	2301      	movs	r3, #1
 801e6c2:	9906      	ldr	r1, [sp, #24]
 801e6c4:	9805      	ldr	r0, [sp, #20]
 801e6c6:	9e07      	ldr	r6, [sp, #28]
 801e6c8:	3219      	adds	r2, #25
 801e6ca:	47b0      	blx	r6
 801e6cc:	1c43      	adds	r3, r0, #1
 801e6ce:	d0af      	beq.n	801e630 <_printf_i+0x168>
 801e6d0:	3501      	adds	r5, #1
 801e6d2:	68e3      	ldr	r3, [r4, #12]
 801e6d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e6d6:	1a9b      	subs	r3, r3, r2
 801e6d8:	42ab      	cmp	r3, r5
 801e6da:	dcf0      	bgt.n	801e6be <_printf_i+0x1f6>
 801e6dc:	e7e9      	b.n	801e6b2 <_printf_i+0x1ea>
 801e6de:	2500      	movs	r5, #0
 801e6e0:	e7f7      	b.n	801e6d2 <_printf_i+0x20a>
 801e6e2:	46c0      	nop			; (mov r8, r8)
 801e6e4:	080200e9 	.word	0x080200e9
 801e6e8:	080200fa 	.word	0x080200fa

0801e6ec <memchr>:
 801e6ec:	b2c9      	uxtb	r1, r1
 801e6ee:	1882      	adds	r2, r0, r2
 801e6f0:	4290      	cmp	r0, r2
 801e6f2:	d101      	bne.n	801e6f8 <memchr+0xc>
 801e6f4:	2000      	movs	r0, #0
 801e6f6:	4770      	bx	lr
 801e6f8:	7803      	ldrb	r3, [r0, #0]
 801e6fa:	428b      	cmp	r3, r1
 801e6fc:	d0fb      	beq.n	801e6f6 <memchr+0xa>
 801e6fe:	3001      	adds	r0, #1
 801e700:	e7f6      	b.n	801e6f0 <memchr+0x4>

0801e702 <memmove>:
 801e702:	b510      	push	{r4, lr}
 801e704:	4288      	cmp	r0, r1
 801e706:	d902      	bls.n	801e70e <memmove+0xc>
 801e708:	188b      	adds	r3, r1, r2
 801e70a:	4298      	cmp	r0, r3
 801e70c:	d303      	bcc.n	801e716 <memmove+0x14>
 801e70e:	2300      	movs	r3, #0
 801e710:	e007      	b.n	801e722 <memmove+0x20>
 801e712:	5c8b      	ldrb	r3, [r1, r2]
 801e714:	5483      	strb	r3, [r0, r2]
 801e716:	3a01      	subs	r2, #1
 801e718:	d2fb      	bcs.n	801e712 <memmove+0x10>
 801e71a:	bd10      	pop	{r4, pc}
 801e71c:	5ccc      	ldrb	r4, [r1, r3]
 801e71e:	54c4      	strb	r4, [r0, r3]
 801e720:	3301      	adds	r3, #1
 801e722:	429a      	cmp	r2, r3
 801e724:	d1fa      	bne.n	801e71c <memmove+0x1a>
 801e726:	e7f8      	b.n	801e71a <memmove+0x18>

0801e728 <_free_r>:
 801e728:	b570      	push	{r4, r5, r6, lr}
 801e72a:	0005      	movs	r5, r0
 801e72c:	2900      	cmp	r1, #0
 801e72e:	d010      	beq.n	801e752 <_free_r+0x2a>
 801e730:	1f0c      	subs	r4, r1, #4
 801e732:	6823      	ldr	r3, [r4, #0]
 801e734:	2b00      	cmp	r3, #0
 801e736:	da00      	bge.n	801e73a <_free_r+0x12>
 801e738:	18e4      	adds	r4, r4, r3
 801e73a:	0028      	movs	r0, r5
 801e73c:	f000 f8d4 	bl	801e8e8 <__malloc_lock>
 801e740:	4a1d      	ldr	r2, [pc, #116]	; (801e7b8 <_free_r+0x90>)
 801e742:	6813      	ldr	r3, [r2, #0]
 801e744:	2b00      	cmp	r3, #0
 801e746:	d105      	bne.n	801e754 <_free_r+0x2c>
 801e748:	6063      	str	r3, [r4, #4]
 801e74a:	6014      	str	r4, [r2, #0]
 801e74c:	0028      	movs	r0, r5
 801e74e:	f000 f8d3 	bl	801e8f8 <__malloc_unlock>
 801e752:	bd70      	pop	{r4, r5, r6, pc}
 801e754:	42a3      	cmp	r3, r4
 801e756:	d908      	bls.n	801e76a <_free_r+0x42>
 801e758:	6821      	ldr	r1, [r4, #0]
 801e75a:	1860      	adds	r0, r4, r1
 801e75c:	4283      	cmp	r3, r0
 801e75e:	d1f3      	bne.n	801e748 <_free_r+0x20>
 801e760:	6818      	ldr	r0, [r3, #0]
 801e762:	685b      	ldr	r3, [r3, #4]
 801e764:	1841      	adds	r1, r0, r1
 801e766:	6021      	str	r1, [r4, #0]
 801e768:	e7ee      	b.n	801e748 <_free_r+0x20>
 801e76a:	001a      	movs	r2, r3
 801e76c:	685b      	ldr	r3, [r3, #4]
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d001      	beq.n	801e776 <_free_r+0x4e>
 801e772:	42a3      	cmp	r3, r4
 801e774:	d9f9      	bls.n	801e76a <_free_r+0x42>
 801e776:	6811      	ldr	r1, [r2, #0]
 801e778:	1850      	adds	r0, r2, r1
 801e77a:	42a0      	cmp	r0, r4
 801e77c:	d10b      	bne.n	801e796 <_free_r+0x6e>
 801e77e:	6820      	ldr	r0, [r4, #0]
 801e780:	1809      	adds	r1, r1, r0
 801e782:	1850      	adds	r0, r2, r1
 801e784:	6011      	str	r1, [r2, #0]
 801e786:	4283      	cmp	r3, r0
 801e788:	d1e0      	bne.n	801e74c <_free_r+0x24>
 801e78a:	6818      	ldr	r0, [r3, #0]
 801e78c:	685b      	ldr	r3, [r3, #4]
 801e78e:	1841      	adds	r1, r0, r1
 801e790:	6011      	str	r1, [r2, #0]
 801e792:	6053      	str	r3, [r2, #4]
 801e794:	e7da      	b.n	801e74c <_free_r+0x24>
 801e796:	42a0      	cmp	r0, r4
 801e798:	d902      	bls.n	801e7a0 <_free_r+0x78>
 801e79a:	230c      	movs	r3, #12
 801e79c:	602b      	str	r3, [r5, #0]
 801e79e:	e7d5      	b.n	801e74c <_free_r+0x24>
 801e7a0:	6821      	ldr	r1, [r4, #0]
 801e7a2:	1860      	adds	r0, r4, r1
 801e7a4:	4283      	cmp	r3, r0
 801e7a6:	d103      	bne.n	801e7b0 <_free_r+0x88>
 801e7a8:	6818      	ldr	r0, [r3, #0]
 801e7aa:	685b      	ldr	r3, [r3, #4]
 801e7ac:	1841      	adds	r1, r0, r1
 801e7ae:	6021      	str	r1, [r4, #0]
 801e7b0:	6063      	str	r3, [r4, #4]
 801e7b2:	6054      	str	r4, [r2, #4]
 801e7b4:	e7ca      	b.n	801e74c <_free_r+0x24>
 801e7b6:	46c0      	nop			; (mov r8, r8)
 801e7b8:	20001348 	.word	0x20001348

0801e7bc <_malloc_r>:
 801e7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7be:	2303      	movs	r3, #3
 801e7c0:	1ccd      	adds	r5, r1, #3
 801e7c2:	439d      	bics	r5, r3
 801e7c4:	3508      	adds	r5, #8
 801e7c6:	0006      	movs	r6, r0
 801e7c8:	2d0c      	cmp	r5, #12
 801e7ca:	d21f      	bcs.n	801e80c <_malloc_r+0x50>
 801e7cc:	250c      	movs	r5, #12
 801e7ce:	42a9      	cmp	r1, r5
 801e7d0:	d81e      	bhi.n	801e810 <_malloc_r+0x54>
 801e7d2:	0030      	movs	r0, r6
 801e7d4:	f000 f888 	bl	801e8e8 <__malloc_lock>
 801e7d8:	4925      	ldr	r1, [pc, #148]	; (801e870 <_malloc_r+0xb4>)
 801e7da:	680a      	ldr	r2, [r1, #0]
 801e7dc:	0014      	movs	r4, r2
 801e7de:	2c00      	cmp	r4, #0
 801e7e0:	d11a      	bne.n	801e818 <_malloc_r+0x5c>
 801e7e2:	4f24      	ldr	r7, [pc, #144]	; (801e874 <_malloc_r+0xb8>)
 801e7e4:	683b      	ldr	r3, [r7, #0]
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d104      	bne.n	801e7f4 <_malloc_r+0x38>
 801e7ea:	0021      	movs	r1, r4
 801e7ec:	0030      	movs	r0, r6
 801e7ee:	f000 f869 	bl	801e8c4 <_sbrk_r>
 801e7f2:	6038      	str	r0, [r7, #0]
 801e7f4:	0029      	movs	r1, r5
 801e7f6:	0030      	movs	r0, r6
 801e7f8:	f000 f864 	bl	801e8c4 <_sbrk_r>
 801e7fc:	1c43      	adds	r3, r0, #1
 801e7fe:	d12b      	bne.n	801e858 <_malloc_r+0x9c>
 801e800:	230c      	movs	r3, #12
 801e802:	0030      	movs	r0, r6
 801e804:	6033      	str	r3, [r6, #0]
 801e806:	f000 f877 	bl	801e8f8 <__malloc_unlock>
 801e80a:	e003      	b.n	801e814 <_malloc_r+0x58>
 801e80c:	2d00      	cmp	r5, #0
 801e80e:	dade      	bge.n	801e7ce <_malloc_r+0x12>
 801e810:	230c      	movs	r3, #12
 801e812:	6033      	str	r3, [r6, #0]
 801e814:	2000      	movs	r0, #0
 801e816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e818:	6823      	ldr	r3, [r4, #0]
 801e81a:	1b5b      	subs	r3, r3, r5
 801e81c:	d419      	bmi.n	801e852 <_malloc_r+0x96>
 801e81e:	2b0b      	cmp	r3, #11
 801e820:	d903      	bls.n	801e82a <_malloc_r+0x6e>
 801e822:	6023      	str	r3, [r4, #0]
 801e824:	18e4      	adds	r4, r4, r3
 801e826:	6025      	str	r5, [r4, #0]
 801e828:	e003      	b.n	801e832 <_malloc_r+0x76>
 801e82a:	6863      	ldr	r3, [r4, #4]
 801e82c:	42a2      	cmp	r2, r4
 801e82e:	d10e      	bne.n	801e84e <_malloc_r+0x92>
 801e830:	600b      	str	r3, [r1, #0]
 801e832:	0030      	movs	r0, r6
 801e834:	f000 f860 	bl	801e8f8 <__malloc_unlock>
 801e838:	0020      	movs	r0, r4
 801e83a:	2207      	movs	r2, #7
 801e83c:	300b      	adds	r0, #11
 801e83e:	1d23      	adds	r3, r4, #4
 801e840:	4390      	bics	r0, r2
 801e842:	1ac2      	subs	r2, r0, r3
 801e844:	4298      	cmp	r0, r3
 801e846:	d0e6      	beq.n	801e816 <_malloc_r+0x5a>
 801e848:	1a1b      	subs	r3, r3, r0
 801e84a:	50a3      	str	r3, [r4, r2]
 801e84c:	e7e3      	b.n	801e816 <_malloc_r+0x5a>
 801e84e:	6053      	str	r3, [r2, #4]
 801e850:	e7ef      	b.n	801e832 <_malloc_r+0x76>
 801e852:	0022      	movs	r2, r4
 801e854:	6864      	ldr	r4, [r4, #4]
 801e856:	e7c2      	b.n	801e7de <_malloc_r+0x22>
 801e858:	2303      	movs	r3, #3
 801e85a:	1cc4      	adds	r4, r0, #3
 801e85c:	439c      	bics	r4, r3
 801e85e:	42a0      	cmp	r0, r4
 801e860:	d0e1      	beq.n	801e826 <_malloc_r+0x6a>
 801e862:	1a21      	subs	r1, r4, r0
 801e864:	0030      	movs	r0, r6
 801e866:	f000 f82d 	bl	801e8c4 <_sbrk_r>
 801e86a:	1c43      	adds	r3, r0, #1
 801e86c:	d1db      	bne.n	801e826 <_malloc_r+0x6a>
 801e86e:	e7c7      	b.n	801e800 <_malloc_r+0x44>
 801e870:	20001348 	.word	0x20001348
 801e874:	2000134c 	.word	0x2000134c

0801e878 <_realloc_r>:
 801e878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e87a:	0007      	movs	r7, r0
 801e87c:	000d      	movs	r5, r1
 801e87e:	0016      	movs	r6, r2
 801e880:	2900      	cmp	r1, #0
 801e882:	d105      	bne.n	801e890 <_realloc_r+0x18>
 801e884:	0011      	movs	r1, r2
 801e886:	f7ff ff99 	bl	801e7bc <_malloc_r>
 801e88a:	0004      	movs	r4, r0
 801e88c:	0020      	movs	r0, r4
 801e88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e890:	2a00      	cmp	r2, #0
 801e892:	d103      	bne.n	801e89c <_realloc_r+0x24>
 801e894:	f7ff ff48 	bl	801e728 <_free_r>
 801e898:	0034      	movs	r4, r6
 801e89a:	e7f7      	b.n	801e88c <_realloc_r+0x14>
 801e89c:	f000 f834 	bl	801e908 <_malloc_usable_size_r>
 801e8a0:	002c      	movs	r4, r5
 801e8a2:	42b0      	cmp	r0, r6
 801e8a4:	d2f2      	bcs.n	801e88c <_realloc_r+0x14>
 801e8a6:	0031      	movs	r1, r6
 801e8a8:	0038      	movs	r0, r7
 801e8aa:	f7ff ff87 	bl	801e7bc <_malloc_r>
 801e8ae:	1e04      	subs	r4, r0, #0
 801e8b0:	d0ec      	beq.n	801e88c <_realloc_r+0x14>
 801e8b2:	0029      	movs	r1, r5
 801e8b4:	0032      	movs	r2, r6
 801e8b6:	f7ff fc03 	bl	801e0c0 <memcpy>
 801e8ba:	0029      	movs	r1, r5
 801e8bc:	0038      	movs	r0, r7
 801e8be:	f7ff ff33 	bl	801e728 <_free_r>
 801e8c2:	e7e3      	b.n	801e88c <_realloc_r+0x14>

0801e8c4 <_sbrk_r>:
 801e8c4:	2300      	movs	r3, #0
 801e8c6:	b570      	push	{r4, r5, r6, lr}
 801e8c8:	4d06      	ldr	r5, [pc, #24]	; (801e8e4 <_sbrk_r+0x20>)
 801e8ca:	0004      	movs	r4, r0
 801e8cc:	0008      	movs	r0, r1
 801e8ce:	602b      	str	r3, [r5, #0]
 801e8d0:	f7e6 ff54 	bl	800577c <_sbrk>
 801e8d4:	1c43      	adds	r3, r0, #1
 801e8d6:	d103      	bne.n	801e8e0 <_sbrk_r+0x1c>
 801e8d8:	682b      	ldr	r3, [r5, #0]
 801e8da:	2b00      	cmp	r3, #0
 801e8dc:	d000      	beq.n	801e8e0 <_sbrk_r+0x1c>
 801e8de:	6023      	str	r3, [r4, #0]
 801e8e0:	bd70      	pop	{r4, r5, r6, pc}
 801e8e2:	46c0      	nop			; (mov r8, r8)
 801e8e4:	200017d0 	.word	0x200017d0

0801e8e8 <__malloc_lock>:
 801e8e8:	b510      	push	{r4, lr}
 801e8ea:	4802      	ldr	r0, [pc, #8]	; (801e8f4 <__malloc_lock+0xc>)
 801e8ec:	f000 f814 	bl	801e918 <__retarget_lock_acquire_recursive>
 801e8f0:	bd10      	pop	{r4, pc}
 801e8f2:	46c0      	nop			; (mov r8, r8)
 801e8f4:	200017d8 	.word	0x200017d8

0801e8f8 <__malloc_unlock>:
 801e8f8:	b510      	push	{r4, lr}
 801e8fa:	4802      	ldr	r0, [pc, #8]	; (801e904 <__malloc_unlock+0xc>)
 801e8fc:	f000 f80d 	bl	801e91a <__retarget_lock_release_recursive>
 801e900:	bd10      	pop	{r4, pc}
 801e902:	46c0      	nop			; (mov r8, r8)
 801e904:	200017d8 	.word	0x200017d8

0801e908 <_malloc_usable_size_r>:
 801e908:	1f0b      	subs	r3, r1, #4
 801e90a:	681b      	ldr	r3, [r3, #0]
 801e90c:	1f18      	subs	r0, r3, #4
 801e90e:	2b00      	cmp	r3, #0
 801e910:	da01      	bge.n	801e916 <_malloc_usable_size_r+0xe>
 801e912:	580b      	ldr	r3, [r1, r0]
 801e914:	18c0      	adds	r0, r0, r3
 801e916:	4770      	bx	lr

0801e918 <__retarget_lock_acquire_recursive>:
 801e918:	4770      	bx	lr

0801e91a <__retarget_lock_release_recursive>:
 801e91a:	4770      	bx	lr

0801e91c <floor>:
 801e91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e91e:	004b      	lsls	r3, r1, #1
 801e920:	4a3d      	ldr	r2, [pc, #244]	; (801ea18 <floor+0xfc>)
 801e922:	0d5b      	lsrs	r3, r3, #21
 801e924:	189f      	adds	r7, r3, r2
 801e926:	4684      	mov	ip, r0
 801e928:	000e      	movs	r6, r1
 801e92a:	000d      	movs	r5, r1
 801e92c:	0004      	movs	r4, r0
 801e92e:	9001      	str	r0, [sp, #4]
 801e930:	2f13      	cmp	r7, #19
 801e932:	dc34      	bgt.n	801e99e <floor+0x82>
 801e934:	2f00      	cmp	r7, #0
 801e936:	da16      	bge.n	801e966 <floor+0x4a>
 801e938:	4a38      	ldr	r2, [pc, #224]	; (801ea1c <floor+0x100>)
 801e93a:	4b39      	ldr	r3, [pc, #228]	; (801ea20 <floor+0x104>)
 801e93c:	4660      	mov	r0, ip
 801e93e:	0031      	movs	r1, r6
 801e940:	f7e2 fba2 	bl	8001088 <__aeabi_dadd>
 801e944:	2200      	movs	r2, #0
 801e946:	2300      	movs	r3, #0
 801e948:	f7e1 fd90 	bl	800046c <__aeabi_dcmpgt>
 801e94c:	2800      	cmp	r0, #0
 801e94e:	d007      	beq.n	801e960 <floor+0x44>
 801e950:	2e00      	cmp	r6, #0
 801e952:	da5d      	bge.n	801ea10 <floor+0xf4>
 801e954:	0073      	lsls	r3, r6, #1
 801e956:	085b      	lsrs	r3, r3, #1
 801e958:	431c      	orrs	r4, r3
 801e95a:	d001      	beq.n	801e960 <floor+0x44>
 801e95c:	2400      	movs	r4, #0
 801e95e:	4d31      	ldr	r5, [pc, #196]	; (801ea24 <floor+0x108>)
 801e960:	46a4      	mov	ip, r4
 801e962:	002e      	movs	r6, r5
 801e964:	e029      	b.n	801e9ba <floor+0x9e>
 801e966:	4b30      	ldr	r3, [pc, #192]	; (801ea28 <floor+0x10c>)
 801e968:	413b      	asrs	r3, r7
 801e96a:	9300      	str	r3, [sp, #0]
 801e96c:	400b      	ands	r3, r1
 801e96e:	4303      	orrs	r3, r0
 801e970:	d023      	beq.n	801e9ba <floor+0x9e>
 801e972:	4a2a      	ldr	r2, [pc, #168]	; (801ea1c <floor+0x100>)
 801e974:	4b2a      	ldr	r3, [pc, #168]	; (801ea20 <floor+0x104>)
 801e976:	4660      	mov	r0, ip
 801e978:	0031      	movs	r1, r6
 801e97a:	f7e2 fb85 	bl	8001088 <__aeabi_dadd>
 801e97e:	2200      	movs	r2, #0
 801e980:	2300      	movs	r3, #0
 801e982:	f7e1 fd73 	bl	800046c <__aeabi_dcmpgt>
 801e986:	2800      	cmp	r0, #0
 801e988:	d0ea      	beq.n	801e960 <floor+0x44>
 801e98a:	2e00      	cmp	r6, #0
 801e98c:	da03      	bge.n	801e996 <floor+0x7a>
 801e98e:	2380      	movs	r3, #128	; 0x80
 801e990:	035b      	lsls	r3, r3, #13
 801e992:	413b      	asrs	r3, r7
 801e994:	18f5      	adds	r5, r6, r3
 801e996:	9b00      	ldr	r3, [sp, #0]
 801e998:	2400      	movs	r4, #0
 801e99a:	439d      	bics	r5, r3
 801e99c:	e7e0      	b.n	801e960 <floor+0x44>
 801e99e:	2f33      	cmp	r7, #51	; 0x33
 801e9a0:	dd0f      	ble.n	801e9c2 <floor+0xa6>
 801e9a2:	2380      	movs	r3, #128	; 0x80
 801e9a4:	00db      	lsls	r3, r3, #3
 801e9a6:	429f      	cmp	r7, r3
 801e9a8:	d107      	bne.n	801e9ba <floor+0x9e>
 801e9aa:	0002      	movs	r2, r0
 801e9ac:	000b      	movs	r3, r1
 801e9ae:	4660      	mov	r0, ip
 801e9b0:	0031      	movs	r1, r6
 801e9b2:	f7e2 fb69 	bl	8001088 <__aeabi_dadd>
 801e9b6:	4684      	mov	ip, r0
 801e9b8:	000e      	movs	r6, r1
 801e9ba:	4660      	mov	r0, ip
 801e9bc:	0031      	movs	r1, r6
 801e9be:	b003      	add	sp, #12
 801e9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9c2:	4a1a      	ldr	r2, [pc, #104]	; (801ea2c <floor+0x110>)
 801e9c4:	189b      	adds	r3, r3, r2
 801e9c6:	2201      	movs	r2, #1
 801e9c8:	4252      	negs	r2, r2
 801e9ca:	40da      	lsrs	r2, r3
 801e9cc:	9200      	str	r2, [sp, #0]
 801e9ce:	4210      	tst	r0, r2
 801e9d0:	d0f3      	beq.n	801e9ba <floor+0x9e>
 801e9d2:	4a12      	ldr	r2, [pc, #72]	; (801ea1c <floor+0x100>)
 801e9d4:	4b12      	ldr	r3, [pc, #72]	; (801ea20 <floor+0x104>)
 801e9d6:	4660      	mov	r0, ip
 801e9d8:	0031      	movs	r1, r6
 801e9da:	f7e2 fb55 	bl	8001088 <__aeabi_dadd>
 801e9de:	2200      	movs	r2, #0
 801e9e0:	2300      	movs	r3, #0
 801e9e2:	f7e1 fd43 	bl	800046c <__aeabi_dcmpgt>
 801e9e6:	2800      	cmp	r0, #0
 801e9e8:	d0ba      	beq.n	801e960 <floor+0x44>
 801e9ea:	2e00      	cmp	r6, #0
 801e9ec:	da02      	bge.n	801e9f4 <floor+0xd8>
 801e9ee:	2f14      	cmp	r7, #20
 801e9f0:	d103      	bne.n	801e9fa <floor+0xde>
 801e9f2:	3501      	adds	r5, #1
 801e9f4:	9b00      	ldr	r3, [sp, #0]
 801e9f6:	439c      	bics	r4, r3
 801e9f8:	e7b2      	b.n	801e960 <floor+0x44>
 801e9fa:	2334      	movs	r3, #52	; 0x34
 801e9fc:	1bdf      	subs	r7, r3, r7
 801e9fe:	3b33      	subs	r3, #51	; 0x33
 801ea00:	40bb      	lsls	r3, r7
 801ea02:	18e4      	adds	r4, r4, r3
 801ea04:	9b01      	ldr	r3, [sp, #4]
 801ea06:	429c      	cmp	r4, r3
 801ea08:	419b      	sbcs	r3, r3
 801ea0a:	425b      	negs	r3, r3
 801ea0c:	18f5      	adds	r5, r6, r3
 801ea0e:	e7f1      	b.n	801e9f4 <floor+0xd8>
 801ea10:	2400      	movs	r4, #0
 801ea12:	0025      	movs	r5, r4
 801ea14:	e7a4      	b.n	801e960 <floor+0x44>
 801ea16:	46c0      	nop			; (mov r8, r8)
 801ea18:	fffffc01 	.word	0xfffffc01
 801ea1c:	8800759c 	.word	0x8800759c
 801ea20:	7e37e43c 	.word	0x7e37e43c
 801ea24:	bff00000 	.word	0xbff00000
 801ea28:	000fffff 	.word	0x000fffff
 801ea2c:	fffffbed 	.word	0xfffffbed

0801ea30 <_init>:
 801ea30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea32:	46c0      	nop			; (mov r8, r8)
 801ea34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea36:	bc08      	pop	{r3}
 801ea38:	469e      	mov	lr, r3
 801ea3a:	4770      	bx	lr

0801ea3c <_fini>:
 801ea3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea3e:	46c0      	nop			; (mov r8, r8)
 801ea40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea42:	bc08      	pop	{r3}
 801ea44:	469e      	mov	lr, r3
 801ea46:	4770      	bx	lr
