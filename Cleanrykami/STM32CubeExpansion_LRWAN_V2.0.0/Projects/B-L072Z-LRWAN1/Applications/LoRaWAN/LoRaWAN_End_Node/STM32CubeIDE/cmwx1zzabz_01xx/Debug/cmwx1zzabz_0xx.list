
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d324  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001524  0801d3e4  0801d3e4  0002d3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e908  0801e908  0002e908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e910  0801e910  0002e910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e914  0801e914  0002e914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  20000000  0801e918  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017d4  200001d8  0801eaf0  000301d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  200019ac  0801eaf0  000319ac  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00036ab2  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000913d  00000000  00000000  00066cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a58  00000000  00000000  0006fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002680  00000000  00000000  00072848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021aa9  00000000  00000000  00074ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003bfe8  00000000  00000000  00096971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b2180  00000000  00000000  000d2959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00184ad9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000972c  00000000  00000000  00184b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801d3cc 	.word	0x0801d3cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0801d3cc 	.word	0x0801d3cc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fa77 	bl	8001908 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f9c7 	bl	80017b8 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fa69 	bl	8001908 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa5f 	bl	8001908 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9ef 	bl	800183c <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9e5 	bl	800183c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f93e 	bl	8000738 <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	0008      	movs	r0, r1
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f852 	bl	80005a0 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	46ce      	mov	lr, r9
 800050c:	4647      	mov	r7, r8
 800050e:	b580      	push	{r7, lr}
 8000510:	0007      	movs	r7, r0
 8000512:	4699      	mov	r9, r3
 8000514:	0c3b      	lsrs	r3, r7, #16
 8000516:	469c      	mov	ip, r3
 8000518:	0413      	lsls	r3, r2, #16
 800051a:	0c1b      	lsrs	r3, r3, #16
 800051c:	001d      	movs	r5, r3
 800051e:	000e      	movs	r6, r1
 8000520:	4661      	mov	r1, ip
 8000522:	0400      	lsls	r0, r0, #16
 8000524:	0c14      	lsrs	r4, r2, #16
 8000526:	0c00      	lsrs	r0, r0, #16
 8000528:	4345      	muls	r5, r0
 800052a:	434b      	muls	r3, r1
 800052c:	4360      	muls	r0, r4
 800052e:	4361      	muls	r1, r4
 8000530:	18c0      	adds	r0, r0, r3
 8000532:	0c2c      	lsrs	r4, r5, #16
 8000534:	1820      	adds	r0, r4, r0
 8000536:	468c      	mov	ip, r1
 8000538:	4283      	cmp	r3, r0
 800053a:	d903      	bls.n	8000544 <__aeabi_lmul+0x3c>
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	025b      	lsls	r3, r3, #9
 8000540:	4698      	mov	r8, r3
 8000542:	44c4      	add	ip, r8
 8000544:	4649      	mov	r1, r9
 8000546:	4379      	muls	r1, r7
 8000548:	4372      	muls	r2, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	4463      	add	r3, ip
 800054e:	042d      	lsls	r5, r5, #16
 8000550:	0c2d      	lsrs	r5, r5, #16
 8000552:	18c9      	adds	r1, r1, r3
 8000554:	0400      	lsls	r0, r0, #16
 8000556:	1940      	adds	r0, r0, r5
 8000558:	1889      	adds	r1, r1, r2
 800055a:	bcc0      	pop	{r6, r7}
 800055c:	46b9      	mov	r9, r7
 800055e:	46b0      	mov	r8, r6
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)

08000564 <__aeabi_d2uiz>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	2200      	movs	r2, #0
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <__aeabi_d2uiz+0x38>)
 800056a:	0004      	movs	r4, r0
 800056c:	000d      	movs	r5, r1
 800056e:	f7ff ff7d 	bl	800046c <__aeabi_dcmpge>
 8000572:	2800      	cmp	r0, #0
 8000574:	d104      	bne.n	8000580 <__aeabi_d2uiz+0x1c>
 8000576:	0020      	movs	r0, r4
 8000578:	0029      	movs	r1, r5
 800057a:	f002 f827 	bl	80025cc <__aeabi_d2iz>
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <__aeabi_d2uiz+0x38>)
 8000582:	2200      	movs	r2, #0
 8000584:	0020      	movs	r0, r4
 8000586:	0029      	movs	r1, r5
 8000588:	f001 fc8e 	bl	8001ea8 <__aeabi_dsub>
 800058c:	f002 f81e 	bl	80025cc <__aeabi_d2iz>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	061b      	lsls	r3, r3, #24
 8000594:	469c      	mov	ip, r3
 8000596:	4460      	add	r0, ip
 8000598:	e7f1      	b.n	800057e <__aeabi_d2uiz+0x1a>
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	41e00000 	.word	0x41e00000

080005a0 <__udivmoddi4>:
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	4657      	mov	r7, sl
 80005a4:	464e      	mov	r6, r9
 80005a6:	4645      	mov	r5, r8
 80005a8:	46de      	mov	lr, fp
 80005aa:	b5e0      	push	{r5, r6, r7, lr}
 80005ac:	0004      	movs	r4, r0
 80005ae:	000d      	movs	r5, r1
 80005b0:	4692      	mov	sl, r2
 80005b2:	4699      	mov	r9, r3
 80005b4:	b083      	sub	sp, #12
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d830      	bhi.n	800061c <__udivmoddi4+0x7c>
 80005ba:	d02d      	beq.n	8000618 <__udivmoddi4+0x78>
 80005bc:	4649      	mov	r1, r9
 80005be:	4650      	mov	r0, sl
 80005c0:	f002 f8f6 	bl	80027b0 <__clzdi2>
 80005c4:	0029      	movs	r1, r5
 80005c6:	0006      	movs	r6, r0
 80005c8:	0020      	movs	r0, r4
 80005ca:	f002 f8f1 	bl	80027b0 <__clzdi2>
 80005ce:	1a33      	subs	r3, r6, r0
 80005d0:	4698      	mov	r8, r3
 80005d2:	3b20      	subs	r3, #32
 80005d4:	469b      	mov	fp, r3
 80005d6:	d433      	bmi.n	8000640 <__udivmoddi4+0xa0>
 80005d8:	465a      	mov	r2, fp
 80005da:	4653      	mov	r3, sl
 80005dc:	4093      	lsls	r3, r2
 80005de:	4642      	mov	r2, r8
 80005e0:	001f      	movs	r7, r3
 80005e2:	4653      	mov	r3, sl
 80005e4:	4093      	lsls	r3, r2
 80005e6:	001e      	movs	r6, r3
 80005e8:	42af      	cmp	r7, r5
 80005ea:	d83a      	bhi.n	8000662 <__udivmoddi4+0xc2>
 80005ec:	42af      	cmp	r7, r5
 80005ee:	d100      	bne.n	80005f2 <__udivmoddi4+0x52>
 80005f0:	e078      	b.n	80006e4 <__udivmoddi4+0x144>
 80005f2:	465b      	mov	r3, fp
 80005f4:	1ba4      	subs	r4, r4, r6
 80005f6:	41bd      	sbcs	r5, r7
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	da00      	bge.n	80005fe <__udivmoddi4+0x5e>
 80005fc:	e075      	b.n	80006ea <__udivmoddi4+0x14a>
 80005fe:	2200      	movs	r2, #0
 8000600:	2300      	movs	r3, #0
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2301      	movs	r3, #1
 8000608:	465a      	mov	r2, fp
 800060a:	4093      	lsls	r3, r2
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2301      	movs	r3, #1
 8000610:	4642      	mov	r2, r8
 8000612:	4093      	lsls	r3, r2
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	e028      	b.n	800066a <__udivmoddi4+0xca>
 8000618:	4282      	cmp	r2, r0
 800061a:	d9cf      	bls.n	80005bc <__udivmoddi4+0x1c>
 800061c:	2200      	movs	r2, #0
 800061e:	2300      	movs	r3, #0
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <__udivmoddi4+0x8e>
 800062a:	601c      	str	r4, [r3, #0]
 800062c:	605d      	str	r5, [r3, #4]
 800062e:	9800      	ldr	r0, [sp, #0]
 8000630:	9901      	ldr	r1, [sp, #4]
 8000632:	b003      	add	sp, #12
 8000634:	bcf0      	pop	{r4, r5, r6, r7}
 8000636:	46bb      	mov	fp, r7
 8000638:	46b2      	mov	sl, r6
 800063a:	46a9      	mov	r9, r5
 800063c:	46a0      	mov	r8, r4
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000640:	4642      	mov	r2, r8
 8000642:	2320      	movs	r3, #32
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	4652      	mov	r2, sl
 8000648:	40da      	lsrs	r2, r3
 800064a:	4641      	mov	r1, r8
 800064c:	0013      	movs	r3, r2
 800064e:	464a      	mov	r2, r9
 8000650:	408a      	lsls	r2, r1
 8000652:	0017      	movs	r7, r2
 8000654:	4642      	mov	r2, r8
 8000656:	431f      	orrs	r7, r3
 8000658:	4653      	mov	r3, sl
 800065a:	4093      	lsls	r3, r2
 800065c:	001e      	movs	r6, r3
 800065e:	42af      	cmp	r7, r5
 8000660:	d9c4      	bls.n	80005ec <__udivmoddi4+0x4c>
 8000662:	2200      	movs	r2, #0
 8000664:	2300      	movs	r3, #0
 8000666:	9200      	str	r2, [sp, #0]
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	4643      	mov	r3, r8
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0d9      	beq.n	8000624 <__udivmoddi4+0x84>
 8000670:	07fb      	lsls	r3, r7, #31
 8000672:	0872      	lsrs	r2, r6, #1
 8000674:	431a      	orrs	r2, r3
 8000676:	4646      	mov	r6, r8
 8000678:	087b      	lsrs	r3, r7, #1
 800067a:	e00e      	b.n	800069a <__udivmoddi4+0xfa>
 800067c:	42ab      	cmp	r3, r5
 800067e:	d101      	bne.n	8000684 <__udivmoddi4+0xe4>
 8000680:	42a2      	cmp	r2, r4
 8000682:	d80c      	bhi.n	800069e <__udivmoddi4+0xfe>
 8000684:	1aa4      	subs	r4, r4, r2
 8000686:	419d      	sbcs	r5, r3
 8000688:	2001      	movs	r0, #1
 800068a:	1924      	adds	r4, r4, r4
 800068c:	416d      	adcs	r5, r5
 800068e:	2100      	movs	r1, #0
 8000690:	3e01      	subs	r6, #1
 8000692:	1824      	adds	r4, r4, r0
 8000694:	414d      	adcs	r5, r1
 8000696:	2e00      	cmp	r6, #0
 8000698:	d006      	beq.n	80006a8 <__udivmoddi4+0x108>
 800069a:	42ab      	cmp	r3, r5
 800069c:	d9ee      	bls.n	800067c <__udivmoddi4+0xdc>
 800069e:	3e01      	subs	r6, #1
 80006a0:	1924      	adds	r4, r4, r4
 80006a2:	416d      	adcs	r5, r5
 80006a4:	2e00      	cmp	r6, #0
 80006a6:	d1f8      	bne.n	800069a <__udivmoddi4+0xfa>
 80006a8:	9800      	ldr	r0, [sp, #0]
 80006aa:	9901      	ldr	r1, [sp, #4]
 80006ac:	465b      	mov	r3, fp
 80006ae:	1900      	adds	r0, r0, r4
 80006b0:	4169      	adcs	r1, r5
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db24      	blt.n	8000700 <__udivmoddi4+0x160>
 80006b6:	002b      	movs	r3, r5
 80006b8:	465a      	mov	r2, fp
 80006ba:	4644      	mov	r4, r8
 80006bc:	40d3      	lsrs	r3, r2
 80006be:	002a      	movs	r2, r5
 80006c0:	40e2      	lsrs	r2, r4
 80006c2:	001c      	movs	r4, r3
 80006c4:	465b      	mov	r3, fp
 80006c6:	0015      	movs	r5, r2
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db2a      	blt.n	8000722 <__udivmoddi4+0x182>
 80006cc:	0026      	movs	r6, r4
 80006ce:	409e      	lsls	r6, r3
 80006d0:	0033      	movs	r3, r6
 80006d2:	0026      	movs	r6, r4
 80006d4:	4647      	mov	r7, r8
 80006d6:	40be      	lsls	r6, r7
 80006d8:	0032      	movs	r2, r6
 80006da:	1a80      	subs	r0, r0, r2
 80006dc:	4199      	sbcs	r1, r3
 80006de:	9000      	str	r0, [sp, #0]
 80006e0:	9101      	str	r1, [sp, #4]
 80006e2:	e79f      	b.n	8000624 <__udivmoddi4+0x84>
 80006e4:	42a3      	cmp	r3, r4
 80006e6:	d8bc      	bhi.n	8000662 <__udivmoddi4+0xc2>
 80006e8:	e783      	b.n	80005f2 <__udivmoddi4+0x52>
 80006ea:	4642      	mov	r2, r8
 80006ec:	2320      	movs	r3, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	2200      	movs	r2, #0
 80006f4:	9100      	str	r1, [sp, #0]
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	40da      	lsrs	r2, r3
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	e786      	b.n	800060e <__udivmoddi4+0x6e>
 8000700:	4642      	mov	r2, r8
 8000702:	2320      	movs	r3, #32
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	002a      	movs	r2, r5
 8000708:	4646      	mov	r6, r8
 800070a:	409a      	lsls	r2, r3
 800070c:	0023      	movs	r3, r4
 800070e:	40f3      	lsrs	r3, r6
 8000710:	4644      	mov	r4, r8
 8000712:	4313      	orrs	r3, r2
 8000714:	002a      	movs	r2, r5
 8000716:	40e2      	lsrs	r2, r4
 8000718:	001c      	movs	r4, r3
 800071a:	465b      	mov	r3, fp
 800071c:	0015      	movs	r5, r2
 800071e:	2b00      	cmp	r3, #0
 8000720:	dad4      	bge.n	80006cc <__udivmoddi4+0x12c>
 8000722:	4642      	mov	r2, r8
 8000724:	002f      	movs	r7, r5
 8000726:	2320      	movs	r3, #32
 8000728:	0026      	movs	r6, r4
 800072a:	4097      	lsls	r7, r2
 800072c:	1a9b      	subs	r3, r3, r2
 800072e:	40de      	lsrs	r6, r3
 8000730:	003b      	movs	r3, r7
 8000732:	4333      	orrs	r3, r6
 8000734:	e7cd      	b.n	80006d2 <__udivmoddi4+0x132>
 8000736:	46c0      	nop			; (mov r8, r8)

08000738 <__gnu_ldivmod_helper>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	46ce      	mov	lr, r9
 800073c:	4647      	mov	r7, r8
 800073e:	b580      	push	{r7, lr}
 8000740:	4691      	mov	r9, r2
 8000742:	4698      	mov	r8, r3
 8000744:	0004      	movs	r4, r0
 8000746:	000d      	movs	r5, r1
 8000748:	f002 f83e 	bl	80027c8 <__divdi3>
 800074c:	0007      	movs	r7, r0
 800074e:	000e      	movs	r6, r1
 8000750:	0002      	movs	r2, r0
 8000752:	000b      	movs	r3, r1
 8000754:	4648      	mov	r0, r9
 8000756:	4641      	mov	r1, r8
 8000758:	f7ff fed6 	bl	8000508 <__aeabi_lmul>
 800075c:	1a24      	subs	r4, r4, r0
 800075e:	418d      	sbcs	r5, r1
 8000760:	9b08      	ldr	r3, [sp, #32]
 8000762:	0038      	movs	r0, r7
 8000764:	0031      	movs	r1, r6
 8000766:	601c      	str	r4, [r3, #0]
 8000768:	605d      	str	r5, [r3, #4]
 800076a:	bcc0      	pop	{r6, r7}
 800076c:	46b9      	mov	r9, r7
 800076e:	46b0      	mov	r8, r6
 8000770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)

08000774 <__aeabi_fsub>:
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	46ce      	mov	lr, r9
 8000778:	4647      	mov	r7, r8
 800077a:	0243      	lsls	r3, r0, #9
 800077c:	0a5b      	lsrs	r3, r3, #9
 800077e:	024e      	lsls	r6, r1, #9
 8000780:	00da      	lsls	r2, r3, #3
 8000782:	4694      	mov	ip, r2
 8000784:	0a72      	lsrs	r2, r6, #9
 8000786:	4691      	mov	r9, r2
 8000788:	0045      	lsls	r5, r0, #1
 800078a:	004a      	lsls	r2, r1, #1
 800078c:	b580      	push	{r7, lr}
 800078e:	0e2d      	lsrs	r5, r5, #24
 8000790:	001f      	movs	r7, r3
 8000792:	0fc4      	lsrs	r4, r0, #31
 8000794:	0e12      	lsrs	r2, r2, #24
 8000796:	0fc9      	lsrs	r1, r1, #31
 8000798:	09b6      	lsrs	r6, r6, #6
 800079a:	2aff      	cmp	r2, #255	; 0xff
 800079c:	d05b      	beq.n	8000856 <__aeabi_fsub+0xe2>
 800079e:	2001      	movs	r0, #1
 80007a0:	4041      	eors	r1, r0
 80007a2:	428c      	cmp	r4, r1
 80007a4:	d039      	beq.n	800081a <__aeabi_fsub+0xa6>
 80007a6:	1aa8      	subs	r0, r5, r2
 80007a8:	2800      	cmp	r0, #0
 80007aa:	dd5a      	ble.n	8000862 <__aeabi_fsub+0xee>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d06a      	beq.n	8000886 <__aeabi_fsub+0x112>
 80007b0:	2dff      	cmp	r5, #255	; 0xff
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fsub+0x42>
 80007b4:	e0d9      	b.n	800096a <__aeabi_fsub+0x1f6>
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	04d2      	lsls	r2, r2, #19
 80007ba:	4316      	orrs	r6, r2
 80007bc:	281b      	cmp	r0, #27
 80007be:	dc00      	bgt.n	80007c2 <__aeabi_fsub+0x4e>
 80007c0:	e0e9      	b.n	8000996 <__aeabi_fsub+0x222>
 80007c2:	2001      	movs	r0, #1
 80007c4:	4663      	mov	r3, ip
 80007c6:	1a18      	subs	r0, r3, r0
 80007c8:	0143      	lsls	r3, r0, #5
 80007ca:	d400      	bmi.n	80007ce <__aeabi_fsub+0x5a>
 80007cc:	e0b4      	b.n	8000938 <__aeabi_fsub+0x1c4>
 80007ce:	0180      	lsls	r0, r0, #6
 80007d0:	0987      	lsrs	r7, r0, #6
 80007d2:	0038      	movs	r0, r7
 80007d4:	f001 ffce 	bl	8002774 <__clzsi2>
 80007d8:	3805      	subs	r0, #5
 80007da:	4087      	lsls	r7, r0
 80007dc:	4285      	cmp	r5, r0
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_fsub+0x6e>
 80007e0:	e0cc      	b.n	800097c <__aeabi_fsub+0x208>
 80007e2:	1a2d      	subs	r5, r5, r0
 80007e4:	48b5      	ldr	r0, [pc, #724]	; (8000abc <__aeabi_fsub+0x348>)
 80007e6:	4038      	ands	r0, r7
 80007e8:	0743      	lsls	r3, r0, #29
 80007ea:	d004      	beq.n	80007f6 <__aeabi_fsub+0x82>
 80007ec:	230f      	movs	r3, #15
 80007ee:	4003      	ands	r3, r0
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fsub+0x82>
 80007f4:	3004      	adds	r0, #4
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fsub+0x88>
 80007fa:	e0a0      	b.n	800093e <__aeabi_fsub+0x1ca>
 80007fc:	1c6a      	adds	r2, r5, #1
 80007fe:	2dfe      	cmp	r5, #254	; 0xfe
 8000800:	d100      	bne.n	8000804 <__aeabi_fsub+0x90>
 8000802:	e08d      	b.n	8000920 <__aeabi_fsub+0x1ac>
 8000804:	0180      	lsls	r0, r0, #6
 8000806:	0a47      	lsrs	r7, r0, #9
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	05d0      	lsls	r0, r2, #23
 800080c:	4338      	orrs	r0, r7
 800080e:	07e4      	lsls	r4, r4, #31
 8000810:	4320      	orrs	r0, r4
 8000812:	bcc0      	pop	{r6, r7}
 8000814:	46b9      	mov	r9, r7
 8000816:	46b0      	mov	r8, r6
 8000818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081a:	1aa8      	subs	r0, r5, r2
 800081c:	4680      	mov	r8, r0
 800081e:	2800      	cmp	r0, #0
 8000820:	dd45      	ble.n	80008ae <__aeabi_fsub+0x13a>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d070      	beq.n	8000908 <__aeabi_fsub+0x194>
 8000826:	2dff      	cmp	r5, #255	; 0xff
 8000828:	d100      	bne.n	800082c <__aeabi_fsub+0xb8>
 800082a:	e09e      	b.n	800096a <__aeabi_fsub+0x1f6>
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	04db      	lsls	r3, r3, #19
 8000830:	431e      	orrs	r6, r3
 8000832:	4643      	mov	r3, r8
 8000834:	2b1b      	cmp	r3, #27
 8000836:	dc00      	bgt.n	800083a <__aeabi_fsub+0xc6>
 8000838:	e0d2      	b.n	80009e0 <__aeabi_fsub+0x26c>
 800083a:	2001      	movs	r0, #1
 800083c:	4460      	add	r0, ip
 800083e:	0143      	lsls	r3, r0, #5
 8000840:	d57a      	bpl.n	8000938 <__aeabi_fsub+0x1c4>
 8000842:	3501      	adds	r5, #1
 8000844:	2dff      	cmp	r5, #255	; 0xff
 8000846:	d06b      	beq.n	8000920 <__aeabi_fsub+0x1ac>
 8000848:	2301      	movs	r3, #1
 800084a:	4a9d      	ldr	r2, [pc, #628]	; (8000ac0 <__aeabi_fsub+0x34c>)
 800084c:	4003      	ands	r3, r0
 800084e:	0840      	lsrs	r0, r0, #1
 8000850:	4010      	ands	r0, r2
 8000852:	4318      	orrs	r0, r3
 8000854:	e7c8      	b.n	80007e8 <__aeabi_fsub+0x74>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d020      	beq.n	800089c <__aeabi_fsub+0x128>
 800085a:	428c      	cmp	r4, r1
 800085c:	d023      	beq.n	80008a6 <__aeabi_fsub+0x132>
 800085e:	0028      	movs	r0, r5
 8000860:	38ff      	subs	r0, #255	; 0xff
 8000862:	2800      	cmp	r0, #0
 8000864:	d039      	beq.n	80008da <__aeabi_fsub+0x166>
 8000866:	1b57      	subs	r7, r2, r5
 8000868:	2d00      	cmp	r5, #0
 800086a:	d000      	beq.n	800086e <__aeabi_fsub+0xfa>
 800086c:	e09d      	b.n	80009aa <__aeabi_fsub+0x236>
 800086e:	4663      	mov	r3, ip
 8000870:	2b00      	cmp	r3, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_fsub+0x102>
 8000874:	e0db      	b.n	8000a2e <__aeabi_fsub+0x2ba>
 8000876:	1e7b      	subs	r3, r7, #1
 8000878:	2f01      	cmp	r7, #1
 800087a:	d100      	bne.n	800087e <__aeabi_fsub+0x10a>
 800087c:	e10d      	b.n	8000a9a <__aeabi_fsub+0x326>
 800087e:	2fff      	cmp	r7, #255	; 0xff
 8000880:	d071      	beq.n	8000966 <__aeabi_fsub+0x1f2>
 8000882:	001f      	movs	r7, r3
 8000884:	e098      	b.n	80009b8 <__aeabi_fsub+0x244>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d100      	bne.n	800088c <__aeabi_fsub+0x118>
 800088a:	e0a7      	b.n	80009dc <__aeabi_fsub+0x268>
 800088c:	1e42      	subs	r2, r0, #1
 800088e:	2801      	cmp	r0, #1
 8000890:	d100      	bne.n	8000894 <__aeabi_fsub+0x120>
 8000892:	e0e6      	b.n	8000a62 <__aeabi_fsub+0x2ee>
 8000894:	28ff      	cmp	r0, #255	; 0xff
 8000896:	d068      	beq.n	800096a <__aeabi_fsub+0x1f6>
 8000898:	0010      	movs	r0, r2
 800089a:	e78f      	b.n	80007bc <__aeabi_fsub+0x48>
 800089c:	2001      	movs	r0, #1
 800089e:	4041      	eors	r1, r0
 80008a0:	42a1      	cmp	r1, r4
 80008a2:	d000      	beq.n	80008a6 <__aeabi_fsub+0x132>
 80008a4:	e77f      	b.n	80007a6 <__aeabi_fsub+0x32>
 80008a6:	20ff      	movs	r0, #255	; 0xff
 80008a8:	4240      	negs	r0, r0
 80008aa:	4680      	mov	r8, r0
 80008ac:	44a8      	add	r8, r5
 80008ae:	4640      	mov	r0, r8
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d038      	beq.n	8000926 <__aeabi_fsub+0x1b2>
 80008b4:	1b51      	subs	r1, r2, r5
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d100      	bne.n	80008bc <__aeabi_fsub+0x148>
 80008ba:	e0ae      	b.n	8000a1a <__aeabi_fsub+0x2a6>
 80008bc:	2aff      	cmp	r2, #255	; 0xff
 80008be:	d100      	bne.n	80008c2 <__aeabi_fsub+0x14e>
 80008c0:	e0df      	b.n	8000a82 <__aeabi_fsub+0x30e>
 80008c2:	2380      	movs	r3, #128	; 0x80
 80008c4:	4660      	mov	r0, ip
 80008c6:	04db      	lsls	r3, r3, #19
 80008c8:	4318      	orrs	r0, r3
 80008ca:	4684      	mov	ip, r0
 80008cc:	291b      	cmp	r1, #27
 80008ce:	dc00      	bgt.n	80008d2 <__aeabi_fsub+0x15e>
 80008d0:	e0d9      	b.n	8000a86 <__aeabi_fsub+0x312>
 80008d2:	2001      	movs	r0, #1
 80008d4:	0015      	movs	r5, r2
 80008d6:	1980      	adds	r0, r0, r6
 80008d8:	e7b1      	b.n	800083e <__aeabi_fsub+0xca>
 80008da:	20fe      	movs	r0, #254	; 0xfe
 80008dc:	1c6a      	adds	r2, r5, #1
 80008de:	4210      	tst	r0, r2
 80008e0:	d171      	bne.n	80009c6 <__aeabi_fsub+0x252>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fsub+0x174>
 80008e6:	e0a6      	b.n	8000a36 <__aeabi_fsub+0x2c2>
 80008e8:	4663      	mov	r3, ip
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fsub+0x17c>
 80008ee:	e0d9      	b.n	8000aa4 <__aeabi_fsub+0x330>
 80008f0:	2200      	movs	r2, #0
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fsub+0x184>
 80008f6:	e788      	b.n	800080a <__aeabi_fsub+0x96>
 80008f8:	1b98      	subs	r0, r3, r6
 80008fa:	0143      	lsls	r3, r0, #5
 80008fc:	d400      	bmi.n	8000900 <__aeabi_fsub+0x18c>
 80008fe:	e0e1      	b.n	8000ac4 <__aeabi_fsub+0x350>
 8000900:	4663      	mov	r3, ip
 8000902:	000c      	movs	r4, r1
 8000904:	1af0      	subs	r0, r6, r3
 8000906:	e76f      	b.n	80007e8 <__aeabi_fsub+0x74>
 8000908:	2e00      	cmp	r6, #0
 800090a:	d100      	bne.n	800090e <__aeabi_fsub+0x19a>
 800090c:	e0b7      	b.n	8000a7e <__aeabi_fsub+0x30a>
 800090e:	0002      	movs	r2, r0
 8000910:	3a01      	subs	r2, #1
 8000912:	2801      	cmp	r0, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_fsub+0x1a4>
 8000916:	e09c      	b.n	8000a52 <__aeabi_fsub+0x2de>
 8000918:	28ff      	cmp	r0, #255	; 0xff
 800091a:	d026      	beq.n	800096a <__aeabi_fsub+0x1f6>
 800091c:	4690      	mov	r8, r2
 800091e:	e788      	b.n	8000832 <__aeabi_fsub+0xbe>
 8000920:	22ff      	movs	r2, #255	; 0xff
 8000922:	2700      	movs	r7, #0
 8000924:	e771      	b.n	800080a <__aeabi_fsub+0x96>
 8000926:	20fe      	movs	r0, #254	; 0xfe
 8000928:	1c6a      	adds	r2, r5, #1
 800092a:	4210      	tst	r0, r2
 800092c:	d064      	beq.n	80009f8 <__aeabi_fsub+0x284>
 800092e:	2aff      	cmp	r2, #255	; 0xff
 8000930:	d0f6      	beq.n	8000920 <__aeabi_fsub+0x1ac>
 8000932:	0015      	movs	r5, r2
 8000934:	4466      	add	r6, ip
 8000936:	0870      	lsrs	r0, r6, #1
 8000938:	0743      	lsls	r3, r0, #29
 800093a:	d000      	beq.n	800093e <__aeabi_fsub+0x1ca>
 800093c:	e756      	b.n	80007ec <__aeabi_fsub+0x78>
 800093e:	08c3      	lsrs	r3, r0, #3
 8000940:	2dff      	cmp	r5, #255	; 0xff
 8000942:	d012      	beq.n	800096a <__aeabi_fsub+0x1f6>
 8000944:	025b      	lsls	r3, r3, #9
 8000946:	0a5f      	lsrs	r7, r3, #9
 8000948:	b2ea      	uxtb	r2, r5
 800094a:	e75e      	b.n	800080a <__aeabi_fsub+0x96>
 800094c:	4662      	mov	r2, ip
 800094e:	2a00      	cmp	r2, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_fsub+0x1e0>
 8000952:	e096      	b.n	8000a82 <__aeabi_fsub+0x30e>
 8000954:	2e00      	cmp	r6, #0
 8000956:	d008      	beq.n	800096a <__aeabi_fsub+0x1f6>
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	03d2      	lsls	r2, r2, #15
 800095c:	4213      	tst	r3, r2
 800095e:	d004      	beq.n	800096a <__aeabi_fsub+0x1f6>
 8000960:	4648      	mov	r0, r9
 8000962:	4210      	tst	r0, r2
 8000964:	d101      	bne.n	800096a <__aeabi_fsub+0x1f6>
 8000966:	000c      	movs	r4, r1
 8000968:	464b      	mov	r3, r9
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0d8      	beq.n	8000920 <__aeabi_fsub+0x1ac>
 800096e:	2780      	movs	r7, #128	; 0x80
 8000970:	03ff      	lsls	r7, r7, #15
 8000972:	431f      	orrs	r7, r3
 8000974:	027f      	lsls	r7, r7, #9
 8000976:	22ff      	movs	r2, #255	; 0xff
 8000978:	0a7f      	lsrs	r7, r7, #9
 800097a:	e746      	b.n	800080a <__aeabi_fsub+0x96>
 800097c:	2320      	movs	r3, #32
 800097e:	003a      	movs	r2, r7
 8000980:	1b45      	subs	r5, r0, r5
 8000982:	0038      	movs	r0, r7
 8000984:	3501      	adds	r5, #1
 8000986:	40ea      	lsrs	r2, r5
 8000988:	1b5d      	subs	r5, r3, r5
 800098a:	40a8      	lsls	r0, r5
 800098c:	1e43      	subs	r3, r0, #1
 800098e:	4198      	sbcs	r0, r3
 8000990:	2500      	movs	r5, #0
 8000992:	4310      	orrs	r0, r2
 8000994:	e728      	b.n	80007e8 <__aeabi_fsub+0x74>
 8000996:	2320      	movs	r3, #32
 8000998:	1a1b      	subs	r3, r3, r0
 800099a:	0032      	movs	r2, r6
 800099c:	409e      	lsls	r6, r3
 800099e:	40c2      	lsrs	r2, r0
 80009a0:	0030      	movs	r0, r6
 80009a2:	1e43      	subs	r3, r0, #1
 80009a4:	4198      	sbcs	r0, r3
 80009a6:	4310      	orrs	r0, r2
 80009a8:	e70c      	b.n	80007c4 <__aeabi_fsub+0x50>
 80009aa:	2aff      	cmp	r2, #255	; 0xff
 80009ac:	d0db      	beq.n	8000966 <__aeabi_fsub+0x1f2>
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	4660      	mov	r0, ip
 80009b2:	04db      	lsls	r3, r3, #19
 80009b4:	4318      	orrs	r0, r3
 80009b6:	4684      	mov	ip, r0
 80009b8:	2f1b      	cmp	r7, #27
 80009ba:	dd56      	ble.n	8000a6a <__aeabi_fsub+0x2f6>
 80009bc:	2001      	movs	r0, #1
 80009be:	000c      	movs	r4, r1
 80009c0:	0015      	movs	r5, r2
 80009c2:	1a30      	subs	r0, r6, r0
 80009c4:	e700      	b.n	80007c8 <__aeabi_fsub+0x54>
 80009c6:	4663      	mov	r3, ip
 80009c8:	1b9f      	subs	r7, r3, r6
 80009ca:	017b      	lsls	r3, r7, #5
 80009cc:	d43d      	bmi.n	8000a4a <__aeabi_fsub+0x2d6>
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d000      	beq.n	80009d4 <__aeabi_fsub+0x260>
 80009d2:	e6fe      	b.n	80007d2 <__aeabi_fsub+0x5e>
 80009d4:	2400      	movs	r4, #0
 80009d6:	2200      	movs	r2, #0
 80009d8:	2700      	movs	r7, #0
 80009da:	e716      	b.n	800080a <__aeabi_fsub+0x96>
 80009dc:	0005      	movs	r5, r0
 80009de:	e7af      	b.n	8000940 <__aeabi_fsub+0x1cc>
 80009e0:	0032      	movs	r2, r6
 80009e2:	4643      	mov	r3, r8
 80009e4:	4641      	mov	r1, r8
 80009e6:	40da      	lsrs	r2, r3
 80009e8:	2320      	movs	r3, #32
 80009ea:	1a5b      	subs	r3, r3, r1
 80009ec:	409e      	lsls	r6, r3
 80009ee:	0030      	movs	r0, r6
 80009f0:	1e43      	subs	r3, r0, #1
 80009f2:	4198      	sbcs	r0, r3
 80009f4:	4310      	orrs	r0, r2
 80009f6:	e721      	b.n	800083c <__aeabi_fsub+0xc8>
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d1a7      	bne.n	800094c <__aeabi_fsub+0x1d8>
 80009fc:	4663      	mov	r3, ip
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d059      	beq.n	8000ab6 <__aeabi_fsub+0x342>
 8000a02:	2200      	movs	r2, #0
 8000a04:	2e00      	cmp	r6, #0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fsub+0x296>
 8000a08:	e6ff      	b.n	800080a <__aeabi_fsub+0x96>
 8000a0a:	0030      	movs	r0, r6
 8000a0c:	4460      	add	r0, ip
 8000a0e:	0143      	lsls	r3, r0, #5
 8000a10:	d592      	bpl.n	8000938 <__aeabi_fsub+0x1c4>
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <__aeabi_fsub+0x348>)
 8000a14:	3501      	adds	r5, #1
 8000a16:	4018      	ands	r0, r3
 8000a18:	e78e      	b.n	8000938 <__aeabi_fsub+0x1c4>
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d047      	beq.n	8000ab0 <__aeabi_fsub+0x33c>
 8000a20:	1e4b      	subs	r3, r1, #1
 8000a22:	2901      	cmp	r1, #1
 8000a24:	d015      	beq.n	8000a52 <__aeabi_fsub+0x2de>
 8000a26:	29ff      	cmp	r1, #255	; 0xff
 8000a28:	d02b      	beq.n	8000a82 <__aeabi_fsub+0x30e>
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	e74e      	b.n	80008cc <__aeabi_fsub+0x158>
 8000a2e:	000c      	movs	r4, r1
 8000a30:	464b      	mov	r3, r9
 8000a32:	003d      	movs	r5, r7
 8000a34:	e784      	b.n	8000940 <__aeabi_fsub+0x1cc>
 8000a36:	4662      	mov	r2, ip
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d18b      	bne.n	8000954 <__aeabi_fsub+0x1e0>
 8000a3c:	2e00      	cmp	r6, #0
 8000a3e:	d192      	bne.n	8000966 <__aeabi_fsub+0x1f2>
 8000a40:	2780      	movs	r7, #128	; 0x80
 8000a42:	2400      	movs	r4, #0
 8000a44:	22ff      	movs	r2, #255	; 0xff
 8000a46:	03ff      	lsls	r7, r7, #15
 8000a48:	e6df      	b.n	800080a <__aeabi_fsub+0x96>
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	1af7      	subs	r7, r6, r3
 8000a50:	e6bf      	b.n	80007d2 <__aeabi_fsub+0x5e>
 8000a52:	0030      	movs	r0, r6
 8000a54:	4460      	add	r0, ip
 8000a56:	2501      	movs	r5, #1
 8000a58:	0143      	lsls	r3, r0, #5
 8000a5a:	d400      	bmi.n	8000a5e <__aeabi_fsub+0x2ea>
 8000a5c:	e76c      	b.n	8000938 <__aeabi_fsub+0x1c4>
 8000a5e:	2502      	movs	r5, #2
 8000a60:	e6f2      	b.n	8000848 <__aeabi_fsub+0xd4>
 8000a62:	4663      	mov	r3, ip
 8000a64:	2501      	movs	r5, #1
 8000a66:	1b98      	subs	r0, r3, r6
 8000a68:	e6ae      	b.n	80007c8 <__aeabi_fsub+0x54>
 8000a6a:	2320      	movs	r3, #32
 8000a6c:	4664      	mov	r4, ip
 8000a6e:	4660      	mov	r0, ip
 8000a70:	40fc      	lsrs	r4, r7
 8000a72:	1bdf      	subs	r7, r3, r7
 8000a74:	40b8      	lsls	r0, r7
 8000a76:	1e43      	subs	r3, r0, #1
 8000a78:	4198      	sbcs	r0, r3
 8000a7a:	4320      	orrs	r0, r4
 8000a7c:	e79f      	b.n	80009be <__aeabi_fsub+0x24a>
 8000a7e:	0005      	movs	r5, r0
 8000a80:	e75e      	b.n	8000940 <__aeabi_fsub+0x1cc>
 8000a82:	464b      	mov	r3, r9
 8000a84:	e771      	b.n	800096a <__aeabi_fsub+0x1f6>
 8000a86:	2320      	movs	r3, #32
 8000a88:	4665      	mov	r5, ip
 8000a8a:	4660      	mov	r0, ip
 8000a8c:	40cd      	lsrs	r5, r1
 8000a8e:	1a59      	subs	r1, r3, r1
 8000a90:	4088      	lsls	r0, r1
 8000a92:	1e43      	subs	r3, r0, #1
 8000a94:	4198      	sbcs	r0, r3
 8000a96:	4328      	orrs	r0, r5
 8000a98:	e71c      	b.n	80008d4 <__aeabi_fsub+0x160>
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	000c      	movs	r4, r1
 8000a9e:	2501      	movs	r5, #1
 8000aa0:	1af0      	subs	r0, r6, r3
 8000aa2:	e691      	b.n	80007c8 <__aeabi_fsub+0x54>
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d095      	beq.n	80009d4 <__aeabi_fsub+0x260>
 8000aa8:	000c      	movs	r4, r1
 8000aaa:	464f      	mov	r7, r9
 8000aac:	2200      	movs	r2, #0
 8000aae:	e6ac      	b.n	800080a <__aeabi_fsub+0x96>
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	000d      	movs	r5, r1
 8000ab4:	e744      	b.n	8000940 <__aeabi_fsub+0x1cc>
 8000ab6:	464f      	mov	r7, r9
 8000ab8:	2200      	movs	r2, #0
 8000aba:	e6a6      	b.n	800080a <__aeabi_fsub+0x96>
 8000abc:	fbffffff 	.word	0xfbffffff
 8000ac0:	7dffffff 	.word	0x7dffffff
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d000      	beq.n	8000aca <__aeabi_fsub+0x356>
 8000ac8:	e736      	b.n	8000938 <__aeabi_fsub+0x1c4>
 8000aca:	2400      	movs	r4, #0
 8000acc:	2700      	movs	r7, #0
 8000ace:	e69c      	b.n	800080a <__aeabi_fsub+0x96>

08000ad0 <__aeabi_ui2f>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	1e05      	subs	r5, r0, #0
 8000ad4:	d00e      	beq.n	8000af4 <__aeabi_ui2f+0x24>
 8000ad6:	f001 fe4d 	bl	8002774 <__clzsi2>
 8000ada:	239e      	movs	r3, #158	; 0x9e
 8000adc:	0004      	movs	r4, r0
 8000ade:	1a1b      	subs	r3, r3, r0
 8000ae0:	2b96      	cmp	r3, #150	; 0x96
 8000ae2:	dc0c      	bgt.n	8000afe <__aeabi_ui2f+0x2e>
 8000ae4:	2808      	cmp	r0, #8
 8000ae6:	dd01      	ble.n	8000aec <__aeabi_ui2f+0x1c>
 8000ae8:	3c08      	subs	r4, #8
 8000aea:	40a5      	lsls	r5, r4
 8000aec:	026d      	lsls	r5, r5, #9
 8000aee:	0a6d      	lsrs	r5, r5, #9
 8000af0:	b2d8      	uxtb	r0, r3
 8000af2:	e001      	b.n	8000af8 <__aeabi_ui2f+0x28>
 8000af4:	2000      	movs	r0, #0
 8000af6:	2500      	movs	r5, #0
 8000af8:	05c0      	lsls	r0, r0, #23
 8000afa:	4328      	orrs	r0, r5
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
 8000afe:	2b99      	cmp	r3, #153	; 0x99
 8000b00:	dd09      	ble.n	8000b16 <__aeabi_ui2f+0x46>
 8000b02:	0002      	movs	r2, r0
 8000b04:	0029      	movs	r1, r5
 8000b06:	321b      	adds	r2, #27
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	1e4a      	subs	r2, r1, #1
 8000b0c:	4191      	sbcs	r1, r2
 8000b0e:	2205      	movs	r2, #5
 8000b10:	1a12      	subs	r2, r2, r0
 8000b12:	40d5      	lsrs	r5, r2
 8000b14:	430d      	orrs	r5, r1
 8000b16:	2c05      	cmp	r4, #5
 8000b18:	dc12      	bgt.n	8000b40 <__aeabi_ui2f+0x70>
 8000b1a:	0029      	movs	r1, r5
 8000b1c:	4e0c      	ldr	r6, [pc, #48]	; (8000b50 <__aeabi_ui2f+0x80>)
 8000b1e:	4031      	ands	r1, r6
 8000b20:	076a      	lsls	r2, r5, #29
 8000b22:	d009      	beq.n	8000b38 <__aeabi_ui2f+0x68>
 8000b24:	200f      	movs	r0, #15
 8000b26:	4028      	ands	r0, r5
 8000b28:	2804      	cmp	r0, #4
 8000b2a:	d005      	beq.n	8000b38 <__aeabi_ui2f+0x68>
 8000b2c:	3104      	adds	r1, #4
 8000b2e:	014a      	lsls	r2, r1, #5
 8000b30:	d502      	bpl.n	8000b38 <__aeabi_ui2f+0x68>
 8000b32:	239f      	movs	r3, #159	; 0x9f
 8000b34:	4031      	ands	r1, r6
 8000b36:	1b1b      	subs	r3, r3, r4
 8000b38:	0189      	lsls	r1, r1, #6
 8000b3a:	0a4d      	lsrs	r5, r1, #9
 8000b3c:	b2d8      	uxtb	r0, r3
 8000b3e:	e7db      	b.n	8000af8 <__aeabi_ui2f+0x28>
 8000b40:	1f62      	subs	r2, r4, #5
 8000b42:	4095      	lsls	r5, r2
 8000b44:	0029      	movs	r1, r5
 8000b46:	4e02      	ldr	r6, [pc, #8]	; (8000b50 <__aeabi_ui2f+0x80>)
 8000b48:	4031      	ands	r1, r6
 8000b4a:	076a      	lsls	r2, r5, #29
 8000b4c:	d0f4      	beq.n	8000b38 <__aeabi_ui2f+0x68>
 8000b4e:	e7e9      	b.n	8000b24 <__aeabi_ui2f+0x54>
 8000b50:	fbffffff 	.word	0xfbffffff

08000b54 <__aeabi_dadd>:
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b56:	464f      	mov	r7, r9
 8000b58:	4646      	mov	r6, r8
 8000b5a:	46d6      	mov	lr, sl
 8000b5c:	000d      	movs	r5, r1
 8000b5e:	0004      	movs	r4, r0
 8000b60:	b5c0      	push	{r6, r7, lr}
 8000b62:	001f      	movs	r7, r3
 8000b64:	0011      	movs	r1, r2
 8000b66:	0328      	lsls	r0, r5, #12
 8000b68:	0f62      	lsrs	r2, r4, #29
 8000b6a:	0a40      	lsrs	r0, r0, #9
 8000b6c:	4310      	orrs	r0, r2
 8000b6e:	007a      	lsls	r2, r7, #1
 8000b70:	0d52      	lsrs	r2, r2, #21
 8000b72:	00e3      	lsls	r3, r4, #3
 8000b74:	033c      	lsls	r4, r7, #12
 8000b76:	4691      	mov	r9, r2
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	0ffa      	lsrs	r2, r7, #31
 8000b7c:	0f4f      	lsrs	r7, r1, #29
 8000b7e:	006e      	lsls	r6, r5, #1
 8000b80:	4327      	orrs	r7, r4
 8000b82:	4692      	mov	sl, r2
 8000b84:	46b8      	mov	r8, r7
 8000b86:	0d76      	lsrs	r6, r6, #21
 8000b88:	0fed      	lsrs	r5, r5, #31
 8000b8a:	00c9      	lsls	r1, r1, #3
 8000b8c:	4295      	cmp	r5, r2
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x3e>
 8000b90:	e099      	b.n	8000cc6 <__aeabi_dadd+0x172>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b34      	subs	r4, r6, r4
 8000b96:	46a4      	mov	ip, r4
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	dc00      	bgt.n	8000b9e <__aeabi_dadd+0x4a>
 8000b9c:	e07c      	b.n	8000c98 <__aeabi_dadd+0x144>
 8000b9e:	464a      	mov	r2, r9
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x52>
 8000ba4:	e0b8      	b.n	8000d18 <__aeabi_dadd+0x1c4>
 8000ba6:	4ac5      	ldr	r2, [pc, #788]	; (8000ebc <__aeabi_dadd+0x368>)
 8000ba8:	4296      	cmp	r6, r2
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x5a>
 8000bac:	e11c      	b.n	8000de8 <__aeabi_dadd+0x294>
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	003c      	movs	r4, r7
 8000bb2:	0412      	lsls	r2, r2, #16
 8000bb4:	4314      	orrs	r4, r2
 8000bb6:	46a0      	mov	r8, r4
 8000bb8:	4662      	mov	r2, ip
 8000bba:	2a38      	cmp	r2, #56	; 0x38
 8000bbc:	dd00      	ble.n	8000bc0 <__aeabi_dadd+0x6c>
 8000bbe:	e161      	b.n	8000e84 <__aeabi_dadd+0x330>
 8000bc0:	2a1f      	cmp	r2, #31
 8000bc2:	dd00      	ble.n	8000bc6 <__aeabi_dadd+0x72>
 8000bc4:	e1cc      	b.n	8000f60 <__aeabi_dadd+0x40c>
 8000bc6:	4664      	mov	r4, ip
 8000bc8:	2220      	movs	r2, #32
 8000bca:	1b12      	subs	r2, r2, r4
 8000bcc:	4644      	mov	r4, r8
 8000bce:	4094      	lsls	r4, r2
 8000bd0:	000f      	movs	r7, r1
 8000bd2:	46a1      	mov	r9, r4
 8000bd4:	4664      	mov	r4, ip
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	40e7      	lsrs	r7, r4
 8000bda:	464c      	mov	r4, r9
 8000bdc:	1e4a      	subs	r2, r1, #1
 8000bde:	4191      	sbcs	r1, r2
 8000be0:	433c      	orrs	r4, r7
 8000be2:	4642      	mov	r2, r8
 8000be4:	4321      	orrs	r1, r4
 8000be6:	4664      	mov	r4, ip
 8000be8:	40e2      	lsrs	r2, r4
 8000bea:	1a80      	subs	r0, r0, r2
 8000bec:	1a5c      	subs	r4, r3, r1
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	419b      	sbcs	r3, r3
 8000bf2:	425f      	negs	r7, r3
 8000bf4:	1bc7      	subs	r7, r0, r7
 8000bf6:	023b      	lsls	r3, r7, #8
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_dadd+0xa8>
 8000bfa:	e0d0      	b.n	8000d9e <__aeabi_dadd+0x24a>
 8000bfc:	027f      	lsls	r7, r7, #9
 8000bfe:	0a7f      	lsrs	r7, r7, #9
 8000c00:	2f00      	cmp	r7, #0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0xb2>
 8000c04:	e0ff      	b.n	8000e06 <__aeabi_dadd+0x2b2>
 8000c06:	0038      	movs	r0, r7
 8000c08:	f001 fdb4 	bl	8002774 <__clzsi2>
 8000c0c:	0001      	movs	r1, r0
 8000c0e:	3908      	subs	r1, #8
 8000c10:	2320      	movs	r3, #32
 8000c12:	0022      	movs	r2, r4
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	408f      	lsls	r7, r1
 8000c18:	40da      	lsrs	r2, r3
 8000c1a:	408c      	lsls	r4, r1
 8000c1c:	4317      	orrs	r7, r2
 8000c1e:	42b1      	cmp	r1, r6
 8000c20:	da00      	bge.n	8000c24 <__aeabi_dadd+0xd0>
 8000c22:	e0ff      	b.n	8000e24 <__aeabi_dadd+0x2d0>
 8000c24:	1b89      	subs	r1, r1, r6
 8000c26:	1c4b      	adds	r3, r1, #1
 8000c28:	2b1f      	cmp	r3, #31
 8000c2a:	dd00      	ble.n	8000c2e <__aeabi_dadd+0xda>
 8000c2c:	e0a8      	b.n	8000d80 <__aeabi_dadd+0x22c>
 8000c2e:	2220      	movs	r2, #32
 8000c30:	0039      	movs	r1, r7
 8000c32:	1ad2      	subs	r2, r2, r3
 8000c34:	0020      	movs	r0, r4
 8000c36:	4094      	lsls	r4, r2
 8000c38:	4091      	lsls	r1, r2
 8000c3a:	40d8      	lsrs	r0, r3
 8000c3c:	1e62      	subs	r2, r4, #1
 8000c3e:	4194      	sbcs	r4, r2
 8000c40:	40df      	lsrs	r7, r3
 8000c42:	2600      	movs	r6, #0
 8000c44:	4301      	orrs	r1, r0
 8000c46:	430c      	orrs	r4, r1
 8000c48:	0763      	lsls	r3, r4, #29
 8000c4a:	d009      	beq.n	8000c60 <__aeabi_dadd+0x10c>
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4023      	ands	r3, r4
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d005      	beq.n	8000c60 <__aeabi_dadd+0x10c>
 8000c54:	1d23      	adds	r3, r4, #4
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	41a4      	sbcs	r4, r4
 8000c5a:	4264      	negs	r4, r4
 8000c5c:	193f      	adds	r7, r7, r4
 8000c5e:	001c      	movs	r4, r3
 8000c60:	023b      	lsls	r3, r7, #8
 8000c62:	d400      	bmi.n	8000c66 <__aeabi_dadd+0x112>
 8000c64:	e09e      	b.n	8000da4 <__aeabi_dadd+0x250>
 8000c66:	4b95      	ldr	r3, [pc, #596]	; (8000ebc <__aeabi_dadd+0x368>)
 8000c68:	3601      	adds	r6, #1
 8000c6a:	429e      	cmp	r6, r3
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x11c>
 8000c6e:	e0b7      	b.n	8000de0 <__aeabi_dadd+0x28c>
 8000c70:	4a93      	ldr	r2, [pc, #588]	; (8000ec0 <__aeabi_dadd+0x36c>)
 8000c72:	08e4      	lsrs	r4, r4, #3
 8000c74:	4017      	ands	r7, r2
 8000c76:	077b      	lsls	r3, r7, #29
 8000c78:	0571      	lsls	r1, r6, #21
 8000c7a:	027f      	lsls	r7, r7, #9
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	0b3f      	lsrs	r7, r7, #12
 8000c80:	0d4a      	lsrs	r2, r1, #21
 8000c82:	0512      	lsls	r2, r2, #20
 8000c84:	433a      	orrs	r2, r7
 8000c86:	07ed      	lsls	r5, r5, #31
 8000c88:	432a      	orrs	r2, r5
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	bce0      	pop	{r5, r6, r7}
 8000c90:	46ba      	mov	sl, r7
 8000c92:	46b1      	mov	r9, r6
 8000c94:	46a8      	mov	r8, r5
 8000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c98:	2c00      	cmp	r4, #0
 8000c9a:	d04b      	beq.n	8000d34 <__aeabi_dadd+0x1e0>
 8000c9c:	464c      	mov	r4, r9
 8000c9e:	1ba4      	subs	r4, r4, r6
 8000ca0:	46a4      	mov	ip, r4
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_dadd+0x154>
 8000ca6:	e123      	b.n	8000ef0 <__aeabi_dadd+0x39c>
 8000ca8:	0004      	movs	r4, r0
 8000caa:	431c      	orrs	r4, r3
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x15c>
 8000cae:	e1af      	b.n	8001010 <__aeabi_dadd+0x4bc>
 8000cb0:	4662      	mov	r2, ip
 8000cb2:	1e54      	subs	r4, r2, #1
 8000cb4:	2a01      	cmp	r2, #1
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x166>
 8000cb8:	e215      	b.n	80010e6 <__aeabi_dadd+0x592>
 8000cba:	4d80      	ldr	r5, [pc, #512]	; (8000ebc <__aeabi_dadd+0x368>)
 8000cbc:	45ac      	cmp	ip, r5
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dadd+0x16e>
 8000cc0:	e1c8      	b.n	8001054 <__aeabi_dadd+0x500>
 8000cc2:	46a4      	mov	ip, r4
 8000cc4:	e11b      	b.n	8000efe <__aeabi_dadd+0x3aa>
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	1ab2      	subs	r2, r6, r2
 8000cca:	4694      	mov	ip, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	dc00      	bgt.n	8000cd2 <__aeabi_dadd+0x17e>
 8000cd0:	e0ac      	b.n	8000e2c <__aeabi_dadd+0x2d8>
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	d043      	beq.n	8000d60 <__aeabi_dadd+0x20c>
 8000cd8:	4a78      	ldr	r2, [pc, #480]	; (8000ebc <__aeabi_dadd+0x368>)
 8000cda:	4296      	cmp	r6, r2
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dadd+0x18c>
 8000cde:	e1af      	b.n	8001040 <__aeabi_dadd+0x4ec>
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	003c      	movs	r4, r7
 8000ce4:	0412      	lsls	r2, r2, #16
 8000ce6:	4314      	orrs	r4, r2
 8000ce8:	46a0      	mov	r8, r4
 8000cea:	4662      	mov	r2, ip
 8000cec:	2a38      	cmp	r2, #56	; 0x38
 8000cee:	dc67      	bgt.n	8000dc0 <__aeabi_dadd+0x26c>
 8000cf0:	2a1f      	cmp	r2, #31
 8000cf2:	dc00      	bgt.n	8000cf6 <__aeabi_dadd+0x1a2>
 8000cf4:	e15f      	b.n	8000fb6 <__aeabi_dadd+0x462>
 8000cf6:	4647      	mov	r7, r8
 8000cf8:	3a20      	subs	r2, #32
 8000cfa:	40d7      	lsrs	r7, r2
 8000cfc:	4662      	mov	r2, ip
 8000cfe:	2a20      	cmp	r2, #32
 8000d00:	d005      	beq.n	8000d0e <__aeabi_dadd+0x1ba>
 8000d02:	4664      	mov	r4, ip
 8000d04:	2240      	movs	r2, #64	; 0x40
 8000d06:	1b12      	subs	r2, r2, r4
 8000d08:	4644      	mov	r4, r8
 8000d0a:	4094      	lsls	r4, r2
 8000d0c:	4321      	orrs	r1, r4
 8000d0e:	1e4a      	subs	r2, r1, #1
 8000d10:	4191      	sbcs	r1, r2
 8000d12:	000c      	movs	r4, r1
 8000d14:	433c      	orrs	r4, r7
 8000d16:	e057      	b.n	8000dc8 <__aeabi_dadd+0x274>
 8000d18:	003a      	movs	r2, r7
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dadd+0x1cc>
 8000d1e:	e105      	b.n	8000f2c <__aeabi_dadd+0x3d8>
 8000d20:	0022      	movs	r2, r4
 8000d22:	3a01      	subs	r2, #1
 8000d24:	2c01      	cmp	r4, #1
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x1d6>
 8000d28:	e182      	b.n	8001030 <__aeabi_dadd+0x4dc>
 8000d2a:	4c64      	ldr	r4, [pc, #400]	; (8000ebc <__aeabi_dadd+0x368>)
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d05b      	beq.n	8000de8 <__aeabi_dadd+0x294>
 8000d30:	4694      	mov	ip, r2
 8000d32:	e741      	b.n	8000bb8 <__aeabi_dadd+0x64>
 8000d34:	4c63      	ldr	r4, [pc, #396]	; (8000ec4 <__aeabi_dadd+0x370>)
 8000d36:	1c77      	adds	r7, r6, #1
 8000d38:	4227      	tst	r7, r4
 8000d3a:	d000      	beq.n	8000d3e <__aeabi_dadd+0x1ea>
 8000d3c:	e0c4      	b.n	8000ec8 <__aeabi_dadd+0x374>
 8000d3e:	0004      	movs	r4, r0
 8000d40:	431c      	orrs	r4, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d000      	beq.n	8000d48 <__aeabi_dadd+0x1f4>
 8000d46:	e169      	b.n	800101c <__aeabi_dadd+0x4c8>
 8000d48:	2c00      	cmp	r4, #0
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_dadd+0x1fa>
 8000d4c:	e1bf      	b.n	80010ce <__aeabi_dadd+0x57a>
 8000d4e:	4644      	mov	r4, r8
 8000d50:	430c      	orrs	r4, r1
 8000d52:	d000      	beq.n	8000d56 <__aeabi_dadd+0x202>
 8000d54:	e1d0      	b.n	80010f8 <__aeabi_dadd+0x5a4>
 8000d56:	0742      	lsls	r2, r0, #29
 8000d58:	08db      	lsrs	r3, r3, #3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	08c0      	lsrs	r0, r0, #3
 8000d5e:	e029      	b.n	8000db4 <__aeabi_dadd+0x260>
 8000d60:	003a      	movs	r2, r7
 8000d62:	430a      	orrs	r2, r1
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dadd+0x214>
 8000d66:	e170      	b.n	800104a <__aeabi_dadd+0x4f6>
 8000d68:	4662      	mov	r2, ip
 8000d6a:	4664      	mov	r4, ip
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	2c01      	cmp	r4, #1
 8000d70:	d100      	bne.n	8000d74 <__aeabi_dadd+0x220>
 8000d72:	e0e0      	b.n	8000f36 <__aeabi_dadd+0x3e2>
 8000d74:	4c51      	ldr	r4, [pc, #324]	; (8000ebc <__aeabi_dadd+0x368>)
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d100      	bne.n	8000d7c <__aeabi_dadd+0x228>
 8000d7a:	e161      	b.n	8001040 <__aeabi_dadd+0x4ec>
 8000d7c:	4694      	mov	ip, r2
 8000d7e:	e7b4      	b.n	8000cea <__aeabi_dadd+0x196>
 8000d80:	003a      	movs	r2, r7
 8000d82:	391f      	subs	r1, #31
 8000d84:	40ca      	lsrs	r2, r1
 8000d86:	0011      	movs	r1, r2
 8000d88:	2b20      	cmp	r3, #32
 8000d8a:	d003      	beq.n	8000d94 <__aeabi_dadd+0x240>
 8000d8c:	2240      	movs	r2, #64	; 0x40
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	409f      	lsls	r7, r3
 8000d92:	433c      	orrs	r4, r7
 8000d94:	1e63      	subs	r3, r4, #1
 8000d96:	419c      	sbcs	r4, r3
 8000d98:	2700      	movs	r7, #0
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	430c      	orrs	r4, r1
 8000d9e:	0763      	lsls	r3, r4, #29
 8000da0:	d000      	beq.n	8000da4 <__aeabi_dadd+0x250>
 8000da2:	e753      	b.n	8000c4c <__aeabi_dadd+0xf8>
 8000da4:	46b4      	mov	ip, r6
 8000da6:	08e4      	lsrs	r4, r4, #3
 8000da8:	077b      	lsls	r3, r7, #29
 8000daa:	4323      	orrs	r3, r4
 8000dac:	08f8      	lsrs	r0, r7, #3
 8000dae:	4a43      	ldr	r2, [pc, #268]	; (8000ebc <__aeabi_dadd+0x368>)
 8000db0:	4594      	cmp	ip, r2
 8000db2:	d01d      	beq.n	8000df0 <__aeabi_dadd+0x29c>
 8000db4:	4662      	mov	r2, ip
 8000db6:	0307      	lsls	r7, r0, #12
 8000db8:	0552      	lsls	r2, r2, #21
 8000dba:	0b3f      	lsrs	r7, r7, #12
 8000dbc:	0d52      	lsrs	r2, r2, #21
 8000dbe:	e760      	b.n	8000c82 <__aeabi_dadd+0x12e>
 8000dc0:	4644      	mov	r4, r8
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	1e62      	subs	r2, r4, #1
 8000dc6:	4194      	sbcs	r4, r2
 8000dc8:	18e4      	adds	r4, r4, r3
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	419b      	sbcs	r3, r3
 8000dce:	425f      	negs	r7, r3
 8000dd0:	183f      	adds	r7, r7, r0
 8000dd2:	023b      	lsls	r3, r7, #8
 8000dd4:	d5e3      	bpl.n	8000d9e <__aeabi_dadd+0x24a>
 8000dd6:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <__aeabi_dadd+0x368>)
 8000dd8:	3601      	adds	r6, #1
 8000dda:	429e      	cmp	r6, r3
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_dadd+0x28c>
 8000dde:	e0b5      	b.n	8000f4c <__aeabi_dadd+0x3f8>
 8000de0:	0032      	movs	r2, r6
 8000de2:	2700      	movs	r7, #0
 8000de4:	2300      	movs	r3, #0
 8000de6:	e74c      	b.n	8000c82 <__aeabi_dadd+0x12e>
 8000de8:	0742      	lsls	r2, r0, #29
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	4313      	orrs	r3, r2
 8000dee:	08c0      	lsrs	r0, r0, #3
 8000df0:	001a      	movs	r2, r3
 8000df2:	4302      	orrs	r2, r0
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x2a4>
 8000df6:	e1e1      	b.n	80011bc <__aeabi_dadd+0x668>
 8000df8:	2780      	movs	r7, #128	; 0x80
 8000dfa:	033f      	lsls	r7, r7, #12
 8000dfc:	4307      	orrs	r7, r0
 8000dfe:	033f      	lsls	r7, r7, #12
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <__aeabi_dadd+0x368>)
 8000e02:	0b3f      	lsrs	r7, r7, #12
 8000e04:	e73d      	b.n	8000c82 <__aeabi_dadd+0x12e>
 8000e06:	0020      	movs	r0, r4
 8000e08:	f001 fcb4 	bl	8002774 <__clzsi2>
 8000e0c:	0001      	movs	r1, r0
 8000e0e:	3118      	adds	r1, #24
 8000e10:	291f      	cmp	r1, #31
 8000e12:	dc00      	bgt.n	8000e16 <__aeabi_dadd+0x2c2>
 8000e14:	e6fc      	b.n	8000c10 <__aeabi_dadd+0xbc>
 8000e16:	3808      	subs	r0, #8
 8000e18:	4084      	lsls	r4, r0
 8000e1a:	0027      	movs	r7, r4
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	42b1      	cmp	r1, r6
 8000e20:	db00      	blt.n	8000e24 <__aeabi_dadd+0x2d0>
 8000e22:	e6ff      	b.n	8000c24 <__aeabi_dadd+0xd0>
 8000e24:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <__aeabi_dadd+0x36c>)
 8000e26:	1a76      	subs	r6, r6, r1
 8000e28:	4017      	ands	r7, r2
 8000e2a:	e70d      	b.n	8000c48 <__aeabi_dadd+0xf4>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d02f      	beq.n	8000e90 <__aeabi_dadd+0x33c>
 8000e30:	464a      	mov	r2, r9
 8000e32:	1b92      	subs	r2, r2, r6
 8000e34:	4694      	mov	ip, r2
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dadd+0x2e8>
 8000e3a:	e0ad      	b.n	8000f98 <__aeabi_dadd+0x444>
 8000e3c:	4a1f      	ldr	r2, [pc, #124]	; (8000ebc <__aeabi_dadd+0x368>)
 8000e3e:	4591      	cmp	r9, r2
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dadd+0x2f0>
 8000e42:	e10f      	b.n	8001064 <__aeabi_dadd+0x510>
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	0412      	lsls	r2, r2, #16
 8000e48:	4310      	orrs	r0, r2
 8000e4a:	4662      	mov	r2, ip
 8000e4c:	2a38      	cmp	r2, #56	; 0x38
 8000e4e:	dd00      	ble.n	8000e52 <__aeabi_dadd+0x2fe>
 8000e50:	e10f      	b.n	8001072 <__aeabi_dadd+0x51e>
 8000e52:	2a1f      	cmp	r2, #31
 8000e54:	dd00      	ble.n	8000e58 <__aeabi_dadd+0x304>
 8000e56:	e180      	b.n	800115a <__aeabi_dadd+0x606>
 8000e58:	4664      	mov	r4, ip
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	001e      	movs	r6, r3
 8000e5e:	1b12      	subs	r2, r2, r4
 8000e60:	4667      	mov	r7, ip
 8000e62:	0004      	movs	r4, r0
 8000e64:	4093      	lsls	r3, r2
 8000e66:	4094      	lsls	r4, r2
 8000e68:	40fe      	lsrs	r6, r7
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	4193      	sbcs	r3, r2
 8000e6e:	40f8      	lsrs	r0, r7
 8000e70:	4334      	orrs	r4, r6
 8000e72:	431c      	orrs	r4, r3
 8000e74:	4480      	add	r8, r0
 8000e76:	1864      	adds	r4, r4, r1
 8000e78:	428c      	cmp	r4, r1
 8000e7a:	41bf      	sbcs	r7, r7
 8000e7c:	427f      	negs	r7, r7
 8000e7e:	464e      	mov	r6, r9
 8000e80:	4447      	add	r7, r8
 8000e82:	e7a6      	b.n	8000dd2 <__aeabi_dadd+0x27e>
 8000e84:	4642      	mov	r2, r8
 8000e86:	430a      	orrs	r2, r1
 8000e88:	0011      	movs	r1, r2
 8000e8a:	1e4a      	subs	r2, r1, #1
 8000e8c:	4191      	sbcs	r1, r2
 8000e8e:	e6ad      	b.n	8000bec <__aeabi_dadd+0x98>
 8000e90:	4c0c      	ldr	r4, [pc, #48]	; (8000ec4 <__aeabi_dadd+0x370>)
 8000e92:	1c72      	adds	r2, r6, #1
 8000e94:	4222      	tst	r2, r4
 8000e96:	d000      	beq.n	8000e9a <__aeabi_dadd+0x346>
 8000e98:	e0a1      	b.n	8000fde <__aeabi_dadd+0x48a>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d000      	beq.n	8000ea4 <__aeabi_dadd+0x350>
 8000ea2:	e0fa      	b.n	800109a <__aeabi_dadd+0x546>
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_dadd+0x356>
 8000ea8:	e145      	b.n	8001136 <__aeabi_dadd+0x5e2>
 8000eaa:	003a      	movs	r2, r7
 8000eac:	430a      	orrs	r2, r1
 8000eae:	d000      	beq.n	8000eb2 <__aeabi_dadd+0x35e>
 8000eb0:	e146      	b.n	8001140 <__aeabi_dadd+0x5ec>
 8000eb2:	0742      	lsls	r2, r0, #29
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	08c0      	lsrs	r0, r0, #3
 8000eba:	e77b      	b.n	8000db4 <__aeabi_dadd+0x260>
 8000ebc:	000007ff 	.word	0x000007ff
 8000ec0:	ff7fffff 	.word	0xff7fffff
 8000ec4:	000007fe 	.word	0x000007fe
 8000ec8:	4647      	mov	r7, r8
 8000eca:	1a5c      	subs	r4, r3, r1
 8000ecc:	1bc2      	subs	r2, r0, r7
 8000ece:	42a3      	cmp	r3, r4
 8000ed0:	41bf      	sbcs	r7, r7
 8000ed2:	427f      	negs	r7, r7
 8000ed4:	46b9      	mov	r9, r7
 8000ed6:	0017      	movs	r7, r2
 8000ed8:	464a      	mov	r2, r9
 8000eda:	1abf      	subs	r7, r7, r2
 8000edc:	023a      	lsls	r2, r7, #8
 8000ede:	d500      	bpl.n	8000ee2 <__aeabi_dadd+0x38e>
 8000ee0:	e08d      	b.n	8000ffe <__aeabi_dadd+0x4aa>
 8000ee2:	0023      	movs	r3, r4
 8000ee4:	433b      	orrs	r3, r7
 8000ee6:	d000      	beq.n	8000eea <__aeabi_dadd+0x396>
 8000ee8:	e68a      	b.n	8000c00 <__aeabi_dadd+0xac>
 8000eea:	2000      	movs	r0, #0
 8000eec:	2500      	movs	r5, #0
 8000eee:	e761      	b.n	8000db4 <__aeabi_dadd+0x260>
 8000ef0:	4cb4      	ldr	r4, [pc, #720]	; (80011c4 <__aeabi_dadd+0x670>)
 8000ef2:	45a1      	cmp	r9, r4
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_dadd+0x3a4>
 8000ef6:	e0ad      	b.n	8001054 <__aeabi_dadd+0x500>
 8000ef8:	2480      	movs	r4, #128	; 0x80
 8000efa:	0424      	lsls	r4, r4, #16
 8000efc:	4320      	orrs	r0, r4
 8000efe:	4664      	mov	r4, ip
 8000f00:	2c38      	cmp	r4, #56	; 0x38
 8000f02:	dc3d      	bgt.n	8000f80 <__aeabi_dadd+0x42c>
 8000f04:	4662      	mov	r2, ip
 8000f06:	2c1f      	cmp	r4, #31
 8000f08:	dd00      	ble.n	8000f0c <__aeabi_dadd+0x3b8>
 8000f0a:	e0b7      	b.n	800107c <__aeabi_dadd+0x528>
 8000f0c:	2520      	movs	r5, #32
 8000f0e:	001e      	movs	r6, r3
 8000f10:	1b2d      	subs	r5, r5, r4
 8000f12:	0004      	movs	r4, r0
 8000f14:	40ab      	lsls	r3, r5
 8000f16:	40ac      	lsls	r4, r5
 8000f18:	40d6      	lsrs	r6, r2
 8000f1a:	40d0      	lsrs	r0, r2
 8000f1c:	4642      	mov	r2, r8
 8000f1e:	1e5d      	subs	r5, r3, #1
 8000f20:	41ab      	sbcs	r3, r5
 8000f22:	4334      	orrs	r4, r6
 8000f24:	1a12      	subs	r2, r2, r0
 8000f26:	4690      	mov	r8, r2
 8000f28:	4323      	orrs	r3, r4
 8000f2a:	e02c      	b.n	8000f86 <__aeabi_dadd+0x432>
 8000f2c:	0742      	lsls	r2, r0, #29
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	08c0      	lsrs	r0, r0, #3
 8000f34:	e73b      	b.n	8000dae <__aeabi_dadd+0x25a>
 8000f36:	185c      	adds	r4, r3, r1
 8000f38:	429c      	cmp	r4, r3
 8000f3a:	419b      	sbcs	r3, r3
 8000f3c:	4440      	add	r0, r8
 8000f3e:	425b      	negs	r3, r3
 8000f40:	18c7      	adds	r7, r0, r3
 8000f42:	2601      	movs	r6, #1
 8000f44:	023b      	lsls	r3, r7, #8
 8000f46:	d400      	bmi.n	8000f4a <__aeabi_dadd+0x3f6>
 8000f48:	e729      	b.n	8000d9e <__aeabi_dadd+0x24a>
 8000f4a:	2602      	movs	r6, #2
 8000f4c:	4a9e      	ldr	r2, [pc, #632]	; (80011c8 <__aeabi_dadd+0x674>)
 8000f4e:	0863      	lsrs	r3, r4, #1
 8000f50:	4017      	ands	r7, r2
 8000f52:	2201      	movs	r2, #1
 8000f54:	4014      	ands	r4, r2
 8000f56:	431c      	orrs	r4, r3
 8000f58:	07fb      	lsls	r3, r7, #31
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	087f      	lsrs	r7, r7, #1
 8000f5e:	e673      	b.n	8000c48 <__aeabi_dadd+0xf4>
 8000f60:	4644      	mov	r4, r8
 8000f62:	3a20      	subs	r2, #32
 8000f64:	40d4      	lsrs	r4, r2
 8000f66:	4662      	mov	r2, ip
 8000f68:	2a20      	cmp	r2, #32
 8000f6a:	d005      	beq.n	8000f78 <__aeabi_dadd+0x424>
 8000f6c:	4667      	mov	r7, ip
 8000f6e:	2240      	movs	r2, #64	; 0x40
 8000f70:	1bd2      	subs	r2, r2, r7
 8000f72:	4647      	mov	r7, r8
 8000f74:	4097      	lsls	r7, r2
 8000f76:	4339      	orrs	r1, r7
 8000f78:	1e4a      	subs	r2, r1, #1
 8000f7a:	4191      	sbcs	r1, r2
 8000f7c:	4321      	orrs	r1, r4
 8000f7e:	e635      	b.n	8000bec <__aeabi_dadd+0x98>
 8000f80:	4303      	orrs	r3, r0
 8000f82:	1e58      	subs	r0, r3, #1
 8000f84:	4183      	sbcs	r3, r0
 8000f86:	1acc      	subs	r4, r1, r3
 8000f88:	42a1      	cmp	r1, r4
 8000f8a:	41bf      	sbcs	r7, r7
 8000f8c:	4643      	mov	r3, r8
 8000f8e:	427f      	negs	r7, r7
 8000f90:	4655      	mov	r5, sl
 8000f92:	464e      	mov	r6, r9
 8000f94:	1bdf      	subs	r7, r3, r7
 8000f96:	e62e      	b.n	8000bf6 <__aeabi_dadd+0xa2>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x44c>
 8000f9e:	e0bd      	b.n	800111c <__aeabi_dadd+0x5c8>
 8000fa0:	4662      	mov	r2, ip
 8000fa2:	4664      	mov	r4, ip
 8000fa4:	3a01      	subs	r2, #1
 8000fa6:	2c01      	cmp	r4, #1
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dadd+0x458>
 8000faa:	e0e5      	b.n	8001178 <__aeabi_dadd+0x624>
 8000fac:	4c85      	ldr	r4, [pc, #532]	; (80011c4 <__aeabi_dadd+0x670>)
 8000fae:	45a4      	cmp	ip, r4
 8000fb0:	d058      	beq.n	8001064 <__aeabi_dadd+0x510>
 8000fb2:	4694      	mov	ip, r2
 8000fb4:	e749      	b.n	8000e4a <__aeabi_dadd+0x2f6>
 8000fb6:	4664      	mov	r4, ip
 8000fb8:	2220      	movs	r2, #32
 8000fba:	1b12      	subs	r2, r2, r4
 8000fbc:	4644      	mov	r4, r8
 8000fbe:	4094      	lsls	r4, r2
 8000fc0:	000f      	movs	r7, r1
 8000fc2:	46a1      	mov	r9, r4
 8000fc4:	4664      	mov	r4, ip
 8000fc6:	4091      	lsls	r1, r2
 8000fc8:	40e7      	lsrs	r7, r4
 8000fca:	464c      	mov	r4, r9
 8000fcc:	1e4a      	subs	r2, r1, #1
 8000fce:	4191      	sbcs	r1, r2
 8000fd0:	433c      	orrs	r4, r7
 8000fd2:	4642      	mov	r2, r8
 8000fd4:	430c      	orrs	r4, r1
 8000fd6:	4661      	mov	r1, ip
 8000fd8:	40ca      	lsrs	r2, r1
 8000fda:	1880      	adds	r0, r0, r2
 8000fdc:	e6f4      	b.n	8000dc8 <__aeabi_dadd+0x274>
 8000fde:	4c79      	ldr	r4, [pc, #484]	; (80011c4 <__aeabi_dadd+0x670>)
 8000fe0:	42a2      	cmp	r2, r4
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dadd+0x492>
 8000fe4:	e6fd      	b.n	8000de2 <__aeabi_dadd+0x28e>
 8000fe6:	1859      	adds	r1, r3, r1
 8000fe8:	4299      	cmp	r1, r3
 8000fea:	419b      	sbcs	r3, r3
 8000fec:	4440      	add	r0, r8
 8000fee:	425f      	negs	r7, r3
 8000ff0:	19c7      	adds	r7, r0, r7
 8000ff2:	07fc      	lsls	r4, r7, #31
 8000ff4:	0849      	lsrs	r1, r1, #1
 8000ff6:	0016      	movs	r6, r2
 8000ff8:	430c      	orrs	r4, r1
 8000ffa:	087f      	lsrs	r7, r7, #1
 8000ffc:	e6cf      	b.n	8000d9e <__aeabi_dadd+0x24a>
 8000ffe:	1acc      	subs	r4, r1, r3
 8001000:	42a1      	cmp	r1, r4
 8001002:	41bf      	sbcs	r7, r7
 8001004:	4643      	mov	r3, r8
 8001006:	427f      	negs	r7, r7
 8001008:	1a18      	subs	r0, r3, r0
 800100a:	4655      	mov	r5, sl
 800100c:	1bc7      	subs	r7, r0, r7
 800100e:	e5f7      	b.n	8000c00 <__aeabi_dadd+0xac>
 8001010:	08c9      	lsrs	r1, r1, #3
 8001012:	077b      	lsls	r3, r7, #29
 8001014:	4655      	mov	r5, sl
 8001016:	430b      	orrs	r3, r1
 8001018:	08f8      	lsrs	r0, r7, #3
 800101a:	e6c8      	b.n	8000dae <__aeabi_dadd+0x25a>
 800101c:	2c00      	cmp	r4, #0
 800101e:	d000      	beq.n	8001022 <__aeabi_dadd+0x4ce>
 8001020:	e081      	b.n	8001126 <__aeabi_dadd+0x5d2>
 8001022:	4643      	mov	r3, r8
 8001024:	430b      	orrs	r3, r1
 8001026:	d115      	bne.n	8001054 <__aeabi_dadd+0x500>
 8001028:	2080      	movs	r0, #128	; 0x80
 800102a:	2500      	movs	r5, #0
 800102c:	0300      	lsls	r0, r0, #12
 800102e:	e6e3      	b.n	8000df8 <__aeabi_dadd+0x2a4>
 8001030:	1a5c      	subs	r4, r3, r1
 8001032:	42a3      	cmp	r3, r4
 8001034:	419b      	sbcs	r3, r3
 8001036:	1bc7      	subs	r7, r0, r7
 8001038:	425b      	negs	r3, r3
 800103a:	2601      	movs	r6, #1
 800103c:	1aff      	subs	r7, r7, r3
 800103e:	e5da      	b.n	8000bf6 <__aeabi_dadd+0xa2>
 8001040:	0742      	lsls	r2, r0, #29
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	4313      	orrs	r3, r2
 8001046:	08c0      	lsrs	r0, r0, #3
 8001048:	e6d2      	b.n	8000df0 <__aeabi_dadd+0x29c>
 800104a:	0742      	lsls	r2, r0, #29
 800104c:	08db      	lsrs	r3, r3, #3
 800104e:	4313      	orrs	r3, r2
 8001050:	08c0      	lsrs	r0, r0, #3
 8001052:	e6ac      	b.n	8000dae <__aeabi_dadd+0x25a>
 8001054:	4643      	mov	r3, r8
 8001056:	4642      	mov	r2, r8
 8001058:	08c9      	lsrs	r1, r1, #3
 800105a:	075b      	lsls	r3, r3, #29
 800105c:	4655      	mov	r5, sl
 800105e:	430b      	orrs	r3, r1
 8001060:	08d0      	lsrs	r0, r2, #3
 8001062:	e6c5      	b.n	8000df0 <__aeabi_dadd+0x29c>
 8001064:	4643      	mov	r3, r8
 8001066:	4642      	mov	r2, r8
 8001068:	075b      	lsls	r3, r3, #29
 800106a:	08c9      	lsrs	r1, r1, #3
 800106c:	430b      	orrs	r3, r1
 800106e:	08d0      	lsrs	r0, r2, #3
 8001070:	e6be      	b.n	8000df0 <__aeabi_dadd+0x29c>
 8001072:	4303      	orrs	r3, r0
 8001074:	001c      	movs	r4, r3
 8001076:	1e63      	subs	r3, r4, #1
 8001078:	419c      	sbcs	r4, r3
 800107a:	e6fc      	b.n	8000e76 <__aeabi_dadd+0x322>
 800107c:	0002      	movs	r2, r0
 800107e:	3c20      	subs	r4, #32
 8001080:	40e2      	lsrs	r2, r4
 8001082:	0014      	movs	r4, r2
 8001084:	4662      	mov	r2, ip
 8001086:	2a20      	cmp	r2, #32
 8001088:	d003      	beq.n	8001092 <__aeabi_dadd+0x53e>
 800108a:	2540      	movs	r5, #64	; 0x40
 800108c:	1aad      	subs	r5, r5, r2
 800108e:	40a8      	lsls	r0, r5
 8001090:	4303      	orrs	r3, r0
 8001092:	1e58      	subs	r0, r3, #1
 8001094:	4183      	sbcs	r3, r0
 8001096:	4323      	orrs	r3, r4
 8001098:	e775      	b.n	8000f86 <__aeabi_dadd+0x432>
 800109a:	2a00      	cmp	r2, #0
 800109c:	d0e2      	beq.n	8001064 <__aeabi_dadd+0x510>
 800109e:	003a      	movs	r2, r7
 80010a0:	430a      	orrs	r2, r1
 80010a2:	d0cd      	beq.n	8001040 <__aeabi_dadd+0x4ec>
 80010a4:	0742      	lsls	r2, r0, #29
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	08c0      	lsrs	r0, r0, #3
 80010ae:	0312      	lsls	r2, r2, #12
 80010b0:	4210      	tst	r0, r2
 80010b2:	d006      	beq.n	80010c2 <__aeabi_dadd+0x56e>
 80010b4:	08fc      	lsrs	r4, r7, #3
 80010b6:	4214      	tst	r4, r2
 80010b8:	d103      	bne.n	80010c2 <__aeabi_dadd+0x56e>
 80010ba:	0020      	movs	r0, r4
 80010bc:	08cb      	lsrs	r3, r1, #3
 80010be:	077a      	lsls	r2, r7, #29
 80010c0:	4313      	orrs	r3, r2
 80010c2:	0f5a      	lsrs	r2, r3, #29
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	0752      	lsls	r2, r2, #29
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	e690      	b.n	8000df0 <__aeabi_dadd+0x29c>
 80010ce:	4643      	mov	r3, r8
 80010d0:	430b      	orrs	r3, r1
 80010d2:	d100      	bne.n	80010d6 <__aeabi_dadd+0x582>
 80010d4:	e709      	b.n	8000eea <__aeabi_dadd+0x396>
 80010d6:	4643      	mov	r3, r8
 80010d8:	4642      	mov	r2, r8
 80010da:	08c9      	lsrs	r1, r1, #3
 80010dc:	075b      	lsls	r3, r3, #29
 80010de:	4655      	mov	r5, sl
 80010e0:	430b      	orrs	r3, r1
 80010e2:	08d0      	lsrs	r0, r2, #3
 80010e4:	e666      	b.n	8000db4 <__aeabi_dadd+0x260>
 80010e6:	1acc      	subs	r4, r1, r3
 80010e8:	42a1      	cmp	r1, r4
 80010ea:	4189      	sbcs	r1, r1
 80010ec:	1a3f      	subs	r7, r7, r0
 80010ee:	4249      	negs	r1, r1
 80010f0:	4655      	mov	r5, sl
 80010f2:	2601      	movs	r6, #1
 80010f4:	1a7f      	subs	r7, r7, r1
 80010f6:	e57e      	b.n	8000bf6 <__aeabi_dadd+0xa2>
 80010f8:	4642      	mov	r2, r8
 80010fa:	1a5c      	subs	r4, r3, r1
 80010fc:	1a87      	subs	r7, r0, r2
 80010fe:	42a3      	cmp	r3, r4
 8001100:	4192      	sbcs	r2, r2
 8001102:	4252      	negs	r2, r2
 8001104:	1abf      	subs	r7, r7, r2
 8001106:	023a      	lsls	r2, r7, #8
 8001108:	d53d      	bpl.n	8001186 <__aeabi_dadd+0x632>
 800110a:	1acc      	subs	r4, r1, r3
 800110c:	42a1      	cmp	r1, r4
 800110e:	4189      	sbcs	r1, r1
 8001110:	4643      	mov	r3, r8
 8001112:	4249      	negs	r1, r1
 8001114:	1a1f      	subs	r7, r3, r0
 8001116:	4655      	mov	r5, sl
 8001118:	1a7f      	subs	r7, r7, r1
 800111a:	e595      	b.n	8000c48 <__aeabi_dadd+0xf4>
 800111c:	077b      	lsls	r3, r7, #29
 800111e:	08c9      	lsrs	r1, r1, #3
 8001120:	430b      	orrs	r3, r1
 8001122:	08f8      	lsrs	r0, r7, #3
 8001124:	e643      	b.n	8000dae <__aeabi_dadd+0x25a>
 8001126:	4644      	mov	r4, r8
 8001128:	08db      	lsrs	r3, r3, #3
 800112a:	430c      	orrs	r4, r1
 800112c:	d130      	bne.n	8001190 <__aeabi_dadd+0x63c>
 800112e:	0742      	lsls	r2, r0, #29
 8001130:	4313      	orrs	r3, r2
 8001132:	08c0      	lsrs	r0, r0, #3
 8001134:	e65c      	b.n	8000df0 <__aeabi_dadd+0x29c>
 8001136:	077b      	lsls	r3, r7, #29
 8001138:	08c9      	lsrs	r1, r1, #3
 800113a:	430b      	orrs	r3, r1
 800113c:	08f8      	lsrs	r0, r7, #3
 800113e:	e639      	b.n	8000db4 <__aeabi_dadd+0x260>
 8001140:	185c      	adds	r4, r3, r1
 8001142:	429c      	cmp	r4, r3
 8001144:	419b      	sbcs	r3, r3
 8001146:	4440      	add	r0, r8
 8001148:	425b      	negs	r3, r3
 800114a:	18c7      	adds	r7, r0, r3
 800114c:	023b      	lsls	r3, r7, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x5fe>
 8001150:	e625      	b.n	8000d9e <__aeabi_dadd+0x24a>
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <__aeabi_dadd+0x674>)
 8001154:	2601      	movs	r6, #1
 8001156:	401f      	ands	r7, r3
 8001158:	e621      	b.n	8000d9e <__aeabi_dadd+0x24a>
 800115a:	0004      	movs	r4, r0
 800115c:	3a20      	subs	r2, #32
 800115e:	40d4      	lsrs	r4, r2
 8001160:	4662      	mov	r2, ip
 8001162:	2a20      	cmp	r2, #32
 8001164:	d004      	beq.n	8001170 <__aeabi_dadd+0x61c>
 8001166:	2240      	movs	r2, #64	; 0x40
 8001168:	4666      	mov	r6, ip
 800116a:	1b92      	subs	r2, r2, r6
 800116c:	4090      	lsls	r0, r2
 800116e:	4303      	orrs	r3, r0
 8001170:	1e5a      	subs	r2, r3, #1
 8001172:	4193      	sbcs	r3, r2
 8001174:	431c      	orrs	r4, r3
 8001176:	e67e      	b.n	8000e76 <__aeabi_dadd+0x322>
 8001178:	185c      	adds	r4, r3, r1
 800117a:	428c      	cmp	r4, r1
 800117c:	4189      	sbcs	r1, r1
 800117e:	4440      	add	r0, r8
 8001180:	4249      	negs	r1, r1
 8001182:	1847      	adds	r7, r0, r1
 8001184:	e6dd      	b.n	8000f42 <__aeabi_dadd+0x3ee>
 8001186:	0023      	movs	r3, r4
 8001188:	433b      	orrs	r3, r7
 800118a:	d100      	bne.n	800118e <__aeabi_dadd+0x63a>
 800118c:	e6ad      	b.n	8000eea <__aeabi_dadd+0x396>
 800118e:	e606      	b.n	8000d9e <__aeabi_dadd+0x24a>
 8001190:	0744      	lsls	r4, r0, #29
 8001192:	4323      	orrs	r3, r4
 8001194:	2480      	movs	r4, #128	; 0x80
 8001196:	08c0      	lsrs	r0, r0, #3
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	4220      	tst	r0, r4
 800119c:	d008      	beq.n	80011b0 <__aeabi_dadd+0x65c>
 800119e:	4642      	mov	r2, r8
 80011a0:	08d6      	lsrs	r6, r2, #3
 80011a2:	4226      	tst	r6, r4
 80011a4:	d104      	bne.n	80011b0 <__aeabi_dadd+0x65c>
 80011a6:	4655      	mov	r5, sl
 80011a8:	0030      	movs	r0, r6
 80011aa:	08cb      	lsrs	r3, r1, #3
 80011ac:	0751      	lsls	r1, r2, #29
 80011ae:	430b      	orrs	r3, r1
 80011b0:	0f5a      	lsrs	r2, r3, #29
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	08db      	lsrs	r3, r3, #3
 80011b6:	0752      	lsls	r2, r2, #29
 80011b8:	4313      	orrs	r3, r2
 80011ba:	e619      	b.n	8000df0 <__aeabi_dadd+0x29c>
 80011bc:	2300      	movs	r3, #0
 80011be:	4a01      	ldr	r2, [pc, #4]	; (80011c4 <__aeabi_dadd+0x670>)
 80011c0:	001f      	movs	r7, r3
 80011c2:	e55e      	b.n	8000c82 <__aeabi_dadd+0x12e>
 80011c4:	000007ff 	.word	0x000007ff
 80011c8:	ff7fffff 	.word	0xff7fffff

080011cc <__aeabi_ddiv>:
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	4657      	mov	r7, sl
 80011d0:	464e      	mov	r6, r9
 80011d2:	4645      	mov	r5, r8
 80011d4:	46de      	mov	lr, fp
 80011d6:	b5e0      	push	{r5, r6, r7, lr}
 80011d8:	4681      	mov	r9, r0
 80011da:	0005      	movs	r5, r0
 80011dc:	030c      	lsls	r4, r1, #12
 80011de:	0048      	lsls	r0, r1, #1
 80011e0:	4692      	mov	sl, r2
 80011e2:	001f      	movs	r7, r3
 80011e4:	b085      	sub	sp, #20
 80011e6:	0b24      	lsrs	r4, r4, #12
 80011e8:	0d40      	lsrs	r0, r0, #21
 80011ea:	0fce      	lsrs	r6, r1, #31
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_ddiv+0x26>
 80011f0:	e156      	b.n	80014a0 <__aeabi_ddiv+0x2d4>
 80011f2:	4bd4      	ldr	r3, [pc, #848]	; (8001544 <__aeabi_ddiv+0x378>)
 80011f4:	4298      	cmp	r0, r3
 80011f6:	d100      	bne.n	80011fa <__aeabi_ddiv+0x2e>
 80011f8:	e172      	b.n	80014e0 <__aeabi_ddiv+0x314>
 80011fa:	0f6b      	lsrs	r3, r5, #29
 80011fc:	00e4      	lsls	r4, r4, #3
 80011fe:	431c      	orrs	r4, r3
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	4323      	orrs	r3, r4
 8001206:	4698      	mov	r8, r3
 8001208:	4bcf      	ldr	r3, [pc, #828]	; (8001548 <__aeabi_ddiv+0x37c>)
 800120a:	00ed      	lsls	r5, r5, #3
 800120c:	469b      	mov	fp, r3
 800120e:	2300      	movs	r3, #0
 8001210:	4699      	mov	r9, r3
 8001212:	4483      	add	fp, r0
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	033c      	lsls	r4, r7, #12
 8001218:	007b      	lsls	r3, r7, #1
 800121a:	4650      	mov	r0, sl
 800121c:	0b24      	lsrs	r4, r4, #12
 800121e:	0d5b      	lsrs	r3, r3, #21
 8001220:	0fff      	lsrs	r7, r7, #31
 8001222:	2b00      	cmp	r3, #0
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0x5c>
 8001226:	e11f      	b.n	8001468 <__aeabi_ddiv+0x29c>
 8001228:	4ac6      	ldr	r2, [pc, #792]	; (8001544 <__aeabi_ddiv+0x378>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d100      	bne.n	8001230 <__aeabi_ddiv+0x64>
 800122e:	e162      	b.n	80014f6 <__aeabi_ddiv+0x32a>
 8001230:	49c5      	ldr	r1, [pc, #788]	; (8001548 <__aeabi_ddiv+0x37c>)
 8001232:	0f42      	lsrs	r2, r0, #29
 8001234:	468c      	mov	ip, r1
 8001236:	00e4      	lsls	r4, r4, #3
 8001238:	4659      	mov	r1, fp
 800123a:	4314      	orrs	r4, r2
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	4463      	add	r3, ip
 8001240:	0412      	lsls	r2, r2, #16
 8001242:	1acb      	subs	r3, r1, r3
 8001244:	4314      	orrs	r4, r2
 8001246:	469b      	mov	fp, r3
 8001248:	00c2      	lsls	r2, r0, #3
 800124a:	2000      	movs	r0, #0
 800124c:	0033      	movs	r3, r6
 800124e:	407b      	eors	r3, r7
 8001250:	469a      	mov	sl, r3
 8001252:	464b      	mov	r3, r9
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d827      	bhi.n	80012a8 <__aeabi_ddiv+0xdc>
 8001258:	49bc      	ldr	r1, [pc, #752]	; (800154c <__aeabi_ddiv+0x380>)
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	58cb      	ldr	r3, [r1, r3]
 800125e:	469f      	mov	pc, r3
 8001260:	46b2      	mov	sl, r6
 8001262:	9b00      	ldr	r3, [sp, #0]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d016      	beq.n	8001296 <__aeabi_ddiv+0xca>
 8001268:	2b03      	cmp	r3, #3
 800126a:	d100      	bne.n	800126e <__aeabi_ddiv+0xa2>
 800126c:	e28e      	b.n	800178c <__aeabi_ddiv+0x5c0>
 800126e:	2b01      	cmp	r3, #1
 8001270:	d000      	beq.n	8001274 <__aeabi_ddiv+0xa8>
 8001272:	e0d9      	b.n	8001428 <__aeabi_ddiv+0x25c>
 8001274:	2300      	movs	r3, #0
 8001276:	2400      	movs	r4, #0
 8001278:	2500      	movs	r5, #0
 800127a:	4652      	mov	r2, sl
 800127c:	051b      	lsls	r3, r3, #20
 800127e:	4323      	orrs	r3, r4
 8001280:	07d2      	lsls	r2, r2, #31
 8001282:	4313      	orrs	r3, r2
 8001284:	0028      	movs	r0, r5
 8001286:	0019      	movs	r1, r3
 8001288:	b005      	add	sp, #20
 800128a:	bcf0      	pop	{r4, r5, r6, r7}
 800128c:	46bb      	mov	fp, r7
 800128e:	46b2      	mov	sl, r6
 8001290:	46a9      	mov	r9, r5
 8001292:	46a0      	mov	r8, r4
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	2400      	movs	r4, #0
 8001298:	2500      	movs	r5, #0
 800129a:	4baa      	ldr	r3, [pc, #680]	; (8001544 <__aeabi_ddiv+0x378>)
 800129c:	e7ed      	b.n	800127a <__aeabi_ddiv+0xae>
 800129e:	46ba      	mov	sl, r7
 80012a0:	46a0      	mov	r8, r4
 80012a2:	0015      	movs	r5, r2
 80012a4:	9000      	str	r0, [sp, #0]
 80012a6:	e7dc      	b.n	8001262 <__aeabi_ddiv+0x96>
 80012a8:	4544      	cmp	r4, r8
 80012aa:	d200      	bcs.n	80012ae <__aeabi_ddiv+0xe2>
 80012ac:	e1c7      	b.n	800163e <__aeabi_ddiv+0x472>
 80012ae:	d100      	bne.n	80012b2 <__aeabi_ddiv+0xe6>
 80012b0:	e1c2      	b.n	8001638 <__aeabi_ddiv+0x46c>
 80012b2:	2301      	movs	r3, #1
 80012b4:	425b      	negs	r3, r3
 80012b6:	469c      	mov	ip, r3
 80012b8:	002e      	movs	r6, r5
 80012ba:	4640      	mov	r0, r8
 80012bc:	2500      	movs	r5, #0
 80012be:	44e3      	add	fp, ip
 80012c0:	0223      	lsls	r3, r4, #8
 80012c2:	0e14      	lsrs	r4, r2, #24
 80012c4:	431c      	orrs	r4, r3
 80012c6:	0c1b      	lsrs	r3, r3, #16
 80012c8:	4699      	mov	r9, r3
 80012ca:	0423      	lsls	r3, r4, #16
 80012cc:	0c1f      	lsrs	r7, r3, #16
 80012ce:	0212      	lsls	r2, r2, #8
 80012d0:	4649      	mov	r1, r9
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	9701      	str	r7, [sp, #4]
 80012d6:	f7fe ffa5 	bl	8000224 <__aeabi_uidivmod>
 80012da:	0002      	movs	r2, r0
 80012dc:	437a      	muls	r2, r7
 80012de:	040b      	lsls	r3, r1, #16
 80012e0:	0c31      	lsrs	r1, r6, #16
 80012e2:	4680      	mov	r8, r0
 80012e4:	4319      	orrs	r1, r3
 80012e6:	428a      	cmp	r2, r1
 80012e8:	d907      	bls.n	80012fa <__aeabi_ddiv+0x12e>
 80012ea:	2301      	movs	r3, #1
 80012ec:	425b      	negs	r3, r3
 80012ee:	469c      	mov	ip, r3
 80012f0:	1909      	adds	r1, r1, r4
 80012f2:	44e0      	add	r8, ip
 80012f4:	428c      	cmp	r4, r1
 80012f6:	d800      	bhi.n	80012fa <__aeabi_ddiv+0x12e>
 80012f8:	e207      	b.n	800170a <__aeabi_ddiv+0x53e>
 80012fa:	1a88      	subs	r0, r1, r2
 80012fc:	4649      	mov	r1, r9
 80012fe:	f7fe ff91 	bl	8000224 <__aeabi_uidivmod>
 8001302:	0409      	lsls	r1, r1, #16
 8001304:	468c      	mov	ip, r1
 8001306:	0431      	lsls	r1, r6, #16
 8001308:	4666      	mov	r6, ip
 800130a:	9a01      	ldr	r2, [sp, #4]
 800130c:	0c09      	lsrs	r1, r1, #16
 800130e:	4342      	muls	r2, r0
 8001310:	0003      	movs	r3, r0
 8001312:	4331      	orrs	r1, r6
 8001314:	428a      	cmp	r2, r1
 8001316:	d904      	bls.n	8001322 <__aeabi_ddiv+0x156>
 8001318:	1909      	adds	r1, r1, r4
 800131a:	3b01      	subs	r3, #1
 800131c:	428c      	cmp	r4, r1
 800131e:	d800      	bhi.n	8001322 <__aeabi_ddiv+0x156>
 8001320:	e1ed      	b.n	80016fe <__aeabi_ddiv+0x532>
 8001322:	1a88      	subs	r0, r1, r2
 8001324:	4642      	mov	r2, r8
 8001326:	0412      	lsls	r2, r2, #16
 8001328:	431a      	orrs	r2, r3
 800132a:	4690      	mov	r8, r2
 800132c:	4641      	mov	r1, r8
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	040e      	lsls	r6, r1, #16
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	001f      	movs	r7, r3
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	9b00      	ldr	r3, [sp, #0]
 800133a:	0c36      	lsrs	r6, r6, #16
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	0c19      	lsrs	r1, r3, #16
 8001340:	000b      	movs	r3, r1
 8001342:	4373      	muls	r3, r6
 8001344:	0c12      	lsrs	r2, r2, #16
 8001346:	437e      	muls	r6, r7
 8001348:	9103      	str	r1, [sp, #12]
 800134a:	4351      	muls	r1, r2
 800134c:	437a      	muls	r2, r7
 800134e:	0c1f      	lsrs	r7, r3, #16
 8001350:	46bc      	mov	ip, r7
 8001352:	1876      	adds	r6, r6, r1
 8001354:	4466      	add	r6, ip
 8001356:	42b1      	cmp	r1, r6
 8001358:	d903      	bls.n	8001362 <__aeabi_ddiv+0x196>
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	0249      	lsls	r1, r1, #9
 800135e:	468c      	mov	ip, r1
 8001360:	4462      	add	r2, ip
 8001362:	0c31      	lsrs	r1, r6, #16
 8001364:	188a      	adds	r2, r1, r2
 8001366:	0431      	lsls	r1, r6, #16
 8001368:	041e      	lsls	r6, r3, #16
 800136a:	0c36      	lsrs	r6, r6, #16
 800136c:	198e      	adds	r6, r1, r6
 800136e:	4290      	cmp	r0, r2
 8001370:	d302      	bcc.n	8001378 <__aeabi_ddiv+0x1ac>
 8001372:	d112      	bne.n	800139a <__aeabi_ddiv+0x1ce>
 8001374:	42b5      	cmp	r5, r6
 8001376:	d210      	bcs.n	800139a <__aeabi_ddiv+0x1ce>
 8001378:	4643      	mov	r3, r8
 800137a:	1e59      	subs	r1, r3, #1
 800137c:	9b00      	ldr	r3, [sp, #0]
 800137e:	469c      	mov	ip, r3
 8001380:	4465      	add	r5, ip
 8001382:	001f      	movs	r7, r3
 8001384:	429d      	cmp	r5, r3
 8001386:	419b      	sbcs	r3, r3
 8001388:	425b      	negs	r3, r3
 800138a:	191b      	adds	r3, r3, r4
 800138c:	18c0      	adds	r0, r0, r3
 800138e:	4284      	cmp	r4, r0
 8001390:	d200      	bcs.n	8001394 <__aeabi_ddiv+0x1c8>
 8001392:	e1a0      	b.n	80016d6 <__aeabi_ddiv+0x50a>
 8001394:	d100      	bne.n	8001398 <__aeabi_ddiv+0x1cc>
 8001396:	e19b      	b.n	80016d0 <__aeabi_ddiv+0x504>
 8001398:	4688      	mov	r8, r1
 800139a:	1bae      	subs	r6, r5, r6
 800139c:	42b5      	cmp	r5, r6
 800139e:	41ad      	sbcs	r5, r5
 80013a0:	1a80      	subs	r0, r0, r2
 80013a2:	426d      	negs	r5, r5
 80013a4:	1b40      	subs	r0, r0, r5
 80013a6:	4284      	cmp	r4, r0
 80013a8:	d100      	bne.n	80013ac <__aeabi_ddiv+0x1e0>
 80013aa:	e1d5      	b.n	8001758 <__aeabi_ddiv+0x58c>
 80013ac:	4649      	mov	r1, r9
 80013ae:	f7fe ff39 	bl	8000224 <__aeabi_uidivmod>
 80013b2:	9a01      	ldr	r2, [sp, #4]
 80013b4:	040b      	lsls	r3, r1, #16
 80013b6:	4342      	muls	r2, r0
 80013b8:	0c31      	lsrs	r1, r6, #16
 80013ba:	0005      	movs	r5, r0
 80013bc:	4319      	orrs	r1, r3
 80013be:	428a      	cmp	r2, r1
 80013c0:	d900      	bls.n	80013c4 <__aeabi_ddiv+0x1f8>
 80013c2:	e16c      	b.n	800169e <__aeabi_ddiv+0x4d2>
 80013c4:	1a88      	subs	r0, r1, r2
 80013c6:	4649      	mov	r1, r9
 80013c8:	f7fe ff2c 	bl	8000224 <__aeabi_uidivmod>
 80013cc:	9a01      	ldr	r2, [sp, #4]
 80013ce:	0436      	lsls	r6, r6, #16
 80013d0:	4342      	muls	r2, r0
 80013d2:	0409      	lsls	r1, r1, #16
 80013d4:	0c36      	lsrs	r6, r6, #16
 80013d6:	0003      	movs	r3, r0
 80013d8:	430e      	orrs	r6, r1
 80013da:	42b2      	cmp	r2, r6
 80013dc:	d900      	bls.n	80013e0 <__aeabi_ddiv+0x214>
 80013de:	e153      	b.n	8001688 <__aeabi_ddiv+0x4bc>
 80013e0:	9803      	ldr	r0, [sp, #12]
 80013e2:	1ab6      	subs	r6, r6, r2
 80013e4:	0002      	movs	r2, r0
 80013e6:	042d      	lsls	r5, r5, #16
 80013e8:	431d      	orrs	r5, r3
 80013ea:	9f02      	ldr	r7, [sp, #8]
 80013ec:	042b      	lsls	r3, r5, #16
 80013ee:	0c1b      	lsrs	r3, r3, #16
 80013f0:	435a      	muls	r2, r3
 80013f2:	437b      	muls	r3, r7
 80013f4:	469c      	mov	ip, r3
 80013f6:	0c29      	lsrs	r1, r5, #16
 80013f8:	4348      	muls	r0, r1
 80013fa:	0c13      	lsrs	r3, r2, #16
 80013fc:	4484      	add	ip, r0
 80013fe:	4463      	add	r3, ip
 8001400:	4379      	muls	r1, r7
 8001402:	4298      	cmp	r0, r3
 8001404:	d903      	bls.n	800140e <__aeabi_ddiv+0x242>
 8001406:	2080      	movs	r0, #128	; 0x80
 8001408:	0240      	lsls	r0, r0, #9
 800140a:	4684      	mov	ip, r0
 800140c:	4461      	add	r1, ip
 800140e:	0c18      	lsrs	r0, r3, #16
 8001410:	0412      	lsls	r2, r2, #16
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	0c12      	lsrs	r2, r2, #16
 8001416:	1841      	adds	r1, r0, r1
 8001418:	189b      	adds	r3, r3, r2
 800141a:	428e      	cmp	r6, r1
 800141c:	d200      	bcs.n	8001420 <__aeabi_ddiv+0x254>
 800141e:	e0ff      	b.n	8001620 <__aeabi_ddiv+0x454>
 8001420:	d100      	bne.n	8001424 <__aeabi_ddiv+0x258>
 8001422:	e0fa      	b.n	800161a <__aeabi_ddiv+0x44e>
 8001424:	2301      	movs	r3, #1
 8001426:	431d      	orrs	r5, r3
 8001428:	4a49      	ldr	r2, [pc, #292]	; (8001550 <__aeabi_ddiv+0x384>)
 800142a:	445a      	add	r2, fp
 800142c:	2a00      	cmp	r2, #0
 800142e:	dc00      	bgt.n	8001432 <__aeabi_ddiv+0x266>
 8001430:	e0aa      	b.n	8001588 <__aeabi_ddiv+0x3bc>
 8001432:	076b      	lsls	r3, r5, #29
 8001434:	d000      	beq.n	8001438 <__aeabi_ddiv+0x26c>
 8001436:	e13d      	b.n	80016b4 <__aeabi_ddiv+0x4e8>
 8001438:	08ed      	lsrs	r5, r5, #3
 800143a:	4643      	mov	r3, r8
 800143c:	01db      	lsls	r3, r3, #7
 800143e:	d506      	bpl.n	800144e <__aeabi_ddiv+0x282>
 8001440:	4642      	mov	r2, r8
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <__aeabi_ddiv+0x388>)
 8001444:	401a      	ands	r2, r3
 8001446:	4690      	mov	r8, r2
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	00d2      	lsls	r2, r2, #3
 800144c:	445a      	add	r2, fp
 800144e:	4b42      	ldr	r3, [pc, #264]	; (8001558 <__aeabi_ddiv+0x38c>)
 8001450:	429a      	cmp	r2, r3
 8001452:	dd00      	ble.n	8001456 <__aeabi_ddiv+0x28a>
 8001454:	e71f      	b.n	8001296 <__aeabi_ddiv+0xca>
 8001456:	4643      	mov	r3, r8
 8001458:	075b      	lsls	r3, r3, #29
 800145a:	431d      	orrs	r5, r3
 800145c:	4643      	mov	r3, r8
 800145e:	0552      	lsls	r2, r2, #21
 8001460:	025c      	lsls	r4, r3, #9
 8001462:	0b24      	lsrs	r4, r4, #12
 8001464:	0d53      	lsrs	r3, r2, #21
 8001466:	e708      	b.n	800127a <__aeabi_ddiv+0xae>
 8001468:	4652      	mov	r2, sl
 800146a:	4322      	orrs	r2, r4
 800146c:	d100      	bne.n	8001470 <__aeabi_ddiv+0x2a4>
 800146e:	e07b      	b.n	8001568 <__aeabi_ddiv+0x39c>
 8001470:	2c00      	cmp	r4, #0
 8001472:	d100      	bne.n	8001476 <__aeabi_ddiv+0x2aa>
 8001474:	e0fa      	b.n	800166c <__aeabi_ddiv+0x4a0>
 8001476:	0020      	movs	r0, r4
 8001478:	f001 f97c 	bl	8002774 <__clzsi2>
 800147c:	0002      	movs	r2, r0
 800147e:	3a0b      	subs	r2, #11
 8001480:	231d      	movs	r3, #29
 8001482:	0001      	movs	r1, r0
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	4652      	mov	r2, sl
 8001488:	3908      	subs	r1, #8
 800148a:	40da      	lsrs	r2, r3
 800148c:	408c      	lsls	r4, r1
 800148e:	4314      	orrs	r4, r2
 8001490:	4652      	mov	r2, sl
 8001492:	408a      	lsls	r2, r1
 8001494:	4b31      	ldr	r3, [pc, #196]	; (800155c <__aeabi_ddiv+0x390>)
 8001496:	4458      	add	r0, fp
 8001498:	469b      	mov	fp, r3
 800149a:	4483      	add	fp, r0
 800149c:	2000      	movs	r0, #0
 800149e:	e6d5      	b.n	800124c <__aeabi_ddiv+0x80>
 80014a0:	464b      	mov	r3, r9
 80014a2:	4323      	orrs	r3, r4
 80014a4:	4698      	mov	r8, r3
 80014a6:	d044      	beq.n	8001532 <__aeabi_ddiv+0x366>
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	d100      	bne.n	80014ae <__aeabi_ddiv+0x2e2>
 80014ac:	e0ce      	b.n	800164c <__aeabi_ddiv+0x480>
 80014ae:	0020      	movs	r0, r4
 80014b0:	f001 f960 	bl	8002774 <__clzsi2>
 80014b4:	0001      	movs	r1, r0
 80014b6:	0002      	movs	r2, r0
 80014b8:	390b      	subs	r1, #11
 80014ba:	231d      	movs	r3, #29
 80014bc:	1a5b      	subs	r3, r3, r1
 80014be:	4649      	mov	r1, r9
 80014c0:	0010      	movs	r0, r2
 80014c2:	40d9      	lsrs	r1, r3
 80014c4:	3808      	subs	r0, #8
 80014c6:	4084      	lsls	r4, r0
 80014c8:	000b      	movs	r3, r1
 80014ca:	464d      	mov	r5, r9
 80014cc:	4323      	orrs	r3, r4
 80014ce:	4698      	mov	r8, r3
 80014d0:	4085      	lsls	r5, r0
 80014d2:	4823      	ldr	r0, [pc, #140]	; (8001560 <__aeabi_ddiv+0x394>)
 80014d4:	1a83      	subs	r3, r0, r2
 80014d6:	469b      	mov	fp, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	4699      	mov	r9, r3
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	e69a      	b.n	8001216 <__aeabi_ddiv+0x4a>
 80014e0:	464b      	mov	r3, r9
 80014e2:	4323      	orrs	r3, r4
 80014e4:	4698      	mov	r8, r3
 80014e6:	d11d      	bne.n	8001524 <__aeabi_ddiv+0x358>
 80014e8:	2308      	movs	r3, #8
 80014ea:	4699      	mov	r9, r3
 80014ec:	3b06      	subs	r3, #6
 80014ee:	2500      	movs	r5, #0
 80014f0:	4683      	mov	fp, r0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	e68f      	b.n	8001216 <__aeabi_ddiv+0x4a>
 80014f6:	4652      	mov	r2, sl
 80014f8:	4322      	orrs	r2, r4
 80014fa:	d109      	bne.n	8001510 <__aeabi_ddiv+0x344>
 80014fc:	2302      	movs	r3, #2
 80014fe:	4649      	mov	r1, r9
 8001500:	4319      	orrs	r1, r3
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <__aeabi_ddiv+0x398>)
 8001504:	4689      	mov	r9, r1
 8001506:	469c      	mov	ip, r3
 8001508:	2400      	movs	r4, #0
 800150a:	2002      	movs	r0, #2
 800150c:	44e3      	add	fp, ip
 800150e:	e69d      	b.n	800124c <__aeabi_ddiv+0x80>
 8001510:	2303      	movs	r3, #3
 8001512:	464a      	mov	r2, r9
 8001514:	431a      	orrs	r2, r3
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <__aeabi_ddiv+0x398>)
 8001518:	4691      	mov	r9, r2
 800151a:	469c      	mov	ip, r3
 800151c:	4652      	mov	r2, sl
 800151e:	2003      	movs	r0, #3
 8001520:	44e3      	add	fp, ip
 8001522:	e693      	b.n	800124c <__aeabi_ddiv+0x80>
 8001524:	230c      	movs	r3, #12
 8001526:	4699      	mov	r9, r3
 8001528:	3b09      	subs	r3, #9
 800152a:	46a0      	mov	r8, r4
 800152c:	4683      	mov	fp, r0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	e671      	b.n	8001216 <__aeabi_ddiv+0x4a>
 8001532:	2304      	movs	r3, #4
 8001534:	4699      	mov	r9, r3
 8001536:	2300      	movs	r3, #0
 8001538:	469b      	mov	fp, r3
 800153a:	3301      	adds	r3, #1
 800153c:	2500      	movs	r5, #0
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	e669      	b.n	8001216 <__aeabi_ddiv+0x4a>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff
 8001548:	fffffc01 	.word	0xfffffc01
 800154c:	0801e888 	.word	0x0801e888
 8001550:	000003ff 	.word	0x000003ff
 8001554:	feffffff 	.word	0xfeffffff
 8001558:	000007fe 	.word	0x000007fe
 800155c:	000003f3 	.word	0x000003f3
 8001560:	fffffc0d 	.word	0xfffffc0d
 8001564:	fffff801 	.word	0xfffff801
 8001568:	4649      	mov	r1, r9
 800156a:	2301      	movs	r3, #1
 800156c:	4319      	orrs	r1, r3
 800156e:	4689      	mov	r9, r1
 8001570:	2400      	movs	r4, #0
 8001572:	2001      	movs	r0, #1
 8001574:	e66a      	b.n	800124c <__aeabi_ddiv+0x80>
 8001576:	2300      	movs	r3, #0
 8001578:	2480      	movs	r4, #128	; 0x80
 800157a:	469a      	mov	sl, r3
 800157c:	2500      	movs	r5, #0
 800157e:	4b8a      	ldr	r3, [pc, #552]	; (80017a8 <__aeabi_ddiv+0x5dc>)
 8001580:	0324      	lsls	r4, r4, #12
 8001582:	e67a      	b.n	800127a <__aeabi_ddiv+0xae>
 8001584:	2501      	movs	r5, #1
 8001586:	426d      	negs	r5, r5
 8001588:	2301      	movs	r3, #1
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	2b38      	cmp	r3, #56	; 0x38
 800158e:	dd00      	ble.n	8001592 <__aeabi_ddiv+0x3c6>
 8001590:	e670      	b.n	8001274 <__aeabi_ddiv+0xa8>
 8001592:	2b1f      	cmp	r3, #31
 8001594:	dc00      	bgt.n	8001598 <__aeabi_ddiv+0x3cc>
 8001596:	e0bf      	b.n	8001718 <__aeabi_ddiv+0x54c>
 8001598:	211f      	movs	r1, #31
 800159a:	4249      	negs	r1, r1
 800159c:	1a8a      	subs	r2, r1, r2
 800159e:	4641      	mov	r1, r8
 80015a0:	40d1      	lsrs	r1, r2
 80015a2:	000a      	movs	r2, r1
 80015a4:	2b20      	cmp	r3, #32
 80015a6:	d004      	beq.n	80015b2 <__aeabi_ddiv+0x3e6>
 80015a8:	4641      	mov	r1, r8
 80015aa:	4b80      	ldr	r3, [pc, #512]	; (80017ac <__aeabi_ddiv+0x5e0>)
 80015ac:	445b      	add	r3, fp
 80015ae:	4099      	lsls	r1, r3
 80015b0:	430d      	orrs	r5, r1
 80015b2:	1e6b      	subs	r3, r5, #1
 80015b4:	419d      	sbcs	r5, r3
 80015b6:	2307      	movs	r3, #7
 80015b8:	432a      	orrs	r2, r5
 80015ba:	001d      	movs	r5, r3
 80015bc:	2400      	movs	r4, #0
 80015be:	4015      	ands	r5, r2
 80015c0:	4213      	tst	r3, r2
 80015c2:	d100      	bne.n	80015c6 <__aeabi_ddiv+0x3fa>
 80015c4:	e0d4      	b.n	8001770 <__aeabi_ddiv+0x5a4>
 80015c6:	210f      	movs	r1, #15
 80015c8:	2300      	movs	r3, #0
 80015ca:	4011      	ands	r1, r2
 80015cc:	2904      	cmp	r1, #4
 80015ce:	d100      	bne.n	80015d2 <__aeabi_ddiv+0x406>
 80015d0:	e0cb      	b.n	800176a <__aeabi_ddiv+0x59e>
 80015d2:	1d11      	adds	r1, r2, #4
 80015d4:	4291      	cmp	r1, r2
 80015d6:	4192      	sbcs	r2, r2
 80015d8:	4252      	negs	r2, r2
 80015da:	189b      	adds	r3, r3, r2
 80015dc:	000a      	movs	r2, r1
 80015de:	0219      	lsls	r1, r3, #8
 80015e0:	d400      	bmi.n	80015e4 <__aeabi_ddiv+0x418>
 80015e2:	e0c2      	b.n	800176a <__aeabi_ddiv+0x59e>
 80015e4:	2301      	movs	r3, #1
 80015e6:	2400      	movs	r4, #0
 80015e8:	2500      	movs	r5, #0
 80015ea:	e646      	b.n	800127a <__aeabi_ddiv+0xae>
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	4641      	mov	r1, r8
 80015f0:	031b      	lsls	r3, r3, #12
 80015f2:	4219      	tst	r1, r3
 80015f4:	d008      	beq.n	8001608 <__aeabi_ddiv+0x43c>
 80015f6:	421c      	tst	r4, r3
 80015f8:	d106      	bne.n	8001608 <__aeabi_ddiv+0x43c>
 80015fa:	431c      	orrs	r4, r3
 80015fc:	0324      	lsls	r4, r4, #12
 80015fe:	46ba      	mov	sl, r7
 8001600:	0015      	movs	r5, r2
 8001602:	4b69      	ldr	r3, [pc, #420]	; (80017a8 <__aeabi_ddiv+0x5dc>)
 8001604:	0b24      	lsrs	r4, r4, #12
 8001606:	e638      	b.n	800127a <__aeabi_ddiv+0xae>
 8001608:	2480      	movs	r4, #128	; 0x80
 800160a:	4643      	mov	r3, r8
 800160c:	0324      	lsls	r4, r4, #12
 800160e:	431c      	orrs	r4, r3
 8001610:	0324      	lsls	r4, r4, #12
 8001612:	46b2      	mov	sl, r6
 8001614:	4b64      	ldr	r3, [pc, #400]	; (80017a8 <__aeabi_ddiv+0x5dc>)
 8001616:	0b24      	lsrs	r4, r4, #12
 8001618:	e62f      	b.n	800127a <__aeabi_ddiv+0xae>
 800161a:	2b00      	cmp	r3, #0
 800161c:	d100      	bne.n	8001620 <__aeabi_ddiv+0x454>
 800161e:	e703      	b.n	8001428 <__aeabi_ddiv+0x25c>
 8001620:	19a6      	adds	r6, r4, r6
 8001622:	1e68      	subs	r0, r5, #1
 8001624:	42a6      	cmp	r6, r4
 8001626:	d200      	bcs.n	800162a <__aeabi_ddiv+0x45e>
 8001628:	e08d      	b.n	8001746 <__aeabi_ddiv+0x57a>
 800162a:	428e      	cmp	r6, r1
 800162c:	d200      	bcs.n	8001630 <__aeabi_ddiv+0x464>
 800162e:	e0a3      	b.n	8001778 <__aeabi_ddiv+0x5ac>
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0x468>
 8001632:	e0b3      	b.n	800179c <__aeabi_ddiv+0x5d0>
 8001634:	0005      	movs	r5, r0
 8001636:	e6f5      	b.n	8001424 <__aeabi_ddiv+0x258>
 8001638:	42aa      	cmp	r2, r5
 800163a:	d900      	bls.n	800163e <__aeabi_ddiv+0x472>
 800163c:	e639      	b.n	80012b2 <__aeabi_ddiv+0xe6>
 800163e:	4643      	mov	r3, r8
 8001640:	07de      	lsls	r6, r3, #31
 8001642:	0858      	lsrs	r0, r3, #1
 8001644:	086b      	lsrs	r3, r5, #1
 8001646:	431e      	orrs	r6, r3
 8001648:	07ed      	lsls	r5, r5, #31
 800164a:	e639      	b.n	80012c0 <__aeabi_ddiv+0xf4>
 800164c:	4648      	mov	r0, r9
 800164e:	f001 f891 	bl	8002774 <__clzsi2>
 8001652:	0001      	movs	r1, r0
 8001654:	0002      	movs	r2, r0
 8001656:	3115      	adds	r1, #21
 8001658:	3220      	adds	r2, #32
 800165a:	291c      	cmp	r1, #28
 800165c:	dc00      	bgt.n	8001660 <__aeabi_ddiv+0x494>
 800165e:	e72c      	b.n	80014ba <__aeabi_ddiv+0x2ee>
 8001660:	464b      	mov	r3, r9
 8001662:	3808      	subs	r0, #8
 8001664:	4083      	lsls	r3, r0
 8001666:	2500      	movs	r5, #0
 8001668:	4698      	mov	r8, r3
 800166a:	e732      	b.n	80014d2 <__aeabi_ddiv+0x306>
 800166c:	f001 f882 	bl	8002774 <__clzsi2>
 8001670:	0003      	movs	r3, r0
 8001672:	001a      	movs	r2, r3
 8001674:	3215      	adds	r2, #21
 8001676:	3020      	adds	r0, #32
 8001678:	2a1c      	cmp	r2, #28
 800167a:	dc00      	bgt.n	800167e <__aeabi_ddiv+0x4b2>
 800167c:	e700      	b.n	8001480 <__aeabi_ddiv+0x2b4>
 800167e:	4654      	mov	r4, sl
 8001680:	3b08      	subs	r3, #8
 8001682:	2200      	movs	r2, #0
 8001684:	409c      	lsls	r4, r3
 8001686:	e705      	b.n	8001494 <__aeabi_ddiv+0x2c8>
 8001688:	1936      	adds	r6, r6, r4
 800168a:	3b01      	subs	r3, #1
 800168c:	42b4      	cmp	r4, r6
 800168e:	d900      	bls.n	8001692 <__aeabi_ddiv+0x4c6>
 8001690:	e6a6      	b.n	80013e0 <__aeabi_ddiv+0x214>
 8001692:	42b2      	cmp	r2, r6
 8001694:	d800      	bhi.n	8001698 <__aeabi_ddiv+0x4cc>
 8001696:	e6a3      	b.n	80013e0 <__aeabi_ddiv+0x214>
 8001698:	1e83      	subs	r3, r0, #2
 800169a:	1936      	adds	r6, r6, r4
 800169c:	e6a0      	b.n	80013e0 <__aeabi_ddiv+0x214>
 800169e:	1909      	adds	r1, r1, r4
 80016a0:	3d01      	subs	r5, #1
 80016a2:	428c      	cmp	r4, r1
 80016a4:	d900      	bls.n	80016a8 <__aeabi_ddiv+0x4dc>
 80016a6:	e68d      	b.n	80013c4 <__aeabi_ddiv+0x1f8>
 80016a8:	428a      	cmp	r2, r1
 80016aa:	d800      	bhi.n	80016ae <__aeabi_ddiv+0x4e2>
 80016ac:	e68a      	b.n	80013c4 <__aeabi_ddiv+0x1f8>
 80016ae:	1e85      	subs	r5, r0, #2
 80016b0:	1909      	adds	r1, r1, r4
 80016b2:	e687      	b.n	80013c4 <__aeabi_ddiv+0x1f8>
 80016b4:	230f      	movs	r3, #15
 80016b6:	402b      	ands	r3, r5
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d100      	bne.n	80016be <__aeabi_ddiv+0x4f2>
 80016bc:	e6bc      	b.n	8001438 <__aeabi_ddiv+0x26c>
 80016be:	2305      	movs	r3, #5
 80016c0:	425b      	negs	r3, r3
 80016c2:	42ab      	cmp	r3, r5
 80016c4:	419b      	sbcs	r3, r3
 80016c6:	3504      	adds	r5, #4
 80016c8:	425b      	negs	r3, r3
 80016ca:	08ed      	lsrs	r5, r5, #3
 80016cc:	4498      	add	r8, r3
 80016ce:	e6b4      	b.n	800143a <__aeabi_ddiv+0x26e>
 80016d0:	42af      	cmp	r7, r5
 80016d2:	d900      	bls.n	80016d6 <__aeabi_ddiv+0x50a>
 80016d4:	e660      	b.n	8001398 <__aeabi_ddiv+0x1cc>
 80016d6:	4282      	cmp	r2, r0
 80016d8:	d804      	bhi.n	80016e4 <__aeabi_ddiv+0x518>
 80016da:	d000      	beq.n	80016de <__aeabi_ddiv+0x512>
 80016dc:	e65c      	b.n	8001398 <__aeabi_ddiv+0x1cc>
 80016de:	42ae      	cmp	r6, r5
 80016e0:	d800      	bhi.n	80016e4 <__aeabi_ddiv+0x518>
 80016e2:	e659      	b.n	8001398 <__aeabi_ddiv+0x1cc>
 80016e4:	2302      	movs	r3, #2
 80016e6:	425b      	negs	r3, r3
 80016e8:	469c      	mov	ip, r3
 80016ea:	9b00      	ldr	r3, [sp, #0]
 80016ec:	44e0      	add	r8, ip
 80016ee:	469c      	mov	ip, r3
 80016f0:	4465      	add	r5, ip
 80016f2:	429d      	cmp	r5, r3
 80016f4:	419b      	sbcs	r3, r3
 80016f6:	425b      	negs	r3, r3
 80016f8:	191b      	adds	r3, r3, r4
 80016fa:	18c0      	adds	r0, r0, r3
 80016fc:	e64d      	b.n	800139a <__aeabi_ddiv+0x1ce>
 80016fe:	428a      	cmp	r2, r1
 8001700:	d800      	bhi.n	8001704 <__aeabi_ddiv+0x538>
 8001702:	e60e      	b.n	8001322 <__aeabi_ddiv+0x156>
 8001704:	1e83      	subs	r3, r0, #2
 8001706:	1909      	adds	r1, r1, r4
 8001708:	e60b      	b.n	8001322 <__aeabi_ddiv+0x156>
 800170a:	428a      	cmp	r2, r1
 800170c:	d800      	bhi.n	8001710 <__aeabi_ddiv+0x544>
 800170e:	e5f4      	b.n	80012fa <__aeabi_ddiv+0x12e>
 8001710:	1e83      	subs	r3, r0, #2
 8001712:	4698      	mov	r8, r3
 8001714:	1909      	adds	r1, r1, r4
 8001716:	e5f0      	b.n	80012fa <__aeabi_ddiv+0x12e>
 8001718:	4925      	ldr	r1, [pc, #148]	; (80017b0 <__aeabi_ddiv+0x5e4>)
 800171a:	0028      	movs	r0, r5
 800171c:	4459      	add	r1, fp
 800171e:	408d      	lsls	r5, r1
 8001720:	4642      	mov	r2, r8
 8001722:	408a      	lsls	r2, r1
 8001724:	1e69      	subs	r1, r5, #1
 8001726:	418d      	sbcs	r5, r1
 8001728:	4641      	mov	r1, r8
 800172a:	40d8      	lsrs	r0, r3
 800172c:	40d9      	lsrs	r1, r3
 800172e:	4302      	orrs	r2, r0
 8001730:	432a      	orrs	r2, r5
 8001732:	000b      	movs	r3, r1
 8001734:	0751      	lsls	r1, r2, #29
 8001736:	d100      	bne.n	800173a <__aeabi_ddiv+0x56e>
 8001738:	e751      	b.n	80015de <__aeabi_ddiv+0x412>
 800173a:	210f      	movs	r1, #15
 800173c:	4011      	ands	r1, r2
 800173e:	2904      	cmp	r1, #4
 8001740:	d000      	beq.n	8001744 <__aeabi_ddiv+0x578>
 8001742:	e746      	b.n	80015d2 <__aeabi_ddiv+0x406>
 8001744:	e74b      	b.n	80015de <__aeabi_ddiv+0x412>
 8001746:	0005      	movs	r5, r0
 8001748:	428e      	cmp	r6, r1
 800174a:	d000      	beq.n	800174e <__aeabi_ddiv+0x582>
 800174c:	e66a      	b.n	8001424 <__aeabi_ddiv+0x258>
 800174e:	9a00      	ldr	r2, [sp, #0]
 8001750:	4293      	cmp	r3, r2
 8001752:	d000      	beq.n	8001756 <__aeabi_ddiv+0x58a>
 8001754:	e666      	b.n	8001424 <__aeabi_ddiv+0x258>
 8001756:	e667      	b.n	8001428 <__aeabi_ddiv+0x25c>
 8001758:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <__aeabi_ddiv+0x5e8>)
 800175a:	445a      	add	r2, fp
 800175c:	2a00      	cmp	r2, #0
 800175e:	dc00      	bgt.n	8001762 <__aeabi_ddiv+0x596>
 8001760:	e710      	b.n	8001584 <__aeabi_ddiv+0x3b8>
 8001762:	2301      	movs	r3, #1
 8001764:	2500      	movs	r5, #0
 8001766:	4498      	add	r8, r3
 8001768:	e667      	b.n	800143a <__aeabi_ddiv+0x26e>
 800176a:	075d      	lsls	r5, r3, #29
 800176c:	025b      	lsls	r3, r3, #9
 800176e:	0b1c      	lsrs	r4, r3, #12
 8001770:	08d2      	lsrs	r2, r2, #3
 8001772:	2300      	movs	r3, #0
 8001774:	4315      	orrs	r5, r2
 8001776:	e580      	b.n	800127a <__aeabi_ddiv+0xae>
 8001778:	9800      	ldr	r0, [sp, #0]
 800177a:	3d02      	subs	r5, #2
 800177c:	0042      	lsls	r2, r0, #1
 800177e:	4282      	cmp	r2, r0
 8001780:	41bf      	sbcs	r7, r7
 8001782:	427f      	negs	r7, r7
 8001784:	193c      	adds	r4, r7, r4
 8001786:	1936      	adds	r6, r6, r4
 8001788:	9200      	str	r2, [sp, #0]
 800178a:	e7dd      	b.n	8001748 <__aeabi_ddiv+0x57c>
 800178c:	2480      	movs	r4, #128	; 0x80
 800178e:	4643      	mov	r3, r8
 8001790:	0324      	lsls	r4, r4, #12
 8001792:	431c      	orrs	r4, r3
 8001794:	0324      	lsls	r4, r4, #12
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__aeabi_ddiv+0x5dc>)
 8001798:	0b24      	lsrs	r4, r4, #12
 800179a:	e56e      	b.n	800127a <__aeabi_ddiv+0xae>
 800179c:	9a00      	ldr	r2, [sp, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3ea      	bcc.n	8001778 <__aeabi_ddiv+0x5ac>
 80017a2:	0005      	movs	r5, r0
 80017a4:	e7d3      	b.n	800174e <__aeabi_ddiv+0x582>
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	000007ff 	.word	0x000007ff
 80017ac:	0000043e 	.word	0x0000043e
 80017b0:	0000041e 	.word	0x0000041e
 80017b4:	000003ff 	.word	0x000003ff

080017b8 <__eqdf2>:
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	464e      	mov	r6, r9
 80017bc:	4645      	mov	r5, r8
 80017be:	46de      	mov	lr, fp
 80017c0:	4657      	mov	r7, sl
 80017c2:	4690      	mov	r8, r2
 80017c4:	b5e0      	push	{r5, r6, r7, lr}
 80017c6:	0017      	movs	r7, r2
 80017c8:	031a      	lsls	r2, r3, #12
 80017ca:	0b12      	lsrs	r2, r2, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4684      	mov	ip, r0
 80017d0:	4819      	ldr	r0, [pc, #100]	; (8001838 <__eqdf2+0x80>)
 80017d2:	030e      	lsls	r6, r1, #12
 80017d4:	004c      	lsls	r4, r1, #1
 80017d6:	4691      	mov	r9, r2
 80017d8:	005a      	lsls	r2, r3, #1
 80017da:	0fdb      	lsrs	r3, r3, #31
 80017dc:	469b      	mov	fp, r3
 80017de:	0b36      	lsrs	r6, r6, #12
 80017e0:	0d64      	lsrs	r4, r4, #21
 80017e2:	0fc9      	lsrs	r1, r1, #31
 80017e4:	0d52      	lsrs	r2, r2, #21
 80017e6:	4284      	cmp	r4, r0
 80017e8:	d019      	beq.n	800181e <__eqdf2+0x66>
 80017ea:	4282      	cmp	r2, r0
 80017ec:	d010      	beq.n	8001810 <__eqdf2+0x58>
 80017ee:	2001      	movs	r0, #1
 80017f0:	4294      	cmp	r4, r2
 80017f2:	d10e      	bne.n	8001812 <__eqdf2+0x5a>
 80017f4:	454e      	cmp	r6, r9
 80017f6:	d10c      	bne.n	8001812 <__eqdf2+0x5a>
 80017f8:	2001      	movs	r0, #1
 80017fa:	45c4      	cmp	ip, r8
 80017fc:	d109      	bne.n	8001812 <__eqdf2+0x5a>
 80017fe:	4559      	cmp	r1, fp
 8001800:	d017      	beq.n	8001832 <__eqdf2+0x7a>
 8001802:	2c00      	cmp	r4, #0
 8001804:	d105      	bne.n	8001812 <__eqdf2+0x5a>
 8001806:	0030      	movs	r0, r6
 8001808:	4328      	orrs	r0, r5
 800180a:	1e43      	subs	r3, r0, #1
 800180c:	4198      	sbcs	r0, r3
 800180e:	e000      	b.n	8001812 <__eqdf2+0x5a>
 8001810:	2001      	movs	r0, #1
 8001812:	bcf0      	pop	{r4, r5, r6, r7}
 8001814:	46bb      	mov	fp, r7
 8001816:	46b2      	mov	sl, r6
 8001818:	46a9      	mov	r9, r5
 800181a:	46a0      	mov	r8, r4
 800181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181e:	0033      	movs	r3, r6
 8001820:	2001      	movs	r0, #1
 8001822:	432b      	orrs	r3, r5
 8001824:	d1f5      	bne.n	8001812 <__eqdf2+0x5a>
 8001826:	42a2      	cmp	r2, r4
 8001828:	d1f3      	bne.n	8001812 <__eqdf2+0x5a>
 800182a:	464b      	mov	r3, r9
 800182c:	433b      	orrs	r3, r7
 800182e:	d1f0      	bne.n	8001812 <__eqdf2+0x5a>
 8001830:	e7e2      	b.n	80017f8 <__eqdf2+0x40>
 8001832:	2000      	movs	r0, #0
 8001834:	e7ed      	b.n	8001812 <__eqdf2+0x5a>
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	000007ff 	.word	0x000007ff

0800183c <__gedf2>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	4647      	mov	r7, r8
 8001840:	46ce      	mov	lr, r9
 8001842:	0004      	movs	r4, r0
 8001844:	0018      	movs	r0, r3
 8001846:	0016      	movs	r6, r2
 8001848:	031b      	lsls	r3, r3, #12
 800184a:	0b1b      	lsrs	r3, r3, #12
 800184c:	4d2d      	ldr	r5, [pc, #180]	; (8001904 <__gedf2+0xc8>)
 800184e:	004a      	lsls	r2, r1, #1
 8001850:	4699      	mov	r9, r3
 8001852:	b580      	push	{r7, lr}
 8001854:	0043      	lsls	r3, r0, #1
 8001856:	030f      	lsls	r7, r1, #12
 8001858:	46a4      	mov	ip, r4
 800185a:	46b0      	mov	r8, r6
 800185c:	0b3f      	lsrs	r7, r7, #12
 800185e:	0d52      	lsrs	r2, r2, #21
 8001860:	0fc9      	lsrs	r1, r1, #31
 8001862:	0d5b      	lsrs	r3, r3, #21
 8001864:	0fc0      	lsrs	r0, r0, #31
 8001866:	42aa      	cmp	r2, r5
 8001868:	d021      	beq.n	80018ae <__gedf2+0x72>
 800186a:	42ab      	cmp	r3, r5
 800186c:	d013      	beq.n	8001896 <__gedf2+0x5a>
 800186e:	2a00      	cmp	r2, #0
 8001870:	d122      	bne.n	80018b8 <__gedf2+0x7c>
 8001872:	433c      	orrs	r4, r7
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <__gedf2+0x42>
 8001878:	464d      	mov	r5, r9
 800187a:	432e      	orrs	r6, r5
 800187c:	d022      	beq.n	80018c4 <__gedf2+0x88>
 800187e:	2c00      	cmp	r4, #0
 8001880:	d010      	beq.n	80018a4 <__gedf2+0x68>
 8001882:	4281      	cmp	r1, r0
 8001884:	d022      	beq.n	80018cc <__gedf2+0x90>
 8001886:	2002      	movs	r0, #2
 8001888:	3901      	subs	r1, #1
 800188a:	4008      	ands	r0, r1
 800188c:	3801      	subs	r0, #1
 800188e:	bcc0      	pop	{r6, r7}
 8001890:	46b9      	mov	r9, r7
 8001892:	46b0      	mov	r8, r6
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001896:	464d      	mov	r5, r9
 8001898:	432e      	orrs	r6, r5
 800189a:	d129      	bne.n	80018f0 <__gedf2+0xb4>
 800189c:	2a00      	cmp	r2, #0
 800189e:	d1f0      	bne.n	8001882 <__gedf2+0x46>
 80018a0:	433c      	orrs	r4, r7
 80018a2:	d1ee      	bne.n	8001882 <__gedf2+0x46>
 80018a4:	2800      	cmp	r0, #0
 80018a6:	d1f2      	bne.n	800188e <__gedf2+0x52>
 80018a8:	2001      	movs	r0, #1
 80018aa:	4240      	negs	r0, r0
 80018ac:	e7ef      	b.n	800188e <__gedf2+0x52>
 80018ae:	003d      	movs	r5, r7
 80018b0:	4325      	orrs	r5, r4
 80018b2:	d11d      	bne.n	80018f0 <__gedf2+0xb4>
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d0ee      	beq.n	8001896 <__gedf2+0x5a>
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1e2      	bne.n	8001882 <__gedf2+0x46>
 80018bc:	464c      	mov	r4, r9
 80018be:	4326      	orrs	r6, r4
 80018c0:	d1df      	bne.n	8001882 <__gedf2+0x46>
 80018c2:	e7e0      	b.n	8001886 <__gedf2+0x4a>
 80018c4:	2000      	movs	r0, #0
 80018c6:	2c00      	cmp	r4, #0
 80018c8:	d0e1      	beq.n	800188e <__gedf2+0x52>
 80018ca:	e7dc      	b.n	8001886 <__gedf2+0x4a>
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dc0a      	bgt.n	80018e6 <__gedf2+0xaa>
 80018d0:	dbe8      	blt.n	80018a4 <__gedf2+0x68>
 80018d2:	454f      	cmp	r7, r9
 80018d4:	d8d7      	bhi.n	8001886 <__gedf2+0x4a>
 80018d6:	d00e      	beq.n	80018f6 <__gedf2+0xba>
 80018d8:	2000      	movs	r0, #0
 80018da:	454f      	cmp	r7, r9
 80018dc:	d2d7      	bcs.n	800188e <__gedf2+0x52>
 80018de:	2900      	cmp	r1, #0
 80018e0:	d0e2      	beq.n	80018a8 <__gedf2+0x6c>
 80018e2:	0008      	movs	r0, r1
 80018e4:	e7d3      	b.n	800188e <__gedf2+0x52>
 80018e6:	4243      	negs	r3, r0
 80018e8:	4158      	adcs	r0, r3
 80018ea:	0040      	lsls	r0, r0, #1
 80018ec:	3801      	subs	r0, #1
 80018ee:	e7ce      	b.n	800188e <__gedf2+0x52>
 80018f0:	2002      	movs	r0, #2
 80018f2:	4240      	negs	r0, r0
 80018f4:	e7cb      	b.n	800188e <__gedf2+0x52>
 80018f6:	45c4      	cmp	ip, r8
 80018f8:	d8c5      	bhi.n	8001886 <__gedf2+0x4a>
 80018fa:	2000      	movs	r0, #0
 80018fc:	45c4      	cmp	ip, r8
 80018fe:	d2c6      	bcs.n	800188e <__gedf2+0x52>
 8001900:	e7ed      	b.n	80018de <__gedf2+0xa2>
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	000007ff 	.word	0x000007ff

08001908 <__ledf2>:
 8001908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190a:	4647      	mov	r7, r8
 800190c:	46ce      	mov	lr, r9
 800190e:	0004      	movs	r4, r0
 8001910:	0018      	movs	r0, r3
 8001912:	0016      	movs	r6, r2
 8001914:	031b      	lsls	r3, r3, #12
 8001916:	0b1b      	lsrs	r3, r3, #12
 8001918:	4d2c      	ldr	r5, [pc, #176]	; (80019cc <__ledf2+0xc4>)
 800191a:	004a      	lsls	r2, r1, #1
 800191c:	4699      	mov	r9, r3
 800191e:	b580      	push	{r7, lr}
 8001920:	0043      	lsls	r3, r0, #1
 8001922:	030f      	lsls	r7, r1, #12
 8001924:	46a4      	mov	ip, r4
 8001926:	46b0      	mov	r8, r6
 8001928:	0b3f      	lsrs	r7, r7, #12
 800192a:	0d52      	lsrs	r2, r2, #21
 800192c:	0fc9      	lsrs	r1, r1, #31
 800192e:	0d5b      	lsrs	r3, r3, #21
 8001930:	0fc0      	lsrs	r0, r0, #31
 8001932:	42aa      	cmp	r2, r5
 8001934:	d00d      	beq.n	8001952 <__ledf2+0x4a>
 8001936:	42ab      	cmp	r3, r5
 8001938:	d010      	beq.n	800195c <__ledf2+0x54>
 800193a:	2a00      	cmp	r2, #0
 800193c:	d127      	bne.n	800198e <__ledf2+0x86>
 800193e:	433c      	orrs	r4, r7
 8001940:	2b00      	cmp	r3, #0
 8001942:	d111      	bne.n	8001968 <__ledf2+0x60>
 8001944:	464d      	mov	r5, r9
 8001946:	432e      	orrs	r6, r5
 8001948:	d10e      	bne.n	8001968 <__ledf2+0x60>
 800194a:	2000      	movs	r0, #0
 800194c:	2c00      	cmp	r4, #0
 800194e:	d015      	beq.n	800197c <__ledf2+0x74>
 8001950:	e00e      	b.n	8001970 <__ledf2+0x68>
 8001952:	003d      	movs	r5, r7
 8001954:	4325      	orrs	r5, r4
 8001956:	d110      	bne.n	800197a <__ledf2+0x72>
 8001958:	4293      	cmp	r3, r2
 800195a:	d118      	bne.n	800198e <__ledf2+0x86>
 800195c:	464d      	mov	r5, r9
 800195e:	432e      	orrs	r6, r5
 8001960:	d10b      	bne.n	800197a <__ledf2+0x72>
 8001962:	2a00      	cmp	r2, #0
 8001964:	d102      	bne.n	800196c <__ledf2+0x64>
 8001966:	433c      	orrs	r4, r7
 8001968:	2c00      	cmp	r4, #0
 800196a:	d00b      	beq.n	8001984 <__ledf2+0x7c>
 800196c:	4281      	cmp	r1, r0
 800196e:	d014      	beq.n	800199a <__ledf2+0x92>
 8001970:	2002      	movs	r0, #2
 8001972:	3901      	subs	r1, #1
 8001974:	4008      	ands	r0, r1
 8001976:	3801      	subs	r0, #1
 8001978:	e000      	b.n	800197c <__ledf2+0x74>
 800197a:	2002      	movs	r0, #2
 800197c:	bcc0      	pop	{r6, r7}
 800197e:	46b9      	mov	r9, r7
 8001980:	46b0      	mov	r8, r6
 8001982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001984:	2800      	cmp	r0, #0
 8001986:	d1f9      	bne.n	800197c <__ledf2+0x74>
 8001988:	2001      	movs	r0, #1
 800198a:	4240      	negs	r0, r0
 800198c:	e7f6      	b.n	800197c <__ledf2+0x74>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ec      	bne.n	800196c <__ledf2+0x64>
 8001992:	464c      	mov	r4, r9
 8001994:	4326      	orrs	r6, r4
 8001996:	d1e9      	bne.n	800196c <__ledf2+0x64>
 8001998:	e7ea      	b.n	8001970 <__ledf2+0x68>
 800199a:	429a      	cmp	r2, r3
 800199c:	dd04      	ble.n	80019a8 <__ledf2+0xa0>
 800199e:	4243      	negs	r3, r0
 80019a0:	4158      	adcs	r0, r3
 80019a2:	0040      	lsls	r0, r0, #1
 80019a4:	3801      	subs	r0, #1
 80019a6:	e7e9      	b.n	800197c <__ledf2+0x74>
 80019a8:	429a      	cmp	r2, r3
 80019aa:	dbeb      	blt.n	8001984 <__ledf2+0x7c>
 80019ac:	454f      	cmp	r7, r9
 80019ae:	d8df      	bhi.n	8001970 <__ledf2+0x68>
 80019b0:	d006      	beq.n	80019c0 <__ledf2+0xb8>
 80019b2:	2000      	movs	r0, #0
 80019b4:	454f      	cmp	r7, r9
 80019b6:	d2e1      	bcs.n	800197c <__ledf2+0x74>
 80019b8:	2900      	cmp	r1, #0
 80019ba:	d0e5      	beq.n	8001988 <__ledf2+0x80>
 80019bc:	0008      	movs	r0, r1
 80019be:	e7dd      	b.n	800197c <__ledf2+0x74>
 80019c0:	45c4      	cmp	ip, r8
 80019c2:	d8d5      	bhi.n	8001970 <__ledf2+0x68>
 80019c4:	2000      	movs	r0, #0
 80019c6:	45c4      	cmp	ip, r8
 80019c8:	d2d8      	bcs.n	800197c <__ledf2+0x74>
 80019ca:	e7f5      	b.n	80019b8 <__ledf2+0xb0>
 80019cc:	000007ff 	.word	0x000007ff

080019d0 <__aeabi_dmul>:
 80019d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d2:	4657      	mov	r7, sl
 80019d4:	464e      	mov	r6, r9
 80019d6:	4645      	mov	r5, r8
 80019d8:	46de      	mov	lr, fp
 80019da:	b5e0      	push	{r5, r6, r7, lr}
 80019dc:	4698      	mov	r8, r3
 80019de:	030c      	lsls	r4, r1, #12
 80019e0:	004b      	lsls	r3, r1, #1
 80019e2:	0006      	movs	r6, r0
 80019e4:	4692      	mov	sl, r2
 80019e6:	b087      	sub	sp, #28
 80019e8:	0b24      	lsrs	r4, r4, #12
 80019ea:	0d5b      	lsrs	r3, r3, #21
 80019ec:	0fcf      	lsrs	r7, r1, #31
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dmul+0x24>
 80019f2:	e15c      	b.n	8001cae <__aeabi_dmul+0x2de>
 80019f4:	4ad9      	ldr	r2, [pc, #868]	; (8001d5c <__aeabi_dmul+0x38c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d100      	bne.n	80019fc <__aeabi_dmul+0x2c>
 80019fa:	e175      	b.n	8001ce8 <__aeabi_dmul+0x318>
 80019fc:	0f42      	lsrs	r2, r0, #29
 80019fe:	00e4      	lsls	r4, r4, #3
 8001a00:	4314      	orrs	r4, r2
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	0412      	lsls	r2, r2, #16
 8001a06:	4314      	orrs	r4, r2
 8001a08:	4ad5      	ldr	r2, [pc, #852]	; (8001d60 <__aeabi_dmul+0x390>)
 8001a0a:	00c5      	lsls	r5, r0, #3
 8001a0c:	4694      	mov	ip, r2
 8001a0e:	4463      	add	r3, ip
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	4699      	mov	r9, r3
 8001a16:	469b      	mov	fp, r3
 8001a18:	4643      	mov	r3, r8
 8001a1a:	4642      	mov	r2, r8
 8001a1c:	031e      	lsls	r6, r3, #12
 8001a1e:	0fd2      	lsrs	r2, r2, #31
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4650      	mov	r0, sl
 8001a24:	4690      	mov	r8, r2
 8001a26:	0b36      	lsrs	r6, r6, #12
 8001a28:	0d5b      	lsrs	r3, r3, #21
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dmul+0x5e>
 8001a2c:	e120      	b.n	8001c70 <__aeabi_dmul+0x2a0>
 8001a2e:	4acb      	ldr	r2, [pc, #812]	; (8001d5c <__aeabi_dmul+0x38c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dmul+0x66>
 8001a34:	e162      	b.n	8001cfc <__aeabi_dmul+0x32c>
 8001a36:	49ca      	ldr	r1, [pc, #808]	; (8001d60 <__aeabi_dmul+0x390>)
 8001a38:	0f42      	lsrs	r2, r0, #29
 8001a3a:	468c      	mov	ip, r1
 8001a3c:	9900      	ldr	r1, [sp, #0]
 8001a3e:	4463      	add	r3, ip
 8001a40:	00f6      	lsls	r6, r6, #3
 8001a42:	468c      	mov	ip, r1
 8001a44:	4316      	orrs	r6, r2
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	449c      	add	ip, r3
 8001a4a:	0412      	lsls	r2, r2, #16
 8001a4c:	4663      	mov	r3, ip
 8001a4e:	4316      	orrs	r6, r2
 8001a50:	00c2      	lsls	r2, r0, #3
 8001a52:	2000      	movs	r0, #0
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	9900      	ldr	r1, [sp, #0]
 8001a58:	4643      	mov	r3, r8
 8001a5a:	3101      	adds	r1, #1
 8001a5c:	468c      	mov	ip, r1
 8001a5e:	4649      	mov	r1, r9
 8001a60:	407b      	eors	r3, r7
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	290f      	cmp	r1, #15
 8001a66:	d826      	bhi.n	8001ab6 <__aeabi_dmul+0xe6>
 8001a68:	4bbe      	ldr	r3, [pc, #760]	; (8001d64 <__aeabi_dmul+0x394>)
 8001a6a:	0089      	lsls	r1, r1, #2
 8001a6c:	5859      	ldr	r1, [r3, r1]
 8001a6e:	468f      	mov	pc, r1
 8001a70:	4643      	mov	r3, r8
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	0034      	movs	r4, r6
 8001a76:	0015      	movs	r5, r2
 8001a78:	4683      	mov	fp, r0
 8001a7a:	465b      	mov	r3, fp
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d016      	beq.n	8001aae <__aeabi_dmul+0xde>
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dmul+0xb6>
 8001a84:	e203      	b.n	8001e8e <__aeabi_dmul+0x4be>
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d000      	beq.n	8001a8c <__aeabi_dmul+0xbc>
 8001a8a:	e0cd      	b.n	8001c28 <__aeabi_dmul+0x258>
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2400      	movs	r4, #0
 8001a90:	2500      	movs	r5, #0
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	0512      	lsls	r2, r2, #20
 8001a96:	4322      	orrs	r2, r4
 8001a98:	07db      	lsls	r3, r3, #31
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	0028      	movs	r0, r5
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	b007      	add	sp, #28
 8001aa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa4:	46bb      	mov	fp, r7
 8001aa6:	46b2      	mov	sl, r6
 8001aa8:	46a9      	mov	r9, r5
 8001aaa:	46a0      	mov	r8, r4
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	2400      	movs	r4, #0
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	4aaa      	ldr	r2, [pc, #680]	; (8001d5c <__aeabi_dmul+0x38c>)
 8001ab4:	e7ed      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001ab6:	0c28      	lsrs	r0, r5, #16
 8001ab8:	042d      	lsls	r5, r5, #16
 8001aba:	0c2d      	lsrs	r5, r5, #16
 8001abc:	002b      	movs	r3, r5
 8001abe:	0c11      	lsrs	r1, r2, #16
 8001ac0:	0412      	lsls	r2, r2, #16
 8001ac2:	0c12      	lsrs	r2, r2, #16
 8001ac4:	4353      	muls	r3, r2
 8001ac6:	4698      	mov	r8, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	002f      	movs	r7, r5
 8001acc:	4343      	muls	r3, r0
 8001ace:	4699      	mov	r9, r3
 8001ad0:	434f      	muls	r7, r1
 8001ad2:	444f      	add	r7, r9
 8001ad4:	46bb      	mov	fp, r7
 8001ad6:	4647      	mov	r7, r8
 8001ad8:	000b      	movs	r3, r1
 8001ada:	0c3f      	lsrs	r7, r7, #16
 8001adc:	46ba      	mov	sl, r7
 8001ade:	4343      	muls	r3, r0
 8001ae0:	44da      	add	sl, fp
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	45d1      	cmp	r9, sl
 8001ae6:	d904      	bls.n	8001af2 <__aeabi_dmul+0x122>
 8001ae8:	2780      	movs	r7, #128	; 0x80
 8001aea:	027f      	lsls	r7, r7, #9
 8001aec:	46b9      	mov	r9, r7
 8001aee:	444b      	add	r3, r9
 8001af0:	9302      	str	r3, [sp, #8]
 8001af2:	4653      	mov	r3, sl
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	469b      	mov	fp, r3
 8001af8:	4653      	mov	r3, sl
 8001afa:	041f      	lsls	r7, r3, #16
 8001afc:	4643      	mov	r3, r8
 8001afe:	041b      	lsls	r3, r3, #16
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	4698      	mov	r8, r3
 8001b04:	003b      	movs	r3, r7
 8001b06:	4443      	add	r3, r8
 8001b08:	9304      	str	r3, [sp, #16]
 8001b0a:	0c33      	lsrs	r3, r6, #16
 8001b0c:	0436      	lsls	r6, r6, #16
 8001b0e:	0c36      	lsrs	r6, r6, #16
 8001b10:	4698      	mov	r8, r3
 8001b12:	0033      	movs	r3, r6
 8001b14:	4343      	muls	r3, r0
 8001b16:	4699      	mov	r9, r3
 8001b18:	4643      	mov	r3, r8
 8001b1a:	4343      	muls	r3, r0
 8001b1c:	002f      	movs	r7, r5
 8001b1e:	469a      	mov	sl, r3
 8001b20:	4643      	mov	r3, r8
 8001b22:	4377      	muls	r7, r6
 8001b24:	435d      	muls	r5, r3
 8001b26:	0c38      	lsrs	r0, r7, #16
 8001b28:	444d      	add	r5, r9
 8001b2a:	1945      	adds	r5, r0, r5
 8001b2c:	45a9      	cmp	r9, r5
 8001b2e:	d903      	bls.n	8001b38 <__aeabi_dmul+0x168>
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	025b      	lsls	r3, r3, #9
 8001b34:	4699      	mov	r9, r3
 8001b36:	44ca      	add	sl, r9
 8001b38:	043f      	lsls	r7, r7, #16
 8001b3a:	0c28      	lsrs	r0, r5, #16
 8001b3c:	0c3f      	lsrs	r7, r7, #16
 8001b3e:	042d      	lsls	r5, r5, #16
 8001b40:	19ed      	adds	r5, r5, r7
 8001b42:	0c27      	lsrs	r7, r4, #16
 8001b44:	0424      	lsls	r4, r4, #16
 8001b46:	0c24      	lsrs	r4, r4, #16
 8001b48:	0003      	movs	r3, r0
 8001b4a:	0020      	movs	r0, r4
 8001b4c:	4350      	muls	r0, r2
 8001b4e:	437a      	muls	r2, r7
 8001b50:	4691      	mov	r9, r2
 8001b52:	003a      	movs	r2, r7
 8001b54:	4453      	add	r3, sl
 8001b56:	9305      	str	r3, [sp, #20]
 8001b58:	0c03      	lsrs	r3, r0, #16
 8001b5a:	469a      	mov	sl, r3
 8001b5c:	434a      	muls	r2, r1
 8001b5e:	4361      	muls	r1, r4
 8001b60:	4449      	add	r1, r9
 8001b62:	4451      	add	r1, sl
 8001b64:	44ab      	add	fp, r5
 8001b66:	4589      	cmp	r9, r1
 8001b68:	d903      	bls.n	8001b72 <__aeabi_dmul+0x1a2>
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	025b      	lsls	r3, r3, #9
 8001b6e:	4699      	mov	r9, r3
 8001b70:	444a      	add	r2, r9
 8001b72:	0400      	lsls	r0, r0, #16
 8001b74:	0c0b      	lsrs	r3, r1, #16
 8001b76:	0c00      	lsrs	r0, r0, #16
 8001b78:	0409      	lsls	r1, r1, #16
 8001b7a:	1809      	adds	r1, r1, r0
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	4699      	mov	r9, r3
 8001b80:	4643      	mov	r3, r8
 8001b82:	4370      	muls	r0, r6
 8001b84:	435c      	muls	r4, r3
 8001b86:	437e      	muls	r6, r7
 8001b88:	435f      	muls	r7, r3
 8001b8a:	0c03      	lsrs	r3, r0, #16
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	19a4      	adds	r4, r4, r6
 8001b90:	4444      	add	r4, r8
 8001b92:	444a      	add	r2, r9
 8001b94:	9703      	str	r7, [sp, #12]
 8001b96:	42a6      	cmp	r6, r4
 8001b98:	d904      	bls.n	8001ba4 <__aeabi_dmul+0x1d4>
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	025b      	lsls	r3, r3, #9
 8001b9e:	4698      	mov	r8, r3
 8001ba0:	4447      	add	r7, r8
 8001ba2:	9703      	str	r7, [sp, #12]
 8001ba4:	0423      	lsls	r3, r4, #16
 8001ba6:	9e02      	ldr	r6, [sp, #8]
 8001ba8:	469a      	mov	sl, r3
 8001baa:	9b05      	ldr	r3, [sp, #20]
 8001bac:	445e      	add	r6, fp
 8001bae:	4698      	mov	r8, r3
 8001bb0:	42ae      	cmp	r6, r5
 8001bb2:	41ad      	sbcs	r5, r5
 8001bb4:	1876      	adds	r6, r6, r1
 8001bb6:	428e      	cmp	r6, r1
 8001bb8:	4189      	sbcs	r1, r1
 8001bba:	0400      	lsls	r0, r0, #16
 8001bbc:	0c00      	lsrs	r0, r0, #16
 8001bbe:	4450      	add	r0, sl
 8001bc0:	4440      	add	r0, r8
 8001bc2:	426d      	negs	r5, r5
 8001bc4:	1947      	adds	r7, r0, r5
 8001bc6:	46b8      	mov	r8, r7
 8001bc8:	4693      	mov	fp, r2
 8001bca:	4249      	negs	r1, r1
 8001bcc:	4689      	mov	r9, r1
 8001bce:	44c3      	add	fp, r8
 8001bd0:	44d9      	add	r9, fp
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	4180      	sbcs	r0, r0
 8001bd6:	45a8      	cmp	r8, r5
 8001bd8:	41ad      	sbcs	r5, r5
 8001bda:	4593      	cmp	fp, r2
 8001bdc:	4192      	sbcs	r2, r2
 8001bde:	4589      	cmp	r9, r1
 8001be0:	4189      	sbcs	r1, r1
 8001be2:	426d      	negs	r5, r5
 8001be4:	4240      	negs	r0, r0
 8001be6:	4328      	orrs	r0, r5
 8001be8:	0c24      	lsrs	r4, r4, #16
 8001bea:	4252      	negs	r2, r2
 8001bec:	4249      	negs	r1, r1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	9b03      	ldr	r3, [sp, #12]
 8001bf2:	1900      	adds	r0, r0, r4
 8001bf4:	1880      	adds	r0, r0, r2
 8001bf6:	18c7      	adds	r7, r0, r3
 8001bf8:	464b      	mov	r3, r9
 8001bfa:	0ddc      	lsrs	r4, r3, #23
 8001bfc:	9b04      	ldr	r3, [sp, #16]
 8001bfe:	0275      	lsls	r5, r6, #9
 8001c00:	431d      	orrs	r5, r3
 8001c02:	1e6a      	subs	r2, r5, #1
 8001c04:	4195      	sbcs	r5, r2
 8001c06:	464b      	mov	r3, r9
 8001c08:	0df6      	lsrs	r6, r6, #23
 8001c0a:	027f      	lsls	r7, r7, #9
 8001c0c:	4335      	orrs	r5, r6
 8001c0e:	025a      	lsls	r2, r3, #9
 8001c10:	433c      	orrs	r4, r7
 8001c12:	4315      	orrs	r5, r2
 8001c14:	01fb      	lsls	r3, r7, #7
 8001c16:	d400      	bmi.n	8001c1a <__aeabi_dmul+0x24a>
 8001c18:	e11c      	b.n	8001e54 <__aeabi_dmul+0x484>
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	086a      	lsrs	r2, r5, #1
 8001c1e:	400d      	ands	r5, r1
 8001c20:	4315      	orrs	r5, r2
 8001c22:	07e2      	lsls	r2, r4, #31
 8001c24:	4315      	orrs	r5, r2
 8001c26:	0864      	lsrs	r4, r4, #1
 8001c28:	494f      	ldr	r1, [pc, #316]	; (8001d68 <__aeabi_dmul+0x398>)
 8001c2a:	4461      	add	r1, ip
 8001c2c:	2900      	cmp	r1, #0
 8001c2e:	dc00      	bgt.n	8001c32 <__aeabi_dmul+0x262>
 8001c30:	e0b0      	b.n	8001d94 <__aeabi_dmul+0x3c4>
 8001c32:	076b      	lsls	r3, r5, #29
 8001c34:	d009      	beq.n	8001c4a <__aeabi_dmul+0x27a>
 8001c36:	220f      	movs	r2, #15
 8001c38:	402a      	ands	r2, r5
 8001c3a:	2a04      	cmp	r2, #4
 8001c3c:	d005      	beq.n	8001c4a <__aeabi_dmul+0x27a>
 8001c3e:	1d2a      	adds	r2, r5, #4
 8001c40:	42aa      	cmp	r2, r5
 8001c42:	41ad      	sbcs	r5, r5
 8001c44:	426d      	negs	r5, r5
 8001c46:	1964      	adds	r4, r4, r5
 8001c48:	0015      	movs	r5, r2
 8001c4a:	01e3      	lsls	r3, r4, #7
 8001c4c:	d504      	bpl.n	8001c58 <__aeabi_dmul+0x288>
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	4a46      	ldr	r2, [pc, #280]	; (8001d6c <__aeabi_dmul+0x39c>)
 8001c52:	00c9      	lsls	r1, r1, #3
 8001c54:	4014      	ands	r4, r2
 8001c56:	4461      	add	r1, ip
 8001c58:	4a45      	ldr	r2, [pc, #276]	; (8001d70 <__aeabi_dmul+0x3a0>)
 8001c5a:	4291      	cmp	r1, r2
 8001c5c:	dd00      	ble.n	8001c60 <__aeabi_dmul+0x290>
 8001c5e:	e726      	b.n	8001aae <__aeabi_dmul+0xde>
 8001c60:	0762      	lsls	r2, r4, #29
 8001c62:	08ed      	lsrs	r5, r5, #3
 8001c64:	0264      	lsls	r4, r4, #9
 8001c66:	0549      	lsls	r1, r1, #21
 8001c68:	4315      	orrs	r5, r2
 8001c6a:	0b24      	lsrs	r4, r4, #12
 8001c6c:	0d4a      	lsrs	r2, r1, #21
 8001c6e:	e710      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001c70:	4652      	mov	r2, sl
 8001c72:	4332      	orrs	r2, r6
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dmul+0x2a8>
 8001c76:	e07f      	b.n	8001d78 <__aeabi_dmul+0x3a8>
 8001c78:	2e00      	cmp	r6, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_dmul+0x2ae>
 8001c7c:	e0dc      	b.n	8001e38 <__aeabi_dmul+0x468>
 8001c7e:	0030      	movs	r0, r6
 8001c80:	f000 fd78 	bl	8002774 <__clzsi2>
 8001c84:	0002      	movs	r2, r0
 8001c86:	3a0b      	subs	r2, #11
 8001c88:	231d      	movs	r3, #29
 8001c8a:	0001      	movs	r1, r0
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	4652      	mov	r2, sl
 8001c90:	3908      	subs	r1, #8
 8001c92:	40da      	lsrs	r2, r3
 8001c94:	408e      	lsls	r6, r1
 8001c96:	4316      	orrs	r6, r2
 8001c98:	4652      	mov	r2, sl
 8001c9a:	408a      	lsls	r2, r1
 8001c9c:	9b00      	ldr	r3, [sp, #0]
 8001c9e:	4935      	ldr	r1, [pc, #212]	; (8001d74 <__aeabi_dmul+0x3a4>)
 8001ca0:	1a18      	subs	r0, r3, r0
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	468c      	mov	ip, r1
 8001ca6:	4463      	add	r3, ip
 8001ca8:	2000      	movs	r0, #0
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	e6d3      	b.n	8001a56 <__aeabi_dmul+0x86>
 8001cae:	0025      	movs	r5, r4
 8001cb0:	4305      	orrs	r5, r0
 8001cb2:	d04a      	beq.n	8001d4a <__aeabi_dmul+0x37a>
 8001cb4:	2c00      	cmp	r4, #0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dmul+0x2ea>
 8001cb8:	e0b0      	b.n	8001e1c <__aeabi_dmul+0x44c>
 8001cba:	0020      	movs	r0, r4
 8001cbc:	f000 fd5a 	bl	8002774 <__clzsi2>
 8001cc0:	0001      	movs	r1, r0
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	390b      	subs	r1, #11
 8001cc6:	231d      	movs	r3, #29
 8001cc8:	0010      	movs	r0, r2
 8001cca:	1a5b      	subs	r3, r3, r1
 8001ccc:	0031      	movs	r1, r6
 8001cce:	0035      	movs	r5, r6
 8001cd0:	3808      	subs	r0, #8
 8001cd2:	4084      	lsls	r4, r0
 8001cd4:	40d9      	lsrs	r1, r3
 8001cd6:	4085      	lsls	r5, r0
 8001cd8:	430c      	orrs	r4, r1
 8001cda:	4826      	ldr	r0, [pc, #152]	; (8001d74 <__aeabi_dmul+0x3a4>)
 8001cdc:	1a83      	subs	r3, r0, r2
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	4699      	mov	r9, r3
 8001ce4:	469b      	mov	fp, r3
 8001ce6:	e697      	b.n	8001a18 <__aeabi_dmul+0x48>
 8001ce8:	0005      	movs	r5, r0
 8001cea:	4325      	orrs	r5, r4
 8001cec:	d126      	bne.n	8001d3c <__aeabi_dmul+0x36c>
 8001cee:	2208      	movs	r2, #8
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	2400      	movs	r4, #0
 8001cf6:	4691      	mov	r9, r2
 8001cf8:	469b      	mov	fp, r3
 8001cfa:	e68d      	b.n	8001a18 <__aeabi_dmul+0x48>
 8001cfc:	4652      	mov	r2, sl
 8001cfe:	9b00      	ldr	r3, [sp, #0]
 8001d00:	4332      	orrs	r2, r6
 8001d02:	d110      	bne.n	8001d26 <__aeabi_dmul+0x356>
 8001d04:	4915      	ldr	r1, [pc, #84]	; (8001d5c <__aeabi_dmul+0x38c>)
 8001d06:	2600      	movs	r6, #0
 8001d08:	468c      	mov	ip, r1
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	4319      	orrs	r1, r3
 8001d14:	4689      	mov	r9, r1
 8001d16:	2002      	movs	r0, #2
 8001d18:	e69d      	b.n	8001a56 <__aeabi_dmul+0x86>
 8001d1a:	465b      	mov	r3, fp
 8001d1c:	9701      	str	r7, [sp, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d000      	beq.n	8001d24 <__aeabi_dmul+0x354>
 8001d22:	e6ad      	b.n	8001a80 <__aeabi_dmul+0xb0>
 8001d24:	e6c3      	b.n	8001aae <__aeabi_dmul+0xde>
 8001d26:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <__aeabi_dmul+0x38c>)
 8001d28:	2003      	movs	r0, #3
 8001d2a:	4694      	mov	ip, r2
 8001d2c:	4463      	add	r3, ip
 8001d2e:	464a      	mov	r2, r9
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2303      	movs	r3, #3
 8001d34:	431a      	orrs	r2, r3
 8001d36:	4691      	mov	r9, r2
 8001d38:	4652      	mov	r2, sl
 8001d3a:	e68c      	b.n	8001a56 <__aeabi_dmul+0x86>
 8001d3c:	220c      	movs	r2, #12
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2303      	movs	r3, #3
 8001d42:	0005      	movs	r5, r0
 8001d44:	4691      	mov	r9, r2
 8001d46:	469b      	mov	fp, r3
 8001d48:	e666      	b.n	8001a18 <__aeabi_dmul+0x48>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	2400      	movs	r4, #0
 8001d56:	469b      	mov	fp, r3
 8001d58:	e65e      	b.n	8001a18 <__aeabi_dmul+0x48>
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	000007ff 	.word	0x000007ff
 8001d60:	fffffc01 	.word	0xfffffc01
 8001d64:	0801e8c8 	.word	0x0801e8c8
 8001d68:	000003ff 	.word	0x000003ff
 8001d6c:	feffffff 	.word	0xfeffffff
 8001d70:	000007fe 	.word	0x000007fe
 8001d74:	fffffc0d 	.word	0xfffffc0d
 8001d78:	4649      	mov	r1, r9
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	4319      	orrs	r1, r3
 8001d7e:	4689      	mov	r9, r1
 8001d80:	2600      	movs	r6, #0
 8001d82:	2001      	movs	r0, #1
 8001d84:	e667      	b.n	8001a56 <__aeabi_dmul+0x86>
 8001d86:	2300      	movs	r3, #0
 8001d88:	2480      	movs	r4, #128	; 0x80
 8001d8a:	2500      	movs	r5, #0
 8001d8c:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <__aeabi_dmul+0x4cc>)
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	0324      	lsls	r4, r4, #12
 8001d92:	e67e      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001d94:	2001      	movs	r0, #1
 8001d96:	1a40      	subs	r0, r0, r1
 8001d98:	2838      	cmp	r0, #56	; 0x38
 8001d9a:	dd00      	ble.n	8001d9e <__aeabi_dmul+0x3ce>
 8001d9c:	e676      	b.n	8001a8c <__aeabi_dmul+0xbc>
 8001d9e:	281f      	cmp	r0, #31
 8001da0:	dd5b      	ble.n	8001e5a <__aeabi_dmul+0x48a>
 8001da2:	221f      	movs	r2, #31
 8001da4:	0023      	movs	r3, r4
 8001da6:	4252      	negs	r2, r2
 8001da8:	1a51      	subs	r1, r2, r1
 8001daa:	40cb      	lsrs	r3, r1
 8001dac:	0019      	movs	r1, r3
 8001dae:	2820      	cmp	r0, #32
 8001db0:	d003      	beq.n	8001dba <__aeabi_dmul+0x3ea>
 8001db2:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <__aeabi_dmul+0x4d0>)
 8001db4:	4462      	add	r2, ip
 8001db6:	4094      	lsls	r4, r2
 8001db8:	4325      	orrs	r5, r4
 8001dba:	1e6a      	subs	r2, r5, #1
 8001dbc:	4195      	sbcs	r5, r2
 8001dbe:	002a      	movs	r2, r5
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	2107      	movs	r1, #7
 8001dc4:	000d      	movs	r5, r1
 8001dc6:	2400      	movs	r4, #0
 8001dc8:	4015      	ands	r5, r2
 8001dca:	4211      	tst	r1, r2
 8001dcc:	d05b      	beq.n	8001e86 <__aeabi_dmul+0x4b6>
 8001dce:	210f      	movs	r1, #15
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	4011      	ands	r1, r2
 8001dd4:	2904      	cmp	r1, #4
 8001dd6:	d053      	beq.n	8001e80 <__aeabi_dmul+0x4b0>
 8001dd8:	1d11      	adds	r1, r2, #4
 8001dda:	4291      	cmp	r1, r2
 8001ddc:	4192      	sbcs	r2, r2
 8001dde:	4252      	negs	r2, r2
 8001de0:	18a4      	adds	r4, r4, r2
 8001de2:	000a      	movs	r2, r1
 8001de4:	0223      	lsls	r3, r4, #8
 8001de6:	d54b      	bpl.n	8001e80 <__aeabi_dmul+0x4b0>
 8001de8:	2201      	movs	r2, #1
 8001dea:	2400      	movs	r4, #0
 8001dec:	2500      	movs	r5, #0
 8001dee:	e650      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	031b      	lsls	r3, r3, #12
 8001df4:	421c      	tst	r4, r3
 8001df6:	d009      	beq.n	8001e0c <__aeabi_dmul+0x43c>
 8001df8:	421e      	tst	r6, r3
 8001dfa:	d107      	bne.n	8001e0c <__aeabi_dmul+0x43c>
 8001dfc:	4333      	orrs	r3, r6
 8001dfe:	031c      	lsls	r4, r3, #12
 8001e00:	4643      	mov	r3, r8
 8001e02:	0015      	movs	r5, r2
 8001e04:	0b24      	lsrs	r4, r4, #12
 8001e06:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <__aeabi_dmul+0x4cc>)
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	e642      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	0312      	lsls	r2, r2, #12
 8001e10:	4314      	orrs	r4, r2
 8001e12:	0324      	lsls	r4, r4, #12
 8001e14:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <__aeabi_dmul+0x4cc>)
 8001e16:	0b24      	lsrs	r4, r4, #12
 8001e18:	9701      	str	r7, [sp, #4]
 8001e1a:	e63a      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001e1c:	f000 fcaa 	bl	8002774 <__clzsi2>
 8001e20:	0001      	movs	r1, r0
 8001e22:	0002      	movs	r2, r0
 8001e24:	3115      	adds	r1, #21
 8001e26:	3220      	adds	r2, #32
 8001e28:	291c      	cmp	r1, #28
 8001e2a:	dc00      	bgt.n	8001e2e <__aeabi_dmul+0x45e>
 8001e2c:	e74b      	b.n	8001cc6 <__aeabi_dmul+0x2f6>
 8001e2e:	0034      	movs	r4, r6
 8001e30:	3808      	subs	r0, #8
 8001e32:	2500      	movs	r5, #0
 8001e34:	4084      	lsls	r4, r0
 8001e36:	e750      	b.n	8001cda <__aeabi_dmul+0x30a>
 8001e38:	f000 fc9c 	bl	8002774 <__clzsi2>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	001a      	movs	r2, r3
 8001e40:	3215      	adds	r2, #21
 8001e42:	3020      	adds	r0, #32
 8001e44:	2a1c      	cmp	r2, #28
 8001e46:	dc00      	bgt.n	8001e4a <__aeabi_dmul+0x47a>
 8001e48:	e71e      	b.n	8001c88 <__aeabi_dmul+0x2b8>
 8001e4a:	4656      	mov	r6, sl
 8001e4c:	3b08      	subs	r3, #8
 8001e4e:	2200      	movs	r2, #0
 8001e50:	409e      	lsls	r6, r3
 8001e52:	e723      	b.n	8001c9c <__aeabi_dmul+0x2cc>
 8001e54:	9b00      	ldr	r3, [sp, #0]
 8001e56:	469c      	mov	ip, r3
 8001e58:	e6e6      	b.n	8001c28 <__aeabi_dmul+0x258>
 8001e5a:	4912      	ldr	r1, [pc, #72]	; (8001ea4 <__aeabi_dmul+0x4d4>)
 8001e5c:	0022      	movs	r2, r4
 8001e5e:	4461      	add	r1, ip
 8001e60:	002e      	movs	r6, r5
 8001e62:	408d      	lsls	r5, r1
 8001e64:	408a      	lsls	r2, r1
 8001e66:	40c6      	lsrs	r6, r0
 8001e68:	1e69      	subs	r1, r5, #1
 8001e6a:	418d      	sbcs	r5, r1
 8001e6c:	4332      	orrs	r2, r6
 8001e6e:	432a      	orrs	r2, r5
 8001e70:	40c4      	lsrs	r4, r0
 8001e72:	0753      	lsls	r3, r2, #29
 8001e74:	d0b6      	beq.n	8001de4 <__aeabi_dmul+0x414>
 8001e76:	210f      	movs	r1, #15
 8001e78:	4011      	ands	r1, r2
 8001e7a:	2904      	cmp	r1, #4
 8001e7c:	d1ac      	bne.n	8001dd8 <__aeabi_dmul+0x408>
 8001e7e:	e7b1      	b.n	8001de4 <__aeabi_dmul+0x414>
 8001e80:	0765      	lsls	r5, r4, #29
 8001e82:	0264      	lsls	r4, r4, #9
 8001e84:	0b24      	lsrs	r4, r4, #12
 8001e86:	08d2      	lsrs	r2, r2, #3
 8001e88:	4315      	orrs	r5, r2
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	e601      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	0312      	lsls	r2, r2, #12
 8001e92:	4314      	orrs	r4, r2
 8001e94:	0324      	lsls	r4, r4, #12
 8001e96:	4a01      	ldr	r2, [pc, #4]	; (8001e9c <__aeabi_dmul+0x4cc>)
 8001e98:	0b24      	lsrs	r4, r4, #12
 8001e9a:	e5fa      	b.n	8001a92 <__aeabi_dmul+0xc2>
 8001e9c:	000007ff 	.word	0x000007ff
 8001ea0:	0000043e 	.word	0x0000043e
 8001ea4:	0000041e 	.word	0x0000041e

08001ea8 <__aeabi_dsub>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	4657      	mov	r7, sl
 8001eac:	464e      	mov	r6, r9
 8001eae:	4645      	mov	r5, r8
 8001eb0:	46de      	mov	lr, fp
 8001eb2:	b5e0      	push	{r5, r6, r7, lr}
 8001eb4:	001e      	movs	r6, r3
 8001eb6:	0017      	movs	r7, r2
 8001eb8:	004a      	lsls	r2, r1, #1
 8001eba:	030b      	lsls	r3, r1, #12
 8001ebc:	0d52      	lsrs	r2, r2, #21
 8001ebe:	0a5b      	lsrs	r3, r3, #9
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	0f42      	lsrs	r2, r0, #29
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	0fcd      	lsrs	r5, r1, #31
 8001ec8:	4ccd      	ldr	r4, [pc, #820]	; (8002200 <__aeabi_dsub+0x358>)
 8001eca:	0331      	lsls	r1, r6, #12
 8001ecc:	00c3      	lsls	r3, r0, #3
 8001ece:	4694      	mov	ip, r2
 8001ed0:	0070      	lsls	r0, r6, #1
 8001ed2:	0f7a      	lsrs	r2, r7, #29
 8001ed4:	0a49      	lsrs	r1, r1, #9
 8001ed6:	00ff      	lsls	r7, r7, #3
 8001ed8:	469a      	mov	sl, r3
 8001eda:	46b9      	mov	r9, r7
 8001edc:	0d40      	lsrs	r0, r0, #21
 8001ede:	0ff6      	lsrs	r6, r6, #31
 8001ee0:	4311      	orrs	r1, r2
 8001ee2:	42a0      	cmp	r0, r4
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x40>
 8001ee6:	e0b1      	b.n	800204c <__aeabi_dsub+0x1a4>
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4056      	eors	r6, r2
 8001eec:	46b3      	mov	fp, r6
 8001eee:	42b5      	cmp	r5, r6
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x4c>
 8001ef2:	e088      	b.n	8002006 <__aeabi_dsub+0x15e>
 8001ef4:	4642      	mov	r2, r8
 8001ef6:	1a12      	subs	r2, r2, r0
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	dc00      	bgt.n	8001efe <__aeabi_dsub+0x56>
 8001efc:	e0ae      	b.n	800205c <__aeabi_dsub+0x1b4>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x5c>
 8001f02:	e0c1      	b.n	8002088 <__aeabi_dsub+0x1e0>
 8001f04:	48be      	ldr	r0, [pc, #760]	; (8002200 <__aeabi_dsub+0x358>)
 8001f06:	4580      	cmp	r8, r0
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x64>
 8001f0a:	e151      	b.n	80021b0 <__aeabi_dsub+0x308>
 8001f0c:	2080      	movs	r0, #128	; 0x80
 8001f0e:	0400      	lsls	r0, r0, #16
 8001f10:	4301      	orrs	r1, r0
 8001f12:	2a38      	cmp	r2, #56	; 0x38
 8001f14:	dd00      	ble.n	8001f18 <__aeabi_dsub+0x70>
 8001f16:	e17b      	b.n	8002210 <__aeabi_dsub+0x368>
 8001f18:	2a1f      	cmp	r2, #31
 8001f1a:	dd00      	ble.n	8001f1e <__aeabi_dsub+0x76>
 8001f1c:	e1ee      	b.n	80022fc <__aeabi_dsub+0x454>
 8001f1e:	2020      	movs	r0, #32
 8001f20:	003e      	movs	r6, r7
 8001f22:	1a80      	subs	r0, r0, r2
 8001f24:	000c      	movs	r4, r1
 8001f26:	40d6      	lsrs	r6, r2
 8001f28:	40d1      	lsrs	r1, r2
 8001f2a:	4087      	lsls	r7, r0
 8001f2c:	4662      	mov	r2, ip
 8001f2e:	4084      	lsls	r4, r0
 8001f30:	1a52      	subs	r2, r2, r1
 8001f32:	1e78      	subs	r0, r7, #1
 8001f34:	4187      	sbcs	r7, r0
 8001f36:	4694      	mov	ip, r2
 8001f38:	4334      	orrs	r4, r6
 8001f3a:	4327      	orrs	r7, r4
 8001f3c:	1bdc      	subs	r4, r3, r7
 8001f3e:	42a3      	cmp	r3, r4
 8001f40:	419b      	sbcs	r3, r3
 8001f42:	4662      	mov	r2, ip
 8001f44:	425b      	negs	r3, r3
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	4699      	mov	r9, r3
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	d400      	bmi.n	8001f52 <__aeabi_dsub+0xaa>
 8001f50:	e118      	b.n	8002184 <__aeabi_dsub+0x2dc>
 8001f52:	464b      	mov	r3, r9
 8001f54:	0258      	lsls	r0, r3, #9
 8001f56:	0a43      	lsrs	r3, r0, #9
 8001f58:	4699      	mov	r9, r3
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0xba>
 8001f60:	e137      	b.n	80021d2 <__aeabi_dsub+0x32a>
 8001f62:	4648      	mov	r0, r9
 8001f64:	f000 fc06 	bl	8002774 <__clzsi2>
 8001f68:	0001      	movs	r1, r0
 8001f6a:	3908      	subs	r1, #8
 8001f6c:	2320      	movs	r3, #32
 8001f6e:	0022      	movs	r2, r4
 8001f70:	4648      	mov	r0, r9
 8001f72:	1a5b      	subs	r3, r3, r1
 8001f74:	40da      	lsrs	r2, r3
 8001f76:	4088      	lsls	r0, r1
 8001f78:	408c      	lsls	r4, r1
 8001f7a:	4643      	mov	r3, r8
 8001f7c:	4310      	orrs	r0, r2
 8001f7e:	4588      	cmp	r8, r1
 8001f80:	dd00      	ble.n	8001f84 <__aeabi_dsub+0xdc>
 8001f82:	e136      	b.n	80021f2 <__aeabi_dsub+0x34a>
 8001f84:	1ac9      	subs	r1, r1, r3
 8001f86:	1c4b      	adds	r3, r1, #1
 8001f88:	2b1f      	cmp	r3, #31
 8001f8a:	dd00      	ble.n	8001f8e <__aeabi_dsub+0xe6>
 8001f8c:	e0ea      	b.n	8002164 <__aeabi_dsub+0x2bc>
 8001f8e:	2220      	movs	r2, #32
 8001f90:	0026      	movs	r6, r4
 8001f92:	1ad2      	subs	r2, r2, r3
 8001f94:	0001      	movs	r1, r0
 8001f96:	4094      	lsls	r4, r2
 8001f98:	40de      	lsrs	r6, r3
 8001f9a:	40d8      	lsrs	r0, r3
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	4091      	lsls	r1, r2
 8001fa0:	1e62      	subs	r2, r4, #1
 8001fa2:	4194      	sbcs	r4, r2
 8001fa4:	4681      	mov	r9, r0
 8001fa6:	4698      	mov	r8, r3
 8001fa8:	4331      	orrs	r1, r6
 8001faa:	430c      	orrs	r4, r1
 8001fac:	0763      	lsls	r3, r4, #29
 8001fae:	d009      	beq.n	8001fc4 <__aeabi_dsub+0x11c>
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	4023      	ands	r3, r4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d005      	beq.n	8001fc4 <__aeabi_dsub+0x11c>
 8001fb8:	1d23      	adds	r3, r4, #4
 8001fba:	42a3      	cmp	r3, r4
 8001fbc:	41a4      	sbcs	r4, r4
 8001fbe:	4264      	negs	r4, r4
 8001fc0:	44a1      	add	r9, r4
 8001fc2:	001c      	movs	r4, r3
 8001fc4:	464b      	mov	r3, r9
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	d400      	bmi.n	8001fcc <__aeabi_dsub+0x124>
 8001fca:	e0de      	b.n	800218a <__aeabi_dsub+0x2e2>
 8001fcc:	4641      	mov	r1, r8
 8001fce:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <__aeabi_dsub+0x358>)
 8001fd0:	3101      	adds	r1, #1
 8001fd2:	4299      	cmp	r1, r3
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x130>
 8001fd6:	e0e7      	b.n	80021a8 <__aeabi_dsub+0x300>
 8001fd8:	464b      	mov	r3, r9
 8001fda:	488a      	ldr	r0, [pc, #552]	; (8002204 <__aeabi_dsub+0x35c>)
 8001fdc:	08e4      	lsrs	r4, r4, #3
 8001fde:	4003      	ands	r3, r0
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	0549      	lsls	r1, r1, #21
 8001fe4:	075b      	lsls	r3, r3, #29
 8001fe6:	0240      	lsls	r0, r0, #9
 8001fe8:	4323      	orrs	r3, r4
 8001fea:	0d4a      	lsrs	r2, r1, #21
 8001fec:	0b04      	lsrs	r4, r0, #12
 8001fee:	0512      	lsls	r2, r2, #20
 8001ff0:	07ed      	lsls	r5, r5, #31
 8001ff2:	4322      	orrs	r2, r4
 8001ff4:	432a      	orrs	r2, r5
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffc:	46bb      	mov	fp, r7
 8001ffe:	46b2      	mov	sl, r6
 8002000:	46a9      	mov	r9, r5
 8002002:	46a0      	mov	r8, r4
 8002004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002006:	4642      	mov	r2, r8
 8002008:	1a12      	subs	r2, r2, r0
 800200a:	2a00      	cmp	r2, #0
 800200c:	dd52      	ble.n	80020b4 <__aeabi_dsub+0x20c>
 800200e:	2800      	cmp	r0, #0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x16c>
 8002012:	e09c      	b.n	800214e <__aeabi_dsub+0x2a6>
 8002014:	45a0      	cmp	r8, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x172>
 8002018:	e0ca      	b.n	80021b0 <__aeabi_dsub+0x308>
 800201a:	2080      	movs	r0, #128	; 0x80
 800201c:	0400      	lsls	r0, r0, #16
 800201e:	4301      	orrs	r1, r0
 8002020:	2a38      	cmp	r2, #56	; 0x38
 8002022:	dd00      	ble.n	8002026 <__aeabi_dsub+0x17e>
 8002024:	e149      	b.n	80022ba <__aeabi_dsub+0x412>
 8002026:	2a1f      	cmp	r2, #31
 8002028:	dc00      	bgt.n	800202c <__aeabi_dsub+0x184>
 800202a:	e197      	b.n	800235c <__aeabi_dsub+0x4b4>
 800202c:	0010      	movs	r0, r2
 800202e:	000e      	movs	r6, r1
 8002030:	3820      	subs	r0, #32
 8002032:	40c6      	lsrs	r6, r0
 8002034:	2a20      	cmp	r2, #32
 8002036:	d004      	beq.n	8002042 <__aeabi_dsub+0x19a>
 8002038:	2040      	movs	r0, #64	; 0x40
 800203a:	1a82      	subs	r2, r0, r2
 800203c:	4091      	lsls	r1, r2
 800203e:	430f      	orrs	r7, r1
 8002040:	46b9      	mov	r9, r7
 8002042:	464c      	mov	r4, r9
 8002044:	1e62      	subs	r2, r4, #1
 8002046:	4194      	sbcs	r4, r2
 8002048:	4334      	orrs	r4, r6
 800204a:	e13a      	b.n	80022c2 <__aeabi_dsub+0x41a>
 800204c:	000a      	movs	r2, r1
 800204e:	433a      	orrs	r2, r7
 8002050:	d028      	beq.n	80020a4 <__aeabi_dsub+0x1fc>
 8002052:	46b3      	mov	fp, r6
 8002054:	42b5      	cmp	r5, r6
 8002056:	d02b      	beq.n	80020b0 <__aeabi_dsub+0x208>
 8002058:	4a6b      	ldr	r2, [pc, #428]	; (8002208 <__aeabi_dsub+0x360>)
 800205a:	4442      	add	r2, r8
 800205c:	2a00      	cmp	r2, #0
 800205e:	d05d      	beq.n	800211c <__aeabi_dsub+0x274>
 8002060:	4642      	mov	r2, r8
 8002062:	4644      	mov	r4, r8
 8002064:	1a82      	subs	r2, r0, r2
 8002066:	2c00      	cmp	r4, #0
 8002068:	d000      	beq.n	800206c <__aeabi_dsub+0x1c4>
 800206a:	e0f5      	b.n	8002258 <__aeabi_dsub+0x3b0>
 800206c:	4665      	mov	r5, ip
 800206e:	431d      	orrs	r5, r3
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x1cc>
 8002072:	e19c      	b.n	80023ae <__aeabi_dsub+0x506>
 8002074:	1e55      	subs	r5, r2, #1
 8002076:	2a01      	cmp	r2, #1
 8002078:	d100      	bne.n	800207c <__aeabi_dsub+0x1d4>
 800207a:	e1fb      	b.n	8002474 <__aeabi_dsub+0x5cc>
 800207c:	4c60      	ldr	r4, [pc, #384]	; (8002200 <__aeabi_dsub+0x358>)
 800207e:	42a2      	cmp	r2, r4
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x1dc>
 8002082:	e1bd      	b.n	8002400 <__aeabi_dsub+0x558>
 8002084:	002a      	movs	r2, r5
 8002086:	e0f0      	b.n	800226a <__aeabi_dsub+0x3c2>
 8002088:	0008      	movs	r0, r1
 800208a:	4338      	orrs	r0, r7
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x1e8>
 800208e:	e0c3      	b.n	8002218 <__aeabi_dsub+0x370>
 8002090:	1e50      	subs	r0, r2, #1
 8002092:	2a01      	cmp	r2, #1
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x1f0>
 8002096:	e1a8      	b.n	80023ea <__aeabi_dsub+0x542>
 8002098:	4c59      	ldr	r4, [pc, #356]	; (8002200 <__aeabi_dsub+0x358>)
 800209a:	42a2      	cmp	r2, r4
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x1f8>
 800209e:	e087      	b.n	80021b0 <__aeabi_dsub+0x308>
 80020a0:	0002      	movs	r2, r0
 80020a2:	e736      	b.n	8001f12 <__aeabi_dsub+0x6a>
 80020a4:	2201      	movs	r2, #1
 80020a6:	4056      	eors	r6, r2
 80020a8:	46b3      	mov	fp, r6
 80020aa:	42b5      	cmp	r5, r6
 80020ac:	d000      	beq.n	80020b0 <__aeabi_dsub+0x208>
 80020ae:	e721      	b.n	8001ef4 <__aeabi_dsub+0x4c>
 80020b0:	4a55      	ldr	r2, [pc, #340]	; (8002208 <__aeabi_dsub+0x360>)
 80020b2:	4442      	add	r2, r8
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x212>
 80020b8:	e0b5      	b.n	8002226 <__aeabi_dsub+0x37e>
 80020ba:	4642      	mov	r2, r8
 80020bc:	4644      	mov	r4, r8
 80020be:	1a82      	subs	r2, r0, r2
 80020c0:	2c00      	cmp	r4, #0
 80020c2:	d100      	bne.n	80020c6 <__aeabi_dsub+0x21e>
 80020c4:	e138      	b.n	8002338 <__aeabi_dsub+0x490>
 80020c6:	4e4e      	ldr	r6, [pc, #312]	; (8002200 <__aeabi_dsub+0x358>)
 80020c8:	42b0      	cmp	r0, r6
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x226>
 80020cc:	e1de      	b.n	800248c <__aeabi_dsub+0x5e4>
 80020ce:	2680      	movs	r6, #128	; 0x80
 80020d0:	4664      	mov	r4, ip
 80020d2:	0436      	lsls	r6, r6, #16
 80020d4:	4334      	orrs	r4, r6
 80020d6:	46a4      	mov	ip, r4
 80020d8:	2a38      	cmp	r2, #56	; 0x38
 80020da:	dd00      	ble.n	80020de <__aeabi_dsub+0x236>
 80020dc:	e196      	b.n	800240c <__aeabi_dsub+0x564>
 80020de:	2a1f      	cmp	r2, #31
 80020e0:	dd00      	ble.n	80020e4 <__aeabi_dsub+0x23c>
 80020e2:	e224      	b.n	800252e <__aeabi_dsub+0x686>
 80020e4:	2620      	movs	r6, #32
 80020e6:	1ab4      	subs	r4, r6, r2
 80020e8:	46a2      	mov	sl, r4
 80020ea:	4664      	mov	r4, ip
 80020ec:	4656      	mov	r6, sl
 80020ee:	40b4      	lsls	r4, r6
 80020f0:	46a1      	mov	r9, r4
 80020f2:	001c      	movs	r4, r3
 80020f4:	464e      	mov	r6, r9
 80020f6:	40d4      	lsrs	r4, r2
 80020f8:	4326      	orrs	r6, r4
 80020fa:	0034      	movs	r4, r6
 80020fc:	4656      	mov	r6, sl
 80020fe:	40b3      	lsls	r3, r6
 8002100:	1e5e      	subs	r6, r3, #1
 8002102:	41b3      	sbcs	r3, r6
 8002104:	431c      	orrs	r4, r3
 8002106:	4663      	mov	r3, ip
 8002108:	40d3      	lsrs	r3, r2
 800210a:	18c9      	adds	r1, r1, r3
 800210c:	19e4      	adds	r4, r4, r7
 800210e:	42bc      	cmp	r4, r7
 8002110:	41bf      	sbcs	r7, r7
 8002112:	427f      	negs	r7, r7
 8002114:	46b9      	mov	r9, r7
 8002116:	4680      	mov	r8, r0
 8002118:	4489      	add	r9, r1
 800211a:	e0d8      	b.n	80022ce <__aeabi_dsub+0x426>
 800211c:	4640      	mov	r0, r8
 800211e:	4c3b      	ldr	r4, [pc, #236]	; (800220c <__aeabi_dsub+0x364>)
 8002120:	3001      	adds	r0, #1
 8002122:	4220      	tst	r0, r4
 8002124:	d000      	beq.n	8002128 <__aeabi_dsub+0x280>
 8002126:	e0b4      	b.n	8002292 <__aeabi_dsub+0x3ea>
 8002128:	4640      	mov	r0, r8
 800212a:	2800      	cmp	r0, #0
 800212c:	d000      	beq.n	8002130 <__aeabi_dsub+0x288>
 800212e:	e144      	b.n	80023ba <__aeabi_dsub+0x512>
 8002130:	4660      	mov	r0, ip
 8002132:	4318      	orrs	r0, r3
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x290>
 8002136:	e190      	b.n	800245a <__aeabi_dsub+0x5b2>
 8002138:	0008      	movs	r0, r1
 800213a:	4338      	orrs	r0, r7
 800213c:	d000      	beq.n	8002140 <__aeabi_dsub+0x298>
 800213e:	e1aa      	b.n	8002496 <__aeabi_dsub+0x5ee>
 8002140:	4661      	mov	r1, ip
 8002142:	08db      	lsrs	r3, r3, #3
 8002144:	0749      	lsls	r1, r1, #29
 8002146:	430b      	orrs	r3, r1
 8002148:	4661      	mov	r1, ip
 800214a:	08cc      	lsrs	r4, r1, #3
 800214c:	e027      	b.n	800219e <__aeabi_dsub+0x2f6>
 800214e:	0008      	movs	r0, r1
 8002150:	4338      	orrs	r0, r7
 8002152:	d061      	beq.n	8002218 <__aeabi_dsub+0x370>
 8002154:	1e50      	subs	r0, r2, #1
 8002156:	2a01      	cmp	r2, #1
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x2b4>
 800215a:	e139      	b.n	80023d0 <__aeabi_dsub+0x528>
 800215c:	42a2      	cmp	r2, r4
 800215e:	d027      	beq.n	80021b0 <__aeabi_dsub+0x308>
 8002160:	0002      	movs	r2, r0
 8002162:	e75d      	b.n	8002020 <__aeabi_dsub+0x178>
 8002164:	0002      	movs	r2, r0
 8002166:	391f      	subs	r1, #31
 8002168:	40ca      	lsrs	r2, r1
 800216a:	0011      	movs	r1, r2
 800216c:	2b20      	cmp	r3, #32
 800216e:	d003      	beq.n	8002178 <__aeabi_dsub+0x2d0>
 8002170:	2240      	movs	r2, #64	; 0x40
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	4098      	lsls	r0, r3
 8002176:	4304      	orrs	r4, r0
 8002178:	1e63      	subs	r3, r4, #1
 800217a:	419c      	sbcs	r4, r3
 800217c:	2300      	movs	r3, #0
 800217e:	4699      	mov	r9, r3
 8002180:	4698      	mov	r8, r3
 8002182:	430c      	orrs	r4, r1
 8002184:	0763      	lsls	r3, r4, #29
 8002186:	d000      	beq.n	800218a <__aeabi_dsub+0x2e2>
 8002188:	e712      	b.n	8001fb0 <__aeabi_dsub+0x108>
 800218a:	464b      	mov	r3, r9
 800218c:	464a      	mov	r2, r9
 800218e:	08e4      	lsrs	r4, r4, #3
 8002190:	075b      	lsls	r3, r3, #29
 8002192:	4323      	orrs	r3, r4
 8002194:	08d4      	lsrs	r4, r2, #3
 8002196:	4642      	mov	r2, r8
 8002198:	4919      	ldr	r1, [pc, #100]	; (8002200 <__aeabi_dsub+0x358>)
 800219a:	428a      	cmp	r2, r1
 800219c:	d00e      	beq.n	80021bc <__aeabi_dsub+0x314>
 800219e:	0324      	lsls	r4, r4, #12
 80021a0:	0552      	lsls	r2, r2, #21
 80021a2:	0b24      	lsrs	r4, r4, #12
 80021a4:	0d52      	lsrs	r2, r2, #21
 80021a6:	e722      	b.n	8001fee <__aeabi_dsub+0x146>
 80021a8:	000a      	movs	r2, r1
 80021aa:	2400      	movs	r4, #0
 80021ac:	2300      	movs	r3, #0
 80021ae:	e71e      	b.n	8001fee <__aeabi_dsub+0x146>
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	4662      	mov	r2, ip
 80021b4:	0752      	lsls	r2, r2, #29
 80021b6:	4313      	orrs	r3, r2
 80021b8:	4662      	mov	r2, ip
 80021ba:	08d4      	lsrs	r4, r2, #3
 80021bc:	001a      	movs	r2, r3
 80021be:	4322      	orrs	r2, r4
 80021c0:	d100      	bne.n	80021c4 <__aeabi_dsub+0x31c>
 80021c2:	e1fc      	b.n	80025be <__aeabi_dsub+0x716>
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	0312      	lsls	r2, r2, #12
 80021c8:	4314      	orrs	r4, r2
 80021ca:	0324      	lsls	r4, r4, #12
 80021cc:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <__aeabi_dsub+0x358>)
 80021ce:	0b24      	lsrs	r4, r4, #12
 80021d0:	e70d      	b.n	8001fee <__aeabi_dsub+0x146>
 80021d2:	0020      	movs	r0, r4
 80021d4:	f000 face 	bl	8002774 <__clzsi2>
 80021d8:	0001      	movs	r1, r0
 80021da:	3118      	adds	r1, #24
 80021dc:	291f      	cmp	r1, #31
 80021de:	dc00      	bgt.n	80021e2 <__aeabi_dsub+0x33a>
 80021e0:	e6c4      	b.n	8001f6c <__aeabi_dsub+0xc4>
 80021e2:	3808      	subs	r0, #8
 80021e4:	4084      	lsls	r4, r0
 80021e6:	4643      	mov	r3, r8
 80021e8:	0020      	movs	r0, r4
 80021ea:	2400      	movs	r4, #0
 80021ec:	4588      	cmp	r8, r1
 80021ee:	dc00      	bgt.n	80021f2 <__aeabi_dsub+0x34a>
 80021f0:	e6c8      	b.n	8001f84 <__aeabi_dsub+0xdc>
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <__aeabi_dsub+0x35c>)
 80021f4:	1a5b      	subs	r3, r3, r1
 80021f6:	4010      	ands	r0, r2
 80021f8:	4698      	mov	r8, r3
 80021fa:	4681      	mov	r9, r0
 80021fc:	e6d6      	b.n	8001fac <__aeabi_dsub+0x104>
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	000007ff 	.word	0x000007ff
 8002204:	ff7fffff 	.word	0xff7fffff
 8002208:	fffff801 	.word	0xfffff801
 800220c:	000007fe 	.word	0x000007fe
 8002210:	430f      	orrs	r7, r1
 8002212:	1e7a      	subs	r2, r7, #1
 8002214:	4197      	sbcs	r7, r2
 8002216:	e691      	b.n	8001f3c <__aeabi_dsub+0x94>
 8002218:	4661      	mov	r1, ip
 800221a:	08db      	lsrs	r3, r3, #3
 800221c:	0749      	lsls	r1, r1, #29
 800221e:	430b      	orrs	r3, r1
 8002220:	4661      	mov	r1, ip
 8002222:	08cc      	lsrs	r4, r1, #3
 8002224:	e7b8      	b.n	8002198 <__aeabi_dsub+0x2f0>
 8002226:	4640      	mov	r0, r8
 8002228:	4cd3      	ldr	r4, [pc, #844]	; (8002578 <__aeabi_dsub+0x6d0>)
 800222a:	3001      	adds	r0, #1
 800222c:	4220      	tst	r0, r4
 800222e:	d000      	beq.n	8002232 <__aeabi_dsub+0x38a>
 8002230:	e0a2      	b.n	8002378 <__aeabi_dsub+0x4d0>
 8002232:	4640      	mov	r0, r8
 8002234:	2800      	cmp	r0, #0
 8002236:	d000      	beq.n	800223a <__aeabi_dsub+0x392>
 8002238:	e101      	b.n	800243e <__aeabi_dsub+0x596>
 800223a:	4660      	mov	r0, ip
 800223c:	4318      	orrs	r0, r3
 800223e:	d100      	bne.n	8002242 <__aeabi_dsub+0x39a>
 8002240:	e15e      	b.n	8002500 <__aeabi_dsub+0x658>
 8002242:	0008      	movs	r0, r1
 8002244:	4338      	orrs	r0, r7
 8002246:	d000      	beq.n	800224a <__aeabi_dsub+0x3a2>
 8002248:	e15f      	b.n	800250a <__aeabi_dsub+0x662>
 800224a:	4661      	mov	r1, ip
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	0749      	lsls	r1, r1, #29
 8002250:	430b      	orrs	r3, r1
 8002252:	4661      	mov	r1, ip
 8002254:	08cc      	lsrs	r4, r1, #3
 8002256:	e7a2      	b.n	800219e <__aeabi_dsub+0x2f6>
 8002258:	4dc8      	ldr	r5, [pc, #800]	; (800257c <__aeabi_dsub+0x6d4>)
 800225a:	42a8      	cmp	r0, r5
 800225c:	d100      	bne.n	8002260 <__aeabi_dsub+0x3b8>
 800225e:	e0cf      	b.n	8002400 <__aeabi_dsub+0x558>
 8002260:	2580      	movs	r5, #128	; 0x80
 8002262:	4664      	mov	r4, ip
 8002264:	042d      	lsls	r5, r5, #16
 8002266:	432c      	orrs	r4, r5
 8002268:	46a4      	mov	ip, r4
 800226a:	2a38      	cmp	r2, #56	; 0x38
 800226c:	dc56      	bgt.n	800231c <__aeabi_dsub+0x474>
 800226e:	2a1f      	cmp	r2, #31
 8002270:	dd00      	ble.n	8002274 <__aeabi_dsub+0x3cc>
 8002272:	e0d1      	b.n	8002418 <__aeabi_dsub+0x570>
 8002274:	2520      	movs	r5, #32
 8002276:	001e      	movs	r6, r3
 8002278:	1aad      	subs	r5, r5, r2
 800227a:	4664      	mov	r4, ip
 800227c:	40ab      	lsls	r3, r5
 800227e:	40ac      	lsls	r4, r5
 8002280:	40d6      	lsrs	r6, r2
 8002282:	1e5d      	subs	r5, r3, #1
 8002284:	41ab      	sbcs	r3, r5
 8002286:	4334      	orrs	r4, r6
 8002288:	4323      	orrs	r3, r4
 800228a:	4664      	mov	r4, ip
 800228c:	40d4      	lsrs	r4, r2
 800228e:	1b09      	subs	r1, r1, r4
 8002290:	e049      	b.n	8002326 <__aeabi_dsub+0x47e>
 8002292:	4660      	mov	r0, ip
 8002294:	1bdc      	subs	r4, r3, r7
 8002296:	1a46      	subs	r6, r0, r1
 8002298:	42a3      	cmp	r3, r4
 800229a:	4180      	sbcs	r0, r0
 800229c:	4240      	negs	r0, r0
 800229e:	4681      	mov	r9, r0
 80022a0:	0030      	movs	r0, r6
 80022a2:	464e      	mov	r6, r9
 80022a4:	1b80      	subs	r0, r0, r6
 80022a6:	4681      	mov	r9, r0
 80022a8:	0200      	lsls	r0, r0, #8
 80022aa:	d476      	bmi.n	800239a <__aeabi_dsub+0x4f2>
 80022ac:	464b      	mov	r3, r9
 80022ae:	4323      	orrs	r3, r4
 80022b0:	d000      	beq.n	80022b4 <__aeabi_dsub+0x40c>
 80022b2:	e652      	b.n	8001f5a <__aeabi_dsub+0xb2>
 80022b4:	2400      	movs	r4, #0
 80022b6:	2500      	movs	r5, #0
 80022b8:	e771      	b.n	800219e <__aeabi_dsub+0x2f6>
 80022ba:	4339      	orrs	r1, r7
 80022bc:	000c      	movs	r4, r1
 80022be:	1e62      	subs	r2, r4, #1
 80022c0:	4194      	sbcs	r4, r2
 80022c2:	18e4      	adds	r4, r4, r3
 80022c4:	429c      	cmp	r4, r3
 80022c6:	419b      	sbcs	r3, r3
 80022c8:	425b      	negs	r3, r3
 80022ca:	4463      	add	r3, ip
 80022cc:	4699      	mov	r9, r3
 80022ce:	464b      	mov	r3, r9
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	d400      	bmi.n	80022d6 <__aeabi_dsub+0x42e>
 80022d4:	e756      	b.n	8002184 <__aeabi_dsub+0x2dc>
 80022d6:	2301      	movs	r3, #1
 80022d8:	469c      	mov	ip, r3
 80022da:	4ba8      	ldr	r3, [pc, #672]	; (800257c <__aeabi_dsub+0x6d4>)
 80022dc:	44e0      	add	r8, ip
 80022de:	4598      	cmp	r8, r3
 80022e0:	d038      	beq.n	8002354 <__aeabi_dsub+0x4ac>
 80022e2:	464b      	mov	r3, r9
 80022e4:	48a6      	ldr	r0, [pc, #664]	; (8002580 <__aeabi_dsub+0x6d8>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	4003      	ands	r3, r0
 80022ea:	0018      	movs	r0, r3
 80022ec:	0863      	lsrs	r3, r4, #1
 80022ee:	4014      	ands	r4, r2
 80022f0:	431c      	orrs	r4, r3
 80022f2:	07c3      	lsls	r3, r0, #31
 80022f4:	431c      	orrs	r4, r3
 80022f6:	0843      	lsrs	r3, r0, #1
 80022f8:	4699      	mov	r9, r3
 80022fa:	e657      	b.n	8001fac <__aeabi_dsub+0x104>
 80022fc:	0010      	movs	r0, r2
 80022fe:	000e      	movs	r6, r1
 8002300:	3820      	subs	r0, #32
 8002302:	40c6      	lsrs	r6, r0
 8002304:	2a20      	cmp	r2, #32
 8002306:	d004      	beq.n	8002312 <__aeabi_dsub+0x46a>
 8002308:	2040      	movs	r0, #64	; 0x40
 800230a:	1a82      	subs	r2, r0, r2
 800230c:	4091      	lsls	r1, r2
 800230e:	430f      	orrs	r7, r1
 8002310:	46b9      	mov	r9, r7
 8002312:	464f      	mov	r7, r9
 8002314:	1e7a      	subs	r2, r7, #1
 8002316:	4197      	sbcs	r7, r2
 8002318:	4337      	orrs	r7, r6
 800231a:	e60f      	b.n	8001f3c <__aeabi_dsub+0x94>
 800231c:	4662      	mov	r2, ip
 800231e:	431a      	orrs	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	1e5a      	subs	r2, r3, #1
 8002324:	4193      	sbcs	r3, r2
 8002326:	1afc      	subs	r4, r7, r3
 8002328:	42a7      	cmp	r7, r4
 800232a:	41bf      	sbcs	r7, r7
 800232c:	427f      	negs	r7, r7
 800232e:	1bcb      	subs	r3, r1, r7
 8002330:	4699      	mov	r9, r3
 8002332:	465d      	mov	r5, fp
 8002334:	4680      	mov	r8, r0
 8002336:	e608      	b.n	8001f4a <__aeabi_dsub+0xa2>
 8002338:	4666      	mov	r6, ip
 800233a:	431e      	orrs	r6, r3
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x498>
 800233e:	e0be      	b.n	80024be <__aeabi_dsub+0x616>
 8002340:	1e56      	subs	r6, r2, #1
 8002342:	2a01      	cmp	r2, #1
 8002344:	d100      	bne.n	8002348 <__aeabi_dsub+0x4a0>
 8002346:	e109      	b.n	800255c <__aeabi_dsub+0x6b4>
 8002348:	4c8c      	ldr	r4, [pc, #560]	; (800257c <__aeabi_dsub+0x6d4>)
 800234a:	42a2      	cmp	r2, r4
 800234c:	d100      	bne.n	8002350 <__aeabi_dsub+0x4a8>
 800234e:	e119      	b.n	8002584 <__aeabi_dsub+0x6dc>
 8002350:	0032      	movs	r2, r6
 8002352:	e6c1      	b.n	80020d8 <__aeabi_dsub+0x230>
 8002354:	4642      	mov	r2, r8
 8002356:	2400      	movs	r4, #0
 8002358:	2300      	movs	r3, #0
 800235a:	e648      	b.n	8001fee <__aeabi_dsub+0x146>
 800235c:	2020      	movs	r0, #32
 800235e:	000c      	movs	r4, r1
 8002360:	1a80      	subs	r0, r0, r2
 8002362:	003e      	movs	r6, r7
 8002364:	4087      	lsls	r7, r0
 8002366:	4084      	lsls	r4, r0
 8002368:	40d6      	lsrs	r6, r2
 800236a:	1e78      	subs	r0, r7, #1
 800236c:	4187      	sbcs	r7, r0
 800236e:	40d1      	lsrs	r1, r2
 8002370:	4334      	orrs	r4, r6
 8002372:	433c      	orrs	r4, r7
 8002374:	448c      	add	ip, r1
 8002376:	e7a4      	b.n	80022c2 <__aeabi_dsub+0x41a>
 8002378:	4a80      	ldr	r2, [pc, #512]	; (800257c <__aeabi_dsub+0x6d4>)
 800237a:	4290      	cmp	r0, r2
 800237c:	d100      	bne.n	8002380 <__aeabi_dsub+0x4d8>
 800237e:	e0e9      	b.n	8002554 <__aeabi_dsub+0x6ac>
 8002380:	19df      	adds	r7, r3, r7
 8002382:	429f      	cmp	r7, r3
 8002384:	419b      	sbcs	r3, r3
 8002386:	4461      	add	r1, ip
 8002388:	425b      	negs	r3, r3
 800238a:	18c9      	adds	r1, r1, r3
 800238c:	07cc      	lsls	r4, r1, #31
 800238e:	087f      	lsrs	r7, r7, #1
 8002390:	084b      	lsrs	r3, r1, #1
 8002392:	4699      	mov	r9, r3
 8002394:	4680      	mov	r8, r0
 8002396:	433c      	orrs	r4, r7
 8002398:	e6f4      	b.n	8002184 <__aeabi_dsub+0x2dc>
 800239a:	1afc      	subs	r4, r7, r3
 800239c:	42a7      	cmp	r7, r4
 800239e:	41bf      	sbcs	r7, r7
 80023a0:	4663      	mov	r3, ip
 80023a2:	427f      	negs	r7, r7
 80023a4:	1ac9      	subs	r1, r1, r3
 80023a6:	1bcb      	subs	r3, r1, r7
 80023a8:	4699      	mov	r9, r3
 80023aa:	465d      	mov	r5, fp
 80023ac:	e5d5      	b.n	8001f5a <__aeabi_dsub+0xb2>
 80023ae:	08ff      	lsrs	r7, r7, #3
 80023b0:	074b      	lsls	r3, r1, #29
 80023b2:	465d      	mov	r5, fp
 80023b4:	433b      	orrs	r3, r7
 80023b6:	08cc      	lsrs	r4, r1, #3
 80023b8:	e6ee      	b.n	8002198 <__aeabi_dsub+0x2f0>
 80023ba:	4662      	mov	r2, ip
 80023bc:	431a      	orrs	r2, r3
 80023be:	d000      	beq.n	80023c2 <__aeabi_dsub+0x51a>
 80023c0:	e082      	b.n	80024c8 <__aeabi_dsub+0x620>
 80023c2:	000b      	movs	r3, r1
 80023c4:	433b      	orrs	r3, r7
 80023c6:	d11b      	bne.n	8002400 <__aeabi_dsub+0x558>
 80023c8:	2480      	movs	r4, #128	; 0x80
 80023ca:	2500      	movs	r5, #0
 80023cc:	0324      	lsls	r4, r4, #12
 80023ce:	e6f9      	b.n	80021c4 <__aeabi_dsub+0x31c>
 80023d0:	19dc      	adds	r4, r3, r7
 80023d2:	429c      	cmp	r4, r3
 80023d4:	419b      	sbcs	r3, r3
 80023d6:	4461      	add	r1, ip
 80023d8:	4689      	mov	r9, r1
 80023da:	425b      	negs	r3, r3
 80023dc:	4499      	add	r9, r3
 80023de:	464b      	mov	r3, r9
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	d444      	bmi.n	800246e <__aeabi_dsub+0x5c6>
 80023e4:	2301      	movs	r3, #1
 80023e6:	4698      	mov	r8, r3
 80023e8:	e6cc      	b.n	8002184 <__aeabi_dsub+0x2dc>
 80023ea:	1bdc      	subs	r4, r3, r7
 80023ec:	4662      	mov	r2, ip
 80023ee:	42a3      	cmp	r3, r4
 80023f0:	419b      	sbcs	r3, r3
 80023f2:	1a51      	subs	r1, r2, r1
 80023f4:	425b      	negs	r3, r3
 80023f6:	1acb      	subs	r3, r1, r3
 80023f8:	4699      	mov	r9, r3
 80023fa:	2301      	movs	r3, #1
 80023fc:	4698      	mov	r8, r3
 80023fe:	e5a4      	b.n	8001f4a <__aeabi_dsub+0xa2>
 8002400:	08ff      	lsrs	r7, r7, #3
 8002402:	074b      	lsls	r3, r1, #29
 8002404:	465d      	mov	r5, fp
 8002406:	433b      	orrs	r3, r7
 8002408:	08cc      	lsrs	r4, r1, #3
 800240a:	e6d7      	b.n	80021bc <__aeabi_dsub+0x314>
 800240c:	4662      	mov	r2, ip
 800240e:	431a      	orrs	r2, r3
 8002410:	0014      	movs	r4, r2
 8002412:	1e63      	subs	r3, r4, #1
 8002414:	419c      	sbcs	r4, r3
 8002416:	e679      	b.n	800210c <__aeabi_dsub+0x264>
 8002418:	0015      	movs	r5, r2
 800241a:	4664      	mov	r4, ip
 800241c:	3d20      	subs	r5, #32
 800241e:	40ec      	lsrs	r4, r5
 8002420:	46a0      	mov	r8, r4
 8002422:	2a20      	cmp	r2, #32
 8002424:	d005      	beq.n	8002432 <__aeabi_dsub+0x58a>
 8002426:	2540      	movs	r5, #64	; 0x40
 8002428:	4664      	mov	r4, ip
 800242a:	1aaa      	subs	r2, r5, r2
 800242c:	4094      	lsls	r4, r2
 800242e:	4323      	orrs	r3, r4
 8002430:	469a      	mov	sl, r3
 8002432:	4654      	mov	r4, sl
 8002434:	1e63      	subs	r3, r4, #1
 8002436:	419c      	sbcs	r4, r3
 8002438:	4643      	mov	r3, r8
 800243a:	4323      	orrs	r3, r4
 800243c:	e773      	b.n	8002326 <__aeabi_dsub+0x47e>
 800243e:	4662      	mov	r2, ip
 8002440:	431a      	orrs	r2, r3
 8002442:	d023      	beq.n	800248c <__aeabi_dsub+0x5e4>
 8002444:	000a      	movs	r2, r1
 8002446:	433a      	orrs	r2, r7
 8002448:	d000      	beq.n	800244c <__aeabi_dsub+0x5a4>
 800244a:	e0a0      	b.n	800258e <__aeabi_dsub+0x6e6>
 800244c:	4662      	mov	r2, ip
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	0752      	lsls	r2, r2, #29
 8002452:	4313      	orrs	r3, r2
 8002454:	4662      	mov	r2, ip
 8002456:	08d4      	lsrs	r4, r2, #3
 8002458:	e6b0      	b.n	80021bc <__aeabi_dsub+0x314>
 800245a:	000b      	movs	r3, r1
 800245c:	433b      	orrs	r3, r7
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x5ba>
 8002460:	e728      	b.n	80022b4 <__aeabi_dsub+0x40c>
 8002462:	08ff      	lsrs	r7, r7, #3
 8002464:	074b      	lsls	r3, r1, #29
 8002466:	465d      	mov	r5, fp
 8002468:	433b      	orrs	r3, r7
 800246a:	08cc      	lsrs	r4, r1, #3
 800246c:	e697      	b.n	800219e <__aeabi_dsub+0x2f6>
 800246e:	2302      	movs	r3, #2
 8002470:	4698      	mov	r8, r3
 8002472:	e736      	b.n	80022e2 <__aeabi_dsub+0x43a>
 8002474:	1afc      	subs	r4, r7, r3
 8002476:	42a7      	cmp	r7, r4
 8002478:	41bf      	sbcs	r7, r7
 800247a:	4663      	mov	r3, ip
 800247c:	427f      	negs	r7, r7
 800247e:	1ac9      	subs	r1, r1, r3
 8002480:	1bcb      	subs	r3, r1, r7
 8002482:	4699      	mov	r9, r3
 8002484:	2301      	movs	r3, #1
 8002486:	465d      	mov	r5, fp
 8002488:	4698      	mov	r8, r3
 800248a:	e55e      	b.n	8001f4a <__aeabi_dsub+0xa2>
 800248c:	074b      	lsls	r3, r1, #29
 800248e:	08ff      	lsrs	r7, r7, #3
 8002490:	433b      	orrs	r3, r7
 8002492:	08cc      	lsrs	r4, r1, #3
 8002494:	e692      	b.n	80021bc <__aeabi_dsub+0x314>
 8002496:	1bdc      	subs	r4, r3, r7
 8002498:	4660      	mov	r0, ip
 800249a:	42a3      	cmp	r3, r4
 800249c:	41b6      	sbcs	r6, r6
 800249e:	1a40      	subs	r0, r0, r1
 80024a0:	4276      	negs	r6, r6
 80024a2:	1b80      	subs	r0, r0, r6
 80024a4:	4681      	mov	r9, r0
 80024a6:	0200      	lsls	r0, r0, #8
 80024a8:	d560      	bpl.n	800256c <__aeabi_dsub+0x6c4>
 80024aa:	1afc      	subs	r4, r7, r3
 80024ac:	42a7      	cmp	r7, r4
 80024ae:	41bf      	sbcs	r7, r7
 80024b0:	4663      	mov	r3, ip
 80024b2:	427f      	negs	r7, r7
 80024b4:	1ac9      	subs	r1, r1, r3
 80024b6:	1bcb      	subs	r3, r1, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	465d      	mov	r5, fp
 80024bc:	e576      	b.n	8001fac <__aeabi_dsub+0x104>
 80024be:	08ff      	lsrs	r7, r7, #3
 80024c0:	074b      	lsls	r3, r1, #29
 80024c2:	433b      	orrs	r3, r7
 80024c4:	08cc      	lsrs	r4, r1, #3
 80024c6:	e667      	b.n	8002198 <__aeabi_dsub+0x2f0>
 80024c8:	000a      	movs	r2, r1
 80024ca:	08db      	lsrs	r3, r3, #3
 80024cc:	433a      	orrs	r2, r7
 80024ce:	d100      	bne.n	80024d2 <__aeabi_dsub+0x62a>
 80024d0:	e66f      	b.n	80021b2 <__aeabi_dsub+0x30a>
 80024d2:	4662      	mov	r2, ip
 80024d4:	0752      	lsls	r2, r2, #29
 80024d6:	4313      	orrs	r3, r2
 80024d8:	4662      	mov	r2, ip
 80024da:	08d4      	lsrs	r4, r2, #3
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	0312      	lsls	r2, r2, #12
 80024e0:	4214      	tst	r4, r2
 80024e2:	d007      	beq.n	80024f4 <__aeabi_dsub+0x64c>
 80024e4:	08c8      	lsrs	r0, r1, #3
 80024e6:	4210      	tst	r0, r2
 80024e8:	d104      	bne.n	80024f4 <__aeabi_dsub+0x64c>
 80024ea:	465d      	mov	r5, fp
 80024ec:	0004      	movs	r4, r0
 80024ee:	08fb      	lsrs	r3, r7, #3
 80024f0:	0749      	lsls	r1, r1, #29
 80024f2:	430b      	orrs	r3, r1
 80024f4:	0f5a      	lsrs	r2, r3, #29
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	0752      	lsls	r2, r2, #29
 80024fc:	4313      	orrs	r3, r2
 80024fe:	e65d      	b.n	80021bc <__aeabi_dsub+0x314>
 8002500:	074b      	lsls	r3, r1, #29
 8002502:	08ff      	lsrs	r7, r7, #3
 8002504:	433b      	orrs	r3, r7
 8002506:	08cc      	lsrs	r4, r1, #3
 8002508:	e649      	b.n	800219e <__aeabi_dsub+0x2f6>
 800250a:	19dc      	adds	r4, r3, r7
 800250c:	429c      	cmp	r4, r3
 800250e:	419b      	sbcs	r3, r3
 8002510:	4461      	add	r1, ip
 8002512:	4689      	mov	r9, r1
 8002514:	425b      	negs	r3, r3
 8002516:	4499      	add	r9, r3
 8002518:	464b      	mov	r3, r9
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	d400      	bmi.n	8002520 <__aeabi_dsub+0x678>
 800251e:	e631      	b.n	8002184 <__aeabi_dsub+0x2dc>
 8002520:	464a      	mov	r2, r9
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <__aeabi_dsub+0x6d8>)
 8002524:	401a      	ands	r2, r3
 8002526:	2301      	movs	r3, #1
 8002528:	4691      	mov	r9, r2
 800252a:	4698      	mov	r8, r3
 800252c:	e62a      	b.n	8002184 <__aeabi_dsub+0x2dc>
 800252e:	0016      	movs	r6, r2
 8002530:	4664      	mov	r4, ip
 8002532:	3e20      	subs	r6, #32
 8002534:	40f4      	lsrs	r4, r6
 8002536:	46a0      	mov	r8, r4
 8002538:	2a20      	cmp	r2, #32
 800253a:	d005      	beq.n	8002548 <__aeabi_dsub+0x6a0>
 800253c:	2640      	movs	r6, #64	; 0x40
 800253e:	4664      	mov	r4, ip
 8002540:	1ab2      	subs	r2, r6, r2
 8002542:	4094      	lsls	r4, r2
 8002544:	4323      	orrs	r3, r4
 8002546:	469a      	mov	sl, r3
 8002548:	4654      	mov	r4, sl
 800254a:	1e63      	subs	r3, r4, #1
 800254c:	419c      	sbcs	r4, r3
 800254e:	4643      	mov	r3, r8
 8002550:	431c      	orrs	r4, r3
 8002552:	e5db      	b.n	800210c <__aeabi_dsub+0x264>
 8002554:	0002      	movs	r2, r0
 8002556:	2400      	movs	r4, #0
 8002558:	2300      	movs	r3, #0
 800255a:	e548      	b.n	8001fee <__aeabi_dsub+0x146>
 800255c:	19dc      	adds	r4, r3, r7
 800255e:	42bc      	cmp	r4, r7
 8002560:	41bf      	sbcs	r7, r7
 8002562:	4461      	add	r1, ip
 8002564:	4689      	mov	r9, r1
 8002566:	427f      	negs	r7, r7
 8002568:	44b9      	add	r9, r7
 800256a:	e738      	b.n	80023de <__aeabi_dsub+0x536>
 800256c:	464b      	mov	r3, r9
 800256e:	4323      	orrs	r3, r4
 8002570:	d100      	bne.n	8002574 <__aeabi_dsub+0x6cc>
 8002572:	e69f      	b.n	80022b4 <__aeabi_dsub+0x40c>
 8002574:	e606      	b.n	8002184 <__aeabi_dsub+0x2dc>
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	000007fe 	.word	0x000007fe
 800257c:	000007ff 	.word	0x000007ff
 8002580:	ff7fffff 	.word	0xff7fffff
 8002584:	08ff      	lsrs	r7, r7, #3
 8002586:	074b      	lsls	r3, r1, #29
 8002588:	433b      	orrs	r3, r7
 800258a:	08cc      	lsrs	r4, r1, #3
 800258c:	e616      	b.n	80021bc <__aeabi_dsub+0x314>
 800258e:	4662      	mov	r2, ip
 8002590:	08db      	lsrs	r3, r3, #3
 8002592:	0752      	lsls	r2, r2, #29
 8002594:	4313      	orrs	r3, r2
 8002596:	4662      	mov	r2, ip
 8002598:	08d4      	lsrs	r4, r2, #3
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	0312      	lsls	r2, r2, #12
 800259e:	4214      	tst	r4, r2
 80025a0:	d007      	beq.n	80025b2 <__aeabi_dsub+0x70a>
 80025a2:	08c8      	lsrs	r0, r1, #3
 80025a4:	4210      	tst	r0, r2
 80025a6:	d104      	bne.n	80025b2 <__aeabi_dsub+0x70a>
 80025a8:	465d      	mov	r5, fp
 80025aa:	0004      	movs	r4, r0
 80025ac:	08fb      	lsrs	r3, r7, #3
 80025ae:	0749      	lsls	r1, r1, #29
 80025b0:	430b      	orrs	r3, r1
 80025b2:	0f5a      	lsrs	r2, r3, #29
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	0752      	lsls	r2, r2, #29
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	e5fe      	b.n	80021bc <__aeabi_dsub+0x314>
 80025be:	2300      	movs	r3, #0
 80025c0:	4a01      	ldr	r2, [pc, #4]	; (80025c8 <__aeabi_dsub+0x720>)
 80025c2:	001c      	movs	r4, r3
 80025c4:	e513      	b.n	8001fee <__aeabi_dsub+0x146>
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	000007ff 	.word	0x000007ff

080025cc <__aeabi_d2iz>:
 80025cc:	000a      	movs	r2, r1
 80025ce:	b530      	push	{r4, r5, lr}
 80025d0:	4c13      	ldr	r4, [pc, #76]	; (8002620 <__aeabi_d2iz+0x54>)
 80025d2:	0053      	lsls	r3, r2, #1
 80025d4:	0309      	lsls	r1, r1, #12
 80025d6:	0005      	movs	r5, r0
 80025d8:	0b09      	lsrs	r1, r1, #12
 80025da:	2000      	movs	r0, #0
 80025dc:	0d5b      	lsrs	r3, r3, #21
 80025de:	0fd2      	lsrs	r2, r2, #31
 80025e0:	42a3      	cmp	r3, r4
 80025e2:	dd04      	ble.n	80025ee <__aeabi_d2iz+0x22>
 80025e4:	480f      	ldr	r0, [pc, #60]	; (8002624 <__aeabi_d2iz+0x58>)
 80025e6:	4283      	cmp	r3, r0
 80025e8:	dd02      	ble.n	80025f0 <__aeabi_d2iz+0x24>
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <__aeabi_d2iz+0x5c>)
 80025ec:	18d0      	adds	r0, r2, r3
 80025ee:	bd30      	pop	{r4, r5, pc}
 80025f0:	2080      	movs	r0, #128	; 0x80
 80025f2:	0340      	lsls	r0, r0, #13
 80025f4:	4301      	orrs	r1, r0
 80025f6:	480d      	ldr	r0, [pc, #52]	; (800262c <__aeabi_d2iz+0x60>)
 80025f8:	1ac0      	subs	r0, r0, r3
 80025fa:	281f      	cmp	r0, #31
 80025fc:	dd08      	ble.n	8002610 <__aeabi_d2iz+0x44>
 80025fe:	480c      	ldr	r0, [pc, #48]	; (8002630 <__aeabi_d2iz+0x64>)
 8002600:	1ac3      	subs	r3, r0, r3
 8002602:	40d9      	lsrs	r1, r3
 8002604:	000b      	movs	r3, r1
 8002606:	4258      	negs	r0, r3
 8002608:	2a00      	cmp	r2, #0
 800260a:	d1f0      	bne.n	80025ee <__aeabi_d2iz+0x22>
 800260c:	0018      	movs	r0, r3
 800260e:	e7ee      	b.n	80025ee <__aeabi_d2iz+0x22>
 8002610:	4c08      	ldr	r4, [pc, #32]	; (8002634 <__aeabi_d2iz+0x68>)
 8002612:	40c5      	lsrs	r5, r0
 8002614:	46a4      	mov	ip, r4
 8002616:	4463      	add	r3, ip
 8002618:	4099      	lsls	r1, r3
 800261a:	000b      	movs	r3, r1
 800261c:	432b      	orrs	r3, r5
 800261e:	e7f2      	b.n	8002606 <__aeabi_d2iz+0x3a>
 8002620:	000003fe 	.word	0x000003fe
 8002624:	0000041d 	.word	0x0000041d
 8002628:	7fffffff 	.word	0x7fffffff
 800262c:	00000433 	.word	0x00000433
 8002630:	00000413 	.word	0x00000413
 8002634:	fffffbed 	.word	0xfffffbed

08002638 <__aeabi_i2d>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	2800      	cmp	r0, #0
 800263c:	d016      	beq.n	800266c <__aeabi_i2d+0x34>
 800263e:	17c3      	asrs	r3, r0, #31
 8002640:	18c5      	adds	r5, r0, r3
 8002642:	405d      	eors	r5, r3
 8002644:	0fc4      	lsrs	r4, r0, #31
 8002646:	0028      	movs	r0, r5
 8002648:	f000 f894 	bl	8002774 <__clzsi2>
 800264c:	4a11      	ldr	r2, [pc, #68]	; (8002694 <__aeabi_i2d+0x5c>)
 800264e:	1a12      	subs	r2, r2, r0
 8002650:	280a      	cmp	r0, #10
 8002652:	dc16      	bgt.n	8002682 <__aeabi_i2d+0x4a>
 8002654:	0003      	movs	r3, r0
 8002656:	002e      	movs	r6, r5
 8002658:	3315      	adds	r3, #21
 800265a:	409e      	lsls	r6, r3
 800265c:	230b      	movs	r3, #11
 800265e:	1a18      	subs	r0, r3, r0
 8002660:	40c5      	lsrs	r5, r0
 8002662:	0552      	lsls	r2, r2, #21
 8002664:	032d      	lsls	r5, r5, #12
 8002666:	0b2d      	lsrs	r5, r5, #12
 8002668:	0d53      	lsrs	r3, r2, #21
 800266a:	e003      	b.n	8002674 <__aeabi_i2d+0x3c>
 800266c:	2400      	movs	r4, #0
 800266e:	2300      	movs	r3, #0
 8002670:	2500      	movs	r5, #0
 8002672:	2600      	movs	r6, #0
 8002674:	051b      	lsls	r3, r3, #20
 8002676:	432b      	orrs	r3, r5
 8002678:	07e4      	lsls	r4, r4, #31
 800267a:	4323      	orrs	r3, r4
 800267c:	0030      	movs	r0, r6
 800267e:	0019      	movs	r1, r3
 8002680:	bd70      	pop	{r4, r5, r6, pc}
 8002682:	380b      	subs	r0, #11
 8002684:	4085      	lsls	r5, r0
 8002686:	0552      	lsls	r2, r2, #21
 8002688:	032d      	lsls	r5, r5, #12
 800268a:	2600      	movs	r6, #0
 800268c:	0b2d      	lsrs	r5, r5, #12
 800268e:	0d53      	lsrs	r3, r2, #21
 8002690:	e7f0      	b.n	8002674 <__aeabi_i2d+0x3c>
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	0000041e 	.word	0x0000041e

08002698 <__aeabi_ui2d>:
 8002698:	b510      	push	{r4, lr}
 800269a:	1e04      	subs	r4, r0, #0
 800269c:	d010      	beq.n	80026c0 <__aeabi_ui2d+0x28>
 800269e:	f000 f869 	bl	8002774 <__clzsi2>
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <__aeabi_ui2d+0x48>)
 80026a4:	1a1b      	subs	r3, r3, r0
 80026a6:	280a      	cmp	r0, #10
 80026a8:	dc11      	bgt.n	80026ce <__aeabi_ui2d+0x36>
 80026aa:	220b      	movs	r2, #11
 80026ac:	0021      	movs	r1, r4
 80026ae:	1a12      	subs	r2, r2, r0
 80026b0:	40d1      	lsrs	r1, r2
 80026b2:	3015      	adds	r0, #21
 80026b4:	030a      	lsls	r2, r1, #12
 80026b6:	055b      	lsls	r3, r3, #21
 80026b8:	4084      	lsls	r4, r0
 80026ba:	0b12      	lsrs	r2, r2, #12
 80026bc:	0d5b      	lsrs	r3, r3, #21
 80026be:	e001      	b.n	80026c4 <__aeabi_ui2d+0x2c>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2200      	movs	r2, #0
 80026c4:	051b      	lsls	r3, r3, #20
 80026c6:	4313      	orrs	r3, r2
 80026c8:	0020      	movs	r0, r4
 80026ca:	0019      	movs	r1, r3
 80026cc:	bd10      	pop	{r4, pc}
 80026ce:	0022      	movs	r2, r4
 80026d0:	380b      	subs	r0, #11
 80026d2:	4082      	lsls	r2, r0
 80026d4:	055b      	lsls	r3, r3, #21
 80026d6:	0312      	lsls	r2, r2, #12
 80026d8:	2400      	movs	r4, #0
 80026da:	0b12      	lsrs	r2, r2, #12
 80026dc:	0d5b      	lsrs	r3, r3, #21
 80026de:	e7f1      	b.n	80026c4 <__aeabi_ui2d+0x2c>
 80026e0:	0000041e 	.word	0x0000041e

080026e4 <__aeabi_f2d>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	0043      	lsls	r3, r0, #1
 80026e8:	0246      	lsls	r6, r0, #9
 80026ea:	0fc4      	lsrs	r4, r0, #31
 80026ec:	20fe      	movs	r0, #254	; 0xfe
 80026ee:	0e1b      	lsrs	r3, r3, #24
 80026f0:	1c59      	adds	r1, r3, #1
 80026f2:	0a75      	lsrs	r5, r6, #9
 80026f4:	4208      	tst	r0, r1
 80026f6:	d00c      	beq.n	8002712 <__aeabi_f2d+0x2e>
 80026f8:	22e0      	movs	r2, #224	; 0xe0
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	4694      	mov	ip, r2
 80026fe:	076d      	lsls	r5, r5, #29
 8002700:	0b36      	lsrs	r6, r6, #12
 8002702:	4463      	add	r3, ip
 8002704:	051b      	lsls	r3, r3, #20
 8002706:	4333      	orrs	r3, r6
 8002708:	07e4      	lsls	r4, r4, #31
 800270a:	4323      	orrs	r3, r4
 800270c:	0028      	movs	r0, r5
 800270e:	0019      	movs	r1, r3
 8002710:	bd70      	pop	{r4, r5, r6, pc}
 8002712:	2b00      	cmp	r3, #0
 8002714:	d114      	bne.n	8002740 <__aeabi_f2d+0x5c>
 8002716:	2d00      	cmp	r5, #0
 8002718:	d01b      	beq.n	8002752 <__aeabi_f2d+0x6e>
 800271a:	0028      	movs	r0, r5
 800271c:	f000 f82a 	bl	8002774 <__clzsi2>
 8002720:	280a      	cmp	r0, #10
 8002722:	dc1c      	bgt.n	800275e <__aeabi_f2d+0x7a>
 8002724:	230b      	movs	r3, #11
 8002726:	002e      	movs	r6, r5
 8002728:	1a1b      	subs	r3, r3, r0
 800272a:	40de      	lsrs	r6, r3
 800272c:	0003      	movs	r3, r0
 800272e:	3315      	adds	r3, #21
 8002730:	409d      	lsls	r5, r3
 8002732:	4a0e      	ldr	r2, [pc, #56]	; (800276c <__aeabi_f2d+0x88>)
 8002734:	0336      	lsls	r6, r6, #12
 8002736:	1a12      	subs	r2, r2, r0
 8002738:	0552      	lsls	r2, r2, #21
 800273a:	0b36      	lsrs	r6, r6, #12
 800273c:	0d53      	lsrs	r3, r2, #21
 800273e:	e7e1      	b.n	8002704 <__aeabi_f2d+0x20>
 8002740:	2d00      	cmp	r5, #0
 8002742:	d009      	beq.n	8002758 <__aeabi_f2d+0x74>
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	0b36      	lsrs	r6, r6, #12
 8002748:	0312      	lsls	r2, r2, #12
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <__aeabi_f2d+0x8c>)
 800274c:	076d      	lsls	r5, r5, #29
 800274e:	4316      	orrs	r6, r2
 8002750:	e7d8      	b.n	8002704 <__aeabi_f2d+0x20>
 8002752:	2300      	movs	r3, #0
 8002754:	2600      	movs	r6, #0
 8002756:	e7d5      	b.n	8002704 <__aeabi_f2d+0x20>
 8002758:	2600      	movs	r6, #0
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <__aeabi_f2d+0x8c>)
 800275c:	e7d2      	b.n	8002704 <__aeabi_f2d+0x20>
 800275e:	0003      	movs	r3, r0
 8002760:	3b0b      	subs	r3, #11
 8002762:	409d      	lsls	r5, r3
 8002764:	002e      	movs	r6, r5
 8002766:	2500      	movs	r5, #0
 8002768:	e7e3      	b.n	8002732 <__aeabi_f2d+0x4e>
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	00000389 	.word	0x00000389
 8002770:	000007ff 	.word	0x000007ff

08002774 <__clzsi2>:
 8002774:	211c      	movs	r1, #28
 8002776:	2301      	movs	r3, #1
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	4298      	cmp	r0, r3
 800277c:	d301      	bcc.n	8002782 <__clzsi2+0xe>
 800277e:	0c00      	lsrs	r0, r0, #16
 8002780:	3910      	subs	r1, #16
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	4298      	cmp	r0, r3
 8002786:	d301      	bcc.n	800278c <__clzsi2+0x18>
 8002788:	0a00      	lsrs	r0, r0, #8
 800278a:	3908      	subs	r1, #8
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	4298      	cmp	r0, r3
 8002790:	d301      	bcc.n	8002796 <__clzsi2+0x22>
 8002792:	0900      	lsrs	r0, r0, #4
 8002794:	3904      	subs	r1, #4
 8002796:	a202      	add	r2, pc, #8	; (adr r2, 80027a0 <__clzsi2+0x2c>)
 8002798:	5c10      	ldrb	r0, [r2, r0]
 800279a:	1840      	adds	r0, r0, r1
 800279c:	4770      	bx	lr
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	02020304 	.word	0x02020304
 80027a4:	01010101 	.word	0x01010101
	...

080027b0 <__clzdi2>:
 80027b0:	b510      	push	{r4, lr}
 80027b2:	2900      	cmp	r1, #0
 80027b4:	d103      	bne.n	80027be <__clzdi2+0xe>
 80027b6:	f7ff ffdd 	bl	8002774 <__clzsi2>
 80027ba:	3020      	adds	r0, #32
 80027bc:	e002      	b.n	80027c4 <__clzdi2+0x14>
 80027be:	0008      	movs	r0, r1
 80027c0:	f7ff ffd8 	bl	8002774 <__clzsi2>
 80027c4:	bd10      	pop	{r4, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)

080027c8 <__divdi3>:
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	4657      	mov	r7, sl
 80027cc:	464e      	mov	r6, r9
 80027ce:	4645      	mov	r5, r8
 80027d0:	46de      	mov	lr, fp
 80027d2:	b5e0      	push	{r5, r6, r7, lr}
 80027d4:	000f      	movs	r7, r1
 80027d6:	0019      	movs	r1, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	0006      	movs	r6, r0
 80027dc:	4698      	mov	r8, r3
 80027de:	0010      	movs	r0, r2
 80027e0:	b083      	sub	sp, #12
 80027e2:	2f00      	cmp	r7, #0
 80027e4:	da07      	bge.n	80027f6 <__divdi3+0x2e>
 80027e6:	0033      	movs	r3, r6
 80027e8:	003c      	movs	r4, r7
 80027ea:	2700      	movs	r7, #0
 80027ec:	425e      	negs	r6, r3
 80027ee:	41a7      	sbcs	r7, r4
 80027f0:	2301      	movs	r3, #1
 80027f2:	425b      	negs	r3, r3
 80027f4:	4698      	mov	r8, r3
 80027f6:	2900      	cmp	r1, #0
 80027f8:	da07      	bge.n	800280a <__divdi3+0x42>
 80027fa:	4643      	mov	r3, r8
 80027fc:	43db      	mvns	r3, r3
 80027fe:	000c      	movs	r4, r1
 8002800:	4698      	mov	r8, r3
 8002802:	0003      	movs	r3, r0
 8002804:	2100      	movs	r1, #0
 8002806:	4258      	negs	r0, r3
 8002808:	41a1      	sbcs	r1, r4
 800280a:	0034      	movs	r4, r6
 800280c:	003d      	movs	r5, r7
 800280e:	4682      	mov	sl, r0
 8002810:	4689      	mov	r9, r1
 8002812:	42b9      	cmp	r1, r7
 8002814:	d86a      	bhi.n	80028ec <__divdi3+0x124>
 8002816:	d067      	beq.n	80028e8 <__divdi3+0x120>
 8002818:	4649      	mov	r1, r9
 800281a:	4650      	mov	r0, sl
 800281c:	f7ff ffc8 	bl	80027b0 <__clzdi2>
 8002820:	4683      	mov	fp, r0
 8002822:	0039      	movs	r1, r7
 8002824:	0030      	movs	r0, r6
 8002826:	f7ff ffc3 	bl	80027b0 <__clzdi2>
 800282a:	465b      	mov	r3, fp
 800282c:	1a1b      	subs	r3, r3, r0
 800282e:	469c      	mov	ip, r3
 8002830:	3b20      	subs	r3, #32
 8002832:	469b      	mov	fp, r3
 8002834:	d46b      	bmi.n	800290e <__divdi3+0x146>
 8002836:	4658      	mov	r0, fp
 8002838:	4651      	mov	r1, sl
 800283a:	4081      	lsls	r1, r0
 800283c:	4660      	mov	r0, ip
 800283e:	000b      	movs	r3, r1
 8002840:	4651      	mov	r1, sl
 8002842:	4081      	lsls	r1, r0
 8002844:	000a      	movs	r2, r1
 8002846:	42bb      	cmp	r3, r7
 8002848:	d900      	bls.n	800284c <__divdi3+0x84>
 800284a:	e072      	b.n	8002932 <__divdi3+0x16a>
 800284c:	42bb      	cmp	r3, r7
 800284e:	d100      	bne.n	8002852 <__divdi3+0x8a>
 8002850:	e079      	b.n	8002946 <__divdi3+0x17e>
 8002852:	0034      	movs	r4, r6
 8002854:	003d      	movs	r5, r7
 8002856:	4659      	mov	r1, fp
 8002858:	1aa4      	subs	r4, r4, r2
 800285a:	419d      	sbcs	r5, r3
 800285c:	2900      	cmp	r1, #0
 800285e:	da00      	bge.n	8002862 <__divdi3+0x9a>
 8002860:	e074      	b.n	800294c <__divdi3+0x184>
 8002862:	2100      	movs	r1, #0
 8002864:	2000      	movs	r0, #0
 8002866:	2601      	movs	r6, #1
 8002868:	9000      	str	r0, [sp, #0]
 800286a:	9101      	str	r1, [sp, #4]
 800286c:	4659      	mov	r1, fp
 800286e:	408e      	lsls	r6, r1
 8002870:	9601      	str	r6, [sp, #4]
 8002872:	4661      	mov	r1, ip
 8002874:	2601      	movs	r6, #1
 8002876:	408e      	lsls	r6, r1
 8002878:	4661      	mov	r1, ip
 800287a:	9600      	str	r6, [sp, #0]
 800287c:	2900      	cmp	r1, #0
 800287e:	d05f      	beq.n	8002940 <__divdi3+0x178>
 8002880:	07d9      	lsls	r1, r3, #31
 8002882:	0856      	lsrs	r6, r2, #1
 8002884:	430e      	orrs	r6, r1
 8002886:	085f      	lsrs	r7, r3, #1
 8002888:	4661      	mov	r1, ip
 800288a:	2201      	movs	r2, #1
 800288c:	2300      	movs	r3, #0
 800288e:	e00c      	b.n	80028aa <__divdi3+0xe2>
 8002890:	42af      	cmp	r7, r5
 8002892:	d101      	bne.n	8002898 <__divdi3+0xd0>
 8002894:	42a6      	cmp	r6, r4
 8002896:	d80a      	bhi.n	80028ae <__divdi3+0xe6>
 8002898:	1ba4      	subs	r4, r4, r6
 800289a:	41bd      	sbcs	r5, r7
 800289c:	1924      	adds	r4, r4, r4
 800289e:	416d      	adcs	r5, r5
 80028a0:	3901      	subs	r1, #1
 80028a2:	18a4      	adds	r4, r4, r2
 80028a4:	415d      	adcs	r5, r3
 80028a6:	2900      	cmp	r1, #0
 80028a8:	d006      	beq.n	80028b8 <__divdi3+0xf0>
 80028aa:	42af      	cmp	r7, r5
 80028ac:	d9f0      	bls.n	8002890 <__divdi3+0xc8>
 80028ae:	3901      	subs	r1, #1
 80028b0:	1924      	adds	r4, r4, r4
 80028b2:	416d      	adcs	r5, r5
 80028b4:	2900      	cmp	r1, #0
 80028b6:	d1f8      	bne.n	80028aa <__divdi3+0xe2>
 80028b8:	9800      	ldr	r0, [sp, #0]
 80028ba:	9901      	ldr	r1, [sp, #4]
 80028bc:	465b      	mov	r3, fp
 80028be:	1900      	adds	r0, r0, r4
 80028c0:	4169      	adcs	r1, r5
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	db4d      	blt.n	8002962 <__divdi3+0x19a>
 80028c6:	002e      	movs	r6, r5
 80028c8:	002c      	movs	r4, r5
 80028ca:	40de      	lsrs	r6, r3
 80028cc:	4663      	mov	r3, ip
 80028ce:	40dc      	lsrs	r4, r3
 80028d0:	465b      	mov	r3, fp
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db55      	blt.n	8002982 <__divdi3+0x1ba>
 80028d6:	0034      	movs	r4, r6
 80028d8:	409c      	lsls	r4, r3
 80028da:	0023      	movs	r3, r4
 80028dc:	4664      	mov	r4, ip
 80028de:	40a6      	lsls	r6, r4
 80028e0:	0032      	movs	r2, r6
 80028e2:	1a80      	subs	r0, r0, r2
 80028e4:	4199      	sbcs	r1, r3
 80028e6:	e003      	b.n	80028f0 <__divdi3+0x128>
 80028e8:	42b0      	cmp	r0, r6
 80028ea:	d995      	bls.n	8002818 <__divdi3+0x50>
 80028ec:	2000      	movs	r0, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	4643      	mov	r3, r8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d004      	beq.n	8002900 <__divdi3+0x138>
 80028f6:	0003      	movs	r3, r0
 80028f8:	000c      	movs	r4, r1
 80028fa:	2100      	movs	r1, #0
 80028fc:	4258      	negs	r0, r3
 80028fe:	41a1      	sbcs	r1, r4
 8002900:	b003      	add	sp, #12
 8002902:	bcf0      	pop	{r4, r5, r6, r7}
 8002904:	46bb      	mov	fp, r7
 8002906:	46b2      	mov	sl, r6
 8002908:	46a9      	mov	r9, r5
 800290a:	46a0      	mov	r8, r4
 800290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800290e:	4662      	mov	r2, ip
 8002910:	4648      	mov	r0, r9
 8002912:	2320      	movs	r3, #32
 8002914:	4651      	mov	r1, sl
 8002916:	4090      	lsls	r0, r2
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	40d9      	lsrs	r1, r3
 800291c:	0003      	movs	r3, r0
 800291e:	9100      	str	r1, [sp, #0]
 8002920:	9900      	ldr	r1, [sp, #0]
 8002922:	4660      	mov	r0, ip
 8002924:	430b      	orrs	r3, r1
 8002926:	4651      	mov	r1, sl
 8002928:	4081      	lsls	r1, r0
 800292a:	000a      	movs	r2, r1
 800292c:	42bb      	cmp	r3, r7
 800292e:	d800      	bhi.n	8002932 <__divdi3+0x16a>
 8002930:	e78c      	b.n	800284c <__divdi3+0x84>
 8002932:	2100      	movs	r1, #0
 8002934:	2000      	movs	r0, #0
 8002936:	9000      	str	r0, [sp, #0]
 8002938:	9101      	str	r1, [sp, #4]
 800293a:	4661      	mov	r1, ip
 800293c:	2900      	cmp	r1, #0
 800293e:	d19f      	bne.n	8002880 <__divdi3+0xb8>
 8002940:	9800      	ldr	r0, [sp, #0]
 8002942:	9901      	ldr	r1, [sp, #4]
 8002944:	e7d4      	b.n	80028f0 <__divdi3+0x128>
 8002946:	42b1      	cmp	r1, r6
 8002948:	d8f3      	bhi.n	8002932 <__divdi3+0x16a>
 800294a:	e782      	b.n	8002852 <__divdi3+0x8a>
 800294c:	4661      	mov	r1, ip
 800294e:	2620      	movs	r6, #32
 8002950:	2701      	movs	r7, #1
 8002952:	1a76      	subs	r6, r6, r1
 8002954:	2000      	movs	r0, #0
 8002956:	2100      	movs	r1, #0
 8002958:	40f7      	lsrs	r7, r6
 800295a:	9000      	str	r0, [sp, #0]
 800295c:	9101      	str	r1, [sp, #4]
 800295e:	9701      	str	r7, [sp, #4]
 8002960:	e787      	b.n	8002872 <__divdi3+0xaa>
 8002962:	4662      	mov	r2, ip
 8002964:	2320      	movs	r3, #32
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	002a      	movs	r2, r5
 800296a:	409a      	lsls	r2, r3
 800296c:	0026      	movs	r6, r4
 800296e:	0013      	movs	r3, r2
 8002970:	4662      	mov	r2, ip
 8002972:	40d6      	lsrs	r6, r2
 8002974:	002c      	movs	r4, r5
 8002976:	431e      	orrs	r6, r3
 8002978:	4663      	mov	r3, ip
 800297a:	40dc      	lsrs	r4, r3
 800297c:	465b      	mov	r3, fp
 800297e:	2b00      	cmp	r3, #0
 8002980:	daa9      	bge.n	80028d6 <__divdi3+0x10e>
 8002982:	4662      	mov	r2, ip
 8002984:	2320      	movs	r3, #32
 8002986:	0035      	movs	r5, r6
 8002988:	4094      	lsls	r4, r2
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	40dd      	lsrs	r5, r3
 800298e:	0023      	movs	r3, r4
 8002990:	432b      	orrs	r3, r5
 8002992:	e7a3      	b.n	80028dc <__divdi3+0x114>

08002994 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002998:	f001 fcde 	bl	8004358 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800299c:	f000 f80e 	bl	80029bc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80029aa:	2301      	movs	r3, #1
 80029ac:	425b      	negs	r3, r3
 80029ae:	0018      	movs	r0, r3
 80029b0:	f018 ffae 	bl	801b910 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <LoRaWAN_Init>:
//MX_I2C1_Init(hi2c1);
//MX_USART2_Init();
/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af04      	add	r7, sp, #16
	   	bmp280.addr = BMP280_I2C_ADDRESS_0;
	   	bmp280.i2c = &hi2c1;
*/
	   //float pressure1, temperature1, humidity1;
  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 80029c2:	2002      	movs	r0, #2
 80029c4:	f002 fb86 	bl	80050d4 <BSP_LED_Init>
  LED_Init(LED_RED1);
 80029c8:	2001      	movs	r0, #1
 80029ca:	f002 fb83 	bl	80050d4 <BSP_LED_Init>
  LED_Init(LED_RED2);
 80029ce:	2003      	movs	r0, #3
 80029d0:	f002 fb80 	bl	80050d4 <BSP_LED_Init>
  /* Get LoRa APP version*/
//  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, "###### Версия протокола:   V%X.%X.%X\r\n",
 80029d4:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <LoRaWAN_Init+0x114>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	9202      	str	r2, [sp, #8]
 80029da:	2200      	movs	r2, #0
 80029dc:	9201      	str	r2, [sp, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	9200      	str	r2, [sp, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	2002      	movs	r0, #2
 80029e8:	f018 fbd0 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT)); // версия радио Middleware
  // APP_LOG(TS_OFF, VLEVEL_M, "MW_:   V%X.%X.%X\r\n",
//  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== EEEPROM EST====\r\n");
  //	 (uint8_t) buffer[20]);
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 80029ec:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <LoRaWAN_Init+0x118>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	4251      	negs	r1, r2
 80029f2:	4839      	ldr	r0, [pc, #228]	; (8002ad8 <LoRaWAN_Init+0x11c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	9200      	str	r2, [sp, #0]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f019 fa51 	bl	801bea0 <UTIL_TIMER_Create>
  // HAL_LPTIM_Counter_Start_IT(&hlptim,1000);
 // HAL_LPTIM_TimeOut_Start(&TxLedTimer, uint32_t Period, uint32_t Timeout);
  //  HAL_LPTIM_TimeOut_Start(&TxLedTimer,5000,1000);
   UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <LoRaWAN_Init+0x120>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	4251      	negs	r1, r2
 8002a04:	4836      	ldr	r0, [pc, #216]	; (8002ae0 <LoRaWAN_Init+0x124>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	9200      	str	r2, [sp, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f019 fa48 	bl	801bea0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002a10:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <LoRaWAN_Init+0x128>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	4251      	negs	r1, r2
 8002a16:	4834      	ldr	r0, [pc, #208]	; (8002ae8 <LoRaWAN_Init+0x12c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	9200      	str	r2, [sp, #0]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f019 fa3f 	bl	801bea0 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);// 3 стр отрубают светодиоды если их не будет,
 8002a22:	23fa      	movs	r3, #250	; 0xfa
 8002a24:	005a      	lsls	r2, r3, #1
 8002a26:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <LoRaWAN_Init+0x11c>)
 8002a28:	0011      	movs	r1, r2
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f019 fb60 	bl	801c0f0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002a30:	23fa      	movs	r3, #250	; 0xfa
 8002a32:	005a      	lsls	r2, r3, #1
 8002a34:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <LoRaWAN_Init+0x124>)
 8002a36:	0011      	movs	r1, r2
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f019 fb59 	bl	801c0f0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002a3e:	23fa      	movs	r3, #250	; 0xfa
 8002a40:	005a      	lsls	r2, r3, #1
 8002a42:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <LoRaWAN_Init+0x12c>)
 8002a44:	0011      	movs	r1, r2
 8002a46:	0018      	movs	r0, r3
 8002a48:	f019 fb52 	bl	801c0f0 <UTIL_TIMER_SetPeriod>
 // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <LoRaWAN_Init+0x130>)
 8002a4e:	001a      	movs	r2, r3
 8002a50:	2100      	movs	r1, #0
 8002a52:	2001      	movs	r0, #1
 8002a54:	f019 f83e 	bl	801bad4 <UTIL_SEQ_RegTask>
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <LoRaWAN_Init+0x134>)
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f019 f838 	bl	801bad4 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8002a64:	f000 fb2c 	bl	80030c0 <LoraInfo_Init>
  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <LoRaWAN_Init+0x138>)
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f00a fbce 	bl	800d20c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <LoRaWAN_Init+0x13c>)
 8002a72:	0018      	movs	r0, r3
 8002a74:	f00a fc10 	bl	800d298 <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <LoRaWAN_Init+0x12c>)
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f019 fa48 	bl	801bf10 <UTIL_TIMER_Start>
  // HAL_LPTIM_Counter_Start_IT(&JoinLedTimer,1000); // попытка переделать светодиодом под LPTIM
  LmHandlerJoin(ActivationType);
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <LoRaWAN_Init+0x140>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f00a fd57 	bl	800d538 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <LoRaWAN_Init+0x144>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d115      	bne.n	8002abe <LoRaWAN_Init+0x102>
  {
    /* send every time timer elapses */
 uint32_t APPTXDUTYCYCLE; // Для конфигурации периода передачи только нужно добавить в EEPROM
 APPTXDUTYCYCLE = 10000; // Для конфигурации периода передачи
 8002a92:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <LoRaWAN_Init+0x148>)
 8002a94:	607b      	str	r3, [r7, #4]
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002a96:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <LoRaWAN_Init+0x14c>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4251      	negs	r1, r2
 8002a9c:	481b      	ldr	r0, [pc, #108]	; (8002b0c <LoRaWAN_Init+0x150>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	9200      	str	r2, [sp, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f019 f9fc 	bl	801bea0 <UTIL_TIMER_Create>
//    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
    UTIL_TIMER_SetPeriod(&TxTimer,  APPTXDUTYCYCLE);
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <LoRaWAN_Init+0x150>)
 8002aac:	0011      	movs	r1, r2
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f019 fb1e 	bl	801c0f0 <UTIL_TIMER_SetPeriod>
    //  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    //  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // NEW
      UTIL_TIMER_Start(&TxTimer);
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <LoRaWAN_Init+0x150>)
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f019 fa2a 	bl	801bf10 <UTIL_TIMER_Start>
  /* bmp280_init_default_params(&bmp280.params);
   	bmp280.addr = BMP280_I2C_ADDRESS_0;
   	bmp280.i2c = &hi2c1;
   	*/
  /* USER CODE END LoRaWAN_Init_Last */
}
 8002abc:	e003      	b.n	8002ac6 <LoRaWAN_Init+0x10a>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002abe:	2101      	movs	r1, #1
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f002 fbc9 	bl	8005258 <BSP_PB_Init>
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b002      	add	sp, #8
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	0801d3f4 	.word	0x0801d3f4
 8002ad4:	08002f25 	.word	0x08002f25
 8002ad8:	20000300 	.word	0x20000300
 8002adc:	08002f3b 	.word	0x08002f3b
 8002ae0:	20000318 	.word	0x20000318
 8002ae4:	08002f51 	.word	0x08002f51
 8002ae8:	20000330 	.word	0x20000330
 8002aec:	0800d47d 	.word	0x0800d47d
 8002af0:	08002c45 	.word	0x08002c45
 8002af4:	2000000c 	.word	0x2000000c
 8002af8:	2000002c 	.word	0x2000002c
 8002afc:	20000008 	.word	0x20000008
 8002b00:	200002e7 	.word	0x200002e7
 8002b04:	00002710 	.word	0x00002710
 8002b08:	08002f01 	.word	0x08002f01
 8002b0c:	200002e8 	.word	0x200002e8

08002b10 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8002b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b12:	b089      	sub	sp, #36	; 0x24
 8002b14:	af06      	add	r7, sp, #24
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d100      	bne.n	8002b22 <OnRxData+0x12>
 8002b20:	e07a      	b.n	8002c18 <OnRxData+0x108>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d100      	bne.n	8002b2a <OnRxData+0x1a>
 8002b28:	e076      	b.n	8002c18 <OnRxData+0x108>
  {
    LED_On(LED_BLUE);
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	f002 fb40 	bl	80051b0 <BSP_LED_On>
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n ========== Индикация приёма данных ==========\r\n");
 8002b30:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <OnRxData+0x11c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	2100      	movs	r1, #0
 8002b36:	2002      	movs	r0, #2
 8002b38:	f018 fb28 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, " D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	7b12      	ldrb	r2, [r2, #12]
 8002b44:	b252      	sxtb	r2, r2
 8002b46:	0011      	movs	r1, r2
 8002b48:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <OnRxData+0x120>)
 8002b4a:	0089      	lsls	r1, r1, #2
 8002b4c:	588a      	ldr	r2, [r1, r2]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	7809      	ldrb	r1, [r1, #0]
 8002b52:	0008      	movs	r0, r1
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	7889      	ldrb	r1, [r1, #2]
 8002b58:	b249      	sxtb	r1, r1
 8002b5a:	000c      	movs	r4, r1
 8002b5c:	6839      	ldr	r1, [r7, #0]
 8002b5e:	78c9      	ldrb	r1, [r1, #3]
 8002b60:	b249      	sxtb	r1, r1
 8002b62:	000d      	movs	r5, r1
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	7909      	ldrb	r1, [r1, #4]
 8002b68:	b249      	sxtb	r1, r1
 8002b6a:	000e      	movs	r6, r1
 8002b6c:	4931      	ldr	r1, [pc, #196]	; (8002c34 <OnRxData+0x124>)
 8002b6e:	9605      	str	r6, [sp, #20]
 8002b70:	9504      	str	r5, [sp, #16]
 8002b72:	9403      	str	r4, [sp, #12]
 8002b74:	9002      	str	r0, [sp, #8]
 8002b76:	9201      	str	r2, [sp, #4]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	000b      	movs	r3, r1
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	2003      	movs	r0, #3
 8002b82:	f018 fb03 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d020      	beq.n	8002bd0 <OnRxData+0xc0>
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d144      	bne.n	8002c1c <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d116      	bne.n	8002bc8 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d00d      	beq.n	8002bc0 <OnRxData+0xb0>
 8002ba4:	dc12      	bgt.n	8002bcc <OnRxData+0xbc>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <OnRxData+0xa0>
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d004      	beq.n	8002bb8 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8002bae:	e00d      	b.n	8002bcc <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f00a fe1b 	bl	800d7ec <LmHandlerRequestClass>
              break;
 8002bb6:	e00a      	b.n	8002bce <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f00a fe17 	bl	800d7ec <LmHandlerRequestClass>
              break;
 8002bbe:	e006      	b.n	8002bce <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f00a fe13 	bl	800d7ec <LmHandlerRequestClass>
              break;
 8002bc6:	e002      	b.n	8002bce <OnRxData+0xbe>
          }
        }
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	e02a      	b.n	8002c22 <OnRxData+0x112>
              break;
 8002bcc:	46c0      	nop			; (mov r8, r8)
        break;
 8002bce:	e028      	b.n	8002c22 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	785b      	ldrb	r3, [r3, #1]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d123      	bne.n	8002c20 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2201      	movs	r2, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <OnRxData+0x128>)
 8002be6:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8002be8:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <OnRxData+0x128>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8002bf0:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <OnRxData+0x12c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2003      	movs	r0, #3
 8002bf8:	f018 fac8 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>

            LED_Off(LED_RED1);
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f002 faf3 	bl	80051e8 <BSP_LED_Off>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");

            LED_On(LED_RED1);
          }
        }
        break;
 8002c02:	e00d      	b.n	8002c20 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <OnRxData+0x130>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	f018 fabe 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 8002c10:	2001      	movs	r0, #1
 8002c12:	f002 facd 	bl	80051b0 <BSP_LED_On>
        break;
 8002c16:	e003      	b.n	8002c20 <OnRxData+0x110>
        /* USER CODE BEGIN OnRxData_Switch_default */

        /* USER CODE END OnRxData_Switch_default */
        break;
    }
  }
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	e002      	b.n	8002c22 <OnRxData+0x112>
        break;
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	e000      	b.n	8002c22 <OnRxData+0x112>
        break;
 8002c20:	46c0      	nop			; (mov r8, r8)

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b003      	add	sp, #12
 8002c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	0801d42c 	.word	0x0801d42c
 8002c30:	20000034 	.word	0x20000034
 8002c34:	0801d474 	.word	0x0801d474
 8002c38:	200002e6 	.word	0x200002e6
 8002c3c:	0801d4b8 	.word	0x0801d4b8
 8002c40:	0801d4c4 	.word	0x0801d4c4

08002c44 <SendTxData>:

static void SendTxData(void)
{
 8002c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c46:	b0e3      	sub	sp, #396	; 0x18c
 8002c48:	af06      	add	r7, sp, #24
	// uint8_t payload = "textovik";
	 uint16_t pressure = 0;
 8002c4a:	23b7      	movs	r3, #183	; 0xb7
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	2200      	movs	r2, #0
 8002c52:	801a      	strh	r2, [r3, #0]
	 int16_t temperature = 0;
 8002c54:	23b6      	movs	r3, #182	; 0xb6
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	801a      	strh	r2, [r3, #0]
  	//int16_t temperature = 0;
  	uint16_t Defbuff;  // для счётчика с охранной кнопки
  sensor_t sensor_data;
  uint16_t size;
  uint8_t Datasens[256];
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
  bmp280_params_t params;
	RTC_TimeTypeDef sTime1;
  	RTC_DateTypeDef sDate1;
  	uint8_t buffer[20];
  	volatile uint16_t adc = 0;
 8002c62:	4b92      	ldr	r3, [pc, #584]	; (8002eac <SendTxData+0x268>)
 8002c64:	22b8      	movs	r2, #184	; 0xb8
 8002c66:	0052      	lsls	r2, r2, #1
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	19db      	adds	r3, r3, r7
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	801a      	strh	r2, [r3, #0]
#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
   uint16_t humidity = 0;
 8002c70:	23b5      	movs	r3, #181	; 0xb5
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2200      	movs	r2, #0
 8002c78:	801a      	strh	r2, [r3, #0]
  uint32_t i = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	22b2      	movs	r2, #178	; 0xb2
 8002c7e:	0052      	lsls	r2, r2, #1
 8002c80:	18ba      	adds	r2, r7, r2
 8002c82:	6013      	str	r3, [r2, #0]
  int32_t latitude = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	22b0      	movs	r2, #176	; 0xb0
 8002c88:	0052      	lsls	r2, r2, #1
 8002c8a:	18ba      	adds	r2, r7, r2
 8002c8c:	6013      	str	r3, [r2, #0]
  int32_t longitude = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	22ae      	movs	r2, #174	; 0xae
 8002c92:	0052      	lsls	r2, r2, #1
 8002c94:	18ba      	adds	r2, r7, r2
 8002c96:	6013      	str	r3, [r2, #0]
  uint16_t altitudeGps = 0;
 8002c98:	23ad      	movs	r3, #173	; 0xad
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	801a      	strh	r2, [r3, #0]
  #else
   temperature = (SYS_GetTemperatureLevel() >> 8);
  #endif  /* SENSOR_ENABLED */
  /*  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */

    AppData.Port = LORAWAN_USER_APP_PORT;
 8002ca2:	4b83      	ldr	r3, [pc, #524]	; (8002eb0 <SendTxData+0x26c>)
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	701a      	strb	r2, [r3, #0]
  //
  // MX_I2C1_Init();
 // MX_USART2_Init();
  // MX_I2C1_Init();
  // BSP_SPI1_Init();
  BSP_I2C1_Init();
 8002ca8:	f002 f8cc 	bl	8004e44 <BSP_I2C1_Init>
  MX_ADC_Init();
 8002cac:	f000 fa3c 	bl	8003128 <MX_ADC_Init>
  MX_LPTIM1_Init();
 8002cb0:	f000 f9f8 	bl	80030a4 <MX_LPTIM1_Init>
    		 */
  // MX_I2C1_Init();
 // HAL_I2C_GetState;// cntGetValue(&Defbuff);  // здесь будет сбор значения вскрытий// HTS221_Init(pObj);//HTS221_GetCapabilities(pObj, Capabilities);  //  HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
    //	  HAL_Delay(200);  //	UTIL_TIMER_Create(&ReadLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);  // UTIL_TIMER_SetPeriod(&ReadLedTimer, 5000);  	//UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
  	  bmp280_init_default_params(&bmp280.params);
 8002cb4:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <SendTxData+0x270>)
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f019 fdc6 	bl	801c848 <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002cbc:	4b7e      	ldr	r3, [pc, #504]	; (8002eb8 <SendTxData+0x274>)
 8002cbe:	2276      	movs	r2, #118	; 0x76
 8002cc0:	849a      	strh	r2, [r3, #36]	; 0x24
    	bmp280.i2c = &hi2c1;
 8002cc2:	4b7d      	ldr	r3, [pc, #500]	; (8002eb8 <SendTxData+0x274>)
 8002cc4:	4a7d      	ldr	r2, [pc, #500]	; (8002ebc <SendTxData+0x278>)
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
    	bmp280_init(&bmp280, &bmp280.params);
 8002cc8:	4a7a      	ldr	r2, [pc, #488]	; (8002eb4 <SendTxData+0x270>)
 8002cca:	4b7b      	ldr	r3, [pc, #492]	; (8002eb8 <SendTxData+0x274>)
 8002ccc:	0011      	movs	r1, r2
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f019 ff4e 	bl	801cb70 <bmp280_init>
    	HAL_Delay(2000);
 8002cd4:	23fa      	movs	r3, #250	; 0xfa
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f001 fcfa 	bl	80046d2 <HAL_Delay>
    	 // HTS221_GetCapabilities(&hts221, temperature);
  // bmp280.i2c = &hi2c1;
  //  bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1); старое
    	// HAL_Delay(100);
//    	 bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
    	 bmp280_read_fixed(&bmp280, &temperaturei, &pressurei, &humidityi);
 8002cde:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <SendTxData+0x27c>)
 8002ce0:	4a78      	ldr	r2, [pc, #480]	; (8002ec4 <SendTxData+0x280>)
 8002ce2:	4979      	ldr	r1, [pc, #484]	; (8002ec8 <SendTxData+0x284>)
 8002ce4:	4874      	ldr	r0, [pc, #464]	; (8002eb8 <SendTxData+0x274>)
 8002ce6:	f01a fa43 	bl	801d170 <bmp280_read_fixed>
    	 int32_t temp_decimal = temperaturei % 100; // Получаем 2-ю цифру после запятой
 8002cea:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <SendTxData+0x284>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2164      	movs	r1, #100	; 0x64
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7fd fb81 	bl	80003f8 <__aeabi_idivmod>
 8002cf6:	000b      	movs	r3, r1
 8002cf8:	22aa      	movs	r2, #170	; 0xaa
 8002cfa:	0052      	lsls	r2, r2, #1
 8002cfc:	18ba      	adds	r2, r7, r2
 8002cfe:	6013      	str	r3, [r2, #0]
//    	HAL_Delay(200);
//    	APP_LOG(TS_OFF, VLEVEL_M, " Температура:%d | Влажность:%d\r\n", Datasens, Datasens);
//    	 APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//    		       		numberdev, temperaturei, humidityi, per, chargebattery);

    	 if(bmp280.dig_T1!=0)
 8002d00:	4b6d      	ldr	r3, [pc, #436]	; (8002eb8 <SendTxData+0x274>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <SendTxData+0xd2>
    	//*/
    	{
//    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Temp, hum sensor Init ====\r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, " Датчик измерения активен \n");
 8002d08:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <SendTxData+0x288>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	2002      	movs	r0, #2
 8002d10:	f018 fa3c 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
 8002d14:	e005      	b.n	8002d22 <SendTxData+0xde>
    	} //*/
    	 else
    	 {

//    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Sensor initialization failed ====\r\n");
    		 APP_LOG(TS_OFF, VLEVEL_M, "<  Ошибка инициализации датчика >  \r\n");
 8002d16:	4b6e      	ldr	r3, [pc, #440]	; (8002ed0 <SendTxData+0x28c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f018 fa35 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    	 }

    	 if(temperaturei/100>=1 && temperaturei/100<=30)
 8002d22:	4b69      	ldr	r3, [pc, #420]	; (8002ec8 <SendTxData+0x284>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b63      	cmp	r3, #99	; 0x63
 8002d28:	dd0b      	ble.n	8002d42 <SendTxData+0xfe>
 8002d2a:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <SendTxData+0x284>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a69      	ldr	r2, [pc, #420]	; (8002ed4 <SendTxData+0x290>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	dc06      	bgt.n	8002d42 <SendTxData+0xfe>
//    		 if(temperature1>=1 && temperature1<=30 && pressure1>=1)
    	     	//*/
    	  {
//    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== All parameters normal ====\r\n");
    	     	  APP_LOG(TS_OFF, VLEVEL_M, " Параметры окружающей среды в норме \r\n");
 8002d34:	4b68      	ldr	r3, [pc, #416]	; (8002ed8 <SendTxData+0x294>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2002      	movs	r0, #2
 8002d3c:	f018 fa26 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
 8002d40:	e005      	b.n	8002d4e <SendTxData+0x10a>
    	  } //*/
    	     	 else
    	   {
//    	     		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Accident ====\r\n");
    	       		 APP_LOG(TS_OFF, VLEVEL_M, " < Отклонение от нормы > \r\n");
 8002d42:	4b66      	ldr	r3, [pc, #408]	; (8002edc <SendTxData+0x298>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	2100      	movs	r1, #0
 8002d48:	2002      	movs	r0, #2
 8002d4a:	f018 fa1f 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    	   }
    	 modelnum = 1;
 8002d4e:	4b64      	ldr	r3, [pc, #400]	; (8002ee0 <SendTxData+0x29c>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
    	 // EEPROMWRITE modelnum
    	 numberdev = 0x01;  // new 0b00010001
 8002d54:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <SendTxData+0x2a0>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	801a      	strh	r2, [r3, #0]
    	 per = 0xA; // new
 8002d5a:	4b63      	ldr	r3, [pc, #396]	; (8002ee8 <SendTxData+0x2a4>)
 8002d5c:	220a      	movs	r2, #10
 8002d5e:	801a      	strh	r2, [r3, #0]
         FirmwareVersion = 1.1;
 8002d60:	4b62      	ldr	r3, [pc, #392]	; (8002eec <SendTxData+0x2a8>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
  // AppData.Buffer[i++] = (uint8_t)temperature1 >> 8 ;
  //  AppData.Buffer[i++] = (int)humidity1 >> 16;


    //AppData.Buffer[i++] = 0x00;
     AppData.Buffer[i++] = numberdev; // new номер устройства
 8002d66:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <SendTxData+0x2a0>)
 8002d68:	2000      	movs	r0, #0
 8002d6a:	5e18      	ldrsh	r0, [r3, r0]
 8002d6c:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <SendTxData+0x26c>)
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	26b2      	movs	r6, #178	; 0xb2
 8002d72:	0076      	lsls	r6, r6, #1
 8002d74:	19bb      	adds	r3, r7, r6
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	1c59      	adds	r1, r3, #1
 8002d7a:	19bc      	adds	r4, r7, r6
 8002d7c:	6021      	str	r1, [r4, #0]
 8002d7e:	18d3      	adds	r3, r2, r3
 8002d80:	b2c2      	uxtb	r2, r0
 8002d82:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = temperaturei;
 8002d84:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <SendTxData+0x284>)
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <SendTxData+0x26c>)
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	19bb      	adds	r3, r7, r6
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	1c59      	adds	r1, r3, #1
 8002d92:	19bc      	adds	r4, r7, r6
 8002d94:	6021      	str	r1, [r4, #0]
 8002d96:	18d3      	adds	r3, r2, r3
 8002d98:	b2c2      	uxtb	r2, r0
 8002d9a:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = humidityi;
 8002d9c:	4b48      	ldr	r3, [pc, #288]	; (8002ec0 <SendTxData+0x27c>)
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <SendTxData+0x26c>)
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	19bb      	adds	r3, r7, r6
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	1c59      	adds	r1, r3, #1
 8002daa:	19bc      	adds	r4, r7, r6
 8002dac:	6021      	str	r1, [r4, #0]
 8002dae:	18d3      	adds	r3, r2, r3
 8002db0:	b2c2      	uxtb	r2, r0
 8002db2:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = per; // new период включения прибора
 8002db4:	4b4c      	ldr	r3, [pc, #304]	; (8002ee8 <SendTxData+0x2a4>)
 8002db6:	2000      	movs	r0, #0
 8002db8:	5e18      	ldrsh	r0, [r3, r0]
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <SendTxData+0x26c>)
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	19bb      	adds	r3, r7, r6
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	1c59      	adds	r1, r3, #1
 8002dc4:	19bc      	adds	r4, r7, r6
 8002dc6:	6021      	str	r1, [r4, #0]
 8002dc8:	18d3      	adds	r3, r2, r3
 8002dca:	b2c2      	uxtb	r2, r0
 8002dcc:	701a      	strb	r2, [r3, #0]
//     temperatureint = temperature1;
//     humidityint = humidity1;
      // AppData.Buffer[i++] = BAT_CR2032; // new заряд батареи, CR2032 старая батарейка, новая LS14500
  // SYS_GetBatteryLevel(); // new заряд батареи
     chargebattery = GetBatteryLevel(); // new заряд батареи
 8002dce:	f001 faef 	bl	80043b0 <GetBatteryLevel>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	b21a      	sxth	r2, r3
 8002dd6:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <SendTxData+0x2ac>)
 8002dd8:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = batteryLevel; // new заряд батареи
     AppData.Buffer[i++] = chargebattery;
 8002dda:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <SendTxData+0x2ac>)
 8002ddc:	2000      	movs	r0, #0
 8002dde:	5e18      	ldrsh	r0, [r3, r0]
 8002de0:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <SendTxData+0x26c>)
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	19bb      	adds	r3, r7, r6
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	1c59      	adds	r1, r3, #1
 8002dea:	19bc      	adds	r4, r7, r6
 8002dec:	6021      	str	r1, [r4, #0]
 8002dee:	18d3      	adds	r3, r2, r3
 8002df0:	b2c2      	uxtb	r2, r0
 8002df2:	701a      	strb	r2, [r3, #0]
//     HAL_Delay(1000);
//     APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//       		numberdev, temperatureint, humidityint, per, chargebattery);
//     APP_LOG(TS_OFF, VLEVEL_M, "Заряд батареи:%d\r\n", chargebattery);
     HAL_Delay(200);
 8002df4:	20c8      	movs	r0, #200	; 0xc8
 8002df6:	f001 fc6c 	bl	80046d2 <HAL_Delay>

		 APP_LOG(TS_OFF, VLEVEL_M, " Номер устройства:%d | Температура:%d,%02d °C | Влажность:%d%  | Период передачи:%d сек | Заряд батареи:%d%\r\n",
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <SendTxData+0x2a0>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	5e9b      	ldrsh	r3, [r3, r2]
 8002e00:	001c      	movs	r4, r3
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <SendTxData+0x284>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2164      	movs	r1, #100	; 0x64
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7fd fa0f 	bl	800022c <__divsi3>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	001d      	movs	r5, r3
 8002e12:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <SendTxData+0x27c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	22fa      	movs	r2, #250	; 0xfa
 8002e18:	0091      	lsls	r1, r2, #2
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7fd fa06 	bl	800022c <__divsi3>
 8002e20:	0003      	movs	r3, r0
 8002e22:	0019      	movs	r1, r3
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <SendTxData+0x2a4>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	5e9b      	ldrsh	r3, [r3, r2]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <SendTxData+0x2ac>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	5e9b      	ldrsh	r3, [r3, r2]
 8002e32:	4a30      	ldr	r2, [pc, #192]	; (8002ef4 <SendTxData+0x2b0>)
 8002e34:	9305      	str	r3, [sp, #20]
 8002e36:	9004      	str	r0, [sp, #16]
 8002e38:	9103      	str	r1, [sp, #12]
 8002e3a:	23aa      	movs	r3, #170	; 0xaa
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	9302      	str	r3, [sp, #8]
 8002e44:	9501      	str	r5, [sp, #4]
 8002e46:	9400      	str	r4, [sp, #0]
 8002e48:	0013      	movs	r3, r2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2002      	movs	r0, #2
 8002e50:	f018 f99c 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);

	   }
*/
  AppData.BufferSize = i;
 8002e54:	19bb      	adds	r3, r7, r6
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <SendTxData+0x26c>)
 8002e5c:	705a      	strb	r2, [r3, #1]
  /*  #endif /* CAYENNE_LPP */

   if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8002e5e:	2338      	movs	r3, #56	; 0x38
 8002e60:	18fa      	adds	r2, r7, r3
 8002e62:	4813      	ldr	r0, [pc, #76]	; (8002eb0 <SendTxData+0x26c>)
 8002e64:	2300      	movs	r3, #0
 8002e66:	2100      	movs	r1, #0
 8002e68:	f00a fbee 	bl	800d648 <LmHandlerSend>
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	d106      	bne.n	8002e7e <SendTxData+0x23a>
  {
	  APP_LOG(TS_OFF, VLEVEL_L, " Запрос на подключение отправлен\r\n");
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <SendTxData+0x2b4>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	2001      	movs	r0, #1
 8002e78:	f018 f988 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_L, " Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
  }
  /* USER CODE BEGIN SendTxData_2 */
  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /* USER CODE END SendTxData_2 */
}
 8002e7c:	e011      	b.n	8002ea2 <SendTxData+0x25e>
  else if (nextTxIn > 0)
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00e      	beq.n	8002ea2 <SendTxData+0x25e>
    APP_LOG(TS_OFF, VLEVEL_L, " Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
 8002e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e86:	22fa      	movs	r2, #250	; 0xfa
 8002e88:	0091      	lsls	r1, r2, #2
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7fd f944 	bl	8000118 <__udivsi3>
 8002e90:	0003      	movs	r3, r0
 8002e92:	001a      	movs	r2, r3
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <SendTxData+0x2b8>)
 8002e96:	9200      	str	r2, [sp, #0]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f018 f975 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b05d      	add	sp, #372	; 0x174
 8002ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	fffffe92 	.word	0xfffffe92
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000374 	.word	0x20000374
 8002eb8:	20000348 	.word	0x20000348
 8002ebc:	20000744 	.word	0x20000744
 8002ec0:	200004b8 	.word	0x200004b8
 8002ec4:	200004bc 	.word	0x200004bc
 8002ec8:	200004b4 	.word	0x200004b4
 8002ecc:	0801d4d0 	.word	0x0801d4d0
 8002ed0:	0801d504 	.word	0x0801d504
 8002ed4:	00000c1b 	.word	0x00000c1b
 8002ed8:	0801d544 	.word	0x0801d544
 8002edc:	0801d58c 	.word	0x0801d58c
 8002ee0:	200004a8 	.word	0x200004a8
 8002ee4:	200004a4 	.word	0x200004a4
 8002ee8:	200004a6 	.word	0x200004a6
 8002eec:	200004ac 	.word	0x200004ac
 8002ef0:	200004c0 	.word	0x200004c0
 8002ef4:	0801d5bc 	.word	0x0801d5bc
 8002ef8:	0801d66c 	.word	0x0801d66c
 8002efc:	0801d6ac 	.word	0x0801d6ac

08002f00 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2002      	movs	r0, #2
 8002f0c:	f018 fe06 	bl	801bb1c <UTIL_SEQ_SetTask>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <OnTxTimerEvent+0x20>)
 8002f12:	0018      	movs	r0, r3
 8002f14:	f018 fffc 	bl	801bf10 <UTIL_TIMER_Start>
 // UTIL_TIMER_Stop(&TxTimer); // попытка передать только одно сообщение
//HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200002e8 	.word	0x200002e8

08002f24 <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f002 f95b 	bl	80051e8 <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b002      	add	sp, #8
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE) ;
 8002f42:	2002      	movs	r0, #2
 8002f44:	f002 f950 	bl	80051e8 <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1) ;
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f002 f961 	bl	8005220 <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b002      	add	sp, #8
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af04      	add	r7, sp, #16
 8002f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d042      	beq.n	8002ffc <OnTxData+0x94>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d03e      	beq.n	8002ffc <OnTxData+0x94>
  {
    LED_On(LED_RED2) ;
 8002f7e:	2003      	movs	r0, #3
 8002f80:	f002 f916 	bl	80051b0 <BSP_LED_On>
   // LED_Off(LED_RED2);

    UTIL_TIMER_Start(&TxLedTimer);
 8002f84:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <OnTxData+0x9c>)
 8002f86:	0018      	movs	r0, r3
 8002f88:	f018 ffc2 	bl	801bf10 <UTIL_TIMER_Start>
    //HAL_LPTIM_Counter_Start_IT(&TxTimer,1000);
//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirmation =============\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, " MCPS Подтверждение \r");
 8002f8c:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <OnTxData+0xa0>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	2002      	movs	r0, #2
 8002f94:	f018 f8fa 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
//            params->AppData.Port, params->Datarate, params->TxPower,params->Channel);
//    int8_t txPower2 = 7;
//    LmHandlerSetTxPower(txPower2);
//    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Мощность:%d | Канал связи:%d\r\n",
//    		params->UplinkCounter, params->AppData.Port, params->TxPower, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Канал связи:%d\r",
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	7b12      	ldrb	r2, [r2, #12]
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	7d52      	ldrb	r2, [r2, #21]
 8002fa6:	0010      	movs	r0, r2
 8002fa8:	4a18      	ldr	r2, [pc, #96]	; (800300c <OnTxData+0xa4>)
 8002faa:	9002      	str	r0, [sp, #8]
 8002fac:	9101      	str	r1, [sp, #4]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	0013      	movs	r3, r2
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	2002      	movs	r0, #2
 8002fb8:	f018 f8e8 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
       		params->UplinkCounter, params->AppData.Port, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <OnTxData+0xa8>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	f018 f8e2 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " | c:");
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	789b      	ldrb	r3, [r3, #2]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d10f      	bne.n	8002ff0 <OnTxData+0x88>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	78db      	ldrb	r3, [r3, #3]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <OnTxData+0x74>
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <OnTxData+0xac>)
 8002fda:	e000      	b.n	8002fde <OnTxData+0x76>
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <OnTxData+0xb0>)
 8002fde:	4a0f      	ldr	r2, [pc, #60]	; (800301c <OnTxData+0xb4>)
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	0013      	movs	r3, r2
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2003      	movs	r0, #3
 8002fea:	f018 f8cf 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 8002fee:	e005      	b.n	8002ffc <OnTxData+0x94>
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n UNCONFIRMED\r\n");
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <OnTxData+0xb8>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	f018 f8c8 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000300 	.word	0x20000300
 8003008:	0801d704 	.word	0x0801d704
 800300c:	0801d728 	.word	0x0801d728
 8003010:	0801d774 	.word	0x0801d774
 8003014:	0801d784 	.word	0x0801d784
 8003018:	0801d788 	.word	0x0801d788
 800301c:	0801d790 	.word	0x0801d790
 8003020:	0801d7a4 	.word	0x0801d7a4

08003024 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d029      	beq.n	8003086 <OnJoinRequest+0x62>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	785b      	ldrb	r3, [r3, #1]
 8003036:	b25b      	sxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11e      	bne.n	800307a <OnJoinRequest+0x56>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <OnJoinRequest+0x6c>)
 800303e:	0018      	movs	r0, r3
 8003040:	f018 ffde 	bl	801c000 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 8003044:	2001      	movs	r0, #1
 8003046:	f002 f8cf 	bl	80051e8 <BSP_LED_Off>

//      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
      APP_LOG(TS_OFF, VLEVEL_M, " Устройство подключено \r\n  ");
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <OnJoinRequest+0x70>)
 800304c:	2200      	movs	r2, #0
 800304e:	2100      	movs	r1, #0
 8003050:	2002      	movs	r0, #2
 8003052:	f018 f89b 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
      //if (joinParams->Mode == ACTIVATION_TYPE_ABP) //
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	789b      	ldrb	r3, [r3, #2]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d106      	bne.n	800306c <OnJoinRequest+0x48>
      {
//        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, " Активация по воздуху  \r\n");
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <OnJoinRequest+0x74>)
 8003060:	2200      	movs	r2, #0
 8003062:	2100      	movs	r1, #0
 8003064:	2002      	movs	r0, #2
 8003066:	f018 f891 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 800306a:	e00c      	b.n	8003086 <OnJoinRequest+0x62>
    	  APP_LOG(TS_OFF, VLEVEL_M, " Активация по персонализации  \r\n");
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <OnJoinRequest+0x78>)
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	2002      	movs	r0, #2
 8003074:	f018 f88a 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 8003078:	e005      	b.n	8003086 <OnJoinRequest+0x62>
      APP_LOG(TS_OFF, VLEVEL_M, " < Подключение к базовой станции не удалось > \r\n");
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <OnJoinRequest+0x7c>)
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	2002      	movs	r0, #2
 8003082:	f018 f883 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	20000330 	.word	0x20000330
 8003094:	0801d7b8 	.word	0x0801d7b8
 8003098:	0801d7e8 	.word	0x0801d7e8
 800309c:	0801d814 	.word	0x0801d814
 80030a0:	0801d850 	.word	0x0801d850

080030a4 <MX_LPTIM1_Init>:
  }
  */
/*

 */ static void MX_LPTIM1_Init(void) // new
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /*
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <OnMacProcessNotify>:
//    }
//
//  }

static void OnMacProcessNotify(void)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80030b2:	2100      	movs	r1, #0
 80030b4:	2001      	movs	r0, #1
 80030b6:	f018 fd31 	bl	801bb1c <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <LoraInfo_Init+0x50>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <LoraInfo_Init+0x50>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <LoraInfo_Init+0x50>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <LoraInfo_Init+0x50>)
 80030d8:	2200      	movs	r2, #0
 80030da:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <LoraInfo_Init+0x50>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	431a      	orrs	r2, r3
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <LoraInfo_Init+0x50>)
 80030e6:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <LoraInfo_Init+0x50>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <LoraInfo_Init+0x3e>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <LoraInfo_Init+0x54>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	2100      	movs	r1, #0
 80030f6:	2000      	movs	r0, #0
 80030f8:	f018 f848 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 80030fc:	e7fe      	b.n	80030fc <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 80030fe:	4b04      	ldr	r3, [pc, #16]	; (8003110 <LoraInfo_Init+0x50>)
 8003100:	2200      	movs	r2, #0
 8003102:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8003104:	4b02      	ldr	r3, [pc, #8]	; (8003110 <LoraInfo_Init+0x50>)
 8003106:	2203      	movs	r2, #3
 8003108:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	200004c4 	.word	0x200004c4
 8003114:	0801d8f0 	.word	0x0801d8f0

08003118 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800311c:	4b01      	ldr	r3, [pc, #4]	; (8003124 <LoraInfo_GetPtr+0xc>)
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	200004c4 	.word	0x200004c4

08003128 <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 800312c:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <MX_ADC_Init+0x90>)
 800312e:	4a23      	ldr	r2, [pc, #140]	; (80031bc <MX_ADC_Init+0x94>)
 8003130:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <MX_ADC_Init+0x90>)
 8003134:	2200      	movs	r2, #0
 8003136:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003138:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <MX_ADC_Init+0x90>)
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	0612      	lsls	r2, r2, #24
 800313e:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <MX_ADC_Init+0x90>)
 8003142:	2200      	movs	r2, #0
 8003144:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <MX_ADC_Init+0x90>)
 8003148:	2201      	movs	r2, #1
 800314a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <MX_ADC_Init+0x90>)
 800314e:	2200      	movs	r2, #0
 8003150:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 8003152:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <MX_ADC_Init+0x90>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8003158:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <MX_ADC_Init+0x90>)
 800315a:	2207      	movs	r2, #7
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <MX_ADC_Init+0x90>)
 8003160:	2201      	movs	r2, #1
 8003162:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <MX_ADC_Init+0x90>)
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 800316a:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <MX_ADC_Init+0x90>)
 800316c:	2220      	movs	r2, #32
 800316e:	2100      	movs	r1, #0
 8003170:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <MX_ADC_Init+0x90>)
 8003174:	2221      	movs	r2, #33	; 0x21
 8003176:	2100      	movs	r1, #0
 8003178:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800317a:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <MX_ADC_Init+0x90>)
 800317c:	2200      	movs	r2, #0
 800317e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8003180:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <MX_ADC_Init+0x90>)
 8003182:	2204      	movs	r2, #4
 8003184:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <MX_ADC_Init+0x90>)
 8003188:	222c      	movs	r2, #44	; 0x2c
 800318a:	2100      	movs	r1, #0
 800318c:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <MX_ADC_Init+0x90>)
 8003190:	0018      	movs	r0, r3
 8003192:	f002 fcbf 	bl	8005b14 <HAL_ADC_Init>
 8003196:	1e03      	subs	r3, r0, #0
 8003198:	d001      	beq.n	800319e <MX_ADC_Init+0x76>
  {
    Error_Handler();
 800319a:	f000 fa47 	bl	800362c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <MX_ADC_Init+0x90>)
 80031a0:	2100      	movs	r1, #0
 80031a2:	0018      	movs	r0, r3
 80031a4:	f003 f9a8 	bl	80064f8 <HAL_ADCEx_Calibration_Start>
 80031a8:	1e03      	subs	r3, r0, #0
 80031aa:	d001      	beq.n	80031b0 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 80031ac:	f000 fa3e 	bl	800362c <Error_Handler>
  }
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	200004d4 	.word	0x200004d4
 80031bc:	40012400 	.word	0x40012400

080031c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b089      	sub	sp, #36	; 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a12      	ldr	r2, [pc, #72]	; (8003218 <HAL_ADC_MspInit+0x58>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d11e      	bne.n	8003210 <HAL_ADC_MspInit+0x50>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d2:	240c      	movs	r4, #12
 80031d4:	193b      	adds	r3, r7, r4
 80031d6:	0018      	movs	r0, r3
 80031d8:	2314      	movs	r3, #20
 80031da:	001a      	movs	r2, r3
 80031dc:	2100      	movs	r1, #0
 80031de:	f01a f862 	bl	801d2a6 <memset>

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_ADC_MspInit+0x5c>)
 80031e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e6:	4b0d      	ldr	r3, [pc, #52]	; (800321c <HAL_ADC_MspInit+0x5c>)
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	0089      	lsls	r1, r1, #2
 80031ec:	430a      	orrs	r2, r1
 80031ee:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4; //N
 80031f0:	193b      	adds	r3, r7, r4
 80031f2:	2210      	movs	r2, #16
 80031f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; //N
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	2203      	movs	r2, #3
 80031fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; //N
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //N
 8003202:	193a      	adds	r2, r7, r4
 8003204:	23a0      	movs	r3, #160	; 0xa0
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	0011      	movs	r1, r2
 800320a:	0018      	movs	r0, r3
 800320c:	f003 fde0 	bl	8006dd0 <HAL_GPIO_Init>
    /* USER CODE END ADC_MspInit 1
     * */
  }
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b009      	add	sp, #36	; 0x24
 8003216:	bd90      	pop	{r4, r7, pc}
 8003218:	40012400 	.word	0x40012400
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0f      	ldr	r2, [pc, #60]	; (800326c <HAL_ADC_MspDeInit+0x4c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d118      	bne.n	8003264 <HAL_ADC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <HAL_ADC_MspDeInit+0x50>)
 8003234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_ADC_MspDeInit+0x50>)
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	0089      	lsls	r1, r1, #2
 800323c:	430a      	orrs	r2, r1
 800323e:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_ADC_MspDeInit+0x50>)
 8003242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_ADC_MspDeInit+0x50>)
 8003246:	490b      	ldr	r1, [pc, #44]	; (8003274 <HAL_ADC_MspDeInit+0x54>)
 8003248:	400a      	ands	r2, r1
 800324a:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_ADC_MspDeInit+0x50>)
 800324e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <HAL_ADC_MspDeInit+0x50>)
 8003252:	4908      	ldr	r1, [pc, #32]	; (8003274 <HAL_ADC_MspDeInit+0x54>)
 8003254:	400a      	ands	r2, r1
 8003256:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);//N
 8003258:	23a0      	movs	r3, #160	; 0xa0
 800325a:	05db      	lsls	r3, r3, #23
 800325c:	2110      	movs	r1, #16
 800325e:	0018      	movs	r0, r3
 8003260:	f003 ff34 	bl	80070cc <HAL_GPIO_DeInit>
    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b002      	add	sp, #8
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40012400 	.word	0x40012400
 8003270:	40021000 	.word	0x40021000
 8003274:	fffffdff 	.word	0xfffffdff

08003278 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 800327c:	4b02      	ldr	r3, [pc, #8]	; (8003288 <SYS_InitMeasurement+0x10>)
 800327e:	4a03      	ldr	r2, [pc, #12]	; (800328c <SYS_InitMeasurement+0x14>)
 8003280:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200004d4 	.word	0x200004d4
 800328c:	40012400 	.word	0x40012400

08003290 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8003290:	b5b0      	push	{r4, r5, r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8003296:	250e      	movs	r5, #14
 8003298:	197b      	adds	r3, r7, r5
 800329a:	2200      	movs	r2, #0
 800329c:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80032a2:	1dbc      	adds	r4, r7, #6
 80032a4:	f000 f83c 	bl	8003320 <SYS_GetBatteryLevel>
 80032a8:	0003      	movs	r3, r0
 80032aa:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <SYS_GetTemperatureLevel+0x80>)
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 f864 	bl	800337c <ADC_ReadChannels>
 80032b4:	0003      	movs	r3, r0
 80032b6:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 80032b8:	1dbb      	adds	r3, r7, #6
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	4353      	muls	r3, r2
 80032c0:	4914      	ldr	r1, [pc, #80]	; (8003314 <SYS_GetTemperatureLevel+0x84>)
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7fc ff28 	bl	8000118 <__udivsi3>
 80032c8:	0003      	movs	r3, r0
 80032ca:	001a      	movs	r2, r3
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <SYS_GetTemperatureLevel+0x88>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	1ad2      	subs	r2, r2, r3
 80032d2:	0013      	movs	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	189b      	adds	r3, r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	4a0f      	ldr	r2, [pc, #60]	; (800331c <SYS_GetTemperatureLevel+0x8c>)
 80032de:	8812      	ldrh	r2, [r2, #0]
 80032e0:	0011      	movs	r1, r2
 80032e2:	4a0d      	ldr	r2, [pc, #52]	; (8003318 <SYS_GetTemperatureLevel+0x88>)
 80032e4:	8812      	ldrh	r2, [r2, #0]
 80032e6:	1a8a      	subs	r2, r1, r2
 80032e8:	0011      	movs	r1, r2
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7fc ff9e 	bl	800022c <__divsi3>
 80032f0:	0003      	movs	r3, r0
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	22f0      	movs	r2, #240	; 0xf0
 80032f6:	0152      	lsls	r2, r2, #5
 80032f8:	4694      	mov	ip, r2
 80032fa:	4463      	add	r3, ip
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	197b      	adds	r3, r7, r5
 8003300:	801a      	strh	r2, [r3, #0]

//  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);

  return (int16_t) temperatureDegreeC;
 8003302:	197b      	adds	r3, r7, r5
 8003304:	2200      	movs	r2, #0
 8003306:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b004      	add	sp, #16
 800330e:	bdb0      	pop	{r4, r5, r7, pc}
 8003310:	48040000 	.word	0x48040000
 8003314:	00000bb8 	.word	0x00000bb8
 8003318:	1ff8007a 	.word	0x1ff8007a
 800331c:	1ff8007e 	.word	0x1ff8007e

08003320 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8003326:	1dbb      	adds	r3, r7, #6
 8003328:	2200      	movs	r2, #0
 800332a:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <SYS_GetBatteryLevel+0x50>)
 8003332:	0018      	movs	r0, r3
 8003334:	f000 f822 	bl	800337c <ADC_ReadChannels>
 8003338:	0003      	movs	r3, r0
 800333a:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 8003342:	1dbb      	adds	r3, r7, #6
 8003344:	2200      	movs	r2, #0
 8003346:	801a      	strh	r2, [r3, #0]
 8003348:	e00c      	b.n	8003364 <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <SYS_GetBatteryLevel+0x54>)
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	001a      	movs	r2, r3
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <SYS_GetBatteryLevel+0x58>)
 8003352:	4353      	muls	r3, r2
 8003354:	6839      	ldr	r1, [r7, #0]
 8003356:	0018      	movs	r0, r3
 8003358:	f7fc fede 	bl	8000118 <__udivsi3>
 800335c:	0003      	movs	r3, r0
 800335e:	001a      	movs	r2, r3
 8003360:	1dbb      	adds	r3, r7, #6
 8003362:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 8003364:	1dbb      	adds	r3, r7, #6
 8003366:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}
 8003370:	44020000 	.word	0x44020000
 8003374:	1ff80078 	.word	0x1ff80078
 8003378:	00000bb8 	.word	0x00000bb8

0800337c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003388:	230c      	movs	r3, #12
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	0018      	movs	r0, r3
 800338e:	2308      	movs	r3, #8
 8003390:	001a      	movs	r2, r3
 8003392:	2100      	movs	r1, #0
 8003394:	f019 ff87 	bl	801d2a6 <memset>

  MX_ADC_Init();
 8003398:	f7ff fec6 	bl	8003128 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <ADC_ReadChannels+0xd4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2208      	movs	r2, #8
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d1f9      	bne.n	800339e <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 80033aa:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <ADC_ReadChannels+0xd8>)
 80033ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ae:	4b29      	ldr	r3, [pc, #164]	; (8003454 <ADC_ReadChannels+0xd8>)
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	0089      	lsls	r1, r1, #2
 80033b4:	430a      	orrs	r2, r1
 80033b6:	635a      	str	r2, [r3, #52]	; 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <ADC_ReadChannels+0xdc>)
 80033ba:	2100      	movs	r1, #0
 80033bc:	0018      	movs	r0, r3
 80033be:	f003 f89b 	bl	80064f8 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 80033c2:	240c      	movs	r4, #12
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	4a25      	ldr	r2, [pc, #148]	; (800345c <ADC_ReadChannels+0xe0>)
 80033c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	4a24      	ldr	r2, [pc, #144]	; (8003460 <ADC_ReadChannels+0xe4>)
 80033ce:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80033d0:	193a      	adds	r2, r7, r4
 80033d2:	4b21      	ldr	r3, [pc, #132]	; (8003458 <ADC_ReadChannels+0xdc>)
 80033d4:	0011      	movs	r1, r2
 80033d6:	0018      	movs	r0, r3
 80033d8:	f002 fee2 	bl	80061a0 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80033dc:	0021      	movs	r1, r4
 80033de:	187b      	adds	r3, r7, r1
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	2280      	movs	r2, #128	; 0x80
 80033e8:	0152      	lsls	r2, r2, #5
 80033ea:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033ec:	187a      	adds	r2, r7, r1
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <ADC_ReadChannels+0xdc>)
 80033f0:	0011      	movs	r1, r2
 80033f2:	0018      	movs	r0, r3
 80033f4:	f002 fed4 	bl	80061a0 <HAL_ADC_ConfigChannel>
 80033f8:	1e03      	subs	r3, r0, #0
 80033fa:	d001      	beq.n	8003400 <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 80033fc:	f000 f916 	bl	800362c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8003400:	4b15      	ldr	r3, [pc, #84]	; (8003458 <ADC_ReadChannels+0xdc>)
 8003402:	0018      	movs	r0, r3
 8003404:	f002 fd96 	bl	8005f34 <HAL_ADC_Start>
 8003408:	1e03      	subs	r3, r0, #0
 800340a:	d001      	beq.n	8003410 <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 800340c:	f000 f90e 	bl	800362c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003410:	2301      	movs	r3, #1
 8003412:	425a      	negs	r2, r3
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <ADC_ReadChannels+0xdc>)
 8003416:	0011      	movs	r1, r2
 8003418:	0018      	movs	r0, r3
 800341a:	f002 fe1f 	bl	800605c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 800341e:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <ADC_ReadChannels+0xdc>)
 8003420:	0018      	movs	r0, r3
 8003422:	f002 fddb 	bl	8005fdc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <ADC_ReadChannels+0xdc>)
 8003428:	0018      	movs	r0, r3
 800342a:	f002 fead 	bl	8006188 <HAL_ADC_GetValue>
 800342e:	0003      	movs	r3, r0
 8003430:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <ADC_ReadChannels+0xdc>)
 8003434:	0018      	movs	r0, r3
 8003436:	f002 fce1 	bl	8005dfc <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <ADC_ReadChannels+0xd8>)
 800343c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <ADC_ReadChannels+0xd8>)
 8003440:	4908      	ldr	r1, [pc, #32]	; (8003464 <ADC_ReadChannels+0xe8>)
 8003442:	400a      	ands	r2, r1
 8003444:	635a      	str	r2, [r3, #52]	; 0x34

  return ADCxConvertedValues;
 8003446:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b007      	add	sp, #28
 800344e:	bd90      	pop	{r4, r7, pc}
 8003450:	40007000 	.word	0x40007000
 8003454:	40021000 	.word	0x40021000
 8003458:	200004d4 	.word	0x200004d4
 800345c:	0007ffff 	.word	0x0007ffff
 8003460:	00001001 	.word	0x00001001
 8003464:	fffffdff 	.word	0xfffffdff

08003468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <MX_DMA_Init+0x38>)
 8003470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <MX_DMA_Init+0x38>)
 8003474:	2101      	movs	r1, #1
 8003476:	430a      	orrs	r2, r1
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <MX_DMA_Init+0x38>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	2201      	movs	r2, #1
 8003480:	4013      	ands	r3, r2
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2100      	movs	r1, #0
 800348a:	200b      	movs	r0, #11
 800348c:	f003 f974 	bl	8006778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003490:	200b      	movs	r0, #11
 8003492:	f003 f986 	bl	80067a2 <HAL_NVIC_EnableIRQ>

}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b002      	add	sp, #8
 800349c:	bd80      	pop	{r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	40021000 	.word	0x40021000

080034a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034aa:	f002 fab9 	bl	8005a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034ae:	f000 f827 	bl	8003500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 80034b2:	f7ff fa6f 	bl	8002994 <MX_LoRaWAN_Init>
      	   		size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
      	 	HAL_UART_Transmit(&husart2, Data, size, 1000);
      	 	*/
  //      uint16_t eepromBaseAddress = 0x08080000; // Пример адреса EEPROM
  	  #define eepromBaseAddress 0x08080000UL
        uint8_t dataToWrite[] = {0x01, 0x02, 0x03}; // Пример данных для записи
 80034b6:	003b      	movs	r3, r7
 80034b8:	4a10      	ldr	r2, [pc, #64]	; (80034fc <main+0x58>)
 80034ba:	8811      	ldrh	r1, [r2, #0]
 80034bc:	8019      	strh	r1, [r3, #0]
 80034be:	7892      	ldrb	r2, [r2, #2]
 80034c0:	709a      	strb	r2, [r3, #2]
        uint8_t dataToWrite1 = 10; // Пример данных для записи
 80034c2:	1dfb      	adds	r3, r7, #7
 80034c4:	220a      	movs	r2, #10
 80034c6:	701a      	strb	r2, [r3, #0]
        uint8_t dataSize = sizeof(dataToWrite1); // Размер данных
 80034c8:	1dbb      	adds	r3, r7, #6
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
//        EEPROM_WRITE_DATA(STM32L072_EEPROM_START_ADDR, dataToWrite1, dataSize);
  //    FLASHEx_EEPROM_WRITE(0, params->DownlinkCounter, sizeof(params->DownlinkCounter));
  //      dataeprom = dataToWrite;
//        EEPROM_CLEAR();      // возможный вариант
//        EEPROM_WRITE_DATA(eepromBaseAddress, dataToWrite1, dataSize); // возможный вариант
        uint8_t datareadepr = 0; // Прочитанные данные
 80034ce:	1d7b      	adds	r3, r7, #5
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
//        EEPROM_ReadData();
        uint8_t datareadeprerror = 2; // Буфер ошибки
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	2202      	movs	r2, #2
 80034d8:	701a      	strb	r2, [r3, #0]
//        EEPROM_Read_Data(eepromBaseAddress, datareadepr, dataSize); //  возможный вариант
//        datareadepr =  EEPROM_ReadData();
//        datareadepr = EEPROM_Read_Data();
//        memcmp(datareadepr,dataToWrite);
         if (datareadepr == dataToWrite1)
 80034da:	1d7a      	adds	r2, r7, #5
 80034dc:	1dfb      	adds	r3, r7, #7
 80034de:	7812      	ldrb	r2, [r2, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d103      	bne.n	80034ee <main+0x4a>
        {
        	datareadeprerror = 100;
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	2264      	movs	r2, #100	; 0x64
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	e002      	b.n	80034f4 <main+0x50>
        }
        else {
            // Прочитанные данные не соответствуют записанным данным
            // Выполняйте необходимые действия здесь
//               printf("Ошибка при записи или чтении данных из EEPROM\n");
            datareadeprerror =  0;
 80034ee:	1d3b      	adds	r3, r7, #4
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */
	  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);

    MX_LoRaWAN_Process();
 80034f4:	f7ff fa57 	bl	80029a6 <MX_LoRaWAN_Process>
 80034f8:	e7fc      	b.n	80034f4 <main+0x50>
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	0801d940 	.word	0x0801d940

08003500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) //NEW С МЭЙНА
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b09d      	sub	sp, #116	; 0x74
 8003504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003506:	2438      	movs	r4, #56	; 0x38
 8003508:	193b      	adds	r3, r7, r4
 800350a:	0018      	movs	r0, r3
 800350c:	2338      	movs	r3, #56	; 0x38
 800350e:	001a      	movs	r2, r3
 8003510:	2100      	movs	r1, #0
 8003512:	f019 fec8 	bl	801d2a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003516:	2324      	movs	r3, #36	; 0x24
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	0018      	movs	r0, r3
 800351c:	2314      	movs	r3, #20
 800351e:	001a      	movs	r2, r3
 8003520:	2100      	movs	r1, #0
 8003522:	f019 fec0 	bl	801d2a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003526:	003b      	movs	r3, r7
 8003528:	0018      	movs	r0, r3
 800352a:	2324      	movs	r3, #36	; 0x24
 800352c:	001a      	movs	r2, r3
 800352e:	2100      	movs	r1, #0
 8003530:	f019 feb9 	bl	801d2a6 <memset>
  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003534:	0021      	movs	r1, r4
 8003536:	187b      	adds	r3, r7, r1
 8003538:	2202      	movs	r2, #2
 800353a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 800353c:	187b      	adds	r3, r7, r1
 800353e:	2200      	movs	r2, #0
 8003540:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	2201      	movs	r2, #1
 8003546:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;// n
 8003548:	187b      	adds	r3, r7, r1
 800354a:	2201      	movs	r2, #1
 800354c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800354e:	187b      	adds	r3, r7, r1
 8003550:	2210      	movs	r2, #16
 8003552:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003554:	187b      	adds	r3, r7, r1
 8003556:	2202      	movs	r2, #2
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800355a:	187b      	adds	r3, r7, r1
 800355c:	2200      	movs	r2, #0
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8003560:	187b      	adds	r3, r7, r1
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	0312      	lsls	r2, r2, #12
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003568:	187b      	adds	r3, r7, r1
 800356a:	2280      	movs	r2, #128	; 0x80
 800356c:	0412      	lsls	r2, r2, #16
 800356e:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003570:	187b      	adds	r3, r7, r1
 8003572:	0018      	movs	r0, r3
 8003574:	f004 fda2 	bl	80080bc <HAL_RCC_OscConfig>
 8003578:	1e03      	subs	r3, r0, #0
 800357a:	d001      	beq.n	8003580 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800357c:	f000 f856 	bl	800362c <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
__HAL_RCC_PWR_CLK_ENABLE();
 8003580:	4b27      	ldr	r3, [pc, #156]	; (8003620 <SystemClock_Config+0x120>)
 8003582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003584:	4b26      	ldr	r3, [pc, #152]	; (8003620 <SystemClock_Config+0x120>)
 8003586:	2180      	movs	r1, #128	; 0x80
 8003588:	0549      	lsls	r1, r1, #21
 800358a:	430a      	orrs	r2, r1
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800358e:	4b25      	ldr	r3, [pc, #148]	; (8003624 <SystemClock_Config+0x124>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a25      	ldr	r2, [pc, #148]	; (8003628 <SystemClock_Config+0x128>)
 8003594:	401a      	ands	r2, r3
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <SystemClock_Config+0x124>)
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	0109      	lsls	r1, r1, #4
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
 while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <SystemClock_Config+0x124>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2210      	movs	r2, #16
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d0f9      	beq.n	80035a2 <SystemClock_Config+0xa2>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80035ae:	2124      	movs	r1, #36	; 0x24
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	220f      	movs	r2, #15
 80035b4:	601a      	str	r2, [r3, #0]
		 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	2203      	movs	r2, #3
 80035ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	2200      	movs	r2, #0
 80035c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035c2:	187b      	adds	r3, r7, r1
 80035c4:	2200      	movs	r2, #0
 80035c6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035c8:	187b      	adds	r3, r7, r1
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2101      	movs	r1, #1
 80035d2:	0018      	movs	r0, r3
 80035d4:	f005 f946 	bl	8008864 <HAL_RCC_ClockConfig>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d001      	beq.n	80035e0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80035dc:	f000 f826 	bl	800362c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80035e0:	003b      	movs	r3, r7
 80035e2:	22ab      	movs	r2, #171	; 0xab
 80035e4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035e6:	003b      	movs	r3, r7
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80035ec:	003b      	movs	r3, r7
 80035ee:	2200      	movs	r2, #0
 80035f0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80035f2:	003b      	movs	r3, r7
 80035f4:	2200      	movs	r2, #0
 80035f6:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80035f8:	003b      	movs	r3, r7
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	0292      	lsls	r2, r2, #10
 80035fe:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8003600:	003b      	movs	r3, r7
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003606:	003b      	movs	r3, r7
 8003608:	0018      	movs	r0, r3
 800360a:	f005 fb4f 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d001      	beq.n	8003616 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8003612:	f000 f80b 	bl	800362c <Error_Handler>
  }
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b01d      	add	sp, #116	; 0x74
 800361c:	bd90      	pop	{r4, r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	40021000 	.word	0x40021000
 8003624:	40007000 	.word	0x40007000
 8003628:	ffffe7ff 	.word	0xffffe7ff

0800362c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8003630:	e7fe      	b.n	8003630 <Error_Handler+0x4>
	...

08003634 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b090      	sub	sp, #64	; 0x40
 8003638:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800363a:	232c      	movs	r3, #44	; 0x2c
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	0018      	movs	r0, r3
 8003640:	2314      	movs	r3, #20
 8003642:	001a      	movs	r2, r3
 8003644:	2100      	movs	r1, #0
 8003646:	f019 fe2e 	bl	801d2a6 <memset>
  RTC_DateTypeDef sDate = {0};
 800364a:	2328      	movs	r3, #40	; 0x28
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003652:	003b      	movs	r3, r7
 8003654:	0018      	movs	r0, r3
 8003656:	2328      	movs	r3, #40	; 0x28
 8003658:	001a      	movs	r2, r3
 800365a:	2100      	movs	r1, #0
 800365c:	f019 fe23 	bl	801d2a6 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003660:	4b41      	ldr	r3, [pc, #260]	; (8003768 <MX_RTC_Init+0x134>)
 8003662:	4a42      	ldr	r2, [pc, #264]	; (800376c <MX_RTC_Init+0x138>)
 8003664:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003666:	4b40      	ldr	r3, [pc, #256]	; (8003768 <MX_RTC_Init+0x134>)
 8003668:	2200      	movs	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800366c:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <MX_RTC_Init+0x134>)
 800366e:	221f      	movs	r2, #31
 8003670:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8003672:	4b3d      	ldr	r3, [pc, #244]	; (8003768 <MX_RTC_Init+0x134>)
 8003674:	4a3e      	ldr	r2, [pc, #248]	; (8003770 <MX_RTC_Init+0x13c>)
 8003676:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003678:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <MX_RTC_Init+0x134>)
 800367a:	2200      	movs	r2, #0
 800367c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800367e:	4b3a      	ldr	r3, [pc, #232]	; (8003768 <MX_RTC_Init+0x134>)
 8003680:	2200      	movs	r2, #0
 8003682:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003684:	4b38      	ldr	r3, [pc, #224]	; (8003768 <MX_RTC_Init+0x134>)
 8003686:	2200      	movs	r2, #0
 8003688:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800368a:	4b37      	ldr	r3, [pc, #220]	; (8003768 <MX_RTC_Init+0x134>)
 800368c:	2200      	movs	r2, #0
 800368e:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003690:	4b35      	ldr	r3, [pc, #212]	; (8003768 <MX_RTC_Init+0x134>)
 8003692:	0018      	movs	r0, r3
 8003694:	f005 fc60 	bl	8008f58 <HAL_RTC_Init>
 8003698:	1e03      	subs	r3, r0, #0
 800369a:	d001      	beq.n	80036a0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 800369c:	f7ff ffc6 	bl	800362c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	2200      	movs	r2, #0
 80036ac:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	2200      	movs	r2, #0
 80036b2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	2200      	movs	r2, #0
 80036b8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036ba:	187b      	adds	r3, r7, r1
 80036bc:	2200      	movs	r2, #0
 80036be:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80036c0:	1879      	adds	r1, r7, r1
 80036c2:	4b29      	ldr	r3, [pc, #164]	; (8003768 <MX_RTC_Init+0x134>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	0018      	movs	r0, r3
 80036c8:	f005 fce4 	bl	8009094 <HAL_RTC_SetTime>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80036d0:	f7ff ffac 	bl	800362c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036d4:	2128      	movs	r1, #40	; 0x28
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	2201      	movs	r2, #1
 80036e0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80036e2:	187b      	adds	r3, r7, r1
 80036e4:	2201      	movs	r2, #1
 80036e6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80036e8:	187b      	adds	r3, r7, r1
 80036ea:	2200      	movs	r2, #0
 80036ec:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80036ee:	1879      	adds	r1, r7, r1
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <MX_RTC_Init+0x134>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	0018      	movs	r0, r3
 80036f6:	f005 fded 	bl	80092d4 <HAL_RTC_SetDate>
 80036fa:	1e03      	subs	r3, r0, #0
 80036fc:	d001      	beq.n	8003702 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80036fe:	f7ff ff95 	bl	800362c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003702:	003b      	movs	r3, r7
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003708:	003b      	movs	r3, r7
 800370a:	2200      	movs	r2, #0
 800370c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800370e:	003b      	movs	r3, r7
 8003710:	2200      	movs	r2, #0
 8003712:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003714:	003b      	movs	r3, r7
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800371a:	003b      	movs	r3, r7
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003720:	003b      	movs	r3, r7
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003726:	003b      	movs	r3, r7
 8003728:	2200      	movs	r2, #0
 800372a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 800372c:	003b      	movs	r3, r7
 800372e:	22a0      	movs	r2, #160	; 0xa0
 8003730:	0512      	lsls	r2, r2, #20
 8003732:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003734:	003b      	movs	r3, r7
 8003736:	2200      	movs	r2, #0
 8003738:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 800373a:	003b      	movs	r3, r7
 800373c:	2220      	movs	r2, #32
 800373e:	211e      	movs	r1, #30
 8003740:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003742:	003b      	movs	r3, r7
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	0052      	lsls	r2, r2, #1
 8003748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800374a:	0039      	movs	r1, r7
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <MX_RTC_Init+0x134>)
 800374e:	2200      	movs	r2, #0
 8003750:	0018      	movs	r0, r3
 8003752:	f005 febb 	bl	80094cc <HAL_RTC_SetAlarm_IT>
 8003756:	1e03      	subs	r3, r0, #0
 8003758:	d001      	beq.n	800375e <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 800375a:	f7ff ff67 	bl	800362c <Error_Handler>
  }

}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b010      	add	sp, #64	; 0x40
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	200005a8 	.word	0x200005a8
 800376c:	40002800 	.word	0x40002800
 8003770:	000003ff 	.word	0x000003ff

08003774 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b091      	sub	sp, #68	; 0x44
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800377c:	2408      	movs	r4, #8
 800377e:	193b      	adds	r3, r7, r4
 8003780:	0018      	movs	r0, r3
 8003782:	2338      	movs	r3, #56	; 0x38
 8003784:	001a      	movs	r2, r3
 8003786:	2100      	movs	r1, #0
 8003788:	f019 fd8d 	bl	801d2a6 <memset>
  if (rtcHandle->Instance == RTC)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a16      	ldr	r2, [pc, #88]	; (80037ec <HAL_RTC_MspInit+0x78>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d126      	bne.n	80037e4 <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003796:	193b      	adds	r3, r7, r4
 8003798:	2204      	movs	r2, #4
 800379a:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; // SWAP OFF НО ТОЛКУ ТО? Спасёт ли это при моей проблеме
 800379c:	193b      	adds	r3, r7, r4
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	0052      	lsls	r2, r2, #1
 80037a2:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;// SWAP ON
 80037a4:	193b      	adds	r3, r7, r4
 80037a6:	2200      	movs	r2, #0
 80037a8:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 80037aa:	193b      	adds	r3, r7, r4
 80037ac:	2200      	movs	r2, #0
 80037ae:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037b0:	193b      	adds	r3, r7, r4
 80037b2:	2200      	movs	r2, #0
 80037b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b6:	193b      	adds	r3, r7, r4
 80037b8:	0018      	movs	r0, r3
 80037ba:	f004 fc7f 	bl	80080bc <HAL_RCC_OscConfig>
 80037be:	1e03      	subs	r3, r0, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 80037c2:	f7ff ff33 	bl	800362c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <HAL_RTC_MspInit+0x7c>)
 80037c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RTC_MspInit+0x7c>)
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	02c9      	lsls	r1, r1, #11
 80037d0:	430a      	orrs	r2, r1
 80037d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	2002      	movs	r0, #2
 80037da:	f002 ffcd 	bl	8006778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn); // вот это отрубать еси шо
 80037de:	2002      	movs	r0, #2
 80037e0:	f002 ffdf 	bl	80067a2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b011      	add	sp, #68	; 0x44
 80037ea:	bd90      	pop	{r4, r7, pc}
 80037ec:	40002800 	.word	0x40002800
 80037f0:	40021000 	.word	0x40021000

080037f4 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	0c1b      	lsrs	r3, r3, #16
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8003812:	4b16      	ldr	r3, [pc, #88]	; (800386c <RTC_IF_Init+0x60>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2201      	movs	r2, #1
 8003818:	4053      	eors	r3, r2
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01f      	beq.n	8003860 <RTC_IF_Init+0x54>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	2220      	movs	r2, #32
 8003824:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	2280      	movs	r2, #128	; 0x80
 800382a:	0252      	lsls	r2, r2, #9
 800382c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	0018      	movs	r0, r3
 8003832:	f005 fa3b 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8003836:	1e03      	subs	r3, r0, #0
 8003838:	d000      	beq.n	800383c <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 800383a:	e7fe      	b.n	800383a <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 800383c:	f7ff fefa 	bl	8003634 <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	005a      	lsls	r2, r3, #1
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <RTC_IF_Init+0x64>)
 8003846:	0011      	movs	r1, r2
 8003848:	0018      	movs	r0, r3
 800384a:	f005 ff8b 	bl	8009764 <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <RTC_IF_Init+0x64>)
 8003850:	0018      	movs	r0, r3
 8003852:	f006 f935 	bl	8009ac0 <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8003856:	f000 f859 	bl	800390c <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 800385a:	4b04      	ldr	r3, [pc, #16]	; (800386c <RTC_IF_Init+0x60>)
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b00a      	add	sp, #40	; 0x28
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	200005cc 	.word	0x200005cc
 8003870:	200005a8 	.word	0x200005a8

08003874 <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 800387c:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <RTC_IF_StartTimer+0x5c>)
 800387e:	2200      	movs	r2, #0
 8003880:	5e9b      	ldrsh	r3, [r3, r2]
 8003882:	3303      	adds	r3, #3
 8003884:	001c      	movs	r4, r3
 8003886:	f000 f861 	bl	800394c <RTC_IF_GetTimerElapsedTime>
 800388a:	0002      	movs	r2, r0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	429c      	cmp	r4, r3
 8003892:	d204      	bcs.n	800389e <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003894:	2100      	movs	r1, #0
 8003896:	2002      	movs	r0, #2
 8003898:	f017 ff30 	bl	801b6fc <UTIL_LPM_SetStopMode>
 800389c:	e003      	b.n	80038a6 <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 800389e:	2101      	movs	r1, #1
 80038a0:	2002      	movs	r0, #2
 80038a2:	f017 ff2b 	bl	801b6fc <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 80038a6:	f017 ff89 	bl	801b7bc <UTIL_LPM_GetMode>
 80038aa:	0003      	movs	r3, r0
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d106      	bne.n	80038be <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 80038b0:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <RTC_IF_StartTimer+0x5c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	5e9b      	ldrsh	r3, [r3, r2]
 80038b6:	001a      	movs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 f959 	bl	8003b78 <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b003      	add	sp, #12
 80038ce:	bd90      	pop	{r4, r7, pc}
 80038d0:	200005ce 	.word	0x200005ce

080038d4 <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <RTC_IF_StopTimer+0x30>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	22ff      	movs	r2, #255	; 0xff
 80038e0:	401a      	ands	r2, r3
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <RTC_IF_StopTimer+0x30>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4908      	ldr	r1, [pc, #32]	; (8003908 <RTC_IF_StopTimer+0x34>)
 80038e8:	430a      	orrs	r2, r1
 80038ea:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	005a      	lsls	r2, r3, #1
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <RTC_IF_StopTimer+0x30>)
 80038f2:	0011      	movs	r1, r2
 80038f4:	0018      	movs	r0, r3
 80038f6:	f005 ff35 	bl	8009764 <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	200005a8 	.word	0x200005a8
 8003908:	fffffe7f 	.word	0xfffffe7f

0800390c <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003910:	4a06      	ldr	r2, [pc, #24]	; (800392c <RTC_IF_SetTimerContext+0x20>)
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <RTC_IF_SetTimerContext+0x24>)
 8003914:	0011      	movs	r1, r2
 8003916:	0018      	movs	r0, r3
 8003918:	f000 fa94 	bl	8003e44 <RTC_GetCalendarValue>
 800391c:	0002      	movs	r2, r0
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <RTC_IF_SetTimerContext+0x28>)
 8003920:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003922:	4b04      	ldr	r3, [pc, #16]	; (8003934 <RTC_IF_SetTimerContext+0x28>)
 8003924:	681b      	ldr	r3, [r3, #0]
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200005fc 	.word	0x200005fc
 8003930:	20000610 	.word	0x20000610
 8003934:	200005f8 	.word	0x200005f8

08003938 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 800393c:	4b02      	ldr	r3, [pc, #8]	; (8003948 <RTC_IF_GetTimerContext+0x10>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	200005f8 	.word	0x200005f8

0800394c <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003952:	2308      	movs	r3, #8
 8003954:	18fa      	adds	r2, r7, r3
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	0011      	movs	r1, r2
 800395a:	0018      	movs	r0, r3
 800395c:	f000 fa72 	bl	8003e44 <RTC_GetCalendarValue>
 8003960:	0003      	movs	r3, r0
 8003962:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <RTC_IF_GetTimerElapsedTime+0x28>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	1ad3      	subs	r3, r2, r3
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b008      	add	sp, #32
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200005f8 	.word	0x200005f8

08003978 <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <RTC_IF_GetTimerValue+0x30>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800398a:	2308      	movs	r3, #8
 800398c:	18fa      	adds	r2, r7, r3
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	0011      	movs	r1, r2
 8003992:	0018      	movs	r0, r3
 8003994:	f000 fa56 	bl	8003e44 <RTC_GetCalendarValue>
 8003998:	0003      	movs	r3, r0
 800399a:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 800399c:	69fb      	ldr	r3, [r7, #28]
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b008      	add	sp, #32
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	200005cc 	.word	0x200005cc

080039ac <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 80039b0:	2303      	movs	r3, #3
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80039b8:	b5b0      	push	{r4, r5, r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	000a      	movs	r2, r1
 80039c4:	2100      	movs	r1, #0
 80039c6:	000b      	movs	r3, r1
 80039c8:	0e51      	lsrs	r1, r2, #25
 80039ca:	01dd      	lsls	r5, r3, #7
 80039cc:	430d      	orrs	r5, r1
 80039ce:	01d4      	lsls	r4, r2, #7
 80039d0:	227d      	movs	r2, #125	; 0x7d
 80039d2:	2300      	movs	r3, #0
 80039d4:	0020      	movs	r0, r4
 80039d6:	0029      	movs	r1, r5
 80039d8:	f7fc fd76 	bl	80004c8 <__aeabi_uldivmod>
 80039dc:	0002      	movs	r2, r0
 80039de:	000b      	movs	r3, r1
 80039e0:	0013      	movs	r3, r2
}
 80039e2:	0018      	movs	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b002      	add	sp, #8
 80039e8:	bdb0      	pop	{r4, r5, r7, pc}

080039ea <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 80039ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ec:	b089      	sub	sp, #36	; 0x24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	0ed1      	lsrs	r1, r2, #27
 8003a00:	0158      	lsls	r0, r3, #5
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	4308      	orrs	r0, r1
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	0153      	lsls	r3, r2, #5
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	68fc      	ldr	r4, [r7, #12]
 8003a12:	6939      	ldr	r1, [r7, #16]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	1a5b      	subs	r3, r3, r1
 8003a18:	4194      	sbcs	r4, r2
 8003a1a:	001a      	movs	r2, r3
 8003a1c:	0023      	movs	r3, r4
 8003a1e:	0f91      	lsrs	r1, r2, #30
 8003a20:	0098      	lsls	r0, r3, #2
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4308      	orrs	r0, r1
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	0093      	lsls	r3, r2, #2
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	6838      	ldr	r0, [r7, #0]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	1812      	adds	r2, r2, r0
 8003a38:	414b      	adcs	r3, r1
 8003a3a:	0659      	lsls	r1, r3, #25
 8003a3c:	09d0      	lsrs	r0, r2, #7
 8003a3e:	0005      	movs	r5, r0
 8003a40:	0028      	movs	r0, r5
 8003a42:	4308      	orrs	r0, r1
 8003a44:	0005      	movs	r5, r0
 8003a46:	09db      	lsrs	r3, r3, #7
 8003a48:	001e      	movs	r6, r3
 8003a4a:	002b      	movs	r3, r5
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b009      	add	sp, #36	; 0x24
 8003a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a54 <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7ff ffa6 	bl	80039b8 <RTC_IF_Convert_ms2Tick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 8003a70:	f7ff ff82 	bl	8003978 <RTC_IF_GetTimerValue>
 8003a74:	0003      	movs	r3, r0
 8003a76:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003a78:	e000      	b.n	8003a7c <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 8003a7a:	46c0      	nop			; (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003a7c:	f7ff ff7c 	bl	8003978 <RTC_IF_GetTimerValue>
 8003a80:	0002      	movs	r2, r0
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d8f6      	bhi.n	8003a7a <RTC_IF_DelayMs+0x26>
  }
}
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b004      	add	sp, #16
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 8003a9e:	f018 fb5b 	bl	801c158 <UTIL_TIMER_IRQ_Handler>
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b002      	add	sp, #8
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 8003aaa:	b5b0      	push	{r4, r5, r7, lr}
 8003aac:	b08c      	sub	sp, #48	; 0x30
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fa      	adds	r2, r7, r3
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	0011      	movs	r1, r2
 8003abc:	0018      	movs	r0, r3
 8003abe:	f000 f9c1 	bl	8003e44 <RTC_GetCalendarValue>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	059b      	lsls	r3, r3, #22
 8003ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad0:	0a94      	lsrs	r4, r2, #10
 8003ad2:	431c      	orrs	r4, r3
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	0a9d      	lsrs	r5, r3, #10
 8003ad8:	0023      	movs	r3, r4
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	059b      	lsls	r3, r3, #22
 8003ae0:	0d9b      	lsrs	r3, r3, #22
 8003ae2:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7ff ff7f 	bl	80039ea <RTC_IF_Convert_Tick2ms>
 8003aec:	0003      	movs	r3, r0
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	801a      	strh	r2, [r3, #0]

  return seconds;
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003af6:	0018      	movs	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b00c      	add	sp, #48	; 0x30
 8003afc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003b00 <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <RTC_IF_BkUp_Write_Seconds+0x1c>)
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f005 ffac 	bl	8009a6c <HAL_RTCEx_BKUPWrite>
}
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	200005a8 	.word	0x200005a8

08003b20 <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f005 ff9c 	bl	8009a6c <HAL_RTCEx_BKUPWrite>
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b002      	add	sp, #8
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200005a8 	.word	0x200005a8

08003b40 <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <RTC_IF_BkUp_Read_Seconds+0x18>)
 8003b46:	2100      	movs	r1, #0
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f005 ffa5 	bl	8009a98 <HAL_RTCEx_BKUPRead>
 8003b4e:	0003      	movs	r3, r0
}
 8003b50:	0018      	movs	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	200005a8 	.word	0x200005a8

08003b5c <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 8003b62:	2101      	movs	r1, #1
 8003b64:	0018      	movs	r0, r3
 8003b66:	f005 ff97 	bl	8009a98 <HAL_RTCEx_BKUPRead>
 8003b6a:	0003      	movs	r3, r0
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	200005a8 	.word	0x200005a8

08003b78 <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8003b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7a:	b08d      	sub	sp, #52	; 0x34
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8003b80:	242e      	movs	r4, #46	; 0x2e
 8003b82:	193b      	adds	r3, r7, r4
 8003b84:	2200      	movs	r2, #0
 8003b86:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8003b88:	232c      	movs	r3, #44	; 0x2c
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8003b90:	232a      	movs	r3, #42	; 0x2a
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2200      	movs	r2, #0
 8003b96:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8003b98:	2328      	movs	r3, #40	; 0x28
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8003ba0:	2526      	movs	r5, #38	; 0x26
 8003ba2:	197b      	adds	r3, r7, r5
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8003ba8:	2610      	movs	r6, #16
 8003baa:	19ba      	adds	r2, r7, r6
 8003bac:	4b9b      	ldr	r3, [pc, #620]	; (8003e1c <RTC_StartWakeUpAlarm+0x2a4>)
 8003bae:	3304      	adds	r3, #4
 8003bb0:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003bb2:	c223      	stmia	r2!, {r0, r1, r5}
 8003bb4:	cb03      	ldmia	r3!, {r0, r1}
 8003bb6:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003bb8:	230c      	movs	r3, #12
 8003bba:	001d      	movs	r5, r3
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	4a97      	ldr	r2, [pc, #604]	; (8003e1c <RTC_StartWakeUpAlarm+0x2a4>)
 8003bc0:	6992      	ldr	r2, [r2, #24]
 8003bc2:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 8003bc4:	f7ff fe86 	bl	80038d4 <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003bc8:	19bb      	adds	r3, r7, r6
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	193b      	adds	r3, r7, r4
 8003bd0:	4993      	ldr	r1, [pc, #588]	; (8003e20 <RTC_StartWakeUpAlarm+0x2a8>)
 8003bd2:	1a8a      	subs	r2, r1, r2
 8003bd4:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	059b      	lsls	r3, r3, #22
 8003bdc:	0d9b      	lsrs	r3, r3, #22
 8003bde:	b299      	uxth	r1, r3
 8003be0:	193b      	adds	r3, r7, r4
 8003be2:	193a      	adds	r2, r7, r4
 8003be4:	8812      	ldrh	r2, [r2, #0]
 8003be6:	188a      	adds	r2, r1, r2
 8003be8:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0a9b      	lsrs	r3, r3, #10
 8003bee:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003bf0:	002b      	movs	r3, r5
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	789a      	ldrb	r2, [r3, #2]
 8003bf6:	2526      	movs	r5, #38	; 0x26
 8003bf8:	197b      	adds	r3, r7, r5
 8003bfa:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003bfc:	e00a      	b.n	8003c14 <RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a88      	ldr	r2, [pc, #544]	; (8003e24 <RTC_StartWakeUpAlarm+0x2ac>)
 8003c02:	4694      	mov	ip, r2
 8003c04:	4463      	add	r3, ip
 8003c06:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8003c08:	2126      	movs	r1, #38	; 0x26
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	881a      	ldrh	r2, [r3, #0]
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	3201      	adds	r2, #1
 8003c12:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a84      	ldr	r2, [pc, #528]	; (8003e28 <RTC_StartWakeUpAlarm+0x2b0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d8f0      	bhi.n	8003bfe <RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	18fb      	adds	r3, r7, r3
 8003c20:	781a      	ldrb	r2, [r3, #0]
 8003c22:	2328      	movs	r3, #40	; 0x28
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003c28:	e00a      	b.n	8003c40 <RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a7f      	ldr	r2, [pc, #508]	; (8003e2c <RTC_StartWakeUpAlarm+0x2b4>)
 8003c2e:	4694      	mov	ip, r2
 8003c30:	4463      	add	r3, ip
 8003c32:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8003c34:	2128      	movs	r1, #40	; 0x28
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	881a      	ldrh	r2, [r3, #0]
 8003c3a:	187b      	adds	r3, r7, r1
 8003c3c:	3201      	adds	r2, #1
 8003c3e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	23e1      	movs	r3, #225	; 0xe1
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d2ef      	bcs.n	8003c2a <RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8003c4a:	2310      	movs	r3, #16
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	785a      	ldrb	r2, [r3, #1]
 8003c50:	232a      	movs	r3, #42	; 0x2a
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003c56:	e008      	b.n	8003c6a <RTC_StartWakeUpAlarm+0xf2>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3b3c      	subs	r3, #60	; 0x3c
 8003c5c:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8003c5e:	212a      	movs	r1, #42	; 0x2a
 8003c60:	187b      	adds	r3, r7, r1
 8003c62:	881a      	ldrh	r2, [r3, #0]
 8003c64:	187b      	adds	r3, r7, r1
 8003c66:	3201      	adds	r2, #1
 8003c68:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b3b      	cmp	r3, #59	; 0x3b
 8003c6e:	d8f3      	bhi.n	8003c58 <RTC_StartWakeUpAlarm+0xe0>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8003c70:	2310      	movs	r3, #16
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	789b      	ldrb	r3, [r3, #2]
 8003c76:	b299      	uxth	r1, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	232c      	movs	r3, #44	; 0x2c
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	188a      	adds	r2, r1, r2
 8003c82:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003c84:	e00d      	b.n	8003ca2 <RTC_StartWakeUpAlarm+0x12a>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 8003c86:	222e      	movs	r2, #46	; 0x2e
 8003c88:	18bb      	adds	r3, r7, r2
 8003c8a:	18ba      	adds	r2, r7, r2
 8003c8c:	8812      	ldrh	r2, [r2, #0]
 8003c8e:	4968      	ldr	r1, [pc, #416]	; (8003e30 <RTC_StartWakeUpAlarm+0x2b8>)
 8003c90:	468c      	mov	ip, r1
 8003c92:	4462      	add	r2, ip
 8003c94:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	881a      	ldrh	r2, [r3, #0]
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	3201      	adds	r2, #1
 8003ca0:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003ca2:	232e      	movs	r3, #46	; 0x2e
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	881a      	ldrh	r2, [r3, #0]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d2ea      	bcs.n	8003c86 <RTC_StartWakeUpAlarm+0x10e>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003cb0:	e00b      	b.n	8003cca <RTC_StartWakeUpAlarm+0x152>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003cb2:	222c      	movs	r2, #44	; 0x2c
 8003cb4:	18bb      	adds	r3, r7, r2
 8003cb6:	18ba      	adds	r2, r7, r2
 8003cb8:	8812      	ldrh	r2, [r2, #0]
 8003cba:	3a3c      	subs	r2, #60	; 0x3c
 8003cbc:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8003cbe:	212a      	movs	r1, #42	; 0x2a
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	881a      	ldrh	r2, [r3, #0]
 8003cc4:	187b      	adds	r3, r7, r1
 8003cc6:	3201      	adds	r2, #1
 8003cc8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003cca:	232c      	movs	r3, #44	; 0x2c
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	2b3b      	cmp	r3, #59	; 0x3b
 8003cd2:	d8ee      	bhi.n	8003cb2 <RTC_StartWakeUpAlarm+0x13a>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003cd4:	e00b      	b.n	8003cee <RTC_StartWakeUpAlarm+0x176>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8003cd6:	222a      	movs	r2, #42	; 0x2a
 8003cd8:	18bb      	adds	r3, r7, r2
 8003cda:	18ba      	adds	r2, r7, r2
 8003cdc:	8812      	ldrh	r2, [r2, #0]
 8003cde:	3a3c      	subs	r2, #60	; 0x3c
 8003ce0:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 8003ce2:	2128      	movs	r1, #40	; 0x28
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	3201      	adds	r2, #1
 8003cec:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003cee:	232a      	movs	r3, #42	; 0x2a
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2b3b      	cmp	r3, #59	; 0x3b
 8003cf6:	d8ee      	bhi.n	8003cd6 <RTC_StartWakeUpAlarm+0x15e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8003cf8:	e00b      	b.n	8003d12 <RTC_StartWakeUpAlarm+0x19a>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003cfa:	2228      	movs	r2, #40	; 0x28
 8003cfc:	18bb      	adds	r3, r7, r2
 8003cfe:	18ba      	adds	r2, r7, r2
 8003d00:	8812      	ldrh	r2, [r2, #0]
 8003d02:	3a18      	subs	r2, #24
 8003d04:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8003d06:	2126      	movs	r1, #38	; 0x26
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	881a      	ldrh	r2, [r3, #0]
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	3201      	adds	r2, #1
 8003d10:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8003d12:	2328      	movs	r3, #40	; 0x28
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	2b17      	cmp	r3, #23
 8003d1a:	d8ee      	bhi.n	8003cfa <RTC_StartWakeUpAlarm+0x182>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 8003d1c:	210c      	movs	r1, #12
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	78db      	ldrb	r3, [r3, #3]
 8003d22:	2203      	movs	r2, #3
 8003d24:	4013      	ands	r3, r2
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d119      	bne.n	8003d60 <RTC_StartWakeUpAlarm+0x1e8>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	4a40      	ldr	r2, [pc, #256]	; (8003e34 <RTC_StartWakeUpAlarm+0x2bc>)
 8003d34:	5cd3      	ldrb	r3, [r2, r3]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2426      	movs	r4, #38	; 0x26
 8003d3a:	193a      	adds	r2, r7, r4
 8003d3c:	8812      	ldrh	r2, [r2, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d928      	bls.n	8003d94 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8003d42:	193b      	adds	r3, r7, r4
 8003d44:	8818      	ldrh	r0, [r3, #0]
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	4a39      	ldr	r2, [pc, #228]	; (8003e34 <RTC_StartWakeUpAlarm+0x2bc>)
 8003d4e:	5cd3      	ldrb	r3, [r2, r3]
 8003d50:	0019      	movs	r1, r3
 8003d52:	f7fc fb51 	bl	80003f8 <__aeabi_idivmod>
 8003d56:	000b      	movs	r3, r1
 8003d58:	001a      	movs	r2, r3
 8003d5a:	193b      	adds	r3, r7, r4
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	e019      	b.n	8003d94 <RTC_StartWakeUpAlarm+0x21c>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003d60:	210c      	movs	r1, #12
 8003d62:	187b      	adds	r3, r7, r1
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	4a33      	ldr	r2, [pc, #204]	; (8003e38 <RTC_StartWakeUpAlarm+0x2c0>)
 8003d6a:	5cd3      	ldrb	r3, [r2, r3]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2426      	movs	r4, #38	; 0x26
 8003d70:	193a      	adds	r2, r7, r4
 8003d72:	8812      	ldrh	r2, [r2, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d90d      	bls.n	8003d94 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8003d78:	193b      	adds	r3, r7, r4
 8003d7a:	8818      	ldrh	r0, [r3, #0]
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	4a2d      	ldr	r2, [pc, #180]	; (8003e38 <RTC_StartWakeUpAlarm+0x2c0>)
 8003d84:	5cd3      	ldrb	r3, [r2, r3]
 8003d86:	0019      	movs	r1, r3
 8003d88:	f7fc fb36 	bl	80003f8 <__aeabi_idivmod>
 8003d8c:	000b      	movs	r3, r1
 8003d8e:	001a      	movs	r2, r3
 8003d90:	193b      	adds	r3, r7, r4
 8003d92:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8003d94:	232e      	movs	r3, #46	; 0x2e
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <RTC_StartWakeUpAlarm+0x2a8>)
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	001a      	movs	r2, r3
 8003da0:	4b26      	ldr	r3, [pc, #152]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003da2:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8003da4:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003da6:	22a0      	movs	r2, #160	; 0xa0
 8003da8:	0512      	lsls	r2, r2, #20
 8003daa:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8003dac:	232c      	movs	r3, #44	; 0x2c
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003db6:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8003db8:	232a      	movs	r3, #42	; 0x2a
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003dc2:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8003dc4:	2328      	movs	r3, #40	; 0x28
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003dce:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8003dd0:	2326      	movs	r3, #38	; 0x26
 8003dd2:	18fb      	adds	r3, r7, r3
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b2d9      	uxtb	r1, r3
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003dda:	2220      	movs	r2, #32
 8003ddc:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8003dde:	2310      	movs	r3, #16
 8003de0:	18fb      	adds	r3, r7, r3
 8003de2:	78da      	ldrb	r2, [r3, #3]
 8003de4:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003de6:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003de8:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003df6:	2280      	movs	r2, #128	; 0x80
 8003df8:	0052      	lsls	r2, r2, #1
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8003e08:	490c      	ldr	r1, [pc, #48]	; (8003e3c <RTC_StartWakeUpAlarm+0x2c4>)
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <RTC_StartWakeUpAlarm+0x2c8>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f005 fb5c 	bl	80094cc <HAL_RTC_SetAlarm_IT>
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b00d      	add	sp, #52	; 0x34
 8003e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e1c:	200005f8 	.word	0x200005f8
 8003e20:	000003ff 	.word	0x000003ff
 8003e24:	fffeae80 	.word	0xfffeae80
 8003e28:	0001517f 	.word	0x0001517f
 8003e2c:	fffff1f0 	.word	0xfffff1f0
 8003e30:	fffffc00 	.word	0xfffffc00
 8003e34:	0801d950 	.word	0x0801d950
 8003e38:	0801d944 	.word	0x0801d944
 8003e3c:	200005d0 	.word	0x200005d0
 8003e40:	200005a8 	.word	0x200005a8

08003e44 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003e52:	6839      	ldr	r1, [r7, #0]
 8003e54:	4b42      	ldr	r3, [pc, #264]	; (8003f60 <RTC_GetCalendarValue+0x11c>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f005 f9df 	bl	800921c <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 8003e5e:	4b41      	ldr	r3, [pc, #260]	; (8003f64 <RTC_GetCalendarValue+0x120>)
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7ff fcc7 	bl	80037f4 <LL_RTC_TIME_GetSubSecond>
 8003e66:	0003      	movs	r3, r0
 8003e68:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <RTC_GetCalendarValue+0x11c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	0018      	movs	r0, r3
 8003e72:	f005 fadd 	bl	8009430 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003e76:	6839      	ldr	r1, [r7, #0]
 8003e78:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <RTC_GetCalendarValue+0x11c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f005 f9cd 	bl	800921c <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8003e82:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <RTC_GetCalendarValue+0x120>)
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7ff fcb5 	bl	80037f4 <LL_RTC_TIME_GetSubSecond>
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d1e5      	bne.n	8003e5e <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	78db      	ldrb	r3, [r3, #3]
 8003e96:	001a      	movs	r2, r3
 8003e98:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <RTC_GetCalendarValue+0x124>)
 8003e9a:	4353      	muls	r3, r2
 8003e9c:	3303      	adds	r3, #3
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	78db      	ldrb	r3, [r3, #3]
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <RTC_GetCalendarValue+0x70>
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <RTC_GetCalendarValue+0x128>)
 8003eb2:	e000      	b.n	8003eb6 <RTC_GetCalendarValue+0x72>
 8003eb4:	4b2e      	ldr	r3, [pc, #184]	; (8003f70 <RTC_GetCalendarValue+0x12c>)
 8003eb6:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	0013      	movs	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	3301      	adds	r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	da00      	bge.n	8003ed0 <RTC_GetCalendarValue+0x8c>
 8003ece:	3301      	adds	r3, #1
 8003ed0:	105b      	asrs	r3, r3, #1
 8003ed2:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	785b      	ldrb	r3, [r3, #1]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	40da      	lsrs	r2, r3
 8003ee0:	0013      	movs	r3, r2
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	18d3      	adds	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	789b      	ldrb	r3, [r3, #2]
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	18d3      	adds	r3, r2, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	0013      	movs	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	011a      	lsls	r2, r3, #4
 8003f06:	1ad2      	subs	r2, r2, r3
 8003f08:	0113      	lsls	r3, r2, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	01db      	lsls	r3, r3, #7
 8003f0e:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	789b      	ldrb	r3, [r3, #2]
 8003f14:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	0013      	movs	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	011a      	lsls	r2, r3, #4
 8003f24:	1ad2      	subs	r2, r2, r3
 8003f26:	0113      	lsls	r3, r2, #4
 8003f28:	001a      	movs	r2, r3
 8003f2a:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	001a      	movs	r2, r3
 8003f32:	0013      	movs	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	18c3      	adds	r3, r0, r3
 8003f3c:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	18d3      	adds	r3, r2, r3
 8003f42:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	029a      	lsls	r2, r3, #10
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <RTC_GetCalendarValue+0x130>)
 8003f50:	4694      	mov	ip, r2
 8003f52:	4463      	add	r3, ip
 8003f54:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 8003f56:	697b      	ldr	r3, [r7, #20]
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b006      	add	sp, #24
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	200005a8 	.word	0x200005a8
 8003f64:	40002800 	.word	0x40002800
 8003f68:	000005b5 	.word	0x000005b5
 8003f6c:	00445550 	.word	0x00445550
 8003f70:	0099aaa0 	.word	0x0099aaa0
 8003f74:	000003ff 	.word	0x000003ff

08003f78 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8003f7c:	46c0      	nop			; (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f92:	f3ef 8310 	mrs	r3, PRIMASK
 8003f96:	607b      	str	r3, [r7, #4]
  return(result);
 8003f98:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8003f9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f9c:	b672      	cpsid	i
}
 8003f9e:	46c0      	nop			; (mov r8, r8)

  Sx_Board_IoDeInit();
 8003fa0:	f001 faee 	bl	8005580 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <PWR_EnterStopMode+0x48>)
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7ff f93a 	bl	8003220 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <PWR_EnterStopMode+0x4c>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <PWR_EnterStopMode+0x4c>)
 8003fb2:	2104      	movs	r1, #4
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f004 f800 	bl	8007fcc <HAL_PWR_EnterSTOPMode>
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b004      	add	sp, #16
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	200004d4 	.word	0x200004d4
 8003fd8:	40007000 	.word	0x40007000

08003fdc <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 8003fea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fec:	b672      	cpsid	i
}
 8003fee:	46c0      	nop			; (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8003ff0:	4b19      	ldr	r3, [pc, #100]	; (8004058 <PWR_ExitStopMode+0x7c>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b18      	ldr	r3, [pc, #96]	; (8004058 <PWR_ExitStopMode+0x7c>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	4b16      	ldr	r3, [pc, #88]	; (8004058 <PWR_ExitStopMode+0x7c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2204      	movs	r2, #4
 8004004:	4013      	ands	r3, r2
 8004006:	d0fa      	beq.n	8003ffe <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <PWR_ExitStopMode+0x7c>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <PWR_ExitStopMode+0x7c>)
 800400e:	2180      	movs	r1, #128	; 0x80
 8004010:	0449      	lsls	r1, r1, #17
 8004012:	430a      	orrs	r2, r1
 8004014:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <PWR_ExitStopMode+0x7c>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	049b      	lsls	r3, r3, #18
 8004020:	4013      	ands	r3, r2
 8004022:	d0f9      	beq.n	8004018 <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <PWR_ExitStopMode+0x7c>)
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <PWR_ExitStopMode+0x7c>)
 800402a:	2103      	movs	r1, #3
 800402c:	430a      	orrs	r2, r1
 800402e:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <PWR_ExitStopMode+0x7c>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	220c      	movs	r2, #12
 8004038:	4013      	ands	r3, r2
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d1f9      	bne.n	8004032 <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 800403e:	f001 f999 	bl	8005374 <CMWX1ZZABZ0XX_RADIO_IoInit>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f383 8810 	msr	PRIMASK, r3
}
 800404c:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b004      	add	sp, #16
 8004054:	bd80      	pop	{r7, pc}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	40021000 	.word	0x40021000

0800405c <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004060:	2101      	movs	r1, #1
 8004062:	2000      	movs	r0, #0
 8004064:	f003 ff5a 	bl	8007f1c <HAL_PWR_EnterSLEEPMode>
}
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	af00      	add	r7, sp, #0
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2201      	movs	r2, #1
 8004088:	4013      	ands	r3, r2
 800408a:	2b01      	cmp	r3, #1
 800408c:	d10e      	bne.n	80040ac <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2201      	movs	r2, #1
 8004096:	4013      	ands	r3, r2
 8004098:	2b01      	cmp	r3, #1
 800409a:	d107      	bne.n	80040ac <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f888 	bl	80041bc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2202      	movs	r2, #2
 80040b4:	4013      	ands	r3, r2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d10e      	bne.n	80040d8 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2202      	movs	r2, #2
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d107      	bne.n	80040d8 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2202      	movs	r2, #2
 80040ce:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f87a 	bl	80041cc <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2204      	movs	r2, #4
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d10e      	bne.n	8004104 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2204      	movs	r2, #4
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d107      	bne.n	8004104 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2204      	movs	r2, #4
 80040fa:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 f86c 	bl	80041dc <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2208      	movs	r2, #8
 800410c:	4013      	ands	r3, r2
 800410e:	2b08      	cmp	r3, #8
 8004110:	d10e      	bne.n	8004130 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2208      	movs	r2, #8
 800411a:	4013      	ands	r3, r2
 800411c:	2b08      	cmp	r3, #8
 800411e:	d107      	bne.n	8004130 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2208      	movs	r2, #8
 8004126:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	0018      	movs	r0, r3
 800412c:	f000 f85e 	bl	80041ec <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2210      	movs	r2, #16
 8004138:	4013      	ands	r3, r2
 800413a:	2b10      	cmp	r3, #16
 800413c:	d10e      	bne.n	800415c <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2210      	movs	r2, #16
 8004146:	4013      	ands	r3, r2
 8004148:	2b10      	cmp	r3, #16
 800414a:	d107      	bne.n	800415c <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2210      	movs	r2, #16
 8004152:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	0018      	movs	r0, r3
 8004158:	f000 f850 	bl	80041fc <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2220      	movs	r2, #32
 8004164:	4013      	ands	r3, r2
 8004166:	2b20      	cmp	r3, #32
 8004168:	d10e      	bne.n	8004188 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2220      	movs	r2, #32
 8004172:	4013      	ands	r3, r2
 8004174:	2b20      	cmp	r3, #32
 8004176:	d107      	bne.n	8004188 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2220      	movs	r2, #32
 800417e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	0018      	movs	r0, r3
 8004184:	f000 f842 	bl	800420c <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	4013      	ands	r3, r2
 8004192:	2b40      	cmp	r3, #64	; 0x40
 8004194:	d10e      	bne.n	80041b4 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2240      	movs	r2, #64	; 0x40
 800419e:	4013      	ands	r3, r2
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d107      	bne.n	80041b4 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2240      	movs	r2, #64	; 0x40
 80041aa:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f000 f834 	bl	800421c <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b002      	add	sp, #8
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b002      	add	sp, #8
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004230:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <HAL_MspInit+0x3c>)
 8004232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <HAL_MspInit+0x3c>)
 8004236:	2180      	movs	r1, #128	; 0x80
 8004238:	0549      	lsls	r1, r1, #21
 800423a:	430a      	orrs	r2, r1
 800423c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 800423e:	f003 fe5f 	bl	8007f00 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8004242:	f003 ff2d 	bl	80080a0 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_MspInit+0x40>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_MspInit+0x40>)
 800424c:	2108      	movs	r1, #8
 800424e:	430a      	orrs	r2, r1
 8004250:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_MspInit+0x40>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_MspInit+0x40>)
 8004258:	2108      	movs	r1, #8
 800425a:	438a      	bics	r2, r1
 800425c:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 800425e:	f003 ff11 	bl	8008084 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40021000 	.word	0x40021000
 800426c:	40022000 	.word	0x40022000

08004270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004274:	46c0      	nop			; (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	e7fd      	b.n	800427e <HardFault_Handler+0x4>

08004282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800429a:	f001 fbe1 	bl	8005a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <EXTI0_1_IRQHandler+0x1c>)
 80042aa:	0018      	movs	r0, r3
 80042ac:	f002 fd6c 	bl	8006d88 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <EXTI0_1_IRQHandler+0x20>)
 80042b2:	0018      	movs	r0, r3
 80042b4:	f002 fd68 	bl	8006d88 <HAL_EXTI_IRQHandler>
#endif
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	200007a4 	.word	0x200007a4
 80042c4:	2000079c 	.word	0x2000079c

080042c8 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <EXTI4_15_IRQHandler+0x1c>)
 80042da:	0018      	movs	r0, r3
 80042dc:	f002 fd54 	bl	8006d88 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80042e0:	4b04      	ldr	r3, [pc, #16]	; (80042f4 <EXTI4_15_IRQHandler+0x20>)
 80042e2:	0018      	movs	r0, r3
 80042e4:	f002 fd50 	bl	8006d88 <HAL_EXTI_IRQHandler>
#endif
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	20000794 	.word	0x20000794
 80042f4:	200007ac 	.word	0x200007ac

080042f8 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80042fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004300:	0018      	movs	r0, r3
 8004302:	f002 fc32 	bl	8006b6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000614 	.word	0x20000614

08004310 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <USART2_IRQHandler+0x14>)
 8004316:	0018      	movs	r0, r3
 8004318:	f006 f884 	bl	800a424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	20000614 	.word	0x20000614

08004328 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)// New
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <LPTIM1_IRQHandler+0x14>)
 800432e:	0018      	movs	r0, r3
 8004330:	f7ff fea2 	bl	8004078 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	20000578 	.word	0x20000578

08004340 <RTC_IRQHandler>:
/*}*/



void RTC_IRQHandler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc); // тоже поднимает из сна sx1276 и плату
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <RTC_IRQHandler+0x14>)
 8004346:	0018      	movs	r0, r3
 8004348:	f005 faac 	bl	80098a4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	200005a8 	.word	0x200005a8

08004358 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 800435c:	f017 fd90 	bl	801be80 <UTIL_TIMER_Init>

  Gpio_PreInit();
 8004360:	f000 f8f6 	bl	8004550 <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 8004364:	f000 f9c2 	bl	80046ec <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8004368:	f016 fef0 	bl	801b14c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <SystemApp_Init+0x44>)
 800436e:	0018      	movs	r0, r3
 8004370:	f016 ffa4 	bl	801b2bc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8004374:	2002      	movs	r0, #2
 8004376:	f016 ffaf 	bl	801b2d8 <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800437a:	f7fe ff7d 	bl	8003278 <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 800437e:	f001 fa2d 	bl	80057dc <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 8004382:	f000 fff7 	bl	8005374 <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Initialize the Sensors */
  EnvSensors_Init(); //  dell
 8004386:	f000 fa55 	bl	8004834 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800438a:	f017 f9a7 	bl	801b6dc <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800438e:	2101      	movs	r1, #1
 8004390:	2001      	movs	r0, #1
 8004392:	f017 f9e3 	bl	801b75c <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	08004505 	.word	0x08004505

080043a0 <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80043a4:	f017 fa3c 	bl	801b820 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80043b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80043b6:	250f      	movs	r5, #15
 80043b8:	197b      	adds	r3, r7, r5
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80043be:	260c      	movs	r6, #12
 80043c0:	19bc      	adds	r4, r7, r6
 80043c2:	f7fe ffad 	bl	8003320 <SYS_GetBatteryLevel>
 80043c6:	0003      	movs	r3, r0
 80043c8:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80043ca:	19bb      	adds	r3, r7, r6
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	4a18      	ldr	r2, [pc, #96]	; (8004430 <GetBatteryLevel+0x80>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d903      	bls.n	80043dc <GetBatteryLevel+0x2c>
  {
//    batteryLevel = LORAWAN_MAX_BAT;
	  batteryLevel = 100;
 80043d4:	197b      	adds	r3, r7, r5
 80043d6:	2264      	movs	r2, #100	; 0x64
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	e021      	b.n	8004420 <GetBatteryLevel+0x70>
  }
  else if (batteryLevelmV < VDD_MIN)
 80043dc:	230c      	movs	r3, #12
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	881a      	ldrh	r2, [r3, #0]
 80043e2:	23e1      	movs	r3, #225	; 0xe1
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d204      	bcs.n	80043f4 <GetBatteryLevel+0x44>
  {
    batteryLevel = 0;
 80043ea:	230f      	movs	r3, #15
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	e015      	b.n	8004420 <GetBatteryLevel+0x70>
  }
  else
  {
//    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
    uint32_t batteryRange = VDD_BAT - VDD_MIN;
 80043f4:	2396      	movs	r3, #150	; 0x96
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	60bb      	str	r3, [r7, #8]
    uint32_t batteryRemaining = batteryLevelmV - VDD_MIN;
 80043fa:	230c      	movs	r3, #12
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <GetBatteryLevel+0x84>)
 8004402:	4694      	mov	ip, r2
 8004404:	4463      	add	r3, ip
 8004406:	607b      	str	r3, [r7, #4]
    batteryLevel = (batteryRemaining * 100) / batteryRange;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2264      	movs	r2, #100	; 0x64
 800440c:	4353      	muls	r3, r2
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	0018      	movs	r0, r3
 8004412:	f7fb fe81 	bl	8000118 <__udivsi3>
 8004416:	0003      	movs	r3, r0
 8004418:	001a      	movs	r2, r3
 800441a:	230f      	movs	r3, #15
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8004420:	230f      	movs	r3, #15
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	781b      	ldrb	r3, [r3, #0]
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b005      	add	sp, #20
 800442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	00000bb8 	.word	0x00000bb8
 8004434:	fffff8f8 	.word	0xfffff8f8

08004438 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 800443e:	1dbb      	adds	r3, r7, #6
 8004440:	2200      	movs	r2, #0
 8004442:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8004444:	f7fe ff24 	bl	8003290 <SYS_GetTemperatureLevel>
 8004448:	1e03      	subs	r3, r0, #0
 800444a:	da00      	bge.n	800444e <GetTemperatureLevel+0x16>
 800444c:	33ff      	adds	r3, #255	; 0xff
 800444e:	121b      	asrs	r3, r3, #8
 8004450:	b21a      	sxth	r2, r3
 8004452:	1dbb      	adds	r3, r7, #6
 8004454:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8004456:	1dbb      	adds	r3, r7, #6
 8004458:	881b      	ldrh	r3, [r3, #0]
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b002      	add	sp, #8
 8004460:	bd80      	pop	{r7, pc}

08004462 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8004462:	b590      	push	{r4, r7, lr}
 8004464:	b085      	sub	sp, #20
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800446a:	f001 fb0b 	bl	8005a84 <HAL_GetUIDw0>
 800446e:	0004      	movs	r4, r0
 8004470:	f001 fb1c 	bl	8005aac <HAL_GetUIDw2>
 8004474:	0003      	movs	r3, r0
 8004476:	18e3      	adds	r3, r4, r3
 8004478:	60fb      	str	r3, [r7, #12]
  uint32_t ID_2_val = HAL_GetUIDw1();
 800447a:	f001 fb0d 	bl	8005a98 <HAL_GetUIDw1>
 800447e:	0003      	movs	r3, r0
 8004480:	60bb      	str	r3, [r7, #8]

  id[7] = (ID_1_3_val) >> 24;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	0e1a      	lsrs	r2, r3, #24
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3307      	adds	r3, #7
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]
  id[6] = (ID_1_3_val) >> 16;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	0c1a      	lsrs	r2, r3, #16
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3306      	adds	r3, #6
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
  id[5] = (ID_1_3_val) >> 8;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	0a1a      	lsrs	r2, r3, #8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3305      	adds	r3, #5
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
  id[4] = (ID_1_3_val);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3304      	adds	r3, #4
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]
  id[3] = (ID_2_val) >> 24;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	0e1a      	lsrs	r2, r3, #24
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3303      	adds	r3, #3
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]
  id[2] = (ID_2_val) >> 16;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	0c1a      	lsrs	r2, r3, #16
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3302      	adds	r3, #2
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]
  id[1] = (ID_2_val) >> 8;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	0a1a      	lsrs	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3301      	adds	r3, #1
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
  id[0] = (ID_2_val);
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80044dc:	46c0      	nop			; (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b005      	add	sp, #20
 80044e2:	bd90      	pop	{r4, r7, pc}

080044e4 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80044e4:	b5b0      	push	{r4, r5, r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80044e8:	f001 facc 	bl	8005a84 <HAL_GetUIDw0>
 80044ec:	0004      	movs	r4, r0
 80044ee:	f001 fad3 	bl	8005a98 <HAL_GetUIDw1>
 80044f2:	0003      	movs	r3, r0
 80044f4:	405c      	eors	r4, r3
 80044f6:	f001 fad9 	bl	8005aac <HAL_GetUIDw2>
 80044fa:	0003      	movs	r3, r0
 80044fc:	4063      	eors	r3, r4
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	bdb0      	pop	{r4, r5, r7, pc}

08004504 <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b087      	sub	sp, #28
 8004508:	af02      	add	r7, sp, #8
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800450e:	2408      	movs	r4, #8
 8004510:	193b      	adds	r3, r7, r4
 8004512:	0018      	movs	r0, r3
 8004514:	f017 fc52 	bl	801bdbc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8004518:	0022      	movs	r2, r4
 800451a:	18bb      	adds	r3, r7, r2
 800451c:	6819      	ldr	r1, [r3, #0]
 800451e:	18bb      	adds	r3, r7, r2
 8004520:	2204      	movs	r2, #4
 8004522:	5e9b      	ldrsh	r3, [r3, r2]
 8004524:	4a09      	ldr	r2, [pc, #36]	; (800454c <TimestampNow+0x48>)
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	000b      	movs	r3, r1
 800452c:	2110      	movs	r1, #16
 800452e:	f000 f8a9 	bl	8004684 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0018      	movs	r0, r3
 8004536:	f7fb fde7 	bl	8000108 <strlen>
 800453a:	0003      	movs	r3, r0
 800453c:	b29a      	uxth	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	46bd      	mov	sp, r7
 8004546:	b005      	add	sp, #20
 8004548:	bd90      	pop	{r4, r7, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	0801d9b4 	.word	0x0801d9b4

08004550 <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b08b      	sub	sp, #44	; 0x2c
 8004554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004556:	2414      	movs	r4, #20
 8004558:	193b      	adds	r3, r7, r4
 800455a:	0018      	movs	r0, r3
 800455c:	2314      	movs	r3, #20
 800455e:	001a      	movs	r2, r3
 8004560:	2100      	movs	r1, #0
 8004562:	f018 fea0 	bl	801d2a6 <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004566:	4b38      	ldr	r3, [pc, #224]	; (8004648 <Gpio_PreInit+0xf8>)
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	4b37      	ldr	r3, [pc, #220]	; (8004648 <Gpio_PreInit+0xf8>)
 800456c:	2101      	movs	r1, #1
 800456e:	430a      	orrs	r2, r1
 8004570:	62da      	str	r2, [r3, #44]	; 0x2c
 8004572:	4b35      	ldr	r3, [pc, #212]	; (8004648 <Gpio_PreInit+0xf8>)
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	2201      	movs	r2, #1
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800457e:	4b32      	ldr	r3, [pc, #200]	; (8004648 <Gpio_PreInit+0xf8>)
 8004580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004582:	4b31      	ldr	r3, [pc, #196]	; (8004648 <Gpio_PreInit+0xf8>)
 8004584:	2102      	movs	r1, #2
 8004586:	430a      	orrs	r2, r1
 8004588:	62da      	str	r2, [r3, #44]	; 0x2c
 800458a:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <Gpio_PreInit+0xf8>)
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	2202      	movs	r2, #2
 8004590:	4013      	ands	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004596:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <Gpio_PreInit+0xf8>)
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <Gpio_PreInit+0xf8>)
 800459c:	2104      	movs	r1, #4
 800459e:	430a      	orrs	r2, r1
 80045a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80045a2:	4b29      	ldr	r3, [pc, #164]	; (8004648 <Gpio_PreInit+0xf8>)
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	2204      	movs	r2, #4
 80045a8:	4013      	ands	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045ae:	4b26      	ldr	r3, [pc, #152]	; (8004648 <Gpio_PreInit+0xf8>)
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	4b25      	ldr	r3, [pc, #148]	; (8004648 <Gpio_PreInit+0xf8>)
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	430a      	orrs	r2, r1
 80045b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80045ba:	4b23      	ldr	r3, [pc, #140]	; (8004648 <Gpio_PreInit+0xf8>)
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	2280      	movs	r2, #128	; 0x80
 80045c0:	4013      	ands	r3, r2
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045c6:	193b      	adds	r3, r7, r4
 80045c8:	2203      	movs	r2, #3
 80045ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045cc:	193b      	adds	r3, r7, r4
 80045ce:	2200      	movs	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 80045d2:	193b      	adds	r3, r7, r4
 80045d4:	4a1d      	ldr	r2, [pc, #116]	; (800464c <Gpio_PreInit+0xfc>)
 80045d6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d8:	193a      	adds	r2, r7, r4
 80045da:	23a0      	movs	r3, #160	; 0xa0
 80045dc:	05db      	lsls	r3, r3, #23
 80045de:	0011      	movs	r1, r2
 80045e0:	0018      	movs	r0, r3
 80045e2:	f002 fbf5 	bl	8006dd0 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80045e6:	193b      	adds	r3, r7, r4
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <Gpio_PreInit+0x100>)
 80045ea:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ec:	193b      	adds	r3, r7, r4
 80045ee:	4a19      	ldr	r2, [pc, #100]	; (8004654 <Gpio_PreInit+0x104>)
 80045f0:	0019      	movs	r1, r3
 80045f2:	0010      	movs	r0, r2
 80045f4:	f002 fbec 	bl	8006dd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045f8:	193b      	adds	r3, r7, r4
 80045fa:	4a17      	ldr	r2, [pc, #92]	; (8004658 <Gpio_PreInit+0x108>)
 80045fc:	0019      	movs	r1, r3
 80045fe:	0010      	movs	r0, r2
 8004600:	f002 fbe6 	bl	8006dd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004604:	193b      	adds	r3, r7, r4
 8004606:	4a15      	ldr	r2, [pc, #84]	; (800465c <Gpio_PreInit+0x10c>)
 8004608:	0019      	movs	r1, r3
 800460a:	0010      	movs	r0, r2
 800460c:	f002 fbe0 	bl	8006dd0 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <Gpio_PreInit+0xf8>)
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <Gpio_PreInit+0xf8>)
 8004616:	2101      	movs	r1, #1
 8004618:	438a      	bics	r2, r1
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <Gpio_PreInit+0xf8>)
 800461e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004620:	4b09      	ldr	r3, [pc, #36]	; (8004648 <Gpio_PreInit+0xf8>)
 8004622:	2102      	movs	r1, #2
 8004624:	438a      	bics	r2, r1
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <Gpio_PreInit+0xf8>)
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <Gpio_PreInit+0xf8>)
 800462e:	2104      	movs	r1, #4
 8004630:	438a      	bics	r2, r1
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <Gpio_PreInit+0xf8>)
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <Gpio_PreInit+0xf8>)
 800463a:	2180      	movs	r1, #128	; 0x80
 800463c:	438a      	bics	r2, r1
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 8004640:	46c0      	nop			; (mov r8, r8)
 8004642:	46bd      	mov	sp, r7
 8004644:	b00b      	add	sp, #44	; 0x2c
 8004646:	bd90      	pop	{r4, r7, pc}
 8004648:	40021000 	.word	0x40021000
 800464c:	00009fff 	.word	0x00009fff
 8004650:	0000ffff 	.word	0x0000ffff
 8004654:	50000400 	.word	0x50000400
 8004658:	50000800 	.word	0x50000800
 800465c:	50001c00 	.word	0x50001c00

08004660 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8004664:	2101      	movs	r1, #1
 8004666:	2004      	movs	r0, #4
 8004668:	f017 f848 	bl	801b6fc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8004676:	2100      	movs	r1, #0
 8004678:	2004      	movs	r0, #4
 800467a:	f017 f83f 	bl	801b6fc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8004684:	b40c      	push	{r2, r3}
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8004690:	231c      	movs	r3, #28
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f017 ffb9 	bl	801c614 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bc80      	pop	{r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	b002      	add	sp, #8
 80046ae:	4718      	bx	r3

080046b0 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80046ba:	0018      	movs	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	b002      	add	sp, #8
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 80046c6:	f7ff f957 	bl	8003978 <RTC_IF_GetTimerValue>
 80046ca:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0018      	movs	r0, r3
 80046de:	f7ff f9b9 	bl	8003a54 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b002      	add	sp, #8
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b08b      	sub	sp, #44	; 0x2c
 80046f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80046f2:	2414      	movs	r4, #20
 80046f4:	193b      	adds	r3, r7, r4
 80046f6:	0018      	movs	r0, r3
 80046f8:	2314      	movs	r3, #20
 80046fa:	001a      	movs	r2, r3
 80046fc:	2100      	movs	r1, #0
 80046fe:	f018 fdd2 	bl	801d2a6 <memset>

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 8004702:	4b4a      	ldr	r3, [pc, #296]	; (800482c <DBG_Init+0x140>)
 8004704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004706:	4b49      	ldr	r3, [pc, #292]	; (800482c <DBG_Init+0x140>)
 8004708:	2102      	movs	r1, #2
 800470a:	430a      	orrs	r2, r1
 800470c:	62da      	str	r2, [r3, #44]	; 0x2c
 800470e:	4b47      	ldr	r3, [pc, #284]	; (800482c <DBG_Init+0x140>)
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	2202      	movs	r2, #2
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	693b      	ldr	r3, [r7, #16]
  DGB_LINE2_CLK_ENABLE();
 800471a:	4b44      	ldr	r3, [pc, #272]	; (800482c <DBG_Init+0x140>)
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	4b43      	ldr	r3, [pc, #268]	; (800482c <DBG_Init+0x140>)
 8004720:	2102      	movs	r1, #2
 8004722:	430a      	orrs	r2, r1
 8004724:	62da      	str	r2, [r3, #44]	; 0x2c
 8004726:	4b41      	ldr	r3, [pc, #260]	; (800482c <DBG_Init+0x140>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	2202      	movs	r2, #2
 800472c:	4013      	ands	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
  DGB_LINE3_CLK_ENABLE();
 8004732:	4b3e      	ldr	r3, [pc, #248]	; (800482c <DBG_Init+0x140>)
 8004734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004736:	4b3d      	ldr	r3, [pc, #244]	; (800482c <DBG_Init+0x140>)
 8004738:	2102      	movs	r1, #2
 800473a:	430a      	orrs	r2, r1
 800473c:	62da      	str	r2, [r3, #44]	; 0x2c
 800473e:	4b3b      	ldr	r3, [pc, #236]	; (800482c <DBG_Init+0x140>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	2202      	movs	r2, #2
 8004744:	4013      	ands	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
  DGB_LINE4_CLK_ENABLE();
 800474a:	4b38      	ldr	r3, [pc, #224]	; (800482c <DBG_Init+0x140>)
 800474c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474e:	4b37      	ldr	r3, [pc, #220]	; (800482c <DBG_Init+0x140>)
 8004750:	2102      	movs	r1, #2
 8004752:	430a      	orrs	r2, r1
 8004754:	62da      	str	r2, [r3, #44]	; 0x2c
 8004756:	4b35      	ldr	r3, [pc, #212]	; (800482c <DBG_Init+0x140>)
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	2202      	movs	r2, #2
 800475c:	4013      	ands	r3, r2
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	687b      	ldr	r3, [r7, #4]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8004762:	0021      	movs	r1, r4
 8004764:	187b      	adds	r3, r7, r1
 8004766:	2201      	movs	r2, #1
 8004768:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 800476a:	187b      	adds	r3, r7, r1
 800476c:	2201      	movs	r2, #1
 800476e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 8004770:	187b      	adds	r3, r7, r1
 8004772:	2203      	movs	r2, #3
 8004774:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 8004776:	187b      	adds	r3, r7, r1
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	0152      	lsls	r2, r2, #5
 800477c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 800477e:	000c      	movs	r4, r1
 8004780:	187b      	adds	r3, r7, r1
 8004782:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <DBG_Init+0x144>)
 8004784:	0019      	movs	r1, r3
 8004786:	0010      	movs	r0, r2
 8004788:	f002 fb22 	bl	8006dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 800478c:	0021      	movs	r1, r4
 800478e:	187b      	adds	r3, r7, r1
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	0192      	lsls	r2, r2, #6
 8004794:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 8004796:	000c      	movs	r4, r1
 8004798:	187b      	adds	r3, r7, r1
 800479a:	4a25      	ldr	r2, [pc, #148]	; (8004830 <DBG_Init+0x144>)
 800479c:	0019      	movs	r1, r3
 800479e:	0010      	movs	r0, r2
 80047a0:	f002 fb16 	bl	8006dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 80047a4:	0021      	movs	r1, r4
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	2280      	movs	r2, #128	; 0x80
 80047aa:	01d2      	lsls	r2, r2, #7
 80047ac:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 80047ae:	000c      	movs	r4, r1
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <DBG_Init+0x144>)
 80047b4:	0019      	movs	r1, r3
 80047b6:	0010      	movs	r0, r2
 80047b8:	f002 fb0a 	bl	8006dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 80047bc:	0021      	movs	r1, r4
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	2280      	movs	r2, #128	; 0x80
 80047c2:	0212      	lsls	r2, r2, #8
 80047c4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 80047c6:	187b      	adds	r3, r7, r1
 80047c8:	4a19      	ldr	r2, [pc, #100]	; (8004830 <DBG_Init+0x144>)
 80047ca:	0019      	movs	r1, r3
 80047cc:	0010      	movs	r0, r2
 80047ce:	f002 faff 	bl	8006dd0 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	015b      	lsls	r3, r3, #5
 80047d6:	4816      	ldr	r0, [pc, #88]	; (8004830 <DBG_Init+0x144>)
 80047d8:	2200      	movs	r2, #0
 80047da:	0019      	movs	r1, r3
 80047dc:	f002 fd75 	bl	80072ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	019b      	lsls	r3, r3, #6
 80047e4:	4812      	ldr	r0, [pc, #72]	; (8004830 <DBG_Init+0x144>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	0019      	movs	r1, r3
 80047ea:	f002 fd6e 	bl	80072ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	01db      	lsls	r3, r3, #7
 80047f2:	480f      	ldr	r0, [pc, #60]	; (8004830 <DBG_Init+0x144>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	0019      	movs	r1, r3
 80047f8:	f002 fd67 	bl	80072ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 80047fc:	2380      	movs	r3, #128	; 0x80
 80047fe:	021b      	lsls	r3, r3, #8
 8004800:	480b      	ldr	r0, [pc, #44]	; (8004830 <DBG_Init+0x144>)
 8004802:	2200      	movs	r2, #0
 8004804:	0019      	movs	r1, r3
 8004806:	f002 fd60 	bl	80072ca <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <DBG_Init+0x140>)
 800480c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800480e:	4b07      	ldr	r3, [pc, #28]	; (800482c <DBG_Init+0x140>)
 8004810:	2180      	movs	r1, #128	; 0x80
 8004812:	03c9      	lsls	r1, r1, #15
 8004814:	430a      	orrs	r2, r1
 8004816:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8004818:	f001 f952 	bl	8005ac0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800481c:	f001 f95e 	bl	8005adc <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8004820:	f001 f96a 	bl	8005af8 <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	b00b      	add	sp, #44	; 0x2c
 800482a:	bd90      	pop	{r4, r7, pc}
 800482c:	40021000 	.word	0x40021000
 8004830:	50000400 	.word	0x50000400

08004834 <EnvSensors_Init>:

  /* USER CODE END EnvSensors_Read_Last */
}

void  EnvSensors_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <MX_USART2_Init>:
DMA_HandleTypeDef hdma_tx;

/* USART2 init function */

void MX_USART2_Init(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0

  husart2.Instance        = USART2;
 8004844:	4b10      	ldr	r3, [pc, #64]	; (8004888 <MX_USART2_Init+0x48>)
 8004846:	4a11      	ldr	r2, [pc, #68]	; (800488c <MX_USART2_Init+0x4c>)
 8004848:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 800484a:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <MX_USART2_Init+0x48>)
 800484c:	22e1      	movs	r2, #225	; 0xe1
 800484e:	0252      	lsls	r2, r2, #9
 8004850:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <MX_USART2_Init+0x48>)
 8004854:	2200      	movs	r2, #0
 8004856:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <MX_USART2_Init+0x48>)
 800485a:	2200      	movs	r2, #0
 800485c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <MX_USART2_Init+0x48>)
 8004860:	2200      	movs	r2, #0
 8004862:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode       = UART_MODE_TX;
 8004864:	4b08      	ldr	r3, [pc, #32]	; (8004888 <MX_USART2_Init+0x48>)
 8004866:	2208      	movs	r2, #8
 8004868:	615a      	str	r2, [r3, #20]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <MX_USART2_Init+0x48>)
 800486c:	2200      	movs	r2, #0
 800486e:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <MX_USART2_Init+0x48>)
 8004872:	0018      	movs	r0, r3
 8004874:	f005 fc98 	bl	800a1a8 <HAL_UART_Init>
 8004878:	1e03      	subs	r3, r0, #0
 800487a:	d001      	beq.n	8004880 <MX_USART2_Init+0x40>
  {
    Error_Handler();
 800487c:	f7fe fed6 	bl	800362c <Error_Handler>
  }
}
 8004880:	46c0      	nop			; (mov r8, r8)
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	20000614 	.word	0x20000614
 800488c:	40004400 	.word	0x40004400

08004890 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b095      	sub	sp, #84	; 0x54
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004898:	233c      	movs	r3, #60	; 0x3c
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	0018      	movs	r0, r3
 800489e:	2314      	movs	r3, #20
 80048a0:	001a      	movs	r2, r3
 80048a2:	2100      	movs	r1, #0
 80048a4:	f018 fcff 	bl	801d2a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048a8:	2418      	movs	r4, #24
 80048aa:	193b      	adds	r3, r7, r4
 80048ac:	0018      	movs	r0, r3
 80048ae:	2324      	movs	r3, #36	; 0x24
 80048b0:	001a      	movs	r2, r3
 80048b2:	2100      	movs	r1, #0
 80048b4:	f018 fcf7 	bl	801d2a6 <memset>
  if (uartHandle->Instance == USART2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a57      	ldr	r2, [pc, #348]	; (8004a1c <HAL_UART_MspInit+0x18c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d000      	beq.n	80048c4 <HAL_UART_MspInit+0x34>
 80048c2:	e0a6      	b.n	8004a12 <HAL_UART_MspInit+0x182>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 80048c4:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <HAL_UART_MspInit+0x190>)
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	4b55      	ldr	r3, [pc, #340]	; (8004a20 <HAL_UART_MspInit+0x190>)
 80048ca:	2101      	movs	r1, #1
 80048cc:	430a      	orrs	r2, r1
 80048ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80048d0:	4b53      	ldr	r3, [pc, #332]	; (8004a20 <HAL_UART_MspInit+0x190>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	2201      	movs	r2, #1
 80048d6:	4013      	ands	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 80048dc:	4b50      	ldr	r3, [pc, #320]	; (8004a20 <HAL_UART_MspInit+0x190>)
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	4b4f      	ldr	r3, [pc, #316]	; (8004a20 <HAL_UART_MspInit+0x190>)
 80048e2:	2101      	movs	r1, #1
 80048e4:	430a      	orrs	r2, r1
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80048e8:	4b4d      	ldr	r3, [pc, #308]	; (8004a20 <HAL_UART_MspInit+0x190>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	2201      	movs	r2, #1
 80048ee:	4013      	ands	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 80048f4:	4b4a      	ldr	r3, [pc, #296]	; (8004a20 <HAL_UART_MspInit+0x190>)
 80048f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f8:	4b49      	ldr	r3, [pc, #292]	; (8004a20 <HAL_UART_MspInit+0x190>)
 80048fa:	2180      	movs	r1, #128	; 0x80
 80048fc:	0289      	lsls	r1, r1, #10
 80048fe:	430a      	orrs	r2, r1
 8004900:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8004902:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <HAL_UART_MspInit+0x190>)
 8004904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004906:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_UART_MspInit+0x190>)
 8004908:	2101      	movs	r1, #1
 800490a:	430a      	orrs	r2, r1
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
 800490e:	4b44      	ldr	r3, [pc, #272]	; (8004a20 <HAL_UART_MspInit+0x190>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	2201      	movs	r2, #1
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800491a:	4b41      	ldr	r3, [pc, #260]	; (8004a20 <HAL_UART_MspInit+0x190>)
 800491c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491e:	4b40      	ldr	r3, [pc, #256]	; (8004a20 <HAL_UART_MspInit+0x190>)
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	0289      	lsls	r1, r1, #10
 8004924:	430a      	orrs	r2, r1
 8004926:	639a      	str	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004928:	193b      	adds	r3, r7, r4
 800492a:	2202      	movs	r2, #2
 800492c:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800492e:	193b      	adds	r3, r7, r4
 8004930:	2204      	movs	r2, #4
 8004932:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004934:	193b      	adds	r3, r7, r4
 8004936:	0018      	movs	r0, r3
 8004938:	f004 f9b8 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 800493c:	1e03      	subs	r3, r0, #0
 800493e:	d001      	beq.n	8004944 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8004940:	f7fe fe74 	bl	800362c <Error_Handler>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8004944:	243c      	movs	r4, #60	; 0x3c
 8004946:	193b      	adds	r3, r7, r4
 8004948:	2204      	movs	r2, #4
 800494a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494c:	193b      	adds	r3, r7, r4
 800494e:	2202      	movs	r2, #2
 8004950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004952:	193b      	adds	r3, r7, r4
 8004954:	2200      	movs	r2, #0
 8004956:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004958:	193b      	adds	r3, r7, r4
 800495a:	2203      	movs	r2, #3
 800495c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800495e:	193b      	adds	r3, r7, r4
 8004960:	2204      	movs	r2, #4
 8004962:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8004964:	193a      	adds	r2, r7, r4
 8004966:	23a0      	movs	r3, #160	; 0xa0
 8004968:	05db      	lsls	r3, r3, #23
 800496a:	0011      	movs	r1, r2
 800496c:	0018      	movs	r0, r3
 800496e:	f002 fa2f 	bl	8006dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8004972:	0021      	movs	r1, r4
 8004974:	187b      	adds	r3, r7, r1
 8004976:	2208      	movs	r2, #8
 8004978:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497a:	187b      	adds	r3, r7, r1
 800497c:	2202      	movs	r2, #2
 800497e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004980:	187b      	adds	r3, r7, r1
 8004982:	2200      	movs	r2, #0
 8004984:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004986:	187b      	adds	r3, r7, r1
 8004988:	2203      	movs	r2, #3
 800498a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800498c:	187b      	adds	r3, r7, r1
 800498e:	2204      	movs	r2, #4
 8004990:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8004992:	187a      	adds	r2, r7, r1
 8004994:	23a0      	movs	r3, #160	; 0xa0
 8004996:	05db      	lsls	r3, r3, #23
 8004998:	0011      	movs	r1, r2
 800499a:	0018      	movs	r0, r3
 800499c:	f002 fa18 	bl	8006dd0 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80049a0:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049a2:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <HAL_UART_MspInit+0x198>)
 80049a4:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 80049a6:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049a8:	2204      	movs	r2, #4
 80049aa:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80049ac:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049ae:	2210      	movs	r2, #16
 80049b0:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049ba:	2280      	movs	r2, #128	; 0x80
 80049bc:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049be:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80049c4:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 80049ca:	4b16      	ldr	r3, [pc, #88]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80049d0:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049d8:	0018      	movs	r0, r3
 80049da:	f001 ff03 	bl	80067e4 <HAL_DMA_Init>
 80049de:	1e03      	subs	r3, r0, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 80049e2:	f7fe fe23 	bl	800362c <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a0e      	ldr	r2, [pc, #56]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049ea:	66da      	str	r2, [r3, #108]	; 0x6c
 80049ec:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <HAL_UART_MspInit+0x194>)
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80049f2:	2201      	movs	r2, #1
 80049f4:	2100      	movs	r1, #0
 80049f6:	200b      	movs	r0, #11
 80049f8:	f001 febe 	bl	8006778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80049fc:	200b      	movs	r0, #11
 80049fe:	f001 fed0 	bl	80067a2 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8004a02:	2201      	movs	r2, #1
 8004a04:	2100      	movs	r1, #0
 8004a06:	201c      	movs	r0, #28
 8004a08:	f001 feb6 	bl	8006778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8004a0c:	201c      	movs	r0, #28
 8004a0e:	f001 fec8 	bl	80067a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b015      	add	sp, #84	; 0x54
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	40004400 	.word	0x40004400
 8004a20:	40021000 	.word	0x40021000
 8004a24:	20000698 	.word	0x20000698
 8004a28:	40020080 	.word	0x40020080

08004a2c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == USART2)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a0d      	ldr	r2, [pc, #52]	; (8004a70 <HAL_UART_MspDeInit+0x44>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d113      	bne.n	8004a66 <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <HAL_UART_MspDeInit+0x48>)
 8004a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a42:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <HAL_UART_MspDeInit+0x48>)
 8004a44:	490c      	ldr	r1, [pc, #48]	; (8004a78 <HAL_UART_MspDeInit+0x4c>)
 8004a46:	400a      	ands	r2, r1
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8004a4a:	23a0      	movs	r3, #160	; 0xa0
 8004a4c:	05db      	lsls	r3, r3, #23
 8004a4e:	210c      	movs	r1, #12
 8004a50:	0018      	movs	r0, r3
 8004a52:	f002 fb3b 	bl	80070cc <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f001 ff3a 	bl	80068d4 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004a60:	201c      	movs	r0, #28
 8004a62:	f001 feae 	bl	80067c2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b002      	add	sp, #8
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	40004400 	.word	0x40004400
 8004a74:	40021000 	.word	0x40021000
 8004a78:	fffdffff 	.word	0xfffdffff

08004a7c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <vcom_Init+0x20>)
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 8004a8a:	f7fe fced 	bl	8003468 <MX_DMA_Init>
  MX_USART2_Init();
 8004a8e:	f7ff fed7 	bl	8004840 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
 8004a92:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	200006e4 	.word	0x200006e4

08004aa0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <vcom_DeInit+0x34>)
 8004aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <vcom_DeInit+0x34>)
 8004aaa:	2180      	movs	r1, #128	; 0x80
 8004aac:	0289      	lsls	r1, r1, #10
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <vcom_DeInit+0x34>)
 8004ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab6:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <vcom_DeInit+0x34>)
 8004ab8:	4907      	ldr	r1, [pc, #28]	; (8004ad8 <vcom_DeInit+0x38>)
 8004aba:	400a      	ands	r2, r1
 8004abc:	629a      	str	r2, [r3, #40]	; 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8004abe:	4b07      	ldr	r3, [pc, #28]	; (8004adc <vcom_DeInit+0x3c>)
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7ff ffb3 	bl	8004a2c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004ac6:	200b      	movs	r0, #11
 8004ac8:	f001 fe7b 	bl	80067c2 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8004acc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8004ace:	0018      	movs	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	fffdffff 	.word	0xfffdffff
 8004adc:	20000614 	.word	0x20000614

08004ae0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	000a      	movs	r2, r1
 8004aea:	1cbb      	adds	r3, r7, #2
 8004aec:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8004aee:	1cbb      	adds	r3, r7, #2
 8004af0:	881a      	ldrh	r2, [r3, #0]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <vcom_Trace_DMA+0x28>)
 8004af6:	0018      	movs	r0, r3
 8004af8:	f005 fc02 	bl	800a300 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8004afc:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8004afe:	0018      	movs	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b002      	add	sp, #8
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	20000614 	.word	0x20000614

08004b0c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8004b14:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <vcom_ReceiveInit+0x80>)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8004b1a:	2108      	movs	r1, #8
 8004b1c:	187b      	adds	r3, r7, r1
 8004b1e:	2280      	movs	r2, #128	; 0x80
 8004b20:	0392      	lsls	r2, r2, #14
 8004b22:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8004b24:	187b      	adds	r3, r7, r1
 8004b26:	481a      	ldr	r0, [pc, #104]	; (8004b90 <vcom_ReceiveInit+0x84>)
 8004b28:	6819      	ldr	r1, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	f006 fd22 	bl	800b574 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <vcom_ReceiveInit+0x84>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	025b      	lsls	r3, r3, #9
 8004b3c:	401a      	ands	r2, r3
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	025b      	lsls	r3, r3, #9
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d0f5      	beq.n	8004b32 <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <vcom_ReceiveInit+0x84>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	03db      	lsls	r3, r3, #15
 8004b52:	401a      	ands	r2, r3
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	03db      	lsls	r3, r3, #15
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1f5      	bne.n	8004b48 <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <vcom_ReceiveInit+0x84>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <vcom_ReceiveInit+0x84>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2180      	movs	r1, #128	; 0x80
 8004b68:	03c9      	lsls	r1, r1, #15
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <vcom_ReceiveInit+0x84>)
 8004b70:	0018      	movs	r0, r3
 8004b72:	f006 fd65 	bl	800b640 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8004b76:	4907      	ldr	r1, [pc, #28]	; (8004b94 <vcom_ReceiveInit+0x88>)
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <vcom_ReceiveInit+0x84>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f005 fb67 	bl	800a250 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8004b82:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	200006e8 	.word	0x200006e8
 8004b90:	20000614 	.word	0x20000614
 8004b94:	200006e0 	.word	0x200006e0

08004b98 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8004ba0:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <HAL_UART_TxCpltCallback+0x18>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	200006e4 	.word	0x200006e4

08004bb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <HAL_UART_RxCpltCallback+0x3c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_UART_RxCpltCallback+0x26>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2280      	movs	r2, #128	; 0x80
 8004bc8:	589b      	ldr	r3, [r3, r2]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d105      	bne.n	8004bda <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <HAL_UART_RxCpltCallback+0x3c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4808      	ldr	r0, [pc, #32]	; (8004bf4 <HAL_UART_RxCpltCallback+0x40>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8004bda:	4906      	ldr	r1, [pc, #24]	; (8004bf4 <HAL_UART_RxCpltCallback+0x40>)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	0018      	movs	r0, r3
 8004be2:	f005 fb35 	bl	800a250 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	46bd      	mov	sp, r7
 8004bea:	b002      	add	sp, #8
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	200006e8 	.word	0x200006e8
 8004bf4:	200006e0 	.word	0x200006e0

08004bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004bf8:	480d      	ldr	r0, [pc, #52]	; (8004c30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004bfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bfc:	480d      	ldr	r0, [pc, #52]	; (8004c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8004bfe:	490e      	ldr	r1, [pc, #56]	; (8004c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c00:	4a0e      	ldr	r2, [pc, #56]	; (8004c3c <LoopForever+0xe>)
  movs r3, #0
 8004c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c04:	e002      	b.n	8004c0c <LoopCopyDataInit>

08004c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c0a:	3304      	adds	r3, #4

08004c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c10:	d3f9      	bcc.n	8004c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c12:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c14:	4c0b      	ldr	r4, [pc, #44]	; (8004c44 <LoopForever+0x16>)
  movs r3, #0
 8004c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c18:	e001      	b.n	8004c1e <LoopFillZerobss>

08004c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c1c:	3204      	adds	r2, #4

08004c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c20:	d3fb      	bcc.n	8004c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004c22:	f000 febf 	bl	80059a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c26:	f018 fb11 	bl	801d24c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c2a:	f7fe fc3b 	bl	80034a4 <main>

08004c2e <LoopForever>:

LoopForever:
    b LoopForever
 8004c2e:	e7fe      	b.n	8004c2e <LoopForever>
   ldr   r0, =_estack
 8004c30:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c38:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004c3c:	0801e918 	.word	0x0801e918
  ldr r2, =_sbss
 8004c40:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004c44:	200019ac 	.word	0x200019ac

08004c48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c48:	e7fe      	b.n	8004c48 <ADC1_COMP_IRQHandler>
	...

08004c4c <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <BSP_SPI1_Init+0x40>)
 8004c58:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <BSP_SPI1_Init+0x44>)
 8004c5a:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <BSP_SPI1_Init+0x40>)
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f005 f9c1 	bl	8009fe6 <HAL_SPI_GetState>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d10c      	bne.n	8004c82 <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 8004c68:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <BSP_SPI1_Init+0x40>)
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 f87e 	bl	8004d6c <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <BSP_SPI1_Init+0x40>)
 8004c72:	0018      	movs	r0, r3
 8004c74:	f000 f830 	bl	8004cd8 <MX_SPI1_Init>
 8004c78:	1e03      	subs	r3, r0, #0
 8004c7a:	d002      	beq.n	8004c82 <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	425b      	negs	r3, r3
 8004c80:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8004c82:	687b      	ldr	r3, [r7, #4]
}
 8004c84:	0018      	movs	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	200006ec 	.word	0x200006ec
 8004c90:	40013000 	.word	0x40013000

08004c94 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b089      	sub	sp, #36	; 0x24
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	1dbb      	adds	r3, r7, #6
 8004ca0:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	425b      	negs	r3, r3
 8004ca6:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8004ca8:	1dbb      	adds	r3, r7, #6
 8004caa:	881c      	ldrh	r4, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	4808      	ldr	r0, [pc, #32]	; (8004cd4 <BSP_SPI1_SendRecv+0x40>)
 8004cb2:	23fa      	movs	r3, #250	; 0xfa
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	0023      	movs	r3, r4
 8004cba:	f004 ffd9 	bl	8009c70 <HAL_SPI_TransmitReceive>
 8004cbe:	1e03      	subs	r3, r0, #0
 8004cc0:	d102      	bne.n	8004cc8 <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 8004cc2:	1dbb      	adds	r3, r7, #6
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004cc8:	697b      	ldr	r3, [r7, #20]
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b007      	add	sp, #28
 8004cd0:	bd90      	pop	{r4, r7, pc}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	200006ec 	.word	0x200006ec

08004cd8 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 8004cd8:	b590      	push	{r4, r7, lr}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce0:	240f      	movs	r4, #15
 8004ce2:	193b      	adds	r3, r7, r4
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <MX_SPI1_Init+0x8c>)
 8004cec:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2282      	movs	r2, #130	; 0x82
 8004cf2:	0052      	lsls	r2, r2, #1
 8004cf4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2280      	movs	r2, #128	; 0x80
 8004d12:	0092      	lsls	r2, r2, #2
 8004d14:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8004d16:	f003 ffb3 	bl	8008c80 <HAL_RCC_GetPCLK2Freq>
 8004d1a:	0003      	movs	r3, r0
 8004d1c:	4a12      	ldr	r2, [pc, #72]	; (8004d68 <MX_SPI1_Init+0x90>)
 8004d1e:	0011      	movs	r1, r2
 8004d20:	0018      	movs	r0, r3
 8004d22:	f000 f867 	bl	8004df4 <SPI_GetPrescaler>
 8004d26:	0002      	movs	r2, r0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2207      	movs	r2, #7
 8004d42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	0018      	movs	r0, r3
 8004d48:	f004 fef6 	bl	8009b38 <HAL_SPI_Init>
 8004d4c:	1e03      	subs	r3, r0, #0
 8004d4e:	d002      	beq.n	8004d56 <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 8004d50:	193b      	adds	r3, r7, r4
 8004d52:	2201      	movs	r2, #1
 8004d54:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004d56:	230f      	movs	r3, #15
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	781b      	ldrb	r3, [r3, #0]
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b005      	add	sp, #20
 8004d62:	bd90      	pop	{r4, r7, pc}
 8004d64:	40013000 	.word	0x40013000
 8004d68:	00989680 	.word	0x00989680

08004d6c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b089      	sub	sp, #36	; 0x24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <SPI1_MspInit+0x80>)
 8004d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d78:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <SPI1_MspInit+0x80>)
 8004d7a:	2180      	movs	r1, #128	; 0x80
 8004d7c:	0149      	lsls	r1, r1, #5
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	635a      	str	r2, [r3, #52]	; 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d82:	240c      	movs	r4, #12
 8004d84:	193b      	adds	r3, r7, r4
 8004d86:	2202      	movs	r2, #2
 8004d88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8a:	193b      	adds	r3, r7, r4
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d90:	193b      	adds	r3, r7, r4
 8004d92:	2203      	movs	r2, #3
 8004d94:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8004d96:	193b      	adds	r3, r7, r4
 8004d98:	2200      	movs	r2, #0
 8004d9a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8004d9c:	193b      	adds	r3, r7, r4
 8004d9e:	2280      	movs	r2, #128	; 0x80
 8004da0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004da2:	193a      	adds	r2, r7, r4
 8004da4:	23a0      	movs	r3, #160	; 0xa0
 8004da6:	05db      	lsls	r3, r3, #23
 8004da8:	0011      	movs	r1, r2
 8004daa:	0018      	movs	r0, r3
 8004dac:	f002 f810 	bl	8006dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8004db0:	193b      	adds	r3, r7, r4
 8004db2:	2200      	movs	r2, #0
 8004db4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8004db6:	193b      	adds	r3, r7, r4
 8004db8:	2240      	movs	r2, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004dbc:	193a      	adds	r2, r7, r4
 8004dbe:	23a0      	movs	r3, #160	; 0xa0
 8004dc0:	05db      	lsls	r3, r3, #23
 8004dc2:	0011      	movs	r1, r2
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f002 f803 	bl	8006dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8004dca:	193b      	adds	r3, r7, r4
 8004dcc:	2200      	movs	r2, #0
 8004dce:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8004dd0:	193b      	adds	r3, r7, r4
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004dd6:	193b      	adds	r3, r7, r4
 8004dd8:	4a05      	ldr	r2, [pc, #20]	; (8004df0 <SPI1_MspInit+0x84>)
 8004dda:	0019      	movs	r1, r3
 8004ddc:	0010      	movs	r0, r2
 8004dde:	f001 fff7 	bl	8006dd0 <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b009      	add	sp, #36	; 0x24
 8004de8:	bd90      	pop	{r4, r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	40021000 	.word	0x40021000
 8004df0:	50000400 	.word	0x50000400

08004df4 <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8004e0a:	e00d      	b.n	8004e28 <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <SPI_GetPrescaler+0x4c>)
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	0092      	lsls	r2, r2, #2
 8004e12:	58d3      	ldr	r3, [r2, r3]
 8004e14:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b07      	cmp	r3, #7
 8004e20:	d807      	bhi.n	8004e32 <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d8ed      	bhi.n	8004e0c <SPI_GetPrescaler+0x18>
 8004e30:	e000      	b.n	8004e34 <SPI_GetPrescaler+0x40>
      break;
 8004e32:	46c0      	nop			; (mov r8, r8)
  }

  return presc;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	0018      	movs	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b006      	add	sp, #24
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	0801d9d0 	.word	0x0801d9d0

08004e44 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8004e4e:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <BSP_I2C1_Init+0x70>)
 8004e50:	4a19      	ldr	r2, [pc, #100]	; (8004eb8 <BSP_I2C1_Init+0x74>)
 8004e52:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter++ == 0)
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <BSP_I2C1_Init+0x78>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	1c59      	adds	r1, r3, #1
 8004e5a:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <BSP_I2C1_Init+0x78>)
 8004e5c:	6011      	str	r1, [r2, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d123      	bne.n	8004eaa <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8004e62:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <BSP_I2C1_Init+0x70>)
 8004e64:	0018      	movs	r0, r3
 8004e66:	f002 fd69 	bl	800793c <HAL_I2C_GetState>
 8004e6a:	1e03      	subs	r3, r0, #0
 8004e6c:	d11d      	bne.n	8004eaa <BSP_I2C1_Init+0x66>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8004e6e:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <BSP_I2C1_Init+0x70>)
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 f873 	bl	8004f5c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d116      	bne.n	8004eaa <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if (MX_I2C1_Init(&hi2c1) != HAL_OK)
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <BSP_I2C1_Init+0x70>)
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f000 f81e 	bl	8004ec0 <MX_I2C1_Init>
 8004e84:	1e03      	subs	r3, r0, #0
 8004e86:	d003      	beq.n	8004e90 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004e88:	2308      	movs	r3, #8
 8004e8a:	425b      	negs	r3, r3
 8004e8c:	607b      	str	r3, [r7, #4]
 8004e8e:	e00c      	b.n	8004eaa <BSP_I2C1_Init+0x66>
        }
        else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <BSP_I2C1_Init+0x70>)
 8004e92:	2100      	movs	r1, #0
 8004e94:	0018      	movs	r0, r3
 8004e96:	f002 ff9b 	bl	8007dd0 <HAL_I2CEx_ConfigAnalogFilter>
 8004e9a:	1e03      	subs	r3, r0, #0
 8004e9c:	d003      	beq.n	8004ea6 <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	425b      	negs	r3, r3
 8004ea2:	607b      	str	r3, [r7, #4]
 8004ea4:	e001      	b.n	8004eaa <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8004eaa:	687b      	ldr	r3, [r7, #4]
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000744 	.word	0x20000744
 8004eb8:	40005400 	.word	0x40005400
 8004ebc:	20000790 	.word	0x20000790

08004ec0 <MX_I2C1_Init>:
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ec8:	240f      	movs	r4, #15
 8004eca:	193b      	adds	r3, r7, r4
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
  hi2c->Instance = I2C1;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a20      	ldr	r2, [pc, #128]	; (8004f54 <MX_I2C1_Init+0x94>)
 8004ed4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a1f      	ldr	r2, [pc, #124]	; (8004f58 <MX_I2C1_Init+0x98>)
 8004eda:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f002 fa17 	bl	800733c <HAL_I2C_Init>
 8004f0e:	1e03      	subs	r3, r0, #0
 8004f10:	d002      	beq.n	8004f18 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 8004f12:	193b      	adds	r3, r7, r4
 8004f14:	2201      	movs	r2, #1
 8004f16:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f002 ff57 	bl	8007dd0 <HAL_I2CEx_ConfigAnalogFilter>
 8004f22:	1e03      	subs	r3, r0, #0
 8004f24:	d003      	beq.n	8004f2e <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 8004f26:	230f      	movs	r3, #15
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2100      	movs	r1, #0
 8004f32:	0018      	movs	r0, r3
 8004f34:	f002 ff98 	bl	8007e68 <HAL_I2CEx_ConfigDigitalFilter>
 8004f38:	1e03      	subs	r3, r0, #0
 8004f3a:	d003      	beq.n	8004f44 <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004f44:	230f      	movs	r3, #15
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	781b      	ldrb	r3, [r3, #0]
}
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b005      	add	sp, #20
 8004f50:	bd90      	pop	{r4, r7, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	40005400 	.word	0x40005400
 8004f58:	00707cbb 	.word	0x00707cbb

08004f5c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b089      	sub	sp, #36	; 0x24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f64:	4b22      	ldr	r3, [pc, #136]	; (8004ff0 <I2C1_MspInit+0x94>)
 8004f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f68:	4b21      	ldr	r3, [pc, #132]	; (8004ff0 <I2C1_MspInit+0x94>)
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f70:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <I2C1_MspInit+0x94>)
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	2202      	movs	r2, #2
 8004f76:	4013      	ands	r3, r2
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
    */
  GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8004f7c:	210c      	movs	r1, #12
 8004f7e:	187b      	adds	r3, r7, r1
 8004f80:	2280      	movs	r2, #128	; 0x80
 8004f82:	0052      	lsls	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f86:	000c      	movs	r4, r1
 8004f88:	193b      	adds	r3, r7, r4
 8004f8a:	2212      	movs	r2, #18
 8004f8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	2201      	movs	r2, #1
 8004f92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f94:	193b      	adds	r3, r7, r4
 8004f96:	2203      	movs	r2, #3
 8004f98:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004fa0:	193b      	adds	r3, r7, r4
 8004fa2:	4a14      	ldr	r2, [pc, #80]	; (8004ff4 <I2C1_MspInit+0x98>)
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	0010      	movs	r0, r2
 8004fa8:	f001 ff12 	bl	8006dd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8004fac:	0021      	movs	r1, r4
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	2280      	movs	r2, #128	; 0x80
 8004fb2:	0092      	lsls	r2, r2, #2
 8004fb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fb6:	187b      	adds	r3, r7, r1
 8004fb8:	2212      	movs	r2, #18
 8004fba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fbc:	187b      	adds	r3, r7, r1
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc2:	187b      	adds	r3, r7, r1
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	2204      	movs	r2, #4
 8004fcc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004fce:	187b      	adds	r3, r7, r1
 8004fd0:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <I2C1_MspInit+0x98>)
 8004fd2:	0019      	movs	r1, r3
 8004fd4:	0010      	movs	r0, r2
 8004fd6:	f001 fefb 	bl	8006dd0 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <I2C1_MspInit+0x94>)
 8004fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fde:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <I2C1_MspInit+0x94>)
 8004fe0:	2180      	movs	r1, #128	; 0x80
 8004fe2:	0389      	lsls	r1, r1, #14
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b009      	add	sp, #36	; 0x24
 8004fee:	bd90      	pop	{r4, r7, pc}
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	50000400 	.word	0x50000400

08004ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	0002      	movs	r2, r0
 8005000:	6039      	str	r1, [r7, #0]
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005006:	1dfb      	adds	r3, r7, #7
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b7f      	cmp	r3, #127	; 0x7f
 800500c:	d828      	bhi.n	8005060 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800500e:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <__NVIC_SetPriority+0xd4>)
 8005010:	1dfb      	adds	r3, r7, #7
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b25b      	sxtb	r3, r3
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	33c0      	adds	r3, #192	; 0xc0
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	589b      	ldr	r3, [r3, r2]
 800501e:	1dfa      	adds	r2, r7, #7
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	0011      	movs	r1, r2
 8005024:	2203      	movs	r2, #3
 8005026:	400a      	ands	r2, r1
 8005028:	00d2      	lsls	r2, r2, #3
 800502a:	21ff      	movs	r1, #255	; 0xff
 800502c:	4091      	lsls	r1, r2
 800502e:	000a      	movs	r2, r1
 8005030:	43d2      	mvns	r2, r2
 8005032:	401a      	ands	r2, r3
 8005034:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	019b      	lsls	r3, r3, #6
 800503a:	22ff      	movs	r2, #255	; 0xff
 800503c:	401a      	ands	r2, r3
 800503e:	1dfb      	adds	r3, r7, #7
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	0018      	movs	r0, r3
 8005044:	2303      	movs	r3, #3
 8005046:	4003      	ands	r3, r0
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800504c:	481f      	ldr	r0, [pc, #124]	; (80050cc <__NVIC_SetPriority+0xd4>)
 800504e:	1dfb      	adds	r3, r7, #7
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b25b      	sxtb	r3, r3
 8005054:	089b      	lsrs	r3, r3, #2
 8005056:	430a      	orrs	r2, r1
 8005058:	33c0      	adds	r3, #192	; 0xc0
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800505e:	e031      	b.n	80050c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <__NVIC_SetPriority+0xd8>)
 8005062:	1dfb      	adds	r3, r7, #7
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	0019      	movs	r1, r3
 8005068:	230f      	movs	r3, #15
 800506a:	400b      	ands	r3, r1
 800506c:	3b08      	subs	r3, #8
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	3306      	adds	r3, #6
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	18d3      	adds	r3, r2, r3
 8005076:	3304      	adds	r3, #4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1dfa      	adds	r2, r7, #7
 800507c:	7812      	ldrb	r2, [r2, #0]
 800507e:	0011      	movs	r1, r2
 8005080:	2203      	movs	r2, #3
 8005082:	400a      	ands	r2, r1
 8005084:	00d2      	lsls	r2, r2, #3
 8005086:	21ff      	movs	r1, #255	; 0xff
 8005088:	4091      	lsls	r1, r2
 800508a:	000a      	movs	r2, r1
 800508c:	43d2      	mvns	r2, r2
 800508e:	401a      	ands	r2, r3
 8005090:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	22ff      	movs	r2, #255	; 0xff
 8005098:	401a      	ands	r2, r3
 800509a:	1dfb      	adds	r3, r7, #7
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	0018      	movs	r0, r3
 80050a0:	2303      	movs	r3, #3
 80050a2:	4003      	ands	r3, r0
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050a8:	4809      	ldr	r0, [pc, #36]	; (80050d0 <__NVIC_SetPriority+0xd8>)
 80050aa:	1dfb      	adds	r3, r7, #7
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	001c      	movs	r4, r3
 80050b0:	230f      	movs	r3, #15
 80050b2:	4023      	ands	r3, r4
 80050b4:	3b08      	subs	r3, #8
 80050b6:	089b      	lsrs	r3, r3, #2
 80050b8:	430a      	orrs	r2, r1
 80050ba:	3306      	adds	r3, #6
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	18c3      	adds	r3, r0, r3
 80050c0:	3304      	adds	r3, #4
 80050c2:	601a      	str	r2, [r3, #0]
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b003      	add	sp, #12
 80050ca:	bd90      	pop	{r4, r7, pc}
 80050cc:	e000e100 	.word	0xe000e100
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08c      	sub	sp, #48	; 0x30
 80050d8:	af00      	add	r7, sp, #0
 80050da:	0002      	movs	r2, r0
 80050dc:	1dfb      	adds	r3, r7, #7
 80050de:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80050e0:	1dfb      	adds	r3, r7, #7
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d02f      	beq.n	8005148 <BSP_LED_Init+0x74>
 80050e8:	dc3a      	bgt.n	8005160 <BSP_LED_Init+0x8c>
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d01f      	beq.n	800512e <BSP_LED_Init+0x5a>
 80050ee:	dc37      	bgt.n	8005160 <BSP_LED_Init+0x8c>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <BSP_LED_Init+0x26>
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d00d      	beq.n	8005114 <BSP_LED_Init+0x40>
 80050f8:	e032      	b.n	8005160 <BSP_LED_Init+0x8c>
 80050fa:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <BSP_LED_Init+0xd0>)
 80050fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fe:	4b29      	ldr	r3, [pc, #164]	; (80051a4 <BSP_LED_Init+0xd0>)
 8005100:	2102      	movs	r1, #2
 8005102:	430a      	orrs	r2, r1
 8005104:	62da      	str	r2, [r3, #44]	; 0x2c
 8005106:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <BSP_LED_Init+0xd0>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	2202      	movs	r2, #2
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	e025      	b.n	8005160 <BSP_LED_Init+0x8c>
 8005114:	4b23      	ldr	r3, [pc, #140]	; (80051a4 <BSP_LED_Init+0xd0>)
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <BSP_LED_Init+0xd0>)
 800511a:	2101      	movs	r1, #1
 800511c:	430a      	orrs	r2, r1
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005120:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <BSP_LED_Init+0xd0>)
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	2201      	movs	r2, #1
 8005126:	4013      	ands	r3, r2
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	e018      	b.n	8005160 <BSP_LED_Init+0x8c>
 800512e:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <BSP_LED_Init+0xd0>)
 8005130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005132:	4b1c      	ldr	r3, [pc, #112]	; (80051a4 <BSP_LED_Init+0xd0>)
 8005134:	2102      	movs	r1, #2
 8005136:	430a      	orrs	r2, r1
 8005138:	62da      	str	r2, [r3, #44]	; 0x2c
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <BSP_LED_Init+0xd0>)
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	2202      	movs	r2, #2
 8005140:	4013      	ands	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	e00b      	b.n	8005160 <BSP_LED_Init+0x8c>
 8005148:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <BSP_LED_Init+0xd0>)
 800514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514c:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <BSP_LED_Init+0xd0>)
 800514e:	2102      	movs	r1, #2
 8005150:	430a      	orrs	r2, r1
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c
 8005154:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <BSP_LED_Init+0xd0>)
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	2202      	movs	r2, #2
 800515a:	4013      	ands	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005162:	1dfb      	adds	r3, r7, #7
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <BSP_LED_Init+0xd4>)
 8005168:	0052      	lsls	r2, r2, #1
 800516a:	5ad3      	ldrh	r3, [r2, r3]
 800516c:	001a      	movs	r2, r3
 800516e:	211c      	movs	r1, #28
 8005170:	187b      	adds	r3, r7, r1
 8005172:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005174:	187b      	adds	r3, r7, r1
 8005176:	2201      	movs	r2, #1
 8005178:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517a:	187b      	adds	r3, r7, r1
 800517c:	2200      	movs	r2, #0
 800517e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005180:	187b      	adds	r3, r7, r1
 8005182:	2203      	movs	r2, #3
 8005184:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005186:	1dfb      	adds	r3, r7, #7
 8005188:	781a      	ldrb	r2, [r3, #0]
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <BSP_LED_Init+0xd8>)
 800518c:	0092      	lsls	r2, r2, #2
 800518e:	58d3      	ldr	r3, [r2, r3]
 8005190:	187a      	adds	r2, r7, r1
 8005192:	0011      	movs	r1, r2
 8005194:	0018      	movs	r0, r3
 8005196:	f001 fe1b 	bl	8006dd0 <HAL_GPIO_Init>
}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b00c      	add	sp, #48	; 0x30
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	40021000 	.word	0x40021000
 80051a8:	0801d9f0 	.word	0x0801d9f0
 80051ac:	2000004c 	.word	0x2000004c

080051b0 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	0002      	movs	r2, r0
 80051b8:	1dfb      	adds	r3, r7, #7
 80051ba:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80051bc:	1dfb      	adds	r3, r7, #7
 80051be:	781a      	ldrb	r2, [r3, #0]
 80051c0:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <BSP_LED_On+0x30>)
 80051c2:	0092      	lsls	r2, r2, #2
 80051c4:	58d0      	ldr	r0, [r2, r3]
 80051c6:	1dfb      	adds	r3, r7, #7
 80051c8:	781a      	ldrb	r2, [r3, #0]
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <BSP_LED_On+0x34>)
 80051cc:	0052      	lsls	r2, r2, #1
 80051ce:	5ad3      	ldrh	r3, [r2, r3]
 80051d0:	2201      	movs	r2, #1
 80051d2:	0019      	movs	r1, r3
 80051d4:	f002 f879 	bl	80072ca <HAL_GPIO_WritePin>
}
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	b002      	add	sp, #8
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	2000004c 	.word	0x2000004c
 80051e4:	0801d9f0 	.word	0x0801d9f0

080051e8 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	0002      	movs	r2, r0
 80051f0:	1dfb      	adds	r3, r7, #7
 80051f2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80051f4:	1dfb      	adds	r3, r7, #7
 80051f6:	781a      	ldrb	r2, [r3, #0]
 80051f8:	4b07      	ldr	r3, [pc, #28]	; (8005218 <BSP_LED_Off+0x30>)
 80051fa:	0092      	lsls	r2, r2, #2
 80051fc:	58d0      	ldr	r0, [r2, r3]
 80051fe:	1dfb      	adds	r3, r7, #7
 8005200:	781a      	ldrb	r2, [r3, #0]
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <BSP_LED_Off+0x34>)
 8005204:	0052      	lsls	r2, r2, #1
 8005206:	5ad3      	ldrh	r3, [r2, r3]
 8005208:	2200      	movs	r2, #0
 800520a:	0019      	movs	r1, r3
 800520c:	f002 f85d 	bl	80072ca <HAL_GPIO_WritePin>
}
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	b002      	add	sp, #8
 8005216:	bd80      	pop	{r7, pc}
 8005218:	2000004c 	.word	0x2000004c
 800521c:	0801d9f0 	.word	0x0801d9f0

08005220 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	0002      	movs	r2, r0
 8005228:	1dfb      	adds	r3, r7, #7
 800522a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800522c:	1dfb      	adds	r3, r7, #7
 800522e:	781a      	ldrb	r2, [r3, #0]
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <BSP_LED_Toggle+0x30>)
 8005232:	0092      	lsls	r2, r2, #2
 8005234:	58d0      	ldr	r0, [r2, r3]
 8005236:	1dfb      	adds	r3, r7, #7
 8005238:	781a      	ldrb	r2, [r3, #0]
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <BSP_LED_Toggle+0x34>)
 800523c:	0052      	lsls	r2, r2, #1
 800523e:	5ad3      	ldrh	r3, [r2, r3]
 8005240:	0019      	movs	r1, r3
 8005242:	f002 f85f 	bl	8007304 <HAL_GPIO_TogglePin>
}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	b002      	add	sp, #8
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	2000004c 	.word	0x2000004c
 8005254:	0801d9f0 	.word	0x0801d9f0

08005258 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	0002      	movs	r2, r0
 8005260:	1dfb      	adds	r3, r7, #7
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	1dbb      	adds	r3, r7, #6
 8005266:	1c0a      	adds	r2, r1, #0
 8005268:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800526a:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <BSP_PB_Init+0xc0>)
 800526c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526e:	4b2a      	ldr	r3, [pc, #168]	; (8005318 <BSP_PB_Init+0xc0>)
 8005270:	2102      	movs	r1, #2
 8005272:	430a      	orrs	r2, r1
 8005274:	62da      	str	r2, [r3, #44]	; 0x2c
 8005276:	4b28      	ldr	r3, [pc, #160]	; (8005318 <BSP_PB_Init+0xc0>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	2202      	movs	r2, #2
 800527c:	4013      	ands	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005282:	4b25      	ldr	r3, [pc, #148]	; (8005318 <BSP_PB_Init+0xc0>)
 8005284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005286:	4b24      	ldr	r3, [pc, #144]	; (8005318 <BSP_PB_Init+0xc0>)
 8005288:	2101      	movs	r1, #1
 800528a:	430a      	orrs	r2, r1
 800528c:	635a      	str	r2, [r3, #52]	; 0x34

  if (ButtonMode == BUTTON_MODE_GPIO)
 800528e:	1dbb      	adds	r3, r7, #6
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d117      	bne.n	80052c6 <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005296:	2304      	movs	r3, #4
 8005298:	001a      	movs	r2, r3
 800529a:	210c      	movs	r1, #12
 800529c:	187b      	adds	r3, r7, r1
 800529e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052a0:	187b      	adds	r3, r7, r1
 80052a2:	2200      	movs	r2, #0
 80052a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80052a6:	187b      	adds	r3, r7, r1
 80052a8:	2202      	movs	r2, #2
 80052aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ac:	187b      	adds	r3, r7, r1
 80052ae:	2203      	movs	r2, #3
 80052b0:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80052b2:	1dfb      	adds	r3, r7, #7
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	4b19      	ldr	r3, [pc, #100]	; (800531c <BSP_PB_Init+0xc4>)
 80052b8:	0092      	lsls	r2, r2, #2
 80052ba:	58d3      	ldr	r3, [r2, r3]
 80052bc:	187a      	adds	r2, r7, r1
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f001 fd85 	bl	8006dd0 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 80052c6:	1dbb      	adds	r3, r7, #6
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d11f      	bne.n	800530e <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80052ce:	2304      	movs	r3, #4
 80052d0:	001a      	movs	r2, r3
 80052d2:	210c      	movs	r1, #12
 80052d4:	187b      	adds	r3, r7, r1
 80052d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d8:	187b      	adds	r3, r7, r1
 80052da:	2200      	movs	r2, #0
 80052dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80052de:	187b      	adds	r3, r7, r1
 80052e0:	4a0f      	ldr	r2, [pc, #60]	; (8005320 <BSP_PB_Init+0xc8>)
 80052e2:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80052e4:	1dfb      	adds	r3, r7, #7
 80052e6:	781a      	ldrb	r2, [r3, #0]
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <BSP_PB_Init+0xc4>)
 80052ea:	0092      	lsls	r2, r2, #2
 80052ec:	58d3      	ldr	r3, [r2, r3]
 80052ee:	187a      	adds	r2, r7, r1
 80052f0:	0011      	movs	r1, r2
 80052f2:	0018      	movs	r0, r3
 80052f4:	f001 fd6c 	bl	8006dd0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 80052f8:	2306      	movs	r3, #6
 80052fa:	b25b      	sxtb	r3, r3
 80052fc:	2103      	movs	r1, #3
 80052fe:	0018      	movs	r0, r3
 8005300:	f7ff fe7a 	bl	8004ff8 <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005304:	2306      	movs	r3, #6
 8005306:	b25b      	sxtb	r3, r3
 8005308:	0018      	movs	r0, r3
 800530a:	f001 fa4a 	bl	80067a2 <HAL_NVIC_EnableIRQ>
  }
}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	46bd      	mov	sp, r7
 8005312:	b008      	add	sp, #32
 8005314:	bd80      	pop	{r7, pc}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	40021000 	.word	0x40021000
 800531c:	2000005c 	.word	0x2000005c
 8005320:	10110000 	.word	0x10110000

08005324 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005328:	2305      	movs	r3, #5
}
 800532a:	0018      	movs	r0, r3
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	0002      	movs	r2, r0
 8005338:	1dfb      	adds	r3, r7, #7
 800533a:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 800533c:	1dfb      	adds	r3, r7, #7
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10b      	bne.n	800535c <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8005344:	2380      	movs	r3, #128	; 0x80
 8005346:	0159      	lsls	r1, r3, #5
 8005348:	23a0      	movs	r3, #160	; 0xa0
 800534a:	05db      	lsls	r3, r3, #23
 800534c:	2201      	movs	r2, #1
 800534e:	0018      	movs	r0, r3
 8005350:	f001 ffbb 	bl	80072ca <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8005354:	2005      	movs	r0, #5
 8005356:	f7ff f9bc 	bl	80046d2 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 800535a:	e007      	b.n	800536c <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	0159      	lsls	r1, r3, #5
 8005360:	23a0      	movs	r3, #160	; 0xa0
 8005362:	05db      	lsls	r3, r3, #23
 8005364:	2200      	movs	r2, #0
 8005366:	0018      	movs	r0, r3
 8005368:	f001 ffaf 	bl	80072ca <HAL_GPIO_WritePin>
}
 800536c:	46c0      	nop			; (mov r8, r8)
 800536e:	46bd      	mov	sp, r7
 8005370:	b002      	add	sp, #8
 8005372:	bd80      	pop	{r7, pc}

08005374 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b0a7      	sub	sp, #156	; 0x9c
 8005378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 800537a:	2480      	movs	r4, #128	; 0x80
 800537c:	193b      	adds	r3, r7, r4
 800537e:	0018      	movs	r0, r3
 8005380:	2314      	movs	r3, #20
 8005382:	001a      	movs	r2, r3
 8005384:	2100      	movs	r1, #0
 8005386:	f017 ff8e 	bl	801d2a6 <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800538a:	4b78      	ldr	r3, [pc, #480]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800538c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538e:	4b77      	ldr	r3, [pc, #476]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005390:	2102      	movs	r1, #2
 8005392:	430a      	orrs	r2, r1
 8005394:	62da      	str	r2, [r3, #44]	; 0x2c
 8005396:	4b75      	ldr	r3, [pc, #468]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	2202      	movs	r2, #2
 800539c:	4013      	ands	r3, r2
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80053a2:	4b72      	ldr	r3, [pc, #456]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80053a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a6:	4b71      	ldr	r3, [pc, #452]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80053a8:	2102      	movs	r1, #2
 80053aa:	430a      	orrs	r2, r1
 80053ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80053ae:	4b6f      	ldr	r3, [pc, #444]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	2202      	movs	r2, #2
 80053b4:	4013      	ands	r3, r2
 80053b6:	623b      	str	r3, [r7, #32]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 80053ba:	4b6c      	ldr	r3, [pc, #432]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80053bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053be:	4b6b      	ldr	r3, [pc, #428]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80053c0:	2102      	movs	r1, #2
 80053c2:	430a      	orrs	r2, r1
 80053c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80053c6:	4b69      	ldr	r3, [pc, #420]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	2202      	movs	r2, #2
 80053cc:	4013      	ands	r3, r2
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80053d2:	4b66      	ldr	r3, [pc, #408]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80053d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d6:	4b65      	ldr	r3, [pc, #404]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80053d8:	2104      	movs	r1, #4
 80053da:	430a      	orrs	r2, r1
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80053de:	4b63      	ldr	r3, [pc, #396]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	2204      	movs	r2, #4
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 80053ea:	193b      	adds	r3, r7, r4
 80053ec:	2202      	movs	r2, #2
 80053ee:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80053f0:	193b      	adds	r3, r7, r4
 80053f2:	2203      	movs	r2, #3
 80053f4:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80053f6:	2300      	movs	r3, #0
 80053f8:	2294      	movs	r2, #148	; 0x94
 80053fa:	18ba      	adds	r2, r7, r2
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e020      	b.n	8005442 <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005400:	4b5b      	ldr	r3, [pc, #364]	; (8005570 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 8005402:	2194      	movs	r1, #148	; 0x94
 8005404:	187a      	adds	r2, r7, r1
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	0092      	lsls	r2, r2, #2
 800540a:	58d2      	ldr	r2, [r2, r3]
 800540c:	2080      	movs	r0, #128	; 0x80
 800540e:	183b      	adds	r3, r7, r0
 8005410:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005412:	4b58      	ldr	r3, [pc, #352]	; (8005574 <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 8005414:	187a      	adds	r2, r7, r1
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	0052      	lsls	r2, r2, #1
 800541a:	5ad3      	ldrh	r3, [r2, r3]
 800541c:	001a      	movs	r2, r3
 800541e:	183b      	adds	r3, r7, r0
 8005420:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005422:	4b55      	ldr	r3, [pc, #340]	; (8005578 <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 8005424:	000c      	movs	r4, r1
 8005426:	187a      	adds	r2, r7, r1
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	0092      	lsls	r2, r2, #2
 800542c:	58d3      	ldr	r3, [r2, r3]
 800542e:	183a      	adds	r2, r7, r0
 8005430:	0011      	movs	r1, r2
 8005432:	0018      	movs	r0, r3
 8005434:	f001 fccc 	bl	8006dd0 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005438:	193b      	adds	r3, r7, r4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	193a      	adds	r2, r7, r4
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	2394      	movs	r3, #148	; 0x94
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b03      	cmp	r3, #3
 800544a:	d9d9      	bls.n	8005400 <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 800544c:	2328      	movs	r3, #40	; 0x28
 800544e:	18fb      	adds	r3, r7, r3
 8005450:	0018      	movs	r0, r3
 8005452:	f000 fa07 	bl	8005864 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 8005456:	2480      	movs	r4, #128	; 0x80
 8005458:	193b      	adds	r3, r7, r4
 800545a:	2280      	movs	r2, #128	; 0x80
 800545c:	0212      	lsls	r2, r2, #8
 800545e:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005460:	193b      	adds	r3, r7, r4
 8005462:	2201      	movs	r2, #1
 8005464:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 8005466:	193b      	adds	r3, r7, r4
 8005468:	2201      	movs	r2, #1
 800546a:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 800546c:	4b3f      	ldr	r3, [pc, #252]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800546e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005470:	4b3e      	ldr	r3, [pc, #248]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005472:	2101      	movs	r1, #1
 8005474:	430a      	orrs	r2, r1
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c
 8005478:	4b3c      	ldr	r3, [pc, #240]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	2201      	movs	r2, #1
 800547e:	4013      	ands	r3, r2
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8005484:	193a      	adds	r2, r7, r4
 8005486:	23a0      	movs	r3, #160	; 0xa0
 8005488:	05db      	lsls	r3, r3, #23
 800548a:	0011      	movs	r1, r2
 800548c:	0018      	movs	r0, r3
 800548e:	f001 fc9f 	bl	8006dd0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	0219      	lsls	r1, r3, #8
 8005496:	23a0      	movs	r3, #160	; 0xa0
 8005498:	05db      	lsls	r3, r3, #23
 800549a:	2201      	movs	r2, #1
 800549c:	0018      	movs	r0, r3
 800549e:	f001 ff14 	bl	80072ca <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 80054a2:	4b32      	ldr	r3, [pc, #200]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a6:	4b31      	ldr	r3, [pc, #196]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054a8:	2101      	movs	r1, #1
 80054aa:	430a      	orrs	r2, r1
 80054ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80054ae:	4b2f      	ldr	r3, [pc, #188]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	2201      	movs	r2, #1
 80054b4:	4013      	ands	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 80054ba:	4b2c      	ldr	r3, [pc, #176]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054be:	4b2b      	ldr	r3, [pc, #172]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054c0:	2101      	movs	r1, #1
 80054c2:	430a      	orrs	r2, r1
 80054c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80054c6:	4b29      	ldr	r3, [pc, #164]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	2201      	movs	r2, #1
 80054cc:	4013      	ands	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80054d2:	4b26      	ldr	r3, [pc, #152]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d6:	4b25      	ldr	r3, [pc, #148]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054d8:	2104      	movs	r1, #4
 80054da:	430a      	orrs	r2, r1
 80054dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80054de:	4b23      	ldr	r3, [pc, #140]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	2204      	movs	r2, #4
 80054e4:	4013      	ands	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]
 80054e8:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 80054ea:	4b20      	ldr	r3, [pc, #128]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ee:	4b1f      	ldr	r3, [pc, #124]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054f0:	2104      	movs	r1, #4
 80054f2:	430a      	orrs	r2, r1
 80054f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80054f6:	4b1d      	ldr	r3, [pc, #116]	; (800556c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	2204      	movs	r2, #4
 80054fc:	4013      	ands	r3, r2
 80054fe:	607b      	str	r3, [r7, #4]
 8005500:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005502:	193b      	adds	r3, r7, r4
 8005504:	2201      	movs	r2, #1
 8005506:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005508:	193b      	adds	r3, r7, r4
 800550a:	2200      	movs	r2, #0
 800550c:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800550e:	193b      	adds	r3, r7, r4
 8005510:	2203      	movs	r2, #3
 8005512:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8005514:	193b      	adds	r3, r7, r4
 8005516:	2280      	movs	r2, #128	; 0x80
 8005518:	0152      	lsls	r2, r2, #5
 800551a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 800551c:	193a      	adds	r2, r7, r4
 800551e:	23a0      	movs	r3, #160	; 0xa0
 8005520:	05db      	lsls	r3, r3, #23
 8005522:	0011      	movs	r1, r2
 8005524:	0018      	movs	r0, r3
 8005526:	f001 fc53 	bl	8006dd0 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 800552a:	193b      	adds	r3, r7, r4
 800552c:	2202      	movs	r2, #2
 800552e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8005530:	193a      	adds	r2, r7, r4
 8005532:	23a0      	movs	r3, #160	; 0xa0
 8005534:	05db      	lsls	r3, r3, #23
 8005536:	0011      	movs	r1, r2
 8005538:	0018      	movs	r0, r3
 800553a:	f001 fc49 	bl	8006dd0 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 800553e:	193b      	adds	r3, r7, r4
 8005540:	2202      	movs	r2, #2
 8005542:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8005544:	193b      	adds	r3, r7, r4
 8005546:	4a0d      	ldr	r2, [pc, #52]	; (800557c <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005548:	0019      	movs	r1, r3
 800554a:	0010      	movs	r0, r2
 800554c:	f001 fc40 	bl	8006dd0 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8005550:	193b      	adds	r3, r7, r4
 8005552:	2204      	movs	r2, #4
 8005554:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8005556:	193b      	adds	r3, r7, r4
 8005558:	4a08      	ldr	r2, [pc, #32]	; (800557c <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 800555a:	0019      	movs	r1, r3
 800555c:	0010      	movs	r0, r2
 800555e:	f001 fc37 	bl	8006dd0 <HAL_GPIO_Init>
}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	46bd      	mov	sp, r7
 8005566:	b027      	add	sp, #156	; 0x9c
 8005568:	bd90      	pop	{r4, r7, pc}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	40021000 	.word	0x40021000
 8005570:	0801da2c 	.word	0x0801da2c
 8005574:	0801da24 	.word	0x0801da24
 8005578:	20000060 	.word	0x20000060
 800557c:	50000800 	.word	0x50000800

08005580 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005586:	003b      	movs	r3, r7
 8005588:	0018      	movs	r0, r3
 800558a:	2314      	movs	r3, #20
 800558c:	001a      	movs	r2, r3
 800558e:	2100      	movs	r1, #0
 8005590:	f017 fe89 	bl	801d2a6 <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 8005594:	003b      	movs	r3, r7
 8005596:	2202      	movs	r2, #2
 8005598:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800559a:	2300      	movs	r3, #0
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	e018      	b.n	80055d2 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 80055a0:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	0092      	lsls	r2, r2, #2
 80055a6:	58d2      	ldr	r2, [r2, r3]
 80055a8:	003b      	movs	r3, r7
 80055aa:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80055ac:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	0052      	lsls	r2, r2, #1
 80055b2:	5ad3      	ldrh	r3, [r2, r3]
 80055b4:	001a      	movs	r2, r3
 80055b6:	003b      	movs	r3, r7
 80055b8:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80055ba:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	0092      	lsls	r2, r2, #2
 80055c0:	58d3      	ldr	r3, [r2, r3]
 80055c2:	003a      	movs	r2, r7
 80055c4:	0011      	movs	r1, r2
 80055c6:	0018      	movs	r0, r3
 80055c8:	f001 fc02 	bl	8006dd0 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	3301      	adds	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d9e3      	bls.n	80055a0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 80055d8:	f000 f9a4 	bl	8005924 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b006      	add	sp, #24
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	0801da2c 	.word	0x0801da2c
 80055e8:	0801da24 	.word	0x0801da24
 80055ec:	20000060 	.word	0x20000060

080055f0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f8:	f3ef 8310 	mrs	r3, PRIMASK
 80055fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80055fe:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 8005600:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005602:	b672      	cpsid	i
}
 8005604:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e02f      	b.n	800566c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	00da      	lsls	r2, r3, #3
 8005610:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005612:	18d0      	adds	r0, r2, r3
 8005614:	4b1d      	ldr	r3, [pc, #116]	; (800568c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	0092      	lsls	r2, r2, #2
 800561a:	58d3      	ldr	r3, [r2, r3]
 800561c:	0019      	movs	r1, r3
 800561e:	f001 fba1 	bl	8006d64 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	00da      	lsls	r2, r3, #3
 8005626:	4b18      	ldr	r3, [pc, #96]	; (8005688 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005628:	18d0      	adds	r0, r2, r3
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	18d3      	adds	r3, r2, r3
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	001a      	movs	r2, r3
 8005636:	2100      	movs	r1, #0
 8005638:	f001 fb73 	bl	8006d22 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 800563c:	4a14      	ldr	r2, [pc, #80]	; (8005690 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	18d3      	adds	r3, r2, r3
 8005642:	2000      	movs	r0, #0
 8005644:	5618      	ldrsb	r0, [r3, r0]
 8005646:	4b13      	ldr	r3, [pc, #76]	; (8005694 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	0092      	lsls	r2, r2, #2
 800564c:	58d3      	ldr	r3, [r2, r3]
 800564e:	2200      	movs	r2, #0
 8005650:	0019      	movs	r1, r3
 8005652:	f001 f891 	bl	8006778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8005656:	4a0e      	ldr	r2, [pc, #56]	; (8005690 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	18d3      	adds	r3, r2, r3
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	b25b      	sxtb	r3, r3
 8005660:	0018      	movs	r0, r3
 8005662:	f001 f89e 	bl	80067a2 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	3301      	adds	r3, #1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b03      	cmp	r3, #3
 8005670:	d9cc      	bls.n	800560c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f383 8810 	msr	PRIMASK, r3
}
 800567c:	46c0      	nop			; (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	46bd      	mov	sp, r7
 8005682:	b006      	add	sp, #24
 8005684:	bd80      	pop	{r7, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	20000794 	.word	0x20000794
 800568c:	0801da00 	.word	0x0801da00
 8005690:	0801da20 	.word	0x0801da20
 8005694:	0801da10 	.word	0x0801da10

08005698 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b002      	add	sp, #8
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	0002      	movs	r2, r0
 80056b4:	1dfb      	adds	r3, r7, #7
 80056b6:	701a      	strb	r2, [r3, #0]

  switch (state)
 80056b8:	1dfb      	adds	r3, r7, #7
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d82e      	bhi.n	800571e <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 80056c0:	009a      	lsls	r2, r3, #2
 80056c2:	4b23      	ldr	r3, [pc, #140]	; (8005750 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 80056c4:	18d3      	adds	r3, r2, r3
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 80056ca:	23a0      	movs	r3, #160	; 0xa0
 80056cc:	05db      	lsls	r3, r3, #23
 80056ce:	2201      	movs	r2, #1
 80056d0:	2102      	movs	r1, #2
 80056d2:	0018      	movs	r0, r3
 80056d4:	f001 fdf9 	bl	80072ca <HAL_GPIO_WritePin>
      break;
 80056d8:	e036      	b.n	8005748 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80056dc:	2201      	movs	r2, #1
 80056de:	2104      	movs	r1, #4
 80056e0:	0018      	movs	r0, r3
 80056e2:	f001 fdf2 	bl	80072ca <HAL_GPIO_WritePin>
      break;
 80056e6:	e02f      	b.n	8005748 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 80056e8:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	2102      	movs	r1, #2
 80056ee:	0018      	movs	r0, r3
 80056f0:	f001 fdeb 	bl	80072ca <HAL_GPIO_WritePin>
      break;
 80056f4:	e028      	b.n	8005748 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80056f6:	23a0      	movs	r3, #160	; 0xa0
 80056f8:	05db      	lsls	r3, r3, #23
 80056fa:	2200      	movs	r2, #0
 80056fc:	2102      	movs	r1, #2
 80056fe:	0018      	movs	r0, r3
 8005700:	f001 fde3 	bl	80072ca <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8005704:	4b13      	ldr	r3, [pc, #76]	; (8005754 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005706:	2200      	movs	r2, #0
 8005708:	2104      	movs	r1, #4
 800570a:	0018      	movs	r0, r3
 800570c:	f001 fddd 	bl	80072ca <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8005710:	4b10      	ldr	r3, [pc, #64]	; (8005754 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005712:	2200      	movs	r2, #0
 8005714:	2102      	movs	r1, #2
 8005716:	0018      	movs	r0, r3
 8005718:	f001 fdd7 	bl	80072ca <HAL_GPIO_WritePin>
      break;
 800571c:	e014      	b.n	8005748 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 800571e:	23a0      	movs	r3, #160	; 0xa0
 8005720:	05db      	lsls	r3, r3, #23
 8005722:	2200      	movs	r2, #0
 8005724:	2102      	movs	r1, #2
 8005726:	0018      	movs	r0, r3
 8005728:	f001 fdcf 	bl	80072ca <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 800572c:	4b09      	ldr	r3, [pc, #36]	; (8005754 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 800572e:	2200      	movs	r2, #0
 8005730:	2104      	movs	r1, #4
 8005732:	0018      	movs	r0, r3
 8005734:	f001 fdc9 	bl	80072ca <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8005738:	4b06      	ldr	r3, [pc, #24]	; (8005754 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 800573a:	2200      	movs	r2, #0
 800573c:	2102      	movs	r1, #2
 800573e:	0018      	movs	r0, r3
 8005740:	f001 fdc3 	bl	80072ca <HAL_GPIO_WritePin>

      break;
 8005744:	e000      	b.n	8005748 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 8005746:	46c0      	nop			; (mov r8, r8)
  }
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	46bd      	mov	sp, r7
 800574c:	b002      	add	sp, #8
 800574e:	bd80      	pop	{r7, pc}
 8005750:	0801da3c 	.word	0x0801da3c
 8005754:	50000800 	.word	0x50000800

08005758 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 8005760:	2301      	movs	r3, #1
}
 8005762:	0018      	movs	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	b002      	add	sp, #8
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	0018      	movs	r0, r3
 8005776:	2314      	movs	r3, #20
 8005778:	001a      	movs	r2, r3
 800577a:	2100      	movs	r1, #0
 800577c:	f017 fd93 	bl	801d2a6 <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005780:	1d3b      	adds	r3, r7, #4
 8005782:	2201      	movs	r2, #1
 8005784:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005786:	1d3b      	adds	r3, r7, #4
 8005788:	2200      	movs	r2, #0
 800578a:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800578c:	1d3b      	adds	r3, r7, #4
 800578e:	2203      	movs	r2, #3
 8005790:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	2201      	movs	r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8005798:	1d3b      	adds	r3, r7, #4
 800579a:	4a0f      	ldr	r2, [pc, #60]	; (80057d8 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 800579c:	0019      	movs	r1, r3
 800579e:	0010      	movs	r0, r2
 80057a0:	f001 fb16 	bl	8006dd0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	2101      	movs	r1, #1
 80057aa:	0018      	movs	r0, r3
 80057ac:	f001 fd8d 	bl	80072ca <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 80057b0:	2001      	movs	r0, #1
 80057b2:	f7fe ff8e 	bl	80046d2 <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 80057b6:	1d3b      	adds	r3, r7, #4
 80057b8:	2200      	movs	r2, #0
 80057ba:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	4a06      	ldr	r2, [pc, #24]	; (80057d8 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 80057c0:	0019      	movs	r1, r3
 80057c2:	0010      	movs	r0, r2
 80057c4:	f001 fb04 	bl	8006dd0 <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 80057c8:	2006      	movs	r0, #6
 80057ca:	f7fe ff82 	bl	80046d2 <HAL_Delay>
}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b006      	add	sp, #24
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	50000800 	.word	0x50000800

080057dc <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 80057e0:	f7ff fa34 	bl	8004c4c <BSP_SPI1_Init>
}
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 80057ea:	b590      	push	{r4, r7, lr}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	0002      	movs	r2, r0
 80057f2:	1dbb      	adds	r3, r7, #6
 80057f4:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80057f6:	240e      	movs	r4, #14
 80057f8:	1939      	adds	r1, r7, r4
 80057fa:	1dbb      	adds	r3, r7, #6
 80057fc:	2201      	movs	r2, #1
 80057fe:	0018      	movs	r0, r3
 8005800:	f7ff fa48 	bl	8004c94 <BSP_SPI1_SendRecv>

  return rxData;
 8005804:	193b      	adds	r3, r7, r4
 8005806:	881b      	ldrh	r3, [r3, #0]
}
 8005808:	0018      	movs	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	b005      	add	sp, #20
 800580e:	bd90      	pop	{r4, r7, pc}

08005810 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  if (state == 0)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d108      	bne.n	8005830 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	0219      	lsls	r1, r3, #8
 8005822:	23a0      	movs	r3, #160	; 0xa0
 8005824:	05db      	lsls	r3, r3, #23
 8005826:	2200      	movs	r2, #0
 8005828:	0018      	movs	r0, r3
 800582a:	f001 fd4e 	bl	80072ca <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 800582e:	e007      	b.n	8005840 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	0219      	lsls	r1, r3, #8
 8005834:	23a0      	movs	r3, #160	; 0xa0
 8005836:	05db      	lsls	r3, r3, #23
 8005838:	2201      	movs	r2, #1
 800583a:	0018      	movs	r0, r3
 800583c:	f001 fd45 	bl	80072ca <HAL_GPIO_WritePin>
}
 8005840:	46c0      	nop			; (mov r8, r8)
 8005842:	46bd      	mov	sp, r7
 8005844:	b002      	add	sp, #8
 8005846:	bd80      	pop	{r7, pc}

08005848 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 800584e:	2102      	movs	r1, #2
 8005850:	0018      	movs	r0, r3
 8005852:	f001 fd1d 	bl	8007290 <HAL_GPIO_ReadPin>
 8005856:	0003      	movs	r3, r0
}
 8005858:	0018      	movs	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	50000400 	.word	0x50000400

08005864 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b08b      	sub	sp, #44	; 0x2c
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800586c:	4b2b      	ldr	r3, [pc, #172]	; (800591c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	4b2a      	ldr	r3, [pc, #168]	; (800591c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005872:	2102      	movs	r1, #2
 8005874:	430a      	orrs	r2, r1
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c
 8005878:	4b28      	ldr	r3, [pc, #160]	; (800591c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	2202      	movs	r2, #2
 800587e:	4013      	ands	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8005884:	4b25      	ldr	r3, [pc, #148]	; (800591c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005888:	4b24      	ldr	r3, [pc, #144]	; (800591c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800588a:	2101      	movs	r1, #1
 800588c:	430a      	orrs	r2, r1
 800588e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005890:	4b22      	ldr	r3, [pc, #136]	; (800591c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	2201      	movs	r2, #1
 8005896:	4013      	ands	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 800589c:	4b1f      	ldr	r3, [pc, #124]	; (800591c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800589e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a0:	4b1e      	ldr	r3, [pc, #120]	; (800591c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80058a2:	2101      	movs	r1, #1
 80058a4:	430a      	orrs	r2, r1
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80058a8:	4b1c      	ldr	r3, [pc, #112]	; (800591c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	2201      	movs	r2, #1
 80058ae:	4013      	ands	r3, r2
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b4:	2414      	movs	r4, #20
 80058b6:	193b      	adds	r3, r7, r4
 80058b8:	2202      	movs	r2, #2
 80058ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058bc:	193b      	adds	r3, r7, r4
 80058be:	2202      	movs	r2, #2
 80058c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058c2:	193b      	adds	r3, r7, r4
 80058c4:	2203      	movs	r2, #3
 80058c6:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80058c8:	193b      	adds	r3, r7, r4
 80058ca:	2200      	movs	r2, #0
 80058cc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80058ce:	193b      	adds	r3, r7, r4
 80058d0:	2280      	movs	r2, #128	; 0x80
 80058d2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80058d4:	193a      	adds	r2, r7, r4
 80058d6:	23a0      	movs	r3, #160	; 0xa0
 80058d8:	05db      	lsls	r3, r3, #23
 80058da:	0011      	movs	r1, r2
 80058dc:	0018      	movs	r0, r3
 80058de:	f001 fa77 	bl	8006dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 80058e2:	193b      	adds	r3, r7, r4
 80058e4:	2200      	movs	r2, #0
 80058e6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80058e8:	193b      	adds	r3, r7, r4
 80058ea:	2240      	movs	r2, #64	; 0x40
 80058ec:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80058ee:	193a      	adds	r2, r7, r4
 80058f0:	23a0      	movs	r3, #160	; 0xa0
 80058f2:	05db      	lsls	r3, r3, #23
 80058f4:	0011      	movs	r1, r2
 80058f6:	0018      	movs	r0, r3
 80058f8:	f001 fa6a 	bl	8006dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80058fc:	193b      	adds	r3, r7, r4
 80058fe:	2200      	movs	r2, #0
 8005900:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8005902:	193b      	adds	r3, r7, r4
 8005904:	2208      	movs	r2, #8
 8005906:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8005908:	193b      	adds	r3, r7, r4
 800590a:	4a05      	ldr	r2, [pc, #20]	; (8005920 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 800590c:	0019      	movs	r1, r3
 800590e:	0010      	movs	r0, r2
 8005910:	f001 fa5e 	bl	8006dd0 <HAL_GPIO_Init>
}
 8005914:	46c0      	nop			; (mov r8, r8)
 8005916:	46bd      	mov	sp, r7
 8005918:	b00b      	add	sp, #44	; 0x2c
 800591a:	bd90      	pop	{r4, r7, pc}
 800591c:	40021000 	.word	0x40021000
 8005920:	50000400 	.word	0x50000400

08005924 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800592a:	1d3b      	adds	r3, r7, #4
 800592c:	2201      	movs	r2, #1
 800592e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005930:	1d3b      	adds	r3, r7, #4
 8005932:	2202      	movs	r2, #2
 8005934:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	2280      	movs	r2, #128	; 0x80
 800593a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800593c:	1d3a      	adds	r2, r7, #4
 800593e:	23a0      	movs	r3, #160	; 0xa0
 8005940:	05db      	lsls	r3, r3, #23
 8005942:	0011      	movs	r1, r2
 8005944:	0018      	movs	r0, r3
 8005946:	f001 fa43 	bl	8006dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	2240      	movs	r2, #64	; 0x40
 800594e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005950:	1d3a      	adds	r2, r7, #4
 8005952:	23a0      	movs	r3, #160	; 0xa0
 8005954:	05db      	lsls	r3, r3, #23
 8005956:	0011      	movs	r1, r2
 8005958:	0018      	movs	r0, r3
 800595a:	f001 fa39 	bl	8006dd0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	2208      	movs	r2, #8
 8005962:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8005964:	1d3b      	adds	r3, r7, #4
 8005966:	4a0e      	ldr	r2, [pc, #56]	; (80059a0 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8005968:	0019      	movs	r1, r3
 800596a:	0010      	movs	r0, r2
 800596c:	f001 fa30 	bl	8006dd0 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8005970:	23a0      	movs	r3, #160	; 0xa0
 8005972:	05db      	lsls	r3, r3, #23
 8005974:	2200      	movs	r2, #0
 8005976:	2180      	movs	r1, #128	; 0x80
 8005978:	0018      	movs	r0, r3
 800597a:	f001 fca6 	bl	80072ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 800597e:	23a0      	movs	r3, #160	; 0xa0
 8005980:	05db      	lsls	r3, r3, #23
 8005982:	2200      	movs	r2, #0
 8005984:	2140      	movs	r1, #64	; 0x40
 8005986:	0018      	movs	r0, r3
 8005988:	f001 fc9f 	bl	80072ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 800598e:	2200      	movs	r2, #0
 8005990:	2108      	movs	r1, #8
 8005992:	0018      	movs	r0, r3
 8005994:	f001 fc99 	bl	80072ca <HAL_GPIO_WritePin>

}
 8005998:	46c0      	nop			; (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	b006      	add	sp, #24
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	50000400 	.word	0x50000400

080059a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80059a8:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <SystemInit+0x64>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	4b16      	ldr	r3, [pc, #88]	; (8005a08 <SystemInit+0x64>)
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	0049      	lsls	r1, r1, #1
 80059b2:	430a      	orrs	r2, r1
 80059b4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <SystemInit+0x64>)
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <SystemInit+0x64>)
 80059bc:	4913      	ldr	r1, [pc, #76]	; (8005a0c <SystemInit+0x68>)
 80059be:	400a      	ands	r2, r1
 80059c0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80059c2:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <SystemInit+0x64>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <SystemInit+0x64>)
 80059c8:	4911      	ldr	r1, [pc, #68]	; (8005a10 <SystemInit+0x6c>)
 80059ca:	400a      	ands	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80059ce:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <SystemInit+0x64>)
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <SystemInit+0x64>)
 80059d4:	2101      	movs	r1, #1
 80059d6:	438a      	bics	r2, r1
 80059d8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <SystemInit+0x64>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <SystemInit+0x64>)
 80059e0:	490c      	ldr	r1, [pc, #48]	; (8005a14 <SystemInit+0x70>)
 80059e2:	400a      	ands	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80059e6:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <SystemInit+0x64>)
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <SystemInit+0x64>)
 80059ec:	490a      	ldr	r1, [pc, #40]	; (8005a18 <SystemInit+0x74>)
 80059ee:	400a      	ands	r2, r1
 80059f0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <SystemInit+0x64>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059f8:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <SystemInit+0x78>)
 80059fa:	2280      	movs	r2, #128	; 0x80
 80059fc:	0512      	lsls	r2, r2, #20
 80059fe:	609a      	str	r2, [r3, #8]
#endif
}
 8005a00:	46c0      	nop			; (mov r8, r8)
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	88ff400c 	.word	0x88ff400c
 8005a10:	fef6fff6 	.word	0xfef6fff6
 8005a14:	fffbffff 	.word	0xfffbffff
 8005a18:	ff02ffff 	.word	0xff02ffff
 8005a1c:	e000ed00 	.word	0xe000ed00

08005a20 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a26:	1dfb      	adds	r3, r7, #7
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <HAL_Init+0x3c>)
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <HAL_Init+0x3c>)
 8005a32:	2102      	movs	r1, #2
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a38:	2003      	movs	r0, #3
 8005a3a:	f7fe fe39 	bl	80046b0 <HAL_InitTick>
 8005a3e:	1e03      	subs	r3, r0, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005a42:	1dfb      	adds	r3, r7, #7
 8005a44:	2201      	movs	r2, #1
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e001      	b.n	8005a4e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a4a:	f7fe fbef 	bl	800422c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a4e:	1dfb      	adds	r3, r7, #7
 8005a50:	781b      	ldrb	r3, [r3, #0]
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b002      	add	sp, #8
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	40022000 	.word	0x40022000

08005a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_IncTick+0x1c>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	001a      	movs	r2, r3
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_IncTick+0x20>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	18d2      	adds	r2, r2, r3
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <HAL_IncTick+0x20>)
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	20000078 	.word	0x20000078
 8005a80:	200007b4 	.word	0x200007b4

08005a84 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8005a88:	4b02      	ldr	r3, [pc, #8]	; (8005a94 <HAL_GetUIDw0+0x10>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	1ff80050 	.word	0x1ff80050

08005a98 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8005a9c:	4b02      	ldr	r3, [pc, #8]	; (8005aa8 <HAL_GetUIDw1+0x10>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	1ff80054 	.word	0x1ff80054

08005aac <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8005ab0:	4b02      	ldr	r3, [pc, #8]	; (8005abc <HAL_GetUIDw2+0x10>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	1ff80064 	.word	0x1ff80064

08005ac0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	4b03      	ldr	r3, [pc, #12]	; (8005ad8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8005aca:	2101      	movs	r1, #1
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	40015800 	.word	0x40015800

08005adc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8005ae6:	2102      	movs	r1, #2
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
}
 8005aec:	46c0      	nop			; (mov r8, r8)
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	46c0      	nop			; (mov r8, r8)
 8005af4:	40015800 	.word	0x40015800

08005af8 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8005afc:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005b02:	2104      	movs	r1, #4
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	40015800 	.word	0x40015800

08005b14 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e159      	b.n	8005dda <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2250      	movs	r2, #80	; 0x50
 8005b38:	2100      	movs	r1, #0
 8005b3a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f7fd fb3e 	bl	80031c0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b48:	2210      	movs	r2, #16
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d005      	beq.n	8005b5c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2204      	movs	r2, #4
 8005b58:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005b5a:	d00b      	beq.n	8005b74 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b60:	2210      	movs	r2, #16
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2250      	movs	r2, #80	; 0x50
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e132      	b.n	8005dda <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	4a9a      	ldr	r2, [pc, #616]	; (8005de4 <HAL_ADC_Init+0x2d0>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d108      	bne.n	8005ba4 <HAL_ADC_Init+0x90>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_ADC_Init+0x90>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <HAL_ADC_Init+0x92>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d149      	bne.n	8005c3e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	23c0      	movs	r3, #192	; 0xc0
 8005bb0:	061b      	lsls	r3, r3, #24
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d00b      	beq.n	8005bce <HAL_ADC_Init+0xba>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	05db      	lsls	r3, r3, #23
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d005      	beq.n	8005bce <HAL_ADC_Init+0xba>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	2380      	movs	r3, #128	; 0x80
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d111      	bne.n	8005bf2 <HAL_ADC_Init+0xde>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	0092      	lsls	r2, r2, #2
 8005bda:	0892      	lsrs	r2, r2, #2
 8005bdc:	611a      	str	r2, [r3, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6919      	ldr	r1, [r3, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	611a      	str	r2, [r3, #16]
 8005bf0:	e014      	b.n	8005c1c <HAL_ADC_Init+0x108>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	0092      	lsls	r2, r2, #2
 8005bfe:	0892      	lsrs	r2, r2, #2
 8005c00:	611a      	str	r2, [r3, #16]
 8005c02:	4b79      	ldr	r3, [pc, #484]	; (8005de8 <HAL_ADC_Init+0x2d4>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b78      	ldr	r3, [pc, #480]	; (8005de8 <HAL_ADC_Init+0x2d4>)
 8005c08:	4978      	ldr	r1, [pc, #480]	; (8005dec <HAL_ADC_Init+0x2d8>)
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	4b76      	ldr	r3, [pc, #472]	; (8005de8 <HAL_ADC_Init+0x2d4>)
 8005c10:	6819      	ldr	r1, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	4b74      	ldr	r3, [pc, #464]	; (8005de8 <HAL_ADC_Init+0x2d4>)
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2118      	movs	r1, #24
 8005c28:	438a      	bics	r2, r1
 8005c2a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68d9      	ldr	r1, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005c3e:	4b6a      	ldr	r3, [pc, #424]	; (8005de8 <HAL_ADC_Init+0x2d4>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4b69      	ldr	r3, [pc, #420]	; (8005de8 <HAL_ADC_Init+0x2d4>)
 8005c44:	496a      	ldr	r1, [pc, #424]	; (8005df0 <HAL_ADC_Init+0x2dc>)
 8005c46:	400a      	ands	r2, r1
 8005c48:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8005c4a:	4b67      	ldr	r3, [pc, #412]	; (8005de8 <HAL_ADC_Init+0x2d4>)
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c52:	065a      	lsls	r2, r3, #25
 8005c54:	4b64      	ldr	r3, [pc, #400]	; (8005de8 <HAL_ADC_Init+0x2d4>)
 8005c56:	430a      	orrs	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	055b      	lsls	r3, r3, #21
 8005c64:	4013      	ands	r3, r2
 8005c66:	d108      	bne.n	8005c7a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2180      	movs	r1, #128	; 0x80
 8005c74:	0549      	lsls	r1, r1, #21
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	495b      	ldr	r1, [pc, #364]	; (8005df4 <HAL_ADC_Init+0x2e0>)
 8005c86:	400a      	ands	r2, r1
 8005c88:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68d9      	ldr	r1, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d101      	bne.n	8005ca0 <HAL_ADC_Init+0x18c>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	e000      	b.n	8005ca2 <HAL_ADC_Init+0x18e>
 8005ca0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005ca2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2020      	movs	r0, #32
 8005ca8:	5c1b      	ldrb	r3, [r3, r0]
 8005caa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005cac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	202c      	movs	r0, #44	; 0x2c
 8005cb2:	5c1b      	ldrb	r3, [r3, r0]
 8005cb4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005cb6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005cbc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005cc4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005ccc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cda:	23c2      	movs	r3, #194	; 0xc2
 8005cdc:	33ff      	adds	r3, #255	; 0xff
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d00b      	beq.n	8005cfa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68d9      	ldr	r1, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2221      	movs	r2, #33	; 0x21
 8005cfe:	5c9b      	ldrb	r3, [r3, r2]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d11a      	bne.n	8005d3a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	5c9b      	ldrb	r3, [r3, r2]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2180      	movs	r1, #128	; 0x80
 8005d1a:	0249      	lsls	r1, r1, #9
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	60da      	str	r2, [r3, #12]
 8005d20:	e00b      	b.n	8005d3a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d26:	2220      	movs	r2, #32
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d32:	2201      	movs	r2, #1
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d11f      	bne.n	8005d82 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	492a      	ldr	r1, [pc, #168]	; (8005df8 <HAL_ADC_Init+0x2e4>)
 8005d4e:	400a      	ands	r2, r1
 8005d50:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6919      	ldr	r1, [r3, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005d60:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8005d66:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	611a      	str	r2, [r3, #16]
 8005d80:	e00e      	b.n	8005da0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d107      	bne.n	8005da0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	438a      	bics	r2, r1
 8005d9e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2107      	movs	r1, #7
 8005dac:	438a      	bics	r2, r1
 8005dae:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6959      	ldr	r1, [r3, #20]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	2203      	movs	r2, #3
 8005dce:	4393      	bics	r3, r2
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	0018      	movs	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b002      	add	sp, #8
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	fffffefd 	.word	0xfffffefd
 8005de8:	40012708 	.word	0x40012708
 8005dec:	ffc3ffff 	.word	0xffc3ffff
 8005df0:	fdffffff 	.word	0xfdffffff
 8005df4:	fffe0219 	.word	0xfffe0219
 8005df8:	fffffc03 	.word	0xfffffc03

08005dfc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8005dfc:	b5b0      	push	{r4, r5, r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e04:	230f      	movs	r3, #15
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	2200      	movs	r2, #0
 8005e0a:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e07d      	b.n	8005f12 <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005e22:	250f      	movs	r5, #15
 8005e24:	197c      	adds	r4, r7, r5
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f000 faff 	bl	800642c <ADC_ConversionStop>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005e32:	197b      	adds	r3, r7, r5
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10d      	bne.n	8005e56 <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005e3a:	197c      	adds	r4, r7, r5
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fa94 	bl	800636c <ADC_Disable>
 8005e44:	0003      	movs	r3, r0
 8005e46:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8005e48:	197b      	adds	r3, r7, r5
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d002      	beq.n	8005e56 <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8005e56:	230f      	movs	r3, #15
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d051      	beq.n	8005f04 <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	492c      	ldr	r1, [pc, #176]	; (8005f1c <HAL_ADC_DeInit+0x120>)
 8005e6c:	400a      	ands	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <HAL_ADC_DeInit+0x124>)
 8005e76:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4928      	ldr	r1, [pc, #160]	; (8005f24 <HAL_ADC_DeInit+0x128>)
 8005e84:	400a      	ands	r2, r1
 8005e86:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4925      	ldr	r1, [pc, #148]	; (8005f28 <HAL_ADC_DeInit+0x12c>)
 8005e94:	400a      	ands	r2, r1
 8005e96:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4922      	ldr	r1, [pc, #136]	; (8005f2c <HAL_ADC_DeInit+0x130>)
 8005ea4:	400a      	ands	r2, r1
 8005ea6:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2107      	movs	r1, #7
 8005eb4:	438a      	bics	r2, r1
 8005eb6:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6a1a      	ldr	r2, [r3, #32]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	491b      	ldr	r1, [pc, #108]	; (8005f30 <HAL_ADC_DeInit+0x134>)
 8005ec4:	400a      	ands	r2, r1
 8005ec6:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	22b4      	movs	r2, #180	; 0xb4
 8005ece:	589a      	ldr	r2, [r3, r2]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	217f      	movs	r1, #127	; 0x7f
 8005ed6:	438a      	bics	r2, r1
 8005ed8:	21b4      	movs	r1, #180	; 0xb4
 8005eda:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	22b4      	movs	r2, #180	; 0xb4
 8005ee2:	589a      	ldr	r2, [r3, r2]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	217f      	movs	r1, #127	; 0x7f
 8005eea:	438a      	bics	r2, r1
 8005eec:	21b4      	movs	r1, #180	; 0xb4
 8005eee:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7fd f994 	bl	8003220 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2250      	movs	r2, #80	; 0x50
 8005f08:	2100      	movs	r1, #0
 8005f0a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005f0c:	230f      	movs	r3, #15
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	781b      	ldrb	r3, [r3, #0]
}
 8005f12:	0018      	movs	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b004      	add	sp, #16
 8005f18:	bdb0      	pop	{r4, r5, r7, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	fffff760 	.word	0xfffff760
 8005f20:	0000089f 	.word	0x0000089f
 8005f24:	efffffff 	.word	0xefffffff
 8005f28:	833e0200 	.word	0x833e0200
 8005f2c:	3ffffc02 	.word	0x3ffffc02
 8005f30:	f000f000 	.word	0xf000f000

08005f34 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005f34:	b590      	push	{r4, r7, lr}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f3c:	230f      	movs	r3, #15
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d138      	bne.n	8005fc2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2250      	movs	r2, #80	; 0x50
 8005f54:	5c9b      	ldrb	r3, [r3, r2]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <HAL_ADC_Start+0x2a>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e038      	b.n	8005fd0 <HAL_ADC_Start+0x9c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2250      	movs	r2, #80	; 0x50
 8005f62:	2101      	movs	r1, #1
 8005f64:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d007      	beq.n	8005f7e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005f6e:	230f      	movs	r3, #15
 8005f70:	18fc      	adds	r4, r7, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f000 f999 	bl	80062ac <ADC_Enable>
 8005f7a:	0003      	movs	r3, r0
 8005f7c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005f7e:	230f      	movs	r3, #15
 8005f80:	18fb      	adds	r3, r7, r3
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d120      	bne.n	8005fca <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8c:	4a12      	ldr	r2, [pc, #72]	; (8005fd8 <HAL_ADC_Start+0xa4>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2280      	movs	r2, #128	; 0x80
 8005f92:	0052      	lsls	r2, r2, #1
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2250      	movs	r2, #80	; 0x50
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	221c      	movs	r2, #28
 8005fae:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2104      	movs	r1, #4
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]
 8005fc0:	e003      	b.n	8005fca <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fc2:	230f      	movs	r3, #15
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005fca:	230f      	movs	r3, #15
 8005fcc:	18fb      	adds	r3, r7, r3
 8005fce:	781b      	ldrb	r3, [r3, #0]
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b005      	add	sp, #20
 8005fd6:	bd90      	pop	{r4, r7, pc}
 8005fd8:	fffff0fe 	.word	0xfffff0fe

08005fdc <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005fdc:	b5b0      	push	{r4, r5, r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fe4:	230f      	movs	r3, #15
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	2200      	movs	r2, #0
 8005fea:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2250      	movs	r2, #80	; 0x50
 8005ff0:	5c9b      	ldrb	r3, [r3, r2]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_ADC_Stop+0x1e>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e029      	b.n	800604e <HAL_ADC_Stop+0x72>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2250      	movs	r2, #80	; 0x50
 8005ffe:	2101      	movs	r1, #1
 8006000:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006002:	250f      	movs	r5, #15
 8006004:	197c      	adds	r4, r7, r5
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	0018      	movs	r0, r3
 800600a:	f000 fa0f 	bl	800642c <ADC_ConversionStop>
 800600e:	0003      	movs	r3, r0
 8006010:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006012:	197b      	adds	r3, r7, r5
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d112      	bne.n	8006040 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800601a:	197c      	adds	r4, r7, r5
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	0018      	movs	r0, r3
 8006020:	f000 f9a4 	bl	800636c <ADC_Disable>
 8006024:	0003      	movs	r3, r0
 8006026:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006028:	197b      	adds	r3, r7, r5
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d107      	bne.n	8006040 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006034:	4a08      	ldr	r2, [pc, #32]	; (8006058 <HAL_ADC_Stop+0x7c>)
 8006036:	4013      	ands	r3, r2
 8006038:	2201      	movs	r2, #1
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2250      	movs	r2, #80	; 0x50
 8006044:	2100      	movs	r1, #0
 8006046:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006048:	230f      	movs	r3, #15
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	781b      	ldrb	r3, [r3, #0]
}
 800604e:	0018      	movs	r0, r3
 8006050:	46bd      	mov	sp, r7
 8006052:	b004      	add	sp, #16
 8006054:	bdb0      	pop	{r4, r5, r7, pc}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	fffffefe 	.word	0xfffffefe

0800605c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	2b08      	cmp	r3, #8
 8006074:	d102      	bne.n	800607c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006076:	2308      	movs	r3, #8
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e014      	b.n	80060a6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	4013      	ands	r3, r2
 8006086:	2b01      	cmp	r3, #1
 8006088:	d10b      	bne.n	80060a2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608e:	2220      	movs	r2, #32
 8006090:	431a      	orrs	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2250      	movs	r2, #80	; 0x50
 800609a:	2100      	movs	r1, #0
 800609c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e06c      	b.n	800617c <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80060a2:	230c      	movs	r3, #12
 80060a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80060a6:	f7fe fb0c 	bl	80046c2 <HAL_GetTick>
 80060aa:	0003      	movs	r3, r0
 80060ac:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80060ae:	e019      	b.n	80060e4 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	d016      	beq.n	80060e4 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <HAL_ADC_PollForConversion+0x70>
 80060bc:	f7fe fb01 	bl	80046c2 <HAL_GetTick>
 80060c0:	0002      	movs	r2, r0
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d20b      	bcs.n	80060e4 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	2204      	movs	r2, #4
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2250      	movs	r2, #80	; 0x50
 80060dc:	2100      	movs	r1, #0
 80060de:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e04b      	b.n	800617c <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4013      	ands	r3, r2
 80060ee:	d0df      	beq.n	80060b0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f4:	2280      	movs	r2, #128	; 0x80
 80060f6:	0092      	lsls	r2, r2, #2
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	23c0      	movs	r3, #192	; 0xc0
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	4013      	ands	r3, r2
 800610a:	d12e      	bne.n	800616a <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006112:	2b00      	cmp	r3, #0
 8006114:	d129      	bne.n	800616a <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2208      	movs	r2, #8
 800611e:	4013      	ands	r3, r2
 8006120:	2b08      	cmp	r3, #8
 8006122:	d122      	bne.n	800616a <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2204      	movs	r2, #4
 800612c:	4013      	ands	r3, r2
 800612e:	d110      	bne.n	8006152 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	210c      	movs	r1, #12
 800613c:	438a      	bics	r2, r1
 800613e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006144:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <HAL_ADC_PollForConversion+0x128>)
 8006146:	4013      	ands	r3, r2
 8006148:	2201      	movs	r2, #1
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
 8006150:	e00b      	b.n	800616a <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006156:	2220      	movs	r2, #32
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	2201      	movs	r2, #1
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d103      	bne.n	800617a <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	220c      	movs	r2, #12
 8006178:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b004      	add	sp, #16
 8006182:	bd80      	pop	{r7, pc}
 8006184:	fffffefe 	.word	0xfffffefe

08006188 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b002      	add	sp, #8
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2250      	movs	r2, #80	; 0x50
 80061ae:	5c9b      	ldrb	r3, [r3, r2]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_ADC_ConfigChannel+0x18>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e06c      	b.n	8006292 <HAL_ADC_ConfigChannel+0xf2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2250      	movs	r2, #80	; 0x50
 80061bc:	2101      	movs	r1, #1
 80061be:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2204      	movs	r2, #4
 80061c8:	4013      	ands	r3, r2
 80061ca:	d00b      	beq.n	80061e4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d0:	2220      	movs	r2, #32
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2250      	movs	r2, #80	; 0x50
 80061dc:	2100      	movs	r1, #0
 80061de:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e056      	b.n	8006292 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4a2c      	ldr	r2, [pc, #176]	; (800629c <HAL_ADC_ConfigChannel+0xfc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d028      	beq.n	8006240 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	035b      	lsls	r3, r3, #13
 80061fa:	0b5a      	lsrs	r2, r3, #13
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	02db      	lsls	r3, r3, #11
 800620c:	4013      	ands	r3, r2
 800620e:	d009      	beq.n	8006224 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006210:	4b23      	ldr	r3, [pc, #140]	; (80062a0 <HAL_ADC_ConfigChannel+0x100>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4b22      	ldr	r3, [pc, #136]	; (80062a0 <HAL_ADC_ConfigChannel+0x100>)
 8006216:	2180      	movs	r1, #128	; 0x80
 8006218:	0409      	lsls	r1, r1, #16
 800621a:	430a      	orrs	r2, r1
 800621c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800621e:	200a      	movs	r0, #10
 8006220:	f000 f94a 	bl	80064b8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	4013      	ands	r3, r2
 800622e:	d02b      	beq.n	8006288 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <HAL_ADC_ConfigChannel+0x100>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <HAL_ADC_ConfigChannel+0x100>)
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	03c9      	lsls	r1, r1, #15
 800623a:	430a      	orrs	r2, r1
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e023      	b.n	8006288 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	035b      	lsls	r3, r3, #13
 800624c:	0b5b      	lsrs	r3, r3, #13
 800624e:	43d9      	mvns	r1, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	400a      	ands	r2, r1
 8006256:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	02db      	lsls	r3, r3, #11
 8006260:	4013      	ands	r3, r2
 8006262:	d005      	beq.n	8006270 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006264:	4b0e      	ldr	r3, [pc, #56]	; (80062a0 <HAL_ADC_ConfigChannel+0x100>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <HAL_ADC_ConfigChannel+0x100>)
 800626a:	490e      	ldr	r1, [pc, #56]	; (80062a4 <HAL_ADC_ConfigChannel+0x104>)
 800626c:	400a      	ands	r2, r1
 800626e:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	2380      	movs	r3, #128	; 0x80
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	4013      	ands	r3, r2
 800627a:	d005      	beq.n	8006288 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800627c:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <HAL_ADC_ConfigChannel+0x100>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <HAL_ADC_ConfigChannel+0x100>)
 8006282:	4909      	ldr	r1, [pc, #36]	; (80062a8 <HAL_ADC_ConfigChannel+0x108>)
 8006284:	400a      	ands	r2, r1
 8006286:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2250      	movs	r2, #80	; 0x50
 800628c:	2100      	movs	r1, #0
 800628e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	b002      	add	sp, #8
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	00001001 	.word	0x00001001
 80062a0:	40012708 	.word	0x40012708
 80062a4:	ff7fffff 	.word	0xff7fffff
 80062a8:	ffbfffff 	.word	0xffbfffff

080062ac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2203      	movs	r2, #3
 80062c0:	4013      	ands	r3, r2
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d108      	bne.n	80062d8 <ADC_Enable+0x2c>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2201      	movs	r2, #1
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <ADC_Enable+0x2c>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <ADC_Enable+0x2e>
 80062d8:	2300      	movs	r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d13f      	bne.n	800635e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4a20      	ldr	r2, [pc, #128]	; (8006368 <ADC_Enable+0xbc>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	d00d      	beq.n	8006306 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	2210      	movs	r2, #16
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fa:	2201      	movs	r2, #1
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e02c      	b.n	8006360 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2101      	movs	r1, #1
 8006312:	430a      	orrs	r2, r1
 8006314:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006316:	2001      	movs	r0, #1
 8006318:	f000 f8ce 	bl	80064b8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800631c:	f7fe f9d1 	bl	80046c2 <HAL_GetTick>
 8006320:	0003      	movs	r3, r0
 8006322:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006324:	e014      	b.n	8006350 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006326:	f7fe f9cc 	bl	80046c2 <HAL_GetTick>
 800632a:	0002      	movs	r2, r0
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b0a      	cmp	r3, #10
 8006332:	d90d      	bls.n	8006350 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006338:	2210      	movs	r2, #16
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	2201      	movs	r2, #1
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e007      	b.n	8006360 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2201      	movs	r2, #1
 8006358:	4013      	ands	r3, r2
 800635a:	2b01      	cmp	r3, #1
 800635c:	d1e3      	bne.n	8006326 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	0018      	movs	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	b004      	add	sp, #16
 8006366:	bd80      	pop	{r7, pc}
 8006368:	80000017 	.word	0x80000017

0800636c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2203      	movs	r2, #3
 8006380:	4013      	ands	r3, r2
 8006382:	2b01      	cmp	r3, #1
 8006384:	d108      	bne.n	8006398 <ADC_Disable+0x2c>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2201      	movs	r2, #1
 800638e:	4013      	ands	r3, r2
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <ADC_Disable+0x2c>
 8006394:	2301      	movs	r3, #1
 8006396:	e000      	b.n	800639a <ADC_Disable+0x2e>
 8006398:	2300      	movs	r3, #0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d041      	beq.n	8006422 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2205      	movs	r2, #5
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d110      	bne.n	80063ce <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2102      	movs	r1, #2
 80063b8:	430a      	orrs	r2, r1
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2203      	movs	r2, #3
 80063c2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80063c4:	f7fe f97d 	bl	80046c2 <HAL_GetTick>
 80063c8:	0003      	movs	r3, r0
 80063ca:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80063cc:	e022      	b.n	8006414 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	2210      	movs	r2, #16
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063de:	2201      	movs	r2, #1
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e01c      	b.n	8006424 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80063ea:	f7fe f96a 	bl	80046c2 <HAL_GetTick>
 80063ee:	0002      	movs	r2, r0
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b0a      	cmp	r3, #10
 80063f6:	d90d      	bls.n	8006414 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fc:	2210      	movs	r2, #16
 80063fe:	431a      	orrs	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006408:	2201      	movs	r2, #1
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e007      	b.n	8006424 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2201      	movs	r2, #1
 800641c:	4013      	ands	r3, r2
 800641e:	2b01      	cmp	r3, #1
 8006420:	d0e3      	beq.n	80063ea <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	0018      	movs	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	b004      	add	sp, #16
 800642a:	bd80      	pop	{r7, pc}

0800642c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2204      	movs	r2, #4
 8006440:	4013      	ands	r3, r2
 8006442:	d034      	beq.n	80064ae <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2204      	movs	r2, #4
 800644c:	4013      	ands	r3, r2
 800644e:	2b04      	cmp	r3, #4
 8006450:	d10d      	bne.n	800646e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2202      	movs	r2, #2
 800645a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800645c:	d107      	bne.n	800646e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2110      	movs	r1, #16
 800646a:	430a      	orrs	r2, r1
 800646c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800646e:	f7fe f928 	bl	80046c2 <HAL_GetTick>
 8006472:	0003      	movs	r3, r0
 8006474:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006476:	e014      	b.n	80064a2 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006478:	f7fe f923 	bl	80046c2 <HAL_GetTick>
 800647c:	0002      	movs	r2, r0
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b0a      	cmp	r3, #10
 8006484:	d90d      	bls.n	80064a2 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648a:	2210      	movs	r2, #16
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006496:	2201      	movs	r2, #1
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e006      	b.n	80064b0 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2204      	movs	r2, #4
 80064aa:	4013      	ands	r3, r2
 80064ac:	d1e4      	bne.n	8006478 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b004      	add	sp, #16
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <ADC_DelayMicroSecond+0x38>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	490b      	ldr	r1, [pc, #44]	; (80064f4 <ADC_DelayMicroSecond+0x3c>)
 80064c6:	0018      	movs	r0, r3
 80064c8:	f7f9 fe26 	bl	8000118 <__udivsi3>
 80064cc:	0003      	movs	r3, r0
 80064ce:	001a      	movs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4353      	muls	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80064d6:	e002      	b.n	80064de <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3b01      	subs	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1f9      	bne.n	80064d8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80064e4:	46c0      	nop			; (mov r8, r8)
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b004      	add	sp, #16
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	20000070 	.word	0x20000070
 80064f4:	000f4240 	.word	0x000f4240

080064f8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006502:	2317      	movs	r3, #23
 8006504:	18fb      	adds	r3, r7, r3
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2250      	movs	r2, #80	; 0x50
 8006516:	5c9b      	ldrb	r3, [r3, r2]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_ADCEx_Calibration_Start+0x28>
 800651c:	2302      	movs	r3, #2
 800651e:	e07a      	b.n	8006616 <HAL_ADCEx_Calibration_Start+0x11e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2250      	movs	r2, #80	; 0x50
 8006524:	2101      	movs	r1, #1
 8006526:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2203      	movs	r2, #3
 8006530:	4013      	ands	r3, r2
 8006532:	2b01      	cmp	r3, #1
 8006534:	d108      	bne.n	8006548 <HAL_ADCEx_Calibration_Start+0x50>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2201      	movs	r2, #1
 800653e:	4013      	ands	r3, r2
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_ADCEx_Calibration_Start+0x50>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <HAL_ADCEx_Calibration_Start+0x52>
 8006548:	2300      	movs	r3, #0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d152      	bne.n	80065f4 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006552:	4a33      	ldr	r2, [pc, #204]	; (8006620 <HAL_ADCEx_Calibration_Start+0x128>)
 8006554:	4013      	ands	r3, r2
 8006556:	2202      	movs	r2, #2
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2203      	movs	r2, #3
 8006566:	4013      	ands	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2103      	movs	r1, #3
 8006576:	438a      	bics	r2, r1
 8006578:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2180      	movs	r1, #128	; 0x80
 8006586:	0609      	lsls	r1, r1, #24
 8006588:	430a      	orrs	r2, r1
 800658a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800658c:	f7fe f899 	bl	80046c2 <HAL_GetTick>
 8006590:	0003      	movs	r3, r0
 8006592:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006594:	e014      	b.n	80065c0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006596:	f7fe f894 	bl	80046c2 <HAL_GetTick>
 800659a:	0002      	movs	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b0a      	cmp	r3, #10
 80065a2:	d90d      	bls.n	80065c0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a8:	2212      	movs	r2, #18
 80065aa:	4393      	bics	r3, r2
 80065ac:	2210      	movs	r2, #16
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2250      	movs	r2, #80	; 0x50
 80065b8:	2100      	movs	r1, #0
 80065ba:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e02a      	b.n	8006616 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	0fdb      	lsrs	r3, r3, #31
 80065c8:	07da      	lsls	r2, r3, #31
 80065ca:	2380      	movs	r3, #128	; 0x80
 80065cc:	061b      	lsls	r3, r3, #24
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d0e1      	beq.n	8006596 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68d9      	ldr	r1, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	430a      	orrs	r2, r1
 80065e0:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e6:	2203      	movs	r2, #3
 80065e8:	4393      	bics	r3, r2
 80065ea:	2201      	movs	r2, #1
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
 80065f2:	e009      	b.n	8006608 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f8:	2220      	movs	r2, #32
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8006600:	2317      	movs	r3, #23
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	2201      	movs	r2, #1
 8006606:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2250      	movs	r2, #80	; 0x50
 800660c:	2100      	movs	r1, #0
 800660e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006610:	2317      	movs	r3, #23
 8006612:	18fb      	adds	r3, r7, r3
 8006614:	781b      	ldrb	r3, [r3, #0]
}
 8006616:	0018      	movs	r0, r3
 8006618:	46bd      	mov	sp, r7
 800661a:	b006      	add	sp, #24
 800661c:	bd80      	pop	{r7, pc}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	fffffefd 	.word	0xfffffefd

08006624 <__NVIC_EnableIRQ>:
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	0002      	movs	r2, r0
 800662c:	1dfb      	adds	r3, r7, #7
 800662e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006630:	1dfb      	adds	r3, r7, #7
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b7f      	cmp	r3, #127	; 0x7f
 8006636:	d809      	bhi.n	800664c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006638:	1dfb      	adds	r3, r7, #7
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	001a      	movs	r2, r3
 800663e:	231f      	movs	r3, #31
 8006640:	401a      	ands	r2, r3
 8006642:	4b04      	ldr	r3, [pc, #16]	; (8006654 <__NVIC_EnableIRQ+0x30>)
 8006644:	2101      	movs	r1, #1
 8006646:	4091      	lsls	r1, r2
 8006648:	000a      	movs	r2, r1
 800664a:	601a      	str	r2, [r3, #0]
}
 800664c:	46c0      	nop			; (mov r8, r8)
 800664e:	46bd      	mov	sp, r7
 8006650:	b002      	add	sp, #8
 8006652:	bd80      	pop	{r7, pc}
 8006654:	e000e100 	.word	0xe000e100

08006658 <__NVIC_DisableIRQ>:
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	0002      	movs	r2, r0
 8006660:	1dfb      	adds	r3, r7, #7
 8006662:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006664:	1dfb      	adds	r3, r7, #7
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b7f      	cmp	r3, #127	; 0x7f
 800666a:	d810      	bhi.n	800668e <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800666c:	1dfb      	adds	r3, r7, #7
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	001a      	movs	r2, r3
 8006672:	231f      	movs	r3, #31
 8006674:	4013      	ands	r3, r2
 8006676:	4908      	ldr	r1, [pc, #32]	; (8006698 <__NVIC_DisableIRQ+0x40>)
 8006678:	2201      	movs	r2, #1
 800667a:	409a      	lsls	r2, r3
 800667c:	0013      	movs	r3, r2
 800667e:	2280      	movs	r2, #128	; 0x80
 8006680:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006682:	f3bf 8f4f 	dsb	sy
}
 8006686:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8006688:	f3bf 8f6f 	isb	sy
}
 800668c:	46c0      	nop			; (mov r8, r8)
}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	46bd      	mov	sp, r7
 8006692:	b002      	add	sp, #8
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	e000e100 	.word	0xe000e100

0800669c <__NVIC_SetPriority>:
{
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	0002      	movs	r2, r0
 80066a4:	6039      	str	r1, [r7, #0]
 80066a6:	1dfb      	adds	r3, r7, #7
 80066a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80066aa:	1dfb      	adds	r3, r7, #7
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b7f      	cmp	r3, #127	; 0x7f
 80066b0:	d828      	bhi.n	8006704 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066b2:	4a2f      	ldr	r2, [pc, #188]	; (8006770 <__NVIC_SetPriority+0xd4>)
 80066b4:	1dfb      	adds	r3, r7, #7
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	b25b      	sxtb	r3, r3
 80066ba:	089b      	lsrs	r3, r3, #2
 80066bc:	33c0      	adds	r3, #192	; 0xc0
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	589b      	ldr	r3, [r3, r2]
 80066c2:	1dfa      	adds	r2, r7, #7
 80066c4:	7812      	ldrb	r2, [r2, #0]
 80066c6:	0011      	movs	r1, r2
 80066c8:	2203      	movs	r2, #3
 80066ca:	400a      	ands	r2, r1
 80066cc:	00d2      	lsls	r2, r2, #3
 80066ce:	21ff      	movs	r1, #255	; 0xff
 80066d0:	4091      	lsls	r1, r2
 80066d2:	000a      	movs	r2, r1
 80066d4:	43d2      	mvns	r2, r2
 80066d6:	401a      	ands	r2, r3
 80066d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	019b      	lsls	r3, r3, #6
 80066de:	22ff      	movs	r2, #255	; 0xff
 80066e0:	401a      	ands	r2, r3
 80066e2:	1dfb      	adds	r3, r7, #7
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	0018      	movs	r0, r3
 80066e8:	2303      	movs	r3, #3
 80066ea:	4003      	ands	r3, r0
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066f0:	481f      	ldr	r0, [pc, #124]	; (8006770 <__NVIC_SetPriority+0xd4>)
 80066f2:	1dfb      	adds	r3, r7, #7
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	b25b      	sxtb	r3, r3
 80066f8:	089b      	lsrs	r3, r3, #2
 80066fa:	430a      	orrs	r2, r1
 80066fc:	33c0      	adds	r3, #192	; 0xc0
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	501a      	str	r2, [r3, r0]
}
 8006702:	e031      	b.n	8006768 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006704:	4a1b      	ldr	r2, [pc, #108]	; (8006774 <__NVIC_SetPriority+0xd8>)
 8006706:	1dfb      	adds	r3, r7, #7
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	0019      	movs	r1, r3
 800670c:	230f      	movs	r3, #15
 800670e:	400b      	ands	r3, r1
 8006710:	3b08      	subs	r3, #8
 8006712:	089b      	lsrs	r3, r3, #2
 8006714:	3306      	adds	r3, #6
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	18d3      	adds	r3, r2, r3
 800671a:	3304      	adds	r3, #4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	1dfa      	adds	r2, r7, #7
 8006720:	7812      	ldrb	r2, [r2, #0]
 8006722:	0011      	movs	r1, r2
 8006724:	2203      	movs	r2, #3
 8006726:	400a      	ands	r2, r1
 8006728:	00d2      	lsls	r2, r2, #3
 800672a:	21ff      	movs	r1, #255	; 0xff
 800672c:	4091      	lsls	r1, r2
 800672e:	000a      	movs	r2, r1
 8006730:	43d2      	mvns	r2, r2
 8006732:	401a      	ands	r2, r3
 8006734:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	019b      	lsls	r3, r3, #6
 800673a:	22ff      	movs	r2, #255	; 0xff
 800673c:	401a      	ands	r2, r3
 800673e:	1dfb      	adds	r3, r7, #7
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	0018      	movs	r0, r3
 8006744:	2303      	movs	r3, #3
 8006746:	4003      	ands	r3, r0
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800674c:	4809      	ldr	r0, [pc, #36]	; (8006774 <__NVIC_SetPriority+0xd8>)
 800674e:	1dfb      	adds	r3, r7, #7
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	001c      	movs	r4, r3
 8006754:	230f      	movs	r3, #15
 8006756:	4023      	ands	r3, r4
 8006758:	3b08      	subs	r3, #8
 800675a:	089b      	lsrs	r3, r3, #2
 800675c:	430a      	orrs	r2, r1
 800675e:	3306      	adds	r3, #6
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	18c3      	adds	r3, r0, r3
 8006764:	3304      	adds	r3, #4
 8006766:	601a      	str	r2, [r3, #0]
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b003      	add	sp, #12
 800676e:	bd90      	pop	{r4, r7, pc}
 8006770:	e000e100 	.word	0xe000e100
 8006774:	e000ed00 	.word	0xe000ed00

08006778 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	210f      	movs	r1, #15
 8006784:	187b      	adds	r3, r7, r1
 8006786:	1c02      	adds	r2, r0, #0
 8006788:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	187b      	adds	r3, r7, r1
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	b25b      	sxtb	r3, r3
 8006792:	0011      	movs	r1, r2
 8006794:	0018      	movs	r0, r3
 8006796:	f7ff ff81 	bl	800669c <__NVIC_SetPriority>
}
 800679a:	46c0      	nop			; (mov r8, r8)
 800679c:	46bd      	mov	sp, r7
 800679e:	b004      	add	sp, #16
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	0002      	movs	r2, r0
 80067aa:	1dfb      	adds	r3, r7, #7
 80067ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067ae:	1dfb      	adds	r3, r7, #7
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	b25b      	sxtb	r3, r3
 80067b4:	0018      	movs	r0, r3
 80067b6:	f7ff ff35 	bl	8006624 <__NVIC_EnableIRQ>
}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	46bd      	mov	sp, r7
 80067be:	b002      	add	sp, #8
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	0002      	movs	r2, r0
 80067ca:	1dfb      	adds	r3, r7, #7
 80067cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80067ce:	1dfb      	adds	r3, r7, #7
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	b25b      	sxtb	r3, r3
 80067d4:	0018      	movs	r0, r3
 80067d6:	f7ff ff3f 	bl	8006658 <__NVIC_DisableIRQ>
}
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	46bd      	mov	sp, r7
 80067de:	b002      	add	sp, #8
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e061      	b.n	80068ba <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a32      	ldr	r2, [pc, #200]	; (80068c4 <HAL_DMA_Init+0xe0>)
 80067fc:	4694      	mov	ip, r2
 80067fe:	4463      	add	r3, ip
 8006800:	2114      	movs	r1, #20
 8006802:	0018      	movs	r0, r3
 8006804:	f7f9 fc88 	bl	8000118 <__udivsi3>
 8006808:	0003      	movs	r3, r0
 800680a:	009a      	lsls	r2, r3, #2
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a2d      	ldr	r2, [pc, #180]	; (80068c8 <HAL_DMA_Init+0xe4>)
 8006814:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2225      	movs	r2, #37	; 0x25
 800681a:	2102      	movs	r1, #2
 800681c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4a28      	ldr	r2, [pc, #160]	; (80068cc <HAL_DMA_Init+0xe8>)
 800682a:	4013      	ands	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006836:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800684e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	01db      	lsls	r3, r3, #7
 800686c:	429a      	cmp	r2, r3
 800686e:	d018      	beq.n	80068a2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006870:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <HAL_DMA_Init+0xec>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006878:	211c      	movs	r1, #28
 800687a:	400b      	ands	r3, r1
 800687c:	210f      	movs	r1, #15
 800687e:	4099      	lsls	r1, r3
 8006880:	000b      	movs	r3, r1
 8006882:	43d9      	mvns	r1, r3
 8006884:	4b12      	ldr	r3, [pc, #72]	; (80068d0 <HAL_DMA_Init+0xec>)
 8006886:	400a      	ands	r2, r1
 8006888:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800688a:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <HAL_DMA_Init+0xec>)
 800688c:	6819      	ldr	r1, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	201c      	movs	r0, #28
 8006898:	4003      	ands	r3, r0
 800689a:	409a      	lsls	r2, r3
 800689c:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <HAL_DMA_Init+0xec>)
 800689e:	430a      	orrs	r2, r1
 80068a0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2225      	movs	r2, #37	; 0x25
 80068ac:	2101      	movs	r1, #1
 80068ae:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2224      	movs	r2, #36	; 0x24
 80068b4:	2100      	movs	r1, #0
 80068b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	0018      	movs	r0, r3
 80068bc:	46bd      	mov	sp, r7
 80068be:	b004      	add	sp, #16
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	bffdfff8 	.word	0xbffdfff8
 80068c8:	40020000 	.word	0x40020000
 80068cc:	ffff800f 	.word	0xffff800f
 80068d0:	400200a8 	.word	0x400200a8

080068d4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e04a      	b.n	800697c <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2101      	movs	r1, #1
 80068f2:	438a      	bics	r2, r1
 80068f4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a22      	ldr	r2, [pc, #136]	; (8006984 <HAL_DMA_DeInit+0xb0>)
 80068fc:	4694      	mov	ip, r2
 80068fe:	4463      	add	r3, ip
 8006900:	2114      	movs	r1, #20
 8006902:	0018      	movs	r0, r3
 8006904:	f7f9 fc08 	bl	8000118 <__udivsi3>
 8006908:	0003      	movs	r3, r0
 800690a:	009a      	lsls	r2, r3, #2
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <HAL_DMA_DeInit+0xb4>)
 8006914:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006922:	221c      	movs	r2, #28
 8006924:	401a      	ands	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	2101      	movs	r1, #1
 800692c:	4091      	lsls	r1, r2
 800692e:	000a      	movs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006932:	4b16      	ldr	r3, [pc, #88]	; (800698c <HAL_DMA_DeInit+0xb8>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693a:	211c      	movs	r1, #28
 800693c:	400b      	ands	r3, r1
 800693e:	210f      	movs	r1, #15
 8006940:	4099      	lsls	r1, r3
 8006942:	000b      	movs	r3, r1
 8006944:	43d9      	mvns	r1, r3
 8006946:	4b11      	ldr	r3, [pc, #68]	; (800698c <HAL_DMA_DeInit+0xb8>)
 8006948:	400a      	ands	r2, r1
 800694a:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2225      	movs	r2, #37	; 0x25
 800696e:	2100      	movs	r1, #0
 8006970:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2224      	movs	r2, #36	; 0x24
 8006976:	2100      	movs	r1, #0
 8006978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	0018      	movs	r0, r3
 800697e:	46bd      	mov	sp, r7
 8006980:	b002      	add	sp, #8
 8006982:	bd80      	pop	{r7, pc}
 8006984:	bffdfff8 	.word	0xbffdfff8
 8006988:	40020000 	.word	0x40020000
 800698c:	400200a8 	.word	0x400200a8

08006990 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800699e:	2317      	movs	r3, #23
 80069a0:	18fb      	adds	r3, r7, r3
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2224      	movs	r2, #36	; 0x24
 80069aa:	5c9b      	ldrb	r3, [r3, r2]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_DMA_Start_IT+0x24>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e04f      	b.n	8006a54 <HAL_DMA_Start_IT+0xc4>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2224      	movs	r2, #36	; 0x24
 80069b8:	2101      	movs	r1, #1
 80069ba:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2225      	movs	r2, #37	; 0x25
 80069c0:	5c9b      	ldrb	r3, [r3, r2]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d13a      	bne.n	8006a3e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2225      	movs	r2, #37	; 0x25
 80069cc:	2102      	movs	r1, #2
 80069ce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2101      	movs	r1, #1
 80069e2:	438a      	bics	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f96a 	bl	8006cc6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	210e      	movs	r1, #14
 8006a06:	430a      	orrs	r2, r1
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	e00f      	b.n	8006a2c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2104      	movs	r1, #4
 8006a18:	438a      	bics	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	210a      	movs	r1, #10
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2101      	movs	r1, #1
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	e007      	b.n	8006a4e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2224      	movs	r2, #36	; 0x24
 8006a42:	2100      	movs	r1, #0
 8006a44:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a46:	2317      	movs	r3, #23
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8006a4e:	2317      	movs	r3, #23
 8006a50:	18fb      	adds	r3, r7, r3
 8006a52:	781b      	ldrb	r3, [r3, #0]
}
 8006a54:	0018      	movs	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b006      	add	sp, #24
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a64:	230f      	movs	r3, #15
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	2200      	movs	r2, #0
 8006a6a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2225      	movs	r2, #37	; 0x25
 8006a70:	5c9b      	ldrb	r3, [r3, r2]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d008      	beq.n	8006a8a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2224      	movs	r2, #36	; 0x24
 8006a82:	2100      	movs	r1, #0
 8006a84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e024      	b.n	8006ad4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	210e      	movs	r1, #14
 8006a96:	438a      	bics	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	438a      	bics	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aae:	221c      	movs	r2, #28
 8006ab0:	401a      	ands	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	4091      	lsls	r1, r2
 8006aba:	000a      	movs	r2, r1
 8006abc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2225      	movs	r2, #37	; 0x25
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2224      	movs	r2, #36	; 0x24
 8006aca:	2100      	movs	r1, #0
 8006acc:	5499      	strb	r1, [r3, r2]

    return status;
 8006ace:	230f      	movs	r3, #15
 8006ad0:	18fb      	adds	r3, r7, r3
 8006ad2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b004      	add	sp, #16
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ae4:	210f      	movs	r1, #15
 8006ae6:	187b      	adds	r3, r7, r1
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2225      	movs	r2, #37	; 0x25
 8006af0:	5c9b      	ldrb	r3, [r3, r2]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d006      	beq.n	8006b06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2204      	movs	r2, #4
 8006afc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006afe:	187b      	adds	r3, r7, r1
 8006b00:	2201      	movs	r2, #1
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	e02a      	b.n	8006b5c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	210e      	movs	r1, #14
 8006b12:	438a      	bics	r2, r1
 8006b14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2101      	movs	r1, #1
 8006b22:	438a      	bics	r2, r1
 8006b24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2a:	221c      	movs	r2, #28
 8006b2c:	401a      	ands	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	2101      	movs	r1, #1
 8006b34:	4091      	lsls	r1, r2
 8006b36:	000a      	movs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2225      	movs	r2, #37	; 0x25
 8006b3e:	2101      	movs	r1, #1
 8006b40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2224      	movs	r2, #36	; 0x24
 8006b46:	2100      	movs	r1, #0
 8006b48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	0010      	movs	r0, r2
 8006b5a:	4798      	blx	r3
    }
  }
  return status;
 8006b5c:	230f      	movs	r3, #15
 8006b5e:	18fb      	adds	r3, r7, r3
 8006b60:	781b      	ldrb	r3, [r3, #0]
}
 8006b62:	0018      	movs	r0, r3
 8006b64:	46bd      	mov	sp, r7
 8006b66:	b004      	add	sp, #16
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b86:	221c      	movs	r2, #28
 8006b88:	4013      	ands	r3, r2
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	409a      	lsls	r2, r3
 8006b8e:	0013      	movs	r3, r2
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4013      	ands	r3, r2
 8006b94:	d026      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x7a>
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2204      	movs	r2, #4
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d022      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	d107      	bne.n	8006bba <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2104      	movs	r1, #4
 8006bb6:	438a      	bics	r2, r1
 8006bb8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbe:	221c      	movs	r2, #28
 8006bc0:	401a      	ands	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	4091      	lsls	r1, r2
 8006bca:	000a      	movs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d100      	bne.n	8006bd8 <HAL_DMA_IRQHandler+0x6e>
 8006bd6:	e071      	b.n	8006cbc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	0010      	movs	r0, r2
 8006be0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8006be2:	e06b      	b.n	8006cbc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be8:	221c      	movs	r2, #28
 8006bea:	4013      	ands	r3, r2
 8006bec:	2202      	movs	r2, #2
 8006bee:	409a      	lsls	r2, r3
 8006bf0:	0013      	movs	r3, r2
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	d02d      	beq.n	8006c54 <HAL_DMA_IRQHandler+0xea>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	d029      	beq.n	8006c54 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2220      	movs	r2, #32
 8006c08:	4013      	ands	r3, r2
 8006c0a:	d10b      	bne.n	8006c24 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	210a      	movs	r1, #10
 8006c18:	438a      	bics	r2, r1
 8006c1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2225      	movs	r2, #37	; 0x25
 8006c20:	2101      	movs	r1, #1
 8006c22:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c28:	221c      	movs	r2, #28
 8006c2a:	401a      	ands	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	2102      	movs	r1, #2
 8006c32:	4091      	lsls	r1, r2
 8006c34:	000a      	movs	r2, r1
 8006c36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	; 0x24
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d039      	beq.n	8006cbc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	0010      	movs	r0, r2
 8006c50:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006c52:	e033      	b.n	8006cbc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c58:	221c      	movs	r2, #28
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	0013      	movs	r3, r2
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4013      	ands	r3, r2
 8006c66:	d02a      	beq.n	8006cbe <HAL_DMA_IRQHandler+0x154>
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d026      	beq.n	8006cbe <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	210e      	movs	r1, #14
 8006c7c:	438a      	bics	r2, r1
 8006c7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c84:	221c      	movs	r2, #28
 8006c86:	401a      	ands	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	4091      	lsls	r1, r2
 8006c90:	000a      	movs	r2, r1
 8006c92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2225      	movs	r2, #37	; 0x25
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2224      	movs	r2, #36	; 0x24
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	0010      	movs	r0, r2
 8006cba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	46c0      	nop			; (mov r8, r8)
}
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b004      	add	sp, #16
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
 8006cd2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd8:	221c      	movs	r2, #28
 8006cda:	401a      	ands	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	4091      	lsls	r1, r2
 8006ce4:	000a      	movs	r2, r1
 8006ce6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b10      	cmp	r3, #16
 8006cf6:	d108      	bne.n	8006d0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006d08:	e007      	b.n	8006d1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	60da      	str	r2, [r3, #12]
}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b004      	add	sp, #16
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b086      	sub	sp, #24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	200b      	movs	r0, #11
 8006d2e:	183b      	adds	r3, r7, r0
 8006d30:	1c0a      	adds	r2, r1, #0
 8006d32:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d34:	2317      	movs	r3, #23
 8006d36:	18fb      	adds	r3, r7, r3
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8006d3c:	183b      	adds	r3, r7, r0
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d103      	bne.n	8006d4c <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	605a      	str	r2, [r3, #4]
      break;
 8006d4a:	e004      	b.n	8006d56 <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 8006d4c:	2317      	movs	r3, #23
 8006d4e:	18fb      	adds	r3, r7, r3
 8006d50:	2201      	movs	r2, #1
 8006d52:	701a      	strb	r2, [r3, #0]
      break;
 8006d54:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8006d56:	2317      	movs	r3, #23
 8006d58:	18fb      	adds	r3, r7, r3
 8006d5a:	781b      	ldrb	r3, [r3, #0]
}
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b006      	add	sp, #24
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e003      	b.n	8006d80 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
  }
}
 8006d80:	0018      	movs	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b002      	add	sp, #8
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	221f      	movs	r2, #31
 8006d96:	4013      	ands	r3, r2
 8006d98:	2201      	movs	r2, #1
 8006d9a:	409a      	lsls	r2, r3
 8006d9c:	0013      	movs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8006da0:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <HAL_EXTI_IRQHandler+0x44>)
 8006da2:	695a      	ldr	r2, [r3, #20]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4013      	ands	r3, r2
 8006da8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d009      	beq.n	8006dc4 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <HAL_EXTI_IRQHandler+0x44>)
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	4798      	blx	r3
    }
  }
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b004      	add	sp, #16
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40010400 	.word	0x40010400

08006dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006de6:	e155      	b.n	8007094 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2101      	movs	r1, #1
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4091      	lsls	r1, r2
 8006df2:	000a      	movs	r2, r1
 8006df4:	4013      	ands	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d100      	bne.n	8006e00 <HAL_GPIO_Init+0x30>
 8006dfe:	e146      	b.n	800708e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d00b      	beq.n	8006e20 <HAL_GPIO_Init+0x50>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d007      	beq.n	8006e20 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e14:	2b11      	cmp	r3, #17
 8006e16:	d003      	beq.n	8006e20 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b12      	cmp	r3, #18
 8006e1e:	d130      	bne.n	8006e82 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	409a      	lsls	r2, r3
 8006e2e:	0013      	movs	r3, r2
 8006e30:	43da      	mvns	r2, r3
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	4013      	ands	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	409a      	lsls	r2, r3
 8006e42:	0013      	movs	r3, r2
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e56:	2201      	movs	r2, #1
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	409a      	lsls	r2, r3
 8006e5c:	0013      	movs	r3, r2
 8006e5e:	43da      	mvns	r2, r3
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	4013      	ands	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	091b      	lsrs	r3, r3, #4
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	401a      	ands	r2, r3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	409a      	lsls	r2, r3
 8006e74:	0013      	movs	r3, r2
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	0013      	movs	r3, r2
 8006e92:	43da      	mvns	r2, r3
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4013      	ands	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	409a      	lsls	r2, r3
 8006ea4:	0013      	movs	r3, r2
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d003      	beq.n	8006ec2 <HAL_GPIO_Init+0xf2>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b12      	cmp	r3, #18
 8006ec0:	d123      	bne.n	8006f0a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	08da      	lsrs	r2, r3, #3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3208      	adds	r2, #8
 8006eca:	0092      	lsls	r2, r2, #2
 8006ecc:	58d3      	ldr	r3, [r2, r3]
 8006ece:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2207      	movs	r2, #7
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	220f      	movs	r2, #15
 8006eda:	409a      	lsls	r2, r3
 8006edc:	0013      	movs	r3, r2
 8006ede:	43da      	mvns	r2, r3
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	691a      	ldr	r2, [r3, #16]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2107      	movs	r1, #7
 8006eee:	400b      	ands	r3, r1
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	409a      	lsls	r2, r3
 8006ef4:	0013      	movs	r3, r2
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	08da      	lsrs	r2, r3, #3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3208      	adds	r2, #8
 8006f04:	0092      	lsls	r2, r2, #2
 8006f06:	6939      	ldr	r1, [r7, #16]
 8006f08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	2203      	movs	r2, #3
 8006f16:	409a      	lsls	r2, r3
 8006f18:	0013      	movs	r3, r2
 8006f1a:	43da      	mvns	r2, r3
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2203      	movs	r2, #3
 8006f28:	401a      	ands	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	0013      	movs	r3, r2
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	2380      	movs	r3, #128	; 0x80
 8006f44:	055b      	lsls	r3, r3, #21
 8006f46:	4013      	ands	r3, r2
 8006f48:	d100      	bne.n	8006f4c <HAL_GPIO_Init+0x17c>
 8006f4a:	e0a0      	b.n	800708e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f4c:	4b57      	ldr	r3, [pc, #348]	; (80070ac <HAL_GPIO_Init+0x2dc>)
 8006f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f50:	4b56      	ldr	r3, [pc, #344]	; (80070ac <HAL_GPIO_Init+0x2dc>)
 8006f52:	2101      	movs	r1, #1
 8006f54:	430a      	orrs	r2, r1
 8006f56:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f58:	4a55      	ldr	r2, [pc, #340]	; (80070b0 <HAL_GPIO_Init+0x2e0>)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	089b      	lsrs	r3, r3, #2
 8006f5e:	3302      	adds	r3, #2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	589b      	ldr	r3, [r3, r2]
 8006f64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2203      	movs	r2, #3
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	220f      	movs	r2, #15
 8006f70:	409a      	lsls	r2, r3
 8006f72:	0013      	movs	r3, r2
 8006f74:	43da      	mvns	r2, r3
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	23a0      	movs	r3, #160	; 0xa0
 8006f80:	05db      	lsls	r3, r3, #23
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d01f      	beq.n	8006fc6 <HAL_GPIO_Init+0x1f6>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a4a      	ldr	r2, [pc, #296]	; (80070b4 <HAL_GPIO_Init+0x2e4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d019      	beq.n	8006fc2 <HAL_GPIO_Init+0x1f2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a49      	ldr	r2, [pc, #292]	; (80070b8 <HAL_GPIO_Init+0x2e8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d013      	beq.n	8006fbe <HAL_GPIO_Init+0x1ee>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a48      	ldr	r2, [pc, #288]	; (80070bc <HAL_GPIO_Init+0x2ec>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00d      	beq.n	8006fba <HAL_GPIO_Init+0x1ea>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a47      	ldr	r2, [pc, #284]	; (80070c0 <HAL_GPIO_Init+0x2f0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d007      	beq.n	8006fb6 <HAL_GPIO_Init+0x1e6>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a46      	ldr	r2, [pc, #280]	; (80070c4 <HAL_GPIO_Init+0x2f4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d101      	bne.n	8006fb2 <HAL_GPIO_Init+0x1e2>
 8006fae:	2305      	movs	r3, #5
 8006fb0:	e00a      	b.n	8006fc8 <HAL_GPIO_Init+0x1f8>
 8006fb2:	2306      	movs	r3, #6
 8006fb4:	e008      	b.n	8006fc8 <HAL_GPIO_Init+0x1f8>
 8006fb6:	2304      	movs	r3, #4
 8006fb8:	e006      	b.n	8006fc8 <HAL_GPIO_Init+0x1f8>
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e004      	b.n	8006fc8 <HAL_GPIO_Init+0x1f8>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e002      	b.n	8006fc8 <HAL_GPIO_Init+0x1f8>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <HAL_GPIO_Init+0x1f8>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	2103      	movs	r1, #3
 8006fcc:	400a      	ands	r2, r1
 8006fce:	0092      	lsls	r2, r2, #2
 8006fd0:	4093      	lsls	r3, r2
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fd8:	4935      	ldr	r1, [pc, #212]	; (80070b0 <HAL_GPIO_Init+0x2e0>)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	089b      	lsrs	r3, r3, #2
 8006fde:	3302      	adds	r3, #2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006fe6:	4b38      	ldr	r3, [pc, #224]	; (80070c8 <HAL_GPIO_Init+0x2f8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	43da      	mvns	r2, r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	2380      	movs	r3, #128	; 0x80
 8006ffc:	025b      	lsls	r3, r3, #9
 8006ffe:	4013      	ands	r3, r2
 8007000:	d003      	beq.n	800700a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800700a:	4b2f      	ldr	r3, [pc, #188]	; (80070c8 <HAL_GPIO_Init+0x2f8>)
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007010:	4b2d      	ldr	r3, [pc, #180]	; (80070c8 <HAL_GPIO_Init+0x2f8>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	43da      	mvns	r2, r3
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4013      	ands	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	4013      	ands	r3, r2
 800702a:	d003      	beq.n	8007034 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007034:	4b24      	ldr	r3, [pc, #144]	; (80070c8 <HAL_GPIO_Init+0x2f8>)
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800703a:	4b23      	ldr	r3, [pc, #140]	; (80070c8 <HAL_GPIO_Init+0x2f8>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	43da      	mvns	r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4013      	ands	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	2380      	movs	r3, #128	; 0x80
 8007050:	035b      	lsls	r3, r3, #13
 8007052:	4013      	ands	r3, r2
 8007054:	d003      	beq.n	800705e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800705e:	4b1a      	ldr	r3, [pc, #104]	; (80070c8 <HAL_GPIO_Init+0x2f8>)
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007064:	4b18      	ldr	r3, [pc, #96]	; (80070c8 <HAL_GPIO_Init+0x2f8>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	43da      	mvns	r2, r3
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	4013      	ands	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	2380      	movs	r3, #128	; 0x80
 800707a:	039b      	lsls	r3, r3, #14
 800707c:	4013      	ands	r3, r2
 800707e:	d003      	beq.n	8007088 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007088:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <HAL_GPIO_Init+0x2f8>)
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	3301      	adds	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	40da      	lsrs	r2, r3
 800709c:	1e13      	subs	r3, r2, #0
 800709e:	d000      	beq.n	80070a2 <HAL_GPIO_Init+0x2d2>
 80070a0:	e6a2      	b.n	8006de8 <HAL_GPIO_Init+0x18>
  }
}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b006      	add	sp, #24
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40021000 	.word	0x40021000
 80070b0:	40010000 	.word	0x40010000
 80070b4:	50000400 	.word	0x50000400
 80070b8:	50000800 	.word	0x50000800
 80070bc:	50000c00 	.word	0x50000c00
 80070c0:	50001000 	.word	0x50001000
 80070c4:	50001c00 	.word	0x50001c00
 80070c8:	40010400 	.word	0x40010400

080070cc <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80070e2:	e0bc      	b.n	800725e <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80070e4:	2201      	movs	r2, #1
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	409a      	lsls	r2, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	4013      	ands	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d100      	bne.n	80070f8 <HAL_GPIO_DeInit+0x2c>
 80070f6:	e0af      	b.n	8007258 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80070f8:	4a5e      	ldr	r2, [pc, #376]	; (8007274 <HAL_GPIO_DeInit+0x1a8>)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	089b      	lsrs	r3, r3, #2
 80070fe:	3302      	adds	r3, #2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	589b      	ldr	r3, [r3, r2]
 8007104:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2203      	movs	r2, #3
 800710a:	4013      	ands	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	220f      	movs	r2, #15
 8007110:	409a      	lsls	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4013      	ands	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	23a0      	movs	r3, #160	; 0xa0
 800711c:	05db      	lsls	r3, r3, #23
 800711e:	429a      	cmp	r2, r3
 8007120:	d01f      	beq.n	8007162 <HAL_GPIO_DeInit+0x96>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a54      	ldr	r2, [pc, #336]	; (8007278 <HAL_GPIO_DeInit+0x1ac>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d019      	beq.n	800715e <HAL_GPIO_DeInit+0x92>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a53      	ldr	r2, [pc, #332]	; (800727c <HAL_GPIO_DeInit+0x1b0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d013      	beq.n	800715a <HAL_GPIO_DeInit+0x8e>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a52      	ldr	r2, [pc, #328]	; (8007280 <HAL_GPIO_DeInit+0x1b4>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00d      	beq.n	8007156 <HAL_GPIO_DeInit+0x8a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a51      	ldr	r2, [pc, #324]	; (8007284 <HAL_GPIO_DeInit+0x1b8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d007      	beq.n	8007152 <HAL_GPIO_DeInit+0x86>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a50      	ldr	r2, [pc, #320]	; (8007288 <HAL_GPIO_DeInit+0x1bc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d101      	bne.n	800714e <HAL_GPIO_DeInit+0x82>
 800714a:	2305      	movs	r3, #5
 800714c:	e00a      	b.n	8007164 <HAL_GPIO_DeInit+0x98>
 800714e:	2306      	movs	r3, #6
 8007150:	e008      	b.n	8007164 <HAL_GPIO_DeInit+0x98>
 8007152:	2304      	movs	r3, #4
 8007154:	e006      	b.n	8007164 <HAL_GPIO_DeInit+0x98>
 8007156:	2303      	movs	r3, #3
 8007158:	e004      	b.n	8007164 <HAL_GPIO_DeInit+0x98>
 800715a:	2302      	movs	r3, #2
 800715c:	e002      	b.n	8007164 <HAL_GPIO_DeInit+0x98>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <HAL_GPIO_DeInit+0x98>
 8007162:	2300      	movs	r3, #0
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	2103      	movs	r1, #3
 8007168:	400a      	ands	r2, r1
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	4093      	lsls	r3, r2
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	429a      	cmp	r2, r3
 8007172:	d132      	bne.n	80071da <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007174:	4b45      	ldr	r3, [pc, #276]	; (800728c <HAL_GPIO_DeInit+0x1c0>)
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	43d9      	mvns	r1, r3
 800717c:	4b43      	ldr	r3, [pc, #268]	; (800728c <HAL_GPIO_DeInit+0x1c0>)
 800717e:	400a      	ands	r2, r1
 8007180:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007182:	4b42      	ldr	r3, [pc, #264]	; (800728c <HAL_GPIO_DeInit+0x1c0>)
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	43d9      	mvns	r1, r3
 800718a:	4b40      	ldr	r3, [pc, #256]	; (800728c <HAL_GPIO_DeInit+0x1c0>)
 800718c:	400a      	ands	r2, r1
 800718e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007190:	4b3e      	ldr	r3, [pc, #248]	; (800728c <HAL_GPIO_DeInit+0x1c0>)
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	43d9      	mvns	r1, r3
 8007198:	4b3c      	ldr	r3, [pc, #240]	; (800728c <HAL_GPIO_DeInit+0x1c0>)
 800719a:	400a      	ands	r2, r1
 800719c:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800719e:	4b3b      	ldr	r3, [pc, #236]	; (800728c <HAL_GPIO_DeInit+0x1c0>)
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	43d9      	mvns	r1, r3
 80071a6:	4b39      	ldr	r3, [pc, #228]	; (800728c <HAL_GPIO_DeInit+0x1c0>)
 80071a8:	400a      	ands	r2, r1
 80071aa:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2203      	movs	r2, #3
 80071b0:	4013      	ands	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	220f      	movs	r2, #15
 80071b6:	409a      	lsls	r2, r3
 80071b8:	0013      	movs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80071bc:	4a2d      	ldr	r2, [pc, #180]	; (8007274 <HAL_GPIO_DeInit+0x1a8>)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	089b      	lsrs	r3, r3, #2
 80071c2:	3302      	adds	r3, #2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	589a      	ldr	r2, [r3, r2]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	43d9      	mvns	r1, r3
 80071cc:	4829      	ldr	r0, [pc, #164]	; (8007274 <HAL_GPIO_DeInit+0x1a8>)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	089b      	lsrs	r3, r3, #2
 80071d2:	400a      	ands	r2, r1
 80071d4:	3302      	adds	r3, #2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	2103      	movs	r1, #3
 80071e4:	4099      	lsls	r1, r3
 80071e6:	000b      	movs	r3, r1
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	08da      	lsrs	r2, r3, #3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3208      	adds	r2, #8
 80071f6:	0092      	lsls	r2, r2, #2
 80071f8:	58d3      	ldr	r3, [r2, r3]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	2107      	movs	r1, #7
 80071fe:	400a      	ands	r2, r1
 8007200:	0092      	lsls	r2, r2, #2
 8007202:	210f      	movs	r1, #15
 8007204:	4091      	lsls	r1, r2
 8007206:	000a      	movs	r2, r1
 8007208:	43d1      	mvns	r1, r2
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	08d2      	lsrs	r2, r2, #3
 800720e:	4019      	ands	r1, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3208      	adds	r2, #8
 8007214:	0092      	lsls	r2, r2, #2
 8007216:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	0052      	lsls	r2, r2, #1
 8007220:	2103      	movs	r1, #3
 8007222:	4091      	lsls	r1, r2
 8007224:	000a      	movs	r2, r1
 8007226:	43d2      	mvns	r2, r2
 8007228:	401a      	ands	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	2101      	movs	r1, #1
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4091      	lsls	r1, r2
 8007238:	000a      	movs	r2, r1
 800723a:	43d2      	mvns	r2, r2
 800723c:	401a      	ands	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	0052      	lsls	r2, r2, #1
 800724a:	2103      	movs	r1, #3
 800724c:	4091      	lsls	r1, r2
 800724e:	000a      	movs	r2, r1
 8007250:	43d2      	mvns	r2, r2
 8007252:	401a      	ands	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	609a      	str	r2, [r3, #8]
    }
    position++;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	3301      	adds	r3, #1
 800725c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	40da      	lsrs	r2, r3
 8007264:	1e13      	subs	r3, r2, #0
 8007266:	d000      	beq.n	800726a <HAL_GPIO_DeInit+0x19e>
 8007268:	e73c      	b.n	80070e4 <HAL_GPIO_DeInit+0x18>
  }
}
 800726a:	46c0      	nop			; (mov r8, r8)
 800726c:	46c0      	nop			; (mov r8, r8)
 800726e:	46bd      	mov	sp, r7
 8007270:	b006      	add	sp, #24
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40010000 	.word	0x40010000
 8007278:	50000400 	.word	0x50000400
 800727c:	50000800 	.word	0x50000800
 8007280:	50000c00 	.word	0x50000c00
 8007284:	50001000 	.word	0x50001000
 8007288:	50001c00 	.word	0x50001c00
 800728c:	40010400 	.word	0x40010400

08007290 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	000a      	movs	r2, r1
 800729a:	1cbb      	adds	r3, r7, #2
 800729c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	1cba      	adds	r2, r7, #2
 80072a4:	8812      	ldrh	r2, [r2, #0]
 80072a6:	4013      	ands	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80072aa:	230f      	movs	r3, #15
 80072ac:	18fb      	adds	r3, r7, r3
 80072ae:	2201      	movs	r2, #1
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	e003      	b.n	80072bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80072b4:	230f      	movs	r3, #15
 80072b6:	18fb      	adds	r3, r7, r3
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80072bc:	230f      	movs	r3, #15
 80072be:	18fb      	adds	r3, r7, r3
 80072c0:	781b      	ldrb	r3, [r3, #0]
}
 80072c2:	0018      	movs	r0, r3
 80072c4:	46bd      	mov	sp, r7
 80072c6:	b004      	add	sp, #16
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	0008      	movs	r0, r1
 80072d4:	0011      	movs	r1, r2
 80072d6:	1cbb      	adds	r3, r7, #2
 80072d8:	1c02      	adds	r2, r0, #0
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	1c7b      	adds	r3, r7, #1
 80072de:	1c0a      	adds	r2, r1, #0
 80072e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072e2:	1c7b      	adds	r3, r7, #1
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072ea:	1cbb      	adds	r3, r7, #2
 80072ec:	881a      	ldrh	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80072f2:	e003      	b.n	80072fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80072f4:	1cbb      	adds	r3, r7, #2
 80072f6:	881a      	ldrh	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80072fc:	46c0      	nop			; (mov r8, r8)
 80072fe:	46bd      	mov	sp, r7
 8007300:	b002      	add	sp, #8
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	000a      	movs	r2, r1
 800730e:	1cbb      	adds	r3, r7, #2
 8007310:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007318:	1cbb      	adds	r3, r7, #2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4013      	ands	r3, r2
 8007320:	041a      	lsls	r2, r3, #16
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	43db      	mvns	r3, r3
 8007326:	1cb9      	adds	r1, r7, #2
 8007328:	8809      	ldrh	r1, [r1, #0]
 800732a:	400b      	ands	r3, r1
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	619a      	str	r2, [r3, #24]
}
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	46bd      	mov	sp, r7
 8007336:	b004      	add	sp, #16
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e082      	b.n	8007454 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2241      	movs	r2, #65	; 0x41
 8007352:	5c9b      	ldrb	r3, [r3, r2]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d107      	bne.n	800736a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2240      	movs	r2, #64	; 0x40
 800735e:	2100      	movs	r1, #0
 8007360:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	0018      	movs	r0, r3
 8007366:	f000 f87f 	bl	8007468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2241      	movs	r2, #65	; 0x41
 800736e:	2124      	movs	r1, #36	; 0x24
 8007370:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2101      	movs	r1, #1
 800737e:	438a      	bics	r2, r1
 8007380:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4934      	ldr	r1, [pc, #208]	; (800745c <HAL_I2C_Init+0x120>)
 800738c:	400a      	ands	r2, r1
 800738e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4931      	ldr	r1, [pc, #196]	; (8007460 <HAL_I2C_Init+0x124>)
 800739c:	400a      	ands	r2, r1
 800739e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d108      	bne.n	80073ba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2180      	movs	r1, #128	; 0x80
 80073b2:	0209      	lsls	r1, r1, #8
 80073b4:	430a      	orrs	r2, r1
 80073b6:	609a      	str	r2, [r3, #8]
 80073b8:	e007      	b.n	80073ca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2184      	movs	r1, #132	; 0x84
 80073c4:	0209      	lsls	r1, r1, #8
 80073c6:	430a      	orrs	r2, r1
 80073c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d104      	bne.n	80073dc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2280      	movs	r2, #128	; 0x80
 80073d8:	0112      	lsls	r2, r2, #4
 80073da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	491f      	ldr	r1, [pc, #124]	; (8007464 <HAL_I2C_Init+0x128>)
 80073e8:	430a      	orrs	r2, r1
 80073ea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	491a      	ldr	r1, [pc, #104]	; (8007460 <HAL_I2C_Init+0x124>)
 80073f8:	400a      	ands	r2, r1
 80073fa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	431a      	orrs	r2, r3
 8007406:	0011      	movs	r1, r2
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	021a      	lsls	r2, r3, #8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	69d9      	ldr	r1, [r3, #28]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1a      	ldr	r2, [r3, #32]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2101      	movs	r1, #1
 8007432:	430a      	orrs	r2, r1
 8007434:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2241      	movs	r2, #65	; 0x41
 8007440:	2120      	movs	r1, #32
 8007442:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2242      	movs	r2, #66	; 0x42
 800744e:	2100      	movs	r1, #0
 8007450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	0018      	movs	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	b002      	add	sp, #8
 800745a:	bd80      	pop	{r7, pc}
 800745c:	f0ffffff 	.word	0xf0ffffff
 8007460:	ffff7fff 	.word	0xffff7fff
 8007464:	02008000 	.word	0x02008000

08007468 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007470:	46c0      	nop			; (mov r8, r8)
 8007472:	46bd      	mov	sp, r7
 8007474:	b002      	add	sp, #8
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007478:	b590      	push	{r4, r7, lr}
 800747a:	b089      	sub	sp, #36	; 0x24
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	000c      	movs	r4, r1
 8007482:	0010      	movs	r0, r2
 8007484:	0019      	movs	r1, r3
 8007486:	230a      	movs	r3, #10
 8007488:	18fb      	adds	r3, r7, r3
 800748a:	1c22      	adds	r2, r4, #0
 800748c:	801a      	strh	r2, [r3, #0]
 800748e:	2308      	movs	r3, #8
 8007490:	18fb      	adds	r3, r7, r3
 8007492:	1c02      	adds	r2, r0, #0
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	1dbb      	adds	r3, r7, #6
 8007498:	1c0a      	adds	r2, r1, #0
 800749a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2241      	movs	r2, #65	; 0x41
 80074a0:	5c9b      	ldrb	r3, [r3, r2]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d000      	beq.n	80074aa <HAL_I2C_Mem_Write+0x32>
 80074a8:	e10c      	b.n	80076c4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d004      	beq.n	80074ba <HAL_I2C_Mem_Write+0x42>
 80074b0:	232c      	movs	r3, #44	; 0x2c
 80074b2:	18fb      	adds	r3, r7, r3
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2280      	movs	r2, #128	; 0x80
 80074be:	0092      	lsls	r2, r2, #2
 80074c0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e0ff      	b.n	80076c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2240      	movs	r2, #64	; 0x40
 80074ca:	5c9b      	ldrb	r3, [r3, r2]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d101      	bne.n	80074d4 <HAL_I2C_Mem_Write+0x5c>
 80074d0:	2302      	movs	r3, #2
 80074d2:	e0f8      	b.n	80076c6 <HAL_I2C_Mem_Write+0x24e>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2240      	movs	r2, #64	; 0x40
 80074d8:	2101      	movs	r1, #1
 80074da:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074dc:	f7fd f8f1 	bl	80046c2 <HAL_GetTick>
 80074e0:	0003      	movs	r3, r0
 80074e2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074e4:	2380      	movs	r3, #128	; 0x80
 80074e6:	0219      	lsls	r1, r3, #8
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	2319      	movs	r3, #25
 80074f0:	2201      	movs	r2, #1
 80074f2:	f000 fb17 	bl	8007b24 <I2C_WaitOnFlagUntilTimeout>
 80074f6:	1e03      	subs	r3, r0, #0
 80074f8:	d001      	beq.n	80074fe <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e0e3      	b.n	80076c6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2241      	movs	r2, #65	; 0x41
 8007502:	2121      	movs	r1, #33	; 0x21
 8007504:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2242      	movs	r2, #66	; 0x42
 800750a:	2140      	movs	r1, #64	; 0x40
 800750c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	222c      	movs	r2, #44	; 0x2c
 800751e:	18ba      	adds	r2, r7, r2
 8007520:	8812      	ldrh	r2, [r2, #0]
 8007522:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800752a:	1dbb      	adds	r3, r7, #6
 800752c:	881c      	ldrh	r4, [r3, #0]
 800752e:	2308      	movs	r3, #8
 8007530:	18fb      	adds	r3, r7, r3
 8007532:	881a      	ldrh	r2, [r3, #0]
 8007534:	230a      	movs	r3, #10
 8007536:	18fb      	adds	r3, r7, r3
 8007538:	8819      	ldrh	r1, [r3, #0]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	9301      	str	r3, [sp, #4]
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	0023      	movs	r3, r4
 8007546:	f000 fa05 	bl	8007954 <I2C_RequestMemoryWrite>
 800754a:	1e03      	subs	r3, r0, #0
 800754c:	d005      	beq.n	800755a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2240      	movs	r2, #64	; 0x40
 8007552:	2100      	movs	r1, #0
 8007554:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e0b5      	b.n	80076c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	2bff      	cmp	r3, #255	; 0xff
 8007562:	d911      	bls.n	8007588 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	22ff      	movs	r2, #255	; 0xff
 8007568:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756e:	b2da      	uxtb	r2, r3
 8007570:	2380      	movs	r3, #128	; 0x80
 8007572:	045c      	lsls	r4, r3, #17
 8007574:	230a      	movs	r3, #10
 8007576:	18fb      	adds	r3, r7, r3
 8007578:	8819      	ldrh	r1, [r3, #0]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	2300      	movs	r3, #0
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	0023      	movs	r3, r4
 8007582:	f000 fbef 	bl	8007d64 <I2C_TransferConfig>
 8007586:	e012      	b.n	80075ae <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758c:	b29a      	uxth	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007596:	b2da      	uxtb	r2, r3
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	049c      	lsls	r4, r3, #18
 800759c:	230a      	movs	r3, #10
 800759e:	18fb      	adds	r3, r7, r3
 80075a0:	8819      	ldrh	r1, [r3, #0]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	2300      	movs	r3, #0
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	0023      	movs	r3, r4
 80075aa:	f000 fbdb 	bl	8007d64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	0018      	movs	r0, r3
 80075b6:	f000 faf4 	bl	8007ba2 <I2C_WaitOnTXISFlagUntilTimeout>
 80075ba:	1e03      	subs	r3, r0, #0
 80075bc:	d001      	beq.n	80075c2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e081      	b.n	80076c6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	781a      	ldrb	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d03a      	beq.n	8007672 <HAL_I2C_Mem_Write+0x1fa>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007600:	2b00      	cmp	r3, #0
 8007602:	d136      	bne.n	8007672 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	0013      	movs	r3, r2
 800760e:	2200      	movs	r2, #0
 8007610:	2180      	movs	r1, #128	; 0x80
 8007612:	f000 fa87 	bl	8007b24 <I2C_WaitOnFlagUntilTimeout>
 8007616:	1e03      	subs	r3, r0, #0
 8007618:	d001      	beq.n	800761e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e053      	b.n	80076c6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007622:	b29b      	uxth	r3, r3
 8007624:	2bff      	cmp	r3, #255	; 0xff
 8007626:	d911      	bls.n	800764c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	22ff      	movs	r2, #255	; 0xff
 800762c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007632:	b2da      	uxtb	r2, r3
 8007634:	2380      	movs	r3, #128	; 0x80
 8007636:	045c      	lsls	r4, r3, #17
 8007638:	230a      	movs	r3, #10
 800763a:	18fb      	adds	r3, r7, r3
 800763c:	8819      	ldrh	r1, [r3, #0]
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	2300      	movs	r3, #0
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	0023      	movs	r3, r4
 8007646:	f000 fb8d 	bl	8007d64 <I2C_TransferConfig>
 800764a:	e012      	b.n	8007672 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765a:	b2da      	uxtb	r2, r3
 800765c:	2380      	movs	r3, #128	; 0x80
 800765e:	049c      	lsls	r4, r3, #18
 8007660:	230a      	movs	r3, #10
 8007662:	18fb      	adds	r3, r7, r3
 8007664:	8819      	ldrh	r1, [r3, #0]
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	2300      	movs	r3, #0
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	0023      	movs	r3, r4
 800766e:	f000 fb79 	bl	8007d64 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d198      	bne.n	80075ae <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	0018      	movs	r0, r3
 8007684:	f000 facc 	bl	8007c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007688:	1e03      	subs	r3, r0, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e01a      	b.n	80076c6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2220      	movs	r2, #32
 8007696:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	490b      	ldr	r1, [pc, #44]	; (80076d0 <HAL_I2C_Mem_Write+0x258>)
 80076a4:	400a      	ands	r2, r1
 80076a6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2241      	movs	r2, #65	; 0x41
 80076ac:	2120      	movs	r1, #32
 80076ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2242      	movs	r2, #66	; 0x42
 80076b4:	2100      	movs	r1, #0
 80076b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2240      	movs	r2, #64	; 0x40
 80076bc:	2100      	movs	r1, #0
 80076be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e000      	b.n	80076c6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	0018      	movs	r0, r3
 80076c8:	46bd      	mov	sp, r7
 80076ca:	b007      	add	sp, #28
 80076cc:	bd90      	pop	{r4, r7, pc}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	fe00e800 	.word	0xfe00e800

080076d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076d4:	b590      	push	{r4, r7, lr}
 80076d6:	b089      	sub	sp, #36	; 0x24
 80076d8:	af02      	add	r7, sp, #8
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	000c      	movs	r4, r1
 80076de:	0010      	movs	r0, r2
 80076e0:	0019      	movs	r1, r3
 80076e2:	230a      	movs	r3, #10
 80076e4:	18fb      	adds	r3, r7, r3
 80076e6:	1c22      	adds	r2, r4, #0
 80076e8:	801a      	strh	r2, [r3, #0]
 80076ea:	2308      	movs	r3, #8
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	1c02      	adds	r2, r0, #0
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	1dbb      	adds	r3, r7, #6
 80076f4:	1c0a      	adds	r2, r1, #0
 80076f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2241      	movs	r2, #65	; 0x41
 80076fc:	5c9b      	ldrb	r3, [r3, r2]
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b20      	cmp	r3, #32
 8007702:	d000      	beq.n	8007706 <HAL_I2C_Mem_Read+0x32>
 8007704:	e110      	b.n	8007928 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <HAL_I2C_Mem_Read+0x42>
 800770c:	232c      	movs	r3, #44	; 0x2c
 800770e:	18fb      	adds	r3, r7, r3
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2280      	movs	r2, #128	; 0x80
 800771a:	0092      	lsls	r2, r2, #2
 800771c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e103      	b.n	800792a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2240      	movs	r2, #64	; 0x40
 8007726:	5c9b      	ldrb	r3, [r3, r2]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d101      	bne.n	8007730 <HAL_I2C_Mem_Read+0x5c>
 800772c:	2302      	movs	r3, #2
 800772e:	e0fc      	b.n	800792a <HAL_I2C_Mem_Read+0x256>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2240      	movs	r2, #64	; 0x40
 8007734:	2101      	movs	r1, #1
 8007736:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007738:	f7fc ffc3 	bl	80046c2 <HAL_GetTick>
 800773c:	0003      	movs	r3, r0
 800773e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007740:	2380      	movs	r3, #128	; 0x80
 8007742:	0219      	lsls	r1, r3, #8
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	2319      	movs	r3, #25
 800774c:	2201      	movs	r2, #1
 800774e:	f000 f9e9 	bl	8007b24 <I2C_WaitOnFlagUntilTimeout>
 8007752:	1e03      	subs	r3, r0, #0
 8007754:	d001      	beq.n	800775a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e0e7      	b.n	800792a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2241      	movs	r2, #65	; 0x41
 800775e:	2122      	movs	r1, #34	; 0x22
 8007760:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2242      	movs	r2, #66	; 0x42
 8007766:	2140      	movs	r1, #64	; 0x40
 8007768:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007774:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	222c      	movs	r2, #44	; 0x2c
 800777a:	18ba      	adds	r2, r7, r2
 800777c:	8812      	ldrh	r2, [r2, #0]
 800777e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007786:	1dbb      	adds	r3, r7, #6
 8007788:	881c      	ldrh	r4, [r3, #0]
 800778a:	2308      	movs	r3, #8
 800778c:	18fb      	adds	r3, r7, r3
 800778e:	881a      	ldrh	r2, [r3, #0]
 8007790:	230a      	movs	r3, #10
 8007792:	18fb      	adds	r3, r7, r3
 8007794:	8819      	ldrh	r1, [r3, #0]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	0023      	movs	r3, r4
 80077a2:	f000 f93b 	bl	8007a1c <I2C_RequestMemoryRead>
 80077a6:	1e03      	subs	r3, r0, #0
 80077a8:	d005      	beq.n	80077b6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2240      	movs	r2, #64	; 0x40
 80077ae:	2100      	movs	r1, #0
 80077b0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e0b9      	b.n	800792a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2bff      	cmp	r3, #255	; 0xff
 80077be:	d911      	bls.n	80077e4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	22ff      	movs	r2, #255	; 0xff
 80077c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	2380      	movs	r3, #128	; 0x80
 80077ce:	045c      	lsls	r4, r3, #17
 80077d0:	230a      	movs	r3, #10
 80077d2:	18fb      	adds	r3, r7, r3
 80077d4:	8819      	ldrh	r1, [r3, #0]
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	4b56      	ldr	r3, [pc, #344]	; (8007934 <HAL_I2C_Mem_Read+0x260>)
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	0023      	movs	r3, r4
 80077de:	f000 fac1 	bl	8007d64 <I2C_TransferConfig>
 80077e2:	e012      	b.n	800780a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	2380      	movs	r3, #128	; 0x80
 80077f6:	049c      	lsls	r4, r3, #18
 80077f8:	230a      	movs	r3, #10
 80077fa:	18fb      	adds	r3, r7, r3
 80077fc:	8819      	ldrh	r1, [r3, #0]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	4b4c      	ldr	r3, [pc, #304]	; (8007934 <HAL_I2C_Mem_Read+0x260>)
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	0023      	movs	r3, r4
 8007806:	f000 faad 	bl	8007d64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800780a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	0013      	movs	r3, r2
 8007814:	2200      	movs	r2, #0
 8007816:	2104      	movs	r1, #4
 8007818:	f000 f984 	bl	8007b24 <I2C_WaitOnFlagUntilTimeout>
 800781c:	1e03      	subs	r3, r0, #0
 800781e:	d001      	beq.n	8007824 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e082      	b.n	800792a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	b2d2      	uxtb	r2, r2
 8007830:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d03a      	beq.n	80078d6 <HAL_I2C_Mem_Read+0x202>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007864:	2b00      	cmp	r3, #0
 8007866:	d136      	bne.n	80078d6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	0013      	movs	r3, r2
 8007872:	2200      	movs	r2, #0
 8007874:	2180      	movs	r1, #128	; 0x80
 8007876:	f000 f955 	bl	8007b24 <I2C_WaitOnFlagUntilTimeout>
 800787a:	1e03      	subs	r3, r0, #0
 800787c:	d001      	beq.n	8007882 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e053      	b.n	800792a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007886:	b29b      	uxth	r3, r3
 8007888:	2bff      	cmp	r3, #255	; 0xff
 800788a:	d911      	bls.n	80078b0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	22ff      	movs	r2, #255	; 0xff
 8007890:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007896:	b2da      	uxtb	r2, r3
 8007898:	2380      	movs	r3, #128	; 0x80
 800789a:	045c      	lsls	r4, r3, #17
 800789c:	230a      	movs	r3, #10
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	8819      	ldrh	r1, [r3, #0]
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	2300      	movs	r3, #0
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	0023      	movs	r3, r4
 80078aa:	f000 fa5b 	bl	8007d64 <I2C_TransferConfig>
 80078ae:	e012      	b.n	80078d6 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	2380      	movs	r3, #128	; 0x80
 80078c2:	049c      	lsls	r4, r3, #18
 80078c4:	230a      	movs	r3, #10
 80078c6:	18fb      	adds	r3, r7, r3
 80078c8:	8819      	ldrh	r1, [r3, #0]
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	2300      	movs	r3, #0
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	0023      	movs	r3, r4
 80078d2:	f000 fa47 	bl	8007d64 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d194      	bne.n	800780a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	0018      	movs	r0, r3
 80078e8:	f000 f99a 	bl	8007c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078ec:	1e03      	subs	r3, r0, #0
 80078ee:	d001      	beq.n	80078f4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e01a      	b.n	800792a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2220      	movs	r2, #32
 80078fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	490c      	ldr	r1, [pc, #48]	; (8007938 <HAL_I2C_Mem_Read+0x264>)
 8007908:	400a      	ands	r2, r1
 800790a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2241      	movs	r2, #65	; 0x41
 8007910:	2120      	movs	r1, #32
 8007912:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2242      	movs	r2, #66	; 0x42
 8007918:	2100      	movs	r1, #0
 800791a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2240      	movs	r2, #64	; 0x40
 8007920:	2100      	movs	r1, #0
 8007922:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	e000      	b.n	800792a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007928:	2302      	movs	r3, #2
  }
}
 800792a:	0018      	movs	r0, r3
 800792c:	46bd      	mov	sp, r7
 800792e:	b007      	add	sp, #28
 8007930:	bd90      	pop	{r4, r7, pc}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	80002400 	.word	0x80002400
 8007938:	fe00e800 	.word	0xfe00e800

0800793c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2241      	movs	r2, #65	; 0x41
 8007948:	5c9b      	ldrb	r3, [r3, r2]
 800794a:	b2db      	uxtb	r3, r3
}
 800794c:	0018      	movs	r0, r3
 800794e:	46bd      	mov	sp, r7
 8007950:	b002      	add	sp, #8
 8007952:	bd80      	pop	{r7, pc}

08007954 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007954:	b5b0      	push	{r4, r5, r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af02      	add	r7, sp, #8
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	000c      	movs	r4, r1
 800795e:	0010      	movs	r0, r2
 8007960:	0019      	movs	r1, r3
 8007962:	250a      	movs	r5, #10
 8007964:	197b      	adds	r3, r7, r5
 8007966:	1c22      	adds	r2, r4, #0
 8007968:	801a      	strh	r2, [r3, #0]
 800796a:	2308      	movs	r3, #8
 800796c:	18fb      	adds	r3, r7, r3
 800796e:	1c02      	adds	r2, r0, #0
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	1dbb      	adds	r3, r7, #6
 8007974:	1c0a      	adds	r2, r1, #0
 8007976:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007978:	1dbb      	adds	r3, r7, #6
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b2da      	uxtb	r2, r3
 800797e:	2380      	movs	r3, #128	; 0x80
 8007980:	045c      	lsls	r4, r3, #17
 8007982:	197b      	adds	r3, r7, r5
 8007984:	8819      	ldrh	r1, [r3, #0]
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	4b23      	ldr	r3, [pc, #140]	; (8007a18 <I2C_RequestMemoryWrite+0xc4>)
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	0023      	movs	r3, r4
 800798e:	f000 f9e9 	bl	8007d64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007994:	6a39      	ldr	r1, [r7, #32]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	0018      	movs	r0, r3
 800799a:	f000 f902 	bl	8007ba2 <I2C_WaitOnTXISFlagUntilTimeout>
 800799e:	1e03      	subs	r3, r0, #0
 80079a0:	d001      	beq.n	80079a6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e033      	b.n	8007a0e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079a6:	1dbb      	adds	r3, r7, #6
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d107      	bne.n	80079be <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079ae:	2308      	movs	r3, #8
 80079b0:	18fb      	adds	r3, r7, r3
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	629a      	str	r2, [r3, #40]	; 0x28
 80079bc:	e019      	b.n	80079f2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80079be:	2308      	movs	r3, #8
 80079c0:	18fb      	adds	r3, r7, r3
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	0a1b      	lsrs	r3, r3, #8
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d2:	6a39      	ldr	r1, [r7, #32]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	0018      	movs	r0, r3
 80079d8:	f000 f8e3 	bl	8007ba2 <I2C_WaitOnTXISFlagUntilTimeout>
 80079dc:	1e03      	subs	r3, r0, #0
 80079de:	d001      	beq.n	80079e4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e014      	b.n	8007a0e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079e4:	2308      	movs	r3, #8
 80079e6:	18fb      	adds	r3, r7, r3
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80079f2:	6a3a      	ldr	r2, [r7, #32]
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	0013      	movs	r3, r2
 80079fc:	2200      	movs	r2, #0
 80079fe:	2180      	movs	r1, #128	; 0x80
 8007a00:	f000 f890 	bl	8007b24 <I2C_WaitOnFlagUntilTimeout>
 8007a04:	1e03      	subs	r3, r0, #0
 8007a06:	d001      	beq.n	8007a0c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	0018      	movs	r0, r3
 8007a10:	46bd      	mov	sp, r7
 8007a12:	b004      	add	sp, #16
 8007a14:	bdb0      	pop	{r4, r5, r7, pc}
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	80002000 	.word	0x80002000

08007a1c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a1c:	b5b0      	push	{r4, r5, r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	000c      	movs	r4, r1
 8007a26:	0010      	movs	r0, r2
 8007a28:	0019      	movs	r1, r3
 8007a2a:	250a      	movs	r5, #10
 8007a2c:	197b      	adds	r3, r7, r5
 8007a2e:	1c22      	adds	r2, r4, #0
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	2308      	movs	r3, #8
 8007a34:	18fb      	adds	r3, r7, r3
 8007a36:	1c02      	adds	r2, r0, #0
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	1dbb      	adds	r3, r7, #6
 8007a3c:	1c0a      	adds	r2, r1, #0
 8007a3e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a40:	1dbb      	adds	r3, r7, #6
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	197b      	adds	r3, r7, r5
 8007a48:	8819      	ldrh	r1, [r3, #0]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	4b23      	ldr	r3, [pc, #140]	; (8007adc <I2C_RequestMemoryRead+0xc0>)
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	2300      	movs	r3, #0
 8007a52:	f000 f987 	bl	8007d64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a58:	6a39      	ldr	r1, [r7, #32]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	f000 f8a0 	bl	8007ba2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a62:	1e03      	subs	r3, r0, #0
 8007a64:	d001      	beq.n	8007a6a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e033      	b.n	8007ad2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a6a:	1dbb      	adds	r3, r7, #6
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d107      	bne.n	8007a82 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a72:	2308      	movs	r3, #8
 8007a74:	18fb      	adds	r3, r7, r3
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a80:	e019      	b.n	8007ab6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a82:	2308      	movs	r3, #8
 8007a84:	18fb      	adds	r3, r7, r3
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	0a1b      	lsrs	r3, r3, #8
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a96:	6a39      	ldr	r1, [r7, #32]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	f000 f881 	bl	8007ba2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007aa0:	1e03      	subs	r3, r0, #0
 8007aa2:	d001      	beq.n	8007aa8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e014      	b.n	8007ad2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	18fb      	adds	r3, r7, r3
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab6:	6a3a      	ldr	r2, [r7, #32]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	0013      	movs	r3, r2
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2140      	movs	r1, #64	; 0x40
 8007ac4:	f000 f82e 	bl	8007b24 <I2C_WaitOnFlagUntilTimeout>
 8007ac8:	1e03      	subs	r3, r0, #0
 8007aca:	d001      	beq.n	8007ad0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e000      	b.n	8007ad2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	b004      	add	sp, #16
 8007ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	80002000 	.word	0x80002000

08007ae0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	2202      	movs	r2, #2
 8007af0:	4013      	ands	r3, r2
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d103      	bne.n	8007afe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2200      	movs	r2, #0
 8007afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	2201      	movs	r2, #1
 8007b06:	4013      	ands	r3, r2
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d007      	beq.n	8007b1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2101      	movs	r1, #1
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	619a      	str	r2, [r3, #24]
  }
}
 8007b1c:	46c0      	nop			; (mov r8, r8)
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	b002      	add	sp, #8
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	603b      	str	r3, [r7, #0]
 8007b30:	1dfb      	adds	r3, r7, #7
 8007b32:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b34:	e021      	b.n	8007b7a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	d01e      	beq.n	8007b7a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b3c:	f7fc fdc1 	bl	80046c2 <HAL_GetTick>
 8007b40:	0002      	movs	r2, r0
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d302      	bcc.n	8007b52 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d113      	bne.n	8007b7a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b56:	2220      	movs	r2, #32
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2241      	movs	r2, #65	; 0x41
 8007b62:	2120      	movs	r1, #32
 8007b64:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2242      	movs	r2, #66	; 0x42
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2240      	movs	r2, #64	; 0x40
 8007b72:	2100      	movs	r1, #0
 8007b74:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e00f      	b.n	8007b9a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	4013      	ands	r3, r2
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	425a      	negs	r2, r3
 8007b8a:	4153      	adcs	r3, r2
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	001a      	movs	r2, r3
 8007b90:	1dfb      	adds	r3, r7, #7
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d0ce      	beq.n	8007b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	b004      	add	sp, #16
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bae:	e02b      	b.n	8007c08 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	f000 f86e 	bl	8007c98 <I2C_IsAcknowledgeFailed>
 8007bbc:	1e03      	subs	r3, r0, #0
 8007bbe:	d001      	beq.n	8007bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e029      	b.n	8007c18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	d01e      	beq.n	8007c08 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bca:	f7fc fd7a 	bl	80046c2 <HAL_GetTick>
 8007bce:	0002      	movs	r2, r0
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d302      	bcc.n	8007be0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d113      	bne.n	8007c08 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be4:	2220      	movs	r2, #32
 8007be6:	431a      	orrs	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2241      	movs	r2, #65	; 0x41
 8007bf0:	2120      	movs	r1, #32
 8007bf2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2242      	movs	r2, #66	; 0x42
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2240      	movs	r2, #64	; 0x40
 8007c00:	2100      	movs	r1, #0
 8007c02:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e007      	b.n	8007c18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d1cc      	bne.n	8007bb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	0018      	movs	r0, r3
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	b004      	add	sp, #16
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c2c:	e028      	b.n	8007c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	0018      	movs	r0, r3
 8007c36:	f000 f82f 	bl	8007c98 <I2C_IsAcknowledgeFailed>
 8007c3a:	1e03      	subs	r3, r0, #0
 8007c3c:	d001      	beq.n	8007c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e026      	b.n	8007c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c42:	f7fc fd3e 	bl	80046c2 <HAL_GetTick>
 8007c46:	0002      	movs	r2, r0
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d302      	bcc.n	8007c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d113      	bne.n	8007c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2241      	movs	r2, #65	; 0x41
 8007c68:	2120      	movs	r1, #32
 8007c6a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2242      	movs	r2, #66	; 0x42
 8007c70:	2100      	movs	r1, #0
 8007c72:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2240      	movs	r2, #64	; 0x40
 8007c78:	2100      	movs	r1, #0
 8007c7a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e007      	b.n	8007c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	2220      	movs	r2, #32
 8007c88:	4013      	ands	r3, r2
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d1cf      	bne.n	8007c2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	0018      	movs	r0, r3
 8007c92:	46bd      	mov	sp, r7
 8007c94:	b004      	add	sp, #16
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	2210      	movs	r2, #16
 8007cac:	4013      	ands	r3, r2
 8007cae:	2b10      	cmp	r3, #16
 8007cb0:	d151      	bne.n	8007d56 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cb2:	e021      	b.n	8007cf8 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	d01e      	beq.n	8007cf8 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cba:	f7fc fd02 	bl	80046c2 <HAL_GetTick>
 8007cbe:	0002      	movs	r2, r0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d302      	bcc.n	8007cd0 <I2C_IsAcknowledgeFailed+0x38>
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d113      	bne.n	8007cf8 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2241      	movs	r2, #65	; 0x41
 8007ce0:	2120      	movs	r1, #32
 8007ce2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2242      	movs	r2, #66	; 0x42
 8007ce8:	2100      	movs	r1, #0
 8007cea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2240      	movs	r2, #64	; 0x40
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e02f      	b.n	8007d58 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	d1d6      	bne.n	8007cb4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2210      	movs	r2, #16
 8007d0c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2220      	movs	r2, #32
 8007d14:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f7ff fee1 	bl	8007ae0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	490d      	ldr	r1, [pc, #52]	; (8007d60 <I2C_IsAcknowledgeFailed+0xc8>)
 8007d2a:	400a      	ands	r2, r1
 8007d2c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d32:	2204      	movs	r2, #4
 8007d34:	431a      	orrs	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2241      	movs	r2, #65	; 0x41
 8007d3e:	2120      	movs	r1, #32
 8007d40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2242      	movs	r2, #66	; 0x42
 8007d46:	2100      	movs	r1, #0
 8007d48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2240      	movs	r2, #64	; 0x40
 8007d4e:	2100      	movs	r1, #0
 8007d50:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e000      	b.n	8007d58 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	0018      	movs	r0, r3
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	b004      	add	sp, #16
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	fe00e800 	.word	0xfe00e800

08007d64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007d64:	b590      	push	{r4, r7, lr}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	0008      	movs	r0, r1
 8007d6e:	0011      	movs	r1, r2
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	240a      	movs	r4, #10
 8007d74:	193b      	adds	r3, r7, r4
 8007d76:	1c02      	adds	r2, r0, #0
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	2009      	movs	r0, #9
 8007d7c:	183b      	adds	r3, r7, r0
 8007d7e:	1c0a      	adds	r2, r1, #0
 8007d80:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	6a3a      	ldr	r2, [r7, #32]
 8007d8a:	0d51      	lsrs	r1, r2, #21
 8007d8c:	2280      	movs	r2, #128	; 0x80
 8007d8e:	00d2      	lsls	r2, r2, #3
 8007d90:	400a      	ands	r2, r1
 8007d92:	490e      	ldr	r1, [pc, #56]	; (8007dcc <I2C_TransferConfig+0x68>)
 8007d94:	430a      	orrs	r2, r1
 8007d96:	43d2      	mvns	r2, r2
 8007d98:	401a      	ands	r2, r3
 8007d9a:	0011      	movs	r1, r2
 8007d9c:	193b      	adds	r3, r7, r4
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	059b      	lsls	r3, r3, #22
 8007da2:	0d9a      	lsrs	r2, r3, #22
 8007da4:	183b      	adds	r3, r7, r0
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	0418      	lsls	r0, r3, #16
 8007daa:	23ff      	movs	r3, #255	; 0xff
 8007dac:	041b      	lsls	r3, r3, #16
 8007dae:	4003      	ands	r3, r0
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	431a      	orrs	r2, r3
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	431a      	orrs	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007dc2:	46c0      	nop			; (mov r8, r8)
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	b005      	add	sp, #20
 8007dc8:	bd90      	pop	{r4, r7, pc}
 8007dca:	46c0      	nop			; (mov r8, r8)
 8007dcc:	03ff63ff 	.word	0x03ff63ff

08007dd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2241      	movs	r2, #65	; 0x41
 8007dde:	5c9b      	ldrb	r3, [r3, r2]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	d138      	bne.n	8007e58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2240      	movs	r2, #64	; 0x40
 8007dea:	5c9b      	ldrb	r3, [r3, r2]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e032      	b.n	8007e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2240      	movs	r2, #64	; 0x40
 8007df8:	2101      	movs	r1, #1
 8007dfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2241      	movs	r2, #65	; 0x41
 8007e00:	2124      	movs	r1, #36	; 0x24
 8007e02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2101      	movs	r1, #1
 8007e10:	438a      	bics	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4911      	ldr	r1, [pc, #68]	; (8007e64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007e20:	400a      	ands	r2, r1
 8007e22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6819      	ldr	r1, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2101      	movs	r1, #1
 8007e40:	430a      	orrs	r2, r1
 8007e42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2241      	movs	r2, #65	; 0x41
 8007e48:	2120      	movs	r1, #32
 8007e4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2240      	movs	r2, #64	; 0x40
 8007e50:	2100      	movs	r1, #0
 8007e52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
  }
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b002      	add	sp, #8
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	ffffefff 	.word	0xffffefff

08007e68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2241      	movs	r2, #65	; 0x41
 8007e76:	5c9b      	ldrb	r3, [r3, r2]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	d139      	bne.n	8007ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2240      	movs	r2, #64	; 0x40
 8007e82:	5c9b      	ldrb	r3, [r3, r2]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e033      	b.n	8007ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2240      	movs	r2, #64	; 0x40
 8007e90:	2101      	movs	r1, #1
 8007e92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2241      	movs	r2, #65	; 0x41
 8007e98:	2124      	movs	r1, #36	; 0x24
 8007e9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	438a      	bics	r2, r1
 8007eaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4a11      	ldr	r2, [pc, #68]	; (8007efc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	021b      	lsls	r3, r3, #8
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2101      	movs	r1, #1
 8007eda:	430a      	orrs	r2, r1
 8007edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2241      	movs	r2, #65	; 0x41
 8007ee2:	2120      	movs	r1, #32
 8007ee4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2240      	movs	r2, #64	; 0x40
 8007eea:	2100      	movs	r1, #0
 8007eec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e000      	b.n	8007ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ef2:	2302      	movs	r3, #2
  }
}
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	b004      	add	sp, #16
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	fffff0ff 	.word	0xfffff0ff

08007f00 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8007f04:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <HAL_PWR_DisablePVD+0x18>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	4b03      	ldr	r3, [pc, #12]	; (8007f18 <HAL_PWR_DisablePVD+0x18>)
 8007f0a:	2110      	movs	r1, #16
 8007f0c:	438a      	bics	r2, r1
 8007f0e:	601a      	str	r2, [r3, #0]
}
 8007f10:	46c0      	nop			; (mov r8, r8)
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	46c0      	nop			; (mov r8, r8)
 8007f18:	40007000 	.word	0x40007000

08007f1c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	000a      	movs	r2, r1
 8007f26:	1cfb      	adds	r3, r7, #3
 8007f28:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8007f2e:	4b23      	ldr	r3, [pc, #140]	; (8007fbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	2380      	movs	r3, #128	; 0x80
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4013      	ands	r3, r2
 8007f38:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8007f3a:	4b21      	ldr	r3, [pc, #132]	; (8007fc0 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	4013      	ands	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d008      	beq.n	8007f5c <HAL_PWR_EnterSLEEPMode+0x40>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8007f50:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	4b19      	ldr	r3, [pc, #100]	; (8007fbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f56:	491b      	ldr	r1, [pc, #108]	; (8007fc4 <HAL_PWR_EnterSLEEPMode+0xa8>)
 8007f58:	400a      	ands	r2, r1
 8007f5a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8007f5c:	4b17      	ldr	r3, [pc, #92]	; (8007fbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2203      	movs	r2, #3
 8007f66:	4393      	bics	r3, r2
 8007f68:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8007f72:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8007f78:	4b13      	ldr	r3, [pc, #76]	; (8007fc8 <HAL_PWR_EnterSLEEPMode+0xac>)
 8007f7a:	691a      	ldr	r2, [r3, #16]
 8007f7c:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <HAL_PWR_EnterSLEEPMode+0xac>)
 8007f7e:	2104      	movs	r1, #4
 8007f80:	438a      	bics	r2, r1
 8007f82:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007f84:	1cfb      	adds	r3, r7, #3
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d101      	bne.n	8007f90 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007f8c:	bf30      	wfi
 8007f8e:	e002      	b.n	8007f96 <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007f90:	bf40      	sev
    __WFE();
 8007f92:	bf20      	wfe
    __WFE();
 8007f94:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d009      	beq.n	8007fb0 <HAL_PWR_EnterSLEEPMode+0x94>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d006      	beq.n	8007fb0 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8007fa2:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8007fa8:	2180      	movs	r1, #128	; 0x80
 8007faa:	0089      	lsls	r1, r1, #2
 8007fac:	430a      	orrs	r2, r1
 8007fae:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8007fb0:	46c0      	nop			; (mov r8, r8)

}
 8007fb2:	46c0      	nop			; (mov r8, r8)
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	b006      	add	sp, #24
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	46c0      	nop			; (mov r8, r8)
 8007fbc:	40007000 	.word	0x40007000
 8007fc0:	40010000 	.word	0x40010000
 8007fc4:	fffffdff 	.word	0xfffffdff
 8007fc8:	e000ed00 	.word	0xe000ed00

08007fcc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	000a      	movs	r2, r1
 8007fd6:	1cfb      	adds	r3, r7, #3
 8007fd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8007fde:	4b25      	ldr	r3, [pc, #148]	; (8008074 <HAL_PWR_EnterSTOPMode+0xa8>)
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	2380      	movs	r3, #128	; 0x80
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8007fea:	4b23      	ldr	r3, [pc, #140]	; (8008078 <HAL_PWR_EnterSTOPMode+0xac>)
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d008      	beq.n	800800c <HAL_PWR_EnterSTOPMode+0x40>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008000:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008006:	491d      	ldr	r1, [pc, #116]	; (800807c <HAL_PWR_EnterSTOPMode+0xb0>)
 8008008:	400a      	ands	r2, r1
 800800a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800800c:	4b19      	ldr	r3, [pc, #100]	; (8008074 <HAL_PWR_EnterSTOPMode+0xa8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2203      	movs	r2, #3
 8008016:	4393      	bics	r3, r2
 8008018:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008022:	4b14      	ldr	r3, [pc, #80]	; (8008074 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008028:	4b15      	ldr	r3, [pc, #84]	; (8008080 <HAL_PWR_EnterSTOPMode+0xb4>)
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	4b14      	ldr	r3, [pc, #80]	; (8008080 <HAL_PWR_EnterSTOPMode+0xb4>)
 800802e:	2104      	movs	r1, #4
 8008030:	430a      	orrs	r2, r1
 8008032:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008034:	1cfb      	adds	r3, r7, #3
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800803c:	bf30      	wfi
 800803e:	e002      	b.n	8008046 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008040:	bf40      	sev
    __WFE();
 8008042:	bf20      	wfe
    __WFE();
 8008044:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008046:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008048:	691a      	ldr	r2, [r3, #16]
 800804a:	4b0d      	ldr	r3, [pc, #52]	; (8008080 <HAL_PWR_EnterSTOPMode+0xb4>)
 800804c:	2104      	movs	r1, #4
 800804e:	438a      	bics	r2, r1
 8008050:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d009      	beq.n	800806c <HAL_PWR_EnterSTOPMode+0xa0>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d006      	beq.n	800806c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800805e:	4b05      	ldr	r3, [pc, #20]	; (8008074 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b04      	ldr	r3, [pc, #16]	; (8008074 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008064:	2180      	movs	r1, #128	; 0x80
 8008066:	0089      	lsls	r1, r1, #2
 8008068:	430a      	orrs	r2, r1
 800806a:	601a      	str	r2, [r3, #0]
  }
}
 800806c:	46c0      	nop			; (mov r8, r8)
 800806e:	46bd      	mov	sp, r7
 8008070:	b006      	add	sp, #24
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40007000 	.word	0x40007000
 8008078:	40010000 	.word	0x40010000
 800807c:	fffffdff 	.word	0xfffffdff
 8008080:	e000ed00 	.word	0xe000ed00

08008084 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008088:	4b04      	ldr	r3, [pc, #16]	; (800809c <HAL_PWREx_EnableFastWakeUp+0x18>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	4b03      	ldr	r3, [pc, #12]	; (800809c <HAL_PWREx_EnableFastWakeUp+0x18>)
 800808e:	2180      	movs	r1, #128	; 0x80
 8008090:	00c9      	lsls	r1, r1, #3
 8008092:	430a      	orrs	r2, r1
 8008094:	601a      	str	r2, [r3, #0]
}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	40007000 	.word	0x40007000

080080a0 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 80080a4:	4b04      	ldr	r3, [pc, #16]	; (80080b8 <HAL_PWREx_EnableUltraLowPower+0x18>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	4b03      	ldr	r3, [pc, #12]	; (80080b8 <HAL_PWREx_EnableUltraLowPower+0x18>)
 80080aa:	2180      	movs	r1, #128	; 0x80
 80080ac:	0089      	lsls	r1, r1, #2
 80080ae:	430a      	orrs	r2, r1
 80080b0:	601a      	str	r2, [r3, #0]
}
 80080b2:	46c0      	nop			; (mov r8, r8)
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40007000 	.word	0x40007000

080080bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080bc:	b5b0      	push	{r4, r5, r7, lr}
 80080be:	b08a      	sub	sp, #40	; 0x28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f000 fbbf 	bl	800884e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080d0:	4bc9      	ldr	r3, [pc, #804]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	220c      	movs	r2, #12
 80080d6:	4013      	ands	r3, r2
 80080d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080da:	4bc7      	ldr	r3, [pc, #796]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	2380      	movs	r3, #128	; 0x80
 80080e0:	025b      	lsls	r3, r3, #9
 80080e2:	4013      	ands	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2201      	movs	r2, #1
 80080ec:	4013      	ands	r3, r2
 80080ee:	d100      	bne.n	80080f2 <HAL_RCC_OscConfig+0x36>
 80080f0:	e07e      	b.n	80081f0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d007      	beq.n	8008108 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2b0c      	cmp	r3, #12
 80080fc:	d112      	bne.n	8008124 <HAL_RCC_OscConfig+0x68>
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	2380      	movs	r3, #128	; 0x80
 8008102:	025b      	lsls	r3, r3, #9
 8008104:	429a      	cmp	r2, r3
 8008106:	d10d      	bne.n	8008124 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008108:	4bbb      	ldr	r3, [pc, #748]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	2380      	movs	r3, #128	; 0x80
 800810e:	029b      	lsls	r3, r3, #10
 8008110:	4013      	ands	r3, r2
 8008112:	d100      	bne.n	8008116 <HAL_RCC_OscConfig+0x5a>
 8008114:	e06b      	b.n	80081ee <HAL_RCC_OscConfig+0x132>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d167      	bne.n	80081ee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	f000 fb95 	bl	800884e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	2380      	movs	r3, #128	; 0x80
 800812a:	025b      	lsls	r3, r3, #9
 800812c:	429a      	cmp	r2, r3
 800812e:	d107      	bne.n	8008140 <HAL_RCC_OscConfig+0x84>
 8008130:	4bb1      	ldr	r3, [pc, #708]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	4bb0      	ldr	r3, [pc, #704]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008136:	2180      	movs	r1, #128	; 0x80
 8008138:	0249      	lsls	r1, r1, #9
 800813a:	430a      	orrs	r2, r1
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	e027      	b.n	8008190 <HAL_RCC_OscConfig+0xd4>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	23a0      	movs	r3, #160	; 0xa0
 8008146:	02db      	lsls	r3, r3, #11
 8008148:	429a      	cmp	r2, r3
 800814a:	d10e      	bne.n	800816a <HAL_RCC_OscConfig+0xae>
 800814c:	4baa      	ldr	r3, [pc, #680]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	4ba9      	ldr	r3, [pc, #676]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008152:	2180      	movs	r1, #128	; 0x80
 8008154:	02c9      	lsls	r1, r1, #11
 8008156:	430a      	orrs	r2, r1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	4ba7      	ldr	r3, [pc, #668]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4ba6      	ldr	r3, [pc, #664]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008160:	2180      	movs	r1, #128	; 0x80
 8008162:	0249      	lsls	r1, r1, #9
 8008164:	430a      	orrs	r2, r1
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	e012      	b.n	8008190 <HAL_RCC_OscConfig+0xd4>
 800816a:	4ba3      	ldr	r3, [pc, #652]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4ba2      	ldr	r3, [pc, #648]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008170:	49a2      	ldr	r1, [pc, #648]	; (80083fc <HAL_RCC_OscConfig+0x340>)
 8008172:	400a      	ands	r2, r1
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	4ba0      	ldr	r3, [pc, #640]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	2380      	movs	r3, #128	; 0x80
 800817c:	025b      	lsls	r3, r3, #9
 800817e:	4013      	ands	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4b9c      	ldr	r3, [pc, #624]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	4b9b      	ldr	r3, [pc, #620]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 800818a:	499d      	ldr	r1, [pc, #628]	; (8008400 <HAL_RCC_OscConfig+0x344>)
 800818c:	400a      	ands	r2, r1
 800818e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d015      	beq.n	80081c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008198:	f7fc fa93 	bl	80046c2 <HAL_GetTick>
 800819c:	0003      	movs	r3, r0
 800819e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081a0:	e009      	b.n	80081b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081a2:	f7fc fa8e 	bl	80046c2 <HAL_GetTick>
 80081a6:	0002      	movs	r2, r0
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b64      	cmp	r3, #100	; 0x64
 80081ae:	d902      	bls.n	80081b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	f000 fb4c 	bl	800884e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081b6:	4b90      	ldr	r3, [pc, #576]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	2380      	movs	r3, #128	; 0x80
 80081bc:	029b      	lsls	r3, r3, #10
 80081be:	4013      	ands	r3, r2
 80081c0:	d0ef      	beq.n	80081a2 <HAL_RCC_OscConfig+0xe6>
 80081c2:	e015      	b.n	80081f0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c4:	f7fc fa7d 	bl	80046c2 <HAL_GetTick>
 80081c8:	0003      	movs	r3, r0
 80081ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081ce:	f7fc fa78 	bl	80046c2 <HAL_GetTick>
 80081d2:	0002      	movs	r2, r0
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b64      	cmp	r3, #100	; 0x64
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e336      	b.n	800884e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081e0:	4b85      	ldr	r3, [pc, #532]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	2380      	movs	r3, #128	; 0x80
 80081e6:	029b      	lsls	r3, r3, #10
 80081e8:	4013      	ands	r3, r2
 80081ea:	d1f0      	bne.n	80081ce <HAL_RCC_OscConfig+0x112>
 80081ec:	e000      	b.n	80081f0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2202      	movs	r2, #2
 80081f6:	4013      	ands	r3, r2
 80081f8:	d100      	bne.n	80081fc <HAL_RCC_OscConfig+0x140>
 80081fa:	e099      	b.n	8008330 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	2220      	movs	r2, #32
 8008206:	4013      	ands	r3, r2
 8008208:	d009      	beq.n	800821e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800820a:	4b7b      	ldr	r3, [pc, #492]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	4b7a      	ldr	r3, [pc, #488]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008210:	2120      	movs	r1, #32
 8008212:	430a      	orrs	r2, r1
 8008214:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	2220      	movs	r2, #32
 800821a:	4393      	bics	r3, r2
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	2b04      	cmp	r3, #4
 8008222:	d005      	beq.n	8008230 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	2b0c      	cmp	r3, #12
 8008228:	d13e      	bne.n	80082a8 <HAL_RCC_OscConfig+0x1ec>
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d13b      	bne.n	80082a8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008230:	4b71      	ldr	r3, [pc, #452]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2204      	movs	r2, #4
 8008236:	4013      	ands	r3, r2
 8008238:	d004      	beq.n	8008244 <HAL_RCC_OscConfig+0x188>
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e304      	b.n	800884e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008244:	4b6c      	ldr	r3, [pc, #432]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	4a6e      	ldr	r2, [pc, #440]	; (8008404 <HAL_RCC_OscConfig+0x348>)
 800824a:	4013      	ands	r3, r2
 800824c:	0019      	movs	r1, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	021a      	lsls	r2, r3, #8
 8008254:	4b68      	ldr	r3, [pc, #416]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008256:	430a      	orrs	r2, r1
 8008258:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800825a:	4b67      	ldr	r3, [pc, #412]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2209      	movs	r2, #9
 8008260:	4393      	bics	r3, r2
 8008262:	0019      	movs	r1, r3
 8008264:	4b64      	ldr	r3, [pc, #400]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008268:	430a      	orrs	r2, r1
 800826a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800826c:	f000 fc42 	bl	8008af4 <HAL_RCC_GetSysClockFreq>
 8008270:	0001      	movs	r1, r0
 8008272:	4b61      	ldr	r3, [pc, #388]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	091b      	lsrs	r3, r3, #4
 8008278:	220f      	movs	r2, #15
 800827a:	4013      	ands	r3, r2
 800827c:	4a62      	ldr	r2, [pc, #392]	; (8008408 <HAL_RCC_OscConfig+0x34c>)
 800827e:	5cd3      	ldrb	r3, [r2, r3]
 8008280:	000a      	movs	r2, r1
 8008282:	40da      	lsrs	r2, r3
 8008284:	4b61      	ldr	r3, [pc, #388]	; (800840c <HAL_RCC_OscConfig+0x350>)
 8008286:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008288:	4b61      	ldr	r3, [pc, #388]	; (8008410 <HAL_RCC_OscConfig+0x354>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2513      	movs	r5, #19
 800828e:	197c      	adds	r4, r7, r5
 8008290:	0018      	movs	r0, r3
 8008292:	f7fc fa0d 	bl	80046b0 <HAL_InitTick>
 8008296:	0003      	movs	r3, r0
 8008298:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800829a:	197b      	adds	r3, r7, r5
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d046      	beq.n	8008330 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80082a2:	197b      	adds	r3, r7, r5
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	e2d2      	b.n	800884e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d027      	beq.n	80082fe <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80082ae:	4b52      	ldr	r3, [pc, #328]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2209      	movs	r2, #9
 80082b4:	4393      	bics	r3, r2
 80082b6:	0019      	movs	r1, r3
 80082b8:	4b4f      	ldr	r3, [pc, #316]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80082ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082bc:	430a      	orrs	r2, r1
 80082be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082c0:	f7fc f9ff 	bl	80046c2 <HAL_GetTick>
 80082c4:	0003      	movs	r3, r0
 80082c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082c8:	e008      	b.n	80082dc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082ca:	f7fc f9fa 	bl	80046c2 <HAL_GetTick>
 80082ce:	0002      	movs	r2, r0
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d901      	bls.n	80082dc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e2b8      	b.n	800884e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082dc:	4b46      	ldr	r3, [pc, #280]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2204      	movs	r2, #4
 80082e2:	4013      	ands	r3, r2
 80082e4:	d0f1      	beq.n	80082ca <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082e6:	4b44      	ldr	r3, [pc, #272]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	4a46      	ldr	r2, [pc, #280]	; (8008404 <HAL_RCC_OscConfig+0x348>)
 80082ec:	4013      	ands	r3, r2
 80082ee:	0019      	movs	r1, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	021a      	lsls	r2, r3, #8
 80082f6:	4b40      	ldr	r3, [pc, #256]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80082f8:	430a      	orrs	r2, r1
 80082fa:	605a      	str	r2, [r3, #4]
 80082fc:	e018      	b.n	8008330 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082fe:	4b3e      	ldr	r3, [pc, #248]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b3d      	ldr	r3, [pc, #244]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008304:	2101      	movs	r1, #1
 8008306:	438a      	bics	r2, r1
 8008308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800830a:	f7fc f9da 	bl	80046c2 <HAL_GetTick>
 800830e:	0003      	movs	r3, r0
 8008310:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008314:	f7fc f9d5 	bl	80046c2 <HAL_GetTick>
 8008318:	0002      	movs	r2, r0
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e293      	b.n	800884e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008326:	4b34      	ldr	r3, [pc, #208]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2204      	movs	r2, #4
 800832c:	4013      	ands	r3, r2
 800832e:	d1f1      	bne.n	8008314 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2210      	movs	r2, #16
 8008336:	4013      	ands	r3, r2
 8008338:	d100      	bne.n	800833c <HAL_RCC_OscConfig+0x280>
 800833a:	e0a2      	b.n	8008482 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d140      	bne.n	80083c4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008342:	4b2d      	ldr	r3, [pc, #180]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	2380      	movs	r3, #128	; 0x80
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4013      	ands	r3, r2
 800834c:	d005      	beq.n	800835a <HAL_RCC_OscConfig+0x29e>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e279      	b.n	800884e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800835a:	4b27      	ldr	r3, [pc, #156]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	4a2d      	ldr	r2, [pc, #180]	; (8008414 <HAL_RCC_OscConfig+0x358>)
 8008360:	4013      	ands	r3, r2
 8008362:	0019      	movs	r1, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008368:	4b23      	ldr	r3, [pc, #140]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 800836a:	430a      	orrs	r2, r1
 800836c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800836e:	4b22      	ldr	r3, [pc, #136]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	021b      	lsls	r3, r3, #8
 8008374:	0a19      	lsrs	r1, r3, #8
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	061a      	lsls	r2, r3, #24
 800837c:	4b1e      	ldr	r3, [pc, #120]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 800837e:	430a      	orrs	r2, r1
 8008380:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	0b5b      	lsrs	r3, r3, #13
 8008388:	3301      	adds	r3, #1
 800838a:	2280      	movs	r2, #128	; 0x80
 800838c:	0212      	lsls	r2, r2, #8
 800838e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008390:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	091b      	lsrs	r3, r3, #4
 8008396:	210f      	movs	r1, #15
 8008398:	400b      	ands	r3, r1
 800839a:	491b      	ldr	r1, [pc, #108]	; (8008408 <HAL_RCC_OscConfig+0x34c>)
 800839c:	5ccb      	ldrb	r3, [r1, r3]
 800839e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80083a0:	4b1a      	ldr	r3, [pc, #104]	; (800840c <HAL_RCC_OscConfig+0x350>)
 80083a2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80083a4:	4b1a      	ldr	r3, [pc, #104]	; (8008410 <HAL_RCC_OscConfig+0x354>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2513      	movs	r5, #19
 80083aa:	197c      	adds	r4, r7, r5
 80083ac:	0018      	movs	r0, r3
 80083ae:	f7fc f97f 	bl	80046b0 <HAL_InitTick>
 80083b2:	0003      	movs	r3, r0
 80083b4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80083b6:	197b      	adds	r3, r7, r5
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d061      	beq.n	8008482 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80083be:	197b      	adds	r3, r7, r5
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	e244      	b.n	800884e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d040      	beq.n	800844e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <HAL_RCC_OscConfig+0x33c>)
 80083d2:	2180      	movs	r1, #128	; 0x80
 80083d4:	0049      	lsls	r1, r1, #1
 80083d6:	430a      	orrs	r2, r1
 80083d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083da:	f7fc f972 	bl	80046c2 <HAL_GetTick>
 80083de:	0003      	movs	r3, r0
 80083e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80083e2:	e019      	b.n	8008418 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80083e4:	f7fc f96d 	bl	80046c2 <HAL_GetTick>
 80083e8:	0002      	movs	r2, r0
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d912      	bls.n	8008418 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e22b      	b.n	800884e <HAL_RCC_OscConfig+0x792>
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	40021000 	.word	0x40021000
 80083fc:	fffeffff 	.word	0xfffeffff
 8008400:	fffbffff 	.word	0xfffbffff
 8008404:	ffffe0ff 	.word	0xffffe0ff
 8008408:	0801da50 	.word	0x0801da50
 800840c:	20000070 	.word	0x20000070
 8008410:	20000074 	.word	0x20000074
 8008414:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008418:	4bca      	ldr	r3, [pc, #808]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	2380      	movs	r3, #128	; 0x80
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4013      	ands	r3, r2
 8008422:	d0df      	beq.n	80083e4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008424:	4bc7      	ldr	r3, [pc, #796]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4ac7      	ldr	r2, [pc, #796]	; (8008748 <HAL_RCC_OscConfig+0x68c>)
 800842a:	4013      	ands	r3, r2
 800842c:	0019      	movs	r1, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008432:	4bc4      	ldr	r3, [pc, #784]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008434:	430a      	orrs	r2, r1
 8008436:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008438:	4bc2      	ldr	r3, [pc, #776]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	0a19      	lsrs	r1, r3, #8
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	061a      	lsls	r2, r3, #24
 8008446:	4bbf      	ldr	r3, [pc, #764]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008448:	430a      	orrs	r2, r1
 800844a:	605a      	str	r2, [r3, #4]
 800844c:	e019      	b.n	8008482 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800844e:	4bbd      	ldr	r3, [pc, #756]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	4bbc      	ldr	r3, [pc, #752]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008454:	49bd      	ldr	r1, [pc, #756]	; (800874c <HAL_RCC_OscConfig+0x690>)
 8008456:	400a      	ands	r2, r1
 8008458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800845a:	f7fc f932 	bl	80046c2 <HAL_GetTick>
 800845e:	0003      	movs	r3, r0
 8008460:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008462:	e008      	b.n	8008476 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008464:	f7fc f92d 	bl	80046c2 <HAL_GetTick>
 8008468:	0002      	movs	r2, r0
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b02      	cmp	r3, #2
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e1eb      	b.n	800884e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008476:	4bb3      	ldr	r3, [pc, #716]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	2380      	movs	r3, #128	; 0x80
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4013      	ands	r3, r2
 8008480:	d1f0      	bne.n	8008464 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2208      	movs	r2, #8
 8008488:	4013      	ands	r3, r2
 800848a:	d036      	beq.n	80084fa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d019      	beq.n	80084c8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008494:	4bab      	ldr	r3, [pc, #684]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008496:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008498:	4baa      	ldr	r3, [pc, #680]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 800849a:	2101      	movs	r1, #1
 800849c:	430a      	orrs	r2, r1
 800849e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084a0:	f7fc f90f 	bl	80046c2 <HAL_GetTick>
 80084a4:	0003      	movs	r3, r0
 80084a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084a8:	e008      	b.n	80084bc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084aa:	f7fc f90a 	bl	80046c2 <HAL_GetTick>
 80084ae:	0002      	movs	r2, r0
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d901      	bls.n	80084bc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e1c8      	b.n	800884e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084bc:	4ba1      	ldr	r3, [pc, #644]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80084be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c0:	2202      	movs	r2, #2
 80084c2:	4013      	ands	r3, r2
 80084c4:	d0f1      	beq.n	80084aa <HAL_RCC_OscConfig+0x3ee>
 80084c6:	e018      	b.n	80084fa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084c8:	4b9e      	ldr	r3, [pc, #632]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80084ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084cc:	4b9d      	ldr	r3, [pc, #628]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80084ce:	2101      	movs	r1, #1
 80084d0:	438a      	bics	r2, r1
 80084d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084d4:	f7fc f8f5 	bl	80046c2 <HAL_GetTick>
 80084d8:	0003      	movs	r3, r0
 80084da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084dc:	e008      	b.n	80084f0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084de:	f7fc f8f0 	bl	80046c2 <HAL_GetTick>
 80084e2:	0002      	movs	r2, r0
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d901      	bls.n	80084f0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e1ae      	b.n	800884e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084f0:	4b94      	ldr	r3, [pc, #592]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80084f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f4:	2202      	movs	r2, #2
 80084f6:	4013      	ands	r3, r2
 80084f8:	d1f1      	bne.n	80084de <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2204      	movs	r2, #4
 8008500:	4013      	ands	r3, r2
 8008502:	d100      	bne.n	8008506 <HAL_RCC_OscConfig+0x44a>
 8008504:	e0ae      	b.n	8008664 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008506:	2023      	movs	r0, #35	; 0x23
 8008508:	183b      	adds	r3, r7, r0
 800850a:	2200      	movs	r2, #0
 800850c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800850e:	4b8d      	ldr	r3, [pc, #564]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008512:	2380      	movs	r3, #128	; 0x80
 8008514:	055b      	lsls	r3, r3, #21
 8008516:	4013      	ands	r3, r2
 8008518:	d109      	bne.n	800852e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800851a:	4b8a      	ldr	r3, [pc, #552]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 800851c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851e:	4b89      	ldr	r3, [pc, #548]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008520:	2180      	movs	r1, #128	; 0x80
 8008522:	0549      	lsls	r1, r1, #21
 8008524:	430a      	orrs	r2, r1
 8008526:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008528:	183b      	adds	r3, r7, r0
 800852a:	2201      	movs	r2, #1
 800852c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800852e:	4b88      	ldr	r3, [pc, #544]	; (8008750 <HAL_RCC_OscConfig+0x694>)
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	2380      	movs	r3, #128	; 0x80
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	4013      	ands	r3, r2
 8008538:	d11a      	bne.n	8008570 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800853a:	4b85      	ldr	r3, [pc, #532]	; (8008750 <HAL_RCC_OscConfig+0x694>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	4b84      	ldr	r3, [pc, #528]	; (8008750 <HAL_RCC_OscConfig+0x694>)
 8008540:	2180      	movs	r1, #128	; 0x80
 8008542:	0049      	lsls	r1, r1, #1
 8008544:	430a      	orrs	r2, r1
 8008546:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008548:	f7fc f8bb 	bl	80046c2 <HAL_GetTick>
 800854c:	0003      	movs	r3, r0
 800854e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008550:	e008      	b.n	8008564 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008552:	f7fc f8b6 	bl	80046c2 <HAL_GetTick>
 8008556:	0002      	movs	r2, r0
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	2b64      	cmp	r3, #100	; 0x64
 800855e:	d901      	bls.n	8008564 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e174      	b.n	800884e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008564:	4b7a      	ldr	r3, [pc, #488]	; (8008750 <HAL_RCC_OscConfig+0x694>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	2380      	movs	r3, #128	; 0x80
 800856a:	005b      	lsls	r3, r3, #1
 800856c:	4013      	ands	r3, r2
 800856e:	d0f0      	beq.n	8008552 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	2380      	movs	r3, #128	; 0x80
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	429a      	cmp	r2, r3
 800857a:	d107      	bne.n	800858c <HAL_RCC_OscConfig+0x4d0>
 800857c:	4b71      	ldr	r3, [pc, #452]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 800857e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008580:	4b70      	ldr	r3, [pc, #448]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008582:	2180      	movs	r1, #128	; 0x80
 8008584:	0049      	lsls	r1, r1, #1
 8008586:	430a      	orrs	r2, r1
 8008588:	651a      	str	r2, [r3, #80]	; 0x50
 800858a:	e031      	b.n	80085f0 <HAL_RCC_OscConfig+0x534>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10c      	bne.n	80085ae <HAL_RCC_OscConfig+0x4f2>
 8008594:	4b6b      	ldr	r3, [pc, #428]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008596:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008598:	4b6a      	ldr	r3, [pc, #424]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 800859a:	496c      	ldr	r1, [pc, #432]	; (800874c <HAL_RCC_OscConfig+0x690>)
 800859c:	400a      	ands	r2, r1
 800859e:	651a      	str	r2, [r3, #80]	; 0x50
 80085a0:	4b68      	ldr	r3, [pc, #416]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80085a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085a4:	4b67      	ldr	r3, [pc, #412]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80085a6:	496b      	ldr	r1, [pc, #428]	; (8008754 <HAL_RCC_OscConfig+0x698>)
 80085a8:	400a      	ands	r2, r1
 80085aa:	651a      	str	r2, [r3, #80]	; 0x50
 80085ac:	e020      	b.n	80085f0 <HAL_RCC_OscConfig+0x534>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	23a0      	movs	r3, #160	; 0xa0
 80085b4:	00db      	lsls	r3, r3, #3
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d10e      	bne.n	80085d8 <HAL_RCC_OscConfig+0x51c>
 80085ba:	4b62      	ldr	r3, [pc, #392]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80085bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085be:	4b61      	ldr	r3, [pc, #388]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80085c0:	2180      	movs	r1, #128	; 0x80
 80085c2:	00c9      	lsls	r1, r1, #3
 80085c4:	430a      	orrs	r2, r1
 80085c6:	651a      	str	r2, [r3, #80]	; 0x50
 80085c8:	4b5e      	ldr	r3, [pc, #376]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80085ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085cc:	4b5d      	ldr	r3, [pc, #372]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80085ce:	2180      	movs	r1, #128	; 0x80
 80085d0:	0049      	lsls	r1, r1, #1
 80085d2:	430a      	orrs	r2, r1
 80085d4:	651a      	str	r2, [r3, #80]	; 0x50
 80085d6:	e00b      	b.n	80085f0 <HAL_RCC_OscConfig+0x534>
 80085d8:	4b5a      	ldr	r3, [pc, #360]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80085da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085dc:	4b59      	ldr	r3, [pc, #356]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80085de:	495b      	ldr	r1, [pc, #364]	; (800874c <HAL_RCC_OscConfig+0x690>)
 80085e0:	400a      	ands	r2, r1
 80085e2:	651a      	str	r2, [r3, #80]	; 0x50
 80085e4:	4b57      	ldr	r3, [pc, #348]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80085e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085e8:	4b56      	ldr	r3, [pc, #344]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80085ea:	495a      	ldr	r1, [pc, #360]	; (8008754 <HAL_RCC_OscConfig+0x698>)
 80085ec:	400a      	ands	r2, r1
 80085ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d015      	beq.n	8008624 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085f8:	f7fc f863 	bl	80046c2 <HAL_GetTick>
 80085fc:	0003      	movs	r3, r0
 80085fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008600:	e009      	b.n	8008616 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008602:	f7fc f85e 	bl	80046c2 <HAL_GetTick>
 8008606:	0002      	movs	r2, r0
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	4a52      	ldr	r2, [pc, #328]	; (8008758 <HAL_RCC_OscConfig+0x69c>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e11b      	b.n	800884e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008616:	4b4b      	ldr	r3, [pc, #300]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800861a:	2380      	movs	r3, #128	; 0x80
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4013      	ands	r3, r2
 8008620:	d0ef      	beq.n	8008602 <HAL_RCC_OscConfig+0x546>
 8008622:	e014      	b.n	800864e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008624:	f7fc f84d 	bl	80046c2 <HAL_GetTick>
 8008628:	0003      	movs	r3, r0
 800862a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800862c:	e009      	b.n	8008642 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800862e:	f7fc f848 	bl	80046c2 <HAL_GetTick>
 8008632:	0002      	movs	r2, r0
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	4a47      	ldr	r2, [pc, #284]	; (8008758 <HAL_RCC_OscConfig+0x69c>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e105      	b.n	800884e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008642:	4b40      	ldr	r3, [pc, #256]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008646:	2380      	movs	r3, #128	; 0x80
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4013      	ands	r3, r2
 800864c:	d1ef      	bne.n	800862e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800864e:	2323      	movs	r3, #35	; 0x23
 8008650:	18fb      	adds	r3, r7, r3
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d105      	bne.n	8008664 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008658:	4b3a      	ldr	r3, [pc, #232]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 800865a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800865c:	4b39      	ldr	r3, [pc, #228]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 800865e:	493f      	ldr	r1, [pc, #252]	; (800875c <HAL_RCC_OscConfig+0x6a0>)
 8008660:	400a      	ands	r2, r1
 8008662:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2220      	movs	r2, #32
 800866a:	4013      	ands	r3, r2
 800866c:	d049      	beq.n	8008702 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d026      	beq.n	80086c4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008676:	4b33      	ldr	r3, [pc, #204]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	4b32      	ldr	r3, [pc, #200]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 800867c:	2101      	movs	r1, #1
 800867e:	430a      	orrs	r2, r1
 8008680:	609a      	str	r2, [r3, #8]
 8008682:	4b30      	ldr	r3, [pc, #192]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008686:	4b2f      	ldr	r3, [pc, #188]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008688:	2101      	movs	r1, #1
 800868a:	430a      	orrs	r2, r1
 800868c:	635a      	str	r2, [r3, #52]	; 0x34
 800868e:	4b34      	ldr	r3, [pc, #208]	; (8008760 <HAL_RCC_OscConfig+0x6a4>)
 8008690:	6a1a      	ldr	r2, [r3, #32]
 8008692:	4b33      	ldr	r3, [pc, #204]	; (8008760 <HAL_RCC_OscConfig+0x6a4>)
 8008694:	2180      	movs	r1, #128	; 0x80
 8008696:	0189      	lsls	r1, r1, #6
 8008698:	430a      	orrs	r2, r1
 800869a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800869c:	f7fc f811 	bl	80046c2 <HAL_GetTick>
 80086a0:	0003      	movs	r3, r0
 80086a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086a4:	e008      	b.n	80086b8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086a6:	f7fc f80c 	bl	80046c2 <HAL_GetTick>
 80086aa:	0002      	movs	r2, r0
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d901      	bls.n	80086b8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e0ca      	b.n	800884e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086b8:	4b22      	ldr	r3, [pc, #136]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	2202      	movs	r2, #2
 80086be:	4013      	ands	r3, r2
 80086c0:	d0f1      	beq.n	80086a6 <HAL_RCC_OscConfig+0x5ea>
 80086c2:	e01e      	b.n	8008702 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80086c4:	4b1f      	ldr	r3, [pc, #124]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	4b1e      	ldr	r3, [pc, #120]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80086ca:	2101      	movs	r1, #1
 80086cc:	438a      	bics	r2, r1
 80086ce:	609a      	str	r2, [r3, #8]
 80086d0:	4b23      	ldr	r3, [pc, #140]	; (8008760 <HAL_RCC_OscConfig+0x6a4>)
 80086d2:	6a1a      	ldr	r2, [r3, #32]
 80086d4:	4b22      	ldr	r3, [pc, #136]	; (8008760 <HAL_RCC_OscConfig+0x6a4>)
 80086d6:	4923      	ldr	r1, [pc, #140]	; (8008764 <HAL_RCC_OscConfig+0x6a8>)
 80086d8:	400a      	ands	r2, r1
 80086da:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086dc:	f7fb fff1 	bl	80046c2 <HAL_GetTick>
 80086e0:	0003      	movs	r3, r0
 80086e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086e4:	e008      	b.n	80086f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086e6:	f7fb ffec 	bl	80046c2 <HAL_GetTick>
 80086ea:	0002      	movs	r2, r0
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d901      	bls.n	80086f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e0aa      	b.n	800884e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086f8:	4b12      	ldr	r3, [pc, #72]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	2202      	movs	r2, #2
 80086fe:	4013      	ands	r3, r2
 8008700:	d1f1      	bne.n	80086e6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	2b00      	cmp	r3, #0
 8008708:	d100      	bne.n	800870c <HAL_RCC_OscConfig+0x650>
 800870a:	e09f      	b.n	800884c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b0c      	cmp	r3, #12
 8008710:	d100      	bne.n	8008714 <HAL_RCC_OscConfig+0x658>
 8008712:	e078      	b.n	8008806 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	2b02      	cmp	r3, #2
 800871a:	d159      	bne.n	80087d0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800871c:	4b09      	ldr	r3, [pc, #36]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	4b08      	ldr	r3, [pc, #32]	; (8008744 <HAL_RCC_OscConfig+0x688>)
 8008722:	4911      	ldr	r1, [pc, #68]	; (8008768 <HAL_RCC_OscConfig+0x6ac>)
 8008724:	400a      	ands	r2, r1
 8008726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008728:	f7fb ffcb 	bl	80046c2 <HAL_GetTick>
 800872c:	0003      	movs	r3, r0
 800872e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008730:	e01c      	b.n	800876c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008732:	f7fb ffc6 	bl	80046c2 <HAL_GetTick>
 8008736:	0002      	movs	r2, r0
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d915      	bls.n	800876c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e084      	b.n	800884e <HAL_RCC_OscConfig+0x792>
 8008744:	40021000 	.word	0x40021000
 8008748:	ffff1fff 	.word	0xffff1fff
 800874c:	fffffeff 	.word	0xfffffeff
 8008750:	40007000 	.word	0x40007000
 8008754:	fffffbff 	.word	0xfffffbff
 8008758:	00001388 	.word	0x00001388
 800875c:	efffffff 	.word	0xefffffff
 8008760:	40010000 	.word	0x40010000
 8008764:	ffffdfff 	.word	0xffffdfff
 8008768:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800876c:	4b3a      	ldr	r3, [pc, #232]	; (8008858 <HAL_RCC_OscConfig+0x79c>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	2380      	movs	r3, #128	; 0x80
 8008772:	049b      	lsls	r3, r3, #18
 8008774:	4013      	ands	r3, r2
 8008776:	d1dc      	bne.n	8008732 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008778:	4b37      	ldr	r3, [pc, #220]	; (8008858 <HAL_RCC_OscConfig+0x79c>)
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	4a37      	ldr	r2, [pc, #220]	; (800885c <HAL_RCC_OscConfig+0x7a0>)
 800877e:	4013      	ands	r3, r2
 8008780:	0019      	movs	r1, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008790:	431a      	orrs	r2, r3
 8008792:	4b31      	ldr	r3, [pc, #196]	; (8008858 <HAL_RCC_OscConfig+0x79c>)
 8008794:	430a      	orrs	r2, r1
 8008796:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008798:	4b2f      	ldr	r3, [pc, #188]	; (8008858 <HAL_RCC_OscConfig+0x79c>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	4b2e      	ldr	r3, [pc, #184]	; (8008858 <HAL_RCC_OscConfig+0x79c>)
 800879e:	2180      	movs	r1, #128	; 0x80
 80087a0:	0449      	lsls	r1, r1, #17
 80087a2:	430a      	orrs	r2, r1
 80087a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087a6:	f7fb ff8c 	bl	80046c2 <HAL_GetTick>
 80087aa:	0003      	movs	r3, r0
 80087ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80087ae:	e008      	b.n	80087c2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087b0:	f7fb ff87 	bl	80046c2 <HAL_GetTick>
 80087b4:	0002      	movs	r2, r0
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d901      	bls.n	80087c2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e045      	b.n	800884e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80087c2:	4b25      	ldr	r3, [pc, #148]	; (8008858 <HAL_RCC_OscConfig+0x79c>)
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	2380      	movs	r3, #128	; 0x80
 80087c8:	049b      	lsls	r3, r3, #18
 80087ca:	4013      	ands	r3, r2
 80087cc:	d0f0      	beq.n	80087b0 <HAL_RCC_OscConfig+0x6f4>
 80087ce:	e03d      	b.n	800884c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087d0:	4b21      	ldr	r3, [pc, #132]	; (8008858 <HAL_RCC_OscConfig+0x79c>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	4b20      	ldr	r3, [pc, #128]	; (8008858 <HAL_RCC_OscConfig+0x79c>)
 80087d6:	4922      	ldr	r1, [pc, #136]	; (8008860 <HAL_RCC_OscConfig+0x7a4>)
 80087d8:	400a      	ands	r2, r1
 80087da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087dc:	f7fb ff71 	bl	80046c2 <HAL_GetTick>
 80087e0:	0003      	movs	r3, r0
 80087e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80087e4:	e008      	b.n	80087f8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087e6:	f7fb ff6c 	bl	80046c2 <HAL_GetTick>
 80087ea:	0002      	movs	r2, r0
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d901      	bls.n	80087f8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e02a      	b.n	800884e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80087f8:	4b17      	ldr	r3, [pc, #92]	; (8008858 <HAL_RCC_OscConfig+0x79c>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	2380      	movs	r3, #128	; 0x80
 80087fe:	049b      	lsls	r3, r3, #18
 8008800:	4013      	ands	r3, r2
 8008802:	d1f0      	bne.n	80087e6 <HAL_RCC_OscConfig+0x72a>
 8008804:	e022      	b.n	800884c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e01d      	b.n	800884e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008812:	4b11      	ldr	r3, [pc, #68]	; (8008858 <HAL_RCC_OscConfig+0x79c>)
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	2380      	movs	r3, #128	; 0x80
 800881c:	025b      	lsls	r3, r3, #9
 800881e:	401a      	ands	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	429a      	cmp	r2, r3
 8008826:	d10f      	bne.n	8008848 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	23f0      	movs	r3, #240	; 0xf0
 800882c:	039b      	lsls	r3, r3, #14
 800882e:	401a      	ands	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008834:	429a      	cmp	r2, r3
 8008836:	d107      	bne.n	8008848 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	23c0      	movs	r3, #192	; 0xc0
 800883c:	041b      	lsls	r3, r3, #16
 800883e:	401a      	ands	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008844:	429a      	cmp	r2, r3
 8008846:	d001      	beq.n	800884c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e000      	b.n	800884e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	0018      	movs	r0, r3
 8008850:	46bd      	mov	sp, r7
 8008852:	b00a      	add	sp, #40	; 0x28
 8008854:	bdb0      	pop	{r4, r5, r7, pc}
 8008856:	46c0      	nop			; (mov r8, r8)
 8008858:	40021000 	.word	0x40021000
 800885c:	ff02ffff 	.word	0xff02ffff
 8008860:	feffffff 	.word	0xfeffffff

08008864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008864:	b5b0      	push	{r4, r5, r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e128      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008878:	4b96      	ldr	r3, [pc, #600]	; (8008ad4 <HAL_RCC_ClockConfig+0x270>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2201      	movs	r2, #1
 800887e:	4013      	ands	r3, r2
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d91e      	bls.n	80088c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008886:	4b93      	ldr	r3, [pc, #588]	; (8008ad4 <HAL_RCC_ClockConfig+0x270>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2201      	movs	r2, #1
 800888c:	4393      	bics	r3, r2
 800888e:	0019      	movs	r1, r3
 8008890:	4b90      	ldr	r3, [pc, #576]	; (8008ad4 <HAL_RCC_ClockConfig+0x270>)
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008898:	f7fb ff13 	bl	80046c2 <HAL_GetTick>
 800889c:	0003      	movs	r3, r0
 800889e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088a0:	e009      	b.n	80088b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088a2:	f7fb ff0e 	bl	80046c2 <HAL_GetTick>
 80088a6:	0002      	movs	r2, r0
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	4a8a      	ldr	r2, [pc, #552]	; (8008ad8 <HAL_RCC_ClockConfig+0x274>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e109      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088b6:	4b87      	ldr	r3, [pc, #540]	; (8008ad4 <HAL_RCC_ClockConfig+0x270>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2201      	movs	r2, #1
 80088bc:	4013      	ands	r3, r2
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d1ee      	bne.n	80088a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2202      	movs	r2, #2
 80088ca:	4013      	ands	r3, r2
 80088cc:	d009      	beq.n	80088e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088ce:	4b83      	ldr	r3, [pc, #524]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	22f0      	movs	r2, #240	; 0xf0
 80088d4:	4393      	bics	r3, r2
 80088d6:	0019      	movs	r1, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	4b7f      	ldr	r3, [pc, #508]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 80088de:	430a      	orrs	r2, r1
 80088e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2201      	movs	r2, #1
 80088e8:	4013      	ands	r3, r2
 80088ea:	d100      	bne.n	80088ee <HAL_RCC_ClockConfig+0x8a>
 80088ec:	e089      	b.n	8008a02 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d107      	bne.n	8008906 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088f6:	4b79      	ldr	r3, [pc, #484]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	2380      	movs	r3, #128	; 0x80
 80088fc:	029b      	lsls	r3, r3, #10
 80088fe:	4013      	ands	r3, r2
 8008900:	d120      	bne.n	8008944 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e0e1      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d107      	bne.n	800891e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800890e:	4b73      	ldr	r3, [pc, #460]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	2380      	movs	r3, #128	; 0x80
 8008914:	049b      	lsls	r3, r3, #18
 8008916:	4013      	ands	r3, r2
 8008918:	d114      	bne.n	8008944 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e0d5      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d106      	bne.n	8008934 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008926:	4b6d      	ldr	r3, [pc, #436]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2204      	movs	r2, #4
 800892c:	4013      	ands	r3, r2
 800892e:	d109      	bne.n	8008944 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e0ca      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008934:	4b69      	ldr	r3, [pc, #420]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	2380      	movs	r3, #128	; 0x80
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4013      	ands	r3, r2
 800893e:	d101      	bne.n	8008944 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0c2      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008944:	4b65      	ldr	r3, [pc, #404]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	2203      	movs	r2, #3
 800894a:	4393      	bics	r3, r2
 800894c:	0019      	movs	r1, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	4b62      	ldr	r3, [pc, #392]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008954:	430a      	orrs	r2, r1
 8008956:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008958:	f7fb feb3 	bl	80046c2 <HAL_GetTick>
 800895c:	0003      	movs	r3, r0
 800895e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	2b02      	cmp	r3, #2
 8008966:	d111      	bne.n	800898c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008968:	e009      	b.n	800897e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800896a:	f7fb feaa 	bl	80046c2 <HAL_GetTick>
 800896e:	0002      	movs	r2, r0
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	4a58      	ldr	r2, [pc, #352]	; (8008ad8 <HAL_RCC_ClockConfig+0x274>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d901      	bls.n	800897e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e0a5      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800897e:	4b57      	ldr	r3, [pc, #348]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	220c      	movs	r2, #12
 8008984:	4013      	ands	r3, r2
 8008986:	2b08      	cmp	r3, #8
 8008988:	d1ef      	bne.n	800896a <HAL_RCC_ClockConfig+0x106>
 800898a:	e03a      	b.n	8008a02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d111      	bne.n	80089b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008994:	e009      	b.n	80089aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008996:	f7fb fe94 	bl	80046c2 <HAL_GetTick>
 800899a:	0002      	movs	r2, r0
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	4a4d      	ldr	r2, [pc, #308]	; (8008ad8 <HAL_RCC_ClockConfig+0x274>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e08f      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089aa:	4b4c      	ldr	r3, [pc, #304]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	220c      	movs	r2, #12
 80089b0:	4013      	ands	r3, r2
 80089b2:	2b0c      	cmp	r3, #12
 80089b4:	d1ef      	bne.n	8008996 <HAL_RCC_ClockConfig+0x132>
 80089b6:	e024      	b.n	8008a02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d11b      	bne.n	80089f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80089c0:	e009      	b.n	80089d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089c2:	f7fb fe7e 	bl	80046c2 <HAL_GetTick>
 80089c6:	0002      	movs	r2, r0
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	4a42      	ldr	r2, [pc, #264]	; (8008ad8 <HAL_RCC_ClockConfig+0x274>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e079      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80089d6:	4b41      	ldr	r3, [pc, #260]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	220c      	movs	r2, #12
 80089dc:	4013      	ands	r3, r2
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d1ef      	bne.n	80089c2 <HAL_RCC_ClockConfig+0x15e>
 80089e2:	e00e      	b.n	8008a02 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089e4:	f7fb fe6d 	bl	80046c2 <HAL_GetTick>
 80089e8:	0002      	movs	r2, r0
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	4a3a      	ldr	r2, [pc, #232]	; (8008ad8 <HAL_RCC_ClockConfig+0x274>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d901      	bls.n	80089f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e068      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80089f8:	4b38      	ldr	r3, [pc, #224]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	220c      	movs	r2, #12
 80089fe:	4013      	ands	r3, r2
 8008a00:	d1f0      	bne.n	80089e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a02:	4b34      	ldr	r3, [pc, #208]	; (8008ad4 <HAL_RCC_ClockConfig+0x270>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2201      	movs	r2, #1
 8008a08:	4013      	ands	r3, r2
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d21e      	bcs.n	8008a4e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a10:	4b30      	ldr	r3, [pc, #192]	; (8008ad4 <HAL_RCC_ClockConfig+0x270>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2201      	movs	r2, #1
 8008a16:	4393      	bics	r3, r2
 8008a18:	0019      	movs	r1, r3
 8008a1a:	4b2e      	ldr	r3, [pc, #184]	; (8008ad4 <HAL_RCC_ClockConfig+0x270>)
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a22:	f7fb fe4e 	bl	80046c2 <HAL_GetTick>
 8008a26:	0003      	movs	r3, r0
 8008a28:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a2a:	e009      	b.n	8008a40 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a2c:	f7fb fe49 	bl	80046c2 <HAL_GetTick>
 8008a30:	0002      	movs	r2, r0
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	4a28      	ldr	r2, [pc, #160]	; (8008ad8 <HAL_RCC_ClockConfig+0x274>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d901      	bls.n	8008a40 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e044      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a40:	4b24      	ldr	r3, [pc, #144]	; (8008ad4 <HAL_RCC_ClockConfig+0x270>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2201      	movs	r2, #1
 8008a46:	4013      	ands	r3, r2
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d1ee      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2204      	movs	r2, #4
 8008a54:	4013      	ands	r3, r2
 8008a56:	d009      	beq.n	8008a6c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a58:	4b20      	ldr	r3, [pc, #128]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	4a20      	ldr	r2, [pc, #128]	; (8008ae0 <HAL_RCC_ClockConfig+0x27c>)
 8008a5e:	4013      	ands	r3, r2
 8008a60:	0019      	movs	r1, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	4b1d      	ldr	r3, [pc, #116]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2208      	movs	r2, #8
 8008a72:	4013      	ands	r3, r2
 8008a74:	d00a      	beq.n	8008a8c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008a76:	4b19      	ldr	r3, [pc, #100]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ae4 <HAL_RCC_ClockConfig+0x280>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	0019      	movs	r1, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	00da      	lsls	r2, r3, #3
 8008a86:	4b15      	ldr	r3, [pc, #84]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a8c:	f000 f832 	bl	8008af4 <HAL_RCC_GetSysClockFreq>
 8008a90:	0001      	movs	r1, r0
 8008a92:	4b12      	ldr	r3, [pc, #72]	; (8008adc <HAL_RCC_ClockConfig+0x278>)
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	091b      	lsrs	r3, r3, #4
 8008a98:	220f      	movs	r2, #15
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	4a12      	ldr	r2, [pc, #72]	; (8008ae8 <HAL_RCC_ClockConfig+0x284>)
 8008a9e:	5cd3      	ldrb	r3, [r2, r3]
 8008aa0:	000a      	movs	r2, r1
 8008aa2:	40da      	lsrs	r2, r3
 8008aa4:	4b11      	ldr	r3, [pc, #68]	; (8008aec <HAL_RCC_ClockConfig+0x288>)
 8008aa6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008aa8:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <HAL_RCC_ClockConfig+0x28c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	250b      	movs	r5, #11
 8008aae:	197c      	adds	r4, r7, r5
 8008ab0:	0018      	movs	r0, r3
 8008ab2:	f7fb fdfd 	bl	80046b0 <HAL_InitTick>
 8008ab6:	0003      	movs	r3, r0
 8008ab8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008aba:	197b      	adds	r3, r7, r5
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8008ac2:	197b      	adds	r3, r7, r5
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	e000      	b.n	8008aca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	0018      	movs	r0, r3
 8008acc:	46bd      	mov	sp, r7
 8008ace:	b004      	add	sp, #16
 8008ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ad2:	46c0      	nop			; (mov r8, r8)
 8008ad4:	40022000 	.word	0x40022000
 8008ad8:	00001388 	.word	0x00001388
 8008adc:	40021000 	.word	0x40021000
 8008ae0:	fffff8ff 	.word	0xfffff8ff
 8008ae4:	ffffc7ff 	.word	0xffffc7ff
 8008ae8:	0801da50 	.word	0x0801da50
 8008aec:	20000070 	.word	0x20000070
 8008af0:	20000074 	.word	0x20000074

08008af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008af4:	b5b0      	push	{r4, r5, r7, lr}
 8008af6:	b08e      	sub	sp, #56	; 0x38
 8008af8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008afa:	4b4c      	ldr	r3, [pc, #304]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b02:	230c      	movs	r3, #12
 8008b04:	4013      	ands	r3, r2
 8008b06:	2b0c      	cmp	r3, #12
 8008b08:	d014      	beq.n	8008b34 <HAL_RCC_GetSysClockFreq+0x40>
 8008b0a:	d900      	bls.n	8008b0e <HAL_RCC_GetSysClockFreq+0x1a>
 8008b0c:	e07b      	b.n	8008c06 <HAL_RCC_GetSysClockFreq+0x112>
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d002      	beq.n	8008b18 <HAL_RCC_GetSysClockFreq+0x24>
 8008b12:	2b08      	cmp	r3, #8
 8008b14:	d00b      	beq.n	8008b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8008b16:	e076      	b.n	8008c06 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008b18:	4b44      	ldr	r3, [pc, #272]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2210      	movs	r2, #16
 8008b1e:	4013      	ands	r3, r2
 8008b20:	d002      	beq.n	8008b28 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008b22:	4b43      	ldr	r3, [pc, #268]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008b24:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008b26:	e07c      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008b28:	4b42      	ldr	r3, [pc, #264]	; (8008c34 <HAL_RCC_GetSysClockFreq+0x140>)
 8008b2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008b2c:	e079      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008b2e:	4b42      	ldr	r3, [pc, #264]	; (8008c38 <HAL_RCC_GetSysClockFreq+0x144>)
 8008b30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008b32:	e076      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	0c9a      	lsrs	r2, r3, #18
 8008b38:	230f      	movs	r3, #15
 8008b3a:	401a      	ands	r2, r3
 8008b3c:	4b3f      	ldr	r3, [pc, #252]	; (8008c3c <HAL_RCC_GetSysClockFreq+0x148>)
 8008b3e:	5c9b      	ldrb	r3, [r3, r2]
 8008b40:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b44:	0d9a      	lsrs	r2, r3, #22
 8008b46:	2303      	movs	r3, #3
 8008b48:	4013      	ands	r3, r2
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b4e:	4b37      	ldr	r3, [pc, #220]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	2380      	movs	r3, #128	; 0x80
 8008b54:	025b      	lsls	r3, r3, #9
 8008b56:	4013      	ands	r3, r2
 8008b58:	d01a      	beq.n	8008b90 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61fb      	str	r3, [r7, #28]
 8008b62:	4a35      	ldr	r2, [pc, #212]	; (8008c38 <HAL_RCC_GetSysClockFreq+0x144>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	69b8      	ldr	r0, [r7, #24]
 8008b68:	69f9      	ldr	r1, [r7, #28]
 8008b6a:	f7f7 fccd 	bl	8000508 <__aeabi_lmul>
 8008b6e:	0002      	movs	r2, r0
 8008b70:	000b      	movs	r3, r1
 8008b72:	0010      	movs	r0, r2
 8008b74:	0019      	movs	r1, r3
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	613b      	str	r3, [r7, #16]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f7f7 fca1 	bl	80004c8 <__aeabi_uldivmod>
 8008b86:	0002      	movs	r2, r0
 8008b88:	000b      	movs	r3, r1
 8008b8a:	0013      	movs	r3, r2
 8008b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b8e:	e037      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008b90:	4b26      	ldr	r3, [pc, #152]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2210      	movs	r2, #16
 8008b96:	4013      	ands	r3, r2
 8008b98:	d01a      	beq.n	8008bd0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	60bb      	str	r3, [r7, #8]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60fb      	str	r3, [r7, #12]
 8008ba2:	4a23      	ldr	r2, [pc, #140]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	68b8      	ldr	r0, [r7, #8]
 8008ba8:	68f9      	ldr	r1, [r7, #12]
 8008baa:	f7f7 fcad 	bl	8000508 <__aeabi_lmul>
 8008bae:	0002      	movs	r2, r0
 8008bb0:	000b      	movs	r3, r1
 8008bb2:	0010      	movs	r0, r2
 8008bb4:	0019      	movs	r1, r3
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	603b      	str	r3, [r7, #0]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f7f7 fc81 	bl	80004c8 <__aeabi_uldivmod>
 8008bc6:	0002      	movs	r2, r0
 8008bc8:	000b      	movs	r3, r1
 8008bca:	0013      	movs	r3, r2
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8008bce:	e017      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	0019      	movs	r1, r3
 8008bd8:	4a16      	ldr	r2, [pc, #88]	; (8008c34 <HAL_RCC_GetSysClockFreq+0x140>)
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f7f7 fc94 	bl	8000508 <__aeabi_lmul>
 8008be0:	0002      	movs	r2, r0
 8008be2:	000b      	movs	r3, r1
 8008be4:	0010      	movs	r0, r2
 8008be6:	0019      	movs	r1, r3
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	001c      	movs	r4, r3
 8008bec:	2300      	movs	r3, #0
 8008bee:	001d      	movs	r5, r3
 8008bf0:	0022      	movs	r2, r4
 8008bf2:	002b      	movs	r3, r5
 8008bf4:	f7f7 fc68 	bl	80004c8 <__aeabi_uldivmod>
 8008bf8:	0002      	movs	r2, r0
 8008bfa:	000b      	movs	r3, r1
 8008bfc:	0013      	movs	r3, r2
 8008bfe:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8008c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008c04:	e00d      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008c06:	4b09      	ldr	r3, [pc, #36]	; (8008c2c <HAL_RCC_GetSysClockFreq+0x138>)
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	0b5b      	lsrs	r3, r3, #13
 8008c0c:	2207      	movs	r2, #7
 8008c0e:	4013      	ands	r3, r2
 8008c10:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	3301      	adds	r3, #1
 8008c16:	2280      	movs	r2, #128	; 0x80
 8008c18:	0212      	lsls	r2, r2, #8
 8008c1a:	409a      	lsls	r2, r3
 8008c1c:	0013      	movs	r3, r2
 8008c1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008c20:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008c24:	0018      	movs	r0, r3
 8008c26:	46bd      	mov	sp, r7
 8008c28:	b00e      	add	sp, #56	; 0x38
 8008c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8008c2c:	40021000 	.word	0x40021000
 8008c30:	003d0900 	.word	0x003d0900
 8008c34:	00f42400 	.word	0x00f42400
 8008c38:	007a1200 	.word	0x007a1200
 8008c3c:	0801da68 	.word	0x0801da68

08008c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c44:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8008c46:	681b      	ldr	r3, [r3, #0]
}
 8008c48:	0018      	movs	r0, r3
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	20000070 	.word	0x20000070

08008c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008c58:	f7ff fff2 	bl	8008c40 <HAL_RCC_GetHCLKFreq>
 8008c5c:	0001      	movs	r1, r0
 8008c5e:	4b06      	ldr	r3, [pc, #24]	; (8008c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	2207      	movs	r2, #7
 8008c66:	4013      	ands	r3, r2
 8008c68:	4a04      	ldr	r2, [pc, #16]	; (8008c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c6a:	5cd3      	ldrb	r3, [r2, r3]
 8008c6c:	40d9      	lsrs	r1, r3
 8008c6e:	000b      	movs	r3, r1
}
 8008c70:	0018      	movs	r0, r3
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	40021000 	.word	0x40021000
 8008c7c:	0801da60 	.word	0x0801da60

08008c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c84:	f7ff ffdc 	bl	8008c40 <HAL_RCC_GetHCLKFreq>
 8008c88:	0001      	movs	r1, r0
 8008c8a:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	0adb      	lsrs	r3, r3, #11
 8008c90:	2207      	movs	r2, #7
 8008c92:	4013      	ands	r3, r2
 8008c94:	4a04      	ldr	r2, [pc, #16]	; (8008ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c96:	5cd3      	ldrb	r3, [r2, r3]
 8008c98:	40d9      	lsrs	r1, r3
 8008c9a:	000b      	movs	r3, r1
}
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	46c0      	nop			; (mov r8, r8)
 8008ca4:	40021000 	.word	0x40021000
 8008ca8:	0801da60 	.word	0x0801da60

08008cac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8008cb4:	2017      	movs	r0, #23
 8008cb6:	183b      	adds	r3, r7, r0
 8008cb8:	2200      	movs	r2, #0
 8008cba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	d100      	bne.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8008cc6:	e0c2      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cc8:	4b98      	ldr	r3, [pc, #608]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ccc:	2380      	movs	r3, #128	; 0x80
 8008cce:	055b      	lsls	r3, r3, #21
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	d109      	bne.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cd4:	4b95      	ldr	r3, [pc, #596]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cd8:	4b94      	ldr	r3, [pc, #592]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008cda:	2180      	movs	r1, #128	; 0x80
 8008cdc:	0549      	lsls	r1, r1, #21
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008ce2:	183b      	adds	r3, r7, r0
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ce8:	4b91      	ldr	r3, [pc, #580]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	2380      	movs	r3, #128	; 0x80
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	d11a      	bne.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cf4:	4b8e      	ldr	r3, [pc, #568]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	4b8d      	ldr	r3, [pc, #564]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008cfa:	2180      	movs	r1, #128	; 0x80
 8008cfc:	0049      	lsls	r1, r1, #1
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d02:	f7fb fcde 	bl	80046c2 <HAL_GetTick>
 8008d06:	0003      	movs	r3, r0
 8008d08:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d0a:	e008      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d0c:	f7fb fcd9 	bl	80046c2 <HAL_GetTick>
 8008d10:	0002      	movs	r2, r0
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	2b64      	cmp	r3, #100	; 0x64
 8008d18:	d901      	bls.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e102      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d1e:	4b84      	ldr	r3, [pc, #528]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	2380      	movs	r3, #128	; 0x80
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	4013      	ands	r3, r2
 8008d28:	d0f0      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008d2a:	4b80      	ldr	r3, [pc, #512]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	23c0      	movs	r3, #192	; 0xc0
 8008d30:	039b      	lsls	r3, r3, #14
 8008d32:	4013      	ands	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	23c0      	movs	r3, #192	; 0xc0
 8008d3c:	039b      	lsls	r3, r3, #14
 8008d3e:	4013      	ands	r3, r2
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d013      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	23c0      	movs	r3, #192	; 0xc0
 8008d4c:	029b      	lsls	r3, r3, #10
 8008d4e:	401a      	ands	r2, r3
 8008d50:	23c0      	movs	r3, #192	; 0xc0
 8008d52:	029b      	lsls	r3, r3, #10
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d10a      	bne.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d58:	4b74      	ldr	r3, [pc, #464]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	2380      	movs	r3, #128	; 0x80
 8008d5e:	029b      	lsls	r3, r3, #10
 8008d60:	401a      	ands	r2, r3
 8008d62:	2380      	movs	r3, #128	; 0x80
 8008d64:	029b      	lsls	r3, r3, #10
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d101      	bne.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e0da      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008d6e:	4b6f      	ldr	r3, [pc, #444]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d72:	23c0      	movs	r3, #192	; 0xc0
 8008d74:	029b      	lsls	r3, r3, #10
 8008d76:	4013      	ands	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d03b      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	23c0      	movs	r3, #192	; 0xc0
 8008d86:	029b      	lsls	r3, r3, #10
 8008d88:	4013      	ands	r3, r2
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d033      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2220      	movs	r2, #32
 8008d96:	4013      	ands	r3, r2
 8008d98:	d02e      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008d9a:	4b64      	ldr	r3, [pc, #400]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d9e:	4a65      	ldr	r2, [pc, #404]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008da4:	4b61      	ldr	r3, [pc, #388]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008da8:	4b60      	ldr	r3, [pc, #384]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008daa:	2180      	movs	r1, #128	; 0x80
 8008dac:	0309      	lsls	r1, r1, #12
 8008dae:	430a      	orrs	r2, r1
 8008db0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008db2:	4b5e      	ldr	r3, [pc, #376]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008db4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008db6:	4b5d      	ldr	r3, [pc, #372]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008db8:	495f      	ldr	r1, [pc, #380]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008dba:	400a      	ands	r2, r1
 8008dbc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008dbe:	4b5b      	ldr	r3, [pc, #364]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	2380      	movs	r3, #128	; 0x80
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	4013      	ands	r3, r2
 8008dcc:	d014      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dce:	f7fb fc78 	bl	80046c2 <HAL_GetTick>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dd6:	e009      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dd8:	f7fb fc73 	bl	80046c2 <HAL_GetTick>
 8008ddc:	0002      	movs	r2, r0
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	4a56      	ldr	r2, [pc, #344]	; (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d901      	bls.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e09b      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dec:	4b4f      	ldr	r3, [pc, #316]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008df0:	2380      	movs	r3, #128	; 0x80
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4013      	ands	r3, r2
 8008df6:	d0ef      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	23c0      	movs	r3, #192	; 0xc0
 8008dfe:	029b      	lsls	r3, r3, #10
 8008e00:	401a      	ands	r2, r3
 8008e02:	23c0      	movs	r3, #192	; 0xc0
 8008e04:	029b      	lsls	r3, r3, #10
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d10c      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8008e0a:	4b48      	ldr	r3, [pc, #288]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a4c      	ldr	r2, [pc, #304]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	0019      	movs	r1, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	23c0      	movs	r3, #192	; 0xc0
 8008e1a:	039b      	lsls	r3, r3, #14
 8008e1c:	401a      	ands	r2, r3
 8008e1e:	4b43      	ldr	r3, [pc, #268]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e20:	430a      	orrs	r2, r1
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	4b41      	ldr	r3, [pc, #260]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e26:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	23c0      	movs	r3, #192	; 0xc0
 8008e2e:	029b      	lsls	r3, r3, #10
 8008e30:	401a      	ands	r2, r3
 8008e32:	4b3e      	ldr	r3, [pc, #248]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e34:	430a      	orrs	r2, r1
 8008e36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008e38:	2317      	movs	r3, #23
 8008e3a:	18fb      	adds	r3, r7, r3
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d105      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e42:	4b3a      	ldr	r3, [pc, #232]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e46:	4b39      	ldr	r3, [pc, #228]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e48:	493e      	ldr	r1, [pc, #248]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008e4a:	400a      	ands	r2, r1
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2201      	movs	r2, #1
 8008e54:	4013      	ands	r3, r2
 8008e56:	d009      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e58:	4b34      	ldr	r3, [pc, #208]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	4393      	bics	r3, r2
 8008e60:	0019      	movs	r1, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689a      	ldr	r2, [r3, #8]
 8008e66:	4b31      	ldr	r3, [pc, #196]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2202      	movs	r2, #2
 8008e72:	4013      	ands	r3, r2
 8008e74:	d009      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e76:	4b2d      	ldr	r3, [pc, #180]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e7a:	220c      	movs	r2, #12
 8008e7c:	4393      	bics	r3, r2
 8008e7e:	0019      	movs	r1, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	4b29      	ldr	r3, [pc, #164]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e86:	430a      	orrs	r2, r1
 8008e88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	4013      	ands	r3, r2
 8008e92:	d009      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e94:	4b25      	ldr	r3, [pc, #148]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e98:	4a2b      	ldr	r2, [pc, #172]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	0019      	movs	r1, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691a      	ldr	r2, [r3, #16]
 8008ea2:	4b22      	ldr	r3, [pc, #136]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2208      	movs	r2, #8
 8008eae:	4013      	ands	r3, r2
 8008eb0:	d009      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008eb2:	4b1e      	ldr	r3, [pc, #120]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb6:	4a25      	ldr	r2, [pc, #148]	; (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8008eb8:	4013      	ands	r3, r2
 8008eba:	0019      	movs	r1, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	695a      	ldr	r2, [r3, #20]
 8008ec0:	4b1a      	ldr	r3, [pc, #104]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	2380      	movs	r3, #128	; 0x80
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	4013      	ands	r3, r2
 8008ed0:	d009      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ed2:	4b16      	ldr	r3, [pc, #88]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ed6:	4a17      	ldr	r2, [pc, #92]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008ed8:	4013      	ands	r3, r2
 8008eda:	0019      	movs	r1, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	699a      	ldr	r2, [r3, #24]
 8008ee0:	4b12      	ldr	r3, [pc, #72]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2240      	movs	r2, #64	; 0x40
 8008eec:	4013      	ands	r3, r2
 8008eee:	d009      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ef0:	4b0e      	ldr	r3, [pc, #56]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef4:	4a16      	ldr	r2, [pc, #88]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	0019      	movs	r1, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1a      	ldr	r2, [r3, #32]
 8008efe:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f00:	430a      	orrs	r2, r1
 8008f02:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2280      	movs	r2, #128	; 0x80
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	d009      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008f0e:	4b07      	ldr	r3, [pc, #28]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f12:	4a10      	ldr	r2, [pc, #64]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	0019      	movs	r1, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	69da      	ldr	r2, [r3, #28]
 8008f1c:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	0018      	movs	r0, r3
 8008f26:	46bd      	mov	sp, r7
 8008f28:	b006      	add	sp, #24
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	40021000 	.word	0x40021000
 8008f30:	40007000 	.word	0x40007000
 8008f34:	fffcffff 	.word	0xfffcffff
 8008f38:	fff7ffff 	.word	0xfff7ffff
 8008f3c:	00001388 	.word	0x00001388
 8008f40:	ffcfffff 	.word	0xffcfffff
 8008f44:	efffffff 	.word	0xefffffff
 8008f48:	fffff3ff 	.word	0xfffff3ff
 8008f4c:	ffffcfff 	.word	0xffffcfff
 8008f50:	fbffffff 	.word	0xfbffffff
 8008f54:	fff3ffff 	.word	0xfff3ffff

08008f58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e08e      	b.n	8009088 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2221      	movs	r2, #33	; 0x21
 8008f6e:	5c9b      	ldrb	r3, [r3, r2]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d107      	bne.n	8008f86 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2220      	movs	r2, #32
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	0018      	movs	r0, r3
 8008f82:	f7fa fbf7 	bl	8003774 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2221      	movs	r2, #33	; 0x21
 8008f8a:	2102      	movs	r1, #2
 8008f8c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	22ca      	movs	r2, #202	; 0xca
 8008f94:	625a      	str	r2, [r3, #36]	; 0x24
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2253      	movs	r2, #83	; 0x53
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	f000 fcf4 	bl	800998e <RTC_EnterInitMode>
 8008fa6:	1e03      	subs	r3, r0, #0
 8008fa8:	d009      	beq.n	8008fbe <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	22ff      	movs	r2, #255	; 0xff
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2221      	movs	r2, #33	; 0x21
 8008fb6:	2104      	movs	r1, #4
 8008fb8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e064      	b.n	8009088 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689a      	ldr	r2, [r3, #8]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4931      	ldr	r1, [pc, #196]	; (8009090 <HAL_RTC_Init+0x138>)
 8008fca:	400a      	ands	r2, r1
 8008fcc:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6899      	ldr	r1, [r3, #8]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	68d2      	ldr	r2, [r2, #12]
 8008ff4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6919      	ldr	r1, [r3, #16]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	041a      	lsls	r2, r3, #16
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68da      	ldr	r2, [r3, #12]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2180      	movs	r1, #128	; 0x80
 8009016:	438a      	bics	r2, r1
 8009018:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2103      	movs	r1, #3
 8009026:	438a      	bics	r2, r1
 8009028:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	69da      	ldr	r2, [r3, #28]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	430a      	orrs	r2, r1
 8009040:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	2220      	movs	r2, #32
 800904a:	4013      	ands	r3, r2
 800904c:	d113      	bne.n	8009076 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	0018      	movs	r0, r3
 8009052:	f000 fc75 	bl	8009940 <HAL_RTC_WaitForSynchro>
 8009056:	1e03      	subs	r3, r0, #0
 8009058:	d00d      	beq.n	8009076 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	22ff      	movs	r2, #255	; 0xff
 8009060:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2221      	movs	r2, #33	; 0x21
 8009066:	2104      	movs	r1, #4
 8009068:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	2100      	movs	r1, #0
 8009070:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e008      	b.n	8009088 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	22ff      	movs	r2, #255	; 0xff
 800907c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2221      	movs	r2, #33	; 0x21
 8009082:	2101      	movs	r1, #1
 8009084:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009086:	2300      	movs	r3, #0
  }
}
 8009088:	0018      	movs	r0, r3
 800908a:	46bd      	mov	sp, r7
 800908c:	b002      	add	sp, #8
 800908e:	bd80      	pop	{r7, pc}
 8009090:	ff8fffbf 	.word	0xff8fffbf

08009094 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009094:	b590      	push	{r4, r7, lr}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2220      	movs	r2, #32
 80090a4:	5c9b      	ldrb	r3, [r3, r2]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d101      	bne.n	80090ae <HAL_RTC_SetTime+0x1a>
 80090aa:	2302      	movs	r3, #2
 80090ac:	e0ad      	b.n	800920a <HAL_RTC_SetTime+0x176>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2220      	movs	r2, #32
 80090b2:	2101      	movs	r1, #1
 80090b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2221      	movs	r2, #33	; 0x21
 80090ba:	2102      	movs	r1, #2
 80090bc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d125      	bne.n	8009110 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	2240      	movs	r2, #64	; 0x40
 80090cc:	4013      	ands	r3, r2
 80090ce:	d102      	bne.n	80090d6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2200      	movs	r2, #0
 80090d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	0018      	movs	r0, r3
 80090dc:	f000 fc81 	bl	80099e2 <RTC_ByteToBcd2>
 80090e0:	0003      	movs	r3, r0
 80090e2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	0018      	movs	r0, r3
 80090ea:	f000 fc7a 	bl	80099e2 <RTC_ByteToBcd2>
 80090ee:	0003      	movs	r3, r0
 80090f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80090f2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	789b      	ldrb	r3, [r3, #2]
 80090f8:	0018      	movs	r0, r3
 80090fa:	f000 fc72 	bl	80099e2 <RTC_ByteToBcd2>
 80090fe:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009100:	0022      	movs	r2, r4
 8009102:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	78db      	ldrb	r3, [r3, #3]
 8009108:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	e017      	b.n	8009140 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	2240      	movs	r2, #64	; 0x40
 8009118:	4013      	ands	r3, r2
 800911a:	d102      	bne.n	8009122 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	785b      	ldrb	r3, [r3, #1]
 800912c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800912e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009134:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	78db      	ldrb	r3, [r3, #3]
 800913a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800913c:	4313      	orrs	r3, r2
 800913e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	22ca      	movs	r2, #202	; 0xca
 8009146:	625a      	str	r2, [r3, #36]	; 0x24
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2253      	movs	r2, #83	; 0x53
 800914e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	0018      	movs	r0, r3
 8009154:	f000 fc1b 	bl	800998e <RTC_EnterInitMode>
 8009158:	1e03      	subs	r3, r0, #0
 800915a:	d00d      	beq.n	8009178 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	22ff      	movs	r2, #255	; 0xff
 8009162:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2221      	movs	r2, #33	; 0x21
 8009168:	2104      	movs	r1, #4
 800916a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2220      	movs	r2, #32
 8009170:	2100      	movs	r1, #0
 8009172:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e048      	b.n	800920a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	4925      	ldr	r1, [pc, #148]	; (8009214 <HAL_RTC_SetTime+0x180>)
 8009180:	400a      	ands	r2, r1
 8009182:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4922      	ldr	r1, [pc, #136]	; (8009218 <HAL_RTC_SetTime+0x184>)
 8009190:	400a      	ands	r2, r1
 8009192:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6899      	ldr	r1, [r3, #8]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	431a      	orrs	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68da      	ldr	r2, [r3, #12]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2180      	movs	r1, #128	; 0x80
 80091b8:	438a      	bics	r2, r1
 80091ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	2220      	movs	r2, #32
 80091c4:	4013      	ands	r3, r2
 80091c6:	d113      	bne.n	80091f0 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	0018      	movs	r0, r3
 80091cc:	f000 fbb8 	bl	8009940 <HAL_RTC_WaitForSynchro>
 80091d0:	1e03      	subs	r3, r0, #0
 80091d2:	d00d      	beq.n	80091f0 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	22ff      	movs	r2, #255	; 0xff
 80091da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2221      	movs	r2, #33	; 0x21
 80091e0:	2104      	movs	r1, #4
 80091e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2220      	movs	r2, #32
 80091e8:	2100      	movs	r1, #0
 80091ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e00c      	b.n	800920a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	22ff      	movs	r2, #255	; 0xff
 80091f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2221      	movs	r2, #33	; 0x21
 80091fc:	2101      	movs	r1, #1
 80091fe:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2220      	movs	r2, #32
 8009204:	2100      	movs	r1, #0
 8009206:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009208:	2300      	movs	r3, #0
  }
}
 800920a:	0018      	movs	r0, r3
 800920c:	46bd      	mov	sp, r7
 800920e:	b007      	add	sp, #28
 8009210:	bd90      	pop	{r4, r7, pc}
 8009212:	46c0      	nop			; (mov r8, r8)
 8009214:	007f7f7f 	.word	0x007f7f7f
 8009218:	fffbffff 	.word	0xfffbffff

0800921c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	045b      	lsls	r3, r3, #17
 800923a:	0c5a      	lsrs	r2, r3, #17
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a22      	ldr	r2, [pc, #136]	; (80092d0 <HAL_RTC_GetTime+0xb4>)
 8009248:	4013      	ands	r3, r2
 800924a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	0c1b      	lsrs	r3, r3, #16
 8009250:	b2db      	uxtb	r3, r3
 8009252:	223f      	movs	r2, #63	; 0x3f
 8009254:	4013      	ands	r3, r2
 8009256:	b2da      	uxtb	r2, r3
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	0a1b      	lsrs	r3, r3, #8
 8009260:	b2db      	uxtb	r3, r3
 8009262:	227f      	movs	r2, #127	; 0x7f
 8009264:	4013      	ands	r3, r2
 8009266:	b2da      	uxtb	r2, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	227f      	movs	r2, #127	; 0x7f
 8009272:	4013      	ands	r3, r2
 8009274:	b2da      	uxtb	r2, r3
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	0c1b      	lsrs	r3, r3, #16
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2240      	movs	r2, #64	; 0x40
 8009282:	4013      	ands	r3, r2
 8009284:	b2da      	uxtb	r2, r3
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d11a      	bne.n	80092c6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	0018      	movs	r0, r3
 8009296:	f000 fbcc 	bl	8009a32 <RTC_Bcd2ToByte>
 800929a:	0003      	movs	r3, r0
 800929c:	001a      	movs	r2, r3
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	785b      	ldrb	r3, [r3, #1]
 80092a6:	0018      	movs	r0, r3
 80092a8:	f000 fbc3 	bl	8009a32 <RTC_Bcd2ToByte>
 80092ac:	0003      	movs	r3, r0
 80092ae:	001a      	movs	r2, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	789b      	ldrb	r3, [r3, #2]
 80092b8:	0018      	movs	r0, r3
 80092ba:	f000 fbba 	bl	8009a32 <RTC_Bcd2ToByte>
 80092be:	0003      	movs	r3, r0
 80092c0:	001a      	movs	r2, r3
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	0018      	movs	r0, r3
 80092ca:	46bd      	mov	sp, r7
 80092cc:	b006      	add	sp, #24
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	007f7f7f 	.word	0x007f7f7f

080092d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80092d4:	b590      	push	{r4, r7, lr}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	5c9b      	ldrb	r3, [r3, r2]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <HAL_RTC_SetDate+0x1a>
 80092ea:	2302      	movs	r3, #2
 80092ec:	e099      	b.n	8009422 <HAL_RTC_SetDate+0x14e>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2220      	movs	r2, #32
 80092f2:	2101      	movs	r1, #1
 80092f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2221      	movs	r2, #33	; 0x21
 80092fa:	2102      	movs	r1, #2
 80092fc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10e      	bne.n	8009322 <HAL_RTC_SetDate+0x4e>
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	001a      	movs	r2, r3
 800930a:	2310      	movs	r3, #16
 800930c:	4013      	ands	r3, r2
 800930e:	d008      	beq.n	8009322 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	785b      	ldrb	r3, [r3, #1]
 8009314:	2210      	movs	r2, #16
 8009316:	4393      	bics	r3, r2
 8009318:	b2db      	uxtb	r3, r3
 800931a:	330a      	adds	r3, #10
 800931c:	b2da      	uxtb	r2, r3
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d11c      	bne.n	8009362 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	78db      	ldrb	r3, [r3, #3]
 800932c:	0018      	movs	r0, r3
 800932e:	f000 fb58 	bl	80099e2 <RTC_ByteToBcd2>
 8009332:	0003      	movs	r3, r0
 8009334:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	785b      	ldrb	r3, [r3, #1]
 800933a:	0018      	movs	r0, r3
 800933c:	f000 fb51 	bl	80099e2 <RTC_ByteToBcd2>
 8009340:	0003      	movs	r3, r0
 8009342:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009344:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	789b      	ldrb	r3, [r3, #2]
 800934a:	0018      	movs	r0, r3
 800934c:	f000 fb49 	bl	80099e2 <RTC_ByteToBcd2>
 8009350:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009352:	0022      	movs	r2, r4
 8009354:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800935c:	4313      	orrs	r3, r2
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	e00e      	b.n	8009380 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	78db      	ldrb	r3, [r3, #3]
 8009366:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	785b      	ldrb	r3, [r3, #1]
 800936c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800936e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009374:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800937c:	4313      	orrs	r3, r2
 800937e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	22ca      	movs	r2, #202	; 0xca
 8009386:	625a      	str	r2, [r3, #36]	; 0x24
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2253      	movs	r2, #83	; 0x53
 800938e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	0018      	movs	r0, r3
 8009394:	f000 fafb 	bl	800998e <RTC_EnterInitMode>
 8009398:	1e03      	subs	r3, r0, #0
 800939a:	d00d      	beq.n	80093b8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	22ff      	movs	r2, #255	; 0xff
 80093a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2221      	movs	r2, #33	; 0x21
 80093a8:	2104      	movs	r1, #4
 80093aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2220      	movs	r2, #32
 80093b0:	2100      	movs	r1, #0
 80093b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e034      	b.n	8009422 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	491b      	ldr	r1, [pc, #108]	; (800942c <HAL_RTC_SetDate+0x158>)
 80093c0:	400a      	ands	r2, r1
 80093c2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2180      	movs	r1, #128	; 0x80
 80093d0:	438a      	bics	r2, r1
 80093d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	2220      	movs	r2, #32
 80093dc:	4013      	ands	r3, r2
 80093de:	d113      	bne.n	8009408 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	0018      	movs	r0, r3
 80093e4:	f000 faac 	bl	8009940 <HAL_RTC_WaitForSynchro>
 80093e8:	1e03      	subs	r3, r0, #0
 80093ea:	d00d      	beq.n	8009408 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	22ff      	movs	r2, #255	; 0xff
 80093f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2221      	movs	r2, #33	; 0x21
 80093f8:	2104      	movs	r1, #4
 80093fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2220      	movs	r2, #32
 8009400:	2100      	movs	r1, #0
 8009402:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e00c      	b.n	8009422 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	22ff      	movs	r2, #255	; 0xff
 800940e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2221      	movs	r2, #33	; 0x21
 8009414:	2101      	movs	r1, #1
 8009416:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2220      	movs	r2, #32
 800941c:	2100      	movs	r1, #0
 800941e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009420:	2300      	movs	r3, #0
  }
}
 8009422:	0018      	movs	r0, r3
 8009424:	46bd      	mov	sp, r7
 8009426:	b007      	add	sp, #28
 8009428:	bd90      	pop	{r4, r7, pc}
 800942a:	46c0      	nop			; (mov r8, r8)
 800942c:	00ffff3f 	.word	0x00ffff3f

08009430 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	4a21      	ldr	r2, [pc, #132]	; (80094c8 <HAL_RTC_GetDate+0x98>)
 8009444:	4013      	ands	r3, r2
 8009446:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	0c1b      	lsrs	r3, r3, #16
 800944c:	b2da      	uxtb	r2, r3
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	0a1b      	lsrs	r3, r3, #8
 8009456:	b2db      	uxtb	r3, r3
 8009458:	221f      	movs	r2, #31
 800945a:	4013      	ands	r3, r2
 800945c:	b2da      	uxtb	r2, r3
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	223f      	movs	r2, #63	; 0x3f
 8009468:	4013      	ands	r3, r2
 800946a:	b2da      	uxtb	r2, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	0b5b      	lsrs	r3, r3, #13
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2207      	movs	r2, #7
 8009478:	4013      	ands	r3, r2
 800947a:	b2da      	uxtb	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d11a      	bne.n	80094bc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	78db      	ldrb	r3, [r3, #3]
 800948a:	0018      	movs	r0, r3
 800948c:	f000 fad1 	bl	8009a32 <RTC_Bcd2ToByte>
 8009490:	0003      	movs	r3, r0
 8009492:	001a      	movs	r2, r3
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	785b      	ldrb	r3, [r3, #1]
 800949c:	0018      	movs	r0, r3
 800949e:	f000 fac8 	bl	8009a32 <RTC_Bcd2ToByte>
 80094a2:	0003      	movs	r3, r0
 80094a4:	001a      	movs	r2, r3
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	789b      	ldrb	r3, [r3, #2]
 80094ae:	0018      	movs	r0, r3
 80094b0:	f000 fabf 	bl	8009a32 <RTC_Bcd2ToByte>
 80094b4:	0003      	movs	r3, r0
 80094b6:	001a      	movs	r2, r3
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	0018      	movs	r0, r3
 80094c0:	46bd      	mov	sp, r7
 80094c2:	b006      	add	sp, #24
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	46c0      	nop			; (mov r8, r8)
 80094c8:	00ffff3f 	.word	0x00ffff3f

080094cc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80094cc:	b590      	push	{r4, r7, lr}
 80094ce:	b089      	sub	sp, #36	; 0x24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2220      	movs	r2, #32
 80094dc:	5c9b      	ldrb	r3, [r3, r2]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_RTC_SetAlarm_IT+0x1a>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e130      	b.n	8009748 <HAL_RTC_SetAlarm_IT+0x27c>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2220      	movs	r2, #32
 80094ea:	2101      	movs	r1, #1
 80094ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2221      	movs	r2, #33	; 0x21
 80094f2:	2102      	movs	r1, #2
 80094f4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d136      	bne.n	800956a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	2240      	movs	r2, #64	; 0x40
 8009504:	4013      	ands	r3, r2
 8009506:	d102      	bne.n	800950e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2200      	movs	r2, #0
 800950c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	0018      	movs	r0, r3
 8009514:	f000 fa65 	bl	80099e2 <RTC_ByteToBcd2>
 8009518:	0003      	movs	r3, r0
 800951a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	785b      	ldrb	r3, [r3, #1]
 8009520:	0018      	movs	r0, r3
 8009522:	f000 fa5e 	bl	80099e2 <RTC_ByteToBcd2>
 8009526:	0003      	movs	r3, r0
 8009528:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800952a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	789b      	ldrb	r3, [r3, #2]
 8009530:	0018      	movs	r0, r3
 8009532:	f000 fa56 	bl	80099e2 <RTC_ByteToBcd2>
 8009536:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009538:	0022      	movs	r2, r4
 800953a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	78db      	ldrb	r3, [r3, #3]
 8009540:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009542:	431a      	orrs	r2, r3
 8009544:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2220      	movs	r2, #32
 800954a:	5c9b      	ldrb	r3, [r3, r2]
 800954c:	0018      	movs	r0, r3
 800954e:	f000 fa48 	bl	80099e2 <RTC_ByteToBcd2>
 8009552:	0003      	movs	r3, r0
 8009554:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009556:	0022      	movs	r2, r4
 8009558:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800955e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009564:	4313      	orrs	r3, r2
 8009566:	61fb      	str	r3, [r7, #28]
 8009568:	e022      	b.n	80095b0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	2240      	movs	r2, #64	; 0x40
 8009572:	4013      	ands	r3, r2
 8009574:	d102      	bne.n	800957c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2200      	movs	r2, #0
 800957a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	785b      	ldrb	r3, [r3, #1]
 8009586:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009588:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800958e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	78db      	ldrb	r3, [r3, #3]
 8009594:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009596:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2120      	movs	r1, #32
 800959c:	5c5b      	ldrb	r3, [r3, r1]
 800959e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80095a0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80095a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80095ac:	4313      	orrs	r3, r2
 80095ae:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	22ca      	movs	r2, #202	; 0xca
 80095c2:	625a      	str	r2, [r3, #36]	; 0x24
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2253      	movs	r2, #83	; 0x53
 80095ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095d0:	2380      	movs	r3, #128	; 0x80
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d14e      	bne.n	8009676 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	495b      	ldr	r1, [pc, #364]	; (8009750 <HAL_RTC_SetAlarm_IT+0x284>)
 80095e4:	400a      	ands	r2, r1
 80095e6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	22ff      	movs	r2, #255	; 0xff
 80095f0:	401a      	ands	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4957      	ldr	r1, [pc, #348]	; (8009754 <HAL_RTC_SetAlarm_IT+0x288>)
 80095f8:	430a      	orrs	r2, r1
 80095fa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80095fc:	f7fb f861 	bl	80046c2 <HAL_GetTick>
 8009600:	0003      	movs	r3, r0
 8009602:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009604:	e016      	b.n	8009634 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009606:	f7fb f85c 	bl	80046c2 <HAL_GetTick>
 800960a:	0002      	movs	r2, r0
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	23fa      	movs	r3, #250	; 0xfa
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	429a      	cmp	r2, r3
 8009616:	d90d      	bls.n	8009634 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	22ff      	movs	r2, #255	; 0xff
 800961e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2221      	movs	r2, #33	; 0x21
 8009624:	2103      	movs	r1, #3
 8009626:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2220      	movs	r2, #32
 800962c:	2100      	movs	r1, #0
 800962e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e089      	b.n	8009748 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	2201      	movs	r2, #1
 800963c:	4013      	ands	r3, r2
 800963e:	d0e2      	beq.n	8009606 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	69fa      	ldr	r2, [r7, #28]
 8009646:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689a      	ldr	r2, [r3, #8]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2180      	movs	r1, #128	; 0x80
 800965c:	0049      	lsls	r1, r1, #1
 800965e:	430a      	orrs	r2, r1
 8009660:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2180      	movs	r1, #128	; 0x80
 800966e:	0149      	lsls	r1, r1, #5
 8009670:	430a      	orrs	r2, r1
 8009672:	609a      	str	r2, [r3, #8]
 8009674:	e04d      	b.n	8009712 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4935      	ldr	r1, [pc, #212]	; (8009758 <HAL_RTC_SetAlarm_IT+0x28c>)
 8009682:	400a      	ands	r2, r1
 8009684:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	22ff      	movs	r2, #255	; 0xff
 800968e:	401a      	ands	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4931      	ldr	r1, [pc, #196]	; (800975c <HAL_RTC_SetAlarm_IT+0x290>)
 8009696:	430a      	orrs	r2, r1
 8009698:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800969a:	f7fb f812 	bl	80046c2 <HAL_GetTick>
 800969e:	0003      	movs	r3, r0
 80096a0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80096a2:	e016      	b.n	80096d2 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096a4:	f7fb f80d 	bl	80046c2 <HAL_GetTick>
 80096a8:	0002      	movs	r2, r0
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	1ad2      	subs	r2, r2, r3
 80096ae:	23fa      	movs	r3, #250	; 0xfa
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d90d      	bls.n	80096d2 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	22ff      	movs	r2, #255	; 0xff
 80096bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2221      	movs	r2, #33	; 0x21
 80096c2:	2103      	movs	r1, #3
 80096c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2220      	movs	r2, #32
 80096ca:	2100      	movs	r1, #0
 80096cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e03a      	b.n	8009748 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	2202      	movs	r2, #2
 80096da:	4013      	ands	r3, r2
 80096dc:	d0e2      	beq.n	80096a4 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69fa      	ldr	r2, [r7, #28]
 80096e4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69ba      	ldr	r2, [r7, #24]
 80096ec:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2180      	movs	r1, #128	; 0x80
 80096fa:	0089      	lsls	r1, r1, #2
 80096fc:	430a      	orrs	r2, r1
 80096fe:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689a      	ldr	r2, [r3, #8]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2180      	movs	r1, #128	; 0x80
 800970c:	0189      	lsls	r1, r1, #6
 800970e:	430a      	orrs	r2, r1
 8009710:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009712:	4b13      	ldr	r3, [pc, #76]	; (8009760 <HAL_RTC_SetAlarm_IT+0x294>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	4b12      	ldr	r3, [pc, #72]	; (8009760 <HAL_RTC_SetAlarm_IT+0x294>)
 8009718:	2180      	movs	r1, #128	; 0x80
 800971a:	0289      	lsls	r1, r1, #10
 800971c:	430a      	orrs	r2, r1
 800971e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009720:	4b0f      	ldr	r3, [pc, #60]	; (8009760 <HAL_RTC_SetAlarm_IT+0x294>)
 8009722:	689a      	ldr	r2, [r3, #8]
 8009724:	4b0e      	ldr	r3, [pc, #56]	; (8009760 <HAL_RTC_SetAlarm_IT+0x294>)
 8009726:	2180      	movs	r1, #128	; 0x80
 8009728:	0289      	lsls	r1, r1, #10
 800972a:	430a      	orrs	r2, r1
 800972c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	22ff      	movs	r2, #255	; 0xff
 8009734:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2221      	movs	r2, #33	; 0x21
 800973a:	2101      	movs	r1, #1
 800973c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2220      	movs	r2, #32
 8009742:	2100      	movs	r1, #0
 8009744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	0018      	movs	r0, r3
 800974a:	46bd      	mov	sp, r7
 800974c:	b009      	add	sp, #36	; 0x24
 800974e:	bd90      	pop	{r4, r7, pc}
 8009750:	fffffeff 	.word	0xfffffeff
 8009754:	fffffe7f 	.word	0xfffffe7f
 8009758:	fffffdff 	.word	0xfffffdff
 800975c:	fffffd7f 	.word	0xfffffd7f
 8009760:	40010400 	.word	0x40010400

08009764 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2220      	movs	r2, #32
 8009772:	5c9b      	ldrb	r3, [r3, r2]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d101      	bne.n	800977c <HAL_RTC_DeactivateAlarm+0x18>
 8009778:	2302      	movs	r3, #2
 800977a:	e086      	b.n	800988a <HAL_RTC_DeactivateAlarm+0x126>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2220      	movs	r2, #32
 8009780:	2101      	movs	r1, #1
 8009782:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2221      	movs	r2, #33	; 0x21
 8009788:	2102      	movs	r1, #2
 800978a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	22ca      	movs	r2, #202	; 0xca
 8009792:	625a      	str	r2, [r3, #36]	; 0x24
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2253      	movs	r2, #83	; 0x53
 800979a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	2380      	movs	r3, #128	; 0x80
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d132      	bne.n	800980c <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	689a      	ldr	r2, [r3, #8]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4938      	ldr	r1, [pc, #224]	; (8009894 <HAL_RTC_DeactivateAlarm+0x130>)
 80097b2:	400a      	ands	r2, r1
 80097b4:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4935      	ldr	r1, [pc, #212]	; (8009898 <HAL_RTC_DeactivateAlarm+0x134>)
 80097c2:	400a      	ands	r2, r1
 80097c4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80097c6:	f7fa ff7c 	bl	80046c2 <HAL_GetTick>
 80097ca:	0003      	movs	r3, r0
 80097cc:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80097ce:	e016      	b.n	80097fe <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80097d0:	f7fa ff77 	bl	80046c2 <HAL_GetTick>
 80097d4:	0002      	movs	r2, r0
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	1ad2      	subs	r2, r2, r3
 80097da:	23fa      	movs	r3, #250	; 0xfa
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	429a      	cmp	r2, r3
 80097e0:	d90d      	bls.n	80097fe <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	22ff      	movs	r2, #255	; 0xff
 80097e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2221      	movs	r2, #33	; 0x21
 80097ee:	2103      	movs	r1, #3
 80097f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2220      	movs	r2, #32
 80097f6:	2100      	movs	r1, #0
 80097f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80097fa:	2303      	movs	r3, #3
 80097fc:	e045      	b.n	800988a <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	4013      	ands	r3, r2
 8009808:	d0e2      	beq.n	80097d0 <HAL_RTC_DeactivateAlarm+0x6c>
 800980a:	e031      	b.n	8009870 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	689a      	ldr	r2, [r3, #8]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4921      	ldr	r1, [pc, #132]	; (800989c <HAL_RTC_DeactivateAlarm+0x138>)
 8009818:	400a      	ands	r2, r1
 800981a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	689a      	ldr	r2, [r3, #8]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	491e      	ldr	r1, [pc, #120]	; (80098a0 <HAL_RTC_DeactivateAlarm+0x13c>)
 8009828:	400a      	ands	r2, r1
 800982a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800982c:	f7fa ff49 	bl	80046c2 <HAL_GetTick>
 8009830:	0003      	movs	r3, r0
 8009832:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009834:	e016      	b.n	8009864 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009836:	f7fa ff44 	bl	80046c2 <HAL_GetTick>
 800983a:	0002      	movs	r2, r0
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	1ad2      	subs	r2, r2, r3
 8009840:	23fa      	movs	r3, #250	; 0xfa
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	429a      	cmp	r2, r3
 8009846:	d90d      	bls.n	8009864 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	22ff      	movs	r2, #255	; 0xff
 800984e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2221      	movs	r2, #33	; 0x21
 8009854:	2103      	movs	r1, #3
 8009856:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	2100      	movs	r1, #0
 800985e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e012      	b.n	800988a <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	2202      	movs	r2, #2
 800986c:	4013      	ands	r3, r2
 800986e:	d0e2      	beq.n	8009836 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	22ff      	movs	r2, #255	; 0xff
 8009876:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2221      	movs	r2, #33	; 0x21
 800987c:	2101      	movs	r1, #1
 800987e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2220      	movs	r2, #32
 8009884:	2100      	movs	r1, #0
 8009886:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	0018      	movs	r0, r3
 800988c:	46bd      	mov	sp, r7
 800988e:	b004      	add	sp, #16
 8009890:	bd80      	pop	{r7, pc}
 8009892:	46c0      	nop			; (mov r8, r8)
 8009894:	fffffeff 	.word	0xfffffeff
 8009898:	ffffefff 	.word	0xffffefff
 800989c:	fffffdff 	.word	0xfffffdff
 80098a0:	ffffdfff 	.word	0xffffdfff

080098a4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	2380      	movs	r3, #128	; 0x80
 80098b4:	015b      	lsls	r3, r3, #5
 80098b6:	4013      	ands	r3, r2
 80098b8:	d014      	beq.n	80098e4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68da      	ldr	r2, [r3, #12]
 80098c0:	2380      	movs	r3, #128	; 0x80
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	4013      	ands	r3, r2
 80098c6:	d00d      	beq.n	80098e4 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	0018      	movs	r0, r3
 80098cc:	f7fa f8e3 	bl	8003a96 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	22ff      	movs	r2, #255	; 0xff
 80098d8:	401a      	ands	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4915      	ldr	r1, [pc, #84]	; (8009934 <HAL_RTC_AlarmIRQHandler+0x90>)
 80098e0:	430a      	orrs	r2, r1
 80098e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	2380      	movs	r3, #128	; 0x80
 80098ec:	019b      	lsls	r3, r3, #6
 80098ee:	4013      	ands	r3, r2
 80098f0:	d014      	beq.n	800991c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	2380      	movs	r3, #128	; 0x80
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4013      	ands	r3, r2
 80098fe:	d00d      	beq.n	800991c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	0018      	movs	r0, r3
 8009904:	f000 f910 	bl	8009b28 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	22ff      	movs	r2, #255	; 0xff
 8009910:	401a      	ands	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4908      	ldr	r1, [pc, #32]	; (8009938 <HAL_RTC_AlarmIRQHandler+0x94>)
 8009918:	430a      	orrs	r2, r1
 800991a:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800991c:	4b07      	ldr	r3, [pc, #28]	; (800993c <HAL_RTC_AlarmIRQHandler+0x98>)
 800991e:	2280      	movs	r2, #128	; 0x80
 8009920:	0292      	lsls	r2, r2, #10
 8009922:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2221      	movs	r2, #33	; 0x21
 8009928:	2101      	movs	r1, #1
 800992a:	5499      	strb	r1, [r3, r2]
}
 800992c:	46c0      	nop			; (mov r8, r8)
 800992e:	46bd      	mov	sp, r7
 8009930:	b002      	add	sp, #8
 8009932:	bd80      	pop	{r7, pc}
 8009934:	fffffe7f 	.word	0xfffffe7f
 8009938:	fffffd7f 	.word	0xfffffd7f
 800993c:	40010400 	.word	0x40010400

08009940 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68da      	ldr	r2, [r3, #12]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	21a0      	movs	r1, #160	; 0xa0
 8009954:	438a      	bics	r2, r1
 8009956:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009958:	f7fa feb3 	bl	80046c2 <HAL_GetTick>
 800995c:	0003      	movs	r3, r0
 800995e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009960:	e00a      	b.n	8009978 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009962:	f7fa feae 	bl	80046c2 <HAL_GetTick>
 8009966:	0002      	movs	r2, r0
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	1ad2      	subs	r2, r2, r3
 800996c:	23fa      	movs	r3, #250	; 0xfa
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	429a      	cmp	r2, r3
 8009972:	d901      	bls.n	8009978 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e006      	b.n	8009986 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	2220      	movs	r2, #32
 8009980:	4013      	ands	r3, r2
 8009982:	d0ee      	beq.n	8009962 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	0018      	movs	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	b004      	add	sp, #16
 800998c:	bd80      	pop	{r7, pc}

0800998e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	2240      	movs	r2, #64	; 0x40
 800999e:	4013      	ands	r3, r2
 80099a0:	d11a      	bne.n	80099d8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2201      	movs	r2, #1
 80099a8:	4252      	negs	r2, r2
 80099aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80099ac:	f7fa fe89 	bl	80046c2 <HAL_GetTick>
 80099b0:	0003      	movs	r3, r0
 80099b2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80099b4:	e00a      	b.n	80099cc <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80099b6:	f7fa fe84 	bl	80046c2 <HAL_GetTick>
 80099ba:	0002      	movs	r2, r0
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	23fa      	movs	r3, #250	; 0xfa
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d901      	bls.n	80099cc <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e006      	b.n	80099da <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	2240      	movs	r2, #64	; 0x40
 80099d4:	4013      	ands	r3, r2
 80099d6:	d0ee      	beq.n	80099b6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	0018      	movs	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	b004      	add	sp, #16
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b084      	sub	sp, #16
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	0002      	movs	r2, r0
 80099ea:	1dfb      	adds	r3, r7, #7
 80099ec:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80099f2:	230b      	movs	r3, #11
 80099f4:	18fb      	adds	r3, r7, r3
 80099f6:	1dfa      	adds	r2, r7, #7
 80099f8:	7812      	ldrb	r2, [r2, #0]
 80099fa:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80099fc:	e008      	b.n	8009a10 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	3301      	adds	r3, #1
 8009a02:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009a04:	220b      	movs	r2, #11
 8009a06:	18bb      	adds	r3, r7, r2
 8009a08:	18ba      	adds	r2, r7, r2
 8009a0a:	7812      	ldrb	r2, [r2, #0]
 8009a0c:	3a0a      	subs	r2, #10
 8009a0e:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8009a10:	210b      	movs	r1, #11
 8009a12:	187b      	adds	r3, r7, r1
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	2b09      	cmp	r3, #9
 8009a18:	d8f1      	bhi.n	80099fe <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	011b      	lsls	r3, r3, #4
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	187b      	adds	r3, r7, r1
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	b2db      	uxtb	r3, r3
}
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	b004      	add	sp, #16
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	0002      	movs	r2, r0
 8009a3a:	1dfb      	adds	r3, r7, #7
 8009a3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009a3e:	1dfb      	adds	r3, r7, #7
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	091b      	lsrs	r3, r3, #4
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	001a      	movs	r2, r3
 8009a48:	0013      	movs	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	189b      	adds	r3, r3, r2
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	1dfb      	adds	r3, r7, #7
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	210f      	movs	r1, #15
 8009a5c:	400b      	ands	r3, r1
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	18d3      	adds	r3, r2, r3
 8009a62:	b2db      	uxtb	r3, r3
}
 8009a64:	0018      	movs	r0, r3
 8009a66:	46bd      	mov	sp, r7
 8009a68:	b004      	add	sp, #16
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3350      	adds	r3, #80	; 0x50
 8009a7e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	18d3      	adds	r3, r2, r3
 8009a88:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	601a      	str	r2, [r3, #0]
}
 8009a90:	46c0      	nop			; (mov r8, r8)
 8009a92:	46bd      	mov	sp, r7
 8009a94:	b006      	add	sp, #24
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3350      	adds	r3, #80	; 0x50
 8009aa8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	18d3      	adds	r3, r2, r3
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
}
 8009ab8:	0018      	movs	r0, r3
 8009aba:	46bd      	mov	sp, r7
 8009abc:	b004      	add	sp, #16
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2220      	movs	r2, #32
 8009acc:	5c9b      	ldrb	r3, [r3, r2]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d101      	bne.n	8009ad6 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e024      	b.n	8009b20 <HAL_RTCEx_EnableBypassShadow+0x60>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	2101      	movs	r1, #1
 8009adc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2221      	movs	r2, #33	; 0x21
 8009ae2:	2102      	movs	r1, #2
 8009ae4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	22ca      	movs	r2, #202	; 0xca
 8009aec:	625a      	str	r2, [r3, #36]	; 0x24
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2253      	movs	r2, #83	; 0x53
 8009af4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	689a      	ldr	r2, [r3, #8]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2120      	movs	r1, #32
 8009b02:	430a      	orrs	r2, r1
 8009b04:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	22ff      	movs	r2, #255	; 0xff
 8009b0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2221      	movs	r2, #33	; 0x21
 8009b12:	2101      	movs	r1, #1
 8009b14:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	0018      	movs	r0, r3
 8009b22:	46bd      	mov	sp, r7
 8009b24:	b002      	add	sp, #8
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009b30:	46c0      	nop			; (mov r8, r8)
 8009b32:	46bd      	mov	sp, r7
 8009b34:	b002      	add	sp, #8
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e083      	b.n	8009c52 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	2382      	movs	r3, #130	; 0x82
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d009      	beq.n	8009b72 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	61da      	str	r2, [r3, #28]
 8009b64:	e005      	b.n	8009b72 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2251      	movs	r2, #81	; 0x51
 8009b7c:	5c9b      	ldrb	r3, [r3, r2]
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d107      	bne.n	8009b94 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2250      	movs	r2, #80	; 0x50
 8009b88:	2100      	movs	r1, #0
 8009b8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	0018      	movs	r0, r3
 8009b90:	f000 f866 	bl	8009c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2251      	movs	r2, #81	; 0x51
 8009b98:	2102      	movs	r1, #2
 8009b9a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2140      	movs	r1, #64	; 0x40
 8009ba8:	438a      	bics	r2, r1
 8009baa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	2382      	movs	r3, #130	; 0x82
 8009bb2:	005b      	lsls	r3, r3, #1
 8009bb4:	401a      	ands	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6899      	ldr	r1, [r3, #8]
 8009bba:	2384      	movs	r3, #132	; 0x84
 8009bbc:	021b      	lsls	r3, r3, #8
 8009bbe:	400b      	ands	r3, r1
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68d9      	ldr	r1, [r3, #12]
 8009bc6:	2380      	movs	r3, #128	; 0x80
 8009bc8:	011b      	lsls	r3, r3, #4
 8009bca:	400b      	ands	r3, r1
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2102      	movs	r1, #2
 8009bd4:	400b      	ands	r3, r1
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	2101      	movs	r1, #1
 8009bde:	400b      	ands	r3, r1
 8009be0:	431a      	orrs	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6999      	ldr	r1, [r3, #24]
 8009be6:	2380      	movs	r3, #128	; 0x80
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	400b      	ands	r3, r1
 8009bec:	431a      	orrs	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	2138      	movs	r1, #56	; 0x38
 8009bf4:	400b      	ands	r3, r1
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	2180      	movs	r1, #128	; 0x80
 8009bfe:	400b      	ands	r3, r1
 8009c00:	431a      	orrs	r2, r3
 8009c02:	0011      	movs	r1, r2
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c08:	2380      	movs	r3, #128	; 0x80
 8009c0a:	019b      	lsls	r3, r3, #6
 8009c0c:	401a      	ands	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	0c1b      	lsrs	r3, r3, #16
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	4013      	ands	r3, r2
 8009c20:	0019      	movs	r1, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c26:	2210      	movs	r2, #16
 8009c28:	401a      	ands	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69da      	ldr	r2, [r3, #28]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4907      	ldr	r1, [pc, #28]	; (8009c5c <HAL_SPI_Init+0x124>)
 8009c3e:	400a      	ands	r2, r1
 8009c40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2251      	movs	r2, #81	; 0x51
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	0018      	movs	r0, r3
 8009c54:	46bd      	mov	sp, r7
 8009c56:	b002      	add	sp, #8
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	46c0      	nop			; (mov r8, r8)
 8009c5c:	fffff7ff 	.word	0xfffff7ff

08009c60 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8009c68:	46c0      	nop			; (mov r8, r8)
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	b002      	add	sp, #8
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08c      	sub	sp, #48	; 0x30
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	001a      	movs	r2, r3
 8009c7e:	1cbb      	adds	r3, r7, #2
 8009c80:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c82:	2301      	movs	r3, #1
 8009c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c86:	232b      	movs	r3, #43	; 0x2b
 8009c88:	18fb      	adds	r3, r7, r3
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2250      	movs	r2, #80	; 0x50
 8009c92:	5c9b      	ldrb	r3, [r3, r2]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d101      	bne.n	8009c9c <HAL_SPI_TransmitReceive+0x2c>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e1a0      	b.n	8009fde <HAL_SPI_TransmitReceive+0x36e>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2250      	movs	r2, #80	; 0x50
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ca4:	f7fa fd0d 	bl	80046c2 <HAL_GetTick>
 8009ca8:	0003      	movs	r3, r0
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009cac:	2023      	movs	r0, #35	; 0x23
 8009cae:	183b      	adds	r3, r7, r0
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	2151      	movs	r1, #81	; 0x51
 8009cb4:	5c52      	ldrb	r2, [r2, r1]
 8009cb6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009cbe:	231a      	movs	r3, #26
 8009cc0:	18fb      	adds	r3, r7, r3
 8009cc2:	1cba      	adds	r2, r7, #2
 8009cc4:	8812      	ldrh	r2, [r2, #0]
 8009cc6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009cc8:	183b      	adds	r3, r7, r0
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d011      	beq.n	8009cf4 <HAL_SPI_TransmitReceive+0x84>
 8009cd0:	69fa      	ldr	r2, [r7, #28]
 8009cd2:	2382      	movs	r3, #130	; 0x82
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d107      	bne.n	8009cea <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d103      	bne.n	8009cea <HAL_SPI_TransmitReceive+0x7a>
 8009ce2:	183b      	adds	r3, r7, r0
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	2b04      	cmp	r3, #4
 8009ce8:	d004      	beq.n	8009cf4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8009cea:	232b      	movs	r3, #43	; 0x2b
 8009cec:	18fb      	adds	r3, r7, r3
 8009cee:	2202      	movs	r2, #2
 8009cf0:	701a      	strb	r2, [r3, #0]
    goto error;
 8009cf2:	e169      	b.n	8009fc8 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d006      	beq.n	8009d08 <HAL_SPI_TransmitReceive+0x98>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <HAL_SPI_TransmitReceive+0x98>
 8009d00:	1cbb      	adds	r3, r7, #2
 8009d02:	881b      	ldrh	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d104      	bne.n	8009d12 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009d08:	232b      	movs	r3, #43	; 0x2b
 8009d0a:	18fb      	adds	r3, r7, r3
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009d10:	e15a      	b.n	8009fc8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2251      	movs	r2, #81	; 0x51
 8009d16:	5c9b      	ldrb	r3, [r3, r2]
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d003      	beq.n	8009d26 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2251      	movs	r2, #81	; 0x51
 8009d22:	2105      	movs	r1, #5
 8009d24:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	1cba      	adds	r2, r7, #2
 8009d36:	8812      	ldrh	r2, [r2, #0]
 8009d38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	1cba      	adds	r2, r7, #2
 8009d3e:	8812      	ldrh	r2, [r2, #0]
 8009d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	1cba      	adds	r2, r7, #2
 8009d4c:	8812      	ldrh	r2, [r2, #0]
 8009d4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	1cba      	adds	r2, r7, #2
 8009d54:	8812      	ldrh	r2, [r2, #0]
 8009d56:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2240      	movs	r2, #64	; 0x40
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	2b40      	cmp	r3, #64	; 0x40
 8009d70:	d007      	beq.n	8009d82 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2140      	movs	r1, #64	; 0x40
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	2380      	movs	r3, #128	; 0x80
 8009d88:	011b      	lsls	r3, r3, #4
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d000      	beq.n	8009d90 <HAL_SPI_TransmitReceive+0x120>
 8009d8e:	e07a      	b.n	8009e86 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d004      	beq.n	8009da2 <HAL_SPI_TransmitReceive+0x132>
 8009d98:	231a      	movs	r3, #26
 8009d9a:	18fb      	adds	r3, r7, r3
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d166      	bne.n	8009e70 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da6:	881a      	ldrh	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db2:	1c9a      	adds	r2, r3, #2
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009dc6:	e053      	b.n	8009e70 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d11b      	bne.n	8009e0e <HAL_SPI_TransmitReceive+0x19e>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d016      	beq.n	8009e0e <HAL_SPI_TransmitReceive+0x19e>
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d113      	bne.n	8009e0e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	881a      	ldrh	r2, [r3, #0]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df6:	1c9a      	adds	r2, r3, #2
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	3b01      	subs	r3, #1
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	2201      	movs	r2, #1
 8009e16:	4013      	ands	r3, r2
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d119      	bne.n	8009e50 <HAL_SPI_TransmitReceive+0x1e0>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d014      	beq.n	8009e50 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	b292      	uxth	r2, r2
 8009e32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	1c9a      	adds	r2, r3, #2
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	3b01      	subs	r3, #1
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e50:	f7fa fc37 	bl	80046c2 <HAL_GetTick>
 8009e54:	0002      	movs	r2, r0
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d807      	bhi.n	8009e70 <HAL_SPI_TransmitReceive+0x200>
 8009e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e62:	3301      	adds	r3, #1
 8009e64:	d004      	beq.n	8009e70 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8009e66:	232b      	movs	r3, #43	; 0x2b
 8009e68:	18fb      	adds	r3, r7, r3
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	701a      	strb	r2, [r3, #0]
        goto error;
 8009e6e:	e0ab      	b.n	8009fc8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1a6      	bne.n	8009dc8 <HAL_SPI_TransmitReceive+0x158>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1a1      	bne.n	8009dc8 <HAL_SPI_TransmitReceive+0x158>
 8009e84:	e07f      	b.n	8009f86 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d005      	beq.n	8009e9a <HAL_SPI_TransmitReceive+0x22a>
 8009e8e:	231a      	movs	r3, #26
 8009e90:	18fb      	adds	r3, r7, r3
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d000      	beq.n	8009e9a <HAL_SPI_TransmitReceive+0x22a>
 8009e98:	e06b      	b.n	8009f72 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	330c      	adds	r3, #12
 8009ea4:	7812      	ldrb	r2, [r2, #0]
 8009ea6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eac:	1c5a      	adds	r2, r3, #1
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ec0:	e057      	b.n	8009f72 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	2202      	movs	r2, #2
 8009eca:	4013      	ands	r3, r2
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d11c      	bne.n	8009f0a <HAL_SPI_TransmitReceive+0x29a>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d017      	beq.n	8009f0a <HAL_SPI_TransmitReceive+0x29a>
 8009eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d114      	bne.n	8009f0a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	330c      	adds	r3, #12
 8009eea:	7812      	ldrb	r2, [r2, #0]
 8009eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	3b01      	subs	r3, #1
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	2201      	movs	r2, #1
 8009f12:	4013      	ands	r3, r2
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d119      	bne.n	8009f4c <HAL_SPI_TransmitReceive+0x2dc>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d014      	beq.n	8009f4c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2c:	b2d2      	uxtb	r2, r2
 8009f2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f34:	1c5a      	adds	r2, r3, #1
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f4c:	f7fa fbb9 	bl	80046c2 <HAL_GetTick>
 8009f50:	0002      	movs	r2, r0
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d802      	bhi.n	8009f62 <HAL_SPI_TransmitReceive+0x2f2>
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	3301      	adds	r3, #1
 8009f60:	d102      	bne.n	8009f68 <HAL_SPI_TransmitReceive+0x2f8>
 8009f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d104      	bne.n	8009f72 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8009f68:	232b      	movs	r3, #43	; 0x2b
 8009f6a:	18fb      	adds	r3, r7, r3
 8009f6c:	2203      	movs	r2, #3
 8009f6e:	701a      	strb	r2, [r3, #0]
        goto error;
 8009f70:	e02a      	b.n	8009fc8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1a2      	bne.n	8009ec2 <HAL_SPI_TransmitReceive+0x252>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d19d      	bne.n	8009ec2 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f000 f8c5 	bl	800a11c <SPI_EndRxTxTransaction>
 8009f92:	1e03      	subs	r3, r0, #0
 8009f94:	d007      	beq.n	8009fa6 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8009f96:	232b      	movs	r3, #43	; 0x2b
 8009f98:	18fb      	adds	r3, r7, r3
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009fa4:	e010      	b.n	8009fc8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10b      	bne.n	8009fc6 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fae:	2300      	movs	r3, #0
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	617b      	str	r3, [r7, #20]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	e000      	b.n	8009fc8 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8009fc6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2251      	movs	r2, #81	; 0x51
 8009fcc:	2101      	movs	r1, #1
 8009fce:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2250      	movs	r2, #80	; 0x50
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009fd8:	232b      	movs	r3, #43	; 0x2b
 8009fda:	18fb      	adds	r3, r7, r3
 8009fdc:	781b      	ldrb	r3, [r3, #0]
}
 8009fde:	0018      	movs	r0, r3
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	b00c      	add	sp, #48	; 0x30
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2251      	movs	r2, #81	; 0x51
 8009ff2:	5c9b      	ldrb	r3, [r3, r2]
 8009ff4:	b2db      	uxtb	r3, r3
}
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	b002      	add	sp, #8
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	1dfb      	adds	r3, r7, #7
 800a00e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a010:	f7fa fb57 	bl	80046c2 <HAL_GetTick>
 800a014:	0002      	movs	r2, r0
 800a016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a018:	1a9b      	subs	r3, r3, r2
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	18d3      	adds	r3, r2, r3
 800a01e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a020:	f7fa fb4f 	bl	80046c2 <HAL_GetTick>
 800a024:	0003      	movs	r3, r0
 800a026:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a028:	4b3a      	ldr	r3, [pc, #232]	; (800a114 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	015b      	lsls	r3, r3, #5
 800a02e:	0d1b      	lsrs	r3, r3, #20
 800a030:	69fa      	ldr	r2, [r7, #28]
 800a032:	4353      	muls	r3, r2
 800a034:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a036:	e058      	b.n	800a0ea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	3301      	adds	r3, #1
 800a03c:	d055      	beq.n	800a0ea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a03e:	f7fa fb40 	bl	80046c2 <HAL_GetTick>
 800a042:	0002      	movs	r2, r0
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	69fa      	ldr	r2, [r7, #28]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d902      	bls.n	800a054 <SPI_WaitFlagStateUntilTimeout+0x54>
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d142      	bne.n	800a0da <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	685a      	ldr	r2, [r3, #4]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	21e0      	movs	r1, #224	; 0xe0
 800a060:	438a      	bics	r2, r1
 800a062:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	685a      	ldr	r2, [r3, #4]
 800a068:	2382      	movs	r3, #130	; 0x82
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d113      	bne.n	800a098 <SPI_WaitFlagStateUntilTimeout+0x98>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	689a      	ldr	r2, [r3, #8]
 800a074:	2380      	movs	r3, #128	; 0x80
 800a076:	021b      	lsls	r3, r3, #8
 800a078:	429a      	cmp	r2, r3
 800a07a:	d005      	beq.n	800a088 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	2380      	movs	r3, #128	; 0x80
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	429a      	cmp	r2, r3
 800a086:	d107      	bne.n	800a098 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2140      	movs	r1, #64	; 0x40
 800a094:	438a      	bics	r2, r1
 800a096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a09c:	2380      	movs	r3, #128	; 0x80
 800a09e:	019b      	lsls	r3, r3, #6
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d110      	bne.n	800a0c6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	491a      	ldr	r1, [pc, #104]	; (800a118 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a0b0:	400a      	ands	r2, r1
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2180      	movs	r1, #128	; 0x80
 800a0c0:	0189      	lsls	r1, r1, #6
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2251      	movs	r2, #81	; 0x51
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2250      	movs	r2, #80	; 0x50
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e017      	b.n	800a10a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	425a      	negs	r2, r3
 800a0fa:	4153      	adcs	r3, r2
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	001a      	movs	r2, r3
 800a100:	1dfb      	adds	r3, r7, #7
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	429a      	cmp	r2, r3
 800a106:	d197      	bne.n	800a038 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	0018      	movs	r0, r3
 800a10c:	46bd      	mov	sp, r7
 800a10e:	b008      	add	sp, #32
 800a110:	bd80      	pop	{r7, pc}
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	20000070 	.word	0x20000070
 800a118:	ffffdfff 	.word	0xffffdfff

0800a11c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af02      	add	r7, sp, #8
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a128:	4b1d      	ldr	r3, [pc, #116]	; (800a1a0 <SPI_EndRxTxTransaction+0x84>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	491d      	ldr	r1, [pc, #116]	; (800a1a4 <SPI_EndRxTxTransaction+0x88>)
 800a12e:	0018      	movs	r0, r3
 800a130:	f7f5 fff2 	bl	8000118 <__udivsi3>
 800a134:	0003      	movs	r3, r0
 800a136:	001a      	movs	r2, r3
 800a138:	0013      	movs	r3, r2
 800a13a:	015b      	lsls	r3, r3, #5
 800a13c:	1a9b      	subs	r3, r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	189b      	adds	r3, r3, r2
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	2382      	movs	r3, #130	; 0x82
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	429a      	cmp	r2, r3
 800a150:	d112      	bne.n	800a178 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	0013      	movs	r3, r2
 800a15c:	2200      	movs	r2, #0
 800a15e:	2180      	movs	r1, #128	; 0x80
 800a160:	f7ff ff4e 	bl	800a000 <SPI_WaitFlagStateUntilTimeout>
 800a164:	1e03      	subs	r3, r0, #0
 800a166:	d016      	beq.n	800a196 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16c:	2220      	movs	r2, #32
 800a16e:	431a      	orrs	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e00f      	b.n	800a198 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	3b01      	subs	r3, #1
 800a182:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	2280      	movs	r2, #128	; 0x80
 800a18c:	4013      	ands	r3, r2
 800a18e:	2b80      	cmp	r3, #128	; 0x80
 800a190:	d0f2      	beq.n	800a178 <SPI_EndRxTxTransaction+0x5c>
 800a192:	e000      	b.n	800a196 <SPI_EndRxTxTransaction+0x7a>
        break;
 800a194:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	0018      	movs	r0, r3
 800a19a:	46bd      	mov	sp, r7
 800a19c:	b006      	add	sp, #24
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	20000070 	.word	0x20000070
 800a1a4:	016e3600 	.word	0x016e3600

0800a1a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e044      	b.n	800a244 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d107      	bne.n	800a1d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2274      	movs	r2, #116	; 0x74
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	f7fa fb5f 	bl	8004890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2224      	movs	r2, #36	; 0x24
 800a1d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	438a      	bics	r2, r1
 800a1e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	f000 fb3a 	bl	800a864 <UART_SetConfig>
 800a1f0:	0003      	movs	r3, r0
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d101      	bne.n	800a1fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e024      	b.n	800a244 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	0018      	movs	r0, r3
 800a206:	f000 fdcd 	bl	800ada4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	490d      	ldr	r1, [pc, #52]	; (800a24c <HAL_UART_Init+0xa4>)
 800a216:	400a      	ands	r2, r1
 800a218:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	212a      	movs	r1, #42	; 0x2a
 800a226:	438a      	bics	r2, r1
 800a228:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2101      	movs	r1, #1
 800a236:	430a      	orrs	r2, r1
 800a238:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	0018      	movs	r0, r3
 800a23e:	f000 fe65 	bl	800af0c <UART_CheckIdleState>
 800a242:	0003      	movs	r3, r0
}
 800a244:	0018      	movs	r0, r3
 800a246:	46bd      	mov	sp, r7
 800a248:	b002      	add	sp, #8
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	ffffb7ff 	.word	0xffffb7ff

0800a250 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	1dbb      	adds	r3, r7, #6
 800a25c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a262:	2b20      	cmp	r3, #32
 800a264:	d144      	bne.n	800a2f0 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <HAL_UART_Receive_IT+0x24>
 800a26c:	1dbb      	adds	r3, r7, #6
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	e03c      	b.n	800a2f2 <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	2380      	movs	r3, #128	; 0x80
 800a27e:	015b      	lsls	r3, r3, #5
 800a280:	429a      	cmp	r2, r3
 800a282:	d109      	bne.n	800a298 <HAL_UART_Receive_IT+0x48>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d105      	bne.n	800a298 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	2201      	movs	r2, #1
 800a290:	4013      	ands	r3, r2
 800a292:	d001      	beq.n	800a298 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e02c      	b.n	800a2f2 <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2274      	movs	r2, #116	; 0x74
 800a29c:	5c9b      	ldrb	r3, [r3, r2]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d101      	bne.n	800a2a6 <HAL_UART_Receive_IT+0x56>
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e025      	b.n	800a2f2 <HAL_UART_Receive_IT+0xa2>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2274      	movs	r2, #116	; 0x74
 800a2aa:	2101      	movs	r1, #1
 800a2ac:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a10      	ldr	r2, [pc, #64]	; (800a2fc <HAL_UART_Receive_IT+0xac>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00f      	beq.n	800a2de <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	2380      	movs	r3, #128	; 0x80
 800a2c6:	041b      	lsls	r3, r3, #16
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	d008      	beq.n	800a2de <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2180      	movs	r1, #128	; 0x80
 800a2d8:	04c9      	lsls	r1, r1, #19
 800a2da:	430a      	orrs	r2, r1
 800a2dc:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a2de:	1dbb      	adds	r3, r7, #6
 800a2e0:	881a      	ldrh	r2, [r3, #0]
 800a2e2:	68b9      	ldr	r1, [r7, #8]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f000 fed6 	bl	800b098 <UART_Start_Receive_IT>
 800a2ec:	0003      	movs	r3, r0
 800a2ee:	e000      	b.n	800a2f2 <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a2f0:	2302      	movs	r3, #2
  }
}
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	b004      	add	sp, #16
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	46c0      	nop			; (mov r8, r8)
 800a2fc:	40004800 	.word	0x40004800

0800a300 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	1dbb      	adds	r3, r7, #6
 800a30c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a312:	2b20      	cmp	r3, #32
 800a314:	d000      	beq.n	800a318 <HAL_UART_Transmit_DMA+0x18>
 800a316:	e079      	b.n	800a40c <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <HAL_UART_Transmit_DMA+0x26>
 800a31e:	1dbb      	adds	r3, r7, #6
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e071      	b.n	800a40e <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	689a      	ldr	r2, [r3, #8]
 800a32e:	2380      	movs	r3, #128	; 0x80
 800a330:	015b      	lsls	r3, r3, #5
 800a332:	429a      	cmp	r2, r3
 800a334:	d109      	bne.n	800a34a <HAL_UART_Transmit_DMA+0x4a>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d105      	bne.n	800a34a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2201      	movs	r2, #1
 800a342:	4013      	ands	r3, r2
 800a344:	d001      	beq.n	800a34a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e061      	b.n	800a40e <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2274      	movs	r2, #116	; 0x74
 800a34e:	5c9b      	ldrb	r3, [r3, r2]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d101      	bne.n	800a358 <HAL_UART_Transmit_DMA+0x58>
 800a354:	2302      	movs	r3, #2
 800a356:	e05a      	b.n	800a40e <HAL_UART_Transmit_DMA+0x10e>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2274      	movs	r2, #116	; 0x74
 800a35c:	2101      	movs	r1, #1
 800a35e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	1dba      	adds	r2, r7, #6
 800a36a:	2150      	movs	r1, #80	; 0x50
 800a36c:	8812      	ldrh	r2, [r2, #0]
 800a36e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	1dba      	adds	r2, r7, #6
 800a374:	2152      	movs	r1, #82	; 0x52
 800a376:	8812      	ldrh	r2, [r2, #0]
 800a378:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2280      	movs	r2, #128	; 0x80
 800a37e:	2100      	movs	r1, #0
 800a380:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2221      	movs	r2, #33	; 0x21
 800a386:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d02b      	beq.n	800a3e8 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a394:	4a20      	ldr	r2, [pc, #128]	; (800a418 <HAL_UART_Transmit_DMA+0x118>)
 800a396:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a39c:	4a1f      	ldr	r2, [pc, #124]	; (800a41c <HAL_UART_Transmit_DMA+0x11c>)
 800a39e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3a4:	4a1e      	ldr	r2, [pc, #120]	; (800a420 <HAL_UART_Transmit_DMA+0x120>)
 800a3a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b8:	0019      	movs	r1, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3328      	adds	r3, #40	; 0x28
 800a3c0:	001a      	movs	r2, r3
 800a3c2:	1dbb      	adds	r3, r7, #6
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	f7fc fae3 	bl	8006990 <HAL_DMA_Start_IT>
 800a3ca:	1e03      	subs	r3, r0, #0
 800a3cc:	d00c      	beq.n	800a3e8 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2280      	movs	r2, #128	; 0x80
 800a3d2:	2110      	movs	r1, #16
 800a3d4:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2274      	movs	r2, #116	; 0x74
 800a3da:	2100      	movs	r1, #0
 800a3dc:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e012      	b.n	800a40e <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2240      	movs	r2, #64	; 0x40
 800a3ee:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2274      	movs	r2, #116	; 0x74
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689a      	ldr	r2, [r3, #8]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2180      	movs	r1, #128	; 0x80
 800a404:	430a      	orrs	r2, r1
 800a406:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	e000      	b.n	800a40e <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a40c:	2302      	movs	r3, #2
  }
}
 800a40e:	0018      	movs	r0, r3
 800a410:	46bd      	mov	sp, r7
 800a412:	b004      	add	sp, #16
 800a414:	bd80      	pop	{r7, pc}
 800a416:	46c0      	nop			; (mov r8, r8)
 800a418:	0800b23d 	.word	0x0800b23d
 800a41c:	0800b291 	.word	0x0800b291
 800a420:	0800b2af 	.word	0x0800b2af

0800a424 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b088      	sub	sp, #32
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	4ab5      	ldr	r2, [pc, #724]	; (800a71c <HAL_UART_IRQHandler+0x2f8>)
 800a448:	4013      	ands	r3, r2
 800a44a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d112      	bne.n	800a478 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	2220      	movs	r2, #32
 800a456:	4013      	ands	r3, r2
 800a458:	d00e      	beq.n	800a478 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2220      	movs	r2, #32
 800a45e:	4013      	ands	r3, r2
 800a460:	d00a      	beq.n	800a478 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a466:	2b00      	cmp	r3, #0
 800a468:	d100      	bne.n	800a46c <HAL_UART_IRQHandler+0x48>
 800a46a:	e1d1      	b.n	800a810 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	0010      	movs	r0, r2
 800a474:	4798      	blx	r3
      }
      return;
 800a476:	e1cb      	b.n	800a810 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d100      	bne.n	800a480 <HAL_UART_IRQHandler+0x5c>
 800a47e:	e0d9      	b.n	800a634 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	2201      	movs	r2, #1
 800a484:	4013      	ands	r3, r2
 800a486:	d104      	bne.n	800a492 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	4aa5      	ldr	r2, [pc, #660]	; (800a720 <HAL_UART_IRQHandler+0x2fc>)
 800a48c:	4013      	ands	r3, r2
 800a48e:	d100      	bne.n	800a492 <HAL_UART_IRQHandler+0x6e>
 800a490:	e0d0      	b.n	800a634 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	2201      	movs	r2, #1
 800a496:	4013      	ands	r3, r2
 800a498:	d010      	beq.n	800a4bc <HAL_UART_IRQHandler+0x98>
 800a49a:	69ba      	ldr	r2, [r7, #24]
 800a49c:	2380      	movs	r3, #128	; 0x80
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	d00b      	beq.n	800a4bc <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2280      	movs	r2, #128	; 0x80
 800a4b0:	589b      	ldr	r3, [r3, r2]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	431a      	orrs	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2180      	movs	r1, #128	; 0x80
 800a4ba:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	d00f      	beq.n	800a4e4 <HAL_UART_IRQHandler+0xc0>
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	d00b      	beq.n	800a4e4 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2280      	movs	r2, #128	; 0x80
 800a4d8:	589b      	ldr	r3, [r3, r2]
 800a4da:	2204      	movs	r2, #4
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2180      	movs	r1, #128	; 0x80
 800a4e2:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	2204      	movs	r2, #4
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	d00f      	beq.n	800a50c <HAL_UART_IRQHandler+0xe8>
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	d00b      	beq.n	800a50c <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2204      	movs	r2, #4
 800a4fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2280      	movs	r2, #128	; 0x80
 800a500:	589b      	ldr	r3, [r3, r2]
 800a502:	2202      	movs	r2, #2
 800a504:	431a      	orrs	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2180      	movs	r1, #128	; 0x80
 800a50a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	2208      	movs	r2, #8
 800a510:	4013      	ands	r3, r2
 800a512:	d013      	beq.n	800a53c <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	2220      	movs	r2, #32
 800a518:	4013      	ands	r3, r2
 800a51a:	d103      	bne.n	800a524 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2201      	movs	r2, #1
 800a520:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a522:	d00b      	beq.n	800a53c <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2208      	movs	r2, #8
 800a52a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2280      	movs	r2, #128	; 0x80
 800a530:	589b      	ldr	r3, [r3, r2]
 800a532:	2208      	movs	r2, #8
 800a534:	431a      	orrs	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2180      	movs	r1, #128	; 0x80
 800a53a:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a53c:	69fa      	ldr	r2, [r7, #28]
 800a53e:	2380      	movs	r3, #128	; 0x80
 800a540:	011b      	lsls	r3, r3, #4
 800a542:	4013      	ands	r3, r2
 800a544:	d011      	beq.n	800a56a <HAL_UART_IRQHandler+0x146>
 800a546:	69ba      	ldr	r2, [r7, #24]
 800a548:	2380      	movs	r3, #128	; 0x80
 800a54a:	04db      	lsls	r3, r3, #19
 800a54c:	4013      	ands	r3, r2
 800a54e:	d00c      	beq.n	800a56a <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2280      	movs	r2, #128	; 0x80
 800a556:	0112      	lsls	r2, r2, #4
 800a558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2280      	movs	r2, #128	; 0x80
 800a55e:	589b      	ldr	r3, [r3, r2]
 800a560:	2220      	movs	r2, #32
 800a562:	431a      	orrs	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2180      	movs	r1, #128	; 0x80
 800a568:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2280      	movs	r2, #128	; 0x80
 800a56e:	589b      	ldr	r3, [r3, r2]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d100      	bne.n	800a576 <HAL_UART_IRQHandler+0x152>
 800a574:	e14e      	b.n	800a814 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	2220      	movs	r2, #32
 800a57a:	4013      	ands	r3, r2
 800a57c:	d00c      	beq.n	800a598 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	2220      	movs	r2, #32
 800a582:	4013      	ands	r3, r2
 800a584:	d008      	beq.n	800a598 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d004      	beq.n	800a598 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	0010      	movs	r0, r2
 800a596:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2280      	movs	r2, #128	; 0x80
 800a59c:	589b      	ldr	r3, [r3, r2]
 800a59e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	2240      	movs	r2, #64	; 0x40
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	2b40      	cmp	r3, #64	; 0x40
 800a5ac:	d003      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2228      	movs	r2, #40	; 0x28
 800a5b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5b4:	d033      	beq.n	800a61e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	f000 fe0f 	bl	800b1dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	2240      	movs	r2, #64	; 0x40
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	2b40      	cmp	r3, #64	; 0x40
 800a5ca:	d123      	bne.n	800a614 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	689a      	ldr	r2, [r3, #8]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2140      	movs	r1, #64	; 0x40
 800a5d8:	438a      	bics	r2, r1
 800a5da:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d012      	beq.n	800a60a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5e8:	4a4e      	ldr	r2, [pc, #312]	; (800a724 <HAL_UART_IRQHandler+0x300>)
 800a5ea:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f0:	0018      	movs	r0, r3
 800a5f2:	f7fc fa73 	bl	8006adc <HAL_DMA_Abort_IT>
 800a5f6:	1e03      	subs	r3, r0, #0
 800a5f8:	d01a      	beq.n	800a630 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a604:	0018      	movs	r0, r3
 800a606:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a608:	e012      	b.n	800a630 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	0018      	movs	r0, r3
 800a60e:	f000 f915 	bl	800a83c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a612:	e00d      	b.n	800a630 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	0018      	movs	r0, r3
 800a618:	f000 f910 	bl	800a83c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a61c:	e008      	b.n	800a630 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	0018      	movs	r0, r3
 800a622:	f000 f90b 	bl	800a83c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2280      	movs	r2, #128	; 0x80
 800a62a:	2100      	movs	r1, #0
 800a62c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a62e:	e0f1      	b.n	800a814 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a630:	46c0      	nop			; (mov r8, r8)
    return;
 800a632:	e0ef      	b.n	800a814 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d000      	beq.n	800a63e <HAL_UART_IRQHandler+0x21a>
 800a63c:	e0b5      	b.n	800a7aa <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	2210      	movs	r2, #16
 800a642:	4013      	ands	r3, r2
 800a644:	d100      	bne.n	800a648 <HAL_UART_IRQHandler+0x224>
 800a646:	e0b0      	b.n	800a7aa <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	2210      	movs	r2, #16
 800a64c:	4013      	ands	r3, r2
 800a64e:	d100      	bne.n	800a652 <HAL_UART_IRQHandler+0x22e>
 800a650:	e0ab      	b.n	800a7aa <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2210      	movs	r2, #16
 800a658:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	2240      	movs	r2, #64	; 0x40
 800a662:	4013      	ands	r3, r2
 800a664:	2b40      	cmp	r3, #64	; 0x40
 800a666:	d161      	bne.n	800a72c <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	2108      	movs	r1, #8
 800a672:	187b      	adds	r3, r7, r1
 800a674:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800a676:	187b      	adds	r3, r7, r1
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d100      	bne.n	800a680 <HAL_UART_IRQHandler+0x25c>
 800a67e:	e0cb      	b.n	800a818 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2258      	movs	r2, #88	; 0x58
 800a684:	5a9b      	ldrh	r3, [r3, r2]
 800a686:	187a      	adds	r2, r7, r1
 800a688:	8812      	ldrh	r2, [r2, #0]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d300      	bcc.n	800a690 <HAL_UART_IRQHandler+0x26c>
 800a68e:	e0c3      	b.n	800a818 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	187a      	adds	r2, r7, r1
 800a694:	215a      	movs	r1, #90	; 0x5a
 800a696:	8812      	ldrh	r2, [r2, #0]
 800a698:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	d12a      	bne.n	800a6fe <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	491d      	ldr	r1, [pc, #116]	; (800a728 <HAL_UART_IRQHandler+0x304>)
 800a6b4:	400a      	ands	r2, r1
 800a6b6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689a      	ldr	r2, [r3, #8]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	438a      	bics	r2, r1
 800a6c6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689a      	ldr	r2, [r3, #8]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2140      	movs	r1, #64	; 0x40
 800a6d4:	438a      	bics	r2, r1
 800a6d6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2110      	movs	r1, #16
 800a6f0:	438a      	bics	r2, r1
 800a6f2:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	f7fc f9af 	bl	8006a5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2258      	movs	r2, #88	; 0x58
 800a702:	5a9a      	ldrh	r2, [r3, r2]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	215a      	movs	r1, #90	; 0x5a
 800a708:	5a5b      	ldrh	r3, [r3, r1]
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	b29a      	uxth	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	0011      	movs	r1, r2
 800a714:	0018      	movs	r0, r3
 800a716:	f000 f899 	bl	800a84c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a71a:	e07d      	b.n	800a818 <HAL_UART_IRQHandler+0x3f4>
 800a71c:	0000080f 	.word	0x0000080f
 800a720:	04000120 	.word	0x04000120
 800a724:	0800b331 	.word	0x0800b331
 800a728:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2258      	movs	r2, #88	; 0x58
 800a730:	5a99      	ldrh	r1, [r3, r2]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	225a      	movs	r2, #90	; 0x5a
 800a736:	5a9b      	ldrh	r3, [r3, r2]
 800a738:	b29a      	uxth	r2, r3
 800a73a:	200a      	movs	r0, #10
 800a73c:	183b      	adds	r3, r7, r0
 800a73e:	1a8a      	subs	r2, r1, r2
 800a740:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	225a      	movs	r2, #90	; 0x5a
 800a746:	5a9b      	ldrh	r3, [r3, r2]
 800a748:	b29b      	uxth	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d100      	bne.n	800a750 <HAL_UART_IRQHandler+0x32c>
 800a74e:	e065      	b.n	800a81c <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800a750:	183b      	adds	r3, r7, r0
 800a752:	881b      	ldrh	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d061      	beq.n	800a81c <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4931      	ldr	r1, [pc, #196]	; (800a828 <HAL_UART_IRQHandler+0x404>)
 800a764:	400a      	ands	r2, r1
 800a766:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	689a      	ldr	r2, [r3, #8]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2101      	movs	r1, #1
 800a774:	438a      	bics	r2, r1
 800a776:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2220      	movs	r2, #32
 800a77c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2110      	movs	r1, #16
 800a796:	438a      	bics	r2, r1
 800a798:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a79a:	183b      	adds	r3, r7, r0
 800a79c:	881a      	ldrh	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	0011      	movs	r1, r2
 800a7a2:	0018      	movs	r0, r3
 800a7a4:	f000 f852 	bl	800a84c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a7a8:	e038      	b.n	800a81c <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a7aa:	69fa      	ldr	r2, [r7, #28]
 800a7ac:	2380      	movs	r3, #128	; 0x80
 800a7ae:	035b      	lsls	r3, r3, #13
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	d00e      	beq.n	800a7d2 <HAL_UART_IRQHandler+0x3ae>
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	2380      	movs	r3, #128	; 0x80
 800a7b8:	03db      	lsls	r3, r3, #15
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	d009      	beq.n	800a7d2 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2280      	movs	r2, #128	; 0x80
 800a7c4:	0352      	lsls	r2, r2, #13
 800a7c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	0018      	movs	r0, r3
 800a7cc:	f000 feca 	bl	800b564 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7d0:	e027      	b.n	800a822 <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	2280      	movs	r2, #128	; 0x80
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	d00d      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	2280      	movs	r2, #128	; 0x80
 800a7de:	4013      	ands	r3, r2
 800a7e0:	d009      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d01a      	beq.n	800a820 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	0010      	movs	r0, r2
 800a7f2:	4798      	blx	r3
    }
    return;
 800a7f4:	e014      	b.n	800a820 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	2240      	movs	r2, #64	; 0x40
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	d011      	beq.n	800a822 <HAL_UART_IRQHandler+0x3fe>
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	2240      	movs	r2, #64	; 0x40
 800a802:	4013      	ands	r3, r2
 800a804:	d00d      	beq.n	800a822 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	0018      	movs	r0, r3
 800a80a:	f000 fda8 	bl	800b35e <UART_EndTransmit_IT>
    return;
 800a80e:	e008      	b.n	800a822 <HAL_UART_IRQHandler+0x3fe>
      return;
 800a810:	46c0      	nop			; (mov r8, r8)
 800a812:	e006      	b.n	800a822 <HAL_UART_IRQHandler+0x3fe>
    return;
 800a814:	46c0      	nop			; (mov r8, r8)
 800a816:	e004      	b.n	800a822 <HAL_UART_IRQHandler+0x3fe>
      return;
 800a818:	46c0      	nop			; (mov r8, r8)
 800a81a:	e002      	b.n	800a822 <HAL_UART_IRQHandler+0x3fe>
      return;
 800a81c:	46c0      	nop			; (mov r8, r8)
 800a81e:	e000      	b.n	800a822 <HAL_UART_IRQHandler+0x3fe>
    return;
 800a820:	46c0      	nop			; (mov r8, r8)
  }

}
 800a822:	46bd      	mov	sp, r7
 800a824:	b008      	add	sp, #32
 800a826:	bd80      	pop	{r7, pc}
 800a828:	fffffedf 	.word	0xfffffedf

0800a82c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a834:	46c0      	nop			; (mov r8, r8)
 800a836:	46bd      	mov	sp, r7
 800a838:	b002      	add	sp, #8
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a844:	46c0      	nop			; (mov r8, r8)
 800a846:	46bd      	mov	sp, r7
 800a848:	b002      	add	sp, #8
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	000a      	movs	r2, r1
 800a856:	1cbb      	adds	r3, r7, #2
 800a858:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a85a:	46c0      	nop			; (mov r8, r8)
 800a85c:	46bd      	mov	sp, r7
 800a85e:	b002      	add	sp, #8
 800a860:	bd80      	pop	{r7, pc}
	...

0800a864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a864:	b5b0      	push	{r4, r5, r7, lr}
 800a866:	b08e      	sub	sp, #56	; 0x38
 800a868:	af00      	add	r7, sp, #0
 800a86a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a86c:	231a      	movs	r3, #26
 800a86e:	2218      	movs	r2, #24
 800a870:	189b      	adds	r3, r3, r2
 800a872:	19db      	adds	r3, r3, r7
 800a874:	2200      	movs	r2, #0
 800a876:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	689a      	ldr	r2, [r3, #8]
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	431a      	orrs	r2, r3
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	431a      	orrs	r2, r3
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4ac3      	ldr	r2, [pc, #780]	; (800aba4 <UART_SetConfig+0x340>)
 800a898:	4013      	ands	r3, r2
 800a89a:	0019      	movs	r1, r3
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	4abe      	ldr	r2, [pc, #760]	; (800aba8 <UART_SetConfig+0x344>)
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	0019      	movs	r1, r3
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	68da      	ldr	r2, [r3, #12]
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4ab8      	ldr	r2, [pc, #736]	; (800abac <UART_SetConfig+0x348>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d004      	beq.n	800a8d8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	4ab4      	ldr	r2, [pc, #720]	; (800abb0 <UART_SetConfig+0x34c>)
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	0019      	movs	r1, r3
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4ab0      	ldr	r2, [pc, #704]	; (800abb4 <UART_SetConfig+0x350>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d131      	bne.n	800a95c <UART_SetConfig+0xf8>
 800a8f8:	4baf      	ldr	r3, [pc, #700]	; (800abb8 <UART_SetConfig+0x354>)
 800a8fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fc:	2203      	movs	r2, #3
 800a8fe:	4013      	ands	r3, r2
 800a900:	2b03      	cmp	r3, #3
 800a902:	d01d      	beq.n	800a940 <UART_SetConfig+0xdc>
 800a904:	d823      	bhi.n	800a94e <UART_SetConfig+0xea>
 800a906:	2b02      	cmp	r3, #2
 800a908:	d00c      	beq.n	800a924 <UART_SetConfig+0xc0>
 800a90a:	d820      	bhi.n	800a94e <UART_SetConfig+0xea>
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <UART_SetConfig+0xb2>
 800a910:	2b01      	cmp	r3, #1
 800a912:	d00e      	beq.n	800a932 <UART_SetConfig+0xce>
 800a914:	e01b      	b.n	800a94e <UART_SetConfig+0xea>
 800a916:	231b      	movs	r3, #27
 800a918:	2218      	movs	r2, #24
 800a91a:	189b      	adds	r3, r3, r2
 800a91c:	19db      	adds	r3, r3, r7
 800a91e:	2201      	movs	r2, #1
 800a920:	701a      	strb	r2, [r3, #0]
 800a922:	e0b4      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a924:	231b      	movs	r3, #27
 800a926:	2218      	movs	r2, #24
 800a928:	189b      	adds	r3, r3, r2
 800a92a:	19db      	adds	r3, r3, r7
 800a92c:	2202      	movs	r2, #2
 800a92e:	701a      	strb	r2, [r3, #0]
 800a930:	e0ad      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a932:	231b      	movs	r3, #27
 800a934:	2218      	movs	r2, #24
 800a936:	189b      	adds	r3, r3, r2
 800a938:	19db      	adds	r3, r3, r7
 800a93a:	2204      	movs	r2, #4
 800a93c:	701a      	strb	r2, [r3, #0]
 800a93e:	e0a6      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a940:	231b      	movs	r3, #27
 800a942:	2218      	movs	r2, #24
 800a944:	189b      	adds	r3, r3, r2
 800a946:	19db      	adds	r3, r3, r7
 800a948:	2208      	movs	r2, #8
 800a94a:	701a      	strb	r2, [r3, #0]
 800a94c:	e09f      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a94e:	231b      	movs	r3, #27
 800a950:	2218      	movs	r2, #24
 800a952:	189b      	adds	r3, r3, r2
 800a954:	19db      	adds	r3, r3, r7
 800a956:	2210      	movs	r2, #16
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	e098      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a96      	ldr	r2, [pc, #600]	; (800abbc <UART_SetConfig+0x358>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d131      	bne.n	800a9ca <UART_SetConfig+0x166>
 800a966:	4b94      	ldr	r3, [pc, #592]	; (800abb8 <UART_SetConfig+0x354>)
 800a968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a96a:	220c      	movs	r2, #12
 800a96c:	4013      	ands	r3, r2
 800a96e:	2b0c      	cmp	r3, #12
 800a970:	d01d      	beq.n	800a9ae <UART_SetConfig+0x14a>
 800a972:	d823      	bhi.n	800a9bc <UART_SetConfig+0x158>
 800a974:	2b08      	cmp	r3, #8
 800a976:	d00c      	beq.n	800a992 <UART_SetConfig+0x12e>
 800a978:	d820      	bhi.n	800a9bc <UART_SetConfig+0x158>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <UART_SetConfig+0x120>
 800a97e:	2b04      	cmp	r3, #4
 800a980:	d00e      	beq.n	800a9a0 <UART_SetConfig+0x13c>
 800a982:	e01b      	b.n	800a9bc <UART_SetConfig+0x158>
 800a984:	231b      	movs	r3, #27
 800a986:	2218      	movs	r2, #24
 800a988:	189b      	adds	r3, r3, r2
 800a98a:	19db      	adds	r3, r3, r7
 800a98c:	2200      	movs	r2, #0
 800a98e:	701a      	strb	r2, [r3, #0]
 800a990:	e07d      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a992:	231b      	movs	r3, #27
 800a994:	2218      	movs	r2, #24
 800a996:	189b      	adds	r3, r3, r2
 800a998:	19db      	adds	r3, r3, r7
 800a99a:	2202      	movs	r2, #2
 800a99c:	701a      	strb	r2, [r3, #0]
 800a99e:	e076      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a9a0:	231b      	movs	r3, #27
 800a9a2:	2218      	movs	r2, #24
 800a9a4:	189b      	adds	r3, r3, r2
 800a9a6:	19db      	adds	r3, r3, r7
 800a9a8:	2204      	movs	r2, #4
 800a9aa:	701a      	strb	r2, [r3, #0]
 800a9ac:	e06f      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a9ae:	231b      	movs	r3, #27
 800a9b0:	2218      	movs	r2, #24
 800a9b2:	189b      	adds	r3, r3, r2
 800a9b4:	19db      	adds	r3, r3, r7
 800a9b6:	2208      	movs	r2, #8
 800a9b8:	701a      	strb	r2, [r3, #0]
 800a9ba:	e068      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a9bc:	231b      	movs	r3, #27
 800a9be:	2218      	movs	r2, #24
 800a9c0:	189b      	adds	r3, r3, r2
 800a9c2:	19db      	adds	r3, r3, r7
 800a9c4:	2210      	movs	r2, #16
 800a9c6:	701a      	strb	r2, [r3, #0]
 800a9c8:	e061      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a7c      	ldr	r2, [pc, #496]	; (800abc0 <UART_SetConfig+0x35c>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d106      	bne.n	800a9e2 <UART_SetConfig+0x17e>
 800a9d4:	231b      	movs	r3, #27
 800a9d6:	2218      	movs	r2, #24
 800a9d8:	189b      	adds	r3, r3, r2
 800a9da:	19db      	adds	r3, r3, r7
 800a9dc:	2200      	movs	r2, #0
 800a9de:	701a      	strb	r2, [r3, #0]
 800a9e0:	e055      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a77      	ldr	r2, [pc, #476]	; (800abc4 <UART_SetConfig+0x360>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d106      	bne.n	800a9fa <UART_SetConfig+0x196>
 800a9ec:	231b      	movs	r3, #27
 800a9ee:	2218      	movs	r2, #24
 800a9f0:	189b      	adds	r3, r3, r2
 800a9f2:	19db      	adds	r3, r3, r7
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	701a      	strb	r2, [r3, #0]
 800a9f8:	e049      	b.n	800aa8e <UART_SetConfig+0x22a>
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a6b      	ldr	r2, [pc, #428]	; (800abac <UART_SetConfig+0x348>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d13e      	bne.n	800aa82 <UART_SetConfig+0x21e>
 800aa04:	4b6c      	ldr	r3, [pc, #432]	; (800abb8 <UART_SetConfig+0x354>)
 800aa06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa08:	23c0      	movs	r3, #192	; 0xc0
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	22c0      	movs	r2, #192	; 0xc0
 800aa10:	0112      	lsls	r2, r2, #4
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d027      	beq.n	800aa66 <UART_SetConfig+0x202>
 800aa16:	22c0      	movs	r2, #192	; 0xc0
 800aa18:	0112      	lsls	r2, r2, #4
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d82a      	bhi.n	800aa74 <UART_SetConfig+0x210>
 800aa1e:	2280      	movs	r2, #128	; 0x80
 800aa20:	0112      	lsls	r2, r2, #4
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d011      	beq.n	800aa4a <UART_SetConfig+0x1e6>
 800aa26:	2280      	movs	r2, #128	; 0x80
 800aa28:	0112      	lsls	r2, r2, #4
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d822      	bhi.n	800aa74 <UART_SetConfig+0x210>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d004      	beq.n	800aa3c <UART_SetConfig+0x1d8>
 800aa32:	2280      	movs	r2, #128	; 0x80
 800aa34:	00d2      	lsls	r2, r2, #3
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d00e      	beq.n	800aa58 <UART_SetConfig+0x1f4>
 800aa3a:	e01b      	b.n	800aa74 <UART_SetConfig+0x210>
 800aa3c:	231b      	movs	r3, #27
 800aa3e:	2218      	movs	r2, #24
 800aa40:	189b      	adds	r3, r3, r2
 800aa42:	19db      	adds	r3, r3, r7
 800aa44:	2200      	movs	r2, #0
 800aa46:	701a      	strb	r2, [r3, #0]
 800aa48:	e021      	b.n	800aa8e <UART_SetConfig+0x22a>
 800aa4a:	231b      	movs	r3, #27
 800aa4c:	2218      	movs	r2, #24
 800aa4e:	189b      	adds	r3, r3, r2
 800aa50:	19db      	adds	r3, r3, r7
 800aa52:	2202      	movs	r2, #2
 800aa54:	701a      	strb	r2, [r3, #0]
 800aa56:	e01a      	b.n	800aa8e <UART_SetConfig+0x22a>
 800aa58:	231b      	movs	r3, #27
 800aa5a:	2218      	movs	r2, #24
 800aa5c:	189b      	adds	r3, r3, r2
 800aa5e:	19db      	adds	r3, r3, r7
 800aa60:	2204      	movs	r2, #4
 800aa62:	701a      	strb	r2, [r3, #0]
 800aa64:	e013      	b.n	800aa8e <UART_SetConfig+0x22a>
 800aa66:	231b      	movs	r3, #27
 800aa68:	2218      	movs	r2, #24
 800aa6a:	189b      	adds	r3, r3, r2
 800aa6c:	19db      	adds	r3, r3, r7
 800aa6e:	2208      	movs	r2, #8
 800aa70:	701a      	strb	r2, [r3, #0]
 800aa72:	e00c      	b.n	800aa8e <UART_SetConfig+0x22a>
 800aa74:	231b      	movs	r3, #27
 800aa76:	2218      	movs	r2, #24
 800aa78:	189b      	adds	r3, r3, r2
 800aa7a:	19db      	adds	r3, r3, r7
 800aa7c:	2210      	movs	r2, #16
 800aa7e:	701a      	strb	r2, [r3, #0]
 800aa80:	e005      	b.n	800aa8e <UART_SetConfig+0x22a>
 800aa82:	231b      	movs	r3, #27
 800aa84:	2218      	movs	r2, #24
 800aa86:	189b      	adds	r3, r3, r2
 800aa88:	19db      	adds	r3, r3, r7
 800aa8a:	2210      	movs	r2, #16
 800aa8c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a46      	ldr	r2, [pc, #280]	; (800abac <UART_SetConfig+0x348>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d000      	beq.n	800aa9a <UART_SetConfig+0x236>
 800aa98:	e09a      	b.n	800abd0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa9a:	231b      	movs	r3, #27
 800aa9c:	2218      	movs	r2, #24
 800aa9e:	189b      	adds	r3, r3, r2
 800aaa0:	19db      	adds	r3, r3, r7
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	2b08      	cmp	r3, #8
 800aaa6:	d01d      	beq.n	800aae4 <UART_SetConfig+0x280>
 800aaa8:	dc20      	bgt.n	800aaec <UART_SetConfig+0x288>
 800aaaa:	2b04      	cmp	r3, #4
 800aaac:	d015      	beq.n	800aada <UART_SetConfig+0x276>
 800aaae:	dc1d      	bgt.n	800aaec <UART_SetConfig+0x288>
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d002      	beq.n	800aaba <UART_SetConfig+0x256>
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d005      	beq.n	800aac4 <UART_SetConfig+0x260>
 800aab8:	e018      	b.n	800aaec <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaba:	f7fe f8cb 	bl	8008c54 <HAL_RCC_GetPCLK1Freq>
 800aabe:	0003      	movs	r3, r0
 800aac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aac2:	e01c      	b.n	800aafe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aac4:	4b3c      	ldr	r3, [pc, #240]	; (800abb8 <UART_SetConfig+0x354>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2210      	movs	r2, #16
 800aaca:	4013      	ands	r3, r2
 800aacc:	d002      	beq.n	800aad4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800aace:	4b3e      	ldr	r3, [pc, #248]	; (800abc8 <UART_SetConfig+0x364>)
 800aad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aad2:	e014      	b.n	800aafe <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800aad4:	4b3d      	ldr	r3, [pc, #244]	; (800abcc <UART_SetConfig+0x368>)
 800aad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aad8:	e011      	b.n	800aafe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aada:	f7fe f80b 	bl	8008af4 <HAL_RCC_GetSysClockFreq>
 800aade:	0003      	movs	r3, r0
 800aae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aae2:	e00c      	b.n	800aafe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aae4:	2380      	movs	r3, #128	; 0x80
 800aae6:	021b      	lsls	r3, r3, #8
 800aae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aaea:	e008      	b.n	800aafe <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800aaec:	2300      	movs	r3, #0
 800aaee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aaf0:	231a      	movs	r3, #26
 800aaf2:	2218      	movs	r2, #24
 800aaf4:	189b      	adds	r3, r3, r2
 800aaf6:	19db      	adds	r3, r3, r7
 800aaf8:	2201      	movs	r2, #1
 800aafa:	701a      	strb	r2, [r3, #0]
        break;
 800aafc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d100      	bne.n	800ab06 <UART_SetConfig+0x2a2>
 800ab04:	e134      	b.n	800ad70 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	685a      	ldr	r2, [r3, #4]
 800ab0a:	0013      	movs	r3, r2
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	189b      	adds	r3, r3, r2
 800ab10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d305      	bcc.n	800ab22 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ab1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d906      	bls.n	800ab30 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800ab22:	231a      	movs	r3, #26
 800ab24:	2218      	movs	r2, #24
 800ab26:	189b      	adds	r3, r3, r2
 800ab28:	19db      	adds	r3, r3, r7
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	e11f      	b.n	800ad70 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab32:	613b      	str	r3, [r7, #16]
 800ab34:	2300      	movs	r3, #0
 800ab36:	617b      	str	r3, [r7, #20]
 800ab38:	6939      	ldr	r1, [r7, #16]
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	000b      	movs	r3, r1
 800ab3e:	0e1b      	lsrs	r3, r3, #24
 800ab40:	0010      	movs	r0, r2
 800ab42:	0205      	lsls	r5, r0, #8
 800ab44:	431d      	orrs	r5, r3
 800ab46:	000b      	movs	r3, r1
 800ab48:	021c      	lsls	r4, r3, #8
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	085b      	lsrs	r3, r3, #1
 800ab50:	60bb      	str	r3, [r7, #8]
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
 800ab56:	68b8      	ldr	r0, [r7, #8]
 800ab58:	68f9      	ldr	r1, [r7, #12]
 800ab5a:	1900      	adds	r0, r0, r4
 800ab5c:	4169      	adcs	r1, r5
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	603b      	str	r3, [r7, #0]
 800ab64:	2300      	movs	r3, #0
 800ab66:	607b      	str	r3, [r7, #4]
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f7f5 fcac 	bl	80004c8 <__aeabi_uldivmod>
 800ab70:	0002      	movs	r2, r0
 800ab72:	000b      	movs	r3, r1
 800ab74:	0013      	movs	r3, r2
 800ab76:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab7a:	23c0      	movs	r3, #192	; 0xc0
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d309      	bcc.n	800ab96 <UART_SetConfig+0x332>
 800ab82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab84:	2380      	movs	r3, #128	; 0x80
 800ab86:	035b      	lsls	r3, r3, #13
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d204      	bcs.n	800ab96 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab92:	60da      	str	r2, [r3, #12]
 800ab94:	e0ec      	b.n	800ad70 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800ab96:	231a      	movs	r3, #26
 800ab98:	2218      	movs	r2, #24
 800ab9a:	189b      	adds	r3, r3, r2
 800ab9c:	19db      	adds	r3, r3, r7
 800ab9e:	2201      	movs	r2, #1
 800aba0:	701a      	strb	r2, [r3, #0]
 800aba2:	e0e5      	b.n	800ad70 <UART_SetConfig+0x50c>
 800aba4:	efff69f3 	.word	0xefff69f3
 800aba8:	ffffcfff 	.word	0xffffcfff
 800abac:	40004800 	.word	0x40004800
 800abb0:	fffff4ff 	.word	0xfffff4ff
 800abb4:	40013800 	.word	0x40013800
 800abb8:	40021000 	.word	0x40021000
 800abbc:	40004400 	.word	0x40004400
 800abc0:	40004c00 	.word	0x40004c00
 800abc4:	40005000 	.word	0x40005000
 800abc8:	003d0900 	.word	0x003d0900
 800abcc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	69da      	ldr	r2, [r3, #28]
 800abd4:	2380      	movs	r3, #128	; 0x80
 800abd6:	021b      	lsls	r3, r3, #8
 800abd8:	429a      	cmp	r2, r3
 800abda:	d000      	beq.n	800abde <UART_SetConfig+0x37a>
 800abdc:	e071      	b.n	800acc2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800abde:	231b      	movs	r3, #27
 800abe0:	2218      	movs	r2, #24
 800abe2:	189b      	adds	r3, r3, r2
 800abe4:	19db      	adds	r3, r3, r7
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b08      	cmp	r3, #8
 800abea:	d822      	bhi.n	800ac32 <UART_SetConfig+0x3ce>
 800abec:	009a      	lsls	r2, r3, #2
 800abee:	4b68      	ldr	r3, [pc, #416]	; (800ad90 <UART_SetConfig+0x52c>)
 800abf0:	18d3      	adds	r3, r2, r3
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abf6:	f7fe f82d 	bl	8008c54 <HAL_RCC_GetPCLK1Freq>
 800abfa:	0003      	movs	r3, r0
 800abfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abfe:	e021      	b.n	800ac44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac00:	f7fe f83e 	bl	8008c80 <HAL_RCC_GetPCLK2Freq>
 800ac04:	0003      	movs	r3, r0
 800ac06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac08:	e01c      	b.n	800ac44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac0a:	4b62      	ldr	r3, [pc, #392]	; (800ad94 <UART_SetConfig+0x530>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2210      	movs	r2, #16
 800ac10:	4013      	ands	r3, r2
 800ac12:	d002      	beq.n	800ac1a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ac14:	4b60      	ldr	r3, [pc, #384]	; (800ad98 <UART_SetConfig+0x534>)
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac18:	e014      	b.n	800ac44 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800ac1a:	4b60      	ldr	r3, [pc, #384]	; (800ad9c <UART_SetConfig+0x538>)
 800ac1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac1e:	e011      	b.n	800ac44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac20:	f7fd ff68 	bl	8008af4 <HAL_RCC_GetSysClockFreq>
 800ac24:	0003      	movs	r3, r0
 800ac26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac28:	e00c      	b.n	800ac44 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac2a:	2380      	movs	r3, #128	; 0x80
 800ac2c:	021b      	lsls	r3, r3, #8
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac30:	e008      	b.n	800ac44 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac36:	231a      	movs	r3, #26
 800ac38:	2218      	movs	r2, #24
 800ac3a:	189b      	adds	r3, r3, r2
 800ac3c:	19db      	adds	r3, r3, r7
 800ac3e:	2201      	movs	r2, #1
 800ac40:	701a      	strb	r2, [r3, #0]
        break;
 800ac42:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d100      	bne.n	800ac4c <UART_SetConfig+0x3e8>
 800ac4a:	e091      	b.n	800ad70 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	005a      	lsls	r2, r3, #1
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	085b      	lsrs	r3, r3, #1
 800ac56:	18d2      	adds	r2, r2, r3
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	0019      	movs	r1, r3
 800ac5e:	0010      	movs	r0, r2
 800ac60:	f7f5 fa5a 	bl	8000118 <__udivsi3>
 800ac64:	0003      	movs	r3, r0
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6c:	2b0f      	cmp	r3, #15
 800ac6e:	d921      	bls.n	800acb4 <UART_SetConfig+0x450>
 800ac70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac72:	2380      	movs	r3, #128	; 0x80
 800ac74:	025b      	lsls	r3, r3, #9
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d21c      	bcs.n	800acb4 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	200e      	movs	r0, #14
 800ac80:	2418      	movs	r4, #24
 800ac82:	1903      	adds	r3, r0, r4
 800ac84:	19db      	adds	r3, r3, r7
 800ac86:	210f      	movs	r1, #15
 800ac88:	438a      	bics	r2, r1
 800ac8a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8e:	085b      	lsrs	r3, r3, #1
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	2207      	movs	r2, #7
 800ac94:	4013      	ands	r3, r2
 800ac96:	b299      	uxth	r1, r3
 800ac98:	1903      	adds	r3, r0, r4
 800ac9a:	19db      	adds	r3, r3, r7
 800ac9c:	1902      	adds	r2, r0, r4
 800ac9e:	19d2      	adds	r2, r2, r7
 800aca0:	8812      	ldrh	r2, [r2, #0]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	1902      	adds	r2, r0, r4
 800acac:	19d2      	adds	r2, r2, r7
 800acae:	8812      	ldrh	r2, [r2, #0]
 800acb0:	60da      	str	r2, [r3, #12]
 800acb2:	e05d      	b.n	800ad70 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800acb4:	231a      	movs	r3, #26
 800acb6:	2218      	movs	r2, #24
 800acb8:	189b      	adds	r3, r3, r2
 800acba:	19db      	adds	r3, r3, r7
 800acbc:	2201      	movs	r2, #1
 800acbe:	701a      	strb	r2, [r3, #0]
 800acc0:	e056      	b.n	800ad70 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800acc2:	231b      	movs	r3, #27
 800acc4:	2218      	movs	r2, #24
 800acc6:	189b      	adds	r3, r3, r2
 800acc8:	19db      	adds	r3, r3, r7
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b08      	cmp	r3, #8
 800acce:	d822      	bhi.n	800ad16 <UART_SetConfig+0x4b2>
 800acd0:	009a      	lsls	r2, r3, #2
 800acd2:	4b33      	ldr	r3, [pc, #204]	; (800ada0 <UART_SetConfig+0x53c>)
 800acd4:	18d3      	adds	r3, r2, r3
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acda:	f7fd ffbb 	bl	8008c54 <HAL_RCC_GetPCLK1Freq>
 800acde:	0003      	movs	r3, r0
 800ace0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ace2:	e021      	b.n	800ad28 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ace4:	f7fd ffcc 	bl	8008c80 <HAL_RCC_GetPCLK2Freq>
 800ace8:	0003      	movs	r3, r0
 800acea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acec:	e01c      	b.n	800ad28 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acee:	4b29      	ldr	r3, [pc, #164]	; (800ad94 <UART_SetConfig+0x530>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2210      	movs	r2, #16
 800acf4:	4013      	ands	r3, r2
 800acf6:	d002      	beq.n	800acfe <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800acf8:	4b27      	ldr	r3, [pc, #156]	; (800ad98 <UART_SetConfig+0x534>)
 800acfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acfc:	e014      	b.n	800ad28 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800acfe:	4b27      	ldr	r3, [pc, #156]	; (800ad9c <UART_SetConfig+0x538>)
 800ad00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad02:	e011      	b.n	800ad28 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad04:	f7fd fef6 	bl	8008af4 <HAL_RCC_GetSysClockFreq>
 800ad08:	0003      	movs	r3, r0
 800ad0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad0c:	e00c      	b.n	800ad28 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad0e:	2380      	movs	r3, #128	; 0x80
 800ad10:	021b      	lsls	r3, r3, #8
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad14:	e008      	b.n	800ad28 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ad1a:	231a      	movs	r3, #26
 800ad1c:	2218      	movs	r2, #24
 800ad1e:	189b      	adds	r3, r3, r2
 800ad20:	19db      	adds	r3, r3, r7
 800ad22:	2201      	movs	r2, #1
 800ad24:	701a      	strb	r2, [r3, #0]
        break;
 800ad26:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d020      	beq.n	800ad70 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	085a      	lsrs	r2, r3, #1
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	18d2      	adds	r2, r2, r3
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	0019      	movs	r1, r3
 800ad3e:	0010      	movs	r0, r2
 800ad40:	f7f5 f9ea 	bl	8000118 <__udivsi3>
 800ad44:	0003      	movs	r3, r0
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	2b0f      	cmp	r3, #15
 800ad4e:	d909      	bls.n	800ad64 <UART_SetConfig+0x500>
 800ad50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad52:	2380      	movs	r3, #128	; 0x80
 800ad54:	025b      	lsls	r3, r3, #9
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d204      	bcs.n	800ad64 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad60:	60da      	str	r2, [r3, #12]
 800ad62:	e005      	b.n	800ad70 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800ad64:	231a      	movs	r3, #26
 800ad66:	2218      	movs	r2, #24
 800ad68:	189b      	adds	r3, r3, r2
 800ad6a:	19db      	adds	r3, r3, r7
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	2200      	movs	r2, #0
 800ad74:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ad7c:	231a      	movs	r3, #26
 800ad7e:	2218      	movs	r2, #24
 800ad80:	189b      	adds	r3, r3, r2
 800ad82:	19db      	adds	r3, r3, r7
 800ad84:	781b      	ldrb	r3, [r3, #0]
}
 800ad86:	0018      	movs	r0, r3
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	b00e      	add	sp, #56	; 0x38
 800ad8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ad8e:	46c0      	nop			; (mov r8, r8)
 800ad90:	0801da74 	.word	0x0801da74
 800ad94:	40021000 	.word	0x40021000
 800ad98:	003d0900 	.word	0x003d0900
 800ad9c:	00f42400 	.word	0x00f42400
 800ada0:	0801da98 	.word	0x0801da98

0800ada4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	2201      	movs	r2, #1
 800adb2:	4013      	ands	r3, r2
 800adb4:	d00b      	beq.n	800adce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	4a4a      	ldr	r2, [pc, #296]	; (800aee8 <UART_AdvFeatureConfig+0x144>)
 800adbe:	4013      	ands	r3, r2
 800adc0:	0019      	movs	r1, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	430a      	orrs	r2, r1
 800adcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add2:	2202      	movs	r2, #2
 800add4:	4013      	ands	r3, r2
 800add6:	d00b      	beq.n	800adf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	4a43      	ldr	r2, [pc, #268]	; (800aeec <UART_AdvFeatureConfig+0x148>)
 800ade0:	4013      	ands	r3, r2
 800ade2:	0019      	movs	r1, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	430a      	orrs	r2, r1
 800adee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf4:	2204      	movs	r2, #4
 800adf6:	4013      	ands	r3, r2
 800adf8:	d00b      	beq.n	800ae12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	4a3b      	ldr	r2, [pc, #236]	; (800aef0 <UART_AdvFeatureConfig+0x14c>)
 800ae02:	4013      	ands	r3, r2
 800ae04:	0019      	movs	r1, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae16:	2208      	movs	r2, #8
 800ae18:	4013      	ands	r3, r2
 800ae1a:	d00b      	beq.n	800ae34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4a34      	ldr	r2, [pc, #208]	; (800aef4 <UART_AdvFeatureConfig+0x150>)
 800ae24:	4013      	ands	r3, r2
 800ae26:	0019      	movs	r1, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	430a      	orrs	r2, r1
 800ae32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	2210      	movs	r2, #16
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	d00b      	beq.n	800ae56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	4a2c      	ldr	r2, [pc, #176]	; (800aef8 <UART_AdvFeatureConfig+0x154>)
 800ae46:	4013      	ands	r3, r2
 800ae48:	0019      	movs	r1, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	430a      	orrs	r2, r1
 800ae54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5a:	2220      	movs	r2, #32
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	d00b      	beq.n	800ae78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	4a25      	ldr	r2, [pc, #148]	; (800aefc <UART_AdvFeatureConfig+0x158>)
 800ae68:	4013      	ands	r3, r2
 800ae6a:	0019      	movs	r1, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	2240      	movs	r2, #64	; 0x40
 800ae7e:	4013      	ands	r3, r2
 800ae80:	d01d      	beq.n	800aebe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	4a1d      	ldr	r2, [pc, #116]	; (800af00 <UART_AdvFeatureConfig+0x15c>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	0019      	movs	r1, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae9e:	2380      	movs	r3, #128	; 0x80
 800aea0:	035b      	lsls	r3, r3, #13
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d10b      	bne.n	800aebe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	4a15      	ldr	r2, [pc, #84]	; (800af04 <UART_AdvFeatureConfig+0x160>)
 800aeae:	4013      	ands	r3, r2
 800aeb0:	0019      	movs	r1, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	430a      	orrs	r2, r1
 800aebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	2280      	movs	r2, #128	; 0x80
 800aec4:	4013      	ands	r3, r2
 800aec6:	d00b      	beq.n	800aee0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	4a0e      	ldr	r2, [pc, #56]	; (800af08 <UART_AdvFeatureConfig+0x164>)
 800aed0:	4013      	ands	r3, r2
 800aed2:	0019      	movs	r1, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	430a      	orrs	r2, r1
 800aede:	605a      	str	r2, [r3, #4]
  }
}
 800aee0:	46c0      	nop			; (mov r8, r8)
 800aee2:	46bd      	mov	sp, r7
 800aee4:	b002      	add	sp, #8
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	fffdffff 	.word	0xfffdffff
 800aeec:	fffeffff 	.word	0xfffeffff
 800aef0:	fffbffff 	.word	0xfffbffff
 800aef4:	ffff7fff 	.word	0xffff7fff
 800aef8:	ffffefff 	.word	0xffffefff
 800aefc:	ffffdfff 	.word	0xffffdfff
 800af00:	ffefffff 	.word	0xffefffff
 800af04:	ff9fffff 	.word	0xff9fffff
 800af08:	fff7ffff 	.word	0xfff7ffff

0800af0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af02      	add	r7, sp, #8
 800af12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2280      	movs	r2, #128	; 0x80
 800af18:	2100      	movs	r1, #0
 800af1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af1c:	f7f9 fbd1 	bl	80046c2 <HAL_GetTick>
 800af20:	0003      	movs	r3, r0
 800af22:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2208      	movs	r2, #8
 800af2c:	4013      	ands	r3, r2
 800af2e:	2b08      	cmp	r3, #8
 800af30:	d10c      	bne.n	800af4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2280      	movs	r2, #128	; 0x80
 800af36:	0391      	lsls	r1, r2, #14
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	4a17      	ldr	r2, [pc, #92]	; (800af98 <UART_CheckIdleState+0x8c>)
 800af3c:	9200      	str	r2, [sp, #0]
 800af3e:	2200      	movs	r2, #0
 800af40:	f000 f82c 	bl	800af9c <UART_WaitOnFlagUntilTimeout>
 800af44:	1e03      	subs	r3, r0, #0
 800af46:	d001      	beq.n	800af4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af48:	2303      	movs	r3, #3
 800af4a:	e021      	b.n	800af90 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2204      	movs	r2, #4
 800af54:	4013      	ands	r3, r2
 800af56:	2b04      	cmp	r3, #4
 800af58:	d10c      	bne.n	800af74 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2280      	movs	r2, #128	; 0x80
 800af5e:	03d1      	lsls	r1, r2, #15
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	4a0d      	ldr	r2, [pc, #52]	; (800af98 <UART_CheckIdleState+0x8c>)
 800af64:	9200      	str	r2, [sp, #0]
 800af66:	2200      	movs	r2, #0
 800af68:	f000 f818 	bl	800af9c <UART_WaitOnFlagUntilTimeout>
 800af6c:	1e03      	subs	r3, r0, #0
 800af6e:	d001      	beq.n	800af74 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e00d      	b.n	800af90 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2220      	movs	r2, #32
 800af78:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2220      	movs	r2, #32
 800af7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2274      	movs	r2, #116	; 0x74
 800af8a:	2100      	movs	r1, #0
 800af8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	0018      	movs	r0, r3
 800af92:	46bd      	mov	sp, r7
 800af94:	b004      	add	sp, #16
 800af96:	bd80      	pop	{r7, pc}
 800af98:	01ffffff 	.word	0x01ffffff

0800af9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	1dfb      	adds	r3, r7, #7
 800afaa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afac:	e05e      	b.n	800b06c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	3301      	adds	r3, #1
 800afb2:	d05b      	beq.n	800b06c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afb4:	f7f9 fb85 	bl	80046c2 <HAL_GetTick>
 800afb8:	0002      	movs	r2, r0
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	69ba      	ldr	r2, [r7, #24]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d302      	bcc.n	800afca <UART_WaitOnFlagUntilTimeout+0x2e>
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d11b      	bne.n	800b002 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	492f      	ldr	r1, [pc, #188]	; (800b094 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800afd6:	400a      	ands	r2, r1
 800afd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	689a      	ldr	r2, [r3, #8]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2101      	movs	r1, #1
 800afe6:	438a      	bics	r2, r1
 800afe8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2220      	movs	r2, #32
 800afee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2220      	movs	r2, #32
 800aff4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2274      	movs	r2, #116	; 0x74
 800affa:	2100      	movs	r1, #0
 800affc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800affe:	2303      	movs	r3, #3
 800b000:	e044      	b.n	800b08c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2204      	movs	r2, #4
 800b00a:	4013      	ands	r3, r2
 800b00c:	d02e      	beq.n	800b06c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69da      	ldr	r2, [r3, #28]
 800b014:	2380      	movs	r3, #128	; 0x80
 800b016:	011b      	lsls	r3, r3, #4
 800b018:	401a      	ands	r2, r3
 800b01a:	2380      	movs	r3, #128	; 0x80
 800b01c:	011b      	lsls	r3, r3, #4
 800b01e:	429a      	cmp	r2, r3
 800b020:	d124      	bne.n	800b06c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2280      	movs	r2, #128	; 0x80
 800b028:	0112      	lsls	r2, r2, #4
 800b02a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4917      	ldr	r1, [pc, #92]	; (800b094 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800b038:	400a      	ands	r2, r1
 800b03a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689a      	ldr	r2, [r3, #8]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2101      	movs	r1, #1
 800b048:	438a      	bics	r2, r1
 800b04a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2220      	movs	r2, #32
 800b050:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2220      	movs	r2, #32
 800b056:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2280      	movs	r2, #128	; 0x80
 800b05c:	2120      	movs	r1, #32
 800b05e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2274      	movs	r2, #116	; 0x74
 800b064:	2100      	movs	r1, #0
 800b066:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	e00f      	b.n	800b08c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	4013      	ands	r3, r2
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	425a      	negs	r2, r3
 800b07c:	4153      	adcs	r3, r2
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	001a      	movs	r2, r3
 800b082:	1dfb      	adds	r3, r7, #7
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d091      	beq.n	800afae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	0018      	movs	r0, r3
 800b08e:	46bd      	mov	sp, r7
 800b090:	b004      	add	sp, #16
 800b092:	bd80      	pop	{r7, pc}
 800b094:	fffffe5f 	.word	0xfffffe5f

0800b098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	1dbb      	adds	r3, r7, #6
 800b0a4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	1dba      	adds	r2, r7, #6
 800b0b0:	2158      	movs	r1, #88	; 0x58
 800b0b2:	8812      	ldrh	r2, [r2, #0]
 800b0b4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	1dba      	adds	r2, r7, #6
 800b0ba:	215a      	movs	r1, #90	; 0x5a
 800b0bc:	8812      	ldrh	r2, [r2, #0]
 800b0be:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	689a      	ldr	r2, [r3, #8]
 800b0ca:	2380      	movs	r3, #128	; 0x80
 800b0cc:	015b      	lsls	r3, r3, #5
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d10d      	bne.n	800b0ee <UART_Start_Receive_IT+0x56>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d104      	bne.n	800b0e4 <UART_Start_Receive_IT+0x4c>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	225c      	movs	r2, #92	; 0x5c
 800b0de:	4932      	ldr	r1, [pc, #200]	; (800b1a8 <UART_Start_Receive_IT+0x110>)
 800b0e0:	5299      	strh	r1, [r3, r2]
 800b0e2:	e02e      	b.n	800b142 <UART_Start_Receive_IT+0xaa>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	225c      	movs	r2, #92	; 0x5c
 800b0e8:	21ff      	movs	r1, #255	; 0xff
 800b0ea:	5299      	strh	r1, [r3, r2]
 800b0ec:	e029      	b.n	800b142 <UART_Start_Receive_IT+0xaa>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10d      	bne.n	800b112 <UART_Start_Receive_IT+0x7a>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d104      	bne.n	800b108 <UART_Start_Receive_IT+0x70>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	225c      	movs	r2, #92	; 0x5c
 800b102:	21ff      	movs	r1, #255	; 0xff
 800b104:	5299      	strh	r1, [r3, r2]
 800b106:	e01c      	b.n	800b142 <UART_Start_Receive_IT+0xaa>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	225c      	movs	r2, #92	; 0x5c
 800b10c:	217f      	movs	r1, #127	; 0x7f
 800b10e:	5299      	strh	r1, [r3, r2]
 800b110:	e017      	b.n	800b142 <UART_Start_Receive_IT+0xaa>
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	689a      	ldr	r2, [r3, #8]
 800b116:	2380      	movs	r3, #128	; 0x80
 800b118:	055b      	lsls	r3, r3, #21
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d10d      	bne.n	800b13a <UART_Start_Receive_IT+0xa2>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d104      	bne.n	800b130 <UART_Start_Receive_IT+0x98>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	225c      	movs	r2, #92	; 0x5c
 800b12a:	217f      	movs	r1, #127	; 0x7f
 800b12c:	5299      	strh	r1, [r3, r2]
 800b12e:	e008      	b.n	800b142 <UART_Start_Receive_IT+0xaa>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	225c      	movs	r2, #92	; 0x5c
 800b134:	213f      	movs	r1, #63	; 0x3f
 800b136:	5299      	strh	r1, [r3, r2]
 800b138:	e003      	b.n	800b142 <UART_Start_Receive_IT+0xaa>
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	225c      	movs	r2, #92	; 0x5c
 800b13e:	2100      	movs	r1, #0
 800b140:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2280      	movs	r2, #128	; 0x80
 800b146:	2100      	movs	r1, #0
 800b148:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2222      	movs	r2, #34	; 0x22
 800b14e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689a      	ldr	r2, [r3, #8]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2101      	movs	r1, #1
 800b15c:	430a      	orrs	r2, r1
 800b15e:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	689a      	ldr	r2, [r3, #8]
 800b164:	2380      	movs	r3, #128	; 0x80
 800b166:	015b      	lsls	r3, r3, #5
 800b168:	429a      	cmp	r2, r3
 800b16a:	d107      	bne.n	800b17c <UART_Start_Receive_IT+0xe4>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	691b      	ldr	r3, [r3, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d103      	bne.n	800b17c <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	4a0d      	ldr	r2, [pc, #52]	; (800b1ac <UART_Start_Receive_IT+0x114>)
 800b178:	665a      	str	r2, [r3, #100]	; 0x64
 800b17a:	e002      	b.n	800b182 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	4a0c      	ldr	r2, [pc, #48]	; (800b1b0 <UART_Start_Receive_IT+0x118>)
 800b180:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2274      	movs	r2, #116	; 0x74
 800b186:	2100      	movs	r1, #0
 800b188:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2190      	movs	r1, #144	; 0x90
 800b196:	0049      	lsls	r1, r1, #1
 800b198:	430a      	orrs	r2, r1
 800b19a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	0018      	movs	r0, r3
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	b004      	add	sp, #16
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	46c0      	nop			; (mov r8, r8)
 800b1a8:	000001ff 	.word	0x000001ff
 800b1ac:	0800b47d 	.word	0x0800b47d
 800b1b0:	0800b395 	.word	0x0800b395

0800b1b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	21c0      	movs	r1, #192	; 0xc0
 800b1c8:	438a      	bics	r2, r1
 800b1ca:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b1d2:	46c0      	nop			; (mov r8, r8)
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	b002      	add	sp, #8
 800b1d8:	bd80      	pop	{r7, pc}
	...

0800b1dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4912      	ldr	r1, [pc, #72]	; (800b238 <UART_EndRxTransfer+0x5c>)
 800b1f0:	400a      	ands	r2, r1
 800b1f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689a      	ldr	r2, [r3, #8]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2101      	movs	r1, #1
 800b200:	438a      	bics	r2, r1
 800b202:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d107      	bne.n	800b21c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2110      	movs	r1, #16
 800b218:	438a      	bics	r2, r1
 800b21a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2220      	movs	r2, #32
 800b220:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b22e:	46c0      	nop			; (mov r8, r8)
 800b230:	46bd      	mov	sp, r7
 800b232:	b002      	add	sp, #8
 800b234:	bd80      	pop	{r7, pc}
 800b236:	46c0      	nop			; (mov r8, r8)
 800b238:	fffffedf 	.word	0xfffffedf

0800b23c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b248:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2220      	movs	r2, #32
 800b252:	4013      	ands	r3, r2
 800b254:	d114      	bne.n	800b280 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2252      	movs	r2, #82	; 0x52
 800b25a:	2100      	movs	r1, #0
 800b25c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2180      	movs	r1, #128	; 0x80
 800b26a:	438a      	bics	r2, r1
 800b26c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2140      	movs	r1, #64	; 0x40
 800b27a:	430a      	orrs	r2, r1
 800b27c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b27e:	e003      	b.n	800b288 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	0018      	movs	r0, r3
 800b284:	f7f9 fc88 	bl	8004b98 <HAL_UART_TxCpltCallback>
}
 800b288:	46c0      	nop			; (mov r8, r8)
 800b28a:	46bd      	mov	sp, r7
 800b28c:	b004      	add	sp, #16
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	0018      	movs	r0, r3
 800b2a2:	f7ff fac3 	bl	800a82c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2a6:	46c0      	nop			; (mov r8, r8)
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	b004      	add	sp, #16
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b086      	sub	sp, #24
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	2280      	movs	r2, #128	; 0x80
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	2b80      	cmp	r3, #128	; 0x80
 800b2d4:	d10a      	bne.n	800b2ec <UART_DMAError+0x3e>
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b21      	cmp	r3, #33	; 0x21
 800b2da:	d107      	bne.n	800b2ec <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2252      	movs	r2, #82	; 0x52
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	0018      	movs	r0, r3
 800b2e8:	f7ff ff64 	bl	800b1b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	2240      	movs	r2, #64	; 0x40
 800b2f4:	4013      	ands	r3, r2
 800b2f6:	2b40      	cmp	r3, #64	; 0x40
 800b2f8:	d10a      	bne.n	800b310 <UART_DMAError+0x62>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b22      	cmp	r3, #34	; 0x22
 800b2fe:	d107      	bne.n	800b310 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	225a      	movs	r2, #90	; 0x5a
 800b304:	2100      	movs	r1, #0
 800b306:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	0018      	movs	r0, r3
 800b30c:	f7ff ff66 	bl	800b1dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2280      	movs	r2, #128	; 0x80
 800b314:	589b      	ldr	r3, [r3, r2]
 800b316:	2210      	movs	r2, #16
 800b318:	431a      	orrs	r2, r3
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2180      	movs	r1, #128	; 0x80
 800b31e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	0018      	movs	r0, r3
 800b324:	f7ff fa8a 	bl	800a83c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b328:	46c0      	nop			; (mov r8, r8)
 800b32a:	46bd      	mov	sp, r7
 800b32c:	b006      	add	sp, #24
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	225a      	movs	r2, #90	; 0x5a
 800b342:	2100      	movs	r1, #0
 800b344:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2252      	movs	r2, #82	; 0x52
 800b34a:	2100      	movs	r1, #0
 800b34c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	0018      	movs	r0, r3
 800b352:	f7ff fa73 	bl	800a83c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b356:	46c0      	nop			; (mov r8, r8)
 800b358:	46bd      	mov	sp, r7
 800b35a:	b004      	add	sp, #16
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b082      	sub	sp, #8
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2140      	movs	r1, #64	; 0x40
 800b372:	438a      	bics	r2, r1
 800b374:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2220      	movs	r2, #32
 800b37a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	0018      	movs	r0, r3
 800b386:	f7f9 fc07 	bl	8004b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b38a:	46c0      	nop			; (mov r8, r8)
 800b38c:	46bd      	mov	sp, r7
 800b38e:	b002      	add	sp, #8
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b39c:	200e      	movs	r0, #14
 800b39e:	183b      	adds	r3, r7, r0
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	215c      	movs	r1, #92	; 0x5c
 800b3a4:	5a52      	ldrh	r2, [r2, r1]
 800b3a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ac:	2b22      	cmp	r3, #34	; 0x22
 800b3ae:	d157      	bne.n	800b460 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3b6:	210c      	movs	r1, #12
 800b3b8:	187b      	adds	r3, r7, r1
 800b3ba:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b3bc:	187b      	adds	r3, r7, r1
 800b3be:	881b      	ldrh	r3, [r3, #0]
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	183b      	adds	r3, r7, r0
 800b3c4:	881b      	ldrh	r3, [r3, #0]
 800b3c6:	b2d9      	uxtb	r1, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3cc:	400a      	ands	r2, r1
 800b3ce:	b2d2      	uxtb	r2, r2
 800b3d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	225a      	movs	r2, #90	; 0x5a
 800b3e0:	5a9b      	ldrh	r3, [r3, r2]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	b299      	uxth	r1, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	225a      	movs	r2, #90	; 0x5a
 800b3ec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	225a      	movs	r2, #90	; 0x5a
 800b3f2:	5a9b      	ldrh	r3, [r3, r2]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d13a      	bne.n	800b470 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	491c      	ldr	r1, [pc, #112]	; (800b478 <UART_RxISR_8BIT+0xe4>)
 800b406:	400a      	ands	r2, r1
 800b408:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	689a      	ldr	r2, [r3, #8]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2101      	movs	r1, #1
 800b416:	438a      	bics	r2, r1
 800b418:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2220      	movs	r2, #32
 800b41e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d110      	bne.n	800b450 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2110      	movs	r1, #16
 800b43a:	438a      	bics	r2, r1
 800b43c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2258      	movs	r2, #88	; 0x58
 800b442:	5a9a      	ldrh	r2, [r3, r2]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	0011      	movs	r1, r2
 800b448:	0018      	movs	r0, r3
 800b44a:	f7ff f9ff 	bl	800a84c <HAL_UARTEx_RxEventCallback>
 800b44e:	e003      	b.n	800b458 <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	0018      	movs	r0, r3
 800b454:	f7f9 fbae 	bl	8004bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b45e:	e007      	b.n	800b470 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	699a      	ldr	r2, [r3, #24]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2108      	movs	r1, #8
 800b46c:	430a      	orrs	r2, r1
 800b46e:	619a      	str	r2, [r3, #24]
}
 800b470:	46c0      	nop			; (mov r8, r8)
 800b472:	46bd      	mov	sp, r7
 800b474:	b004      	add	sp, #16
 800b476:	bd80      	pop	{r7, pc}
 800b478:	fffffedf 	.word	0xfffffedf

0800b47c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b484:	200e      	movs	r0, #14
 800b486:	183b      	adds	r3, r7, r0
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	215c      	movs	r1, #92	; 0x5c
 800b48c:	5a52      	ldrh	r2, [r2, r1]
 800b48e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b494:	2b22      	cmp	r3, #34	; 0x22
 800b496:	d157      	bne.n	800b548 <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b49e:	210c      	movs	r1, #12
 800b4a0:	187b      	adds	r3, r7, r1
 800b4a2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b4aa:	187b      	adds	r3, r7, r1
 800b4ac:	183a      	adds	r2, r7, r0
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	8812      	ldrh	r2, [r2, #0]
 800b4b2:	4013      	ands	r3, r2
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4be:	1c9a      	adds	r2, r3, #2
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	225a      	movs	r2, #90	; 0x5a
 800b4c8:	5a9b      	ldrh	r3, [r3, r2]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	b299      	uxth	r1, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	225a      	movs	r2, #90	; 0x5a
 800b4d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	225a      	movs	r2, #90	; 0x5a
 800b4da:	5a9b      	ldrh	r3, [r3, r2]
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d13a      	bne.n	800b558 <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	491c      	ldr	r1, [pc, #112]	; (800b560 <UART_RxISR_16BIT+0xe4>)
 800b4ee:	400a      	ands	r2, r1
 800b4f0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	689a      	ldr	r2, [r3, #8]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	438a      	bics	r2, r1
 800b500:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2220      	movs	r2, #32
 800b506:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b512:	2b01      	cmp	r3, #1
 800b514:	d110      	bne.n	800b538 <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2110      	movs	r1, #16
 800b522:	438a      	bics	r2, r1
 800b524:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2258      	movs	r2, #88	; 0x58
 800b52a:	5a9a      	ldrh	r2, [r3, r2]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	0011      	movs	r1, r2
 800b530:	0018      	movs	r0, r3
 800b532:	f7ff f98b 	bl	800a84c <HAL_UARTEx_RxEventCallback>
 800b536:	e003      	b.n	800b540 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	0018      	movs	r0, r3
 800b53c:	f7f9 fb3a 	bl	8004bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b546:	e007      	b.n	800b558 <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	699a      	ldr	r2, [r3, #24]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2108      	movs	r1, #8
 800b554:	430a      	orrs	r2, r1
 800b556:	619a      	str	r2, [r3, #24]
}
 800b558:	46c0      	nop			; (mov r8, r8)
 800b55a:	46bd      	mov	sp, r7
 800b55c:	b004      	add	sp, #16
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	fffffedf 	.word	0xfffffedf

0800b564 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b56c:	46c0      	nop			; (mov r8, r8)
 800b56e:	46bd      	mov	sp, r7
 800b570:	b002      	add	sp, #8
 800b572:	bd80      	pop	{r7, pc}

0800b574 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af02      	add	r7, sp, #8
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	1d3b      	adds	r3, r7, #4
 800b57e:	6019      	str	r1, [r3, #0]
 800b580:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b582:	2317      	movs	r3, #23
 800b584:	18fb      	adds	r3, r7, r3
 800b586:	2200      	movs	r2, #0
 800b588:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2274      	movs	r2, #116	; 0x74
 800b58e:	5c9b      	ldrb	r3, [r3, r2]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800b594:	2302      	movs	r3, #2
 800b596:	e04a      	b.n	800b62e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2274      	movs	r2, #116	; 0x74
 800b59c:	2101      	movs	r1, #1
 800b59e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2224      	movs	r2, #36	; 0x24
 800b5a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	438a      	bics	r2, r1
 800b5b4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	4a1e      	ldr	r2, [pc, #120]	; (800b638 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800b5be:	4013      	ands	r3, r2
 800b5c0:	0019      	movs	r1, r3
 800b5c2:	1d3b      	adds	r3, r7, #4
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	430a      	orrs	r2, r1
 800b5cc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b5ce:	1d3b      	adds	r3, r7, #4
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d105      	bne.n	800b5e2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b5d6:	1d3b      	adds	r3, r7, #4
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	6819      	ldr	r1, [r3, #0]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	f000 f84f 	bl	800b680 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	430a      	orrs	r2, r1
 800b5f0:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5f2:	f7f9 f866 	bl	80046c2 <HAL_GetTick>
 800b5f6:	0003      	movs	r3, r0
 800b5f8:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2280      	movs	r2, #128	; 0x80
 800b5fe:	03d1      	lsls	r1, r2, #15
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	4a0e      	ldr	r2, [pc, #56]	; (800b63c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800b604:	9200      	str	r2, [sp, #0]
 800b606:	2200      	movs	r2, #0
 800b608:	f7ff fcc8 	bl	800af9c <UART_WaitOnFlagUntilTimeout>
 800b60c:	1e03      	subs	r3, r0, #0
 800b60e:	d004      	beq.n	800b61a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800b610:	2317      	movs	r3, #23
 800b612:	18fb      	adds	r3, r7, r3
 800b614:	2203      	movs	r2, #3
 800b616:	701a      	strb	r2, [r3, #0]
 800b618:	e002      	b.n	800b620 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2220      	movs	r2, #32
 800b61e:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2274      	movs	r2, #116	; 0x74
 800b624:	2100      	movs	r1, #0
 800b626:	5499      	strb	r1, [r3, r2]

  return status;
 800b628:	2317      	movs	r3, #23
 800b62a:	18fb      	adds	r3, r7, r3
 800b62c:	781b      	ldrb	r3, [r3, #0]
}
 800b62e:	0018      	movs	r0, r3
 800b630:	46bd      	mov	sp, r7
 800b632:	b006      	add	sp, #24
 800b634:	bd80      	pop	{r7, pc}
 800b636:	46c0      	nop			; (mov r8, r8)
 800b638:	ffcfffff 	.word	0xffcfffff
 800b63c:	01ffffff 	.word	0x01ffffff

0800b640 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2274      	movs	r2, #116	; 0x74
 800b64c:	5c9b      	ldrb	r3, [r3, r2]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d101      	bne.n	800b656 <HAL_UARTEx_EnableStopMode+0x16>
 800b652:	2302      	movs	r3, #2
 800b654:	e010      	b.n	800b678 <HAL_UARTEx_EnableStopMode+0x38>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2274      	movs	r2, #116	; 0x74
 800b65a:	2101      	movs	r1, #1
 800b65c:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2102      	movs	r1, #2
 800b66a:	430a      	orrs	r2, r1
 800b66c:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2274      	movs	r2, #116	; 0x74
 800b672:	2100      	movs	r1, #0
 800b674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	0018      	movs	r0, r3
 800b67a:	46bd      	mov	sp, r7
 800b67c:	b002      	add	sp, #8
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	1d3b      	adds	r3, r7, #4
 800b68a:	6019      	str	r1, [r3, #0]
 800b68c:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	2210      	movs	r2, #16
 800b696:	4393      	bics	r3, r2
 800b698:	001a      	movs	r2, r3
 800b69a:	1d3b      	adds	r3, r7, #4
 800b69c:	889b      	ldrh	r3, [r3, #4]
 800b69e:	0019      	movs	r1, r3
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	430a      	orrs	r2, r1
 800b6a6:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	021b      	lsls	r3, r3, #8
 800b6b0:	0a19      	lsrs	r1, r3, #8
 800b6b2:	1d3b      	adds	r3, r7, #4
 800b6b4:	799b      	ldrb	r3, [r3, #6]
 800b6b6:	061a      	lsls	r2, r3, #24
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	430a      	orrs	r2, r1
 800b6be:	605a      	str	r2, [r3, #4]
}
 800b6c0:	46c0      	nop			; (mov r8, r8)
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	b004      	add	sp, #16
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	33f1      	adds	r3, #241	; 0xf1
 800b6d4:	2210      	movs	r2, #16
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f00d f957 	bl	801898c <memset1>
    ctx->M_n = 0;
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	238a      	movs	r3, #138	; 0x8a
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	22f0      	movs	r2, #240	; 0xf0
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	0018      	movs	r0, r3
 800b6f0:	f00d f94c 	bl	801898c <memset1>
}
 800b6f4:	46c0      	nop			; (mov r8, r8)
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	b002      	add	sp, #8
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2110      	movs	r1, #16
 800b70c:	0018      	movs	r0, r3
 800b70e:	f000 feaf 	bl	800c470 <lorawan_aes_set_key>
}
 800b712:	46c0      	nop			; (mov r8, r8)
 800b714:	46bd      	mov	sp, r7
 800b716:	b002      	add	sp, #8
 800b718:	bd80      	pop	{r7, pc}

0800b71a <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b71a:	b590      	push	{r4, r7, lr}
 800b71c:	b08d      	sub	sp, #52	; 0x34
 800b71e:	af00      	add	r7, sp, #0
 800b720:	60f8      	str	r0, [r7, #12]
 800b722:	60b9      	str	r1, [r7, #8]
 800b724:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	238a      	movs	r3, #138	; 0x8a
 800b72a:	005b      	lsls	r3, r3, #1
 800b72c:	58d3      	ldr	r3, [r2, r3]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d100      	bne.n	800b734 <AES_CMAC_Update+0x1a>
 800b732:	e0a4      	b.n	800b87e <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	238a      	movs	r3, #138	; 0x8a
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	58d3      	ldr	r3, [r2, r3]
 800b73c:	2210      	movs	r2, #16
 800b73e:	1ad2      	subs	r2, r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4293      	cmp	r3, r2
 800b744:	d900      	bls.n	800b748 <AES_CMAC_Update+0x2e>
 800b746:	0013      	movs	r3, r2
 800b748:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	1c9a      	adds	r2, r3, #2
 800b74e:	32ff      	adds	r2, #255	; 0xff
 800b750:	68f9      	ldr	r1, [r7, #12]
 800b752:	238a      	movs	r3, #138	; 0x8a
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	58cb      	ldr	r3, [r1, r3]
 800b758:	18d3      	adds	r3, r2, r3
 800b75a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b75c:	b292      	uxth	r2, r2
 800b75e:	68b9      	ldr	r1, [r7, #8]
 800b760:	0018      	movs	r0, r3
 800b762:	f00d f8d5 	bl	8018910 <memcpy1>
        ctx->M_n += mlen;
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	238a      	movs	r3, #138	; 0x8a
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	58d2      	ldr	r2, [r2, r3]
 800b76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b770:	18d1      	adds	r1, r2, r3
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	238a      	movs	r3, #138	; 0x8a
 800b776:	005b      	lsls	r3, r3, #1
 800b778:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	238a      	movs	r3, #138	; 0x8a
 800b77e:	005b      	lsls	r3, r3, #1
 800b780:	58d3      	ldr	r3, [r2, r3]
 800b782:	2b0f      	cmp	r3, #15
 800b784:	d800      	bhi.n	800b788 <AES_CMAC_Update+0x6e>
 800b786:	e08c      	b.n	800b8a2 <AES_CMAC_Update+0x188>
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d100      	bne.n	800b792 <AES_CMAC_Update+0x78>
 800b790:	e087      	b.n	800b8a2 <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800b792:	2300      	movs	r3, #0
 800b794:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b796:	e018      	b.n	800b7ca <AES_CMAC_Update+0xb0>
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	21f1      	movs	r1, #241	; 0xf1
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	18d3      	adds	r3, r2, r3
 800b7a0:	185b      	adds	r3, r3, r1
 800b7a2:	781a      	ldrb	r2, [r3, #0]
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	33ff      	adds	r3, #255	; 0xff
 800b7aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7ac:	1841      	adds	r1, r0, r1
 800b7ae:	18cb      	adds	r3, r1, r3
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	4053      	eors	r3, r2
 800b7b4:	b2d8      	uxtb	r0, r3
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	21f1      	movs	r1, #241	; 0xf1
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	18d3      	adds	r3, r2, r3
 800b7be:	185b      	adds	r3, r3, r1
 800b7c0:	1c02      	adds	r2, r0, #0
 800b7c2:	701a      	strb	r2, [r3, #0]
 800b7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7cc:	2b0f      	cmp	r3, #15
 800b7ce:	dde3      	ble.n	800b798 <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	33f1      	adds	r3, #241	; 0xf1
 800b7d4:	0019      	movs	r1, r3
 800b7d6:	2414      	movs	r4, #20
 800b7d8:	193b      	adds	r3, r7, r4
 800b7da:	2210      	movs	r2, #16
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f00d f897 	bl	8018910 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	1939      	adds	r1, r7, r4
 800b7e6:	193b      	adds	r3, r7, r4
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f000 ff7d 	bl	800c6e8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	33f1      	adds	r3, #241	; 0xf1
 800b7f2:	1939      	adds	r1, r7, r4
 800b7f4:	2210      	movs	r2, #16
 800b7f6:	0018      	movs	r0, r3
 800b7f8:	f00d f88a 	bl	8018910 <memcpy1>

        data += mlen;
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b800:	18d3      	adds	r3, r2, r3
 800b802:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b80c:	e037      	b.n	800b87e <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800b80e:	2300      	movs	r3, #0
 800b810:	62bb      	str	r3, [r7, #40]	; 0x28
 800b812:	e015      	b.n	800b840 <AES_CMAC_Update+0x126>
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	21f1      	movs	r1, #241	; 0xf1
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	18d3      	adds	r3, r2, r3
 800b81c:	185b      	adds	r3, r3, r1
 800b81e:	781a      	ldrb	r2, [r3, #0]
 800b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b822:	68b9      	ldr	r1, [r7, #8]
 800b824:	18cb      	adds	r3, r1, r3
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	4053      	eors	r3, r2
 800b82a:	b2d8      	uxtb	r0, r3
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	21f1      	movs	r1, #241	; 0xf1
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	18d3      	adds	r3, r2, r3
 800b834:	185b      	adds	r3, r3, r1
 800b836:	1c02      	adds	r2, r0, #0
 800b838:	701a      	strb	r2, [r3, #0]
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	3301      	adds	r3, #1
 800b83e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	2b0f      	cmp	r3, #15
 800b844:	dde6      	ble.n	800b814 <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	33f1      	adds	r3, #241	; 0xf1
 800b84a:	0019      	movs	r1, r3
 800b84c:	2414      	movs	r4, #20
 800b84e:	193b      	adds	r3, r7, r4
 800b850:	2210      	movs	r2, #16
 800b852:	0018      	movs	r0, r3
 800b854:	f00d f85c 	bl	8018910 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	1939      	adds	r1, r7, r4
 800b85c:	193b      	adds	r3, r7, r4
 800b85e:	0018      	movs	r0, r3
 800b860:	f000 ff42 	bl	800c6e8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	33f1      	adds	r3, #241	; 0xf1
 800b868:	1939      	adds	r1, r7, r4
 800b86a:	2210      	movs	r2, #16
 800b86c:	0018      	movs	r0, r3
 800b86e:	f00d f84f 	bl	8018910 <memcpy1>

        data += 16;
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	3310      	adds	r3, #16
 800b876:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3b10      	subs	r3, #16
 800b87c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b10      	cmp	r3, #16
 800b882:	d8c4      	bhi.n	800b80e <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3302      	adds	r3, #2
 800b888:	33ff      	adds	r3, #255	; 0xff
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	b292      	uxth	r2, r2
 800b88e:	68b9      	ldr	r1, [r7, #8]
 800b890:	0018      	movs	r0, r3
 800b892:	f00d f83d 	bl	8018910 <memcpy1>
    ctx->M_n = len;
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	238a      	movs	r3, #138	; 0x8a
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	6879      	ldr	r1, [r7, #4]
 800b89e:	50d1      	str	r1, [r2, r3]
 800b8a0:	e000      	b.n	800b8a4 <AES_CMAC_Update+0x18a>
            return;
 800b8a2:	46c0      	nop			; (mov r8, r8)
}
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	b00d      	add	sp, #52	; 0x34
 800b8a8:	bd90      	pop	{r4, r7, pc}

0800b8aa <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b8aa:	b590      	push	{r4, r7, lr}
 800b8ac:	b093      	sub	sp, #76	; 0x4c
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b8b4:	241c      	movs	r4, #28
 800b8b6:	193b      	adds	r3, r7, r4
 800b8b8:	2210      	movs	r2, #16
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	0018      	movs	r0, r3
 800b8be:	f00d f865 	bl	801898c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	1939      	adds	r1, r7, r4
 800b8c6:	193b      	adds	r3, r7, r4
 800b8c8:	0018      	movs	r0, r3
 800b8ca:	f000 ff0d 	bl	800c6e8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b8ce:	193b      	adds	r3, r7, r4
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	b25b      	sxtb	r3, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	da2e      	bge.n	800b936 <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800b8d8:	2300      	movs	r3, #0
 800b8da:	647b      	str	r3, [r7, #68]	; 0x44
 800b8dc:	e018      	b.n	800b910 <AES_CMAC_Final+0x66>
 800b8de:	201c      	movs	r0, #28
 800b8e0:	183a      	adds	r2, r7, r0
 800b8e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8e4:	18d3      	adds	r3, r2, r3
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	b25a      	sxtb	r2, r3
 800b8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	1839      	adds	r1, r7, r0
 800b8f2:	5ccb      	ldrb	r3, [r1, r3]
 800b8f4:	09db      	lsrs	r3, r3, #7
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	b25b      	sxtb	r3, r3
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	b25b      	sxtb	r3, r3
 800b8fe:	b2d9      	uxtb	r1, r3
 800b900:	183a      	adds	r2, r7, r0
 800b902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b904:	18d3      	adds	r3, r2, r3
 800b906:	1c0a      	adds	r2, r1, #0
 800b908:	701a      	strb	r2, [r3, #0]
 800b90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b90c:	3301      	adds	r3, #1
 800b90e:	647b      	str	r3, [r7, #68]	; 0x44
 800b910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b912:	2b0e      	cmp	r3, #14
 800b914:	dde3      	ble.n	800b8de <AES_CMAC_Final+0x34>
 800b916:	211c      	movs	r1, #28
 800b918:	187b      	adds	r3, r7, r1
 800b91a:	7bdb      	ldrb	r3, [r3, #15]
 800b91c:	18db      	adds	r3, r3, r3
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	187b      	adds	r3, r7, r1
 800b922:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800b924:	187b      	adds	r3, r7, r1
 800b926:	7bdb      	ldrb	r3, [r3, #15]
 800b928:	2279      	movs	r2, #121	; 0x79
 800b92a:	4252      	negs	r2, r2
 800b92c:	4053      	eors	r3, r2
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	187b      	adds	r3, r7, r1
 800b932:	73da      	strb	r2, [r3, #15]
 800b934:	e025      	b.n	800b982 <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800b936:	2300      	movs	r3, #0
 800b938:	643b      	str	r3, [r7, #64]	; 0x40
 800b93a:	e018      	b.n	800b96e <AES_CMAC_Final+0xc4>
 800b93c:	201c      	movs	r0, #28
 800b93e:	183a      	adds	r2, r7, r0
 800b940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b942:	18d3      	adds	r3, r2, r3
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	b25a      	sxtb	r2, r3
 800b94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b94c:	3301      	adds	r3, #1
 800b94e:	1839      	adds	r1, r7, r0
 800b950:	5ccb      	ldrb	r3, [r1, r3]
 800b952:	09db      	lsrs	r3, r3, #7
 800b954:	b2db      	uxtb	r3, r3
 800b956:	b25b      	sxtb	r3, r3
 800b958:	4313      	orrs	r3, r2
 800b95a:	b25b      	sxtb	r3, r3
 800b95c:	b2d9      	uxtb	r1, r3
 800b95e:	183a      	adds	r2, r7, r0
 800b960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b962:	18d3      	adds	r3, r2, r3
 800b964:	1c0a      	adds	r2, r1, #0
 800b966:	701a      	strb	r2, [r3, #0]
 800b968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b96a:	3301      	adds	r3, #1
 800b96c:	643b      	str	r3, [r7, #64]	; 0x40
 800b96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b970:	2b0e      	cmp	r3, #14
 800b972:	dde3      	ble.n	800b93c <AES_CMAC_Final+0x92>
 800b974:	211c      	movs	r1, #28
 800b976:	187b      	adds	r3, r7, r1
 800b978:	7bdb      	ldrb	r3, [r3, #15]
 800b97a:	18db      	adds	r3, r3, r3
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	187b      	adds	r3, r7, r1
 800b980:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	238a      	movs	r3, #138	; 0x8a
 800b986:	005b      	lsls	r3, r3, #1
 800b988:	58d3      	ldr	r3, [r2, r3]
 800b98a:	2b10      	cmp	r3, #16
 800b98c:	d11f      	bne.n	800b9ce <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b98e:	2300      	movs	r3, #0
 800b990:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b992:	e018      	b.n	800b9c6 <AES_CMAC_Final+0x11c>
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	2302      	movs	r3, #2
 800b998:	33ff      	adds	r3, #255	; 0xff
 800b99a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b99c:	188a      	adds	r2, r1, r2
 800b99e:	18d3      	adds	r3, r2, r3
 800b9a0:	781a      	ldrb	r2, [r3, #0]
 800b9a2:	231c      	movs	r3, #28
 800b9a4:	18f9      	adds	r1, r7, r3
 800b9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a8:	18cb      	adds	r3, r1, r3
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	4053      	eors	r3, r2
 800b9ae:	b2d8      	uxtb	r0, r3
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	33ff      	adds	r3, #255	; 0xff
 800b9b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9b8:	188a      	adds	r2, r1, r2
 800b9ba:	18d3      	adds	r3, r2, r3
 800b9bc:	1c02      	adds	r2, r0, #0
 800b9be:	701a      	strb	r2, [r3, #0]
 800b9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9c8:	2b0f      	cmp	r3, #15
 800b9ca:	dde3      	ble.n	800b994 <AES_CMAC_Final+0xea>
 800b9cc:	e09f      	b.n	800bb0e <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b9ce:	231c      	movs	r3, #28
 800b9d0:	18fb      	adds	r3, r7, r3
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	b25b      	sxtb	r3, r3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	da2e      	bge.n	800ba38 <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800b9da:	2300      	movs	r3, #0
 800b9dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9de:	e018      	b.n	800ba12 <AES_CMAC_Final+0x168>
 800b9e0:	201c      	movs	r0, #28
 800b9e2:	183a      	adds	r2, r7, r0
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e6:	18d3      	adds	r3, r2, r3
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	b25a      	sxtb	r2, r3
 800b9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	1839      	adds	r1, r7, r0
 800b9f4:	5ccb      	ldrb	r3, [r1, r3]
 800b9f6:	09db      	lsrs	r3, r3, #7
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	b25b      	sxtb	r3, r3
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	b25b      	sxtb	r3, r3
 800ba00:	b2d9      	uxtb	r1, r3
 800ba02:	183a      	adds	r2, r7, r0
 800ba04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba06:	18d3      	adds	r3, r2, r3
 800ba08:	1c0a      	adds	r2, r1, #0
 800ba0a:	701a      	strb	r2, [r3, #0]
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0e:	3301      	adds	r3, #1
 800ba10:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba14:	2b0e      	cmp	r3, #14
 800ba16:	dde3      	ble.n	800b9e0 <AES_CMAC_Final+0x136>
 800ba18:	211c      	movs	r1, #28
 800ba1a:	187b      	adds	r3, r7, r1
 800ba1c:	7bdb      	ldrb	r3, [r3, #15]
 800ba1e:	18db      	adds	r3, r3, r3
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	187b      	adds	r3, r7, r1
 800ba24:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800ba26:	187b      	adds	r3, r7, r1
 800ba28:	7bdb      	ldrb	r3, [r3, #15]
 800ba2a:	2279      	movs	r2, #121	; 0x79
 800ba2c:	4252      	negs	r2, r2
 800ba2e:	4053      	eors	r3, r2
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	187b      	adds	r3, r7, r1
 800ba34:	73da      	strb	r2, [r3, #15]
 800ba36:	e025      	b.n	800ba84 <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800ba38:	2300      	movs	r3, #0
 800ba3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba3c:	e018      	b.n	800ba70 <AES_CMAC_Final+0x1c6>
 800ba3e:	201c      	movs	r0, #28
 800ba40:	183a      	adds	r2, r7, r0
 800ba42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba44:	18d3      	adds	r3, r2, r3
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	005b      	lsls	r3, r3, #1
 800ba4a:	b25a      	sxtb	r2, r3
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4e:	3301      	adds	r3, #1
 800ba50:	1839      	adds	r1, r7, r0
 800ba52:	5ccb      	ldrb	r3, [r1, r3]
 800ba54:	09db      	lsrs	r3, r3, #7
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	b25b      	sxtb	r3, r3
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	b25b      	sxtb	r3, r3
 800ba5e:	b2d9      	uxtb	r1, r3
 800ba60:	183a      	adds	r2, r7, r0
 800ba62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba64:	18d3      	adds	r3, r2, r3
 800ba66:	1c0a      	adds	r2, r1, #0
 800ba68:	701a      	strb	r2, [r3, #0]
 800ba6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba72:	2b0e      	cmp	r3, #14
 800ba74:	dde3      	ble.n	800ba3e <AES_CMAC_Final+0x194>
 800ba76:	211c      	movs	r1, #28
 800ba78:	187b      	adds	r3, r7, r1
 800ba7a:	7bdb      	ldrb	r3, [r3, #15]
 800ba7c:	18db      	adds	r3, r3, r3
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	187b      	adds	r3, r7, r1
 800ba82:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	238a      	movs	r3, #138	; 0x8a
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	58d2      	ldr	r2, [r2, r3]
 800ba8c:	6839      	ldr	r1, [r7, #0]
 800ba8e:	2302      	movs	r3, #2
 800ba90:	33ff      	adds	r3, #255	; 0xff
 800ba92:	188a      	adds	r2, r1, r2
 800ba94:	18d3      	adds	r3, r2, r3
 800ba96:	2280      	movs	r2, #128	; 0x80
 800ba98:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800ba9a:	e00a      	b.n	800bab2 <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	238a      	movs	r3, #138	; 0x8a
 800baa0:	005b      	lsls	r3, r3, #1
 800baa2:	58d2      	ldr	r2, [r2, r3]
 800baa4:	6839      	ldr	r1, [r7, #0]
 800baa6:	2302      	movs	r3, #2
 800baa8:	33ff      	adds	r3, #255	; 0xff
 800baaa:	188a      	adds	r2, r1, r2
 800baac:	18d3      	adds	r3, r2, r3
 800baae:	2200      	movs	r2, #0
 800bab0:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	238a      	movs	r3, #138	; 0x8a
 800bab6:	005b      	lsls	r3, r3, #1
 800bab8:	58d3      	ldr	r3, [r2, r3]
 800baba:	1c59      	adds	r1, r3, #1
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	238a      	movs	r3, #138	; 0x8a
 800bac0:	005b      	lsls	r3, r3, #1
 800bac2:	50d1      	str	r1, [r2, r3]
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	238a      	movs	r3, #138	; 0x8a
 800bac8:	005b      	lsls	r3, r3, #1
 800baca:	58d3      	ldr	r3, [r2, r3]
 800bacc:	2b0f      	cmp	r3, #15
 800bace:	d9e5      	bls.n	800ba9c <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800bad0:	2300      	movs	r3, #0
 800bad2:	633b      	str	r3, [r7, #48]	; 0x30
 800bad4:	e018      	b.n	800bb08 <AES_CMAC_Final+0x25e>
 800bad6:	6839      	ldr	r1, [r7, #0]
 800bad8:	2302      	movs	r3, #2
 800bada:	33ff      	adds	r3, #255	; 0xff
 800badc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bade:	188a      	adds	r2, r1, r2
 800bae0:	18d3      	adds	r3, r2, r3
 800bae2:	781a      	ldrb	r2, [r3, #0]
 800bae4:	231c      	movs	r3, #28
 800bae6:	18f9      	adds	r1, r7, r3
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	18cb      	adds	r3, r1, r3
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	4053      	eors	r3, r2
 800baf0:	b2d8      	uxtb	r0, r3
 800baf2:	6839      	ldr	r1, [r7, #0]
 800baf4:	2302      	movs	r3, #2
 800baf6:	33ff      	adds	r3, #255	; 0xff
 800baf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bafa:	188a      	adds	r2, r1, r2
 800bafc:	18d3      	adds	r3, r2, r3
 800bafe:	1c02      	adds	r2, r0, #0
 800bb00:	701a      	strb	r2, [r3, #0]
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	3301      	adds	r3, #1
 800bb06:	633b      	str	r3, [r7, #48]	; 0x30
 800bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0a:	2b0f      	cmp	r3, #15
 800bb0c:	dde3      	ble.n	800bad6 <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800bb0e:	2300      	movs	r3, #0
 800bb10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb12:	e018      	b.n	800bb46 <AES_CMAC_Final+0x29c>
 800bb14:	683a      	ldr	r2, [r7, #0]
 800bb16:	21f1      	movs	r1, #241	; 0xf1
 800bb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1a:	18d3      	adds	r3, r2, r3
 800bb1c:	185b      	adds	r3, r3, r1
 800bb1e:	781a      	ldrb	r2, [r3, #0]
 800bb20:	6838      	ldr	r0, [r7, #0]
 800bb22:	2302      	movs	r3, #2
 800bb24:	33ff      	adds	r3, #255	; 0xff
 800bb26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb28:	1841      	adds	r1, r0, r1
 800bb2a:	18cb      	adds	r3, r1, r3
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	4053      	eors	r3, r2
 800bb30:	b2d8      	uxtb	r0, r3
 800bb32:	683a      	ldr	r2, [r7, #0]
 800bb34:	21f1      	movs	r1, #241	; 0xf1
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	18d3      	adds	r3, r2, r3
 800bb3a:	185b      	adds	r3, r3, r1
 800bb3c:	1c02      	adds	r2, r0, #0
 800bb3e:	701a      	strb	r2, [r3, #0]
 800bb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb42:	3301      	adds	r3, #1
 800bb44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb48:	2b0f      	cmp	r3, #15
 800bb4a:	dde3      	ble.n	800bb14 <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	33f1      	adds	r3, #241	; 0xf1
 800bb50:	0019      	movs	r1, r3
 800bb52:	240c      	movs	r4, #12
 800bb54:	193b      	adds	r3, r7, r4
 800bb56:	2210      	movs	r2, #16
 800bb58:	0018      	movs	r0, r3
 800bb5a:	f00c fed9 	bl	8018910 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	6879      	ldr	r1, [r7, #4]
 800bb62:	193b      	adds	r3, r7, r4
 800bb64:	0018      	movs	r0, r3
 800bb66:	f000 fdbf 	bl	800c6e8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800bb6a:	231c      	movs	r3, #28
 800bb6c:	18fb      	adds	r3, r7, r3
 800bb6e:	2210      	movs	r2, #16
 800bb70:	2100      	movs	r1, #0
 800bb72:	0018      	movs	r0, r3
 800bb74:	f00c ff0a 	bl	801898c <memset1>
}
 800bb78:	46c0      	nop			; (mov r8, r8)
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	b013      	add	sp, #76	; 0x4c
 800bb7e:	bd90      	pop	{r4, r7, pc}

0800bb80 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	781a      	ldrb	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	3301      	adds	r3, #1
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	7852      	ldrb	r2, [r2, #1]
 800bb9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	3302      	adds	r3, #2
 800bba0:	683a      	ldr	r2, [r7, #0]
 800bba2:	7892      	ldrb	r2, [r2, #2]
 800bba4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	3303      	adds	r3, #3
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	78d2      	ldrb	r2, [r2, #3]
 800bbae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	683a      	ldr	r2, [r7, #0]
 800bbb6:	7912      	ldrb	r2, [r2, #4]
 800bbb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3305      	adds	r3, #5
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	7952      	ldrb	r2, [r2, #5]
 800bbc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3306      	adds	r3, #6
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	7992      	ldrb	r2, [r2, #6]
 800bbcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	3307      	adds	r3, #7
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	79d2      	ldrb	r2, [r2, #7]
 800bbd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3308      	adds	r3, #8
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	7a12      	ldrb	r2, [r2, #8]
 800bbe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3309      	adds	r3, #9
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	7a52      	ldrb	r2, [r2, #9]
 800bbea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	330a      	adds	r3, #10
 800bbf0:	683a      	ldr	r2, [r7, #0]
 800bbf2:	7a92      	ldrb	r2, [r2, #10]
 800bbf4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	330b      	adds	r3, #11
 800bbfa:	683a      	ldr	r2, [r7, #0]
 800bbfc:	7ad2      	ldrb	r2, [r2, #11]
 800bbfe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	330c      	adds	r3, #12
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	7b12      	ldrb	r2, [r2, #12]
 800bc08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	330d      	adds	r3, #13
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	7b52      	ldrb	r2, [r2, #13]
 800bc12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	330e      	adds	r3, #14
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	7b92      	ldrb	r2, [r2, #14]
 800bc1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	330f      	adds	r3, #15
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	7bd2      	ldrb	r2, [r2, #15]
 800bc26:	701a      	strb	r2, [r3, #0]
#endif
}
 800bc28:	46c0      	nop			; (mov r8, r8)
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	b002      	add	sp, #8
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	1dfb      	adds	r3, r7, #7
 800bc3c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800bc3e:	e007      	b.n	800bc50 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	1c53      	adds	r3, r2, #1
 800bc44:	60bb      	str	r3, [r7, #8]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	1c59      	adds	r1, r3, #1
 800bc4a:	60f9      	str	r1, [r7, #12]
 800bc4c:	7812      	ldrb	r2, [r2, #0]
 800bc4e:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800bc50:	1dfb      	adds	r3, r7, #7
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	1dfa      	adds	r2, r7, #7
 800bc56:	1e59      	subs	r1, r3, #1
 800bc58:	7011      	strb	r1, [r2, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1f0      	bne.n	800bc40 <copy_block_nn+0x10>
}
 800bc5e:	46c0      	nop			; (mov r8, r8)
 800bc60:	46c0      	nop			; (mov r8, r8)
 800bc62:	46bd      	mov	sp, r7
 800bc64:	b004      	add	sp, #16
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	781a      	ldrb	r2, [r3, #0]
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	4053      	eors	r3, r2
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	3301      	adds	r3, #1
 800bc86:	7819      	ldrb	r1, [r3, #0]
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	781a      	ldrb	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	3301      	adds	r3, #1
 800bc92:	404a      	eors	r2, r1
 800bc94:	b2d2      	uxtb	r2, r2
 800bc96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	3302      	adds	r3, #2
 800bc9c:	7819      	ldrb	r1, [r3, #0]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	3302      	adds	r3, #2
 800bca2:	781a      	ldrb	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	3302      	adds	r3, #2
 800bca8:	404a      	eors	r2, r1
 800bcaa:	b2d2      	uxtb	r2, r2
 800bcac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3303      	adds	r3, #3
 800bcb2:	7819      	ldrb	r1, [r3, #0]
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	3303      	adds	r3, #3
 800bcb8:	781a      	ldrb	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3303      	adds	r3, #3
 800bcbe:	404a      	eors	r2, r1
 800bcc0:	b2d2      	uxtb	r2, r2
 800bcc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	7819      	ldrb	r1, [r3, #0]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	3304      	adds	r3, #4
 800bcce:	781a      	ldrb	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	404a      	eors	r2, r1
 800bcd6:	b2d2      	uxtb	r2, r2
 800bcd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	3305      	adds	r3, #5
 800bcde:	7819      	ldrb	r1, [r3, #0]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	3305      	adds	r3, #5
 800bce4:	781a      	ldrb	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	3305      	adds	r3, #5
 800bcea:	404a      	eors	r2, r1
 800bcec:	b2d2      	uxtb	r2, r2
 800bcee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	3306      	adds	r3, #6
 800bcf4:	7819      	ldrb	r1, [r3, #0]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	3306      	adds	r3, #6
 800bcfa:	781a      	ldrb	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3306      	adds	r3, #6
 800bd00:	404a      	eors	r2, r1
 800bd02:	b2d2      	uxtb	r2, r2
 800bd04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	3307      	adds	r3, #7
 800bd0a:	7819      	ldrb	r1, [r3, #0]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	3307      	adds	r3, #7
 800bd10:	781a      	ldrb	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	3307      	adds	r3, #7
 800bd16:	404a      	eors	r2, r1
 800bd18:	b2d2      	uxtb	r2, r2
 800bd1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	3308      	adds	r3, #8
 800bd20:	7819      	ldrb	r1, [r3, #0]
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	3308      	adds	r3, #8
 800bd26:	781a      	ldrb	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3308      	adds	r3, #8
 800bd2c:	404a      	eors	r2, r1
 800bd2e:	b2d2      	uxtb	r2, r2
 800bd30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	3309      	adds	r3, #9
 800bd36:	7819      	ldrb	r1, [r3, #0]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	3309      	adds	r3, #9
 800bd3c:	781a      	ldrb	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	3309      	adds	r3, #9
 800bd42:	404a      	eors	r2, r1
 800bd44:	b2d2      	uxtb	r2, r2
 800bd46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	330a      	adds	r3, #10
 800bd4c:	7819      	ldrb	r1, [r3, #0]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	330a      	adds	r3, #10
 800bd52:	781a      	ldrb	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	330a      	adds	r3, #10
 800bd58:	404a      	eors	r2, r1
 800bd5a:	b2d2      	uxtb	r2, r2
 800bd5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	330b      	adds	r3, #11
 800bd62:	7819      	ldrb	r1, [r3, #0]
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	330b      	adds	r3, #11
 800bd68:	781a      	ldrb	r2, [r3, #0]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	330b      	adds	r3, #11
 800bd6e:	404a      	eors	r2, r1
 800bd70:	b2d2      	uxtb	r2, r2
 800bd72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	330c      	adds	r3, #12
 800bd78:	7819      	ldrb	r1, [r3, #0]
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	330c      	adds	r3, #12
 800bd7e:	781a      	ldrb	r2, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	330c      	adds	r3, #12
 800bd84:	404a      	eors	r2, r1
 800bd86:	b2d2      	uxtb	r2, r2
 800bd88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	330d      	adds	r3, #13
 800bd8e:	7819      	ldrb	r1, [r3, #0]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	330d      	adds	r3, #13
 800bd94:	781a      	ldrb	r2, [r3, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	330d      	adds	r3, #13
 800bd9a:	404a      	eors	r2, r1
 800bd9c:	b2d2      	uxtb	r2, r2
 800bd9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	330e      	adds	r3, #14
 800bda4:	7819      	ldrb	r1, [r3, #0]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	330e      	adds	r3, #14
 800bdaa:	781a      	ldrb	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	330e      	adds	r3, #14
 800bdb0:	404a      	eors	r2, r1
 800bdb2:	b2d2      	uxtb	r2, r2
 800bdb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	330f      	adds	r3, #15
 800bdba:	7819      	ldrb	r1, [r3, #0]
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	330f      	adds	r3, #15
 800bdc0:	781a      	ldrb	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	330f      	adds	r3, #15
 800bdc6:	404a      	eors	r2, r1
 800bdc8:	b2d2      	uxtb	r2, r2
 800bdca:	701a      	strb	r2, [r3, #0]
#endif
}
 800bdcc:	46c0      	nop			; (mov r8, r8)
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	b002      	add	sp, #8
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	781a      	ldrb	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	4053      	eors	r3, r2
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	7819      	ldrb	r1, [r3, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	781a      	ldrb	r2, [r3, #0]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	3301      	adds	r3, #1
 800be00:	404a      	eors	r2, r1
 800be02:	b2d2      	uxtb	r2, r2
 800be04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	3302      	adds	r3, #2
 800be0a:	7819      	ldrb	r1, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	3302      	adds	r3, #2
 800be10:	781a      	ldrb	r2, [r3, #0]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	3302      	adds	r3, #2
 800be16:	404a      	eors	r2, r1
 800be18:	b2d2      	uxtb	r2, r2
 800be1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	3303      	adds	r3, #3
 800be20:	7819      	ldrb	r1, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3303      	adds	r3, #3
 800be26:	781a      	ldrb	r2, [r3, #0]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	3303      	adds	r3, #3
 800be2c:	404a      	eors	r2, r1
 800be2e:	b2d2      	uxtb	r2, r2
 800be30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	3304      	adds	r3, #4
 800be36:	7819      	ldrb	r1, [r3, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	3304      	adds	r3, #4
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3304      	adds	r3, #4
 800be42:	404a      	eors	r2, r1
 800be44:	b2d2      	uxtb	r2, r2
 800be46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	3305      	adds	r3, #5
 800be4c:	7819      	ldrb	r1, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	3305      	adds	r3, #5
 800be52:	781a      	ldrb	r2, [r3, #0]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	3305      	adds	r3, #5
 800be58:	404a      	eors	r2, r1
 800be5a:	b2d2      	uxtb	r2, r2
 800be5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	3306      	adds	r3, #6
 800be62:	7819      	ldrb	r1, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	3306      	adds	r3, #6
 800be68:	781a      	ldrb	r2, [r3, #0]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3306      	adds	r3, #6
 800be6e:	404a      	eors	r2, r1
 800be70:	b2d2      	uxtb	r2, r2
 800be72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	3307      	adds	r3, #7
 800be78:	7819      	ldrb	r1, [r3, #0]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	3307      	adds	r3, #7
 800be7e:	781a      	ldrb	r2, [r3, #0]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	3307      	adds	r3, #7
 800be84:	404a      	eors	r2, r1
 800be86:	b2d2      	uxtb	r2, r2
 800be88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	3308      	adds	r3, #8
 800be8e:	7819      	ldrb	r1, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	3308      	adds	r3, #8
 800be94:	781a      	ldrb	r2, [r3, #0]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3308      	adds	r3, #8
 800be9a:	404a      	eors	r2, r1
 800be9c:	b2d2      	uxtb	r2, r2
 800be9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	3309      	adds	r3, #9
 800bea4:	7819      	ldrb	r1, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3309      	adds	r3, #9
 800beaa:	781a      	ldrb	r2, [r3, #0]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	3309      	adds	r3, #9
 800beb0:	404a      	eors	r2, r1
 800beb2:	b2d2      	uxtb	r2, r2
 800beb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	330a      	adds	r3, #10
 800beba:	7819      	ldrb	r1, [r3, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	330a      	adds	r3, #10
 800bec0:	781a      	ldrb	r2, [r3, #0]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	330a      	adds	r3, #10
 800bec6:	404a      	eors	r2, r1
 800bec8:	b2d2      	uxtb	r2, r2
 800beca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	330b      	adds	r3, #11
 800bed0:	7819      	ldrb	r1, [r3, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	330b      	adds	r3, #11
 800bed6:	781a      	ldrb	r2, [r3, #0]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	330b      	adds	r3, #11
 800bedc:	404a      	eors	r2, r1
 800bede:	b2d2      	uxtb	r2, r2
 800bee0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	330c      	adds	r3, #12
 800bee6:	7819      	ldrb	r1, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	330c      	adds	r3, #12
 800beec:	781a      	ldrb	r2, [r3, #0]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	330c      	adds	r3, #12
 800bef2:	404a      	eors	r2, r1
 800bef4:	b2d2      	uxtb	r2, r2
 800bef6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	330d      	adds	r3, #13
 800befc:	7819      	ldrb	r1, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	330d      	adds	r3, #13
 800bf02:	781a      	ldrb	r2, [r3, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	330d      	adds	r3, #13
 800bf08:	404a      	eors	r2, r1
 800bf0a:	b2d2      	uxtb	r2, r2
 800bf0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	330e      	adds	r3, #14
 800bf12:	7819      	ldrb	r1, [r3, #0]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	330e      	adds	r3, #14
 800bf18:	781a      	ldrb	r2, [r3, #0]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	330e      	adds	r3, #14
 800bf1e:	404a      	eors	r2, r1
 800bf20:	b2d2      	uxtb	r2, r2
 800bf22:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	330f      	adds	r3, #15
 800bf28:	7819      	ldrb	r1, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	330f      	adds	r3, #15
 800bf2e:	781a      	ldrb	r2, [r3, #0]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	330f      	adds	r3, #15
 800bf34:	404a      	eors	r2, r1
 800bf36:	b2d2      	uxtb	r2, r2
 800bf38:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800bf3a:	46c0      	nop			; (mov r8, r8)
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	b004      	add	sp, #16
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b082      	sub	sp, #8
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800bf4c:	683a      	ldr	r2, [r7, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	0011      	movs	r1, r2
 800bf52:	0018      	movs	r0, r3
 800bf54:	f7ff fe88 	bl	800bc68 <xor_block>
}
 800bf58:	46c0      	nop			; (mov r8, r8)
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	b002      	add	sp, #8
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	001a      	movs	r2, r3
 800bf6e:	4b4c      	ldr	r3, [pc, #304]	; (800c0a0 <shift_sub_rows+0x140>)
 800bf70:	5c9a      	ldrb	r2, [r3, r2]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	701a      	strb	r2, [r3, #0]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	0019      	movs	r1, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	3304      	adds	r3, #4
 800bf82:	4a47      	ldr	r2, [pc, #284]	; (800c0a0 <shift_sub_rows+0x140>)
 800bf84:	5c52      	ldrb	r2, [r2, r1]
 800bf86:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	0019      	movs	r1, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3308      	adds	r3, #8
 800bf94:	4a42      	ldr	r2, [pc, #264]	; (800c0a0 <shift_sub_rows+0x140>)
 800bf96:	5c52      	ldrb	r2, [r2, r1]
 800bf98:	701a      	strb	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	330c      	adds	r3, #12
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	0019      	movs	r1, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	4a3e      	ldr	r2, [pc, #248]	; (800c0a0 <shift_sub_rows+0x140>)
 800bfa8:	5c52      	ldrb	r2, [r2, r1]
 800bfaa:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800bfac:	200f      	movs	r0, #15
 800bfae:	183b      	adds	r3, r7, r0
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	7852      	ldrb	r2, [r2, #1]
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3305      	adds	r3, #5
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	0019      	movs	r1, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	4a37      	ldr	r2, [pc, #220]	; (800c0a0 <shift_sub_rows+0x140>)
 800bfc4:	5c52      	ldrb	r2, [r2, r1]
 800bfc6:	701a      	strb	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	3309      	adds	r3, #9
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	0019      	movs	r1, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3305      	adds	r3, #5
 800bfd4:	4a32      	ldr	r2, [pc, #200]	; (800c0a0 <shift_sub_rows+0x140>)
 800bfd6:	5c52      	ldrb	r2, [r2, r1]
 800bfd8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	330d      	adds	r3, #13
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	0019      	movs	r1, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	3309      	adds	r3, #9
 800bfe6:	4a2e      	ldr	r2, [pc, #184]	; (800c0a0 <shift_sub_rows+0x140>)
 800bfe8:	5c52      	ldrb	r2, [r2, r1]
 800bfea:	701a      	strb	r2, [r3, #0]
 800bfec:	183b      	adds	r3, r7, r0
 800bfee:	781a      	ldrb	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	330d      	adds	r3, #13
 800bff4:	492a      	ldr	r1, [pc, #168]	; (800c0a0 <shift_sub_rows+0x140>)
 800bff6:	5c8a      	ldrb	r2, [r1, r2]
 800bff8:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800bffa:	183b      	adds	r3, r7, r0
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	7892      	ldrb	r2, [r2, #2]
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	330a      	adds	r3, #10
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	0019      	movs	r1, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	3302      	adds	r3, #2
 800c00e:	4a24      	ldr	r2, [pc, #144]	; (800c0a0 <shift_sub_rows+0x140>)
 800c010:	5c52      	ldrb	r2, [r2, r1]
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	183b      	adds	r3, r7, r0
 800c016:	781a      	ldrb	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	330a      	adds	r3, #10
 800c01c:	4920      	ldr	r1, [pc, #128]	; (800c0a0 <shift_sub_rows+0x140>)
 800c01e:	5c8a      	ldrb	r2, [r1, r2]
 800c020:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c022:	183b      	adds	r3, r7, r0
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	7992      	ldrb	r2, [r2, #6]
 800c028:	701a      	strb	r2, [r3, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	330e      	adds	r3, #14
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	0019      	movs	r1, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	3306      	adds	r3, #6
 800c036:	4a1a      	ldr	r2, [pc, #104]	; (800c0a0 <shift_sub_rows+0x140>)
 800c038:	5c52      	ldrb	r2, [r2, r1]
 800c03a:	701a      	strb	r2, [r3, #0]
 800c03c:	183b      	adds	r3, r7, r0
 800c03e:	781a      	ldrb	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	330e      	adds	r3, #14
 800c044:	4916      	ldr	r1, [pc, #88]	; (800c0a0 <shift_sub_rows+0x140>)
 800c046:	5c8a      	ldrb	r2, [r1, r2]
 800c048:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c04a:	183b      	adds	r3, r7, r0
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	7bd2      	ldrb	r2, [r2, #15]
 800c050:	701a      	strb	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	330b      	adds	r3, #11
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	0019      	movs	r1, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	330f      	adds	r3, #15
 800c05e:	4a10      	ldr	r2, [pc, #64]	; (800c0a0 <shift_sub_rows+0x140>)
 800c060:	5c52      	ldrb	r2, [r2, r1]
 800c062:	701a      	strb	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	3307      	adds	r3, #7
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	0019      	movs	r1, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	330b      	adds	r3, #11
 800c070:	4a0b      	ldr	r2, [pc, #44]	; (800c0a0 <shift_sub_rows+0x140>)
 800c072:	5c52      	ldrb	r2, [r2, r1]
 800c074:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	3303      	adds	r3, #3
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	0019      	movs	r1, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3307      	adds	r3, #7
 800c082:	4a07      	ldr	r2, [pc, #28]	; (800c0a0 <shift_sub_rows+0x140>)
 800c084:	5c52      	ldrb	r2, [r2, r1]
 800c086:	701a      	strb	r2, [r3, #0]
 800c088:	183b      	adds	r3, r7, r0
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	3303      	adds	r3, #3
 800c090:	4903      	ldr	r1, [pc, #12]	; (800c0a0 <shift_sub_rows+0x140>)
 800c092:	5c8a      	ldrb	r2, [r1, r2]
 800c094:	701a      	strb	r2, [r3, #0]
}
 800c096:	46c0      	nop			; (mov r8, r8)
 800c098:	46bd      	mov	sp, r7
 800c09a:	b004      	add	sp, #16
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	46c0      	nop			; (mov r8, r8)
 800c0a0:	0801dabc 	.word	0x0801dabc

0800c0a4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c0a4:	b590      	push	{r4, r7, lr}
 800c0a6:	b087      	sub	sp, #28
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	2408      	movs	r4, #8
 800c0b0:	193b      	adds	r3, r7, r4
 800c0b2:	0011      	movs	r1, r2
 800c0b4:	0018      	movs	r0, r3
 800c0b6:	f7ff fd63 	bl	800bb80 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c0ba:	0020      	movs	r0, r4
 800c0bc:	183b      	adds	r3, r7, r0
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	001a      	movs	r2, r3
 800c0c2:	4be8      	ldr	r3, [pc, #928]	; (800c464 <mix_sub_columns+0x3c0>)
 800c0c4:	5c9a      	ldrb	r2, [r3, r2]
 800c0c6:	183b      	adds	r3, r7, r0
 800c0c8:	795b      	ldrb	r3, [r3, #5]
 800c0ca:	0019      	movs	r1, r3
 800c0cc:	4be6      	ldr	r3, [pc, #920]	; (800c468 <mix_sub_columns+0x3c4>)
 800c0ce:	5c5b      	ldrb	r3, [r3, r1]
 800c0d0:	4053      	eors	r3, r2
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	183b      	adds	r3, r7, r0
 800c0d6:	7a9b      	ldrb	r3, [r3, #10]
 800c0d8:	0019      	movs	r1, r3
 800c0da:	4be4      	ldr	r3, [pc, #912]	; (800c46c <mix_sub_columns+0x3c8>)
 800c0dc:	5c5b      	ldrb	r3, [r3, r1]
 800c0de:	4053      	eors	r3, r2
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	183b      	adds	r3, r7, r0
 800c0e4:	7bdb      	ldrb	r3, [r3, #15]
 800c0e6:	0019      	movs	r1, r3
 800c0e8:	4be0      	ldr	r3, [pc, #896]	; (800c46c <mix_sub_columns+0x3c8>)
 800c0ea:	5c5b      	ldrb	r3, [r3, r1]
 800c0ec:	4053      	eors	r3, r2
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c0f4:	183b      	adds	r3, r7, r0
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	001a      	movs	r2, r3
 800c0fa:	4bdc      	ldr	r3, [pc, #880]	; (800c46c <mix_sub_columns+0x3c8>)
 800c0fc:	5c9a      	ldrb	r2, [r3, r2]
 800c0fe:	183b      	adds	r3, r7, r0
 800c100:	795b      	ldrb	r3, [r3, #5]
 800c102:	0019      	movs	r1, r3
 800c104:	4bd7      	ldr	r3, [pc, #860]	; (800c464 <mix_sub_columns+0x3c0>)
 800c106:	5c5b      	ldrb	r3, [r3, r1]
 800c108:	4053      	eors	r3, r2
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	183b      	adds	r3, r7, r0
 800c10e:	7a9b      	ldrb	r3, [r3, #10]
 800c110:	0019      	movs	r1, r3
 800c112:	4bd5      	ldr	r3, [pc, #852]	; (800c468 <mix_sub_columns+0x3c4>)
 800c114:	5c5b      	ldrb	r3, [r3, r1]
 800c116:	4053      	eors	r3, r2
 800c118:	b2d9      	uxtb	r1, r3
 800c11a:	183b      	adds	r3, r7, r0
 800c11c:	7bdb      	ldrb	r3, [r3, #15]
 800c11e:	001a      	movs	r2, r3
 800c120:	4bd2      	ldr	r3, [pc, #840]	; (800c46c <mix_sub_columns+0x3c8>)
 800c122:	5c9a      	ldrb	r2, [r3, r2]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3301      	adds	r3, #1
 800c128:	404a      	eors	r2, r1
 800c12a:	b2d2      	uxtb	r2, r2
 800c12c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c12e:	183b      	adds	r3, r7, r0
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	001a      	movs	r2, r3
 800c134:	4bcd      	ldr	r3, [pc, #820]	; (800c46c <mix_sub_columns+0x3c8>)
 800c136:	5c9a      	ldrb	r2, [r3, r2]
 800c138:	183b      	adds	r3, r7, r0
 800c13a:	795b      	ldrb	r3, [r3, #5]
 800c13c:	0019      	movs	r1, r3
 800c13e:	4bcb      	ldr	r3, [pc, #812]	; (800c46c <mix_sub_columns+0x3c8>)
 800c140:	5c5b      	ldrb	r3, [r3, r1]
 800c142:	4053      	eors	r3, r2
 800c144:	b2da      	uxtb	r2, r3
 800c146:	183b      	adds	r3, r7, r0
 800c148:	7a9b      	ldrb	r3, [r3, #10]
 800c14a:	0019      	movs	r1, r3
 800c14c:	4bc5      	ldr	r3, [pc, #788]	; (800c464 <mix_sub_columns+0x3c0>)
 800c14e:	5c5b      	ldrb	r3, [r3, r1]
 800c150:	4053      	eors	r3, r2
 800c152:	b2d9      	uxtb	r1, r3
 800c154:	183b      	adds	r3, r7, r0
 800c156:	7bdb      	ldrb	r3, [r3, #15]
 800c158:	001a      	movs	r2, r3
 800c15a:	4bc3      	ldr	r3, [pc, #780]	; (800c468 <mix_sub_columns+0x3c4>)
 800c15c:	5c9a      	ldrb	r2, [r3, r2]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3302      	adds	r3, #2
 800c162:	404a      	eors	r2, r1
 800c164:	b2d2      	uxtb	r2, r2
 800c166:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c168:	183b      	adds	r3, r7, r0
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	001a      	movs	r2, r3
 800c16e:	4bbe      	ldr	r3, [pc, #760]	; (800c468 <mix_sub_columns+0x3c4>)
 800c170:	5c9a      	ldrb	r2, [r3, r2]
 800c172:	183b      	adds	r3, r7, r0
 800c174:	795b      	ldrb	r3, [r3, #5]
 800c176:	0019      	movs	r1, r3
 800c178:	4bbc      	ldr	r3, [pc, #752]	; (800c46c <mix_sub_columns+0x3c8>)
 800c17a:	5c5b      	ldrb	r3, [r3, r1]
 800c17c:	4053      	eors	r3, r2
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	183b      	adds	r3, r7, r0
 800c182:	7a9b      	ldrb	r3, [r3, #10]
 800c184:	0019      	movs	r1, r3
 800c186:	4bb9      	ldr	r3, [pc, #740]	; (800c46c <mix_sub_columns+0x3c8>)
 800c188:	5c5b      	ldrb	r3, [r3, r1]
 800c18a:	4053      	eors	r3, r2
 800c18c:	b2d9      	uxtb	r1, r3
 800c18e:	183b      	adds	r3, r7, r0
 800c190:	7bdb      	ldrb	r3, [r3, #15]
 800c192:	001a      	movs	r2, r3
 800c194:	4bb3      	ldr	r3, [pc, #716]	; (800c464 <mix_sub_columns+0x3c0>)
 800c196:	5c9a      	ldrb	r2, [r3, r2]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3303      	adds	r3, #3
 800c19c:	404a      	eors	r2, r1
 800c19e:	b2d2      	uxtb	r2, r2
 800c1a0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c1a2:	183b      	adds	r3, r7, r0
 800c1a4:	791b      	ldrb	r3, [r3, #4]
 800c1a6:	001a      	movs	r2, r3
 800c1a8:	4bae      	ldr	r3, [pc, #696]	; (800c464 <mix_sub_columns+0x3c0>)
 800c1aa:	5c9a      	ldrb	r2, [r3, r2]
 800c1ac:	183b      	adds	r3, r7, r0
 800c1ae:	7a5b      	ldrb	r3, [r3, #9]
 800c1b0:	0019      	movs	r1, r3
 800c1b2:	4bad      	ldr	r3, [pc, #692]	; (800c468 <mix_sub_columns+0x3c4>)
 800c1b4:	5c5b      	ldrb	r3, [r3, r1]
 800c1b6:	4053      	eors	r3, r2
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	183b      	adds	r3, r7, r0
 800c1bc:	7b9b      	ldrb	r3, [r3, #14]
 800c1be:	0019      	movs	r1, r3
 800c1c0:	4baa      	ldr	r3, [pc, #680]	; (800c46c <mix_sub_columns+0x3c8>)
 800c1c2:	5c5b      	ldrb	r3, [r3, r1]
 800c1c4:	4053      	eors	r3, r2
 800c1c6:	b2d9      	uxtb	r1, r3
 800c1c8:	183b      	adds	r3, r7, r0
 800c1ca:	78db      	ldrb	r3, [r3, #3]
 800c1cc:	001a      	movs	r2, r3
 800c1ce:	4ba7      	ldr	r3, [pc, #668]	; (800c46c <mix_sub_columns+0x3c8>)
 800c1d0:	5c9a      	ldrb	r2, [r3, r2]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	404a      	eors	r2, r1
 800c1d8:	b2d2      	uxtb	r2, r2
 800c1da:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c1dc:	183b      	adds	r3, r7, r0
 800c1de:	791b      	ldrb	r3, [r3, #4]
 800c1e0:	001a      	movs	r2, r3
 800c1e2:	4ba2      	ldr	r3, [pc, #648]	; (800c46c <mix_sub_columns+0x3c8>)
 800c1e4:	5c9a      	ldrb	r2, [r3, r2]
 800c1e6:	183b      	adds	r3, r7, r0
 800c1e8:	7a5b      	ldrb	r3, [r3, #9]
 800c1ea:	0019      	movs	r1, r3
 800c1ec:	4b9d      	ldr	r3, [pc, #628]	; (800c464 <mix_sub_columns+0x3c0>)
 800c1ee:	5c5b      	ldrb	r3, [r3, r1]
 800c1f0:	4053      	eors	r3, r2
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	183b      	adds	r3, r7, r0
 800c1f6:	7b9b      	ldrb	r3, [r3, #14]
 800c1f8:	0019      	movs	r1, r3
 800c1fa:	4b9b      	ldr	r3, [pc, #620]	; (800c468 <mix_sub_columns+0x3c4>)
 800c1fc:	5c5b      	ldrb	r3, [r3, r1]
 800c1fe:	4053      	eors	r3, r2
 800c200:	b2d9      	uxtb	r1, r3
 800c202:	183b      	adds	r3, r7, r0
 800c204:	78db      	ldrb	r3, [r3, #3]
 800c206:	001a      	movs	r2, r3
 800c208:	4b98      	ldr	r3, [pc, #608]	; (800c46c <mix_sub_columns+0x3c8>)
 800c20a:	5c9a      	ldrb	r2, [r3, r2]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	3305      	adds	r3, #5
 800c210:	404a      	eors	r2, r1
 800c212:	b2d2      	uxtb	r2, r2
 800c214:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c216:	183b      	adds	r3, r7, r0
 800c218:	791b      	ldrb	r3, [r3, #4]
 800c21a:	001a      	movs	r2, r3
 800c21c:	4b93      	ldr	r3, [pc, #588]	; (800c46c <mix_sub_columns+0x3c8>)
 800c21e:	5c9a      	ldrb	r2, [r3, r2]
 800c220:	183b      	adds	r3, r7, r0
 800c222:	7a5b      	ldrb	r3, [r3, #9]
 800c224:	0019      	movs	r1, r3
 800c226:	4b91      	ldr	r3, [pc, #580]	; (800c46c <mix_sub_columns+0x3c8>)
 800c228:	5c5b      	ldrb	r3, [r3, r1]
 800c22a:	4053      	eors	r3, r2
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	183b      	adds	r3, r7, r0
 800c230:	7b9b      	ldrb	r3, [r3, #14]
 800c232:	0019      	movs	r1, r3
 800c234:	4b8b      	ldr	r3, [pc, #556]	; (800c464 <mix_sub_columns+0x3c0>)
 800c236:	5c5b      	ldrb	r3, [r3, r1]
 800c238:	4053      	eors	r3, r2
 800c23a:	b2d9      	uxtb	r1, r3
 800c23c:	183b      	adds	r3, r7, r0
 800c23e:	78db      	ldrb	r3, [r3, #3]
 800c240:	001a      	movs	r2, r3
 800c242:	4b89      	ldr	r3, [pc, #548]	; (800c468 <mix_sub_columns+0x3c4>)
 800c244:	5c9a      	ldrb	r2, [r3, r2]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3306      	adds	r3, #6
 800c24a:	404a      	eors	r2, r1
 800c24c:	b2d2      	uxtb	r2, r2
 800c24e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c250:	183b      	adds	r3, r7, r0
 800c252:	791b      	ldrb	r3, [r3, #4]
 800c254:	001a      	movs	r2, r3
 800c256:	4b84      	ldr	r3, [pc, #528]	; (800c468 <mix_sub_columns+0x3c4>)
 800c258:	5c9a      	ldrb	r2, [r3, r2]
 800c25a:	183b      	adds	r3, r7, r0
 800c25c:	7a5b      	ldrb	r3, [r3, #9]
 800c25e:	0019      	movs	r1, r3
 800c260:	4b82      	ldr	r3, [pc, #520]	; (800c46c <mix_sub_columns+0x3c8>)
 800c262:	5c5b      	ldrb	r3, [r3, r1]
 800c264:	4053      	eors	r3, r2
 800c266:	b2da      	uxtb	r2, r3
 800c268:	183b      	adds	r3, r7, r0
 800c26a:	7b9b      	ldrb	r3, [r3, #14]
 800c26c:	0019      	movs	r1, r3
 800c26e:	4b7f      	ldr	r3, [pc, #508]	; (800c46c <mix_sub_columns+0x3c8>)
 800c270:	5c5b      	ldrb	r3, [r3, r1]
 800c272:	4053      	eors	r3, r2
 800c274:	b2d9      	uxtb	r1, r3
 800c276:	183b      	adds	r3, r7, r0
 800c278:	78db      	ldrb	r3, [r3, #3]
 800c27a:	001a      	movs	r2, r3
 800c27c:	4b79      	ldr	r3, [pc, #484]	; (800c464 <mix_sub_columns+0x3c0>)
 800c27e:	5c9a      	ldrb	r2, [r3, r2]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3307      	adds	r3, #7
 800c284:	404a      	eors	r2, r1
 800c286:	b2d2      	uxtb	r2, r2
 800c288:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c28a:	183b      	adds	r3, r7, r0
 800c28c:	7a1b      	ldrb	r3, [r3, #8]
 800c28e:	001a      	movs	r2, r3
 800c290:	4b74      	ldr	r3, [pc, #464]	; (800c464 <mix_sub_columns+0x3c0>)
 800c292:	5c9a      	ldrb	r2, [r3, r2]
 800c294:	183b      	adds	r3, r7, r0
 800c296:	7b5b      	ldrb	r3, [r3, #13]
 800c298:	0019      	movs	r1, r3
 800c29a:	4b73      	ldr	r3, [pc, #460]	; (800c468 <mix_sub_columns+0x3c4>)
 800c29c:	5c5b      	ldrb	r3, [r3, r1]
 800c29e:	4053      	eors	r3, r2
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	183b      	adds	r3, r7, r0
 800c2a4:	789b      	ldrb	r3, [r3, #2]
 800c2a6:	0019      	movs	r1, r3
 800c2a8:	4b70      	ldr	r3, [pc, #448]	; (800c46c <mix_sub_columns+0x3c8>)
 800c2aa:	5c5b      	ldrb	r3, [r3, r1]
 800c2ac:	4053      	eors	r3, r2
 800c2ae:	b2d9      	uxtb	r1, r3
 800c2b0:	183b      	adds	r3, r7, r0
 800c2b2:	79db      	ldrb	r3, [r3, #7]
 800c2b4:	001a      	movs	r2, r3
 800c2b6:	4b6d      	ldr	r3, [pc, #436]	; (800c46c <mix_sub_columns+0x3c8>)
 800c2b8:	5c9a      	ldrb	r2, [r3, r2]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	3308      	adds	r3, #8
 800c2be:	404a      	eors	r2, r1
 800c2c0:	b2d2      	uxtb	r2, r2
 800c2c2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c2c4:	183b      	adds	r3, r7, r0
 800c2c6:	7a1b      	ldrb	r3, [r3, #8]
 800c2c8:	001a      	movs	r2, r3
 800c2ca:	4b68      	ldr	r3, [pc, #416]	; (800c46c <mix_sub_columns+0x3c8>)
 800c2cc:	5c9a      	ldrb	r2, [r3, r2]
 800c2ce:	183b      	adds	r3, r7, r0
 800c2d0:	7b5b      	ldrb	r3, [r3, #13]
 800c2d2:	0019      	movs	r1, r3
 800c2d4:	4b63      	ldr	r3, [pc, #396]	; (800c464 <mix_sub_columns+0x3c0>)
 800c2d6:	5c5b      	ldrb	r3, [r3, r1]
 800c2d8:	4053      	eors	r3, r2
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	183b      	adds	r3, r7, r0
 800c2de:	789b      	ldrb	r3, [r3, #2]
 800c2e0:	0019      	movs	r1, r3
 800c2e2:	4b61      	ldr	r3, [pc, #388]	; (800c468 <mix_sub_columns+0x3c4>)
 800c2e4:	5c5b      	ldrb	r3, [r3, r1]
 800c2e6:	4053      	eors	r3, r2
 800c2e8:	b2d9      	uxtb	r1, r3
 800c2ea:	183b      	adds	r3, r7, r0
 800c2ec:	79db      	ldrb	r3, [r3, #7]
 800c2ee:	001a      	movs	r2, r3
 800c2f0:	4b5e      	ldr	r3, [pc, #376]	; (800c46c <mix_sub_columns+0x3c8>)
 800c2f2:	5c9a      	ldrb	r2, [r3, r2]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	3309      	adds	r3, #9
 800c2f8:	404a      	eors	r2, r1
 800c2fa:	b2d2      	uxtb	r2, r2
 800c2fc:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c2fe:	183b      	adds	r3, r7, r0
 800c300:	7a1b      	ldrb	r3, [r3, #8]
 800c302:	001a      	movs	r2, r3
 800c304:	4b59      	ldr	r3, [pc, #356]	; (800c46c <mix_sub_columns+0x3c8>)
 800c306:	5c9a      	ldrb	r2, [r3, r2]
 800c308:	183b      	adds	r3, r7, r0
 800c30a:	7b5b      	ldrb	r3, [r3, #13]
 800c30c:	0019      	movs	r1, r3
 800c30e:	4b57      	ldr	r3, [pc, #348]	; (800c46c <mix_sub_columns+0x3c8>)
 800c310:	5c5b      	ldrb	r3, [r3, r1]
 800c312:	4053      	eors	r3, r2
 800c314:	b2da      	uxtb	r2, r3
 800c316:	183b      	adds	r3, r7, r0
 800c318:	789b      	ldrb	r3, [r3, #2]
 800c31a:	0019      	movs	r1, r3
 800c31c:	4b51      	ldr	r3, [pc, #324]	; (800c464 <mix_sub_columns+0x3c0>)
 800c31e:	5c5b      	ldrb	r3, [r3, r1]
 800c320:	4053      	eors	r3, r2
 800c322:	b2d9      	uxtb	r1, r3
 800c324:	183b      	adds	r3, r7, r0
 800c326:	79db      	ldrb	r3, [r3, #7]
 800c328:	001a      	movs	r2, r3
 800c32a:	4b4f      	ldr	r3, [pc, #316]	; (800c468 <mix_sub_columns+0x3c4>)
 800c32c:	5c9a      	ldrb	r2, [r3, r2]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	330a      	adds	r3, #10
 800c332:	404a      	eors	r2, r1
 800c334:	b2d2      	uxtb	r2, r2
 800c336:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c338:	183b      	adds	r3, r7, r0
 800c33a:	7a1b      	ldrb	r3, [r3, #8]
 800c33c:	001a      	movs	r2, r3
 800c33e:	4b4a      	ldr	r3, [pc, #296]	; (800c468 <mix_sub_columns+0x3c4>)
 800c340:	5c9a      	ldrb	r2, [r3, r2]
 800c342:	183b      	adds	r3, r7, r0
 800c344:	7b5b      	ldrb	r3, [r3, #13]
 800c346:	0019      	movs	r1, r3
 800c348:	4b48      	ldr	r3, [pc, #288]	; (800c46c <mix_sub_columns+0x3c8>)
 800c34a:	5c5b      	ldrb	r3, [r3, r1]
 800c34c:	4053      	eors	r3, r2
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	183b      	adds	r3, r7, r0
 800c352:	789b      	ldrb	r3, [r3, #2]
 800c354:	0019      	movs	r1, r3
 800c356:	4b45      	ldr	r3, [pc, #276]	; (800c46c <mix_sub_columns+0x3c8>)
 800c358:	5c5b      	ldrb	r3, [r3, r1]
 800c35a:	4053      	eors	r3, r2
 800c35c:	b2d9      	uxtb	r1, r3
 800c35e:	183b      	adds	r3, r7, r0
 800c360:	79db      	ldrb	r3, [r3, #7]
 800c362:	001a      	movs	r2, r3
 800c364:	4b3f      	ldr	r3, [pc, #252]	; (800c464 <mix_sub_columns+0x3c0>)
 800c366:	5c9a      	ldrb	r2, [r3, r2]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	330b      	adds	r3, #11
 800c36c:	404a      	eors	r2, r1
 800c36e:	b2d2      	uxtb	r2, r2
 800c370:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c372:	183b      	adds	r3, r7, r0
 800c374:	7b1b      	ldrb	r3, [r3, #12]
 800c376:	001a      	movs	r2, r3
 800c378:	4b3a      	ldr	r3, [pc, #232]	; (800c464 <mix_sub_columns+0x3c0>)
 800c37a:	5c9a      	ldrb	r2, [r3, r2]
 800c37c:	183b      	adds	r3, r7, r0
 800c37e:	785b      	ldrb	r3, [r3, #1]
 800c380:	0019      	movs	r1, r3
 800c382:	4b39      	ldr	r3, [pc, #228]	; (800c468 <mix_sub_columns+0x3c4>)
 800c384:	5c5b      	ldrb	r3, [r3, r1]
 800c386:	4053      	eors	r3, r2
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	183b      	adds	r3, r7, r0
 800c38c:	799b      	ldrb	r3, [r3, #6]
 800c38e:	0019      	movs	r1, r3
 800c390:	4b36      	ldr	r3, [pc, #216]	; (800c46c <mix_sub_columns+0x3c8>)
 800c392:	5c5b      	ldrb	r3, [r3, r1]
 800c394:	4053      	eors	r3, r2
 800c396:	b2d9      	uxtb	r1, r3
 800c398:	183b      	adds	r3, r7, r0
 800c39a:	7adb      	ldrb	r3, [r3, #11]
 800c39c:	001a      	movs	r2, r3
 800c39e:	4b33      	ldr	r3, [pc, #204]	; (800c46c <mix_sub_columns+0x3c8>)
 800c3a0:	5c9a      	ldrb	r2, [r3, r2]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	330c      	adds	r3, #12
 800c3a6:	404a      	eors	r2, r1
 800c3a8:	b2d2      	uxtb	r2, r2
 800c3aa:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c3ac:	183b      	adds	r3, r7, r0
 800c3ae:	7b1b      	ldrb	r3, [r3, #12]
 800c3b0:	001a      	movs	r2, r3
 800c3b2:	4b2e      	ldr	r3, [pc, #184]	; (800c46c <mix_sub_columns+0x3c8>)
 800c3b4:	5c9a      	ldrb	r2, [r3, r2]
 800c3b6:	183b      	adds	r3, r7, r0
 800c3b8:	785b      	ldrb	r3, [r3, #1]
 800c3ba:	0019      	movs	r1, r3
 800c3bc:	4b29      	ldr	r3, [pc, #164]	; (800c464 <mix_sub_columns+0x3c0>)
 800c3be:	5c5b      	ldrb	r3, [r3, r1]
 800c3c0:	4053      	eors	r3, r2
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	183b      	adds	r3, r7, r0
 800c3c6:	799b      	ldrb	r3, [r3, #6]
 800c3c8:	0019      	movs	r1, r3
 800c3ca:	4b27      	ldr	r3, [pc, #156]	; (800c468 <mix_sub_columns+0x3c4>)
 800c3cc:	5c5b      	ldrb	r3, [r3, r1]
 800c3ce:	4053      	eors	r3, r2
 800c3d0:	b2d9      	uxtb	r1, r3
 800c3d2:	183b      	adds	r3, r7, r0
 800c3d4:	7adb      	ldrb	r3, [r3, #11]
 800c3d6:	001a      	movs	r2, r3
 800c3d8:	4b24      	ldr	r3, [pc, #144]	; (800c46c <mix_sub_columns+0x3c8>)
 800c3da:	5c9a      	ldrb	r2, [r3, r2]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	330d      	adds	r3, #13
 800c3e0:	404a      	eors	r2, r1
 800c3e2:	b2d2      	uxtb	r2, r2
 800c3e4:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c3e6:	183b      	adds	r3, r7, r0
 800c3e8:	7b1b      	ldrb	r3, [r3, #12]
 800c3ea:	001a      	movs	r2, r3
 800c3ec:	4b1f      	ldr	r3, [pc, #124]	; (800c46c <mix_sub_columns+0x3c8>)
 800c3ee:	5c9a      	ldrb	r2, [r3, r2]
 800c3f0:	183b      	adds	r3, r7, r0
 800c3f2:	785b      	ldrb	r3, [r3, #1]
 800c3f4:	0019      	movs	r1, r3
 800c3f6:	4b1d      	ldr	r3, [pc, #116]	; (800c46c <mix_sub_columns+0x3c8>)
 800c3f8:	5c5b      	ldrb	r3, [r3, r1]
 800c3fa:	4053      	eors	r3, r2
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	183b      	adds	r3, r7, r0
 800c400:	799b      	ldrb	r3, [r3, #6]
 800c402:	0019      	movs	r1, r3
 800c404:	4b17      	ldr	r3, [pc, #92]	; (800c464 <mix_sub_columns+0x3c0>)
 800c406:	5c5b      	ldrb	r3, [r3, r1]
 800c408:	4053      	eors	r3, r2
 800c40a:	b2d9      	uxtb	r1, r3
 800c40c:	183b      	adds	r3, r7, r0
 800c40e:	7adb      	ldrb	r3, [r3, #11]
 800c410:	001a      	movs	r2, r3
 800c412:	4b15      	ldr	r3, [pc, #84]	; (800c468 <mix_sub_columns+0x3c4>)
 800c414:	5c9a      	ldrb	r2, [r3, r2]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	330e      	adds	r3, #14
 800c41a:	404a      	eors	r2, r1
 800c41c:	b2d2      	uxtb	r2, r2
 800c41e:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c420:	183b      	adds	r3, r7, r0
 800c422:	7b1b      	ldrb	r3, [r3, #12]
 800c424:	001a      	movs	r2, r3
 800c426:	4b10      	ldr	r3, [pc, #64]	; (800c468 <mix_sub_columns+0x3c4>)
 800c428:	5c9a      	ldrb	r2, [r3, r2]
 800c42a:	183b      	adds	r3, r7, r0
 800c42c:	785b      	ldrb	r3, [r3, #1]
 800c42e:	0019      	movs	r1, r3
 800c430:	4b0e      	ldr	r3, [pc, #56]	; (800c46c <mix_sub_columns+0x3c8>)
 800c432:	5c5b      	ldrb	r3, [r3, r1]
 800c434:	4053      	eors	r3, r2
 800c436:	b2da      	uxtb	r2, r3
 800c438:	183b      	adds	r3, r7, r0
 800c43a:	799b      	ldrb	r3, [r3, #6]
 800c43c:	0019      	movs	r1, r3
 800c43e:	4b0b      	ldr	r3, [pc, #44]	; (800c46c <mix_sub_columns+0x3c8>)
 800c440:	5c5b      	ldrb	r3, [r3, r1]
 800c442:	4053      	eors	r3, r2
 800c444:	b2d9      	uxtb	r1, r3
 800c446:	183b      	adds	r3, r7, r0
 800c448:	7adb      	ldrb	r3, [r3, #11]
 800c44a:	001a      	movs	r2, r3
 800c44c:	4b05      	ldr	r3, [pc, #20]	; (800c464 <mix_sub_columns+0x3c0>)
 800c44e:	5c9a      	ldrb	r2, [r3, r2]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	330f      	adds	r3, #15
 800c454:	404a      	eors	r2, r1
 800c456:	b2d2      	uxtb	r2, r2
 800c458:	701a      	strb	r2, [r3, #0]
  }
 800c45a:	46c0      	nop			; (mov r8, r8)
 800c45c:	46bd      	mov	sp, r7
 800c45e:	b007      	add	sp, #28
 800c460:	bd90      	pop	{r4, r7, pc}
 800c462:	46c0      	nop			; (mov r8, r8)
 800c464:	0801dbbc 	.word	0x0801dbbc
 800c468:	0801dcbc 	.word	0x0801dcbc
 800c46c:	0801dabc 	.word	0x0801dabc

0800c470 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c472:	b087      	sub	sp, #28
 800c474:	af00      	add	r7, sp, #0
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	607a      	str	r2, [r7, #4]
 800c47a:	200b      	movs	r0, #11
 800c47c:	183b      	adds	r3, r7, r0
 800c47e:	1c0a      	adds	r2, r1, #0
 800c480:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c482:	183b      	adds	r3, r7, r0
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	3b10      	subs	r3, #16
 800c488:	2210      	movs	r2, #16
 800c48a:	429a      	cmp	r2, r3
 800c48c:	4192      	sbcs	r2, r2
 800c48e:	4252      	negs	r2, r2
 800c490:	b2d2      	uxtb	r2, r2
 800c492:	2a00      	cmp	r2, #0
 800c494:	d109      	bne.n	800c4aa <lorawan_aes_set_key+0x3a>
 800c496:	2201      	movs	r2, #1
 800c498:	409a      	lsls	r2, r3
 800c49a:	0013      	movs	r3, r2
 800c49c:	4a90      	ldr	r2, [pc, #576]	; (800c6e0 <lorawan_aes_set_key+0x270>)
 800c49e:	4013      	ands	r3, r2
 800c4a0:	1e5a      	subs	r2, r3, #1
 800c4a2:	4193      	sbcs	r3, r2
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d105      	bne.n	800c4b6 <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	22f0      	movs	r2, #240	; 0xf0
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800c4b2:	23ff      	movs	r3, #255	; 0xff
 800c4b4:	e10f      	b.n	800c6d6 <lorawan_aes_set_key+0x266>
        break;
 800c4b6:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	240b      	movs	r4, #11
 800c4bc:	193b      	adds	r3, r7, r4
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	0019      	movs	r1, r3
 800c4c4:	f7ff fbb4 	bl	800bc30 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c4c8:	0020      	movs	r0, r4
 800c4ca:	183b      	adds	r3, r7, r0
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	331c      	adds	r3, #28
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	2111      	movs	r1, #17
 800c4d4:	187b      	adds	r3, r7, r1
 800c4d6:	0092      	lsls	r2, r2, #2
 800c4d8:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800c4da:	187b      	adds	r3, r7, r1
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	091b      	lsrs	r3, r3, #4
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	b2d9      	uxtb	r1, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	22f0      	movs	r2, #240	; 0xf0
 800c4ea:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c4ec:	2317      	movs	r3, #23
 800c4ee:	18fb      	adds	r3, r7, r3
 800c4f0:	183a      	adds	r2, r7, r0
 800c4f2:	7812      	ldrb	r2, [r2, #0]
 800c4f4:	701a      	strb	r2, [r3, #0]
 800c4f6:	2316      	movs	r3, #22
 800c4f8:	18fb      	adds	r3, r7, r3
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	701a      	strb	r2, [r3, #0]
 800c4fe:	e0e0      	b.n	800c6c2 <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c500:	2017      	movs	r0, #23
 800c502:	183b      	adds	r3, r7, r0
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	1f1a      	subs	r2, r3, #4
 800c508:	2415      	movs	r4, #21
 800c50a:	193b      	adds	r3, r7, r4
 800c50c:	6879      	ldr	r1, [r7, #4]
 800c50e:	5c8a      	ldrb	r2, [r1, r2]
 800c510:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800c512:	183b      	adds	r3, r7, r0
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	1eda      	subs	r2, r3, #3
 800c518:	2514      	movs	r5, #20
 800c51a:	197b      	adds	r3, r7, r5
 800c51c:	6879      	ldr	r1, [r7, #4]
 800c51e:	5c8a      	ldrb	r2, [r1, r2]
 800c520:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800c522:	183b      	adds	r3, r7, r0
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	1e9a      	subs	r2, r3, #2
 800c528:	2613      	movs	r6, #19
 800c52a:	19bb      	adds	r3, r7, r6
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	5c8a      	ldrb	r2, [r1, r2]
 800c530:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800c532:	183b      	adds	r3, r7, r0
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	1e5a      	subs	r2, r3, #1
 800c538:	2312      	movs	r3, #18
 800c53a:	18fb      	adds	r3, r7, r3
 800c53c:	6879      	ldr	r1, [r7, #4]
 800c53e:	5c8a      	ldrb	r2, [r1, r2]
 800c540:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800c542:	183a      	adds	r2, r7, r0
 800c544:	210b      	movs	r1, #11
 800c546:	187b      	adds	r3, r7, r1
 800c548:	7812      	ldrb	r2, [r2, #0]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	0019      	movs	r1, r3
 800c54e:	0010      	movs	r0, r2
 800c550:	f7f3 fe68 	bl	8000224 <__aeabi_uidivmod>
 800c554:	000b      	movs	r3, r1
 800c556:	b2db      	uxtb	r3, r3
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d13b      	bne.n	800c5d4 <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800c55c:	2210      	movs	r2, #16
 800c55e:	18bb      	adds	r3, r7, r2
 800c560:	193a      	adds	r2, r7, r4
 800c562:	7812      	ldrb	r2, [r2, #0]
 800c564:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800c566:	197b      	adds	r3, r7, r5
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	4a5e      	ldr	r2, [pc, #376]	; (800c6e4 <lorawan_aes_set_key+0x274>)
 800c56c:	5cd1      	ldrb	r1, [r2, r3]
 800c56e:	193b      	adds	r3, r7, r4
 800c570:	2016      	movs	r0, #22
 800c572:	183a      	adds	r2, r7, r0
 800c574:	7812      	ldrb	r2, [r2, #0]
 800c576:	404a      	eors	r2, r1
 800c578:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800c57a:	19bb      	adds	r3, r7, r6
 800c57c:	781a      	ldrb	r2, [r3, #0]
 800c57e:	197b      	adds	r3, r7, r5
 800c580:	4958      	ldr	r1, [pc, #352]	; (800c6e4 <lorawan_aes_set_key+0x274>)
 800c582:	5c8a      	ldrb	r2, [r1, r2]
 800c584:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800c586:	2412      	movs	r4, #18
 800c588:	193b      	adds	r3, r7, r4
 800c58a:	781a      	ldrb	r2, [r3, #0]
 800c58c:	19bb      	adds	r3, r7, r6
 800c58e:	4955      	ldr	r1, [pc, #340]	; (800c6e4 <lorawan_aes_set_key+0x274>)
 800c590:	5c8a      	ldrb	r2, [r1, r2]
 800c592:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800c594:	2210      	movs	r2, #16
 800c596:	18bb      	adds	r3, r7, r2
 800c598:	781a      	ldrb	r2, [r3, #0]
 800c59a:	193b      	adds	r3, r7, r4
 800c59c:	4951      	ldr	r1, [pc, #324]	; (800c6e4 <lorawan_aes_set_key+0x274>)
 800c59e:	5c8a      	ldrb	r2, [r1, r2]
 800c5a0:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800c5a2:	183b      	adds	r3, r7, r0
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	005b      	lsls	r3, r3, #1
 800c5a8:	b25a      	sxtb	r2, r3
 800c5aa:	0004      	movs	r4, r0
 800c5ac:	183b      	adds	r3, r7, r0
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	09db      	lsrs	r3, r3, #7
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	1c19      	adds	r1, r3, #0
 800c5b6:	1c0b      	adds	r3, r1, #0
 800c5b8:	18db      	adds	r3, r3, r3
 800c5ba:	185b      	adds	r3, r3, r1
 800c5bc:	1c19      	adds	r1, r3, #0
 800c5be:	00c8      	lsls	r0, r1, #3
 800c5c0:	1c19      	adds	r1, r3, #0
 800c5c2:	1c03      	adds	r3, r0, #0
 800c5c4:	18cb      	adds	r3, r1, r3
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	b25b      	sxtb	r3, r3
 800c5ca:	4053      	eors	r3, r2
 800c5cc:	b25a      	sxtb	r2, r3
 800c5ce:	193b      	adds	r3, r7, r4
 800c5d0:	701a      	strb	r2, [r3, #0]
 800c5d2:	e02d      	b.n	800c630 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c5d4:	210b      	movs	r1, #11
 800c5d6:	187b      	adds	r3, r7, r1
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	2b18      	cmp	r3, #24
 800c5dc:	d928      	bls.n	800c630 <lorawan_aes_set_key+0x1c0>
 800c5de:	2317      	movs	r3, #23
 800c5e0:	18fa      	adds	r2, r7, r3
 800c5e2:	187b      	adds	r3, r7, r1
 800c5e4:	7812      	ldrb	r2, [r2, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	0019      	movs	r1, r3
 800c5ea:	0010      	movs	r0, r2
 800c5ec:	f7f3 fe1a 	bl	8000224 <__aeabi_uidivmod>
 800c5f0:	000b      	movs	r3, r1
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b10      	cmp	r3, #16
 800c5f6:	d11b      	bne.n	800c630 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800c5f8:	2115      	movs	r1, #21
 800c5fa:	187b      	adds	r3, r7, r1
 800c5fc:	781a      	ldrb	r2, [r3, #0]
 800c5fe:	187b      	adds	r3, r7, r1
 800c600:	4938      	ldr	r1, [pc, #224]	; (800c6e4 <lorawan_aes_set_key+0x274>)
 800c602:	5c8a      	ldrb	r2, [r1, r2]
 800c604:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800c606:	2114      	movs	r1, #20
 800c608:	187b      	adds	r3, r7, r1
 800c60a:	781a      	ldrb	r2, [r3, #0]
 800c60c:	187b      	adds	r3, r7, r1
 800c60e:	4935      	ldr	r1, [pc, #212]	; (800c6e4 <lorawan_aes_set_key+0x274>)
 800c610:	5c8a      	ldrb	r2, [r1, r2]
 800c612:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800c614:	2113      	movs	r1, #19
 800c616:	187b      	adds	r3, r7, r1
 800c618:	781a      	ldrb	r2, [r3, #0]
 800c61a:	187b      	adds	r3, r7, r1
 800c61c:	4931      	ldr	r1, [pc, #196]	; (800c6e4 <lorawan_aes_set_key+0x274>)
 800c61e:	5c8a      	ldrb	r2, [r1, r2]
 800c620:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800c622:	2112      	movs	r1, #18
 800c624:	187b      	adds	r3, r7, r1
 800c626:	781a      	ldrb	r2, [r3, #0]
 800c628:	187b      	adds	r3, r7, r1
 800c62a:	492e      	ldr	r1, [pc, #184]	; (800c6e4 <lorawan_aes_set_key+0x274>)
 800c62c:	5c8a      	ldrb	r2, [r1, r2]
 800c62e:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800c630:	2410      	movs	r4, #16
 800c632:	193b      	adds	r3, r7, r4
 800c634:	2017      	movs	r0, #23
 800c636:	1839      	adds	r1, r7, r0
 800c638:	220b      	movs	r2, #11
 800c63a:	18ba      	adds	r2, r7, r2
 800c63c:	7809      	ldrb	r1, [r1, #0]
 800c63e:	7812      	ldrb	r2, [r2, #0]
 800c640:	1a8a      	subs	r2, r1, r2
 800c642:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c644:	193b      	adds	r3, r7, r4
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	5cd1      	ldrb	r1, [r2, r3]
 800c64c:	183b      	adds	r3, r7, r0
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2215      	movs	r2, #21
 800c652:	18ba      	adds	r2, r7, r2
 800c654:	7812      	ldrb	r2, [r2, #0]
 800c656:	404a      	eors	r2, r1
 800c658:	b2d1      	uxtb	r1, r2
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c65e:	193b      	adds	r3, r7, r4
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	5cd1      	ldrb	r1, [r2, r3]
 800c668:	183b      	adds	r3, r7, r0
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	3301      	adds	r3, #1
 800c66e:	2214      	movs	r2, #20
 800c670:	18ba      	adds	r2, r7, r2
 800c672:	7812      	ldrb	r2, [r2, #0]
 800c674:	404a      	eors	r2, r1
 800c676:	b2d1      	uxtb	r1, r2
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c67c:	193b      	adds	r3, r7, r4
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	3302      	adds	r3, #2
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	5cd1      	ldrb	r1, [r2, r3]
 800c686:	183b      	adds	r3, r7, r0
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	3302      	adds	r3, #2
 800c68c:	2213      	movs	r2, #19
 800c68e:	18ba      	adds	r2, r7, r2
 800c690:	7812      	ldrb	r2, [r2, #0]
 800c692:	404a      	eors	r2, r1
 800c694:	b2d1      	uxtb	r1, r2
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c69a:	193b      	adds	r3, r7, r4
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	3303      	adds	r3, #3
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	5cd1      	ldrb	r1, [r2, r3]
 800c6a4:	183b      	adds	r3, r7, r0
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	3303      	adds	r3, #3
 800c6aa:	2212      	movs	r2, #18
 800c6ac:	18ba      	adds	r2, r7, r2
 800c6ae:	7812      	ldrb	r2, [r2, #0]
 800c6b0:	404a      	eors	r2, r1
 800c6b2:	b2d1      	uxtb	r1, r2
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c6b8:	183b      	adds	r3, r7, r0
 800c6ba:	183a      	adds	r2, r7, r0
 800c6bc:	7812      	ldrb	r2, [r2, #0]
 800c6be:	3204      	adds	r2, #4
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	2317      	movs	r3, #23
 800c6c4:	18fa      	adds	r2, r7, r3
 800c6c6:	2311      	movs	r3, #17
 800c6c8:	18fb      	adds	r3, r7, r3
 800c6ca:	7812      	ldrb	r2, [r2, #0]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d200      	bcs.n	800c6d4 <lorawan_aes_set_key+0x264>
 800c6d2:	e715      	b.n	800c500 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	0018      	movs	r0, r3
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	b007      	add	sp, #28
 800c6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6de:	46c0      	nop			; (mov r8, r8)
 800c6e0:	00010101 	.word	0x00010101
 800c6e4:	0801dabc 	.word	0x0801dabc

0800c6e8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c6e8:	b5b0      	push	{r4, r5, r7, lr}
 800c6ea:	b08a      	sub	sp, #40	; 0x28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	22f0      	movs	r2, #240	; 0xf0
 800c6f8:	5c9b      	ldrb	r3, [r3, r2]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d039      	beq.n	800c772 <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	68f9      	ldr	r1, [r7, #12]
 800c702:	2314      	movs	r3, #20
 800c704:	18fb      	adds	r3, r7, r3
 800c706:	0018      	movs	r0, r3
 800c708:	f7ff fb64 	bl	800bdd4 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c70c:	2327      	movs	r3, #39	; 0x27
 800c70e:	18fb      	adds	r3, r7, r3
 800c710:	2201      	movs	r2, #1
 800c712:	701a      	strb	r2, [r3, #0]
 800c714:	e014      	b.n	800c740 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c716:	2514      	movs	r5, #20
 800c718:	197b      	adds	r3, r7, r5
 800c71a:	0018      	movs	r0, r3
 800c71c:	f7ff fcc2 	bl	800c0a4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2427      	movs	r4, #39	; 0x27
 800c724:	193a      	adds	r2, r7, r4
 800c726:	7812      	ldrb	r2, [r2, #0]
 800c728:	0112      	lsls	r2, r2, #4
 800c72a:	189a      	adds	r2, r3, r2
 800c72c:	197b      	adds	r3, r7, r5
 800c72e:	0011      	movs	r1, r2
 800c730:	0018      	movs	r0, r3
 800c732:	f7ff fc06 	bl	800bf42 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c736:	193b      	adds	r3, r7, r4
 800c738:	193a      	adds	r2, r7, r4
 800c73a:	7812      	ldrb	r2, [r2, #0]
 800c73c:	3201      	adds	r2, #1
 800c73e:	701a      	strb	r2, [r3, #0]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	22f0      	movs	r2, #240	; 0xf0
 800c744:	5c9b      	ldrb	r3, [r3, r2]
 800c746:	2427      	movs	r4, #39	; 0x27
 800c748:	193a      	adds	r2, r7, r4
 800c74a:	7812      	ldrb	r2, [r2, #0]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d3e2      	bcc.n	800c716 <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c750:	2514      	movs	r5, #20
 800c752:	197b      	adds	r3, r7, r5
 800c754:	0018      	movs	r0, r3
 800c756:	f7ff fc03 	bl	800bf60 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	193a      	adds	r2, r7, r4
 800c75e:	7812      	ldrb	r2, [r2, #0]
 800c760:	0112      	lsls	r2, r2, #4
 800c762:	189a      	adds	r2, r3, r2
 800c764:	1979      	adds	r1, r7, r5
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	0018      	movs	r0, r3
 800c76a:	f7ff fb33 	bl	800bdd4 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	e000      	b.n	800c774 <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800c772:	23ff      	movs	r3, #255	; 0xff
}
 800c774:	0018      	movs	r0, r3
 800c776:	46bd      	mov	sp, r7
 800c778:	b00a      	add	sp, #40	; 0x28
 800c77a:	bdb0      	pop	{r4, r5, r7, pc}

0800c77c <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	0002      	movs	r2, r0
 800c784:	6039      	str	r1, [r7, #0]
 800c786:	1dfb      	adds	r3, r7, #7
 800c788:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c78a:	230f      	movs	r3, #15
 800c78c:	18fb      	adds	r3, r7, r3
 800c78e:	2200      	movs	r2, #0
 800c790:	701a      	strb	r2, [r3, #0]
 800c792:	e020      	b.n	800c7d6 <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800c794:	200f      	movs	r0, #15
 800c796:	183b      	adds	r3, r7, r0
 800c798:	781a      	ldrb	r2, [r3, #0]
 800c79a:	4914      	ldr	r1, [pc, #80]	; (800c7ec <GetKeyByID+0x70>)
 800c79c:	0013      	movs	r3, r2
 800c79e:	011b      	lsls	r3, r3, #4
 800c7a0:	189b      	adds	r3, r3, r2
 800c7a2:	18cb      	adds	r3, r1, r3
 800c7a4:	3310      	adds	r3, #16
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	1dfa      	adds	r2, r7, #7
 800c7aa:	7812      	ldrb	r2, [r2, #0]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d10c      	bne.n	800c7ca <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800c7b0:	183b      	adds	r3, r7, r0
 800c7b2:	781a      	ldrb	r2, [r3, #0]
 800c7b4:	0013      	movs	r3, r2
 800c7b6:	011b      	lsls	r3, r3, #4
 800c7b8:	189b      	adds	r3, r3, r2
 800c7ba:	3310      	adds	r3, #16
 800c7bc:	001a      	movs	r2, r3
 800c7be:	4b0b      	ldr	r3, [pc, #44]	; (800c7ec <GetKeyByID+0x70>)
 800c7c0:	18d2      	adds	r2, r2, r3
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	e00b      	b.n	800c7e2 <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c7ca:	210f      	movs	r1, #15
 800c7cc:	187b      	adds	r3, r7, r1
 800c7ce:	781a      	ldrb	r2, [r3, #0]
 800c7d0:	187b      	adds	r3, r7, r1
 800c7d2:	3201      	adds	r2, #1
 800c7d4:	701a      	strb	r2, [r3, #0]
 800c7d6:	230f      	movs	r3, #15
 800c7d8:	18fb      	adds	r3, r7, r3
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b09      	cmp	r3, #9
 800c7de:	d9d9      	bls.n	800c794 <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c7e0:	2303      	movs	r3, #3
}
 800c7e2:	0018      	movs	r0, r3
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	b004      	add	sp, #16
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	46c0      	nop			; (mov r8, r8)
 800c7ec:	2000007c 	.word	0x2000007c

0800c7f0 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	af00      	add	r7, sp, #0
  return;
 800c7f4:	46c0      	nop			; (mov r8, r8)
}
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800c7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7fe:	b0d1      	sub	sp, #324	; 0x144
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	0019      	movs	r1, r3
 800c808:	4b3c      	ldr	r3, [pc, #240]	; (800c8fc <ComputeCmac+0x100>)
 800c80a:	20a0      	movs	r0, #160	; 0xa0
 800c80c:	0040      	lsls	r0, r0, #1
 800c80e:	181b      	adds	r3, r3, r0
 800c810:	19db      	adds	r3, r3, r7
 800c812:	801a      	strh	r2, [r3, #0]
 800c814:	4b3a      	ldr	r3, [pc, #232]	; (800c900 <ComputeCmac+0x104>)
 800c816:	181b      	adds	r3, r3, r0
 800c818:	19db      	adds	r3, r3, r7
 800c81a:	1c0a      	adds	r2, r1, #0
 800c81c:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c81e:	2340      	movs	r3, #64	; 0x40
 800c820:	33ff      	adds	r3, #255	; 0xff
 800c822:	18fb      	adds	r3, r7, r3
 800c824:	2206      	movs	r2, #6
 800c826:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d007      	beq.n	800c83e <ComputeCmac+0x42>
 800c82e:	23a8      	movs	r3, #168	; 0xa8
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	2208      	movs	r2, #8
 800c834:	189b      	adds	r3, r3, r2
 800c836:	19db      	adds	r3, r3, r7
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <ComputeCmac+0x46>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800c83e:	2302      	movs	r3, #2
 800c840:	e057      	b.n	800c8f2 <ComputeCmac+0xf6>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800c842:	2514      	movs	r5, #20
 800c844:	197b      	adds	r3, r7, r5
 800c846:	0018      	movs	r0, r3
 800c848:	f7fe ff3e 	bl	800b6c8 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800c84c:	2640      	movs	r6, #64	; 0x40
 800c84e:	36ff      	adds	r6, #255	; 0xff
 800c850:	19bc      	adds	r4, r7, r6
 800c852:	2310      	movs	r3, #16
 800c854:	18fa      	adds	r2, r7, r3
 800c856:	4b2a      	ldr	r3, [pc, #168]	; (800c900 <ComputeCmac+0x104>)
 800c858:	21a0      	movs	r1, #160	; 0xa0
 800c85a:	0049      	lsls	r1, r1, #1
 800c85c:	185b      	adds	r3, r3, r1
 800c85e:	19db      	adds	r3, r3, r7
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	0011      	movs	r1, r2
 800c864:	0018      	movs	r0, r3
 800c866:	f7ff ff89 	bl	800c77c <GetKeyByID>
 800c86a:	0003      	movs	r3, r0
 800c86c:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800c86e:	19bb      	adds	r3, r7, r6
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d139      	bne.n	800c8ea <ComputeCmac+0xee>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	1c5a      	adds	r2, r3, #1
 800c87a:	197b      	adds	r3, r7, r5
 800c87c:	0011      	movs	r1, r2
 800c87e:	0018      	movs	r0, r3
 800c880:	f7fe ff3c 	bl	800b6fc <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d005      	beq.n	800c896 <ComputeCmac+0x9a>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800c88a:	68f9      	ldr	r1, [r7, #12]
 800c88c:	197b      	adds	r3, r7, r5
 800c88e:	2210      	movs	r2, #16
 800c890:	0018      	movs	r0, r3
 800c892:	f7fe ff42 	bl	800b71a <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800c896:	4b19      	ldr	r3, [pc, #100]	; (800c8fc <ComputeCmac+0x100>)
 800c898:	22a0      	movs	r2, #160	; 0xa0
 800c89a:	0052      	lsls	r2, r2, #1
 800c89c:	189b      	adds	r3, r3, r2
 800c89e:	19db      	adds	r3, r3, r7
 800c8a0:	881a      	ldrh	r2, [r3, #0]
 800c8a2:	68b9      	ldr	r1, [r7, #8]
 800c8a4:	2414      	movs	r4, #20
 800c8a6:	193b      	adds	r3, r7, r4
 800c8a8:	0018      	movs	r0, r3
 800c8aa:	f7fe ff36 	bl	800b71a <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800c8ae:	193a      	adds	r2, r7, r4
 800c8b0:	2496      	movs	r4, #150	; 0x96
 800c8b2:	0064      	lsls	r4, r4, #1
 800c8b4:	193b      	adds	r3, r7, r4
 800c8b6:	0011      	movs	r1, r2
 800c8b8:	0018      	movs	r0, r3
 800c8ba:	f7fe fff6 	bl	800b8aa <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800c8be:	0021      	movs	r1, r4
 800c8c0:	187b      	adds	r3, r7, r1
 800c8c2:	78db      	ldrb	r3, [r3, #3]
 800c8c4:	061a      	lsls	r2, r3, #24
 800c8c6:	187b      	adds	r3, r7, r1
 800c8c8:	789b      	ldrb	r3, [r3, #2]
 800c8ca:	041b      	lsls	r3, r3, #16
 800c8cc:	431a      	orrs	r2, r3
 800c8ce:	187b      	adds	r3, r7, r1
 800c8d0:	785b      	ldrb	r3, [r3, #1]
 800c8d2:	021b      	lsls	r3, r3, #8
 800c8d4:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800c8d6:	187a      	adds	r2, r7, r1
 800c8d8:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800c8da:	431a      	orrs	r2, r3
 800c8dc:	23a8      	movs	r3, #168	; 0xa8
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	2108      	movs	r1, #8
 800c8e2:	185b      	adds	r3, r3, r1
 800c8e4:	19db      	adds	r3, r3, r7
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800c8ea:	2340      	movs	r3, #64	; 0x40
 800c8ec:	33ff      	adds	r3, #255	; 0xff
 800c8ee:	18fb      	adds	r3, r7, r3
 800c8f0:	781b      	ldrb	r3, [r3, #0]
}
 800c8f2:	0018      	movs	r0, r3
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	b051      	add	sp, #324	; 0x144
 800c8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8fa:	46c0      	nop			; (mov r8, r8)
 800c8fc:	fffffec6 	.word	0xfffffec6
 800c900:	fffffec5 	.word	0xfffffec5

0800c904 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800c904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c906:	46de      	mov	lr, fp
 800c908:	4657      	mov	r7, sl
 800c90a:	464e      	mov	r6, r9
 800c90c:	4645      	mov	r5, r8
 800c90e:	b5e0      	push	{r5, r6, r7, lr}
 800c910:	b099      	sub	sp, #100	; 0x64
 800c912:	af10      	add	r7, sp, #64	; 0x40
 800c914:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c916:	250f      	movs	r5, #15
 800c918:	2610      	movs	r6, #16
 800c91a:	19ab      	adds	r3, r5, r6
 800c91c:	19db      	adds	r3, r3, r7
 800c91e:	2206      	movs	r2, #6
 800c920:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800c922:	49d9      	ldr	r1, [pc, #868]	; (800cc88 <SecureElementInit+0x384>)
 800c924:	4bd9      	ldr	r3, [pc, #868]	; (800cc8c <SecureElementInit+0x388>)
 800c926:	22aa      	movs	r2, #170	; 0xaa
 800c928:	0018      	movs	r0, r3
 800c92a:	f00b fff1 	bl	8018910 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800c92e:	19ab      	adds	r3, r5, r6
 800c930:	19dc      	adds	r4, r3, r7
 800c932:	2308      	movs	r3, #8
 800c934:	199b      	adds	r3, r3, r6
 800c936:	19db      	adds	r3, r3, r7
 800c938:	0019      	movs	r1, r3
 800c93a:	2000      	movs	r0, #0
 800c93c:	f7ff ff1e 	bl	800c77c <GetKeyByID>
 800c940:	0003      	movs	r3, r0
 800c942:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800c944:	4bd2      	ldr	r3, [pc, #840]	; (800cc90 <SecureElementInit+0x38c>)
 800c946:	2200      	movs	r2, #0
 800c948:	2100      	movs	r1, #0
 800c94a:	2002      	movs	r0, #2
 800c94c:	f00e fc1e 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800c950:	19ab      	adds	r3, r5, r6
 800c952:	19db      	adds	r3, r3, r7
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d14f      	bne.n	800c9fa <SecureElementInit+0xf6>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	785b      	ldrb	r3, [r3, #1]
 800c95e:	001d      	movs	r5, r3
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	789b      	ldrb	r3, [r3, #2]
 800c964:	001e      	movs	r6, r3
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	78db      	ldrb	r3, [r3, #3]
 800c96a:	469c      	mov	ip, r3
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	791b      	ldrb	r3, [r3, #4]
 800c970:	4698      	mov	r8, r3
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	795b      	ldrb	r3, [r3, #5]
 800c976:	4699      	mov	r9, r3
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	799b      	ldrb	r3, [r3, #6]
 800c97c:	469a      	mov	sl, r3
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	79db      	ldrb	r3, [r3, #7]
 800c982:	469b      	mov	fp, r3
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	7a1b      	ldrb	r3, [r3, #8]
 800c988:	613b      	str	r3, [r7, #16]
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	7a5b      	ldrb	r3, [r3, #9]
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	7a9b      	ldrb	r3, [r3, #10]
 800c994:	60bb      	str	r3, [r7, #8]
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	7adb      	ldrb	r3, [r3, #11]
 800c99a:	607b      	str	r3, [r7, #4]
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	7b1b      	ldrb	r3, [r3, #12]
 800c9a0:	603b      	str	r3, [r7, #0]
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	7b5b      	ldrb	r3, [r3, #13]
 800c9a6:	001c      	movs	r4, r3
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	7b9b      	ldrb	r3, [r3, #14]
 800c9ac:	0018      	movs	r0, r3
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	7bdb      	ldrb	r3, [r3, #15]
 800c9b2:	0019      	movs	r1, r3
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	7c1b      	ldrb	r3, [r3, #16]
 800c9b8:	4ab6      	ldr	r2, [pc, #728]	; (800cc94 <SecureElementInit+0x390>)
 800c9ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9bc:	910e      	str	r1, [sp, #56]	; 0x38
 800c9be:	900d      	str	r0, [sp, #52]	; 0x34
 800c9c0:	940c      	str	r4, [sp, #48]	; 0x30
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	910b      	str	r1, [sp, #44]	; 0x2c
 800c9c6:	6879      	ldr	r1, [r7, #4]
 800c9c8:	910a      	str	r1, [sp, #40]	; 0x28
 800c9ca:	68b9      	ldr	r1, [r7, #8]
 800c9cc:	9109      	str	r1, [sp, #36]	; 0x24
 800c9ce:	68f9      	ldr	r1, [r7, #12]
 800c9d0:	9108      	str	r1, [sp, #32]
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	9307      	str	r3, [sp, #28]
 800c9d6:	465b      	mov	r3, fp
 800c9d8:	9306      	str	r3, [sp, #24]
 800c9da:	4653      	mov	r3, sl
 800c9dc:	9305      	str	r3, [sp, #20]
 800c9de:	464b      	mov	r3, r9
 800c9e0:	9304      	str	r3, [sp, #16]
 800c9e2:	4643      	mov	r3, r8
 800c9e4:	9303      	str	r3, [sp, #12]
 800c9e6:	4663      	mov	r3, ip
 800c9e8:	9302      	str	r3, [sp, #8]
 800c9ea:	9601      	str	r6, [sp, #4]
 800c9ec:	9500      	str	r5, [sp, #0]
 800c9ee:	0013      	movs	r3, r2
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	2002      	movs	r0, #2
 800c9f6:	f00e fbc9 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800c9fa:	250f      	movs	r5, #15
 800c9fc:	2610      	movs	r6, #16
 800c9fe:	19ab      	adds	r3, r5, r6
 800ca00:	19dc      	adds	r4, r3, r7
 800ca02:	2308      	movs	r3, #8
 800ca04:	199b      	adds	r3, r3, r6
 800ca06:	19db      	adds	r3, r3, r7
 800ca08:	0019      	movs	r1, r3
 800ca0a:	2001      	movs	r0, #1
 800ca0c:	f7ff feb6 	bl	800c77c <GetKeyByID>
 800ca10:	0003      	movs	r3, r0
 800ca12:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800ca14:	19ab      	adds	r3, r5, r6
 800ca16:	19db      	adds	r3, r3, r7
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d14f      	bne.n	800cabe <SecureElementInit+0x1ba>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	785b      	ldrb	r3, [r3, #1]
 800ca22:	001d      	movs	r5, r3
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	789b      	ldrb	r3, [r3, #2]
 800ca28:	001e      	movs	r6, r3
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	78db      	ldrb	r3, [r3, #3]
 800ca2e:	469c      	mov	ip, r3
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	791b      	ldrb	r3, [r3, #4]
 800ca34:	4698      	mov	r8, r3
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	795b      	ldrb	r3, [r3, #5]
 800ca3a:	4699      	mov	r9, r3
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	799b      	ldrb	r3, [r3, #6]
 800ca40:	469a      	mov	sl, r3
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	79db      	ldrb	r3, [r3, #7]
 800ca46:	469b      	mov	fp, r3
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	7a1b      	ldrb	r3, [r3, #8]
 800ca4c:	613b      	str	r3, [r7, #16]
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	7a5b      	ldrb	r3, [r3, #9]
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	7a9b      	ldrb	r3, [r3, #10]
 800ca58:	60bb      	str	r3, [r7, #8]
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	7adb      	ldrb	r3, [r3, #11]
 800ca5e:	607b      	str	r3, [r7, #4]
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	7b1b      	ldrb	r3, [r3, #12]
 800ca64:	603b      	str	r3, [r7, #0]
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	7b5b      	ldrb	r3, [r3, #13]
 800ca6a:	001c      	movs	r4, r3
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	7b9b      	ldrb	r3, [r3, #14]
 800ca70:	0018      	movs	r0, r3
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	7bdb      	ldrb	r3, [r3, #15]
 800ca76:	0019      	movs	r1, r3
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	7c1b      	ldrb	r3, [r3, #16]
 800ca7c:	4a86      	ldr	r2, [pc, #536]	; (800cc98 <SecureElementInit+0x394>)
 800ca7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca80:	910e      	str	r1, [sp, #56]	; 0x38
 800ca82:	900d      	str	r0, [sp, #52]	; 0x34
 800ca84:	940c      	str	r4, [sp, #48]	; 0x30
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	910b      	str	r1, [sp, #44]	; 0x2c
 800ca8a:	6879      	ldr	r1, [r7, #4]
 800ca8c:	910a      	str	r1, [sp, #40]	; 0x28
 800ca8e:	68b9      	ldr	r1, [r7, #8]
 800ca90:	9109      	str	r1, [sp, #36]	; 0x24
 800ca92:	68f9      	ldr	r1, [r7, #12]
 800ca94:	9108      	str	r1, [sp, #32]
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	9307      	str	r3, [sp, #28]
 800ca9a:	465b      	mov	r3, fp
 800ca9c:	9306      	str	r3, [sp, #24]
 800ca9e:	4653      	mov	r3, sl
 800caa0:	9305      	str	r3, [sp, #20]
 800caa2:	464b      	mov	r3, r9
 800caa4:	9304      	str	r3, [sp, #16]
 800caa6:	4643      	mov	r3, r8
 800caa8:	9303      	str	r3, [sp, #12]
 800caaa:	4663      	mov	r3, ip
 800caac:	9302      	str	r3, [sp, #8]
 800caae:	9601      	str	r6, [sp, #4]
 800cab0:	9500      	str	r5, [sp, #0]
 800cab2:	0013      	movs	r3, r2
 800cab4:	2200      	movs	r2, #0
 800cab6:	2100      	movs	r1, #0
 800cab8:	2002      	movs	r0, #2
 800caba:	f00e fb67 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800cabe:	4b77      	ldr	r3, [pc, #476]	; (800cc9c <SecureElementInit+0x398>)
 800cac0:	2200      	movs	r2, #0
 800cac2:	2100      	movs	r1, #0
 800cac4:	2002      	movs	r0, #2
 800cac6:	f00e fb61 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800caca:	250f      	movs	r5, #15
 800cacc:	2610      	movs	r6, #16
 800cace:	19ab      	adds	r3, r5, r6
 800cad0:	19dc      	adds	r4, r3, r7
 800cad2:	2308      	movs	r3, #8
 800cad4:	199b      	adds	r3, r3, r6
 800cad6:	19db      	adds	r3, r3, r7
 800cad8:	0019      	movs	r1, r3
 800cada:	2003      	movs	r0, #3
 800cadc:	f7ff fe4e 	bl	800c77c <GetKeyByID>
 800cae0:	0003      	movs	r3, r0
 800cae2:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800cae4:	19ab      	adds	r3, r5, r6
 800cae6:	19db      	adds	r3, r3, r7
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d14f      	bne.n	800cb8e <SecureElementInit+0x28a>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	785b      	ldrb	r3, [r3, #1]
 800caf2:	001d      	movs	r5, r3
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	789b      	ldrb	r3, [r3, #2]
 800caf8:	001e      	movs	r6, r3
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	78db      	ldrb	r3, [r3, #3]
 800cafe:	469c      	mov	ip, r3
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	791b      	ldrb	r3, [r3, #4]
 800cb04:	4698      	mov	r8, r3
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	795b      	ldrb	r3, [r3, #5]
 800cb0a:	4699      	mov	r9, r3
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	799b      	ldrb	r3, [r3, #6]
 800cb10:	469a      	mov	sl, r3
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	79db      	ldrb	r3, [r3, #7]
 800cb16:	469b      	mov	fp, r3
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	7a1b      	ldrb	r3, [r3, #8]
 800cb1c:	613b      	str	r3, [r7, #16]
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	7a5b      	ldrb	r3, [r3, #9]
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	7a9b      	ldrb	r3, [r3, #10]
 800cb28:	60bb      	str	r3, [r7, #8]
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	7adb      	ldrb	r3, [r3, #11]
 800cb2e:	607b      	str	r3, [r7, #4]
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	7b1b      	ldrb	r3, [r3, #12]
 800cb34:	603b      	str	r3, [r7, #0]
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	7b5b      	ldrb	r3, [r3, #13]
 800cb3a:	001c      	movs	r4, r3
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	7b9b      	ldrb	r3, [r3, #14]
 800cb40:	0018      	movs	r0, r3
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	7bdb      	ldrb	r3, [r3, #15]
 800cb46:	0019      	movs	r1, r3
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	7c1b      	ldrb	r3, [r3, #16]
 800cb4c:	4a54      	ldr	r2, [pc, #336]	; (800cca0 <SecureElementInit+0x39c>)
 800cb4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb50:	910e      	str	r1, [sp, #56]	; 0x38
 800cb52:	900d      	str	r0, [sp, #52]	; 0x34
 800cb54:	940c      	str	r4, [sp, #48]	; 0x30
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	910b      	str	r1, [sp, #44]	; 0x2c
 800cb5a:	6879      	ldr	r1, [r7, #4]
 800cb5c:	910a      	str	r1, [sp, #40]	; 0x28
 800cb5e:	68b9      	ldr	r1, [r7, #8]
 800cb60:	9109      	str	r1, [sp, #36]	; 0x24
 800cb62:	68f9      	ldr	r1, [r7, #12]
 800cb64:	9108      	str	r1, [sp, #32]
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	9307      	str	r3, [sp, #28]
 800cb6a:	465b      	mov	r3, fp
 800cb6c:	9306      	str	r3, [sp, #24]
 800cb6e:	4653      	mov	r3, sl
 800cb70:	9305      	str	r3, [sp, #20]
 800cb72:	464b      	mov	r3, r9
 800cb74:	9304      	str	r3, [sp, #16]
 800cb76:	4643      	mov	r3, r8
 800cb78:	9303      	str	r3, [sp, #12]
 800cb7a:	4663      	mov	r3, ip
 800cb7c:	9302      	str	r3, [sp, #8]
 800cb7e:	9601      	str	r6, [sp, #4]
 800cb80:	9500      	str	r5, [sp, #0]
 800cb82:	0013      	movs	r3, r2
 800cb84:	2200      	movs	r2, #0
 800cb86:	2100      	movs	r1, #0
 800cb88:	2002      	movs	r0, #2
 800cb8a:	f00e faff 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800cb8e:	250f      	movs	r5, #15
 800cb90:	2610      	movs	r6, #16
 800cb92:	19ab      	adds	r3, r5, r6
 800cb94:	19dc      	adds	r4, r3, r7
 800cb96:	2308      	movs	r3, #8
 800cb98:	199b      	adds	r3, r3, r6
 800cb9a:	19db      	adds	r3, r3, r7
 800cb9c:	0019      	movs	r1, r3
 800cb9e:	2002      	movs	r0, #2
 800cba0:	f7ff fdec 	bl	800c77c <GetKeyByID>
 800cba4:	0003      	movs	r3, r0
 800cba6:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800cba8:	19ab      	adds	r3, r5, r6
 800cbaa:	19db      	adds	r3, r3, r7
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d14f      	bne.n	800cc52 <SecureElementInit+0x34e>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	785b      	ldrb	r3, [r3, #1]
 800cbb6:	001d      	movs	r5, r3
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	789b      	ldrb	r3, [r3, #2]
 800cbbc:	001e      	movs	r6, r3
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	78db      	ldrb	r3, [r3, #3]
 800cbc2:	469c      	mov	ip, r3
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	791b      	ldrb	r3, [r3, #4]
 800cbc8:	4698      	mov	r8, r3
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	795b      	ldrb	r3, [r3, #5]
 800cbce:	4699      	mov	r9, r3
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	799b      	ldrb	r3, [r3, #6]
 800cbd4:	469a      	mov	sl, r3
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	79db      	ldrb	r3, [r3, #7]
 800cbda:	469b      	mov	fp, r3
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	7a1b      	ldrb	r3, [r3, #8]
 800cbe0:	613b      	str	r3, [r7, #16]
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	7a5b      	ldrb	r3, [r3, #9]
 800cbe6:	60fb      	str	r3, [r7, #12]
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	7a9b      	ldrb	r3, [r3, #10]
 800cbec:	60bb      	str	r3, [r7, #8]
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	7adb      	ldrb	r3, [r3, #11]
 800cbf2:	607b      	str	r3, [r7, #4]
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	7b1b      	ldrb	r3, [r3, #12]
 800cbf8:	603b      	str	r3, [r7, #0]
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	7b5b      	ldrb	r3, [r3, #13]
 800cbfe:	001c      	movs	r4, r3
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	7b9b      	ldrb	r3, [r3, #14]
 800cc04:	0018      	movs	r0, r3
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	7bdb      	ldrb	r3, [r3, #15]
 800cc0a:	0019      	movs	r1, r3
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	7c1b      	ldrb	r3, [r3, #16]
 800cc10:	4a24      	ldr	r2, [pc, #144]	; (800cca4 <SecureElementInit+0x3a0>)
 800cc12:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc14:	910e      	str	r1, [sp, #56]	; 0x38
 800cc16:	900d      	str	r0, [sp, #52]	; 0x34
 800cc18:	940c      	str	r4, [sp, #48]	; 0x30
 800cc1a:	6839      	ldr	r1, [r7, #0]
 800cc1c:	910b      	str	r1, [sp, #44]	; 0x2c
 800cc1e:	6879      	ldr	r1, [r7, #4]
 800cc20:	910a      	str	r1, [sp, #40]	; 0x28
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	9109      	str	r1, [sp, #36]	; 0x24
 800cc26:	68f9      	ldr	r1, [r7, #12]
 800cc28:	9108      	str	r1, [sp, #32]
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	9307      	str	r3, [sp, #28]
 800cc2e:	465b      	mov	r3, fp
 800cc30:	9306      	str	r3, [sp, #24]
 800cc32:	4653      	mov	r3, sl
 800cc34:	9305      	str	r3, [sp, #20]
 800cc36:	464b      	mov	r3, r9
 800cc38:	9304      	str	r3, [sp, #16]
 800cc3a:	4643      	mov	r3, r8
 800cc3c:	9303      	str	r3, [sp, #12]
 800cc3e:	4663      	mov	r3, ip
 800cc40:	9302      	str	r3, [sp, #8]
 800cc42:	9601      	str	r6, [sp, #4]
 800cc44:	9500      	str	r5, [sp, #0]
 800cc46:	0013      	movs	r3, r2
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	2002      	movs	r0, #2
 800cc4e:	f00e fa9d 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d003      	beq.n	800cc60 <SecureElementInit+0x35c>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800cc58:	4b13      	ldr	r3, [pc, #76]	; (800cca8 <SecureElementInit+0x3a4>)
 800cc5a:	697a      	ldr	r2, [r7, #20]
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	e002      	b.n	800cc66 <SecureElementInit+0x362>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800cc60:	4b11      	ldr	r3, [pc, #68]	; (800cca8 <SecureElementInit+0x3a4>)
 800cc62:	4a12      	ldr	r2, [pc, #72]	; (800ccac <SecureElementInit+0x3a8>)
 800cc64:	601a      	str	r2, [r3, #0]
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 800cc66:	4b12      	ldr	r3, [pc, #72]	; (800ccb0 <SecureElementInit+0x3ac>)
 800cc68:	0018      	movs	r0, r3
 800cc6a:	f7f7 fbfa 	bl	8004462 <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800cc6e:	4b0e      	ldr	r3, [pc, #56]	; (800cca8 <SecureElementInit+0x3a4>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	0018      	movs	r0, r3
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	b009      	add	sp, #36	; 0x24
 800cc7c:	bcf0      	pop	{r4, r5, r6, r7}
 800cc7e:	46bb      	mov	fp, r7
 800cc80:	46b2      	mov	sl, r6
 800cc82:	46a9      	mov	r9, r5
 800cc84:	46a0      	mov	r8, r4
 800cc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc88:	0801ddbc 	.word	0x0801ddbc
 800cc8c:	2000008c 	.word	0x2000008c
 800cc90:	0801de68 	.word	0x0801de68
 800cc94:	0801de80 	.word	0x0801de80
 800cc98:	0801dee4 	.word	0x0801dee4
 800cc9c:	0801df48 	.word	0x0801df48
 800cca0:	0801df60 	.word	0x0801df60
 800cca4:	0801dfc4 	.word	0x0801dfc4
 800cca8:	200007b8 	.word	0x200007b8
 800ccac:	0800c7f1 	.word	0x0800c7f1
 800ccb0:	2000007c 	.word	0x2000007c

0800ccb4 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d007      	beq.n	800ccd2 <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800ccc2:	6879      	ldr	r1, [r7, #4]
 800ccc4:	4b05      	ldr	r3, [pc, #20]	; (800ccdc <SecureElementRestoreNvmCtx+0x28>)
 800ccc6:	22ba      	movs	r2, #186	; 0xba
 800ccc8:	0018      	movs	r0, r3
 800ccca:	f00b fe21 	bl	8018910 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e000      	b.n	800ccd4 <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800ccd2:	2302      	movs	r3, #2
  }
}
 800ccd4:	0018      	movs	r0, r3
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	b002      	add	sp, #8
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	2000007c 	.word	0x2000007c

0800cce0 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	22ba      	movs	r2, #186	; 0xba
 800ccec:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800ccee:	4b02      	ldr	r3, [pc, #8]	; (800ccf8 <SecureElementGetNvmCtx+0x18>)
}
 800ccf0:	0018      	movs	r0, r3
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	b002      	add	sp, #8
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	2000007c 	.word	0x2000007c

0800ccfc <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800ccfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccfe:	b089      	sub	sp, #36	; 0x24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	0002      	movs	r2, r0
 800cd04:	6039      	str	r1, [r7, #0]
 800cd06:	1dfb      	adds	r3, r7, #7
 800cd08:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cd10:	2302      	movs	r3, #2
 800cd12:	e064      	b.n	800cdde <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cd14:	231f      	movs	r3, #31
 800cd16:	18fb      	adds	r3, r7, r3
 800cd18:	2200      	movs	r2, #0
 800cd1a:	701a      	strb	r2, [r3, #0]
 800cd1c:	e059      	b.n	800cdd2 <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800cd1e:	231f      	movs	r3, #31
 800cd20:	18fb      	adds	r3, r7, r3
 800cd22:	781a      	ldrb	r2, [r3, #0]
 800cd24:	4930      	ldr	r1, [pc, #192]	; (800cde8 <SecureElementSetKey+0xec>)
 800cd26:	0013      	movs	r3, r2
 800cd28:	011b      	lsls	r3, r3, #4
 800cd2a:	189b      	adds	r3, r3, r2
 800cd2c:	18cb      	adds	r3, r1, r3
 800cd2e:	3310      	adds	r3, #16
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	1dfa      	adds	r2, r7, #7
 800cd34:	7812      	ldrb	r2, [r2, #0]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d145      	bne.n	800cdc6 <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800cd3a:	1dfb      	adds	r3, r7, #7
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b80      	cmp	r3, #128	; 0x80
 800cd40:	d12c      	bne.n	800cd9c <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cd42:	251e      	movs	r5, #30
 800cd44:	197b      	adds	r3, r7, r5
 800cd46:	2206      	movs	r2, #6
 800cd48:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800cd4a:	260c      	movs	r6, #12
 800cd4c:	19bb      	adds	r3, r7, r6
 800cd4e:	2200      	movs	r2, #0
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	3304      	adds	r3, #4
 800cd54:	220c      	movs	r2, #12
 800cd56:	2100      	movs	r1, #0
 800cd58:	0018      	movs	r0, r3
 800cd5a:	f010 faa4 	bl	801d2a6 <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800cd5e:	197c      	adds	r4, r7, r5
 800cd60:	19bb      	adds	r3, r7, r6
 800cd62:	6838      	ldr	r0, [r7, #0]
 800cd64:	227f      	movs	r2, #127	; 0x7f
 800cd66:	2110      	movs	r1, #16
 800cd68:	f000 f8a5 	bl	800ceb6 <SecureElementAesEncrypt>
 800cd6c:	0003      	movs	r3, r0
 800cd6e:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800cd70:	231f      	movs	r3, #31
 800cd72:	18fb      	adds	r3, r7, r3
 800cd74:	781a      	ldrb	r2, [r3, #0]
 800cd76:	0013      	movs	r3, r2
 800cd78:	011b      	lsls	r3, r3, #4
 800cd7a:	189b      	adds	r3, r3, r2
 800cd7c:	3310      	adds	r3, #16
 800cd7e:	001a      	movs	r2, r3
 800cd80:	4b19      	ldr	r3, [pc, #100]	; (800cde8 <SecureElementSetKey+0xec>)
 800cd82:	18d3      	adds	r3, r2, r3
 800cd84:	3301      	adds	r3, #1
 800cd86:	19b9      	adds	r1, r7, r6
 800cd88:	2210      	movs	r2, #16
 800cd8a:	0018      	movs	r0, r3
 800cd8c:	f00b fdc0 	bl	8018910 <memcpy1>
        SeNvmCtxChanged();
 800cd90:	4b16      	ldr	r3, [pc, #88]	; (800cdec <SecureElementSetKey+0xf0>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4798      	blx	r3

        return retval;
 800cd96:	197b      	adds	r3, r7, r5
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	e020      	b.n	800cdde <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800cd9c:	231f      	movs	r3, #31
 800cd9e:	18fb      	adds	r3, r7, r3
 800cda0:	781a      	ldrb	r2, [r3, #0]
 800cda2:	0013      	movs	r3, r2
 800cda4:	011b      	lsls	r3, r3, #4
 800cda6:	189b      	adds	r3, r3, r2
 800cda8:	3310      	adds	r3, #16
 800cdaa:	001a      	movs	r2, r3
 800cdac:	4b0e      	ldr	r3, [pc, #56]	; (800cde8 <SecureElementSetKey+0xec>)
 800cdae:	18d3      	adds	r3, r2, r3
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	6839      	ldr	r1, [r7, #0]
 800cdb4:	2210      	movs	r2, #16
 800cdb6:	0018      	movs	r0, r3
 800cdb8:	f00b fdaa 	bl	8018910 <memcpy1>
        SeNvmCtxChanged();
 800cdbc:	4b0b      	ldr	r3, [pc, #44]	; (800cdec <SecureElementSetKey+0xf0>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	e00b      	b.n	800cdde <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800cdc6:	211f      	movs	r1, #31
 800cdc8:	187b      	adds	r3, r7, r1
 800cdca:	781a      	ldrb	r2, [r3, #0]
 800cdcc:	187b      	adds	r3, r7, r1
 800cdce:	3201      	adds	r2, #1
 800cdd0:	701a      	strb	r2, [r3, #0]
 800cdd2:	231f      	movs	r3, #31
 800cdd4:	18fb      	adds	r3, r7, r3
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b09      	cmp	r3, #9
 800cdda:	d9a0      	bls.n	800cd1e <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cddc:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800cdde:	0018      	movs	r0, r3
 800cde0:	46bd      	mov	sp, r7
 800cde2:	b009      	add	sp, #36	; 0x24
 800cde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cde6:	46c0      	nop			; (mov r8, r8)
 800cde8:	2000007c 	.word	0x2000007c
 800cdec:	200007b8 	.word	0x200007b8

0800cdf0 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800cdf0:	b590      	push	{r4, r7, lr}
 800cdf2:	b087      	sub	sp, #28
 800cdf4:	af02      	add	r7, sp, #8
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	0019      	movs	r1, r3
 800cdfc:	1dbb      	adds	r3, r7, #6
 800cdfe:	801a      	strh	r2, [r3, #0]
 800ce00:	1d7b      	adds	r3, r7, #5
 800ce02:	1c0a      	adds	r2, r1, #0
 800ce04:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800ce06:	1d7b      	adds	r3, r7, #5
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	2b7e      	cmp	r3, #126	; 0x7e
 800ce0c:	d901      	bls.n	800ce12 <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	e00b      	b.n	800ce2a <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800ce12:	1d7b      	adds	r3, r7, #5
 800ce14:	781c      	ldrb	r4, [r3, #0]
 800ce16:	1dbb      	adds	r3, r7, #6
 800ce18:	881a      	ldrh	r2, [r3, #0]
 800ce1a:	68b9      	ldr	r1, [r7, #8]
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	6a3b      	ldr	r3, [r7, #32]
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	0023      	movs	r3, r4
 800ce24:	f7ff fcea 	bl	800c7fc <ComputeCmac>
 800ce28:	0003      	movs	r3, r0
}
 800ce2a:	0018      	movs	r0, r3
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	b005      	add	sp, #20
 800ce30:	bd90      	pop	{r4, r7, pc}

0800ce32 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800ce32:	b5b0      	push	{r4, r5, r7, lr}
 800ce34:	b088      	sub	sp, #32
 800ce36:	af02      	add	r7, sp, #8
 800ce38:	60f8      	str	r0, [r7, #12]
 800ce3a:	0008      	movs	r0, r1
 800ce3c:	607a      	str	r2, [r7, #4]
 800ce3e:	0019      	movs	r1, r3
 800ce40:	230a      	movs	r3, #10
 800ce42:	18fb      	adds	r3, r7, r3
 800ce44:	1c02      	adds	r2, r0, #0
 800ce46:	801a      	strh	r2, [r3, #0]
 800ce48:	2309      	movs	r3, #9
 800ce4a:	18fb      	adds	r3, r7, r3
 800ce4c:	1c0a      	adds	r2, r1, #0
 800ce4e:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ce50:	2317      	movs	r3, #23
 800ce52:	18fb      	adds	r3, r7, r3
 800ce54:	2206      	movs	r2, #6
 800ce56:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d101      	bne.n	800ce62 <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800ce5e:	2302      	movs	r3, #2
 800ce60:	e025      	b.n	800ceae <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800ce66:	2517      	movs	r5, #23
 800ce68:	197c      	adds	r4, r7, r5
 800ce6a:	2309      	movs	r3, #9
 800ce6c:	18fb      	adds	r3, r7, r3
 800ce6e:	7818      	ldrb	r0, [r3, #0]
 800ce70:	230a      	movs	r3, #10
 800ce72:	18fb      	adds	r3, r7, r3
 800ce74:	881a      	ldrh	r2, [r3, #0]
 800ce76:	68f9      	ldr	r1, [r7, #12]
 800ce78:	2310      	movs	r3, #16
 800ce7a:	18fb      	adds	r3, r7, r3
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	0003      	movs	r3, r0
 800ce80:	2000      	movs	r0, #0
 800ce82:	f7ff fcbb 	bl	800c7fc <ComputeCmac>
 800ce86:	0003      	movs	r3, r0
 800ce88:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800ce8a:	197b      	adds	r3, r7, r5
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d002      	beq.n	800ce98 <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800ce92:	197b      	adds	r3, r7, r5
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	e00a      	b.n	800ceae <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d003      	beq.n	800cea8 <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800cea0:	2317      	movs	r3, #23
 800cea2:	18fb      	adds	r3, r7, r3
 800cea4:	2201      	movs	r2, #1
 800cea6:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800cea8:	2317      	movs	r3, #23
 800ceaa:	18fb      	adds	r3, r7, r3
 800ceac:	781b      	ldrb	r3, [r3, #0]
}
 800ceae:	0018      	movs	r0, r3
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	b006      	add	sp, #24
 800ceb4:	bdb0      	pop	{r4, r5, r7, pc}

0800ceb6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800ceb6:	b5b0      	push	{r4, r5, r7, lr}
 800ceb8:	b0c2      	sub	sp, #264	; 0x108
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	60f8      	str	r0, [r7, #12]
 800cebe:	0008      	movs	r0, r1
 800cec0:	0011      	movs	r1, r2
 800cec2:	607b      	str	r3, [r7, #4]
 800cec4:	230a      	movs	r3, #10
 800cec6:	18fb      	adds	r3, r7, r3
 800cec8:	1c02      	adds	r2, r0, #0
 800ceca:	801a      	strh	r2, [r3, #0]
 800cecc:	2309      	movs	r3, #9
 800cece:	18fb      	adds	r3, r7, r3
 800ced0:	1c0a      	adds	r2, r1, #0
 800ced2:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ced4:	1dfb      	adds	r3, r7, #7
 800ced6:	33ff      	adds	r3, #255	; 0xff
 800ced8:	2206      	movs	r2, #6
 800ceda:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d002      	beq.n	800cee8 <SecureElementAesEncrypt+0x32>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d101      	bne.n	800ceec <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cee8:	2302      	movs	r3, #2
 800ceea:	e051      	b.n	800cf90 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800ceec:	230a      	movs	r3, #10
 800ceee:	18fb      	adds	r3, r7, r3
 800cef0:	881b      	ldrh	r3, [r3, #0]
 800cef2:	220f      	movs	r2, #15
 800cef4:	4013      	ands	r3, r2
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800cefc:	2305      	movs	r3, #5
 800cefe:	e047      	b.n	800cf90 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800cf00:	2514      	movs	r5, #20
 800cf02:	197b      	adds	r3, r7, r5
 800cf04:	22f0      	movs	r2, #240	; 0xf0
 800cf06:	2100      	movs	r1, #0
 800cf08:	0018      	movs	r0, r3
 800cf0a:	f00b fd3f 	bl	801898c <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800cf0e:	1dfc      	adds	r4, r7, #7
 800cf10:	34ff      	adds	r4, #255	; 0xff
 800cf12:	2310      	movs	r3, #16
 800cf14:	18fa      	adds	r2, r7, r3
 800cf16:	2309      	movs	r3, #9
 800cf18:	18fb      	adds	r3, r7, r3
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	0011      	movs	r1, r2
 800cf1e:	0018      	movs	r0, r3
 800cf20:	f7ff fc2c 	bl	800c77c <GetKeyByID>
 800cf24:	0003      	movs	r3, r0
 800cf26:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800cf28:	1dfb      	adds	r3, r7, #7
 800cf2a:	33ff      	adds	r3, #255	; 0xff
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d12b      	bne.n	800cf8a <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	3301      	adds	r3, #1
 800cf36:	197a      	adds	r2, r7, r5
 800cf38:	2110      	movs	r1, #16
 800cf3a:	0018      	movs	r0, r3
 800cf3c:	f7ff fa98 	bl	800c470 <lorawan_aes_set_key>

    uint8_t block = 0;
 800cf40:	2308      	movs	r3, #8
 800cf42:	33ff      	adds	r3, #255	; 0xff
 800cf44:	18fb      	adds	r3, r7, r3
 800cf46:	2200      	movs	r2, #0
 800cf48:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800cf4a:	e019      	b.n	800cf80 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800cf4c:	2408      	movs	r4, #8
 800cf4e:	34ff      	adds	r4, #255	; 0xff
 800cf50:	193b      	adds	r3, r7, r4
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	18d0      	adds	r0, r2, r3
 800cf58:	193b      	adds	r3, r7, r4
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	18d3      	adds	r3, r2, r3
 800cf60:	2214      	movs	r2, #20
 800cf62:	18ba      	adds	r2, r7, r2
 800cf64:	0019      	movs	r1, r3
 800cf66:	f7ff fbbf 	bl	800c6e8 <lorawan_aes_encrypt>
      block = block + 16;
 800cf6a:	193b      	adds	r3, r7, r4
 800cf6c:	193a      	adds	r2, r7, r4
 800cf6e:	7812      	ldrb	r2, [r2, #0]
 800cf70:	3210      	adds	r2, #16
 800cf72:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800cf74:	220a      	movs	r2, #10
 800cf76:	18bb      	adds	r3, r7, r2
 800cf78:	18ba      	adds	r2, r7, r2
 800cf7a:	8812      	ldrh	r2, [r2, #0]
 800cf7c:	3a10      	subs	r2, #16
 800cf7e:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800cf80:	230a      	movs	r3, #10
 800cf82:	18fb      	adds	r3, r7, r3
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d1e0      	bne.n	800cf4c <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800cf8a:	1dfb      	adds	r3, r7, #7
 800cf8c:	33ff      	adds	r3, #255	; 0xff
 800cf8e:	781b      	ldrb	r3, [r3, #0]
}
 800cf90:	0018      	movs	r0, r3
 800cf92:	46bd      	mov	sp, r7
 800cf94:	b042      	add	sp, #264	; 0x108
 800cf96:	bdb0      	pop	{r4, r5, r7, pc}

0800cf98 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800cf98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf9a:	b08b      	sub	sp, #44	; 0x2c
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	0019      	movs	r1, r3
 800cfa4:	1dfb      	adds	r3, r7, #7
 800cfa6:	701a      	strb	r2, [r3, #0]
 800cfa8:	1dbb      	adds	r3, r7, #6
 800cfaa:	1c0a      	adds	r2, r1, #0
 800cfac:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cfae:	2327      	movs	r3, #39	; 0x27
 800cfb0:	18fb      	adds	r3, r7, r3
 800cfb2:	2206      	movs	r2, #6
 800cfb4:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d101      	bne.n	800cfc0 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800cfbc:	2302      	movs	r3, #2
 800cfbe:	e03c      	b.n	800d03a <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800cfc0:	1dbb      	adds	r3, r7, #6
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	2b7f      	cmp	r3, #127	; 0x7f
 800cfc6:	d105      	bne.n	800cfd4 <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800cfc8:	1dfb      	adds	r3, r7, #7
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	2b04      	cmp	r3, #4
 800cfce:	d001      	beq.n	800cfd4 <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	e032      	b.n	800d03a <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800cfd4:	2614      	movs	r6, #20
 800cfd6:	19bb      	adds	r3, r7, r6
 800cfd8:	2200      	movs	r2, #0
 800cfda:	601a      	str	r2, [r3, #0]
 800cfdc:	3304      	adds	r3, #4
 800cfde:	220c      	movs	r2, #12
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	0018      	movs	r0, r3
 800cfe4:	f010 f95f 	bl	801d2a6 <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800cfe8:	2527      	movs	r5, #39	; 0x27
 800cfea:	197c      	adds	r4, r7, r5
 800cfec:	19b9      	adds	r1, r7, r6
 800cfee:	1dfb      	adds	r3, r7, #7
 800cff0:	781a      	ldrb	r2, [r3, #0]
 800cff2:	68b8      	ldr	r0, [r7, #8]
 800cff4:	000b      	movs	r3, r1
 800cff6:	2110      	movs	r1, #16
 800cff8:	f7ff ff5d 	bl	800ceb6 <SecureElementAesEncrypt>
 800cffc:	0003      	movs	r3, r0
 800cffe:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800d000:	197b      	adds	r3, r7, r5
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d002      	beq.n	800d00e <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800d008:	197b      	adds	r3, r7, r5
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	e015      	b.n	800d03a <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800d00e:	2527      	movs	r5, #39	; 0x27
 800d010:	197c      	adds	r4, r7, r5
 800d012:	2314      	movs	r3, #20
 800d014:	18fa      	adds	r2, r7, r3
 800d016:	1dbb      	adds	r3, r7, #6
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	0011      	movs	r1, r2
 800d01c:	0018      	movs	r0, r3
 800d01e:	f7ff fe6d 	bl	800ccfc <SecureElementSetKey>
 800d022:	0003      	movs	r3, r0
 800d024:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800d026:	197b      	adds	r3, r7, r5
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d002      	beq.n	800d034 <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800d02e:	197b      	adds	r3, r7, r5
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	e002      	b.n	800d03a <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d034:	2327      	movs	r3, #39	; 0x27
 800d036:	18fb      	adds	r3, r7, r3
 800d038:	781b      	ldrb	r3, [r3, #0]
}
 800d03a:	0018      	movs	r0, r3
 800d03c:	46bd      	mov	sp, r7
 800d03e:	b00b      	add	sp, #44	; 0x2c
 800d040:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d042 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800d042:	b5b0      	push	{r4, r5, r7, lr}
 800d044:	b086      	sub	sp, #24
 800d046:	af00      	add	r7, sp, #0
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	0011      	movs	r1, r2
 800d04c:	607b      	str	r3, [r7, #4]
 800d04e:	230f      	movs	r3, #15
 800d050:	18fb      	adds	r3, r7, r3
 800d052:	1c02      	adds	r2, r0, #0
 800d054:	701a      	strb	r2, [r3, #0]
 800d056:	230c      	movs	r3, #12
 800d058:	18fb      	adds	r3, r7, r3
 800d05a:	1c0a      	adds	r2, r1, #0
 800d05c:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d005      	beq.n	800d070 <SecureElementProcessJoinAccept+0x2e>
 800d064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <SecureElementProcessJoinAccept+0x2e>
 800d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d101      	bne.n	800d074 <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d070:	2302      	movs	r3, #2
 800d072:	e069      	b.n	800d148 <SecureElementProcessJoinAccept+0x106>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800d074:	2328      	movs	r3, #40	; 0x28
 800d076:	18fb      	adds	r3, r7, r3
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	2b21      	cmp	r3, #33	; 0x21
 800d07c:	d901      	bls.n	800d082 <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d07e:	2305      	movs	r3, #5
 800d080:	e062      	b.n	800d148 <SecureElementProcessJoinAccept+0x106>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800d082:	2517      	movs	r5, #23
 800d084:	197b      	adds	r3, r7, r5
 800d086:	2201      	movs	r2, #1
 800d088:	701a      	strb	r2, [r3, #0]
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800d08a:	2428      	movs	r4, #40	; 0x28
 800d08c:	193b      	adds	r3, r7, r4
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	b29a      	uxth	r2, r3
 800d092:	6879      	ldr	r1, [r7, #4]
 800d094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d096:	0018      	movs	r0, r3
 800d098:	f00b fc3a 	bl	8018910 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	1c58      	adds	r0, r3, #1
 800d0a0:	193b      	adds	r3, r7, r4
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	b299      	uxth	r1, r3
 800d0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ac:	1c5c      	adds	r4, r3, #1
 800d0ae:	197b      	adds	r3, r7, r5
 800d0b0:	781a      	ldrb	r2, [r3, #0]
 800d0b2:	0023      	movs	r3, r4
 800d0b4:	f7ff feff 	bl	800ceb6 <SecureElementAesEncrypt>
 800d0b8:	1e03      	subs	r3, r0, #0
 800d0ba:	d001      	beq.n	800d0c0 <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800d0bc:	2307      	movs	r3, #7
 800d0be:	e043      	b.n	800d148 <SecureElementProcessJoinAccept+0x106>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800d0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c2:	330b      	adds	r3, #11
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	09db      	lsrs	r3, r3, #7
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	613b      	str	r3, [r7, #16]

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800d0d2:	2128      	movs	r1, #40	; 0x28
 800d0d4:	187b      	adds	r3, r7, r1
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	3b04      	subs	r3, #4
 800d0da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0dc:	18d3      	adds	r3, r2, r3
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800d0e2:	187b      	adds	r3, r7, r1
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	3b03      	subs	r3, #3
 800d0e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0ea:	18d3      	adds	r3, r2, r3
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	021b      	lsls	r3, r3, #8
 800d0f0:	693a      	ldr	r2, [r7, #16]
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800d0f6:	187b      	adds	r3, r7, r1
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	3b02      	subs	r3, #2
 800d0fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0fe:	18d3      	adds	r3, r2, r3
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	041b      	lsls	r3, r3, #16
 800d104:	693a      	ldr	r2, [r7, #16]
 800d106:	4313      	orrs	r3, r2
 800d108:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800d10a:	187b      	adds	r3, r7, r1
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	3b01      	subs	r3, #1
 800d110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d112:	18d3      	adds	r3, r2, r3
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	061b      	lsls	r3, r3, #24
 800d118:	693a      	ldr	r2, [r7, #16]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	613b      	str	r3, [r7, #16]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800d11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10d      	bne.n	800d142 <SecureElementProcessJoinAccept+0x100>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800d126:	187b      	adds	r3, r7, r1
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	3b04      	subs	r3, #4
 800d12e:	b299      	uxth	r1, r3
 800d130:	693a      	ldr	r2, [r7, #16]
 800d132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d134:	2301      	movs	r3, #1
 800d136:	f7ff fe7c 	bl	800ce32 <SecureElementVerifyAesCmac>
 800d13a:	1e03      	subs	r3, r0, #0
 800d13c:	d003      	beq.n	800d146 <SecureElementProcessJoinAccept+0x104>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800d13e:	2301      	movs	r3, #1
 800d140:	e002      	b.n	800d148 <SecureElementProcessJoinAccept+0x106>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800d142:	2304      	movs	r3, #4
 800d144:	e000      	b.n	800d148 <SecureElementProcessJoinAccept+0x106>
  }

  return SECURE_ELEMENT_SUCCESS;
 800d146:	2300      	movs	r3, #0
}
 800d148:	0018      	movs	r0, r3
 800d14a:	46bd      	mov	sp, r7
 800d14c:	b006      	add	sp, #24
 800d14e:	bdb0      	pop	{r4, r5, r7, pc}

0800d150 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d15e:	2302      	movs	r3, #2
 800d160:	e006      	b.n	800d170 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800d162:	4b05      	ldr	r3, [pc, #20]	; (800d178 <SecureElementRandomNumber+0x28>)
 800d164:	695b      	ldr	r3, [r3, #20]
 800d166:	4798      	blx	r3
 800d168:	0002      	movs	r2, r0
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	0018      	movs	r0, r3
 800d172:	46bd      	mov	sp, r7
 800d174:	b002      	add	sp, #8
 800d176:	bd80      	pop	{r7, pc}
 800d178:	0801e62c 	.word	0x0801e62c

0800d17c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d101      	bne.n	800d18e <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d18a:	2302      	movs	r3, #2
 800d18c:	e009      	b.n	800d1a2 <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800d18e:	6879      	ldr	r1, [r7, #4]
 800d190:	4b06      	ldr	r3, [pc, #24]	; (800d1ac <SecureElementSetDevEui+0x30>)
 800d192:	2208      	movs	r2, #8
 800d194:	0018      	movs	r0, r3
 800d196:	f00b fbbb 	bl	8018910 <memcpy1>
  SeNvmCtxChanged();
 800d19a:	4b05      	ldr	r3, [pc, #20]	; (800d1b0 <SecureElementSetDevEui+0x34>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	0018      	movs	r0, r3
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	b002      	add	sp, #8
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	46c0      	nop			; (mov r8, r8)
 800d1ac:	2000007c 	.word	0x2000007c
 800d1b0:	200007b8 	.word	0x200007b8

0800d1b4 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800d1b8:	4b01      	ldr	r3, [pc, #4]	; (800d1c0 <SecureElementGetDevEui+0xc>)
}
 800d1ba:	0018      	movs	r0, r3
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	2000007c 	.word	0x2000007c

0800d1c4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d101      	bne.n	800d1d6 <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	e009      	b.n	800d1ea <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800d1d6:	6879      	ldr	r1, [r7, #4]
 800d1d8:	4b06      	ldr	r3, [pc, #24]	; (800d1f4 <SecureElementSetJoinEui+0x30>)
 800d1da:	2208      	movs	r2, #8
 800d1dc:	0018      	movs	r0, r3
 800d1de:	f00b fb97 	bl	8018910 <memcpy1>
  SeNvmCtxChanged();
 800d1e2:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <SecureElementSetJoinEui+0x34>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	0018      	movs	r0, r3
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	b002      	add	sp, #8
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	46c0      	nop			; (mov r8, r8)
 800d1f4:	20000084 	.word	0x20000084
 800d1f8:	200007b8 	.word	0x200007b8

0800d1fc <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800d200:	4b01      	ldr	r3, [pc, #4]	; (800d208 <SecureElementGetJoinEui+0xc>)
}
 800d202:	0018      	movs	r0, r3
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	20000084 	.word	0x20000084

0800d20c <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800d214:	6879      	ldr	r1, [r7, #4]
 800d216:	4b17      	ldr	r3, [pc, #92]	; (800d274 <LmHandlerInit+0x68>)
 800d218:	2220      	movs	r2, #32
 800d21a:	0018      	movs	r0, r3
 800d21c:	f00e fb36 	bl	801b88c <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d220:	4b15      	ldr	r3, [pc, #84]	; (800d278 <LmHandlerInit+0x6c>)
 800d222:	4a16      	ldr	r2, [pc, #88]	; (800d27c <LmHandlerInit+0x70>)
 800d224:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d226:	4b14      	ldr	r3, [pc, #80]	; (800d278 <LmHandlerInit+0x6c>)
 800d228:	4a15      	ldr	r2, [pc, #84]	; (800d280 <LmHandlerInit+0x74>)
 800d22a:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d22c:	4b12      	ldr	r3, [pc, #72]	; (800d278 <LmHandlerInit+0x6c>)
 800d22e:	4a15      	ldr	r2, [pc, #84]	; (800d284 <LmHandlerInit+0x78>)
 800d230:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d232:	4b11      	ldr	r3, [pc, #68]	; (800d278 <LmHandlerInit+0x6c>)
 800d234:	4a14      	ldr	r2, [pc, #80]	; (800d288 <LmHandlerInit+0x7c>)
 800d236:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800d238:	4b0e      	ldr	r3, [pc, #56]	; (800d274 <LmHandlerInit+0x68>)
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	4b13      	ldr	r3, [pc, #76]	; (800d28c <LmHandlerInit+0x80>)
 800d23e:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800d240:	4b0c      	ldr	r3, [pc, #48]	; (800d274 <LmHandlerInit+0x68>)
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	4b11      	ldr	r3, [pc, #68]	; (800d28c <LmHandlerInit+0x80>)
 800d246:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800d248:	4b10      	ldr	r3, [pc, #64]	; (800d28c <LmHandlerInit+0x80>)
 800d24a:	4a11      	ldr	r2, [pc, #68]	; (800d290 <LmHandlerInit+0x84>)
 800d24c:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800d24e:	4b09      	ldr	r3, [pc, #36]	; (800d274 <LmHandlerInit+0x68>)
 800d250:	689a      	ldr	r2, [r3, #8]
 800d252:	4b0e      	ldr	r3, [pc, #56]	; (800d28c <LmHandlerInit+0x80>)
 800d254:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d256:	4b0f      	ldr	r3, [pc, #60]	; (800d294 <LmHandlerInit+0x88>)
 800d258:	0019      	movs	r1, r3
 800d25a:	2000      	movs	r0, #0
 800d25c:	f000 fb56 	bl	800d90c <LmHandlerPackageRegister>
 800d260:	1e03      	subs	r3, r0, #0
 800d262:	d002      	beq.n	800d26a <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	425b      	negs	r3, r3
 800d268:	e000      	b.n	800d26c <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	0018      	movs	r0, r3
 800d26e:	46bd      	mov	sp, r7
 800d270:	b002      	add	sp, #8
 800d272:	bd80      	pop	{r7, pc}
 800d274:	200009dc 	.word	0x200009dc
 800d278:	200009fc 	.word	0x200009fc
 800d27c:	0800da79 	.word	0x0800da79
 800d280:	0800dae5 	.word	0x0800dae5
 800d284:	0800dbd1 	.word	0x0800dbd1
 800d288:	0800dc79 	.word	0x0800dc79
 800d28c:	20000a0c 	.word	0x20000a0c
 800d290:	0800e417 	.word	0x0800e417
 800d294:	20000150 	.word	0x20000150

0800d298 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800d298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29a:	46ce      	mov	lr, r9
 800d29c:	4647      	mov	r7, r8
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b099      	sub	sp, #100	; 0x64
 800d2a2:	af08      	add	r7, sp, #32
 800d2a4:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d2a6:	6879      	ldr	r1, [r7, #4]
 800d2a8:	4b6b      	ldr	r3, [pc, #428]	; (800d458 <LmHandlerConfigure+0x1c0>)
 800d2aa:	2206      	movs	r2, #6
 800d2ac:	0018      	movs	r0, r3
 800d2ae:	f00e faed 	bl	801b88c <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800d2b2:	f7f5 ff31 	bl	8003118 <LoraInfo_GetPtr>
 800d2b6:	0003      	movs	r3, r0
 800d2b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d2ba:	4b67      	ldr	r3, [pc, #412]	; (800d458 <LmHandlerConfigure+0x1c0>)
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	001a      	movs	r2, r3
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	4093      	lsls	r3, r2
 800d2c4:	001a      	movs	r2, r3
 800d2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	4013      	ands	r3, r2
 800d2cc:	d00b      	beq.n	800d2e6 <LmHandlerConfigure+0x4e>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d2ce:	4b62      	ldr	r3, [pc, #392]	; (800d458 <LmHandlerConfigure+0x1c0>)
 800d2d0:	781a      	ldrb	r2, [r3, #0]
 800d2d2:	4962      	ldr	r1, [pc, #392]	; (800d45c <LmHandlerConfigure+0x1c4>)
 800d2d4:	4b62      	ldr	r3, [pc, #392]	; (800d460 <LmHandlerConfigure+0x1c8>)
 800d2d6:	0018      	movs	r0, r3
 800d2d8:	f004 ffc0 	bl	801225c <LoRaMacInitialization>
 800d2dc:	1e03      	subs	r3, r0, #0
 800d2de:	d009      	beq.n	800d2f4 <LmHandlerConfigure+0x5c>
    {
      return LORAMAC_HANDLER_ERROR;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	425b      	negs	r3, r3
 800d2e4:	e0b1      	b.n	800d44a <LmHandlerConfigure+0x1b2>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d2e6:	4b5f      	ldr	r3, [pc, #380]	; (800d464 <LmHandlerConfigure+0x1cc>)
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	f00d ff4d 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800d2f2:	e7fe      	b.n	800d2f2 <LmHandlerConfigure+0x5a>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800d2f4:	f001 f89f 	bl	800e436 <NvmCtxMgmtRestore>
 800d2f8:	1e03      	subs	r3, r0, #0
 800d2fa:	d103      	bne.n	800d304 <LmHandlerConfigure+0x6c>
  {
    CtxRestoreDone = true;
 800d2fc:	4b5a      	ldr	r3, [pc, #360]	; (800d468 <LmHandlerConfigure+0x1d0>)
 800d2fe:	2201      	movs	r2, #1
 800d300:	701a      	strb	r2, [r3, #0]
 800d302:	e021      	b.n	800d348 <LmHandlerConfigure+0xb0>
  }
  else
  {
    CtxRestoreDone = false;
 800d304:	4b58      	ldr	r3, [pc, #352]	; (800d468 <LmHandlerConfigure+0x1d0>)
 800d306:	2200      	movs	r2, #0
 800d308:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800d30a:	2418      	movs	r4, #24
 800d30c:	193b      	adds	r3, r7, r4
 800d30e:	2202      	movs	r2, #2
 800d310:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800d312:	193b      	adds	r3, r7, r4
 800d314:	0018      	movs	r0, r3
 800d316:	f005 fc03 	bl	8012b20 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800d31a:	193b      	adds	r3, r7, r4
 800d31c:	6859      	ldr	r1, [r3, #4]
 800d31e:	4b53      	ldr	r3, [pc, #332]	; (800d46c <LmHandlerConfigure+0x1d4>)
 800d320:	2208      	movs	r2, #8
 800d322:	0018      	movs	r0, r3
 800d324:	f00b faf4 	bl	8018910 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d328:	0021      	movs	r1, r4
 800d32a:	187b      	adds	r3, r7, r1
 800d32c:	2203      	movs	r2, #3
 800d32e:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800d330:	000c      	movs	r4, r1
 800d332:	187b      	adds	r3, r7, r1
 800d334:	0018      	movs	r0, r3
 800d336:	f005 fbf3 	bl	8012b20 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800d33a:	193b      	adds	r3, r7, r4
 800d33c:	6859      	ldr	r1, [r3, #4]
 800d33e:	4b4c      	ldr	r3, [pc, #304]	; (800d470 <LmHandlerConfigure+0x1d8>)
 800d340:	2208      	movs	r2, #8
 800d342:	0018      	movs	r0, r3
 800d344:	f00b fae4 	bl	8018910 <memcpy1>
  }
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 800d348:	4b48      	ldr	r3, [pc, #288]	; (800d46c <LmHandlerConfigure+0x1d4>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	001a      	movs	r2, r3
 800d34e:	4b47      	ldr	r3, [pc, #284]	; (800d46c <LmHandlerConfigure+0x1d4>)
 800d350:	785b      	ldrb	r3, [r3, #1]
 800d352:	0019      	movs	r1, r3
 800d354:	4b45      	ldr	r3, [pc, #276]	; (800d46c <LmHandlerConfigure+0x1d4>)
 800d356:	789b      	ldrb	r3, [r3, #2]
 800d358:	0018      	movs	r0, r3
 800d35a:	4b44      	ldr	r3, [pc, #272]	; (800d46c <LmHandlerConfigure+0x1d4>)
 800d35c:	78db      	ldrb	r3, [r3, #3]
 800d35e:	001c      	movs	r4, r3
 800d360:	4b42      	ldr	r3, [pc, #264]	; (800d46c <LmHandlerConfigure+0x1d4>)
 800d362:	791b      	ldrb	r3, [r3, #4]
 800d364:	001d      	movs	r5, r3
 800d366:	4b41      	ldr	r3, [pc, #260]	; (800d46c <LmHandlerConfigure+0x1d4>)
 800d368:	795b      	ldrb	r3, [r3, #5]
 800d36a:	001e      	movs	r6, r3
 800d36c:	4b3f      	ldr	r3, [pc, #252]	; (800d46c <LmHandlerConfigure+0x1d4>)
 800d36e:	799b      	ldrb	r3, [r3, #6]
 800d370:	469c      	mov	ip, r3
 800d372:	4b3e      	ldr	r3, [pc, #248]	; (800d46c <LmHandlerConfigure+0x1d4>)
 800d374:	79db      	ldrb	r3, [r3, #7]
 800d376:	4698      	mov	r8, r3
 800d378:	4b3e      	ldr	r3, [pc, #248]	; (800d474 <LmHandlerConfigure+0x1dc>)
 800d37a:	4699      	mov	r9, r3
 800d37c:	4643      	mov	r3, r8
 800d37e:	9307      	str	r3, [sp, #28]
 800d380:	4663      	mov	r3, ip
 800d382:	9306      	str	r3, [sp, #24]
 800d384:	9605      	str	r6, [sp, #20]
 800d386:	9504      	str	r5, [sp, #16]
 800d388:	9403      	str	r4, [sp, #12]
 800d38a:	9002      	str	r0, [sp, #8]
 800d38c:	9101      	str	r1, [sp, #4]
 800d38e:	9200      	str	r2, [sp, #0]
 800d390:	464b      	mov	r3, r9
 800d392:	2200      	movs	r2, #0
 800d394:	2100      	movs	r1, #0
 800d396:	2002      	movs	r0, #2
 800d398:	f00d fef8 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
         HEX8(CommissioningParams.DevEui));

  MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800d39c:	4b33      	ldr	r3, [pc, #204]	; (800d46c <LmHandlerConfigure+0x1d4>)
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	4a35      	ldr	r2, [pc, #212]	; (800d478 <LmHandlerConfigure+0x1e0>)
 800d3a2:	9300      	str	r3, [sp, #0]
 800d3a4:	0013      	movs	r3, r2
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	2002      	movs	r0, #2
 800d3ac:	f00d feee 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800d3b0:	2118      	movs	r1, #24
 800d3b2:	187b      	adds	r3, r7, r1
 800d3b4:	220f      	movs	r2, #15
 800d3b6:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d3b8:	187b      	adds	r3, r7, r1
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d3be:	000c      	movs	r4, r1
 800d3c0:	187b      	adds	r3, r7, r1
 800d3c2:	0018      	movs	r0, r3
 800d3c4:	f005 fd0a 	bl	8012ddc <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800d3c8:	0021      	movs	r1, r4
 800d3ca:	187b      	adds	r3, r7, r1
 800d3cc:	2210      	movs	r2, #16
 800d3ce:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d3d0:	187b      	adds	r3, r7, r1
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d3d6:	000c      	movs	r4, r1
 800d3d8:	187b      	adds	r3, r7, r1
 800d3da:	0018      	movs	r0, r3
 800d3dc:	f005 fcfe 	bl	8012ddc <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800d3e0:	0021      	movs	r1, r4
 800d3e2:	187b      	adds	r3, r7, r1
 800d3e4:	2204      	movs	r2, #4
 800d3e6:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d3e8:	4b1b      	ldr	r3, [pc, #108]	; (800d458 <LmHandlerConfigure+0x1c0>)
 800d3ea:	789a      	ldrb	r2, [r3, #2]
 800d3ec:	187b      	adds	r3, r7, r1
 800d3ee:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d3f0:	000c      	movs	r4, r1
 800d3f2:	187b      	adds	r3, r7, r1
 800d3f4:	0018      	movs	r0, r3
 800d3f6:	f005 fcf1 	bl	8012ddc <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d3fa:	0021      	movs	r1, r4
 800d3fc:	187b      	adds	r3, r7, r1
 800d3fe:	2222      	movs	r2, #34	; 0x22
 800d400:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800d402:	187b      	adds	r3, r7, r1
 800d404:	2214      	movs	r2, #20
 800d406:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800d408:	187b      	adds	r3, r7, r1
 800d40a:	0018      	movs	r0, r3
 800d40c:	f005 fce6 	bl	8012ddc <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800d410:	2110      	movs	r1, #16
 800d412:	187b      	adds	r3, r7, r1
 800d414:	220f      	movs	r2, #15
 800d416:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800d418:	4b0f      	ldr	r3, [pc, #60]	; (800d458 <LmHandlerConfigure+0x1c0>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	187a      	adds	r2, r7, r1
 800d41e:	0011      	movs	r1, r2
 800d420:	0018      	movs	r0, r3
 800d422:	f008 fdfa 	bl	801601a <RegionGetPhyParam>
 800d426:	0003      	movs	r3, r0
 800d428:	001a      	movs	r2, r3
 800d42a:	210c      	movs	r1, #12
 800d42c:	187b      	adds	r3, r7, r1
 800d42e:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d430:	187b      	adds	r3, r7, r1
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	1e5a      	subs	r2, r3, #1
 800d436:	4193      	sbcs	r3, r2
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	4b07      	ldr	r3, [pc, #28]	; (800d458 <LmHandlerConfigure+0x1c0>)
 800d43c:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800d43e:	4b06      	ldr	r3, [pc, #24]	; (800d458 <LmHandlerConfigure+0x1c0>)
 800d440:	791b      	ldrb	r3, [r3, #4]
 800d442:	0018      	movs	r0, r3
 800d444:	f006 faf6 	bl	8013a34 <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	0018      	movs	r0, r3
 800d44c:	46bd      	mov	sp, r7
 800d44e:	b011      	add	sp, #68	; 0x44
 800d450:	bcc0      	pop	{r6, r7}
 800d452:	46b9      	mov	r9, r7
 800d454:	46b0      	mov	r8, r6
 800d456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d458:	200009d4 	.word	0x200009d4
 800d45c:	20000a0c 	.word	0x20000a0c
 800d460:	200009fc 	.word	0x200009fc
 800d464:	0801e038 	.word	0x0801e038
 800d468:	20000b26 	.word	0x20000b26
 800d46c:	20000138 	.word	0x20000138
 800d470:	20000140 	.word	0x20000140
 800d474:	0801e084 	.word	0x0801e084
 800d478:	0801e0c0 	.word	0x0801e0c0

0800d47c <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800d482:	f004 fea5 	bl	80121d0 <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800d486:	1dfb      	adds	r3, r7, #7
 800d488:	2200      	movs	r2, #0
 800d48a:	701a      	strb	r2, [r3, #0]
 800d48c:	e027      	b.n	800d4de <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800d48e:	1dfb      	adds	r3, r7, #7
 800d490:	2200      	movs	r2, #0
 800d492:	569a      	ldrsb	r2, [r3, r2]
 800d494:	4b17      	ldr	r3, [pc, #92]	; (800d4f4 <LmHandlerProcess+0x78>)
 800d496:	0092      	lsls	r2, r2, #2
 800d498:	58d3      	ldr	r3, [r2, r3]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d017      	beq.n	800d4ce <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800d49e:	1dfb      	adds	r3, r7, #7
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	569a      	ldrsb	r2, [r3, r2]
 800d4a4:	4b13      	ldr	r3, [pc, #76]	; (800d4f4 <LmHandlerProcess+0x78>)
 800d4a6:	0092      	lsls	r2, r2, #2
 800d4a8:	58d3      	ldr	r3, [r2, r3]
 800d4aa:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00e      	beq.n	800d4ce <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800d4b0:	1dfb      	adds	r3, r7, #7
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	0018      	movs	r0, r3
 800d4b6:	f000 fbf1 	bl	800dc9c <LmHandlerPackageIsInitialized>
 800d4ba:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800d4bc:	d007      	beq.n	800d4ce <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800d4be:	1dfb      	adds	r3, r7, #7
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	569a      	ldrsb	r2, [r3, r2]
 800d4c4:	4b0b      	ldr	r3, [pc, #44]	; (800d4f4 <LmHandlerProcess+0x78>)
 800d4c6:	0092      	lsls	r2, r2, #2
 800d4c8:	58d3      	ldr	r3, [r2, r3]
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800d4ce:	1dfb      	adds	r3, r7, #7
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	b25b      	sxtb	r3, r3
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	b2da      	uxtb	r2, r3
 800d4da:	1dfb      	adds	r3, r7, #7
 800d4dc:	701a      	strb	r2, [r3, #0]
 800d4de:	1dfb      	adds	r3, r7, #7
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	b25b      	sxtb	r3, r3
 800d4e4:	2b04      	cmp	r3, #4
 800d4e6:	ddd2      	ble.n	800d48e <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800d4e8:	f000 ff9f 	bl	800e42a <NvmCtxMgmtStore>
}
 800d4ec:	46c0      	nop			; (mov r8, r8)
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	b002      	add	sp, #8
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	200009c0 	.word	0x200009c0

0800d4f8 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800d4f8:	b5b0      	push	{r4, r5, r7, lr}
 800d4fa:	b08a      	sub	sp, #40	; 0x28
 800d4fc:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d4fe:	003b      	movs	r3, r7
 800d500:	2201      	movs	r2, #1
 800d502:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800d504:	2527      	movs	r5, #39	; 0x27
 800d506:	197c      	adds	r4, r7, r5
 800d508:	003b      	movs	r3, r7
 800d50a:	0018      	movs	r0, r3
 800d50c:	f005 fb08 	bl	8012b20 <LoRaMacMibGetRequestConfirm>
 800d510:	0003      	movs	r3, r0
 800d512:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800d514:	197b      	adds	r3, r7, r5
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d107      	bne.n	800d52c <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800d51c:	003b      	movs	r3, r7
 800d51e:	791b      	ldrb	r3, [r3, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d101      	bne.n	800d528 <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800d524:	2300      	movs	r3, #0
 800d526:	e002      	b.n	800d52e <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800d528:	2301      	movs	r3, #1
 800d52a:	e000      	b.n	800d52e <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800d52c:	2300      	movs	r3, #0
  }
}
 800d52e:	0018      	movs	r0, r3
 800d530:	46bd      	mov	sp, r7
 800d532:	b00a      	add	sp, #40	; 0x28
 800d534:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d538 <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800d538:	b590      	push	{r4, r7, lr}
 800d53a:	b093      	sub	sp, #76	; 0x4c
 800d53c:	af02      	add	r7, sp, #8
 800d53e:	0002      	movs	r2, r0
 800d540:	1dfb      	adds	r3, r7, #7
 800d542:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800d544:	1dfb      	adds	r3, r7, #7
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d113      	bne.n	800d574 <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d54c:	4b37      	ldr	r3, [pc, #220]	; (800d62c <LmHandlerJoin+0xf4>)
 800d54e:	2202      	movs	r2, #2
 800d550:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800d552:	f005 fa2b 	bl	80129ac <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800d556:	2108      	movs	r1, #8
 800d558:	187b      	adds	r3, r7, r1
 800d55a:	2201      	movs	r2, #1
 800d55c:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d55e:	4b34      	ldr	r3, [pc, #208]	; (800d630 <LmHandlerJoin+0xf8>)
 800d560:	78db      	ldrb	r3, [r3, #3]
 800d562:	b25b      	sxtb	r3, r3
 800d564:	b2da      	uxtb	r2, r3
 800d566:	187b      	adds	r3, r7, r1
 800d568:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800d56a:	187b      	adds	r3, r7, r1
 800d56c:	0018      	movs	r0, r3
 800d56e:	f005 ffbb 	bl	80134e8 <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800d572:	e057      	b.n	800d624 <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d574:	4b2d      	ldr	r3, [pc, #180]	; (800d62c <LmHandlerJoin+0xf4>)
 800d576:	2201      	movs	r2, #1
 800d578:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d57a:	4b2c      	ldr	r3, [pc, #176]	; (800d62c <LmHandlerJoin+0xf4>)
 800d57c:	2200      	movs	r2, #0
 800d57e:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800d580:	4b2c      	ldr	r3, [pc, #176]	; (800d634 <LmHandlerJoin+0xfc>)
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2201      	movs	r2, #1
 800d586:	4053      	eors	r3, r2
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d033      	beq.n	800d5f6 <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d58e:	211c      	movs	r1, #28
 800d590:	187b      	adds	r3, r7, r1
 800d592:	2227      	movs	r2, #39	; 0x27
 800d594:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d596:	187b      	adds	r3, r7, r1
 800d598:	4a27      	ldr	r2, [pc, #156]	; (800d638 <LmHandlerJoin+0x100>)
 800d59a:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800d59c:	000c      	movs	r4, r1
 800d59e:	187b      	adds	r3, r7, r1
 800d5a0:	0018      	movs	r0, r3
 800d5a2:	f005 fc1b 	bl	8012ddc <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800d5a6:	0021      	movs	r1, r4
 800d5a8:	187b      	adds	r3, r7, r1
 800d5aa:	2205      	movs	r2, #5
 800d5ac:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800d5ae:	4b23      	ldr	r3, [pc, #140]	; (800d63c <LmHandlerJoin+0x104>)
 800d5b0:	691a      	ldr	r2, [r3, #16]
 800d5b2:	187b      	adds	r3, r7, r1
 800d5b4:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800d5b6:	000c      	movs	r4, r1
 800d5b8:	187b      	adds	r3, r7, r1
 800d5ba:	0018      	movs	r0, r3
 800d5bc:	f005 fc0e 	bl	8012ddc <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800d5c0:	f7f6 ff90 	bl	80044e4 <GetDevAddr>
 800d5c4:	0002      	movs	r2, r0
 800d5c6:	4b1d      	ldr	r3, [pc, #116]	; (800d63c <LmHandlerJoin+0x104>)
 800d5c8:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800d5ca:	0021      	movs	r1, r4
 800d5cc:	187b      	adds	r3, r7, r1
 800d5ce:	2206      	movs	r2, #6
 800d5d0:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d5d2:	4b1a      	ldr	r3, [pc, #104]	; (800d63c <LmHandlerJoin+0x104>)
 800d5d4:	695a      	ldr	r2, [r3, #20]
 800d5d6:	187b      	adds	r3, r7, r1
 800d5d8:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800d5da:	187b      	adds	r3, r7, r1
 800d5dc:	0018      	movs	r0, r3
 800d5de:	f005 fbfd 	bl	8012ddc <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800d5e2:	4b16      	ldr	r3, [pc, #88]	; (800d63c <LmHandlerJoin+0x104>)
 800d5e4:	695b      	ldr	r3, [r3, #20]
 800d5e6:	4a16      	ldr	r2, [pc, #88]	; (800d640 <LmHandlerJoin+0x108>)
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	0013      	movs	r3, r2
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	2002      	movs	r0, #2
 800d5f2:	f00d fdcb 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800d5f6:	f005 f9d9 	bl	80129ac <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d5fa:	211c      	movs	r1, #28
 800d5fc:	187b      	adds	r3, r7, r1
 800d5fe:	2201      	movs	r2, #1
 800d600:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d602:	187b      	adds	r3, r7, r1
 800d604:	2201      	movs	r2, #1
 800d606:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d608:	187b      	adds	r3, r7, r1
 800d60a:	0018      	movs	r0, r3
 800d60c:	f005 fbe6 	bl	8012ddc <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800d610:	4b0c      	ldr	r3, [pc, #48]	; (800d644 <LmHandlerJoin+0x10c>)
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	4a05      	ldr	r2, [pc, #20]	; (800d62c <LmHandlerJoin+0xf4>)
 800d616:	0010      	movs	r0, r2
 800d618:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d61a:	4b05      	ldr	r3, [pc, #20]	; (800d630 <LmHandlerJoin+0xf8>)
 800d61c:	785b      	ldrb	r3, [r3, #1]
 800d61e:	0018      	movs	r0, r3
 800d620:	f000 f8e4 	bl	800d7ec <LmHandlerRequestClass>
}
 800d624:	46c0      	nop			; (mov r8, r8)
 800d626:	46bd      	mov	sp, r7
 800d628:	b011      	add	sp, #68	; 0x44
 800d62a:	bd90      	pop	{r4, r7, pc}
 800d62c:	2000015c 	.word	0x2000015c
 800d630:	200009d4 	.word	0x200009d4
 800d634:	20000b26 	.word	0x20000b26
 800d638:	01000300 	.word	0x01000300
 800d63c:	20000138 	.word	0x20000138
 800d640:	0801e0c0 	.word	0x0801e0c0
 800d644:	200009dc 	.word	0x200009dc

0800d648 <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800d648:	b5b0      	push	{r4, r5, r7, lr}
 800d64a:	b08c      	sub	sp, #48	; 0x30
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	0008      	movs	r0, r1
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	0019      	movs	r1, r3
 800d656:	230b      	movs	r3, #11
 800d658:	18fb      	adds	r3, r7, r3
 800d65a:	1c02      	adds	r2, r0, #0
 800d65c:	701a      	strb	r2, [r3, #0]
 800d65e:	230a      	movs	r3, #10
 800d660:	18fb      	adds	r3, r7, r3
 800d662:	1c0a      	adds	r2, r1, #0
 800d664:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d666:	232f      	movs	r3, #47	; 0x2f
 800d668:	18fb      	adds	r3, r7, r3
 800d66a:	22ff      	movs	r2, #255	; 0xff
 800d66c:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800d66e:	f004 fd97 	bl	80121a0 <LoRaMacIsBusy>
 800d672:	1e03      	subs	r3, r0, #0
 800d674:	d002      	beq.n	800d67c <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800d676:	2302      	movs	r3, #2
 800d678:	425b      	negs	r3, r3
 800d67a:	e0a9      	b.n	800d7d0 <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d67c:	f7ff ff3c 	bl	800d4f8 <LmHandlerJoinStatus>
 800d680:	0003      	movs	r3, r0
 800d682:	2b01      	cmp	r3, #1
 800d684:	d007      	beq.n	800d696 <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800d686:	4b54      	ldr	r3, [pc, #336]	; (800d7d8 <LmHandlerSend+0x190>)
 800d688:	789b      	ldrb	r3, [r3, #2]
 800d68a:	0018      	movs	r0, r3
 800d68c:	f7ff ff54 	bl	800d538 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d690:	2303      	movs	r3, #3
 800d692:	425b      	negs	r3, r3
 800d694:	e09c      	b.n	800d7d0 <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800d696:	4b51      	ldr	r3, [pc, #324]	; (800d7dc <LmHandlerSend+0x194>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	4798      	blx	r3
 800d69e:	1e03      	subs	r3, r0, #0
 800d6a0:	d00d      	beq.n	800d6be <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	781a      	ldrb	r2, [r3, #0]
 800d6a6:	4b4d      	ldr	r3, [pc, #308]	; (800d7dc <LmHandlerSend+0x194>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d006      	beq.n	800d6be <LmHandlerSend+0x76>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d002      	beq.n	800d6be <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800d6b8:	2304      	movs	r3, #4
 800d6ba:	425b      	negs	r3, r3
 800d6bc:	e088      	b.n	800d7d0 <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d6be:	4b48      	ldr	r3, [pc, #288]	; (800d7e0 <LmHandlerSend+0x198>)
 800d6c0:	2203      	movs	r2, #3
 800d6c2:	569a      	ldrsb	r2, [r3, r2]
 800d6c4:	2418      	movs	r4, #24
 800d6c6:	193b      	adds	r3, r7, r4
 800d6c8:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	785b      	ldrb	r3, [r3, #1]
 800d6ce:	2214      	movs	r2, #20
 800d6d0:	18ba      	adds	r2, r7, r2
 800d6d2:	0011      	movs	r1, r2
 800d6d4:	0018      	movs	r0, r3
 800d6d6:	f005 f977 	bl	80129c8 <LoRaMacQueryTxPossible>
 800d6da:	1e03      	subs	r3, r0, #0
 800d6dc:	d00c      	beq.n	800d6f8 <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d6de:	4b41      	ldr	r3, [pc, #260]	; (800d7e4 <LmHandlerSend+0x19c>)
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800d6e4:	193b      	adds	r3, r7, r4
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d6ea:	193b      	adds	r3, r7, r4
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d6f0:	193b      	adds	r3, r7, r4
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	819a      	strh	r2, [r3, #12]
 800d6f6:	e021      	b.n	800d73c <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800d6f8:	4b3a      	ldr	r3, [pc, #232]	; (800d7e4 <LmHandlerSend+0x19c>)
 800d6fa:	200b      	movs	r0, #11
 800d6fc:	183a      	adds	r2, r7, r0
 800d6fe:	7812      	ldrb	r2, [r2, #0]
 800d700:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	781a      	ldrb	r2, [r3, #0]
 800d706:	2118      	movs	r1, #24
 800d708:	187b      	adds	r3, r7, r1
 800d70a:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	785b      	ldrb	r3, [r3, #1]
 800d710:	b29a      	uxth	r2, r3
 800d712:	187b      	adds	r3, r7, r1
 800d714:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	685a      	ldr	r2, [r3, #4]
 800d71a:	187b      	adds	r3, r7, r1
 800d71c:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800d71e:	183b      	adds	r3, r7, r0
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d103      	bne.n	800d72e <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800d726:	187b      	adds	r3, r7, r1
 800d728:	2200      	movs	r2, #0
 800d72a:	701a      	strb	r2, [r3, #0]
 800d72c:	e006      	b.n	800d73c <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800d72e:	2118      	movs	r1, #24
 800d730:	187b      	adds	r3, r7, r1
 800d732:	2201      	movs	r2, #1
 800d734:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800d736:	187b      	adds	r3, r7, r1
 800d738:	2208      	movs	r2, #8
 800d73a:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800d73c:	4b29      	ldr	r3, [pc, #164]	; (800d7e4 <LmHandlerSend+0x19c>)
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	330c      	adds	r3, #12
 800d742:	ca03      	ldmia	r2!, {r0, r1}
 800d744:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d746:	4b26      	ldr	r3, [pc, #152]	; (800d7e0 <LmHandlerSend+0x198>)
 800d748:	2203      	movs	r2, #3
 800d74a:	569a      	ldrsb	r2, [r3, r2]
 800d74c:	4b25      	ldr	r3, [pc, #148]	; (800d7e4 <LmHandlerSend+0x19c>)
 800d74e:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d750:	232e      	movs	r3, #46	; 0x2e
 800d752:	18fc      	adds	r4, r7, r3
 800d754:	230a      	movs	r3, #10
 800d756:	18fb      	adds	r3, r7, r3
 800d758:	781a      	ldrb	r2, [r3, #0]
 800d75a:	2518      	movs	r5, #24
 800d75c:	197b      	adds	r3, r7, r5
 800d75e:	0011      	movs	r1, r2
 800d760:	0018      	movs	r0, r3
 800d762:	f006 f819 	bl	8013798 <LoRaMacMcpsRequest>
 800d766:	0003      	movs	r3, r0
 800d768:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d003      	beq.n	800d778 <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d770:	197b      	adds	r3, r7, r5
 800d772:	691a      	ldr	r2, [r3, #16]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800d778:	232e      	movs	r3, #46	; 0x2e
 800d77a:	18fb      	adds	r3, r7, r3
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	2b11      	cmp	r3, #17
 800d780:	d81d      	bhi.n	800d7be <LmHandlerSend+0x176>
 800d782:	009a      	lsls	r2, r3, #2
 800d784:	4b18      	ldr	r3, [pc, #96]	; (800d7e8 <LmHandlerSend+0x1a0>)
 800d786:	18d3      	adds	r3, r2, r3
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d78c:	232f      	movs	r3, #47	; 0x2f
 800d78e:	18fb      	adds	r3, r7, r3
 800d790:	2200      	movs	r2, #0
 800d792:	701a      	strb	r2, [r3, #0]
    break;
 800d794:	e018      	b.n	800d7c8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d796:	232f      	movs	r3, #47	; 0x2f
 800d798:	18fb      	adds	r3, r7, r3
 800d79a:	22fe      	movs	r2, #254	; 0xfe
 800d79c:	701a      	strb	r2, [r3, #0]
    break;
 800d79e:	e013      	b.n	800d7c8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d7a0:	232f      	movs	r3, #47	; 0x2f
 800d7a2:	18fb      	adds	r3, r7, r3
 800d7a4:	22fd      	movs	r2, #253	; 0xfd
 800d7a6:	701a      	strb	r2, [r3, #0]
    break;
 800d7a8:	e00e      	b.n	800d7c8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d7aa:	232f      	movs	r3, #47	; 0x2f
 800d7ac:	18fb      	adds	r3, r7, r3
 800d7ae:	22fb      	movs	r2, #251	; 0xfb
 800d7b0:	701a      	strb	r2, [r3, #0]
    break;
 800d7b2:	e009      	b.n	800d7c8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d7b4:	232f      	movs	r3, #47	; 0x2f
 800d7b6:	18fb      	adds	r3, r7, r3
 800d7b8:	22fa      	movs	r2, #250	; 0xfa
 800d7ba:	701a      	strb	r2, [r3, #0]
    break;
 800d7bc:	e004      	b.n	800d7c8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800d7be:	232f      	movs	r3, #47	; 0x2f
 800d7c0:	18fb      	adds	r3, r7, r3
 800d7c2:	22ff      	movs	r2, #255	; 0xff
 800d7c4:	701a      	strb	r2, [r3, #0]
    break;
 800d7c6:	46c0      	nop			; (mov r8, r8)
  }
      
  return lmhStatus;
 800d7c8:	232f      	movs	r3, #47	; 0x2f
 800d7ca:	18fb      	adds	r3, r7, r3
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	b25b      	sxtb	r3, r3
}
 800d7d0:	0018      	movs	r0, r3
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	b00c      	add	sp, #48	; 0x30
 800d7d6:	bdb0      	pop	{r4, r5, r7, pc}
 800d7d8:	2000015c 	.word	0x2000015c
 800d7dc:	200009c0 	.word	0x200009c0
 800d7e0:	200009d4 	.word	0x200009d4
 800d7e4:	20000a1c 	.word	0x20000a1c
 800d7e8:	0801e0dc 	.word	0x0801e0dc

0800d7ec <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08c      	sub	sp, #48	; 0x30
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	0002      	movs	r2, r0
 800d7f4:	1dfb      	adds	r3, r7, #7
 800d7f6:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d7f8:	232f      	movs	r3, #47	; 0x2f
 800d7fa:	18fb      	adds	r3, r7, r3
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d800:	f7ff fe7a 	bl	800d4f8 <LmHandlerJoinStatus>
 800d804:	0003      	movs	r3, r0
 800d806:	2b01      	cmp	r3, #1
 800d808:	d002      	beq.n	800d810 <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d80a:	2303      	movs	r3, #3
 800d80c:	425b      	negs	r3, r3
 800d80e:	e077      	b.n	800d900 <LmHandlerRequestClass+0x114>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800d810:	2108      	movs	r1, #8
 800d812:	187b      	adds	r3, r7, r1
 800d814:	2200      	movs	r2, #0
 800d816:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800d818:	187b      	adds	r3, r7, r1
 800d81a:	0018      	movs	r0, r3
 800d81c:	f005 f980 	bl	8012b20 <LoRaMacMibGetRequestConfirm>
 800d820:	1e03      	subs	r3, r0, #0
 800d822:	d002      	beq.n	800d82a <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800d824:	2301      	movs	r3, #1
 800d826:	425b      	negs	r3, r3
 800d828:	e06a      	b.n	800d900 <LmHandlerRequestClass+0x114>
  }
  currentClass = mibReq.Param.Class;
 800d82a:	212e      	movs	r1, #46	; 0x2e
 800d82c:	187b      	adds	r3, r7, r1
 800d82e:	2208      	movs	r2, #8
 800d830:	18ba      	adds	r2, r7, r2
 800d832:	7912      	ldrb	r2, [r2, #4]
 800d834:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800d836:	187a      	adds	r2, r7, r1
 800d838:	1dfb      	adds	r3, r7, #7
 800d83a:	7812      	ldrb	r2, [r2, #0]
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d053      	beq.n	800d8ea <LmHandlerRequestClass+0xfe>
  {
    switch (newClass)
 800d842:	1dfb      	adds	r3, r7, #7
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	2b02      	cmp	r3, #2
 800d848:	d02a      	beq.n	800d8a0 <LmHandlerRequestClass+0xb4>
 800d84a:	dc50      	bgt.n	800d8ee <LmHandlerRequestClass+0x102>
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <LmHandlerRequestClass+0x6a>
 800d850:	2b01      	cmp	r3, #1
 800d852:	d020      	beq.n	800d896 <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800d854:	e04b      	b.n	800d8ee <LmHandlerRequestClass+0x102>
        if (currentClass != CLASS_A)
 800d856:	232e      	movs	r3, #46	; 0x2e
 800d858:	18fb      	adds	r3, r7, r3
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d048      	beq.n	800d8f2 <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_A;
 800d860:	2108      	movs	r1, #8
 800d862:	187b      	adds	r3, r7, r1
 800d864:	2200      	movs	r2, #0
 800d866:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800d868:	187b      	adds	r3, r7, r1
 800d86a:	0018      	movs	r0, r3
 800d86c:	f005 fab6 	bl	8012ddc <LoRaMacMibSetRequestConfirm>
 800d870:	1e03      	subs	r3, r0, #0
 800d872:	d10b      	bne.n	800d88c <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800d874:	2000      	movs	r0, #0
 800d876:	f000 fac9 	bl	800de0c <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800d87a:	4b23      	ldr	r3, [pc, #140]	; (800d908 <LmHandlerRequestClass+0x11c>)
 800d87c:	699b      	ldr	r3, [r3, #24]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d037      	beq.n	800d8f2 <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800d882:	4b21      	ldr	r3, [pc, #132]	; (800d908 <LmHandlerRequestClass+0x11c>)
 800d884:	699b      	ldr	r3, [r3, #24]
 800d886:	2000      	movs	r0, #0
 800d888:	4798      	blx	r3
      break;
 800d88a:	e032      	b.n	800d8f2 <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800d88c:	232f      	movs	r3, #47	; 0x2f
 800d88e:	18fb      	adds	r3, r7, r3
 800d890:	22ff      	movs	r2, #255	; 0xff
 800d892:	701a      	strb	r2, [r3, #0]
      break;
 800d894:	e02d      	b.n	800d8f2 <LmHandlerRequestClass+0x106>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800d896:	232f      	movs	r3, #47	; 0x2f
 800d898:	18fb      	adds	r3, r7, r3
 800d89a:	22ff      	movs	r2, #255	; 0xff
 800d89c:	701a      	strb	r2, [r3, #0]
      break;
 800d89e:	e02b      	b.n	800d8f8 <LmHandlerRequestClass+0x10c>
        if (currentClass != CLASS_A)
 800d8a0:	232e      	movs	r3, #46	; 0x2e
 800d8a2:	18fb      	adds	r3, r7, r3
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d004      	beq.n	800d8b4 <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800d8aa:	232f      	movs	r3, #47	; 0x2f
 800d8ac:	18fb      	adds	r3, r7, r3
 800d8ae:	22ff      	movs	r2, #255	; 0xff
 800d8b0:	701a      	strb	r2, [r3, #0]
      break;
 800d8b2:	e020      	b.n	800d8f6 <LmHandlerRequestClass+0x10a>
          mibReq.Param.Class = CLASS_C;
 800d8b4:	2108      	movs	r1, #8
 800d8b6:	187b      	adds	r3, r7, r1
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800d8bc:	187b      	adds	r3, r7, r1
 800d8be:	0018      	movs	r0, r3
 800d8c0:	f005 fa8c 	bl	8012ddc <LoRaMacMibSetRequestConfirm>
 800d8c4:	1e03      	subs	r3, r0, #0
 800d8c6:	d10b      	bne.n	800d8e0 <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800d8c8:	2002      	movs	r0, #2
 800d8ca:	f000 fa9f 	bl	800de0c <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800d8ce:	4b0e      	ldr	r3, [pc, #56]	; (800d908 <LmHandlerRequestClass+0x11c>)
 800d8d0:	699b      	ldr	r3, [r3, #24]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00f      	beq.n	800d8f6 <LmHandlerRequestClass+0x10a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800d8d6:	4b0c      	ldr	r3, [pc, #48]	; (800d908 <LmHandlerRequestClass+0x11c>)
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	2002      	movs	r0, #2
 800d8dc:	4798      	blx	r3
      break;
 800d8de:	e00a      	b.n	800d8f6 <LmHandlerRequestClass+0x10a>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800d8e0:	232f      	movs	r3, #47	; 0x2f
 800d8e2:	18fb      	adds	r3, r7, r3
 800d8e4:	22ff      	movs	r2, #255	; 0xff
 800d8e6:	701a      	strb	r2, [r3, #0]
      break;
 800d8e8:	e005      	b.n	800d8f6 <LmHandlerRequestClass+0x10a>
    }
  }
 800d8ea:	46c0      	nop			; (mov r8, r8)
 800d8ec:	e004      	b.n	800d8f8 <LmHandlerRequestClass+0x10c>
        break;
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	e002      	b.n	800d8f8 <LmHandlerRequestClass+0x10c>
      break;
 800d8f2:	46c0      	nop			; (mov r8, r8)
 800d8f4:	e000      	b.n	800d8f8 <LmHandlerRequestClass+0x10c>
      break;
 800d8f6:	46c0      	nop			; (mov r8, r8)
  return errorStatus;
 800d8f8:	232f      	movs	r3, #47	; 0x2f
 800d8fa:	18fb      	adds	r3, r7, r3
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	b25b      	sxtb	r3, r3
}
 800d900:	0018      	movs	r0, r3
 800d902:	46bd      	mov	sp, r7
 800d904:	b00c      	add	sp, #48	; 0x30
 800d906:	bd80      	pop	{r7, pc}
 800d908:	200009dc 	.word	0x200009dc

0800d90c <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800d90c:	b590      	push	{r4, r7, lr}
 800d90e:	b085      	sub	sp, #20
 800d910:	af00      	add	r7, sp, #0
 800d912:	0002      	movs	r2, r0
 800d914:	6039      	str	r1, [r7, #0]
 800d916:	1dfb      	adds	r3, r7, #7
 800d918:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800d91a:	2300      	movs	r3, #0
 800d91c:	60fb      	str	r3, [r7, #12]
  switch (id)
 800d91e:	1dfb      	adds	r3, r7, #7
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d104      	bne.n	800d930 <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800d926:	f000 fa8b 	bl	800de40 <LmphCompliancePackageFactory>
 800d92a:	0003      	movs	r3, r0
 800d92c:	60fb      	str	r3, [r7, #12]
      break;
 800d92e:	e000      	b.n	800d932 <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800d930:	46c0      	nop			; (mov r8, r8)
  }

  if (package != NULL)
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d028      	beq.n	800d98a <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800d938:	1dfb      	adds	r3, r7, #7
 800d93a:	781a      	ldrb	r2, [r3, #0]
 800d93c:	4b16      	ldr	r3, [pc, #88]	; (800d998 <LmHandlerPackageRegister+0x8c>)
 800d93e:	0092      	lsls	r2, r2, #2
 800d940:	68f9      	ldr	r1, [r7, #12]
 800d942:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d944:	1dfb      	adds	r3, r7, #7
 800d946:	781a      	ldrb	r2, [r3, #0]
 800d948:	4b13      	ldr	r3, [pc, #76]	; (800d998 <LmHandlerPackageRegister+0x8c>)
 800d94a:	0092      	lsls	r2, r2, #2
 800d94c:	58d3      	ldr	r3, [r2, r3]
 800d94e:	4a13      	ldr	r2, [pc, #76]	; (800d99c <LmHandlerPackageRegister+0x90>)
 800d950:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800d952:	1dfb      	adds	r3, r7, #7
 800d954:	781a      	ldrb	r2, [r3, #0]
 800d956:	4b10      	ldr	r3, [pc, #64]	; (800d998 <LmHandlerPackageRegister+0x8c>)
 800d958:	0092      	lsls	r2, r2, #2
 800d95a:	58d3      	ldr	r3, [r2, r3]
 800d95c:	4a10      	ldr	r2, [pc, #64]	; (800d9a0 <LmHandlerPackageRegister+0x94>)
 800d95e:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d960:	1dfb      	adds	r3, r7, #7
 800d962:	781a      	ldrb	r2, [r3, #0]
 800d964:	4b0c      	ldr	r3, [pc, #48]	; (800d998 <LmHandlerPackageRegister+0x8c>)
 800d966:	0092      	lsls	r2, r2, #2
 800d968:	58d3      	ldr	r3, [r2, r3]
 800d96a:	4a0e      	ldr	r2, [pc, #56]	; (800d9a4 <LmHandlerPackageRegister+0x98>)
 800d96c:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800d96e:	1dfb      	adds	r3, r7, #7
 800d970:	781a      	ldrb	r2, [r3, #0]
 800d972:	4b09      	ldr	r3, [pc, #36]	; (800d998 <LmHandlerPackageRegister+0x8c>)
 800d974:	0092      	lsls	r2, r2, #2
 800d976:	58d3      	ldr	r3, [r2, r3]
 800d978:	685c      	ldr	r4, [r3, #4]
 800d97a:	4b0b      	ldr	r3, [pc, #44]	; (800d9a8 <LmHandlerPackageRegister+0x9c>)
 800d97c:	6859      	ldr	r1, [r3, #4]
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	22f2      	movs	r2, #242	; 0xf2
 800d982:	0018      	movs	r0, r3
 800d984:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800d986:	2300      	movs	r3, #0
 800d988:	e001      	b.n	800d98e <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800d98a:	2301      	movs	r3, #1
 800d98c:	425b      	negs	r3, r3
  }
}
 800d98e:	0018      	movs	r0, r3
 800d990:	46bd      	mov	sp, r7
 800d992:	b005      	add	sp, #20
 800d994:	bd90      	pop	{r4, r7, pc}
 800d996:	46c0      	nop			; (mov r8, r8)
 800d998:	200009c0 	.word	0x200009c0
 800d99c:	0800d539 	.word	0x0800d539
 800d9a0:	0800d649 	.word	0x0800d649
 800d9a4:	0800da45 	.word	0x0800da45
 800d9a8:	20000170 	.word	0x20000170

0800d9ac <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b08c      	sub	sp, #48	; 0x30
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d102      	bne.n	800d9c0 <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	425b      	negs	r3, r3
 800d9be:	e012      	b.n	800d9e6 <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800d9c0:	210c      	movs	r1, #12
 800d9c2:	187b      	adds	r3, r7, r1
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800d9c8:	187b      	adds	r3, r7, r1
 800d9ca:	0018      	movs	r0, r3
 800d9cc:	f005 f8a8 	bl	8012b20 <LoRaMacMibGetRequestConfirm>
 800d9d0:	1e03      	subs	r3, r0, #0
 800d9d2:	d002      	beq.n	800d9da <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	425b      	negs	r3, r3
 800d9d8:	e005      	b.n	800d9e6 <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800d9da:	230c      	movs	r3, #12
 800d9dc:	18fb      	adds	r3, r7, r3
 800d9de:	791a      	ldrb	r2, [r3, #4]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	0018      	movs	r0, r3
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	b00c      	add	sp, #48	; 0x30
 800d9ec:	bd80      	pop	{r7, pc}
	...

0800d9f0 <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b08c      	sub	sp, #48	; 0x30
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d102      	bne.n	800da04 <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800d9fe:	2301      	movs	r3, #1
 800da00:	425b      	negs	r3, r3
 800da02:	e018      	b.n	800da36 <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800da04:	210c      	movs	r1, #12
 800da06:	187b      	adds	r3, r7, r1
 800da08:	221f      	movs	r2, #31
 800da0a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800da0c:	187b      	adds	r3, r7, r1
 800da0e:	0018      	movs	r0, r3
 800da10:	f005 f886 	bl	8012b20 <LoRaMacMibGetRequestConfirm>
 800da14:	1e03      	subs	r3, r0, #0
 800da16:	d002      	beq.n	800da1e <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800da18:	2301      	movs	r3, #1
 800da1a:	425b      	negs	r3, r3
 800da1c:	e00b      	b.n	800da36 <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800da1e:	210c      	movs	r1, #12
 800da20:	187b      	adds	r3, r7, r1
 800da22:	2204      	movs	r2, #4
 800da24:	569a      	ldrsb	r2, [r3, r2]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800da2a:	187b      	adds	r3, r7, r1
 800da2c:	2204      	movs	r2, #4
 800da2e:	569a      	ldrsb	r2, [r3, r2]
 800da30:	4b03      	ldr	r3, [pc, #12]	; (800da40 <LmHandlerGetTxDatarate+0x50>)
 800da32:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800da34:	2300      	movs	r3, #0
}
 800da36:	0018      	movs	r0, r3
 800da38:	46bd      	mov	sp, r7
 800da3a:	b00c      	add	sp, #48	; 0x30
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	46c0      	nop			; (mov r8, r8)
 800da40:	200009d4 	.word	0x200009d4

0800da44 <LmHandlerDeviceTimeReq>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800da44:	b5b0      	push	{r4, r5, r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800da4a:	003b      	movs	r3, r7
 800da4c:	220a      	movs	r2, #10
 800da4e:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800da50:	2517      	movs	r5, #23
 800da52:	197c      	adds	r4, r7, r5
 800da54:	003b      	movs	r3, r7
 800da56:	0018      	movs	r0, r3
 800da58:	f005 fd46 	bl	80134e8 <LoRaMacMlmeRequest>
 800da5c:	0003      	movs	r3, r0
 800da5e:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800da60:	197b      	adds	r3, r7, r5
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d101      	bne.n	800da6c <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800da68:	2300      	movs	r3, #0
 800da6a:	e001      	b.n	800da70 <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800da6c:	2301      	movs	r3, #1
 800da6e:	425b      	negs	r3, r3
  }
}
 800da70:	0018      	movs	r0, r3
 800da72:	46bd      	mov	sp, r7
 800da74:	b006      	add	sp, #24
 800da76:	bdb0      	pop	{r4, r5, r7, pc}

0800da78 <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1; // Здесь выставляется будет ли подтверждение или нет
 800da80:	4b16      	ldr	r3, [pc, #88]	; (800dadc <McpsConfirm+0x64>)
 800da82:	2201      	movs	r2, #1
 800da84:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	785a      	ldrb	r2, [r3, #1]
 800da8a:	4b14      	ldr	r3, [pc, #80]	; (800dadc <McpsConfirm+0x64>)
 800da8c:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	789b      	ldrb	r3, [r3, #2]
 800da92:	b25a      	sxtb	r2, r3
 800da94:	4b11      	ldr	r3, [pc, #68]	; (800dadc <McpsConfirm+0x64>)
 800da96:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	68da      	ldr	r2, [r3, #12]
 800da9c:	4b0f      	ldr	r3, [pc, #60]	; (800dadc <McpsConfirm+0x64>)
 800da9e:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2203      	movs	r2, #3
 800daa4:	569a      	ldrsb	r2, [r3, r2]
 800daa6:	4b0d      	ldr	r3, [pc, #52]	; (800dadc <McpsConfirm+0x64>)
 800daa8:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	691b      	ldr	r3, [r3, #16]
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	4b0a      	ldr	r3, [pc, #40]	; (800dadc <McpsConfirm+0x64>)
 800dab2:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	791b      	ldrb	r3, [r3, #4]
 800dab8:	001a      	movs	r2, r3
 800daba:	4b08      	ldr	r3, [pc, #32]	; (800dadc <McpsConfirm+0x64>)
 800dabc:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800dabe:	4b08      	ldr	r3, [pc, #32]	; (800dae0 <McpsConfirm+0x68>)
 800dac0:	691b      	ldr	r3, [r3, #16]
 800dac2:	4a06      	ldr	r2, [pc, #24]	; (800dadc <McpsConfirm+0x64>)
 800dac4:	0010      	movs	r0, r2
 800dac6:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	0019      	movs	r1, r3
 800dacc:	2000      	movs	r0, #0
 800dace:	f000 f907 	bl	800dce0 <LmHandlerPackagesNotify>
}
 800dad2:	46c0      	nop			; (mov r8, r8)
 800dad4:	46bd      	mov	sp, r7
 800dad6:	b002      	add	sp, #8
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	46c0      	nop			; (mov r8, r8)
 800dadc:	20000a1c 	.word	0x20000a1c
 800dae0:	200009dc 	.word	0x200009dc

0800dae4 <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800dae4:	b590      	push	{r4, r7, lr}
 800dae6:	b089      	sub	sp, #36	; 0x24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800daec:	4b36      	ldr	r3, [pc, #216]	; (800dbc8 <McpsIndication+0xe4>)
 800daee:	2201      	movs	r2, #1
 800daf0:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	785a      	ldrb	r2, [r3, #1]
 800daf6:	4b34      	ldr	r3, [pc, #208]	; (800dbc8 <McpsIndication+0xe4>)
 800daf8:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800dafa:	4b33      	ldr	r3, [pc, #204]	; (800dbc8 <McpsIndication+0xe4>)
 800dafc:	785b      	ldrb	r3, [r3, #1]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d15e      	bne.n	800dbc0 <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	7b1b      	ldrb	r3, [r3, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d02c      	beq.n	800db64 <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	791b      	ldrb	r3, [r3, #4]
 800db0e:	b25a      	sxtb	r2, r3
 800db10:	4b2d      	ldr	r3, [pc, #180]	; (800dbc8 <McpsIndication+0xe4>)
 800db12:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	220e      	movs	r2, #14
 800db18:	5e9b      	ldrsh	r3, [r3, r2]
 800db1a:	b25a      	sxtb	r2, r3
 800db1c:	4b2a      	ldr	r3, [pc, #168]	; (800dbc8 <McpsIndication+0xe4>)
 800db1e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2210      	movs	r2, #16
 800db24:	569a      	ldrsb	r2, [r3, r2]
 800db26:	4b28      	ldr	r3, [pc, #160]	; (800dbc8 <McpsIndication+0xe4>)
 800db28:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	695a      	ldr	r2, [r3, #20]
 800db2e:	4b26      	ldr	r3, [pc, #152]	; (800dbc8 <McpsIndication+0xe4>)
 800db30:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	7c5b      	ldrb	r3, [r3, #17]
 800db36:	b25a      	sxtb	r2, r3
 800db38:	4b23      	ldr	r3, [pc, #140]	; (800dbc8 <McpsIndication+0xe4>)
 800db3a:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	78da      	ldrb	r2, [r3, #3]
 800db40:	2118      	movs	r1, #24
 800db42:	187b      	adds	r3, r7, r1
 800db44:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	7b1a      	ldrb	r2, [r3, #12]
 800db4a:	187b      	adds	r3, r7, r1
 800db4c:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	689a      	ldr	r2, [r3, #8]
 800db52:	0008      	movs	r0, r1
 800db54:	187b      	adds	r3, r7, r1
 800db56:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800db58:	4b1c      	ldr	r3, [pc, #112]	; (800dbcc <McpsIndication+0xe8>)
 800db5a:	695b      	ldr	r3, [r3, #20]
 800db5c:	491a      	ldr	r1, [pc, #104]	; (800dbc8 <McpsIndication+0xe4>)
 800db5e:	183a      	adds	r2, r7, r0
 800db60:	0010      	movs	r0, r2
 800db62:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	7f1b      	ldrb	r3, [r3, #28]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d006      	beq.n	800db7a <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800db6c:	4b17      	ldr	r3, [pc, #92]	; (800dbcc <McpsIndication+0xe8>)
 800db6e:	69db      	ldr	r3, [r3, #28]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d002      	beq.n	800db7a <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800db74:	4b15      	ldr	r3, [pc, #84]	; (800dbcc <McpsIndication+0xe8>)
 800db76:	69db      	ldr	r3, [r3, #28]
 800db78:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	0019      	movs	r1, r3
 800db7e:	2001      	movs	r0, #1
 800db80:	f000 f8ae 	bl	800dce0 <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800db84:	2417      	movs	r4, #23
 800db86:	193b      	adds	r3, r7, r4
 800db88:	0018      	movs	r0, r3
 800db8a:	f7ff ff0f 	bl	800d9ac <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	795b      	ldrb	r3, [r3, #5]
 800db92:	2b01      	cmp	r3, #1
 800db94:	d115      	bne.n	800dbc2 <McpsIndication+0xde>
 800db96:	193b      	adds	r3, r7, r4
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d111      	bne.n	800dbc2 <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800db9e:	210c      	movs	r1, #12
 800dba0:	187b      	adds	r3, r7, r1
 800dba2:	2200      	movs	r2, #0
 800dba4:	701a      	strb	r2, [r3, #0]
 800dba6:	187b      	adds	r3, r7, r1
 800dba8:	2200      	movs	r2, #0
 800dbaa:	705a      	strb	r2, [r3, #1]
 800dbac:	187b      	adds	r3, r7, r1
 800dbae:	2200      	movs	r2, #0
 800dbb0:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800dbb2:	1878      	adds	r0, r7, r1
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	2100      	movs	r1, #0
 800dbba:	f7ff fd45 	bl	800d648 <LmHandlerSend>
 800dbbe:	e000      	b.n	800dbc2 <McpsIndication+0xde>
    return;
 800dbc0:	46c0      	nop			; (mov r8, r8)
  }
}
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	b009      	add	sp, #36	; 0x24
 800dbc6:	bd90      	pop	{r4, r7, pc}
 800dbc8:	20000160 	.word	0x20000160
 800dbcc:	200009dc 	.word	0x200009dc

0800dbd0 <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800dbd0:	b590      	push	{r4, r7, lr}
 800dbd2:	b08d      	sub	sp, #52	; 0x34
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800dbd8:	4b22      	ldr	r3, [pc, #136]	; (800dc64 <MlmeConfirm+0x94>)
 800dbda:	2200      	movs	r2, #0
 800dbdc:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	785a      	ldrb	r2, [r3, #1]
 800dbe2:	4b20      	ldr	r3, [pc, #128]	; (800dc64 <MlmeConfirm+0x94>)
 800dbe4:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	0019      	movs	r1, r3
 800dbea:	2002      	movs	r0, #2
 800dbec:	f000 f878 	bl	800dce0 <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	2b0a      	cmp	r3, #10
 800dbf6:	d02c      	beq.n	800dc52 <MlmeConfirm+0x82>
 800dbf8:	dc2d      	bgt.n	800dc56 <MlmeConfirm+0x86>
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d002      	beq.n	800dc04 <MlmeConfirm+0x34>
 800dbfe:	2b04      	cmp	r3, #4
 800dc00:	d02b      	beq.n	800dc5a <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800dc02:	e028      	b.n	800dc56 <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800dc04:	210c      	movs	r1, #12
 800dc06:	187b      	adds	r3, r7, r1
 800dc08:	2206      	movs	r2, #6
 800dc0a:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800dc0c:	000c      	movs	r4, r1
 800dc0e:	187b      	adds	r3, r7, r1
 800dc10:	0018      	movs	r0, r3
 800dc12:	f004 ff85 	bl	8012b20 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800dc16:	193b      	adds	r3, r7, r4
 800dc18:	685a      	ldr	r2, [r3, #4]
 800dc1a:	4b13      	ldr	r3, [pc, #76]	; (800dc68 <MlmeConfirm+0x98>)
 800dc1c:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800dc1e:	4b13      	ldr	r3, [pc, #76]	; (800dc6c <MlmeConfirm+0x9c>)
 800dc20:	0018      	movs	r0, r3
 800dc22:	f7ff fee5 	bl	800d9f0 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	785b      	ldrb	r3, [r3, #1]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d108      	bne.n	800dc40 <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800dc2e:	4b0f      	ldr	r3, [pc, #60]	; (800dc6c <MlmeConfirm+0x9c>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800dc34:	4b0e      	ldr	r3, [pc, #56]	; (800dc70 <MlmeConfirm+0xa0>)
 800dc36:	785b      	ldrb	r3, [r3, #1]
 800dc38:	0018      	movs	r0, r3
 800dc3a:	f7ff fdd7 	bl	800d7ec <LmHandlerRequestClass>
 800dc3e:	e002      	b.n	800dc46 <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800dc40:	4b0a      	ldr	r3, [pc, #40]	; (800dc6c <MlmeConfirm+0x9c>)
 800dc42:	22ff      	movs	r2, #255	; 0xff
 800dc44:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800dc46:	4b0b      	ldr	r3, [pc, #44]	; (800dc74 <MlmeConfirm+0xa4>)
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	4a08      	ldr	r2, [pc, #32]	; (800dc6c <MlmeConfirm+0x9c>)
 800dc4c:	0010      	movs	r0, r2
 800dc4e:	4798      	blx	r3
    break;
 800dc50:	e004      	b.n	800dc5c <MlmeConfirm+0x8c>
    break;
 800dc52:	46c0      	nop			; (mov r8, r8)
 800dc54:	e002      	b.n	800dc5c <MlmeConfirm+0x8c>
      break;
 800dc56:	46c0      	nop			; (mov r8, r8)
 800dc58:	e000      	b.n	800dc5c <MlmeConfirm+0x8c>
    break;
 800dc5a:	46c0      	nop			; (mov r8, r8)
  }
}
 800dc5c:	46c0      	nop			; (mov r8, r8)
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	b00d      	add	sp, #52	; 0x34
 800dc62:	bd90      	pop	{r4, r7, pc}
 800dc64:	20000a1c 	.word	0x20000a1c
 800dc68:	20000138 	.word	0x20000138
 800dc6c:	2000015c 	.word	0x2000015c
 800dc70:	200009d4 	.word	0x200009d4
 800dc74:	200009dc 	.word	0x200009dc

0800dc78 <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800dc80:	4b05      	ldr	r3, [pc, #20]	; (800dc98 <MlmeIndication+0x20>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	785a      	ldrb	r2, [r3, #1]
 800dc8a:	4b03      	ldr	r3, [pc, #12]	; (800dc98 <MlmeIndication+0x20>)
 800dc8c:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800dc8e:	46c0      	nop			; (mov r8, r8)
  }
}
 800dc90:	46c0      	nop			; (mov r8, r8)
 800dc92:	46bd      	mov	sp, r7
 800dc94:	b002      	add	sp, #8
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	20000160 	.word	0x20000160

0800dc9c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b082      	sub	sp, #8
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	0002      	movs	r2, r0
 800dca4:	1dfb      	adds	r3, r7, #7
 800dca6:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800dca8:	1dfb      	adds	r3, r7, #7
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	2b04      	cmp	r3, #4
 800dcae:	d810      	bhi.n	800dcd2 <LmHandlerPackageIsInitialized+0x36>
 800dcb0:	1dfb      	adds	r3, r7, #7
 800dcb2:	781a      	ldrb	r2, [r3, #0]
 800dcb4:	4b09      	ldr	r3, [pc, #36]	; (800dcdc <LmHandlerPackageIsInitialized+0x40>)
 800dcb6:	0092      	lsls	r2, r2, #2
 800dcb8:	58d3      	ldr	r3, [r2, r3]
 800dcba:	689b      	ldr	r3, [r3, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d008      	beq.n	800dcd2 <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800dcc0:	1dfb      	adds	r3, r7, #7
 800dcc2:	781a      	ldrb	r2, [r3, #0]
 800dcc4:	4b05      	ldr	r3, [pc, #20]	; (800dcdc <LmHandlerPackageIsInitialized+0x40>)
 800dcc6:	0092      	lsls	r2, r2, #2
 800dcc8:	58d3      	ldr	r3, [r2, r3]
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	4798      	blx	r3
 800dcce:	0003      	movs	r3, r0
 800dcd0:	e000      	b.n	800dcd4 <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800dcd2:	2300      	movs	r3, #0
  }
}
 800dcd4:	0018      	movs	r0, r3
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	b002      	add	sp, #8
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	200009c0 	.word	0x200009c0

0800dce0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	0002      	movs	r2, r0
 800dce8:	6039      	str	r1, [r7, #0]
 800dcea:	1dfb      	adds	r3, r7, #7
 800dcec:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800dcee:	230f      	movs	r3, #15
 800dcf0:	18fb      	adds	r3, r7, r3
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	701a      	strb	r2, [r3, #0]
 800dcf6:	e07b      	b.n	800ddf0 <LmHandlerPackagesNotify+0x110>
  {
    if (LmHandlerPackages[i] != NULL)
 800dcf8:	230f      	movs	r3, #15
 800dcfa:	18fb      	adds	r3, r7, r3
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	569a      	ldrsb	r2, [r3, r2]
 800dd00:	4b41      	ldr	r3, [pc, #260]	; (800de08 <LmHandlerPackagesNotify+0x128>)
 800dd02:	0092      	lsls	r2, r2, #2
 800dd04:	58d3      	ldr	r3, [r2, r3]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d100      	bne.n	800dd0c <LmHandlerPackagesNotify+0x2c>
 800dd0a:	e05f      	b.n	800ddcc <LmHandlerPackagesNotify+0xec>
    {
      switch (notifyType)
 800dd0c:	1dfb      	adds	r3, r7, #7
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	2b02      	cmp	r3, #2
 800dd12:	d046      	beq.n	800dda2 <LmHandlerPackagesNotify+0xc2>
 800dd14:	dc5c      	bgt.n	800ddd0 <LmHandlerPackagesNotify+0xf0>
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d002      	beq.n	800dd20 <LmHandlerPackagesNotify+0x40>
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d015      	beq.n	800dd4a <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800dd1e:	e057      	b.n	800ddd0 <LmHandlerPackagesNotify+0xf0>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800dd20:	210f      	movs	r1, #15
 800dd22:	187b      	adds	r3, r7, r1
 800dd24:	2200      	movs	r2, #0
 800dd26:	569a      	ldrsb	r2, [r3, r2]
 800dd28:	4b37      	ldr	r3, [pc, #220]	; (800de08 <LmHandlerPackagesNotify+0x128>)
 800dd2a:	0092      	lsls	r2, r2, #2
 800dd2c:	58d3      	ldr	r3, [r2, r3]
 800dd2e:	695b      	ldr	r3, [r3, #20]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d04f      	beq.n	800ddd4 <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800dd34:	187b      	adds	r3, r7, r1
 800dd36:	2200      	movs	r2, #0
 800dd38:	569a      	ldrsb	r2, [r3, r2]
 800dd3a:	4b33      	ldr	r3, [pc, #204]	; (800de08 <LmHandlerPackagesNotify+0x128>)
 800dd3c:	0092      	lsls	r2, r2, #2
 800dd3e:	58d3      	ldr	r3, [r2, r3]
 800dd40:	695b      	ldr	r3, [r3, #20]
 800dd42:	683a      	ldr	r2, [r7, #0]
 800dd44:	0010      	movs	r0, r2
 800dd46:	4798      	blx	r3
          break;
 800dd48:	e044      	b.n	800ddd4 <LmHandlerPackagesNotify+0xf4>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800dd4a:	210f      	movs	r1, #15
 800dd4c:	187b      	adds	r3, r7, r1
 800dd4e:	2200      	movs	r2, #0
 800dd50:	569a      	ldrsb	r2, [r3, r2]
 800dd52:	4b2d      	ldr	r3, [pc, #180]	; (800de08 <LmHandlerPackagesNotify+0x128>)
 800dd54:	0092      	lsls	r2, r2, #2
 800dd56:	58d3      	ldr	r3, [r2, r3]
 800dd58:	699b      	ldr	r3, [r3, #24]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d03c      	beq.n	800ddd8 <LmHandlerPackagesNotify+0xf8>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800dd5e:	187b      	adds	r3, r7, r1
 800dd60:	2200      	movs	r2, #0
 800dd62:	569a      	ldrsb	r2, [r3, r2]
 800dd64:	4b28      	ldr	r3, [pc, #160]	; (800de08 <LmHandlerPackagesNotify+0x128>)
 800dd66:	0092      	lsls	r2, r2, #2
 800dd68:	58d3      	ldr	r3, [r2, r3]
 800dd6a:	781a      	ldrb	r2, [r3, #0]
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d00a      	beq.n	800dd8a <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800dd74:	187b      	adds	r3, r7, r1
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	b25b      	sxtb	r3, r3
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d12c      	bne.n	800ddd8 <LmHandlerPackagesNotify+0xf8>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800dd7e:	4b22      	ldr	r3, [pc, #136]	; (800de08 <LmHandlerPackagesNotify+0x128>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	4798      	blx	r3
 800dd86:	1e03      	subs	r3, r0, #0
 800dd88:	d026      	beq.n	800ddd8 <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800dd8a:	230f      	movs	r3, #15
 800dd8c:	18fb      	adds	r3, r7, r3
 800dd8e:	2200      	movs	r2, #0
 800dd90:	569a      	ldrsb	r2, [r3, r2]
 800dd92:	4b1d      	ldr	r3, [pc, #116]	; (800de08 <LmHandlerPackagesNotify+0x128>)
 800dd94:	0092      	lsls	r2, r2, #2
 800dd96:	58d3      	ldr	r3, [r2, r3]
 800dd98:	699b      	ldr	r3, [r3, #24]
 800dd9a:	683a      	ldr	r2, [r7, #0]
 800dd9c:	0010      	movs	r0, r2
 800dd9e:	4798      	blx	r3
          break;
 800dda0:	e01a      	b.n	800ddd8 <LmHandlerPackagesNotify+0xf8>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800dda2:	210f      	movs	r1, #15
 800dda4:	187b      	adds	r3, r7, r1
 800dda6:	2200      	movs	r2, #0
 800dda8:	569a      	ldrsb	r2, [r3, r2]
 800ddaa:	4b17      	ldr	r3, [pc, #92]	; (800de08 <LmHandlerPackagesNotify+0x128>)
 800ddac:	0092      	lsls	r2, r2, #2
 800ddae:	58d3      	ldr	r3, [r2, r3]
 800ddb0:	69db      	ldr	r3, [r3, #28]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d012      	beq.n	800dddc <LmHandlerPackagesNotify+0xfc>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800ddb6:	187b      	adds	r3, r7, r1
 800ddb8:	2200      	movs	r2, #0
 800ddba:	569a      	ldrsb	r2, [r3, r2]
 800ddbc:	4b12      	ldr	r3, [pc, #72]	; (800de08 <LmHandlerPackagesNotify+0x128>)
 800ddbe:	0092      	lsls	r2, r2, #2
 800ddc0:	58d3      	ldr	r3, [r2, r3]
 800ddc2:	69db      	ldr	r3, [r3, #28]
 800ddc4:	683a      	ldr	r2, [r7, #0]
 800ddc6:	0010      	movs	r0, r2
 800ddc8:	4798      	blx	r3
          break;
 800ddca:	e007      	b.n	800dddc <LmHandlerPackagesNotify+0xfc>
      }
    }
 800ddcc:	46c0      	nop			; (mov r8, r8)
 800ddce:	e006      	b.n	800ddde <LmHandlerPackagesNotify+0xfe>
          break;
 800ddd0:	46c0      	nop			; (mov r8, r8)
 800ddd2:	e004      	b.n	800ddde <LmHandlerPackagesNotify+0xfe>
          break;
 800ddd4:	46c0      	nop			; (mov r8, r8)
 800ddd6:	e002      	b.n	800ddde <LmHandlerPackagesNotify+0xfe>
          break;
 800ddd8:	46c0      	nop			; (mov r8, r8)
 800ddda:	e000      	b.n	800ddde <LmHandlerPackagesNotify+0xfe>
          break;
 800dddc:	46c0      	nop			; (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800ddde:	210f      	movs	r1, #15
 800dde0:	187b      	adds	r3, r7, r1
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	b25b      	sxtb	r3, r3
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	3301      	adds	r3, #1
 800ddea:	b2da      	uxtb	r2, r3
 800ddec:	187b      	adds	r3, r7, r1
 800ddee:	701a      	strb	r2, [r3, #0]
 800ddf0:	230f      	movs	r3, #15
 800ddf2:	18fb      	adds	r3, r7, r3
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	b25b      	sxtb	r3, r3
 800ddf8:	2b04      	cmp	r3, #4
 800ddfa:	dc00      	bgt.n	800ddfe <LmHandlerPackagesNotify+0x11e>
 800ddfc:	e77c      	b.n	800dcf8 <LmHandlerPackagesNotify+0x18>
  }
}
 800ddfe:	46c0      	nop			; (mov r8, r8)
 800de00:	46c0      	nop			; (mov r8, r8)
 800de02:	46bd      	mov	sp, r7
 800de04:	b004      	add	sp, #16
 800de06:	bd80      	pop	{r7, pc}
 800de08:	200009c0 	.word	0x200009c0

0800de0c <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af02      	add	r7, sp, #8
 800de12:	0002      	movs	r2, r0
 800de14:	1dfb      	adds	r3, r7, #7
 800de16:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800de18:	1dfb      	adds	r3, r7, #7
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	4a06      	ldr	r2, [pc, #24]	; (800de38 <DisplayClassUpdate+0x2c>)
 800de1e:	5cd3      	ldrb	r3, [r2, r3]
 800de20:	001a      	movs	r2, r3
 800de22:	4b06      	ldr	r3, [pc, #24]	; (800de3c <DisplayClassUpdate+0x30>)
 800de24:	9200      	str	r2, [sp, #0]
 800de26:	2200      	movs	r2, #0
 800de28:	2100      	movs	r1, #0
 800de2a:	2002      	movs	r0, #2
 800de2c:	f00d f9ae 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 800de30:	46c0      	nop			; (mov r8, r8)
 800de32:	46bd      	mov	sp, r7
 800de34:	b002      	add	sp, #8
 800de36:	bd80      	pop	{r7, pc}
 800de38:	0801e140 	.word	0x0801e140
 800de3c:	0801e124 	.word	0x0801e124

0800de40 <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800de44:	4b01      	ldr	r3, [pc, #4]	; (800de4c <LmphCompliancePackageFactory+0xc>)
}
 800de46:	0018      	movs	r0, r3
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	20000178 	.word	0x20000178

0800de50 <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	60b9      	str	r1, [r7, #8]
 800de5a:	1dfb      	adds	r3, r7, #7
 800de5c:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d010      	beq.n	800de86 <LmhpComplianceInit+0x36>
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00d      	beq.n	800de86 <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800de6a:	4b0c      	ldr	r3, [pc, #48]	; (800de9c <LmhpComplianceInit+0x4c>)
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800de70:	4b0b      	ldr	r3, [pc, #44]	; (800dea0 <LmhpComplianceInit+0x50>)
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800de76:	4b0a      	ldr	r3, [pc, #40]	; (800dea0 <LmhpComplianceInit+0x50>)
 800de78:	1dfa      	adds	r2, r7, #7
 800de7a:	7812      	ldrb	r2, [r2, #0]
 800de7c:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800de7e:	4b08      	ldr	r3, [pc, #32]	; (800dea0 <LmhpComplianceInit+0x50>)
 800de80:	2201      	movs	r2, #1
 800de82:	701a      	strb	r2, [r3, #0]
 800de84:	e006      	b.n	800de94 <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800de86:	4b05      	ldr	r3, [pc, #20]	; (800de9c <LmhpComplianceInit+0x4c>)
 800de88:	2200      	movs	r2, #0
 800de8a:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800de8c:	4b04      	ldr	r3, [pc, #16]	; (800dea0 <LmhpComplianceInit+0x50>)
 800de8e:	2200      	movs	r2, #0
 800de90:	701a      	strb	r2, [r3, #0]
  }
}
 800de92:	46c0      	nop			; (mov r8, r8)
 800de94:	46c0      	nop			; (mov r8, r8)
 800de96:	46bd      	mov	sp, r7
 800de98:	b004      	add	sp, #16
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	20000b54 	.word	0x20000b54
 800dea0:	20000b40 	.word	0x20000b40

0800dea4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800dea8:	4b02      	ldr	r3, [pc, #8]	; (800deb4 <LmhpComplianceIsInitialized+0x10>)
 800deaa:	781b      	ldrb	r3, [r3, #0]
}
 800deac:	0018      	movs	r0, r3
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	46c0      	nop			; (mov r8, r8)
 800deb4:	20000b40 	.word	0x20000b40

0800deb8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800debc:	4b06      	ldr	r3, [pc, #24]	; (800ded8 <LmhpComplianceIsRunning+0x20>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	2201      	movs	r2, #1
 800dec2:	4053      	eors	r3, r2
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800deca:	2300      	movs	r3, #0
 800decc:	e001      	b.n	800ded2 <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800dece:	4b02      	ldr	r3, [pc, #8]	; (800ded8 <LmhpComplianceIsRunning+0x20>)
 800ded0:	785b      	ldrb	r3, [r3, #1]
}
 800ded2:	0018      	movs	r0, r3
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	20000b40 	.word	0x20000b40

0800dedc <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800dee4:	4b0e      	ldr	r3, [pc, #56]	; (800df20 <LmhpComplianceOnMcpsConfirm+0x44>)
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	2201      	movs	r2, #1
 800deea:	4053      	eors	r3, r2
 800deec:	b2db      	uxtb	r3, r3
 800deee:	2b00      	cmp	r3, #0
 800def0:	d112      	bne.n	800df18 <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800def2:	4b0b      	ldr	r3, [pc, #44]	; (800df20 <LmhpComplianceOnMcpsConfirm+0x44>)
 800def4:	785b      	ldrb	r3, [r3, #1]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00f      	beq.n	800df1a <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800defe:	2b01      	cmp	r3, #1
 800df00:	d10b      	bne.n	800df1a <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800df06:	2b00      	cmp	r3, #0
 800df08:	d007      	beq.n	800df1a <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800df0a:	4b05      	ldr	r3, [pc, #20]	; (800df20 <LmhpComplianceOnMcpsConfirm+0x44>)
 800df0c:	899b      	ldrh	r3, [r3, #12]
 800df0e:	3301      	adds	r3, #1
 800df10:	b29a      	uxth	r2, r3
 800df12:	4b03      	ldr	r3, [pc, #12]	; (800df20 <LmhpComplianceOnMcpsConfirm+0x44>)
 800df14:	819a      	strh	r2, [r3, #12]
 800df16:	e000      	b.n	800df1a <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800df18:	46c0      	nop			; (mov r8, r8)
  }
}
 800df1a:	46bd      	mov	sp, r7
 800df1c:	b002      	add	sp, #8
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	20000b40 	.word	0x20000b40

0800df24 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800df2c:	4b0d      	ldr	r3, [pc, #52]	; (800df64 <LmhpComplianceOnMlmeConfirm+0x40>)
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	2201      	movs	r2, #1
 800df32:	4053      	eors	r3, r2
 800df34:	b2db      	uxtb	r3, r3
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10f      	bne.n	800df5a <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	2b04      	cmp	r3, #4
 800df40:	d10c      	bne.n	800df5c <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800df42:	4b08      	ldr	r3, [pc, #32]	; (800df64 <LmhpComplianceOnMlmeConfirm+0x40>)
 800df44:	2201      	movs	r2, #1
 800df46:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	7a1a      	ldrb	r2, [r3, #8]
 800df4c:	4b05      	ldr	r3, [pc, #20]	; (800df64 <LmhpComplianceOnMlmeConfirm+0x40>)
 800df4e:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	7a5a      	ldrb	r2, [r3, #9]
 800df54:	4b03      	ldr	r3, [pc, #12]	; (800df64 <LmhpComplianceOnMlmeConfirm+0x40>)
 800df56:	741a      	strb	r2, [r3, #16]
 800df58:	e000      	b.n	800df5c <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800df5a:	46c0      	nop			; (mov r8, r8)
  }
}
 800df5c:	46bd      	mov	sp, r7
 800df5e:	b002      	add	sp, #8
 800df60:	bd80      	pop	{r7, pc}
 800df62:	46c0      	nop			; (mov r8, r8)
 800df64:	20000b40 	.word	0x20000b40

0800df68 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800df68:	b5b0      	push	{r4, r5, r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800df6e:	4b32      	ldr	r3, [pc, #200]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	2201      	movs	r2, #1
 800df74:	4053      	eors	r3, r2
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d002      	beq.n	800df82 <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800df7c:	2301      	movs	r3, #1
 800df7e:	425b      	negs	r3, r3
 800df80:	e056      	b.n	800e030 <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800df82:	4b2d      	ldr	r3, [pc, #180]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800df84:	7b9b      	ldrb	r3, [r3, #14]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d019      	beq.n	800dfbe <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800df8a:	4b2b      	ldr	r3, [pc, #172]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800df90:	4b29      	ldr	r3, [pc, #164]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800df92:	2203      	movs	r2, #3
 800df94:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800df96:	4b28      	ldr	r3, [pc, #160]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	2205      	movs	r2, #5
 800df9c:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800df9e:	4b26      	ldr	r3, [pc, #152]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	4a24      	ldr	r2, [pc, #144]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfa6:	7bd2      	ldrb	r2, [r2, #15]
 800dfa8:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800dfaa:	4b23      	ldr	r3, [pc, #140]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	3302      	adds	r3, #2
 800dfb0:	4a21      	ldr	r2, [pc, #132]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfb2:	7c12      	ldrb	r2, [r2, #16]
 800dfb4:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800dfb6:	4b20      	ldr	r3, [pc, #128]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfb8:	2201      	movs	r2, #1
 800dfba:	709a      	strb	r2, [r3, #2]
 800dfbc:	e01c      	b.n	800dff8 <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800dfbe:	4b1e      	ldr	r3, [pc, #120]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfc0:	789b      	ldrb	r3, [r3, #2]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d005      	beq.n	800dfd2 <LmhpComplianceTxProcess+0x6a>
 800dfc6:	2b04      	cmp	r3, #4
 800dfc8:	d116      	bne.n	800dff8 <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800dfca:	4b1b      	ldr	r3, [pc, #108]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfcc:	2201      	movs	r2, #1
 800dfce:	709a      	strb	r2, [r3, #2]
        break;
 800dfd0:	e012      	b.n	800dff8 <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800dfd2:	4b19      	ldr	r3, [pc, #100]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfd4:	2202      	movs	r2, #2
 800dfd6:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800dfd8:	4b17      	ldr	r3, [pc, #92]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfda:	899b      	ldrh	r3, [r3, #12]
 800dfdc:	0a1b      	lsrs	r3, r3, #8
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	4b15      	ldr	r3, [pc, #84]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	b2d2      	uxtb	r2, r2
 800dfe6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800dfe8:	4b13      	ldr	r3, [pc, #76]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfea:	899a      	ldrh	r2, [r3, #12]
 800dfec:	4b12      	ldr	r3, [pc, #72]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	3301      	adds	r3, #1
 800dff2:	b2d2      	uxtb	r2, r2
 800dff4:	701a      	strb	r2, [r3, #0]
        break;
 800dff6:	46c0      	nop			; (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800dff8:	2508      	movs	r5, #8
 800dffa:	197b      	adds	r3, r7, r5
 800dffc:	22e0      	movs	r2, #224	; 0xe0
 800dffe:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800e000:	4b0d      	ldr	r3, [pc, #52]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800e002:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800e004:	197b      	adds	r3, r7, r5
 800e006:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800e008:	4b0b      	ldr	r3, [pc, #44]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800e00a:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800e00c:	197b      	adds	r3, r7, r5
 800e00e:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800e014:	4b09      	ldr	r3, [pc, #36]	; (800e03c <LmhpComplianceTxProcess+0xd4>)
 800e016:	0018      	movs	r0, r3
 800e018:	f00d ff7a 	bl	801bf10 <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800e01c:	4b08      	ldr	r3, [pc, #32]	; (800e040 <LmhpComplianceTxProcess+0xd8>)
 800e01e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e020:	4b05      	ldr	r3, [pc, #20]	; (800e038 <LmhpComplianceTxProcess+0xd0>)
 800e022:	791b      	ldrb	r3, [r3, #4]
 800e024:	0019      	movs	r1, r3
 800e026:	1d3a      	adds	r2, r7, #4
 800e028:	1978      	adds	r0, r7, r5
 800e02a:	2301      	movs	r3, #1
 800e02c:	47a0      	blx	r4
 800e02e:	0003      	movs	r3, r0
                                             true);
}
 800e030:	0018      	movs	r0, r3
 800e032:	46bd      	mov	sp, r7
 800e034:	b004      	add	sp, #16
 800e036:	bdb0      	pop	{r4, r5, r7, pc}
 800e038:	20000b40 	.word	0x20000b40
 800e03c:	20000b28 	.word	0x20000b28
 800e040:	20000178 	.word	0x20000178

0800e044 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b0a2      	sub	sp, #136	; 0x88
 800e048:	af02      	add	r7, sp, #8
 800e04a:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800e04c:	4be1      	ldr	r3, [pc, #900]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	2201      	movs	r2, #1
 800e052:	4053      	eors	r3, r2
 800e054:	b2db      	uxtb	r3, r3
 800e056:	2b00      	cmp	r3, #0
 800e058:	d000      	beq.n	800e05c <LmhpComplianceOnMcpsIndication+0x18>
 800e05a:	e1b2      	b.n	800e3c2 <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	7b5b      	ldrb	r3, [r3, #13]
 800e060:	2201      	movs	r2, #1
 800e062:	4053      	eors	r3, r2
 800e064:	b2db      	uxtb	r3, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d000      	beq.n	800e06c <LmhpComplianceOnMcpsIndication+0x28>
 800e06a:	e1ac      	b.n	800e3c6 <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800e06c:	4bd9      	ldr	r3, [pc, #868]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e06e:	785b      	ldrb	r3, [r3, #1]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d00c      	beq.n	800e08e <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	7c9b      	ldrb	r3, [r3, #18]
 800e078:	2201      	movs	r2, #1
 800e07a:	4053      	eors	r3, r2
 800e07c:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d005      	beq.n	800e08e <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800e082:	4bd4      	ldr	r3, [pc, #848]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e084:	899b      	ldrh	r3, [r3, #12]
 800e086:	3301      	adds	r3, #1
 800e088:	b29a      	uxth	r2, r3
 800e08a:	4bd2      	ldr	r3, [pc, #840]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e08c:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	78db      	ldrb	r3, [r3, #3]
 800e092:	2be0      	cmp	r3, #224	; 0xe0
 800e094:	d000      	beq.n	800e098 <LmhpComplianceOnMcpsIndication+0x54>
 800e096:	e198      	b.n	800e3ca <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800e098:	4bce      	ldr	r3, [pc, #824]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e09a:	785b      	ldrb	r3, [r3, #1]
 800e09c:	2201      	movs	r2, #1
 800e09e:	4053      	eors	r3, r2
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d063      	beq.n	800e16e <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	7b1b      	ldrb	r3, [r3, #12]
 800e0aa:	2b04      	cmp	r3, #4
 800e0ac:	d000      	beq.n	800e0b0 <LmhpComplianceOnMcpsIndication+0x6c>
 800e0ae:	e1a0      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d000      	beq.n	800e0bc <LmhpComplianceOnMcpsIndication+0x78>
 800e0ba:	e19a      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d000      	beq.n	800e0ca <LmhpComplianceOnMcpsIndication+0x86>
 800e0c8:	e193      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	3302      	adds	r3, #2
 800e0d0:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d000      	beq.n	800e0d8 <LmhpComplianceOnMcpsIndication+0x94>
 800e0d6:	e18c      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	3303      	adds	r3, #3
 800e0de:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d000      	beq.n	800e0e6 <LmhpComplianceOnMcpsIndication+0xa2>
 800e0e4:	e185      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800e0e6:	4bbb      	ldr	r3, [pc, #748]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800e0ec:	4bb9      	ldr	r3, [pc, #740]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0ee:	22e0      	movs	r2, #224	; 0xe0
 800e0f0:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800e0f2:	4bb8      	ldr	r3, [pc, #736]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0f4:	2202      	movs	r2, #2
 800e0f6:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800e0f8:	4bb6      	ldr	r3, [pc, #728]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800e0fe:	4bb5      	ldr	r3, [pc, #724]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e100:	2200      	movs	r2, #0
 800e102:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800e104:	4bb3      	ldr	r3, [pc, #716]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e106:	2200      	movs	r2, #0
 800e108:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800e10a:	4bb2      	ldr	r3, [pc, #712]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e10c:	2200      	movs	r2, #0
 800e10e:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800e110:	4bb0      	ldr	r3, [pc, #704]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e112:	2201      	movs	r2, #1
 800e114:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800e116:	4baf      	ldr	r3, [pc, #700]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e118:	2201      	movs	r2, #1
 800e11a:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800e11c:	2108      	movs	r1, #8
 800e11e:	187b      	adds	r3, r7, r1
 800e120:	2204      	movs	r2, #4
 800e122:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800e124:	187b      	adds	r3, r7, r1
 800e126:	2201      	movs	r2, #1
 800e128:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e12a:	187b      	adds	r3, r7, r1
 800e12c:	0018      	movs	r0, r3
 800e12e:	f004 fe55 	bl	8012ddc <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800e132:	2000      	movs	r0, #0
 800e134:	f005 fc7e 	bl	8013a34 <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800e138:	4ba7      	ldr	r3, [pc, #668]	; (800e3d8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d003      	beq.n	800e14a <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800e142:	4ba5      	ldr	r3, [pc, #660]	; (800e3d8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800e14a:	4ba4      	ldr	r3, [pc, #656]	; (800e3dc <LmhpComplianceOnMcpsIndication+0x398>)
 800e14c:	2201      	movs	r2, #1
 800e14e:	4251      	negs	r1, r2
 800e150:	48a3      	ldr	r0, [pc, #652]	; (800e3e0 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e152:	2200      	movs	r2, #0
 800e154:	9200      	str	r2, [sp, #0]
 800e156:	2200      	movs	r2, #0
 800e158:	f00d fea2 	bl	801bea0 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800e15c:	4aa1      	ldr	r2, [pc, #644]	; (800e3e4 <LmhpComplianceOnMcpsIndication+0x3a0>)
 800e15e:	4ba0      	ldr	r3, [pc, #640]	; (800e3e0 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e160:	0011      	movs	r1, r2
 800e162:	0018      	movs	r0, r3
 800e164:	f00d ffc4 	bl	801c0f0 <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800e168:	f7ff fefe 	bl	800df68 <LmhpComplianceTxProcess>
 800e16c:	e141      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	781a      	ldrb	r2, [r3, #0]
 800e174:	4b97      	ldr	r3, [pc, #604]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e176:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800e178:	4b96      	ldr	r3, [pc, #600]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e17a:	789b      	ldrb	r3, [r3, #2]
 800e17c:	2b0a      	cmp	r3, #10
 800e17e:	d900      	bls.n	800e182 <LmhpComplianceOnMcpsIndication+0x13e>
 800e180:	e125      	b.n	800e3ce <LmhpComplianceOnMcpsIndication+0x38a>
 800e182:	009a      	lsls	r2, r3, #2
 800e184:	4b98      	ldr	r3, [pc, #608]	; (800e3e8 <LmhpComplianceOnMcpsIndication+0x3a4>)
 800e186:	18d3      	adds	r3, r2, r3
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800e18c:	4b94      	ldr	r3, [pc, #592]	; (800e3e0 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e18e:	0018      	movs	r0, r3
 800e190:	f00d ff36 	bl	801c000 <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800e194:	4b8f      	ldr	r3, [pc, #572]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e196:	2200      	movs	r2, #0
 800e198:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800e19a:	4b8e      	ldr	r3, [pc, #568]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e19c:	2200      	movs	r2, #0
 800e19e:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800e1a0:	2108      	movs	r1, #8
 800e1a2:	187b      	adds	r3, r7, r1
 800e1a4:	2204      	movs	r2, #4
 800e1a6:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e1a8:	4b8b      	ldr	r3, [pc, #556]	; (800e3d8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	781a      	ldrb	r2, [r3, #0]
 800e1ae:	187b      	adds	r3, r7, r1
 800e1b0:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e1b2:	187b      	adds	r3, r7, r1
 800e1b4:	0018      	movs	r0, r3
 800e1b6:	f004 fe11 	bl	8012ddc <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800e1ba:	4b87      	ldr	r3, [pc, #540]	; (800e3d8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	785b      	ldrb	r3, [r3, #1]
 800e1c0:	0018      	movs	r0, r3
 800e1c2:	f005 fc37 	bl	8013a34 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800e1c6:	4b84      	ldr	r3, [pc, #528]	; (800e3d8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d100      	bne.n	800e1d2 <LmhpComplianceOnMcpsIndication+0x18e>
 800e1d0:	e10e      	b.n	800e3f0 <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800e1d2:	4b81      	ldr	r3, [pc, #516]	; (800e3d8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	4798      	blx	r3
        }
      }
      break;
 800e1da:	e109      	b.n	800e3f0 <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800e1dc:	4b7d      	ldr	r3, [pc, #500]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e1de:	2202      	movs	r2, #2
 800e1e0:	71da      	strb	r2, [r3, #7]
        break;
 800e1e2:	e106      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800e1e4:	4b7b      	ldr	r3, [pc, #492]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800e1ea:	4b7a      	ldr	r3, [pc, #488]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	709a      	strb	r2, [r3, #2]
        break;
 800e1f0:	e0ff      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800e1f2:	4b78      	ldr	r3, [pc, #480]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800e1f8:	4b76      	ldr	r3, [pc, #472]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	709a      	strb	r2, [r3, #2]
        break;
 800e1fe:	e0f8      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	7b1a      	ldrb	r2, [r3, #12]
 800e204:	4b73      	ldr	r3, [pc, #460]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e206:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800e208:	4b72      	ldr	r3, [pc, #456]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	2204      	movs	r2, #4
 800e20e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800e210:	237f      	movs	r3, #127	; 0x7f
 800e212:	18fb      	adds	r3, r7, r3
 800e214:	2201      	movs	r2, #1
 800e216:	701a      	strb	r2, [r3, #0]
 800e218:	e013      	b.n	800e242 <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	689a      	ldr	r2, [r3, #8]
 800e21e:	207f      	movs	r0, #127	; 0x7f
 800e220:	183b      	adds	r3, r7, r0
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	18d3      	adds	r3, r2, r3
 800e226:	781a      	ldrb	r2, [r3, #0]
 800e228:	4b6a      	ldr	r3, [pc, #424]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e22a:	6899      	ldr	r1, [r3, #8]
 800e22c:	183b      	adds	r3, r7, r0
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	18cb      	adds	r3, r1, r3
 800e232:	3201      	adds	r2, #1
 800e234:	b2d2      	uxtb	r2, r2
 800e236:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800e238:	183b      	adds	r3, r7, r0
 800e23a:	781a      	ldrb	r2, [r3, #0]
 800e23c:	183b      	adds	r3, r7, r0
 800e23e:	3201      	adds	r2, #1
 800e240:	701a      	strb	r2, [r3, #0]
 800e242:	4b64      	ldr	r3, [pc, #400]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e244:	799a      	ldrb	r2, [r3, #6]
 800e246:	4b63      	ldr	r3, [pc, #396]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e248:	79db      	ldrb	r3, [r3, #7]
 800e24a:	1c18      	adds	r0, r3, #0
 800e24c:	1c11      	adds	r1, r2, #0
 800e24e:	b2ca      	uxtb	r2, r1
 800e250:	b2c3      	uxtb	r3, r0
 800e252:	429a      	cmp	r2, r3
 800e254:	d900      	bls.n	800e258 <LmhpComplianceOnMcpsIndication+0x214>
 800e256:	1c01      	adds	r1, r0, #0
 800e258:	b2cb      	uxtb	r3, r1
 800e25a:	227f      	movs	r2, #127	; 0x7f
 800e25c:	18ba      	adds	r2, r7, r2
 800e25e:	7812      	ldrb	r2, [r2, #0]
 800e260:	429a      	cmp	r2, r3
 800e262:	d3da      	bcc.n	800e21a <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800e264:	e0c5      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800e266:	2168      	movs	r1, #104	; 0x68
 800e268:	187b      	adds	r3, r7, r1
 800e26a:	2204      	movs	r2, #4
 800e26c:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800e26e:	187b      	adds	r3, r7, r1
 800e270:	0018      	movs	r0, r3
 800e272:	f005 f939 	bl	80134e8 <LoRaMacMlmeRequest>
      }
      break;
 800e276:	e0bc      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800e278:	4b59      	ldr	r3, [pc, #356]	; (800e3e0 <LmhpComplianceOnMcpsIndication+0x39c>)
 800e27a:	0018      	movs	r0, r3
 800e27c:	f00d fec0 	bl	801c000 <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800e280:	4b54      	ldr	r3, [pc, #336]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e282:	2200      	movs	r2, #0
 800e284:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800e286:	4b53      	ldr	r3, [pc, #332]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e288:	2200      	movs	r2, #0
 800e28a:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800e28c:	2108      	movs	r1, #8
 800e28e:	187b      	adds	r3, r7, r1
 800e290:	2204      	movs	r2, #4
 800e292:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e294:	4b50      	ldr	r3, [pc, #320]	; (800e3d8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	781a      	ldrb	r2, [r3, #0]
 800e29a:	187b      	adds	r3, r7, r1
 800e29c:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e29e:	187b      	adds	r3, r7, r1
 800e2a0:	0018      	movs	r0, r3
 800e2a2:	f004 fd9b 	bl	8012ddc <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800e2a6:	4b4c      	ldr	r3, [pc, #304]	; (800e3d8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	785b      	ldrb	r3, [r3, #1]
 800e2ac:	0018      	movs	r0, r3
 800e2ae:	f005 fbc1 	bl	8013a34 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800e2b2:	4b49      	ldr	r3, [pc, #292]	; (800e3d8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d003      	beq.n	800e2c4 <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800e2bc:	4b46      	ldr	r3, [pc, #280]	; (800e3d8 <LmhpComplianceOnMcpsIndication+0x394>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800e2c4:	4b49      	ldr	r3, [pc, #292]	; (800e3ec <LmhpComplianceOnMcpsIndication+0x3a8>)
 800e2c6:	6a1b      	ldr	r3, [r3, #32]
 800e2c8:	2002      	movs	r0, #2
 800e2ca:	4798      	blx	r3
      }
      break;
 800e2cc:	e091      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	7b1b      	ldrb	r3, [r3, #12]
 800e2d2:	2b03      	cmp	r3, #3
 800e2d4:	d114      	bne.n	800e300 <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800e2d6:	2154      	movs	r1, #84	; 0x54
 800e2d8:	187b      	adds	r3, r7, r1
 800e2da:	2205      	movs	r2, #5
 800e2dc:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	689b      	ldr	r3, [r3, #8]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	021b      	lsls	r3, r3, #8
 800e2e8:	b21a      	sxth	r2, r3
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	3302      	adds	r3, #2
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	b21b      	sxth	r3, r3
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	b21b      	sxth	r3, r3
 800e2f8:	b29a      	uxth	r2, r3
 800e2fa:	187b      	adds	r3, r7, r1
 800e2fc:	809a      	strh	r2, [r3, #4]
 800e2fe:	e031      	b.n	800e364 <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	7b1b      	ldrb	r3, [r3, #12]
 800e304:	2b07      	cmp	r3, #7
 800e306:	d12d      	bne.n	800e364 <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800e308:	2154      	movs	r1, #84	; 0x54
 800e30a:	187b      	adds	r3, r7, r1
 800e30c:	2206      	movs	r2, #6
 800e30e:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	3301      	adds	r3, #1
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	021b      	lsls	r3, r3, #8
 800e31a:	b21a      	sxth	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	3302      	adds	r3, #2
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	b21b      	sxth	r3, r3
 800e326:	4313      	orrs	r3, r2
 800e328:	b21b      	sxth	r3, r3
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	187b      	adds	r3, r7, r1
 800e32e:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	3303      	adds	r3, #3
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	041a      	lsls	r2, r3, #16
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	3304      	adds	r3, #4
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	021b      	lsls	r3, r3, #8
 800e344:	431a      	orrs	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	689b      	ldr	r3, [r3, #8]
 800e34a:	3305      	adds	r3, #5
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	4313      	orrs	r3, r2
 800e350:	001a      	movs	r2, r3
 800e352:	2364      	movs	r3, #100	; 0x64
 800e354:	435a      	muls	r2, r3
 800e356:	187b      	adds	r3, r7, r1
 800e358:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	799a      	ldrb	r2, [r3, #6]
 800e360:	187b      	adds	r3, r7, r1
 800e362:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800e364:	2354      	movs	r3, #84	; 0x54
 800e366:	18fb      	adds	r3, r7, r3
 800e368:	0018      	movs	r0, r3
 800e36a:	f005 f8bd 	bl	80134e8 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800e36e:	4b19      	ldr	r3, [pc, #100]	; (800e3d4 <LmhpComplianceOnMcpsIndication+0x390>)
 800e370:	2201      	movs	r2, #1
 800e372:	709a      	strb	r2, [r3, #2]
      }
      break;
 800e374:	e03d      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800e376:	2140      	movs	r1, #64	; 0x40
 800e378:	187b      	adds	r3, r7, r1
 800e37a:	220a      	movs	r2, #10
 800e37c:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800e37e:	187b      	adds	r3, r7, r1
 800e380:	0018      	movs	r0, r3
 800e382:	f005 f8b1 	bl	80134e8 <LoRaMacMlmeRequest>
      }
      break;
 800e386:	e034      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800e388:	2108      	movs	r1, #8
 800e38a:	187b      	adds	r3, r7, r1
 800e38c:	2200      	movs	r2, #0
 800e38e:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	689b      	ldr	r3, [r3, #8]
 800e394:	3301      	adds	r3, #1
 800e396:	781a      	ldrb	r2, [r3, #0]
 800e398:	187b      	adds	r3, r7, r1
 800e39a:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800e39c:	187b      	adds	r3, r7, r1
 800e39e:	0018      	movs	r0, r3
 800e3a0:	f004 fd1c 	bl	8012ddc <LoRaMacMibSetRequestConfirm>
      }
      break;
 800e3a4:	e025      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e3a6:	212c      	movs	r1, #44	; 0x2c
 800e3a8:	187b      	adds	r3, r7, r1
 800e3aa:	220d      	movs	r2, #13
 800e3ac:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	785a      	ldrb	r2, [r3, #1]
 800e3b4:	187b      	adds	r3, r7, r1
 800e3b6:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800e3b8:	187b      	adds	r3, r7, r1
 800e3ba:	0018      	movs	r0, r3
 800e3bc:	f005 f894 	bl	80134e8 <LoRaMacMlmeRequest>
      }
      break;
 800e3c0:	e017      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e3c2:	46c0      	nop			; (mov r8, r8)
 800e3c4:	e015      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e3c6:	46c0      	nop			; (mov r8, r8)
 800e3c8:	e013      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800e3ca:	46c0      	nop			; (mov r8, r8)
 800e3cc:	e011      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800e3ce:	46c0      	nop			; (mov r8, r8)
 800e3d0:	e00f      	b.n	800e3f2 <LmhpComplianceOnMcpsIndication+0x3ae>
 800e3d2:	46c0      	nop			; (mov r8, r8)
 800e3d4:	20000b40 	.word	0x20000b40
 800e3d8:	20000b54 	.word	0x20000b54
 800e3dc:	0800e403 	.word	0x0800e403
 800e3e0:	20000b28 	.word	0x20000b28
 800e3e4:	00004e20 	.word	0x00004e20
 800e3e8:	0801e154 	.word	0x0801e154
 800e3ec:	20000178 	.word	0x20000178
      break;
 800e3f0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	b020      	add	sp, #128	; 0x80
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800e3fc:	46c0      	nop			; (mov r8, r8)
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}

0800e402 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800e402:	b580      	push	{r7, lr}
 800e404:	b082      	sub	sp, #8
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800e40a:	f7ff fdad 	bl	800df68 <LmhpComplianceTxProcess>
}
 800e40e:	46c0      	nop			; (mov r8, r8)
 800e410:	46bd      	mov	sp, r7
 800e412:	b002      	add	sp, #8
 800e414:	bd80      	pop	{r7, pc}

0800e416 <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b082      	sub	sp, #8
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	0002      	movs	r2, r0
 800e41e:	1dfb      	adds	r3, r7, #7
 800e420:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800e422:	46c0      	nop			; (mov r8, r8)
 800e424:	46bd      	mov	sp, r7
 800e426:	b002      	add	sp, #8
 800e428:	bd80      	pop	{r7, pc}

0800e42a <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800e42e:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e430:	0018      	movs	r0, r3
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800e436:	b580      	push	{r7, lr}
 800e438:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800e43a:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800e43c:	0018      	movs	r0, r3
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
	...

0800e444 <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800e444:	b5b0      	push	{r4, r5, r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e44a:	f00d ff09 	bl	801c260 <UTIL_TIMER_GetCurrentTime>
 800e44e:	0002      	movs	r2, r0
 800e450:	4b14      	ldr	r3, [pc, #80]	; (800e4a4 <OnRadioTxDone+0x60>)
 800e452:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e454:	4d14      	ldr	r5, [pc, #80]	; (800e4a8 <OnRadioTxDone+0x64>)
 800e456:	23ce      	movs	r3, #206	; 0xce
 800e458:	009c      	lsls	r4, r3, #2
 800e45a:	003b      	movs	r3, r7
 800e45c:	0018      	movs	r0, r3
 800e45e:	f00d fcad 	bl	801bdbc <SysTimeGet>
 800e462:	003a      	movs	r2, r7
 800e464:	192b      	adds	r3, r5, r4
 800e466:	ca03      	ldmia	r2!, {r0, r1}
 800e468:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e46a:	4b10      	ldr	r3, [pc, #64]	; (800e4ac <OnRadioTxDone+0x68>)
 800e46c:	781a      	ldrb	r2, [r3, #0]
 800e46e:	2110      	movs	r1, #16
 800e470:	430a      	orrs	r2, r1
 800e472:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e474:	4a0c      	ldr	r2, [pc, #48]	; (800e4a8 <OnRadioTxDone+0x64>)
 800e476:	23d2      	movs	r3, #210	; 0xd2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	58d3      	ldr	r3, [r2, r3]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00c      	beq.n	800e49a <OnRadioTxDone+0x56>
 800e480:	4a09      	ldr	r2, [pc, #36]	; (800e4a8 <OnRadioTxDone+0x64>)
 800e482:	23d2      	movs	r3, #210	; 0xd2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	58d3      	ldr	r3, [r2, r3]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d005      	beq.n	800e49a <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e48e:	4a06      	ldr	r2, [pc, #24]	; (800e4a8 <OnRadioTxDone+0x64>)
 800e490:	23d2      	movs	r3, #210	; 0xd2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	58d3      	ldr	r3, [r2, r3]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800e49a:	46c0      	nop			; (mov r8, r8)
 800e49c:	46bd      	mov	sp, r7
 800e49e:	b002      	add	sp, #8
 800e4a0:	bdb0      	pop	{r4, r5, r7, pc}
 800e4a2:	46c0      	nop			; (mov r8, r8)
 800e4a4:	20000b58 	.word	0x20000b58
 800e4a8:	20000b6c 	.word	0x20000b6c
 800e4ac:	2000119c 	.word	0x2000119c

0800e4b0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e4b0:	b5b0      	push	{r4, r5, r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	000c      	movs	r4, r1
 800e4ba:	0010      	movs	r0, r2
 800e4bc:	0019      	movs	r1, r3
 800e4be:	250a      	movs	r5, #10
 800e4c0:	197b      	adds	r3, r7, r5
 800e4c2:	1c22      	adds	r2, r4, #0
 800e4c4:	801a      	strh	r2, [r3, #0]
 800e4c6:	2408      	movs	r4, #8
 800e4c8:	193b      	adds	r3, r7, r4
 800e4ca:	1c02      	adds	r2, r0, #0
 800e4cc:	801a      	strh	r2, [r3, #0]
 800e4ce:	1dfb      	adds	r3, r7, #7
 800e4d0:	1c0a      	adds	r2, r1, #0
 800e4d2:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e4d4:	f00d fec4 	bl	801c260 <UTIL_TIMER_GetCurrentTime>
 800e4d8:	0002      	movs	r2, r0
 800e4da:	4b16      	ldr	r3, [pc, #88]	; (800e534 <OnRadioRxDone+0x84>)
 800e4dc:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800e4de:	4b15      	ldr	r3, [pc, #84]	; (800e534 <OnRadioRxDone+0x84>)
 800e4e0:	68fa      	ldr	r2, [r7, #12]
 800e4e2:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800e4e4:	4b13      	ldr	r3, [pc, #76]	; (800e534 <OnRadioRxDone+0x84>)
 800e4e6:	197a      	adds	r2, r7, r5
 800e4e8:	8812      	ldrh	r2, [r2, #0]
 800e4ea:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800e4ec:	4b11      	ldr	r3, [pc, #68]	; (800e534 <OnRadioRxDone+0x84>)
 800e4ee:	193a      	adds	r2, r7, r4
 800e4f0:	8812      	ldrh	r2, [r2, #0]
 800e4f2:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800e4f4:	4b0f      	ldr	r3, [pc, #60]	; (800e534 <OnRadioRxDone+0x84>)
 800e4f6:	1dfa      	adds	r2, r7, #7
 800e4f8:	7812      	ldrb	r2, [r2, #0]
 800e4fa:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e4fc:	4b0e      	ldr	r3, [pc, #56]	; (800e538 <OnRadioRxDone+0x88>)
 800e4fe:	781a      	ldrb	r2, [r3, #0]
 800e500:	2108      	movs	r1, #8
 800e502:	430a      	orrs	r2, r1
 800e504:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e506:	4a0d      	ldr	r2, [pc, #52]	; (800e53c <OnRadioRxDone+0x8c>)
 800e508:	23d2      	movs	r3, #210	; 0xd2
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	58d3      	ldr	r3, [r2, r3]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00c      	beq.n	800e52c <OnRadioRxDone+0x7c>
 800e512:	4a0a      	ldr	r2, [pc, #40]	; (800e53c <OnRadioRxDone+0x8c>)
 800e514:	23d2      	movs	r3, #210	; 0xd2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	58d3      	ldr	r3, [r2, r3]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d005      	beq.n	800e52c <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e520:	4a06      	ldr	r2, [pc, #24]	; (800e53c <OnRadioRxDone+0x8c>)
 800e522:	23d2      	movs	r3, #210	; 0xd2
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	58d3      	ldr	r3, [r2, r3]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800e52c:	46c0      	nop			; (mov r8, r8)
 800e52e:	46bd      	mov	sp, r7
 800e530:	b004      	add	sp, #16
 800e532:	bdb0      	pop	{r4, r5, r7, pc}
 800e534:	20000b5c 	.word	0x20000b5c
 800e538:	2000119c 	.word	0x2000119c
 800e53c:	20000b6c 	.word	0x20000b6c

0800e540 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e540:	b580      	push	{r7, lr}
 800e542:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e544:	4b0d      	ldr	r3, [pc, #52]	; (800e57c <OnRadioTxTimeout+0x3c>)
 800e546:	781a      	ldrb	r2, [r3, #0]
 800e548:	2104      	movs	r1, #4
 800e54a:	430a      	orrs	r2, r1
 800e54c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e54e:	4a0c      	ldr	r2, [pc, #48]	; (800e580 <OnRadioTxTimeout+0x40>)
 800e550:	23d2      	movs	r3, #210	; 0xd2
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	58d3      	ldr	r3, [r2, r3]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d00c      	beq.n	800e574 <OnRadioTxTimeout+0x34>
 800e55a:	4a09      	ldr	r2, [pc, #36]	; (800e580 <OnRadioTxTimeout+0x40>)
 800e55c:	23d2      	movs	r3, #210	; 0xd2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	58d3      	ldr	r3, [r2, r3]
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d005      	beq.n	800e574 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e568:	4a05      	ldr	r2, [pc, #20]	; (800e580 <OnRadioTxTimeout+0x40>)
 800e56a:	23d2      	movs	r3, #210	; 0xd2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	58d3      	ldr	r3, [r2, r3]
 800e570:	68db      	ldr	r3, [r3, #12]
 800e572:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800e574:	46c0      	nop			; (mov r8, r8)
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	46c0      	nop			; (mov r8, r8)
 800e57c:	2000119c 	.word	0x2000119c
 800e580:	20000b6c 	.word	0x20000b6c

0800e584 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e588:	4b0d      	ldr	r3, [pc, #52]	; (800e5c0 <OnRadioRxError+0x3c>)
 800e58a:	781a      	ldrb	r2, [r3, #0]
 800e58c:	2102      	movs	r1, #2
 800e58e:	430a      	orrs	r2, r1
 800e590:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e592:	4a0c      	ldr	r2, [pc, #48]	; (800e5c4 <OnRadioRxError+0x40>)
 800e594:	23d2      	movs	r3, #210	; 0xd2
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	58d3      	ldr	r3, [r2, r3]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00c      	beq.n	800e5b8 <OnRadioRxError+0x34>
 800e59e:	4a09      	ldr	r2, [pc, #36]	; (800e5c4 <OnRadioRxError+0x40>)
 800e5a0:	23d2      	movs	r3, #210	; 0xd2
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	58d3      	ldr	r3, [r2, r3]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d005      	beq.n	800e5b8 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e5ac:	4a05      	ldr	r2, [pc, #20]	; (800e5c4 <OnRadioRxError+0x40>)
 800e5ae:	23d2      	movs	r3, #210	; 0xd2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	58d3      	ldr	r3, [r2, r3]
 800e5b4:	68db      	ldr	r3, [r3, #12]
 800e5b6:	4798      	blx	r3
    }
}
 800e5b8:	46c0      	nop			; (mov r8, r8)
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	46c0      	nop			; (mov r8, r8)
 800e5c0:	2000119c 	.word	0x2000119c
 800e5c4:	20000b6c 	.word	0x20000b6c

0800e5c8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e5cc:	4b0d      	ldr	r3, [pc, #52]	; (800e604 <OnRadioRxTimeout+0x3c>)
 800e5ce:	781a      	ldrb	r2, [r3, #0]
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	430a      	orrs	r2, r1
 800e5d4:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e5d6:	4a0c      	ldr	r2, [pc, #48]	; (800e608 <OnRadioRxTimeout+0x40>)
 800e5d8:	23d2      	movs	r3, #210	; 0xd2
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	58d3      	ldr	r3, [r2, r3]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00c      	beq.n	800e5fc <OnRadioRxTimeout+0x34>
 800e5e2:	4a09      	ldr	r2, [pc, #36]	; (800e608 <OnRadioRxTimeout+0x40>)
 800e5e4:	23d2      	movs	r3, #210	; 0xd2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	58d3      	ldr	r3, [r2, r3]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d005      	beq.n	800e5fc <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e5f0:	4a05      	ldr	r2, [pc, #20]	; (800e608 <OnRadioRxTimeout+0x40>)
 800e5f2:	23d2      	movs	r3, #210	; 0xd2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	58d3      	ldr	r3, [r2, r3]
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800e5fc:	46c0      	nop			; (mov r8, r8)
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	46c0      	nop			; (mov r8, r8)
 800e604:	2000119c 	.word	0x2000119c
 800e608:	20000b6c 	.word	0x20000b6c

0800e60c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800e610:	4b0a      	ldr	r3, [pc, #40]	; (800e63c <UpdateRxSlotIdleState+0x30>)
 800e612:	4a0b      	ldr	r2, [pc, #44]	; (800e640 <UpdateRxSlotIdleState+0x34>)
 800e614:	589b      	ldr	r3, [r3, r2]
 800e616:	227c      	movs	r2, #124	; 0x7c
 800e618:	5c9b      	ldrb	r3, [r3, r2]
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	d005      	beq.n	800e62a <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e61e:	4a07      	ldr	r2, [pc, #28]	; (800e63c <UpdateRxSlotIdleState+0x30>)
 800e620:	2390      	movs	r3, #144	; 0x90
 800e622:	00db      	lsls	r3, r3, #3
 800e624:	2106      	movs	r1, #6
 800e626:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e628:	e004      	b.n	800e634 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e62a:	4a04      	ldr	r2, [pc, #16]	; (800e63c <UpdateRxSlotIdleState+0x30>)
 800e62c:	2390      	movs	r3, #144	; 0x90
 800e62e:	00db      	lsls	r3, r3, #3
 800e630:	2102      	movs	r1, #2
 800e632:	54d1      	strb	r1, [r2, r3]
}
 800e634:	46c0      	nop			; (mov r8, r8)
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	46c0      	nop			; (mov r8, r8)
 800e63c:	20000b6c 	.word	0x20000b6c
 800e640:	00000484 	.word	0x00000484

0800e644 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e646:	b08f      	sub	sp, #60	; 0x3c
 800e648:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800e64a:	4b59      	ldr	r3, [pc, #356]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e64c:	4a59      	ldr	r2, [pc, #356]	; (800e7b4 <ProcessRadioTxDone+0x170>)
 800e64e:	589b      	ldr	r3, [r3, r2]
 800e650:	227c      	movs	r2, #124	; 0x7c
 800e652:	5c9b      	ldrb	r3, [r3, r2]
 800e654:	2b02      	cmp	r3, #2
 800e656:	d002      	beq.n	800e65e <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800e658:	4b57      	ldr	r3, [pc, #348]	; (800e7b8 <ProcessRadioTxDone+0x174>)
 800e65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65c:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e65e:	4a54      	ldr	r2, [pc, #336]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e660:	23ec      	movs	r3, #236	; 0xec
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	58d2      	ldr	r2, [r2, r3]
 800e666:	4b55      	ldr	r3, [pc, #340]	; (800e7bc <ProcessRadioTxDone+0x178>)
 800e668:	0011      	movs	r1, r2
 800e66a:	0018      	movs	r0, r3
 800e66c:	f00d fd40 	bl	801c0f0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e670:	4b52      	ldr	r3, [pc, #328]	; (800e7bc <ProcessRadioTxDone+0x178>)
 800e672:	0018      	movs	r0, r3
 800e674:	f00d fc4c 	bl	801bf10 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e678:	4a4d      	ldr	r2, [pc, #308]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e67a:	23ed      	movs	r3, #237	; 0xed
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	58d2      	ldr	r2, [r2, r3]
 800e680:	4b4f      	ldr	r3, [pc, #316]	; (800e7c0 <ProcessRadioTxDone+0x17c>)
 800e682:	0011      	movs	r1, r2
 800e684:	0018      	movs	r0, r3
 800e686:	f00d fd33 	bl	801c0f0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e68a:	4b4d      	ldr	r3, [pc, #308]	; (800e7c0 <ProcessRadioTxDone+0x17c>)
 800e68c:	0018      	movs	r0, r3
 800e68e:	f00d fc3f 	bl	801bf10 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800e692:	4b47      	ldr	r3, [pc, #284]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e694:	4a47      	ldr	r2, [pc, #284]	; (800e7b4 <ProcessRadioTxDone+0x170>)
 800e696:	589b      	ldr	r3, [r3, r2]
 800e698:	227c      	movs	r2, #124	; 0x7c
 800e69a:	5c9b      	ldrb	r3, [r3, r2]
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	d004      	beq.n	800e6aa <ProcessRadioTxDone+0x66>
 800e6a0:	4b43      	ldr	r3, [pc, #268]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e6a2:	4a48      	ldr	r2, [pc, #288]	; (800e7c4 <ProcessRadioTxDone+0x180>)
 800e6a4:	5c9b      	ldrb	r3, [r3, r2]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d021      	beq.n	800e6ee <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800e6aa:	2120      	movs	r1, #32
 800e6ac:	187b      	adds	r3, r7, r1
 800e6ae:	2216      	movs	r2, #22
 800e6b0:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e6b2:	4b3f      	ldr	r3, [pc, #252]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e6b4:	4a3f      	ldr	r2, [pc, #252]	; (800e7b4 <ProcessRadioTxDone+0x170>)
 800e6b6:	589b      	ldr	r3, [r3, r2]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	187a      	adds	r2, r7, r1
 800e6bc:	0011      	movs	r1, r2
 800e6be:	0018      	movs	r0, r3
 800e6c0:	f007 fcab 	bl	801601a <RegionGetPhyParam>
 800e6c4:	0003      	movs	r3, r0
 800e6c6:	001a      	movs	r2, r3
 800e6c8:	211c      	movs	r1, #28
 800e6ca:	187b      	adds	r3, r7, r1
 800e6cc:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e6ce:	4a38      	ldr	r2, [pc, #224]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e6d0:	23ed      	movs	r3, #237	; 0xed
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	58d2      	ldr	r2, [r2, r3]
 800e6d6:	187b      	adds	r3, r7, r1
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	18d2      	adds	r2, r2, r3
 800e6dc:	4b3a      	ldr	r3, [pc, #232]	; (800e7c8 <ProcessRadioTxDone+0x184>)
 800e6de:	0011      	movs	r1, r2
 800e6e0:	0018      	movs	r0, r3
 800e6e2:	f00d fd05 	bl	801c0f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800e6e6:	4b38      	ldr	r3, [pc, #224]	; (800e7c8 <ProcessRadioTxDone+0x184>)
 800e6e8:	0018      	movs	r0, r3
 800e6ea:	f00d fc11 	bl	801bf10 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800e6ee:	4b30      	ldr	r3, [pc, #192]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e6f0:	4a30      	ldr	r2, [pc, #192]	; (800e7b4 <ProcessRadioTxDone+0x170>)
 800e6f2:	589a      	ldr	r2, [r3, r2]
 800e6f4:	4b35      	ldr	r3, [pc, #212]	; (800e7cc <ProcessRadioTxDone+0x188>)
 800e6f6:	6819      	ldr	r1, [r3, #0]
 800e6f8:	23a8      	movs	r3, #168	; 0xa8
 800e6fa:	005b      	lsls	r3, r3, #1
 800e6fc:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e6fe:	4b2c      	ldr	r3, [pc, #176]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e700:	4a33      	ldr	r2, [pc, #204]	; (800e7d0 <ProcessRadioTxDone+0x18c>)
 800e702:	5c9a      	ldrb	r2, [r3, r2]
 800e704:	2408      	movs	r4, #8
 800e706:	193b      	adds	r3, r7, r4
 800e708:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e70a:	4b30      	ldr	r3, [pc, #192]	; (800e7cc <ProcessRadioTxDone+0x188>)
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	193b      	adds	r3, r7, r4
 800e710:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800e712:	2328      	movs	r3, #40	; 0x28
 800e714:	18fb      	adds	r3, r7, r3
 800e716:	0018      	movs	r0, r3
 800e718:	f00d fb92 	bl	801be40 <SysTimeGetMcuTime>
 800e71c:	4b24      	ldr	r3, [pc, #144]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e71e:	4a25      	ldr	r2, [pc, #148]	; (800e7b4 <ProcessRadioTxDone+0x170>)
 800e720:	5898      	ldr	r0, [r3, r2]
 800e722:	193d      	adds	r5, r7, r4
 800e724:	003e      	movs	r6, r7
 800e726:	23ac      	movs	r3, #172	; 0xac
 800e728:	0059      	lsls	r1, r3, #1
 800e72a:	2328      	movs	r3, #40	; 0x28
 800e72c:	18fa      	adds	r2, r7, r3
 800e72e:	2404      	movs	r4, #4
 800e730:	1843      	adds	r3, r0, r1
 800e732:	191c      	adds	r4, r3, r4
 800e734:	466b      	mov	r3, sp
 800e736:	6824      	ldr	r4, [r4, #0]
 800e738:	601c      	str	r4, [r3, #0]
 800e73a:	5843      	ldr	r3, [r0, r1]
 800e73c:	6811      	ldr	r1, [r2, #0]
 800e73e:	6852      	ldr	r2, [r2, #4]
 800e740:	0030      	movs	r0, r6
 800e742:	f00d fab5 	bl	801bcb0 <SysTimeSub>
 800e746:	003a      	movs	r2, r7
 800e748:	002b      	movs	r3, r5
 800e74a:	330c      	adds	r3, #12
 800e74c:	ca21      	ldmia	r2!, {r0, r5}
 800e74e:	c321      	stmia	r3!, {r0, r5}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e750:	4a17      	ldr	r2, [pc, #92]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e752:	2383      	movs	r3, #131	; 0x83
 800e754:	00db      	lsls	r3, r3, #3
 800e756:	58d2      	ldr	r2, [r2, r3]
 800e758:	2108      	movs	r1, #8
 800e75a:	187b      	adds	r3, r7, r1
 800e75c:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800e75e:	187b      	adds	r3, r7, r1
 800e760:	2201      	movs	r2, #1
 800e762:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800e764:	4b12      	ldr	r3, [pc, #72]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e766:	4a13      	ldr	r2, [pc, #76]	; (800e7b4 <ProcessRadioTxDone+0x170>)
 800e768:	589a      	ldr	r2, [r3, r2]
 800e76a:	23b2      	movs	r3, #178	; 0xb2
 800e76c:	005b      	lsls	r3, r3, #1
 800e76e:	5cd3      	ldrb	r3, [r2, r3]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d102      	bne.n	800e77a <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800e774:	187b      	adds	r3, r7, r1
 800e776:	2200      	movs	r2, #0
 800e778:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800e77a:	4b0d      	ldr	r3, [pc, #52]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e77c:	4a0d      	ldr	r2, [pc, #52]	; (800e7b4 <ProcessRadioTxDone+0x170>)
 800e77e:	589b      	ldr	r3, [r3, r2]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	2208      	movs	r2, #8
 800e784:	18ba      	adds	r2, r7, r2
 800e786:	0011      	movs	r1, r2
 800e788:	0018      	movs	r0, r3
 800e78a:	f007 fc6d 	bl	8016068 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800e78e:	4b08      	ldr	r3, [pc, #32]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e790:	4a0c      	ldr	r2, [pc, #48]	; (800e7c4 <ProcessRadioTxDone+0x180>)
 800e792:	5c9b      	ldrb	r3, [r3, r2]
 800e794:	2201      	movs	r2, #1
 800e796:	4053      	eors	r3, r2
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d003      	beq.n	800e7a6 <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e79e:	4b04      	ldr	r3, [pc, #16]	; (800e7b0 <ProcessRadioTxDone+0x16c>)
 800e7a0:	4a0c      	ldr	r2, [pc, #48]	; (800e7d4 <ProcessRadioTxDone+0x190>)
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	5499      	strb	r1, [r3, r2]
    }
}
 800e7a6:	46c0      	nop			; (mov r8, r8)
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	b00d      	add	sp, #52	; 0x34
 800e7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ae:	46c0      	nop			; (mov r8, r8)
 800e7b0:	20000b6c 	.word	0x20000b6c
 800e7b4:	00000484 	.word	0x00000484
 800e7b8:	0801e62c 	.word	0x0801e62c
 800e7bc:	20000eec 	.word	0x20000eec
 800e7c0:	20000f04 	.word	0x20000f04
 800e7c4:	00000414 	.word	0x00000414
 800e7c8:	20000f64 	.word	0x20000f64
 800e7cc:	20000b58 	.word	0x20000b58
 800e7d0:	00000415 	.word	0x00000415
 800e7d4:	0000043d 	.word	0x0000043d

0800e7d8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e7dc:	4a11      	ldr	r2, [pc, #68]	; (800e824 <PrepareRxDoneAbort+0x4c>)
 800e7de:	23d0      	movs	r3, #208	; 0xd0
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	58d3      	ldr	r3, [r2, r3]
 800e7e4:	2280      	movs	r2, #128	; 0x80
 800e7e6:	431a      	orrs	r2, r3
 800e7e8:	0011      	movs	r1, r2
 800e7ea:	4a0e      	ldr	r2, [pc, #56]	; (800e824 <PrepareRxDoneAbort+0x4c>)
 800e7ec:	23d0      	movs	r3, #208	; 0xd0
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800e7f2:	4b0c      	ldr	r3, [pc, #48]	; (800e824 <PrepareRxDoneAbort+0x4c>)
 800e7f4:	4a0c      	ldr	r2, [pc, #48]	; (800e828 <PrepareRxDoneAbort+0x50>)
 800e7f6:	5c9b      	ldrb	r3, [r3, r2]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d002      	beq.n	800e802 <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	f001 f98d 	bl	800fb1c <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e802:	4b08      	ldr	r3, [pc, #32]	; (800e824 <PrepareRxDoneAbort+0x4c>)
 800e804:	4a09      	ldr	r2, [pc, #36]	; (800e82c <PrepareRxDoneAbort+0x54>)
 800e806:	5c99      	ldrb	r1, [r3, r2]
 800e808:	2002      	movs	r0, #2
 800e80a:	4301      	orrs	r1, r0
 800e80c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e80e:	4b05      	ldr	r3, [pc, #20]	; (800e824 <PrepareRxDoneAbort+0x4c>)
 800e810:	4a06      	ldr	r2, [pc, #24]	; (800e82c <PrepareRxDoneAbort+0x54>)
 800e812:	5c99      	ldrb	r1, [r3, r2]
 800e814:	2020      	movs	r0, #32
 800e816:	4301      	orrs	r1, r0
 800e818:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800e81a:	f7ff fef7 	bl	800e60c <UpdateRxSlotIdleState>
}
 800e81e:	46c0      	nop			; (mov r8, r8)
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}
 800e824:	20000b6c 	.word	0x20000b6c
 800e828:	00000414 	.word	0x00000414
 800e82c:	00000481 	.word	0x00000481

0800e830 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e832:	b0a7      	sub	sp, #156	; 0x9c
 800e834:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e836:	2380      	movs	r3, #128	; 0x80
 800e838:	18fb      	adds	r3, r7, r3
 800e83a:	2213      	movs	r2, #19
 800e83c:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e83e:	4bdf      	ldr	r3, [pc, #892]	; (800ebbc <ProcessRadioRxDone+0x38c>)
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800e844:	267a      	movs	r6, #122	; 0x7a
 800e846:	19bb      	adds	r3, r7, r6
 800e848:	4adc      	ldr	r2, [pc, #880]	; (800ebbc <ProcessRadioRxDone+0x38c>)
 800e84a:	8912      	ldrh	r2, [r2, #8]
 800e84c:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800e84e:	2478      	movs	r4, #120	; 0x78
 800e850:	193b      	adds	r3, r7, r4
 800e852:	4ada      	ldr	r2, [pc, #872]	; (800ebbc <ProcessRadioRxDone+0x38c>)
 800e854:	8952      	ldrh	r2, [r2, #10]
 800e856:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800e858:	2577      	movs	r5, #119	; 0x77
 800e85a:	197b      	adds	r3, r7, r5
 800e85c:	4ad7      	ldr	r2, [pc, #860]	; (800ebbc <ProcessRadioRxDone+0x38c>)
 800e85e:	7b12      	ldrb	r2, [r2, #12]
 800e860:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800e862:	2376      	movs	r3, #118	; 0x76
 800e864:	18fb      	adds	r3, r7, r3
 800e866:	2200      	movs	r2, #0
 800e868:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800e86a:	2300      	movs	r3, #0
 800e86c:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800e86e:	4bd4      	ldr	r3, [pc, #848]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e870:	4ad4      	ldr	r2, [pc, #848]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800e872:	589b      	ldr	r3, [r3, r2]
 800e874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e876:	2284      	movs	r2, #132	; 0x84
 800e878:	18ba      	adds	r2, r7, r2
 800e87a:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800e87c:	2383      	movs	r3, #131	; 0x83
 800e87e:	18fb      	adds	r3, r7, r3
 800e880:	2200      	movs	r2, #0
 800e882:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e884:	2382      	movs	r3, #130	; 0x82
 800e886:	18fb      	adds	r3, r7, r3
 800e888:	2201      	movs	r2, #1
 800e88a:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800e88c:	4acc      	ldr	r2, [pc, #816]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e88e:	2388      	movs	r3, #136	; 0x88
 800e890:	00db      	lsls	r3, r3, #3
 800e892:	2100      	movs	r1, #0
 800e894:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800e896:	4bca      	ldr	r3, [pc, #808]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e898:	193a      	adds	r2, r7, r4
 800e89a:	49cb      	ldr	r1, [pc, #812]	; (800ebc8 <ProcessRadioRxDone+0x398>)
 800e89c:	8812      	ldrh	r2, [r2, #0]
 800e89e:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800e8a0:	4bc7      	ldr	r3, [pc, #796]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8a2:	197a      	adds	r2, r7, r5
 800e8a4:	49c9      	ldr	r1, [pc, #804]	; (800ebcc <ProcessRadioRxDone+0x39c>)
 800e8a6:	7812      	ldrb	r2, [r2, #0]
 800e8a8:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800e8aa:	4ac5      	ldr	r2, [pc, #788]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8ac:	2390      	movs	r3, #144	; 0x90
 800e8ae:	00db      	lsls	r3, r3, #3
 800e8b0:	5cd1      	ldrb	r1, [r2, r3]
 800e8b2:	4bc3      	ldr	r3, [pc, #780]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8b4:	4ac6      	ldr	r2, [pc, #792]	; (800ebd0 <ProcessRadioRxDone+0x3a0>)
 800e8b6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800e8b8:	4bc1      	ldr	r3, [pc, #772]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8ba:	4ac6      	ldr	r2, [pc, #792]	; (800ebd4 <ProcessRadioRxDone+0x3a4>)
 800e8bc:	2100      	movs	r1, #0
 800e8be:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800e8c0:	4bbf      	ldr	r3, [pc, #764]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8c2:	4ac5      	ldr	r2, [pc, #788]	; (800ebd8 <ProcessRadioRxDone+0x3a8>)
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800e8c8:	4bbd      	ldr	r3, [pc, #756]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8ca:	4ac4      	ldr	r2, [pc, #784]	; (800ebdc <ProcessRadioRxDone+0x3ac>)
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800e8d0:	4bbb      	ldr	r3, [pc, #748]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8d2:	4ac3      	ldr	r2, [pc, #780]	; (800ebe0 <ProcessRadioRxDone+0x3b0>)
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800e8d8:	4ab9      	ldr	r2, [pc, #740]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8da:	2385      	movs	r3, #133	; 0x85
 800e8dc:	00db      	lsls	r3, r3, #3
 800e8de:	2100      	movs	r1, #0
 800e8e0:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800e8e2:	4bb7      	ldr	r3, [pc, #732]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8e4:	4abf      	ldr	r2, [pc, #764]	; (800ebe4 <ProcessRadioRxDone+0x3b4>)
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800e8ea:	4bb5      	ldr	r3, [pc, #724]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8ec:	4abe      	ldr	r2, [pc, #760]	; (800ebe8 <ProcessRadioRxDone+0x3b8>)
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e8f2:	4ab3      	ldr	r2, [pc, #716]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8f4:	2386      	movs	r3, #134	; 0x86
 800e8f6:	00db      	lsls	r3, r3, #3
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e8fc:	4bb0      	ldr	r3, [pc, #704]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e8fe:	4abb      	ldr	r2, [pc, #748]	; (800ebec <ProcessRadioRxDone+0x3bc>)
 800e900:	2100      	movs	r1, #0
 800e902:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800e904:	4bae      	ldr	r3, [pc, #696]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e906:	4aba      	ldr	r2, [pc, #744]	; (800ebf0 <ProcessRadioRxDone+0x3c0>)
 800e908:	2100      	movs	r1, #0
 800e90a:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e90c:	4aac      	ldr	r2, [pc, #688]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e90e:	2387      	movs	r3, #135	; 0x87
 800e910:	00db      	lsls	r3, r3, #3
 800e912:	2100      	movs	r1, #0
 800e914:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800e916:	4bb7      	ldr	r3, [pc, #732]	; (800ebf4 <ProcessRadioRxDone+0x3c4>)
 800e918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e91a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800e91c:	4bb6      	ldr	r3, [pc, #728]	; (800ebf8 <ProcessRadioRxDone+0x3c8>)
 800e91e:	0018      	movs	r0, r3
 800e920:	f00d fb6e 	bl	801c000 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e924:	19bb      	adds	r3, r7, r6
 800e926:	881a      	ldrh	r2, [r3, #0]
 800e928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e92a:	0011      	movs	r1, r2
 800e92c:	0018      	movs	r0, r3
 800e92e:	f005 f9ef 	bl	8013d10 <LoRaMacClassBRxBeacon>
 800e932:	1e03      	subs	r3, r0, #0
 800e934:	d00c      	beq.n	800e950 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e936:	4ba2      	ldr	r3, [pc, #648]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e938:	193a      	adds	r2, r7, r4
 800e93a:	49b0      	ldr	r1, [pc, #704]	; (800ebfc <ProcessRadioRxDone+0x3cc>)
 800e93c:	8812      	ldrh	r2, [r2, #0]
 800e93e:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e940:	4a9f      	ldr	r2, [pc, #636]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e942:	1979      	adds	r1, r7, r5
 800e944:	238f      	movs	r3, #143	; 0x8f
 800e946:	00db      	lsls	r3, r3, #3
 800e948:	7809      	ldrb	r1, [r1, #0]
 800e94a:	54d1      	strb	r1, [r2, r3]
        return;
 800e94c:	f000 fc9e 	bl	800f28c <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800e950:	4b9b      	ldr	r3, [pc, #620]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e952:	4a9c      	ldr	r2, [pc, #624]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800e954:	589b      	ldr	r3, [r3, r2]
 800e956:	227c      	movs	r2, #124	; 0x7c
 800e958:	5c9b      	ldrb	r3, [r3, r2]
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d11c      	bne.n	800e998 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e95e:	f005 f9e9 	bl	8013d34 <LoRaMacClassBIsPingExpected>
 800e962:	1e03      	subs	r3, r0, #0
 800e964:	d00a      	beq.n	800e97c <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e966:	2000      	movs	r0, #0
 800e968:	f005 f9a0 	bl	8013cac <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e96c:	2000      	movs	r0, #0
 800e96e:	f005 f9bf 	bl	8013cf0 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e972:	4b93      	ldr	r3, [pc, #588]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e974:	4a96      	ldr	r2, [pc, #600]	; (800ebd0 <ProcessRadioRxDone+0x3a0>)
 800e976:	2104      	movs	r1, #4
 800e978:	5499      	strb	r1, [r3, r2]
 800e97a:	e00d      	b.n	800e998 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e97c:	f005 f9e0 	bl	8013d40 <LoRaMacClassBIsMulticastExpected>
 800e980:	1e03      	subs	r3, r0, #0
 800e982:	d009      	beq.n	800e998 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e984:	2000      	movs	r0, #0
 800e986:	f005 f99b 	bl	8013cc0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e98a:	2000      	movs	r0, #0
 800e98c:	f005 f9b8 	bl	8013d00 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e990:	4b8b      	ldr	r3, [pc, #556]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e992:	4a8f      	ldr	r2, [pc, #572]	; (800ebd0 <ProcessRadioRxDone+0x3a0>)
 800e994:	2105      	movs	r1, #5
 800e996:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e998:	2276      	movs	r2, #118	; 0x76
 800e99a:	18bb      	adds	r3, r7, r2
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	18ba      	adds	r2, r7, r2
 800e9a0:	1c59      	adds	r1, r3, #1
 800e9a2:	7011      	strb	r1, [r2, #0]
 800e9a4:	001a      	movs	r2, r3
 800e9a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e9a8:	189b      	adds	r3, r3, r2
 800e9aa:	781a      	ldrb	r2, [r3, #0]
 800e9ac:	2174      	movs	r1, #116	; 0x74
 800e9ae:	187b      	adds	r3, r7, r1
 800e9b0:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800e9b2:	187b      	adds	r3, r7, r1
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	061b      	lsls	r3, r3, #24
 800e9b8:	0f5b      	lsrs	r3, r3, #29
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b07      	cmp	r3, #7
 800e9be:	d101      	bne.n	800e9c4 <ProcessRadioRxDone+0x194>
 800e9c0:	f000 fc0c 	bl	800f1dc <ProcessRadioRxDone+0x9ac>
 800e9c4:	dd01      	ble.n	800e9ca <ProcessRadioRxDone+0x19a>
 800e9c6:	f000 fc38 	bl	800f23a <ProcessRadioRxDone+0xa0a>
 800e9ca:	2b05      	cmp	r3, #5
 800e9cc:	d100      	bne.n	800e9d0 <ProcessRadioRxDone+0x1a0>
 800e9ce:	e119      	b.n	800ec04 <ProcessRadioRxDone+0x3d4>
 800e9d0:	dd01      	ble.n	800e9d6 <ProcessRadioRxDone+0x1a6>
 800e9d2:	f000 fc32 	bl	800f23a <ProcessRadioRxDone+0xa0a>
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d004      	beq.n	800e9e4 <ProcessRadioRxDone+0x1b4>
 800e9da:	2b03      	cmp	r3, #3
 800e9dc:	d100      	bne.n	800e9e0 <ProcessRadioRxDone+0x1b0>
 800e9de:	e115      	b.n	800ec0c <ProcessRadioRxDone+0x3dc>
 800e9e0:	f000 fc2b 	bl	800f23a <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e9e4:	237a      	movs	r3, #122	; 0x7a
 800e9e6:	18fb      	adds	r3, r7, r3
 800e9e8:	881b      	ldrh	r3, [r3, #0]
 800e9ea:	2b10      	cmp	r3, #16
 800e9ec:	d807      	bhi.n	800e9fe <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9ee:	4b74      	ldr	r3, [pc, #464]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800e9f0:	4a83      	ldr	r2, [pc, #524]	; (800ec00 <ProcessRadioRxDone+0x3d0>)
 800e9f2:	2101      	movs	r1, #1
 800e9f4:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800e9f6:	f7ff feef 	bl	800e7d8 <PrepareRxDoneAbort>
                return;
 800e9fa:	f000 fc47 	bl	800f28c <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800e9fe:	2108      	movs	r1, #8
 800ea00:	187b      	adds	r3, r7, r1
 800ea02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ea04:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800ea06:	237a      	movs	r3, #122	; 0x7a
 800ea08:	18fb      	adds	r3, r7, r3
 800ea0a:	881b      	ldrh	r3, [r3, #0]
 800ea0c:	b2da      	uxtb	r2, r3
 800ea0e:	187b      	adds	r3, r7, r1
 800ea10:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800ea12:	4b6b      	ldr	r3, [pc, #428]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800ea14:	4a6b      	ldr	r2, [pc, #428]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800ea16:	589a      	ldr	r2, [r3, r2]
 800ea18:	23b2      	movs	r3, #178	; 0xb2
 800ea1a:	005b      	lsls	r3, r3, #1
 800ea1c:	5cd3      	ldrb	r3, [r2, r3]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d007      	beq.n	800ea32 <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea22:	4b67      	ldr	r3, [pc, #412]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800ea24:	4a76      	ldr	r2, [pc, #472]	; (800ec00 <ProcessRadioRxDone+0x3d0>)
 800ea26:	2101      	movs	r1, #1
 800ea28:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ea2a:	f7ff fed5 	bl	800e7d8 <PrepareRxDoneAbort>
                return;
 800ea2e:	f000 fc2d 	bl	800f28c <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ea32:	f7fe fbe3 	bl	800d1fc <SecureElementGetJoinEui>
 800ea36:	0001      	movs	r1, r0
 800ea38:	2680      	movs	r6, #128	; 0x80
 800ea3a:	19bc      	adds	r4, r7, r6
 800ea3c:	2508      	movs	r5, #8
 800ea3e:	197b      	adds	r3, r7, r5
 800ea40:	001a      	movs	r2, r3
 800ea42:	20ff      	movs	r0, #255	; 0xff
 800ea44:	f006 fc96 	bl	8015374 <LoRaMacCryptoHandleJoinAccept>
 800ea48:	0003      	movs	r3, r0
 800ea4a:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ea4c:	19bb      	adds	r3, r7, r6
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d000      	beq.n	800ea56 <ProcessRadioRxDone+0x226>
 800ea54:	e0a7      	b.n	800eba6 <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ea56:	002c      	movs	r4, r5
 800ea58:	193b      	adds	r3, r7, r4
 800ea5a:	7a59      	ldrb	r1, [r3, #9]
 800ea5c:	4b58      	ldr	r3, [pc, #352]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800ea5e:	4a59      	ldr	r2, [pc, #356]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800ea60:	589b      	ldr	r3, [r3, r2]
 800ea62:	000a      	movs	r2, r1
 800ea64:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ea66:	4b56      	ldr	r3, [pc, #344]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800ea68:	4a56      	ldr	r2, [pc, #344]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800ea6a:	589b      	ldr	r3, [r3, r2]
 800ea6c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ea6e:	193b      	adds	r3, r7, r4
 800ea70:	7a9b      	ldrb	r3, [r3, #10]
 800ea72:	021a      	lsls	r2, r3, #8
 800ea74:	4b52      	ldr	r3, [pc, #328]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800ea76:	4853      	ldr	r0, [pc, #332]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800ea78:	581b      	ldr	r3, [r3, r0]
 800ea7a:	430a      	orrs	r2, r1
 800ea7c:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ea7e:	4b50      	ldr	r3, [pc, #320]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800ea80:	4a50      	ldr	r2, [pc, #320]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800ea82:	589b      	ldr	r3, [r3, r2]
 800ea84:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800ea86:	193b      	adds	r3, r7, r4
 800ea88:	7adb      	ldrb	r3, [r3, #11]
 800ea8a:	041a      	lsls	r2, r3, #16
 800ea8c:	4b4c      	ldr	r3, [pc, #304]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800ea8e:	484d      	ldr	r0, [pc, #308]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800ea90:	581b      	ldr	r3, [r3, r0]
 800ea92:	430a      	orrs	r2, r1
 800ea94:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800ea96:	4b4a      	ldr	r3, [pc, #296]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800ea98:	4a4a      	ldr	r2, [pc, #296]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800ea9a:	589b      	ldr	r3, [r3, r2]
 800ea9c:	0020      	movs	r0, r4
 800ea9e:	183a      	adds	r2, r7, r0
 800eaa0:	68d2      	ldr	r2, [r2, #12]
 800eaa2:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800eaa4:	183b      	adds	r3, r7, r0
 800eaa6:	7c1b      	ldrb	r3, [r3, #16]
 800eaa8:	065b      	lsls	r3, r3, #25
 800eaaa:	0f5b      	lsrs	r3, r3, #29
 800eaac:	b2d9      	uxtb	r1, r3
 800eaae:	4b44      	ldr	r3, [pc, #272]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eab0:	4a44      	ldr	r2, [pc, #272]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eab2:	589b      	ldr	r3, [r3, r2]
 800eab4:	22a5      	movs	r2, #165	; 0xa5
 800eab6:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800eab8:	183b      	adds	r3, r7, r0
 800eaba:	7c1b      	ldrb	r3, [r3, #16]
 800eabc:	071b      	lsls	r3, r3, #28
 800eabe:	0f1b      	lsrs	r3, r3, #28
 800eac0:	b2d9      	uxtb	r1, r3
 800eac2:	4b3f      	ldr	r3, [pc, #252]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eac4:	4a3f      	ldr	r2, [pc, #252]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eac6:	589b      	ldr	r3, [r3, r2]
 800eac8:	22ac      	movs	r2, #172	; 0xac
 800eaca:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800eacc:	183b      	adds	r3, r7, r0
 800eace:	7c1b      	ldrb	r3, [r3, #16]
 800ead0:	071b      	lsls	r3, r3, #28
 800ead2:	0f1b      	lsrs	r3, r3, #28
 800ead4:	b2d9      	uxtb	r1, r3
 800ead6:	4b3a      	ldr	r3, [pc, #232]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800ead8:	4a3a      	ldr	r2, [pc, #232]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eada:	589b      	ldr	r3, [r3, r2]
 800eadc:	22b4      	movs	r2, #180	; 0xb4
 800eade:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800eae0:	183b      	adds	r3, r7, r0
 800eae2:	7c59      	ldrb	r1, [r3, #17]
 800eae4:	4b36      	ldr	r3, [pc, #216]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eae6:	4a37      	ldr	r2, [pc, #220]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eae8:	589b      	ldr	r3, [r3, r2]
 800eaea:	2294      	movs	r2, #148	; 0x94
 800eaec:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800eaee:	4b34      	ldr	r3, [pc, #208]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eaf0:	4a34      	ldr	r2, [pc, #208]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eaf2:	589b      	ldr	r3, [r3, r2]
 800eaf4:	2294      	movs	r2, #148	; 0x94
 800eaf6:	589b      	ldr	r3, [r3, r2]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d105      	bne.n	800eb08 <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800eafc:	4b30      	ldr	r3, [pc, #192]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eafe:	4a31      	ldr	r2, [pc, #196]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eb00:	589b      	ldr	r3, [r3, r2]
 800eb02:	2294      	movs	r2, #148	; 0x94
 800eb04:	2101      	movs	r1, #1
 800eb06:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800eb08:	4b2d      	ldr	r3, [pc, #180]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eb0a:	4a2e      	ldr	r2, [pc, #184]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eb0c:	589b      	ldr	r3, [r3, r2]
 800eb0e:	2294      	movs	r2, #148	; 0x94
 800eb10:	589a      	ldr	r2, [r3, r2]
 800eb12:	4b2b      	ldr	r3, [pc, #172]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eb14:	492b      	ldr	r1, [pc, #172]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eb16:	5859      	ldr	r1, [r3, r1]
 800eb18:	0013      	movs	r3, r2
 800eb1a:	015b      	lsls	r3, r3, #5
 800eb1c:	1a9b      	subs	r3, r3, r2
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	189b      	adds	r3, r3, r2
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	001a      	movs	r2, r3
 800eb26:	2394      	movs	r3, #148	; 0x94
 800eb28:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800eb2a:	4b25      	ldr	r3, [pc, #148]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eb2c:	4a25      	ldr	r2, [pc, #148]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eb2e:	589b      	ldr	r3, [r3, r2]
 800eb30:	2294      	movs	r2, #148	; 0x94
 800eb32:	589b      	ldr	r3, [r3, r2]
 800eb34:	4a22      	ldr	r2, [pc, #136]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eb36:	4923      	ldr	r1, [pc, #140]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eb38:	5852      	ldr	r2, [r2, r1]
 800eb3a:	21fa      	movs	r1, #250	; 0xfa
 800eb3c:	0089      	lsls	r1, r1, #2
 800eb3e:	468c      	mov	ip, r1
 800eb40:	4463      	add	r3, ip
 800eb42:	2198      	movs	r1, #152	; 0x98
 800eb44:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800eb46:	4b1e      	ldr	r3, [pc, #120]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eb48:	4a1e      	ldr	r2, [pc, #120]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eb4a:	589a      	ldr	r2, [r3, r2]
 800eb4c:	23b1      	movs	r3, #177	; 0xb1
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	2100      	movs	r1, #0
 800eb52:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800eb54:	216c      	movs	r1, #108	; 0x6c
 800eb56:	187b      	adds	r3, r7, r1
 800eb58:	2208      	movs	r2, #8
 800eb5a:	18ba      	adds	r2, r7, r2
 800eb5c:	3212      	adds	r2, #18
 800eb5e:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800eb60:	237a      	movs	r3, #122	; 0x7a
 800eb62:	18fb      	adds	r3, r7, r3
 800eb64:	881b      	ldrh	r3, [r3, #0]
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	3b11      	subs	r3, #17
 800eb6a:	b2da      	uxtb	r2, r3
 800eb6c:	187b      	adds	r3, r7, r1
 800eb6e:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800eb70:	4b13      	ldr	r3, [pc, #76]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eb72:	4a14      	ldr	r2, [pc, #80]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eb74:	589b      	ldr	r3, [r3, r2]
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	187a      	adds	r2, r7, r1
 800eb7a:	0011      	movs	r1, r2
 800eb7c:	0018      	movs	r0, r3
 800eb7e:	f007 facf 	bl	8016120 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800eb82:	4b0f      	ldr	r3, [pc, #60]	; (800ebc0 <ProcessRadioRxDone+0x390>)
 800eb84:	4a0f      	ldr	r2, [pc, #60]	; (800ebc4 <ProcessRadioRxDone+0x394>)
 800eb86:	589a      	ldr	r2, [r3, r2]
 800eb88:	23b2      	movs	r3, #178	; 0xb2
 800eb8a:	005b      	lsls	r3, r3, #1
 800eb8c:	2102      	movs	r1, #2
 800eb8e:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eb90:	2001      	movs	r0, #1
 800eb92:	f005 fe47 	bl	8014824 <LoRaMacConfirmQueueIsCmdActive>
 800eb96:	1e03      	subs	r3, r0, #0
 800eb98:	d100      	bne.n	800eb9c <ProcessRadioRxDone+0x36c>
 800eb9a:	e355      	b.n	800f248 <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800eb9c:	2101      	movs	r1, #1
 800eb9e:	2000      	movs	r0, #0
 800eba0:	f005 fda4 	bl	80146ec <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800eba4:	e350      	b.n	800f248 <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eba6:	2001      	movs	r0, #1
 800eba8:	f005 fe3c 	bl	8014824 <LoRaMacConfirmQueueIsCmdActive>
 800ebac:	1e03      	subs	r3, r0, #0
 800ebae:	d100      	bne.n	800ebb2 <ProcessRadioRxDone+0x382>
 800ebb0:	e34a      	b.n	800f248 <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ebb2:	2101      	movs	r1, #1
 800ebb4:	2007      	movs	r0, #7
 800ebb6:	f005 fd99 	bl	80146ec <LoRaMacConfirmQueueSetStatus>
            break;
 800ebba:	e345      	b.n	800f248 <ProcessRadioRxDone+0xa18>
 800ebbc:	20000b5c 	.word	0x20000b5c
 800ebc0:	20000b6c 	.word	0x20000b6c
 800ebc4:	00000484 	.word	0x00000484
 800ebc8:	0000042a 	.word	0x0000042a
 800ebcc:	0000042c 	.word	0x0000042c
 800ebd0:	0000042d 	.word	0x0000042d
 800ebd4:	0000041f 	.word	0x0000041f
 800ebd8:	0000041e 	.word	0x0000041e
 800ebdc:	00000421 	.word	0x00000421
 800ebe0:	00000424 	.word	0x00000424
 800ebe4:	00000429 	.word	0x00000429
 800ebe8:	0000042e 	.word	0x0000042e
 800ebec:	0000041c 	.word	0x0000041c
 800ebf0:	00000434 	.word	0x00000434
 800ebf4:	0801e62c 	.word	0x0801e62c
 800ebf8:	20000f04 	.word	0x20000f04
 800ebfc:	00000476 	.word	0x00000476
 800ec00:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ec04:	4bd5      	ldr	r3, [pc, #852]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ec06:	4ad6      	ldr	r2, [pc, #856]	; (800ef60 <ProcessRadioRxDone+0x730>)
 800ec08:	2101      	movs	r1, #1
 800ec0a:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ec0c:	4bd3      	ldr	r3, [pc, #844]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ec0e:	4ad5      	ldr	r2, [pc, #852]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800ec10:	589b      	ldr	r3, [r3, r2]
 800ec12:	22b9      	movs	r2, #185	; 0xb9
 800ec14:	5c9a      	ldrb	r2, [r3, r2]
 800ec16:	2164      	movs	r1, #100	; 0x64
 800ec18:	187b      	adds	r3, r7, r1
 800ec1a:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ec1c:	4acf      	ldr	r2, [pc, #828]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ec1e:	2384      	movs	r3, #132	; 0x84
 800ec20:	00db      	lsls	r3, r3, #3
 800ec22:	5cd3      	ldrb	r3, [r2, r3]
 800ec24:	b25a      	sxtb	r2, r3
 800ec26:	187b      	adds	r3, r7, r1
 800ec28:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ec2a:	187b      	adds	r3, r7, r1
 800ec2c:	220d      	movs	r2, #13
 800ec2e:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800ec30:	4bca      	ldr	r3, [pc, #808]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ec32:	4acc      	ldr	r2, [pc, #816]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800ec34:	589b      	ldr	r3, [r3, r2]
 800ec36:	22ca      	movs	r2, #202	; 0xca
 800ec38:	5c9b      	ldrb	r3, [r3, r2]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d002      	beq.n	800ec44 <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ec3e:	187b      	adds	r3, r7, r1
 800ec40:	220e      	movs	r2, #14
 800ec42:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ec44:	4bc5      	ldr	r3, [pc, #788]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ec46:	4ac7      	ldr	r2, [pc, #796]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800ec48:	589b      	ldr	r3, [r3, r2]
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	2264      	movs	r2, #100	; 0x64
 800ec4e:	18ba      	adds	r2, r7, r2
 800ec50:	0011      	movs	r1, r2
 800ec52:	0018      	movs	r0, r3
 800ec54:	f007 f9e1 	bl	801601a <RegionGetPhyParam>
 800ec58:	0003      	movs	r3, r0
 800ec5a:	001a      	movs	r2, r3
 800ec5c:	2360      	movs	r3, #96	; 0x60
 800ec5e:	18fb      	adds	r3, r7, r3
 800ec60:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800ec62:	237a      	movs	r3, #122	; 0x7a
 800ec64:	18fb      	adds	r3, r7, r3
 800ec66:	881b      	ldrh	r3, [r3, #0]
 800ec68:	3b0d      	subs	r3, #13
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	b21b      	sxth	r3, r3
 800ec6e:	1c1a      	adds	r2, r3, #0
 800ec70:	b213      	sxth	r3, r2
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	da01      	bge.n	800ec7a <ProcessRadioRxDone+0x44a>
 800ec76:	2300      	movs	r3, #0
 800ec78:	1c1a      	adds	r2, r3, #0
 800ec7a:	b212      	sxth	r2, r2
 800ec7c:	2360      	movs	r3, #96	; 0x60
 800ec7e:	18fb      	adds	r3, r7, r3
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	b21b      	sxth	r3, r3
 800ec84:	429a      	cmp	r2, r3
 800ec86:	dc04      	bgt.n	800ec92 <ProcessRadioRxDone+0x462>
 800ec88:	237a      	movs	r3, #122	; 0x7a
 800ec8a:	18fb      	adds	r3, r7, r3
 800ec8c:	881b      	ldrh	r3, [r3, #0]
 800ec8e:	2b0b      	cmp	r3, #11
 800ec90:	d806      	bhi.n	800eca0 <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec92:	4bb2      	ldr	r3, [pc, #712]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ec94:	4ab4      	ldr	r2, [pc, #720]	; (800ef68 <ProcessRadioRxDone+0x738>)
 800ec96:	2101      	movs	r1, #1
 800ec98:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ec9a:	f7ff fd9d 	bl	800e7d8 <PrepareRxDoneAbort>
                return;
 800ec9e:	e2f5      	b.n	800f28c <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 800eca0:	2130      	movs	r1, #48	; 0x30
 800eca2:	187b      	adds	r3, r7, r1
 800eca4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800eca6:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800eca8:	237a      	movs	r3, #122	; 0x7a
 800ecaa:	18fb      	adds	r3, r7, r3
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	b2da      	uxtb	r2, r3
 800ecb0:	187b      	adds	r3, r7, r1
 800ecb2:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ecb4:	187b      	adds	r3, r7, r1
 800ecb6:	4aad      	ldr	r2, [pc, #692]	; (800ef6c <ProcessRadioRxDone+0x73c>)
 800ecb8:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ecba:	0008      	movs	r0, r1
 800ecbc:	187b      	adds	r3, r7, r1
 800ecbe:	2228      	movs	r2, #40	; 0x28
 800ecc0:	21ff      	movs	r1, #255	; 0xff
 800ecc2:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ecc4:	183b      	adds	r3, r7, r0
 800ecc6:	0018      	movs	r0, r3
 800ecc8:	f006 fec0 	bl	8015a4c <LoRaMacParserData>
 800eccc:	1e03      	subs	r3, r0, #0
 800ecce:	d006      	beq.n	800ecde <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ecd0:	4ba2      	ldr	r3, [pc, #648]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ecd2:	4aa5      	ldr	r2, [pc, #660]	; (800ef68 <ProcessRadioRxDone+0x738>)
 800ecd4:	2101      	movs	r1, #1
 800ecd6:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ecd8:	f7ff fd7e 	bl	800e7d8 <PrepareRxDoneAbort>
                return;
 800ecdc:	e2d6      	b.n	800f28c <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ecde:	2030      	movs	r0, #48	; 0x30
 800ece0:	183b      	adds	r3, r7, r0
 800ece2:	689a      	ldr	r2, [r3, #8]
 800ece4:	4b9d      	ldr	r3, [pc, #628]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ece6:	49a2      	ldr	r1, [pc, #648]	; (800ef70 <ProcessRadioRxDone+0x740>)
 800ece8:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ecea:	1cba      	adds	r2, r7, #2
 800ecec:	183b      	adds	r3, r7, r0
 800ecee:	0011      	movs	r1, r2
 800ecf0:	0018      	movs	r0, r3
 800ecf2:	f003 f85f 	bl	8011db4 <DetermineFrameType>
 800ecf6:	1e03      	subs	r3, r0, #0
 800ecf8:	d006      	beq.n	800ed08 <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ecfa:	4b98      	ldr	r3, [pc, #608]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ecfc:	4a9a      	ldr	r2, [pc, #616]	; (800ef68 <ProcessRadioRxDone+0x738>)
 800ecfe:	2101      	movs	r1, #1
 800ed00:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ed02:	f7ff fd69 	bl	800e7d8 <PrepareRxDoneAbort>
                return;
 800ed06:	e2c1      	b.n	800f28c <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ed08:	2383      	movs	r3, #131	; 0x83
 800ed0a:	18fb      	adds	r3, r7, r3
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800ed10:	2300      	movs	r3, #0
 800ed12:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ed14:	2381      	movs	r3, #129	; 0x81
 800ed16:	18fb      	adds	r3, r7, r3
 800ed18:	2200      	movs	r2, #0
 800ed1a:	701a      	strb	r2, [r3, #0]
 800ed1c:	e05b      	b.n	800edd6 <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ed1e:	4b8f      	ldr	r3, [pc, #572]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ed20:	4a90      	ldr	r2, [pc, #576]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800ed22:	589a      	ldr	r2, [r3, r2]
 800ed24:	2481      	movs	r4, #129	; 0x81
 800ed26:	193b      	adds	r3, r7, r4
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	212c      	movs	r1, #44	; 0x2c
 800ed2c:	434b      	muls	r3, r1
 800ed2e:	18d3      	adds	r3, r2, r3
 800ed30:	3354      	adds	r3, #84	; 0x54
 800ed32:	681a      	ldr	r2, [r3, #0]
 800ed34:	2330      	movs	r3, #48	; 0x30
 800ed36:	18fb      	adds	r3, r7, r3
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d145      	bne.n	800edca <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ed3e:	4b87      	ldr	r3, [pc, #540]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ed40:	4a88      	ldr	r2, [pc, #544]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800ed42:	589a      	ldr	r2, [r3, r2]
 800ed44:	193b      	adds	r3, r7, r4
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	2152      	movs	r1, #82	; 0x52
 800ed4a:	202c      	movs	r0, #44	; 0x2c
 800ed4c:	4343      	muls	r3, r0
 800ed4e:	18d3      	adds	r3, r2, r3
 800ed50:	185b      	adds	r3, r3, r1
 800ed52:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d038      	beq.n	800edca <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 800ed58:	2383      	movs	r3, #131	; 0x83
 800ed5a:	18fb      	adds	r3, r7, r3
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800ed60:	4b7e      	ldr	r3, [pc, #504]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ed62:	4a80      	ldr	r2, [pc, #512]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800ed64:	5899      	ldr	r1, [r3, r2]
 800ed66:	0025      	movs	r5, r4
 800ed68:	193b      	adds	r3, r7, r4
 800ed6a:	781a      	ldrb	r2, [r3, #0]
 800ed6c:	2382      	movs	r3, #130	; 0x82
 800ed6e:	18fb      	adds	r3, r7, r3
 800ed70:	2053      	movs	r0, #83	; 0x53
 800ed72:	242c      	movs	r4, #44	; 0x2c
 800ed74:	4362      	muls	r2, r4
 800ed76:	188a      	adds	r2, r1, r2
 800ed78:	1812      	adds	r2, r2, r0
 800ed7a:	7812      	ldrb	r2, [r2, #0]
 800ed7c:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800ed7e:	4b77      	ldr	r3, [pc, #476]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ed80:	4a78      	ldr	r2, [pc, #480]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800ed82:	589a      	ldr	r2, [r3, r2]
 800ed84:	002c      	movs	r4, r5
 800ed86:	193b      	adds	r3, r7, r4
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	212c      	movs	r1, #44	; 0x2c
 800ed8c:	434b      	muls	r3, r1
 800ed8e:	18d3      	adds	r3, r2, r3
 800ed90:	3370      	adds	r3, #112	; 0x70
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800ed98:	4b70      	ldr	r3, [pc, #448]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ed9a:	4a72      	ldr	r2, [pc, #456]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800ed9c:	589a      	ldr	r2, [r3, r2]
 800ed9e:	193b      	adds	r3, r7, r4
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	212c      	movs	r1, #44	; 0x2c
 800eda4:	434b      	muls	r3, r1
 800eda6:	18d3      	adds	r3, r2, r3
 800eda8:	3354      	adds	r3, #84	; 0x54
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2284      	movs	r2, #132	; 0x84
 800edae:	18ba      	adds	r2, r7, r2
 800edb0:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800edb2:	4b6a      	ldr	r3, [pc, #424]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800edb4:	4a6b      	ldr	r2, [pc, #428]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800edb6:	589b      	ldr	r3, [r3, r2]
 800edb8:	227c      	movs	r2, #124	; 0x7c
 800edba:	5c9b      	ldrb	r3, [r3, r2]
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d110      	bne.n	800ede2 <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800edc0:	4b66      	ldr	r3, [pc, #408]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800edc2:	4a6c      	ldr	r2, [pc, #432]	; (800ef74 <ProcessRadioRxDone+0x744>)
 800edc4:	2103      	movs	r1, #3
 800edc6:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800edc8:	e00b      	b.n	800ede2 <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800edca:	2181      	movs	r1, #129	; 0x81
 800edcc:	187b      	adds	r3, r7, r1
 800edce:	781a      	ldrb	r2, [r3, #0]
 800edd0:	187b      	adds	r3, r7, r1
 800edd2:	3201      	adds	r2, #1
 800edd4:	701a      	strb	r2, [r3, #0]
 800edd6:	2381      	movs	r3, #129	; 0x81
 800edd8:	18fb      	adds	r3, r7, r3
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d09e      	beq.n	800ed1e <ProcessRadioRxDone+0x4ee>
 800ede0:	e000      	b.n	800ede4 <ProcessRadioRxDone+0x5b4>
                    break;
 800ede2:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ede4:	2383      	movs	r3, #131	; 0x83
 800ede6:	18fb      	adds	r3, r7, r3
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	2b01      	cmp	r3, #1
 800edec:	d119      	bne.n	800ee22 <ProcessRadioRxDone+0x5f2>
 800edee:	1cbb      	adds	r3, r7, #2
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	2b03      	cmp	r3, #3
 800edf4:	d10e      	bne.n	800ee14 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800edf6:	2130      	movs	r1, #48	; 0x30
 800edf8:	187b      	adds	r3, r7, r1
 800edfa:	7b1b      	ldrb	r3, [r3, #12]
 800edfc:	2220      	movs	r2, #32
 800edfe:	4013      	ands	r3, r2
 800ee00:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d106      	bne.n	800ee14 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ee06:	187b      	adds	r3, r7, r1
 800ee08:	7b1b      	ldrb	r3, [r3, #12]
 800ee0a:	2240      	movs	r2, #64	; 0x40
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d006      	beq.n	800ee22 <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee14:	4b51      	ldr	r3, [pc, #324]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ee16:	4a54      	ldr	r2, [pc, #336]	; (800ef68 <ProcessRadioRxDone+0x738>)
 800ee18:	2101      	movs	r1, #1
 800ee1a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ee1c:	f7ff fcdc 	bl	800e7d8 <PrepareRxDoneAbort>
                return;
 800ee20:	e234      	b.n	800f28c <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ee22:	2164      	movs	r1, #100	; 0x64
 800ee24:	187b      	adds	r3, r7, r1
 800ee26:	2215      	movs	r2, #21
 800ee28:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ee2a:	4b4c      	ldr	r3, [pc, #304]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ee2c:	4a4d      	ldr	r2, [pc, #308]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800ee2e:	589b      	ldr	r3, [r3, r2]
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	187a      	adds	r2, r7, r1
 800ee34:	0011      	movs	r1, r2
 800ee36:	0018      	movs	r0, r3
 800ee38:	f007 f8ef 	bl	801601a <RegionGetPhyParam>
 800ee3c:	0003      	movs	r3, r0
 800ee3e:	001a      	movs	r2, r3
 800ee40:	2060      	movs	r0, #96	; 0x60
 800ee42:	183b      	adds	r3, r7, r0
 800ee44:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ee46:	1cbb      	adds	r3, r7, #2
 800ee48:	781d      	ldrb	r5, [r3, #0]
 800ee4a:	4b44      	ldr	r3, [pc, #272]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ee4c:	4a45      	ldr	r2, [pc, #276]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800ee4e:	5899      	ldr	r1, [r3, r2]
 800ee50:	183b      	adds	r3, r7, r0
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	2280      	movs	r2, #128	; 0x80
 800ee58:	18bc      	adds	r4, r7, r2
 800ee5a:	22b0      	movs	r2, #176	; 0xb0
 800ee5c:	0052      	lsls	r2, r2, #1
 800ee5e:	588e      	ldr	r6, [r1, r2]
 800ee60:	2130      	movs	r1, #48	; 0x30
 800ee62:	1879      	adds	r1, r7, r1
 800ee64:	2082      	movs	r0, #130	; 0x82
 800ee66:	183a      	adds	r2, r7, r0
 800ee68:	7810      	ldrb	r0, [r2, #0]
 800ee6a:	1d3a      	adds	r2, r7, #4
 800ee6c:	9202      	str	r2, [sp, #8]
 800ee6e:	1cfa      	adds	r2, r7, #3
 800ee70:	9201      	str	r2, [sp, #4]
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	0033      	movs	r3, r6
 800ee76:	000a      	movs	r2, r1
 800ee78:	0029      	movs	r1, r5
 800ee7a:	f000 fe91 	bl	800fba0 <GetFCntDown>
 800ee7e:	0003      	movs	r3, r0
 800ee80:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ee82:	2280      	movs	r2, #128	; 0x80
 800ee84:	18bb      	adds	r3, r7, r2
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d040      	beq.n	800ef0e <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ee8c:	18bb      	adds	r3, r7, r2
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	2b07      	cmp	r3, #7
 800ee92:	d126      	bne.n	800eee2 <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ee94:	4b31      	ldr	r3, [pc, #196]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ee96:	4a34      	ldr	r2, [pc, #208]	; (800ef68 <ProcessRadioRxDone+0x738>)
 800ee98:	2108      	movs	r1, #8
 800ee9a:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800ee9c:	4b2f      	ldr	r3, [pc, #188]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ee9e:	4a31      	ldr	r2, [pc, #196]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800eea0:	589a      	ldr	r2, [r3, r2]
 800eea2:	23b1      	movs	r3, #177	; 0xb1
 800eea4:	005b      	lsls	r3, r3, #1
 800eea6:	5cd3      	ldrb	r3, [r2, r3]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d128      	bne.n	800eefe <ProcessRadioRxDone+0x6ce>
 800eeac:	2374      	movs	r3, #116	; 0x74
 800eeae:	18fb      	adds	r3, r7, r3
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	221f      	movs	r2, #31
 800eeb4:	4393      	bics	r3, r2
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	2ba0      	cmp	r3, #160	; 0xa0
 800eeba:	d120      	bne.n	800eefe <ProcessRadioRxDone+0x6ce>
 800eebc:	4b27      	ldr	r3, [pc, #156]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800eebe:	4a29      	ldr	r2, [pc, #164]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800eec0:	589a      	ldr	r2, [r3, r2]
 800eec2:	23b4      	movs	r3, #180	; 0xb4
 800eec4:	005b      	lsls	r3, r3, #1
 800eec6:	58d2      	ldr	r2, [r2, r3]
 800eec8:	2130      	movs	r1, #48	; 0x30
 800eeca:	187b      	adds	r3, r7, r1
 800eecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eece:	429a      	cmp	r2, r3
 800eed0:	d115      	bne.n	800eefe <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800eed2:	4b22      	ldr	r3, [pc, #136]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800eed4:	4a23      	ldr	r2, [pc, #140]	; (800ef64 <ProcessRadioRxDone+0x734>)
 800eed6:	589a      	ldr	r2, [r3, r2]
 800eed8:	234c      	movs	r3, #76	; 0x4c
 800eeda:	33ff      	adds	r3, #255	; 0xff
 800eedc:	2101      	movs	r1, #1
 800eede:	54d1      	strb	r1, [r2, r3]
 800eee0:	e00d      	b.n	800eefe <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800eee2:	2380      	movs	r3, #128	; 0x80
 800eee4:	18fb      	adds	r3, r7, r3
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	2b08      	cmp	r3, #8
 800eeea:	d104      	bne.n	800eef6 <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800eeec:	4b1b      	ldr	r3, [pc, #108]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800eeee:	4a1e      	ldr	r2, [pc, #120]	; (800ef68 <ProcessRadioRxDone+0x738>)
 800eef0:	210a      	movs	r1, #10
 800eef2:	5499      	strb	r1, [r3, r2]
 800eef4:	e003      	b.n	800eefe <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eef6:	4b19      	ldr	r3, [pc, #100]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800eef8:	4a1b      	ldr	r2, [pc, #108]	; (800ef68 <ProcessRadioRxDone+0x738>)
 800eefa:	2101      	movs	r1, #1
 800eefc:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800eefe:	6879      	ldr	r1, [r7, #4]
 800ef00:	4a16      	ldr	r2, [pc, #88]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ef02:	2386      	movs	r3, #134	; 0x86
 800ef04:	00db      	lsls	r3, r3, #3
 800ef06:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800ef08:	f7ff fc66 	bl	800e7d8 <PrepareRxDoneAbort>
                return;
 800ef0c:	e1be      	b.n	800f28c <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ef0e:	1cfb      	adds	r3, r7, #3
 800ef10:	781a      	ldrb	r2, [r3, #0]
 800ef12:	687d      	ldr	r5, [r7, #4]
 800ef14:	2680      	movs	r6, #128	; 0x80
 800ef16:	19bc      	adds	r4, r7, r6
 800ef18:	2384      	movs	r3, #132	; 0x84
 800ef1a:	18fb      	adds	r3, r7, r3
 800ef1c:	6819      	ldr	r1, [r3, #0]
 800ef1e:	2382      	movs	r3, #130	; 0x82
 800ef20:	18fb      	adds	r3, r7, r3
 800ef22:	7818      	ldrb	r0, [r3, #0]
 800ef24:	2330      	movs	r3, #48	; 0x30
 800ef26:	18fb      	adds	r3, r7, r3
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	002b      	movs	r3, r5
 800ef2c:	f006 fb78 	bl	8015620 <LoRaMacCryptoUnsecureMessage>
 800ef30:	0003      	movs	r3, r0
 800ef32:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ef34:	19bb      	adds	r3, r7, r6
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d01d      	beq.n	800ef78 <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ef3c:	19bb      	adds	r3, r7, r6
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	2b02      	cmp	r3, #2
 800ef42:	d104      	bne.n	800ef4e <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ef44:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ef46:	4a08      	ldr	r2, [pc, #32]	; (800ef68 <ProcessRadioRxDone+0x738>)
 800ef48:	210b      	movs	r1, #11
 800ef4a:	5499      	strb	r1, [r3, r2]
 800ef4c:	e003      	b.n	800ef56 <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ef4e:	4b03      	ldr	r3, [pc, #12]	; (800ef5c <ProcessRadioRxDone+0x72c>)
 800ef50:	4a05      	ldr	r2, [pc, #20]	; (800ef68 <ProcessRadioRxDone+0x738>)
 800ef52:	210c      	movs	r1, #12
 800ef54:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800ef56:	f7ff fc3f 	bl	800e7d8 <PrepareRxDoneAbort>
                return;
 800ef5a:	e197      	b.n	800f28c <ProcessRadioRxDone+0xa5c>
 800ef5c:	20000b6c 	.word	0x20000b6c
 800ef60:	0000041c 	.word	0x0000041c
 800ef64:	00000484 	.word	0x00000484
 800ef68:	0000041d 	.word	0x0000041d
 800ef6c:	20000da4 	.word	0x20000da4
 800ef70:	00000434 	.word	0x00000434
 800ef74:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ef78:	4bc6      	ldr	r3, [pc, #792]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800ef7a:	4ac7      	ldr	r2, [pc, #796]	; (800f298 <ProcessRadioRxDone+0xa68>)
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800ef80:	4bc4      	ldr	r3, [pc, #784]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800ef82:	2283      	movs	r2, #131	; 0x83
 800ef84:	18ba      	adds	r2, r7, r2
 800ef86:	49c5      	ldr	r1, [pc, #788]	; (800f29c <ProcessRadioRxDone+0xa6c>)
 800ef88:	7812      	ldrb	r2, [r2, #0]
 800ef8a:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800ef8c:	2030      	movs	r0, #48	; 0x30
 800ef8e:	183b      	adds	r3, r7, r0
 800ef90:	7b1b      	ldrb	r3, [r3, #12]
 800ef92:	06db      	lsls	r3, r3, #27
 800ef94:	0fdb      	lsrs	r3, r3, #31
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	0019      	movs	r1, r3
 800ef9a:	4bbe      	ldr	r3, [pc, #760]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800ef9c:	4ac0      	ldr	r2, [pc, #768]	; (800f2a0 <ProcessRadioRxDone+0xa70>)
 800ef9e:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800efa0:	4bbc      	ldr	r3, [pc, #752]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800efa2:	4ac0      	ldr	r2, [pc, #768]	; (800f2a4 <ProcessRadioRxDone+0xa74>)
 800efa4:	2100      	movs	r1, #0
 800efa6:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800efa8:	4aba      	ldr	r2, [pc, #744]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800efaa:	2385      	movs	r3, #133	; 0x85
 800efac:	00db      	lsls	r3, r3, #3
 800efae:	2100      	movs	r1, #0
 800efb0:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800efb2:	6879      	ldr	r1, [r7, #4]
 800efb4:	4ab7      	ldr	r2, [pc, #732]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800efb6:	2386      	movs	r3, #134	; 0x86
 800efb8:	00db      	lsls	r3, r3, #3
 800efba:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800efbc:	183b      	adds	r3, r7, r0
 800efbe:	7b1b      	ldrb	r3, [r3, #12]
 800efc0:	069b      	lsls	r3, r3, #26
 800efc2:	0fdb      	lsrs	r3, r3, #31
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	1e5a      	subs	r2, r3, #1
 800efc8:	4193      	sbcs	r3, r2
 800efca:	b2d9      	uxtb	r1, r3
 800efcc:	4bb1      	ldr	r3, [pc, #708]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800efce:	4ab6      	ldr	r2, [pc, #728]	; (800f2a8 <ProcessRadioRxDone+0xa78>)
 800efd0:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800efd2:	4bb0      	ldr	r3, [pc, #704]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800efd4:	4ab5      	ldr	r2, [pc, #724]	; (800f2ac <ProcessRadioRxDone+0xa7c>)
 800efd6:	2100      	movs	r1, #0
 800efd8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800efda:	183b      	adds	r3, r7, r0
 800efdc:	7b1b      	ldrb	r3, [r3, #12]
 800efde:	069b      	lsls	r3, r3, #26
 800efe0:	0fdb      	lsrs	r3, r3, #31
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	1e5a      	subs	r2, r3, #1
 800efe6:	4193      	sbcs	r3, r2
 800efe8:	b2d9      	uxtb	r1, r3
 800efea:	4aaa      	ldr	r2, [pc, #680]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800efec:	2388      	movs	r3, #136	; 0x88
 800efee:	00db      	lsls	r3, r3, #3
 800eff0:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800eff2:	4ba8      	ldr	r3, [pc, #672]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800eff4:	4aae      	ldr	r2, [pc, #696]	; (800f2b0 <ProcessRadioRxDone+0xa80>)
 800eff6:	5c9b      	ldrb	r3, [r3, r2]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d004      	beq.n	800f006 <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800effc:	4ba5      	ldr	r3, [pc, #660]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800effe:	4aac      	ldr	r2, [pc, #688]	; (800f2b0 <ProcessRadioRxDone+0xa80>)
 800f000:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800f002:	2b01      	cmp	r3, #1
 800f004:	d105      	bne.n	800f012 <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800f006:	4ba3      	ldr	r3, [pc, #652]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f008:	4aaa      	ldr	r2, [pc, #680]	; (800f2b4 <ProcessRadioRxDone+0xa84>)
 800f00a:	589b      	ldr	r3, [r3, r2]
 800f00c:	2280      	movs	r2, #128	; 0x80
 800f00e:	2100      	movs	r1, #0
 800f010:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f012:	2383      	movs	r3, #131	; 0x83
 800f014:	18fb      	adds	r3, r7, r3
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d104      	bne.n	800f026 <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f01c:	4b9d      	ldr	r3, [pc, #628]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f01e:	4aa6      	ldr	r2, [pc, #664]	; (800f2b8 <ProcessRadioRxDone+0xa88>)
 800f020:	2102      	movs	r1, #2
 800f022:	5499      	strb	r1, [r3, r2]
 800f024:	e02f      	b.n	800f086 <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f026:	2374      	movs	r3, #116	; 0x74
 800f028:	18fb      	adds	r3, r7, r3
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	221f      	movs	r2, #31
 800f02e:	4393      	bics	r3, r2
 800f030:	b2db      	uxtb	r3, r3
 800f032:	2ba0      	cmp	r3, #160	; 0xa0
 800f034:	d11c      	bne.n	800f070 <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800f036:	4b97      	ldr	r3, [pc, #604]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f038:	4a9e      	ldr	r2, [pc, #632]	; (800f2b4 <ProcessRadioRxDone+0xa84>)
 800f03a:	589a      	ldr	r2, [r3, r2]
 800f03c:	234c      	movs	r3, #76	; 0x4c
 800f03e:	33ff      	adds	r3, #255	; 0xff
 800f040:	2101      	movs	r1, #1
 800f042:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800f044:	4b93      	ldr	r3, [pc, #588]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f046:	4a9b      	ldr	r2, [pc, #620]	; (800f2b4 <ProcessRadioRxDone+0xa84>)
 800f048:	589a      	ldr	r2, [r3, r2]
 800f04a:	23b1      	movs	r3, #177	; 0xb1
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	5cd3      	ldrb	r3, [r2, r3]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d108      	bne.n	800f066 <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800f054:	4b8f      	ldr	r3, [pc, #572]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f056:	4a97      	ldr	r2, [pc, #604]	; (800f2b4 <ProcessRadioRxDone+0xa84>)
 800f058:	589a      	ldr	r2, [r3, r2]
 800f05a:	2330      	movs	r3, #48	; 0x30
 800f05c:	18fb      	adds	r3, r7, r3
 800f05e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f060:	23b4      	movs	r3, #180	; 0xb4
 800f062:	005b      	lsls	r3, r3, #1
 800f064:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f066:	4b8b      	ldr	r3, [pc, #556]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f068:	4a93      	ldr	r2, [pc, #588]	; (800f2b8 <ProcessRadioRxDone+0xa88>)
 800f06a:	2101      	movs	r1, #1
 800f06c:	5499      	strb	r1, [r3, r2]
 800f06e:	e00a      	b.n	800f086 <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800f070:	4b88      	ldr	r3, [pc, #544]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f072:	4a90      	ldr	r2, [pc, #576]	; (800f2b4 <ProcessRadioRxDone+0xa84>)
 800f074:	589a      	ldr	r2, [r3, r2]
 800f076:	234c      	movs	r3, #76	; 0x4c
 800f078:	33ff      	adds	r3, #255	; 0xff
 800f07a:	2100      	movs	r1, #0
 800f07c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f07e:	4b85      	ldr	r3, [pc, #532]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f080:	4a8d      	ldr	r2, [pc, #564]	; (800f2b8 <ProcessRadioRxDone+0xa88>)
 800f082:	2100      	movs	r1, #0
 800f084:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f086:	4b83      	ldr	r3, [pc, #524]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f088:	4a89      	ldr	r2, [pc, #548]	; (800f2b0 <ProcessRadioRxDone+0xa80>)
 800f08a:	5c98      	ldrb	r0, [r3, r2]
 800f08c:	4b81      	ldr	r3, [pc, #516]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f08e:	4a8b      	ldr	r2, [pc, #556]	; (800f2bc <ProcessRadioRxDone+0xa8c>)
 800f090:	5c9a      	ldrb	r2, [r3, r2]
 800f092:	2330      	movs	r3, #48	; 0x30
 800f094:	18fb      	adds	r3, r7, r3
 800f096:	7b1b      	ldrb	r3, [r3, #12]
 800f098:	1c19      	adds	r1, r3, #0
 800f09a:	f002 f94d 	bl	8011338 <RemoveMacCommands>

            switch( fType )
 800f09e:	1cbb      	adds	r3, r7, #2
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	2b03      	cmp	r3, #3
 800f0a4:	d100      	bne.n	800f0a8 <ProcessRadioRxDone+0x878>
 800f0a6:	e073      	b.n	800f190 <ProcessRadioRxDone+0x960>
 800f0a8:	dd00      	ble.n	800f0ac <ProcessRadioRxDone+0x87c>
 800f0aa:	e089      	b.n	800f1c0 <ProcessRadioRxDone+0x990>
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	d055      	beq.n	800f15c <ProcessRadioRxDone+0x92c>
 800f0b0:	dd00      	ble.n	800f0b4 <ProcessRadioRxDone+0x884>
 800f0b2:	e085      	b.n	800f1c0 <ProcessRadioRxDone+0x990>
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d002      	beq.n	800f0be <ProcessRadioRxDone+0x88e>
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d030      	beq.n	800f11e <ProcessRadioRxDone+0x8ee>
 800f0bc:	e080      	b.n	800f1c0 <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800f0be:	2030      	movs	r0, #48	; 0x30
 800f0c0:	183b      	adds	r3, r7, r0
 800f0c2:	7b1b      	ldrb	r3, [r3, #12]
 800f0c4:	071b      	lsls	r3, r3, #28
 800f0c6:	0f1b      	lsrs	r3, r3, #28
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	001c      	movs	r4, r3
 800f0cc:	4b71      	ldr	r3, [pc, #452]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f0ce:	4a78      	ldr	r2, [pc, #480]	; (800f2b0 <ProcessRadioRxDone+0xa80>)
 800f0d0:	5c9b      	ldrb	r3, [r3, r2]
 800f0d2:	2277      	movs	r2, #119	; 0x77
 800f0d4:	18ba      	adds	r2, r7, r2
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	5651      	ldrsb	r1, [r2, r1]
 800f0da:	0005      	movs	r5, r0
 800f0dc:	183a      	adds	r2, r7, r0
 800f0de:	3210      	adds	r2, #16
 800f0e0:	0010      	movs	r0, r2
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	000b      	movs	r3, r1
 800f0e6:	0022      	movs	r2, r4
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	f000 ff4f 	bl	800ff8c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f0ee:	0028      	movs	r0, r5
 800f0f0:	183b      	adds	r3, r7, r0
 800f0f2:	2220      	movs	r2, #32
 800f0f4:	5c99      	ldrb	r1, [r3, r2]
 800f0f6:	4b67      	ldr	r3, [pc, #412]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f0f8:	4a71      	ldr	r2, [pc, #452]	; (800f2c0 <ProcessRadioRxDone+0xa90>)
 800f0fa:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f0fc:	183b      	adds	r3, r7, r0
 800f0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f100:	4b64      	ldr	r3, [pc, #400]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f102:	4968      	ldr	r1, [pc, #416]	; (800f2a4 <ProcessRadioRxDone+0xa74>)
 800f104:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f106:	183b      	adds	r3, r7, r0
 800f108:	2228      	movs	r2, #40	; 0x28
 800f10a:	5c99      	ldrb	r1, [r3, r2]
 800f10c:	4a61      	ldr	r2, [pc, #388]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f10e:	2385      	movs	r3, #133	; 0x85
 800f110:	00db      	lsls	r3, r3, #3
 800f112:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800f114:	4b5f      	ldr	r3, [pc, #380]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f116:	4a6b      	ldr	r2, [pc, #428]	; (800f2c4 <ProcessRadioRxDone+0xa94>)
 800f118:	2101      	movs	r1, #1
 800f11a:	5499      	strb	r1, [r3, r2]
                    break;
 800f11c:	e057      	b.n	800f1ce <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800f11e:	2030      	movs	r0, #48	; 0x30
 800f120:	183b      	adds	r3, r7, r0
 800f122:	7b1b      	ldrb	r3, [r3, #12]
 800f124:	071b      	lsls	r3, r3, #28
 800f126:	0f1b      	lsrs	r3, r3, #28
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	001c      	movs	r4, r3
 800f12c:	4b59      	ldr	r3, [pc, #356]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f12e:	4a60      	ldr	r2, [pc, #384]	; (800f2b0 <ProcessRadioRxDone+0xa80>)
 800f130:	5c9b      	ldrb	r3, [r3, r2]
 800f132:	2277      	movs	r2, #119	; 0x77
 800f134:	18ba      	adds	r2, r7, r2
 800f136:	2100      	movs	r1, #0
 800f138:	5651      	ldrsb	r1, [r2, r1]
 800f13a:	0005      	movs	r5, r0
 800f13c:	183a      	adds	r2, r7, r0
 800f13e:	3210      	adds	r2, #16
 800f140:	0010      	movs	r0, r2
 800f142:	9300      	str	r3, [sp, #0]
 800f144:	000b      	movs	r3, r1
 800f146:	0022      	movs	r2, r4
 800f148:	2100      	movs	r1, #0
 800f14a:	f000 ff1f 	bl	800ff8c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f14e:	197b      	adds	r3, r7, r5
 800f150:	2220      	movs	r2, #32
 800f152:	5c99      	ldrb	r1, [r3, r2]
 800f154:	4b4f      	ldr	r3, [pc, #316]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f156:	4a5a      	ldr	r2, [pc, #360]	; (800f2c0 <ProcessRadioRxDone+0xa90>)
 800f158:	5499      	strb	r1, [r3, r2]
                    break;
 800f15a:	e038      	b.n	800f1ce <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800f15c:	2430      	movs	r4, #48	; 0x30
 800f15e:	193b      	adds	r3, r7, r4
 800f160:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f162:	193b      	adds	r3, r7, r4
 800f164:	2228      	movs	r2, #40	; 0x28
 800f166:	5c99      	ldrb	r1, [r3, r2]
 800f168:	4b4a      	ldr	r3, [pc, #296]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f16a:	4a51      	ldr	r2, [pc, #324]	; (800f2b0 <ProcessRadioRxDone+0xa80>)
 800f16c:	5c9b      	ldrb	r3, [r3, r2]
 800f16e:	2277      	movs	r2, #119	; 0x77
 800f170:	18ba      	adds	r2, r7, r2
 800f172:	7812      	ldrb	r2, [r2, #0]
 800f174:	b252      	sxtb	r2, r2
 800f176:	9300      	str	r3, [sp, #0]
 800f178:	0013      	movs	r3, r2
 800f17a:	000a      	movs	r2, r1
 800f17c:	2100      	movs	r1, #0
 800f17e:	f000 ff05 	bl	800ff8c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f182:	193b      	adds	r3, r7, r4
 800f184:	2220      	movs	r2, #32
 800f186:	5c99      	ldrb	r1, [r3, r2]
 800f188:	4b42      	ldr	r3, [pc, #264]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f18a:	4a4d      	ldr	r2, [pc, #308]	; (800f2c0 <ProcessRadioRxDone+0xa90>)
 800f18c:	5499      	strb	r1, [r3, r2]
                    break;
 800f18e:	e01e      	b.n	800f1ce <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f190:	2030      	movs	r0, #48	; 0x30
 800f192:	183b      	adds	r3, r7, r0
 800f194:	2220      	movs	r2, #32
 800f196:	5c99      	ldrb	r1, [r3, r2]
 800f198:	4b3e      	ldr	r3, [pc, #248]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f19a:	4a49      	ldr	r2, [pc, #292]	; (800f2c0 <ProcessRadioRxDone+0xa90>)
 800f19c:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f19e:	183b      	adds	r3, r7, r0
 800f1a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1a2:	4b3c      	ldr	r3, [pc, #240]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f1a4:	493f      	ldr	r1, [pc, #252]	; (800f2a4 <ProcessRadioRxDone+0xa74>)
 800f1a6:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f1a8:	183b      	adds	r3, r7, r0
 800f1aa:	2228      	movs	r2, #40	; 0x28
 800f1ac:	5c99      	ldrb	r1, [r3, r2]
 800f1ae:	4a39      	ldr	r2, [pc, #228]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f1b0:	2385      	movs	r3, #133	; 0x85
 800f1b2:	00db      	lsls	r3, r3, #3
 800f1b4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800f1b6:	4b37      	ldr	r3, [pc, #220]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f1b8:	4a42      	ldr	r2, [pc, #264]	; (800f2c4 <ProcessRadioRxDone+0xa94>)
 800f1ba:	2101      	movs	r1, #1
 800f1bc:	5499      	strb	r1, [r3, r2]
                    break;
 800f1be:	e006      	b.n	800f1ce <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f1c0:	4b34      	ldr	r3, [pc, #208]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f1c2:	4a35      	ldr	r2, [pc, #212]	; (800f298 <ProcessRadioRxDone+0xa68>)
 800f1c4:	2101      	movs	r1, #1
 800f1c6:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800f1c8:	f7ff fb06 	bl	800e7d8 <PrepareRxDoneAbort>
                    break;
 800f1cc:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f1ce:	4b31      	ldr	r3, [pc, #196]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f1d0:	4a3d      	ldr	r2, [pc, #244]	; (800f2c8 <ProcessRadioRxDone+0xa98>)
 800f1d2:	5c99      	ldrb	r1, [r3, r2]
 800f1d4:	2002      	movs	r0, #2
 800f1d6:	4301      	orrs	r1, r0
 800f1d8:	5499      	strb	r1, [r3, r2]

            break;
 800f1da:	e036      	b.n	800f24a <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f1dc:	2476      	movs	r4, #118	; 0x76
 800f1de:	193b      	adds	r3, r7, r4
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f1e4:	18d1      	adds	r1, r2, r3
 800f1e6:	193b      	adds	r3, r7, r4
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	257a      	movs	r5, #122	; 0x7a
 800f1ee:	197a      	adds	r2, r7, r5
 800f1f0:	8812      	ldrh	r2, [r2, #0]
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	b29a      	uxth	r2, r3
 800f1f6:	4b35      	ldr	r3, [pc, #212]	; (800f2cc <ProcessRadioRxDone+0xa9c>)
 800f1f8:	0018      	movs	r0, r3
 800f1fa:	f009 fb89 	bl	8018910 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f1fe:	4b25      	ldr	r3, [pc, #148]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f200:	4a2d      	ldr	r2, [pc, #180]	; (800f2b8 <ProcessRadioRxDone+0xa88>)
 800f202:	2103      	movs	r1, #3
 800f204:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f206:	4b23      	ldr	r3, [pc, #140]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f208:	4a23      	ldr	r2, [pc, #140]	; (800f298 <ProcessRadioRxDone+0xa68>)
 800f20a:	2100      	movs	r1, #0
 800f20c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f20e:	4b21      	ldr	r3, [pc, #132]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f210:	4924      	ldr	r1, [pc, #144]	; (800f2a4 <ProcessRadioRxDone+0xa74>)
 800f212:	4a2e      	ldr	r2, [pc, #184]	; (800f2cc <ProcessRadioRxDone+0xa9c>)
 800f214:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f216:	197b      	adds	r3, r7, r5
 800f218:	881b      	ldrh	r3, [r3, #0]
 800f21a:	b2da      	uxtb	r2, r3
 800f21c:	193b      	adds	r3, r7, r4
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	b2d9      	uxtb	r1, r3
 800f224:	4a1b      	ldr	r2, [pc, #108]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f226:	2385      	movs	r3, #133	; 0x85
 800f228:	00db      	lsls	r3, r3, #3
 800f22a:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f22c:	4b19      	ldr	r3, [pc, #100]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f22e:	4a26      	ldr	r2, [pc, #152]	; (800f2c8 <ProcessRadioRxDone+0xa98>)
 800f230:	5c99      	ldrb	r1, [r3, r2]
 800f232:	2002      	movs	r0, #2
 800f234:	4301      	orrs	r1, r0
 800f236:	5499      	strb	r1, [r3, r2]
            break;
 800f238:	e007      	b.n	800f24a <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f23a:	4b16      	ldr	r3, [pc, #88]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f23c:	4a16      	ldr	r2, [pc, #88]	; (800f298 <ProcessRadioRxDone+0xa68>)
 800f23e:	2101      	movs	r1, #1
 800f240:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800f242:	f7ff fac9 	bl	800e7d8 <PrepareRxDoneAbort>
            break;
 800f246:	e000      	b.n	800f24a <ProcessRadioRxDone+0xa1a>
            break;
 800f248:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800f24a:	4b12      	ldr	r3, [pc, #72]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f24c:	4a20      	ldr	r2, [pc, #128]	; (800f2d0 <ProcessRadioRxDone+0xaa0>)
 800f24e:	5c9b      	ldrb	r3, [r3, r2]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d009      	beq.n	800f268 <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f254:	4a0f      	ldr	r2, [pc, #60]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f256:	2388      	movs	r3, #136	; 0x88
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	5cd3      	ldrb	r3, [r2, r3]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d00d      	beq.n	800f27c <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f260:	2000      	movs	r0, #0
 800f262:	f000 fc5b 	bl	800fb1c <OnAckTimeoutTimerEvent>
 800f266:	e009      	b.n	800f27c <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f268:	4b0a      	ldr	r3, [pc, #40]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f26a:	4a12      	ldr	r2, [pc, #72]	; (800f2b4 <ProcessRadioRxDone+0xa84>)
 800f26c:	589b      	ldr	r3, [r3, r2]
 800f26e:	227c      	movs	r2, #124	; 0x7c
 800f270:	5c9b      	ldrb	r3, [r3, r2]
 800f272:	2b02      	cmp	r3, #2
 800f274:	d102      	bne.n	800f27c <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f276:	2000      	movs	r0, #0
 800f278:	f000 fc50 	bl	800fb1c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f27c:	4b05      	ldr	r3, [pc, #20]	; (800f294 <ProcessRadioRxDone+0xa64>)
 800f27e:	4a12      	ldr	r2, [pc, #72]	; (800f2c8 <ProcessRadioRxDone+0xa98>)
 800f280:	5c99      	ldrb	r1, [r3, r2]
 800f282:	2020      	movs	r0, #32
 800f284:	4301      	orrs	r1, r0
 800f286:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f288:	f7ff f9c0 	bl	800e60c <UpdateRxSlotIdleState>
}
 800f28c:	46bd      	mov	sp, r7
 800f28e:	b023      	add	sp, #140	; 0x8c
 800f290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f292:	46c0      	nop			; (mov r8, r8)
 800f294:	20000b6c 	.word	0x20000b6c
 800f298:	0000041d 	.word	0x0000041d
 800f29c:	0000041e 	.word	0x0000041e
 800f2a0:	00000421 	.word	0x00000421
 800f2a4:	00000424 	.word	0x00000424
 800f2a8:	0000042e 	.word	0x0000042e
 800f2ac:	0000043d 	.word	0x0000043d
 800f2b0:	0000042d 	.word	0x0000042d
 800f2b4:	00000484 	.word	0x00000484
 800f2b8:	0000041c 	.word	0x0000041c
 800f2bc:	0000043c 	.word	0x0000043c
 800f2c0:	0000041f 	.word	0x0000041f
 800f2c4:	00000429 	.word	0x00000429
 800f2c8:	00000481 	.word	0x00000481
 800f2cc:	20000da4 	.word	0x20000da4
 800f2d0:	00000414 	.word	0x00000414

0800f2d4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f2d8:	4b12      	ldr	r3, [pc, #72]	; (800f324 <ProcessRadioTxTimeout+0x50>)
 800f2da:	4a13      	ldr	r2, [pc, #76]	; (800f328 <ProcessRadioTxTimeout+0x54>)
 800f2dc:	589b      	ldr	r3, [r3, r2]
 800f2de:	227c      	movs	r2, #124	; 0x7c
 800f2e0:	5c9b      	ldrb	r3, [r3, r2]
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d002      	beq.n	800f2ec <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800f2e6:	4b11      	ldr	r3, [pc, #68]	; (800f32c <ProcessRadioTxTimeout+0x58>)
 800f2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ea:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f2ec:	f7ff f98e 	bl	800e60c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f2f0:	4b0c      	ldr	r3, [pc, #48]	; (800f324 <ProcessRadioTxTimeout+0x50>)
 800f2f2:	4a0f      	ldr	r2, [pc, #60]	; (800f330 <ProcessRadioTxTimeout+0x5c>)
 800f2f4:	2102      	movs	r1, #2
 800f2f6:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f2f8:	2002      	movs	r0, #2
 800f2fa:	f005 fa59 	bl	80147b0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f2fe:	4b09      	ldr	r3, [pc, #36]	; (800f324 <ProcessRadioTxTimeout+0x50>)
 800f300:	4a0c      	ldr	r2, [pc, #48]	; (800f334 <ProcessRadioTxTimeout+0x60>)
 800f302:	5c9b      	ldrb	r3, [r3, r2]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d003      	beq.n	800f310 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800f308:	4b06      	ldr	r3, [pc, #24]	; (800f324 <ProcessRadioTxTimeout+0x50>)
 800f30a:	4a0b      	ldr	r2, [pc, #44]	; (800f338 <ProcessRadioTxTimeout+0x64>)
 800f30c:	2101      	movs	r1, #1
 800f30e:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f310:	4b04      	ldr	r3, [pc, #16]	; (800f324 <ProcessRadioTxTimeout+0x50>)
 800f312:	4a0a      	ldr	r2, [pc, #40]	; (800f33c <ProcessRadioTxTimeout+0x68>)
 800f314:	5c99      	ldrb	r1, [r3, r2]
 800f316:	2020      	movs	r0, #32
 800f318:	4301      	orrs	r1, r0
 800f31a:	5499      	strb	r1, [r3, r2]
}
 800f31c:	46c0      	nop			; (mov r8, r8)
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	46c0      	nop			; (mov r8, r8)
 800f324:	20000b6c 	.word	0x20000b6c
 800f328:	00000484 	.word	0x00000484
 800f32c:	0801e62c 	.word	0x0801e62c
 800f330:	0000043d 	.word	0x0000043d
 800f334:	00000414 	.word	0x00000414
 800f338:	00000413 	.word	0x00000413
 800f33c:	00000481 	.word	0x00000481

0800f340 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	0002      	movs	r2, r0
 800f348:	1dfb      	adds	r3, r7, #7
 800f34a:	701a      	strb	r2, [r3, #0]
 800f34c:	1dbb      	adds	r3, r7, #6
 800f34e:	1c0a      	adds	r2, r1, #0
 800f350:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800f352:	230f      	movs	r3, #15
 800f354:	18fb      	adds	r3, r7, r3
 800f356:	2200      	movs	r2, #0
 800f358:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f35a:	4b4a      	ldr	r3, [pc, #296]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f35c:	4a4a      	ldr	r2, [pc, #296]	; (800f488 <HandleRadioRxErrorTimeout+0x148>)
 800f35e:	589b      	ldr	r3, [r3, r2]
 800f360:	227c      	movs	r2, #124	; 0x7c
 800f362:	5c9b      	ldrb	r3, [r3, r2]
 800f364:	2b02      	cmp	r3, #2
 800f366:	d002      	beq.n	800f36e <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800f368:	4b48      	ldr	r3, [pc, #288]	; (800f48c <HandleRadioRxErrorTimeout+0x14c>)
 800f36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f36c:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f36e:	f004 fcdb 	bl	8013d28 <LoRaMacClassBIsBeaconExpected>
 800f372:	1e03      	subs	r3, r0, #0
 800f374:	d009      	beq.n	800f38a <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f376:	2002      	movs	r0, #2
 800f378:	f004 fc8e 	bl	8013c98 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f37c:	2000      	movs	r0, #0
 800f37e:	f004 fcaf 	bl	8013ce0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f382:	230f      	movs	r3, #15
 800f384:	18fb      	adds	r3, r7, r3
 800f386:	2201      	movs	r2, #1
 800f388:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f38a:	4b3e      	ldr	r3, [pc, #248]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f38c:	4a3e      	ldr	r2, [pc, #248]	; (800f488 <HandleRadioRxErrorTimeout+0x148>)
 800f38e:	589b      	ldr	r3, [r3, r2]
 800f390:	227c      	movs	r2, #124	; 0x7c
 800f392:	5c9b      	ldrb	r3, [r3, r2]
 800f394:	2b01      	cmp	r3, #1
 800f396:	d11b      	bne.n	800f3d0 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f398:	f004 fccc 	bl	8013d34 <LoRaMacClassBIsPingExpected>
 800f39c:	1e03      	subs	r3, r0, #0
 800f39e:	d009      	beq.n	800f3b4 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	f004 fc83 	bl	8013cac <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	f004 fca2 	bl	8013cf0 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f3ac:	230f      	movs	r3, #15
 800f3ae:	18fb      	adds	r3, r7, r3
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f3b4:	f004 fcc4 	bl	8013d40 <LoRaMacClassBIsMulticastExpected>
 800f3b8:	1e03      	subs	r3, r0, #0
 800f3ba:	d009      	beq.n	800f3d0 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f3bc:	2000      	movs	r0, #0
 800f3be:	f004 fc7f 	bl	8013cc0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f3c2:	2000      	movs	r0, #0
 800f3c4:	f004 fc9c 	bl	8013d00 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f3c8:	230f      	movs	r3, #15
 800f3ca:	18fb      	adds	r3, r7, r3
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800f3d0:	230f      	movs	r3, #15
 800f3d2:	18fb      	adds	r3, r7, r3
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	4053      	eors	r3, r2
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d04b      	beq.n	800f478 <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f3e0:	4a28      	ldr	r2, [pc, #160]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f3e2:	2390      	movs	r3, #144	; 0x90
 800f3e4:	00db      	lsls	r3, r3, #3
 800f3e6:	5cd3      	ldrb	r3, [r2, r3]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d129      	bne.n	800f440 <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 800f3ec:	4b25      	ldr	r3, [pc, #148]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f3ee:	4a28      	ldr	r2, [pc, #160]	; (800f490 <HandleRadioRxErrorTimeout+0x150>)
 800f3f0:	5c9b      	ldrb	r3, [r3, r2]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d004      	beq.n	800f400 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f3f6:	4b23      	ldr	r3, [pc, #140]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f3f8:	1dfa      	adds	r2, r7, #7
 800f3fa:	4926      	ldr	r1, [pc, #152]	; (800f494 <HandleRadioRxErrorTimeout+0x154>)
 800f3fc:	7812      	ldrb	r2, [r2, #0]
 800f3fe:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f400:	1dfb      	adds	r3, r7, #7
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	0018      	movs	r0, r3
 800f406:	f005 f9d3 	bl	80147b0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f40a:	4b1e      	ldr	r3, [pc, #120]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f40c:	4a1e      	ldr	r2, [pc, #120]	; (800f488 <HandleRadioRxErrorTimeout+0x148>)
 800f40e:	589a      	ldr	r2, [r3, r2]
 800f410:	23a8      	movs	r3, #168	; 0xa8
 800f412:	005b      	lsls	r3, r3, #1
 800f414:	58d3      	ldr	r3, [r2, r3]
 800f416:	0018      	movs	r0, r3
 800f418:	f00c ff36 	bl	801c288 <UTIL_TIMER_GetElapsedTime>
 800f41c:	0001      	movs	r1, r0
 800f41e:	4a19      	ldr	r2, [pc, #100]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f420:	23ed      	movs	r3, #237	; 0xed
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	58d3      	ldr	r3, [r2, r3]
 800f426:	4299      	cmp	r1, r3
 800f428:	d326      	bcc.n	800f478 <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f42a:	4b1b      	ldr	r3, [pc, #108]	; (800f498 <HandleRadioRxErrorTimeout+0x158>)
 800f42c:	0018      	movs	r0, r3
 800f42e:	f00c fde7 	bl	801c000 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f432:	4b14      	ldr	r3, [pc, #80]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f434:	4a19      	ldr	r2, [pc, #100]	; (800f49c <HandleRadioRxErrorTimeout+0x15c>)
 800f436:	5c99      	ldrb	r1, [r3, r2]
 800f438:	2020      	movs	r0, #32
 800f43a:	4301      	orrs	r1, r0
 800f43c:	5499      	strb	r1, [r3, r2]
 800f43e:	e01b      	b.n	800f478 <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f440:	4b10      	ldr	r3, [pc, #64]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f442:	4a13      	ldr	r2, [pc, #76]	; (800f490 <HandleRadioRxErrorTimeout+0x150>)
 800f444:	5c9b      	ldrb	r3, [r3, r2]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d004      	beq.n	800f454 <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f44a:	4b0e      	ldr	r3, [pc, #56]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f44c:	1dba      	adds	r2, r7, #6
 800f44e:	4911      	ldr	r1, [pc, #68]	; (800f494 <HandleRadioRxErrorTimeout+0x154>)
 800f450:	7812      	ldrb	r2, [r2, #0]
 800f452:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f454:	1dbb      	adds	r3, r7, #6
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	0018      	movs	r0, r3
 800f45a:	f005 f9a9 	bl	80147b0 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f45e:	4b09      	ldr	r3, [pc, #36]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f460:	4a09      	ldr	r2, [pc, #36]	; (800f488 <HandleRadioRxErrorTimeout+0x148>)
 800f462:	589b      	ldr	r3, [r3, r2]
 800f464:	227c      	movs	r2, #124	; 0x7c
 800f466:	5c9b      	ldrb	r3, [r3, r2]
 800f468:	2b02      	cmp	r3, #2
 800f46a:	d005      	beq.n	800f478 <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f46c:	4b05      	ldr	r3, [pc, #20]	; (800f484 <HandleRadioRxErrorTimeout+0x144>)
 800f46e:	4a0b      	ldr	r2, [pc, #44]	; (800f49c <HandleRadioRxErrorTimeout+0x15c>)
 800f470:	5c99      	ldrb	r1, [r3, r2]
 800f472:	2020      	movs	r0, #32
 800f474:	4301      	orrs	r1, r0
 800f476:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 800f478:	f7ff f8c8 	bl	800e60c <UpdateRxSlotIdleState>
}
 800f47c:	46c0      	nop			; (mov r8, r8)
 800f47e:	46bd      	mov	sp, r7
 800f480:	b004      	add	sp, #16
 800f482:	bd80      	pop	{r7, pc}
 800f484:	20000b6c 	.word	0x20000b6c
 800f488:	00000484 	.word	0x00000484
 800f48c:	0801e62c 	.word	0x0801e62c
 800f490:	00000414 	.word	0x00000414
 800f494:	0000043d 	.word	0x0000043d
 800f498:	20000f04 	.word	0x20000f04
 800f49c:	00000481 	.word	0x00000481

0800f4a0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f4a4:	2106      	movs	r1, #6
 800f4a6:	2005      	movs	r0, #5
 800f4a8:	f7ff ff4a 	bl	800f340 <HandleRadioRxErrorTimeout>
}
 800f4ac:	46c0      	nop			; (mov r8, r8)
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}

0800f4b2 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f4b2:	b580      	push	{r7, lr}
 800f4b4:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f4b6:	2104      	movs	r1, #4
 800f4b8:	2003      	movs	r0, #3
 800f4ba:	f7ff ff41 	bl	800f340 <HandleRadioRxErrorTimeout>
}
 800f4be:	46c0      	nop			; (mov r8, r8)
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4ca:	f3ef 8310 	mrs	r3, PRIMASK
 800f4ce:	607b      	str	r3, [r7, #4]
  return(result);
 800f4d0:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f4d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4d4:	b672      	cpsid	i
}
 800f4d6:	46c0      	nop			; (mov r8, r8)
    events = LoRaMacRadioEvents;
 800f4d8:	4b1f      	ldr	r3, [pc, #124]	; (800f558 <LoRaMacHandleIrqEvents+0x94>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f4de:	4b1e      	ldr	r3, [pc, #120]	; (800f558 <LoRaMacHandleIrqEvents+0x94>)
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	601a      	str	r2, [r3, #0]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	f383 8810 	msr	PRIMASK, r3
}
 800f4ee:	46c0      	nop			; (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d02c      	beq.n	800f550 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 800f4f6:	003b      	movs	r3, r7
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	2210      	movs	r2, #16
 800f4fc:	4013      	ands	r3, r2
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 800f504:	f7ff f89e 	bl	800e644 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f508:	003b      	movs	r3, r7
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2208      	movs	r2, #8
 800f50e:	4013      	ands	r3, r2
 800f510:	b2db      	uxtb	r3, r3
 800f512:	2b00      	cmp	r3, #0
 800f514:	d001      	beq.n	800f51a <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 800f516:	f7ff f98b 	bl	800e830 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f51a:	003b      	movs	r3, r7
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	2204      	movs	r2, #4
 800f520:	4013      	ands	r3, r2
 800f522:	b2db      	uxtb	r3, r3
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 800f528:	f7ff fed4 	bl	800f2d4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f52c:	003b      	movs	r3, r7
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2202      	movs	r2, #2
 800f532:	4013      	ands	r3, r2
 800f534:	b2db      	uxtb	r3, r3
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 800f53a:	f7ff ffb1 	bl	800f4a0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f53e:	003b      	movs	r3, r7
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	2201      	movs	r2, #1
 800f544:	4013      	ands	r3, r2
 800f546:	b2db      	uxtb	r3, r3
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d001      	beq.n	800f550 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 800f54c:	f7ff ffb1 	bl	800f4b2 <ProcessRadioRxTimeout>
        }
    }
}
 800f550:	46c0      	nop			; (mov r8, r8)
 800f552:	46bd      	mov	sp, r7
 800f554:	b004      	add	sp, #16
 800f556:	bd80      	pop	{r7, pc}
 800f558:	2000119c 	.word	0x2000119c

0800f55c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	0002      	movs	r2, r0
 800f564:	1dfb      	adds	r3, r7, #7
 800f566:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800f568:	4b04      	ldr	r3, [pc, #16]	; (800f57c <LoRaMacEnableRequests+0x20>)
 800f56a:	1dfa      	adds	r2, r7, #7
 800f56c:	4904      	ldr	r1, [pc, #16]	; (800f580 <LoRaMacEnableRequests+0x24>)
 800f56e:	7812      	ldrb	r2, [r2, #0]
 800f570:	545a      	strb	r2, [r3, r1]
}
 800f572:	46c0      	nop			; (mov r8, r8)
 800f574:	46bd      	mov	sp, r7
 800f576:	b002      	add	sp, #8
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	46c0      	nop			; (mov r8, r8)
 800f57c:	20000b6c 	.word	0x20000b6c
 800f580:	00000482 	.word	0x00000482

0800f584 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f58a:	1d3b      	adds	r3, r7, #4
 800f58c:	4a2c      	ldr	r2, [pc, #176]	; (800f640 <LoRaMacHandleRequestEvents+0xbc>)
 800f58e:	492d      	ldr	r1, [pc, #180]	; (800f644 <LoRaMacHandleRequestEvents+0xc0>)
 800f590:	5c52      	ldrb	r2, [r2, r1]
 800f592:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f594:	4a2a      	ldr	r2, [pc, #168]	; (800f640 <LoRaMacHandleRequestEvents+0xbc>)
 800f596:	23d0      	movs	r3, #208	; 0xd0
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	58d3      	ldr	r3, [r2, r3]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d14a      	bne.n	800f636 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f5a0:	4b27      	ldr	r3, [pc, #156]	; (800f640 <LoRaMacHandleRequestEvents+0xbc>)
 800f5a2:	4a28      	ldr	r2, [pc, #160]	; (800f644 <LoRaMacHandleRequestEvents+0xc0>)
 800f5a4:	5c9b      	ldrb	r3, [r3, r2]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	4013      	ands	r3, r2
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d005      	beq.n	800f5bc <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f5b0:	4b23      	ldr	r3, [pc, #140]	; (800f640 <LoRaMacHandleRequestEvents+0xbc>)
 800f5b2:	4a24      	ldr	r2, [pc, #144]	; (800f644 <LoRaMacHandleRequestEvents+0xc0>)
 800f5b4:	5c99      	ldrb	r1, [r3, r2]
 800f5b6:	2001      	movs	r0, #1
 800f5b8:	4381      	bics	r1, r0
 800f5ba:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f5bc:	4b20      	ldr	r3, [pc, #128]	; (800f640 <LoRaMacHandleRequestEvents+0xbc>)
 800f5be:	4a21      	ldr	r2, [pc, #132]	; (800f644 <LoRaMacHandleRequestEvents+0xc0>)
 800f5c0:	5c9b      	ldrb	r3, [r3, r2]
 800f5c2:	2204      	movs	r2, #4
 800f5c4:	4013      	ands	r3, r2
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d005      	beq.n	800f5d8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f5cc:	4b1c      	ldr	r3, [pc, #112]	; (800f640 <LoRaMacHandleRequestEvents+0xbc>)
 800f5ce:	4a1d      	ldr	r2, [pc, #116]	; (800f644 <LoRaMacHandleRequestEvents+0xc0>)
 800f5d0:	5c99      	ldrb	r1, [r3, r2]
 800f5d2:	2004      	movs	r0, #4
 800f5d4:	4381      	bics	r1, r0
 800f5d6:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f5d8:	2001      	movs	r0, #1
 800f5da:	f7ff ffbf 	bl	800f55c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f5de:	1d3b      	adds	r3, r7, #4
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	4013      	ands	r3, r2
 800f5e6:	b2db      	uxtb	r3, r3
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d007      	beq.n	800f5fc <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f5ec:	4a14      	ldr	r2, [pc, #80]	; (800f640 <LoRaMacHandleRequestEvents+0xbc>)
 800f5ee:	23d1      	movs	r3, #209	; 0xd1
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	58d3      	ldr	r3, [r2, r3]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4a14      	ldr	r2, [pc, #80]	; (800f648 <LoRaMacHandleRequestEvents+0xc4>)
 800f5f8:	0010      	movs	r0, r2
 800f5fa:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f5fc:	1d3b      	adds	r3, r7, #4
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2204      	movs	r2, #4
 800f602:	4013      	ands	r3, r2
 800f604:	b2db      	uxtb	r3, r3
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00d      	beq.n	800f626 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f60a:	4b10      	ldr	r3, [pc, #64]	; (800f64c <LoRaMacHandleRequestEvents+0xc8>)
 800f60c:	0018      	movs	r0, r3
 800f60e:	f005 f923 	bl	8014858 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f612:	f005 f983 	bl	801491c <LoRaMacConfirmQueueGetCnt>
 800f616:	1e03      	subs	r3, r0, #0
 800f618:	d005      	beq.n	800f626 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f61a:	4b09      	ldr	r3, [pc, #36]	; (800f640 <LoRaMacHandleRequestEvents+0xbc>)
 800f61c:	4a09      	ldr	r2, [pc, #36]	; (800f644 <LoRaMacHandleRequestEvents+0xc0>)
 800f61e:	5c99      	ldrb	r1, [r3, r2]
 800f620:	2004      	movs	r0, #4
 800f622:	4301      	orrs	r1, r0
 800f624:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f626:	f004 fba6 	bl	8013d76 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f62a:	4b05      	ldr	r3, [pc, #20]	; (800f640 <LoRaMacHandleRequestEvents+0xbc>)
 800f62c:	4a05      	ldr	r2, [pc, #20]	; (800f644 <LoRaMacHandleRequestEvents+0xc0>)
 800f62e:	5c99      	ldrb	r1, [r3, r2]
 800f630:	2020      	movs	r0, #32
 800f632:	4381      	bics	r1, r0
 800f634:	5499      	strb	r1, [r3, r2]
    }
}
 800f636:	46c0      	nop			; (mov r8, r8)
 800f638:	46bd      	mov	sp, r7
 800f63a:	b002      	add	sp, #8
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	46c0      	nop			; (mov r8, r8)
 800f640:	20000b6c 	.word	0x20000b6c
 800f644:	00000481 	.word	0x00000481
 800f648:	20000fa8 	.word	0x20000fa8
 800f64c:	20000fbc 	.word	0x20000fbc

0800f650 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f656:	4a0b      	ldr	r2, [pc, #44]	; (800f684 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 800f658:	23d0      	movs	r3, #208	; 0xd0
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	58d3      	ldr	r3, [r2, r3]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10c      	bne.n	800f67c <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f662:	1dfb      	adds	r3, r7, #7
 800f664:	2200      	movs	r2, #0
 800f666:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f668:	1dfb      	adds	r3, r7, #7
 800f66a:	0018      	movs	r0, r3
 800f66c:	f004 fe92 	bl	8014394 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800f670:	1dfb      	adds	r3, r7, #7
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d001      	beq.n	800f67c <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800f678:	f000 fc78 	bl	800ff6c <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800f67c:	46c0      	nop			; (mov r8, r8)
 800f67e:	46bd      	mov	sp, r7
 800f680:	b002      	add	sp, #8
 800f682:	bd80      	pop	{r7, pc}
 800f684:	20000b6c 	.word	0x20000b6c

0800f688 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b088      	sub	sp, #32
 800f68c:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f68e:	4b26      	ldr	r3, [pc, #152]	; (800f728 <LoRaMacHandleIndicationEvents+0xa0>)
 800f690:	4a26      	ldr	r2, [pc, #152]	; (800f72c <LoRaMacHandleIndicationEvents+0xa4>)
 800f692:	5c9b      	ldrb	r3, [r3, r2]
 800f694:	2208      	movs	r2, #8
 800f696:	4013      	ands	r3, r2
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d00d      	beq.n	800f6ba <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f69e:	4b22      	ldr	r3, [pc, #136]	; (800f728 <LoRaMacHandleIndicationEvents+0xa0>)
 800f6a0:	4a22      	ldr	r2, [pc, #136]	; (800f72c <LoRaMacHandleIndicationEvents+0xa4>)
 800f6a2:	5c99      	ldrb	r1, [r3, r2]
 800f6a4:	2008      	movs	r0, #8
 800f6a6:	4381      	bics	r1, r0
 800f6a8:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800f6aa:	4a1f      	ldr	r2, [pc, #124]	; (800f728 <LoRaMacHandleIndicationEvents+0xa0>)
 800f6ac:	23d1      	movs	r3, #209	; 0xd1
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	58d3      	ldr	r3, [r2, r3]
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	4a1e      	ldr	r2, [pc, #120]	; (800f730 <LoRaMacHandleIndicationEvents+0xa8>)
 800f6b6:	0010      	movs	r0, r2
 800f6b8:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800f6ba:	4b1b      	ldr	r3, [pc, #108]	; (800f728 <LoRaMacHandleIndicationEvents+0xa0>)
 800f6bc:	4a1b      	ldr	r2, [pc, #108]	; (800f72c <LoRaMacHandleIndicationEvents+0xa4>)
 800f6be:	5c9b      	ldrb	r3, [r3, r2]
 800f6c0:	2210      	movs	r2, #16
 800f6c2:	4013      	ands	r3, r2
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d013      	beq.n	800f6f2 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800f6ca:	1d3b      	adds	r3, r7, #4
 800f6cc:	2207      	movs	r2, #7
 800f6ce:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f6d0:	1d3b      	adds	r3, r7, #4
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800f6d6:	4a14      	ldr	r2, [pc, #80]	; (800f728 <LoRaMacHandleIndicationEvents+0xa0>)
 800f6d8:	23d1      	movs	r3, #209	; 0xd1
 800f6da:	009b      	lsls	r3, r3, #2
 800f6dc:	58d3      	ldr	r3, [r2, r3]
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	1d3a      	adds	r2, r7, #4
 800f6e2:	0010      	movs	r0, r2
 800f6e4:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800f6e6:	4b10      	ldr	r3, [pc, #64]	; (800f728 <LoRaMacHandleIndicationEvents+0xa0>)
 800f6e8:	4a10      	ldr	r2, [pc, #64]	; (800f72c <LoRaMacHandleIndicationEvents+0xa4>)
 800f6ea:	5c99      	ldrb	r1, [r3, r2]
 800f6ec:	2010      	movs	r0, #16
 800f6ee:	4381      	bics	r1, r0
 800f6f0:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f6f2:	4b0d      	ldr	r3, [pc, #52]	; (800f728 <LoRaMacHandleIndicationEvents+0xa0>)
 800f6f4:	4a0d      	ldr	r2, [pc, #52]	; (800f72c <LoRaMacHandleIndicationEvents+0xa4>)
 800f6f6:	5c9b      	ldrb	r3, [r3, r2]
 800f6f8:	2202      	movs	r2, #2
 800f6fa:	4013      	ands	r3, r2
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00d      	beq.n	800f71e <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f702:	4b09      	ldr	r3, [pc, #36]	; (800f728 <LoRaMacHandleIndicationEvents+0xa0>)
 800f704:	4a09      	ldr	r2, [pc, #36]	; (800f72c <LoRaMacHandleIndicationEvents+0xa4>)
 800f706:	5c99      	ldrb	r1, [r3, r2]
 800f708:	2002      	movs	r0, #2
 800f70a:	4381      	bics	r1, r0
 800f70c:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800f70e:	4a06      	ldr	r2, [pc, #24]	; (800f728 <LoRaMacHandleIndicationEvents+0xa0>)
 800f710:	23d1      	movs	r3, #209	; 0xd1
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	58d3      	ldr	r3, [r2, r3]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	4a06      	ldr	r2, [pc, #24]	; (800f734 <LoRaMacHandleIndicationEvents+0xac>)
 800f71a:	0010      	movs	r0, r2
 800f71c:	4798      	blx	r3
    }
}
 800f71e:	46c0      	nop			; (mov r8, r8)
 800f720:	46bd      	mov	sp, r7
 800f722:	b008      	add	sp, #32
 800f724:	bd80      	pop	{r7, pc}
 800f726:	46c0      	nop			; (mov r8, r8)
 800f728:	20000b6c 	.word	0x20000b6c
 800f72c:	00000481 	.word	0x00000481
 800f730:	20000fd0 	.word	0x20000fd0
 800f734:	20000f88 	.word	0x20000f88

0800f738 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f738:	b590      	push	{r4, r7, lr}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f73e:	4b39      	ldr	r3, [pc, #228]	; (800f824 <LoRaMacHandleMcpsRequest+0xec>)
 800f740:	4a39      	ldr	r2, [pc, #228]	; (800f828 <LoRaMacHandleMcpsRequest+0xf0>)
 800f742:	5c9b      	ldrb	r3, [r3, r2]
 800f744:	2201      	movs	r2, #1
 800f746:	4013      	ands	r3, r2
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d066      	beq.n	800f81c <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 800f74e:	1dfb      	adds	r3, r7, #7
 800f750:	2200      	movs	r2, #0
 800f752:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800f754:	1dbb      	adds	r3, r7, #6
 800f756:	2200      	movs	r2, #0
 800f758:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f75a:	4b32      	ldr	r3, [pc, #200]	; (800f824 <LoRaMacHandleMcpsRequest+0xec>)
 800f75c:	4a33      	ldr	r2, [pc, #204]	; (800f82c <LoRaMacHandleMcpsRequest+0xf4>)
 800f75e:	5c9b      	ldrb	r3, [r3, r2]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d004      	beq.n	800f76e <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f764:	4b2f      	ldr	r3, [pc, #188]	; (800f824 <LoRaMacHandleMcpsRequest+0xec>)
 800f766:	4a31      	ldr	r2, [pc, #196]	; (800f82c <LoRaMacHandleMcpsRequest+0xf4>)
 800f768:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f76a:	2b03      	cmp	r3, #3
 800f76c:	d105      	bne.n	800f77a <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f76e:	1dfc      	adds	r4, r7, #7
 800f770:	f002 fb6e 	bl	8011e50 <CheckRetransUnconfirmedUplink>
 800f774:	0003      	movs	r3, r0
 800f776:	7023      	strb	r3, [r4, #0]
 800f778:	e026      	b.n	800f7c8 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f77a:	4b2a      	ldr	r3, [pc, #168]	; (800f824 <LoRaMacHandleMcpsRequest+0xec>)
 800f77c:	4a2b      	ldr	r2, [pc, #172]	; (800f82c <LoRaMacHandleMcpsRequest+0xf4>)
 800f77e:	5c9b      	ldrb	r3, [r3, r2]
 800f780:	2b01      	cmp	r3, #1
 800f782:	d121      	bne.n	800f7c8 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800f784:	4b27      	ldr	r3, [pc, #156]	; (800f824 <LoRaMacHandleMcpsRequest+0xec>)
 800f786:	4a2a      	ldr	r2, [pc, #168]	; (800f830 <LoRaMacHandleMcpsRequest+0xf8>)
 800f788:	5c9b      	ldrb	r3, [r3, r2]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d019      	beq.n	800f7c2 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f78e:	1dfc      	adds	r4, r7, #7
 800f790:	f002 fb92 	bl	8011eb8 <CheckRetransConfirmedUplink>
 800f794:	0003      	movs	r3, r0
 800f796:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800f798:	4b22      	ldr	r3, [pc, #136]	; (800f824 <LoRaMacHandleMcpsRequest+0xec>)
 800f79a:	4a26      	ldr	r2, [pc, #152]	; (800f834 <LoRaMacHandleMcpsRequest+0xfc>)
 800f79c:	589a      	ldr	r2, [r3, r2]
 800f79e:	23b1      	movs	r3, #177	; 0xb1
 800f7a0:	005b      	lsls	r3, r3, #1
 800f7a2:	5cd3      	ldrb	r3, [r2, r3]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d10f      	bne.n	800f7c8 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 800f7a8:	1dfb      	adds	r3, r7, #7
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	4053      	eors	r3, r2
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d002      	beq.n	800f7bc <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 800f7b6:	f002 fbf3 	bl	8011fa0 <AckTimeoutRetriesProcess>
 800f7ba:	e005      	b.n	800f7c8 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800f7bc:	f002 fc3e 	bl	801203c <AckTimeoutRetriesFinalize>
 800f7c0:	e002      	b.n	800f7c8 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800f7c2:	1dbb      	adds	r3, r7, #6
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800f7c8:	1dfb      	adds	r3, r7, #7
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d011      	beq.n	800f7f4 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f7d0:	4b19      	ldr	r3, [pc, #100]	; (800f838 <LoRaMacHandleMcpsRequest+0x100>)
 800f7d2:	0018      	movs	r0, r3
 800f7d4:	f00c fc14 	bl	801c000 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f7d8:	4a12      	ldr	r2, [pc, #72]	; (800f824 <LoRaMacHandleMcpsRequest+0xec>)
 800f7da:	23d0      	movs	r3, #208	; 0xd0
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	58d3      	ldr	r3, [r2, r3]
 800f7e0:	2220      	movs	r2, #32
 800f7e2:	4393      	bics	r3, r2
 800f7e4:	0019      	movs	r1, r3
 800f7e6:	4a0f      	ldr	r2, [pc, #60]	; (800f824 <LoRaMacHandleMcpsRequest+0xec>)
 800f7e8:	23d0      	movs	r3, #208	; 0xd0
 800f7ea:	009b      	lsls	r3, r3, #2
 800f7ec:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 800f7ee:	f002 fb8b 	bl	8011f08 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f7f2:	e013      	b.n	800f81c <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 800f7f4:	1dbb      	adds	r3, r7, #6
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	4053      	eors	r3, r2
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00c      	beq.n	800f81c <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f802:	4b08      	ldr	r3, [pc, #32]	; (800f824 <LoRaMacHandleMcpsRequest+0xec>)
 800f804:	4a08      	ldr	r2, [pc, #32]	; (800f828 <LoRaMacHandleMcpsRequest+0xf0>)
 800f806:	5c99      	ldrb	r1, [r3, r2]
 800f808:	2020      	movs	r0, #32
 800f80a:	4381      	bics	r1, r0
 800f80c:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 800f80e:	4b05      	ldr	r3, [pc, #20]	; (800f824 <LoRaMacHandleMcpsRequest+0xec>)
 800f810:	4a07      	ldr	r2, [pc, #28]	; (800f830 <LoRaMacHandleMcpsRequest+0xf8>)
 800f812:	2100      	movs	r1, #0
 800f814:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 800f816:	2000      	movs	r0, #0
 800f818:	f000 f8a2 	bl	800f960 <OnTxDelayedTimerEvent>
}
 800f81c:	46c0      	nop			; (mov r8, r8)
 800f81e:	46bd      	mov	sp, r7
 800f820:	b003      	add	sp, #12
 800f822:	bd90      	pop	{r4, r7, pc}
 800f824:	20000b6c 	.word	0x20000b6c
 800f828:	00000481 	.word	0x00000481
 800f82c:	0000043c 	.word	0x0000043c
 800f830:	00000413 	.word	0x00000413
 800f834:	00000484 	.word	0x00000484
 800f838:	20000ed4 	.word	0x20000ed4

0800f83c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f840:	4b1d      	ldr	r3, [pc, #116]	; (800f8b8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f842:	4a1e      	ldr	r2, [pc, #120]	; (800f8bc <LoRaMacHandleMlmeRequest+0x80>)
 800f844:	5c9b      	ldrb	r3, [r3, r2]
 800f846:	2204      	movs	r2, #4
 800f848:	4013      	ands	r3, r2
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d02f      	beq.n	800f8b0 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f850:	2001      	movs	r0, #1
 800f852:	f004 ffe7 	bl	8014824 <LoRaMacConfirmQueueIsCmdActive>
 800f856:	1e03      	subs	r3, r0, #0
 800f858:	d015      	beq.n	800f886 <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f85a:	2001      	movs	r0, #1
 800f85c:	f004 ff7a 	bl	8014754 <LoRaMacConfirmQueueGetStatus>
 800f860:	1e03      	subs	r3, r0, #0
 800f862:	d104      	bne.n	800f86e <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f864:	4a14      	ldr	r2, [pc, #80]	; (800f8b8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f866:	2382      	movs	r3, #130	; 0x82
 800f868:	00db      	lsls	r3, r3, #3
 800f86a:	2100      	movs	r1, #0
 800f86c:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f86e:	4a12      	ldr	r2, [pc, #72]	; (800f8b8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f870:	23d0      	movs	r3, #208	; 0xd0
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	58d3      	ldr	r3, [r2, r3]
 800f876:	2202      	movs	r2, #2
 800f878:	4393      	bics	r3, r2
 800f87a:	0019      	movs	r1, r3
 800f87c:	4a0e      	ldr	r2, [pc, #56]	; (800f8b8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f87e:	23d0      	movs	r3, #208	; 0xd0
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800f884:	e014      	b.n	800f8b0 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f886:	2005      	movs	r0, #5
 800f888:	f004 ffcc 	bl	8014824 <LoRaMacConfirmQueueIsCmdActive>
 800f88c:	1e03      	subs	r3, r0, #0
 800f88e:	d104      	bne.n	800f89a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800f890:	2006      	movs	r0, #6
 800f892:	f004 ffc7 	bl	8014824 <LoRaMacConfirmQueueIsCmdActive>
 800f896:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f898:	d00a      	beq.n	800f8b0 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f89a:	4a07      	ldr	r2, [pc, #28]	; (800f8b8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f89c:	23d0      	movs	r3, #208	; 0xd0
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	58d3      	ldr	r3, [r2, r3]
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	4393      	bics	r3, r2
 800f8a6:	0019      	movs	r1, r3
 800f8a8:	4a03      	ldr	r2, [pc, #12]	; (800f8b8 <LoRaMacHandleMlmeRequest+0x7c>)
 800f8aa:	23d0      	movs	r3, #208	; 0xd0
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	50d1      	str	r1, [r2, r3]
}
 800f8b0:	46c0      	nop			; (mov r8, r8)
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	46c0      	nop			; (mov r8, r8)
 800f8b8:	20000b6c 	.word	0x20000b6c
 800f8bc:	00000481 	.word	0x00000481

0800f8c0 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f8c4:	200c      	movs	r0, #12
 800f8c6:	f004 ffad 	bl	8014824 <LoRaMacConfirmQueueIsCmdActive>
 800f8ca:	1e03      	subs	r3, r0, #0
 800f8cc:	d01c      	beq.n	800f908 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f8ce:	4b10      	ldr	r3, [pc, #64]	; (800f910 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f8d0:	4a10      	ldr	r2, [pc, #64]	; (800f914 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800f8d2:	5c9b      	ldrb	r3, [r3, r2]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	4013      	ands	r3, r2
 800f8d8:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d114      	bne.n	800f908 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f8de:	4b0c      	ldr	r3, [pc, #48]	; (800f910 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f8e0:	4a0c      	ldr	r2, [pc, #48]	; (800f914 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800f8e2:	5c9b      	ldrb	r3, [r3, r2]
 800f8e4:	2204      	movs	r2, #4
 800f8e6:	4013      	ands	r3, r2
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00c      	beq.n	800f908 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f8ee:	4a08      	ldr	r2, [pc, #32]	; (800f910 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f8f0:	23d0      	movs	r3, #208	; 0xd0
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	58d3      	ldr	r3, [r2, r3]
 800f8f6:	2202      	movs	r2, #2
 800f8f8:	4393      	bics	r3, r2
 800f8fa:	0019      	movs	r1, r3
 800f8fc:	4a04      	ldr	r2, [pc, #16]	; (800f910 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800f8fe:	23d0      	movs	r3, #208	; 0xd0
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800f904:	2301      	movs	r3, #1
 800f906:	e000      	b.n	800f90a <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800f908:	2300      	movs	r3, #0
}
 800f90a:	0018      	movs	r0, r3
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	20000b6c 	.word	0x20000b6c
 800f914:	00000481 	.word	0x00000481

0800f918 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f91c:	4a0f      	ldr	r2, [pc, #60]	; (800f95c <LoRaMacCheckForRxAbort+0x44>)
 800f91e:	23d0      	movs	r3, #208	; 0xd0
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	58d3      	ldr	r3, [r2, r3]
 800f924:	2280      	movs	r2, #128	; 0x80
 800f926:	4013      	ands	r3, r2
 800f928:	d015      	beq.n	800f956 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f92a:	4a0c      	ldr	r2, [pc, #48]	; (800f95c <LoRaMacCheckForRxAbort+0x44>)
 800f92c:	23d0      	movs	r3, #208	; 0xd0
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	58d3      	ldr	r3, [r2, r3]
 800f932:	2280      	movs	r2, #128	; 0x80
 800f934:	4393      	bics	r3, r2
 800f936:	0019      	movs	r1, r3
 800f938:	4a08      	ldr	r2, [pc, #32]	; (800f95c <LoRaMacCheckForRxAbort+0x44>)
 800f93a:	23d0      	movs	r3, #208	; 0xd0
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f940:	4a06      	ldr	r2, [pc, #24]	; (800f95c <LoRaMacCheckForRxAbort+0x44>)
 800f942:	23d0      	movs	r3, #208	; 0xd0
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	58d3      	ldr	r3, [r2, r3]
 800f948:	2202      	movs	r2, #2
 800f94a:	4393      	bics	r3, r2
 800f94c:	0019      	movs	r1, r3
 800f94e:	4a03      	ldr	r2, [pc, #12]	; (800f95c <LoRaMacCheckForRxAbort+0x44>)
 800f950:	23d0      	movs	r3, #208	; 0xd0
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	50d1      	str	r1, [r2, r3]
    }
}
 800f956:	46c0      	nop			; (mov r8, r8)
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	20000b6c 	.word	0x20000b6c

0800f960 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f968:	4b19      	ldr	r3, [pc, #100]	; (800f9d0 <OnTxDelayedTimerEvent+0x70>)
 800f96a:	0018      	movs	r0, r3
 800f96c:	f00c fb48 	bl	801c000 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f970:	4a18      	ldr	r2, [pc, #96]	; (800f9d4 <OnTxDelayedTimerEvent+0x74>)
 800f972:	23d0      	movs	r3, #208	; 0xd0
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	58d3      	ldr	r3, [r2, r3]
 800f978:	2220      	movs	r2, #32
 800f97a:	4393      	bics	r3, r2
 800f97c:	0019      	movs	r1, r3
 800f97e:	4a15      	ldr	r2, [pc, #84]	; (800f9d4 <OnTxDelayedTimerEvent+0x74>)
 800f980:	23d0      	movs	r3, #208	; 0xd0
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f986:	2001      	movs	r0, #1
 800f988:	f001 fb58 	bl	801103c <ScheduleTx>
 800f98c:	1e03      	subs	r3, r0, #0
 800f98e:	d01a      	beq.n	800f9c6 <OnTxDelayedTimerEvent+0x66>
 800f990:	2b0b      	cmp	r3, #11
 800f992:	d018      	beq.n	800f9c6 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f994:	4b0f      	ldr	r3, [pc, #60]	; (800f9d4 <OnTxDelayedTimerEvent+0x74>)
 800f996:	4a10      	ldr	r2, [pc, #64]	; (800f9d8 <OnTxDelayedTimerEvent+0x78>)
 800f998:	589b      	ldr	r3, [r3, r2]
 800f99a:	2285      	movs	r2, #133	; 0x85
 800f99c:	569b      	ldrsb	r3, [r3, r2]
 800f99e:	b2d9      	uxtb	r1, r3
 800f9a0:	4b0c      	ldr	r3, [pc, #48]	; (800f9d4 <OnTxDelayedTimerEvent+0x74>)
 800f9a2:	4a0e      	ldr	r2, [pc, #56]	; (800f9dc <OnTxDelayedTimerEvent+0x7c>)
 800f9a4:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800f9a6:	4b0b      	ldr	r3, [pc, #44]	; (800f9d4 <OnTxDelayedTimerEvent+0x74>)
 800f9a8:	4a0d      	ldr	r2, [pc, #52]	; (800f9e0 <OnTxDelayedTimerEvent+0x80>)
 800f9aa:	5c99      	ldrb	r1, [r3, r2]
 800f9ac:	4b09      	ldr	r3, [pc, #36]	; (800f9d4 <OnTxDelayedTimerEvent+0x74>)
 800f9ae:	4a0d      	ldr	r2, [pc, #52]	; (800f9e4 <OnTxDelayedTimerEvent+0x84>)
 800f9b0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f9b2:	4b08      	ldr	r3, [pc, #32]	; (800f9d4 <OnTxDelayedTimerEvent+0x74>)
 800f9b4:	4a0c      	ldr	r2, [pc, #48]	; (800f9e8 <OnTxDelayedTimerEvent+0x88>)
 800f9b6:	2109      	movs	r1, #9
 800f9b8:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f9ba:	2009      	movs	r0, #9
 800f9bc:	f004 fef8 	bl	80147b0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f9c0:	f002 faa2 	bl	8011f08 <StopRetransmission>
            break;
 800f9c4:	e000      	b.n	800f9c8 <OnTxDelayedTimerEvent+0x68>
            break;
 800f9c6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800f9c8:	46c0      	nop			; (mov r8, r8)
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	b002      	add	sp, #8
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	20000ed4 	.word	0x20000ed4
 800f9d4:	20000b6c 	.word	0x20000b6c
 800f9d8:	00000484 	.word	0x00000484
 800f9dc:	0000043e 	.word	0x0000043e
 800f9e0:	00000412 	.word	0x00000412
 800f9e4:	00000441 	.word	0x00000441
 800f9e8:	0000043d 	.word	0x0000043d

0800f9ec <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f9f4:	4b19      	ldr	r3, [pc, #100]	; (800fa5c <OnRxWindow1TimerEvent+0x70>)
 800f9f6:	4a1a      	ldr	r2, [pc, #104]	; (800fa60 <OnRxWindow1TimerEvent+0x74>)
 800f9f8:	5c99      	ldrb	r1, [r3, r2]
 800f9fa:	4a18      	ldr	r2, [pc, #96]	; (800fa5c <OnRxWindow1TimerEvent+0x70>)
 800f9fc:	23ee      	movs	r3, #238	; 0xee
 800f9fe:	009b      	lsls	r3, r3, #2
 800fa00:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800fa02:	4b16      	ldr	r3, [pc, #88]	; (800fa5c <OnRxWindow1TimerEvent+0x70>)
 800fa04:	4a17      	ldr	r2, [pc, #92]	; (800fa64 <OnRxWindow1TimerEvent+0x78>)
 800fa06:	589b      	ldr	r3, [r3, r2]
 800fa08:	22a5      	movs	r2, #165	; 0xa5
 800fa0a:	5c9b      	ldrb	r3, [r3, r2]
 800fa0c:	b259      	sxtb	r1, r3
 800fa0e:	4b13      	ldr	r3, [pc, #76]	; (800fa5c <OnRxWindow1TimerEvent+0x70>)
 800fa10:	4a15      	ldr	r2, [pc, #84]	; (800fa68 <OnRxWindow1TimerEvent+0x7c>)
 800fa12:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fa14:	4b11      	ldr	r3, [pc, #68]	; (800fa5c <OnRxWindow1TimerEvent+0x70>)
 800fa16:	4a13      	ldr	r2, [pc, #76]	; (800fa64 <OnRxWindow1TimerEvent+0x78>)
 800fa18:	589b      	ldr	r3, [r3, r2]
 800fa1a:	22b9      	movs	r2, #185	; 0xb9
 800fa1c:	5c99      	ldrb	r1, [r3, r2]
 800fa1e:	4a0f      	ldr	r2, [pc, #60]	; (800fa5c <OnRxWindow1TimerEvent+0x70>)
 800fa20:	23f2      	movs	r3, #242	; 0xf2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800fa26:	4b0d      	ldr	r3, [pc, #52]	; (800fa5c <OnRxWindow1TimerEvent+0x70>)
 800fa28:	4a0e      	ldr	r2, [pc, #56]	; (800fa64 <OnRxWindow1TimerEvent+0x78>)
 800fa2a:	589b      	ldr	r3, [r3, r2]
 800fa2c:	22ca      	movs	r2, #202	; 0xca
 800fa2e:	5c99      	ldrb	r1, [r3, r2]
 800fa30:	4b0a      	ldr	r3, [pc, #40]	; (800fa5c <OnRxWindow1TimerEvent+0x70>)
 800fa32:	4a0e      	ldr	r2, [pc, #56]	; (800fa6c <OnRxWindow1TimerEvent+0x80>)
 800fa34:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fa36:	4b09      	ldr	r3, [pc, #36]	; (800fa5c <OnRxWindow1TimerEvent+0x70>)
 800fa38:	4a0d      	ldr	r2, [pc, #52]	; (800fa70 <OnRxWindow1TimerEvent+0x84>)
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fa3e:	4b07      	ldr	r3, [pc, #28]	; (800fa5c <OnRxWindow1TimerEvent+0x70>)
 800fa40:	4a0c      	ldr	r2, [pc, #48]	; (800fa74 <OnRxWindow1TimerEvent+0x88>)
 800fa42:	2100      	movs	r1, #0
 800fa44:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fa46:	4a0c      	ldr	r2, [pc, #48]	; (800fa78 <OnRxWindow1TimerEvent+0x8c>)
 800fa48:	4b0c      	ldr	r3, [pc, #48]	; (800fa7c <OnRxWindow1TimerEvent+0x90>)
 800fa4a:	0011      	movs	r1, r2
 800fa4c:	0018      	movs	r0, r3
 800fa4e:	f001 fd9b 	bl	8011588 <RxWindowSetup>
}
 800fa52:	46c0      	nop			; (mov r8, r8)
 800fa54:	46bd      	mov	sp, r7
 800fa56:	b002      	add	sp, #8
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	46c0      	nop			; (mov r8, r8)
 800fa5c:	20000b6c 	.word	0x20000b6c
 800fa60:	00000415 	.word	0x00000415
 800fa64:	00000484 	.word	0x00000484
 800fa68:	000003bb 	.word	0x000003bb
 800fa6c:	000003c9 	.word	0x000003c9
 800fa70:	000003ca 	.word	0x000003ca
 800fa74:	000003cb 	.word	0x000003cb
 800fa78:	20000f24 	.word	0x20000f24
 800fa7c:	20000eec 	.word	0x20000eec

0800fa80 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fa88:	4a1c      	ldr	r2, [pc, #112]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800fa8a:	2390      	movs	r3, #144	; 0x90
 800fa8c:	00db      	lsls	r3, r3, #3
 800fa8e:	5cd3      	ldrb	r3, [r2, r3]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d02f      	beq.n	800faf4 <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fa94:	4b19      	ldr	r3, [pc, #100]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800fa96:	4a1a      	ldr	r2, [pc, #104]	; (800fb00 <OnRxWindow2TimerEvent+0x80>)
 800fa98:	5c99      	ldrb	r1, [r3, r2]
 800fa9a:	4a18      	ldr	r2, [pc, #96]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800fa9c:	23f3      	movs	r3, #243	; 0xf3
 800fa9e:	009b      	lsls	r3, r3, #2
 800faa0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800faa2:	4b16      	ldr	r3, [pc, #88]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800faa4:	4a17      	ldr	r2, [pc, #92]	; (800fb04 <OnRxWindow2TimerEvent+0x84>)
 800faa6:	589b      	ldr	r3, [r3, r2]
 800faa8:	22a8      	movs	r2, #168	; 0xa8
 800faaa:	5899      	ldr	r1, [r3, r2]
 800faac:	4a13      	ldr	r2, [pc, #76]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800faae:	23f4      	movs	r3, #244	; 0xf4
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fab4:	4b11      	ldr	r3, [pc, #68]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800fab6:	4a13      	ldr	r2, [pc, #76]	; (800fb04 <OnRxWindow2TimerEvent+0x84>)
 800fab8:	589b      	ldr	r3, [r3, r2]
 800faba:	22b9      	movs	r2, #185	; 0xb9
 800fabc:	5c99      	ldrb	r1, [r3, r2]
 800fabe:	4a0f      	ldr	r2, [pc, #60]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800fac0:	23f7      	movs	r3, #247	; 0xf7
 800fac2:	009b      	lsls	r3, r3, #2
 800fac4:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800fac6:	4b0d      	ldr	r3, [pc, #52]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800fac8:	4a0e      	ldr	r2, [pc, #56]	; (800fb04 <OnRxWindow2TimerEvent+0x84>)
 800faca:	589b      	ldr	r3, [r3, r2]
 800facc:	22ca      	movs	r2, #202	; 0xca
 800face:	5c99      	ldrb	r1, [r3, r2]
 800fad0:	4b0a      	ldr	r3, [pc, #40]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800fad2:	4a0d      	ldr	r2, [pc, #52]	; (800fb08 <OnRxWindow2TimerEvent+0x88>)
 800fad4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fad6:	4b09      	ldr	r3, [pc, #36]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800fad8:	4a0c      	ldr	r2, [pc, #48]	; (800fb0c <OnRxWindow2TimerEvent+0x8c>)
 800fada:	2100      	movs	r1, #0
 800fadc:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fade:	4b07      	ldr	r3, [pc, #28]	; (800fafc <OnRxWindow2TimerEvent+0x7c>)
 800fae0:	4a0b      	ldr	r2, [pc, #44]	; (800fb10 <OnRxWindow2TimerEvent+0x90>)
 800fae2:	2101      	movs	r1, #1
 800fae4:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fae6:	4a0b      	ldr	r2, [pc, #44]	; (800fb14 <OnRxWindow2TimerEvent+0x94>)
 800fae8:	4b0b      	ldr	r3, [pc, #44]	; (800fb18 <OnRxWindow2TimerEvent+0x98>)
 800faea:	0011      	movs	r1, r2
 800faec:	0018      	movs	r0, r3
 800faee:	f001 fd4b 	bl	8011588 <RxWindowSetup>
 800faf2:	e000      	b.n	800faf6 <OnRxWindow2TimerEvent+0x76>
        return;
 800faf4:	46c0      	nop			; (mov r8, r8)
}
 800faf6:	46bd      	mov	sp, r7
 800faf8:	b002      	add	sp, #8
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	20000b6c 	.word	0x20000b6c
 800fb00:	00000415 	.word	0x00000415
 800fb04:	00000484 	.word	0x00000484
 800fb08:	000003dd 	.word	0x000003dd
 800fb0c:	000003de 	.word	0x000003de
 800fb10:	000003df 	.word	0x000003df
 800fb14:	20000f38 	.word	0x20000f38
 800fb18:	20000f04 	.word	0x20000f04

0800fb1c <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800fb24:	4b18      	ldr	r3, [pc, #96]	; (800fb88 <OnAckTimeoutTimerEvent+0x6c>)
 800fb26:	0018      	movs	r0, r3
 800fb28:	f00c fa6a 	bl	801c000 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fb2c:	4b17      	ldr	r3, [pc, #92]	; (800fb8c <OnAckTimeoutTimerEvent+0x70>)
 800fb2e:	4a18      	ldr	r2, [pc, #96]	; (800fb90 <OnAckTimeoutTimerEvent+0x74>)
 800fb30:	5c9b      	ldrb	r3, [r3, r2]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d003      	beq.n	800fb3e <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 800fb36:	4b15      	ldr	r3, [pc, #84]	; (800fb8c <OnAckTimeoutTimerEvent+0x70>)
 800fb38:	4a16      	ldr	r2, [pc, #88]	; (800fb94 <OnAckTimeoutTimerEvent+0x78>)
 800fb3a:	2101      	movs	r1, #1
 800fb3c:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800fb3e:	4b13      	ldr	r3, [pc, #76]	; (800fb8c <OnAckTimeoutTimerEvent+0x70>)
 800fb40:	4a15      	ldr	r2, [pc, #84]	; (800fb98 <OnAckTimeoutTimerEvent+0x7c>)
 800fb42:	589b      	ldr	r3, [r3, r2]
 800fb44:	227c      	movs	r2, #124	; 0x7c
 800fb46:	5c9b      	ldrb	r3, [r3, r2]
 800fb48:	2b02      	cmp	r3, #2
 800fb4a:	d105      	bne.n	800fb58 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fb4c:	4b0f      	ldr	r3, [pc, #60]	; (800fb8c <OnAckTimeoutTimerEvent+0x70>)
 800fb4e:	4a13      	ldr	r2, [pc, #76]	; (800fb9c <OnAckTimeoutTimerEvent+0x80>)
 800fb50:	5c99      	ldrb	r1, [r3, r2]
 800fb52:	2020      	movs	r0, #32
 800fb54:	4301      	orrs	r1, r0
 800fb56:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fb58:	4a0c      	ldr	r2, [pc, #48]	; (800fb8c <OnAckTimeoutTimerEvent+0x70>)
 800fb5a:	23d2      	movs	r3, #210	; 0xd2
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	58d3      	ldr	r3, [r2, r3]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00c      	beq.n	800fb7e <OnAckTimeoutTimerEvent+0x62>
 800fb64:	4a09      	ldr	r2, [pc, #36]	; (800fb8c <OnAckTimeoutTimerEvent+0x70>)
 800fb66:	23d2      	movs	r3, #210	; 0xd2
 800fb68:	009b      	lsls	r3, r3, #2
 800fb6a:	58d3      	ldr	r3, [r2, r3]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d005      	beq.n	800fb7e <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fb72:	4a06      	ldr	r2, [pc, #24]	; (800fb8c <OnAckTimeoutTimerEvent+0x70>)
 800fb74:	23d2      	movs	r3, #210	; 0xd2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	58d3      	ldr	r3, [r2, r3]
 800fb7a:	68db      	ldr	r3, [r3, #12]
 800fb7c:	4798      	blx	r3
    }
}
 800fb7e:	46c0      	nop			; (mov r8, r8)
 800fb80:	46bd      	mov	sp, r7
 800fb82:	b002      	add	sp, #8
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	46c0      	nop			; (mov r8, r8)
 800fb88:	20000f64 	.word	0x20000f64
 800fb8c:	20000b6c 	.word	0x20000b6c
 800fb90:	00000414 	.word	0x00000414
 800fb94:	00000413 	.word	0x00000413
 800fb98:	00000484 	.word	0x00000484
 800fb9c:	00000481 	.word	0x00000481

0800fba0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fba0:	b590      	push	{r4, r7, lr}
 800fba2:	b085      	sub	sp, #20
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60ba      	str	r2, [r7, #8]
 800fba8:	607b      	str	r3, [r7, #4]
 800fbaa:	230f      	movs	r3, #15
 800fbac:	18fb      	adds	r3, r7, r3
 800fbae:	1c02      	adds	r2, r0, #0
 800fbb0:	701a      	strb	r2, [r3, #0]
 800fbb2:	230e      	movs	r3, #14
 800fbb4:	18fb      	adds	r3, r7, r3
 800fbb6:	1c0a      	adds	r2, r1, #0
 800fbb8:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d005      	beq.n	800fbcc <GetFCntDown+0x2c>
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d002      	beq.n	800fbcc <GetFCntDown+0x2c>
 800fbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d101      	bne.n	800fbd0 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fbcc:	230a      	movs	r3, #10
 800fbce:	e033      	b.n	800fc38 <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fbd0:	230f      	movs	r3, #15
 800fbd2:	18fb      	adds	r3, r7, r3
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d01a      	beq.n	800fc10 <GetFCntDown+0x70>
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d11c      	bne.n	800fc18 <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fbde:	1d3b      	adds	r3, r7, #4
 800fbe0:	789b      	ldrb	r3, [r3, #2]
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	d110      	bne.n	800fc08 <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fbe6:	220e      	movs	r2, #14
 800fbe8:	18bb      	adds	r3, r7, r2
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d003      	beq.n	800fbf8 <GetFCntDown+0x58>
 800fbf0:	18bb      	adds	r3, r7, r2
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	2b03      	cmp	r3, #3
 800fbf6:	d103      	bne.n	800fc00 <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfa:	2202      	movs	r2, #2
 800fbfc:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fbfe:	e00d      	b.n	800fc1c <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 800fc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc02:	2201      	movs	r2, #1
 800fc04:	701a      	strb	r2, [r3, #0]
            break;
 800fc06:	e009      	b.n	800fc1c <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 800fc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc0a:	2203      	movs	r2, #3
 800fc0c:	701a      	strb	r2, [r3, #0]
            break;
 800fc0e:	e005      	b.n	800fc1c <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc12:	2204      	movs	r2, #4
 800fc14:	701a      	strb	r2, [r3, #0]
            break;
 800fc16:	e001      	b.n	800fc1c <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fc18:	2305      	movs	r3, #5
 800fc1a:	e00d      	b.n	800fc38 <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800fc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1e:	7818      	ldrb	r0, [r3, #0]
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	89db      	ldrh	r3, [r3, #14]
 800fc24:	001c      	movs	r4, r3
 800fc26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc28:	2320      	movs	r3, #32
 800fc2a:	18fb      	adds	r3, r7, r3
 800fc2c:	8819      	ldrh	r1, [r3, #0]
 800fc2e:	0013      	movs	r3, r2
 800fc30:	0022      	movs	r2, r4
 800fc32:	f005 fa85 	bl	8015140 <LoRaMacCryptoGetFCntDown>
 800fc36:	0003      	movs	r3, r0
}
 800fc38:	0018      	movs	r0, r3
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	b005      	add	sp, #20
 800fc3e:	bd90      	pop	{r4, r7, pc}

0800fc40 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fc40:	b5b0      	push	{r4, r5, r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	0002      	movs	r2, r0
 800fc48:	1dfb      	adds	r3, r7, #7
 800fc4a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fc4c:	230f      	movs	r3, #15
 800fc4e:	18fb      	adds	r3, r7, r3
 800fc50:	2203      	movs	r2, #3
 800fc52:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 800fc54:	4b82      	ldr	r3, [pc, #520]	; (800fe60 <SwitchClass+0x220>)
 800fc56:	4a83      	ldr	r2, [pc, #524]	; (800fe64 <SwitchClass+0x224>)
 800fc58:	589b      	ldr	r3, [r3, r2]
 800fc5a:	227c      	movs	r2, #124	; 0x7c
 800fc5c:	5c9b      	ldrb	r3, [r3, r2]
 800fc5e:	2b02      	cmp	r3, #2
 800fc60:	d100      	bne.n	800fc64 <SwitchClass+0x24>
 800fc62:	e0de      	b.n	800fe22 <SwitchClass+0x1e2>
 800fc64:	dd00      	ble.n	800fc68 <SwitchClass+0x28>
 800fc66:	e0f4      	b.n	800fe52 <SwitchClass+0x212>
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d003      	beq.n	800fc74 <SwitchClass+0x34>
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d100      	bne.n	800fc72 <SwitchClass+0x32>
 800fc70:	e0c2      	b.n	800fdf8 <SwitchClass+0x1b8>
 800fc72:	e0ee      	b.n	800fe52 <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fc74:	1dfb      	adds	r3, r7, #7
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d10b      	bne.n	800fc94 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800fc7c:	4b78      	ldr	r3, [pc, #480]	; (800fe60 <SwitchClass+0x220>)
 800fc7e:	4a79      	ldr	r2, [pc, #484]	; (800fe64 <SwitchClass+0x224>)
 800fc80:	589a      	ldr	r2, [r3, r2]
 800fc82:	4b77      	ldr	r3, [pc, #476]	; (800fe60 <SwitchClass+0x220>)
 800fc84:	4977      	ldr	r1, [pc, #476]	; (800fe64 <SwitchClass+0x224>)
 800fc86:	585b      	ldr	r3, [r3, r1]
 800fc88:	20b0      	movs	r0, #176	; 0xb0
 800fc8a:	21a8      	movs	r1, #168	; 0xa8
 800fc8c:	181b      	adds	r3, r3, r0
 800fc8e:	1852      	adds	r2, r2, r1
 800fc90:	ca03      	ldmia	r2!, {r0, r1}
 800fc92:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800fc94:	1dfb      	adds	r3, r7, #7
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	d113      	bne.n	800fcc4 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fc9c:	250f      	movs	r5, #15
 800fc9e:	197c      	adds	r4, r7, r5
 800fca0:	1dfb      	adds	r3, r7, #7
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	0018      	movs	r0, r3
 800fca6:	f004 f86b 	bl	8013d80 <LoRaMacClassBSwitchClass>
 800fcaa:	0003      	movs	r3, r0
 800fcac:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 800fcae:	197b      	adds	r3, r7, r5
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d106      	bne.n	800fcc4 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fcb6:	4b6a      	ldr	r3, [pc, #424]	; (800fe60 <SwitchClass+0x220>)
 800fcb8:	4a6a      	ldr	r2, [pc, #424]	; (800fe64 <SwitchClass+0x224>)
 800fcba:	589b      	ldr	r3, [r3, r2]
 800fcbc:	1dfa      	adds	r2, r7, #7
 800fcbe:	217c      	movs	r1, #124	; 0x7c
 800fcc0:	7812      	ldrb	r2, [r2, #0]
 800fcc2:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 800fcc4:	1dfb      	adds	r3, r7, #7
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	2b02      	cmp	r3, #2
 800fcca:	d000      	beq.n	800fcce <SwitchClass+0x8e>
 800fccc:	e0bc      	b.n	800fe48 <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fcce:	4b64      	ldr	r3, [pc, #400]	; (800fe60 <SwitchClass+0x220>)
 800fcd0:	4a64      	ldr	r2, [pc, #400]	; (800fe64 <SwitchClass+0x224>)
 800fcd2:	589b      	ldr	r3, [r3, r2]
 800fcd4:	1dfa      	adds	r2, r7, #7
 800fcd6:	217c      	movs	r1, #124	; 0x7c
 800fcd8:	7812      	ldrb	r2, [r2, #0]
 800fcda:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fcdc:	4860      	ldr	r0, [pc, #384]	; (800fe60 <SwitchClass+0x220>)
 800fcde:	23f8      	movs	r3, #248	; 0xf8
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	495f      	ldr	r1, [pc, #380]	; (800fe60 <SwitchClass+0x220>)
 800fce4:	22f3      	movs	r2, #243	; 0xf3
 800fce6:	0092      	lsls	r2, r2, #2
 800fce8:	18c3      	adds	r3, r0, r3
 800fcea:	188a      	adds	r2, r1, r2
 800fcec:	ca13      	ldmia	r2!, {r0, r1, r4}
 800fcee:	c313      	stmia	r3!, {r0, r1, r4}
 800fcf0:	ca03      	ldmia	r2!, {r0, r1}
 800fcf2:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fcf4:	4b5a      	ldr	r3, [pc, #360]	; (800fe60 <SwitchClass+0x220>)
 800fcf6:	4a5c      	ldr	r2, [pc, #368]	; (800fe68 <SwitchClass+0x228>)
 800fcf8:	2102      	movs	r1, #2
 800fcfa:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fcfc:	230e      	movs	r3, #14
 800fcfe:	18fb      	adds	r3, r7, r3
 800fd00:	2200      	movs	r2, #0
 800fd02:	701a      	strb	r2, [r3, #0]
 800fd04:	e064      	b.n	800fdd0 <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800fd06:	4b56      	ldr	r3, [pc, #344]	; (800fe60 <SwitchClass+0x220>)
 800fd08:	4a56      	ldr	r2, [pc, #344]	; (800fe64 <SwitchClass+0x224>)
 800fd0a:	589a      	ldr	r2, [r3, r2]
 800fd0c:	240e      	movs	r4, #14
 800fd0e:	193b      	adds	r3, r7, r4
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	b25b      	sxtb	r3, r3
 800fd14:	2152      	movs	r1, #82	; 0x52
 800fd16:	202c      	movs	r0, #44	; 0x2c
 800fd18:	4343      	muls	r3, r0
 800fd1a:	18d3      	adds	r3, r2, r3
 800fd1c:	185b      	adds	r3, r3, r1
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d04c      	beq.n	800fdbe <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800fd24:	4b4e      	ldr	r3, [pc, #312]	; (800fe60 <SwitchClass+0x220>)
 800fd26:	4a4f      	ldr	r2, [pc, #316]	; (800fe64 <SwitchClass+0x224>)
 800fd28:	5899      	ldr	r1, [r3, r2]
 800fd2a:	193b      	adds	r3, r7, r4
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	b25b      	sxtb	r3, r3
 800fd30:	4a4b      	ldr	r2, [pc, #300]	; (800fe60 <SwitchClass+0x220>)
 800fd32:	484c      	ldr	r0, [pc, #304]	; (800fe64 <SwitchClass+0x224>)
 800fd34:	5812      	ldr	r2, [r2, r0]
 800fd36:	202c      	movs	r0, #44	; 0x2c
 800fd38:	4343      	muls	r3, r0
 800fd3a:	18cb      	adds	r3, r1, r3
 800fd3c:	3368      	adds	r3, #104	; 0x68
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	21b0      	movs	r1, #176	; 0xb0
 800fd42:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800fd44:	4b46      	ldr	r3, [pc, #280]	; (800fe60 <SwitchClass+0x220>)
 800fd46:	4a47      	ldr	r2, [pc, #284]	; (800fe64 <SwitchClass+0x224>)
 800fd48:	589a      	ldr	r2, [r3, r2]
 800fd4a:	193b      	adds	r3, r7, r4
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	b25b      	sxtb	r3, r3
 800fd50:	216c      	movs	r1, #108	; 0x6c
 800fd52:	202c      	movs	r0, #44	; 0x2c
 800fd54:	4343      	muls	r3, r0
 800fd56:	18d3      	adds	r3, r2, r3
 800fd58:	185b      	adds	r3, r3, r1
 800fd5a:	2100      	movs	r1, #0
 800fd5c:	5659      	ldrsb	r1, [r3, r1]
 800fd5e:	4b40      	ldr	r3, [pc, #256]	; (800fe60 <SwitchClass+0x220>)
 800fd60:	4a40      	ldr	r2, [pc, #256]	; (800fe64 <SwitchClass+0x224>)
 800fd62:	589b      	ldr	r3, [r3, r2]
 800fd64:	b2c9      	uxtb	r1, r1
 800fd66:	22b4      	movs	r2, #180	; 0xb4
 800fd68:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fd6a:	4b3d      	ldr	r3, [pc, #244]	; (800fe60 <SwitchClass+0x220>)
 800fd6c:	4a3f      	ldr	r2, [pc, #252]	; (800fe6c <SwitchClass+0x22c>)
 800fd6e:	5c99      	ldrb	r1, [r3, r2]
 800fd70:	4a3b      	ldr	r2, [pc, #236]	; (800fe60 <SwitchClass+0x220>)
 800fd72:	23f8      	movs	r3, #248	; 0xf8
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800fd78:	4b39      	ldr	r3, [pc, #228]	; (800fe60 <SwitchClass+0x220>)
 800fd7a:	4a3a      	ldr	r2, [pc, #232]	; (800fe64 <SwitchClass+0x224>)
 800fd7c:	589b      	ldr	r3, [r3, r2]
 800fd7e:	22b0      	movs	r2, #176	; 0xb0
 800fd80:	5899      	ldr	r1, [r3, r2]
 800fd82:	4a37      	ldr	r2, [pc, #220]	; (800fe60 <SwitchClass+0x220>)
 800fd84:	23f9      	movs	r3, #249	; 0xf9
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fd8a:	4b35      	ldr	r3, [pc, #212]	; (800fe60 <SwitchClass+0x220>)
 800fd8c:	4a35      	ldr	r2, [pc, #212]	; (800fe64 <SwitchClass+0x224>)
 800fd8e:	589b      	ldr	r3, [r3, r2]
 800fd90:	22b9      	movs	r2, #185	; 0xb9
 800fd92:	5c99      	ldrb	r1, [r3, r2]
 800fd94:	4a32      	ldr	r2, [pc, #200]	; (800fe60 <SwitchClass+0x220>)
 800fd96:	23fc      	movs	r3, #252	; 0xfc
 800fd98:	009b      	lsls	r3, r3, #2
 800fd9a:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800fd9c:	4b30      	ldr	r3, [pc, #192]	; (800fe60 <SwitchClass+0x220>)
 800fd9e:	4a31      	ldr	r2, [pc, #196]	; (800fe64 <SwitchClass+0x224>)
 800fda0:	589b      	ldr	r3, [r3, r2]
 800fda2:	22ca      	movs	r2, #202	; 0xca
 800fda4:	5c99      	ldrb	r1, [r3, r2]
 800fda6:	4b2e      	ldr	r3, [pc, #184]	; (800fe60 <SwitchClass+0x220>)
 800fda8:	4a31      	ldr	r2, [pc, #196]	; (800fe70 <SwitchClass+0x230>)
 800fdaa:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fdac:	4b2c      	ldr	r3, [pc, #176]	; (800fe60 <SwitchClass+0x220>)
 800fdae:	4a2e      	ldr	r2, [pc, #184]	; (800fe68 <SwitchClass+0x228>)
 800fdb0:	2103      	movs	r1, #3
 800fdb2:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fdb4:	4b2a      	ldr	r3, [pc, #168]	; (800fe60 <SwitchClass+0x220>)
 800fdb6:	4a2f      	ldr	r2, [pc, #188]	; (800fe74 <SwitchClass+0x234>)
 800fdb8:	2101      	movs	r1, #1
 800fdba:	5499      	strb	r1, [r3, r2]
                        break;
 800fdbc:	e00e      	b.n	800fddc <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fdbe:	210e      	movs	r1, #14
 800fdc0:	187b      	adds	r3, r7, r1
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	b25b      	sxtb	r3, r3
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	3301      	adds	r3, #1
 800fdca:	b2da      	uxtb	r2, r3
 800fdcc:	187b      	adds	r3, r7, r1
 800fdce:	701a      	strb	r2, [r3, #0]
 800fdd0:	230e      	movs	r3, #14
 800fdd2:	18fb      	adds	r3, r7, r3
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	b25b      	sxtb	r3, r3
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dd94      	ble.n	800fd06 <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fddc:	4b20      	ldr	r3, [pc, #128]	; (800fe60 <SwitchClass+0x220>)
 800fdde:	4a26      	ldr	r2, [pc, #152]	; (800fe78 <SwitchClass+0x238>)
 800fde0:	2100      	movs	r1, #0
 800fde2:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fde4:	4b25      	ldr	r3, [pc, #148]	; (800fe7c <SwitchClass+0x23c>)
 800fde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fdea:	f001 fbff 	bl	80115ec <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800fdee:	230f      	movs	r3, #15
 800fdf0:	18fb      	adds	r3, r7, r3
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	701a      	strb	r2, [r3, #0]
            }
            break;
 800fdf6:	e027      	b.n	800fe48 <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fdf8:	250f      	movs	r5, #15
 800fdfa:	197c      	adds	r4, r7, r5
 800fdfc:	1dfb      	adds	r3, r7, #7
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	0018      	movs	r0, r3
 800fe02:	f003 ffbd 	bl	8013d80 <LoRaMacClassBSwitchClass>
 800fe06:	0003      	movs	r3, r0
 800fe08:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 800fe0a:	197b      	adds	r3, r7, r5
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d11c      	bne.n	800fe4c <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fe12:	4b13      	ldr	r3, [pc, #76]	; (800fe60 <SwitchClass+0x220>)
 800fe14:	4a13      	ldr	r2, [pc, #76]	; (800fe64 <SwitchClass+0x224>)
 800fe16:	589b      	ldr	r3, [r3, r2]
 800fe18:	1dfa      	adds	r2, r7, #7
 800fe1a:	217c      	movs	r1, #124	; 0x7c
 800fe1c:	7812      	ldrb	r2, [r2, #0]
 800fe1e:	545a      	strb	r2, [r3, r1]
            }
            break;
 800fe20:	e014      	b.n	800fe4c <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fe22:	1dfb      	adds	r3, r7, #7
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d112      	bne.n	800fe50 <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800fe2a:	4b0d      	ldr	r3, [pc, #52]	; (800fe60 <SwitchClass+0x220>)
 800fe2c:	4a0d      	ldr	r2, [pc, #52]	; (800fe64 <SwitchClass+0x224>)
 800fe2e:	589b      	ldr	r3, [r3, r2]
 800fe30:	1dfa      	adds	r2, r7, #7
 800fe32:	217c      	movs	r1, #124	; 0x7c
 800fe34:	7812      	ldrb	r2, [r2, #0]
 800fe36:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fe38:	4b10      	ldr	r3, [pc, #64]	; (800fe7c <SwitchClass+0x23c>)
 800fe3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3c:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fe3e:	230f      	movs	r3, #15
 800fe40:	18fb      	adds	r3, r7, r3
 800fe42:	2200      	movs	r2, #0
 800fe44:	701a      	strb	r2, [r3, #0]
            }
            break;
 800fe46:	e003      	b.n	800fe50 <SwitchClass+0x210>
            break;
 800fe48:	46c0      	nop			; (mov r8, r8)
 800fe4a:	e002      	b.n	800fe52 <SwitchClass+0x212>
            break;
 800fe4c:	46c0      	nop			; (mov r8, r8)
 800fe4e:	e000      	b.n	800fe52 <SwitchClass+0x212>
            break;
 800fe50:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 800fe52:	230f      	movs	r3, #15
 800fe54:	18fb      	adds	r3, r7, r3
 800fe56:	781b      	ldrb	r3, [r3, #0]
}
 800fe58:	0018      	movs	r0, r3
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	b004      	add	sp, #16
 800fe5e:	bdb0      	pop	{r4, r5, r7, pc}
 800fe60:	20000b6c 	.word	0x20000b6c
 800fe64:	00000484 	.word	0x00000484
 800fe68:	000003f3 	.word	0x000003f3
 800fe6c:	00000415 	.word	0x00000415
 800fe70:	000003f1 	.word	0x000003f1
 800fe74:	000003f2 	.word	0x000003f2
 800fe78:	00000414 	.word	0x00000414
 800fe7c:	0801e62c 	.word	0x0801e62c

0800fe80 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b086      	sub	sp, #24
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	0002      	movs	r2, r0
 800fe88:	1dfb      	adds	r3, r7, #7
 800fe8a:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800fe8c:	4b17      	ldr	r3, [pc, #92]	; (800feec <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 800fe8e:	4a18      	ldr	r2, [pc, #96]	; (800fef0 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800fe90:	589b      	ldr	r3, [r3, r2]
 800fe92:	22b8      	movs	r2, #184	; 0xb8
 800fe94:	5c9a      	ldrb	r2, [r3, r2]
 800fe96:	2110      	movs	r1, #16
 800fe98:	187b      	adds	r3, r7, r1
 800fe9a:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800fe9c:	187b      	adds	r3, r7, r1
 800fe9e:	1dfa      	adds	r2, r7, #7
 800fea0:	7812      	ldrb	r2, [r2, #0]
 800fea2:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fea4:	187b      	adds	r3, r7, r1
 800fea6:	220d      	movs	r2, #13
 800fea8:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800feaa:	4b10      	ldr	r3, [pc, #64]	; (800feec <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 800feac:	4a10      	ldr	r2, [pc, #64]	; (800fef0 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800feae:	589b      	ldr	r3, [r3, r2]
 800feb0:	22ca      	movs	r2, #202	; 0xca
 800feb2:	5c9b      	ldrb	r3, [r3, r2]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d002      	beq.n	800febe <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800feb8:	187b      	adds	r3, r7, r1
 800feba:	220e      	movs	r2, #14
 800febc:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800febe:	4b0b      	ldr	r3, [pc, #44]	; (800feec <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 800fec0:	4a0b      	ldr	r2, [pc, #44]	; (800fef0 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800fec2:	589b      	ldr	r3, [r3, r2]
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	2210      	movs	r2, #16
 800fec8:	18ba      	adds	r2, r7, r2
 800feca:	0011      	movs	r1, r2
 800fecc:	0018      	movs	r0, r3
 800fece:	f006 f8a4 	bl	801601a <RegionGetPhyParam>
 800fed2:	0003      	movs	r3, r0
 800fed4:	001a      	movs	r2, r3
 800fed6:	210c      	movs	r1, #12
 800fed8:	187b      	adds	r3, r7, r1
 800feda:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800fedc:	187b      	adds	r3, r7, r1
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	b2db      	uxtb	r3, r3
}
 800fee2:	0018      	movs	r0, r3
 800fee4:	46bd      	mov	sp, r7
 800fee6:	b006      	add	sp, #24
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	46c0      	nop			; (mov r8, r8)
 800feec:	20000b6c 	.word	0x20000b6c
 800fef0:	00000484 	.word	0x00000484

0800fef4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800fef4:	b5b0      	push	{r4, r5, r7, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	0004      	movs	r4, r0
 800fefc:	0008      	movs	r0, r1
 800fefe:	0011      	movs	r1, r2
 800ff00:	1dfb      	adds	r3, r7, #7
 800ff02:	1c22      	adds	r2, r4, #0
 800ff04:	701a      	strb	r2, [r3, #0]
 800ff06:	1dbb      	adds	r3, r7, #6
 800ff08:	1c02      	adds	r2, r0, #0
 800ff0a:	701a      	strb	r2, [r3, #0]
 800ff0c:	1d7b      	adds	r3, r7, #5
 800ff0e:	1c0a      	adds	r2, r1, #0
 800ff10:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800ff12:	250e      	movs	r5, #14
 800ff14:	197b      	adds	r3, r7, r5
 800ff16:	2200      	movs	r2, #0
 800ff18:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800ff1a:	240c      	movs	r4, #12
 800ff1c:	193b      	adds	r3, r7, r4
 800ff1e:	2200      	movs	r2, #0
 800ff20:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ff22:	1dbb      	adds	r3, r7, #6
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	b25b      	sxtb	r3, r3
 800ff28:	0018      	movs	r0, r3
 800ff2a:	f7ff ffa9 	bl	800fe80 <GetMaxAppPayloadWithoutFOptsLength>
 800ff2e:	0003      	movs	r3, r0
 800ff30:	001a      	movs	r2, r3
 800ff32:	0028      	movs	r0, r5
 800ff34:	183b      	adds	r3, r7, r0
 800ff36:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ff38:	1dfb      	adds	r3, r7, #7
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	b299      	uxth	r1, r3
 800ff3e:	1d7b      	adds	r3, r7, #5
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	b29a      	uxth	r2, r3
 800ff44:	193b      	adds	r3, r7, r4
 800ff46:	188a      	adds	r2, r1, r2
 800ff48:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ff4a:	193a      	adds	r2, r7, r4
 800ff4c:	183b      	adds	r3, r7, r0
 800ff4e:	8812      	ldrh	r2, [r2, #0]
 800ff50:	881b      	ldrh	r3, [r3, #0]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d805      	bhi.n	800ff62 <ValidatePayloadLength+0x6e>
 800ff56:	193b      	adds	r3, r7, r4
 800ff58:	881b      	ldrh	r3, [r3, #0]
 800ff5a:	2bff      	cmp	r3, #255	; 0xff
 800ff5c:	d801      	bhi.n	800ff62 <ValidatePayloadLength+0x6e>
    {
        return true;
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e000      	b.n	800ff64 <ValidatePayloadLength+0x70>
    }
    return false;
 800ff62:	2300      	movs	r3, #0
}
 800ff64:	0018      	movs	r0, r3
 800ff66:	46bd      	mov	sp, r7
 800ff68:	b004      	add	sp, #16
 800ff6a:	bdb0      	pop	{r4, r5, r7, pc}

0800ff6c <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800ff70:	4b04      	ldr	r3, [pc, #16]	; (800ff84 <SetMlmeScheduleUplinkIndication+0x18>)
 800ff72:	4a05      	ldr	r2, [pc, #20]	; (800ff88 <SetMlmeScheduleUplinkIndication+0x1c>)
 800ff74:	5c99      	ldrb	r1, [r3, r2]
 800ff76:	2010      	movs	r0, #16
 800ff78:	4301      	orrs	r1, r0
 800ff7a:	5499      	strb	r1, [r3, r2]
}
 800ff7c:	46c0      	nop			; (mov r8, r8)
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	46c0      	nop			; (mov r8, r8)
 800ff84:	20000b6c 	.word	0x20000b6c
 800ff88:	00000481 	.word	0x00000481

0800ff8c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ff8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff8e:	b0a5      	sub	sp, #148	; 0x94
 800ff90:	af02      	add	r7, sp, #8
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	000c      	movs	r4, r1
 800ff96:	0010      	movs	r0, r2
 800ff98:	0019      	movs	r1, r3
 800ff9a:	1cfb      	adds	r3, r7, #3
 800ff9c:	1c22      	adds	r2, r4, #0
 800ff9e:	701a      	strb	r2, [r3, #0]
 800ffa0:	1cbb      	adds	r3, r7, #2
 800ffa2:	1c02      	adds	r2, r0, #0
 800ffa4:	701a      	strb	r2, [r3, #0]
 800ffa6:	1c7b      	adds	r3, r7, #1
 800ffa8:	1c0a      	adds	r2, r1, #0
 800ffaa:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800ffac:	236b      	movs	r3, #107	; 0x6b
 800ffae:	18fb      	adds	r3, r7, r3
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800ffb4:	2387      	movs	r3, #135	; 0x87
 800ffb6:	18fb      	adds	r3, r7, r3
 800ffb8:	2200      	movs	r2, #0
 800ffba:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ffbc:	2368      	movs	r3, #104	; 0x68
 800ffbe:	18fb      	adds	r3, r7, r3
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 800ffc4:	f000 fd58 	bl	8010a78 <ProcessMacCommands+0xaec>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ffc8:	1cfb      	adds	r3, r7, #3
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	18d3      	adds	r3, r2, r3
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	0018      	movs	r0, r3
 800ffd4:	f004 fa04 	bl	80143e0 <LoRaMacCommandsGetCmdSize>
 800ffd8:	0003      	movs	r3, r0
 800ffda:	001a      	movs	r2, r3
 800ffdc:	1cfb      	adds	r3, r7, #3
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	18d2      	adds	r2, r2, r3
 800ffe2:	1cbb      	adds	r3, r7, #2
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	dd01      	ble.n	800ffee <ProcessMacCommands+0x62>
 800ffea:	f000 fd4e 	bl	8010a8a <ProcessMacCommands+0xafe>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800ffee:	1cfb      	adds	r3, r7, #3
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	1cfa      	adds	r2, r7, #3
 800fff4:	1c59      	adds	r1, r3, #1
 800fff6:	7011      	strb	r1, [r2, #0]
 800fff8:	001a      	movs	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	189b      	adds	r3, r3, r2
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	2b13      	cmp	r3, #19
 8010002:	d901      	bls.n	8010008 <ProcessMacCommands+0x7c>
 8010004:	f000 fd43 	bl	8010a8e <ProcessMacCommands+0xb02>
 8010008:	009a      	lsls	r2, r3, #2
 801000a:	4bee      	ldr	r3, [pc, #952]	; (80103c4 <ProcessMacCommands+0x438>)
 801000c:	18d3      	adds	r3, r2, r3
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010012:	2004      	movs	r0, #4
 8010014:	f004 fc06 	bl	8014824 <LoRaMacConfirmQueueIsCmdActive>
 8010018:	1e03      	subs	r3, r0, #0
 801001a:	d101      	bne.n	8010020 <ProcessMacCommands+0x94>
 801001c:	f000 fd2c 	bl	8010a78 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010020:	2104      	movs	r1, #4
 8010022:	2000      	movs	r0, #0
 8010024:	f004 fb62 	bl	80146ec <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010028:	1cfb      	adds	r3, r7, #3
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	1cfa      	adds	r2, r7, #3
 801002e:	1c59      	adds	r1, r3, #1
 8010030:	7011      	strb	r1, [r2, #0]
 8010032:	001a      	movs	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	189b      	adds	r3, r3, r2
 8010038:	7819      	ldrb	r1, [r3, #0]
 801003a:	4ae3      	ldr	r2, [pc, #908]	; (80103c8 <ProcessMacCommands+0x43c>)
 801003c:	238b      	movs	r3, #139	; 0x8b
 801003e:	00db      	lsls	r3, r3, #3
 8010040:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010042:	1cfb      	adds	r3, r7, #3
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	1cfa      	adds	r2, r7, #3
 8010048:	1c59      	adds	r1, r3, #1
 801004a:	7011      	strb	r1, [r2, #0]
 801004c:	001a      	movs	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	189b      	adds	r3, r3, r2
 8010052:	7819      	ldrb	r1, [r3, #0]
 8010054:	4bdc      	ldr	r3, [pc, #880]	; (80103c8 <ProcessMacCommands+0x43c>)
 8010056:	4add      	ldr	r2, [pc, #884]	; (80103cc <ProcessMacCommands+0x440>)
 8010058:	5499      	strb	r1, [r3, r2]
                }
                break;
 801005a:	f000 fd0d 	bl	8010a78 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801005e:	2657      	movs	r6, #87	; 0x57
 8010060:	19bb      	adds	r3, r7, r6
 8010062:	2200      	movs	r2, #0
 8010064:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 8010066:	2456      	movs	r4, #86	; 0x56
 8010068:	193b      	adds	r3, r7, r4
 801006a:	2200      	movs	r2, #0
 801006c:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 801006e:	2555      	movs	r5, #85	; 0x55
 8010070:	197b      	adds	r3, r7, r5
 8010072:	2200      	movs	r2, #0
 8010074:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8010076:	2354      	movs	r3, #84	; 0x54
 8010078:	18fb      	adds	r3, r7, r3
 801007a:	2200      	movs	r2, #0
 801007c:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 801007e:	2187      	movs	r1, #135	; 0x87
 8010080:	187b      	adds	r3, r7, r1
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	2201      	movs	r2, #1
 8010086:	4053      	eors	r3, r2
 8010088:	b2db      	uxtb	r3, r3
 801008a:	2b00      	cmp	r3, #0
 801008c:	d100      	bne.n	8010090 <ProcessMacCommands+0x104>
 801008e:	e09d      	b.n	80101cc <ProcessMacCommands+0x240>
                {
                    adrBlockFound = true;
 8010090:	187b      	adds	r3, r7, r1
 8010092:	2201      	movs	r2, #1
 8010094:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010096:	1cfb      	adds	r3, r7, #3
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	3b01      	subs	r3, #1
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	18d2      	adds	r2, r2, r3
 80100a0:	2158      	movs	r1, #88	; 0x58
 80100a2:	187b      	adds	r3, r7, r1
 80100a4:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80100a6:	1cba      	adds	r2, r7, #2
 80100a8:	1cfb      	adds	r3, r7, #3
 80100aa:	7812      	ldrb	r2, [r2, #0]
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	3301      	adds	r3, #1
 80100b4:	b2da      	uxtb	r2, r3
 80100b6:	000d      	movs	r5, r1
 80100b8:	197b      	adds	r3, r7, r5
 80100ba:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80100bc:	4bc2      	ldr	r3, [pc, #776]	; (80103c8 <ProcessMacCommands+0x43c>)
 80100be:	4ac4      	ldr	r2, [pc, #784]	; (80103d0 <ProcessMacCommands+0x444>)
 80100c0:	589b      	ldr	r3, [r3, r2]
 80100c2:	227e      	movs	r2, #126	; 0x7e
 80100c4:	5c9a      	ldrb	r2, [r3, r2]
 80100c6:	197b      	adds	r3, r7, r5
 80100c8:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80100ca:	4bbf      	ldr	r3, [pc, #764]	; (80103c8 <ProcessMacCommands+0x43c>)
 80100cc:	4ac0      	ldr	r2, [pc, #768]	; (80103d0 <ProcessMacCommands+0x444>)
 80100ce:	589b      	ldr	r3, [r3, r2]
 80100d0:	22b8      	movs	r2, #184	; 0xb8
 80100d2:	5c9a      	ldrb	r2, [r3, r2]
 80100d4:	197b      	adds	r3, r7, r5
 80100d6:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80100d8:	4bbb      	ldr	r3, [pc, #748]	; (80103c8 <ProcessMacCommands+0x43c>)
 80100da:	4abd      	ldr	r2, [pc, #756]	; (80103d0 <ProcessMacCommands+0x444>)
 80100dc:	589b      	ldr	r3, [r3, r2]
 80100de:	2285      	movs	r2, #133	; 0x85
 80100e0:	569a      	ldrsb	r2, [r3, r2]
 80100e2:	197b      	adds	r3, r7, r5
 80100e4:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80100e6:	4bb8      	ldr	r3, [pc, #736]	; (80103c8 <ProcessMacCommands+0x43c>)
 80100e8:	4ab9      	ldr	r2, [pc, #740]	; (80103d0 <ProcessMacCommands+0x444>)
 80100ea:	589b      	ldr	r3, [r3, r2]
 80100ec:	2284      	movs	r2, #132	; 0x84
 80100ee:	569a      	ldrsb	r2, [r3, r2]
 80100f0:	197b      	adds	r3, r7, r5
 80100f2:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 80100f4:	4bb4      	ldr	r3, [pc, #720]	; (80103c8 <ProcessMacCommands+0x43c>)
 80100f6:	4ab6      	ldr	r2, [pc, #728]	; (80103d0 <ProcessMacCommands+0x444>)
 80100f8:	589b      	ldr	r3, [r3, r2]
 80100fa:	22a4      	movs	r2, #164	; 0xa4
 80100fc:	5c9a      	ldrb	r2, [r3, r2]
 80100fe:	197b      	adds	r3, r7, r5
 8010100:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8010102:	4bb1      	ldr	r3, [pc, #708]	; (80103c8 <ProcessMacCommands+0x43c>)
 8010104:	4ab2      	ldr	r2, [pc, #712]	; (80103d0 <ProcessMacCommands+0x444>)
 8010106:	5899      	ldr	r1, [r3, r2]
 8010108:	197b      	adds	r3, r7, r5
 801010a:	22b0      	movs	r2, #176	; 0xb0
 801010c:	0052      	lsls	r2, r2, #1
 801010e:	588a      	ldr	r2, [r1, r2]
 8010110:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8010112:	4bad      	ldr	r3, [pc, #692]	; (80103c8 <ProcessMacCommands+0x43c>)
 8010114:	4aae      	ldr	r2, [pc, #696]	; (80103d0 <ProcessMacCommands+0x444>)
 8010116:	589b      	ldr	r3, [r3, r2]
 8010118:	7818      	ldrb	r0, [r3, #0]
 801011a:	193c      	adds	r4, r7, r4
 801011c:	19ba      	adds	r2, r7, r6
 801011e:	1979      	adds	r1, r7, r5
 8010120:	2354      	movs	r3, #84	; 0x54
 8010122:	18fb      	adds	r3, r7, r3
 8010124:	9301      	str	r3, [sp, #4]
 8010126:	2555      	movs	r5, #85	; 0x55
 8010128:	197b      	adds	r3, r7, r5
 801012a:	9300      	str	r3, [sp, #0]
 801012c:	0023      	movs	r3, r4
 801012e:	f006 f87b 	bl	8016228 <RegionLinkAdrReq>
 8010132:	0003      	movs	r3, r0
 8010134:	001a      	movs	r2, r3
 8010136:	216b      	movs	r1, #107	; 0x6b
 8010138:	187b      	adds	r3, r7, r1
 801013a:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 801013c:	187b      	adds	r3, r7, r1
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	001a      	movs	r2, r3
 8010142:	2307      	movs	r3, #7
 8010144:	4013      	ands	r3, r2
 8010146:	2b07      	cmp	r3, #7
 8010148:	d117      	bne.n	801017a <ProcessMacCommands+0x1ee>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 801014a:	4b9f      	ldr	r3, [pc, #636]	; (80103c8 <ProcessMacCommands+0x43c>)
 801014c:	4aa0      	ldr	r2, [pc, #640]	; (80103d0 <ProcessMacCommands+0x444>)
 801014e:	589b      	ldr	r3, [r3, r2]
 8010150:	19ba      	adds	r2, r7, r6
 8010152:	2100      	movs	r1, #0
 8010154:	5651      	ldrsb	r1, [r2, r1]
 8010156:	2285      	movs	r2, #133	; 0x85
 8010158:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 801015a:	4b9b      	ldr	r3, [pc, #620]	; (80103c8 <ProcessMacCommands+0x43c>)
 801015c:	4a9c      	ldr	r2, [pc, #624]	; (80103d0 <ProcessMacCommands+0x444>)
 801015e:	589b      	ldr	r3, [r3, r2]
 8010160:	2456      	movs	r4, #86	; 0x56
 8010162:	193a      	adds	r2, r7, r4
 8010164:	2100      	movs	r1, #0
 8010166:	5651      	ldrsb	r1, [r2, r1]
 8010168:	2284      	movs	r2, #132	; 0x84
 801016a:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 801016c:	4b96      	ldr	r3, [pc, #600]	; (80103c8 <ProcessMacCommands+0x43c>)
 801016e:	4a98      	ldr	r2, [pc, #608]	; (80103d0 <ProcessMacCommands+0x444>)
 8010170:	589b      	ldr	r3, [r3, r2]
 8010172:	197a      	adds	r2, r7, r5
 8010174:	7811      	ldrb	r1, [r2, #0]
 8010176:	22a4      	movs	r2, #164	; 0xa4
 8010178:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801017a:	2386      	movs	r3, #134	; 0x86
 801017c:	18fb      	adds	r3, r7, r3
 801017e:	2200      	movs	r2, #0
 8010180:	701a      	strb	r2, [r3, #0]
 8010182:	e00c      	b.n	801019e <ProcessMacCommands+0x212>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010184:	236b      	movs	r3, #107	; 0x6b
 8010186:	18fb      	adds	r3, r7, r3
 8010188:	2201      	movs	r2, #1
 801018a:	0019      	movs	r1, r3
 801018c:	2003      	movs	r0, #3
 801018e:	f003 ffb7 	bl	8014100 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010192:	2186      	movs	r1, #134	; 0x86
 8010194:	187b      	adds	r3, r7, r1
 8010196:	781a      	ldrb	r2, [r3, #0]
 8010198:	187b      	adds	r3, r7, r1
 801019a:	3201      	adds	r2, #1
 801019c:	701a      	strb	r2, [r3, #0]
 801019e:	2454      	movs	r4, #84	; 0x54
 80101a0:	193b      	adds	r3, r7, r4
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	2105      	movs	r1, #5
 80101a6:	0018      	movs	r0, r3
 80101a8:	f7ef ffb6 	bl	8000118 <__udivsi3>
 80101ac:	0003      	movs	r3, r0
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	2286      	movs	r2, #134	; 0x86
 80101b2:	18ba      	adds	r2, r7, r2
 80101b4:	7812      	ldrb	r2, [r2, #0]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d3e4      	bcc.n	8010184 <ProcessMacCommands+0x1f8>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80101ba:	193b      	adds	r3, r7, r4
 80101bc:	781a      	ldrb	r2, [r3, #0]
 80101be:	1cfb      	adds	r3, r7, #3
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	18d3      	adds	r3, r2, r3
 80101c4:	b2da      	uxtb	r2, r3
 80101c6:	1cfb      	adds	r3, r7, #3
 80101c8:	3a01      	subs	r2, #1
 80101ca:	701a      	strb	r2, [r3, #0]
                }
                break;
 80101cc:	46c0      	nop			; (mov r8, r8)
 80101ce:	f000 fc53 	bl	8010a78 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80101d2:	1cfb      	adds	r3, r7, #3
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	1cfa      	adds	r2, r7, #3
 80101d8:	1c59      	adds	r1, r3, #1
 80101da:	7011      	strb	r1, [r2, #0]
 80101dc:	001a      	movs	r2, r3
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	189b      	adds	r3, r3, r2
 80101e2:	781a      	ldrb	r2, [r3, #0]
 80101e4:	4b78      	ldr	r3, [pc, #480]	; (80103c8 <ProcessMacCommands+0x43c>)
 80101e6:	497a      	ldr	r1, [pc, #488]	; (80103d0 <ProcessMacCommands+0x444>)
 80101e8:	585b      	ldr	r3, [r3, r1]
 80101ea:	210f      	movs	r1, #15
 80101ec:	400a      	ands	r2, r1
 80101ee:	b2d1      	uxtb	r1, r2
 80101f0:	22c8      	movs	r2, #200	; 0xc8
 80101f2:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 80101f4:	4b74      	ldr	r3, [pc, #464]	; (80103c8 <ProcessMacCommands+0x43c>)
 80101f6:	4a76      	ldr	r2, [pc, #472]	; (80103d0 <ProcessMacCommands+0x444>)
 80101f8:	589b      	ldr	r3, [r3, r2]
 80101fa:	22c8      	movs	r2, #200	; 0xc8
 80101fc:	5c9b      	ldrb	r3, [r3, r2]
 80101fe:	001a      	movs	r2, r3
 8010200:	2301      	movs	r3, #1
 8010202:	4093      	lsls	r3, r2
 8010204:	0019      	movs	r1, r3
 8010206:	4b70      	ldr	r3, [pc, #448]	; (80103c8 <ProcessMacCommands+0x43c>)
 8010208:	4a71      	ldr	r2, [pc, #452]	; (80103d0 <ProcessMacCommands+0x444>)
 801020a:	589a      	ldr	r2, [r3, r2]
 801020c:	b289      	uxth	r1, r1
 801020e:	23a6      	movs	r3, #166	; 0xa6
 8010210:	005b      	lsls	r3, r3, #1
 8010212:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010214:	2368      	movs	r3, #104	; 0x68
 8010216:	18fb      	adds	r3, r7, r3
 8010218:	2200      	movs	r2, #0
 801021a:	0019      	movs	r1, r3
 801021c:	2004      	movs	r0, #4
 801021e:	f003 ff6f 	bl	8014100 <LoRaMacCommandsAddCmd>
                break;
 8010222:	f000 fc29 	bl	8010a78 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010226:	256b      	movs	r5, #107	; 0x6b
 8010228:	197b      	adds	r3, r7, r5
 801022a:	2207      	movs	r2, #7
 801022c:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801022e:	1cfb      	adds	r3, r7, #3
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	687a      	ldr	r2, [r7, #4]
 8010234:	18d3      	adds	r3, r2, r3
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	091b      	lsrs	r3, r3, #4
 801023a:	b2db      	uxtb	r3, r3
 801023c:	b25b      	sxtb	r3, r3
 801023e:	2207      	movs	r2, #7
 8010240:	4013      	ands	r3, r2
 8010242:	b25a      	sxtb	r2, r3
 8010244:	204c      	movs	r0, #76	; 0x4c
 8010246:	183b      	adds	r3, r7, r0
 8010248:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801024a:	1cfb      	adds	r3, r7, #3
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	18d3      	adds	r3, r2, r3
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	b25b      	sxtb	r3, r3
 8010256:	220f      	movs	r2, #15
 8010258:	4013      	ands	r3, r2
 801025a:	b25a      	sxtb	r2, r3
 801025c:	183b      	adds	r3, r7, r0
 801025e:	701a      	strb	r2, [r3, #0]
                macIndex++;
 8010260:	1cfb      	adds	r3, r7, #3
 8010262:	781a      	ldrb	r2, [r3, #0]
 8010264:	1cfb      	adds	r3, r7, #3
 8010266:	3201      	adds	r2, #1
 8010268:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 801026a:	1cfb      	adds	r3, r7, #3
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	1cfa      	adds	r2, r7, #3
 8010270:	1c59      	adds	r1, r3, #1
 8010272:	7011      	strb	r1, [r2, #0]
 8010274:	001a      	movs	r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	189b      	adds	r3, r3, r2
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	001a      	movs	r2, r3
 801027e:	183b      	adds	r3, r7, r0
 8010280:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010282:	1cfb      	adds	r3, r7, #3
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	1cfa      	adds	r2, r7, #3
 8010288:	1c59      	adds	r1, r3, #1
 801028a:	7011      	strb	r1, [r2, #0]
 801028c:	001a      	movs	r2, r3
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	189b      	adds	r3, r3, r2
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	021a      	lsls	r2, r3, #8
 8010296:	183b      	adds	r3, r7, r0
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	431a      	orrs	r2, r3
 801029c:	183b      	adds	r3, r7, r0
 801029e:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80102a0:	1cfb      	adds	r3, r7, #3
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	1cfa      	adds	r2, r7, #3
 80102a6:	1c59      	adds	r1, r3, #1
 80102a8:	7011      	strb	r1, [r2, #0]
 80102aa:	001a      	movs	r2, r3
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	189b      	adds	r3, r3, r2
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	041a      	lsls	r2, r3, #16
 80102b4:	183b      	adds	r3, r7, r0
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	431a      	orrs	r2, r3
 80102ba:	0004      	movs	r4, r0
 80102bc:	193b      	adds	r3, r7, r4
 80102be:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 80102c0:	193b      	adds	r3, r7, r4
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	2264      	movs	r2, #100	; 0x64
 80102c6:	435a      	muls	r2, r3
 80102c8:	193b      	adds	r3, r7, r4
 80102ca:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 80102cc:	4b3e      	ldr	r3, [pc, #248]	; (80103c8 <ProcessMacCommands+0x43c>)
 80102ce:	4a40      	ldr	r2, [pc, #256]	; (80103d0 <ProcessMacCommands+0x444>)
 80102d0:	589b      	ldr	r3, [r3, r2]
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	193a      	adds	r2, r7, r4
 80102d6:	0011      	movs	r1, r2
 80102d8:	0018      	movs	r0, r3
 80102da:	f005 ffc3 	bl	8016264 <RegionRxParamSetupReq>
 80102de:	0003      	movs	r3, r0
 80102e0:	001a      	movs	r2, r3
 80102e2:	197b      	adds	r3, r7, r5
 80102e4:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 80102e6:	197b      	adds	r3, r7, r5
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	001a      	movs	r2, r3
 80102ec:	2307      	movs	r3, #7
 80102ee:	4013      	ands	r3, r2
 80102f0:	2b07      	cmp	r3, #7
 80102f2:	d128      	bne.n	8010346 <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80102f4:	193b      	adds	r3, r7, r4
 80102f6:	2100      	movs	r1, #0
 80102f8:	5659      	ldrsb	r1, [r3, r1]
 80102fa:	4b33      	ldr	r3, [pc, #204]	; (80103c8 <ProcessMacCommands+0x43c>)
 80102fc:	4a34      	ldr	r2, [pc, #208]	; (80103d0 <ProcessMacCommands+0x444>)
 80102fe:	589b      	ldr	r3, [r3, r2]
 8010300:	b2c9      	uxtb	r1, r1
 8010302:	22ac      	movs	r2, #172	; 0xac
 8010304:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010306:	193b      	adds	r3, r7, r4
 8010308:	2100      	movs	r1, #0
 801030a:	5659      	ldrsb	r1, [r3, r1]
 801030c:	4b2e      	ldr	r3, [pc, #184]	; (80103c8 <ProcessMacCommands+0x43c>)
 801030e:	4a30      	ldr	r2, [pc, #192]	; (80103d0 <ProcessMacCommands+0x444>)
 8010310:	589b      	ldr	r3, [r3, r2]
 8010312:	b2c9      	uxtb	r1, r1
 8010314:	22b4      	movs	r2, #180	; 0xb4
 8010316:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010318:	4b2b      	ldr	r3, [pc, #172]	; (80103c8 <ProcessMacCommands+0x43c>)
 801031a:	4a2d      	ldr	r2, [pc, #180]	; (80103d0 <ProcessMacCommands+0x444>)
 801031c:	589a      	ldr	r2, [r3, r2]
 801031e:	193b      	adds	r3, r7, r4
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	21a8      	movs	r1, #168	; 0xa8
 8010324:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010326:	4b28      	ldr	r3, [pc, #160]	; (80103c8 <ProcessMacCommands+0x43c>)
 8010328:	4a29      	ldr	r2, [pc, #164]	; (80103d0 <ProcessMacCommands+0x444>)
 801032a:	589a      	ldr	r2, [r3, r2]
 801032c:	193b      	adds	r3, r7, r4
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	21b0      	movs	r1, #176	; 0xb0
 8010332:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010334:	193b      	adds	r3, r7, r4
 8010336:	2101      	movs	r1, #1
 8010338:	5659      	ldrsb	r1, [r3, r1]
 801033a:	4b23      	ldr	r3, [pc, #140]	; (80103c8 <ProcessMacCommands+0x43c>)
 801033c:	4a24      	ldr	r2, [pc, #144]	; (80103d0 <ProcessMacCommands+0x444>)
 801033e:	589b      	ldr	r3, [r3, r2]
 8010340:	b2c9      	uxtb	r1, r1
 8010342:	22a5      	movs	r2, #165	; 0xa5
 8010344:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 8010346:	236b      	movs	r3, #107	; 0x6b
 8010348:	18fb      	adds	r3, r7, r3
 801034a:	781a      	ldrb	r2, [r3, #0]
 801034c:	2168      	movs	r1, #104	; 0x68
 801034e:	187b      	adds	r3, r7, r1
 8010350:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010352:	187b      	adds	r3, r7, r1
 8010354:	2201      	movs	r2, #1
 8010356:	0019      	movs	r1, r3
 8010358:	2005      	movs	r0, #5
 801035a:	f003 fed1 	bl	8014100 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 801035e:	f7ff fe05 	bl	800ff6c <SetMlmeScheduleUplinkIndication>
                break;
 8010362:	46c0      	nop			; (mov r8, r8)
 8010364:	e388      	b.n	8010a78 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010366:	2185      	movs	r1, #133	; 0x85
 8010368:	187b      	adds	r3, r7, r1
 801036a:	22ff      	movs	r2, #255	; 0xff
 801036c:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801036e:	4a16      	ldr	r2, [pc, #88]	; (80103c8 <ProcessMacCommands+0x43c>)
 8010370:	23d2      	movs	r3, #210	; 0xd2
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	58d3      	ldr	r3, [r2, r3]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d00f      	beq.n	801039a <ProcessMacCommands+0x40e>
 801037a:	4a13      	ldr	r2, [pc, #76]	; (80103c8 <ProcessMacCommands+0x43c>)
 801037c:	23d2      	movs	r3, #210	; 0xd2
 801037e:	009b      	lsls	r3, r3, #2
 8010380:	58d3      	ldr	r3, [r2, r3]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d008      	beq.n	801039a <ProcessMacCommands+0x40e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010388:	4a0f      	ldr	r2, [pc, #60]	; (80103c8 <ProcessMacCommands+0x43c>)
 801038a:	23d2      	movs	r3, #210	; 0xd2
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	58d3      	ldr	r3, [r2, r3]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	187c      	adds	r4, r7, r1
 8010394:	4798      	blx	r3
 8010396:	0003      	movs	r3, r0
 8010398:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 801039a:	2168      	movs	r1, #104	; 0x68
 801039c:	187b      	adds	r3, r7, r1
 801039e:	2285      	movs	r2, #133	; 0x85
 80103a0:	18ba      	adds	r2, r7, r2
 80103a2:	7812      	ldrb	r2, [r2, #0]
 80103a4:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80103a6:	1c7b      	adds	r3, r7, #1
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	223f      	movs	r2, #63	; 0x3f
 80103ac:	4013      	ands	r3, r2
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	187b      	adds	r3, r7, r1
 80103b2:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80103b4:	187b      	adds	r3, r7, r1
 80103b6:	2202      	movs	r2, #2
 80103b8:	0019      	movs	r1, r3
 80103ba:	2006      	movs	r0, #6
 80103bc:	f003 fea0 	bl	8014100 <LoRaMacCommandsAddCmd>
                break;
 80103c0:	e35a      	b.n	8010a78 <ProcessMacCommands+0xaec>
 80103c2:	46c0      	nop			; (mov r8, r8)
 80103c4:	0801e190 	.word	0x0801e190
 80103c8:	20000b6c 	.word	0x20000b6c
 80103cc:	00000459 	.word	0x00000459
 80103d0:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80103d4:	246b      	movs	r4, #107	; 0x6b
 80103d6:	193b      	adds	r3, r7, r4
 80103d8:	2203      	movs	r2, #3
 80103da:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 80103dc:	1cfb      	adds	r3, r7, #3
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	1cfa      	adds	r2, r7, #3
 80103e2:	1c59      	adds	r1, r3, #1
 80103e4:	7011      	strb	r1, [r2, #0]
 80103e6:	001a      	movs	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	189b      	adds	r3, r3, r2
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	b25a      	sxtb	r2, r3
 80103f0:	2544      	movs	r5, #68	; 0x44
 80103f2:	197b      	adds	r3, r7, r5
 80103f4:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 80103f6:	197b      	adds	r3, r7, r5
 80103f8:	2038      	movs	r0, #56	; 0x38
 80103fa:	183a      	adds	r2, r7, r0
 80103fc:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80103fe:	1cfb      	adds	r3, r7, #3
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	1cfa      	adds	r2, r7, #3
 8010404:	1c59      	adds	r1, r3, #1
 8010406:	7011      	strb	r1, [r2, #0]
 8010408:	001a      	movs	r2, r3
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	189b      	adds	r3, r3, r2
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	001a      	movs	r2, r3
 8010412:	183b      	adds	r3, r7, r0
 8010414:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010416:	1cfb      	adds	r3, r7, #3
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	1cfa      	adds	r2, r7, #3
 801041c:	1c59      	adds	r1, r3, #1
 801041e:	7011      	strb	r1, [r2, #0]
 8010420:	001a      	movs	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	189b      	adds	r3, r3, r2
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	021a      	lsls	r2, r3, #8
 801042a:	183b      	adds	r3, r7, r0
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	431a      	orrs	r2, r3
 8010430:	183b      	adds	r3, r7, r0
 8010432:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010434:	1cfb      	adds	r3, r7, #3
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	1cfa      	adds	r2, r7, #3
 801043a:	1c59      	adds	r1, r3, #1
 801043c:	7011      	strb	r1, [r2, #0]
 801043e:	001a      	movs	r2, r3
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	189b      	adds	r3, r3, r2
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	041a      	lsls	r2, r3, #16
 8010448:	183b      	adds	r3, r7, r0
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	431a      	orrs	r2, r3
 801044e:	183b      	adds	r3, r7, r0
 8010450:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 8010452:	183b      	adds	r3, r7, r0
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	2264      	movs	r2, #100	; 0x64
 8010458:	435a      	muls	r2, r3
 801045a:	183b      	adds	r3, r7, r0
 801045c:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 801045e:	183b      	adds	r3, r7, r0
 8010460:	2200      	movs	r2, #0
 8010462:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 8010464:	1cfb      	adds	r3, r7, #3
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	1cfa      	adds	r2, r7, #3
 801046a:	1c59      	adds	r1, r3, #1
 801046c:	7011      	strb	r1, [r2, #0]
 801046e:	001a      	movs	r2, r3
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	189b      	adds	r3, r3, r2
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	b25a      	sxtb	r2, r3
 8010478:	183b      	adds	r3, r7, r0
 801047a:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 801047c:	4ba0      	ldr	r3, [pc, #640]	; (8010700 <ProcessMacCommands+0x774>)
 801047e:	4aa1      	ldr	r2, [pc, #644]	; (8010704 <ProcessMacCommands+0x778>)
 8010480:	589b      	ldr	r3, [r3, r2]
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	197a      	adds	r2, r7, r5
 8010486:	0011      	movs	r1, r2
 8010488:	0018      	movs	r0, r3
 801048a:	f005 ff01 	bl	8016290 <RegionNewChannelReq>
 801048e:	0003      	movs	r3, r0
 8010490:	001a      	movs	r2, r3
 8010492:	193b      	adds	r3, r7, r4
 8010494:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 8010496:	193b      	adds	r3, r7, r4
 8010498:	781a      	ldrb	r2, [r3, #0]
 801049a:	2168      	movs	r1, #104	; 0x68
 801049c:	187b      	adds	r3, r7, r1
 801049e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80104a0:	187b      	adds	r3, r7, r1
 80104a2:	2201      	movs	r2, #1
 80104a4:	0019      	movs	r1, r3
 80104a6:	2007      	movs	r0, #7
 80104a8:	f003 fe2a 	bl	8014100 <LoRaMacCommandsAddCmd>
                break;
 80104ac:	46c0      	nop			; (mov r8, r8)
 80104ae:	e2e3      	b.n	8010a78 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80104b0:	1cfb      	adds	r3, r7, #3
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	1cfa      	adds	r2, r7, #3
 80104b6:	1c59      	adds	r1, r3, #1
 80104b8:	7011      	strb	r1, [r2, #0]
 80104ba:	001a      	movs	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	189b      	adds	r3, r3, r2
 80104c0:	781a      	ldrb	r2, [r3, #0]
 80104c2:	2084      	movs	r0, #132	; 0x84
 80104c4:	183b      	adds	r3, r7, r0
 80104c6:	210f      	movs	r1, #15
 80104c8:	400a      	ands	r2, r1
 80104ca:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 80104cc:	183b      	adds	r3, r7, r0
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d104      	bne.n	80104de <ProcessMacCommands+0x552>
                {
                    delay++;
 80104d4:	183b      	adds	r3, r7, r0
 80104d6:	781a      	ldrb	r2, [r3, #0]
 80104d8:	183b      	adds	r3, r7, r0
 80104da:	3201      	adds	r2, #1
 80104dc:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 80104de:	2384      	movs	r3, #132	; 0x84
 80104e0:	18fb      	adds	r3, r7, r3
 80104e2:	781a      	ldrb	r2, [r3, #0]
 80104e4:	0013      	movs	r3, r2
 80104e6:	015b      	lsls	r3, r3, #5
 80104e8:	1a9b      	subs	r3, r3, r2
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	189b      	adds	r3, r3, r2
 80104ee:	00db      	lsls	r3, r3, #3
 80104f0:	0019      	movs	r1, r3
 80104f2:	4b83      	ldr	r3, [pc, #524]	; (8010700 <ProcessMacCommands+0x774>)
 80104f4:	4a83      	ldr	r2, [pc, #524]	; (8010704 <ProcessMacCommands+0x778>)
 80104f6:	589b      	ldr	r3, [r3, r2]
 80104f8:	2294      	movs	r2, #148	; 0x94
 80104fa:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 80104fc:	4b80      	ldr	r3, [pc, #512]	; (8010700 <ProcessMacCommands+0x774>)
 80104fe:	4a81      	ldr	r2, [pc, #516]	; (8010704 <ProcessMacCommands+0x778>)
 8010500:	589b      	ldr	r3, [r3, r2]
 8010502:	2294      	movs	r2, #148	; 0x94
 8010504:	589b      	ldr	r3, [r3, r2]
 8010506:	4a7e      	ldr	r2, [pc, #504]	; (8010700 <ProcessMacCommands+0x774>)
 8010508:	497e      	ldr	r1, [pc, #504]	; (8010704 <ProcessMacCommands+0x778>)
 801050a:	5852      	ldr	r2, [r2, r1]
 801050c:	21fa      	movs	r1, #250	; 0xfa
 801050e:	0089      	lsls	r1, r1, #2
 8010510:	468c      	mov	ip, r1
 8010512:	4463      	add	r3, ip
 8010514:	2198      	movs	r1, #152	; 0x98
 8010516:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010518:	2368      	movs	r3, #104	; 0x68
 801051a:	18fb      	adds	r3, r7, r3
 801051c:	2200      	movs	r2, #0
 801051e:	0019      	movs	r1, r3
 8010520:	2008      	movs	r0, #8
 8010522:	f003 fded 	bl	8014100 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010526:	f7ff fd21 	bl	800ff6c <SetMlmeScheduleUplinkIndication>
                break;
 801052a:	e2a5      	b.n	8010a78 <ProcessMacCommands+0xaec>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801052c:	1cfb      	adds	r3, r7, #3
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	1cfa      	adds	r2, r7, #3
 8010532:	1c59      	adds	r1, r3, #1
 8010534:	7011      	strb	r1, [r2, #0]
 8010536:	001a      	movs	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	189a      	adds	r2, r3, r2
 801053c:	2076      	movs	r0, #118	; 0x76
 801053e:	183b      	adds	r3, r7, r0
 8010540:	7812      	ldrb	r2, [r2, #0]
 8010542:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 8010544:	2134      	movs	r1, #52	; 0x34
 8010546:	187b      	adds	r3, r7, r1
 8010548:	2200      	movs	r2, #0
 801054a:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 801054c:	187b      	adds	r3, r7, r1
 801054e:	2200      	movs	r2, #0
 8010550:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010552:	183b      	adds	r3, r7, r0
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	2220      	movs	r2, #32
 8010558:	4013      	ands	r3, r2
 801055a:	d002      	beq.n	8010562 <ProcessMacCommands+0x5d6>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 801055c:	187b      	adds	r3, r7, r1
 801055e:	2201      	movs	r2, #1
 8010560:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010562:	2376      	movs	r3, #118	; 0x76
 8010564:	18fb      	adds	r3, r7, r3
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	2210      	movs	r2, #16
 801056a:	4013      	ands	r3, r2
 801056c:	d003      	beq.n	8010576 <ProcessMacCommands+0x5ea>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801056e:	2334      	movs	r3, #52	; 0x34
 8010570:	18fb      	adds	r3, r7, r3
 8010572:	2201      	movs	r2, #1
 8010574:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010576:	2376      	movs	r3, #118	; 0x76
 8010578:	18fb      	adds	r3, r7, r3
 801057a:	781b      	ldrb	r3, [r3, #0]
 801057c:	220f      	movs	r2, #15
 801057e:	4013      	ands	r3, r2
 8010580:	b2da      	uxtb	r2, r3
 8010582:	2434      	movs	r4, #52	; 0x34
 8010584:	193b      	adds	r3, r7, r4
 8010586:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8010588:	4b5d      	ldr	r3, [pc, #372]	; (8010700 <ProcessMacCommands+0x774>)
 801058a:	4a5e      	ldr	r2, [pc, #376]	; (8010704 <ProcessMacCommands+0x778>)
 801058c:	589b      	ldr	r3, [r3, r2]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	193a      	adds	r2, r7, r4
 8010592:	0011      	movs	r1, r2
 8010594:	0018      	movs	r0, r3
 8010596:	f005 fe91 	bl	80162bc <RegionTxParamSetupReq>
 801059a:	0003      	movs	r3, r0
 801059c:	3301      	adds	r3, #1
 801059e:	d050      	beq.n	8010642 <ProcessMacCommands+0x6b6>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80105a0:	4b57      	ldr	r3, [pc, #348]	; (8010700 <ProcessMacCommands+0x774>)
 80105a2:	4a58      	ldr	r2, [pc, #352]	; (8010704 <ProcessMacCommands+0x778>)
 80105a4:	589b      	ldr	r3, [r3, r2]
 80105a6:	193a      	adds	r2, r7, r4
 80105a8:	7811      	ldrb	r1, [r2, #0]
 80105aa:	22b8      	movs	r2, #184	; 0xb8
 80105ac:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80105ae:	4b54      	ldr	r3, [pc, #336]	; (8010700 <ProcessMacCommands+0x774>)
 80105b0:	4a54      	ldr	r2, [pc, #336]	; (8010704 <ProcessMacCommands+0x778>)
 80105b2:	589b      	ldr	r3, [r3, r2]
 80105b4:	193a      	adds	r2, r7, r4
 80105b6:	7851      	ldrb	r1, [r2, #1]
 80105b8:	22b9      	movs	r2, #185	; 0xb9
 80105ba:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80105bc:	193b      	adds	r3, r7, r4
 80105be:	789b      	ldrb	r3, [r3, #2]
 80105c0:	001a      	movs	r2, r3
 80105c2:	4b51      	ldr	r3, [pc, #324]	; (8010708 <ProcessMacCommands+0x77c>)
 80105c4:	5c9a      	ldrb	r2, [r3, r2]
 80105c6:	4b4e      	ldr	r3, [pc, #312]	; (8010700 <ProcessMacCommands+0x774>)
 80105c8:	494e      	ldr	r1, [pc, #312]	; (8010704 <ProcessMacCommands+0x778>)
 80105ca:	585c      	ldr	r4, [r3, r1]
 80105cc:	0010      	movs	r0, r2
 80105ce:	f7f0 fa7f 	bl	8000ad0 <__aeabi_ui2f>
 80105d2:	1c03      	adds	r3, r0, #0
 80105d4:	22bc      	movs	r2, #188	; 0xbc
 80105d6:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80105d8:	212c      	movs	r1, #44	; 0x2c
 80105da:	187b      	adds	r3, r7, r1
 80105dc:	2202      	movs	r2, #2
 80105de:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80105e0:	4b47      	ldr	r3, [pc, #284]	; (8010700 <ProcessMacCommands+0x774>)
 80105e2:	4a48      	ldr	r2, [pc, #288]	; (8010704 <ProcessMacCommands+0x778>)
 80105e4:	589b      	ldr	r3, [r3, r2]
 80105e6:	22b8      	movs	r2, #184	; 0xb8
 80105e8:	5c9a      	ldrb	r2, [r3, r2]
 80105ea:	187b      	adds	r3, r7, r1
 80105ec:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80105ee:	4b44      	ldr	r3, [pc, #272]	; (8010700 <ProcessMacCommands+0x774>)
 80105f0:	4a44      	ldr	r2, [pc, #272]	; (8010704 <ProcessMacCommands+0x778>)
 80105f2:	589b      	ldr	r3, [r3, r2]
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	187a      	adds	r2, r7, r1
 80105f8:	0011      	movs	r1, r2
 80105fa:	0018      	movs	r0, r3
 80105fc:	f005 fd0d 	bl	801601a <RegionGetPhyParam>
 8010600:	0003      	movs	r3, r0
 8010602:	001a      	movs	r2, r3
 8010604:	2128      	movs	r1, #40	; 0x28
 8010606:	187b      	adds	r3, r7, r1
 8010608:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 801060a:	187b      	adds	r3, r7, r1
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	b259      	sxtb	r1, r3
 8010610:	4b3b      	ldr	r3, [pc, #236]	; (8010700 <ProcessMacCommands+0x774>)
 8010612:	4a3c      	ldr	r2, [pc, #240]	; (8010704 <ProcessMacCommands+0x778>)
 8010614:	589b      	ldr	r3, [r3, r2]
 8010616:	2285      	movs	r2, #133	; 0x85
 8010618:	5698      	ldrsb	r0, [r3, r2]
 801061a:	4b39      	ldr	r3, [pc, #228]	; (8010700 <ProcessMacCommands+0x774>)
 801061c:	4a39      	ldr	r2, [pc, #228]	; (8010704 <ProcessMacCommands+0x778>)
 801061e:	589b      	ldr	r3, [r3, r2]
 8010620:	1c04      	adds	r4, r0, #0
 8010622:	1c08      	adds	r0, r1, #0
 8010624:	b241      	sxtb	r1, r0
 8010626:	b262      	sxtb	r2, r4
 8010628:	4291      	cmp	r1, r2
 801062a:	da00      	bge.n	801062e <ProcessMacCommands+0x6a2>
 801062c:	1c20      	adds	r0, r4, #0
 801062e:	b241      	sxtb	r1, r0
 8010630:	2285      	movs	r2, #133	; 0x85
 8010632:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010634:	2368      	movs	r3, #104	; 0x68
 8010636:	18fb      	adds	r3, r7, r3
 8010638:	2200      	movs	r2, #0
 801063a:	0019      	movs	r1, r3
 801063c:	2009      	movs	r0, #9
 801063e:	f003 fd5f 	bl	8014100 <LoRaMacCommandsAddCmd>
                }
                break;
 8010642:	46c0      	nop			; (mov r8, r8)
 8010644:	e218      	b.n	8010a78 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010646:	246b      	movs	r4, #107	; 0x6b
 8010648:	193b      	adds	r3, r7, r4
 801064a:	2203      	movs	r2, #3
 801064c:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 801064e:	1cfb      	adds	r3, r7, #3
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	1cfa      	adds	r2, r7, #3
 8010654:	1c59      	adds	r1, r3, #1
 8010656:	7011      	strb	r1, [r2, #0]
 8010658:	001a      	movs	r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	189b      	adds	r3, r3, r2
 801065e:	781a      	ldrb	r2, [r3, #0]
 8010660:	2020      	movs	r0, #32
 8010662:	183b      	adds	r3, r7, r0
 8010664:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010666:	1cfb      	adds	r3, r7, #3
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	1cfa      	adds	r2, r7, #3
 801066c:	1c59      	adds	r1, r3, #1
 801066e:	7011      	strb	r1, [r2, #0]
 8010670:	001a      	movs	r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	189b      	adds	r3, r3, r2
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	001a      	movs	r2, r3
 801067a:	183b      	adds	r3, r7, r0
 801067c:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801067e:	1cfb      	adds	r3, r7, #3
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	1cfa      	adds	r2, r7, #3
 8010684:	1c59      	adds	r1, r3, #1
 8010686:	7011      	strb	r1, [r2, #0]
 8010688:	001a      	movs	r2, r3
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	189b      	adds	r3, r3, r2
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	021a      	lsls	r2, r3, #8
 8010692:	183b      	adds	r3, r7, r0
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	431a      	orrs	r2, r3
 8010698:	183b      	adds	r3, r7, r0
 801069a:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801069c:	1cfb      	adds	r3, r7, #3
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	1cfa      	adds	r2, r7, #3
 80106a2:	1c59      	adds	r1, r3, #1
 80106a4:	7011      	strb	r1, [r2, #0]
 80106a6:	001a      	movs	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	189b      	adds	r3, r3, r2
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	041a      	lsls	r2, r3, #16
 80106b0:	183b      	adds	r3, r7, r0
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	431a      	orrs	r2, r3
 80106b6:	0001      	movs	r1, r0
 80106b8:	187b      	adds	r3, r7, r1
 80106ba:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 80106bc:	187b      	adds	r3, r7, r1
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	2264      	movs	r2, #100	; 0x64
 80106c2:	435a      	muls	r2, r3
 80106c4:	187b      	adds	r3, r7, r1
 80106c6:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 80106c8:	4b0d      	ldr	r3, [pc, #52]	; (8010700 <ProcessMacCommands+0x774>)
 80106ca:	4a0e      	ldr	r2, [pc, #56]	; (8010704 <ProcessMacCommands+0x778>)
 80106cc:	589b      	ldr	r3, [r3, r2]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	187a      	adds	r2, r7, r1
 80106d2:	0011      	movs	r1, r2
 80106d4:	0018      	movs	r0, r3
 80106d6:	f005 fe07 	bl	80162e8 <RegionDlChannelReq>
 80106da:	0003      	movs	r3, r0
 80106dc:	001a      	movs	r2, r3
 80106de:	193b      	adds	r3, r7, r4
 80106e0:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 80106e2:	193b      	adds	r3, r7, r4
 80106e4:	781a      	ldrb	r2, [r3, #0]
 80106e6:	2168      	movs	r1, #104	; 0x68
 80106e8:	187b      	adds	r3, r7, r1
 80106ea:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80106ec:	187b      	adds	r3, r7, r1
 80106ee:	2201      	movs	r2, #1
 80106f0:	0019      	movs	r1, r3
 80106f2:	200a      	movs	r0, #10
 80106f4:	f003 fd04 	bl	8014100 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80106f8:	f7ff fc38 	bl	800ff6c <SetMlmeScheduleUplinkIndication>
                break;
 80106fc:	46c0      	nop			; (mov r8, r8)
 80106fe:	e1bb      	b.n	8010a78 <ProcessMacCommands+0xaec>
 8010700:	20000b6c 	.word	0x20000b6c
 8010704:	00000484 	.word	0x00000484
 8010708:	0801e180 	.word	0x0801e180
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 801070c:	200a      	movs	r0, #10
 801070e:	f004 f889 	bl	8014824 <LoRaMacConfirmQueueIsCmdActive>
 8010712:	1e03      	subs	r3, r0, #0
 8010714:	d100      	bne.n	8010718 <ProcessMacCommands+0x78c>
 8010716:	e1af      	b.n	8010a78 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010718:	210a      	movs	r1, #10
 801071a:	2000      	movs	r0, #0
 801071c:	f003 ffe6 	bl	80146ec <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8010720:	2418      	movs	r4, #24
 8010722:	193b      	adds	r3, r7, r4
 8010724:	0018      	movs	r0, r3
 8010726:	2308      	movs	r3, #8
 8010728:	001a      	movs	r2, r3
 801072a:	2100      	movs	r1, #0
 801072c:	f00c fdbb 	bl	801d2a6 <memset>
                    SysTime_t sysTime = { 0 };
 8010730:	2510      	movs	r5, #16
 8010732:	197b      	adds	r3, r7, r5
 8010734:	0018      	movs	r0, r3
 8010736:	2308      	movs	r3, #8
 8010738:	001a      	movs	r2, r3
 801073a:	2100      	movs	r1, #0
 801073c:	f00c fdb3 	bl	801d2a6 <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 8010740:	2608      	movs	r6, #8
 8010742:	19bb      	adds	r3, r7, r6
 8010744:	0018      	movs	r0, r3
 8010746:	2308      	movs	r3, #8
 8010748:	001a      	movs	r2, r3
 801074a:	2100      	movs	r1, #0
 801074c:	f00c fdab 	bl	801d2a6 <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010750:	1cfb      	adds	r3, r7, #3
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	1cfa      	adds	r2, r7, #3
 8010756:	1c59      	adds	r1, r3, #1
 8010758:	7011      	strb	r1, [r2, #0]
 801075a:	001a      	movs	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	189b      	adds	r3, r3, r2
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	001a      	movs	r2, r3
 8010764:	193b      	adds	r3, r7, r4
 8010766:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010768:	1cfb      	adds	r3, r7, #3
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	1cfa      	adds	r2, r7, #3
 801076e:	1c59      	adds	r1, r3, #1
 8010770:	7011      	strb	r1, [r2, #0]
 8010772:	001a      	movs	r2, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	189b      	adds	r3, r3, r2
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	021a      	lsls	r2, r3, #8
 801077c:	193b      	adds	r3, r7, r4
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	431a      	orrs	r2, r3
 8010782:	0020      	movs	r0, r4
 8010784:	193b      	adds	r3, r7, r4
 8010786:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010788:	1cfb      	adds	r3, r7, #3
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	1cfa      	adds	r2, r7, #3
 801078e:	1c59      	adds	r1, r3, #1
 8010790:	7011      	strb	r1, [r2, #0]
 8010792:	001a      	movs	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	189b      	adds	r3, r3, r2
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	041a      	lsls	r2, r3, #16
 801079c:	183b      	adds	r3, r7, r0
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	431a      	orrs	r2, r3
 80107a2:	183b      	adds	r3, r7, r0
 80107a4:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80107a6:	1cfb      	adds	r3, r7, #3
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	1cfa      	adds	r2, r7, #3
 80107ac:	1c59      	adds	r1, r3, #1
 80107ae:	7011      	strb	r1, [r2, #0]
 80107b0:	001a      	movs	r2, r3
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	189b      	adds	r3, r3, r2
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	061a      	lsls	r2, r3, #24
 80107ba:	183b      	adds	r3, r7, r0
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	431a      	orrs	r2, r3
 80107c0:	183b      	adds	r3, r7, r0
 80107c2:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80107c4:	1cfb      	adds	r3, r7, #3
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	1cfa      	adds	r2, r7, #3
 80107ca:	1c59      	adds	r1, r3, #1
 80107cc:	7011      	strb	r1, [r2, #0]
 80107ce:	001a      	movs	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	189b      	adds	r3, r3, r2
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	b21a      	sxth	r2, r3
 80107d8:	183b      	adds	r3, r7, r0
 80107da:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80107dc:	0001      	movs	r1, r0
 80107de:	183b      	adds	r3, r7, r0
 80107e0:	2204      	movs	r2, #4
 80107e2:	5e9b      	ldrsh	r3, [r3, r2]
 80107e4:	001a      	movs	r2, r3
 80107e6:	0013      	movs	r3, r2
 80107e8:	015b      	lsls	r3, r3, #5
 80107ea:	1a9b      	subs	r3, r3, r2
 80107ec:	009b      	lsls	r3, r3, #2
 80107ee:	189b      	adds	r3, r3, r2
 80107f0:	00db      	lsls	r3, r3, #3
 80107f2:	121b      	asrs	r3, r3, #8
 80107f4:	b21a      	sxth	r2, r3
 80107f6:	187b      	adds	r3, r7, r1
 80107f8:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80107fa:	197a      	adds	r2, r7, r5
 80107fc:	187b      	adds	r3, r7, r1
 80107fe:	0010      	movs	r0, r2
 8010800:	0019      	movs	r1, r3
 8010802:	2308      	movs	r3, #8
 8010804:	001a      	movs	r2, r3
 8010806:	f00c fd45 	bl	801d294 <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801080a:	197b      	adds	r3, r7, r5
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	4aa2      	ldr	r2, [pc, #648]	; (8010a98 <ProcessMacCommands+0xb0c>)
 8010810:	189a      	adds	r2, r3, r2
 8010812:	002c      	movs	r4, r5
 8010814:	197b      	adds	r3, r7, r5
 8010816:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010818:	19bb      	adds	r3, r7, r6
 801081a:	0018      	movs	r0, r3
 801081c:	f00b face 	bl	801bdbc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010820:	236c      	movs	r3, #108	; 0x6c
 8010822:	18fd      	adds	r5, r7, r3
 8010824:	489d      	ldr	r0, [pc, #628]	; (8010a9c <ProcessMacCommands+0xb10>)
 8010826:	23ce      	movs	r3, #206	; 0xce
 8010828:	0099      	lsls	r1, r3, #2
 801082a:	0026      	movs	r6, r4
 801082c:	193a      	adds	r2, r7, r4
 801082e:	2404      	movs	r4, #4
 8010830:	1843      	adds	r3, r0, r1
 8010832:	191c      	adds	r4, r3, r4
 8010834:	466b      	mov	r3, sp
 8010836:	6824      	ldr	r4, [r4, #0]
 8010838:	601c      	str	r4, [r3, #0]
 801083a:	5843      	ldr	r3, [r0, r1]
 801083c:	6811      	ldr	r1, [r2, #0]
 801083e:	6852      	ldr	r2, [r2, #4]
 8010840:	0028      	movs	r0, r5
 8010842:	f00b fa35 	bl	801bcb0 <SysTimeSub>
 8010846:	0035      	movs	r5, r6
 8010848:	197c      	adds	r4, r7, r5
 801084a:	236c      	movs	r3, #108	; 0x6c
 801084c:	18fb      	adds	r3, r7, r3
 801084e:	2608      	movs	r6, #8
 8010850:	19ba      	adds	r2, r7, r6
 8010852:	4669      	mov	r1, sp
 8010854:	6858      	ldr	r0, [r3, #4]
 8010856:	6008      	str	r0, [r1, #0]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	6811      	ldr	r1, [r2, #0]
 801085c:	6852      	ldr	r2, [r2, #4]
 801085e:	0020      	movs	r0, r4
 8010860:	f00b f9d4 	bl	801bc0c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010864:	197b      	adds	r3, r7, r5
 8010866:	6818      	ldr	r0, [r3, #0]
 8010868:	6859      	ldr	r1, [r3, #4]
 801086a:	f00b fa6f 	bl	801bd4c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801086e:	f003 fac3 	bl	8013df8 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010872:	4a8a      	ldr	r2, [pc, #552]	; (8010a9c <ProcessMacCommands+0xb10>)
 8010874:	2387      	movs	r3, #135	; 0x87
 8010876:	00db      	lsls	r3, r3, #3
 8010878:	2101      	movs	r1, #1
 801087a:	54d1      	strb	r1, [r2, r3]
                }
                break;
 801087c:	e0fc      	b.n	8010a78 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 801087e:	200d      	movs	r0, #13
 8010880:	f003 ffd0 	bl	8014824 <LoRaMacConfirmQueueIsCmdActive>
 8010884:	1e03      	subs	r3, r0, #0
 8010886:	d100      	bne.n	801088a <ProcessMacCommands+0x8fe>
 8010888:	e0f6      	b.n	8010a78 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801088a:	210d      	movs	r1, #13
 801088c:	2000      	movs	r0, #0
 801088e:	f003 ff2d 	bl	80146ec <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8010892:	4a82      	ldr	r2, [pc, #520]	; (8010a9c <ProcessMacCommands+0xb10>)
 8010894:	2390      	movs	r3, #144	; 0x90
 8010896:	00db      	lsls	r3, r3, #3
 8010898:	5cd3      	ldrb	r3, [r2, r3]
 801089a:	2b04      	cmp	r3, #4
 801089c:	d100      	bne.n	80108a0 <ProcessMacCommands+0x914>
 801089e:	e0eb      	b.n	8010a78 <ProcessMacCommands+0xaec>
 80108a0:	4a7e      	ldr	r2, [pc, #504]	; (8010a9c <ProcessMacCommands+0xb10>)
 80108a2:	2390      	movs	r3, #144	; 0x90
 80108a4:	00db      	lsls	r3, r3, #3
 80108a6:	5cd3      	ldrb	r3, [r2, r3]
 80108a8:	2b05      	cmp	r3, #5
 80108aa:	d100      	bne.n	80108ae <ProcessMacCommands+0x922>
 80108ac:	e0e4      	b.n	8010a78 <ProcessMacCommands+0xaec>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80108ae:	f003 fa84 	bl	8013dba <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80108b2:	e0e1      	b.n	8010a78 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80108b4:	207c      	movs	r0, #124	; 0x7c
 80108b6:	183b      	adds	r3, r7, r0
 80108b8:	2203      	movs	r2, #3
 80108ba:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 80108bc:	2300      	movs	r3, #0
 80108be:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80108c0:	1cfb      	adds	r3, r7, #3
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	1cfa      	adds	r2, r7, #3
 80108c6:	1c59      	adds	r1, r3, #1
 80108c8:	7011      	strb	r1, [r2, #0]
 80108ca:	001a      	movs	r2, r3
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	189b      	adds	r3, r3, r2
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80108d4:	1cfb      	adds	r3, r7, #3
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	1cfa      	adds	r2, r7, #3
 80108da:	1c59      	adds	r1, r3, #1
 80108dc:	7011      	strb	r1, [r2, #0]
 80108de:	001a      	movs	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	189b      	adds	r3, r3, r2
 80108e4:	781b      	ldrb	r3, [r3, #0]
 80108e6:	021b      	lsls	r3, r3, #8
 80108e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80108ea:	4313      	orrs	r3, r2
 80108ec:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80108ee:	1cfb      	adds	r3, r7, #3
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	1cfa      	adds	r2, r7, #3
 80108f4:	1c59      	adds	r1, r3, #1
 80108f6:	7011      	strb	r1, [r2, #0]
 80108f8:	001a      	movs	r2, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	189b      	adds	r3, r3, r2
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	041b      	lsls	r3, r3, #16
 8010902:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010904:	4313      	orrs	r3, r2
 8010906:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8010908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801090a:	2264      	movs	r2, #100	; 0x64
 801090c:	4353      	muls	r3, r2
 801090e:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010910:	1cfb      	adds	r3, r7, #3
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	1cfa      	adds	r2, r7, #3
 8010916:	1c59      	adds	r1, r3, #1
 8010918:	7011      	strb	r1, [r2, #0]
 801091a:	001a      	movs	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	189b      	adds	r3, r3, r2
 8010920:	781a      	ldrb	r2, [r3, #0]
 8010922:	2677      	movs	r6, #119	; 0x77
 8010924:	19bb      	adds	r3, r7, r6
 8010926:	210f      	movs	r1, #15
 8010928:	400a      	ands	r2, r1
 801092a:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801092c:	0005      	movs	r5, r0
 801092e:	183c      	adds	r4, r7, r0
 8010930:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010932:	19bb      	adds	r3, r7, r6
 8010934:	781b      	ldrb	r3, [r3, #0]
 8010936:	0011      	movs	r1, r2
 8010938:	0018      	movs	r0, r3
 801093a:	f003 fa43 	bl	8013dc4 <LoRaMacClassBPingSlotChannelReq>
 801093e:	0003      	movs	r3, r0
 8010940:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8010942:	2168      	movs	r1, #104	; 0x68
 8010944:	187b      	adds	r3, r7, r1
 8010946:	197a      	adds	r2, r7, r5
 8010948:	7812      	ldrb	r2, [r2, #0]
 801094a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 801094c:	187b      	adds	r3, r7, r1
 801094e:	2201      	movs	r2, #1
 8010950:	0019      	movs	r1, r3
 8010952:	2011      	movs	r0, #17
 8010954:	f003 fbd4 	bl	8014100 <LoRaMacCommandsAddCmd>
                break;
 8010958:	e08e      	b.n	8010a78 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801095a:	200e      	movs	r0, #14
 801095c:	f003 ff62 	bl	8014824 <LoRaMacConfirmQueueIsCmdActive>
 8010960:	1e03      	subs	r3, r0, #0
 8010962:	d100      	bne.n	8010966 <ProcessMacCommands+0x9da>
 8010964:	e088      	b.n	8010a78 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8010966:	210e      	movs	r1, #14
 8010968:	2000      	movs	r0, #0
 801096a:	f003 febf 	bl	80146ec <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801096e:	207e      	movs	r0, #126	; 0x7e
 8010970:	183b      	adds	r3, r7, r0
 8010972:	2200      	movs	r2, #0
 8010974:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 8010976:	247d      	movs	r4, #125	; 0x7d
 8010978:	193b      	adds	r3, r7, r4
 801097a:	2200      	movs	r2, #0
 801097c:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801097e:	1cfb      	adds	r3, r7, #3
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	1cfa      	adds	r2, r7, #3
 8010984:	1c59      	adds	r1, r3, #1
 8010986:	7011      	strb	r1, [r2, #0]
 8010988:	001a      	movs	r2, r3
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	189b      	adds	r3, r3, r2
 801098e:	781a      	ldrb	r2, [r3, #0]
 8010990:	183b      	adds	r3, r7, r0
 8010992:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010994:	1cfb      	adds	r3, r7, #3
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	1cfa      	adds	r2, r7, #3
 801099a:	1c59      	adds	r1, r3, #1
 801099c:	7011      	strb	r1, [r2, #0]
 801099e:	001a      	movs	r2, r3
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	189b      	adds	r3, r3, r2
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	021b      	lsls	r3, r3, #8
 80109a8:	b21a      	sxth	r2, r3
 80109aa:	183b      	adds	r3, r7, r0
 80109ac:	2100      	movs	r1, #0
 80109ae:	5e5b      	ldrsh	r3, [r3, r1]
 80109b0:	4313      	orrs	r3, r2
 80109b2:	b21a      	sxth	r2, r3
 80109b4:	183b      	adds	r3, r7, r0
 80109b6:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 80109b8:	1cfb      	adds	r3, r7, #3
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	1cfa      	adds	r2, r7, #3
 80109be:	1c59      	adds	r1, r3, #1
 80109c0:	7011      	strb	r1, [r2, #0]
 80109c2:	001a      	movs	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	189a      	adds	r2, r3, r2
 80109c8:	193b      	adds	r3, r7, r4
 80109ca:	7812      	ldrb	r2, [r2, #0]
 80109cc:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80109ce:	4b34      	ldr	r3, [pc, #208]	; (8010aa0 <ProcessMacCommands+0xb14>)
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	193b      	adds	r3, r7, r4
 80109d4:	7819      	ldrb	r1, [r3, #0]
 80109d6:	183b      	adds	r3, r7, r0
 80109d8:	881b      	ldrh	r3, [r3, #0]
 80109da:	0018      	movs	r0, r3
 80109dc:	f003 f9fe 	bl	8013ddc <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80109e0:	e04a      	b.n	8010a78 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80109e2:	2300      	movs	r3, #0
 80109e4:	2080      	movs	r0, #128	; 0x80
 80109e6:	183a      	adds	r2, r7, r0
 80109e8:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 80109ea:	1cfb      	adds	r3, r7, #3
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	1cfa      	adds	r2, r7, #3
 80109f0:	1c59      	adds	r1, r3, #1
 80109f2:	7011      	strb	r1, [r2, #0]
 80109f4:	001a      	movs	r2, r3
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	189b      	adds	r3, r3, r2
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	183a      	adds	r2, r7, r0
 80109fe:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010a00:	1cfb      	adds	r3, r7, #3
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	1cfa      	adds	r2, r7, #3
 8010a06:	1c59      	adds	r1, r3, #1
 8010a08:	7011      	strb	r1, [r2, #0]
 8010a0a:	001a      	movs	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	189b      	adds	r3, r3, r2
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	021b      	lsls	r3, r3, #8
 8010a14:	183a      	adds	r2, r7, r0
 8010a16:	6812      	ldr	r2, [r2, #0]
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	183a      	adds	r2, r7, r0
 8010a1c:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010a1e:	1cfb      	adds	r3, r7, #3
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	1cfa      	adds	r2, r7, #3
 8010a24:	1c59      	adds	r1, r3, #1
 8010a26:	7011      	strb	r1, [r2, #0]
 8010a28:	001a      	movs	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	189b      	adds	r3, r3, r2
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	041b      	lsls	r3, r3, #16
 8010a32:	183a      	adds	r2, r7, r0
 8010a34:	6812      	ldr	r2, [r2, #0]
 8010a36:	4313      	orrs	r3, r2
 8010a38:	183a      	adds	r2, r7, r0
 8010a3a:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 8010a3c:	183b      	adds	r3, r7, r0
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2264      	movs	r2, #100	; 0x64
 8010a42:	4353      	muls	r3, r2
 8010a44:	183a      	adds	r2, r7, r0
 8010a46:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010a48:	183b      	adds	r3, r7, r0
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	0018      	movs	r0, r3
 8010a4e:	f003 f9d8 	bl	8013e02 <LoRaMacClassBBeaconFreqReq>
 8010a52:	1e03      	subs	r3, r0, #0
 8010a54:	d004      	beq.n	8010a60 <ProcessMacCommands+0xad4>
                    {
                        macCmdPayload[0] = 1;
 8010a56:	2368      	movs	r3, #104	; 0x68
 8010a58:	18fb      	adds	r3, r7, r3
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	701a      	strb	r2, [r3, #0]
 8010a5e:	e003      	b.n	8010a68 <ProcessMacCommands+0xadc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010a60:	2368      	movs	r3, #104	; 0x68
 8010a62:	18fb      	adds	r3, r7, r3
 8010a64:	2200      	movs	r2, #0
 8010a66:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010a68:	2368      	movs	r3, #104	; 0x68
 8010a6a:	18fb      	adds	r3, r7, r3
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	0019      	movs	r1, r3
 8010a70:	2013      	movs	r0, #19
 8010a72:	f003 fb45 	bl	8014100 <LoRaMacCommandsAddCmd>
                }
                break;
 8010a76:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 8010a78:	1cfa      	adds	r2, r7, #3
 8010a7a:	1cbb      	adds	r3, r7, #2
 8010a7c:	7812      	ldrb	r2, [r2, #0]
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d201      	bcs.n	8010a88 <ProcessMacCommands+0xafc>
 8010a84:	f7ff faa0 	bl	800ffc8 <ProcessMacCommands+0x3c>
 8010a88:	e002      	b.n	8010a90 <ProcessMacCommands+0xb04>
            return;
 8010a8a:	46c0      	nop			; (mov r8, r8)
 8010a8c:	e000      	b.n	8010a90 <ProcessMacCommands+0xb04>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010a8e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8010a90:	46bd      	mov	sp, r7
 8010a92:	b023      	add	sp, #140	; 0x8c
 8010a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a96:	46c0      	nop			; (mov r8, r8)
 8010a98:	12d53d80 	.word	0x12d53d80
 8010a9c:	20000b6c 	.word	0x20000b6c
 8010aa0:	20000b5c 	.word	0x20000b5c

08010aa4 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aa6:	b08f      	sub	sp, #60	; 0x3c
 8010aa8:	af02      	add	r7, sp, #8
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	0008      	movs	r0, r1
 8010aae:	607a      	str	r2, [r7, #4]
 8010ab0:	0019      	movs	r1, r3
 8010ab2:	230b      	movs	r3, #11
 8010ab4:	18fb      	adds	r3, r7, r3
 8010ab6:	1c02      	adds	r2, r0, #0
 8010ab8:	701a      	strb	r2, [r3, #0]
 8010aba:	2308      	movs	r3, #8
 8010abc:	18fb      	adds	r3, r7, r3
 8010abe:	1c0a      	adds	r2, r1, #0
 8010ac0:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ac2:	232f      	movs	r3, #47	; 0x2f
 8010ac4:	18fb      	adds	r3, r7, r3
 8010ac6:	2203      	movs	r2, #3
 8010ac8:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010aca:	4b8f      	ldr	r3, [pc, #572]	; (8010d08 <Send+0x264>)
 8010acc:	4a8f      	ldr	r2, [pc, #572]	; (8010d0c <Send+0x268>)
 8010ace:	589a      	ldr	r2, [r3, r2]
 8010ad0:	232e      	movs	r3, #46	; 0x2e
 8010ad2:	18fb      	adds	r3, r7, r3
 8010ad4:	2185      	movs	r1, #133	; 0x85
 8010ad6:	5c52      	ldrb	r2, [r2, r1]
 8010ad8:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010ada:	4b8b      	ldr	r3, [pc, #556]	; (8010d08 <Send+0x264>)
 8010adc:	4a8b      	ldr	r2, [pc, #556]	; (8010d0c <Send+0x268>)
 8010ade:	589a      	ldr	r2, [r3, r2]
 8010ae0:	232d      	movs	r3, #45	; 0x2d
 8010ae2:	18fb      	adds	r3, r7, r3
 8010ae4:	2184      	movs	r1, #132	; 0x84
 8010ae6:	5c52      	ldrb	r2, [r2, r1]
 8010ae8:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010aea:	4b87      	ldr	r3, [pc, #540]	; (8010d08 <Send+0x264>)
 8010aec:	4a87      	ldr	r2, [pc, #540]	; (8010d0c <Send+0x268>)
 8010aee:	589b      	ldr	r3, [r3, r2]
 8010af0:	2280      	movs	r2, #128	; 0x80
 8010af2:	589b      	ldr	r3, [r3, r2]
 8010af4:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8010af6:	4b84      	ldr	r3, [pc, #528]	; (8010d08 <Send+0x264>)
 8010af8:	4a84      	ldr	r2, [pc, #528]	; (8010d0c <Send+0x268>)
 8010afa:	589a      	ldr	r2, [r3, r2]
 8010afc:	23b2      	movs	r3, #178	; 0xb2
 8010afe:	005b      	lsls	r3, r3, #1
 8010b00:	5cd3      	ldrb	r3, [r2, r3]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d101      	bne.n	8010b0a <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010b06:	2307      	movs	r3, #7
 8010b08:	e0fa      	b.n	8010d00 <Send+0x25c>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8010b0a:	4b7f      	ldr	r3, [pc, #508]	; (8010d08 <Send+0x264>)
 8010b0c:	4a7f      	ldr	r2, [pc, #508]	; (8010d0c <Send+0x268>)
 8010b0e:	589b      	ldr	r3, [r3, r2]
 8010b10:	22c8      	movs	r2, #200	; 0xc8
 8010b12:	5c9b      	ldrb	r3, [r3, r2]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d106      	bne.n	8010b26 <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8010b18:	4b7b      	ldr	r3, [pc, #492]	; (8010d08 <Send+0x264>)
 8010b1a:	4a7c      	ldr	r2, [pc, #496]	; (8010d0c <Send+0x268>)
 8010b1c:	589a      	ldr	r2, [r3, r2]
 8010b1e:	23aa      	movs	r3, #170	; 0xaa
 8010b20:	005b      	lsls	r3, r3, #1
 8010b22:	2100      	movs	r1, #0
 8010b24:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 8010b26:	242c      	movs	r4, #44	; 0x2c
 8010b28:	193b      	adds	r3, r7, r4
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 8010b2e:	193b      	adds	r3, r7, r4
 8010b30:	781a      	ldrb	r2, [r3, #0]
 8010b32:	210f      	movs	r1, #15
 8010b34:	438a      	bics	r2, r1
 8010b36:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8010b38:	4b73      	ldr	r3, [pc, #460]	; (8010d08 <Send+0x264>)
 8010b3a:	4a74      	ldr	r2, [pc, #464]	; (8010d0c <Send+0x268>)
 8010b3c:	589b      	ldr	r3, [r3, r2]
 8010b3e:	227e      	movs	r2, #126	; 0x7e
 8010b40:	5c9a      	ldrb	r2, [r3, r2]
 8010b42:	193b      	adds	r3, r7, r4
 8010b44:	01d0      	lsls	r0, r2, #7
 8010b46:	781a      	ldrb	r2, [r3, #0]
 8010b48:	217f      	movs	r1, #127	; 0x7f
 8010b4a:	400a      	ands	r2, r1
 8010b4c:	1c11      	adds	r1, r2, #0
 8010b4e:	1c02      	adds	r2, r0, #0
 8010b50:	430a      	orrs	r2, r1
 8010b52:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8010b54:	4b6c      	ldr	r3, [pc, #432]	; (8010d08 <Send+0x264>)
 8010b56:	4a6d      	ldr	r2, [pc, #436]	; (8010d0c <Send+0x268>)
 8010b58:	589b      	ldr	r3, [r3, r2]
 8010b5a:	227c      	movs	r2, #124	; 0x7c
 8010b5c:	5c9b      	ldrb	r3, [r3, r2]
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	d105      	bne.n	8010b6e <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 8010b62:	193b      	adds	r3, r7, r4
 8010b64:	781a      	ldrb	r2, [r3, #0]
 8010b66:	2110      	movs	r1, #16
 8010b68:	430a      	orrs	r2, r1
 8010b6a:	701a      	strb	r2, [r3, #0]
 8010b6c:	e005      	b.n	8010b7a <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010b6e:	232c      	movs	r3, #44	; 0x2c
 8010b70:	18fb      	adds	r3, r7, r3
 8010b72:	781a      	ldrb	r2, [r3, #0]
 8010b74:	2110      	movs	r1, #16
 8010b76:	438a      	bics	r2, r1
 8010b78:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8010b7a:	4b63      	ldr	r3, [pc, #396]	; (8010d08 <Send+0x264>)
 8010b7c:	4a63      	ldr	r2, [pc, #396]	; (8010d0c <Send+0x268>)
 8010b7e:	589a      	ldr	r2, [r3, r2]
 8010b80:	234c      	movs	r3, #76	; 0x4c
 8010b82:	33ff      	adds	r3, #255	; 0xff
 8010b84:	5cd3      	ldrb	r3, [r2, r3]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d005      	beq.n	8010b96 <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 8010b8a:	232c      	movs	r3, #44	; 0x2c
 8010b8c:	18fb      	adds	r3, r7, r3
 8010b8e:	781a      	ldrb	r2, [r3, #0]
 8010b90:	2120      	movs	r1, #32
 8010b92:	430a      	orrs	r2, r1
 8010b94:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8010b96:	4b5c      	ldr	r3, [pc, #368]	; (8010d08 <Send+0x264>)
 8010b98:	4a5c      	ldr	r2, [pc, #368]	; (8010d0c <Send+0x268>)
 8010b9a:	5899      	ldr	r1, [r3, r2]
 8010b9c:	2014      	movs	r0, #20
 8010b9e:	183b      	adds	r3, r7, r0
 8010ba0:	22b0      	movs	r2, #176	; 0xb0
 8010ba2:	0052      	lsls	r2, r2, #1
 8010ba4:	588a      	ldr	r2, [r1, r2]
 8010ba6:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 8010ba8:	0001      	movs	r1, r0
 8010baa:	187b      	adds	r3, r7, r1
 8010bac:	2201      	movs	r2, #1
 8010bae:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010bb0:	242c      	movs	r4, #44	; 0x2c
 8010bb2:	193b      	adds	r3, r7, r4
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	061b      	lsls	r3, r3, #24
 8010bb8:	0fdb      	lsrs	r3, r3, #31
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	1e5a      	subs	r2, r3, #1
 8010bbe:	4193      	sbcs	r3, r2
 8010bc0:	b2da      	uxtb	r2, r3
 8010bc2:	187b      	adds	r3, r7, r1
 8010bc4:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010bc6:	4b50      	ldr	r3, [pc, #320]	; (8010d08 <Send+0x264>)
 8010bc8:	4a50      	ldr	r2, [pc, #320]	; (8010d0c <Send+0x268>)
 8010bca:	589b      	ldr	r3, [r3, r2]
 8010bcc:	2280      	movs	r2, #128	; 0x80
 8010bce:	589a      	ldr	r2, [r3, r2]
 8010bd0:	0008      	movs	r0, r1
 8010bd2:	183b      	adds	r3, r7, r0
 8010bd4:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010bd6:	4a4c      	ldr	r2, [pc, #304]	; (8010d08 <Send+0x264>)
 8010bd8:	23fd      	movs	r3, #253	; 0xfd
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	5ad2      	ldrh	r2, [r2, r3]
 8010bde:	183b      	adds	r3, r7, r0
 8010be0:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010be2:	4b49      	ldr	r3, [pc, #292]	; (8010d08 <Send+0x264>)
 8010be4:	4a4a      	ldr	r2, [pc, #296]	; (8010d10 <Send+0x26c>)
 8010be6:	5a9a      	ldrh	r2, [r3, r2]
 8010be8:	183b      	adds	r3, r7, r0
 8010bea:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010bec:	4b46      	ldr	r3, [pc, #280]	; (8010d08 <Send+0x264>)
 8010bee:	4a47      	ldr	r2, [pc, #284]	; (8010d0c <Send+0x268>)
 8010bf0:	589b      	ldr	r3, [r3, r2]
 8010bf2:	2285      	movs	r2, #133	; 0x85
 8010bf4:	569a      	ldrsb	r2, [r3, r2]
 8010bf6:	183b      	adds	r3, r7, r0
 8010bf8:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010bfa:	4b43      	ldr	r3, [pc, #268]	; (8010d08 <Send+0x264>)
 8010bfc:	4a43      	ldr	r2, [pc, #268]	; (8010d0c <Send+0x268>)
 8010bfe:	589b      	ldr	r3, [r3, r2]
 8010c00:	2284      	movs	r2, #132	; 0x84
 8010c02:	569a      	ldrsb	r2, [r3, r2]
 8010c04:	183b      	adds	r3, r7, r0
 8010c06:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010c08:	4b3f      	ldr	r3, [pc, #252]	; (8010d08 <Send+0x264>)
 8010c0a:	4a40      	ldr	r2, [pc, #256]	; (8010d0c <Send+0x268>)
 8010c0c:	589b      	ldr	r3, [r3, r2]
 8010c0e:	22b8      	movs	r2, #184	; 0xb8
 8010c10:	5c9a      	ldrb	r2, [r3, r2]
 8010c12:	183b      	adds	r3, r7, r0
 8010c14:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8010c16:	4b3c      	ldr	r3, [pc, #240]	; (8010d08 <Send+0x264>)
 8010c18:	4a3c      	ldr	r2, [pc, #240]	; (8010d0c <Send+0x268>)
 8010c1a:	589b      	ldr	r3, [r3, r2]
 8010c1c:	781a      	ldrb	r2, [r3, #0]
 8010c1e:	183b      	adds	r3, r7, r0
 8010c20:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010c22:	4b39      	ldr	r3, [pc, #228]	; (8010d08 <Send+0x264>)
 8010c24:	4a39      	ldr	r2, [pc, #228]	; (8010d0c <Send+0x268>)
 8010c26:	589b      	ldr	r3, [r3, r2]
 8010c28:	3385      	adds	r3, #133	; 0x85
 8010c2a:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 8010c2c:	4b36      	ldr	r3, [pc, #216]	; (8010d08 <Send+0x264>)
 8010c2e:	4a37      	ldr	r2, [pc, #220]	; (8010d0c <Send+0x268>)
 8010c30:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010c32:	3384      	adds	r3, #132	; 0x84
 8010c34:	001a      	movs	r2, r3
 8010c36:	2328      	movs	r3, #40	; 0x28
 8010c38:	18fb      	adds	r3, r7, r3
 8010c3a:	1838      	adds	r0, r7, r0
 8010c3c:	f002 fff5 	bl	8013c2a <LoRaMacAdrCalcNext>
 8010c40:	0003      	movs	r3, r0
 8010c42:	0019      	movs	r1, r3
 8010c44:	0026      	movs	r6, r4
 8010c46:	193b      	adds	r3, r7, r4
 8010c48:	2201      	movs	r2, #1
 8010c4a:	400a      	ands	r2, r1
 8010c4c:	0190      	lsls	r0, r2, #6
 8010c4e:	781a      	ldrb	r2, [r3, #0]
 8010c50:	2140      	movs	r1, #64	; 0x40
 8010c52:	438a      	bics	r2, r1
 8010c54:	1c11      	adds	r1, r2, #0
 8010c56:	1c02      	adds	r2, r0, #0
 8010c58:	430a      	orrs	r2, r1
 8010c5a:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010c5c:	222f      	movs	r2, #47	; 0x2f
 8010c5e:	18bc      	adds	r4, r7, r2
 8010c60:	687d      	ldr	r5, [r7, #4]
 8010c62:	230b      	movs	r3, #11
 8010c64:	18fb      	adds	r3, r7, r3
 8010c66:	781a      	ldrb	r2, [r3, #0]
 8010c68:	19b9      	adds	r1, r7, r6
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	2308      	movs	r3, #8
 8010c6e:	18fb      	adds	r3, r7, r3
 8010c70:	881b      	ldrh	r3, [r3, #0]
 8010c72:	9300      	str	r3, [sp, #0]
 8010c74:	002b      	movs	r3, r5
 8010c76:	f000 fd05 	bl	8011684 <PrepareFrame>
 8010c7a:	0003      	movs	r3, r0
 8010c7c:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010c7e:	222f      	movs	r2, #47	; 0x2f
 8010c80:	18bb      	adds	r3, r7, r2
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d003      	beq.n	8010c90 <Send+0x1ec>
 8010c88:	18bb      	adds	r3, r7, r2
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	2b0a      	cmp	r3, #10
 8010c8e:	d10b      	bne.n	8010ca8 <Send+0x204>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8010c90:	232f      	movs	r3, #47	; 0x2f
 8010c92:	18fc      	adds	r4, r7, r3
 8010c94:	2340      	movs	r3, #64	; 0x40
 8010c96:	2208      	movs	r2, #8
 8010c98:	189b      	adds	r3, r3, r2
 8010c9a:	19db      	adds	r3, r3, r7
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	0018      	movs	r0, r3
 8010ca0:	f000 f9cc 	bl	801103c <ScheduleTx>
 8010ca4:	0003      	movs	r3, r0
 8010ca6:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010ca8:	232f      	movs	r3, #47	; 0x2f
 8010caa:	18fb      	adds	r3, r7, r3
 8010cac:	781b      	ldrb	r3, [r3, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d010      	beq.n	8010cd4 <Send+0x230>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8010cb2:	4b15      	ldr	r3, [pc, #84]	; (8010d08 <Send+0x264>)
 8010cb4:	4a15      	ldr	r2, [pc, #84]	; (8010d0c <Send+0x268>)
 8010cb6:	589b      	ldr	r3, [r3, r2]
 8010cb8:	222e      	movs	r2, #46	; 0x2e
 8010cba:	18ba      	adds	r2, r7, r2
 8010cbc:	2185      	movs	r1, #133	; 0x85
 8010cbe:	7812      	ldrb	r2, [r2, #0]
 8010cc0:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8010cc2:	4b11      	ldr	r3, [pc, #68]	; (8010d08 <Send+0x264>)
 8010cc4:	4a11      	ldr	r2, [pc, #68]	; (8010d0c <Send+0x268>)
 8010cc6:	589b      	ldr	r3, [r3, r2]
 8010cc8:	222d      	movs	r2, #45	; 0x2d
 8010cca:	18ba      	adds	r2, r7, r2
 8010ccc:	2184      	movs	r1, #132	; 0x84
 8010cce:	7812      	ldrb	r2, [r2, #0]
 8010cd0:	545a      	strb	r2, [r3, r1]
 8010cd2:	e012      	b.n	8010cfa <Send+0x256>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 8010cd4:	4b0c      	ldr	r3, [pc, #48]	; (8010d08 <Send+0x264>)
 8010cd6:	4a0d      	ldr	r2, [pc, #52]	; (8010d0c <Send+0x268>)
 8010cd8:	589a      	ldr	r2, [r3, r2]
 8010cda:	234c      	movs	r3, #76	; 0x4c
 8010cdc:	33ff      	adds	r3, #255	; 0xff
 8010cde:	2100      	movs	r1, #0
 8010ce0:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8010ce2:	4b09      	ldr	r3, [pc, #36]	; (8010d08 <Send+0x264>)
 8010ce4:	4a09      	ldr	r2, [pc, #36]	; (8010d0c <Send+0x268>)
 8010ce6:	589b      	ldr	r3, [r3, r2]
 8010ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cea:	2180      	movs	r1, #128	; 0x80
 8010cec:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010cee:	f003 fa91 	bl	8014214 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010cf2:	1e03      	subs	r3, r0, #0
 8010cf4:	d001      	beq.n	8010cfa <Send+0x256>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010cf6:	2313      	movs	r3, #19
 8010cf8:	e002      	b.n	8010d00 <Send+0x25c>
        }
    }
    return status;
 8010cfa:	232f      	movs	r3, #47	; 0x2f
 8010cfc:	18fb      	adds	r3, r7, r3
 8010cfe:	781b      	ldrb	r3, [r3, #0]
}
 8010d00:	0018      	movs	r0, r3
 8010d02:	46bd      	mov	sp, r7
 8010d04:	b00d      	add	sp, #52	; 0x34
 8010d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d08:	20000b6c 	.word	0x20000b6c
 8010d0c:	00000484 	.word	0x00000484
 8010d10:	000003f6 	.word	0x000003f6

08010d14 <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 8010d14:	b5b0      	push	{r4, r5, r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	0002      	movs	r2, r0
 8010d1c:	1dfb      	adds	r3, r7, #7
 8010d1e:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010d20:	230e      	movs	r3, #14
 8010d22:	18fb      	adds	r3, r7, r3
 8010d24:	2200      	movs	r2, #0
 8010d26:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 8010d28:	240c      	movs	r4, #12
 8010d2a:	193b      	adds	r3, r7, r4
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 8010d30:	250f      	movs	r5, #15
 8010d32:	197b      	adds	r3, r7, r5
 8010d34:	2201      	movs	r2, #1
 8010d36:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 8010d38:	1dfb      	adds	r3, r7, #7
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	2bff      	cmp	r3, #255	; 0xff
 8010d3e:	d130      	bne.n	8010da2 <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010d40:	2000      	movs	r0, #0
 8010d42:	f7fe ff7d 	bl	800fc40 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010d46:	4a21      	ldr	r2, [pc, #132]	; (8010dcc <SendReJoinReq+0xb8>)
 8010d48:	2382      	movs	r3, #130	; 0x82
 8010d4a:	005b      	lsls	r3, r3, #1
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010d50:	4a1e      	ldr	r2, [pc, #120]	; (8010dcc <SendReJoinReq+0xb8>)
 8010d52:	2384      	movs	r3, #132	; 0x84
 8010d54:	005b      	lsls	r3, r3, #1
 8010d56:	491e      	ldr	r1, [pc, #120]	; (8010dd0 <SendReJoinReq+0xbc>)
 8010d58:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010d5a:	4a1c      	ldr	r2, [pc, #112]	; (8010dcc <SendReJoinReq+0xb8>)
 8010d5c:	2386      	movs	r3, #134	; 0x86
 8010d5e:	005b      	lsls	r3, r3, #1
 8010d60:	21ff      	movs	r1, #255	; 0xff
 8010d62:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010d64:	193b      	adds	r3, r7, r4
 8010d66:	781a      	ldrb	r2, [r3, #0]
 8010d68:	211f      	movs	r1, #31
 8010d6a:	400a      	ands	r2, r1
 8010d6c:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010d6e:	193b      	adds	r3, r7, r4
 8010d70:	7819      	ldrb	r1, [r3, #0]
 8010d72:	4a16      	ldr	r2, [pc, #88]	; (8010dcc <SendReJoinReq+0xb8>)
 8010d74:	230e      	movs	r3, #14
 8010d76:	33ff      	adds	r3, #255	; 0xff
 8010d78:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010d7a:	f7fc fa3f 	bl	800d1fc <SecureElementGetJoinEui>
 8010d7e:	0001      	movs	r1, r0
 8010d80:	4b14      	ldr	r3, [pc, #80]	; (8010dd4 <SendReJoinReq+0xc0>)
 8010d82:	2208      	movs	r2, #8
 8010d84:	0018      	movs	r0, r3
 8010d86:	f007 fdc3 	bl	8018910 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010d8a:	f7fc fa13 	bl	800d1b4 <SecureElementGetDevEui>
 8010d8e:	0001      	movs	r1, r0
 8010d90:	4b11      	ldr	r3, [pc, #68]	; (8010dd8 <SendReJoinReq+0xc4>)
 8010d92:	2208      	movs	r2, #8
 8010d94:	0018      	movs	r0, r3
 8010d96:	f007 fdbb 	bl	8018910 <memcpy1>

            allowDelayedTx = false;
 8010d9a:	197b      	adds	r3, r7, r5
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	701a      	strb	r2, [r3, #0]

            break;
 8010da0:	e004      	b.n	8010dac <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010da2:	230e      	movs	r3, #14
 8010da4:	18fb      	adds	r3, r7, r3
 8010da6:	2202      	movs	r2, #2
 8010da8:	701a      	strb	r2, [r3, #0]
            break;
 8010daa:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010dac:	250e      	movs	r5, #14
 8010dae:	197c      	adds	r4, r7, r5
 8010db0:	230f      	movs	r3, #15
 8010db2:	18fb      	adds	r3, r7, r3
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	0018      	movs	r0, r3
 8010db8:	f000 f940 	bl	801103c <ScheduleTx>
 8010dbc:	0003      	movs	r3, r0
 8010dbe:	7023      	strb	r3, [r4, #0]
    return status;
 8010dc0:	197b      	adds	r3, r7, r5
 8010dc2:	781b      	ldrb	r3, [r3, #0]
}
 8010dc4:	0018      	movs	r0, r3
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	b004      	add	sp, #16
 8010dca:	bdb0      	pop	{r4, r5, r7, pc}
 8010dcc:	20000b6c 	.word	0x20000b6c
 8010dd0:	20000b6e 	.word	0x20000b6e
 8010dd4:	20000c7a 	.word	0x20000c7a
 8010dd8:	20000c82 	.word	0x20000c82

08010ddc <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010de0:	f002 ffa2 	bl	8013d28 <LoRaMacClassBIsBeaconExpected>
 8010de4:	1e03      	subs	r3, r0, #0
 8010de6:	d001      	beq.n	8010dec <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010de8:	230e      	movs	r3, #14
 8010dea:	e013      	b.n	8010e14 <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8010dec:	4b0b      	ldr	r3, [pc, #44]	; (8010e1c <CheckForClassBCollision+0x40>)
 8010dee:	4a0c      	ldr	r2, [pc, #48]	; (8010e20 <CheckForClassBCollision+0x44>)
 8010df0:	589b      	ldr	r3, [r3, r2]
 8010df2:	227c      	movs	r2, #124	; 0x7c
 8010df4:	5c9b      	ldrb	r3, [r3, r2]
 8010df6:	2b01      	cmp	r3, #1
 8010df8:	d10b      	bne.n	8010e12 <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010dfa:	f002 ff9b 	bl	8013d34 <LoRaMacClassBIsPingExpected>
 8010dfe:	1e03      	subs	r3, r0, #0
 8010e00:	d001      	beq.n	8010e06 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010e02:	230f      	movs	r3, #15
 8010e04:	e006      	b.n	8010e14 <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010e06:	f002 ff9b 	bl	8013d40 <LoRaMacClassBIsMulticastExpected>
 8010e0a:	1e03      	subs	r3, r0, #0
 8010e0c:	d001      	beq.n	8010e12 <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010e0e:	230f      	movs	r3, #15
 8010e10:	e000      	b.n	8010e14 <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 8010e12:	2300      	movs	r3, #0
}
 8010e14:	0018      	movs	r0, r3
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	46c0      	nop			; (mov r8, r8)
 8010e1c:	20000b6c 	.word	0x20000b6c
 8010e20:	00000484 	.word	0x00000484

08010e24 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010e24:	b5b0      	push	{r4, r5, r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010e2a:	4b44      	ldr	r3, [pc, #272]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010e2c:	4a44      	ldr	r2, [pc, #272]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010e2e:	589b      	ldr	r3, [r3, r2]
 8010e30:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010e32:	4b42      	ldr	r3, [pc, #264]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010e34:	4a42      	ldr	r2, [pc, #264]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010e36:	589b      	ldr	r3, [r3, r2]
 8010e38:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 8010e3a:	4b40      	ldr	r3, [pc, #256]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010e3c:	4a40      	ldr	r2, [pc, #256]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010e3e:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010e40:	22b9      	movs	r2, #185	; 0xb9
 8010e42:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010e44:	4b3d      	ldr	r3, [pc, #244]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010e46:	4a3e      	ldr	r2, [pc, #248]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010e48:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010e4a:	2285      	movs	r2, #133	; 0x85
 8010e4c:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8010e4e:	4b3b      	ldr	r3, [pc, #236]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010e50:	4d3b      	ldr	r5, [pc, #236]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010e52:	595b      	ldr	r3, [r3, r5]
 8010e54:	25a5      	movs	r5, #165	; 0xa5
 8010e56:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8010e58:	b25b      	sxtb	r3, r3
 8010e5a:	f005 faae 	bl	80163ba <RegionApplyDrOffset>
 8010e5e:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010e60:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8010e62:	4b36      	ldr	r3, [pc, #216]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010e64:	4a36      	ldr	r2, [pc, #216]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010e66:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010e68:	228c      	movs	r2, #140	; 0x8c
 8010e6a:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8010e6c:	4b33      	ldr	r3, [pc, #204]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010e6e:	4834      	ldr	r0, [pc, #208]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010e70:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010e72:	2088      	movs	r0, #136	; 0x88
 8010e74:	5818      	ldr	r0, [r3, r0]
 8010e76:	4b33      	ldr	r3, [pc, #204]	; (8010f44 <ComputeRxWindowParameters+0x120>)
 8010e78:	9300      	str	r3, [sp, #0]
 8010e7a:	0003      	movs	r3, r0
 8010e7c:	0020      	movs	r0, r4
 8010e7e:	f005 f97a 	bl	8016176 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010e82:	4b2e      	ldr	r3, [pc, #184]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010e84:	4a2e      	ldr	r2, [pc, #184]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010e86:	589b      	ldr	r3, [r3, r2]
 8010e88:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8010e8a:	4b2c      	ldr	r3, [pc, #176]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010e8c:	4a2c      	ldr	r2, [pc, #176]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010e8e:	589b      	ldr	r3, [r3, r2]
 8010e90:	22ac      	movs	r2, #172	; 0xac
 8010e92:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010e94:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8010e96:	4b29      	ldr	r3, [pc, #164]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010e98:	4a29      	ldr	r2, [pc, #164]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010e9a:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010e9c:	228c      	movs	r2, #140	; 0x8c
 8010e9e:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8010ea0:	4b26      	ldr	r3, [pc, #152]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010ea2:	4c27      	ldr	r4, [pc, #156]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010ea4:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010ea6:	2488      	movs	r4, #136	; 0x88
 8010ea8:	591c      	ldr	r4, [r3, r4]
 8010eaa:	4b27      	ldr	r3, [pc, #156]	; (8010f48 <ComputeRxWindowParameters+0x124>)
 8010eac:	9300      	str	r3, [sp, #0]
 8010eae:	0023      	movs	r3, r4
 8010eb0:	f005 f961 	bl	8016176 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010eb4:	4b21      	ldr	r3, [pc, #132]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010eb6:	4a22      	ldr	r2, [pc, #136]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010eb8:	589b      	ldr	r3, [r3, r2]
 8010eba:	2294      	movs	r2, #148	; 0x94
 8010ebc:	589b      	ldr	r3, [r3, r2]
 8010ebe:	491f      	ldr	r1, [pc, #124]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010ec0:	22f1      	movs	r2, #241	; 0xf1
 8010ec2:	0092      	lsls	r2, r2, #2
 8010ec4:	588a      	ldr	r2, [r1, r2]
 8010ec6:	1899      	adds	r1, r3, r2
 8010ec8:	4a1c      	ldr	r2, [pc, #112]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010eca:	23ec      	movs	r3, #236	; 0xec
 8010ecc:	009b      	lsls	r3, r3, #2
 8010ece:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010ed0:	4b1a      	ldr	r3, [pc, #104]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010ed2:	4a1b      	ldr	r2, [pc, #108]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010ed4:	589b      	ldr	r3, [r3, r2]
 8010ed6:	2298      	movs	r2, #152	; 0x98
 8010ed8:	589b      	ldr	r3, [r3, r2]
 8010eda:	4918      	ldr	r1, [pc, #96]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010edc:	22f6      	movs	r2, #246	; 0xf6
 8010ede:	0092      	lsls	r2, r2, #2
 8010ee0:	588a      	ldr	r2, [r1, r2]
 8010ee2:	1899      	adds	r1, r3, r2
 8010ee4:	4a15      	ldr	r2, [pc, #84]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010ee6:	23ed      	movs	r3, #237	; 0xed
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8010eec:	4b13      	ldr	r3, [pc, #76]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010eee:	4a14      	ldr	r2, [pc, #80]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010ef0:	589a      	ldr	r2, [r3, r2]
 8010ef2:	23b2      	movs	r3, #178	; 0xb2
 8010ef4:	005b      	lsls	r3, r3, #1
 8010ef6:	5cd3      	ldrb	r3, [r2, r3]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d11b      	bne.n	8010f34 <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010efc:	4b0f      	ldr	r3, [pc, #60]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010efe:	4a10      	ldr	r2, [pc, #64]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010f00:	589b      	ldr	r3, [r3, r2]
 8010f02:	229c      	movs	r2, #156	; 0x9c
 8010f04:	589b      	ldr	r3, [r3, r2]
 8010f06:	490d      	ldr	r1, [pc, #52]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010f08:	22f1      	movs	r2, #241	; 0xf1
 8010f0a:	0092      	lsls	r2, r2, #2
 8010f0c:	588a      	ldr	r2, [r1, r2]
 8010f0e:	1899      	adds	r1, r3, r2
 8010f10:	4a0a      	ldr	r2, [pc, #40]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010f12:	23ec      	movs	r3, #236	; 0xec
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010f18:	4b08      	ldr	r3, [pc, #32]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010f1a:	4a09      	ldr	r2, [pc, #36]	; (8010f40 <ComputeRxWindowParameters+0x11c>)
 8010f1c:	589b      	ldr	r3, [r3, r2]
 8010f1e:	22a0      	movs	r2, #160	; 0xa0
 8010f20:	589b      	ldr	r3, [r3, r2]
 8010f22:	4906      	ldr	r1, [pc, #24]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010f24:	22f6      	movs	r2, #246	; 0xf6
 8010f26:	0092      	lsls	r2, r2, #2
 8010f28:	588a      	ldr	r2, [r1, r2]
 8010f2a:	1899      	adds	r1, r3, r2
 8010f2c:	4a03      	ldr	r2, [pc, #12]	; (8010f3c <ComputeRxWindowParameters+0x118>)
 8010f2e:	23ed      	movs	r3, #237	; 0xed
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	50d1      	str	r1, [r2, r3]
    }
}
 8010f34:	46c0      	nop			; (mov r8, r8)
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bdb0      	pop	{r4, r5, r7, pc}
 8010f3a:	46c0      	nop			; (mov r8, r8)
 8010f3c:	20000b6c 	.word	0x20000b6c
 8010f40:	00000484 	.word	0x00000484
 8010f44:	20000f24 	.word	0x20000f24
 8010f48:	20000f38 	.word	0x20000f38

08010f4c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010f52:	2300      	movs	r3, #0
 8010f54:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8010f56:	4b15      	ldr	r3, [pc, #84]	; (8010fac <VerifyTxFrame+0x60>)
 8010f58:	4a15      	ldr	r2, [pc, #84]	; (8010fb0 <VerifyTxFrame+0x64>)
 8010f5a:	589a      	ldr	r2, [r3, r2]
 8010f5c:	23b2      	movs	r3, #178	; 0xb2
 8010f5e:	005b      	lsls	r3, r3, #1
 8010f60:	5cd3      	ldrb	r3, [r2, r3]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d01d      	beq.n	8010fa2 <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010f66:	1d3b      	adds	r3, r7, #4
 8010f68:	0018      	movs	r0, r3
 8010f6a:	f003 f99f 	bl	80142ac <LoRaMacCommandsGetSizeSerializedCmds>
 8010f6e:	1e03      	subs	r3, r0, #0
 8010f70:	d001      	beq.n	8010f76 <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010f72:	2313      	movs	r3, #19
 8010f74:	e016      	b.n	8010fa4 <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8010f76:	4b0d      	ldr	r3, [pc, #52]	; (8010fac <VerifyTxFrame+0x60>)
 8010f78:	4a0e      	ldr	r2, [pc, #56]	; (8010fb4 <VerifyTxFrame+0x68>)
 8010f7a:	5c98      	ldrb	r0, [r3, r2]
 8010f7c:	4b0b      	ldr	r3, [pc, #44]	; (8010fac <VerifyTxFrame+0x60>)
 8010f7e:	4a0c      	ldr	r2, [pc, #48]	; (8010fb0 <VerifyTxFrame+0x64>)
 8010f80:	589b      	ldr	r3, [r3, r2]
 8010f82:	2285      	movs	r2, #133	; 0x85
 8010f84:	569b      	ldrsb	r3, [r3, r2]
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	b2d2      	uxtb	r2, r2
 8010f8a:	0019      	movs	r1, r3
 8010f8c:	f7fe ffb2 	bl	800fef4 <ValidatePayloadLength>
 8010f90:	0003      	movs	r3, r0
 8010f92:	001a      	movs	r2, r3
 8010f94:	2301      	movs	r3, #1
 8010f96:	4053      	eors	r3, r2
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d001      	beq.n	8010fa2 <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010f9e:	2308      	movs	r3, #8
 8010fa0:	e000      	b.n	8010fa4 <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 8010fa2:	2300      	movs	r3, #0
}
 8010fa4:	0018      	movs	r0, r3
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	b002      	add	sp, #8
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	20000b6c 	.word	0x20000b6c
 8010fb0:	00000484 	.word	0x00000484
 8010fb4:	00000237 	.word	0x00000237

08010fb8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010fb8:	b590      	push	{r4, r7, lr}
 8010fba:	b083      	sub	sp, #12
 8010fbc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010fbe:	4a1d      	ldr	r2, [pc, #116]	; (8011034 <SerializeTxFrame+0x7c>)
 8010fc0:	2382      	movs	r3, #130	; 0x82
 8010fc2:	005b      	lsls	r3, r3, #1
 8010fc4:	5cd3      	ldrb	r3, [r2, r3]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d002      	beq.n	8010fd0 <SerializeTxFrame+0x18>
 8010fca:	2b04      	cmp	r3, #4
 8010fcc:	d015      	beq.n	8010ffa <SerializeTxFrame+0x42>
 8010fce:	e029      	b.n	8011024 <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010fd0:	1dfc      	adds	r4, r7, #7
 8010fd2:	4b19      	ldr	r3, [pc, #100]	; (8011038 <SerializeTxFrame+0x80>)
 8010fd4:	0018      	movs	r0, r3
 8010fd6:	f004 fe49 	bl	8015c6c <LoRaMacSerializerJoinRequest>
 8010fda:	0003      	movs	r3, r0
 8010fdc:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010fde:	1dfb      	adds	r3, r7, #7
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d001      	beq.n	8010fea <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010fe6:	2311      	movs	r3, #17
 8010fe8:	e01f      	b.n	801102a <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010fea:	4a12      	ldr	r2, [pc, #72]	; (8011034 <SerializeTxFrame+0x7c>)
 8010fec:	2386      	movs	r3, #134	; 0x86
 8010fee:	005b      	lsls	r3, r3, #1
 8010ff0:	5cd3      	ldrb	r3, [r2, r3]
 8010ff2:	b29a      	uxth	r2, r3
 8010ff4:	4b0f      	ldr	r3, [pc, #60]	; (8011034 <SerializeTxFrame+0x7c>)
 8010ff6:	801a      	strh	r2, [r3, #0]
            break;
 8010ff8:	e016      	b.n	8011028 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010ffa:	1dfc      	adds	r4, r7, #7
 8010ffc:	4b0e      	ldr	r3, [pc, #56]	; (8011038 <SerializeTxFrame+0x80>)
 8010ffe:	0018      	movs	r0, r3
 8011000:	f004 fecf 	bl	8015da2 <LoRaMacSerializerData>
 8011004:	0003      	movs	r3, r0
 8011006:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011008:	1dfb      	adds	r3, r7, #7
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d001      	beq.n	8011014 <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011010:	2311      	movs	r3, #17
 8011012:	e00a      	b.n	801102a <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011014:	4a07      	ldr	r2, [pc, #28]	; (8011034 <SerializeTxFrame+0x7c>)
 8011016:	2386      	movs	r3, #134	; 0x86
 8011018:	005b      	lsls	r3, r3, #1
 801101a:	5cd3      	ldrb	r3, [r2, r3]
 801101c:	b29a      	uxth	r2, r3
 801101e:	4b05      	ldr	r3, [pc, #20]	; (8011034 <SerializeTxFrame+0x7c>)
 8011020:	801a      	strh	r2, [r3, #0]
            break;
 8011022:	e001      	b.n	8011028 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011024:	2303      	movs	r3, #3
 8011026:	e000      	b.n	801102a <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 8011028:	2300      	movs	r3, #0
}
 801102a:	0018      	movs	r0, r3
 801102c:	46bd      	mov	sp, r7
 801102e:	b003      	add	sp, #12
 8011030:	bd90      	pop	{r4, r7, pc}
 8011032:	46c0      	nop			; (mov r8, r8)
 8011034:	20000b6c 	.word	0x20000b6c
 8011038:	20000c74 	.word	0x20000c74

0801103c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 801103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801103e:	b091      	sub	sp, #68	; 0x44
 8011040:	af02      	add	r7, sp, #8
 8011042:	0002      	movs	r2, r0
 8011044:	230f      	movs	r3, #15
 8011046:	18fb      	adds	r3, r7, r3
 8011048:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801104a:	2537      	movs	r5, #55	; 0x37
 801104c:	197b      	adds	r3, r7, r5
 801104e:	2203      	movs	r2, #3
 8011050:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011052:	197c      	adds	r4, r7, r5
 8011054:	f7ff fec2 	bl	8010ddc <CheckForClassBCollision>
 8011058:	0003      	movs	r3, r0
 801105a:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 801105c:	002a      	movs	r2, r5
 801105e:	18bb      	adds	r3, r7, r2
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d002      	beq.n	801106c <ScheduleTx+0x30>
    {
        return status;
 8011066:	18bb      	adds	r3, r7, r2
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	e0c3      	b.n	80111f4 <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 801106c:	f000 f940 	bl	80112f0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011070:	2537      	movs	r5, #55	; 0x37
 8011072:	197c      	adds	r4, r7, r5
 8011074:	f7ff ffa0 	bl	8010fb8 <SerializeTxFrame>
 8011078:	0003      	movs	r3, r0
 801107a:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 801107c:	002a      	movs	r2, r5
 801107e:	18bb      	adds	r3, r7, r2
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d002      	beq.n	801108c <ScheduleTx+0x50>
    {
        return status;
 8011086:	18bb      	adds	r3, r7, r2
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	e0b3      	b.n	80111f4 <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 801108c:	4b5b      	ldr	r3, [pc, #364]	; (80111fc <ScheduleTx+0x1c0>)
 801108e:	4a5c      	ldr	r2, [pc, #368]	; (8011200 <ScheduleTx+0x1c4>)
 8011090:	589a      	ldr	r2, [r3, r2]
 8011092:	23aa      	movs	r3, #170	; 0xaa
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	58d2      	ldr	r2, [r2, r3]
 8011098:	2414      	movs	r4, #20
 801109a:	193b      	adds	r3, r7, r4
 801109c:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801109e:	4b57      	ldr	r3, [pc, #348]	; (80111fc <ScheduleTx+0x1c0>)
 80110a0:	4a57      	ldr	r2, [pc, #348]	; (8011200 <ScheduleTx+0x1c4>)
 80110a2:	589b      	ldr	r3, [r3, r2]
 80110a4:	2285      	movs	r2, #133	; 0x85
 80110a6:	569a      	ldrsb	r2, [r3, r2]
 80110a8:	193b      	adds	r3, r7, r4
 80110aa:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80110ac:	4b53      	ldr	r3, [pc, #332]	; (80111fc <ScheduleTx+0x1c0>)
 80110ae:	4a54      	ldr	r2, [pc, #336]	; (8011200 <ScheduleTx+0x1c4>)
 80110b0:	589b      	ldr	r3, [r3, r2]
 80110b2:	22c9      	movs	r2, #201	; 0xc9
 80110b4:	5c9a      	ldrb	r2, [r3, r2]
 80110b6:	193b      	adds	r3, r7, r4
 80110b8:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 80110ba:	232c      	movs	r3, #44	; 0x2c
 80110bc:	18fb      	adds	r3, r7, r3
 80110be:	0018      	movs	r0, r3
 80110c0:	f00a febe 	bl	801be40 <SysTimeGetMcuTime>
 80110c4:	4b4d      	ldr	r3, [pc, #308]	; (80111fc <ScheduleTx+0x1c0>)
 80110c6:	4a4e      	ldr	r2, [pc, #312]	; (8011200 <ScheduleTx+0x1c4>)
 80110c8:	5898      	ldr	r0, [r3, r2]
 80110ca:	193d      	adds	r5, r7, r4
 80110cc:	003e      	movs	r6, r7
 80110ce:	23ac      	movs	r3, #172	; 0xac
 80110d0:	0059      	lsls	r1, r3, #1
 80110d2:	232c      	movs	r3, #44	; 0x2c
 80110d4:	18fa      	adds	r2, r7, r3
 80110d6:	2404      	movs	r4, #4
 80110d8:	1843      	adds	r3, r0, r1
 80110da:	191c      	adds	r4, r3, r4
 80110dc:	466b      	mov	r3, sp
 80110de:	6824      	ldr	r4, [r4, #0]
 80110e0:	601c      	str	r4, [r3, #0]
 80110e2:	5843      	ldr	r3, [r0, r1]
 80110e4:	6811      	ldr	r1, [r2, #0]
 80110e6:	6852      	ldr	r2, [r2, #4]
 80110e8:	0030      	movs	r0, r6
 80110ea:	f00a fde1 	bl	801bcb0 <SysTimeSub>
 80110ee:	003a      	movs	r2, r7
 80110f0:	002b      	movs	r3, r5
 80110f2:	330c      	adds	r3, #12
 80110f4:	ca21      	ldmia	r2!, {r0, r5}
 80110f6:	c321      	stmia	r3!, {r0, r5}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80110f8:	4b40      	ldr	r3, [pc, #256]	; (80111fc <ScheduleTx+0x1c0>)
 80110fa:	4a41      	ldr	r2, [pc, #260]	; (8011200 <ScheduleTx+0x1c4>)
 80110fc:	589a      	ldr	r2, [r3, r2]
 80110fe:	23a8      	movs	r3, #168	; 0xa8
 8011100:	005b      	lsls	r3, r3, #1
 8011102:	58d2      	ldr	r2, [r2, r3]
 8011104:	2114      	movs	r1, #20
 8011106:	187b      	adds	r3, r7, r1
 8011108:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 801110a:	187b      	adds	r3, r7, r1
 801110c:	2200      	movs	r2, #0
 801110e:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8011110:	187b      	adds	r3, r7, r1
 8011112:	2201      	movs	r2, #1
 8011114:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011116:	4b39      	ldr	r3, [pc, #228]	; (80111fc <ScheduleTx+0x1c0>)
 8011118:	881a      	ldrh	r2, [r3, #0]
 801111a:	187b      	adds	r3, r7, r1
 801111c:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 801111e:	4b37      	ldr	r3, [pc, #220]	; (80111fc <ScheduleTx+0x1c0>)
 8011120:	4a37      	ldr	r2, [pc, #220]	; (8011200 <ScheduleTx+0x1c4>)
 8011122:	589a      	ldr	r2, [r3, r2]
 8011124:	23b2      	movs	r3, #178	; 0xb2
 8011126:	005b      	lsls	r3, r3, #1
 8011128:	5cd3      	ldrb	r3, [r2, r3]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d105      	bne.n	801113a <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 801112e:	187b      	adds	r3, r7, r1
 8011130:	2201      	movs	r2, #1
 8011132:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 8011134:	187b      	adds	r3, r7, r1
 8011136:	2200      	movs	r2, #0
 8011138:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 801113a:	4b30      	ldr	r3, [pc, #192]	; (80111fc <ScheduleTx+0x1c0>)
 801113c:	4a30      	ldr	r2, [pc, #192]	; (8011200 <ScheduleTx+0x1c4>)
 801113e:	589b      	ldr	r3, [r3, r2]
 8011140:	7818      	ldrb	r0, [r3, #0]
 8011142:	4b2e      	ldr	r3, [pc, #184]	; (80111fc <ScheduleTx+0x1c0>)
 8011144:	4a2e      	ldr	r2, [pc, #184]	; (8011200 <ScheduleTx+0x1c4>)
 8011146:	589b      	ldr	r3, [r3, r2]
 8011148:	3355      	adds	r3, #85	; 0x55
 801114a:	33ff      	adds	r3, #255	; 0xff
 801114c:	2637      	movs	r6, #55	; 0x37
 801114e:	19bc      	adds	r4, r7, r6
 8011150:	4d2c      	ldr	r5, [pc, #176]	; (8011204 <ScheduleTx+0x1c8>)
 8011152:	4a2d      	ldr	r2, [pc, #180]	; (8011208 <ScheduleTx+0x1cc>)
 8011154:	2114      	movs	r1, #20
 8011156:	1879      	adds	r1, r7, r1
 8011158:	9300      	str	r3, [sp, #0]
 801115a:	002b      	movs	r3, r5
 801115c:	f005 f8fd 	bl	801635a <RegionNextChannel>
 8011160:	0003      	movs	r3, r0
 8011162:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 8011164:	19bb      	adds	r3, r7, r6
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d02c      	beq.n	80111c6 <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 801116c:	19bb      	adds	r3, r7, r6
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	2b0b      	cmp	r3, #11
 8011172:	d124      	bne.n	80111be <ScheduleTx+0x182>
 8011174:	230f      	movs	r3, #15
 8011176:	18fb      	adds	r3, r7, r3
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d01f      	beq.n	80111be <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 801117e:	4a1f      	ldr	r2, [pc, #124]	; (80111fc <ScheduleTx+0x1c0>)
 8011180:	2391      	movs	r3, #145	; 0x91
 8011182:	00db      	lsls	r3, r3, #3
 8011184:	58d3      	ldr	r3, [r2, r3]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d017      	beq.n	80111ba <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 801118a:	4a1c      	ldr	r2, [pc, #112]	; (80111fc <ScheduleTx+0x1c0>)
 801118c:	23d0      	movs	r3, #208	; 0xd0
 801118e:	009b      	lsls	r3, r3, #2
 8011190:	58d3      	ldr	r3, [r2, r3]
 8011192:	2220      	movs	r2, #32
 8011194:	431a      	orrs	r2, r3
 8011196:	0011      	movs	r1, r2
 8011198:	4a18      	ldr	r2, [pc, #96]	; (80111fc <ScheduleTx+0x1c0>)
 801119a:	23d0      	movs	r3, #208	; 0xd0
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80111a0:	4a16      	ldr	r2, [pc, #88]	; (80111fc <ScheduleTx+0x1c0>)
 80111a2:	2391      	movs	r3, #145	; 0x91
 80111a4:	00db      	lsls	r3, r3, #3
 80111a6:	58d2      	ldr	r2, [r2, r3]
 80111a8:	4b18      	ldr	r3, [pc, #96]	; (801120c <ScheduleTx+0x1d0>)
 80111aa:	0011      	movs	r1, r2
 80111ac:	0018      	movs	r0, r3
 80111ae:	f00a ff9f 	bl	801c0f0 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80111b2:	4b16      	ldr	r3, [pc, #88]	; (801120c <ScheduleTx+0x1d0>)
 80111b4:	0018      	movs	r0, r3
 80111b6:	f00a feab 	bl	801bf10 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 80111ba:	2300      	movs	r3, #0
 80111bc:	e01a      	b.n	80111f4 <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80111be:	2337      	movs	r3, #55	; 0x37
 80111c0:	18fb      	adds	r3, r7, r3
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	e016      	b.n	80111f4 <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80111c6:	f7ff fe2d 	bl	8010e24 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80111ca:	2537      	movs	r5, #55	; 0x37
 80111cc:	197c      	adds	r4, r7, r5
 80111ce:	f7ff febd 	bl	8010f4c <VerifyTxFrame>
 80111d2:	0003      	movs	r3, r0
 80111d4:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80111d6:	002a      	movs	r2, r5
 80111d8:	18bb      	adds	r3, r7, r2
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d002      	beq.n	80111e6 <ScheduleTx+0x1aa>
    {
        return status;
 80111e0:	18bb      	adds	r3, r7, r2
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	e006      	b.n	80111f4 <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 80111e6:	4b05      	ldr	r3, [pc, #20]	; (80111fc <ScheduleTx+0x1c0>)
 80111e8:	4a09      	ldr	r2, [pc, #36]	; (8011210 <ScheduleTx+0x1d4>)
 80111ea:	5c9b      	ldrb	r3, [r3, r2]
 80111ec:	0018      	movs	r0, r3
 80111ee:	f000 fb99 	bl	8011924 <SendFrameOnChannel>
 80111f2:	0003      	movs	r3, r0
}
 80111f4:	0018      	movs	r0, r3
 80111f6:	46bd      	mov	sp, r7
 80111f8:	b00f      	add	sp, #60	; 0x3c
 80111fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111fc:	20000b6c 	.word	0x20000b6c
 8011200:	00000484 	.word	0x00000484
 8011204:	20000ff4 	.word	0x20000ff4
 8011208:	20000f81 	.word	0x20000f81
 801120c:	20000ed4 	.word	0x20000ed4
 8011210:	00000415 	.word	0x00000415

08011214 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011216:	b085      	sub	sp, #20
 8011218:	af00      	add	r7, sp, #0
 801121a:	0002      	movs	r2, r0
 801121c:	1dfb      	adds	r3, r7, #7
 801121e:	701a      	strb	r2, [r3, #0]
 8011220:	1dbb      	adds	r3, r7, #6
 8011222:	1c0a      	adds	r2, r1, #0
 8011224:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011226:	230f      	movs	r3, #15
 8011228:	18fb      	adds	r3, r7, r3
 801122a:	2213      	movs	r2, #19
 801122c:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 801122e:	2300      	movs	r3, #0
 8011230:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011232:	4a2c      	ldr	r2, [pc, #176]	; (80112e4 <SecureFrame+0xd0>)
 8011234:	2382      	movs	r3, #130	; 0x82
 8011236:	005b      	lsls	r3, r3, #1
 8011238:	5cd3      	ldrb	r3, [r2, r3]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d002      	beq.n	8011244 <SecureFrame+0x30>
 801123e:	2b04      	cmp	r3, #4
 8011240:	d016      	beq.n	8011270 <SecureFrame+0x5c>
 8011242:	e047      	b.n	80112d4 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011244:	250f      	movs	r5, #15
 8011246:	197c      	adds	r4, r7, r5
 8011248:	4b27      	ldr	r3, [pc, #156]	; (80112e8 <SecureFrame+0xd4>)
 801124a:	0018      	movs	r0, r3
 801124c:	f004 f848 	bl	80152e0 <LoRaMacCryptoPrepareJoinRequest>
 8011250:	0003      	movs	r3, r0
 8011252:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011254:	197b      	adds	r3, r7, r5
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d001      	beq.n	8011260 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801125c:	2311      	movs	r3, #17
 801125e:	e03c      	b.n	80112da <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011260:	4a20      	ldr	r2, [pc, #128]	; (80112e4 <SecureFrame+0xd0>)
 8011262:	2386      	movs	r3, #134	; 0x86
 8011264:	005b      	lsls	r3, r3, #1
 8011266:	5cd3      	ldrb	r3, [r2, r3]
 8011268:	b29a      	uxth	r2, r3
 801126a:	4b1e      	ldr	r3, [pc, #120]	; (80112e4 <SecureFrame+0xd0>)
 801126c:	801a      	strh	r2, [r3, #0]
            break;
 801126e:	e033      	b.n	80112d8 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011270:	2308      	movs	r3, #8
 8011272:	18fb      	adds	r3, r7, r3
 8011274:	0018      	movs	r0, r3
 8011276:	f003 ff4d 	bl	8015114 <LoRaMacCryptoGetFCntUp>
 801127a:	1e03      	subs	r3, r0, #0
 801127c:	d001      	beq.n	8011282 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801127e:	2312      	movs	r3, #18
 8011280:	e02b      	b.n	80112da <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011282:	4a18      	ldr	r2, [pc, #96]	; (80112e4 <SecureFrame+0xd0>)
 8011284:	2382      	movs	r3, #130	; 0x82
 8011286:	00db      	lsls	r3, r3, #3
 8011288:	5cd3      	ldrb	r3, [r2, r3]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d104      	bne.n	8011298 <SecureFrame+0x84>
 801128e:	4b15      	ldr	r3, [pc, #84]	; (80112e4 <SecureFrame+0xd0>)
 8011290:	4a16      	ldr	r2, [pc, #88]	; (80112ec <SecureFrame+0xd8>)
 8011292:	5c9b      	ldrb	r3, [r3, r2]
 8011294:	2b01      	cmp	r3, #1
 8011296:	d902      	bls.n	801129e <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	3b01      	subs	r3, #1
 801129c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 801129e:	68b8      	ldr	r0, [r7, #8]
 80112a0:	260f      	movs	r6, #15
 80112a2:	19bc      	adds	r4, r7, r6
 80112a4:	4d10      	ldr	r5, [pc, #64]	; (80112e8 <SecureFrame+0xd4>)
 80112a6:	1dbb      	adds	r3, r7, #6
 80112a8:	781a      	ldrb	r2, [r3, #0]
 80112aa:	1dfb      	adds	r3, r7, #7
 80112ac:	7819      	ldrb	r1, [r3, #0]
 80112ae:	002b      	movs	r3, r5
 80112b0:	f004 f920 	bl	80154f4 <LoRaMacCryptoSecureMessage>
 80112b4:	0003      	movs	r3, r0
 80112b6:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80112b8:	19bb      	adds	r3, r7, r6
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d001      	beq.n	80112c4 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80112c0:	2311      	movs	r3, #17
 80112c2:	e00a      	b.n	80112da <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80112c4:	4a07      	ldr	r2, [pc, #28]	; (80112e4 <SecureFrame+0xd0>)
 80112c6:	2386      	movs	r3, #134	; 0x86
 80112c8:	005b      	lsls	r3, r3, #1
 80112ca:	5cd3      	ldrb	r3, [r2, r3]
 80112cc:	b29a      	uxth	r2, r3
 80112ce:	4b05      	ldr	r3, [pc, #20]	; (80112e4 <SecureFrame+0xd0>)
 80112d0:	801a      	strh	r2, [r3, #0]
            break;
 80112d2:	e001      	b.n	80112d8 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80112d4:	2303      	movs	r3, #3
 80112d6:	e000      	b.n	80112da <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 80112d8:	2300      	movs	r3, #0
}
 80112da:	0018      	movs	r0, r3
 80112dc:	46bd      	mov	sp, r7
 80112de:	b005      	add	sp, #20
 80112e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112e2:	46c0      	nop			; (mov r8, r8)
 80112e4:	20000b6c 	.word	0x20000b6c
 80112e8:	20000c74 	.word	0x20000c74
 80112ec:	00000412 	.word	0x00000412

080112f0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 80112f4:	4b0e      	ldr	r3, [pc, #56]	; (8011330 <CalculateBackOff+0x40>)
 80112f6:	4a0f      	ldr	r2, [pc, #60]	; (8011334 <CalculateBackOff+0x44>)
 80112f8:	589a      	ldr	r2, [r3, r2]
 80112fa:	23aa      	movs	r3, #170	; 0xaa
 80112fc:	005b      	lsls	r3, r3, #1
 80112fe:	58d3      	ldr	r3, [r2, r3]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d111      	bne.n	8011328 <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011304:	4b0a      	ldr	r3, [pc, #40]	; (8011330 <CalculateBackOff+0x40>)
 8011306:	4a0b      	ldr	r2, [pc, #44]	; (8011334 <CalculateBackOff+0x44>)
 8011308:	589a      	ldr	r2, [r3, r2]
 801130a:	23a6      	movs	r3, #166	; 0xa6
 801130c:	005b      	lsls	r3, r3, #1
 801130e:	5ad3      	ldrh	r3, [r2, r3]
 8011310:	3b01      	subs	r3, #1
 8011312:	4907      	ldr	r1, [pc, #28]	; (8011330 <CalculateBackOff+0x40>)
 8011314:	2283      	movs	r2, #131	; 0x83
 8011316:	00d2      	lsls	r2, r2, #3
 8011318:	5889      	ldr	r1, [r1, r2]
 801131a:	4a05      	ldr	r2, [pc, #20]	; (8011330 <CalculateBackOff+0x40>)
 801131c:	4805      	ldr	r0, [pc, #20]	; (8011334 <CalculateBackOff+0x44>)
 801131e:	5812      	ldr	r2, [r2, r0]
 8011320:	4359      	muls	r1, r3
 8011322:	23aa      	movs	r3, #170	; 0xaa
 8011324:	005b      	lsls	r3, r3, #1
 8011326:	50d1      	str	r1, [r2, r3]
    }
}
 8011328:	46c0      	nop			; (mov r8, r8)
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	46c0      	nop			; (mov r8, r8)
 8011330:	20000b6c 	.word	0x20000b6c
 8011334:	00000484 	.word	0x00000484

08011338 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	1d3b      	adds	r3, r7, #4
 8011340:	7019      	strb	r1, [r3, #0]
 8011342:	0011      	movs	r1, r2
 8011344:	1dfb      	adds	r3, r7, #7
 8011346:	1c02      	adds	r2, r0, #0
 8011348:	701a      	strb	r2, [r3, #0]
 801134a:	1dbb      	adds	r3, r7, #6
 801134c:	1c0a      	adds	r2, r1, #0
 801134e:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011350:	1dfb      	adds	r3, r7, #7
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d003      	beq.n	8011360 <RemoveMacCommands+0x28>
 8011358:	1dfb      	adds	r3, r7, #7
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	2b01      	cmp	r3, #1
 801135e:	d10f      	bne.n	8011380 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011360:	1dbb      	adds	r3, r7, #6
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	2b01      	cmp	r3, #1
 8011366:	d109      	bne.n	801137c <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011368:	1d3b      	adds	r3, r7, #4
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	2220      	movs	r2, #32
 801136e:	4013      	ands	r3, r2
 8011370:	b2db      	uxtb	r3, r3
 8011372:	2b00      	cmp	r3, #0
 8011374:	d004      	beq.n	8011380 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011376:	f002 ff75 	bl	8014264 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801137a:	e001      	b.n	8011380 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 801137c:	f002 ff72 	bl	8014264 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011380:	46c0      	nop			; (mov r8, r8)
 8011382:	46bd      	mov	sp, r7
 8011384:	b002      	add	sp, #8
 8011386:	bd80      	pop	{r7, pc}

08011388 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011388:	b590      	push	{r4, r7, lr}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 801138e:	4b72      	ldr	r3, [pc, #456]	; (8011558 <ResetMacParameters+0x1d0>)
 8011390:	4a72      	ldr	r2, [pc, #456]	; (801155c <ResetMacParameters+0x1d4>)
 8011392:	589a      	ldr	r2, [r3, r2]
 8011394:	23b2      	movs	r3, #178	; 0xb2
 8011396:	005b      	lsls	r3, r3, #1
 8011398:	2100      	movs	r1, #0
 801139a:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 801139c:	4b6e      	ldr	r3, [pc, #440]	; (8011558 <ResetMacParameters+0x1d0>)
 801139e:	4a6f      	ldr	r2, [pc, #444]	; (801155c <ResetMacParameters+0x1d4>)
 80113a0:	589b      	ldr	r3, [r3, r2]
 80113a2:	2280      	movs	r2, #128	; 0x80
 80113a4:	2100      	movs	r1, #0
 80113a6:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 80113a8:	4a6b      	ldr	r2, [pc, #428]	; (8011558 <ResetMacParameters+0x1d0>)
 80113aa:	2382      	movs	r3, #130	; 0x82
 80113ac:	00db      	lsls	r3, r3, #3
 80113ae:	2100      	movs	r1, #0
 80113b0:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 80113b2:	4b69      	ldr	r3, [pc, #420]	; (8011558 <ResetMacParameters+0x1d0>)
 80113b4:	4a6a      	ldr	r2, [pc, #424]	; (8011560 <ResetMacParameters+0x1d8>)
 80113b6:	2101      	movs	r1, #1
 80113b8:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 80113ba:	4b67      	ldr	r3, [pc, #412]	; (8011558 <ResetMacParameters+0x1d0>)
 80113bc:	4a69      	ldr	r2, [pc, #420]	; (8011564 <ResetMacParameters+0x1dc>)
 80113be:	2101      	movs	r1, #1
 80113c0:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 80113c2:	4b65      	ldr	r3, [pc, #404]	; (8011558 <ResetMacParameters+0x1d0>)
 80113c4:	4a68      	ldr	r2, [pc, #416]	; (8011568 <ResetMacParameters+0x1e0>)
 80113c6:	2100      	movs	r1, #0
 80113c8:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 80113ca:	4b63      	ldr	r3, [pc, #396]	; (8011558 <ResetMacParameters+0x1d0>)
 80113cc:	4a63      	ldr	r2, [pc, #396]	; (801155c <ResetMacParameters+0x1d4>)
 80113ce:	589b      	ldr	r3, [r3, r2]
 80113d0:	22c8      	movs	r2, #200	; 0xc8
 80113d2:	2100      	movs	r1, #0
 80113d4:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 80113d6:	4b60      	ldr	r3, [pc, #384]	; (8011558 <ResetMacParameters+0x1d0>)
 80113d8:	4a60      	ldr	r2, [pc, #384]	; (801155c <ResetMacParameters+0x1d4>)
 80113da:	589a      	ldr	r2, [r3, r2]
 80113dc:	23a6      	movs	r3, #166	; 0xa6
 80113de:	005b      	lsls	r3, r3, #1
 80113e0:	2101      	movs	r1, #1
 80113e2:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80113e4:	4b5c      	ldr	r3, [pc, #368]	; (8011558 <ResetMacParameters+0x1d0>)
 80113e6:	4a5d      	ldr	r2, [pc, #372]	; (801155c <ResetMacParameters+0x1d4>)
 80113e8:	589a      	ldr	r2, [r3, r2]
 80113ea:	4b5b      	ldr	r3, [pc, #364]	; (8011558 <ResetMacParameters+0x1d0>)
 80113ec:	495b      	ldr	r1, [pc, #364]	; (801155c <ResetMacParameters+0x1d4>)
 80113ee:	585b      	ldr	r3, [r3, r1]
 80113f0:	2104      	movs	r1, #4
 80113f2:	5651      	ldrsb	r1, [r2, r1]
 80113f4:	2284      	movs	r2, #132	; 0x84
 80113f6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80113f8:	4b57      	ldr	r3, [pc, #348]	; (8011558 <ResetMacParameters+0x1d0>)
 80113fa:	4a58      	ldr	r2, [pc, #352]	; (801155c <ResetMacParameters+0x1d4>)
 80113fc:	589a      	ldr	r2, [r3, r2]
 80113fe:	4b56      	ldr	r3, [pc, #344]	; (8011558 <ResetMacParameters+0x1d0>)
 8011400:	4956      	ldr	r1, [pc, #344]	; (801155c <ResetMacParameters+0x1d4>)
 8011402:	585b      	ldr	r3, [r3, r1]
 8011404:	2105      	movs	r1, #5
 8011406:	5651      	ldrsb	r1, [r2, r1]
 8011408:	2285      	movs	r2, #133	; 0x85
 801140a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 801140c:	4b52      	ldr	r3, [pc, #328]	; (8011558 <ResetMacParameters+0x1d0>)
 801140e:	4a53      	ldr	r2, [pc, #332]	; (801155c <ResetMacParameters+0x1d4>)
 8011410:	589a      	ldr	r2, [r3, r2]
 8011412:	4b51      	ldr	r3, [pc, #324]	; (8011558 <ResetMacParameters+0x1d0>)
 8011414:	4951      	ldr	r1, [pc, #324]	; (801155c <ResetMacParameters+0x1d4>)
 8011416:	585b      	ldr	r3, [r3, r1]
 8011418:	2125      	movs	r1, #37	; 0x25
 801141a:	5c51      	ldrb	r1, [r2, r1]
 801141c:	22a5      	movs	r2, #165	; 0xa5
 801141e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8011420:	4b4d      	ldr	r3, [pc, #308]	; (8011558 <ResetMacParameters+0x1d0>)
 8011422:	4a4e      	ldr	r2, [pc, #312]	; (801155c <ResetMacParameters+0x1d4>)
 8011424:	589a      	ldr	r2, [r3, r2]
 8011426:	4b4c      	ldr	r3, [pc, #304]	; (8011558 <ResetMacParameters+0x1d0>)
 8011428:	494c      	ldr	r1, [pc, #304]	; (801155c <ResetMacParameters+0x1d4>)
 801142a:	585b      	ldr	r3, [r3, r1]
 801142c:	21a8      	movs	r1, #168	; 0xa8
 801142e:	185b      	adds	r3, r3, r1
 8011430:	3228      	adds	r2, #40	; 0x28
 8011432:	ca03      	ldmia	r2!, {r0, r1}
 8011434:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8011436:	4b48      	ldr	r3, [pc, #288]	; (8011558 <ResetMacParameters+0x1d0>)
 8011438:	4a48      	ldr	r2, [pc, #288]	; (801155c <ResetMacParameters+0x1d4>)
 801143a:	589a      	ldr	r2, [r3, r2]
 801143c:	4b46      	ldr	r3, [pc, #280]	; (8011558 <ResetMacParameters+0x1d0>)
 801143e:	4947      	ldr	r1, [pc, #284]	; (801155c <ResetMacParameters+0x1d4>)
 8011440:	585b      	ldr	r3, [r3, r1]
 8011442:	21b0      	movs	r1, #176	; 0xb0
 8011444:	185b      	adds	r3, r3, r1
 8011446:	3230      	adds	r2, #48	; 0x30
 8011448:	ca03      	ldmia	r2!, {r0, r1}
 801144a:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 801144c:	4b42      	ldr	r3, [pc, #264]	; (8011558 <ResetMacParameters+0x1d0>)
 801144e:	4a43      	ldr	r2, [pc, #268]	; (801155c <ResetMacParameters+0x1d4>)
 8011450:	589a      	ldr	r2, [r3, r2]
 8011452:	4b41      	ldr	r3, [pc, #260]	; (8011558 <ResetMacParameters+0x1d0>)
 8011454:	4941      	ldr	r1, [pc, #260]	; (801155c <ResetMacParameters+0x1d4>)
 8011456:	585b      	ldr	r3, [r3, r1]
 8011458:	2138      	movs	r1, #56	; 0x38
 801145a:	5c51      	ldrb	r1, [r2, r1]
 801145c:	22b8      	movs	r2, #184	; 0xb8
 801145e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8011460:	4b3d      	ldr	r3, [pc, #244]	; (8011558 <ResetMacParameters+0x1d0>)
 8011462:	4a3e      	ldr	r2, [pc, #248]	; (801155c <ResetMacParameters+0x1d4>)
 8011464:	589a      	ldr	r2, [r3, r2]
 8011466:	4b3c      	ldr	r3, [pc, #240]	; (8011558 <ResetMacParameters+0x1d0>)
 8011468:	493c      	ldr	r1, [pc, #240]	; (801155c <ResetMacParameters+0x1d4>)
 801146a:	585b      	ldr	r3, [r3, r1]
 801146c:	2139      	movs	r1, #57	; 0x39
 801146e:	5c51      	ldrb	r1, [r2, r1]
 8011470:	22b9      	movs	r2, #185	; 0xb9
 8011472:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8011474:	4b38      	ldr	r3, [pc, #224]	; (8011558 <ResetMacParameters+0x1d0>)
 8011476:	4a39      	ldr	r2, [pc, #228]	; (801155c <ResetMacParameters+0x1d4>)
 8011478:	589b      	ldr	r3, [r3, r2]
 801147a:	4a37      	ldr	r2, [pc, #220]	; (8011558 <ResetMacParameters+0x1d0>)
 801147c:	4937      	ldr	r1, [pc, #220]	; (801155c <ResetMacParameters+0x1d4>)
 801147e:	5852      	ldr	r2, [r2, r1]
 8011480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011482:	21bc      	movs	r1, #188	; 0xbc
 8011484:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8011486:	4b34      	ldr	r3, [pc, #208]	; (8011558 <ResetMacParameters+0x1d0>)
 8011488:	4a34      	ldr	r2, [pc, #208]	; (801155c <ResetMacParameters+0x1d4>)
 801148a:	589b      	ldr	r3, [r3, r2]
 801148c:	4a32      	ldr	r2, [pc, #200]	; (8011558 <ResetMacParameters+0x1d0>)
 801148e:	4933      	ldr	r1, [pc, #204]	; (801155c <ResetMacParameters+0x1d4>)
 8011490:	5852      	ldr	r2, [r2, r1]
 8011492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011494:	21c0      	movs	r1, #192	; 0xc0
 8011496:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 8011498:	4b2f      	ldr	r3, [pc, #188]	; (8011558 <ResetMacParameters+0x1d0>)
 801149a:	4a34      	ldr	r2, [pc, #208]	; (801156c <ResetMacParameters+0x1e4>)
 801149c:	2100      	movs	r1, #0
 801149e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 80114a0:	4b2d      	ldr	r3, [pc, #180]	; (8011558 <ResetMacParameters+0x1d0>)
 80114a2:	4a2e      	ldr	r2, [pc, #184]	; (801155c <ResetMacParameters+0x1d4>)
 80114a4:	589a      	ldr	r2, [r3, r2]
 80114a6:	234c      	movs	r3, #76	; 0x4c
 80114a8:	33ff      	adds	r3, #255	; 0xff
 80114aa:	2100      	movs	r1, #0
 80114ac:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80114ae:	003b      	movs	r3, r7
 80114b0:	2201      	movs	r2, #1
 80114b2:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 80114b4:	003b      	movs	r3, r7
 80114b6:	2200      	movs	r2, #0
 80114b8:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80114ba:	4b27      	ldr	r3, [pc, #156]	; (8011558 <ResetMacParameters+0x1d0>)
 80114bc:	4a27      	ldr	r2, [pc, #156]	; (801155c <ResetMacParameters+0x1d4>)
 80114be:	589b      	ldr	r3, [r3, r2]
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	003a      	movs	r2, r7
 80114c4:	0011      	movs	r1, r2
 80114c6:	0018      	movs	r0, r3
 80114c8:	f004 fde2 	bl	8016090 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80114cc:	4b22      	ldr	r3, [pc, #136]	; (8011558 <ResetMacParameters+0x1d0>)
 80114ce:	4a28      	ldr	r2, [pc, #160]	; (8011570 <ResetMacParameters+0x1e8>)
 80114d0:	2100      	movs	r1, #0
 80114d2:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80114d4:	4b20      	ldr	r3, [pc, #128]	; (8011558 <ResetMacParameters+0x1d0>)
 80114d6:	4a26      	ldr	r2, [pc, #152]	; (8011570 <ResetMacParameters+0x1e8>)
 80114d8:	5c99      	ldrb	r1, [r3, r2]
 80114da:	4a1f      	ldr	r2, [pc, #124]	; (8011558 <ResetMacParameters+0x1d0>)
 80114dc:	23f3      	movs	r3, #243	; 0xf3
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80114e2:	4b1d      	ldr	r3, [pc, #116]	; (8011558 <ResetMacParameters+0x1d0>)
 80114e4:	4a1d      	ldr	r2, [pc, #116]	; (801155c <ResetMacParameters+0x1d4>)
 80114e6:	589b      	ldr	r3, [r3, r2]
 80114e8:	22a8      	movs	r2, #168	; 0xa8
 80114ea:	5899      	ldr	r1, [r3, r2]
 80114ec:	4a1a      	ldr	r2, [pc, #104]	; (8011558 <ResetMacParameters+0x1d0>)
 80114ee:	23f4      	movs	r3, #244	; 0xf4
 80114f0:	009b      	lsls	r3, r3, #2
 80114f2:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80114f4:	4b18      	ldr	r3, [pc, #96]	; (8011558 <ResetMacParameters+0x1d0>)
 80114f6:	4a19      	ldr	r2, [pc, #100]	; (801155c <ResetMacParameters+0x1d4>)
 80114f8:	589b      	ldr	r3, [r3, r2]
 80114fa:	22b9      	movs	r2, #185	; 0xb9
 80114fc:	5c99      	ldrb	r1, [r3, r2]
 80114fe:	4a16      	ldr	r2, [pc, #88]	; (8011558 <ResetMacParameters+0x1d0>)
 8011500:	23f7      	movs	r3, #247	; 0xf7
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8011506:	4b14      	ldr	r3, [pc, #80]	; (8011558 <ResetMacParameters+0x1d0>)
 8011508:	4a14      	ldr	r2, [pc, #80]	; (801155c <ResetMacParameters+0x1d4>)
 801150a:	589b      	ldr	r3, [r3, r2]
 801150c:	22ca      	movs	r2, #202	; 0xca
 801150e:	5c99      	ldrb	r1, [r3, r2]
 8011510:	4b11      	ldr	r3, [pc, #68]	; (8011558 <ResetMacParameters+0x1d0>)
 8011512:	4a18      	ldr	r2, [pc, #96]	; (8011574 <ResetMacParameters+0x1ec>)
 8011514:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011516:	4b10      	ldr	r3, [pc, #64]	; (8011558 <ResetMacParameters+0x1d0>)
 8011518:	4a17      	ldr	r2, [pc, #92]	; (8011578 <ResetMacParameters+0x1f0>)
 801151a:	2100      	movs	r1, #0
 801151c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801151e:	4b0e      	ldr	r3, [pc, #56]	; (8011558 <ResetMacParameters+0x1d0>)
 8011520:	4a16      	ldr	r2, [pc, #88]	; (801157c <ResetMacParameters+0x1f4>)
 8011522:	2101      	movs	r1, #1
 8011524:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011526:	480c      	ldr	r0, [pc, #48]	; (8011558 <ResetMacParameters+0x1d0>)
 8011528:	23f8      	movs	r3, #248	; 0xf8
 801152a:	009b      	lsls	r3, r3, #2
 801152c:	490a      	ldr	r1, [pc, #40]	; (8011558 <ResetMacParameters+0x1d0>)
 801152e:	22f3      	movs	r2, #243	; 0xf3
 8011530:	0092      	lsls	r2, r2, #2
 8011532:	18c3      	adds	r3, r0, r3
 8011534:	188a      	adds	r2, r1, r2
 8011536:	ca13      	ldmia	r2!, {r0, r1, r4}
 8011538:	c313      	stmia	r3!, {r0, r1, r4}
 801153a:	ca03      	ldmia	r2!, {r0, r1}
 801153c:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801153e:	4b06      	ldr	r3, [pc, #24]	; (8011558 <ResetMacParameters+0x1d0>)
 8011540:	4a0f      	ldr	r2, [pc, #60]	; (8011580 <ResetMacParameters+0x1f8>)
 8011542:	2101      	movs	r1, #1
 8011544:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011546:	4b04      	ldr	r3, [pc, #16]	; (8011558 <ResetMacParameters+0x1d0>)
 8011548:	4a0e      	ldr	r2, [pc, #56]	; (8011584 <ResetMacParameters+0x1fc>)
 801154a:	2102      	movs	r1, #2
 801154c:	5499      	strb	r1, [r3, r2]

}
 801154e:	46c0      	nop			; (mov r8, r8)
 8011550:	46bd      	mov	sp, r7
 8011552:	b003      	add	sp, #12
 8011554:	bd90      	pop	{r4, r7, pc}
 8011556:	46c0      	nop			; (mov r8, r8)
 8011558:	20000b6c 	.word	0x20000b6c
 801155c:	00000484 	.word	0x00000484
 8011560:	00000411 	.word	0x00000411
 8011564:	00000412 	.word	0x00000412
 8011568:	00000413 	.word	0x00000413
 801156c:	00000414 	.word	0x00000414
 8011570:	00000415 	.word	0x00000415
 8011574:	000003dd 	.word	0x000003dd
 8011578:	000003de 	.word	0x000003de
 801157c:	000003df 	.word	0x000003df
 8011580:	000003f2 	.word	0x000003f2
 8011584:	000003f3 	.word	0x000003f3

08011588 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	0018      	movs	r0, r3
 8011596:	f00a fd33 	bl	801c000 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 801159a:	4b10      	ldr	r3, [pc, #64]	; (80115dc <RxWindowSetup+0x54>)
 801159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801159e:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80115a0:	4b0f      	ldr	r3, [pc, #60]	; (80115e0 <RxWindowSetup+0x58>)
 80115a2:	4a10      	ldr	r2, [pc, #64]	; (80115e4 <RxWindowSetup+0x5c>)
 80115a4:	589b      	ldr	r3, [r3, r2]
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	4a0f      	ldr	r2, [pc, #60]	; (80115e8 <RxWindowSetup+0x60>)
 80115aa:	6839      	ldr	r1, [r7, #0]
 80115ac:	0018      	movs	r0, r3
 80115ae:	f004 fe06 	bl	80161be <RegionRxConfig>
 80115b2:	1e03      	subs	r3, r0, #0
 80115b4:	d00e      	beq.n	80115d4 <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 80115b6:	4b09      	ldr	r3, [pc, #36]	; (80115dc <RxWindowSetup+0x54>)
 80115b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115ba:	4a09      	ldr	r2, [pc, #36]	; (80115e0 <RxWindowSetup+0x58>)
 80115bc:	4909      	ldr	r1, [pc, #36]	; (80115e4 <RxWindowSetup+0x5c>)
 80115be:	5852      	ldr	r2, [r2, r1]
 80115c0:	2190      	movs	r1, #144	; 0x90
 80115c2:	5852      	ldr	r2, [r2, r1]
 80115c4:	0010      	movs	r0, r2
 80115c6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	7cd9      	ldrb	r1, [r3, #19]
 80115cc:	4a04      	ldr	r2, [pc, #16]	; (80115e0 <RxWindowSetup+0x58>)
 80115ce:	2390      	movs	r3, #144	; 0x90
 80115d0:	00db      	lsls	r3, r3, #3
 80115d2:	54d1      	strb	r1, [r2, r3]
    }
}
 80115d4:	46c0      	nop			; (mov r8, r8)
 80115d6:	46bd      	mov	sp, r7
 80115d8:	b002      	add	sp, #8
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	0801e62c 	.word	0x0801e62c
 80115e0:	20000b6c 	.word	0x20000b6c
 80115e4:	00000484 	.word	0x00000484
 80115e8:	20000f8c 	.word	0x20000f8c

080115ec <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80115ec:	b590      	push	{r4, r7, lr}
 80115ee:	b083      	sub	sp, #12
 80115f0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80115f2:	4b1d      	ldr	r3, [pc, #116]	; (8011668 <OpenContinuousRxCWindow+0x7c>)
 80115f4:	4a1d      	ldr	r2, [pc, #116]	; (801166c <OpenContinuousRxCWindow+0x80>)
 80115f6:	589b      	ldr	r3, [r3, r2]
 80115f8:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 80115fa:	4b1b      	ldr	r3, [pc, #108]	; (8011668 <OpenContinuousRxCWindow+0x7c>)
 80115fc:	4a1b      	ldr	r2, [pc, #108]	; (801166c <OpenContinuousRxCWindow+0x80>)
 80115fe:	589b      	ldr	r3, [r3, r2]
 8011600:	22b4      	movs	r2, #180	; 0xb4
 8011602:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011604:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011606:	4b18      	ldr	r3, [pc, #96]	; (8011668 <OpenContinuousRxCWindow+0x7c>)
 8011608:	4a18      	ldr	r2, [pc, #96]	; (801166c <OpenContinuousRxCWindow+0x80>)
 801160a:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801160c:	228c      	movs	r2, #140	; 0x8c
 801160e:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011610:	4b15      	ldr	r3, [pc, #84]	; (8011668 <OpenContinuousRxCWindow+0x7c>)
 8011612:	4c16      	ldr	r4, [pc, #88]	; (801166c <OpenContinuousRxCWindow+0x80>)
 8011614:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011616:	2488      	movs	r4, #136	; 0x88
 8011618:	591c      	ldr	r4, [r3, r4]
 801161a:	4b15      	ldr	r3, [pc, #84]	; (8011670 <OpenContinuousRxCWindow+0x84>)
 801161c:	9300      	str	r3, [sp, #0]
 801161e:	0023      	movs	r3, r4
 8011620:	f004 fda9 	bl	8016176 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011624:	4b10      	ldr	r3, [pc, #64]	; (8011668 <OpenContinuousRxCWindow+0x7c>)
 8011626:	4a13      	ldr	r2, [pc, #76]	; (8011674 <OpenContinuousRxCWindow+0x88>)
 8011628:	2102      	movs	r1, #2
 801162a:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801162c:	4b0e      	ldr	r3, [pc, #56]	; (8011668 <OpenContinuousRxCWindow+0x7c>)
 801162e:	4a12      	ldr	r2, [pc, #72]	; (8011678 <OpenContinuousRxCWindow+0x8c>)
 8011630:	2101      	movs	r1, #1
 8011632:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011634:	4b0c      	ldr	r3, [pc, #48]	; (8011668 <OpenContinuousRxCWindow+0x7c>)
 8011636:	4a0d      	ldr	r2, [pc, #52]	; (801166c <OpenContinuousRxCWindow+0x80>)
 8011638:	589b      	ldr	r3, [r3, r2]
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	4a0f      	ldr	r2, [pc, #60]	; (801167c <OpenContinuousRxCWindow+0x90>)
 801163e:	490c      	ldr	r1, [pc, #48]	; (8011670 <OpenContinuousRxCWindow+0x84>)
 8011640:	0018      	movs	r0, r3
 8011642:	f004 fdbc 	bl	80161be <RegionRxConfig>
 8011646:	1e03      	subs	r3, r0, #0
 8011648:	d00a      	beq.n	8011660 <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 801164a:	4b0d      	ldr	r3, [pc, #52]	; (8011680 <OpenContinuousRxCWindow+0x94>)
 801164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801164e:	2000      	movs	r0, #0
 8011650:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011652:	4b05      	ldr	r3, [pc, #20]	; (8011668 <OpenContinuousRxCWindow+0x7c>)
 8011654:	4a07      	ldr	r2, [pc, #28]	; (8011674 <OpenContinuousRxCWindow+0x88>)
 8011656:	5c99      	ldrb	r1, [r3, r2]
 8011658:	4a03      	ldr	r2, [pc, #12]	; (8011668 <OpenContinuousRxCWindow+0x7c>)
 801165a:	2390      	movs	r3, #144	; 0x90
 801165c:	00db      	lsls	r3, r3, #3
 801165e:	54d1      	strb	r1, [r2, r3]
    }
}
 8011660:	46c0      	nop			; (mov r8, r8)
 8011662:	46bd      	mov	sp, r7
 8011664:	b001      	add	sp, #4
 8011666:	bd90      	pop	{r4, r7, pc}
 8011668:	20000b6c 	.word	0x20000b6c
 801166c:	00000484 	.word	0x00000484
 8011670:	20000f4c 	.word	0x20000f4c
 8011674:	000003f3 	.word	0x000003f3
 8011678:	000003f2 	.word	0x000003f2
 801167c:	20000f8c 	.word	0x20000f8c
 8011680:	0801e62c 	.word	0x0801e62c

08011684 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011684:	b590      	push	{r4, r7, lr}
 8011686:	b089      	sub	sp, #36	; 0x24
 8011688:	af00      	add	r7, sp, #0
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	603b      	str	r3, [r7, #0]
 8011690:	1dfb      	adds	r3, r7, #7
 8011692:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 8011694:	4b9a      	ldr	r3, [pc, #616]	; (8011900 <PrepareFrame+0x27c>)
 8011696:	2200      	movs	r2, #0
 8011698:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801169a:	4b99      	ldr	r3, [pc, #612]	; (8011900 <PrepareFrame+0x27c>)
 801169c:	4a99      	ldr	r2, [pc, #612]	; (8011904 <PrepareFrame+0x280>)
 801169e:	2100      	movs	r1, #0
 80116a0:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 80116a2:	2300      	movs	r3, #0
 80116a4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80116a6:	2300      	movs	r3, #0
 80116a8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80116aa:	231f      	movs	r3, #31
 80116ac:	18fb      	adds	r3, r7, r3
 80116ae:	2200      	movs	r2, #0
 80116b0:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d103      	bne.n	80116c0 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 80116b8:	2330      	movs	r3, #48	; 0x30
 80116ba:	18fb      	adds	r3, r7, r3
 80116bc:	2200      	movs	r2, #0
 80116be:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80116c0:	2430      	movs	r4, #48	; 0x30
 80116c2:	193b      	adds	r3, r7, r4
 80116c4:	881a      	ldrh	r2, [r3, #0]
 80116c6:	6839      	ldr	r1, [r7, #0]
 80116c8:	4b8f      	ldr	r3, [pc, #572]	; (8011908 <PrepareFrame+0x284>)
 80116ca:	0018      	movs	r0, r3
 80116cc:	f007 f920 	bl	8018910 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80116d0:	193b      	adds	r3, r7, r4
 80116d2:	881b      	ldrh	r3, [r3, #0]
 80116d4:	b2d9      	uxtb	r1, r3
 80116d6:	4b8a      	ldr	r3, [pc, #552]	; (8011900 <PrepareFrame+0x27c>)
 80116d8:	4a8c      	ldr	r2, [pc, #560]	; (801190c <PrepareFrame+0x288>)
 80116da:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	781a      	ldrb	r2, [r3, #0]
 80116e0:	4b87      	ldr	r3, [pc, #540]	; (8011900 <PrepareFrame+0x27c>)
 80116e2:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	061b      	lsls	r3, r3, #24
 80116ea:	0f5b      	lsrs	r3, r3, #29
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	2b07      	cmp	r3, #7
 80116f0:	d100      	bne.n	80116f4 <PrepareFrame+0x70>
 80116f2:	e0e0      	b.n	80118b6 <PrepareFrame+0x232>
 80116f4:	dd00      	ble.n	80116f8 <PrepareFrame+0x74>
 80116f6:	e0f8      	b.n	80118ea <PrepareFrame+0x266>
 80116f8:	2b02      	cmp	r3, #2
 80116fa:	d006      	beq.n	801170a <PrepareFrame+0x86>
 80116fc:	2b04      	cmp	r3, #4
 80116fe:	d000      	beq.n	8011702 <PrepareFrame+0x7e>
 8011700:	e0f3      	b.n	80118ea <PrepareFrame+0x266>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011702:	4b7f      	ldr	r3, [pc, #508]	; (8011900 <PrepareFrame+0x27c>)
 8011704:	4a7f      	ldr	r2, [pc, #508]	; (8011904 <PrepareFrame+0x280>)
 8011706:	2101      	movs	r1, #1
 8011708:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801170a:	4a7d      	ldr	r2, [pc, #500]	; (8011900 <PrepareFrame+0x27c>)
 801170c:	2382      	movs	r3, #130	; 0x82
 801170e:	005b      	lsls	r3, r3, #1
 8011710:	2104      	movs	r1, #4
 8011712:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011714:	4a7a      	ldr	r2, [pc, #488]	; (8011900 <PrepareFrame+0x27c>)
 8011716:	2384      	movs	r3, #132	; 0x84
 8011718:	005b      	lsls	r3, r3, #1
 801171a:	497d      	ldr	r1, [pc, #500]	; (8011910 <PrepareFrame+0x28c>)
 801171c:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801171e:	4a78      	ldr	r2, [pc, #480]	; (8011900 <PrepareFrame+0x27c>)
 8011720:	2386      	movs	r3, #134	; 0x86
 8011722:	005b      	lsls	r3, r3, #1
 8011724:	21ff      	movs	r1, #255	; 0xff
 8011726:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	7819      	ldrb	r1, [r3, #0]
 801172c:	4a74      	ldr	r2, [pc, #464]	; (8011900 <PrepareFrame+0x27c>)
 801172e:	230e      	movs	r3, #14
 8011730:	33ff      	adds	r3, #255	; 0xff
 8011732:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011734:	4a72      	ldr	r2, [pc, #456]	; (8011900 <PrepareFrame+0x27c>)
 8011736:	1df9      	adds	r1, r7, #7
 8011738:	2394      	movs	r3, #148	; 0x94
 801173a:	005b      	lsls	r3, r3, #1
 801173c:	7809      	ldrb	r1, [r1, #0]
 801173e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8011740:	4b6f      	ldr	r3, [pc, #444]	; (8011900 <PrepareFrame+0x27c>)
 8011742:	4a74      	ldr	r2, [pc, #464]	; (8011914 <PrepareFrame+0x290>)
 8011744:	589b      	ldr	r3, [r3, r2]
 8011746:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011748:	4a6d      	ldr	r2, [pc, #436]	; (8011900 <PrepareFrame+0x27c>)
 801174a:	2388      	movs	r3, #136	; 0x88
 801174c:	005b      	lsls	r3, r3, #1
 801174e:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	7819      	ldrb	r1, [r3, #0]
 8011754:	4a6a      	ldr	r2, [pc, #424]	; (8011900 <PrepareFrame+0x27c>)
 8011756:	238a      	movs	r3, #138	; 0x8a
 8011758:	005b      	lsls	r3, r3, #1
 801175a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801175c:	4b68      	ldr	r3, [pc, #416]	; (8011900 <PrepareFrame+0x27c>)
 801175e:	4a6b      	ldr	r2, [pc, #428]	; (801190c <PrepareFrame+0x288>)
 8011760:	5c99      	ldrb	r1, [r3, r2]
 8011762:	4a67      	ldr	r2, [pc, #412]	; (8011900 <PrepareFrame+0x27c>)
 8011764:	2398      	movs	r3, #152	; 0x98
 8011766:	005b      	lsls	r3, r3, #1
 8011768:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801176a:	4a65      	ldr	r2, [pc, #404]	; (8011900 <PrepareFrame+0x27c>)
 801176c:	2396      	movs	r3, #150	; 0x96
 801176e:	005b      	lsls	r3, r3, #1
 8011770:	4965      	ldr	r1, [pc, #404]	; (8011908 <PrepareFrame+0x284>)
 8011772:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011774:	2318      	movs	r3, #24
 8011776:	18fb      	adds	r3, r7, r3
 8011778:	0018      	movs	r0, r3
 801177a:	f003 fccb 	bl	8015114 <LoRaMacCryptoGetFCntUp>
 801177e:	1e03      	subs	r3, r0, #0
 8011780:	d001      	beq.n	8011786 <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011782:	2312      	movs	r3, #18
 8011784:	e0b7      	b.n	80118f6 <PrepareFrame+0x272>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8011786:	69bb      	ldr	r3, [r7, #24]
 8011788:	b299      	uxth	r1, r3
 801178a:	4a5d      	ldr	r2, [pc, #372]	; (8011900 <PrepareFrame+0x27c>)
 801178c:	238b      	movs	r3, #139	; 0x8b
 801178e:	005b      	lsls	r3, r3, #1
 8011790:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8011792:	4b5b      	ldr	r3, [pc, #364]	; (8011900 <PrepareFrame+0x27c>)
 8011794:	4a60      	ldr	r2, [pc, #384]	; (8011918 <PrepareFrame+0x294>)
 8011796:	2100      	movs	r1, #0
 8011798:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 801179a:	4a59      	ldr	r2, [pc, #356]	; (8011900 <PrepareFrame+0x27c>)
 801179c:	2388      	movs	r3, #136	; 0x88
 801179e:	00db      	lsls	r3, r3, #3
 80117a0:	2100      	movs	r1, #0
 80117a2:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80117a4:	69b9      	ldr	r1, [r7, #24]
 80117a6:	4a56      	ldr	r2, [pc, #344]	; (8011900 <PrepareFrame+0x27c>)
 80117a8:	2389      	movs	r3, #137	; 0x89
 80117aa:	00db      	lsls	r3, r3, #3
 80117ac:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80117ae:	2314      	movs	r3, #20
 80117b0:	18fb      	adds	r3, r7, r3
 80117b2:	0018      	movs	r0, r3
 80117b4:	f002 fd7a 	bl	80142ac <LoRaMacCommandsGetSizeSerializedCmds>
 80117b8:	1e03      	subs	r3, r0, #0
 80117ba:	d001      	beq.n	80117c0 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80117bc:	2313      	movs	r3, #19
 80117be:	e09a      	b.n	80118f6 <PrepareFrame+0x272>
            }

            if( macCmdsSize > 0 )
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d100      	bne.n	80117c8 <PrepareFrame+0x144>
 80117c6:	e092      	b.n	80118ee <PrepareFrame+0x26a>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 80117c8:	4b4d      	ldr	r3, [pc, #308]	; (8011900 <PrepareFrame+0x27c>)
 80117ca:	4a52      	ldr	r2, [pc, #328]	; (8011914 <PrepareFrame+0x290>)
 80117cc:	589b      	ldr	r3, [r3, r2]
 80117ce:	2285      	movs	r2, #133	; 0x85
 80117d0:	569b      	ldrsb	r3, [r3, r2]
 80117d2:	221f      	movs	r2, #31
 80117d4:	18bc      	adds	r4, r7, r2
 80117d6:	0018      	movs	r0, r3
 80117d8:	f7fe fb52 	bl	800fe80 <GetMaxAppPayloadWithoutFOptsLength>
 80117dc:	0003      	movs	r3, r0
 80117de:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80117e0:	4b47      	ldr	r3, [pc, #284]	; (8011900 <PrepareFrame+0x27c>)
 80117e2:	4a4a      	ldr	r2, [pc, #296]	; (801190c <PrepareFrame+0x288>)
 80117e4:	5c9b      	ldrb	r3, [r3, r2]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d024      	beq.n	8011834 <PrepareFrame+0x1b0>
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	2b0f      	cmp	r3, #15
 80117ee:	d821      	bhi.n	8011834 <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80117f0:	4a4a      	ldr	r2, [pc, #296]	; (801191c <PrepareFrame+0x298>)
 80117f2:	2314      	movs	r3, #20
 80117f4:	18fb      	adds	r3, r7, r3
 80117f6:	0019      	movs	r1, r3
 80117f8:	200f      	movs	r0, #15
 80117fa:	f002 fd6d 	bl	80142d8 <LoRaMacCommandsSerializeCmds>
 80117fe:	1e03      	subs	r3, r0, #0
 8011800:	d001      	beq.n	8011806 <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011802:	2313      	movs	r3, #19
 8011804:	e077      	b.n	80118f6 <PrepareFrame+0x272>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	1c1a      	adds	r2, r3, #0
 801180a:	230f      	movs	r3, #15
 801180c:	4013      	ands	r3, r2
 801180e:	b2da      	uxtb	r2, r3
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	210f      	movs	r1, #15
 8011814:	400a      	ands	r2, r1
 8011816:	0010      	movs	r0, r2
 8011818:	781a      	ldrb	r2, [r3, #0]
 801181a:	210f      	movs	r1, #15
 801181c:	438a      	bics	r2, r1
 801181e:	1c11      	adds	r1, r2, #0
 8011820:	1c02      	adds	r2, r0, #0
 8011822:	430a      	orrs	r2, r1
 8011824:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	7819      	ldrb	r1, [r3, #0]
 801182a:	4a35      	ldr	r2, [pc, #212]	; (8011900 <PrepareFrame+0x27c>)
 801182c:	238a      	movs	r3, #138	; 0x8a
 801182e:	005b      	lsls	r3, r3, #1
 8011830:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011832:	e05c      	b.n	80118ee <PrepareFrame+0x26a>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011834:	4b32      	ldr	r3, [pc, #200]	; (8011900 <PrepareFrame+0x27c>)
 8011836:	4a35      	ldr	r2, [pc, #212]	; (801190c <PrepareFrame+0x288>)
 8011838:	5c9b      	ldrb	r3, [r3, r2]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d015      	beq.n	801186a <PrepareFrame+0x1e6>
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	2b0f      	cmp	r3, #15
 8011842:	d912      	bls.n	801186a <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011844:	231f      	movs	r3, #31
 8011846:	18fb      	adds	r3, r7, r3
 8011848:	7818      	ldrb	r0, [r3, #0]
 801184a:	4b2d      	ldr	r3, [pc, #180]	; (8011900 <PrepareFrame+0x27c>)
 801184c:	4a31      	ldr	r2, [pc, #196]	; (8011914 <PrepareFrame+0x290>)
 801184e:	589b      	ldr	r3, [r3, r2]
 8011850:	33cb      	adds	r3, #203	; 0xcb
 8011852:	001a      	movs	r2, r3
 8011854:	2314      	movs	r3, #20
 8011856:	18fb      	adds	r3, r7, r3
 8011858:	0019      	movs	r1, r3
 801185a:	f002 fd3d 	bl	80142d8 <LoRaMacCommandsSerializeCmds>
 801185e:	1e03      	subs	r3, r0, #0
 8011860:	d001      	beq.n	8011866 <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011862:	2313      	movs	r3, #19
 8011864:	e047      	b.n	80118f6 <PrepareFrame+0x272>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011866:	230a      	movs	r3, #10
 8011868:	e045      	b.n	80118f6 <PrepareFrame+0x272>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801186a:	231f      	movs	r3, #31
 801186c:	18fb      	adds	r3, r7, r3
 801186e:	7818      	ldrb	r0, [r3, #0]
 8011870:	4b23      	ldr	r3, [pc, #140]	; (8011900 <PrepareFrame+0x27c>)
 8011872:	4a28      	ldr	r2, [pc, #160]	; (8011914 <PrepareFrame+0x290>)
 8011874:	589b      	ldr	r3, [r3, r2]
 8011876:	33cb      	adds	r3, #203	; 0xcb
 8011878:	001a      	movs	r2, r3
 801187a:	2314      	movs	r3, #20
 801187c:	18fb      	adds	r3, r7, r3
 801187e:	0019      	movs	r1, r3
 8011880:	f002 fd2a 	bl	80142d8 <LoRaMacCommandsSerializeCmds>
 8011884:	1e03      	subs	r3, r0, #0
 8011886:	d001      	beq.n	801188c <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011888:	2313      	movs	r3, #19
 801188a:	e034      	b.n	80118f6 <PrepareFrame+0x272>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801188c:	4a1c      	ldr	r2, [pc, #112]	; (8011900 <PrepareFrame+0x27c>)
 801188e:	2394      	movs	r3, #148	; 0x94
 8011890:	005b      	lsls	r3, r3, #1
 8011892:	2100      	movs	r1, #0
 8011894:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8011896:	4b1a      	ldr	r3, [pc, #104]	; (8011900 <PrepareFrame+0x27c>)
 8011898:	4a1e      	ldr	r2, [pc, #120]	; (8011914 <PrepareFrame+0x290>)
 801189a:	589b      	ldr	r3, [r3, r2]
 801189c:	33cb      	adds	r3, #203	; 0xcb
 801189e:	0019      	movs	r1, r3
 80118a0:	4a17      	ldr	r2, [pc, #92]	; (8011900 <PrepareFrame+0x27c>)
 80118a2:	2396      	movs	r3, #150	; 0x96
 80118a4:	005b      	lsls	r3, r3, #1
 80118a6:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	b2d9      	uxtb	r1, r3
 80118ac:	4a14      	ldr	r2, [pc, #80]	; (8011900 <PrepareFrame+0x27c>)
 80118ae:	2398      	movs	r3, #152	; 0x98
 80118b0:	005b      	lsls	r3, r3, #1
 80118b2:	54d1      	strb	r1, [r2, r3]
            break;
 80118b4:	e01b      	b.n	80118ee <PrepareFrame+0x26a>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d01a      	beq.n	80118f2 <PrepareFrame+0x26e>
 80118bc:	4b10      	ldr	r3, [pc, #64]	; (8011900 <PrepareFrame+0x27c>)
 80118be:	4a13      	ldr	r2, [pc, #76]	; (801190c <PrepareFrame+0x288>)
 80118c0:	5c9b      	ldrb	r3, [r3, r2]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d015      	beq.n	80118f2 <PrepareFrame+0x26e>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80118c6:	4816      	ldr	r0, [pc, #88]	; (8011920 <PrepareFrame+0x29c>)
 80118c8:	4b0d      	ldr	r3, [pc, #52]	; (8011900 <PrepareFrame+0x27c>)
 80118ca:	4a10      	ldr	r2, [pc, #64]	; (801190c <PrepareFrame+0x288>)
 80118cc:	5c9b      	ldrb	r3, [r3, r2]
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	0019      	movs	r1, r3
 80118d4:	f007 f81c 	bl	8018910 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80118d8:	4b09      	ldr	r3, [pc, #36]	; (8011900 <PrepareFrame+0x27c>)
 80118da:	4a0c      	ldr	r2, [pc, #48]	; (801190c <PrepareFrame+0x288>)
 80118dc:	5c9b      	ldrb	r3, [r3, r2]
 80118de:	b29b      	uxth	r3, r3
 80118e0:	3301      	adds	r3, #1
 80118e2:	b29a      	uxth	r2, r3
 80118e4:	4b06      	ldr	r3, [pc, #24]	; (8011900 <PrepareFrame+0x27c>)
 80118e6:	801a      	strh	r2, [r3, #0]
            }
            break;
 80118e8:	e003      	b.n	80118f2 <PrepareFrame+0x26e>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80118ea:	2302      	movs	r3, #2
 80118ec:	e003      	b.n	80118f6 <PrepareFrame+0x272>
            break;
 80118ee:	46c0      	nop			; (mov r8, r8)
 80118f0:	e000      	b.n	80118f4 <PrepareFrame+0x270>
            break;
 80118f2:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 80118f4:	2300      	movs	r3, #0
}
 80118f6:	0018      	movs	r0, r3
 80118f8:	46bd      	mov	sp, r7
 80118fa:	b009      	add	sp, #36	; 0x24
 80118fc:	bd90      	pop	{r4, r7, pc}
 80118fe:	46c0      	nop			; (mov r8, r8)
 8011900:	20000b6c 	.word	0x20000b6c
 8011904:	00000414 	.word	0x00000414
 8011908:	20000ca4 	.word	0x20000ca4
 801190c:	00000237 	.word	0x00000237
 8011910:	20000b6e 	.word	0x20000b6e
 8011914:	00000484 	.word	0x00000484
 8011918:	00000441 	.word	0x00000441
 801191c:	20000c84 	.word	0x20000c84
 8011920:	20000b6f 	.word	0x20000b6f

08011924 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011924:	b5b0      	push	{r4, r5, r7, lr}
 8011926:	b08a      	sub	sp, #40	; 0x28
 8011928:	af00      	add	r7, sp, #0
 801192a:	0002      	movs	r2, r0
 801192c:	1dfb      	adds	r3, r7, #7
 801192e:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011930:	2327      	movs	r3, #39	; 0x27
 8011932:	18fb      	adds	r3, r7, r3
 8011934:	2203      	movs	r2, #3
 8011936:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 10;
 8011938:	240f      	movs	r4, #15
 801193a:	193b      	adds	r3, r7, r4
 801193c:	220a      	movs	r2, #10
 801193e:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8011940:	2110      	movs	r1, #16
 8011942:	187b      	adds	r3, r7, r1
 8011944:	1dfa      	adds	r2, r7, #7
 8011946:	7812      	ldrb	r2, [r2, #0]
 8011948:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801194a:	4b57      	ldr	r3, [pc, #348]	; (8011aa8 <SendFrameOnChannel+0x184>)
 801194c:	4a57      	ldr	r2, [pc, #348]	; (8011aac <SendFrameOnChannel+0x188>)
 801194e:	589b      	ldr	r3, [r3, r2]
 8011950:	2285      	movs	r2, #133	; 0x85
 8011952:	569a      	ldrsb	r2, [r3, r2]
 8011954:	187b      	adds	r3, r7, r1
 8011956:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011958:	4b53      	ldr	r3, [pc, #332]	; (8011aa8 <SendFrameOnChannel+0x184>)
 801195a:	4a54      	ldr	r2, [pc, #336]	; (8011aac <SendFrameOnChannel+0x188>)
 801195c:	589b      	ldr	r3, [r3, r2]
 801195e:	2284      	movs	r2, #132	; 0x84
 8011960:	569a      	ldrsb	r2, [r3, r2]
 8011962:	187b      	adds	r3, r7, r1
 8011964:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8011966:	4b50      	ldr	r3, [pc, #320]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011968:	4a50      	ldr	r2, [pc, #320]	; (8011aac <SendFrameOnChannel+0x188>)
 801196a:	589b      	ldr	r3, [r3, r2]
 801196c:	22bc      	movs	r2, #188	; 0xbc
 801196e:	589a      	ldr	r2, [r3, r2]
 8011970:	187b      	adds	r3, r7, r1
 8011972:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8011974:	4b4c      	ldr	r3, [pc, #304]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011976:	4a4d      	ldr	r2, [pc, #308]	; (8011aac <SendFrameOnChannel+0x188>)
 8011978:	589b      	ldr	r3, [r3, r2]
 801197a:	22c0      	movs	r2, #192	; 0xc0
 801197c:	589a      	ldr	r2, [r3, r2]
 801197e:	187b      	adds	r3, r7, r1
 8011980:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011982:	4b49      	ldr	r3, [pc, #292]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011984:	881a      	ldrh	r2, [r3, #0]
 8011986:	187b      	adds	r3, r7, r1
 8011988:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801198a:	4b47      	ldr	r3, [pc, #284]	; (8011aa8 <SendFrameOnChannel+0x184>)
 801198c:	4a47      	ldr	r2, [pc, #284]	; (8011aac <SendFrameOnChannel+0x188>)
 801198e:	589b      	ldr	r3, [r3, r2]
 8011990:	7818      	ldrb	r0, [r3, #0]
 8011992:	4b47      	ldr	r3, [pc, #284]	; (8011ab0 <SendFrameOnChannel+0x18c>)
 8011994:	193a      	adds	r2, r7, r4
 8011996:	1879      	adds	r1, r7, r1
 8011998:	f004 fc2b 	bl	80161f2 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801199c:	4b42      	ldr	r3, [pc, #264]	; (8011aa8 <SendFrameOnChannel+0x184>)
 801199e:	4a45      	ldr	r2, [pc, #276]	; (8011ab4 <SendFrameOnChannel+0x190>)
 80119a0:	2101      	movs	r1, #1
 80119a2:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80119a4:	4b40      	ldr	r3, [pc, #256]	; (8011aa8 <SendFrameOnChannel+0x184>)
 80119a6:	4a41      	ldr	r2, [pc, #260]	; (8011aac <SendFrameOnChannel+0x188>)
 80119a8:	589b      	ldr	r3, [r3, r2]
 80119aa:	2285      	movs	r2, #133	; 0x85
 80119ac:	569b      	ldrsb	r3, [r3, r2]
 80119ae:	b2d9      	uxtb	r1, r3
 80119b0:	4b3d      	ldr	r3, [pc, #244]	; (8011aa8 <SendFrameOnChannel+0x184>)
 80119b2:	4a41      	ldr	r2, [pc, #260]	; (8011ab8 <SendFrameOnChannel+0x194>)
 80119b4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 80119b6:	193b      	adds	r3, r7, r4
 80119b8:	2100      	movs	r1, #0
 80119ba:	5659      	ldrsb	r1, [r3, r1]
 80119bc:	4b3a      	ldr	r3, [pc, #232]	; (8011aa8 <SendFrameOnChannel+0x184>)
 80119be:	4a3f      	ldr	r2, [pc, #252]	; (8011abc <SendFrameOnChannel+0x198>)
 80119c0:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 80119c2:	1dfb      	adds	r3, r7, #7
 80119c4:	781a      	ldrb	r2, [r3, #0]
 80119c6:	4b38      	ldr	r3, [pc, #224]	; (8011aa8 <SendFrameOnChannel+0x184>)
 80119c8:	493d      	ldr	r1, [pc, #244]	; (8011ac0 <SendFrameOnChannel+0x19c>)
 80119ca:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80119cc:	4a36      	ldr	r2, [pc, #216]	; (8011aa8 <SendFrameOnChannel+0x184>)
 80119ce:	2383      	movs	r3, #131	; 0x83
 80119d0:	00db      	lsls	r3, r3, #3
 80119d2:	58d2      	ldr	r2, [r2, r3]
 80119d4:	4b34      	ldr	r3, [pc, #208]	; (8011aa8 <SendFrameOnChannel+0x184>)
 80119d6:	493b      	ldr	r1, [pc, #236]	; (8011ac4 <SendFrameOnChannel+0x1a0>)
 80119d8:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80119da:	4a33      	ldr	r2, [pc, #204]	; (8011aa8 <SendFrameOnChannel+0x184>)
 80119dc:	2383      	movs	r3, #131	; 0x83
 80119de:	00db      	lsls	r3, r3, #3
 80119e0:	58d2      	ldr	r2, [r2, r3]
 80119e2:	4b31      	ldr	r3, [pc, #196]	; (8011aa8 <SendFrameOnChannel+0x184>)
 80119e4:	4938      	ldr	r1, [pc, #224]	; (8011ac8 <SendFrameOnChannel+0x1a4>)
 80119e6:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80119e8:	f002 f9b0 	bl	8013d4c <LoRaMacClassBIsBeaconModeActive>
 80119ec:	1e03      	subs	r3, r0, #0
 80119ee:	d00d      	beq.n	8011a0c <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80119f0:	4a2d      	ldr	r2, [pc, #180]	; (8011aa8 <SendFrameOnChannel+0x184>)
 80119f2:	2383      	movs	r3, #131	; 0x83
 80119f4:	00db      	lsls	r3, r3, #3
 80119f6:	58d3      	ldr	r3, [r2, r3]
 80119f8:	0018      	movs	r0, r3
 80119fa:	f002 fa0b 	bl	8013e14 <LoRaMacClassBIsUplinkCollision>
 80119fe:	0003      	movs	r3, r0
 8011a00:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 8011a02:	6a3b      	ldr	r3, [r7, #32]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d001      	beq.n	8011a0c <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011a08:	2310      	movs	r3, #16
 8011a0a:	e048      	b.n	8011a9e <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011a0c:	4b26      	ldr	r3, [pc, #152]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011a0e:	4a27      	ldr	r2, [pc, #156]	; (8011aac <SendFrameOnChannel+0x188>)
 8011a10:	589b      	ldr	r3, [r3, r2]
 8011a12:	227c      	movs	r2, #124	; 0x7c
 8011a14:	5c9b      	ldrb	r3, [r3, r2]
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d101      	bne.n	8011a1e <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8011a1a:	f002 fa04 	bl	8013e26 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011a1e:	f002 f9a5 	bl	8013d6c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8011a22:	4b21      	ldr	r3, [pc, #132]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011a24:	4a21      	ldr	r2, [pc, #132]	; (8011aac <SendFrameOnChannel+0x188>)
 8011a26:	589b      	ldr	r3, [r3, r2]
 8011a28:	2285      	movs	r2, #133	; 0x85
 8011a2a:	569b      	ldrsb	r3, [r3, r2]
 8011a2c:	b2da      	uxtb	r2, r3
 8011a2e:	4b1e      	ldr	r3, [pc, #120]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011a30:	4926      	ldr	r1, [pc, #152]	; (8011acc <SendFrameOnChannel+0x1a8>)
 8011a32:	5c5b      	ldrb	r3, [r3, r1]
 8011a34:	2527      	movs	r5, #39	; 0x27
 8011a36:	197c      	adds	r4, r7, r5
 8011a38:	0019      	movs	r1, r3
 8011a3a:	0010      	movs	r0, r2
 8011a3c:	f7ff fbea 	bl	8011214 <SecureFrame>
 8011a40:	0003      	movs	r3, r0
 8011a42:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011a44:	197b      	adds	r3, r7, r5
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d002      	beq.n	8011a52 <SendFrameOnChannel+0x12e>
    {
        return status;
 8011a4c:	197b      	adds	r3, r7, r5
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	e025      	b.n	8011a9e <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011a52:	4a15      	ldr	r2, [pc, #84]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011a54:	23d0      	movs	r3, #208	; 0xd0
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	58d3      	ldr	r3, [r2, r3]
 8011a5a:	2202      	movs	r2, #2
 8011a5c:	431a      	orrs	r2, r3
 8011a5e:	0011      	movs	r1, r2
 8011a60:	4a11      	ldr	r2, [pc, #68]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011a62:	23d0      	movs	r3, #208	; 0xd0
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8011a68:	4b0f      	ldr	r3, [pc, #60]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011a6a:	4a19      	ldr	r2, [pc, #100]	; (8011ad0 <SendFrameOnChannel+0x1ac>)
 8011a6c:	5c9b      	ldrb	r3, [r3, r2]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	4053      	eors	r3, r2
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d009      	beq.n	8011a8c <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 8011a78:	4a0b      	ldr	r2, [pc, #44]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011a7a:	2382      	movs	r3, #130	; 0x82
 8011a7c:	00db      	lsls	r3, r3, #3
 8011a7e:	5cd3      	ldrb	r3, [r2, r3]
 8011a80:	3301      	adds	r3, #1
 8011a82:	b2d9      	uxtb	r1, r3
 8011a84:	4a08      	ldr	r2, [pc, #32]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011a86:	2382      	movs	r3, #130	; 0x82
 8011a88:	00db      	lsls	r3, r3, #3
 8011a8a:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011a8c:	4b11      	ldr	r3, [pc, #68]	; (8011ad4 <SendFrameOnChannel+0x1b0>)
 8011a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a90:	4a05      	ldr	r2, [pc, #20]	; (8011aa8 <SendFrameOnChannel+0x184>)
 8011a92:	8812      	ldrh	r2, [r2, #0]
 8011a94:	b2d1      	uxtb	r1, r2
 8011a96:	4a10      	ldr	r2, [pc, #64]	; (8011ad8 <SendFrameOnChannel+0x1b4>)
 8011a98:	0010      	movs	r0, r2
 8011a9a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011a9c:	2300      	movs	r3, #0
}
 8011a9e:	0018      	movs	r0, r3
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	b00a      	add	sp, #40	; 0x28
 8011aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8011aa6:	46c0      	nop			; (mov r8, r8)
 8011aa8:	20000b6c 	.word	0x20000b6c
 8011aac:	00000484 	.word	0x00000484
 8011ab0:	20000f84 	.word	0x20000f84
 8011ab4:	0000043d 	.word	0x0000043d
 8011ab8:	0000043e 	.word	0x0000043e
 8011abc:	0000043f 	.word	0x0000043f
 8011ac0:	0000044c 	.word	0x0000044c
 8011ac4:	00000444 	.word	0x00000444
 8011ac8:	00000454 	.word	0x00000454
 8011acc:	00000415 	.word	0x00000415
 8011ad0:	00000414 	.word	0x00000414
 8011ad4:	0801e62c 	.word	0x0801e62c
 8011ad8:	20000b6e 	.word	0x20000b6e

08011adc <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b086      	sub	sp, #24
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	0002      	movs	r2, r0
 8011ae4:	1dbb      	adds	r3, r7, #6
 8011ae6:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8011ae8:	4b1f      	ldr	r3, [pc, #124]	; (8011b68 <SetTxContinuousWave+0x8c>)
 8011aea:	4a20      	ldr	r2, [pc, #128]	; (8011b6c <SetTxContinuousWave+0x90>)
 8011aec:	5c9a      	ldrb	r2, [r3, r2]
 8011aee:	2108      	movs	r1, #8
 8011af0:	187b      	adds	r3, r7, r1
 8011af2:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011af4:	4b1c      	ldr	r3, [pc, #112]	; (8011b68 <SetTxContinuousWave+0x8c>)
 8011af6:	4a1e      	ldr	r2, [pc, #120]	; (8011b70 <SetTxContinuousWave+0x94>)
 8011af8:	589b      	ldr	r3, [r3, r2]
 8011afa:	2285      	movs	r2, #133	; 0x85
 8011afc:	569a      	ldrsb	r2, [r3, r2]
 8011afe:	187b      	adds	r3, r7, r1
 8011b00:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011b02:	4b19      	ldr	r3, [pc, #100]	; (8011b68 <SetTxContinuousWave+0x8c>)
 8011b04:	4a1a      	ldr	r2, [pc, #104]	; (8011b70 <SetTxContinuousWave+0x94>)
 8011b06:	589b      	ldr	r3, [r3, r2]
 8011b08:	2284      	movs	r2, #132	; 0x84
 8011b0a:	569a      	ldrsb	r2, [r3, r2]
 8011b0c:	187b      	adds	r3, r7, r1
 8011b0e:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8011b10:	4b15      	ldr	r3, [pc, #84]	; (8011b68 <SetTxContinuousWave+0x8c>)
 8011b12:	4a17      	ldr	r2, [pc, #92]	; (8011b70 <SetTxContinuousWave+0x94>)
 8011b14:	589b      	ldr	r3, [r3, r2]
 8011b16:	22bc      	movs	r2, #188	; 0xbc
 8011b18:	589a      	ldr	r2, [r3, r2]
 8011b1a:	187b      	adds	r3, r7, r1
 8011b1c:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8011b1e:	4b12      	ldr	r3, [pc, #72]	; (8011b68 <SetTxContinuousWave+0x8c>)
 8011b20:	4a13      	ldr	r2, [pc, #76]	; (8011b70 <SetTxContinuousWave+0x94>)
 8011b22:	589b      	ldr	r3, [r3, r2]
 8011b24:	22c0      	movs	r2, #192	; 0xc0
 8011b26:	589a      	ldr	r2, [r3, r2]
 8011b28:	187b      	adds	r3, r7, r1
 8011b2a:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 8011b2c:	187b      	adds	r3, r7, r1
 8011b2e:	1dba      	adds	r2, r7, #6
 8011b30:	8812      	ldrh	r2, [r2, #0]
 8011b32:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8011b34:	4b0c      	ldr	r3, [pc, #48]	; (8011b68 <SetTxContinuousWave+0x8c>)
 8011b36:	4a0e      	ldr	r2, [pc, #56]	; (8011b70 <SetTxContinuousWave+0x94>)
 8011b38:	589b      	ldr	r3, [r3, r2]
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	187a      	adds	r2, r7, r1
 8011b3e:	0011      	movs	r1, r2
 8011b40:	0018      	movs	r0, r3
 8011b42:	f004 fc25 	bl	8016390 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011b46:	4a08      	ldr	r2, [pc, #32]	; (8011b68 <SetTxContinuousWave+0x8c>)
 8011b48:	23d0      	movs	r3, #208	; 0xd0
 8011b4a:	009b      	lsls	r3, r3, #2
 8011b4c:	58d3      	ldr	r3, [r2, r3]
 8011b4e:	2202      	movs	r2, #2
 8011b50:	431a      	orrs	r2, r3
 8011b52:	0011      	movs	r1, r2
 8011b54:	4a04      	ldr	r2, [pc, #16]	; (8011b68 <SetTxContinuousWave+0x8c>)
 8011b56:	23d0      	movs	r3, #208	; 0xd0
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8011b5c:	2300      	movs	r3, #0
}
 8011b5e:	0018      	movs	r0, r3
 8011b60:	46bd      	mov	sp, r7
 8011b62:	b006      	add	sp, #24
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	46c0      	nop			; (mov r8, r8)
 8011b68:	20000b6c 	.word	0x20000b6c
 8011b6c:	00000415 	.word	0x00000415
 8011b70:	00000484 	.word	0x00000484

08011b74 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b082      	sub	sp, #8
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6039      	str	r1, [r7, #0]
 8011b7c:	0011      	movs	r1, r2
 8011b7e:	1dbb      	adds	r3, r7, #6
 8011b80:	1c02      	adds	r2, r0, #0
 8011b82:	801a      	strh	r2, [r3, #0]
 8011b84:	1d7b      	adds	r3, r7, #5
 8011b86:	1c0a      	adds	r2, r1, #0
 8011b88:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011b8a:	4b0c      	ldr	r3, [pc, #48]	; (8011bbc <SetTxContinuousWave1+0x48>)
 8011b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b8e:	1d7a      	adds	r2, r7, #5
 8011b90:	2100      	movs	r1, #0
 8011b92:	5651      	ldrsb	r1, [r2, r1]
 8011b94:	1dba      	adds	r2, r7, #6
 8011b96:	8812      	ldrh	r2, [r2, #0]
 8011b98:	6838      	ldr	r0, [r7, #0]
 8011b9a:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011b9c:	4a08      	ldr	r2, [pc, #32]	; (8011bc0 <SetTxContinuousWave1+0x4c>)
 8011b9e:	23d0      	movs	r3, #208	; 0xd0
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	58d3      	ldr	r3, [r2, r3]
 8011ba4:	2202      	movs	r2, #2
 8011ba6:	431a      	orrs	r2, r3
 8011ba8:	0011      	movs	r1, r2
 8011baa:	4a05      	ldr	r2, [pc, #20]	; (8011bc0 <SetTxContinuousWave1+0x4c>)
 8011bac:	23d0      	movs	r3, #208	; 0xd0
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8011bb2:	2300      	movs	r3, #0
}
 8011bb4:	0018      	movs	r0, r3
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	b002      	add	sp, #8
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	0801e62c 	.word	0x0801e62c
 8011bc0:	20000b6c 	.word	0x20000b6c

08011bc4 <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8011bca:	4b20      	ldr	r3, [pc, #128]	; (8011c4c <GetCtxs+0x88>)
 8011bcc:	4a20      	ldr	r2, [pc, #128]	; (8011c50 <GetCtxs+0x8c>)
 8011bce:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8011bd0:	4b1e      	ldr	r3, [pc, #120]	; (8011c4c <GetCtxs+0x88>)
 8011bd2:	22b6      	movs	r2, #182	; 0xb6
 8011bd4:	0052      	lsls	r2, r2, #1
 8011bd6:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8011bd8:	4b1e      	ldr	r3, [pc, #120]	; (8011c54 <GetCtxs+0x90>)
 8011bda:	0018      	movs	r0, r3
 8011bdc:	f003 fa8c 	bl	80150f8 <LoRaMacCryptoGetNvmCtx>
 8011be0:	0002      	movs	r2, r0
 8011be2:	4b1a      	ldr	r3, [pc, #104]	; (8011c4c <GetCtxs+0x88>)
 8011be4:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 8011be6:	2300      	movs	r3, #0
 8011be8:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8011bea:	4b1b      	ldr	r3, [pc, #108]	; (8011c58 <GetCtxs+0x94>)
 8011bec:	4a1b      	ldr	r2, [pc, #108]	; (8011c5c <GetCtxs+0x98>)
 8011bee:	589b      	ldr	r3, [r3, r2]
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	1d3a      	adds	r2, r7, #4
 8011bf4:	0011      	movs	r1, r2
 8011bf6:	0018      	movs	r0, r3
 8011bf8:	f004 fa5f 	bl	80160ba <RegionGetNvmCtx>
 8011bfc:	0002      	movs	r2, r0
 8011bfe:	4b13      	ldr	r3, [pc, #76]	; (8011c4c <GetCtxs+0x88>)
 8011c00:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	4b11      	ldr	r3, [pc, #68]	; (8011c4c <GetCtxs+0x88>)
 8011c06:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8011c08:	4b15      	ldr	r3, [pc, #84]	; (8011c60 <GetCtxs+0x9c>)
 8011c0a:	0018      	movs	r0, r3
 8011c0c:	f7fb f868 	bl	800cce0 <SecureElementGetNvmCtx>
 8011c10:	0002      	movs	r2, r0
 8011c12:	4b0e      	ldr	r3, [pc, #56]	; (8011c4c <GetCtxs+0x88>)
 8011c14:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 8011c16:	4b13      	ldr	r3, [pc, #76]	; (8011c64 <GetCtxs+0xa0>)
 8011c18:	0018      	movs	r0, r3
 8011c1a:	f002 fa63 	bl	80140e4 <LoRaMacCommandsGetNvmCtx>
 8011c1e:	0002      	movs	r2, r0
 8011c20:	4b0a      	ldr	r3, [pc, #40]	; (8011c4c <GetCtxs+0x88>)
 8011c22:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8011c24:	4b10      	ldr	r3, [pc, #64]	; (8011c68 <GetCtxs+0xa4>)
 8011c26:	0018      	movs	r0, r3
 8011c28:	f002 f82a 	bl	8013c80 <LoRaMacClassBGetNvmCtx>
 8011c2c:	0002      	movs	r2, r0
 8011c2e:	4b07      	ldr	r3, [pc, #28]	; (8011c4c <GetCtxs+0x88>)
 8011c30:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8011c32:	4b0e      	ldr	r3, [pc, #56]	; (8011c6c <GetCtxs+0xa8>)
 8011c34:	0018      	movs	r0, r3
 8011c36:	f002 fcf5 	bl	8014624 <LoRaMacConfirmQueueGetNvmCtx>
 8011c3a:	0002      	movs	r2, r0
 8011c3c:	4b03      	ldr	r3, [pc, #12]	; (8011c4c <GetCtxs+0x88>)
 8011c3e:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 8011c40:	4b02      	ldr	r3, [pc, #8]	; (8011c4c <GetCtxs+0x88>)
}
 8011c42:	0018      	movs	r0, r3
 8011c44:	46bd      	mov	sp, r7
 8011c46:	b002      	add	sp, #8
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	46c0      	nop			; (mov r8, r8)
 8011c4c:	20001164 	.word	0x20001164
 8011c50:	20000ff8 	.word	0x20000ff8
 8011c54:	20001178 	.word	0x20001178
 8011c58:	20000b6c 	.word	0x20000b6c
 8011c5c:	00000484 	.word	0x00000484
 8011c60:	20001180 	.word	0x20001180
 8011c64:	20001188 	.word	0x20001188
 8011c68:	20001190 	.word	0x20001190
 8011c6c:	20001198 	.word	0x20001198

08011c70 <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d101      	bne.n	8011c82 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c7e:	2303      	movs	r3, #3
 8011c80:	e086      	b.n	8011d90 <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011c82:	4a45      	ldr	r2, [pc, #276]	; (8011d98 <RestoreCtxs+0x128>)
 8011c84:	23d0      	movs	r3, #208	; 0xd0
 8011c86:	009b      	lsls	r3, r3, #2
 8011c88:	58d3      	ldr	r3, [r2, r3]
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	d001      	beq.n	8011c92 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8011c8e:	2301      	movs	r3, #1
 8011c90:	e07e      	b.n	8011d90 <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d008      	beq.n	8011cac <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6819      	ldr	r1, [r3, #0]
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	b29a      	uxth	r2, r3
 8011ca4:	4b3d      	ldr	r3, [pc, #244]	; (8011d9c <RestoreCtxs+0x12c>)
 8011ca6:	0018      	movs	r0, r3
 8011ca8:	f006 fe32 	bl	8018910 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8011cac:	2108      	movs	r1, #8
 8011cae:	187b      	adds	r3, r7, r1
 8011cb0:	2203      	movs	r2, #3
 8011cb2:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	689a      	ldr	r2, [r3, #8]
 8011cb8:	187b      	adds	r3, r7, r1
 8011cba:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8011cbc:	4b36      	ldr	r3, [pc, #216]	; (8011d98 <RestoreCtxs+0x128>)
 8011cbe:	4a38      	ldr	r2, [pc, #224]	; (8011da0 <RestoreCtxs+0x130>)
 8011cc0:	589b      	ldr	r3, [r3, r2]
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	187a      	adds	r2, r7, r1
 8011cc6:	0011      	movs	r1, r2
 8011cc8:	0018      	movs	r0, r3
 8011cca:	f004 f9e1 	bl	8016090 <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011cce:	4b32      	ldr	r3, [pc, #200]	; (8011d98 <RestoreCtxs+0x128>)
 8011cd0:	4a34      	ldr	r2, [pc, #208]	; (8011da4 <RestoreCtxs+0x134>)
 8011cd2:	5c99      	ldrb	r1, [r3, r2]
 8011cd4:	4a30      	ldr	r2, [pc, #192]	; (8011d98 <RestoreCtxs+0x128>)
 8011cd6:	23f8      	movs	r3, #248	; 0xf8
 8011cd8:	009b      	lsls	r3, r3, #2
 8011cda:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8011cdc:	4b2e      	ldr	r3, [pc, #184]	; (8011d98 <RestoreCtxs+0x128>)
 8011cde:	4a30      	ldr	r2, [pc, #192]	; (8011da0 <RestoreCtxs+0x130>)
 8011ce0:	589b      	ldr	r3, [r3, r2]
 8011ce2:	22b0      	movs	r2, #176	; 0xb0
 8011ce4:	5899      	ldr	r1, [r3, r2]
 8011ce6:	4a2c      	ldr	r2, [pc, #176]	; (8011d98 <RestoreCtxs+0x128>)
 8011ce8:	23f9      	movs	r3, #249	; 0xf9
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8011cee:	4b2a      	ldr	r3, [pc, #168]	; (8011d98 <RestoreCtxs+0x128>)
 8011cf0:	4a2b      	ldr	r2, [pc, #172]	; (8011da0 <RestoreCtxs+0x130>)
 8011cf2:	589b      	ldr	r3, [r3, r2]
 8011cf4:	22b9      	movs	r2, #185	; 0xb9
 8011cf6:	5c99      	ldrb	r1, [r3, r2]
 8011cf8:	4a27      	ldr	r2, [pc, #156]	; (8011d98 <RestoreCtxs+0x128>)
 8011cfa:	23fc      	movs	r3, #252	; 0xfc
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8011d00:	4b25      	ldr	r3, [pc, #148]	; (8011d98 <RestoreCtxs+0x128>)
 8011d02:	4a27      	ldr	r2, [pc, #156]	; (8011da0 <RestoreCtxs+0x130>)
 8011d04:	589b      	ldr	r3, [r3, r2]
 8011d06:	22ca      	movs	r2, #202	; 0xca
 8011d08:	5c99      	ldrb	r1, [r3, r2]
 8011d0a:	4b23      	ldr	r3, [pc, #140]	; (8011d98 <RestoreCtxs+0x128>)
 8011d0c:	4a26      	ldr	r2, [pc, #152]	; (8011da8 <RestoreCtxs+0x138>)
 8011d0e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011d10:	4b21      	ldr	r3, [pc, #132]	; (8011d98 <RestoreCtxs+0x128>)
 8011d12:	4a26      	ldr	r2, [pc, #152]	; (8011dac <RestoreCtxs+0x13c>)
 8011d14:	2101      	movs	r1, #1
 8011d16:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011d18:	4b1f      	ldr	r3, [pc, #124]	; (8011d98 <RestoreCtxs+0x128>)
 8011d1a:	4a25      	ldr	r2, [pc, #148]	; (8011db0 <RestoreCtxs+0x140>)
 8011d1c:	2102      	movs	r1, #2
 8011d1e:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	699b      	ldr	r3, [r3, #24]
 8011d24:	0018      	movs	r0, r3
 8011d26:	f7fa ffc5 	bl	800ccb4 <SecureElementRestoreNvmCtx>
 8011d2a:	1e03      	subs	r3, r0, #0
 8011d2c:	d001      	beq.n	8011d32 <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d2e:	2311      	movs	r3, #17
 8011d30:	e02e      	b.n	8011d90 <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	691b      	ldr	r3, [r3, #16]
 8011d36:	0018      	movs	r0, r3
 8011d38:	f003 f9c8 	bl	80150cc <LoRaMacCryptoRestoreNvmCtx>
 8011d3c:	1e03      	subs	r3, r0, #0
 8011d3e:	d001      	beq.n	8011d44 <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011d40:	2311      	movs	r3, #17
 8011d42:	e025      	b.n	8011d90 <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6a1b      	ldr	r3, [r3, #32]
 8011d48:	0018      	movs	r0, r3
 8011d4a:	f002 f9b5 	bl	80140b8 <LoRaMacCommandsRestoreNvmCtx>
 8011d4e:	1e03      	subs	r3, r0, #0
 8011d50:	d001      	beq.n	8011d56 <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011d52:	2313      	movs	r3, #19
 8011d54:	e01c      	b.n	8011d90 <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d5a:	0018      	movs	r0, r3
 8011d5c:	f001 ff87 	bl	8013c6e <LoRaMacClassBRestoreNvmCtx>
 8011d60:	0003      	movs	r3, r0
 8011d62:	001a      	movs	r2, r3
 8011d64:	2301      	movs	r3, #1
 8011d66:	4053      	eors	r3, r2
 8011d68:	b2db      	uxtb	r3, r3
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d001      	beq.n	8011d72 <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8011d6e:	2314      	movs	r3, #20
 8011d70:	e00e      	b.n	8011d90 <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d76:	0018      	movs	r0, r3
 8011d78:	f002 fc3e 	bl	80145f8 <LoRaMacConfirmQueueRestoreNvmCtx>
 8011d7c:	0003      	movs	r3, r0
 8011d7e:	001a      	movs	r2, r3
 8011d80:	2301      	movs	r3, #1
 8011d82:	4053      	eors	r3, r2
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d001      	beq.n	8011d8e <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8011d8a:	2315      	movs	r3, #21
 8011d8c:	e000      	b.n	8011d90 <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 8011d8e:	2300      	movs	r3, #0
}
 8011d90:	0018      	movs	r0, r3
 8011d92:	46bd      	mov	sp, r7
 8011d94:	b004      	add	sp, #16
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	20000b6c 	.word	0x20000b6c
 8011d9c:	20000ff8 	.word	0x20000ff8
 8011da0:	00000484 	.word	0x00000484
 8011da4:	00000415 	.word	0x00000415
 8011da8:	000003f1 	.word	0x000003f1
 8011dac:	000003f2 	.word	0x000003f2
 8011db0:	000003f3 	.word	0x000003f3

08011db4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d002      	beq.n	8011dca <DetermineFrameType+0x16>
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d101      	bne.n	8011dce <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011dca:	2303      	movs	r3, #3
 8011dcc:	e03b      	b.n	8011e46 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	7b1b      	ldrb	r3, [r3, #12]
 8011dd2:	220f      	movs	r2, #15
 8011dd4:	4013      	ands	r3, r2
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d008      	beq.n	8011dee <DetermineFrameType+0x3a>
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2220      	movs	r2, #32
 8011de0:	5c9b      	ldrb	r3, [r3, r2]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d003      	beq.n	8011dee <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	2200      	movs	r2, #0
 8011dea:	701a      	strb	r2, [r3, #0]
 8011dec:	e02a      	b.n	8011e44 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2228      	movs	r2, #40	; 0x28
 8011df2:	5c9b      	ldrb	r3, [r3, r2]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d103      	bne.n	8011e00 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	2201      	movs	r2, #1
 8011dfc:	701a      	strb	r2, [r3, #0]
 8011dfe:	e021      	b.n	8011e44 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	7b1b      	ldrb	r3, [r3, #12]
 8011e04:	220f      	movs	r2, #15
 8011e06:	4013      	ands	r3, r2
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d108      	bne.n	8011e20 <DetermineFrameType+0x6c>
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2220      	movs	r2, #32
 8011e12:	5c9b      	ldrb	r3, [r3, r2]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d103      	bne.n	8011e20 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	2202      	movs	r2, #2
 8011e1c:	701a      	strb	r2, [r3, #0]
 8011e1e:	e011      	b.n	8011e44 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	7b1b      	ldrb	r3, [r3, #12]
 8011e24:	220f      	movs	r2, #15
 8011e26:	4013      	ands	r3, r2
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d108      	bne.n	8011e40 <DetermineFrameType+0x8c>
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	2220      	movs	r2, #32
 8011e32:	5c9b      	ldrb	r3, [r3, r2]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d003      	beq.n	8011e40 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	2203      	movs	r2, #3
 8011e3c:	701a      	strb	r2, [r3, #0]
 8011e3e:	e001      	b.n	8011e44 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011e40:	2317      	movs	r3, #23
 8011e42:	e000      	b.n	8011e46 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	0018      	movs	r0, r3
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	b002      	add	sp, #8
 8011e4c:	bd80      	pop	{r7, pc}
	...

08011e50 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8011e54:	4a14      	ldr	r2, [pc, #80]	; (8011ea8 <CheckRetransUnconfirmedUplink+0x58>)
 8011e56:	2382      	movs	r3, #130	; 0x82
 8011e58:	00db      	lsls	r3, r3, #3
 8011e5a:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8011e5c:	4b12      	ldr	r3, [pc, #72]	; (8011ea8 <CheckRetransUnconfirmedUplink+0x58>)
 8011e5e:	4913      	ldr	r1, [pc, #76]	; (8011eac <CheckRetransUnconfirmedUplink+0x5c>)
 8011e60:	585b      	ldr	r3, [r3, r1]
 8011e62:	21a4      	movs	r1, #164	; 0xa4
 8011e64:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d301      	bcc.n	8011e6e <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	e018      	b.n	8011ea0 <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011e6e:	4b0e      	ldr	r3, [pc, #56]	; (8011ea8 <CheckRetransUnconfirmedUplink+0x58>)
 8011e70:	4a0f      	ldr	r2, [pc, #60]	; (8011eb0 <CheckRetransUnconfirmedUplink+0x60>)
 8011e72:	5c9b      	ldrb	r3, [r3, r2]
 8011e74:	2202      	movs	r2, #2
 8011e76:	4013      	ands	r3, r2
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d00f      	beq.n	8011e9e <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8011e7e:	4b0a      	ldr	r3, [pc, #40]	; (8011ea8 <CheckRetransUnconfirmedUplink+0x58>)
 8011e80:	4a0a      	ldr	r2, [pc, #40]	; (8011eac <CheckRetransUnconfirmedUplink+0x5c>)
 8011e82:	589b      	ldr	r3, [r3, r2]
 8011e84:	227c      	movs	r2, #124	; 0x7c
 8011e86:	5c9b      	ldrb	r3, [r3, r2]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d101      	bne.n	8011e90 <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	e007      	b.n	8011ea0 <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8011e90:	4b05      	ldr	r3, [pc, #20]	; (8011ea8 <CheckRetransUnconfirmedUplink+0x58>)
 8011e92:	4a08      	ldr	r2, [pc, #32]	; (8011eb4 <CheckRetransUnconfirmedUplink+0x64>)
 8011e94:	5c9b      	ldrb	r3, [r3, r2]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d101      	bne.n	8011e9e <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	e000      	b.n	8011ea0 <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 8011e9e:	2300      	movs	r3, #0
}
 8011ea0:	0018      	movs	r0, r3
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
 8011ea6:	46c0      	nop			; (mov r8, r8)
 8011ea8:	20000b6c 	.word	0x20000b6c
 8011eac:	00000484 	.word	0x00000484
 8011eb0:	00000481 	.word	0x00000481
 8011eb4:	0000042d 	.word	0x0000042d

08011eb8 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011ebc:	4b0e      	ldr	r3, [pc, #56]	; (8011ef8 <CheckRetransConfirmedUplink+0x40>)
 8011ebe:	4a0f      	ldr	r2, [pc, #60]	; (8011efc <CheckRetransConfirmedUplink+0x44>)
 8011ec0:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8011ec2:	4b0d      	ldr	r3, [pc, #52]	; (8011ef8 <CheckRetransConfirmedUplink+0x40>)
 8011ec4:	490e      	ldr	r1, [pc, #56]	; (8011f00 <CheckRetransConfirmedUplink+0x48>)
 8011ec6:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d301      	bcc.n	8011ed0 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8011ecc:	2301      	movs	r3, #1
 8011ece:	e010      	b.n	8011ef2 <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011ed0:	4b09      	ldr	r3, [pc, #36]	; (8011ef8 <CheckRetransConfirmedUplink+0x40>)
 8011ed2:	4a0c      	ldr	r2, [pc, #48]	; (8011f04 <CheckRetransConfirmedUplink+0x4c>)
 8011ed4:	5c9b      	ldrb	r3, [r3, r2]
 8011ed6:	2202      	movs	r2, #2
 8011ed8:	4013      	ands	r3, r2
 8011eda:	b2db      	uxtb	r3, r3
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d007      	beq.n	8011ef0 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011ee0:	4a05      	ldr	r2, [pc, #20]	; (8011ef8 <CheckRetransConfirmedUplink+0x40>)
 8011ee2:	2388      	movs	r3, #136	; 0x88
 8011ee4:	00db      	lsls	r3, r3, #3
 8011ee6:	5cd3      	ldrb	r3, [r2, r3]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d001      	beq.n	8011ef0 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8011eec:	2301      	movs	r3, #1
 8011eee:	e000      	b.n	8011ef2 <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8011ef0:	2300      	movs	r3, #0
}
 8011ef2:	0018      	movs	r0, r3
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}
 8011ef8:	20000b6c 	.word	0x20000b6c
 8011efc:	00000412 	.word	0x00000412
 8011f00:	00000411 	.word	0x00000411
 8011f04:	00000481 	.word	0x00000481

08011f08 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011f0c:	4b1e      	ldr	r3, [pc, #120]	; (8011f88 <StopRetransmission+0x80>)
 8011f0e:	4a1f      	ldr	r2, [pc, #124]	; (8011f8c <StopRetransmission+0x84>)
 8011f10:	5c9b      	ldrb	r3, [r3, r2]
 8011f12:	2202      	movs	r2, #2
 8011f14:	4013      	ands	r3, r2
 8011f16:	b2db      	uxtb	r3, r3
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d009      	beq.n	8011f30 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8011f1c:	4b1a      	ldr	r3, [pc, #104]	; (8011f88 <StopRetransmission+0x80>)
 8011f1e:	4a1c      	ldr	r2, [pc, #112]	; (8011f90 <StopRetransmission+0x88>)
 8011f20:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d013      	beq.n	8011f4e <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011f26:	4b18      	ldr	r3, [pc, #96]	; (8011f88 <StopRetransmission+0x80>)
 8011f28:	4a19      	ldr	r2, [pc, #100]	; (8011f90 <StopRetransmission+0x88>)
 8011f2a:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d00e      	beq.n	8011f4e <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8011f30:	4b15      	ldr	r3, [pc, #84]	; (8011f88 <StopRetransmission+0x80>)
 8011f32:	4a18      	ldr	r2, [pc, #96]	; (8011f94 <StopRetransmission+0x8c>)
 8011f34:	589b      	ldr	r3, [r3, r2]
 8011f36:	227e      	movs	r2, #126	; 0x7e
 8011f38:	5c9b      	ldrb	r3, [r3, r2]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d007      	beq.n	8011f4e <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8011f3e:	4b12      	ldr	r3, [pc, #72]	; (8011f88 <StopRetransmission+0x80>)
 8011f40:	4a14      	ldr	r2, [pc, #80]	; (8011f94 <StopRetransmission+0x8c>)
 8011f42:	589b      	ldr	r3, [r3, r2]
 8011f44:	2280      	movs	r2, #128	; 0x80
 8011f46:	589a      	ldr	r2, [r3, r2]
 8011f48:	3201      	adds	r2, #1
 8011f4a:	2180      	movs	r1, #128	; 0x80
 8011f4c:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011f4e:	4a0e      	ldr	r2, [pc, #56]	; (8011f88 <StopRetransmission+0x80>)
 8011f50:	2382      	movs	r3, #130	; 0x82
 8011f52:	00db      	lsls	r3, r3, #3
 8011f54:	2100      	movs	r1, #0
 8011f56:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 8011f58:	4b0b      	ldr	r3, [pc, #44]	; (8011f88 <StopRetransmission+0x80>)
 8011f5a:	4a0f      	ldr	r2, [pc, #60]	; (8011f98 <StopRetransmission+0x90>)
 8011f5c:	2100      	movs	r1, #0
 8011f5e:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8011f60:	4b09      	ldr	r3, [pc, #36]	; (8011f88 <StopRetransmission+0x80>)
 8011f62:	4a0e      	ldr	r2, [pc, #56]	; (8011f9c <StopRetransmission+0x94>)
 8011f64:	2100      	movs	r1, #0
 8011f66:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011f68:	4a07      	ldr	r2, [pc, #28]	; (8011f88 <StopRetransmission+0x80>)
 8011f6a:	23d0      	movs	r3, #208	; 0xd0
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	58d3      	ldr	r3, [r2, r3]
 8011f70:	2202      	movs	r2, #2
 8011f72:	4393      	bics	r3, r2
 8011f74:	0019      	movs	r1, r3
 8011f76:	4a04      	ldr	r2, [pc, #16]	; (8011f88 <StopRetransmission+0x80>)
 8011f78:	23d0      	movs	r3, #208	; 0xd0
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	50d1      	str	r1, [r2, r3]

    return true;
 8011f7e:	2301      	movs	r3, #1
}
 8011f80:	0018      	movs	r0, r3
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	46c0      	nop			; (mov r8, r8)
 8011f88:	20000b6c 	.word	0x20000b6c
 8011f8c:	00000481 	.word	0x00000481
 8011f90:	0000042d 	.word	0x0000042d
 8011f94:	00000484 	.word	0x00000484
 8011f98:	00000414 	.word	0x00000414
 8011f9c:	00000413 	.word	0x00000413

08011fa0 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8011fa6:	4b21      	ldr	r3, [pc, #132]	; (801202c <AckTimeoutRetriesProcess+0x8c>)
 8011fa8:	4a21      	ldr	r2, [pc, #132]	; (8012030 <AckTimeoutRetriesProcess+0x90>)
 8011faa:	5c9a      	ldrb	r2, [r3, r2]
 8011fac:	4b1f      	ldr	r3, [pc, #124]	; (801202c <AckTimeoutRetriesProcess+0x8c>)
 8011fae:	4921      	ldr	r1, [pc, #132]	; (8012034 <AckTimeoutRetriesProcess+0x94>)
 8011fb0:	5c5b      	ldrb	r3, [r3, r1]
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d236      	bcs.n	8012024 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8011fb6:	4b1d      	ldr	r3, [pc, #116]	; (801202c <AckTimeoutRetriesProcess+0x8c>)
 8011fb8:	4a1d      	ldr	r2, [pc, #116]	; (8012030 <AckTimeoutRetriesProcess+0x90>)
 8011fba:	5c9b      	ldrb	r3, [r3, r2]
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	b2d9      	uxtb	r1, r3
 8011fc0:	4b1a      	ldr	r3, [pc, #104]	; (801202c <AckTimeoutRetriesProcess+0x8c>)
 8011fc2:	4a1b      	ldr	r2, [pc, #108]	; (8012030 <AckTimeoutRetriesProcess+0x90>)
 8011fc4:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8011fc6:	4b19      	ldr	r3, [pc, #100]	; (801202c <AckTimeoutRetriesProcess+0x8c>)
 8011fc8:	4a19      	ldr	r2, [pc, #100]	; (8012030 <AckTimeoutRetriesProcess+0x90>)
 8011fca:	5c9b      	ldrb	r3, [r3, r2]
 8011fcc:	2201      	movs	r2, #1
 8011fce:	4013      	ands	r3, r2
 8011fd0:	b2db      	uxtb	r3, r3
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d026      	beq.n	8012024 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011fd6:	2108      	movs	r1, #8
 8011fd8:	187b      	adds	r3, r7, r1
 8011fda:	2222      	movs	r2, #34	; 0x22
 8011fdc:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011fde:	4b13      	ldr	r3, [pc, #76]	; (801202c <AckTimeoutRetriesProcess+0x8c>)
 8011fe0:	4a15      	ldr	r2, [pc, #84]	; (8012038 <AckTimeoutRetriesProcess+0x98>)
 8011fe2:	589b      	ldr	r3, [r3, r2]
 8011fe4:	22b8      	movs	r2, #184	; 0xb8
 8011fe6:	5c9a      	ldrb	r2, [r3, r2]
 8011fe8:	187b      	adds	r3, r7, r1
 8011fea:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011fec:	4b0f      	ldr	r3, [pc, #60]	; (801202c <AckTimeoutRetriesProcess+0x8c>)
 8011fee:	4a12      	ldr	r2, [pc, #72]	; (8012038 <AckTimeoutRetriesProcess+0x98>)
 8011ff0:	589b      	ldr	r3, [r3, r2]
 8011ff2:	2285      	movs	r2, #133	; 0x85
 8011ff4:	569a      	ldrsb	r2, [r3, r2]
 8011ff6:	187b      	adds	r3, r7, r1
 8011ff8:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011ffa:	4b0c      	ldr	r3, [pc, #48]	; (801202c <AckTimeoutRetriesProcess+0x8c>)
 8011ffc:	4a0e      	ldr	r2, [pc, #56]	; (8012038 <AckTimeoutRetriesProcess+0x98>)
 8011ffe:	589b      	ldr	r3, [r3, r2]
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	187a      	adds	r2, r7, r1
 8012004:	0011      	movs	r1, r2
 8012006:	0018      	movs	r0, r3
 8012008:	f004 f807 	bl	801601a <RegionGetPhyParam>
 801200c:	0003      	movs	r3, r0
 801200e:	001a      	movs	r2, r3
 8012010:	1d3b      	adds	r3, r7, #4
 8012012:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8012014:	1d3b      	adds	r3, r7, #4
 8012016:	6819      	ldr	r1, [r3, #0]
 8012018:	4b04      	ldr	r3, [pc, #16]	; (801202c <AckTimeoutRetriesProcess+0x8c>)
 801201a:	4a07      	ldr	r2, [pc, #28]	; (8012038 <AckTimeoutRetriesProcess+0x98>)
 801201c:	589b      	ldr	r3, [r3, r2]
 801201e:	b249      	sxtb	r1, r1
 8012020:	2285      	movs	r2, #133	; 0x85
 8012022:	5499      	strb	r1, [r3, r2]
        }
    }
}
 8012024:	46c0      	nop			; (mov r8, r8)
 8012026:	46bd      	mov	sp, r7
 8012028:	b004      	add	sp, #16
 801202a:	bd80      	pop	{r7, pc}
 801202c:	20000b6c 	.word	0x20000b6c
 8012030:	00000412 	.word	0x00000412
 8012034:	00000411 	.word	0x00000411
 8012038:	00000484 	.word	0x00000484

0801203c <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012042:	4a16      	ldr	r2, [pc, #88]	; (801209c <AckTimeoutRetriesFinalize+0x60>)
 8012044:	2388      	movs	r3, #136	; 0x88
 8012046:	00db      	lsls	r3, r3, #3
 8012048:	5cd3      	ldrb	r3, [r2, r3]
 801204a:	2201      	movs	r2, #1
 801204c:	4053      	eors	r3, r2
 801204e:	b2db      	uxtb	r3, r3
 8012050:	2b00      	cmp	r3, #0
 8012052:	d018      	beq.n	8012086 <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012054:	003b      	movs	r3, r7
 8012056:	2202      	movs	r2, #2
 8012058:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 801205a:	4b11      	ldr	r3, [pc, #68]	; (80120a0 <AckTimeoutRetriesFinalize+0x64>)
 801205c:	689a      	ldr	r2, [r3, #8]
 801205e:	003b      	movs	r3, r7
 8012060:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012062:	4b0e      	ldr	r3, [pc, #56]	; (801209c <AckTimeoutRetriesFinalize+0x60>)
 8012064:	4a0f      	ldr	r2, [pc, #60]	; (80120a4 <AckTimeoutRetriesFinalize+0x68>)
 8012066:	589b      	ldr	r3, [r3, r2]
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	003a      	movs	r2, r7
 801206c:	0011      	movs	r1, r2
 801206e:	0018      	movs	r0, r3
 8012070:	f004 f80e 	bl	8016090 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012074:	4b09      	ldr	r3, [pc, #36]	; (801209c <AckTimeoutRetriesFinalize+0x60>)
 8012076:	4a0c      	ldr	r2, [pc, #48]	; (80120a8 <AckTimeoutRetriesFinalize+0x6c>)
 8012078:	2100      	movs	r1, #0
 801207a:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 801207c:	4a07      	ldr	r2, [pc, #28]	; (801209c <AckTimeoutRetriesFinalize+0x60>)
 801207e:	2388      	movs	r3, #136	; 0x88
 8012080:	00db      	lsls	r3, r3, #3
 8012082:	2100      	movs	r1, #0
 8012084:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012086:	4b05      	ldr	r3, [pc, #20]	; (801209c <AckTimeoutRetriesFinalize+0x60>)
 8012088:	4a08      	ldr	r2, [pc, #32]	; (80120ac <AckTimeoutRetriesFinalize+0x70>)
 801208a:	5c99      	ldrb	r1, [r3, r2]
 801208c:	4b03      	ldr	r3, [pc, #12]	; (801209c <AckTimeoutRetriesFinalize+0x60>)
 801208e:	4a08      	ldr	r2, [pc, #32]	; (80120b0 <AckTimeoutRetriesFinalize+0x74>)
 8012090:	5499      	strb	r1, [r3, r2]
}
 8012092:	46c0      	nop			; (mov r8, r8)
 8012094:	46bd      	mov	sp, r7
 8012096:	b002      	add	sp, #8
 8012098:	bd80      	pop	{r7, pc}
 801209a:	46c0      	nop			; (mov r8, r8)
 801209c:	20000b6c 	.word	0x20000b6c
 80120a0:	20001164 	.word	0x20001164
 80120a4:	00000484 	.word	0x00000484
 80120a8:	00000414 	.word	0x00000414
 80120ac:	00000412 	.word	0x00000412
 80120b0:	00000441 	.word	0x00000441

080120b4 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	0002      	movs	r2, r0
 80120bc:	1dfb      	adds	r3, r7, #7
 80120be:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80120c0:	4a0c      	ldr	r2, [pc, #48]	; (80120f4 <CallNvmCtxCallback+0x40>)
 80120c2:	23d2      	movs	r3, #210	; 0xd2
 80120c4:	009b      	lsls	r3, r3, #2
 80120c6:	58d3      	ldr	r3, [r2, r3]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d00f      	beq.n	80120ec <CallNvmCtxCallback+0x38>
 80120cc:	4a09      	ldr	r2, [pc, #36]	; (80120f4 <CallNvmCtxCallback+0x40>)
 80120ce:	23d2      	movs	r3, #210	; 0xd2
 80120d0:	009b      	lsls	r3, r3, #2
 80120d2:	58d3      	ldr	r3, [r2, r3]
 80120d4:	689b      	ldr	r3, [r3, #8]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d008      	beq.n	80120ec <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 80120da:	4a06      	ldr	r2, [pc, #24]	; (80120f4 <CallNvmCtxCallback+0x40>)
 80120dc:	23d2      	movs	r3, #210	; 0xd2
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	58d3      	ldr	r3, [r2, r3]
 80120e2:	689b      	ldr	r3, [r3, #8]
 80120e4:	1dfa      	adds	r2, r7, #7
 80120e6:	7812      	ldrb	r2, [r2, #0]
 80120e8:	0010      	movs	r0, r2
 80120ea:	4798      	blx	r3
    }
}
 80120ec:	46c0      	nop			; (mov r8, r8)
 80120ee:	46bd      	mov	sp, r7
 80120f0:	b002      	add	sp, #8
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	20000b6c 	.word	0x20000b6c

080120f8 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 80120fc:	2000      	movs	r0, #0
 80120fe:	f7ff ffd9 	bl	80120b4 <CallNvmCtxCallback>
}
 8012102:	46c0      	nop			; (mov r8, r8)
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8012108:	b580      	push	{r7, lr}
 801210a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 801210c:	2001      	movs	r0, #1
 801210e:	f7ff ffd1 	bl	80120b4 <CallNvmCtxCallback>
}
 8012112:	46c0      	nop			; (mov r8, r8)
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8012118:	b580      	push	{r7, lr}
 801211a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 801211c:	2002      	movs	r0, #2
 801211e:	f7ff ffc9 	bl	80120b4 <CallNvmCtxCallback>
}
 8012122:	46c0      	nop			; (mov r8, r8)
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8012128:	b580      	push	{r7, lr}
 801212a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 801212c:	2003      	movs	r0, #3
 801212e:	f7ff ffc1 	bl	80120b4 <CallNvmCtxCallback>
}
 8012132:	46c0      	nop			; (mov r8, r8)
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8012138:	b580      	push	{r7, lr}
 801213a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 801213c:	2004      	movs	r0, #4
 801213e:	f7ff ffb9 	bl	80120b4 <CallNvmCtxCallback>
}
 8012142:	46c0      	nop			; (mov r8, r8)
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8012148:	b580      	push	{r7, lr}
 801214a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 801214c:	2005      	movs	r0, #5
 801214e:	f7ff ffb1 	bl	80120b4 <CallNvmCtxCallback>
}
 8012152:	46c0      	nop			; (mov r8, r8)
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 801215c:	2006      	movs	r0, #6
 801215e:	f7ff ffa9 	bl	80120b4 <CallNvmCtxCallback>
}
 8012162:	46c0      	nop			; (mov r8, r8)
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8012168:	b580      	push	{r7, lr}
 801216a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801216c:	4b0a      	ldr	r3, [pc, #40]	; (8012198 <IsRequestPending+0x30>)
 801216e:	4a0b      	ldr	r2, [pc, #44]	; (801219c <IsRequestPending+0x34>)
 8012170:	5c9b      	ldrb	r3, [r3, r2]
 8012172:	2204      	movs	r2, #4
 8012174:	4013      	ands	r3, r2
 8012176:	b2db      	uxtb	r3, r3
 8012178:	2b00      	cmp	r3, #0
 801217a:	d107      	bne.n	801218c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 801217c:	4b06      	ldr	r3, [pc, #24]	; (8012198 <IsRequestPending+0x30>)
 801217e:	4a07      	ldr	r2, [pc, #28]	; (801219c <IsRequestPending+0x34>)
 8012180:	5c9b      	ldrb	r3, [r3, r2]
 8012182:	2201      	movs	r2, #1
 8012184:	4013      	ands	r3, r2
 8012186:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012188:	2b00      	cmp	r3, #0
 801218a:	d001      	beq.n	8012190 <IsRequestPending+0x28>
    {
        return 1;
 801218c:	2301      	movs	r3, #1
 801218e:	e000      	b.n	8012192 <IsRequestPending+0x2a>
    }
    return 0;
 8012190:	2300      	movs	r3, #0
}
 8012192:	0018      	movs	r0, r3
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	20000b6c 	.word	0x20000b6c
 801219c:	00000481 	.word	0x00000481

080121a0 <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80121a4:	4a08      	ldr	r2, [pc, #32]	; (80121c8 <LoRaMacIsBusy+0x28>)
 80121a6:	23d0      	movs	r3, #208	; 0xd0
 80121a8:	009b      	lsls	r3, r3, #2
 80121aa:	58d3      	ldr	r3, [r2, r3]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d106      	bne.n	80121be <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80121b0:	4b05      	ldr	r3, [pc, #20]	; (80121c8 <LoRaMacIsBusy+0x28>)
 80121b2:	4a06      	ldr	r2, [pc, #24]	; (80121cc <LoRaMacIsBusy+0x2c>)
 80121b4:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	d101      	bne.n	80121be <LoRaMacIsBusy+0x1e>
    {
        return false;
 80121ba:	2300      	movs	r3, #0
 80121bc:	e000      	b.n	80121c0 <LoRaMacIsBusy+0x20>
    }
    return true;
 80121be:	2301      	movs	r3, #1
}
 80121c0:	0018      	movs	r0, r3
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	46c0      	nop			; (mov r8, r8)
 80121c8:	20000b6c 	.word	0x20000b6c
 80121cc:	00000482 	.word	0x00000482

080121d0 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 80121d6:	1dfb      	adds	r3, r7, #7
 80121d8:	2200      	movs	r2, #0
 80121da:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 80121dc:	f7fd f972 	bl	800f4c4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80121e0:	f001 fe26 	bl	8013e30 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80121e4:	4b1b      	ldr	r3, [pc, #108]	; (8012254 <LoRaMacProcess+0x84>)
 80121e6:	4a1c      	ldr	r2, [pc, #112]	; (8012258 <LoRaMacProcess+0x88>)
 80121e8:	5c9b      	ldrb	r3, [r3, r2]
 80121ea:	2220      	movs	r2, #32
 80121ec:	4013      	ands	r3, r2
 80121ee:	b2db      	uxtb	r3, r3
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d020      	beq.n	8012236 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80121f4:	2000      	movs	r0, #0
 80121f6:	f7fd f9b1 	bl	800f55c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80121fa:	f7fd fb8d 	bl	800f918 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80121fe:	f7ff ffb3 	bl	8012168 <IsRequestPending>
 8012202:	1e03      	subs	r3, r0, #0
 8012204:	d008      	beq.n	8012218 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8012206:	f7fd fb5b 	bl	800f8c0 <LoRaMacCheckForBeaconAcquisition>
 801220a:	0003      	movs	r3, r0
 801220c:	0019      	movs	r1, r3
 801220e:	1dfb      	adds	r3, r7, #7
 8012210:	1dfa      	adds	r2, r7, #7
 8012212:	7812      	ldrb	r2, [r2, #0]
 8012214:	430a      	orrs	r2, r1
 8012216:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8012218:	1dfb      	adds	r3, r7, #7
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d103      	bne.n	8012228 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8012220:	f7fd fb0c 	bl	800f83c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012224:	f7fd fa88 	bl	800f738 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012228:	f7fd f9ac 	bl	800f584 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 801222c:	f7fd fa10 	bl	800f650 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012230:	2001      	movs	r0, #1
 8012232:	f7fd f993 	bl	800f55c <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8012236:	f7fd fa27 	bl	800f688 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801223a:	4a06      	ldr	r2, [pc, #24]	; (8012254 <LoRaMacProcess+0x84>)
 801223c:	2390      	movs	r3, #144	; 0x90
 801223e:	00db      	lsls	r3, r3, #3
 8012240:	5cd3      	ldrb	r3, [r2, r3]
 8012242:	2b02      	cmp	r3, #2
 8012244:	d101      	bne.n	801224a <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 8012246:	f7ff f9d1 	bl	80115ec <OpenContinuousRxCWindow>
    }
}
 801224a:	46c0      	nop			; (mov r8, r8)
 801224c:	46bd      	mov	sp, r7
 801224e:	b002      	add	sp, #8
 8012250:	bd80      	pop	{r7, pc}
 8012252:	46c0      	nop			; (mov r8, r8)
 8012254:	20000b6c 	.word	0x20000b6c
 8012258:	00000481 	.word	0x00000481

0801225c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801225c:	b5b0      	push	{r4, r5, r7, lr}
 801225e:	b098      	sub	sp, #96	; 0x60
 8012260:	af02      	add	r7, sp, #8
 8012262:	6178      	str	r0, [r7, #20]
 8012264:	6139      	str	r1, [r7, #16]
 8012266:	230f      	movs	r3, #15
 8012268:	18fb      	adds	r3, r7, r3
 801226a:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d002      	beq.n	8012278 <LoRaMacInitialization+0x1c>
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d101      	bne.n	801227c <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012278:	2303      	movs	r3, #3
 801227a:	e35e      	b.n	801293a <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d00b      	beq.n	801229c <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012288:	2b00      	cmp	r3, #0
 801228a:	d007      	beq.n	801229c <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012290:	2b00      	cmp	r3, #0
 8012292:	d003      	beq.n	801229c <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012298:	2b00      	cmp	r3, #0
 801229a:	d101      	bne.n	80122a0 <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801229c:	2303      	movs	r3, #3
 801229e:	e34c      	b.n	801293a <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80122a0:	230f      	movs	r3, #15
 80122a2:	18fb      	adds	r3, r7, r3
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	0018      	movs	r0, r3
 80122a8:	f003 fea6 	bl	8015ff8 <RegionIsActive>
 80122ac:	0003      	movs	r3, r0
 80122ae:	001a      	movs	r2, r3
 80122b0:	2301      	movs	r3, #1
 80122b2:	4053      	eors	r3, r2
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d001      	beq.n	80122be <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80122ba:	2309      	movs	r3, #9
 80122bc:	e33d      	b.n	801293a <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 80122be:	4afd      	ldr	r2, [pc, #1012]	; (80126b4 <LoRaMacInitialization+0x458>)
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	0011      	movs	r1, r2
 80122c4:	0018      	movs	r0, r3
 80122c6:	f002 f967 	bl	8014598 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 80122ca:	23b6      	movs	r3, #182	; 0xb6
 80122cc:	005a      	lsls	r2, r3, #1
 80122ce:	4bfa      	ldr	r3, [pc, #1000]	; (80126b8 <LoRaMacInitialization+0x45c>)
 80122d0:	2100      	movs	r1, #0
 80122d2:	0018      	movs	r0, r3
 80122d4:	f006 fb5a 	bl	801898c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80122d8:	4af8      	ldr	r2, [pc, #992]	; (80126bc <LoRaMacInitialization+0x460>)
 80122da:	4bf9      	ldr	r3, [pc, #996]	; (80126c0 <LoRaMacInitialization+0x464>)
 80122dc:	2100      	movs	r1, #0
 80122de:	0018      	movs	r0, r3
 80122e0:	f006 fb54 	bl	801898c <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 80122e4:	4bf6      	ldr	r3, [pc, #984]	; (80126c0 <LoRaMacInitialization+0x464>)
 80122e6:	49f7      	ldr	r1, [pc, #988]	; (80126c4 <LoRaMacInitialization+0x468>)
 80122e8:	4af3      	ldr	r2, [pc, #972]	; (80126b8 <LoRaMacInitialization+0x45c>)
 80122ea:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80122ec:	4bf4      	ldr	r3, [pc, #976]	; (80126c0 <LoRaMacInitialization+0x464>)
 80122ee:	4af6      	ldr	r2, [pc, #984]	; (80126c8 <LoRaMacInitialization+0x46c>)
 80122f0:	2101      	movs	r1, #1
 80122f2:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 80122f4:	4bf2      	ldr	r3, [pc, #968]	; (80126c0 <LoRaMacInitialization+0x464>)
 80122f6:	4af5      	ldr	r2, [pc, #980]	; (80126cc <LoRaMacInitialization+0x470>)
 80122f8:	2101      	movs	r1, #1
 80122fa:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 80122fc:	4bf0      	ldr	r3, [pc, #960]	; (80126c0 <LoRaMacInitialization+0x464>)
 80122fe:	4af1      	ldr	r2, [pc, #964]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012300:	589b      	ldr	r3, [r3, r2]
 8012302:	220f      	movs	r2, #15
 8012304:	18ba      	adds	r2, r7, r2
 8012306:	7812      	ldrb	r2, [r2, #0]
 8012308:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 801230a:	4bed      	ldr	r3, [pc, #948]	; (80126c0 <LoRaMacInitialization+0x464>)
 801230c:	4aed      	ldr	r2, [pc, #948]	; (80126c4 <LoRaMacInitialization+0x468>)
 801230e:	589b      	ldr	r3, [r3, r2]
 8012310:	227c      	movs	r2, #124	; 0x7c
 8012312:	2100      	movs	r1, #0
 8012314:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8012316:	4bea      	ldr	r3, [pc, #936]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012318:	4aea      	ldr	r2, [pc, #936]	; (80126c4 <LoRaMacInitialization+0x468>)
 801231a:	589b      	ldr	r3, [r3, r2]
 801231c:	22ca      	movs	r2, #202	; 0xca
 801231e:	2100      	movs	r1, #0
 8012320:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8012322:	4be7      	ldr	r3, [pc, #924]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012324:	4ae7      	ldr	r2, [pc, #924]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012326:	589a      	ldr	r2, [r3, r2]
 8012328:	23b0      	movs	r3, #176	; 0xb0
 801232a:	005b      	lsls	r3, r3, #1
 801232c:	49e8      	ldr	r1, [pc, #928]	; (80126d0 <LoRaMacInitialization+0x474>)
 801232e:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012330:	2550      	movs	r5, #80	; 0x50
 8012332:	197b      	adds	r3, r7, r5
 8012334:	220f      	movs	r2, #15
 8012336:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012338:	4be1      	ldr	r3, [pc, #900]	; (80126c0 <LoRaMacInitialization+0x464>)
 801233a:	4ae2      	ldr	r2, [pc, #904]	; (80126c4 <LoRaMacInitialization+0x468>)
 801233c:	589b      	ldr	r3, [r3, r2]
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	197a      	adds	r2, r7, r5
 8012342:	0011      	movs	r1, r2
 8012344:	0018      	movs	r0, r3
 8012346:	f003 fe68 	bl	801601a <RegionGetPhyParam>
 801234a:	0003      	movs	r3, r0
 801234c:	001a      	movs	r2, r3
 801234e:	244c      	movs	r4, #76	; 0x4c
 8012350:	193b      	adds	r3, r7, r4
 8012352:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8012354:	193b      	adds	r3, r7, r4
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	4bd9      	ldr	r3, [pc, #868]	; (80126c0 <LoRaMacInitialization+0x464>)
 801235a:	49da      	ldr	r1, [pc, #872]	; (80126c4 <LoRaMacInitialization+0x468>)
 801235c:	585b      	ldr	r3, [r3, r1]
 801235e:	1e51      	subs	r1, r2, #1
 8012360:	418a      	sbcs	r2, r1
 8012362:	b2d1      	uxtb	r1, r2
 8012364:	22c9      	movs	r2, #201	; 0xc9
 8012366:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012368:	197b      	adds	r3, r7, r5
 801236a:	220a      	movs	r2, #10
 801236c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801236e:	4bd4      	ldr	r3, [pc, #848]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012370:	4ad4      	ldr	r2, [pc, #848]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012372:	589b      	ldr	r3, [r3, r2]
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	197a      	adds	r2, r7, r5
 8012378:	0011      	movs	r1, r2
 801237a:	0018      	movs	r0, r3
 801237c:	f003 fe4d 	bl	801601a <RegionGetPhyParam>
 8012380:	0003      	movs	r3, r0
 8012382:	001a      	movs	r2, r3
 8012384:	193b      	adds	r3, r7, r4
 8012386:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8012388:	193b      	adds	r3, r7, r4
 801238a:	6819      	ldr	r1, [r3, #0]
 801238c:	4bcc      	ldr	r3, [pc, #816]	; (80126c0 <LoRaMacInitialization+0x464>)
 801238e:	4acd      	ldr	r2, [pc, #820]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012390:	589b      	ldr	r3, [r3, r2]
 8012392:	b24a      	sxtb	r2, r1
 8012394:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012396:	197b      	adds	r3, r7, r5
 8012398:	2206      	movs	r2, #6
 801239a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801239c:	4bc8      	ldr	r3, [pc, #800]	; (80126c0 <LoRaMacInitialization+0x464>)
 801239e:	4ac9      	ldr	r2, [pc, #804]	; (80126c4 <LoRaMacInitialization+0x468>)
 80123a0:	589b      	ldr	r3, [r3, r2]
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	197a      	adds	r2, r7, r5
 80123a6:	0011      	movs	r1, r2
 80123a8:	0018      	movs	r0, r3
 80123aa:	f003 fe36 	bl	801601a <RegionGetPhyParam>
 80123ae:	0003      	movs	r3, r0
 80123b0:	001a      	movs	r2, r3
 80123b2:	193b      	adds	r3, r7, r4
 80123b4:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 80123b6:	193b      	adds	r3, r7, r4
 80123b8:	6819      	ldr	r1, [r3, #0]
 80123ba:	4bc1      	ldr	r3, [pc, #772]	; (80126c0 <LoRaMacInitialization+0x464>)
 80123bc:	4ac1      	ldr	r2, [pc, #772]	; (80126c4 <LoRaMacInitialization+0x468>)
 80123be:	589b      	ldr	r3, [r3, r2]
 80123c0:	b24a      	sxtb	r2, r1
 80123c2:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80123c4:	197b      	adds	r3, r7, r5
 80123c6:	2210      	movs	r2, #16
 80123c8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80123ca:	4bbd      	ldr	r3, [pc, #756]	; (80126c0 <LoRaMacInitialization+0x464>)
 80123cc:	4abd      	ldr	r2, [pc, #756]	; (80126c4 <LoRaMacInitialization+0x468>)
 80123ce:	589b      	ldr	r3, [r3, r2]
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	197a      	adds	r2, r7, r5
 80123d4:	0011      	movs	r1, r2
 80123d6:	0018      	movs	r0, r3
 80123d8:	f003 fe1f 	bl	801601a <RegionGetPhyParam>
 80123dc:	0003      	movs	r3, r0
 80123de:	001a      	movs	r2, r3
 80123e0:	193b      	adds	r3, r7, r4
 80123e2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80123e4:	4bb6      	ldr	r3, [pc, #728]	; (80126c0 <LoRaMacInitialization+0x464>)
 80123e6:	4ab7      	ldr	r2, [pc, #732]	; (80126c4 <LoRaMacInitialization+0x468>)
 80123e8:	589b      	ldr	r3, [r3, r2]
 80123ea:	193a      	adds	r2, r7, r4
 80123ec:	6812      	ldr	r2, [r2, #0]
 80123ee:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80123f0:	197b      	adds	r3, r7, r5
 80123f2:	2211      	movs	r2, #17
 80123f4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80123f6:	4bb2      	ldr	r3, [pc, #712]	; (80126c0 <LoRaMacInitialization+0x464>)
 80123f8:	4ab2      	ldr	r2, [pc, #712]	; (80126c4 <LoRaMacInitialization+0x468>)
 80123fa:	589b      	ldr	r3, [r3, r2]
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	197a      	adds	r2, r7, r5
 8012400:	0011      	movs	r1, r2
 8012402:	0018      	movs	r0, r3
 8012404:	f003 fe09 	bl	801601a <RegionGetPhyParam>
 8012408:	0003      	movs	r3, r0
 801240a:	001a      	movs	r2, r3
 801240c:	193b      	adds	r3, r7, r4
 801240e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012410:	4bab      	ldr	r3, [pc, #684]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012412:	4aac      	ldr	r2, [pc, #688]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012414:	589b      	ldr	r3, [r3, r2]
 8012416:	193a      	adds	r2, r7, r4
 8012418:	6812      	ldr	r2, [r2, #0]
 801241a:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801241c:	197b      	adds	r3, r7, r5
 801241e:	2212      	movs	r2, #18
 8012420:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012422:	4ba7      	ldr	r3, [pc, #668]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012424:	4aa7      	ldr	r2, [pc, #668]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012426:	589b      	ldr	r3, [r3, r2]
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	197a      	adds	r2, r7, r5
 801242c:	0011      	movs	r1, r2
 801242e:	0018      	movs	r0, r3
 8012430:	f003 fdf3 	bl	801601a <RegionGetPhyParam>
 8012434:	0003      	movs	r3, r0
 8012436:	001a      	movs	r2, r3
 8012438:	193b      	adds	r3, r7, r4
 801243a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801243c:	4ba0      	ldr	r3, [pc, #640]	; (80126c0 <LoRaMacInitialization+0x464>)
 801243e:	4aa1      	ldr	r2, [pc, #644]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012440:	589b      	ldr	r3, [r3, r2]
 8012442:	193a      	adds	r2, r7, r4
 8012444:	6812      	ldr	r2, [r2, #0]
 8012446:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012448:	197b      	adds	r3, r7, r5
 801244a:	2213      	movs	r2, #19
 801244c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801244e:	4b9c      	ldr	r3, [pc, #624]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012450:	4a9c      	ldr	r2, [pc, #624]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012452:	589b      	ldr	r3, [r3, r2]
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	197a      	adds	r2, r7, r5
 8012458:	0011      	movs	r1, r2
 801245a:	0018      	movs	r0, r3
 801245c:	f003 fddd 	bl	801601a <RegionGetPhyParam>
 8012460:	0003      	movs	r3, r0
 8012462:	001a      	movs	r2, r3
 8012464:	193b      	adds	r3, r7, r4
 8012466:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012468:	4b95      	ldr	r3, [pc, #596]	; (80126c0 <LoRaMacInitialization+0x464>)
 801246a:	4a96      	ldr	r2, [pc, #600]	; (80126c4 <LoRaMacInitialization+0x468>)
 801246c:	589b      	ldr	r3, [r3, r2]
 801246e:	193a      	adds	r2, r7, r4
 8012470:	6812      	ldr	r2, [r2, #0]
 8012472:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012474:	197b      	adds	r3, r7, r5
 8012476:	2214      	movs	r2, #20
 8012478:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801247a:	4b91      	ldr	r3, [pc, #580]	; (80126c0 <LoRaMacInitialization+0x464>)
 801247c:	4a91      	ldr	r2, [pc, #580]	; (80126c4 <LoRaMacInitialization+0x468>)
 801247e:	589b      	ldr	r3, [r3, r2]
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	197a      	adds	r2, r7, r5
 8012484:	0011      	movs	r1, r2
 8012486:	0018      	movs	r0, r3
 8012488:	f003 fdc7 	bl	801601a <RegionGetPhyParam>
 801248c:	0003      	movs	r3, r0
 801248e:	001a      	movs	r2, r3
 8012490:	193b      	adds	r3, r7, r4
 8012492:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012494:	4b8a      	ldr	r3, [pc, #552]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012496:	4a8b      	ldr	r2, [pc, #556]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012498:	589b      	ldr	r3, [r3, r2]
 801249a:	193a      	adds	r2, r7, r4
 801249c:	6812      	ldr	r2, [r2, #0]
 801249e:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80124a0:	197b      	adds	r3, r7, r5
 80124a2:	2217      	movs	r2, #23
 80124a4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80124a6:	4b86      	ldr	r3, [pc, #536]	; (80126c0 <LoRaMacInitialization+0x464>)
 80124a8:	4a86      	ldr	r2, [pc, #536]	; (80126c4 <LoRaMacInitialization+0x468>)
 80124aa:	589b      	ldr	r3, [r3, r2]
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	197a      	adds	r2, r7, r5
 80124b0:	0011      	movs	r1, r2
 80124b2:	0018      	movs	r0, r3
 80124b4:	f003 fdb1 	bl	801601a <RegionGetPhyParam>
 80124b8:	0003      	movs	r3, r0
 80124ba:	001a      	movs	r2, r3
 80124bc:	193b      	adds	r3, r7, r4
 80124be:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80124c0:	193b      	adds	r3, r7, r4
 80124c2:	6819      	ldr	r1, [r3, #0]
 80124c4:	4b7e      	ldr	r3, [pc, #504]	; (80126c0 <LoRaMacInitialization+0x464>)
 80124c6:	4a7f      	ldr	r2, [pc, #508]	; (80126c4 <LoRaMacInitialization+0x468>)
 80124c8:	589b      	ldr	r3, [r3, r2]
 80124ca:	b2c9      	uxtb	r1, r1
 80124cc:	2225      	movs	r2, #37	; 0x25
 80124ce:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80124d0:	197b      	adds	r3, r7, r5
 80124d2:	2218      	movs	r2, #24
 80124d4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80124d6:	4b7a      	ldr	r3, [pc, #488]	; (80126c0 <LoRaMacInitialization+0x464>)
 80124d8:	4a7a      	ldr	r2, [pc, #488]	; (80126c4 <LoRaMacInitialization+0x468>)
 80124da:	589b      	ldr	r3, [r3, r2]
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	197a      	adds	r2, r7, r5
 80124e0:	0011      	movs	r1, r2
 80124e2:	0018      	movs	r0, r3
 80124e4:	f003 fd99 	bl	801601a <RegionGetPhyParam>
 80124e8:	0003      	movs	r3, r0
 80124ea:	001a      	movs	r2, r3
 80124ec:	193b      	adds	r3, r7, r4
 80124ee:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80124f0:	4b73      	ldr	r3, [pc, #460]	; (80126c0 <LoRaMacInitialization+0x464>)
 80124f2:	4a74      	ldr	r2, [pc, #464]	; (80126c4 <LoRaMacInitialization+0x468>)
 80124f4:	589b      	ldr	r3, [r3, r2]
 80124f6:	193a      	adds	r2, r7, r4
 80124f8:	6812      	ldr	r2, [r2, #0]
 80124fa:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80124fc:	4b70      	ldr	r3, [pc, #448]	; (80126c0 <LoRaMacInitialization+0x464>)
 80124fe:	4a71      	ldr	r2, [pc, #452]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012500:	589b      	ldr	r3, [r3, r2]
 8012502:	193a      	adds	r2, r7, r4
 8012504:	6812      	ldr	r2, [r2, #0]
 8012506:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012508:	197b      	adds	r3, r7, r5
 801250a:	2219      	movs	r2, #25
 801250c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801250e:	4b6c      	ldr	r3, [pc, #432]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012510:	4a6c      	ldr	r2, [pc, #432]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012512:	589b      	ldr	r3, [r3, r2]
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	197a      	adds	r2, r7, r5
 8012518:	0011      	movs	r1, r2
 801251a:	0018      	movs	r0, r3
 801251c:	f003 fd7d 	bl	801601a <RegionGetPhyParam>
 8012520:	0003      	movs	r3, r0
 8012522:	001a      	movs	r2, r3
 8012524:	193b      	adds	r3, r7, r4
 8012526:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012528:	193b      	adds	r3, r7, r4
 801252a:	6819      	ldr	r1, [r3, #0]
 801252c:	4b64      	ldr	r3, [pc, #400]	; (80126c0 <LoRaMacInitialization+0x464>)
 801252e:	4a65      	ldr	r2, [pc, #404]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012530:	589b      	ldr	r3, [r3, r2]
 8012532:	b2c9      	uxtb	r1, r1
 8012534:	222c      	movs	r2, #44	; 0x2c
 8012536:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012538:	193b      	adds	r3, r7, r4
 801253a:	6819      	ldr	r1, [r3, #0]
 801253c:	4b60      	ldr	r3, [pc, #384]	; (80126c0 <LoRaMacInitialization+0x464>)
 801253e:	4a61      	ldr	r2, [pc, #388]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012540:	589b      	ldr	r3, [r3, r2]
 8012542:	b2c9      	uxtb	r1, r1
 8012544:	2234      	movs	r2, #52	; 0x34
 8012546:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012548:	197b      	adds	r3, r7, r5
 801254a:	221e      	movs	r2, #30
 801254c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801254e:	4b5c      	ldr	r3, [pc, #368]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012550:	4a5c      	ldr	r2, [pc, #368]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012552:	589b      	ldr	r3, [r3, r2]
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	197a      	adds	r2, r7, r5
 8012558:	0011      	movs	r1, r2
 801255a:	0018      	movs	r0, r3
 801255c:	f003 fd5d 	bl	801601a <RegionGetPhyParam>
 8012560:	0003      	movs	r3, r0
 8012562:	001a      	movs	r2, r3
 8012564:	193b      	adds	r3, r7, r4
 8012566:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012568:	193b      	adds	r3, r7, r4
 801256a:	6819      	ldr	r1, [r3, #0]
 801256c:	4b54      	ldr	r3, [pc, #336]	; (80126c0 <LoRaMacInitialization+0x464>)
 801256e:	4a55      	ldr	r2, [pc, #340]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012570:	589b      	ldr	r3, [r3, r2]
 8012572:	b2c9      	uxtb	r1, r1
 8012574:	2238      	movs	r2, #56	; 0x38
 8012576:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012578:	197b      	adds	r3, r7, r5
 801257a:	221f      	movs	r2, #31
 801257c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801257e:	4b50      	ldr	r3, [pc, #320]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012580:	4a50      	ldr	r2, [pc, #320]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012582:	589b      	ldr	r3, [r3, r2]
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	197a      	adds	r2, r7, r5
 8012588:	0011      	movs	r1, r2
 801258a:	0018      	movs	r0, r3
 801258c:	f003 fd45 	bl	801601a <RegionGetPhyParam>
 8012590:	0003      	movs	r3, r0
 8012592:	001a      	movs	r2, r3
 8012594:	193b      	adds	r3, r7, r4
 8012596:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012598:	193b      	adds	r3, r7, r4
 801259a:	6819      	ldr	r1, [r3, #0]
 801259c:	4b48      	ldr	r3, [pc, #288]	; (80126c0 <LoRaMacInitialization+0x464>)
 801259e:	4a49      	ldr	r2, [pc, #292]	; (80126c4 <LoRaMacInitialization+0x468>)
 80125a0:	589b      	ldr	r3, [r3, r2]
 80125a2:	b2c9      	uxtb	r1, r1
 80125a4:	2239      	movs	r2, #57	; 0x39
 80125a6:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80125a8:	197b      	adds	r3, r7, r5
 80125aa:	2220      	movs	r2, #32
 80125ac:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80125ae:	4b44      	ldr	r3, [pc, #272]	; (80126c0 <LoRaMacInitialization+0x464>)
 80125b0:	4a44      	ldr	r2, [pc, #272]	; (80126c4 <LoRaMacInitialization+0x468>)
 80125b2:	589b      	ldr	r3, [r3, r2]
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	197a      	adds	r2, r7, r5
 80125b8:	0011      	movs	r1, r2
 80125ba:	0018      	movs	r0, r3
 80125bc:	f003 fd2d 	bl	801601a <RegionGetPhyParam>
 80125c0:	0003      	movs	r3, r0
 80125c2:	001a      	movs	r2, r3
 80125c4:	193b      	adds	r3, r7, r4
 80125c6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 80125c8:	4b3d      	ldr	r3, [pc, #244]	; (80126c0 <LoRaMacInitialization+0x464>)
 80125ca:	4a3e      	ldr	r2, [pc, #248]	; (80126c4 <LoRaMacInitialization+0x468>)
 80125cc:	589b      	ldr	r3, [r3, r2]
 80125ce:	193a      	adds	r2, r7, r4
 80125d0:	6812      	ldr	r2, [r2, #0]
 80125d2:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80125d4:	197b      	adds	r3, r7, r5
 80125d6:	2221      	movs	r2, #33	; 0x21
 80125d8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80125da:	4b39      	ldr	r3, [pc, #228]	; (80126c0 <LoRaMacInitialization+0x464>)
 80125dc:	4a39      	ldr	r2, [pc, #228]	; (80126c4 <LoRaMacInitialization+0x468>)
 80125de:	589b      	ldr	r3, [r3, r2]
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	197a      	adds	r2, r7, r5
 80125e4:	0011      	movs	r1, r2
 80125e6:	0018      	movs	r0, r3
 80125e8:	f003 fd17 	bl	801601a <RegionGetPhyParam>
 80125ec:	0003      	movs	r3, r0
 80125ee:	001a      	movs	r2, r3
 80125f0:	193b      	adds	r3, r7, r4
 80125f2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 80125f4:	4b32      	ldr	r3, [pc, #200]	; (80126c0 <LoRaMacInitialization+0x464>)
 80125f6:	4a33      	ldr	r2, [pc, #204]	; (80126c4 <LoRaMacInitialization+0x468>)
 80125f8:	589b      	ldr	r3, [r3, r2]
 80125fa:	193a      	adds	r2, r7, r4
 80125fc:	6812      	ldr	r2, [r2, #0]
 80125fe:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012600:	197b      	adds	r3, r7, r5
 8012602:	220b      	movs	r2, #11
 8012604:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012606:	4b2e      	ldr	r3, [pc, #184]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012608:	4a2e      	ldr	r2, [pc, #184]	; (80126c4 <LoRaMacInitialization+0x468>)
 801260a:	589b      	ldr	r3, [r3, r2]
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	197a      	adds	r2, r7, r5
 8012610:	0011      	movs	r1, r2
 8012612:	0018      	movs	r0, r3
 8012614:	f003 fd01 	bl	801601a <RegionGetPhyParam>
 8012618:	0003      	movs	r3, r0
 801261a:	001a      	movs	r2, r3
 801261c:	193b      	adds	r3, r7, r4
 801261e:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 8012620:	193b      	adds	r3, r7, r4
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	b299      	uxth	r1, r3
 8012626:	4a26      	ldr	r2, [pc, #152]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012628:	23fd      	movs	r3, #253	; 0xfd
 801262a:	009b      	lsls	r3, r3, #2
 801262c:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801262e:	197b      	adds	r3, r7, r5
 8012630:	220c      	movs	r2, #12
 8012632:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012634:	4b22      	ldr	r3, [pc, #136]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012636:	4a23      	ldr	r2, [pc, #140]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012638:	589b      	ldr	r3, [r3, r2]
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	197a      	adds	r2, r7, r5
 801263e:	0011      	movs	r1, r2
 8012640:	0018      	movs	r0, r3
 8012642:	f003 fcea 	bl	801601a <RegionGetPhyParam>
 8012646:	0003      	movs	r3, r0
 8012648:	001a      	movs	r2, r3
 801264a:	193b      	adds	r3, r7, r4
 801264c:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 801264e:	193b      	adds	r3, r7, r4
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	b299      	uxth	r1, r3
 8012654:	4b1a      	ldr	r3, [pc, #104]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012656:	4a1f      	ldr	r2, [pc, #124]	; (80126d4 <LoRaMacInitialization+0x478>)
 8012658:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 801265a:	4b19      	ldr	r3, [pc, #100]	; (80126c0 <LoRaMacInitialization+0x464>)
 801265c:	4a19      	ldr	r2, [pc, #100]	; (80126c4 <LoRaMacInitialization+0x468>)
 801265e:	589b      	ldr	r3, [r3, r2]
 8012660:	2224      	movs	r2, #36	; 0x24
 8012662:	2101      	movs	r1, #1
 8012664:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8012666:	4b16      	ldr	r3, [pc, #88]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012668:	4a16      	ldr	r2, [pc, #88]	; (80126c4 <LoRaMacInitialization+0x468>)
 801266a:	589b      	ldr	r3, [r3, r2]
 801266c:	220a      	movs	r2, #10
 801266e:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8012670:	4b13      	ldr	r3, [pc, #76]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012672:	4a14      	ldr	r2, [pc, #80]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012674:	589b      	ldr	r3, [r3, r2]
 8012676:	2206      	movs	r2, #6
 8012678:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 801267a:	4b11      	ldr	r3, [pc, #68]	; (80126c0 <LoRaMacInitialization+0x464>)
 801267c:	4a11      	ldr	r2, [pc, #68]	; (80126c4 <LoRaMacInitialization+0x468>)
 801267e:	589b      	ldr	r3, [r3, r2]
 8012680:	4a0f      	ldr	r2, [pc, #60]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012682:	4910      	ldr	r1, [pc, #64]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012684:	5852      	ldr	r2, [r2, r1]
 8012686:	689b      	ldr	r3, [r3, #8]
 8012688:	2188      	movs	r1, #136	; 0x88
 801268a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 801268c:	4b0c      	ldr	r3, [pc, #48]	; (80126c0 <LoRaMacInitialization+0x464>)
 801268e:	4a0d      	ldr	r2, [pc, #52]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012690:	589a      	ldr	r2, [r3, r2]
 8012692:	4b0b      	ldr	r3, [pc, #44]	; (80126c0 <LoRaMacInitialization+0x464>)
 8012694:	490b      	ldr	r1, [pc, #44]	; (80126c4 <LoRaMacInitialization+0x468>)
 8012696:	585b      	ldr	r3, [r3, r1]
 8012698:	7b11      	ldrb	r1, [r2, #12]
 801269a:	228c      	movs	r2, #140	; 0x8c
 801269c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 801269e:	4b08      	ldr	r3, [pc, #32]	; (80126c0 <LoRaMacInitialization+0x464>)
 80126a0:	4a08      	ldr	r2, [pc, #32]	; (80126c4 <LoRaMacInitialization+0x468>)
 80126a2:	589b      	ldr	r3, [r3, r2]
 80126a4:	4a06      	ldr	r2, [pc, #24]	; (80126c0 <LoRaMacInitialization+0x464>)
 80126a6:	4907      	ldr	r1, [pc, #28]	; (80126c4 <LoRaMacInitialization+0x468>)
 80126a8:	5852      	ldr	r2, [r2, r1]
 80126aa:	691b      	ldr	r3, [r3, #16]
 80126ac:	2190      	movs	r1, #144	; 0x90
 80126ae:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 80126b0:	4b03      	ldr	r3, [pc, #12]	; (80126c0 <LoRaMacInitialization+0x464>)
 80126b2:	e011      	b.n	80126d8 <LoRaMacInitialization+0x47c>
 80126b4:	08012159 	.word	0x08012159
 80126b8:	20000ff8 	.word	0x20000ff8
 80126bc:	0000048c 	.word	0x0000048c
 80126c0:	20000b6c 	.word	0x20000b6c
 80126c4:	00000484 	.word	0x00000484
 80126c8:	00000412 	.word	0x00000412
 80126cc:	00000411 	.word	0x00000411
 80126d0:	01000300 	.word	0x01000300
 80126d4:	000003f6 	.word	0x000003f6
 80126d8:	4a9a      	ldr	r2, [pc, #616]	; (8012944 <LoRaMacInitialization+0x6e8>)
 80126da:	589b      	ldr	r3, [r3, r2]
 80126dc:	4a9a      	ldr	r2, [pc, #616]	; (8012948 <LoRaMacInitialization+0x6ec>)
 80126de:	4999      	ldr	r1, [pc, #612]	; (8012944 <LoRaMacInitialization+0x6e8>)
 80126e0:	5852      	ldr	r2, [r2, r1]
 80126e2:	695b      	ldr	r3, [r3, #20]
 80126e4:	2194      	movs	r1, #148	; 0x94
 80126e6:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 80126e8:	4b97      	ldr	r3, [pc, #604]	; (8012948 <LoRaMacInitialization+0x6ec>)
 80126ea:	4a96      	ldr	r2, [pc, #600]	; (8012944 <LoRaMacInitialization+0x6e8>)
 80126ec:	589b      	ldr	r3, [r3, r2]
 80126ee:	4a96      	ldr	r2, [pc, #600]	; (8012948 <LoRaMacInitialization+0x6ec>)
 80126f0:	4994      	ldr	r1, [pc, #592]	; (8012944 <LoRaMacInitialization+0x6e8>)
 80126f2:	5852      	ldr	r2, [r2, r1]
 80126f4:	699b      	ldr	r3, [r3, #24]
 80126f6:	2198      	movs	r1, #152	; 0x98
 80126f8:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 80126fa:	4b93      	ldr	r3, [pc, #588]	; (8012948 <LoRaMacInitialization+0x6ec>)
 80126fc:	4a91      	ldr	r2, [pc, #580]	; (8012944 <LoRaMacInitialization+0x6e8>)
 80126fe:	589b      	ldr	r3, [r3, r2]
 8012700:	4a91      	ldr	r2, [pc, #580]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012702:	4990      	ldr	r1, [pc, #576]	; (8012944 <LoRaMacInitialization+0x6e8>)
 8012704:	5852      	ldr	r2, [r2, r1]
 8012706:	69db      	ldr	r3, [r3, #28]
 8012708:	219c      	movs	r1, #156	; 0x9c
 801270a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 801270c:	4b8e      	ldr	r3, [pc, #568]	; (8012948 <LoRaMacInitialization+0x6ec>)
 801270e:	4a8d      	ldr	r2, [pc, #564]	; (8012944 <LoRaMacInitialization+0x6e8>)
 8012710:	589b      	ldr	r3, [r3, r2]
 8012712:	4a8d      	ldr	r2, [pc, #564]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012714:	498b      	ldr	r1, [pc, #556]	; (8012944 <LoRaMacInitialization+0x6e8>)
 8012716:	5852      	ldr	r2, [r2, r1]
 8012718:	6a1b      	ldr	r3, [r3, #32]
 801271a:	21a0      	movs	r1, #160	; 0xa0
 801271c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 801271e:	4b8a      	ldr	r3, [pc, #552]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012720:	4a88      	ldr	r2, [pc, #544]	; (8012944 <LoRaMacInitialization+0x6e8>)
 8012722:	589a      	ldr	r2, [r3, r2]
 8012724:	4b88      	ldr	r3, [pc, #544]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012726:	4987      	ldr	r1, [pc, #540]	; (8012944 <LoRaMacInitialization+0x6e8>)
 8012728:	585b      	ldr	r3, [r3, r1]
 801272a:	2124      	movs	r1, #36	; 0x24
 801272c:	5c51      	ldrb	r1, [r2, r1]
 801272e:	22a4      	movs	r2, #164	; 0xa4
 8012730:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8012732:	211c      	movs	r1, #28
 8012734:	187b      	adds	r3, r7, r1
 8012736:	2200      	movs	r2, #0
 8012738:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 801273a:	187b      	adds	r3, r7, r1
 801273c:	2200      	movs	r2, #0
 801273e:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012740:	4b81      	ldr	r3, [pc, #516]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012742:	4a80      	ldr	r2, [pc, #512]	; (8012944 <LoRaMacInitialization+0x6e8>)
 8012744:	589b      	ldr	r3, [r3, r2]
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	187a      	adds	r2, r7, r1
 801274a:	0011      	movs	r1, r2
 801274c:	0018      	movs	r0, r3
 801274e:	f003 fc9f 	bl	8016090 <RegionInitDefaults>

    ResetMacParameters( );
 8012752:	f7fe fe19 	bl	8011388 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8012756:	4b7c      	ldr	r3, [pc, #496]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012758:	4a7a      	ldr	r2, [pc, #488]	; (8012944 <LoRaMacInitialization+0x6e8>)
 801275a:	589b      	ldr	r3, [r3, r2]
 801275c:	227d      	movs	r2, #125	; 0x7d
 801275e:	2101      	movs	r1, #1
 8012760:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 8012762:	4a79      	ldr	r2, [pc, #484]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012764:	23d1      	movs	r3, #209	; 0xd1
 8012766:	009b      	lsls	r3, r3, #2
 8012768:	6979      	ldr	r1, [r7, #20]
 801276a:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 801276c:	4a76      	ldr	r2, [pc, #472]	; (8012948 <LoRaMacInitialization+0x6ec>)
 801276e:	23d2      	movs	r3, #210	; 0xd2
 8012770:	009b      	lsls	r3, r3, #2
 8012772:	6939      	ldr	r1, [r7, #16]
 8012774:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 8012776:	4b74      	ldr	r3, [pc, #464]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012778:	4a74      	ldr	r2, [pc, #464]	; (801294c <LoRaMacInitialization+0x6f0>)
 801277a:	2100      	movs	r1, #0
 801277c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 801277e:	4a72      	ldr	r2, [pc, #456]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012780:	23d0      	movs	r3, #208	; 0xd0
 8012782:	009b      	lsls	r3, r3, #2
 8012784:	2101      	movs	r1, #1
 8012786:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8012788:	4b6f      	ldr	r3, [pc, #444]	; (8012948 <LoRaMacInitialization+0x6ec>)
 801278a:	4a6e      	ldr	r2, [pc, #440]	; (8012944 <LoRaMacInitialization+0x6e8>)
 801278c:	589a      	ldr	r2, [r3, r2]
 801278e:	23a8      	movs	r3, #168	; 0xa8
 8012790:	005b      	lsls	r3, r3, #1
 8012792:	2100      	movs	r1, #0
 8012794:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8012796:	4b6c      	ldr	r3, [pc, #432]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012798:	4a6a      	ldr	r2, [pc, #424]	; (8012944 <LoRaMacInitialization+0x6e8>)
 801279a:	589a      	ldr	r2, [r3, r2]
 801279c:	23aa      	movs	r3, #170	; 0xaa
 801279e:	005b      	lsls	r3, r3, #1
 80127a0:	2100      	movs	r1, #0
 80127a2:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80127a4:	4b6a      	ldr	r3, [pc, #424]	; (8012950 <LoRaMacInitialization+0x6f4>)
 80127a6:	2201      	movs	r2, #1
 80127a8:	4251      	negs	r1, r2
 80127aa:	486a      	ldr	r0, [pc, #424]	; (8012954 <LoRaMacInitialization+0x6f8>)
 80127ac:	2200      	movs	r2, #0
 80127ae:	9200      	str	r2, [sp, #0]
 80127b0:	2200      	movs	r2, #0
 80127b2:	f009 fb75 	bl	801bea0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80127b6:	4b68      	ldr	r3, [pc, #416]	; (8012958 <LoRaMacInitialization+0x6fc>)
 80127b8:	2201      	movs	r2, #1
 80127ba:	4251      	negs	r1, r2
 80127bc:	4867      	ldr	r0, [pc, #412]	; (801295c <LoRaMacInitialization+0x700>)
 80127be:	2200      	movs	r2, #0
 80127c0:	9200      	str	r2, [sp, #0]
 80127c2:	2200      	movs	r2, #0
 80127c4:	f009 fb6c 	bl	801bea0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80127c8:	4b65      	ldr	r3, [pc, #404]	; (8012960 <LoRaMacInitialization+0x704>)
 80127ca:	2201      	movs	r2, #1
 80127cc:	4251      	negs	r1, r2
 80127ce:	4865      	ldr	r0, [pc, #404]	; (8012964 <LoRaMacInitialization+0x708>)
 80127d0:	2200      	movs	r2, #0
 80127d2:	9200      	str	r2, [sp, #0]
 80127d4:	2200      	movs	r2, #0
 80127d6:	f009 fb63 	bl	801bea0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80127da:	4b63      	ldr	r3, [pc, #396]	; (8012968 <LoRaMacInitialization+0x70c>)
 80127dc:	2201      	movs	r2, #1
 80127de:	4251      	negs	r1, r2
 80127e0:	4862      	ldr	r0, [pc, #392]	; (801296c <LoRaMacInitialization+0x710>)
 80127e2:	2200      	movs	r2, #0
 80127e4:	9200      	str	r2, [sp, #0]
 80127e6:	2200      	movs	r2, #0
 80127e8:	f009 fb5a 	bl	801bea0 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 80127ec:	4b56      	ldr	r3, [pc, #344]	; (8012948 <LoRaMacInitialization+0x6ec>)
 80127ee:	4a55      	ldr	r2, [pc, #340]	; (8012944 <LoRaMacInitialization+0x6e8>)
 80127f0:	589d      	ldr	r5, [r3, r2]
 80127f2:	23ac      	movs	r3, #172	; 0xac
 80127f4:	005c      	lsls	r4, r3, #1
 80127f6:	003b      	movs	r3, r7
 80127f8:	0018      	movs	r0, r3
 80127fa:	f009 fb21 	bl	801be40 <SysTimeGetMcuTime>
 80127fe:	003a      	movs	r2, r7
 8012800:	192b      	adds	r3, r5, r4
 8012802:	ca03      	ldmia	r2!, {r0, r1}
 8012804:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8012806:	4a50      	ldr	r2, [pc, #320]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012808:	23d3      	movs	r3, #211	; 0xd3
 801280a:	009b      	lsls	r3, r3, #2
 801280c:	4958      	ldr	r1, [pc, #352]	; (8012970 <LoRaMacInitialization+0x714>)
 801280e:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8012810:	4a4d      	ldr	r2, [pc, #308]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012812:	23d5      	movs	r3, #213	; 0xd5
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	4957      	ldr	r1, [pc, #348]	; (8012974 <LoRaMacInitialization+0x718>)
 8012818:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801281a:	4a4b      	ldr	r2, [pc, #300]	; (8012948 <LoRaMacInitialization+0x6ec>)
 801281c:	23d7      	movs	r3, #215	; 0xd7
 801281e:	009b      	lsls	r3, r3, #2
 8012820:	4955      	ldr	r1, [pc, #340]	; (8012978 <LoRaMacInitialization+0x71c>)
 8012822:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8012824:	4a48      	ldr	r2, [pc, #288]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012826:	23d4      	movs	r3, #212	; 0xd4
 8012828:	009b      	lsls	r3, r3, #2
 801282a:	4954      	ldr	r1, [pc, #336]	; (801297c <LoRaMacInitialization+0x720>)
 801282c:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801282e:	4a46      	ldr	r2, [pc, #280]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012830:	23d6      	movs	r3, #214	; 0xd6
 8012832:	009b      	lsls	r3, r3, #2
 8012834:	4952      	ldr	r1, [pc, #328]	; (8012980 <LoRaMacInitialization+0x724>)
 8012836:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8012838:	4b52      	ldr	r3, [pc, #328]	; (8012984 <LoRaMacInitialization+0x728>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	4a52      	ldr	r2, [pc, #328]	; (8012988 <LoRaMacInitialization+0x72c>)
 801283e:	0010      	movs	r0, r2
 8012840:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8012842:	4b52      	ldr	r3, [pc, #328]	; (801298c <LoRaMacInitialization+0x730>)
 8012844:	0018      	movs	r0, r3
 8012846:	f7fa f85d 	bl	800c904 <SecureElementInit>
 801284a:	1e03      	subs	r3, r0, #0
 801284c:	d001      	beq.n	8012852 <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801284e:	2311      	movs	r3, #17
 8012850:	e073      	b.n	801293a <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8012852:	4b4f      	ldr	r3, [pc, #316]	; (8012990 <LoRaMacInitialization+0x734>)
 8012854:	0018      	movs	r0, r3
 8012856:	f002 fbf3 	bl	8015040 <LoRaMacCryptoInit>
 801285a:	1e03      	subs	r3, r0, #0
 801285c:	d001      	beq.n	8012862 <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801285e:	2311      	movs	r3, #17
 8012860:	e06b      	b.n	801293a <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8012862:	4b4c      	ldr	r3, [pc, #304]	; (8012994 <LoRaMacInitialization+0x738>)
 8012864:	0018      	movs	r0, r3
 8012866:	f001 fc0d 	bl	8014084 <LoRaMacCommandsInit>
 801286a:	1e03      	subs	r3, r0, #0
 801286c:	d001      	beq.n	8012872 <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801286e:	2313      	movs	r3, #19
 8012870:	e063      	b.n	801293a <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012872:	4b35      	ldr	r3, [pc, #212]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012874:	4a33      	ldr	r2, [pc, #204]	; (8012944 <LoRaMacInitialization+0x6e8>)
 8012876:	589b      	ldr	r3, [r3, r2]
 8012878:	3350      	adds	r3, #80	; 0x50
 801287a:	0018      	movs	r0, r3
 801287c:	f002 fcee 	bl	801525c <LoRaMacCryptoSetMulticastReference>
 8012880:	1e03      	subs	r3, r0, #0
 8012882:	d001      	beq.n	8012888 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012884:	2311      	movs	r3, #17
 8012886:	e058      	b.n	801293a <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012888:	4b3e      	ldr	r3, [pc, #248]	; (8012984 <LoRaMacInitialization+0x728>)
 801288a:	695b      	ldr	r3, [r3, #20]
 801288c:	4798      	blx	r3
 801288e:	0003      	movs	r3, r0
 8012890:	0018      	movs	r0, r3
 8012892:	f006 f819 	bl	80188c8 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8012896:	4b3b      	ldr	r3, [pc, #236]	; (8012984 <LoRaMacInitialization+0x728>)
 8012898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801289a:	4a2b      	ldr	r2, [pc, #172]	; (8012948 <LoRaMacInitialization+0x6ec>)
 801289c:	4929      	ldr	r1, [pc, #164]	; (8012944 <LoRaMacInitialization+0x6e8>)
 801289e:	5852      	ldr	r2, [r2, r1]
 80128a0:	217d      	movs	r1, #125	; 0x7d
 80128a2:	5c52      	ldrb	r2, [r2, r1]
 80128a4:	0010      	movs	r0, r2
 80128a6:	4798      	blx	r3
    Radio.Sleep( );
 80128a8:	4b36      	ldr	r3, [pc, #216]	; (8012984 <LoRaMacInitialization+0x728>)
 80128aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ac:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80128ae:	2144      	movs	r1, #68	; 0x44
 80128b0:	187b      	adds	r3, r7, r1
 80128b2:	2200      	movs	r2, #0
 80128b4:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 80128b6:	187b      	adds	r3, r7, r1
 80128b8:	2200      	movs	r2, #0
 80128ba:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d007      	beq.n	80128d2 <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	685a      	ldr	r2, [r3, #4]
 80128c6:	187b      	adds	r3, r7, r1
 80128c8:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	68da      	ldr	r2, [r3, #12]
 80128ce:	187b      	adds	r3, r7, r1
 80128d0:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80128d2:	2124      	movs	r1, #36	; 0x24
 80128d4:	187b      	adds	r3, r7, r1
 80128d6:	4a30      	ldr	r2, [pc, #192]	; (8012998 <LoRaMacInitialization+0x73c>)
 80128d8:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80128da:	187b      	adds	r3, r7, r1
 80128dc:	4a2f      	ldr	r2, [pc, #188]	; (801299c <LoRaMacInitialization+0x740>)
 80128de:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80128e0:	187b      	adds	r3, r7, r1
 80128e2:	4a2f      	ldr	r2, [pc, #188]	; (80129a0 <LoRaMacInitialization+0x744>)
 80128e4:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80128e6:	187b      	adds	r3, r7, r1
 80128e8:	4a2e      	ldr	r2, [pc, #184]	; (80129a4 <LoRaMacInitialization+0x748>)
 80128ea:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 80128ec:	4b16      	ldr	r3, [pc, #88]	; (8012948 <LoRaMacInitialization+0x6ec>)
 80128ee:	4a15      	ldr	r2, [pc, #84]	; (8012944 <LoRaMacInitialization+0x6e8>)
 80128f0:	589b      	ldr	r3, [r3, r2]
 80128f2:	334c      	adds	r3, #76	; 0x4c
 80128f4:	001a      	movs	r2, r3
 80128f6:	187b      	adds	r3, r7, r1
 80128f8:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 80128fa:	4b13      	ldr	r3, [pc, #76]	; (8012948 <LoRaMacInitialization+0x6ec>)
 80128fc:	4a11      	ldr	r2, [pc, #68]	; (8012944 <LoRaMacInitialization+0x6e8>)
 80128fe:	589b      	ldr	r3, [r3, r2]
 8012900:	001a      	movs	r2, r3
 8012902:	187b      	adds	r3, r7, r1
 8012904:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8012906:	4b10      	ldr	r3, [pc, #64]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012908:	4a0e      	ldr	r2, [pc, #56]	; (8012944 <LoRaMacInitialization+0x6e8>)
 801290a:	589b      	ldr	r3, [r3, r2]
 801290c:	3384      	adds	r3, #132	; 0x84
 801290e:	001a      	movs	r2, r3
 8012910:	187b      	adds	r3, r7, r1
 8012912:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8012914:	4b0c      	ldr	r3, [pc, #48]	; (8012948 <LoRaMacInitialization+0x6ec>)
 8012916:	4a0b      	ldr	r2, [pc, #44]	; (8012944 <LoRaMacInitialization+0x6e8>)
 8012918:	589b      	ldr	r3, [r3, r2]
 801291a:	3350      	adds	r3, #80	; 0x50
 801291c:	001a      	movs	r2, r3
 801291e:	0008      	movs	r0, r1
 8012920:	187b      	adds	r3, r7, r1
 8012922:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8012924:	4a20      	ldr	r2, [pc, #128]	; (80129a8 <LoRaMacInitialization+0x74c>)
 8012926:	2344      	movs	r3, #68	; 0x44
 8012928:	18f9      	adds	r1, r7, r3
 801292a:	183b      	adds	r3, r7, r0
 801292c:	0018      	movs	r0, r3
 801292e:	f001 f994 	bl	8013c5a <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012932:	2001      	movs	r0, #1
 8012934:	f7fc fe12 	bl	800f55c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012938:	2300      	movs	r3, #0
}
 801293a:	0018      	movs	r0, r3
 801293c:	46bd      	mov	sp, r7
 801293e:	b016      	add	sp, #88	; 0x58
 8012940:	bdb0      	pop	{r4, r5, r7, pc}
 8012942:	46c0      	nop			; (mov r8, r8)
 8012944:	00000484 	.word	0x00000484
 8012948:	20000b6c 	.word	0x20000b6c
 801294c:	00000481 	.word	0x00000481
 8012950:	0800f961 	.word	0x0800f961
 8012954:	20000ed4 	.word	0x20000ed4
 8012958:	0800f9ed 	.word	0x0800f9ed
 801295c:	20000eec 	.word	0x20000eec
 8012960:	0800fa81 	.word	0x0800fa81
 8012964:	20000f04 	.word	0x20000f04
 8012968:	0800fb1d 	.word	0x0800fb1d
 801296c:	20000f64 	.word	0x20000f64
 8012970:	0800e445 	.word	0x0800e445
 8012974:	0800e4b1 	.word	0x0800e4b1
 8012978:	0800e585 	.word	0x0800e585
 801297c:	0800e541 	.word	0x0800e541
 8012980:	0800e5c9 	.word	0x0800e5c9
 8012984:	0801e62c 	.word	0x0801e62c
 8012988:	20000eb8 	.word	0x20000eb8
 801298c:	08012129 	.word	0x08012129
 8012990:	08012119 	.word	0x08012119
 8012994:	08012139 	.word	0x08012139
 8012998:	20000fd0 	.word	0x20000fd0
 801299c:	20000f88 	.word	0x20000f88
 80129a0:	20000fbc 	.word	0x20000fbc
 80129a4:	20000fed 	.word	0x20000fed
 80129a8:	08012149 	.word	0x08012149

080129ac <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80129b0:	4a04      	ldr	r2, [pc, #16]	; (80129c4 <LoRaMacStart+0x18>)
 80129b2:	23d0      	movs	r3, #208	; 0xd0
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	2100      	movs	r1, #0
 80129b8:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 80129ba:	2300      	movs	r3, #0
}
 80129bc:	0018      	movs	r0, r3
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	46c0      	nop			; (mov r8, r8)
 80129c4:	20000b6c 	.word	0x20000b6c

080129c8 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80129c8:	b590      	push	{r4, r7, lr}
 80129ca:	b08b      	sub	sp, #44	; 0x2c
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	0002      	movs	r2, r0
 80129d0:	6039      	str	r1, [r7, #0]
 80129d2:	1dfb      	adds	r3, r7, #7
 80129d4:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80129d6:	4b4f      	ldr	r3, [pc, #316]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 80129d8:	4a4f      	ldr	r2, [pc, #316]	; (8012b18 <LoRaMacQueryTxPossible+0x150>)
 80129da:	589b      	ldr	r3, [r3, r2]
 80129dc:	2280      	movs	r2, #128	; 0x80
 80129de:	589b      	ldr	r3, [r3, r2]
 80129e0:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80129e2:	4b4c      	ldr	r3, [pc, #304]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 80129e4:	4a4c      	ldr	r2, [pc, #304]	; (8012b18 <LoRaMacQueryTxPossible+0x150>)
 80129e6:	589b      	ldr	r3, [r3, r2]
 80129e8:	2205      	movs	r2, #5
 80129ea:	569a      	ldrsb	r2, [r3, r2]
 80129ec:	230f      	movs	r3, #15
 80129ee:	18fb      	adds	r3, r7, r3
 80129f0:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80129f2:	4b48      	ldr	r3, [pc, #288]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 80129f4:	4a48      	ldr	r2, [pc, #288]	; (8012b18 <LoRaMacQueryTxPossible+0x150>)
 80129f6:	589b      	ldr	r3, [r3, r2]
 80129f8:	2204      	movs	r2, #4
 80129fa:	569a      	ldrsb	r2, [r3, r2]
 80129fc:	230e      	movs	r3, #14
 80129fe:	18fb      	adds	r3, r7, r3
 8012a00:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 8012a02:	2300      	movs	r3, #0
 8012a04:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d101      	bne.n	8012a10 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012a0c:	2303      	movs	r3, #3
 8012a0e:	e07d      	b.n	8012b0c <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8012a10:	4b40      	ldr	r3, [pc, #256]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 8012a12:	4a41      	ldr	r2, [pc, #260]	; (8012b18 <LoRaMacQueryTxPossible+0x150>)
 8012a14:	5899      	ldr	r1, [r3, r2]
 8012a16:	2014      	movs	r0, #20
 8012a18:	183b      	adds	r3, r7, r0
 8012a1a:	22b0      	movs	r2, #176	; 0xb0
 8012a1c:	0052      	lsls	r2, r2, #1
 8012a1e:	588a      	ldr	r2, [r1, r2]
 8012a20:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 8012a22:	183b      	adds	r3, r7, r0
 8012a24:	2200      	movs	r2, #0
 8012a26:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8012a28:	4b3a      	ldr	r3, [pc, #232]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 8012a2a:	4a3b      	ldr	r2, [pc, #236]	; (8012b18 <LoRaMacQueryTxPossible+0x150>)
 8012a2c:	589b      	ldr	r3, [r3, r2]
 8012a2e:	227e      	movs	r2, #126	; 0x7e
 8012a30:	5c9a      	ldrb	r2, [r3, r2]
 8012a32:	183b      	adds	r3, r7, r0
 8012a34:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8012a36:	4b37      	ldr	r3, [pc, #220]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 8012a38:	4a37      	ldr	r2, [pc, #220]	; (8012b18 <LoRaMacQueryTxPossible+0x150>)
 8012a3a:	589b      	ldr	r3, [r3, r2]
 8012a3c:	2280      	movs	r2, #128	; 0x80
 8012a3e:	589a      	ldr	r2, [r3, r2]
 8012a40:	183b      	adds	r3, r7, r0
 8012a42:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8012a44:	4a33      	ldr	r2, [pc, #204]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 8012a46:	23fd      	movs	r3, #253	; 0xfd
 8012a48:	009b      	lsls	r3, r3, #2
 8012a4a:	5ad2      	ldrh	r2, [r2, r3]
 8012a4c:	183b      	adds	r3, r7, r0
 8012a4e:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8012a50:	4b30      	ldr	r3, [pc, #192]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 8012a52:	4a32      	ldr	r2, [pc, #200]	; (8012b1c <LoRaMacQueryTxPossible+0x154>)
 8012a54:	5a9a      	ldrh	r2, [r3, r2]
 8012a56:	183b      	adds	r3, r7, r0
 8012a58:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012a5a:	4b2e      	ldr	r3, [pc, #184]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 8012a5c:	4a2e      	ldr	r2, [pc, #184]	; (8012b18 <LoRaMacQueryTxPossible+0x150>)
 8012a5e:	589b      	ldr	r3, [r3, r2]
 8012a60:	2285      	movs	r2, #133	; 0x85
 8012a62:	569a      	ldrsb	r2, [r3, r2]
 8012a64:	183b      	adds	r3, r7, r0
 8012a66:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012a68:	4b2a      	ldr	r3, [pc, #168]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 8012a6a:	4a2b      	ldr	r2, [pc, #172]	; (8012b18 <LoRaMacQueryTxPossible+0x150>)
 8012a6c:	589b      	ldr	r3, [r3, r2]
 8012a6e:	2284      	movs	r2, #132	; 0x84
 8012a70:	569a      	ldrsb	r2, [r3, r2]
 8012a72:	183b      	adds	r3, r7, r0
 8012a74:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012a76:	4b27      	ldr	r3, [pc, #156]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 8012a78:	4a27      	ldr	r2, [pc, #156]	; (8012b18 <LoRaMacQueryTxPossible+0x150>)
 8012a7a:	589b      	ldr	r3, [r3, r2]
 8012a7c:	22b8      	movs	r2, #184	; 0xb8
 8012a7e:	5c9a      	ldrb	r2, [r3, r2]
 8012a80:	183b      	adds	r3, r7, r0
 8012a82:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8012a84:	4b23      	ldr	r3, [pc, #140]	; (8012b14 <LoRaMacQueryTxPossible+0x14c>)
 8012a86:	4a24      	ldr	r2, [pc, #144]	; (8012b18 <LoRaMacQueryTxPossible+0x150>)
 8012a88:	589b      	ldr	r3, [r3, r2]
 8012a8a:	781a      	ldrb	r2, [r3, #0]
 8012a8c:	183b      	adds	r3, r7, r0
 8012a8e:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8012a90:	2310      	movs	r3, #16
 8012a92:	18fb      	adds	r3, r7, r3
 8012a94:	220e      	movs	r2, #14
 8012a96:	18ba      	adds	r2, r7, r2
 8012a98:	240f      	movs	r4, #15
 8012a9a:	1939      	adds	r1, r7, r4
 8012a9c:	1838      	adds	r0, r7, r0
 8012a9e:	f001 f8c4 	bl	8013c2a <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012aa2:	193b      	adds	r3, r7, r4
 8012aa4:	781b      	ldrb	r3, [r3, #0]
 8012aa6:	b25b      	sxtb	r3, r3
 8012aa8:	0018      	movs	r0, r3
 8012aaa:	f7fd f9e9 	bl	800fe80 <GetMaxAppPayloadWithoutFOptsLength>
 8012aae:	0003      	movs	r3, r0
 8012ab0:	001a      	movs	r2, r3
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012ab6:	2308      	movs	r3, #8
 8012ab8:	18fb      	adds	r3, r7, r3
 8012aba:	0018      	movs	r0, r3
 8012abc:	f001 fbf6 	bl	80142ac <LoRaMacCommandsGetSizeSerializedCmds>
 8012ac0:	1e03      	subs	r3, r0, #0
 8012ac2:	d001      	beq.n	8012ac8 <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012ac4:	2313      	movs	r3, #19
 8012ac6:	e021      	b.n	8012b0c <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	2b0f      	cmp	r3, #15
 8012acc:	d81a      	bhi.n	8012b04 <LoRaMacQueryTxPossible+0x13c>
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	785b      	ldrb	r3, [r3, #1]
 8012ad2:	001a      	movs	r2, r3
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d314      	bcc.n	8012b04 <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	785a      	ldrb	r2, [r3, #1]
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	b2db      	uxtb	r3, r3
 8012ae2:	1ad3      	subs	r3, r2, r3
 8012ae4:	b2da      	uxtb	r2, r3
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	785b      	ldrb	r3, [r3, #1]
 8012aee:	0019      	movs	r1, r3
 8012af0:	1dfb      	adds	r3, r7, #7
 8012af2:	781a      	ldrb	r2, [r3, #0]
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	18d3      	adds	r3, r2, r3
 8012af8:	4299      	cmp	r1, r3
 8012afa:	d301      	bcc.n	8012b00 <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 8012afc:	2300      	movs	r3, #0
 8012afe:	e005      	b.n	8012b0c <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012b00:	2308      	movs	r3, #8
 8012b02:	e003      	b.n	8012b0c <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	2200      	movs	r2, #0
 8012b08:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012b0a:	2308      	movs	r3, #8
    }
}
 8012b0c:	0018      	movs	r0, r3
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	b00b      	add	sp, #44	; 0x2c
 8012b12:	bd90      	pop	{r4, r7, pc}
 8012b14:	20000b6c 	.word	0x20000b6c
 8012b18:	00000484 	.word	0x00000484
 8012b1c:	000003f6 	.word	0x000003f6

08012b20 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012b20:	b590      	push	{r4, r7, lr}
 8012b22:	b087      	sub	sp, #28
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012b28:	2317      	movs	r3, #23
 8012b2a:	18fb      	adds	r3, r7, r3
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d101      	bne.n	8012b3a <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b36:	2303      	movs	r3, #3
 8012b38:	e146      	b.n	8012dc8 <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	2b28      	cmp	r3, #40	; 0x28
 8012b40:	d900      	bls.n	8012b44 <LoRaMacMibGetRequestConfirm+0x24>
 8012b42:	e135      	b.n	8012db0 <LoRaMacMibGetRequestConfirm+0x290>
 8012b44:	009a      	lsls	r2, r3, #2
 8012b46:	4ba2      	ldr	r3, [pc, #648]	; (8012dd0 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8012b48:	18d3      	adds	r3, r2, r3
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8012b4e:	4ba1      	ldr	r3, [pc, #644]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012b50:	4aa1      	ldr	r2, [pc, #644]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012b52:	589b      	ldr	r3, [r3, r2]
 8012b54:	227c      	movs	r2, #124	; 0x7c
 8012b56:	5c9a      	ldrb	r2, [r3, r2]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	711a      	strb	r2, [r3, #4]
            break;
 8012b5c:	e131      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8012b5e:	4b9d      	ldr	r3, [pc, #628]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012b60:	4a9d      	ldr	r2, [pc, #628]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012b62:	589a      	ldr	r2, [r3, r2]
 8012b64:	23b2      	movs	r3, #178	; 0xb2
 8012b66:	005b      	lsls	r3, r3, #1
 8012b68:	5cd2      	ldrb	r2, [r2, r3]
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	711a      	strb	r2, [r3, #4]
            break;
 8012b6e:	e128      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8012b70:	f7fa fb20 	bl	800d1b4 <SecureElementGetDevEui>
 8012b74:	0002      	movs	r2, r0
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	605a      	str	r2, [r3, #4]
            break;
 8012b7a:	e122      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8012b7c:	f7fa fb3e 	bl	800d1fc <SecureElementGetJoinEui>
 8012b80:	0002      	movs	r2, r0
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	605a      	str	r2, [r3, #4]
            break;
 8012b86:	e11c      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8012b88:	4b92      	ldr	r3, [pc, #584]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012b8a:	4a93      	ldr	r2, [pc, #588]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012b8c:	589b      	ldr	r3, [r3, r2]
 8012b8e:	227e      	movs	r2, #126	; 0x7e
 8012b90:	5c9a      	ldrb	r2, [r3, r2]
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	711a      	strb	r2, [r3, #4]
            break;
 8012b96:	e114      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8012b98:	4b8e      	ldr	r3, [pc, #568]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012b9a:	4a8f      	ldr	r2, [pc, #572]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012b9c:	589b      	ldr	r3, [r3, r2]
 8012b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	605a      	str	r2, [r3, #4]
            break;
 8012ba4:	e10d      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8012ba6:	4b8b      	ldr	r3, [pc, #556]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012ba8:	4a8b      	ldr	r2, [pc, #556]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012baa:	589b      	ldr	r3, [r3, r2]
 8012bac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	605a      	str	r2, [r3, #4]
            break;
 8012bb2:	e106      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8012bb4:	4b87      	ldr	r3, [pc, #540]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bb6:	4a88      	ldr	r2, [pc, #544]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012bb8:	589b      	ldr	r3, [r3, r2]
 8012bba:	227d      	movs	r2, #125	; 0x7d
 8012bbc:	5c9a      	ldrb	r2, [r3, r2]
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	711a      	strb	r2, [r3, #4]
            break;
 8012bc2:	e0fe      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8012bc4:	4b83      	ldr	r3, [pc, #524]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bc6:	4a84      	ldr	r2, [pc, #528]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012bc8:	589b      	ldr	r3, [r3, r2]
 8012bca:	22ca      	movs	r2, #202	; 0xca
 8012bcc:	5c9a      	ldrb	r2, [r3, r2]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	711a      	strb	r2, [r3, #4]
            break;
 8012bd2:	e0f6      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012bd4:	2110      	movs	r1, #16
 8012bd6:	187b      	adds	r3, r7, r1
 8012bd8:	221d      	movs	r2, #29
 8012bda:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012bdc:	4b7d      	ldr	r3, [pc, #500]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012bde:	4a7e      	ldr	r2, [pc, #504]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012be0:	589b      	ldr	r3, [r3, r2]
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	187a      	adds	r2, r7, r1
 8012be6:	0011      	movs	r1, r2
 8012be8:	0018      	movs	r0, r3
 8012bea:	f003 fa16 	bl	801601a <RegionGetPhyParam>
 8012bee:	0003      	movs	r3, r0
 8012bf0:	001a      	movs	r2, r3
 8012bf2:	210c      	movs	r1, #12
 8012bf4:	187b      	adds	r3, r7, r1
 8012bf6:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 8012bf8:	187b      	adds	r3, r7, r1
 8012bfa:	681a      	ldr	r2, [r3, #0]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	605a      	str	r2, [r3, #4]
            break;
 8012c00:	e0df      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8012c02:	4b74      	ldr	r3, [pc, #464]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c04:	4a74      	ldr	r2, [pc, #464]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c06:	589a      	ldr	r2, [r3, r2]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	21a8      	movs	r1, #168	; 0xa8
 8012c0c:	3304      	adds	r3, #4
 8012c0e:	1852      	adds	r2, r2, r1
 8012c10:	ca03      	ldmia	r2!, {r0, r1}
 8012c12:	c303      	stmia	r3!, {r0, r1}
            break;
 8012c14:	e0d5      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8012c16:	4b6f      	ldr	r3, [pc, #444]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c18:	4a6f      	ldr	r2, [pc, #444]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c1a:	589a      	ldr	r2, [r3, r2]
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	3304      	adds	r3, #4
 8012c20:	3228      	adds	r2, #40	; 0x28
 8012c22:	ca03      	ldmia	r2!, {r0, r1}
 8012c24:	c303      	stmia	r3!, {r0, r1}
            break;
 8012c26:	e0cc      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8012c28:	4b6a      	ldr	r3, [pc, #424]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c2a:	4a6b      	ldr	r2, [pc, #428]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c2c:	589a      	ldr	r2, [r3, r2]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	21b0      	movs	r1, #176	; 0xb0
 8012c32:	3304      	adds	r3, #4
 8012c34:	1852      	adds	r2, r2, r1
 8012c36:	ca03      	ldmia	r2!, {r0, r1}
 8012c38:	c303      	stmia	r3!, {r0, r1}
            break;
 8012c3a:	e0c2      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8012c3c:	4b65      	ldr	r3, [pc, #404]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c3e:	4a66      	ldr	r2, [pc, #408]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c40:	589a      	ldr	r2, [r3, r2]
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	3304      	adds	r3, #4
 8012c46:	3230      	adds	r2, #48	; 0x30
 8012c48:	ca03      	ldmia	r2!, {r0, r1}
 8012c4a:	c303      	stmia	r3!, {r0, r1}
            break;
 8012c4c:	e0b9      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8012c4e:	2110      	movs	r1, #16
 8012c50:	187b      	adds	r3, r7, r1
 8012c52:	221b      	movs	r2, #27
 8012c54:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012c56:	4b5f      	ldr	r3, [pc, #380]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c58:	4a5f      	ldr	r2, [pc, #380]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c5a:	589b      	ldr	r3, [r3, r2]
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	187a      	adds	r2, r7, r1
 8012c60:	0011      	movs	r1, r2
 8012c62:	0018      	movs	r0, r3
 8012c64:	f003 f9d9 	bl	801601a <RegionGetPhyParam>
 8012c68:	0003      	movs	r3, r0
 8012c6a:	001a      	movs	r2, r3
 8012c6c:	210c      	movs	r1, #12
 8012c6e:	187b      	adds	r3, r7, r1
 8012c70:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012c72:	187b      	adds	r3, r7, r1
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	605a      	str	r2, [r3, #4]
            break;
 8012c7a:	e0a2      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012c7c:	2110      	movs	r1, #16
 8012c7e:	187b      	adds	r3, r7, r1
 8012c80:	221a      	movs	r2, #26
 8012c82:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012c84:	4b53      	ldr	r3, [pc, #332]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012c86:	4a54      	ldr	r2, [pc, #336]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012c88:	589b      	ldr	r3, [r3, r2]
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	187a      	adds	r2, r7, r1
 8012c8e:	0011      	movs	r1, r2
 8012c90:	0018      	movs	r0, r3
 8012c92:	f003 f9c2 	bl	801601a <RegionGetPhyParam>
 8012c96:	0003      	movs	r3, r0
 8012c98:	001a      	movs	r2, r3
 8012c9a:	210c      	movs	r1, #12
 8012c9c:	187b      	adds	r3, r7, r1
 8012c9e:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8012ca0:	187b      	adds	r3, r7, r1
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	605a      	str	r2, [r3, #4]
            break;
 8012ca8:	e08b      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8012caa:	4b4a      	ldr	r3, [pc, #296]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012cac:	4a4a      	ldr	r2, [pc, #296]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012cae:	589b      	ldr	r3, [r3, r2]
 8012cb0:	22a4      	movs	r2, #164	; 0xa4
 8012cb2:	5c9a      	ldrb	r2, [r3, r2]
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	711a      	strb	r2, [r3, #4]
            break;
 8012cb8:	e083      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8012cba:	4b46      	ldr	r3, [pc, #280]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012cbc:	4a46      	ldr	r2, [pc, #280]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012cbe:	589b      	ldr	r3, [r3, r2]
 8012cc0:	2290      	movs	r2, #144	; 0x90
 8012cc2:	589a      	ldr	r2, [r3, r2]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	605a      	str	r2, [r3, #4]
            break;
 8012cc8:	e07b      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8012cca:	4b42      	ldr	r3, [pc, #264]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012ccc:	4a42      	ldr	r2, [pc, #264]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012cce:	589b      	ldr	r3, [r3, r2]
 8012cd0:	2294      	movs	r2, #148	; 0x94
 8012cd2:	589a      	ldr	r2, [r3, r2]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	605a      	str	r2, [r3, #4]
            break;
 8012cd8:	e073      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8012cda:	4b3e      	ldr	r3, [pc, #248]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012cdc:	4a3e      	ldr	r2, [pc, #248]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012cde:	589b      	ldr	r3, [r3, r2]
 8012ce0:	2298      	movs	r2, #152	; 0x98
 8012ce2:	589a      	ldr	r2, [r3, r2]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	605a      	str	r2, [r3, #4]
            break;
 8012ce8:	e06b      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8012cea:	4b3a      	ldr	r3, [pc, #232]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012cec:	4a3a      	ldr	r2, [pc, #232]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012cee:	589b      	ldr	r3, [r3, r2]
 8012cf0:	229c      	movs	r2, #156	; 0x9c
 8012cf2:	589a      	ldr	r2, [r3, r2]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	605a      	str	r2, [r3, #4]
            break;
 8012cf8:	e063      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8012cfa:	4b36      	ldr	r3, [pc, #216]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012cfc:	4a36      	ldr	r2, [pc, #216]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012cfe:	589b      	ldr	r3, [r3, r2]
 8012d00:	22a0      	movs	r2, #160	; 0xa0
 8012d02:	589a      	ldr	r2, [r3, r2]
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	605a      	str	r2, [r3, #4]
            break;
 8012d08:	e05b      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8012d0a:	4b32      	ldr	r3, [pc, #200]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d0c:	4a32      	ldr	r2, [pc, #200]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d0e:	589b      	ldr	r3, [r3, r2]
 8012d10:	2205      	movs	r2, #5
 8012d12:	569a      	ldrsb	r2, [r3, r2]
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	711a      	strb	r2, [r3, #4]
            break;
 8012d18:	e053      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012d1a:	4b2e      	ldr	r3, [pc, #184]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d1c:	4a2e      	ldr	r2, [pc, #184]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d1e:	589b      	ldr	r3, [r3, r2]
 8012d20:	2285      	movs	r2, #133	; 0x85
 8012d22:	569a      	ldrsb	r2, [r3, r2]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	711a      	strb	r2, [r3, #4]
            break;
 8012d28:	e04b      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8012d2a:	4b2a      	ldr	r3, [pc, #168]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d2c:	4a2a      	ldr	r2, [pc, #168]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d2e:	589b      	ldr	r3, [r3, r2]
 8012d30:	2204      	movs	r2, #4
 8012d32:	569a      	ldrsb	r2, [r3, r2]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	711a      	strb	r2, [r3, #4]
            break;
 8012d38:	e043      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012d3a:	4b26      	ldr	r3, [pc, #152]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d3c:	4a26      	ldr	r2, [pc, #152]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d3e:	589b      	ldr	r3, [r3, r2]
 8012d40:	2284      	movs	r2, #132	; 0x84
 8012d42:	569a      	ldrsb	r2, [r3, r2]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	711a      	strb	r2, [r3, #4]
            break;
 8012d48:	e03b      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8012d4a:	4b22      	ldr	r3, [pc, #136]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d4c:	4a22      	ldr	r2, [pc, #136]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d4e:	589b      	ldr	r3, [r3, r2]
 8012d50:	2288      	movs	r2, #136	; 0x88
 8012d52:	589a      	ldr	r2, [r3, r2]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	605a      	str	r2, [r3, #4]
            break;
 8012d58:	e033      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8012d5a:	4b1e      	ldr	r3, [pc, #120]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d5c:	4a1e      	ldr	r2, [pc, #120]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d5e:	589b      	ldr	r3, [r3, r2]
 8012d60:	228c      	movs	r2, #140	; 0x8c
 8012d62:	5c9a      	ldrb	r2, [r3, r2]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	711a      	strb	r2, [r3, #4]
            break;
 8012d68:	e02b      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012d6a:	4b1a      	ldr	r3, [pc, #104]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d6c:	4a1a      	ldr	r2, [pc, #104]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d6e:	589b      	ldr	r3, [r3, r2]
 8012d70:	22c0      	movs	r2, #192	; 0xc0
 8012d72:	589a      	ldr	r2, [r3, r2]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	605a      	str	r2, [r3, #4]
            break;
 8012d78:	e023      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 8012d7a:	f7fe ff23 	bl	8011bc4 <GetCtxs>
 8012d7e:	0002      	movs	r2, r0
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	605a      	str	r2, [r3, #4]
            break;
 8012d84:	e01d      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8012d86:	4b13      	ldr	r3, [pc, #76]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d88:	4a13      	ldr	r2, [pc, #76]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d8a:	589b      	ldr	r3, [r3, r2]
 8012d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	605a      	str	r2, [r3, #4]
            break;
 8012d92:	e016      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 8012d94:	4b0f      	ldr	r3, [pc, #60]	; (8012dd4 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8012d96:	4a10      	ldr	r2, [pc, #64]	; (8012dd8 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8012d98:	5899      	ldr	r1, [r3, r2]
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	22b0      	movs	r2, #176	; 0xb0
 8012d9e:	0052      	lsls	r2, r2, #1
 8012da0:	588a      	ldr	r2, [r1, r2]
 8012da2:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012da4:	687c      	ldr	r4, [r7, #4]
 8012da6:	f003 fb33 	bl	8016410 <RegionGetVersion>
 8012daa:	0003      	movs	r3, r0
 8012dac:	60a3      	str	r3, [r4, #8]
            break;
 8012dae:	e008      	b.n	8012dc2 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012db0:	2317      	movs	r3, #23
 8012db2:	18fc      	adds	r4, r7, r3
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	0018      	movs	r0, r3
 8012db8:	f000 ffed 	bl	8013d96 <LoRaMacClassBMibGetRequestConfirm>
 8012dbc:	0003      	movs	r3, r0
 8012dbe:	7023      	strb	r3, [r4, #0]
            break;
 8012dc0:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 8012dc2:	2317      	movs	r3, #23
 8012dc4:	18fb      	adds	r3, r7, r3
 8012dc6:	781b      	ldrb	r3, [r3, #0]
}
 8012dc8:	0018      	movs	r0, r3
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	b007      	add	sp, #28
 8012dce:	bd90      	pop	{r4, r7, pc}
 8012dd0:	0801e1e0 	.word	0x0801e1e0
 8012dd4:	20000b6c 	.word	0x20000b6c
 8012dd8:	00000484 	.word	0x00000484

08012ddc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012ddc:	b590      	push	{r4, r7, lr}
 8012dde:	b087      	sub	sp, #28
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012de4:	2317      	movs	r3, #23
 8012de6:	18fb      	adds	r3, r7, r3
 8012de8:	2200      	movs	r2, #0
 8012dea:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d102      	bne.n	8012df8 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012df2:	2303      	movs	r3, #3
 8012df4:	f000 fb74 	bl	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8012df8:	4ac3      	ldr	r2, [pc, #780]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 8012dfa:	23d0      	movs	r3, #208	; 0xd0
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	58d3      	ldr	r3, [r2, r3]
 8012e00:	2202      	movs	r2, #2
 8012e02:	4013      	ands	r3, r2
 8012e04:	d002      	beq.n	8012e0c <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012e06:	2301      	movs	r3, #1
 8012e08:	f000 fb6a 	bl	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
    }

    switch( mibSet->Type )
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	2b27      	cmp	r3, #39	; 0x27
 8012e12:	d900      	bls.n	8012e16 <LoRaMacMibSetRequestConfirm+0x3a>
 8012e14:	e333      	b.n	801347e <LoRaMacMibSetRequestConfirm+0x6a2>
 8012e16:	009a      	lsls	r2, r3, #2
 8012e18:	4bbc      	ldr	r3, [pc, #752]	; (801310c <LoRaMacMibSetRequestConfirm+0x330>)
 8012e1a:	18d3      	adds	r3, r2, r3
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	791b      	ldrb	r3, [r3, #4]
 8012e24:	2217      	movs	r2, #23
 8012e26:	18bc      	adds	r4, r7, r2
 8012e28:	0018      	movs	r0, r3
 8012e2a:	f7fc ff09 	bl	800fc40 <SwitchClass>
 8012e2e:	0003      	movs	r3, r0
 8012e30:	7023      	strb	r3, [r4, #0]
            break;
 8012e32:	e34e      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	791b      	ldrb	r3, [r3, #4]
 8012e38:	2b02      	cmp	r3, #2
 8012e3a:	d008      	beq.n	8012e4e <LoRaMacMibSetRequestConfirm+0x72>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8012e3c:	4bb2      	ldr	r3, [pc, #712]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 8012e3e:	4ab4      	ldr	r2, [pc, #720]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 8012e40:	589a      	ldr	r2, [r3, r2]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	7919      	ldrb	r1, [r3, #4]
 8012e46:	23b2      	movs	r3, #178	; 0xb2
 8012e48:	005b      	lsls	r3, r3, #1
 8012e4a:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012e4c:	e341      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e4e:	2317      	movs	r3, #23
 8012e50:	18fb      	adds	r3, r7, r3
 8012e52:	2203      	movs	r2, #3
 8012e54:	701a      	strb	r2, [r3, #0]
            break;
 8012e56:	e33c      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	0018      	movs	r0, r3
 8012e5e:	f7fa f98d 	bl	800d17c <SecureElementSetDevEui>
 8012e62:	1e03      	subs	r3, r0, #0
 8012e64:	d100      	bne.n	8012e68 <LoRaMacMibSetRequestConfirm+0x8c>
 8012e66:	e319      	b.n	801349c <LoRaMacMibSetRequestConfirm+0x6c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e68:	2317      	movs	r3, #23
 8012e6a:	18fb      	adds	r3, r7, r3
 8012e6c:	2203      	movs	r2, #3
 8012e6e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012e70:	e314      	b.n	801349c <LoRaMacMibSetRequestConfirm+0x6c0>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	0018      	movs	r0, r3
 8012e78:	f7fa f9a4 	bl	800d1c4 <SecureElementSetJoinEui>
 8012e7c:	1e03      	subs	r3, r0, #0
 8012e7e:	d100      	bne.n	8012e82 <LoRaMacMibSetRequestConfirm+0xa6>
 8012e80:	e30e      	b.n	80134a0 <LoRaMacMibSetRequestConfirm+0x6c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e82:	2317      	movs	r3, #23
 8012e84:	18fb      	adds	r3, r7, r3
 8012e86:	2203      	movs	r2, #3
 8012e88:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012e8a:	e309      	b.n	80134a0 <LoRaMacMibSetRequestConfirm+0x6c4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8012e8c:	4b9e      	ldr	r3, [pc, #632]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 8012e8e:	4aa0      	ldr	r2, [pc, #640]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 8012e90:	589b      	ldr	r3, [r3, r2]
 8012e92:	687a      	ldr	r2, [r7, #4]
 8012e94:	7911      	ldrb	r1, [r2, #4]
 8012e96:	227e      	movs	r2, #126	; 0x7e
 8012e98:	5499      	strb	r1, [r3, r2]
            break;
 8012e9a:	e31a      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8012e9c:	4b9a      	ldr	r3, [pc, #616]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 8012e9e:	4a9c      	ldr	r2, [pc, #624]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 8012ea0:	589b      	ldr	r3, [r3, r2]
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	6852      	ldr	r2, [r2, #4]
 8012ea6:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8012ea8:	e313      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8012eaa:	4b97      	ldr	r3, [pc, #604]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 8012eac:	4a98      	ldr	r2, [pc, #608]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 8012eae:	589b      	ldr	r3, [r3, r2]
 8012eb0:	687a      	ldr	r2, [r7, #4]
 8012eb2:	6852      	ldr	r2, [r2, #4]
 8012eb4:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8012eb6:	e30c      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	685b      	ldr	r3, [r3, #4]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d00a      	beq.n	8012ed6 <LoRaMacMibSetRequestConfirm+0xfa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	0019      	movs	r1, r3
 8012ec6:	2000      	movs	r0, #0
 8012ec8:	f002 f9de 	bl	8015288 <LoRaMacCryptoSetKey>
 8012ecc:	1e03      	subs	r3, r0, #0
 8012ece:	d100      	bne.n	8012ed2 <LoRaMacMibSetRequestConfirm+0xf6>
 8012ed0:	e2e8      	b.n	80134a4 <LoRaMacMibSetRequestConfirm+0x6c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012ed2:	2311      	movs	r3, #17
 8012ed4:	e304      	b.n	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ed6:	2317      	movs	r3, #23
 8012ed8:	18fb      	adds	r3, r7, r3
 8012eda:	2203      	movs	r2, #3
 8012edc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012ede:	e2e1      	b.n	80134a4 <LoRaMacMibSetRequestConfirm+0x6c8>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d00a      	beq.n	8012efe <LoRaMacMibSetRequestConfirm+0x122>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	0019      	movs	r1, r3
 8012eee:	2001      	movs	r0, #1
 8012ef0:	f002 f9ca 	bl	8015288 <LoRaMacCryptoSetKey>
 8012ef4:	1e03      	subs	r3, r0, #0
 8012ef6:	d100      	bne.n	8012efa <LoRaMacMibSetRequestConfirm+0x11e>
 8012ef8:	e2d6      	b.n	80134a8 <LoRaMacMibSetRequestConfirm+0x6cc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012efa:	2311      	movs	r3, #17
 8012efc:	e2f0      	b.n	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012efe:	2317      	movs	r3, #23
 8012f00:	18fb      	adds	r3, r7, r3
 8012f02:	2203      	movs	r2, #3
 8012f04:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f06:	e2cf      	b.n	80134a8 <LoRaMacMibSetRequestConfirm+0x6cc>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d00a      	beq.n	8012f26 <LoRaMacMibSetRequestConfirm+0x14a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	0019      	movs	r1, r3
 8012f16:	2002      	movs	r0, #2
 8012f18:	f002 f9b6 	bl	8015288 <LoRaMacCryptoSetKey>
 8012f1c:	1e03      	subs	r3, r0, #0
 8012f1e:	d100      	bne.n	8012f22 <LoRaMacMibSetRequestConfirm+0x146>
 8012f20:	e2c4      	b.n	80134ac <LoRaMacMibSetRequestConfirm+0x6d0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f22:	2311      	movs	r3, #17
 8012f24:	e2dc      	b.n	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f26:	2317      	movs	r3, #23
 8012f28:	18fb      	adds	r3, r7, r3
 8012f2a:	2203      	movs	r2, #3
 8012f2c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f2e:	e2bd      	b.n	80134ac <LoRaMacMibSetRequestConfirm+0x6d0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d00a      	beq.n	8012f4e <LoRaMacMibSetRequestConfirm+0x172>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	0019      	movs	r1, r3
 8012f3e:	2003      	movs	r0, #3
 8012f40:	f002 f9a2 	bl	8015288 <LoRaMacCryptoSetKey>
 8012f44:	1e03      	subs	r3, r0, #0
 8012f46:	d100      	bne.n	8012f4a <LoRaMacMibSetRequestConfirm+0x16e>
 8012f48:	e2b2      	b.n	80134b0 <LoRaMacMibSetRequestConfirm+0x6d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f4a:	2311      	movs	r3, #17
 8012f4c:	e2c8      	b.n	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f4e:	2317      	movs	r3, #23
 8012f50:	18fb      	adds	r3, r7, r3
 8012f52:	2203      	movs	r2, #3
 8012f54:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f56:	e2ab      	b.n	80134b0 <LoRaMacMibSetRequestConfirm+0x6d4>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d00a      	beq.n	8012f76 <LoRaMacMibSetRequestConfirm+0x19a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	0019      	movs	r1, r3
 8012f66:	207f      	movs	r0, #127	; 0x7f
 8012f68:	f002 f98e 	bl	8015288 <LoRaMacCryptoSetKey>
 8012f6c:	1e03      	subs	r3, r0, #0
 8012f6e:	d100      	bne.n	8012f72 <LoRaMacMibSetRequestConfirm+0x196>
 8012f70:	e2a0      	b.n	80134b4 <LoRaMacMibSetRequestConfirm+0x6d8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f72:	2311      	movs	r3, #17
 8012f74:	e2b4      	b.n	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f76:	2317      	movs	r3, #23
 8012f78:	18fb      	adds	r3, r7, r3
 8012f7a:	2203      	movs	r2, #3
 8012f7c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012f7e:	e299      	b.n	80134b4 <LoRaMacMibSetRequestConfirm+0x6d8>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d00a      	beq.n	8012f9e <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	0019      	movs	r1, r3
 8012f8e:	2080      	movs	r0, #128	; 0x80
 8012f90:	f002 f97a 	bl	8015288 <LoRaMacCryptoSetKey>
 8012f94:	1e03      	subs	r3, r0, #0
 8012f96:	d100      	bne.n	8012f9a <LoRaMacMibSetRequestConfirm+0x1be>
 8012f98:	e28e      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x6dc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f9a:	2311      	movs	r3, #17
 8012f9c:	e2a0      	b.n	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f9e:	2317      	movs	r3, #23
 8012fa0:	18fb      	adds	r3, r7, r3
 8012fa2:	2203      	movs	r2, #3
 8012fa4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012fa6:	e287      	b.n	80134b8 <LoRaMacMibSetRequestConfirm+0x6dc>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d00a      	beq.n	8012fc6 <LoRaMacMibSetRequestConfirm+0x1ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	0019      	movs	r1, r3
 8012fb6:	2081      	movs	r0, #129	; 0x81
 8012fb8:	f002 f966 	bl	8015288 <LoRaMacCryptoSetKey>
 8012fbc:	1e03      	subs	r3, r0, #0
 8012fbe:	d100      	bne.n	8012fc2 <LoRaMacMibSetRequestConfirm+0x1e6>
 8012fc0:	e27c      	b.n	80134bc <LoRaMacMibSetRequestConfirm+0x6e0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fc2:	2311      	movs	r3, #17
 8012fc4:	e28c      	b.n	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012fc6:	2317      	movs	r3, #23
 8012fc8:	18fb      	adds	r3, r7, r3
 8012fca:	2203      	movs	r2, #3
 8012fcc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012fce:	e275      	b.n	80134bc <LoRaMacMibSetRequestConfirm+0x6e0>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d00a      	beq.n	8012fee <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	0019      	movs	r1, r3
 8012fde:	2082      	movs	r0, #130	; 0x82
 8012fe0:	f002 f952 	bl	8015288 <LoRaMacCryptoSetKey>
 8012fe4:	1e03      	subs	r3, r0, #0
 8012fe6:	d100      	bne.n	8012fea <LoRaMacMibSetRequestConfirm+0x20e>
 8012fe8:	e26a      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6e4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fea:	2311      	movs	r3, #17
 8012fec:	e278      	b.n	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012fee:	2317      	movs	r3, #23
 8012ff0:	18fb      	adds	r3, r7, r3
 8012ff2:	2203      	movs	r2, #3
 8012ff4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012ff6:	e263      	b.n	80134c0 <LoRaMacMibSetRequestConfirm+0x6e4>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012ff8:	4b43      	ldr	r3, [pc, #268]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 8012ffa:	4a45      	ldr	r2, [pc, #276]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 8012ffc:	589b      	ldr	r3, [r3, r2]
 8012ffe:	687a      	ldr	r2, [r7, #4]
 8013000:	7911      	ldrb	r1, [r2, #4]
 8013002:	227d      	movs	r2, #125	; 0x7d
 8013004:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8013006:	4b43      	ldr	r3, [pc, #268]	; (8013114 <LoRaMacMibSetRequestConfirm+0x338>)
 8013008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801300a:	4a3f      	ldr	r2, [pc, #252]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 801300c:	4940      	ldr	r1, [pc, #256]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 801300e:	5852      	ldr	r2, [r2, r1]
 8013010:	217d      	movs	r1, #125	; 0x7d
 8013012:	5c52      	ldrb	r2, [r2, r1]
 8013014:	0010      	movs	r0, r2
 8013016:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8013018:	4b3e      	ldr	r3, [pc, #248]	; (8013114 <LoRaMacMibSetRequestConfirm+0x338>)
 801301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801301c:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 801301e:	e258      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013020:	4b39      	ldr	r3, [pc, #228]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013022:	4a3b      	ldr	r2, [pc, #236]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 8013024:	589b      	ldr	r3, [r3, r2]
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	7911      	ldrb	r1, [r2, #4]
 801302a:	22ca      	movs	r2, #202	; 0xca
 801302c:	5499      	strb	r1, [r3, r2]
            break;
 801302e:	e250      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	7a1b      	ldrb	r3, [r3, #8]
 8013034:	b25a      	sxtb	r2, r3
 8013036:	2108      	movs	r1, #8
 8013038:	187b      	adds	r3, r7, r1
 801303a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801303c:	4b32      	ldr	r3, [pc, #200]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 801303e:	4a34      	ldr	r2, [pc, #208]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 8013040:	589b      	ldr	r3, [r3, r2]
 8013042:	22b9      	movs	r2, #185	; 0xb9
 8013044:	5c9a      	ldrb	r2, [r3, r2]
 8013046:	187b      	adds	r3, r7, r1
 8013048:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 801304a:	4b2f      	ldr	r3, [pc, #188]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 801304c:	4a30      	ldr	r2, [pc, #192]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 801304e:	589b      	ldr	r3, [r3, r2]
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	1879      	adds	r1, r7, r1
 8013054:	2207      	movs	r2, #7
 8013056:	0018      	movs	r0, r3
 8013058:	f003 f845 	bl	80160e6 <RegionVerify>
 801305c:	0003      	movs	r3, r0
 801305e:	001a      	movs	r2, r3
 8013060:	2301      	movs	r3, #1
 8013062:	4053      	eors	r3, r2
 8013064:	b2db      	uxtb	r3, r3
 8013066:	2b00      	cmp	r3, #0
 8013068:	d004      	beq.n	8013074 <LoRaMacMibSetRequestConfirm+0x298>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801306a:	2317      	movs	r3, #23
 801306c:	18fb      	adds	r3, r7, r3
 801306e:	2203      	movs	r2, #3
 8013070:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8013072:	e22e      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	685a      	ldr	r2, [r3, #4]
 8013078:	2108      	movs	r1, #8
 801307a:	187b      	adds	r3, r7, r1
 801307c:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 801307e:	4b22      	ldr	r3, [pc, #136]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013080:	4a23      	ldr	r2, [pc, #140]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 8013082:	589b      	ldr	r3, [r3, r2]
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	1879      	adds	r1, r7, r1
 8013088:	2200      	movs	r2, #0
 801308a:	0018      	movs	r0, r3
 801308c:	f003 f82b 	bl	80160e6 <RegionVerify>
 8013090:	0003      	movs	r3, r0
 8013092:	001a      	movs	r2, r3
 8013094:	2301      	movs	r3, #1
 8013096:	4053      	eors	r3, r2
 8013098:	b2db      	uxtb	r3, r3
 801309a:	2b00      	cmp	r3, #0
 801309c:	d004      	beq.n	80130a8 <LoRaMacMibSetRequestConfirm+0x2cc>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801309e:	2317      	movs	r3, #23
 80130a0:	18fb      	adds	r3, r7, r3
 80130a2:	2203      	movs	r2, #3
 80130a4:	701a      	strb	r2, [r3, #0]
            break;
 80130a6:	e214      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80130a8:	4b17      	ldr	r3, [pc, #92]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 80130aa:	4a19      	ldr	r2, [pc, #100]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 80130ac:	589b      	ldr	r3, [r3, r2]
 80130ae:	21a8      	movs	r1, #168	; 0xa8
 80130b0:	687a      	ldr	r2, [r7, #4]
 80130b2:	185b      	adds	r3, r3, r1
 80130b4:	3204      	adds	r2, #4
 80130b6:	ca03      	ldmia	r2!, {r0, r1}
 80130b8:	c303      	stmia	r3!, {r0, r1}
            break;
 80130ba:	e20a      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	7a1b      	ldrb	r3, [r3, #8]
 80130c0:	b25a      	sxtb	r2, r3
 80130c2:	2108      	movs	r1, #8
 80130c4:	187b      	adds	r3, r7, r1
 80130c6:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80130c8:	4b0f      	ldr	r3, [pc, #60]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 80130ca:	4a11      	ldr	r2, [pc, #68]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 80130cc:	589b      	ldr	r3, [r3, r2]
 80130ce:	22b9      	movs	r2, #185	; 0xb9
 80130d0:	5c9a      	ldrb	r2, [r3, r2]
 80130d2:	187b      	adds	r3, r7, r1
 80130d4:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80130d6:	4b0c      	ldr	r3, [pc, #48]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 80130d8:	4a0d      	ldr	r2, [pc, #52]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 80130da:	589b      	ldr	r3, [r3, r2]
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	1879      	adds	r1, r7, r1
 80130e0:	2207      	movs	r2, #7
 80130e2:	0018      	movs	r0, r3
 80130e4:	f002 ffff 	bl	80160e6 <RegionVerify>
 80130e8:	1e03      	subs	r3, r0, #0
 80130ea:	d008      	beq.n	80130fe <LoRaMacMibSetRequestConfirm+0x322>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80130ec:	4b06      	ldr	r3, [pc, #24]	; (8013108 <LoRaMacMibSetRequestConfirm+0x32c>)
 80130ee:	4a08      	ldr	r2, [pc, #32]	; (8013110 <LoRaMacMibSetRequestConfirm+0x334>)
 80130f0:	589b      	ldr	r3, [r3, r2]
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	3328      	adds	r3, #40	; 0x28
 80130f6:	3204      	adds	r2, #4
 80130f8:	ca03      	ldmia	r2!, {r0, r1}
 80130fa:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80130fc:	e1e9      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130fe:	2317      	movs	r3, #23
 8013100:	18fb      	adds	r3, r7, r3
 8013102:	2203      	movs	r2, #3
 8013104:	701a      	strb	r2, [r3, #0]
            break;
 8013106:	e1e4      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
 8013108:	20000b6c 	.word	0x20000b6c
 801310c:	0801e284 	.word	0x0801e284
 8013110:	00000484 	.word	0x00000484
 8013114:	0801e62c 	.word	0x0801e62c
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	7a1b      	ldrb	r3, [r3, #8]
 801311c:	b25a      	sxtb	r2, r3
 801311e:	2108      	movs	r1, #8
 8013120:	187b      	adds	r3, r7, r1
 8013122:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013124:	4bda      	ldr	r3, [pc, #872]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013126:	4adb      	ldr	r2, [pc, #876]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013128:	589b      	ldr	r3, [r3, r2]
 801312a:	22b9      	movs	r2, #185	; 0xb9
 801312c:	5c9a      	ldrb	r2, [r3, r2]
 801312e:	187b      	adds	r3, r7, r1
 8013130:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013132:	4bd7      	ldr	r3, [pc, #860]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013134:	4ad7      	ldr	r2, [pc, #860]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013136:	589b      	ldr	r3, [r3, r2]
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	1879      	adds	r1, r7, r1
 801313c:	2207      	movs	r2, #7
 801313e:	0018      	movs	r0, r3
 8013140:	f002 ffd1 	bl	80160e6 <RegionVerify>
 8013144:	1e03      	subs	r3, r0, #0
 8013146:	d01f      	beq.n	8013188 <LoRaMacMibSetRequestConfirm+0x3ac>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013148:	4bd1      	ldr	r3, [pc, #836]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801314a:	4ad2      	ldr	r2, [pc, #840]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801314c:	589b      	ldr	r3, [r3, r2]
 801314e:	21b0      	movs	r1, #176	; 0xb0
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	185b      	adds	r3, r3, r1
 8013154:	3204      	adds	r2, #4
 8013156:	ca03      	ldmia	r2!, {r0, r1}
 8013158:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801315a:	4bcd      	ldr	r3, [pc, #820]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801315c:	4acd      	ldr	r2, [pc, #820]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801315e:	589b      	ldr	r3, [r3, r2]
 8013160:	227c      	movs	r2, #124	; 0x7c
 8013162:	5c9b      	ldrb	r3, [r3, r2]
 8013164:	2b02      	cmp	r3, #2
 8013166:	d000      	beq.n	801316a <LoRaMacMibSetRequestConfirm+0x38e>
 8013168:	e1ac      	b.n	80134c4 <LoRaMacMibSetRequestConfirm+0x6e8>
 801316a:	4bc9      	ldr	r3, [pc, #804]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801316c:	4ac9      	ldr	r2, [pc, #804]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801316e:	589a      	ldr	r2, [r3, r2]
 8013170:	23b2      	movs	r3, #178	; 0xb2
 8013172:	005b      	lsls	r3, r3, #1
 8013174:	5cd3      	ldrb	r3, [r2, r3]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d100      	bne.n	801317c <LoRaMacMibSetRequestConfirm+0x3a0>
 801317a:	e1a3      	b.n	80134c4 <LoRaMacMibSetRequestConfirm+0x6e8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801317c:	4bc6      	ldr	r3, [pc, #792]	; (8013498 <LoRaMacMibSetRequestConfirm+0x6bc>)
 801317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013180:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013182:	f7fe fa33 	bl	80115ec <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013186:	e19d      	b.n	80134c4 <LoRaMacMibSetRequestConfirm+0x6e8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013188:	2317      	movs	r3, #23
 801318a:	18fb      	adds	r3, r7, r3
 801318c:	2203      	movs	r2, #3
 801318e:	701a      	strb	r2, [r3, #0]
            break;
 8013190:	e198      	b.n	80134c4 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	7a1b      	ldrb	r3, [r3, #8]
 8013196:	b25a      	sxtb	r2, r3
 8013198:	2108      	movs	r1, #8
 801319a:	187b      	adds	r3, r7, r1
 801319c:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801319e:	4bbc      	ldr	r3, [pc, #752]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80131a0:	4abc      	ldr	r2, [pc, #752]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80131a2:	589b      	ldr	r3, [r3, r2]
 80131a4:	22b9      	movs	r2, #185	; 0xb9
 80131a6:	5c9a      	ldrb	r2, [r3, r2]
 80131a8:	187b      	adds	r3, r7, r1
 80131aa:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80131ac:	4bb8      	ldr	r3, [pc, #736]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80131ae:	4ab9      	ldr	r2, [pc, #740]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80131b0:	589b      	ldr	r3, [r3, r2]
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	1879      	adds	r1, r7, r1
 80131b6:	2207      	movs	r2, #7
 80131b8:	0018      	movs	r0, r3
 80131ba:	f002 ff94 	bl	80160e6 <RegionVerify>
 80131be:	1e03      	subs	r3, r0, #0
 80131c0:	d008      	beq.n	80131d4 <LoRaMacMibSetRequestConfirm+0x3f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80131c2:	4bb3      	ldr	r3, [pc, #716]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80131c4:	4ab3      	ldr	r2, [pc, #716]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80131c6:	589b      	ldr	r3, [r3, r2]
 80131c8:	687a      	ldr	r2, [r7, #4]
 80131ca:	3330      	adds	r3, #48	; 0x30
 80131cc:	3204      	adds	r2, #4
 80131ce:	ca03      	ldmia	r2!, {r0, r1}
 80131d0:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80131d2:	e17e      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131d4:	2317      	movs	r3, #23
 80131d6:	18fb      	adds	r3, r7, r3
 80131d8:	2203      	movs	r2, #3
 80131da:	701a      	strb	r2, [r3, #0]
            break;
 80131dc:	e179      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	685a      	ldr	r2, [r3, #4]
 80131e2:	210c      	movs	r1, #12
 80131e4:	187b      	adds	r3, r7, r1
 80131e6:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80131e8:	187b      	adds	r3, r7, r1
 80131ea:	2201      	movs	r2, #1
 80131ec:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 80131ee:	4ba8      	ldr	r3, [pc, #672]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80131f0:	4aa8      	ldr	r2, [pc, #672]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80131f2:	589b      	ldr	r3, [r3, r2]
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	187a      	adds	r2, r7, r1
 80131f8:	0011      	movs	r1, r2
 80131fa:	0018      	movs	r0, r3
 80131fc:	f002 ffa5 	bl	801614a <RegionChanMaskSet>
 8013200:	0003      	movs	r3, r0
 8013202:	001a      	movs	r2, r3
 8013204:	2301      	movs	r3, #1
 8013206:	4053      	eors	r3, r2
 8013208:	b2db      	uxtb	r3, r3
 801320a:	2b00      	cmp	r3, #0
 801320c:	d100      	bne.n	8013210 <LoRaMacMibSetRequestConfirm+0x434>
 801320e:	e15b      	b.n	80134c8 <LoRaMacMibSetRequestConfirm+0x6ec>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013210:	2317      	movs	r3, #23
 8013212:	18fb      	adds	r3, r7, r3
 8013214:	2203      	movs	r2, #3
 8013216:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013218:	e156      	b.n	80134c8 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	685a      	ldr	r2, [r3, #4]
 801321e:	210c      	movs	r1, #12
 8013220:	187b      	adds	r3, r7, r1
 8013222:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013224:	187b      	adds	r3, r7, r1
 8013226:	2200      	movs	r2, #0
 8013228:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 801322a:	4b99      	ldr	r3, [pc, #612]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801322c:	4a99      	ldr	r2, [pc, #612]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801322e:	589b      	ldr	r3, [r3, r2]
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	187a      	adds	r2, r7, r1
 8013234:	0011      	movs	r1, r2
 8013236:	0018      	movs	r0, r3
 8013238:	f002 ff87 	bl	801614a <RegionChanMaskSet>
 801323c:	0003      	movs	r3, r0
 801323e:	001a      	movs	r2, r3
 8013240:	2301      	movs	r3, #1
 8013242:	4053      	eors	r3, r2
 8013244:	b2db      	uxtb	r3, r3
 8013246:	2b00      	cmp	r3, #0
 8013248:	d100      	bne.n	801324c <LoRaMacMibSetRequestConfirm+0x470>
 801324a:	e13f      	b.n	80134cc <LoRaMacMibSetRequestConfirm+0x6f0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801324c:	2317      	movs	r3, #23
 801324e:	18fb      	adds	r3, r7, r3
 8013250:	2203      	movs	r2, #3
 8013252:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013254:	e13a      	b.n	80134cc <LoRaMacMibSetRequestConfirm+0x6f0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	791b      	ldrb	r3, [r3, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d00b      	beq.n	8013276 <LoRaMacMibSetRequestConfirm+0x49a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013262:	2b0f      	cmp	r3, #15
 8013264:	d807      	bhi.n	8013276 <LoRaMacMibSetRequestConfirm+0x49a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013266:	4b8a      	ldr	r3, [pc, #552]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013268:	4a8a      	ldr	r2, [pc, #552]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801326a:	589b      	ldr	r3, [r3, r2]
 801326c:	687a      	ldr	r2, [r7, #4]
 801326e:	7911      	ldrb	r1, [r2, #4]
 8013270:	22a4      	movs	r2, #164	; 0xa4
 8013272:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013274:	e12d      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013276:	2317      	movs	r3, #23
 8013278:	18fb      	adds	r3, r7, r3
 801327a:	2203      	movs	r2, #3
 801327c:	701a      	strb	r2, [r3, #0]
            break;
 801327e:	e128      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013280:	4b83      	ldr	r3, [pc, #524]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013282:	4a84      	ldr	r2, [pc, #528]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013284:	589a      	ldr	r2, [r3, r2]
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	685b      	ldr	r3, [r3, #4]
 801328a:	2190      	movs	r1, #144	; 0x90
 801328c:	5053      	str	r3, [r2, r1]
            break;
 801328e:	e120      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013290:	4b7f      	ldr	r3, [pc, #508]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013292:	4a80      	ldr	r2, [pc, #512]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013294:	589a      	ldr	r2, [r3, r2]
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	685b      	ldr	r3, [r3, #4]
 801329a:	2194      	movs	r1, #148	; 0x94
 801329c:	5053      	str	r3, [r2, r1]
            break;
 801329e:	e118      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80132a0:	4b7b      	ldr	r3, [pc, #492]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80132a2:	4a7c      	ldr	r2, [pc, #496]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80132a4:	589a      	ldr	r2, [r3, r2]
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	685b      	ldr	r3, [r3, #4]
 80132aa:	2198      	movs	r1, #152	; 0x98
 80132ac:	5053      	str	r3, [r2, r1]
            break;
 80132ae:	e110      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80132b0:	4b77      	ldr	r3, [pc, #476]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80132b2:	4a78      	ldr	r2, [pc, #480]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80132b4:	589a      	ldr	r2, [r3, r2]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	219c      	movs	r1, #156	; 0x9c
 80132bc:	5053      	str	r3, [r2, r1]
            break;
 80132be:	e108      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80132c0:	4b73      	ldr	r3, [pc, #460]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80132c2:	4a74      	ldr	r2, [pc, #464]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80132c4:	589a      	ldr	r2, [r3, r2]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	21a0      	movs	r1, #160	; 0xa0
 80132cc:	5053      	str	r3, [r2, r1]
            break;
 80132ce:	e100      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2204      	movs	r2, #4
 80132d4:	569a      	ldrsb	r2, [r3, r2]
 80132d6:	2408      	movs	r4, #8
 80132d8:	193b      	adds	r3, r7, r4
 80132da:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 80132dc:	4b6c      	ldr	r3, [pc, #432]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80132de:	4a6d      	ldr	r2, [pc, #436]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80132e0:	589b      	ldr	r3, [r3, r2]
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	1939      	adds	r1, r7, r4
 80132e6:	2206      	movs	r2, #6
 80132e8:	0018      	movs	r0, r3
 80132ea:	f002 fefc 	bl	80160e6 <RegionVerify>
 80132ee:	1e03      	subs	r3, r0, #0
 80132f0:	d007      	beq.n	8013302 <LoRaMacMibSetRequestConfirm+0x526>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 80132f2:	4b67      	ldr	r3, [pc, #412]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80132f4:	4a67      	ldr	r2, [pc, #412]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80132f6:	589b      	ldr	r3, [r3, r2]
 80132f8:	193a      	adds	r2, r7, r4
 80132fa:	7812      	ldrb	r2, [r2, #0]
 80132fc:	b252      	sxtb	r2, r2
 80132fe:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013300:	e0e7      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013302:	2317      	movs	r3, #23
 8013304:	18fb      	adds	r3, r7, r3
 8013306:	2203      	movs	r2, #3
 8013308:	701a      	strb	r2, [r3, #0]
            break;
 801330a:	e0e2      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2204      	movs	r2, #4
 8013310:	569a      	ldrsb	r2, [r3, r2]
 8013312:	2408      	movs	r4, #8
 8013314:	193b      	adds	r3, r7, r4
 8013316:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013318:	4b5d      	ldr	r3, [pc, #372]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801331a:	4a5e      	ldr	r2, [pc, #376]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801331c:	589b      	ldr	r3, [r3, r2]
 801331e:	22b8      	movs	r2, #184	; 0xb8
 8013320:	5c9a      	ldrb	r2, [r3, r2]
 8013322:	193b      	adds	r3, r7, r4
 8013324:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8013326:	4b5a      	ldr	r3, [pc, #360]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013328:	4a5a      	ldr	r2, [pc, #360]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801332a:	589b      	ldr	r3, [r3, r2]
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	1939      	adds	r1, r7, r4
 8013330:	2205      	movs	r2, #5
 8013332:	0018      	movs	r0, r3
 8013334:	f002 fed7 	bl	80160e6 <RegionVerify>
 8013338:	1e03      	subs	r3, r0, #0
 801333a:	d008      	beq.n	801334e <LoRaMacMibSetRequestConfirm+0x572>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 801333c:	4b54      	ldr	r3, [pc, #336]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801333e:	4a55      	ldr	r2, [pc, #340]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013340:	589b      	ldr	r3, [r3, r2]
 8013342:	193a      	adds	r2, r7, r4
 8013344:	2100      	movs	r1, #0
 8013346:	5651      	ldrsb	r1, [r2, r1]
 8013348:	2285      	movs	r2, #133	; 0x85
 801334a:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801334c:	e0c1      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801334e:	2317      	movs	r3, #23
 8013350:	18fb      	adds	r3, r7, r3
 8013352:	2203      	movs	r2, #3
 8013354:	701a      	strb	r2, [r3, #0]
            break;
 8013356:	e0bc      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2204      	movs	r2, #4
 801335c:	569a      	ldrsb	r2, [r3, r2]
 801335e:	2408      	movs	r4, #8
 8013360:	193b      	adds	r3, r7, r4
 8013362:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013364:	4b4a      	ldr	r3, [pc, #296]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013366:	4a4b      	ldr	r2, [pc, #300]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013368:	589b      	ldr	r3, [r3, r2]
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	1939      	adds	r1, r7, r4
 801336e:	220a      	movs	r2, #10
 8013370:	0018      	movs	r0, r3
 8013372:	f002 feb8 	bl	80160e6 <RegionVerify>
 8013376:	1e03      	subs	r3, r0, #0
 8013378:	d007      	beq.n	801338a <LoRaMacMibSetRequestConfirm+0x5ae>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 801337a:	4b45      	ldr	r3, [pc, #276]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801337c:	4a45      	ldr	r2, [pc, #276]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801337e:	589b      	ldr	r3, [r3, r2]
 8013380:	193a      	adds	r2, r7, r4
 8013382:	7812      	ldrb	r2, [r2, #0]
 8013384:	b252      	sxtb	r2, r2
 8013386:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013388:	e0a3      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801338a:	2317      	movs	r3, #23
 801338c:	18fb      	adds	r3, r7, r3
 801338e:	2203      	movs	r2, #3
 8013390:	701a      	strb	r2, [r3, #0]
            break;
 8013392:	e09e      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2204      	movs	r2, #4
 8013398:	569a      	ldrsb	r2, [r3, r2]
 801339a:	2408      	movs	r4, #8
 801339c:	193b      	adds	r3, r7, r4
 801339e:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 80133a0:	4b3b      	ldr	r3, [pc, #236]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80133a2:	4a3c      	ldr	r2, [pc, #240]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80133a4:	589b      	ldr	r3, [r3, r2]
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	1939      	adds	r1, r7, r4
 80133aa:	2209      	movs	r2, #9
 80133ac:	0018      	movs	r0, r3
 80133ae:	f002 fe9a 	bl	80160e6 <RegionVerify>
 80133b2:	1e03      	subs	r3, r0, #0
 80133b4:	d008      	beq.n	80133c8 <LoRaMacMibSetRequestConfirm+0x5ec>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 80133b6:	4b36      	ldr	r3, [pc, #216]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80133b8:	4a36      	ldr	r2, [pc, #216]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80133ba:	589b      	ldr	r3, [r3, r2]
 80133bc:	193a      	adds	r2, r7, r4
 80133be:	2100      	movs	r1, #0
 80133c0:	5651      	ldrsb	r1, [r2, r1]
 80133c2:	2284      	movs	r2, #132	; 0x84
 80133c4:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80133c6:	e084      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80133c8:	2317      	movs	r3, #23
 80133ca:	18fb      	adds	r3, r7, r3
 80133cc:	2203      	movs	r2, #3
 80133ce:	701a      	strb	r2, [r3, #0]
            break;
 80133d0:	e07f      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80133d2:	4b2f      	ldr	r3, [pc, #188]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80133d4:	4a2f      	ldr	r2, [pc, #188]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80133d6:	589b      	ldr	r3, [r3, r2]
 80133d8:	687a      	ldr	r2, [r7, #4]
 80133da:	6852      	ldr	r2, [r2, #4]
 80133dc:	609a      	str	r2, [r3, #8]
 80133de:	4a2c      	ldr	r2, [pc, #176]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80133e0:	492c      	ldr	r1, [pc, #176]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80133e2:	5852      	ldr	r2, [r2, r1]
 80133e4:	689b      	ldr	r3, [r3, #8]
 80133e6:	2188      	movs	r1, #136	; 0x88
 80133e8:	5053      	str	r3, [r2, r1]
            break;
 80133ea:	e072      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80133ec:	4b28      	ldr	r3, [pc, #160]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80133ee:	4a29      	ldr	r2, [pc, #164]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80133f0:	589b      	ldr	r3, [r3, r2]
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	7912      	ldrb	r2, [r2, #4]
 80133f6:	731a      	strb	r2, [r3, #12]
 80133f8:	4a25      	ldr	r2, [pc, #148]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 80133fa:	4926      	ldr	r1, [pc, #152]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 80133fc:	5852      	ldr	r2, [r2, r1]
 80133fe:	7b19      	ldrb	r1, [r3, #12]
 8013400:	238c      	movs	r3, #140	; 0x8c
 8013402:	54d1      	strb	r1, [r2, r3]
            break;
 8013404:	e065      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013406:	4b22      	ldr	r3, [pc, #136]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013408:	4a22      	ldr	r2, [pc, #136]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801340a:	589a      	ldr	r2, [r3, r2]
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	685b      	ldr	r3, [r3, #4]
 8013410:	21c0      	movs	r1, #192	; 0xc0
 8013412:	5053      	str	r3, [r2, r1]
            break;
 8013414:	e05d      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013416:	4b1e      	ldr	r3, [pc, #120]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013418:	4a1e      	ldr	r2, [pc, #120]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801341a:	589b      	ldr	r3, [r3, r2]
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	6852      	ldr	r2, [r2, #4]
 8013420:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 8013422:	e056      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d009      	beq.n	8013440 <LoRaMacMibSetRequestConfirm+0x664>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	2217      	movs	r2, #23
 8013432:	18bc      	adds	r4, r7, r2
 8013434:	0018      	movs	r0, r3
 8013436:	f7fe fc1b 	bl	8011c70 <RestoreCtxs>
 801343a:	0003      	movs	r3, r0
 801343c:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801343e:	e048      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013440:	2317      	movs	r3, #23
 8013442:	18fb      	adds	r3, r7, r3
 8013444:	2203      	movs	r2, #3
 8013446:	701a      	strb	r2, [r3, #0]
            break;
 8013448:	e043      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	799b      	ldrb	r3, [r3, #6]
 801344e:	2b01      	cmp	r3, #1
 8013450:	d810      	bhi.n	8013474 <LoRaMacMibSetRequestConfirm+0x698>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8013452:	4b0f      	ldr	r3, [pc, #60]	; (8013490 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013454:	4a0f      	ldr	r2, [pc, #60]	; (8013494 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013456:	5899      	ldr	r1, [r3, r2]
 8013458:	23b0      	movs	r3, #176	; 0xb0
 801345a:	005a      	lsls	r2, r3, #1
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	0018      	movs	r0, r3
 8013468:	f001 fe20 	bl	80150ac <LoRaMacCryptoSetLrWanVersion>
 801346c:	1e03      	subs	r3, r0, #0
 801346e:	d02f      	beq.n	80134d0 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013470:	2311      	movs	r3, #17
 8013472:	e035      	b.n	80134e0 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013474:	2317      	movs	r3, #23
 8013476:	18fb      	adds	r3, r7, r3
 8013478:	2203      	movs	r2, #3
 801347a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801347c:	e028      	b.n	80134d0 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801347e:	2317      	movs	r3, #23
 8013480:	18fc      	adds	r4, r7, r3
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	0018      	movs	r0, r3
 8013486:	f000 fc8f 	bl	8013da8 <LoRaMacMibClassBSetRequestConfirm>
 801348a:	0003      	movs	r3, r0
 801348c:	7023      	strb	r3, [r4, #0]
            break;
 801348e:	e020      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
 8013490:	20000b6c 	.word	0x20000b6c
 8013494:	00000484 	.word	0x00000484
 8013498:	0801e62c 	.word	0x0801e62c
            break;
 801349c:	46c0      	nop			; (mov r8, r8)
 801349e:	e018      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134a0:	46c0      	nop			; (mov r8, r8)
 80134a2:	e016      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134a4:	46c0      	nop			; (mov r8, r8)
 80134a6:	e014      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134a8:	46c0      	nop			; (mov r8, r8)
 80134aa:	e012      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134ac:	46c0      	nop			; (mov r8, r8)
 80134ae:	e010      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134b0:	46c0      	nop			; (mov r8, r8)
 80134b2:	e00e      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134b4:	46c0      	nop			; (mov r8, r8)
 80134b6:	e00c      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134b8:	46c0      	nop			; (mov r8, r8)
 80134ba:	e00a      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134bc:	46c0      	nop			; (mov r8, r8)
 80134be:	e008      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134c0:	46c0      	nop			; (mov r8, r8)
 80134c2:	e006      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134c4:	46c0      	nop			; (mov r8, r8)
 80134c6:	e004      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134c8:	46c0      	nop			; (mov r8, r8)
 80134ca:	e002      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134cc:	46c0      	nop			; (mov r8, r8)
 80134ce:	e000      	b.n	80134d2 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80134d0:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 80134d2:	f7fe fe19 	bl	8012108 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 80134d6:	f7fe fe0f 	bl	80120f8 <EventMacNvmCtxChanged>
    return status;
 80134da:	2317      	movs	r3, #23
 80134dc:	18fb      	adds	r3, r7, r3
 80134de:	781b      	ldrb	r3, [r3, #0]
}
 80134e0:	0018      	movs	r0, r3
 80134e2:	46bd      	mov	sp, r7
 80134e4:	b007      	add	sp, #28
 80134e6:	bd90      	pop	{r4, r7, pc}

080134e8 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80134e8:	b5b0      	push	{r4, r5, r7, lr}
 80134ea:	b086      	sub	sp, #24
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80134f0:	2317      	movs	r3, #23
 80134f2:	18fb      	adds	r3, r7, r3
 80134f4:	2202      	movs	r2, #2
 80134f6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80134f8:	230c      	movs	r3, #12
 80134fa:	18fb      	adds	r3, r7, r3
 80134fc:	2200      	movs	r2, #0
 80134fe:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d101      	bne.n	801350a <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013506:	2303      	movs	r3, #3
 8013508:	e133      	b.n	8013772 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 801350a:	f7fe fe49 	bl	80121a0 <LoRaMacIsBusy>
 801350e:	1e03      	subs	r3, r0, #0
 8013510:	d001      	beq.n	8013516 <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 8013512:	2301      	movs	r3, #1
 8013514:	e12d      	b.n	8013772 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013516:	f001 fa0b 	bl	8014930 <LoRaMacConfirmQueueIsFull>
 801351a:	1e03      	subs	r3, r0, #0
 801351c:	d001      	beq.n	8013522 <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 801351e:	2301      	movs	r3, #1
 8013520:	e127      	b.n	8013772 <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013522:	f001 f9fb 	bl	801491c <LoRaMacConfirmQueueGetCnt>
 8013526:	1e03      	subs	r3, r0, #0
 8013528:	d105      	bne.n	8013536 <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801352a:	4b94      	ldr	r3, [pc, #592]	; (801377c <LoRaMacMlmeRequest+0x294>)
 801352c:	2214      	movs	r2, #20
 801352e:	2100      	movs	r1, #0
 8013530:	0018      	movs	r0, r3
 8013532:	f005 fa2b 	bl	801898c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013536:	4b92      	ldr	r3, [pc, #584]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 8013538:	4a92      	ldr	r2, [pc, #584]	; (8013784 <LoRaMacMlmeRequest+0x29c>)
 801353a:	2101      	movs	r1, #1
 801353c:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801353e:	4b90      	ldr	r3, [pc, #576]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 8013540:	4a91      	ldr	r2, [pc, #580]	; (8013788 <LoRaMacMlmeRequest+0x2a0>)
 8013542:	5c99      	ldrb	r1, [r3, r2]
 8013544:	2004      	movs	r0, #4
 8013546:	4301      	orrs	r1, r0
 8013548:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	781a      	ldrb	r2, [r3, #0]
 801354e:	2110      	movs	r1, #16
 8013550:	187b      	adds	r3, r7, r1
 8013552:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013554:	187b      	adds	r3, r7, r1
 8013556:	2201      	movs	r2, #1
 8013558:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 801355a:	187b      	adds	r3, r7, r1
 801355c:	2200      	movs	r2, #0
 801355e:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	2b0e      	cmp	r3, #14
 8013566:	d900      	bls.n	801356a <LoRaMacMlmeRequest+0x82>
 8013568:	e0d4      	b.n	8013714 <LoRaMacMlmeRequest+0x22c>
 801356a:	009a      	lsls	r2, r3, #2
 801356c:	4b87      	ldr	r3, [pc, #540]	; (801378c <LoRaMacMlmeRequest+0x2a4>)
 801356e:	18d3      	adds	r3, r2, r3
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013574:	4a82      	ldr	r2, [pc, #520]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 8013576:	23d0      	movs	r3, #208	; 0xd0
 8013578:	009b      	lsls	r3, r3, #2
 801357a:	58d3      	ldr	r3, [r2, r3]
 801357c:	2220      	movs	r2, #32
 801357e:	4013      	ands	r3, r2
 8013580:	d001      	beq.n	8013586 <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 8013582:	2301      	movs	r3, #1
 8013584:	e0f5      	b.n	8013772 <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 8013586:	f7fd feff 	bl	8011388 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801358a:	4b7d      	ldr	r3, [pc, #500]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 801358c:	4a80      	ldr	r2, [pc, #512]	; (8013790 <LoRaMacMlmeRequest+0x2a8>)
 801358e:	589b      	ldr	r3, [r3, r2]
 8013590:	7818      	ldrb	r0, [r3, #0]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	791b      	ldrb	r3, [r3, #4]
 8013596:	b259      	sxtb	r1, r3
 8013598:	4b79      	ldr	r3, [pc, #484]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 801359a:	4a7d      	ldr	r2, [pc, #500]	; (8013790 <LoRaMacMlmeRequest+0x2a8>)
 801359c:	589c      	ldr	r4, [r3, r2]
 801359e:	2200      	movs	r2, #0
 80135a0:	f002 feb8 	bl	8016314 <RegionAlternateDr>
 80135a4:	0003      	movs	r3, r0
 80135a6:	001a      	movs	r2, r3
 80135a8:	2385      	movs	r3, #133	; 0x85
 80135aa:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80135ac:	2310      	movs	r3, #16
 80135ae:	18fb      	adds	r3, r7, r3
 80135b0:	2207      	movs	r2, #7
 80135b2:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 80135b4:	2517      	movs	r5, #23
 80135b6:	197c      	adds	r4, r7, r5
 80135b8:	20ff      	movs	r0, #255	; 0xff
 80135ba:	f7fd fbab 	bl	8010d14 <SendReJoinReq>
 80135be:	0003      	movs	r3, r0
 80135c0:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 80135c2:	197b      	adds	r3, r7, r5
 80135c4:	781b      	ldrb	r3, [r3, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d100      	bne.n	80135cc <LoRaMacMlmeRequest+0xe4>
 80135ca:	e0a5      	b.n	8013718 <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80135cc:	4b6c      	ldr	r3, [pc, #432]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 80135ce:	4a70      	ldr	r2, [pc, #448]	; (8013790 <LoRaMacMlmeRequest+0x2a8>)
 80135d0:	589b      	ldr	r3, [r3, r2]
 80135d2:	7818      	ldrb	r0, [r3, #0]
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	791b      	ldrb	r3, [r3, #4]
 80135d8:	b259      	sxtb	r1, r3
 80135da:	4b69      	ldr	r3, [pc, #420]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 80135dc:	4a6c      	ldr	r2, [pc, #432]	; (8013790 <LoRaMacMlmeRequest+0x2a8>)
 80135de:	589c      	ldr	r4, [r3, r2]
 80135e0:	2201      	movs	r2, #1
 80135e2:	f002 fe97 	bl	8016314 <RegionAlternateDr>
 80135e6:	0003      	movs	r3, r0
 80135e8:	001a      	movs	r2, r3
 80135ea:	2385      	movs	r3, #133	; 0x85
 80135ec:	54e2      	strb	r2, [r4, r3]
            }
            break;
 80135ee:	e093      	b.n	8013718 <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80135f0:	2417      	movs	r4, #23
 80135f2:	193b      	adds	r3, r7, r4
 80135f4:	2200      	movs	r2, #0
 80135f6:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80135f8:	230c      	movs	r3, #12
 80135fa:	18fb      	adds	r3, r7, r3
 80135fc:	2200      	movs	r2, #0
 80135fe:	0019      	movs	r1, r3
 8013600:	2002      	movs	r0, #2
 8013602:	f000 fd7d 	bl	8014100 <LoRaMacCommandsAddCmd>
 8013606:	1e03      	subs	r3, r0, #0
 8013608:	d100      	bne.n	801360c <LoRaMacMlmeRequest+0x124>
 801360a:	e087      	b.n	801371c <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801360c:	193b      	adds	r3, r7, r4
 801360e:	2213      	movs	r2, #19
 8013610:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013612:	e083      	b.n	801371c <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	889b      	ldrh	r3, [r3, #4]
 8013618:	2217      	movs	r2, #23
 801361a:	18bc      	adds	r4, r7, r2
 801361c:	0018      	movs	r0, r3
 801361e:	f7fe fa5d 	bl	8011adc <SetTxContinuousWave>
 8013622:	0003      	movs	r3, r0
 8013624:	7023      	strb	r3, [r4, #0]
            break;
 8013626:	e080      	b.n	801372a <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	8898      	ldrh	r0, [r3, #4]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6899      	ldr	r1, [r3, #8]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	7b1b      	ldrb	r3, [r3, #12]
 8013634:	2217      	movs	r2, #23
 8013636:	18bc      	adds	r4, r7, r2
 8013638:	001a      	movs	r2, r3
 801363a:	f7fe fa9b 	bl	8011b74 <SetTxContinuousWave1>
 801363e:	0003      	movs	r3, r0
 8013640:	7023      	strb	r3, [r4, #0]
            break;
 8013642:	e072      	b.n	801372a <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013644:	2417      	movs	r4, #23
 8013646:	193b      	adds	r3, r7, r4
 8013648:	2200      	movs	r2, #0
 801364a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801364c:	230c      	movs	r3, #12
 801364e:	18fb      	adds	r3, r7, r3
 8013650:	2200      	movs	r2, #0
 8013652:	0019      	movs	r1, r3
 8013654:	200d      	movs	r0, #13
 8013656:	f000 fd53 	bl	8014100 <LoRaMacCommandsAddCmd>
 801365a:	1e03      	subs	r3, r0, #0
 801365c:	d060      	beq.n	8013720 <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801365e:	193b      	adds	r3, r7, r4
 8013660:	2213      	movs	r2, #19
 8013662:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013664:	e05c      	b.n	8013720 <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8013666:	4b46      	ldr	r3, [pc, #280]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 8013668:	4a49      	ldr	r2, [pc, #292]	; (8013790 <LoRaMacMlmeRequest+0x2a8>)
 801366a:	589b      	ldr	r3, [r3, r2]
 801366c:	227c      	movs	r2, #124	; 0x7c
 801366e:	5c9b      	ldrb	r3, [r3, r2]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d157      	bne.n	8013724 <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8013674:	2416      	movs	r4, #22
 8013676:	193b      	adds	r3, r7, r4
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	7912      	ldrb	r2, [r2, #4]
 801367c:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	791b      	ldrb	r3, [r3, #4]
 8013682:	075b      	lsls	r3, r3, #29
 8013684:	0f5b      	lsrs	r3, r3, #29
 8013686:	b2db      	uxtb	r3, r3
 8013688:	0018      	movs	r0, r3
 801368a:	f000 fb65 	bl	8013d58 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801368e:	210c      	movs	r1, #12
 8013690:	187b      	adds	r3, r7, r1
 8013692:	193a      	adds	r2, r7, r4
 8013694:	7812      	ldrb	r2, [r2, #0]
 8013696:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8013698:	2417      	movs	r4, #23
 801369a:	193b      	adds	r3, r7, r4
 801369c:	2200      	movs	r2, #0
 801369e:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80136a0:	187b      	adds	r3, r7, r1
 80136a2:	2201      	movs	r2, #1
 80136a4:	0019      	movs	r1, r3
 80136a6:	2010      	movs	r0, #16
 80136a8:	f000 fd2a 	bl	8014100 <LoRaMacCommandsAddCmd>
 80136ac:	1e03      	subs	r3, r0, #0
 80136ae:	d039      	beq.n	8013724 <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80136b0:	193b      	adds	r3, r7, r4
 80136b2:	2213      	movs	r2, #19
 80136b4:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 80136b6:	e035      	b.n	8013724 <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80136b8:	2417      	movs	r4, #23
 80136ba:	193b      	adds	r3, r7, r4
 80136bc:	2200      	movs	r2, #0
 80136be:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80136c0:	230c      	movs	r3, #12
 80136c2:	18fb      	adds	r3, r7, r3
 80136c4:	2200      	movs	r2, #0
 80136c6:	0019      	movs	r1, r3
 80136c8:	2012      	movs	r0, #18
 80136ca:	f000 fd19 	bl	8014100 <LoRaMacCommandsAddCmd>
 80136ce:	1e03      	subs	r3, r0, #0
 80136d0:	d02a      	beq.n	8013728 <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80136d2:	193b      	adds	r3, r7, r4
 80136d4:	2213      	movs	r2, #19
 80136d6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80136d8:	e026      	b.n	8013728 <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80136da:	2310      	movs	r3, #16
 80136dc:	18fb      	adds	r3, r7, r3
 80136de:	2201      	movs	r2, #1
 80136e0:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80136e2:	f000 faf7 	bl	8013cd4 <LoRaMacClassBIsAcquisitionInProgress>
 80136e6:	0003      	movs	r3, r0
 80136e8:	001a      	movs	r2, r3
 80136ea:	2301      	movs	r3, #1
 80136ec:	4053      	eors	r3, r2
 80136ee:	b2db      	uxtb	r3, r3
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00a      	beq.n	801370a <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80136f4:	2000      	movs	r0, #0
 80136f6:	f000 facf 	bl	8013c98 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80136fa:	2000      	movs	r0, #0
 80136fc:	f000 faf0 	bl	8013ce0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013700:	2317      	movs	r3, #23
 8013702:	18fb      	adds	r3, r7, r3
 8013704:	2200      	movs	r2, #0
 8013706:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013708:	e00f      	b.n	801372a <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 801370a:	2317      	movs	r3, #23
 801370c:	18fb      	adds	r3, r7, r3
 801370e:	2201      	movs	r2, #1
 8013710:	701a      	strb	r2, [r3, #0]
            break;
 8013712:	e00a      	b.n	801372a <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 8013714:	46c0      	nop			; (mov r8, r8)
 8013716:	e008      	b.n	801372a <LoRaMacMlmeRequest+0x242>
            break;
 8013718:	46c0      	nop			; (mov r8, r8)
 801371a:	e006      	b.n	801372a <LoRaMacMlmeRequest+0x242>
            break;
 801371c:	46c0      	nop			; (mov r8, r8)
 801371e:	e004      	b.n	801372a <LoRaMacMlmeRequest+0x242>
            break;
 8013720:	46c0      	nop			; (mov r8, r8)
 8013722:	e002      	b.n	801372a <LoRaMacMlmeRequest+0x242>
            break;
 8013724:	46c0      	nop			; (mov r8, r8)
 8013726:	e000      	b.n	801372a <LoRaMacMlmeRequest+0x242>
            break;
 8013728:	46c0      	nop			; (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801372a:	4a15      	ldr	r2, [pc, #84]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 801372c:	2391      	movs	r3, #145	; 0x91
 801372e:	00db      	lsls	r3, r3, #3
 8013730:	58d2      	ldr	r2, [r2, r3]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013736:	2317      	movs	r3, #23
 8013738:	18fb      	adds	r3, r7, r3
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d00e      	beq.n	801375e <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013740:	f001 f8ec 	bl	801491c <LoRaMacConfirmQueueGetCnt>
 8013744:	1e03      	subs	r3, r0, #0
 8013746:	d111      	bne.n	801376c <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 8013748:	4b0d      	ldr	r3, [pc, #52]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 801374a:	4a12      	ldr	r2, [pc, #72]	; (8013794 <LoRaMacMlmeRequest+0x2ac>)
 801374c:	2100      	movs	r1, #0
 801374e:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013750:	4b0b      	ldr	r3, [pc, #44]	; (8013780 <LoRaMacMlmeRequest+0x298>)
 8013752:	4a0d      	ldr	r2, [pc, #52]	; (8013788 <LoRaMacMlmeRequest+0x2a0>)
 8013754:	5c99      	ldrb	r1, [r3, r2]
 8013756:	2004      	movs	r0, #4
 8013758:	4381      	bics	r1, r0
 801375a:	5499      	strb	r1, [r3, r2]
 801375c:	e006      	b.n	801376c <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801375e:	2310      	movs	r3, #16
 8013760:	18fb      	adds	r3, r7, r3
 8013762:	0018      	movs	r0, r3
 8013764:	f000 ff6c 	bl	8014640 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8013768:	f7fe fcc6 	bl	80120f8 <EventMacNvmCtxChanged>
    }
    return status;
 801376c:	2317      	movs	r3, #23
 801376e:	18fb      	adds	r3, r7, r3
 8013770:	781b      	ldrb	r3, [r3, #0]
}
 8013772:	0018      	movs	r0, r3
 8013774:	46bd      	mov	sp, r7
 8013776:	b006      	add	sp, #24
 8013778:	bdb0      	pop	{r4, r5, r7, pc}
 801377a:	46c0      	nop			; (mov r8, r8)
 801377c:	20000fbc 	.word	0x20000fbc
 8013780:	20000b6c 	.word	0x20000b6c
 8013784:	00000451 	.word	0x00000451
 8013788:	00000481 	.word	0x00000481
 801378c:	0801e324 	.word	0x0801e324
 8013790:	00000484 	.word	0x00000484
 8013794:	00000414 	.word	0x00000414

08013798 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8013798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801379a:	b08d      	sub	sp, #52	; 0x34
 801379c:	af02      	add	r7, sp, #8
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	000a      	movs	r2, r1
 80137a2:	1cfb      	adds	r3, r7, #3
 80137a4:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80137a6:	2327      	movs	r3, #39	; 0x27
 80137a8:	18fb      	adds	r3, r7, r3
 80137aa:	2202      	movs	r2, #2
 80137ac:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80137ae:	2326      	movs	r3, #38	; 0x26
 80137b0:	18fb      	adds	r3, r7, r3
 80137b2:	2200      	movs	r2, #0
 80137b4:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80137b6:	231d      	movs	r3, #29
 80137b8:	18fb      	adds	r3, r7, r3
 80137ba:	2200      	movs	r2, #0
 80137bc:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 80137be:	231c      	movs	r3, #28
 80137c0:	18fb      	adds	r3, r7, r3
 80137c2:	2200      	movs	r2, #0
 80137c4:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d101      	bne.n	80137d0 <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80137cc:	2303      	movs	r3, #3
 80137ce:	e11b      	b.n	8013a08 <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 80137d0:	f7fe fce6 	bl	80121a0 <LoRaMacIsBusy>
 80137d4:	1e03      	subs	r3, r0, #0
 80137d6:	d001      	beq.n	80137dc <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 80137d8:	2301      	movs	r3, #1
 80137da:	e115      	b.n	8013a08 <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 80137dc:	230c      	movs	r3, #12
 80137de:	18fb      	adds	r3, r7, r3
 80137e0:	2200      	movs	r2, #0
 80137e2:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80137e4:	4b8a      	ldr	r3, [pc, #552]	; (8013a10 <LoRaMacMcpsRequest+0x278>)
 80137e6:	2214      	movs	r2, #20
 80137e8:	2100      	movs	r1, #0
 80137ea:	0018      	movs	r0, r3
 80137ec:	f005 f8ce 	bl	801898c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80137f0:	4b88      	ldr	r3, [pc, #544]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 80137f2:	4a89      	ldr	r2, [pc, #548]	; (8013a18 <LoRaMacMcpsRequest+0x280>)
 80137f4:	2101      	movs	r1, #1
 80137f6:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80137f8:	4b86      	ldr	r3, [pc, #536]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 80137fa:	4a88      	ldr	r2, [pc, #544]	; (8013a1c <LoRaMacMcpsRequest+0x284>)
 80137fc:	2101      	movs	r1, #1
 80137fe:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	2b03      	cmp	r3, #3
 8013806:	d056      	beq.n	80138b6 <LoRaMacMcpsRequest+0x11e>
 8013808:	dc72      	bgt.n	80138f0 <LoRaMacMcpsRequest+0x158>
 801380a:	2b00      	cmp	r3, #0
 801380c:	d002      	beq.n	8013814 <LoRaMacMcpsRequest+0x7c>
 801380e:	2b01      	cmp	r3, #1
 8013810:	d024      	beq.n	801385c <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8013812:	e06d      	b.n	80138f0 <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 8013814:	231c      	movs	r3, #28
 8013816:	18fb      	adds	r3, r7, r3
 8013818:	2201      	movs	r2, #1
 801381a:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 801381c:	4b7d      	ldr	r3, [pc, #500]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 801381e:	4a80      	ldr	r2, [pc, #512]	; (8013a20 <LoRaMacMcpsRequest+0x288>)
 8013820:	2101      	movs	r1, #1
 8013822:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013824:	230c      	movs	r3, #12
 8013826:	18fb      	adds	r3, r7, r3
 8013828:	781a      	ldrb	r2, [r3, #0]
 801382a:	211f      	movs	r1, #31
 801382c:	400a      	ands	r2, r1
 801382e:	1c11      	adds	r1, r2, #0
 8013830:	2240      	movs	r2, #64	; 0x40
 8013832:	430a      	orrs	r2, r1
 8013834:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8013836:	2326      	movs	r3, #38	; 0x26
 8013838:	18fb      	adds	r3, r7, r3
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	7912      	ldrb	r2, [r2, #4]
 801383e:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	689b      	ldr	r3, [r3, #8]
 8013844:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8013846:	231e      	movs	r3, #30
 8013848:	18fb      	adds	r3, r7, r3
 801384a:	687a      	ldr	r2, [r7, #4]
 801384c:	8992      	ldrh	r2, [r2, #12]
 801384e:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8013850:	231d      	movs	r3, #29
 8013852:	18fb      	adds	r3, r7, r3
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	7b92      	ldrb	r2, [r2, #14]
 8013858:	701a      	strb	r2, [r3, #0]
            break;
 801385a:	e04a      	b.n	80138f2 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 801385c:	231c      	movs	r3, #28
 801385e:	18fb      	adds	r3, r7, r3
 8013860:	2201      	movs	r2, #1
 8013862:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	7bdb      	ldrb	r3, [r3, #15]
 8013868:	1c1a      	adds	r2, r3, #0
 801386a:	b2d3      	uxtb	r3, r2
 801386c:	2b08      	cmp	r3, #8
 801386e:	d901      	bls.n	8013874 <LoRaMacMcpsRequest+0xdc>
 8013870:	2308      	movs	r3, #8
 8013872:	1c1a      	adds	r2, r3, #0
 8013874:	b2d1      	uxtb	r1, r2
 8013876:	4b67      	ldr	r3, [pc, #412]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 8013878:	4a69      	ldr	r2, [pc, #420]	; (8013a20 <LoRaMacMcpsRequest+0x288>)
 801387a:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801387c:	230c      	movs	r3, #12
 801387e:	18fb      	adds	r3, r7, r3
 8013880:	781a      	ldrb	r2, [r3, #0]
 8013882:	211f      	movs	r1, #31
 8013884:	400a      	ands	r2, r1
 8013886:	1c11      	adds	r1, r2, #0
 8013888:	2280      	movs	r2, #128	; 0x80
 801388a:	4252      	negs	r2, r2
 801388c:	430a      	orrs	r2, r1
 801388e:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8013890:	2326      	movs	r3, #38	; 0x26
 8013892:	18fb      	adds	r3, r7, r3
 8013894:	687a      	ldr	r2, [r7, #4]
 8013896:	7912      	ldrb	r2, [r2, #4]
 8013898:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	689b      	ldr	r3, [r3, #8]
 801389e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80138a0:	231e      	movs	r3, #30
 80138a2:	18fb      	adds	r3, r7, r3
 80138a4:	687a      	ldr	r2, [r7, #4]
 80138a6:	8992      	ldrh	r2, [r2, #12]
 80138a8:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80138aa:	231d      	movs	r3, #29
 80138ac:	18fb      	adds	r3, r7, r3
 80138ae:	687a      	ldr	r2, [r7, #4]
 80138b0:	7b92      	ldrb	r2, [r2, #14]
 80138b2:	701a      	strb	r2, [r3, #0]
            break;
 80138b4:	e01d      	b.n	80138f2 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 80138b6:	231c      	movs	r3, #28
 80138b8:	18fb      	adds	r3, r7, r3
 80138ba:	2201      	movs	r2, #1
 80138bc:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 80138be:	4b55      	ldr	r3, [pc, #340]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 80138c0:	4a57      	ldr	r2, [pc, #348]	; (8013a20 <LoRaMacMcpsRequest+0x288>)
 80138c2:	2101      	movs	r1, #1
 80138c4:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80138c6:	230c      	movs	r3, #12
 80138c8:	18fb      	adds	r3, r7, r3
 80138ca:	781a      	ldrb	r2, [r3, #0]
 80138cc:	2120      	movs	r1, #32
 80138ce:	4249      	negs	r1, r1
 80138d0:	430a      	orrs	r2, r1
 80138d2:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80138da:	231e      	movs	r3, #30
 80138dc:	18fb      	adds	r3, r7, r3
 80138de:	687a      	ldr	r2, [r7, #4]
 80138e0:	8912      	ldrh	r2, [r2, #8]
 80138e2:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80138e4:	231d      	movs	r3, #29
 80138e6:	18fb      	adds	r3, r7, r3
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	7a92      	ldrb	r2, [r2, #10]
 80138ec:	701a      	strb	r2, [r3, #0]
            break;
 80138ee:	e000      	b.n	80138f2 <LoRaMacMcpsRequest+0x15a>
            break;
 80138f0:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80138f2:	2114      	movs	r1, #20
 80138f4:	187b      	adds	r3, r7, r1
 80138f6:	2202      	movs	r2, #2
 80138f8:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80138fa:	4b46      	ldr	r3, [pc, #280]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 80138fc:	4a49      	ldr	r2, [pc, #292]	; (8013a24 <LoRaMacMcpsRequest+0x28c>)
 80138fe:	589b      	ldr	r3, [r3, r2]
 8013900:	22b8      	movs	r2, #184	; 0xb8
 8013902:	5c9a      	ldrb	r2, [r3, r2]
 8013904:	187b      	adds	r3, r7, r1
 8013906:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013908:	4b42      	ldr	r3, [pc, #264]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 801390a:	4a46      	ldr	r2, [pc, #280]	; (8013a24 <LoRaMacMcpsRequest+0x28c>)
 801390c:	589b      	ldr	r3, [r3, r2]
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	187a      	adds	r2, r7, r1
 8013912:	0011      	movs	r1, r2
 8013914:	0018      	movs	r0, r3
 8013916:	f002 fb80 	bl	801601a <RegionGetPhyParam>
 801391a:	0003      	movs	r3, r0
 801391c:	001a      	movs	r2, r3
 801391e:	2110      	movs	r1, #16
 8013920:	187b      	adds	r3, r7, r1
 8013922:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8013924:	187b      	adds	r3, r7, r1
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	b259      	sxtb	r1, r3
 801392a:	231d      	movs	r3, #29
 801392c:	18fa      	adds	r2, r7, r3
 801392e:	18fb      	adds	r3, r7, r3
 8013930:	1c0c      	adds	r4, r1, #0
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	b258      	sxtb	r0, r3
 8013936:	b261      	sxtb	r1, r4
 8013938:	4288      	cmp	r0, r1
 801393a:	da00      	bge.n	801393e <LoRaMacMcpsRequest+0x1a6>
 801393c:	1c23      	adds	r3, r4, #0
 801393e:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8013940:	231c      	movs	r3, #28
 8013942:	18fb      	adds	r3, r7, r3
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d055      	beq.n	80139f6 <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 801394a:	4b32      	ldr	r3, [pc, #200]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 801394c:	4a35      	ldr	r2, [pc, #212]	; (8013a24 <LoRaMacMcpsRequest+0x28c>)
 801394e:	589b      	ldr	r3, [r3, r2]
 8013950:	227e      	movs	r2, #126	; 0x7e
 8013952:	5c9b      	ldrb	r3, [r3, r2]
 8013954:	2201      	movs	r2, #1
 8013956:	4053      	eors	r3, r2
 8013958:	b2db      	uxtb	r3, r3
 801395a:	2b00      	cmp	r3, #0
 801395c:	d022      	beq.n	80139a4 <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 801395e:	2408      	movs	r4, #8
 8013960:	193b      	adds	r3, r7, r4
 8013962:	221d      	movs	r2, #29
 8013964:	18ba      	adds	r2, r7, r2
 8013966:	7812      	ldrb	r2, [r2, #0]
 8013968:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801396a:	4b2a      	ldr	r3, [pc, #168]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 801396c:	4a2d      	ldr	r2, [pc, #180]	; (8013a24 <LoRaMacMcpsRequest+0x28c>)
 801396e:	589b      	ldr	r3, [r3, r2]
 8013970:	22b8      	movs	r2, #184	; 0xb8
 8013972:	5c9a      	ldrb	r2, [r3, r2]
 8013974:	193b      	adds	r3, r7, r4
 8013976:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8013978:	4b26      	ldr	r3, [pc, #152]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 801397a:	4a2a      	ldr	r2, [pc, #168]	; (8013a24 <LoRaMacMcpsRequest+0x28c>)
 801397c:	589b      	ldr	r3, [r3, r2]
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	1939      	adds	r1, r7, r4
 8013982:	2205      	movs	r2, #5
 8013984:	0018      	movs	r0, r3
 8013986:	f002 fbae 	bl	80160e6 <RegionVerify>
 801398a:	1e03      	subs	r3, r0, #0
 801398c:	d008      	beq.n	80139a0 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 801398e:	4b21      	ldr	r3, [pc, #132]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 8013990:	4a24      	ldr	r2, [pc, #144]	; (8013a24 <LoRaMacMcpsRequest+0x28c>)
 8013992:	589b      	ldr	r3, [r3, r2]
 8013994:	193a      	adds	r2, r7, r4
 8013996:	2100      	movs	r1, #0
 8013998:	5651      	ldrsb	r1, [r2, r1]
 801399a:	2285      	movs	r2, #133	; 0x85
 801399c:	5499      	strb	r1, [r3, r2]
 801399e:	e001      	b.n	80139a4 <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80139a0:	2303      	movs	r3, #3
 80139a2:	e031      	b.n	8013a08 <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80139a4:	2627      	movs	r6, #39	; 0x27
 80139a6:	19bc      	adds	r4, r7, r6
 80139a8:	231e      	movs	r3, #30
 80139aa:	18fb      	adds	r3, r7, r3
 80139ac:	881d      	ldrh	r5, [r3, #0]
 80139ae:	6a3a      	ldr	r2, [r7, #32]
 80139b0:	2326      	movs	r3, #38	; 0x26
 80139b2:	18fb      	adds	r3, r7, r3
 80139b4:	7819      	ldrb	r1, [r3, #0]
 80139b6:	230c      	movs	r3, #12
 80139b8:	18f8      	adds	r0, r7, r3
 80139ba:	1cfb      	adds	r3, r7, #3
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	9300      	str	r3, [sp, #0]
 80139c0:	002b      	movs	r3, r5
 80139c2:	f7fd f86f 	bl	8010aa4 <Send>
 80139c6:	0003      	movs	r3, r0
 80139c8:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 80139ca:	19bb      	adds	r3, r7, r6
 80139cc:	781b      	ldrb	r3, [r3, #0]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d10d      	bne.n	80139ee <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	7819      	ldrb	r1, [r3, #0]
 80139d6:	4b0f      	ldr	r3, [pc, #60]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 80139d8:	4a13      	ldr	r2, [pc, #76]	; (8013a28 <LoRaMacMcpsRequest+0x290>)
 80139da:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80139dc:	4b0d      	ldr	r3, [pc, #52]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 80139de:	4a13      	ldr	r2, [pc, #76]	; (8013a2c <LoRaMacMcpsRequest+0x294>)
 80139e0:	5c99      	ldrb	r1, [r3, r2]
 80139e2:	2001      	movs	r0, #1
 80139e4:	4301      	orrs	r1, r0
 80139e6:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 80139e8:	f7fe fb86 	bl	80120f8 <EventMacNvmCtxChanged>
 80139ec:	e003      	b.n	80139f6 <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80139ee:	4b09      	ldr	r3, [pc, #36]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 80139f0:	4a0f      	ldr	r2, [pc, #60]	; (8013a30 <LoRaMacMcpsRequest+0x298>)
 80139f2:	2100      	movs	r1, #0
 80139f4:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80139f6:	4a07      	ldr	r2, [pc, #28]	; (8013a14 <LoRaMacMcpsRequest+0x27c>)
 80139f8:	2391      	movs	r3, #145	; 0x91
 80139fa:	00db      	lsls	r3, r3, #3
 80139fc:	58d2      	ldr	r2, [r2, r3]
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	611a      	str	r2, [r3, #16]

    return status;
 8013a02:	2327      	movs	r3, #39	; 0x27
 8013a04:	18fb      	adds	r3, r7, r3
 8013a06:	781b      	ldrb	r3, [r3, #0]
}
 8013a08:	0018      	movs	r0, r3
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	b00b      	add	sp, #44	; 0x2c
 8013a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a10:	20000fa8 	.word	0x20000fa8
 8013a14:	20000b6c 	.word	0x20000b6c
 8013a18:	0000043d 	.word	0x0000043d
 8013a1c:	00000412 	.word	0x00000412
 8013a20:	00000411 	.word	0x00000411
 8013a24:	00000484 	.word	0x00000484
 8013a28:	0000043c 	.word	0x0000043c
 8013a2c:	00000481 	.word	0x00000481
 8013a30:	00000414 	.word	0x00000414

08013a34 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b084      	sub	sp, #16
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	0002      	movs	r2, r0
 8013a3c:	1dfb      	adds	r3, r7, #7
 8013a3e:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013a40:	210c      	movs	r1, #12
 8013a42:	187b      	adds	r3, r7, r1
 8013a44:	1dfa      	adds	r2, r7, #7
 8013a46:	7812      	ldrb	r2, [r2, #0]
 8013a48:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8013a4a:	4b0b      	ldr	r3, [pc, #44]	; (8013a78 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013a4c:	4a0b      	ldr	r2, [pc, #44]	; (8013a7c <LoRaMacTestSetDutyCycleOn+0x48>)
 8013a4e:	589b      	ldr	r3, [r3, r2]
 8013a50:	781b      	ldrb	r3, [r3, #0]
 8013a52:	1879      	adds	r1, r7, r1
 8013a54:	220f      	movs	r2, #15
 8013a56:	0018      	movs	r0, r3
 8013a58:	f002 fb45 	bl	80160e6 <RegionVerify>
 8013a5c:	1e03      	subs	r3, r0, #0
 8013a5e:	d006      	beq.n	8013a6e <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 8013a60:	4b05      	ldr	r3, [pc, #20]	; (8013a78 <LoRaMacTestSetDutyCycleOn+0x44>)
 8013a62:	4a06      	ldr	r2, [pc, #24]	; (8013a7c <LoRaMacTestSetDutyCycleOn+0x48>)
 8013a64:	589b      	ldr	r3, [r3, r2]
 8013a66:	1dfa      	adds	r2, r7, #7
 8013a68:	21c9      	movs	r1, #201	; 0xc9
 8013a6a:	7812      	ldrb	r2, [r2, #0]
 8013a6c:	545a      	strb	r2, [r3, r1]
    }
}
 8013a6e:	46c0      	nop			; (mov r8, r8)
 8013a70:	46bd      	mov	sp, r7
 8013a72:	b004      	add	sp, #16
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	46c0      	nop			; (mov r8, r8)
 8013a78:	20000b6c 	.word	0x20000b6c
 8013a7c:	00000484 	.word	0x00000484

08013a80 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a82:	b08b      	sub	sp, #44	; 0x2c
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	60f8      	str	r0, [r7, #12]
 8013a88:	60b9      	str	r1, [r7, #8]
 8013a8a:	607a      	str	r2, [r7, #4]
 8013a8c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8013a8e:	2327      	movs	r3, #39	; 0x27
 8013a90:	18fb      	adds	r3, r7, r3
 8013a92:	2200      	movs	r2, #0
 8013a94:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8013a96:	2426      	movs	r4, #38	; 0x26
 8013a98:	193b      	adds	r3, r7, r4
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	7c12      	ldrb	r2, [r2, #16]
 8013a9e:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8013aa0:	2325      	movs	r3, #37	; 0x25
 8013aa2:	18fb      	adds	r3, r7, r3
 8013aa4:	68fa      	ldr	r2, [r7, #12]
 8013aa6:	7c52      	ldrb	r2, [r2, #17]
 8013aa8:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	689a      	ldr	r2, [r3, #8]
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	795b      	ldrb	r3, [r3, #5]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d100      	bne.n	8013abc <CalcNextV10X+0x3c>
 8013aba:	e0a5      	b.n	8013c08 <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013abc:	211c      	movs	r1, #28
 8013abe:	187b      	adds	r3, r7, r1
 8013ac0:	2202      	movs	r2, #2
 8013ac2:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	7c9a      	ldrb	r2, [r3, #18]
 8013ac8:	187b      	adds	r3, r7, r1
 8013aca:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	7cdb      	ldrb	r3, [r3, #19]
 8013ad0:	187a      	adds	r2, r7, r1
 8013ad2:	0011      	movs	r1, r2
 8013ad4:	0018      	movs	r0, r3
 8013ad6:	f002 faa0 	bl	801601a <RegionGetPhyParam>
 8013ada:	0003      	movs	r3, r0
 8013adc:	001a      	movs	r2, r3
 8013ade:	2118      	movs	r1, #24
 8013ae0:	187b      	adds	r3, r7, r1
 8013ae2:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 8013ae4:	187b      	adds	r3, r7, r1
 8013ae6:	681a      	ldr	r2, [r3, #0]
 8013ae8:	2124      	movs	r1, #36	; 0x24
 8013aea:	187b      	adds	r3, r7, r1
 8013aec:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 8013aee:	193a      	adds	r2, r7, r4
 8013af0:	187b      	adds	r3, r7, r1
 8013af2:	1939      	adds	r1, r7, r4
 8013af4:	780c      	ldrb	r4, [r1, #0]
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	b258      	sxtb	r0, r3
 8013afa:	b261      	sxtb	r1, r4
 8013afc:	4288      	cmp	r0, r1
 8013afe:	da00      	bge.n	8013b02 <CalcNextV10X+0x82>
 8013b00:	1c23      	adds	r3, r4, #0
 8013b02:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 8013b04:	2326      	movs	r3, #38	; 0x26
 8013b06:	18fa      	adds	r2, r7, r3
 8013b08:	2324      	movs	r3, #36	; 0x24
 8013b0a:	18fb      	adds	r3, r7, r3
 8013b0c:	7812      	ldrb	r2, [r2, #0]
 8013b0e:	b252      	sxtb	r2, r2
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	b25b      	sxtb	r3, r3
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d107      	bne.n	8013b28 <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8013b1e:	2327      	movs	r3, #39	; 0x27
 8013b20:	18fb      	adds	r3, r7, r3
 8013b22:	2200      	movs	r2, #0
 8013b24:	701a      	strb	r2, [r3, #0]
 8013b26:	e06f      	b.n	8013c08 <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	689b      	ldr	r3, [r3, #8]
 8013b2c:	68fa      	ldr	r2, [r7, #12]
 8013b2e:	8992      	ldrh	r2, [r2, #12]
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d304      	bcc.n	8013b3e <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 8013b34:	2327      	movs	r3, #39	; 0x27
 8013b36:	18fb      	adds	r3, r7, r3
 8013b38:	2201      	movs	r2, #1
 8013b3a:	701a      	strb	r2, [r3, #0]
 8013b3c:	e003      	b.n	8013b46 <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 8013b3e:	2327      	movs	r3, #39	; 0x27
 8013b40:	18fb      	adds	r3, r7, r3
 8013b42:	2200      	movs	r2, #0
 8013b44:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	689b      	ldr	r3, [r3, #8]
 8013b4a:	68fa      	ldr	r2, [r7, #12]
 8013b4c:	8992      	ldrh	r2, [r2, #12]
 8013b4e:	0011      	movs	r1, r2
 8013b50:	68fa      	ldr	r2, [r7, #12]
 8013b52:	89d2      	ldrh	r2, [r2, #14]
 8013b54:	188a      	adds	r2, r1, r2
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d356      	bcc.n	8013c08 <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8013b5a:	241c      	movs	r4, #28
 8013b5c:	193b      	adds	r3, r7, r4
 8013b5e:	2208      	movs	r2, #8
 8013b60:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	7cdb      	ldrb	r3, [r3, #19]
 8013b66:	193a      	adds	r2, r7, r4
 8013b68:	0011      	movs	r1, r2
 8013b6a:	0018      	movs	r0, r3
 8013b6c:	f002 fa55 	bl	801601a <RegionGetPhyParam>
 8013b70:	0003      	movs	r3, r0
 8013b72:	001a      	movs	r2, r3
 8013b74:	2518      	movs	r5, #24
 8013b76:	197b      	adds	r3, r7, r5
 8013b78:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 8013b7a:	197b      	adds	r3, r7, r5
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	2325      	movs	r3, #37	; 0x25
 8013b80:	18fb      	adds	r3, r7, r3
 8013b82:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	689a      	ldr	r2, [r3, #8]
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	89db      	ldrh	r3, [r3, #14]
 8013b8c:	0019      	movs	r1, r3
 8013b8e:	0010      	movs	r0, r2
 8013b90:	f7ec fb48 	bl	8000224 <__aeabi_uidivmod>
 8013b94:	000b      	movs	r3, r1
 8013b96:	2b01      	cmp	r3, #1
 8013b98:	d136      	bne.n	8013c08 <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013b9a:	193b      	adds	r3, r7, r4
 8013b9c:	2222      	movs	r2, #34	; 0x22
 8013b9e:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 8013ba0:	193b      	adds	r3, r7, r4
 8013ba2:	2626      	movs	r6, #38	; 0x26
 8013ba4:	19ba      	adds	r2, r7, r6
 8013ba6:	7812      	ldrb	r2, [r2, #0]
 8013ba8:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	7c9a      	ldrb	r2, [r3, #18]
 8013bae:	193b      	adds	r3, r7, r4
 8013bb0:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	7cdb      	ldrb	r3, [r3, #19]
 8013bb6:	193a      	adds	r2, r7, r4
 8013bb8:	0011      	movs	r1, r2
 8013bba:	0018      	movs	r0, r3
 8013bbc:	f002 fa2d 	bl	801601a <RegionGetPhyParam>
 8013bc0:	0003      	movs	r3, r0
 8013bc2:	001a      	movs	r2, r3
 8013bc4:	197b      	adds	r3, r7, r5
 8013bc6:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8013bc8:	197b      	adds	r3, r7, r5
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	19bb      	adds	r3, r7, r6
 8013bce:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8013bd0:	19ba      	adds	r2, r7, r6
 8013bd2:	2324      	movs	r3, #36	; 0x24
 8013bd4:	18fb      	adds	r3, r7, r3
 8013bd6:	7812      	ldrb	r2, [r2, #0]
 8013bd8:	b252      	sxtb	r2, r2
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	b25b      	sxtb	r3, r3
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d112      	bne.n	8013c08 <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8013be2:	2327      	movs	r3, #39	; 0x27
 8013be4:	18fb      	adds	r3, r7, r3
 8013be6:	2200      	movs	r2, #0
 8013be8:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	791b      	ldrb	r3, [r3, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d00a      	beq.n	8013c08 <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013bf2:	2110      	movs	r1, #16
 8013bf4:	187b      	adds	r3, r7, r1
 8013bf6:	2202      	movs	r2, #2
 8013bf8:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	7cdb      	ldrb	r3, [r3, #19]
 8013bfe:	187a      	adds	r2, r7, r1
 8013c00:	0011      	movs	r1, r2
 8013c02:	0018      	movs	r0, r3
 8013c04:	f002 fa44 	bl	8016090 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	2226      	movs	r2, #38	; 0x26
 8013c0c:	18ba      	adds	r2, r7, r2
 8013c0e:	7812      	ldrb	r2, [r2, #0]
 8013c10:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	2225      	movs	r2, #37	; 0x25
 8013c16:	18ba      	adds	r2, r7, r2
 8013c18:	7812      	ldrb	r2, [r2, #0]
 8013c1a:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013c1c:	2327      	movs	r3, #39	; 0x27
 8013c1e:	18fb      	adds	r3, r7, r3
 8013c20:	781b      	ldrb	r3, [r3, #0]
}
 8013c22:	0018      	movs	r0, r3
 8013c24:	46bd      	mov	sp, r7
 8013c26:	b00b      	add	sp, #44	; 0x2c
 8013c28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c2a <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013c2a:	b580      	push	{r7, lr}
 8013c2c:	b084      	sub	sp, #16
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	60f8      	str	r0, [r7, #12]
 8013c32:	60b9      	str	r1, [r7, #8]
 8013c34:	607a      	str	r2, [r7, #4]
 8013c36:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	789b      	ldrb	r3, [r3, #2]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d107      	bne.n	8013c50 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	68b9      	ldr	r1, [r7, #8]
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f7ff ff1a 	bl	8013a80 <CalcNextV10X>
 8013c4c:	0003      	movs	r3, r0
 8013c4e:	e000      	b.n	8013c52 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8013c50:	2300      	movs	r3, #0
}
 8013c52:	0018      	movs	r0, r3
 8013c54:	46bd      	mov	sp, r7
 8013c56:	b004      	add	sp, #16
 8013c58:	bd80      	pop	{r7, pc}

08013c5a <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 8013c5a:	b580      	push	{r7, lr}
 8013c5c:	b084      	sub	sp, #16
 8013c5e:	af00      	add	r7, sp, #0
 8013c60:	60f8      	str	r0, [r7, #12]
 8013c62:	60b9      	str	r1, [r7, #8]
 8013c64:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8013c66:	46c0      	nop			; (mov r8, r8)
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	b004      	add	sp, #16
 8013c6c:	bd80      	pop	{r7, pc}

08013c6e <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 8013c6e:	b580      	push	{r7, lr}
 8013c70:	b082      	sub	sp, #8
 8013c72:	af00      	add	r7, sp, #0
 8013c74:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 8013c76:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8013c78:	0018      	movs	r0, r3
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	b002      	add	sp, #8
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b082      	sub	sp, #8
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	601a      	str	r2, [r3, #0]
    return NULL;
 8013c8e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013c90:	0018      	movs	r0, r3
 8013c92:	46bd      	mov	sp, r7
 8013c94:	b002      	add	sp, #8
 8013c96:	bd80      	pop	{r7, pc}

08013c98 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	0002      	movs	r2, r0
 8013ca0:	1dfb      	adds	r3, r7, #7
 8013ca2:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013ca4:	46c0      	nop			; (mov r8, r8)
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	b002      	add	sp, #8
 8013caa:	bd80      	pop	{r7, pc}

08013cac <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	0002      	movs	r2, r0
 8013cb4:	1dfb      	adds	r3, r7, #7
 8013cb6:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013cb8:	46c0      	nop			; (mov r8, r8)
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	b002      	add	sp, #8
 8013cbe:	bd80      	pop	{r7, pc}

08013cc0 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b082      	sub	sp, #8
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	0002      	movs	r2, r0
 8013cc8:	1dfb      	adds	r3, r7, #7
 8013cca:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013ccc:	46c0      	nop			; (mov r8, r8)
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	b002      	add	sp, #8
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013cd8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013cda:	0018      	movs	r0, r3
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013ce8:	46c0      	nop			; (mov r8, r8)
 8013cea:	46bd      	mov	sp, r7
 8013cec:	b002      	add	sp, #8
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013cf8:	46c0      	nop			; (mov r8, r8)
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	b002      	add	sp, #8
 8013cfe:	bd80      	pop	{r7, pc}

08013d00 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d08:	46c0      	nop			; (mov r8, r8)
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	b002      	add	sp, #8
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b082      	sub	sp, #8
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	000a      	movs	r2, r1
 8013d1a:	1cbb      	adds	r3, r7, #2
 8013d1c:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013d1e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d20:	0018      	movs	r0, r3
 8013d22:	46bd      	mov	sp, r7
 8013d24:	b002      	add	sp, #8
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d2c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d2e:	0018      	movs	r0, r3
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d38:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d3a:	0018      	movs	r0, r3
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d44:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d46:	0018      	movs	r0, r3
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013d50:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d52:	0018      	movs	r0, r3
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b082      	sub	sp, #8
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	0002      	movs	r2, r0
 8013d60:	1dfb      	adds	r3, r7, #7
 8013d62:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d64:	46c0      	nop			; (mov r8, r8)
 8013d66:	46bd      	mov	sp, r7
 8013d68:	b002      	add	sp, #8
 8013d6a:	bd80      	pop	{r7, pc}

08013d6c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d70:	46c0      	nop			; (mov r8, r8)
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}

08013d76 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013d76:	b580      	push	{r7, lr}
 8013d78:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d7a:	46c0      	nop			; (mov r8, r8)
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b082      	sub	sp, #8
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	0002      	movs	r2, r0
 8013d88:	1dfb      	adds	r3, r7, #7
 8013d8a:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d8c:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013d8e:	0018      	movs	r0, r3
 8013d90:	46bd      	mov	sp, r7
 8013d92:	b002      	add	sp, #8
 8013d94:	bd80      	pop	{r7, pc}

08013d96 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8013d96:	b580      	push	{r7, lr}
 8013d98:	b082      	sub	sp, #8
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013d9e:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013da0:	0018      	movs	r0, r3
 8013da2:	46bd      	mov	sp, r7
 8013da4:	b002      	add	sp, #8
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013db0:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013db2:	0018      	movs	r0, r3
 8013db4:	46bd      	mov	sp, r7
 8013db6:	b002      	add	sp, #8
 8013db8:	bd80      	pop	{r7, pc}

08013dba <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013dba:	b580      	push	{r7, lr}
 8013dbc:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013dbe:	46c0      	nop			; (mov r8, r8)
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	0002      	movs	r2, r0
 8013dcc:	6039      	str	r1, [r7, #0]
 8013dce:	1dfb      	adds	r3, r7, #7
 8013dd0:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 8013dd2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013dd4:	0018      	movs	r0, r3
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	b002      	add	sp, #8
 8013dda:	bd80      	pop	{r7, pc}

08013ddc <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	603a      	str	r2, [r7, #0]
 8013de4:	1dbb      	adds	r3, r7, #6
 8013de6:	1c02      	adds	r2, r0, #0
 8013de8:	801a      	strh	r2, [r3, #0]
 8013dea:	1d7b      	adds	r3, r7, #5
 8013dec:	1c0a      	adds	r2, r1, #0
 8013dee:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013df0:	46c0      	nop			; (mov r8, r8)
 8013df2:	46bd      	mov	sp, r7
 8013df4:	b002      	add	sp, #8
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013dfc:	46c0      	nop			; (mov r8, r8)
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}

08013e02 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013e02:	b580      	push	{r7, lr}
 8013e04:	b082      	sub	sp, #8
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 8013e0a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e0c:	0018      	movs	r0, r3
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	b002      	add	sp, #8
 8013e12:	bd80      	pop	{r7, pc}

08013e14 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8013e1c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e1e:	0018      	movs	r0, r3
 8013e20:	46bd      	mov	sp, r7
 8013e22:	b002      	add	sp, #8
 8013e24:	bd80      	pop	{r7, pc}

08013e26 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013e26:	b580      	push	{r7, lr}
 8013e28:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e2a:	46c0      	nop			; (mov r8, r8)
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013e34:	46c0      	nop			; (mov r8, r8)
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}

08013e3a <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013e3a:	b580      	push	{r7, lr}
 8013e3c:	b084      	sub	sp, #16
 8013e3e:	af00      	add	r7, sp, #0
 8013e40:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013e46:	230e      	movs	r3, #14
 8013e48:	18fb      	adds	r3, r7, r3
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	801a      	strh	r2, [r3, #0]
 8013e4e:	e00f      	b.n	8013e70 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 8013e50:	230e      	movs	r3, #14
 8013e52:	18fb      	adds	r3, r7, r3
 8013e54:	881b      	ldrh	r3, [r3, #0]
 8013e56:	68ba      	ldr	r2, [r7, #8]
 8013e58:	18d3      	adds	r3, r2, r3
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d001      	beq.n	8013e64 <IsSlotFree+0x2a>
        {
            return false;
 8013e60:	2300      	movs	r3, #0
 8013e62:	e00b      	b.n	8013e7c <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013e64:	210e      	movs	r1, #14
 8013e66:	187b      	adds	r3, r7, r1
 8013e68:	881a      	ldrh	r2, [r3, #0]
 8013e6a:	187b      	adds	r3, r7, r1
 8013e6c:	3201      	adds	r2, #1
 8013e6e:	801a      	strh	r2, [r3, #0]
 8013e70:	230e      	movs	r3, #14
 8013e72:	18fb      	adds	r3, r7, r3
 8013e74:	881b      	ldrh	r3, [r3, #0]
 8013e76:	2b0f      	cmp	r3, #15
 8013e78:	d9ea      	bls.n	8013e50 <IsSlotFree+0x16>
        }
    }
    return true;
 8013e7a:	2301      	movs	r3, #1
}
 8013e7c:	0018      	movs	r0, r3
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	b004      	add	sp, #16
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013e8a:	1dfb      	adds	r3, r7, #7
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8013e90:	e00a      	b.n	8013ea8 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 8013e92:	1dfb      	adds	r3, r7, #7
 8013e94:	781a      	ldrb	r2, [r3, #0]
 8013e96:	1dfb      	adds	r3, r7, #7
 8013e98:	3201      	adds	r2, #1
 8013e9a:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013e9c:	1dfb      	adds	r3, r7, #7
 8013e9e:	781b      	ldrb	r3, [r3, #0]
 8013ea0:	2b0f      	cmp	r3, #15
 8013ea2:	d101      	bne.n	8013ea8 <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	e017      	b.n	8013ed8 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8013ea8:	1dfb      	adds	r3, r7, #7
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	011b      	lsls	r3, r3, #4
 8013eae:	3308      	adds	r3, #8
 8013eb0:	001a      	movs	r2, r3
 8013eb2:	4b0b      	ldr	r3, [pc, #44]	; (8013ee0 <MallocNewMacCommandSlot+0x5c>)
 8013eb4:	18d3      	adds	r3, r2, r3
 8013eb6:	0018      	movs	r0, r3
 8013eb8:	f7ff ffbf 	bl	8013e3a <IsSlotFree>
 8013ebc:	0003      	movs	r3, r0
 8013ebe:	001a      	movs	r2, r3
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	4053      	eors	r3, r2
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d1e3      	bne.n	8013e92 <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8013eca:	1dfb      	adds	r3, r7, #7
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	011b      	lsls	r3, r3, #4
 8013ed0:	3308      	adds	r3, #8
 8013ed2:	001a      	movs	r2, r3
 8013ed4:	4b02      	ldr	r3, [pc, #8]	; (8013ee0 <MallocNewMacCommandSlot+0x5c>)
 8013ed6:	18d3      	adds	r3, r2, r3
}
 8013ed8:	0018      	movs	r0, r3
 8013eda:	46bd      	mov	sp, r7
 8013edc:	b002      	add	sp, #8
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	200011a4 	.word	0x200011a4

08013ee4 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b082      	sub	sp, #8
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <FreeMacCommandSlot+0x12>
    {
        return false;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	e006      	b.n	8013f04 <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2210      	movs	r2, #16
 8013efa:	2100      	movs	r1, #0
 8013efc:	0018      	movs	r0, r3
 8013efe:	f004 fd45 	bl	801898c <memset1>

    return true;
 8013f02:	2301      	movs	r3, #1
}
 8013f04:	0018      	movs	r0, r3
 8013f06:	46bd      	mov	sp, r7
 8013f08:	b002      	add	sp, #8
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d101      	bne.n	8013f1e <LinkedListInit+0x12>
    {
        return false;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	e006      	b.n	8013f2c <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2200      	movs	r2, #0
 8013f22:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2200      	movs	r2, #0
 8013f28:	605a      	str	r2, [r3, #4]

    return true;
 8013f2a:	2301      	movs	r3, #1
}
 8013f2c:	0018      	movs	r0, r3
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	b002      	add	sp, #8
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d002      	beq.n	8013f4a <LinkedListAdd+0x16>
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d101      	bne.n	8013f4e <LinkedListAdd+0x1a>
    {
        return false;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	e015      	b.n	8013f7a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d102      	bne.n	8013f5c <LinkedListAdd+0x28>
    {
        list->First = element;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	683a      	ldr	r2, [r7, #0]
 8013f5a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	685b      	ldr	r3, [r3, #4]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d003      	beq.n	8013f6c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	683a      	ldr	r2, [r7, #0]
 8013f6a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	683a      	ldr	r2, [r7, #0]
 8013f76:	605a      	str	r2, [r3, #4]

    return true;
 8013f78:	2301      	movs	r3, #1
}
 8013f7a:	0018      	movs	r0, r3
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	b002      	add	sp, #8
 8013f80:	bd80      	pop	{r7, pc}

08013f82 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013f82:	b580      	push	{r7, lr}
 8013f84:	b084      	sub	sp, #16
 8013f86:	af00      	add	r7, sp, #0
 8013f88:	6078      	str	r0, [r7, #4]
 8013f8a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d002      	beq.n	8013f98 <LinkedListGetPrevious+0x16>
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d101      	bne.n	8013f9c <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013f98:	2300      	movs	r3, #0
 8013f9a:	e016      	b.n	8013fca <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013fa2:	683a      	ldr	r2, [r7, #0]
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d00c      	beq.n	8013fc4 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013faa:	e002      	b.n	8013fb2 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d007      	beq.n	8013fc8 <LinkedListGetPrevious+0x46>
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	683a      	ldr	r2, [r7, #0]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d1f4      	bne.n	8013fac <LinkedListGetPrevious+0x2a>
 8013fc2:	e001      	b.n	8013fc8 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
}
 8013fca:	0018      	movs	r0, r3
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	b004      	add	sp, #16
 8013fd0:	bd80      	pop	{r7, pc}

08013fd2 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013fd2:	b580      	push	{r7, lr}
 8013fd4:	b084      	sub	sp, #16
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	6078      	str	r0, [r7, #4]
 8013fda:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d002      	beq.n	8013fe8 <LinkedListRemove+0x16>
 8013fe2:	683b      	ldr	r3, [r7, #0]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d101      	bne.n	8013fec <LinkedListRemove+0x1a>
    {
        return false;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	e023      	b.n	8014034 <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013fec:	683a      	ldr	r2, [r7, #0]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	0011      	movs	r1, r2
 8013ff2:	0018      	movs	r0, r3
 8013ff4:	f7ff ffc5 	bl	8013f82 <LinkedListGetPrevious>
 8013ff8:	0003      	movs	r3, r0
 8013ffa:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	683a      	ldr	r2, [r7, #0]
 8014002:	429a      	cmp	r2, r3
 8014004:	d103      	bne.n	801400e <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	681a      	ldr	r2, [r3, #0]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	685b      	ldr	r3, [r3, #4]
 8014012:	683a      	ldr	r2, [r7, #0]
 8014014:	429a      	cmp	r2, r3
 8014016:	d102      	bne.n	801401e <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	68fa      	ldr	r2, [r7, #12]
 801401c:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d003      	beq.n	801402c <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	681a      	ldr	r2, [r3, #0]
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	2200      	movs	r2, #0
 8014030:	601a      	str	r2, [r3, #0]

    return true;
 8014032:	2301      	movs	r3, #1
}
 8014034:	0018      	movs	r0, r3
 8014036:	46bd      	mov	sp, r7
 8014038:	b004      	add	sp, #16
 801403a:	bd80      	pop	{r7, pc}

0801403c <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	0002      	movs	r2, r0
 8014044:	1dfb      	adds	r3, r7, #7
 8014046:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8014048:	1dfb      	adds	r3, r7, #7
 801404a:	781b      	ldrb	r3, [r3, #0]
 801404c:	2b05      	cmp	r3, #5
 801404e:	d003      	beq.n	8014058 <IsSticky+0x1c>
 8014050:	db04      	blt.n	801405c <IsSticky+0x20>
 8014052:	3b08      	subs	r3, #8
 8014054:	2b02      	cmp	r3, #2
 8014056:	d801      	bhi.n	801405c <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8014058:	2301      	movs	r3, #1
 801405a:	e000      	b.n	801405e <IsSticky+0x22>
        default:
            return false;
 801405c:	2300      	movs	r3, #0
    }
}
 801405e:	0018      	movs	r0, r3
 8014060:	46bd      	mov	sp, r7
 8014062:	b002      	add	sp, #8
 8014064:	bd80      	pop	{r7, pc}
	...

08014068 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8014068:	b580      	push	{r7, lr}
 801406a:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 801406c:	4b04      	ldr	r3, [pc, #16]	; (8014080 <NvmCtxCallback+0x18>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d002      	beq.n	801407a <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8014074:	4b02      	ldr	r3, [pc, #8]	; (8014080 <NvmCtxCallback+0x18>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4798      	blx	r3
    }
}
 801407a:	46c0      	nop			; (mov r8, r8)
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}
 8014080:	200011a0 	.word	0x200011a0

08014084 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 801408c:	4b08      	ldr	r3, [pc, #32]	; (80140b0 <LoRaMacCommandsInit+0x2c>)
 801408e:	22fc      	movs	r2, #252	; 0xfc
 8014090:	2100      	movs	r1, #0
 8014092:	0018      	movs	r0, r3
 8014094:	f004 fc7a 	bl	801898c <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 8014098:	4b05      	ldr	r3, [pc, #20]	; (80140b0 <LoRaMacCommandsInit+0x2c>)
 801409a:	0018      	movs	r0, r3
 801409c:	f7ff ff36 	bl	8013f0c <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 80140a0:	4b04      	ldr	r3, [pc, #16]	; (80140b4 <LoRaMacCommandsInit+0x30>)
 80140a2:	687a      	ldr	r2, [r7, #4]
 80140a4:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 80140a6:	2300      	movs	r3, #0
}
 80140a8:	0018      	movs	r0, r3
 80140aa:	46bd      	mov	sp, r7
 80140ac:	b002      	add	sp, #8
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	200011a4 	.word	0x200011a4
 80140b4:	200011a0 	.word	0x200011a0

080140b8 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b082      	sub	sp, #8
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d007      	beq.n	80140d6 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 80140c6:	6879      	ldr	r1, [r7, #4]
 80140c8:	4b05      	ldr	r3, [pc, #20]	; (80140e0 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 80140ca:	22fc      	movs	r2, #252	; 0xfc
 80140cc:	0018      	movs	r0, r3
 80140ce:	f004 fc1f 	bl	8018910 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 80140d2:	2300      	movs	r3, #0
 80140d4:	e000      	b.n	80140d8 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80140d6:	2301      	movs	r3, #1
    }
}
 80140d8:	0018      	movs	r0, r3
 80140da:	46bd      	mov	sp, r7
 80140dc:	b002      	add	sp, #8
 80140de:	bd80      	pop	{r7, pc}
 80140e0:	200011a4 	.word	0x200011a4

080140e4 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	22fc      	movs	r2, #252	; 0xfc
 80140f0:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 80140f2:	4b02      	ldr	r3, [pc, #8]	; (80140fc <LoRaMacCommandsGetNvmCtx+0x18>)
}
 80140f4:	0018      	movs	r0, r3
 80140f6:	46bd      	mov	sp, r7
 80140f8:	b002      	add	sp, #8
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	200011a4 	.word	0x200011a4

08014100 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014100:	b590      	push	{r4, r7, lr}
 8014102:	b087      	sub	sp, #28
 8014104:	af00      	add	r7, sp, #0
 8014106:	60b9      	str	r1, [r7, #8]
 8014108:	607a      	str	r2, [r7, #4]
 801410a:	230f      	movs	r3, #15
 801410c:	18fb      	adds	r3, r7, r3
 801410e:	1c02      	adds	r2, r0, #0
 8014110:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d101      	bne.n	801411c <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014118:	2301      	movs	r3, #1
 801411a:	e03c      	b.n	8014196 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801411c:	f7ff feb2 	bl	8013e84 <MallocNewMacCommandSlot>
 8014120:	0003      	movs	r3, r0
 8014122:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d101      	bne.n	801412e <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801412a:	2302      	movs	r3, #2
 801412c:	e033      	b.n	8014196 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 801412e:	697a      	ldr	r2, [r7, #20]
 8014130:	4b1b      	ldr	r3, [pc, #108]	; (80141a0 <LoRaMacCommandsAddCmd+0xa0>)
 8014132:	0011      	movs	r1, r2
 8014134:	0018      	movs	r0, r3
 8014136:	f7ff fefd 	bl	8013f34 <LinkedListAdd>
 801413a:	0003      	movs	r3, r0
 801413c:	001a      	movs	r2, r3
 801413e:	2301      	movs	r3, #1
 8014140:	4053      	eors	r3, r2
 8014142:	b2db      	uxtb	r3, r3
 8014144:	2b00      	cmp	r3, #0
 8014146:	d001      	beq.n	801414c <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014148:	2305      	movs	r3, #5
 801414a:	e024      	b.n	8014196 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	240f      	movs	r4, #15
 8014150:	193a      	adds	r2, r7, r4
 8014152:	7812      	ldrb	r2, [r2, #0]
 8014154:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014156:	697b      	ldr	r3, [r7, #20]
 8014158:	687a      	ldr	r2, [r7, #4]
 801415a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	3305      	adds	r3, #5
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	b292      	uxth	r2, r2
 8014164:	68b9      	ldr	r1, [r7, #8]
 8014166:	0018      	movs	r0, r3
 8014168:	f004 fbd2 	bl	8018910 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801416c:	193b      	adds	r3, r7, r4
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	0018      	movs	r0, r3
 8014172:	f7ff ff63 	bl	801403c <IsSticky>
 8014176:	0003      	movs	r3, r0
 8014178:	001a      	movs	r2, r3
 801417a:	697b      	ldr	r3, [r7, #20]
 801417c:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801417e:	4b08      	ldr	r3, [pc, #32]	; (80141a0 <LoRaMacCommandsAddCmd+0xa0>)
 8014180:	22f8      	movs	r2, #248	; 0xf8
 8014182:	589a      	ldr	r2, [r3, r2]
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	18d3      	adds	r3, r2, r3
 8014188:	1c5a      	adds	r2, r3, #1
 801418a:	4b05      	ldr	r3, [pc, #20]	; (80141a0 <LoRaMacCommandsAddCmd+0xa0>)
 801418c:	21f8      	movs	r1, #248	; 0xf8
 801418e:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8014190:	f7ff ff6a 	bl	8014068 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014194:	2300      	movs	r3, #0
}
 8014196:	0018      	movs	r0, r3
 8014198:	46bd      	mov	sp, r7
 801419a:	b007      	add	sp, #28
 801419c:	bd90      	pop	{r4, r7, pc}
 801419e:	46c0      	nop			; (mov r8, r8)
 80141a0:	200011a4 	.word	0x200011a4

080141a4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d101      	bne.n	80141b6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80141b2:	2301      	movs	r3, #1
 80141b4:	e028      	b.n	8014208 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	4b15      	ldr	r3, [pc, #84]	; (8014210 <LoRaMacCommandsRemoveCmd+0x6c>)
 80141ba:	0011      	movs	r1, r2
 80141bc:	0018      	movs	r0, r3
 80141be:	f7ff ff08 	bl	8013fd2 <LinkedListRemove>
 80141c2:	0003      	movs	r3, r0
 80141c4:	001a      	movs	r2, r3
 80141c6:	2301      	movs	r3, #1
 80141c8:	4053      	eors	r3, r2
 80141ca:	b2db      	uxtb	r3, r3
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d001      	beq.n	80141d4 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80141d0:	2303      	movs	r3, #3
 80141d2:	e019      	b.n	8014208 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80141d4:	4b0e      	ldr	r3, [pc, #56]	; (8014210 <LoRaMacCommandsRemoveCmd+0x6c>)
 80141d6:	22f8      	movs	r2, #248	; 0xf8
 80141d8:	589a      	ldr	r2, [r3, r2]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	689b      	ldr	r3, [r3, #8]
 80141de:	1ad3      	subs	r3, r2, r3
 80141e0:	1e5a      	subs	r2, r3, #1
 80141e2:	4b0b      	ldr	r3, [pc, #44]	; (8014210 <LoRaMacCommandsRemoveCmd+0x6c>)
 80141e4:	21f8      	movs	r1, #248	; 0xf8
 80141e6:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	0018      	movs	r0, r3
 80141ec:	f7ff fe7a 	bl	8013ee4 <FreeMacCommandSlot>
 80141f0:	0003      	movs	r3, r0
 80141f2:	001a      	movs	r2, r3
 80141f4:	2301      	movs	r3, #1
 80141f6:	4053      	eors	r3, r2
 80141f8:	b2db      	uxtb	r3, r3
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d001      	beq.n	8014202 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 80141fe:	2305      	movs	r3, #5
 8014200:	e002      	b.n	8014208 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8014202:	f7ff ff31 	bl	8014068 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014206:	2300      	movs	r3, #0
}
 8014208:	0018      	movs	r0, r3
 801420a:	46bd      	mov	sp, r7
 801420c:	b002      	add	sp, #8
 801420e:	bd80      	pop	{r7, pc}
 8014210:	200011a4 	.word	0x200011a4

08014214 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 801421a:	4b11      	ldr	r3, [pc, #68]	; (8014260 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014220:	e013      	b.n	801424a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	7b1b      	ldrb	r3, [r3, #12]
 8014226:	2201      	movs	r2, #1
 8014228:	4053      	eors	r3, r2
 801422a:	b2db      	uxtb	r3, r3
 801422c:	2b00      	cmp	r3, #0
 801422e:	d009      	beq.n	8014244 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	0018      	movs	r0, r3
 801423a:	f7ff ffb3 	bl	80141a4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	607b      	str	r3, [r7, #4]
 8014242:	e002      	b.n	801424a <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d1e8      	bne.n	8014222 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8014250:	f7ff ff0a 	bl	8014068 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014254:	2300      	movs	r3, #0
}
 8014256:	0018      	movs	r0, r3
 8014258:	46bd      	mov	sp, r7
 801425a:	b002      	add	sp, #8
 801425c:	bd80      	pop	{r7, pc}
 801425e:	46c0      	nop			; (mov r8, r8)
 8014260:	200011a4 	.word	0x200011a4

08014264 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 801426a:	4b0f      	ldr	r3, [pc, #60]	; (80142a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014270:	e00f      	b.n	8014292 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	791b      	ldrb	r3, [r3, #4]
 801427c:	0018      	movs	r0, r3
 801427e:	f7ff fedd 	bl	801403c <IsSticky>
 8014282:	1e03      	subs	r3, r0, #0
 8014284:	d003      	beq.n	801428e <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	0018      	movs	r0, r3
 801428a:	f7ff ff8b 	bl	80141a4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d1ec      	bne.n	8014272 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 8014298:	f7ff fee6 	bl	8014068 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801429c:	2300      	movs	r3, #0
}
 801429e:	0018      	movs	r0, r3
 80142a0:	46bd      	mov	sp, r7
 80142a2:	b002      	add	sp, #8
 80142a4:	bd80      	pop	{r7, pc}
 80142a6:	46c0      	nop			; (mov r8, r8)
 80142a8:	200011a4 	.word	0x200011a4

080142ac <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d101      	bne.n	80142be <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80142ba:	2301      	movs	r3, #1
 80142bc:	e005      	b.n	80142ca <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 80142be:	4b05      	ldr	r3, [pc, #20]	; (80142d4 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80142c0:	22f8      	movs	r2, #248	; 0xf8
 80142c2:	589a      	ldr	r2, [r3, r2]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80142c8:	2300      	movs	r3, #0
}
 80142ca:	0018      	movs	r0, r3
 80142cc:	46bd      	mov	sp, r7
 80142ce:	b002      	add	sp, #8
 80142d0:	bd80      	pop	{r7, pc}
 80142d2:	46c0      	nop			; (mov r8, r8)
 80142d4:	200011a4 	.word	0x200011a4

080142d8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80142d8:	b590      	push	{r4, r7, lr}
 80142da:	b089      	sub	sp, #36	; 0x24
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 80142e4:	4b2a      	ldr	r3, [pc, #168]	; (8014390 <LoRaMacCommandsSerializeCmds+0xb8>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80142ea:	231b      	movs	r3, #27
 80142ec:	18fb      	adds	r3, r7, r3
 80142ee:	2200      	movs	r2, #0
 80142f0:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d002      	beq.n	80142fe <LoRaMacCommandsSerializeCmds+0x26>
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d12d      	bne.n	801435a <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80142fe:	2301      	movs	r3, #1
 8014300:	e042      	b.n	8014388 <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014302:	241b      	movs	r4, #27
 8014304:	193b      	adds	r3, r7, r4
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	68fa      	ldr	r2, [r7, #12]
 801430a:	1ad2      	subs	r2, r2, r3
 801430c:	69fb      	ldr	r3, [r7, #28]
 801430e:	689b      	ldr	r3, [r3, #8]
 8014310:	3301      	adds	r3, #1
 8014312:	429a      	cmp	r2, r3
 8014314:	d325      	bcc.n	8014362 <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 8014316:	193b      	adds	r3, r7, r4
 8014318:	781b      	ldrb	r3, [r3, #0]
 801431a:	193a      	adds	r2, r7, r4
 801431c:	1c59      	adds	r1, r3, #1
 801431e:	7011      	strb	r1, [r2, #0]
 8014320:	001a      	movs	r2, r3
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	189b      	adds	r3, r3, r2
 8014326:	69fa      	ldr	r2, [r7, #28]
 8014328:	7912      	ldrb	r2, [r2, #4]
 801432a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801432c:	193b      	adds	r3, r7, r4
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	687a      	ldr	r2, [r7, #4]
 8014332:	18d0      	adds	r0, r2, r3
 8014334:	69fb      	ldr	r3, [r7, #28]
 8014336:	1d59      	adds	r1, r3, #5
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	689b      	ldr	r3, [r3, #8]
 801433c:	b29b      	uxth	r3, r3
 801433e:	001a      	movs	r2, r3
 8014340:	f004 fae6 	bl	8018910 <memcpy1>
            itr += curElement->PayloadSize;
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	689b      	ldr	r3, [r3, #8]
 8014348:	b2d9      	uxtb	r1, r3
 801434a:	193b      	adds	r3, r7, r4
 801434c:	193a      	adds	r2, r7, r4
 801434e:	7812      	ldrb	r2, [r2, #0]
 8014350:	188a      	adds	r2, r1, r2
 8014352:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801435a:	69fb      	ldr	r3, [r7, #28]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d1d0      	bne.n	8014302 <LoRaMacCommandsSerializeCmds+0x2a>
 8014360:	e00a      	b.n	8014378 <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 8014362:	46c0      	nop			; (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014364:	e008      	b.n	8014378 <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014366:	69fb      	ldr	r3, [r7, #28]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801436c:	69fb      	ldr	r3, [r7, #28]
 801436e:	0018      	movs	r0, r3
 8014370:	f7ff ff18 	bl	80141a4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d1f3      	bne.n	8014366 <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	0018      	movs	r0, r3
 8014382:	f7ff ff93 	bl	80142ac <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014386:	2300      	movs	r3, #0
}
 8014388:	0018      	movs	r0, r3
 801438a:	46bd      	mov	sp, r7
 801438c:	b009      	add	sp, #36	; 0x24
 801438e:	bd90      	pop	{r4, r7, pc}
 8014390:	200011a4 	.word	0x200011a4

08014394 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b084      	sub	sp, #16
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d101      	bne.n	80143a6 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80143a2:	2301      	movs	r3, #1
 80143a4:	e016      	b.n	80143d4 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 80143a6:	4b0d      	ldr	r3, [pc, #52]	; (80143dc <LoRaMacCommandsStickyCmdsPending+0x48>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	2200      	movs	r2, #0
 80143b0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80143b2:	e00b      	b.n	80143cc <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	7b1b      	ldrb	r3, [r3, #12]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d004      	beq.n	80143c6 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	2201      	movs	r2, #1
 80143c0:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80143c2:	2300      	movs	r3, #0
 80143c4:	e006      	b.n	80143d4 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d1f0      	bne.n	80143b4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80143d2:	2300      	movs	r3, #0
}
 80143d4:	0018      	movs	r0, r3
 80143d6:	46bd      	mov	sp, r7
 80143d8:	b004      	add	sp, #16
 80143da:	bd80      	pop	{r7, pc}
 80143dc:	200011a4 	.word	0x200011a4

080143e0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b084      	sub	sp, #16
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	0002      	movs	r2, r0
 80143e8:	1dfb      	adds	r3, r7, #7
 80143ea:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 80143ec:	230f      	movs	r3, #15
 80143ee:	18fb      	adds	r3, r7, r3
 80143f0:	2200      	movs	r2, #0
 80143f2:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 80143f4:	1dfb      	adds	r3, r7, #7
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	2b13      	cmp	r3, #19
 80143fa:	d84a      	bhi.n	8014492 <LoRaMacCommandsGetCmdSize+0xb2>
 80143fc:	009a      	lsls	r2, r3, #2
 80143fe:	4b29      	ldr	r3, [pc, #164]	; (80144a4 <LoRaMacCommandsGetCmdSize+0xc4>)
 8014400:	18d3      	adds	r3, r2, r3
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014406:	230f      	movs	r3, #15
 8014408:	18fb      	adds	r3, r7, r3
 801440a:	2203      	movs	r2, #3
 801440c:	701a      	strb	r2, [r3, #0]
            break;
 801440e:	e041      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014410:	230f      	movs	r3, #15
 8014412:	18fb      	adds	r3, r7, r3
 8014414:	2205      	movs	r2, #5
 8014416:	701a      	strb	r2, [r3, #0]
            break;
 8014418:	e03c      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801441a:	230f      	movs	r3, #15
 801441c:	18fb      	adds	r3, r7, r3
 801441e:	2202      	movs	r2, #2
 8014420:	701a      	strb	r2, [r3, #0]
            break;
 8014422:	e037      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014424:	230f      	movs	r3, #15
 8014426:	18fb      	adds	r3, r7, r3
 8014428:	2205      	movs	r2, #5
 801442a:	701a      	strb	r2, [r3, #0]
            break;
 801442c:	e032      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 801442e:	230f      	movs	r3, #15
 8014430:	18fb      	adds	r3, r7, r3
 8014432:	2201      	movs	r2, #1
 8014434:	701a      	strb	r2, [r3, #0]
            break;
 8014436:	e02d      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014438:	230f      	movs	r3, #15
 801443a:	18fb      	adds	r3, r7, r3
 801443c:	2206      	movs	r2, #6
 801443e:	701a      	strb	r2, [r3, #0]
            break;
 8014440:	e028      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014442:	230f      	movs	r3, #15
 8014444:	18fb      	adds	r3, r7, r3
 8014446:	2202      	movs	r2, #2
 8014448:	701a      	strb	r2, [r3, #0]
            break;
 801444a:	e023      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801444c:	230f      	movs	r3, #15
 801444e:	18fb      	adds	r3, r7, r3
 8014450:	2202      	movs	r2, #2
 8014452:	701a      	strb	r2, [r3, #0]
            break;
 8014454:	e01e      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014456:	230f      	movs	r3, #15
 8014458:	18fb      	adds	r3, r7, r3
 801445a:	2205      	movs	r2, #5
 801445c:	701a      	strb	r2, [r3, #0]
            break;
 801445e:	e019      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014460:	230f      	movs	r3, #15
 8014462:	18fb      	adds	r3, r7, r3
 8014464:	2206      	movs	r2, #6
 8014466:	701a      	strb	r2, [r3, #0]
            break;
 8014468:	e014      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 801446a:	230f      	movs	r3, #15
 801446c:	18fb      	adds	r3, r7, r3
 801446e:	2201      	movs	r2, #1
 8014470:	701a      	strb	r2, [r3, #0]
            break;
 8014472:	e00f      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014474:	230f      	movs	r3, #15
 8014476:	18fb      	adds	r3, r7, r3
 8014478:	2205      	movs	r2, #5
 801447a:	701a      	strb	r2, [r3, #0]
            break;
 801447c:	e00a      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801447e:	230f      	movs	r3, #15
 8014480:	18fb      	adds	r3, r7, r3
 8014482:	2204      	movs	r2, #4
 8014484:	701a      	strb	r2, [r3, #0]
            break;
 8014486:	e005      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014488:	230f      	movs	r3, #15
 801448a:	18fb      	adds	r3, r7, r3
 801448c:	2204      	movs	r2, #4
 801448e:	701a      	strb	r2, [r3, #0]
            break;
 8014490:	e000      	b.n	8014494 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014492:	46c0      	nop			; (mov r8, r8)
        }
    }
    return cidSize;
 8014494:	230f      	movs	r3, #15
 8014496:	18fb      	adds	r3, r7, r3
 8014498:	781b      	ldrb	r3, [r3, #0]
}
 801449a:	0018      	movs	r0, r3
 801449c:	46bd      	mov	sp, r7
 801449e:	b004      	add	sp, #16
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	46c0      	nop			; (mov r8, r8)
 80144a4:	0801e370 	.word	0x0801e370

080144a8 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b082      	sub	sp, #8
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80144b0:	4b08      	ldr	r3, [pc, #32]	; (80144d4 <IncreaseBufferPointer+0x2c>)
 80144b2:	691b      	ldr	r3, [r3, #16]
 80144b4:	3310      	adds	r3, #16
 80144b6:	687a      	ldr	r2, [r7, #4]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d103      	bne.n	80144c4 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80144bc:	4b05      	ldr	r3, [pc, #20]	; (80144d4 <IncreaseBufferPointer+0x2c>)
 80144be:	691b      	ldr	r3, [r3, #16]
 80144c0:	607b      	str	r3, [r7, #4]
 80144c2:	e002      	b.n	80144ca <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	3304      	adds	r3, #4
 80144c8:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80144ca:	687b      	ldr	r3, [r7, #4]
}
 80144cc:	0018      	movs	r0, r3
 80144ce:	46bd      	mov	sp, r7
 80144d0:	b002      	add	sp, #8
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	200012b8 	.word	0x200012b8

080144d8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b082      	sub	sp, #8
 80144dc:	af00      	add	r7, sp, #0
 80144de:	0002      	movs	r2, r0
 80144e0:	1dfb      	adds	r3, r7, #7
 80144e2:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 80144e4:	1dfb      	adds	r3, r7, #7
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d101      	bne.n	80144f0 <IsListEmpty+0x18>
    {
        return true;
 80144ec:	2301      	movs	r3, #1
 80144ee:	e000      	b.n	80144f2 <IsListEmpty+0x1a>
    }
    return false;
 80144f0:	2300      	movs	r3, #0
}
 80144f2:	0018      	movs	r0, r3
 80144f4:	46bd      	mov	sp, r7
 80144f6:	b002      	add	sp, #8
 80144f8:	bd80      	pop	{r7, pc}

080144fa <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80144fa:	b580      	push	{r7, lr}
 80144fc:	b082      	sub	sp, #8
 80144fe:	af00      	add	r7, sp, #0
 8014500:	0002      	movs	r2, r0
 8014502:	1dfb      	adds	r3, r7, #7
 8014504:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014506:	1dfb      	adds	r3, r7, #7
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	2b04      	cmp	r3, #4
 801450c:	d901      	bls.n	8014512 <IsListFull+0x18>
    {
        return true;
 801450e:	2301      	movs	r3, #1
 8014510:	e000      	b.n	8014514 <IsListFull+0x1a>
    }
    return false;
 8014512:	2300      	movs	r3, #0
}
 8014514:	0018      	movs	r0, r3
 8014516:	46bd      	mov	sp, r7
 8014518:	b002      	add	sp, #8
 801451a:	bd80      	pop	{r7, pc}

0801451c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b086      	sub	sp, #24
 8014520:	af00      	add	r7, sp, #0
 8014522:	60b9      	str	r1, [r7, #8]
 8014524:	607a      	str	r2, [r7, #4]
 8014526:	230f      	movs	r3, #15
 8014528:	18fb      	adds	r3, r7, r3
 801452a:	1c02      	adds	r2, r0, #0
 801452c:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014532:	4b18      	ldr	r3, [pc, #96]	; (8014594 <GetElement+0x78>)
 8014534:	691b      	ldr	r3, [r3, #16]
 8014536:	7d1b      	ldrb	r3, [r3, #20]
 8014538:	0018      	movs	r0, r3
 801453a:	f7ff ffcd 	bl	80144d8 <IsListEmpty>
 801453e:	1e03      	subs	r3, r0, #0
 8014540:	d001      	beq.n	8014546 <GetElement+0x2a>
    {
        return NULL;
 8014542:	2300      	movs	r3, #0
 8014544:	e022      	b.n	801458c <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8014546:	2313      	movs	r3, #19
 8014548:	18fb      	adds	r3, r7, r3
 801454a:	2200      	movs	r2, #0
 801454c:	701a      	strb	r2, [r3, #0]
 801454e:	e014      	b.n	801457a <GetElement+0x5e>
    {
        if( element->Request == request )
 8014550:	697b      	ldr	r3, [r7, #20]
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	220f      	movs	r2, #15
 8014556:	18ba      	adds	r2, r7, r2
 8014558:	7812      	ldrb	r2, [r2, #0]
 801455a:	429a      	cmp	r2, r3
 801455c:	d101      	bne.n	8014562 <GetElement+0x46>
        {
            // We have found the element
            return element;
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	e014      	b.n	801458c <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 8014562:	697b      	ldr	r3, [r7, #20]
 8014564:	0018      	movs	r0, r3
 8014566:	f7ff ff9f 	bl	80144a8 <IncreaseBufferPointer>
 801456a:	0003      	movs	r3, r0
 801456c:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 801456e:	2113      	movs	r1, #19
 8014570:	187b      	adds	r3, r7, r1
 8014572:	781a      	ldrb	r2, [r3, #0]
 8014574:	187b      	adds	r3, r7, r1
 8014576:	3201      	adds	r2, #1
 8014578:	701a      	strb	r2, [r3, #0]
 801457a:	4b06      	ldr	r3, [pc, #24]	; (8014594 <GetElement+0x78>)
 801457c:	691b      	ldr	r3, [r3, #16]
 801457e:	7d1b      	ldrb	r3, [r3, #20]
 8014580:	2213      	movs	r2, #19
 8014582:	18ba      	adds	r2, r7, r2
 8014584:	7812      	ldrb	r2, [r2, #0]
 8014586:	429a      	cmp	r2, r3
 8014588:	d3e2      	bcc.n	8014550 <GetElement+0x34>
    }

    return NULL;
 801458a:	2300      	movs	r3, #0
}
 801458c:	0018      	movs	r0, r3
 801458e:	46bd      	mov	sp, r7
 8014590:	b006      	add	sp, #24
 8014592:	bd80      	pop	{r7, pc}
 8014594:	200012b8 	.word	0x200012b8

08014598 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 80145a2:	4b13      	ldr	r3, [pc, #76]	; (80145f0 <LoRaMacConfirmQueueInit+0x58>)
 80145a4:	687a      	ldr	r2, [r7, #4]
 80145a6:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 80145a8:	4b11      	ldr	r3, [pc, #68]	; (80145f0 <LoRaMacConfirmQueueInit+0x58>)
 80145aa:	4a12      	ldr	r2, [pc, #72]	; (80145f4 <LoRaMacConfirmQueueInit+0x5c>)
 80145ac:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 80145ae:	4b10      	ldr	r3, [pc, #64]	; (80145f0 <LoRaMacConfirmQueueInit+0x58>)
 80145b0:	691b      	ldr	r3, [r3, #16]
 80145b2:	2200      	movs	r2, #0
 80145b4:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80145b6:	4b0e      	ldr	r3, [pc, #56]	; (80145f0 <LoRaMacConfirmQueueInit+0x58>)
 80145b8:	691b      	ldr	r3, [r3, #16]
 80145ba:	001a      	movs	r2, r3
 80145bc:	4b0c      	ldr	r3, [pc, #48]	; (80145f0 <LoRaMacConfirmQueueInit+0x58>)
 80145be:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80145c0:	4b0b      	ldr	r3, [pc, #44]	; (80145f0 <LoRaMacConfirmQueueInit+0x58>)
 80145c2:	691b      	ldr	r3, [r3, #16]
 80145c4:	001a      	movs	r2, r3
 80145c6:	4b0a      	ldr	r3, [pc, #40]	; (80145f0 <LoRaMacConfirmQueueInit+0x58>)
 80145c8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 80145ca:	4b09      	ldr	r3, [pc, #36]	; (80145f0 <LoRaMacConfirmQueueInit+0x58>)
 80145cc:	691b      	ldr	r3, [r3, #16]
 80145ce:	2214      	movs	r2, #20
 80145d0:	21ff      	movs	r1, #255	; 0xff
 80145d2:	0018      	movs	r0, r3
 80145d4:	f004 f9da 	bl	801898c <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80145d8:	4b05      	ldr	r3, [pc, #20]	; (80145f0 <LoRaMacConfirmQueueInit+0x58>)
 80145da:	691b      	ldr	r3, [r3, #16]
 80145dc:	2201      	movs	r2, #1
 80145de:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 80145e0:	4b03      	ldr	r3, [pc, #12]	; (80145f0 <LoRaMacConfirmQueueInit+0x58>)
 80145e2:	683a      	ldr	r2, [r7, #0]
 80145e4:	60da      	str	r2, [r3, #12]
}
 80145e6:	46c0      	nop			; (mov r8, r8)
 80145e8:	46bd      	mov	sp, r7
 80145ea:	b002      	add	sp, #8
 80145ec:	bd80      	pop	{r7, pc}
 80145ee:	46c0      	nop			; (mov r8, r8)
 80145f0:	200012b8 	.word	0x200012b8
 80145f4:	200012a0 	.word	0x200012a0

080145f8 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b082      	sub	sp, #8
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d007      	beq.n	8014616 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 8014606:	6879      	ldr	r1, [r7, #4]
 8014608:	4b05      	ldr	r3, [pc, #20]	; (8014620 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 801460a:	2216      	movs	r2, #22
 801460c:	0018      	movs	r0, r3
 801460e:	f004 f97f 	bl	8018910 <memcpy1>
        return true;
 8014612:	2301      	movs	r3, #1
 8014614:	e000      	b.n	8014618 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 8014616:	2300      	movs	r3, #0
    }
}
 8014618:	0018      	movs	r0, r3
 801461a:	46bd      	mov	sp, r7
 801461c:	b002      	add	sp, #8
 801461e:	bd80      	pop	{r7, pc}
 8014620:	200012a0 	.word	0x200012a0

08014624 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2216      	movs	r2, #22
 8014630:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8014632:	4b02      	ldr	r3, [pc, #8]	; (801463c <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8014634:	0018      	movs	r0, r3
 8014636:	46bd      	mov	sp, r7
 8014638:	b002      	add	sp, #8
 801463a:	bd80      	pop	{r7, pc}
 801463c:	200012a0 	.word	0x200012a0

08014640 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b082      	sub	sp, #8
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014648:	4b17      	ldr	r3, [pc, #92]	; (80146a8 <LoRaMacConfirmQueueAdd+0x68>)
 801464a:	691b      	ldr	r3, [r3, #16]
 801464c:	7d1b      	ldrb	r3, [r3, #20]
 801464e:	0018      	movs	r0, r3
 8014650:	f7ff ff53 	bl	80144fa <IsListFull>
 8014654:	1e03      	subs	r3, r0, #0
 8014656:	d001      	beq.n	801465c <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 8014658:	2300      	movs	r3, #0
 801465a:	e021      	b.n	80146a0 <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801465c:	4b12      	ldr	r3, [pc, #72]	; (80146a8 <LoRaMacConfirmQueueAdd+0x68>)
 801465e:	689b      	ldr	r3, [r3, #8]
 8014660:	687a      	ldr	r2, [r7, #4]
 8014662:	7812      	ldrb	r2, [r2, #0]
 8014664:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014666:	4b10      	ldr	r3, [pc, #64]	; (80146a8 <LoRaMacConfirmQueueAdd+0x68>)
 8014668:	689b      	ldr	r3, [r3, #8]
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	7852      	ldrb	r2, [r2, #1]
 801466e:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8014670:	4b0d      	ldr	r3, [pc, #52]	; (80146a8 <LoRaMacConfirmQueueAdd+0x68>)
 8014672:	689b      	ldr	r3, [r3, #8]
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	78d2      	ldrb	r2, [r2, #3]
 8014678:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 801467a:	4b0b      	ldr	r3, [pc, #44]	; (80146a8 <LoRaMacConfirmQueueAdd+0x68>)
 801467c:	689b      	ldr	r3, [r3, #8]
 801467e:	2200      	movs	r2, #0
 8014680:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8014682:	4b09      	ldr	r3, [pc, #36]	; (80146a8 <LoRaMacConfirmQueueAdd+0x68>)
 8014684:	691b      	ldr	r3, [r3, #16]
 8014686:	7d1a      	ldrb	r2, [r3, #20]
 8014688:	3201      	adds	r2, #1
 801468a:	b2d2      	uxtb	r2, r2
 801468c:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801468e:	4b06      	ldr	r3, [pc, #24]	; (80146a8 <LoRaMacConfirmQueueAdd+0x68>)
 8014690:	689b      	ldr	r3, [r3, #8]
 8014692:	0018      	movs	r0, r3
 8014694:	f7ff ff08 	bl	80144a8 <IncreaseBufferPointer>
 8014698:	0002      	movs	r2, r0
 801469a:	4b03      	ldr	r3, [pc, #12]	; (80146a8 <LoRaMacConfirmQueueAdd+0x68>)
 801469c:	609a      	str	r2, [r3, #8]

    return true;
 801469e:	2301      	movs	r3, #1
}
 80146a0:	0018      	movs	r0, r3
 80146a2:	46bd      	mov	sp, r7
 80146a4:	b002      	add	sp, #8
 80146a6:	bd80      	pop	{r7, pc}
 80146a8:	200012b8 	.word	0x200012b8

080146ac <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80146b0:	4b0d      	ldr	r3, [pc, #52]	; (80146e8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80146b2:	691b      	ldr	r3, [r3, #16]
 80146b4:	7d1b      	ldrb	r3, [r3, #20]
 80146b6:	0018      	movs	r0, r3
 80146b8:	f7ff ff0e 	bl	80144d8 <IsListEmpty>
 80146bc:	1e03      	subs	r3, r0, #0
 80146be:	d001      	beq.n	80146c4 <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 80146c0:	2300      	movs	r3, #0
 80146c2:	e00e      	b.n	80146e2 <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 80146c4:	4b08      	ldr	r3, [pc, #32]	; (80146e8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80146c6:	691b      	ldr	r3, [r3, #16]
 80146c8:	7d1a      	ldrb	r2, [r3, #20]
 80146ca:	3a01      	subs	r2, #1
 80146cc:	b2d2      	uxtb	r2, r2
 80146ce:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80146d0:	4b05      	ldr	r3, [pc, #20]	; (80146e8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80146d2:	685b      	ldr	r3, [r3, #4]
 80146d4:	0018      	movs	r0, r3
 80146d6:	f7ff fee7 	bl	80144a8 <IncreaseBufferPointer>
 80146da:	0002      	movs	r2, r0
 80146dc:	4b02      	ldr	r3, [pc, #8]	; (80146e8 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80146de:	605a      	str	r2, [r3, #4]

    return true;
 80146e0:	2301      	movs	r3, #1
}
 80146e2:	0018      	movs	r0, r3
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	200012b8 	.word	0x200012b8

080146ec <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b084      	sub	sp, #16
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	0002      	movs	r2, r0
 80146f4:	1dfb      	adds	r3, r7, #7
 80146f6:	701a      	strb	r2, [r3, #0]
 80146f8:	1dbb      	adds	r3, r7, #6
 80146fa:	1c0a      	adds	r2, r1, #0
 80146fc:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80146fe:	2300      	movs	r3, #0
 8014700:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8014702:	4b13      	ldr	r3, [pc, #76]	; (8014750 <LoRaMacConfirmQueueSetStatus+0x64>)
 8014704:	691b      	ldr	r3, [r3, #16]
 8014706:	7d1b      	ldrb	r3, [r3, #20]
 8014708:	0018      	movs	r0, r3
 801470a:	f7ff fee5 	bl	80144d8 <IsListEmpty>
 801470e:	0003      	movs	r3, r0
 8014710:	001a      	movs	r2, r3
 8014712:	2301      	movs	r3, #1
 8014714:	4053      	eors	r3, r2
 8014716:	b2db      	uxtb	r3, r3
 8014718:	2b00      	cmp	r3, #0
 801471a:	d014      	beq.n	8014746 <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801471c:	4b0c      	ldr	r3, [pc, #48]	; (8014750 <LoRaMacConfirmQueueSetStatus+0x64>)
 801471e:	6859      	ldr	r1, [r3, #4]
 8014720:	4b0b      	ldr	r3, [pc, #44]	; (8014750 <LoRaMacConfirmQueueSetStatus+0x64>)
 8014722:	689a      	ldr	r2, [r3, #8]
 8014724:	1dbb      	adds	r3, r7, #6
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	0018      	movs	r0, r3
 801472a:	f7ff fef7 	bl	801451c <GetElement>
 801472e:	0003      	movs	r3, r0
 8014730:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d006      	beq.n	8014746 <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	1dfa      	adds	r2, r7, #7
 801473c:	7812      	ldrb	r2, [r2, #0]
 801473e:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2201      	movs	r2, #1
 8014744:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014746:	46c0      	nop			; (mov r8, r8)
 8014748:	46bd      	mov	sp, r7
 801474a:	b004      	add	sp, #16
 801474c:	bd80      	pop	{r7, pc}
 801474e:	46c0      	nop			; (mov r8, r8)
 8014750:	200012b8 	.word	0x200012b8

08014754 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b084      	sub	sp, #16
 8014758:	af00      	add	r7, sp, #0
 801475a:	0002      	movs	r2, r0
 801475c:	1dfb      	adds	r3, r7, #7
 801475e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8014760:	2300      	movs	r3, #0
 8014762:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8014764:	4b11      	ldr	r3, [pc, #68]	; (80147ac <LoRaMacConfirmQueueGetStatus+0x58>)
 8014766:	691b      	ldr	r3, [r3, #16]
 8014768:	7d1b      	ldrb	r3, [r3, #20]
 801476a:	0018      	movs	r0, r3
 801476c:	f7ff feb4 	bl	80144d8 <IsListEmpty>
 8014770:	0003      	movs	r3, r0
 8014772:	001a      	movs	r2, r3
 8014774:	2301      	movs	r3, #1
 8014776:	4053      	eors	r3, r2
 8014778:	b2db      	uxtb	r3, r3
 801477a:	2b00      	cmp	r3, #0
 801477c:	d010      	beq.n	80147a0 <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801477e:	4b0b      	ldr	r3, [pc, #44]	; (80147ac <LoRaMacConfirmQueueGetStatus+0x58>)
 8014780:	6859      	ldr	r1, [r3, #4]
 8014782:	4b0a      	ldr	r3, [pc, #40]	; (80147ac <LoRaMacConfirmQueueGetStatus+0x58>)
 8014784:	689a      	ldr	r2, [r3, #8]
 8014786:	1dfb      	adds	r3, r7, #7
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	0018      	movs	r0, r3
 801478c:	f7ff fec6 	bl	801451c <GetElement>
 8014790:	0003      	movs	r3, r0
 8014792:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d002      	beq.n	80147a0 <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	785b      	ldrb	r3, [r3, #1]
 801479e:	e000      	b.n	80147a2 <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80147a0:	2301      	movs	r3, #1
}
 80147a2:	0018      	movs	r0, r3
 80147a4:	46bd      	mov	sp, r7
 80147a6:	b004      	add	sp, #16
 80147a8:	bd80      	pop	{r7, pc}
 80147aa:	46c0      	nop			; (mov r8, r8)
 80147ac:	200012b8 	.word	0x200012b8

080147b0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b084      	sub	sp, #16
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	0002      	movs	r2, r0
 80147b8:	1dfb      	adds	r3, r7, #7
 80147ba:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80147bc:	4b18      	ldr	r3, [pc, #96]	; (8014820 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 80147c2:	4b17      	ldr	r3, [pc, #92]	; (8014820 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80147c4:	691b      	ldr	r3, [r3, #16]
 80147c6:	1dfa      	adds	r2, r7, #7
 80147c8:	7812      	ldrb	r2, [r2, #0]
 80147ca:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 80147cc:	4b14      	ldr	r3, [pc, #80]	; (8014820 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80147ce:	691b      	ldr	r3, [r3, #16]
 80147d0:	7d1b      	ldrb	r3, [r3, #20]
 80147d2:	0018      	movs	r0, r3
 80147d4:	f7ff fe80 	bl	80144d8 <IsListEmpty>
 80147d8:	0003      	movs	r3, r0
 80147da:	001a      	movs	r2, r3
 80147dc:	2301      	movs	r3, #1
 80147de:	4053      	eors	r3, r2
 80147e0:	b2db      	uxtb	r3, r3
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d018      	beq.n	8014818 <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	1dfa      	adds	r2, r7, #7
 80147ea:	7812      	ldrb	r2, [r2, #0]
 80147ec:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	78db      	ldrb	r3, [r3, #3]
 80147f2:	2201      	movs	r2, #1
 80147f4:	4053      	eors	r3, r2
 80147f6:	b2db      	uxtb	r3, r3
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d002      	beq.n	8014802 <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	2201      	movs	r2, #1
 8014800:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	0018      	movs	r0, r3
 8014806:	f7ff fe4f 	bl	80144a8 <IncreaseBufferPointer>
 801480a:	0003      	movs	r3, r0
 801480c:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801480e:	4b04      	ldr	r3, [pc, #16]	; (8014820 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8014810:	689b      	ldr	r3, [r3, #8]
 8014812:	68fa      	ldr	r2, [r7, #12]
 8014814:	429a      	cmp	r2, r3
 8014816:	d1e6      	bne.n	80147e6 <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 8014818:	46c0      	nop			; (mov r8, r8)
 801481a:	46bd      	mov	sp, r7
 801481c:	b004      	add	sp, #16
 801481e:	bd80      	pop	{r7, pc}
 8014820:	200012b8 	.word	0x200012b8

08014824 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b082      	sub	sp, #8
 8014828:	af00      	add	r7, sp, #0
 801482a:	0002      	movs	r2, r0
 801482c:	1dfb      	adds	r3, r7, #7
 801482e:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8014830:	4b08      	ldr	r3, [pc, #32]	; (8014854 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014832:	6859      	ldr	r1, [r3, #4]
 8014834:	4b07      	ldr	r3, [pc, #28]	; (8014854 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8014836:	689a      	ldr	r2, [r3, #8]
 8014838:	1dfb      	adds	r3, r7, #7
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	0018      	movs	r0, r3
 801483e:	f7ff fe6d 	bl	801451c <GetElement>
 8014842:	1e03      	subs	r3, r0, #0
 8014844:	d001      	beq.n	801484a <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 8014846:	2301      	movs	r3, #1
 8014848:	e000      	b.n	801484c <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 801484a:	2300      	movs	r3, #0
}
 801484c:	0018      	movs	r0, r3
 801484e:	46bd      	mov	sp, r7
 8014850:	b002      	add	sp, #8
 8014852:	bd80      	pop	{r7, pc}
 8014854:	200012b8 	.word	0x200012b8

08014858 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b084      	sub	sp, #16
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8014860:	4b2d      	ldr	r3, [pc, #180]	; (8014918 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014862:	691a      	ldr	r2, [r3, #16]
 8014864:	230e      	movs	r3, #14
 8014866:	18fb      	adds	r3, r7, r3
 8014868:	7d12      	ldrb	r2, [r2, #20]
 801486a:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 801486c:	230d      	movs	r3, #13
 801486e:	18fb      	adds	r3, r7, r3
 8014870:	2200      	movs	r2, #0
 8014872:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8014874:	230f      	movs	r3, #15
 8014876:	18fb      	adds	r3, r7, r3
 8014878:	2200      	movs	r2, #0
 801487a:	701a      	strb	r2, [r3, #0]
 801487c:	e03f      	b.n	80148fe <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801487e:	4b26      	ldr	r3, [pc, #152]	; (8014918 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	781a      	ldrb	r2, [r3, #0]
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014888:	4b23      	ldr	r3, [pc, #140]	; (8014918 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801488a:	685b      	ldr	r3, [r3, #4]
 801488c:	785a      	ldrb	r2, [r3, #1]
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8014892:	4b21      	ldr	r3, [pc, #132]	; (8014918 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8014894:	685a      	ldr	r2, [r3, #4]
 8014896:	210d      	movs	r1, #13
 8014898:	187b      	adds	r3, r7, r1
 801489a:	7892      	ldrb	r2, [r2, #2]
 801489c:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 801489e:	187b      	adds	r3, r7, r1
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d006      	beq.n	80148b4 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80148a6:	4b1c      	ldr	r3, [pc, #112]	; (8014918 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	689b      	ldr	r3, [r3, #8]
 80148ac:	687a      	ldr	r2, [r7, #4]
 80148ae:	0010      	movs	r0, r2
 80148b0:	4798      	blx	r3
 80148b2:	e00f      	b.n	80148d4 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80148b4:	4b18      	ldr	r3, [pc, #96]	; (8014918 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148b6:	685b      	ldr	r3, [r3, #4]
 80148b8:	781a      	ldrb	r2, [r3, #0]
 80148ba:	2108      	movs	r1, #8
 80148bc:	187b      	adds	r3, r7, r1
 80148be:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80148c0:	4b15      	ldr	r3, [pc, #84]	; (8014918 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	785a      	ldrb	r2, [r3, #1]
 80148c6:	187b      	adds	r3, r7, r1
 80148c8:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80148ca:	4b13      	ldr	r3, [pc, #76]	; (8014918 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80148cc:	685b      	ldr	r3, [r3, #4]
 80148ce:	78da      	ldrb	r2, [r3, #3]
 80148d0:	187b      	adds	r3, r7, r1
 80148d2:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80148d4:	f7ff feea 	bl	80146ac <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80148d8:	230d      	movs	r3, #13
 80148da:	18fb      	adds	r3, r7, r3
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	2201      	movs	r2, #1
 80148e0:	4053      	eors	r3, r2
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d004      	beq.n	80148f2 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80148e8:	2308      	movs	r3, #8
 80148ea:	18fb      	adds	r3, r7, r3
 80148ec:	0018      	movs	r0, r3
 80148ee:	f7ff fea7 	bl	8014640 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80148f2:	210f      	movs	r1, #15
 80148f4:	187b      	adds	r3, r7, r1
 80148f6:	781a      	ldrb	r2, [r3, #0]
 80148f8:	187b      	adds	r3, r7, r1
 80148fa:	3201      	adds	r2, #1
 80148fc:	701a      	strb	r2, [r3, #0]
 80148fe:	230f      	movs	r3, #15
 8014900:	18fa      	adds	r2, r7, r3
 8014902:	230e      	movs	r3, #14
 8014904:	18fb      	adds	r3, r7, r3
 8014906:	7812      	ldrb	r2, [r2, #0]
 8014908:	781b      	ldrb	r3, [r3, #0]
 801490a:	429a      	cmp	r2, r3
 801490c:	d3b7      	bcc.n	801487e <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 801490e:	46c0      	nop			; (mov r8, r8)
 8014910:	46c0      	nop			; (mov r8, r8)
 8014912:	46bd      	mov	sp, r7
 8014914:	b004      	add	sp, #16
 8014916:	bd80      	pop	{r7, pc}
 8014918:	200012b8 	.word	0x200012b8

0801491c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801491c:	b580      	push	{r7, lr}
 801491e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8014920:	4b02      	ldr	r3, [pc, #8]	; (801492c <LoRaMacConfirmQueueGetCnt+0x10>)
 8014922:	691b      	ldr	r3, [r3, #16]
 8014924:	7d1b      	ldrb	r3, [r3, #20]
}
 8014926:	0018      	movs	r0, r3
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	200012b8 	.word	0x200012b8

08014930 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8014930:	b580      	push	{r7, lr}
 8014932:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014934:	4b06      	ldr	r3, [pc, #24]	; (8014950 <LoRaMacConfirmQueueIsFull+0x20>)
 8014936:	691b      	ldr	r3, [r3, #16]
 8014938:	7d1b      	ldrb	r3, [r3, #20]
 801493a:	0018      	movs	r0, r3
 801493c:	f7ff fddd 	bl	80144fa <IsListFull>
 8014940:	1e03      	subs	r3, r0, #0
 8014942:	d001      	beq.n	8014948 <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 8014944:	2301      	movs	r3, #1
 8014946:	e000      	b.n	801494a <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 8014948:	2300      	movs	r3, #0
    }
}
 801494a:	0018      	movs	r0, r3
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	200012b8 	.word	0x200012b8

08014954 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8014954:	b590      	push	{r4, r7, lr}
 8014956:	b08f      	sub	sp, #60	; 0x3c
 8014958:	af00      	add	r7, sp, #0
 801495a:	60f8      	str	r0, [r7, #12]
 801495c:	0008      	movs	r0, r1
 801495e:	0011      	movs	r1, r2
 8014960:	607b      	str	r3, [r7, #4]
 8014962:	230a      	movs	r3, #10
 8014964:	18fb      	adds	r3, r7, r3
 8014966:	1c02      	adds	r2, r0, #0
 8014968:	801a      	strh	r2, [r3, #0]
 801496a:	2309      	movs	r3, #9
 801496c:	18fb      	adds	r3, r7, r3
 801496e:	1c0a      	adds	r2, r1, #0
 8014970:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d101      	bne.n	801497c <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014978:	230a      	movs	r3, #10
 801497a:	e0ad      	b.n	8014ad8 <PayloadEncrypt+0x184>
    }

    uint8_t bufferIndex = 0;
 801497c:	2337      	movs	r3, #55	; 0x37
 801497e:	18fb      	adds	r3, r7, r3
 8014980:	2200      	movs	r2, #0
 8014982:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8014984:	2334      	movs	r3, #52	; 0x34
 8014986:	18fb      	adds	r3, r7, r3
 8014988:	2201      	movs	r2, #1
 801498a:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 801498c:	2320      	movs	r3, #32
 801498e:	18fb      	adds	r3, r7, r3
 8014990:	2200      	movs	r2, #0
 8014992:	601a      	str	r2, [r3, #0]
 8014994:	3304      	adds	r3, #4
 8014996:	220c      	movs	r2, #12
 8014998:	2100      	movs	r1, #0
 801499a:	0018      	movs	r0, r3
 801499c:	f008 fc83 	bl	801d2a6 <memset>
    uint8_t aBlock[16] = { 0 };
 80149a0:	2410      	movs	r4, #16
 80149a2:	193b      	adds	r3, r7, r4
 80149a4:	2200      	movs	r2, #0
 80149a6:	601a      	str	r2, [r3, #0]
 80149a8:	3304      	adds	r3, #4
 80149aa:	220c      	movs	r2, #12
 80149ac:	2100      	movs	r1, #0
 80149ae:	0018      	movs	r0, r3
 80149b0:	f008 fc79 	bl	801d2a6 <memset>

    aBlock[0] = 0x01;
 80149b4:	0021      	movs	r1, r4
 80149b6:	187b      	adds	r3, r7, r1
 80149b8:	2201      	movs	r2, #1
 80149ba:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 80149bc:	187a      	adds	r2, r7, r1
 80149be:	2340      	movs	r3, #64	; 0x40
 80149c0:	2008      	movs	r0, #8
 80149c2:	181b      	adds	r3, r3, r0
 80149c4:	19db      	adds	r3, r3, r7
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	b2da      	uxtb	r2, r3
 80149ce:	187b      	adds	r3, r7, r1
 80149d0:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	0a1b      	lsrs	r3, r3, #8
 80149d6:	b2da      	uxtb	r2, r3
 80149d8:	187b      	adds	r3, r7, r1
 80149da:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	0c1b      	lsrs	r3, r3, #16
 80149e0:	b2da      	uxtb	r2, r3
 80149e2:	187b      	adds	r3, r7, r1
 80149e4:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	0e1b      	lsrs	r3, r3, #24
 80149ea:	b2da      	uxtb	r2, r3
 80149ec:	187b      	adds	r3, r7, r1
 80149ee:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 80149f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149f2:	b2da      	uxtb	r2, r3
 80149f4:	187b      	adds	r3, r7, r1
 80149f6:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80149f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149fa:	0a1b      	lsrs	r3, r3, #8
 80149fc:	b2da      	uxtb	r2, r3
 80149fe:	187b      	adds	r3, r7, r1
 8014a00:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a04:	0c1b      	lsrs	r3, r3, #16
 8014a06:	b2da      	uxtb	r2, r3
 8014a08:	187b      	adds	r3, r7, r1
 8014a0a:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a0e:	0e1b      	lsrs	r3, r3, #24
 8014a10:	b2da      	uxtb	r2, r3
 8014a12:	187b      	adds	r3, r7, r1
 8014a14:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 8014a16:	e058      	b.n	8014aca <PayloadEncrypt+0x176>
    {
        aBlock[15] = ctr & 0xFF;
 8014a18:	2134      	movs	r1, #52	; 0x34
 8014a1a:	187b      	adds	r3, r7, r1
 8014a1c:	881b      	ldrh	r3, [r3, #0]
 8014a1e:	b2da      	uxtb	r2, r3
 8014a20:	2010      	movs	r0, #16
 8014a22:	183b      	adds	r3, r7, r0
 8014a24:	73da      	strb	r2, [r3, #15]
        ctr++;
 8014a26:	187b      	adds	r3, r7, r1
 8014a28:	881a      	ldrh	r2, [r3, #0]
 8014a2a:	187b      	adds	r3, r7, r1
 8014a2c:	3201      	adds	r2, #1
 8014a2e:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014a30:	2320      	movs	r3, #32
 8014a32:	18f9      	adds	r1, r7, r3
 8014a34:	2309      	movs	r3, #9
 8014a36:	18fb      	adds	r3, r7, r3
 8014a38:	781a      	ldrb	r2, [r3, #0]
 8014a3a:	1838      	adds	r0, r7, r0
 8014a3c:	000b      	movs	r3, r1
 8014a3e:	2110      	movs	r1, #16
 8014a40:	f7f8 fa39 	bl	800ceb6 <SecureElementAesEncrypt>
 8014a44:	1e03      	subs	r3, r0, #0
 8014a46:	d001      	beq.n	8014a4c <PayloadEncrypt+0xf8>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a48:	230f      	movs	r3, #15
 8014a4a:	e045      	b.n	8014ad8 <PayloadEncrypt+0x184>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014a4c:	2333      	movs	r3, #51	; 0x33
 8014a4e:	18fb      	adds	r3, r7, r3
 8014a50:	2200      	movs	r2, #0
 8014a52:	701a      	strb	r2, [r3, #0]
 8014a54:	e01f      	b.n	8014a96 <PayloadEncrypt+0x142>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014a56:	2037      	movs	r0, #55	; 0x37
 8014a58:	183b      	adds	r3, r7, r0
 8014a5a:	781a      	ldrb	r2, [r3, #0]
 8014a5c:	2433      	movs	r4, #51	; 0x33
 8014a5e:	193b      	adds	r3, r7, r4
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	18d3      	adds	r3, r2, r3
 8014a64:	001a      	movs	r2, r3
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	189b      	adds	r3, r3, r2
 8014a6a:	7819      	ldrb	r1, [r3, #0]
 8014a6c:	193b      	adds	r3, r7, r4
 8014a6e:	781b      	ldrb	r3, [r3, #0]
 8014a70:	2220      	movs	r2, #32
 8014a72:	18ba      	adds	r2, r7, r2
 8014a74:	5cd2      	ldrb	r2, [r2, r3]
 8014a76:	183b      	adds	r3, r7, r0
 8014a78:	7818      	ldrb	r0, [r3, #0]
 8014a7a:	193b      	adds	r3, r7, r4
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	18c3      	adds	r3, r0, r3
 8014a80:	0018      	movs	r0, r3
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	181b      	adds	r3, r3, r0
 8014a86:	404a      	eors	r2, r1
 8014a88:	b2d2      	uxtb	r2, r2
 8014a8a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014a8c:	193b      	adds	r3, r7, r4
 8014a8e:	781a      	ldrb	r2, [r3, #0]
 8014a90:	193b      	adds	r3, r7, r4
 8014a92:	3201      	adds	r2, #1
 8014a94:	701a      	strb	r2, [r3, #0]
 8014a96:	2333      	movs	r3, #51	; 0x33
 8014a98:	18fb      	adds	r3, r7, r3
 8014a9a:	781a      	ldrb	r2, [r3, #0]
 8014a9c:	230a      	movs	r3, #10
 8014a9e:	18fb      	adds	r3, r7, r3
 8014aa0:	881b      	ldrh	r3, [r3, #0]
 8014aa2:	b219      	sxth	r1, r3
 8014aa4:	2910      	cmp	r1, #16
 8014aa6:	dd00      	ble.n	8014aaa <PayloadEncrypt+0x156>
 8014aa8:	2310      	movs	r3, #16
 8014aaa:	b21b      	sxth	r3, r3
 8014aac:	429a      	cmp	r2, r3
 8014aae:	dbd2      	blt.n	8014a56 <PayloadEncrypt+0x102>
        }
        size -= 16;
 8014ab0:	210a      	movs	r1, #10
 8014ab2:	187b      	adds	r3, r7, r1
 8014ab4:	881b      	ldrh	r3, [r3, #0]
 8014ab6:	3b10      	subs	r3, #16
 8014ab8:	b29a      	uxth	r2, r3
 8014aba:	187b      	adds	r3, r7, r1
 8014abc:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8014abe:	2237      	movs	r2, #55	; 0x37
 8014ac0:	18bb      	adds	r3, r7, r2
 8014ac2:	18ba      	adds	r2, r7, r2
 8014ac4:	7812      	ldrb	r2, [r2, #0]
 8014ac6:	3210      	adds	r2, #16
 8014ac8:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8014aca:	230a      	movs	r3, #10
 8014acc:	18fb      	adds	r3, r7, r3
 8014ace:	2200      	movs	r2, #0
 8014ad0:	5e9b      	ldrsh	r3, [r3, r2]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	dca0      	bgt.n	8014a18 <PayloadEncrypt+0xc4>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014ad6:	2300      	movs	r3, #0
}
 8014ad8:	0018      	movs	r0, r3
 8014ada:	46bd      	mov	sp, r7
 8014adc:	b00f      	add	sp, #60	; 0x3c
 8014ade:	bd90      	pop	{r4, r7, pc}

08014ae0 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8014ae0:	b5b0      	push	{r4, r5, r7, lr}
 8014ae2:	b082      	sub	sp, #8
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	0005      	movs	r5, r0
 8014ae8:	000c      	movs	r4, r1
 8014aea:	0010      	movs	r0, r2
 8014aec:	0019      	movs	r1, r3
 8014aee:	1dbb      	adds	r3, r7, #6
 8014af0:	1c2a      	adds	r2, r5, #0
 8014af2:	801a      	strh	r2, [r3, #0]
 8014af4:	1d7b      	adds	r3, r7, #5
 8014af6:	1c22      	adds	r2, r4, #0
 8014af8:	701a      	strb	r2, [r3, #0]
 8014afa:	1d3b      	adds	r3, r7, #4
 8014afc:	1c02      	adds	r2, r0, #0
 8014afe:	701a      	strb	r2, [r3, #0]
 8014b00:	1cfb      	adds	r3, r7, #3
 8014b02:	1c0a      	adds	r2, r1, #0
 8014b04:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8014b06:	6a3b      	ldr	r3, [r7, #32]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d101      	bne.n	8014b10 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014b0c:	230a      	movs	r3, #10
 8014b0e:	e050      	b.n	8014bb2 <PrepareB0+0xd2>
    }

    b0[0] = 0x49;
 8014b10:	6a3b      	ldr	r3, [r7, #32]
 8014b12:	2249      	movs	r2, #73	; 0x49
 8014b14:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8014b16:	6a3b      	ldr	r3, [r7, #32]
 8014b18:	3301      	adds	r3, #1
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014b1e:	6a3b      	ldr	r3, [r7, #32]
 8014b20:	3302      	adds	r3, #2
 8014b22:	2200      	movs	r2, #0
 8014b24:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014b26:	6a3b      	ldr	r3, [r7, #32]
 8014b28:	3303      	adds	r3, #3
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014b2e:	6a3b      	ldr	r3, [r7, #32]
 8014b30:	3304      	adds	r3, #4
 8014b32:	2200      	movs	r2, #0
 8014b34:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014b36:	6a3b      	ldr	r3, [r7, #32]
 8014b38:	3305      	adds	r3, #5
 8014b3a:	1cfa      	adds	r2, r7, #3
 8014b3c:	7812      	ldrb	r2, [r2, #0]
 8014b3e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014b40:	6a3b      	ldr	r3, [r7, #32]
 8014b42:	3306      	adds	r3, #6
 8014b44:	69ba      	ldr	r2, [r7, #24]
 8014b46:	b2d2      	uxtb	r2, r2
 8014b48:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014b4a:	69bb      	ldr	r3, [r7, #24]
 8014b4c:	0a1a      	lsrs	r2, r3, #8
 8014b4e:	6a3b      	ldr	r3, [r7, #32]
 8014b50:	3307      	adds	r3, #7
 8014b52:	b2d2      	uxtb	r2, r2
 8014b54:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014b56:	69bb      	ldr	r3, [r7, #24]
 8014b58:	0c1a      	lsrs	r2, r3, #16
 8014b5a:	6a3b      	ldr	r3, [r7, #32]
 8014b5c:	3308      	adds	r3, #8
 8014b5e:	b2d2      	uxtb	r2, r2
 8014b60:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014b62:	69bb      	ldr	r3, [r7, #24]
 8014b64:	0e1a      	lsrs	r2, r3, #24
 8014b66:	6a3b      	ldr	r3, [r7, #32]
 8014b68:	3309      	adds	r3, #9
 8014b6a:	b2d2      	uxtb	r2, r2
 8014b6c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014b6e:	6a3b      	ldr	r3, [r7, #32]
 8014b70:	330a      	adds	r3, #10
 8014b72:	69fa      	ldr	r2, [r7, #28]
 8014b74:	b2d2      	uxtb	r2, r2
 8014b76:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014b78:	69fb      	ldr	r3, [r7, #28]
 8014b7a:	0a1a      	lsrs	r2, r3, #8
 8014b7c:	6a3b      	ldr	r3, [r7, #32]
 8014b7e:	330b      	adds	r3, #11
 8014b80:	b2d2      	uxtb	r2, r2
 8014b82:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014b84:	69fb      	ldr	r3, [r7, #28]
 8014b86:	0c1a      	lsrs	r2, r3, #16
 8014b88:	6a3b      	ldr	r3, [r7, #32]
 8014b8a:	330c      	adds	r3, #12
 8014b8c:	b2d2      	uxtb	r2, r2
 8014b8e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014b90:	69fb      	ldr	r3, [r7, #28]
 8014b92:	0e1a      	lsrs	r2, r3, #24
 8014b94:	6a3b      	ldr	r3, [r7, #32]
 8014b96:	330d      	adds	r3, #13
 8014b98:	b2d2      	uxtb	r2, r2
 8014b9a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8014b9c:	6a3b      	ldr	r3, [r7, #32]
 8014b9e:	330e      	adds	r3, #14
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014ba4:	6a3b      	ldr	r3, [r7, #32]
 8014ba6:	330f      	adds	r3, #15
 8014ba8:	1dba      	adds	r2, r7, #6
 8014baa:	8812      	ldrh	r2, [r2, #0]
 8014bac:	b2d2      	uxtb	r2, r2
 8014bae:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014bb0:	2300      	movs	r3, #0
}
 8014bb2:	0018      	movs	r0, r3
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	b002      	add	sp, #8
 8014bb8:	bdb0      	pop	{r4, r5, r7, pc}

08014bba <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8014bba:	b5b0      	push	{r4, r5, r7, lr}
 8014bbc:	b08a      	sub	sp, #40	; 0x28
 8014bbe:	af04      	add	r7, sp, #16
 8014bc0:	6078      	str	r0, [r7, #4]
 8014bc2:	000c      	movs	r4, r1
 8014bc4:	0010      	movs	r0, r2
 8014bc6:	0019      	movs	r1, r3
 8014bc8:	1cbb      	adds	r3, r7, #2
 8014bca:	1c22      	adds	r2, r4, #0
 8014bcc:	801a      	strh	r2, [r3, #0]
 8014bce:	1c7b      	adds	r3, r7, #1
 8014bd0:	1c02      	adds	r2, r0, #0
 8014bd2:	701a      	strb	r2, [r3, #0]
 8014bd4:	003b      	movs	r3, r7
 8014bd6:	1c0a      	adds	r2, r1, #0
 8014bd8:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d002      	beq.n	8014be6 <ComputeCmacB0+0x2c>
 8014be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d101      	bne.n	8014bea <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014be6:	230a      	movs	r3, #10
 8014be8:	e02a      	b.n	8014c40 <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014bea:	1cbb      	adds	r3, r7, #2
 8014bec:	881a      	ldrh	r2, [r3, #0]
 8014bee:	2380      	movs	r3, #128	; 0x80
 8014bf0:	005b      	lsls	r3, r3, #1
 8014bf2:	429a      	cmp	r2, r3
 8014bf4:	d901      	bls.n	8014bfa <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014bf6:	230e      	movs	r3, #14
 8014bf8:	e022      	b.n	8014c40 <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014bfa:	2328      	movs	r3, #40	; 0x28
 8014bfc:	18fb      	adds	r3, r7, r3
 8014bfe:	781c      	ldrb	r4, [r3, #0]
 8014c00:	003b      	movs	r3, r7
 8014c02:	781a      	ldrb	r2, [r3, #0]
 8014c04:	1c7b      	adds	r3, r7, #1
 8014c06:	7819      	ldrb	r1, [r3, #0]
 8014c08:	1cbb      	adds	r3, r7, #2
 8014c0a:	8818      	ldrh	r0, [r3, #0]
 8014c0c:	2508      	movs	r5, #8
 8014c0e:	197b      	adds	r3, r7, r5
 8014c10:	9302      	str	r3, [sp, #8]
 8014c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c14:	9301      	str	r3, [sp, #4]
 8014c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c18:	9300      	str	r3, [sp, #0]
 8014c1a:	0023      	movs	r3, r4
 8014c1c:	f7ff ff60 	bl	8014ae0 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014c20:	1c7b      	adds	r3, r7, #1
 8014c22:	781c      	ldrb	r4, [r3, #0]
 8014c24:	1cbb      	adds	r3, r7, #2
 8014c26:	881a      	ldrh	r2, [r3, #0]
 8014c28:	6879      	ldr	r1, [r7, #4]
 8014c2a:	1978      	adds	r0, r7, r5
 8014c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c2e:	9300      	str	r3, [sp, #0]
 8014c30:	0023      	movs	r3, r4
 8014c32:	f7f8 f8dd 	bl	800cdf0 <SecureElementComputeAesCmac>
 8014c36:	1e03      	subs	r3, r0, #0
 8014c38:	d001      	beq.n	8014c3e <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014c3a:	230f      	movs	r3, #15
 8014c3c:	e000      	b.n	8014c40 <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014c3e:	2300      	movs	r3, #0
}
 8014c40:	0018      	movs	r0, r3
 8014c42:	46bd      	mov	sp, r7
 8014c44:	b006      	add	sp, #24
 8014c46:	bdb0      	pop	{r4, r5, r7, pc}

08014c48 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c4a:	b0cd      	sub	sp, #308	; 0x134
 8014c4c:	af04      	add	r7, sp, #16
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	000c      	movs	r4, r1
 8014c52:	0010      	movs	r0, r2
 8014c54:	0019      	movs	r1, r3
 8014c56:	4b46      	ldr	r3, [pc, #280]	; (8014d70 <VerifyCmacB0+0x128>)
 8014c58:	2590      	movs	r5, #144	; 0x90
 8014c5a:	006d      	lsls	r5, r5, #1
 8014c5c:	195b      	adds	r3, r3, r5
 8014c5e:	19db      	adds	r3, r3, r7
 8014c60:	1c22      	adds	r2, r4, #0
 8014c62:	801a      	strh	r2, [r3, #0]
 8014c64:	4b43      	ldr	r3, [pc, #268]	; (8014d74 <VerifyCmacB0+0x12c>)
 8014c66:	002c      	movs	r4, r5
 8014c68:	191b      	adds	r3, r3, r4
 8014c6a:	19db      	adds	r3, r3, r7
 8014c6c:	1c02      	adds	r2, r0, #0
 8014c6e:	701a      	strb	r2, [r3, #0]
 8014c70:	4b41      	ldr	r3, [pc, #260]	; (8014d78 <VerifyCmacB0+0x130>)
 8014c72:	191b      	adds	r3, r3, r4
 8014c74:	19db      	adds	r3, r3, r7
 8014c76:	1c0a      	adds	r2, r1, #0
 8014c78:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d101      	bne.n	8014c84 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014c80:	230a      	movs	r3, #10
 8014c82:	e070      	b.n	8014d66 <VerifyCmacB0+0x11e>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014c84:	4b3a      	ldr	r3, [pc, #232]	; (8014d70 <VerifyCmacB0+0x128>)
 8014c86:	2290      	movs	r2, #144	; 0x90
 8014c88:	0052      	lsls	r2, r2, #1
 8014c8a:	189b      	adds	r3, r3, r2
 8014c8c:	19db      	adds	r3, r3, r7
 8014c8e:	881a      	ldrh	r2, [r3, #0]
 8014c90:	2380      	movs	r3, #128	; 0x80
 8014c92:	005b      	lsls	r3, r3, #1
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d901      	bls.n	8014c9c <VerifyCmacB0+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014c98:	230e      	movs	r3, #14
 8014c9a:	e064      	b.n	8014d66 <VerifyCmacB0+0x11e>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014c9c:	2388      	movs	r3, #136	; 0x88
 8014c9e:	005a      	lsls	r2, r3, #1
 8014ca0:	260c      	movs	r6, #12
 8014ca2:	19bb      	adds	r3, r7, r6
 8014ca4:	2100      	movs	r1, #0
 8014ca6:	0018      	movs	r0, r3
 8014ca8:	f003 fe70 	bl	801898c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014cac:	2398      	movs	r3, #152	; 0x98
 8014cae:	005b      	lsls	r3, r3, #1
 8014cb0:	2008      	movs	r0, #8
 8014cb2:	181b      	adds	r3, r3, r0
 8014cb4:	19db      	adds	r3, r3, r7
 8014cb6:	781c      	ldrb	r4, [r3, #0]
 8014cb8:	4b2f      	ldr	r3, [pc, #188]	; (8014d78 <VerifyCmacB0+0x130>)
 8014cba:	2590      	movs	r5, #144	; 0x90
 8014cbc:	006d      	lsls	r5, r5, #1
 8014cbe:	195b      	adds	r3, r3, r5
 8014cc0:	19db      	adds	r3, r3, r7
 8014cc2:	781a      	ldrb	r2, [r3, #0]
 8014cc4:	4b2b      	ldr	r3, [pc, #172]	; (8014d74 <VerifyCmacB0+0x12c>)
 8014cc6:	195b      	adds	r3, r3, r5
 8014cc8:	19db      	adds	r3, r3, r7
 8014cca:	7819      	ldrb	r1, [r3, #0]
 8014ccc:	4b28      	ldr	r3, [pc, #160]	; (8014d70 <VerifyCmacB0+0x128>)
 8014cce:	195b      	adds	r3, r3, r5
 8014cd0:	19db      	adds	r3, r3, r7
 8014cd2:	881b      	ldrh	r3, [r3, #0]
 8014cd4:	469c      	mov	ip, r3
 8014cd6:	19bb      	adds	r3, r7, r6
 8014cd8:	9302      	str	r3, [sp, #8]
 8014cda:	239c      	movs	r3, #156	; 0x9c
 8014cdc:	005b      	lsls	r3, r3, #1
 8014cde:	181b      	adds	r3, r3, r0
 8014ce0:	19db      	adds	r3, r3, r7
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	9301      	str	r3, [sp, #4]
 8014ce6:	239a      	movs	r3, #154	; 0x9a
 8014ce8:	005b      	lsls	r3, r3, #1
 8014cea:	181b      	adds	r3, r3, r0
 8014cec:	19db      	adds	r3, r3, r7
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	9300      	str	r3, [sp, #0]
 8014cf2:	0023      	movs	r3, r4
 8014cf4:	4660      	mov	r0, ip
 8014cf6:	f7ff fef3 	bl	8014ae0 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014cfa:	19bb      	adds	r3, r7, r6
 8014cfc:	3310      	adds	r3, #16
 8014cfe:	4a1c      	ldr	r2, [pc, #112]	; (8014d70 <VerifyCmacB0+0x128>)
 8014d00:	1952      	adds	r2, r2, r5
 8014d02:	19d2      	adds	r2, r2, r7
 8014d04:	8812      	ldrh	r2, [r2, #0]
 8014d06:	6879      	ldr	r1, [r7, #4]
 8014d08:	0018      	movs	r0, r3
 8014d0a:	f003 fe01 	bl	8018910 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014d0e:	2020      	movs	r0, #32
 8014d10:	30ff      	adds	r0, #255	; 0xff
 8014d12:	183b      	adds	r3, r7, r0
 8014d14:	2206      	movs	r2, #6
 8014d16:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014d18:	4b15      	ldr	r3, [pc, #84]	; (8014d70 <VerifyCmacB0+0x128>)
 8014d1a:	195b      	adds	r3, r3, r5
 8014d1c:	19db      	adds	r3, r3, r7
 8014d1e:	881b      	ldrh	r3, [r3, #0]
 8014d20:	3310      	adds	r3, #16
 8014d22:	b299      	uxth	r1, r3
 8014d24:	183c      	adds	r4, r7, r0
 8014d26:	4b13      	ldr	r3, [pc, #76]	; (8014d74 <VerifyCmacB0+0x12c>)
 8014d28:	195b      	adds	r3, r3, r5
 8014d2a:	19db      	adds	r3, r3, r7
 8014d2c:	781b      	ldrb	r3, [r3, #0]
 8014d2e:	229e      	movs	r2, #158	; 0x9e
 8014d30:	0052      	lsls	r2, r2, #1
 8014d32:	2008      	movs	r0, #8
 8014d34:	1812      	adds	r2, r2, r0
 8014d36:	19d2      	adds	r2, r2, r7
 8014d38:	6812      	ldr	r2, [r2, #0]
 8014d3a:	19b8      	adds	r0, r7, r6
 8014d3c:	f7f8 f879 	bl	800ce32 <SecureElementVerifyAesCmac>
 8014d40:	0003      	movs	r3, r0
 8014d42:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014d44:	2020      	movs	r0, #32
 8014d46:	30ff      	adds	r0, #255	; 0xff
 8014d48:	183b      	adds	r3, r7, r0
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d101      	bne.n	8014d54 <VerifyCmacB0+0x10c>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014d50:	2300      	movs	r3, #0
 8014d52:	e008      	b.n	8014d66 <VerifyCmacB0+0x11e>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014d54:	2320      	movs	r3, #32
 8014d56:	33ff      	adds	r3, #255	; 0xff
 8014d58:	18fb      	adds	r3, r7, r3
 8014d5a:	781b      	ldrb	r3, [r3, #0]
 8014d5c:	2b01      	cmp	r3, #1
 8014d5e:	d101      	bne.n	8014d64 <VerifyCmacB0+0x11c>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014d60:	2301      	movs	r3, #1
 8014d62:	e000      	b.n	8014d66 <VerifyCmacB0+0x11e>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014d64:	230f      	movs	r3, #15
}
 8014d66:	0018      	movs	r0, r3
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	b049      	add	sp, #292	; 0x124
 8014d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d6e:	46c0      	nop			; (mov r8, r8)
 8014d70:	fffffee2 	.word	0xfffffee2
 8014d74:	fffffee1 	.word	0xfffffee1
 8014d78:	fffffee0 	.word	0xfffffee0

08014d7c <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	0002      	movs	r2, r0
 8014d84:	6039      	str	r1, [r7, #0]
 8014d86:	1dfb      	adds	r3, r7, #7
 8014d88:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014d8a:	230f      	movs	r3, #15
 8014d8c:	18fb      	adds	r3, r7, r3
 8014d8e:	2200      	movs	r2, #0
 8014d90:	701a      	strb	r2, [r3, #0]
 8014d92:	e018      	b.n	8014dc6 <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014d94:	210f      	movs	r1, #15
 8014d96:	187b      	adds	r3, r7, r1
 8014d98:	781a      	ldrb	r2, [r3, #0]
 8014d9a:	4b10      	ldr	r3, [pc, #64]	; (8014ddc <GetKeyAddrItem+0x60>)
 8014d9c:	0092      	lsls	r2, r2, #2
 8014d9e:	5cd3      	ldrb	r3, [r2, r3]
 8014da0:	1dfa      	adds	r2, r7, #7
 8014da2:	7812      	ldrb	r2, [r2, #0]
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d108      	bne.n	8014dba <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 8014da8:	187b      	adds	r3, r7, r1
 8014daa:	781b      	ldrb	r3, [r3, #0]
 8014dac:	009a      	lsls	r2, r3, #2
 8014dae:	4b0b      	ldr	r3, [pc, #44]	; (8014ddc <GetKeyAddrItem+0x60>)
 8014db0:	18d2      	adds	r2, r2, r3
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014db6:	2300      	movs	r3, #0
 8014db8:	e00b      	b.n	8014dd2 <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014dba:	210f      	movs	r1, #15
 8014dbc:	187b      	adds	r3, r7, r1
 8014dbe:	781a      	ldrb	r2, [r3, #0]
 8014dc0:	187b      	adds	r3, r7, r1
 8014dc2:	3201      	adds	r2, #1
 8014dc4:	701a      	strb	r2, [r3, #0]
 8014dc6:	230f      	movs	r3, #15
 8014dc8:	18fb      	adds	r3, r7, r3
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	d9e1      	bls.n	8014d94 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014dd0:	230c      	movs	r3, #12
}
 8014dd2:	0018      	movs	r0, r3
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	b004      	add	sp, #16
 8014dd8:	bd80      	pop	{r7, pc}
 8014dda:	46c0      	nop			; (mov r8, r8)
 8014ddc:	200001a4 	.word	0x200001a4

08014de0 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 8014de0:	b590      	push	{r4, r7, lr}
 8014de2:	b089      	sub	sp, #36	; 0x24
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	60b9      	str	r1, [r7, #8]
 8014de8:	607a      	str	r2, [r7, #4]
 8014dea:	603b      	str	r3, [r7, #0]
 8014dec:	230f      	movs	r3, #15
 8014dee:	18fb      	adds	r3, r7, r3
 8014df0:	1c02      	adds	r2, r0, #0
 8014df2:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d005      	beq.n	8014e06 <DeriveSessionKey10x+0x26>
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d002      	beq.n	8014e06 <DeriveSessionKey10x+0x26>
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d101      	bne.n	8014e0a <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e06:	230a      	movs	r3, #10
 8014e08:	e043      	b.n	8014e92 <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 8014e0a:	2310      	movs	r3, #16
 8014e0c:	18fb      	adds	r3, r7, r3
 8014e0e:	2200      	movs	r2, #0
 8014e10:	601a      	str	r2, [r3, #0]
 8014e12:	3304      	adds	r3, #4
 8014e14:	220c      	movs	r2, #12
 8014e16:	2100      	movs	r1, #0
 8014e18:	0018      	movs	r0, r3
 8014e1a:	f008 fa44 	bl	801d2a6 <memset>

    switch( keyID )
 8014e1e:	230f      	movs	r3, #15
 8014e20:	18fb      	adds	r3, r7, r3
 8014e22:	781b      	ldrb	r3, [r3, #0]
 8014e24:	2b02      	cmp	r3, #2
 8014e26:	d002      	beq.n	8014e2e <DeriveSessionKey10x+0x4e>
 8014e28:	2b03      	cmp	r3, #3
 8014e2a:	d005      	beq.n	8014e38 <DeriveSessionKey10x+0x58>
 8014e2c:	e009      	b.n	8014e42 <DeriveSessionKey10x+0x62>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8014e2e:	2310      	movs	r3, #16
 8014e30:	18fb      	adds	r3, r7, r3
 8014e32:	2201      	movs	r2, #1
 8014e34:	701a      	strb	r2, [r3, #0]
            break;
 8014e36:	e006      	b.n	8014e46 <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8014e38:	2310      	movs	r3, #16
 8014e3a:	18fb      	adds	r3, r7, r3
 8014e3c:	2202      	movs	r2, #2
 8014e3e:	701a      	strb	r2, [r3, #0]
            break;
 8014e40:	e001      	b.n	8014e46 <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014e42:	230b      	movs	r3, #11
 8014e44:	e025      	b.n	8014e92 <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8014e46:	2410      	movs	r4, #16
 8014e48:	193b      	adds	r3, r7, r4
 8014e4a:	3301      	adds	r3, #1
 8014e4c:	68b9      	ldr	r1, [r7, #8]
 8014e4e:	2203      	movs	r2, #3
 8014e50:	0018      	movs	r0, r3
 8014e52:	f003 fd5d 	bl	8018910 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8014e56:	193b      	adds	r3, r7, r4
 8014e58:	3304      	adds	r3, #4
 8014e5a:	6879      	ldr	r1, [r7, #4]
 8014e5c:	2203      	movs	r2, #3
 8014e5e:	0018      	movs	r0, r3
 8014e60:	f003 fd56 	bl	8018910 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8014e64:	193b      	adds	r3, r7, r4
 8014e66:	3307      	adds	r3, #7
 8014e68:	6839      	ldr	r1, [r7, #0]
 8014e6a:	2202      	movs	r2, #2
 8014e6c:	0018      	movs	r0, r3
 8014e6e:	f003 fd4f 	bl	8018910 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014e72:	4b0a      	ldr	r3, [pc, #40]	; (8014e9c <DeriveSessionKey10x+0xbc>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	220f      	movs	r2, #15
 8014e78:	18ba      	adds	r2, r7, r2
 8014e7a:	7812      	ldrb	r2, [r2, #0]
 8014e7c:	1939      	adds	r1, r7, r4
 8014e7e:	6818      	ldr	r0, [r3, #0]
 8014e80:	0013      	movs	r3, r2
 8014e82:	2201      	movs	r2, #1
 8014e84:	f7f8 f888 	bl	800cf98 <SecureElementDeriveAndStoreKey>
 8014e88:	1e03      	subs	r3, r0, #0
 8014e8a:	d001      	beq.n	8014e90 <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014e8c:	230f      	movs	r3, #15
 8014e8e:	e000      	b.n	8014e92 <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014e90:	2300      	movs	r3, #0
}
 8014e92:	0018      	movs	r0, r3
 8014e94:	46bd      	mov	sp, r7
 8014e96:	b009      	add	sp, #36	; 0x24
 8014e98:	bd90      	pop	{r4, r7, pc}
 8014e9a:	46c0      	nop			; (mov r8, r8)
 8014e9c:	200012cc 	.word	0x200012cc

08014ea0 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	0002      	movs	r2, r0
 8014ea8:	6039      	str	r1, [r7, #0]
 8014eaa:	1dfb      	adds	r3, r7, #7
 8014eac:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d101      	bne.n	8014eb8 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014eb4:	230a      	movs	r3, #10
 8014eb6:	e039      	b.n	8014f2c <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 8014eb8:	1dfb      	adds	r3, r7, #7
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	2b04      	cmp	r3, #4
 8014ebe:	d02c      	beq.n	8014f1a <GetLastFcntDown+0x7a>
 8014ec0:	dc31      	bgt.n	8014f26 <GetLastFcntDown+0x86>
 8014ec2:	2b03      	cmp	r3, #3
 8014ec4:	d01d      	beq.n	8014f02 <GetLastFcntDown+0x62>
 8014ec6:	dc2e      	bgt.n	8014f26 <GetLastFcntDown+0x86>
 8014ec8:	2b01      	cmp	r3, #1
 8014eca:	d002      	beq.n	8014ed2 <GetLastFcntDown+0x32>
 8014ecc:	2b02      	cmp	r3, #2
 8014ece:	d00c      	beq.n	8014eea <GetLastFcntDown+0x4a>
 8014ed0:	e029      	b.n	8014f26 <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8014ed2:	4b18      	ldr	r3, [pc, #96]	; (8014f34 <GetLastFcntDown+0x94>)
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	691a      	ldr	r2, [r3, #16]
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8014edc:	4b15      	ldr	r3, [pc, #84]	; (8014f34 <GetLastFcntDown+0x94>)
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	4b14      	ldr	r3, [pc, #80]	; (8014f34 <GetLastFcntDown+0x94>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	3210      	adds	r2, #16
 8014ee6:	621a      	str	r2, [r3, #32]
            break;
 8014ee8:	e01f      	b.n	8014f2a <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8014eea:	4b12      	ldr	r3, [pc, #72]	; (8014f34 <GetLastFcntDown+0x94>)
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	695a      	ldr	r2, [r3, #20]
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8014ef4:	4b0f      	ldr	r3, [pc, #60]	; (8014f34 <GetLastFcntDown+0x94>)
 8014ef6:	681a      	ldr	r2, [r3, #0]
 8014ef8:	4b0e      	ldr	r3, [pc, #56]	; (8014f34 <GetLastFcntDown+0x94>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	3214      	adds	r2, #20
 8014efe:	621a      	str	r2, [r3, #32]
            break;
 8014f00:	e013      	b.n	8014f2a <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8014f02:	4b0c      	ldr	r3, [pc, #48]	; (8014f34 <GetLastFcntDown+0x94>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	699a      	ldr	r2, [r3, #24]
 8014f08:	683b      	ldr	r3, [r7, #0]
 8014f0a:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8014f0c:	4b09      	ldr	r3, [pc, #36]	; (8014f34 <GetLastFcntDown+0x94>)
 8014f0e:	681a      	ldr	r2, [r3, #0]
 8014f10:	4b08      	ldr	r3, [pc, #32]	; (8014f34 <GetLastFcntDown+0x94>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	3218      	adds	r2, #24
 8014f16:	621a      	str	r2, [r3, #32]
            break;
 8014f18:	e007      	b.n	8014f2a <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8014f1a:	4b06      	ldr	r3, [pc, #24]	; (8014f34 <GetLastFcntDown+0x94>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	69da      	ldr	r2, [r3, #28]
 8014f20:	683b      	ldr	r3, [r7, #0]
 8014f22:	601a      	str	r2, [r3, #0]
            break;
 8014f24:	e001      	b.n	8014f2a <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014f26:	2305      	movs	r3, #5
 8014f28:	e000      	b.n	8014f2c <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014f2a:	2300      	movs	r3, #0
}
 8014f2c:	0018      	movs	r0, r3
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	b002      	add	sp, #8
 8014f32:	bd80      	pop	{r7, pc}
 8014f34:	200012cc 	.word	0x200012cc

08014f38 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b084      	sub	sp, #16
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	0002      	movs	r2, r0
 8014f40:	6039      	str	r1, [r7, #0]
 8014f42:	1dfb      	adds	r3, r7, #7
 8014f44:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8014f46:	2300      	movs	r3, #0
 8014f48:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014f4a:	230c      	movs	r3, #12
 8014f4c:	18fa      	adds	r2, r7, r3
 8014f4e:	1dfb      	adds	r3, r7, #7
 8014f50:	781b      	ldrb	r3, [r3, #0]
 8014f52:	0011      	movs	r1, r2
 8014f54:	0018      	movs	r0, r3
 8014f56:	f7ff ffa3 	bl	8014ea0 <GetLastFcntDown>
 8014f5a:	1e03      	subs	r3, r0, #0
 8014f5c:	d001      	beq.n	8014f62 <CheckFCntDown+0x2a>
    {
        return false;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	e009      	b.n	8014f76 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	683a      	ldr	r2, [r7, #0]
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d802      	bhi.n	8014f70 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8014f6a:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8014f6c:	3301      	adds	r3, #1
 8014f6e:	d101      	bne.n	8014f74 <CheckFCntDown+0x3c>
    {
        return true;
 8014f70:	2301      	movs	r3, #1
 8014f72:	e000      	b.n	8014f76 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014f74:	2300      	movs	r3, #0
    }
}
 8014f76:	0018      	movs	r0, r3
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	b004      	add	sp, #16
 8014f7c:	bd80      	pop	{r7, pc}
	...

08014f80 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b082      	sub	sp, #8
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	0002      	movs	r2, r0
 8014f88:	6039      	str	r1, [r7, #0]
 8014f8a:	1dfb      	adds	r3, r7, #7
 8014f8c:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8014f8e:	1dfb      	adds	r3, r7, #7
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	2b04      	cmp	r3, #4
 8014f94:	d017      	beq.n	8014fc6 <UpdateFCntDown+0x46>
 8014f96:	dc1b      	bgt.n	8014fd0 <UpdateFCntDown+0x50>
 8014f98:	2b03      	cmp	r3, #3
 8014f9a:	d00f      	beq.n	8014fbc <UpdateFCntDown+0x3c>
 8014f9c:	dc18      	bgt.n	8014fd0 <UpdateFCntDown+0x50>
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d002      	beq.n	8014fa8 <UpdateFCntDown+0x28>
 8014fa2:	2b02      	cmp	r3, #2
 8014fa4:	d005      	beq.n	8014fb2 <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 8014fa6:	e013      	b.n	8014fd0 <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8014fa8:	4b0d      	ldr	r3, [pc, #52]	; (8014fe0 <UpdateFCntDown+0x60>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	683a      	ldr	r2, [r7, #0]
 8014fae:	611a      	str	r2, [r3, #16]
            break;
 8014fb0:	e00f      	b.n	8014fd2 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 8014fb2:	4b0b      	ldr	r3, [pc, #44]	; (8014fe0 <UpdateFCntDown+0x60>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	683a      	ldr	r2, [r7, #0]
 8014fb8:	615a      	str	r2, [r3, #20]
            break;
 8014fba:	e00a      	b.n	8014fd2 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8014fbc:	4b08      	ldr	r3, [pc, #32]	; (8014fe0 <UpdateFCntDown+0x60>)
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	683a      	ldr	r2, [r7, #0]
 8014fc2:	619a      	str	r2, [r3, #24]
            break;
 8014fc4:	e005      	b.n	8014fd2 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8014fc6:	4b06      	ldr	r3, [pc, #24]	; (8014fe0 <UpdateFCntDown+0x60>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	683a      	ldr	r2, [r7, #0]
 8014fcc:	61da      	str	r2, [r3, #28]
            break;
 8014fce:	e000      	b.n	8014fd2 <UpdateFCntDown+0x52>
            break;
 8014fd0:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8014fd2:	4b03      	ldr	r3, [pc, #12]	; (8014fe0 <UpdateFCntDown+0x60>)
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	4798      	blx	r3
}
 8014fd8:	46c0      	nop			; (mov r8, r8)
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	b002      	add	sp, #8
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	200012cc 	.word	0x200012cc

08014fe4 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8014fe8:	4b11      	ldr	r3, [pc, #68]	; (8015030 <ResetFCnts+0x4c>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	2200      	movs	r2, #0
 8014fee:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014ff0:	4b0f      	ldr	r3, [pc, #60]	; (8015030 <ResetFCnts+0x4c>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2201      	movs	r2, #1
 8014ff6:	4252      	negs	r2, r2
 8014ff8:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014ffa:	4b0d      	ldr	r3, [pc, #52]	; (8015030 <ResetFCnts+0x4c>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	2201      	movs	r2, #1
 8015000:	4252      	negs	r2, r2
 8015002:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015004:	4b0a      	ldr	r3, [pc, #40]	; (8015030 <ResetFCnts+0x4c>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	2201      	movs	r2, #1
 801500a:	4252      	negs	r2, r2
 801500c:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 801500e:	4b08      	ldr	r3, [pc, #32]	; (8015030 <ResetFCnts+0x4c>)
 8015010:	681a      	ldr	r2, [r3, #0]
 8015012:	4b07      	ldr	r3, [pc, #28]	; (8015030 <ResetFCnts+0x4c>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	3218      	adds	r2, #24
 8015018:	621a      	str	r2, [r3, #32]

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 801501a:	4b05      	ldr	r3, [pc, #20]	; (8015030 <ResetFCnts+0x4c>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	2201      	movs	r2, #1
 8015020:	4252      	negs	r2, r2
 8015022:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015024:	4b02      	ldr	r3, [pc, #8]	; (8015030 <ResetFCnts+0x4c>)
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	4798      	blx	r3
}
 801502a:	46c0      	nop			; (mov r8, r8)
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}
 8015030:	200012cc 	.word	0x200012cc

08015034 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8015034:	b580      	push	{r7, lr}
 8015036:	af00      	add	r7, sp, #0
    return;
 8015038:	46c0      	nop			; (mov r8, r8)
}
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}
	...

08015040 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8015048:	4b15      	ldr	r3, [pc, #84]	; (80150a0 <LoRaMacCryptoInit+0x60>)
 801504a:	4a16      	ldr	r2, [pc, #88]	; (80150a4 <LoRaMacCryptoInit+0x64>)
 801504c:	601a      	str	r2, [r3, #0]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d003      	beq.n	801505c <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8015054:	4b12      	ldr	r3, [pc, #72]	; (80150a0 <LoRaMacCryptoInit+0x60>)
 8015056:	687a      	ldr	r2, [r7, #4]
 8015058:	605a      	str	r2, [r3, #4]
 801505a:	e002      	b.n	8015062 <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 801505c:	4b10      	ldr	r3, [pc, #64]	; (80150a0 <LoRaMacCryptoInit+0x60>)
 801505e:	4a12      	ldr	r2, [pc, #72]	; (80150a8 <LoRaMacCryptoInit+0x68>)
 8015060:	605a      	str	r2, [r3, #4]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8015062:	4b0f      	ldr	r3, [pc, #60]	; (80150a0 <LoRaMacCryptoInit+0x60>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	2224      	movs	r2, #36	; 0x24
 8015068:	2100      	movs	r1, #0
 801506a:	0018      	movs	r0, r3
 801506c:	f003 fc8e 	bl	801898c <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 8015070:	4b0b      	ldr	r3, [pc, #44]	; (80150a0 <LoRaMacCryptoInit+0x60>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	2201      	movs	r2, #1
 8015076:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8015078:	4b09      	ldr	r3, [pc, #36]	; (80150a0 <LoRaMacCryptoInit+0x60>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2201      	movs	r2, #1
 801507e:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 8015080:	4b07      	ldr	r3, [pc, #28]	; (80150a0 <LoRaMacCryptoInit+0x60>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	2201      	movs	r2, #1
 8015086:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 8015088:	4b05      	ldr	r3, [pc, #20]	; (80150a0 <LoRaMacCryptoInit+0x60>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	2200      	movs	r2, #0
 801508e:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8015090:	f7ff ffa8 	bl	8014fe4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015094:	2300      	movs	r3, #0
}
 8015096:	0018      	movs	r0, r3
 8015098:	46bd      	mov	sp, r7
 801509a:	b002      	add	sp, #8
 801509c:	bd80      	pop	{r7, pc}
 801509e:	46c0      	nop			; (mov r8, r8)
 80150a0:	200012cc 	.word	0x200012cc
 80150a4:	200012d4 	.word	0x200012d4
 80150a8:	08015035 	.word	0x08015035

080150ac <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b082      	sub	sp, #8
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 80150b4:	4b04      	ldr	r3, [pc, #16]	; (80150c8 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	687a      	ldr	r2, [r7, #4]
 80150ba:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80150bc:	2300      	movs	r3, #0
}
 80150be:	0018      	movs	r0, r3
 80150c0:	46bd      	mov	sp, r7
 80150c2:	b002      	add	sp, #8
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	46c0      	nop			; (mov r8, r8)
 80150c8:	200012cc 	.word	0x200012cc

080150cc <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d007      	beq.n	80150ea <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 80150da:	6879      	ldr	r1, [r7, #4]
 80150dc:	4b05      	ldr	r3, [pc, #20]	; (80150f4 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 80150de:	2224      	movs	r2, #36	; 0x24
 80150e0:	0018      	movs	r0, r3
 80150e2:	f003 fc15 	bl	8018910 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 80150e6:	2300      	movs	r3, #0
 80150e8:	e000      	b.n	80150ec <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80150ea:	230a      	movs	r3, #10
    }
}
 80150ec:	0018      	movs	r0, r3
 80150ee:	46bd      	mov	sp, r7
 80150f0:	b002      	add	sp, #8
 80150f2:	bd80      	pop	{r7, pc}
 80150f4:	200012d4 	.word	0x200012d4

080150f8 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2224      	movs	r2, #36	; 0x24
 8015104:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8015106:	4b02      	ldr	r3, [pc, #8]	; (8015110 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8015108:	0018      	movs	r0, r3
 801510a:	46bd      	mov	sp, r7
 801510c:	b002      	add	sp, #8
 801510e:	bd80      	pop	{r7, pc}
 8015110:	200012d4 	.word	0x200012d4

08015114 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b082      	sub	sp, #8
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d101      	bne.n	8015126 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015122:	230a      	movs	r3, #10
 8015124:	e006      	b.n	8015134 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8015126:	4b05      	ldr	r3, [pc, #20]	; (801513c <LoRaMacCryptoGetFCntUp+0x28>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	68db      	ldr	r3, [r3, #12]
 801512c:	1c5a      	adds	r2, r3, #1
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015132:	2300      	movs	r3, #0
}
 8015134:	0018      	movs	r0, r3
 8015136:	46bd      	mov	sp, r7
 8015138:	b002      	add	sp, #8
 801513a:	bd80      	pop	{r7, pc}
 801513c:	200012cc 	.word	0x200012cc

08015140 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015142:	b08d      	sub	sp, #52	; 0x34
 8015144:	af00      	add	r7, sp, #0
 8015146:	61ba      	str	r2, [r7, #24]
 8015148:	617b      	str	r3, [r7, #20]
 801514a:	230f      	movs	r3, #15
 801514c:	2610      	movs	r6, #16
 801514e:	199b      	adds	r3, r3, r6
 8015150:	19db      	adds	r3, r3, r7
 8015152:	1c02      	adds	r2, r0, #0
 8015154:	701a      	strb	r2, [r3, #0]
 8015156:	230c      	movs	r3, #12
 8015158:	0030      	movs	r0, r6
 801515a:	181b      	adds	r3, r3, r0
 801515c:	19db      	adds	r3, r3, r7
 801515e:	1c0a      	adds	r2, r1, #0
 8015160:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015162:	2300      	movs	r3, #0
 8015164:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 8015166:	2300      	movs	r3, #0
 8015168:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801516a:	231b      	movs	r3, #27
 801516c:	181b      	adds	r3, r3, r0
 801516e:	19db      	adds	r3, r3, r7
 8015170:	2213      	movs	r2, #19
 8015172:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 8015174:	697b      	ldr	r3, [r7, #20]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d101      	bne.n	801517e <LoRaMacCryptoGetFCntDown+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801517a:	230a      	movs	r3, #10
 801517c:	e068      	b.n	8015250 <LoRaMacCryptoGetFCntDown+0x110>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801517e:	221b      	movs	r2, #27
 8015180:	2110      	movs	r1, #16
 8015182:	1853      	adds	r3, r2, r1
 8015184:	19de      	adds	r6, r3, r7
 8015186:	2314      	movs	r3, #20
 8015188:	185b      	adds	r3, r3, r1
 801518a:	19da      	adds	r2, r3, r7
 801518c:	230f      	movs	r3, #15
 801518e:	185b      	adds	r3, r3, r1
 8015190:	19db      	adds	r3, r3, r7
 8015192:	781b      	ldrb	r3, [r3, #0]
 8015194:	0011      	movs	r1, r2
 8015196:	0018      	movs	r0, r3
 8015198:	f7ff fe82 	bl	8014ea0 <GetLastFcntDown>
 801519c:	0003      	movs	r3, r0
 801519e:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80151a0:	221b      	movs	r2, #27
 80151a2:	2110      	movs	r1, #16
 80151a4:	1853      	adds	r3, r2, r1
 80151a6:	19db      	adds	r3, r3, r7
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d003      	beq.n	80151b6 <LoRaMacCryptoGetFCntDown+0x76>
    {
        return cryptoStatus;
 80151ae:	1853      	adds	r3, r2, r1
 80151b0:	19db      	adds	r3, r3, r7
 80151b2:	781b      	ldrb	r3, [r3, #0]
 80151b4:	e04c      	b.n	8015250 <LoRaMacCryptoGetFCntDown+0x110>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80151b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b8:	3301      	adds	r3, #1
 80151ba:	d103      	bne.n	80151c4 <LoRaMacCryptoGetFCntDown+0x84>
    {
        *currentDown = frameFcnt;
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	69ba      	ldr	r2, [r7, #24]
 80151c0:	601a      	str	r2, [r3, #0]
 80151c2:	e020      	b.n	8015206 <LoRaMacCryptoGetFCntDown+0xc6>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80151c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c6:	041b      	lsls	r3, r3, #16
 80151c8:	0c1b      	lsrs	r3, r3, #16
 80151ca:	69ba      	ldr	r2, [r7, #24]
 80151cc:	1ad3      	subs	r3, r2, r3
 80151ce:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 80151d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	dd05      	ble.n	80151e2 <LoRaMacCryptoGetFCntDown+0xa2>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80151d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151da:	18d2      	adds	r2, r2, r3
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	601a      	str	r2, [r3, #0]
 80151e0:	e011      	b.n	8015206 <LoRaMacCryptoGetFCntDown+0xc6>
        }
        else if( fCntDiff == 0 )
 80151e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d104      	bne.n	80151f2 <LoRaMacCryptoGetFCntDown+0xb2>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80151e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80151ee:	2307      	movs	r3, #7
 80151f0:	e02e      	b.n	8015250 <LoRaMacCryptoGetFCntDown+0x110>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80151f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f4:	0c1b      	lsrs	r3, r3, #16
 80151f6:	041a      	lsls	r2, r3, #16
 80151f8:	69bb      	ldr	r3, [r7, #24]
 80151fa:	18d3      	adds	r3, r2, r3
 80151fc:	2280      	movs	r2, #128	; 0x80
 80151fe:	0252      	lsls	r2, r2, #9
 8015200:	189a      	adds	r2, r3, r2
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015206:	4b14      	ldr	r3, [pc, #80]	; (8015258 <LoRaMacCryptoGetFCntDown+0x118>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	789b      	ldrb	r3, [r3, #2]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d11e      	bne.n	801524e <LoRaMacCryptoGetFCntDown+0x10e>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8015210:	697b      	ldr	r3, [r7, #20]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	60bb      	str	r3, [r7, #8]
 8015216:	2300      	movs	r3, #0
 8015218:	60fb      	str	r3, [r7, #12]
 801521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801521c:	603b      	str	r3, [r7, #0]
 801521e:	2300      	movs	r3, #0
 8015220:	607b      	str	r3, [r7, #4]
 8015222:	68ba      	ldr	r2, [r7, #8]
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	6838      	ldr	r0, [r7, #0]
 8015228:	6879      	ldr	r1, [r7, #4]
 801522a:	1a12      	subs	r2, r2, r0
 801522c:	418b      	sbcs	r3, r1
 801522e:	210c      	movs	r1, #12
 8015230:	2010      	movs	r0, #16
 8015232:	1809      	adds	r1, r1, r0
 8015234:	19c9      	adds	r1, r1, r7
 8015236:	8809      	ldrh	r1, [r1, #0]
 8015238:	b289      	uxth	r1, r1
 801523a:	000c      	movs	r4, r1
 801523c:	2100      	movs	r1, #0
 801523e:	000d      	movs	r5, r1
 8015240:	429d      	cmp	r5, r3
 8015242:	dc04      	bgt.n	801524e <LoRaMacCryptoGetFCntDown+0x10e>
 8015244:	d101      	bne.n	801524a <LoRaMacCryptoGetFCntDown+0x10a>
 8015246:	4294      	cmp	r4, r2
 8015248:	d801      	bhi.n	801524e <LoRaMacCryptoGetFCntDown+0x10e>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801524a:	2308      	movs	r3, #8
 801524c:	e000      	b.n	8015250 <LoRaMacCryptoGetFCntDown+0x110>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801524e:	2300      	movs	r3, #0
}
 8015250:	0018      	movs	r0, r3
 8015252:	46bd      	mov	sp, r7
 8015254:	b00d      	add	sp, #52	; 0x34
 8015256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015258:	200012cc 	.word	0x200012cc

0801525c <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b082      	sub	sp, #8
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d101      	bne.n	801526e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801526a:	230a      	movs	r3, #10
 801526c:	e006      	b.n	801527c <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 801526e:	4b05      	ldr	r3, [pc, #20]	; (8015284 <LoRaMacCryptoSetMulticastReference+0x28>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	331c      	adds	r3, #28
 8015274:	001a      	movs	r2, r3
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 801527a:	2300      	movs	r3, #0
}
 801527c:	0018      	movs	r0, r3
 801527e:	46bd      	mov	sp, r7
 8015280:	b002      	add	sp, #8
 8015282:	bd80      	pop	{r7, pc}
 8015284:	200012cc 	.word	0x200012cc

08015288 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	0002      	movs	r2, r0
 8015290:	6039      	str	r1, [r7, #0]
 8015292:	1dfb      	adds	r3, r7, #7
 8015294:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015296:	683a      	ldr	r2, [r7, #0]
 8015298:	1dfb      	adds	r3, r7, #7
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	0011      	movs	r1, r2
 801529e:	0018      	movs	r0, r3
 80152a0:	f7f7 fd2c 	bl	800ccfc <SecureElementSetKey>
 80152a4:	1e03      	subs	r3, r0, #0
 80152a6:	d001      	beq.n	80152ac <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80152a8:	230f      	movs	r3, #15
 80152aa:	e014      	b.n	80152d6 <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 80152ac:	1dfb      	adds	r3, r7, #7
 80152ae:	781b      	ldrb	r3, [r3, #0]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d10f      	bne.n	80152d4 <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80152b4:	1dfb      	adds	r3, r7, #7
 80152b6:	781b      	ldrb	r3, [r3, #0]
 80152b8:	0018      	movs	r0, r3
 80152ba:	f000 fa79 	bl	80157b0 <LoRaMacCryptoDeriveMcRootKey>
 80152be:	1e03      	subs	r3, r0, #0
 80152c0:	d001      	beq.n	80152c6 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80152c2:	230f      	movs	r3, #15
 80152c4:	e007      	b.n	80152d6 <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80152c6:	2004      	movs	r0, #4
 80152c8:	f000 faa6 	bl	8015818 <LoRaMacCryptoDeriveMcKEKey>
 80152cc:	1e03      	subs	r3, r0, #0
 80152ce:	d001      	beq.n	80152d4 <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80152d0:	230f      	movs	r3, #15
 80152d2:	e000      	b.n	80152d6 <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80152d4:	2300      	movs	r3, #0
}
 80152d6:	0018      	movs	r0, r3
 80152d8:	46bd      	mov	sp, r7
 80152da:	b002      	add	sp, #8
 80152dc:	bd80      	pop	{r7, pc}
	...

080152e0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b086      	sub	sp, #24
 80152e4:	af02      	add	r7, sp, #8
 80152e6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d101      	bne.n	80152f2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80152ee:	230a      	movs	r3, #10
 80152f0:	e039      	b.n	8015366 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80152f2:	230f      	movs	r3, #15
 80152f4:	18fb      	adds	r3, r7, r3
 80152f6:	2201      	movs	r2, #1
 80152f8:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80152fa:	2300      	movs	r3, #0
 80152fc:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80152fe:	2308      	movs	r3, #8
 8015300:	18fb      	adds	r3, r7, r3
 8015302:	0018      	movs	r0, r3
 8015304:	f7f7 ff24 	bl	800d150 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8015308:	68ba      	ldr	r2, [r7, #8]
 801530a:	4b19      	ldr	r3, [pc, #100]	; (8015370 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	b292      	uxth	r2, r2
 8015310:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015312:	4b17      	ldr	r3, [pc, #92]	; (8015370 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8015318:	4b15      	ldr	r3, [pc, #84]	; (8015370 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	889a      	ldrh	r2, [r3, #4]
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	0018      	movs	r0, r3
 8015326:	f000 fca1 	bl	8015c6c <LoRaMacSerializerJoinRequest>
 801532a:	1e03      	subs	r3, r0, #0
 801532c:	d001      	beq.n	8015332 <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801532e:	2311      	movs	r3, #17
 8015330:	e019      	b.n	8015366 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	6819      	ldr	r1, [r3, #0]
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	3318      	adds	r3, #24
 801533a:	220f      	movs	r2, #15
 801533c:	18ba      	adds	r2, r7, r2
 801533e:	7812      	ldrb	r2, [r2, #0]
 8015340:	9300      	str	r3, [sp, #0]
 8015342:	0013      	movs	r3, r2
 8015344:	2213      	movs	r2, #19
 8015346:	2000      	movs	r0, #0
 8015348:	f7f7 fd52 	bl	800cdf0 <SecureElementComputeAesCmac>
 801534c:	1e03      	subs	r3, r0, #0
 801534e:	d001      	beq.n	8015354 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015350:	230f      	movs	r3, #15
 8015352:	e008      	b.n	8015366 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	0018      	movs	r0, r3
 8015358:	f000 fc88 	bl	8015c6c <LoRaMacSerializerJoinRequest>
 801535c:	1e03      	subs	r3, r0, #0
 801535e:	d001      	beq.n	8015364 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015360:	2311      	movs	r3, #17
 8015362:	e000      	b.n	8015366 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015364:	2300      	movs	r3, #0
}
 8015366:	0018      	movs	r0, r3
 8015368:	46bd      	mov	sp, r7
 801536a:	b004      	add	sp, #16
 801536c:	bd80      	pop	{r7, pc}
 801536e:	46c0      	nop			; (mov r8, r8)
 8015370:	200012cc 	.word	0x200012cc

08015374 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015376:	b095      	sub	sp, #84	; 0x54
 8015378:	af04      	add	r7, sp, #16
 801537a:	60b9      	str	r1, [r7, #8]
 801537c:	607a      	str	r2, [r7, #4]
 801537e:	230f      	movs	r3, #15
 8015380:	18fb      	adds	r3, r7, r3
 8015382:	1c02      	adds	r2, r0, #0
 8015384:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d002      	beq.n	8015392 <LoRaMacCryptoHandleJoinAccept+0x1e>
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d101      	bne.n	8015396 <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015392:	230a      	movs	r3, #10
 8015394:	e0a7      	b.n	80154e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015396:	233f      	movs	r3, #63	; 0x3f
 8015398:	18fb      	adds	r3, r7, r3
 801539a:	2213      	movs	r2, #19
 801539c:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801539e:	2614      	movs	r6, #20
 80153a0:	19bb      	adds	r3, r7, r6
 80153a2:	2200      	movs	r2, #0
 80153a4:	601a      	str	r2, [r3, #0]
 80153a6:	3304      	adds	r3, #4
 80153a8:	221d      	movs	r2, #29
 80153aa:	2100      	movs	r1, #0
 80153ac:	0018      	movs	r0, r3
 80153ae:	f007 ff7a 	bl	801d2a6 <memset>
    uint8_t versionMinor         = 0;
 80153b2:	2313      	movs	r3, #19
 80153b4:	18fb      	adds	r3, r7, r3
 80153b6:	2200      	movs	r2, #0
 80153b8:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 80153ba:	4b4d      	ldr	r3, [pc, #308]	; (80154f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	3304      	adds	r3, #4
 80153c0:	63bb      	str	r3, [r7, #56]	; 0x38
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 80153c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153c4:	781b      	ldrb	r3, [r3, #0]
 80153c6:	b29c      	uxth	r4, r3
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	681d      	ldr	r5, [r3, #0]
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	791b      	ldrb	r3, [r3, #4]
 80153d0:	68b9      	ldr	r1, [r7, #8]
 80153d2:	200f      	movs	r0, #15
 80153d4:	183a      	adds	r2, r7, r0
 80153d6:	7810      	ldrb	r0, [r2, #0]
 80153d8:	2213      	movs	r2, #19
 80153da:	18ba      	adds	r2, r7, r2
 80153dc:	9202      	str	r2, [sp, #8]
 80153de:	19ba      	adds	r2, r7, r6
 80153e0:	9201      	str	r2, [sp, #4]
 80153e2:	9300      	str	r3, [sp, #0]
 80153e4:	002b      	movs	r3, r5
 80153e6:	0022      	movs	r2, r4
 80153e8:	f7f7 fe2b 	bl	800d042 <SecureElementProcessJoinAccept>
 80153ec:	1e03      	subs	r3, r0, #0
 80153ee:	d001      	beq.n	80153f4 <LoRaMacCryptoHandleJoinAccept+0x80>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80153f0:	230f      	movs	r3, #15
 80153f2:	e078      	b.n	80154e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	6818      	ldr	r0, [r3, #0]
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	791b      	ldrb	r3, [r3, #4]
 80153fc:	b29a      	uxth	r2, r3
 80153fe:	2314      	movs	r3, #20
 8015400:	18fb      	adds	r3, r7, r3
 8015402:	0019      	movs	r1, r3
 8015404:	f003 fa84 	bl	8018910 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	0018      	movs	r0, r3
 801540c:	f000 fa2e 	bl	801586c <LoRaMacParserJoinAccept>
 8015410:	1e03      	subs	r3, r0, #0
 8015412:	d001      	beq.n	8015418 <LoRaMacCryptoHandleJoinAccept+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015414:	2310      	movs	r3, #16
 8015416:	e066      	b.n	80154e6 <LoRaMacCryptoHandleJoinAccept+0x172>
            return retval;
        }
    }
#else
    // Operating in LoRaWAN 1.0.x mode
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 8015418:	253f      	movs	r5, #63	; 0x3f
 801541a:	197c      	adds	r4, r7, r5
 801541c:	2000      	movs	r0, #0
 801541e:	f000 f9c7 	bl	80157b0 <LoRaMacCryptoDeriveMcRootKey>
 8015422:	0003      	movs	r3, r0
 8015424:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015426:	002a      	movs	r2, r5
 8015428:	18bb      	adds	r3, r7, r2
 801542a:	781b      	ldrb	r3, [r3, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d002      	beq.n	8015436 <LoRaMacCryptoHandleJoinAccept+0xc2>
    {
        return retval;
 8015430:	18bb      	adds	r3, r7, r2
 8015432:	781b      	ldrb	r3, [r3, #0]
 8015434:	e057      	b.n	80154e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8015436:	253f      	movs	r5, #63	; 0x3f
 8015438:	197c      	adds	r4, r7, r5
 801543a:	2004      	movs	r0, #4
 801543c:	f000 f9ec 	bl	8015818 <LoRaMacCryptoDeriveMcKEKey>
 8015440:	0003      	movs	r3, r0
 8015442:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015444:	002a      	movs	r2, r5
 8015446:	18bb      	adds	r3, r7, r2
 8015448:	781b      	ldrb	r3, [r3, #0]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d002      	beq.n	8015454 <LoRaMacCryptoHandleJoinAccept+0xe0>
    {
        return retval;
 801544e:	18bb      	adds	r3, r7, r2
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	e048      	b.n	80154e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	1d99      	adds	r1, r3, #6
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	3309      	adds	r3, #9
 801545c:	001a      	movs	r2, r3
 801545e:	4b24      	ldr	r3, [pc, #144]	; (80154f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	3304      	adds	r3, #4
 8015464:	253f      	movs	r5, #63	; 0x3f
 8015466:	197c      	adds	r4, r7, r5
 8015468:	2003      	movs	r0, #3
 801546a:	f7ff fcb9 	bl	8014de0 <DeriveSessionKey10x>
 801546e:	0003      	movs	r3, r0
 8015470:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015472:	197b      	adds	r3, r7, r5
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d002      	beq.n	8015480 <LoRaMacCryptoHandleJoinAccept+0x10c>
    {
        return retval;
 801547a:	197b      	adds	r3, r7, r5
 801547c:	781b      	ldrb	r3, [r3, #0]
 801547e:	e032      	b.n	80154e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	1d99      	adds	r1, r3, #6
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	3309      	adds	r3, #9
 8015488:	001a      	movs	r2, r3
 801548a:	4b19      	ldr	r3, [pc, #100]	; (80154f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	3304      	adds	r3, #4
 8015490:	253f      	movs	r5, #63	; 0x3f
 8015492:	197c      	adds	r4, r7, r5
 8015494:	2002      	movs	r0, #2
 8015496:	f7ff fca3 	bl	8014de0 <DeriveSessionKey10x>
 801549a:	0003      	movs	r3, r0
 801549c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801549e:	197b      	adds	r3, r7, r5
 80154a0:	781b      	ldrb	r3, [r3, #0]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d002      	beq.n	80154ac <LoRaMacCryptoHandleJoinAccept+0x138>
    {
        return retval;
 80154a6:	197b      	adds	r3, r7, r5
 80154a8:	781b      	ldrb	r3, [r3, #0]
 80154aa:	e01c      	b.n	80154e6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 80154ac:	4b10      	ldr	r3, [pc, #64]	; (80154f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	2213      	movs	r2, #19
 80154b2:	18ba      	adds	r2, r7, r2
 80154b4:	7812      	ldrb	r2, [r2, #0]
 80154b6:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 80154b8:	4b0d      	ldr	r3, [pc, #52]	; (80154f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	2200      	movs	r2, #0
 80154be:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80154c0:	4b0b      	ldr	r3, [pc, #44]	; (80154f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	2201      	movs	r2, #1
 80154c6:	4252      	negs	r2, r2
 80154c8:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80154ca:	4b09      	ldr	r3, [pc, #36]	; (80154f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	2201      	movs	r2, #1
 80154d0:	4252      	negs	r2, r2
 80154d2:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80154d4:	4b06      	ldr	r3, [pc, #24]	; (80154f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	2201      	movs	r2, #1
 80154da:	4252      	negs	r2, r2
 80154dc:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 80154de:	4b04      	ldr	r3, [pc, #16]	; (80154f0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80154e0:	685b      	ldr	r3, [r3, #4]
 80154e2:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 80154e4:	2300      	movs	r3, #0
}
 80154e6:	0018      	movs	r0, r3
 80154e8:	46bd      	mov	sp, r7
 80154ea:	b011      	add	sp, #68	; 0x44
 80154ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154ee:	46c0      	nop			; (mov r8, r8)
 80154f0:	200012cc 	.word	0x200012cc

080154f4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80154f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154f6:	b08b      	sub	sp, #44	; 0x2c
 80154f8:	af04      	add	r7, sp, #16
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	0008      	movs	r0, r1
 80154fe:	0011      	movs	r1, r2
 8015500:	607b      	str	r3, [r7, #4]
 8015502:	230b      	movs	r3, #11
 8015504:	18fb      	adds	r3, r7, r3
 8015506:	1c02      	adds	r2, r0, #0
 8015508:	701a      	strb	r2, [r3, #0]
 801550a:	230a      	movs	r3, #10
 801550c:	18fb      	adds	r3, r7, r3
 801550e:	1c0a      	adds	r2, r1, #0
 8015510:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015512:	2316      	movs	r3, #22
 8015514:	18fb      	adds	r3, r7, r3
 8015516:	2213      	movs	r2, #19
 8015518:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801551a:	2317      	movs	r3, #23
 801551c:	18fb      	adds	r3, r7, r3
 801551e:	2203      	movs	r2, #3
 8015520:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d101      	bne.n	801552c <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015528:	230a      	movs	r3, #10
 801552a:	e072      	b.n	8015612 <LoRaMacCryptoSecureMessage+0x11e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 801552c:	4b3b      	ldr	r3, [pc, #236]	; (801561c <LoRaMacCryptoSecureMessage+0x128>)
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	68db      	ldr	r3, [r3, #12]
 8015532:	68fa      	ldr	r2, [r7, #12]
 8015534:	429a      	cmp	r2, r3
 8015536:	d201      	bcs.n	801553c <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015538:	2306      	movs	r3, #6
 801553a:	e06a      	b.n	8015612 <LoRaMacCryptoSecureMessage+0x11e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	2220      	movs	r2, #32
 8015540:	5c9b      	ldrb	r3, [r3, r2]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d103      	bne.n	801554e <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015546:	2317      	movs	r3, #23
 8015548:	18fb      	adds	r3, r7, r3
 801554a:	2202      	movs	r2, #2
 801554c:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 801554e:	4b33      	ldr	r3, [pc, #204]	; (801561c <LoRaMacCryptoSecureMessage+0x128>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	68db      	ldr	r3, [r3, #12]
 8015554:	68fa      	ldr	r2, [r7, #12]
 8015556:	429a      	cmp	r2, r3
 8015558:	d91c      	bls.n	8015594 <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2228      	movs	r2, #40	; 0x28
 8015562:	5c9b      	ldrb	r3, [r3, r2]
 8015564:	b219      	sxth	r1, r3
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	689d      	ldr	r5, [r3, #8]
 801556a:	2616      	movs	r6, #22
 801556c:	19bc      	adds	r4, r7, r6
 801556e:	2317      	movs	r3, #23
 8015570:	18fb      	adds	r3, r7, r3
 8015572:	781a      	ldrb	r2, [r3, #0]
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	9301      	str	r3, [sp, #4]
 8015578:	2300      	movs	r3, #0
 801557a:	9300      	str	r3, [sp, #0]
 801557c:	002b      	movs	r3, r5
 801557e:	f7ff f9e9 	bl	8014954 <PayloadEncrypt>
 8015582:	0003      	movs	r3, r0
 8015584:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015586:	19bb      	adds	r3, r7, r6
 8015588:	781b      	ldrb	r3, [r3, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d002      	beq.n	8015594 <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 801558e:	19bb      	adds	r3, r7, r6
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	e03e      	b.n	8015612 <LoRaMacCryptoSecureMessage+0x11e>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	0018      	movs	r0, r3
 8015598:	f000 fc03 	bl	8015da2 <LoRaMacSerializerData>
 801559c:	1e03      	subs	r3, r0, #0
 801559e:	d001      	beq.n	80155a4 <LoRaMacCryptoSecureMessage+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80155a0:	2311      	movs	r3, #17
 80155a2:	e036      	b.n	8015612 <LoRaMacCryptoSecureMessage+0x11e>
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80155a4:	2117      	movs	r1, #23
 80155a6:	187b      	adds	r3, r7, r1
 80155a8:	2202      	movs	r2, #2
 80155aa:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6818      	ldr	r0, [r3, #0]
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	791b      	ldrb	r3, [r3, #4]
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	3b04      	subs	r3, #4
 80155b8:	b29d      	uxth	r5, r3
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	689b      	ldr	r3, [r3, #8]
 80155be:	687a      	ldr	r2, [r7, #4]
 80155c0:	322c      	adds	r2, #44	; 0x2c
 80155c2:	2616      	movs	r6, #22
 80155c4:	19bc      	adds	r4, r7, r6
 80155c6:	1879      	adds	r1, r7, r1
 80155c8:	7809      	ldrb	r1, [r1, #0]
 80155ca:	9203      	str	r2, [sp, #12]
 80155cc:	68fa      	ldr	r2, [r7, #12]
 80155ce:	9202      	str	r2, [sp, #8]
 80155d0:	9301      	str	r3, [sp, #4]
 80155d2:	2300      	movs	r3, #0
 80155d4:	9300      	str	r3, [sp, #0]
 80155d6:	2300      	movs	r3, #0
 80155d8:	000a      	movs	r2, r1
 80155da:	0029      	movs	r1, r5
 80155dc:	f7ff faed 	bl	8014bba <ComputeCmacB0>
 80155e0:	0003      	movs	r3, r0
 80155e2:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80155e4:	19bb      	adds	r3, r7, r6
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d002      	beq.n	80155f2 <LoRaMacCryptoSecureMessage+0xfe>
        {
            return retval;
 80155ec:	19bb      	adds	r3, r7, r6
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	e00f      	b.n	8015612 <LoRaMacCryptoSecureMessage+0x11e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	0018      	movs	r0, r3
 80155f6:	f000 fbd4 	bl	8015da2 <LoRaMacSerializerData>
 80155fa:	1e03      	subs	r3, r0, #0
 80155fc:	d001      	beq.n	8015602 <LoRaMacCryptoSecureMessage+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80155fe:	2311      	movs	r3, #17
 8015600:	e007      	b.n	8015612 <LoRaMacCryptoSecureMessage+0x11e>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8015602:	4b06      	ldr	r3, [pc, #24]	; (801561c <LoRaMacCryptoSecureMessage+0x128>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	68fa      	ldr	r2, [r7, #12]
 8015608:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801560a:	4b04      	ldr	r3, [pc, #16]	; (801561c <LoRaMacCryptoSecureMessage+0x128>)
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8015610:	2300      	movs	r3, #0
}
 8015612:	0018      	movs	r0, r3
 8015614:	46bd      	mov	sp, r7
 8015616:	b007      	add	sp, #28
 8015618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801561a:	46c0      	nop			; (mov r8, r8)
 801561c:	200012cc 	.word	0x200012cc

08015620 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015622:	b08b      	sub	sp, #44	; 0x2c
 8015624:	af04      	add	r7, sp, #16
 8015626:	60b9      	str	r1, [r7, #8]
 8015628:	0011      	movs	r1, r2
 801562a:	607b      	str	r3, [r7, #4]
 801562c:	230f      	movs	r3, #15
 801562e:	18fb      	adds	r3, r7, r3
 8015630:	1c02      	adds	r2, r0, #0
 8015632:	701a      	strb	r2, [r3, #0]
 8015634:	230e      	movs	r3, #14
 8015636:	18fb      	adds	r3, r7, r3
 8015638:	1c0a      	adds	r2, r1, #0
 801563a:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 801563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801563e:	2b00      	cmp	r3, #0
 8015640:	d101      	bne.n	8015646 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015642:	230a      	movs	r3, #10
 8015644:	e0ae      	b.n	80157a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8015646:	687a      	ldr	r2, [r7, #4]
 8015648:	230e      	movs	r3, #14
 801564a:	18fb      	adds	r3, r7, r3
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	0011      	movs	r1, r2
 8015650:	0018      	movs	r0, r3
 8015652:	f7ff fc71 	bl	8014f38 <CheckFCntDown>
 8015656:	0003      	movs	r3, r0
 8015658:	001a      	movs	r2, r3
 801565a:	2301      	movs	r3, #1
 801565c:	4053      	eors	r3, r2
 801565e:	b2db      	uxtb	r3, r3
 8015660:	2b00      	cmp	r3, #0
 8015662:	d001      	beq.n	8015668 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015664:	2306      	movs	r3, #6
 8015666:	e09d      	b.n	80157a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015668:	2315      	movs	r3, #21
 801566a:	18fb      	adds	r3, r7, r3
 801566c:	2213      	movs	r2, #19
 801566e:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015670:	2317      	movs	r3, #23
 8015672:	18fb      	adds	r3, r7, r3
 8015674:	2203      	movs	r2, #3
 8015676:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8015678:	2314      	movs	r3, #20
 801567a:	18fb      	adds	r3, r7, r3
 801567c:	2202      	movs	r2, #2
 801567e:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015682:	0018      	movs	r0, r3
 8015684:	f000 f9e2 	bl	8015a4c <LoRaMacParserData>
 8015688:	1e03      	subs	r3, r0, #0
 801568a:	d001      	beq.n	8015690 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801568c:	2310      	movs	r3, #16
 801568e:	e089      	b.n	80157a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8015690:	2515      	movs	r5, #21
 8015692:	197c      	adds	r4, r7, r5
 8015694:	2310      	movs	r3, #16
 8015696:	18fa      	adds	r2, r7, r3
 8015698:	230f      	movs	r3, #15
 801569a:	18fb      	adds	r3, r7, r3
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	0011      	movs	r1, r2
 80156a0:	0018      	movs	r0, r3
 80156a2:	f7ff fb6b 	bl	8014d7c <GetKeyAddrItem>
 80156a6:	0003      	movs	r3, r0
 80156a8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80156aa:	197b      	adds	r3, r7, r5
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d002      	beq.n	80156b8 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 80156b2:	197b      	adds	r3, r7, r5
 80156b4:	781b      	ldrb	r3, [r3, #0]
 80156b6:	e075      	b.n	80157a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80156b8:	693a      	ldr	r2, [r7, #16]
 80156ba:	2317      	movs	r3, #23
 80156bc:	18fb      	adds	r3, r7, r3
 80156be:	7852      	ldrb	r2, [r2, #1]
 80156c0:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 80156c2:	693a      	ldr	r2, [r7, #16]
 80156c4:	2314      	movs	r3, #20
 80156c6:	18fb      	adds	r3, r7, r3
 80156c8:	7892      	ldrb	r2, [r2, #2]
 80156ca:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80156cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ce:	689b      	ldr	r3, [r3, #8]
 80156d0:	68ba      	ldr	r2, [r7, #8]
 80156d2:	429a      	cmp	r2, r3
 80156d4:	d001      	beq.n	80156da <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80156d6:	2302      	movs	r3, #2
 80156d8:	e064      	b.n	80157a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80156da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156dc:	7b1b      	ldrb	r3, [r3, #12]
 80156de:	069b      	lsls	r3, r3, #26
 80156e0:	0fdb      	lsrs	r3, r3, #31
 80156e2:	b2db      	uxtb	r3, r3
 80156e4:	001a      	movs	r2, r3
 80156e6:	2016      	movs	r0, #22
 80156e8:	183b      	adds	r3, r7, r0
 80156ea:	1e51      	subs	r1, r2, #1
 80156ec:	418a      	sbcs	r2, r1
 80156ee:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80156f0:	4b2e      	ldr	r3, [pc, #184]	; (80157ac <LoRaMacCryptoUnsecureMessage+0x18c>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	789b      	ldrb	r3, [r3, #2]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d102      	bne.n	8015700 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80156fa:	183b      	adds	r3, r7, r0
 80156fc:	2200      	movs	r2, #0
 80156fe:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8015700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015702:	6818      	ldr	r0, [r3, #0]
 8015704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015706:	791b      	ldrb	r3, [r3, #4]
 8015708:	b29b      	uxth	r3, r3
 801570a:	3b04      	subs	r3, #4
 801570c:	b299      	uxth	r1, r3
 801570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015712:	2615      	movs	r6, #21
 8015714:	19bc      	adds	r4, r7, r6
 8015716:	2216      	movs	r2, #22
 8015718:	18ba      	adds	r2, r7, r2
 801571a:	7815      	ldrb	r5, [r2, #0]
 801571c:	2214      	movs	r2, #20
 801571e:	18ba      	adds	r2, r7, r2
 8015720:	7812      	ldrb	r2, [r2, #0]
 8015722:	9303      	str	r3, [sp, #12]
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	9302      	str	r3, [sp, #8]
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	9301      	str	r3, [sp, #4]
 801572c:	2301      	movs	r3, #1
 801572e:	9300      	str	r3, [sp, #0]
 8015730:	002b      	movs	r3, r5
 8015732:	f7ff fa89 	bl	8014c48 <VerifyCmacB0>
 8015736:	0003      	movs	r3, r0
 8015738:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801573a:	19bb      	adds	r3, r7, r6
 801573c:	781b      	ldrb	r3, [r3, #0]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d002      	beq.n	8015748 <LoRaMacCryptoUnsecureMessage+0x128>
    {
        return retval;
 8015742:	19bb      	adds	r3, r7, r6
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	e02d      	b.n	80157a4 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8015748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801574a:	2220      	movs	r2, #32
 801574c:	5c9b      	ldrb	r3, [r3, r2]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d103      	bne.n	801575a <LoRaMacCryptoUnsecureMessage+0x13a>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015752:	2317      	movs	r3, #23
 8015754:	18fb      	adds	r3, r7, r3
 8015756:	2202      	movs	r2, #2
 8015758:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015760:	2228      	movs	r2, #40	; 0x28
 8015762:	5c9b      	ldrb	r3, [r3, r2]
 8015764:	b219      	sxth	r1, r3
 8015766:	2615      	movs	r6, #21
 8015768:	19bc      	adds	r4, r7, r6
 801576a:	68bd      	ldr	r5, [r7, #8]
 801576c:	2317      	movs	r3, #23
 801576e:	18fb      	adds	r3, r7, r3
 8015770:	781a      	ldrb	r2, [r3, #0]
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	9301      	str	r3, [sp, #4]
 8015776:	2301      	movs	r3, #1
 8015778:	9300      	str	r3, [sp, #0]
 801577a:	002b      	movs	r3, r5
 801577c:	f7ff f8ea 	bl	8014954 <PayloadEncrypt>
 8015780:	0003      	movs	r3, r0
 8015782:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015784:	19bb      	adds	r3, r7, r6
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d002      	beq.n	8015792 <LoRaMacCryptoUnsecureMessage+0x172>
    {
        return retval;
 801578c:	19bb      	adds	r3, r7, r6
 801578e:	781b      	ldrb	r3, [r3, #0]
 8015790:	e008      	b.n	80157a4 <LoRaMacCryptoUnsecureMessage+0x184>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8015792:	687a      	ldr	r2, [r7, #4]
 8015794:	230e      	movs	r3, #14
 8015796:	18fb      	adds	r3, r7, r3
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	0011      	movs	r1, r2
 801579c:	0018      	movs	r0, r3
 801579e:	f7ff fbef 	bl	8014f80 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80157a2:	2300      	movs	r3, #0
}
 80157a4:	0018      	movs	r0, r3
 80157a6:	46bd      	mov	sp, r7
 80157a8:	b007      	add	sp, #28
 80157aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157ac:	200012cc 	.word	0x200012cc

080157b0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 80157b0:	b590      	push	{r4, r7, lr}
 80157b2:	b087      	sub	sp, #28
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	0002      	movs	r2, r0
 80157b8:	1dfb      	adds	r3, r7, #7
 80157ba:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80157bc:	1dfb      	adds	r3, r7, #7
 80157be:	781b      	ldrb	r3, [r3, #0]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d001      	beq.n	80157c8 <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80157c4:	230b      	movs	r3, #11
 80157c6:	e020      	b.n	801580a <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 80157c8:	2408      	movs	r4, #8
 80157ca:	193b      	adds	r3, r7, r4
 80157cc:	2200      	movs	r2, #0
 80157ce:	601a      	str	r2, [r3, #0]
 80157d0:	3304      	adds	r3, #4
 80157d2:	220c      	movs	r2, #12
 80157d4:	2100      	movs	r1, #0
 80157d6:	0018      	movs	r0, r3
 80157d8:	f007 fd65 	bl	801d2a6 <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 80157dc:	4b0d      	ldr	r3, [pc, #52]	; (8015814 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	789b      	ldrb	r3, [r3, #2]
 80157e2:	2b01      	cmp	r3, #1
 80157e4:	d102      	bne.n	80157ec <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 80157e6:	193b      	adds	r3, r7, r4
 80157e8:	2220      	movs	r2, #32
 80157ea:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80157ec:	4b09      	ldr	r3, [pc, #36]	; (8015814 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	1dfa      	adds	r2, r7, #7
 80157f2:	7812      	ldrb	r2, [r2, #0]
 80157f4:	2108      	movs	r1, #8
 80157f6:	1879      	adds	r1, r7, r1
 80157f8:	6818      	ldr	r0, [r3, #0]
 80157fa:	2304      	movs	r3, #4
 80157fc:	f7f7 fbcc 	bl	800cf98 <SecureElementDeriveAndStoreKey>
 8015800:	1e03      	subs	r3, r0, #0
 8015802:	d001      	beq.n	8015808 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015804:	230f      	movs	r3, #15
 8015806:	e000      	b.n	801580a <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015808:	2300      	movs	r3, #0
}
 801580a:	0018      	movs	r0, r3
 801580c:	46bd      	mov	sp, r7
 801580e:	b007      	add	sp, #28
 8015810:	bd90      	pop	{r4, r7, pc}
 8015812:	46c0      	nop			; (mov r8, r8)
 8015814:	200012cc 	.word	0x200012cc

08015818 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8015818:	b590      	push	{r4, r7, lr}
 801581a:	b087      	sub	sp, #28
 801581c:	af00      	add	r7, sp, #0
 801581e:	0002      	movs	r2, r0
 8015820:	1dfb      	adds	r3, r7, #7
 8015822:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8015824:	1dfb      	adds	r3, r7, #7
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	2b04      	cmp	r3, #4
 801582a:	d001      	beq.n	8015830 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801582c:	230b      	movs	r3, #11
 801582e:	e017      	b.n	8015860 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 8015830:	2408      	movs	r4, #8
 8015832:	193b      	adds	r3, r7, r4
 8015834:	2200      	movs	r2, #0
 8015836:	601a      	str	r2, [r3, #0]
 8015838:	3304      	adds	r3, #4
 801583a:	220c      	movs	r2, #12
 801583c:	2100      	movs	r1, #0
 801583e:	0018      	movs	r0, r3
 8015840:	f007 fd31 	bl	801d2a6 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8015844:	4b08      	ldr	r3, [pc, #32]	; (8015868 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	1dfa      	adds	r2, r7, #7
 801584a:	7812      	ldrb	r2, [r2, #0]
 801584c:	1939      	adds	r1, r7, r4
 801584e:	6818      	ldr	r0, [r3, #0]
 8015850:	237f      	movs	r3, #127	; 0x7f
 8015852:	f7f7 fba1 	bl	800cf98 <SecureElementDeriveAndStoreKey>
 8015856:	1e03      	subs	r3, r0, #0
 8015858:	d001      	beq.n	801585e <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801585a:	230f      	movs	r3, #15
 801585c:	e000      	b.n	8015860 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801585e:	2300      	movs	r3, #0
}
 8015860:	0018      	movs	r0, r3
 8015862:	46bd      	mov	sp, r7
 8015864:	b007      	add	sp, #28
 8015866:	bd90      	pop	{r4, r7, pc}
 8015868:	200012cc 	.word	0x200012cc

0801586c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801586c:	b590      	push	{r4, r7, lr}
 801586e:	b085      	sub	sp, #20
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d003      	beq.n	8015882 <LoRaMacParserJoinAccept+0x16>
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d101      	bne.n	8015886 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015882:	2302      	movs	r3, #2
 8015884:	e0de      	b.n	8015a44 <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 8015886:	240e      	movs	r4, #14
 8015888:	193b      	adds	r3, r7, r4
 801588a:	2200      	movs	r2, #0
 801588c:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681a      	ldr	r2, [r3, #0]
 8015892:	193b      	adds	r3, r7, r4
 8015894:	881b      	ldrh	r3, [r3, #0]
 8015896:	1939      	adds	r1, r7, r4
 8015898:	1c58      	adds	r0, r3, #1
 801589a:	8008      	strh	r0, [r1, #0]
 801589c:	18d3      	adds	r3, r2, r3
 801589e:	781a      	ldrb	r2, [r3, #0]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	1d98      	adds	r0, r3, #6
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681a      	ldr	r2, [r3, #0]
 80158ac:	193b      	adds	r3, r7, r4
 80158ae:	881b      	ldrh	r3, [r3, #0]
 80158b0:	18d3      	adds	r3, r2, r3
 80158b2:	2203      	movs	r2, #3
 80158b4:	0019      	movs	r1, r3
 80158b6:	f003 f82b 	bl	8018910 <memcpy1>
    bufItr = bufItr + 3;
 80158ba:	193b      	adds	r3, r7, r4
 80158bc:	193a      	adds	r2, r7, r4
 80158be:	8812      	ldrh	r2, [r2, #0]
 80158c0:	3203      	adds	r2, #3
 80158c2:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	3309      	adds	r3, #9
 80158c8:	0018      	movs	r0, r3
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681a      	ldr	r2, [r3, #0]
 80158ce:	193b      	adds	r3, r7, r4
 80158d0:	881b      	ldrh	r3, [r3, #0]
 80158d2:	18d3      	adds	r3, r2, r3
 80158d4:	2203      	movs	r2, #3
 80158d6:	0019      	movs	r1, r3
 80158d8:	f003 f81a 	bl	8018910 <memcpy1>
    bufItr = bufItr + 3;
 80158dc:	193b      	adds	r3, r7, r4
 80158de:	193a      	adds	r2, r7, r4
 80158e0:	8812      	ldrh	r2, [r2, #0]
 80158e2:	3203      	adds	r2, #3
 80158e4:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	681a      	ldr	r2, [r3, #0]
 80158ea:	193b      	adds	r3, r7, r4
 80158ec:	881b      	ldrh	r3, [r3, #0]
 80158ee:	1939      	adds	r1, r7, r4
 80158f0:	1c58      	adds	r0, r3, #1
 80158f2:	8008      	strh	r0, [r1, #0]
 80158f4:	18d3      	adds	r3, r2, r3
 80158f6:	781b      	ldrb	r3, [r3, #0]
 80158f8:	001a      	movs	r2, r3
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	193b      	adds	r3, r7, r4
 8015904:	881b      	ldrh	r3, [r3, #0]
 8015906:	1939      	adds	r1, r7, r4
 8015908:	1c58      	adds	r0, r3, #1
 801590a:	8008      	strh	r0, [r1, #0]
 801590c:	18d3      	adds	r3, r2, r3
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	021a      	lsls	r2, r3, #8
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	68db      	ldr	r3, [r3, #12]
 8015916:	431a      	orrs	r2, r3
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681a      	ldr	r2, [r3, #0]
 8015920:	193b      	adds	r3, r7, r4
 8015922:	881b      	ldrh	r3, [r3, #0]
 8015924:	1939      	adds	r1, r7, r4
 8015926:	1c58      	adds	r0, r3, #1
 8015928:	8008      	strh	r0, [r1, #0]
 801592a:	18d3      	adds	r3, r2, r3
 801592c:	781b      	ldrb	r3, [r3, #0]
 801592e:	041a      	lsls	r2, r3, #16
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	431a      	orrs	r2, r3
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681a      	ldr	r2, [r3, #0]
 801593e:	193b      	adds	r3, r7, r4
 8015940:	881b      	ldrh	r3, [r3, #0]
 8015942:	1939      	adds	r1, r7, r4
 8015944:	1c58      	adds	r0, r3, #1
 8015946:	8008      	strh	r0, [r1, #0]
 8015948:	18d3      	adds	r3, r2, r3
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	061a      	lsls	r2, r3, #24
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	68db      	ldr	r3, [r3, #12]
 8015952:	431a      	orrs	r2, r3
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681a      	ldr	r2, [r3, #0]
 801595c:	193b      	adds	r3, r7, r4
 801595e:	881b      	ldrh	r3, [r3, #0]
 8015960:	1939      	adds	r1, r7, r4
 8015962:	1c58      	adds	r0, r3, #1
 8015964:	8008      	strh	r0, [r1, #0]
 8015966:	18d3      	adds	r3, r2, r3
 8015968:	781a      	ldrb	r2, [r3, #0]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	193b      	adds	r3, r7, r4
 8015974:	881b      	ldrh	r3, [r3, #0]
 8015976:	1939      	adds	r1, r7, r4
 8015978:	1c58      	adds	r0, r3, #1
 801597a:	8008      	strh	r0, [r1, #0]
 801597c:	18d3      	adds	r3, r2, r3
 801597e:	781a      	ldrb	r2, [r3, #0]
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	791b      	ldrb	r3, [r3, #4]
 8015988:	1f1a      	subs	r2, r3, #4
 801598a:	193b      	adds	r3, r7, r4
 801598c:	881b      	ldrh	r3, [r3, #0]
 801598e:	1ad3      	subs	r3, r2, r3
 8015990:	2b10      	cmp	r3, #16
 8015992:	d111      	bne.n	80159b8 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	3312      	adds	r3, #18
 8015998:	0018      	movs	r0, r3
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	193b      	adds	r3, r7, r4
 80159a0:	881b      	ldrh	r3, [r3, #0]
 80159a2:	18d3      	adds	r3, r2, r3
 80159a4:	2210      	movs	r2, #16
 80159a6:	0019      	movs	r1, r3
 80159a8:	f002 ffb2 	bl	8018910 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80159ac:	193b      	adds	r3, r7, r4
 80159ae:	193a      	adds	r2, r7, r4
 80159b0:	8812      	ldrh	r2, [r2, #0]
 80159b2:	3210      	adds	r2, #16
 80159b4:	801a      	strh	r2, [r3, #0]
 80159b6:	e00a      	b.n	80159ce <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	791b      	ldrb	r3, [r3, #4]
 80159bc:	1f1a      	subs	r2, r3, #4
 80159be:	230e      	movs	r3, #14
 80159c0:	18fb      	adds	r3, r7, r3
 80159c2:	881b      	ldrh	r3, [r3, #0]
 80159c4:	1ad3      	subs	r3, r2, r3
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	dd01      	ble.n	80159ce <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 80159ca:	2301      	movs	r3, #1
 80159cc:	e03a      	b.n	8015a44 <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681a      	ldr	r2, [r3, #0]
 80159d2:	240e      	movs	r4, #14
 80159d4:	193b      	adds	r3, r7, r4
 80159d6:	881b      	ldrh	r3, [r3, #0]
 80159d8:	1939      	adds	r1, r7, r4
 80159da:	1c58      	adds	r0, r3, #1
 80159dc:	8008      	strh	r0, [r1, #0]
 80159de:	18d3      	adds	r3, r2, r3
 80159e0:	781b      	ldrb	r3, [r3, #0]
 80159e2:	001a      	movs	r2, r3
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681a      	ldr	r2, [r3, #0]
 80159ec:	193b      	adds	r3, r7, r4
 80159ee:	881b      	ldrh	r3, [r3, #0]
 80159f0:	1939      	adds	r1, r7, r4
 80159f2:	1c58      	adds	r0, r3, #1
 80159f4:	8008      	strh	r0, [r1, #0]
 80159f6:	18d3      	adds	r3, r2, r3
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	021a      	lsls	r2, r3, #8
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a00:	431a      	orrs	r2, r3
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	193b      	adds	r3, r7, r4
 8015a0c:	881b      	ldrh	r3, [r3, #0]
 8015a0e:	1939      	adds	r1, r7, r4
 8015a10:	1c58      	adds	r0, r3, #1
 8015a12:	8008      	strh	r0, [r1, #0]
 8015a14:	18d3      	adds	r3, r2, r3
 8015a16:	781b      	ldrb	r3, [r3, #0]
 8015a18:	041a      	lsls	r2, r3, #16
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a1e:	431a      	orrs	r2, r3
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681a      	ldr	r2, [r3, #0]
 8015a28:	193b      	adds	r3, r7, r4
 8015a2a:	881b      	ldrh	r3, [r3, #0]
 8015a2c:	1939      	adds	r1, r7, r4
 8015a2e:	1c58      	adds	r0, r3, #1
 8015a30:	8008      	strh	r0, [r1, #0]
 8015a32:	18d3      	adds	r3, r2, r3
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	061a      	lsls	r2, r3, #24
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a3c:	431a      	orrs	r2, r3
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8015a42:	2300      	movs	r3, #0
}
 8015a44:	0018      	movs	r0, r3
 8015a46:	46bd      	mov	sp, r7
 8015a48:	b005      	add	sp, #20
 8015a4a:	bd90      	pop	{r4, r7, pc}

08015a4c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015a4c:	b590      	push	{r4, r7, lr}
 8015a4e:	b085      	sub	sp, #20
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d003      	beq.n	8015a62 <LoRaMacParserData+0x16>
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d101      	bne.n	8015a66 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8015a62:	2302      	movs	r3, #2
 8015a64:	e0fe      	b.n	8015c64 <LoRaMacParserData+0x218>
    }

    uint16_t bufItr = 0;
 8015a66:	240e      	movs	r4, #14
 8015a68:	193b      	adds	r3, r7, r4
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681a      	ldr	r2, [r3, #0]
 8015a72:	193b      	adds	r3, r7, r4
 8015a74:	881b      	ldrh	r3, [r3, #0]
 8015a76:	1939      	adds	r1, r7, r4
 8015a78:	1c58      	adds	r0, r3, #1
 8015a7a:	8008      	strh	r0, [r1, #0]
 8015a7c:	18d3      	adds	r3, r2, r3
 8015a7e:	781a      	ldrb	r2, [r3, #0]
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	681a      	ldr	r2, [r3, #0]
 8015a88:	193b      	adds	r3, r7, r4
 8015a8a:	881b      	ldrh	r3, [r3, #0]
 8015a8c:	1939      	adds	r1, r7, r4
 8015a8e:	1c58      	adds	r0, r3, #1
 8015a90:	8008      	strh	r0, [r1, #0]
 8015a92:	18d3      	adds	r3, r2, r3
 8015a94:	781b      	ldrb	r3, [r3, #0]
 8015a96:	001a      	movs	r2, r3
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	681a      	ldr	r2, [r3, #0]
 8015aa0:	193b      	adds	r3, r7, r4
 8015aa2:	881b      	ldrh	r3, [r3, #0]
 8015aa4:	1939      	adds	r1, r7, r4
 8015aa6:	1c58      	adds	r0, r3, #1
 8015aa8:	8008      	strh	r0, [r1, #0]
 8015aaa:	18d3      	adds	r3, r2, r3
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	021a      	lsls	r2, r3, #8
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	689b      	ldr	r3, [r3, #8]
 8015ab4:	431a      	orrs	r2, r3
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681a      	ldr	r2, [r3, #0]
 8015abe:	193b      	adds	r3, r7, r4
 8015ac0:	881b      	ldrh	r3, [r3, #0]
 8015ac2:	1939      	adds	r1, r7, r4
 8015ac4:	1c58      	adds	r0, r3, #1
 8015ac6:	8008      	strh	r0, [r1, #0]
 8015ac8:	18d3      	adds	r3, r2, r3
 8015aca:	781b      	ldrb	r3, [r3, #0]
 8015acc:	041a      	lsls	r2, r3, #16
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	689b      	ldr	r3, [r3, #8]
 8015ad2:	431a      	orrs	r2, r3
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	681a      	ldr	r2, [r3, #0]
 8015adc:	193b      	adds	r3, r7, r4
 8015ade:	881b      	ldrh	r3, [r3, #0]
 8015ae0:	1939      	adds	r1, r7, r4
 8015ae2:	1c58      	adds	r0, r3, #1
 8015ae4:	8008      	strh	r0, [r1, #0]
 8015ae6:	18d3      	adds	r3, r2, r3
 8015ae8:	781b      	ldrb	r3, [r3, #0]
 8015aea:	061a      	lsls	r2, r3, #24
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	689b      	ldr	r3, [r3, #8]
 8015af0:	431a      	orrs	r2, r3
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	681a      	ldr	r2, [r3, #0]
 8015afa:	193b      	adds	r3, r7, r4
 8015afc:	881b      	ldrh	r3, [r3, #0]
 8015afe:	1939      	adds	r1, r7, r4
 8015b00:	1c58      	adds	r0, r3, #1
 8015b02:	8008      	strh	r0, [r1, #0]
 8015b04:	18d3      	adds	r3, r2, r3
 8015b06:	781a      	ldrb	r2, [r3, #0]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681a      	ldr	r2, [r3, #0]
 8015b10:	193b      	adds	r3, r7, r4
 8015b12:	881b      	ldrh	r3, [r3, #0]
 8015b14:	1939      	adds	r1, r7, r4
 8015b16:	1c58      	adds	r0, r3, #1
 8015b18:	8008      	strh	r0, [r1, #0]
 8015b1a:	18d3      	adds	r3, r2, r3
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	b29a      	uxth	r2, r3
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681a      	ldr	r2, [r3, #0]
 8015b28:	193b      	adds	r3, r7, r4
 8015b2a:	881b      	ldrh	r3, [r3, #0]
 8015b2c:	1939      	adds	r1, r7, r4
 8015b2e:	1c58      	adds	r0, r3, #1
 8015b30:	8008      	strh	r0, [r1, #0]
 8015b32:	18d3      	adds	r3, r2, r3
 8015b34:	781b      	ldrb	r3, [r3, #0]
 8015b36:	0219      	lsls	r1, r3, #8
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	89db      	ldrh	r3, [r3, #14]
 8015b3c:	b21a      	sxth	r2, r3
 8015b3e:	b20b      	sxth	r3, r1
 8015b40:	4313      	orrs	r3, r2
 8015b42:	b21b      	sxth	r3, r3
 8015b44:	b29a      	uxth	r2, r3
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	3310      	adds	r3, #16
 8015b4e:	0018      	movs	r0, r3
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	681a      	ldr	r2, [r3, #0]
 8015b54:	193b      	adds	r3, r7, r4
 8015b56:	881b      	ldrh	r3, [r3, #0]
 8015b58:	18d1      	adds	r1, r2, r3
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	7b1b      	ldrb	r3, [r3, #12]
 8015b5e:	071b      	lsls	r3, r3, #28
 8015b60:	0f1b      	lsrs	r3, r3, #28
 8015b62:	b2db      	uxtb	r3, r3
 8015b64:	b29b      	uxth	r3, r3
 8015b66:	001a      	movs	r2, r3
 8015b68:	f002 fed2 	bl	8018910 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	7b1b      	ldrb	r3, [r3, #12]
 8015b70:	071b      	lsls	r3, r3, #28
 8015b72:	0f1b      	lsrs	r3, r3, #28
 8015b74:	b2db      	uxtb	r3, r3
 8015b76:	b299      	uxth	r1, r3
 8015b78:	193b      	adds	r3, r7, r4
 8015b7a:	193a      	adds	r2, r7, r4
 8015b7c:	8812      	ldrh	r2, [r2, #0]
 8015b7e:	188a      	adds	r2, r1, r2
 8015b80:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	2220      	movs	r2, #32
 8015b86:	2100      	movs	r1, #0
 8015b88:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	2228      	movs	r2, #40	; 0x28
 8015b8e:	2100      	movs	r1, #0
 8015b90:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	791b      	ldrb	r3, [r3, #4]
 8015b96:	001a      	movs	r2, r3
 8015b98:	193b      	adds	r3, r7, r4
 8015b9a:	881b      	ldrh	r3, [r3, #0]
 8015b9c:	1ad3      	subs	r3, r2, r3
 8015b9e:	2b04      	cmp	r3, #4
 8015ba0:	dd2e      	ble.n	8015c00 <LoRaMacParserData+0x1b4>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681a      	ldr	r2, [r3, #0]
 8015ba6:	193b      	adds	r3, r7, r4
 8015ba8:	881b      	ldrh	r3, [r3, #0]
 8015baa:	1939      	adds	r1, r7, r4
 8015bac:	1c58      	adds	r0, r3, #1
 8015bae:	8008      	strh	r0, [r1, #0]
 8015bb0:	18d3      	adds	r3, r2, r3
 8015bb2:	7819      	ldrb	r1, [r3, #0]
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2220      	movs	r2, #32
 8015bb8:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	791a      	ldrb	r2, [r3, #4]
 8015bbe:	193b      	adds	r3, r7, r4
 8015bc0:	881b      	ldrh	r3, [r3, #0]
 8015bc2:	b2db      	uxtb	r3, r3
 8015bc4:	1ad3      	subs	r3, r2, r3
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	3b04      	subs	r3, #4
 8015bca:	b2d9      	uxtb	r1, r3
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2228      	movs	r2, #40	; 0x28
 8015bd0:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	681a      	ldr	r2, [r3, #0]
 8015bda:	193b      	adds	r3, r7, r4
 8015bdc:	881b      	ldrh	r3, [r3, #0]
 8015bde:	18d1      	adds	r1, r2, r3
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2228      	movs	r2, #40	; 0x28
 8015be4:	5c9b      	ldrb	r3, [r3, r2]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	001a      	movs	r2, r3
 8015bea:	f002 fe91 	bl	8018910 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2228      	movs	r2, #40	; 0x28
 8015bf2:	5c9b      	ldrb	r3, [r3, r2]
 8015bf4:	b299      	uxth	r1, r3
 8015bf6:	193b      	adds	r3, r7, r4
 8015bf8:	193a      	adds	r2, r7, r4
 8015bfa:	8812      	ldrh	r2, [r2, #0]
 8015bfc:	188a      	adds	r2, r1, r2
 8015bfe:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681a      	ldr	r2, [r3, #0]
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	791b      	ldrb	r3, [r3, #4]
 8015c08:	3b04      	subs	r3, #4
 8015c0a:	18d3      	adds	r3, r2, r3
 8015c0c:	781b      	ldrb	r3, [r3, #0]
 8015c0e:	001a      	movs	r2, r3
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	6819      	ldr	r1, [r3, #0]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	791b      	ldrb	r3, [r3, #4]
 8015c20:	3b03      	subs	r3, #3
 8015c22:	18cb      	adds	r3, r1, r3
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	021b      	lsls	r3, r3, #8
 8015c28:	431a      	orrs	r2, r3
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6819      	ldr	r1, [r3, #0]
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	791b      	ldrb	r3, [r3, #4]
 8015c3a:	3b02      	subs	r3, #2
 8015c3c:	18cb      	adds	r3, r1, r3
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	041b      	lsls	r3, r3, #16
 8015c42:	431a      	orrs	r2, r3
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	6819      	ldr	r1, [r3, #0]
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	791b      	ldrb	r3, [r3, #4]
 8015c54:	3b01      	subs	r3, #1
 8015c56:	18cb      	adds	r3, r1, r3
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	061b      	lsls	r3, r3, #24
 8015c5c:	431a      	orrs	r2, r3
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015c62:	2300      	movs	r3, #0
}
 8015c64:	0018      	movs	r0, r3
 8015c66:	46bd      	mov	sp, r7
 8015c68:	b005      	add	sp, #20
 8015c6a:	bd90      	pop	{r4, r7, pc}

08015c6c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015c6c:	b5b0      	push	{r4, r5, r7, lr}
 8015c6e:	b084      	sub	sp, #16
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d003      	beq.n	8015c82 <LoRaMacSerializerJoinRequest+0x16>
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d101      	bne.n	8015c86 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015c82:	2301      	movs	r3, #1
 8015c84:	e089      	b.n	8015d9a <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8015c86:	230e      	movs	r3, #14
 8015c88:	18fb      	adds	r3, r7, r3
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	791b      	ldrb	r3, [r3, #4]
 8015c92:	2b16      	cmp	r3, #22
 8015c94:	d801      	bhi.n	8015c9a <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015c96:	2302      	movs	r3, #2
 8015c98:	e07f      	b.n	8015d9a <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	681a      	ldr	r2, [r3, #0]
 8015c9e:	240e      	movs	r4, #14
 8015ca0:	193b      	adds	r3, r7, r4
 8015ca2:	881b      	ldrh	r3, [r3, #0]
 8015ca4:	1939      	adds	r1, r7, r4
 8015ca6:	1c58      	adds	r0, r3, #1
 8015ca8:	8008      	strh	r0, [r1, #0]
 8015caa:	18d3      	adds	r3, r2, r3
 8015cac:	687a      	ldr	r2, [r7, #4]
 8015cae:	7952      	ldrb	r2, [r2, #5]
 8015cb0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	681a      	ldr	r2, [r3, #0]
 8015cb6:	193b      	adds	r3, r7, r4
 8015cb8:	881b      	ldrh	r3, [r3, #0]
 8015cba:	18d0      	adds	r0, r2, r3
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	3306      	adds	r3, #6
 8015cc0:	2208      	movs	r2, #8
 8015cc2:	0019      	movs	r1, r3
 8015cc4:	f002 fe40 	bl	8018948 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8015cc8:	193b      	adds	r3, r7, r4
 8015cca:	193a      	adds	r2, r7, r4
 8015ccc:	8812      	ldrh	r2, [r2, #0]
 8015cce:	3208      	adds	r2, #8
 8015cd0:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681a      	ldr	r2, [r3, #0]
 8015cd6:	193b      	adds	r3, r7, r4
 8015cd8:	881b      	ldrh	r3, [r3, #0]
 8015cda:	18d0      	adds	r0, r2, r3
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	330e      	adds	r3, #14
 8015ce0:	2208      	movs	r2, #8
 8015ce2:	0019      	movs	r1, r3
 8015ce4:	f002 fe30 	bl	8018948 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8015ce8:	193b      	adds	r3, r7, r4
 8015cea:	0025      	movs	r5, r4
 8015cec:	193a      	adds	r2, r7, r4
 8015cee:	8812      	ldrh	r2, [r2, #0]
 8015cf0:	3208      	adds	r2, #8
 8015cf2:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	8ad8      	ldrh	r0, [r3, #22]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681a      	ldr	r2, [r3, #0]
 8015cfc:	197b      	adds	r3, r7, r5
 8015cfe:	881b      	ldrh	r3, [r3, #0]
 8015d00:	1979      	adds	r1, r7, r5
 8015d02:	1c5c      	adds	r4, r3, #1
 8015d04:	800c      	strh	r4, [r1, #0]
 8015d06:	18d3      	adds	r3, r2, r3
 8015d08:	b2c2      	uxtb	r2, r0
 8015d0a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	8adb      	ldrh	r3, [r3, #22]
 8015d10:	0a1b      	lsrs	r3, r3, #8
 8015d12:	b298      	uxth	r0, r3
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	681a      	ldr	r2, [r3, #0]
 8015d18:	197b      	adds	r3, r7, r5
 8015d1a:	881b      	ldrh	r3, [r3, #0]
 8015d1c:	1979      	adds	r1, r7, r5
 8015d1e:	1c5c      	adds	r4, r3, #1
 8015d20:	800c      	strh	r4, [r1, #0]
 8015d22:	18d3      	adds	r3, r2, r3
 8015d24:	b2c2      	uxtb	r2, r0
 8015d26:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	6998      	ldr	r0, [r3, #24]
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681a      	ldr	r2, [r3, #0]
 8015d30:	197b      	adds	r3, r7, r5
 8015d32:	881b      	ldrh	r3, [r3, #0]
 8015d34:	1979      	adds	r1, r7, r5
 8015d36:	1c5c      	adds	r4, r3, #1
 8015d38:	800c      	strh	r4, [r1, #0]
 8015d3a:	18d3      	adds	r3, r2, r3
 8015d3c:	b2c2      	uxtb	r2, r0
 8015d3e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	699b      	ldr	r3, [r3, #24]
 8015d44:	0a18      	lsrs	r0, r3, #8
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681a      	ldr	r2, [r3, #0]
 8015d4a:	197b      	adds	r3, r7, r5
 8015d4c:	881b      	ldrh	r3, [r3, #0]
 8015d4e:	1979      	adds	r1, r7, r5
 8015d50:	1c5c      	adds	r4, r3, #1
 8015d52:	800c      	strh	r4, [r1, #0]
 8015d54:	18d3      	adds	r3, r2, r3
 8015d56:	b2c2      	uxtb	r2, r0
 8015d58:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	699b      	ldr	r3, [r3, #24]
 8015d5e:	0c18      	lsrs	r0, r3, #16
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	681a      	ldr	r2, [r3, #0]
 8015d64:	197b      	adds	r3, r7, r5
 8015d66:	881b      	ldrh	r3, [r3, #0]
 8015d68:	1979      	adds	r1, r7, r5
 8015d6a:	1c5c      	adds	r4, r3, #1
 8015d6c:	800c      	strh	r4, [r1, #0]
 8015d6e:	18d3      	adds	r3, r2, r3
 8015d70:	b2c2      	uxtb	r2, r0
 8015d72:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	699b      	ldr	r3, [r3, #24]
 8015d78:	0e18      	lsrs	r0, r3, #24
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681a      	ldr	r2, [r3, #0]
 8015d7e:	197b      	adds	r3, r7, r5
 8015d80:	881b      	ldrh	r3, [r3, #0]
 8015d82:	1979      	adds	r1, r7, r5
 8015d84:	1c5c      	adds	r4, r3, #1
 8015d86:	800c      	strh	r4, [r1, #0]
 8015d88:	18d3      	adds	r3, r2, r3
 8015d8a:	b2c2      	uxtb	r2, r0
 8015d8c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015d8e:	197b      	adds	r3, r7, r5
 8015d90:	881b      	ldrh	r3, [r3, #0]
 8015d92:	b2da      	uxtb	r2, r3
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015d98:	2300      	movs	r3, #0
}
 8015d9a:	0018      	movs	r0, r3
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	b004      	add	sp, #16
 8015da0:	bdb0      	pop	{r4, r5, r7, pc}

08015da2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015da2:	b5b0      	push	{r4, r5, r7, lr}
 8015da4:	b084      	sub	sp, #16
 8015da6:	af00      	add	r7, sp, #0
 8015da8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d003      	beq.n	8015db8 <LoRaMacSerializerData+0x16>
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d101      	bne.n	8015dbc <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015db8:	2301      	movs	r3, #1
 8015dba:	e119      	b.n	8015ff0 <LoRaMacSerializerData+0x24e>
    }

    uint16_t bufItr = 0;
 8015dbc:	230e      	movs	r3, #14
 8015dbe:	18fb      	adds	r3, r7, r3
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015dc4:	200c      	movs	r0, #12
 8015dc6:	183b      	adds	r3, r7, r0
 8015dc8:	2208      	movs	r2, #8
 8015dca:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	7b1b      	ldrb	r3, [r3, #12]
 8015dd0:	071b      	lsls	r3, r3, #28
 8015dd2:	0f1b      	lsrs	r3, r3, #28
 8015dd4:	b2db      	uxtb	r3, r3
 8015dd6:	b299      	uxth	r1, r3
 8015dd8:	183b      	adds	r3, r7, r0
 8015dda:	183a      	adds	r2, r7, r0
 8015ddc:	8812      	ldrh	r2, [r2, #0]
 8015dde:	188a      	adds	r2, r1, r2
 8015de0:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2228      	movs	r2, #40	; 0x28
 8015de6:	5c9b      	ldrb	r3, [r3, r2]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d004      	beq.n	8015df6 <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8015dec:	183b      	adds	r3, r7, r0
 8015dee:	183a      	adds	r2, r7, r0
 8015df0:	8812      	ldrh	r2, [r2, #0]
 8015df2:	3201      	adds	r2, #1
 8015df4:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2228      	movs	r2, #40	; 0x28
 8015dfa:	5c9b      	ldrb	r3, [r3, r2]
 8015dfc:	b299      	uxth	r1, r3
 8015dfe:	200c      	movs	r0, #12
 8015e00:	183b      	adds	r3, r7, r0
 8015e02:	183a      	adds	r2, r7, r0
 8015e04:	8812      	ldrh	r2, [r2, #0]
 8015e06:	188a      	adds	r2, r1, r2
 8015e08:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015e0a:	0001      	movs	r1, r0
 8015e0c:	187b      	adds	r3, r7, r1
 8015e0e:	187a      	adds	r2, r7, r1
 8015e10:	8812      	ldrh	r2, [r2, #0]
 8015e12:	3204      	adds	r2, #4
 8015e14:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	791b      	ldrb	r3, [r3, #4]
 8015e1a:	b29b      	uxth	r3, r3
 8015e1c:	187a      	adds	r2, r7, r1
 8015e1e:	8812      	ldrh	r2, [r2, #0]
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d901      	bls.n	8015e28 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015e24:	2302      	movs	r3, #2
 8015e26:	e0e3      	b.n	8015ff0 <LoRaMacSerializerData+0x24e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681a      	ldr	r2, [r3, #0]
 8015e2c:	250e      	movs	r5, #14
 8015e2e:	197b      	adds	r3, r7, r5
 8015e30:	881b      	ldrh	r3, [r3, #0]
 8015e32:	1979      	adds	r1, r7, r5
 8015e34:	1c58      	adds	r0, r3, #1
 8015e36:	8008      	strh	r0, [r1, #0]
 8015e38:	18d3      	adds	r3, r2, r3
 8015e3a:	687a      	ldr	r2, [r7, #4]
 8015e3c:	7952      	ldrb	r2, [r2, #5]
 8015e3e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	6898      	ldr	r0, [r3, #8]
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681a      	ldr	r2, [r3, #0]
 8015e48:	197b      	adds	r3, r7, r5
 8015e4a:	881b      	ldrh	r3, [r3, #0]
 8015e4c:	1979      	adds	r1, r7, r5
 8015e4e:	1c5c      	adds	r4, r3, #1
 8015e50:	800c      	strh	r4, [r1, #0]
 8015e52:	18d3      	adds	r3, r2, r3
 8015e54:	b2c2      	uxtb	r2, r0
 8015e56:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	689b      	ldr	r3, [r3, #8]
 8015e5c:	0a18      	lsrs	r0, r3, #8
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681a      	ldr	r2, [r3, #0]
 8015e62:	197b      	adds	r3, r7, r5
 8015e64:	881b      	ldrh	r3, [r3, #0]
 8015e66:	1979      	adds	r1, r7, r5
 8015e68:	1c5c      	adds	r4, r3, #1
 8015e6a:	800c      	strh	r4, [r1, #0]
 8015e6c:	18d3      	adds	r3, r2, r3
 8015e6e:	b2c2      	uxtb	r2, r0
 8015e70:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	689b      	ldr	r3, [r3, #8]
 8015e76:	0c18      	lsrs	r0, r3, #16
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681a      	ldr	r2, [r3, #0]
 8015e7c:	197b      	adds	r3, r7, r5
 8015e7e:	881b      	ldrh	r3, [r3, #0]
 8015e80:	1979      	adds	r1, r7, r5
 8015e82:	1c5c      	adds	r4, r3, #1
 8015e84:	800c      	strh	r4, [r1, #0]
 8015e86:	18d3      	adds	r3, r2, r3
 8015e88:	b2c2      	uxtb	r2, r0
 8015e8a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	689b      	ldr	r3, [r3, #8]
 8015e90:	0e18      	lsrs	r0, r3, #24
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	197b      	adds	r3, r7, r5
 8015e98:	881b      	ldrh	r3, [r3, #0]
 8015e9a:	1979      	adds	r1, r7, r5
 8015e9c:	1c5c      	adds	r4, r3, #1
 8015e9e:	800c      	strh	r4, [r1, #0]
 8015ea0:	18d3      	adds	r3, r2, r3
 8015ea2:	b2c2      	uxtb	r2, r0
 8015ea4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681a      	ldr	r2, [r3, #0]
 8015eaa:	197b      	adds	r3, r7, r5
 8015eac:	881b      	ldrh	r3, [r3, #0]
 8015eae:	1979      	adds	r1, r7, r5
 8015eb0:	1c58      	adds	r0, r3, #1
 8015eb2:	8008      	strh	r0, [r1, #0]
 8015eb4:	18d3      	adds	r3, r2, r3
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	7b12      	ldrb	r2, [r2, #12]
 8015eba:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	89d8      	ldrh	r0, [r3, #14]
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681a      	ldr	r2, [r3, #0]
 8015ec4:	197b      	adds	r3, r7, r5
 8015ec6:	881b      	ldrh	r3, [r3, #0]
 8015ec8:	1979      	adds	r1, r7, r5
 8015eca:	1c5c      	adds	r4, r3, #1
 8015ecc:	800c      	strh	r4, [r1, #0]
 8015ece:	18d3      	adds	r3, r2, r3
 8015ed0:	b2c2      	uxtb	r2, r0
 8015ed2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	89db      	ldrh	r3, [r3, #14]
 8015ed8:	0a1b      	lsrs	r3, r3, #8
 8015eda:	b298      	uxth	r0, r3
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	681a      	ldr	r2, [r3, #0]
 8015ee0:	197b      	adds	r3, r7, r5
 8015ee2:	881b      	ldrh	r3, [r3, #0]
 8015ee4:	1979      	adds	r1, r7, r5
 8015ee6:	1c5c      	adds	r4, r3, #1
 8015ee8:	800c      	strh	r4, [r1, #0]
 8015eea:	18d3      	adds	r3, r2, r3
 8015eec:	b2c2      	uxtb	r2, r0
 8015eee:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681a      	ldr	r2, [r3, #0]
 8015ef4:	002c      	movs	r4, r5
 8015ef6:	197b      	adds	r3, r7, r5
 8015ef8:	881b      	ldrh	r3, [r3, #0]
 8015efa:	18d0      	adds	r0, r2, r3
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	3310      	adds	r3, #16
 8015f00:	0019      	movs	r1, r3
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	7b1b      	ldrb	r3, [r3, #12]
 8015f06:	071b      	lsls	r3, r3, #28
 8015f08:	0f1b      	lsrs	r3, r3, #28
 8015f0a:	b2db      	uxtb	r3, r3
 8015f0c:	b29b      	uxth	r3, r3
 8015f0e:	001a      	movs	r2, r3
 8015f10:	f002 fcfe 	bl	8018910 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	7b1b      	ldrb	r3, [r3, #12]
 8015f18:	071b      	lsls	r3, r3, #28
 8015f1a:	0f1b      	lsrs	r3, r3, #28
 8015f1c:	b2db      	uxtb	r3, r3
 8015f1e:	b299      	uxth	r1, r3
 8015f20:	193b      	adds	r3, r7, r4
 8015f22:	193a      	adds	r2, r7, r4
 8015f24:	8812      	ldrh	r2, [r2, #0]
 8015f26:	188a      	adds	r2, r1, r2
 8015f28:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2228      	movs	r2, #40	; 0x28
 8015f2e:	5c9b      	ldrb	r3, [r3, r2]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d00b      	beq.n	8015f4c <LoRaMacSerializerData+0x1aa>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681a      	ldr	r2, [r3, #0]
 8015f38:	193b      	adds	r3, r7, r4
 8015f3a:	881b      	ldrh	r3, [r3, #0]
 8015f3c:	1939      	adds	r1, r7, r4
 8015f3e:	1c58      	adds	r0, r3, #1
 8015f40:	8008      	strh	r0, [r1, #0]
 8015f42:	18d3      	adds	r3, r2, r3
 8015f44:	687a      	ldr	r2, [r7, #4]
 8015f46:	2120      	movs	r1, #32
 8015f48:	5c52      	ldrb	r2, [r2, r1]
 8015f4a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681a      	ldr	r2, [r3, #0]
 8015f50:	240e      	movs	r4, #14
 8015f52:	193b      	adds	r3, r7, r4
 8015f54:	881b      	ldrh	r3, [r3, #0]
 8015f56:	18d0      	adds	r0, r2, r3
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2228      	movs	r2, #40	; 0x28
 8015f60:	5c9b      	ldrb	r3, [r3, r2]
 8015f62:	b29b      	uxth	r3, r3
 8015f64:	001a      	movs	r2, r3
 8015f66:	f002 fcd3 	bl	8018910 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2228      	movs	r2, #40	; 0x28
 8015f6e:	5c9b      	ldrb	r3, [r3, r2]
 8015f70:	b299      	uxth	r1, r3
 8015f72:	193b      	adds	r3, r7, r4
 8015f74:	193a      	adds	r2, r7, r4
 8015f76:	8812      	ldrh	r2, [r2, #0]
 8015f78:	188a      	adds	r2, r1, r2
 8015f7a:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681a      	ldr	r2, [r3, #0]
 8015f84:	193b      	adds	r3, r7, r4
 8015f86:	881b      	ldrh	r3, [r3, #0]
 8015f88:	0025      	movs	r5, r4
 8015f8a:	1939      	adds	r1, r7, r4
 8015f8c:	1c5c      	adds	r4, r3, #1
 8015f8e:	800c      	strh	r4, [r1, #0]
 8015f90:	18d3      	adds	r3, r2, r3
 8015f92:	b2c2      	uxtb	r2, r0
 8015f94:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f9a:	0a18      	lsrs	r0, r3, #8
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681a      	ldr	r2, [r3, #0]
 8015fa0:	197b      	adds	r3, r7, r5
 8015fa2:	881b      	ldrh	r3, [r3, #0]
 8015fa4:	1979      	adds	r1, r7, r5
 8015fa6:	1c5c      	adds	r4, r3, #1
 8015fa8:	800c      	strh	r4, [r1, #0]
 8015faa:	18d3      	adds	r3, r2, r3
 8015fac:	b2c2      	uxtb	r2, r0
 8015fae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fb4:	0c18      	lsrs	r0, r3, #16
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	197b      	adds	r3, r7, r5
 8015fbc:	881b      	ldrh	r3, [r3, #0]
 8015fbe:	1979      	adds	r1, r7, r5
 8015fc0:	1c5c      	adds	r4, r3, #1
 8015fc2:	800c      	strh	r4, [r1, #0]
 8015fc4:	18d3      	adds	r3, r2, r3
 8015fc6:	b2c2      	uxtb	r2, r0
 8015fc8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fce:	0e18      	lsrs	r0, r3, #24
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	681a      	ldr	r2, [r3, #0]
 8015fd4:	197b      	adds	r3, r7, r5
 8015fd6:	881b      	ldrh	r3, [r3, #0]
 8015fd8:	1979      	adds	r1, r7, r5
 8015fda:	1c5c      	adds	r4, r3, #1
 8015fdc:	800c      	strh	r4, [r1, #0]
 8015fde:	18d3      	adds	r3, r2, r3
 8015fe0:	b2c2      	uxtb	r2, r0
 8015fe2:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015fe4:	197b      	adds	r3, r7, r5
 8015fe6:	881b      	ldrh	r3, [r3, #0]
 8015fe8:	b2da      	uxtb	r2, r3
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015fee:	2300      	movs	r3, #0
}
 8015ff0:	0018      	movs	r0, r3
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	b004      	add	sp, #16
 8015ff6:	bdb0      	pop	{r4, r5, r7, pc}

08015ff8 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	0002      	movs	r2, r0
 8016000:	1dfb      	adds	r3, r7, #7
 8016002:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016004:	1dfb      	adds	r3, r7, #7
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	2b05      	cmp	r3, #5
 801600a:	d101      	bne.n	8016010 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 801600c:	2301      	movs	r3, #1
 801600e:	e000      	b.n	8016012 <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016010:	2300      	movs	r3, #0
        }
    }
}
 8016012:	0018      	movs	r0, r3
 8016014:	46bd      	mov	sp, r7
 8016016:	b002      	add	sp, #8
 8016018:	bd80      	pop	{r7, pc}

0801601a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801601a:	b580      	push	{r7, lr}
 801601c:	b084      	sub	sp, #16
 801601e:	af00      	add	r7, sp, #0
 8016020:	0002      	movs	r2, r0
 8016022:	6039      	str	r1, [r7, #0]
 8016024:	1dfb      	adds	r3, r7, #7
 8016026:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8016028:	2308      	movs	r3, #8
 801602a:	18fb      	adds	r3, r7, r3
 801602c:	2200      	movs	r2, #0
 801602e:	601a      	str	r2, [r3, #0]
    switch( region )
 8016030:	1dfb      	adds	r3, r7, #7
 8016032:	781b      	ldrb	r3, [r3, #0]
 8016034:	2b05      	cmp	r3, #5
 8016036:	d109      	bne.n	801604c <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	0018      	movs	r0, r3
 801603c:	f001 fa4a 	bl	80174d4 <RegionEU868GetPhyParam>
 8016040:	0003      	movs	r3, r0
 8016042:	001a      	movs	r2, r3
 8016044:	230c      	movs	r3, #12
 8016046:	18fb      	adds	r3, r7, r3
 8016048:	601a      	str	r2, [r3, #0]
 801604a:	e005      	b.n	8016058 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801604c:	230c      	movs	r3, #12
 801604e:	18fb      	adds	r3, r7, r3
 8016050:	2208      	movs	r2, #8
 8016052:	18ba      	adds	r2, r7, r2
 8016054:	6812      	ldr	r2, [r2, #0]
 8016056:	601a      	str	r2, [r3, #0]
        }
    }
}
 8016058:	230c      	movs	r3, #12
 801605a:	18fb      	adds	r3, r7, r3
 801605c:	681a      	ldr	r2, [r3, #0]
 801605e:	0013      	movs	r3, r2
 8016060:	0018      	movs	r0, r3
 8016062:	46bd      	mov	sp, r7
 8016064:	b004      	add	sp, #16
 8016066:	bd80      	pop	{r7, pc}

08016068 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b082      	sub	sp, #8
 801606c:	af00      	add	r7, sp, #0
 801606e:	0002      	movs	r2, r0
 8016070:	6039      	str	r1, [r7, #0]
 8016072:	1dfb      	adds	r3, r7, #7
 8016074:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016076:	1dfb      	adds	r3, r7, #7
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	2b05      	cmp	r3, #5
 801607c:	d104      	bne.n	8016088 <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 801607e:	683b      	ldr	r3, [r7, #0]
 8016080:	0018      	movs	r0, r3
 8016082:	f001 fb47 	bl	8017714 <RegionEU868SetBandTxDone>
 8016086:	e000      	b.n	801608a <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016088:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801608a:	46bd      	mov	sp, r7
 801608c:	b002      	add	sp, #8
 801608e:	bd80      	pop	{r7, pc}

08016090 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	0002      	movs	r2, r0
 8016098:	6039      	str	r1, [r7, #0]
 801609a:	1dfb      	adds	r3, r7, #7
 801609c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801609e:	1dfb      	adds	r3, r7, #7
 80160a0:	781b      	ldrb	r3, [r3, #0]
 80160a2:	2b05      	cmp	r3, #5
 80160a4:	d104      	bne.n	80160b0 <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	0018      	movs	r0, r3
 80160aa:	f001 fb5f 	bl	801776c <RegionEU868InitDefaults>
 80160ae:	e000      	b.n	80160b2 <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80160b0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80160b2:	46c0      	nop			; (mov r8, r8)
 80160b4:	46bd      	mov	sp, r7
 80160b6:	b002      	add	sp, #8
 80160b8:	bd80      	pop	{r7, pc}

080160ba <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 80160ba:	b580      	push	{r7, lr}
 80160bc:	b082      	sub	sp, #8
 80160be:	af00      	add	r7, sp, #0
 80160c0:	0002      	movs	r2, r0
 80160c2:	6039      	str	r1, [r7, #0]
 80160c4:	1dfb      	adds	r3, r7, #7
 80160c6:	701a      	strb	r2, [r3, #0]
    switch( region )
 80160c8:	1dfb      	adds	r3, r7, #7
 80160ca:	781b      	ldrb	r3, [r3, #0]
 80160cc:	2b05      	cmp	r3, #5
 80160ce:	d105      	bne.n	80160dc <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	0018      	movs	r0, r3
 80160d4:	f001 fbde 	bl	8017894 <RegionEU868GetNvmCtx>
 80160d8:	0003      	movs	r3, r0
 80160da:	e000      	b.n	80160de <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 80160dc:	2300      	movs	r3, #0
        }
    }
}
 80160de:	0018      	movs	r0, r3
 80160e0:	46bd      	mov	sp, r7
 80160e2:	b002      	add	sp, #8
 80160e4:	bd80      	pop	{r7, pc}

080160e6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80160e6:	b580      	push	{r7, lr}
 80160e8:	b082      	sub	sp, #8
 80160ea:	af00      	add	r7, sp, #0
 80160ec:	6039      	str	r1, [r7, #0]
 80160ee:	0011      	movs	r1, r2
 80160f0:	1dfb      	adds	r3, r7, #7
 80160f2:	1c02      	adds	r2, r0, #0
 80160f4:	701a      	strb	r2, [r3, #0]
 80160f6:	1dbb      	adds	r3, r7, #6
 80160f8:	1c0a      	adds	r2, r1, #0
 80160fa:	701a      	strb	r2, [r3, #0]
    switch( region )
 80160fc:	1dfb      	adds	r3, r7, #7
 80160fe:	781b      	ldrb	r3, [r3, #0]
 8016100:	2b05      	cmp	r3, #5
 8016102:	d108      	bne.n	8016116 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016104:	1dbb      	adds	r3, r7, #6
 8016106:	781a      	ldrb	r2, [r3, #0]
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	0011      	movs	r1, r2
 801610c:	0018      	movs	r0, r3
 801610e:	f001 fbd1 	bl	80178b4 <RegionEU868Verify>
 8016112:	0003      	movs	r3, r0
 8016114:	e000      	b.n	8016118 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016116:	2300      	movs	r3, #0
        }
    }
}
 8016118:	0018      	movs	r0, r3
 801611a:	46bd      	mov	sp, r7
 801611c:	b002      	add	sp, #8
 801611e:	bd80      	pop	{r7, pc}

08016120 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b082      	sub	sp, #8
 8016124:	af00      	add	r7, sp, #0
 8016126:	0002      	movs	r2, r0
 8016128:	6039      	str	r1, [r7, #0]
 801612a:	1dfb      	adds	r3, r7, #7
 801612c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801612e:	1dfb      	adds	r3, r7, #7
 8016130:	781b      	ldrb	r3, [r3, #0]
 8016132:	2b05      	cmp	r3, #5
 8016134:	d104      	bne.n	8016140 <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	0018      	movs	r0, r3
 801613a:	f001 fc15 	bl	8017968 <RegionEU868ApplyCFList>
 801613e:	e000      	b.n	8016142 <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016140:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016142:	46c0      	nop			; (mov r8, r8)
 8016144:	46bd      	mov	sp, r7
 8016146:	b002      	add	sp, #8
 8016148:	bd80      	pop	{r7, pc}

0801614a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801614a:	b580      	push	{r7, lr}
 801614c:	b082      	sub	sp, #8
 801614e:	af00      	add	r7, sp, #0
 8016150:	0002      	movs	r2, r0
 8016152:	6039      	str	r1, [r7, #0]
 8016154:	1dfb      	adds	r3, r7, #7
 8016156:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016158:	1dfb      	adds	r3, r7, #7
 801615a:	781b      	ldrb	r3, [r3, #0]
 801615c:	2b05      	cmp	r3, #5
 801615e:	d105      	bne.n	801616c <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016160:	683b      	ldr	r3, [r7, #0]
 8016162:	0018      	movs	r0, r3
 8016164:	f001 fc90 	bl	8017a88 <RegionEU868ChanMaskSet>
 8016168:	0003      	movs	r3, r0
 801616a:	e000      	b.n	801616e <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801616c:	2300      	movs	r3, #0
        }
    }
}
 801616e:	0018      	movs	r0, r3
 8016170:	46bd      	mov	sp, r7
 8016172:	b002      	add	sp, #8
 8016174:	bd80      	pop	{r7, pc}

08016176 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016176:	b590      	push	{r4, r7, lr}
 8016178:	b083      	sub	sp, #12
 801617a:	af00      	add	r7, sp, #0
 801617c:	0004      	movs	r4, r0
 801617e:	0008      	movs	r0, r1
 8016180:	0011      	movs	r1, r2
 8016182:	603b      	str	r3, [r7, #0]
 8016184:	1dfb      	adds	r3, r7, #7
 8016186:	1c22      	adds	r2, r4, #0
 8016188:	701a      	strb	r2, [r3, #0]
 801618a:	1dbb      	adds	r3, r7, #6
 801618c:	1c02      	adds	r2, r0, #0
 801618e:	701a      	strb	r2, [r3, #0]
 8016190:	1d7b      	adds	r3, r7, #5
 8016192:	1c0a      	adds	r2, r1, #0
 8016194:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016196:	1dfb      	adds	r3, r7, #7
 8016198:	781b      	ldrb	r3, [r3, #0]
 801619a:	2b05      	cmp	r3, #5
 801619c:	d10a      	bne.n	80161b4 <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801619e:	69bc      	ldr	r4, [r7, #24]
 80161a0:	683a      	ldr	r2, [r7, #0]
 80161a2:	1d7b      	adds	r3, r7, #5
 80161a4:	7819      	ldrb	r1, [r3, #0]
 80161a6:	1dbb      	adds	r3, r7, #6
 80161a8:	2000      	movs	r0, #0
 80161aa:	5618      	ldrsb	r0, [r3, r0]
 80161ac:	0023      	movs	r3, r4
 80161ae:	f001 fc91 	bl	8017ad4 <RegionEU868ComputeRxWindowParameters>
 80161b2:	e000      	b.n	80161b6 <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80161b4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80161b6:	46c0      	nop			; (mov r8, r8)
 80161b8:	46bd      	mov	sp, r7
 80161ba:	b003      	add	sp, #12
 80161bc:	bd90      	pop	{r4, r7, pc}

080161be <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80161be:	b580      	push	{r7, lr}
 80161c0:	b084      	sub	sp, #16
 80161c2:	af00      	add	r7, sp, #0
 80161c4:	60b9      	str	r1, [r7, #8]
 80161c6:	607a      	str	r2, [r7, #4]
 80161c8:	210f      	movs	r1, #15
 80161ca:	187b      	adds	r3, r7, r1
 80161cc:	1c02      	adds	r2, r0, #0
 80161ce:	701a      	strb	r2, [r3, #0]
    switch( region )
 80161d0:	187b      	adds	r3, r7, r1
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	2b05      	cmp	r3, #5
 80161d6:	d107      	bne.n	80161e8 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80161d8:	687a      	ldr	r2, [r7, #4]
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	0011      	movs	r1, r2
 80161de:	0018      	movs	r0, r3
 80161e0:	f001 fcda 	bl	8017b98 <RegionEU868RxConfig>
 80161e4:	0003      	movs	r3, r0
 80161e6:	e000      	b.n	80161ea <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80161e8:	2300      	movs	r3, #0
        }
    }
}
 80161ea:	0018      	movs	r0, r3
 80161ec:	46bd      	mov	sp, r7
 80161ee:	b004      	add	sp, #16
 80161f0:	bd80      	pop	{r7, pc}

080161f2 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80161f2:	b580      	push	{r7, lr}
 80161f4:	b084      	sub	sp, #16
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	60b9      	str	r1, [r7, #8]
 80161fa:	607a      	str	r2, [r7, #4]
 80161fc:	603b      	str	r3, [r7, #0]
 80161fe:	210f      	movs	r1, #15
 8016200:	187b      	adds	r3, r7, r1
 8016202:	1c02      	adds	r2, r0, #0
 8016204:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016206:	187b      	adds	r3, r7, r1
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	2b05      	cmp	r3, #5
 801620c:	d107      	bne.n	801621e <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801620e:	683a      	ldr	r2, [r7, #0]
 8016210:	6879      	ldr	r1, [r7, #4]
 8016212:	68bb      	ldr	r3, [r7, #8]
 8016214:	0018      	movs	r0, r3
 8016216:	f001 fdb3 	bl	8017d80 <RegionEU868TxConfig>
 801621a:	0003      	movs	r3, r0
 801621c:	e000      	b.n	8016220 <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801621e:	2300      	movs	r3, #0
        }
    }
}
 8016220:	0018      	movs	r0, r3
 8016222:	46bd      	mov	sp, r7
 8016224:	b004      	add	sp, #16
 8016226:	bd80      	pop	{r7, pc}

08016228 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016228:	b590      	push	{r4, r7, lr}
 801622a:	b087      	sub	sp, #28
 801622c:	af02      	add	r7, sp, #8
 801622e:	60b9      	str	r1, [r7, #8]
 8016230:	607a      	str	r2, [r7, #4]
 8016232:	603b      	str	r3, [r7, #0]
 8016234:	210f      	movs	r1, #15
 8016236:	187b      	adds	r3, r7, r1
 8016238:	1c02      	adds	r2, r0, #0
 801623a:	701a      	strb	r2, [r3, #0]
    switch( region )
 801623c:	187b      	adds	r3, r7, r1
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	2b05      	cmp	r3, #5
 8016242:	d10a      	bne.n	801625a <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016244:	6a3c      	ldr	r4, [r7, #32]
 8016246:	683a      	ldr	r2, [r7, #0]
 8016248:	6879      	ldr	r1, [r7, #4]
 801624a:	68b8      	ldr	r0, [r7, #8]
 801624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624e:	9300      	str	r3, [sp, #0]
 8016250:	0023      	movs	r3, r4
 8016252:	f001 fe81 	bl	8017f58 <RegionEU868LinkAdrReq>
 8016256:	0003      	movs	r3, r0
 8016258:	e000      	b.n	801625c <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801625a:	2300      	movs	r3, #0
        }
    }
}
 801625c:	0018      	movs	r0, r3
 801625e:	46bd      	mov	sp, r7
 8016260:	b005      	add	sp, #20
 8016262:	bd90      	pop	{r4, r7, pc}

08016264 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	0002      	movs	r2, r0
 801626c:	6039      	str	r1, [r7, #0]
 801626e:	1dfb      	adds	r3, r7, #7
 8016270:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016272:	1dfb      	adds	r3, r7, #7
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	2b05      	cmp	r3, #5
 8016278:	d105      	bne.n	8016286 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	0018      	movs	r0, r3
 801627e:	f001 ffc3 	bl	8018208 <RegionEU868RxParamSetupReq>
 8016282:	0003      	movs	r3, r0
 8016284:	e000      	b.n	8016288 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016286:	2300      	movs	r3, #0
        }
    }
}
 8016288:	0018      	movs	r0, r3
 801628a:	46bd      	mov	sp, r7
 801628c:	b002      	add	sp, #8
 801628e:	bd80      	pop	{r7, pc}

08016290 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b082      	sub	sp, #8
 8016294:	af00      	add	r7, sp, #0
 8016296:	0002      	movs	r2, r0
 8016298:	6039      	str	r1, [r7, #0]
 801629a:	1dfb      	adds	r3, r7, #7
 801629c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801629e:	1dfb      	adds	r3, r7, #7
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	2b05      	cmp	r3, #5
 80162a4:	d105      	bne.n	80162b2 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80162a6:	683b      	ldr	r3, [r7, #0]
 80162a8:	0018      	movs	r0, r3
 80162aa:	f001 fff6 	bl	801829a <RegionEU868NewChannelReq>
 80162ae:	0003      	movs	r3, r0
 80162b0:	e000      	b.n	80162b4 <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80162b2:	2300      	movs	r3, #0
        }
    }
}
 80162b4:	0018      	movs	r0, r3
 80162b6:	46bd      	mov	sp, r7
 80162b8:	b002      	add	sp, #8
 80162ba:	bd80      	pop	{r7, pc}

080162bc <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b082      	sub	sp, #8
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	0002      	movs	r2, r0
 80162c4:	6039      	str	r1, [r7, #0]
 80162c6:	1dfb      	adds	r3, r7, #7
 80162c8:	701a      	strb	r2, [r3, #0]
    switch( region )
 80162ca:	1dfb      	adds	r3, r7, #7
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	2b05      	cmp	r3, #5
 80162d0:	d105      	bne.n	80162de <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80162d2:	683b      	ldr	r3, [r7, #0]
 80162d4:	0018      	movs	r0, r3
 80162d6:	f002 f848 	bl	801836a <RegionEU868TxParamSetupReq>
 80162da:	0003      	movs	r3, r0
 80162dc:	e000      	b.n	80162e0 <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80162de:	2300      	movs	r3, #0
        }
    }
}
 80162e0:	0018      	movs	r0, r3
 80162e2:	46bd      	mov	sp, r7
 80162e4:	b002      	add	sp, #8
 80162e6:	bd80      	pop	{r7, pc}

080162e8 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b082      	sub	sp, #8
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	0002      	movs	r2, r0
 80162f0:	6039      	str	r1, [r7, #0]
 80162f2:	1dfb      	adds	r3, r7, #7
 80162f4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80162f6:	1dfb      	adds	r3, r7, #7
 80162f8:	781b      	ldrb	r3, [r3, #0]
 80162fa:	2b05      	cmp	r3, #5
 80162fc:	d105      	bne.n	801630a <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	0018      	movs	r0, r3
 8016302:	f002 f83d 	bl	8018380 <RegionEU868DlChannelReq>
 8016306:	0003      	movs	r3, r0
 8016308:	e000      	b.n	801630c <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801630a:	2300      	movs	r3, #0
        }
    }
}
 801630c:	0018      	movs	r0, r3
 801630e:	46bd      	mov	sp, r7
 8016310:	b002      	add	sp, #8
 8016312:	bd80      	pop	{r7, pc}

08016314 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016314:	b590      	push	{r4, r7, lr}
 8016316:	b083      	sub	sp, #12
 8016318:	af00      	add	r7, sp, #0
 801631a:	0004      	movs	r4, r0
 801631c:	0008      	movs	r0, r1
 801631e:	0011      	movs	r1, r2
 8016320:	1dfb      	adds	r3, r7, #7
 8016322:	1c22      	adds	r2, r4, #0
 8016324:	701a      	strb	r2, [r3, #0]
 8016326:	1dbb      	adds	r3, r7, #6
 8016328:	1c02      	adds	r2, r0, #0
 801632a:	701a      	strb	r2, [r3, #0]
 801632c:	1d7b      	adds	r3, r7, #5
 801632e:	1c0a      	adds	r2, r1, #0
 8016330:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016332:	1dfb      	adds	r3, r7, #7
 8016334:	781b      	ldrb	r3, [r3, #0]
 8016336:	2b05      	cmp	r3, #5
 8016338:	d10a      	bne.n	8016350 <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 801633a:	1d7b      	adds	r3, r7, #5
 801633c:	781a      	ldrb	r2, [r3, #0]
 801633e:	1dbb      	adds	r3, r7, #6
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	b25b      	sxtb	r3, r3
 8016344:	0011      	movs	r1, r2
 8016346:	0018      	movs	r0, r3
 8016348:	f002 f868 	bl	801841c <RegionEU868AlternateDr>
 801634c:	0003      	movs	r3, r0
 801634e:	e000      	b.n	8016352 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016350:	2300      	movs	r3, #0
        }
    }
}
 8016352:	0018      	movs	r0, r3
 8016354:	46bd      	mov	sp, r7
 8016356:	b003      	add	sp, #12
 8016358:	bd90      	pop	{r4, r7, pc}

0801635a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801635a:	b580      	push	{r7, lr}
 801635c:	b084      	sub	sp, #16
 801635e:	af00      	add	r7, sp, #0
 8016360:	60b9      	str	r1, [r7, #8]
 8016362:	607a      	str	r2, [r7, #4]
 8016364:	603b      	str	r3, [r7, #0]
 8016366:	210f      	movs	r1, #15
 8016368:	187b      	adds	r3, r7, r1
 801636a:	1c02      	adds	r2, r0, #0
 801636c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801636e:	187b      	adds	r3, r7, r1
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	2b05      	cmp	r3, #5
 8016374:	d107      	bne.n	8016386 <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016376:	69bb      	ldr	r3, [r7, #24]
 8016378:	683a      	ldr	r2, [r7, #0]
 801637a:	6879      	ldr	r1, [r7, #4]
 801637c:	68b8      	ldr	r0, [r7, #8]
 801637e:	f002 f85d 	bl	801843c <RegionEU868NextChannel>
 8016382:	0003      	movs	r3, r0
 8016384:	e000      	b.n	8016388 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016386:	2309      	movs	r3, #9
        }
    }
}
 8016388:	0018      	movs	r0, r3
 801638a:	46bd      	mov	sp, r7
 801638c:	b004      	add	sp, #16
 801638e:	bd80      	pop	{r7, pc}

08016390 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b082      	sub	sp, #8
 8016394:	af00      	add	r7, sp, #0
 8016396:	0002      	movs	r2, r0
 8016398:	6039      	str	r1, [r7, #0]
 801639a:	1dfb      	adds	r3, r7, #7
 801639c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801639e:	1dfb      	adds	r3, r7, #7
 80163a0:	781b      	ldrb	r3, [r3, #0]
 80163a2:	2b05      	cmp	r3, #5
 80163a4:	d104      	bne.n	80163b0 <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 80163a6:	683b      	ldr	r3, [r7, #0]
 80163a8:	0018      	movs	r0, r3
 80163aa:	f002 f9f1 	bl	8018790 <RegionEU868SetContinuousWave>
 80163ae:	e000      	b.n	80163b2 <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80163b0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80163b2:	46c0      	nop			; (mov r8, r8)
 80163b4:	46bd      	mov	sp, r7
 80163b6:	b002      	add	sp, #8
 80163b8:	bd80      	pop	{r7, pc}

080163ba <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80163ba:	b5b0      	push	{r4, r5, r7, lr}
 80163bc:	b082      	sub	sp, #8
 80163be:	af00      	add	r7, sp, #0
 80163c0:	0005      	movs	r5, r0
 80163c2:	000c      	movs	r4, r1
 80163c4:	0010      	movs	r0, r2
 80163c6:	0019      	movs	r1, r3
 80163c8:	1dfb      	adds	r3, r7, #7
 80163ca:	1c2a      	adds	r2, r5, #0
 80163cc:	701a      	strb	r2, [r3, #0]
 80163ce:	1dbb      	adds	r3, r7, #6
 80163d0:	1c22      	adds	r2, r4, #0
 80163d2:	701a      	strb	r2, [r3, #0]
 80163d4:	1d7b      	adds	r3, r7, #5
 80163d6:	1c02      	adds	r2, r0, #0
 80163d8:	701a      	strb	r2, [r3, #0]
 80163da:	1d3b      	adds	r3, r7, #4
 80163dc:	1c0a      	adds	r2, r1, #0
 80163de:	701a      	strb	r2, [r3, #0]
    switch( region )
 80163e0:	1dfb      	adds	r3, r7, #7
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	2b05      	cmp	r3, #5
 80163e6:	d10c      	bne.n	8016402 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80163e8:	1d3b      	adds	r3, r7, #4
 80163ea:	2200      	movs	r2, #0
 80163ec:	569a      	ldrsb	r2, [r3, r2]
 80163ee:	1d7b      	adds	r3, r7, #5
 80163f0:	2100      	movs	r1, #0
 80163f2:	5659      	ldrsb	r1, [r3, r1]
 80163f4:	1dbb      	adds	r3, r7, #6
 80163f6:	781b      	ldrb	r3, [r3, #0]
 80163f8:	0018      	movs	r0, r3
 80163fa:	f002 fa21 	bl	8018840 <RegionEU868ApplyDrOffset>
 80163fe:	0003      	movs	r3, r0
 8016400:	e001      	b.n	8016406 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8016402:	1d7b      	adds	r3, r7, #5
 8016404:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8016406:	0018      	movs	r0, r3
 8016408:	46bd      	mov	sp, r7
 801640a:	b002      	add	sp, #8
 801640c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016410 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8016416:	4b03      	ldr	r3, [pc, #12]	; (8016424 <RegionGetVersion+0x14>)
 8016418:	607b      	str	r3, [r7, #4]

    return version;
 801641a:	687b      	ldr	r3, [r7, #4]
}
 801641c:	0018      	movs	r0, r3
 801641e:	46bd      	mov	sp, r7
 8016420:	b002      	add	sp, #8
 8016422:	bd80      	pop	{r7, pc}
 8016424:	01000300 	.word	0x01000300

08016428 <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801642a:	b087      	sub	sp, #28
 801642c:	af00      	add	r7, sp, #0
 801642e:	60f8      	str	r0, [r7, #12]
 8016430:	0008      	movs	r0, r1
 8016432:	0039      	movs	r1, r7
 8016434:	600a      	str	r2, [r1, #0]
 8016436:	604b      	str	r3, [r1, #4]
 8016438:	230b      	movs	r3, #11
 801643a:	18fb      	adds	r3, r7, r3
 801643c:	1c02      	adds	r2, r0, #0
 801643e:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8016440:	2514      	movs	r5, #20
 8016442:	197c      	adds	r4, r7, r5
 8016444:	003b      	movs	r3, r7
 8016446:	6818      	ldr	r0, [r3, #0]
 8016448:	6859      	ldr	r1, [r3, #4]
 801644a:	f000 f91b 	bl	8016684 <RegionCommonGetJoinDc>
 801644e:	0003      	movs	r3, r0
 8016450:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 8016452:	2616      	movs	r6, #22
 8016454:	19bb      	adds	r3, r7, r6
 8016456:	68fa      	ldr	r2, [r7, #12]
 8016458:	8812      	ldrh	r2, [r2, #0]
 801645a:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 801645c:	230b      	movs	r3, #11
 801645e:	18fb      	adds	r3, r7, r3
 8016460:	781b      	ldrb	r3, [r3, #0]
 8016462:	2201      	movs	r2, #1
 8016464:	4053      	eors	r3, r2
 8016466:	b2db      	uxtb	r3, r3
 8016468:	2b00      	cmp	r3, #0
 801646a:	d012      	beq.n	8016492 <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 801646c:	197c      	adds	r4, r7, r5
 801646e:	003b      	movs	r3, r7
 8016470:	6818      	ldr	r0, [r3, #0]
 8016472:	6859      	ldr	r1, [r3, #4]
 8016474:	f000 f906 	bl	8016684 <RegionCommonGetJoinDc>
 8016478:	0003      	movs	r3, r0
 801647a:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801647c:	19ba      	adds	r2, r7, r6
 801647e:	197b      	adds	r3, r7, r5
 8016480:	19b9      	adds	r1, r7, r6
 8016482:	880c      	ldrh	r4, [r1, #0]
 8016484:	881b      	ldrh	r3, [r3, #0]
 8016486:	b298      	uxth	r0, r3
 8016488:	b2a1      	uxth	r1, r4
 801648a:	4288      	cmp	r0, r1
 801648c:	d200      	bcs.n	8016490 <GetDutyCycle+0x68>
 801648e:	1c23      	adds	r3, r4, #0
 8016490:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016492:	2216      	movs	r2, #22
 8016494:	18bb      	adds	r3, r7, r2
 8016496:	881b      	ldrh	r3, [r3, #0]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d102      	bne.n	80164a2 <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 801649c:	18bb      	adds	r3, r7, r2
 801649e:	2201      	movs	r2, #1
 80164a0:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 80164a2:	2316      	movs	r3, #22
 80164a4:	18fb      	adds	r3, r7, r3
 80164a6:	881b      	ldrh	r3, [r3, #0]
}
 80164a8:	0018      	movs	r0, r3
 80164aa:	46bd      	mov	sp, r7
 80164ac:	b007      	add	sp, #28
 80164ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080164b0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80164b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164b2:	b087      	sub	sp, #28
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	60f8      	str	r0, [r7, #12]
 80164b8:	0008      	movs	r0, r1
 80164ba:	0039      	movs	r1, r7
 80164bc:	600a      	str	r2, [r1, #0]
 80164be:	604b      	str	r3, [r1, #4]
 80164c0:	210b      	movs	r1, #11
 80164c2:	187b      	adds	r3, r7, r1
 80164c4:	1c02      	adds	r2, r0, #0
 80164c6:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 80164c8:	2614      	movs	r6, #20
 80164ca:	19bb      	adds	r3, r7, r6
 80164cc:	68fa      	ldr	r2, [r7, #12]
 80164ce:	8812      	ldrh	r2, [r2, #0]
 80164d0:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 80164d2:	2317      	movs	r3, #23
 80164d4:	18fb      	adds	r3, r7, r3
 80164d6:	2201      	movs	r2, #1
 80164d8:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80164da:	19bc      	adds	r4, r7, r6
 80164dc:	003b      	movs	r3, r7
 80164de:	000d      	movs	r5, r1
 80164e0:	187a      	adds	r2, r7, r1
 80164e2:	7811      	ldrb	r1, [r2, #0]
 80164e4:	68f8      	ldr	r0, [r7, #12]
 80164e6:	681a      	ldr	r2, [r3, #0]
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	f7ff ff9d 	bl	8016428 <GetDutyCycle>
 80164ee:	0003      	movs	r3, r0
 80164f0:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 80164f2:	197b      	adds	r3, r7, r5
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	2201      	movs	r2, #1
 80164f8:	4053      	eors	r3, r2
 80164fa:	b2db      	uxtb	r3, r3
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d00a      	beq.n	8016516 <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 8016500:	19bb      	adds	r3, r7, r6
 8016502:	881b      	ldrh	r3, [r3, #0]
 8016504:	2164      	movs	r1, #100	; 0x64
 8016506:	0018      	movs	r0, r3
 8016508:	f7e9 fe06 	bl	8000118 <__udivsi3>
 801650c:	0003      	movs	r3, r0
 801650e:	b29a      	uxth	r2, r3
 8016510:	2317      	movs	r3, #23
 8016512:	18fb      	adds	r3, r7, r3
 8016514:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 8016516:	2317      	movs	r3, #23
 8016518:	18fb      	adds	r3, r7, r3
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	4a09      	ldr	r2, [pc, #36]	; (8016544 <SetMaxTimeCredits+0x94>)
 801651e:	4353      	muls	r3, r2
 8016520:	001a      	movs	r2, r3
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	685b      	ldr	r3, [r3, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d103      	bne.n	8016536 <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	68da      	ldr	r2, [r3, #12]
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 8016536:	2314      	movs	r3, #20
 8016538:	18fb      	adds	r3, r7, r3
 801653a:	881b      	ldrh	r3, [r3, #0]
}
 801653c:	0018      	movs	r0, r3
 801653e:	46bd      	mov	sp, r7
 8016540:	b007      	add	sp, #28
 8016542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016544:	0036ee80 	.word	0x0036ee80

08016548 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016548:	b590      	push	{r4, r7, lr}
 801654a:	b085      	sub	sp, #20
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	000c      	movs	r4, r1
 8016552:	0010      	movs	r0, r2
 8016554:	0019      	movs	r1, r3
 8016556:	1cfb      	adds	r3, r7, #3
 8016558:	1c22      	adds	r2, r4, #0
 801655a:	701a      	strb	r2, [r3, #0]
 801655c:	1cbb      	adds	r3, r7, #2
 801655e:	1c02      	adds	r2, r0, #0
 8016560:	701a      	strb	r2, [r3, #0]
 8016562:	1c7b      	adds	r3, r7, #1
 8016564:	1c0a      	adds	r2, r1, #0
 8016566:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 8016568:	230e      	movs	r3, #14
 801656a:	18fc      	adds	r4, r7, r3
 801656c:	2320      	movs	r3, #32
 801656e:	18fb      	adds	r3, r7, r3
 8016570:	1cfa      	adds	r2, r7, #3
 8016572:	7811      	ldrb	r1, [r2, #0]
 8016574:	6878      	ldr	r0, [r7, #4]
 8016576:	681a      	ldr	r2, [r3, #0]
 8016578:	685b      	ldr	r3, [r3, #4]
 801657a:	f7ff ff99 	bl	80164b0 <SetMaxTimeCredits>
 801657e:	0003      	movs	r3, r0
 8016580:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8016582:	1cfb      	adds	r3, r7, #3
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	2201      	movs	r2, #1
 8016588:	4053      	eors	r3, r2
 801658a:	b2db      	uxtb	r3, r3
 801658c:	2b00      	cmp	r3, #0
 801658e:	d012      	beq.n	80165b6 <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 8016590:	1cbb      	adds	r3, r7, #2
 8016592:	781b      	ldrb	r3, [r3, #0]
 8016594:	2201      	movs	r2, #1
 8016596:	4053      	eors	r3, r2
 8016598:	b2db      	uxtb	r3, r3
 801659a:	2b00      	cmp	r3, #0
 801659c:	d016      	beq.n	80165cc <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 801659e:	1c7b      	adds	r3, r7, #1
 80165a0:	781b      	ldrb	r3, [r3, #0]
 80165a2:	2201      	movs	r2, #1
 80165a4:	4053      	eors	r3, r2
 80165a6:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d00f      	beq.n	80165cc <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	68da      	ldr	r2, [r3, #12]
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	609a      	str	r2, [r3, #8]
 80165b4:	e00a      	b.n	80165cc <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80165b6:	1cbb      	adds	r3, r7, #2
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	2201      	movs	r2, #1
 80165bc:	4053      	eors	r3, r2
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d003      	beq.n	80165cc <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	68da      	ldr	r2, [r3, #12]
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	685b      	ldr	r3, [r3, #4]
 80165d0:	0018      	movs	r0, r3
 80165d2:	f005 fe59 	bl	801c288 <UTIL_TIMER_GetElapsedTime>
 80165d6:	0002      	movs	r2, r0
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	689b      	ldr	r3, [r3, #8]
 80165dc:	18d2      	adds	r2, r2, r3
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	689a      	ldr	r2, [r3, #8]
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	68db      	ldr	r3, [r3, #12]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d903      	bls.n	80165f6 <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	68da      	ldr	r2, [r3, #12]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80165fa:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80165fc:	230e      	movs	r3, #14
 80165fe:	18fb      	adds	r3, r7, r3
 8016600:	881b      	ldrh	r3, [r3, #0]
}
 8016602:	0018      	movs	r0, r3
 8016604:	46bd      	mov	sp, r7
 8016606:	b005      	add	sp, #20
 8016608:	bd90      	pop	{r4, r7, pc}

0801660a <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801660a:	b580      	push	{r7, lr}
 801660c:	b084      	sub	sp, #16
 801660e:	af00      	add	r7, sp, #0
 8016610:	0002      	movs	r2, r0
 8016612:	1dbb      	adds	r3, r7, #6
 8016614:	801a      	strh	r2, [r3, #0]
 8016616:	1d7b      	adds	r3, r7, #5
 8016618:	1c0a      	adds	r2, r1, #0
 801661a:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 801661c:	230f      	movs	r3, #15
 801661e:	18fb      	adds	r3, r7, r3
 8016620:	2200      	movs	r2, #0
 8016622:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016624:	230e      	movs	r3, #14
 8016626:	18fb      	adds	r3, r7, r3
 8016628:	2200      	movs	r2, #0
 801662a:	701a      	strb	r2, [r3, #0]
 801662c:	e01b      	b.n	8016666 <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801662e:	1dbb      	adds	r3, r7, #6
 8016630:	881b      	ldrh	r3, [r3, #0]
 8016632:	200e      	movs	r0, #14
 8016634:	183a      	adds	r2, r7, r0
 8016636:	7812      	ldrb	r2, [r2, #0]
 8016638:	2101      	movs	r1, #1
 801663a:	4091      	lsls	r1, r2
 801663c:	000a      	movs	r2, r1
 801663e:	401a      	ands	r2, r3
 8016640:	183b      	adds	r3, r7, r0
 8016642:	781b      	ldrb	r3, [r3, #0]
 8016644:	2101      	movs	r1, #1
 8016646:	4099      	lsls	r1, r3
 8016648:	000b      	movs	r3, r1
 801664a:	429a      	cmp	r2, r3
 801664c:	d105      	bne.n	801665a <CountChannels+0x50>
        {
            nbActiveBits++;
 801664e:	210f      	movs	r1, #15
 8016650:	187b      	adds	r3, r7, r1
 8016652:	781a      	ldrb	r2, [r3, #0]
 8016654:	187b      	adds	r3, r7, r1
 8016656:	3201      	adds	r2, #1
 8016658:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 801665a:	210e      	movs	r1, #14
 801665c:	187b      	adds	r3, r7, r1
 801665e:	781a      	ldrb	r2, [r3, #0]
 8016660:	187b      	adds	r3, r7, r1
 8016662:	3201      	adds	r2, #1
 8016664:	701a      	strb	r2, [r3, #0]
 8016666:	230e      	movs	r3, #14
 8016668:	18fa      	adds	r2, r7, r3
 801666a:	1d7b      	adds	r3, r7, #5
 801666c:	7812      	ldrb	r2, [r2, #0]
 801666e:	781b      	ldrb	r3, [r3, #0]
 8016670:	429a      	cmp	r2, r3
 8016672:	d3dc      	bcc.n	801662e <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8016674:	230f      	movs	r3, #15
 8016676:	18fb      	adds	r3, r7, r3
 8016678:	781b      	ldrb	r3, [r3, #0]
}
 801667a:	0018      	movs	r0, r3
 801667c:	46bd      	mov	sp, r7
 801667e:	b004      	add	sp, #16
 8016680:	bd80      	pop	{r7, pc}
	...

08016684 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b084      	sub	sp, #16
 8016688:	af00      	add	r7, sp, #0
 801668a:	003b      	movs	r3, r7
 801668c:	6018      	str	r0, [r3, #0]
 801668e:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 8016690:	210e      	movs	r1, #14
 8016692:	187b      	adds	r3, r7, r1
 8016694:	2200      	movs	r2, #0
 8016696:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 8016698:	003b      	movs	r3, r7
 801669a:	681a      	ldr	r2, [r3, #0]
 801669c:	23e1      	movs	r3, #225	; 0xe1
 801669e:	011b      	lsls	r3, r3, #4
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d203      	bcs.n	80166ac <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 80166a4:	187b      	adds	r3, r7, r1
 80166a6:	2264      	movs	r2, #100	; 0x64
 80166a8:	801a      	strh	r2, [r3, #0]
 80166aa:	e00e      	b.n	80166ca <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 80166ac:	003b      	movs	r3, r7
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	4a09      	ldr	r2, [pc, #36]	; (80166d8 <RegionCommonGetJoinDc+0x54>)
 80166b2:	4293      	cmp	r3, r2
 80166b4:	d805      	bhi.n	80166c2 <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 80166b6:	230e      	movs	r3, #14
 80166b8:	18fb      	adds	r3, r7, r3
 80166ba:	22fa      	movs	r2, #250	; 0xfa
 80166bc:	0092      	lsls	r2, r2, #2
 80166be:	801a      	strh	r2, [r3, #0]
 80166c0:	e003      	b.n	80166ca <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 80166c2:	230e      	movs	r3, #14
 80166c4:	18fb      	adds	r3, r7, r3
 80166c6:	4a05      	ldr	r2, [pc, #20]	; (80166dc <RegionCommonGetJoinDc+0x58>)
 80166c8:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 80166ca:	230e      	movs	r3, #14
 80166cc:	18fb      	adds	r3, r7, r3
 80166ce:	881b      	ldrh	r3, [r3, #0]
}
 80166d0:	0018      	movs	r0, r3
 80166d2:	46bd      	mov	sp, r7
 80166d4:	b004      	add	sp, #16
 80166d6:	bd80      	pop	{r7, pc}
 80166d8:	00009aaf 	.word	0x00009aaf
 80166dc:	00002710 	.word	0x00002710

080166e0 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80166e0:	b590      	push	{r4, r7, lr}
 80166e2:	b085      	sub	sp, #20
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	0004      	movs	r4, r0
 80166e8:	6039      	str	r1, [r7, #0]
 80166ea:	0010      	movs	r0, r2
 80166ec:	0019      	movs	r1, r3
 80166ee:	1dfb      	adds	r3, r7, #7
 80166f0:	1c22      	adds	r2, r4, #0
 80166f2:	701a      	strb	r2, [r3, #0]
 80166f4:	1dbb      	adds	r3, r7, #6
 80166f6:	1c02      	adds	r2, r0, #0
 80166f8:	701a      	strb	r2, [r3, #0]
 80166fa:	1d7b      	adds	r3, r7, #5
 80166fc:	1c0a      	adds	r2, r1, #0
 80166fe:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016700:	2320      	movs	r3, #32
 8016702:	18fb      	adds	r3, r7, r3
 8016704:	2200      	movs	r2, #0
 8016706:	569a      	ldrsb	r2, [r3, r2]
 8016708:	1d7b      	adds	r3, r7, #5
 801670a:	2100      	movs	r1, #0
 801670c:	5659      	ldrsb	r1, [r3, r1]
 801670e:	1dbb      	adds	r3, r7, #6
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	b25b      	sxtb	r3, r3
 8016714:	0018      	movs	r0, r3
 8016716:	f000 f87c 	bl	8016812 <RegionCommonValueInRange>
 801671a:	1e03      	subs	r3, r0, #0
 801671c:	d101      	bne.n	8016722 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 801671e:	2300      	movs	r3, #0
 8016720:	e073      	b.n	801680a <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016722:	230f      	movs	r3, #15
 8016724:	18fb      	adds	r3, r7, r3
 8016726:	2200      	movs	r2, #0
 8016728:	701a      	strb	r2, [r3, #0]
 801672a:	230e      	movs	r3, #14
 801672c:	18fb      	adds	r3, r7, r3
 801672e:	2200      	movs	r2, #0
 8016730:	701a      	strb	r2, [r3, #0]
 8016732:	e062      	b.n	80167fa <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016734:	230d      	movs	r3, #13
 8016736:	18fb      	adds	r3, r7, r3
 8016738:	2200      	movs	r2, #0
 801673a:	701a      	strb	r2, [r3, #0]
 801673c:	e04c      	b.n	80167d8 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801673e:	230e      	movs	r3, #14
 8016740:	18fb      	adds	r3, r7, r3
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	005b      	lsls	r3, r3, #1
 8016746:	683a      	ldr	r2, [r7, #0]
 8016748:	18d3      	adds	r3, r2, r3
 801674a:	881b      	ldrh	r3, [r3, #0]
 801674c:	001a      	movs	r2, r3
 801674e:	200d      	movs	r0, #13
 8016750:	183b      	adds	r3, r7, r0
 8016752:	781b      	ldrb	r3, [r3, #0]
 8016754:	411a      	asrs	r2, r3
 8016756:	0013      	movs	r3, r2
 8016758:	2201      	movs	r2, #1
 801675a:	4013      	ands	r3, r2
 801675c:	d036      	beq.n	80167cc <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801675e:	240f      	movs	r4, #15
 8016760:	193b      	adds	r3, r7, r4
 8016762:	781a      	ldrb	r2, [r3, #0]
 8016764:	183b      	adds	r3, r7, r0
 8016766:	781b      	ldrb	r3, [r3, #0]
 8016768:	18d3      	adds	r3, r2, r3
 801676a:	001a      	movs	r2, r3
 801676c:	0013      	movs	r3, r2
 801676e:	005b      	lsls	r3, r3, #1
 8016770:	189b      	adds	r3, r3, r2
 8016772:	009b      	lsls	r3, r3, #2
 8016774:	001a      	movs	r2, r3
 8016776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016778:	189b      	adds	r3, r3, r2
 801677a:	7a1b      	ldrb	r3, [r3, #8]
 801677c:	011b      	lsls	r3, r3, #4
 801677e:	b25b      	sxtb	r3, r3
 8016780:	111b      	asrs	r3, r3, #4
 8016782:	b25b      	sxtb	r3, r3
 8016784:	001a      	movs	r2, r3
 8016786:	230f      	movs	r3, #15
 8016788:	4013      	ands	r3, r2
 801678a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801678c:	193b      	adds	r3, r7, r4
 801678e:	781a      	ldrb	r2, [r3, #0]
 8016790:	183b      	adds	r3, r7, r0
 8016792:	781b      	ldrb	r3, [r3, #0]
 8016794:	18d3      	adds	r3, r2, r3
 8016796:	001a      	movs	r2, r3
 8016798:	0013      	movs	r3, r2
 801679a:	005b      	lsls	r3, r3, #1
 801679c:	189b      	adds	r3, r3, r2
 801679e:	009b      	lsls	r3, r3, #2
 80167a0:	001a      	movs	r2, r3
 80167a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a4:	189b      	adds	r3, r3, r2
 80167a6:	7a1b      	ldrb	r3, [r3, #8]
 80167a8:	b25b      	sxtb	r3, r3
 80167aa:	111b      	asrs	r3, r3, #4
 80167ac:	b25b      	sxtb	r3, r3
 80167ae:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80167b0:	230f      	movs	r3, #15
 80167b2:	4013      	ands	r3, r2
 80167b4:	b25a      	sxtb	r2, r3
 80167b6:	1dbb      	adds	r3, r7, #6
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	b25b      	sxtb	r3, r3
 80167bc:	0018      	movs	r0, r3
 80167be:	f000 f828 	bl	8016812 <RegionCommonValueInRange>
 80167c2:	0003      	movs	r3, r0
 80167c4:	2b01      	cmp	r3, #1
 80167c6:	d101      	bne.n	80167cc <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80167c8:	2301      	movs	r3, #1
 80167ca:	e01e      	b.n	801680a <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 80167cc:	210d      	movs	r1, #13
 80167ce:	187b      	adds	r3, r7, r1
 80167d0:	781a      	ldrb	r2, [r3, #0]
 80167d2:	187b      	adds	r3, r7, r1
 80167d4:	3201      	adds	r2, #1
 80167d6:	701a      	strb	r2, [r3, #0]
 80167d8:	230d      	movs	r3, #13
 80167da:	18fb      	adds	r3, r7, r3
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	2b0f      	cmp	r3, #15
 80167e0:	d9ad      	bls.n	801673e <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80167e2:	220f      	movs	r2, #15
 80167e4:	18bb      	adds	r3, r7, r2
 80167e6:	18ba      	adds	r2, r7, r2
 80167e8:	7812      	ldrb	r2, [r2, #0]
 80167ea:	3210      	adds	r2, #16
 80167ec:	701a      	strb	r2, [r3, #0]
 80167ee:	210e      	movs	r1, #14
 80167f0:	187b      	adds	r3, r7, r1
 80167f2:	781a      	ldrb	r2, [r3, #0]
 80167f4:	187b      	adds	r3, r7, r1
 80167f6:	3201      	adds	r2, #1
 80167f8:	701a      	strb	r2, [r3, #0]
 80167fa:	230f      	movs	r3, #15
 80167fc:	18fa      	adds	r2, r7, r3
 80167fe:	1dfb      	adds	r3, r7, #7
 8016800:	7812      	ldrb	r2, [r2, #0]
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	429a      	cmp	r2, r3
 8016806:	d395      	bcc.n	8016734 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8016808:	2300      	movs	r3, #0
}
 801680a:	0018      	movs	r0, r3
 801680c:	46bd      	mov	sp, r7
 801680e:	b005      	add	sp, #20
 8016810:	bd90      	pop	{r4, r7, pc}

08016812 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016812:	b590      	push	{r4, r7, lr}
 8016814:	b083      	sub	sp, #12
 8016816:	af00      	add	r7, sp, #0
 8016818:	0004      	movs	r4, r0
 801681a:	0008      	movs	r0, r1
 801681c:	0011      	movs	r1, r2
 801681e:	1dfb      	adds	r3, r7, #7
 8016820:	1c22      	adds	r2, r4, #0
 8016822:	701a      	strb	r2, [r3, #0]
 8016824:	1dbb      	adds	r3, r7, #6
 8016826:	1c02      	adds	r2, r0, #0
 8016828:	701a      	strb	r2, [r3, #0]
 801682a:	1d7b      	adds	r3, r7, #5
 801682c:	1c0a      	adds	r2, r1, #0
 801682e:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8016830:	1dfa      	adds	r2, r7, #7
 8016832:	1dbb      	adds	r3, r7, #6
 8016834:	7812      	ldrb	r2, [r2, #0]
 8016836:	b252      	sxtb	r2, r2
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	b25b      	sxtb	r3, r3
 801683c:	429a      	cmp	r2, r3
 801683e:	db09      	blt.n	8016854 <RegionCommonValueInRange+0x42>
 8016840:	1dfa      	adds	r2, r7, #7
 8016842:	1d7b      	adds	r3, r7, #5
 8016844:	7812      	ldrb	r2, [r2, #0]
 8016846:	b252      	sxtb	r2, r2
 8016848:	781b      	ldrb	r3, [r3, #0]
 801684a:	b25b      	sxtb	r3, r3
 801684c:	429a      	cmp	r2, r3
 801684e:	dc01      	bgt.n	8016854 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8016850:	2301      	movs	r3, #1
 8016852:	e000      	b.n	8016856 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8016854:	2300      	movs	r3, #0
}
 8016856:	0018      	movs	r0, r3
 8016858:	46bd      	mov	sp, r7
 801685a:	b003      	add	sp, #12
 801685c:	bd90      	pop	{r4, r7, pc}

0801685e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801685e:	b580      	push	{r7, lr}
 8016860:	b084      	sub	sp, #16
 8016862:	af00      	add	r7, sp, #0
 8016864:	6078      	str	r0, [r7, #4]
 8016866:	0008      	movs	r0, r1
 8016868:	0011      	movs	r1, r2
 801686a:	1cfb      	adds	r3, r7, #3
 801686c:	1c02      	adds	r2, r0, #0
 801686e:	701a      	strb	r2, [r3, #0]
 8016870:	1cbb      	adds	r3, r7, #2
 8016872:	1c0a      	adds	r2, r1, #0
 8016874:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8016876:	210f      	movs	r1, #15
 8016878:	187b      	adds	r3, r7, r1
 801687a:	1cfa      	adds	r2, r7, #3
 801687c:	7812      	ldrb	r2, [r2, #0]
 801687e:	0912      	lsrs	r2, r2, #4
 8016880:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016882:	1cbb      	adds	r3, r7, #2
 8016884:	781b      	ldrb	r3, [r3, #0]
 8016886:	091b      	lsrs	r3, r3, #4
 8016888:	b2db      	uxtb	r3, r3
 801688a:	187a      	adds	r2, r7, r1
 801688c:	7812      	ldrb	r2, [r2, #0]
 801688e:	429a      	cmp	r2, r3
 8016890:	d805      	bhi.n	801689e <RegionCommonChanDisable+0x40>
 8016892:	1cfa      	adds	r2, r7, #3
 8016894:	1cbb      	adds	r3, r7, #2
 8016896:	7812      	ldrb	r2, [r2, #0]
 8016898:	781b      	ldrb	r3, [r3, #0]
 801689a:	429a      	cmp	r2, r3
 801689c:	d301      	bcc.n	80168a2 <RegionCommonChanDisable+0x44>
    {
        return false;
 801689e:	2300      	movs	r3, #0
 80168a0:	e01b      	b.n	80168da <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80168a2:	200f      	movs	r0, #15
 80168a4:	183b      	adds	r3, r7, r0
 80168a6:	781b      	ldrb	r3, [r3, #0]
 80168a8:	005b      	lsls	r3, r3, #1
 80168aa:	687a      	ldr	r2, [r7, #4]
 80168ac:	18d3      	adds	r3, r2, r3
 80168ae:	881b      	ldrh	r3, [r3, #0]
 80168b0:	b21b      	sxth	r3, r3
 80168b2:	1cfa      	adds	r2, r7, #3
 80168b4:	7812      	ldrb	r2, [r2, #0]
 80168b6:	210f      	movs	r1, #15
 80168b8:	400a      	ands	r2, r1
 80168ba:	2101      	movs	r1, #1
 80168bc:	4091      	lsls	r1, r2
 80168be:	000a      	movs	r2, r1
 80168c0:	b212      	sxth	r2, r2
 80168c2:	43d2      	mvns	r2, r2
 80168c4:	b212      	sxth	r2, r2
 80168c6:	4013      	ands	r3, r2
 80168c8:	b219      	sxth	r1, r3
 80168ca:	183b      	adds	r3, r7, r0
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	005b      	lsls	r3, r3, #1
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	18d3      	adds	r3, r2, r3
 80168d4:	b28a      	uxth	r2, r1
 80168d6:	801a      	strh	r2, [r3, #0]

    return true;
 80168d8:	2301      	movs	r3, #1
}
 80168da:	0018      	movs	r0, r3
 80168dc:	46bd      	mov	sp, r7
 80168de:	b004      	add	sp, #16
 80168e0:	bd80      	pop	{r7, pc}

080168e2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80168e2:	b590      	push	{r4, r7, lr}
 80168e4:	b085      	sub	sp, #20
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	6078      	str	r0, [r7, #4]
 80168ea:	0008      	movs	r0, r1
 80168ec:	0011      	movs	r1, r2
 80168ee:	1cfb      	adds	r3, r7, #3
 80168f0:	1c02      	adds	r2, r0, #0
 80168f2:	701a      	strb	r2, [r3, #0]
 80168f4:	1cbb      	adds	r3, r7, #2
 80168f6:	1c0a      	adds	r2, r1, #0
 80168f8:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 80168fa:	230f      	movs	r3, #15
 80168fc:	18fb      	adds	r3, r7, r3
 80168fe:	2200      	movs	r2, #0
 8016900:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d101      	bne.n	801690c <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8016908:	2300      	movs	r3, #0
 801690a:	e027      	b.n	801695c <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801690c:	230e      	movs	r3, #14
 801690e:	18fb      	adds	r3, r7, r3
 8016910:	1cfa      	adds	r2, r7, #3
 8016912:	7812      	ldrb	r2, [r2, #0]
 8016914:	701a      	strb	r2, [r3, #0]
 8016916:	e017      	b.n	8016948 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016918:	240e      	movs	r4, #14
 801691a:	193b      	adds	r3, r7, r4
 801691c:	781b      	ldrb	r3, [r3, #0]
 801691e:	005b      	lsls	r3, r3, #1
 8016920:	687a      	ldr	r2, [r7, #4]
 8016922:	18d3      	adds	r3, r2, r3
 8016924:	881b      	ldrh	r3, [r3, #0]
 8016926:	2110      	movs	r1, #16
 8016928:	0018      	movs	r0, r3
 801692a:	f7ff fe6e 	bl	801660a <CountChannels>
 801692e:	0003      	movs	r3, r0
 8016930:	0019      	movs	r1, r3
 8016932:	220f      	movs	r2, #15
 8016934:	18bb      	adds	r3, r7, r2
 8016936:	18ba      	adds	r2, r7, r2
 8016938:	7812      	ldrb	r2, [r2, #0]
 801693a:	188a      	adds	r2, r1, r2
 801693c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801693e:	193b      	adds	r3, r7, r4
 8016940:	781a      	ldrb	r2, [r3, #0]
 8016942:	193b      	adds	r3, r7, r4
 8016944:	3201      	adds	r2, #1
 8016946:	701a      	strb	r2, [r3, #0]
 8016948:	230e      	movs	r3, #14
 801694a:	18fa      	adds	r2, r7, r3
 801694c:	1cbb      	adds	r3, r7, #2
 801694e:	7812      	ldrb	r2, [r2, #0]
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	429a      	cmp	r2, r3
 8016954:	d3e0      	bcc.n	8016918 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8016956:	230f      	movs	r3, #15
 8016958:	18fb      	adds	r3, r7, r3
 801695a:	781b      	ldrb	r3, [r3, #0]
}
 801695c:	0018      	movs	r0, r3
 801695e:	46bd      	mov	sp, r7
 8016960:	b005      	add	sp, #20
 8016962:	bd90      	pop	{r4, r7, pc}

08016964 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b086      	sub	sp, #24
 8016968:	af00      	add	r7, sp, #0
 801696a:	60f8      	str	r0, [r7, #12]
 801696c:	60b9      	str	r1, [r7, #8]
 801696e:	1dfb      	adds	r3, r7, #7
 8016970:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d020      	beq.n	80169ba <RegionCommonChanMaskCopy+0x56>
 8016978:	68bb      	ldr	r3, [r7, #8]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d01d      	beq.n	80169ba <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 801697e:	2317      	movs	r3, #23
 8016980:	18fb      	adds	r3, r7, r3
 8016982:	2200      	movs	r2, #0
 8016984:	701a      	strb	r2, [r3, #0]
 8016986:	e011      	b.n	80169ac <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016988:	2017      	movs	r0, #23
 801698a:	183b      	adds	r3, r7, r0
 801698c:	781b      	ldrb	r3, [r3, #0]
 801698e:	005b      	lsls	r3, r3, #1
 8016990:	68ba      	ldr	r2, [r7, #8]
 8016992:	18d2      	adds	r2, r2, r3
 8016994:	183b      	adds	r3, r7, r0
 8016996:	781b      	ldrb	r3, [r3, #0]
 8016998:	005b      	lsls	r3, r3, #1
 801699a:	68f9      	ldr	r1, [r7, #12]
 801699c:	18cb      	adds	r3, r1, r3
 801699e:	8812      	ldrh	r2, [r2, #0]
 80169a0:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80169a2:	183b      	adds	r3, r7, r0
 80169a4:	781a      	ldrb	r2, [r3, #0]
 80169a6:	183b      	adds	r3, r7, r0
 80169a8:	3201      	adds	r2, #1
 80169aa:	701a      	strb	r2, [r3, #0]
 80169ac:	2317      	movs	r3, #23
 80169ae:	18fa      	adds	r2, r7, r3
 80169b0:	1dfb      	adds	r3, r7, #7
 80169b2:	7812      	ldrb	r2, [r2, #0]
 80169b4:	781b      	ldrb	r3, [r3, #0]
 80169b6:	429a      	cmp	r2, r3
 80169b8:	d3e6      	bcc.n	8016988 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 80169ba:	46c0      	nop			; (mov r8, r8)
 80169bc:	46bd      	mov	sp, r7
 80169be:	b006      	add	sp, #24
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80169c2:	b082      	sub	sp, #8
 80169c4:	b5b0      	push	{r4, r5, r7, lr}
 80169c6:	b086      	sub	sp, #24
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	60f8      	str	r0, [r7, #12]
 80169cc:	60b9      	str	r1, [r7, #8]
 80169ce:	0011      	movs	r1, r2
 80169d0:	2204      	movs	r2, #4
 80169d2:	2028      	movs	r0, #40	; 0x28
 80169d4:	1812      	adds	r2, r2, r0
 80169d6:	19d2      	adds	r2, r2, r7
 80169d8:	6013      	str	r3, [r2, #0]
 80169da:	1dfb      	adds	r3, r7, #7
 80169dc:	1c0a      	adds	r2, r1, #0
 80169de:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80169e0:	2516      	movs	r5, #22
 80169e2:	197c      	adds	r4, r7, r5
 80169e4:	2304      	movs	r3, #4
 80169e6:	181b      	adds	r3, r3, r0
 80169e8:	19db      	adds	r3, r3, r7
 80169ea:	1dfa      	adds	r2, r7, #7
 80169ec:	7811      	ldrb	r1, [r2, #0]
 80169ee:	68f8      	ldr	r0, [r7, #12]
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	f7ff fd18 	bl	8016428 <GetDutyCycle>
 80169f8:	0003      	movs	r3, r0
 80169fa:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	689a      	ldr	r2, [r3, #8]
 8016a00:	197b      	adds	r3, r7, r5
 8016a02:	881b      	ldrh	r3, [r3, #0]
 8016a04:	68b9      	ldr	r1, [r7, #8]
 8016a06:	434b      	muls	r3, r1
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d909      	bls.n	8016a20 <RegionCommonSetBandTxDone+0x5e>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	689a      	ldr	r2, [r3, #8]
 8016a10:	197b      	adds	r3, r7, r5
 8016a12:	881b      	ldrh	r3, [r3, #0]
 8016a14:	68b9      	ldr	r1, [r7, #8]
 8016a16:	434b      	muls	r3, r1
 8016a18:	1ad2      	subs	r2, r2, r3
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016a1e:	e002      	b.n	8016a26 <RegionCommonSetBandTxDone+0x64>
        band->TimeCredits = 0;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	2200      	movs	r2, #0
 8016a24:	609a      	str	r2, [r3, #8]
}
 8016a26:	46c0      	nop			; (mov r8, r8)
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	b006      	add	sp, #24
 8016a2c:	bcb0      	pop	{r4, r5, r7}
 8016a2e:	bc08      	pop	{r3}
 8016a30:	b002      	add	sp, #8
 8016a32:	4718      	bx	r3

08016a34 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a36:	46c6      	mov	lr, r8
 8016a38:	b500      	push	{lr}
 8016a3a:	b08c      	sub	sp, #48	; 0x30
 8016a3c:	af04      	add	r7, sp, #16
 8016a3e:	0004      	movs	r4, r0
 8016a40:	6039      	str	r1, [r7, #0]
 8016a42:	0010      	movs	r0, r2
 8016a44:	0019      	movs	r1, r3
 8016a46:	1dfb      	adds	r3, r7, #7
 8016a48:	1c22      	adds	r2, r4, #0
 8016a4a:	701a      	strb	r2, [r3, #0]
 8016a4c:	1dbb      	adds	r3, r7, #6
 8016a4e:	1c02      	adds	r2, r0, #0
 8016a50:	701a      	strb	r2, [r3, #0]
 8016a52:	1d7b      	adds	r3, r7, #5
 8016a54:	1c0a      	adds	r2, r1, #0
 8016a56:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016a58:	2301      	movs	r3, #1
 8016a5a:	425b      	negs	r3, r3
 8016a5c:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016a5e:	f005 fbff 	bl	801c260 <UTIL_TIMER_GetCurrentTime>
 8016a62:	0003      	movs	r3, r0
 8016a64:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 8016a66:	2300      	movs	r3, #0
 8016a68:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 8016a6a:	230e      	movs	r3, #14
 8016a6c:	18fb      	adds	r3, r7, r3
 8016a6e:	2201      	movs	r2, #1
 8016a70:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 8016a72:	231b      	movs	r3, #27
 8016a74:	18fb      	adds	r3, r7, r3
 8016a76:	2200      	movs	r2, #0
 8016a78:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 8016a7a:	231a      	movs	r3, #26
 8016a7c:	18fb      	adds	r3, r7, r3
 8016a7e:	2200      	movs	r2, #0
 8016a80:	701a      	strb	r2, [r3, #0]
 8016a82:	e089      	b.n	8016b98 <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016a84:	231a      	movs	r3, #26
 8016a86:	18fb      	adds	r3, r7, r3
 8016a88:	781a      	ldrb	r2, [r3, #0]
 8016a8a:	0013      	movs	r3, r2
 8016a8c:	009b      	lsls	r3, r3, #2
 8016a8e:	189b      	adds	r3, r3, r2
 8016a90:	009b      	lsls	r3, r3, #2
 8016a92:	001a      	movs	r2, r3
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	469c      	mov	ip, r3
 8016a98:	4494      	add	ip, r2
 8016a9a:	220e      	movs	r2, #14
 8016a9c:	18bc      	adds	r4, r7, r2
 8016a9e:	2138      	movs	r1, #56	; 0x38
 8016aa0:	000a      	movs	r2, r1
 8016aa2:	187b      	adds	r3, r7, r1
 8016aa4:	781e      	ldrb	r6, [r3, #0]
 8016aa6:	1d7b      	adds	r3, r7, #5
 8016aa8:	781d      	ldrb	r5, [r3, #0]
 8016aaa:	1dfb      	adds	r3, r7, #7
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	4698      	mov	r8, r3
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	9302      	str	r3, [sp, #8]
 8016ab4:	2304      	movs	r3, #4
 8016ab6:	189b      	adds	r3, r3, r2
 8016ab8:	19da      	adds	r2, r3, r7
 8016aba:	466b      	mov	r3, sp
 8016abc:	ca03      	ldmia	r2!, {r0, r1}
 8016abe:	c303      	stmia	r3!, {r0, r1}
 8016ac0:	0033      	movs	r3, r6
 8016ac2:	002a      	movs	r2, r5
 8016ac4:	4641      	mov	r1, r8
 8016ac6:	4660      	mov	r0, ip
 8016ac8:	f7ff fd3e 	bl	8016548 <UpdateTimeCredits>
 8016acc:	0003      	movs	r3, r0
 8016ace:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016ad0:	220e      	movs	r2, #14
 8016ad2:	18bb      	adds	r3, r7, r2
 8016ad4:	881a      	ldrh	r2, [r3, #0]
 8016ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ad8:	4353      	muls	r3, r2
 8016ada:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016adc:	231a      	movs	r3, #26
 8016ade:	18fb      	adds	r3, r7, r3
 8016ae0:	781a      	ldrb	r2, [r3, #0]
 8016ae2:	0013      	movs	r3, r2
 8016ae4:	009b      	lsls	r3, r3, #2
 8016ae6:	189b      	adds	r3, r3, r2
 8016ae8:	009b      	lsls	r3, r3, #2
 8016aea:	001a      	movs	r2, r3
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	189b      	adds	r3, r3, r2
 8016af0:	689b      	ldr	r3, [r3, #8]
 8016af2:	693a      	ldr	r2, [r7, #16]
 8016af4:	429a      	cmp	r2, r3
 8016af6:	d306      	bcc.n	8016b06 <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 8016af8:	1d7b      	adds	r3, r7, #5
 8016afa:	781b      	ldrb	r3, [r3, #0]
 8016afc:	2201      	movs	r2, #1
 8016afe:	4053      	eors	r3, r2
 8016b00:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d012      	beq.n	8016b2c <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 8016b06:	231a      	movs	r3, #26
 8016b08:	18fb      	adds	r3, r7, r3
 8016b0a:	781a      	ldrb	r2, [r3, #0]
 8016b0c:	0013      	movs	r3, r2
 8016b0e:	009b      	lsls	r3, r3, #2
 8016b10:	189b      	adds	r3, r3, r2
 8016b12:	009b      	lsls	r3, r3, #2
 8016b14:	001a      	movs	r2, r3
 8016b16:	683b      	ldr	r3, [r7, #0]
 8016b18:	189b      	adds	r3, r3, r2
 8016b1a:	2201      	movs	r2, #1
 8016b1c:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016b1e:	211b      	movs	r1, #27
 8016b20:	187b      	adds	r3, r7, r1
 8016b22:	781a      	ldrb	r2, [r3, #0]
 8016b24:	187b      	adds	r3, r7, r1
 8016b26:	3201      	adds	r2, #1
 8016b28:	701a      	strb	r2, [r3, #0]
 8016b2a:	e02f      	b.n	8016b8c <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016b2c:	211a      	movs	r1, #26
 8016b2e:	187b      	adds	r3, r7, r1
 8016b30:	781a      	ldrb	r2, [r3, #0]
 8016b32:	0013      	movs	r3, r2
 8016b34:	009b      	lsls	r3, r3, #2
 8016b36:	189b      	adds	r3, r3, r2
 8016b38:	009b      	lsls	r3, r3, #2
 8016b3a:	001a      	movs	r2, r3
 8016b3c:	683b      	ldr	r3, [r7, #0]
 8016b3e:	189b      	adds	r3, r3, r2
 8016b40:	2200      	movs	r2, #0
 8016b42:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 8016b44:	187b      	adds	r3, r7, r1
 8016b46:	781a      	ldrb	r2, [r3, #0]
 8016b48:	0013      	movs	r3, r2
 8016b4a:	009b      	lsls	r3, r3, #2
 8016b4c:	189b      	adds	r3, r3, r2
 8016b4e:	009b      	lsls	r3, r3, #2
 8016b50:	001a      	movs	r2, r3
 8016b52:	683b      	ldr	r3, [r7, #0]
 8016b54:	189b      	adds	r3, r3, r2
 8016b56:	68db      	ldr	r3, [r3, #12]
 8016b58:	693a      	ldr	r2, [r7, #16]
 8016b5a:	429a      	cmp	r2, r3
 8016b5c:	d216      	bcs.n	8016b8c <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8016b5e:	187b      	adds	r3, r7, r1
 8016b60:	781a      	ldrb	r2, [r3, #0]
 8016b62:	0013      	movs	r3, r2
 8016b64:	009b      	lsls	r3, r3, #2
 8016b66:	189b      	adds	r3, r3, r2
 8016b68:	009b      	lsls	r3, r3, #2
 8016b6a:	001a      	movs	r2, r3
 8016b6c:	683b      	ldr	r3, [r7, #0]
 8016b6e:	189b      	adds	r3, r3, r2
 8016b70:	689b      	ldr	r3, [r3, #8]
 8016b72:	693a      	ldr	r2, [r7, #16]
 8016b74:	1ad2      	subs	r2, r2, r3
 8016b76:	69fb      	ldr	r3, [r7, #28]
 8016b78:	4293      	cmp	r3, r2
 8016b7a:	d900      	bls.n	8016b7e <RegionCommonUpdateBandTimeOff+0x14a>
 8016b7c:	0013      	movs	r3, r2
 8016b7e:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8016b80:	211b      	movs	r1, #27
 8016b82:	187b      	adds	r3, r7, r1
 8016b84:	781a      	ldrb	r2, [r3, #0]
 8016b86:	187b      	adds	r3, r7, r1
 8016b88:	3201      	adds	r2, #1
 8016b8a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 8016b8c:	211a      	movs	r1, #26
 8016b8e:	187b      	adds	r3, r7, r1
 8016b90:	781a      	ldrb	r2, [r3, #0]
 8016b92:	187b      	adds	r3, r7, r1
 8016b94:	3201      	adds	r2, #1
 8016b96:	701a      	strb	r2, [r3, #0]
 8016b98:	231a      	movs	r3, #26
 8016b9a:	18fa      	adds	r2, r7, r3
 8016b9c:	1dbb      	adds	r3, r7, #6
 8016b9e:	7812      	ldrb	r2, [r2, #0]
 8016ba0:	781b      	ldrb	r3, [r3, #0]
 8016ba2:	429a      	cmp	r2, r3
 8016ba4:	d200      	bcs.n	8016ba8 <RegionCommonUpdateBandTimeOff+0x174>
 8016ba6:	e76d      	b.n	8016a84 <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 8016ba8:	231b      	movs	r3, #27
 8016baa:	18fb      	adds	r3, r7, r3
 8016bac:	781b      	ldrb	r3, [r3, #0]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d102      	bne.n	8016bb8 <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016bb2:	2301      	movs	r3, #1
 8016bb4:	425b      	negs	r3, r3
 8016bb6:	e000      	b.n	8016bba <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 8016bb8:	69fb      	ldr	r3, [r7, #28]
}
 8016bba:	0018      	movs	r0, r3
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	b008      	add	sp, #32
 8016bc0:	bc80      	pop	{r7}
 8016bc2:	46b8      	mov	r8, r7
 8016bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016bc6 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016bc6:	b580      	push	{r7, lr}
 8016bc8:	b084      	sub	sp, #16
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	6078      	str	r0, [r7, #4]
 8016bce:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016bd0:	210f      	movs	r1, #15
 8016bd2:	187b      	adds	r3, r7, r1
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	781b      	ldrb	r3, [r3, #0]
 8016bdc:	2b03      	cmp	r3, #3
 8016bde:	d140      	bne.n	8016c62 <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	3301      	adds	r3, #1
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	b25a      	sxtb	r2, r3
 8016be8:	683b      	ldr	r3, [r7, #0]
 8016bea:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	785b      	ldrb	r3, [r3, #1]
 8016bf0:	b25b      	sxtb	r3, r3
 8016bf2:	220f      	movs	r2, #15
 8016bf4:	4013      	ands	r3, r2
 8016bf6:	b25a      	sxtb	r2, r3
 8016bf8:	683b      	ldr	r3, [r7, #0]
 8016bfa:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016bfc:	683b      	ldr	r3, [r7, #0]
 8016bfe:	785b      	ldrb	r3, [r3, #1]
 8016c00:	b25b      	sxtb	r3, r3
 8016c02:	b2db      	uxtb	r3, r3
 8016c04:	091b      	lsrs	r3, r3, #4
 8016c06:	b2db      	uxtb	r3, r3
 8016c08:	b25a      	sxtb	r2, r3
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	3302      	adds	r3, #2
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	b29a      	uxth	r2, r3
 8016c16:	683b      	ldr	r3, [r7, #0]
 8016c18:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016c1a:	683b      	ldr	r3, [r7, #0]
 8016c1c:	889b      	ldrh	r3, [r3, #4]
 8016c1e:	b21a      	sxth	r2, r3
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	3303      	adds	r3, #3
 8016c24:	781b      	ldrb	r3, [r3, #0]
 8016c26:	021b      	lsls	r3, r3, #8
 8016c28:	b21b      	sxth	r3, r3
 8016c2a:	4313      	orrs	r3, r2
 8016c2c:	b21b      	sxth	r3, r3
 8016c2e:	b29a      	uxth	r2, r3
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	791a      	ldrb	r2, [r3, #4]
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016c3c:	683b      	ldr	r3, [r7, #0]
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	091b      	lsrs	r3, r3, #4
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	2207      	movs	r2, #7
 8016c46:	4013      	ands	r3, r2
 8016c48:	b2da      	uxtb	r2, r3
 8016c4a:	683b      	ldr	r3, [r7, #0]
 8016c4c:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	220f      	movs	r2, #15
 8016c54:	4013      	ands	r3, r2
 8016c56:	b2da      	uxtb	r2, r3
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016c5c:	187b      	adds	r3, r7, r1
 8016c5e:	2205      	movs	r2, #5
 8016c60:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8016c62:	230f      	movs	r3, #15
 8016c64:	18fb      	adds	r3, r7, r3
 8016c66:	781b      	ldrb	r3, [r3, #0]
}
 8016c68:	0018      	movs	r0, r3
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	b004      	add	sp, #16
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c72:	b089      	sub	sp, #36	; 0x24
 8016c74:	af02      	add	r7, sp, #8
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	60b9      	str	r1, [r7, #8]
 8016c7a:	607a      	str	r2, [r7, #4]
 8016c7c:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016c7e:	2317      	movs	r3, #23
 8016c80:	18fb      	adds	r3, r7, r3
 8016c82:	68fa      	ldr	r2, [r7, #12]
 8016c84:	7912      	ldrb	r2, [r2, #4]
 8016c86:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 8016c88:	2116      	movs	r1, #22
 8016c8a:	187b      	adds	r3, r7, r1
 8016c8c:	68fa      	ldr	r2, [r7, #12]
 8016c8e:	7992      	ldrb	r2, [r2, #6]
 8016c90:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8016c92:	2015      	movs	r0, #21
 8016c94:	183b      	adds	r3, r7, r0
 8016c96:	68fa      	ldr	r2, [r7, #12]
 8016c98:	79d2      	ldrb	r2, [r2, #7]
 8016c9a:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	7a1a      	ldrb	r2, [r3, #8]
 8016ca0:	2414      	movs	r4, #20
 8016ca2:	193b      	adds	r3, r7, r4
 8016ca4:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	795b      	ldrb	r3, [r3, #5]
 8016caa:	2201      	movs	r2, #1
 8016cac:	4053      	eors	r3, r2
 8016cae:	b2db      	uxtb	r3, r3
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d00b      	beq.n	8016ccc <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016cb4:	193b      	adds	r3, r7, r4
 8016cb6:	68fa      	ldr	r2, [r7, #12]
 8016cb8:	7ad2      	ldrb	r2, [r2, #11]
 8016cba:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 8016cbc:	187b      	adds	r3, r7, r1
 8016cbe:	68fa      	ldr	r2, [r7, #12]
 8016cc0:	7a52      	ldrb	r2, [r2, #9]
 8016cc2:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 8016cc4:	183b      	adds	r3, r7, r0
 8016cc6:	68fa      	ldr	r2, [r7, #12]
 8016cc8:	7a92      	ldrb	r2, [r2, #10]
 8016cca:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 8016ccc:	2617      	movs	r6, #23
 8016cce:	19bb      	adds	r3, r7, r6
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d046      	beq.n	8016d64 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	7b18      	ldrb	r0, [r3, #12]
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	691c      	ldr	r4, [r3, #16]
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	2514      	movs	r5, #20
 8016ce2:	575d      	ldrsb	r5, [r3, r5]
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	2215      	movs	r2, #21
 8016ce8:	569a      	ldrsb	r2, [r3, r2]
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	699b      	ldr	r3, [r3, #24]
 8016cee:	2116      	movs	r1, #22
 8016cf0:	1879      	adds	r1, r7, r1
 8016cf2:	7809      	ldrb	r1, [r1, #0]
 8016cf4:	b249      	sxtb	r1, r1
 8016cf6:	9301      	str	r3, [sp, #4]
 8016cf8:	9200      	str	r2, [sp, #0]
 8016cfa:	002b      	movs	r3, r5
 8016cfc:	000a      	movs	r2, r1
 8016cfe:	0021      	movs	r1, r4
 8016d00:	f7ff fcee 	bl	80166e0 <RegionCommonChanVerifyDr>
 8016d04:	0003      	movs	r3, r0
 8016d06:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016d08:	2301      	movs	r3, #1
 8016d0a:	4053      	eors	r3, r2
 8016d0c:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d005      	beq.n	8016d1e <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 8016d12:	19bb      	adds	r3, r7, r6
 8016d14:	19ba      	adds	r2, r7, r6
 8016d16:	7812      	ldrb	r2, [r2, #0]
 8016d18:	2102      	movs	r1, #2
 8016d1a:	438a      	bics	r2, r1
 8016d1c:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	211d      	movs	r1, #29
 8016d22:	5659      	ldrsb	r1, [r3, r1]
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	221c      	movs	r2, #28
 8016d28:	569a      	ldrsb	r2, [r3, r2]
 8016d2a:	2415      	movs	r4, #21
 8016d2c:	193b      	adds	r3, r7, r4
 8016d2e:	781b      	ldrb	r3, [r3, #0]
 8016d30:	b25b      	sxtb	r3, r3
 8016d32:	0018      	movs	r0, r3
 8016d34:	f7ff fd6d 	bl	8016812 <RegionCommonValueInRange>
 8016d38:	1e03      	subs	r3, r0, #0
 8016d3a:	d113      	bne.n	8016d64 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
//        	verifyParams->MaxTxPower = 20;
            // Verify if the maximum TX power is exceeded Проверьте, не превышена ли максимальная мощность TX
            if( verifyParams->MaxTxPower > txPower )
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	7f5b      	ldrb	r3, [r3, #29]
 8016d40:	b25b      	sxtb	r3, r3
 8016d42:	193a      	adds	r2, r7, r4
 8016d44:	7812      	ldrb	r2, [r2, #0]
 8016d46:	b252      	sxtb	r2, r2
 8016d48:	429a      	cmp	r2, r3
 8016d4a:	da04      	bge.n	8016d56 <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016d4c:	193b      	adds	r3, r7, r4
 8016d4e:	68fa      	ldr	r2, [r7, #12]
 8016d50:	7f52      	ldrb	r2, [r2, #29]
 8016d52:	701a      	strb	r2, [r3, #0]
 8016d54:	e006      	b.n	8016d64 <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016d56:	2217      	movs	r2, #23
 8016d58:	18bb      	adds	r3, r7, r2
 8016d5a:	18ba      	adds	r2, r7, r2
 8016d5c:	7812      	ldrb	r2, [r2, #0]
 8016d5e:	2104      	movs	r1, #4
 8016d60:	438a      	bics	r2, r1
 8016d62:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016d64:	2317      	movs	r3, #23
 8016d66:	18fb      	adds	r3, r7, r3
 8016d68:	781b      	ldrb	r3, [r3, #0]
 8016d6a:	2b07      	cmp	r3, #7
 8016d6c:	d108      	bne.n	8016d80 <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 8016d6e:	2214      	movs	r2, #20
 8016d70:	18bb      	adds	r3, r7, r2
 8016d72:	781b      	ldrb	r3, [r3, #0]
 8016d74:	b25b      	sxtb	r3, r3
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d102      	bne.n	8016d80 <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8016d7a:	18bb      	adds	r3, r7, r2
 8016d7c:	2201      	movs	r2, #1
 8016d7e:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	2216      	movs	r2, #22
 8016d84:	18ba      	adds	r2, r7, r2
 8016d86:	7812      	ldrb	r2, [r2, #0]
 8016d88:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2215      	movs	r2, #21
 8016d8e:	18ba      	adds	r2, r7, r2
 8016d90:	7812      	ldrb	r2, [r2, #0]
 8016d92:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016d94:	2314      	movs	r3, #20
 8016d96:	18fb      	adds	r3, r7, r3
 8016d98:	781a      	ldrb	r2, [r3, #0]
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	701a      	strb	r2, [r3, #0]

    return status;
 8016d9e:	2317      	movs	r3, #23
 8016da0:	18fb      	adds	r3, r7, r3
 8016da2:	781b      	ldrb	r3, [r3, #0]
}
 8016da4:	0018      	movs	r0, r3
 8016da6:	46bd      	mov	sp, r7
 8016da8:	b007      	add	sp, #28
 8016daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016dac <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b082      	sub	sp, #8
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	0002      	movs	r2, r0
 8016db4:	6039      	str	r1, [r7, #0]
 8016db6:	1dfb      	adds	r3, r7, #7
 8016db8:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 8016dba:	6839      	ldr	r1, [r7, #0]
 8016dbc:	4806      	ldr	r0, [pc, #24]	; (8016dd8 <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 8016dbe:	f7e9 f9ab 	bl	8000118 <__udivsi3>
 8016dc2:	0003      	movs	r3, r0
 8016dc4:	001a      	movs	r2, r3
 8016dc6:	1dfb      	adds	r3, r7, #7
 8016dc8:	781b      	ldrb	r3, [r3, #0]
 8016dca:	409a      	lsls	r2, r3
 8016dcc:	0013      	movs	r3, r2
}
 8016dce:	0018      	movs	r0, r3
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	b002      	add	sp, #8
 8016dd4:	bd80      	pop	{r7, pc}
 8016dd6:	46c0      	nop			; (mov r8, r8)
 8016dd8:	3b9aca00 	.word	0x3b9aca00

08016ddc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b082      	sub	sp, #8
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	0002      	movs	r2, r0
 8016de4:	1dfb      	adds	r3, r7, #7
 8016de6:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 8016de8:	4b02      	ldr	r3, [pc, #8]	; (8016df4 <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 8016dea:	0018      	movs	r0, r3
 8016dec:	46bd      	mov	sp, r7
 8016dee:	b002      	add	sp, #8
 8016df0:	bd80      	pop	{r7, pc}
 8016df2:	46c0      	nop			; (mov r8, r8)
 8016df4:	00027100 	.word	0x00027100

08016df8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8016df8:	b5b0      	push	{r4, r5, r7, lr}
 8016dfa:	b084      	sub	sp, #16
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	60f8      	str	r0, [r7, #12]
 8016e00:	607a      	str	r2, [r7, #4]
 8016e02:	603b      	str	r3, [r7, #0]
 8016e04:	200b      	movs	r0, #11
 8016e06:	183b      	adds	r3, r7, r0
 8016e08:	1c0a      	adds	r2, r1, #0
 8016e0a:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 8016e0c:	0002      	movs	r2, r0
 8016e0e:	18bb      	adds	r3, r7, r2
 8016e10:	781d      	ldrb	r5, [r3, #0]
 8016e12:	18bb      	adds	r3, r7, r2
 8016e14:	781b      	ldrb	r3, [r3, #0]
 8016e16:	4a1c      	ldr	r2, [pc, #112]	; (8016e88 <RegionCommonComputeRxWindowParameters+0x90>)
 8016e18:	4694      	mov	ip, r2
 8016e1a:	4463      	add	r3, ip
 8016e1c:	005c      	lsls	r4, r3, #1
 8016e1e:	6879      	ldr	r1, [r7, #4]
 8016e20:	000a      	movs	r2, r1
 8016e22:	0152      	lsls	r2, r2, #5
 8016e24:	1a52      	subs	r2, r2, r1
 8016e26:	0193      	lsls	r3, r2, #6
 8016e28:	1a9b      	subs	r3, r3, r2
 8016e2a:	00db      	lsls	r3, r3, #3
 8016e2c:	185b      	adds	r3, r3, r1
 8016e2e:	01db      	lsls	r3, r3, #7
 8016e30:	001a      	movs	r2, r3
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	18d3      	adds	r3, r2, r3
 8016e36:	3b01      	subs	r3, #1
 8016e38:	68f9      	ldr	r1, [r7, #12]
 8016e3a:	0018      	movs	r0, r3
 8016e3c:	f7e9 f96c 	bl	8000118 <__udivsi3>
 8016e40:	0003      	movs	r3, r0
 8016e42:	18e2      	adds	r2, r4, r3
 8016e44:	002b      	movs	r3, r5
 8016e46:	4293      	cmp	r3, r2
 8016e48:	d200      	bcs.n	8016e4c <RegionCommonComputeRxWindowParameters+0x54>
 8016e4a:	0013      	movs	r3, r2
 8016e4c:	6a3a      	ldr	r2, [r7, #32]
 8016e4e:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	009a      	lsls	r2, r3, #2
 8016e54:	6a3b      	ldr	r3, [r7, #32]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	68f9      	ldr	r1, [r7, #12]
 8016e5a:	434b      	muls	r3, r1
 8016e5c:	085b      	lsrs	r3, r3, #1
 8016e5e:	1ad3      	subs	r3, r2, r3
 8016e60:	4a0a      	ldr	r2, [pc, #40]	; (8016e8c <RegionCommonComputeRxWindowParameters+0x94>)
 8016e62:	4694      	mov	ip, r2
 8016e64:	4463      	add	r3, ip
 8016e66:	490a      	ldr	r1, [pc, #40]	; (8016e90 <RegionCommonComputeRxWindowParameters+0x98>)
 8016e68:	0018      	movs	r0, r3
 8016e6a:	f7e9 f9df 	bl	800022c <__divsi3>
 8016e6e:	0003      	movs	r3, r0
 8016e70:	001a      	movs	r2, r3
 8016e72:	683b      	ldr	r3, [r7, #0]
 8016e74:	1ad3      	subs	r3, r2, r3
 8016e76:	3b01      	subs	r3, #1
 8016e78:	001a      	movs	r2, r3
 8016e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e7c:	601a      	str	r2, [r3, #0]
}
 8016e7e:	46c0      	nop			; (mov r8, r8)
 8016e80:	46bd      	mov	sp, r7
 8016e82:	b004      	add	sp, #16
 8016e84:	bdb0      	pop	{r4, r5, r7, pc}
 8016e86:	46c0      	nop			; (mov r8, r8)
 8016e88:	7ffffffc 	.word	0x7ffffffc
 8016e8c:	000f423f 	.word	0x000f423f
 8016e90:	000f4240 	.word	0x000f4240

08016e94 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016e94:	b5b0      	push	{r4, r5, r7, lr}
 8016e96:	b086      	sub	sp, #24
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	60b9      	str	r1, [r7, #8]
 8016e9c:	607a      	str	r2, [r7, #4]
 8016e9e:	210f      	movs	r1, #15
 8016ea0:	187b      	adds	r3, r7, r1
 8016ea2:	1c02      	adds	r2, r0, #0
 8016ea4:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 14;
 8016ea6:	2417      	movs	r4, #23
 8016ea8:	193b      	adds	r3, r7, r4
 8016eaa:	220e      	movs	r2, #14
 8016eac:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016eae:	187b      	adds	r3, r7, r1
 8016eb0:	781b      	ldrb	r3, [r3, #0]
 8016eb2:	b25b      	sxtb	r3, r3
 8016eb4:	005b      	lsls	r3, r3, #1
 8016eb6:	0018      	movs	r0, r3
 8016eb8:	f7e9 fe0a 	bl	8000ad0 <__aeabi_ui2f>
 8016ebc:	1c03      	adds	r3, r0, #0
 8016ebe:	1c19      	adds	r1, r3, #0
 8016ec0:	68b8      	ldr	r0, [r7, #8]
 8016ec2:	f7e9 fc57 	bl	8000774 <__aeabi_fsub>
 8016ec6:	1c03      	adds	r3, r0, #0
 8016ec8:	6879      	ldr	r1, [r7, #4]
 8016eca:	1c18      	adds	r0, r3, #0
 8016ecc:	f7e9 fc52 	bl	8000774 <__aeabi_fsub>
 8016ed0:	1c03      	adds	r3, r0, #0
 8016ed2:	1c18      	adds	r0, r3, #0
 8016ed4:	f7eb fc06 	bl	80026e4 <__aeabi_f2d>
 8016ed8:	0002      	movs	r2, r0
 8016eda:	000b      	movs	r3, r1
 8016edc:	0010      	movs	r0, r2
 8016ede:	0019      	movs	r1, r3
 8016ee0:	f006 f9ea 	bl	801d2b8 <floor>
 8016ee4:	0002      	movs	r2, r0
 8016ee6:	000b      	movs	r3, r1
 8016ee8:	0025      	movs	r5, r4
 8016eea:	193c      	adds	r4, r7, r4
 8016eec:	0010      	movs	r0, r2
 8016eee:	0019      	movs	r1, r3
 8016ef0:	f7eb fb6c 	bl	80025cc <__aeabi_d2iz>
 8016ef4:	0003      	movs	r3, r0
 8016ef6:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8016ef8:	197b      	adds	r3, r7, r5
 8016efa:	781b      	ldrb	r3, [r3, #0]
 8016efc:	b25b      	sxtb	r3, r3
}
 8016efe:	0018      	movs	r0, r3
 8016f00:	46bd      	mov	sp, r7
 8016f02:	b006      	add	sp, #24
 8016f04:	bdb0      	pop	{r4, r5, r7, pc}

08016f06 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f08:	b087      	sub	sp, #28
 8016f0a:	af00      	add	r7, sp, #0
 8016f0c:	60f8      	str	r0, [r7, #12]
 8016f0e:	60b9      	str	r1, [r7, #8]
 8016f10:	607a      	str	r2, [r7, #4]
 8016f12:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016f14:	2317      	movs	r3, #23
 8016f16:	18fb      	adds	r3, r7, r3
 8016f18:	2200      	movs	r2, #0
 8016f1a:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 8016f1c:	2316      	movs	r3, #22
 8016f1e:	18fb      	adds	r3, r7, r3
 8016f20:	2200      	movs	r2, #0
 8016f22:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016f24:	2315      	movs	r3, #21
 8016f26:	18fb      	adds	r3, r7, r3
 8016f28:	2200      	movs	r2, #0
 8016f2a:	701a      	strb	r2, [r3, #0]
 8016f2c:	2314      	movs	r3, #20
 8016f2e:	18fb      	adds	r3, r7, r3
 8016f30:	2200      	movs	r2, #0
 8016f32:	701a      	strb	r2, [r3, #0]
 8016f34:	e0bf      	b.n	80170b6 <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016f36:	2313      	movs	r3, #19
 8016f38:	18fb      	adds	r3, r7, r3
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	701a      	strb	r2, [r3, #0]
 8016f3e:	e0a8      	b.n	8017092 <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	685a      	ldr	r2, [r3, #4]
 8016f44:	2314      	movs	r3, #20
 8016f46:	18fb      	adds	r3, r7, r3
 8016f48:	781b      	ldrb	r3, [r3, #0]
 8016f4a:	005b      	lsls	r3, r3, #1
 8016f4c:	18d3      	adds	r3, r2, r3
 8016f4e:	881b      	ldrh	r3, [r3, #0]
 8016f50:	001a      	movs	r2, r3
 8016f52:	2013      	movs	r0, #19
 8016f54:	183b      	adds	r3, r7, r0
 8016f56:	781b      	ldrb	r3, [r3, #0]
 8016f58:	411a      	asrs	r2, r3
 8016f5a:	0013      	movs	r3, r2
 8016f5c:	2201      	movs	r2, #1
 8016f5e:	4013      	ands	r3, r2
 8016f60:	d100      	bne.n	8016f64 <RegionCommonCountNbOfEnabledChannels+0x5e>
 8016f62:	e090      	b.n	8017086 <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	689a      	ldr	r2, [r3, #8]
 8016f68:	2315      	movs	r3, #21
 8016f6a:	18fb      	adds	r3, r7, r3
 8016f6c:	7819      	ldrb	r1, [r3, #0]
 8016f6e:	183b      	adds	r3, r7, r0
 8016f70:	781b      	ldrb	r3, [r3, #0]
 8016f72:	18cb      	adds	r3, r1, r3
 8016f74:	0019      	movs	r1, r3
 8016f76:	000b      	movs	r3, r1
 8016f78:	005b      	lsls	r3, r3, #1
 8016f7a:	185b      	adds	r3, r3, r1
 8016f7c:	009b      	lsls	r3, r3, #2
 8016f7e:	18d3      	adds	r3, r2, r3
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d100      	bne.n	8016f88 <RegionCommonCountNbOfEnabledChannels+0x82>
 8016f86:	e079      	b.n	801707c <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	781b      	ldrb	r3, [r3, #0]
 8016f8c:	2201      	movs	r2, #1
 8016f8e:	4053      	eors	r3, r2
 8016f90:	b2db      	uxtb	r3, r3
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d00d      	beq.n	8016fb2 <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d009      	beq.n	8016fb2 <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	8a5b      	ldrh	r3, [r3, #18]
 8016fa2:	001a      	movs	r2, r3
 8016fa4:	183b      	adds	r3, r7, r0
 8016fa6:	781b      	ldrb	r3, [r3, #0]
 8016fa8:	411a      	asrs	r2, r3
 8016faa:	0013      	movs	r3, r2
 8016fac:	2201      	movs	r2, #1
 8016fae:	4013      	ands	r3, r2
 8016fb0:	d066      	beq.n	8017080 <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	785b      	ldrb	r3, [r3, #1]
 8016fb6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	689a      	ldr	r2, [r3, #8]
 8016fbc:	2515      	movs	r5, #21
 8016fbe:	197b      	adds	r3, r7, r5
 8016fc0:	7819      	ldrb	r1, [r3, #0]
 8016fc2:	2613      	movs	r6, #19
 8016fc4:	19bb      	adds	r3, r7, r6
 8016fc6:	781b      	ldrb	r3, [r3, #0]
 8016fc8:	18cb      	adds	r3, r1, r3
 8016fca:	0019      	movs	r1, r3
 8016fcc:	000b      	movs	r3, r1
 8016fce:	005b      	lsls	r3, r3, #1
 8016fd0:	185b      	adds	r3, r3, r1
 8016fd2:	009b      	lsls	r3, r3, #2
 8016fd4:	18d3      	adds	r3, r2, r3
 8016fd6:	7a1b      	ldrb	r3, [r3, #8]
 8016fd8:	011b      	lsls	r3, r3, #4
 8016fda:	b25b      	sxtb	r3, r3
 8016fdc:	111b      	asrs	r3, r3, #4
 8016fde:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016fe0:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	689a      	ldr	r2, [r3, #8]
 8016fe6:	197b      	adds	r3, r7, r5
 8016fe8:	7819      	ldrb	r1, [r3, #0]
 8016fea:	19bb      	adds	r3, r7, r6
 8016fec:	781b      	ldrb	r3, [r3, #0]
 8016fee:	18cb      	adds	r3, r1, r3
 8016ff0:	0019      	movs	r1, r3
 8016ff2:	000b      	movs	r3, r1
 8016ff4:	005b      	lsls	r3, r3, #1
 8016ff6:	185b      	adds	r3, r3, r1
 8016ff8:	009b      	lsls	r3, r3, #2
 8016ffa:	18d3      	adds	r3, r2, r3
 8016ffc:	7a1b      	ldrb	r3, [r3, #8]
 8016ffe:	b25b      	sxtb	r3, r3
 8017000:	111b      	asrs	r3, r3, #4
 8017002:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017004:	001a      	movs	r2, r3
 8017006:	0021      	movs	r1, r4
 8017008:	f7ff fc03 	bl	8016812 <RegionCommonValueInRange>
 801700c:	1e03      	subs	r3, r0, #0
 801700e:	d039      	beq.n	8017084 <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	68da      	ldr	r2, [r3, #12]
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	6899      	ldr	r1, [r3, #8]
 8017018:	197b      	adds	r3, r7, r5
 801701a:	7818      	ldrb	r0, [r3, #0]
 801701c:	19bb      	adds	r3, r7, r6
 801701e:	781b      	ldrb	r3, [r3, #0]
 8017020:	18c3      	adds	r3, r0, r3
 8017022:	0018      	movs	r0, r3
 8017024:	0003      	movs	r3, r0
 8017026:	005b      	lsls	r3, r3, #1
 8017028:	181b      	adds	r3, r3, r0
 801702a:	009b      	lsls	r3, r3, #2
 801702c:	18cb      	adds	r3, r1, r3
 801702e:	7a5b      	ldrb	r3, [r3, #9]
 8017030:	0019      	movs	r1, r3
 8017032:	000b      	movs	r3, r1
 8017034:	009b      	lsls	r3, r3, #2
 8017036:	185b      	adds	r3, r3, r1
 8017038:	009b      	lsls	r3, r3, #2
 801703a:	18d3      	adds	r3, r2, r3
 801703c:	7c1b      	ldrb	r3, [r3, #16]
 801703e:	2201      	movs	r2, #1
 8017040:	4053      	eors	r3, r2
 8017042:	b2db      	uxtb	r3, r3
 8017044:	2b00      	cmp	r3, #0
 8017046:	d006      	beq.n	8017056 <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017048:	2116      	movs	r1, #22
 801704a:	187b      	adds	r3, r7, r1
 801704c:	781a      	ldrb	r2, [r3, #0]
 801704e:	187b      	adds	r3, r7, r1
 8017050:	3201      	adds	r2, #1
 8017052:	701a      	strb	r2, [r3, #0]
                    continue;
 8017054:	e017      	b.n	8017086 <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017056:	2217      	movs	r2, #23
 8017058:	18bb      	adds	r3, r7, r2
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	18ba      	adds	r2, r7, r2
 801705e:	1c59      	adds	r1, r3, #1
 8017060:	7011      	strb	r1, [r2, #0]
 8017062:	001a      	movs	r2, r3
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	189b      	adds	r3, r3, r2
 8017068:	2215      	movs	r2, #21
 801706a:	18b9      	adds	r1, r7, r2
 801706c:	2213      	movs	r2, #19
 801706e:	18ba      	adds	r2, r7, r2
 8017070:	7809      	ldrb	r1, [r1, #0]
 8017072:	7812      	ldrb	r2, [r2, #0]
 8017074:	188a      	adds	r2, r1, r2
 8017076:	b2d2      	uxtb	r2, r2
 8017078:	701a      	strb	r2, [r3, #0]
 801707a:	e004      	b.n	8017086 <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 801707c:	46c0      	nop			; (mov r8, r8)
 801707e:	e002      	b.n	8017086 <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 8017080:	46c0      	nop			; (mov r8, r8)
 8017082:	e000      	b.n	8017086 <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017084:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8017086:	2113      	movs	r1, #19
 8017088:	187b      	adds	r3, r7, r1
 801708a:	781a      	ldrb	r2, [r3, #0]
 801708c:	187b      	adds	r3, r7, r1
 801708e:	3201      	adds	r2, #1
 8017090:	701a      	strb	r2, [r3, #0]
 8017092:	2313      	movs	r3, #19
 8017094:	18fb      	adds	r3, r7, r3
 8017096:	781b      	ldrb	r3, [r3, #0]
 8017098:	2b0f      	cmp	r3, #15
 801709a:	d800      	bhi.n	801709e <RegionCommonCountNbOfEnabledChannels+0x198>
 801709c:	e750      	b.n	8016f40 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801709e:	2215      	movs	r2, #21
 80170a0:	18bb      	adds	r3, r7, r2
 80170a2:	18ba      	adds	r2, r7, r2
 80170a4:	7812      	ldrb	r2, [r2, #0]
 80170a6:	3210      	adds	r2, #16
 80170a8:	701a      	strb	r2, [r3, #0]
 80170aa:	2114      	movs	r1, #20
 80170ac:	187b      	adds	r3, r7, r1
 80170ae:	781a      	ldrb	r2, [r3, #0]
 80170b0:	187b      	adds	r3, r7, r1
 80170b2:	3201      	adds	r2, #1
 80170b4:	701a      	strb	r2, [r3, #0]
 80170b6:	2315      	movs	r3, #21
 80170b8:	18fb      	adds	r3, r7, r3
 80170ba:	781b      	ldrb	r3, [r3, #0]
 80170bc:	b29a      	uxth	r2, r3
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	8a1b      	ldrh	r3, [r3, #16]
 80170c2:	429a      	cmp	r2, r3
 80170c4:	d200      	bcs.n	80170c8 <RegionCommonCountNbOfEnabledChannels+0x1c2>
 80170c6:	e736      	b.n	8016f36 <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	2217      	movs	r2, #23
 80170cc:	18ba      	adds	r2, r7, r2
 80170ce:	7812      	ldrb	r2, [r2, #0]
 80170d0:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	2216      	movs	r2, #22
 80170d6:	18ba      	adds	r2, r7, r2
 80170d8:	7812      	ldrb	r2, [r2, #0]
 80170da:	701a      	strb	r2, [r3, #0]
}
 80170dc:	46c0      	nop			; (mov r8, r8)
 80170de:	46bd      	mov	sp, r7
 80170e0:	b007      	add	sp, #28
 80170e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080170e4 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80170e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170e6:	46c6      	mov	lr, r8
 80170e8:	b500      	push	{lr}
 80170ea:	b08a      	sub	sp, #40	; 0x28
 80170ec:	af04      	add	r7, sp, #16
 80170ee:	60f8      	str	r0, [r7, #12]
 80170f0:	60b9      	str	r1, [r7, #8]
 80170f2:	607a      	str	r2, [r7, #4]
 80170f4:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	685b      	ldr	r3, [r3, #4]
 80170fa:	0018      	movs	r0, r3
 80170fc:	f005 f8c4 	bl	801c288 <UTIL_TIMER_GetElapsedTime>
 8017100:	0003      	movs	r3, r0
 8017102:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	681a      	ldr	r2, [r3, #0]
 8017108:	697b      	ldr	r3, [r7, #20]
 801710a:	1ad2      	subs	r2, r2, r3
 801710c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801710e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017112:	2201      	movs	r2, #1
 8017114:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	2200      	movs	r2, #0
 801711a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	685b      	ldr	r3, [r3, #4]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d004      	beq.n	801712e <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017128:	697a      	ldr	r2, [r7, #20]
 801712a:	429a      	cmp	r2, r3
 801712c:	d32b      	bcc.n	8017186 <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801712e:	68bb      	ldr	r3, [r7, #8]
 8017130:	2200      	movs	r2, #0
 8017132:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	69db      	ldr	r3, [r3, #28]
 8017138:	781b      	ldrb	r3, [r3, #0]
 801713a:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017140:	68dc      	ldr	r4, [r3, #12]
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	7a5d      	ldrb	r5, [r3, #9]
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	7a1e      	ldrb	r6, [r3, #8]
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	7d1b      	ldrb	r3, [r3, #20]
 801714e:	4698      	mov	r8, r3
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	699b      	ldr	r3, [r3, #24]
 8017154:	9303      	str	r3, [sp, #12]
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	2204      	movs	r2, #4
 801715a:	446a      	add	r2, sp
 801715c:	330c      	adds	r3, #12
 801715e:	cb03      	ldmia	r3!, {r0, r1}
 8017160:	c203      	stmia	r2!, {r0, r1}
 8017162:	4643      	mov	r3, r8
 8017164:	9300      	str	r3, [sp, #0]
 8017166:	0033      	movs	r3, r6
 8017168:	002a      	movs	r2, r5
 801716a:	0021      	movs	r1, r4
 801716c:	4660      	mov	r0, ip
 801716e:	f7ff fc61 	bl	8016a34 <RegionCommonUpdateBandTimeOff>
 8017172:	0002      	movs	r2, r0
 8017174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017176:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	69d8      	ldr	r0, [r3, #28]
 801717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801717e:	683a      	ldr	r2, [r7, #0]
 8017180:	6879      	ldr	r1, [r7, #4]
 8017182:	f7ff fec0 	bl	8016f06 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	781b      	ldrb	r3, [r3, #0]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d004      	beq.n	8017198 <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 801718e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017190:	2200      	movs	r2, #0
 8017192:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017194:	2300      	movs	r3, #0
 8017196:	e006      	b.n	80171a6 <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 8017198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d001      	beq.n	80171a4 <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80171a0:	230b      	movs	r3, #11
 80171a2:	e000      	b.n	80171a6 <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80171a4:	230c      	movs	r3, #12
    }
}
 80171a6:	0018      	movs	r0, r3
 80171a8:	46bd      	mov	sp, r7
 80171aa:	b006      	add	sp, #24
 80171ac:	bc80      	pop	{r7}
 80171ae:	46b8      	mov	r8, r7
 80171b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080171b4 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80171b4:	b590      	push	{r4, r7, lr}
 80171b6:	b089      	sub	sp, #36	; 0x24
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6039      	str	r1, [r7, #0]
 80171bc:	0011      	movs	r1, r2
 80171be:	1dfb      	adds	r3, r7, #7
 80171c0:	1c02      	adds	r2, r0, #0
 80171c2:	701a      	strb	r2, [r3, #0]
 80171c4:	1dbb      	adds	r3, r7, #6
 80171c6:	1c0a      	adds	r2, r1, #0
 80171c8:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 80171ca:	2308      	movs	r3, #8
 80171cc:	18fb      	adds	r3, r7, r3
 80171ce:	4a04      	ldr	r2, [pc, #16]	; (80171e0 <RegionCommonRxConfigPrint+0x2c>)
 80171d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80171d2:	c313      	stmia	r3!, {r0, r1, r4}
 80171d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80171d6:	c313      	stmia	r3!, {r0, r1, r4}
    }
    else
    {
//        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80171d8:	46c0      	nop			; (mov r8, r8)
 80171da:	46bd      	mov	sp, r7
 80171dc:	b009      	add	sp, #36	; 0x24
 80171de:	bd90      	pop	{r4, r7, pc}
 80171e0:	0801e410 	.word	0x0801e410

080171e4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b088      	sub	sp, #32
 80171e8:	af04      	add	r7, sp, #16
 80171ea:	6078      	str	r0, [r7, #4]
 80171ec:	000a      	movs	r2, r1
 80171ee:	1cfb      	adds	r3, r7, #3
 80171f0:	701a      	strb	r2, [r3, #0]
	uint32_t freq_mhz = frequency / 1000000; // Конвертируем частоту в мегагерцы
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	4912      	ldr	r1, [pc, #72]	; (8017240 <RegionCommonTxConfigPrint+0x5c>)
 80171f6:	0018      	movs	r0, r3
 80171f8:	f7e8 ff8e 	bl	8000118 <__udivsi3>
 80171fc:	0003      	movs	r3, r0
 80171fe:	60fb      	str	r3, [r7, #12]
	uint32_t freq_decimal = (frequency % 1000000) / 100000; // Получаем 1-ю цифру после запятой
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	490f      	ldr	r1, [pc, #60]	; (8017240 <RegionCommonTxConfigPrint+0x5c>)
 8017204:	0018      	movs	r0, r3
 8017206:	f7e9 f80d 	bl	8000224 <__aeabi_uidivmod>
 801720a:	000b      	movs	r3, r1
 801720c:	490d      	ldr	r1, [pc, #52]	; (8017244 <RegionCommonTxConfigPrint+0x60>)
 801720e:	0018      	movs	r0, r3
 8017210:	f7e8 ff82 	bl	8000118 <__udivsi3>
 8017214:	0003      	movs	r3, r0
 8017216:	60bb      	str	r3, [r7, #8]
//	float freq_mhz2 = frequency / 1000000.0f; // Конвертируем частоту в мегагерцы
//    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
    MW_LOG(TS_OFF, VLEVEL_M,  "\r\n Отправка на частоте %d.%d МГц по каналу скорости передачи DR%d\r\n", freq_mhz, freq_decimal, dr );
 8017218:	1cfb      	adds	r3, r7, #3
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	b25b      	sxtb	r3, r3
 801721e:	4a0a      	ldr	r2, [pc, #40]	; (8017248 <RegionCommonTxConfigPrint+0x64>)
 8017220:	9302      	str	r3, [sp, #8]
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	9301      	str	r3, [sp, #4]
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	9300      	str	r3, [sp, #0]
 801722a:	0013      	movs	r3, r2
 801722c:	2200      	movs	r2, #0
 801722e:	2100      	movs	r1, #0
 8017230:	2002      	movs	r0, #2
 8017232:	f003 ffab 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 8017236:	46c0      	nop			; (mov r8, r8)
 8017238:	46bd      	mov	sp, r7
 801723a:	b004      	add	sp, #16
 801723c:	bd80      	pop	{r7, pc}
 801723e:	46c0      	nop			; (mov r8, r8)
 8017240:	000f4240 	.word	0x000f4240
 8017244:	000186a0 	.word	0x000186a0
 8017248:	0801e428 	.word	0x0801e428

0801724c <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b084      	sub	sp, #16
 8017250:	af00      	add	r7, sp, #0
 8017252:	0002      	movs	r2, r0
 8017254:	1dfb      	adds	r3, r7, #7
 8017256:	701a      	strb	r2, [r3, #0]
 8017258:	1dbb      	adds	r3, r7, #6
 801725a:	1c0a      	adds	r2, r1, #0
 801725c:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 801725e:	210f      	movs	r1, #15
 8017260:	187b      	adds	r3, r7, r1
 8017262:	2200      	movs	r2, #0
 8017264:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8017266:	1dfa      	adds	r2, r7, #7
 8017268:	1dbb      	adds	r3, r7, #6
 801726a:	7812      	ldrb	r2, [r2, #0]
 801726c:	b252      	sxtb	r2, r2
 801726e:	781b      	ldrb	r3, [r3, #0]
 8017270:	b25b      	sxtb	r3, r3
 8017272:	429a      	cmp	r2, r3
 8017274:	d104      	bne.n	8017280 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 8017276:	187b      	adds	r3, r7, r1
 8017278:	1dba      	adds	r2, r7, #6
 801727a:	7812      	ldrb	r2, [r2, #0]
 801727c:	701a      	strb	r2, [r3, #0]
 801727e:	e005      	b.n	801728c <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 8017280:	1dfb      	adds	r3, r7, #7
 8017282:	781a      	ldrb	r2, [r3, #0]
 8017284:	230f      	movs	r3, #15
 8017286:	18fb      	adds	r3, r7, r3
 8017288:	3a01      	subs	r2, #1
 801728a:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 801728c:	230f      	movs	r3, #15
 801728e:	18fb      	adds	r3, r7, r3
 8017290:	781b      	ldrb	r3, [r3, #0]
 8017292:	b25b      	sxtb	r3, r3
}
 8017294:	0018      	movs	r0, r3
 8017296:	46bd      	mov	sp, r7
 8017298:	b004      	add	sp, #16
 801729a:	bd80      	pop	{r7, pc}

0801729c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b082      	sub	sp, #8
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 80172a4:	4b09      	ldr	r3, [pc, #36]	; (80172cc <GetBandwidth+0x30>)
 80172a6:	687a      	ldr	r2, [r7, #4]
 80172a8:	0092      	lsls	r2, r2, #2
 80172aa:	58d3      	ldr	r3, [r2, r3]
 80172ac:	4a08      	ldr	r2, [pc, #32]	; (80172d0 <GetBandwidth+0x34>)
 80172ae:	4293      	cmp	r3, r2
 80172b0:	d004      	beq.n	80172bc <GetBandwidth+0x20>
 80172b2:	4a08      	ldr	r2, [pc, #32]	; (80172d4 <GetBandwidth+0x38>)
 80172b4:	4293      	cmp	r3, r2
 80172b6:	d003      	beq.n	80172c0 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80172b8:	2300      	movs	r3, #0
 80172ba:	e002      	b.n	80172c2 <GetBandwidth+0x26>
        case 250000:
            return 1;
 80172bc:	2301      	movs	r3, #1
 80172be:	e000      	b.n	80172c2 <GetBandwidth+0x26>
        case 500000:
            return 2;
 80172c0:	2302      	movs	r3, #2
    }
}
 80172c2:	0018      	movs	r0, r3
 80172c4:	46bd      	mov	sp, r7
 80172c6:	b002      	add	sp, #8
 80172c8:	bd80      	pop	{r7, pc}
 80172ca:	46c0      	nop			; (mov r8, r8)
 80172cc:	0801e4b0 	.word	0x0801e4b0
 80172d0:	0003d090 	.word	0x0003d090
 80172d4:	0007a120 	.word	0x0007a120

080172d8 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80172d8:	b590      	push	{r4, r7, lr}
 80172da:	b085      	sub	sp, #20
 80172dc:	af00      	add	r7, sp, #0
 80172de:	0004      	movs	r4, r0
 80172e0:	0008      	movs	r0, r1
 80172e2:	0011      	movs	r1, r2
 80172e4:	603b      	str	r3, [r7, #0]
 80172e6:	1dfb      	adds	r3, r7, #7
 80172e8:	1c22      	adds	r2, r4, #0
 80172ea:	701a      	strb	r2, [r3, #0]
 80172ec:	1dbb      	adds	r3, r7, #6
 80172ee:	1c02      	adds	r2, r0, #0
 80172f0:	701a      	strb	r2, [r3, #0]
 80172f2:	1d7b      	adds	r3, r7, #5
 80172f4:	1c0a      	adds	r2, r1, #0
 80172f6:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 80172f8:	210f      	movs	r1, #15
 80172fa:	187b      	adds	r3, r7, r1
 80172fc:	1dfa      	adds	r2, r7, #7
 80172fe:	7812      	ldrb	r2, [r2, #0]
 8017300:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8017302:	187a      	adds	r2, r7, r1
 8017304:	1dbb      	adds	r3, r7, #6
 8017306:	1df9      	adds	r1, r7, #7
 8017308:	780c      	ldrb	r4, [r1, #0]
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	b258      	sxtb	r0, r3
 801730e:	b261      	sxtb	r1, r4
 8017310:	4288      	cmp	r0, r1
 8017312:	da00      	bge.n	8017316 <LimitTxPower+0x3e>
 8017314:	1c23      	adds	r3, r4, #0
 8017316:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8017318:	230f      	movs	r3, #15
 801731a:	18fb      	adds	r3, r7, r3
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	b25b      	sxtb	r3, r3
}
 8017320:	0018      	movs	r0, r3
 8017322:	46bd      	mov	sp, r7
 8017324:	b005      	add	sp, #20
 8017326:	bd90      	pop	{r4, r7, pc}

08017328 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b082      	sub	sp, #8
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017332:	4b2e      	ldr	r3, [pc, #184]	; (80173ec <VerifyRfFreq+0xc4>)
 8017334:	6a1b      	ldr	r3, [r3, #32]
 8017336:	687a      	ldr	r2, [r7, #4]
 8017338:	0010      	movs	r0, r2
 801733a:	4798      	blx	r3
 801733c:	0003      	movs	r3, r0
 801733e:	001a      	movs	r2, r3
 8017340:	2301      	movs	r3, #1
 8017342:	4053      	eors	r3, r2
 8017344:	b2db      	uxtb	r3, r3
 8017346:	2b00      	cmp	r3, #0
 8017348:	d001      	beq.n	801734e <VerifyRfFreq+0x26>
    {
        return false;
 801734a:	2300      	movs	r3, #0
 801734c:	e04a      	b.n	80173e4 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	4a27      	ldr	r2, [pc, #156]	; (80173f0 <VerifyRfFreq+0xc8>)
 8017352:	4293      	cmp	r3, r2
 8017354:	d907      	bls.n	8017366 <VerifyRfFreq+0x3e>
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	4a26      	ldr	r2, [pc, #152]	; (80173f4 <VerifyRfFreq+0xcc>)
 801735a:	4293      	cmp	r3, r2
 801735c:	d803      	bhi.n	8017366 <VerifyRfFreq+0x3e>
    {
        *band = 2;
 801735e:	683b      	ldr	r3, [r7, #0]
 8017360:	2202      	movs	r2, #2
 8017362:	701a      	strb	r2, [r3, #0]
 8017364:	e03d      	b.n	80173e2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	4a22      	ldr	r2, [pc, #136]	; (80173f4 <VerifyRfFreq+0xcc>)
 801736a:	4293      	cmp	r3, r2
 801736c:	d907      	bls.n	801737e <VerifyRfFreq+0x56>
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	4a21      	ldr	r2, [pc, #132]	; (80173f8 <VerifyRfFreq+0xd0>)
 8017372:	4293      	cmp	r3, r2
 8017374:	d803      	bhi.n	801737e <VerifyRfFreq+0x56>
    {
        *band = 0;
 8017376:	683b      	ldr	r3, [r7, #0]
 8017378:	2200      	movs	r2, #0
 801737a:	701a      	strb	r2, [r3, #0]
 801737c:	e031      	b.n	80173e2 <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	4a1d      	ldr	r2, [pc, #116]	; (80173f8 <VerifyRfFreq+0xd0>)
 8017382:	4293      	cmp	r3, r2
 8017384:	d907      	bls.n	8017396 <VerifyRfFreq+0x6e>
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	4a1c      	ldr	r2, [pc, #112]	; (80173fc <VerifyRfFreq+0xd4>)
 801738a:	4293      	cmp	r3, r2
 801738c:	d803      	bhi.n	8017396 <VerifyRfFreq+0x6e>
    {
        *band = 1;
 801738e:	683b      	ldr	r3, [r7, #0]
 8017390:	2201      	movs	r2, #1
 8017392:	701a      	strb	r2, [r3, #0]
 8017394:	e025      	b.n	80173e2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	4a19      	ldr	r2, [pc, #100]	; (8017400 <VerifyRfFreq+0xd8>)
 801739a:	4293      	cmp	r3, r2
 801739c:	d907      	bls.n	80173ae <VerifyRfFreq+0x86>
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	4a18      	ldr	r2, [pc, #96]	; (8017404 <VerifyRfFreq+0xdc>)
 80173a2:	4293      	cmp	r3, r2
 80173a4:	d803      	bhi.n	80173ae <VerifyRfFreq+0x86>
    {
        *band = 5;
 80173a6:	683b      	ldr	r3, [r7, #0]
 80173a8:	2205      	movs	r2, #5
 80173aa:	701a      	strb	r2, [r3, #0]
 80173ac:	e019      	b.n	80173e2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	4a15      	ldr	r2, [pc, #84]	; (8017408 <VerifyRfFreq+0xe0>)
 80173b2:	4293      	cmp	r3, r2
 80173b4:	d907      	bls.n	80173c6 <VerifyRfFreq+0x9e>
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	4a14      	ldr	r2, [pc, #80]	; (801740c <VerifyRfFreq+0xe4>)
 80173ba:	4293      	cmp	r3, r2
 80173bc:	d803      	bhi.n	80173c6 <VerifyRfFreq+0x9e>
    {
        *band = 3;
 80173be:	683b      	ldr	r3, [r7, #0]
 80173c0:	2203      	movs	r2, #3
 80173c2:	701a      	strb	r2, [r3, #0]
 80173c4:	e00d      	b.n	80173e2 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	4a11      	ldr	r2, [pc, #68]	; (8017410 <VerifyRfFreq+0xe8>)
 80173ca:	4293      	cmp	r3, r2
 80173cc:	d907      	bls.n	80173de <VerifyRfFreq+0xb6>
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	4a10      	ldr	r2, [pc, #64]	; (8017414 <VerifyRfFreq+0xec>)
 80173d2:	4293      	cmp	r3, r2
 80173d4:	d803      	bhi.n	80173de <VerifyRfFreq+0xb6>
    {
        *band = 4;
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	2204      	movs	r2, #4
 80173da:	701a      	strb	r2, [r3, #0]
 80173dc:	e001      	b.n	80173e2 <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 80173de:	2300      	movs	r3, #0
 80173e0:	e000      	b.n	80173e4 <VerifyRfFreq+0xbc>
    }
    return true;
 80173e2:	2301      	movs	r3, #1
}
 80173e4:	0018      	movs	r0, r3
 80173e6:	46bd      	mov	sp, r7
 80173e8:	b002      	add	sp, #8
 80173ea:	bd80      	pop	{r7, pc}
 80173ec:	0801e62c 	.word	0x0801e62c
 80173f0:	337055bf 	.word	0x337055bf
 80173f4:	338eda3f 	.word	0x338eda3f
 80173f8:	33bca100 	.word	0x33bca100
 80173fc:	33c5c8c0 	.word	0x33c5c8c0
 8017400:	33c74f5f 	.word	0x33c74f5f
 8017404:	33cef080 	.word	0x33cef080
 8017408:	33d1fdbf 	.word	0x33d1fdbf
 801740c:	33d5ce50 	.word	0x33d5ce50
 8017410:	33d6919f 	.word	0x33d6919f
 8017414:	33db2580 	.word	0x33db2580

08017418 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017418:	b5b0      	push	{r4, r5, r7, lr}
 801741a:	b08a      	sub	sp, #40	; 0x28
 801741c:	af04      	add	r7, sp, #16
 801741e:	0002      	movs	r2, r0
 8017420:	1dfb      	adds	r3, r7, #7
 8017422:	701a      	strb	r2, [r3, #0]
 8017424:	1d3b      	adds	r3, r7, #4
 8017426:	1c0a      	adds	r2, r1, #0
 8017428:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 801742a:	1dfb      	adds	r3, r7, #7
 801742c:	781b      	ldrb	r3, [r3, #0]
 801742e:	b25b      	sxtb	r3, r3
 8017430:	4a26      	ldr	r2, [pc, #152]	; (80174cc <GetTimeOnAir+0xb4>)
 8017432:	5cd2      	ldrb	r2, [r2, r3]
 8017434:	2513      	movs	r5, #19
 8017436:	197b      	adds	r3, r7, r5
 8017438:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 801743a:	1dfb      	adds	r3, r7, #7
 801743c:	781b      	ldrb	r3, [r3, #0]
 801743e:	b25b      	sxtb	r3, r3
 8017440:	0018      	movs	r0, r3
 8017442:	f7ff ff2b 	bl	801729c <GetBandwidth>
 8017446:	0003      	movs	r3, r0
 8017448:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801744a:	2300      	movs	r3, #0
 801744c:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801744e:	1dfb      	adds	r3, r7, #7
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	b25b      	sxtb	r3, r3
 8017454:	2b07      	cmp	r3, #7
 8017456:	d11d      	bne.n	8017494 <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017458:	4b1d      	ldr	r3, [pc, #116]	; (80174d0 <GetTimeOnAir+0xb8>)
 801745a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801745c:	197b      	adds	r3, r7, r5
 801745e:	2200      	movs	r2, #0
 8017460:	569a      	ldrsb	r2, [r3, r2]
 8017462:	0013      	movs	r3, r2
 8017464:	015b      	lsls	r3, r3, #5
 8017466:	1a9b      	subs	r3, r3, r2
 8017468:	009b      	lsls	r3, r3, #2
 801746a:	189b      	adds	r3, r3, r2
 801746c:	00db      	lsls	r3, r3, #3
 801746e:	0018      	movs	r0, r3
 8017470:	1d3b      	adds	r3, r7, #4
 8017472:	881b      	ldrh	r3, [r3, #0]
 8017474:	b2db      	uxtb	r3, r3
 8017476:	68f9      	ldr	r1, [r7, #12]
 8017478:	2201      	movs	r2, #1
 801747a:	9203      	str	r2, [sp, #12]
 801747c:	9302      	str	r3, [sp, #8]
 801747e:	2300      	movs	r3, #0
 8017480:	9301      	str	r3, [sp, #4]
 8017482:	2305      	movs	r3, #5
 8017484:	9300      	str	r3, [sp, #0]
 8017486:	2300      	movs	r3, #0
 8017488:	0002      	movs	r2, r0
 801748a:	2000      	movs	r0, #0
 801748c:	47a0      	blx	r4
 801748e:	0003      	movs	r3, r0
 8017490:	617b      	str	r3, [r7, #20]
 8017492:	e015      	b.n	80174c0 <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017494:	4b0e      	ldr	r3, [pc, #56]	; (80174d0 <GetTimeOnAir+0xb8>)
 8017496:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017498:	2313      	movs	r3, #19
 801749a:	18fb      	adds	r3, r7, r3
 801749c:	2200      	movs	r2, #0
 801749e:	569a      	ldrsb	r2, [r3, r2]
 80174a0:	1d3b      	adds	r3, r7, #4
 80174a2:	881b      	ldrh	r3, [r3, #0]
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	68f9      	ldr	r1, [r7, #12]
 80174a8:	2001      	movs	r0, #1
 80174aa:	9003      	str	r0, [sp, #12]
 80174ac:	9302      	str	r3, [sp, #8]
 80174ae:	2300      	movs	r3, #0
 80174b0:	9301      	str	r3, [sp, #4]
 80174b2:	2308      	movs	r3, #8
 80174b4:	9300      	str	r3, [sp, #0]
 80174b6:	2301      	movs	r3, #1
 80174b8:	2001      	movs	r0, #1
 80174ba:	47a0      	blx	r4
 80174bc:	0003      	movs	r3, r0
 80174be:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 80174c0:	697b      	ldr	r3, [r7, #20]
}
 80174c2:	0018      	movs	r0, r3
 80174c4:	46bd      	mov	sp, r7
 80174c6:	b006      	add	sp, #24
 80174c8:	bdb0      	pop	{r4, r5, r7, pc}
 80174ca:	46c0      	nop			; (mov r8, r8)
 80174cc:	0801e4a8 	.word	0x0801e4a8
 80174d0:	0801e62c 	.word	0x0801e62c

080174d4 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b084      	sub	sp, #16
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80174dc:	2308      	movs	r3, #8
 80174de:	18fb      	adds	r3, r7, r3
 80174e0:	2200      	movs	r2, #0
 80174e2:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	781b      	ldrb	r3, [r3, #0]
 80174e8:	2b39      	cmp	r3, #57	; 0x39
 80174ea:	d900      	bls.n	80174ee <RegionEU868GetPhyParam+0x1a>
 80174ec:	e0e9      	b.n	80176c2 <RegionEU868GetPhyParam+0x1ee>
 80174ee:	009a      	lsls	r2, r3, #2
 80174f0:	4b7b      	ldr	r3, [pc, #492]	; (80176e0 <RegionEU868GetPhyParam+0x20c>)
 80174f2:	18d3      	adds	r3, r2, r3
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80174f8:	2308      	movs	r3, #8
 80174fa:	18fb      	adds	r3, r7, r3
 80174fc:	2200      	movs	r2, #0
 80174fe:	601a      	str	r2, [r3, #0]
            break;
 8017500:	e0e0      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8017502:	2308      	movs	r3, #8
 8017504:	18fb      	adds	r3, r7, r3
 8017506:	2200      	movs	r2, #0
 8017508:	601a      	str	r2, [r3, #0]
            break;
 801750a:	e0db      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801750c:	2308      	movs	r3, #8
 801750e:	18fb      	adds	r3, r7, r3
 8017510:	2200      	movs	r2, #0
 8017512:	601a      	str	r2, [r3, #0]
            break;
 8017514:	e0d6      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	785b      	ldrb	r3, [r3, #1]
 801751a:	b25b      	sxtb	r3, r3
 801751c:	2100      	movs	r1, #0
 801751e:	0018      	movs	r0, r3
 8017520:	f7ff fe94 	bl	801724c <GetNextLowerTxDr>
 8017524:	0003      	movs	r3, r0
 8017526:	001a      	movs	r2, r3
 8017528:	2308      	movs	r3, #8
 801752a:	18fb      	adds	r3, r7, r3
 801752c:	601a      	str	r2, [r3, #0]
            break;
 801752e:	e0c9      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017530:	2308      	movs	r3, #8
 8017532:	18fb      	adds	r3, r7, r3
 8017534:	2200      	movs	r2, #0
 8017536:	601a      	str	r2, [r3, #0]
            break;
 8017538:	e0c4      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801753a:	2308      	movs	r3, #8
 801753c:	18fb      	adds	r3, r7, r3
 801753e:	2200      	movs	r2, #0
 8017540:	601a      	str	r2, [r3, #0]
            break;
 8017542:	e0bf      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8017544:	2308      	movs	r3, #8
 8017546:	18fb      	adds	r3, r7, r3
 8017548:	2240      	movs	r2, #64	; 0x40
 801754a:	601a      	str	r2, [r3, #0]
            break;
 801754c:	e0ba      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 801754e:	2308      	movs	r3, #8
 8017550:	18fb      	adds	r3, r7, r3
 8017552:	2220      	movs	r2, #32
 8017554:	601a      	str	r2, [r3, #0]
            break;
 8017556:	e0b5      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	785b      	ldrb	r3, [r3, #1]
 801755c:	b25b      	sxtb	r3, r3
 801755e:	001a      	movs	r2, r3
 8017560:	4b60      	ldr	r3, [pc, #384]	; (80176e4 <RegionEU868GetPhyParam+0x210>)
 8017562:	5c9b      	ldrb	r3, [r3, r2]
 8017564:	001a      	movs	r2, r3
 8017566:	2308      	movs	r3, #8
 8017568:	18fb      	adds	r3, r7, r3
 801756a:	601a      	str	r2, [r3, #0]
            break;
 801756c:	e0aa      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	785b      	ldrb	r3, [r3, #1]
 8017572:	b25b      	sxtb	r3, r3
 8017574:	001a      	movs	r2, r3
 8017576:	4b5c      	ldr	r3, [pc, #368]	; (80176e8 <RegionEU868GetPhyParam+0x214>)
 8017578:	5c9b      	ldrb	r3, [r3, r2]
 801757a:	001a      	movs	r2, r3
 801757c:	2308      	movs	r3, #8
 801757e:	18fb      	adds	r3, r7, r3
 8017580:	601a      	str	r2, [r3, #0]
            break;
 8017582:	e09f      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017584:	2308      	movs	r3, #8
 8017586:	18fb      	adds	r3, r7, r3
 8017588:	2201      	movs	r2, #1
 801758a:	601a      	str	r2, [r3, #0]
            break;
 801758c:	e09a      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801758e:	2308      	movs	r3, #8
 8017590:	18fb      	adds	r3, r7, r3
 8017592:	4a56      	ldr	r2, [pc, #344]	; (80176ec <RegionEU868GetPhyParam+0x218>)
 8017594:	601a      	str	r2, [r3, #0]
            break;
 8017596:	e095      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8017598:	2308      	movs	r3, #8
 801759a:	18fb      	adds	r3, r7, r3
 801759c:	22fa      	movs	r2, #250	; 0xfa
 801759e:	0092      	lsls	r2, r2, #2
 80175a0:	601a      	str	r2, [r3, #0]
            break;
 80175a2:	e08f      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 80175a4:	2308      	movs	r3, #8
 80175a6:	18fb      	adds	r3, r7, r3
 80175a8:	22fa      	movs	r2, #250	; 0xfa
 80175aa:	00d2      	lsls	r2, r2, #3
 80175ac:	601a      	str	r2, [r3, #0]
            break;
 80175ae:	e089      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 80175b0:	2308      	movs	r3, #8
 80175b2:	18fb      	adds	r3, r7, r3
 80175b4:	4a4e      	ldr	r2, [pc, #312]	; (80176f0 <RegionEU868GetPhyParam+0x21c>)
 80175b6:	601a      	str	r2, [r3, #0]
            break;
 80175b8:	e084      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 80175ba:	2308      	movs	r3, #8
 80175bc:	18fb      	adds	r3, r7, r3
 80175be:	4a4d      	ldr	r2, [pc, #308]	; (80176f4 <RegionEU868GetPhyParam+0x220>)
 80175c0:	601a      	str	r2, [r3, #0]
            break;
 80175c2:	e07f      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 80175c4:	2308      	movs	r3, #8
 80175c6:	18fb      	adds	r3, r7, r3
 80175c8:	2280      	movs	r2, #128	; 0x80
 80175ca:	01d2      	lsls	r2, r2, #7
 80175cc:	601a      	str	r2, [r3, #0]
            break;
 80175ce:	e079      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 80175d0:	23fa      	movs	r3, #250	; 0xfa
 80175d2:	009b      	lsls	r3, r3, #2
 80175d4:	4a48      	ldr	r2, [pc, #288]	; (80176f8 <RegionEU868GetPhyParam+0x224>)
 80175d6:	0019      	movs	r1, r3
 80175d8:	0010      	movs	r0, r2
 80175da:	f001 f983 	bl	80188e4 <randr>
 80175de:	0003      	movs	r3, r0
 80175e0:	22fa      	movs	r2, #250	; 0xfa
 80175e2:	00d2      	lsls	r2, r2, #3
 80175e4:	4694      	mov	ip, r2
 80175e6:	4463      	add	r3, ip
 80175e8:	001a      	movs	r2, r3
 80175ea:	2308      	movs	r3, #8
 80175ec:	18fb      	adds	r3, r7, r3
 80175ee:	601a      	str	r2, [r3, #0]
            break;
 80175f0:	e068      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 80175f2:	2308      	movs	r3, #8
 80175f4:	18fb      	adds	r3, r7, r3
 80175f6:	2200      	movs	r2, #0
 80175f8:	601a      	str	r2, [r3, #0]
            break;
 80175fa:	e063      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80175fc:	2308      	movs	r3, #8
 80175fe:	18fb      	adds	r3, r7, r3
 8017600:	4a3e      	ldr	r2, [pc, #248]	; (80176fc <RegionEU868GetPhyParam+0x228>)
 8017602:	601a      	str	r2, [r3, #0]
            break;
 8017604:	e05e      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017606:	2308      	movs	r3, #8
 8017608:	18fb      	adds	r3, r7, r3
 801760a:	2200      	movs	r2, #0
 801760c:	601a      	str	r2, [r3, #0]
            break;
 801760e:	e059      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8017610:	2308      	movs	r3, #8
 8017612:	18fb      	adds	r3, r7, r3
 8017614:	4a3a      	ldr	r2, [pc, #232]	; (8017700 <RegionEU868GetPhyParam+0x22c>)
 8017616:	601a      	str	r2, [r3, #0]
            break;
 8017618:	e054      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801761a:	2308      	movs	r3, #8
 801761c:	18fb      	adds	r3, r7, r3
 801761e:	4a39      	ldr	r2, [pc, #228]	; (8017704 <RegionEU868GetPhyParam+0x230>)
 8017620:	601a      	str	r2, [r3, #0]
            break;
 8017622:	e04f      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8017624:	2308      	movs	r3, #8
 8017626:	18fb      	adds	r3, r7, r3
 8017628:	2210      	movs	r2, #16
 801762a:	601a      	str	r2, [r3, #0]
            break;
 801762c:	e04a      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 801762e:	2308      	movs	r3, #8
 8017630:	18fb      	adds	r3, r7, r3
 8017632:	4a35      	ldr	r2, [pc, #212]	; (8017708 <RegionEU868GetPhyParam+0x234>)
 8017634:	601a      	str	r2, [r3, #0]
            break;
 8017636:	e045      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8017638:	2308      	movs	r3, #8
 801763a:	18fb      	adds	r3, r7, r3
 801763c:	2200      	movs	r2, #0
 801763e:	601a      	str	r2, [r3, #0]
            break;
 8017640:	e040      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8017642:	2308      	movs	r3, #8
 8017644:	18fb      	adds	r3, r7, r3
 8017646:	2283      	movs	r2, #131	; 0x83
 8017648:	05d2      	lsls	r2, r2, #23
 801764a:	601a      	str	r2, [r3, #0]
            break;
 801764c:	e03a      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801764e:	2308      	movs	r3, #8
 8017650:	18fb      	adds	r3, r7, r3
 8017652:	4a2e      	ldr	r2, [pc, #184]	; (801770c <RegionEU868GetPhyParam+0x238>)
 8017654:	601a      	str	r2, [r3, #0]
            break;
 8017656:	e035      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8017658:	2308      	movs	r3, #8
 801765a:	18fb      	adds	r3, r7, r3
 801765c:	4a27      	ldr	r2, [pc, #156]	; (80176fc <RegionEU868GetPhyParam+0x228>)
 801765e:	601a      	str	r2, [r3, #0]
            break;
 8017660:	e030      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8017662:	2108      	movs	r1, #8
 8017664:	187b      	adds	r3, r7, r1
 8017666:	2211      	movs	r2, #17
 8017668:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801766a:	187b      	adds	r3, r7, r1
 801766c:	2202      	movs	r2, #2
 801766e:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8017670:	187b      	adds	r3, r7, r1
 8017672:	2200      	movs	r2, #0
 8017674:	709a      	strb	r2, [r3, #2]
            break;
 8017676:	e025      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8017678:	2308      	movs	r3, #8
 801767a:	18fb      	adds	r3, r7, r3
 801767c:	2203      	movs	r2, #3
 801767e:	601a      	str	r2, [r3, #0]
            break;
 8017680:	e020      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8017682:	2308      	movs	r3, #8
 8017684:	18fb      	adds	r3, r7, r3
 8017686:	4a1d      	ldr	r2, [pc, #116]	; (80176fc <RegionEU868GetPhyParam+0x228>)
 8017688:	601a      	str	r2, [r3, #0]
            break;
 801768a:	e01b      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801768c:	2308      	movs	r3, #8
 801768e:	18fb      	adds	r3, r7, r3
 8017690:	2203      	movs	r2, #3
 8017692:	601a      	str	r2, [r3, #0]
            break;
 8017694:	e016      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	785b      	ldrb	r3, [r3, #1]
 801769a:	b25b      	sxtb	r3, r3
 801769c:	001a      	movs	r2, r3
 801769e:	4b1c      	ldr	r3, [pc, #112]	; (8017710 <RegionEU868GetPhyParam+0x23c>)
 80176a0:	5c9b      	ldrb	r3, [r3, r2]
 80176a2:	001a      	movs	r2, r3
 80176a4:	2308      	movs	r3, #8
 80176a6:	18fb      	adds	r3, r7, r3
 80176a8:	601a      	str	r2, [r3, #0]
            break;
 80176aa:	e00b      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	785b      	ldrb	r3, [r3, #1]
 80176b0:	b25b      	sxtb	r3, r3
 80176b2:	0018      	movs	r0, r3
 80176b4:	f7ff fdf2 	bl	801729c <GetBandwidth>
 80176b8:	0002      	movs	r2, r0
 80176ba:	2308      	movs	r3, #8
 80176bc:	18fb      	adds	r3, r7, r3
 80176be:	601a      	str	r2, [r3, #0]
            break;
 80176c0:	e000      	b.n	80176c4 <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 80176c2:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80176c4:	210c      	movs	r1, #12
 80176c6:	187b      	adds	r3, r7, r1
 80176c8:	2208      	movs	r2, #8
 80176ca:	18ba      	adds	r2, r7, r2
 80176cc:	6812      	ldr	r2, [r2, #0]
 80176ce:	601a      	str	r2, [r3, #0]
 80176d0:	187b      	adds	r3, r7, r1
 80176d2:	681a      	ldr	r2, [r3, #0]
 80176d4:	0013      	movs	r3, r2
}
 80176d6:	0018      	movs	r0, r3
 80176d8:	46bd      	mov	sp, r7
 80176da:	b004      	add	sp, #16
 80176dc:	bd80      	pop	{r7, pc}
 80176de:	46c0      	nop			; (mov r8, r8)
 80176e0:	0801e4e0 	.word	0x0801e4e0
 80176e4:	0801e4d0 	.word	0x0801e4d0
 80176e8:	0801e4d8 	.word	0x0801e4d8
 80176ec:	00000bb8 	.word	0x00000bb8
 80176f0:	00001388 	.word	0x00001388
 80176f4:	00001770 	.word	0x00001770
 80176f8:	fffffc18 	.word	0xfffffc18
 80176fc:	33d3e608 	.word	0x33d3e608
 8017700:	20001430 	.word	0x20001430
 8017704:	20001432 	.word	0x20001432
 8017708:	200012f8 	.word	0x200012f8
 801770c:	4009999a 	.word	0x4009999a
 8017710:	0801e4a8 	.word	0x0801e4a8

08017714 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017714:	b5b0      	push	{r4, r5, r7, lr}
 8017716:	b084      	sub	sp, #16
 8017718:	af02      	add	r7, sp, #8
 801771a:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	781b      	ldrb	r3, [r3, #0]
 8017720:	0019      	movs	r1, r3
 8017722:	4a11      	ldr	r2, [pc, #68]	; (8017768 <RegionEU868SetBandTxDone+0x54>)
 8017724:	000b      	movs	r3, r1
 8017726:	005b      	lsls	r3, r3, #1
 8017728:	185b      	adds	r3, r3, r1
 801772a:	009b      	lsls	r3, r3, #2
 801772c:	18d3      	adds	r3, r2, r3
 801772e:	3309      	adds	r3, #9
 8017730:	781b      	ldrb	r3, [r3, #0]
 8017732:	001a      	movs	r2, r3
 8017734:	0013      	movs	r3, r2
 8017736:	009b      	lsls	r3, r3, #2
 8017738:	189b      	adds	r3, r3, r2
 801773a:	009b      	lsls	r3, r3, #2
 801773c:	33c0      	adds	r3, #192	; 0xc0
 801773e:	001a      	movs	r2, r3
 8017740:	4b09      	ldr	r3, [pc, #36]	; (8017768 <RegionEU868SetBandTxDone+0x54>)
 8017742:	18d0      	adds	r0, r2, r3
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	689c      	ldr	r4, [r3, #8]
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	785d      	ldrb	r5, [r3, #1]
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	466a      	mov	r2, sp
 8017750:	6919      	ldr	r1, [r3, #16]
 8017752:	6011      	str	r1, [r2, #0]
 8017754:	68db      	ldr	r3, [r3, #12]
 8017756:	002a      	movs	r2, r5
 8017758:	0021      	movs	r1, r4
 801775a:	f7ff f932 	bl	80169c2 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 801775e:	46c0      	nop			; (mov r8, r8)
 8017760:	46bd      	mov	sp, r7
 8017762:	b002      	add	sp, #8
 8017764:	bdb0      	pop	{r4, r5, r7, pc}
 8017766:	46c0      	nop			; (mov r8, r8)
 8017768:	200012f8 	.word	0x200012f8

0801776c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801776c:	b590      	push	{r4, r7, lr}
 801776e:	b0ab      	sub	sp, #172	; 0xac
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 8017774:	2430      	movs	r4, #48	; 0x30
 8017776:	193b      	adds	r3, r7, r4
 8017778:	0018      	movs	r0, r3
 801777a:	2378      	movs	r3, #120	; 0x78
 801777c:	001a      	movs	r2, r3
 801777e:	2100      	movs	r1, #0
 8017780:	f005 fd91 	bl	801d2a6 <memset>
 8017784:	0021      	movs	r1, r4
 8017786:	187b      	adds	r3, r7, r1
 8017788:	2264      	movs	r2, #100	; 0x64
 801778a:	801a      	strh	r2, [r3, #0]
 801778c:	187b      	adds	r3, r7, r1
 801778e:	2264      	movs	r2, #100	; 0x64
 8017790:	829a      	strh	r2, [r3, #20]
 8017792:	187b      	adds	r3, r7, r1
 8017794:	22fa      	movs	r2, #250	; 0xfa
 8017796:	0092      	lsls	r2, r2, #2
 8017798:	851a      	strh	r2, [r3, #40]	; 0x28
 801779a:	187b      	adds	r3, r7, r1
 801779c:	220a      	movs	r2, #10
 801779e:	879a      	strh	r2, [r3, #60]	; 0x3c
 80177a0:	0008      	movs	r0, r1
 80177a2:	187b      	adds	r3, r7, r1
 80177a4:	2250      	movs	r2, #80	; 0x50
 80177a6:	2164      	movs	r1, #100	; 0x64
 80177a8:	5299      	strh	r1, [r3, r2]
 80177aa:	183b      	adds	r3, r7, r0
 80177ac:	2264      	movs	r2, #100	; 0x64
 80177ae:	21fa      	movs	r1, #250	; 0xfa
 80177b0:	0089      	lsls	r1, r1, #2
 80177b2:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	791b      	ldrb	r3, [r3, #4]
 80177b8:	2b03      	cmp	r3, #3
 80177ba:	d048      	beq.n	801784e <RegionEU868InitDefaults+0xe2>
 80177bc:	dc54      	bgt.n	8017868 <RegionEU868InitDefaults+0xfc>
 80177be:	2b02      	cmp	r3, #2
 80177c0:	d036      	beq.n	8017830 <RegionEU868InitDefaults+0xc4>
 80177c2:	dc51      	bgt.n	8017868 <RegionEU868InitDefaults+0xfc>
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d002      	beq.n	80177ce <RegionEU868InitDefaults+0x62>
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	d021      	beq.n	8017810 <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 80177cc:	e04c      	b.n	8017868 <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80177ce:	2330      	movs	r3, #48	; 0x30
 80177d0:	18f9      	adds	r1, r7, r3
 80177d2:	4b29      	ldr	r3, [pc, #164]	; (8017878 <RegionEU868InitDefaults+0x10c>)
 80177d4:	2278      	movs	r2, #120	; 0x78
 80177d6:	0018      	movs	r0, r3
 80177d8:	f001 f89a 	bl	8018910 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80177dc:	4b27      	ldr	r3, [pc, #156]	; (801787c <RegionEU868InitDefaults+0x110>)
 80177de:	4a28      	ldr	r2, [pc, #160]	; (8017880 <RegionEU868InitDefaults+0x114>)
 80177e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80177e2:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80177e4:	4b25      	ldr	r3, [pc, #148]	; (801787c <RegionEU868InitDefaults+0x110>)
 80177e6:	4a27      	ldr	r2, [pc, #156]	; (8017884 <RegionEU868InitDefaults+0x118>)
 80177e8:	330c      	adds	r3, #12
 80177ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80177ec:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80177ee:	4b23      	ldr	r3, [pc, #140]	; (801787c <RegionEU868InitDefaults+0x110>)
 80177f0:	4a25      	ldr	r2, [pc, #148]	; (8017888 <RegionEU868InitDefaults+0x11c>)
 80177f2:	3318      	adds	r3, #24
 80177f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80177f6:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80177f8:	4a20      	ldr	r2, [pc, #128]	; (801787c <RegionEU868InitDefaults+0x110>)
 80177fa:	239d      	movs	r3, #157	; 0x9d
 80177fc:	005b      	lsls	r3, r3, #1
 80177fe:	2107      	movs	r1, #7
 8017800:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017802:	4922      	ldr	r1, [pc, #136]	; (801788c <RegionEU868InitDefaults+0x120>)
 8017804:	4b22      	ldr	r3, [pc, #136]	; (8017890 <RegionEU868InitDefaults+0x124>)
 8017806:	2201      	movs	r2, #1
 8017808:	0018      	movs	r0, r3
 801780a:	f7ff f8ab 	bl	8016964 <RegionCommonChanMaskCopy>
            break;
 801780e:	e02e      	b.n	801786e <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 8017810:	4b1a      	ldr	r3, [pc, #104]	; (801787c <RegionEU868InitDefaults+0x110>)
 8017812:	2200      	movs	r2, #0
 8017814:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 8017816:	4b19      	ldr	r3, [pc, #100]	; (801787c <RegionEU868InitDefaults+0x110>)
 8017818:	2200      	movs	r2, #0
 801781a:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 801781c:	4b17      	ldr	r3, [pc, #92]	; (801787c <RegionEU868InitDefaults+0x110>)
 801781e:	2200      	movs	r2, #0
 8017820:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017822:	491a      	ldr	r1, [pc, #104]	; (801788c <RegionEU868InitDefaults+0x120>)
 8017824:	4b1a      	ldr	r3, [pc, #104]	; (8017890 <RegionEU868InitDefaults+0x124>)
 8017826:	2201      	movs	r2, #1
 8017828:	0018      	movs	r0, r3
 801782a:	f7ff f89b 	bl	8016964 <RegionCommonChanMaskCopy>
            break;
 801782e:	e01e      	b.n	801786e <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8017830:	4a12      	ldr	r2, [pc, #72]	; (801787c <RegionEU868InitDefaults+0x110>)
 8017832:	239c      	movs	r3, #156	; 0x9c
 8017834:	005b      	lsls	r3, r3, #1
 8017836:	5ad2      	ldrh	r2, [r2, r3]
 8017838:	4910      	ldr	r1, [pc, #64]	; (801787c <RegionEU868InitDefaults+0x110>)
 801783a:	239d      	movs	r3, #157	; 0x9d
 801783c:	005b      	lsls	r3, r3, #1
 801783e:	5acb      	ldrh	r3, [r1, r3]
 8017840:	4313      	orrs	r3, r2
 8017842:	b299      	uxth	r1, r3
 8017844:	4a0d      	ldr	r2, [pc, #52]	; (801787c <RegionEU868InitDefaults+0x110>)
 8017846:	239c      	movs	r3, #156	; 0x9c
 8017848:	005b      	lsls	r3, r3, #1
 801784a:	52d1      	strh	r1, [r2, r3]
            break;
 801784c:	e00f      	b.n	801786e <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d00a      	beq.n	801786c <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	6819      	ldr	r1, [r3, #0]
 801785a:	239e      	movs	r3, #158	; 0x9e
 801785c:	005a      	lsls	r2, r3, #1
 801785e:	4b07      	ldr	r3, [pc, #28]	; (801787c <RegionEU868InitDefaults+0x110>)
 8017860:	0018      	movs	r0, r3
 8017862:	f001 f855 	bl	8018910 <memcpy1>
            break;
 8017866:	e001      	b.n	801786c <RegionEU868InitDefaults+0x100>
            break;
 8017868:	46c0      	nop			; (mov r8, r8)
 801786a:	e000      	b.n	801786e <RegionEU868InitDefaults+0x102>
            break;
 801786c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801786e:	46c0      	nop			; (mov r8, r8)
 8017870:	46bd      	mov	sp, r7
 8017872:	b02b      	add	sp, #172	; 0xac
 8017874:	bd90      	pop	{r4, r7, pc}
 8017876:	46c0      	nop			; (mov r8, r8)
 8017878:	200013b8 	.word	0x200013b8
 801787c:	200012f8 	.word	0x200012f8
 8017880:	0801e5c8 	.word	0x0801e5c8
 8017884:	0801e5d4 	.word	0x0801e5d4
 8017888:	0801e5e0 	.word	0x0801e5e0
 801788c:	20001432 	.word	0x20001432
 8017890:	20001430 	.word	0x20001430

08017894 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b082      	sub	sp, #8
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	229e      	movs	r2, #158	; 0x9e
 80178a0:	0052      	lsls	r2, r2, #1
 80178a2:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 80178a4:	4b02      	ldr	r3, [pc, #8]	; (80178b0 <RegionEU868GetNvmCtx+0x1c>)
}
 80178a6:	0018      	movs	r0, r3
 80178a8:	46bd      	mov	sp, r7
 80178aa:	b002      	add	sp, #8
 80178ac:	bd80      	pop	{r7, pc}
 80178ae:	46c0      	nop			; (mov r8, r8)
 80178b0:	200012f8 	.word	0x200012f8

080178b4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b084      	sub	sp, #16
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
 80178bc:	000a      	movs	r2, r1
 80178be:	1cfb      	adds	r3, r7, #3
 80178c0:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 80178c2:	1cfb      	adds	r3, r7, #3
 80178c4:	781b      	ldrb	r3, [r3, #0]
 80178c6:	2b0f      	cmp	r3, #15
 80178c8:	d847      	bhi.n	801795a <RegionEU868Verify+0xa6>
 80178ca:	009a      	lsls	r2, r3, #2
 80178cc:	4b25      	ldr	r3, [pc, #148]	; (8017964 <RegionEU868Verify+0xb0>)
 80178ce:	18d3      	adds	r3, r2, r3
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80178d4:	210f      	movs	r1, #15
 80178d6:	187b      	adds	r3, r7, r1
 80178d8:	2200      	movs	r2, #0
 80178da:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	187a      	adds	r2, r7, r1
 80178e2:	0011      	movs	r1, r2
 80178e4:	0018      	movs	r0, r3
 80178e6:	f7ff fd1f 	bl	8017328 <VerifyRfFreq>
 80178ea:	0003      	movs	r3, r0
 80178ec:	e036      	b.n	801795c <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	b25b      	sxtb	r3, r3
 80178f4:	2207      	movs	r2, #7
 80178f6:	2100      	movs	r1, #0
 80178f8:	0018      	movs	r0, r3
 80178fa:	f7fe ff8a 	bl	8016812 <RegionCommonValueInRange>
 80178fe:	0003      	movs	r3, r0
 8017900:	1e5a      	subs	r2, r3, #1
 8017902:	4193      	sbcs	r3, r2
 8017904:	b2db      	uxtb	r3, r3
 8017906:	e029      	b.n	801795c <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	781b      	ldrb	r3, [r3, #0]
 801790c:	b25b      	sxtb	r3, r3
 801790e:	2205      	movs	r2, #5
 8017910:	2100      	movs	r1, #0
 8017912:	0018      	movs	r0, r3
 8017914:	f7fe ff7d 	bl	8016812 <RegionCommonValueInRange>
 8017918:	0003      	movs	r3, r0
 801791a:	1e5a      	subs	r2, r3, #1
 801791c:	4193      	sbcs	r3, r2
 801791e:	b2db      	uxtb	r3, r3
 8017920:	e01c      	b.n	801795c <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	781b      	ldrb	r3, [r3, #0]
 8017926:	b25b      	sxtb	r3, r3
 8017928:	2207      	movs	r2, #7
 801792a:	2100      	movs	r1, #0
 801792c:	0018      	movs	r0, r3
 801792e:	f7fe ff70 	bl	8016812 <RegionCommonValueInRange>
 8017932:	0003      	movs	r3, r0
 8017934:	1e5a      	subs	r2, r3, #1
 8017936:	4193      	sbcs	r3, r2
 8017938:	b2db      	uxtb	r3, r3
 801793a:	e00f      	b.n	801795c <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	781b      	ldrb	r3, [r3, #0]
 8017940:	b25b      	sxtb	r3, r3
 8017942:	2200      	movs	r2, #0
 8017944:	2100      	movs	r1, #0
 8017946:	0018      	movs	r0, r3
 8017948:	f7fe ff63 	bl	8016812 <RegionCommonValueInRange>
 801794c:	0003      	movs	r3, r0
 801794e:	1e5a      	subs	r2, r3, #1
 8017950:	4193      	sbcs	r3, r2
 8017952:	b2db      	uxtb	r3, r3
 8017954:	e002      	b.n	801795c <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8017956:	2301      	movs	r3, #1
 8017958:	e000      	b.n	801795c <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 801795a:	2300      	movs	r3, #0
    }
}
 801795c:	0018      	movs	r0, r3
 801795e:	46bd      	mov	sp, r7
 8017960:	b004      	add	sp, #16
 8017962:	bd80      	pop	{r7, pc}
 8017964:	0801e5ec 	.word	0x0801e5ec

08017968 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017968:	b590      	push	{r4, r7, lr}
 801796a:	b08b      	sub	sp, #44	; 0x2c
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8017970:	2318      	movs	r3, #24
 8017972:	18fb      	adds	r3, r7, r3
 8017974:	2250      	movs	r2, #80	; 0x50
 8017976:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	791b      	ldrb	r3, [r3, #4]
 801797c:	2b10      	cmp	r3, #16
 801797e:	d000      	beq.n	8017982 <RegionEU868ApplyCFList+0x1a>
 8017980:	e07c      	b.n	8017a7c <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	330f      	adds	r3, #15
 8017988:	781b      	ldrb	r3, [r3, #0]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d000      	beq.n	8017990 <RegionEU868ApplyCFList+0x28>
 801798e:	e077      	b.n	8017a80 <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017990:	2327      	movs	r3, #39	; 0x27
 8017992:	18fb      	adds	r3, r7, r3
 8017994:	2200      	movs	r2, #0
 8017996:	701a      	strb	r2, [r3, #0]
 8017998:	2326      	movs	r3, #38	; 0x26
 801799a:	18fb      	adds	r3, r7, r3
 801799c:	2203      	movs	r2, #3
 801799e:	701a      	strb	r2, [r3, #0]
 80179a0:	e066      	b.n	8017a70 <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80179a2:	2326      	movs	r3, #38	; 0x26
 80179a4:	18fb      	adds	r3, r7, r3
 80179a6:	781b      	ldrb	r3, [r3, #0]
 80179a8:	2b07      	cmp	r3, #7
 80179aa:	d82e      	bhi.n	8017a0a <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681a      	ldr	r2, [r3, #0]
 80179b0:	2427      	movs	r4, #39	; 0x27
 80179b2:	193b      	adds	r3, r7, r4
 80179b4:	781b      	ldrb	r3, [r3, #0]
 80179b6:	18d3      	adds	r3, r2, r3
 80179b8:	781b      	ldrb	r3, [r3, #0]
 80179ba:	001a      	movs	r2, r3
 80179bc:	2018      	movs	r0, #24
 80179be:	183b      	adds	r3, r7, r0
 80179c0:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80179c2:	183b      	adds	r3, r7, r0
 80179c4:	681a      	ldr	r2, [r3, #0]
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	6819      	ldr	r1, [r3, #0]
 80179ca:	193b      	adds	r3, r7, r4
 80179cc:	781b      	ldrb	r3, [r3, #0]
 80179ce:	3301      	adds	r3, #1
 80179d0:	18cb      	adds	r3, r1, r3
 80179d2:	781b      	ldrb	r3, [r3, #0]
 80179d4:	021b      	lsls	r3, r3, #8
 80179d6:	431a      	orrs	r2, r3
 80179d8:	183b      	adds	r3, r7, r0
 80179da:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80179dc:	183b      	adds	r3, r7, r0
 80179de:	681a      	ldr	r2, [r3, #0]
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	6819      	ldr	r1, [r3, #0]
 80179e4:	193b      	adds	r3, r7, r4
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	3302      	adds	r3, #2
 80179ea:	18cb      	adds	r3, r1, r3
 80179ec:	781b      	ldrb	r3, [r3, #0]
 80179ee:	041b      	lsls	r3, r3, #16
 80179f0:	431a      	orrs	r2, r3
 80179f2:	183b      	adds	r3, r7, r0
 80179f4:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80179f6:	183b      	adds	r3, r7, r0
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	2264      	movs	r2, #100	; 0x64
 80179fc:	435a      	muls	r2, r3
 80179fe:	183b      	adds	r3, r7, r0
 8017a00:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8017a02:	183b      	adds	r3, r7, r0
 8017a04:	2200      	movs	r2, #0
 8017a06:	605a      	str	r2, [r3, #4]
 8017a08:	e009      	b.n	8017a1e <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8017a0a:	2118      	movs	r1, #24
 8017a0c:	187b      	adds	r3, r7, r1
 8017a0e:	2200      	movs	r2, #0
 8017a10:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8017a12:	187b      	adds	r3, r7, r1
 8017a14:	2200      	movs	r2, #0
 8017a16:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8017a18:	187b      	adds	r3, r7, r1
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8017a1e:	2218      	movs	r2, #24
 8017a20:	18bb      	adds	r3, r7, r2
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d00d      	beq.n	8017a44 <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 8017a28:	2110      	movs	r1, #16
 8017a2a:	187b      	adds	r3, r7, r1
 8017a2c:	18ba      	adds	r2, r7, r2
 8017a2e:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8017a30:	187b      	adds	r3, r7, r1
 8017a32:	2226      	movs	r2, #38	; 0x26
 8017a34:	18ba      	adds	r2, r7, r2
 8017a36:	7812      	ldrb	r2, [r2, #0]
 8017a38:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8017a3a:	187b      	adds	r3, r7, r1
 8017a3c:	0018      	movs	r0, r3
 8017a3e:	f000 fdb5 	bl	80185ac <RegionEU868ChannelAdd>
 8017a42:	e009      	b.n	8017a58 <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8017a44:	210c      	movs	r1, #12
 8017a46:	187b      	adds	r3, r7, r1
 8017a48:	2226      	movs	r2, #38	; 0x26
 8017a4a:	18ba      	adds	r2, r7, r2
 8017a4c:	7812      	ldrb	r2, [r2, #0]
 8017a4e:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8017a50:	187b      	adds	r3, r7, r1
 8017a52:	0018      	movs	r0, r3
 8017a54:	f000 fe6e 	bl	8018734 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8017a58:	2227      	movs	r2, #39	; 0x27
 8017a5a:	18bb      	adds	r3, r7, r2
 8017a5c:	18ba      	adds	r2, r7, r2
 8017a5e:	7812      	ldrb	r2, [r2, #0]
 8017a60:	3203      	adds	r2, #3
 8017a62:	701a      	strb	r2, [r3, #0]
 8017a64:	2126      	movs	r1, #38	; 0x26
 8017a66:	187b      	adds	r3, r7, r1
 8017a68:	781a      	ldrb	r2, [r3, #0]
 8017a6a:	187b      	adds	r3, r7, r1
 8017a6c:	3201      	adds	r2, #1
 8017a6e:	701a      	strb	r2, [r3, #0]
 8017a70:	2326      	movs	r3, #38	; 0x26
 8017a72:	18fb      	adds	r3, r7, r3
 8017a74:	781b      	ldrb	r3, [r3, #0]
 8017a76:	2b0f      	cmp	r3, #15
 8017a78:	d993      	bls.n	80179a2 <RegionEU868ApplyCFList+0x3a>
 8017a7a:	e002      	b.n	8017a82 <RegionEU868ApplyCFList+0x11a>
        return;
 8017a7c:	46c0      	nop			; (mov r8, r8)
 8017a7e:	e000      	b.n	8017a82 <RegionEU868ApplyCFList+0x11a>
        return;
 8017a80:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017a82:	46bd      	mov	sp, r7
 8017a84:	b00b      	add	sp, #44	; 0x2c
 8017a86:	bd90      	pop	{r4, r7, pc}

08017a88 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b082      	sub	sp, #8
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	791b      	ldrb	r3, [r3, #4]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d002      	beq.n	8017a9e <RegionEU868ChanMaskSet+0x16>
 8017a98:	2b01      	cmp	r3, #1
 8017a9a:	d008      	beq.n	8017aae <RegionEU868ChanMaskSet+0x26>
 8017a9c:	e00f      	b.n	8017abe <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	6819      	ldr	r1, [r3, #0]
 8017aa2:	4b0a      	ldr	r3, [pc, #40]	; (8017acc <RegionEU868ChanMaskSet+0x44>)
 8017aa4:	2201      	movs	r2, #1
 8017aa6:	0018      	movs	r0, r3
 8017aa8:	f7fe ff5c 	bl	8016964 <RegionCommonChanMaskCopy>
            break;
 8017aac:	e009      	b.n	8017ac2 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	6819      	ldr	r1, [r3, #0]
 8017ab2:	4b07      	ldr	r3, [pc, #28]	; (8017ad0 <RegionEU868ChanMaskSet+0x48>)
 8017ab4:	2201      	movs	r2, #1
 8017ab6:	0018      	movs	r0, r3
 8017ab8:	f7fe ff54 	bl	8016964 <RegionCommonChanMaskCopy>
            break;
 8017abc:	e001      	b.n	8017ac2 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 8017abe:	2300      	movs	r3, #0
 8017ac0:	e000      	b.n	8017ac4 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 8017ac2:	2301      	movs	r3, #1
}
 8017ac4:	0018      	movs	r0, r3
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	b002      	add	sp, #8
 8017aca:	bd80      	pop	{r7, pc}
 8017acc:	20001430 	.word	0x20001430
 8017ad0:	20001432 	.word	0x20001432

08017ad4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017ad4:	b5b0      	push	{r4, r5, r7, lr}
 8017ad6:	b088      	sub	sp, #32
 8017ad8:	af02      	add	r7, sp, #8
 8017ada:	60ba      	str	r2, [r7, #8]
 8017adc:	607b      	str	r3, [r7, #4]
 8017ade:	240f      	movs	r4, #15
 8017ae0:	193b      	adds	r3, r7, r4
 8017ae2:	1c02      	adds	r2, r0, #0
 8017ae4:	701a      	strb	r2, [r3, #0]
 8017ae6:	230e      	movs	r3, #14
 8017ae8:	18fb      	adds	r3, r7, r3
 8017aea:	1c0a      	adds	r2, r1, #0
 8017aec:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 8017aee:	2300      	movs	r3, #0
 8017af0:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8017af2:	193b      	adds	r3, r7, r4
 8017af4:	781b      	ldrb	r3, [r3, #0]
 8017af6:	b25a      	sxtb	r2, r3
 8017af8:	2a07      	cmp	r2, #7
 8017afa:	dd00      	ble.n	8017afe <RegionEU868ComputeRxWindowParameters+0x2a>
 8017afc:	2307      	movs	r3, #7
 8017afe:	b25a      	sxtb	r2, r3
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	785b      	ldrb	r3, [r3, #1]
 8017b08:	b25b      	sxtb	r3, r3
 8017b0a:	0018      	movs	r0, r3
 8017b0c:	f7ff fbc6 	bl	801729c <GetBandwidth>
 8017b10:	0003      	movs	r3, r0
 8017b12:	b2da      	uxtb	r2, r3
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	785b      	ldrb	r3, [r3, #1]
 8017b1c:	b25b      	sxtb	r3, r3
 8017b1e:	2b07      	cmp	r3, #7
 8017b20:	d10b      	bne.n	8017b3a <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	785b      	ldrb	r3, [r3, #1]
 8017b26:	b25b      	sxtb	r3, r3
 8017b28:	001a      	movs	r2, r3
 8017b2a:	4b18      	ldr	r3, [pc, #96]	; (8017b8c <RegionEU868ComputeRxWindowParameters+0xb8>)
 8017b2c:	5c9b      	ldrb	r3, [r3, r2]
 8017b2e:	0018      	movs	r0, r3
 8017b30:	f7ff f954 	bl	8016ddc <RegionCommonComputeSymbolTimeFsk>
 8017b34:	0003      	movs	r3, r0
 8017b36:	617b      	str	r3, [r7, #20]
 8017b38:	e011      	b.n	8017b5e <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	785b      	ldrb	r3, [r3, #1]
 8017b3e:	b25b      	sxtb	r3, r3
 8017b40:	001a      	movs	r2, r3
 8017b42:	4b12      	ldr	r3, [pc, #72]	; (8017b8c <RegionEU868ComputeRxWindowParameters+0xb8>)
 8017b44:	5c98      	ldrb	r0, [r3, r2]
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	785b      	ldrb	r3, [r3, #1]
 8017b4a:	b25b      	sxtb	r3, r3
 8017b4c:	001a      	movs	r2, r3
 8017b4e:	4b10      	ldr	r3, [pc, #64]	; (8017b90 <RegionEU868ComputeRxWindowParameters+0xbc>)
 8017b50:	0092      	lsls	r2, r2, #2
 8017b52:	58d3      	ldr	r3, [r2, r3]
 8017b54:	0019      	movs	r1, r3
 8017b56:	f7ff f929 	bl	8016dac <RegionCommonComputeSymbolTimeLoRa>
 8017b5a:	0003      	movs	r3, r0
 8017b5c:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017b5e:	4b0d      	ldr	r3, [pc, #52]	; (8017b94 <RegionEU868ComputeRxWindowParameters+0xc0>)
 8017b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017b62:	4798      	blx	r3
 8017b64:	0005      	movs	r5, r0
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	3308      	adds	r3, #8
 8017b6a:	687a      	ldr	r2, [r7, #4]
 8017b6c:	320c      	adds	r2, #12
 8017b6e:	68bc      	ldr	r4, [r7, #8]
 8017b70:	210e      	movs	r1, #14
 8017b72:	1879      	adds	r1, r7, r1
 8017b74:	7809      	ldrb	r1, [r1, #0]
 8017b76:	6978      	ldr	r0, [r7, #20]
 8017b78:	9201      	str	r2, [sp, #4]
 8017b7a:	9300      	str	r3, [sp, #0]
 8017b7c:	002b      	movs	r3, r5
 8017b7e:	0022      	movs	r2, r4
 8017b80:	f7ff f93a 	bl	8016df8 <RegionCommonComputeRxWindowParameters>
}
 8017b84:	46c0      	nop			; (mov r8, r8)
 8017b86:	46bd      	mov	sp, r7
 8017b88:	b006      	add	sp, #24
 8017b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8017b8c:	0801e4a8 	.word	0x0801e4a8
 8017b90:	0801e4b0 	.word	0x0801e4b0
 8017b94:	0801e62c 	.word	0x0801e62c

08017b98 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b9a:	b091      	sub	sp, #68	; 0x44
 8017b9c:	af0a      	add	r7, sp, #40	; 0x28
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8017ba2:	230f      	movs	r3, #15
 8017ba4:	18fb      	adds	r3, r7, r3
 8017ba6:	687a      	ldr	r2, [r7, #4]
 8017ba8:	7852      	ldrb	r2, [r2, #1]
 8017baa:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8017bac:	2316      	movs	r3, #22
 8017bae:	18fb      	adds	r3, r7, r3
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8017bb4:	230e      	movs	r3, #14
 8017bb6:	18fb      	adds	r3, r7, r3
 8017bb8:	2200      	movs	r2, #0
 8017bba:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8017bc2:	4b68      	ldr	r3, [pc, #416]	; (8017d64 <RegionEU868RxConfig+0x1cc>)
 8017bc4:	685b      	ldr	r3, [r3, #4]
 8017bc6:	4798      	blx	r3
 8017bc8:	1e03      	subs	r3, r0, #0
 8017bca:	d001      	beq.n	8017bd0 <RegionEU868RxConfig+0x38>
    {
        return false;
 8017bcc:	2300      	movs	r3, #0
 8017bce:	e0c4      	b.n	8017d5a <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	7cdb      	ldrb	r3, [r3, #19]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d122      	bne.n	8017c1e <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	0019      	movs	r1, r3
 8017bde:	4a62      	ldr	r2, [pc, #392]	; (8017d68 <RegionEU868RxConfig+0x1d0>)
 8017be0:	000b      	movs	r3, r1
 8017be2:	005b      	lsls	r3, r3, #1
 8017be4:	185b      	adds	r3, r3, r1
 8017be6:	009b      	lsls	r3, r3, #2
 8017be8:	589b      	ldr	r3, [r3, r2]
 8017bea:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	781b      	ldrb	r3, [r3, #0]
 8017bf0:	0019      	movs	r1, r3
 8017bf2:	4a5d      	ldr	r2, [pc, #372]	; (8017d68 <RegionEU868RxConfig+0x1d0>)
 8017bf4:	000b      	movs	r3, r1
 8017bf6:	005b      	lsls	r3, r3, #1
 8017bf8:	185b      	adds	r3, r3, r1
 8017bfa:	009b      	lsls	r3, r3, #2
 8017bfc:	18d3      	adds	r3, r2, r3
 8017bfe:	3304      	adds	r3, #4
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d00b      	beq.n	8017c1e <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	781b      	ldrb	r3, [r3, #0]
 8017c0a:	0019      	movs	r1, r3
 8017c0c:	4a56      	ldr	r2, [pc, #344]	; (8017d68 <RegionEU868RxConfig+0x1d0>)
 8017c0e:	000b      	movs	r3, r1
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	185b      	adds	r3, r3, r1
 8017c14:	009b      	lsls	r3, r3, #2
 8017c16:	18d3      	adds	r3, r2, r3
 8017c18:	3304      	adds	r3, #4
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8017c1e:	240f      	movs	r4, #15
 8017c20:	193b      	adds	r3, r7, r4
 8017c22:	781b      	ldrb	r3, [r3, #0]
 8017c24:	b25b      	sxtb	r3, r3
 8017c26:	4a51      	ldr	r2, [pc, #324]	; (8017d6c <RegionEU868RxConfig+0x1d4>)
 8017c28:	5cd2      	ldrb	r2, [r2, r3]
 8017c2a:	250e      	movs	r5, #14
 8017c2c:	197b      	adds	r3, r7, r5
 8017c2e:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8017c30:	4b4c      	ldr	r3, [pc, #304]	; (8017d64 <RegionEU868RxConfig+0x1cc>)
 8017c32:	68db      	ldr	r3, [r3, #12]
 8017c34:	693a      	ldr	r2, [r7, #16]
 8017c36:	0010      	movs	r0, r2
 8017c38:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8017c3a:	193b      	adds	r3, r7, r4
 8017c3c:	781b      	ldrb	r3, [r3, #0]
 8017c3e:	b25b      	sxtb	r3, r3
 8017c40:	2b07      	cmp	r3, #7
 8017c42:	d12e      	bne.n	8017ca2 <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 8017c44:	2117      	movs	r1, #23
 8017c46:	187b      	adds	r3, r7, r1
 8017c48:	2200      	movs	r2, #0
 8017c4a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8017c4c:	4b45      	ldr	r3, [pc, #276]	; (8017d64 <RegionEU868RxConfig+0x1cc>)
 8017c4e:	699c      	ldr	r4, [r3, #24]
 8017c50:	197b      	adds	r3, r7, r5
 8017c52:	2200      	movs	r2, #0
 8017c54:	569a      	ldrsb	r2, [r3, r2]
 8017c56:	0013      	movs	r3, r2
 8017c58:	015b      	lsls	r3, r3, #5
 8017c5a:	1a9b      	subs	r3, r3, r2
 8017c5c:	009b      	lsls	r3, r3, #2
 8017c5e:	189b      	adds	r3, r3, r2
 8017c60:	00db      	lsls	r3, r3, #3
 8017c62:	001e      	movs	r6, r3
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	689b      	ldr	r3, [r3, #8]
 8017c68:	b29b      	uxth	r3, r3
 8017c6a:	687a      	ldr	r2, [r7, #4]
 8017c6c:	7c92      	ldrb	r2, [r2, #18]
 8017c6e:	4d40      	ldr	r5, [pc, #256]	; (8017d70 <RegionEU868RxConfig+0x1d8>)
 8017c70:	1879      	adds	r1, r7, r1
 8017c72:	7808      	ldrb	r0, [r1, #0]
 8017c74:	9209      	str	r2, [sp, #36]	; 0x24
 8017c76:	2200      	movs	r2, #0
 8017c78:	9208      	str	r2, [sp, #32]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	9207      	str	r2, [sp, #28]
 8017c7e:	2200      	movs	r2, #0
 8017c80:	9206      	str	r2, [sp, #24]
 8017c82:	2201      	movs	r2, #1
 8017c84:	9205      	str	r2, [sp, #20]
 8017c86:	2200      	movs	r2, #0
 8017c88:	9204      	str	r2, [sp, #16]
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	9203      	str	r2, [sp, #12]
 8017c8e:	9302      	str	r3, [sp, #8]
 8017c90:	2305      	movs	r3, #5
 8017c92:	9301      	str	r3, [sp, #4]
 8017c94:	4b37      	ldr	r3, [pc, #220]	; (8017d74 <RegionEU868RxConfig+0x1dc>)
 8017c96:	9300      	str	r3, [sp, #0]
 8017c98:	2300      	movs	r3, #0
 8017c9a:	0032      	movs	r2, r6
 8017c9c:	0029      	movs	r1, r5
 8017c9e:	47a0      	blx	r4
 8017ca0:	e029      	b.n	8017cf6 <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 8017ca2:	2117      	movs	r1, #23
 8017ca4:	187b      	adds	r3, r7, r1
 8017ca6:	2201      	movs	r2, #1
 8017ca8:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8017caa:	4b2e      	ldr	r3, [pc, #184]	; (8017d64 <RegionEU868RxConfig+0x1cc>)
 8017cac:	699c      	ldr	r4, [r3, #24]
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	789b      	ldrb	r3, [r3, #2]
 8017cb2:	001e      	movs	r6, r3
 8017cb4:	230e      	movs	r3, #14
 8017cb6:	18fb      	adds	r3, r7, r3
 8017cb8:	2500      	movs	r5, #0
 8017cba:	575d      	ldrsb	r5, [r3, r5]
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	689b      	ldr	r3, [r3, #8]
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	687a      	ldr	r2, [r7, #4]
 8017cc4:	7c92      	ldrb	r2, [r2, #18]
 8017cc6:	1879      	adds	r1, r7, r1
 8017cc8:	7808      	ldrb	r0, [r1, #0]
 8017cca:	9209      	str	r2, [sp, #36]	; 0x24
 8017ccc:	2201      	movs	r2, #1
 8017cce:	9208      	str	r2, [sp, #32]
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	9207      	str	r2, [sp, #28]
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	9206      	str	r2, [sp, #24]
 8017cd8:	2200      	movs	r2, #0
 8017cda:	9205      	str	r2, [sp, #20]
 8017cdc:	2200      	movs	r2, #0
 8017cde:	9204      	str	r2, [sp, #16]
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	9203      	str	r2, [sp, #12]
 8017ce4:	9302      	str	r3, [sp, #8]
 8017ce6:	2308      	movs	r3, #8
 8017ce8:	9301      	str	r3, [sp, #4]
 8017cea:	2300      	movs	r3, #0
 8017cec:	9300      	str	r3, [sp, #0]
 8017cee:	2301      	movs	r3, #1
 8017cf0:	002a      	movs	r2, r5
 8017cf2:	0031      	movs	r1, r6
 8017cf4:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	7c5b      	ldrb	r3, [r3, #17]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d009      	beq.n	8017d12 <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8017cfe:	230f      	movs	r3, #15
 8017d00:	18fb      	adds	r3, r7, r3
 8017d02:	2200      	movs	r2, #0
 8017d04:	569a      	ldrsb	r2, [r3, r2]
 8017d06:	2316      	movs	r3, #22
 8017d08:	18fb      	adds	r3, r7, r3
 8017d0a:	491b      	ldr	r1, [pc, #108]	; (8017d78 <RegionEU868RxConfig+0x1e0>)
 8017d0c:	5c8a      	ldrb	r2, [r1, r2]
 8017d0e:	701a      	strb	r2, [r3, #0]
 8017d10:	e008      	b.n	8017d24 <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8017d12:	230f      	movs	r3, #15
 8017d14:	18fb      	adds	r3, r7, r3
 8017d16:	2200      	movs	r2, #0
 8017d18:	569a      	ldrsb	r2, [r3, r2]
 8017d1a:	2316      	movs	r3, #22
 8017d1c:	18fb      	adds	r3, r7, r3
 8017d1e:	4917      	ldr	r1, [pc, #92]	; (8017d7c <RegionEU868RxConfig+0x1e4>)
 8017d20:	5c8a      	ldrb	r2, [r1, r2]
 8017d22:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017d24:	4b0f      	ldr	r3, [pc, #60]	; (8017d64 <RegionEU868RxConfig+0x1cc>)
 8017d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d28:	2216      	movs	r2, #22
 8017d2a:	18ba      	adds	r2, r7, r2
 8017d2c:	7812      	ldrb	r2, [r2, #0]
 8017d2e:	320d      	adds	r2, #13
 8017d30:	b2d1      	uxtb	r1, r2
 8017d32:	2217      	movs	r2, #23
 8017d34:	18ba      	adds	r2, r7, r2
 8017d36:	7812      	ldrb	r2, [r2, #0]
 8017d38:	0010      	movs	r0, r2
 8017d3a:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	7cd8      	ldrb	r0, [r3, #19]
 8017d40:	240f      	movs	r4, #15
 8017d42:	193b      	adds	r3, r7, r4
 8017d44:	2200      	movs	r2, #0
 8017d46:	569a      	ldrsb	r2, [r3, r2]
 8017d48:	693b      	ldr	r3, [r7, #16]
 8017d4a:	0019      	movs	r1, r3
 8017d4c:	f7ff fa32 	bl	80171b4 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017d50:	683b      	ldr	r3, [r7, #0]
 8017d52:	193a      	adds	r2, r7, r4
 8017d54:	7812      	ldrb	r2, [r2, #0]
 8017d56:	701a      	strb	r2, [r3, #0]
    return true;
 8017d58:	2301      	movs	r3, #1
}
 8017d5a:	0018      	movs	r0, r3
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	b007      	add	sp, #28
 8017d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d62:	46c0      	nop			; (mov r8, r8)
 8017d64:	0801e62c 	.word	0x0801e62c
 8017d68:	200012f8 	.word	0x200012f8
 8017d6c:	0801e4a8 	.word	0x0801e4a8
 8017d70:	0000c350 	.word	0x0000c350
 8017d74:	00014585 	.word	0x00014585
 8017d78:	0801e4d8 	.word	0x0801e4d8
 8017d7c:	0801e4d0 	.word	0x0801e4d0

08017d80 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d82:	b093      	sub	sp, #76	; 0x4c
 8017d84:	af0a      	add	r7, sp, #40	; 0x28
 8017d86:	60f8      	str	r0, [r7, #12]
 8017d88:	60b9      	str	r1, [r7, #8]
 8017d8a:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	785b      	ldrb	r3, [r3, #1]
 8017d90:	b25b      	sxtb	r3, r3
 8017d92:	001a      	movs	r2, r3
 8017d94:	4b6b      	ldr	r3, [pc, #428]	; (8017f44 <RegionEU868TxConfig+0x1c4>)
 8017d96:	5c9a      	ldrb	r2, [r3, r2]
 8017d98:	251e      	movs	r5, #30
 8017d9a:	197b      	adds	r3, r7, r5
 8017d9c:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	2002      	movs	r0, #2
 8017da2:	5618      	ldrsb	r0, [r3, r0]
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	781b      	ldrb	r3, [r3, #0]
 8017da8:	0019      	movs	r1, r3
 8017daa:	4a67      	ldr	r2, [pc, #412]	; (8017f48 <RegionEU868TxConfig+0x1c8>)
 8017dac:	000b      	movs	r3, r1
 8017dae:	005b      	lsls	r3, r3, #1
 8017db0:	185b      	adds	r3, r3, r1
 8017db2:	009b      	lsls	r3, r3, #2
 8017db4:	18d3      	adds	r3, r2, r3
 8017db6:	3309      	adds	r3, #9
 8017db8:	781b      	ldrb	r3, [r3, #0]
 8017dba:	001c      	movs	r4, r3
 8017dbc:	4a62      	ldr	r2, [pc, #392]	; (8017f48 <RegionEU868TxConfig+0x1c8>)
 8017dbe:	21c2      	movs	r1, #194	; 0xc2
 8017dc0:	0023      	movs	r3, r4
 8017dc2:	009b      	lsls	r3, r3, #2
 8017dc4:	191b      	adds	r3, r3, r4
 8017dc6:	009b      	lsls	r3, r3, #2
 8017dc8:	18d3      	adds	r3, r2, r3
 8017dca:	185b      	adds	r3, r3, r1
 8017dcc:	2100      	movs	r1, #0
 8017dce:	5659      	ldrsb	r1, [r3, r1]
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	2201      	movs	r2, #1
 8017dd4:	569a      	ldrsb	r2, [r3, r2]
 8017dd6:	261d      	movs	r6, #29
 8017dd8:	19bc      	adds	r4, r7, r6
 8017dda:	4b5c      	ldr	r3, [pc, #368]	; (8017f4c <RegionEU868TxConfig+0x1cc>)
 8017ddc:	f7ff fa7c 	bl	80172d8 <LimitTxPower>
 8017de0:	0003      	movs	r3, r0
 8017de2:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	785b      	ldrb	r3, [r3, #1]
 8017de8:	b25b      	sxtb	r3, r3
 8017dea:	0018      	movs	r0, r3
 8017dec:	f7ff fa56 	bl	801729c <GetBandwidth>
 8017df0:	0003      	movs	r3, r0
 8017df2:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8017df4:	2017      	movs	r0, #23
 8017df6:	183b      	adds	r3, r7, r0
 8017df8:	2200      	movs	r2, #0
 8017dfa:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	6859      	ldr	r1, [r3, #4]
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	689a      	ldr	r2, [r3, #8]
 8017e04:	183c      	adds	r4, r7, r0
 8017e06:	19bb      	adds	r3, r7, r6
 8017e08:	781b      	ldrb	r3, [r3, #0]
 8017e0a:	b25b      	sxtb	r3, r3
 8017e0c:	0018      	movs	r0, r3
 8017e0e:	f7ff f841 	bl	8016e94 <RegionCommonComputeTxPower>
 8017e12:	0003      	movs	r3, r0
 8017e14:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8017e16:	4b4e      	ldr	r3, [pc, #312]	; (8017f50 <RegionEU868TxConfig+0x1d0>)
 8017e18:	68da      	ldr	r2, [r3, #12]
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	781b      	ldrb	r3, [r3, #0]
 8017e1e:	0018      	movs	r0, r3
 8017e20:	4949      	ldr	r1, [pc, #292]	; (8017f48 <RegionEU868TxConfig+0x1c8>)
 8017e22:	0003      	movs	r3, r0
 8017e24:	005b      	lsls	r3, r3, #1
 8017e26:	181b      	adds	r3, r3, r0
 8017e28:	009b      	lsls	r3, r3, #2
 8017e2a:	585b      	ldr	r3, [r3, r1]
 8017e2c:	0018      	movs	r0, r3
 8017e2e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	785b      	ldrb	r3, [r3, #1]
 8017e34:	b25b      	sxtb	r3, r3
 8017e36:	2b07      	cmp	r3, #7
 8017e38:	d12e      	bne.n	8017e98 <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017e3a:	231f      	movs	r3, #31
 8017e3c:	18fb      	adds	r3, r7, r3
 8017e3e:	2200      	movs	r2, #0
 8017e40:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8017e42:	4b43      	ldr	r3, [pc, #268]	; (8017f50 <RegionEU868TxConfig+0x1d0>)
 8017e44:	69dc      	ldr	r4, [r3, #28]
 8017e46:	197b      	adds	r3, r7, r5
 8017e48:	2200      	movs	r2, #0
 8017e4a:	569a      	ldrsb	r2, [r3, r2]
 8017e4c:	0013      	movs	r3, r2
 8017e4e:	015b      	lsls	r3, r3, #5
 8017e50:	1a9b      	subs	r3, r3, r2
 8017e52:	009b      	lsls	r3, r3, #2
 8017e54:	189b      	adds	r3, r3, r2
 8017e56:	00db      	lsls	r3, r3, #3
 8017e58:	001e      	movs	r6, r3
 8017e5a:	69ba      	ldr	r2, [r7, #24]
 8017e5c:	4d3d      	ldr	r5, [pc, #244]	; (8017f54 <RegionEU868TxConfig+0x1d4>)
 8017e5e:	2017      	movs	r0, #23
 8017e60:	183b      	adds	r3, r7, r0
 8017e62:	2100      	movs	r1, #0
 8017e64:	5659      	ldrsb	r1, [r3, r1]
 8017e66:	231f      	movs	r3, #31
 8017e68:	18fb      	adds	r3, r7, r3
 8017e6a:	7818      	ldrb	r0, [r3, #0]
 8017e6c:	23fa      	movs	r3, #250	; 0xfa
 8017e6e:	011b      	lsls	r3, r3, #4
 8017e70:	9308      	str	r3, [sp, #32]
 8017e72:	2300      	movs	r3, #0
 8017e74:	9307      	str	r3, [sp, #28]
 8017e76:	2300      	movs	r3, #0
 8017e78:	9306      	str	r3, [sp, #24]
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	9305      	str	r3, [sp, #20]
 8017e7e:	2301      	movs	r3, #1
 8017e80:	9304      	str	r3, [sp, #16]
 8017e82:	2300      	movs	r3, #0
 8017e84:	9303      	str	r3, [sp, #12]
 8017e86:	2305      	movs	r3, #5
 8017e88:	9302      	str	r3, [sp, #8]
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	9301      	str	r3, [sp, #4]
 8017e8e:	9600      	str	r6, [sp, #0]
 8017e90:	0013      	movs	r3, r2
 8017e92:	002a      	movs	r2, r5
 8017e94:	47a0      	blx	r4
 8017e96:	e025      	b.n	8017ee4 <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 8017e98:	201f      	movs	r0, #31
 8017e9a:	183b      	adds	r3, r7, r0
 8017e9c:	2201      	movs	r2, #1
 8017e9e:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017ea0:	4b2b      	ldr	r3, [pc, #172]	; (8017f50 <RegionEU868TxConfig+0x1d0>)
 8017ea2:	69dc      	ldr	r4, [r3, #28]
 8017ea4:	231e      	movs	r3, #30
 8017ea6:	18fb      	adds	r3, r7, r3
 8017ea8:	781b      	ldrb	r3, [r3, #0]
 8017eaa:	b25b      	sxtb	r3, r3
 8017eac:	69bd      	ldr	r5, [r7, #24]
 8017eae:	2217      	movs	r2, #23
 8017eb0:	18ba      	adds	r2, r7, r2
 8017eb2:	2100      	movs	r1, #0
 8017eb4:	5651      	ldrsb	r1, [r2, r1]
 8017eb6:	183a      	adds	r2, r7, r0
 8017eb8:	7810      	ldrb	r0, [r2, #0]
 8017eba:	22fa      	movs	r2, #250	; 0xfa
 8017ebc:	0112      	lsls	r2, r2, #4
 8017ebe:	9208      	str	r2, [sp, #32]
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	9207      	str	r2, [sp, #28]
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	9206      	str	r2, [sp, #24]
 8017ec8:	2200      	movs	r2, #0
 8017eca:	9205      	str	r2, [sp, #20]
 8017ecc:	2201      	movs	r2, #1
 8017ece:	9204      	str	r2, [sp, #16]
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	9203      	str	r2, [sp, #12]
 8017ed4:	2208      	movs	r2, #8
 8017ed6:	9202      	str	r2, [sp, #8]
 8017ed8:	2201      	movs	r2, #1
 8017eda:	9201      	str	r2, [sp, #4]
 8017edc:	9300      	str	r3, [sp, #0]
 8017ede:	002b      	movs	r3, r5
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	781b      	ldrb	r3, [r3, #0]
 8017ee8:	0019      	movs	r1, r3
 8017eea:	4a17      	ldr	r2, [pc, #92]	; (8017f48 <RegionEU868TxConfig+0x1c8>)
 8017eec:	000b      	movs	r3, r1
 8017eee:	005b      	lsls	r3, r3, #1
 8017ef0:	185b      	adds	r3, r3, r1
 8017ef2:	009b      	lsls	r3, r3, #2
 8017ef4:	589a      	ldr	r2, [r3, r2]
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	785b      	ldrb	r3, [r3, #1]
 8017efa:	b25b      	sxtb	r3, r3
 8017efc:	0019      	movs	r1, r3
 8017efe:	0010      	movs	r0, r2
 8017f00:	f7ff f970 	bl	80171e4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	2201      	movs	r2, #1
 8017f08:	569a      	ldrsb	r2, [r3, r2]
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	899b      	ldrh	r3, [r3, #12]
 8017f0e:	0019      	movs	r1, r3
 8017f10:	0010      	movs	r0, r2
 8017f12:	f7ff fa81 	bl	8017418 <GetTimeOnAir>
 8017f16:	0002      	movs	r2, r0
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8017f1c:	4b0c      	ldr	r3, [pc, #48]	; (8017f50 <RegionEU868TxConfig+0x1d0>)
 8017f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f20:	68fa      	ldr	r2, [r7, #12]
 8017f22:	8992      	ldrh	r2, [r2, #12]
 8017f24:	b2d1      	uxtb	r1, r2
 8017f26:	221f      	movs	r2, #31
 8017f28:	18ba      	adds	r2, r7, r2
 8017f2a:	7812      	ldrb	r2, [r2, #0]
 8017f2c:	0010      	movs	r0, r2
 8017f2e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	221d      	movs	r2, #29
 8017f34:	18ba      	adds	r2, r7, r2
 8017f36:	7812      	ldrb	r2, [r2, #0]
 8017f38:	701a      	strb	r2, [r3, #0]
    return true;
 8017f3a:	2301      	movs	r3, #1
}
 8017f3c:	0018      	movs	r0, r3
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	b009      	add	sp, #36	; 0x24
 8017f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f44:	0801e4a8 	.word	0x0801e4a8
 8017f48:	200012f8 	.word	0x200012f8
 8017f4c:	20001430 	.word	0x20001430
 8017f50:	0801e62c 	.word	0x0801e62c
 8017f54:	000061a8 	.word	0x000061a8

08017f58 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f5a:	b093      	sub	sp, #76	; 0x4c
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	60f8      	str	r0, [r7, #12]
 8017f60:	60b9      	str	r1, [r7, #8]
 8017f62:	607a      	str	r2, [r7, #4]
 8017f64:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8017f66:	2347      	movs	r3, #71	; 0x47
 8017f68:	18fb      	adds	r3, r7, r3
 8017f6a:	2207      	movs	r2, #7
 8017f6c:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017f6e:	233c      	movs	r3, #60	; 0x3c
 8017f70:	18fb      	adds	r3, r7, r3
 8017f72:	0018      	movs	r0, r3
 8017f74:	2306      	movs	r3, #6
 8017f76:	001a      	movs	r2, r3
 8017f78:	2100      	movs	r1, #0
 8017f7a:	f005 f994 	bl	801d2a6 <memset>
    uint8_t nextIndex = 0;
 8017f7e:	2344      	movs	r3, #68	; 0x44
 8017f80:	18fb      	adds	r3, r7, r3
 8017f82:	2200      	movs	r2, #0
 8017f84:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8017f86:	2346      	movs	r3, #70	; 0x46
 8017f88:	18fb      	adds	r3, r7, r3
 8017f8a:	2200      	movs	r2, #0
 8017f8c:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8017f8e:	233a      	movs	r3, #58	; 0x3a
 8017f90:	18fb      	adds	r3, r7, r3
 8017f92:	2200      	movs	r2, #0
 8017f94:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017f96:	e098      	b.n	80180ca <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	685a      	ldr	r2, [r3, #4]
 8017f9c:	2546      	movs	r5, #70	; 0x46
 8017f9e:	197b      	adds	r3, r7, r5
 8017fa0:	781b      	ldrb	r3, [r3, #0]
 8017fa2:	18d3      	adds	r3, r2, r3
 8017fa4:	2644      	movs	r6, #68	; 0x44
 8017fa6:	19bc      	adds	r4, r7, r6
 8017fa8:	203c      	movs	r0, #60	; 0x3c
 8017faa:	183a      	adds	r2, r7, r0
 8017fac:	0011      	movs	r1, r2
 8017fae:	0018      	movs	r0, r3
 8017fb0:	f7fe fe09 	bl	8016bc6 <RegionCommonParseLinkAdrReq>
 8017fb4:	0003      	movs	r3, r0
 8017fb6:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8017fb8:	0032      	movs	r2, r6
 8017fba:	18bb      	adds	r3, r7, r2
 8017fbc:	781b      	ldrb	r3, [r3, #0]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d100      	bne.n	8017fc4 <RegionEU868LinkAdrReq+0x6c>
 8017fc2:	e08b      	b.n	80180dc <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017fc4:	197b      	adds	r3, r7, r5
 8017fc6:	1979      	adds	r1, r7, r5
 8017fc8:	18ba      	adds	r2, r7, r2
 8017fca:	7809      	ldrb	r1, [r1, #0]
 8017fcc:	7812      	ldrb	r2, [r2, #0]
 8017fce:	188a      	adds	r2, r1, r2
 8017fd0:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017fd2:	2147      	movs	r1, #71	; 0x47
 8017fd4:	187b      	adds	r3, r7, r1
 8017fd6:	2207      	movs	r2, #7
 8017fd8:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8017fda:	203c      	movs	r0, #60	; 0x3c
 8017fdc:	183b      	adds	r3, r7, r0
 8017fde:	889a      	ldrh	r2, [r3, #4]
 8017fe0:	243a      	movs	r4, #58	; 0x3a
 8017fe2:	193b      	adds	r3, r7, r4
 8017fe4:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8017fe6:	183b      	adds	r3, r7, r0
 8017fe8:	78db      	ldrb	r3, [r3, #3]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d10a      	bne.n	8018004 <RegionEU868LinkAdrReq+0xac>
 8017fee:	193b      	adds	r3, r7, r4
 8017ff0:	881b      	ldrh	r3, [r3, #0]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d106      	bne.n	8018004 <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 8017ff6:	187b      	adds	r3, r7, r1
 8017ff8:	187a      	adds	r2, r7, r1
 8017ffa:	7812      	ldrb	r2, [r2, #0]
 8017ffc:	2101      	movs	r1, #1
 8017ffe:	438a      	bics	r2, r1
 8018000:	701a      	strb	r2, [r3, #0]
 8018002:	e062      	b.n	80180ca <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018004:	223c      	movs	r2, #60	; 0x3c
 8018006:	18bb      	adds	r3, r7, r2
 8018008:	78db      	ldrb	r3, [r3, #3]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d003      	beq.n	8018016 <RegionEU868LinkAdrReq+0xbe>
 801800e:	18bb      	adds	r3, r7, r2
 8018010:	78db      	ldrb	r3, [r3, #3]
 8018012:	2b05      	cmp	r3, #5
 8018014:	d904      	bls.n	8018020 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8018016:	233c      	movs	r3, #60	; 0x3c
 8018018:	18fb      	adds	r3, r7, r3
 801801a:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801801c:	2b06      	cmp	r3, #6
 801801e:	d907      	bls.n	8018030 <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018020:	2247      	movs	r2, #71	; 0x47
 8018022:	18bb      	adds	r3, r7, r2
 8018024:	18ba      	adds	r2, r7, r2
 8018026:	7812      	ldrb	r2, [r2, #0]
 8018028:	2101      	movs	r1, #1
 801802a:	438a      	bics	r2, r1
 801802c:	701a      	strb	r2, [r3, #0]
 801802e:	e04c      	b.n	80180ca <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018030:	2345      	movs	r3, #69	; 0x45
 8018032:	18fb      	adds	r3, r7, r3
 8018034:	2200      	movs	r2, #0
 8018036:	701a      	strb	r2, [r3, #0]
 8018038:	e042      	b.n	80180c0 <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801803a:	233c      	movs	r3, #60	; 0x3c
 801803c:	18fb      	adds	r3, r7, r3
 801803e:	78db      	ldrb	r3, [r3, #3]
 8018040:	2b06      	cmp	r3, #6
 8018042:	d11a      	bne.n	801807a <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8018044:	2045      	movs	r0, #69	; 0x45
 8018046:	183b      	adds	r3, r7, r0
 8018048:	781a      	ldrb	r2, [r3, #0]
 801804a:	496d      	ldr	r1, [pc, #436]	; (8018200 <RegionEU868LinkAdrReq+0x2a8>)
 801804c:	0013      	movs	r3, r2
 801804e:	005b      	lsls	r3, r3, #1
 8018050:	189b      	adds	r3, r3, r2
 8018052:	009b      	lsls	r3, r3, #2
 8018054:	585b      	ldr	r3, [r3, r1]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d02c      	beq.n	80180b4 <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 801805a:	183b      	adds	r3, r7, r0
 801805c:	781b      	ldrb	r3, [r3, #0]
 801805e:	2201      	movs	r2, #1
 8018060:	409a      	lsls	r2, r3
 8018062:	0013      	movs	r3, r2
 8018064:	b21a      	sxth	r2, r3
 8018066:	213a      	movs	r1, #58	; 0x3a
 8018068:	187b      	adds	r3, r7, r1
 801806a:	881b      	ldrh	r3, [r3, #0]
 801806c:	b21b      	sxth	r3, r3
 801806e:	4313      	orrs	r3, r2
 8018070:	b21b      	sxth	r3, r3
 8018072:	b29a      	uxth	r2, r3
 8018074:	187b      	adds	r3, r7, r1
 8018076:	801a      	strh	r2, [r3, #0]
 8018078:	e01c      	b.n	80180b4 <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801807a:	233a      	movs	r3, #58	; 0x3a
 801807c:	18fb      	adds	r3, r7, r3
 801807e:	881b      	ldrh	r3, [r3, #0]
 8018080:	001a      	movs	r2, r3
 8018082:	2145      	movs	r1, #69	; 0x45
 8018084:	187b      	adds	r3, r7, r1
 8018086:	781b      	ldrb	r3, [r3, #0]
 8018088:	411a      	asrs	r2, r3
 801808a:	0013      	movs	r3, r2
 801808c:	2201      	movs	r2, #1
 801808e:	4013      	ands	r3, r2
 8018090:	d010      	beq.n	80180b4 <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8018092:	187b      	adds	r3, r7, r1
 8018094:	781a      	ldrb	r2, [r3, #0]
 8018096:	495a      	ldr	r1, [pc, #360]	; (8018200 <RegionEU868LinkAdrReq+0x2a8>)
 8018098:	0013      	movs	r3, r2
 801809a:	005b      	lsls	r3, r3, #1
 801809c:	189b      	adds	r3, r3, r2
 801809e:	009b      	lsls	r3, r3, #2
 80180a0:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d106      	bne.n	80180b4 <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80180a6:	2247      	movs	r2, #71	; 0x47
 80180a8:	18bb      	adds	r3, r7, r2
 80180aa:	18ba      	adds	r2, r7, r2
 80180ac:	7812      	ldrb	r2, [r2, #0]
 80180ae:	2101      	movs	r1, #1
 80180b0:	438a      	bics	r2, r1
 80180b2:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80180b4:	2145      	movs	r1, #69	; 0x45
 80180b6:	187b      	adds	r3, r7, r1
 80180b8:	781a      	ldrb	r2, [r3, #0]
 80180ba:	187b      	adds	r3, r7, r1
 80180bc:	3201      	adds	r2, #1
 80180be:	701a      	strb	r2, [r3, #0]
 80180c0:	2345      	movs	r3, #69	; 0x45
 80180c2:	18fb      	adds	r3, r7, r3
 80180c4:	781b      	ldrb	r3, [r3, #0]
 80180c6:	2b0f      	cmp	r3, #15
 80180c8:	d9b7      	bls.n	801803a <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	7a1b      	ldrb	r3, [r3, #8]
 80180ce:	2246      	movs	r2, #70	; 0x46
 80180d0:	18ba      	adds	r2, r7, r2
 80180d2:	7812      	ldrb	r2, [r2, #0]
 80180d4:	429a      	cmp	r2, r3
 80180d6:	d200      	bcs.n	80180da <RegionEU868LinkAdrReq+0x182>
 80180d8:	e75e      	b.n	8017f98 <RegionEU868LinkAdrReq+0x40>
 80180da:	e000      	b.n	80180de <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 80180dc:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80180de:	2134      	movs	r1, #52	; 0x34
 80180e0:	187b      	adds	r3, r7, r1
 80180e2:	2202      	movs	r2, #2
 80180e4:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	7a5a      	ldrb	r2, [r3, #9]
 80180ea:	187b      	adds	r3, r7, r1
 80180ec:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80180ee:	187b      	adds	r3, r7, r1
 80180f0:	0018      	movs	r0, r3
 80180f2:	f7ff f9ef 	bl	80174d4 <RegionEU868GetPhyParam>
 80180f6:	0003      	movs	r3, r0
 80180f8:	001a      	movs	r2, r3
 80180fa:	2030      	movs	r0, #48	; 0x30
 80180fc:	183b      	adds	r3, r7, r0
 80180fe:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8018100:	2110      	movs	r1, #16
 8018102:	187b      	adds	r3, r7, r1
 8018104:	2447      	movs	r4, #71	; 0x47
 8018106:	193a      	adds	r2, r7, r4
 8018108:	7812      	ldrb	r2, [r2, #0]
 801810a:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	7a9a      	ldrb	r2, [r3, #10]
 8018110:	187b      	adds	r3, r7, r1
 8018112:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018114:	253c      	movs	r5, #60	; 0x3c
 8018116:	197b      	adds	r3, r7, r5
 8018118:	2201      	movs	r2, #1
 801811a:	569a      	ldrsb	r2, [r3, r2]
 801811c:	187b      	adds	r3, r7, r1
 801811e:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018120:	197b      	adds	r3, r7, r5
 8018122:	2202      	movs	r2, #2
 8018124:	569a      	ldrsb	r2, [r3, r2]
 8018126:	187b      	adds	r3, r7, r1
 8018128:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801812a:	197b      	adds	r3, r7, r5
 801812c:	781a      	ldrb	r2, [r3, #0]
 801812e:	187b      	adds	r3, r7, r1
 8018130:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	220b      	movs	r2, #11
 8018136:	569a      	ldrsb	r2, [r3, r2]
 8018138:	187b      	adds	r3, r7, r1
 801813a:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	220c      	movs	r2, #12
 8018140:	569a      	ldrsb	r2, [r3, r2]
 8018142:	187b      	adds	r3, r7, r1
 8018144:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	7b5b      	ldrb	r3, [r3, #13]
 801814a:	b25a      	sxtb	r2, r3
 801814c:	187b      	adds	r3, r7, r1
 801814e:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018150:	187b      	adds	r3, r7, r1
 8018152:	2210      	movs	r2, #16
 8018154:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8018156:	187b      	adds	r3, r7, r1
 8018158:	223a      	movs	r2, #58	; 0x3a
 801815a:	18ba      	adds	r2, r7, r2
 801815c:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801815e:	183b      	adds	r3, r7, r0
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	b25a      	sxtb	r2, r3
 8018164:	0008      	movs	r0, r1
 8018166:	183b      	adds	r3, r7, r0
 8018168:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801816a:	183b      	adds	r3, r7, r0
 801816c:	2207      	movs	r2, #7
 801816e:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8018170:	183b      	adds	r3, r7, r0
 8018172:	4a23      	ldr	r2, [pc, #140]	; (8018200 <RegionEU868LinkAdrReq+0x2a8>)
 8018174:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018176:	183b      	adds	r3, r7, r0
 8018178:	2200      	movs	r2, #0
 801817a:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801817c:	183b      	adds	r3, r7, r0
 801817e:	2200      	movs	r2, #0
 8018180:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018182:	183b      	adds	r3, r7, r0
 8018184:	68fa      	ldr	r2, [r7, #12]
 8018186:	6812      	ldr	r2, [r2, #0]
 8018188:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801818a:	0026      	movs	r6, r4
 801818c:	193c      	adds	r4, r7, r4
 801818e:	0029      	movs	r1, r5
 8018190:	187d      	adds	r5, r7, r1
 8018192:	187b      	adds	r3, r7, r1
 8018194:	1c9a      	adds	r2, r3, #2
 8018196:	187b      	adds	r3, r7, r1
 8018198:	1c59      	adds	r1, r3, #1
 801819a:	1838      	adds	r0, r7, r0
 801819c:	002b      	movs	r3, r5
 801819e:	f7fe fd67 	bl	8016c70 <RegionCommonLinkAdrReqVerifyParams>
 80181a2:	0003      	movs	r3, r0
 80181a4:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80181a6:	19bb      	adds	r3, r7, r6
 80181a8:	781b      	ldrb	r3, [r3, #0]
 80181aa:	2b07      	cmp	r3, #7
 80181ac:	d10c      	bne.n	80181c8 <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 80181ae:	4b15      	ldr	r3, [pc, #84]	; (8018204 <RegionEU868LinkAdrReq+0x2ac>)
 80181b0:	2202      	movs	r2, #2
 80181b2:	2100      	movs	r1, #0
 80181b4:	0018      	movs	r0, r3
 80181b6:	f000 fbe9 	bl	801898c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 80181ba:	223a      	movs	r2, #58	; 0x3a
 80181bc:	18bb      	adds	r3, r7, r2
 80181be:	8819      	ldrh	r1, [r3, #0]
 80181c0:	4a0f      	ldr	r2, [pc, #60]	; (8018200 <RegionEU868LinkAdrReq+0x2a8>)
 80181c2:	239c      	movs	r3, #156	; 0x9c
 80181c4:	005b      	lsls	r3, r3, #1
 80181c6:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80181c8:	213c      	movs	r1, #60	; 0x3c
 80181ca:	187b      	adds	r3, r7, r1
 80181cc:	2201      	movs	r2, #1
 80181ce:	569a      	ldrsb	r2, [r3, r2]
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80181d4:	187b      	adds	r3, r7, r1
 80181d6:	2202      	movs	r2, #2
 80181d8:	569a      	ldrsb	r2, [r3, r2]
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80181de:	187b      	adds	r3, r7, r1
 80181e0:	781a      	ldrb	r2, [r3, #0]
 80181e2:	683b      	ldr	r3, [r7, #0]
 80181e4:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80181e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80181e8:	2246      	movs	r2, #70	; 0x46
 80181ea:	18ba      	adds	r2, r7, r2
 80181ec:	7812      	ldrb	r2, [r2, #0]
 80181ee:	701a      	strb	r2, [r3, #0]

    return status;
 80181f0:	2347      	movs	r3, #71	; 0x47
 80181f2:	18fb      	adds	r3, r7, r3
 80181f4:	781b      	ldrb	r3, [r3, #0]
}
 80181f6:	0018      	movs	r0, r3
 80181f8:	46bd      	mov	sp, r7
 80181fa:	b013      	add	sp, #76	; 0x4c
 80181fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181fe:	46c0      	nop			; (mov r8, r8)
 8018200:	200012f8 	.word	0x200012f8
 8018204:	20001430 	.word	0x20001430

08018208 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018208:	b590      	push	{r4, r7, lr}
 801820a:	b085      	sub	sp, #20
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018210:	240f      	movs	r4, #15
 8018212:	193b      	adds	r3, r7, r4
 8018214:	2207      	movs	r2, #7
 8018216:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018218:	210e      	movs	r1, #14
 801821a:	187b      	adds	r3, r7, r1
 801821c:	2200      	movs	r2, #0
 801821e:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	685b      	ldr	r3, [r3, #4]
 8018224:	187a      	adds	r2, r7, r1
 8018226:	0011      	movs	r1, r2
 8018228:	0018      	movs	r0, r3
 801822a:	f7ff f87d 	bl	8017328 <VerifyRfFreq>
 801822e:	0003      	movs	r3, r0
 8018230:	001a      	movs	r2, r3
 8018232:	2301      	movs	r3, #1
 8018234:	4053      	eors	r3, r2
 8018236:	b2db      	uxtb	r3, r3
 8018238:	2b00      	cmp	r3, #0
 801823a:	d005      	beq.n	8018248 <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 801823c:	193b      	adds	r3, r7, r4
 801823e:	193a      	adds	r2, r7, r4
 8018240:	7812      	ldrb	r2, [r2, #0]
 8018242:	2101      	movs	r1, #1
 8018244:	438a      	bics	r2, r1
 8018246:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	781b      	ldrb	r3, [r3, #0]
 801824c:	b25b      	sxtb	r3, r3
 801824e:	2207      	movs	r2, #7
 8018250:	2100      	movs	r1, #0
 8018252:	0018      	movs	r0, r3
 8018254:	f7fe fadd 	bl	8016812 <RegionCommonValueInRange>
 8018258:	1e03      	subs	r3, r0, #0
 801825a:	d106      	bne.n	801826a <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 801825c:	220f      	movs	r2, #15
 801825e:	18bb      	adds	r3, r7, r2
 8018260:	18ba      	adds	r2, r7, r2
 8018262:	7812      	ldrb	r2, [r2, #0]
 8018264:	2102      	movs	r1, #2
 8018266:	438a      	bics	r2, r1
 8018268:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	785b      	ldrb	r3, [r3, #1]
 801826e:	b25b      	sxtb	r3, r3
 8018270:	2205      	movs	r2, #5
 8018272:	2100      	movs	r1, #0
 8018274:	0018      	movs	r0, r3
 8018276:	f7fe facc 	bl	8016812 <RegionCommonValueInRange>
 801827a:	1e03      	subs	r3, r0, #0
 801827c:	d106      	bne.n	801828c <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801827e:	220f      	movs	r2, #15
 8018280:	18bb      	adds	r3, r7, r2
 8018282:	18ba      	adds	r2, r7, r2
 8018284:	7812      	ldrb	r2, [r2, #0]
 8018286:	2104      	movs	r1, #4
 8018288:	438a      	bics	r2, r1
 801828a:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801828c:	230f      	movs	r3, #15
 801828e:	18fb      	adds	r3, r7, r3
 8018290:	781b      	ldrb	r3, [r3, #0]
}
 8018292:	0018      	movs	r0, r3
 8018294:	46bd      	mov	sp, r7
 8018296:	b005      	add	sp, #20
 8018298:	bd90      	pop	{r4, r7, pc}

0801829a <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801829a:	b590      	push	{r4, r7, lr}
 801829c:	b087      	sub	sp, #28
 801829e:	af00      	add	r7, sp, #0
 80182a0:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80182a2:	2417      	movs	r4, #23
 80182a4:	193b      	adds	r3, r7, r4
 80182a6:	2203      	movs	r2, #3
 80182a8:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d118      	bne.n	80182e6 <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	791b      	ldrb	r3, [r3, #4]
 80182b8:	b25b      	sxtb	r3, r3
 80182ba:	b2da      	uxtb	r2, r3
 80182bc:	2108      	movs	r1, #8
 80182be:	187b      	adds	r3, r7, r1
 80182c0:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80182c2:	187b      	adds	r3, r7, r1
 80182c4:	0018      	movs	r0, r3
 80182c6:	f000 fa35 	bl	8018734 <RegionEU868ChannelsRemove>
 80182ca:	0003      	movs	r3, r0
 80182cc:	001a      	movs	r2, r3
 80182ce:	2301      	movs	r3, #1
 80182d0:	4053      	eors	r3, r2
 80182d2:	b2db      	uxtb	r3, r3
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d041      	beq.n	801835c <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 80182d8:	193b      	adds	r3, r7, r4
 80182da:	193a      	adds	r2, r7, r4
 80182dc:	7812      	ldrb	r2, [r2, #0]
 80182de:	2103      	movs	r1, #3
 80182e0:	438a      	bics	r2, r1
 80182e2:	701a      	strb	r2, [r3, #0]
 80182e4:	e03a      	b.n	801835c <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	681a      	ldr	r2, [r3, #0]
 80182ea:	210c      	movs	r1, #12
 80182ec:	187b      	adds	r3, r7, r1
 80182ee:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	791b      	ldrb	r3, [r3, #4]
 80182f4:	b25b      	sxtb	r3, r3
 80182f6:	b2da      	uxtb	r2, r3
 80182f8:	187b      	adds	r3, r7, r1
 80182fa:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80182fc:	187b      	adds	r3, r7, r1
 80182fe:	0018      	movs	r0, r3
 8018300:	f000 f954 	bl	80185ac <RegionEU868ChannelAdd>
 8018304:	0003      	movs	r3, r0
 8018306:	2b06      	cmp	r3, #6
 8018308:	d017      	beq.n	801833a <RegionEU868NewChannelReq+0xa0>
 801830a:	dc1e      	bgt.n	801834a <RegionEU868NewChannelReq+0xb0>
 801830c:	2b05      	cmp	r3, #5
 801830e:	d00c      	beq.n	801832a <RegionEU868NewChannelReq+0x90>
 8018310:	dc1b      	bgt.n	801834a <RegionEU868NewChannelReq+0xb0>
 8018312:	2b00      	cmp	r3, #0
 8018314:	d021      	beq.n	801835a <RegionEU868NewChannelReq+0xc0>
 8018316:	2b04      	cmp	r3, #4
 8018318:	d117      	bne.n	801834a <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801831a:	2217      	movs	r2, #23
 801831c:	18bb      	adds	r3, r7, r2
 801831e:	18ba      	adds	r2, r7, r2
 8018320:	7812      	ldrb	r2, [r2, #0]
 8018322:	2101      	movs	r1, #1
 8018324:	438a      	bics	r2, r1
 8018326:	701a      	strb	r2, [r3, #0]
                break;
 8018328:	e018      	b.n	801835c <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801832a:	2217      	movs	r2, #23
 801832c:	18bb      	adds	r3, r7, r2
 801832e:	18ba      	adds	r2, r7, r2
 8018330:	7812      	ldrb	r2, [r2, #0]
 8018332:	2102      	movs	r1, #2
 8018334:	438a      	bics	r2, r1
 8018336:	701a      	strb	r2, [r3, #0]
                break;
 8018338:	e010      	b.n	801835c <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801833a:	2217      	movs	r2, #23
 801833c:	18bb      	adds	r3, r7, r2
 801833e:	18ba      	adds	r2, r7, r2
 8018340:	7812      	ldrb	r2, [r2, #0]
 8018342:	2103      	movs	r1, #3
 8018344:	438a      	bics	r2, r1
 8018346:	701a      	strb	r2, [r3, #0]
                break;
 8018348:	e008      	b.n	801835c <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 801834a:	2217      	movs	r2, #23
 801834c:	18bb      	adds	r3, r7, r2
 801834e:	18ba      	adds	r2, r7, r2
 8018350:	7812      	ldrb	r2, [r2, #0]
 8018352:	2103      	movs	r1, #3
 8018354:	438a      	bics	r2, r1
 8018356:	701a      	strb	r2, [r3, #0]
                break;
 8018358:	e000      	b.n	801835c <RegionEU868NewChannelReq+0xc2>
                break;
 801835a:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 801835c:	2317      	movs	r3, #23
 801835e:	18fb      	adds	r3, r7, r3
 8018360:	781b      	ldrb	r3, [r3, #0]
}
 8018362:	0018      	movs	r0, r3
 8018364:	46bd      	mov	sp, r7
 8018366:	b007      	add	sp, #28
 8018368:	bd90      	pop	{r4, r7, pc}

0801836a <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801836a:	b580      	push	{r7, lr}
 801836c:	b082      	sub	sp, #8
 801836e:	af00      	add	r7, sp, #0
 8018370:	6078      	str	r0, [r7, #4]
    return -1;
 8018372:	2301      	movs	r3, #1
 8018374:	425b      	negs	r3, r3
}
 8018376:	0018      	movs	r0, r3
 8018378:	46bd      	mov	sp, r7
 801837a:	b002      	add	sp, #8
 801837c:	bd80      	pop	{r7, pc}
	...

08018380 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018380:	b590      	push	{r4, r7, lr}
 8018382:	b085      	sub	sp, #20
 8018384:	af00      	add	r7, sp, #0
 8018386:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018388:	240f      	movs	r4, #15
 801838a:	193b      	adds	r3, r7, r4
 801838c:	2203      	movs	r2, #3
 801838e:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018390:	210e      	movs	r1, #14
 8018392:	187b      	adds	r3, r7, r1
 8018394:	2200      	movs	r2, #0
 8018396:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	685b      	ldr	r3, [r3, #4]
 801839c:	187a      	adds	r2, r7, r1
 801839e:	0011      	movs	r1, r2
 80183a0:	0018      	movs	r0, r3
 80183a2:	f7fe ffc1 	bl	8017328 <VerifyRfFreq>
 80183a6:	0003      	movs	r3, r0
 80183a8:	001a      	movs	r2, r3
 80183aa:	2301      	movs	r3, #1
 80183ac:	4053      	eors	r3, r2
 80183ae:	b2db      	uxtb	r3, r3
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d005      	beq.n	80183c0 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80183b4:	193b      	adds	r3, r7, r4
 80183b6:	193a      	adds	r2, r7, r4
 80183b8:	7812      	ldrb	r2, [r2, #0]
 80183ba:	2101      	movs	r1, #1
 80183bc:	438a      	bics	r2, r1
 80183be:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	781b      	ldrb	r3, [r3, #0]
 80183c4:	0019      	movs	r1, r3
 80183c6:	4a14      	ldr	r2, [pc, #80]	; (8018418 <RegionEU868DlChannelReq+0x98>)
 80183c8:	000b      	movs	r3, r1
 80183ca:	005b      	lsls	r3, r3, #1
 80183cc:	185b      	adds	r3, r3, r1
 80183ce:	009b      	lsls	r3, r3, #2
 80183d0:	589b      	ldr	r3, [r3, r2]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d106      	bne.n	80183e4 <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 80183d6:	220f      	movs	r2, #15
 80183d8:	18bb      	adds	r3, r7, r2
 80183da:	18ba      	adds	r2, r7, r2
 80183dc:	7812      	ldrb	r2, [r2, #0]
 80183de:	2102      	movs	r1, #2
 80183e0:	438a      	bics	r2, r1
 80183e2:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80183e4:	230f      	movs	r3, #15
 80183e6:	18fb      	adds	r3, r7, r3
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	2b03      	cmp	r3, #3
 80183ec:	d10c      	bne.n	8018408 <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	781b      	ldrb	r3, [r3, #0]
 80183f2:	0018      	movs	r0, r3
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	685a      	ldr	r2, [r3, #4]
 80183f8:	4907      	ldr	r1, [pc, #28]	; (8018418 <RegionEU868DlChannelReq+0x98>)
 80183fa:	0003      	movs	r3, r0
 80183fc:	005b      	lsls	r3, r3, #1
 80183fe:	181b      	adds	r3, r3, r0
 8018400:	009b      	lsls	r3, r3, #2
 8018402:	18cb      	adds	r3, r1, r3
 8018404:	3304      	adds	r3, #4
 8018406:	601a      	str	r2, [r3, #0]
    }

    return status;
 8018408:	230f      	movs	r3, #15
 801840a:	18fb      	adds	r3, r7, r3
 801840c:	781b      	ldrb	r3, [r3, #0]
}
 801840e:	0018      	movs	r0, r3
 8018410:	46bd      	mov	sp, r7
 8018412:	b005      	add	sp, #20
 8018414:	bd90      	pop	{r4, r7, pc}
 8018416:	46c0      	nop			; (mov r8, r8)
 8018418:	200012f8 	.word	0x200012f8

0801841c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b082      	sub	sp, #8
 8018420:	af00      	add	r7, sp, #0
 8018422:	0002      	movs	r2, r0
 8018424:	1dfb      	adds	r3, r7, #7
 8018426:	701a      	strb	r2, [r3, #0]
 8018428:	1dbb      	adds	r3, r7, #6
 801842a:	1c0a      	adds	r2, r1, #0
 801842c:	701a      	strb	r2, [r3, #0]
    return currentDr;
 801842e:	1dfb      	adds	r3, r7, #7
 8018430:	781b      	ldrb	r3, [r3, #0]
 8018432:	b25b      	sxtb	r3, r3
}
 8018434:	0018      	movs	r0, r3
 8018436:	46bd      	mov	sp, r7
 8018438:	b002      	add	sp, #8
 801843a:	bd80      	pop	{r7, pc}

0801843c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801843c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801843e:	b099      	sub	sp, #100	; 0x64
 8018440:	af02      	add	r7, sp, #8
 8018442:	60f8      	str	r0, [r7, #12]
 8018444:	60b9      	str	r1, [r7, #8]
 8018446:	607a      	str	r2, [r7, #4]
 8018448:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801844a:	2356      	movs	r3, #86	; 0x56
 801844c:	18fb      	adds	r3, r7, r3
 801844e:	2200      	movs	r2, #0
 8018450:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 8018452:	2355      	movs	r3, #85	; 0x55
 8018454:	18fb      	adds	r3, r7, r3
 8018456:	2200      	movs	r2, #0
 8018458:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801845a:	2344      	movs	r3, #68	; 0x44
 801845c:	18fb      	adds	r3, r7, r3
 801845e:	2200      	movs	r2, #0
 8018460:	601a      	str	r2, [r3, #0]
 8018462:	3304      	adds	r3, #4
 8018464:	220c      	movs	r2, #12
 8018466:	2100      	movs	r1, #0
 8018468:	0018      	movs	r0, r3
 801846a:	f004 ff1c 	bl	801d2a6 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801846e:	2357      	movs	r3, #87	; 0x57
 8018470:	18fb      	adds	r3, r7, r3
 8018472:	220c      	movs	r2, #12
 8018474:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8018476:	4b4a      	ldr	r3, [pc, #296]	; (80185a0 <RegionEU868NextChannel+0x164>)
 8018478:	2201      	movs	r2, #1
 801847a:	2100      	movs	r1, #0
 801847c:	0018      	movs	r0, r3
 801847e:	f7fe fa30 	bl	80168e2 <RegionCommonCountChannels>
 8018482:	1e03      	subs	r3, r0, #0
 8018484:	d10a      	bne.n	801849c <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018486:	4a47      	ldr	r2, [pc, #284]	; (80185a4 <RegionEU868NextChannel+0x168>)
 8018488:	239c      	movs	r3, #156	; 0x9c
 801848a:	005b      	lsls	r3, r3, #1
 801848c:	5ad3      	ldrh	r3, [r2, r3]
 801848e:	2207      	movs	r2, #7
 8018490:	4313      	orrs	r3, r2
 8018492:	b299      	uxth	r1, r3
 8018494:	4a43      	ldr	r2, [pc, #268]	; (80185a4 <RegionEU868NextChannel+0x168>)
 8018496:	239c      	movs	r3, #156	; 0x9c
 8018498:	005b      	lsls	r3, r3, #1
 801849a:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	7a5a      	ldrb	r2, [r3, #9]
 80184a0:	2110      	movs	r1, #16
 80184a2:	187b      	adds	r3, r7, r1
 80184a4:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	7a1b      	ldrb	r3, [r3, #8]
 80184aa:	b25b      	sxtb	r3, r3
 80184ac:	b2da      	uxtb	r2, r3
 80184ae:	187b      	adds	r3, r7, r1
 80184b0:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 80184b2:	000d      	movs	r5, r1
 80184b4:	197b      	adds	r3, r7, r5
 80184b6:	4a3a      	ldr	r2, [pc, #232]	; (80185a0 <RegionEU868NextChannel+0x164>)
 80184b8:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 80184ba:	197b      	adds	r3, r7, r5
 80184bc:	4a39      	ldr	r2, [pc, #228]	; (80185a4 <RegionEU868NextChannel+0x168>)
 80184be:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 80184c0:	197b      	adds	r3, r7, r5
 80184c2:	4a39      	ldr	r2, [pc, #228]	; (80185a8 <RegionEU868NextChannel+0x16c>)
 80184c4:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80184c6:	197b      	adds	r3, r7, r5
 80184c8:	2210      	movs	r2, #16
 80184ca:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 80184cc:	197b      	adds	r3, r7, r5
 80184ce:	2207      	movs	r2, #7
 80184d0:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	681a      	ldr	r2, [r3, #0]
 80184d6:	2424      	movs	r4, #36	; 0x24
 80184d8:	193b      	adds	r3, r7, r4
 80184da:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	685a      	ldr	r2, [r3, #4]
 80184e0:	193b      	adds	r3, r7, r4
 80184e2:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	7a9a      	ldrb	r2, [r3, #10]
 80184e8:	193b      	adds	r3, r7, r4
 80184ea:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80184ec:	193b      	adds	r3, r7, r4
 80184ee:	2206      	movs	r2, #6
 80184f0:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80184f2:	193b      	adds	r3, r7, r4
 80184f4:	68fa      	ldr	r2, [r7, #12]
 80184f6:	330c      	adds	r3, #12
 80184f8:	320c      	adds	r2, #12
 80184fa:	ca03      	ldmia	r2!, {r0, r1}
 80184fc:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	7d1a      	ldrb	r2, [r3, #20]
 8018502:	193b      	adds	r3, r7, r4
 8018504:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	2208      	movs	r2, #8
 801850a:	569a      	ldrsb	r2, [r3, r2]
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	8adb      	ldrh	r3, [r3, #22]
 8018510:	0019      	movs	r1, r3
 8018512:	0010      	movs	r0, r2
 8018514:	f7fe ff80 	bl	8017418 <GetTimeOnAir>
 8018518:	0002      	movs	r2, r0
 801851a:	0020      	movs	r0, r4
 801851c:	183b      	adds	r3, r7, r0
 801851e:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018520:	183b      	adds	r3, r7, r0
 8018522:	197a      	adds	r2, r7, r5
 8018524:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018526:	2657      	movs	r6, #87	; 0x57
 8018528:	19bc      	adds	r4, r7, r6
 801852a:	2356      	movs	r3, #86	; 0x56
 801852c:	18fd      	adds	r5, r7, r3
 801852e:	2244      	movs	r2, #68	; 0x44
 8018530:	18ba      	adds	r2, r7, r2
 8018532:	6839      	ldr	r1, [r7, #0]
 8018534:	1838      	adds	r0, r7, r0
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	9301      	str	r3, [sp, #4]
 801853a:	2355      	movs	r3, #85	; 0x55
 801853c:	18fb      	adds	r3, r7, r3
 801853e:	9300      	str	r3, [sp, #0]
 8018540:	002b      	movs	r3, r5
 8018542:	f7fe fdcf 	bl	80170e4 <RegionCommonIdentifyChannels>
 8018546:	0003      	movs	r3, r0
 8018548:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801854a:	19bb      	adds	r3, r7, r6
 801854c:	781b      	ldrb	r3, [r3, #0]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d10e      	bne.n	8018570 <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018552:	2356      	movs	r3, #86	; 0x56
 8018554:	18fb      	adds	r3, r7, r3
 8018556:	781b      	ldrb	r3, [r3, #0]
 8018558:	3b01      	subs	r3, #1
 801855a:	0019      	movs	r1, r3
 801855c:	2000      	movs	r0, #0
 801855e:	f000 f9c1 	bl	80188e4 <randr>
 8018562:	0002      	movs	r2, r0
 8018564:	2344      	movs	r3, #68	; 0x44
 8018566:	18fb      	adds	r3, r7, r3
 8018568:	5c9a      	ldrb	r2, [r3, r2]
 801856a:	68bb      	ldr	r3, [r7, #8]
 801856c:	701a      	strb	r2, [r3, #0]
 801856e:	e00f      	b.n	8018590 <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018570:	2357      	movs	r3, #87	; 0x57
 8018572:	18fb      	adds	r3, r7, r3
 8018574:	781b      	ldrb	r3, [r3, #0]
 8018576:	2b0c      	cmp	r3, #12
 8018578:	d10a      	bne.n	8018590 <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801857a:	4a0a      	ldr	r2, [pc, #40]	; (80185a4 <RegionEU868NextChannel+0x168>)
 801857c:	239c      	movs	r3, #156	; 0x9c
 801857e:	005b      	lsls	r3, r3, #1
 8018580:	5ad3      	ldrh	r3, [r2, r3]
 8018582:	2207      	movs	r2, #7
 8018584:	4313      	orrs	r3, r2
 8018586:	b299      	uxth	r1, r3
 8018588:	4a06      	ldr	r2, [pc, #24]	; (80185a4 <RegionEU868NextChannel+0x168>)
 801858a:	239c      	movs	r3, #156	; 0x9c
 801858c:	005b      	lsls	r3, r3, #1
 801858e:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 8018590:	2357      	movs	r3, #87	; 0x57
 8018592:	18fb      	adds	r3, r7, r3
 8018594:	781b      	ldrb	r3, [r3, #0]
}
 8018596:	0018      	movs	r0, r3
 8018598:	46bd      	mov	sp, r7
 801859a:	b017      	add	sp, #92	; 0x5c
 801859c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801859e:	46c0      	nop			; (mov r8, r8)
 80185a0:	20001430 	.word	0x20001430
 80185a4:	200012f8 	.word	0x200012f8
 80185a8:	200013b8 	.word	0x200013b8

080185ac <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80185ac:	b590      	push	{r4, r7, lr}
 80185ae:	b085      	sub	sp, #20
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 80185b4:	230c      	movs	r3, #12
 80185b6:	18fb      	adds	r3, r7, r3
 80185b8:	2200      	movs	r2, #0
 80185ba:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 80185bc:	230f      	movs	r3, #15
 80185be:	18fb      	adds	r3, r7, r3
 80185c0:	2200      	movs	r2, #0
 80185c2:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 80185c4:	230e      	movs	r3, #14
 80185c6:	18fb      	adds	r3, r7, r3
 80185c8:	2200      	movs	r2, #0
 80185ca:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 80185cc:	210d      	movs	r1, #13
 80185ce:	187b      	adds	r3, r7, r1
 80185d0:	687a      	ldr	r2, [r7, #4]
 80185d2:	7912      	ldrb	r2, [r2, #4]
 80185d4:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80185d6:	187b      	adds	r3, r7, r1
 80185d8:	781b      	ldrb	r3, [r3, #0]
 80185da:	2b02      	cmp	r3, #2
 80185dc:	d801      	bhi.n	80185e2 <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80185de:	2306      	movs	r3, #6
 80185e0:	e0a1      	b.n	8018726 <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80185e2:	230d      	movs	r3, #13
 80185e4:	18fb      	adds	r3, r7, r3
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	2b0f      	cmp	r3, #15
 80185ea:	d901      	bls.n	80185f0 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80185ec:	2303      	movs	r3, #3
 80185ee:	e09a      	b.n	8018726 <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	7a1b      	ldrb	r3, [r3, #8]
 80185f6:	011b      	lsls	r3, r3, #4
 80185f8:	b25b      	sxtb	r3, r3
 80185fa:	111b      	asrs	r3, r3, #4
 80185fc:	b25b      	sxtb	r3, r3
 80185fe:	2207      	movs	r2, #7
 8018600:	2100      	movs	r1, #0
 8018602:	0018      	movs	r0, r3
 8018604:	f7fe f905 	bl	8016812 <RegionCommonValueInRange>
 8018608:	1e03      	subs	r3, r0, #0
 801860a:	d103      	bne.n	8018614 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 801860c:	230f      	movs	r3, #15
 801860e:	18fb      	adds	r3, r7, r3
 8018610:	2201      	movs	r2, #1
 8018612:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	7a1b      	ldrb	r3, [r3, #8]
 801861a:	b25b      	sxtb	r3, r3
 801861c:	111b      	asrs	r3, r3, #4
 801861e:	b25b      	sxtb	r3, r3
 8018620:	2207      	movs	r2, #7
 8018622:	2100      	movs	r1, #0
 8018624:	0018      	movs	r0, r3
 8018626:	f7fe f8f4 	bl	8016812 <RegionCommonValueInRange>
 801862a:	1e03      	subs	r3, r0, #0
 801862c:	d103      	bne.n	8018636 <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 801862e:	230f      	movs	r3, #15
 8018630:	18fb      	adds	r3, r7, r3
 8018632:	2201      	movs	r2, #1
 8018634:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	7a1b      	ldrb	r3, [r3, #8]
 801863c:	011b      	lsls	r3, r3, #4
 801863e:	b25b      	sxtb	r3, r3
 8018640:	111b      	asrs	r3, r3, #4
 8018642:	b25a      	sxtb	r2, r3
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	7a1b      	ldrb	r3, [r3, #8]
 801864a:	b25b      	sxtb	r3, r3
 801864c:	111b      	asrs	r3, r3, #4
 801864e:	b25b      	sxtb	r3, r3
 8018650:	429a      	cmp	r2, r3
 8018652:	dd03      	ble.n	801865c <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8018654:	230f      	movs	r3, #15
 8018656:	18fb      	adds	r3, r7, r3
 8018658:	2201      	movs	r2, #1
 801865a:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 801865c:	240e      	movs	r4, #14
 801865e:	193b      	adds	r3, r7, r4
 8018660:	781b      	ldrb	r3, [r3, #0]
 8018662:	2201      	movs	r2, #1
 8018664:	4053      	eors	r3, r2
 8018666:	b2db      	uxtb	r3, r3
 8018668:	2b00      	cmp	r3, #0
 801866a:	d012      	beq.n	8018692 <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	220c      	movs	r2, #12
 8018674:	18ba      	adds	r2, r7, r2
 8018676:	0011      	movs	r1, r2
 8018678:	0018      	movs	r0, r3
 801867a:	f7fe fe55 	bl	8017328 <VerifyRfFreq>
 801867e:	0003      	movs	r3, r0
 8018680:	001a      	movs	r2, r3
 8018682:	2301      	movs	r3, #1
 8018684:	4053      	eors	r3, r2
 8018686:	b2db      	uxtb	r3, r3
 8018688:	2b00      	cmp	r3, #0
 801868a:	d002      	beq.n	8018692 <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 801868c:	193b      	adds	r3, r7, r4
 801868e:	2201      	movs	r2, #1
 8018690:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8018692:	230f      	movs	r3, #15
 8018694:	18fb      	adds	r3, r7, r3
 8018696:	781b      	ldrb	r3, [r3, #0]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d006      	beq.n	80186aa <RegionEU868ChannelAdd+0xfe>
 801869c:	230e      	movs	r3, #14
 801869e:	18fb      	adds	r3, r7, r3
 80186a0:	781b      	ldrb	r3, [r3, #0]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d001      	beq.n	80186aa <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80186a6:	2306      	movs	r3, #6
 80186a8:	e03d      	b.n	8018726 <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 80186aa:	230f      	movs	r3, #15
 80186ac:	18fb      	adds	r3, r7, r3
 80186ae:	781b      	ldrb	r3, [r3, #0]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d001      	beq.n	80186b8 <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80186b4:	2305      	movs	r3, #5
 80186b6:	e036      	b.n	8018726 <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 80186b8:	230e      	movs	r3, #14
 80186ba:	18fb      	adds	r3, r7, r3
 80186bc:	781b      	ldrb	r3, [r3, #0]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d001      	beq.n	80186c6 <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80186c2:	2304      	movs	r3, #4
 80186c4:	e02f      	b.n	8018726 <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80186c6:	240d      	movs	r4, #13
 80186c8:	193b      	adds	r3, r7, r4
 80186ca:	781a      	ldrb	r2, [r3, #0]
 80186cc:	0013      	movs	r3, r2
 80186ce:	005b      	lsls	r3, r3, #1
 80186d0:	189b      	adds	r3, r3, r2
 80186d2:	009b      	lsls	r3, r3, #2
 80186d4:	4a16      	ldr	r2, [pc, #88]	; (8018730 <RegionEU868ChannelAdd+0x184>)
 80186d6:	1898      	adds	r0, r3, r2
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	220c      	movs	r2, #12
 80186de:	0019      	movs	r1, r3
 80186e0:	f000 f916 	bl	8018910 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 80186e4:	193b      	adds	r3, r7, r4
 80186e6:	781a      	ldrb	r2, [r3, #0]
 80186e8:	230c      	movs	r3, #12
 80186ea:	18fb      	adds	r3, r7, r3
 80186ec:	7818      	ldrb	r0, [r3, #0]
 80186ee:	4910      	ldr	r1, [pc, #64]	; (8018730 <RegionEU868ChannelAdd+0x184>)
 80186f0:	0013      	movs	r3, r2
 80186f2:	005b      	lsls	r3, r3, #1
 80186f4:	189b      	adds	r3, r3, r2
 80186f6:	009b      	lsls	r3, r3, #2
 80186f8:	18cb      	adds	r3, r1, r3
 80186fa:	3309      	adds	r3, #9
 80186fc:	1c02      	adds	r2, r0, #0
 80186fe:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8018700:	4a0b      	ldr	r2, [pc, #44]	; (8018730 <RegionEU868ChannelAdd+0x184>)
 8018702:	239c      	movs	r3, #156	; 0x9c
 8018704:	005b      	lsls	r3, r3, #1
 8018706:	5ad3      	ldrh	r3, [r2, r3]
 8018708:	b21a      	sxth	r2, r3
 801870a:	193b      	adds	r3, r7, r4
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	2101      	movs	r1, #1
 8018710:	4099      	lsls	r1, r3
 8018712:	000b      	movs	r3, r1
 8018714:	b21b      	sxth	r3, r3
 8018716:	4313      	orrs	r3, r2
 8018718:	b21b      	sxth	r3, r3
 801871a:	b299      	uxth	r1, r3
 801871c:	4a04      	ldr	r2, [pc, #16]	; (8018730 <RegionEU868ChannelAdd+0x184>)
 801871e:	239c      	movs	r3, #156	; 0x9c
 8018720:	005b      	lsls	r3, r3, #1
 8018722:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8018724:	2300      	movs	r3, #0
}
 8018726:	0018      	movs	r0, r3
 8018728:	46bd      	mov	sp, r7
 801872a:	b005      	add	sp, #20
 801872c:	bd90      	pop	{r4, r7, pc}
 801872e:	46c0      	nop			; (mov r8, r8)
 8018730:	200012f8 	.word	0x200012f8

08018734 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8018734:	b590      	push	{r4, r7, lr}
 8018736:	b087      	sub	sp, #28
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 801873c:	2117      	movs	r1, #23
 801873e:	187b      	adds	r3, r7, r1
 8018740:	687a      	ldr	r2, [r7, #4]
 8018742:	7812      	ldrb	r2, [r2, #0]
 8018744:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018746:	187b      	adds	r3, r7, r1
 8018748:	781b      	ldrb	r3, [r3, #0]
 801874a:	2b02      	cmp	r3, #2
 801874c:	d801      	bhi.n	8018752 <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 801874e:	2300      	movs	r3, #0
 8018750:	e015      	b.n	801877e <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8018752:	2417      	movs	r4, #23
 8018754:	193b      	adds	r3, r7, r4
 8018756:	781a      	ldrb	r2, [r3, #0]
 8018758:	490b      	ldr	r1, [pc, #44]	; (8018788 <RegionEU868ChannelsRemove+0x54>)
 801875a:	0013      	movs	r3, r2
 801875c:	005b      	lsls	r3, r3, #1
 801875e:	189b      	adds	r3, r3, r2
 8018760:	009b      	lsls	r3, r3, #2
 8018762:	18cb      	adds	r3, r1, r3
 8018764:	220c      	movs	r2, #12
 8018766:	2100      	movs	r1, #0
 8018768:	0018      	movs	r0, r3
 801876a:	f004 fd9c 	bl	801d2a6 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801876e:	193b      	adds	r3, r7, r4
 8018770:	7819      	ldrb	r1, [r3, #0]
 8018772:	4b06      	ldr	r3, [pc, #24]	; (801878c <RegionEU868ChannelsRemove+0x58>)
 8018774:	2210      	movs	r2, #16
 8018776:	0018      	movs	r0, r3
 8018778:	f7fe f871 	bl	801685e <RegionCommonChanDisable>
 801877c:	0003      	movs	r3, r0
}
 801877e:	0018      	movs	r0, r3
 8018780:	46bd      	mov	sp, r7
 8018782:	b007      	add	sp, #28
 8018784:	bd90      	pop	{r4, r7, pc}
 8018786:	46c0      	nop			; (mov r8, r8)
 8018788:	200012f8 	.word	0x200012f8
 801878c:	20001430 	.word	0x20001430

08018790 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8018790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018792:	b085      	sub	sp, #20
 8018794:	af00      	add	r7, sp, #0
 8018796:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	2002      	movs	r0, #2
 801879c:	5618      	ldrsb	r0, [r3, r0]
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	0019      	movs	r1, r3
 80187a4:	4a23      	ldr	r2, [pc, #140]	; (8018834 <RegionEU868SetContinuousWave+0xa4>)
 80187a6:	000b      	movs	r3, r1
 80187a8:	005b      	lsls	r3, r3, #1
 80187aa:	185b      	adds	r3, r3, r1
 80187ac:	009b      	lsls	r3, r3, #2
 80187ae:	18d3      	adds	r3, r2, r3
 80187b0:	3309      	adds	r3, #9
 80187b2:	781b      	ldrb	r3, [r3, #0]
 80187b4:	001c      	movs	r4, r3
 80187b6:	4a1f      	ldr	r2, [pc, #124]	; (8018834 <RegionEU868SetContinuousWave+0xa4>)
 80187b8:	21c2      	movs	r1, #194	; 0xc2
 80187ba:	0023      	movs	r3, r4
 80187bc:	009b      	lsls	r3, r3, #2
 80187be:	191b      	adds	r3, r3, r4
 80187c0:	009b      	lsls	r3, r3, #2
 80187c2:	18d3      	adds	r3, r2, r3
 80187c4:	185b      	adds	r3, r3, r1
 80187c6:	2100      	movs	r1, #0
 80187c8:	5659      	ldrsb	r1, [r3, r1]
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	2201      	movs	r2, #1
 80187ce:	569a      	ldrsb	r2, [r3, r2]
 80187d0:	260f      	movs	r6, #15
 80187d2:	19bc      	adds	r4, r7, r6
 80187d4:	4b18      	ldr	r3, [pc, #96]	; (8018838 <RegionEU868SetContinuousWave+0xa8>)
 80187d6:	f7fe fd7f 	bl	80172d8 <LimitTxPower>
 80187da:	0003      	movs	r3, r0
 80187dc:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80187de:	200e      	movs	r0, #14
 80187e0:	183b      	adds	r3, r7, r0
 80187e2:	2200      	movs	r2, #0
 80187e4:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	781b      	ldrb	r3, [r3, #0]
 80187ea:	0019      	movs	r1, r3
 80187ec:	4a11      	ldr	r2, [pc, #68]	; (8018834 <RegionEU868SetContinuousWave+0xa4>)
 80187ee:	000b      	movs	r3, r1
 80187f0:	005b      	lsls	r3, r3, #1
 80187f2:	185b      	adds	r3, r3, r1
 80187f4:	009b      	lsls	r3, r3, #2
 80187f6:	589b      	ldr	r3, [r3, r2]
 80187f8:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6859      	ldr	r1, [r3, #4]
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	689a      	ldr	r2, [r3, #8]
 8018802:	0005      	movs	r5, r0
 8018804:	183c      	adds	r4, r7, r0
 8018806:	19bb      	adds	r3, r7, r6
 8018808:	781b      	ldrb	r3, [r3, #0]
 801880a:	b25b      	sxtb	r3, r3
 801880c:	0018      	movs	r0, r3
 801880e:	f7fe fb41 	bl	8016e94 <RegionCommonComputeTxPower>
 8018812:	0003      	movs	r3, r0
 8018814:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8018816:	4b09      	ldr	r3, [pc, #36]	; (801883c <RegionEU868SetContinuousWave+0xac>)
 8018818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801881a:	687a      	ldr	r2, [r7, #4]
 801881c:	8994      	ldrh	r4, [r2, #12]
 801881e:	197a      	adds	r2, r7, r5
 8018820:	2100      	movs	r1, #0
 8018822:	5651      	ldrsb	r1, [r2, r1]
 8018824:	68b8      	ldr	r0, [r7, #8]
 8018826:	0022      	movs	r2, r4
 8018828:	4798      	blx	r3
}
 801882a:	46c0      	nop			; (mov r8, r8)
 801882c:	46bd      	mov	sp, r7
 801882e:	b005      	add	sp, #20
 8018830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018832:	46c0      	nop			; (mov r8, r8)
 8018834:	200012f8 	.word	0x200012f8
 8018838:	20001430 	.word	0x20001430
 801883c:	0801e62c 	.word	0x0801e62c

08018840 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018840:	b590      	push	{r4, r7, lr}
 8018842:	b085      	sub	sp, #20
 8018844:	af00      	add	r7, sp, #0
 8018846:	0004      	movs	r4, r0
 8018848:	0008      	movs	r0, r1
 801884a:	0011      	movs	r1, r2
 801884c:	1dfb      	adds	r3, r7, #7
 801884e:	1c22      	adds	r2, r4, #0
 8018850:	701a      	strb	r2, [r3, #0]
 8018852:	1dbb      	adds	r3, r7, #6
 8018854:	1c02      	adds	r2, r0, #0
 8018856:	701a      	strb	r2, [r3, #0]
 8018858:	1d7b      	adds	r3, r7, #5
 801885a:	1c0a      	adds	r2, r1, #0
 801885c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 801885e:	1dbb      	adds	r3, r7, #6
 8018860:	781a      	ldrb	r2, [r3, #0]
 8018862:	1d7b      	adds	r3, r7, #5
 8018864:	781b      	ldrb	r3, [r3, #0]
 8018866:	1ad3      	subs	r3, r2, r3
 8018868:	b2da      	uxtb	r2, r3
 801886a:	210f      	movs	r1, #15
 801886c:	187b      	adds	r3, r7, r1
 801886e:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8018870:	000a      	movs	r2, r1
 8018872:	18bb      	adds	r3, r7, r2
 8018874:	781b      	ldrb	r3, [r3, #0]
 8018876:	2b7f      	cmp	r3, #127	; 0x7f
 8018878:	d902      	bls.n	8018880 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 801887a:	18bb      	adds	r3, r7, r2
 801887c:	2200      	movs	r2, #0
 801887e:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8018880:	230f      	movs	r3, #15
 8018882:	18fb      	adds	r3, r7, r3
 8018884:	781b      	ldrb	r3, [r3, #0]
}
 8018886:	0018      	movs	r0, r3
 8018888:	46bd      	mov	sp, r7
 801888a:	b005      	add	sp, #20
 801888c:	bd90      	pop	{r4, r7, pc}
	...

08018890 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018890:	b580      	push	{r7, lr}
 8018892:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018894:	4b08      	ldr	r3, [pc, #32]	; (80188b8 <rand1+0x28>)
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	4a08      	ldr	r2, [pc, #32]	; (80188bc <rand1+0x2c>)
 801889a:	4353      	muls	r3, r2
 801889c:	4a08      	ldr	r2, [pc, #32]	; (80188c0 <rand1+0x30>)
 801889e:	189a      	adds	r2, r3, r2
 80188a0:	4b05      	ldr	r3, [pc, #20]	; (80188b8 <rand1+0x28>)
 80188a2:	601a      	str	r2, [r3, #0]
 80188a4:	4b04      	ldr	r3, [pc, #16]	; (80188b8 <rand1+0x28>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	4906      	ldr	r1, [pc, #24]	; (80188c4 <rand1+0x34>)
 80188aa:	0018      	movs	r0, r3
 80188ac:	f7e7 fcba 	bl	8000224 <__aeabi_uidivmod>
 80188b0:	000b      	movs	r3, r1
}
 80188b2:	0018      	movs	r0, r3
 80188b4:	46bd      	mov	sp, r7
 80188b6:	bd80      	pop	{r7, pc}
 80188b8:	200001ac 	.word	0x200001ac
 80188bc:	41c64e6d 	.word	0x41c64e6d
 80188c0:	00003039 	.word	0x00003039
 80188c4:	7fffffff 	.word	0x7fffffff

080188c8 <srand1>:

void srand1( uint32_t seed )
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b082      	sub	sp, #8
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	6078      	str	r0, [r7, #4]
    next = seed;
 80188d0:	4b03      	ldr	r3, [pc, #12]	; (80188e0 <srand1+0x18>)
 80188d2:	687a      	ldr	r2, [r7, #4]
 80188d4:	601a      	str	r2, [r3, #0]
}
 80188d6:	46c0      	nop			; (mov r8, r8)
 80188d8:	46bd      	mov	sp, r7
 80188da:	b002      	add	sp, #8
 80188dc:	bd80      	pop	{r7, pc}
 80188de:	46c0      	nop			; (mov r8, r8)
 80188e0:	200001ac 	.word	0x200001ac

080188e4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b082      	sub	sp, #8
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
 80188ec:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80188ee:	f7ff ffcf 	bl	8018890 <rand1>
 80188f2:	683a      	ldr	r2, [r7, #0]
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	1ad3      	subs	r3, r2, r3
 80188f8:	3301      	adds	r3, #1
 80188fa:	0019      	movs	r1, r3
 80188fc:	f7e7 fd7c 	bl	80003f8 <__aeabi_idivmod>
 8018900:	000b      	movs	r3, r1
 8018902:	001a      	movs	r2, r3
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	18d3      	adds	r3, r2, r3
}
 8018908:	0018      	movs	r0, r3
 801890a:	46bd      	mov	sp, r7
 801890c:	b002      	add	sp, #8
 801890e:	bd80      	pop	{r7, pc}

08018910 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b084      	sub	sp, #16
 8018914:	af00      	add	r7, sp, #0
 8018916:	60f8      	str	r0, [r7, #12]
 8018918:	60b9      	str	r1, [r7, #8]
 801891a:	1dbb      	adds	r3, r7, #6
 801891c:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801891e:	e007      	b.n	8018930 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018920:	68ba      	ldr	r2, [r7, #8]
 8018922:	1c53      	adds	r3, r2, #1
 8018924:	60bb      	str	r3, [r7, #8]
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	1c59      	adds	r1, r3, #1
 801892a:	60f9      	str	r1, [r7, #12]
 801892c:	7812      	ldrb	r2, [r2, #0]
 801892e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018930:	1dbb      	adds	r3, r7, #6
 8018932:	881b      	ldrh	r3, [r3, #0]
 8018934:	1dba      	adds	r2, r7, #6
 8018936:	1e59      	subs	r1, r3, #1
 8018938:	8011      	strh	r1, [r2, #0]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d1f0      	bne.n	8018920 <memcpy1+0x10>
    }
}
 801893e:	46c0      	nop			; (mov r8, r8)
 8018940:	46c0      	nop			; (mov r8, r8)
 8018942:	46bd      	mov	sp, r7
 8018944:	b004      	add	sp, #16
 8018946:	bd80      	pop	{r7, pc}

08018948 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018948:	b580      	push	{r7, lr}
 801894a:	b084      	sub	sp, #16
 801894c:	af00      	add	r7, sp, #0
 801894e:	60f8      	str	r0, [r7, #12]
 8018950:	60b9      	str	r1, [r7, #8]
 8018952:	1dbb      	adds	r3, r7, #6
 8018954:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 8018956:	1dbb      	adds	r3, r7, #6
 8018958:	881b      	ldrh	r3, [r3, #0]
 801895a:	3b01      	subs	r3, #1
 801895c:	68fa      	ldr	r2, [r7, #12]
 801895e:	18d3      	adds	r3, r2, r3
 8018960:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018962:	e007      	b.n	8018974 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8018964:	68ba      	ldr	r2, [r7, #8]
 8018966:	1c53      	adds	r3, r2, #1
 8018968:	60bb      	str	r3, [r7, #8]
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	1e59      	subs	r1, r3, #1
 801896e:	60f9      	str	r1, [r7, #12]
 8018970:	7812      	ldrb	r2, [r2, #0]
 8018972:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018974:	1dbb      	adds	r3, r7, #6
 8018976:	881b      	ldrh	r3, [r3, #0]
 8018978:	1dba      	adds	r2, r7, #6
 801897a:	1e59      	subs	r1, r3, #1
 801897c:	8011      	strh	r1, [r2, #0]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d1f0      	bne.n	8018964 <memcpyr+0x1c>
    }
}
 8018982:	46c0      	nop			; (mov r8, r8)
 8018984:	46c0      	nop			; (mov r8, r8)
 8018986:	46bd      	mov	sp, r7
 8018988:	b004      	add	sp, #16
 801898a:	bd80      	pop	{r7, pc}

0801898c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b082      	sub	sp, #8
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
 8018994:	0008      	movs	r0, r1
 8018996:	0011      	movs	r1, r2
 8018998:	1cfb      	adds	r3, r7, #3
 801899a:	1c02      	adds	r2, r0, #0
 801899c:	701a      	strb	r2, [r3, #0]
 801899e:	003b      	movs	r3, r7
 80189a0:	1c0a      	adds	r2, r1, #0
 80189a2:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80189a4:	e005      	b.n	80189b2 <memset1+0x26>
    {
        *dst++ = value;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	1c5a      	adds	r2, r3, #1
 80189aa:	607a      	str	r2, [r7, #4]
 80189ac:	1cfa      	adds	r2, r7, #3
 80189ae:	7812      	ldrb	r2, [r2, #0]
 80189b0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80189b2:	003b      	movs	r3, r7
 80189b4:	881b      	ldrh	r3, [r3, #0]
 80189b6:	003a      	movs	r2, r7
 80189b8:	1e59      	subs	r1, r3, #1
 80189ba:	8011      	strh	r1, [r2, #0]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d1f2      	bne.n	80189a6 <memset1+0x1a>
    }
}
 80189c0:	46c0      	nop			; (mov r8, r8)
 80189c2:	46c0      	nop			; (mov r8, r8)
 80189c4:	46bd      	mov	sp, r7
 80189c6:	b002      	add	sp, #8
 80189c8:	bd80      	pop	{r7, pc}
	...

080189cc <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 80189cc:	b590      	push	{r4, r7, lr}
 80189ce:	b087      	sub	sp, #28
 80189d0:	af02      	add	r7, sp, #8
 80189d2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80189d4:	4b34      	ldr	r3, [pc, #208]	; (8018aa8 <SX1276Init+0xdc>)
 80189d6:	687a      	ldr	r2, [r7, #4]
 80189d8:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80189da:	4b34      	ldr	r3, [pc, #208]	; (8018aac <SX1276Init+0xe0>)
 80189dc:	2201      	movs	r2, #1
 80189de:	4251      	negs	r1, r2
 80189e0:	4833      	ldr	r0, [pc, #204]	; (8018ab0 <SX1276Init+0xe4>)
 80189e2:	2200      	movs	r2, #0
 80189e4:	9200      	str	r2, [sp, #0]
 80189e6:	2200      	movs	r2, #0
 80189e8:	f003 fa5a 	bl	801bea0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80189ec:	4b2f      	ldr	r3, [pc, #188]	; (8018aac <SX1276Init+0xe0>)
 80189ee:	2201      	movs	r2, #1
 80189f0:	4251      	negs	r1, r2
 80189f2:	4830      	ldr	r0, [pc, #192]	; (8018ab4 <SX1276Init+0xe8>)
 80189f4:	2200      	movs	r2, #0
 80189f6:	9200      	str	r2, [sp, #0]
 80189f8:	2200      	movs	r2, #0
 80189fa:	f003 fa51 	bl	801bea0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80189fe:	4b2b      	ldr	r3, [pc, #172]	; (8018aac <SX1276Init+0xe0>)
 8018a00:	2201      	movs	r2, #1
 8018a02:	4251      	negs	r1, r2
 8018a04:	482c      	ldr	r0, [pc, #176]	; (8018ab8 <SX1276Init+0xec>)
 8018a06:	2200      	movs	r2, #0
 8018a08:	9200      	str	r2, [sp, #0]
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	f003 fa48 	bl	801bea0 <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 8018a10:	2001      	movs	r0, #1
 8018a12:	f7ec fc8d 	bl	8005330 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 8018a16:	f001 fbbb 	bl	801a190 <SX1276Reset>

    RxChainCalibration( );
 8018a1a:	f000 f937 	bl	8018c8c <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8018a1e:	2000      	movs	r0, #0
 8018a20:	f001 fbbd 	bl	801a19e <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 8018a24:	4b25      	ldr	r3, [pc, #148]	; (8018abc <SX1276Init+0xf0>)
 8018a26:	0018      	movs	r0, r3
 8018a28:	f7ec fde2 	bl	80055f0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8018a2c:	230f      	movs	r3, #15
 8018a2e:	18fb      	adds	r3, r7, r3
 8018a30:	2200      	movs	r2, #0
 8018a32:	701a      	strb	r2, [r3, #0]
 8018a34:	e025      	b.n	8018a82 <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8018a36:	240f      	movs	r4, #15
 8018a38:	193b      	adds	r3, r7, r4
 8018a3a:	781a      	ldrb	r2, [r3, #0]
 8018a3c:	4920      	ldr	r1, [pc, #128]	; (8018ac0 <SX1276Init+0xf4>)
 8018a3e:	0013      	movs	r3, r2
 8018a40:	005b      	lsls	r3, r3, #1
 8018a42:	189b      	adds	r3, r3, r2
 8018a44:	5c5b      	ldrb	r3, [r3, r1]
 8018a46:	0018      	movs	r0, r3
 8018a48:	f001 fc16 	bl	801a278 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8018a4c:	193b      	adds	r3, r7, r4
 8018a4e:	781a      	ldrb	r2, [r3, #0]
 8018a50:	491b      	ldr	r1, [pc, #108]	; (8018ac0 <SX1276Init+0xf4>)
 8018a52:	0013      	movs	r3, r2
 8018a54:	005b      	lsls	r3, r3, #1
 8018a56:	189b      	adds	r3, r3, r2
 8018a58:	18cb      	adds	r3, r1, r3
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	781b      	ldrb	r3, [r3, #0]
 8018a5e:	0018      	movs	r0, r3
 8018a60:	193b      	adds	r3, r7, r4
 8018a62:	781a      	ldrb	r2, [r3, #0]
 8018a64:	4916      	ldr	r1, [pc, #88]	; (8018ac0 <SX1276Init+0xf4>)
 8018a66:	0013      	movs	r3, r2
 8018a68:	005b      	lsls	r3, r3, #1
 8018a6a:	189b      	adds	r3, r3, r2
 8018a6c:	18cb      	adds	r3, r1, r3
 8018a6e:	3302      	adds	r3, #2
 8018a70:	781b      	ldrb	r3, [r3, #0]
 8018a72:	0019      	movs	r1, r3
 8018a74:	f001 fc5a 	bl	801a32c <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8018a78:	193b      	adds	r3, r7, r4
 8018a7a:	781a      	ldrb	r2, [r3, #0]
 8018a7c:	193b      	adds	r3, r7, r4
 8018a7e:	3201      	adds	r2, #1
 8018a80:	701a      	strb	r2, [r3, #0]
 8018a82:	230f      	movs	r3, #15
 8018a84:	18fb      	adds	r3, r7, r3
 8018a86:	781b      	ldrb	r3, [r3, #0]
 8018a88:	2b0f      	cmp	r3, #15
 8018a8a:	d9d4      	bls.n	8018a36 <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 8018a8c:	2000      	movs	r0, #0
 8018a8e:	f001 fbf3 	bl	801a278 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8018a92:	4b0c      	ldr	r3, [pc, #48]	; (8018ac4 <SX1276Init+0xf8>)
 8018a94:	2200      	movs	r2, #0
 8018a96:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8018a98:	f7ec fc44 	bl	8005324 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8018a9c:	0003      	movs	r3, r0
 8018a9e:	3302      	adds	r3, #2
}
 8018aa0:	0018      	movs	r0, r3
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	b005      	add	sp, #20
 8018aa6:	bd90      	pop	{r4, r7, pc}
 8018aa8:	20001434 	.word	0x20001434
 8018aac:	0801a7a5 	.word	0x0801a7a5
 8018ab0:	200015a0 	.word	0x200015a0
 8018ab4:	200015b8 	.word	0x200015b8
 8018ab8:	200015d0 	.word	0x200015d0
 8018abc:	200001b0 	.word	0x200001b0
 8018ac0:	0801e698 	.word	0x0801e698
 8018ac4:	20001538 	.word	0x20001538

08018ac8 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8018acc:	4b02      	ldr	r3, [pc, #8]	; (8018ad8 <SX1276GetStatus+0x10>)
 8018ace:	791b      	ldrb	r3, [r3, #4]
}
 8018ad0:	0018      	movs	r0, r3
 8018ad2:	46bd      	mov	sp, r7
 8018ad4:	bd80      	pop	{r7, pc}
 8018ad6:	46c0      	nop			; (mov r8, r8)
 8018ad8:	20001538 	.word	0x20001538

08018adc <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8018adc:	b590      	push	{r4, r7, lr}
 8018ade:	b087      	sub	sp, #28
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8018ae4:	4b1d      	ldr	r3, [pc, #116]	; (8018b5c <SX1276SetChannel+0x80>)
 8018ae6:	687a      	ldr	r2, [r7, #4]
 8018ae8:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	491c      	ldr	r1, [pc, #112]	; (8018b60 <SX1276SetChannel+0x84>)
 8018aee:	0018      	movs	r0, r3
 8018af0:	f7e7 fb12 	bl	8000118 <__udivsi3>
 8018af4:	0003      	movs	r3, r0
 8018af6:	617b      	str	r3, [r7, #20]
 8018af8:	6979      	ldr	r1, [r7, #20]
 8018afa:	000b      	movs	r3, r1
 8018afc:	015b      	lsls	r3, r3, #5
 8018afe:	1a5b      	subs	r3, r3, r1
 8018b00:	019a      	lsls	r2, r3, #6
 8018b02:	1ad2      	subs	r2, r2, r3
 8018b04:	00d2      	lsls	r2, r2, #3
 8018b06:	1853      	adds	r3, r2, r1
 8018b08:	687a      	ldr	r2, [r7, #4]
 8018b0a:	1ad3      	subs	r3, r2, r3
 8018b0c:	613b      	str	r3, [r7, #16]
 8018b0e:	697b      	ldr	r3, [r7, #20]
 8018b10:	021c      	lsls	r4, r3, #8
 8018b12:	693b      	ldr	r3, [r7, #16]
 8018b14:	021b      	lsls	r3, r3, #8
 8018b16:	4a13      	ldr	r2, [pc, #76]	; (8018b64 <SX1276SetChannel+0x88>)
 8018b18:	4694      	mov	ip, r2
 8018b1a:	4463      	add	r3, ip
 8018b1c:	4910      	ldr	r1, [pc, #64]	; (8018b60 <SX1276SetChannel+0x84>)
 8018b1e:	0018      	movs	r0, r3
 8018b20:	f7e7 fafa 	bl	8000118 <__udivsi3>
 8018b24:	0003      	movs	r3, r0
 8018b26:	18e3      	adds	r3, r4, r3
 8018b28:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	0c1b      	lsrs	r3, r3, #16
 8018b2e:	b2db      	uxtb	r3, r3
 8018b30:	0019      	movs	r1, r3
 8018b32:	2006      	movs	r0, #6
 8018b34:	f001 fbfa 	bl	801a32c <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	0a1b      	lsrs	r3, r3, #8
 8018b3c:	b2db      	uxtb	r3, r3
 8018b3e:	0019      	movs	r1, r3
 8018b40:	2007      	movs	r0, #7
 8018b42:	f001 fbf3 	bl	801a32c <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	b2db      	uxtb	r3, r3
 8018b4a:	0019      	movs	r1, r3
 8018b4c:	2008      	movs	r0, #8
 8018b4e:	f001 fbed 	bl	801a32c <SX1276Write>
}
 8018b52:	46c0      	nop			; (mov r8, r8)
 8018b54:	46bd      	mov	sp, r7
 8018b56:	b007      	add	sp, #28
 8018b58:	bd90      	pop	{r4, r7, pc}
 8018b5a:	46c0      	nop			; (mov r8, r8)
 8018b5c:	20001538 	.word	0x20001538
 8018b60:	00003d09 	.word	0x00003d09
 8018b64:	00001e84 	.word	0x00001e84

08018b68 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8018b68:	b5b0      	push	{r4, r5, r7, lr}
 8018b6a:	b086      	sub	sp, #24
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	60f8      	str	r0, [r7, #12]
 8018b70:	60b9      	str	r1, [r7, #8]
 8018b72:	603b      	str	r3, [r7, #0]
 8018b74:	1dbb      	adds	r3, r7, #6
 8018b76:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8018b78:	2317      	movs	r3, #23
 8018b7a:	18fb      	adds	r3, r7, r3
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8018b80:	2314      	movs	r3, #20
 8018b82:	18fb      	adds	r3, r7, r3
 8018b84:	2200      	movs	r2, #0
 8018b86:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8018b88:	2300      	movs	r3, #0
 8018b8a:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 8018b8c:	f000 ffd6 	bl	8019b3c <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 8018b90:	2000      	movs	r0, #0
 8018b92:	f001 fb71 	bl	801a278 <SX1276SetModem>

    SX1276SetChannel( freq );
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	0018      	movs	r0, r3
 8018b9a:	f7ff ff9f 	bl	8018adc <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8018b9e:	68bb      	ldr	r3, [r7, #8]
 8018ba0:	0018      	movs	r0, r3
 8018ba2:	f001 fcd1 	bl	801a548 <GetFskBandwidthRegValue>
 8018ba6:	0003      	movs	r3, r0
 8018ba8:	0019      	movs	r1, r3
 8018baa:	2012      	movs	r0, #18
 8018bac:	f001 fbbe 	bl	801a32c <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8018bb0:	68bb      	ldr	r3, [r7, #8]
 8018bb2:	0018      	movs	r0, r3
 8018bb4:	f001 fcc8 	bl	801a548 <GetFskBandwidthRegValue>
 8018bb8:	0003      	movs	r3, r0
 8018bba:	0019      	movs	r1, r3
 8018bbc:	2013      	movs	r0, #19
 8018bbe:	f001 fbb5 	bl	801a32c <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8018bc2:	2005      	movs	r0, #5
 8018bc4:	f001 faeb 	bl	801a19e <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 8018bc8:	2001      	movs	r0, #1
 8018bca:	f7eb fd82 	bl	80046d2 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018bce:	f003 fb47 	bl	801c260 <UTIL_TIMER_GetCurrentTime>
 8018bd2:	0003      	movs	r3, r0
 8018bd4:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018bd6:	e013      	b.n	8018c00 <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 8018bd8:	2514      	movs	r5, #20
 8018bda:	197c      	adds	r4, r7, r5
 8018bdc:	2000      	movs	r0, #0
 8018bde:	f001 fa8b 	bl	801a0f8 <SX1276ReadRssi>
 8018be2:	0003      	movs	r3, r0
 8018be4:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8018be6:	197a      	adds	r2, r7, r5
 8018be8:	1dbb      	adds	r3, r7, #6
 8018bea:	2100      	movs	r1, #0
 8018bec:	5e52      	ldrsh	r2, [r2, r1]
 8018bee:	2100      	movs	r1, #0
 8018bf0:	5e5b      	ldrsh	r3, [r3, r1]
 8018bf2:	429a      	cmp	r2, r3
 8018bf4:	dd04      	ble.n	8018c00 <SX1276IsChannelFree+0x98>
        {
            status = false;
 8018bf6:	2317      	movs	r3, #23
 8018bf8:	18fb      	adds	r3, r7, r3
 8018bfa:	2200      	movs	r2, #0
 8018bfc:	701a      	strb	r2, [r3, #0]
            break;
 8018bfe:	e007      	b.n	8018c10 <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8018c00:	693b      	ldr	r3, [r7, #16]
 8018c02:	0018      	movs	r0, r3
 8018c04:	f003 fb40 	bl	801c288 <UTIL_TIMER_GetElapsedTime>
 8018c08:	0002      	movs	r2, r0
 8018c0a:	683b      	ldr	r3, [r7, #0]
 8018c0c:	4293      	cmp	r3, r2
 8018c0e:	d8e3      	bhi.n	8018bd8 <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 8018c10:	f000 ff94 	bl	8019b3c <SX1276SetSleep>
    return status;
 8018c14:	2317      	movs	r3, #23
 8018c16:	18fb      	adds	r3, r7, r3
 8018c18:	781b      	ldrb	r3, [r3, #0]
}
 8018c1a:	0018      	movs	r0, r3
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	b006      	add	sp, #24
 8018c20:	bdb0      	pop	{r4, r5, r7, pc}

08018c22 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8018c22:	b580      	push	{r7, lr}
 8018c24:	b082      	sub	sp, #8
 8018c26:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8018c2c:	2001      	movs	r0, #1
 8018c2e:	f001 fb23 	bl	801a278 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8018c32:	21ff      	movs	r1, #255	; 0xff
 8018c34:	2011      	movs	r0, #17
 8018c36:	f001 fb79 	bl	801a32c <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8018c3a:	2005      	movs	r0, #5
 8018c3c:	f001 faaf 	bl	801a19e <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8018c40:	1dfb      	adds	r3, r7, #7
 8018c42:	2200      	movs	r2, #0
 8018c44:	701a      	strb	r2, [r3, #0]
 8018c46:	e015      	b.n	8018c74 <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 8018c48:	2001      	movs	r0, #1
 8018c4a:	f7eb fd42 	bl	80046d2 <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8018c4e:	202c      	movs	r0, #44	; 0x2c
 8018c50:	f001 fb7d 	bl	801a34e <SX1276Read>
 8018c54:	0003      	movs	r3, r0
 8018c56:	001a      	movs	r2, r3
 8018c58:	2301      	movs	r3, #1
 8018c5a:	401a      	ands	r2, r3
 8018c5c:	1dfb      	adds	r3, r7, #7
 8018c5e:	781b      	ldrb	r3, [r3, #0]
 8018c60:	409a      	lsls	r2, r3
 8018c62:	0013      	movs	r3, r2
 8018c64:	683a      	ldr	r2, [r7, #0]
 8018c66:	4313      	orrs	r3, r2
 8018c68:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8018c6a:	1dfb      	adds	r3, r7, #7
 8018c6c:	781a      	ldrb	r2, [r3, #0]
 8018c6e:	1dfb      	adds	r3, r7, #7
 8018c70:	3201      	adds	r2, #1
 8018c72:	701a      	strb	r2, [r3, #0]
 8018c74:	1dfb      	adds	r3, r7, #7
 8018c76:	781b      	ldrb	r3, [r3, #0]
 8018c78:	2b1f      	cmp	r3, #31
 8018c7a:	d9e5      	bls.n	8018c48 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8018c7c:	f000 ff5e 	bl	8019b3c <SX1276SetSleep>

    return rnd;
 8018c80:	683b      	ldr	r3, [r7, #0]
}
 8018c82:	0018      	movs	r0, r3
 8018c84:	46bd      	mov	sp, r7
 8018c86:	b002      	add	sp, #8
 8018c88:	bd80      	pop	{r7, pc}
	...

08018c8c <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8018c8c:	b590      	push	{r4, r7, lr}
 8018c8e:	b087      	sub	sp, #28
 8018c90:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8018c92:	2317      	movs	r3, #23
 8018c94:	18fc      	adds	r4, r7, r3
 8018c96:	2009      	movs	r0, #9
 8018c98:	f001 fb59 	bl	801a34e <SX1276Read>
 8018c9c:	0003      	movs	r3, r0
 8018c9e:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8018ca0:	2006      	movs	r0, #6
 8018ca2:	f001 fb54 	bl	801a34e <SX1276Read>
 8018ca6:	0003      	movs	r3, r0
 8018ca8:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8018caa:	2007      	movs	r0, #7
 8018cac:	f001 fb4f 	bl	801a34e <SX1276Read>
 8018cb0:	0003      	movs	r3, r0
 8018cb2:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8018cb4:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8018cb6:	2008      	movs	r0, #8
 8018cb8:	f001 fb49 	bl	801a34e <SX1276Read>
 8018cbc:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8018cbe:	4323      	orrs	r3, r4
 8018cc0:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8018cc2:	693b      	ldr	r3, [r7, #16]
 8018cc4:	0a1b      	lsrs	r3, r3, #8
 8018cc6:	60fb      	str	r3, [r7, #12]
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	021b      	lsls	r3, r3, #8
 8018ccc:	693a      	ldr	r2, [r7, #16]
 8018cce:	1ad3      	subs	r3, r2, r3
 8018cd0:	60bb      	str	r3, [r7, #8]
 8018cd2:	68f9      	ldr	r1, [r7, #12]
 8018cd4:	000b      	movs	r3, r1
 8018cd6:	015b      	lsls	r3, r3, #5
 8018cd8:	1a5b      	subs	r3, r3, r1
 8018cda:	019a      	lsls	r2, r3, #6
 8018cdc:	1ad2      	subs	r2, r2, r3
 8018cde:	00d2      	lsls	r2, r2, #3
 8018ce0:	1850      	adds	r0, r2, r1
 8018ce2:	68b9      	ldr	r1, [r7, #8]
 8018ce4:	000b      	movs	r3, r1
 8018ce6:	015b      	lsls	r3, r3, #5
 8018ce8:	1a5b      	subs	r3, r3, r1
 8018cea:	019a      	lsls	r2, r3, #6
 8018cec:	1ad2      	subs	r2, r2, r3
 8018cee:	00d2      	lsls	r2, r2, #3
 8018cf0:	1853      	adds	r3, r2, r1
 8018cf2:	3380      	adds	r3, #128	; 0x80
 8018cf4:	0a1b      	lsrs	r3, r3, #8
 8018cf6:	18c3      	adds	r3, r0, r3
 8018cf8:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8018cfa:	2100      	movs	r1, #0
 8018cfc:	2009      	movs	r0, #9
 8018cfe:	f001 fb15 	bl	801a32c <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8018d02:	203b      	movs	r0, #59	; 0x3b
 8018d04:	f001 fb23 	bl	801a34e <SX1276Read>
 8018d08:	0003      	movs	r3, r0
 8018d0a:	001a      	movs	r2, r3
 8018d0c:	2340      	movs	r3, #64	; 0x40
 8018d0e:	4313      	orrs	r3, r2
 8018d10:	b2db      	uxtb	r3, r3
 8018d12:	0019      	movs	r1, r3
 8018d14:	203b      	movs	r0, #59	; 0x3b
 8018d16:	f001 fb09 	bl	801a32c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8018d1a:	46c0      	nop			; (mov r8, r8)
 8018d1c:	203b      	movs	r0, #59	; 0x3b
 8018d1e:	f001 fb16 	bl	801a34e <SX1276Read>
 8018d22:	0003      	movs	r3, r0
 8018d24:	001a      	movs	r2, r3
 8018d26:	2320      	movs	r3, #32
 8018d28:	4013      	ands	r3, r2
 8018d2a:	2b20      	cmp	r3, #32
 8018d2c:	d0f6      	beq.n	8018d1c <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8018d2e:	4b14      	ldr	r3, [pc, #80]	; (8018d80 <RxChainCalibration+0xf4>)
 8018d30:	0018      	movs	r0, r3
 8018d32:	f7ff fed3 	bl	8018adc <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8018d36:	203b      	movs	r0, #59	; 0x3b
 8018d38:	f001 fb09 	bl	801a34e <SX1276Read>
 8018d3c:	0003      	movs	r3, r0
 8018d3e:	001a      	movs	r2, r3
 8018d40:	2340      	movs	r3, #64	; 0x40
 8018d42:	4313      	orrs	r3, r2
 8018d44:	b2db      	uxtb	r3, r3
 8018d46:	0019      	movs	r1, r3
 8018d48:	203b      	movs	r0, #59	; 0x3b
 8018d4a:	f001 faef 	bl	801a32c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8018d4e:	46c0      	nop			; (mov r8, r8)
 8018d50:	203b      	movs	r0, #59	; 0x3b
 8018d52:	f001 fafc 	bl	801a34e <SX1276Read>
 8018d56:	0003      	movs	r3, r0
 8018d58:	001a      	movs	r2, r3
 8018d5a:	2320      	movs	r3, #32
 8018d5c:	4013      	ands	r3, r2
 8018d5e:	2b20      	cmp	r3, #32
 8018d60:	d0f6      	beq.n	8018d50 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8018d62:	2317      	movs	r3, #23
 8018d64:	18fb      	adds	r3, r7, r3
 8018d66:	781b      	ldrb	r3, [r3, #0]
 8018d68:	0019      	movs	r1, r3
 8018d6a:	2009      	movs	r0, #9
 8018d6c:	f001 fade 	bl	801a32c <SX1276Write>
    SX1276SetChannel( initialFreq );
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	0018      	movs	r0, r3
 8018d74:	f7ff feb2 	bl	8018adc <SX1276SetChannel>
}
 8018d78:	46c0      	nop			; (mov r8, r8)
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	b007      	add	sp, #28
 8018d7e:	bd90      	pop	{r4, r7, pc}
 8018d80:	33bca100 	.word	0x33bca100

08018d84 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8018d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d86:	b085      	sub	sp, #20
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	60b9      	str	r1, [r7, #8]
 8018d8c:	607a      	str	r2, [r7, #4]
 8018d8e:	0019      	movs	r1, r3
 8018d90:	240f      	movs	r4, #15
 8018d92:	193b      	adds	r3, r7, r4
 8018d94:	1c02      	adds	r2, r0, #0
 8018d96:	701a      	strb	r2, [r3, #0]
 8018d98:	230e      	movs	r3, #14
 8018d9a:	18fb      	adds	r3, r7, r3
 8018d9c:	1c0a      	adds	r2, r1, #0
 8018d9e:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8018da0:	193b      	adds	r3, r7, r4
 8018da2:	781b      	ldrb	r3, [r3, #0]
 8018da4:	0018      	movs	r0, r3
 8018da6:	f001 fa67 	bl	801a278 <SX1276SetModem>

    switch( modem )
 8018daa:	193b      	adds	r3, r7, r4
 8018dac:	781b      	ldrb	r3, [r3, #0]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d003      	beq.n	8018dba <SX1276SetRxConfig+0x36>
 8018db2:	2b01      	cmp	r3, #1
 8018db4:	d100      	bne.n	8018db8 <SX1276SetRxConfig+0x34>
 8018db6:	e0ef      	b.n	8018f98 <SX1276SetRxConfig+0x214>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8018db8:	e250      	b.n	801925c <SX1276SetRxConfig+0x4d8>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8018dba:	4bb0      	ldr	r3, [pc, #704]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018dbc:	68ba      	ldr	r2, [r7, #8]
 8018dbe:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8018dc0:	4bae      	ldr	r3, [pc, #696]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018dc2:	687a      	ldr	r2, [r7, #4]
 8018dc4:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8018dc6:	4bad      	ldr	r3, [pc, #692]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018dca:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8018dcc:	4bab      	ldr	r3, [pc, #684]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018dce:	222c      	movs	r2, #44	; 0x2c
 8018dd0:	2508      	movs	r5, #8
 8018dd2:	1952      	adds	r2, r2, r5
 8018dd4:	19d2      	adds	r2, r2, r7
 8018dd6:	2122      	movs	r1, #34	; 0x22
 8018dd8:	7812      	ldrb	r2, [r2, #0]
 8018dda:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8018ddc:	4ba7      	ldr	r3, [pc, #668]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018dde:	2130      	movs	r1, #48	; 0x30
 8018de0:	194a      	adds	r2, r1, r5
 8018de2:	19d2      	adds	r2, r2, r7
 8018de4:	2123      	movs	r1, #35	; 0x23
 8018de6:	7812      	ldrb	r2, [r2, #0]
 8018de8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8018dea:	4ba4      	ldr	r3, [pc, #656]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018dec:	2034      	movs	r0, #52	; 0x34
 8018dee:	1942      	adds	r2, r0, r5
 8018df0:	19d2      	adds	r2, r2, r7
 8018df2:	2124      	movs	r1, #36	; 0x24
 8018df4:	7812      	ldrb	r2, [r2, #0]
 8018df6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8018df8:	4ba0      	ldr	r3, [pc, #640]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018dfa:	2220      	movs	r2, #32
 8018dfc:	2020      	movs	r0, #32
 8018dfe:	1814      	adds	r4, r2, r0
 8018e00:	197a      	adds	r2, r7, r5
 8018e02:	18a2      	adds	r2, r4, r2
 8018e04:	2125      	movs	r1, #37	; 0x25
 8018e06:	7812      	ldrb	r2, [r2, #0]
 8018e08:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8018e0a:	4b9c      	ldr	r3, [pc, #624]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018e0c:	2224      	movs	r2, #36	; 0x24
 8018e0e:	1810      	adds	r0, r2, r0
 8018e10:	002c      	movs	r4, r5
 8018e12:	193a      	adds	r2, r7, r4
 8018e14:	1882      	adds	r2, r0, r2
 8018e16:	2126      	movs	r1, #38	; 0x26
 8018e18:	7812      	ldrb	r2, [r2, #0]
 8018e1a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8018e1c:	4b97      	ldr	r3, [pc, #604]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018e1e:	2624      	movs	r6, #36	; 0x24
 8018e20:	1932      	adds	r2, r6, r4
 8018e22:	19d2      	adds	r2, r2, r7
 8018e24:	8812      	ldrh	r2, [r2, #0]
 8018e26:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8018e28:	2328      	movs	r3, #40	; 0x28
 8018e2a:	191b      	adds	r3, r3, r4
 8018e2c:	19db      	adds	r3, r3, r7
 8018e2e:	881b      	ldrh	r3, [r3, #0]
 8018e30:	0018      	movs	r0, r3
 8018e32:	f7e9 fc01 	bl	8002638 <__aeabi_i2d>
 8018e36:	0004      	movs	r4, r0
 8018e38:	000d      	movs	r5, r1
 8018e3a:	6878      	ldr	r0, [r7, #4]
 8018e3c:	f7e9 fc2c 	bl	8002698 <__aeabi_ui2d>
 8018e40:	0002      	movs	r2, r0
 8018e42:	000b      	movs	r3, r1
 8018e44:	2000      	movs	r0, #0
 8018e46:	498e      	ldr	r1, [pc, #568]	; (8019080 <SX1276SetRxConfig+0x2fc>)
 8018e48:	f7e8 f9c0 	bl	80011cc <__aeabi_ddiv>
 8018e4c:	0002      	movs	r2, r0
 8018e4e:	000b      	movs	r3, r1
 8018e50:	0010      	movs	r0, r2
 8018e52:	0019      	movs	r1, r3
 8018e54:	2200      	movs	r2, #0
 8018e56:	4b8b      	ldr	r3, [pc, #556]	; (8019084 <SX1276SetRxConfig+0x300>)
 8018e58:	f7e8 fdba 	bl	80019d0 <__aeabi_dmul>
 8018e5c:	0002      	movs	r2, r0
 8018e5e:	000b      	movs	r3, r1
 8018e60:	0020      	movs	r0, r4
 8018e62:	0029      	movs	r1, r5
 8018e64:	f7e8 fdb4 	bl	80019d0 <__aeabi_dmul>
 8018e68:	0002      	movs	r2, r0
 8018e6a:	000b      	movs	r3, r1
 8018e6c:	0010      	movs	r0, r2
 8018e6e:	0019      	movs	r1, r3
 8018e70:	2200      	movs	r2, #0
 8018e72:	4b85      	ldr	r3, [pc, #532]	; (8019088 <SX1276SetRxConfig+0x304>)
 8018e74:	f7e8 fdac 	bl	80019d0 <__aeabi_dmul>
 8018e78:	0002      	movs	r2, r0
 8018e7a:	000b      	movs	r3, r1
 8018e7c:	0010      	movs	r0, r2
 8018e7e:	0019      	movs	r1, r3
 8018e80:	f7e7 fb70 	bl	8000564 <__aeabi_d2uiz>
 8018e84:	0002      	movs	r2, r0
 8018e86:	4b7d      	ldr	r3, [pc, #500]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018e88:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f7e9 fc04 	bl	8002698 <__aeabi_ui2d>
 8018e90:	0002      	movs	r2, r0
 8018e92:	000b      	movs	r3, r1
 8018e94:	2000      	movs	r0, #0
 8018e96:	497d      	ldr	r1, [pc, #500]	; (801908c <SX1276SetRxConfig+0x308>)
 8018e98:	f7e8 f998 	bl	80011cc <__aeabi_ddiv>
 8018e9c:	0002      	movs	r2, r0
 8018e9e:	000b      	movs	r3, r1
 8018ea0:	0010      	movs	r0, r2
 8018ea2:	0019      	movs	r1, r3
 8018ea4:	f7e7 fb5e 	bl	8000564 <__aeabi_d2uiz>
 8018ea8:	0003      	movs	r3, r0
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	0a1b      	lsrs	r3, r3, #8
 8018eb2:	b2db      	uxtb	r3, r3
 8018eb4:	0019      	movs	r1, r3
 8018eb6:	2002      	movs	r0, #2
 8018eb8:	f001 fa38 	bl	801a32c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	b2db      	uxtb	r3, r3
 8018ec0:	0019      	movs	r1, r3
 8018ec2:	2003      	movs	r0, #3
 8018ec4:	f001 fa32 	bl	801a32c <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8018ec8:	68bb      	ldr	r3, [r7, #8]
 8018eca:	0018      	movs	r0, r3
 8018ecc:	f001 fb3c 	bl	801a548 <GetFskBandwidthRegValue>
 8018ed0:	0003      	movs	r3, r0
 8018ed2:	0019      	movs	r1, r3
 8018ed4:	2012      	movs	r0, #18
 8018ed6:	f001 fa29 	bl	801a32c <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8018eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018edc:	0018      	movs	r0, r3
 8018ede:	f001 fb33 	bl	801a548 <GetFskBandwidthRegValue>
 8018ee2:	0003      	movs	r3, r0
 8018ee4:	0019      	movs	r1, r3
 8018ee6:	2013      	movs	r0, #19
 8018ee8:	f001 fa20 	bl	801a32c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8018eec:	2408      	movs	r4, #8
 8018eee:	1933      	adds	r3, r6, r4
 8018ef0:	19db      	adds	r3, r3, r7
 8018ef2:	881b      	ldrh	r3, [r3, #0]
 8018ef4:	0a1b      	lsrs	r3, r3, #8
 8018ef6:	b29b      	uxth	r3, r3
 8018ef8:	b2db      	uxtb	r3, r3
 8018efa:	0019      	movs	r1, r3
 8018efc:	2025      	movs	r0, #37	; 0x25
 8018efe:	f001 fa15 	bl	801a32c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8018f02:	1933      	adds	r3, r6, r4
 8018f04:	19db      	adds	r3, r3, r7
 8018f06:	881b      	ldrh	r3, [r3, #0]
 8018f08:	b2db      	uxtb	r3, r3
 8018f0a:	0019      	movs	r1, r3
 8018f0c:	2026      	movs	r0, #38	; 0x26
 8018f0e:	f001 fa0d 	bl	801a32c <SX1276Write>
            if( fixLen == 1 )
 8018f12:	222c      	movs	r2, #44	; 0x2c
 8018f14:	1913      	adds	r3, r2, r4
 8018f16:	19db      	adds	r3, r3, r7
 8018f18:	781b      	ldrb	r3, [r3, #0]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d008      	beq.n	8018f30 <SX1276SetRxConfig+0x1ac>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8018f1e:	2130      	movs	r1, #48	; 0x30
 8018f20:	190b      	adds	r3, r1, r4
 8018f22:	19db      	adds	r3, r3, r7
 8018f24:	781b      	ldrb	r3, [r3, #0]
 8018f26:	0019      	movs	r1, r3
 8018f28:	2032      	movs	r0, #50	; 0x32
 8018f2a:	f001 f9ff 	bl	801a32c <SX1276Write>
 8018f2e:	e003      	b.n	8018f38 <SX1276SetRxConfig+0x1b4>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8018f30:	21ff      	movs	r1, #255	; 0xff
 8018f32:	2032      	movs	r0, #50	; 0x32
 8018f34:	f001 f9fa 	bl	801a32c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8018f38:	2030      	movs	r0, #48	; 0x30
 8018f3a:	f001 fa08 	bl	801a34e <SX1276Read>
 8018f3e:	0003      	movs	r3, r0
 8018f40:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8018f42:	226f      	movs	r2, #111	; 0x6f
 8018f44:	4013      	ands	r3, r2
 8018f46:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8018f48:	232c      	movs	r3, #44	; 0x2c
 8018f4a:	2108      	movs	r1, #8
 8018f4c:	185b      	adds	r3, r3, r1
 8018f4e:	19db      	adds	r3, r3, r7
 8018f50:	781b      	ldrb	r3, [r3, #0]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d001      	beq.n	8018f5a <SX1276SetRxConfig+0x1d6>
 8018f56:	2300      	movs	r3, #0
 8018f58:	e001      	b.n	8018f5e <SX1276SetRxConfig+0x1da>
 8018f5a:	2380      	movs	r3, #128	; 0x80
 8018f5c:	425b      	negs	r3, r3
 8018f5e:	4313      	orrs	r3, r2
 8018f60:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8018f62:	2334      	movs	r3, #52	; 0x34
 8018f64:	2108      	movs	r1, #8
 8018f66:	185b      	adds	r3, r3, r1
 8018f68:	19db      	adds	r3, r3, r7
 8018f6a:	781b      	ldrb	r3, [r3, #0]
 8018f6c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8018f6e:	b25b      	sxtb	r3, r3
 8018f70:	4313      	orrs	r3, r2
 8018f72:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8018f74:	b2db      	uxtb	r3, r3
 8018f76:	0019      	movs	r1, r3
 8018f78:	2030      	movs	r0, #48	; 0x30
 8018f7a:	f001 f9d7 	bl	801a32c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8018f7e:	2031      	movs	r0, #49	; 0x31
 8018f80:	f001 f9e5 	bl	801a34e <SX1276Read>
 8018f84:	0003      	movs	r3, r0
 8018f86:	001a      	movs	r2, r3
 8018f88:	2340      	movs	r3, #64	; 0x40
 8018f8a:	4313      	orrs	r3, r2
 8018f8c:	b2db      	uxtb	r3, r3
 8018f8e:	0019      	movs	r1, r3
 8018f90:	2031      	movs	r0, #49	; 0x31
 8018f92:	f001 f9cb 	bl	801a32c <SX1276Write>
        break;
 8018f96:	e161      	b.n	801925c <SX1276SetRxConfig+0x4d8>
            if( bandwidth > 2 )
 8018f98:	68bb      	ldr	r3, [r7, #8]
 8018f9a:	2b02      	cmp	r3, #2
 8018f9c:	d900      	bls.n	8018fa0 <SX1276SetRxConfig+0x21c>
                while( 1 );
 8018f9e:	e7fe      	b.n	8018f9e <SX1276SetRxConfig+0x21a>
            bandwidth += 7;
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	3307      	adds	r3, #7
 8018fa4:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8018fa6:	4b35      	ldr	r3, [pc, #212]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018fa8:	68ba      	ldr	r2, [r7, #8]
 8018faa:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8018fac:	4b33      	ldr	r3, [pc, #204]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018fae:	687a      	ldr	r2, [r7, #4]
 8018fb0:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8018fb2:	4b32      	ldr	r3, [pc, #200]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018fb4:	220e      	movs	r2, #14
 8018fb6:	18ba      	adds	r2, r7, r2
 8018fb8:	214d      	movs	r1, #77	; 0x4d
 8018fba:	7812      	ldrb	r2, [r2, #0]
 8018fbc:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8018fbe:	4b2f      	ldr	r3, [pc, #188]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018fc0:	2224      	movs	r2, #36	; 0x24
 8018fc2:	2008      	movs	r0, #8
 8018fc4:	1812      	adds	r2, r2, r0
 8018fc6:	19d2      	adds	r2, r2, r7
 8018fc8:	214e      	movs	r1, #78	; 0x4e
 8018fca:	8812      	ldrh	r2, [r2, #0]
 8018fcc:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8018fce:	4b2b      	ldr	r3, [pc, #172]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018fd0:	222c      	movs	r2, #44	; 0x2c
 8018fd2:	1812      	adds	r2, r2, r0
 8018fd4:	19d2      	adds	r2, r2, r7
 8018fd6:	2150      	movs	r1, #80	; 0x50
 8018fd8:	7812      	ldrb	r2, [r2, #0]
 8018fda:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8018fdc:	4b27      	ldr	r3, [pc, #156]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018fde:	2230      	movs	r2, #48	; 0x30
 8018fe0:	1812      	adds	r2, r2, r0
 8018fe2:	19d2      	adds	r2, r2, r7
 8018fe4:	2151      	movs	r1, #81	; 0x51
 8018fe6:	7812      	ldrb	r2, [r2, #0]
 8018fe8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8018fea:	4b24      	ldr	r3, [pc, #144]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018fec:	2234      	movs	r2, #52	; 0x34
 8018fee:	1812      	adds	r2, r2, r0
 8018ff0:	19d2      	adds	r2, r2, r7
 8018ff2:	2152      	movs	r1, #82	; 0x52
 8018ff4:	7812      	ldrb	r2, [r2, #0]
 8018ff6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8018ff8:	4b20      	ldr	r3, [pc, #128]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8018ffa:	2238      	movs	r2, #56	; 0x38
 8018ffc:	1812      	adds	r2, r2, r0
 8018ffe:	19d2      	adds	r2, r2, r7
 8019000:	2153      	movs	r1, #83	; 0x53
 8019002:	7812      	ldrb	r2, [r2, #0]
 8019004:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019006:	4b1d      	ldr	r3, [pc, #116]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8019008:	223c      	movs	r2, #60	; 0x3c
 801900a:	1812      	adds	r2, r2, r0
 801900c:	19d2      	adds	r2, r2, r7
 801900e:	2154      	movs	r1, #84	; 0x54
 8019010:	7812      	ldrb	r2, [r2, #0]
 8019012:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019014:	4b19      	ldr	r3, [pc, #100]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8019016:	2220      	movs	r2, #32
 8019018:	2020      	movs	r0, #32
 801901a:	1812      	adds	r2, r2, r0
 801901c:	2108      	movs	r1, #8
 801901e:	468c      	mov	ip, r1
 8019020:	44bc      	add	ip, r7
 8019022:	4462      	add	r2, ip
 8019024:	2155      	movs	r1, #85	; 0x55
 8019026:	7812      	ldrb	r2, [r2, #0]
 8019028:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 801902a:	4b14      	ldr	r3, [pc, #80]	; (801907c <SX1276SetRxConfig+0x2f8>)
 801902c:	2224      	movs	r2, #36	; 0x24
 801902e:	1812      	adds	r2, r2, r0
 8019030:	2108      	movs	r1, #8
 8019032:	468c      	mov	ip, r1
 8019034:	44bc      	add	ip, r7
 8019036:	4462      	add	r2, ip
 8019038:	2156      	movs	r1, #86	; 0x56
 801903a:	7812      	ldrb	r2, [r2, #0]
 801903c:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	2b0c      	cmp	r3, #12
 8019042:	d902      	bls.n	801904a <SX1276SetRxConfig+0x2c6>
                datarate = 12;
 8019044:	230c      	movs	r3, #12
 8019046:	607b      	str	r3, [r7, #4]
 8019048:	e004      	b.n	8019054 <SX1276SetRxConfig+0x2d0>
            else if( datarate < 6 )
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	2b05      	cmp	r3, #5
 801904e:	d801      	bhi.n	8019054 <SX1276SetRxConfig+0x2d0>
                datarate = 6;
 8019050:	2306      	movs	r3, #6
 8019052:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019054:	68bb      	ldr	r3, [r7, #8]
 8019056:	2b07      	cmp	r3, #7
 8019058:	d105      	bne.n	8019066 <SX1276SetRxConfig+0x2e2>
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	2b0b      	cmp	r3, #11
 801905e:	d008      	beq.n	8019072 <SX1276SetRxConfig+0x2ee>
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	2b0c      	cmp	r3, #12
 8019064:	d005      	beq.n	8019072 <SX1276SetRxConfig+0x2ee>
 8019066:	68bb      	ldr	r3, [r7, #8]
 8019068:	2b08      	cmp	r3, #8
 801906a:	d111      	bne.n	8019090 <SX1276SetRxConfig+0x30c>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2b0c      	cmp	r3, #12
 8019070:	d10e      	bne.n	8019090 <SX1276SetRxConfig+0x30c>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019072:	4b02      	ldr	r3, [pc, #8]	; (801907c <SX1276SetRxConfig+0x2f8>)
 8019074:	224c      	movs	r2, #76	; 0x4c
 8019076:	2101      	movs	r1, #1
 8019078:	5499      	strb	r1, [r3, r2]
 801907a:	e00d      	b.n	8019098 <SX1276SetRxConfig+0x314>
 801907c:	20001538 	.word	0x20001538
 8019080:	3ff00000 	.word	0x3ff00000
 8019084:	40200000 	.word	0x40200000
 8019088:	408f4000 	.word	0x408f4000
 801908c:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019090:	4b74      	ldr	r3, [pc, #464]	; (8019264 <SX1276SetRxConfig+0x4e0>)
 8019092:	224c      	movs	r2, #76	; 0x4c
 8019094:	2100      	movs	r1, #0
 8019096:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019098:	201d      	movs	r0, #29
 801909a:	f001 f958 	bl	801a34e <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801909e:	68bb      	ldr	r3, [r7, #8]
 80190a0:	b2db      	uxtb	r3, r3
 80190a2:	011b      	lsls	r3, r3, #4
 80190a4:	b2da      	uxtb	r2, r3
 80190a6:	230e      	movs	r3, #14
 80190a8:	18fb      	adds	r3, r7, r3
 80190aa:	781b      	ldrb	r3, [r3, #0]
 80190ac:	18db      	adds	r3, r3, r3
 80190ae:	b2db      	uxtb	r3, r3
 80190b0:	4313      	orrs	r3, r2
 80190b2:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80190b4:	242c      	movs	r4, #44	; 0x2c
 80190b6:	2608      	movs	r6, #8
 80190b8:	19a3      	adds	r3, r4, r6
 80190ba:	19db      	adds	r3, r3, r7
 80190bc:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80190be:	4313      	orrs	r3, r2
 80190c0:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80190c2:	0019      	movs	r1, r3
 80190c4:	201d      	movs	r0, #29
 80190c6:	f001 f931 	bl	801a32c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80190ca:	201e      	movs	r0, #30
 80190cc:	f001 f93f 	bl	801a34e <SX1276Read>
 80190d0:	0003      	movs	r3, r0
 80190d2:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 80190d4:	2308      	movs	r3, #8
 80190d6:	4013      	ands	r3, r2
 80190d8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	b2db      	uxtb	r3, r3
 80190de:	011b      	lsls	r3, r3, #4
 80190e0:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 80190e2:	4313      	orrs	r3, r2
 80190e4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 80190e6:	2334      	movs	r3, #52	; 0x34
 80190e8:	199b      	adds	r3, r3, r6
 80190ea:	19db      	adds	r3, r3, r7
 80190ec:	781b      	ldrb	r3, [r3, #0]
 80190ee:	009b      	lsls	r3, r3, #2
 80190f0:	b2db      	uxtb	r3, r3
 80190f2:	4313      	orrs	r3, r2
 80190f4:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 80190f6:	2528      	movs	r5, #40	; 0x28
 80190f8:	19ab      	adds	r3, r5, r6
 80190fa:	19db      	adds	r3, r3, r7
 80190fc:	881b      	ldrh	r3, [r3, #0]
 80190fe:	0a1b      	lsrs	r3, r3, #8
 8019100:	b29b      	uxth	r3, r3
 8019102:	b2db      	uxtb	r3, r3
 8019104:	2103      	movs	r1, #3
 8019106:	400b      	ands	r3, r1
 8019108:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801910a:	4313      	orrs	r3, r2
 801910c:	b2db      	uxtb	r3, r3
 801910e:	0019      	movs	r1, r3
 8019110:	201e      	movs	r0, #30
 8019112:	f001 f90b 	bl	801a32c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019116:	2026      	movs	r0, #38	; 0x26
 8019118:	f001 f919 	bl	801a34e <SX1276Read>
 801911c:	0003      	movs	r3, r0
 801911e:	b25b      	sxtb	r3, r3
 8019120:	2208      	movs	r2, #8
 8019122:	4393      	bics	r3, r2
 8019124:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019126:	4b4f      	ldr	r3, [pc, #316]	; (8019264 <SX1276SetRxConfig+0x4e0>)
 8019128:	214c      	movs	r1, #76	; 0x4c
 801912a:	5c5b      	ldrb	r3, [r3, r1]
 801912c:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801912e:	b25b      	sxtb	r3, r3
 8019130:	4313      	orrs	r3, r2
 8019132:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019134:	b2db      	uxtb	r3, r3
 8019136:	0019      	movs	r1, r3
 8019138:	2026      	movs	r0, #38	; 0x26
 801913a:	f001 f8f7 	bl	801a32c <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 801913e:	19ab      	adds	r3, r5, r6
 8019140:	19db      	adds	r3, r3, r7
 8019142:	881b      	ldrh	r3, [r3, #0]
 8019144:	b2db      	uxtb	r3, r3
 8019146:	0019      	movs	r1, r3
 8019148:	201f      	movs	r0, #31
 801914a:	f001 f8ef 	bl	801a32c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 801914e:	2524      	movs	r5, #36	; 0x24
 8019150:	19ab      	adds	r3, r5, r6
 8019152:	19db      	adds	r3, r3, r7
 8019154:	881b      	ldrh	r3, [r3, #0]
 8019156:	0a1b      	lsrs	r3, r3, #8
 8019158:	b29b      	uxth	r3, r3
 801915a:	b2db      	uxtb	r3, r3
 801915c:	0019      	movs	r1, r3
 801915e:	2020      	movs	r0, #32
 8019160:	f001 f8e4 	bl	801a32c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019164:	19ab      	adds	r3, r5, r6
 8019166:	19db      	adds	r3, r3, r7
 8019168:	881b      	ldrh	r3, [r3, #0]
 801916a:	b2db      	uxtb	r3, r3
 801916c:	0019      	movs	r1, r3
 801916e:	2021      	movs	r0, #33	; 0x21
 8019170:	f001 f8dc 	bl	801a32c <SX1276Write>
            if( fixLen == 1 )
 8019174:	19a3      	adds	r3, r4, r6
 8019176:	19db      	adds	r3, r3, r7
 8019178:	781b      	ldrb	r3, [r3, #0]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d007      	beq.n	801918e <SX1276SetRxConfig+0x40a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 801917e:	2330      	movs	r3, #48	; 0x30
 8019180:	199b      	adds	r3, r3, r6
 8019182:	19db      	adds	r3, r3, r7
 8019184:	781b      	ldrb	r3, [r3, #0]
 8019186:	0019      	movs	r1, r3
 8019188:	2022      	movs	r0, #34	; 0x22
 801918a:	f001 f8cf 	bl	801a32c <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801918e:	4b35      	ldr	r3, [pc, #212]	; (8019264 <SX1276SetRxConfig+0x4e0>)
 8019190:	2253      	movs	r2, #83	; 0x53
 8019192:	5c9b      	ldrb	r3, [r3, r2]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d013      	beq.n	80191c0 <SX1276SetRxConfig+0x43c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019198:	2044      	movs	r0, #68	; 0x44
 801919a:	f001 f8d8 	bl	801a34e <SX1276Read>
 801919e:	0003      	movs	r3, r0
 80191a0:	001a      	movs	r2, r3
 80191a2:	2380      	movs	r3, #128	; 0x80
 80191a4:	425b      	negs	r3, r3
 80191a6:	4313      	orrs	r3, r2
 80191a8:	b2db      	uxtb	r3, r3
 80191aa:	0019      	movs	r1, r3
 80191ac:	2044      	movs	r0, #68	; 0x44
 80191ae:	f001 f8bd 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80191b2:	4b2c      	ldr	r3, [pc, #176]	; (8019264 <SX1276SetRxConfig+0x4e0>)
 80191b4:	2254      	movs	r2, #84	; 0x54
 80191b6:	5c9b      	ldrb	r3, [r3, r2]
 80191b8:	0019      	movs	r1, r3
 80191ba:	2024      	movs	r0, #36	; 0x24
 80191bc:	f001 f8b6 	bl	801a32c <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80191c0:	68bb      	ldr	r3, [r7, #8]
 80191c2:	2b09      	cmp	r3, #9
 80191c4:	d10d      	bne.n	80191e2 <SX1276SetRxConfig+0x45e>
 80191c6:	4b27      	ldr	r3, [pc, #156]	; (8019264 <SX1276SetRxConfig+0x4e0>)
 80191c8:	689b      	ldr	r3, [r3, #8]
 80191ca:	4a27      	ldr	r2, [pc, #156]	; (8019268 <SX1276SetRxConfig+0x4e4>)
 80191cc:	4293      	cmp	r3, r2
 80191ce:	d908      	bls.n	80191e2 <SX1276SetRxConfig+0x45e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80191d0:	2102      	movs	r1, #2
 80191d2:	2036      	movs	r0, #54	; 0x36
 80191d4:	f001 f8aa 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80191d8:	2164      	movs	r1, #100	; 0x64
 80191da:	203a      	movs	r0, #58	; 0x3a
 80191dc:	f001 f8a6 	bl	801a32c <SX1276Write>
 80191e0:	e00f      	b.n	8019202 <SX1276SetRxConfig+0x47e>
            else if( bandwidth == 9 )
 80191e2:	68bb      	ldr	r3, [r7, #8]
 80191e4:	2b09      	cmp	r3, #9
 80191e6:	d108      	bne.n	80191fa <SX1276SetRxConfig+0x476>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80191e8:	2102      	movs	r1, #2
 80191ea:	2036      	movs	r0, #54	; 0x36
 80191ec:	f001 f89e 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80191f0:	217f      	movs	r1, #127	; 0x7f
 80191f2:	203a      	movs	r0, #58	; 0x3a
 80191f4:	f001 f89a 	bl	801a32c <SX1276Write>
 80191f8:	e003      	b.n	8019202 <SX1276SetRxConfig+0x47e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80191fa:	2103      	movs	r1, #3
 80191fc:	2036      	movs	r0, #54	; 0x36
 80191fe:	f001 f895 	bl	801a32c <SX1276Write>
            if( datarate == 6 )
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	2b06      	cmp	r3, #6
 8019206:	d114      	bne.n	8019232 <SX1276SetRxConfig+0x4ae>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019208:	2031      	movs	r0, #49	; 0x31
 801920a:	f001 f8a0 	bl	801a34e <SX1276Read>
 801920e:	0003      	movs	r3, r0
 8019210:	b25b      	sxtb	r3, r3
 8019212:	2207      	movs	r2, #7
 8019214:	4393      	bics	r3, r2
 8019216:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019218:	2205      	movs	r2, #5
 801921a:	4313      	orrs	r3, r2
 801921c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801921e:	b2db      	uxtb	r3, r3
 8019220:	0019      	movs	r1, r3
 8019222:	2031      	movs	r0, #49	; 0x31
 8019224:	f001 f882 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019228:	210c      	movs	r1, #12
 801922a:	2037      	movs	r0, #55	; 0x37
 801922c:	f001 f87e 	bl	801a32c <SX1276Write>
        break;
 8019230:	e013      	b.n	801925a <SX1276SetRxConfig+0x4d6>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019232:	2031      	movs	r0, #49	; 0x31
 8019234:	f001 f88b 	bl	801a34e <SX1276Read>
 8019238:	0003      	movs	r3, r0
 801923a:	b25b      	sxtb	r3, r3
 801923c:	2207      	movs	r2, #7
 801923e:	4393      	bics	r3, r2
 8019240:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019242:	2203      	movs	r2, #3
 8019244:	4313      	orrs	r3, r2
 8019246:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019248:	b2db      	uxtb	r3, r3
 801924a:	0019      	movs	r1, r3
 801924c:	2031      	movs	r0, #49	; 0x31
 801924e:	f001 f86d 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019252:	210a      	movs	r1, #10
 8019254:	2037      	movs	r0, #55	; 0x37
 8019256:	f001 f869 	bl	801a32c <SX1276Write>
        break;
 801925a:	46c0      	nop			; (mov r8, r8)
}
 801925c:	46c0      	nop			; (mov r8, r8)
 801925e:	46bd      	mov	sp, r7
 8019260:	b005      	add	sp, #20
 8019262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019264:	20001538 	.word	0x20001538
 8019268:	1f4add40 	.word	0x1f4add40

0801926c <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801926c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801926e:	b085      	sub	sp, #20
 8019270:	af00      	add	r7, sp, #0
 8019272:	60ba      	str	r2, [r7, #8]
 8019274:	607b      	str	r3, [r7, #4]
 8019276:	240f      	movs	r4, #15
 8019278:	193b      	adds	r3, r7, r4
 801927a:	1c02      	adds	r2, r0, #0
 801927c:	701a      	strb	r2, [r3, #0]
 801927e:	230e      	movs	r3, #14
 8019280:	18fb      	adds	r3, r7, r3
 8019282:	1c0a      	adds	r2, r1, #0
 8019284:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8019286:	4bb1      	ldr	r3, [pc, #708]	; (801954c <SX1276SetTxConfig+0x2e0>)
 8019288:	791b      	ldrb	r3, [r3, #4]
 801928a:	2b01      	cmp	r3, #1
 801928c:	d108      	bne.n	80192a0 <SX1276SetTxConfig+0x34>
 801928e:	193b      	adds	r3, r7, r4
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d104      	bne.n	80192a0 <SX1276SetTxConfig+0x34>
    {
        SX1276SetSleep( );
 8019296:	f000 fc51 	bl	8019b3c <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 801929a:	2001      	movs	r0, #1
 801929c:	f7eb fa19 	bl	80046d2 <HAL_Delay>
    }

    SX1276SetModem( modem );
 80192a0:	240f      	movs	r4, #15
 80192a2:	193b      	adds	r3, r7, r4
 80192a4:	781b      	ldrb	r3, [r3, #0]
 80192a6:	0018      	movs	r0, r3
 80192a8:	f000 ffe6 	bl	801a278 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 80192ac:	250e      	movs	r5, #14
 80192ae:	197b      	adds	r3, r7, r5
 80192b0:	781b      	ldrb	r3, [r3, #0]
 80192b2:	b25b      	sxtb	r3, r3
 80192b4:	0018      	movs	r0, r3
 80192b6:	f000 fb2f 	bl	8019918 <SX1276SetRfTxPower>
    power = 0;  // Изменение параметра мощности передачи
 80192ba:	197b      	adds	r3, r7, r5
 80192bc:	2200      	movs	r2, #0
 80192be:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80192c0:	193b      	adds	r3, r7, r4
 80192c2:	781b      	ldrb	r3, [r3, #0]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d003      	beq.n	80192d0 <SX1276SetTxConfig+0x64>
 80192c8:	2b01      	cmp	r3, #1
 80192ca:	d100      	bne.n	80192ce <SX1276SetTxConfig+0x62>
 80192cc:	e0c1      	b.n	8019452 <SX1276SetTxConfig+0x1e6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80192ce:	e1f7      	b.n	80196c0 <SX1276SetTxConfig+0x454>
            SX1276.Settings.Fsk.Power = power;
 80192d0:	4b9e      	ldr	r3, [pc, #632]	; (801954c <SX1276SetTxConfig+0x2e0>)
 80192d2:	220e      	movs	r2, #14
 80192d4:	18ba      	adds	r2, r7, r2
 80192d6:	7812      	ldrb	r2, [r2, #0]
 80192d8:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 80192da:	4b9c      	ldr	r3, [pc, #624]	; (801954c <SX1276SetTxConfig+0x2e0>)
 80192dc:	68ba      	ldr	r2, [r7, #8]
 80192de:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80192e0:	4b9a      	ldr	r3, [pc, #616]	; (801954c <SX1276SetTxConfig+0x2e0>)
 80192e2:	687a      	ldr	r2, [r7, #4]
 80192e4:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80192e6:	4b99      	ldr	r3, [pc, #612]	; (801954c <SX1276SetTxConfig+0x2e0>)
 80192e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192ea:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80192ec:	4b97      	ldr	r3, [pc, #604]	; (801954c <SX1276SetTxConfig+0x2e0>)
 80192ee:	2420      	movs	r4, #32
 80192f0:	2608      	movs	r6, #8
 80192f2:	19a2      	adds	r2, r4, r6
 80192f4:	2108      	movs	r1, #8
 80192f6:	468c      	mov	ip, r1
 80192f8:	44bc      	add	ip, r7
 80192fa:	4462      	add	r2, ip
 80192fc:	8812      	ldrh	r2, [r2, #0]
 80192fe:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019300:	4b92      	ldr	r3, [pc, #584]	; (801954c <SX1276SetTxConfig+0x2e0>)
 8019302:	2524      	movs	r5, #36	; 0x24
 8019304:	19aa      	adds	r2, r5, r6
 8019306:	2108      	movs	r1, #8
 8019308:	468c      	mov	ip, r1
 801930a:	44bc      	add	ip, r7
 801930c:	4462      	add	r2, ip
 801930e:	2122      	movs	r1, #34	; 0x22
 8019310:	7812      	ldrb	r2, [r2, #0]
 8019312:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019314:	4b8d      	ldr	r3, [pc, #564]	; (801954c <SX1276SetTxConfig+0x2e0>)
 8019316:	2228      	movs	r2, #40	; 0x28
 8019318:	1992      	adds	r2, r2, r6
 801931a:	2108      	movs	r1, #8
 801931c:	468c      	mov	ip, r1
 801931e:	44bc      	add	ip, r7
 8019320:	4462      	add	r2, ip
 8019322:	2124      	movs	r1, #36	; 0x24
 8019324:	7812      	ldrb	r2, [r2, #0]
 8019326:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019328:	4b88      	ldr	r3, [pc, #544]	; (801954c <SX1276SetTxConfig+0x2e0>)
 801932a:	2234      	movs	r2, #52	; 0x34
 801932c:	1992      	adds	r2, r2, r6
 801932e:	2108      	movs	r1, #8
 8019330:	468c      	mov	ip, r1
 8019332:	44bc      	add	ip, r7
 8019334:	4462      	add	r2, ip
 8019336:	2125      	movs	r1, #37	; 0x25
 8019338:	7812      	ldrb	r2, [r2, #0]
 801933a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 801933c:	4b83      	ldr	r3, [pc, #524]	; (801954c <SX1276SetTxConfig+0x2e0>)
 801933e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019340:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8019342:	68b8      	ldr	r0, [r7, #8]
 8019344:	f7e9 f9a8 	bl	8002698 <__aeabi_ui2d>
 8019348:	2200      	movs	r2, #0
 801934a:	4b81      	ldr	r3, [pc, #516]	; (8019550 <SX1276SetTxConfig+0x2e4>)
 801934c:	f7e7 ff3e 	bl	80011cc <__aeabi_ddiv>
 8019350:	0002      	movs	r2, r0
 8019352:	000b      	movs	r3, r1
 8019354:	0010      	movs	r0, r2
 8019356:	0019      	movs	r1, r3
 8019358:	f7e7 f904 	bl	8000564 <__aeabi_d2uiz>
 801935c:	0003      	movs	r3, r0
 801935e:	b29b      	uxth	r3, r3
 8019360:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8019362:	68bb      	ldr	r3, [r7, #8]
 8019364:	0a1b      	lsrs	r3, r3, #8
 8019366:	b2db      	uxtb	r3, r3
 8019368:	0019      	movs	r1, r3
 801936a:	2004      	movs	r0, #4
 801936c:	f000 ffde 	bl	801a32c <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8019370:	68bb      	ldr	r3, [r7, #8]
 8019372:	b2db      	uxtb	r3, r3
 8019374:	0019      	movs	r1, r3
 8019376:	2005      	movs	r0, #5
 8019378:	f000 ffd8 	bl	801a32c <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 801937c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801937e:	f7e9 f98b 	bl	8002698 <__aeabi_ui2d>
 8019382:	0002      	movs	r2, r0
 8019384:	000b      	movs	r3, r1
 8019386:	2000      	movs	r0, #0
 8019388:	4972      	ldr	r1, [pc, #456]	; (8019554 <SX1276SetTxConfig+0x2e8>)
 801938a:	f7e7 ff1f 	bl	80011cc <__aeabi_ddiv>
 801938e:	0002      	movs	r2, r0
 8019390:	000b      	movs	r3, r1
 8019392:	0010      	movs	r0, r2
 8019394:	0019      	movs	r1, r3
 8019396:	f7e7 f8e5 	bl	8000564 <__aeabi_d2uiz>
 801939a:	0003      	movs	r3, r0
 801939c:	b29b      	uxth	r3, r3
 801939e:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80193a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193a2:	0a1b      	lsrs	r3, r3, #8
 80193a4:	b2db      	uxtb	r3, r3
 80193a6:	0019      	movs	r1, r3
 80193a8:	2002      	movs	r0, #2
 80193aa:	f000 ffbf 	bl	801a32c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80193ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193b0:	b2db      	uxtb	r3, r3
 80193b2:	0019      	movs	r1, r3
 80193b4:	2003      	movs	r0, #3
 80193b6:	f000 ffb9 	bl	801a32c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80193ba:	19a3      	adds	r3, r4, r6
 80193bc:	2208      	movs	r2, #8
 80193be:	4694      	mov	ip, r2
 80193c0:	44bc      	add	ip, r7
 80193c2:	4463      	add	r3, ip
 80193c4:	881b      	ldrh	r3, [r3, #0]
 80193c6:	0a1b      	lsrs	r3, r3, #8
 80193c8:	b29b      	uxth	r3, r3
 80193ca:	b2db      	uxtb	r3, r3
 80193cc:	0019      	movs	r1, r3
 80193ce:	2025      	movs	r0, #37	; 0x25
 80193d0:	f000 ffac 	bl	801a32c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80193d4:	19a3      	adds	r3, r4, r6
 80193d6:	2208      	movs	r2, #8
 80193d8:	4694      	mov	ip, r2
 80193da:	44bc      	add	ip, r7
 80193dc:	4463      	add	r3, ip
 80193de:	881b      	ldrh	r3, [r3, #0]
 80193e0:	b2db      	uxtb	r3, r3
 80193e2:	0019      	movs	r1, r3
 80193e4:	2026      	movs	r0, #38	; 0x26
 80193e6:	f000 ffa1 	bl	801a32c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80193ea:	2030      	movs	r0, #48	; 0x30
 80193ec:	f000 ffaf 	bl	801a34e <SX1276Read>
 80193f0:	0003      	movs	r3, r0
 80193f2:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 80193f4:	226f      	movs	r2, #111	; 0x6f
 80193f6:	4013      	ands	r3, r2
 80193f8:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80193fa:	19ab      	adds	r3, r5, r6
 80193fc:	2108      	movs	r1, #8
 80193fe:	468c      	mov	ip, r1
 8019400:	44bc      	add	ip, r7
 8019402:	4463      	add	r3, ip
 8019404:	781b      	ldrb	r3, [r3, #0]
 8019406:	2b00      	cmp	r3, #0
 8019408:	d001      	beq.n	801940e <SX1276SetTxConfig+0x1a2>
 801940a:	2300      	movs	r3, #0
 801940c:	e001      	b.n	8019412 <SX1276SetTxConfig+0x1a6>
 801940e:	2380      	movs	r3, #128	; 0x80
 8019410:	425b      	negs	r3, r3
 8019412:	4313      	orrs	r3, r2
 8019414:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019416:	2328      	movs	r3, #40	; 0x28
 8019418:	2108      	movs	r1, #8
 801941a:	185b      	adds	r3, r3, r1
 801941c:	2108      	movs	r1, #8
 801941e:	468c      	mov	ip, r1
 8019420:	44bc      	add	ip, r7
 8019422:	4463      	add	r3, ip
 8019424:	781b      	ldrb	r3, [r3, #0]
 8019426:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8019428:	b25b      	sxtb	r3, r3
 801942a:	4313      	orrs	r3, r2
 801942c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801942e:	b2db      	uxtb	r3, r3
 8019430:	0019      	movs	r1, r3
 8019432:	2030      	movs	r0, #48	; 0x30
 8019434:	f000 ff7a 	bl	801a32c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8019438:	2031      	movs	r0, #49	; 0x31
 801943a:	f000 ff88 	bl	801a34e <SX1276Read>
 801943e:	0003      	movs	r3, r0
 8019440:	001a      	movs	r2, r3
 8019442:	2340      	movs	r3, #64	; 0x40
 8019444:	4313      	orrs	r3, r2
 8019446:	b2db      	uxtb	r3, r3
 8019448:	0019      	movs	r1, r3
 801944a:	2031      	movs	r0, #49	; 0x31
 801944c:	f000 ff6e 	bl	801a32c <SX1276Write>
        break;
 8019450:	e136      	b.n	80196c0 <SX1276SetTxConfig+0x454>
            SX1276.Settings.LoRa.Power = power;
 8019452:	4b3e      	ldr	r3, [pc, #248]	; (801954c <SX1276SetTxConfig+0x2e0>)
 8019454:	220e      	movs	r2, #14
 8019456:	18ba      	adds	r2, r7, r2
 8019458:	2140      	movs	r1, #64	; 0x40
 801945a:	7812      	ldrb	r2, [r2, #0]
 801945c:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	2b02      	cmp	r3, #2
 8019462:	d900      	bls.n	8019466 <SX1276SetTxConfig+0x1fa>
                while( 1 );
 8019464:	e7fe      	b.n	8019464 <SX1276SetTxConfig+0x1f8>
            bandwidth += 7;
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	3307      	adds	r3, #7
 801946a:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801946c:	4b37      	ldr	r3, [pc, #220]	; (801954c <SX1276SetTxConfig+0x2e0>)
 801946e:	687a      	ldr	r2, [r7, #4]
 8019470:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8019472:	4b36      	ldr	r3, [pc, #216]	; (801954c <SX1276SetTxConfig+0x2e0>)
 8019474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019476:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8019478:	4b34      	ldr	r3, [pc, #208]	; (801954c <SX1276SetTxConfig+0x2e0>)
 801947a:	221c      	movs	r2, #28
 801947c:	2008      	movs	r0, #8
 801947e:	1812      	adds	r2, r2, r0
 8019480:	2108      	movs	r1, #8
 8019482:	468c      	mov	ip, r1
 8019484:	44bc      	add	ip, r7
 8019486:	4462      	add	r2, ip
 8019488:	214d      	movs	r1, #77	; 0x4d
 801948a:	7812      	ldrb	r2, [r2, #0]
 801948c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801948e:	4b2f      	ldr	r3, [pc, #188]	; (801954c <SX1276SetTxConfig+0x2e0>)
 8019490:	2220      	movs	r2, #32
 8019492:	1812      	adds	r2, r2, r0
 8019494:	2108      	movs	r1, #8
 8019496:	468c      	mov	ip, r1
 8019498:	44bc      	add	ip, r7
 801949a:	4462      	add	r2, ip
 801949c:	214e      	movs	r1, #78	; 0x4e
 801949e:	8812      	ldrh	r2, [r2, #0]
 80194a0:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80194a2:	4b2a      	ldr	r3, [pc, #168]	; (801954c <SX1276SetTxConfig+0x2e0>)
 80194a4:	2224      	movs	r2, #36	; 0x24
 80194a6:	1812      	adds	r2, r2, r0
 80194a8:	2108      	movs	r1, #8
 80194aa:	468c      	mov	ip, r1
 80194ac:	44bc      	add	ip, r7
 80194ae:	4462      	add	r2, ip
 80194b0:	2150      	movs	r1, #80	; 0x50
 80194b2:	7812      	ldrb	r2, [r2, #0]
 80194b4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80194b6:	4b25      	ldr	r3, [pc, #148]	; (801954c <SX1276SetTxConfig+0x2e0>)
 80194b8:	222c      	movs	r2, #44	; 0x2c
 80194ba:	1812      	adds	r2, r2, r0
 80194bc:	2108      	movs	r1, #8
 80194be:	468c      	mov	ip, r1
 80194c0:	44bc      	add	ip, r7
 80194c2:	4462      	add	r2, ip
 80194c4:	2153      	movs	r1, #83	; 0x53
 80194c6:	7812      	ldrb	r2, [r2, #0]
 80194c8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80194ca:	4b20      	ldr	r3, [pc, #128]	; (801954c <SX1276SetTxConfig+0x2e0>)
 80194cc:	2230      	movs	r2, #48	; 0x30
 80194ce:	1812      	adds	r2, r2, r0
 80194d0:	2108      	movs	r1, #8
 80194d2:	468c      	mov	ip, r1
 80194d4:	44bc      	add	ip, r7
 80194d6:	4462      	add	r2, ip
 80194d8:	2154      	movs	r1, #84	; 0x54
 80194da:	7812      	ldrb	r2, [r2, #0]
 80194dc:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80194de:	4b1b      	ldr	r3, [pc, #108]	; (801954c <SX1276SetTxConfig+0x2e0>)
 80194e0:	2228      	movs	r2, #40	; 0x28
 80194e2:	1812      	adds	r2, r2, r0
 80194e4:	2108      	movs	r1, #8
 80194e6:	468c      	mov	ip, r1
 80194e8:	44bc      	add	ip, r7
 80194ea:	4462      	add	r2, ip
 80194ec:	2152      	movs	r1, #82	; 0x52
 80194ee:	7812      	ldrb	r2, [r2, #0]
 80194f0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80194f2:	4b16      	ldr	r3, [pc, #88]	; (801954c <SX1276SetTxConfig+0x2e0>)
 80194f4:	2234      	movs	r2, #52	; 0x34
 80194f6:	1812      	adds	r2, r2, r0
 80194f8:	2108      	movs	r1, #8
 80194fa:	468c      	mov	ip, r1
 80194fc:	44bc      	add	ip, r7
 80194fe:	4462      	add	r2, ip
 8019500:	2155      	movs	r1, #85	; 0x55
 8019502:	7812      	ldrb	r2, [r2, #0]
 8019504:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8019506:	4b11      	ldr	r3, [pc, #68]	; (801954c <SX1276SetTxConfig+0x2e0>)
 8019508:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801950a:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 801950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801950e:	2b0c      	cmp	r3, #12
 8019510:	d902      	bls.n	8019518 <SX1276SetTxConfig+0x2ac>
                datarate = 12;
 8019512:	230c      	movs	r3, #12
 8019514:	62bb      	str	r3, [r7, #40]	; 0x28
 8019516:	e004      	b.n	8019522 <SX1276SetTxConfig+0x2b6>
            else if( datarate < 6 )
 8019518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801951a:	2b05      	cmp	r3, #5
 801951c:	d801      	bhi.n	8019522 <SX1276SetTxConfig+0x2b6>
                datarate = 6;
 801951e:	2306      	movs	r3, #6
 8019520:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	2b07      	cmp	r3, #7
 8019526:	d105      	bne.n	8019534 <SX1276SetTxConfig+0x2c8>
 8019528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952a:	2b0b      	cmp	r3, #11
 801952c:	d008      	beq.n	8019540 <SX1276SetTxConfig+0x2d4>
 801952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019530:	2b0c      	cmp	r3, #12
 8019532:	d005      	beq.n	8019540 <SX1276SetTxConfig+0x2d4>
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	2b08      	cmp	r3, #8
 8019538:	d10e      	bne.n	8019558 <SX1276SetTxConfig+0x2ec>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801953c:	2b0c      	cmp	r3, #12
 801953e:	d10b      	bne.n	8019558 <SX1276SetTxConfig+0x2ec>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019540:	4b02      	ldr	r3, [pc, #8]	; (801954c <SX1276SetTxConfig+0x2e0>)
 8019542:	224c      	movs	r2, #76	; 0x4c
 8019544:	2101      	movs	r1, #1
 8019546:	5499      	strb	r1, [r3, r2]
 8019548:	e00a      	b.n	8019560 <SX1276SetTxConfig+0x2f4>
 801954a:	46c0      	nop			; (mov r8, r8)
 801954c:	20001538 	.word	0x20001538
 8019550:	404e8480 	.word	0x404e8480
 8019554:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019558:	4b5b      	ldr	r3, [pc, #364]	; (80196c8 <SX1276SetTxConfig+0x45c>)
 801955a:	224c      	movs	r2, #76	; 0x4c
 801955c:	2100      	movs	r1, #0
 801955e:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019560:	4b59      	ldr	r3, [pc, #356]	; (80196c8 <SX1276SetTxConfig+0x45c>)
 8019562:	2253      	movs	r2, #83	; 0x53
 8019564:	5c9b      	ldrb	r3, [r3, r2]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d013      	beq.n	8019592 <SX1276SetTxConfig+0x326>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801956a:	2044      	movs	r0, #68	; 0x44
 801956c:	f000 feef 	bl	801a34e <SX1276Read>
 8019570:	0003      	movs	r3, r0
 8019572:	001a      	movs	r2, r3
 8019574:	2380      	movs	r3, #128	; 0x80
 8019576:	425b      	negs	r3, r3
 8019578:	4313      	orrs	r3, r2
 801957a:	b2db      	uxtb	r3, r3
 801957c:	0019      	movs	r1, r3
 801957e:	2044      	movs	r0, #68	; 0x44
 8019580:	f000 fed4 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8019584:	4b50      	ldr	r3, [pc, #320]	; (80196c8 <SX1276SetTxConfig+0x45c>)
 8019586:	2254      	movs	r2, #84	; 0x54
 8019588:	5c9b      	ldrb	r3, [r3, r2]
 801958a:	0019      	movs	r1, r3
 801958c:	2024      	movs	r0, #36	; 0x24
 801958e:	f000 fecd 	bl	801a32c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019592:	201d      	movs	r0, #29
 8019594:	f000 fedb 	bl	801a34e <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	b2db      	uxtb	r3, r3
 801959c:	011b      	lsls	r3, r3, #4
 801959e:	b2da      	uxtb	r2, r3
 80195a0:	231c      	movs	r3, #28
 80195a2:	2508      	movs	r5, #8
 80195a4:	195b      	adds	r3, r3, r5
 80195a6:	2108      	movs	r1, #8
 80195a8:	468c      	mov	ip, r1
 80195aa:	44bc      	add	ip, r7
 80195ac:	4463      	add	r3, ip
 80195ae:	781b      	ldrb	r3, [r3, #0]
 80195b0:	18db      	adds	r3, r3, r3
 80195b2:	b2db      	uxtb	r3, r3
 80195b4:	4313      	orrs	r3, r2
 80195b6:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80195b8:	2324      	movs	r3, #36	; 0x24
 80195ba:	195b      	adds	r3, r3, r5
 80195bc:	2108      	movs	r1, #8
 80195be:	468c      	mov	ip, r1
 80195c0:	44bc      	add	ip, r7
 80195c2:	4463      	add	r3, ip
 80195c4:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80195c6:	4313      	orrs	r3, r2
 80195c8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80195ca:	0019      	movs	r1, r3
 80195cc:	201d      	movs	r0, #29
 80195ce:	f000 fead 	bl	801a32c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80195d2:	201e      	movs	r0, #30
 80195d4:	f000 febb 	bl	801a34e <SX1276Read>
 80195d8:	0003      	movs	r3, r0
 80195da:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 80195dc:	230b      	movs	r3, #11
 80195de:	4013      	ands	r3, r2
 80195e0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80195e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195e4:	b2db      	uxtb	r3, r3
 80195e6:	011b      	lsls	r3, r3, #4
 80195e8:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 80195ea:	4313      	orrs	r3, r2
 80195ec:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80195ee:	2328      	movs	r3, #40	; 0x28
 80195f0:	195b      	adds	r3, r3, r5
 80195f2:	2108      	movs	r1, #8
 80195f4:	468c      	mov	ip, r1
 80195f6:	44bc      	add	ip, r7
 80195f8:	4463      	add	r3, ip
 80195fa:	781b      	ldrb	r3, [r3, #0]
 80195fc:	009b      	lsls	r3, r3, #2
 80195fe:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019600:	4313      	orrs	r3, r2
 8019602:	b2db      	uxtb	r3, r3
 8019604:	0019      	movs	r1, r3
 8019606:	201e      	movs	r0, #30
 8019608:	f000 fe90 	bl	801a32c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801960c:	2026      	movs	r0, #38	; 0x26
 801960e:	f000 fe9e 	bl	801a34e <SX1276Read>
 8019612:	0003      	movs	r3, r0
 8019614:	b25b      	sxtb	r3, r3
 8019616:	2208      	movs	r2, #8
 8019618:	4393      	bics	r3, r2
 801961a:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801961c:	4b2a      	ldr	r3, [pc, #168]	; (80196c8 <SX1276SetTxConfig+0x45c>)
 801961e:	214c      	movs	r1, #76	; 0x4c
 8019620:	5c5b      	ldrb	r3, [r3, r1]
 8019622:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019624:	b25b      	sxtb	r3, r3
 8019626:	4313      	orrs	r3, r2
 8019628:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801962a:	b2db      	uxtb	r3, r3
 801962c:	0019      	movs	r1, r3
 801962e:	2026      	movs	r0, #38	; 0x26
 8019630:	f000 fe7c 	bl	801a32c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8019634:	2420      	movs	r4, #32
 8019636:	1963      	adds	r3, r4, r5
 8019638:	2208      	movs	r2, #8
 801963a:	4694      	mov	ip, r2
 801963c:	44bc      	add	ip, r7
 801963e:	4463      	add	r3, ip
 8019640:	881b      	ldrh	r3, [r3, #0]
 8019642:	0a1b      	lsrs	r3, r3, #8
 8019644:	b29b      	uxth	r3, r3
 8019646:	b2db      	uxtb	r3, r3
 8019648:	0019      	movs	r1, r3
 801964a:	2020      	movs	r0, #32
 801964c:	f000 fe6e 	bl	801a32c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8019650:	1963      	adds	r3, r4, r5
 8019652:	2208      	movs	r2, #8
 8019654:	4694      	mov	ip, r2
 8019656:	44bc      	add	ip, r7
 8019658:	4463      	add	r3, ip
 801965a:	881b      	ldrh	r3, [r3, #0]
 801965c:	b2db      	uxtb	r3, r3
 801965e:	0019      	movs	r1, r3
 8019660:	2021      	movs	r0, #33	; 0x21
 8019662:	f000 fe63 	bl	801a32c <SX1276Write>
            if( datarate == 6 )
 8019666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019668:	2b06      	cmp	r3, #6
 801966a:	d114      	bne.n	8019696 <SX1276SetTxConfig+0x42a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801966c:	2031      	movs	r0, #49	; 0x31
 801966e:	f000 fe6e 	bl	801a34e <SX1276Read>
 8019672:	0003      	movs	r3, r0
 8019674:	b25b      	sxtb	r3, r3
 8019676:	2207      	movs	r2, #7
 8019678:	4393      	bics	r3, r2
 801967a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801967c:	2205      	movs	r2, #5
 801967e:	4313      	orrs	r3, r2
 8019680:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019682:	b2db      	uxtb	r3, r3
 8019684:	0019      	movs	r1, r3
 8019686:	2031      	movs	r0, #49	; 0x31
 8019688:	f000 fe50 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801968c:	210c      	movs	r1, #12
 801968e:	2037      	movs	r0, #55	; 0x37
 8019690:	f000 fe4c 	bl	801a32c <SX1276Write>
        break;
 8019694:	e013      	b.n	80196be <SX1276SetTxConfig+0x452>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019696:	2031      	movs	r0, #49	; 0x31
 8019698:	f000 fe59 	bl	801a34e <SX1276Read>
 801969c:	0003      	movs	r3, r0
 801969e:	b25b      	sxtb	r3, r3
 80196a0:	2207      	movs	r2, #7
 80196a2:	4393      	bics	r3, r2
 80196a4:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80196a6:	2203      	movs	r2, #3
 80196a8:	4313      	orrs	r3, r2
 80196aa:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80196ac:	b2db      	uxtb	r3, r3
 80196ae:	0019      	movs	r1, r3
 80196b0:	2031      	movs	r0, #49	; 0x31
 80196b2:	f000 fe3b 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80196b6:	210a      	movs	r1, #10
 80196b8:	2037      	movs	r0, #55	; 0x37
 80196ba:	f000 fe37 	bl	801a32c <SX1276Write>
        break;
 80196be:	46c0      	nop			; (mov r8, r8)
}
 80196c0:	46c0      	nop			; (mov r8, r8)
 80196c2:	46bd      	mov	sp, r7
 80196c4:	b005      	add	sp, #20
 80196c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196c8:	20001538 	.word	0x20001538

080196cc <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 80196cc:	b590      	push	{r4, r7, lr}
 80196ce:	b08b      	sub	sp, #44	; 0x2c
 80196d0:	af04      	add	r7, sp, #16
 80196d2:	60b9      	str	r1, [r7, #8]
 80196d4:	607a      	str	r2, [r7, #4]
 80196d6:	0019      	movs	r1, r3
 80196d8:	240f      	movs	r4, #15
 80196da:	193b      	adds	r3, r7, r4
 80196dc:	1c02      	adds	r2, r0, #0
 80196de:	701a      	strb	r2, [r3, #0]
 80196e0:	230e      	movs	r3, #14
 80196e2:	18fb      	adds	r3, r7, r3
 80196e4:	1c0a      	adds	r2, r1, #0
 80196e6:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 80196e8:	2300      	movs	r3, #0
 80196ea:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80196ec:	2301      	movs	r3, #1
 80196ee:	613b      	str	r3, [r7, #16]

    switch( modem )
 80196f0:	193b      	adds	r3, r7, r4
 80196f2:	781b      	ldrb	r3, [r3, #0]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d002      	beq.n	80196fe <SX1276GetTimeOnAir+0x32>
 80196f8:	2b01      	cmp	r3, #1
 80196fa:	d01a      	beq.n	8019732 <SX1276GetTimeOnAir+0x66>
 80196fc:	e03f      	b.n	801977e <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 80196fe:	2334      	movs	r3, #52	; 0x34
 8019700:	18fb      	adds	r3, r7, r3
 8019702:	781c      	ldrb	r4, [r3, #0]
 8019704:	2330      	movs	r3, #48	; 0x30
 8019706:	18fb      	adds	r3, r7, r3
 8019708:	781a      	ldrb	r2, [r3, #0]
 801970a:	232c      	movs	r3, #44	; 0x2c
 801970c:	18fb      	adds	r3, r7, r3
 801970e:	7819      	ldrb	r1, [r3, #0]
 8019710:	2328      	movs	r3, #40	; 0x28
 8019712:	18fb      	adds	r3, r7, r3
 8019714:	8818      	ldrh	r0, [r3, #0]
 8019716:	0023      	movs	r3, r4
 8019718:	f000 ff7e 	bl	801a618 <SX1276GetGfskTimeOnAirNumerator>
 801971c:	0002      	movs	r2, r0
 801971e:	0013      	movs	r3, r2
 8019720:	015b      	lsls	r3, r3, #5
 8019722:	1a9b      	subs	r3, r3, r2
 8019724:	009b      	lsls	r3, r3, #2
 8019726:	189b      	adds	r3, r3, r2
 8019728:	00db      	lsls	r3, r3, #3
 801972a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	613b      	str	r3, [r7, #16]
        }
        break;
 8019730:	e025      	b.n	801977e <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8019732:	2328      	movs	r3, #40	; 0x28
 8019734:	18fb      	adds	r3, r7, r3
 8019736:	881c      	ldrh	r4, [r3, #0]
 8019738:	230e      	movs	r3, #14
 801973a:	18fb      	adds	r3, r7, r3
 801973c:	781a      	ldrb	r2, [r3, #0]
 801973e:	6879      	ldr	r1, [r7, #4]
 8019740:	68b8      	ldr	r0, [r7, #8]
 8019742:	2334      	movs	r3, #52	; 0x34
 8019744:	18fb      	adds	r3, r7, r3
 8019746:	781b      	ldrb	r3, [r3, #0]
 8019748:	9302      	str	r3, [sp, #8]
 801974a:	2330      	movs	r3, #48	; 0x30
 801974c:	18fb      	adds	r3, r7, r3
 801974e:	781b      	ldrb	r3, [r3, #0]
 8019750:	9301      	str	r3, [sp, #4]
 8019752:	232c      	movs	r3, #44	; 0x2c
 8019754:	18fb      	adds	r3, r7, r3
 8019756:	781b      	ldrb	r3, [r3, #0]
 8019758:	9300      	str	r3, [sp, #0]
 801975a:	0023      	movs	r3, r4
 801975c:	f000 ff96 	bl	801a68c <SX1276GetLoRaTimeOnAirNumerator>
 8019760:	0002      	movs	r2, r0
 8019762:	0013      	movs	r3, r2
 8019764:	015b      	lsls	r3, r3, #5
 8019766:	1a9b      	subs	r3, r3, r2
 8019768:	009b      	lsls	r3, r3, #2
 801976a:	189b      	adds	r3, r3, r2
 801976c:	00db      	lsls	r3, r3, #3
 801976e:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 8019770:	68bb      	ldr	r3, [r7, #8]
 8019772:	0018      	movs	r0, r3
 8019774:	f000 ff1e 	bl	801a5b4 <SX1276GetLoRaBandwidthInHz>
 8019778:	0003      	movs	r3, r0
 801977a:	613b      	str	r3, [r7, #16]
        }
        break;
 801977c:	46c0      	nop			; (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 801977e:	697a      	ldr	r2, [r7, #20]
 8019780:	693b      	ldr	r3, [r7, #16]
 8019782:	18d3      	adds	r3, r2, r3
 8019784:	3b01      	subs	r3, #1
 8019786:	6939      	ldr	r1, [r7, #16]
 8019788:	0018      	movs	r0, r3
 801978a:	f7e6 fcc5 	bl	8000118 <__udivsi3>
 801978e:	0003      	movs	r3, r0
}
 8019790:	0018      	movs	r0, r3
 8019792:	46bd      	mov	sp, r7
 8019794:	b007      	add	sp, #28
 8019796:	bd90      	pop	{r4, r7, pc}

08019798 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b084      	sub	sp, #16
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
 80197a0:	000a      	movs	r2, r1
 80197a2:	1cfb      	adds	r3, r7, #3
 80197a4:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 80197a6:	2300      	movs	r3, #0
 80197a8:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80197aa:	4b59      	ldr	r3, [pc, #356]	; (8019910 <SX1276Send+0x178>)
 80197ac:	795b      	ldrb	r3, [r3, #5]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d002      	beq.n	80197b8 <SX1276Send+0x20>
 80197b2:	2b01      	cmp	r3, #1
 80197b4:	d04c      	beq.n	8019850 <SX1276Send+0xb8>
 80197b6:	e0a2      	b.n	80198fe <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80197b8:	4b55      	ldr	r3, [pc, #340]	; (8019910 <SX1276Send+0x178>)
 80197ba:	2200      	movs	r2, #0
 80197bc:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80197be:	1cfb      	adds	r3, r7, #3
 80197c0:	781b      	ldrb	r3, [r3, #0]
 80197c2:	b29a      	uxth	r2, r3
 80197c4:	4b52      	ldr	r3, [pc, #328]	; (8019910 <SX1276Send+0x178>)
 80197c6:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 80197c8:	4b51      	ldr	r3, [pc, #324]	; (8019910 <SX1276Send+0x178>)
 80197ca:	2222      	movs	r2, #34	; 0x22
 80197cc:	5c9b      	ldrb	r3, [r3, r2]
 80197ce:	2201      	movs	r2, #1
 80197d0:	4053      	eors	r3, r2
 80197d2:	b2db      	uxtb	r3, r3
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d005      	beq.n	80197e4 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80197d8:	1cfb      	adds	r3, r7, #3
 80197da:	2101      	movs	r1, #1
 80197dc:	0018      	movs	r0, r3
 80197de:	f000 fe31 	bl	801a444 <SX1276WriteFifo>
 80197e2:	e005      	b.n	80197f0 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 80197e4:	1cfb      	adds	r3, r7, #3
 80197e6:	781b      	ldrb	r3, [r3, #0]
 80197e8:	0019      	movs	r1, r3
 80197ea:	2032      	movs	r0, #50	; 0x32
 80197ec:	f000 fd9e 	bl	801a32c <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 80197f0:	1cfb      	adds	r3, r7, #3
 80197f2:	781b      	ldrb	r3, [r3, #0]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d009      	beq.n	801980c <SX1276Send+0x74>
 80197f8:	1cfb      	adds	r3, r7, #3
 80197fa:	781b      	ldrb	r3, [r3, #0]
 80197fc:	2b40      	cmp	r3, #64	; 0x40
 80197fe:	d805      	bhi.n	801980c <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8019800:	1cfb      	adds	r3, r7, #3
 8019802:	7819      	ldrb	r1, [r3, #0]
 8019804:	4b42      	ldr	r3, [pc, #264]	; (8019910 <SX1276Send+0x178>)
 8019806:	223f      	movs	r2, #63	; 0x3f
 8019808:	5499      	strb	r1, [r3, r2]
 801980a:	e00b      	b.n	8019824 <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 801980c:	1cfb      	adds	r3, r7, #3
 801980e:	781b      	ldrb	r3, [r3, #0]
 8019810:	b29a      	uxth	r2, r3
 8019812:	6879      	ldr	r1, [r7, #4]
 8019814:	4b3f      	ldr	r3, [pc, #252]	; (8019914 <SX1276Send+0x17c>)
 8019816:	0018      	movs	r0, r3
 8019818:	f002 f838 	bl	801b88c <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801981c:	4b3c      	ldr	r3, [pc, #240]	; (8019910 <SX1276Send+0x178>)
 801981e:	223f      	movs	r2, #63	; 0x3f
 8019820:	2120      	movs	r1, #32
 8019822:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8019824:	4b3a      	ldr	r3, [pc, #232]	; (8019910 <SX1276Send+0x178>)
 8019826:	223f      	movs	r2, #63	; 0x3f
 8019828:	5c9a      	ldrb	r2, [r3, r2]
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	0011      	movs	r1, r2
 801982e:	0018      	movs	r0, r3
 8019830:	f000 fe08 	bl	801a444 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8019834:	4b36      	ldr	r3, [pc, #216]	; (8019910 <SX1276Send+0x178>)
 8019836:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8019838:	4b35      	ldr	r3, [pc, #212]	; (8019910 <SX1276Send+0x178>)
 801983a:	213f      	movs	r1, #63	; 0x3f
 801983c:	5c5b      	ldrb	r3, [r3, r1]
 801983e:	b29b      	uxth	r3, r3
 8019840:	18d3      	adds	r3, r2, r3
 8019842:	b29a      	uxth	r2, r3
 8019844:	4b32      	ldr	r3, [pc, #200]	; (8019910 <SX1276Send+0x178>)
 8019846:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8019848:	4b31      	ldr	r3, [pc, #196]	; (8019910 <SX1276Send+0x178>)
 801984a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801984c:	60fb      	str	r3, [r7, #12]
        }
        break;
 801984e:	e056      	b.n	80198fe <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8019850:	4b2f      	ldr	r3, [pc, #188]	; (8019910 <SX1276Send+0x178>)
 8019852:	2255      	movs	r2, #85	; 0x55
 8019854:	5c9b      	ldrb	r3, [r3, r2]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d011      	beq.n	801987e <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801985a:	2033      	movs	r0, #51	; 0x33
 801985c:	f000 fd77 	bl	801a34e <SX1276Read>
 8019860:	0003      	movs	r3, r0
 8019862:	001a      	movs	r2, r3
 8019864:	2341      	movs	r3, #65	; 0x41
 8019866:	439a      	bics	r2, r3
 8019868:	0013      	movs	r3, r2
 801986a:	b2db      	uxtb	r3, r3
 801986c:	0019      	movs	r1, r3
 801986e:	2033      	movs	r0, #51	; 0x33
 8019870:	f000 fd5c 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8019874:	2119      	movs	r1, #25
 8019876:	203b      	movs	r0, #59	; 0x3b
 8019878:	f000 fd58 	bl	801a32c <SX1276Write>
 801987c:	e013      	b.n	80198a6 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801987e:	2033      	movs	r0, #51	; 0x33
 8019880:	f000 fd65 	bl	801a34e <SX1276Read>
 8019884:	0003      	movs	r3, r0
 8019886:	b25b      	sxtb	r3, r3
 8019888:	2241      	movs	r2, #65	; 0x41
 801988a:	4393      	bics	r3, r2
 801988c:	b25b      	sxtb	r3, r3
 801988e:	2201      	movs	r2, #1
 8019890:	4313      	orrs	r3, r2
 8019892:	b25b      	sxtb	r3, r3
 8019894:	b2db      	uxtb	r3, r3
 8019896:	0019      	movs	r1, r3
 8019898:	2033      	movs	r0, #51	; 0x33
 801989a:	f000 fd47 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801989e:	211d      	movs	r1, #29
 80198a0:	203b      	movs	r0, #59	; 0x3b
 80198a2:	f000 fd43 	bl	801a32c <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80198a6:	1cfb      	adds	r3, r7, #3
 80198a8:	7819      	ldrb	r1, [r3, #0]
 80198aa:	4b19      	ldr	r3, [pc, #100]	; (8019910 <SX1276Send+0x178>)
 80198ac:	2264      	movs	r2, #100	; 0x64
 80198ae:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80198b0:	1cfb      	adds	r3, r7, #3
 80198b2:	781b      	ldrb	r3, [r3, #0]
 80198b4:	0019      	movs	r1, r3
 80198b6:	2022      	movs	r0, #34	; 0x22
 80198b8:	f000 fd38 	bl	801a32c <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80198bc:	2100      	movs	r1, #0
 80198be:	200e      	movs	r0, #14
 80198c0:	f000 fd34 	bl	801a32c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80198c4:	2100      	movs	r1, #0
 80198c6:	200d      	movs	r0, #13
 80198c8:	f000 fd30 	bl	801a32c <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80198cc:	2001      	movs	r0, #1
 80198ce:	f000 fd3e 	bl	801a34e <SX1276Read>
 80198d2:	0003      	movs	r3, r0
 80198d4:	001a      	movs	r2, r3
 80198d6:	23f8      	movs	r3, #248	; 0xf8
 80198d8:	439a      	bics	r2, r3
 80198da:	1e13      	subs	r3, r2, #0
 80198dc:	d104      	bne.n	80198e8 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 80198de:	f000 f94f 	bl	8019b80 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 80198e2:	2001      	movs	r0, #1
 80198e4:	f7ea fef5 	bl	80046d2 <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 80198e8:	1cfb      	adds	r3, r7, #3
 80198ea:	781a      	ldrb	r2, [r3, #0]
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	0011      	movs	r1, r2
 80198f0:	0018      	movs	r0, r3
 80198f2:	f000 fda7 	bl	801a444 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80198f6:	4b06      	ldr	r3, [pc, #24]	; (8019910 <SX1276Send+0x178>)
 80198f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80198fa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80198fc:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	0018      	movs	r0, r3
 8019902:	f000 faf3 	bl	8019eec <SX1276SetTx>
}
 8019906:	46c0      	nop			; (mov r8, r8)
 8019908:	46bd      	mov	sp, r7
 801990a:	b004      	add	sp, #16
 801990c:	bd80      	pop	{r7, pc}
 801990e:	46c0      	nop			; (mov r8, r8)
 8019910:	20001538 	.word	0x20001538
 8019914:	20001438 	.word	0x20001438

08019918 <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 8019918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801991a:	b085      	sub	sp, #20
 801991c:	af00      	add	r7, sp, #0
 801991e:	0002      	movs	r2, r0
 8019920:	1dfb      	adds	r3, r7, #7
 8019922:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 8019924:	210f      	movs	r1, #15
 8019926:	187b      	adds	r3, r7, r1
 8019928:	2200      	movs	r2, #0
 801992a:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 801992c:	250e      	movs	r5, #14
 801992e:	197b      	adds	r3, r7, r5
 8019930:	2200      	movs	r2, #0
 8019932:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 8019934:	260d      	movs	r6, #13
 8019936:	19bb      	adds	r3, r7, r6
 8019938:	2200      	movs	r2, #0
 801993a:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 801993c:	187c      	adds	r4, r7, r1
 801993e:	2009      	movs	r0, #9
 8019940:	f000 fd05 	bl	801a34e <SX1276Read>
 8019944:	0003      	movs	r3, r0
 8019946:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 8019948:	197c      	adds	r4, r7, r5
 801994a:	204d      	movs	r0, #77	; 0x4d
 801994c:	f000 fcff 	bl	801a34e <SX1276Read>
 8019950:	0003      	movs	r3, r0
 8019952:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8019954:	4b78      	ldr	r3, [pc, #480]	; (8019b38 <SX1276SetRfTxPower+0x220>)
 8019956:	689b      	ldr	r3, [r3, #8]
 8019958:	0018      	movs	r0, r3
 801995a:	f7eb fe9d 	bl	8005698 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 801995e:	0003      	movs	r3, r0
 8019960:	2b03      	cmp	r3, #3
 8019962:	d01f      	beq.n	80199a4 <SX1276SetRfTxPower+0x8c>
 8019964:	dc23      	bgt.n	80199ae <SX1276SetRfTxPower+0x96>
 8019966:	2b02      	cmp	r3, #2
 8019968:	d008      	beq.n	801997c <SX1276SetRfTxPower+0x64>
 801996a:	dc20      	bgt.n	80199ae <SX1276SetRfTxPower+0x96>
 801996c:	2b00      	cmp	r3, #0
 801996e:	d00a      	beq.n	8019986 <SX1276SetRfTxPower+0x6e>
 8019970:	2b01      	cmp	r3, #1
 8019972:	d11c      	bne.n	80199ae <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 8019974:	19bb      	adds	r3, r7, r6
 8019976:	2200      	movs	r2, #0
 8019978:	701a      	strb	r2, [r3, #0]
        break;
 801997a:	e019      	b.n	80199b0 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 801997c:	230d      	movs	r3, #13
 801997e:	18fb      	adds	r3, r7, r3
 8019980:	2280      	movs	r2, #128	; 0x80
 8019982:	701a      	strb	r2, [r3, #0]
        break;
 8019984:	e014      	b.n	80199b0 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 8019986:	1dfb      	adds	r3, r7, #7
 8019988:	781b      	ldrb	r3, [r3, #0]
 801998a:	b25b      	sxtb	r3, r3
 801998c:	2b0e      	cmp	r3, #14
 801998e:	dd04      	ble.n	801999a <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 8019990:	230d      	movs	r3, #13
 8019992:	18fb      	adds	r3, r7, r3
 8019994:	2280      	movs	r2, #128	; 0x80
 8019996:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 8019998:	e00a      	b.n	80199b0 <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 801999a:	230d      	movs	r3, #13
 801999c:	18fb      	adds	r3, r7, r3
 801999e:	2200      	movs	r2, #0
 80199a0:	701a      	strb	r2, [r3, #0]
        break;
 80199a2:	e005      	b.n	80199b0 <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 80199a4:	230d      	movs	r3, #13
 80199a6:	18fb      	adds	r3, r7, r3
 80199a8:	2280      	movs	r2, #128	; 0x80
 80199aa:	701a      	strb	r2, [r3, #0]
          break;
 80199ac:	e000      	b.n	80199b0 <SX1276SetRfTxPower+0x98>
        default:
        break;
 80199ae:	46c0      	nop			; (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 80199b0:	210f      	movs	r1, #15
 80199b2:	187b      	adds	r3, r7, r1
 80199b4:	781b      	ldrb	r3, [r3, #0]
 80199b6:	b25b      	sxtb	r3, r3
 80199b8:	227f      	movs	r2, #127	; 0x7f
 80199ba:	4013      	ands	r3, r2
 80199bc:	b25a      	sxtb	r2, r3
 80199be:	230d      	movs	r3, #13
 80199c0:	18fb      	adds	r3, r7, r3
 80199c2:	781b      	ldrb	r3, [r3, #0]
 80199c4:	b25b      	sxtb	r3, r3
 80199c6:	4313      	orrs	r3, r2
 80199c8:	b25a      	sxtb	r2, r3
 80199ca:	187b      	adds	r3, r7, r1
 80199cc:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80199ce:	187b      	adds	r3, r7, r1
 80199d0:	781b      	ldrb	r3, [r3, #0]
 80199d2:	b25b      	sxtb	r3, r3
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	da67      	bge.n	8019aa8 <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 80199d8:	1dfb      	adds	r3, r7, #7
 80199da:	781b      	ldrb	r3, [r3, #0]
 80199dc:	b25b      	sxtb	r3, r3
 80199de:	2b11      	cmp	r3, #17
 80199e0:	dd07      	ble.n	80199f2 <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80199e2:	220e      	movs	r2, #14
 80199e4:	18bb      	adds	r3, r7, r2
 80199e6:	18ba      	adds	r2, r7, r2
 80199e8:	7812      	ldrb	r2, [r2, #0]
 80199ea:	2107      	movs	r1, #7
 80199ec:	430a      	orrs	r2, r1
 80199ee:	701a      	strb	r2, [r3, #0]
 80199f0:	e00b      	b.n	8019a0a <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80199f2:	210e      	movs	r1, #14
 80199f4:	187b      	adds	r3, r7, r1
 80199f6:	781b      	ldrb	r3, [r3, #0]
 80199f8:	b25b      	sxtb	r3, r3
 80199fa:	2207      	movs	r2, #7
 80199fc:	4393      	bics	r3, r2
 80199fe:	b25b      	sxtb	r3, r3
 8019a00:	2204      	movs	r2, #4
 8019a02:	4313      	orrs	r3, r2
 8019a04:	b25a      	sxtb	r2, r3
 8019a06:	187b      	adds	r3, r7, r1
 8019a08:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8019a0a:	230e      	movs	r3, #14
 8019a0c:	18fb      	adds	r3, r7, r3
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	2207      	movs	r2, #7
 8019a12:	4013      	ands	r3, r2
 8019a14:	2b07      	cmp	r3, #7
 8019a16:	d123      	bne.n	8019a60 <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 8019a18:	1dfb      	adds	r3, r7, #7
 8019a1a:	781b      	ldrb	r3, [r3, #0]
 8019a1c:	b25b      	sxtb	r3, r3
 8019a1e:	2b04      	cmp	r3, #4
 8019a20:	dc02      	bgt.n	8019a28 <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 8019a22:	1dfb      	adds	r3, r7, #7
 8019a24:	2205      	movs	r2, #5
 8019a26:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 8019a28:	1dfb      	adds	r3, r7, #7
 8019a2a:	781b      	ldrb	r3, [r3, #0]
 8019a2c:	b25b      	sxtb	r3, r3
 8019a2e:	2b14      	cmp	r3, #20
 8019a30:	dd02      	ble.n	8019a38 <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 8019a32:	1dfb      	adds	r3, r7, #7
 8019a34:	2214      	movs	r2, #20
 8019a36:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8019a38:	200f      	movs	r0, #15
 8019a3a:	183b      	adds	r3, r7, r0
 8019a3c:	781b      	ldrb	r3, [r3, #0]
 8019a3e:	b25b      	sxtb	r3, r3
 8019a40:	220f      	movs	r2, #15
 8019a42:	4393      	bics	r3, r2
 8019a44:	b25a      	sxtb	r2, r3
 8019a46:	1dfb      	adds	r3, r7, #7
 8019a48:	781b      	ldrb	r3, [r3, #0]
 8019a4a:	3b05      	subs	r3, #5
 8019a4c:	b2db      	uxtb	r3, r3
 8019a4e:	b25b      	sxtb	r3, r3
 8019a50:	210f      	movs	r1, #15
 8019a52:	400b      	ands	r3, r1
 8019a54:	b25b      	sxtb	r3, r3
 8019a56:	4313      	orrs	r3, r2
 8019a58:	b25a      	sxtb	r2, r3
 8019a5a:	183b      	adds	r3, r7, r0
 8019a5c:	701a      	strb	r2, [r3, #0]
 8019a5e:	e059      	b.n	8019b14 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 8019a60:	1dfb      	adds	r3, r7, #7
 8019a62:	781b      	ldrb	r3, [r3, #0]
 8019a64:	b25b      	sxtb	r3, r3
 8019a66:	2b01      	cmp	r3, #1
 8019a68:	dc02      	bgt.n	8019a70 <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 8019a6a:	1dfb      	adds	r3, r7, #7
 8019a6c:	2202      	movs	r2, #2
 8019a6e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 8019a70:	1dfb      	adds	r3, r7, #7
 8019a72:	781b      	ldrb	r3, [r3, #0]
 8019a74:	b25b      	sxtb	r3, r3
 8019a76:	2b11      	cmp	r3, #17
 8019a78:	dd02      	ble.n	8019a80 <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 8019a7a:	1dfb      	adds	r3, r7, #7
 8019a7c:	2211      	movs	r2, #17
 8019a7e:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8019a80:	200f      	movs	r0, #15
 8019a82:	183b      	adds	r3, r7, r0
 8019a84:	781b      	ldrb	r3, [r3, #0]
 8019a86:	b25b      	sxtb	r3, r3
 8019a88:	220f      	movs	r2, #15
 8019a8a:	4393      	bics	r3, r2
 8019a8c:	b25a      	sxtb	r2, r3
 8019a8e:	1dfb      	adds	r3, r7, #7
 8019a90:	781b      	ldrb	r3, [r3, #0]
 8019a92:	3b02      	subs	r3, #2
 8019a94:	b2db      	uxtb	r3, r3
 8019a96:	b25b      	sxtb	r3, r3
 8019a98:	210f      	movs	r1, #15
 8019a9a:	400b      	ands	r3, r1
 8019a9c:	b25b      	sxtb	r3, r3
 8019a9e:	4313      	orrs	r3, r2
 8019aa0:	b25a      	sxtb	r2, r3
 8019aa2:	183b      	adds	r3, r7, r0
 8019aa4:	701a      	strb	r2, [r3, #0]
 8019aa6:	e035      	b.n	8019b14 <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 8019aa8:	1dfb      	adds	r3, r7, #7
 8019aaa:	781b      	ldrb	r3, [r3, #0]
 8019aac:	b25b      	sxtb	r3, r3
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	dd18      	ble.n	8019ae4 <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 8019ab2:	1dfb      	adds	r3, r7, #7
 8019ab4:	781b      	ldrb	r3, [r3, #0]
 8019ab6:	b25b      	sxtb	r3, r3
 8019ab8:	2b0f      	cmp	r3, #15
 8019aba:	dd02      	ble.n	8019ac2 <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 8019abc:	1dfb      	adds	r3, r7, #7
 8019abe:	220f      	movs	r2, #15
 8019ac0:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8019ac2:	210f      	movs	r1, #15
 8019ac4:	187b      	adds	r3, r7, r1
 8019ac6:	781b      	ldrb	r3, [r3, #0]
 8019ac8:	b25b      	sxtb	r3, r3
 8019aca:	227f      	movs	r2, #127	; 0x7f
 8019acc:	4393      	bics	r3, r2
 8019ace:	b25b      	sxtb	r3, r3
 8019ad0:	2270      	movs	r2, #112	; 0x70
 8019ad2:	4313      	orrs	r3, r2
 8019ad4:	b25a      	sxtb	r2, r3
 8019ad6:	1dfb      	adds	r3, r7, #7
 8019ad8:	781b      	ldrb	r3, [r3, #0]
 8019ada:	4313      	orrs	r3, r2
 8019adc:	b25a      	sxtb	r2, r3
 8019ade:	187b      	adds	r3, r7, r1
 8019ae0:	701a      	strb	r2, [r3, #0]
 8019ae2:	e017      	b.n	8019b14 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 8019ae4:	1dfb      	adds	r3, r7, #7
 8019ae6:	781b      	ldrb	r3, [r3, #0]
 8019ae8:	b25b      	sxtb	r3, r3
 8019aea:	3304      	adds	r3, #4
 8019aec:	da02      	bge.n	8019af4 <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 8019aee:	1dfb      	adds	r3, r7, #7
 8019af0:	22fc      	movs	r2, #252	; 0xfc
 8019af2:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8019af4:	210f      	movs	r1, #15
 8019af6:	187b      	adds	r3, r7, r1
 8019af8:	781b      	ldrb	r3, [r3, #0]
 8019afa:	b25b      	sxtb	r3, r3
 8019afc:	227f      	movs	r2, #127	; 0x7f
 8019afe:	4393      	bics	r3, r2
 8019b00:	b25a      	sxtb	r2, r3
 8019b02:	1dfb      	adds	r3, r7, #7
 8019b04:	781b      	ldrb	r3, [r3, #0]
 8019b06:	3304      	adds	r3, #4
 8019b08:	b2db      	uxtb	r3, r3
 8019b0a:	b25b      	sxtb	r3, r3
 8019b0c:	4313      	orrs	r3, r2
 8019b0e:	b25a      	sxtb	r2, r3
 8019b10:	187b      	adds	r3, r7, r1
 8019b12:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8019b14:	230f      	movs	r3, #15
 8019b16:	18fb      	adds	r3, r7, r3
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	0019      	movs	r1, r3
 8019b1c:	2009      	movs	r0, #9
 8019b1e:	f000 fc05 	bl	801a32c <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8019b22:	230e      	movs	r3, #14
 8019b24:	18fb      	adds	r3, r7, r3
 8019b26:	781b      	ldrb	r3, [r3, #0]
 8019b28:	0019      	movs	r1, r3
 8019b2a:	204d      	movs	r0, #77	; 0x4d
 8019b2c:	f000 fbfe 	bl	801a32c <SX1276Write>
}
 8019b30:	46c0      	nop			; (mov r8, r8)
 8019b32:	46bd      	mov	sp, r7
 8019b34:	b005      	add	sp, #20
 8019b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b38:	20001538 	.word	0x20001538

08019b3c <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 8019b40:	4b0b      	ldr	r3, [pc, #44]	; (8019b70 <SX1276SetSleep+0x34>)
 8019b42:	0018      	movs	r0, r3
 8019b44:	f002 fa5c 	bl	801c000 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8019b48:	4b0a      	ldr	r3, [pc, #40]	; (8019b74 <SX1276SetSleep+0x38>)
 8019b4a:	0018      	movs	r0, r3
 8019b4c:	f002 fa58 	bl	801c000 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8019b50:	4b09      	ldr	r3, [pc, #36]	; (8019b78 <SX1276SetSleep+0x3c>)
 8019b52:	0018      	movs	r0, r3
 8019b54:	f002 fa54 	bl	801c000 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8019b58:	2000      	movs	r0, #0
 8019b5a:	f000 fb20 	bl	801a19e <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 8019b5e:	2000      	movs	r0, #0
 8019b60:	f7eb fbe6 	bl	8005330 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 8019b64:	4b05      	ldr	r3, [pc, #20]	; (8019b7c <SX1276SetSleep+0x40>)
 8019b66:	2200      	movs	r2, #0
 8019b68:	711a      	strb	r2, [r3, #4]
}
 8019b6a:	46c0      	nop			; (mov r8, r8)
 8019b6c:	46bd      	mov	sp, r7
 8019b6e:	bd80      	pop	{r7, pc}
 8019b70:	200015b8 	.word	0x200015b8
 8019b74:	200015a0 	.word	0x200015a0
 8019b78:	200015d0 	.word	0x200015d0
 8019b7c:	20001538 	.word	0x20001538

08019b80 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8019b84:	4b0a      	ldr	r3, [pc, #40]	; (8019bb0 <SX1276SetStby+0x30>)
 8019b86:	0018      	movs	r0, r3
 8019b88:	f002 fa3a 	bl	801c000 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8019b8c:	4b09      	ldr	r3, [pc, #36]	; (8019bb4 <SX1276SetStby+0x34>)
 8019b8e:	0018      	movs	r0, r3
 8019b90:	f002 fa36 	bl	801c000 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8019b94:	4b08      	ldr	r3, [pc, #32]	; (8019bb8 <SX1276SetStby+0x38>)
 8019b96:	0018      	movs	r0, r3
 8019b98:	f002 fa32 	bl	801c000 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8019b9c:	2001      	movs	r0, #1
 8019b9e:	f000 fafe 	bl	801a19e <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8019ba2:	4b06      	ldr	r3, [pc, #24]	; (8019bbc <SX1276SetStby+0x3c>)
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	711a      	strb	r2, [r3, #4]
}
 8019ba8:	46c0      	nop			; (mov r8, r8)
 8019baa:	46bd      	mov	sp, r7
 8019bac:	bd80      	pop	{r7, pc}
 8019bae:	46c0      	nop			; (mov r8, r8)
 8019bb0:	200015b8 	.word	0x200015b8
 8019bb4:	200015a0 	.word	0x200015a0
 8019bb8:	200015d0 	.word	0x200015d0
 8019bbc:	20001538 	.word	0x20001538

08019bc0 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8019bc0:	b580      	push	{r7, lr}
 8019bc2:	b084      	sub	sp, #16
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8019bc8:	230f      	movs	r3, #15
 8019bca:	18fb      	adds	r3, r7, r3
 8019bcc:	2200      	movs	r2, #0
 8019bce:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 8019bd0:	4bba      	ldr	r3, [pc, #744]	; (8019ebc <SX1276SetRx+0x2fc>)
 8019bd2:	0018      	movs	r0, r3
 8019bd4:	f002 fa14 	bl	801c000 <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 8019bd8:	4bb9      	ldr	r3, [pc, #740]	; (8019ec0 <SX1276SetRx+0x300>)
 8019bda:	795b      	ldrb	r3, [r3, #5]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d002      	beq.n	8019be6 <SX1276SetRx+0x26>
 8019be0:	2b01      	cmp	r3, #1
 8019be2:	d041      	beq.n	8019c68 <SX1276SetRx+0xa8>
 8019be4:	e127      	b.n	8019e36 <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8019be6:	230f      	movs	r3, #15
 8019be8:	18fb      	adds	r3, r7, r3
 8019bea:	4ab5      	ldr	r2, [pc, #724]	; (8019ec0 <SX1276SetRx+0x300>)
 8019bec:	2126      	movs	r1, #38	; 0x26
 8019bee:	5c52      	ldrb	r2, [r2, r1]
 8019bf0:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8019bf2:	2040      	movs	r0, #64	; 0x40
 8019bf4:	f000 fbab 	bl	801a34e <SX1276Read>
 8019bf8:	0003      	movs	r3, r0
 8019bfa:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8019bfc:	2203      	movs	r2, #3
 8019bfe:	4013      	ands	r3, r2
 8019c00:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8019c02:	220c      	movs	r2, #12
 8019c04:	4313      	orrs	r3, r2
 8019c06:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8019c08:	b2db      	uxtb	r3, r3
 8019c0a:	0019      	movs	r1, r3
 8019c0c:	2040      	movs	r0, #64	; 0x40
 8019c0e:	f000 fb8d 	bl	801a32c <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8019c12:	2041      	movs	r0, #65	; 0x41
 8019c14:	f000 fb9b 	bl	801a34e <SX1276Read>
 8019c18:	0003      	movs	r3, r0
 8019c1a:	001a      	movs	r2, r3
 8019c1c:	233f      	movs	r3, #63	; 0x3f
 8019c1e:	425b      	negs	r3, r3
 8019c20:	4313      	orrs	r3, r2
 8019c22:	b2db      	uxtb	r3, r3
 8019c24:	0019      	movs	r1, r3
 8019c26:	2041      	movs	r0, #65	; 0x41
 8019c28:	f000 fb80 	bl	801a32c <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8019c2c:	2035      	movs	r0, #53	; 0x35
 8019c2e:	f000 fb8e 	bl	801a34e <SX1276Read>
 8019c32:	0003      	movs	r3, r0
 8019c34:	001a      	movs	r2, r3
 8019c36:	233f      	movs	r3, #63	; 0x3f
 8019c38:	4013      	ands	r3, r2
 8019c3a:	b2d9      	uxtb	r1, r3
 8019c3c:	4ba0      	ldr	r3, [pc, #640]	; (8019ec0 <SX1276SetRx+0x300>)
 8019c3e:	223e      	movs	r2, #62	; 0x3e
 8019c40:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8019c42:	211e      	movs	r1, #30
 8019c44:	200d      	movs	r0, #13
 8019c46:	f000 fb71 	bl	801a32c <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8019c4a:	4b9d      	ldr	r3, [pc, #628]	; (8019ec0 <SX1276SetRx+0x300>)
 8019c4c:	2230      	movs	r2, #48	; 0x30
 8019c4e:	2100      	movs	r1, #0
 8019c50:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8019c52:	4b9b      	ldr	r3, [pc, #620]	; (8019ec0 <SX1276SetRx+0x300>)
 8019c54:	2231      	movs	r2, #49	; 0x31
 8019c56:	2100      	movs	r1, #0
 8019c58:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8019c5a:	4b99      	ldr	r3, [pc, #612]	; (8019ec0 <SX1276SetRx+0x300>)
 8019c5c:	2200      	movs	r2, #0
 8019c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8019c60:	4b97      	ldr	r3, [pc, #604]	; (8019ec0 <SX1276SetRx+0x300>)
 8019c62:	2200      	movs	r2, #0
 8019c64:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 8019c66:	e0e6      	b.n	8019e36 <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8019c68:	4b95      	ldr	r3, [pc, #596]	; (8019ec0 <SX1276SetRx+0x300>)
 8019c6a:	2255      	movs	r2, #85	; 0x55
 8019c6c:	5c9b      	ldrb	r3, [r3, r2]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d010      	beq.n	8019c94 <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8019c72:	2033      	movs	r0, #51	; 0x33
 8019c74:	f000 fb6b 	bl	801a34e <SX1276Read>
 8019c78:	0003      	movs	r3, r0
 8019c7a:	001a      	movs	r2, r3
 8019c7c:	2341      	movs	r3, #65	; 0x41
 8019c7e:	4313      	orrs	r3, r2
 8019c80:	b2db      	uxtb	r3, r3
 8019c82:	0019      	movs	r1, r3
 8019c84:	2033      	movs	r0, #51	; 0x33
 8019c86:	f000 fb51 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8019c8a:	2119      	movs	r1, #25
 8019c8c:	203b      	movs	r0, #59	; 0x3b
 8019c8e:	f000 fb4d 	bl	801a32c <SX1276Write>
 8019c92:	e013      	b.n	8019cbc <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8019c94:	2033      	movs	r0, #51	; 0x33
 8019c96:	f000 fb5a 	bl	801a34e <SX1276Read>
 8019c9a:	0003      	movs	r3, r0
 8019c9c:	b25b      	sxtb	r3, r3
 8019c9e:	2241      	movs	r2, #65	; 0x41
 8019ca0:	4393      	bics	r3, r2
 8019ca2:	b25b      	sxtb	r3, r3
 8019ca4:	2201      	movs	r2, #1
 8019ca6:	4313      	orrs	r3, r2
 8019ca8:	b25b      	sxtb	r3, r3
 8019caa:	b2db      	uxtb	r3, r3
 8019cac:	0019      	movs	r1, r3
 8019cae:	2033      	movs	r0, #51	; 0x33
 8019cb0:	f000 fb3c 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8019cb4:	211d      	movs	r1, #29
 8019cb6:	203b      	movs	r0, #59	; 0x3b
 8019cb8:	f000 fb38 	bl	801a32c <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8019cbc:	4b80      	ldr	r3, [pc, #512]	; (8019ec0 <SX1276SetRx+0x300>)
 8019cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cc0:	2b08      	cmp	r3, #8
 8019cc2:	d900      	bls.n	8019cc6 <SX1276SetRx+0x106>
 8019cc4:	e075      	b.n	8019db2 <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8019cc6:	2031      	movs	r0, #49	; 0x31
 8019cc8:	f000 fb41 	bl	801a34e <SX1276Read>
 8019ccc:	0003      	movs	r3, r0
 8019cce:	001a      	movs	r2, r3
 8019cd0:	237f      	movs	r3, #127	; 0x7f
 8019cd2:	4013      	ands	r3, r2
 8019cd4:	b2db      	uxtb	r3, r3
 8019cd6:	0019      	movs	r1, r3
 8019cd8:	2031      	movs	r0, #49	; 0x31
 8019cda:	f000 fb27 	bl	801a32c <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8019cde:	2100      	movs	r1, #0
 8019ce0:	2030      	movs	r0, #48	; 0x30
 8019ce2:	f000 fb23 	bl	801a32c <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8019ce6:	4b76      	ldr	r3, [pc, #472]	; (8019ec0 <SX1276SetRx+0x300>)
 8019ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cea:	2b08      	cmp	r3, #8
 8019cec:	d86e      	bhi.n	8019dcc <SX1276SetRx+0x20c>
 8019cee:	009a      	lsls	r2, r3, #2
 8019cf0:	4b74      	ldr	r3, [pc, #464]	; (8019ec4 <SX1276SetRx+0x304>)
 8019cf2:	18d3      	adds	r3, r2, r3
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8019cf8:	2148      	movs	r1, #72	; 0x48
 8019cfa:	202f      	movs	r0, #47	; 0x2f
 8019cfc:	f000 fb16 	bl	801a32c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8019d00:	4b6f      	ldr	r3, [pc, #444]	; (8019ec0 <SX1276SetRx+0x300>)
 8019d02:	689b      	ldr	r3, [r3, #8]
 8019d04:	4a70      	ldr	r2, [pc, #448]	; (8019ec8 <SX1276SetRx+0x308>)
 8019d06:	4694      	mov	ip, r2
 8019d08:	4463      	add	r3, ip
 8019d0a:	0018      	movs	r0, r3
 8019d0c:	f7fe fee6 	bl	8018adc <SX1276SetChannel>
                    break;
 8019d10:	e05c      	b.n	8019dcc <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8019d12:	2144      	movs	r1, #68	; 0x44
 8019d14:	202f      	movs	r0, #47	; 0x2f
 8019d16:	f000 fb09 	bl	801a32c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8019d1a:	4b69      	ldr	r3, [pc, #420]	; (8019ec0 <SX1276SetRx+0x300>)
 8019d1c:	689b      	ldr	r3, [r3, #8]
 8019d1e:	4a6b      	ldr	r2, [pc, #428]	; (8019ecc <SX1276SetRx+0x30c>)
 8019d20:	4694      	mov	ip, r2
 8019d22:	4463      	add	r3, ip
 8019d24:	0018      	movs	r0, r3
 8019d26:	f7fe fed9 	bl	8018adc <SX1276SetChannel>
                    break;
 8019d2a:	e04f      	b.n	8019dcc <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8019d2c:	2144      	movs	r1, #68	; 0x44
 8019d2e:	202f      	movs	r0, #47	; 0x2f
 8019d30:	f000 fafc 	bl	801a32c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8019d34:	4b62      	ldr	r3, [pc, #392]	; (8019ec0 <SX1276SetRx+0x300>)
 8019d36:	689b      	ldr	r3, [r3, #8]
 8019d38:	4a65      	ldr	r2, [pc, #404]	; (8019ed0 <SX1276SetRx+0x310>)
 8019d3a:	4694      	mov	ip, r2
 8019d3c:	4463      	add	r3, ip
 8019d3e:	0018      	movs	r0, r3
 8019d40:	f7fe fecc 	bl	8018adc <SX1276SetChannel>
                    break;
 8019d44:	e042      	b.n	8019dcc <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8019d46:	2144      	movs	r1, #68	; 0x44
 8019d48:	202f      	movs	r0, #47	; 0x2f
 8019d4a:	f000 faef 	bl	801a32c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8019d4e:	4b5c      	ldr	r3, [pc, #368]	; (8019ec0 <SX1276SetRx+0x300>)
 8019d50:	689b      	ldr	r3, [r3, #8]
 8019d52:	4a60      	ldr	r2, [pc, #384]	; (8019ed4 <SX1276SetRx+0x314>)
 8019d54:	4694      	mov	ip, r2
 8019d56:	4463      	add	r3, ip
 8019d58:	0018      	movs	r0, r3
 8019d5a:	f7fe febf 	bl	8018adc <SX1276SetChannel>
                    break;
 8019d5e:	e035      	b.n	8019dcc <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8019d60:	2144      	movs	r1, #68	; 0x44
 8019d62:	202f      	movs	r0, #47	; 0x2f
 8019d64:	f000 fae2 	bl	801a32c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8019d68:	4b55      	ldr	r3, [pc, #340]	; (8019ec0 <SX1276SetRx+0x300>)
 8019d6a:	689b      	ldr	r3, [r3, #8]
 8019d6c:	4a5a      	ldr	r2, [pc, #360]	; (8019ed8 <SX1276SetRx+0x318>)
 8019d6e:	4694      	mov	ip, r2
 8019d70:	4463      	add	r3, ip
 8019d72:	0018      	movs	r0, r3
 8019d74:	f7fe feb2 	bl	8018adc <SX1276SetChannel>
                    break;
 8019d78:	e028      	b.n	8019dcc <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8019d7a:	2144      	movs	r1, #68	; 0x44
 8019d7c:	202f      	movs	r0, #47	; 0x2f
 8019d7e:	f000 fad5 	bl	801a32c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8019d82:	4b4f      	ldr	r3, [pc, #316]	; (8019ec0 <SX1276SetRx+0x300>)
 8019d84:	689b      	ldr	r3, [r3, #8]
 8019d86:	4a55      	ldr	r2, [pc, #340]	; (8019edc <SX1276SetRx+0x31c>)
 8019d88:	4694      	mov	ip, r2
 8019d8a:	4463      	add	r3, ip
 8019d8c:	0018      	movs	r0, r3
 8019d8e:	f7fe fea5 	bl	8018adc <SX1276SetChannel>
                    break;
 8019d92:	e01b      	b.n	8019dcc <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8019d94:	2140      	movs	r1, #64	; 0x40
 8019d96:	202f      	movs	r0, #47	; 0x2f
 8019d98:	f000 fac8 	bl	801a32c <SX1276Write>
                    break;
 8019d9c:	e016      	b.n	8019dcc <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8019d9e:	2140      	movs	r1, #64	; 0x40
 8019da0:	202f      	movs	r0, #47	; 0x2f
 8019da2:	f000 fac3 	bl	801a32c <SX1276Write>
                    break;
 8019da6:	e011      	b.n	8019dcc <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8019da8:	2140      	movs	r1, #64	; 0x40
 8019daa:	202f      	movs	r0, #47	; 0x2f
 8019dac:	f000 fabe 	bl	801a32c <SX1276Write>
                    break;
 8019db0:	e00c      	b.n	8019dcc <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8019db2:	2031      	movs	r0, #49	; 0x31
 8019db4:	f000 facb 	bl	801a34e <SX1276Read>
 8019db8:	0003      	movs	r3, r0
 8019dba:	001a      	movs	r2, r3
 8019dbc:	2380      	movs	r3, #128	; 0x80
 8019dbe:	425b      	negs	r3, r3
 8019dc0:	4313      	orrs	r3, r2
 8019dc2:	b2db      	uxtb	r3, r3
 8019dc4:	0019      	movs	r1, r3
 8019dc6:	2031      	movs	r0, #49	; 0x31
 8019dc8:	f000 fab0 	bl	801a32c <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8019dcc:	230f      	movs	r3, #15
 8019dce:	18fb      	adds	r3, r7, r3
 8019dd0:	4a3b      	ldr	r2, [pc, #236]	; (8019ec0 <SX1276SetRx+0x300>)
 8019dd2:	2156      	movs	r1, #86	; 0x56
 8019dd4:	5c52      	ldrb	r2, [r2, r1]
 8019dd6:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019dd8:	4b39      	ldr	r3, [pc, #228]	; (8019ec0 <SX1276SetRx+0x300>)
 8019dda:	2253      	movs	r2, #83	; 0x53
 8019ddc:	5c9b      	ldrb	r3, [r3, r2]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d010      	beq.n	8019e04 <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8019de2:	211d      	movs	r1, #29
 8019de4:	2011      	movs	r0, #17
 8019de6:	f000 faa1 	bl	801a32c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8019dea:	2040      	movs	r0, #64	; 0x40
 8019dec:	f000 faaf 	bl	801a34e <SX1276Read>
 8019df0:	0003      	movs	r3, r0
 8019df2:	001a      	movs	r2, r3
 8019df4:	2333      	movs	r3, #51	; 0x33
 8019df6:	4013      	ands	r3, r2
 8019df8:	b2db      	uxtb	r3, r3
 8019dfa:	0019      	movs	r1, r3
 8019dfc:	2040      	movs	r0, #64	; 0x40
 8019dfe:	f000 fa95 	bl	801a32c <SX1276Write>
 8019e02:	e00f      	b.n	8019e24 <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8019e04:	211f      	movs	r1, #31
 8019e06:	2011      	movs	r0, #17
 8019e08:	f000 fa90 	bl	801a32c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8019e0c:	2040      	movs	r0, #64	; 0x40
 8019e0e:	f000 fa9e 	bl	801a34e <SX1276Read>
 8019e12:	0003      	movs	r3, r0
 8019e14:	001a      	movs	r2, r3
 8019e16:	233f      	movs	r3, #63	; 0x3f
 8019e18:	4013      	ands	r3, r2
 8019e1a:	b2db      	uxtb	r3, r3
 8019e1c:	0019      	movs	r1, r3
 8019e1e:	2040      	movs	r0, #64	; 0x40
 8019e20:	f000 fa84 	bl	801a32c <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8019e24:	2100      	movs	r1, #0
 8019e26:	200f      	movs	r0, #15
 8019e28:	f000 fa80 	bl	801a32c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8019e2c:	2100      	movs	r1, #0
 8019e2e:	200d      	movs	r0, #13
 8019e30:	f000 fa7c 	bl	801a32c <SX1276Write>
        }
        break;
 8019e34:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8019e36:	2380      	movs	r3, #128	; 0x80
 8019e38:	005a      	lsls	r2, r3, #1
 8019e3a:	4b29      	ldr	r3, [pc, #164]	; (8019ee0 <SX1276SetRx+0x320>)
 8019e3c:	2100      	movs	r1, #0
 8019e3e:	0018      	movs	r0, r3
 8019e40:	f003 fa31 	bl	801d2a6 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8019e44:	4b1e      	ldr	r3, [pc, #120]	; (8019ec0 <SX1276SetRx+0x300>)
 8019e46:	2201      	movs	r2, #1
 8019e48:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d009      	beq.n	8019e64 <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019e50:	687a      	ldr	r2, [r7, #4]
 8019e52:	4b24      	ldr	r3, [pc, #144]	; (8019ee4 <SX1276SetRx+0x324>)
 8019e54:	0011      	movs	r1, r2
 8019e56:	0018      	movs	r0, r3
 8019e58:	f002 f94a 	bl	801c0f0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019e5c:	4b21      	ldr	r3, [pc, #132]	; (8019ee4 <SX1276SetRx+0x324>)
 8019e5e:	0018      	movs	r0, r3
 8019e60:	f002 f856 	bl	801bf10 <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8019e64:	4b16      	ldr	r3, [pc, #88]	; (8019ec0 <SX1276SetRx+0x300>)
 8019e66:	795b      	ldrb	r3, [r3, #5]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d116      	bne.n	8019e9a <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8019e6c:	2005      	movs	r0, #5
 8019e6e:	f000 f996 	bl	801a19e <SX1276SetOpMode>

        if( rxContinuous == false )
 8019e72:	230f      	movs	r3, #15
 8019e74:	18fb      	adds	r3, r7, r3
 8019e76:	781b      	ldrb	r3, [r3, #0]
 8019e78:	2201      	movs	r2, #1
 8019e7a:	4053      	eors	r3, r2
 8019e7c:	b2db      	uxtb	r3, r3
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d017      	beq.n	8019eb2 <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8019e82:	4b0f      	ldr	r3, [pc, #60]	; (8019ec0 <SX1276SetRx+0x300>)
 8019e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e86:	4b18      	ldr	r3, [pc, #96]	; (8019ee8 <SX1276SetRx+0x328>)
 8019e88:	0011      	movs	r1, r2
 8019e8a:	0018      	movs	r0, r3
 8019e8c:	f002 f930 	bl	801c0f0 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 8019e90:	4b15      	ldr	r3, [pc, #84]	; (8019ee8 <SX1276SetRx+0x328>)
 8019e92:	0018      	movs	r0, r3
 8019e94:	f002 f83c 	bl	801bf10 <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8019e98:	e00b      	b.n	8019eb2 <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 8019e9a:	230f      	movs	r3, #15
 8019e9c:	18fb      	adds	r3, r7, r3
 8019e9e:	781b      	ldrb	r3, [r3, #0]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d003      	beq.n	8019eac <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8019ea4:	2005      	movs	r0, #5
 8019ea6:	f000 f97a 	bl	801a19e <SX1276SetOpMode>
}
 8019eaa:	e002      	b.n	8019eb2 <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8019eac:	2006      	movs	r0, #6
 8019eae:	f000 f976 	bl	801a19e <SX1276SetOpMode>
}
 8019eb2:	46c0      	nop			; (mov r8, r8)
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	b004      	add	sp, #16
 8019eb8:	bd80      	pop	{r7, pc}
 8019eba:	46c0      	nop			; (mov r8, r8)
 8019ebc:	200015a0 	.word	0x200015a0
 8019ec0:	20001538 	.word	0x20001538
 8019ec4:	0801e778 	.word	0x0801e778
 8019ec8:	00001e82 	.word	0x00001e82
 8019ecc:	000028b4 	.word	0x000028b4
 8019ed0:	00003d04 	.word	0x00003d04
 8019ed4:	0000515e 	.word	0x0000515e
 8019ed8:	00007a12 	.word	0x00007a12
 8019edc:	0000a2c6 	.word	0x0000a2c6
 8019ee0:	20001438 	.word	0x20001438
 8019ee4:	200015b8 	.word	0x200015b8
 8019ee8:	200015d0 	.word	0x200015d0

08019eec <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b082      	sub	sp, #8
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8019ef4:	4b38      	ldr	r3, [pc, #224]	; (8019fd8 <SX1276SetTx+0xec>)
 8019ef6:	0018      	movs	r0, r3
 8019ef8:	f002 f882 	bl	801c000 <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019efc:	687a      	ldr	r2, [r7, #4]
 8019efe:	4b37      	ldr	r3, [pc, #220]	; (8019fdc <SX1276SetTx+0xf0>)
 8019f00:	0011      	movs	r1, r2
 8019f02:	0018      	movs	r0, r3
 8019f04:	f002 f8f4 	bl	801c0f0 <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 8019f08:	4b35      	ldr	r3, [pc, #212]	; (8019fe0 <SX1276SetTx+0xf4>)
 8019f0a:	795b      	ldrb	r3, [r3, #5]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d002      	beq.n	8019f16 <SX1276SetTx+0x2a>
 8019f10:	2b01      	cmp	r3, #1
 8019f12:	d024      	beq.n	8019f5e <SX1276SetTx+0x72>
 8019f14:	e052      	b.n	8019fbc <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8019f16:	2040      	movs	r0, #64	; 0x40
 8019f18:	f000 fa19 	bl	801a34e <SX1276Read>
 8019f1c:	0003      	movs	r3, r0
 8019f1e:	001a      	movs	r2, r3
 8019f20:	2303      	movs	r3, #3
 8019f22:	4013      	ands	r3, r2
 8019f24:	b2db      	uxtb	r3, r3
 8019f26:	0019      	movs	r1, r3
 8019f28:	2040      	movs	r0, #64	; 0x40
 8019f2a:	f000 f9ff 	bl	801a32c <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8019f2e:	2041      	movs	r0, #65	; 0x41
 8019f30:	f000 fa0d 	bl	801a34e <SX1276Read>
 8019f34:	0003      	movs	r3, r0
 8019f36:	001a      	movs	r2, r3
 8019f38:	233e      	movs	r3, #62	; 0x3e
 8019f3a:	4013      	ands	r3, r2
 8019f3c:	b2db      	uxtb	r3, r3
 8019f3e:	0019      	movs	r1, r3
 8019f40:	2041      	movs	r0, #65	; 0x41
 8019f42:	f000 f9f3 	bl	801a32c <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8019f46:	2035      	movs	r0, #53	; 0x35
 8019f48:	f000 fa01 	bl	801a34e <SX1276Read>
 8019f4c:	0003      	movs	r3, r0
 8019f4e:	001a      	movs	r2, r3
 8019f50:	233f      	movs	r3, #63	; 0x3f
 8019f52:	4013      	ands	r3, r2
 8019f54:	b2d9      	uxtb	r1, r3
 8019f56:	4b22      	ldr	r3, [pc, #136]	; (8019fe0 <SX1276SetTx+0xf4>)
 8019f58:	223e      	movs	r2, #62	; 0x3e
 8019f5a:	5499      	strb	r1, [r3, r2]
        }
        break;
 8019f5c:	e02e      	b.n	8019fbc <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019f5e:	4b20      	ldr	r3, [pc, #128]	; (8019fe0 <SX1276SetTx+0xf4>)
 8019f60:	2253      	movs	r2, #83	; 0x53
 8019f62:	5c9b      	ldrb	r3, [r3, r2]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d014      	beq.n	8019f92 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8019f68:	21f5      	movs	r1, #245	; 0xf5
 8019f6a:	2011      	movs	r0, #17
 8019f6c:	f000 f9de 	bl	801a32c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8019f70:	2040      	movs	r0, #64	; 0x40
 8019f72:	f000 f9ec 	bl	801a34e <SX1276Read>
 8019f76:	0003      	movs	r3, r0
 8019f78:	b25b      	sxtb	r3, r3
 8019f7a:	2233      	movs	r2, #51	; 0x33
 8019f7c:	4013      	ands	r3, r2
 8019f7e:	b25b      	sxtb	r3, r3
 8019f80:	2240      	movs	r2, #64	; 0x40
 8019f82:	4313      	orrs	r3, r2
 8019f84:	b25b      	sxtb	r3, r3
 8019f86:	b2db      	uxtb	r3, r3
 8019f88:	0019      	movs	r1, r3
 8019f8a:	2040      	movs	r0, #64	; 0x40
 8019f8c:	f000 f9ce 	bl	801a32c <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8019f90:	e013      	b.n	8019fba <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8019f92:	21f7      	movs	r1, #247	; 0xf7
 8019f94:	2011      	movs	r0, #17
 8019f96:	f000 f9c9 	bl	801a32c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8019f9a:	2040      	movs	r0, #64	; 0x40
 8019f9c:	f000 f9d7 	bl	801a34e <SX1276Read>
 8019fa0:	0003      	movs	r3, r0
 8019fa2:	b25b      	sxtb	r3, r3
 8019fa4:	223f      	movs	r2, #63	; 0x3f
 8019fa6:	4013      	ands	r3, r2
 8019fa8:	b25b      	sxtb	r3, r3
 8019faa:	2240      	movs	r2, #64	; 0x40
 8019fac:	4313      	orrs	r3, r2
 8019fae:	b25b      	sxtb	r3, r3
 8019fb0:	b2db      	uxtb	r3, r3
 8019fb2:	0019      	movs	r1, r3
 8019fb4:	2040      	movs	r0, #64	; 0x40
 8019fb6:	f000 f9b9 	bl	801a32c <SX1276Write>
        break;
 8019fba:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8019fbc:	4b08      	ldr	r3, [pc, #32]	; (8019fe0 <SX1276SetTx+0xf4>)
 8019fbe:	2202      	movs	r2, #2
 8019fc0:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8019fc2:	4b06      	ldr	r3, [pc, #24]	; (8019fdc <SX1276SetTx+0xf0>)
 8019fc4:	0018      	movs	r0, r3
 8019fc6:	f001 ffa3 	bl	801bf10 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8019fca:	2003      	movs	r0, #3
 8019fcc:	f000 f8e7 	bl	801a19e <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 8019fd0:	46c0      	nop			; (mov r8, r8)
 8019fd2:	46bd      	mov	sp, r7
 8019fd4:	b002      	add	sp, #8
 8019fd6:	bd80      	pop	{r7, pc}
 8019fd8:	200015b8 	.word	0x200015b8
 8019fdc:	200015a0 	.word	0x200015a0
 8019fe0:	20001538 	.word	0x20001538

08019fe4 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8019fe4:	b580      	push	{r7, lr}
 8019fe6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8019fe8:	4b11      	ldr	r3, [pc, #68]	; (801a030 <SX1276StartCad+0x4c>)
 8019fea:	795b      	ldrb	r3, [r3, #5]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d01a      	beq.n	801a026 <SX1276StartCad+0x42>
 8019ff0:	2b01      	cmp	r3, #1
 8019ff2:	d000      	beq.n	8019ff6 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8019ff4:	e018      	b.n	801a028 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8019ff6:	21fa      	movs	r1, #250	; 0xfa
 8019ff8:	2011      	movs	r0, #17
 8019ffa:	f000 f997 	bl	801a32c <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8019ffe:	2040      	movs	r0, #64	; 0x40
 801a000:	f000 f9a5 	bl	801a34e <SX1276Read>
 801a004:	0003      	movs	r3, r0
 801a006:	001a      	movs	r2, r3
 801a008:	2303      	movs	r3, #3
 801a00a:	439a      	bics	r2, r3
 801a00c:	0013      	movs	r3, r2
 801a00e:	b2db      	uxtb	r3, r3
 801a010:	0019      	movs	r1, r3
 801a012:	2040      	movs	r0, #64	; 0x40
 801a014:	f000 f98a 	bl	801a32c <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801a018:	4b05      	ldr	r3, [pc, #20]	; (801a030 <SX1276StartCad+0x4c>)
 801a01a:	2203      	movs	r2, #3
 801a01c:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801a01e:	2007      	movs	r0, #7
 801a020:	f000 f8bd 	bl	801a19e <SX1276SetOpMode>
        break;
 801a024:	e000      	b.n	801a028 <SX1276StartCad+0x44>
        break;
 801a026:	46c0      	nop			; (mov r8, r8)
    }
}
 801a028:	46c0      	nop			; (mov r8, r8)
 801a02a:	46bd      	mov	sp, r7
 801a02c:	bd80      	pop	{r7, pc}
 801a02e:	46c0      	nop			; (mov r8, r8)
 801a030:	20001538 	.word	0x20001538

0801a034 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b08e      	sub	sp, #56	; 0x38
 801a038:	af0a      	add	r7, sp, #40	; 0x28
 801a03a:	6078      	str	r0, [r7, #4]
 801a03c:	0008      	movs	r0, r1
 801a03e:	0011      	movs	r1, r2
 801a040:	1cfb      	adds	r3, r7, #3
 801a042:	1c02      	adds	r2, r0, #0
 801a044:	701a      	strb	r2, [r3, #0]
 801a046:	003b      	movs	r3, r7
 801a048:	1c0a      	adds	r2, r1, #0
 801a04a:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801a04c:	003b      	movs	r3, r7
 801a04e:	881a      	ldrh	r2, [r3, #0]
 801a050:	0013      	movs	r3, r2
 801a052:	015b      	lsls	r3, r3, #5
 801a054:	1a9b      	subs	r3, r3, r2
 801a056:	009b      	lsls	r3, r3, #2
 801a058:	189b      	adds	r3, r3, r2
 801a05a:	00db      	lsls	r3, r3, #3
 801a05c:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	0018      	movs	r0, r3
 801a062:	f7fe fd3b 	bl	8018adc <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801a066:	1cfb      	adds	r3, r7, #3
 801a068:	2100      	movs	r1, #0
 801a06a:	5659      	ldrsb	r1, [r3, r1]
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	9308      	str	r3, [sp, #32]
 801a070:	2300      	movs	r3, #0
 801a072:	9307      	str	r3, [sp, #28]
 801a074:	2300      	movs	r3, #0
 801a076:	9306      	str	r3, [sp, #24]
 801a078:	2300      	movs	r3, #0
 801a07a:	9305      	str	r3, [sp, #20]
 801a07c:	2300      	movs	r3, #0
 801a07e:	9304      	str	r3, [sp, #16]
 801a080:	2300      	movs	r3, #0
 801a082:	9303      	str	r3, [sp, #12]
 801a084:	2305      	movs	r3, #5
 801a086:	9302      	str	r3, [sp, #8]
 801a088:	2300      	movs	r3, #0
 801a08a:	9301      	str	r3, [sp, #4]
 801a08c:	2396      	movs	r3, #150	; 0x96
 801a08e:	015b      	lsls	r3, r3, #5
 801a090:	9300      	str	r3, [sp, #0]
 801a092:	2300      	movs	r3, #0
 801a094:	2200      	movs	r2, #0
 801a096:	2000      	movs	r0, #0
 801a098:	f7ff f8e8 	bl	801926c <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801a09c:	2031      	movs	r0, #49	; 0x31
 801a09e:	f000 f956 	bl	801a34e <SX1276Read>
 801a0a2:	0003      	movs	r3, r0
 801a0a4:	001a      	movs	r2, r3
 801a0a6:	2340      	movs	r3, #64	; 0x40
 801a0a8:	439a      	bics	r2, r3
 801a0aa:	0013      	movs	r3, r2
 801a0ac:	b2db      	uxtb	r3, r3
 801a0ae:	0019      	movs	r1, r3
 801a0b0:	2031      	movs	r0, #49	; 0x31
 801a0b2:	f000 f93b 	bl	801a32c <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801a0b6:	21f0      	movs	r1, #240	; 0xf0
 801a0b8:	2040      	movs	r0, #64	; 0x40
 801a0ba:	f000 f937 	bl	801a32c <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801a0be:	21a0      	movs	r1, #160	; 0xa0
 801a0c0:	2041      	movs	r0, #65	; 0x41
 801a0c2:	f000 f933 	bl	801a32c <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a0c6:	68fa      	ldr	r2, [r7, #12]
 801a0c8:	4b09      	ldr	r3, [pc, #36]	; (801a0f0 <SX1276SetTxContinuousWave+0xbc>)
 801a0ca:	0011      	movs	r1, r2
 801a0cc:	0018      	movs	r0, r3
 801a0ce:	f002 f80f 	bl	801c0f0 <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801a0d2:	4b08      	ldr	r3, [pc, #32]	; (801a0f4 <SX1276SetTxContinuousWave+0xc0>)
 801a0d4:	2202      	movs	r2, #2
 801a0d6:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801a0d8:	4b05      	ldr	r3, [pc, #20]	; (801a0f0 <SX1276SetTxContinuousWave+0xbc>)
 801a0da:	0018      	movs	r0, r3
 801a0dc:	f001 ff18 	bl	801bf10 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801a0e0:	2003      	movs	r0, #3
 801a0e2:	f000 f85c 	bl	801a19e <SX1276SetOpMode>
}
 801a0e6:	46c0      	nop			; (mov r8, r8)
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	b004      	add	sp, #16
 801a0ec:	bd80      	pop	{r7, pc}
 801a0ee:	46c0      	nop			; (mov r8, r8)
 801a0f0:	200015a0 	.word	0x200015a0
 801a0f4:	20001538 	.word	0x20001538

0801a0f8 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b084      	sub	sp, #16
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	0002      	movs	r2, r0
 801a100:	1dfb      	adds	r3, r7, #7
 801a102:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801a104:	230e      	movs	r3, #14
 801a106:	18fb      	adds	r3, r7, r3
 801a108:	2200      	movs	r2, #0
 801a10a:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801a10c:	1dfb      	adds	r3, r7, #7
 801a10e:	781b      	ldrb	r3, [r3, #0]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d002      	beq.n	801a11a <SX1276ReadRssi+0x22>
 801a114:	2b01      	cmp	r3, #1
 801a116:	d00d      	beq.n	801a134 <SX1276ReadRssi+0x3c>
 801a118:	e027      	b.n	801a16a <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801a11a:	2011      	movs	r0, #17
 801a11c:	f000 f917 	bl	801a34e <SX1276Read>
 801a120:	0003      	movs	r3, r0
 801a122:	085b      	lsrs	r3, r3, #1
 801a124:	b2db      	uxtb	r3, r3
 801a126:	b29b      	uxth	r3, r3
 801a128:	425b      	negs	r3, r3
 801a12a:	b29a      	uxth	r2, r3
 801a12c:	230e      	movs	r3, #14
 801a12e:	18fb      	adds	r3, r7, r3
 801a130:	801a      	strh	r2, [r3, #0]
        break;
 801a132:	e020      	b.n	801a176 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801a134:	4b14      	ldr	r3, [pc, #80]	; (801a188 <SX1276ReadRssi+0x90>)
 801a136:	689b      	ldr	r3, [r3, #8]
 801a138:	4a14      	ldr	r2, [pc, #80]	; (801a18c <SX1276ReadRssi+0x94>)
 801a13a:	4293      	cmp	r3, r2
 801a13c:	d90a      	bls.n	801a154 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801a13e:	201b      	movs	r0, #27
 801a140:	f000 f905 	bl	801a34e <SX1276Read>
 801a144:	0003      	movs	r3, r0
 801a146:	b29b      	uxth	r3, r3
 801a148:	3b9d      	subs	r3, #157	; 0x9d
 801a14a:	b29a      	uxth	r2, r3
 801a14c:	230e      	movs	r3, #14
 801a14e:	18fb      	adds	r3, r7, r3
 801a150:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801a152:	e010      	b.n	801a176 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801a154:	201b      	movs	r0, #27
 801a156:	f000 f8fa 	bl	801a34e <SX1276Read>
 801a15a:	0003      	movs	r3, r0
 801a15c:	b29b      	uxth	r3, r3
 801a15e:	3ba4      	subs	r3, #164	; 0xa4
 801a160:	b29a      	uxth	r2, r3
 801a162:	230e      	movs	r3, #14
 801a164:	18fb      	adds	r3, r7, r3
 801a166:	801a      	strh	r2, [r3, #0]
        break;
 801a168:	e005      	b.n	801a176 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801a16a:	230e      	movs	r3, #14
 801a16c:	18fb      	adds	r3, r7, r3
 801a16e:	2201      	movs	r2, #1
 801a170:	4252      	negs	r2, r2
 801a172:	801a      	strh	r2, [r3, #0]
        break;
 801a174:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801a176:	230e      	movs	r3, #14
 801a178:	18fb      	adds	r3, r7, r3
 801a17a:	2200      	movs	r2, #0
 801a17c:	5e9b      	ldrsh	r3, [r3, r2]
}
 801a17e:	0018      	movs	r0, r3
 801a180:	46bd      	mov	sp, r7
 801a182:	b004      	add	sp, #16
 801a184:	bd80      	pop	{r7, pc}
 801a186:	46c0      	nop			; (mov r8, r8)
 801a188:	20001538 	.word	0x20001538
 801a18c:	1f4add40 	.word	0x1f4add40

0801a190 <SX1276Reset>:

static void SX1276Reset( void )
{
 801a190:	b580      	push	{r7, lr}
 801a192:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801a194:	f7eb faea 	bl	800576c <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801a198:	46c0      	nop			; (mov r8, r8)
 801a19a:	46bd      	mov	sp, r7
 801a19c:	bd80      	pop	{r7, pc}

0801a19e <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801a19e:	b5b0      	push	{r4, r5, r7, lr}
 801a1a0:	b084      	sub	sp, #16
 801a1a2:	af00      	add	r7, sp, #0
 801a1a4:	0002      	movs	r2, r0
 801a1a6:	1dfb      	adds	r3, r7, #7
 801a1a8:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801a1aa:	1dfb      	adds	r3, r7, #7
 801a1ac:	781b      	ldrb	r3, [r3, #0]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d118      	bne.n	801a1e4 <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a1b2:	2001      	movs	r0, #1
 801a1b4:	f000 f8cb 	bl	801a34e <SX1276Read>
 801a1b8:	0003      	movs	r3, r0
 801a1ba:	b25b      	sxtb	r3, r3
 801a1bc:	2207      	movs	r2, #7
 801a1be:	4393      	bics	r3, r2
 801a1c0:	b25a      	sxtb	r2, r3
 801a1c2:	1dfb      	adds	r3, r7, #7
 801a1c4:	781b      	ldrb	r3, [r3, #0]
 801a1c6:	b25b      	sxtb	r3, r3
 801a1c8:	4313      	orrs	r3, r2
 801a1ca:	b25b      	sxtb	r3, r3
 801a1cc:	b2db      	uxtb	r3, r3
 801a1ce:	0019      	movs	r1, r3
 801a1d0:	2001      	movs	r0, #1
 801a1d2:	f000 f8ab 	bl	801a32c <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801a1d6:	2000      	movs	r0, #0
 801a1d8:	f7eb fa68 	bl	80056ac <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801a1dc:	2000      	movs	r0, #0
 801a1de:	f7eb f8a7 	bl	8005330 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801a1e2:	e044      	b.n	801a26e <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801a1e4:	1dfb      	adds	r3, r7, #7
 801a1e6:	781b      	ldrb	r3, [r3, #0]
 801a1e8:	2b05      	cmp	r3, #5
 801a1ea:	d118      	bne.n	801a21e <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801a1ec:	2001      	movs	r0, #1
 801a1ee:	f7eb f89f 	bl	8005330 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801a1f2:	2001      	movs	r0, #1
 801a1f4:	f7eb fa5a 	bl	80056ac <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a1f8:	2001      	movs	r0, #1
 801a1fa:	f000 f8a8 	bl	801a34e <SX1276Read>
 801a1fe:	0003      	movs	r3, r0
 801a200:	b25b      	sxtb	r3, r3
 801a202:	2207      	movs	r2, #7
 801a204:	4393      	bics	r3, r2
 801a206:	b25a      	sxtb	r2, r3
 801a208:	1dfb      	adds	r3, r7, #7
 801a20a:	781b      	ldrb	r3, [r3, #0]
 801a20c:	b25b      	sxtb	r3, r3
 801a20e:	4313      	orrs	r3, r2
 801a210:	b25b      	sxtb	r3, r3
 801a212:	b2db      	uxtb	r3, r3
 801a214:	0019      	movs	r1, r3
 801a216:	2001      	movs	r0, #1
 801a218:	f000 f888 	bl	801a32c <SX1276Write>
}
 801a21c:	e027      	b.n	801a26e <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801a21e:	250f      	movs	r5, #15
 801a220:	197c      	adds	r4, r7, r5
 801a222:	2009      	movs	r0, #9
 801a224:	f000 f893 	bl	801a34e <SX1276Read>
 801a228:	0003      	movs	r3, r0
 801a22a:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801a22c:	2001      	movs	r0, #1
 801a22e:	f7eb f87f 	bl	8005330 <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a232:	197b      	adds	r3, r7, r5
 801a234:	781b      	ldrb	r3, [r3, #0]
 801a236:	b25b      	sxtb	r3, r3
 801a238:	2b00      	cmp	r3, #0
 801a23a:	da03      	bge.n	801a244 <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801a23c:	2003      	movs	r0, #3
 801a23e:	f7eb fa35 	bl	80056ac <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801a242:	e002      	b.n	801a24a <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801a244:	2002      	movs	r0, #2
 801a246:	f7eb fa31 	bl	80056ac <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801a24a:	2001      	movs	r0, #1
 801a24c:	f000 f87f 	bl	801a34e <SX1276Read>
 801a250:	0003      	movs	r3, r0
 801a252:	b25b      	sxtb	r3, r3
 801a254:	2207      	movs	r2, #7
 801a256:	4393      	bics	r3, r2
 801a258:	b25a      	sxtb	r2, r3
 801a25a:	1dfb      	adds	r3, r7, #7
 801a25c:	781b      	ldrb	r3, [r3, #0]
 801a25e:	b25b      	sxtb	r3, r3
 801a260:	4313      	orrs	r3, r2
 801a262:	b25b      	sxtb	r3, r3
 801a264:	b2db      	uxtb	r3, r3
 801a266:	0019      	movs	r1, r3
 801a268:	2001      	movs	r0, #1
 801a26a:	f000 f85f 	bl	801a32c <SX1276Write>
}
 801a26e:	46c0      	nop			; (mov r8, r8)
 801a270:	46bd      	mov	sp, r7
 801a272:	b004      	add	sp, #16
 801a274:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a278 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b082      	sub	sp, #8
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	0002      	movs	r2, r0
 801a280:	1dfb      	adds	r3, r7, #7
 801a282:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801a284:	2001      	movs	r0, #1
 801a286:	f000 f862 	bl	801a34e <SX1276Read>
 801a28a:	0003      	movs	r3, r0
 801a28c:	b25b      	sxtb	r3, r3
 801a28e:	2b00      	cmp	r3, #0
 801a290:	da03      	bge.n	801a29a <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801a292:	4b25      	ldr	r3, [pc, #148]	; (801a328 <SX1276SetModem+0xb0>)
 801a294:	2201      	movs	r2, #1
 801a296:	715a      	strb	r2, [r3, #5]
 801a298:	e002      	b.n	801a2a0 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801a29a:	4b23      	ldr	r3, [pc, #140]	; (801a328 <SX1276SetModem+0xb0>)
 801a29c:	2200      	movs	r2, #0
 801a29e:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801a2a0:	4b21      	ldr	r3, [pc, #132]	; (801a328 <SX1276SetModem+0xb0>)
 801a2a2:	795b      	ldrb	r3, [r3, #5]
 801a2a4:	1dfa      	adds	r2, r7, #7
 801a2a6:	7812      	ldrb	r2, [r2, #0]
 801a2a8:	429a      	cmp	r2, r3
 801a2aa:	d038      	beq.n	801a31e <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801a2ac:	4b1e      	ldr	r3, [pc, #120]	; (801a328 <SX1276SetModem+0xb0>)
 801a2ae:	1dfa      	adds	r2, r7, #7
 801a2b0:	7812      	ldrb	r2, [r2, #0]
 801a2b2:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801a2b4:	4b1c      	ldr	r3, [pc, #112]	; (801a328 <SX1276SetModem+0xb0>)
 801a2b6:	795b      	ldrb	r3, [r3, #5]
 801a2b8:	2b01      	cmp	r3, #1
 801a2ba:	d017      	beq.n	801a2ec <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a2bc:	2000      	movs	r0, #0
 801a2be:	f7ff ff6e 	bl	801a19e <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801a2c2:	2001      	movs	r0, #1
 801a2c4:	f000 f843 	bl	801a34e <SX1276Read>
 801a2c8:	0003      	movs	r3, r0
 801a2ca:	001a      	movs	r2, r3
 801a2cc:	237f      	movs	r3, #127	; 0x7f
 801a2ce:	4013      	ands	r3, r2
 801a2d0:	b2db      	uxtb	r3, r3
 801a2d2:	0019      	movs	r1, r3
 801a2d4:	2001      	movs	r0, #1
 801a2d6:	f000 f829 	bl	801a32c <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801a2da:	2100      	movs	r1, #0
 801a2dc:	2040      	movs	r0, #64	; 0x40
 801a2de:	f000 f825 	bl	801a32c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801a2e2:	2130      	movs	r1, #48	; 0x30
 801a2e4:	2041      	movs	r0, #65	; 0x41
 801a2e6:	f000 f821 	bl	801a32c <SX1276Write>
        break;
 801a2ea:	e019      	b.n	801a320 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a2ec:	2000      	movs	r0, #0
 801a2ee:	f7ff ff56 	bl	801a19e <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801a2f2:	2001      	movs	r0, #1
 801a2f4:	f000 f82b 	bl	801a34e <SX1276Read>
 801a2f8:	0003      	movs	r3, r0
 801a2fa:	001a      	movs	r2, r3
 801a2fc:	2380      	movs	r3, #128	; 0x80
 801a2fe:	425b      	negs	r3, r3
 801a300:	4313      	orrs	r3, r2
 801a302:	b2db      	uxtb	r3, r3
 801a304:	0019      	movs	r1, r3
 801a306:	2001      	movs	r0, #1
 801a308:	f000 f810 	bl	801a32c <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801a30c:	2100      	movs	r1, #0
 801a30e:	2040      	movs	r0, #64	; 0x40
 801a310:	f000 f80c 	bl	801a32c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801a314:	2100      	movs	r1, #0
 801a316:	2041      	movs	r0, #65	; 0x41
 801a318:	f000 f808 	bl	801a32c <SX1276Write>
        break;
 801a31c:	e000      	b.n	801a320 <SX1276SetModem+0xa8>
        return;
 801a31e:	46c0      	nop			; (mov r8, r8)
    }
}
 801a320:	46bd      	mov	sp, r7
 801a322:	b002      	add	sp, #8
 801a324:	bd80      	pop	{r7, pc}
 801a326:	46c0      	nop			; (mov r8, r8)
 801a328:	20001538 	.word	0x20001538

0801a32c <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b082      	sub	sp, #8
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
 801a334:	000a      	movs	r2, r1
 801a336:	1cfb      	adds	r3, r7, #3
 801a338:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801a33a:	1cf9      	adds	r1, r7, #3
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	2201      	movs	r2, #1
 801a340:	0018      	movs	r0, r3
 801a342:	f000 f815 	bl	801a370 <SX1276WriteBuffer>
}
 801a346:	46c0      	nop			; (mov r8, r8)
 801a348:	46bd      	mov	sp, r7
 801a34a:	b002      	add	sp, #8
 801a34c:	bd80      	pop	{r7, pc}

0801a34e <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801a34e:	b590      	push	{r4, r7, lr}
 801a350:	b085      	sub	sp, #20
 801a352:	af00      	add	r7, sp, #0
 801a354:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801a356:	240f      	movs	r4, #15
 801a358:	1939      	adds	r1, r7, r4
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	2201      	movs	r2, #1
 801a35e:	0018      	movs	r0, r3
 801a360:	f000 f83a 	bl	801a3d8 <SX1276ReadBuffer>
    return data;
 801a364:	193b      	adds	r3, r7, r4
 801a366:	781b      	ldrb	r3, [r3, #0]
}
 801a368:	0018      	movs	r0, r3
 801a36a:	46bd      	mov	sp, r7
 801a36c:	b005      	add	sp, #20
 801a36e:	bd90      	pop	{r4, r7, pc}

0801a370 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801a370:	b590      	push	{r4, r7, lr}
 801a372:	b087      	sub	sp, #28
 801a374:	af00      	add	r7, sp, #0
 801a376:	60f8      	str	r0, [r7, #12]
 801a378:	60b9      	str	r1, [r7, #8]
 801a37a:	1dfb      	adds	r3, r7, #7
 801a37c:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801a37e:	2000      	movs	r0, #0
 801a380:	f7eb fa46 	bl	8005810 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	b29b      	uxth	r3, r3
 801a388:	2280      	movs	r2, #128	; 0x80
 801a38a:	4313      	orrs	r3, r2
 801a38c:	b29b      	uxth	r3, r3
 801a38e:	0018      	movs	r0, r3
 801a390:	f7eb fa2b 	bl	80057ea <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801a394:	2317      	movs	r3, #23
 801a396:	18fb      	adds	r3, r7, r3
 801a398:	2200      	movs	r2, #0
 801a39a:	701a      	strb	r2, [r3, #0]
 801a39c:	e00e      	b.n	801a3bc <SX1276WriteBuffer+0x4c>
    {
        Sx_Board_SendRecv( buffer[i] );
 801a39e:	2417      	movs	r4, #23
 801a3a0:	193b      	adds	r3, r7, r4
 801a3a2:	781b      	ldrb	r3, [r3, #0]
 801a3a4:	68ba      	ldr	r2, [r7, #8]
 801a3a6:	18d3      	adds	r3, r2, r3
 801a3a8:	781b      	ldrb	r3, [r3, #0]
 801a3aa:	b29b      	uxth	r3, r3
 801a3ac:	0018      	movs	r0, r3
 801a3ae:	f7eb fa1c 	bl	80057ea <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801a3b2:	193b      	adds	r3, r7, r4
 801a3b4:	781a      	ldrb	r2, [r3, #0]
 801a3b6:	193b      	adds	r3, r7, r4
 801a3b8:	3201      	adds	r2, #1
 801a3ba:	701a      	strb	r2, [r3, #0]
 801a3bc:	2317      	movs	r3, #23
 801a3be:	18fa      	adds	r2, r7, r3
 801a3c0:	1dfb      	adds	r3, r7, #7
 801a3c2:	7812      	ldrb	r2, [r2, #0]
 801a3c4:	781b      	ldrb	r3, [r3, #0]
 801a3c6:	429a      	cmp	r2, r3
 801a3c8:	d3e9      	bcc.n	801a39e <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801a3ca:	2001      	movs	r0, #1
 801a3cc:	f7eb fa20 	bl	8005810 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801a3d0:	46c0      	nop			; (mov r8, r8)
 801a3d2:	46bd      	mov	sp, r7
 801a3d4:	b007      	add	sp, #28
 801a3d6:	bd90      	pop	{r4, r7, pc}

0801a3d8 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801a3d8:	b580      	push	{r7, lr}
 801a3da:	b086      	sub	sp, #24
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	60f8      	str	r0, [r7, #12]
 801a3e0:	60b9      	str	r1, [r7, #8]
 801a3e2:	1dfb      	adds	r3, r7, #7
 801a3e4:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801a3e6:	2000      	movs	r0, #0
 801a3e8:	f7eb fa12 	bl	8005810 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	b29b      	uxth	r3, r3
 801a3f0:	227f      	movs	r2, #127	; 0x7f
 801a3f2:	4013      	ands	r3, r2
 801a3f4:	b29b      	uxth	r3, r3
 801a3f6:	0018      	movs	r0, r3
 801a3f8:	f7eb f9f7 	bl	80057ea <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801a3fc:	2317      	movs	r3, #23
 801a3fe:	18fb      	adds	r3, r7, r3
 801a400:	2200      	movs	r2, #0
 801a402:	701a      	strb	r2, [r3, #0]
 801a404:	e010      	b.n	801a428 <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801a406:	2000      	movs	r0, #0
 801a408:	f7eb f9ef 	bl	80057ea <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801a40c:	0003      	movs	r3, r0
 801a40e:	0019      	movs	r1, r3
 801a410:	2017      	movs	r0, #23
 801a412:	183b      	adds	r3, r7, r0
 801a414:	781b      	ldrb	r3, [r3, #0]
 801a416:	68ba      	ldr	r2, [r7, #8]
 801a418:	18d3      	adds	r3, r2, r3
 801a41a:	b2ca      	uxtb	r2, r1
 801a41c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a41e:	183b      	adds	r3, r7, r0
 801a420:	781a      	ldrb	r2, [r3, #0]
 801a422:	183b      	adds	r3, r7, r0
 801a424:	3201      	adds	r2, #1
 801a426:	701a      	strb	r2, [r3, #0]
 801a428:	2317      	movs	r3, #23
 801a42a:	18fa      	adds	r2, r7, r3
 801a42c:	1dfb      	adds	r3, r7, #7
 801a42e:	7812      	ldrb	r2, [r2, #0]
 801a430:	781b      	ldrb	r3, [r3, #0]
 801a432:	429a      	cmp	r2, r3
 801a434:	d3e7      	bcc.n	801a406 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801a436:	2001      	movs	r0, #1
 801a438:	f7eb f9ea 	bl	8005810 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801a43c:	46c0      	nop			; (mov r8, r8)
 801a43e:	46bd      	mov	sp, r7
 801a440:	b006      	add	sp, #24
 801a442:	bd80      	pop	{r7, pc}

0801a444 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801a444:	b580      	push	{r7, lr}
 801a446:	b082      	sub	sp, #8
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
 801a44c:	000a      	movs	r2, r1
 801a44e:	1cfb      	adds	r3, r7, #3
 801a450:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801a452:	1cfb      	adds	r3, r7, #3
 801a454:	781a      	ldrb	r2, [r3, #0]
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	0019      	movs	r1, r3
 801a45a:	2000      	movs	r0, #0
 801a45c:	f7ff ff88 	bl	801a370 <SX1276WriteBuffer>
}
 801a460:	46c0      	nop			; (mov r8, r8)
 801a462:	46bd      	mov	sp, r7
 801a464:	b002      	add	sp, #8
 801a466:	bd80      	pop	{r7, pc}

0801a468 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b082      	sub	sp, #8
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
 801a470:	000a      	movs	r2, r1
 801a472:	1cfb      	adds	r3, r7, #3
 801a474:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801a476:	1cfb      	adds	r3, r7, #3
 801a478:	781a      	ldrb	r2, [r3, #0]
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	0019      	movs	r1, r3
 801a47e:	2000      	movs	r0, #0
 801a480:	f7ff ffaa 	bl	801a3d8 <SX1276ReadBuffer>
}
 801a484:	46c0      	nop			; (mov r8, r8)
 801a486:	46bd      	mov	sp, r7
 801a488:	b002      	add	sp, #8
 801a48a:	bd80      	pop	{r7, pc}

0801a48c <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b082      	sub	sp, #8
 801a490:	af00      	add	r7, sp, #0
 801a492:	0002      	movs	r2, r0
 801a494:	1dfb      	adds	r3, r7, #7
 801a496:	701a      	strb	r2, [r3, #0]
 801a498:	1dbb      	adds	r3, r7, #6
 801a49a:	1c0a      	adds	r2, r1, #0
 801a49c:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801a49e:	1dfb      	adds	r3, r7, #7
 801a4a0:	781b      	ldrb	r3, [r3, #0]
 801a4a2:	0018      	movs	r0, r3
 801a4a4:	f7ff fee8 	bl	801a278 <SX1276SetModem>

    switch( modem )
 801a4a8:	1dfb      	adds	r3, r7, #7
 801a4aa:	781b      	ldrb	r3, [r3, #0]
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d002      	beq.n	801a4b6 <SX1276SetMaxPayloadLength+0x2a>
 801a4b0:	2b01      	cmp	r3, #1
 801a4b2:	d00f      	beq.n	801a4d4 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801a4b4:	e016      	b.n	801a4e4 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801a4b6:	4b0d      	ldr	r3, [pc, #52]	; (801a4ec <SX1276SetMaxPayloadLength+0x60>)
 801a4b8:	2222      	movs	r2, #34	; 0x22
 801a4ba:	5c9b      	ldrb	r3, [r3, r2]
 801a4bc:	2201      	movs	r2, #1
 801a4be:	4053      	eors	r3, r2
 801a4c0:	b2db      	uxtb	r3, r3
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d00d      	beq.n	801a4e2 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801a4c6:	1dbb      	adds	r3, r7, #6
 801a4c8:	781b      	ldrb	r3, [r3, #0]
 801a4ca:	0019      	movs	r1, r3
 801a4cc:	2032      	movs	r0, #50	; 0x32
 801a4ce:	f7ff ff2d 	bl	801a32c <SX1276Write>
        break;
 801a4d2:	e006      	b.n	801a4e2 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801a4d4:	1dbb      	adds	r3, r7, #6
 801a4d6:	781b      	ldrb	r3, [r3, #0]
 801a4d8:	0019      	movs	r1, r3
 801a4da:	2023      	movs	r0, #35	; 0x23
 801a4dc:	f7ff ff26 	bl	801a32c <SX1276Write>
        break;
 801a4e0:	e000      	b.n	801a4e4 <SX1276SetMaxPayloadLength+0x58>
        break;
 801a4e2:	46c0      	nop			; (mov r8, r8)
}
 801a4e4:	46c0      	nop			; (mov r8, r8)
 801a4e6:	46bd      	mov	sp, r7
 801a4e8:	b002      	add	sp, #8
 801a4ea:	bd80      	pop	{r7, pc}
 801a4ec:	20001538 	.word	0x20001538

0801a4f0 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b082      	sub	sp, #8
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	0002      	movs	r2, r0
 801a4f8:	1dfb      	adds	r3, r7, #7
 801a4fa:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801a4fc:	2001      	movs	r0, #1
 801a4fe:	f7ff febb 	bl	801a278 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801a502:	4b0b      	ldr	r3, [pc, #44]	; (801a530 <SX1276SetPublicNetwork+0x40>)
 801a504:	1dfa      	adds	r2, r7, #7
 801a506:	215c      	movs	r1, #92	; 0x5c
 801a508:	7812      	ldrb	r2, [r2, #0]
 801a50a:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801a50c:	1dfb      	adds	r3, r7, #7
 801a50e:	781b      	ldrb	r3, [r3, #0]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d004      	beq.n	801a51e <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801a514:	2134      	movs	r1, #52	; 0x34
 801a516:	2039      	movs	r0, #57	; 0x39
 801a518:	f7ff ff08 	bl	801a32c <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801a51c:	e003      	b.n	801a526 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801a51e:	2112      	movs	r1, #18
 801a520:	2039      	movs	r0, #57	; 0x39
 801a522:	f7ff ff03 	bl	801a32c <SX1276Write>
}
 801a526:	46c0      	nop			; (mov r8, r8)
 801a528:	46bd      	mov	sp, r7
 801a52a:	b002      	add	sp, #8
 801a52c:	bd80      	pop	{r7, pc}
 801a52e:	46c0      	nop			; (mov r8, r8)
 801a530:	20001538 	.word	0x20001538

0801a534 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801a534:	b580      	push	{r7, lr}
 801a536:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801a538:	f7ea fef4 	bl	8005324 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801a53c:	0003      	movs	r3, r0
 801a53e:	3302      	adds	r3, #2
}
 801a540:	0018      	movs	r0, r3
 801a542:	46bd      	mov	sp, r7
 801a544:	bd80      	pop	{r7, pc}
	...

0801a548 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801a548:	b580      	push	{r7, lr}
 801a54a:	b084      	sub	sp, #16
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801a550:	230f      	movs	r3, #15
 801a552:	18fb      	adds	r3, r7, r3
 801a554:	2200      	movs	r2, #0
 801a556:	701a      	strb	r2, [r3, #0]
 801a558:	e01f      	b.n	801a59a <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801a55a:	210f      	movs	r1, #15
 801a55c:	187b      	adds	r3, r7, r1
 801a55e:	781a      	ldrb	r2, [r3, #0]
 801a560:	4b13      	ldr	r3, [pc, #76]	; (801a5b0 <GetFskBandwidthRegValue+0x68>)
 801a562:	00d2      	lsls	r2, r2, #3
 801a564:	58d3      	ldr	r3, [r2, r3]
 801a566:	687a      	ldr	r2, [r7, #4]
 801a568:	429a      	cmp	r2, r3
 801a56a:	d310      	bcc.n	801a58e <GetFskBandwidthRegValue+0x46>
 801a56c:	187b      	adds	r3, r7, r1
 801a56e:	781b      	ldrb	r3, [r3, #0]
 801a570:	1c5a      	adds	r2, r3, #1
 801a572:	4b0f      	ldr	r3, [pc, #60]	; (801a5b0 <GetFskBandwidthRegValue+0x68>)
 801a574:	00d2      	lsls	r2, r2, #3
 801a576:	58d3      	ldr	r3, [r2, r3]
 801a578:	687a      	ldr	r2, [r7, #4]
 801a57a:	429a      	cmp	r2, r3
 801a57c:	d207      	bcs.n	801a58e <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801a57e:	187b      	adds	r3, r7, r1
 801a580:	781b      	ldrb	r3, [r3, #0]
 801a582:	4a0b      	ldr	r2, [pc, #44]	; (801a5b0 <GetFskBandwidthRegValue+0x68>)
 801a584:	00db      	lsls	r3, r3, #3
 801a586:	18d3      	adds	r3, r2, r3
 801a588:	3304      	adds	r3, #4
 801a58a:	781b      	ldrb	r3, [r3, #0]
 801a58c:	e00b      	b.n	801a5a6 <GetFskBandwidthRegValue+0x5e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801a58e:	210f      	movs	r1, #15
 801a590:	187b      	adds	r3, r7, r1
 801a592:	781a      	ldrb	r2, [r3, #0]
 801a594:	187b      	adds	r3, r7, r1
 801a596:	3201      	adds	r2, #1
 801a598:	701a      	strb	r2, [r3, #0]
 801a59a:	230f      	movs	r3, #15
 801a59c:	18fb      	adds	r3, r7, r3
 801a59e:	781b      	ldrb	r3, [r3, #0]
 801a5a0:	2b14      	cmp	r3, #20
 801a5a2:	d9da      	bls.n	801a55a <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801a5a4:	e7fe      	b.n	801a5a4 <GetFskBandwidthRegValue+0x5c>
}
 801a5a6:	0018      	movs	r0, r3
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	b004      	add	sp, #16
 801a5ac:	bd80      	pop	{r7, pc}
 801a5ae:	46c0      	nop			; (mov r8, r8)
 801a5b0:	0801e6c8 	.word	0x0801e6c8

0801a5b4 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b084      	sub	sp, #16
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801a5bc:	2300      	movs	r3, #0
 801a5be:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	2b03      	cmp	r3, #3
 801a5c4:	d018      	beq.n	801a5f8 <SX1276GetLoRaBandwidthInHz+0x44>
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	2b03      	cmp	r3, #3
 801a5ca:	d818      	bhi.n	801a5fe <SX1276GetLoRaBandwidthInHz+0x4a>
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	2b02      	cmp	r3, #2
 801a5d0:	d00f      	beq.n	801a5f2 <SX1276GetLoRaBandwidthInHz+0x3e>
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	2b02      	cmp	r3, #2
 801a5d6:	d812      	bhi.n	801a5fe <SX1276GetLoRaBandwidthInHz+0x4a>
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d003      	beq.n	801a5e6 <SX1276GetLoRaBandwidthInHz+0x32>
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	2b01      	cmp	r3, #1
 801a5e2:	d003      	beq.n	801a5ec <SX1276GetLoRaBandwidthInHz+0x38>
 801a5e4:	e00b      	b.n	801a5fe <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801a5e6:	4b08      	ldr	r3, [pc, #32]	; (801a608 <SX1276GetLoRaBandwidthInHz+0x54>)
 801a5e8:	60fb      	str	r3, [r7, #12]
        break;
 801a5ea:	e008      	b.n	801a5fe <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801a5ec:	4b07      	ldr	r3, [pc, #28]	; (801a60c <SX1276GetLoRaBandwidthInHz+0x58>)
 801a5ee:	60fb      	str	r3, [r7, #12]
        break;
 801a5f0:	e005      	b.n	801a5fe <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801a5f2:	4b07      	ldr	r3, [pc, #28]	; (801a610 <SX1276GetLoRaBandwidthInHz+0x5c>)
 801a5f4:	60fb      	str	r3, [r7, #12]
        break;
 801a5f6:	e002      	b.n	801a5fe <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801a5f8:	4b06      	ldr	r3, [pc, #24]	; (801a614 <SX1276GetLoRaBandwidthInHz+0x60>)
 801a5fa:	60fb      	str	r3, [r7, #12]
            break;
 801a5fc:	46c0      	nop			; (mov r8, r8)
    }

    return bandwidthInHz;
 801a5fe:	68fb      	ldr	r3, [r7, #12]
}
 801a600:	0018      	movs	r0, r3
 801a602:	46bd      	mov	sp, r7
 801a604:	b004      	add	sp, #16
 801a606:	bd80      	pop	{r7, pc}
 801a608:	0001e848 	.word	0x0001e848
 801a60c:	0003d090 	.word	0x0003d090
 801a610:	0007a120 	.word	0x0007a120
 801a614:	0000f424 	.word	0x0000f424

0801a618 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801a618:	b5b0      	push	{r4, r5, r7, lr}
 801a61a:	b084      	sub	sp, #16
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	0005      	movs	r5, r0
 801a620:	000c      	movs	r4, r1
 801a622:	0010      	movs	r0, r2
 801a624:	0019      	movs	r1, r3
 801a626:	1dbb      	adds	r3, r7, #6
 801a628:	1c2a      	adds	r2, r5, #0
 801a62a:	801a      	strh	r2, [r3, #0]
 801a62c:	1d7b      	adds	r3, r7, #5
 801a62e:	1c22      	adds	r2, r4, #0
 801a630:	701a      	strb	r2, [r3, #0]
 801a632:	1d3b      	adds	r3, r7, #4
 801a634:	1c02      	adds	r2, r0, #0
 801a636:	701a      	strb	r2, [r3, #0]
 801a638:	1cfb      	adds	r3, r7, #3
 801a63a:	1c0a      	adds	r2, r1, #0
 801a63c:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801a63e:	230f      	movs	r3, #15
 801a640:	18fb      	adds	r3, r7, r3
 801a642:	2203      	movs	r2, #3
 801a644:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801a646:	1dbb      	adds	r3, r7, #6
 801a648:	881b      	ldrh	r3, [r3, #0]
 801a64a:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801a64c:	1d7b      	adds	r3, r7, #5
 801a64e:	781b      	ldrb	r3, [r3, #0]
 801a650:	2101      	movs	r1, #1
 801a652:	404b      	eors	r3, r1
 801a654:	b2db      	uxtb	r3, r3
 801a656:	2b00      	cmp	r3, #0
 801a658:	d001      	beq.n	801a65e <SX1276GetGfskTimeOnAirNumerator+0x46>
 801a65a:	2308      	movs	r3, #8
 801a65c:	e000      	b.n	801a660 <SX1276GetGfskTimeOnAirNumerator+0x48>
 801a65e:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801a660:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801a662:	230f      	movs	r3, #15
 801a664:	18fb      	adds	r3, r7, r3
 801a666:	781b      	ldrb	r3, [r3, #0]
 801a668:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801a66a:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801a66c:	1d3b      	adds	r3, r7, #4
 801a66e:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801a670:	1cfb      	adds	r3, r7, #3
 801a672:	781b      	ldrb	r3, [r3, #0]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d001      	beq.n	801a67c <SX1276GetGfskTimeOnAirNumerator+0x64>
 801a678:	2302      	movs	r3, #2
 801a67a:	e000      	b.n	801a67e <SX1276GetGfskTimeOnAirNumerator+0x66>
 801a67c:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801a67e:	185b      	adds	r3, r3, r1
               ) << 3 
 801a680:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801a682:	18d3      	adds	r3, r2, r3
             );
}
 801a684:	0018      	movs	r0, r3
 801a686:	46bd      	mov	sp, r7
 801a688:	b004      	add	sp, #16
 801a68a:	bdb0      	pop	{r4, r5, r7, pc}

0801a68c <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b08a      	sub	sp, #40	; 0x28
 801a690:	af00      	add	r7, sp, #0
 801a692:	60f8      	str	r0, [r7, #12]
 801a694:	60b9      	str	r1, [r7, #8]
 801a696:	0019      	movs	r1, r3
 801a698:	1dfb      	adds	r3, r7, #7
 801a69a:	701a      	strb	r2, [r3, #0]
 801a69c:	1d3b      	adds	r3, r7, #4
 801a69e:	1c0a      	adds	r2, r1, #0
 801a6a0:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801a6a2:	1dfb      	adds	r3, r7, #7
 801a6a4:	781b      	ldrb	r3, [r3, #0]
 801a6a6:	3304      	adds	r3, #4
 801a6a8:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a6aa:	2327      	movs	r3, #39	; 0x27
 801a6ac:	18fb      	adds	r3, r7, r3
 801a6ae:	2200      	movs	r2, #0
 801a6b0:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a6b2:	68bb      	ldr	r3, [r7, #8]
 801a6b4:	2b05      	cmp	r3, #5
 801a6b6:	d002      	beq.n	801a6be <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801a6b8:	68bb      	ldr	r3, [r7, #8]
 801a6ba:	2b06      	cmp	r3, #6
 801a6bc:	d106      	bne.n	801a6cc <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801a6be:	1d3b      	adds	r3, r7, #4
 801a6c0:	881b      	ldrh	r3, [r3, #0]
 801a6c2:	2b0b      	cmp	r3, #11
 801a6c4:	d802      	bhi.n	801a6cc <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801a6c6:	1d3b      	adds	r3, r7, #4
 801a6c8:	220c      	movs	r2, #12
 801a6ca:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d105      	bne.n	801a6de <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801a6d2:	68bb      	ldr	r3, [r7, #8]
 801a6d4:	2b0b      	cmp	r3, #11
 801a6d6:	d008      	beq.n	801a6ea <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801a6d8:	68bb      	ldr	r3, [r7, #8]
 801a6da:	2b0c      	cmp	r3, #12
 801a6dc:	d005      	beq.n	801a6ea <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	2b01      	cmp	r3, #1
 801a6e2:	d106      	bne.n	801a6f2 <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a6e4:	68bb      	ldr	r3, [r7, #8]
 801a6e6:	2b0c      	cmp	r3, #12
 801a6e8:	d103      	bne.n	801a6f2 <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801a6ea:	2327      	movs	r3, #39	; 0x27
 801a6ec:	18fb      	adds	r3, r7, r3
 801a6ee:	2201      	movs	r2, #1
 801a6f0:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a6f2:	2334      	movs	r3, #52	; 0x34
 801a6f4:	18fb      	adds	r3, r7, r3
 801a6f6:	781b      	ldrb	r3, [r3, #0]
 801a6f8:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a6fa:	2338      	movs	r3, #56	; 0x38
 801a6fc:	18fb      	adds	r3, r7, r3
 801a6fe:	781b      	ldrb	r3, [r3, #0]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d001      	beq.n	801a708 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801a704:	2310      	movs	r3, #16
 801a706:	e000      	b.n	801a70a <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801a708:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a70a:	189b      	adds	r3, r3, r2
 801a70c:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801a70e:	68bb      	ldr	r3, [r7, #8]
 801a710:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a712:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801a714:	2330      	movs	r3, #48	; 0x30
 801a716:	18fb      	adds	r3, r7, r3
 801a718:	781b      	ldrb	r3, [r3, #0]
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d001      	beq.n	801a722 <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801a71e:	2300      	movs	r3, #0
 801a720:	e000      	b.n	801a724 <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801a722:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801a724:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a726:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a728:	68bb      	ldr	r3, [r7, #8]
 801a72a:	2b06      	cmp	r3, #6
 801a72c:	d803      	bhi.n	801a736 <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801a72e:	68bb      	ldr	r3, [r7, #8]
 801a730:	009b      	lsls	r3, r3, #2
 801a732:	623b      	str	r3, [r7, #32]
 801a734:	e00f      	b.n	801a756 <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801a736:	69fb      	ldr	r3, [r7, #28]
 801a738:	3308      	adds	r3, #8
 801a73a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a73c:	2327      	movs	r3, #39	; 0x27
 801a73e:	18fb      	adds	r3, r7, r3
 801a740:	781b      	ldrb	r3, [r3, #0]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d004      	beq.n	801a750 <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a746:	68bb      	ldr	r3, [r7, #8]
 801a748:	3b02      	subs	r3, #2
 801a74a:	009b      	lsls	r3, r3, #2
 801a74c:	623b      	str	r3, [r7, #32]
 801a74e:	e002      	b.n	801a756 <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a750:	68bb      	ldr	r3, [r7, #8]
 801a752:	009b      	lsls	r3, r3, #2
 801a754:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a756:	69fb      	ldr	r3, [r7, #28]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	da01      	bge.n	801a760 <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801a75c:	2300      	movs	r3, #0
 801a75e:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a760:	69fa      	ldr	r2, [r7, #28]
 801a762:	6a3b      	ldr	r3, [r7, #32]
 801a764:	18d3      	adds	r3, r2, r3
 801a766:	3b01      	subs	r3, #1
 801a768:	6a39      	ldr	r1, [r7, #32]
 801a76a:	0018      	movs	r0, r3
 801a76c:	f7e5 fd5e 	bl	800022c <__divsi3>
 801a770:	0003      	movs	r3, r0
 801a772:	001a      	movs	r2, r3
 801a774:	697b      	ldr	r3, [r7, #20]
 801a776:	435a      	muls	r2, r3
 801a778:	1d3b      	adds	r3, r7, #4
 801a77a:	881b      	ldrh	r3, [r3, #0]
 801a77c:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801a77e:	330c      	adds	r3, #12
 801a780:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a782:	68bb      	ldr	r3, [r7, #8]
 801a784:	2b06      	cmp	r3, #6
 801a786:	d802      	bhi.n	801a78e <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801a788:	69bb      	ldr	r3, [r7, #24]
 801a78a:	3302      	adds	r3, #2
 801a78c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a78e:	69bb      	ldr	r3, [r7, #24]
 801a790:	009b      	lsls	r3, r3, #2
 801a792:	1c5a      	adds	r2, r3, #1
 801a794:	68bb      	ldr	r3, [r7, #8]
 801a796:	3b02      	subs	r3, #2
 801a798:	409a      	lsls	r2, r3
 801a79a:	0013      	movs	r3, r2
}
 801a79c:	0018      	movs	r0, r3
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	b00a      	add	sp, #40	; 0x28
 801a7a2:	bd80      	pop	{r7, pc}

0801a7a4 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801a7a4:	b590      	push	{r4, r7, lr}
 801a7a6:	b085      	sub	sp, #20
 801a7a8:	af00      	add	r7, sp, #0
 801a7aa:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801a7ac:	4b4f      	ldr	r3, [pc, #316]	; (801a8ec <SX1276OnTimeoutIrq+0x148>)
 801a7ae:	791b      	ldrb	r3, [r3, #4]
 801a7b0:	2b01      	cmp	r3, #1
 801a7b2:	d002      	beq.n	801a7ba <SX1276OnTimeoutIrq+0x16>
 801a7b4:	2b02      	cmp	r3, #2
 801a7b6:	d041      	beq.n	801a83c <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801a7b8:	e094      	b.n	801a8e4 <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801a7ba:	4b4c      	ldr	r3, [pc, #304]	; (801a8ec <SX1276OnTimeoutIrq+0x148>)
 801a7bc:	795b      	ldrb	r3, [r3, #5]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d12e      	bne.n	801a820 <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a7c2:	4b4a      	ldr	r3, [pc, #296]	; (801a8ec <SX1276OnTimeoutIrq+0x148>)
 801a7c4:	2230      	movs	r2, #48	; 0x30
 801a7c6:	2100      	movs	r1, #0
 801a7c8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a7ca:	4b48      	ldr	r3, [pc, #288]	; (801a8ec <SX1276OnTimeoutIrq+0x148>)
 801a7cc:	2231      	movs	r2, #49	; 0x31
 801a7ce:	2100      	movs	r1, #0
 801a7d0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a7d2:	4b46      	ldr	r3, [pc, #280]	; (801a8ec <SX1276OnTimeoutIrq+0x148>)
 801a7d4:	2200      	movs	r2, #0
 801a7d6:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801a7d8:	4b44      	ldr	r3, [pc, #272]	; (801a8ec <SX1276OnTimeoutIrq+0x148>)
 801a7da:	2200      	movs	r2, #0
 801a7dc:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801a7de:	210b      	movs	r1, #11
 801a7e0:	203e      	movs	r0, #62	; 0x3e
 801a7e2:	f7ff fda3 	bl	801a32c <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801a7e6:	2110      	movs	r1, #16
 801a7e8:	203f      	movs	r0, #63	; 0x3f
 801a7ea:	f7ff fd9f 	bl	801a32c <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801a7ee:	4b3f      	ldr	r3, [pc, #252]	; (801a8ec <SX1276OnTimeoutIrq+0x148>)
 801a7f0:	2226      	movs	r2, #38	; 0x26
 801a7f2:	5c9b      	ldrb	r3, [r3, r2]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d00c      	beq.n	801a812 <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801a7f8:	200d      	movs	r0, #13
 801a7fa:	f7ff fda8 	bl	801a34e <SX1276Read>
 801a7fe:	0003      	movs	r3, r0
 801a800:	001a      	movs	r2, r3
 801a802:	2340      	movs	r3, #64	; 0x40
 801a804:	4313      	orrs	r3, r2
 801a806:	b2db      	uxtb	r3, r3
 801a808:	0019      	movs	r1, r3
 801a80a:	200d      	movs	r0, #13
 801a80c:	f7ff fd8e 	bl	801a32c <SX1276Write>
 801a810:	e006      	b.n	801a820 <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801a812:	4b36      	ldr	r3, [pc, #216]	; (801a8ec <SX1276OnTimeoutIrq+0x148>)
 801a814:	2200      	movs	r2, #0
 801a816:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801a818:	4b35      	ldr	r3, [pc, #212]	; (801a8f0 <SX1276OnTimeoutIrq+0x14c>)
 801a81a:	0018      	movs	r0, r3
 801a81c:	f001 fbf0 	bl	801c000 <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a820:	4b34      	ldr	r3, [pc, #208]	; (801a8f4 <SX1276OnTimeoutIrq+0x150>)
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	2b00      	cmp	r3, #0
 801a826:	d05a      	beq.n	801a8de <SX1276OnTimeoutIrq+0x13a>
 801a828:	4b32      	ldr	r3, [pc, #200]	; (801a8f4 <SX1276OnTimeoutIrq+0x150>)
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	68db      	ldr	r3, [r3, #12]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d055      	beq.n	801a8de <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801a832:	4b30      	ldr	r3, [pc, #192]	; (801a8f4 <SX1276OnTimeoutIrq+0x150>)
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	68db      	ldr	r3, [r3, #12]
 801a838:	4798      	blx	r3
        break;
 801a83a:	e050      	b.n	801a8de <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801a83c:	f7ff fca8 	bl	801a190 <SX1276Reset>
        RxChainCalibration( );
 801a840:	f7fe fa24 	bl	8018c8c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a844:	2000      	movs	r0, #0
 801a846:	f7ff fcaa 	bl	801a19e <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801a84a:	230f      	movs	r3, #15
 801a84c:	18fb      	adds	r3, r7, r3
 801a84e:	2200      	movs	r2, #0
 801a850:	701a      	strb	r2, [r3, #0]
 801a852:	e025      	b.n	801a8a0 <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801a854:	240f      	movs	r4, #15
 801a856:	193b      	adds	r3, r7, r4
 801a858:	781a      	ldrb	r2, [r3, #0]
 801a85a:	4927      	ldr	r1, [pc, #156]	; (801a8f8 <SX1276OnTimeoutIrq+0x154>)
 801a85c:	0013      	movs	r3, r2
 801a85e:	005b      	lsls	r3, r3, #1
 801a860:	189b      	adds	r3, r3, r2
 801a862:	5c5b      	ldrb	r3, [r3, r1]
 801a864:	0018      	movs	r0, r3
 801a866:	f7ff fd07 	bl	801a278 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801a86a:	193b      	adds	r3, r7, r4
 801a86c:	781a      	ldrb	r2, [r3, #0]
 801a86e:	4922      	ldr	r1, [pc, #136]	; (801a8f8 <SX1276OnTimeoutIrq+0x154>)
 801a870:	0013      	movs	r3, r2
 801a872:	005b      	lsls	r3, r3, #1
 801a874:	189b      	adds	r3, r3, r2
 801a876:	18cb      	adds	r3, r1, r3
 801a878:	3301      	adds	r3, #1
 801a87a:	781b      	ldrb	r3, [r3, #0]
 801a87c:	0018      	movs	r0, r3
 801a87e:	193b      	adds	r3, r7, r4
 801a880:	781a      	ldrb	r2, [r3, #0]
 801a882:	491d      	ldr	r1, [pc, #116]	; (801a8f8 <SX1276OnTimeoutIrq+0x154>)
 801a884:	0013      	movs	r3, r2
 801a886:	005b      	lsls	r3, r3, #1
 801a888:	189b      	adds	r3, r3, r2
 801a88a:	18cb      	adds	r3, r1, r3
 801a88c:	3302      	adds	r3, #2
 801a88e:	781b      	ldrb	r3, [r3, #0]
 801a890:	0019      	movs	r1, r3
 801a892:	f7ff fd4b 	bl	801a32c <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801a896:	193b      	adds	r3, r7, r4
 801a898:	781a      	ldrb	r2, [r3, #0]
 801a89a:	193b      	adds	r3, r7, r4
 801a89c:	3201      	adds	r2, #1
 801a89e:	701a      	strb	r2, [r3, #0]
 801a8a0:	230f      	movs	r3, #15
 801a8a2:	18fb      	adds	r3, r7, r3
 801a8a4:	781b      	ldrb	r3, [r3, #0]
 801a8a6:	2b0f      	cmp	r3, #15
 801a8a8:	d9d4      	bls.n	801a854 <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801a8aa:	2000      	movs	r0, #0
 801a8ac:	f7ff fce4 	bl	801a278 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801a8b0:	4b0e      	ldr	r3, [pc, #56]	; (801a8ec <SX1276OnTimeoutIrq+0x148>)
 801a8b2:	225c      	movs	r2, #92	; 0x5c
 801a8b4:	5c9b      	ldrb	r3, [r3, r2]
 801a8b6:	0018      	movs	r0, r3
 801a8b8:	f7ff fe1a 	bl	801a4f0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801a8bc:	4b0b      	ldr	r3, [pc, #44]	; (801a8ec <SX1276OnTimeoutIrq+0x148>)
 801a8be:	2200      	movs	r2, #0
 801a8c0:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a8c2:	4b0c      	ldr	r3, [pc, #48]	; (801a8f4 <SX1276OnTimeoutIrq+0x150>)
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d00b      	beq.n	801a8e2 <SX1276OnTimeoutIrq+0x13e>
 801a8ca:	4b0a      	ldr	r3, [pc, #40]	; (801a8f4 <SX1276OnTimeoutIrq+0x150>)
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	685b      	ldr	r3, [r3, #4]
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d006      	beq.n	801a8e2 <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801a8d4:	4b07      	ldr	r3, [pc, #28]	; (801a8f4 <SX1276OnTimeoutIrq+0x150>)
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	685b      	ldr	r3, [r3, #4]
 801a8da:	4798      	blx	r3
        break;
 801a8dc:	e001      	b.n	801a8e2 <SX1276OnTimeoutIrq+0x13e>
        break;
 801a8de:	46c0      	nop			; (mov r8, r8)
 801a8e0:	e000      	b.n	801a8e4 <SX1276OnTimeoutIrq+0x140>
        break;
 801a8e2:	46c0      	nop			; (mov r8, r8)
    }
}
 801a8e4:	46c0      	nop			; (mov r8, r8)
 801a8e6:	46bd      	mov	sp, r7
 801a8e8:	b005      	add	sp, #20
 801a8ea:	bd90      	pop	{r4, r7, pc}
 801a8ec:	20001538 	.word	0x20001538
 801a8f0:	200015d0 	.word	0x200015d0
 801a8f4:	20001434 	.word	0x20001434
 801a8f8:	0801e698 	.word	0x0801e698

0801a8fc <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801a8fc:	b590      	push	{r4, r7, lr}
 801a8fe:	b083      	sub	sp, #12
 801a900:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801a902:	1d7b      	adds	r3, r7, #5
 801a904:	2200      	movs	r2, #0
 801a906:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801a908:	4bc3      	ldr	r3, [pc, #780]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a90a:	791b      	ldrb	r3, [r3, #4]
 801a90c:	2b01      	cmp	r3, #1
 801a90e:	d003      	beq.n	801a918 <SX1276OnDio0Irq+0x1c>
 801a910:	2b02      	cmp	r3, #2
 801a912:	d100      	bne.n	801a916 <SX1276OnDio0Irq+0x1a>
 801a914:	e1e2      	b.n	801acdc <SX1276OnDio0Irq+0x3e0>
                }
                break;
            }
            break;
        default:
            break;
 801a916:	e1ff      	b.n	801ad18 <SX1276OnDio0Irq+0x41c>
            switch( SX1276.Settings.Modem )
 801a918:	4bbf      	ldr	r3, [pc, #764]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a91a:	795b      	ldrb	r3, [r3, #5]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d003      	beq.n	801a928 <SX1276OnDio0Irq+0x2c>
 801a920:	2b01      	cmp	r3, #1
 801a922:	d100      	bne.n	801a926 <SX1276OnDio0Irq+0x2a>
 801a924:	e0e2      	b.n	801aaec <SX1276OnDio0Irq+0x1f0>
                break;
 801a926:	e1d8      	b.n	801acda <SX1276OnDio0Irq+0x3de>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801a928:	4bbb      	ldr	r3, [pc, #748]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a92a:	2224      	movs	r2, #36	; 0x24
 801a92c:	5c9b      	ldrb	r3, [r3, r2]
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d052      	beq.n	801a9d8 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801a932:	203f      	movs	r0, #63	; 0x3f
 801a934:	f7ff fd0b 	bl	801a34e <SX1276Read>
 801a938:	0003      	movs	r3, r0
 801a93a:	001a      	movs	r2, r3
 801a93c:	1d7b      	adds	r3, r7, #5
 801a93e:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801a940:	1d7b      	adds	r3, r7, #5
 801a942:	781b      	ldrb	r3, [r3, #0]
 801a944:	b2db      	uxtb	r3, r3
 801a946:	001a      	movs	r2, r3
 801a948:	2302      	movs	r3, #2
 801a94a:	4013      	ands	r3, r2
 801a94c:	2b02      	cmp	r3, #2
 801a94e:	d043      	beq.n	801a9d8 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801a950:	210b      	movs	r1, #11
 801a952:	203e      	movs	r0, #62	; 0x3e
 801a954:	f7ff fcea 	bl	801a32c <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801a958:	2110      	movs	r1, #16
 801a95a:	203f      	movs	r0, #63	; 0x3f
 801a95c:	f7ff fce6 	bl	801a32c <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801a960:	4bae      	ldr	r3, [pc, #696]	; (801ac1c <SX1276OnDio0Irq+0x320>)
 801a962:	0018      	movs	r0, r3
 801a964:	f001 fb4c 	bl	801c000 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801a968:	4bab      	ldr	r3, [pc, #684]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a96a:	2226      	movs	r2, #38	; 0x26
 801a96c:	5c9b      	ldrb	r3, [r3, r2]
 801a96e:	2201      	movs	r2, #1
 801a970:	4053      	eors	r3, r2
 801a972:	b2db      	uxtb	r3, r3
 801a974:	2b00      	cmp	r3, #0
 801a976:	d007      	beq.n	801a988 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801a978:	4ba9      	ldr	r3, [pc, #676]	; (801ac20 <SX1276OnDio0Irq+0x324>)
 801a97a:	0018      	movs	r0, r3
 801a97c:	f001 fb40 	bl	801c000 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801a980:	4ba5      	ldr	r3, [pc, #660]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a982:	2200      	movs	r2, #0
 801a984:	711a      	strb	r2, [r3, #4]
 801a986:	e00b      	b.n	801a9a0 <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801a988:	200d      	movs	r0, #13
 801a98a:	f7ff fce0 	bl	801a34e <SX1276Read>
 801a98e:	0003      	movs	r3, r0
 801a990:	001a      	movs	r2, r3
 801a992:	2340      	movs	r3, #64	; 0x40
 801a994:	4313      	orrs	r3, r2
 801a996:	b2db      	uxtb	r3, r3
 801a998:	0019      	movs	r1, r3
 801a99a:	200d      	movs	r0, #13
 801a99c:	f7ff fcc6 	bl	801a32c <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801a9a0:	4ba0      	ldr	r3, [pc, #640]	; (801ac24 <SX1276OnDio0Irq+0x328>)
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d008      	beq.n	801a9ba <SX1276OnDio0Irq+0xbe>
 801a9a8:	4b9e      	ldr	r3, [pc, #632]	; (801ac24 <SX1276OnDio0Irq+0x328>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	691b      	ldr	r3, [r3, #16]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d003      	beq.n	801a9ba <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801a9b2:	4b9c      	ldr	r3, [pc, #624]	; (801ac24 <SX1276OnDio0Irq+0x328>)
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	691b      	ldr	r3, [r3, #16]
 801a9b8:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a9ba:	4b97      	ldr	r3, [pc, #604]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a9bc:	2230      	movs	r2, #48	; 0x30
 801a9be:	2100      	movs	r1, #0
 801a9c0:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a9c2:	4b95      	ldr	r3, [pc, #596]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a9c4:	2231      	movs	r2, #49	; 0x31
 801a9c6:	2100      	movs	r1, #0
 801a9c8:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a9ca:	4b93      	ldr	r3, [pc, #588]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801a9d0:	4b91      	ldr	r3, [pc, #580]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801a9d6:	e180      	b.n	801acda <SX1276OnDio0Irq+0x3de>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801a9d8:	4b8f      	ldr	r3, [pc, #572]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a9da:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d12d      	bne.n	801aa3c <SX1276OnDio0Irq+0x140>
 801a9e0:	4b8d      	ldr	r3, [pc, #564]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a9e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d129      	bne.n	801aa3c <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801a9e8:	4b8b      	ldr	r3, [pc, #556]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801a9ea:	2222      	movs	r2, #34	; 0x22
 801a9ec:	5c9b      	ldrb	r3, [r3, r2]
 801a9ee:	2201      	movs	r2, #1
 801a9f0:	4053      	eors	r3, r2
 801a9f2:	b2db      	uxtb	r3, r3
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d005      	beq.n	801aa04 <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801a9f8:	4b8b      	ldr	r3, [pc, #556]	; (801ac28 <SX1276OnDio0Irq+0x32c>)
 801a9fa:	2101      	movs	r1, #1
 801a9fc:	0018      	movs	r0, r3
 801a9fe:	f7ff fd33 	bl	801a468 <SX1276ReadFifo>
 801aa02:	e006      	b.n	801aa12 <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801aa04:	2032      	movs	r0, #50	; 0x32
 801aa06:	f7ff fca2 	bl	801a34e <SX1276Read>
 801aa0a:	0003      	movs	r3, r0
 801aa0c:	b29a      	uxth	r2, r3
 801aa0e:	4b82      	ldr	r3, [pc, #520]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa10:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801aa12:	4b81      	ldr	r3, [pc, #516]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa14:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801aa16:	001a      	movs	r2, r3
 801aa18:	4b84      	ldr	r3, [pc, #528]	; (801ac2c <SX1276OnDio0Irq+0x330>)
 801aa1a:	18d0      	adds	r0, r2, r3
 801aa1c:	4b7e      	ldr	r3, [pc, #504]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa1e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801aa20:	b2da      	uxtb	r2, r3
 801aa22:	4b7d      	ldr	r3, [pc, #500]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa24:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801aa26:	b2db      	uxtb	r3, r3
 801aa28:	1ad3      	subs	r3, r2, r3
 801aa2a:	b2db      	uxtb	r3, r3
 801aa2c:	0019      	movs	r1, r3
 801aa2e:	f7ff fd1b 	bl	801a468 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801aa32:	4b79      	ldr	r3, [pc, #484]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa34:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801aa36:	4b78      	ldr	r3, [pc, #480]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa38:	879a      	strh	r2, [r3, #60]	; 0x3c
 801aa3a:	e013      	b.n	801aa64 <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801aa3c:	4b76      	ldr	r3, [pc, #472]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa3e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801aa40:	001a      	movs	r2, r3
 801aa42:	4b7a      	ldr	r3, [pc, #488]	; (801ac2c <SX1276OnDio0Irq+0x330>)
 801aa44:	18d0      	adds	r0, r2, r3
 801aa46:	4b74      	ldr	r3, [pc, #464]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa48:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801aa4a:	b2da      	uxtb	r2, r3
 801aa4c:	4b72      	ldr	r3, [pc, #456]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa4e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801aa50:	b2db      	uxtb	r3, r3
 801aa52:	1ad3      	subs	r3, r2, r3
 801aa54:	b2db      	uxtb	r3, r3
 801aa56:	0019      	movs	r1, r3
 801aa58:	f7ff fd06 	bl	801a468 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801aa5c:	4b6e      	ldr	r3, [pc, #440]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa5e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801aa60:	4b6d      	ldr	r3, [pc, #436]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa62:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801aa64:	4b6d      	ldr	r3, [pc, #436]	; (801ac1c <SX1276OnDio0Irq+0x320>)
 801aa66:	0018      	movs	r0, r3
 801aa68:	f001 faca 	bl	801c000 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801aa6c:	4b6a      	ldr	r3, [pc, #424]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa6e:	2226      	movs	r2, #38	; 0x26
 801aa70:	5c9b      	ldrb	r3, [r3, r2]
 801aa72:	2201      	movs	r2, #1
 801aa74:	4053      	eors	r3, r2
 801aa76:	b2db      	uxtb	r3, r3
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d007      	beq.n	801aa8c <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801aa7c:	4b66      	ldr	r3, [pc, #408]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aa7e:	2200      	movs	r2, #0
 801aa80:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801aa82:	4b67      	ldr	r3, [pc, #412]	; (801ac20 <SX1276OnDio0Irq+0x324>)
 801aa84:	0018      	movs	r0, r3
 801aa86:	f001 fabb 	bl	801c000 <UTIL_TIMER_Stop>
 801aa8a:	e00b      	b.n	801aaa4 <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801aa8c:	200d      	movs	r0, #13
 801aa8e:	f7ff fc5e 	bl	801a34e <SX1276Read>
 801aa92:	0003      	movs	r3, r0
 801aa94:	001a      	movs	r2, r3
 801aa96:	2340      	movs	r3, #64	; 0x40
 801aa98:	4313      	orrs	r3, r2
 801aa9a:	b2db      	uxtb	r3, r3
 801aa9c:	0019      	movs	r1, r3
 801aa9e:	200d      	movs	r0, #13
 801aaa0:	f7ff fc44 	bl	801a32c <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801aaa4:	4b5f      	ldr	r3, [pc, #380]	; (801ac24 <SX1276OnDio0Irq+0x328>)
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d010      	beq.n	801aace <SX1276OnDio0Irq+0x1d2>
 801aaac:	4b5d      	ldr	r3, [pc, #372]	; (801ac24 <SX1276OnDio0Irq+0x328>)
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	689b      	ldr	r3, [r3, #8]
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d00b      	beq.n	801aace <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801aab6:	4b5b      	ldr	r3, [pc, #364]	; (801ac24 <SX1276OnDio0Irq+0x328>)
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	689c      	ldr	r4, [r3, #8]
 801aabc:	4b56      	ldr	r3, [pc, #344]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aabe:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801aac0:	4b55      	ldr	r3, [pc, #340]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aac2:	2232      	movs	r2, #50	; 0x32
 801aac4:	569b      	ldrsb	r3, [r3, r2]
 801aac6:	b21a      	sxth	r2, r3
 801aac8:	4858      	ldr	r0, [pc, #352]	; (801ac2c <SX1276OnDio0Irq+0x330>)
 801aaca:	2300      	movs	r3, #0
 801aacc:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801aace:	4b52      	ldr	r3, [pc, #328]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aad0:	2230      	movs	r2, #48	; 0x30
 801aad2:	2100      	movs	r1, #0
 801aad4:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801aad6:	4b50      	ldr	r3, [pc, #320]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aad8:	2231      	movs	r2, #49	; 0x31
 801aada:	2100      	movs	r1, #0
 801aadc:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801aade:	4b4e      	ldr	r3, [pc, #312]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aae0:	2200      	movs	r2, #0
 801aae2:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801aae4:	4b4c      	ldr	r3, [pc, #304]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aae6:	2200      	movs	r2, #0
 801aae8:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801aaea:	e0f6      	b.n	801acda <SX1276OnDio0Irq+0x3de>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801aaec:	2140      	movs	r1, #64	; 0x40
 801aaee:	2012      	movs	r0, #18
 801aaf0:	f7ff fc1c 	bl	801a32c <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801aaf4:	2012      	movs	r0, #18
 801aaf6:	f7ff fc2a 	bl	801a34e <SX1276Read>
 801aafa:	0003      	movs	r3, r0
 801aafc:	001a      	movs	r2, r3
 801aafe:	1d7b      	adds	r3, r7, #5
 801ab00:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801ab02:	1d7b      	adds	r3, r7, #5
 801ab04:	781b      	ldrb	r3, [r3, #0]
 801ab06:	b2db      	uxtb	r3, r3
 801ab08:	001a      	movs	r2, r3
 801ab0a:	2320      	movs	r3, #32
 801ab0c:	4013      	ands	r3, r2
 801ab0e:	2b20      	cmp	r3, #32
 801ab10:	d122      	bne.n	801ab58 <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801ab12:	2120      	movs	r1, #32
 801ab14:	2012      	movs	r0, #18
 801ab16:	f7ff fc09 	bl	801a32c <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801ab1a:	4b3f      	ldr	r3, [pc, #252]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801ab1c:	2256      	movs	r2, #86	; 0x56
 801ab1e:	5c9b      	ldrb	r3, [r3, r2]
 801ab20:	2201      	movs	r2, #1
 801ab22:	4053      	eors	r3, r2
 801ab24:	b2db      	uxtb	r3, r3
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d002      	beq.n	801ab30 <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801ab2a:	4b3b      	ldr	r3, [pc, #236]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801ab2c:	2200      	movs	r2, #0
 801ab2e:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801ab30:	4b3a      	ldr	r3, [pc, #232]	; (801ac1c <SX1276OnDio0Irq+0x320>)
 801ab32:	0018      	movs	r0, r3
 801ab34:	f001 fa64 	bl	801c000 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801ab38:	4b3a      	ldr	r3, [pc, #232]	; (801ac24 <SX1276OnDio0Irq+0x328>)
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d100      	bne.n	801ab42 <SX1276OnDio0Irq+0x246>
 801ab40:	e0c8      	b.n	801acd4 <SX1276OnDio0Irq+0x3d8>
 801ab42:	4b38      	ldr	r3, [pc, #224]	; (801ac24 <SX1276OnDio0Irq+0x328>)
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	691b      	ldr	r3, [r3, #16]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d100      	bne.n	801ab4e <SX1276OnDio0Irq+0x252>
 801ab4c:	e0c2      	b.n	801acd4 <SX1276OnDio0Irq+0x3d8>
                            RadioEvents->RxError( );
 801ab4e:	4b35      	ldr	r3, [pc, #212]	; (801ac24 <SX1276OnDio0Irq+0x328>)
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	691b      	ldr	r3, [r3, #16]
 801ab54:	4798      	blx	r3
                        break;
 801ab56:	e0bd      	b.n	801acd4 <SX1276OnDio0Irq+0x3d8>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801ab58:	2019      	movs	r0, #25
 801ab5a:	f7ff fbf8 	bl	801a34e <SX1276Read>
 801ab5e:	0003      	movs	r3, r0
 801ab60:	b25b      	sxtb	r3, r3
 801ab62:	3302      	adds	r3, #2
 801ab64:	109b      	asrs	r3, r3, #2
 801ab66:	b259      	sxtb	r1, r3
 801ab68:	4b2b      	ldr	r3, [pc, #172]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801ab6a:	2260      	movs	r2, #96	; 0x60
 801ab6c:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801ab6e:	201a      	movs	r0, #26
 801ab70:	f7ff fbed 	bl	801a34e <SX1276Read>
 801ab74:	0003      	movs	r3, r0
 801ab76:	001a      	movs	r2, r3
 801ab78:	1dbb      	adds	r3, r7, #6
 801ab7a:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801ab7c:	4b26      	ldr	r3, [pc, #152]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801ab7e:	2260      	movs	r2, #96	; 0x60
 801ab80:	569b      	ldrsb	r3, [r3, r2]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	da32      	bge.n	801abec <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801ab86:	4b24      	ldr	r3, [pc, #144]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801ab88:	689b      	ldr	r3, [r3, #8]
 801ab8a:	4a29      	ldr	r2, [pc, #164]	; (801ac30 <SX1276OnDio0Irq+0x334>)
 801ab8c:	4293      	cmp	r3, r2
 801ab8e:	d916      	bls.n	801abbe <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801ab90:	1dbb      	adds	r3, r7, #6
 801ab92:	2200      	movs	r2, #0
 801ab94:	5e9b      	ldrsh	r3, [r3, r2]
 801ab96:	111b      	asrs	r3, r3, #4
 801ab98:	b21b      	sxth	r3, r3
 801ab9a:	b29a      	uxth	r2, r3
 801ab9c:	1dbb      	adds	r3, r7, #6
 801ab9e:	881b      	ldrh	r3, [r3, #0]
 801aba0:	18d3      	adds	r3, r2, r3
 801aba2:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801aba4:	4b1c      	ldr	r3, [pc, #112]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801aba6:	2160      	movs	r1, #96	; 0x60
 801aba8:	565b      	ldrsb	r3, [r3, r1]
 801abaa:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801abac:	18d3      	adds	r3, r2, r3
 801abae:	b29b      	uxth	r3, r3
 801abb0:	3b9d      	subs	r3, #157	; 0x9d
 801abb2:	b29b      	uxth	r3, r3
 801abb4:	b219      	sxth	r1, r3
 801abb6:	4b18      	ldr	r3, [pc, #96]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801abb8:	2262      	movs	r2, #98	; 0x62
 801abba:	5299      	strh	r1, [r3, r2]
 801abbc:	e04a      	b.n	801ac54 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801abbe:	1dbb      	adds	r3, r7, #6
 801abc0:	2200      	movs	r2, #0
 801abc2:	5e9b      	ldrsh	r3, [r3, r2]
 801abc4:	111b      	asrs	r3, r3, #4
 801abc6:	b21b      	sxth	r3, r3
 801abc8:	b29a      	uxth	r2, r3
 801abca:	1dbb      	adds	r3, r7, #6
 801abcc:	881b      	ldrh	r3, [r3, #0]
 801abce:	18d3      	adds	r3, r2, r3
 801abd0:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801abd2:	4b11      	ldr	r3, [pc, #68]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801abd4:	2160      	movs	r1, #96	; 0x60
 801abd6:	565b      	ldrsb	r3, [r3, r1]
 801abd8:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801abda:	18d3      	adds	r3, r2, r3
 801abdc:	b29b      	uxth	r3, r3
 801abde:	3ba4      	subs	r3, #164	; 0xa4
 801abe0:	b29b      	uxth	r3, r3
 801abe2:	b219      	sxth	r1, r3
 801abe4:	4b0c      	ldr	r3, [pc, #48]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801abe6:	2262      	movs	r2, #98	; 0x62
 801abe8:	5299      	strh	r1, [r3, r2]
 801abea:	e033      	b.n	801ac54 <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801abec:	4b0a      	ldr	r3, [pc, #40]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801abee:	689b      	ldr	r3, [r3, #8]
 801abf0:	4a0f      	ldr	r2, [pc, #60]	; (801ac30 <SX1276OnDio0Irq+0x334>)
 801abf2:	4293      	cmp	r3, r2
 801abf4:	d91e      	bls.n	801ac34 <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801abf6:	1dbb      	adds	r3, r7, #6
 801abf8:	2200      	movs	r2, #0
 801abfa:	5e9b      	ldrsh	r3, [r3, r2]
 801abfc:	111b      	asrs	r3, r3, #4
 801abfe:	b21b      	sxth	r3, r3
 801ac00:	b29a      	uxth	r2, r3
 801ac02:	1dbb      	adds	r3, r7, #6
 801ac04:	881b      	ldrh	r3, [r3, #0]
 801ac06:	18d3      	adds	r3, r2, r3
 801ac08:	b29b      	uxth	r3, r3
 801ac0a:	3b9d      	subs	r3, #157	; 0x9d
 801ac0c:	b29b      	uxth	r3, r3
 801ac0e:	b219      	sxth	r1, r3
 801ac10:	4b01      	ldr	r3, [pc, #4]	; (801ac18 <SX1276OnDio0Irq+0x31c>)
 801ac12:	2262      	movs	r2, #98	; 0x62
 801ac14:	5299      	strh	r1, [r3, r2]
 801ac16:	e01d      	b.n	801ac54 <SX1276OnDio0Irq+0x358>
 801ac18:	20001538 	.word	0x20001538
 801ac1c:	200015b8 	.word	0x200015b8
 801ac20:	200015d0 	.word	0x200015d0
 801ac24:	20001434 	.word	0x20001434
 801ac28:	20001572 	.word	0x20001572
 801ac2c:	20001438 	.word	0x20001438
 801ac30:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801ac34:	1dbb      	adds	r3, r7, #6
 801ac36:	2200      	movs	r2, #0
 801ac38:	5e9b      	ldrsh	r3, [r3, r2]
 801ac3a:	111b      	asrs	r3, r3, #4
 801ac3c:	b21b      	sxth	r3, r3
 801ac3e:	b29a      	uxth	r2, r3
 801ac40:	1dbb      	adds	r3, r7, #6
 801ac42:	881b      	ldrh	r3, [r3, #0]
 801ac44:	18d3      	adds	r3, r2, r3
 801ac46:	b29b      	uxth	r3, r3
 801ac48:	3ba4      	subs	r3, #164	; 0xa4
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	b219      	sxth	r1, r3
 801ac4e:	4b34      	ldr	r3, [pc, #208]	; (801ad20 <SX1276OnDio0Irq+0x424>)
 801ac50:	2262      	movs	r2, #98	; 0x62
 801ac52:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801ac54:	2013      	movs	r0, #19
 801ac56:	f7ff fb7a 	bl	801a34e <SX1276Read>
 801ac5a:	0003      	movs	r3, r0
 801ac5c:	0019      	movs	r1, r3
 801ac5e:	4b30      	ldr	r3, [pc, #192]	; (801ad20 <SX1276OnDio0Irq+0x424>)
 801ac60:	2264      	movs	r2, #100	; 0x64
 801ac62:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801ac64:	2010      	movs	r0, #16
 801ac66:	f7ff fb72 	bl	801a34e <SX1276Read>
 801ac6a:	0003      	movs	r3, r0
 801ac6c:	0019      	movs	r1, r3
 801ac6e:	200d      	movs	r0, #13
 801ac70:	f7ff fb5c 	bl	801a32c <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801ac74:	4b2a      	ldr	r3, [pc, #168]	; (801ad20 <SX1276OnDio0Irq+0x424>)
 801ac76:	2264      	movs	r2, #100	; 0x64
 801ac78:	5c9a      	ldrb	r2, [r3, r2]
 801ac7a:	4b2a      	ldr	r3, [pc, #168]	; (801ad24 <SX1276OnDio0Irq+0x428>)
 801ac7c:	0011      	movs	r1, r2
 801ac7e:	0018      	movs	r0, r3
 801ac80:	f7ff fbf2 	bl	801a468 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801ac84:	4b26      	ldr	r3, [pc, #152]	; (801ad20 <SX1276OnDio0Irq+0x424>)
 801ac86:	2256      	movs	r2, #86	; 0x56
 801ac88:	5c9b      	ldrb	r3, [r3, r2]
 801ac8a:	2201      	movs	r2, #1
 801ac8c:	4053      	eors	r3, r2
 801ac8e:	b2db      	uxtb	r3, r3
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d002      	beq.n	801ac9a <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801ac94:	4b22      	ldr	r3, [pc, #136]	; (801ad20 <SX1276OnDio0Irq+0x424>)
 801ac96:	2200      	movs	r2, #0
 801ac98:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801ac9a:	4b23      	ldr	r3, [pc, #140]	; (801ad28 <SX1276OnDio0Irq+0x42c>)
 801ac9c:	0018      	movs	r0, r3
 801ac9e:	f001 f9af 	bl	801c000 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801aca2:	4b22      	ldr	r3, [pc, #136]	; (801ad2c <SX1276OnDio0Irq+0x430>)
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d016      	beq.n	801acd8 <SX1276OnDio0Irq+0x3dc>
 801acaa:	4b20      	ldr	r3, [pc, #128]	; (801ad2c <SX1276OnDio0Irq+0x430>)
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	689b      	ldr	r3, [r3, #8]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d011      	beq.n	801acd8 <SX1276OnDio0Irq+0x3dc>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801acb4:	4b1d      	ldr	r3, [pc, #116]	; (801ad2c <SX1276OnDio0Irq+0x430>)
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	689c      	ldr	r4, [r3, #8]
 801acba:	4b19      	ldr	r3, [pc, #100]	; (801ad20 <SX1276OnDio0Irq+0x424>)
 801acbc:	2264      	movs	r2, #100	; 0x64
 801acbe:	5c9b      	ldrb	r3, [r3, r2]
 801acc0:	b299      	uxth	r1, r3
 801acc2:	4b17      	ldr	r3, [pc, #92]	; (801ad20 <SX1276OnDio0Irq+0x424>)
 801acc4:	2262      	movs	r2, #98	; 0x62
 801acc6:	5e9a      	ldrsh	r2, [r3, r2]
 801acc8:	4b15      	ldr	r3, [pc, #84]	; (801ad20 <SX1276OnDio0Irq+0x424>)
 801acca:	2060      	movs	r0, #96	; 0x60
 801accc:	561b      	ldrsb	r3, [r3, r0]
 801acce:	4815      	ldr	r0, [pc, #84]	; (801ad24 <SX1276OnDio0Irq+0x428>)
 801acd0:	47a0      	blx	r4
                break;
 801acd2:	e001      	b.n	801acd8 <SX1276OnDio0Irq+0x3dc>
                        break;
 801acd4:	46c0      	nop			; (mov r8, r8)
 801acd6:	e01f      	b.n	801ad18 <SX1276OnDio0Irq+0x41c>
                break;
 801acd8:	46c0      	nop			; (mov r8, r8)
            break;
 801acda:	e01d      	b.n	801ad18 <SX1276OnDio0Irq+0x41c>
            TimerStop( &TxTimeoutTimer );
 801acdc:	4b14      	ldr	r3, [pc, #80]	; (801ad30 <SX1276OnDio0Irq+0x434>)
 801acde:	0018      	movs	r0, r3
 801ace0:	f001 f98e 	bl	801c000 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801ace4:	4b0e      	ldr	r3, [pc, #56]	; (801ad20 <SX1276OnDio0Irq+0x424>)
 801ace6:	795b      	ldrb	r3, [r3, #5]
 801ace8:	2b01      	cmp	r3, #1
 801acea:	d103      	bne.n	801acf4 <SX1276OnDio0Irq+0x3f8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801acec:	2108      	movs	r1, #8
 801acee:	2012      	movs	r0, #18
 801acf0:	f7ff fb1c 	bl	801a32c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801acf4:	4b0a      	ldr	r3, [pc, #40]	; (801ad20 <SX1276OnDio0Irq+0x424>)
 801acf6:	2200      	movs	r2, #0
 801acf8:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801acfa:	4b0c      	ldr	r3, [pc, #48]	; (801ad2c <SX1276OnDio0Irq+0x430>)
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d008      	beq.n	801ad14 <SX1276OnDio0Irq+0x418>
 801ad02:	4b0a      	ldr	r3, [pc, #40]	; (801ad2c <SX1276OnDio0Irq+0x430>)
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d003      	beq.n	801ad14 <SX1276OnDio0Irq+0x418>
                    RadioEvents->TxDone( );
 801ad0c:	4b07      	ldr	r3, [pc, #28]	; (801ad2c <SX1276OnDio0Irq+0x430>)
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	4798      	blx	r3
                break;
 801ad14:	46c0      	nop			; (mov r8, r8)
            break;
 801ad16:	46c0      	nop			; (mov r8, r8)
    }
}
 801ad18:	46c0      	nop			; (mov r8, r8)
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	b003      	add	sp, #12
 801ad1e:	bd90      	pop	{r4, r7, pc}
 801ad20:	20001538 	.word	0x20001538
 801ad24:	20001438 	.word	0x20001438
 801ad28:	200015b8 	.word	0x200015b8
 801ad2c:	20001434 	.word	0x20001434
 801ad30:	200015a0 	.word	0x200015a0

0801ad34 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801ad34:	b580      	push	{r7, lr}
 801ad36:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801ad38:	4b6c      	ldr	r3, [pc, #432]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ad3a:	791b      	ldrb	r3, [r3, #4]
 801ad3c:	2b01      	cmp	r3, #1
 801ad3e:	d003      	beq.n	801ad48 <SX1276OnDio1Irq+0x14>
 801ad40:	2b02      	cmp	r3, #2
 801ad42:	d100      	bne.n	801ad46 <SX1276OnDio1Irq+0x12>
 801ad44:	e08b      	b.n	801ae5e <SX1276OnDio1Irq+0x12a>
            default:
                break;
            }
            break;
        default:
            break;
 801ad46:	e0ce      	b.n	801aee6 <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801ad48:	4b68      	ldr	r3, [pc, #416]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ad4a:	795b      	ldrb	r3, [r3, #5]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d002      	beq.n	801ad56 <SX1276OnDio1Irq+0x22>
 801ad50:	2b01      	cmp	r3, #1
 801ad52:	d061      	beq.n	801ae18 <SX1276OnDio1Irq+0xe4>
                break;
 801ad54:	e082      	b.n	801ae5c <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801ad56:	f7ea fd77 	bl	8005848 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801ad5a:	1e03      	subs	r3, r0, #0
 801ad5c:	d100      	bne.n	801ad60 <SX1276OnDio1Irq+0x2c>
 801ad5e:	e078      	b.n	801ae52 <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutSyncWord );
 801ad60:	4b63      	ldr	r3, [pc, #396]	; (801aef0 <SX1276OnDio1Irq+0x1bc>)
 801ad62:	0018      	movs	r0, r3
 801ad64:	f001 f94c 	bl	801c000 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801ad68:	4b60      	ldr	r3, [pc, #384]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ad6a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d118      	bne.n	801ada2 <SX1276OnDio1Irq+0x6e>
 801ad70:	4b5e      	ldr	r3, [pc, #376]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ad72:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d114      	bne.n	801ada2 <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801ad78:	4b5c      	ldr	r3, [pc, #368]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ad7a:	2222      	movs	r2, #34	; 0x22
 801ad7c:	5c9b      	ldrb	r3, [r3, r2]
 801ad7e:	2201      	movs	r2, #1
 801ad80:	4053      	eors	r3, r2
 801ad82:	b2db      	uxtb	r3, r3
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d005      	beq.n	801ad94 <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801ad88:	4b5a      	ldr	r3, [pc, #360]	; (801aef4 <SX1276OnDio1Irq+0x1c0>)
 801ad8a:	2101      	movs	r1, #1
 801ad8c:	0018      	movs	r0, r3
 801ad8e:	f7ff fb6b 	bl	801a468 <SX1276ReadFifo>
 801ad92:	e006      	b.n	801ada2 <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801ad94:	2032      	movs	r0, #50	; 0x32
 801ad96:	f7ff fada 	bl	801a34e <SX1276Read>
 801ad9a:	0003      	movs	r3, r0
 801ad9c:	b29a      	uxth	r2, r3
 801ad9e:	4b53      	ldr	r3, [pc, #332]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ada0:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801ada2:	4b52      	ldr	r3, [pc, #328]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ada4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ada6:	001a      	movs	r2, r3
 801ada8:	4b50      	ldr	r3, [pc, #320]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801adaa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801adac:	1ad3      	subs	r3, r2, r3
 801adae:	4a4f      	ldr	r2, [pc, #316]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801adb0:	213e      	movs	r1, #62	; 0x3e
 801adb2:	5c52      	ldrb	r2, [r2, r1]
 801adb4:	4293      	cmp	r3, r2
 801adb6:	db1a      	blt.n	801adee <SX1276OnDio1Irq+0xba>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801adb8:	4b4c      	ldr	r3, [pc, #304]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801adba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801adbc:	001a      	movs	r2, r3
 801adbe:	4b4e      	ldr	r3, [pc, #312]	; (801aef8 <SX1276OnDio1Irq+0x1c4>)
 801adc0:	18d2      	adds	r2, r2, r3
 801adc2:	4b4a      	ldr	r3, [pc, #296]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801adc4:	213e      	movs	r1, #62	; 0x3e
 801adc6:	5c5b      	ldrb	r3, [r3, r1]
 801adc8:	3b01      	subs	r3, #1
 801adca:	b2db      	uxtb	r3, r3
 801adcc:	0019      	movs	r1, r3
 801adce:	0010      	movs	r0, r2
 801add0:	f7ff fb4a 	bl	801a468 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801add4:	4b45      	ldr	r3, [pc, #276]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801add6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801add8:	4b44      	ldr	r3, [pc, #272]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801adda:	213e      	movs	r1, #62	; 0x3e
 801addc:	5c5b      	ldrb	r3, [r3, r1]
 801adde:	b29b      	uxth	r3, r3
 801ade0:	18d3      	adds	r3, r2, r3
 801ade2:	b29b      	uxth	r3, r3
 801ade4:	3b01      	subs	r3, #1
 801ade6:	b29a      	uxth	r2, r3
 801ade8:	4b40      	ldr	r3, [pc, #256]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801adea:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801adec:	e036      	b.n	801ae5c <SX1276OnDio1Irq+0x128>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801adee:	4b3f      	ldr	r3, [pc, #252]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801adf0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801adf2:	001a      	movs	r2, r3
 801adf4:	4b40      	ldr	r3, [pc, #256]	; (801aef8 <SX1276OnDio1Irq+0x1c4>)
 801adf6:	18d0      	adds	r0, r2, r3
 801adf8:	4b3c      	ldr	r3, [pc, #240]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801adfa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801adfc:	b2da      	uxtb	r2, r3
 801adfe:	4b3b      	ldr	r3, [pc, #236]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ae00:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ae02:	b2db      	uxtb	r3, r3
 801ae04:	1ad3      	subs	r3, r2, r3
 801ae06:	b2db      	uxtb	r3, r3
 801ae08:	0019      	movs	r1, r3
 801ae0a:	f7ff fb2d 	bl	801a468 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801ae0e:	4b37      	ldr	r3, [pc, #220]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ae10:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801ae12:	4b36      	ldr	r3, [pc, #216]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ae14:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801ae16:	e021      	b.n	801ae5c <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801ae18:	f7ea fd16 	bl	8005848 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801ae1c:	1e03      	subs	r3, r0, #0
 801ae1e:	d01a      	beq.n	801ae56 <SX1276OnDio1Irq+0x122>
                TimerStop( &RxTimeoutTimer );
 801ae20:	4b36      	ldr	r3, [pc, #216]	; (801aefc <SX1276OnDio1Irq+0x1c8>)
 801ae22:	0018      	movs	r0, r3
 801ae24:	f001 f8ec 	bl	801c000 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801ae28:	2180      	movs	r1, #128	; 0x80
 801ae2a:	2012      	movs	r0, #18
 801ae2c:	f7ff fa7e 	bl	801a32c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801ae30:	4b2e      	ldr	r3, [pc, #184]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ae32:	2200      	movs	r2, #0
 801ae34:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ae36:	4b32      	ldr	r3, [pc, #200]	; (801af00 <SX1276OnDio1Irq+0x1cc>)
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d00d      	beq.n	801ae5a <SX1276OnDio1Irq+0x126>
 801ae3e:	4b30      	ldr	r3, [pc, #192]	; (801af00 <SX1276OnDio1Irq+0x1cc>)
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	68db      	ldr	r3, [r3, #12]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d008      	beq.n	801ae5a <SX1276OnDio1Irq+0x126>
                    RadioEvents->RxTimeout( );
 801ae48:	4b2d      	ldr	r3, [pc, #180]	; (801af00 <SX1276OnDio1Irq+0x1cc>)
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	68db      	ldr	r3, [r3, #12]
 801ae4e:	4798      	blx	r3
                break;
 801ae50:	e003      	b.n	801ae5a <SX1276OnDio1Irq+0x126>
                    break;
 801ae52:	46c0      	nop			; (mov r8, r8)
 801ae54:	e047      	b.n	801aee6 <SX1276OnDio1Irq+0x1b2>
                    break;
 801ae56:	46c0      	nop			; (mov r8, r8)
 801ae58:	e045      	b.n	801aee6 <SX1276OnDio1Irq+0x1b2>
                break;
 801ae5a:	46c0      	nop			; (mov r8, r8)
            break;
 801ae5c:	e043      	b.n	801aee6 <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801ae5e:	4b23      	ldr	r3, [pc, #140]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ae60:	795b      	ldrb	r3, [r3, #5]
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d13b      	bne.n	801aede <SX1276OnDio1Irq+0x1aa>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801ae66:	f7ea fcef 	bl	8005848 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801ae6a:	0003      	movs	r3, r0
 801ae6c:	2b01      	cmp	r3, #1
 801ae6e:	d038      	beq.n	801aee2 <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801ae70:	4b1e      	ldr	r3, [pc, #120]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ae72:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ae74:	001a      	movs	r2, r3
 801ae76:	4b1d      	ldr	r3, [pc, #116]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ae78:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ae7a:	1ad3      	subs	r3, r2, r3
 801ae7c:	4a1b      	ldr	r2, [pc, #108]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ae7e:	213f      	movs	r1, #63	; 0x3f
 801ae80:	5c52      	ldrb	r2, [r2, r1]
 801ae82:	4293      	cmp	r3, r2
 801ae84:	dd16      	ble.n	801aeb4 <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801ae86:	4b19      	ldr	r3, [pc, #100]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ae88:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ae8a:	001a      	movs	r2, r3
 801ae8c:	4b1a      	ldr	r3, [pc, #104]	; (801aef8 <SX1276OnDio1Irq+0x1c4>)
 801ae8e:	18d2      	adds	r2, r2, r3
 801ae90:	4b16      	ldr	r3, [pc, #88]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801ae92:	213f      	movs	r1, #63	; 0x3f
 801ae94:	5c5b      	ldrb	r3, [r3, r1]
 801ae96:	0019      	movs	r1, r3
 801ae98:	0010      	movs	r0, r2
 801ae9a:	f7ff fad3 	bl	801a444 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801ae9e:	4b13      	ldr	r3, [pc, #76]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801aea0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801aea2:	4b12      	ldr	r3, [pc, #72]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801aea4:	213f      	movs	r1, #63	; 0x3f
 801aea6:	5c5b      	ldrb	r3, [r3, r1]
 801aea8:	b29b      	uxth	r3, r3
 801aeaa:	18d3      	adds	r3, r2, r3
 801aeac:	b29a      	uxth	r2, r3
 801aeae:	4b0f      	ldr	r3, [pc, #60]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801aeb0:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801aeb2:	e017      	b.n	801aee4 <SX1276OnDio1Irq+0x1b0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801aeb4:	4b0d      	ldr	r3, [pc, #52]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801aeb6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801aeb8:	001a      	movs	r2, r3
 801aeba:	4b0f      	ldr	r3, [pc, #60]	; (801aef8 <SX1276OnDio1Irq+0x1c4>)
 801aebc:	18d0      	adds	r0, r2, r3
 801aebe:	4b0b      	ldr	r3, [pc, #44]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801aec0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801aec2:	b2da      	uxtb	r2, r3
 801aec4:	4b09      	ldr	r3, [pc, #36]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801aec6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801aec8:	b2db      	uxtb	r3, r3
 801aeca:	1ad3      	subs	r3, r2, r3
 801aecc:	b2db      	uxtb	r3, r3
 801aece:	0019      	movs	r1, r3
 801aed0:	f7ff fab8 	bl	801a444 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801aed4:	4b05      	ldr	r3, [pc, #20]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801aed6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801aed8:	4b04      	ldr	r3, [pc, #16]	; (801aeec <SX1276OnDio1Irq+0x1b8>)
 801aeda:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801aedc:	e002      	b.n	801aee4 <SX1276OnDio1Irq+0x1b0>
                break;
 801aede:	46c0      	nop			; (mov r8, r8)
 801aee0:	e000      	b.n	801aee4 <SX1276OnDio1Irq+0x1b0>
                    break;
 801aee2:	46c0      	nop			; (mov r8, r8)
            break;
 801aee4:	46c0      	nop			; (mov r8, r8)
    }
}
 801aee6:	46c0      	nop			; (mov r8, r8)
 801aee8:	46bd      	mov	sp, r7
 801aeea:	bd80      	pop	{r7, pc}
 801aeec:	20001538 	.word	0x20001538
 801aef0:	200015d0 	.word	0x200015d0
 801aef4:	20001572 	.word	0x20001572
 801aef8:	20001438 	.word	0x20001438
 801aefc:	200015b8 	.word	0x200015b8
 801af00:	20001434 	.word	0x20001434

0801af04 <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801af04:	b590      	push	{r4, r7, lr}
 801af06:	b085      	sub	sp, #20
 801af08:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801af0a:	2300      	movs	r3, #0
 801af0c:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801af0e:	4b5d      	ldr	r3, [pc, #372]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801af10:	791b      	ldrb	r3, [r3, #4]
 801af12:	2b01      	cmp	r3, #1
 801af14:	d003      	beq.n	801af1e <SX1276OnDio2Irq+0x1a>
 801af16:	2b02      	cmp	r3, #2
 801af18:	d100      	bne.n	801af1c <SX1276OnDio2Irq+0x18>
 801af1a:	e083      	b.n	801b024 <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801af1c:	e0ae      	b.n	801b07c <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801af1e:	4b59      	ldr	r3, [pc, #356]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801af20:	795b      	ldrb	r3, [r3, #5]
 801af22:	2b00      	cmp	r3, #0
 801af24:	d002      	beq.n	801af2c <SX1276OnDio2Irq+0x28>
 801af26:	2b01      	cmp	r3, #1
 801af28:	d058      	beq.n	801afdc <SX1276OnDio2Irq+0xd8>
                break;
 801af2a:	e07a      	b.n	801b022 <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801af2c:	4b55      	ldr	r3, [pc, #340]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801af2e:	2230      	movs	r2, #48	; 0x30
 801af30:	2101      	movs	r1, #1
 801af32:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801af34:	4b53      	ldr	r3, [pc, #332]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801af36:	2230      	movs	r2, #48	; 0x30
 801af38:	5c9b      	ldrb	r3, [r3, r2]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d06e      	beq.n	801b01c <SX1276OnDio2Irq+0x118>
 801af3e:	4b51      	ldr	r3, [pc, #324]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801af40:	2231      	movs	r2, #49	; 0x31
 801af42:	5c9b      	ldrb	r3, [r3, r2]
 801af44:	2b00      	cmp	r3, #0
 801af46:	d169      	bne.n	801b01c <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801af48:	4b4f      	ldr	r3, [pc, #316]	; (801b088 <SX1276OnDio2Irq+0x184>)
 801af4a:	0018      	movs	r0, r3
 801af4c:	f001 f858 	bl	801c000 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801af50:	4b4c      	ldr	r3, [pc, #304]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801af52:	2231      	movs	r2, #49	; 0x31
 801af54:	2101      	movs	r1, #1
 801af56:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801af58:	2011      	movs	r0, #17
 801af5a:	f7ff f9f8 	bl	801a34e <SX1276Read>
 801af5e:	0003      	movs	r3, r0
 801af60:	085b      	lsrs	r3, r3, #1
 801af62:	b2db      	uxtb	r3, r3
 801af64:	425b      	negs	r3, r3
 801af66:	b2db      	uxtb	r3, r3
 801af68:	b259      	sxtb	r1, r3
 801af6a:	4b46      	ldr	r3, [pc, #280]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801af6c:	2232      	movs	r2, #50	; 0x32
 801af6e:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801af70:	201b      	movs	r0, #27
 801af72:	f7ff f9ec 	bl	801a34e <SX1276Read>
 801af76:	0003      	movs	r3, r0
 801af78:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801af7a:	201c      	movs	r0, #28
 801af7c:	f7ff f9e7 	bl	801a34e <SX1276Read>
 801af80:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801af82:	4323      	orrs	r3, r4
 801af84:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	0a1b      	lsrs	r3, r3, #8
 801af8a:	60bb      	str	r3, [r7, #8]
 801af8c:	68bb      	ldr	r3, [r7, #8]
 801af8e:	021b      	lsls	r3, r3, #8
 801af90:	68fa      	ldr	r2, [r7, #12]
 801af92:	1ad3      	subs	r3, r2, r3
 801af94:	607b      	str	r3, [r7, #4]
 801af96:	68b9      	ldr	r1, [r7, #8]
 801af98:	000b      	movs	r3, r1
 801af9a:	015b      	lsls	r3, r3, #5
 801af9c:	1a5b      	subs	r3, r3, r1
 801af9e:	019a      	lsls	r2, r3, #6
 801afa0:	1ad2      	subs	r2, r2, r3
 801afa2:	00d2      	lsls	r2, r2, #3
 801afa4:	1850      	adds	r0, r2, r1
 801afa6:	6879      	ldr	r1, [r7, #4]
 801afa8:	000b      	movs	r3, r1
 801afaa:	015b      	lsls	r3, r3, #5
 801afac:	1a5b      	subs	r3, r3, r1
 801afae:	019a      	lsls	r2, r3, #6
 801afb0:	1ad2      	subs	r2, r2, r3
 801afb2:	00d2      	lsls	r2, r2, #3
 801afb4:	1853      	adds	r3, r2, r1
 801afb6:	3380      	adds	r3, #128	; 0x80
 801afb8:	0a1b      	lsrs	r3, r3, #8
 801afba:	18c3      	adds	r3, r0, r3
 801afbc:	001a      	movs	r2, r3
 801afbe:	4b31      	ldr	r3, [pc, #196]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801afc0:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801afc2:	200c      	movs	r0, #12
 801afc4:	f7ff f9c3 	bl	801a34e <SX1276Read>
 801afc8:	0003      	movs	r3, r0
 801afca:	095b      	lsrs	r3, r3, #5
 801afcc:	b2db      	uxtb	r3, r3
 801afce:	2207      	movs	r2, #7
 801afd0:	4013      	ands	r3, r2
 801afd2:	b2d9      	uxtb	r1, r3
 801afd4:	4b2b      	ldr	r3, [pc, #172]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801afd6:	2238      	movs	r2, #56	; 0x38
 801afd8:	5499      	strb	r1, [r3, r2]
                break;
 801afda:	e01f      	b.n	801b01c <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801afdc:	4b29      	ldr	r3, [pc, #164]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801afde:	2253      	movs	r2, #83	; 0x53
 801afe0:	5c9b      	ldrb	r3, [r3, r2]
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d01c      	beq.n	801b020 <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801afe6:	2102      	movs	r1, #2
 801afe8:	2012      	movs	r0, #18
 801afea:	f7ff f99f 	bl	801a32c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801afee:	4b27      	ldr	r3, [pc, #156]	; (801b08c <SX1276OnDio2Irq+0x188>)
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d014      	beq.n	801b020 <SX1276OnDio2Irq+0x11c>
 801aff6:	4b25      	ldr	r3, [pc, #148]	; (801b08c <SX1276OnDio2Irq+0x188>)
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	695b      	ldr	r3, [r3, #20]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d00f      	beq.n	801b020 <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801b000:	4b22      	ldr	r3, [pc, #136]	; (801b08c <SX1276OnDio2Irq+0x188>)
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	695c      	ldr	r4, [r3, #20]
 801b006:	201c      	movs	r0, #28
 801b008:	f7ff f9a1 	bl	801a34e <SX1276Read>
 801b00c:	0003      	movs	r3, r0
 801b00e:	001a      	movs	r2, r3
 801b010:	233f      	movs	r3, #63	; 0x3f
 801b012:	4013      	ands	r3, r2
 801b014:	b2db      	uxtb	r3, r3
 801b016:	0018      	movs	r0, r3
 801b018:	47a0      	blx	r4
                break;
 801b01a:	e001      	b.n	801b020 <SX1276OnDio2Irq+0x11c>
                break;
 801b01c:	46c0      	nop			; (mov r8, r8)
 801b01e:	e02d      	b.n	801b07c <SX1276OnDio2Irq+0x178>
                break;
 801b020:	46c0      	nop			; (mov r8, r8)
            break;
 801b022:	e02b      	b.n	801b07c <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801b024:	4b17      	ldr	r3, [pc, #92]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801b026:	795b      	ldrb	r3, [r3, #5]
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d021      	beq.n	801b070 <SX1276OnDio2Irq+0x16c>
 801b02c:	2b01      	cmp	r3, #1
 801b02e:	d121      	bne.n	801b074 <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801b030:	4b14      	ldr	r3, [pc, #80]	; (801b084 <SX1276OnDio2Irq+0x180>)
 801b032:	2253      	movs	r2, #83	; 0x53
 801b034:	5c9b      	ldrb	r3, [r3, r2]
 801b036:	2b00      	cmp	r3, #0
 801b038:	d01e      	beq.n	801b078 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801b03a:	2102      	movs	r1, #2
 801b03c:	2012      	movs	r0, #18
 801b03e:	f7ff f975 	bl	801a32c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801b042:	4b12      	ldr	r3, [pc, #72]	; (801b08c <SX1276OnDio2Irq+0x188>)
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d016      	beq.n	801b078 <SX1276OnDio2Irq+0x174>
 801b04a:	4b10      	ldr	r3, [pc, #64]	; (801b08c <SX1276OnDio2Irq+0x188>)
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	695b      	ldr	r3, [r3, #20]
 801b050:	2b00      	cmp	r3, #0
 801b052:	d011      	beq.n	801b078 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801b054:	4b0d      	ldr	r3, [pc, #52]	; (801b08c <SX1276OnDio2Irq+0x188>)
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	695c      	ldr	r4, [r3, #20]
 801b05a:	201c      	movs	r0, #28
 801b05c:	f7ff f977 	bl	801a34e <SX1276Read>
 801b060:	0003      	movs	r3, r0
 801b062:	001a      	movs	r2, r3
 801b064:	233f      	movs	r3, #63	; 0x3f
 801b066:	4013      	ands	r3, r2
 801b068:	b2db      	uxtb	r3, r3
 801b06a:	0018      	movs	r0, r3
 801b06c:	47a0      	blx	r4
                break;
 801b06e:	e003      	b.n	801b078 <SX1276OnDio2Irq+0x174>
                break;
 801b070:	46c0      	nop			; (mov r8, r8)
 801b072:	e002      	b.n	801b07a <SX1276OnDio2Irq+0x176>
                break;
 801b074:	46c0      	nop			; (mov r8, r8)
 801b076:	e000      	b.n	801b07a <SX1276OnDio2Irq+0x176>
                break;
 801b078:	46c0      	nop			; (mov r8, r8)
            break;
 801b07a:	46c0      	nop			; (mov r8, r8)
    }
}
 801b07c:	46c0      	nop			; (mov r8, r8)
 801b07e:	46bd      	mov	sp, r7
 801b080:	b005      	add	sp, #20
 801b082:	bd90      	pop	{r4, r7, pc}
 801b084:	20001538 	.word	0x20001538
 801b088:	200015d0 	.word	0x200015d0
 801b08c:	20001434 	.word	0x20001434

0801b090 <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801b090:	b580      	push	{r7, lr}
 801b092:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801b094:	4b1d      	ldr	r3, [pc, #116]	; (801b10c <SX1276OnDio3Irq+0x7c>)
 801b096:	795b      	ldrb	r3, [r3, #5]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d031      	beq.n	801b100 <SX1276OnDio3Irq+0x70>
 801b09c:	2b01      	cmp	r3, #1
 801b09e:	d000      	beq.n	801b0a2 <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801b0a0:	e031      	b.n	801b106 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801b0a2:	2012      	movs	r0, #18
 801b0a4:	f7ff f953 	bl	801a34e <SX1276Read>
 801b0a8:	0003      	movs	r3, r0
 801b0aa:	001a      	movs	r2, r3
 801b0ac:	2301      	movs	r3, #1
 801b0ae:	4013      	ands	r3, r2
 801b0b0:	2b01      	cmp	r3, #1
 801b0b2:	d112      	bne.n	801b0da <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801b0b4:	2105      	movs	r1, #5
 801b0b6:	2012      	movs	r0, #18
 801b0b8:	f7ff f938 	bl	801a32c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b0bc:	4b14      	ldr	r3, [pc, #80]	; (801b110 <SX1276OnDio3Irq+0x80>)
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d01f      	beq.n	801b104 <SX1276OnDio3Irq+0x74>
 801b0c4:	4b12      	ldr	r3, [pc, #72]	; (801b110 <SX1276OnDio3Irq+0x80>)
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	699b      	ldr	r3, [r3, #24]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d01a      	beq.n	801b104 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801b0ce:	4b10      	ldr	r3, [pc, #64]	; (801b110 <SX1276OnDio3Irq+0x80>)
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	699b      	ldr	r3, [r3, #24]
 801b0d4:	2001      	movs	r0, #1
 801b0d6:	4798      	blx	r3
        break;
 801b0d8:	e014      	b.n	801b104 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801b0da:	2104      	movs	r1, #4
 801b0dc:	2012      	movs	r0, #18
 801b0de:	f7ff f925 	bl	801a32c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b0e2:	4b0b      	ldr	r3, [pc, #44]	; (801b110 <SX1276OnDio3Irq+0x80>)
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d00c      	beq.n	801b104 <SX1276OnDio3Irq+0x74>
 801b0ea:	4b09      	ldr	r3, [pc, #36]	; (801b110 <SX1276OnDio3Irq+0x80>)
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	699b      	ldr	r3, [r3, #24]
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d007      	beq.n	801b104 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801b0f4:	4b06      	ldr	r3, [pc, #24]	; (801b110 <SX1276OnDio3Irq+0x80>)
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	699b      	ldr	r3, [r3, #24]
 801b0fa:	2000      	movs	r0, #0
 801b0fc:	4798      	blx	r3
        break;
 801b0fe:	e001      	b.n	801b104 <SX1276OnDio3Irq+0x74>
        break;
 801b100:	46c0      	nop			; (mov r8, r8)
 801b102:	e000      	b.n	801b106 <SX1276OnDio3Irq+0x76>
        break;
 801b104:	46c0      	nop			; (mov r8, r8)
    }
}
 801b106:	46c0      	nop			; (mov r8, r8)
 801b108:	46bd      	mov	sp, r7
 801b10a:	bd80      	pop	{r7, pc}
 801b10c:	20001538 	.word	0x20001538
 801b110:	20001434 	.word	0x20001434

0801b114 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801b114:	b580      	push	{r7, lr}
 801b116:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801b118:	4b0b      	ldr	r3, [pc, #44]	; (801b148 <SX1276OnDio4Irq+0x34>)
 801b11a:	795b      	ldrb	r3, [r3, #5]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d002      	beq.n	801b126 <SX1276OnDio4Irq+0x12>
 801b120:	2b01      	cmp	r3, #1
 801b122:	d00a      	beq.n	801b13a <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801b124:	e00c      	b.n	801b140 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801b126:	4b08      	ldr	r3, [pc, #32]	; (801b148 <SX1276OnDio4Irq+0x34>)
 801b128:	2230      	movs	r2, #48	; 0x30
 801b12a:	5c9b      	ldrb	r3, [r3, r2]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d106      	bne.n	801b13e <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801b130:	4b05      	ldr	r3, [pc, #20]	; (801b148 <SX1276OnDio4Irq+0x34>)
 801b132:	2230      	movs	r2, #48	; 0x30
 801b134:	2101      	movs	r1, #1
 801b136:	5499      	strb	r1, [r3, r2]
        break;
 801b138:	e001      	b.n	801b13e <SX1276OnDio4Irq+0x2a>
        break;
 801b13a:	46c0      	nop			; (mov r8, r8)
 801b13c:	e000      	b.n	801b140 <SX1276OnDio4Irq+0x2c>
        break;
 801b13e:	46c0      	nop			; (mov r8, r8)
    }
}
 801b140:	46c0      	nop			; (mov r8, r8)
 801b142:	46bd      	mov	sp, r7
 801b144:	bd80      	pop	{r7, pc}
 801b146:	46c0      	nop			; (mov r8, r8)
 801b148:	20001538 	.word	0x20001538

0801b14c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b14c:	b580      	push	{r7, lr}
 801b14e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b150:	4b0a      	ldr	r3, [pc, #40]	; (801b17c <UTIL_ADV_TRACE_Init+0x30>)
 801b152:	2218      	movs	r2, #24
 801b154:	2100      	movs	r1, #0
 801b156:	0018      	movs	r0, r3
 801b158:	f000 fbb8 	bl	801b8cc <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b15c:	2380      	movs	r3, #128	; 0x80
 801b15e:	009a      	lsls	r2, r3, #2
 801b160:	4b07      	ldr	r3, [pc, #28]	; (801b180 <UTIL_ADV_TRACE_Init+0x34>)
 801b162:	2100      	movs	r1, #0
 801b164:	0018      	movs	r0, r3
 801b166:	f000 fbb1 	bl	801b8cc <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b16a:	4b06      	ldr	r3, [pc, #24]	; (801b184 <UTIL_ADV_TRACE_Init+0x38>)
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	4a06      	ldr	r2, [pc, #24]	; (801b188 <UTIL_ADV_TRACE_Init+0x3c>)
 801b170:	0010      	movs	r0, r2
 801b172:	4798      	blx	r3
 801b174:	0003      	movs	r3, r0
}
 801b176:	0018      	movs	r0, r3
 801b178:	46bd      	mov	sp, r7
 801b17a:	bd80      	pop	{r7, pc}
 801b17c:	200015e8 	.word	0x200015e8
 801b180:	20001600 	.word	0x20001600
 801b184:	0801d9c0 	.word	0x0801d9c0
 801b188:	0801b40d 	.word	0x0801b40d

0801b18c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b18c:	b408      	push	{r3}
 801b18e:	b590      	push	{r4, r7, lr}
 801b190:	b08c      	sub	sp, #48	; 0x30
 801b192:	af00      	add	r7, sp, #0
 801b194:	60f8      	str	r0, [r7, #12]
 801b196:	60b9      	str	r1, [r7, #8]
 801b198:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b19a:	2316      	movs	r3, #22
 801b19c:	18fb      	adds	r3, r7, r3
 801b19e:	2200      	movs	r2, #0
 801b1a0:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b1a2:	232c      	movs	r3, #44	; 0x2c
 801b1a4:	18fb      	adds	r3, r7, r3
 801b1a6:	2200      	movs	r2, #0
 801b1a8:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b1aa:	4b41      	ldr	r3, [pc, #260]	; (801b2b0 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b1ac:	7a1b      	ldrb	r3, [r3, #8]
 801b1ae:	001a      	movs	r2, r3
 801b1b0:	68fb      	ldr	r3, [r7, #12]
 801b1b2:	4293      	cmp	r3, r2
 801b1b4:	d902      	bls.n	801b1bc <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b1b6:	2305      	movs	r3, #5
 801b1b8:	425b      	negs	r3, r3
 801b1ba:	e072      	b.n	801b2a2 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b1bc:	4b3c      	ldr	r3, [pc, #240]	; (801b2b0 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b1be:	68db      	ldr	r3, [r3, #12]
 801b1c0:	68ba      	ldr	r2, [r7, #8]
 801b1c2:	4013      	ands	r3, r2
 801b1c4:	68ba      	ldr	r2, [r7, #8]
 801b1c6:	429a      	cmp	r2, r3
 801b1c8:	d002      	beq.n	801b1d0 <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b1ca:	2306      	movs	r3, #6
 801b1cc:	425b      	negs	r3, r3
 801b1ce:	e068      	b.n	801b2a2 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b1d0:	4b37      	ldr	r3, [pc, #220]	; (801b2b0 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b1d2:	685b      	ldr	r3, [r3, #4]
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d00a      	beq.n	801b1ee <UTIL_ADV_TRACE_COND_FSend+0x62>
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d007      	beq.n	801b1ee <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b1de:	4b34      	ldr	r3, [pc, #208]	; (801b2b0 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801b1e0:	685b      	ldr	r3, [r3, #4]
 801b1e2:	2216      	movs	r2, #22
 801b1e4:	18b9      	adds	r1, r7, r2
 801b1e6:	2218      	movs	r2, #24
 801b1e8:	18ba      	adds	r2, r7, r2
 801b1ea:	0010      	movs	r0, r2
 801b1ec:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b1ee:	2340      	movs	r3, #64	; 0x40
 801b1f0:	18fb      	adds	r3, r7, r3
 801b1f2:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b1f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b1f8:	2180      	movs	r1, #128	; 0x80
 801b1fa:	0049      	lsls	r1, r1, #1
 801b1fc:	482d      	ldr	r0, [pc, #180]	; (801b2b4 <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801b1fe:	f001 fa09 	bl	801c614 <tiny_vsnprintf_like>
 801b202:	0002      	movs	r2, r0
 801b204:	242c      	movs	r4, #44	; 0x2c
 801b206:	193b      	adds	r3, r7, r4
 801b208:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801b20a:	f000 fa23 	bl	801b654 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b20e:	2316      	movs	r3, #22
 801b210:	18fb      	adds	r3, r7, r3
 801b212:	881a      	ldrh	r2, [r3, #0]
 801b214:	193b      	adds	r3, r7, r4
 801b216:	881b      	ldrh	r3, [r3, #0]
 801b218:	18d3      	adds	r3, r2, r3
 801b21a:	b29b      	uxth	r3, r3
 801b21c:	2214      	movs	r2, #20
 801b21e:	18ba      	adds	r2, r7, r2
 801b220:	0011      	movs	r1, r2
 801b222:	0018      	movs	r0, r3
 801b224:	f000 f97c 	bl	801b520 <TRACE_AllocateBufer>
 801b228:	0003      	movs	r3, r0
 801b22a:	3301      	adds	r3, #1
 801b22c:	d035      	beq.n	801b29a <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b22e:	232e      	movs	r3, #46	; 0x2e
 801b230:	18fb      	adds	r3, r7, r3
 801b232:	2200      	movs	r2, #0
 801b234:	801a      	strh	r2, [r3, #0]
 801b236:	e016      	b.n	801b266 <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b238:	202e      	movs	r0, #46	; 0x2e
 801b23a:	183b      	adds	r3, r7, r0
 801b23c:	881b      	ldrh	r3, [r3, #0]
 801b23e:	2414      	movs	r4, #20
 801b240:	193a      	adds	r2, r7, r4
 801b242:	8812      	ldrh	r2, [r2, #0]
 801b244:	0011      	movs	r1, r2
 801b246:	2218      	movs	r2, #24
 801b248:	18ba      	adds	r2, r7, r2
 801b24a:	5cd2      	ldrb	r2, [r2, r3]
 801b24c:	4b1a      	ldr	r3, [pc, #104]	; (801b2b8 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801b24e:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801b250:	193b      	adds	r3, r7, r4
 801b252:	881b      	ldrh	r3, [r3, #0]
 801b254:	3301      	adds	r3, #1
 801b256:	b29a      	uxth	r2, r3
 801b258:	193b      	adds	r3, r7, r4
 801b25a:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b25c:	183b      	adds	r3, r7, r0
 801b25e:	881a      	ldrh	r2, [r3, #0]
 801b260:	183b      	adds	r3, r7, r0
 801b262:	3201      	adds	r2, #1
 801b264:	801a      	strh	r2, [r3, #0]
 801b266:	2316      	movs	r3, #22
 801b268:	18fb      	adds	r3, r7, r3
 801b26a:	881b      	ldrh	r3, [r3, #0]
 801b26c:	222e      	movs	r2, #46	; 0x2e
 801b26e:	18ba      	adds	r2, r7, r2
 801b270:	8812      	ldrh	r2, [r2, #0]
 801b272:	429a      	cmp	r2, r3
 801b274:	d3e0      	bcc.n	801b238 <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b276:	2314      	movs	r3, #20
 801b278:	18fb      	adds	r3, r7, r3
 801b27a:	881b      	ldrh	r3, [r3, #0]
 801b27c:	001a      	movs	r2, r3
 801b27e:	4b0e      	ldr	r3, [pc, #56]	; (801b2b8 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801b280:	18d0      	adds	r0, r2, r3
 801b282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b286:	2180      	movs	r1, #128	; 0x80
 801b288:	0049      	lsls	r1, r1, #1
 801b28a:	f001 f9c3 	bl	801c614 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b28e:	f000 f9fd 	bl	801b68c <TRACE_UnLock>

    return TRACE_Send();
 801b292:	f000 f831 	bl	801b2f8 <TRACE_Send>
 801b296:	0003      	movs	r3, r0
 801b298:	e003      	b.n	801b2a2 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b29a:	f000 f9f7 	bl	801b68c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b29e:	2303      	movs	r3, #3
 801b2a0:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b2a2:	0018      	movs	r0, r3
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	b00c      	add	sp, #48	; 0x30
 801b2a8:	bc90      	pop	{r4, r7}
 801b2aa:	bc08      	pop	{r3}
 801b2ac:	b001      	add	sp, #4
 801b2ae:	4718      	bx	r3
 801b2b0:	200015e8 	.word	0x200015e8
 801b2b4:	20001800 	.word	0x20001800
 801b2b8:	20001600 	.word	0x20001600

0801b2bc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	b082      	sub	sp, #8
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801b2c4:	4b03      	ldr	r3, [pc, #12]	; (801b2d4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b2c6:	687a      	ldr	r2, [r7, #4]
 801b2c8:	605a      	str	r2, [r3, #4]
}
 801b2ca:	46c0      	nop			; (mov r8, r8)
 801b2cc:	46bd      	mov	sp, r7
 801b2ce:	b002      	add	sp, #8
 801b2d0:	bd80      	pop	{r7, pc}
 801b2d2:	46c0      	nop			; (mov r8, r8)
 801b2d4:	200015e8 	.word	0x200015e8

0801b2d8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b082      	sub	sp, #8
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	0002      	movs	r2, r0
 801b2e0:	1dfb      	adds	r3, r7, #7
 801b2e2:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b2e4:	4b03      	ldr	r3, [pc, #12]	; (801b2f4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b2e6:	1dfa      	adds	r2, r7, #7
 801b2e8:	7812      	ldrb	r2, [r2, #0]
 801b2ea:	721a      	strb	r2, [r3, #8]
}
 801b2ec:	46c0      	nop			; (mov r8, r8)
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	b002      	add	sp, #8
 801b2f2:	bd80      	pop	{r7, pc}
 801b2f4:	200015e8 	.word	0x200015e8

0801b2f8 <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b2f8:	b590      	push	{r4, r7, lr}
 801b2fa:	b089      	sub	sp, #36	; 0x24
 801b2fc:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801b2fe:	231f      	movs	r3, #31
 801b300:	18fb      	adds	r3, r7, r3
 801b302:	2200      	movs	r2, #0
 801b304:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801b306:	2300      	movs	r3, #0
 801b308:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b30a:	f3ef 8310 	mrs	r3, PRIMASK
 801b30e:	613b      	str	r3, [r7, #16]
  return(result);
 801b310:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801b312:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b314:	b672      	cpsid	i
}
 801b316:	46c0      	nop			; (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801b318:	f000 f9d4 	bl	801b6c4 <TRACE_IsLocked>
 801b31c:	1e03      	subs	r3, r0, #0
 801b31e:	d160      	bne.n	801b3e2 <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801b320:	f000 f998 	bl	801b654 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b324:	4b36      	ldr	r3, [pc, #216]	; (801b400 <TRACE_Send+0x108>)
 801b326:	8a1a      	ldrh	r2, [r3, #16]
 801b328:	4b35      	ldr	r3, [pc, #212]	; (801b400 <TRACE_Send+0x108>)
 801b32a:	8a5b      	ldrh	r3, [r3, #18]
 801b32c:	429a      	cmp	r2, r3
 801b32e:	d050      	beq.n	801b3d2 <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b330:	4b33      	ldr	r3, [pc, #204]	; (801b400 <TRACE_Send+0x108>)
 801b332:	789b      	ldrb	r3, [r3, #2]
 801b334:	2b01      	cmp	r3, #1
 801b336:	d117      	bne.n	801b368 <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b338:	4b31      	ldr	r3, [pc, #196]	; (801b400 <TRACE_Send+0x108>)
 801b33a:	881a      	ldrh	r2, [r3, #0]
 801b33c:	4b30      	ldr	r3, [pc, #192]	; (801b400 <TRACE_Send+0x108>)
 801b33e:	8a1b      	ldrh	r3, [r3, #16]
 801b340:	1ad3      	subs	r3, r2, r3
 801b342:	b29a      	uxth	r2, r3
 801b344:	4b2e      	ldr	r3, [pc, #184]	; (801b400 <TRACE_Send+0x108>)
 801b346:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b348:	4b2d      	ldr	r3, [pc, #180]	; (801b400 <TRACE_Send+0x108>)
 801b34a:	2202      	movs	r2, #2
 801b34c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b34e:	4b2c      	ldr	r3, [pc, #176]	; (801b400 <TRACE_Send+0x108>)
 801b350:	2200      	movs	r2, #0
 801b352:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801b354:	4b2a      	ldr	r3, [pc, #168]	; (801b400 <TRACE_Send+0x108>)
 801b356:	8a9b      	ldrh	r3, [r3, #20]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d105      	bne.n	801b368 <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b35c:	4b28      	ldr	r3, [pc, #160]	; (801b400 <TRACE_Send+0x108>)
 801b35e:	2200      	movs	r2, #0
 801b360:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b362:	4b27      	ldr	r3, [pc, #156]	; (801b400 <TRACE_Send+0x108>)
 801b364:	2200      	movs	r2, #0
 801b366:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b368:	4b25      	ldr	r3, [pc, #148]	; (801b400 <TRACE_Send+0x108>)
 801b36a:	789b      	ldrb	r3, [r3, #2]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d116      	bne.n	801b39e <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b370:	4b23      	ldr	r3, [pc, #140]	; (801b400 <TRACE_Send+0x108>)
 801b372:	8a5a      	ldrh	r2, [r3, #18]
 801b374:	4b22      	ldr	r3, [pc, #136]	; (801b400 <TRACE_Send+0x108>)
 801b376:	8a1b      	ldrh	r3, [r3, #16]
 801b378:	429a      	cmp	r2, r3
 801b37a:	d908      	bls.n	801b38e <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b37c:	4b20      	ldr	r3, [pc, #128]	; (801b400 <TRACE_Send+0x108>)
 801b37e:	8a5a      	ldrh	r2, [r3, #18]
 801b380:	4b1f      	ldr	r3, [pc, #124]	; (801b400 <TRACE_Send+0x108>)
 801b382:	8a1b      	ldrh	r3, [r3, #16]
 801b384:	1ad3      	subs	r3, r2, r3
 801b386:	b29a      	uxth	r2, r3
 801b388:	4b1d      	ldr	r3, [pc, #116]	; (801b400 <TRACE_Send+0x108>)
 801b38a:	829a      	strh	r2, [r3, #20]
 801b38c:	e007      	b.n	801b39e <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b38e:	4b1c      	ldr	r3, [pc, #112]	; (801b400 <TRACE_Send+0x108>)
 801b390:	8a1b      	ldrh	r3, [r3, #16]
 801b392:	2280      	movs	r2, #128	; 0x80
 801b394:	0092      	lsls	r2, r2, #2
 801b396:	1ad3      	subs	r3, r2, r3
 801b398:	b29a      	uxth	r2, r3
 801b39a:	4b19      	ldr	r3, [pc, #100]	; (801b400 <TRACE_Send+0x108>)
 801b39c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b39e:	4b18      	ldr	r3, [pc, #96]	; (801b400 <TRACE_Send+0x108>)
 801b3a0:	8a1b      	ldrh	r3, [r3, #16]
 801b3a2:	001a      	movs	r2, r3
 801b3a4:	4b17      	ldr	r3, [pc, #92]	; (801b404 <TRACE_Send+0x10c>)
 801b3a6:	18d3      	adds	r3, r2, r3
 801b3a8:	61bb      	str	r3, [r7, #24]
 801b3aa:	697b      	ldr	r3, [r7, #20]
 801b3ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	f383 8810 	msr	PRIMASK, r3
}
 801b3b4:	46c0      	nop			; (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801b3b6:	f7e9 f953 	bl	8004660 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b3ba:	4b13      	ldr	r3, [pc, #76]	; (801b408 <TRACE_Send+0x110>)
 801b3bc:	68db      	ldr	r3, [r3, #12]
 801b3be:	4a10      	ldr	r2, [pc, #64]	; (801b400 <TRACE_Send+0x108>)
 801b3c0:	8a91      	ldrh	r1, [r2, #20]
 801b3c2:	221f      	movs	r2, #31
 801b3c4:	18bc      	adds	r4, r7, r2
 801b3c6:	69ba      	ldr	r2, [r7, #24]
 801b3c8:	0010      	movs	r0, r2
 801b3ca:	4798      	blx	r3
 801b3cc:	0003      	movs	r3, r0
 801b3ce:	7023      	strb	r3, [r4, #0]
 801b3d0:	e00d      	b.n	801b3ee <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801b3d2:	f000 f95b 	bl	801b68c <TRACE_UnLock>
 801b3d6:	697b      	ldr	r3, [r7, #20]
 801b3d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	f383 8810 	msr	PRIMASK, r3
}
 801b3e0:	e005      	b.n	801b3ee <TRACE_Send+0xf6>
 801b3e2:	697b      	ldr	r3, [r7, #20]
 801b3e4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	f383 8810 	msr	PRIMASK, r3
}
 801b3ec:	46c0      	nop			; (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801b3ee:	231f      	movs	r3, #31
 801b3f0:	18fb      	adds	r3, r7, r3
 801b3f2:	781b      	ldrb	r3, [r3, #0]
 801b3f4:	b25b      	sxtb	r3, r3
}
 801b3f6:	0018      	movs	r0, r3
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	b009      	add	sp, #36	; 0x24
 801b3fc:	bd90      	pop	{r4, r7, pc}
 801b3fe:	46c0      	nop			; (mov r8, r8)
 801b400:	200015e8 	.word	0x200015e8
 801b404:	20001600 	.word	0x20001600
 801b408:	0801d9c0 	.word	0x0801d9c0

0801b40c <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801b40c:	b580      	push	{r7, lr}
 801b40e:	b086      	sub	sp, #24
 801b410:	af00      	add	r7, sp, #0
 801b412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b414:	f3ef 8310 	mrs	r3, PRIMASK
 801b418:	613b      	str	r3, [r7, #16]
  return(result);
 801b41a:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b41c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b41e:	b672      	cpsid	i
}
 801b420:	46c0      	nop			; (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b422:	4b3c      	ldr	r3, [pc, #240]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b424:	789b      	ldrb	r3, [r3, #2]
 801b426:	2b02      	cmp	r3, #2
 801b428:	d106      	bne.n	801b438 <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b42a:	4b3a      	ldr	r3, [pc, #232]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b42c:	2200      	movs	r2, #0
 801b42e:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b430:	4b38      	ldr	r3, [pc, #224]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b432:	2200      	movs	r2, #0
 801b434:	821a      	strh	r2, [r3, #16]
 801b436:	e00a      	b.n	801b44e <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b438:	4b36      	ldr	r3, [pc, #216]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b43a:	8a1a      	ldrh	r2, [r3, #16]
 801b43c:	4b35      	ldr	r3, [pc, #212]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b43e:	8a9b      	ldrh	r3, [r3, #20]
 801b440:	18d3      	adds	r3, r2, r3
 801b442:	b29b      	uxth	r3, r3
 801b444:	05db      	lsls	r3, r3, #23
 801b446:	0ddb      	lsrs	r3, r3, #23
 801b448:	b29a      	uxth	r2, r3
 801b44a:	4b32      	ldr	r3, [pc, #200]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b44c:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b44e:	4b31      	ldr	r3, [pc, #196]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b450:	8a1a      	ldrh	r2, [r3, #16]
 801b452:	4b30      	ldr	r3, [pc, #192]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b454:	8a5b      	ldrh	r3, [r3, #18]
 801b456:	429a      	cmp	r2, r3
 801b458:	d04c      	beq.n	801b4f4 <TRACE_TxCpltCallback+0xe8>
 801b45a:	4b2e      	ldr	r3, [pc, #184]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b45c:	8adb      	ldrh	r3, [r3, #22]
 801b45e:	2b01      	cmp	r3, #1
 801b460:	d148      	bne.n	801b4f4 <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b462:	4b2c      	ldr	r3, [pc, #176]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b464:	789b      	ldrb	r3, [r3, #2]
 801b466:	2b01      	cmp	r3, #1
 801b468:	d117      	bne.n	801b49a <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b46a:	4b2a      	ldr	r3, [pc, #168]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b46c:	881a      	ldrh	r2, [r3, #0]
 801b46e:	4b29      	ldr	r3, [pc, #164]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b470:	8a1b      	ldrh	r3, [r3, #16]
 801b472:	1ad3      	subs	r3, r2, r3
 801b474:	b29a      	uxth	r2, r3
 801b476:	4b27      	ldr	r3, [pc, #156]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b478:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b47a:	4b26      	ldr	r3, [pc, #152]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b47c:	2202      	movs	r2, #2
 801b47e:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b480:	4b24      	ldr	r3, [pc, #144]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b482:	2200      	movs	r2, #0
 801b484:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801b486:	4b23      	ldr	r3, [pc, #140]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b488:	8a9b      	ldrh	r3, [r3, #20]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d105      	bne.n	801b49a <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b48e:	4b21      	ldr	r3, [pc, #132]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b490:	2200      	movs	r2, #0
 801b492:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b494:	4b1f      	ldr	r3, [pc, #124]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b496:	2200      	movs	r2, #0
 801b498:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b49a:	4b1e      	ldr	r3, [pc, #120]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b49c:	789b      	ldrb	r3, [r3, #2]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d116      	bne.n	801b4d0 <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b4a2:	4b1c      	ldr	r3, [pc, #112]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b4a4:	8a5a      	ldrh	r2, [r3, #18]
 801b4a6:	4b1b      	ldr	r3, [pc, #108]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b4a8:	8a1b      	ldrh	r3, [r3, #16]
 801b4aa:	429a      	cmp	r2, r3
 801b4ac:	d908      	bls.n	801b4c0 <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b4ae:	4b19      	ldr	r3, [pc, #100]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b4b0:	8a5a      	ldrh	r2, [r3, #18]
 801b4b2:	4b18      	ldr	r3, [pc, #96]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b4b4:	8a1b      	ldrh	r3, [r3, #16]
 801b4b6:	1ad3      	subs	r3, r2, r3
 801b4b8:	b29a      	uxth	r2, r3
 801b4ba:	4b16      	ldr	r3, [pc, #88]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b4bc:	829a      	strh	r2, [r3, #20]
 801b4be:	e007      	b.n	801b4d0 <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b4c0:	4b14      	ldr	r3, [pc, #80]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b4c2:	8a1b      	ldrh	r3, [r3, #16]
 801b4c4:	2280      	movs	r2, #128	; 0x80
 801b4c6:	0092      	lsls	r2, r2, #2
 801b4c8:	1ad3      	subs	r3, r2, r3
 801b4ca:	b29a      	uxth	r2, r3
 801b4cc:	4b11      	ldr	r3, [pc, #68]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b4ce:	829a      	strh	r2, [r3, #20]
 801b4d0:	697b      	ldr	r3, [r7, #20]
 801b4d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	f383 8810 	msr	PRIMASK, r3
}
 801b4da:	46c0      	nop			; (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801b4dc:	4b0e      	ldr	r3, [pc, #56]	; (801b518 <TRACE_TxCpltCallback+0x10c>)
 801b4de:	68db      	ldr	r3, [r3, #12]
 801b4e0:	4a0c      	ldr	r2, [pc, #48]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b4e2:	8a12      	ldrh	r2, [r2, #16]
 801b4e4:	0011      	movs	r1, r2
 801b4e6:	4a0d      	ldr	r2, [pc, #52]	; (801b51c <TRACE_TxCpltCallback+0x110>)
 801b4e8:	1888      	adds	r0, r1, r2
 801b4ea:	4a0a      	ldr	r2, [pc, #40]	; (801b514 <TRACE_TxCpltCallback+0x108>)
 801b4ec:	8a92      	ldrh	r2, [r2, #20]
 801b4ee:	0011      	movs	r1, r2
 801b4f0:	4798      	blx	r3
 801b4f2:	e00a      	b.n	801b50a <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801b4f4:	f7e9 f8bd 	bl	8004672 <UTIL_ADV_TRACE_PostSendHook>
 801b4f8:	697b      	ldr	r3, [r7, #20]
 801b4fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4fc:	68bb      	ldr	r3, [r7, #8]
 801b4fe:	f383 8810 	msr	PRIMASK, r3
}
 801b502:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801b504:	f000 f8c2 	bl	801b68c <TRACE_UnLock>
  }
}
 801b508:	46c0      	nop			; (mov r8, r8)
 801b50a:	46c0      	nop			; (mov r8, r8)
 801b50c:	46bd      	mov	sp, r7
 801b50e:	b006      	add	sp, #24
 801b510:	bd80      	pop	{r7, pc}
 801b512:	46c0      	nop			; (mov r8, r8)
 801b514:	200015e8 	.word	0x200015e8
 801b518:	0801d9c0 	.word	0x0801d9c0
 801b51c:	20001600 	.word	0x20001600

0801b520 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b520:	b580      	push	{r7, lr}
 801b522:	b086      	sub	sp, #24
 801b524:	af00      	add	r7, sp, #0
 801b526:	0002      	movs	r2, r0
 801b528:	6039      	str	r1, [r7, #0]
 801b52a:	1dbb      	adds	r3, r7, #6
 801b52c:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801b52e:	2314      	movs	r3, #20
 801b530:	18fb      	adds	r3, r7, r3
 801b532:	2201      	movs	r2, #1
 801b534:	4252      	negs	r2, r2
 801b536:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b538:	f3ef 8310 	mrs	r3, PRIMASK
 801b53c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b53e:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b542:	b672      	cpsid	i
}
 801b544:	46c0      	nop			; (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b546:	4b42      	ldr	r3, [pc, #264]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b548:	8a5a      	ldrh	r2, [r3, #18]
 801b54a:	4b41      	ldr	r3, [pc, #260]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b54c:	8a1b      	ldrh	r3, [r3, #16]
 801b54e:	429a      	cmp	r2, r3
 801b550:	d123      	bne.n	801b59a <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b552:	4b3f      	ldr	r3, [pc, #252]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b554:	8a5a      	ldrh	r2, [r3, #18]
 801b556:	2016      	movs	r0, #22
 801b558:	183b      	adds	r3, r7, r0
 801b55a:	2180      	movs	r1, #128	; 0x80
 801b55c:	0089      	lsls	r1, r1, #2
 801b55e:	1a8a      	subs	r2, r1, r2
 801b560:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b562:	1dba      	adds	r2, r7, #6
 801b564:	0001      	movs	r1, r0
 801b566:	187b      	adds	r3, r7, r1
 801b568:	8812      	ldrh	r2, [r2, #0]
 801b56a:	881b      	ldrh	r3, [r3, #0]
 801b56c:	429a      	cmp	r2, r3
 801b56e:	d346      	bcc.n	801b5fe <TRACE_AllocateBufer+0xde>
 801b570:	4b37      	ldr	r3, [pc, #220]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b572:	8a1b      	ldrh	r3, [r3, #16]
 801b574:	1dba      	adds	r2, r7, #6
 801b576:	8812      	ldrh	r2, [r2, #0]
 801b578:	429a      	cmp	r2, r3
 801b57a:	d240      	bcs.n	801b5fe <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b57c:	4b34      	ldr	r3, [pc, #208]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b57e:	2201      	movs	r2, #1
 801b580:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b582:	4b33      	ldr	r3, [pc, #204]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b584:	8a5a      	ldrh	r2, [r3, #18]
 801b586:	4b32      	ldr	r3, [pc, #200]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b588:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b58a:	187b      	adds	r3, r7, r1
 801b58c:	4a30      	ldr	r2, [pc, #192]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b58e:	8a12      	ldrh	r2, [r2, #16]
 801b590:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b592:	4b2f      	ldr	r3, [pc, #188]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b594:	2200      	movs	r2, #0
 801b596:	825a      	strh	r2, [r3, #18]
 801b598:	e031      	b.n	801b5fe <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b59a:	4b2d      	ldr	r3, [pc, #180]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b59c:	8a5a      	ldrh	r2, [r3, #18]
 801b59e:	4b2c      	ldr	r3, [pc, #176]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b5a0:	8a1b      	ldrh	r3, [r3, #16]
 801b5a2:	429a      	cmp	r2, r3
 801b5a4:	d923      	bls.n	801b5ee <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b5a6:	4b2a      	ldr	r3, [pc, #168]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b5a8:	8a5a      	ldrh	r2, [r3, #18]
 801b5aa:	2016      	movs	r0, #22
 801b5ac:	183b      	adds	r3, r7, r0
 801b5ae:	2180      	movs	r1, #128	; 0x80
 801b5b0:	0089      	lsls	r1, r1, #2
 801b5b2:	1a8a      	subs	r2, r1, r2
 801b5b4:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b5b6:	1dba      	adds	r2, r7, #6
 801b5b8:	0001      	movs	r1, r0
 801b5ba:	187b      	adds	r3, r7, r1
 801b5bc:	8812      	ldrh	r2, [r2, #0]
 801b5be:	881b      	ldrh	r3, [r3, #0]
 801b5c0:	429a      	cmp	r2, r3
 801b5c2:	d31c      	bcc.n	801b5fe <TRACE_AllocateBufer+0xde>
 801b5c4:	4b22      	ldr	r3, [pc, #136]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b5c6:	8a1b      	ldrh	r3, [r3, #16]
 801b5c8:	1dba      	adds	r2, r7, #6
 801b5ca:	8812      	ldrh	r2, [r2, #0]
 801b5cc:	429a      	cmp	r2, r3
 801b5ce:	d216      	bcs.n	801b5fe <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b5d0:	4b1f      	ldr	r3, [pc, #124]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b5d2:	2201      	movs	r2, #1
 801b5d4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b5d6:	4b1e      	ldr	r3, [pc, #120]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b5d8:	8a5a      	ldrh	r2, [r3, #18]
 801b5da:	4b1d      	ldr	r3, [pc, #116]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b5dc:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b5de:	187b      	adds	r3, r7, r1
 801b5e0:	4a1b      	ldr	r2, [pc, #108]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b5e2:	8a12      	ldrh	r2, [r2, #16]
 801b5e4:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b5e6:	4b1a      	ldr	r3, [pc, #104]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b5e8:	2200      	movs	r2, #0
 801b5ea:	825a      	strh	r2, [r3, #18]
 801b5ec:	e007      	b.n	801b5fe <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b5ee:	4b18      	ldr	r3, [pc, #96]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b5f0:	8a19      	ldrh	r1, [r3, #16]
 801b5f2:	4b17      	ldr	r3, [pc, #92]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b5f4:	8a5a      	ldrh	r2, [r3, #18]
 801b5f6:	2316      	movs	r3, #22
 801b5f8:	18fb      	adds	r3, r7, r3
 801b5fa:	1a8a      	subs	r2, r1, r2
 801b5fc:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801b5fe:	2316      	movs	r3, #22
 801b600:	18fa      	adds	r2, r7, r3
 801b602:	1dbb      	adds	r3, r7, #6
 801b604:	8812      	ldrh	r2, [r2, #0]
 801b606:	881b      	ldrh	r3, [r3, #0]
 801b608:	429a      	cmp	r2, r3
 801b60a:	d912      	bls.n	801b632 <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b60c:	4b10      	ldr	r3, [pc, #64]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b60e:	8a5a      	ldrh	r2, [r3, #18]
 801b610:	683b      	ldr	r3, [r7, #0]
 801b612:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b614:	4b0e      	ldr	r3, [pc, #56]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b616:	8a5a      	ldrh	r2, [r3, #18]
 801b618:	1dbb      	adds	r3, r7, #6
 801b61a:	881b      	ldrh	r3, [r3, #0]
 801b61c:	18d3      	adds	r3, r2, r3
 801b61e:	b29b      	uxth	r3, r3
 801b620:	05db      	lsls	r3, r3, #23
 801b622:	0ddb      	lsrs	r3, r3, #23
 801b624:	b29a      	uxth	r2, r3
 801b626:	4b0a      	ldr	r3, [pc, #40]	; (801b650 <TRACE_AllocateBufer+0x130>)
 801b628:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b62a:	2314      	movs	r3, #20
 801b62c:	18fb      	adds	r3, r7, r3
 801b62e:	2200      	movs	r2, #0
 801b630:	801a      	strh	r2, [r3, #0]
 801b632:	693b      	ldr	r3, [r7, #16]
 801b634:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b636:	68bb      	ldr	r3, [r7, #8]
 801b638:	f383 8810 	msr	PRIMASK, r3
}
 801b63c:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801b63e:	2314      	movs	r3, #20
 801b640:	18fb      	adds	r3, r7, r3
 801b642:	2200      	movs	r2, #0
 801b644:	5e9b      	ldrsh	r3, [r3, r2]
}
 801b646:	0018      	movs	r0, r3
 801b648:	46bd      	mov	sp, r7
 801b64a:	b006      	add	sp, #24
 801b64c:	bd80      	pop	{r7, pc}
 801b64e:	46c0      	nop			; (mov r8, r8)
 801b650:	200015e8 	.word	0x200015e8

0801b654 <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801b654:	b580      	push	{r7, lr}
 801b656:	b084      	sub	sp, #16
 801b658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b65a:	f3ef 8310 	mrs	r3, PRIMASK
 801b65e:	607b      	str	r3, [r7, #4]
  return(result);
 801b660:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b662:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b664:	b672      	cpsid	i
}
 801b666:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801b668:	4b07      	ldr	r3, [pc, #28]	; (801b688 <TRACE_Lock+0x34>)
 801b66a:	8adb      	ldrh	r3, [r3, #22]
 801b66c:	3301      	adds	r3, #1
 801b66e:	b29a      	uxth	r2, r3
 801b670:	4b05      	ldr	r3, [pc, #20]	; (801b688 <TRACE_Lock+0x34>)
 801b672:	82da      	strh	r2, [r3, #22]
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b678:	68bb      	ldr	r3, [r7, #8]
 801b67a:	f383 8810 	msr	PRIMASK, r3
}
 801b67e:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b680:	46c0      	nop			; (mov r8, r8)
 801b682:	46bd      	mov	sp, r7
 801b684:	b004      	add	sp, #16
 801b686:	bd80      	pop	{r7, pc}
 801b688:	200015e8 	.word	0x200015e8

0801b68c <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801b68c:	b580      	push	{r7, lr}
 801b68e:	b084      	sub	sp, #16
 801b690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b692:	f3ef 8310 	mrs	r3, PRIMASK
 801b696:	607b      	str	r3, [r7, #4]
  return(result);
 801b698:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b69a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b69c:	b672      	cpsid	i
}
 801b69e:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801b6a0:	4b07      	ldr	r3, [pc, #28]	; (801b6c0 <TRACE_UnLock+0x34>)
 801b6a2:	8adb      	ldrh	r3, [r3, #22]
 801b6a4:	3b01      	subs	r3, #1
 801b6a6:	b29a      	uxth	r2, r3
 801b6a8:	4b05      	ldr	r3, [pc, #20]	; (801b6c0 <TRACE_UnLock+0x34>)
 801b6aa:	82da      	strh	r2, [r3, #22]
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6b0:	68bb      	ldr	r3, [r7, #8]
 801b6b2:	f383 8810 	msr	PRIMASK, r3
}
 801b6b6:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b6b8:	46c0      	nop			; (mov r8, r8)
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	b004      	add	sp, #16
 801b6be:	bd80      	pop	{r7, pc}
 801b6c0:	200015e8 	.word	0x200015e8

0801b6c4 <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b6c8:	4b03      	ldr	r3, [pc, #12]	; (801b6d8 <TRACE_IsLocked+0x14>)
 801b6ca:	8adb      	ldrh	r3, [r3, #22]
 801b6cc:	1e5a      	subs	r2, r3, #1
 801b6ce:	4193      	sbcs	r3, r2
 801b6d0:	b2db      	uxtb	r3, r3
}
 801b6d2:	0018      	movs	r0, r3
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	bd80      	pop	{r7, pc}
 801b6d8:	200015e8 	.word	0x200015e8

0801b6dc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b6e0:	4b04      	ldr	r3, [pc, #16]	; (801b6f4 <UTIL_LPM_Init+0x18>)
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b6e6:	4b04      	ldr	r3, [pc, #16]	; (801b6f8 <UTIL_LPM_Init+0x1c>)
 801b6e8:	2200      	movs	r2, #0
 801b6ea:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b6ec:	46c0      	nop			; (mov r8, r8)
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	bd80      	pop	{r7, pc}
 801b6f2:	46c0      	nop			; (mov r8, r8)
 801b6f4:	20001900 	.word	0x20001900
 801b6f8:	20001904 	.word	0x20001904

0801b6fc <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b6fc:	b580      	push	{r7, lr}
 801b6fe:	b086      	sub	sp, #24
 801b700:	af00      	add	r7, sp, #0
 801b702:	6078      	str	r0, [r7, #4]
 801b704:	000a      	movs	r2, r1
 801b706:	1cfb      	adds	r3, r7, #3
 801b708:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b70a:	f3ef 8310 	mrs	r3, PRIMASK
 801b70e:	613b      	str	r3, [r7, #16]
  return(result);
 801b710:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b712:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b714:	b672      	cpsid	i
}
 801b716:	46c0      	nop			; (mov r8, r8)
  
  switch( state )
 801b718:	1cfb      	adds	r3, r7, #3
 801b71a:	781b      	ldrb	r3, [r3, #0]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d008      	beq.n	801b732 <UTIL_LPM_SetStopMode+0x36>
 801b720:	2b01      	cmp	r3, #1
 801b722:	d10e      	bne.n	801b742 <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b724:	4b0c      	ldr	r3, [pc, #48]	; (801b758 <UTIL_LPM_SetStopMode+0x5c>)
 801b726:	681a      	ldr	r2, [r3, #0]
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	431a      	orrs	r2, r3
 801b72c:	4b0a      	ldr	r3, [pc, #40]	; (801b758 <UTIL_LPM_SetStopMode+0x5c>)
 801b72e:	601a      	str	r2, [r3, #0]
      break;
 801b730:	e008      	b.n	801b744 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	43da      	mvns	r2, r3
 801b736:	4b08      	ldr	r3, [pc, #32]	; (801b758 <UTIL_LPM_SetStopMode+0x5c>)
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	401a      	ands	r2, r3
 801b73c:	4b06      	ldr	r3, [pc, #24]	; (801b758 <UTIL_LPM_SetStopMode+0x5c>)
 801b73e:	601a      	str	r2, [r3, #0]
      break;
 801b740:	e000      	b.n	801b744 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801b742:	46c0      	nop			; (mov r8, r8)
 801b744:	697b      	ldr	r3, [r7, #20]
 801b746:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	f383 8810 	msr	PRIMASK, r3
}
 801b74e:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b750:	46c0      	nop			; (mov r8, r8)
 801b752:	46bd      	mov	sp, r7
 801b754:	b006      	add	sp, #24
 801b756:	bd80      	pop	{r7, pc}
 801b758:	20001900 	.word	0x20001900

0801b75c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b086      	sub	sp, #24
 801b760:	af00      	add	r7, sp, #0
 801b762:	6078      	str	r0, [r7, #4]
 801b764:	000a      	movs	r2, r1
 801b766:	1cfb      	adds	r3, r7, #3
 801b768:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b76a:	f3ef 8310 	mrs	r3, PRIMASK
 801b76e:	613b      	str	r3, [r7, #16]
  return(result);
 801b770:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b772:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b774:	b672      	cpsid	i
}
 801b776:	46c0      	nop			; (mov r8, r8)
  
  switch(state)
 801b778:	1cfb      	adds	r3, r7, #3
 801b77a:	781b      	ldrb	r3, [r3, #0]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d008      	beq.n	801b792 <UTIL_LPM_SetOffMode+0x36>
 801b780:	2b01      	cmp	r3, #1
 801b782:	d10e      	bne.n	801b7a2 <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b784:	4b0c      	ldr	r3, [pc, #48]	; (801b7b8 <UTIL_LPM_SetOffMode+0x5c>)
 801b786:	681a      	ldr	r2, [r3, #0]
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	431a      	orrs	r2, r3
 801b78c:	4b0a      	ldr	r3, [pc, #40]	; (801b7b8 <UTIL_LPM_SetOffMode+0x5c>)
 801b78e:	601a      	str	r2, [r3, #0]
      break;
 801b790:	e008      	b.n	801b7a4 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	43da      	mvns	r2, r3
 801b796:	4b08      	ldr	r3, [pc, #32]	; (801b7b8 <UTIL_LPM_SetOffMode+0x5c>)
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	401a      	ands	r2, r3
 801b79c:	4b06      	ldr	r3, [pc, #24]	; (801b7b8 <UTIL_LPM_SetOffMode+0x5c>)
 801b79e:	601a      	str	r2, [r3, #0]
      break;
 801b7a0:	e000      	b.n	801b7a4 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801b7a2:	46c0      	nop			; (mov r8, r8)
 801b7a4:	697b      	ldr	r3, [r7, #20]
 801b7a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	f383 8810 	msr	PRIMASK, r3
}
 801b7ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b7b0:	46c0      	nop			; (mov r8, r8)
 801b7b2:	46bd      	mov	sp, r7
 801b7b4:	b006      	add	sp, #24
 801b7b6:	bd80      	pop	{r7, pc}
 801b7b8:	20001904 	.word	0x20001904

0801b7bc <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801b7bc:	b580      	push	{r7, lr}
 801b7be:	b084      	sub	sp, #16
 801b7c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b7c2:	f3ef 8310 	mrs	r3, PRIMASK
 801b7c6:	607b      	str	r3, [r7, #4]
  return(result);
 801b7c8:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b7ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801b7cc:	b672      	cpsid	i
}
 801b7ce:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b7d0:	4b11      	ldr	r3, [pc, #68]	; (801b818 <UTIL_LPM_GetMode+0x5c>)
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d004      	beq.n	801b7e2 <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801b7d8:	230f      	movs	r3, #15
 801b7da:	18fb      	adds	r3, r7, r3
 801b7dc:	2200      	movs	r2, #0
 801b7de:	701a      	strb	r2, [r3, #0]
 801b7e0:	e00c      	b.n	801b7fc <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b7e2:	4b0e      	ldr	r3, [pc, #56]	; (801b81c <UTIL_LPM_GetMode+0x60>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d004      	beq.n	801b7f4 <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801b7ea:	230f      	movs	r3, #15
 801b7ec:	18fb      	adds	r3, r7, r3
 801b7ee:	2201      	movs	r2, #1
 801b7f0:	701a      	strb	r2, [r3, #0]
 801b7f2:	e003      	b.n	801b7fc <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801b7f4:	230f      	movs	r3, #15
 801b7f6:	18fb      	adds	r3, r7, r3
 801b7f8:	2202      	movs	r2, #2
 801b7fa:	701a      	strb	r2, [r3, #0]
 801b7fc:	68bb      	ldr	r3, [r7, #8]
 801b7fe:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b800:	683b      	ldr	r3, [r7, #0]
 801b802:	f383 8810 	msr	PRIMASK, r3
}
 801b806:	46c0      	nop			; (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801b808:	230f      	movs	r3, #15
 801b80a:	18fb      	adds	r3, r7, r3
 801b80c:	781b      	ldrb	r3, [r3, #0]
}
 801b80e:	0018      	movs	r0, r3
 801b810:	46bd      	mov	sp, r7
 801b812:	b004      	add	sp, #16
 801b814:	bd80      	pop	{r7, pc}
 801b816:	46c0      	nop			; (mov r8, r8)
 801b818:	20001900 	.word	0x20001900
 801b81c:	20001904 	.word	0x20001904

0801b820 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801b820:	b580      	push	{r7, lr}
 801b822:	b084      	sub	sp, #16
 801b824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b826:	f3ef 8310 	mrs	r3, PRIMASK
 801b82a:	60bb      	str	r3, [r7, #8]
  return(result);
 801b82c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801b82e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b830:	b672      	cpsid	i
}
 801b832:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b834:	4b12      	ldr	r3, [pc, #72]	; (801b880 <UTIL_LPM_EnterLowPower+0x60>)
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d006      	beq.n	801b84a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801b83c:	4b11      	ldr	r3, [pc, #68]	; (801b884 <UTIL_LPM_EnterLowPower+0x64>)
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801b842:	4b10      	ldr	r3, [pc, #64]	; (801b884 <UTIL_LPM_EnterLowPower+0x64>)
 801b844:	685b      	ldr	r3, [r3, #4]
 801b846:	4798      	blx	r3
 801b848:	e010      	b.n	801b86c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b84a:	4b0f      	ldr	r3, [pc, #60]	; (801b888 <UTIL_LPM_EnterLowPower+0x68>)
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d006      	beq.n	801b860 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801b852:	4b0c      	ldr	r3, [pc, #48]	; (801b884 <UTIL_LPM_EnterLowPower+0x64>)
 801b854:	689b      	ldr	r3, [r3, #8]
 801b856:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801b858:	4b0a      	ldr	r3, [pc, #40]	; (801b884 <UTIL_LPM_EnterLowPower+0x64>)
 801b85a:	68db      	ldr	r3, [r3, #12]
 801b85c:	4798      	blx	r3
 801b85e:	e005      	b.n	801b86c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801b860:	4b08      	ldr	r3, [pc, #32]	; (801b884 <UTIL_LPM_EnterLowPower+0x64>)
 801b862:	691b      	ldr	r3, [r3, #16]
 801b864:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801b866:	4b07      	ldr	r3, [pc, #28]	; (801b884 <UTIL_LPM_EnterLowPower+0x64>)
 801b868:	695b      	ldr	r3, [r3, #20]
 801b86a:	4798      	blx	r3
 801b86c:	68fb      	ldr	r3, [r7, #12]
 801b86e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	f383 8810 	msr	PRIMASK, r3
}
 801b876:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801b878:	46c0      	nop			; (mov r8, r8)
 801b87a:	46bd      	mov	sp, r7
 801b87c:	b004      	add	sp, #16
 801b87e:	bd80      	pop	{r7, pc}
 801b880:	20001900 	.word	0x20001900
 801b884:	0801d99c 	.word	0x0801d99c
 801b888:	20001904 	.word	0x20001904

0801b88c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b086      	sub	sp, #24
 801b890:	af00      	add	r7, sp, #0
 801b892:	60f8      	str	r0, [r7, #12]
 801b894:	60b9      	str	r1, [r7, #8]
 801b896:	1dbb      	adds	r3, r7, #6
 801b898:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b89e:	68bb      	ldr	r3, [r7, #8]
 801b8a0:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b8a2:	e007      	b.n	801b8b4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b8a4:	693a      	ldr	r2, [r7, #16]
 801b8a6:	1c53      	adds	r3, r2, #1
 801b8a8:	613b      	str	r3, [r7, #16]
 801b8aa:	697b      	ldr	r3, [r7, #20]
 801b8ac:	1c59      	adds	r1, r3, #1
 801b8ae:	6179      	str	r1, [r7, #20]
 801b8b0:	7812      	ldrb	r2, [r2, #0]
 801b8b2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b8b4:	1dbb      	adds	r3, r7, #6
 801b8b6:	881b      	ldrh	r3, [r3, #0]
 801b8b8:	1dba      	adds	r2, r7, #6
 801b8ba:	1e59      	subs	r1, r3, #1
 801b8bc:	8011      	strh	r1, [r2, #0]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d1f0      	bne.n	801b8a4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801b8c2:	46c0      	nop			; (mov r8, r8)
 801b8c4:	46c0      	nop			; (mov r8, r8)
 801b8c6:	46bd      	mov	sp, r7
 801b8c8:	b006      	add	sp, #24
 801b8ca:	bd80      	pop	{r7, pc}

0801b8cc <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b084      	sub	sp, #16
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	6078      	str	r0, [r7, #4]
 801b8d4:	0008      	movs	r0, r1
 801b8d6:	0011      	movs	r1, r2
 801b8d8:	1cfb      	adds	r3, r7, #3
 801b8da:	1c02      	adds	r2, r0, #0
 801b8dc:	701a      	strb	r2, [r3, #0]
 801b8de:	003b      	movs	r3, r7
 801b8e0:	1c0a      	adds	r2, r1, #0
 801b8e2:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b8e8:	e005      	b.n	801b8f6 <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	1c5a      	adds	r2, r3, #1
 801b8ee:	60fa      	str	r2, [r7, #12]
 801b8f0:	1cfa      	adds	r2, r7, #3
 801b8f2:	7812      	ldrb	r2, [r2, #0]
 801b8f4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b8f6:	003b      	movs	r3, r7
 801b8f8:	881b      	ldrh	r3, [r3, #0]
 801b8fa:	003a      	movs	r2, r7
 801b8fc:	1e59      	subs	r1, r3, #1
 801b8fe:	8011      	strh	r1, [r2, #0]
 801b900:	2b00      	cmp	r3, #0
 801b902:	d1f2      	bne.n	801b8ea <UTIL_MEM_set_8+0x1e>
  }
}
 801b904:	46c0      	nop			; (mov r8, r8)
 801b906:	46c0      	nop			; (mov r8, r8)
 801b908:	46bd      	mov	sp, r7
 801b90a:	b004      	add	sp, #16
 801b90c:	bd80      	pop	{r7, pc}
	...

0801b910 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801b910:	b580      	push	{r7, lr}
 801b912:	b08c      	sub	sp, #48	; 0x30
 801b914:	af00      	add	r7, sp, #0
 801b916:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801b918:	4b66      	ldr	r3, [pc, #408]	; (801bab4 <UTIL_SEQ_Run+0x1a4>)
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801b91e:	4b65      	ldr	r3, [pc, #404]	; (801bab4 <UTIL_SEQ_Run+0x1a4>)
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	687a      	ldr	r2, [r7, #4]
 801b924:	401a      	ands	r2, r3
 801b926:	4b63      	ldr	r3, [pc, #396]	; (801bab4 <UTIL_SEQ_Run+0x1a4>)
 801b928:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801b92a:	e086      	b.n	801ba3a <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801b92c:	2300      	movs	r3, #0
 801b92e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801b930:	e002      	b.n	801b938 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801b932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b934:	3301      	adds	r3, #1
 801b936:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801b938:	4b5f      	ldr	r3, [pc, #380]	; (801bab8 <UTIL_SEQ_Run+0x1a8>)
 801b93a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b93c:	00d2      	lsls	r2, r2, #3
 801b93e:	58d2      	ldr	r2, [r2, r3]
 801b940:	4b5e      	ldr	r3, [pc, #376]	; (801babc <UTIL_SEQ_Run+0x1ac>)
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	401a      	ands	r2, r3
 801b946:	4b5b      	ldr	r3, [pc, #364]	; (801bab4 <UTIL_SEQ_Run+0x1a4>)
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	4013      	ands	r3, r2
 801b94c:	d0f1      	beq.n	801b932 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801b94e:	4b5a      	ldr	r3, [pc, #360]	; (801bab8 <UTIL_SEQ_Run+0x1a8>)
 801b950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b952:	00d2      	lsls	r2, r2, #3
 801b954:	58d2      	ldr	r2, [r2, r3]
 801b956:	4b59      	ldr	r3, [pc, #356]	; (801babc <UTIL_SEQ_Run+0x1ac>)
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	401a      	ands	r2, r3
 801b95c:	4b55      	ldr	r3, [pc, #340]	; (801bab4 <UTIL_SEQ_Run+0x1a4>)
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	4013      	ands	r3, r2
 801b962:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b964:	4a54      	ldr	r2, [pc, #336]	; (801bab8 <UTIL_SEQ_Run+0x1a8>)
 801b966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b968:	00db      	lsls	r3, r3, #3
 801b96a:	18d3      	adds	r3, r2, r3
 801b96c:	3304      	adds	r3, #4
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b972:	4013      	ands	r3, r2
 801b974:	d107      	bne.n	801b986 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b976:	4a50      	ldr	r2, [pc, #320]	; (801bab8 <UTIL_SEQ_Run+0x1a8>)
 801b978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b97a:	00db      	lsls	r3, r3, #3
 801b97c:	18d3      	adds	r3, r2, r3
 801b97e:	3304      	adds	r3, #4
 801b980:	2201      	movs	r2, #1
 801b982:	4252      	negs	r2, r2
 801b984:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b986:	4a4c      	ldr	r2, [pc, #304]	; (801bab8 <UTIL_SEQ_Run+0x1a8>)
 801b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b98a:	00db      	lsls	r3, r3, #3
 801b98c:	18d3      	adds	r3, r2, r3
 801b98e:	3304      	adds	r3, #4
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b994:	4013      	ands	r3, r2
 801b996:	0018      	movs	r0, r3
 801b998:	f000 f8f6 	bl	801bb88 <SEQ_BitPosition>
 801b99c:	0003      	movs	r3, r0
 801b99e:	001a      	movs	r2, r3
 801b9a0:	4b47      	ldr	r3, [pc, #284]	; (801bac0 <UTIL_SEQ_Run+0x1b0>)
 801b9a2:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b9a4:	4a44      	ldr	r2, [pc, #272]	; (801bab8 <UTIL_SEQ_Run+0x1a8>)
 801b9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9a8:	00db      	lsls	r3, r3, #3
 801b9aa:	18d3      	adds	r3, r2, r3
 801b9ac:	3304      	adds	r3, #4
 801b9ae:	681a      	ldr	r2, [r3, #0]
 801b9b0:	4b43      	ldr	r3, [pc, #268]	; (801bac0 <UTIL_SEQ_Run+0x1b0>)
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	2101      	movs	r1, #1
 801b9b6:	4099      	lsls	r1, r3
 801b9b8:	000b      	movs	r3, r1
 801b9ba:	43db      	mvns	r3, r3
 801b9bc:	401a      	ands	r2, r3
 801b9be:	493e      	ldr	r1, [pc, #248]	; (801bab8 <UTIL_SEQ_Run+0x1a8>)
 801b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9c2:	00db      	lsls	r3, r3, #3
 801b9c4:	18cb      	adds	r3, r1, r3
 801b9c6:	3304      	adds	r3, #4
 801b9c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b9ca:	f3ef 8310 	mrs	r3, PRIMASK
 801b9ce:	61bb      	str	r3, [r7, #24]
  return(result);
 801b9d0:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b9d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b9d4:	b672      	cpsid	i
}
 801b9d6:	46c0      	nop			; (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b9d8:	4b39      	ldr	r3, [pc, #228]	; (801bac0 <UTIL_SEQ_Run+0x1b0>)
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	2201      	movs	r2, #1
 801b9de:	409a      	lsls	r2, r3
 801b9e0:	0013      	movs	r3, r2
 801b9e2:	43da      	mvns	r2, r3
 801b9e4:	4b37      	ldr	r3, [pc, #220]	; (801bac4 <UTIL_SEQ_Run+0x1b4>)
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	401a      	ands	r2, r3
 801b9ea:	4b36      	ldr	r3, [pc, #216]	; (801bac4 <UTIL_SEQ_Run+0x1b4>)
 801b9ec:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b9ee:	2302      	movs	r3, #2
 801b9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b9f2:	e013      	b.n	801ba1c <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9f6:	1e5a      	subs	r2, r3, #1
 801b9f8:	4b2f      	ldr	r3, [pc, #188]	; (801bab8 <UTIL_SEQ_Run+0x1a8>)
 801b9fa:	00d2      	lsls	r2, r2, #3
 801b9fc:	58d1      	ldr	r1, [r2, r3]
 801b9fe:	4b30      	ldr	r3, [pc, #192]	; (801bac0 <UTIL_SEQ_Run+0x1b0>)
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	2201      	movs	r2, #1
 801ba04:	409a      	lsls	r2, r3
 801ba06:	0013      	movs	r3, r2
 801ba08:	43db      	mvns	r3, r3
 801ba0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ba0c:	3a01      	subs	r2, #1
 801ba0e:	4019      	ands	r1, r3
 801ba10:	4b29      	ldr	r3, [pc, #164]	; (801bab8 <UTIL_SEQ_Run+0x1a8>)
 801ba12:	00d2      	lsls	r2, r2, #3
 801ba14:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ba16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba18:	3b01      	subs	r3, #1
 801ba1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ba1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d1e8      	bne.n	801b9f4 <UTIL_SEQ_Run+0xe4>
 801ba22:	6a3b      	ldr	r3, [r7, #32]
 801ba24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba26:	697b      	ldr	r3, [r7, #20]
 801ba28:	f383 8810 	msr	PRIMASK, r3
}
 801ba2c:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ba2e:	4b24      	ldr	r3, [pc, #144]	; (801bac0 <UTIL_SEQ_Run+0x1b0>)
 801ba30:	681a      	ldr	r2, [r3, #0]
 801ba32:	4b25      	ldr	r3, [pc, #148]	; (801bac8 <UTIL_SEQ_Run+0x1b8>)
 801ba34:	0092      	lsls	r2, r2, #2
 801ba36:	58d3      	ldr	r3, [r2, r3]
 801ba38:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801ba3a:	4b22      	ldr	r3, [pc, #136]	; (801bac4 <UTIL_SEQ_Run+0x1b4>)
 801ba3c:	681a      	ldr	r2, [r3, #0]
 801ba3e:	4b1f      	ldr	r3, [pc, #124]	; (801babc <UTIL_SEQ_Run+0x1ac>)
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	401a      	ands	r2, r3
 801ba44:	4b1b      	ldr	r3, [pc, #108]	; (801bab4 <UTIL_SEQ_Run+0x1a4>)
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	4013      	ands	r3, r2
 801ba4a:	d006      	beq.n	801ba5a <UTIL_SEQ_Run+0x14a>
 801ba4c:	4b1f      	ldr	r3, [pc, #124]	; (801bacc <UTIL_SEQ_Run+0x1bc>)
 801ba4e:	681a      	ldr	r2, [r3, #0]
 801ba50:	4b1f      	ldr	r3, [pc, #124]	; (801bad0 <UTIL_SEQ_Run+0x1c0>)
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	4013      	ands	r3, r2
 801ba56:	d100      	bne.n	801ba5a <UTIL_SEQ_Run+0x14a>
 801ba58:	e768      	b.n	801b92c <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801ba5a:	4b19      	ldr	r3, [pc, #100]	; (801bac0 <UTIL_SEQ_Run+0x1b0>)
 801ba5c:	2201      	movs	r2, #1
 801ba5e:	4252      	negs	r2, r2
 801ba60:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801ba62:	f000 f887 	bl	801bb74 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba66:	f3ef 8310 	mrs	r3, PRIMASK
 801ba6a:	613b      	str	r3, [r7, #16]
  return(result);
 801ba6c:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801ba6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba70:	b672      	cpsid	i
}
 801ba72:	46c0      	nop			; (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801ba74:	4b13      	ldr	r3, [pc, #76]	; (801bac4 <UTIL_SEQ_Run+0x1b4>)
 801ba76:	681a      	ldr	r2, [r3, #0]
 801ba78:	4b10      	ldr	r3, [pc, #64]	; (801babc <UTIL_SEQ_Run+0x1ac>)
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	401a      	ands	r2, r3
 801ba7e:	4b0d      	ldr	r3, [pc, #52]	; (801bab4 <UTIL_SEQ_Run+0x1a4>)
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	4013      	ands	r3, r2
 801ba84:	d107      	bne.n	801ba96 <UTIL_SEQ_Run+0x186>
 801ba86:	4b11      	ldr	r3, [pc, #68]	; (801bacc <UTIL_SEQ_Run+0x1bc>)
 801ba88:	681a      	ldr	r2, [r3, #0]
 801ba8a:	4b11      	ldr	r3, [pc, #68]	; (801bad0 <UTIL_SEQ_Run+0x1c0>)
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	4013      	ands	r3, r2
 801ba90:	d101      	bne.n	801ba96 <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801ba92:	f7e8 fc85 	bl	80043a0 <UTIL_SEQ_Idle>
 801ba96:	69fb      	ldr	r3, [r7, #28]
 801ba98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	f383 8810 	msr	PRIMASK, r3
}
 801baa0:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801baa2:	f000 f86c 	bl	801bb7e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801baa6:	4b03      	ldr	r3, [pc, #12]	; (801bab4 <UTIL_SEQ_Run+0x1a4>)
 801baa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801baaa:	601a      	str	r2, [r3, #0]

  return;
 801baac:	46c0      	nop			; (mov r8, r8)
}
 801baae:	46bd      	mov	sp, r7
 801bab0:	b00c      	add	sp, #48	; 0x30
 801bab2:	bd80      	pop	{r7, pc}
 801bab4:	200001cc 	.word	0x200001cc
 801bab8:	20001998 	.word	0x20001998
 801babc:	200001c8 	.word	0x200001c8
 801bac0:	20001914 	.word	0x20001914
 801bac4:	20001908 	.word	0x20001908
 801bac8:	20001918 	.word	0x20001918
 801bacc:	2000190c 	.word	0x2000190c
 801bad0:	20001910 	.word	0x20001910

0801bad4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b088      	sub	sp, #32
 801bad8:	af00      	add	r7, sp, #0
 801bada:	60f8      	str	r0, [r7, #12]
 801badc:	60b9      	str	r1, [r7, #8]
 801bade:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bae0:	f3ef 8310 	mrs	r3, PRIMASK
 801bae4:	617b      	str	r3, [r7, #20]
  return(result);
 801bae6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801bae8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801baea:	b672      	cpsid	i
}
 801baec:	46c0      	nop			; (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	0018      	movs	r0, r3
 801baf2:	f000 f849 	bl	801bb88 <SEQ_BitPosition>
 801baf6:	0003      	movs	r3, r0
 801baf8:	001a      	movs	r2, r3
 801bafa:	4b07      	ldr	r3, [pc, #28]	; (801bb18 <UTIL_SEQ_RegTask+0x44>)
 801bafc:	0092      	lsls	r2, r2, #2
 801bafe:	6879      	ldr	r1, [r7, #4]
 801bb00:	50d1      	str	r1, [r2, r3]
 801bb02:	69fb      	ldr	r3, [r7, #28]
 801bb04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb06:	69bb      	ldr	r3, [r7, #24]
 801bb08:	f383 8810 	msr	PRIMASK, r3
}
 801bb0c:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801bb0e:	46c0      	nop			; (mov r8, r8)
}
 801bb10:	46bd      	mov	sp, r7
 801bb12:	b008      	add	sp, #32
 801bb14:	bd80      	pop	{r7, pc}
 801bb16:	46c0      	nop			; (mov r8, r8)
 801bb18:	20001918 	.word	0x20001918

0801bb1c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	b086      	sub	sp, #24
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	6078      	str	r0, [r7, #4]
 801bb24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb26:	f3ef 8310 	mrs	r3, PRIMASK
 801bb2a:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb2c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801bb2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb30:	b672      	cpsid	i
}
 801bb32:	46c0      	nop			; (mov r8, r8)

  TaskSet |= TaskId_bm;
 801bb34:	4b0d      	ldr	r3, [pc, #52]	; (801bb6c <UTIL_SEQ_SetTask+0x50>)
 801bb36:	681a      	ldr	r2, [r3, #0]
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	431a      	orrs	r2, r3
 801bb3c:	4b0b      	ldr	r3, [pc, #44]	; (801bb6c <UTIL_SEQ_SetTask+0x50>)
 801bb3e:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801bb40:	4b0b      	ldr	r3, [pc, #44]	; (801bb70 <UTIL_SEQ_SetTask+0x54>)
 801bb42:	683a      	ldr	r2, [r7, #0]
 801bb44:	00d2      	lsls	r2, r2, #3
 801bb46:	58d2      	ldr	r2, [r2, r3]
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	431a      	orrs	r2, r3
 801bb4c:	0011      	movs	r1, r2
 801bb4e:	4b08      	ldr	r3, [pc, #32]	; (801bb70 <UTIL_SEQ_SetTask+0x54>)
 801bb50:	683a      	ldr	r2, [r7, #0]
 801bb52:	00d2      	lsls	r2, r2, #3
 801bb54:	50d1      	str	r1, [r2, r3]
 801bb56:	697b      	ldr	r3, [r7, #20]
 801bb58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb5a:	693b      	ldr	r3, [r7, #16]
 801bb5c:	f383 8810 	msr	PRIMASK, r3
}
 801bb60:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801bb62:	46c0      	nop			; (mov r8, r8)
}
 801bb64:	46bd      	mov	sp, r7
 801bb66:	b006      	add	sp, #24
 801bb68:	bd80      	pop	{r7, pc}
 801bb6a:	46c0      	nop			; (mov r8, r8)
 801bb6c:	20001908 	.word	0x20001908
 801bb70:	20001998 	.word	0x20001998

0801bb74 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801bb74:	b580      	push	{r7, lr}
 801bb76:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801bb78:	46c0      	nop			; (mov r8, r8)
}
 801bb7a:	46bd      	mov	sp, r7
 801bb7c:	bd80      	pop	{r7, pc}

0801bb7e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801bb7e:	b580      	push	{r7, lr}
 801bb80:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801bb82:	46c0      	nop			; (mov r8, r8)
}
 801bb84:	46bd      	mov	sp, r7
 801bb86:	bd80      	pop	{r7, pc}

0801bb88 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801bb88:	b580      	push	{r7, lr}
 801bb8a:	b084      	sub	sp, #16
 801bb8c:	af00      	add	r7, sp, #0
 801bb8e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801bb90:	210f      	movs	r1, #15
 801bb92:	187b      	adds	r3, r7, r1
 801bb94:	2200      	movs	r2, #0
 801bb96:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	0c1b      	lsrs	r3, r3, #16
 801bb9c:	041b      	lsls	r3, r3, #16
 801bb9e:	d105      	bne.n	801bbac <SEQ_BitPosition+0x24>
 801bba0:	187b      	adds	r3, r7, r1
 801bba2:	2210      	movs	r2, #16
 801bba4:	701a      	strb	r2, [r3, #0]
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	041b      	lsls	r3, r3, #16
 801bbaa:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	0e1b      	lsrs	r3, r3, #24
 801bbb0:	061b      	lsls	r3, r3, #24
 801bbb2:	d108      	bne.n	801bbc6 <SEQ_BitPosition+0x3e>
 801bbb4:	220f      	movs	r2, #15
 801bbb6:	18bb      	adds	r3, r7, r2
 801bbb8:	18ba      	adds	r2, r7, r2
 801bbba:	7812      	ldrb	r2, [r2, #0]
 801bbbc:	3208      	adds	r2, #8
 801bbbe:	701a      	strb	r2, [r3, #0]
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	021b      	lsls	r3, r3, #8
 801bbc4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	0f1b      	lsrs	r3, r3, #28
 801bbca:	071b      	lsls	r3, r3, #28
 801bbcc:	d108      	bne.n	801bbe0 <SEQ_BitPosition+0x58>
 801bbce:	220f      	movs	r2, #15
 801bbd0:	18bb      	adds	r3, r7, r2
 801bbd2:	18ba      	adds	r2, r7, r2
 801bbd4:	7812      	ldrb	r2, [r2, #0]
 801bbd6:	3204      	adds	r2, #4
 801bbd8:	701a      	strb	r2, [r3, #0]
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	011b      	lsls	r3, r3, #4
 801bbde:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	0f1b      	lsrs	r3, r3, #28
 801bbe4:	4a08      	ldr	r2, [pc, #32]	; (801bc08 <SEQ_BitPosition+0x80>)
 801bbe6:	5cd1      	ldrb	r1, [r2, r3]
 801bbe8:	200f      	movs	r0, #15
 801bbea:	183b      	adds	r3, r7, r0
 801bbec:	183a      	adds	r2, r7, r0
 801bbee:	7812      	ldrb	r2, [r2, #0]
 801bbf0:	188a      	adds	r2, r1, r2
 801bbf2:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801bbf4:	183b      	adds	r3, r7, r0
 801bbf6:	781b      	ldrb	r3, [r3, #0]
 801bbf8:	221f      	movs	r2, #31
 801bbfa:	1ad3      	subs	r3, r2, r3
 801bbfc:	b2db      	uxtb	r3, r3
}
 801bbfe:	0018      	movs	r0, r3
 801bc00:	46bd      	mov	sp, r7
 801bc02:	b004      	add	sp, #16
 801bc04:	bd80      	pop	{r7, pc}
 801bc06:	46c0      	nop			; (mov r8, r8)
 801bc08:	0801e79c 	.word	0x0801e79c

0801bc0c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801bc0c:	b082      	sub	sp, #8
 801bc0e:	b580      	push	{r7, lr}
 801bc10:	b086      	sub	sp, #24
 801bc12:	af00      	add	r7, sp, #0
 801bc14:	60f8      	str	r0, [r7, #12]
 801bc16:	1d38      	adds	r0, r7, #4
 801bc18:	6001      	str	r1, [r0, #0]
 801bc1a:	6042      	str	r2, [r0, #4]
 801bc1c:	2204      	movs	r2, #4
 801bc1e:	2020      	movs	r0, #32
 801bc20:	1812      	adds	r2, r2, r0
 801bc22:	19d2      	adds	r2, r2, r7
 801bc24:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801bc26:	2110      	movs	r1, #16
 801bc28:	187b      	adds	r3, r7, r1
 801bc2a:	2200      	movs	r2, #0
 801bc2c:	601a      	str	r2, [r3, #0]
 801bc2e:	187b      	adds	r3, r7, r1
 801bc30:	2200      	movs	r2, #0
 801bc32:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801bc34:	1d3b      	adds	r3, r7, #4
 801bc36:	681a      	ldr	r2, [r3, #0]
 801bc38:	2304      	movs	r3, #4
 801bc3a:	181b      	adds	r3, r3, r0
 801bc3c:	19db      	adds	r3, r3, r7
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	18d2      	adds	r2, r2, r3
 801bc42:	187b      	adds	r3, r7, r1
 801bc44:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801bc46:	1d3b      	adds	r3, r7, #4
 801bc48:	2204      	movs	r2, #4
 801bc4a:	5e9b      	ldrsh	r3, [r3, r2]
 801bc4c:	b29a      	uxth	r2, r3
 801bc4e:	2304      	movs	r3, #4
 801bc50:	181b      	adds	r3, r3, r0
 801bc52:	19db      	adds	r3, r3, r7
 801bc54:	2004      	movs	r0, #4
 801bc56:	5e1b      	ldrsh	r3, [r3, r0]
 801bc58:	b29b      	uxth	r3, r3
 801bc5a:	18d3      	adds	r3, r2, r3
 801bc5c:	b29b      	uxth	r3, r3
 801bc5e:	b21a      	sxth	r2, r3
 801bc60:	187b      	adds	r3, r7, r1
 801bc62:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801bc64:	187b      	adds	r3, r7, r1
 801bc66:	2204      	movs	r2, #4
 801bc68:	5e9a      	ldrsh	r2, [r3, r2]
 801bc6a:	23fa      	movs	r3, #250	; 0xfa
 801bc6c:	009b      	lsls	r3, r3, #2
 801bc6e:	429a      	cmp	r2, r3
 801bc70:	db0f      	blt.n	801bc92 <SysTimeAdd+0x86>
  {
    c.Seconds++;
 801bc72:	187b      	adds	r3, r7, r1
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	1c5a      	adds	r2, r3, #1
 801bc78:	187b      	adds	r3, r7, r1
 801bc7a:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801bc7c:	187b      	adds	r3, r7, r1
 801bc7e:	2204      	movs	r2, #4
 801bc80:	5e9b      	ldrsh	r3, [r3, r2]
 801bc82:	b29b      	uxth	r3, r3
 801bc84:	4a09      	ldr	r2, [pc, #36]	; (801bcac <SysTimeAdd+0xa0>)
 801bc86:	4694      	mov	ip, r2
 801bc88:	4463      	add	r3, ip
 801bc8a:	b29b      	uxth	r3, r3
 801bc8c:	b21a      	sxth	r2, r3
 801bc8e:	187b      	adds	r3, r7, r1
 801bc90:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	2210      	movs	r2, #16
 801bc96:	18ba      	adds	r2, r7, r2
 801bc98:	ca03      	ldmia	r2!, {r0, r1}
 801bc9a:	c303      	stmia	r3!, {r0, r1}
}
 801bc9c:	68f8      	ldr	r0, [r7, #12]
 801bc9e:	46bd      	mov	sp, r7
 801bca0:	b006      	add	sp, #24
 801bca2:	bc80      	pop	{r7}
 801bca4:	bc08      	pop	{r3}
 801bca6:	b002      	add	sp, #8
 801bca8:	4718      	bx	r3
 801bcaa:	46c0      	nop			; (mov r8, r8)
 801bcac:	fffffc18 	.word	0xfffffc18

0801bcb0 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801bcb0:	b082      	sub	sp, #8
 801bcb2:	b580      	push	{r7, lr}
 801bcb4:	b086      	sub	sp, #24
 801bcb6:	af00      	add	r7, sp, #0
 801bcb8:	60f8      	str	r0, [r7, #12]
 801bcba:	1d38      	adds	r0, r7, #4
 801bcbc:	6001      	str	r1, [r0, #0]
 801bcbe:	6042      	str	r2, [r0, #4]
 801bcc0:	2204      	movs	r2, #4
 801bcc2:	2020      	movs	r0, #32
 801bcc4:	1812      	adds	r2, r2, r0
 801bcc6:	19d2      	adds	r2, r2, r7
 801bcc8:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801bcca:	2110      	movs	r1, #16
 801bccc:	187b      	adds	r3, r7, r1
 801bcce:	2200      	movs	r2, #0
 801bcd0:	601a      	str	r2, [r3, #0]
 801bcd2:	187b      	adds	r3, r7, r1
 801bcd4:	2200      	movs	r2, #0
 801bcd6:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801bcd8:	1d3b      	adds	r3, r7, #4
 801bcda:	681a      	ldr	r2, [r3, #0]
 801bcdc:	2304      	movs	r3, #4
 801bcde:	181b      	adds	r3, r3, r0
 801bce0:	19db      	adds	r3, r3, r7
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	1ad2      	subs	r2, r2, r3
 801bce6:	187b      	adds	r3, r7, r1
 801bce8:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801bcea:	1d3b      	adds	r3, r7, #4
 801bcec:	2204      	movs	r2, #4
 801bcee:	5e9b      	ldrsh	r3, [r3, r2]
 801bcf0:	b29a      	uxth	r2, r3
 801bcf2:	2304      	movs	r3, #4
 801bcf4:	181b      	adds	r3, r3, r0
 801bcf6:	19db      	adds	r3, r3, r7
 801bcf8:	2004      	movs	r0, #4
 801bcfa:	5e1b      	ldrsh	r3, [r3, r0]
 801bcfc:	b29b      	uxth	r3, r3
 801bcfe:	1ad3      	subs	r3, r2, r3
 801bd00:	b29b      	uxth	r3, r3
 801bd02:	b21a      	sxth	r2, r3
 801bd04:	187b      	adds	r3, r7, r1
 801bd06:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801bd08:	187b      	adds	r3, r7, r1
 801bd0a:	2204      	movs	r2, #4
 801bd0c:	5e9b      	ldrsh	r3, [r3, r2]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	da10      	bge.n	801bd34 <SysTimeSub+0x84>
  {
    c.Seconds--;
 801bd12:	187b      	adds	r3, r7, r1
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	1e5a      	subs	r2, r3, #1
 801bd18:	187b      	adds	r3, r7, r1
 801bd1a:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801bd1c:	187b      	adds	r3, r7, r1
 801bd1e:	2204      	movs	r2, #4
 801bd20:	5e9b      	ldrsh	r3, [r3, r2]
 801bd22:	b29b      	uxth	r3, r3
 801bd24:	22fa      	movs	r2, #250	; 0xfa
 801bd26:	0092      	lsls	r2, r2, #2
 801bd28:	4694      	mov	ip, r2
 801bd2a:	4463      	add	r3, ip
 801bd2c:	b29b      	uxth	r3, r3
 801bd2e:	b21a      	sxth	r2, r3
 801bd30:	187b      	adds	r3, r7, r1
 801bd32:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	2210      	movs	r2, #16
 801bd38:	18ba      	adds	r2, r7, r2
 801bd3a:	ca03      	ldmia	r2!, {r0, r1}
 801bd3c:	c303      	stmia	r3!, {r0, r1}
}
 801bd3e:	68f8      	ldr	r0, [r7, #12]
 801bd40:	46bd      	mov	sp, r7
 801bd42:	b006      	add	sp, #24
 801bd44:	bc80      	pop	{r7}
 801bd46:	bc08      	pop	{r3}
 801bd48:	b002      	add	sp, #8
 801bd4a:	4718      	bx	r3

0801bd4c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801bd4c:	b5b0      	push	{r4, r5, r7, lr}
 801bd4e:	b088      	sub	sp, #32
 801bd50:	af02      	add	r7, sp, #8
 801bd52:	003b      	movs	r3, r7
 801bd54:	6018      	str	r0, [r3, #0]
 801bd56:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bd58:	2108      	movs	r1, #8
 801bd5a:	187b      	adds	r3, r7, r1
 801bd5c:	2200      	movs	r2, #0
 801bd5e:	601a      	str	r2, [r3, #0]
 801bd60:	187b      	adds	r3, r7, r1
 801bd62:	2200      	movs	r2, #0
 801bd64:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bd66:	4b14      	ldr	r3, [pc, #80]	; (801bdb8 <SysTimeSet+0x6c>)
 801bd68:	691b      	ldr	r3, [r3, #16]
 801bd6a:	000c      	movs	r4, r1
 801bd6c:	187a      	adds	r2, r7, r1
 801bd6e:	3204      	adds	r2, #4
 801bd70:	0010      	movs	r0, r2
 801bd72:	4798      	blx	r3
 801bd74:	0002      	movs	r2, r0
 801bd76:	0021      	movs	r1, r4
 801bd78:	187b      	adds	r3, r7, r1
 801bd7a:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801bd7c:	2510      	movs	r5, #16
 801bd7e:	197c      	adds	r4, r7, r5
 801bd80:	187b      	adds	r3, r7, r1
 801bd82:	003a      	movs	r2, r7
 801bd84:	4669      	mov	r1, sp
 801bd86:	6858      	ldr	r0, [r3, #4]
 801bd88:	6008      	str	r0, [r1, #0]
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	6811      	ldr	r1, [r2, #0]
 801bd8e:	6852      	ldr	r2, [r2, #4]
 801bd90:	0020      	movs	r0, r4
 801bd92:	f7ff ff8d 	bl	801bcb0 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801bd96:	4b08      	ldr	r3, [pc, #32]	; (801bdb8 <SysTimeSet+0x6c>)
 801bd98:	681a      	ldr	r2, [r3, #0]
 801bd9a:	197b      	adds	r3, r7, r5
 801bd9c:	681b      	ldr	r3, [r3, #0]
 801bd9e:	0018      	movs	r0, r3
 801bda0:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801bda2:	4b05      	ldr	r3, [pc, #20]	; (801bdb8 <SysTimeSet+0x6c>)
 801bda4:	689b      	ldr	r3, [r3, #8]
 801bda6:	197a      	adds	r2, r7, r5
 801bda8:	2104      	movs	r1, #4
 801bdaa:	5e52      	ldrsh	r2, [r2, r1]
 801bdac:	0010      	movs	r0, r2
 801bdae:	4798      	blx	r3
}
 801bdb0:	46c0      	nop			; (mov r8, r8)
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	b006      	add	sp, #24
 801bdb6:	bdb0      	pop	{r4, r5, r7, pc}
 801bdb8:	0801d988 	.word	0x0801d988

0801bdbc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801bdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdbe:	b08b      	sub	sp, #44	; 0x2c
 801bdc0:	af02      	add	r7, sp, #8
 801bdc2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801bdc4:	2518      	movs	r5, #24
 801bdc6:	197b      	adds	r3, r7, r5
 801bdc8:	2200      	movs	r2, #0
 801bdca:	601a      	str	r2, [r3, #0]
 801bdcc:	197b      	adds	r3, r7, r5
 801bdce:	2200      	movs	r2, #0
 801bdd0:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801bdd2:	2410      	movs	r4, #16
 801bdd4:	193b      	adds	r3, r7, r4
 801bdd6:	2200      	movs	r2, #0
 801bdd8:	601a      	str	r2, [r3, #0]
 801bdda:	193b      	adds	r3, r7, r4
 801bddc:	2200      	movs	r2, #0
 801bdde:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801bde0:	4b16      	ldr	r3, [pc, #88]	; (801be3c <SysTimeGet+0x80>)
 801bde2:	691b      	ldr	r3, [r3, #16]
 801bde4:	197a      	adds	r2, r7, r5
 801bde6:	3204      	adds	r2, #4
 801bde8:	0010      	movs	r0, r2
 801bdea:	4798      	blx	r3
 801bdec:	0002      	movs	r2, r0
 801bdee:	197b      	adds	r3, r7, r5
 801bdf0:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bdf2:	4b12      	ldr	r3, [pc, #72]	; (801be3c <SysTimeGet+0x80>)
 801bdf4:	68db      	ldr	r3, [r3, #12]
 801bdf6:	4798      	blx	r3
 801bdf8:	0003      	movs	r3, r0
 801bdfa:	b21a      	sxth	r2, r3
 801bdfc:	2608      	movs	r6, #8
 801bdfe:	19bb      	adds	r3, r7, r6
 801be00:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801be02:	4b0e      	ldr	r3, [pc, #56]	; (801be3c <SysTimeGet+0x80>)
 801be04:	685b      	ldr	r3, [r3, #4]
 801be06:	4798      	blx	r3
 801be08:	0002      	movs	r2, r0
 801be0a:	0031      	movs	r1, r6
 801be0c:	187b      	adds	r3, r7, r1
 801be0e:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801be10:	0026      	movs	r6, r4
 801be12:	193c      	adds	r4, r7, r4
 801be14:	197b      	adds	r3, r7, r5
 801be16:	187a      	adds	r2, r7, r1
 801be18:	4669      	mov	r1, sp
 801be1a:	6858      	ldr	r0, [r3, #4]
 801be1c:	6008      	str	r0, [r1, #0]
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	6811      	ldr	r1, [r2, #0]
 801be22:	6852      	ldr	r2, [r2, #4]
 801be24:	0020      	movs	r0, r4
 801be26:	f7ff fef1 	bl	801bc0c <SysTimeAdd>

  return sysTime;
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	19ba      	adds	r2, r7, r6
 801be2e:	ca03      	ldmia	r2!, {r0, r1}
 801be30:	c303      	stmia	r3!, {r0, r1}
}
 801be32:	6878      	ldr	r0, [r7, #4]
 801be34:	46bd      	mov	sp, r7
 801be36:	b009      	add	sp, #36	; 0x24
 801be38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be3a:	46c0      	nop			; (mov r8, r8)
 801be3c:	0801d988 	.word	0x0801d988

0801be40 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801be40:	b590      	push	{r4, r7, lr}
 801be42:	b085      	sub	sp, #20
 801be44:	af00      	add	r7, sp, #0
 801be46:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801be48:	2108      	movs	r1, #8
 801be4a:	187b      	adds	r3, r7, r1
 801be4c:	2200      	movs	r2, #0
 801be4e:	601a      	str	r2, [r3, #0]
 801be50:	187b      	adds	r3, r7, r1
 801be52:	2200      	movs	r2, #0
 801be54:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801be56:	4b09      	ldr	r3, [pc, #36]	; (801be7c <SysTimeGetMcuTime+0x3c>)
 801be58:	691b      	ldr	r3, [r3, #16]
 801be5a:	000c      	movs	r4, r1
 801be5c:	187a      	adds	r2, r7, r1
 801be5e:	3204      	adds	r2, #4
 801be60:	0010      	movs	r0, r2
 801be62:	4798      	blx	r3
 801be64:	0002      	movs	r2, r0
 801be66:	193b      	adds	r3, r7, r4
 801be68:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	193a      	adds	r2, r7, r4
 801be6e:	ca03      	ldmia	r2!, {r0, r1}
 801be70:	c303      	stmia	r3!, {r0, r1}
}
 801be72:	6878      	ldr	r0, [r7, #4]
 801be74:	46bd      	mov	sp, r7
 801be76:	b005      	add	sp, #20
 801be78:	bd90      	pop	{r4, r7, pc}
 801be7a:	46c0      	nop			; (mov r8, r8)
 801be7c:	0801d988 	.word	0x0801d988

0801be80 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801be80:	b580      	push	{r7, lr}
 801be82:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801be84:	4b04      	ldr	r3, [pc, #16]	; (801be98 <UTIL_TIMER_Init+0x18>)
 801be86:	2200      	movs	r2, #0
 801be88:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801be8a:	4b04      	ldr	r3, [pc, #16]	; (801be9c <UTIL_TIMER_Init+0x1c>)
 801be8c:	681b      	ldr	r3, [r3, #0]
 801be8e:	4798      	blx	r3
 801be90:	0003      	movs	r3, r0
}
 801be92:	0018      	movs	r0, r3
 801be94:	46bd      	mov	sp, r7
 801be96:	bd80      	pop	{r7, pc}
 801be98:	200019a8 	.word	0x200019a8
 801be9c:	0801d95c 	.word	0x0801d95c

0801bea0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801bea0:	b580      	push	{r7, lr}
 801bea2:	b084      	sub	sp, #16
 801bea4:	af00      	add	r7, sp, #0
 801bea6:	60f8      	str	r0, [r7, #12]
 801bea8:	60b9      	str	r1, [r7, #8]
 801beaa:	603b      	str	r3, [r7, #0]
 801beac:	1dfb      	adds	r3, r7, #7
 801beae:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d025      	beq.n	801bf02 <UTIL_TIMER_Create+0x62>
 801beb6:	683b      	ldr	r3, [r7, #0]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d022      	beq.n	801bf02 <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	2200      	movs	r2, #0
 801bec0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801bec2:	4b12      	ldr	r3, [pc, #72]	; (801bf0c <UTIL_TIMER_Create+0x6c>)
 801bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bec6:	68ba      	ldr	r2, [r7, #8]
 801bec8:	0010      	movs	r0, r2
 801beca:	4798      	blx	r3
 801becc:	0002      	movs	r2, r0
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	2200      	movs	r2, #0
 801bed6:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	2200      	movs	r2, #0
 801bedc:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	2200      	movs	r2, #0
 801bee2:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	683a      	ldr	r2, [r7, #0]
 801bee8:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801beea:	68fb      	ldr	r3, [r7, #12]
 801beec:	69ba      	ldr	r2, [r7, #24]
 801beee:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	1dfa      	adds	r2, r7, #7
 801bef4:	7812      	ldrb	r2, [r2, #0]
 801bef6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	2200      	movs	r2, #0
 801befc:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801befe:	2300      	movs	r3, #0
 801bf00:	e000      	b.n	801bf04 <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801bf02:	2301      	movs	r3, #1
  }
}
 801bf04:	0018      	movs	r0, r3
 801bf06:	46bd      	mov	sp, r7
 801bf08:	b004      	add	sp, #16
 801bf0a:	bd80      	pop	{r7, pc}
 801bf0c:	0801d95c 	.word	0x0801d95c

0801bf10 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b08a      	sub	sp, #40	; 0x28
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bf18:	2327      	movs	r3, #39	; 0x27
 801bf1a:	18fb      	adds	r3, r7, r3
 801bf1c:	2200      	movs	r2, #0
 801bf1e:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d05d      	beq.n	801bfe2 <UTIL_TIMER_Start+0xd2>
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	0018      	movs	r0, r3
 801bf2a:	f000 f9cb 	bl	801c2c4 <TimerExists>
 801bf2e:	0003      	movs	r3, r0
 801bf30:	001a      	movs	r2, r3
 801bf32:	2301      	movs	r3, #1
 801bf34:	4053      	eors	r3, r2
 801bf36:	b2db      	uxtb	r3, r3
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d052      	beq.n	801bfe2 <UTIL_TIMER_Start+0xd2>
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	7a5b      	ldrb	r3, [r3, #9]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d14e      	bne.n	801bfe2 <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf44:	f3ef 8310 	mrs	r3, PRIMASK
 801bf48:	613b      	str	r3, [r7, #16]
  return(result);
 801bf4a:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bf4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf4e:	b672      	cpsid	i
}
 801bf50:	46c0      	nop			; (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	685b      	ldr	r3, [r3, #4]
 801bf56:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801bf58:	4b27      	ldr	r3, [pc, #156]	; (801bff8 <UTIL_TIMER_Start+0xe8>)
 801bf5a:	6a1b      	ldr	r3, [r3, #32]
 801bf5c:	4798      	blx	r3
 801bf5e:	0003      	movs	r3, r0
 801bf60:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801bf62:	6a3a      	ldr	r2, [r7, #32]
 801bf64:	69bb      	ldr	r3, [r7, #24]
 801bf66:	429a      	cmp	r2, r3
 801bf68:	d201      	bcs.n	801bf6e <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801bf6a:	69bb      	ldr	r3, [r7, #24]
 801bf6c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	6a3a      	ldr	r2, [r7, #32]
 801bf72:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	2200      	movs	r2, #0
 801bf78:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	2201      	movs	r2, #1
 801bf7e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	2200      	movs	r2, #0
 801bf84:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801bf86:	4b1d      	ldr	r3, [pc, #116]	; (801bffc <UTIL_TIMER_Start+0xec>)
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d107      	bne.n	801bf9e <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801bf8e:	4b1a      	ldr	r3, [pc, #104]	; (801bff8 <UTIL_TIMER_Start+0xe8>)
 801bf90:	691b      	ldr	r3, [r3, #16]
 801bf92:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	0018      	movs	r0, r3
 801bf98:	f000 fa08 	bl	801c3ac <TimerInsertNewHeadTimer>
 801bf9c:	e01a      	b.n	801bfd4 <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801bf9e:	4b16      	ldr	r3, [pc, #88]	; (801bff8 <UTIL_TIMER_Start+0xe8>)
 801bfa0:	699b      	ldr	r3, [r3, #24]
 801bfa2:	4798      	blx	r3
 801bfa4:	0003      	movs	r3, r0
 801bfa6:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	681a      	ldr	r2, [r3, #0]
 801bfac:	697b      	ldr	r3, [r7, #20]
 801bfae:	18d2      	adds	r2, r2, r3
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	681a      	ldr	r2, [r3, #0]
 801bfb8:	4b10      	ldr	r3, [pc, #64]	; (801bffc <UTIL_TIMER_Start+0xec>)
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	429a      	cmp	r2, r3
 801bfc0:	d204      	bcs.n	801bfcc <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	0018      	movs	r0, r3
 801bfc6:	f000 f9f1 	bl	801c3ac <TimerInsertNewHeadTimer>
 801bfca:	e003      	b.n	801bfd4 <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	0018      	movs	r0, r3
 801bfd0:	f000 f9be 	bl	801c350 <TimerInsertTimer>
 801bfd4:	69fb      	ldr	r3, [r7, #28]
 801bfd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	f383 8810 	msr	PRIMASK, r3
}
 801bfde:	46c0      	nop			; (mov r8, r8)
  {
 801bfe0:	e003      	b.n	801bfea <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801bfe2:	2327      	movs	r3, #39	; 0x27
 801bfe4:	18fb      	adds	r3, r7, r3
 801bfe6:	2201      	movs	r2, #1
 801bfe8:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801bfea:	2327      	movs	r3, #39	; 0x27
 801bfec:	18fb      	adds	r3, r7, r3
 801bfee:	781b      	ldrb	r3, [r3, #0]
}
 801bff0:	0018      	movs	r0, r3
 801bff2:	46bd      	mov	sp, r7
 801bff4:	b00a      	add	sp, #40	; 0x28
 801bff6:	bd80      	pop	{r7, pc}
 801bff8:	0801d95c 	.word	0x0801d95c
 801bffc:	200019a8 	.word	0x200019a8

0801c000 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c000:	b580      	push	{r7, lr}
 801c002:	b088      	sub	sp, #32
 801c004:	af00      	add	r7, sp, #0
 801c006:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c008:	231f      	movs	r3, #31
 801c00a:	18fb      	adds	r3, r7, r3
 801c00c:	2200      	movs	r2, #0
 801c00e:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	2b00      	cmp	r3, #0
 801c014:	d05d      	beq.n	801c0d2 <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c016:	f3ef 8310 	mrs	r3, PRIMASK
 801c01a:	60fb      	str	r3, [r7, #12]
  return(result);
 801c01c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c01e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c020:	b672      	cpsid	i
}
 801c022:	46c0      	nop			; (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c024:	4b30      	ldr	r3, [pc, #192]	; (801c0e8 <UTIL_TIMER_Stop+0xe8>)
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c02a:	4b2f      	ldr	r3, [pc, #188]	; (801c0e8 <UTIL_TIMER_Stop+0xe8>)
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	2201      	movs	r2, #1
 801c034:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c036:	4b2c      	ldr	r3, [pc, #176]	; (801c0e8 <UTIL_TIMER_Stop+0xe8>)
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d043      	beq.n	801c0c6 <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	2200      	movs	r2, #0
 801c042:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c044:	4b28      	ldr	r3, [pc, #160]	; (801c0e8 <UTIL_TIMER_Stop+0xe8>)
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	687a      	ldr	r2, [r7, #4]
 801c04a:	429a      	cmp	r2, r3
 801c04c:	d134      	bne.n	801c0b8 <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801c04e:	4b26      	ldr	r3, [pc, #152]	; (801c0e8 <UTIL_TIMER_Stop+0xe8>)
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	2200      	movs	r2, #0
 801c054:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c056:	4b24      	ldr	r3, [pc, #144]	; (801c0e8 <UTIL_TIMER_Stop+0xe8>)
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	695b      	ldr	r3, [r3, #20]
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d00a      	beq.n	801c076 <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801c060:	4b21      	ldr	r3, [pc, #132]	; (801c0e8 <UTIL_TIMER_Stop+0xe8>)
 801c062:	681b      	ldr	r3, [r3, #0]
 801c064:	695a      	ldr	r2, [r3, #20]
 801c066:	4b20      	ldr	r3, [pc, #128]	; (801c0e8 <UTIL_TIMER_Stop+0xe8>)
 801c068:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801c06a:	4b1f      	ldr	r3, [pc, #124]	; (801c0e8 <UTIL_TIMER_Stop+0xe8>)
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	0018      	movs	r0, r3
 801c070:	f000 f944 	bl	801c2fc <TimerSetTimeout>
 801c074:	e023      	b.n	801c0be <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c076:	4b1d      	ldr	r3, [pc, #116]	; (801c0ec <UTIL_TIMER_Stop+0xec>)
 801c078:	68db      	ldr	r3, [r3, #12]
 801c07a:	4798      	blx	r3
            TimerListHead = NULL;
 801c07c:	4b1a      	ldr	r3, [pc, #104]	; (801c0e8 <UTIL_TIMER_Stop+0xe8>)
 801c07e:	2200      	movs	r2, #0
 801c080:	601a      	str	r2, [r3, #0]
 801c082:	e01c      	b.n	801c0be <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c084:	697a      	ldr	r2, [r7, #20]
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	429a      	cmp	r2, r3
 801c08a:	d110      	bne.n	801c0ae <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801c08c:	697b      	ldr	r3, [r7, #20]
 801c08e:	695b      	ldr	r3, [r3, #20]
 801c090:	2b00      	cmp	r3, #0
 801c092:	d006      	beq.n	801c0a2 <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801c094:	697b      	ldr	r3, [r7, #20]
 801c096:	695b      	ldr	r3, [r3, #20]
 801c098:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c09a:	69bb      	ldr	r3, [r7, #24]
 801c09c:	697a      	ldr	r2, [r7, #20]
 801c09e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c0a0:	e00d      	b.n	801c0be <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c0a6:	69bb      	ldr	r3, [r7, #24]
 801c0a8:	697a      	ldr	r2, [r7, #20]
 801c0aa:	615a      	str	r2, [r3, #20]
            break;
 801c0ac:	e007      	b.n	801c0be <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801c0ae:	697b      	ldr	r3, [r7, #20]
 801c0b0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c0b2:	697b      	ldr	r3, [r7, #20]
 801c0b4:	695b      	ldr	r3, [r3, #20]
 801c0b6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c0b8:	697b      	ldr	r3, [r7, #20]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d1e2      	bne.n	801c084 <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c0be:	231f      	movs	r3, #31
 801c0c0:	18fb      	adds	r3, r7, r3
 801c0c2:	2200      	movs	r2, #0
 801c0c4:	701a      	strb	r2, [r3, #0]
 801c0c6:	693b      	ldr	r3, [r7, #16]
 801c0c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0ca:	68bb      	ldr	r3, [r7, #8]
 801c0cc:	f383 8810 	msr	PRIMASK, r3
}
 801c0d0:	e003      	b.n	801c0da <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c0d2:	231f      	movs	r3, #31
 801c0d4:	18fb      	adds	r3, r7, r3
 801c0d6:	2201      	movs	r2, #1
 801c0d8:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801c0da:	231f      	movs	r3, #31
 801c0dc:	18fb      	adds	r3, r7, r3
 801c0de:	781b      	ldrb	r3, [r3, #0]
}
 801c0e0:	0018      	movs	r0, r3
 801c0e2:	46bd      	mov	sp, r7
 801c0e4:	b008      	add	sp, #32
 801c0e6:	bd80      	pop	{r7, pc}
 801c0e8:	200019a8 	.word	0x200019a8
 801c0ec:	0801d95c 	.word	0x0801d95c

0801c0f0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c0f0:	b590      	push	{r4, r7, lr}
 801c0f2:	b085      	sub	sp, #20
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	6078      	str	r0, [r7, #4]
 801c0f8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c0fa:	210f      	movs	r1, #15
 801c0fc:	187b      	adds	r3, r7, r1
 801c0fe:	2200      	movs	r2, #0
 801c100:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d103      	bne.n	801c110 <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c108:	187b      	adds	r3, r7, r1
 801c10a:	2201      	movs	r2, #1
 801c10c:	701a      	strb	r2, [r3, #0]
 801c10e:	e019      	b.n	801c144 <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c110:	4b10      	ldr	r3, [pc, #64]	; (801c154 <UTIL_TIMER_SetPeriod+0x64>)
 801c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c114:	683a      	ldr	r2, [r7, #0]
 801c116:	0010      	movs	r0, r2
 801c118:	4798      	blx	r3
 801c11a:	0002      	movs	r2, r0
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	0018      	movs	r0, r3
 801c124:	f000 f8ce 	bl	801c2c4 <TimerExists>
 801c128:	1e03      	subs	r3, r0, #0
 801c12a:	d00b      	beq.n	801c144 <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	0018      	movs	r0, r3
 801c130:	f7ff ff66 	bl	801c000 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c134:	230f      	movs	r3, #15
 801c136:	18fc      	adds	r4, r7, r3
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	0018      	movs	r0, r3
 801c13c:	f7ff fee8 	bl	801bf10 <UTIL_TIMER_Start>
 801c140:	0003      	movs	r3, r0
 801c142:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801c144:	230f      	movs	r3, #15
 801c146:	18fb      	adds	r3, r7, r3
 801c148:	781b      	ldrb	r3, [r3, #0]
}
 801c14a:	0018      	movs	r0, r3
 801c14c:	46bd      	mov	sp, r7
 801c14e:	b005      	add	sp, #20
 801c150:	bd90      	pop	{r4, r7, pc}
 801c152:	46c0      	nop			; (mov r8, r8)
 801c154:	0801d95c 	.word	0x0801d95c

0801c158 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c158:	b590      	push	{r4, r7, lr}
 801c15a:	b089      	sub	sp, #36	; 0x24
 801c15c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c15e:	f3ef 8310 	mrs	r3, PRIMASK
 801c162:	60bb      	str	r3, [r7, #8]
  return(result);
 801c164:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c166:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c168:	b672      	cpsid	i
}
 801c16a:	46c0      	nop			; (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c16c:	4b3a      	ldr	r3, [pc, #232]	; (801c258 <UTIL_TIMER_IRQ_Handler+0x100>)
 801c16e:	695b      	ldr	r3, [r3, #20]
 801c170:	4798      	blx	r3
 801c172:	0003      	movs	r3, r0
 801c174:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c176:	4b38      	ldr	r3, [pc, #224]	; (801c258 <UTIL_TIMER_IRQ_Handler+0x100>)
 801c178:	691b      	ldr	r3, [r3, #16]
 801c17a:	4798      	blx	r3
 801c17c:	0003      	movs	r3, r0
 801c17e:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c180:	693a      	ldr	r2, [r7, #16]
 801c182:	697b      	ldr	r3, [r7, #20]
 801c184:	1ad3      	subs	r3, r2, r3
 801c186:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c188:	4b34      	ldr	r3, [pc, #208]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d038      	beq.n	801c202 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801c190:	4b32      	ldr	r3, [pc, #200]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c196:	69fb      	ldr	r3, [r7, #28]
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	68fa      	ldr	r2, [r7, #12]
 801c19c:	429a      	cmp	r2, r3
 801c19e:	d206      	bcs.n	801c1ae <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801c1a0:	69fb      	ldr	r3, [r7, #28]
 801c1a2:	681a      	ldr	r2, [r3, #0]
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	1ad2      	subs	r2, r2, r3
 801c1a8:	69fb      	ldr	r3, [r7, #28]
 801c1aa:	601a      	str	r2, [r3, #0]
 801c1ac:	e002      	b.n	801c1b4 <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801c1ae:	69fb      	ldr	r3, [r7, #28]
 801c1b0:	2200      	movs	r2, #0
 801c1b2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c1b4:	69fb      	ldr	r3, [r7, #28]
 801c1b6:	695b      	ldr	r3, [r3, #20]
 801c1b8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c1ba:	69fb      	ldr	r3, [r7, #28]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d1ea      	bne.n	801c196 <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c1c0:	e01f      	b.n	801c202 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801c1c2:	4b26      	ldr	r3, [pc, #152]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c1c8:	4b24      	ldr	r3, [pc, #144]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	695a      	ldr	r2, [r3, #20]
 801c1ce:	4b23      	ldr	r3, [pc, #140]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c1d0:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801c1d2:	69fb      	ldr	r3, [r7, #28]
 801c1d4:	2200      	movs	r2, #0
 801c1d6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c1d8:	69fb      	ldr	r3, [r7, #28]
 801c1da:	2200      	movs	r2, #0
 801c1dc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c1de:	69fb      	ldr	r3, [r7, #28]
 801c1e0:	68da      	ldr	r2, [r3, #12]
 801c1e2:	69fb      	ldr	r3, [r7, #28]
 801c1e4:	691b      	ldr	r3, [r3, #16]
 801c1e6:	0018      	movs	r0, r3
 801c1e8:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c1ea:	69fb      	ldr	r3, [r7, #28]
 801c1ec:	7adb      	ldrb	r3, [r3, #11]
 801c1ee:	2b01      	cmp	r3, #1
 801c1f0:	d107      	bne.n	801c202 <UTIL_TIMER_IRQ_Handler+0xaa>
 801c1f2:	69fb      	ldr	r3, [r7, #28]
 801c1f4:	7a9b      	ldrb	r3, [r3, #10]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d103      	bne.n	801c202 <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801c1fa:	69fb      	ldr	r3, [r7, #28]
 801c1fc:	0018      	movs	r0, r3
 801c1fe:	f7ff fe87 	bl	801bf10 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c202:	4b16      	ldr	r3, [pc, #88]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	2b00      	cmp	r3, #0
 801c208:	d00d      	beq.n	801c226 <UTIL_TIMER_IRQ_Handler+0xce>
 801c20a:	4b14      	ldr	r3, [pc, #80]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d0d6      	beq.n	801c1c2 <UTIL_TIMER_IRQ_Handler+0x6a>
 801c214:	4b11      	ldr	r3, [pc, #68]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	681c      	ldr	r4, [r3, #0]
 801c21a:	4b0f      	ldr	r3, [pc, #60]	; (801c258 <UTIL_TIMER_IRQ_Handler+0x100>)
 801c21c:	699b      	ldr	r3, [r3, #24]
 801c21e:	4798      	blx	r3
 801c220:	0003      	movs	r3, r0
 801c222:	429c      	cmp	r4, r3
 801c224:	d3cd      	bcc.n	801c1c2 <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c226:	4b0d      	ldr	r3, [pc, #52]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d009      	beq.n	801c242 <UTIL_TIMER_IRQ_Handler+0xea>
 801c22e:	4b0b      	ldr	r3, [pc, #44]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	7a1b      	ldrb	r3, [r3, #8]
 801c234:	2b00      	cmp	r3, #0
 801c236:	d104      	bne.n	801c242 <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801c238:	4b08      	ldr	r3, [pc, #32]	; (801c25c <UTIL_TIMER_IRQ_Handler+0x104>)
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	0018      	movs	r0, r3
 801c23e:	f000 f85d 	bl	801c2fc <TimerSetTimeout>
 801c242:	69bb      	ldr	r3, [r7, #24]
 801c244:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	f383 8810 	msr	PRIMASK, r3
}
 801c24c:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c24e:	46c0      	nop			; (mov r8, r8)
 801c250:	46bd      	mov	sp, r7
 801c252:	b009      	add	sp, #36	; 0x24
 801c254:	bd90      	pop	{r4, r7, pc}
 801c256:	46c0      	nop			; (mov r8, r8)
 801c258:	0801d95c 	.word	0x0801d95c
 801c25c:	200019a8 	.word	0x200019a8

0801c260 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c260:	b580      	push	{r7, lr}
 801c262:	b082      	sub	sp, #8
 801c264:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c266:	4b07      	ldr	r3, [pc, #28]	; (801c284 <UTIL_TIMER_GetCurrentTime+0x24>)
 801c268:	69db      	ldr	r3, [r3, #28]
 801c26a:	4798      	blx	r3
 801c26c:	0003      	movs	r3, r0
 801c26e:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c270:	4b04      	ldr	r3, [pc, #16]	; (801c284 <UTIL_TIMER_GetCurrentTime+0x24>)
 801c272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c274:	687a      	ldr	r2, [r7, #4]
 801c276:	0010      	movs	r0, r2
 801c278:	4798      	blx	r3
 801c27a:	0003      	movs	r3, r0
}
 801c27c:	0018      	movs	r0, r3
 801c27e:	46bd      	mov	sp, r7
 801c280:	b002      	add	sp, #8
 801c282:	bd80      	pop	{r7, pc}
 801c284:	0801d95c 	.word	0x0801d95c

0801c288 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c288:	b580      	push	{r7, lr}
 801c28a:	b084      	sub	sp, #16
 801c28c:	af00      	add	r7, sp, #0
 801c28e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c290:	4b0b      	ldr	r3, [pc, #44]	; (801c2c0 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c292:	69db      	ldr	r3, [r3, #28]
 801c294:	4798      	blx	r3
 801c296:	0003      	movs	r3, r0
 801c298:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c29a:	4b09      	ldr	r3, [pc, #36]	; (801c2c0 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c29e:	687a      	ldr	r2, [r7, #4]
 801c2a0:	0010      	movs	r0, r2
 801c2a2:	4798      	blx	r3
 801c2a4:	0003      	movs	r3, r0
 801c2a6:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c2a8:	4b05      	ldr	r3, [pc, #20]	; (801c2c0 <UTIL_TIMER_GetElapsedTime+0x38>)
 801c2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2ac:	68f9      	ldr	r1, [r7, #12]
 801c2ae:	68ba      	ldr	r2, [r7, #8]
 801c2b0:	1a8a      	subs	r2, r1, r2
 801c2b2:	0010      	movs	r0, r2
 801c2b4:	4798      	blx	r3
 801c2b6:	0003      	movs	r3, r0
}
 801c2b8:	0018      	movs	r0, r3
 801c2ba:	46bd      	mov	sp, r7
 801c2bc:	b004      	add	sp, #16
 801c2be:	bd80      	pop	{r7, pc}
 801c2c0:	0801d95c 	.word	0x0801d95c

0801c2c4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c2c4:	b580      	push	{r7, lr}
 801c2c6:	b084      	sub	sp, #16
 801c2c8:	af00      	add	r7, sp, #0
 801c2ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c2cc:	4b0a      	ldr	r3, [pc, #40]	; (801c2f8 <TimerExists+0x34>)
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c2d2:	e008      	b.n	801c2e6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c2d4:	68fa      	ldr	r2, [r7, #12]
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	429a      	cmp	r2, r3
 801c2da:	d101      	bne.n	801c2e0 <TimerExists+0x1c>
    {
      return true;
 801c2dc:	2301      	movs	r3, #1
 801c2de:	e006      	b.n	801c2ee <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	695b      	ldr	r3, [r3, #20]
 801c2e4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d1f3      	bne.n	801c2d4 <TimerExists+0x10>
  }
  return false;
 801c2ec:	2300      	movs	r3, #0
}
 801c2ee:	0018      	movs	r0, r3
 801c2f0:	46bd      	mov	sp, r7
 801c2f2:	b004      	add	sp, #16
 801c2f4:	bd80      	pop	{r7, pc}
 801c2f6:	46c0      	nop			; (mov r8, r8)
 801c2f8:	200019a8 	.word	0x200019a8

0801c2fc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c2fc:	b590      	push	{r4, r7, lr}
 801c2fe:	b085      	sub	sp, #20
 801c300:	af00      	add	r7, sp, #0
 801c302:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c304:	4b11      	ldr	r3, [pc, #68]	; (801c34c <TimerSetTimeout+0x50>)
 801c306:	6a1b      	ldr	r3, [r3, #32]
 801c308:	4798      	blx	r3
 801c30a:	0003      	movs	r3, r0
 801c30c:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	2201      	movs	r2, #1
 801c312:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	681c      	ldr	r4, [r3, #0]
 801c318:	4b0c      	ldr	r3, [pc, #48]	; (801c34c <TimerSetTimeout+0x50>)
 801c31a:	699b      	ldr	r3, [r3, #24]
 801c31c:	4798      	blx	r3
 801c31e:	0002      	movs	r2, r0
 801c320:	68fb      	ldr	r3, [r7, #12]
 801c322:	18d3      	adds	r3, r2, r3
 801c324:	429c      	cmp	r4, r3
 801c326:	d207      	bcs.n	801c338 <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c328:	4b08      	ldr	r3, [pc, #32]	; (801c34c <TimerSetTimeout+0x50>)
 801c32a:	699b      	ldr	r3, [r3, #24]
 801c32c:	4798      	blx	r3
 801c32e:	0002      	movs	r2, r0
 801c330:	68fb      	ldr	r3, [r7, #12]
 801c332:	18d2      	adds	r2, r2, r3
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c338:	4b04      	ldr	r3, [pc, #16]	; (801c34c <TimerSetTimeout+0x50>)
 801c33a:	689a      	ldr	r2, [r3, #8]
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	0018      	movs	r0, r3
 801c342:	4790      	blx	r2
}
 801c344:	46c0      	nop			; (mov r8, r8)
 801c346:	46bd      	mov	sp, r7
 801c348:	b005      	add	sp, #20
 801c34a:	bd90      	pop	{r4, r7, pc}
 801c34c:	0801d95c 	.word	0x0801d95c

0801c350 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c350:	b580      	push	{r7, lr}
 801c352:	b084      	sub	sp, #16
 801c354:	af00      	add	r7, sp, #0
 801c356:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c358:	4b13      	ldr	r3, [pc, #76]	; (801c3a8 <TimerInsertTimer+0x58>)
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c35e:	4b12      	ldr	r3, [pc, #72]	; (801c3a8 <TimerInsertTimer+0x58>)
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	695b      	ldr	r3, [r3, #20]
 801c364:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c366:	e012      	b.n	801c38e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	681a      	ldr	r2, [r3, #0]
 801c36c:	68bb      	ldr	r3, [r7, #8]
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	429a      	cmp	r2, r3
 801c372:	d905      	bls.n	801c380 <TimerInsertTimer+0x30>
    {
        cur = next;
 801c374:	68bb      	ldr	r3, [r7, #8]
 801c376:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c378:	68bb      	ldr	r3, [r7, #8]
 801c37a:	695b      	ldr	r3, [r3, #20]
 801c37c:	60bb      	str	r3, [r7, #8]
 801c37e:	e006      	b.n	801c38e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	687a      	ldr	r2, [r7, #4]
 801c384:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	68ba      	ldr	r2, [r7, #8]
 801c38a:	615a      	str	r2, [r3, #20]
        return;
 801c38c:	e009      	b.n	801c3a2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c38e:	68fb      	ldr	r3, [r7, #12]
 801c390:	695b      	ldr	r3, [r3, #20]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d1e8      	bne.n	801c368 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	687a      	ldr	r2, [r7, #4]
 801c39a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	2200      	movs	r2, #0
 801c3a0:	615a      	str	r2, [r3, #20]
}
 801c3a2:	46bd      	mov	sp, r7
 801c3a4:	b004      	add	sp, #16
 801c3a6:	bd80      	pop	{r7, pc}
 801c3a8:	200019a8 	.word	0x200019a8

0801c3ac <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c3ac:	b580      	push	{r7, lr}
 801c3ae:	b084      	sub	sp, #16
 801c3b0:	af00      	add	r7, sp, #0
 801c3b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c3b4:	4b0b      	ldr	r3, [pc, #44]	; (801c3e4 <TimerInsertNewHeadTimer+0x38>)
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d002      	beq.n	801c3c6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	68fa      	ldr	r2, [r7, #12]
 801c3ca:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801c3cc:	4b05      	ldr	r3, [pc, #20]	; (801c3e4 <TimerInsertNewHeadTimer+0x38>)
 801c3ce:	687a      	ldr	r2, [r7, #4]
 801c3d0:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801c3d2:	4b04      	ldr	r3, [pc, #16]	; (801c3e4 <TimerInsertNewHeadTimer+0x38>)
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	0018      	movs	r0, r3
 801c3d8:	f7ff ff90 	bl	801c2fc <TimerSetTimeout>
}
 801c3dc:	46c0      	nop			; (mov r8, r8)
 801c3de:	46bd      	mov	sp, r7
 801c3e0:	b004      	add	sp, #16
 801c3e2:	bd80      	pop	{r7, pc}
 801c3e4:	200019a8 	.word	0x200019a8

0801c3e8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c3e8:	b580      	push	{r7, lr}
 801c3ea:	b084      	sub	sp, #16
 801c3ec:	af00      	add	r7, sp, #0
 801c3ee:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c3f0:	2300      	movs	r3, #0
 801c3f2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c3f4:	e00e      	b.n	801c414 <ee_skip_atoi+0x2c>
 801c3f6:	68fa      	ldr	r2, [r7, #12]
 801c3f8:	0013      	movs	r3, r2
 801c3fa:	009b      	lsls	r3, r3, #2
 801c3fc:	189b      	adds	r3, r3, r2
 801c3fe:	005b      	lsls	r3, r3, #1
 801c400:	0018      	movs	r0, r3
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	1c59      	adds	r1, r3, #1
 801c408:	687a      	ldr	r2, [r7, #4]
 801c40a:	6011      	str	r1, [r2, #0]
 801c40c:	781b      	ldrb	r3, [r3, #0]
 801c40e:	18c3      	adds	r3, r0, r3
 801c410:	3b30      	subs	r3, #48	; 0x30
 801c412:	60fb      	str	r3, [r7, #12]
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	781b      	ldrb	r3, [r3, #0]
 801c41a:	2b2f      	cmp	r3, #47	; 0x2f
 801c41c:	d904      	bls.n	801c428 <ee_skip_atoi+0x40>
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	781b      	ldrb	r3, [r3, #0]
 801c424:	2b39      	cmp	r3, #57	; 0x39
 801c426:	d9e6      	bls.n	801c3f6 <ee_skip_atoi+0xe>
  return i;
 801c428:	68fb      	ldr	r3, [r7, #12]
}
 801c42a:	0018      	movs	r0, r3
 801c42c:	46bd      	mov	sp, r7
 801c42e:	b004      	add	sp, #16
 801c430:	bd80      	pop	{r7, pc}
	...

0801c434 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801c434:	b580      	push	{r7, lr}
 801c436:	b098      	sub	sp, #96	; 0x60
 801c438:	af00      	add	r7, sp, #0
 801c43a:	60f8      	str	r0, [r7, #12]
 801c43c:	60b9      	str	r1, [r7, #8]
 801c43e:	607a      	str	r2, [r7, #4]
 801c440:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801c442:	4b72      	ldr	r3, [pc, #456]	; (801c60c <ee_number+0x1d8>)
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801c448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c44a:	2240      	movs	r2, #64	; 0x40
 801c44c:	4013      	ands	r3, r2
 801c44e:	d002      	beq.n	801c456 <ee_number+0x22>
 801c450:	4b6f      	ldr	r3, [pc, #444]	; (801c610 <ee_number+0x1dc>)
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801c456:	683b      	ldr	r3, [r7, #0]
 801c458:	2b01      	cmp	r3, #1
 801c45a:	dd02      	ble.n	801c462 <ee_number+0x2e>
 801c45c:	683b      	ldr	r3, [r7, #0]
 801c45e:	2b24      	cmp	r3, #36	; 0x24
 801c460:	dd01      	ble.n	801c466 <ee_number+0x32>
 801c462:	2300      	movs	r3, #0
 801c464:	e0cd      	b.n	801c602 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801c466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c468:	2201      	movs	r2, #1
 801c46a:	4013      	ands	r3, r2
 801c46c:	d001      	beq.n	801c472 <ee_number+0x3e>
 801c46e:	2230      	movs	r2, #48	; 0x30
 801c470:	e000      	b.n	801c474 <ee_number+0x40>
 801c472:	2220      	movs	r2, #32
 801c474:	2353      	movs	r3, #83	; 0x53
 801c476:	18fb      	adds	r3, r7, r3
 801c478:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801c47a:	215f      	movs	r1, #95	; 0x5f
 801c47c:	187b      	adds	r3, r7, r1
 801c47e:	2200      	movs	r2, #0
 801c480:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801c482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c484:	2202      	movs	r2, #2
 801c486:	4013      	ands	r3, r2
 801c488:	d00b      	beq.n	801c4a2 <ee_number+0x6e>
  {
    if (num < 0)
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	da08      	bge.n	801c4a2 <ee_number+0x6e>
    {
      sign = '-';
 801c490:	187b      	adds	r3, r7, r1
 801c492:	222d      	movs	r2, #45	; 0x2d
 801c494:	701a      	strb	r2, [r3, #0]
      num = -num;
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	425b      	negs	r3, r3
 801c49a:	607b      	str	r3, [r7, #4]
      size--;
 801c49c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c49e:	3b01      	subs	r3, #1
 801c4a0:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801c4a2:	2300      	movs	r3, #0
 801c4a4:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d120      	bne.n	801c4ee <ee_number+0xba>
    tmp[i++] = '0';
 801c4ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c4ae:	1c5a      	adds	r2, r3, #1
 801c4b0:	657a      	str	r2, [r7, #84]	; 0x54
 801c4b2:	2210      	movs	r2, #16
 801c4b4:	18ba      	adds	r2, r7, r2
 801c4b6:	2130      	movs	r1, #48	; 0x30
 801c4b8:	54d1      	strb	r1, [r2, r3]
 801c4ba:	e01b      	b.n	801c4f4 <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	683a      	ldr	r2, [r7, #0]
 801c4c0:	0011      	movs	r1, r2
 801c4c2:	0018      	movs	r0, r3
 801c4c4:	f7e3 feae 	bl	8000224 <__aeabi_uidivmod>
 801c4c8:	000b      	movs	r3, r1
 801c4ca:	001a      	movs	r2, r3
 801c4cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c4ce:	189a      	adds	r2, r3, r2
 801c4d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c4d2:	1c59      	adds	r1, r3, #1
 801c4d4:	6579      	str	r1, [r7, #84]	; 0x54
 801c4d6:	7811      	ldrb	r1, [r2, #0]
 801c4d8:	2210      	movs	r2, #16
 801c4da:	18ba      	adds	r2, r7, r2
 801c4dc:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	683a      	ldr	r2, [r7, #0]
 801c4e2:	0011      	movs	r1, r2
 801c4e4:	0018      	movs	r0, r3
 801c4e6:	f7e3 fe17 	bl	8000118 <__udivsi3>
 801c4ea:	0003      	movs	r3, r0
 801c4ec:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d1e3      	bne.n	801c4bc <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801c4f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c4f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c4f8:	429a      	cmp	r2, r3
 801c4fa:	dd01      	ble.n	801c500 <ee_number+0xcc>
 801c4fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c4fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801c500:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c504:	1ad3      	subs	r3, r2, r3
 801c506:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801c508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c50a:	2201      	movs	r2, #1
 801c50c:	4013      	ands	r3, r2
 801c50e:	d112      	bne.n	801c536 <ee_number+0x102>
 801c510:	e00c      	b.n	801c52c <ee_number+0xf8>
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	1c5a      	adds	r2, r3, #1
 801c516:	60fa      	str	r2, [r7, #12]
 801c518:	2220      	movs	r2, #32
 801c51a:	701a      	strb	r2, [r3, #0]
 801c51c:	68bb      	ldr	r3, [r7, #8]
 801c51e:	3b01      	subs	r3, #1
 801c520:	60bb      	str	r3, [r7, #8]
 801c522:	68bb      	ldr	r3, [r7, #8]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d101      	bne.n	801c52c <ee_number+0xf8>
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	e06a      	b.n	801c602 <ee_number+0x1ce>
 801c52c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c52e:	1e5a      	subs	r2, r3, #1
 801c530:	66ba      	str	r2, [r7, #104]	; 0x68
 801c532:	2b00      	cmp	r3, #0
 801c534:	dced      	bgt.n	801c512 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c536:	215f      	movs	r1, #95	; 0x5f
 801c538:	187b      	adds	r3, r7, r1
 801c53a:	781b      	ldrb	r3, [r3, #0]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d01c      	beq.n	801c57a <ee_number+0x146>
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	1c5a      	adds	r2, r3, #1
 801c544:	60fa      	str	r2, [r7, #12]
 801c546:	187a      	adds	r2, r7, r1
 801c548:	7812      	ldrb	r2, [r2, #0]
 801c54a:	701a      	strb	r2, [r3, #0]
 801c54c:	68bb      	ldr	r3, [r7, #8]
 801c54e:	3b01      	subs	r3, #1
 801c550:	60bb      	str	r3, [r7, #8]
 801c552:	68bb      	ldr	r3, [r7, #8]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d110      	bne.n	801c57a <ee_number+0x146>
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	e052      	b.n	801c602 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	1c5a      	adds	r2, r3, #1
 801c560:	60fa      	str	r2, [r7, #12]
 801c562:	2253      	movs	r2, #83	; 0x53
 801c564:	18ba      	adds	r2, r7, r2
 801c566:	7812      	ldrb	r2, [r2, #0]
 801c568:	701a      	strb	r2, [r3, #0]
 801c56a:	68bb      	ldr	r3, [r7, #8]
 801c56c:	3b01      	subs	r3, #1
 801c56e:	60bb      	str	r3, [r7, #8]
 801c570:	68bb      	ldr	r3, [r7, #8]
 801c572:	2b00      	cmp	r3, #0
 801c574:	d101      	bne.n	801c57a <ee_number+0x146>
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	e043      	b.n	801c602 <ee_number+0x1ce>
 801c57a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c57c:	1e5a      	subs	r2, r3, #1
 801c57e:	66ba      	str	r2, [r7, #104]	; 0x68
 801c580:	2b00      	cmp	r3, #0
 801c582:	dceb      	bgt.n	801c55c <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c584:	e00c      	b.n	801c5a0 <ee_number+0x16c>
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	1c5a      	adds	r2, r3, #1
 801c58a:	60fa      	str	r2, [r7, #12]
 801c58c:	2230      	movs	r2, #48	; 0x30
 801c58e:	701a      	strb	r2, [r3, #0]
 801c590:	68bb      	ldr	r3, [r7, #8]
 801c592:	3b01      	subs	r3, #1
 801c594:	60bb      	str	r3, [r7, #8]
 801c596:	68bb      	ldr	r3, [r7, #8]
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d101      	bne.n	801c5a0 <ee_number+0x16c>
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	e030      	b.n	801c602 <ee_number+0x1ce>
 801c5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c5a2:	1e5a      	subs	r2, r3, #1
 801c5a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c5a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c5a8:	429a      	cmp	r2, r3
 801c5aa:	dbec      	blt.n	801c586 <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c5ac:	e010      	b.n	801c5d0 <ee_number+0x19c>
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	1c5a      	adds	r2, r3, #1
 801c5b2:	60fa      	str	r2, [r7, #12]
 801c5b4:	2210      	movs	r2, #16
 801c5b6:	18b9      	adds	r1, r7, r2
 801c5b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c5ba:	188a      	adds	r2, r1, r2
 801c5bc:	7812      	ldrb	r2, [r2, #0]
 801c5be:	701a      	strb	r2, [r3, #0]
 801c5c0:	68bb      	ldr	r3, [r7, #8]
 801c5c2:	3b01      	subs	r3, #1
 801c5c4:	60bb      	str	r3, [r7, #8]
 801c5c6:	68bb      	ldr	r3, [r7, #8]
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d101      	bne.n	801c5d0 <ee_number+0x19c>
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	e018      	b.n	801c602 <ee_number+0x1ce>
 801c5d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c5d2:	1e5a      	subs	r2, r3, #1
 801c5d4:	657a      	str	r2, [r7, #84]	; 0x54
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	dce9      	bgt.n	801c5ae <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801c5da:	e00c      	b.n	801c5f6 <ee_number+0x1c2>
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	1c5a      	adds	r2, r3, #1
 801c5e0:	60fa      	str	r2, [r7, #12]
 801c5e2:	2220      	movs	r2, #32
 801c5e4:	701a      	strb	r2, [r3, #0]
 801c5e6:	68bb      	ldr	r3, [r7, #8]
 801c5e8:	3b01      	subs	r3, #1
 801c5ea:	60bb      	str	r3, [r7, #8]
 801c5ec:	68bb      	ldr	r3, [r7, #8]
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d101      	bne.n	801c5f6 <ee_number+0x1c2>
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	e005      	b.n	801c602 <ee_number+0x1ce>
 801c5f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c5f8:	1e5a      	subs	r2, r3, #1
 801c5fa:	66ba      	str	r2, [r7, #104]	; 0x68
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	dced      	bgt.n	801c5dc <ee_number+0x1a8>

  return str;
 801c600:	68fb      	ldr	r3, [r7, #12]
}
 801c602:	0018      	movs	r0, r3
 801c604:	46bd      	mov	sp, r7
 801c606:	b018      	add	sp, #96	; 0x60
 801c608:	bd80      	pop	{r7, pc}
 801c60a:	46c0      	nop			; (mov r8, r8)
 801c60c:	200001d0 	.word	0x200001d0
 801c610:	200001d4 	.word	0x200001d4

0801c614 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c614:	b590      	push	{r4, r7, lr}
 801c616:	b093      	sub	sp, #76	; 0x4c
 801c618:	af04      	add	r7, sp, #16
 801c61a:	60f8      	str	r0, [r7, #12]
 801c61c:	60b9      	str	r1, [r7, #8]
 801c61e:	607a      	str	r2, [r7, #4]
 801c620:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c622:	68bb      	ldr	r3, [r7, #8]
 801c624:	2b00      	cmp	r3, #0
 801c626:	dc01      	bgt.n	801c62c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c628:	2300      	movs	r3, #0
 801c62a:	e104      	b.n	801c836 <tiny_vsnprintf_like+0x222>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c630:	e0ec      	b.n	801c80c <tiny_vsnprintf_like+0x1f8>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	1ad2      	subs	r2, r2, r3
 801c638:	68bb      	ldr	r3, [r7, #8]
 801c63a:	3b01      	subs	r3, #1
 801c63c:	429a      	cmp	r2, r3
 801c63e:	db00      	blt.n	801c642 <tiny_vsnprintf_like+0x2e>
 801c640:	e0f2      	b.n	801c828 <tiny_vsnprintf_like+0x214>
    
    if (*fmt != '%')
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	781b      	ldrb	r3, [r3, #0]
 801c646:	2b25      	cmp	r3, #37	; 0x25
 801c648:	d006      	beq.n	801c658 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c64a:	687a      	ldr	r2, [r7, #4]
 801c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c64e:	1c59      	adds	r1, r3, #1
 801c650:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c652:	7812      	ldrb	r2, [r2, #0]
 801c654:	701a      	strb	r2, [r3, #0]
      continue;
 801c656:	e0d6      	b.n	801c806 <tiny_vsnprintf_like+0x1f2>
    }
                  
    // Process flags
    flags = 0;
 801c658:	2300      	movs	r3, #0
 801c65a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	3301      	adds	r3, #1
 801c660:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	781b      	ldrb	r3, [r3, #0]
 801c666:	2b30      	cmp	r3, #48	; 0x30
 801c668:	d103      	bne.n	801c672 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c66a:	6a3b      	ldr	r3, [r7, #32]
 801c66c:	2201      	movs	r2, #1
 801c66e:	4313      	orrs	r3, r2
 801c670:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801c672:	2301      	movs	r3, #1
 801c674:	425b      	negs	r3, r3
 801c676:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	781b      	ldrb	r3, [r3, #0]
 801c67c:	2b2f      	cmp	r3, #47	; 0x2f
 801c67e:	d909      	bls.n	801c694 <tiny_vsnprintf_like+0x80>
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	781b      	ldrb	r3, [r3, #0]
 801c684:	2b39      	cmp	r3, #57	; 0x39
 801c686:	d805      	bhi.n	801c694 <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801c688:	1d3b      	adds	r3, r7, #4
 801c68a:	0018      	movs	r0, r3
 801c68c:	f7ff feac 	bl	801c3e8 <ee_skip_atoi>
 801c690:	0003      	movs	r3, r0
 801c692:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801c694:	2301      	movs	r3, #1
 801c696:	425b      	negs	r3, r3
 801c698:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801c69a:	2301      	movs	r3, #1
 801c69c:	425b      	negs	r3, r3
 801c69e:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801c6a0:	230a      	movs	r3, #10
 801c6a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	781b      	ldrb	r3, [r3, #0]
 801c6a8:	3b58      	subs	r3, #88	; 0x58
 801c6aa:	2b20      	cmp	r3, #32
 801c6ac:	d854      	bhi.n	801c758 <tiny_vsnprintf_like+0x144>
 801c6ae:	009a      	lsls	r2, r3, #2
 801c6b0:	4b63      	ldr	r3, [pc, #396]	; (801c840 <tiny_vsnprintf_like+0x22c>)
 801c6b2:	18d3      	adds	r3, r2, r3
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6ba:	1c5a      	adds	r2, r3, #1
 801c6bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c6be:	2220      	movs	r2, #32
 801c6c0:	701a      	strb	r2, [r3, #0]
 801c6c2:	69fb      	ldr	r3, [r7, #28]
 801c6c4:	3b01      	subs	r3, #1
 801c6c6:	61fb      	str	r3, [r7, #28]
 801c6c8:	69fb      	ldr	r3, [r7, #28]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	dcf4      	bgt.n	801c6b8 <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801c6ce:	683b      	ldr	r3, [r7, #0]
 801c6d0:	1d1a      	adds	r2, r3, #4
 801c6d2:	603a      	str	r2, [r7, #0]
 801c6d4:	6819      	ldr	r1, [r3, #0]
 801c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6d8:	1c5a      	adds	r2, r3, #1
 801c6da:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c6dc:	b2ca      	uxtb	r2, r1
 801c6de:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c6e0:	e091      	b.n	801c806 <tiny_vsnprintf_like+0x1f2>

      case 's':
        s = va_arg(args, char *);
 801c6e2:	683b      	ldr	r3, [r7, #0]
 801c6e4:	1d1a      	adds	r2, r3, #4
 801c6e6:	603a      	str	r2, [r7, #0]
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d101      	bne.n	801c6f6 <tiny_vsnprintf_like+0xe2>
 801c6f2:	4b54      	ldr	r3, [pc, #336]	; (801c844 <tiny_vsnprintf_like+0x230>)
 801c6f4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6f8:	0018      	movs	r0, r3
 801c6fa:	f7e3 fd05 	bl	8000108 <strlen>
 801c6fe:	0003      	movs	r3, r0
 801c700:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c702:	e004      	b.n	801c70e <tiny_vsnprintf_like+0xfa>
 801c704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c706:	1c5a      	adds	r2, r3, #1
 801c708:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c70a:	2220      	movs	r2, #32
 801c70c:	701a      	strb	r2, [r3, #0]
 801c70e:	69fb      	ldr	r3, [r7, #28]
 801c710:	1e5a      	subs	r2, r3, #1
 801c712:	61fa      	str	r2, [r7, #28]
 801c714:	693a      	ldr	r2, [r7, #16]
 801c716:	429a      	cmp	r2, r3
 801c718:	dbf4      	blt.n	801c704 <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c71a:	2300      	movs	r3, #0
 801c71c:	62bb      	str	r3, [r7, #40]	; 0x28
 801c71e:	e00a      	b.n	801c736 <tiny_vsnprintf_like+0x122>
 801c720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c722:	1c53      	adds	r3, r2, #1
 801c724:	627b      	str	r3, [r7, #36]	; 0x24
 801c726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c728:	1c59      	adds	r1, r3, #1
 801c72a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c72c:	7812      	ldrb	r2, [r2, #0]
 801c72e:	701a      	strb	r2, [r3, #0]
 801c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c732:	3301      	adds	r3, #1
 801c734:	62bb      	str	r3, [r7, #40]	; 0x28
 801c736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c738:	693b      	ldr	r3, [r7, #16]
 801c73a:	429a      	cmp	r2, r3
 801c73c:	dbf0      	blt.n	801c720 <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c73e:	e062      	b.n	801c806 <tiny_vsnprintf_like+0x1f2>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801c740:	6a3b      	ldr	r3, [r7, #32]
 801c742:	2240      	movs	r2, #64	; 0x40
 801c744:	4313      	orrs	r3, r2
 801c746:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801c748:	2310      	movs	r3, #16
 801c74a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801c74c:	e02d      	b.n	801c7aa <tiny_vsnprintf_like+0x196>

      case 'd':
      case 'i':
        flags |= SIGN;
 801c74e:	6a3b      	ldr	r3, [r7, #32]
 801c750:	2202      	movs	r2, #2
 801c752:	4313      	orrs	r3, r2
 801c754:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801c756:	e025      	b.n	801c7a4 <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	781b      	ldrb	r3, [r3, #0]
 801c75c:	2b25      	cmp	r3, #37	; 0x25
 801c75e:	d004      	beq.n	801c76a <tiny_vsnprintf_like+0x156>
 801c760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c762:	1c5a      	adds	r2, r3, #1
 801c764:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c766:	2225      	movs	r2, #37	; 0x25
 801c768:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801c76a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	1ad2      	subs	r2, r2, r3
 801c770:	68bb      	ldr	r3, [r7, #8]
 801c772:	3b01      	subs	r3, #1
 801c774:	429a      	cmp	r2, r3
 801c776:	da17      	bge.n	801c7a8 <tiny_vsnprintf_like+0x194>
        if (*fmt)
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	781b      	ldrb	r3, [r3, #0]
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d006      	beq.n	801c78e <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801c780:	687a      	ldr	r2, [r7, #4]
 801c782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c784:	1c59      	adds	r1, r3, #1
 801c786:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c788:	7812      	ldrb	r2, [r2, #0]
 801c78a:	701a      	strb	r2, [r3, #0]
 801c78c:	e002      	b.n	801c794 <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	3b01      	subs	r3, #1
 801c792:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801c794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	1ad2      	subs	r2, r2, r3
 801c79a:	68bb      	ldr	r3, [r7, #8]
 801c79c:	3b01      	subs	r3, #1
 801c79e:	429a      	cmp	r2, r3
 801c7a0:	db30      	blt.n	801c804 <tiny_vsnprintf_like+0x1f0>
 801c7a2:	e002      	b.n	801c7aa <tiny_vsnprintf_like+0x196>
        break;
 801c7a4:	46c0      	nop			; (mov r8, r8)
 801c7a6:	e000      	b.n	801c7aa <tiny_vsnprintf_like+0x196>
        CHECK_STR_SIZE(buf, str, size);
 801c7a8:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801c7aa:	697b      	ldr	r3, [r7, #20]
 801c7ac:	2b6c      	cmp	r3, #108	; 0x6c
 801c7ae:	d105      	bne.n	801c7bc <tiny_vsnprintf_like+0x1a8>
      num = va_arg(args, unsigned long);
 801c7b0:	683b      	ldr	r3, [r7, #0]
 801c7b2:	1d1a      	adds	r2, r3, #4
 801c7b4:	603a      	str	r2, [r7, #0]
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	637b      	str	r3, [r7, #52]	; 0x34
 801c7ba:	e00e      	b.n	801c7da <tiny_vsnprintf_like+0x1c6>
    else if (flags & SIGN)
 801c7bc:	6a3b      	ldr	r3, [r7, #32]
 801c7be:	2202      	movs	r2, #2
 801c7c0:	4013      	ands	r3, r2
 801c7c2:	d005      	beq.n	801c7d0 <tiny_vsnprintf_like+0x1bc>
      num = va_arg(args, int);
 801c7c4:	683b      	ldr	r3, [r7, #0]
 801c7c6:	1d1a      	adds	r2, r3, #4
 801c7c8:	603a      	str	r2, [r7, #0]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	637b      	str	r3, [r7, #52]	; 0x34
 801c7ce:	e004      	b.n	801c7da <tiny_vsnprintf_like+0x1c6>
    else
      num = va_arg(args, unsigned int);
 801c7d0:	683b      	ldr	r3, [r7, #0]
 801c7d2:	1d1a      	adds	r2, r3, #4
 801c7d4:	603a      	str	r2, [r7, #0]
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801c7da:	68bb      	ldr	r3, [r7, #8]
 801c7dc:	1e5a      	subs	r2, r3, #1
 801c7de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	1acb      	subs	r3, r1, r3
 801c7e4:	1ad1      	subs	r1, r2, r3
 801c7e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c7e8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801c7ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c7ec:	6a3b      	ldr	r3, [r7, #32]
 801c7ee:	9302      	str	r3, [sp, #8]
 801c7f0:	69bb      	ldr	r3, [r7, #24]
 801c7f2:	9301      	str	r3, [sp, #4]
 801c7f4:	69fb      	ldr	r3, [r7, #28]
 801c7f6:	9300      	str	r3, [sp, #0]
 801c7f8:	0023      	movs	r3, r4
 801c7fa:	f7ff fe1b 	bl	801c434 <ee_number>
 801c7fe:	0003      	movs	r3, r0
 801c800:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c802:	e000      	b.n	801c806 <tiny_vsnprintf_like+0x1f2>
        continue;
 801c804:	46c0      	nop			; (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	3301      	adds	r3, #1
 801c80a:	607b      	str	r3, [r7, #4]
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	781b      	ldrb	r3, [r3, #0]
 801c810:	2b00      	cmp	r3, #0
 801c812:	d000      	beq.n	801c816 <tiny_vsnprintf_like+0x202>
 801c814:	e70d      	b.n	801c632 <tiny_vsnprintf_like+0x1e>
 801c816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	1ad2      	subs	r2, r2, r3
 801c81c:	68bb      	ldr	r3, [r7, #8]
 801c81e:	3b01      	subs	r3, #1
 801c820:	429a      	cmp	r2, r3
 801c822:	db00      	blt.n	801c826 <tiny_vsnprintf_like+0x212>
 801c824:	e705      	b.n	801c632 <tiny_vsnprintf_like+0x1e>
 801c826:	e000      	b.n	801c82a <tiny_vsnprintf_like+0x216>
    CHECK_STR_SIZE(buf, str, size);
 801c828:	46c0      	nop			; (mov r8, r8)
  }

  *str = '\0';
 801c82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c82c:	2200      	movs	r2, #0
 801c82e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	1ad3      	subs	r3, r2, r3
}
 801c836:	0018      	movs	r0, r3
 801c838:	46bd      	mov	sp, r7
 801c83a:	b00f      	add	sp, #60	; 0x3c
 801c83c:	bd90      	pop	{r4, r7, pc}
 801c83e:	46c0      	nop			; (mov r8, r8)
 801c840:	0801e804 	.word	0x0801e804
 801c844:	0801e7fc 	.word	0x0801e7fc

0801c848 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801c848:	b580      	push	{r7, lr}
 801c84a:	b082      	sub	sp, #8
 801c84c:	af00      	add	r7, sp, #0
 801c84e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	2203      	movs	r2, #3
 801c854:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	2200      	movs	r2, #0
 801c85a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	2203      	movs	r2, #3
 801c860:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	2203      	movs	r2, #3
 801c866:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	2203      	movs	r2, #3
 801c86c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	2203      	movs	r2, #3
 801c872:	715a      	strb	r2, [r3, #5]
}
 801c874:	46c0      	nop			; (mov r8, r8)
 801c876:	46bd      	mov	sp, r7
 801c878:	b002      	add	sp, #8
 801c87a:	bd80      	pop	{r7, pc}

0801c87c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801c87c:	b590      	push	{r4, r7, lr}
 801c87e:	b08b      	sub	sp, #44	; 0x2c
 801c880:	af04      	add	r7, sp, #16
 801c882:	60f8      	str	r0, [r7, #12]
 801c884:	607a      	str	r2, [r7, #4]
 801c886:	240b      	movs	r4, #11
 801c888:	193b      	adds	r3, r7, r4
 801c88a:	1c0a      	adds	r2, r1, #0
 801c88c:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c892:	2116      	movs	r1, #22
 801c894:	187a      	adds	r2, r7, r1
 801c896:	18db      	adds	r3, r3, r3
 801c898:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801c89e:	193b      	adds	r3, r7, r4
 801c8a0:	781b      	ldrb	r3, [r3, #0]
 801c8a2:	b29a      	uxth	r2, r3
 801c8a4:	187b      	adds	r3, r7, r1
 801c8a6:	8819      	ldrh	r1, [r3, #0]
 801c8a8:	4b0f      	ldr	r3, [pc, #60]	; (801c8e8 <read_register16+0x6c>)
 801c8aa:	9302      	str	r3, [sp, #8]
 801c8ac:	2302      	movs	r3, #2
 801c8ae:	9301      	str	r3, [sp, #4]
 801c8b0:	2414      	movs	r4, #20
 801c8b2:	193b      	adds	r3, r7, r4
 801c8b4:	9300      	str	r3, [sp, #0]
 801c8b6:	2301      	movs	r3, #1
 801c8b8:	f7ea ff0c 	bl	80076d4 <HAL_I2C_Mem_Read>
 801c8bc:	1e03      	subs	r3, r0, #0
 801c8be:	d10e      	bne.n	801c8de <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801c8c0:	0021      	movs	r1, r4
 801c8c2:	187b      	adds	r3, r7, r1
 801c8c4:	785b      	ldrb	r3, [r3, #1]
 801c8c6:	021b      	lsls	r3, r3, #8
 801c8c8:	b21a      	sxth	r2, r3
 801c8ca:	187b      	adds	r3, r7, r1
 801c8cc:	781b      	ldrb	r3, [r3, #0]
 801c8ce:	b21b      	sxth	r3, r3
 801c8d0:	4313      	orrs	r3, r2
 801c8d2:	b21b      	sxth	r3, r3
 801c8d4:	b29a      	uxth	r2, r3
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	801a      	strh	r2, [r3, #0]
		return true;
 801c8da:	2301      	movs	r3, #1
 801c8dc:	e000      	b.n	801c8e0 <read_register16+0x64>
	} else
		return false;
 801c8de:	2300      	movs	r3, #0

}
 801c8e0:	0018      	movs	r0, r3
 801c8e2:	46bd      	mov	sp, r7
 801c8e4:	b007      	add	sp, #28
 801c8e6:	bd90      	pop	{r4, r7, pc}
 801c8e8:	00001388 	.word	0x00001388

0801c8ec <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801c8ec:	b5b0      	push	{r4, r5, r7, lr}
 801c8ee:	b08a      	sub	sp, #40	; 0x28
 801c8f0:	af04      	add	r7, sp, #16
 801c8f2:	60f8      	str	r0, [r7, #12]
 801c8f4:	0008      	movs	r0, r1
 801c8f6:	607a      	str	r2, [r7, #4]
 801c8f8:	0019      	movs	r1, r3
 801c8fa:	240b      	movs	r4, #11
 801c8fc:	193b      	adds	r3, r7, r4
 801c8fe:	1c02      	adds	r2, r0, #0
 801c900:	701a      	strb	r2, [r3, #0]
 801c902:	250a      	movs	r5, #10
 801c904:	197b      	adds	r3, r7, r5
 801c906:	1c0a      	adds	r2, r1, #0
 801c908:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c90e:	2116      	movs	r1, #22
 801c910:	187a      	adds	r2, r7, r1
 801c912:	18db      	adds	r3, r3, r3
 801c914:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801c91a:	193b      	adds	r3, r7, r4
 801c91c:	781b      	ldrb	r3, [r3, #0]
 801c91e:	b29c      	uxth	r4, r3
 801c920:	197b      	adds	r3, r7, r5
 801c922:	781b      	ldrb	r3, [r3, #0]
 801c924:	b29b      	uxth	r3, r3
 801c926:	187a      	adds	r2, r7, r1
 801c928:	8811      	ldrh	r1, [r2, #0]
 801c92a:	4a09      	ldr	r2, [pc, #36]	; (801c950 <read_data+0x64>)
 801c92c:	9202      	str	r2, [sp, #8]
 801c92e:	9301      	str	r3, [sp, #4]
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	9300      	str	r3, [sp, #0]
 801c934:	2301      	movs	r3, #1
 801c936:	0022      	movs	r2, r4
 801c938:	f7ea fecc 	bl	80076d4 <HAL_I2C_Mem_Read>
 801c93c:	1e03      	subs	r3, r0, #0
 801c93e:	d101      	bne.n	801c944 <read_data+0x58>
		return 0;
 801c940:	2300      	movs	r3, #0
 801c942:	e000      	b.n	801c946 <read_data+0x5a>
	else
		return 1;
 801c944:	2301      	movs	r3, #1

}
 801c946:	0018      	movs	r0, r3
 801c948:	46bd      	mov	sp, r7
 801c94a:	b006      	add	sp, #24
 801c94c:	bdb0      	pop	{r4, r5, r7, pc}
 801c94e:	46c0      	nop			; (mov r8, r8)
 801c950:	00001388 	.word	0x00001388

0801c954 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801c954:	b580      	push	{r7, lr}
 801c956:	b082      	sub	sp, #8
 801c958:	af00      	add	r7, sp, #0
 801c95a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801c95c:	687a      	ldr	r2, [r7, #4]
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	2188      	movs	r1, #136	; 0x88
 801c962:	0018      	movs	r0, r3
 801c964:	f7ff ff8a 	bl	801c87c <read_register16>
 801c968:	1e03      	subs	r3, r0, #0
 801c96a:	d100      	bne.n	801c96e <read_calibration_data+0x1a>
 801c96c:	e06d      	b.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	1c9a      	adds	r2, r3, #2
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	218a      	movs	r1, #138	; 0x8a
 801c976:	0018      	movs	r0, r3
 801c978:	f7ff ff80 	bl	801c87c <read_register16>
 801c97c:	1e03      	subs	r3, r0, #0
 801c97e:	d100      	bne.n	801c982 <read_calibration_data+0x2e>
 801c980:	e063      	b.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	1d1a      	adds	r2, r3, #4
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	218c      	movs	r1, #140	; 0x8c
 801c98a:	0018      	movs	r0, r3
 801c98c:	f7ff ff76 	bl	801c87c <read_register16>
 801c990:	1e03      	subs	r3, r0, #0
 801c992:	d05a      	beq.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	1d9a      	adds	r2, r3, #6
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	218e      	movs	r1, #142	; 0x8e
 801c99c:	0018      	movs	r0, r3
 801c99e:	f7ff ff6d 	bl	801c87c <read_register16>
 801c9a2:	1e03      	subs	r3, r0, #0
 801c9a4:	d051      	beq.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	3308      	adds	r3, #8
 801c9aa:	001a      	movs	r2, r3
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	2190      	movs	r1, #144	; 0x90
 801c9b0:	0018      	movs	r0, r3
 801c9b2:	f7ff ff63 	bl	801c87c <read_register16>
 801c9b6:	1e03      	subs	r3, r0, #0
 801c9b8:	d047      	beq.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	330a      	adds	r3, #10
 801c9be:	001a      	movs	r2, r3
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	2192      	movs	r1, #146	; 0x92
 801c9c4:	0018      	movs	r0, r3
 801c9c6:	f7ff ff59 	bl	801c87c <read_register16>
 801c9ca:	1e03      	subs	r3, r0, #0
 801c9cc:	d03d      	beq.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	330c      	adds	r3, #12
 801c9d2:	001a      	movs	r2, r3
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	2194      	movs	r1, #148	; 0x94
 801c9d8:	0018      	movs	r0, r3
 801c9da:	f7ff ff4f 	bl	801c87c <read_register16>
 801c9de:	1e03      	subs	r3, r0, #0
 801c9e0:	d033      	beq.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	330e      	adds	r3, #14
 801c9e6:	001a      	movs	r2, r3
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	2196      	movs	r1, #150	; 0x96
 801c9ec:	0018      	movs	r0, r3
 801c9ee:	f7ff ff45 	bl	801c87c <read_register16>
 801c9f2:	1e03      	subs	r3, r0, #0
 801c9f4:	d029      	beq.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	3310      	adds	r3, #16
 801c9fa:	001a      	movs	r2, r3
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	2198      	movs	r1, #152	; 0x98
 801ca00:	0018      	movs	r0, r3
 801ca02:	f7ff ff3b 	bl	801c87c <read_register16>
 801ca06:	1e03      	subs	r3, r0, #0
 801ca08:	d01f      	beq.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	3312      	adds	r3, #18
 801ca0e:	001a      	movs	r2, r3
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	219a      	movs	r1, #154	; 0x9a
 801ca14:	0018      	movs	r0, r3
 801ca16:	f7ff ff31 	bl	801c87c <read_register16>
 801ca1a:	1e03      	subs	r3, r0, #0
 801ca1c:	d015      	beq.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	3314      	adds	r3, #20
 801ca22:	001a      	movs	r2, r3
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	219c      	movs	r1, #156	; 0x9c
 801ca28:	0018      	movs	r0, r3
 801ca2a:	f7ff ff27 	bl	801c87c <read_register16>
 801ca2e:	1e03      	subs	r3, r0, #0
 801ca30:	d00b      	beq.n	801ca4a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	3316      	adds	r3, #22
 801ca36:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	219e      	movs	r1, #158	; 0x9e
 801ca3c:	0018      	movs	r0, r3
 801ca3e:	f7ff ff1d 	bl	801c87c <read_register16>
 801ca42:	1e03      	subs	r3, r0, #0
 801ca44:	d001      	beq.n	801ca4a <read_calibration_data+0xf6>

		return true;
 801ca46:	2301      	movs	r3, #1
 801ca48:	e000      	b.n	801ca4c <read_calibration_data+0xf8>
	}

	return false;
 801ca4a:	2300      	movs	r3, #0
}
 801ca4c:	0018      	movs	r0, r3
 801ca4e:	46bd      	mov	sp, r7
 801ca50:	b002      	add	sp, #8
 801ca52:	bd80      	pop	{r7, pc}

0801ca54 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801ca54:	b5b0      	push	{r4, r5, r7, lr}
 801ca56:	b084      	sub	sp, #16
 801ca58:	af00      	add	r7, sp, #0
 801ca5a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	3318      	adds	r3, #24
 801ca60:	001a      	movs	r2, r3
 801ca62:	6878      	ldr	r0, [r7, #4]
 801ca64:	2301      	movs	r3, #1
 801ca66:	21a1      	movs	r1, #161	; 0xa1
 801ca68:	f7ff ff40 	bl	801c8ec <read_data>
 801ca6c:	1e03      	subs	r3, r0, #0
 801ca6e:	d14b      	bne.n	801cb08 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	331a      	adds	r3, #26
 801ca74:	001a      	movs	r2, r3
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	21e1      	movs	r1, #225	; 0xe1
 801ca7a:	0018      	movs	r0, r3
 801ca7c:	f7ff fefe 	bl	801c87c <read_register16>
 801ca80:	1e03      	subs	r3, r0, #0
 801ca82:	d041      	beq.n	801cb08 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	331c      	adds	r3, #28
 801ca88:	001a      	movs	r2, r3
 801ca8a:	6878      	ldr	r0, [r7, #4]
 801ca8c:	2301      	movs	r3, #1
 801ca8e:	21e3      	movs	r1, #227	; 0xe3
 801ca90:	f7ff ff2c 	bl	801c8ec <read_data>
 801ca94:	1e03      	subs	r3, r0, #0
 801ca96:	d137      	bne.n	801cb08 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 801ca98:	240e      	movs	r4, #14
 801ca9a:	193a      	adds	r2, r7, r4
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	21e4      	movs	r1, #228	; 0xe4
 801caa0:	0018      	movs	r0, r3
 801caa2:	f7ff feeb 	bl	801c87c <read_register16>
 801caa6:	1e03      	subs	r3, r0, #0
 801caa8:	d02e      	beq.n	801cb08 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 801caaa:	250c      	movs	r5, #12
 801caac:	197a      	adds	r2, r7, r5
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	21e5      	movs	r1, #229	; 0xe5
 801cab2:	0018      	movs	r0, r3
 801cab4:	f7ff fee2 	bl	801c87c <read_register16>
 801cab8:	1e03      	subs	r3, r0, #0
 801caba:	d025      	beq.n	801cb08 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	3322      	adds	r3, #34	; 0x22
 801cac0:	001a      	movs	r2, r3
 801cac2:	6878      	ldr	r0, [r7, #4]
 801cac4:	2301      	movs	r3, #1
 801cac6:	21e7      	movs	r1, #231	; 0xe7
 801cac8:	f7ff ff10 	bl	801c8ec <read_data>
 801cacc:	1e03      	subs	r3, r0, #0
 801cace:	d11b      	bne.n	801cb08 <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801cad0:	193b      	adds	r3, r7, r4
 801cad2:	881b      	ldrh	r3, [r3, #0]
 801cad4:	011b      	lsls	r3, r3, #4
 801cad6:	b21a      	sxth	r2, r3
 801cad8:	23ff      	movs	r3, #255	; 0xff
 801cada:	011b      	lsls	r3, r3, #4
 801cadc:	4013      	ands	r3, r2
 801cade:	b21a      	sxth	r2, r3
 801cae0:	193b      	adds	r3, r7, r4
 801cae2:	881b      	ldrh	r3, [r3, #0]
 801cae4:	121b      	asrs	r3, r3, #8
 801cae6:	b21b      	sxth	r3, r3
 801cae8:	210f      	movs	r1, #15
 801caea:	400b      	ands	r3, r1
 801caec:	b21b      	sxth	r3, r3
 801caee:	4313      	orrs	r3, r2
 801caf0:	b21a      	sxth	r2, r3
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801caf6:	197b      	adds	r3, r7, r5
 801caf8:	881b      	ldrh	r3, [r3, #0]
 801cafa:	091b      	lsrs	r3, r3, #4
 801cafc:	b29b      	uxth	r3, r3
 801cafe:	b21a      	sxth	r2, r3
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	841a      	strh	r2, [r3, #32]

		return true;
 801cb04:	2301      	movs	r3, #1
 801cb06:	e000      	b.n	801cb0a <read_hum_calibration_data+0xb6>
	}

	return false;
 801cb08:	2300      	movs	r3, #0
}
 801cb0a:	0018      	movs	r0, r3
 801cb0c:	46bd      	mov	sp, r7
 801cb0e:	b004      	add	sp, #16
 801cb10:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801cb14 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801cb14:	b580      	push	{r7, lr}
 801cb16:	b088      	sub	sp, #32
 801cb18:	af04      	add	r7, sp, #16
 801cb1a:	6078      	str	r0, [r7, #4]
 801cb1c:	0008      	movs	r0, r1
 801cb1e:	0011      	movs	r1, r2
 801cb20:	1cfb      	adds	r3, r7, #3
 801cb22:	1c02      	adds	r2, r0, #0
 801cb24:	701a      	strb	r2, [r3, #0]
 801cb26:	1cbb      	adds	r3, r7, #2
 801cb28:	1c0a      	adds	r2, r1, #0
 801cb2a:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cb30:	210e      	movs	r1, #14
 801cb32:	187a      	adds	r2, r7, r1
 801cb34:	18db      	adds	r3, r3, r3
 801cb36:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801cb3c:	1cfb      	adds	r3, r7, #3
 801cb3e:	781b      	ldrb	r3, [r3, #0]
 801cb40:	b29a      	uxth	r2, r3
 801cb42:	187b      	adds	r3, r7, r1
 801cb44:	8819      	ldrh	r1, [r3, #0]
 801cb46:	4b09      	ldr	r3, [pc, #36]	; (801cb6c <write_register8+0x58>)
 801cb48:	9302      	str	r3, [sp, #8]
 801cb4a:	2301      	movs	r3, #1
 801cb4c:	9301      	str	r3, [sp, #4]
 801cb4e:	1cbb      	adds	r3, r7, #2
 801cb50:	9300      	str	r3, [sp, #0]
 801cb52:	2301      	movs	r3, #1
 801cb54:	f7ea fc90 	bl	8007478 <HAL_I2C_Mem_Write>
 801cb58:	1e03      	subs	r3, r0, #0
 801cb5a:	d101      	bne.n	801cb60 <write_register8+0x4c>
		return false;
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	e000      	b.n	801cb62 <write_register8+0x4e>
	else
		return true;
 801cb60:	2301      	movs	r3, #1
}
 801cb62:	0018      	movs	r0, r3
 801cb64:	46bd      	mov	sp, r7
 801cb66:	b004      	add	sp, #16
 801cb68:	bd80      	pop	{r7, pc}
 801cb6a:	46c0      	nop			; (mov r8, r8)
 801cb6c:	00002710 	.word	0x00002710

0801cb70 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801cb70:	b590      	push	{r4, r7, lr}
 801cb72:	b085      	sub	sp, #20
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	6078      	str	r0, [r7, #4]
 801cb78:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cb7e:	2b76      	cmp	r3, #118	; 0x76
 801cb80:	d005      	beq.n	801cb8e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cb86:	2b77      	cmp	r3, #119	; 0x77
 801cb88:	d001      	beq.n	801cb8e <bmp280_init+0x1e>

		return false;
 801cb8a:	2300      	movs	r3, #0
 801cb8c:	e0a3      	b.n	801ccd6 <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	3332      	adds	r3, #50	; 0x32
 801cb92:	001a      	movs	r2, r3
 801cb94:	6878      	ldr	r0, [r7, #4]
 801cb96:	2301      	movs	r3, #1
 801cb98:	21d0      	movs	r1, #208	; 0xd0
 801cb9a:	f7ff fea7 	bl	801c8ec <read_data>
 801cb9e:	1e03      	subs	r3, r0, #0
 801cba0:	d001      	beq.n	801cba6 <bmp280_init+0x36>
		return false;
 801cba2:	2300      	movs	r3, #0
 801cba4:	e097      	b.n	801ccd6 <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	2232      	movs	r2, #50	; 0x32
 801cbaa:	5c9b      	ldrb	r3, [r3, r2]
 801cbac:	2b58      	cmp	r3, #88	; 0x58
 801cbae:	d006      	beq.n	801cbbe <bmp280_init+0x4e>
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	2232      	movs	r2, #50	; 0x32
 801cbb4:	5c9b      	ldrb	r3, [r3, r2]
 801cbb6:	2b60      	cmp	r3, #96	; 0x60
 801cbb8:	d001      	beq.n	801cbbe <bmp280_init+0x4e>

		return false;
 801cbba:	2300      	movs	r3, #0
 801cbbc:	e08b      	b.n	801ccd6 <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	22b6      	movs	r2, #182	; 0xb6
 801cbc2:	21e0      	movs	r1, #224	; 0xe0
 801cbc4:	0018      	movs	r0, r3
 801cbc6:	f7ff ffa5 	bl	801cb14 <write_register8>
 801cbca:	1e03      	subs	r3, r0, #0
 801cbcc:	d001      	beq.n	801cbd2 <bmp280_init+0x62>
		return false;
 801cbce:	2300      	movs	r3, #0
 801cbd0:	e081      	b.n	801ccd6 <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801cbd2:	240c      	movs	r4, #12
 801cbd4:	193a      	adds	r2, r7, r4
 801cbd6:	6878      	ldr	r0, [r7, #4]
 801cbd8:	2301      	movs	r3, #1
 801cbda:	21f3      	movs	r1, #243	; 0xf3
 801cbdc:	f7ff fe86 	bl	801c8ec <read_data>
 801cbe0:	1e03      	subs	r3, r0, #0
 801cbe2:	d1f6      	bne.n	801cbd2 <bmp280_init+0x62>
				&& (status & 1) == 0)
 801cbe4:	193b      	adds	r3, r7, r4
 801cbe6:	781b      	ldrb	r3, [r3, #0]
 801cbe8:	001a      	movs	r2, r3
 801cbea:	2301      	movs	r3, #1
 801cbec:	4013      	ands	r3, r2
 801cbee:	d1f0      	bne.n	801cbd2 <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	0018      	movs	r0, r3
 801cbf4:	f7ff feae 	bl	801c954 <read_calibration_data>
 801cbf8:	0003      	movs	r3, r0
 801cbfa:	001a      	movs	r2, r3
 801cbfc:	2301      	movs	r3, #1
 801cbfe:	4053      	eors	r3, r2
 801cc00:	b2db      	uxtb	r3, r3
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d100      	bne.n	801cc08 <bmp280_init+0x98>
 801cc06:	e001      	b.n	801cc0c <bmp280_init+0x9c>
		return false;
 801cc08:	2300      	movs	r3, #0
 801cc0a:	e064      	b.n	801ccd6 <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	2232      	movs	r2, #50	; 0x32
 801cc10:	5c9b      	ldrb	r3, [r3, r2]
 801cc12:	2b60      	cmp	r3, #96	; 0x60
 801cc14:	d10c      	bne.n	801cc30 <bmp280_init+0xc0>
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	0018      	movs	r0, r3
 801cc1a:	f7ff ff1b 	bl	801ca54 <read_hum_calibration_data>
 801cc1e:	0003      	movs	r3, r0
 801cc20:	001a      	movs	r2, r3
 801cc22:	2301      	movs	r3, #1
 801cc24:	4053      	eors	r3, r2
 801cc26:	b2db      	uxtb	r3, r3
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d001      	beq.n	801cc30 <bmp280_init+0xc0>
		return false;
 801cc2c:	2300      	movs	r3, #0
 801cc2e:	e052      	b.n	801ccd6 <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801cc30:	683b      	ldr	r3, [r7, #0]
 801cc32:	795b      	ldrb	r3, [r3, #5]
 801cc34:	015b      	lsls	r3, r3, #5
 801cc36:	b25a      	sxtb	r2, r3
 801cc38:	683b      	ldr	r3, [r7, #0]
 801cc3a:	785b      	ldrb	r3, [r3, #1]
 801cc3c:	009b      	lsls	r3, r3, #2
 801cc3e:	b25b      	sxtb	r3, r3
 801cc40:	4313      	orrs	r3, r2
 801cc42:	b25a      	sxtb	r2, r3
 801cc44:	210f      	movs	r1, #15
 801cc46:	187b      	adds	r3, r7, r1
 801cc48:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801cc4a:	187b      	adds	r3, r7, r1
 801cc4c:	781a      	ldrb	r2, [r3, #0]
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	21f5      	movs	r1, #245	; 0xf5
 801cc52:	0018      	movs	r0, r3
 801cc54:	f7ff ff5e 	bl	801cb14 <write_register8>
 801cc58:	1e03      	subs	r3, r0, #0
 801cc5a:	d001      	beq.n	801cc60 <bmp280_init+0xf0>
		return false;
 801cc5c:	2300      	movs	r3, #0
 801cc5e:	e03a      	b.n	801ccd6 <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801cc60:	683b      	ldr	r3, [r7, #0]
 801cc62:	781b      	ldrb	r3, [r3, #0]
 801cc64:	2b01      	cmp	r3, #1
 801cc66:	d102      	bne.n	801cc6e <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801cc68:	683b      	ldr	r3, [r7, #0]
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801cc6e:	683b      	ldr	r3, [r7, #0]
 801cc70:	78db      	ldrb	r3, [r3, #3]
 801cc72:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801cc74:	b25a      	sxtb	r2, r3
 801cc76:	683b      	ldr	r3, [r7, #0]
 801cc78:	789b      	ldrb	r3, [r3, #2]
 801cc7a:	009b      	lsls	r3, r3, #2
 801cc7c:	b25b      	sxtb	r3, r3
 801cc7e:	4313      	orrs	r3, r2
 801cc80:	b25a      	sxtb	r2, r3
 801cc82:	683b      	ldr	r3, [r7, #0]
 801cc84:	781b      	ldrb	r3, [r3, #0]
 801cc86:	b25b      	sxtb	r3, r3
 801cc88:	4313      	orrs	r3, r2
 801cc8a:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801cc8c:	230e      	movs	r3, #14
 801cc8e:	18fb      	adds	r3, r7, r3
 801cc90:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	2232      	movs	r2, #50	; 0x32
 801cc96:	5c9b      	ldrb	r3, [r3, r2]
 801cc98:	2b60      	cmp	r3, #96	; 0x60
 801cc9a:	d10f      	bne.n	801ccbc <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801cc9c:	210d      	movs	r1, #13
 801cc9e:	187b      	adds	r3, r7, r1
 801cca0:	683a      	ldr	r2, [r7, #0]
 801cca2:	7912      	ldrb	r2, [r2, #4]
 801cca4:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801cca6:	187b      	adds	r3, r7, r1
 801cca8:	781a      	ldrb	r2, [r3, #0]
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	21f2      	movs	r1, #242	; 0xf2
 801ccae:	0018      	movs	r0, r3
 801ccb0:	f7ff ff30 	bl	801cb14 <write_register8>
 801ccb4:	1e03      	subs	r3, r0, #0
 801ccb6:	d001      	beq.n	801ccbc <bmp280_init+0x14c>
			return false;
 801ccb8:	2300      	movs	r3, #0
 801ccba:	e00c      	b.n	801ccd6 <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801ccbc:	230e      	movs	r3, #14
 801ccbe:	18fb      	adds	r3, r7, r3
 801ccc0:	781a      	ldrb	r2, [r3, #0]
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	21f4      	movs	r1, #244	; 0xf4
 801ccc6:	0018      	movs	r0, r3
 801ccc8:	f7ff ff24 	bl	801cb14 <write_register8>
 801cccc:	1e03      	subs	r3, r0, #0
 801ccce:	d001      	beq.n	801ccd4 <bmp280_init+0x164>
		return false;
 801ccd0:	2300      	movs	r3, #0
 801ccd2:	e000      	b.n	801ccd6 <bmp280_init+0x166>
	}

	return true;
 801ccd4:	2301      	movs	r3, #1
}
 801ccd6:	0018      	movs	r0, r3
 801ccd8:	46bd      	mov	sp, r7
 801ccda:	b005      	add	sp, #20
 801ccdc:	bd90      	pop	{r4, r7, pc}

0801ccde <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801ccde:	b580      	push	{r7, lr}
 801cce0:	b086      	sub	sp, #24
 801cce2:	af00      	add	r7, sp, #0
 801cce4:	60f8      	str	r0, [r7, #12]
 801cce6:	60b9      	str	r1, [r7, #8]
 801cce8:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801ccea:	68bb      	ldr	r3, [r7, #8]
 801ccec:	10da      	asrs	r2, r3, #3
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	881b      	ldrh	r3, [r3, #0]
 801ccf2:	005b      	lsls	r3, r3, #1
 801ccf4:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801ccf6:	68fa      	ldr	r2, [r7, #12]
 801ccf8:	2102      	movs	r1, #2
 801ccfa:	5e52      	ldrsh	r2, [r2, r1]
 801ccfc:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801ccfe:	12db      	asrs	r3, r3, #11
 801cd00:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801cd02:	68bb      	ldr	r3, [r7, #8]
 801cd04:	111b      	asrs	r3, r3, #4
 801cd06:	68fa      	ldr	r2, [r7, #12]
 801cd08:	8812      	ldrh	r2, [r2, #0]
 801cd0a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801cd0c:	68ba      	ldr	r2, [r7, #8]
 801cd0e:	1112      	asrs	r2, r2, #4
 801cd10:	68f9      	ldr	r1, [r7, #12]
 801cd12:	8809      	ldrh	r1, [r1, #0]
 801cd14:	1a52      	subs	r2, r2, r1
 801cd16:	4353      	muls	r3, r2
 801cd18:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801cd1a:	68fa      	ldr	r2, [r7, #12]
 801cd1c:	2104      	movs	r1, #4
 801cd1e:	5e52      	ldrsh	r2, [r2, r1]
 801cd20:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801cd22:	139b      	asrs	r3, r3, #14
 801cd24:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801cd26:	697a      	ldr	r2, [r7, #20]
 801cd28:	693b      	ldr	r3, [r7, #16]
 801cd2a:	18d2      	adds	r2, r2, r3
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	681a      	ldr	r2, [r3, #0]
 801cd34:	0013      	movs	r3, r2
 801cd36:	009b      	lsls	r3, r3, #2
 801cd38:	189b      	adds	r3, r3, r2
 801cd3a:	3380      	adds	r3, #128	; 0x80
 801cd3c:	121b      	asrs	r3, r3, #8
}
 801cd3e:	0018      	movs	r0, r3
 801cd40:	46bd      	mov	sp, r7
 801cd42:	b006      	add	sp, #24
 801cd44:	bd80      	pop	{r7, pc}
	...

0801cd48 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801cd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd4a:	b0af      	sub	sp, #188	; 0xbc
 801cd4c:	af00      	add	r7, sp, #0
 801cd4e:	239c      	movs	r3, #156	; 0x9c
 801cd50:	18fe      	adds	r6, r7, r3
 801cd52:	6030      	str	r0, [r6, #0]
 801cd54:	2098      	movs	r0, #152	; 0x98
 801cd56:	1838      	adds	r0, r7, r0
 801cd58:	6001      	str	r1, [r0, #0]
 801cd5a:	2194      	movs	r1, #148	; 0x94
 801cd5c:	1878      	adds	r0, r7, r1
 801cd5e:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801cd60:	187a      	adds	r2, r7, r1
 801cd62:	6813      	ldr	r3, [r2, #0]
 801cd64:	65bb      	str	r3, [r7, #88]	; 0x58
 801cd66:	17db      	asrs	r3, r3, #31
 801cd68:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cd6a:	4ace      	ldr	r2, [pc, #824]	; (801d0a4 <compensate_pressure+0x35c>)
 801cd6c:	2301      	movs	r3, #1
 801cd6e:	425b      	negs	r3, r3
 801cd70:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801cd72:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801cd74:	1880      	adds	r0, r0, r2
 801cd76:	4159      	adcs	r1, r3
 801cd78:	0002      	movs	r2, r0
 801cd7a:	000b      	movs	r3, r1
 801cd7c:	26b0      	movs	r6, #176	; 0xb0
 801cd7e:	19b9      	adds	r1, r7, r6
 801cd80:	600a      	str	r2, [r1, #0]
 801cd82:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801cd84:	19ba      	adds	r2, r7, r6
 801cd86:	6853      	ldr	r3, [r2, #4]
 801cd88:	6812      	ldr	r2, [r2, #0]
 801cd8a:	19b9      	adds	r1, r7, r6
 801cd8c:	6808      	ldr	r0, [r1, #0]
 801cd8e:	6849      	ldr	r1, [r1, #4]
 801cd90:	f7e3 fbba 	bl	8000508 <__aeabi_lmul>
 801cd94:	0002      	movs	r2, r0
 801cd96:	000b      	movs	r3, r1
 801cd98:	0010      	movs	r0, r2
 801cd9a:	0019      	movs	r1, r3
 801cd9c:	239c      	movs	r3, #156	; 0x9c
 801cd9e:	18fa      	adds	r2, r7, r3
 801cda0:	6813      	ldr	r3, [r2, #0]
 801cda2:	2210      	movs	r2, #16
 801cda4:	5e9b      	ldrsh	r3, [r3, r2]
 801cda6:	653b      	str	r3, [r7, #80]	; 0x50
 801cda8:	17db      	asrs	r3, r3, #31
 801cdaa:	657b      	str	r3, [r7, #84]	; 0x54
 801cdac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801cdae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cdb0:	f7e3 fbaa 	bl	8000508 <__aeabi_lmul>
 801cdb4:	0002      	movs	r2, r0
 801cdb6:	000b      	movs	r3, r1
 801cdb8:	21a8      	movs	r1, #168	; 0xa8
 801cdba:	1878      	adds	r0, r7, r1
 801cdbc:	6002      	str	r2, [r0, #0]
 801cdbe:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801cdc0:	239c      	movs	r3, #156	; 0x9c
 801cdc2:	18fa      	adds	r2, r7, r3
 801cdc4:	6813      	ldr	r3, [r2, #0]
 801cdc6:	220e      	movs	r2, #14
 801cdc8:	5e9b      	ldrsh	r3, [r3, r2]
 801cdca:	64bb      	str	r3, [r7, #72]	; 0x48
 801cdcc:	17db      	asrs	r3, r3, #31
 801cdce:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cdd0:	19ba      	adds	r2, r7, r6
 801cdd2:	6853      	ldr	r3, [r2, #4]
 801cdd4:	6812      	ldr	r2, [r2, #0]
 801cdd6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801cdd8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801cdda:	f7e3 fb95 	bl	8000508 <__aeabi_lmul>
 801cdde:	0002      	movs	r2, r0
 801cde0:	000b      	movs	r3, r1
 801cde2:	0bd1      	lsrs	r1, r2, #15
 801cde4:	045d      	lsls	r5, r3, #17
 801cde6:	430d      	orrs	r5, r1
 801cde8:	0454      	lsls	r4, r2, #17
 801cdea:	21a8      	movs	r1, #168	; 0xa8
 801cdec:	187a      	adds	r2, r7, r1
 801cdee:	6853      	ldr	r3, [r2, #4]
 801cdf0:	6812      	ldr	r2, [r2, #0]
 801cdf2:	1912      	adds	r2, r2, r4
 801cdf4:	416b      	adcs	r3, r5
 801cdf6:	1878      	adds	r0, r7, r1
 801cdf8:	6002      	str	r2, [r0, #0]
 801cdfa:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801cdfc:	259c      	movs	r5, #156	; 0x9c
 801cdfe:	197b      	adds	r3, r7, r5
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	220c      	movs	r2, #12
 801ce04:	5e9b      	ldrsh	r3, [r3, r2]
 801ce06:	643b      	str	r3, [r7, #64]	; 0x40
 801ce08:	17db      	asrs	r3, r3, #31
 801ce0a:	647b      	str	r3, [r7, #68]	; 0x44
 801ce0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ce0e:	00db      	lsls	r3, r3, #3
 801ce10:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ce12:	2300      	movs	r3, #0
 801ce14:	63bb      	str	r3, [r7, #56]	; 0x38
 801ce16:	000c      	movs	r4, r1
 801ce18:	187b      	adds	r3, r7, r1
 801ce1a:	681a      	ldr	r2, [r3, #0]
 801ce1c:	685b      	ldr	r3, [r3, #4]
 801ce1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801ce20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ce22:	1812      	adds	r2, r2, r0
 801ce24:	414b      	adcs	r3, r1
 801ce26:	1939      	adds	r1, r7, r4
 801ce28:	600a      	str	r2, [r1, #0]
 801ce2a:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801ce2c:	0034      	movs	r4, r6
 801ce2e:	193b      	adds	r3, r7, r4
 801ce30:	681a      	ldr	r2, [r3, #0]
 801ce32:	685b      	ldr	r3, [r3, #4]
 801ce34:	1939      	adds	r1, r7, r4
 801ce36:	6808      	ldr	r0, [r1, #0]
 801ce38:	6849      	ldr	r1, [r1, #4]
 801ce3a:	f7e3 fb65 	bl	8000508 <__aeabi_lmul>
 801ce3e:	0002      	movs	r2, r0
 801ce40:	000b      	movs	r3, r1
 801ce42:	0010      	movs	r0, r2
 801ce44:	0019      	movs	r1, r3
 801ce46:	197b      	adds	r3, r7, r5
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	220a      	movs	r2, #10
 801ce4c:	5e9b      	ldrsh	r3, [r3, r2]
 801ce4e:	633b      	str	r3, [r7, #48]	; 0x30
 801ce50:	17db      	asrs	r3, r3, #31
 801ce52:	637b      	str	r3, [r7, #52]	; 0x34
 801ce54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ce56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce58:	f7e3 fb56 	bl	8000508 <__aeabi_lmul>
 801ce5c:	0002      	movs	r2, r0
 801ce5e:	000b      	movs	r3, r1
 801ce60:	0619      	lsls	r1, r3, #24
 801ce62:	468c      	mov	ip, r1
 801ce64:	0a10      	lsrs	r0, r2, #8
 801ce66:	2688      	movs	r6, #136	; 0x88
 801ce68:	19b9      	adds	r1, r7, r6
 801ce6a:	6008      	str	r0, [r1, #0]
 801ce6c:	19b8      	adds	r0, r7, r6
 801ce6e:	6800      	ldr	r0, [r0, #0]
 801ce70:	4661      	mov	r1, ip
 801ce72:	4308      	orrs	r0, r1
 801ce74:	19b9      	adds	r1, r7, r6
 801ce76:	6008      	str	r0, [r1, #0]
 801ce78:	121b      	asrs	r3, r3, #8
 801ce7a:	228c      	movs	r2, #140	; 0x8c
 801ce7c:	18ba      	adds	r2, r7, r2
 801ce7e:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801ce80:	197b      	adds	r3, r7, r5
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	2208      	movs	r2, #8
 801ce86:	5e9b      	ldrsh	r3, [r3, r2]
 801ce88:	62bb      	str	r3, [r7, #40]	; 0x28
 801ce8a:	17db      	asrs	r3, r3, #31
 801ce8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ce8e:	193b      	adds	r3, r7, r4
 801ce90:	681a      	ldr	r2, [r3, #0]
 801ce92:	685b      	ldr	r3, [r3, #4]
 801ce94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ce96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ce98:	f7e3 fb36 	bl	8000508 <__aeabi_lmul>
 801ce9c:	0002      	movs	r2, r0
 801ce9e:	000b      	movs	r3, r1
 801cea0:	0d11      	lsrs	r1, r2, #20
 801cea2:	468c      	mov	ip, r1
 801cea4:	0318      	lsls	r0, r3, #12
 801cea6:	2184      	movs	r1, #132	; 0x84
 801cea8:	1879      	adds	r1, r7, r1
 801ceaa:	6008      	str	r0, [r1, #0]
 801ceac:	2084      	movs	r0, #132	; 0x84
 801ceae:	1839      	adds	r1, r7, r0
 801ceb0:	6808      	ldr	r0, [r1, #0]
 801ceb2:	4661      	mov	r1, ip
 801ceb4:	4308      	orrs	r0, r1
 801ceb6:	2184      	movs	r1, #132	; 0x84
 801ceb8:	1879      	adds	r1, r7, r1
 801ceba:	6008      	str	r0, [r1, #0]
 801cebc:	0313      	lsls	r3, r2, #12
 801cebe:	2180      	movs	r1, #128	; 0x80
 801cec0:	187a      	adds	r2, r7, r1
 801cec2:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801cec4:	19bb      	adds	r3, r7, r6
 801cec6:	681a      	ldr	r2, [r3, #0]
 801cec8:	685b      	ldr	r3, [r3, #4]
 801ceca:	1879      	adds	r1, r7, r1
 801cecc:	6808      	ldr	r0, [r1, #0]
 801cece:	6849      	ldr	r1, [r1, #4]
 801ced0:	1812      	adds	r2, r2, r0
 801ced2:	414b      	adcs	r3, r1
 801ced4:	1939      	adds	r1, r7, r4
 801ced6:	600a      	str	r2, [r1, #0]
 801ced8:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801ceda:	193b      	adds	r3, r7, r4
 801cedc:	6818      	ldr	r0, [r3, #0]
 801cede:	6859      	ldr	r1, [r3, #4]
 801cee0:	2200      	movs	r2, #0
 801cee2:	2380      	movs	r3, #128	; 0x80
 801cee4:	021b      	lsls	r3, r3, #8
 801cee6:	1880      	adds	r0, r0, r2
 801cee8:	4159      	adcs	r1, r3
 801ceea:	197b      	adds	r3, r7, r5
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	88db      	ldrh	r3, [r3, #6]
 801cef0:	623b      	str	r3, [r7, #32]
 801cef2:	2300      	movs	r3, #0
 801cef4:	627b      	str	r3, [r7, #36]	; 0x24
 801cef6:	6a3a      	ldr	r2, [r7, #32]
 801cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cefa:	f7e3 fb05 	bl	8000508 <__aeabi_lmul>
 801cefe:	0002      	movs	r2, r0
 801cf00:	000b      	movs	r3, r1
 801cf02:	1059      	asrs	r1, r3, #1
 801cf04:	1938      	adds	r0, r7, r4
 801cf06:	6001      	str	r1, [r0, #0]
 801cf08:	17db      	asrs	r3, r3, #31
 801cf0a:	21b4      	movs	r1, #180	; 0xb4
 801cf0c:	187a      	adds	r2, r7, r1
 801cf0e:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 801cf10:	193b      	adds	r3, r7, r4
 801cf12:	681a      	ldr	r2, [r3, #0]
 801cf14:	187b      	adds	r3, r7, r1
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	431a      	orrs	r2, r3
 801cf1a:	d101      	bne.n	801cf20 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 801cf1c:	2300      	movs	r3, #0
 801cf1e:	e0bc      	b.n	801d09a <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 801cf20:	2398      	movs	r3, #152	; 0x98
 801cf22:	18fb      	adds	r3, r7, r3
 801cf24:	681a      	ldr	r2, [r3, #0]
 801cf26:	2380      	movs	r3, #128	; 0x80
 801cf28:	035b      	lsls	r3, r3, #13
 801cf2a:	1a9b      	subs	r3, r3, r2
 801cf2c:	24a0      	movs	r4, #160	; 0xa0
 801cf2e:	193a      	adds	r2, r7, r4
 801cf30:	6013      	str	r3, [r2, #0]
 801cf32:	17db      	asrs	r3, r3, #31
 801cf34:	25a4      	movs	r5, #164	; 0xa4
 801cf36:	197a      	adds	r2, r7, r5
 801cf38:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 801cf3a:	193b      	adds	r3, r7, r4
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	105b      	asrs	r3, r3, #1
 801cf40:	61fb      	str	r3, [r7, #28]
 801cf42:	193b      	adds	r3, r7, r4
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	07db      	lsls	r3, r3, #31
 801cf48:	61bb      	str	r3, [r7, #24]
 801cf4a:	20a8      	movs	r0, #168	; 0xa8
 801cf4c:	183a      	adds	r2, r7, r0
 801cf4e:	6853      	ldr	r3, [r2, #4]
 801cf50:	6812      	ldr	r2, [r2, #0]
 801cf52:	69b8      	ldr	r0, [r7, #24]
 801cf54:	69f9      	ldr	r1, [r7, #28]
 801cf56:	1a80      	subs	r0, r0, r2
 801cf58:	4199      	sbcs	r1, r3
 801cf5a:	4a53      	ldr	r2, [pc, #332]	; (801d0a8 <compensate_pressure+0x360>)
 801cf5c:	2300      	movs	r3, #0
 801cf5e:	f7e3 fad3 	bl	8000508 <__aeabi_lmul>
 801cf62:	0002      	movs	r2, r0
 801cf64:	000b      	movs	r3, r1
 801cf66:	0010      	movs	r0, r2
 801cf68:	0019      	movs	r1, r3
 801cf6a:	23b0      	movs	r3, #176	; 0xb0
 801cf6c:	18fa      	adds	r2, r7, r3
 801cf6e:	6853      	ldr	r3, [r2, #4]
 801cf70:	6812      	ldr	r2, [r2, #0]
 801cf72:	f7e3 fa85 	bl	8000480 <__aeabi_ldivmod>
 801cf76:	0002      	movs	r2, r0
 801cf78:	000b      	movs	r3, r1
 801cf7a:	1939      	adds	r1, r7, r4
 801cf7c:	600a      	str	r2, [r1, #0]
 801cf7e:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801cf80:	269c      	movs	r6, #156	; 0x9c
 801cf82:	19ba      	adds	r2, r7, r6
 801cf84:	6813      	ldr	r3, [r2, #0]
 801cf86:	2216      	movs	r2, #22
 801cf88:	5e9b      	ldrsh	r3, [r3, r2]
 801cf8a:	613b      	str	r3, [r7, #16]
 801cf8c:	17db      	asrs	r3, r3, #31
 801cf8e:	617b      	str	r3, [r7, #20]
 801cf90:	197a      	adds	r2, r7, r5
 801cf92:	6813      	ldr	r3, [r2, #0]
 801cf94:	04da      	lsls	r2, r3, #19
 801cf96:	1939      	adds	r1, r7, r4
 801cf98:	680b      	ldr	r3, [r1, #0]
 801cf9a:	0b5b      	lsrs	r3, r3, #13
 801cf9c:	67bb      	str	r3, [r7, #120]	; 0x78
 801cf9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801cfa0:	4313      	orrs	r3, r2
 801cfa2:	67bb      	str	r3, [r7, #120]	; 0x78
 801cfa4:	197a      	adds	r2, r7, r5
 801cfa6:	6813      	ldr	r3, [r2, #0]
 801cfa8:	135b      	asrs	r3, r3, #13
 801cfaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 801cfac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801cfae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cfb0:	6938      	ldr	r0, [r7, #16]
 801cfb2:	6979      	ldr	r1, [r7, #20]
 801cfb4:	f7e3 faa8 	bl	8000508 <__aeabi_lmul>
 801cfb8:	0002      	movs	r2, r0
 801cfba:	000b      	movs	r3, r1
 801cfbc:	0010      	movs	r0, r2
 801cfbe:	0019      	movs	r1, r3
 801cfc0:	197a      	adds	r2, r7, r5
 801cfc2:	6813      	ldr	r3, [r2, #0]
 801cfc4:	04da      	lsls	r2, r3, #19
 801cfc6:	193b      	adds	r3, r7, r4
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	0b5b      	lsrs	r3, r3, #13
 801cfcc:	673b      	str	r3, [r7, #112]	; 0x70
 801cfce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cfd0:	4313      	orrs	r3, r2
 801cfd2:	673b      	str	r3, [r7, #112]	; 0x70
 801cfd4:	197a      	adds	r2, r7, r5
 801cfd6:	6813      	ldr	r3, [r2, #0]
 801cfd8:	135b      	asrs	r3, r3, #13
 801cfda:	677b      	str	r3, [r7, #116]	; 0x74
 801cfdc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801cfde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cfe0:	f7e3 fa92 	bl	8000508 <__aeabi_lmul>
 801cfe4:	0002      	movs	r2, r0
 801cfe6:	000b      	movs	r3, r1
 801cfe8:	01d9      	lsls	r1, r3, #7
 801cfea:	0e50      	lsrs	r0, r2, #25
 801cfec:	4301      	orrs	r1, r0
 801cfee:	25b0      	movs	r5, #176	; 0xb0
 801cff0:	1978      	adds	r0, r7, r5
 801cff2:	6001      	str	r1, [r0, #0]
 801cff4:	165b      	asrs	r3, r3, #25
 801cff6:	22b4      	movs	r2, #180	; 0xb4
 801cff8:	18ba      	adds	r2, r7, r2
 801cffa:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801cffc:	19ba      	adds	r2, r7, r6
 801cffe:	6813      	ldr	r3, [r2, #0]
 801d000:	2214      	movs	r2, #20
 801d002:	5e9b      	ldrsh	r3, [r3, r2]
 801d004:	60bb      	str	r3, [r7, #8]
 801d006:	17db      	asrs	r3, r3, #31
 801d008:	60fb      	str	r3, [r7, #12]
 801d00a:	193a      	adds	r2, r7, r4
 801d00c:	6853      	ldr	r3, [r2, #4]
 801d00e:	6812      	ldr	r2, [r2, #0]
 801d010:	68b8      	ldr	r0, [r7, #8]
 801d012:	68f9      	ldr	r1, [r7, #12]
 801d014:	f7e3 fa78 	bl	8000508 <__aeabi_lmul>
 801d018:	0002      	movs	r2, r0
 801d01a:	000b      	movs	r3, r1
 801d01c:	0359      	lsls	r1, r3, #13
 801d01e:	0cd0      	lsrs	r0, r2, #19
 801d020:	4301      	orrs	r1, r0
 801d022:	20a8      	movs	r0, #168	; 0xa8
 801d024:	1838      	adds	r0, r7, r0
 801d026:	6001      	str	r1, [r0, #0]
 801d028:	14db      	asrs	r3, r3, #19
 801d02a:	22ac      	movs	r2, #172	; 0xac
 801d02c:	18ba      	adds	r2, r7, r2
 801d02e:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801d030:	193a      	adds	r2, r7, r4
 801d032:	6810      	ldr	r0, [r2, #0]
 801d034:	6851      	ldr	r1, [r2, #4]
 801d036:	197a      	adds	r2, r7, r5
 801d038:	6853      	ldr	r3, [r2, #4]
 801d03a:	6812      	ldr	r2, [r2, #0]
 801d03c:	1880      	adds	r0, r0, r2
 801d03e:	4159      	adcs	r1, r3
 801d040:	23a8      	movs	r3, #168	; 0xa8
 801d042:	18fb      	adds	r3, r7, r3
 801d044:	681a      	ldr	r2, [r3, #0]
 801d046:	685b      	ldr	r3, [r3, #4]
 801d048:	1812      	adds	r2, r2, r0
 801d04a:	414b      	adcs	r3, r1
 801d04c:	0619      	lsls	r1, r3, #24
 801d04e:	0a10      	lsrs	r0, r2, #8
 801d050:	66b8      	str	r0, [r7, #104]	; 0x68
 801d052:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801d054:	4308      	orrs	r0, r1
 801d056:	66b8      	str	r0, [r7, #104]	; 0x68
 801d058:	121b      	asrs	r3, r3, #8
 801d05a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d05c:	19bb      	adds	r3, r7, r6
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	2212      	movs	r2, #18
 801d062:	5e9b      	ldrsh	r3, [r3, r2]
 801d064:	603b      	str	r3, [r7, #0]
 801d066:	17db      	asrs	r3, r3, #31
 801d068:	607b      	str	r3, [r7, #4]
 801d06a:	6839      	ldr	r1, [r7, #0]
 801d06c:	687a      	ldr	r2, [r7, #4]
 801d06e:	000b      	movs	r3, r1
 801d070:	0f1b      	lsrs	r3, r3, #28
 801d072:	0010      	movs	r0, r2
 801d074:	0100      	lsls	r0, r0, #4
 801d076:	6678      	str	r0, [r7, #100]	; 0x64
 801d078:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801d07a:	4318      	orrs	r0, r3
 801d07c:	6678      	str	r0, [r7, #100]	; 0x64
 801d07e:	000b      	movs	r3, r1
 801d080:	011b      	lsls	r3, r3, #4
 801d082:	663b      	str	r3, [r7, #96]	; 0x60
 801d084:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d088:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d08a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801d08c:	1812      	adds	r2, r2, r0
 801d08e:	414b      	adcs	r3, r1
 801d090:	1939      	adds	r1, r7, r4
 801d092:	600a      	str	r2, [r1, #0]
 801d094:	604b      	str	r3, [r1, #4]
	return p;
 801d096:	193b      	adds	r3, r7, r4
 801d098:	681b      	ldr	r3, [r3, #0]
}
 801d09a:	0018      	movs	r0, r3
 801d09c:	46bd      	mov	sp, r7
 801d09e:	b02f      	add	sp, #188	; 0xbc
 801d0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0a2:	46c0      	nop			; (mov r8, r8)
 801d0a4:	fffe0c00 	.word	0xfffe0c00
 801d0a8:	00000c35 	.word	0x00000c35

0801d0ac <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b086      	sub	sp, #24
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	60f8      	str	r0, [r7, #12]
 801d0b4:	60b9      	str	r1, [r7, #8]
 801d0b6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	4a2c      	ldr	r2, [pc, #176]	; (801d16c <compensate_humidity+0xc0>)
 801d0bc:	4694      	mov	ip, r2
 801d0be:	4463      	add	r3, ip
 801d0c0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801d0c2:	68bb      	ldr	r3, [r7, #8]
 801d0c4:	039a      	lsls	r2, r3, #14
 801d0c6:	68fb      	ldr	r3, [r7, #12]
 801d0c8:	211e      	movs	r1, #30
 801d0ca:	5e5b      	ldrsh	r3, [r3, r1]
 801d0cc:	051b      	lsls	r3, r3, #20
 801d0ce:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801d0d0:	68fb      	ldr	r3, [r7, #12]
 801d0d2:	2120      	movs	r1, #32
 801d0d4:	5e5b      	ldrsh	r3, [r3, r1]
 801d0d6:	0019      	movs	r1, r3
 801d0d8:	697b      	ldr	r3, [r7, #20]
 801d0da:	434b      	muls	r3, r1
 801d0dc:	1ad3      	subs	r3, r2, r3
 801d0de:	2280      	movs	r2, #128	; 0x80
 801d0e0:	01d2      	lsls	r2, r2, #7
 801d0e2:	4694      	mov	ip, r2
 801d0e4:	4463      	add	r3, ip
 801d0e6:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801d0e8:	68fa      	ldr	r2, [r7, #12]
 801d0ea:	2122      	movs	r1, #34	; 0x22
 801d0ec:	5652      	ldrsb	r2, [r2, r1]
 801d0ee:	0011      	movs	r1, r2
 801d0f0:	697a      	ldr	r2, [r7, #20]
 801d0f2:	434a      	muls	r2, r1
 801d0f4:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801d0f6:	68f9      	ldr	r1, [r7, #12]
 801d0f8:	7f09      	ldrb	r1, [r1, #28]
 801d0fa:	0008      	movs	r0, r1
 801d0fc:	6979      	ldr	r1, [r7, #20]
 801d0fe:	4341      	muls	r1, r0
 801d100:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801d102:	2080      	movs	r0, #128	; 0x80
 801d104:	0200      	lsls	r0, r0, #8
 801d106:	4684      	mov	ip, r0
 801d108:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801d10a:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801d10c:	1292      	asrs	r2, r2, #10
 801d10e:	2180      	movs	r1, #128	; 0x80
 801d110:	0389      	lsls	r1, r1, #14
 801d112:	468c      	mov	ip, r1
 801d114:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801d116:	68f9      	ldr	r1, [r7, #12]
 801d118:	201a      	movs	r0, #26
 801d11a:	5e09      	ldrsh	r1, [r1, r0]
 801d11c:	434a      	muls	r2, r1
 801d11e:	2180      	movs	r1, #128	; 0x80
 801d120:	0189      	lsls	r1, r1, #6
 801d122:	468c      	mov	ip, r1
 801d124:	4462      	add	r2, ip
 801d126:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801d128:	4353      	muls	r3, r2
 801d12a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801d12c:	697b      	ldr	r3, [r7, #20]
 801d12e:	13db      	asrs	r3, r3, #15
 801d130:	697a      	ldr	r2, [r7, #20]
 801d132:	13d2      	asrs	r2, r2, #15
 801d134:	4353      	muls	r3, r2
 801d136:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801d138:	68fa      	ldr	r2, [r7, #12]
 801d13a:	7e12      	ldrb	r2, [r2, #24]
 801d13c:	4353      	muls	r3, r2
 801d13e:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801d140:	697a      	ldr	r2, [r7, #20]
 801d142:	1ad3      	subs	r3, r2, r3
 801d144:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801d146:	697b      	ldr	r3, [r7, #20]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	da00      	bge.n	801d14e <compensate_humidity+0xa2>
 801d14c:	2300      	movs	r3, #0
 801d14e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801d150:	697b      	ldr	r3, [r7, #20]
 801d152:	22c8      	movs	r2, #200	; 0xc8
 801d154:	0552      	lsls	r2, r2, #21
 801d156:	4293      	cmp	r3, r2
 801d158:	dd01      	ble.n	801d15e <compensate_humidity+0xb2>
 801d15a:	23c8      	movs	r3, #200	; 0xc8
 801d15c:	055b      	lsls	r3, r3, #21
 801d15e:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801d160:	697b      	ldr	r3, [r7, #20]
 801d162:	131b      	asrs	r3, r3, #12
}
 801d164:	0018      	movs	r0, r3
 801d166:	46bd      	mov	sp, r7
 801d168:	b006      	add	sp, #24
 801d16a:	bd80      	pop	{r7, pc}
 801d16c:	fffed400 	.word	0xfffed400

0801d170 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801d170:	b590      	push	{r4, r7, lr}
 801d172:	b08d      	sub	sp, #52	; 0x34
 801d174:	af00      	add	r7, sp, #0
 801d176:	60f8      	str	r0, [r7, #12]
 801d178:	60b9      	str	r1, [r7, #8]
 801d17a:	607a      	str	r2, [r7, #4]
 801d17c:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801d17e:	68fb      	ldr	r3, [r7, #12]
 801d180:	2232      	movs	r2, #50	; 0x32
 801d182:	5c9b      	ldrb	r3, [r3, r2]
 801d184:	2b60      	cmp	r3, #96	; 0x60
 801d186:	d007      	beq.n	801d198 <bmp280_read_fixed+0x28>
		if (humidity)
 801d188:	683b      	ldr	r3, [r7, #0]
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d002      	beq.n	801d194 <bmp280_read_fixed+0x24>
			*humidity = 0;
 801d18e:	683b      	ldr	r3, [r7, #0]
 801d190:	2200      	movs	r2, #0
 801d192:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801d194:	2300      	movs	r3, #0
 801d196:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801d198:	683b      	ldr	r3, [r7, #0]
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d001      	beq.n	801d1a2 <bmp280_read_fixed+0x32>
 801d19e:	2308      	movs	r3, #8
 801d1a0:	e000      	b.n	801d1a4 <bmp280_read_fixed+0x34>
 801d1a2:	2306      	movs	r3, #6
 801d1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1a8:	b2db      	uxtb	r3, r3
 801d1aa:	2218      	movs	r2, #24
 801d1ac:	18ba      	adds	r2, r7, r2
 801d1ae:	68f8      	ldr	r0, [r7, #12]
 801d1b0:	21f7      	movs	r1, #247	; 0xf7
 801d1b2:	f7ff fb9b 	bl	801c8ec <read_data>
 801d1b6:	1e03      	subs	r3, r0, #0
 801d1b8:	d001      	beq.n	801d1be <bmp280_read_fixed+0x4e>
		return false;
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	e041      	b.n	801d242 <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801d1be:	2418      	movs	r4, #24
 801d1c0:	193b      	adds	r3, r7, r4
 801d1c2:	781b      	ldrb	r3, [r3, #0]
 801d1c4:	031a      	lsls	r2, r3, #12
 801d1c6:	193b      	adds	r3, r7, r4
 801d1c8:	785b      	ldrb	r3, [r3, #1]
 801d1ca:	011b      	lsls	r3, r3, #4
 801d1cc:	4313      	orrs	r3, r2
 801d1ce:	193a      	adds	r2, r7, r4
 801d1d0:	7892      	ldrb	r2, [r2, #2]
 801d1d2:	0912      	lsrs	r2, r2, #4
 801d1d4:	b2d2      	uxtb	r2, r2
 801d1d6:	4313      	orrs	r3, r2
 801d1d8:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801d1da:	193b      	adds	r3, r7, r4
 801d1dc:	78db      	ldrb	r3, [r3, #3]
 801d1de:	031a      	lsls	r2, r3, #12
 801d1e0:	193b      	adds	r3, r7, r4
 801d1e2:	791b      	ldrb	r3, [r3, #4]
 801d1e4:	011b      	lsls	r3, r3, #4
 801d1e6:	4313      	orrs	r3, r2
 801d1e8:	193a      	adds	r2, r7, r4
 801d1ea:	7952      	ldrb	r2, [r2, #5]
 801d1ec:	0912      	lsrs	r2, r2, #4
 801d1ee:	b2d2      	uxtb	r2, r2
 801d1f0:	4313      	orrs	r3, r2
 801d1f2:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801d1f4:	2314      	movs	r3, #20
 801d1f6:	18fa      	adds	r2, r7, r3
 801d1f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	0018      	movs	r0, r3
 801d1fe:	f7ff fd6e 	bl	801ccde <compensate_temperature>
 801d202:	0002      	movs	r2, r0
 801d204:	68bb      	ldr	r3, [r7, #8]
 801d206:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801d208:	697a      	ldr	r2, [r7, #20]
 801d20a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	0018      	movs	r0, r3
 801d210:	f7ff fd9a 	bl	801cd48 <compensate_pressure>
 801d214:	0002      	movs	r2, r0
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801d21a:	683b      	ldr	r3, [r7, #0]
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d00f      	beq.n	801d240 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801d220:	193b      	adds	r3, r7, r4
 801d222:	799b      	ldrb	r3, [r3, #6]
 801d224:	021b      	lsls	r3, r3, #8
 801d226:	193a      	adds	r2, r7, r4
 801d228:	79d2      	ldrb	r2, [r2, #7]
 801d22a:	4313      	orrs	r3, r2
 801d22c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801d22e:	697a      	ldr	r2, [r7, #20]
 801d230:	6a39      	ldr	r1, [r7, #32]
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	0018      	movs	r0, r3
 801d236:	f7ff ff39 	bl	801d0ac <compensate_humidity>
 801d23a:	0002      	movs	r2, r0
 801d23c:	683b      	ldr	r3, [r7, #0]
 801d23e:	601a      	str	r2, [r3, #0]
	}

	return true;
 801d240:	2301      	movs	r3, #1
}
 801d242:	0018      	movs	r0, r3
 801d244:	46bd      	mov	sp, r7
 801d246:	b00d      	add	sp, #52	; 0x34
 801d248:	bd90      	pop	{r4, r7, pc}
	...

0801d24c <__libc_init_array>:
 801d24c:	b570      	push	{r4, r5, r6, lr}
 801d24e:	2600      	movs	r6, #0
 801d250:	4d0c      	ldr	r5, [pc, #48]	; (801d284 <__libc_init_array+0x38>)
 801d252:	4c0d      	ldr	r4, [pc, #52]	; (801d288 <__libc_init_array+0x3c>)
 801d254:	1b64      	subs	r4, r4, r5
 801d256:	10a4      	asrs	r4, r4, #2
 801d258:	42a6      	cmp	r6, r4
 801d25a:	d109      	bne.n	801d270 <__libc_init_array+0x24>
 801d25c:	2600      	movs	r6, #0
 801d25e:	f000 f8b5 	bl	801d3cc <_init>
 801d262:	4d0a      	ldr	r5, [pc, #40]	; (801d28c <__libc_init_array+0x40>)
 801d264:	4c0a      	ldr	r4, [pc, #40]	; (801d290 <__libc_init_array+0x44>)
 801d266:	1b64      	subs	r4, r4, r5
 801d268:	10a4      	asrs	r4, r4, #2
 801d26a:	42a6      	cmp	r6, r4
 801d26c:	d105      	bne.n	801d27a <__libc_init_array+0x2e>
 801d26e:	bd70      	pop	{r4, r5, r6, pc}
 801d270:	00b3      	lsls	r3, r6, #2
 801d272:	58eb      	ldr	r3, [r5, r3]
 801d274:	4798      	blx	r3
 801d276:	3601      	adds	r6, #1
 801d278:	e7ee      	b.n	801d258 <__libc_init_array+0xc>
 801d27a:	00b3      	lsls	r3, r6, #2
 801d27c:	58eb      	ldr	r3, [r5, r3]
 801d27e:	4798      	blx	r3
 801d280:	3601      	adds	r6, #1
 801d282:	e7f2      	b.n	801d26a <__libc_init_array+0x1e>
 801d284:	0801e910 	.word	0x0801e910
 801d288:	0801e910 	.word	0x0801e910
 801d28c:	0801e910 	.word	0x0801e910
 801d290:	0801e914 	.word	0x0801e914

0801d294 <memcpy>:
 801d294:	2300      	movs	r3, #0
 801d296:	b510      	push	{r4, lr}
 801d298:	429a      	cmp	r2, r3
 801d29a:	d100      	bne.n	801d29e <memcpy+0xa>
 801d29c:	bd10      	pop	{r4, pc}
 801d29e:	5ccc      	ldrb	r4, [r1, r3]
 801d2a0:	54c4      	strb	r4, [r0, r3]
 801d2a2:	3301      	adds	r3, #1
 801d2a4:	e7f8      	b.n	801d298 <memcpy+0x4>

0801d2a6 <memset>:
 801d2a6:	0003      	movs	r3, r0
 801d2a8:	1882      	adds	r2, r0, r2
 801d2aa:	4293      	cmp	r3, r2
 801d2ac:	d100      	bne.n	801d2b0 <memset+0xa>
 801d2ae:	4770      	bx	lr
 801d2b0:	7019      	strb	r1, [r3, #0]
 801d2b2:	3301      	adds	r3, #1
 801d2b4:	e7f9      	b.n	801d2aa <memset+0x4>
	...

0801d2b8 <floor>:
 801d2b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d2ba:	004b      	lsls	r3, r1, #1
 801d2bc:	4a3d      	ldr	r2, [pc, #244]	; (801d3b4 <floor+0xfc>)
 801d2be:	0d5b      	lsrs	r3, r3, #21
 801d2c0:	189f      	adds	r7, r3, r2
 801d2c2:	4684      	mov	ip, r0
 801d2c4:	000e      	movs	r6, r1
 801d2c6:	000d      	movs	r5, r1
 801d2c8:	0004      	movs	r4, r0
 801d2ca:	9001      	str	r0, [sp, #4]
 801d2cc:	2f13      	cmp	r7, #19
 801d2ce:	dc34      	bgt.n	801d33a <floor+0x82>
 801d2d0:	2f00      	cmp	r7, #0
 801d2d2:	da16      	bge.n	801d302 <floor+0x4a>
 801d2d4:	4a38      	ldr	r2, [pc, #224]	; (801d3b8 <floor+0x100>)
 801d2d6:	4b39      	ldr	r3, [pc, #228]	; (801d3bc <floor+0x104>)
 801d2d8:	4660      	mov	r0, ip
 801d2da:	0031      	movs	r1, r6
 801d2dc:	f7e3 fc3a 	bl	8000b54 <__aeabi_dadd>
 801d2e0:	2200      	movs	r2, #0
 801d2e2:	2300      	movs	r3, #0
 801d2e4:	f7e3 f8b8 	bl	8000458 <__aeabi_dcmpgt>
 801d2e8:	2800      	cmp	r0, #0
 801d2ea:	d007      	beq.n	801d2fc <floor+0x44>
 801d2ec:	2e00      	cmp	r6, #0
 801d2ee:	da5d      	bge.n	801d3ac <floor+0xf4>
 801d2f0:	0073      	lsls	r3, r6, #1
 801d2f2:	085b      	lsrs	r3, r3, #1
 801d2f4:	431c      	orrs	r4, r3
 801d2f6:	d001      	beq.n	801d2fc <floor+0x44>
 801d2f8:	2400      	movs	r4, #0
 801d2fa:	4d31      	ldr	r5, [pc, #196]	; (801d3c0 <floor+0x108>)
 801d2fc:	46a4      	mov	ip, r4
 801d2fe:	002e      	movs	r6, r5
 801d300:	e029      	b.n	801d356 <floor+0x9e>
 801d302:	4b30      	ldr	r3, [pc, #192]	; (801d3c4 <floor+0x10c>)
 801d304:	413b      	asrs	r3, r7
 801d306:	9300      	str	r3, [sp, #0]
 801d308:	400b      	ands	r3, r1
 801d30a:	4303      	orrs	r3, r0
 801d30c:	d023      	beq.n	801d356 <floor+0x9e>
 801d30e:	4a2a      	ldr	r2, [pc, #168]	; (801d3b8 <floor+0x100>)
 801d310:	4b2a      	ldr	r3, [pc, #168]	; (801d3bc <floor+0x104>)
 801d312:	4660      	mov	r0, ip
 801d314:	0031      	movs	r1, r6
 801d316:	f7e3 fc1d 	bl	8000b54 <__aeabi_dadd>
 801d31a:	2200      	movs	r2, #0
 801d31c:	2300      	movs	r3, #0
 801d31e:	f7e3 f89b 	bl	8000458 <__aeabi_dcmpgt>
 801d322:	2800      	cmp	r0, #0
 801d324:	d0ea      	beq.n	801d2fc <floor+0x44>
 801d326:	2e00      	cmp	r6, #0
 801d328:	da03      	bge.n	801d332 <floor+0x7a>
 801d32a:	2380      	movs	r3, #128	; 0x80
 801d32c:	035b      	lsls	r3, r3, #13
 801d32e:	413b      	asrs	r3, r7
 801d330:	18f5      	adds	r5, r6, r3
 801d332:	9b00      	ldr	r3, [sp, #0]
 801d334:	2400      	movs	r4, #0
 801d336:	439d      	bics	r5, r3
 801d338:	e7e0      	b.n	801d2fc <floor+0x44>
 801d33a:	2f33      	cmp	r7, #51	; 0x33
 801d33c:	dd0f      	ble.n	801d35e <floor+0xa6>
 801d33e:	2380      	movs	r3, #128	; 0x80
 801d340:	00db      	lsls	r3, r3, #3
 801d342:	429f      	cmp	r7, r3
 801d344:	d107      	bne.n	801d356 <floor+0x9e>
 801d346:	0002      	movs	r2, r0
 801d348:	000b      	movs	r3, r1
 801d34a:	4660      	mov	r0, ip
 801d34c:	0031      	movs	r1, r6
 801d34e:	f7e3 fc01 	bl	8000b54 <__aeabi_dadd>
 801d352:	4684      	mov	ip, r0
 801d354:	000e      	movs	r6, r1
 801d356:	4660      	mov	r0, ip
 801d358:	0031      	movs	r1, r6
 801d35a:	b003      	add	sp, #12
 801d35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d35e:	4a1a      	ldr	r2, [pc, #104]	; (801d3c8 <floor+0x110>)
 801d360:	189b      	adds	r3, r3, r2
 801d362:	2201      	movs	r2, #1
 801d364:	4252      	negs	r2, r2
 801d366:	40da      	lsrs	r2, r3
 801d368:	9200      	str	r2, [sp, #0]
 801d36a:	4210      	tst	r0, r2
 801d36c:	d0f3      	beq.n	801d356 <floor+0x9e>
 801d36e:	4a12      	ldr	r2, [pc, #72]	; (801d3b8 <floor+0x100>)
 801d370:	4b12      	ldr	r3, [pc, #72]	; (801d3bc <floor+0x104>)
 801d372:	4660      	mov	r0, ip
 801d374:	0031      	movs	r1, r6
 801d376:	f7e3 fbed 	bl	8000b54 <__aeabi_dadd>
 801d37a:	2200      	movs	r2, #0
 801d37c:	2300      	movs	r3, #0
 801d37e:	f7e3 f86b 	bl	8000458 <__aeabi_dcmpgt>
 801d382:	2800      	cmp	r0, #0
 801d384:	d0ba      	beq.n	801d2fc <floor+0x44>
 801d386:	2e00      	cmp	r6, #0
 801d388:	da02      	bge.n	801d390 <floor+0xd8>
 801d38a:	2f14      	cmp	r7, #20
 801d38c:	d103      	bne.n	801d396 <floor+0xde>
 801d38e:	3501      	adds	r5, #1
 801d390:	9b00      	ldr	r3, [sp, #0]
 801d392:	439c      	bics	r4, r3
 801d394:	e7b2      	b.n	801d2fc <floor+0x44>
 801d396:	2334      	movs	r3, #52	; 0x34
 801d398:	1bdf      	subs	r7, r3, r7
 801d39a:	3b33      	subs	r3, #51	; 0x33
 801d39c:	40bb      	lsls	r3, r7
 801d39e:	18e4      	adds	r4, r4, r3
 801d3a0:	9b01      	ldr	r3, [sp, #4]
 801d3a2:	429c      	cmp	r4, r3
 801d3a4:	419b      	sbcs	r3, r3
 801d3a6:	425b      	negs	r3, r3
 801d3a8:	18f5      	adds	r5, r6, r3
 801d3aa:	e7f1      	b.n	801d390 <floor+0xd8>
 801d3ac:	2400      	movs	r4, #0
 801d3ae:	0025      	movs	r5, r4
 801d3b0:	e7a4      	b.n	801d2fc <floor+0x44>
 801d3b2:	46c0      	nop			; (mov r8, r8)
 801d3b4:	fffffc01 	.word	0xfffffc01
 801d3b8:	8800759c 	.word	0x8800759c
 801d3bc:	7e37e43c 	.word	0x7e37e43c
 801d3c0:	bff00000 	.word	0xbff00000
 801d3c4:	000fffff 	.word	0x000fffff
 801d3c8:	fffffbed 	.word	0xfffffbed

0801d3cc <_init>:
 801d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3ce:	46c0      	nop			; (mov r8, r8)
 801d3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3d2:	bc08      	pop	{r3}
 801d3d4:	469e      	mov	lr, r3
 801d3d6:	4770      	bx	lr

0801d3d8 <_fini>:
 801d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3da:	46c0      	nop			; (mov r8, r8)
 801d3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3de:	bc08      	pop	{r3}
 801d3e0:	469e      	mov	lr, r3
 801d3e2:	4770      	bx	lr
