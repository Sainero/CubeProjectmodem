
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de20  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001530  0801dee0  0801dee0  0002dee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f410  0801f410  0002f410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f418  0801f418  0002f418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f41c  0801f41c  0002f41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  20000000  0801f420  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001558  200001d8  0801f5f8  000301d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  20001730  0801f5f8  00031730  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005527d  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a5e7  00000000  00000000  0008547d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a68  00000000  00000000  0008fa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002690  00000000  00000000  000924d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00021e55  00000000  00000000  00094b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c62f  00000000  00000000  000b69b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b2550  00000000  00000000  000f2fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001a5534  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000098a4  00000000  00000000  001a5588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801dec8 	.word	0x0801dec8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0801dec8 	.word	0x0801dec8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 fd2d 	bl	8001e74 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 fc77 	bl	8001d18 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fd1f 	bl	8001e74 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd15 	bl	8001e74 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc99 	bl	8001d90 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc8f 	bl	8001d90 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_cfrcmple>:
 8000480:	4684      	mov	ip, r0
 8000482:	1c08      	adds	r0, r1, #0
 8000484:	4661      	mov	r1, ip
 8000486:	e7ff      	b.n	8000488 <__aeabi_cfcmpeq>

08000488 <__aeabi_cfcmpeq>:
 8000488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048a:	f000 fb3f 	bl	8000b0c <__lesf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	d401      	bmi.n	8000496 <__aeabi_cfcmpeq+0xe>
 8000492:	2100      	movs	r1, #0
 8000494:	42c8      	cmn	r0, r1
 8000496:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000498 <__aeabi_fcmpeq>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f000 fac3 	bl	8000a24 <__eqsf2>
 800049e:	4240      	negs	r0, r0
 80004a0:	3001      	adds	r0, #1
 80004a2:	bd10      	pop	{r4, pc}

080004a4 <__aeabi_fcmplt>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fb31 	bl	8000b0c <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	db01      	blt.n	80004b2 <__aeabi_fcmplt+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmple>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb27 	bl	8000b0c <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dd01      	ble.n	80004c6 <__aeabi_fcmple+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpgt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fad1 	bl	8000a74 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dc01      	bgt.n	80004da <__aeabi_fcmpgt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpge>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fac7 	bl	8000a74 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	da01      	bge.n	80004ee <__aeabi_fcmpge+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_ldivmod>:
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d115      	bne.n	8000524 <__aeabi_ldivmod+0x30>
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	d113      	bne.n	8000524 <__aeabi_ldivmod+0x30>
 80004fc:	2900      	cmp	r1, #0
 80004fe:	db06      	blt.n	800050e <__aeabi_ldivmod+0x1a>
 8000500:	dc01      	bgt.n	8000506 <__aeabi_ldivmod+0x12>
 8000502:	2800      	cmp	r0, #0
 8000504:	d006      	beq.n	8000514 <__aeabi_ldivmod+0x20>
 8000506:	2000      	movs	r0, #0
 8000508:	43c0      	mvns	r0, r0
 800050a:	0841      	lsrs	r1, r0, #1
 800050c:	e002      	b.n	8000514 <__aeabi_ldivmod+0x20>
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0609      	lsls	r1, r1, #24
 8000512:	2000      	movs	r0, #0
 8000514:	b407      	push	{r0, r1, r2}
 8000516:	4802      	ldr	r0, [pc, #8]	; (8000520 <__aeabi_ldivmod+0x2c>)
 8000518:	a101      	add	r1, pc, #4	; (adr r1, 8000520 <__aeabi_ldivmod+0x2c>)
 800051a:	1840      	adds	r0, r0, r1
 800051c:	9002      	str	r0, [sp, #8]
 800051e:	bd03      	pop	{r0, r1, pc}
 8000520:	fffffee1 	.word	0xfffffee1
 8000524:	b403      	push	{r0, r1}
 8000526:	4668      	mov	r0, sp
 8000528:	b501      	push	{r0, lr}
 800052a:	9802      	ldr	r0, [sp, #8]
 800052c:	f000 f950 	bl	80007d0 <__gnu_ldivmod_helper>
 8000530:	9b01      	ldr	r3, [sp, #4]
 8000532:	469e      	mov	lr, r3
 8000534:	b002      	add	sp, #8
 8000536:	bc0c      	pop	{r2, r3}
 8000538:	4770      	bx	lr
 800053a:	46c0      	nop			; (mov r8, r8)

0800053c <__aeabi_uldivmod>:
 800053c:	2b00      	cmp	r3, #0
 800053e:	d111      	bne.n	8000564 <__aeabi_uldivmod+0x28>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d10f      	bne.n	8000564 <__aeabi_uldivmod+0x28>
 8000544:	2900      	cmp	r1, #0
 8000546:	d100      	bne.n	800054a <__aeabi_uldivmod+0xe>
 8000548:	2800      	cmp	r0, #0
 800054a:	d002      	beq.n	8000552 <__aeabi_uldivmod+0x16>
 800054c:	2100      	movs	r1, #0
 800054e:	43c9      	mvns	r1, r1
 8000550:	1c08      	adds	r0, r1, #0
 8000552:	b407      	push	{r0, r1, r2}
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <__aeabi_uldivmod+0x24>)
 8000556:	a102      	add	r1, pc, #8	; (adr r1, 8000560 <__aeabi_uldivmod+0x24>)
 8000558:	1840      	adds	r0, r0, r1
 800055a:	9002      	str	r0, [sp, #8]
 800055c:	bd03      	pop	{r0, r1, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	fffffea1 	.word	0xfffffea1
 8000564:	b403      	push	{r0, r1}
 8000566:	4668      	mov	r0, sp
 8000568:	b501      	push	{r0, lr}
 800056a:	9802      	ldr	r0, [sp, #8]
 800056c:	f000 f864 	bl	8000638 <__udivmoddi4>
 8000570:	9b01      	ldr	r3, [sp, #4]
 8000572:	469e      	mov	lr, r3
 8000574:	b002      	add	sp, #8
 8000576:	bc0c      	pop	{r2, r3}
 8000578:	4770      	bx	lr
 800057a:	46c0      	nop			; (mov r8, r8)

0800057c <__aeabi_lmul>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	0415      	lsls	r5, r2, #16
 8000580:	0c2d      	lsrs	r5, r5, #16
 8000582:	000f      	movs	r7, r1
 8000584:	0001      	movs	r1, r0
 8000586:	002e      	movs	r6, r5
 8000588:	46c6      	mov	lr, r8
 800058a:	4684      	mov	ip, r0
 800058c:	0400      	lsls	r0, r0, #16
 800058e:	0c14      	lsrs	r4, r2, #16
 8000590:	0c00      	lsrs	r0, r0, #16
 8000592:	0c09      	lsrs	r1, r1, #16
 8000594:	4346      	muls	r6, r0
 8000596:	434d      	muls	r5, r1
 8000598:	4360      	muls	r0, r4
 800059a:	4361      	muls	r1, r4
 800059c:	1940      	adds	r0, r0, r5
 800059e:	0c34      	lsrs	r4, r6, #16
 80005a0:	1824      	adds	r4, r4, r0
 80005a2:	b500      	push	{lr}
 80005a4:	42a5      	cmp	r5, r4
 80005a6:	d903      	bls.n	80005b0 <__aeabi_lmul+0x34>
 80005a8:	2080      	movs	r0, #128	; 0x80
 80005aa:	0240      	lsls	r0, r0, #9
 80005ac:	4680      	mov	r8, r0
 80005ae:	4441      	add	r1, r8
 80005b0:	0c25      	lsrs	r5, r4, #16
 80005b2:	186d      	adds	r5, r5, r1
 80005b4:	4661      	mov	r1, ip
 80005b6:	4359      	muls	r1, r3
 80005b8:	437a      	muls	r2, r7
 80005ba:	0430      	lsls	r0, r6, #16
 80005bc:	1949      	adds	r1, r1, r5
 80005be:	0424      	lsls	r4, r4, #16
 80005c0:	0c00      	lsrs	r0, r0, #16
 80005c2:	1820      	adds	r0, r4, r0
 80005c4:	1889      	adds	r1, r1, r2
 80005c6:	bc80      	pop	{r7}
 80005c8:	46b8      	mov	r8, r7
 80005ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005cc <__aeabi_f2uiz>:
 80005cc:	219e      	movs	r1, #158	; 0x9e
 80005ce:	b510      	push	{r4, lr}
 80005d0:	05c9      	lsls	r1, r1, #23
 80005d2:	1c04      	adds	r4, r0, #0
 80005d4:	f7ff ff84 	bl	80004e0 <__aeabi_fcmpge>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d103      	bne.n	80005e4 <__aeabi_f2uiz+0x18>
 80005dc:	1c20      	adds	r0, r4, #0
 80005de:	f000 fca7 	bl	8000f30 <__aeabi_f2iz>
 80005e2:	bd10      	pop	{r4, pc}
 80005e4:	219e      	movs	r1, #158	; 0x9e
 80005e6:	1c20      	adds	r0, r4, #0
 80005e8:	05c9      	lsls	r1, r1, #23
 80005ea:	f000 fad9 	bl	8000ba0 <__aeabi_fsub>
 80005ee:	f000 fc9f 	bl	8000f30 <__aeabi_f2iz>
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	061b      	lsls	r3, r3, #24
 80005f6:	469c      	mov	ip, r3
 80005f8:	4460      	add	r0, ip
 80005fa:	e7f2      	b.n	80005e2 <__aeabi_f2uiz+0x16>

080005fc <__aeabi_d2uiz>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	2200      	movs	r2, #0
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__aeabi_d2uiz+0x38>)
 8000602:	0004      	movs	r4, r0
 8000604:	000d      	movs	r5, r1
 8000606:	f7ff ff31 	bl	800046c <__aeabi_dcmpge>
 800060a:	2800      	cmp	r0, #0
 800060c:	d104      	bne.n	8000618 <__aeabi_d2uiz+0x1c>
 800060e:	0020      	movs	r0, r4
 8000610:	0029      	movs	r1, r5
 8000612:	f002 fa9d 	bl	8002b50 <__aeabi_d2iz>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <__aeabi_d2uiz+0x38>)
 800061a:	2200      	movs	r2, #0
 800061c:	0020      	movs	r0, r4
 800061e:	0029      	movs	r1, r5
 8000620:	f001 ff04 	bl	800242c <__aeabi_dsub>
 8000624:	f002 fa94 	bl	8002b50 <__aeabi_d2iz>
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	061b      	lsls	r3, r3, #24
 800062c:	469c      	mov	ip, r3
 800062e:	4460      	add	r0, ip
 8000630:	e7f1      	b.n	8000616 <__aeabi_d2uiz+0x1a>
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	41e00000 	.word	0x41e00000

08000638 <__udivmoddi4>:
 8000638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063a:	4657      	mov	r7, sl
 800063c:	464e      	mov	r6, r9
 800063e:	4645      	mov	r5, r8
 8000640:	46de      	mov	lr, fp
 8000642:	b5e0      	push	{r5, r6, r7, lr}
 8000644:	0004      	movs	r4, r0
 8000646:	000d      	movs	r5, r1
 8000648:	4692      	mov	sl, r2
 800064a:	4699      	mov	r9, r3
 800064c:	b083      	sub	sp, #12
 800064e:	428b      	cmp	r3, r1
 8000650:	d830      	bhi.n	80006b4 <__udivmoddi4+0x7c>
 8000652:	d02d      	beq.n	80006b0 <__udivmoddi4+0x78>
 8000654:	4649      	mov	r1, r9
 8000656:	4650      	mov	r0, sl
 8000658:	f002 fb6c 	bl	8002d34 <__clzdi2>
 800065c:	0029      	movs	r1, r5
 800065e:	0006      	movs	r6, r0
 8000660:	0020      	movs	r0, r4
 8000662:	f002 fb67 	bl	8002d34 <__clzdi2>
 8000666:	1a33      	subs	r3, r6, r0
 8000668:	4698      	mov	r8, r3
 800066a:	3b20      	subs	r3, #32
 800066c:	469b      	mov	fp, r3
 800066e:	d433      	bmi.n	80006d8 <__udivmoddi4+0xa0>
 8000670:	465a      	mov	r2, fp
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	4642      	mov	r2, r8
 8000678:	001f      	movs	r7, r3
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	001e      	movs	r6, r3
 8000680:	42af      	cmp	r7, r5
 8000682:	d83a      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000684:	42af      	cmp	r7, r5
 8000686:	d100      	bne.n	800068a <__udivmoddi4+0x52>
 8000688:	e078      	b.n	800077c <__udivmoddi4+0x144>
 800068a:	465b      	mov	r3, fp
 800068c:	1ba4      	subs	r4, r4, r6
 800068e:	41bd      	sbcs	r5, r7
 8000690:	2b00      	cmp	r3, #0
 8000692:	da00      	bge.n	8000696 <__udivmoddi4+0x5e>
 8000694:	e075      	b.n	8000782 <__udivmoddi4+0x14a>
 8000696:	2200      	movs	r2, #0
 8000698:	2300      	movs	r3, #0
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2301      	movs	r3, #1
 80006a0:	465a      	mov	r2, fp
 80006a2:	4093      	lsls	r3, r2
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	4642      	mov	r2, r8
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	e028      	b.n	8000702 <__udivmoddi4+0xca>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	d9cf      	bls.n	8000654 <__udivmoddi4+0x1c>
 80006b4:	2200      	movs	r2, #0
 80006b6:	2300      	movs	r3, #0
 80006b8:	9200      	str	r2, [sp, #0]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <__udivmoddi4+0x8e>
 80006c2:	601c      	str	r4, [r3, #0]
 80006c4:	605d      	str	r5, [r3, #4]
 80006c6:	9800      	ldr	r0, [sp, #0]
 80006c8:	9901      	ldr	r1, [sp, #4]
 80006ca:	b003      	add	sp, #12
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
 80006ce:	46bb      	mov	fp, r7
 80006d0:	46b2      	mov	sl, r6
 80006d2:	46a9      	mov	r9, r5
 80006d4:	46a0      	mov	r8, r4
 80006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d8:	4642      	mov	r2, r8
 80006da:	2320      	movs	r3, #32
 80006dc:	1a9b      	subs	r3, r3, r2
 80006de:	4652      	mov	r2, sl
 80006e0:	40da      	lsrs	r2, r3
 80006e2:	4641      	mov	r1, r8
 80006e4:	0013      	movs	r3, r2
 80006e6:	464a      	mov	r2, r9
 80006e8:	408a      	lsls	r2, r1
 80006ea:	0017      	movs	r7, r2
 80006ec:	4642      	mov	r2, r8
 80006ee:	431f      	orrs	r7, r3
 80006f0:	4653      	mov	r3, sl
 80006f2:	4093      	lsls	r3, r2
 80006f4:	001e      	movs	r6, r3
 80006f6:	42af      	cmp	r7, r5
 80006f8:	d9c4      	bls.n	8000684 <__udivmoddi4+0x4c>
 80006fa:	2200      	movs	r2, #0
 80006fc:	2300      	movs	r3, #0
 80006fe:	9200      	str	r2, [sp, #0]
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	4643      	mov	r3, r8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d0d9      	beq.n	80006bc <__udivmoddi4+0x84>
 8000708:	07fb      	lsls	r3, r7, #31
 800070a:	0872      	lsrs	r2, r6, #1
 800070c:	431a      	orrs	r2, r3
 800070e:	4646      	mov	r6, r8
 8000710:	087b      	lsrs	r3, r7, #1
 8000712:	e00e      	b.n	8000732 <__udivmoddi4+0xfa>
 8000714:	42ab      	cmp	r3, r5
 8000716:	d101      	bne.n	800071c <__udivmoddi4+0xe4>
 8000718:	42a2      	cmp	r2, r4
 800071a:	d80c      	bhi.n	8000736 <__udivmoddi4+0xfe>
 800071c:	1aa4      	subs	r4, r4, r2
 800071e:	419d      	sbcs	r5, r3
 8000720:	2001      	movs	r0, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2100      	movs	r1, #0
 8000728:	3e01      	subs	r6, #1
 800072a:	1824      	adds	r4, r4, r0
 800072c:	414d      	adcs	r5, r1
 800072e:	2e00      	cmp	r6, #0
 8000730:	d006      	beq.n	8000740 <__udivmoddi4+0x108>
 8000732:	42ab      	cmp	r3, r5
 8000734:	d9ee      	bls.n	8000714 <__udivmoddi4+0xdc>
 8000736:	3e01      	subs	r6, #1
 8000738:	1924      	adds	r4, r4, r4
 800073a:	416d      	adcs	r5, r5
 800073c:	2e00      	cmp	r6, #0
 800073e:	d1f8      	bne.n	8000732 <__udivmoddi4+0xfa>
 8000740:	9800      	ldr	r0, [sp, #0]
 8000742:	9901      	ldr	r1, [sp, #4]
 8000744:	465b      	mov	r3, fp
 8000746:	1900      	adds	r0, r0, r4
 8000748:	4169      	adcs	r1, r5
 800074a:	2b00      	cmp	r3, #0
 800074c:	db24      	blt.n	8000798 <__udivmoddi4+0x160>
 800074e:	002b      	movs	r3, r5
 8000750:	465a      	mov	r2, fp
 8000752:	4644      	mov	r4, r8
 8000754:	40d3      	lsrs	r3, r2
 8000756:	002a      	movs	r2, r5
 8000758:	40e2      	lsrs	r2, r4
 800075a:	001c      	movs	r4, r3
 800075c:	465b      	mov	r3, fp
 800075e:	0015      	movs	r5, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	db2a      	blt.n	80007ba <__udivmoddi4+0x182>
 8000764:	0026      	movs	r6, r4
 8000766:	409e      	lsls	r6, r3
 8000768:	0033      	movs	r3, r6
 800076a:	0026      	movs	r6, r4
 800076c:	4647      	mov	r7, r8
 800076e:	40be      	lsls	r6, r7
 8000770:	0032      	movs	r2, r6
 8000772:	1a80      	subs	r0, r0, r2
 8000774:	4199      	sbcs	r1, r3
 8000776:	9000      	str	r0, [sp, #0]
 8000778:	9101      	str	r1, [sp, #4]
 800077a:	e79f      	b.n	80006bc <__udivmoddi4+0x84>
 800077c:	42a3      	cmp	r3, r4
 800077e:	d8bc      	bhi.n	80006fa <__udivmoddi4+0xc2>
 8000780:	e783      	b.n	800068a <__udivmoddi4+0x52>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	2100      	movs	r1, #0
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	2200      	movs	r2, #0
 800078c:	9100      	str	r1, [sp, #0]
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	2201      	movs	r2, #1
 8000792:	40da      	lsrs	r2, r3
 8000794:	9201      	str	r2, [sp, #4]
 8000796:	e786      	b.n	80006a6 <__udivmoddi4+0x6e>
 8000798:	4642      	mov	r2, r8
 800079a:	2320      	movs	r3, #32
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	002a      	movs	r2, r5
 80007a0:	4646      	mov	r6, r8
 80007a2:	409a      	lsls	r2, r3
 80007a4:	0023      	movs	r3, r4
 80007a6:	40f3      	lsrs	r3, r6
 80007a8:	4644      	mov	r4, r8
 80007aa:	4313      	orrs	r3, r2
 80007ac:	002a      	movs	r2, r5
 80007ae:	40e2      	lsrs	r2, r4
 80007b0:	001c      	movs	r4, r3
 80007b2:	465b      	mov	r3, fp
 80007b4:	0015      	movs	r5, r2
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dad4      	bge.n	8000764 <__udivmoddi4+0x12c>
 80007ba:	4642      	mov	r2, r8
 80007bc:	002f      	movs	r7, r5
 80007be:	2320      	movs	r3, #32
 80007c0:	0026      	movs	r6, r4
 80007c2:	4097      	lsls	r7, r2
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	40de      	lsrs	r6, r3
 80007c8:	003b      	movs	r3, r7
 80007ca:	4333      	orrs	r3, r6
 80007cc:	e7cd      	b.n	800076a <__udivmoddi4+0x132>
 80007ce:	46c0      	nop			; (mov r8, r8)

080007d0 <__gnu_ldivmod_helper>:
 80007d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d2:	46ce      	mov	lr, r9
 80007d4:	4647      	mov	r7, r8
 80007d6:	b580      	push	{r7, lr}
 80007d8:	4691      	mov	r9, r2
 80007da:	4698      	mov	r8, r3
 80007dc:	0004      	movs	r4, r0
 80007de:	000d      	movs	r5, r1
 80007e0:	f002 fab4 	bl	8002d4c <__divdi3>
 80007e4:	0007      	movs	r7, r0
 80007e6:	000e      	movs	r6, r1
 80007e8:	0002      	movs	r2, r0
 80007ea:	000b      	movs	r3, r1
 80007ec:	4648      	mov	r0, r9
 80007ee:	4641      	mov	r1, r8
 80007f0:	f7ff fec4 	bl	800057c <__aeabi_lmul>
 80007f4:	1a24      	subs	r4, r4, r0
 80007f6:	418d      	sbcs	r5, r1
 80007f8:	9b08      	ldr	r3, [sp, #32]
 80007fa:	0038      	movs	r0, r7
 80007fc:	0031      	movs	r1, r6
 80007fe:	601c      	str	r4, [r3, #0]
 8000800:	605d      	str	r5, [r3, #4]
 8000802:	bcc0      	pop	{r6, r7}
 8000804:	46b9      	mov	r9, r7
 8000806:	46b0      	mov	r8, r6
 8000808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)

0800080c <__aeabi_fdiv>:
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080e:	464f      	mov	r7, r9
 8000810:	4646      	mov	r6, r8
 8000812:	46d6      	mov	lr, sl
 8000814:	0245      	lsls	r5, r0, #9
 8000816:	b5c0      	push	{r6, r7, lr}
 8000818:	0047      	lsls	r7, r0, #1
 800081a:	1c0c      	adds	r4, r1, #0
 800081c:	0a6d      	lsrs	r5, r5, #9
 800081e:	0e3f      	lsrs	r7, r7, #24
 8000820:	0fc6      	lsrs	r6, r0, #31
 8000822:	2f00      	cmp	r7, #0
 8000824:	d066      	beq.n	80008f4 <__aeabi_fdiv+0xe8>
 8000826:	2fff      	cmp	r7, #255	; 0xff
 8000828:	d06c      	beq.n	8000904 <__aeabi_fdiv+0xf8>
 800082a:	2300      	movs	r3, #0
 800082c:	00ea      	lsls	r2, r5, #3
 800082e:	2580      	movs	r5, #128	; 0x80
 8000830:	4699      	mov	r9, r3
 8000832:	469a      	mov	sl, r3
 8000834:	04ed      	lsls	r5, r5, #19
 8000836:	4315      	orrs	r5, r2
 8000838:	3f7f      	subs	r7, #127	; 0x7f
 800083a:	0260      	lsls	r0, r4, #9
 800083c:	0061      	lsls	r1, r4, #1
 800083e:	0a43      	lsrs	r3, r0, #9
 8000840:	4698      	mov	r8, r3
 8000842:	0e09      	lsrs	r1, r1, #24
 8000844:	0fe4      	lsrs	r4, r4, #31
 8000846:	2900      	cmp	r1, #0
 8000848:	d048      	beq.n	80008dc <__aeabi_fdiv+0xd0>
 800084a:	29ff      	cmp	r1, #255	; 0xff
 800084c:	d010      	beq.n	8000870 <__aeabi_fdiv+0x64>
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	00d8      	lsls	r0, r3, #3
 8000852:	04d2      	lsls	r2, r2, #19
 8000854:	4302      	orrs	r2, r0
 8000856:	4690      	mov	r8, r2
 8000858:	2000      	movs	r0, #0
 800085a:	397f      	subs	r1, #127	; 0x7f
 800085c:	464a      	mov	r2, r9
 800085e:	0033      	movs	r3, r6
 8000860:	1a7f      	subs	r7, r7, r1
 8000862:	4302      	orrs	r2, r0
 8000864:	496c      	ldr	r1, [pc, #432]	; (8000a18 <__aeabi_fdiv+0x20c>)
 8000866:	0092      	lsls	r2, r2, #2
 8000868:	588a      	ldr	r2, [r1, r2]
 800086a:	4063      	eors	r3, r4
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4697      	mov	pc, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d16d      	bne.n	8000950 <__aeabi_fdiv+0x144>
 8000874:	2002      	movs	r0, #2
 8000876:	3fff      	subs	r7, #255	; 0xff
 8000878:	e033      	b.n	80008e2 <__aeabi_fdiv+0xd6>
 800087a:	2300      	movs	r3, #0
 800087c:	4698      	mov	r8, r3
 800087e:	0026      	movs	r6, r4
 8000880:	4645      	mov	r5, r8
 8000882:	4682      	mov	sl, r0
 8000884:	4653      	mov	r3, sl
 8000886:	2b02      	cmp	r3, #2
 8000888:	d100      	bne.n	800088c <__aeabi_fdiv+0x80>
 800088a:	e07f      	b.n	800098c <__aeabi_fdiv+0x180>
 800088c:	2b03      	cmp	r3, #3
 800088e:	d100      	bne.n	8000892 <__aeabi_fdiv+0x86>
 8000890:	e094      	b.n	80009bc <__aeabi_fdiv+0x1b0>
 8000892:	2b01      	cmp	r3, #1
 8000894:	d017      	beq.n	80008c6 <__aeabi_fdiv+0xba>
 8000896:	0038      	movs	r0, r7
 8000898:	307f      	adds	r0, #127	; 0x7f
 800089a:	2800      	cmp	r0, #0
 800089c:	dd5f      	ble.n	800095e <__aeabi_fdiv+0x152>
 800089e:	076b      	lsls	r3, r5, #29
 80008a0:	d004      	beq.n	80008ac <__aeabi_fdiv+0xa0>
 80008a2:	230f      	movs	r3, #15
 80008a4:	402b      	ands	r3, r5
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d000      	beq.n	80008ac <__aeabi_fdiv+0xa0>
 80008aa:	3504      	adds	r5, #4
 80008ac:	012b      	lsls	r3, r5, #4
 80008ae:	d503      	bpl.n	80008b8 <__aeabi_fdiv+0xac>
 80008b0:	0038      	movs	r0, r7
 80008b2:	4b5a      	ldr	r3, [pc, #360]	; (8000a1c <__aeabi_fdiv+0x210>)
 80008b4:	3080      	adds	r0, #128	; 0x80
 80008b6:	401d      	ands	r5, r3
 80008b8:	28fe      	cmp	r0, #254	; 0xfe
 80008ba:	dc67      	bgt.n	800098c <__aeabi_fdiv+0x180>
 80008bc:	01ad      	lsls	r5, r5, #6
 80008be:	0a6d      	lsrs	r5, r5, #9
 80008c0:	b2c0      	uxtb	r0, r0
 80008c2:	e002      	b.n	80008ca <__aeabi_fdiv+0xbe>
 80008c4:	001e      	movs	r6, r3
 80008c6:	2000      	movs	r0, #0
 80008c8:	2500      	movs	r5, #0
 80008ca:	05c0      	lsls	r0, r0, #23
 80008cc:	4328      	orrs	r0, r5
 80008ce:	07f6      	lsls	r6, r6, #31
 80008d0:	4330      	orrs	r0, r6
 80008d2:	bce0      	pop	{r5, r6, r7}
 80008d4:	46ba      	mov	sl, r7
 80008d6:	46b1      	mov	r9, r6
 80008d8:	46a8      	mov	r8, r5
 80008da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d12b      	bne.n	8000938 <__aeabi_fdiv+0x12c>
 80008e0:	2001      	movs	r0, #1
 80008e2:	464a      	mov	r2, r9
 80008e4:	0033      	movs	r3, r6
 80008e6:	494e      	ldr	r1, [pc, #312]	; (8000a20 <__aeabi_fdiv+0x214>)
 80008e8:	4302      	orrs	r2, r0
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	588a      	ldr	r2, [r1, r2]
 80008ee:	4063      	eors	r3, r4
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4697      	mov	pc, r2
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d113      	bne.n	8000920 <__aeabi_fdiv+0x114>
 80008f8:	2304      	movs	r3, #4
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b03      	subs	r3, #3
 80008fe:	2700      	movs	r7, #0
 8000900:	469a      	mov	sl, r3
 8000902:	e79a      	b.n	800083a <__aeabi_fdiv+0x2e>
 8000904:	2d00      	cmp	r5, #0
 8000906:	d105      	bne.n	8000914 <__aeabi_fdiv+0x108>
 8000908:	2308      	movs	r3, #8
 800090a:	4699      	mov	r9, r3
 800090c:	3b06      	subs	r3, #6
 800090e:	27ff      	movs	r7, #255	; 0xff
 8000910:	469a      	mov	sl, r3
 8000912:	e792      	b.n	800083a <__aeabi_fdiv+0x2e>
 8000914:	230c      	movs	r3, #12
 8000916:	4699      	mov	r9, r3
 8000918:	3b09      	subs	r3, #9
 800091a:	27ff      	movs	r7, #255	; 0xff
 800091c:	469a      	mov	sl, r3
 800091e:	e78c      	b.n	800083a <__aeabi_fdiv+0x2e>
 8000920:	0028      	movs	r0, r5
 8000922:	f002 f9e9 	bl	8002cf8 <__clzsi2>
 8000926:	2776      	movs	r7, #118	; 0x76
 8000928:	1f43      	subs	r3, r0, #5
 800092a:	409d      	lsls	r5, r3
 800092c:	2300      	movs	r3, #0
 800092e:	427f      	negs	r7, r7
 8000930:	4699      	mov	r9, r3
 8000932:	469a      	mov	sl, r3
 8000934:	1a3f      	subs	r7, r7, r0
 8000936:	e780      	b.n	800083a <__aeabi_fdiv+0x2e>
 8000938:	0018      	movs	r0, r3
 800093a:	f002 f9dd 	bl	8002cf8 <__clzsi2>
 800093e:	4642      	mov	r2, r8
 8000940:	1f43      	subs	r3, r0, #5
 8000942:	2176      	movs	r1, #118	; 0x76
 8000944:	409a      	lsls	r2, r3
 8000946:	4249      	negs	r1, r1
 8000948:	1a09      	subs	r1, r1, r0
 800094a:	4690      	mov	r8, r2
 800094c:	2000      	movs	r0, #0
 800094e:	e785      	b.n	800085c <__aeabi_fdiv+0x50>
 8000950:	21ff      	movs	r1, #255	; 0xff
 8000952:	2003      	movs	r0, #3
 8000954:	e782      	b.n	800085c <__aeabi_fdiv+0x50>
 8000956:	001e      	movs	r6, r3
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2500      	movs	r5, #0
 800095c:	e7b5      	b.n	80008ca <__aeabi_fdiv+0xbe>
 800095e:	2301      	movs	r3, #1
 8000960:	1a1b      	subs	r3, r3, r0
 8000962:	2b1b      	cmp	r3, #27
 8000964:	dcaf      	bgt.n	80008c6 <__aeabi_fdiv+0xba>
 8000966:	379e      	adds	r7, #158	; 0x9e
 8000968:	0029      	movs	r1, r5
 800096a:	40bd      	lsls	r5, r7
 800096c:	40d9      	lsrs	r1, r3
 800096e:	1e6a      	subs	r2, r5, #1
 8000970:	4195      	sbcs	r5, r2
 8000972:	430d      	orrs	r5, r1
 8000974:	076b      	lsls	r3, r5, #29
 8000976:	d004      	beq.n	8000982 <__aeabi_fdiv+0x176>
 8000978:	230f      	movs	r3, #15
 800097a:	402b      	ands	r3, r5
 800097c:	2b04      	cmp	r3, #4
 800097e:	d000      	beq.n	8000982 <__aeabi_fdiv+0x176>
 8000980:	3504      	adds	r5, #4
 8000982:	016b      	lsls	r3, r5, #5
 8000984:	d544      	bpl.n	8000a10 <__aeabi_fdiv+0x204>
 8000986:	2001      	movs	r0, #1
 8000988:	2500      	movs	r5, #0
 800098a:	e79e      	b.n	80008ca <__aeabi_fdiv+0xbe>
 800098c:	20ff      	movs	r0, #255	; 0xff
 800098e:	2500      	movs	r5, #0
 8000990:	e79b      	b.n	80008ca <__aeabi_fdiv+0xbe>
 8000992:	2580      	movs	r5, #128	; 0x80
 8000994:	2600      	movs	r6, #0
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	03ed      	lsls	r5, r5, #15
 800099a:	e796      	b.n	80008ca <__aeabi_fdiv+0xbe>
 800099c:	2300      	movs	r3, #0
 800099e:	4698      	mov	r8, r3
 80009a0:	2080      	movs	r0, #128	; 0x80
 80009a2:	03c0      	lsls	r0, r0, #15
 80009a4:	4205      	tst	r5, r0
 80009a6:	d009      	beq.n	80009bc <__aeabi_fdiv+0x1b0>
 80009a8:	4643      	mov	r3, r8
 80009aa:	4203      	tst	r3, r0
 80009ac:	d106      	bne.n	80009bc <__aeabi_fdiv+0x1b0>
 80009ae:	4645      	mov	r5, r8
 80009b0:	4305      	orrs	r5, r0
 80009b2:	026d      	lsls	r5, r5, #9
 80009b4:	0026      	movs	r6, r4
 80009b6:	20ff      	movs	r0, #255	; 0xff
 80009b8:	0a6d      	lsrs	r5, r5, #9
 80009ba:	e786      	b.n	80008ca <__aeabi_fdiv+0xbe>
 80009bc:	2080      	movs	r0, #128	; 0x80
 80009be:	03c0      	lsls	r0, r0, #15
 80009c0:	4305      	orrs	r5, r0
 80009c2:	026d      	lsls	r5, r5, #9
 80009c4:	20ff      	movs	r0, #255	; 0xff
 80009c6:	0a6d      	lsrs	r5, r5, #9
 80009c8:	e77f      	b.n	80008ca <__aeabi_fdiv+0xbe>
 80009ca:	4641      	mov	r1, r8
 80009cc:	016a      	lsls	r2, r5, #5
 80009ce:	0148      	lsls	r0, r1, #5
 80009d0:	4282      	cmp	r2, r0
 80009d2:	d219      	bcs.n	8000a08 <__aeabi_fdiv+0x1fc>
 80009d4:	211b      	movs	r1, #27
 80009d6:	2500      	movs	r5, #0
 80009d8:	3f01      	subs	r7, #1
 80009da:	2601      	movs	r6, #1
 80009dc:	0014      	movs	r4, r2
 80009de:	006d      	lsls	r5, r5, #1
 80009e0:	0052      	lsls	r2, r2, #1
 80009e2:	2c00      	cmp	r4, #0
 80009e4:	db01      	blt.n	80009ea <__aeabi_fdiv+0x1de>
 80009e6:	4290      	cmp	r0, r2
 80009e8:	d801      	bhi.n	80009ee <__aeabi_fdiv+0x1e2>
 80009ea:	1a12      	subs	r2, r2, r0
 80009ec:	4335      	orrs	r5, r6
 80009ee:	3901      	subs	r1, #1
 80009f0:	2900      	cmp	r1, #0
 80009f2:	d1f3      	bne.n	80009dc <__aeabi_fdiv+0x1d0>
 80009f4:	1e50      	subs	r0, r2, #1
 80009f6:	4182      	sbcs	r2, r0
 80009f8:	0038      	movs	r0, r7
 80009fa:	307f      	adds	r0, #127	; 0x7f
 80009fc:	001e      	movs	r6, r3
 80009fe:	4315      	orrs	r5, r2
 8000a00:	2800      	cmp	r0, #0
 8000a02:	dd00      	ble.n	8000a06 <__aeabi_fdiv+0x1fa>
 8000a04:	e74b      	b.n	800089e <__aeabi_fdiv+0x92>
 8000a06:	e7aa      	b.n	800095e <__aeabi_fdiv+0x152>
 8000a08:	211a      	movs	r1, #26
 8000a0a:	2501      	movs	r5, #1
 8000a0c:	1a12      	subs	r2, r2, r0
 8000a0e:	e7e4      	b.n	80009da <__aeabi_fdiv+0x1ce>
 8000a10:	01ad      	lsls	r5, r5, #6
 8000a12:	2000      	movs	r0, #0
 8000a14:	0a6d      	lsrs	r5, r5, #9
 8000a16:	e758      	b.n	80008ca <__aeabi_fdiv+0xbe>
 8000a18:	0801f310 	.word	0x0801f310
 8000a1c:	f7ffffff 	.word	0xf7ffffff
 8000a20:	0801f350 	.word	0x0801f350

08000a24 <__eqsf2>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	0042      	lsls	r2, r0, #1
 8000a28:	024e      	lsls	r6, r1, #9
 8000a2a:	004c      	lsls	r4, r1, #1
 8000a2c:	0245      	lsls	r5, r0, #9
 8000a2e:	0a6d      	lsrs	r5, r5, #9
 8000a30:	0e12      	lsrs	r2, r2, #24
 8000a32:	0fc3      	lsrs	r3, r0, #31
 8000a34:	0a76      	lsrs	r6, r6, #9
 8000a36:	0e24      	lsrs	r4, r4, #24
 8000a38:	0fc9      	lsrs	r1, r1, #31
 8000a3a:	2aff      	cmp	r2, #255	; 0xff
 8000a3c:	d00f      	beq.n	8000a5e <__eqsf2+0x3a>
 8000a3e:	2cff      	cmp	r4, #255	; 0xff
 8000a40:	d011      	beq.n	8000a66 <__eqsf2+0x42>
 8000a42:	2001      	movs	r0, #1
 8000a44:	42a2      	cmp	r2, r4
 8000a46:	d000      	beq.n	8000a4a <__eqsf2+0x26>
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
 8000a4a:	42b5      	cmp	r5, r6
 8000a4c:	d1fc      	bne.n	8000a48 <__eqsf2+0x24>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d00d      	beq.n	8000a6e <__eqsf2+0x4a>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d1f8      	bne.n	8000a48 <__eqsf2+0x24>
 8000a56:	0028      	movs	r0, r5
 8000a58:	1e45      	subs	r5, r0, #1
 8000a5a:	41a8      	sbcs	r0, r5
 8000a5c:	e7f4      	b.n	8000a48 <__eqsf2+0x24>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d1f1      	bne.n	8000a48 <__eqsf2+0x24>
 8000a64:	e7eb      	b.n	8000a3e <__eqsf2+0x1a>
 8000a66:	2001      	movs	r0, #1
 8000a68:	2e00      	cmp	r6, #0
 8000a6a:	d1ed      	bne.n	8000a48 <__eqsf2+0x24>
 8000a6c:	e7e9      	b.n	8000a42 <__eqsf2+0x1e>
 8000a6e:	2000      	movs	r0, #0
 8000a70:	e7ea      	b.n	8000a48 <__eqsf2+0x24>
 8000a72:	46c0      	nop			; (mov r8, r8)

08000a74 <__gesf2>:
 8000a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a76:	0042      	lsls	r2, r0, #1
 8000a78:	0246      	lsls	r6, r0, #9
 8000a7a:	024d      	lsls	r5, r1, #9
 8000a7c:	004c      	lsls	r4, r1, #1
 8000a7e:	0fc3      	lsrs	r3, r0, #31
 8000a80:	0a76      	lsrs	r6, r6, #9
 8000a82:	0e12      	lsrs	r2, r2, #24
 8000a84:	0a6d      	lsrs	r5, r5, #9
 8000a86:	0e24      	lsrs	r4, r4, #24
 8000a88:	0fc8      	lsrs	r0, r1, #31
 8000a8a:	2aff      	cmp	r2, #255	; 0xff
 8000a8c:	d01f      	beq.n	8000ace <__gesf2+0x5a>
 8000a8e:	2cff      	cmp	r4, #255	; 0xff
 8000a90:	d010      	beq.n	8000ab4 <__gesf2+0x40>
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d11f      	bne.n	8000ad6 <__gesf2+0x62>
 8000a96:	4271      	negs	r1, r6
 8000a98:	4171      	adcs	r1, r6
 8000a9a:	2c00      	cmp	r4, #0
 8000a9c:	d101      	bne.n	8000aa2 <__gesf2+0x2e>
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d01e      	beq.n	8000ae0 <__gesf2+0x6c>
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d10e      	bne.n	8000ac4 <__gesf2+0x50>
 8000aa6:	4283      	cmp	r3, r0
 8000aa8:	d01e      	beq.n	8000ae8 <__gesf2+0x74>
 8000aaa:	2102      	movs	r1, #2
 8000aac:	1e58      	subs	r0, r3, #1
 8000aae:	4008      	ands	r0, r1
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d126      	bne.n	8000b06 <__gesf2+0x92>
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d1f4      	bne.n	8000aa6 <__gesf2+0x32>
 8000abc:	4271      	negs	r1, r6
 8000abe:	4171      	adcs	r1, r6
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	d0f0      	beq.n	8000aa6 <__gesf2+0x32>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d1f4      	bne.n	8000ab2 <__gesf2+0x3e>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4240      	negs	r0, r0
 8000acc:	e7f1      	b.n	8000ab2 <__gesf2+0x3e>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d119      	bne.n	8000b06 <__gesf2+0x92>
 8000ad2:	2cff      	cmp	r4, #255	; 0xff
 8000ad4:	d0ee      	beq.n	8000ab4 <__gesf2+0x40>
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d1e5      	bne.n	8000aa6 <__gesf2+0x32>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d1e3      	bne.n	8000aa6 <__gesf2+0x32>
 8000ade:	e7e4      	b.n	8000aaa <__gesf2+0x36>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d0e5      	beq.n	8000ab2 <__gesf2+0x3e>
 8000ae6:	e7e0      	b.n	8000aaa <__gesf2+0x36>
 8000ae8:	42a2      	cmp	r2, r4
 8000aea:	dc05      	bgt.n	8000af8 <__gesf2+0x84>
 8000aec:	dbea      	blt.n	8000ac4 <__gesf2+0x50>
 8000aee:	42ae      	cmp	r6, r5
 8000af0:	d802      	bhi.n	8000af8 <__gesf2+0x84>
 8000af2:	d3e7      	bcc.n	8000ac4 <__gesf2+0x50>
 8000af4:	2000      	movs	r0, #0
 8000af6:	e7dc      	b.n	8000ab2 <__gesf2+0x3e>
 8000af8:	4241      	negs	r1, r0
 8000afa:	4141      	adcs	r1, r0
 8000afc:	4248      	negs	r0, r1
 8000afe:	2102      	movs	r1, #2
 8000b00:	4008      	ands	r0, r1
 8000b02:	3801      	subs	r0, #1
 8000b04:	e7d5      	b.n	8000ab2 <__gesf2+0x3e>
 8000b06:	2002      	movs	r0, #2
 8000b08:	4240      	negs	r0, r0
 8000b0a:	e7d2      	b.n	8000ab2 <__gesf2+0x3e>

08000b0c <__lesf2>:
 8000b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0e:	0042      	lsls	r2, r0, #1
 8000b10:	0246      	lsls	r6, r0, #9
 8000b12:	024d      	lsls	r5, r1, #9
 8000b14:	004c      	lsls	r4, r1, #1
 8000b16:	0fc3      	lsrs	r3, r0, #31
 8000b18:	0a76      	lsrs	r6, r6, #9
 8000b1a:	0e12      	lsrs	r2, r2, #24
 8000b1c:	0a6d      	lsrs	r5, r5, #9
 8000b1e:	0e24      	lsrs	r4, r4, #24
 8000b20:	0fc8      	lsrs	r0, r1, #31
 8000b22:	2aff      	cmp	r2, #255	; 0xff
 8000b24:	d00d      	beq.n	8000b42 <__lesf2+0x36>
 8000b26:	2cff      	cmp	r4, #255	; 0xff
 8000b28:	d00f      	beq.n	8000b4a <__lesf2+0x3e>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d123      	bne.n	8000b76 <__lesf2+0x6a>
 8000b2e:	4271      	negs	r1, r6
 8000b30:	4171      	adcs	r1, r6
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d10f      	bne.n	8000b56 <__lesf2+0x4a>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d10d      	bne.n	8000b56 <__lesf2+0x4a>
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2e00      	cmp	r6, #0
 8000b3e:	d014      	beq.n	8000b6a <__lesf2+0x5e>
 8000b40:	e00d      	b.n	8000b5e <__lesf2+0x52>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d110      	bne.n	8000b68 <__lesf2+0x5c>
 8000b46:	2cff      	cmp	r4, #255	; 0xff
 8000b48:	d115      	bne.n	8000b76 <__lesf2+0x6a>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d10c      	bne.n	8000b68 <__lesf2+0x5c>
 8000b4e:	2a00      	cmp	r2, #0
 8000b50:	d103      	bne.n	8000b5a <__lesf2+0x4e>
 8000b52:	4271      	negs	r1, r6
 8000b54:	4171      	adcs	r1, r6
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d108      	bne.n	8000b6c <__lesf2+0x60>
 8000b5a:	4283      	cmp	r3, r0
 8000b5c:	d010      	beq.n	8000b80 <__lesf2+0x74>
 8000b5e:	2102      	movs	r1, #2
 8000b60:	1e58      	subs	r0, r3, #1
 8000b62:	4008      	ands	r0, r1
 8000b64:	3801      	subs	r0, #1
 8000b66:	e000      	b.n	8000b6a <__lesf2+0x5e>
 8000b68:	2002      	movs	r0, #2
 8000b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d1fc      	bne.n	8000b6a <__lesf2+0x5e>
 8000b70:	2001      	movs	r0, #1
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7f9      	b.n	8000b6a <__lesf2+0x5e>
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d1ef      	bne.n	8000b5a <__lesf2+0x4e>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d1ed      	bne.n	8000b5a <__lesf2+0x4e>
 8000b7e:	e7ee      	b.n	8000b5e <__lesf2+0x52>
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	dc05      	bgt.n	8000b90 <__lesf2+0x84>
 8000b84:	dbf2      	blt.n	8000b6c <__lesf2+0x60>
 8000b86:	42ae      	cmp	r6, r5
 8000b88:	d802      	bhi.n	8000b90 <__lesf2+0x84>
 8000b8a:	d3ef      	bcc.n	8000b6c <__lesf2+0x60>
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	e7ec      	b.n	8000b6a <__lesf2+0x5e>
 8000b90:	4241      	negs	r1, r0
 8000b92:	4141      	adcs	r1, r0
 8000b94:	4248      	negs	r0, r1
 8000b96:	2102      	movs	r1, #2
 8000b98:	4008      	ands	r0, r1
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	e7e5      	b.n	8000b6a <__lesf2+0x5e>
 8000b9e:	46c0      	nop			; (mov r8, r8)

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba2:	4646      	mov	r6, r8
 8000ba4:	46d6      	mov	lr, sl
 8000ba6:	464f      	mov	r7, r9
 8000ba8:	0243      	lsls	r3, r0, #9
 8000baa:	0a5b      	lsrs	r3, r3, #9
 8000bac:	00da      	lsls	r2, r3, #3
 8000bae:	4694      	mov	ip, r2
 8000bb0:	024a      	lsls	r2, r1, #9
 8000bb2:	b5c0      	push	{r6, r7, lr}
 8000bb4:	0044      	lsls	r4, r0, #1
 8000bb6:	0a56      	lsrs	r6, r2, #9
 8000bb8:	1c05      	adds	r5, r0, #0
 8000bba:	46b0      	mov	r8, r6
 8000bbc:	0e24      	lsrs	r4, r4, #24
 8000bbe:	004e      	lsls	r6, r1, #1
 8000bc0:	0992      	lsrs	r2, r2, #6
 8000bc2:	001f      	movs	r7, r3
 8000bc4:	0020      	movs	r0, r4
 8000bc6:	4692      	mov	sl, r2
 8000bc8:	0fed      	lsrs	r5, r5, #31
 8000bca:	0e36      	lsrs	r6, r6, #24
 8000bcc:	0fc9      	lsrs	r1, r1, #31
 8000bce:	2eff      	cmp	r6, #255	; 0xff
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_fsub+0x34>
 8000bd2:	e07f      	b.n	8000cd4 <__aeabi_fsub+0x134>
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4051      	eors	r1, r2
 8000bd8:	428d      	cmp	r5, r1
 8000bda:	d051      	beq.n	8000c80 <__aeabi_fsub+0xe0>
 8000bdc:	1ba2      	subs	r2, r4, r6
 8000bde:	4691      	mov	r9, r2
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	dc00      	bgt.n	8000be6 <__aeabi_fsub+0x46>
 8000be4:	e07e      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e099      	b.n	8000d20 <__aeabi_fsub+0x180>
 8000bec:	2cff      	cmp	r4, #255	; 0xff
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_fsub+0x52>
 8000bf0:	e08c      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	4652      	mov	r2, sl
 8000bf6:	04db      	lsls	r3, r3, #19
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	4692      	mov	sl, r2
 8000bfc:	464a      	mov	r2, r9
 8000bfe:	2301      	movs	r3, #1
 8000c00:	2a1b      	cmp	r2, #27
 8000c02:	dc08      	bgt.n	8000c16 <__aeabi_fsub+0x76>
 8000c04:	4653      	mov	r3, sl
 8000c06:	2120      	movs	r1, #32
 8000c08:	40d3      	lsrs	r3, r2
 8000c0a:	1a89      	subs	r1, r1, r2
 8000c0c:	4652      	mov	r2, sl
 8000c0e:	408a      	lsls	r2, r1
 8000c10:	1e51      	subs	r1, r2, #1
 8000c12:	418a      	sbcs	r2, r1
 8000c14:	4313      	orrs	r3, r2
 8000c16:	4662      	mov	r2, ip
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	015a      	lsls	r2, r3, #5
 8000c1c:	d400      	bmi.n	8000c20 <__aeabi_fsub+0x80>
 8000c1e:	e0f3      	b.n	8000e08 <__aeabi_fsub+0x268>
 8000c20:	019b      	lsls	r3, r3, #6
 8000c22:	099e      	lsrs	r6, r3, #6
 8000c24:	0030      	movs	r0, r6
 8000c26:	f002 f867 	bl	8002cf8 <__clzsi2>
 8000c2a:	3805      	subs	r0, #5
 8000c2c:	4086      	lsls	r6, r0
 8000c2e:	4284      	cmp	r4, r0
 8000c30:	dd00      	ble.n	8000c34 <__aeabi_fsub+0x94>
 8000c32:	e0f7      	b.n	8000e24 <__aeabi_fsub+0x284>
 8000c34:	0032      	movs	r2, r6
 8000c36:	1b04      	subs	r4, r0, r4
 8000c38:	2020      	movs	r0, #32
 8000c3a:	3401      	adds	r4, #1
 8000c3c:	40e2      	lsrs	r2, r4
 8000c3e:	1b04      	subs	r4, r0, r4
 8000c40:	40a6      	lsls	r6, r4
 8000c42:	0033      	movs	r3, r6
 8000c44:	1e5e      	subs	r6, r3, #1
 8000c46:	41b3      	sbcs	r3, r6
 8000c48:	2400      	movs	r4, #0
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	075a      	lsls	r2, r3, #29
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_fsub+0xba>
 8000c50:	220f      	movs	r2, #15
 8000c52:	401a      	ands	r2, r3
 8000c54:	2a04      	cmp	r2, #4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fsub+0xba>
 8000c58:	3304      	adds	r3, #4
 8000c5a:	015a      	lsls	r2, r3, #5
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fsub+0xc0>
 8000c5e:	e0d6      	b.n	8000e0e <__aeabi_fsub+0x26e>
 8000c60:	1c62      	adds	r2, r4, #1
 8000c62:	2cfe      	cmp	r4, #254	; 0xfe
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fsub+0xc8>
 8000c66:	e0da      	b.n	8000e1e <__aeabi_fsub+0x27e>
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	0a5f      	lsrs	r7, r3, #9
 8000c6c:	b2d0      	uxtb	r0, r2
 8000c6e:	05c0      	lsls	r0, r0, #23
 8000c70:	4338      	orrs	r0, r7
 8000c72:	07ed      	lsls	r5, r5, #31
 8000c74:	4328      	orrs	r0, r5
 8000c76:	bce0      	pop	{r5, r6, r7}
 8000c78:	46ba      	mov	sl, r7
 8000c7a:	46b1      	mov	r9, r6
 8000c7c:	46a8      	mov	r8, r5
 8000c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c80:	1ba2      	subs	r2, r4, r6
 8000c82:	4691      	mov	r9, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	dd63      	ble.n	8000d50 <__aeabi_fsub+0x1b0>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_fsub+0xee>
 8000c8c:	e099      	b.n	8000dc2 <__aeabi_fsub+0x222>
 8000c8e:	2cff      	cmp	r4, #255	; 0xff
 8000c90:	d03c      	beq.n	8000d0c <__aeabi_fsub+0x16c>
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	4652      	mov	r2, sl
 8000c96:	04db      	lsls	r3, r3, #19
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	4692      	mov	sl, r2
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	2a1b      	cmp	r2, #27
 8000ca2:	dc08      	bgt.n	8000cb6 <__aeabi_fsub+0x116>
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	40d3      	lsrs	r3, r2
 8000caa:	1a89      	subs	r1, r1, r2
 8000cac:	4652      	mov	r2, sl
 8000cae:	408a      	lsls	r2, r1
 8000cb0:	1e51      	subs	r1, r2, #1
 8000cb2:	418a      	sbcs	r2, r1
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	015a      	lsls	r2, r3, #5
 8000cba:	d400      	bmi.n	8000cbe <__aeabi_fsub+0x11e>
 8000cbc:	e0a4      	b.n	8000e08 <__aeabi_fsub+0x268>
 8000cbe:	3401      	adds	r4, #1
 8000cc0:	2cff      	cmp	r4, #255	; 0xff
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_fsub+0x126>
 8000cc4:	e0ab      	b.n	8000e1e <__aeabi_fsub+0x27e>
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4997      	ldr	r1, [pc, #604]	; (8000f28 <__aeabi_fsub+0x388>)
 8000cca:	401a      	ands	r2, r3
 8000ccc:	085b      	lsrs	r3, r3, #1
 8000cce:	400b      	ands	r3, r1
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	e7bb      	b.n	8000c4c <__aeabi_fsub+0xac>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	d032      	beq.n	8000d3e <__aeabi_fsub+0x19e>
 8000cd8:	428d      	cmp	r5, r1
 8000cda:	d035      	beq.n	8000d48 <__aeabi_fsub+0x1a8>
 8000cdc:	22ff      	movs	r2, #255	; 0xff
 8000cde:	4252      	negs	r2, r2
 8000ce0:	4691      	mov	r9, r2
 8000ce2:	44a1      	add	r9, r4
 8000ce4:	464a      	mov	r2, r9
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d051      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000cea:	1b30      	subs	r0, r6, r4
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fsub+0x152>
 8000cf0:	e09c      	b.n	8000e2c <__aeabi_fsub+0x28c>
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_fsub+0x15a>
 8000cf8:	e0df      	b.n	8000eba <__aeabi_fsub+0x31a>
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_fsub+0x162>
 8000d00:	e0f7      	b.n	8000ef2 <__aeabi_fsub+0x352>
 8000d02:	2eff      	cmp	r6, #255	; 0xff
 8000d04:	d000      	beq.n	8000d08 <__aeabi_fsub+0x168>
 8000d06:	e099      	b.n	8000e3c <__aeabi_fsub+0x29c>
 8000d08:	000d      	movs	r5, r1
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_fsub+0x172>
 8000d10:	e085      	b.n	8000e1e <__aeabi_fsub+0x27e>
 8000d12:	2780      	movs	r7, #128	; 0x80
 8000d14:	03ff      	lsls	r7, r7, #15
 8000d16:	431f      	orrs	r7, r3
 8000d18:	027f      	lsls	r7, r7, #9
 8000d1a:	20ff      	movs	r0, #255	; 0xff
 8000d1c:	0a7f      	lsrs	r7, r7, #9
 8000d1e:	e7a6      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000d20:	4652      	mov	r2, sl
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	d074      	beq.n	8000e10 <__aeabi_fsub+0x270>
 8000d26:	2201      	movs	r2, #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	44c1      	add	r9, r8
 8000d2e:	464a      	mov	r2, r9
 8000d30:	2a00      	cmp	r2, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x196>
 8000d34:	e0c8      	b.n	8000ec8 <__aeabi_fsub+0x328>
 8000d36:	2cff      	cmp	r4, #255	; 0xff
 8000d38:	d000      	beq.n	8000d3c <__aeabi_fsub+0x19c>
 8000d3a:	e75f      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d3c:	e7e6      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4051      	eors	r1, r2
 8000d42:	42a9      	cmp	r1, r5
 8000d44:	d000      	beq.n	8000d48 <__aeabi_fsub+0x1a8>
 8000d46:	e749      	b.n	8000bdc <__aeabi_fsub+0x3c>
 8000d48:	22ff      	movs	r2, #255	; 0xff
 8000d4a:	4252      	negs	r2, r2
 8000d4c:	4691      	mov	r9, r2
 8000d4e:	44a1      	add	r9, r4
 8000d50:	464a      	mov	r2, r9
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d043      	beq.n	8000dde <__aeabi_fsub+0x23e>
 8000d56:	1b31      	subs	r1, r6, r4
 8000d58:	2c00      	cmp	r4, #0
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_fsub+0x1be>
 8000d5c:	e08c      	b.n	8000e78 <__aeabi_fsub+0x2d8>
 8000d5e:	2eff      	cmp	r6, #255	; 0xff
 8000d60:	d100      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d62:	e092      	b.n	8000e8a <__aeabi_fsub+0x2ea>
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	4662      	mov	r2, ip
 8000d68:	04db      	lsls	r3, r3, #19
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	4694      	mov	ip, r2
 8000d6e:	2301      	movs	r3, #1
 8000d70:	291b      	cmp	r1, #27
 8000d72:	dc09      	bgt.n	8000d88 <__aeabi_fsub+0x1e8>
 8000d74:	2020      	movs	r0, #32
 8000d76:	4663      	mov	r3, ip
 8000d78:	4662      	mov	r2, ip
 8000d7a:	40cb      	lsrs	r3, r1
 8000d7c:	1a41      	subs	r1, r0, r1
 8000d7e:	408a      	lsls	r2, r1
 8000d80:	0011      	movs	r1, r2
 8000d82:	1e48      	subs	r0, r1, #1
 8000d84:	4181      	sbcs	r1, r0
 8000d86:	430b      	orrs	r3, r1
 8000d88:	0034      	movs	r4, r6
 8000d8a:	4453      	add	r3, sl
 8000d8c:	e794      	b.n	8000cb8 <__aeabi_fsub+0x118>
 8000d8e:	22fe      	movs	r2, #254	; 0xfe
 8000d90:	1c66      	adds	r6, r4, #1
 8000d92:	4232      	tst	r2, r6
 8000d94:	d164      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000d96:	2c00      	cmp	r4, #0
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fsub+0x1fc>
 8000d9a:	e082      	b.n	8000ea2 <__aeabi_fsub+0x302>
 8000d9c:	4663      	mov	r3, ip
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d100      	bne.n	8000da4 <__aeabi_fsub+0x204>
 8000da2:	e0ab      	b.n	8000efc <__aeabi_fsub+0x35c>
 8000da4:	4653      	mov	r3, sl
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x20c>
 8000daa:	e760      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000dac:	4663      	mov	r3, ip
 8000dae:	4652      	mov	r2, sl
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	015a      	lsls	r2, r3, #5
 8000db4:	d400      	bmi.n	8000db8 <__aeabi_fsub+0x218>
 8000db6:	e0aa      	b.n	8000f0e <__aeabi_fsub+0x36e>
 8000db8:	4663      	mov	r3, ip
 8000dba:	4652      	mov	r2, sl
 8000dbc:	000d      	movs	r5, r1
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	e744      	b.n	8000c4c <__aeabi_fsub+0xac>
 8000dc2:	4652      	mov	r2, sl
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d023      	beq.n	8000e10 <__aeabi_fsub+0x270>
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4252      	negs	r2, r2
 8000dcc:	4690      	mov	r8, r2
 8000dce:	44c1      	add	r9, r8
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d075      	beq.n	8000ec2 <__aeabi_fsub+0x322>
 8000dd6:	2cff      	cmp	r4, #255	; 0xff
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_fsub+0x23c>
 8000dda:	e75f      	b.n	8000c9c <__aeabi_fsub+0xfc>
 8000ddc:	e796      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000dde:	26fe      	movs	r6, #254	; 0xfe
 8000de0:	3401      	adds	r4, #1
 8000de2:	4226      	tst	r6, r4
 8000de4:	d153      	bne.n	8000e8e <__aeabi_fsub+0x2ee>
 8000de6:	2800      	cmp	r0, #0
 8000de8:	d172      	bne.n	8000ed0 <__aeabi_fsub+0x330>
 8000dea:	4663      	mov	r3, ip
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_fsub+0x252>
 8000df0:	e093      	b.n	8000f1a <__aeabi_fsub+0x37a>
 8000df2:	4653      	mov	r3, sl
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x25a>
 8000df8:	e739      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000dfa:	4463      	add	r3, ip
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	015a      	lsls	r2, r3, #5
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_fsub+0x268>
 8000e02:	4a4a      	ldr	r2, [pc, #296]	; (8000f2c <__aeabi_fsub+0x38c>)
 8000e04:	3401      	adds	r4, #1
 8000e06:	4013      	ands	r3, r2
 8000e08:	075a      	lsls	r2, r3, #29
 8000e0a:	d000      	beq.n	8000e0e <__aeabi_fsub+0x26e>
 8000e0c:	e720      	b.n	8000c50 <__aeabi_fsub+0xb0>
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	2cff      	cmp	r4, #255	; 0xff
 8000e12:	d100      	bne.n	8000e16 <__aeabi_fsub+0x276>
 8000e14:	e77a      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000e16:	025b      	lsls	r3, r3, #9
 8000e18:	0a5f      	lsrs	r7, r3, #9
 8000e1a:	b2e0      	uxtb	r0, r4
 8000e1c:	e727      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000e1e:	20ff      	movs	r0, #255	; 0xff
 8000e20:	2700      	movs	r7, #0
 8000e22:	e724      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000e24:	4b41      	ldr	r3, [pc, #260]	; (8000f2c <__aeabi_fsub+0x38c>)
 8000e26:	1a24      	subs	r4, r4, r0
 8000e28:	4033      	ands	r3, r6
 8000e2a:	e70f      	b.n	8000c4c <__aeabi_fsub+0xac>
 8000e2c:	2eff      	cmp	r6, #255	; 0xff
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_fsub+0x292>
 8000e30:	e76a      	b.n	8000d08 <__aeabi_fsub+0x168>
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	4662      	mov	r2, ip
 8000e36:	04db      	lsls	r3, r3, #19
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	4694      	mov	ip, r2
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	281b      	cmp	r0, #27
 8000e40:	dc09      	bgt.n	8000e56 <__aeabi_fsub+0x2b6>
 8000e42:	2420      	movs	r4, #32
 8000e44:	4663      	mov	r3, ip
 8000e46:	4662      	mov	r2, ip
 8000e48:	40c3      	lsrs	r3, r0
 8000e4a:	1a20      	subs	r0, r4, r0
 8000e4c:	4082      	lsls	r2, r0
 8000e4e:	0010      	movs	r0, r2
 8000e50:	1e44      	subs	r4, r0, #1
 8000e52:	41a0      	sbcs	r0, r4
 8000e54:	4303      	orrs	r3, r0
 8000e56:	4652      	mov	r2, sl
 8000e58:	000d      	movs	r5, r1
 8000e5a:	0034      	movs	r4, r6
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	e6dc      	b.n	8000c1a <__aeabi_fsub+0x7a>
 8000e60:	4663      	mov	r3, ip
 8000e62:	4652      	mov	r2, sl
 8000e64:	1a9e      	subs	r6, r3, r2
 8000e66:	0173      	lsls	r3, r6, #5
 8000e68:	d417      	bmi.n	8000e9a <__aeabi_fsub+0x2fa>
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d000      	beq.n	8000e70 <__aeabi_fsub+0x2d0>
 8000e6e:	e6d9      	b.n	8000c24 <__aeabi_fsub+0x84>
 8000e70:	2500      	movs	r5, #0
 8000e72:	2000      	movs	r0, #0
 8000e74:	2700      	movs	r7, #0
 8000e76:	e6fa      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000e78:	4663      	mov	r3, ip
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d044      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000e7e:	3901      	subs	r1, #1
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d04c      	beq.n	8000f1e <__aeabi_fsub+0x37e>
 8000e84:	2eff      	cmp	r6, #255	; 0xff
 8000e86:	d000      	beq.n	8000e8a <__aeabi_fsub+0x2ea>
 8000e88:	e771      	b.n	8000d6e <__aeabi_fsub+0x1ce>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	e73e      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000e8e:	2cff      	cmp	r4, #255	; 0xff
 8000e90:	d0c5      	beq.n	8000e1e <__aeabi_fsub+0x27e>
 8000e92:	4652      	mov	r2, sl
 8000e94:	4462      	add	r2, ip
 8000e96:	0853      	lsrs	r3, r2, #1
 8000e98:	e7b6      	b.n	8000e08 <__aeabi_fsub+0x268>
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	000d      	movs	r5, r1
 8000e9e:	1ad6      	subs	r6, r2, r3
 8000ea0:	e6c0      	b.n	8000c24 <__aeabi_fsub+0x84>
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d116      	bne.n	8000ed6 <__aeabi_fsub+0x336>
 8000ea8:	4653      	mov	r3, sl
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_fsub+0x310>
 8000eae:	e72b      	b.n	8000d08 <__aeabi_fsub+0x168>
 8000eb0:	2780      	movs	r7, #128	; 0x80
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	20ff      	movs	r0, #255	; 0xff
 8000eb6:	03ff      	lsls	r7, r7, #15
 8000eb8:	e6d9      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000eba:	000d      	movs	r5, r1
 8000ebc:	4643      	mov	r3, r8
 8000ebe:	0034      	movs	r4, r6
 8000ec0:	e7a6      	b.n	8000e10 <__aeabi_fsub+0x270>
 8000ec2:	4653      	mov	r3, sl
 8000ec4:	4463      	add	r3, ip
 8000ec6:	e6f7      	b.n	8000cb8 <__aeabi_fsub+0x118>
 8000ec8:	4663      	mov	r3, ip
 8000eca:	4652      	mov	r2, sl
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	e6a4      	b.n	8000c1a <__aeabi_fsub+0x7a>
 8000ed0:	4662      	mov	r2, ip
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d0d9      	beq.n	8000e8a <__aeabi_fsub+0x2ea>
 8000ed6:	4652      	mov	r2, sl
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x33e>
 8000edc:	e716      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	03d2      	lsls	r2, r2, #15
 8000ee2:	4213      	tst	r3, r2
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_fsub+0x348>
 8000ee6:	e711      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	4210      	tst	r0, r2
 8000eec:	d000      	beq.n	8000ef0 <__aeabi_fsub+0x350>
 8000eee:	e70d      	b.n	8000d0c <__aeabi_fsub+0x16c>
 8000ef0:	e70a      	b.n	8000d08 <__aeabi_fsub+0x168>
 8000ef2:	4652      	mov	r2, sl
 8000ef4:	000d      	movs	r5, r1
 8000ef6:	0034      	movs	r4, r6
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	e68e      	b.n	8000c1a <__aeabi_fsub+0x7a>
 8000efc:	4653      	mov	r3, sl
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d008      	beq.n	8000f14 <__aeabi_fsub+0x374>
 8000f02:	000d      	movs	r5, r1
 8000f04:	4647      	mov	r7, r8
 8000f06:	e6b2      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000f08:	4643      	mov	r3, r8
 8000f0a:	0034      	movs	r4, r6
 8000f0c:	e780      	b.n	8000e10 <__aeabi_fsub+0x270>
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d000      	beq.n	8000f14 <__aeabi_fsub+0x374>
 8000f12:	e779      	b.n	8000e08 <__aeabi_fsub+0x268>
 8000f14:	2500      	movs	r5, #0
 8000f16:	2700      	movs	r7, #0
 8000f18:	e6a9      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000f1a:	4647      	mov	r7, r8
 8000f1c:	e6a7      	b.n	8000c6e <__aeabi_fsub+0xce>
 8000f1e:	4653      	mov	r3, sl
 8000f20:	0034      	movs	r4, r6
 8000f22:	4463      	add	r3, ip
 8000f24:	e6c8      	b.n	8000cb8 <__aeabi_fsub+0x118>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	7dffffff 	.word	0x7dffffff
 8000f2c:	fbffffff 	.word	0xfbffffff

08000f30 <__aeabi_f2iz>:
 8000f30:	0241      	lsls	r1, r0, #9
 8000f32:	0042      	lsls	r2, r0, #1
 8000f34:	0fc3      	lsrs	r3, r0, #31
 8000f36:	0a49      	lsrs	r1, r1, #9
 8000f38:	2000      	movs	r0, #0
 8000f3a:	0e12      	lsrs	r2, r2, #24
 8000f3c:	2a7e      	cmp	r2, #126	; 0x7e
 8000f3e:	d903      	bls.n	8000f48 <__aeabi_f2iz+0x18>
 8000f40:	2a9d      	cmp	r2, #157	; 0x9d
 8000f42:	d902      	bls.n	8000f4a <__aeabi_f2iz+0x1a>
 8000f44:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <__aeabi_f2iz+0x3c>)
 8000f46:	1898      	adds	r0, r3, r2
 8000f48:	4770      	bx	lr
 8000f4a:	2080      	movs	r0, #128	; 0x80
 8000f4c:	0400      	lsls	r0, r0, #16
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	2a95      	cmp	r2, #149	; 0x95
 8000f52:	dc07      	bgt.n	8000f64 <__aeabi_f2iz+0x34>
 8000f54:	2096      	movs	r0, #150	; 0x96
 8000f56:	1a82      	subs	r2, r0, r2
 8000f58:	40d1      	lsrs	r1, r2
 8000f5a:	4248      	negs	r0, r1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f3      	bne.n	8000f48 <__aeabi_f2iz+0x18>
 8000f60:	0008      	movs	r0, r1
 8000f62:	e7f1      	b.n	8000f48 <__aeabi_f2iz+0x18>
 8000f64:	3a96      	subs	r2, #150	; 0x96
 8000f66:	4091      	lsls	r1, r2
 8000f68:	e7f7      	b.n	8000f5a <__aeabi_f2iz+0x2a>
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	7fffffff 	.word	0x7fffffff

08000f70 <__aeabi_i2f>:
 8000f70:	b570      	push	{r4, r5, r6, lr}
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d013      	beq.n	8000f9e <__aeabi_i2f+0x2e>
 8000f76:	17c3      	asrs	r3, r0, #31
 8000f78:	18c5      	adds	r5, r0, r3
 8000f7a:	405d      	eors	r5, r3
 8000f7c:	0fc4      	lsrs	r4, r0, #31
 8000f7e:	0028      	movs	r0, r5
 8000f80:	f001 feba 	bl	8002cf8 <__clzsi2>
 8000f84:	239e      	movs	r3, #158	; 0x9e
 8000f86:	0001      	movs	r1, r0
 8000f88:	1a1b      	subs	r3, r3, r0
 8000f8a:	2b96      	cmp	r3, #150	; 0x96
 8000f8c:	dc0f      	bgt.n	8000fae <__aeabi_i2f+0x3e>
 8000f8e:	2808      	cmp	r0, #8
 8000f90:	dd01      	ble.n	8000f96 <__aeabi_i2f+0x26>
 8000f92:	3908      	subs	r1, #8
 8000f94:	408d      	lsls	r5, r1
 8000f96:	026d      	lsls	r5, r5, #9
 8000f98:	0a6d      	lsrs	r5, r5, #9
 8000f9a:	b2d8      	uxtb	r0, r3
 8000f9c:	e002      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	05c0      	lsls	r0, r0, #23
 8000fa6:	4328      	orrs	r0, r5
 8000fa8:	07e4      	lsls	r4, r4, #31
 8000faa:	4320      	orrs	r0, r4
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
 8000fae:	2b99      	cmp	r3, #153	; 0x99
 8000fb0:	dd0b      	ble.n	8000fca <__aeabi_i2f+0x5a>
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	002e      	movs	r6, r5
 8000fb6:	1a12      	subs	r2, r2, r0
 8000fb8:	40d6      	lsrs	r6, r2
 8000fba:	0002      	movs	r2, r0
 8000fbc:	321b      	adds	r2, #27
 8000fbe:	4095      	lsls	r5, r2
 8000fc0:	0028      	movs	r0, r5
 8000fc2:	1e45      	subs	r5, r0, #1
 8000fc4:	41a8      	sbcs	r0, r5
 8000fc6:	0035      	movs	r5, r6
 8000fc8:	4305      	orrs	r5, r0
 8000fca:	2905      	cmp	r1, #5
 8000fcc:	dd01      	ble.n	8000fd2 <__aeabi_i2f+0x62>
 8000fce:	1f4a      	subs	r2, r1, #5
 8000fd0:	4095      	lsls	r5, r2
 8000fd2:	002a      	movs	r2, r5
 8000fd4:	4e08      	ldr	r6, [pc, #32]	; (8000ff8 <__aeabi_i2f+0x88>)
 8000fd6:	4032      	ands	r2, r6
 8000fd8:	0768      	lsls	r0, r5, #29
 8000fda:	d009      	beq.n	8000ff0 <__aeabi_i2f+0x80>
 8000fdc:	200f      	movs	r0, #15
 8000fde:	4028      	ands	r0, r5
 8000fe0:	2804      	cmp	r0, #4
 8000fe2:	d005      	beq.n	8000ff0 <__aeabi_i2f+0x80>
 8000fe4:	3204      	adds	r2, #4
 8000fe6:	0150      	lsls	r0, r2, #5
 8000fe8:	d502      	bpl.n	8000ff0 <__aeabi_i2f+0x80>
 8000fea:	239f      	movs	r3, #159	; 0x9f
 8000fec:	4032      	ands	r2, r6
 8000fee:	1a5b      	subs	r3, r3, r1
 8000ff0:	0192      	lsls	r2, r2, #6
 8000ff2:	0a55      	lsrs	r5, r2, #9
 8000ff4:	b2d8      	uxtb	r0, r3
 8000ff6:	e7d5      	b.n	8000fa4 <__aeabi_i2f+0x34>
 8000ff8:	fbffffff 	.word	0xfbffffff

08000ffc <__aeabi_ui2f>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	1e05      	subs	r5, r0, #0
 8001000:	d00e      	beq.n	8001020 <__aeabi_ui2f+0x24>
 8001002:	f001 fe79 	bl	8002cf8 <__clzsi2>
 8001006:	239e      	movs	r3, #158	; 0x9e
 8001008:	0004      	movs	r4, r0
 800100a:	1a1b      	subs	r3, r3, r0
 800100c:	2b96      	cmp	r3, #150	; 0x96
 800100e:	dc0c      	bgt.n	800102a <__aeabi_ui2f+0x2e>
 8001010:	2808      	cmp	r0, #8
 8001012:	dd01      	ble.n	8001018 <__aeabi_ui2f+0x1c>
 8001014:	3c08      	subs	r4, #8
 8001016:	40a5      	lsls	r5, r4
 8001018:	026d      	lsls	r5, r5, #9
 800101a:	0a6d      	lsrs	r5, r5, #9
 800101c:	b2d8      	uxtb	r0, r3
 800101e:	e001      	b.n	8001024 <__aeabi_ui2f+0x28>
 8001020:	2000      	movs	r0, #0
 8001022:	2500      	movs	r5, #0
 8001024:	05c0      	lsls	r0, r0, #23
 8001026:	4328      	orrs	r0, r5
 8001028:	bd70      	pop	{r4, r5, r6, pc}
 800102a:	2b99      	cmp	r3, #153	; 0x99
 800102c:	dd09      	ble.n	8001042 <__aeabi_ui2f+0x46>
 800102e:	0002      	movs	r2, r0
 8001030:	0029      	movs	r1, r5
 8001032:	321b      	adds	r2, #27
 8001034:	4091      	lsls	r1, r2
 8001036:	1e4a      	subs	r2, r1, #1
 8001038:	4191      	sbcs	r1, r2
 800103a:	2205      	movs	r2, #5
 800103c:	1a12      	subs	r2, r2, r0
 800103e:	40d5      	lsrs	r5, r2
 8001040:	430d      	orrs	r5, r1
 8001042:	2c05      	cmp	r4, #5
 8001044:	dd01      	ble.n	800104a <__aeabi_ui2f+0x4e>
 8001046:	1f62      	subs	r2, r4, #5
 8001048:	4095      	lsls	r5, r2
 800104a:	0029      	movs	r1, r5
 800104c:	4e08      	ldr	r6, [pc, #32]	; (8001070 <__aeabi_ui2f+0x74>)
 800104e:	4031      	ands	r1, r6
 8001050:	076a      	lsls	r2, r5, #29
 8001052:	d009      	beq.n	8001068 <__aeabi_ui2f+0x6c>
 8001054:	200f      	movs	r0, #15
 8001056:	4028      	ands	r0, r5
 8001058:	2804      	cmp	r0, #4
 800105a:	d005      	beq.n	8001068 <__aeabi_ui2f+0x6c>
 800105c:	3104      	adds	r1, #4
 800105e:	014a      	lsls	r2, r1, #5
 8001060:	d502      	bpl.n	8001068 <__aeabi_ui2f+0x6c>
 8001062:	239f      	movs	r3, #159	; 0x9f
 8001064:	4031      	ands	r1, r6
 8001066:	1b1b      	subs	r3, r3, r4
 8001068:	0189      	lsls	r1, r1, #6
 800106a:	0a4d      	lsrs	r5, r1, #9
 800106c:	b2d8      	uxtb	r0, r3
 800106e:	e7d9      	b.n	8001024 <__aeabi_ui2f+0x28>
 8001070:	fbffffff 	.word	0xfbffffff

08001074 <__aeabi_dadd>:
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	464f      	mov	r7, r9
 8001078:	46d6      	mov	lr, sl
 800107a:	4646      	mov	r6, r8
 800107c:	000d      	movs	r5, r1
 800107e:	0001      	movs	r1, r0
 8001080:	0018      	movs	r0, r3
 8001082:	b5c0      	push	{r6, r7, lr}
 8001084:	0017      	movs	r7, r2
 8001086:	032b      	lsls	r3, r5, #12
 8001088:	0a5a      	lsrs	r2, r3, #9
 800108a:	0f4b      	lsrs	r3, r1, #29
 800108c:	4313      	orrs	r3, r2
 800108e:	00ca      	lsls	r2, r1, #3
 8001090:	4691      	mov	r9, r2
 8001092:	0302      	lsls	r2, r0, #12
 8001094:	006e      	lsls	r6, r5, #1
 8001096:	0041      	lsls	r1, r0, #1
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	0fec      	lsrs	r4, r5, #31
 800109c:	0f7d      	lsrs	r5, r7, #29
 800109e:	4315      	orrs	r5, r2
 80010a0:	0d76      	lsrs	r6, r6, #21
 80010a2:	0d49      	lsrs	r1, r1, #21
 80010a4:	0fc0      	lsrs	r0, r0, #31
 80010a6:	4682      	mov	sl, r0
 80010a8:	46ac      	mov	ip, r5
 80010aa:	00ff      	lsls	r7, r7, #3
 80010ac:	1a72      	subs	r2, r6, r1
 80010ae:	4284      	cmp	r4, r0
 80010b0:	d100      	bne.n	80010b4 <__aeabi_dadd+0x40>
 80010b2:	e098      	b.n	80011e6 <__aeabi_dadd+0x172>
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_dadd+0x46>
 80010b8:	e081      	b.n	80011be <__aeabi_dadd+0x14a>
 80010ba:	2900      	cmp	r1, #0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dadd+0x4c>
 80010be:	e0b6      	b.n	800122e <__aeabi_dadd+0x1ba>
 80010c0:	49c9      	ldr	r1, [pc, #804]	; (80013e8 <__aeabi_dadd+0x374>)
 80010c2:	428e      	cmp	r6, r1
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dadd+0x54>
 80010c6:	e172      	b.n	80013ae <__aeabi_dadd+0x33a>
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0028      	movs	r0, r5
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	4308      	orrs	r0, r1
 80010d0:	4684      	mov	ip, r0
 80010d2:	2a38      	cmp	r2, #56	; 0x38
 80010d4:	dd00      	ble.n	80010d8 <__aeabi_dadd+0x64>
 80010d6:	e15e      	b.n	8001396 <__aeabi_dadd+0x322>
 80010d8:	2a1f      	cmp	r2, #31
 80010da:	dd00      	ble.n	80010de <__aeabi_dadd+0x6a>
 80010dc:	e1ee      	b.n	80014bc <__aeabi_dadd+0x448>
 80010de:	2020      	movs	r0, #32
 80010e0:	0039      	movs	r1, r7
 80010e2:	4665      	mov	r5, ip
 80010e4:	1a80      	subs	r0, r0, r2
 80010e6:	4087      	lsls	r7, r0
 80010e8:	40d1      	lsrs	r1, r2
 80010ea:	4085      	lsls	r5, r0
 80010ec:	430d      	orrs	r5, r1
 80010ee:	0039      	movs	r1, r7
 80010f0:	1e4f      	subs	r7, r1, #1
 80010f2:	41b9      	sbcs	r1, r7
 80010f4:	4667      	mov	r7, ip
 80010f6:	40d7      	lsrs	r7, r2
 80010f8:	4329      	orrs	r1, r5
 80010fa:	1bdb      	subs	r3, r3, r7
 80010fc:	464a      	mov	r2, r9
 80010fe:	1a55      	subs	r5, r2, r1
 8001100:	45a9      	cmp	r9, r5
 8001102:	4189      	sbcs	r1, r1
 8001104:	4249      	negs	r1, r1
 8001106:	1a5b      	subs	r3, r3, r1
 8001108:	4698      	mov	r8, r3
 800110a:	4643      	mov	r3, r8
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	d400      	bmi.n	8001112 <__aeabi_dadd+0x9e>
 8001110:	e0cc      	b.n	80012ac <__aeabi_dadd+0x238>
 8001112:	4643      	mov	r3, r8
 8001114:	025b      	lsls	r3, r3, #9
 8001116:	0a5b      	lsrs	r3, r3, #9
 8001118:	4698      	mov	r8, r3
 800111a:	4643      	mov	r3, r8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d100      	bne.n	8001122 <__aeabi_dadd+0xae>
 8001120:	e12c      	b.n	800137c <__aeabi_dadd+0x308>
 8001122:	4640      	mov	r0, r8
 8001124:	f001 fde8 	bl	8002cf8 <__clzsi2>
 8001128:	0001      	movs	r1, r0
 800112a:	3908      	subs	r1, #8
 800112c:	2220      	movs	r2, #32
 800112e:	0028      	movs	r0, r5
 8001130:	4643      	mov	r3, r8
 8001132:	1a52      	subs	r2, r2, r1
 8001134:	408b      	lsls	r3, r1
 8001136:	40d0      	lsrs	r0, r2
 8001138:	408d      	lsls	r5, r1
 800113a:	4303      	orrs	r3, r0
 800113c:	428e      	cmp	r6, r1
 800113e:	dd00      	ble.n	8001142 <__aeabi_dadd+0xce>
 8001140:	e117      	b.n	8001372 <__aeabi_dadd+0x2fe>
 8001142:	1b8e      	subs	r6, r1, r6
 8001144:	1c72      	adds	r2, r6, #1
 8001146:	2a1f      	cmp	r2, #31
 8001148:	dd00      	ble.n	800114c <__aeabi_dadd+0xd8>
 800114a:	e1a7      	b.n	800149c <__aeabi_dadd+0x428>
 800114c:	2120      	movs	r1, #32
 800114e:	0018      	movs	r0, r3
 8001150:	002e      	movs	r6, r5
 8001152:	1a89      	subs	r1, r1, r2
 8001154:	408d      	lsls	r5, r1
 8001156:	4088      	lsls	r0, r1
 8001158:	40d6      	lsrs	r6, r2
 800115a:	40d3      	lsrs	r3, r2
 800115c:	1e69      	subs	r1, r5, #1
 800115e:	418d      	sbcs	r5, r1
 8001160:	4330      	orrs	r0, r6
 8001162:	4698      	mov	r8, r3
 8001164:	2600      	movs	r6, #0
 8001166:	4305      	orrs	r5, r0
 8001168:	076b      	lsls	r3, r5, #29
 800116a:	d009      	beq.n	8001180 <__aeabi_dadd+0x10c>
 800116c:	230f      	movs	r3, #15
 800116e:	402b      	ands	r3, r5
 8001170:	2b04      	cmp	r3, #4
 8001172:	d005      	beq.n	8001180 <__aeabi_dadd+0x10c>
 8001174:	1d2b      	adds	r3, r5, #4
 8001176:	42ab      	cmp	r3, r5
 8001178:	41ad      	sbcs	r5, r5
 800117a:	426d      	negs	r5, r5
 800117c:	44a8      	add	r8, r5
 800117e:	001d      	movs	r5, r3
 8001180:	4643      	mov	r3, r8
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	d400      	bmi.n	8001188 <__aeabi_dadd+0x114>
 8001186:	e094      	b.n	80012b2 <__aeabi_dadd+0x23e>
 8001188:	4b97      	ldr	r3, [pc, #604]	; (80013e8 <__aeabi_dadd+0x374>)
 800118a:	1c72      	adds	r2, r6, #1
 800118c:	429a      	cmp	r2, r3
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x11e>
 8001190:	e09d      	b.n	80012ce <__aeabi_dadd+0x25a>
 8001192:	4641      	mov	r1, r8
 8001194:	4b95      	ldr	r3, [pc, #596]	; (80013ec <__aeabi_dadd+0x378>)
 8001196:	08ed      	lsrs	r5, r5, #3
 8001198:	4019      	ands	r1, r3
 800119a:	000b      	movs	r3, r1
 800119c:	0552      	lsls	r2, r2, #21
 800119e:	0749      	lsls	r1, r1, #29
 80011a0:	025b      	lsls	r3, r3, #9
 80011a2:	4329      	orrs	r1, r5
 80011a4:	0b1b      	lsrs	r3, r3, #12
 80011a6:	0d52      	lsrs	r2, r2, #21
 80011a8:	0512      	lsls	r2, r2, #20
 80011aa:	4313      	orrs	r3, r2
 80011ac:	07e4      	lsls	r4, r4, #31
 80011ae:	4323      	orrs	r3, r4
 80011b0:	0008      	movs	r0, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	bce0      	pop	{r5, r6, r7}
 80011b6:	46ba      	mov	sl, r7
 80011b8:	46b1      	mov	r9, r6
 80011ba:	46a8      	mov	r8, r5
 80011bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011be:	2a00      	cmp	r2, #0
 80011c0:	d043      	beq.n	800124a <__aeabi_dadd+0x1d6>
 80011c2:	1b8a      	subs	r2, r1, r6
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d000      	beq.n	80011ca <__aeabi_dadd+0x156>
 80011c8:	e12a      	b.n	8001420 <__aeabi_dadd+0x3ac>
 80011ca:	464c      	mov	r4, r9
 80011cc:	431c      	orrs	r4, r3
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dadd+0x15e>
 80011d0:	e1d1      	b.n	8001576 <__aeabi_dadd+0x502>
 80011d2:	1e54      	subs	r4, r2, #1
 80011d4:	2a01      	cmp	r2, #1
 80011d6:	d100      	bne.n	80011da <__aeabi_dadd+0x166>
 80011d8:	e21f      	b.n	800161a <__aeabi_dadd+0x5a6>
 80011da:	4d83      	ldr	r5, [pc, #524]	; (80013e8 <__aeabi_dadd+0x374>)
 80011dc:	42aa      	cmp	r2, r5
 80011de:	d100      	bne.n	80011e2 <__aeabi_dadd+0x16e>
 80011e0:	e272      	b.n	80016c8 <__aeabi_dadd+0x654>
 80011e2:	0022      	movs	r2, r4
 80011e4:	e123      	b.n	800142e <__aeabi_dadd+0x3ba>
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	dc00      	bgt.n	80011ec <__aeabi_dadd+0x178>
 80011ea:	e098      	b.n	800131e <__aeabi_dadd+0x2aa>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d042      	beq.n	8001276 <__aeabi_dadd+0x202>
 80011f0:	497d      	ldr	r1, [pc, #500]	; (80013e8 <__aeabi_dadd+0x374>)
 80011f2:	428e      	cmp	r6, r1
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dadd+0x184>
 80011f6:	e0da      	b.n	80013ae <__aeabi_dadd+0x33a>
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0028      	movs	r0, r5
 80011fc:	0409      	lsls	r1, r1, #16
 80011fe:	4308      	orrs	r0, r1
 8001200:	4684      	mov	ip, r0
 8001202:	2a38      	cmp	r2, #56	; 0x38
 8001204:	dd00      	ble.n	8001208 <__aeabi_dadd+0x194>
 8001206:	e129      	b.n	800145c <__aeabi_dadd+0x3e8>
 8001208:	2a1f      	cmp	r2, #31
 800120a:	dc00      	bgt.n	800120e <__aeabi_dadd+0x19a>
 800120c:	e187      	b.n	800151e <__aeabi_dadd+0x4aa>
 800120e:	0011      	movs	r1, r2
 8001210:	4665      	mov	r5, ip
 8001212:	3920      	subs	r1, #32
 8001214:	40cd      	lsrs	r5, r1
 8001216:	2a20      	cmp	r2, #32
 8001218:	d004      	beq.n	8001224 <__aeabi_dadd+0x1b0>
 800121a:	2040      	movs	r0, #64	; 0x40
 800121c:	4661      	mov	r1, ip
 800121e:	1a82      	subs	r2, r0, r2
 8001220:	4091      	lsls	r1, r2
 8001222:	430f      	orrs	r7, r1
 8001224:	0039      	movs	r1, r7
 8001226:	1e4f      	subs	r7, r1, #1
 8001228:	41b9      	sbcs	r1, r7
 800122a:	430d      	orrs	r5, r1
 800122c:	e11b      	b.n	8001466 <__aeabi_dadd+0x3f2>
 800122e:	0029      	movs	r1, r5
 8001230:	4339      	orrs	r1, r7
 8001232:	d100      	bne.n	8001236 <__aeabi_dadd+0x1c2>
 8001234:	e0b5      	b.n	80013a2 <__aeabi_dadd+0x32e>
 8001236:	1e51      	subs	r1, r2, #1
 8001238:	2a01      	cmp	r2, #1
 800123a:	d100      	bne.n	800123e <__aeabi_dadd+0x1ca>
 800123c:	e1ab      	b.n	8001596 <__aeabi_dadd+0x522>
 800123e:	486a      	ldr	r0, [pc, #424]	; (80013e8 <__aeabi_dadd+0x374>)
 8001240:	4282      	cmp	r2, r0
 8001242:	d100      	bne.n	8001246 <__aeabi_dadd+0x1d2>
 8001244:	e1b2      	b.n	80015ac <__aeabi_dadd+0x538>
 8001246:	000a      	movs	r2, r1
 8001248:	e743      	b.n	80010d2 <__aeabi_dadd+0x5e>
 800124a:	4969      	ldr	r1, [pc, #420]	; (80013f0 <__aeabi_dadd+0x37c>)
 800124c:	1c75      	adds	r5, r6, #1
 800124e:	420d      	tst	r5, r1
 8001250:	d000      	beq.n	8001254 <__aeabi_dadd+0x1e0>
 8001252:	e0cf      	b.n	80013f4 <__aeabi_dadd+0x380>
 8001254:	2e00      	cmp	r6, #0
 8001256:	d000      	beq.n	800125a <__aeabi_dadd+0x1e6>
 8001258:	e193      	b.n	8001582 <__aeabi_dadd+0x50e>
 800125a:	4649      	mov	r1, r9
 800125c:	4319      	orrs	r1, r3
 800125e:	d100      	bne.n	8001262 <__aeabi_dadd+0x1ee>
 8001260:	e1d1      	b.n	8001606 <__aeabi_dadd+0x592>
 8001262:	4661      	mov	r1, ip
 8001264:	4339      	orrs	r1, r7
 8001266:	d000      	beq.n	800126a <__aeabi_dadd+0x1f6>
 8001268:	e1e3      	b.n	8001632 <__aeabi_dadd+0x5be>
 800126a:	4649      	mov	r1, r9
 800126c:	0758      	lsls	r0, r3, #29
 800126e:	08c9      	lsrs	r1, r1, #3
 8001270:	4301      	orrs	r1, r0
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	e026      	b.n	80012c4 <__aeabi_dadd+0x250>
 8001276:	0029      	movs	r1, r5
 8001278:	4339      	orrs	r1, r7
 800127a:	d100      	bne.n	800127e <__aeabi_dadd+0x20a>
 800127c:	e091      	b.n	80013a2 <__aeabi_dadd+0x32e>
 800127e:	1e51      	subs	r1, r2, #1
 8001280:	2a01      	cmp	r2, #1
 8001282:	d005      	beq.n	8001290 <__aeabi_dadd+0x21c>
 8001284:	4858      	ldr	r0, [pc, #352]	; (80013e8 <__aeabi_dadd+0x374>)
 8001286:	4282      	cmp	r2, r0
 8001288:	d100      	bne.n	800128c <__aeabi_dadd+0x218>
 800128a:	e18f      	b.n	80015ac <__aeabi_dadd+0x538>
 800128c:	000a      	movs	r2, r1
 800128e:	e7b8      	b.n	8001202 <__aeabi_dadd+0x18e>
 8001290:	003d      	movs	r5, r7
 8001292:	444d      	add	r5, r9
 8001294:	454d      	cmp	r5, r9
 8001296:	4189      	sbcs	r1, r1
 8001298:	4463      	add	r3, ip
 800129a:	4698      	mov	r8, r3
 800129c:	4249      	negs	r1, r1
 800129e:	4488      	add	r8, r1
 80012a0:	4643      	mov	r3, r8
 80012a2:	2602      	movs	r6, #2
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	d500      	bpl.n	80012aa <__aeabi_dadd+0x236>
 80012a8:	e0eb      	b.n	8001482 <__aeabi_dadd+0x40e>
 80012aa:	3e01      	subs	r6, #1
 80012ac:	076b      	lsls	r3, r5, #29
 80012ae:	d000      	beq.n	80012b2 <__aeabi_dadd+0x23e>
 80012b0:	e75c      	b.n	800116c <__aeabi_dadd+0xf8>
 80012b2:	4643      	mov	r3, r8
 80012b4:	08e9      	lsrs	r1, r5, #3
 80012b6:	075a      	lsls	r2, r3, #29
 80012b8:	4311      	orrs	r1, r2
 80012ba:	0032      	movs	r2, r6
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	484a      	ldr	r0, [pc, #296]	; (80013e8 <__aeabi_dadd+0x374>)
 80012c0:	4282      	cmp	r2, r0
 80012c2:	d021      	beq.n	8001308 <__aeabi_dadd+0x294>
 80012c4:	031b      	lsls	r3, r3, #12
 80012c6:	0552      	lsls	r2, r2, #21
 80012c8:	0b1b      	lsrs	r3, r3, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	e76c      	b.n	80011a8 <__aeabi_dadd+0x134>
 80012ce:	2300      	movs	r3, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	e769      	b.n	80011a8 <__aeabi_dadd+0x134>
 80012d4:	002a      	movs	r2, r5
 80012d6:	433a      	orrs	r2, r7
 80012d8:	d069      	beq.n	80013ae <__aeabi_dadd+0x33a>
 80012da:	464a      	mov	r2, r9
 80012dc:	0758      	lsls	r0, r3, #29
 80012de:	08d1      	lsrs	r1, r2, #3
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	031b      	lsls	r3, r3, #12
 80012e6:	4308      	orrs	r0, r1
 80012e8:	421a      	tst	r2, r3
 80012ea:	d007      	beq.n	80012fc <__aeabi_dadd+0x288>
 80012ec:	0029      	movs	r1, r5
 80012ee:	08ed      	lsrs	r5, r5, #3
 80012f0:	421d      	tst	r5, r3
 80012f2:	d103      	bne.n	80012fc <__aeabi_dadd+0x288>
 80012f4:	002a      	movs	r2, r5
 80012f6:	08ff      	lsrs	r7, r7, #3
 80012f8:	0748      	lsls	r0, r1, #29
 80012fa:	4338      	orrs	r0, r7
 80012fc:	0f43      	lsrs	r3, r0, #29
 80012fe:	00c1      	lsls	r1, r0, #3
 8001300:	075b      	lsls	r3, r3, #29
 8001302:	08c9      	lsrs	r1, r1, #3
 8001304:	4319      	orrs	r1, r3
 8001306:	0013      	movs	r3, r2
 8001308:	000a      	movs	r2, r1
 800130a:	431a      	orrs	r2, r3
 800130c:	d100      	bne.n	8001310 <__aeabi_dadd+0x29c>
 800130e:	e213      	b.n	8001738 <__aeabi_dadd+0x6c4>
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	0312      	lsls	r2, r2, #12
 8001314:	4313      	orrs	r3, r2
 8001316:	031b      	lsls	r3, r3, #12
 8001318:	4a33      	ldr	r2, [pc, #204]	; (80013e8 <__aeabi_dadd+0x374>)
 800131a:	0b1b      	lsrs	r3, r3, #12
 800131c:	e744      	b.n	80011a8 <__aeabi_dadd+0x134>
 800131e:	2a00      	cmp	r2, #0
 8001320:	d04b      	beq.n	80013ba <__aeabi_dadd+0x346>
 8001322:	1b8a      	subs	r2, r1, r6
 8001324:	2e00      	cmp	r6, #0
 8001326:	d100      	bne.n	800132a <__aeabi_dadd+0x2b6>
 8001328:	e0e7      	b.n	80014fa <__aeabi_dadd+0x486>
 800132a:	482f      	ldr	r0, [pc, #188]	; (80013e8 <__aeabi_dadd+0x374>)
 800132c:	4281      	cmp	r1, r0
 800132e:	d100      	bne.n	8001332 <__aeabi_dadd+0x2be>
 8001330:	e195      	b.n	800165e <__aeabi_dadd+0x5ea>
 8001332:	2080      	movs	r0, #128	; 0x80
 8001334:	0400      	lsls	r0, r0, #16
 8001336:	4303      	orrs	r3, r0
 8001338:	2a38      	cmp	r2, #56	; 0x38
 800133a:	dd00      	ble.n	800133e <__aeabi_dadd+0x2ca>
 800133c:	e143      	b.n	80015c6 <__aeabi_dadd+0x552>
 800133e:	2a1f      	cmp	r2, #31
 8001340:	dd00      	ble.n	8001344 <__aeabi_dadd+0x2d0>
 8001342:	e1db      	b.n	80016fc <__aeabi_dadd+0x688>
 8001344:	2020      	movs	r0, #32
 8001346:	001d      	movs	r5, r3
 8001348:	464e      	mov	r6, r9
 800134a:	1a80      	subs	r0, r0, r2
 800134c:	4085      	lsls	r5, r0
 800134e:	40d6      	lsrs	r6, r2
 8001350:	4335      	orrs	r5, r6
 8001352:	464e      	mov	r6, r9
 8001354:	4086      	lsls	r6, r0
 8001356:	0030      	movs	r0, r6
 8001358:	40d3      	lsrs	r3, r2
 800135a:	1e46      	subs	r6, r0, #1
 800135c:	41b0      	sbcs	r0, r6
 800135e:	449c      	add	ip, r3
 8001360:	4305      	orrs	r5, r0
 8001362:	19ed      	adds	r5, r5, r7
 8001364:	42bd      	cmp	r5, r7
 8001366:	419b      	sbcs	r3, r3
 8001368:	425b      	negs	r3, r3
 800136a:	4463      	add	r3, ip
 800136c:	4698      	mov	r8, r3
 800136e:	000e      	movs	r6, r1
 8001370:	e07f      	b.n	8001472 <__aeabi_dadd+0x3fe>
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <__aeabi_dadd+0x378>)
 8001374:	1a76      	subs	r6, r6, r1
 8001376:	4013      	ands	r3, r2
 8001378:	4698      	mov	r8, r3
 800137a:	e6f5      	b.n	8001168 <__aeabi_dadd+0xf4>
 800137c:	0028      	movs	r0, r5
 800137e:	f001 fcbb 	bl	8002cf8 <__clzsi2>
 8001382:	0001      	movs	r1, r0
 8001384:	3118      	adds	r1, #24
 8001386:	291f      	cmp	r1, #31
 8001388:	dc00      	bgt.n	800138c <__aeabi_dadd+0x318>
 800138a:	e6cf      	b.n	800112c <__aeabi_dadd+0xb8>
 800138c:	002b      	movs	r3, r5
 800138e:	3808      	subs	r0, #8
 8001390:	4083      	lsls	r3, r0
 8001392:	2500      	movs	r5, #0
 8001394:	e6d2      	b.n	800113c <__aeabi_dadd+0xc8>
 8001396:	4662      	mov	r2, ip
 8001398:	433a      	orrs	r2, r7
 800139a:	0011      	movs	r1, r2
 800139c:	1e4f      	subs	r7, r1, #1
 800139e:	41b9      	sbcs	r1, r7
 80013a0:	e6ac      	b.n	80010fc <__aeabi_dadd+0x88>
 80013a2:	4649      	mov	r1, r9
 80013a4:	0758      	lsls	r0, r3, #29
 80013a6:	08c9      	lsrs	r1, r1, #3
 80013a8:	4301      	orrs	r1, r0
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	e787      	b.n	80012be <__aeabi_dadd+0x24a>
 80013ae:	4649      	mov	r1, r9
 80013b0:	075a      	lsls	r2, r3, #29
 80013b2:	08c9      	lsrs	r1, r1, #3
 80013b4:	4311      	orrs	r1, r2
 80013b6:	08db      	lsrs	r3, r3, #3
 80013b8:	e7a6      	b.n	8001308 <__aeabi_dadd+0x294>
 80013ba:	490d      	ldr	r1, [pc, #52]	; (80013f0 <__aeabi_dadd+0x37c>)
 80013bc:	1c70      	adds	r0, r6, #1
 80013be:	4208      	tst	r0, r1
 80013c0:	d000      	beq.n	80013c4 <__aeabi_dadd+0x350>
 80013c2:	e0bb      	b.n	800153c <__aeabi_dadd+0x4c8>
 80013c4:	2e00      	cmp	r6, #0
 80013c6:	d000      	beq.n	80013ca <__aeabi_dadd+0x356>
 80013c8:	e114      	b.n	80015f4 <__aeabi_dadd+0x580>
 80013ca:	4649      	mov	r1, r9
 80013cc:	4319      	orrs	r1, r3
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dadd+0x35e>
 80013d0:	e175      	b.n	80016be <__aeabi_dadd+0x64a>
 80013d2:	0029      	movs	r1, r5
 80013d4:	4339      	orrs	r1, r7
 80013d6:	d000      	beq.n	80013da <__aeabi_dadd+0x366>
 80013d8:	e17e      	b.n	80016d8 <__aeabi_dadd+0x664>
 80013da:	4649      	mov	r1, r9
 80013dc:	0758      	lsls	r0, r3, #29
 80013de:	08c9      	lsrs	r1, r1, #3
 80013e0:	4301      	orrs	r1, r0
 80013e2:	08db      	lsrs	r3, r3, #3
 80013e4:	e76e      	b.n	80012c4 <__aeabi_dadd+0x250>
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	000007ff 	.word	0x000007ff
 80013ec:	ff7fffff 	.word	0xff7fffff
 80013f0:	000007fe 	.word	0x000007fe
 80013f4:	4649      	mov	r1, r9
 80013f6:	1bcd      	subs	r5, r1, r7
 80013f8:	4661      	mov	r1, ip
 80013fa:	1a58      	subs	r0, r3, r1
 80013fc:	45a9      	cmp	r9, r5
 80013fe:	4189      	sbcs	r1, r1
 8001400:	4249      	negs	r1, r1
 8001402:	4688      	mov	r8, r1
 8001404:	0001      	movs	r1, r0
 8001406:	4640      	mov	r0, r8
 8001408:	1a09      	subs	r1, r1, r0
 800140a:	4688      	mov	r8, r1
 800140c:	0209      	lsls	r1, r1, #8
 800140e:	d500      	bpl.n	8001412 <__aeabi_dadd+0x39e>
 8001410:	e0a6      	b.n	8001560 <__aeabi_dadd+0x4ec>
 8001412:	4641      	mov	r1, r8
 8001414:	4329      	orrs	r1, r5
 8001416:	d000      	beq.n	800141a <__aeabi_dadd+0x3a6>
 8001418:	e67f      	b.n	800111a <__aeabi_dadd+0xa6>
 800141a:	2300      	movs	r3, #0
 800141c:	2400      	movs	r4, #0
 800141e:	e751      	b.n	80012c4 <__aeabi_dadd+0x250>
 8001420:	4cc7      	ldr	r4, [pc, #796]	; (8001740 <__aeabi_dadd+0x6cc>)
 8001422:	42a1      	cmp	r1, r4
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x3b4>
 8001426:	e0c7      	b.n	80015b8 <__aeabi_dadd+0x544>
 8001428:	2480      	movs	r4, #128	; 0x80
 800142a:	0424      	lsls	r4, r4, #16
 800142c:	4323      	orrs	r3, r4
 800142e:	2a38      	cmp	r2, #56	; 0x38
 8001430:	dc54      	bgt.n	80014dc <__aeabi_dadd+0x468>
 8001432:	2a1f      	cmp	r2, #31
 8001434:	dd00      	ble.n	8001438 <__aeabi_dadd+0x3c4>
 8001436:	e0cc      	b.n	80015d2 <__aeabi_dadd+0x55e>
 8001438:	2420      	movs	r4, #32
 800143a:	4648      	mov	r0, r9
 800143c:	1aa4      	subs	r4, r4, r2
 800143e:	001d      	movs	r5, r3
 8001440:	464e      	mov	r6, r9
 8001442:	40a0      	lsls	r0, r4
 8001444:	40d6      	lsrs	r6, r2
 8001446:	40a5      	lsls	r5, r4
 8001448:	0004      	movs	r4, r0
 800144a:	40d3      	lsrs	r3, r2
 800144c:	4662      	mov	r2, ip
 800144e:	4335      	orrs	r5, r6
 8001450:	1e66      	subs	r6, r4, #1
 8001452:	41b4      	sbcs	r4, r6
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	469c      	mov	ip, r3
 8001458:	4325      	orrs	r5, r4
 800145a:	e044      	b.n	80014e6 <__aeabi_dadd+0x472>
 800145c:	4662      	mov	r2, ip
 800145e:	433a      	orrs	r2, r7
 8001460:	0015      	movs	r5, r2
 8001462:	1e6f      	subs	r7, r5, #1
 8001464:	41bd      	sbcs	r5, r7
 8001466:	444d      	add	r5, r9
 8001468:	454d      	cmp	r5, r9
 800146a:	4189      	sbcs	r1, r1
 800146c:	4249      	negs	r1, r1
 800146e:	4688      	mov	r8, r1
 8001470:	4498      	add	r8, r3
 8001472:	4643      	mov	r3, r8
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	d400      	bmi.n	800147a <__aeabi_dadd+0x406>
 8001478:	e718      	b.n	80012ac <__aeabi_dadd+0x238>
 800147a:	4bb1      	ldr	r3, [pc, #708]	; (8001740 <__aeabi_dadd+0x6cc>)
 800147c:	3601      	adds	r6, #1
 800147e:	429e      	cmp	r6, r3
 8001480:	d049      	beq.n	8001516 <__aeabi_dadd+0x4a2>
 8001482:	4642      	mov	r2, r8
 8001484:	4baf      	ldr	r3, [pc, #700]	; (8001744 <__aeabi_dadd+0x6d0>)
 8001486:	2101      	movs	r1, #1
 8001488:	401a      	ands	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	086a      	lsrs	r2, r5, #1
 800148e:	400d      	ands	r5, r1
 8001490:	4315      	orrs	r5, r2
 8001492:	07d9      	lsls	r1, r3, #31
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	4698      	mov	r8, r3
 8001498:	430d      	orrs	r5, r1
 800149a:	e665      	b.n	8001168 <__aeabi_dadd+0xf4>
 800149c:	0018      	movs	r0, r3
 800149e:	3e1f      	subs	r6, #31
 80014a0:	40f0      	lsrs	r0, r6
 80014a2:	2a20      	cmp	r2, #32
 80014a4:	d003      	beq.n	80014ae <__aeabi_dadd+0x43a>
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	1a8a      	subs	r2, r1, r2
 80014aa:	4093      	lsls	r3, r2
 80014ac:	431d      	orrs	r5, r3
 80014ae:	1e69      	subs	r1, r5, #1
 80014b0:	418d      	sbcs	r5, r1
 80014b2:	2300      	movs	r3, #0
 80014b4:	2600      	movs	r6, #0
 80014b6:	4698      	mov	r8, r3
 80014b8:	4305      	orrs	r5, r0
 80014ba:	e6f7      	b.n	80012ac <__aeabi_dadd+0x238>
 80014bc:	0011      	movs	r1, r2
 80014be:	4665      	mov	r5, ip
 80014c0:	3920      	subs	r1, #32
 80014c2:	40cd      	lsrs	r5, r1
 80014c4:	2a20      	cmp	r2, #32
 80014c6:	d004      	beq.n	80014d2 <__aeabi_dadd+0x45e>
 80014c8:	2040      	movs	r0, #64	; 0x40
 80014ca:	4661      	mov	r1, ip
 80014cc:	1a82      	subs	r2, r0, r2
 80014ce:	4091      	lsls	r1, r2
 80014d0:	430f      	orrs	r7, r1
 80014d2:	0039      	movs	r1, r7
 80014d4:	1e4f      	subs	r7, r1, #1
 80014d6:	41b9      	sbcs	r1, r7
 80014d8:	4329      	orrs	r1, r5
 80014da:	e60f      	b.n	80010fc <__aeabi_dadd+0x88>
 80014dc:	464a      	mov	r2, r9
 80014de:	4313      	orrs	r3, r2
 80014e0:	001d      	movs	r5, r3
 80014e2:	1e6b      	subs	r3, r5, #1
 80014e4:	419d      	sbcs	r5, r3
 80014e6:	1b7d      	subs	r5, r7, r5
 80014e8:	42af      	cmp	r7, r5
 80014ea:	419b      	sbcs	r3, r3
 80014ec:	4662      	mov	r2, ip
 80014ee:	425b      	negs	r3, r3
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	4698      	mov	r8, r3
 80014f4:	4654      	mov	r4, sl
 80014f6:	000e      	movs	r6, r1
 80014f8:	e607      	b.n	800110a <__aeabi_dadd+0x96>
 80014fa:	4648      	mov	r0, r9
 80014fc:	4318      	orrs	r0, r3
 80014fe:	d100      	bne.n	8001502 <__aeabi_dadd+0x48e>
 8001500:	e0b3      	b.n	800166a <__aeabi_dadd+0x5f6>
 8001502:	1e50      	subs	r0, r2, #1
 8001504:	2a01      	cmp	r2, #1
 8001506:	d100      	bne.n	800150a <__aeabi_dadd+0x496>
 8001508:	e10d      	b.n	8001726 <__aeabi_dadd+0x6b2>
 800150a:	4d8d      	ldr	r5, [pc, #564]	; (8001740 <__aeabi_dadd+0x6cc>)
 800150c:	42aa      	cmp	r2, r5
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x49e>
 8001510:	e0a5      	b.n	800165e <__aeabi_dadd+0x5ea>
 8001512:	0002      	movs	r2, r0
 8001514:	e710      	b.n	8001338 <__aeabi_dadd+0x2c4>
 8001516:	0032      	movs	r2, r6
 8001518:	2300      	movs	r3, #0
 800151a:	2100      	movs	r1, #0
 800151c:	e644      	b.n	80011a8 <__aeabi_dadd+0x134>
 800151e:	2120      	movs	r1, #32
 8001520:	0038      	movs	r0, r7
 8001522:	1a89      	subs	r1, r1, r2
 8001524:	4665      	mov	r5, ip
 8001526:	408f      	lsls	r7, r1
 8001528:	408d      	lsls	r5, r1
 800152a:	40d0      	lsrs	r0, r2
 800152c:	1e79      	subs	r1, r7, #1
 800152e:	418f      	sbcs	r7, r1
 8001530:	4305      	orrs	r5, r0
 8001532:	433d      	orrs	r5, r7
 8001534:	4667      	mov	r7, ip
 8001536:	40d7      	lsrs	r7, r2
 8001538:	19db      	adds	r3, r3, r7
 800153a:	e794      	b.n	8001466 <__aeabi_dadd+0x3f2>
 800153c:	4a80      	ldr	r2, [pc, #512]	; (8001740 <__aeabi_dadd+0x6cc>)
 800153e:	4290      	cmp	r0, r2
 8001540:	d100      	bne.n	8001544 <__aeabi_dadd+0x4d0>
 8001542:	e0ec      	b.n	800171e <__aeabi_dadd+0x6aa>
 8001544:	0039      	movs	r1, r7
 8001546:	4449      	add	r1, r9
 8001548:	4549      	cmp	r1, r9
 800154a:	4192      	sbcs	r2, r2
 800154c:	4463      	add	r3, ip
 800154e:	4252      	negs	r2, r2
 8001550:	189b      	adds	r3, r3, r2
 8001552:	07dd      	lsls	r5, r3, #31
 8001554:	0849      	lsrs	r1, r1, #1
 8001556:	085b      	lsrs	r3, r3, #1
 8001558:	4698      	mov	r8, r3
 800155a:	0006      	movs	r6, r0
 800155c:	430d      	orrs	r5, r1
 800155e:	e6a5      	b.n	80012ac <__aeabi_dadd+0x238>
 8001560:	464a      	mov	r2, r9
 8001562:	1abd      	subs	r5, r7, r2
 8001564:	42af      	cmp	r7, r5
 8001566:	4189      	sbcs	r1, r1
 8001568:	4662      	mov	r2, ip
 800156a:	4249      	negs	r1, r1
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	1a5b      	subs	r3, r3, r1
 8001570:	4698      	mov	r8, r3
 8001572:	4654      	mov	r4, sl
 8001574:	e5d1      	b.n	800111a <__aeabi_dadd+0xa6>
 8001576:	076c      	lsls	r4, r5, #29
 8001578:	08f9      	lsrs	r1, r7, #3
 800157a:	4321      	orrs	r1, r4
 800157c:	08eb      	lsrs	r3, r5, #3
 800157e:	0004      	movs	r4, r0
 8001580:	e69d      	b.n	80012be <__aeabi_dadd+0x24a>
 8001582:	464a      	mov	r2, r9
 8001584:	431a      	orrs	r2, r3
 8001586:	d175      	bne.n	8001674 <__aeabi_dadd+0x600>
 8001588:	4661      	mov	r1, ip
 800158a:	4339      	orrs	r1, r7
 800158c:	d114      	bne.n	80015b8 <__aeabi_dadd+0x544>
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	2400      	movs	r4, #0
 8001592:	031b      	lsls	r3, r3, #12
 8001594:	e6bc      	b.n	8001310 <__aeabi_dadd+0x29c>
 8001596:	464a      	mov	r2, r9
 8001598:	1bd5      	subs	r5, r2, r7
 800159a:	45a9      	cmp	r9, r5
 800159c:	4189      	sbcs	r1, r1
 800159e:	4662      	mov	r2, ip
 80015a0:	4249      	negs	r1, r1
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	1a5b      	subs	r3, r3, r1
 80015a6:	4698      	mov	r8, r3
 80015a8:	2601      	movs	r6, #1
 80015aa:	e5ae      	b.n	800110a <__aeabi_dadd+0x96>
 80015ac:	464a      	mov	r2, r9
 80015ae:	08d1      	lsrs	r1, r2, #3
 80015b0:	075a      	lsls	r2, r3, #29
 80015b2:	4311      	orrs	r1, r2
 80015b4:	08db      	lsrs	r3, r3, #3
 80015b6:	e6a7      	b.n	8001308 <__aeabi_dadd+0x294>
 80015b8:	4663      	mov	r3, ip
 80015ba:	08f9      	lsrs	r1, r7, #3
 80015bc:	075a      	lsls	r2, r3, #29
 80015be:	4654      	mov	r4, sl
 80015c0:	4311      	orrs	r1, r2
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	e6a0      	b.n	8001308 <__aeabi_dadd+0x294>
 80015c6:	464a      	mov	r2, r9
 80015c8:	4313      	orrs	r3, r2
 80015ca:	001d      	movs	r5, r3
 80015cc:	1e6b      	subs	r3, r5, #1
 80015ce:	419d      	sbcs	r5, r3
 80015d0:	e6c7      	b.n	8001362 <__aeabi_dadd+0x2ee>
 80015d2:	0014      	movs	r4, r2
 80015d4:	001e      	movs	r6, r3
 80015d6:	3c20      	subs	r4, #32
 80015d8:	40e6      	lsrs	r6, r4
 80015da:	2a20      	cmp	r2, #32
 80015dc:	d005      	beq.n	80015ea <__aeabi_dadd+0x576>
 80015de:	2440      	movs	r4, #64	; 0x40
 80015e0:	1aa2      	subs	r2, r4, r2
 80015e2:	4093      	lsls	r3, r2
 80015e4:	464a      	mov	r2, r9
 80015e6:	431a      	orrs	r2, r3
 80015e8:	4691      	mov	r9, r2
 80015ea:	464d      	mov	r5, r9
 80015ec:	1e6b      	subs	r3, r5, #1
 80015ee:	419d      	sbcs	r5, r3
 80015f0:	4335      	orrs	r5, r6
 80015f2:	e778      	b.n	80014e6 <__aeabi_dadd+0x472>
 80015f4:	464a      	mov	r2, r9
 80015f6:	431a      	orrs	r2, r3
 80015f8:	d000      	beq.n	80015fc <__aeabi_dadd+0x588>
 80015fa:	e66b      	b.n	80012d4 <__aeabi_dadd+0x260>
 80015fc:	076b      	lsls	r3, r5, #29
 80015fe:	08f9      	lsrs	r1, r7, #3
 8001600:	4319      	orrs	r1, r3
 8001602:	08eb      	lsrs	r3, r5, #3
 8001604:	e680      	b.n	8001308 <__aeabi_dadd+0x294>
 8001606:	4661      	mov	r1, ip
 8001608:	4339      	orrs	r1, r7
 800160a:	d054      	beq.n	80016b6 <__aeabi_dadd+0x642>
 800160c:	4663      	mov	r3, ip
 800160e:	08f9      	lsrs	r1, r7, #3
 8001610:	075c      	lsls	r4, r3, #29
 8001612:	4321      	orrs	r1, r4
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	0004      	movs	r4, r0
 8001618:	e654      	b.n	80012c4 <__aeabi_dadd+0x250>
 800161a:	464a      	mov	r2, r9
 800161c:	1abd      	subs	r5, r7, r2
 800161e:	42af      	cmp	r7, r5
 8001620:	4189      	sbcs	r1, r1
 8001622:	4662      	mov	r2, ip
 8001624:	4249      	negs	r1, r1
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	1a5b      	subs	r3, r3, r1
 800162a:	4698      	mov	r8, r3
 800162c:	0004      	movs	r4, r0
 800162e:	2601      	movs	r6, #1
 8001630:	e56b      	b.n	800110a <__aeabi_dadd+0x96>
 8001632:	464a      	mov	r2, r9
 8001634:	1bd5      	subs	r5, r2, r7
 8001636:	45a9      	cmp	r9, r5
 8001638:	4189      	sbcs	r1, r1
 800163a:	4662      	mov	r2, ip
 800163c:	4249      	negs	r1, r1
 800163e:	1a9a      	subs	r2, r3, r2
 8001640:	1a52      	subs	r2, r2, r1
 8001642:	4690      	mov	r8, r2
 8001644:	0212      	lsls	r2, r2, #8
 8001646:	d532      	bpl.n	80016ae <__aeabi_dadd+0x63a>
 8001648:	464a      	mov	r2, r9
 800164a:	1abd      	subs	r5, r7, r2
 800164c:	42af      	cmp	r7, r5
 800164e:	4189      	sbcs	r1, r1
 8001650:	4662      	mov	r2, ip
 8001652:	4249      	negs	r1, r1
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	1a5b      	subs	r3, r3, r1
 8001658:	4698      	mov	r8, r3
 800165a:	0004      	movs	r4, r0
 800165c:	e584      	b.n	8001168 <__aeabi_dadd+0xf4>
 800165e:	4663      	mov	r3, ip
 8001660:	08f9      	lsrs	r1, r7, #3
 8001662:	075a      	lsls	r2, r3, #29
 8001664:	4311      	orrs	r1, r2
 8001666:	08db      	lsrs	r3, r3, #3
 8001668:	e64e      	b.n	8001308 <__aeabi_dadd+0x294>
 800166a:	08f9      	lsrs	r1, r7, #3
 800166c:	0768      	lsls	r0, r5, #29
 800166e:	4301      	orrs	r1, r0
 8001670:	08eb      	lsrs	r3, r5, #3
 8001672:	e624      	b.n	80012be <__aeabi_dadd+0x24a>
 8001674:	4662      	mov	r2, ip
 8001676:	433a      	orrs	r2, r7
 8001678:	d100      	bne.n	800167c <__aeabi_dadd+0x608>
 800167a:	e698      	b.n	80013ae <__aeabi_dadd+0x33a>
 800167c:	464a      	mov	r2, r9
 800167e:	08d1      	lsrs	r1, r2, #3
 8001680:	075a      	lsls	r2, r3, #29
 8001682:	4311      	orrs	r1, r2
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	031b      	lsls	r3, r3, #12
 800168a:	421a      	tst	r2, r3
 800168c:	d008      	beq.n	80016a0 <__aeabi_dadd+0x62c>
 800168e:	4660      	mov	r0, ip
 8001690:	08c5      	lsrs	r5, r0, #3
 8001692:	421d      	tst	r5, r3
 8001694:	d104      	bne.n	80016a0 <__aeabi_dadd+0x62c>
 8001696:	4654      	mov	r4, sl
 8001698:	002a      	movs	r2, r5
 800169a:	08f9      	lsrs	r1, r7, #3
 800169c:	0743      	lsls	r3, r0, #29
 800169e:	4319      	orrs	r1, r3
 80016a0:	0f4b      	lsrs	r3, r1, #29
 80016a2:	00c9      	lsls	r1, r1, #3
 80016a4:	075b      	lsls	r3, r3, #29
 80016a6:	08c9      	lsrs	r1, r1, #3
 80016a8:	4319      	orrs	r1, r3
 80016aa:	0013      	movs	r3, r2
 80016ac:	e62c      	b.n	8001308 <__aeabi_dadd+0x294>
 80016ae:	4641      	mov	r1, r8
 80016b0:	4329      	orrs	r1, r5
 80016b2:	d000      	beq.n	80016b6 <__aeabi_dadd+0x642>
 80016b4:	e5fa      	b.n	80012ac <__aeabi_dadd+0x238>
 80016b6:	2300      	movs	r3, #0
 80016b8:	000a      	movs	r2, r1
 80016ba:	2400      	movs	r4, #0
 80016bc:	e602      	b.n	80012c4 <__aeabi_dadd+0x250>
 80016be:	076b      	lsls	r3, r5, #29
 80016c0:	08f9      	lsrs	r1, r7, #3
 80016c2:	4319      	orrs	r1, r3
 80016c4:	08eb      	lsrs	r3, r5, #3
 80016c6:	e5fd      	b.n	80012c4 <__aeabi_dadd+0x250>
 80016c8:	4663      	mov	r3, ip
 80016ca:	08f9      	lsrs	r1, r7, #3
 80016cc:	075b      	lsls	r3, r3, #29
 80016ce:	4319      	orrs	r1, r3
 80016d0:	4663      	mov	r3, ip
 80016d2:	0004      	movs	r4, r0
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	e617      	b.n	8001308 <__aeabi_dadd+0x294>
 80016d8:	003d      	movs	r5, r7
 80016da:	444d      	add	r5, r9
 80016dc:	4463      	add	r3, ip
 80016de:	454d      	cmp	r5, r9
 80016e0:	4189      	sbcs	r1, r1
 80016e2:	4698      	mov	r8, r3
 80016e4:	4249      	negs	r1, r1
 80016e6:	4488      	add	r8, r1
 80016e8:	4643      	mov	r3, r8
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	d400      	bmi.n	80016f0 <__aeabi_dadd+0x67c>
 80016ee:	e5dd      	b.n	80012ac <__aeabi_dadd+0x238>
 80016f0:	4642      	mov	r2, r8
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <__aeabi_dadd+0x6d0>)
 80016f4:	2601      	movs	r6, #1
 80016f6:	401a      	ands	r2, r3
 80016f8:	4690      	mov	r8, r2
 80016fa:	e5d7      	b.n	80012ac <__aeabi_dadd+0x238>
 80016fc:	0010      	movs	r0, r2
 80016fe:	001e      	movs	r6, r3
 8001700:	3820      	subs	r0, #32
 8001702:	40c6      	lsrs	r6, r0
 8001704:	2a20      	cmp	r2, #32
 8001706:	d005      	beq.n	8001714 <__aeabi_dadd+0x6a0>
 8001708:	2040      	movs	r0, #64	; 0x40
 800170a:	1a82      	subs	r2, r0, r2
 800170c:	4093      	lsls	r3, r2
 800170e:	464a      	mov	r2, r9
 8001710:	431a      	orrs	r2, r3
 8001712:	4691      	mov	r9, r2
 8001714:	464d      	mov	r5, r9
 8001716:	1e6b      	subs	r3, r5, #1
 8001718:	419d      	sbcs	r5, r3
 800171a:	4335      	orrs	r5, r6
 800171c:	e621      	b.n	8001362 <__aeabi_dadd+0x2ee>
 800171e:	0002      	movs	r2, r0
 8001720:	2300      	movs	r3, #0
 8001722:	2100      	movs	r1, #0
 8001724:	e540      	b.n	80011a8 <__aeabi_dadd+0x134>
 8001726:	464a      	mov	r2, r9
 8001728:	19d5      	adds	r5, r2, r7
 800172a:	42bd      	cmp	r5, r7
 800172c:	4189      	sbcs	r1, r1
 800172e:	4463      	add	r3, ip
 8001730:	4698      	mov	r8, r3
 8001732:	4249      	negs	r1, r1
 8001734:	4488      	add	r8, r1
 8001736:	e5b3      	b.n	80012a0 <__aeabi_dadd+0x22c>
 8001738:	2100      	movs	r1, #0
 800173a:	4a01      	ldr	r2, [pc, #4]	; (8001740 <__aeabi_dadd+0x6cc>)
 800173c:	000b      	movs	r3, r1
 800173e:	e533      	b.n	80011a8 <__aeabi_dadd+0x134>
 8001740:	000007ff 	.word	0x000007ff
 8001744:	ff7fffff 	.word	0xff7fffff

08001748 <__aeabi_ddiv>:
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	4657      	mov	r7, sl
 800174c:	464e      	mov	r6, r9
 800174e:	4645      	mov	r5, r8
 8001750:	46de      	mov	lr, fp
 8001752:	b5e0      	push	{r5, r6, r7, lr}
 8001754:	4681      	mov	r9, r0
 8001756:	0005      	movs	r5, r0
 8001758:	030c      	lsls	r4, r1, #12
 800175a:	0048      	lsls	r0, r1, #1
 800175c:	4692      	mov	sl, r2
 800175e:	001f      	movs	r7, r3
 8001760:	b085      	sub	sp, #20
 8001762:	0b24      	lsrs	r4, r4, #12
 8001764:	0d40      	lsrs	r0, r0, #21
 8001766:	0fce      	lsrs	r6, r1, #31
 8001768:	2800      	cmp	r0, #0
 800176a:	d059      	beq.n	8001820 <__aeabi_ddiv+0xd8>
 800176c:	4b87      	ldr	r3, [pc, #540]	; (800198c <__aeabi_ddiv+0x244>)
 800176e:	4298      	cmp	r0, r3
 8001770:	d100      	bne.n	8001774 <__aeabi_ddiv+0x2c>
 8001772:	e098      	b.n	80018a6 <__aeabi_ddiv+0x15e>
 8001774:	0f6b      	lsrs	r3, r5, #29
 8001776:	00e4      	lsls	r4, r4, #3
 8001778:	431c      	orrs	r4, r3
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	041b      	lsls	r3, r3, #16
 800177e:	4323      	orrs	r3, r4
 8001780:	4698      	mov	r8, r3
 8001782:	4b83      	ldr	r3, [pc, #524]	; (8001990 <__aeabi_ddiv+0x248>)
 8001784:	00ed      	lsls	r5, r5, #3
 8001786:	469b      	mov	fp, r3
 8001788:	2300      	movs	r3, #0
 800178a:	4699      	mov	r9, r3
 800178c:	4483      	add	fp, r0
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	033c      	lsls	r4, r7, #12
 8001792:	007b      	lsls	r3, r7, #1
 8001794:	4650      	mov	r0, sl
 8001796:	0b24      	lsrs	r4, r4, #12
 8001798:	0d5b      	lsrs	r3, r3, #21
 800179a:	0fff      	lsrs	r7, r7, #31
 800179c:	2b00      	cmp	r3, #0
 800179e:	d067      	beq.n	8001870 <__aeabi_ddiv+0x128>
 80017a0:	4a7a      	ldr	r2, [pc, #488]	; (800198c <__aeabi_ddiv+0x244>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d018      	beq.n	80017d8 <__aeabi_ddiv+0x90>
 80017a6:	497a      	ldr	r1, [pc, #488]	; (8001990 <__aeabi_ddiv+0x248>)
 80017a8:	0f42      	lsrs	r2, r0, #29
 80017aa:	468c      	mov	ip, r1
 80017ac:	00e4      	lsls	r4, r4, #3
 80017ae:	4659      	mov	r1, fp
 80017b0:	4314      	orrs	r4, r2
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	4463      	add	r3, ip
 80017b6:	0412      	lsls	r2, r2, #16
 80017b8:	1acb      	subs	r3, r1, r3
 80017ba:	4314      	orrs	r4, r2
 80017bc:	469b      	mov	fp, r3
 80017be:	00c2      	lsls	r2, r0, #3
 80017c0:	2000      	movs	r0, #0
 80017c2:	0033      	movs	r3, r6
 80017c4:	407b      	eors	r3, r7
 80017c6:	469a      	mov	sl, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	d900      	bls.n	80017d0 <__aeabi_ddiv+0x88>
 80017ce:	e0ef      	b.n	80019b0 <__aeabi_ddiv+0x268>
 80017d0:	4970      	ldr	r1, [pc, #448]	; (8001994 <__aeabi_ddiv+0x24c>)
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	58cb      	ldr	r3, [r1, r3]
 80017d6:	469f      	mov	pc, r3
 80017d8:	4b6f      	ldr	r3, [pc, #444]	; (8001998 <__aeabi_ddiv+0x250>)
 80017da:	4652      	mov	r2, sl
 80017dc:	469c      	mov	ip, r3
 80017de:	4322      	orrs	r2, r4
 80017e0:	44e3      	add	fp, ip
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	d000      	beq.n	80017e8 <__aeabi_ddiv+0xa0>
 80017e6:	e095      	b.n	8001914 <__aeabi_ddiv+0x1cc>
 80017e8:	4649      	mov	r1, r9
 80017ea:	2302      	movs	r3, #2
 80017ec:	4319      	orrs	r1, r3
 80017ee:	4689      	mov	r9, r1
 80017f0:	2400      	movs	r4, #0
 80017f2:	2002      	movs	r0, #2
 80017f4:	e7e5      	b.n	80017c2 <__aeabi_ddiv+0x7a>
 80017f6:	2300      	movs	r3, #0
 80017f8:	2400      	movs	r4, #0
 80017fa:	2500      	movs	r5, #0
 80017fc:	4652      	mov	r2, sl
 80017fe:	051b      	lsls	r3, r3, #20
 8001800:	4323      	orrs	r3, r4
 8001802:	07d2      	lsls	r2, r2, #31
 8001804:	4313      	orrs	r3, r2
 8001806:	0028      	movs	r0, r5
 8001808:	0019      	movs	r1, r3
 800180a:	b005      	add	sp, #20
 800180c:	bcf0      	pop	{r4, r5, r6, r7}
 800180e:	46bb      	mov	fp, r7
 8001810:	46b2      	mov	sl, r6
 8001812:	46a9      	mov	r9, r5
 8001814:	46a0      	mov	r8, r4
 8001816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001818:	2400      	movs	r4, #0
 800181a:	2500      	movs	r5, #0
 800181c:	4b5b      	ldr	r3, [pc, #364]	; (800198c <__aeabi_ddiv+0x244>)
 800181e:	e7ed      	b.n	80017fc <__aeabi_ddiv+0xb4>
 8001820:	464b      	mov	r3, r9
 8001822:	4323      	orrs	r3, r4
 8001824:	4698      	mov	r8, r3
 8001826:	d100      	bne.n	800182a <__aeabi_ddiv+0xe2>
 8001828:	e089      	b.n	800193e <__aeabi_ddiv+0x1f6>
 800182a:	2c00      	cmp	r4, #0
 800182c:	d100      	bne.n	8001830 <__aeabi_ddiv+0xe8>
 800182e:	e1e0      	b.n	8001bf2 <__aeabi_ddiv+0x4aa>
 8001830:	0020      	movs	r0, r4
 8001832:	f001 fa61 	bl	8002cf8 <__clzsi2>
 8001836:	0001      	movs	r1, r0
 8001838:	0002      	movs	r2, r0
 800183a:	390b      	subs	r1, #11
 800183c:	231d      	movs	r3, #29
 800183e:	1a5b      	subs	r3, r3, r1
 8001840:	4649      	mov	r1, r9
 8001842:	0010      	movs	r0, r2
 8001844:	40d9      	lsrs	r1, r3
 8001846:	3808      	subs	r0, #8
 8001848:	4084      	lsls	r4, r0
 800184a:	000b      	movs	r3, r1
 800184c:	464d      	mov	r5, r9
 800184e:	4323      	orrs	r3, r4
 8001850:	4698      	mov	r8, r3
 8001852:	4085      	lsls	r5, r0
 8001854:	4851      	ldr	r0, [pc, #324]	; (800199c <__aeabi_ddiv+0x254>)
 8001856:	033c      	lsls	r4, r7, #12
 8001858:	1a83      	subs	r3, r0, r2
 800185a:	469b      	mov	fp, r3
 800185c:	2300      	movs	r3, #0
 800185e:	4699      	mov	r9, r3
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	007b      	lsls	r3, r7, #1
 8001864:	4650      	mov	r0, sl
 8001866:	0b24      	lsrs	r4, r4, #12
 8001868:	0d5b      	lsrs	r3, r3, #21
 800186a:	0fff      	lsrs	r7, r7, #31
 800186c:	2b00      	cmp	r3, #0
 800186e:	d197      	bne.n	80017a0 <__aeabi_ddiv+0x58>
 8001870:	4652      	mov	r2, sl
 8001872:	4322      	orrs	r2, r4
 8001874:	d055      	beq.n	8001922 <__aeabi_ddiv+0x1da>
 8001876:	2c00      	cmp	r4, #0
 8001878:	d100      	bne.n	800187c <__aeabi_ddiv+0x134>
 800187a:	e1ca      	b.n	8001c12 <__aeabi_ddiv+0x4ca>
 800187c:	0020      	movs	r0, r4
 800187e:	f001 fa3b 	bl	8002cf8 <__clzsi2>
 8001882:	0002      	movs	r2, r0
 8001884:	3a0b      	subs	r2, #11
 8001886:	231d      	movs	r3, #29
 8001888:	0001      	movs	r1, r0
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	4652      	mov	r2, sl
 800188e:	3908      	subs	r1, #8
 8001890:	40da      	lsrs	r2, r3
 8001892:	408c      	lsls	r4, r1
 8001894:	4314      	orrs	r4, r2
 8001896:	4652      	mov	r2, sl
 8001898:	408a      	lsls	r2, r1
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <__aeabi_ddiv+0x258>)
 800189c:	4458      	add	r0, fp
 800189e:	469b      	mov	fp, r3
 80018a0:	4483      	add	fp, r0
 80018a2:	2000      	movs	r0, #0
 80018a4:	e78d      	b.n	80017c2 <__aeabi_ddiv+0x7a>
 80018a6:	464b      	mov	r3, r9
 80018a8:	4323      	orrs	r3, r4
 80018aa:	4698      	mov	r8, r3
 80018ac:	d140      	bne.n	8001930 <__aeabi_ddiv+0x1e8>
 80018ae:	2308      	movs	r3, #8
 80018b0:	4699      	mov	r9, r3
 80018b2:	3b06      	subs	r3, #6
 80018b4:	2500      	movs	r5, #0
 80018b6:	4683      	mov	fp, r0
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	e769      	b.n	8001790 <__aeabi_ddiv+0x48>
 80018bc:	46b2      	mov	sl, r6
 80018be:	9b00      	ldr	r3, [sp, #0]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d0a9      	beq.n	8001818 <__aeabi_ddiv+0xd0>
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d100      	bne.n	80018ca <__aeabi_ddiv+0x182>
 80018c8:	e211      	b.n	8001cee <__aeabi_ddiv+0x5a6>
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d093      	beq.n	80017f6 <__aeabi_ddiv+0xae>
 80018ce:	4a35      	ldr	r2, [pc, #212]	; (80019a4 <__aeabi_ddiv+0x25c>)
 80018d0:	445a      	add	r2, fp
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	dc00      	bgt.n	80018d8 <__aeabi_ddiv+0x190>
 80018d6:	e13c      	b.n	8001b52 <__aeabi_ddiv+0x40a>
 80018d8:	076b      	lsls	r3, r5, #29
 80018da:	d000      	beq.n	80018de <__aeabi_ddiv+0x196>
 80018dc:	e1a7      	b.n	8001c2e <__aeabi_ddiv+0x4e6>
 80018de:	08ed      	lsrs	r5, r5, #3
 80018e0:	4643      	mov	r3, r8
 80018e2:	01db      	lsls	r3, r3, #7
 80018e4:	d506      	bpl.n	80018f4 <__aeabi_ddiv+0x1ac>
 80018e6:	4642      	mov	r2, r8
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <__aeabi_ddiv+0x260>)
 80018ea:	401a      	ands	r2, r3
 80018ec:	4690      	mov	r8, r2
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	445a      	add	r2, fp
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <__aeabi_ddiv+0x264>)
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dc8e      	bgt.n	8001818 <__aeabi_ddiv+0xd0>
 80018fa:	4643      	mov	r3, r8
 80018fc:	0552      	lsls	r2, r2, #21
 80018fe:	0758      	lsls	r0, r3, #29
 8001900:	025c      	lsls	r4, r3, #9
 8001902:	4305      	orrs	r5, r0
 8001904:	0b24      	lsrs	r4, r4, #12
 8001906:	0d53      	lsrs	r3, r2, #21
 8001908:	e778      	b.n	80017fc <__aeabi_ddiv+0xb4>
 800190a:	46ba      	mov	sl, r7
 800190c:	46a0      	mov	r8, r4
 800190e:	0015      	movs	r5, r2
 8001910:	9000      	str	r0, [sp, #0]
 8001912:	e7d4      	b.n	80018be <__aeabi_ddiv+0x176>
 8001914:	464a      	mov	r2, r9
 8001916:	2303      	movs	r3, #3
 8001918:	431a      	orrs	r2, r3
 800191a:	4691      	mov	r9, r2
 800191c:	2003      	movs	r0, #3
 800191e:	4652      	mov	r2, sl
 8001920:	e74f      	b.n	80017c2 <__aeabi_ddiv+0x7a>
 8001922:	4649      	mov	r1, r9
 8001924:	2301      	movs	r3, #1
 8001926:	4319      	orrs	r1, r3
 8001928:	4689      	mov	r9, r1
 800192a:	2400      	movs	r4, #0
 800192c:	2001      	movs	r0, #1
 800192e:	e748      	b.n	80017c2 <__aeabi_ddiv+0x7a>
 8001930:	230c      	movs	r3, #12
 8001932:	4699      	mov	r9, r3
 8001934:	3b09      	subs	r3, #9
 8001936:	46a0      	mov	r8, r4
 8001938:	4683      	mov	fp, r0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	e728      	b.n	8001790 <__aeabi_ddiv+0x48>
 800193e:	2304      	movs	r3, #4
 8001940:	4699      	mov	r9, r3
 8001942:	2300      	movs	r3, #0
 8001944:	469b      	mov	fp, r3
 8001946:	3301      	adds	r3, #1
 8001948:	2500      	movs	r5, #0
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	e720      	b.n	8001790 <__aeabi_ddiv+0x48>
 800194e:	2300      	movs	r3, #0
 8001950:	2480      	movs	r4, #128	; 0x80
 8001952:	469a      	mov	sl, r3
 8001954:	2500      	movs	r5, #0
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <__aeabi_ddiv+0x244>)
 8001958:	0324      	lsls	r4, r4, #12
 800195a:	e74f      	b.n	80017fc <__aeabi_ddiv+0xb4>
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	4641      	mov	r1, r8
 8001960:	031b      	lsls	r3, r3, #12
 8001962:	4219      	tst	r1, r3
 8001964:	d008      	beq.n	8001978 <__aeabi_ddiv+0x230>
 8001966:	421c      	tst	r4, r3
 8001968:	d106      	bne.n	8001978 <__aeabi_ddiv+0x230>
 800196a:	431c      	orrs	r4, r3
 800196c:	0324      	lsls	r4, r4, #12
 800196e:	46ba      	mov	sl, r7
 8001970:	0015      	movs	r5, r2
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <__aeabi_ddiv+0x244>)
 8001974:	0b24      	lsrs	r4, r4, #12
 8001976:	e741      	b.n	80017fc <__aeabi_ddiv+0xb4>
 8001978:	2480      	movs	r4, #128	; 0x80
 800197a:	4643      	mov	r3, r8
 800197c:	0324      	lsls	r4, r4, #12
 800197e:	431c      	orrs	r4, r3
 8001980:	0324      	lsls	r4, r4, #12
 8001982:	46b2      	mov	sl, r6
 8001984:	4b01      	ldr	r3, [pc, #4]	; (800198c <__aeabi_ddiv+0x244>)
 8001986:	0b24      	lsrs	r4, r4, #12
 8001988:	e738      	b.n	80017fc <__aeabi_ddiv+0xb4>
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	000007ff 	.word	0x000007ff
 8001990:	fffffc01 	.word	0xfffffc01
 8001994:	0801f390 	.word	0x0801f390
 8001998:	fffff801 	.word	0xfffff801
 800199c:	fffffc0d 	.word	0xfffffc0d
 80019a0:	000003f3 	.word	0x000003f3
 80019a4:	000003ff 	.word	0x000003ff
 80019a8:	feffffff 	.word	0xfeffffff
 80019ac:	000007fe 	.word	0x000007fe
 80019b0:	4544      	cmp	r4, r8
 80019b2:	d200      	bcs.n	80019b6 <__aeabi_ddiv+0x26e>
 80019b4:	e116      	b.n	8001be4 <__aeabi_ddiv+0x49c>
 80019b6:	d100      	bne.n	80019ba <__aeabi_ddiv+0x272>
 80019b8:	e111      	b.n	8001bde <__aeabi_ddiv+0x496>
 80019ba:	2301      	movs	r3, #1
 80019bc:	425b      	negs	r3, r3
 80019be:	469c      	mov	ip, r3
 80019c0:	002e      	movs	r6, r5
 80019c2:	4640      	mov	r0, r8
 80019c4:	2500      	movs	r5, #0
 80019c6:	44e3      	add	fp, ip
 80019c8:	0223      	lsls	r3, r4, #8
 80019ca:	0e14      	lsrs	r4, r2, #24
 80019cc:	431c      	orrs	r4, r3
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	4699      	mov	r9, r3
 80019d2:	0423      	lsls	r3, r4, #16
 80019d4:	0c1f      	lsrs	r7, r3, #16
 80019d6:	0212      	lsls	r2, r2, #8
 80019d8:	4649      	mov	r1, r9
 80019da:	9200      	str	r2, [sp, #0]
 80019dc:	9701      	str	r7, [sp, #4]
 80019de:	f7fe fc21 	bl	8000224 <__aeabi_uidivmod>
 80019e2:	0002      	movs	r2, r0
 80019e4:	437a      	muls	r2, r7
 80019e6:	040b      	lsls	r3, r1, #16
 80019e8:	0c31      	lsrs	r1, r6, #16
 80019ea:	4680      	mov	r8, r0
 80019ec:	4319      	orrs	r1, r3
 80019ee:	428a      	cmp	r2, r1
 80019f0:	d90b      	bls.n	8001a0a <__aeabi_ddiv+0x2c2>
 80019f2:	2301      	movs	r3, #1
 80019f4:	425b      	negs	r3, r3
 80019f6:	469c      	mov	ip, r3
 80019f8:	1909      	adds	r1, r1, r4
 80019fa:	44e0      	add	r8, ip
 80019fc:	428c      	cmp	r4, r1
 80019fe:	d804      	bhi.n	8001a0a <__aeabi_ddiv+0x2c2>
 8001a00:	428a      	cmp	r2, r1
 8001a02:	d902      	bls.n	8001a0a <__aeabi_ddiv+0x2c2>
 8001a04:	1e83      	subs	r3, r0, #2
 8001a06:	4698      	mov	r8, r3
 8001a08:	1909      	adds	r1, r1, r4
 8001a0a:	1a88      	subs	r0, r1, r2
 8001a0c:	4649      	mov	r1, r9
 8001a0e:	f7fe fc09 	bl	8000224 <__aeabi_uidivmod>
 8001a12:	0409      	lsls	r1, r1, #16
 8001a14:	468c      	mov	ip, r1
 8001a16:	0431      	lsls	r1, r6, #16
 8001a18:	4666      	mov	r6, ip
 8001a1a:	9a01      	ldr	r2, [sp, #4]
 8001a1c:	0c09      	lsrs	r1, r1, #16
 8001a1e:	4342      	muls	r2, r0
 8001a20:	0003      	movs	r3, r0
 8001a22:	4331      	orrs	r1, r6
 8001a24:	428a      	cmp	r2, r1
 8001a26:	d904      	bls.n	8001a32 <__aeabi_ddiv+0x2ea>
 8001a28:	1909      	adds	r1, r1, r4
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	428c      	cmp	r4, r1
 8001a2e:	d800      	bhi.n	8001a32 <__aeabi_ddiv+0x2ea>
 8001a30:	e111      	b.n	8001c56 <__aeabi_ddiv+0x50e>
 8001a32:	1a89      	subs	r1, r1, r2
 8001a34:	4642      	mov	r2, r8
 8001a36:	9e00      	ldr	r6, [sp, #0]
 8001a38:	0412      	lsls	r2, r2, #16
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	0c33      	lsrs	r3, r6, #16
 8001a3e:	001f      	movs	r7, r3
 8001a40:	0c10      	lsrs	r0, r2, #16
 8001a42:	4690      	mov	r8, r2
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	0413      	lsls	r3, r2, #16
 8001a48:	0432      	lsls	r2, r6, #16
 8001a4a:	0c16      	lsrs	r6, r2, #16
 8001a4c:	0032      	movs	r2, r6
 8001a4e:	0c1b      	lsrs	r3, r3, #16
 8001a50:	435a      	muls	r2, r3
 8001a52:	9603      	str	r6, [sp, #12]
 8001a54:	437b      	muls	r3, r7
 8001a56:	4346      	muls	r6, r0
 8001a58:	4378      	muls	r0, r7
 8001a5a:	0c17      	lsrs	r7, r2, #16
 8001a5c:	46bc      	mov	ip, r7
 8001a5e:	199b      	adds	r3, r3, r6
 8001a60:	4463      	add	r3, ip
 8001a62:	429e      	cmp	r6, r3
 8001a64:	d903      	bls.n	8001a6e <__aeabi_ddiv+0x326>
 8001a66:	2680      	movs	r6, #128	; 0x80
 8001a68:	0276      	lsls	r6, r6, #9
 8001a6a:	46b4      	mov	ip, r6
 8001a6c:	4460      	add	r0, ip
 8001a6e:	0c1e      	lsrs	r6, r3, #16
 8001a70:	1830      	adds	r0, r6, r0
 8001a72:	0416      	lsls	r6, r2, #16
 8001a74:	041b      	lsls	r3, r3, #16
 8001a76:	0c36      	lsrs	r6, r6, #16
 8001a78:	199e      	adds	r6, r3, r6
 8001a7a:	4281      	cmp	r1, r0
 8001a7c:	d200      	bcs.n	8001a80 <__aeabi_ddiv+0x338>
 8001a7e:	e09c      	b.n	8001bba <__aeabi_ddiv+0x472>
 8001a80:	d100      	bne.n	8001a84 <__aeabi_ddiv+0x33c>
 8001a82:	e097      	b.n	8001bb4 <__aeabi_ddiv+0x46c>
 8001a84:	1bae      	subs	r6, r5, r6
 8001a86:	1a09      	subs	r1, r1, r0
 8001a88:	42b5      	cmp	r5, r6
 8001a8a:	4180      	sbcs	r0, r0
 8001a8c:	4240      	negs	r0, r0
 8001a8e:	1a08      	subs	r0, r1, r0
 8001a90:	4284      	cmp	r4, r0
 8001a92:	d100      	bne.n	8001a96 <__aeabi_ddiv+0x34e>
 8001a94:	e111      	b.n	8001cba <__aeabi_ddiv+0x572>
 8001a96:	4649      	mov	r1, r9
 8001a98:	f7fe fbc4 	bl	8000224 <__aeabi_uidivmod>
 8001a9c:	9a01      	ldr	r2, [sp, #4]
 8001a9e:	040b      	lsls	r3, r1, #16
 8001aa0:	4342      	muls	r2, r0
 8001aa2:	0c31      	lsrs	r1, r6, #16
 8001aa4:	0005      	movs	r5, r0
 8001aa6:	4319      	orrs	r1, r3
 8001aa8:	428a      	cmp	r2, r1
 8001aaa:	d907      	bls.n	8001abc <__aeabi_ddiv+0x374>
 8001aac:	1909      	adds	r1, r1, r4
 8001aae:	3d01      	subs	r5, #1
 8001ab0:	428c      	cmp	r4, r1
 8001ab2:	d803      	bhi.n	8001abc <__aeabi_ddiv+0x374>
 8001ab4:	428a      	cmp	r2, r1
 8001ab6:	d901      	bls.n	8001abc <__aeabi_ddiv+0x374>
 8001ab8:	1e85      	subs	r5, r0, #2
 8001aba:	1909      	adds	r1, r1, r4
 8001abc:	1a88      	subs	r0, r1, r2
 8001abe:	4649      	mov	r1, r9
 8001ac0:	f7fe fbb0 	bl	8000224 <__aeabi_uidivmod>
 8001ac4:	0409      	lsls	r1, r1, #16
 8001ac6:	468c      	mov	ip, r1
 8001ac8:	0431      	lsls	r1, r6, #16
 8001aca:	4666      	mov	r6, ip
 8001acc:	9a01      	ldr	r2, [sp, #4]
 8001ace:	0c09      	lsrs	r1, r1, #16
 8001ad0:	4342      	muls	r2, r0
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	4331      	orrs	r1, r6
 8001ad6:	428a      	cmp	r2, r1
 8001ad8:	d907      	bls.n	8001aea <__aeabi_ddiv+0x3a2>
 8001ada:	1909      	adds	r1, r1, r4
 8001adc:	3b01      	subs	r3, #1
 8001ade:	428c      	cmp	r4, r1
 8001ae0:	d803      	bhi.n	8001aea <__aeabi_ddiv+0x3a2>
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d901      	bls.n	8001aea <__aeabi_ddiv+0x3a2>
 8001ae6:	1e83      	subs	r3, r0, #2
 8001ae8:	1909      	adds	r1, r1, r4
 8001aea:	9e03      	ldr	r6, [sp, #12]
 8001aec:	1a89      	subs	r1, r1, r2
 8001aee:	0032      	movs	r2, r6
 8001af0:	042d      	lsls	r5, r5, #16
 8001af2:	431d      	orrs	r5, r3
 8001af4:	9f02      	ldr	r7, [sp, #8]
 8001af6:	042b      	lsls	r3, r5, #16
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	435a      	muls	r2, r3
 8001afc:	437b      	muls	r3, r7
 8001afe:	469c      	mov	ip, r3
 8001b00:	0c28      	lsrs	r0, r5, #16
 8001b02:	4346      	muls	r6, r0
 8001b04:	0c13      	lsrs	r3, r2, #16
 8001b06:	44b4      	add	ip, r6
 8001b08:	4463      	add	r3, ip
 8001b0a:	4378      	muls	r0, r7
 8001b0c:	429e      	cmp	r6, r3
 8001b0e:	d903      	bls.n	8001b18 <__aeabi_ddiv+0x3d0>
 8001b10:	2680      	movs	r6, #128	; 0x80
 8001b12:	0276      	lsls	r6, r6, #9
 8001b14:	46b4      	mov	ip, r6
 8001b16:	4460      	add	r0, ip
 8001b18:	0c1e      	lsrs	r6, r3, #16
 8001b1a:	0412      	lsls	r2, r2, #16
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	0c12      	lsrs	r2, r2, #16
 8001b20:	1830      	adds	r0, r6, r0
 8001b22:	189b      	adds	r3, r3, r2
 8001b24:	4281      	cmp	r1, r0
 8001b26:	d306      	bcc.n	8001b36 <__aeabi_ddiv+0x3ee>
 8001b28:	d002      	beq.n	8001b30 <__aeabi_ddiv+0x3e8>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	431d      	orrs	r5, r3
 8001b2e:	e6ce      	b.n	80018ce <__aeabi_ddiv+0x186>
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x3ee>
 8001b34:	e6cb      	b.n	80018ce <__aeabi_ddiv+0x186>
 8001b36:	1861      	adds	r1, r4, r1
 8001b38:	1e6e      	subs	r6, r5, #1
 8001b3a:	42a1      	cmp	r1, r4
 8001b3c:	d200      	bcs.n	8001b40 <__aeabi_ddiv+0x3f8>
 8001b3e:	e0a4      	b.n	8001c8a <__aeabi_ddiv+0x542>
 8001b40:	4281      	cmp	r1, r0
 8001b42:	d200      	bcs.n	8001b46 <__aeabi_ddiv+0x3fe>
 8001b44:	e0c9      	b.n	8001cda <__aeabi_ddiv+0x592>
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x402>
 8001b48:	e0d9      	b.n	8001cfe <__aeabi_ddiv+0x5b6>
 8001b4a:	0035      	movs	r5, r6
 8001b4c:	e7ed      	b.n	8001b2a <__aeabi_ddiv+0x3e2>
 8001b4e:	2501      	movs	r5, #1
 8001b50:	426d      	negs	r5, r5
 8001b52:	2101      	movs	r1, #1
 8001b54:	1a89      	subs	r1, r1, r2
 8001b56:	2938      	cmp	r1, #56	; 0x38
 8001b58:	dd00      	ble.n	8001b5c <__aeabi_ddiv+0x414>
 8001b5a:	e64c      	b.n	80017f6 <__aeabi_ddiv+0xae>
 8001b5c:	291f      	cmp	r1, #31
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x41a>
 8001b60:	e07f      	b.n	8001c62 <__aeabi_ddiv+0x51a>
 8001b62:	231f      	movs	r3, #31
 8001b64:	425b      	negs	r3, r3
 8001b66:	1a9a      	subs	r2, r3, r2
 8001b68:	4643      	mov	r3, r8
 8001b6a:	40d3      	lsrs	r3, r2
 8001b6c:	2920      	cmp	r1, #32
 8001b6e:	d004      	beq.n	8001b7a <__aeabi_ddiv+0x432>
 8001b70:	4644      	mov	r4, r8
 8001b72:	4a65      	ldr	r2, [pc, #404]	; (8001d08 <__aeabi_ddiv+0x5c0>)
 8001b74:	445a      	add	r2, fp
 8001b76:	4094      	lsls	r4, r2
 8001b78:	4325      	orrs	r5, r4
 8001b7a:	1e6a      	subs	r2, r5, #1
 8001b7c:	4195      	sbcs	r5, r2
 8001b7e:	2207      	movs	r2, #7
 8001b80:	432b      	orrs	r3, r5
 8001b82:	0015      	movs	r5, r2
 8001b84:	2400      	movs	r4, #0
 8001b86:	401d      	ands	r5, r3
 8001b88:	421a      	tst	r2, r3
 8001b8a:	d100      	bne.n	8001b8e <__aeabi_ddiv+0x446>
 8001b8c:	e0a1      	b.n	8001cd2 <__aeabi_ddiv+0x58a>
 8001b8e:	220f      	movs	r2, #15
 8001b90:	2400      	movs	r4, #0
 8001b92:	401a      	ands	r2, r3
 8001b94:	2a04      	cmp	r2, #4
 8001b96:	d100      	bne.n	8001b9a <__aeabi_ddiv+0x452>
 8001b98:	e098      	b.n	8001ccc <__aeabi_ddiv+0x584>
 8001b9a:	1d1a      	adds	r2, r3, #4
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	419b      	sbcs	r3, r3
 8001ba0:	425b      	negs	r3, r3
 8001ba2:	18e4      	adds	r4, r4, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	0222      	lsls	r2, r4, #8
 8001ba8:	d400      	bmi.n	8001bac <__aeabi_ddiv+0x464>
 8001baa:	e08f      	b.n	8001ccc <__aeabi_ddiv+0x584>
 8001bac:	2301      	movs	r3, #1
 8001bae:	2400      	movs	r4, #0
 8001bb0:	2500      	movs	r5, #0
 8001bb2:	e623      	b.n	80017fc <__aeabi_ddiv+0xb4>
 8001bb4:	42b5      	cmp	r5, r6
 8001bb6:	d300      	bcc.n	8001bba <__aeabi_ddiv+0x472>
 8001bb8:	e764      	b.n	8001a84 <__aeabi_ddiv+0x33c>
 8001bba:	4643      	mov	r3, r8
 8001bbc:	1e5a      	subs	r2, r3, #1
 8001bbe:	9b00      	ldr	r3, [sp, #0]
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	4465      	add	r5, ip
 8001bc4:	001f      	movs	r7, r3
 8001bc6:	429d      	cmp	r5, r3
 8001bc8:	419b      	sbcs	r3, r3
 8001bca:	425b      	negs	r3, r3
 8001bcc:	191b      	adds	r3, r3, r4
 8001bce:	18c9      	adds	r1, r1, r3
 8001bd0:	428c      	cmp	r4, r1
 8001bd2:	d23a      	bcs.n	8001c4a <__aeabi_ddiv+0x502>
 8001bd4:	4288      	cmp	r0, r1
 8001bd6:	d863      	bhi.n	8001ca0 <__aeabi_ddiv+0x558>
 8001bd8:	d060      	beq.n	8001c9c <__aeabi_ddiv+0x554>
 8001bda:	4690      	mov	r8, r2
 8001bdc:	e752      	b.n	8001a84 <__aeabi_ddiv+0x33c>
 8001bde:	42aa      	cmp	r2, r5
 8001be0:	d900      	bls.n	8001be4 <__aeabi_ddiv+0x49c>
 8001be2:	e6ea      	b.n	80019ba <__aeabi_ddiv+0x272>
 8001be4:	4643      	mov	r3, r8
 8001be6:	07de      	lsls	r6, r3, #31
 8001be8:	0858      	lsrs	r0, r3, #1
 8001bea:	086b      	lsrs	r3, r5, #1
 8001bec:	431e      	orrs	r6, r3
 8001bee:	07ed      	lsls	r5, r5, #31
 8001bf0:	e6ea      	b.n	80019c8 <__aeabi_ddiv+0x280>
 8001bf2:	4648      	mov	r0, r9
 8001bf4:	f001 f880 	bl	8002cf8 <__clzsi2>
 8001bf8:	0001      	movs	r1, r0
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	3115      	adds	r1, #21
 8001bfe:	3220      	adds	r2, #32
 8001c00:	291c      	cmp	r1, #28
 8001c02:	dc00      	bgt.n	8001c06 <__aeabi_ddiv+0x4be>
 8001c04:	e61a      	b.n	800183c <__aeabi_ddiv+0xf4>
 8001c06:	464b      	mov	r3, r9
 8001c08:	3808      	subs	r0, #8
 8001c0a:	4083      	lsls	r3, r0
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	4698      	mov	r8, r3
 8001c10:	e620      	b.n	8001854 <__aeabi_ddiv+0x10c>
 8001c12:	f001 f871 	bl	8002cf8 <__clzsi2>
 8001c16:	0003      	movs	r3, r0
 8001c18:	001a      	movs	r2, r3
 8001c1a:	3215      	adds	r2, #21
 8001c1c:	3020      	adds	r0, #32
 8001c1e:	2a1c      	cmp	r2, #28
 8001c20:	dc00      	bgt.n	8001c24 <__aeabi_ddiv+0x4dc>
 8001c22:	e630      	b.n	8001886 <__aeabi_ddiv+0x13e>
 8001c24:	4654      	mov	r4, sl
 8001c26:	3b08      	subs	r3, #8
 8001c28:	2200      	movs	r2, #0
 8001c2a:	409c      	lsls	r4, r3
 8001c2c:	e635      	b.n	800189a <__aeabi_ddiv+0x152>
 8001c2e:	230f      	movs	r3, #15
 8001c30:	402b      	ands	r3, r5
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d100      	bne.n	8001c38 <__aeabi_ddiv+0x4f0>
 8001c36:	e652      	b.n	80018de <__aeabi_ddiv+0x196>
 8001c38:	2305      	movs	r3, #5
 8001c3a:	425b      	negs	r3, r3
 8001c3c:	42ab      	cmp	r3, r5
 8001c3e:	419b      	sbcs	r3, r3
 8001c40:	3504      	adds	r5, #4
 8001c42:	425b      	negs	r3, r3
 8001c44:	08ed      	lsrs	r5, r5, #3
 8001c46:	4498      	add	r8, r3
 8001c48:	e64a      	b.n	80018e0 <__aeabi_ddiv+0x198>
 8001c4a:	428c      	cmp	r4, r1
 8001c4c:	d1c5      	bne.n	8001bda <__aeabi_ddiv+0x492>
 8001c4e:	42af      	cmp	r7, r5
 8001c50:	d9c0      	bls.n	8001bd4 <__aeabi_ddiv+0x48c>
 8001c52:	4690      	mov	r8, r2
 8001c54:	e716      	b.n	8001a84 <__aeabi_ddiv+0x33c>
 8001c56:	428a      	cmp	r2, r1
 8001c58:	d800      	bhi.n	8001c5c <__aeabi_ddiv+0x514>
 8001c5a:	e6ea      	b.n	8001a32 <__aeabi_ddiv+0x2ea>
 8001c5c:	1e83      	subs	r3, r0, #2
 8001c5e:	1909      	adds	r1, r1, r4
 8001c60:	e6e7      	b.n	8001a32 <__aeabi_ddiv+0x2ea>
 8001c62:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <__aeabi_ddiv+0x5c4>)
 8001c64:	0028      	movs	r0, r5
 8001c66:	445a      	add	r2, fp
 8001c68:	4643      	mov	r3, r8
 8001c6a:	4095      	lsls	r5, r2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	40c8      	lsrs	r0, r1
 8001c70:	1e6a      	subs	r2, r5, #1
 8001c72:	4195      	sbcs	r5, r2
 8001c74:	4644      	mov	r4, r8
 8001c76:	4303      	orrs	r3, r0
 8001c78:	432b      	orrs	r3, r5
 8001c7a:	40cc      	lsrs	r4, r1
 8001c7c:	075a      	lsls	r2, r3, #29
 8001c7e:	d092      	beq.n	8001ba6 <__aeabi_ddiv+0x45e>
 8001c80:	220f      	movs	r2, #15
 8001c82:	401a      	ands	r2, r3
 8001c84:	2a04      	cmp	r2, #4
 8001c86:	d188      	bne.n	8001b9a <__aeabi_ddiv+0x452>
 8001c88:	e78d      	b.n	8001ba6 <__aeabi_ddiv+0x45e>
 8001c8a:	0035      	movs	r5, r6
 8001c8c:	4281      	cmp	r1, r0
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_ddiv+0x54a>
 8001c90:	e74b      	b.n	8001b2a <__aeabi_ddiv+0x3e2>
 8001c92:	9a00      	ldr	r2, [sp, #0]
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d000      	beq.n	8001c9a <__aeabi_ddiv+0x552>
 8001c98:	e747      	b.n	8001b2a <__aeabi_ddiv+0x3e2>
 8001c9a:	e618      	b.n	80018ce <__aeabi_ddiv+0x186>
 8001c9c:	42ae      	cmp	r6, r5
 8001c9e:	d99c      	bls.n	8001bda <__aeabi_ddiv+0x492>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	425b      	negs	r3, r3
 8001ca4:	469c      	mov	ip, r3
 8001ca6:	9b00      	ldr	r3, [sp, #0]
 8001ca8:	44e0      	add	r8, ip
 8001caa:	469c      	mov	ip, r3
 8001cac:	4465      	add	r5, ip
 8001cae:	429d      	cmp	r5, r3
 8001cb0:	419b      	sbcs	r3, r3
 8001cb2:	425b      	negs	r3, r3
 8001cb4:	191b      	adds	r3, r3, r4
 8001cb6:	18c9      	adds	r1, r1, r3
 8001cb8:	e6e4      	b.n	8001a84 <__aeabi_ddiv+0x33c>
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <__aeabi_ddiv+0x5c8>)
 8001cbc:	445a      	add	r2, fp
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	dc00      	bgt.n	8001cc4 <__aeabi_ddiv+0x57c>
 8001cc2:	e744      	b.n	8001b4e <__aeabi_ddiv+0x406>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2500      	movs	r5, #0
 8001cc8:	4498      	add	r8, r3
 8001cca:	e609      	b.n	80018e0 <__aeabi_ddiv+0x198>
 8001ccc:	0765      	lsls	r5, r4, #29
 8001cce:	0264      	lsls	r4, r4, #9
 8001cd0:	0b24      	lsrs	r4, r4, #12
 8001cd2:	08db      	lsrs	r3, r3, #3
 8001cd4:	431d      	orrs	r5, r3
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e590      	b.n	80017fc <__aeabi_ddiv+0xb4>
 8001cda:	9e00      	ldr	r6, [sp, #0]
 8001cdc:	3d02      	subs	r5, #2
 8001cde:	0072      	lsls	r2, r6, #1
 8001ce0:	42b2      	cmp	r2, r6
 8001ce2:	41bf      	sbcs	r7, r7
 8001ce4:	427f      	negs	r7, r7
 8001ce6:	193c      	adds	r4, r7, r4
 8001ce8:	1909      	adds	r1, r1, r4
 8001cea:	9200      	str	r2, [sp, #0]
 8001cec:	e7ce      	b.n	8001c8c <__aeabi_ddiv+0x544>
 8001cee:	2480      	movs	r4, #128	; 0x80
 8001cf0:	4643      	mov	r3, r8
 8001cf2:	0324      	lsls	r4, r4, #12
 8001cf4:	431c      	orrs	r4, r3
 8001cf6:	0324      	lsls	r4, r4, #12
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <__aeabi_ddiv+0x5cc>)
 8001cfa:	0b24      	lsrs	r4, r4, #12
 8001cfc:	e57e      	b.n	80017fc <__aeabi_ddiv+0xb4>
 8001cfe:	9a00      	ldr	r2, [sp, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3ea      	bcc.n	8001cda <__aeabi_ddiv+0x592>
 8001d04:	0035      	movs	r5, r6
 8001d06:	e7c4      	b.n	8001c92 <__aeabi_ddiv+0x54a>
 8001d08:	0000043e 	.word	0x0000043e
 8001d0c:	0000041e 	.word	0x0000041e
 8001d10:	000003ff 	.word	0x000003ff
 8001d14:	000007ff 	.word	0x000007ff

08001d18 <__eqdf2>:
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	464f      	mov	r7, r9
 8001d1c:	4646      	mov	r6, r8
 8001d1e:	46d6      	mov	lr, sl
 8001d20:	4694      	mov	ip, r2
 8001d22:	4691      	mov	r9, r2
 8001d24:	031a      	lsls	r2, r3, #12
 8001d26:	0b12      	lsrs	r2, r2, #12
 8001d28:	4d18      	ldr	r5, [pc, #96]	; (8001d8c <__eqdf2+0x74>)
 8001d2a:	b5c0      	push	{r6, r7, lr}
 8001d2c:	004c      	lsls	r4, r1, #1
 8001d2e:	030f      	lsls	r7, r1, #12
 8001d30:	4692      	mov	sl, r2
 8001d32:	005a      	lsls	r2, r3, #1
 8001d34:	0006      	movs	r6, r0
 8001d36:	4680      	mov	r8, r0
 8001d38:	0b3f      	lsrs	r7, r7, #12
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	0d64      	lsrs	r4, r4, #21
 8001d3e:	0fc9      	lsrs	r1, r1, #31
 8001d40:	0d52      	lsrs	r2, r2, #21
 8001d42:	0fdb      	lsrs	r3, r3, #31
 8001d44:	42ac      	cmp	r4, r5
 8001d46:	d00a      	beq.n	8001d5e <__eqdf2+0x46>
 8001d48:	42aa      	cmp	r2, r5
 8001d4a:	d003      	beq.n	8001d54 <__eqdf2+0x3c>
 8001d4c:	4294      	cmp	r4, r2
 8001d4e:	d101      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d50:	4557      	cmp	r7, sl
 8001d52:	d00d      	beq.n	8001d70 <__eqdf2+0x58>
 8001d54:	bce0      	pop	{r5, r6, r7}
 8001d56:	46ba      	mov	sl, r7
 8001d58:	46b1      	mov	r9, r6
 8001d5a:	46a8      	mov	r8, r5
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	003d      	movs	r5, r7
 8001d60:	4335      	orrs	r5, r6
 8001d62:	d1f7      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d64:	42a2      	cmp	r2, r4
 8001d66:	d1f5      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d68:	4652      	mov	r2, sl
 8001d6a:	4665      	mov	r5, ip
 8001d6c:	432a      	orrs	r2, r5
 8001d6e:	d1f1      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d70:	2001      	movs	r0, #1
 8001d72:	45c8      	cmp	r8, r9
 8001d74:	d1ee      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d76:	4299      	cmp	r1, r3
 8001d78:	d006      	beq.n	8001d88 <__eqdf2+0x70>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d1ea      	bne.n	8001d54 <__eqdf2+0x3c>
 8001d7e:	433e      	orrs	r6, r7
 8001d80:	0030      	movs	r0, r6
 8001d82:	1e46      	subs	r6, r0, #1
 8001d84:	41b0      	sbcs	r0, r6
 8001d86:	e7e5      	b.n	8001d54 <__eqdf2+0x3c>
 8001d88:	2000      	movs	r0, #0
 8001d8a:	e7e3      	b.n	8001d54 <__eqdf2+0x3c>
 8001d8c:	000007ff 	.word	0x000007ff

08001d90 <__gedf2>:
 8001d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d92:	464e      	mov	r6, r9
 8001d94:	4645      	mov	r5, r8
 8001d96:	4657      	mov	r7, sl
 8001d98:	46de      	mov	lr, fp
 8001d9a:	0004      	movs	r4, r0
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	b5e0      	push	{r5, r6, r7, lr}
 8001da0:	0016      	movs	r6, r2
 8001da2:	031b      	lsls	r3, r3, #12
 8001da4:	0b1b      	lsrs	r3, r3, #12
 8001da6:	4d32      	ldr	r5, [pc, #200]	; (8001e70 <__gedf2+0xe0>)
 8001da8:	030f      	lsls	r7, r1, #12
 8001daa:	004a      	lsls	r2, r1, #1
 8001dac:	4699      	mov	r9, r3
 8001dae:	0043      	lsls	r3, r0, #1
 8001db0:	46a4      	mov	ip, r4
 8001db2:	46b0      	mov	r8, r6
 8001db4:	0b3f      	lsrs	r7, r7, #12
 8001db6:	0d52      	lsrs	r2, r2, #21
 8001db8:	0fc9      	lsrs	r1, r1, #31
 8001dba:	0d5b      	lsrs	r3, r3, #21
 8001dbc:	0fc0      	lsrs	r0, r0, #31
 8001dbe:	42aa      	cmp	r2, r5
 8001dc0:	d029      	beq.n	8001e16 <__gedf2+0x86>
 8001dc2:	42ab      	cmp	r3, r5
 8001dc4:	d018      	beq.n	8001df8 <__gedf2+0x68>
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	d12a      	bne.n	8001e20 <__gedf2+0x90>
 8001dca:	433c      	orrs	r4, r7
 8001dcc:	46a3      	mov	fp, r4
 8001dce:	4265      	negs	r5, r4
 8001dd0:	4165      	adcs	r5, r4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <__gedf2+0x4c>
 8001dd6:	464c      	mov	r4, r9
 8001dd8:	4326      	orrs	r6, r4
 8001dda:	d027      	beq.n	8001e2c <__gedf2+0x9c>
 8001ddc:	2d00      	cmp	r5, #0
 8001dde:	d115      	bne.n	8001e0c <__gedf2+0x7c>
 8001de0:	4281      	cmp	r1, r0
 8001de2:	d028      	beq.n	8001e36 <__gedf2+0xa6>
 8001de4:	2002      	movs	r0, #2
 8001de6:	3901      	subs	r1, #1
 8001de8:	4008      	ands	r0, r1
 8001dea:	3801      	subs	r0, #1
 8001dec:	bcf0      	pop	{r4, r5, r6, r7}
 8001dee:	46bb      	mov	fp, r7
 8001df0:	46b2      	mov	sl, r6
 8001df2:	46a9      	mov	r9, r5
 8001df4:	46a0      	mov	r8, r4
 8001df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df8:	464d      	mov	r5, r9
 8001dfa:	432e      	orrs	r6, r5
 8001dfc:	d12f      	bne.n	8001e5e <__gedf2+0xce>
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d1ee      	bne.n	8001de0 <__gedf2+0x50>
 8001e02:	433c      	orrs	r4, r7
 8001e04:	4265      	negs	r5, r4
 8001e06:	4165      	adcs	r5, r4
 8001e08:	2d00      	cmp	r5, #0
 8001e0a:	d0e9      	beq.n	8001de0 <__gedf2+0x50>
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	d1ed      	bne.n	8001dec <__gedf2+0x5c>
 8001e10:	2001      	movs	r0, #1
 8001e12:	4240      	negs	r0, r0
 8001e14:	e7ea      	b.n	8001dec <__gedf2+0x5c>
 8001e16:	003d      	movs	r5, r7
 8001e18:	4325      	orrs	r5, r4
 8001e1a:	d120      	bne.n	8001e5e <__gedf2+0xce>
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d0eb      	beq.n	8001df8 <__gedf2+0x68>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1dd      	bne.n	8001de0 <__gedf2+0x50>
 8001e24:	464c      	mov	r4, r9
 8001e26:	4326      	orrs	r6, r4
 8001e28:	d1da      	bne.n	8001de0 <__gedf2+0x50>
 8001e2a:	e7db      	b.n	8001de4 <__gedf2+0x54>
 8001e2c:	465b      	mov	r3, fp
 8001e2e:	2000      	movs	r0, #0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0db      	beq.n	8001dec <__gedf2+0x5c>
 8001e34:	e7d6      	b.n	8001de4 <__gedf2+0x54>
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dc0a      	bgt.n	8001e50 <__gedf2+0xc0>
 8001e3a:	dbe7      	blt.n	8001e0c <__gedf2+0x7c>
 8001e3c:	454f      	cmp	r7, r9
 8001e3e:	d8d1      	bhi.n	8001de4 <__gedf2+0x54>
 8001e40:	d010      	beq.n	8001e64 <__gedf2+0xd4>
 8001e42:	2000      	movs	r0, #0
 8001e44:	454f      	cmp	r7, r9
 8001e46:	d2d1      	bcs.n	8001dec <__gedf2+0x5c>
 8001e48:	2900      	cmp	r1, #0
 8001e4a:	d0e1      	beq.n	8001e10 <__gedf2+0x80>
 8001e4c:	0008      	movs	r0, r1
 8001e4e:	e7cd      	b.n	8001dec <__gedf2+0x5c>
 8001e50:	4243      	negs	r3, r0
 8001e52:	4158      	adcs	r0, r3
 8001e54:	2302      	movs	r3, #2
 8001e56:	4240      	negs	r0, r0
 8001e58:	4018      	ands	r0, r3
 8001e5a:	3801      	subs	r0, #1
 8001e5c:	e7c6      	b.n	8001dec <__gedf2+0x5c>
 8001e5e:	2002      	movs	r0, #2
 8001e60:	4240      	negs	r0, r0
 8001e62:	e7c3      	b.n	8001dec <__gedf2+0x5c>
 8001e64:	45c4      	cmp	ip, r8
 8001e66:	d8bd      	bhi.n	8001de4 <__gedf2+0x54>
 8001e68:	2000      	movs	r0, #0
 8001e6a:	45c4      	cmp	ip, r8
 8001e6c:	d2be      	bcs.n	8001dec <__gedf2+0x5c>
 8001e6e:	e7eb      	b.n	8001e48 <__gedf2+0xb8>
 8001e70:	000007ff 	.word	0x000007ff

08001e74 <__ledf2>:
 8001e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e76:	464e      	mov	r6, r9
 8001e78:	4645      	mov	r5, r8
 8001e7a:	4657      	mov	r7, sl
 8001e7c:	46de      	mov	lr, fp
 8001e7e:	0004      	movs	r4, r0
 8001e80:	0018      	movs	r0, r3
 8001e82:	b5e0      	push	{r5, r6, r7, lr}
 8001e84:	0016      	movs	r6, r2
 8001e86:	031b      	lsls	r3, r3, #12
 8001e88:	0b1b      	lsrs	r3, r3, #12
 8001e8a:	4d31      	ldr	r5, [pc, #196]	; (8001f50 <__ledf2+0xdc>)
 8001e8c:	030f      	lsls	r7, r1, #12
 8001e8e:	004a      	lsls	r2, r1, #1
 8001e90:	4699      	mov	r9, r3
 8001e92:	0043      	lsls	r3, r0, #1
 8001e94:	46a4      	mov	ip, r4
 8001e96:	46b0      	mov	r8, r6
 8001e98:	0b3f      	lsrs	r7, r7, #12
 8001e9a:	0d52      	lsrs	r2, r2, #21
 8001e9c:	0fc9      	lsrs	r1, r1, #31
 8001e9e:	0d5b      	lsrs	r3, r3, #21
 8001ea0:	0fc0      	lsrs	r0, r0, #31
 8001ea2:	42aa      	cmp	r2, r5
 8001ea4:	d011      	beq.n	8001eca <__ledf2+0x56>
 8001ea6:	42ab      	cmp	r3, r5
 8001ea8:	d014      	beq.n	8001ed4 <__ledf2+0x60>
 8001eaa:	2a00      	cmp	r2, #0
 8001eac:	d12f      	bne.n	8001f0e <__ledf2+0x9a>
 8001eae:	433c      	orrs	r4, r7
 8001eb0:	46a3      	mov	fp, r4
 8001eb2:	4265      	negs	r5, r4
 8001eb4:	4165      	adcs	r5, r4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d114      	bne.n	8001ee4 <__ledf2+0x70>
 8001eba:	464c      	mov	r4, r9
 8001ebc:	4326      	orrs	r6, r4
 8001ebe:	d111      	bne.n	8001ee4 <__ledf2+0x70>
 8001ec0:	465b      	mov	r3, fp
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d017      	beq.n	8001ef8 <__ledf2+0x84>
 8001ec8:	e010      	b.n	8001eec <__ledf2+0x78>
 8001eca:	003d      	movs	r5, r7
 8001ecc:	4325      	orrs	r5, r4
 8001ece:	d112      	bne.n	8001ef6 <__ledf2+0x82>
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d11c      	bne.n	8001f0e <__ledf2+0x9a>
 8001ed4:	464d      	mov	r5, r9
 8001ed6:	432e      	orrs	r6, r5
 8001ed8:	d10d      	bne.n	8001ef6 <__ledf2+0x82>
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d104      	bne.n	8001ee8 <__ledf2+0x74>
 8001ede:	433c      	orrs	r4, r7
 8001ee0:	4265      	negs	r5, r4
 8001ee2:	4165      	adcs	r5, r4
 8001ee4:	2d00      	cmp	r5, #0
 8001ee6:	d10d      	bne.n	8001f04 <__ledf2+0x90>
 8001ee8:	4281      	cmp	r1, r0
 8001eea:	d016      	beq.n	8001f1a <__ledf2+0xa6>
 8001eec:	2002      	movs	r0, #2
 8001eee:	3901      	subs	r1, #1
 8001ef0:	4008      	ands	r0, r1
 8001ef2:	3801      	subs	r0, #1
 8001ef4:	e000      	b.n	8001ef8 <__ledf2+0x84>
 8001ef6:	2002      	movs	r0, #2
 8001ef8:	bcf0      	pop	{r4, r5, r6, r7}
 8001efa:	46bb      	mov	fp, r7
 8001efc:	46b2      	mov	sl, r6
 8001efe:	46a9      	mov	r9, r5
 8001f00:	46a0      	mov	r8, r4
 8001f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d1f7      	bne.n	8001ef8 <__ledf2+0x84>
 8001f08:	2001      	movs	r0, #1
 8001f0a:	4240      	negs	r0, r0
 8001f0c:	e7f4      	b.n	8001ef8 <__ledf2+0x84>
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ea      	bne.n	8001ee8 <__ledf2+0x74>
 8001f12:	464c      	mov	r4, r9
 8001f14:	4326      	orrs	r6, r4
 8001f16:	d1e7      	bne.n	8001ee8 <__ledf2+0x74>
 8001f18:	e7e8      	b.n	8001eec <__ledf2+0x78>
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dd06      	ble.n	8001f2c <__ledf2+0xb8>
 8001f1e:	4243      	negs	r3, r0
 8001f20:	4158      	adcs	r0, r3
 8001f22:	2302      	movs	r3, #2
 8001f24:	4240      	negs	r0, r0
 8001f26:	4018      	ands	r0, r3
 8001f28:	3801      	subs	r0, #1
 8001f2a:	e7e5      	b.n	8001ef8 <__ledf2+0x84>
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbe9      	blt.n	8001f04 <__ledf2+0x90>
 8001f30:	454f      	cmp	r7, r9
 8001f32:	d8db      	bhi.n	8001eec <__ledf2+0x78>
 8001f34:	d006      	beq.n	8001f44 <__ledf2+0xd0>
 8001f36:	2000      	movs	r0, #0
 8001f38:	454f      	cmp	r7, r9
 8001f3a:	d2dd      	bcs.n	8001ef8 <__ledf2+0x84>
 8001f3c:	2900      	cmp	r1, #0
 8001f3e:	d0e3      	beq.n	8001f08 <__ledf2+0x94>
 8001f40:	0008      	movs	r0, r1
 8001f42:	e7d9      	b.n	8001ef8 <__ledf2+0x84>
 8001f44:	45c4      	cmp	ip, r8
 8001f46:	d8d1      	bhi.n	8001eec <__ledf2+0x78>
 8001f48:	2000      	movs	r0, #0
 8001f4a:	45c4      	cmp	ip, r8
 8001f4c:	d2d4      	bcs.n	8001ef8 <__ledf2+0x84>
 8001f4e:	e7f5      	b.n	8001f3c <__ledf2+0xc8>
 8001f50:	000007ff 	.word	0x000007ff

08001f54 <__aeabi_dmul>:
 8001f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f56:	4657      	mov	r7, sl
 8001f58:	464e      	mov	r6, r9
 8001f5a:	4645      	mov	r5, r8
 8001f5c:	46de      	mov	lr, fp
 8001f5e:	b5e0      	push	{r5, r6, r7, lr}
 8001f60:	4698      	mov	r8, r3
 8001f62:	030c      	lsls	r4, r1, #12
 8001f64:	004b      	lsls	r3, r1, #1
 8001f66:	0006      	movs	r6, r0
 8001f68:	4692      	mov	sl, r2
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	0b24      	lsrs	r4, r4, #12
 8001f6e:	0d5b      	lsrs	r3, r3, #21
 8001f70:	0fcf      	lsrs	r7, r1, #31
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d06c      	beq.n	8002050 <__aeabi_dmul+0xfc>
 8001f76:	4add      	ldr	r2, [pc, #884]	; (80022ec <__aeabi_dmul+0x398>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dmul+0x2a>
 8001f7c:	e086      	b.n	800208c <__aeabi_dmul+0x138>
 8001f7e:	0f42      	lsrs	r2, r0, #29
 8001f80:	00e4      	lsls	r4, r4, #3
 8001f82:	4314      	orrs	r4, r2
 8001f84:	2280      	movs	r2, #128	; 0x80
 8001f86:	0412      	lsls	r2, r2, #16
 8001f88:	4314      	orrs	r4, r2
 8001f8a:	4ad9      	ldr	r2, [pc, #868]	; (80022f0 <__aeabi_dmul+0x39c>)
 8001f8c:	00c5      	lsls	r5, r0, #3
 8001f8e:	4694      	mov	ip, r2
 8001f90:	4463      	add	r3, ip
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2300      	movs	r3, #0
 8001f96:	4699      	mov	r9, r3
 8001f98:	469b      	mov	fp, r3
 8001f9a:	4643      	mov	r3, r8
 8001f9c:	4642      	mov	r2, r8
 8001f9e:	031e      	lsls	r6, r3, #12
 8001fa0:	0fd2      	lsrs	r2, r2, #31
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4650      	mov	r0, sl
 8001fa6:	4690      	mov	r8, r2
 8001fa8:	0b36      	lsrs	r6, r6, #12
 8001faa:	0d5b      	lsrs	r3, r3, #21
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dmul+0x5c>
 8001fae:	e078      	b.n	80020a2 <__aeabi_dmul+0x14e>
 8001fb0:	4ace      	ldr	r2, [pc, #824]	; (80022ec <__aeabi_dmul+0x398>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01d      	beq.n	8001ff2 <__aeabi_dmul+0x9e>
 8001fb6:	49ce      	ldr	r1, [pc, #824]	; (80022f0 <__aeabi_dmul+0x39c>)
 8001fb8:	0f42      	lsrs	r2, r0, #29
 8001fba:	468c      	mov	ip, r1
 8001fbc:	9900      	ldr	r1, [sp, #0]
 8001fbe:	4463      	add	r3, ip
 8001fc0:	00f6      	lsls	r6, r6, #3
 8001fc2:	468c      	mov	ip, r1
 8001fc4:	4316      	orrs	r6, r2
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	449c      	add	ip, r3
 8001fca:	0412      	lsls	r2, r2, #16
 8001fcc:	4663      	mov	r3, ip
 8001fce:	4316      	orrs	r6, r2
 8001fd0:	00c2      	lsls	r2, r0, #3
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	9900      	ldr	r1, [sp, #0]
 8001fd8:	4643      	mov	r3, r8
 8001fda:	3101      	adds	r1, #1
 8001fdc:	468c      	mov	ip, r1
 8001fde:	4649      	mov	r1, r9
 8001fe0:	407b      	eors	r3, r7
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	290f      	cmp	r1, #15
 8001fe6:	d900      	bls.n	8001fea <__aeabi_dmul+0x96>
 8001fe8:	e07e      	b.n	80020e8 <__aeabi_dmul+0x194>
 8001fea:	4bc2      	ldr	r3, [pc, #776]	; (80022f4 <__aeabi_dmul+0x3a0>)
 8001fec:	0089      	lsls	r1, r1, #2
 8001fee:	5859      	ldr	r1, [r3, r1]
 8001ff0:	468f      	mov	pc, r1
 8001ff2:	4652      	mov	r2, sl
 8001ff4:	9b00      	ldr	r3, [sp, #0]
 8001ff6:	4332      	orrs	r2, r6
 8001ff8:	d000      	beq.n	8001ffc <__aeabi_dmul+0xa8>
 8001ffa:	e156      	b.n	80022aa <__aeabi_dmul+0x356>
 8001ffc:	49bb      	ldr	r1, [pc, #748]	; (80022ec <__aeabi_dmul+0x398>)
 8001ffe:	2600      	movs	r6, #0
 8002000:	468c      	mov	ip, r1
 8002002:	4463      	add	r3, ip
 8002004:	4649      	mov	r1, r9
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2302      	movs	r3, #2
 800200a:	4319      	orrs	r1, r3
 800200c:	4689      	mov	r9, r1
 800200e:	2002      	movs	r0, #2
 8002010:	e7e1      	b.n	8001fd6 <__aeabi_dmul+0x82>
 8002012:	4643      	mov	r3, r8
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	0034      	movs	r4, r6
 8002018:	0015      	movs	r5, r2
 800201a:	4683      	mov	fp, r0
 800201c:	465b      	mov	r3, fp
 800201e:	2b02      	cmp	r3, #2
 8002020:	d05e      	beq.n	80020e0 <__aeabi_dmul+0x18c>
 8002022:	2b03      	cmp	r3, #3
 8002024:	d100      	bne.n	8002028 <__aeabi_dmul+0xd4>
 8002026:	e1f3      	b.n	8002410 <__aeabi_dmul+0x4bc>
 8002028:	2b01      	cmp	r3, #1
 800202a:	d000      	beq.n	800202e <__aeabi_dmul+0xda>
 800202c:	e118      	b.n	8002260 <__aeabi_dmul+0x30c>
 800202e:	2200      	movs	r2, #0
 8002030:	2400      	movs	r4, #0
 8002032:	2500      	movs	r5, #0
 8002034:	9b01      	ldr	r3, [sp, #4]
 8002036:	0512      	lsls	r2, r2, #20
 8002038:	4322      	orrs	r2, r4
 800203a:	07db      	lsls	r3, r3, #31
 800203c:	431a      	orrs	r2, r3
 800203e:	0028      	movs	r0, r5
 8002040:	0011      	movs	r1, r2
 8002042:	b007      	add	sp, #28
 8002044:	bcf0      	pop	{r4, r5, r6, r7}
 8002046:	46bb      	mov	fp, r7
 8002048:	46b2      	mov	sl, r6
 800204a:	46a9      	mov	r9, r5
 800204c:	46a0      	mov	r8, r4
 800204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002050:	0025      	movs	r5, r4
 8002052:	4305      	orrs	r5, r0
 8002054:	d100      	bne.n	8002058 <__aeabi_dmul+0x104>
 8002056:	e141      	b.n	80022dc <__aeabi_dmul+0x388>
 8002058:	2c00      	cmp	r4, #0
 800205a:	d100      	bne.n	800205e <__aeabi_dmul+0x10a>
 800205c:	e1ad      	b.n	80023ba <__aeabi_dmul+0x466>
 800205e:	0020      	movs	r0, r4
 8002060:	f000 fe4a 	bl	8002cf8 <__clzsi2>
 8002064:	0001      	movs	r1, r0
 8002066:	0002      	movs	r2, r0
 8002068:	390b      	subs	r1, #11
 800206a:	231d      	movs	r3, #29
 800206c:	0010      	movs	r0, r2
 800206e:	1a5b      	subs	r3, r3, r1
 8002070:	0031      	movs	r1, r6
 8002072:	0035      	movs	r5, r6
 8002074:	3808      	subs	r0, #8
 8002076:	4084      	lsls	r4, r0
 8002078:	40d9      	lsrs	r1, r3
 800207a:	4085      	lsls	r5, r0
 800207c:	430c      	orrs	r4, r1
 800207e:	489e      	ldr	r0, [pc, #632]	; (80022f8 <__aeabi_dmul+0x3a4>)
 8002080:	1a83      	subs	r3, r0, r2
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2300      	movs	r3, #0
 8002086:	4699      	mov	r9, r3
 8002088:	469b      	mov	fp, r3
 800208a:	e786      	b.n	8001f9a <__aeabi_dmul+0x46>
 800208c:	0005      	movs	r5, r0
 800208e:	4325      	orrs	r5, r4
 8002090:	d000      	beq.n	8002094 <__aeabi_dmul+0x140>
 8002092:	e11c      	b.n	80022ce <__aeabi_dmul+0x37a>
 8002094:	2208      	movs	r2, #8
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2302      	movs	r3, #2
 800209a:	2400      	movs	r4, #0
 800209c:	4691      	mov	r9, r2
 800209e:	469b      	mov	fp, r3
 80020a0:	e77b      	b.n	8001f9a <__aeabi_dmul+0x46>
 80020a2:	4652      	mov	r2, sl
 80020a4:	4332      	orrs	r2, r6
 80020a6:	d100      	bne.n	80020aa <__aeabi_dmul+0x156>
 80020a8:	e10a      	b.n	80022c0 <__aeabi_dmul+0x36c>
 80020aa:	2e00      	cmp	r6, #0
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dmul+0x15c>
 80020ae:	e176      	b.n	800239e <__aeabi_dmul+0x44a>
 80020b0:	0030      	movs	r0, r6
 80020b2:	f000 fe21 	bl	8002cf8 <__clzsi2>
 80020b6:	0002      	movs	r2, r0
 80020b8:	3a0b      	subs	r2, #11
 80020ba:	231d      	movs	r3, #29
 80020bc:	0001      	movs	r1, r0
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	4652      	mov	r2, sl
 80020c2:	3908      	subs	r1, #8
 80020c4:	40da      	lsrs	r2, r3
 80020c6:	408e      	lsls	r6, r1
 80020c8:	4316      	orrs	r6, r2
 80020ca:	4652      	mov	r2, sl
 80020cc:	408a      	lsls	r2, r1
 80020ce:	9b00      	ldr	r3, [sp, #0]
 80020d0:	4989      	ldr	r1, [pc, #548]	; (80022f8 <__aeabi_dmul+0x3a4>)
 80020d2:	1a18      	subs	r0, r3, r0
 80020d4:	0003      	movs	r3, r0
 80020d6:	468c      	mov	ip, r1
 80020d8:	4463      	add	r3, ip
 80020da:	2000      	movs	r0, #0
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	e77a      	b.n	8001fd6 <__aeabi_dmul+0x82>
 80020e0:	2400      	movs	r4, #0
 80020e2:	2500      	movs	r5, #0
 80020e4:	4a81      	ldr	r2, [pc, #516]	; (80022ec <__aeabi_dmul+0x398>)
 80020e6:	e7a5      	b.n	8002034 <__aeabi_dmul+0xe0>
 80020e8:	0c2f      	lsrs	r7, r5, #16
 80020ea:	042d      	lsls	r5, r5, #16
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	002b      	movs	r3, r5
 80020f0:	0c11      	lsrs	r1, r2, #16
 80020f2:	0412      	lsls	r2, r2, #16
 80020f4:	0c12      	lsrs	r2, r2, #16
 80020f6:	4353      	muls	r3, r2
 80020f8:	4698      	mov	r8, r3
 80020fa:	0013      	movs	r3, r2
 80020fc:	0028      	movs	r0, r5
 80020fe:	437b      	muls	r3, r7
 8002100:	4699      	mov	r9, r3
 8002102:	4348      	muls	r0, r1
 8002104:	4448      	add	r0, r9
 8002106:	4683      	mov	fp, r0
 8002108:	4640      	mov	r0, r8
 800210a:	000b      	movs	r3, r1
 800210c:	0c00      	lsrs	r0, r0, #16
 800210e:	4682      	mov	sl, r0
 8002110:	4658      	mov	r0, fp
 8002112:	437b      	muls	r3, r7
 8002114:	4450      	add	r0, sl
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	4581      	cmp	r9, r0
 800211a:	d906      	bls.n	800212a <__aeabi_dmul+0x1d6>
 800211c:	469a      	mov	sl, r3
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	025b      	lsls	r3, r3, #9
 8002122:	4699      	mov	r9, r3
 8002124:	44ca      	add	sl, r9
 8002126:	4653      	mov	r3, sl
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	0c03      	lsrs	r3, r0, #16
 800212c:	469b      	mov	fp, r3
 800212e:	4643      	mov	r3, r8
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	0400      	lsls	r0, r0, #16
 8002134:	0c1b      	lsrs	r3, r3, #16
 8002136:	4698      	mov	r8, r3
 8002138:	0003      	movs	r3, r0
 800213a:	4443      	add	r3, r8
 800213c:	9304      	str	r3, [sp, #16]
 800213e:	0c33      	lsrs	r3, r6, #16
 8002140:	4699      	mov	r9, r3
 8002142:	002b      	movs	r3, r5
 8002144:	0436      	lsls	r6, r6, #16
 8002146:	0c36      	lsrs	r6, r6, #16
 8002148:	4373      	muls	r3, r6
 800214a:	4698      	mov	r8, r3
 800214c:	0033      	movs	r3, r6
 800214e:	437b      	muls	r3, r7
 8002150:	469a      	mov	sl, r3
 8002152:	464b      	mov	r3, r9
 8002154:	435d      	muls	r5, r3
 8002156:	435f      	muls	r7, r3
 8002158:	4643      	mov	r3, r8
 800215a:	4455      	add	r5, sl
 800215c:	0c18      	lsrs	r0, r3, #16
 800215e:	1940      	adds	r0, r0, r5
 8002160:	4582      	cmp	sl, r0
 8002162:	d903      	bls.n	800216c <__aeabi_dmul+0x218>
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	025b      	lsls	r3, r3, #9
 8002168:	469a      	mov	sl, r3
 800216a:	4457      	add	r7, sl
 800216c:	0c05      	lsrs	r5, r0, #16
 800216e:	19eb      	adds	r3, r5, r7
 8002170:	9305      	str	r3, [sp, #20]
 8002172:	4643      	mov	r3, r8
 8002174:	041d      	lsls	r5, r3, #16
 8002176:	0c2d      	lsrs	r5, r5, #16
 8002178:	0400      	lsls	r0, r0, #16
 800217a:	1940      	adds	r0, r0, r5
 800217c:	0c25      	lsrs	r5, r4, #16
 800217e:	0424      	lsls	r4, r4, #16
 8002180:	0c24      	lsrs	r4, r4, #16
 8002182:	0027      	movs	r7, r4
 8002184:	4357      	muls	r7, r2
 8002186:	436a      	muls	r2, r5
 8002188:	4690      	mov	r8, r2
 800218a:	002a      	movs	r2, r5
 800218c:	0c3b      	lsrs	r3, r7, #16
 800218e:	469a      	mov	sl, r3
 8002190:	434a      	muls	r2, r1
 8002192:	4361      	muls	r1, r4
 8002194:	4441      	add	r1, r8
 8002196:	4451      	add	r1, sl
 8002198:	4483      	add	fp, r0
 800219a:	4588      	cmp	r8, r1
 800219c:	d903      	bls.n	80021a6 <__aeabi_dmul+0x252>
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	4698      	mov	r8, r3
 80021a4:	4442      	add	r2, r8
 80021a6:	043f      	lsls	r7, r7, #16
 80021a8:	0c0b      	lsrs	r3, r1, #16
 80021aa:	0c3f      	lsrs	r7, r7, #16
 80021ac:	0409      	lsls	r1, r1, #16
 80021ae:	19c9      	adds	r1, r1, r7
 80021b0:	0027      	movs	r7, r4
 80021b2:	4698      	mov	r8, r3
 80021b4:	464b      	mov	r3, r9
 80021b6:	4377      	muls	r7, r6
 80021b8:	435c      	muls	r4, r3
 80021ba:	436e      	muls	r6, r5
 80021bc:	435d      	muls	r5, r3
 80021be:	0c3b      	lsrs	r3, r7, #16
 80021c0:	4699      	mov	r9, r3
 80021c2:	19a4      	adds	r4, r4, r6
 80021c4:	444c      	add	r4, r9
 80021c6:	4442      	add	r2, r8
 80021c8:	9503      	str	r5, [sp, #12]
 80021ca:	42a6      	cmp	r6, r4
 80021cc:	d904      	bls.n	80021d8 <__aeabi_dmul+0x284>
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	025b      	lsls	r3, r3, #9
 80021d2:	4698      	mov	r8, r3
 80021d4:	4445      	add	r5, r8
 80021d6:	9503      	str	r5, [sp, #12]
 80021d8:	9b02      	ldr	r3, [sp, #8]
 80021da:	043f      	lsls	r7, r7, #16
 80021dc:	445b      	add	r3, fp
 80021de:	001e      	movs	r6, r3
 80021e0:	4283      	cmp	r3, r0
 80021e2:	4180      	sbcs	r0, r0
 80021e4:	0423      	lsls	r3, r4, #16
 80021e6:	4698      	mov	r8, r3
 80021e8:	9b05      	ldr	r3, [sp, #20]
 80021ea:	0c3f      	lsrs	r7, r7, #16
 80021ec:	4447      	add	r7, r8
 80021ee:	4698      	mov	r8, r3
 80021f0:	1876      	adds	r6, r6, r1
 80021f2:	428e      	cmp	r6, r1
 80021f4:	4189      	sbcs	r1, r1
 80021f6:	4447      	add	r7, r8
 80021f8:	4240      	negs	r0, r0
 80021fa:	183d      	adds	r5, r7, r0
 80021fc:	46a8      	mov	r8, r5
 80021fe:	4693      	mov	fp, r2
 8002200:	4249      	negs	r1, r1
 8002202:	468a      	mov	sl, r1
 8002204:	44c3      	add	fp, r8
 8002206:	429f      	cmp	r7, r3
 8002208:	41bf      	sbcs	r7, r7
 800220a:	4580      	cmp	r8, r0
 800220c:	4180      	sbcs	r0, r0
 800220e:	9b03      	ldr	r3, [sp, #12]
 8002210:	44da      	add	sl, fp
 8002212:	4698      	mov	r8, r3
 8002214:	4653      	mov	r3, sl
 8002216:	4240      	negs	r0, r0
 8002218:	427f      	negs	r7, r7
 800221a:	4307      	orrs	r7, r0
 800221c:	0c24      	lsrs	r4, r4, #16
 800221e:	4593      	cmp	fp, r2
 8002220:	4192      	sbcs	r2, r2
 8002222:	458a      	cmp	sl, r1
 8002224:	4189      	sbcs	r1, r1
 8002226:	193f      	adds	r7, r7, r4
 8002228:	0ddc      	lsrs	r4, r3, #23
 800222a:	9b04      	ldr	r3, [sp, #16]
 800222c:	0275      	lsls	r5, r6, #9
 800222e:	431d      	orrs	r5, r3
 8002230:	1e68      	subs	r0, r5, #1
 8002232:	4185      	sbcs	r5, r0
 8002234:	4653      	mov	r3, sl
 8002236:	4252      	negs	r2, r2
 8002238:	4249      	negs	r1, r1
 800223a:	430a      	orrs	r2, r1
 800223c:	18bf      	adds	r7, r7, r2
 800223e:	4447      	add	r7, r8
 8002240:	0df6      	lsrs	r6, r6, #23
 8002242:	027f      	lsls	r7, r7, #9
 8002244:	4335      	orrs	r5, r6
 8002246:	025a      	lsls	r2, r3, #9
 8002248:	433c      	orrs	r4, r7
 800224a:	4315      	orrs	r5, r2
 800224c:	01fb      	lsls	r3, r7, #7
 800224e:	d400      	bmi.n	8002252 <__aeabi_dmul+0x2fe>
 8002250:	e0c1      	b.n	80023d6 <__aeabi_dmul+0x482>
 8002252:	2101      	movs	r1, #1
 8002254:	086a      	lsrs	r2, r5, #1
 8002256:	400d      	ands	r5, r1
 8002258:	4315      	orrs	r5, r2
 800225a:	07e2      	lsls	r2, r4, #31
 800225c:	4315      	orrs	r5, r2
 800225e:	0864      	lsrs	r4, r4, #1
 8002260:	4926      	ldr	r1, [pc, #152]	; (80022fc <__aeabi_dmul+0x3a8>)
 8002262:	4461      	add	r1, ip
 8002264:	2900      	cmp	r1, #0
 8002266:	dd56      	ble.n	8002316 <__aeabi_dmul+0x3c2>
 8002268:	076b      	lsls	r3, r5, #29
 800226a:	d009      	beq.n	8002280 <__aeabi_dmul+0x32c>
 800226c:	220f      	movs	r2, #15
 800226e:	402a      	ands	r2, r5
 8002270:	2a04      	cmp	r2, #4
 8002272:	d005      	beq.n	8002280 <__aeabi_dmul+0x32c>
 8002274:	1d2a      	adds	r2, r5, #4
 8002276:	42aa      	cmp	r2, r5
 8002278:	41ad      	sbcs	r5, r5
 800227a:	426d      	negs	r5, r5
 800227c:	1964      	adds	r4, r4, r5
 800227e:	0015      	movs	r5, r2
 8002280:	01e3      	lsls	r3, r4, #7
 8002282:	d504      	bpl.n	800228e <__aeabi_dmul+0x33a>
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <__aeabi_dmul+0x3ac>)
 8002288:	00c9      	lsls	r1, r1, #3
 800228a:	4014      	ands	r4, r2
 800228c:	4461      	add	r1, ip
 800228e:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <__aeabi_dmul+0x3b0>)
 8002290:	4291      	cmp	r1, r2
 8002292:	dd00      	ble.n	8002296 <__aeabi_dmul+0x342>
 8002294:	e724      	b.n	80020e0 <__aeabi_dmul+0x18c>
 8002296:	0762      	lsls	r2, r4, #29
 8002298:	08ed      	lsrs	r5, r5, #3
 800229a:	0264      	lsls	r4, r4, #9
 800229c:	0549      	lsls	r1, r1, #21
 800229e:	4315      	orrs	r5, r2
 80022a0:	0b24      	lsrs	r4, r4, #12
 80022a2:	0d4a      	lsrs	r2, r1, #21
 80022a4:	e6c6      	b.n	8002034 <__aeabi_dmul+0xe0>
 80022a6:	9701      	str	r7, [sp, #4]
 80022a8:	e6b8      	b.n	800201c <__aeabi_dmul+0xc8>
 80022aa:	4a10      	ldr	r2, [pc, #64]	; (80022ec <__aeabi_dmul+0x398>)
 80022ac:	2003      	movs	r0, #3
 80022ae:	4694      	mov	ip, r2
 80022b0:	4463      	add	r3, ip
 80022b2:	464a      	mov	r2, r9
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2303      	movs	r3, #3
 80022b8:	431a      	orrs	r2, r3
 80022ba:	4691      	mov	r9, r2
 80022bc:	4652      	mov	r2, sl
 80022be:	e68a      	b.n	8001fd6 <__aeabi_dmul+0x82>
 80022c0:	4649      	mov	r1, r9
 80022c2:	2301      	movs	r3, #1
 80022c4:	4319      	orrs	r1, r3
 80022c6:	4689      	mov	r9, r1
 80022c8:	2600      	movs	r6, #0
 80022ca:	2001      	movs	r0, #1
 80022cc:	e683      	b.n	8001fd6 <__aeabi_dmul+0x82>
 80022ce:	220c      	movs	r2, #12
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2303      	movs	r3, #3
 80022d4:	0005      	movs	r5, r0
 80022d6:	4691      	mov	r9, r2
 80022d8:	469b      	mov	fp, r3
 80022da:	e65e      	b.n	8001f9a <__aeabi_dmul+0x46>
 80022dc:	2304      	movs	r3, #4
 80022de:	4699      	mov	r9, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	2400      	movs	r4, #0
 80022e8:	469b      	mov	fp, r3
 80022ea:	e656      	b.n	8001f9a <__aeabi_dmul+0x46>
 80022ec:	000007ff 	.word	0x000007ff
 80022f0:	fffffc01 	.word	0xfffffc01
 80022f4:	0801f3d0 	.word	0x0801f3d0
 80022f8:	fffffc0d 	.word	0xfffffc0d
 80022fc:	000003ff 	.word	0x000003ff
 8002300:	feffffff 	.word	0xfeffffff
 8002304:	000007fe 	.word	0x000007fe
 8002308:	2300      	movs	r3, #0
 800230a:	2480      	movs	r4, #128	; 0x80
 800230c:	2500      	movs	r5, #0
 800230e:	4a44      	ldr	r2, [pc, #272]	; (8002420 <__aeabi_dmul+0x4cc>)
 8002310:	9301      	str	r3, [sp, #4]
 8002312:	0324      	lsls	r4, r4, #12
 8002314:	e68e      	b.n	8002034 <__aeabi_dmul+0xe0>
 8002316:	2001      	movs	r0, #1
 8002318:	1a40      	subs	r0, r0, r1
 800231a:	2838      	cmp	r0, #56	; 0x38
 800231c:	dd00      	ble.n	8002320 <__aeabi_dmul+0x3cc>
 800231e:	e686      	b.n	800202e <__aeabi_dmul+0xda>
 8002320:	281f      	cmp	r0, #31
 8002322:	dd5b      	ble.n	80023dc <__aeabi_dmul+0x488>
 8002324:	221f      	movs	r2, #31
 8002326:	0023      	movs	r3, r4
 8002328:	4252      	negs	r2, r2
 800232a:	1a51      	subs	r1, r2, r1
 800232c:	40cb      	lsrs	r3, r1
 800232e:	0019      	movs	r1, r3
 8002330:	2820      	cmp	r0, #32
 8002332:	d003      	beq.n	800233c <__aeabi_dmul+0x3e8>
 8002334:	4a3b      	ldr	r2, [pc, #236]	; (8002424 <__aeabi_dmul+0x4d0>)
 8002336:	4462      	add	r2, ip
 8002338:	4094      	lsls	r4, r2
 800233a:	4325      	orrs	r5, r4
 800233c:	1e6a      	subs	r2, r5, #1
 800233e:	4195      	sbcs	r5, r2
 8002340:	002a      	movs	r2, r5
 8002342:	430a      	orrs	r2, r1
 8002344:	2107      	movs	r1, #7
 8002346:	000d      	movs	r5, r1
 8002348:	2400      	movs	r4, #0
 800234a:	4015      	ands	r5, r2
 800234c:	4211      	tst	r1, r2
 800234e:	d05b      	beq.n	8002408 <__aeabi_dmul+0x4b4>
 8002350:	210f      	movs	r1, #15
 8002352:	2400      	movs	r4, #0
 8002354:	4011      	ands	r1, r2
 8002356:	2904      	cmp	r1, #4
 8002358:	d053      	beq.n	8002402 <__aeabi_dmul+0x4ae>
 800235a:	1d11      	adds	r1, r2, #4
 800235c:	4291      	cmp	r1, r2
 800235e:	4192      	sbcs	r2, r2
 8002360:	4252      	negs	r2, r2
 8002362:	18a4      	adds	r4, r4, r2
 8002364:	000a      	movs	r2, r1
 8002366:	0223      	lsls	r3, r4, #8
 8002368:	d54b      	bpl.n	8002402 <__aeabi_dmul+0x4ae>
 800236a:	2201      	movs	r2, #1
 800236c:	2400      	movs	r4, #0
 800236e:	2500      	movs	r5, #0
 8002370:	e660      	b.n	8002034 <__aeabi_dmul+0xe0>
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	031b      	lsls	r3, r3, #12
 8002376:	421c      	tst	r4, r3
 8002378:	d009      	beq.n	800238e <__aeabi_dmul+0x43a>
 800237a:	421e      	tst	r6, r3
 800237c:	d107      	bne.n	800238e <__aeabi_dmul+0x43a>
 800237e:	4333      	orrs	r3, r6
 8002380:	031c      	lsls	r4, r3, #12
 8002382:	4643      	mov	r3, r8
 8002384:	0015      	movs	r5, r2
 8002386:	0b24      	lsrs	r4, r4, #12
 8002388:	4a25      	ldr	r2, [pc, #148]	; (8002420 <__aeabi_dmul+0x4cc>)
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	e652      	b.n	8002034 <__aeabi_dmul+0xe0>
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0312      	lsls	r2, r2, #12
 8002392:	4314      	orrs	r4, r2
 8002394:	0324      	lsls	r4, r4, #12
 8002396:	4a22      	ldr	r2, [pc, #136]	; (8002420 <__aeabi_dmul+0x4cc>)
 8002398:	0b24      	lsrs	r4, r4, #12
 800239a:	9701      	str	r7, [sp, #4]
 800239c:	e64a      	b.n	8002034 <__aeabi_dmul+0xe0>
 800239e:	f000 fcab 	bl	8002cf8 <__clzsi2>
 80023a2:	0003      	movs	r3, r0
 80023a4:	001a      	movs	r2, r3
 80023a6:	3215      	adds	r2, #21
 80023a8:	3020      	adds	r0, #32
 80023aa:	2a1c      	cmp	r2, #28
 80023ac:	dc00      	bgt.n	80023b0 <__aeabi_dmul+0x45c>
 80023ae:	e684      	b.n	80020ba <__aeabi_dmul+0x166>
 80023b0:	4656      	mov	r6, sl
 80023b2:	3b08      	subs	r3, #8
 80023b4:	2200      	movs	r2, #0
 80023b6:	409e      	lsls	r6, r3
 80023b8:	e689      	b.n	80020ce <__aeabi_dmul+0x17a>
 80023ba:	f000 fc9d 	bl	8002cf8 <__clzsi2>
 80023be:	0001      	movs	r1, r0
 80023c0:	0002      	movs	r2, r0
 80023c2:	3115      	adds	r1, #21
 80023c4:	3220      	adds	r2, #32
 80023c6:	291c      	cmp	r1, #28
 80023c8:	dc00      	bgt.n	80023cc <__aeabi_dmul+0x478>
 80023ca:	e64e      	b.n	800206a <__aeabi_dmul+0x116>
 80023cc:	0034      	movs	r4, r6
 80023ce:	3808      	subs	r0, #8
 80023d0:	2500      	movs	r5, #0
 80023d2:	4084      	lsls	r4, r0
 80023d4:	e653      	b.n	800207e <__aeabi_dmul+0x12a>
 80023d6:	9b00      	ldr	r3, [sp, #0]
 80023d8:	469c      	mov	ip, r3
 80023da:	e741      	b.n	8002260 <__aeabi_dmul+0x30c>
 80023dc:	4912      	ldr	r1, [pc, #72]	; (8002428 <__aeabi_dmul+0x4d4>)
 80023de:	0022      	movs	r2, r4
 80023e0:	4461      	add	r1, ip
 80023e2:	002e      	movs	r6, r5
 80023e4:	408d      	lsls	r5, r1
 80023e6:	408a      	lsls	r2, r1
 80023e8:	40c6      	lsrs	r6, r0
 80023ea:	1e69      	subs	r1, r5, #1
 80023ec:	418d      	sbcs	r5, r1
 80023ee:	4332      	orrs	r2, r6
 80023f0:	432a      	orrs	r2, r5
 80023f2:	40c4      	lsrs	r4, r0
 80023f4:	0753      	lsls	r3, r2, #29
 80023f6:	d0b6      	beq.n	8002366 <__aeabi_dmul+0x412>
 80023f8:	210f      	movs	r1, #15
 80023fa:	4011      	ands	r1, r2
 80023fc:	2904      	cmp	r1, #4
 80023fe:	d1ac      	bne.n	800235a <__aeabi_dmul+0x406>
 8002400:	e7b1      	b.n	8002366 <__aeabi_dmul+0x412>
 8002402:	0765      	lsls	r5, r4, #29
 8002404:	0264      	lsls	r4, r4, #9
 8002406:	0b24      	lsrs	r4, r4, #12
 8002408:	08d2      	lsrs	r2, r2, #3
 800240a:	4315      	orrs	r5, r2
 800240c:	2200      	movs	r2, #0
 800240e:	e611      	b.n	8002034 <__aeabi_dmul+0xe0>
 8002410:	2280      	movs	r2, #128	; 0x80
 8002412:	0312      	lsls	r2, r2, #12
 8002414:	4314      	orrs	r4, r2
 8002416:	0324      	lsls	r4, r4, #12
 8002418:	4a01      	ldr	r2, [pc, #4]	; (8002420 <__aeabi_dmul+0x4cc>)
 800241a:	0b24      	lsrs	r4, r4, #12
 800241c:	e60a      	b.n	8002034 <__aeabi_dmul+0xe0>
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	000007ff 	.word	0x000007ff
 8002424:	0000043e 	.word	0x0000043e
 8002428:	0000041e 	.word	0x0000041e

0800242c <__aeabi_dsub>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	4657      	mov	r7, sl
 8002430:	464e      	mov	r6, r9
 8002432:	4645      	mov	r5, r8
 8002434:	46de      	mov	lr, fp
 8002436:	0004      	movs	r4, r0
 8002438:	b5e0      	push	{r5, r6, r7, lr}
 800243a:	001f      	movs	r7, r3
 800243c:	0010      	movs	r0, r2
 800243e:	030b      	lsls	r3, r1, #12
 8002440:	0f62      	lsrs	r2, r4, #29
 8002442:	004e      	lsls	r6, r1, #1
 8002444:	0fcd      	lsrs	r5, r1, #31
 8002446:	0a5b      	lsrs	r3, r3, #9
 8002448:	0339      	lsls	r1, r7, #12
 800244a:	4313      	orrs	r3, r2
 800244c:	0a49      	lsrs	r1, r1, #9
 800244e:	00e2      	lsls	r2, r4, #3
 8002450:	0f44      	lsrs	r4, r0, #29
 8002452:	4321      	orrs	r1, r4
 8002454:	4cc2      	ldr	r4, [pc, #776]	; (8002760 <__aeabi_dsub+0x334>)
 8002456:	4691      	mov	r9, r2
 8002458:	4692      	mov	sl, r2
 800245a:	00c0      	lsls	r0, r0, #3
 800245c:	007a      	lsls	r2, r7, #1
 800245e:	4680      	mov	r8, r0
 8002460:	0d76      	lsrs	r6, r6, #21
 8002462:	0d52      	lsrs	r2, r2, #21
 8002464:	0fff      	lsrs	r7, r7, #31
 8002466:	42a2      	cmp	r2, r4
 8002468:	d100      	bne.n	800246c <__aeabi_dsub+0x40>
 800246a:	e0b4      	b.n	80025d6 <__aeabi_dsub+0x1aa>
 800246c:	2401      	movs	r4, #1
 800246e:	4067      	eors	r7, r4
 8002470:	46bb      	mov	fp, r7
 8002472:	42bd      	cmp	r5, r7
 8002474:	d100      	bne.n	8002478 <__aeabi_dsub+0x4c>
 8002476:	e088      	b.n	800258a <__aeabi_dsub+0x15e>
 8002478:	1ab4      	subs	r4, r6, r2
 800247a:	46a4      	mov	ip, r4
 800247c:	2c00      	cmp	r4, #0
 800247e:	dc00      	bgt.n	8002482 <__aeabi_dsub+0x56>
 8002480:	e0b2      	b.n	80025e8 <__aeabi_dsub+0x1bc>
 8002482:	2a00      	cmp	r2, #0
 8002484:	d100      	bne.n	8002488 <__aeabi_dsub+0x5c>
 8002486:	e0c5      	b.n	8002614 <__aeabi_dsub+0x1e8>
 8002488:	4ab5      	ldr	r2, [pc, #724]	; (8002760 <__aeabi_dsub+0x334>)
 800248a:	4296      	cmp	r6, r2
 800248c:	d100      	bne.n	8002490 <__aeabi_dsub+0x64>
 800248e:	e28b      	b.n	80029a8 <__aeabi_dsub+0x57c>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	0412      	lsls	r2, r2, #16
 8002494:	4311      	orrs	r1, r2
 8002496:	4662      	mov	r2, ip
 8002498:	2a38      	cmp	r2, #56	; 0x38
 800249a:	dd00      	ble.n	800249e <__aeabi_dsub+0x72>
 800249c:	e1a1      	b.n	80027e2 <__aeabi_dsub+0x3b6>
 800249e:	2a1f      	cmp	r2, #31
 80024a0:	dd00      	ble.n	80024a4 <__aeabi_dsub+0x78>
 80024a2:	e216      	b.n	80028d2 <__aeabi_dsub+0x4a6>
 80024a4:	2720      	movs	r7, #32
 80024a6:	000c      	movs	r4, r1
 80024a8:	1abf      	subs	r7, r7, r2
 80024aa:	40bc      	lsls	r4, r7
 80024ac:	0002      	movs	r2, r0
 80024ae:	46a0      	mov	r8, r4
 80024b0:	4664      	mov	r4, ip
 80024b2:	40b8      	lsls	r0, r7
 80024b4:	40e2      	lsrs	r2, r4
 80024b6:	4644      	mov	r4, r8
 80024b8:	4314      	orrs	r4, r2
 80024ba:	0002      	movs	r2, r0
 80024bc:	1e50      	subs	r0, r2, #1
 80024be:	4182      	sbcs	r2, r0
 80024c0:	4660      	mov	r0, ip
 80024c2:	40c1      	lsrs	r1, r0
 80024c4:	4322      	orrs	r2, r4
 80024c6:	1a5b      	subs	r3, r3, r1
 80024c8:	4649      	mov	r1, r9
 80024ca:	1a8c      	subs	r4, r1, r2
 80024cc:	45a1      	cmp	r9, r4
 80024ce:	4192      	sbcs	r2, r2
 80024d0:	4252      	negs	r2, r2
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	4698      	mov	r8, r3
 80024d6:	4643      	mov	r3, r8
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	d400      	bmi.n	80024de <__aeabi_dsub+0xb2>
 80024dc:	e117      	b.n	800270e <__aeabi_dsub+0x2e2>
 80024de:	4643      	mov	r3, r8
 80024e0:	025b      	lsls	r3, r3, #9
 80024e2:	0a5b      	lsrs	r3, r3, #9
 80024e4:	4698      	mov	r8, r3
 80024e6:	4643      	mov	r3, r8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d100      	bne.n	80024ee <__aeabi_dsub+0xc2>
 80024ec:	e16c      	b.n	80027c8 <__aeabi_dsub+0x39c>
 80024ee:	4640      	mov	r0, r8
 80024f0:	f000 fc02 	bl	8002cf8 <__clzsi2>
 80024f4:	0002      	movs	r2, r0
 80024f6:	3a08      	subs	r2, #8
 80024f8:	2120      	movs	r1, #32
 80024fa:	0020      	movs	r0, r4
 80024fc:	4643      	mov	r3, r8
 80024fe:	1a89      	subs	r1, r1, r2
 8002500:	4093      	lsls	r3, r2
 8002502:	40c8      	lsrs	r0, r1
 8002504:	4094      	lsls	r4, r2
 8002506:	4303      	orrs	r3, r0
 8002508:	4296      	cmp	r6, r2
 800250a:	dd00      	ble.n	800250e <__aeabi_dsub+0xe2>
 800250c:	e157      	b.n	80027be <__aeabi_dsub+0x392>
 800250e:	1b96      	subs	r6, r2, r6
 8002510:	1c71      	adds	r1, r6, #1
 8002512:	291f      	cmp	r1, #31
 8002514:	dd00      	ble.n	8002518 <__aeabi_dsub+0xec>
 8002516:	e1cb      	b.n	80028b0 <__aeabi_dsub+0x484>
 8002518:	2220      	movs	r2, #32
 800251a:	0018      	movs	r0, r3
 800251c:	0026      	movs	r6, r4
 800251e:	1a52      	subs	r2, r2, r1
 8002520:	4094      	lsls	r4, r2
 8002522:	4090      	lsls	r0, r2
 8002524:	40ce      	lsrs	r6, r1
 8002526:	40cb      	lsrs	r3, r1
 8002528:	1e62      	subs	r2, r4, #1
 800252a:	4194      	sbcs	r4, r2
 800252c:	4330      	orrs	r0, r6
 800252e:	4698      	mov	r8, r3
 8002530:	2600      	movs	r6, #0
 8002532:	4304      	orrs	r4, r0
 8002534:	0763      	lsls	r3, r4, #29
 8002536:	d009      	beq.n	800254c <__aeabi_dsub+0x120>
 8002538:	230f      	movs	r3, #15
 800253a:	4023      	ands	r3, r4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d005      	beq.n	800254c <__aeabi_dsub+0x120>
 8002540:	1d23      	adds	r3, r4, #4
 8002542:	42a3      	cmp	r3, r4
 8002544:	41a4      	sbcs	r4, r4
 8002546:	4264      	negs	r4, r4
 8002548:	44a0      	add	r8, r4
 800254a:	001c      	movs	r4, r3
 800254c:	4643      	mov	r3, r8
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	d400      	bmi.n	8002554 <__aeabi_dsub+0x128>
 8002552:	e0df      	b.n	8002714 <__aeabi_dsub+0x2e8>
 8002554:	4b82      	ldr	r3, [pc, #520]	; (8002760 <__aeabi_dsub+0x334>)
 8002556:	3601      	adds	r6, #1
 8002558:	429e      	cmp	r6, r3
 800255a:	d100      	bne.n	800255e <__aeabi_dsub+0x132>
 800255c:	e0fb      	b.n	8002756 <__aeabi_dsub+0x32a>
 800255e:	4642      	mov	r2, r8
 8002560:	4b80      	ldr	r3, [pc, #512]	; (8002764 <__aeabi_dsub+0x338>)
 8002562:	08e4      	lsrs	r4, r4, #3
 8002564:	401a      	ands	r2, r3
 8002566:	0013      	movs	r3, r2
 8002568:	0571      	lsls	r1, r6, #21
 800256a:	0752      	lsls	r2, r2, #29
 800256c:	025b      	lsls	r3, r3, #9
 800256e:	4322      	orrs	r2, r4
 8002570:	0b1b      	lsrs	r3, r3, #12
 8002572:	0d49      	lsrs	r1, r1, #21
 8002574:	0509      	lsls	r1, r1, #20
 8002576:	07ed      	lsls	r5, r5, #31
 8002578:	4319      	orrs	r1, r3
 800257a:	4329      	orrs	r1, r5
 800257c:	0010      	movs	r0, r2
 800257e:	bcf0      	pop	{r4, r5, r6, r7}
 8002580:	46bb      	mov	fp, r7
 8002582:	46b2      	mov	sl, r6
 8002584:	46a9      	mov	r9, r5
 8002586:	46a0      	mov	r8, r4
 8002588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800258a:	1ab4      	subs	r4, r6, r2
 800258c:	46a4      	mov	ip, r4
 800258e:	2c00      	cmp	r4, #0
 8002590:	dd58      	ble.n	8002644 <__aeabi_dsub+0x218>
 8002592:	2a00      	cmp	r2, #0
 8002594:	d100      	bne.n	8002598 <__aeabi_dsub+0x16c>
 8002596:	e09e      	b.n	80026d6 <__aeabi_dsub+0x2aa>
 8002598:	4a71      	ldr	r2, [pc, #452]	; (8002760 <__aeabi_dsub+0x334>)
 800259a:	4296      	cmp	r6, r2
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x174>
 800259e:	e13b      	b.n	8002818 <__aeabi_dsub+0x3ec>
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	0412      	lsls	r2, r2, #16
 80025a4:	4311      	orrs	r1, r2
 80025a6:	4662      	mov	r2, ip
 80025a8:	2a38      	cmp	r2, #56	; 0x38
 80025aa:	dd00      	ble.n	80025ae <__aeabi_dsub+0x182>
 80025ac:	e0c1      	b.n	8002732 <__aeabi_dsub+0x306>
 80025ae:	2a1f      	cmp	r2, #31
 80025b0:	dc00      	bgt.n	80025b4 <__aeabi_dsub+0x188>
 80025b2:	e1bb      	b.n	800292c <__aeabi_dsub+0x500>
 80025b4:	000c      	movs	r4, r1
 80025b6:	3a20      	subs	r2, #32
 80025b8:	40d4      	lsrs	r4, r2
 80025ba:	0022      	movs	r2, r4
 80025bc:	4664      	mov	r4, ip
 80025be:	2c20      	cmp	r4, #32
 80025c0:	d004      	beq.n	80025cc <__aeabi_dsub+0x1a0>
 80025c2:	2740      	movs	r7, #64	; 0x40
 80025c4:	1b3f      	subs	r7, r7, r4
 80025c6:	40b9      	lsls	r1, r7
 80025c8:	4308      	orrs	r0, r1
 80025ca:	4680      	mov	r8, r0
 80025cc:	4644      	mov	r4, r8
 80025ce:	1e61      	subs	r1, r4, #1
 80025d0:	418c      	sbcs	r4, r1
 80025d2:	4314      	orrs	r4, r2
 80025d4:	e0b1      	b.n	800273a <__aeabi_dsub+0x30e>
 80025d6:	000c      	movs	r4, r1
 80025d8:	4304      	orrs	r4, r0
 80025da:	d02a      	beq.n	8002632 <__aeabi_dsub+0x206>
 80025dc:	46bb      	mov	fp, r7
 80025de:	42bd      	cmp	r5, r7
 80025e0:	d02d      	beq.n	800263e <__aeabi_dsub+0x212>
 80025e2:	4c61      	ldr	r4, [pc, #388]	; (8002768 <__aeabi_dsub+0x33c>)
 80025e4:	46a4      	mov	ip, r4
 80025e6:	44b4      	add	ip, r6
 80025e8:	4664      	mov	r4, ip
 80025ea:	2c00      	cmp	r4, #0
 80025ec:	d05c      	beq.n	80026a8 <__aeabi_dsub+0x27c>
 80025ee:	1b94      	subs	r4, r2, r6
 80025f0:	46a4      	mov	ip, r4
 80025f2:	2e00      	cmp	r6, #0
 80025f4:	d000      	beq.n	80025f8 <__aeabi_dsub+0x1cc>
 80025f6:	e115      	b.n	8002824 <__aeabi_dsub+0x3f8>
 80025f8:	464d      	mov	r5, r9
 80025fa:	431d      	orrs	r5, r3
 80025fc:	d100      	bne.n	8002600 <__aeabi_dsub+0x1d4>
 80025fe:	e1c3      	b.n	8002988 <__aeabi_dsub+0x55c>
 8002600:	1e65      	subs	r5, r4, #1
 8002602:	2c01      	cmp	r4, #1
 8002604:	d100      	bne.n	8002608 <__aeabi_dsub+0x1dc>
 8002606:	e20c      	b.n	8002a22 <__aeabi_dsub+0x5f6>
 8002608:	4e55      	ldr	r6, [pc, #340]	; (8002760 <__aeabi_dsub+0x334>)
 800260a:	42b4      	cmp	r4, r6
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x1e4>
 800260e:	e1f8      	b.n	8002a02 <__aeabi_dsub+0x5d6>
 8002610:	46ac      	mov	ip, r5
 8002612:	e10e      	b.n	8002832 <__aeabi_dsub+0x406>
 8002614:	000a      	movs	r2, r1
 8002616:	4302      	orrs	r2, r0
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x1f0>
 800261a:	e136      	b.n	800288a <__aeabi_dsub+0x45e>
 800261c:	0022      	movs	r2, r4
 800261e:	3a01      	subs	r2, #1
 8002620:	2c01      	cmp	r4, #1
 8002622:	d100      	bne.n	8002626 <__aeabi_dsub+0x1fa>
 8002624:	e1c6      	b.n	80029b4 <__aeabi_dsub+0x588>
 8002626:	4c4e      	ldr	r4, [pc, #312]	; (8002760 <__aeabi_dsub+0x334>)
 8002628:	45a4      	cmp	ip, r4
 800262a:	d100      	bne.n	800262e <__aeabi_dsub+0x202>
 800262c:	e0f4      	b.n	8002818 <__aeabi_dsub+0x3ec>
 800262e:	4694      	mov	ip, r2
 8002630:	e731      	b.n	8002496 <__aeabi_dsub+0x6a>
 8002632:	2401      	movs	r4, #1
 8002634:	4067      	eors	r7, r4
 8002636:	46bb      	mov	fp, r7
 8002638:	42bd      	cmp	r5, r7
 800263a:	d000      	beq.n	800263e <__aeabi_dsub+0x212>
 800263c:	e71c      	b.n	8002478 <__aeabi_dsub+0x4c>
 800263e:	4c4a      	ldr	r4, [pc, #296]	; (8002768 <__aeabi_dsub+0x33c>)
 8002640:	46a4      	mov	ip, r4
 8002642:	44b4      	add	ip, r6
 8002644:	4664      	mov	r4, ip
 8002646:	2c00      	cmp	r4, #0
 8002648:	d100      	bne.n	800264c <__aeabi_dsub+0x220>
 800264a:	e0cf      	b.n	80027ec <__aeabi_dsub+0x3c0>
 800264c:	1b94      	subs	r4, r2, r6
 800264e:	46a4      	mov	ip, r4
 8002650:	2e00      	cmp	r6, #0
 8002652:	d100      	bne.n	8002656 <__aeabi_dsub+0x22a>
 8002654:	e15c      	b.n	8002910 <__aeabi_dsub+0x4e4>
 8002656:	4e42      	ldr	r6, [pc, #264]	; (8002760 <__aeabi_dsub+0x334>)
 8002658:	42b2      	cmp	r2, r6
 800265a:	d100      	bne.n	800265e <__aeabi_dsub+0x232>
 800265c:	e1ec      	b.n	8002a38 <__aeabi_dsub+0x60c>
 800265e:	2680      	movs	r6, #128	; 0x80
 8002660:	0436      	lsls	r6, r6, #16
 8002662:	4333      	orrs	r3, r6
 8002664:	4664      	mov	r4, ip
 8002666:	2c38      	cmp	r4, #56	; 0x38
 8002668:	dd00      	ble.n	800266c <__aeabi_dsub+0x240>
 800266a:	e1b3      	b.n	80029d4 <__aeabi_dsub+0x5a8>
 800266c:	2c1f      	cmp	r4, #31
 800266e:	dd00      	ble.n	8002672 <__aeabi_dsub+0x246>
 8002670:	e238      	b.n	8002ae4 <__aeabi_dsub+0x6b8>
 8002672:	2620      	movs	r6, #32
 8002674:	1b36      	subs	r6, r6, r4
 8002676:	001c      	movs	r4, r3
 8002678:	40b4      	lsls	r4, r6
 800267a:	464f      	mov	r7, r9
 800267c:	46a0      	mov	r8, r4
 800267e:	4664      	mov	r4, ip
 8002680:	40e7      	lsrs	r7, r4
 8002682:	4644      	mov	r4, r8
 8002684:	433c      	orrs	r4, r7
 8002686:	464f      	mov	r7, r9
 8002688:	40b7      	lsls	r7, r6
 800268a:	003e      	movs	r6, r7
 800268c:	1e77      	subs	r7, r6, #1
 800268e:	41be      	sbcs	r6, r7
 8002690:	4334      	orrs	r4, r6
 8002692:	4666      	mov	r6, ip
 8002694:	40f3      	lsrs	r3, r6
 8002696:	18c9      	adds	r1, r1, r3
 8002698:	1824      	adds	r4, r4, r0
 800269a:	4284      	cmp	r4, r0
 800269c:	419b      	sbcs	r3, r3
 800269e:	425b      	negs	r3, r3
 80026a0:	4698      	mov	r8, r3
 80026a2:	0016      	movs	r6, r2
 80026a4:	4488      	add	r8, r1
 80026a6:	e04e      	b.n	8002746 <__aeabi_dsub+0x31a>
 80026a8:	4a30      	ldr	r2, [pc, #192]	; (800276c <__aeabi_dsub+0x340>)
 80026aa:	1c74      	adds	r4, r6, #1
 80026ac:	4214      	tst	r4, r2
 80026ae:	d000      	beq.n	80026b2 <__aeabi_dsub+0x286>
 80026b0:	e0d6      	b.n	8002860 <__aeabi_dsub+0x434>
 80026b2:	464a      	mov	r2, r9
 80026b4:	431a      	orrs	r2, r3
 80026b6:	2e00      	cmp	r6, #0
 80026b8:	d000      	beq.n	80026bc <__aeabi_dsub+0x290>
 80026ba:	e15b      	b.n	8002974 <__aeabi_dsub+0x548>
 80026bc:	2a00      	cmp	r2, #0
 80026be:	d100      	bne.n	80026c2 <__aeabi_dsub+0x296>
 80026c0:	e1a5      	b.n	8002a0e <__aeabi_dsub+0x5e2>
 80026c2:	000a      	movs	r2, r1
 80026c4:	4302      	orrs	r2, r0
 80026c6:	d000      	beq.n	80026ca <__aeabi_dsub+0x29e>
 80026c8:	e1bb      	b.n	8002a42 <__aeabi_dsub+0x616>
 80026ca:	464a      	mov	r2, r9
 80026cc:	0759      	lsls	r1, r3, #29
 80026ce:	08d2      	lsrs	r2, r2, #3
 80026d0:	430a      	orrs	r2, r1
 80026d2:	08db      	lsrs	r3, r3, #3
 80026d4:	e027      	b.n	8002726 <__aeabi_dsub+0x2fa>
 80026d6:	000a      	movs	r2, r1
 80026d8:	4302      	orrs	r2, r0
 80026da:	d100      	bne.n	80026de <__aeabi_dsub+0x2b2>
 80026dc:	e174      	b.n	80029c8 <__aeabi_dsub+0x59c>
 80026de:	0022      	movs	r2, r4
 80026e0:	3a01      	subs	r2, #1
 80026e2:	2c01      	cmp	r4, #1
 80026e4:	d005      	beq.n	80026f2 <__aeabi_dsub+0x2c6>
 80026e6:	4c1e      	ldr	r4, [pc, #120]	; (8002760 <__aeabi_dsub+0x334>)
 80026e8:	45a4      	cmp	ip, r4
 80026ea:	d100      	bne.n	80026ee <__aeabi_dsub+0x2c2>
 80026ec:	e094      	b.n	8002818 <__aeabi_dsub+0x3ec>
 80026ee:	4694      	mov	ip, r2
 80026f0:	e759      	b.n	80025a6 <__aeabi_dsub+0x17a>
 80026f2:	4448      	add	r0, r9
 80026f4:	4548      	cmp	r0, r9
 80026f6:	4192      	sbcs	r2, r2
 80026f8:	185b      	adds	r3, r3, r1
 80026fa:	4698      	mov	r8, r3
 80026fc:	0004      	movs	r4, r0
 80026fe:	4252      	negs	r2, r2
 8002700:	4490      	add	r8, r2
 8002702:	4643      	mov	r3, r8
 8002704:	2602      	movs	r6, #2
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	d500      	bpl.n	800270c <__aeabi_dsub+0x2e0>
 800270a:	e0c4      	b.n	8002896 <__aeabi_dsub+0x46a>
 800270c:	3e01      	subs	r6, #1
 800270e:	0763      	lsls	r3, r4, #29
 8002710:	d000      	beq.n	8002714 <__aeabi_dsub+0x2e8>
 8002712:	e711      	b.n	8002538 <__aeabi_dsub+0x10c>
 8002714:	4643      	mov	r3, r8
 8002716:	46b4      	mov	ip, r6
 8002718:	0759      	lsls	r1, r3, #29
 800271a:	08e2      	lsrs	r2, r4, #3
 800271c:	430a      	orrs	r2, r1
 800271e:	08db      	lsrs	r3, r3, #3
 8002720:	490f      	ldr	r1, [pc, #60]	; (8002760 <__aeabi_dsub+0x334>)
 8002722:	458c      	cmp	ip, r1
 8002724:	d040      	beq.n	80027a8 <__aeabi_dsub+0x37c>
 8002726:	4661      	mov	r1, ip
 8002728:	031b      	lsls	r3, r3, #12
 800272a:	0549      	lsls	r1, r1, #21
 800272c:	0b1b      	lsrs	r3, r3, #12
 800272e:	0d49      	lsrs	r1, r1, #21
 8002730:	e720      	b.n	8002574 <__aeabi_dsub+0x148>
 8002732:	4301      	orrs	r1, r0
 8002734:	000c      	movs	r4, r1
 8002736:	1e61      	subs	r1, r4, #1
 8002738:	418c      	sbcs	r4, r1
 800273a:	444c      	add	r4, r9
 800273c:	454c      	cmp	r4, r9
 800273e:	4192      	sbcs	r2, r2
 8002740:	4252      	negs	r2, r2
 8002742:	4690      	mov	r8, r2
 8002744:	4498      	add	r8, r3
 8002746:	4643      	mov	r3, r8
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	d5e0      	bpl.n	800270e <__aeabi_dsub+0x2e2>
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__aeabi_dsub+0x334>)
 800274e:	3601      	adds	r6, #1
 8002750:	429e      	cmp	r6, r3
 8002752:	d000      	beq.n	8002756 <__aeabi_dsub+0x32a>
 8002754:	e09f      	b.n	8002896 <__aeabi_dsub+0x46a>
 8002756:	0031      	movs	r1, r6
 8002758:	2300      	movs	r3, #0
 800275a:	2200      	movs	r2, #0
 800275c:	e70a      	b.n	8002574 <__aeabi_dsub+0x148>
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	000007ff 	.word	0x000007ff
 8002764:	ff7fffff 	.word	0xff7fffff
 8002768:	fffff801 	.word	0xfffff801
 800276c:	000007fe 	.word	0x000007fe
 8002770:	2a00      	cmp	r2, #0
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x34a>
 8002774:	e160      	b.n	8002a38 <__aeabi_dsub+0x60c>
 8002776:	000a      	movs	r2, r1
 8002778:	4302      	orrs	r2, r0
 800277a:	d04d      	beq.n	8002818 <__aeabi_dsub+0x3ec>
 800277c:	464a      	mov	r2, r9
 800277e:	075c      	lsls	r4, r3, #29
 8002780:	08d2      	lsrs	r2, r2, #3
 8002782:	4322      	orrs	r2, r4
 8002784:	2480      	movs	r4, #128	; 0x80
 8002786:	08db      	lsrs	r3, r3, #3
 8002788:	0324      	lsls	r4, r4, #12
 800278a:	4223      	tst	r3, r4
 800278c:	d007      	beq.n	800279e <__aeabi_dsub+0x372>
 800278e:	08ce      	lsrs	r6, r1, #3
 8002790:	4226      	tst	r6, r4
 8002792:	d104      	bne.n	800279e <__aeabi_dsub+0x372>
 8002794:	465d      	mov	r5, fp
 8002796:	0033      	movs	r3, r6
 8002798:	08c2      	lsrs	r2, r0, #3
 800279a:	0749      	lsls	r1, r1, #29
 800279c:	430a      	orrs	r2, r1
 800279e:	0f51      	lsrs	r1, r2, #29
 80027a0:	00d2      	lsls	r2, r2, #3
 80027a2:	08d2      	lsrs	r2, r2, #3
 80027a4:	0749      	lsls	r1, r1, #29
 80027a6:	430a      	orrs	r2, r1
 80027a8:	0011      	movs	r1, r2
 80027aa:	4319      	orrs	r1, r3
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x384>
 80027ae:	e1c8      	b.n	8002b42 <__aeabi_dsub+0x716>
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0309      	lsls	r1, r1, #12
 80027b4:	430b      	orrs	r3, r1
 80027b6:	031b      	lsls	r3, r3, #12
 80027b8:	49d5      	ldr	r1, [pc, #852]	; (8002b10 <__aeabi_dsub+0x6e4>)
 80027ba:	0b1b      	lsrs	r3, r3, #12
 80027bc:	e6da      	b.n	8002574 <__aeabi_dsub+0x148>
 80027be:	49d5      	ldr	r1, [pc, #852]	; (8002b14 <__aeabi_dsub+0x6e8>)
 80027c0:	1ab6      	subs	r6, r6, r2
 80027c2:	400b      	ands	r3, r1
 80027c4:	4698      	mov	r8, r3
 80027c6:	e6b5      	b.n	8002534 <__aeabi_dsub+0x108>
 80027c8:	0020      	movs	r0, r4
 80027ca:	f000 fa95 	bl	8002cf8 <__clzsi2>
 80027ce:	0002      	movs	r2, r0
 80027d0:	3218      	adds	r2, #24
 80027d2:	2a1f      	cmp	r2, #31
 80027d4:	dc00      	bgt.n	80027d8 <__aeabi_dsub+0x3ac>
 80027d6:	e68f      	b.n	80024f8 <__aeabi_dsub+0xcc>
 80027d8:	0023      	movs	r3, r4
 80027da:	3808      	subs	r0, #8
 80027dc:	4083      	lsls	r3, r0
 80027de:	2400      	movs	r4, #0
 80027e0:	e692      	b.n	8002508 <__aeabi_dsub+0xdc>
 80027e2:	4308      	orrs	r0, r1
 80027e4:	0002      	movs	r2, r0
 80027e6:	1e50      	subs	r0, r2, #1
 80027e8:	4182      	sbcs	r2, r0
 80027ea:	e66d      	b.n	80024c8 <__aeabi_dsub+0x9c>
 80027ec:	4cca      	ldr	r4, [pc, #808]	; (8002b18 <__aeabi_dsub+0x6ec>)
 80027ee:	1c72      	adds	r2, r6, #1
 80027f0:	4222      	tst	r2, r4
 80027f2:	d000      	beq.n	80027f6 <__aeabi_dsub+0x3ca>
 80027f4:	e0ad      	b.n	8002952 <__aeabi_dsub+0x526>
 80027f6:	464a      	mov	r2, r9
 80027f8:	431a      	orrs	r2, r3
 80027fa:	2e00      	cmp	r6, #0
 80027fc:	d1b8      	bne.n	8002770 <__aeabi_dsub+0x344>
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x3d8>
 8002802:	e158      	b.n	8002ab6 <__aeabi_dsub+0x68a>
 8002804:	000a      	movs	r2, r1
 8002806:	4302      	orrs	r2, r0
 8002808:	d000      	beq.n	800280c <__aeabi_dsub+0x3e0>
 800280a:	e159      	b.n	8002ac0 <__aeabi_dsub+0x694>
 800280c:	464a      	mov	r2, r9
 800280e:	0759      	lsls	r1, r3, #29
 8002810:	08d2      	lsrs	r2, r2, #3
 8002812:	430a      	orrs	r2, r1
 8002814:	08db      	lsrs	r3, r3, #3
 8002816:	e786      	b.n	8002726 <__aeabi_dsub+0x2fa>
 8002818:	464a      	mov	r2, r9
 800281a:	0759      	lsls	r1, r3, #29
 800281c:	08d2      	lsrs	r2, r2, #3
 800281e:	430a      	orrs	r2, r1
 8002820:	08db      	lsrs	r3, r3, #3
 8002822:	e7c1      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002824:	4dba      	ldr	r5, [pc, #744]	; (8002b10 <__aeabi_dsub+0x6e4>)
 8002826:	42aa      	cmp	r2, r5
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x400>
 800282a:	e11e      	b.n	8002a6a <__aeabi_dsub+0x63e>
 800282c:	2580      	movs	r5, #128	; 0x80
 800282e:	042d      	lsls	r5, r5, #16
 8002830:	432b      	orrs	r3, r5
 8002832:	4664      	mov	r4, ip
 8002834:	2c38      	cmp	r4, #56	; 0x38
 8002836:	dc5d      	bgt.n	80028f4 <__aeabi_dsub+0x4c8>
 8002838:	2c1f      	cmp	r4, #31
 800283a:	dd00      	ble.n	800283e <__aeabi_dsub+0x412>
 800283c:	e0d0      	b.n	80029e0 <__aeabi_dsub+0x5b4>
 800283e:	2520      	movs	r5, #32
 8002840:	4667      	mov	r7, ip
 8002842:	1b2d      	subs	r5, r5, r4
 8002844:	464e      	mov	r6, r9
 8002846:	001c      	movs	r4, r3
 8002848:	40fe      	lsrs	r6, r7
 800284a:	40ac      	lsls	r4, r5
 800284c:	4334      	orrs	r4, r6
 800284e:	464e      	mov	r6, r9
 8002850:	40ae      	lsls	r6, r5
 8002852:	0035      	movs	r5, r6
 8002854:	40fb      	lsrs	r3, r7
 8002856:	1e6e      	subs	r6, r5, #1
 8002858:	41b5      	sbcs	r5, r6
 800285a:	1ac9      	subs	r1, r1, r3
 800285c:	432c      	orrs	r4, r5
 800285e:	e04e      	b.n	80028fe <__aeabi_dsub+0x4d2>
 8002860:	464a      	mov	r2, r9
 8002862:	1a14      	subs	r4, r2, r0
 8002864:	45a1      	cmp	r9, r4
 8002866:	4192      	sbcs	r2, r2
 8002868:	4252      	negs	r2, r2
 800286a:	4690      	mov	r8, r2
 800286c:	1a5f      	subs	r7, r3, r1
 800286e:	003a      	movs	r2, r7
 8002870:	4647      	mov	r7, r8
 8002872:	1bd2      	subs	r2, r2, r7
 8002874:	4690      	mov	r8, r2
 8002876:	0212      	lsls	r2, r2, #8
 8002878:	d500      	bpl.n	800287c <__aeabi_dsub+0x450>
 800287a:	e08b      	b.n	8002994 <__aeabi_dsub+0x568>
 800287c:	4642      	mov	r2, r8
 800287e:	4322      	orrs	r2, r4
 8002880:	d000      	beq.n	8002884 <__aeabi_dsub+0x458>
 8002882:	e630      	b.n	80024e6 <__aeabi_dsub+0xba>
 8002884:	2300      	movs	r3, #0
 8002886:	2500      	movs	r5, #0
 8002888:	e74d      	b.n	8002726 <__aeabi_dsub+0x2fa>
 800288a:	464a      	mov	r2, r9
 800288c:	0759      	lsls	r1, r3, #29
 800288e:	08d2      	lsrs	r2, r2, #3
 8002890:	430a      	orrs	r2, r1
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	e744      	b.n	8002720 <__aeabi_dsub+0x2f4>
 8002896:	4642      	mov	r2, r8
 8002898:	4b9e      	ldr	r3, [pc, #632]	; (8002b14 <__aeabi_dsub+0x6e8>)
 800289a:	0861      	lsrs	r1, r4, #1
 800289c:	401a      	ands	r2, r3
 800289e:	0013      	movs	r3, r2
 80028a0:	2201      	movs	r2, #1
 80028a2:	4014      	ands	r4, r2
 80028a4:	430c      	orrs	r4, r1
 80028a6:	07da      	lsls	r2, r3, #31
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	4698      	mov	r8, r3
 80028ac:	4314      	orrs	r4, r2
 80028ae:	e641      	b.n	8002534 <__aeabi_dsub+0x108>
 80028b0:	001a      	movs	r2, r3
 80028b2:	3e1f      	subs	r6, #31
 80028b4:	40f2      	lsrs	r2, r6
 80028b6:	0016      	movs	r6, r2
 80028b8:	2920      	cmp	r1, #32
 80028ba:	d003      	beq.n	80028c4 <__aeabi_dsub+0x498>
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	1a51      	subs	r1, r2, r1
 80028c0:	408b      	lsls	r3, r1
 80028c2:	431c      	orrs	r4, r3
 80028c4:	1e62      	subs	r2, r4, #1
 80028c6:	4194      	sbcs	r4, r2
 80028c8:	2300      	movs	r3, #0
 80028ca:	4334      	orrs	r4, r6
 80028cc:	4698      	mov	r8, r3
 80028ce:	2600      	movs	r6, #0
 80028d0:	e71d      	b.n	800270e <__aeabi_dsub+0x2e2>
 80028d2:	000c      	movs	r4, r1
 80028d4:	3a20      	subs	r2, #32
 80028d6:	40d4      	lsrs	r4, r2
 80028d8:	0022      	movs	r2, r4
 80028da:	4664      	mov	r4, ip
 80028dc:	2c20      	cmp	r4, #32
 80028de:	d004      	beq.n	80028ea <__aeabi_dsub+0x4be>
 80028e0:	2740      	movs	r7, #64	; 0x40
 80028e2:	1b3f      	subs	r7, r7, r4
 80028e4:	40b9      	lsls	r1, r7
 80028e6:	4308      	orrs	r0, r1
 80028e8:	4680      	mov	r8, r0
 80028ea:	4644      	mov	r4, r8
 80028ec:	1e61      	subs	r1, r4, #1
 80028ee:	418c      	sbcs	r4, r1
 80028f0:	4322      	orrs	r2, r4
 80028f2:	e5e9      	b.n	80024c8 <__aeabi_dsub+0x9c>
 80028f4:	464c      	mov	r4, r9
 80028f6:	4323      	orrs	r3, r4
 80028f8:	001c      	movs	r4, r3
 80028fa:	1e63      	subs	r3, r4, #1
 80028fc:	419c      	sbcs	r4, r3
 80028fe:	1b04      	subs	r4, r0, r4
 8002900:	42a0      	cmp	r0, r4
 8002902:	419b      	sbcs	r3, r3
 8002904:	425b      	negs	r3, r3
 8002906:	1acb      	subs	r3, r1, r3
 8002908:	4698      	mov	r8, r3
 800290a:	465d      	mov	r5, fp
 800290c:	0016      	movs	r6, r2
 800290e:	e5e2      	b.n	80024d6 <__aeabi_dsub+0xaa>
 8002910:	464e      	mov	r6, r9
 8002912:	431e      	orrs	r6, r3
 8002914:	d100      	bne.n	8002918 <__aeabi_dsub+0x4ec>
 8002916:	e0ae      	b.n	8002a76 <__aeabi_dsub+0x64a>
 8002918:	1e66      	subs	r6, r4, #1
 800291a:	2c01      	cmp	r4, #1
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x4f4>
 800291e:	e0fd      	b.n	8002b1c <__aeabi_dsub+0x6f0>
 8002920:	4f7b      	ldr	r7, [pc, #492]	; (8002b10 <__aeabi_dsub+0x6e4>)
 8002922:	42bc      	cmp	r4, r7
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x4fc>
 8002926:	e107      	b.n	8002b38 <__aeabi_dsub+0x70c>
 8002928:	46b4      	mov	ip, r6
 800292a:	e69b      	b.n	8002664 <__aeabi_dsub+0x238>
 800292c:	4664      	mov	r4, ip
 800292e:	2220      	movs	r2, #32
 8002930:	1b12      	subs	r2, r2, r4
 8002932:	000c      	movs	r4, r1
 8002934:	4094      	lsls	r4, r2
 8002936:	0007      	movs	r7, r0
 8002938:	4090      	lsls	r0, r2
 800293a:	46a0      	mov	r8, r4
 800293c:	4664      	mov	r4, ip
 800293e:	1e42      	subs	r2, r0, #1
 8002940:	4190      	sbcs	r0, r2
 8002942:	4662      	mov	r2, ip
 8002944:	40e7      	lsrs	r7, r4
 8002946:	4644      	mov	r4, r8
 8002948:	40d1      	lsrs	r1, r2
 800294a:	433c      	orrs	r4, r7
 800294c:	4304      	orrs	r4, r0
 800294e:	185b      	adds	r3, r3, r1
 8002950:	e6f3      	b.n	800273a <__aeabi_dsub+0x30e>
 8002952:	4c6f      	ldr	r4, [pc, #444]	; (8002b10 <__aeabi_dsub+0x6e4>)
 8002954:	42a2      	cmp	r2, r4
 8002956:	d100      	bne.n	800295a <__aeabi_dsub+0x52e>
 8002958:	e0d5      	b.n	8002b06 <__aeabi_dsub+0x6da>
 800295a:	4448      	add	r0, r9
 800295c:	185b      	adds	r3, r3, r1
 800295e:	4548      	cmp	r0, r9
 8002960:	4189      	sbcs	r1, r1
 8002962:	4249      	negs	r1, r1
 8002964:	185b      	adds	r3, r3, r1
 8002966:	07dc      	lsls	r4, r3, #31
 8002968:	0840      	lsrs	r0, r0, #1
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	4698      	mov	r8, r3
 800296e:	0016      	movs	r6, r2
 8002970:	4304      	orrs	r4, r0
 8002972:	e6cc      	b.n	800270e <__aeabi_dsub+0x2e2>
 8002974:	2a00      	cmp	r2, #0
 8002976:	d000      	beq.n	800297a <__aeabi_dsub+0x54e>
 8002978:	e082      	b.n	8002a80 <__aeabi_dsub+0x654>
 800297a:	000a      	movs	r2, r1
 800297c:	4302      	orrs	r2, r0
 800297e:	d140      	bne.n	8002a02 <__aeabi_dsub+0x5d6>
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	2500      	movs	r5, #0
 8002984:	031b      	lsls	r3, r3, #12
 8002986:	e713      	b.n	80027b0 <__aeabi_dsub+0x384>
 8002988:	074b      	lsls	r3, r1, #29
 800298a:	08c2      	lsrs	r2, r0, #3
 800298c:	431a      	orrs	r2, r3
 800298e:	465d      	mov	r5, fp
 8002990:	08cb      	lsrs	r3, r1, #3
 8002992:	e6c5      	b.n	8002720 <__aeabi_dsub+0x2f4>
 8002994:	464a      	mov	r2, r9
 8002996:	1a84      	subs	r4, r0, r2
 8002998:	42a0      	cmp	r0, r4
 800299a:	4192      	sbcs	r2, r2
 800299c:	1acb      	subs	r3, r1, r3
 800299e:	4252      	negs	r2, r2
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	4698      	mov	r8, r3
 80029a4:	465d      	mov	r5, fp
 80029a6:	e59e      	b.n	80024e6 <__aeabi_dsub+0xba>
 80029a8:	464a      	mov	r2, r9
 80029aa:	0759      	lsls	r1, r3, #29
 80029ac:	08d2      	lsrs	r2, r2, #3
 80029ae:	430a      	orrs	r2, r1
 80029b0:	08db      	lsrs	r3, r3, #3
 80029b2:	e6f9      	b.n	80027a8 <__aeabi_dsub+0x37c>
 80029b4:	464a      	mov	r2, r9
 80029b6:	1a14      	subs	r4, r2, r0
 80029b8:	45a1      	cmp	r9, r4
 80029ba:	4192      	sbcs	r2, r2
 80029bc:	1a5b      	subs	r3, r3, r1
 80029be:	4252      	negs	r2, r2
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	4698      	mov	r8, r3
 80029c4:	2601      	movs	r6, #1
 80029c6:	e586      	b.n	80024d6 <__aeabi_dsub+0xaa>
 80029c8:	464a      	mov	r2, r9
 80029ca:	0759      	lsls	r1, r3, #29
 80029cc:	08d2      	lsrs	r2, r2, #3
 80029ce:	430a      	orrs	r2, r1
 80029d0:	08db      	lsrs	r3, r3, #3
 80029d2:	e6a5      	b.n	8002720 <__aeabi_dsub+0x2f4>
 80029d4:	464c      	mov	r4, r9
 80029d6:	4323      	orrs	r3, r4
 80029d8:	001c      	movs	r4, r3
 80029da:	1e63      	subs	r3, r4, #1
 80029dc:	419c      	sbcs	r4, r3
 80029de:	e65b      	b.n	8002698 <__aeabi_dsub+0x26c>
 80029e0:	4665      	mov	r5, ip
 80029e2:	001e      	movs	r6, r3
 80029e4:	3d20      	subs	r5, #32
 80029e6:	40ee      	lsrs	r6, r5
 80029e8:	2c20      	cmp	r4, #32
 80029ea:	d005      	beq.n	80029f8 <__aeabi_dsub+0x5cc>
 80029ec:	2540      	movs	r5, #64	; 0x40
 80029ee:	1b2d      	subs	r5, r5, r4
 80029f0:	40ab      	lsls	r3, r5
 80029f2:	464c      	mov	r4, r9
 80029f4:	431c      	orrs	r4, r3
 80029f6:	46a2      	mov	sl, r4
 80029f8:	4654      	mov	r4, sl
 80029fa:	1e63      	subs	r3, r4, #1
 80029fc:	419c      	sbcs	r4, r3
 80029fe:	4334      	orrs	r4, r6
 8002a00:	e77d      	b.n	80028fe <__aeabi_dsub+0x4d2>
 8002a02:	074b      	lsls	r3, r1, #29
 8002a04:	08c2      	lsrs	r2, r0, #3
 8002a06:	431a      	orrs	r2, r3
 8002a08:	465d      	mov	r5, fp
 8002a0a:	08cb      	lsrs	r3, r1, #3
 8002a0c:	e6cc      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002a0e:	000a      	movs	r2, r1
 8002a10:	4302      	orrs	r2, r0
 8002a12:	d100      	bne.n	8002a16 <__aeabi_dsub+0x5ea>
 8002a14:	e736      	b.n	8002884 <__aeabi_dsub+0x458>
 8002a16:	074b      	lsls	r3, r1, #29
 8002a18:	08c2      	lsrs	r2, r0, #3
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	465d      	mov	r5, fp
 8002a1e:	08cb      	lsrs	r3, r1, #3
 8002a20:	e681      	b.n	8002726 <__aeabi_dsub+0x2fa>
 8002a22:	464a      	mov	r2, r9
 8002a24:	1a84      	subs	r4, r0, r2
 8002a26:	42a0      	cmp	r0, r4
 8002a28:	4192      	sbcs	r2, r2
 8002a2a:	1acb      	subs	r3, r1, r3
 8002a2c:	4252      	negs	r2, r2
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	4698      	mov	r8, r3
 8002a32:	465d      	mov	r5, fp
 8002a34:	2601      	movs	r6, #1
 8002a36:	e54e      	b.n	80024d6 <__aeabi_dsub+0xaa>
 8002a38:	074b      	lsls	r3, r1, #29
 8002a3a:	08c2      	lsrs	r2, r0, #3
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	08cb      	lsrs	r3, r1, #3
 8002a40:	e6b2      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002a42:	464a      	mov	r2, r9
 8002a44:	1a14      	subs	r4, r2, r0
 8002a46:	45a1      	cmp	r9, r4
 8002a48:	4192      	sbcs	r2, r2
 8002a4a:	1a5f      	subs	r7, r3, r1
 8002a4c:	4252      	negs	r2, r2
 8002a4e:	1aba      	subs	r2, r7, r2
 8002a50:	4690      	mov	r8, r2
 8002a52:	0212      	lsls	r2, r2, #8
 8002a54:	d56b      	bpl.n	8002b2e <__aeabi_dsub+0x702>
 8002a56:	464a      	mov	r2, r9
 8002a58:	1a84      	subs	r4, r0, r2
 8002a5a:	42a0      	cmp	r0, r4
 8002a5c:	4192      	sbcs	r2, r2
 8002a5e:	1acb      	subs	r3, r1, r3
 8002a60:	4252      	negs	r2, r2
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	4698      	mov	r8, r3
 8002a66:	465d      	mov	r5, fp
 8002a68:	e564      	b.n	8002534 <__aeabi_dsub+0x108>
 8002a6a:	074b      	lsls	r3, r1, #29
 8002a6c:	08c2      	lsrs	r2, r0, #3
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	465d      	mov	r5, fp
 8002a72:	08cb      	lsrs	r3, r1, #3
 8002a74:	e698      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002a76:	074b      	lsls	r3, r1, #29
 8002a78:	08c2      	lsrs	r2, r0, #3
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	08cb      	lsrs	r3, r1, #3
 8002a7e:	e64f      	b.n	8002720 <__aeabi_dsub+0x2f4>
 8002a80:	000a      	movs	r2, r1
 8002a82:	4302      	orrs	r2, r0
 8002a84:	d090      	beq.n	80029a8 <__aeabi_dsub+0x57c>
 8002a86:	464a      	mov	r2, r9
 8002a88:	075c      	lsls	r4, r3, #29
 8002a8a:	08d2      	lsrs	r2, r2, #3
 8002a8c:	4314      	orrs	r4, r2
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	0312      	lsls	r2, r2, #12
 8002a94:	4213      	tst	r3, r2
 8002a96:	d008      	beq.n	8002aaa <__aeabi_dsub+0x67e>
 8002a98:	08ce      	lsrs	r6, r1, #3
 8002a9a:	4216      	tst	r6, r2
 8002a9c:	d105      	bne.n	8002aaa <__aeabi_dsub+0x67e>
 8002a9e:	08c0      	lsrs	r0, r0, #3
 8002aa0:	0749      	lsls	r1, r1, #29
 8002aa2:	4308      	orrs	r0, r1
 8002aa4:	0004      	movs	r4, r0
 8002aa6:	465d      	mov	r5, fp
 8002aa8:	0033      	movs	r3, r6
 8002aaa:	0f61      	lsrs	r1, r4, #29
 8002aac:	00e2      	lsls	r2, r4, #3
 8002aae:	0749      	lsls	r1, r1, #29
 8002ab0:	08d2      	lsrs	r2, r2, #3
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	e678      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002ab6:	074b      	lsls	r3, r1, #29
 8002ab8:	08c2      	lsrs	r2, r0, #3
 8002aba:	431a      	orrs	r2, r3
 8002abc:	08cb      	lsrs	r3, r1, #3
 8002abe:	e632      	b.n	8002726 <__aeabi_dsub+0x2fa>
 8002ac0:	4448      	add	r0, r9
 8002ac2:	185b      	adds	r3, r3, r1
 8002ac4:	4548      	cmp	r0, r9
 8002ac6:	4192      	sbcs	r2, r2
 8002ac8:	4698      	mov	r8, r3
 8002aca:	4252      	negs	r2, r2
 8002acc:	4490      	add	r8, r2
 8002ace:	4643      	mov	r3, r8
 8002ad0:	0004      	movs	r4, r0
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	d400      	bmi.n	8002ad8 <__aeabi_dsub+0x6ac>
 8002ad6:	e61a      	b.n	800270e <__aeabi_dsub+0x2e2>
 8002ad8:	4642      	mov	r2, r8
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <__aeabi_dsub+0x6e8>)
 8002adc:	2601      	movs	r6, #1
 8002ade:	401a      	ands	r2, r3
 8002ae0:	4690      	mov	r8, r2
 8002ae2:	e614      	b.n	800270e <__aeabi_dsub+0x2e2>
 8002ae4:	4666      	mov	r6, ip
 8002ae6:	001f      	movs	r7, r3
 8002ae8:	3e20      	subs	r6, #32
 8002aea:	40f7      	lsrs	r7, r6
 8002aec:	2c20      	cmp	r4, #32
 8002aee:	d005      	beq.n	8002afc <__aeabi_dsub+0x6d0>
 8002af0:	2640      	movs	r6, #64	; 0x40
 8002af2:	1b36      	subs	r6, r6, r4
 8002af4:	40b3      	lsls	r3, r6
 8002af6:	464c      	mov	r4, r9
 8002af8:	431c      	orrs	r4, r3
 8002afa:	46a2      	mov	sl, r4
 8002afc:	4654      	mov	r4, sl
 8002afe:	1e63      	subs	r3, r4, #1
 8002b00:	419c      	sbcs	r4, r3
 8002b02:	433c      	orrs	r4, r7
 8002b04:	e5c8      	b.n	8002698 <__aeabi_dsub+0x26c>
 8002b06:	0011      	movs	r1, r2
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	e532      	b.n	8002574 <__aeabi_dsub+0x148>
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	000007ff 	.word	0x000007ff
 8002b14:	ff7fffff 	.word	0xff7fffff
 8002b18:	000007fe 	.word	0x000007fe
 8002b1c:	464a      	mov	r2, r9
 8002b1e:	1814      	adds	r4, r2, r0
 8002b20:	4284      	cmp	r4, r0
 8002b22:	4192      	sbcs	r2, r2
 8002b24:	185b      	adds	r3, r3, r1
 8002b26:	4698      	mov	r8, r3
 8002b28:	4252      	negs	r2, r2
 8002b2a:	4490      	add	r8, r2
 8002b2c:	e5e9      	b.n	8002702 <__aeabi_dsub+0x2d6>
 8002b2e:	4642      	mov	r2, r8
 8002b30:	4322      	orrs	r2, r4
 8002b32:	d100      	bne.n	8002b36 <__aeabi_dsub+0x70a>
 8002b34:	e6a6      	b.n	8002884 <__aeabi_dsub+0x458>
 8002b36:	e5ea      	b.n	800270e <__aeabi_dsub+0x2e2>
 8002b38:	074b      	lsls	r3, r1, #29
 8002b3a:	08c2      	lsrs	r2, r0, #3
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	08cb      	lsrs	r3, r1, #3
 8002b40:	e632      	b.n	80027a8 <__aeabi_dsub+0x37c>
 8002b42:	2200      	movs	r2, #0
 8002b44:	4901      	ldr	r1, [pc, #4]	; (8002b4c <__aeabi_dsub+0x720>)
 8002b46:	0013      	movs	r3, r2
 8002b48:	e514      	b.n	8002574 <__aeabi_dsub+0x148>
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	000007ff 	.word	0x000007ff

08002b50 <__aeabi_d2iz>:
 8002b50:	000a      	movs	r2, r1
 8002b52:	b530      	push	{r4, r5, lr}
 8002b54:	4c13      	ldr	r4, [pc, #76]	; (8002ba4 <__aeabi_d2iz+0x54>)
 8002b56:	0053      	lsls	r3, r2, #1
 8002b58:	0309      	lsls	r1, r1, #12
 8002b5a:	0005      	movs	r5, r0
 8002b5c:	0b09      	lsrs	r1, r1, #12
 8002b5e:	2000      	movs	r0, #0
 8002b60:	0d5b      	lsrs	r3, r3, #21
 8002b62:	0fd2      	lsrs	r2, r2, #31
 8002b64:	42a3      	cmp	r3, r4
 8002b66:	dd04      	ble.n	8002b72 <__aeabi_d2iz+0x22>
 8002b68:	480f      	ldr	r0, [pc, #60]	; (8002ba8 <__aeabi_d2iz+0x58>)
 8002b6a:	4283      	cmp	r3, r0
 8002b6c:	dd02      	ble.n	8002b74 <__aeabi_d2iz+0x24>
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <__aeabi_d2iz+0x5c>)
 8002b70:	18d0      	adds	r0, r2, r3
 8002b72:	bd30      	pop	{r4, r5, pc}
 8002b74:	2080      	movs	r0, #128	; 0x80
 8002b76:	0340      	lsls	r0, r0, #13
 8002b78:	4301      	orrs	r1, r0
 8002b7a:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <__aeabi_d2iz+0x60>)
 8002b7c:	1ac0      	subs	r0, r0, r3
 8002b7e:	281f      	cmp	r0, #31
 8002b80:	dd08      	ble.n	8002b94 <__aeabi_d2iz+0x44>
 8002b82:	480c      	ldr	r0, [pc, #48]	; (8002bb4 <__aeabi_d2iz+0x64>)
 8002b84:	1ac3      	subs	r3, r0, r3
 8002b86:	40d9      	lsrs	r1, r3
 8002b88:	000b      	movs	r3, r1
 8002b8a:	4258      	negs	r0, r3
 8002b8c:	2a00      	cmp	r2, #0
 8002b8e:	d1f0      	bne.n	8002b72 <__aeabi_d2iz+0x22>
 8002b90:	0018      	movs	r0, r3
 8002b92:	e7ee      	b.n	8002b72 <__aeabi_d2iz+0x22>
 8002b94:	4c08      	ldr	r4, [pc, #32]	; (8002bb8 <__aeabi_d2iz+0x68>)
 8002b96:	40c5      	lsrs	r5, r0
 8002b98:	46a4      	mov	ip, r4
 8002b9a:	4463      	add	r3, ip
 8002b9c:	4099      	lsls	r1, r3
 8002b9e:	000b      	movs	r3, r1
 8002ba0:	432b      	orrs	r3, r5
 8002ba2:	e7f2      	b.n	8002b8a <__aeabi_d2iz+0x3a>
 8002ba4:	000003fe 	.word	0x000003fe
 8002ba8:	0000041d 	.word	0x0000041d
 8002bac:	7fffffff 	.word	0x7fffffff
 8002bb0:	00000433 	.word	0x00000433
 8002bb4:	00000413 	.word	0x00000413
 8002bb8:	fffffbed 	.word	0xfffffbed

08002bbc <__aeabi_i2d>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	2800      	cmp	r0, #0
 8002bc0:	d016      	beq.n	8002bf0 <__aeabi_i2d+0x34>
 8002bc2:	17c3      	asrs	r3, r0, #31
 8002bc4:	18c5      	adds	r5, r0, r3
 8002bc6:	405d      	eors	r5, r3
 8002bc8:	0fc4      	lsrs	r4, r0, #31
 8002bca:	0028      	movs	r0, r5
 8002bcc:	f000 f894 	bl	8002cf8 <__clzsi2>
 8002bd0:	4a11      	ldr	r2, [pc, #68]	; (8002c18 <__aeabi_i2d+0x5c>)
 8002bd2:	1a12      	subs	r2, r2, r0
 8002bd4:	280a      	cmp	r0, #10
 8002bd6:	dc16      	bgt.n	8002c06 <__aeabi_i2d+0x4a>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	002e      	movs	r6, r5
 8002bdc:	3315      	adds	r3, #21
 8002bde:	409e      	lsls	r6, r3
 8002be0:	230b      	movs	r3, #11
 8002be2:	1a18      	subs	r0, r3, r0
 8002be4:	40c5      	lsrs	r5, r0
 8002be6:	0553      	lsls	r3, r2, #21
 8002be8:	032d      	lsls	r5, r5, #12
 8002bea:	0b2d      	lsrs	r5, r5, #12
 8002bec:	0d5b      	lsrs	r3, r3, #21
 8002bee:	e003      	b.n	8002bf8 <__aeabi_i2d+0x3c>
 8002bf0:	2400      	movs	r4, #0
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2500      	movs	r5, #0
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	051b      	lsls	r3, r3, #20
 8002bfa:	432b      	orrs	r3, r5
 8002bfc:	07e4      	lsls	r4, r4, #31
 8002bfe:	4323      	orrs	r3, r4
 8002c00:	0030      	movs	r0, r6
 8002c02:	0019      	movs	r1, r3
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
 8002c06:	380b      	subs	r0, #11
 8002c08:	4085      	lsls	r5, r0
 8002c0a:	0553      	lsls	r3, r2, #21
 8002c0c:	032d      	lsls	r5, r5, #12
 8002c0e:	2600      	movs	r6, #0
 8002c10:	0b2d      	lsrs	r5, r5, #12
 8002c12:	0d5b      	lsrs	r3, r3, #21
 8002c14:	e7f0      	b.n	8002bf8 <__aeabi_i2d+0x3c>
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	0000041e 	.word	0x0000041e

08002c1c <__aeabi_ui2d>:
 8002c1c:	b510      	push	{r4, lr}
 8002c1e:	1e04      	subs	r4, r0, #0
 8002c20:	d010      	beq.n	8002c44 <__aeabi_ui2d+0x28>
 8002c22:	f000 f869 	bl	8002cf8 <__clzsi2>
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <__aeabi_ui2d+0x48>)
 8002c28:	1a1b      	subs	r3, r3, r0
 8002c2a:	280a      	cmp	r0, #10
 8002c2c:	dc11      	bgt.n	8002c52 <__aeabi_ui2d+0x36>
 8002c2e:	220b      	movs	r2, #11
 8002c30:	0021      	movs	r1, r4
 8002c32:	1a12      	subs	r2, r2, r0
 8002c34:	40d1      	lsrs	r1, r2
 8002c36:	3015      	adds	r0, #21
 8002c38:	030a      	lsls	r2, r1, #12
 8002c3a:	055b      	lsls	r3, r3, #21
 8002c3c:	4084      	lsls	r4, r0
 8002c3e:	0b12      	lsrs	r2, r2, #12
 8002c40:	0d5b      	lsrs	r3, r3, #21
 8002c42:	e001      	b.n	8002c48 <__aeabi_ui2d+0x2c>
 8002c44:	2300      	movs	r3, #0
 8002c46:	2200      	movs	r2, #0
 8002c48:	051b      	lsls	r3, r3, #20
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	0020      	movs	r0, r4
 8002c4e:	0019      	movs	r1, r3
 8002c50:	bd10      	pop	{r4, pc}
 8002c52:	0022      	movs	r2, r4
 8002c54:	380b      	subs	r0, #11
 8002c56:	4082      	lsls	r2, r0
 8002c58:	055b      	lsls	r3, r3, #21
 8002c5a:	0312      	lsls	r2, r2, #12
 8002c5c:	2400      	movs	r4, #0
 8002c5e:	0b12      	lsrs	r2, r2, #12
 8002c60:	0d5b      	lsrs	r3, r3, #21
 8002c62:	e7f1      	b.n	8002c48 <__aeabi_ui2d+0x2c>
 8002c64:	0000041e 	.word	0x0000041e

08002c68 <__aeabi_f2d>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	0043      	lsls	r3, r0, #1
 8002c6c:	0246      	lsls	r6, r0, #9
 8002c6e:	0fc4      	lsrs	r4, r0, #31
 8002c70:	20fe      	movs	r0, #254	; 0xfe
 8002c72:	0e1b      	lsrs	r3, r3, #24
 8002c74:	1c59      	adds	r1, r3, #1
 8002c76:	0a75      	lsrs	r5, r6, #9
 8002c78:	4208      	tst	r0, r1
 8002c7a:	d00c      	beq.n	8002c96 <__aeabi_f2d+0x2e>
 8002c7c:	22e0      	movs	r2, #224	; 0xe0
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	4694      	mov	ip, r2
 8002c82:	076d      	lsls	r5, r5, #29
 8002c84:	0b36      	lsrs	r6, r6, #12
 8002c86:	4463      	add	r3, ip
 8002c88:	051b      	lsls	r3, r3, #20
 8002c8a:	4333      	orrs	r3, r6
 8002c8c:	07e4      	lsls	r4, r4, #31
 8002c8e:	4323      	orrs	r3, r4
 8002c90:	0028      	movs	r0, r5
 8002c92:	0019      	movs	r1, r3
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d114      	bne.n	8002cc4 <__aeabi_f2d+0x5c>
 8002c9a:	2d00      	cmp	r5, #0
 8002c9c:	d01b      	beq.n	8002cd6 <__aeabi_f2d+0x6e>
 8002c9e:	0028      	movs	r0, r5
 8002ca0:	f000 f82a 	bl	8002cf8 <__clzsi2>
 8002ca4:	280a      	cmp	r0, #10
 8002ca6:	dc1c      	bgt.n	8002ce2 <__aeabi_f2d+0x7a>
 8002ca8:	230b      	movs	r3, #11
 8002caa:	002a      	movs	r2, r5
 8002cac:	1a1b      	subs	r3, r3, r0
 8002cae:	40da      	lsrs	r2, r3
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	3315      	adds	r3, #21
 8002cb4:	409d      	lsls	r5, r3
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <__aeabi_f2d+0x88>)
 8002cb8:	0312      	lsls	r2, r2, #12
 8002cba:	1a1b      	subs	r3, r3, r0
 8002cbc:	055b      	lsls	r3, r3, #21
 8002cbe:	0b16      	lsrs	r6, r2, #12
 8002cc0:	0d5b      	lsrs	r3, r3, #21
 8002cc2:	e7e1      	b.n	8002c88 <__aeabi_f2d+0x20>
 8002cc4:	2d00      	cmp	r5, #0
 8002cc6:	d009      	beq.n	8002cdc <__aeabi_f2d+0x74>
 8002cc8:	0b32      	lsrs	r2, r6, #12
 8002cca:	2680      	movs	r6, #128	; 0x80
 8002ccc:	0336      	lsls	r6, r6, #12
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <__aeabi_f2d+0x8c>)
 8002cd0:	076d      	lsls	r5, r5, #29
 8002cd2:	4316      	orrs	r6, r2
 8002cd4:	e7d8      	b.n	8002c88 <__aeabi_f2d+0x20>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2600      	movs	r6, #0
 8002cda:	e7d5      	b.n	8002c88 <__aeabi_f2d+0x20>
 8002cdc:	2600      	movs	r6, #0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <__aeabi_f2d+0x8c>)
 8002ce0:	e7d2      	b.n	8002c88 <__aeabi_f2d+0x20>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	002a      	movs	r2, r5
 8002ce6:	3b0b      	subs	r3, #11
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	2500      	movs	r5, #0
 8002cec:	e7e3      	b.n	8002cb6 <__aeabi_f2d+0x4e>
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	00000389 	.word	0x00000389
 8002cf4:	000007ff 	.word	0x000007ff

08002cf8 <__clzsi2>:
 8002cf8:	211c      	movs	r1, #28
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	4298      	cmp	r0, r3
 8002d00:	d301      	bcc.n	8002d06 <__clzsi2+0xe>
 8002d02:	0c00      	lsrs	r0, r0, #16
 8002d04:	3910      	subs	r1, #16
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	4298      	cmp	r0, r3
 8002d0a:	d301      	bcc.n	8002d10 <__clzsi2+0x18>
 8002d0c:	0a00      	lsrs	r0, r0, #8
 8002d0e:	3908      	subs	r1, #8
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	4298      	cmp	r0, r3
 8002d14:	d301      	bcc.n	8002d1a <__clzsi2+0x22>
 8002d16:	0900      	lsrs	r0, r0, #4
 8002d18:	3904      	subs	r1, #4
 8002d1a:	a202      	add	r2, pc, #8	; (adr r2, 8002d24 <__clzsi2+0x2c>)
 8002d1c:	5c10      	ldrb	r0, [r2, r0]
 8002d1e:	1840      	adds	r0, r0, r1
 8002d20:	4770      	bx	lr
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	02020304 	.word	0x02020304
 8002d28:	01010101 	.word	0x01010101
	...

08002d34 <__clzdi2>:
 8002d34:	b510      	push	{r4, lr}
 8002d36:	2900      	cmp	r1, #0
 8002d38:	d103      	bne.n	8002d42 <__clzdi2+0xe>
 8002d3a:	f7ff ffdd 	bl	8002cf8 <__clzsi2>
 8002d3e:	3020      	adds	r0, #32
 8002d40:	e002      	b.n	8002d48 <__clzdi2+0x14>
 8002d42:	1c08      	adds	r0, r1, #0
 8002d44:	f7ff ffd8 	bl	8002cf8 <__clzsi2>
 8002d48:	bd10      	pop	{r4, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)

08002d4c <__divdi3>:
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4e:	4657      	mov	r7, sl
 8002d50:	464e      	mov	r6, r9
 8002d52:	4645      	mov	r5, r8
 8002d54:	46de      	mov	lr, fp
 8002d56:	b5e0      	push	{r5, r6, r7, lr}
 8002d58:	000f      	movs	r7, r1
 8002d5a:	0019      	movs	r1, r3
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	0006      	movs	r6, r0
 8002d60:	4698      	mov	r8, r3
 8002d62:	0010      	movs	r0, r2
 8002d64:	b083      	sub	sp, #12
 8002d66:	2f00      	cmp	r7, #0
 8002d68:	da07      	bge.n	8002d7a <__divdi3+0x2e>
 8002d6a:	0033      	movs	r3, r6
 8002d6c:	003c      	movs	r4, r7
 8002d6e:	2700      	movs	r7, #0
 8002d70:	425e      	negs	r6, r3
 8002d72:	41a7      	sbcs	r7, r4
 8002d74:	2301      	movs	r3, #1
 8002d76:	425b      	negs	r3, r3
 8002d78:	4698      	mov	r8, r3
 8002d7a:	2900      	cmp	r1, #0
 8002d7c:	da07      	bge.n	8002d8e <__divdi3+0x42>
 8002d7e:	4643      	mov	r3, r8
 8002d80:	43db      	mvns	r3, r3
 8002d82:	000c      	movs	r4, r1
 8002d84:	4698      	mov	r8, r3
 8002d86:	0003      	movs	r3, r0
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4258      	negs	r0, r3
 8002d8c:	41a1      	sbcs	r1, r4
 8002d8e:	0034      	movs	r4, r6
 8002d90:	003d      	movs	r5, r7
 8002d92:	4682      	mov	sl, r0
 8002d94:	4689      	mov	r9, r1
 8002d96:	42b9      	cmp	r1, r7
 8002d98:	d86a      	bhi.n	8002e70 <__divdi3+0x124>
 8002d9a:	d067      	beq.n	8002e6c <__divdi3+0x120>
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	4650      	mov	r0, sl
 8002da0:	f7ff ffc8 	bl	8002d34 <__clzdi2>
 8002da4:	4683      	mov	fp, r0
 8002da6:	0039      	movs	r1, r7
 8002da8:	0030      	movs	r0, r6
 8002daa:	f7ff ffc3 	bl	8002d34 <__clzdi2>
 8002dae:	465b      	mov	r3, fp
 8002db0:	1a1b      	subs	r3, r3, r0
 8002db2:	469c      	mov	ip, r3
 8002db4:	3b20      	subs	r3, #32
 8002db6:	469b      	mov	fp, r3
 8002db8:	d46b      	bmi.n	8002e92 <__divdi3+0x146>
 8002dba:	4658      	mov	r0, fp
 8002dbc:	4651      	mov	r1, sl
 8002dbe:	4081      	lsls	r1, r0
 8002dc0:	4660      	mov	r0, ip
 8002dc2:	000b      	movs	r3, r1
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	4081      	lsls	r1, r0
 8002dc8:	000a      	movs	r2, r1
 8002dca:	42bb      	cmp	r3, r7
 8002dcc:	d900      	bls.n	8002dd0 <__divdi3+0x84>
 8002dce:	e072      	b.n	8002eb6 <__divdi3+0x16a>
 8002dd0:	42bb      	cmp	r3, r7
 8002dd2:	d100      	bne.n	8002dd6 <__divdi3+0x8a>
 8002dd4:	e079      	b.n	8002eca <__divdi3+0x17e>
 8002dd6:	0034      	movs	r4, r6
 8002dd8:	003d      	movs	r5, r7
 8002dda:	4659      	mov	r1, fp
 8002ddc:	1aa4      	subs	r4, r4, r2
 8002dde:	419d      	sbcs	r5, r3
 8002de0:	2900      	cmp	r1, #0
 8002de2:	da00      	bge.n	8002de6 <__divdi3+0x9a>
 8002de4:	e074      	b.n	8002ed0 <__divdi3+0x184>
 8002de6:	2100      	movs	r1, #0
 8002de8:	2000      	movs	r0, #0
 8002dea:	2601      	movs	r6, #1
 8002dec:	9000      	str	r0, [sp, #0]
 8002dee:	9101      	str	r1, [sp, #4]
 8002df0:	4659      	mov	r1, fp
 8002df2:	408e      	lsls	r6, r1
 8002df4:	9601      	str	r6, [sp, #4]
 8002df6:	4661      	mov	r1, ip
 8002df8:	2601      	movs	r6, #1
 8002dfa:	408e      	lsls	r6, r1
 8002dfc:	4661      	mov	r1, ip
 8002dfe:	9600      	str	r6, [sp, #0]
 8002e00:	2900      	cmp	r1, #0
 8002e02:	d05f      	beq.n	8002ec4 <__divdi3+0x178>
 8002e04:	07d9      	lsls	r1, r3, #31
 8002e06:	0856      	lsrs	r6, r2, #1
 8002e08:	430e      	orrs	r6, r1
 8002e0a:	085f      	lsrs	r7, r3, #1
 8002e0c:	4661      	mov	r1, ip
 8002e0e:	2201      	movs	r2, #1
 8002e10:	2300      	movs	r3, #0
 8002e12:	e00c      	b.n	8002e2e <__divdi3+0xe2>
 8002e14:	42af      	cmp	r7, r5
 8002e16:	d101      	bne.n	8002e1c <__divdi3+0xd0>
 8002e18:	42a6      	cmp	r6, r4
 8002e1a:	d80a      	bhi.n	8002e32 <__divdi3+0xe6>
 8002e1c:	1ba4      	subs	r4, r4, r6
 8002e1e:	41bd      	sbcs	r5, r7
 8002e20:	1924      	adds	r4, r4, r4
 8002e22:	416d      	adcs	r5, r5
 8002e24:	3901      	subs	r1, #1
 8002e26:	18a4      	adds	r4, r4, r2
 8002e28:	415d      	adcs	r5, r3
 8002e2a:	2900      	cmp	r1, #0
 8002e2c:	d006      	beq.n	8002e3c <__divdi3+0xf0>
 8002e2e:	42af      	cmp	r7, r5
 8002e30:	d9f0      	bls.n	8002e14 <__divdi3+0xc8>
 8002e32:	3901      	subs	r1, #1
 8002e34:	1924      	adds	r4, r4, r4
 8002e36:	416d      	adcs	r5, r5
 8002e38:	2900      	cmp	r1, #0
 8002e3a:	d1f8      	bne.n	8002e2e <__divdi3+0xe2>
 8002e3c:	9800      	ldr	r0, [sp, #0]
 8002e3e:	9901      	ldr	r1, [sp, #4]
 8002e40:	465b      	mov	r3, fp
 8002e42:	1900      	adds	r0, r0, r4
 8002e44:	4169      	adcs	r1, r5
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	db4d      	blt.n	8002ee6 <__divdi3+0x19a>
 8002e4a:	002e      	movs	r6, r5
 8002e4c:	002c      	movs	r4, r5
 8002e4e:	40de      	lsrs	r6, r3
 8002e50:	4663      	mov	r3, ip
 8002e52:	40dc      	lsrs	r4, r3
 8002e54:	465b      	mov	r3, fp
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db55      	blt.n	8002f06 <__divdi3+0x1ba>
 8002e5a:	0034      	movs	r4, r6
 8002e5c:	409c      	lsls	r4, r3
 8002e5e:	0023      	movs	r3, r4
 8002e60:	4664      	mov	r4, ip
 8002e62:	40a6      	lsls	r6, r4
 8002e64:	0032      	movs	r2, r6
 8002e66:	1a80      	subs	r0, r0, r2
 8002e68:	4199      	sbcs	r1, r3
 8002e6a:	e003      	b.n	8002e74 <__divdi3+0x128>
 8002e6c:	42b0      	cmp	r0, r6
 8002e6e:	d995      	bls.n	8002d9c <__divdi3+0x50>
 8002e70:	2000      	movs	r0, #0
 8002e72:	2100      	movs	r1, #0
 8002e74:	4643      	mov	r3, r8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <__divdi3+0x138>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	000c      	movs	r4, r1
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4258      	negs	r0, r3
 8002e82:	41a1      	sbcs	r1, r4
 8002e84:	b003      	add	sp, #12
 8002e86:	bcf0      	pop	{r4, r5, r6, r7}
 8002e88:	46bb      	mov	fp, r7
 8002e8a:	46b2      	mov	sl, r6
 8002e8c:	46a9      	mov	r9, r5
 8002e8e:	46a0      	mov	r8, r4
 8002e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e92:	4662      	mov	r2, ip
 8002e94:	4648      	mov	r0, r9
 8002e96:	2320      	movs	r3, #32
 8002e98:	4651      	mov	r1, sl
 8002e9a:	4090      	lsls	r0, r2
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	40d9      	lsrs	r1, r3
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	9100      	str	r1, [sp, #0]
 8002ea4:	9900      	ldr	r1, [sp, #0]
 8002ea6:	4660      	mov	r0, ip
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	4651      	mov	r1, sl
 8002eac:	4081      	lsls	r1, r0
 8002eae:	000a      	movs	r2, r1
 8002eb0:	42bb      	cmp	r3, r7
 8002eb2:	d800      	bhi.n	8002eb6 <__divdi3+0x16a>
 8002eb4:	e78c      	b.n	8002dd0 <__divdi3+0x84>
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2000      	movs	r0, #0
 8002eba:	9000      	str	r0, [sp, #0]
 8002ebc:	9101      	str	r1, [sp, #4]
 8002ebe:	4661      	mov	r1, ip
 8002ec0:	2900      	cmp	r1, #0
 8002ec2:	d19f      	bne.n	8002e04 <__divdi3+0xb8>
 8002ec4:	9800      	ldr	r0, [sp, #0]
 8002ec6:	9901      	ldr	r1, [sp, #4]
 8002ec8:	e7d4      	b.n	8002e74 <__divdi3+0x128>
 8002eca:	42b1      	cmp	r1, r6
 8002ecc:	d8f3      	bhi.n	8002eb6 <__divdi3+0x16a>
 8002ece:	e782      	b.n	8002dd6 <__divdi3+0x8a>
 8002ed0:	4661      	mov	r1, ip
 8002ed2:	2620      	movs	r6, #32
 8002ed4:	2701      	movs	r7, #1
 8002ed6:	1a76      	subs	r6, r6, r1
 8002ed8:	2000      	movs	r0, #0
 8002eda:	2100      	movs	r1, #0
 8002edc:	40f7      	lsrs	r7, r6
 8002ede:	9000      	str	r0, [sp, #0]
 8002ee0:	9101      	str	r1, [sp, #4]
 8002ee2:	9701      	str	r7, [sp, #4]
 8002ee4:	e787      	b.n	8002df6 <__divdi3+0xaa>
 8002ee6:	4662      	mov	r2, ip
 8002ee8:	2320      	movs	r3, #32
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	002a      	movs	r2, r5
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	0026      	movs	r6, r4
 8002ef2:	0013      	movs	r3, r2
 8002ef4:	4662      	mov	r2, ip
 8002ef6:	40d6      	lsrs	r6, r2
 8002ef8:	002c      	movs	r4, r5
 8002efa:	431e      	orrs	r6, r3
 8002efc:	4663      	mov	r3, ip
 8002efe:	40dc      	lsrs	r4, r3
 8002f00:	465b      	mov	r3, fp
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	daa9      	bge.n	8002e5a <__divdi3+0x10e>
 8002f06:	4662      	mov	r2, ip
 8002f08:	2320      	movs	r3, #32
 8002f0a:	0035      	movs	r5, r6
 8002f0c:	4094      	lsls	r4, r2
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	40dd      	lsrs	r5, r3
 8002f12:	0023      	movs	r3, r4
 8002f14:	432b      	orrs	r3, r5
 8002f16:	e7a3      	b.n	8002e60 <__divdi3+0x114>

08002f18 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002f1c:	f001 fefe 	bl	8004d1c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002f20:	f000 f80e 	bl	8002f40 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002f2e:	2301      	movs	r3, #1
 8002f30:	425b      	negs	r3, r3
 8002f32:	0018      	movs	r0, r3
 8002f34:	f019 fa14 	bl	801c360 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <LoRaWAN_Init>:
//MX_I2C1_Init(hi2c1);
//MX_USART2_Init();
/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af04      	add	r7, sp, #16
	   	bmp280.addr = BMP280_I2C_ADDRESS_0;
	   	bmp280.i2c = &hi2c1;
*/
	   //float pressure1, temperature1, humidity1;
  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 8002f46:	2002      	movs	r0, #2
 8002f48:	f002 fd9e 	bl	8005a88 <BSP_LED_Init>
  LED_Init(LED_RED1);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f002 fd9b 	bl	8005a88 <BSP_LED_Init>
  LED_Init(LED_RED2);
 8002f52:	2003      	movs	r0, #3
 8002f54:	f002 fd98 	bl	8005a88 <BSP_LED_Init>
  /* Get LoRa APP version*/
//  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, " ##### Версия протокола:        V%X.%X.%X\r\n",
 8002f58:	4b3c      	ldr	r3, [pc, #240]	; (800304c <LoRaWAN_Init+0x10c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	9202      	str	r2, [sp, #8]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	9201      	str	r2, [sp, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	9200      	str	r2, [sp, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2002      	movs	r0, #2
 8002f6c:	f018 fe36 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT)); // версия радио Middleware
  // APP_LOG(TS_OFF, VLEVEL_M, "MW_:   V%X.%X.%X\r\n",
//  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== EEEPROM EST====\r\n");
  //	 (uint8_t) buffer[20]);
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002f70:	4b37      	ldr	r3, [pc, #220]	; (8003050 <LoRaWAN_Init+0x110>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	4251      	negs	r1, r2
 8002f76:	4837      	ldr	r0, [pc, #220]	; (8003054 <LoRaWAN_Init+0x114>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	9200      	str	r2, [sp, #0]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f019 fcc1 	bl	801c904 <UTIL_TIMER_Create>
  // HAL_LPTIM_Counter_Start_IT(&hlptim,1000);
 // HAL_LPTIM_TimeOut_Start(&TxLedTimer, uint32_t Period, uint32_t Timeout);
  //  HAL_LPTIM_TimeOut_Start(&TxLedTimer,5000,1000);
   UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <LoRaWAN_Init+0x118>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	4251      	negs	r1, r2
 8002f88:	4834      	ldr	r0, [pc, #208]	; (800305c <LoRaWAN_Init+0x11c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	9200      	str	r2, [sp, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f019 fcb8 	bl	801c904 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <LoRaWAN_Init+0x120>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	4251      	negs	r1, r2
 8002f9a:	4832      	ldr	r0, [pc, #200]	; (8003064 <LoRaWAN_Init+0x124>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	9200      	str	r2, [sp, #0]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f019 fcaf 	bl	801c904 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);// 3 стр отрубают светодиоды если их не будет,
 8002fa6:	23fa      	movs	r3, #250	; 0xfa
 8002fa8:	005a      	lsls	r2, r3, #1
 8002faa:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <LoRaWAN_Init+0x114>)
 8002fac:	0011      	movs	r1, r2
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f019 fdd0 	bl	801cb54 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002fb4:	23fa      	movs	r3, #250	; 0xfa
 8002fb6:	005a      	lsls	r2, r3, #1
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <LoRaWAN_Init+0x11c>)
 8002fba:	0011      	movs	r1, r2
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f019 fdc9 	bl	801cb54 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002fc2:	23fa      	movs	r3, #250	; 0xfa
 8002fc4:	005a      	lsls	r2, r3, #1
 8002fc6:	4b27      	ldr	r3, [pc, #156]	; (8003064 <LoRaWAN_Init+0x124>)
 8002fc8:	0011      	movs	r1, r2
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f019 fdc2 	bl	801cb54 <UTIL_TIMER_SetPeriod>
 // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <LoRaWAN_Init+0x128>)
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f019 faa4 	bl	801c524 <UTIL_SEQ_RegTask>
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <LoRaWAN_Init+0x12c>)
 8002fde:	001a      	movs	r2, r3
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2002      	movs	r0, #2
 8002fe4:	f019 fa9e 	bl	801c524 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8002fe8:	f000 fb78 	bl	80036dc <LoraInfo_Init>
  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8002fec:	4b20      	ldr	r3, [pc, #128]	; (8003070 <LoRaWAN_Init+0x130>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f00a fe14 	bl	800dc1c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <LoRaWAN_Init+0x134>)
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f00a fe56 	bl	800dca8 <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <LoRaWAN_Init+0x124>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f019 fcb8 	bl	801c974 <UTIL_TIMER_Start>
  // HAL_LPTIM_Counter_Start_IT(&JoinLedTimer,1000); // попытка переделать светодиодом под LPTIM
  LmHandlerJoin(ActivationType);
 8003004:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <LoRaWAN_Init+0x138>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	0018      	movs	r0, r3
 800300a:	f00a ff5f 	bl	800decc <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <LoRaWAN_Init+0x13c>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d113      	bne.n	800303e <LoRaWAN_Init+0xfe>
  {
    /* send every time timer elapses */

    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <LoRaWAN_Init+0x140>)
 8003018:	2201      	movs	r2, #1
 800301a:	4251      	negs	r1, r2
 800301c:	4819      	ldr	r0, [pc, #100]	; (8003084 <LoRaWAN_Init+0x144>)
 800301e:	2200      	movs	r2, #0
 8003020:	9200      	str	r2, [sp, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	f019 fc6e 	bl	801c904 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8003028:	4a17      	ldr	r2, [pc, #92]	; (8003088 <LoRaWAN_Init+0x148>)
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <LoRaWAN_Init+0x144>)
 800302c:	0011      	movs	r1, r2
 800302e:	0018      	movs	r0, r3
 8003030:	f019 fd90 	bl	801cb54 <UTIL_TIMER_SetPeriod>
    //  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    //  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // NEW
      UTIL_TIMER_Start(&TxTimer);
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <LoRaWAN_Init+0x144>)
 8003036:	0018      	movs	r0, r3
 8003038:	f019 fc9c 	bl	801c974 <UTIL_TIMER_Start>
  /* bmp280_init_default_params(&bmp280.params);
   	bmp280.addr = BMP280_I2C_ADDRESS_0;
   	bmp280.i2c = &hi2c1;
   	*/
  /* USER CODE END LoRaWAN_Init_Last */
}
 800303c:	e003      	b.n	8003046 <LoRaWAN_Init+0x106>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800303e:	2101      	movs	r1, #1
 8003040:	2000      	movs	r0, #0
 8003042:	f002 fde3 	bl	8005c0c <BSP_PB_Init>
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	0801def0 	.word	0x0801def0
 8003050:	08003435 	.word	0x08003435
 8003054:	20000300 	.word	0x20000300
 8003058:	0800344b 	.word	0x0800344b
 800305c:	20000318 	.word	0x20000318
 8003060:	08003461 	.word	0x08003461
 8003064:	20000330 	.word	0x20000330
 8003068:	0800de11 	.word	0x0800de11
 800306c:	080031c1 	.word	0x080031c1
 8003070:	2000000c 	.word	0x2000000c
 8003074:	2000002c 	.word	0x2000002c
 8003078:	20000008 	.word	0x20000008
 800307c:	200002e7 	.word	0x200002e7
 8003080:	08003411 	.word	0x08003411
 8003084:	200002e8 	.word	0x200002e8
 8003088:	00002710 	.word	0x00002710

0800308c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800308c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af06      	add	r7, sp, #24
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d100      	bne.n	800309e <OnRxData+0x12>
 800309c:	e07a      	b.n	8003194 <OnRxData+0x108>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d100      	bne.n	80030a6 <OnRxData+0x1a>
 80030a4:	e076      	b.n	8003194 <OnRxData+0x108>
  {
    LED_On(LED_BLUE);
 80030a6:	2002      	movs	r0, #2
 80030a8:	f002 fd5c 	bl	8005b64 <BSP_LED_On>
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== Индикация приёма данных ==========\r\n");
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <OnRxData+0x11c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	2002      	movs	r0, #2
 80030b4:	f018 fd92 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	7b12      	ldrb	r2, [r2, #12]
 80030c0:	b252      	sxtb	r2, r2
 80030c2:	0011      	movs	r1, r2
 80030c4:	4a39      	ldr	r2, [pc, #228]	; (80031ac <OnRxData+0x120>)
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	588a      	ldr	r2, [r1, r2]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	7809      	ldrb	r1, [r1, #0]
 80030ce:	0008      	movs	r0, r1
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	7889      	ldrb	r1, [r1, #2]
 80030d4:	b249      	sxtb	r1, r1
 80030d6:	000c      	movs	r4, r1
 80030d8:	6839      	ldr	r1, [r7, #0]
 80030da:	78c9      	ldrb	r1, [r1, #3]
 80030dc:	b249      	sxtb	r1, r1
 80030de:	000d      	movs	r5, r1
 80030e0:	6839      	ldr	r1, [r7, #0]
 80030e2:	7909      	ldrb	r1, [r1, #4]
 80030e4:	b249      	sxtb	r1, r1
 80030e6:	000e      	movs	r6, r1
 80030e8:	4931      	ldr	r1, [pc, #196]	; (80031b0 <OnRxData+0x124>)
 80030ea:	9605      	str	r6, [sp, #20]
 80030ec:	9504      	str	r5, [sp, #16]
 80030ee:	9403      	str	r4, [sp, #12]
 80030f0:	9002      	str	r0, [sp, #8]
 80030f2:	9201      	str	r2, [sp, #4]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	000b      	movs	r3, r1
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	2003      	movs	r0, #3
 80030fe:	f018 fd6d 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d020      	beq.n	800314c <OnRxData+0xc0>
 800310a:	2b03      	cmp	r3, #3
 800310c:	d144      	bne.n	8003198 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	785b      	ldrb	r3, [r3, #1]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d116      	bne.n	8003144 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d00d      	beq.n	800313c <OnRxData+0xb0>
 8003120:	dc12      	bgt.n	8003148 <OnRxData+0xbc>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <OnRxData+0xa0>
 8003126:	2b01      	cmp	r3, #1
 8003128:	d004      	beq.n	8003134 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800312a:	e00d      	b.n	8003148 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800312c:	2000      	movs	r0, #0
 800312e:	f00b f827 	bl	800e180 <LmHandlerRequestClass>
              break;
 8003132:	e00a      	b.n	800314a <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 8003134:	2001      	movs	r0, #1
 8003136:	f00b f823 	bl	800e180 <LmHandlerRequestClass>
              break;
 800313a:	e006      	b.n	800314a <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800313c:	2002      	movs	r0, #2
 800313e:	f00b f81f 	bl	800e180 <LmHandlerRequestClass>
              break;
 8003142:	e002      	b.n	800314a <OnRxData+0xbe>
          }
        }
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	e02a      	b.n	800319e <OnRxData+0x112>
              break;
 8003148:	46c0      	nop			; (mov r8, r8)
        break;
 800314a:	e028      	b.n	800319e <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d123      	bne.n	800319c <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	4013      	ands	r3, r2
 800315e:	b2da      	uxtb	r2, r3
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <OnRxData+0x128>)
 8003162:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <OnRxData+0x128>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <OnRxData+0x12c>)
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	2003      	movs	r0, #3
 8003174:	f018 fd32 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>

            LED_Off(LED_RED1);
 8003178:	2001      	movs	r0, #1
 800317a:	f002 fd0f 	bl	8005b9c <BSP_LED_Off>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");

            LED_On(LED_RED1);
          }
        }
        break;
 800317e:	e00d      	b.n	800319c <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8003180:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <OnRxData+0x130>)
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	2003      	movs	r0, #3
 8003188:	f018 fd28 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 800318c:	2001      	movs	r0, #1
 800318e:	f002 fce9 	bl	8005b64 <BSP_LED_On>
        break;
 8003192:	e003      	b.n	800319c <OnRxData+0x110>
        /* USER CODE BEGIN OnRxData_Switch_default */

        /* USER CODE END OnRxData_Switch_default */
        break;
    }
  }
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	e002      	b.n	800319e <OnRxData+0x112>
        break;
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	e000      	b.n	800319e <OnRxData+0x112>
        break;
 800319c:	46c0      	nop			; (mov r8, r8)

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b003      	add	sp, #12
 80031a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	0801df2c 	.word	0x0801df2c
 80031ac:	20000034 	.word	0x20000034
 80031b0:	0801df7c 	.word	0x0801df7c
 80031b4:	200002e6 	.word	0x200002e6
 80031b8:	0801dfc4 	.word	0x0801dfc4
 80031bc:	0801dfd0 	.word	0x0801dfd0

080031c0 <SendTxData>:

static void SendTxData(void)
{
 80031c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031c2:	b0e3      	sub	sp, #396	; 0x18c
 80031c4:	af02      	add	r7, sp, #8
	// uint8_t payload = "textovik";
	 uint16_t pressure = 0;
 80031c6:	23bf      	movs	r3, #191	; 0xbf
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2200      	movs	r2, #0
 80031ce:	801a      	strh	r2, [r3, #0]
	 int16_t temperature = 0;
 80031d0:	23be      	movs	r3, #190	; 0xbe
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	2200      	movs	r2, #0
 80031d8:	801a      	strh	r2, [r3, #0]
  	//int16_t temperature = 0;
  	uint16_t Defbuff;  // для счётчика с охранной кнопки
  sensor_t sensor_data;
  uint16_t size;
  uint8_t Data[256];
  UTIL_TIMER_Time_t nextTxIn = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	63bb      	str	r3, [r7, #56]	; 0x38
  bmp280_params_t params;
	RTC_TimeTypeDef sTime1;
  	RTC_DateTypeDef sDate1;
  	uint8_t buffer[20];
  	volatile uint16_t adc = 0;
 80031de:	4b7f      	ldr	r3, [pc, #508]	; (80033dc <SendTxData+0x21c>)
 80031e0:	22c0      	movs	r2, #192	; 0xc0
 80031e2:	0052      	lsls	r2, r2, #1
 80031e4:	4694      	mov	ip, r2
 80031e6:	44bc      	add	ip, r7
 80031e8:	4463      	add	r3, ip
 80031ea:	2200      	movs	r2, #0
 80031ec:	801a      	strh	r2, [r3, #0]
#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
   uint16_t humidity = 0;
 80031ee:	23bd      	movs	r3, #189	; 0xbd
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2200      	movs	r2, #0
 80031f6:	801a      	strh	r2, [r3, #0]
  uint32_t i = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	22ba      	movs	r2, #186	; 0xba
 80031fc:	0052      	lsls	r2, r2, #1
 80031fe:	18ba      	adds	r2, r7, r2
 8003200:	6013      	str	r3, [r2, #0]
  int32_t latitude = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	22b8      	movs	r2, #184	; 0xb8
 8003206:	0052      	lsls	r2, r2, #1
 8003208:	18ba      	adds	r2, r7, r2
 800320a:	6013      	str	r3, [r2, #0]
  int32_t longitude = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	22b6      	movs	r2, #182	; 0xb6
 8003210:	0052      	lsls	r2, r2, #1
 8003212:	18ba      	adds	r2, r7, r2
 8003214:	6013      	str	r3, [r2, #0]
  uint16_t altitudeGps = 0;
 8003216:	23b5      	movs	r3, #181	; 0xb5
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2200      	movs	r2, #0
 800321e:	801a      	strh	r2, [r3, #0]
  #else
   temperature = (SYS_GetTemperatureLevel() >> 8);
  #endif  /* SENSOR_ENABLED */
  /*  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */

    AppData.Port = LORAWAN_USER_APP_PORT;
 8003220:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <SendTxData+0x220>)
 8003222:	2202      	movs	r2, #2
 8003224:	701a      	strb	r2, [r3, #0]
  //
  // MX_I2C1_Init();
 // MX_USART2_Init();
  // MX_I2C1_Init();
  // BSP_SPI1_Init();
  BSP_I2C1_Init();
 8003226:	f002 fae7 	bl	80057f8 <BSP_I2C1_Init>
  MX_ADC_Init();
 800322a:	f000 fa8b 	bl	8003744 <MX_ADC_Init>
  MX_LPTIM1_Init();
 800322e:	f000 f9cf 	bl	80035d0 <MX_LPTIM1_Init>

  HAL_LPTIM_Encoder_Start_IT(&hlptim1, 1000);
 8003232:	23fa      	movs	r3, #250	; 0xfa
 8003234:	009a      	lsls	r2, r3, #2
 8003236:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <SendTxData+0x224>)
 8003238:	0011      	movs	r1, r2
 800323a:	0018      	movs	r0, r3
 800323c:	f001 fa8a 	bl	8004754 <HAL_LPTIM_Encoder_Start_IT>
    		 */
  // MX_I2C1_Init();
 // HAL_I2C_GetState;// cntGetValue(&Defbuff);  // здесь будет сбор значения вскрытий// HTS221_Init(pObj);//HTS221_GetCapabilities(pObj, Capabilities);  //  HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
    //	  HAL_Delay(200);  //	UTIL_TIMER_Create(&ReadLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);  // UTIL_TIMER_SetPeriod(&ReadLedTimer, 5000);  	//UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
  bmp280_init_default_params(&bmp280.params);
 8003240:	4b69      	ldr	r3, [pc, #420]	; (80033e8 <SendTxData+0x228>)
 8003242:	0018      	movs	r0, r3
 8003244:	f01a f832 	bl	801d2ac <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003248:	4b68      	ldr	r3, [pc, #416]	; (80033ec <SendTxData+0x22c>)
 800324a:	2276      	movs	r2, #118	; 0x76
 800324c:	849a      	strh	r2, [r3, #36]	; 0x24
    	bmp280.i2c = &hi2c1;
 800324e:	4b67      	ldr	r3, [pc, #412]	; (80033ec <SendTxData+0x22c>)
 8003250:	4a67      	ldr	r2, [pc, #412]	; (80033f0 <SendTxData+0x230>)
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
    	bmp280_init(&bmp280, &bmp280.params);
 8003254:	4a64      	ldr	r2, [pc, #400]	; (80033e8 <SendTxData+0x228>)
 8003256:	4b65      	ldr	r3, [pc, #404]	; (80033ec <SendTxData+0x22c>)
 8003258:	0011      	movs	r1, r2
 800325a:	0018      	movs	r0, r3
 800325c:	f01a f9ba 	bl	801d5d4 <bmp280_init>
    	 // HTS221_GetCapabilities(&hts221, temperature);
  // bmp280.i2c = &hi2c1;
   // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  //  bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1); старое
    	// HAL_Delay(100);
    	 bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
 8003260:	23aa      	movs	r3, #170	; 0xaa
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	25ae      	movs	r5, #174	; 0xae
 8003268:	006d      	lsls	r5, r5, #1
 800326a:	197a      	adds	r2, r7, r5
 800326c:	24ac      	movs	r4, #172	; 0xac
 800326e:	0064      	lsls	r4, r4, #1
 8003270:	1939      	adds	r1, r7, r4
 8003272:	485e      	ldr	r0, [pc, #376]	; (80033ec <SendTxData+0x22c>)
 8003274:	f01a fd1c 	bl	801dcb0 <bmp280_read_float>

    	 if(bmp280.dig_T1>=0)
    	//*/
    	{
//    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Temp, hum sensor Init ====\r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Датчик измерения активен ====\r\n");
 8003278:	4b5e      	ldr	r3, [pc, #376]	; (80033f4 <SendTxData+0x234>)
 800327a:	2200      	movs	r2, #0
 800327c:	2100      	movs	r1, #0
 800327e:	2002      	movs	r0, #2
 8003280:	f018 fcac 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>

//    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Sensor initialization failed ====\r\n");
    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Ошибка инициализации датчика  ====\r\n");
    	 }

    	 if(temperature1>=0 && temperature1<=30 && pressure1>=0)
 8003284:	193b      	adds	r3, r7, r4
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2100      	movs	r1, #0
 800328a:	1c18      	adds	r0, r3, #0
 800328c:	f7fd f928 	bl	80004e0 <__aeabi_fcmpge>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d016      	beq.n	80032c2 <SendTxData+0x102>
 8003294:	193b      	adds	r3, r7, r4
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4957      	ldr	r1, [pc, #348]	; (80033f8 <SendTxData+0x238>)
 800329a:	1c18      	adds	r0, r3, #0
 800329c:	f7fd f90c 	bl	80004b8 <__aeabi_fcmple>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d00e      	beq.n	80032c2 <SendTxData+0x102>
 80032a4:	197b      	adds	r3, r7, r5
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2100      	movs	r1, #0
 80032aa:	1c18      	adds	r0, r3, #0
 80032ac:	f7fd f918 	bl	80004e0 <__aeabi_fcmpge>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d006      	beq.n	80032c2 <SendTxData+0x102>
    	     	//*/
    	  {
//    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== All parameters normal ====\r\n");
    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Параметры окружающей среды в норме ====\r\n");
 80032b4:	4b51      	ldr	r3, [pc, #324]	; (80033fc <SendTxData+0x23c>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	2100      	movs	r1, #0
 80032ba:	2002      	movs	r0, #2
 80032bc:	f018 fc8e 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
 80032c0:	e005      	b.n	80032ce <SendTxData+0x10e>
    	  } //*/
    	     	 else
    	   {
//    	     		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Accident ====\r\n");
    	       		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n ==== Отклонение от нормы ====\r\n");
 80032c2:	4b4f      	ldr	r3, [pc, #316]	; (8003400 <SendTxData+0x240>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	2100      	movs	r1, #0
 80032c8:	2002      	movs	r0, #2
 80032ca:	f018 fc87 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
    	   }
    	 numberdev = 0x01;  // new 0b00010001
 80032ce:	23fe      	movs	r3, #254	; 0xfe
 80032d0:	059b      	lsls	r3, r3, #22
 80032d2:	20b2      	movs	r0, #178	; 0xb2
 80032d4:	0040      	lsls	r0, r0, #1
 80032d6:	183a      	adds	r2, r7, r0
 80032d8:	6013      	str	r3, [r2, #0]
    	 per = 0xA; // new
 80032da:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <SendTxData+0x244>)
 80032dc:	26b0      	movs	r6, #176	; 0xb0
 80032de:	0076      	lsls	r6, r6, #1
 80032e0:	19ba      	adds	r2, r7, r6
 80032e2:	6013      	str	r3, [r2, #0]
  // AppData.Buffer[i++] = (uint8_t)temperature1 >> 8 ;
  //  AppData.Buffer[i++] = (int)humidity1 >> 16;


    //AppData.Buffer[i++] = 0x00;
     AppData.Buffer[i++] = numberdev; // new номер устройства
 80032e4:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <SendTxData+0x220>)
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	25ba      	movs	r5, #186	; 0xba
 80032ea:	006d      	lsls	r5, r5, #1
 80032ec:	197b      	adds	r3, r7, r5
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	1c59      	adds	r1, r3, #1
 80032f2:	197c      	adds	r4, r7, r5
 80032f4:	6021      	str	r1, [r4, #0]
 80032f6:	18d4      	adds	r4, r2, r3
 80032f8:	183b      	adds	r3, r7, r0
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	f7fd f966 	bl	80005cc <__aeabi_f2uiz>
 8003300:	0003      	movs	r3, r0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	7023      	strb	r3, [r4, #0]
     AppData.Buffer[i++] = temperature1;
 8003306:	23ac      	movs	r3, #172	; 0xac
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <SendTxData+0x220>)
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	197b      	adds	r3, r7, r5
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1c59      	adds	r1, r3, #1
 8003318:	197c      	adds	r4, r7, r5
 800331a:	6021      	str	r1, [r4, #0]
 800331c:	18d4      	adds	r4, r2, r3
 800331e:	f7fd f955 	bl	80005cc <__aeabi_f2uiz>
 8003322:	0003      	movs	r3, r0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	7023      	strb	r3, [r4, #0]
     AppData.Buffer[i++] = humidity1;
 8003328:	23aa      	movs	r3, #170	; 0xaa
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <SendTxData+0x220>)
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	197b      	adds	r3, r7, r5
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	1c59      	adds	r1, r3, #1
 800333a:	197c      	adds	r4, r7, r5
 800333c:	6021      	str	r1, [r4, #0]
 800333e:	18d4      	adds	r4, r2, r3
 8003340:	f7fd f944 	bl	80005cc <__aeabi_f2uiz>
 8003344:	0003      	movs	r3, r0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	7023      	strb	r3, [r4, #0]
     AppData.Buffer[i++] = per; // new период включения прибора
 800334a:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <SendTxData+0x220>)
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	197b      	adds	r3, r7, r5
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1c59      	adds	r1, r3, #1
 8003354:	1978      	adds	r0, r7, r5
 8003356:	6001      	str	r1, [r0, #0]
 8003358:	18d4      	adds	r4, r2, r3
 800335a:	19bb      	adds	r3, r7, r6
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	f7fd f935 	bl	80005cc <__aeabi_f2uiz>
 8003362:	0003      	movs	r3, r0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	7023      	strb	r3, [r4, #0]
     // AppData.Buffer[i++] = BAT_CR2032; // new заряд батареи, CR2032 старая батарейка, новая LS14500
  // SYS_GetBatteryLevel(); // new заряд батареи
  GetBatteryLevel(); // new заряд батареи
 8003368:	f001 fd04 	bl	8004d74 <GetBatteryLevel>
  // AppData.Buffer[i++] = batteryLevel; // new заряд батареи
     AppData.Buffer[i++] = GetBatteryLevel();
 800336c:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <SendTxData+0x220>)
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	197b      	adds	r3, r7, r5
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	1c59      	adds	r1, r3, #1
 8003376:	1978      	adds	r0, r7, r5
 8003378:	6001      	str	r1, [r0, #0]
 800337a:	18d4      	adds	r4, r2, r3
 800337c:	f001 fcfa 	bl	8004d74 <GetBatteryLevel>
 8003380:	0003      	movs	r3, r0
 8003382:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);

	   }
*/
  AppData.BufferSize = i;
 8003384:	197b      	adds	r3, r7, r5
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <SendTxData+0x220>)
 800338c:	705a      	strb	r2, [r3, #1]
  /*  #endif /* CAYENNE_LPP */

   if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800338e:	2338      	movs	r3, #56	; 0x38
 8003390:	18fa      	adds	r2, r7, r3
 8003392:	4813      	ldr	r0, [pc, #76]	; (80033e0 <SendTxData+0x220>)
 8003394:	2300      	movs	r3, #0
 8003396:	2100      	movs	r1, #0
 8003398:	f00a fe20 	bl	800dfdc <LmHandlerSend>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d106      	bne.n	80033ae <SendTxData+0x1ee>
  {
	  APP_LOG(TS_OFF, VLEVEL_L, "Запрос на подключение отправлен\r\n");
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <SendTxData+0x248>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	2100      	movs	r1, #0
 80033a6:	2001      	movs	r0, #1
 80033a8:	f018 fc18 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_L, "Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
  }
  /* USER CODE BEGIN SendTxData_2 */
  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /* USER CODE END SendTxData_2 */
}
 80033ac:	e011      	b.n	80033d2 <SendTxData+0x212>
  else if (nextTxIn > 0)
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00e      	beq.n	80033d2 <SendTxData+0x212>
    APP_LOG(TS_OFF, VLEVEL_L, "Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
 80033b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b6:	22fa      	movs	r2, #250	; 0xfa
 80033b8:	0091      	lsls	r1, r2, #2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f7fc feac 	bl	8000118 <__udivsi3>
 80033c0:	0003      	movs	r3, r0
 80033c2:	001a      	movs	r2, r3
 80033c4:	4b11      	ldr	r3, [pc, #68]	; (800340c <SendTxData+0x24c>)
 80033c6:	9200      	str	r2, [sp, #0]
 80033c8:	2200      	movs	r2, #0
 80033ca:	2100      	movs	r1, #0
 80033cc:	2001      	movs	r0, #1
 80033ce:	f018 fc05 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b061      	add	sp, #388	; 0x184
 80033d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	fffffe82 	.word	0xfffffe82
 80033e0:	20000000 	.word	0x20000000
 80033e4:	200013d8 	.word	0x200013d8
 80033e8:	200014ec 	.word	0x200014ec
 80033ec:	200014c0 	.word	0x200014c0
 80033f0:	20001330 	.word	0x20001330
 80033f4:	0801dfdc 	.word	0x0801dfdc
 80033f8:	41f00000 	.word	0x41f00000
 80033fc:	0801e01c 	.word	0x0801e01c
 8003400:	0801e06c 	.word	0x0801e06c
 8003404:	41200000 	.word	0x41200000
 8003408:	0801e0a0 	.word	0x0801e0a0
 800340c:	0801e0e0 	.word	0x0801e0e0

08003410 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8003418:	2100      	movs	r1, #0
 800341a:	2002      	movs	r0, #2
 800341c:	f019 f8a6 	bl	801c56c <UTIL_SEQ_SetTask>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <OnTxTimerEvent+0x20>)
 8003422:	0018      	movs	r0, r3
 8003424:	f019 faa6 	bl	801c974 <UTIL_TIMER_Start>
 // UTIL_TIMER_Stop(&TxTimer); // попытка передать только одно сообщение
//HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8003428:	46c0      	nop			; (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}
 8003430:	200002e8 	.word	0x200002e8

08003434 <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 800343c:	2003      	movs	r0, #3
 800343e:	f002 fbad 	bl	8005b9c <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}

0800344a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE) ;
 8003452:	2002      	movs	r0, #2
 8003454:	f002 fba2 	bl	8005b9c <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}

08003460 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1) ;
 8003468:	2001      	movs	r0, #1
 800346a:	f002 fbb3 	bl	8005bd4 <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 8003478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af06      	add	r7, sp, #24
 800347e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d04f      	beq.n	8003526 <OnTxData+0xae>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d04b      	beq.n	8003526 <OnTxData+0xae>
  {
    LED_On(LED_RED2) ;
 800348e:	2003      	movs	r0, #3
 8003490:	f002 fb68 	bl	8005b64 <BSP_LED_On>
   // LED_Off(LED_RED2);

    UTIL_TIMER_Start(&TxLedTimer);
 8003494:	4b26      	ldr	r3, [pc, #152]	; (8003530 <OnTxData+0xb8>)
 8003496:	0018      	movs	r0, r3
 8003498:	f019 fa6c 	bl	801c974 <UTIL_TIMER_Start>
    //HAL_LPTIM_Counter_Start_IT(&TxTimer,1000);
//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirmation =============\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n MCPS Подтверждение \r\n");
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <OnTxData+0xbc>)
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	2002      	movs	r0, #2
 80034a4:	f018 fb9a 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " Передача информации :%d", params->AppData.Buffer);
//    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d | Channel:%d", params->UplinkCounter,
//            params->AppData.Port, params->Datarate, params->TxPower,params->Channel);
    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Канал скорости передачи данных:%d | Мощность:%d | Канал связи:%d | Передача информации :%x", params->UplinkCounter,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7b1b      	ldrb	r3, [r3, #12]
 80034b0:	0018      	movs	r0, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	791b      	ldrb	r3, [r3, #4]
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	001c      	movs	r4, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7d1b      	ldrb	r3, [r3, #20]
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	001d      	movs	r5, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7d5b      	ldrb	r3, [r3, #21]
 80034c6:	001e      	movs	r6, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	491a      	ldr	r1, [pc, #104]	; (8003538 <OnTxData+0xc0>)
 80034ce:	9305      	str	r3, [sp, #20]
 80034d0:	9604      	str	r6, [sp, #16]
 80034d2:	9503      	str	r5, [sp, #12]
 80034d4:	9402      	str	r4, [sp, #8]
 80034d6:	9001      	str	r0, [sp, #4]
 80034d8:	9200      	str	r2, [sp, #0]
 80034da:	000b      	movs	r3, r1
 80034dc:	2200      	movs	r2, #0
 80034de:	2100      	movs	r1, #0
 80034e0:	2002      	movs	r0, #2
 80034e2:	f018 fb7b 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
                params->AppData.Port, params->Datarate, params->TxPower,params->Channel, params->AppData.Buffer);
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <OnTxData+0xc4>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	2100      	movs	r1, #0
 80034ec:	2003      	movs	r0, #3
 80034ee:	f018 fb75 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " | c:");
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	789b      	ldrb	r3, [r3, #2]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10f      	bne.n	800351a <OnTxData+0xa2>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	78db      	ldrb	r3, [r3, #3]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <OnTxData+0x8e>
 8003502:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <OnTxData+0xc8>)
 8003504:	e000      	b.n	8003508 <OnTxData+0x90>
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <OnTxData+0xcc>)
 8003508:	4a0f      	ldr	r2, [pc, #60]	; (8003548 <OnTxData+0xd0>)
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	0013      	movs	r3, r2
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	2003      	movs	r0, #3
 8003514:	f018 fb62 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 8003518:	e005      	b.n	8003526 <OnTxData+0xae>
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n UNCONFIRMED\r\n");
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <OnTxData+0xd4>)
 800351c:	2200      	movs	r2, #0
 800351e:	2100      	movs	r1, #0
 8003520:	2003      	movs	r0, #3
 8003522:	f018 fb5b 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b003      	add	sp, #12
 800352c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	20000300 	.word	0x20000300
 8003534:	0801e138 	.word	0x0801e138
 8003538:	0801e160 	.word	0x0801e160
 800353c:	0801e22c 	.word	0x0801e22c
 8003540:	0801e23c 	.word	0x0801e23c
 8003544:	0801e240 	.word	0x0801e240
 8003548:	0801e248 	.word	0x0801e248
 800354c:	0801e25c 	.word	0x0801e25c

08003550 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d029      	beq.n	80035b2 <OnJoinRequest+0x62>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	785b      	ldrb	r3, [r3, #1]
 8003562:	b25b      	sxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d11e      	bne.n	80035a6 <OnJoinRequest+0x56>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <OnJoinRequest+0x6c>)
 800356a:	0018      	movs	r0, r3
 800356c:	f019 fa7a 	bl	801ca64 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 8003570:	2001      	movs	r0, #1
 8003572:	f002 fb13 	bl	8005b9c <BSP_LED_Off>

//      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n      Устройство подключено \r\n  ");
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <OnJoinRequest+0x70>)
 8003578:	2200      	movs	r2, #0
 800357a:	2100      	movs	r1, #0
 800357c:	2002      	movs	r0, #2
 800357e:	f018 fb2d 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
      //if (joinParams->Mode == ACTIVATION_TYPE_ABP) //
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	789b      	ldrb	r3, [r3, #2]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d106      	bne.n	8003598 <OnJoinRequest+0x48>
      {
//        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
        APP_LOG(TS_OFF, VLEVEL_M, "  \r\n Активация по персонализации  \r\n");
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <OnJoinRequest+0x74>)
 800358c:	2200      	movs	r2, #0
 800358e:	2100      	movs	r1, #0
 8003590:	2002      	movs	r0, #2
 8003592:	f018 fb23 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 8003596:	e00c      	b.n	80035b2 <OnJoinRequest+0x62>
        APP_LOG(TS_OFF, VLEVEL_M, "   Активация по воздуху  \r\n");
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <OnJoinRequest+0x78>)
 800359a:	2200      	movs	r2, #0
 800359c:	2100      	movs	r1, #0
 800359e:	2002      	movs	r0, #2
 80035a0:	f018 fb1c 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
}
 80035a4:	e005      	b.n	80035b2 <OnJoinRequest+0x62>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n  Подключение к базовой станции не удалось \r\n");
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <OnJoinRequest+0x7c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	2002      	movs	r0, #2
 80035ae:	f018 fb15 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b002      	add	sp, #8
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	20000330 	.word	0x20000330
 80035c0:	0801e270 	.word	0x0801e270
 80035c4:	0801e2a8 	.word	0x0801e2a8
 80035c8:	0801e2e8 	.word	0x0801e2e8
 80035cc:	0801e318 	.word	0x0801e318

080035d0 <MX_LPTIM1_Init>:
  }
  */
/*

 */ static void MX_LPTIM1_Init(void) // new
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
	  hlptim1.Instance = LPTIM1;
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <MX_LPTIM1_Init+0x54>)
 80035d6:	4a14      	ldr	r2, [pc, #80]	; (8003628 <MX_LPTIM1_Init+0x58>)
 80035d8:	601a      	str	r2, [r3, #0]
	  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <MX_LPTIM1_Init+0x54>)
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
	  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <MX_LPTIM1_Init+0x54>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
	  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <MX_LPTIM1_Init+0x54>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	60da      	str	r2, [r3, #12]
	  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <MX_LPTIM1_Init+0x54>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	611a      	str	r2, [r3, #16]
	  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <MX_LPTIM1_Init+0x54>)
 80035f4:	4a0d      	ldr	r2, [pc, #52]	; (800362c <MX_LPTIM1_Init+0x5c>)
 80035f6:	615a      	str	r2, [r3, #20]
	  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <MX_LPTIM1_Init+0x54>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	621a      	str	r2, [r3, #32]
	  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <MX_LPTIM1_Init+0x54>)
 8003600:	2200      	movs	r2, #0
 8003602:	625a      	str	r2, [r3, #36]	; 0x24
	  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8003604:	4b07      	ldr	r3, [pc, #28]	; (8003624 <MX_LPTIM1_Init+0x54>)
 8003606:	2280      	movs	r2, #128	; 0x80
 8003608:	0412      	lsls	r2, r2, #16
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <MX_LPTIM1_Init+0x54>)
 800360e:	0018      	movs	r0, r3
 8003610:	f001 f81e 	bl	8004650 <HAL_LPTIM_Init>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d001      	beq.n	800361c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8003618:	f000 faf4 	bl	8003c04 <Error_Handler>
  /*
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	200013d8 	.word	0x200013d8
 8003628:	40007c00 	.word	0x40007c00
 800362c:	0000ffff 	.word	0x0000ffff

08003630 <HAL_LPTIM_MspInit>:
  void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
  {
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	240c      	movs	r4, #12
 800363a:	193b      	adds	r3, r7, r4
 800363c:	0018      	movs	r0, r3
 800363e:	2314      	movs	r3, #20
 8003640:	001a      	movs	r2, r3
 8003642:	2100      	movs	r1, #0
 8003644:	f01a fbad 	bl	801dda2 <memset>
    if(hlptim->Instance==LPTIM1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <HAL_LPTIM_MspInit+0x8c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d130      	bne.n	80036b4 <HAL_LPTIM_MspInit+0x84>
    {
    /* USER CODE BEGIN LPTIM1_MspInit 0 */

    /* USER CODE END LPTIM1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_LPTIM_MspInit+0x90>)
 8003654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003656:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_LPTIM_MspInit+0x90>)
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	0609      	lsls	r1, r1, #24
 800365c:	430a      	orrs	r2, r1
 800365e:	639a      	str	r2, [r3, #56]	; 0x38

      __HAL_RCC_GPIOB_CLK_ENABLE();
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_LPTIM_MspInit+0x90>)
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <HAL_LPTIM_MspInit+0x90>)
 8003666:	2102      	movs	r1, #2
 8003668:	430a      	orrs	r2, r1
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <HAL_LPTIM_MspInit+0x90>)
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	2202      	movs	r2, #2
 8003672:	4013      	ands	r3, r2
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
      /**LPTIM1 GPIO Configuration
      PB5     ------> LPTIM1_IN1
      PB7     ------> LPTIM1_IN2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003678:	0021      	movs	r1, r4
 800367a:	187b      	adds	r3, r7, r1
 800367c:	22a0      	movs	r2, #160	; 0xa0
 800367e:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003680:	187b      	adds	r3, r7, r1
 8003682:	2202      	movs	r2, #2
 8003684:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	187b      	adds	r3, r7, r1
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368c:	187b      	adds	r3, r7, r1
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
 8003692:	187b      	adds	r3, r7, r1
 8003694:	2202      	movs	r2, #2
 8003696:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003698:	187b      	adds	r3, r7, r1
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <HAL_LPTIM_MspInit+0x94>)
 800369c:	0019      	movs	r1, r3
 800369e:	0010      	movs	r0, r2
 80036a0:	f004 f870 	bl	8007784 <HAL_GPIO_Init>

      /* LPTIM1 interrupt Init */
      HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80036a4:	2200      	movs	r2, #0
 80036a6:	2100      	movs	r1, #0
 80036a8:	200d      	movs	r0, #13
 80036aa:	f003 fd3f 	bl	800712c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80036ae:	200d      	movs	r0, #13
 80036b0:	f003 fd51 	bl	8007156 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM1_MspInit 1 */

    /* USER CODE END LPTIM1_MspInit 1 */
    }

  }
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b009      	add	sp, #36	; 0x24
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	40007c00 	.word	0x40007c00
 80036c0:	40021000 	.word	0x40021000
 80036c4:	50000400 	.word	0x50000400

080036c8 <OnMacProcessNotify>:
    }

  }

static void OnMacProcessNotify(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80036cc:	2100      	movs	r1, #0
 80036ce:	2001      	movs	r0, #1
 80036d0:	f018 ff4c 	bl	801c56c <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <LoraInfo_Init+0x50>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <LoraInfo_Init+0x50>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <LoraInfo_Init+0x50>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80036f2:	4b0e      	ldr	r3, [pc, #56]	; (800372c <LoraInfo_Init+0x50>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <LoraInfo_Init+0x50>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	431a      	orrs	r2, r3
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <LoraInfo_Init+0x50>)
 8003702:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <LoraInfo_Init+0x50>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <LoraInfo_Init+0x3e>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <LoraInfo_Init+0x54>)
 800370e:	2200      	movs	r2, #0
 8003710:	2100      	movs	r1, #0
 8003712:	2000      	movs	r0, #0
 8003714:	f018 fa62 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 8003718:	e7fe      	b.n	8003718 <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <LoraInfo_Init+0x50>)
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8003720:	4b02      	ldr	r3, [pc, #8]	; (800372c <LoraInfo_Init+0x50>)
 8003722:	2203      	movs	r2, #3
 8003724:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000348 	.word	0x20000348
 8003730:	0801e3b8 	.word	0x0801e3b8

08003734 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8003738:	4b01      	ldr	r3, [pc, #4]	; (8003740 <LoraInfo_GetPtr+0xc>)
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000348 	.word	0x20000348

08003744 <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 8003748:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <MX_ADC_Init+0x90>)
 800374a:	4a23      	ldr	r2, [pc, #140]	; (80037d8 <MX_ADC_Init+0x94>)
 800374c:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 800374e:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <MX_ADC_Init+0x90>)
 8003750:	2200      	movs	r2, #0
 8003752:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <MX_ADC_Init+0x90>)
 8003756:	2280      	movs	r2, #128	; 0x80
 8003758:	0612      	lsls	r2, r2, #24
 800375a:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <MX_ADC_Init+0x90>)
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8003762:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <MX_ADC_Init+0x90>)
 8003764:	2201      	movs	r2, #1
 8003766:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 8003768:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <MX_ADC_Init+0x90>)
 800376a:	2200      	movs	r2, #0
 800376c:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 800376e:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <MX_ADC_Init+0x90>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <MX_ADC_Init+0x90>)
 8003776:	2207      	movs	r2, #7
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800377a:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <MX_ADC_Init+0x90>)
 800377c:	2201      	movs	r2, #1
 800377e:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <MX_ADC_Init+0x90>)
 8003782:	2200      	movs	r2, #0
 8003784:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <MX_ADC_Init+0x90>)
 8003788:	2220      	movs	r2, #32
 800378a:	2100      	movs	r1, #0
 800378c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <MX_ADC_Init+0x90>)
 8003790:	2221      	movs	r2, #33	; 0x21
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <MX_ADC_Init+0x90>)
 8003798:	2200      	movs	r2, #0
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <MX_ADC_Init+0x90>)
 800379e:	2204      	movs	r2, #4
 80037a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <MX_ADC_Init+0x90>)
 80037a4:	222c      	movs	r2, #44	; 0x2c
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <MX_ADC_Init+0x90>)
 80037ac:	0018      	movs	r0, r3
 80037ae:	f002 fe8b 	bl	80064c8 <HAL_ADC_Init>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d001      	beq.n	80037ba <MX_ADC_Init+0x76>
  {
    Error_Handler();
 80037b6:	f000 fa25 	bl	8003c04 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <MX_ADC_Init+0x90>)
 80037bc:	2100      	movs	r1, #0
 80037be:	0018      	movs	r0, r3
 80037c0:	f003 fb74 	bl	8006eac <HAL_ADCEx_Calibration_Start>
 80037c4:	1e03      	subs	r3, r0, #0
 80037c6:	d001      	beq.n	80037cc <MX_ADC_Init+0x88>
  {
    Error_Handler();
 80037c8:	f000 fa1c 	bl	8003c04 <Error_Handler>
  }
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	2000137c 	.word	0x2000137c
 80037d8:	40012400 	.word	0x40012400

080037dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a12      	ldr	r2, [pc, #72]	; (8003834 <HAL_ADC_MspInit+0x58>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d11e      	bne.n	800382c <HAL_ADC_MspInit+0x50>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ee:	240c      	movs	r4, #12
 80037f0:	193b      	adds	r3, r7, r4
 80037f2:	0018      	movs	r0, r3
 80037f4:	2314      	movs	r3, #20
 80037f6:	001a      	movs	r2, r3
 80037f8:	2100      	movs	r1, #0
 80037fa:	f01a fad2 	bl	801dda2 <memset>

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_ADC_MspInit+0x5c>)
 8003800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003802:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <HAL_ADC_MspInit+0x5c>)
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	0089      	lsls	r1, r1, #2
 8003808:	430a      	orrs	r2, r1
 800380a:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4; //N
 800380c:	193b      	adds	r3, r7, r4
 800380e:	2210      	movs	r2, #16
 8003810:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; //N
 8003812:	193b      	adds	r3, r7, r4
 8003814:	2203      	movs	r2, #3
 8003816:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; //N
 8003818:	193b      	adds	r3, r7, r4
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //N
 800381e:	193a      	adds	r2, r7, r4
 8003820:	23a0      	movs	r3, #160	; 0xa0
 8003822:	05db      	lsls	r3, r3, #23
 8003824:	0011      	movs	r1, r2
 8003826:	0018      	movs	r0, r3
 8003828:	f003 ffac 	bl	8007784 <HAL_GPIO_Init>
    /* USER CODE END ADC_MspInit 1
     * */
  }
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b009      	add	sp, #36	; 0x24
 8003832:	bd90      	pop	{r4, r7, pc}
 8003834:	40012400 	.word	0x40012400
 8003838:	40021000 	.word	0x40021000

0800383c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a0f      	ldr	r2, [pc, #60]	; (8003888 <HAL_ADC_MspDeInit+0x4c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d118      	bne.n	8003880 <HAL_ADC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_ADC_MspDeInit+0x50>)
 8003850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003852:	4b0e      	ldr	r3, [pc, #56]	; (800388c <HAL_ADC_MspDeInit+0x50>)
 8003854:	2180      	movs	r1, #128	; 0x80
 8003856:	0089      	lsls	r1, r1, #2
 8003858:	430a      	orrs	r2, r1
 800385a:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_ADC_MspDeInit+0x50>)
 800385e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <HAL_ADC_MspDeInit+0x50>)
 8003862:	490b      	ldr	r1, [pc, #44]	; (8003890 <HAL_ADC_MspDeInit+0x54>)
 8003864:	400a      	ands	r2, r1
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_ADC_MspDeInit+0x50>)
 800386a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <HAL_ADC_MspDeInit+0x50>)
 800386e:	4908      	ldr	r1, [pc, #32]	; (8003890 <HAL_ADC_MspDeInit+0x54>)
 8003870:	400a      	ands	r2, r1
 8003872:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);//N
 8003874:	23a0      	movs	r3, #160	; 0xa0
 8003876:	05db      	lsls	r3, r3, #23
 8003878:	2110      	movs	r1, #16
 800387a:	0018      	movs	r0, r3
 800387c:	f004 f900 	bl	8007a80 <HAL_GPIO_DeInit>
    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40012400 	.word	0x40012400
 800388c:	40021000 	.word	0x40021000
 8003890:	fffffdff 	.word	0xfffffdff

08003894 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 8003898:	4b02      	ldr	r3, [pc, #8]	; (80038a4 <SYS_InitMeasurement+0x10>)
 800389a:	4a03      	ldr	r2, [pc, #12]	; (80038a8 <SYS_InitMeasurement+0x14>)
 800389c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	2000137c 	.word	0x2000137c
 80038a8:	40012400 	.word	0x40012400

080038ac <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80038ac:	b5b0      	push	{r4, r5, r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 80038b2:	250e      	movs	r5, #14
 80038b4:	197b      	adds	r3, r7, r5
 80038b6:	2200      	movs	r2, #0
 80038b8:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80038be:	1dbc      	adds	r4, r7, #6
 80038c0:	f000 f83c 	bl	800393c <SYS_GetBatteryLevel>
 80038c4:	0003      	movs	r3, r0
 80038c6:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <SYS_GetTemperatureLevel+0x80>)
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 f864 	bl	8003998 <ADC_ReadChannels>
 80038d0:	0003      	movs	r3, r0
 80038d2:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 80038d4:	1dbb      	adds	r3, r7, #6
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	4353      	muls	r3, r2
 80038dc:	4914      	ldr	r1, [pc, #80]	; (8003930 <SYS_GetTemperatureLevel+0x84>)
 80038de:	0018      	movs	r0, r3
 80038e0:	f7fc fc1a 	bl	8000118 <__udivsi3>
 80038e4:	0003      	movs	r3, r0
 80038e6:	001a      	movs	r2, r3
 80038e8:	4b12      	ldr	r3, [pc, #72]	; (8003934 <SYS_GetTemperatureLevel+0x88>)
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	1ad2      	subs	r2, r2, r3
 80038ee:	0013      	movs	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	189b      	adds	r3, r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <SYS_GetTemperatureLevel+0x8c>)
 80038fa:	8812      	ldrh	r2, [r2, #0]
 80038fc:	0011      	movs	r1, r2
 80038fe:	4a0d      	ldr	r2, [pc, #52]	; (8003934 <SYS_GetTemperatureLevel+0x88>)
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	1a8a      	subs	r2, r1, r2
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f7fc fc90 	bl	800022c <__divsi3>
 800390c:	0003      	movs	r3, r0
 800390e:	b29b      	uxth	r3, r3
 8003910:	22f0      	movs	r2, #240	; 0xf0
 8003912:	0152      	lsls	r2, r2, #5
 8003914:	4694      	mov	ip, r2
 8003916:	4463      	add	r3, ip
 8003918:	b29a      	uxth	r2, r3
 800391a:	197b      	adds	r3, r7, r5
 800391c:	801a      	strh	r2, [r3, #0]

//  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);

  return (int16_t) temperatureDegreeC;
 800391e:	197b      	adds	r3, r7, r5
 8003920:	2200      	movs	r2, #0
 8003922:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b004      	add	sp, #16
 800392a:	bdb0      	pop	{r4, r5, r7, pc}
 800392c:	48040000 	.word	0x48040000
 8003930:	00000bb8 	.word	0x00000bb8
 8003934:	1ff8007a 	.word	0x1ff8007a
 8003938:	1ff8007e 	.word	0x1ff8007e

0800393c <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8003942:	1dbb      	adds	r3, r7, #6
 8003944:	2200      	movs	r2, #0
 8003946:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <SYS_GetBatteryLevel+0x50>)
 800394e:	0018      	movs	r0, r3
 8003950:	f000 f822 	bl	8003998 <ADC_ReadChannels>
 8003954:	0003      	movs	r3, r0
 8003956:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 800395e:	1dbb      	adds	r3, r7, #6
 8003960:	2200      	movs	r2, #0
 8003962:	801a      	strh	r2, [r3, #0]
 8003964:	e00c      	b.n	8003980 <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <SYS_GetBatteryLevel+0x54>)
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	001a      	movs	r2, r3
 800396c:	4b09      	ldr	r3, [pc, #36]	; (8003994 <SYS_GetBatteryLevel+0x58>)
 800396e:	4353      	muls	r3, r2
 8003970:	6839      	ldr	r1, [r7, #0]
 8003972:	0018      	movs	r0, r3
 8003974:	f7fc fbd0 	bl	8000118 <__udivsi3>
 8003978:	0003      	movs	r3, r0
 800397a:	001a      	movs	r2, r3
 800397c:	1dbb      	adds	r3, r7, #6
 800397e:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 8003980:	1dbb      	adds	r3, r7, #6
 8003982:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b002      	add	sp, #8
 800398a:	bd80      	pop	{r7, pc}
 800398c:	44020000 	.word	0x44020000
 8003990:	1ff80078 	.word	0x1ff80078
 8003994:	00000bb8 	.word	0x00000bb8

08003998 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80039a4:	230c      	movs	r3, #12
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	0018      	movs	r0, r3
 80039aa:	2308      	movs	r3, #8
 80039ac:	001a      	movs	r2, r3
 80039ae:	2100      	movs	r1, #0
 80039b0:	f01a f9f7 	bl	801dda2 <memset>

  MX_ADC_Init();
 80039b4:	f7ff fec6 	bl	8003744 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <ADC_ReadChannels+0xd4>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2208      	movs	r2, #8
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d1f9      	bne.n	80039ba <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 80039c6:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <ADC_ReadChannels+0xd8>)
 80039c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ca:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <ADC_ReadChannels+0xd8>)
 80039cc:	2180      	movs	r1, #128	; 0x80
 80039ce:	0089      	lsls	r1, r1, #2
 80039d0:	430a      	orrs	r2, r1
 80039d2:	635a      	str	r2, [r3, #52]	; 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80039d4:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <ADC_ReadChannels+0xdc>)
 80039d6:	2100      	movs	r1, #0
 80039d8:	0018      	movs	r0, r3
 80039da:	f003 fa67 	bl	8006eac <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 80039de:	240c      	movs	r4, #12
 80039e0:	193b      	adds	r3, r7, r4
 80039e2:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <ADC_ReadChannels+0xe0>)
 80039e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80039e6:	193b      	adds	r3, r7, r4
 80039e8:	4a24      	ldr	r2, [pc, #144]	; (8003a7c <ADC_ReadChannels+0xe4>)
 80039ea:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80039ec:	193a      	adds	r2, r7, r4
 80039ee:	4b21      	ldr	r3, [pc, #132]	; (8003a74 <ADC_ReadChannels+0xdc>)
 80039f0:	0011      	movs	r1, r2
 80039f2:	0018      	movs	r0, r3
 80039f4:	f003 f8ae 	bl	8006b54 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80039f8:	0021      	movs	r1, r4
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	2280      	movs	r2, #128	; 0x80
 8003a04:	0152      	lsls	r2, r2, #5
 8003a06:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a08:	187a      	adds	r2, r7, r1
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <ADC_ReadChannels+0xdc>)
 8003a0c:	0011      	movs	r1, r2
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f003 f8a0 	bl	8006b54 <HAL_ADC_ConfigChannel>
 8003a14:	1e03      	subs	r3, r0, #0
 8003a16:	d001      	beq.n	8003a1c <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 8003a18:	f000 f8f4 	bl	8003c04 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8003a1c:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <ADC_ReadChannels+0xdc>)
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f002 ff62 	bl	80068e8 <HAL_ADC_Start>
 8003a24:	1e03      	subs	r3, r0, #0
 8003a26:	d001      	beq.n	8003a2c <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 8003a28:	f000 f8ec 	bl	8003c04 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	425a      	negs	r2, r3
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <ADC_ReadChannels+0xdc>)
 8003a32:	0011      	movs	r1, r2
 8003a34:	0018      	movs	r0, r3
 8003a36:	f002 ffeb 	bl	8006a10 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <ADC_ReadChannels+0xdc>)
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f002 ffa7 	bl	8006990 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <ADC_ReadChannels+0xdc>)
 8003a44:	0018      	movs	r0, r3
 8003a46:	f003 f879 	bl	8006b3c <HAL_ADC_GetValue>
 8003a4a:	0003      	movs	r3, r0
 8003a4c:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <ADC_ReadChannels+0xdc>)
 8003a50:	0018      	movs	r0, r3
 8003a52:	f002 fead 	bl	80067b0 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <ADC_ReadChannels+0xd8>)
 8003a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <ADC_ReadChannels+0xd8>)
 8003a5c:	4908      	ldr	r1, [pc, #32]	; (8003a80 <ADC_ReadChannels+0xe8>)
 8003a5e:	400a      	ands	r2, r1
 8003a60:	635a      	str	r2, [r3, #52]	; 0x34

  return ADCxConvertedValues;
 8003a62:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b007      	add	sp, #28
 8003a6a:	bd90      	pop	{r4, r7, pc}
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	40021000 	.word	0x40021000
 8003a74:	2000137c 	.word	0x2000137c
 8003a78:	0007ffff 	.word	0x0007ffff
 8003a7c:	00001001 	.word	0x00001001
 8003a80:	fffffdff 	.word	0xfffffdff

08003a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <MX_DMA_Init+0x38>)
 8003a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <MX_DMA_Init+0x38>)
 8003a90:	2101      	movs	r1, #1
 8003a92:	430a      	orrs	r2, r1
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <MX_DMA_Init+0x38>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	200b      	movs	r0, #11
 8003aa8:	f003 fb40 	bl	800712c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003aac:	200b      	movs	r0, #11
 8003aae:	f003 fb52 	bl	8007156 <HAL_NVIC_EnableIRQ>

}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	40021000 	.word	0x40021000

08003ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ac4:	f002 fc86 	bl	80063d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ac8:	f000 f806 	bl	8003ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8003acc:	f7ff fa24 	bl	8002f18 <MX_LoRaWAN_Init>
    /* USER CODE END WHILE */
	  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);

    MX_LoRaWAN_Process();
 8003ad0:	f7ff fa2b 	bl	8002f2a <MX_LoRaWAN_Process>
 8003ad4:	e7fc      	b.n	8003ad0 <main+0x10>
	...

08003ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) //NEW С МЭЙНА
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b09d      	sub	sp, #116	; 0x74
 8003adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ade:	2438      	movs	r4, #56	; 0x38
 8003ae0:	193b      	adds	r3, r7, r4
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	2338      	movs	r3, #56	; 0x38
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	2100      	movs	r1, #0
 8003aea:	f01a f95a 	bl	801dda2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003aee:	2324      	movs	r3, #36	; 0x24
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	0018      	movs	r0, r3
 8003af4:	2314      	movs	r3, #20
 8003af6:	001a      	movs	r2, r3
 8003af8:	2100      	movs	r1, #0
 8003afa:	f01a f952 	bl	801dda2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003afe:	003b      	movs	r3, r7
 8003b00:	0018      	movs	r0, r3
 8003b02:	2324      	movs	r3, #36	; 0x24
 8003b04:	001a      	movs	r2, r3
 8003b06:	2100      	movs	r1, #0
 8003b08:	f01a f94b 	bl	801dda2 <memset>
  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003b0c:	0021      	movs	r1, r4
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	2202      	movs	r2, #2
 8003b12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	2200      	movs	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003b1a:	187b      	adds	r3, r7, r1
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;// n
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	2201      	movs	r2, #1
 8003b24:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	2210      	movs	r2, #16
 8003b2a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	2202      	movs	r2, #2
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2200      	movs	r2, #0
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	2280      	movs	r2, #128	; 0x80
 8003b3c:	0312      	lsls	r2, r2, #12
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	0412      	lsls	r2, r2, #16
 8003b46:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f004 ff90 	bl	8008a70 <HAL_RCC_OscConfig>
 8003b50:	1e03      	subs	r3, r0, #0
 8003b52:	d001      	beq.n	8003b58 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003b54:	f000 f856 	bl	8003c04 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
__HAL_RCC_PWR_CLK_ENABLE();
 8003b58:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <SystemClock_Config+0x120>)
 8003b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5c:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <SystemClock_Config+0x120>)
 8003b5e:	2180      	movs	r1, #128	; 0x80
 8003b60:	0549      	lsls	r1, r1, #21
 8003b62:	430a      	orrs	r2, r1
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b66:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <SystemClock_Config+0x124>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <SystemClock_Config+0x128>)
 8003b6c:	401a      	ands	r2, r3
 8003b6e:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <SystemClock_Config+0x124>)
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	0109      	lsls	r1, r1, #4
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
 while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <SystemClock_Config+0x124>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2210      	movs	r2, #16
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d0f9      	beq.n	8003b7a <SystemClock_Config+0xa2>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8003b86:	2124      	movs	r1, #36	; 0x24
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	220f      	movs	r2, #15
 8003b8c:	601a      	str	r2, [r3, #0]
		 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	2203      	movs	r2, #3
 8003b92:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b94:	187b      	adds	r3, r7, r1
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b9a:	187b      	adds	r3, r7, r1
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	2101      	movs	r1, #1
 8003baa:	0018      	movs	r0, r3
 8003bac:	f005 fb34 	bl	8009218 <HAL_RCC_ClockConfig>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d001      	beq.n	8003bb8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003bb4:	f000 f826 	bl	8003c04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003bb8:	003b      	movs	r3, r7
 8003bba:	22ab      	movs	r2, #171	; 0xab
 8003bbc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bbe:	003b      	movs	r3, r7
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003bc4:	003b      	movs	r3, r7
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003bca:	003b      	movs	r3, r7
 8003bcc:	2200      	movs	r2, #0
 8003bce:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003bd0:	003b      	movs	r3, r7
 8003bd2:	2280      	movs	r2, #128	; 0x80
 8003bd4:	0292      	lsls	r2, r2, #10
 8003bd6:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8003bd8:	003b      	movs	r3, r7
 8003bda:	2200      	movs	r2, #0
 8003bdc:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bde:	003b      	movs	r3, r7
 8003be0:	0018      	movs	r0, r3
 8003be2:	f005 fd3d 	bl	8009660 <HAL_RCCEx_PeriphCLKConfig>
 8003be6:	1e03      	subs	r3, r0, #0
 8003be8:	d001      	beq.n	8003bee <SystemClock_Config+0x116>
  {
    Error_Handler();
 8003bea:	f000 f80b 	bl	8003c04 <Error_Handler>
  }
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b01d      	add	sp, #116	; 0x74
 8003bf4:	bd90      	pop	{r4, r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	ffffe7ff 	.word	0xffffe7ff

08003c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8003c08:	e7fe      	b.n	8003c08 <Error_Handler+0x4>
	...

08003c0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b090      	sub	sp, #64	; 0x40
 8003c10:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003c12:	232c      	movs	r3, #44	; 0x2c
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	0018      	movs	r0, r3
 8003c18:	2314      	movs	r3, #20
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	f01a f8c0 	bl	801dda2 <memset>
  RTC_DateTypeDef sDate = {0};
 8003c22:	2328      	movs	r3, #40	; 0x28
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003c2a:	003b      	movs	r3, r7
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	2328      	movs	r3, #40	; 0x28
 8003c30:	001a      	movs	r2, r3
 8003c32:	2100      	movs	r1, #0
 8003c34:	f01a f8b5 	bl	801dda2 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c38:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <MX_RTC_Init+0x134>)
 8003c3a:	4a42      	ldr	r2, [pc, #264]	; (8003d44 <MX_RTC_Init+0x138>)
 8003c3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c3e:	4b40      	ldr	r3, [pc, #256]	; (8003d40 <MX_RTC_Init+0x134>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8003c44:	4b3e      	ldr	r3, [pc, #248]	; (8003d40 <MX_RTC_Init+0x134>)
 8003c46:	221f      	movs	r2, #31
 8003c48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <MX_RTC_Init+0x134>)
 8003c4c:	4a3e      	ldr	r2, [pc, #248]	; (8003d48 <MX_RTC_Init+0x13c>)
 8003c4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c50:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <MX_RTC_Init+0x134>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c56:	4b3a      	ldr	r3, [pc, #232]	; (8003d40 <MX_RTC_Init+0x134>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c5c:	4b38      	ldr	r3, [pc, #224]	; (8003d40 <MX_RTC_Init+0x134>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <MX_RTC_Init+0x134>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c68:	4b35      	ldr	r3, [pc, #212]	; (8003d40 <MX_RTC_Init+0x134>)
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f005 fe4e 	bl	800990c <HAL_RTC_Init>
 8003c70:	1e03      	subs	r3, r0, #0
 8003c72:	d001      	beq.n	8003c78 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003c74:	f7ff ffc6 	bl	8003c04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	2200      	movs	r2, #0
 8003c84:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003c86:	187b      	adds	r3, r7, r1
 8003c88:	2200      	movs	r2, #0
 8003c8a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003c8c:	187b      	adds	r3, r7, r1
 8003c8e:	2200      	movs	r2, #0
 8003c90:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003c92:	187b      	adds	r3, r7, r1
 8003c94:	2200      	movs	r2, #0
 8003c96:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003c98:	1879      	adds	r1, r7, r1
 8003c9a:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <MX_RTC_Init+0x134>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f005 fed2 	bl	8009a48 <HAL_RTC_SetTime>
 8003ca4:	1e03      	subs	r3, r0, #0
 8003ca6:	d001      	beq.n	8003cac <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003ca8:	f7ff ffac 	bl	8003c04 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003cac:	2128      	movs	r1, #40	; 0x28
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003cc6:	1879      	adds	r1, r7, r1
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <MX_RTC_Init+0x134>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f005 ffdb 	bl	8009c88 <HAL_RTC_SetDate>
 8003cd2:	1e03      	subs	r3, r0, #0
 8003cd4:	d001      	beq.n	8003cda <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003cd6:	f7ff ff95 	bl	8003c04 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003cda:	003b      	movs	r3, r7
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003ce0:	003b      	movs	r3, r7
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003ce6:	003b      	movs	r3, r7
 8003ce8:	2200      	movs	r2, #0
 8003cea:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003cec:	003b      	movs	r3, r7
 8003cee:	2200      	movs	r2, #0
 8003cf0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003cf2:	003b      	movs	r3, r7
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003cf8:	003b      	movs	r3, r7
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003cfe:	003b      	movs	r3, r7
 8003d00:	2200      	movs	r2, #0
 8003d02:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003d04:	003b      	movs	r3, r7
 8003d06:	22a0      	movs	r2, #160	; 0xa0
 8003d08:	0512      	lsls	r2, r2, #20
 8003d0a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003d0c:	003b      	movs	r3, r7
 8003d0e:	2200      	movs	r2, #0
 8003d10:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 8003d12:	003b      	movs	r3, r7
 8003d14:	2220      	movs	r2, #32
 8003d16:	211e      	movs	r1, #30
 8003d18:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003d1a:	003b      	movs	r3, r7
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	0052      	lsls	r2, r2, #1
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003d22:	0039      	movs	r1, r7
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <MX_RTC_Init+0x134>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f006 f8a9 	bl	8009e80 <HAL_RTC_SetAlarm_IT>
 8003d2e:	1e03      	subs	r3, r0, #0
 8003d30:	d001      	beq.n	8003d36 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003d32:	f7ff ff67 	bl	8003c04 <Error_Handler>
  }

}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b010      	add	sp, #64	; 0x40
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	20001408 	.word	0x20001408
 8003d44:	40002800 	.word	0x40002800
 8003d48:	000003ff 	.word	0x000003ff

08003d4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003d4c:	b590      	push	{r4, r7, lr}
 8003d4e:	b091      	sub	sp, #68	; 0x44
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d54:	2408      	movs	r4, #8
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	0018      	movs	r0, r3
 8003d5a:	2338      	movs	r3, #56	; 0x38
 8003d5c:	001a      	movs	r2, r3
 8003d5e:	2100      	movs	r1, #0
 8003d60:	f01a f81f 	bl	801dda2 <memset>
  if (rtcHandle->Instance == RTC)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <HAL_RTC_MspInit+0x78>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d126      	bne.n	8003dbc <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003d6e:	193b      	adds	r3, r7, r4
 8003d70:	2204      	movs	r2, #4
 8003d72:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; // SWAP OFF НО ТОЛКУ ТО? Спасёт ли это при моей проблеме
 8003d74:	193b      	adds	r3, r7, r4
 8003d76:	2280      	movs	r2, #128	; 0x80
 8003d78:	0052      	lsls	r2, r2, #1
 8003d7a:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;// SWAP ON
 8003d7c:	193b      	adds	r3, r7, r4
 8003d7e:	2200      	movs	r2, #0
 8003d80:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	2200      	movs	r2, #0
 8003d86:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003d88:	193b      	adds	r3, r7, r4
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d8e:	193b      	adds	r3, r7, r4
 8003d90:	0018      	movs	r0, r3
 8003d92:	f004 fe6d 	bl	8008a70 <HAL_RCC_OscConfig>
 8003d96:	1e03      	subs	r3, r0, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8003d9a:	f7ff ff33 	bl	8003c04 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_RTC_MspInit+0x7c>)
 8003da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_RTC_MspInit+0x7c>)
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	02c9      	lsls	r1, r1, #11
 8003da8:	430a      	orrs	r2, r1
 8003daa:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003dac:	2200      	movs	r2, #0
 8003dae:	2100      	movs	r1, #0
 8003db0:	2002      	movs	r0, #2
 8003db2:	f003 f9bb 	bl	800712c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn); // вот это отрубать еси шо
 8003db6:	2002      	movs	r0, #2
 8003db8:	f003 f9cd 	bl	8007156 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b011      	add	sp, #68	; 0x44
 8003dc2:	bd90      	pop	{r4, r7, pc}
 8003dc4:	40002800 	.word	0x40002800
 8003dc8:	40021000 	.word	0x40021000

08003dcc <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	0c1b      	lsrs	r3, r3, #16
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8003dea:	4b16      	ldr	r3, [pc, #88]	; (8003e44 <RTC_IF_Init+0x60>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	4053      	eors	r3, r2
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01f      	beq.n	8003e38 <RTC_IF_Init+0x54>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003df8:	1d3b      	adds	r3, r7, #4
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	2280      	movs	r2, #128	; 0x80
 8003e02:	0252      	lsls	r2, r2, #9
 8003e04:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f005 fc29 	bl	8009660 <HAL_RCCEx_PeriphCLKConfig>
 8003e0e:	1e03      	subs	r3, r0, #0
 8003e10:	d000      	beq.n	8003e14 <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 8003e12:	e7fe      	b.n	8003e12 <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 8003e14:	f7ff fefa 	bl	8003c0c <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	005a      	lsls	r2, r3, #1
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <RTC_IF_Init+0x64>)
 8003e1e:	0011      	movs	r1, r2
 8003e20:	0018      	movs	r0, r3
 8003e22:	f006 f979 	bl	800a118 <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <RTC_IF_Init+0x64>)
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f006 fb23 	bl	800a474 <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8003e2e:	f000 f859 	bl	8003ee4 <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 8003e32:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <RTC_IF_Init+0x60>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b00a      	add	sp, #40	; 0x28
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	20000358 	.word	0x20000358
 8003e48:	20001408 	.word	0x20001408

08003e4c <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <RTC_IF_StartTimer+0x5c>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	5e9b      	ldrsh	r3, [r3, r2]
 8003e5a:	3303      	adds	r3, #3
 8003e5c:	001c      	movs	r4, r3
 8003e5e:	f000 f861 	bl	8003f24 <RTC_IF_GetTimerElapsedTime>
 8003e62:	0002      	movs	r2, r0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	d204      	bcs.n	8003e76 <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	2002      	movs	r0, #2
 8003e70:	f018 f96c 	bl	801c14c <UTIL_LPM_SetStopMode>
 8003e74:	e003      	b.n	8003e7e <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003e76:	2101      	movs	r1, #1
 8003e78:	2002      	movs	r0, #2
 8003e7a:	f018 f967 	bl	801c14c <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8003e7e:	f018 f9c5 	bl	801c20c <UTIL_LPM_GetMode>
 8003e82:	0003      	movs	r3, r0
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d106      	bne.n	8003e96 <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <RTC_IF_StartTimer+0x5c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	5e9b      	ldrsh	r3, [r3, r2]
 8003e8e:	001a      	movs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f000 f959 	bl	8004150 <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b003      	add	sp, #12
 8003ea6:	bd90      	pop	{r4, r7, pc}
 8003ea8:	2000035a 	.word	0x2000035a

08003eac <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <RTC_IF_StopTimer+0x30>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	22ff      	movs	r2, #255	; 0xff
 8003eb8:	401a      	ands	r2, r3
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <RTC_IF_StopTimer+0x30>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4908      	ldr	r1, [pc, #32]	; (8003ee0 <RTC_IF_StopTimer+0x34>)
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	005a      	lsls	r2, r3, #1
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <RTC_IF_StopTimer+0x30>)
 8003eca:	0011      	movs	r1, r2
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f006 f923 	bl	800a118 <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	20001408 	.word	0x20001408
 8003ee0:	fffffe7f 	.word	0xfffffe7f

08003ee4 <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003ee8:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <RTC_IF_SetTimerContext+0x20>)
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <RTC_IF_SetTimerContext+0x24>)
 8003eec:	0011      	movs	r1, r2
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f000 fa94 	bl	800441c <RTC_GetCalendarValue>
 8003ef4:	0002      	movs	r2, r0
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <RTC_IF_SetTimerContext+0x28>)
 8003ef8:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003efa:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <RTC_IF_SetTimerContext+0x28>)
 8003efc:	681b      	ldr	r3, [r3, #0]
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000388 	.word	0x20000388
 8003f08:	2000039c 	.word	0x2000039c
 8003f0c:	20000384 	.word	0x20000384

08003f10 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003f14:	4b02      	ldr	r3, [pc, #8]	; (8003f20 <RTC_IF_GetTimerContext+0x10>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	0018      	movs	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	20000384 	.word	0x20000384

08003f24 <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	18fa      	adds	r2, r7, r3
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	0011      	movs	r1, r2
 8003f32:	0018      	movs	r0, r3
 8003f34:	f000 fa72 	bl	800441c <RTC_GetCalendarValue>
 8003f38:	0003      	movs	r3, r0
 8003f3a:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <RTC_IF_GetTimerElapsedTime+0x28>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	1ad3      	subs	r3, r2, r3
}
 8003f44:	0018      	movs	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b008      	add	sp, #32
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000384 	.word	0x20000384

08003f50 <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <RTC_IF_GetTimerValue+0x30>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003f62:	2308      	movs	r3, #8
 8003f64:	18fa      	adds	r2, r7, r3
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	0011      	movs	r1, r2
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 fa56 	bl	800441c <RTC_GetCalendarValue>
 8003f70:	0003      	movs	r3, r0
 8003f72:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 8003f74:	69fb      	ldr	r3, [r7, #28]
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b008      	add	sp, #32
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	20000358 	.word	0x20000358

08003f84 <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 8003f88:	2303      	movs	r3, #3
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003f90:	b5b0      	push	{r4, r5, r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	000a      	movs	r2, r1
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	000b      	movs	r3, r1
 8003fa0:	0e51      	lsrs	r1, r2, #25
 8003fa2:	01dd      	lsls	r5, r3, #7
 8003fa4:	430d      	orrs	r5, r1
 8003fa6:	01d4      	lsls	r4, r2, #7
 8003fa8:	227d      	movs	r2, #125	; 0x7d
 8003faa:	2300      	movs	r3, #0
 8003fac:	0020      	movs	r0, r4
 8003fae:	0029      	movs	r1, r5
 8003fb0:	f7fc fac4 	bl	800053c <__aeabi_uldivmod>
 8003fb4:	0002      	movs	r2, r0
 8003fb6:	000b      	movs	r3, r1
 8003fb8:	0013      	movs	r3, r2
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b002      	add	sp, #8
 8003fc0:	bdb0      	pop	{r4, r5, r7, pc}

08003fc2 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8003fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc4:	b089      	sub	sp, #36	; 0x24
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	0ed1      	lsrs	r1, r2, #27
 8003fd8:	0158      	lsls	r0, r3, #5
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	4308      	orrs	r0, r1
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	0153      	lsls	r3, r2, #5
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	68fc      	ldr	r4, [r7, #12]
 8003fea:	6939      	ldr	r1, [r7, #16]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	1a5b      	subs	r3, r3, r1
 8003ff0:	4194      	sbcs	r4, r2
 8003ff2:	001a      	movs	r2, r3
 8003ff4:	0023      	movs	r3, r4
 8003ff6:	0f91      	lsrs	r1, r2, #30
 8003ff8:	0098      	lsls	r0, r3, #2
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4308      	orrs	r0, r1
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	0093      	lsls	r3, r2, #2
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	6838      	ldr	r0, [r7, #0]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	1812      	adds	r2, r2, r0
 8004010:	414b      	adcs	r3, r1
 8004012:	0659      	lsls	r1, r3, #25
 8004014:	09d0      	lsrs	r0, r2, #7
 8004016:	0005      	movs	r5, r0
 8004018:	0028      	movs	r0, r5
 800401a:	4308      	orrs	r0, r1
 800401c:	0005      	movs	r5, r0
 800401e:	09db      	lsrs	r3, r3, #7
 8004020:	001e      	movs	r6, r3
 8004022:	002b      	movs	r3, r5
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b009      	add	sp, #36	; 0x24
 800402a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800402c <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	0018      	movs	r0, r3
 8004040:	f7ff ffa6 	bl	8003f90 <RTC_IF_Convert_ms2Tick>
 8004044:	0003      	movs	r3, r0
 8004046:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 8004048:	f7ff ff82 	bl	8003f50 <RTC_IF_GetTimerValue>
 800404c:	0003      	movs	r3, r0
 800404e:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8004050:	e000      	b.n	8004054 <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 8004052:	46c0      	nop			; (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8004054:	f7ff ff7c 	bl	8003f50 <RTC_IF_GetTimerValue>
 8004058:	0002      	movs	r2, r0
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	429a      	cmp	r2, r3
 8004062:	d8f6      	bhi.n	8004052 <RTC_IF_DelayMs+0x26>
  }
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 8004076:	f018 fda1 	bl	801cbbc <UTIL_TIMER_IRQ_Handler>
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}

08004082 <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 8004082:	b5b0      	push	{r4, r5, r7, lr}
 8004084:	b08c      	sub	sp, #48	; 0x30
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800408a:	230c      	movs	r3, #12
 800408c:	18fa      	adds	r2, r7, r3
 800408e:	2308      	movs	r3, #8
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	0011      	movs	r1, r2
 8004094:	0018      	movs	r0, r3
 8004096:	f000 f9c1 	bl	800441c <RTC_GetCalendarValue>
 800409a:	0003      	movs	r3, r0
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
 800409e:	2300      	movs	r3, #0
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	059b      	lsls	r3, r3, #22
 80040a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a8:	0a94      	lsrs	r4, r2, #10
 80040aa:	431c      	orrs	r4, r3
 80040ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ae:	0a9d      	lsrs	r5, r3, #10
 80040b0:	0023      	movs	r3, r4
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	059b      	lsls	r3, r3, #22
 80040b8:	0d9b      	lsrs	r3, r3, #22
 80040ba:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	0018      	movs	r0, r3
 80040c0:	f7ff ff7f 	bl	8003fc2 <RTC_IF_Convert_Tick2ms>
 80040c4:	0003      	movs	r3, r0
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	801a      	strh	r2, [r3, #0]

  return seconds;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b00c      	add	sp, #48	; 0x30
 80040d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080040d8 <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4b04      	ldr	r3, [pc, #16]	; (80040f4 <RTC_IF_BkUp_Write_Seconds+0x1c>)
 80040e4:	2100      	movs	r1, #0
 80040e6:	0018      	movs	r0, r3
 80040e8:	f006 f99a 	bl	800a420 <HAL_RTCEx_BKUPWrite>
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b002      	add	sp, #8
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20001408 	.word	0x20001408

080040f8 <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4b04      	ldr	r3, [pc, #16]	; (8004114 <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 8004104:	2101      	movs	r1, #1
 8004106:	0018      	movs	r0, r3
 8004108:	f006 f98a 	bl	800a420 <HAL_RTCEx_BKUPWrite>
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b002      	add	sp, #8
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20001408 	.word	0x20001408

08004118 <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <RTC_IF_BkUp_Read_Seconds+0x18>)
 800411e:	2100      	movs	r1, #0
 8004120:	0018      	movs	r0, r3
 8004122:	f006 f993 	bl	800a44c <HAL_RTCEx_BKUPRead>
 8004126:	0003      	movs	r3, r0
}
 8004128:	0018      	movs	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	20001408 	.word	0x20001408

08004134 <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 800413a:	2101      	movs	r1, #1
 800413c:	0018      	movs	r0, r3
 800413e:	f006 f985 	bl	800a44c <HAL_RTCEx_BKUPRead>
 8004142:	0003      	movs	r3, r0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	20001408 	.word	0x20001408

08004150 <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8004150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004152:	b08d      	sub	sp, #52	; 0x34
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8004158:	242e      	movs	r4, #46	; 0x2e
 800415a:	193b      	adds	r3, r7, r4
 800415c:	2200      	movs	r2, #0
 800415e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8004160:	232c      	movs	r3, #44	; 0x2c
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	2200      	movs	r2, #0
 8004166:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8004168:	232a      	movs	r3, #42	; 0x2a
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	2200      	movs	r2, #0
 800416e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8004170:	2328      	movs	r3, #40	; 0x28
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	2200      	movs	r2, #0
 8004176:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8004178:	2526      	movs	r5, #38	; 0x26
 800417a:	197b      	adds	r3, r7, r5
 800417c:	2200      	movs	r2, #0
 800417e:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8004180:	2610      	movs	r6, #16
 8004182:	19ba      	adds	r2, r7, r6
 8004184:	4b9b      	ldr	r3, [pc, #620]	; (80043f4 <RTC_StartWakeUpAlarm+0x2a4>)
 8004186:	3304      	adds	r3, #4
 8004188:	cb23      	ldmia	r3!, {r0, r1, r5}
 800418a:	c223      	stmia	r2!, {r0, r1, r5}
 800418c:	cb03      	ldmia	r3!, {r0, r1}
 800418e:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8004190:	230c      	movs	r3, #12
 8004192:	001d      	movs	r5, r3
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	4a97      	ldr	r2, [pc, #604]	; (80043f4 <RTC_StartWakeUpAlarm+0x2a4>)
 8004198:	6992      	ldr	r2, [r2, #24]
 800419a:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 800419c:	f7ff fe86 	bl	8003eac <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 80041a0:	19bb      	adds	r3, r7, r6
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	193b      	adds	r3, r7, r4
 80041a8:	4993      	ldr	r1, [pc, #588]	; (80043f8 <RTC_StartWakeUpAlarm+0x2a8>)
 80041aa:	1a8a      	subs	r2, r1, r2
 80041ac:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	059b      	lsls	r3, r3, #22
 80041b4:	0d9b      	lsrs	r3, r3, #22
 80041b6:	b299      	uxth	r1, r3
 80041b8:	193b      	adds	r3, r7, r4
 80041ba:	193a      	adds	r2, r7, r4
 80041bc:	8812      	ldrh	r2, [r2, #0]
 80041be:	188a      	adds	r2, r1, r2
 80041c0:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	0a9b      	lsrs	r3, r3, #10
 80041c6:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 80041c8:	002b      	movs	r3, r5
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	789a      	ldrb	r2, [r3, #2]
 80041ce:	2526      	movs	r5, #38	; 0x26
 80041d0:	197b      	adds	r3, r7, r5
 80041d2:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80041d4:	e00a      	b.n	80041ec <RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a88      	ldr	r2, [pc, #544]	; (80043fc <RTC_StartWakeUpAlarm+0x2ac>)
 80041da:	4694      	mov	ip, r2
 80041dc:	4463      	add	r3, ip
 80041de:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 80041e0:	2126      	movs	r1, #38	; 0x26
 80041e2:	187b      	adds	r3, r7, r1
 80041e4:	881a      	ldrh	r2, [r3, #0]
 80041e6:	187b      	adds	r3, r7, r1
 80041e8:	3201      	adds	r2, #1
 80041ea:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a84      	ldr	r2, [pc, #528]	; (8004400 <RTC_StartWakeUpAlarm+0x2b0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d8f0      	bhi.n	80041d6 <RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80041f4:	2310      	movs	r3, #16
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	2328      	movs	r3, #40	; 0x28
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004200:	e00a      	b.n	8004218 <RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a7f      	ldr	r2, [pc, #508]	; (8004404 <RTC_StartWakeUpAlarm+0x2b4>)
 8004206:	4694      	mov	ip, r2
 8004208:	4463      	add	r3, ip
 800420a:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 800420c:	2128      	movs	r1, #40	; 0x28
 800420e:	187b      	adds	r3, r7, r1
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	187b      	adds	r3, r7, r1
 8004214:	3201      	adds	r2, #1
 8004216:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	23e1      	movs	r3, #225	; 0xe1
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	429a      	cmp	r2, r3
 8004220:	d2ef      	bcs.n	8004202 <RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8004222:	2310      	movs	r3, #16
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	785a      	ldrb	r2, [r3, #1]
 8004228:	232a      	movs	r3, #42	; 0x2a
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800422e:	e008      	b.n	8004242 <RTC_StartWakeUpAlarm+0xf2>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3b3c      	subs	r3, #60	; 0x3c
 8004234:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8004236:	212a      	movs	r1, #42	; 0x2a
 8004238:	187b      	adds	r3, r7, r1
 800423a:	881a      	ldrh	r2, [r3, #0]
 800423c:	187b      	adds	r3, r7, r1
 800423e:	3201      	adds	r2, #1
 8004240:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b3b      	cmp	r3, #59	; 0x3b
 8004246:	d8f3      	bhi.n	8004230 <RTC_StartWakeUpAlarm+0xe0>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8004248:	2310      	movs	r3, #16
 800424a:	18fb      	adds	r3, r7, r3
 800424c:	789b      	ldrb	r3, [r3, #2]
 800424e:	b299      	uxth	r1, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	b29a      	uxth	r2, r3
 8004254:	232c      	movs	r3, #44	; 0x2c
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	188a      	adds	r2, r1, r2
 800425a:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 800425c:	e00d      	b.n	800427a <RTC_StartWakeUpAlarm+0x12a>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 800425e:	222e      	movs	r2, #46	; 0x2e
 8004260:	18bb      	adds	r3, r7, r2
 8004262:	18ba      	adds	r2, r7, r2
 8004264:	8812      	ldrh	r2, [r2, #0]
 8004266:	4968      	ldr	r1, [pc, #416]	; (8004408 <RTC_StartWakeUpAlarm+0x2b8>)
 8004268:	468c      	mov	ip, r1
 800426a:	4462      	add	r2, ip
 800426c:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	187b      	adds	r3, r7, r1
 8004272:	881a      	ldrh	r2, [r3, #0]
 8004274:	187b      	adds	r3, r7, r1
 8004276:	3201      	adds	r2, #1
 8004278:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 800427a:	232e      	movs	r3, #46	; 0x2e
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	881a      	ldrh	r2, [r3, #0]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	429a      	cmp	r2, r3
 8004286:	d2ea      	bcs.n	800425e <RTC_StartWakeUpAlarm+0x10e>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8004288:	e00b      	b.n	80042a2 <RTC_StartWakeUpAlarm+0x152>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800428a:	222c      	movs	r2, #44	; 0x2c
 800428c:	18bb      	adds	r3, r7, r2
 800428e:	18ba      	adds	r2, r7, r2
 8004290:	8812      	ldrh	r2, [r2, #0]
 8004292:	3a3c      	subs	r2, #60	; 0x3c
 8004294:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8004296:	212a      	movs	r1, #42	; 0x2a
 8004298:	187b      	adds	r3, r7, r1
 800429a:	881a      	ldrh	r2, [r3, #0]
 800429c:	187b      	adds	r3, r7, r1
 800429e:	3201      	adds	r2, #1
 80042a0:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 80042a2:	232c      	movs	r3, #44	; 0x2c
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	2b3b      	cmp	r3, #59	; 0x3b
 80042aa:	d8ee      	bhi.n	800428a <RTC_StartWakeUpAlarm+0x13a>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80042ac:	e00b      	b.n	80042c6 <RTC_StartWakeUpAlarm+0x176>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80042ae:	222a      	movs	r2, #42	; 0x2a
 80042b0:	18bb      	adds	r3, r7, r2
 80042b2:	18ba      	adds	r2, r7, r2
 80042b4:	8812      	ldrh	r2, [r2, #0]
 80042b6:	3a3c      	subs	r2, #60	; 0x3c
 80042b8:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 80042ba:	2128      	movs	r1, #40	; 0x28
 80042bc:	187b      	adds	r3, r7, r1
 80042be:	881a      	ldrh	r2, [r3, #0]
 80042c0:	187b      	adds	r3, r7, r1
 80042c2:	3201      	adds	r2, #1
 80042c4:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80042c6:	232a      	movs	r3, #42	; 0x2a
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	2b3b      	cmp	r3, #59	; 0x3b
 80042ce:	d8ee      	bhi.n	80042ae <RTC_StartWakeUpAlarm+0x15e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80042d0:	e00b      	b.n	80042ea <RTC_StartWakeUpAlarm+0x19a>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 80042d2:	2228      	movs	r2, #40	; 0x28
 80042d4:	18bb      	adds	r3, r7, r2
 80042d6:	18ba      	adds	r2, r7, r2
 80042d8:	8812      	ldrh	r2, [r2, #0]
 80042da:	3a18      	subs	r2, #24
 80042dc:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 80042de:	2126      	movs	r1, #38	; 0x26
 80042e0:	187b      	adds	r3, r7, r1
 80042e2:	881a      	ldrh	r2, [r3, #0]
 80042e4:	187b      	adds	r3, r7, r1
 80042e6:	3201      	adds	r2, #1
 80042e8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80042ea:	2328      	movs	r3, #40	; 0x28
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	2b17      	cmp	r3, #23
 80042f2:	d8ee      	bhi.n	80042d2 <RTC_StartWakeUpAlarm+0x182>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 80042f4:	210c      	movs	r1, #12
 80042f6:	187b      	adds	r3, r7, r1
 80042f8:	78db      	ldrb	r3, [r3, #3]
 80042fa:	2203      	movs	r2, #3
 80042fc:	4013      	ands	r3, r2
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d119      	bne.n	8004338 <RTC_StartWakeUpAlarm+0x1e8>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8004304:	187b      	adds	r3, r7, r1
 8004306:	785b      	ldrb	r3, [r3, #1]
 8004308:	3b01      	subs	r3, #1
 800430a:	4a40      	ldr	r2, [pc, #256]	; (800440c <RTC_StartWakeUpAlarm+0x2bc>)
 800430c:	5cd3      	ldrb	r3, [r2, r3]
 800430e:	b29b      	uxth	r3, r3
 8004310:	2426      	movs	r4, #38	; 0x26
 8004312:	193a      	adds	r2, r7, r4
 8004314:	8812      	ldrh	r2, [r2, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d928      	bls.n	800436c <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 800431a:	193b      	adds	r3, r7, r4
 800431c:	8818      	ldrh	r0, [r3, #0]
 800431e:	187b      	adds	r3, r7, r1
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	3b01      	subs	r3, #1
 8004324:	4a39      	ldr	r2, [pc, #228]	; (800440c <RTC_StartWakeUpAlarm+0x2bc>)
 8004326:	5cd3      	ldrb	r3, [r2, r3]
 8004328:	0019      	movs	r1, r3
 800432a:	f7fc f865 	bl	80003f8 <__aeabi_idivmod>
 800432e:	000b      	movs	r3, r1
 8004330:	001a      	movs	r2, r3
 8004332:	193b      	adds	r3, r7, r4
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	e019      	b.n	800436c <RTC_StartWakeUpAlarm+0x21c>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8004338:	210c      	movs	r1, #12
 800433a:	187b      	adds	r3, r7, r1
 800433c:	785b      	ldrb	r3, [r3, #1]
 800433e:	3b01      	subs	r3, #1
 8004340:	4a33      	ldr	r2, [pc, #204]	; (8004410 <RTC_StartWakeUpAlarm+0x2c0>)
 8004342:	5cd3      	ldrb	r3, [r2, r3]
 8004344:	b29b      	uxth	r3, r3
 8004346:	2426      	movs	r4, #38	; 0x26
 8004348:	193a      	adds	r2, r7, r4
 800434a:	8812      	ldrh	r2, [r2, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d90d      	bls.n	800436c <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8004350:	193b      	adds	r3, r7, r4
 8004352:	8818      	ldrh	r0, [r3, #0]
 8004354:	187b      	adds	r3, r7, r1
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	3b01      	subs	r3, #1
 800435a:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <RTC_StartWakeUpAlarm+0x2c0>)
 800435c:	5cd3      	ldrb	r3, [r2, r3]
 800435e:	0019      	movs	r1, r3
 8004360:	f7fc f84a 	bl	80003f8 <__aeabi_idivmod>
 8004364:	000b      	movs	r3, r1
 8004366:	001a      	movs	r2, r3
 8004368:	193b      	adds	r3, r7, r4
 800436a:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 800436c:	232e      	movs	r3, #46	; 0x2e
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <RTC_StartWakeUpAlarm+0x2a8>)
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	001a      	movs	r2, r3
 8004378:	4b26      	ldr	r3, [pc, #152]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 800437a:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 800437c:	4b25      	ldr	r3, [pc, #148]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 800437e:	22a0      	movs	r2, #160	; 0xa0
 8004380:	0512      	lsls	r2, r2, #20
 8004382:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8004384:	232c      	movs	r3, #44	; 0x2c
 8004386:	18fb      	adds	r3, r7, r3
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	4b21      	ldr	r3, [pc, #132]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 800438e:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8004390:	232a      	movs	r3, #42	; 0x2a
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 800439a:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800439c:	2328      	movs	r3, #40	; 0x28
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 80043a6:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80043a8:	2326      	movs	r3, #38	; 0x26
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b2d9      	uxtb	r1, r3
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 80043b2:	2220      	movs	r2, #32
 80043b4:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80043b6:	2310      	movs	r3, #16
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	78da      	ldrb	r2, [r3, #3]
 80043bc:	4b15      	ldr	r3, [pc, #84]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 80043be:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 80043ce:	2280      	movs	r2, #128	; 0x80
 80043d0:	0052      	lsls	r2, r2, #1
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80043d4:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80043da:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 80043dc:	2200      	movs	r2, #0
 80043de:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80043e0:	490c      	ldr	r1, [pc, #48]	; (8004414 <RTC_StartWakeUpAlarm+0x2c4>)
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <RTC_StartWakeUpAlarm+0x2c8>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	0018      	movs	r0, r3
 80043e8:	f005 fd4a 	bl	8009e80 <HAL_RTC_SetAlarm_IT>
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b00d      	add	sp, #52	; 0x34
 80043f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f4:	20000384 	.word	0x20000384
 80043f8:	000003ff 	.word	0x000003ff
 80043fc:	fffeae80 	.word	0xfffeae80
 8004400:	0001517f 	.word	0x0001517f
 8004404:	fffff1f0 	.word	0xfffff1f0
 8004408:	fffffc00 	.word	0xfffffc00
 800440c:	0801e414 	.word	0x0801e414
 8004410:	0801e408 	.word	0x0801e408
 8004414:	2000035c 	.word	0x2000035c
 8004418:	20001408 	.word	0x20001408

0800441c <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800442a:	6839      	ldr	r1, [r7, #0]
 800442c:	4b42      	ldr	r3, [pc, #264]	; (8004538 <RTC_GetCalendarValue+0x11c>)
 800442e:	2200      	movs	r2, #0
 8004430:	0018      	movs	r0, r3
 8004432:	f005 fbcd 	bl	8009bd0 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 8004436:	4b41      	ldr	r3, [pc, #260]	; (800453c <RTC_GetCalendarValue+0x120>)
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff fcc7 	bl	8003dcc <LL_RTC_TIME_GetSubSecond>
 800443e:	0003      	movs	r3, r0
 8004440:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4b3c      	ldr	r3, [pc, #240]	; (8004538 <RTC_GetCalendarValue+0x11c>)
 8004446:	2200      	movs	r2, #0
 8004448:	0018      	movs	r0, r3
 800444a:	f005 fccb 	bl	8009de4 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800444e:	6839      	ldr	r1, [r7, #0]
 8004450:	4b39      	ldr	r3, [pc, #228]	; (8004538 <RTC_GetCalendarValue+0x11c>)
 8004452:	2200      	movs	r2, #0
 8004454:	0018      	movs	r0, r3
 8004456:	f005 fbbb 	bl	8009bd0 <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800445a:	4b38      	ldr	r3, [pc, #224]	; (800453c <RTC_GetCalendarValue+0x120>)
 800445c:	0018      	movs	r0, r3
 800445e:	f7ff fcb5 	bl	8003dcc <LL_RTC_TIME_GetSubSecond>
 8004462:	0002      	movs	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4293      	cmp	r3, r2
 8004468:	d1e5      	bne.n	8004436 <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	78db      	ldrb	r3, [r3, #3]
 800446e:	001a      	movs	r2, r3
 8004470:	4b33      	ldr	r3, [pc, #204]	; (8004540 <RTC_GetCalendarValue+0x124>)
 8004472:	4353      	muls	r3, r2
 8004474:	3303      	adds	r3, #3
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	78db      	ldrb	r3, [r3, #3]
 800447e:	2203      	movs	r2, #3
 8004480:	4013      	ands	r3, r2
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <RTC_GetCalendarValue+0x70>
 8004488:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <RTC_GetCalendarValue+0x128>)
 800448a:	e000      	b.n	800448e <RTC_GetCalendarValue+0x72>
 800448c:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <RTC_GetCalendarValue+0x12c>)
 800448e:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	785b      	ldrb	r3, [r3, #1]
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	0013      	movs	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	3301      	adds	r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	da00      	bge.n	80044a8 <RTC_GetCalendarValue+0x8c>
 80044a6:	3301      	adds	r3, #1
 80044a8:	105b      	asrs	r3, r3, #1
 80044aa:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	785b      	ldrb	r3, [r3, #1]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	40da      	lsrs	r2, r3
 80044b8:	0013      	movs	r3, r2
 80044ba:	2203      	movs	r2, #3
 80044bc:	4013      	ands	r3, r2
 80044be:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	18d3      	adds	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	789b      	ldrb	r3, [r3, #2]
 80044ca:	001a      	movs	r2, r3
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	18d3      	adds	r3, r2, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	0013      	movs	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	189b      	adds	r3, r3, r2
 80044dc:	011a      	lsls	r2, r3, #4
 80044de:	1ad2      	subs	r2, r2, r3
 80044e0:	0113      	lsls	r3, r2, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	01db      	lsls	r3, r3, #7
 80044e6:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	789b      	ldrb	r3, [r3, #2]
 80044ec:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	001a      	movs	r2, r3
 80044f4:	0013      	movs	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	011a      	lsls	r2, r3, #4
 80044fc:	1ad2      	subs	r2, r2, r3
 80044fe:	0113      	lsls	r3, r2, #4
 8004500:	001a      	movs	r2, r3
 8004502:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	001a      	movs	r2, r3
 800450a:	0013      	movs	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	18c3      	adds	r3, r0, r3
 8004514:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	18d3      	adds	r3, r2, r3
 800451a:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	029a      	lsls	r2, r3, #10
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	4a09      	ldr	r2, [pc, #36]	; (800454c <RTC_GetCalendarValue+0x130>)
 8004528:	4694      	mov	ip, r2
 800452a:	4463      	add	r3, ip
 800452c:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 800452e:	697b      	ldr	r3, [r7, #20]
}
 8004530:	0018      	movs	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	b006      	add	sp, #24
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20001408 	.word	0x20001408
 800453c:	40002800 	.word	0x40002800
 8004540:	000005b5 	.word	0x000005b5
 8004544:	00445550 	.word	0x00445550
 8004548:	0099aaa0 	.word	0x0099aaa0
 800454c:	000003ff 	.word	0x000003ff

08004550 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456a:	f3ef 8310 	mrs	r3, PRIMASK
 800456e:	607b      	str	r3, [r7, #4]
  return(result);
 8004570:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8004572:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004574:	b672      	cpsid	i
}
 8004576:	46c0      	nop			; (mov r8, r8)

  Sx_Board_IoDeInit();
 8004578:	f001 fcdc 	bl	8005f34 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <PWR_EnterStopMode+0x48>)
 800457e:	0018      	movs	r0, r3
 8004580:	f7ff f95c 	bl	800383c <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <PWR_EnterStopMode+0x4c>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <PWR_EnterStopMode+0x4c>)
 800458a:	2104      	movs	r1, #4
 800458c:	430a      	orrs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f383 8810 	msr	PRIMASK, r3
}
 800459a:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800459c:	2101      	movs	r1, #1
 800459e:	2001      	movs	r0, #1
 80045a0:	f004 f9ee 	bl	8008980 <HAL_PWR_EnterSTOPMode>
}
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b004      	add	sp, #16
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	2000137c 	.word	0x2000137c
 80045b0:	40007000 	.word	0x40007000

080045b4 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ba:	f3ef 8310 	mrs	r3, PRIMASK
 80045be:	60bb      	str	r3, [r7, #8]
  return(result);
 80045c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 80045c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80045c4:	b672      	cpsid	i
}
 80045c6:	46c0      	nop			; (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <PWR_ExitStopMode+0x7c>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b18      	ldr	r3, [pc, #96]	; (8004630 <PWR_ExitStopMode+0x7c>)
 80045ce:	2101      	movs	r1, #1
 80045d0:	430a      	orrs	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	4b16      	ldr	r3, [pc, #88]	; (8004630 <PWR_ExitStopMode+0x7c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2204      	movs	r2, #4
 80045dc:	4013      	ands	r3, r2
 80045de:	d0fa      	beq.n	80045d6 <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 80045e0:	4b13      	ldr	r3, [pc, #76]	; (8004630 <PWR_ExitStopMode+0x7c>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b12      	ldr	r3, [pc, #72]	; (8004630 <PWR_ExitStopMode+0x7c>)
 80045e6:	2180      	movs	r1, #128	; 0x80
 80045e8:	0449      	lsls	r1, r1, #17
 80045ea:	430a      	orrs	r2, r1
 80045ec:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <PWR_ExitStopMode+0x7c>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	049b      	lsls	r3, r3, #18
 80045f8:	4013      	ands	r3, r2
 80045fa:	d0f9      	beq.n	80045f0 <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <PWR_ExitStopMode+0x7c>)
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <PWR_ExitStopMode+0x7c>)
 8004602:	2103      	movs	r1, #3
 8004604:	430a      	orrs	r2, r1
 8004606:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <PWR_ExitStopMode+0x7c>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	220c      	movs	r2, #12
 8004610:	4013      	ands	r3, r2
 8004612:	2b0c      	cmp	r3, #12
 8004614:	d1f9      	bne.n	800460a <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8004616:	f001 fb87 	bl	8005d28 <CMWX1ZZABZ0XX_RADIO_IoInit>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f383 8810 	msr	PRIMASK, r3
}
 8004624:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b004      	add	sp, #16
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	40021000 	.word	0x40021000

08004634 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004638:	2101      	movs	r1, #1
 800463a:	2000      	movs	r0, #0
 800463c:	f004 f948 	bl	80088d0 <HAL_PWR_EnterSLEEPMode>
}
 8004640:	46c0      	nop			; (mov r8, r8)
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	af00      	add	r7, sp, #0
}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e06e      	b.n	8004740 <HAL_LPTIM_Init+0xf0>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	222e      	movs	r2, #46	; 0x2e
 8004666:	5c9b      	ldrb	r3, [r3, r2]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	222d      	movs	r2, #45	; 0x2d
 8004672:	2100      	movs	r1, #0
 8004674:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	0018      	movs	r0, r3
 800467a:	f7fe ffd9 	bl	8003630 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	222e      	movs	r2, #46	; 0x2e
 8004682:	2102      	movs	r1, #2
 8004684:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d103      	bne.n	800469e <HAL_LPTIM_Init+0x4e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2206      	movs	r2, #6
 800469a:	4393      	bics	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4a29      	ldr	r2, [pc, #164]	; (8004748 <HAL_LPTIM_Init+0xf8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a28      	ldr	r2, [pc, #160]	; (800474c <HAL_LPTIM_Init+0xfc>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d103      	bne.n	80046c0 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	22d8      	movs	r2, #216	; 0xd8
 80046bc:	4393      	bics	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a23      	ldr	r2, [pc, #140]	; (8004750 <HAL_LPTIM_Init+0x100>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80046d0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80046d6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80046dc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80046e2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80046fa:	4313      	orrs	r3, r2
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d104      	bne.n	8004714 <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	4a0b      	ldr	r2, [pc, #44]	; (8004748 <HAL_LPTIM_Init+0xf8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <HAL_LPTIM_Init+0xde>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8004726:	4313      	orrs	r3, r2
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	222e      	movs	r2, #46	; 0x2e
 800473a:	2101      	movs	r1, #1
 800473c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b004      	add	sp, #16
 8004746:	bd80      	pop	{r7, pc}
 8004748:	0000ffff 	.word	0x0000ffff
 800474c:	ffff1fff 	.word	0xffff1fff
 8004750:	ff19f1f8 	.word	0xff19f1f8

08004754 <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	222e      	movs	r2, #46	; 0x2e
 8004762:	2102      	movs	r1, #2
 8004764:	5499      	strb	r1, [r3, r2]

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2206      	movs	r2, #6
 8004772:	4393      	bics	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2180      	movs	r1, #128	; 0x80
 8004794:	0449      	lsls	r1, r1, #17
 8004796:	430a      	orrs	r2, r1
 8004798:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2101      	movs	r1, #1
 80047a6:	430a      	orrs	r2, r1
 80047a8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2210      	movs	r2, #16
 80047b0:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2110      	movs	r1, #16
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 f922 	bl	8004a08 <LPTIM_WaitForFlag>
 80047c4:	0003      	movs	r3, r0
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d101      	bne.n	80047ce <HAL_LPTIM_Encoder_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e031      	b.n	8004832 <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 f951 	bl	8004a78 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 f908 	bl	80049ee <HAL_LPTIM_GetState>
 80047de:	0003      	movs	r3, r0
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d101      	bne.n	80047e8 <HAL_LPTIM_Encoder_Start_IT+0x94>
  {
    return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e024      	b.n	8004832 <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2140      	movs	r1, #64	; 0x40
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2120      	movs	r1, #32
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2101      	movs	r1, #1
 8004814:	430a      	orrs	r2, r1
 8004816:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2104      	movs	r1, #4
 8004824:	430a      	orrs	r2, r1
 8004826:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	222e      	movs	r2, #46	; 0x2e
 800482c:	2101      	movs	r1, #1
 800482e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	0018      	movs	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	b004      	add	sp, #16
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2201      	movs	r2, #1
 800484a:	4013      	ands	r3, r2
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10e      	bne.n	800486e <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2201      	movs	r2, #1
 8004858:	4013      	ands	r3, r2
 800485a:	2b01      	cmp	r3, #1
 800485c:	d107      	bne.n	800486e <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2201      	movs	r2, #1
 8004864:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	0018      	movs	r0, r3
 800486a:	f000 f888 	bl	800497e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2202      	movs	r2, #2
 8004876:	4013      	ands	r3, r2
 8004878:	2b02      	cmp	r3, #2
 800487a:	d10e      	bne.n	800489a <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2202      	movs	r2, #2
 8004884:	4013      	ands	r3, r2
 8004886:	2b02      	cmp	r3, #2
 8004888:	d107      	bne.n	800489a <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2202      	movs	r2, #2
 8004890:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f000 f87a 	bl	800498e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2204      	movs	r2, #4
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d10e      	bne.n	80048c6 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2204      	movs	r2, #4
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2204      	movs	r2, #4
 80048bc:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 f86c 	bl	800499e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2208      	movs	r2, #8
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d10e      	bne.n	80048f2 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2208      	movs	r2, #8
 80048dc:	4013      	ands	r3, r2
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d107      	bne.n	80048f2 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2208      	movs	r2, #8
 80048e8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f000 f85e 	bl	80049ae <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2210      	movs	r2, #16
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	d10e      	bne.n	800491e <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2210      	movs	r2, #16
 8004908:	4013      	ands	r3, r2
 800490a:	2b10      	cmp	r3, #16
 800490c:	d107      	bne.n	800491e <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2210      	movs	r2, #16
 8004914:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0018      	movs	r0, r3
 800491a:	f000 f850 	bl	80049be <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2220      	movs	r2, #32
 8004926:	4013      	ands	r3, r2
 8004928:	2b20      	cmp	r3, #32
 800492a:	d10e      	bne.n	800494a <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2220      	movs	r2, #32
 8004934:	4013      	ands	r3, r2
 8004936:	2b20      	cmp	r3, #32
 8004938:	d107      	bne.n	800494a <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2220      	movs	r2, #32
 8004940:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f000 f842 	bl	80049ce <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2240      	movs	r2, #64	; 0x40
 8004952:	4013      	ands	r3, r2
 8004954:	2b40      	cmp	r3, #64	; 0x40
 8004956:	d10e      	bne.n	8004976 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2240      	movs	r2, #64	; 0x40
 8004960:	4013      	ands	r3, r2
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d107      	bne.n	8004976 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2240      	movs	r2, #64	; 0x40
 800496c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0018      	movs	r0, r3
 8004972:	f000 f834 	bl	80049de <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b002      	add	sp, #8
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	46bd      	mov	sp, r7
 800498a:	b002      	add	sp, #8
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	46bd      	mov	sp, r7
 800499a:	b002      	add	sp, #8
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b002      	add	sp, #8
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b002      	add	sp, #8
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	46bd      	mov	sp, r7
 80049da:	b002      	add	sp, #8
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b002      	add	sp, #8
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	222e      	movs	r2, #46	; 0x2e
 80049fa:	5c9b      	ldrb	r3, [r3, r2]
 80049fc:	b2db      	uxtb	r3, r3
}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b002      	add	sp, #8
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004a12:	230f      	movs	r3, #15
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <LPTIM_WaitForFlag+0x68>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4915      	ldr	r1, [pc, #84]	; (8004a74 <LPTIM_WaitForFlag+0x6c>)
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fb fb79 	bl	8000118 <__udivsi3>
 8004a26:	0003      	movs	r3, r0
 8004a28:	001a      	movs	r2, r3
 8004a2a:	0013      	movs	r3, r2
 8004a2c:	015b      	lsls	r3, r3, #5
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d103      	bne.n	8004a4c <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8004a44:	230f      	movs	r3, #15
 8004a46:	18fb      	adds	r3, r7, r3
 8004a48:	2203      	movs	r2, #3
 8004a4a:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	4013      	ands	r3, r2
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d002      	beq.n	8004a62 <LPTIM_WaitForFlag+0x5a>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1ea      	bne.n	8004a38 <LPTIM_WaitForFlag+0x30>

  return result;
 8004a62:	230f      	movs	r3, #15
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	781b      	ldrb	r3, [r3, #0]
}
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b004      	add	sp, #16
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000070 	.word	0x20000070
 8004a74:	00004e20 	.word	0x00004e20

08004a78 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a84:	b672      	cpsid	i
}
 8004a86:	46c0      	nop			; (mov r8, r8)

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	001a      	movs	r2, r3
 8004a8e:	4b55      	ldr	r3, [pc, #340]	; (8004be4 <LPTIM_Disable+0x16c>)
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d106      	bne.n	8004aa2 <LPTIM_Disable+0x2a>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004a94:	4b54      	ldr	r3, [pc, #336]	; (8004be8 <LPTIM_Disable+0x170>)
 8004a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a98:	23c0      	movs	r3, #192	; 0xc0
 8004a9a:	031b      	lsls	r3, r3, #12
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61fb      	str	r3, [r7, #28]
      break;
 8004aa0:	e000      	b.n	8004aa4 <LPTIM_Disable+0x2c>
    default:
      break;
 8004aa2:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	001a      	movs	r2, r3
 8004aca:	4b46      	ldr	r3, [pc, #280]	; (8004be4 <LPTIM_Disable+0x16c>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d10d      	bne.n	8004aec <LPTIM_Disable+0x74>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004ad0:	4b45      	ldr	r3, [pc, #276]	; (8004be8 <LPTIM_Disable+0x170>)
 8004ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad4:	4b44      	ldr	r3, [pc, #272]	; (8004be8 <LPTIM_Disable+0x170>)
 8004ad6:	2180      	movs	r1, #128	; 0x80
 8004ad8:	0609      	lsls	r1, r1, #24
 8004ada:	430a      	orrs	r2, r1
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004ade:	4b42      	ldr	r3, [pc, #264]	; (8004be8 <LPTIM_Disable+0x170>)
 8004ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae2:	4b41      	ldr	r3, [pc, #260]	; (8004be8 <LPTIM_Disable+0x170>)
 8004ae4:	0052      	lsls	r2, r2, #1
 8004ae6:	0852      	lsrs	r2, r2, #1
 8004ae8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004aea:	e000      	b.n	8004aee <LPTIM_Disable+0x76>
    default:
      break;
 8004aec:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <LPTIM_Disable+0x82>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d05b      	beq.n	8004bb2 <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	001a      	movs	r2, r3
 8004b00:	4b38      	ldr	r3, [pc, #224]	; (8004be4 <LPTIM_Disable+0x16c>)
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d106      	bne.n	8004b14 <LPTIM_Disable+0x9c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004b06:	4b38      	ldr	r3, [pc, #224]	; (8004be8 <LPTIM_Disable+0x170>)
 8004b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b0a:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <LPTIM_Disable+0x170>)
 8004b0c:	4937      	ldr	r1, [pc, #220]	; (8004bec <LPTIM_Disable+0x174>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004b12:	e000      	b.n	8004b16 <LPTIM_Disable+0x9e>
      default:
        break;
 8004b14:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01b      	beq.n	8004b54 <LPTIM_Disable+0xdc>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2101      	movs	r1, #1
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2108      	movs	r1, #8
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff ff65 	bl	8004a08 <LPTIM_WaitForFlag>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d103      	bne.n	8004b4c <LPTIM_Disable+0xd4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	222e      	movs	r2, #46	; 0x2e
 8004b48:	2103      	movs	r1, #3
 8004b4a:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2208      	movs	r2, #8
 8004b52:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01b      	beq.n	8004b92 <LPTIM_Disable+0x11a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	430a      	orrs	r2, r1
 8004b68:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2110      	movs	r1, #16
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7ff ff46 	bl	8004a08 <LPTIM_WaitForFlag>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d103      	bne.n	8004b8a <LPTIM_Disable+0x112>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	222e      	movs	r2, #46	; 0x2e
 8004b86:	2103      	movs	r1, #3
 8004b88:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2210      	movs	r2, #16
 8004b90:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	001a      	movs	r2, r3
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <LPTIM_Disable+0x16c>)
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d10b      	bne.n	8004bb6 <LPTIM_Disable+0x13e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <LPTIM_Disable+0x170>)
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba2:	4a12      	ldr	r2, [pc, #72]	; (8004bec <LPTIM_Disable+0x174>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <LPTIM_Disable+0x170>)
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004bb0:	e002      	b.n	8004bb8 <LPTIM_Disable+0x140>
      default:
        break;
    }
  }
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	e000      	b.n	8004bb8 <LPTIM_Disable+0x140>
        break;
 8004bb6:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	438a      	bics	r2, r1
 8004bc6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004bd8:	b662      	cpsie	i
}
 8004bda:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b008      	add	sp, #32
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40007c00 	.word	0x40007c00
 8004be8:	40021000 	.word	0x40021000
 8004bec:	fff3ffff 	.word	0xfff3ffff

08004bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <HAL_MspInit+0x3c>)
 8004bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <HAL_MspInit+0x3c>)
 8004bfa:	2180      	movs	r1, #128	; 0x80
 8004bfc:	0549      	lsls	r1, r1, #21
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8004c02:	f003 fe57 	bl	80088b4 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8004c06:	f003 ff25 	bl	8008a54 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_MspInit+0x40>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <HAL_MspInit+0x40>)
 8004c10:	2108      	movs	r1, #8
 8004c12:	430a      	orrs	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_MspInit+0x40>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_MspInit+0x40>)
 8004c1c:	2108      	movs	r1, #8
 8004c1e:	438a      	bics	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8004c22:	f003 ff09 	bl	8008a38 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	40022000 	.word	0x40022000

08004c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	e7fd      	b.n	8004c42 <HardFault_Handler+0x4>

08004c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c5e:	f001 fbd9 	bl	8006414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <EXTI0_1_IRQHandler+0x1c>)
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f002 fd64 	bl	800773c <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <EXTI0_1_IRQHandler+0x20>)
 8004c76:	0018      	movs	r0, r3
 8004c78:	f002 fd60 	bl	800773c <HAL_EXTI_IRQHandler>
#endif
}
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	20001658 	.word	0x20001658
 8004c88:	20001650 	.word	0x20001650

08004c8c <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 8004c90:	46c0      	nop			; (mov r8, r8)
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <EXTI4_15_IRQHandler+0x1c>)
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f002 fd4c 	bl	800773c <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8004ca4:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <EXTI4_15_IRQHandler+0x20>)
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f002 fd48 	bl	800773c <HAL_EXTI_IRQHandler>
#endif
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	20001648 	.word	0x20001648
 8004cb8:	20001660 	.word	0x20001660

08004cbc <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8004cc0:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8004cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f002 fc2a 	bl	800751e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200015c0 	.word	0x200015c0

08004cd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <USART2_IRQHandler+0x14>)
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f006 f87c 	bl	800add8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ce0:	46c0      	nop			; (mov r8, r8)
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	200015c0 	.word	0x200015c0

08004cec <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)// New
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <LPTIM1_IRQHandler+0x14>)
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f7ff fda1 	bl	800483a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	200013d8 	.word	0x200013d8

08004d04 <RTC_IRQHandler>:
/*}*/



void RTC_IRQHandler(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc); // тоже поднимает из сна sx1276 и плату
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <RTC_IRQHandler+0x14>)
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f005 faa4 	bl	800a258 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	20001408 	.word	0x20001408

08004d1c <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8004d20:	f017 fde0 	bl	801c8e4 <UTIL_TIMER_Init>

  Gpio_PreInit();
 8004d24:	f000 f8ee 	bl	8004f04 <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 8004d28:	f000 f9ba 	bl	80050a0 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8004d2c:	f016 ff36 	bl	801bb9c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <SystemApp_Init+0x44>)
 8004d32:	0018      	movs	r0, r3
 8004d34:	f016 ffea 	bl	801bd0c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8004d38:	2002      	movs	r0, #2
 8004d3a:	f016 fff5 	bl	801bd28 <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8004d3e:	f7fe fda9 	bl	8003894 <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 8004d42:	f001 fa25 	bl	8006190 <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 8004d46:	f000 ffef 	bl	8005d28 <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Initialize the Sensors */
  EnvSensors_Init(); //  dell
 8004d4a:	f000 fa4d 	bl	80051e8 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8004d4e:	f017 f9ed 	bl	801c12c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8004d52:	2101      	movs	r1, #1
 8004d54:	2001      	movs	r0, #1
 8004d56:	f017 fa29 	bl	801c1ac <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	08004eb9 	.word	0x08004eb9

08004d64 <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8004d68:	f017 fa82 	bl	801c270 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8004d6c:	46c0      	nop			; (mov r8, r8)
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8004d74:	b590      	push	{r4, r7, lr}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8004d7a:	1dfb      	adds	r3, r7, #7
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8004d80:	1d3c      	adds	r4, r7, #4
 8004d82:	f7fe fddb 	bl	800393c <SYS_GetBatteryLevel>
 8004d86:	0003      	movs	r3, r0
 8004d88:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <GetBatteryLevel+0x70>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d903      	bls.n	8004d9c <GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8004d94:	1dfb      	adds	r3, r7, #7
 8004d96:	22fe      	movs	r2, #254	; 0xfe
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e01d      	b.n	8004dd8 <GetBatteryLevel+0x64>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004d9c:	1d3b      	adds	r3, r7, #4
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	23e1      	movs	r3, #225	; 0xe1
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d203      	bcs.n	8004db0 <GetBatteryLevel+0x3c>
  {
    batteryLevel = 0;
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e013      	b.n	8004dd8 <GetBatteryLevel+0x64>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8004db0:	1d3b      	adds	r3, r7, #4
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	4a0c      	ldr	r2, [pc, #48]	; (8004de8 <GetBatteryLevel+0x74>)
 8004db6:	4694      	mov	ip, r2
 8004db8:	4463      	add	r3, ip
 8004dba:	001a      	movs	r2, r3
 8004dbc:	0013      	movs	r3, r2
 8004dbe:	01db      	lsls	r3, r3, #7
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	001a      	movs	r2, r3
 8004dc6:	2396      	movs	r3, #150	; 0x96
 8004dc8:	00d9      	lsls	r1, r3, #3
 8004dca:	0010      	movs	r0, r2
 8004dcc:	f7fb f9a4 	bl	8000118 <__udivsi3>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	001a      	movs	r2, r3
 8004dd4:	1dfb      	adds	r3, r7, #7
 8004dd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b003      	add	sp, #12
 8004de2:	bd90      	pop	{r4, r7, pc}
 8004de4:	00000bb8 	.word	0x00000bb8
 8004de8:	fffff8f8 	.word	0xfffff8f8

08004dec <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8004df2:	1dbb      	adds	r3, r7, #6
 8004df4:	2200      	movs	r2, #0
 8004df6:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8004df8:	f7fe fd58 	bl	80038ac <SYS_GetTemperatureLevel>
 8004dfc:	1e03      	subs	r3, r0, #0
 8004dfe:	da00      	bge.n	8004e02 <GetTemperatureLevel+0x16>
 8004e00:	33ff      	adds	r3, #255	; 0xff
 8004e02:	121b      	asrs	r3, r3, #8
 8004e04:	b21a      	sxth	r2, r3
 8004e06:	1dbb      	adds	r3, r7, #6
 8004e08:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8004e0a:	1dbb      	adds	r3, r7, #6
 8004e0c:	881b      	ldrh	r3, [r3, #0]
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b002      	add	sp, #8
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8004e16:	b590      	push	{r4, r7, lr}
 8004e18:	b085      	sub	sp, #20
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8004e1e:	f001 fb0b 	bl	8006438 <HAL_GetUIDw0>
 8004e22:	0004      	movs	r4, r0
 8004e24:	f001 fb1c 	bl	8006460 <HAL_GetUIDw2>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	18e3      	adds	r3, r4, r3
 8004e2c:	60fb      	str	r3, [r7, #12]
  uint32_t ID_2_val = HAL_GetUIDw1();
 8004e2e:	f001 fb0d 	bl	800644c <HAL_GetUIDw1>
 8004e32:	0003      	movs	r3, r0
 8004e34:	60bb      	str	r3, [r7, #8]

  id[7] = (ID_1_3_val) >> 24;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	0e1a      	lsrs	r2, r3, #24
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3307      	adds	r3, #7
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
  id[6] = (ID_1_3_val) >> 16;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	0c1a      	lsrs	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3306      	adds	r3, #6
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]
  id[5] = (ID_1_3_val) >> 8;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	0a1a      	lsrs	r2, r3, #8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3305      	adds	r3, #5
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]
  id[4] = (ID_1_3_val);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
  id[3] = (ID_2_val) >> 24;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	0e1a      	lsrs	r2, r3, #24
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3303      	adds	r3, #3
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]
  id[2] = (ID_2_val) >> 16;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	0c1a      	lsrs	r2, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3302      	adds	r3, #2
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]
  id[1] = (ID_2_val) >> 8;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	0a1a      	lsrs	r2, r3, #8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3301      	adds	r3, #1
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]
  id[0] = (ID_2_val);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b005      	add	sp, #20
 8004e96:	bd90      	pop	{r4, r7, pc}

08004e98 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8004e9c:	f001 facc 	bl	8006438 <HAL_GetUIDw0>
 8004ea0:	0004      	movs	r4, r0
 8004ea2:	f001 fad3 	bl	800644c <HAL_GetUIDw1>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	405c      	eors	r4, r3
 8004eaa:	f001 fad9 	bl	8006460 <HAL_GetUIDw2>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	4063      	eors	r3, r4
}
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bdb0      	pop	{r4, r5, r7, pc}

08004eb8 <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8004ec2:	2408      	movs	r4, #8
 8004ec4:	193b      	adds	r3, r7, r4
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f017 fcaa 	bl	801c820 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8004ecc:	0022      	movs	r2, r4
 8004ece:	18bb      	adds	r3, r7, r2
 8004ed0:	6819      	ldr	r1, [r3, #0]
 8004ed2:	18bb      	adds	r3, r7, r2
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	5e9b      	ldrsh	r3, [r3, r2]
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <TimestampNow+0x48>)
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	000b      	movs	r3, r1
 8004ee0:	2110      	movs	r1, #16
 8004ee2:	f000 f8a9 	bl	8005038 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f7fb f90d 	bl	8000108 <strlen>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b005      	add	sp, #20
 8004efc:	bd90      	pop	{r4, r7, pc}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	0801e478 	.word	0x0801e478

08004f04 <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b08b      	sub	sp, #44	; 0x2c
 8004f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f0a:	2414      	movs	r4, #20
 8004f0c:	193b      	adds	r3, r7, r4
 8004f0e:	0018      	movs	r0, r3
 8004f10:	2314      	movs	r3, #20
 8004f12:	001a      	movs	r2, r3
 8004f14:	2100      	movs	r1, #0
 8004f16:	f018 ff44 	bl	801dda2 <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1a:	4b38      	ldr	r3, [pc, #224]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1e:	4b37      	ldr	r3, [pc, #220]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f20:	2101      	movs	r1, #1
 8004f22:	430a      	orrs	r2, r1
 8004f24:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f26:	4b35      	ldr	r3, [pc, #212]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f32:	4b32      	ldr	r3, [pc, #200]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f36:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f38:	2102      	movs	r1, #2
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f3e:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	2202      	movs	r2, #2
 8004f44:	4013      	ands	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f4a:	4b2c      	ldr	r3, [pc, #176]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4e:	4b2b      	ldr	r3, [pc, #172]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f50:	2104      	movs	r1, #4
 8004f52:	430a      	orrs	r2, r1
 8004f54:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f56:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f66:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f68:	2180      	movs	r1, #128	; 0x80
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f6e:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	2280      	movs	r2, #128	; 0x80
 8004f74:	4013      	ands	r3, r2
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f7a:	193b      	adds	r3, r7, r4
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f80:	193b      	adds	r3, r7, r4
 8004f82:	2200      	movs	r2, #0
 8004f84:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8004f86:	193b      	adds	r3, r7, r4
 8004f88:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <Gpio_PreInit+0xfc>)
 8004f8a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f8c:	193a      	adds	r2, r7, r4
 8004f8e:	23a0      	movs	r3, #160	; 0xa0
 8004f90:	05db      	lsls	r3, r3, #23
 8004f92:	0011      	movs	r1, r2
 8004f94:	0018      	movs	r0, r3
 8004f96:	f002 fbf5 	bl	8007784 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	4a19      	ldr	r2, [pc, #100]	; (8005004 <Gpio_PreInit+0x100>)
 8004f9e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa0:	193b      	adds	r3, r7, r4
 8004fa2:	4a19      	ldr	r2, [pc, #100]	; (8005008 <Gpio_PreInit+0x104>)
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	0010      	movs	r0, r2
 8004fa8:	f002 fbec 	bl	8007784 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fac:	193b      	adds	r3, r7, r4
 8004fae:	4a17      	ldr	r2, [pc, #92]	; (800500c <Gpio_PreInit+0x108>)
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	0010      	movs	r0, r2
 8004fb4:	f002 fbe6 	bl	8007784 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004fb8:	193b      	adds	r3, r7, r4
 8004fba:	4a15      	ldr	r2, [pc, #84]	; (8005010 <Gpio_PreInit+0x10c>)
 8004fbc:	0019      	movs	r1, r3
 8004fbe:	0010      	movs	r0, r2
 8004fc0:	f002 fbe0 	bl	8007784 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8004fc4:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004fca:	2101      	movs	r1, #1
 8004fcc:	438a      	bics	r2, r1
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	438a      	bics	r2, r1
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <Gpio_PreInit+0xf8>)
 8004fee:	2180      	movs	r1, #128	; 0x80
 8004ff0:	438a      	bics	r2, r1
 8004ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b00b      	add	sp, #44	; 0x2c
 8004ffa:	bd90      	pop	{r4, r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	00009fff 	.word	0x00009fff
 8005004:	0000ffff 	.word	0x0000ffff
 8005008:	50000400 	.word	0x50000400
 800500c:	50000800 	.word	0x50000800
 8005010:	50001c00 	.word	0x50001c00

08005014 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8005018:	2101      	movs	r1, #1
 800501a:	2004      	movs	r0, #4
 800501c:	f017 f896 	bl	801c14c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8005020:	46c0      	nop			; (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800502a:	2100      	movs	r1, #0
 800502c:	2004      	movs	r0, #4
 800502e:	f017 f88d 	bl	801c14c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8005038:	b40c      	push	{r2, r3}
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8005044:	231c      	movs	r3, #28
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f018 f811 	bl	801d078 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	46bd      	mov	sp, r7
 800505a:	b004      	add	sp, #16
 800505c:	bc80      	pop	{r7}
 800505e:	bc08      	pop	{r3}
 8005060:	b002      	add	sp, #8
 8005062:	4718      	bx	r3

08005064 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800506e:	0018      	movs	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	b002      	add	sp, #8
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 800507a:	f7fe ff69 	bl	8003f50 <RTC_IF_GetTimerValue>
 800507e:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	0018      	movs	r0, r3
 8005092:	f7fe ffcb 	bl	800402c <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	46bd      	mov	sp, r7
 800509a:	b002      	add	sp, #8
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b08b      	sub	sp, #44	; 0x2c
 80050a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80050a6:	2414      	movs	r4, #20
 80050a8:	193b      	adds	r3, r7, r4
 80050aa:	0018      	movs	r0, r3
 80050ac:	2314      	movs	r3, #20
 80050ae:	001a      	movs	r2, r3
 80050b0:	2100      	movs	r1, #0
 80050b2:	f018 fe76 	bl	801dda2 <memset>

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 80050b6:	4b4a      	ldr	r3, [pc, #296]	; (80051e0 <DBG_Init+0x140>)
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	4b49      	ldr	r3, [pc, #292]	; (80051e0 <DBG_Init+0x140>)
 80050bc:	2102      	movs	r1, #2
 80050be:	430a      	orrs	r2, r1
 80050c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80050c2:	4b47      	ldr	r3, [pc, #284]	; (80051e0 <DBG_Init+0x140>)
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	2202      	movs	r2, #2
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	693b      	ldr	r3, [r7, #16]
  DGB_LINE2_CLK_ENABLE();
 80050ce:	4b44      	ldr	r3, [pc, #272]	; (80051e0 <DBG_Init+0x140>)
 80050d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d2:	4b43      	ldr	r3, [pc, #268]	; (80051e0 <DBG_Init+0x140>)
 80050d4:	2102      	movs	r1, #2
 80050d6:	430a      	orrs	r2, r1
 80050d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050da:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <DBG_Init+0x140>)
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	2202      	movs	r2, #2
 80050e0:	4013      	ands	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
  DGB_LINE3_CLK_ENABLE();
 80050e6:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <DBG_Init+0x140>)
 80050e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ea:	4b3d      	ldr	r3, [pc, #244]	; (80051e0 <DBG_Init+0x140>)
 80050ec:	2102      	movs	r1, #2
 80050ee:	430a      	orrs	r2, r1
 80050f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80050f2:	4b3b      	ldr	r3, [pc, #236]	; (80051e0 <DBG_Init+0x140>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	2202      	movs	r2, #2
 80050f8:	4013      	ands	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	68bb      	ldr	r3, [r7, #8]
  DGB_LINE4_CLK_ENABLE();
 80050fe:	4b38      	ldr	r3, [pc, #224]	; (80051e0 <DBG_Init+0x140>)
 8005100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005102:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <DBG_Init+0x140>)
 8005104:	2102      	movs	r1, #2
 8005106:	430a      	orrs	r2, r1
 8005108:	62da      	str	r2, [r3, #44]	; 0x2c
 800510a:	4b35      	ldr	r3, [pc, #212]	; (80051e0 <DBG_Init+0x140>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	2202      	movs	r2, #2
 8005110:	4013      	ands	r3, r2
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	687b      	ldr	r3, [r7, #4]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8005116:	0021      	movs	r1, r4
 8005118:	187b      	adds	r3, r7, r1
 800511a:	2201      	movs	r2, #1
 800511c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 800511e:	187b      	adds	r3, r7, r1
 8005120:	2201      	movs	r2, #1
 8005122:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 8005124:	187b      	adds	r3, r7, r1
 8005126:	2203      	movs	r2, #3
 8005128:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 800512a:	187b      	adds	r3, r7, r1
 800512c:	2280      	movs	r2, #128	; 0x80
 800512e:	0152      	lsls	r2, r2, #5
 8005130:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 8005132:	000c      	movs	r4, r1
 8005134:	187b      	adds	r3, r7, r1
 8005136:	4a2b      	ldr	r2, [pc, #172]	; (80051e4 <DBG_Init+0x144>)
 8005138:	0019      	movs	r1, r3
 800513a:	0010      	movs	r0, r2
 800513c:	f002 fb22 	bl	8007784 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 8005140:	0021      	movs	r1, r4
 8005142:	187b      	adds	r3, r7, r1
 8005144:	2280      	movs	r2, #128	; 0x80
 8005146:	0192      	lsls	r2, r2, #6
 8005148:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 800514a:	000c      	movs	r4, r1
 800514c:	187b      	adds	r3, r7, r1
 800514e:	4a25      	ldr	r2, [pc, #148]	; (80051e4 <DBG_Init+0x144>)
 8005150:	0019      	movs	r1, r3
 8005152:	0010      	movs	r0, r2
 8005154:	f002 fb16 	bl	8007784 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 8005158:	0021      	movs	r1, r4
 800515a:	187b      	adds	r3, r7, r1
 800515c:	2280      	movs	r2, #128	; 0x80
 800515e:	01d2      	lsls	r2, r2, #7
 8005160:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 8005162:	000c      	movs	r4, r1
 8005164:	187b      	adds	r3, r7, r1
 8005166:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <DBG_Init+0x144>)
 8005168:	0019      	movs	r1, r3
 800516a:	0010      	movs	r0, r2
 800516c:	f002 fb0a 	bl	8007784 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 8005170:	0021      	movs	r1, r4
 8005172:	187b      	adds	r3, r7, r1
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	0212      	lsls	r2, r2, #8
 8005178:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 800517a:	187b      	adds	r3, r7, r1
 800517c:	4a19      	ldr	r2, [pc, #100]	; (80051e4 <DBG_Init+0x144>)
 800517e:	0019      	movs	r1, r3
 8005180:	0010      	movs	r0, r2
 8005182:	f002 faff 	bl	8007784 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 8005186:	2380      	movs	r3, #128	; 0x80
 8005188:	015b      	lsls	r3, r3, #5
 800518a:	4816      	ldr	r0, [pc, #88]	; (80051e4 <DBG_Init+0x144>)
 800518c:	2200      	movs	r2, #0
 800518e:	0019      	movs	r1, r3
 8005190:	f002 fd75 	bl	8007c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	019b      	lsls	r3, r3, #6
 8005198:	4812      	ldr	r0, [pc, #72]	; (80051e4 <DBG_Init+0x144>)
 800519a:	2200      	movs	r2, #0
 800519c:	0019      	movs	r1, r3
 800519e:	f002 fd6e 	bl	8007c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	01db      	lsls	r3, r3, #7
 80051a6:	480f      	ldr	r0, [pc, #60]	; (80051e4 <DBG_Init+0x144>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	0019      	movs	r1, r3
 80051ac:	f002 fd67 	bl	8007c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	480b      	ldr	r0, [pc, #44]	; (80051e4 <DBG_Init+0x144>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	0019      	movs	r1, r3
 80051ba:	f002 fd60 	bl	8007c7e <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <DBG_Init+0x140>)
 80051c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c2:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <DBG_Init+0x140>)
 80051c4:	2180      	movs	r1, #128	; 0x80
 80051c6:	03c9      	lsls	r1, r1, #15
 80051c8:	430a      	orrs	r2, r1
 80051ca:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 80051cc:	f001 f952 	bl	8006474 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80051d0:	f001 f95e 	bl	8006490 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80051d4:	f001 f96a 	bl	80064ac <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	b00b      	add	sp, #44	; 0x2c
 80051de:	bd90      	pop	{r4, r7, pc}
 80051e0:	40021000 	.word	0x40021000
 80051e4:	50000400 	.word	0x50000400

080051e8 <EnvSensors_Init>:

  /* USER CODE END EnvSensors_Read_Last */
}

void  EnvSensors_Init(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 80051ec:	46c0      	nop			; (mov r8, r8)
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <MX_USART2_Init>:
DMA_HandleTypeDef hdma_tx;

/* USART2 init function */

void MX_USART2_Init(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0

  husart2.Instance        = USART2;
 80051f8:	4b10      	ldr	r3, [pc, #64]	; (800523c <MX_USART2_Init+0x48>)
 80051fa:	4a11      	ldr	r2, [pc, #68]	; (8005240 <MX_USART2_Init+0x4c>)
 80051fc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <MX_USART2_Init+0x48>)
 8005200:	22e1      	movs	r2, #225	; 0xe1
 8005202:	0252      	lsls	r2, r2, #9
 8005204:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005206:	4b0d      	ldr	r3, [pc, #52]	; (800523c <MX_USART2_Init+0x48>)
 8005208:	2200      	movs	r2, #0
 800520a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <MX_USART2_Init+0x48>)
 800520e:	2200      	movs	r2, #0
 8005210:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8005212:	4b0a      	ldr	r3, [pc, #40]	; (800523c <MX_USART2_Init+0x48>)
 8005214:	2200      	movs	r2, #0
 8005216:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode       = UART_MODE_TX;
 8005218:	4b08      	ldr	r3, [pc, #32]	; (800523c <MX_USART2_Init+0x48>)
 800521a:	2208      	movs	r2, #8
 800521c:	615a      	str	r2, [r3, #20]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800521e:	4b07      	ldr	r3, [pc, #28]	; (800523c <MX_USART2_Init+0x48>)
 8005220:	2200      	movs	r2, #0
 8005222:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <MX_USART2_Init+0x48>)
 8005226:	0018      	movs	r0, r3
 8005228:	f005 fc98 	bl	800ab5c <HAL_UART_Init>
 800522c:	1e03      	subs	r3, r0, #0
 800522e:	d001      	beq.n	8005234 <MX_USART2_Init+0x40>
  {
    Error_Handler();
 8005230:	f7fe fce8 	bl	8003c04 <Error_Handler>
  }
}
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	200015c0 	.word	0x200015c0
 8005240:	40004400 	.word	0x40004400

08005244 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b095      	sub	sp, #84	; 0x54
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524c:	233c      	movs	r3, #60	; 0x3c
 800524e:	18fb      	adds	r3, r7, r3
 8005250:	0018      	movs	r0, r3
 8005252:	2314      	movs	r3, #20
 8005254:	001a      	movs	r2, r3
 8005256:	2100      	movs	r1, #0
 8005258:	f018 fda3 	bl	801dda2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800525c:	2418      	movs	r4, #24
 800525e:	193b      	adds	r3, r7, r4
 8005260:	0018      	movs	r0, r3
 8005262:	2324      	movs	r3, #36	; 0x24
 8005264:	001a      	movs	r2, r3
 8005266:	2100      	movs	r1, #0
 8005268:	f018 fd9b 	bl	801dda2 <memset>
  if (uartHandle->Instance == USART2)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a57      	ldr	r2, [pc, #348]	; (80053d0 <HAL_UART_MspInit+0x18c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d000      	beq.n	8005278 <HAL_UART_MspInit+0x34>
 8005276:	e0a6      	b.n	80053c6 <HAL_UART_MspInit+0x182>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8005278:	4b56      	ldr	r3, [pc, #344]	; (80053d4 <HAL_UART_MspInit+0x190>)
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	4b55      	ldr	r3, [pc, #340]	; (80053d4 <HAL_UART_MspInit+0x190>)
 800527e:	2101      	movs	r1, #1
 8005280:	430a      	orrs	r2, r1
 8005282:	62da      	str	r2, [r3, #44]	; 0x2c
 8005284:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <HAL_UART_MspInit+0x190>)
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	2201      	movs	r2, #1
 800528a:	4013      	ands	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 8005290:	4b50      	ldr	r3, [pc, #320]	; (80053d4 <HAL_UART_MspInit+0x190>)
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	4b4f      	ldr	r3, [pc, #316]	; (80053d4 <HAL_UART_MspInit+0x190>)
 8005296:	2101      	movs	r1, #1
 8005298:	430a      	orrs	r2, r1
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c
 800529c:	4b4d      	ldr	r3, [pc, #308]	; (80053d4 <HAL_UART_MspInit+0x190>)
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	2201      	movs	r2, #1
 80052a2:	4013      	ands	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 80052a8:	4b4a      	ldr	r3, [pc, #296]	; (80053d4 <HAL_UART_MspInit+0x190>)
 80052aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ac:	4b49      	ldr	r3, [pc, #292]	; (80053d4 <HAL_UART_MspInit+0x190>)
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	0289      	lsls	r1, r1, #10
 80052b2:	430a      	orrs	r2, r1
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 80052b6:	4b47      	ldr	r3, [pc, #284]	; (80053d4 <HAL_UART_MspInit+0x190>)
 80052b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ba:	4b46      	ldr	r3, [pc, #280]	; (80053d4 <HAL_UART_MspInit+0x190>)
 80052bc:	2101      	movs	r1, #1
 80052be:	430a      	orrs	r2, r1
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30
 80052c2:	4b44      	ldr	r3, [pc, #272]	; (80053d4 <HAL_UART_MspInit+0x190>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	2201      	movs	r2, #1
 80052c8:	4013      	ands	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80052ce:	4b41      	ldr	r3, [pc, #260]	; (80053d4 <HAL_UART_MspInit+0x190>)
 80052d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d2:	4b40      	ldr	r3, [pc, #256]	; (80053d4 <HAL_UART_MspInit+0x190>)
 80052d4:	2180      	movs	r1, #128	; 0x80
 80052d6:	0289      	lsls	r1, r1, #10
 80052d8:	430a      	orrs	r2, r1
 80052da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80052dc:	193b      	adds	r3, r7, r4
 80052de:	2202      	movs	r2, #2
 80052e0:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80052e2:	193b      	adds	r3, r7, r4
 80052e4:	2204      	movs	r2, #4
 80052e6:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052e8:	193b      	adds	r3, r7, r4
 80052ea:	0018      	movs	r0, r3
 80052ec:	f004 f9b8 	bl	8009660 <HAL_RCCEx_PeriphCLKConfig>
 80052f0:	1e03      	subs	r3, r0, #0
 80052f2:	d001      	beq.n	80052f8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80052f4:	f7fe fc86 	bl	8003c04 <Error_Handler>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 80052f8:	243c      	movs	r4, #60	; 0x3c
 80052fa:	193b      	adds	r3, r7, r4
 80052fc:	2204      	movs	r2, #4
 80052fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005300:	193b      	adds	r3, r7, r4
 8005302:	2202      	movs	r2, #2
 8005304:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005306:	193b      	adds	r3, r7, r4
 8005308:	2200      	movs	r2, #0
 800530a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800530c:	193b      	adds	r3, r7, r4
 800530e:	2203      	movs	r2, #3
 8005310:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8005312:	193b      	adds	r3, r7, r4
 8005314:	2204      	movs	r2, #4
 8005316:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8005318:	193a      	adds	r2, r7, r4
 800531a:	23a0      	movs	r3, #160	; 0xa0
 800531c:	05db      	lsls	r3, r3, #23
 800531e:	0011      	movs	r1, r2
 8005320:	0018      	movs	r0, r3
 8005322:	f002 fa2f 	bl	8007784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8005326:	0021      	movs	r1, r4
 8005328:	187b      	adds	r3, r7, r1
 800532a:	2208      	movs	r2, #8
 800532c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800532e:	187b      	adds	r3, r7, r1
 8005330:	2202      	movs	r2, #2
 8005332:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005334:	187b      	adds	r3, r7, r1
 8005336:	2200      	movs	r2, #0
 8005338:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800533a:	187b      	adds	r3, r7, r1
 800533c:	2203      	movs	r2, #3
 800533e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8005340:	187b      	adds	r3, r7, r1
 8005342:	2204      	movs	r2, #4
 8005344:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8005346:	187a      	adds	r2, r7, r1
 8005348:	23a0      	movs	r3, #160	; 0xa0
 800534a:	05db      	lsls	r3, r3, #23
 800534c:	0011      	movs	r1, r2
 800534e:	0018      	movs	r0, r3
 8005350:	f002 fa18 	bl	8007784 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8005354:	4b20      	ldr	r3, [pc, #128]	; (80053d8 <HAL_UART_MspInit+0x194>)
 8005356:	4a21      	ldr	r2, [pc, #132]	; (80053dc <HAL_UART_MspInit+0x198>)
 8005358:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800535a:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <HAL_UART_MspInit+0x194>)
 800535c:	2204      	movs	r2, #4
 800535e:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005360:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <HAL_UART_MspInit+0x194>)
 8005362:	2210      	movs	r2, #16
 8005364:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005366:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <HAL_UART_MspInit+0x194>)
 8005368:	2200      	movs	r2, #0
 800536a:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800536c:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <HAL_UART_MspInit+0x194>)
 800536e:	2280      	movs	r2, #128	; 0x80
 8005370:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005372:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <HAL_UART_MspInit+0x194>)
 8005374:	2200      	movs	r2, #0
 8005376:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8005378:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <HAL_UART_MspInit+0x194>)
 800537a:	2200      	movs	r2, #0
 800537c:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800537e:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <HAL_UART_MspInit+0x194>)
 8005380:	2200      	movs	r2, #0
 8005382:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8005384:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <HAL_UART_MspInit+0x194>)
 8005386:	2200      	movs	r2, #0
 8005388:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <HAL_UART_MspInit+0x194>)
 800538c:	0018      	movs	r0, r3
 800538e:	f001 ff03 	bl	8007198 <HAL_DMA_Init>
 8005392:	1e03      	subs	r3, r0, #0
 8005394:	d001      	beq.n	800539a <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8005396:	f7fe fc35 	bl	8003c04 <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a0e      	ldr	r2, [pc, #56]	; (80053d8 <HAL_UART_MspInit+0x194>)
 800539e:	66da      	str	r2, [r3, #108]	; 0x6c
 80053a0:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <HAL_UART_MspInit+0x194>)
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80053a6:	2201      	movs	r2, #1
 80053a8:	2100      	movs	r1, #0
 80053aa:	200b      	movs	r0, #11
 80053ac:	f001 febe 	bl	800712c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80053b0:	200b      	movs	r0, #11
 80053b2:	f001 fed0 	bl	8007156 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 80053b6:	2201      	movs	r2, #1
 80053b8:	2100      	movs	r1, #0
 80053ba:	201c      	movs	r0, #28
 80053bc:	f001 feb6 	bl	800712c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80053c0:	201c      	movs	r0, #28
 80053c2:	f001 fec8 	bl	8007156 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b015      	add	sp, #84	; 0x54
 80053cc:	bd90      	pop	{r4, r7, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	40004400 	.word	0x40004400
 80053d4:	40021000 	.word	0x40021000
 80053d8:	20001578 	.word	0x20001578
 80053dc:	40020080 	.word	0x40020080

080053e0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == USART2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a0d      	ldr	r2, [pc, #52]	; (8005424 <HAL_UART_MspDeInit+0x44>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d113      	bne.n	800541a <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_UART_MspDeInit+0x48>)
 80053f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <HAL_UART_MspDeInit+0x48>)
 80053f8:	490c      	ldr	r1, [pc, #48]	; (800542c <HAL_UART_MspDeInit+0x4c>)
 80053fa:	400a      	ands	r2, r1
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80053fe:	23a0      	movs	r3, #160	; 0xa0
 8005400:	05db      	lsls	r3, r3, #23
 8005402:	210c      	movs	r1, #12
 8005404:	0018      	movs	r0, r3
 8005406:	f002 fb3b 	bl	8007a80 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540e:	0018      	movs	r0, r3
 8005410:	f001 ff3a 	bl	8007288 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005414:	201c      	movs	r0, #28
 8005416:	f001 feae 	bl	8007176 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b002      	add	sp, #8
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	40004400 	.word	0x40004400
 8005428:	40021000 	.word	0x40021000
 800542c:	fffdffff 	.word	0xfffdffff

08005430 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <vcom_Init+0x20>)
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 800543e:	f7fe fb21 	bl	8003a84 <MX_DMA_Init>
  MX_USART2_Init();
 8005442:	f7ff fed7 	bl	80051f4 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
 8005446:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b002      	add	sp, #8
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200003a0 	.word	0x200003a0

08005454 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8005458:	4b0b      	ldr	r3, [pc, #44]	; (8005488 <vcom_DeInit+0x34>)
 800545a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <vcom_DeInit+0x34>)
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	0289      	lsls	r1, r1, #10
 8005462:	430a      	orrs	r2, r1
 8005464:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <vcom_DeInit+0x34>)
 8005468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800546a:	4b07      	ldr	r3, [pc, #28]	; (8005488 <vcom_DeInit+0x34>)
 800546c:	4907      	ldr	r1, [pc, #28]	; (800548c <vcom_DeInit+0x38>)
 800546e:	400a      	ands	r2, r1
 8005470:	629a      	str	r2, [r3, #40]	; 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8005472:	4b07      	ldr	r3, [pc, #28]	; (8005490 <vcom_DeInit+0x3c>)
 8005474:	0018      	movs	r0, r3
 8005476:	f7ff ffb3 	bl	80053e0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800547a:	200b      	movs	r0, #11
 800547c:	f001 fe7b 	bl	8007176 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8005480:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	fffdffff 	.word	0xfffdffff
 8005490:	200015c0 	.word	0x200015c0

08005494 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	000a      	movs	r2, r1
 800549e:	1cbb      	adds	r3, r7, #2
 80054a0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 80054a2:	1cbb      	adds	r3, r7, #2
 80054a4:	881a      	ldrh	r2, [r3, #0]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4b04      	ldr	r3, [pc, #16]	; (80054bc <vcom_Trace_DMA+0x28>)
 80054aa:	0018      	movs	r0, r3
 80054ac:	f005 fc02 	bl	800acb4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80054b0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80054b2:	0018      	movs	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b002      	add	sp, #8
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	200015c0 	.word	0x200015c0

080054c0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80054c8:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <vcom_ReceiveInit+0x80>)
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80054ce:	2108      	movs	r1, #8
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	2280      	movs	r2, #128	; 0x80
 80054d4:	0392      	lsls	r2, r2, #14
 80054d6:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	481a      	ldr	r0, [pc, #104]	; (8005544 <vcom_ReceiveInit+0x84>)
 80054dc:	6819      	ldr	r1, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	f006 fd40 	bl	800bf64 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	4b17      	ldr	r3, [pc, #92]	; (8005544 <vcom_ReceiveInit+0x84>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	025b      	lsls	r3, r3, #9
 80054f0:	401a      	ands	r2, r3
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	025b      	lsls	r3, r3, #9
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d0f5      	beq.n	80054e6 <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	4b11      	ldr	r3, [pc, #68]	; (8005544 <vcom_ReceiveInit+0x84>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69da      	ldr	r2, [r3, #28]
 8005502:	2380      	movs	r3, #128	; 0x80
 8005504:	03db      	lsls	r3, r3, #15
 8005506:	401a      	ands	r2, r3
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	03db      	lsls	r3, r3, #15
 800550c:	429a      	cmp	r2, r3
 800550e:	d1f5      	bne.n	80054fc <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8005510:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <vcom_ReceiveInit+0x84>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <vcom_ReceiveInit+0x84>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2180      	movs	r1, #128	; 0x80
 800551c:	03c9      	lsls	r1, r1, #15
 800551e:	430a      	orrs	r2, r1
 8005520:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <vcom_ReceiveInit+0x84>)
 8005524:	0018      	movs	r0, r3
 8005526:	f006 fd83 	bl	800c030 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 800552a:	4907      	ldr	r1, [pc, #28]	; (8005548 <vcom_ReceiveInit+0x88>)
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <vcom_ReceiveInit+0x84>)
 800552e:	2201      	movs	r2, #1
 8005530:	0018      	movs	r0, r3
 8005532:	f005 fb67 	bl	800ac04 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8005536:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b004      	add	sp, #16
 800553e:	bd80      	pop	{r7, pc}
 8005540:	200003a4 	.word	0x200003a4
 8005544:	200015c0 	.word	0x200015c0
 8005548:	20001644 	.word	0x20001644

0800554c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <HAL_UART_TxCpltCallback+0x18>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2000      	movs	r0, #0
 800555a:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	46bd      	mov	sp, r7
 8005560:	b002      	add	sp, #8
 8005562:	bd80      	pop	{r7, pc}
 8005564:	200003a0 	.word	0x200003a0

08005568 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <HAL_UART_RxCpltCallback+0x3c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <HAL_UART_RxCpltCallback+0x26>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2280      	movs	r2, #128	; 0x80
 800557c:	589b      	ldr	r3, [r3, r2]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d105      	bne.n	800558e <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <HAL_UART_RxCpltCallback+0x3c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4808      	ldr	r0, [pc, #32]	; (80055a8 <HAL_UART_RxCpltCallback+0x40>)
 8005588:	2200      	movs	r2, #0
 800558a:	2101      	movs	r1, #1
 800558c:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 800558e:	4906      	ldr	r1, [pc, #24]	; (80055a8 <HAL_UART_RxCpltCallback+0x40>)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	0018      	movs	r0, r3
 8005596:	f005 fb35 	bl	800ac04 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	46bd      	mov	sp, r7
 800559e:	b002      	add	sp, #8
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	200003a4 	.word	0x200003a4
 80055a8:	20001644 	.word	0x20001644

080055ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80055ac:	480d      	ldr	r0, [pc, #52]	; (80055e4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80055ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055b0:	480d      	ldr	r0, [pc, #52]	; (80055e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80055b2:	490e      	ldr	r1, [pc, #56]	; (80055ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80055b4:	4a0e      	ldr	r2, [pc, #56]	; (80055f0 <LoopForever+0xe>)
  movs r3, #0
 80055b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055b8:	e002      	b.n	80055c0 <LoopCopyDataInit>

080055ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055be:	3304      	adds	r3, #4

080055c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055c4:	d3f9      	bcc.n	80055ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055c6:	4a0b      	ldr	r2, [pc, #44]	; (80055f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055c8:	4c0b      	ldr	r4, [pc, #44]	; (80055f8 <LoopForever+0x16>)
  movs r3, #0
 80055ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055cc:	e001      	b.n	80055d2 <LoopFillZerobss>

080055ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055d0:	3204      	adds	r2, #4

080055d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055d4:	d3fb      	bcc.n	80055ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80055d6:	f000 febf 	bl	8006358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055da:	f018 fbb5 	bl	801dd48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055de:	f7fe fa6f 	bl	8003ac0 <main>

080055e2 <LoopForever>:

LoopForever:
    b LoopForever
 80055e2:	e7fe      	b.n	80055e2 <LoopForever>
   ldr   r0, =_estack
 80055e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80055e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055ec:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80055f0:	0801f420 	.word	0x0801f420
  ldr r2, =_sbss
 80055f4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80055f8:	20001730 	.word	0x20001730

080055fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055fc:	e7fe      	b.n	80055fc <ADC1_COMP_IRQHandler>
	...

08005600 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8005606:	2300      	movs	r3, #0
 8005608:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800560a:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <BSP_SPI1_Init+0x40>)
 800560c:	4a0d      	ldr	r2, [pc, #52]	; (8005644 <BSP_SPI1_Init+0x44>)
 800560e:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <BSP_SPI1_Init+0x40>)
 8005612:	0018      	movs	r0, r3
 8005614:	f005 f9c1 	bl	800a99a <HAL_SPI_GetState>
 8005618:	1e03      	subs	r3, r0, #0
 800561a:	d10c      	bne.n	8005636 <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 800561c:	4b08      	ldr	r3, [pc, #32]	; (8005640 <BSP_SPI1_Init+0x40>)
 800561e:	0018      	movs	r0, r3
 8005620:	f000 f87e 	bl	8005720 <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <BSP_SPI1_Init+0x40>)
 8005626:	0018      	movs	r0, r3
 8005628:	f000 f830 	bl	800568c <MX_SPI1_Init>
 800562c:	1e03      	subs	r3, r0, #0
 800562e:	d002      	beq.n	8005636 <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8005630:	2308      	movs	r3, #8
 8005632:	425b      	negs	r3, r3
 8005634:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8005636:	687b      	ldr	r3, [r7, #4]
}
 8005638:	0018      	movs	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	b002      	add	sp, #8
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20001468 	.word	0x20001468
 8005644:	40013000 	.word	0x40013000

08005648 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b089      	sub	sp, #36	; 0x24
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	1dbb      	adds	r3, r7, #6
 8005654:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005656:	2306      	movs	r3, #6
 8005658:	425b      	negs	r3, r3
 800565a:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 800565c:	1dbb      	adds	r3, r7, #6
 800565e:	881c      	ldrh	r4, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	4808      	ldr	r0, [pc, #32]	; (8005688 <BSP_SPI1_SendRecv+0x40>)
 8005666:	23fa      	movs	r3, #250	; 0xfa
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	0023      	movs	r3, r4
 800566e:	f004 ffd9 	bl	800a624 <HAL_SPI_TransmitReceive>
 8005672:	1e03      	subs	r3, r0, #0
 8005674:	d102      	bne.n	800567c <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 8005676:	1dbb      	adds	r3, r7, #6
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800567c:	697b      	ldr	r3, [r7, #20]
}
 800567e:	0018      	movs	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	b007      	add	sp, #28
 8005684:	bd90      	pop	{r4, r7, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	20001468 	.word	0x20001468

0800568c <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005694:	240f      	movs	r4, #15
 8005696:	193b      	adds	r3, r7, r4
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <MX_SPI1_Init+0x8c>)
 80056a0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2282      	movs	r2, #130	; 0x82
 80056a6:	0052      	lsls	r2, r2, #1
 80056a8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	0092      	lsls	r2, r2, #2
 80056c8:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 80056ca:	f003 ffb3 	bl	8009634 <HAL_RCC_GetPCLK2Freq>
 80056ce:	0003      	movs	r3, r0
 80056d0:	4a12      	ldr	r2, [pc, #72]	; (800571c <MX_SPI1_Init+0x90>)
 80056d2:	0011      	movs	r1, r2
 80056d4:	0018      	movs	r0, r3
 80056d6:	f000 f867 	bl	80057a8 <SPI_GetPrescaler>
 80056da:	0002      	movs	r2, r0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2207      	movs	r2, #7
 80056f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	0018      	movs	r0, r3
 80056fc:	f004 fef6 	bl	800a4ec <HAL_SPI_Init>
 8005700:	1e03      	subs	r3, r0, #0
 8005702:	d002      	beq.n	800570a <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 8005704:	193b      	adds	r3, r7, r4
 8005706:	2201      	movs	r2, #1
 8005708:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800570a:	230f      	movs	r3, #15
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	781b      	ldrb	r3, [r3, #0]
}
 8005710:	0018      	movs	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	b005      	add	sp, #20
 8005716:	bd90      	pop	{r4, r7, pc}
 8005718:	40013000 	.word	0x40013000
 800571c:	00989680 	.word	0x00989680

08005720 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b089      	sub	sp, #36	; 0x24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 8005728:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <SPI1_MspInit+0x80>)
 800572a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800572c:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <SPI1_MspInit+0x80>)
 800572e:	2180      	movs	r1, #128	; 0x80
 8005730:	0149      	lsls	r1, r1, #5
 8005732:	430a      	orrs	r2, r1
 8005734:	635a      	str	r2, [r3, #52]	; 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005736:	240c      	movs	r4, #12
 8005738:	193b      	adds	r3, r7, r4
 800573a:	2202      	movs	r2, #2
 800573c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573e:	193b      	adds	r3, r7, r4
 8005740:	2200      	movs	r2, #0
 8005742:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005744:	193b      	adds	r3, r7, r4
 8005746:	2203      	movs	r2, #3
 8005748:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800574a:	193b      	adds	r3, r7, r4
 800574c:	2200      	movs	r2, #0
 800574e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8005750:	193b      	adds	r3, r7, r4
 8005752:	2280      	movs	r2, #128	; 0x80
 8005754:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8005756:	193a      	adds	r2, r7, r4
 8005758:	23a0      	movs	r3, #160	; 0xa0
 800575a:	05db      	lsls	r3, r3, #23
 800575c:	0011      	movs	r1, r2
 800575e:	0018      	movs	r0, r3
 8005760:	f002 f810 	bl	8007784 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8005764:	193b      	adds	r3, r7, r4
 8005766:	2200      	movs	r2, #0
 8005768:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800576a:	193b      	adds	r3, r7, r4
 800576c:	2240      	movs	r2, #64	; 0x40
 800576e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8005770:	193a      	adds	r2, r7, r4
 8005772:	23a0      	movs	r3, #160	; 0xa0
 8005774:	05db      	lsls	r3, r3, #23
 8005776:	0011      	movs	r1, r2
 8005778:	0018      	movs	r0, r3
 800577a:	f002 f803 	bl	8007784 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800577e:	193b      	adds	r3, r7, r4
 8005780:	2200      	movs	r2, #0
 8005782:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8005784:	193b      	adds	r3, r7, r4
 8005786:	2208      	movs	r2, #8
 8005788:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800578a:	193b      	adds	r3, r7, r4
 800578c:	4a05      	ldr	r2, [pc, #20]	; (80057a4 <SPI1_MspInit+0x84>)
 800578e:	0019      	movs	r1, r3
 8005790:	0010      	movs	r0, r2
 8005792:	f001 fff7 	bl	8007784 <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	46bd      	mov	sp, r7
 800579a:	b009      	add	sp, #36	; 0x24
 800579c:	bd90      	pop	{r4, r7, pc}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	40021000 	.word	0x40021000
 80057a4:	50000400 	.word	0x50000400

080057a8 <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 80057be:	e00d      	b.n	80057dc <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <SPI_GetPrescaler+0x4c>)
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	0092      	lsls	r2, r2, #2
 80057c6:	58d3      	ldr	r3, [r2, r3]
 80057c8:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	3301      	adds	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2b07      	cmp	r3, #7
 80057d4:	d807      	bhi.n	80057e6 <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d8ed      	bhi.n	80057c0 <SPI_GetPrescaler+0x18>
 80057e4:	e000      	b.n	80057e8 <SPI_GetPrescaler+0x40>
      break;
 80057e6:	46c0      	nop			; (mov r8, r8)
  }

  return presc;
 80057e8:	68fb      	ldr	r3, [r7, #12]
}
 80057ea:	0018      	movs	r0, r3
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b006      	add	sp, #24
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	0801e494 	.word	0x0801e494

080057f8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80057fe:	2300      	movs	r3, #0
 8005800:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8005802:	4b19      	ldr	r3, [pc, #100]	; (8005868 <BSP_I2C1_Init+0x70>)
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <BSP_I2C1_Init+0x74>)
 8005806:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter++ == 0)
 8005808:	4b19      	ldr	r3, [pc, #100]	; (8005870 <BSP_I2C1_Init+0x78>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	1c59      	adds	r1, r3, #1
 800580e:	4a18      	ldr	r2, [pc, #96]	; (8005870 <BSP_I2C1_Init+0x78>)
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d123      	bne.n	800585e <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <BSP_I2C1_Init+0x70>)
 8005818:	0018      	movs	r0, r3
 800581a:	f002 fd69 	bl	80082f0 <HAL_I2C_GetState>
 800581e:	1e03      	subs	r3, r0, #0
 8005820:	d11d      	bne.n	800585e <BSP_I2C1_Init+0x66>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8005822:	4b11      	ldr	r3, [pc, #68]	; (8005868 <BSP_I2C1_Init+0x70>)
 8005824:	0018      	movs	r0, r3
 8005826:	f000 f873 	bl	8005910 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d116      	bne.n	800585e <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if (MX_I2C1_Init(&hi2c1) != HAL_OK)
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <BSP_I2C1_Init+0x70>)
 8005832:	0018      	movs	r0, r3
 8005834:	f000 f81e 	bl	8005874 <MX_I2C1_Init>
 8005838:	1e03      	subs	r3, r0, #0
 800583a:	d003      	beq.n	8005844 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800583c:	2308      	movs	r3, #8
 800583e:	425b      	negs	r3, r3
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	e00c      	b.n	800585e <BSP_I2C1_Init+0x66>
        }
        else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <BSP_I2C1_Init+0x70>)
 8005846:	2100      	movs	r1, #0
 8005848:	0018      	movs	r0, r3
 800584a:	f002 ff9b 	bl	8008784 <HAL_I2CEx_ConfigAnalogFilter>
 800584e:	1e03      	subs	r3, r0, #0
 8005850:	d003      	beq.n	800585a <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005852:	2308      	movs	r3, #8
 8005854:	425b      	negs	r3, r3
 8005856:	607b      	str	r3, [r7, #4]
 8005858:	e001      	b.n	800585e <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800585a:	2300      	movs	r3, #0
 800585c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800585e:	687b      	ldr	r3, [r7, #4]
}
 8005860:	0018      	movs	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	b002      	add	sp, #8
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20001330 	.word	0x20001330
 800586c:	40005400 	.word	0x40005400
 8005870:	200003a8 	.word	0x200003a8

08005874 <MX_I2C1_Init>:
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 8005874:	b590      	push	{r4, r7, lr}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800587c:	240f      	movs	r4, #15
 800587e:	193b      	adds	r3, r7, r4
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
  hi2c->Instance = I2C1;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a20      	ldr	r2, [pc, #128]	; (8005908 <MX_I2C1_Init+0x94>)
 8005888:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1f      	ldr	r2, [pc, #124]	; (800590c <MX_I2C1_Init+0x98>)
 800588e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	0018      	movs	r0, r3
 80058be:	f002 fa17 	bl	8007cf0 <HAL_I2C_Init>
 80058c2:	1e03      	subs	r3, r0, #0
 80058c4:	d002      	beq.n	80058cc <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 80058c6:	193b      	adds	r3, r7, r4
 80058c8:	2201      	movs	r2, #1
 80058ca:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2100      	movs	r1, #0
 80058d0:	0018      	movs	r0, r3
 80058d2:	f002 ff57 	bl	8008784 <HAL_I2CEx_ConfigAnalogFilter>
 80058d6:	1e03      	subs	r3, r0, #0
 80058d8:	d003      	beq.n	80058e2 <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 80058da:	230f      	movs	r3, #15
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	2201      	movs	r2, #1
 80058e0:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2100      	movs	r1, #0
 80058e6:	0018      	movs	r0, r3
 80058e8:	f002 ff98 	bl	800881c <HAL_I2CEx_ConfigDigitalFilter>
 80058ec:	1e03      	subs	r3, r0, #0
 80058ee:	d003      	beq.n	80058f8 <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 80058f0:	230f      	movs	r3, #15
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80058f8:	230f      	movs	r3, #15
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	781b      	ldrb	r3, [r3, #0]
}
 80058fe:	0018      	movs	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	b005      	add	sp, #20
 8005904:	bd90      	pop	{r4, r7, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	40005400 	.word	0x40005400
 800590c:	00707cbb 	.word	0x00707cbb

08005910 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8005910:	b590      	push	{r4, r7, lr}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005918:	4b22      	ldr	r3, [pc, #136]	; (80059a4 <I2C1_MspInit+0x94>)
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	4b21      	ldr	r3, [pc, #132]	; (80059a4 <I2C1_MspInit+0x94>)
 800591e:	2102      	movs	r1, #2
 8005920:	430a      	orrs	r2, r1
 8005922:	62da      	str	r2, [r3, #44]	; 0x2c
 8005924:	4b1f      	ldr	r3, [pc, #124]	; (80059a4 <I2C1_MspInit+0x94>)
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	2202      	movs	r2, #2
 800592a:	4013      	ands	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	68bb      	ldr	r3, [r7, #8]
  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
    */
  GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8005930:	210c      	movs	r1, #12
 8005932:	187b      	adds	r3, r7, r1
 8005934:	2280      	movs	r2, #128	; 0x80
 8005936:	0052      	lsls	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800593a:	000c      	movs	r4, r1
 800593c:	193b      	adds	r3, r7, r4
 800593e:	2212      	movs	r2, #18
 8005940:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005942:	193b      	adds	r3, r7, r4
 8005944:	2201      	movs	r2, #1
 8005946:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005948:	193b      	adds	r3, r7, r4
 800594a:	2203      	movs	r2, #3
 800594c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800594e:	193b      	adds	r3, r7, r4
 8005950:	2204      	movs	r2, #4
 8005952:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005954:	193b      	adds	r3, r7, r4
 8005956:	4a14      	ldr	r2, [pc, #80]	; (80059a8 <I2C1_MspInit+0x98>)
 8005958:	0019      	movs	r1, r3
 800595a:	0010      	movs	r0, r2
 800595c:	f001 ff12 	bl	8007784 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8005960:	0021      	movs	r1, r4
 8005962:	187b      	adds	r3, r7, r1
 8005964:	2280      	movs	r2, #128	; 0x80
 8005966:	0092      	lsls	r2, r2, #2
 8005968:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800596a:	187b      	adds	r3, r7, r1
 800596c:	2212      	movs	r2, #18
 800596e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005970:	187b      	adds	r3, r7, r1
 8005972:	2201      	movs	r2, #1
 8005974:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005976:	187b      	adds	r3, r7, r1
 8005978:	2203      	movs	r2, #3
 800597a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800597c:	187b      	adds	r3, r7, r1
 800597e:	2204      	movs	r2, #4
 8005980:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005982:	187b      	adds	r3, r7, r1
 8005984:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <I2C1_MspInit+0x98>)
 8005986:	0019      	movs	r1, r3
 8005988:	0010      	movs	r0, r2
 800598a:	f001 fefb 	bl	8007784 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <I2C1_MspInit+0x94>)
 8005990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005992:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <I2C1_MspInit+0x94>)
 8005994:	2180      	movs	r1, #128	; 0x80
 8005996:	0389      	lsls	r1, r1, #14
 8005998:	430a      	orrs	r2, r1
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b009      	add	sp, #36	; 0x24
 80059a2:	bd90      	pop	{r4, r7, pc}
 80059a4:	40021000 	.word	0x40021000
 80059a8:	50000400 	.word	0x50000400

080059ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	0002      	movs	r2, r0
 80059b4:	6039      	str	r1, [r7, #0]
 80059b6:	1dfb      	adds	r3, r7, #7
 80059b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80059ba:	1dfb      	adds	r3, r7, #7
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b7f      	cmp	r3, #127	; 0x7f
 80059c0:	d828      	bhi.n	8005a14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059c2:	4a2f      	ldr	r2, [pc, #188]	; (8005a80 <__NVIC_SetPriority+0xd4>)
 80059c4:	1dfb      	adds	r3, r7, #7
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	b25b      	sxtb	r3, r3
 80059ca:	089b      	lsrs	r3, r3, #2
 80059cc:	33c0      	adds	r3, #192	; 0xc0
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	589b      	ldr	r3, [r3, r2]
 80059d2:	1dfa      	adds	r2, r7, #7
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	0011      	movs	r1, r2
 80059d8:	2203      	movs	r2, #3
 80059da:	400a      	ands	r2, r1
 80059dc:	00d2      	lsls	r2, r2, #3
 80059de:	21ff      	movs	r1, #255	; 0xff
 80059e0:	4091      	lsls	r1, r2
 80059e2:	000a      	movs	r2, r1
 80059e4:	43d2      	mvns	r2, r2
 80059e6:	401a      	ands	r2, r3
 80059e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	22ff      	movs	r2, #255	; 0xff
 80059f0:	401a      	ands	r2, r3
 80059f2:	1dfb      	adds	r3, r7, #7
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	0018      	movs	r0, r3
 80059f8:	2303      	movs	r3, #3
 80059fa:	4003      	ands	r3, r0
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a00:	481f      	ldr	r0, [pc, #124]	; (8005a80 <__NVIC_SetPriority+0xd4>)
 8005a02:	1dfb      	adds	r3, r7, #7
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b25b      	sxtb	r3, r3
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	33c0      	adds	r3, #192	; 0xc0
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005a12:	e031      	b.n	8005a78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a14:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <__NVIC_SetPriority+0xd8>)
 8005a16:	1dfb      	adds	r3, r7, #7
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	230f      	movs	r3, #15
 8005a1e:	400b      	ands	r3, r1
 8005a20:	3b08      	subs	r3, #8
 8005a22:	089b      	lsrs	r3, r3, #2
 8005a24:	3306      	adds	r3, #6
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	18d3      	adds	r3, r2, r3
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	1dfa      	adds	r2, r7, #7
 8005a30:	7812      	ldrb	r2, [r2, #0]
 8005a32:	0011      	movs	r1, r2
 8005a34:	2203      	movs	r2, #3
 8005a36:	400a      	ands	r2, r1
 8005a38:	00d2      	lsls	r2, r2, #3
 8005a3a:	21ff      	movs	r1, #255	; 0xff
 8005a3c:	4091      	lsls	r1, r2
 8005a3e:	000a      	movs	r2, r1
 8005a40:	43d2      	mvns	r2, r2
 8005a42:	401a      	ands	r2, r3
 8005a44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	019b      	lsls	r3, r3, #6
 8005a4a:	22ff      	movs	r2, #255	; 0xff
 8005a4c:	401a      	ands	r2, r3
 8005a4e:	1dfb      	adds	r3, r7, #7
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	0018      	movs	r0, r3
 8005a54:	2303      	movs	r3, #3
 8005a56:	4003      	ands	r3, r0
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a5c:	4809      	ldr	r0, [pc, #36]	; (8005a84 <__NVIC_SetPriority+0xd8>)
 8005a5e:	1dfb      	adds	r3, r7, #7
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	001c      	movs	r4, r3
 8005a64:	230f      	movs	r3, #15
 8005a66:	4023      	ands	r3, r4
 8005a68:	3b08      	subs	r3, #8
 8005a6a:	089b      	lsrs	r3, r3, #2
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	3306      	adds	r3, #6
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	18c3      	adds	r3, r0, r3
 8005a74:	3304      	adds	r3, #4
 8005a76:	601a      	str	r2, [r3, #0]
}
 8005a78:	46c0      	nop			; (mov r8, r8)
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b003      	add	sp, #12
 8005a7e:	bd90      	pop	{r4, r7, pc}
 8005a80:	e000e100 	.word	0xe000e100
 8005a84:	e000ed00 	.word	0xe000ed00

08005a88 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08c      	sub	sp, #48	; 0x30
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	0002      	movs	r2, r0
 8005a90:	1dfb      	adds	r3, r7, #7
 8005a92:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005a94:	1dfb      	adds	r3, r7, #7
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d02f      	beq.n	8005afc <BSP_LED_Init+0x74>
 8005a9c:	dc3a      	bgt.n	8005b14 <BSP_LED_Init+0x8c>
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d01f      	beq.n	8005ae2 <BSP_LED_Init+0x5a>
 8005aa2:	dc37      	bgt.n	8005b14 <BSP_LED_Init+0x8c>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <BSP_LED_Init+0x26>
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d00d      	beq.n	8005ac8 <BSP_LED_Init+0x40>
 8005aac:	e032      	b.n	8005b14 <BSP_LED_Init+0x8c>
 8005aae:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab2:	4b29      	ldr	r3, [pc, #164]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005ab4:	2102      	movs	r1, #2
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005aba:	4b27      	ldr	r3, [pc, #156]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	2202      	movs	r2, #2
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	e025      	b.n	8005b14 <BSP_LED_Init+0x8c>
 8005ac8:	4b23      	ldr	r3, [pc, #140]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	4b22      	ldr	r3, [pc, #136]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005ace:	2101      	movs	r1, #1
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ad4:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	2201      	movs	r2, #1
 8005ada:	4013      	ands	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	e018      	b.n	8005b14 <BSP_LED_Init+0x8c>
 8005ae2:	4b1d      	ldr	r3, [pc, #116]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005ae8:	2102      	movs	r1, #2
 8005aea:	430a      	orrs	r2, r1
 8005aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8005aee:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	2202      	movs	r2, #2
 8005af4:	4013      	ands	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	e00b      	b.n	8005b14 <BSP_LED_Init+0x8c>
 8005afc:	4b16      	ldr	r3, [pc, #88]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b00:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005b02:	2102      	movs	r1, #2
 8005b04:	430a      	orrs	r2, r1
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b08:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <BSP_LED_Init+0xd0>)
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	4013      	ands	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005b16:	1dfb      	adds	r3, r7, #7
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <BSP_LED_Init+0xd4>)
 8005b1c:	0052      	lsls	r2, r2, #1
 8005b1e:	5ad3      	ldrh	r3, [r2, r3]
 8005b20:	001a      	movs	r2, r3
 8005b22:	211c      	movs	r1, #28
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b28:	187b      	adds	r3, r7, r1
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2e:	187b      	adds	r3, r7, r1
 8005b30:	2200      	movs	r2, #0
 8005b32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	2203      	movs	r2, #3
 8005b38:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005b3a:	1dfb      	adds	r3, r7, #7
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <BSP_LED_Init+0xd8>)
 8005b40:	0092      	lsls	r2, r2, #2
 8005b42:	58d3      	ldr	r3, [r2, r3]
 8005b44:	187a      	adds	r2, r7, r1
 8005b46:	0011      	movs	r1, r2
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f001 fe1b 	bl	8007784 <HAL_GPIO_Init>
}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b00c      	add	sp, #48	; 0x30
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	0801e4b4 	.word	0x0801e4b4
 8005b60:	2000004c 	.word	0x2000004c

08005b64 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	0002      	movs	r2, r0
 8005b6c:	1dfb      	adds	r3, r7, #7
 8005b6e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8005b70:	1dfb      	adds	r3, r7, #7
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <BSP_LED_On+0x30>)
 8005b76:	0092      	lsls	r2, r2, #2
 8005b78:	58d0      	ldr	r0, [r2, r3]
 8005b7a:	1dfb      	adds	r3, r7, #7
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <BSP_LED_On+0x34>)
 8005b80:	0052      	lsls	r2, r2, #1
 8005b82:	5ad3      	ldrh	r3, [r2, r3]
 8005b84:	2201      	movs	r2, #1
 8005b86:	0019      	movs	r1, r3
 8005b88:	f002 f879 	bl	8007c7e <HAL_GPIO_WritePin>
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	2000004c 	.word	0x2000004c
 8005b98:	0801e4b4 	.word	0x0801e4b4

08005b9c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	0002      	movs	r2, r0
 8005ba4:	1dfb      	adds	r3, r7, #7
 8005ba6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005ba8:	1dfb      	adds	r3, r7, #7
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <BSP_LED_Off+0x30>)
 8005bae:	0092      	lsls	r2, r2, #2
 8005bb0:	58d0      	ldr	r0, [r2, r3]
 8005bb2:	1dfb      	adds	r3, r7, #7
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <BSP_LED_Off+0x34>)
 8005bb8:	0052      	lsls	r2, r2, #1
 8005bba:	5ad3      	ldrh	r3, [r2, r3]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	f002 f85d 	bl	8007c7e <HAL_GPIO_WritePin>
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	2000004c 	.word	0x2000004c
 8005bd0:	0801e4b4 	.word	0x0801e4b4

08005bd4 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	0002      	movs	r2, r0
 8005bdc:	1dfb      	adds	r3, r7, #7
 8005bde:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005be0:	1dfb      	adds	r3, r7, #7
 8005be2:	781a      	ldrb	r2, [r3, #0]
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <BSP_LED_Toggle+0x30>)
 8005be6:	0092      	lsls	r2, r2, #2
 8005be8:	58d0      	ldr	r0, [r2, r3]
 8005bea:	1dfb      	adds	r3, r7, #7
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <BSP_LED_Toggle+0x34>)
 8005bf0:	0052      	lsls	r2, r2, #1
 8005bf2:	5ad3      	ldrh	r3, [r2, r3]
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	f002 f85f 	bl	8007cb8 <HAL_GPIO_TogglePin>
}
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	b002      	add	sp, #8
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	2000004c 	.word	0x2000004c
 8005c08:	0801e4b4 	.word	0x0801e4b4

08005c0c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	0002      	movs	r2, r0
 8005c14:	1dfb      	adds	r3, r7, #7
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	1dbb      	adds	r3, r7, #6
 8005c1a:	1c0a      	adds	r2, r1, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005c1e:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <BSP_PB_Init+0xc0>)
 8005c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c22:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <BSP_PB_Init+0xc0>)
 8005c24:	2102      	movs	r1, #2
 8005c26:	430a      	orrs	r2, r1
 8005c28:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c2a:	4b28      	ldr	r3, [pc, #160]	; (8005ccc <BSP_PB_Init+0xc0>)
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	2202      	movs	r2, #2
 8005c30:	4013      	ands	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c36:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <BSP_PB_Init+0xc0>)
 8005c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <BSP_PB_Init+0xc0>)
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	635a      	str	r2, [r3, #52]	; 0x34

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005c42:	1dbb      	adds	r3, r7, #6
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d117      	bne.n	8005c7a <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005c4a:	2304      	movs	r3, #4
 8005c4c:	001a      	movs	r2, r3
 8005c4e:	210c      	movs	r1, #12
 8005c50:	187b      	adds	r3, r7, r1
 8005c52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c54:	187b      	adds	r3, r7, r1
 8005c56:	2200      	movs	r2, #0
 8005c58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005c5a:	187b      	adds	r3, r7, r1
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c60:	187b      	adds	r3, r7, r1
 8005c62:	2203      	movs	r2, #3
 8005c64:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005c66:	1dfb      	adds	r3, r7, #7
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <BSP_PB_Init+0xc4>)
 8005c6c:	0092      	lsls	r2, r2, #2
 8005c6e:	58d3      	ldr	r3, [r2, r3]
 8005c70:	187a      	adds	r2, r7, r1
 8005c72:	0011      	movs	r1, r2
 8005c74:	0018      	movs	r0, r3
 8005c76:	f001 fd85 	bl	8007784 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8005c7a:	1dbb      	adds	r3, r7, #6
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d11f      	bne.n	8005cc2 <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005c82:	2304      	movs	r3, #4
 8005c84:	001a      	movs	r2, r3
 8005c86:	210c      	movs	r1, #12
 8005c88:	187b      	adds	r3, r7, r1
 8005c8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8c:	187b      	adds	r3, r7, r1
 8005c8e:	2200      	movs	r2, #0
 8005c90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005c92:	187b      	adds	r3, r7, r1
 8005c94:	4a0f      	ldr	r2, [pc, #60]	; (8005cd4 <BSP_PB_Init+0xc8>)
 8005c96:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005c98:	1dfb      	adds	r3, r7, #7
 8005c9a:	781a      	ldrb	r2, [r3, #0]
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <BSP_PB_Init+0xc4>)
 8005c9e:	0092      	lsls	r2, r2, #2
 8005ca0:	58d3      	ldr	r3, [r2, r3]
 8005ca2:	187a      	adds	r2, r7, r1
 8005ca4:	0011      	movs	r1, r2
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f001 fd6c 	bl	8007784 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 8005cac:	2306      	movs	r3, #6
 8005cae:	b25b      	sxtb	r3, r3
 8005cb0:	2103      	movs	r1, #3
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f7ff fe7a 	bl	80059ac <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005cb8:	2306      	movs	r3, #6
 8005cba:	b25b      	sxtb	r3, r3
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f001 fa4a 	bl	8007156 <HAL_NVIC_EnableIRQ>
  }
}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b008      	add	sp, #32
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	2000005c 	.word	0x2000005c
 8005cd4:	10110000 	.word	0x10110000

08005cd8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005cdc:	2305      	movs	r3, #5
}
 8005cde:	0018      	movs	r0, r3
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	0002      	movs	r2, r0
 8005cec:	1dfb      	adds	r3, r7, #7
 8005cee:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 8005cf0:	1dfb      	adds	r3, r7, #7
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d10b      	bne.n	8005d10 <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	0159      	lsls	r1, r3, #5
 8005cfc:	23a0      	movs	r3, #160	; 0xa0
 8005cfe:	05db      	lsls	r3, r3, #23
 8005d00:	2201      	movs	r2, #1
 8005d02:	0018      	movs	r0, r3
 8005d04:	f001 ffbb 	bl	8007c7e <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8005d08:	2005      	movs	r0, #5
 8005d0a:	f7ff f9bc 	bl	8005086 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8005d0e:	e007      	b.n	8005d20 <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8005d10:	2380      	movs	r3, #128	; 0x80
 8005d12:	0159      	lsls	r1, r3, #5
 8005d14:	23a0      	movs	r3, #160	; 0xa0
 8005d16:	05db      	lsls	r3, r3, #23
 8005d18:	2200      	movs	r2, #0
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f001 ffaf 	bl	8007c7e <HAL_GPIO_WritePin>
}
 8005d20:	46c0      	nop			; (mov r8, r8)
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b002      	add	sp, #8
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b0a7      	sub	sp, #156	; 0x9c
 8005d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005d2e:	2480      	movs	r4, #128	; 0x80
 8005d30:	193b      	adds	r3, r7, r4
 8005d32:	0018      	movs	r0, r3
 8005d34:	2314      	movs	r3, #20
 8005d36:	001a      	movs	r2, r3
 8005d38:	2100      	movs	r1, #0
 8005d3a:	f018 f832 	bl	801dda2 <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8005d3e:	4b78      	ldr	r3, [pc, #480]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d42:	4b77      	ldr	r3, [pc, #476]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d44:	2102      	movs	r1, #2
 8005d46:	430a      	orrs	r2, r1
 8005d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d4a:	4b75      	ldr	r3, [pc, #468]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	2202      	movs	r2, #2
 8005d50:	4013      	ands	r3, r2
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8005d56:	4b72      	ldr	r3, [pc, #456]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5a:	4b71      	ldr	r3, [pc, #452]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d5c:	2102      	movs	r1, #2
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d62:	4b6f      	ldr	r3, [pc, #444]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	2202      	movs	r2, #2
 8005d68:	4013      	ands	r3, r2
 8005d6a:	623b      	str	r3, [r7, #32]
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8005d6e:	4b6c      	ldr	r3, [pc, #432]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	4b6b      	ldr	r3, [pc, #428]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d74:	2102      	movs	r1, #2
 8005d76:	430a      	orrs	r2, r1
 8005d78:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d7a:	4b69      	ldr	r3, [pc, #420]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	2202      	movs	r2, #2
 8005d80:	4013      	ands	r3, r2
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8005d86:	4b66      	ldr	r3, [pc, #408]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8a:	4b65      	ldr	r3, [pc, #404]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d8c:	2104      	movs	r1, #4
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d92:	4b63      	ldr	r3, [pc, #396]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	2204      	movs	r2, #4
 8005d98:	4013      	ands	r3, r2
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 8005d9e:	193b      	adds	r3, r7, r4
 8005da0:	2202      	movs	r2, #2
 8005da2:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005da4:	193b      	adds	r3, r7, r4
 8005da6:	2203      	movs	r2, #3
 8005da8:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	2294      	movs	r2, #148	; 0x94
 8005dae:	18ba      	adds	r2, r7, r2
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e020      	b.n	8005df6 <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005db4:	4b5b      	ldr	r3, [pc, #364]	; (8005f24 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 8005db6:	2194      	movs	r1, #148	; 0x94
 8005db8:	187a      	adds	r2, r7, r1
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	0092      	lsls	r2, r2, #2
 8005dbe:	58d2      	ldr	r2, [r2, r3]
 8005dc0:	2080      	movs	r0, #128	; 0x80
 8005dc2:	183b      	adds	r3, r7, r0
 8005dc4:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005dc6:	4b58      	ldr	r3, [pc, #352]	; (8005f28 <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 8005dc8:	187a      	adds	r2, r7, r1
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	0052      	lsls	r2, r2, #1
 8005dce:	5ad3      	ldrh	r3, [r2, r3]
 8005dd0:	001a      	movs	r2, r3
 8005dd2:	183b      	adds	r3, r7, r0
 8005dd4:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005dd6:	4b55      	ldr	r3, [pc, #340]	; (8005f2c <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 8005dd8:	000c      	movs	r4, r1
 8005dda:	187a      	adds	r2, r7, r1
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	0092      	lsls	r2, r2, #2
 8005de0:	58d3      	ldr	r3, [r2, r3]
 8005de2:	183a      	adds	r2, r7, r0
 8005de4:	0011      	movs	r1, r2
 8005de6:	0018      	movs	r0, r3
 8005de8:	f001 fccc 	bl	8007784 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005dec:	193b      	adds	r3, r7, r4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	193a      	adds	r2, r7, r4
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	2394      	movs	r3, #148	; 0x94
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d9d9      	bls.n	8005db4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 8005e00:	2328      	movs	r3, #40	; 0x28
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	0018      	movs	r0, r3
 8005e06:	f000 fa07 	bl	8006218 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 8005e0a:	2480      	movs	r4, #128	; 0x80
 8005e0c:	193b      	adds	r3, r7, r4
 8005e0e:	2280      	movs	r2, #128	; 0x80
 8005e10:	0212      	lsls	r2, r2, #8
 8005e12:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e14:	193b      	adds	r3, r7, r4
 8005e16:	2201      	movs	r2, #1
 8005e18:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 8005e1a:	193b      	adds	r3, r7, r4
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 8005e20:	4b3f      	ldr	r3, [pc, #252]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	4b3e      	ldr	r3, [pc, #248]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e26:	2101      	movs	r1, #1
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e2c:	4b3c      	ldr	r3, [pc, #240]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	2201      	movs	r2, #1
 8005e32:	4013      	ands	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8005e38:	193a      	adds	r2, r7, r4
 8005e3a:	23a0      	movs	r3, #160	; 0xa0
 8005e3c:	05db      	lsls	r3, r3, #23
 8005e3e:	0011      	movs	r1, r2
 8005e40:	0018      	movs	r0, r3
 8005e42:	f001 fc9f 	bl	8007784 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	0219      	lsls	r1, r3, #8
 8005e4a:	23a0      	movs	r3, #160	; 0xa0
 8005e4c:	05db      	lsls	r3, r3, #23
 8005e4e:	2201      	movs	r2, #1
 8005e50:	0018      	movs	r0, r3
 8005e52:	f001 ff14 	bl	8007c7e <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 8005e56:	4b32      	ldr	r3, [pc, #200]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5a:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e62:	4b2f      	ldr	r3, [pc, #188]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	2201      	movs	r2, #1
 8005e68:	4013      	ands	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8005e6e:	4b2c      	ldr	r3, [pc, #176]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e72:	4b2b      	ldr	r3, [pc, #172]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e74:	2101      	movs	r1, #1
 8005e76:	430a      	orrs	r2, r1
 8005e78:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e7a:	4b29      	ldr	r3, [pc, #164]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	2201      	movs	r2, #1
 8005e80:	4013      	ands	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8005e86:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8a:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e8c:	2104      	movs	r1, #4
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e92:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	2204      	movs	r2, #4
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8005e9e:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea2:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ea4:	2104      	movs	r1, #4
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005eaa:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	2204      	movs	r2, #4
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	607b      	str	r3, [r7, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005eb6:	193b      	adds	r3, r7, r4
 8005eb8:	2201      	movs	r2, #1
 8005eba:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005ebc:	193b      	adds	r3, r7, r4
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005ec2:	193b      	adds	r3, r7, r4
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8005ec8:	193b      	adds	r3, r7, r4
 8005eca:	2280      	movs	r2, #128	; 0x80
 8005ecc:	0152      	lsls	r2, r2, #5
 8005ece:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8005ed0:	193a      	adds	r2, r7, r4
 8005ed2:	23a0      	movs	r3, #160	; 0xa0
 8005ed4:	05db      	lsls	r3, r3, #23
 8005ed6:	0011      	movs	r1, r2
 8005ed8:	0018      	movs	r0, r3
 8005eda:	f001 fc53 	bl	8007784 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8005ede:	193b      	adds	r3, r7, r4
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8005ee4:	193a      	adds	r2, r7, r4
 8005ee6:	23a0      	movs	r3, #160	; 0xa0
 8005ee8:	05db      	lsls	r3, r3, #23
 8005eea:	0011      	movs	r1, r2
 8005eec:	0018      	movs	r0, r3
 8005eee:	f001 fc49 	bl	8007784 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8005ef2:	193b      	adds	r3, r7, r4
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8005ef8:	193b      	adds	r3, r7, r4
 8005efa:	4a0d      	ldr	r2, [pc, #52]	; (8005f30 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005efc:	0019      	movs	r1, r3
 8005efe:	0010      	movs	r0, r2
 8005f00:	f001 fc40 	bl	8007784 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8005f04:	193b      	adds	r3, r7, r4
 8005f06:	2204      	movs	r2, #4
 8005f08:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8005f0a:	193b      	adds	r3, r7, r4
 8005f0c:	4a08      	ldr	r2, [pc, #32]	; (8005f30 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005f0e:	0019      	movs	r1, r3
 8005f10:	0010      	movs	r0, r2
 8005f12:	f001 fc37 	bl	8007784 <HAL_GPIO_Init>
}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b027      	add	sp, #156	; 0x9c
 8005f1c:	bd90      	pop	{r4, r7, pc}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	40021000 	.word	0x40021000
 8005f24:	0801e4f0 	.word	0x0801e4f0
 8005f28:	0801e4e8 	.word	0x0801e4e8
 8005f2c:	20000060 	.word	0x20000060
 8005f30:	50000800 	.word	0x50000800

08005f34 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005f3a:	003b      	movs	r3, r7
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	2314      	movs	r3, #20
 8005f40:	001a      	movs	r2, r3
 8005f42:	2100      	movs	r1, #0
 8005f44:	f017 ff2d 	bl	801dda2 <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 8005f48:	003b      	movs	r3, r7
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e018      	b.n	8005f86 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005f54:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	0092      	lsls	r2, r2, #2
 8005f5a:	58d2      	ldr	r2, [r2, r3]
 8005f5c:	003b      	movs	r3, r7
 8005f5e:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005f60:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	0052      	lsls	r2, r2, #1
 8005f66:	5ad3      	ldrh	r3, [r2, r3]
 8005f68:	001a      	movs	r2, r3
 8005f6a:	003b      	movs	r3, r7
 8005f6c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	0092      	lsls	r2, r2, #2
 8005f74:	58d3      	ldr	r3, [r2, r3]
 8005f76:	003a      	movs	r2, r7
 8005f78:	0011      	movs	r1, r2
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f001 fc02 	bl	8007784 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3301      	adds	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d9e3      	bls.n	8005f54 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 8005f8c:	f000 f9a4 	bl	80062d8 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b006      	add	sp, #24
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	0801e4f0 	.word	0x0801e4f0
 8005f9c:	0801e4e8 	.word	0x0801e4e8
 8005fa0:	20000060 	.word	0x20000060

08005fa4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fac:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 8005fb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fb6:	b672      	cpsid	i
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	e02f      	b.n	8006020 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	00da      	lsls	r2, r3, #3
 8005fc4:	4b1d      	ldr	r3, [pc, #116]	; (800603c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005fc6:	18d0      	adds	r0, r2, r3
 8005fc8:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	0092      	lsls	r2, r2, #2
 8005fce:	58d3      	ldr	r3, [r2, r3]
 8005fd0:	0019      	movs	r1, r3
 8005fd2:	f001 fba1 	bl	8007718 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	00da      	lsls	r2, r3, #3
 8005fda:	4b18      	ldr	r3, [pc, #96]	; (800603c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005fdc:	18d0      	adds	r0, r2, r3
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	18d3      	adds	r3, r2, r3
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	001a      	movs	r2, r3
 8005fea:	2100      	movs	r1, #0
 8005fec:	f001 fb73 	bl	80076d6 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8005ff0:	4a14      	ldr	r2, [pc, #80]	; (8006044 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	18d3      	adds	r3, r2, r3
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	5618      	ldrsb	r0, [r3, r0]
 8005ffa:	4b13      	ldr	r3, [pc, #76]	; (8006048 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	0092      	lsls	r2, r2, #2
 8006000:	58d3      	ldr	r3, [r2, r3]
 8006002:	2200      	movs	r2, #0
 8006004:	0019      	movs	r1, r3
 8006006:	f001 f891 	bl	800712c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 800600a:	4a0e      	ldr	r2, [pc, #56]	; (8006044 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	18d3      	adds	r3, r2, r3
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b25b      	sxtb	r3, r3
 8006014:	0018      	movs	r0, r3
 8006016:	f001 f89e 	bl	8007156 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	3301      	adds	r3, #1
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b03      	cmp	r3, #3
 8006024:	d9cc      	bls.n	8005fc0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f383 8810 	msr	PRIMASK, r3
}
 8006030:	46c0      	nop			; (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	46bd      	mov	sp, r7
 8006036:	b006      	add	sp, #24
 8006038:	bd80      	pop	{r7, pc}
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	20001648 	.word	0x20001648
 8006040:	0801e4c4 	.word	0x0801e4c4
 8006044:	0801e4e4 	.word	0x0801e4e4
 8006048:	0801e4d4 	.word	0x0801e4d4

0800604c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 8006054:	2300      	movs	r3, #0
}
 8006056:	0018      	movs	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	b002      	add	sp, #8
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	0002      	movs	r2, r0
 8006068:	1dfb      	adds	r3, r7, #7
 800606a:	701a      	strb	r2, [r3, #0]

  switch (state)
 800606c:	1dfb      	adds	r3, r7, #7
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b04      	cmp	r3, #4
 8006072:	d82e      	bhi.n	80060d2 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 8006074:	009a      	lsls	r2, r3, #2
 8006076:	4b23      	ldr	r3, [pc, #140]	; (8006104 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 8006078:	18d3      	adds	r3, r2, r3
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 800607e:	23a0      	movs	r3, #160	; 0xa0
 8006080:	05db      	lsls	r3, r3, #23
 8006082:	2201      	movs	r2, #1
 8006084:	2102      	movs	r1, #2
 8006086:	0018      	movs	r0, r3
 8006088:	f001 fdf9 	bl	8007c7e <HAL_GPIO_WritePin>
      break;
 800608c:	e036      	b.n	80060fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 800608e:	4b1e      	ldr	r3, [pc, #120]	; (8006108 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8006090:	2201      	movs	r2, #1
 8006092:	2104      	movs	r1, #4
 8006094:	0018      	movs	r0, r3
 8006096:	f001 fdf2 	bl	8007c7e <HAL_GPIO_WritePin>
      break;
 800609a:	e02f      	b.n	80060fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 800609c:	4b1a      	ldr	r3, [pc, #104]	; (8006108 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 800609e:	2201      	movs	r2, #1
 80060a0:	2102      	movs	r1, #2
 80060a2:	0018      	movs	r0, r3
 80060a4:	f001 fdeb 	bl	8007c7e <HAL_GPIO_WritePin>
      break;
 80060a8:	e028      	b.n	80060fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80060aa:	23a0      	movs	r3, #160	; 0xa0
 80060ac:	05db      	lsls	r3, r3, #23
 80060ae:	2200      	movs	r2, #0
 80060b0:	2102      	movs	r1, #2
 80060b2:	0018      	movs	r0, r3
 80060b4:	f001 fde3 	bl	8007c7e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80060b8:	4b13      	ldr	r3, [pc, #76]	; (8006108 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	2104      	movs	r1, #4
 80060be:	0018      	movs	r0, r3
 80060c0:	f001 fddd 	bl	8007c7e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80060c4:	4b10      	ldr	r3, [pc, #64]	; (8006108 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	2102      	movs	r1, #2
 80060ca:	0018      	movs	r0, r3
 80060cc:	f001 fdd7 	bl	8007c7e <HAL_GPIO_WritePin>
      break;
 80060d0:	e014      	b.n	80060fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80060d2:	23a0      	movs	r3, #160	; 0xa0
 80060d4:	05db      	lsls	r3, r3, #23
 80060d6:	2200      	movs	r2, #0
 80060d8:	2102      	movs	r1, #2
 80060da:	0018      	movs	r0, r3
 80060dc:	f001 fdcf 	bl	8007c7e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80060e0:	4b09      	ldr	r3, [pc, #36]	; (8006108 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	2104      	movs	r1, #4
 80060e6:	0018      	movs	r0, r3
 80060e8:	f001 fdc9 	bl	8007c7e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	2102      	movs	r1, #2
 80060f2:	0018      	movs	r0, r3
 80060f4:	f001 fdc3 	bl	8007c7e <HAL_GPIO_WritePin>

      break;
 80060f8:	e000      	b.n	80060fc <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 80060fa:	46c0      	nop			; (mov r8, r8)
  }
}
 80060fc:	46c0      	nop			; (mov r8, r8)
 80060fe:	46bd      	mov	sp, r7
 8006100:	b002      	add	sp, #8
 8006102:	bd80      	pop	{r7, pc}
 8006104:	0801e500 	.word	0x0801e500
 8006108:	50000800 	.word	0x50000800

0800610c <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 8006114:	2301      	movs	r3, #1
}
 8006116:	0018      	movs	r0, r3
 8006118:	46bd      	mov	sp, r7
 800611a:	b002      	add	sp, #8
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 8006126:	1d3b      	adds	r3, r7, #4
 8006128:	0018      	movs	r0, r3
 800612a:	2314      	movs	r3, #20
 800612c:	001a      	movs	r2, r3
 800612e:	2100      	movs	r1, #0
 8006130:	f017 fe37 	bl	801dda2 <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006134:	1d3b      	adds	r3, r7, #4
 8006136:	2201      	movs	r2, #1
 8006138:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 800613a:	1d3b      	adds	r3, r7, #4
 800613c:	2200      	movs	r2, #0
 800613e:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006140:	1d3b      	adds	r3, r7, #4
 8006142:	2203      	movs	r2, #3
 8006144:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 8006146:	1d3b      	adds	r3, r7, #4
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	4a0f      	ldr	r2, [pc, #60]	; (800618c <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8006150:	0019      	movs	r1, r3
 8006152:	0010      	movs	r0, r2
 8006154:	f001 fb16 	bl	8007784 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8006158:	4b0c      	ldr	r3, [pc, #48]	; (800618c <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 800615a:	2200      	movs	r2, #0
 800615c:	2101      	movs	r1, #1
 800615e:	0018      	movs	r0, r3
 8006160:	f001 fd8d 	bl	8007c7e <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 8006164:	2001      	movs	r0, #1
 8006166:	f7fe ff8e 	bl	8005086 <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 800616a:	1d3b      	adds	r3, r7, #4
 800616c:	2200      	movs	r2, #0
 800616e:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8006170:	1d3b      	adds	r3, r7, #4
 8006172:	4a06      	ldr	r2, [pc, #24]	; (800618c <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8006174:	0019      	movs	r1, r3
 8006176:	0010      	movs	r0, r2
 8006178:	f001 fb04 	bl	8007784 <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 800617c:	2006      	movs	r0, #6
 800617e:	f7fe ff82 	bl	8005086 <HAL_Delay>
}
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	46bd      	mov	sp, r7
 8006186:	b006      	add	sp, #24
 8006188:	bd80      	pop	{r7, pc}
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	50000800 	.word	0x50000800

08006190 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 8006194:	f7ff fa34 	bl	8005600 <BSP_SPI1_Init>
}
 8006198:	46c0      	nop			; (mov r8, r8)
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 800619e:	b590      	push	{r4, r7, lr}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	0002      	movs	r2, r0
 80061a6:	1dbb      	adds	r3, r7, #6
 80061a8:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80061aa:	240e      	movs	r4, #14
 80061ac:	1939      	adds	r1, r7, r4
 80061ae:	1dbb      	adds	r3, r7, #6
 80061b0:	2201      	movs	r2, #1
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7ff fa48 	bl	8005648 <BSP_SPI1_SendRecv>

  return rxData;
 80061b8:	193b      	adds	r3, r7, r4
 80061ba:	881b      	ldrh	r3, [r3, #0]
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b005      	add	sp, #20
 80061c2:	bd90      	pop	{r4, r7, pc}

080061c4 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  if (state == 0)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d108      	bne.n	80061e4 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	0219      	lsls	r1, r3, #8
 80061d6:	23a0      	movs	r3, #160	; 0xa0
 80061d8:	05db      	lsls	r3, r3, #23
 80061da:	2200      	movs	r2, #0
 80061dc:	0018      	movs	r0, r3
 80061de:	f001 fd4e 	bl	8007c7e <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 80061e2:	e007      	b.n	80061f4 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	0219      	lsls	r1, r3, #8
 80061e8:	23a0      	movs	r3, #160	; 0xa0
 80061ea:	05db      	lsls	r3, r3, #23
 80061ec:	2201      	movs	r2, #1
 80061ee:	0018      	movs	r0, r3
 80061f0:	f001 fd45 	bl	8007c7e <HAL_GPIO_WritePin>
}
 80061f4:	46c0      	nop			; (mov r8, r8)
 80061f6:	46bd      	mov	sp, r7
 80061f8:	b002      	add	sp, #8
 80061fa:	bd80      	pop	{r7, pc}

080061fc <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8006200:	4b04      	ldr	r3, [pc, #16]	; (8006214 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 8006202:	2102      	movs	r1, #2
 8006204:	0018      	movs	r0, r3
 8006206:	f001 fd1d 	bl	8007c44 <HAL_GPIO_ReadPin>
 800620a:	0003      	movs	r3, r0
}
 800620c:	0018      	movs	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	50000400 	.word	0x50000400

08006218 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b08b      	sub	sp, #44	; 0x2c
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8006220:	4b2b      	ldr	r3, [pc, #172]	; (80062d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006224:	4b2a      	ldr	r3, [pc, #168]	; (80062d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006226:	2102      	movs	r1, #2
 8006228:	430a      	orrs	r2, r1
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c
 800622c:	4b28      	ldr	r3, [pc, #160]	; (80062d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	2202      	movs	r2, #2
 8006232:	4013      	ands	r3, r2
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8006238:	4b25      	ldr	r3, [pc, #148]	; (80062d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	4b24      	ldr	r3, [pc, #144]	; (80062d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800623e:	2101      	movs	r1, #1
 8006240:	430a      	orrs	r2, r1
 8006242:	62da      	str	r2, [r3, #44]	; 0x2c
 8006244:	4b22      	ldr	r3, [pc, #136]	; (80062d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	2201      	movs	r2, #1
 800624a:	4013      	ands	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8006250:	4b1f      	ldr	r3, [pc, #124]	; (80062d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	4b1e      	ldr	r3, [pc, #120]	; (80062d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006256:	2101      	movs	r1, #1
 8006258:	430a      	orrs	r2, r1
 800625a:	62da      	str	r2, [r3, #44]	; 0x2c
 800625c:	4b1c      	ldr	r3, [pc, #112]	; (80062d0 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	2201      	movs	r2, #1
 8006262:	4013      	ands	r3, r2
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006268:	2414      	movs	r4, #20
 800626a:	193b      	adds	r3, r7, r4
 800626c:	2202      	movs	r2, #2
 800626e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006270:	193b      	adds	r3, r7, r4
 8006272:	2202      	movs	r2, #2
 8006274:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006276:	193b      	adds	r3, r7, r4
 8006278:	2203      	movs	r2, #3
 800627a:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 800627c:	193b      	adds	r3, r7, r4
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8006282:	193b      	adds	r3, r7, r4
 8006284:	2280      	movs	r2, #128	; 0x80
 8006286:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006288:	193a      	adds	r2, r7, r4
 800628a:	23a0      	movs	r3, #160	; 0xa0
 800628c:	05db      	lsls	r3, r3, #23
 800628e:	0011      	movs	r1, r2
 8006290:	0018      	movs	r0, r3
 8006292:	f001 fa77 	bl	8007784 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8006296:	193b      	adds	r3, r7, r4
 8006298:	2200      	movs	r2, #0
 800629a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800629c:	193b      	adds	r3, r7, r4
 800629e:	2240      	movs	r2, #64	; 0x40
 80062a0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80062a2:	193a      	adds	r2, r7, r4
 80062a4:	23a0      	movs	r3, #160	; 0xa0
 80062a6:	05db      	lsls	r3, r3, #23
 80062a8:	0011      	movs	r1, r2
 80062aa:	0018      	movs	r0, r3
 80062ac:	f001 fa6a 	bl	8007784 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80062b0:	193b      	adds	r3, r7, r4
 80062b2:	2200      	movs	r2, #0
 80062b4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80062b6:	193b      	adds	r3, r7, r4
 80062b8:	2208      	movs	r2, #8
 80062ba:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80062bc:	193b      	adds	r3, r7, r4
 80062be:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 80062c0:	0019      	movs	r1, r3
 80062c2:	0010      	movs	r0, r2
 80062c4:	f001 fa5e 	bl	8007784 <HAL_GPIO_Init>
}
 80062c8:	46c0      	nop			; (mov r8, r8)
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b00b      	add	sp, #44	; 0x2c
 80062ce:	bd90      	pop	{r4, r7, pc}
 80062d0:	40021000 	.word	0x40021000
 80062d4:	50000400 	.word	0x50000400

080062d8 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062de:	1d3b      	adds	r3, r7, #4
 80062e0:	2201      	movs	r2, #1
 80062e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80062e4:	1d3b      	adds	r3, r7, #4
 80062e6:	2202      	movs	r2, #2
 80062e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80062ea:	1d3b      	adds	r3, r7, #4
 80062ec:	2280      	movs	r2, #128	; 0x80
 80062ee:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80062f0:	1d3a      	adds	r2, r7, #4
 80062f2:	23a0      	movs	r3, #160	; 0xa0
 80062f4:	05db      	lsls	r3, r3, #23
 80062f6:	0011      	movs	r1, r2
 80062f8:	0018      	movs	r0, r3
 80062fa:	f001 fa43 	bl	8007784 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80062fe:	1d3b      	adds	r3, r7, #4
 8006300:	2240      	movs	r2, #64	; 0x40
 8006302:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006304:	1d3a      	adds	r2, r7, #4
 8006306:	23a0      	movs	r3, #160	; 0xa0
 8006308:	05db      	lsls	r3, r3, #23
 800630a:	0011      	movs	r1, r2
 800630c:	0018      	movs	r0, r3
 800630e:	f001 fa39 	bl	8007784 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8006312:	1d3b      	adds	r3, r7, #4
 8006314:	2208      	movs	r2, #8
 8006316:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006318:	1d3b      	adds	r3, r7, #4
 800631a:	4a0e      	ldr	r2, [pc, #56]	; (8006354 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 800631c:	0019      	movs	r1, r3
 800631e:	0010      	movs	r0, r2
 8006320:	f001 fa30 	bl	8007784 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8006324:	23a0      	movs	r3, #160	; 0xa0
 8006326:	05db      	lsls	r3, r3, #23
 8006328:	2200      	movs	r2, #0
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	0018      	movs	r0, r3
 800632e:	f001 fca6 	bl	8007c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8006332:	23a0      	movs	r3, #160	; 0xa0
 8006334:	05db      	lsls	r3, r3, #23
 8006336:	2200      	movs	r2, #0
 8006338:	2140      	movs	r1, #64	; 0x40
 800633a:	0018      	movs	r0, r3
 800633c:	f001 fc9f 	bl	8007c7e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8006340:	4b04      	ldr	r3, [pc, #16]	; (8006354 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8006342:	2200      	movs	r2, #0
 8006344:	2108      	movs	r1, #8
 8006346:	0018      	movs	r0, r3
 8006348:	f001 fc99 	bl	8007c7e <HAL_GPIO_WritePin>

}
 800634c:	46c0      	nop			; (mov r8, r8)
 800634e:	46bd      	mov	sp, r7
 8006350:	b006      	add	sp, #24
 8006352:	bd80      	pop	{r7, pc}
 8006354:	50000400 	.word	0x50000400

08006358 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800635c:	4b17      	ldr	r3, [pc, #92]	; (80063bc <SystemInit+0x64>)
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	4b16      	ldr	r3, [pc, #88]	; (80063bc <SystemInit+0x64>)
 8006362:	2180      	movs	r1, #128	; 0x80
 8006364:	0049      	lsls	r1, r1, #1
 8006366:	430a      	orrs	r2, r1
 8006368:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800636a:	4b14      	ldr	r3, [pc, #80]	; (80063bc <SystemInit+0x64>)
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	4b13      	ldr	r3, [pc, #76]	; (80063bc <SystemInit+0x64>)
 8006370:	4913      	ldr	r1, [pc, #76]	; (80063c0 <SystemInit+0x68>)
 8006372:	400a      	ands	r2, r1
 8006374:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8006376:	4b11      	ldr	r3, [pc, #68]	; (80063bc <SystemInit+0x64>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b10      	ldr	r3, [pc, #64]	; (80063bc <SystemInit+0x64>)
 800637c:	4911      	ldr	r1, [pc, #68]	; (80063c4 <SystemInit+0x6c>)
 800637e:	400a      	ands	r2, r1
 8006380:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006382:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <SystemInit+0x64>)
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <SystemInit+0x64>)
 8006388:	2101      	movs	r1, #1
 800638a:	438a      	bics	r2, r1
 800638c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800638e:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <SystemInit+0x64>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <SystemInit+0x64>)
 8006394:	490c      	ldr	r1, [pc, #48]	; (80063c8 <SystemInit+0x70>)
 8006396:	400a      	ands	r2, r1
 8006398:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800639a:	4b08      	ldr	r3, [pc, #32]	; (80063bc <SystemInit+0x64>)
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	4b07      	ldr	r3, [pc, #28]	; (80063bc <SystemInit+0x64>)
 80063a0:	490a      	ldr	r1, [pc, #40]	; (80063cc <SystemInit+0x74>)
 80063a2:	400a      	ands	r2, r1
 80063a4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80063a6:	4b05      	ldr	r3, [pc, #20]	; (80063bc <SystemInit+0x64>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80063ac:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <SystemInit+0x78>)
 80063ae:	2280      	movs	r2, #128	; 0x80
 80063b0:	0512      	lsls	r2, r2, #20
 80063b2:	609a      	str	r2, [r3, #8]
#endif
}
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	40021000 	.word	0x40021000
 80063c0:	88ff400c 	.word	0x88ff400c
 80063c4:	fef6fff6 	.word	0xfef6fff6
 80063c8:	fffbffff 	.word	0xfffbffff
 80063cc:	ff02ffff 	.word	0xff02ffff
 80063d0:	e000ed00 	.word	0xe000ed00

080063d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80063da:	1dfb      	adds	r3, r7, #7
 80063dc:	2200      	movs	r2, #0
 80063de:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <HAL_Init+0x3c>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <HAL_Init+0x3c>)
 80063e6:	2102      	movs	r1, #2
 80063e8:	430a      	orrs	r2, r1
 80063ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80063ec:	2003      	movs	r0, #3
 80063ee:	f7fe fe39 	bl	8005064 <HAL_InitTick>
 80063f2:	1e03      	subs	r3, r0, #0
 80063f4:	d003      	beq.n	80063fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80063f6:	1dfb      	adds	r3, r7, #7
 80063f8:	2201      	movs	r2, #1
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	e001      	b.n	8006402 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80063fe:	f7fe fbf7 	bl	8004bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006402:	1dfb      	adds	r3, r7, #7
 8006404:	781b      	ldrb	r3, [r3, #0]
}
 8006406:	0018      	movs	r0, r3
 8006408:	46bd      	mov	sp, r7
 800640a:	b002      	add	sp, #8
 800640c:	bd80      	pop	{r7, pc}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	40022000 	.word	0x40022000

08006414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006418:	4b05      	ldr	r3, [pc, #20]	; (8006430 <HAL_IncTick+0x1c>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	001a      	movs	r2, r3
 800641e:	4b05      	ldr	r3, [pc, #20]	; (8006434 <HAL_IncTick+0x20>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	18d2      	adds	r2, r2, r3
 8006424:	4b03      	ldr	r3, [pc, #12]	; (8006434 <HAL_IncTick+0x20>)
 8006426:	601a      	str	r2, [r3, #0]
}
 8006428:	46c0      	nop			; (mov r8, r8)
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	20000078 	.word	0x20000078
 8006434:	20001668 	.word	0x20001668

08006438 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800643c:	4b02      	ldr	r3, [pc, #8]	; (8006448 <HAL_GetUIDw0+0x10>)
 800643e:	681b      	ldr	r3, [r3, #0]
}
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	1ff80050 	.word	0x1ff80050

0800644c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8006450:	4b02      	ldr	r3, [pc, #8]	; (800645c <HAL_GetUIDw1+0x10>)
 8006452:	681b      	ldr	r3, [r3, #0]
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	1ff80054 	.word	0x1ff80054

08006460 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8006464:	4b02      	ldr	r3, [pc, #8]	; (8006470 <HAL_GetUIDw2+0x10>)
 8006466:	681b      	ldr	r3, [r3, #0]
}
 8006468:	0018      	movs	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	46c0      	nop			; (mov r8, r8)
 8006470:	1ff80064 	.word	0x1ff80064

08006474 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006478:	4b04      	ldr	r3, [pc, #16]	; (800648c <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	4b03      	ldr	r3, [pc, #12]	; (800648c <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800647e:	2101      	movs	r1, #1
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
}
 8006484:	46c0      	nop			; (mov r8, r8)
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	40015800 	.word	0x40015800

08006490 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006494:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	4b03      	ldr	r3, [pc, #12]	; (80064a8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800649a:	2102      	movs	r1, #2
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
}
 80064a0:	46c0      	nop			; (mov r8, r8)
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	40015800 	.word	0x40015800

080064ac <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80064b6:	2104      	movs	r1, #4
 80064b8:	430a      	orrs	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]
}
 80064bc:	46c0      	nop			; (mov r8, r8)
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	40015800 	.word	0x40015800

080064c8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e159      	b.n	800678e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2250      	movs	r2, #80	; 0x50
 80064ec:	2100      	movs	r1, #0
 80064ee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7fd f972 	bl	80037dc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fc:	2210      	movs	r2, #16
 80064fe:	4013      	ands	r3, r2
 8006500:	2b10      	cmp	r3, #16
 8006502:	d005      	beq.n	8006510 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2204      	movs	r2, #4
 800650c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800650e:	d00b      	beq.n	8006528 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006514:	2210      	movs	r2, #16
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2250      	movs	r2, #80	; 0x50
 8006520:	2100      	movs	r1, #0
 8006522:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e132      	b.n	800678e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652c:	4a9a      	ldr	r2, [pc, #616]	; (8006798 <HAL_ADC_Init+0x2d0>)
 800652e:	4013      	ands	r3, r2
 8006530:	2202      	movs	r2, #2
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2203      	movs	r2, #3
 8006540:	4013      	ands	r3, r2
 8006542:	2b01      	cmp	r3, #1
 8006544:	d108      	bne.n	8006558 <HAL_ADC_Init+0x90>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2201      	movs	r2, #1
 800654e:	4013      	ands	r3, r2
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_ADC_Init+0x90>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <HAL_ADC_Init+0x92>
 8006558:	2300      	movs	r3, #0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d149      	bne.n	80065f2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	23c0      	movs	r3, #192	; 0xc0
 8006564:	061b      	lsls	r3, r3, #24
 8006566:	429a      	cmp	r2, r3
 8006568:	d00b      	beq.n	8006582 <HAL_ADC_Init+0xba>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	2380      	movs	r3, #128	; 0x80
 8006570:	05db      	lsls	r3, r3, #23
 8006572:	429a      	cmp	r2, r3
 8006574:	d005      	beq.n	8006582 <HAL_ADC_Init+0xba>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	2380      	movs	r3, #128	; 0x80
 800657c:	061b      	lsls	r3, r3, #24
 800657e:	429a      	cmp	r2, r3
 8006580:	d111      	bne.n	80065a6 <HAL_ADC_Init+0xde>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691a      	ldr	r2, [r3, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	0092      	lsls	r2, r2, #2
 800658e:	0892      	lsrs	r2, r2, #2
 8006590:	611a      	str	r2, [r3, #16]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6919      	ldr	r1, [r3, #16]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	611a      	str	r2, [r3, #16]
 80065a4:	e014      	b.n	80065d0 <HAL_ADC_Init+0x108>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	0092      	lsls	r2, r2, #2
 80065b2:	0892      	lsrs	r2, r2, #2
 80065b4:	611a      	str	r2, [r3, #16]
 80065b6:	4b79      	ldr	r3, [pc, #484]	; (800679c <HAL_ADC_Init+0x2d4>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4b78      	ldr	r3, [pc, #480]	; (800679c <HAL_ADC_Init+0x2d4>)
 80065bc:	4978      	ldr	r1, [pc, #480]	; (80067a0 <HAL_ADC_Init+0x2d8>)
 80065be:	400a      	ands	r2, r1
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	4b76      	ldr	r3, [pc, #472]	; (800679c <HAL_ADC_Init+0x2d4>)
 80065c4:	6819      	ldr	r1, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	4b74      	ldr	r3, [pc, #464]	; (800679c <HAL_ADC_Init+0x2d4>)
 80065cc:	430a      	orrs	r2, r1
 80065ce:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2118      	movs	r1, #24
 80065dc:	438a      	bics	r2, r1
 80065de:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68d9      	ldr	r1, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80065f2:	4b6a      	ldr	r3, [pc, #424]	; (800679c <HAL_ADC_Init+0x2d4>)
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4b69      	ldr	r3, [pc, #420]	; (800679c <HAL_ADC_Init+0x2d4>)
 80065f8:	496a      	ldr	r1, [pc, #424]	; (80067a4 <HAL_ADC_Init+0x2dc>)
 80065fa:	400a      	ands	r2, r1
 80065fc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80065fe:	4b67      	ldr	r3, [pc, #412]	; (800679c <HAL_ADC_Init+0x2d4>)
 8006600:	6819      	ldr	r1, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	065a      	lsls	r2, r3, #25
 8006608:	4b64      	ldr	r3, [pc, #400]	; (800679c <HAL_ADC_Init+0x2d4>)
 800660a:	430a      	orrs	r2, r1
 800660c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	055b      	lsls	r3, r3, #21
 8006618:	4013      	ands	r3, r2
 800661a:	d108      	bne.n	800662e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2180      	movs	r1, #128	; 0x80
 8006628:	0549      	lsls	r1, r1, #21
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	495b      	ldr	r1, [pc, #364]	; (80067a8 <HAL_ADC_Init+0x2e0>)
 800663a:	400a      	ands	r2, r1
 800663c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68d9      	ldr	r1, [r3, #12]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d101      	bne.n	8006654 <HAL_ADC_Init+0x18c>
 8006650:	2304      	movs	r3, #4
 8006652:	e000      	b.n	8006656 <HAL_ADC_Init+0x18e>
 8006654:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006656:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2020      	movs	r0, #32
 800665c:	5c1b      	ldrb	r3, [r3, r0]
 800665e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006660:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	202c      	movs	r0, #44	; 0x2c
 8006666:	5c1b      	ldrb	r3, [r3, r0]
 8006668:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800666a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006670:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8006678:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006680:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800668e:	23c2      	movs	r3, #194	; 0xc2
 8006690:	33ff      	adds	r3, #255	; 0xff
 8006692:	429a      	cmp	r2, r3
 8006694:	d00b      	beq.n	80066ae <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68d9      	ldr	r1, [r3, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2221      	movs	r2, #33	; 0x21
 80066b2:	5c9b      	ldrb	r3, [r3, r2]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d11a      	bne.n	80066ee <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	5c9b      	ldrb	r3, [r3, r2]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2180      	movs	r1, #128	; 0x80
 80066ce:	0249      	lsls	r1, r1, #9
 80066d0:	430a      	orrs	r2, r1
 80066d2:	60da      	str	r2, [r3, #12]
 80066d4:	e00b      	b.n	80066ee <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	2220      	movs	r2, #32
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e6:	2201      	movs	r2, #1
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d11f      	bne.n	8006736 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	492a      	ldr	r1, [pc, #168]	; (80067ac <HAL_ADC_Init+0x2e4>)
 8006702:	400a      	ands	r2, r1
 8006704:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6919      	ldr	r1, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006714:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800671a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691a      	ldr	r2, [r3, #16]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2101      	movs	r1, #1
 8006730:	430a      	orrs	r2, r1
 8006732:	611a      	str	r2, [r3, #16]
 8006734:	e00e      	b.n	8006754 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	2201      	movs	r2, #1
 800673e:	4013      	ands	r3, r2
 8006740:	2b01      	cmp	r3, #1
 8006742:	d107      	bne.n	8006754 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691a      	ldr	r2, [r3, #16]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2101      	movs	r1, #1
 8006750:	438a      	bics	r2, r1
 8006752:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2107      	movs	r1, #7
 8006760:	438a      	bics	r2, r1
 8006762:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6959      	ldr	r1, [r3, #20]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006780:	2203      	movs	r2, #3
 8006782:	4393      	bics	r3, r2
 8006784:	2201      	movs	r2, #1
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b002      	add	sp, #8
 8006794:	bd80      	pop	{r7, pc}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	fffffefd 	.word	0xfffffefd
 800679c:	40012708 	.word	0x40012708
 80067a0:	ffc3ffff 	.word	0xffc3ffff
 80067a4:	fdffffff 	.word	0xfdffffff
 80067a8:	fffe0219 	.word	0xfffe0219
 80067ac:	fffffc03 	.word	0xfffffc03

080067b0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 80067b0:	b5b0      	push	{r4, r5, r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067b8:	230f      	movs	r3, #15
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e07d      	b.n	80068c6 <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ce:	2202      	movs	r2, #2
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80067d6:	250f      	movs	r5, #15
 80067d8:	197c      	adds	r4, r7, r5
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	0018      	movs	r0, r3
 80067de:	f000 faff 	bl	8006de0 <ADC_ConversionStop>
 80067e2:	0003      	movs	r3, r0
 80067e4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80067e6:	197b      	adds	r3, r7, r5
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10d      	bne.n	800680a <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80067ee:	197c      	adds	r4, r7, r5
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	0018      	movs	r0, r3
 80067f4:	f000 fa94 	bl	8006d20 <ADC_Disable>
 80067f8:	0003      	movs	r3, r0
 80067fa:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 80067fc:	197b      	adds	r3, r7, r5
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d002      	beq.n	800680a <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 800680a:	230f      	movs	r3, #15
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d051      	beq.n	80068b8 <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	492c      	ldr	r1, [pc, #176]	; (80068d0 <HAL_ADC_DeInit+0x120>)
 8006820:	400a      	ands	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <HAL_ADC_DeInit+0x124>)
 800682a:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4928      	ldr	r1, [pc, #160]	; (80068d8 <HAL_ADC_DeInit+0x128>)
 8006838:	400a      	ands	r2, r1
 800683a:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4925      	ldr	r1, [pc, #148]	; (80068dc <HAL_ADC_DeInit+0x12c>)
 8006848:	400a      	ands	r2, r1
 800684a:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4922      	ldr	r1, [pc, #136]	; (80068e0 <HAL_ADC_DeInit+0x130>)
 8006858:	400a      	ands	r2, r1
 800685a:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695a      	ldr	r2, [r3, #20]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2107      	movs	r1, #7
 8006868:	438a      	bics	r2, r1
 800686a:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a1a      	ldr	r2, [r3, #32]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	491b      	ldr	r1, [pc, #108]	; (80068e4 <HAL_ADC_DeInit+0x134>)
 8006878:	400a      	ands	r2, r1
 800687a:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	22b4      	movs	r2, #180	; 0xb4
 8006882:	589a      	ldr	r2, [r3, r2]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	217f      	movs	r1, #127	; 0x7f
 800688a:	438a      	bics	r2, r1
 800688c:	21b4      	movs	r1, #180	; 0xb4
 800688e:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	22b4      	movs	r2, #180	; 0xb4
 8006896:	589a      	ldr	r2, [r3, r2]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	217f      	movs	r1, #127	; 0x7f
 800689e:	438a      	bics	r2, r1
 80068a0:	21b4      	movs	r1, #180	; 0xb4
 80068a2:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7fc ffc8 	bl	800383c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2250      	movs	r2, #80	; 0x50
 80068bc:	2100      	movs	r1, #0
 80068be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80068c0:	230f      	movs	r3, #15
 80068c2:	18fb      	adds	r3, r7, r3
 80068c4:	781b      	ldrb	r3, [r3, #0]
}
 80068c6:	0018      	movs	r0, r3
 80068c8:	46bd      	mov	sp, r7
 80068ca:	b004      	add	sp, #16
 80068cc:	bdb0      	pop	{r4, r5, r7, pc}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	fffff760 	.word	0xfffff760
 80068d4:	0000089f 	.word	0x0000089f
 80068d8:	efffffff 	.word	0xefffffff
 80068dc:	833e0200 	.word	0x833e0200
 80068e0:	3ffffc02 	.word	0x3ffffc02
 80068e4:	f000f000 	.word	0xf000f000

080068e8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80068e8:	b590      	push	{r4, r7, lr}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068f0:	230f      	movs	r3, #15
 80068f2:	18fb      	adds	r3, r7, r3
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2204      	movs	r2, #4
 8006900:	4013      	ands	r3, r2
 8006902:	d138      	bne.n	8006976 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2250      	movs	r2, #80	; 0x50
 8006908:	5c9b      	ldrb	r3, [r3, r2]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_ADC_Start+0x2a>
 800690e:	2302      	movs	r3, #2
 8006910:	e038      	b.n	8006984 <HAL_ADC_Start+0x9c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2250      	movs	r2, #80	; 0x50
 8006916:	2101      	movs	r1, #1
 8006918:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d007      	beq.n	8006932 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006922:	230f      	movs	r3, #15
 8006924:	18fc      	adds	r4, r7, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	0018      	movs	r0, r3
 800692a:	f000 f999 	bl	8006c60 <ADC_Enable>
 800692e:	0003      	movs	r3, r0
 8006930:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006932:	230f      	movs	r3, #15
 8006934:	18fb      	adds	r3, r7, r3
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d120      	bne.n	800697e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006940:	4a12      	ldr	r2, [pc, #72]	; (800698c <HAL_ADC_Start+0xa4>)
 8006942:	4013      	ands	r3, r2
 8006944:	2280      	movs	r2, #128	; 0x80
 8006946:	0052      	lsls	r2, r2, #1
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2250      	movs	r2, #80	; 0x50
 8006958:	2100      	movs	r1, #0
 800695a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	221c      	movs	r2, #28
 8006962:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2104      	movs	r1, #4
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]
 8006974:	e003      	b.n	800697e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006976:	230f      	movs	r3, #15
 8006978:	18fb      	adds	r3, r7, r3
 800697a:	2202      	movs	r2, #2
 800697c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800697e:	230f      	movs	r3, #15
 8006980:	18fb      	adds	r3, r7, r3
 8006982:	781b      	ldrb	r3, [r3, #0]
}
 8006984:	0018      	movs	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	b005      	add	sp, #20
 800698a:	bd90      	pop	{r4, r7, pc}
 800698c:	fffff0fe 	.word	0xfffff0fe

08006990 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006990:	b5b0      	push	{r4, r5, r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006998:	230f      	movs	r3, #15
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	2200      	movs	r2, #0
 800699e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2250      	movs	r2, #80	; 0x50
 80069a4:	5c9b      	ldrb	r3, [r3, r2]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <HAL_ADC_Stop+0x1e>
 80069aa:	2302      	movs	r3, #2
 80069ac:	e029      	b.n	8006a02 <HAL_ADC_Stop+0x72>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2250      	movs	r2, #80	; 0x50
 80069b2:	2101      	movs	r1, #1
 80069b4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80069b6:	250f      	movs	r5, #15
 80069b8:	197c      	adds	r4, r7, r5
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0018      	movs	r0, r3
 80069be:	f000 fa0f 	bl	8006de0 <ADC_ConversionStop>
 80069c2:	0003      	movs	r3, r0
 80069c4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80069c6:	197b      	adds	r3, r7, r5
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d112      	bne.n	80069f4 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80069ce:	197c      	adds	r4, r7, r5
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	0018      	movs	r0, r3
 80069d4:	f000 f9a4 	bl	8006d20 <ADC_Disable>
 80069d8:	0003      	movs	r3, r0
 80069da:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80069dc:	197b      	adds	r3, r7, r5
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d107      	bne.n	80069f4 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e8:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <HAL_ADC_Stop+0x7c>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	2201      	movs	r2, #1
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2250      	movs	r2, #80	; 0x50
 80069f8:	2100      	movs	r1, #0
 80069fa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80069fc:	230f      	movs	r3, #15
 80069fe:	18fb      	adds	r3, r7, r3
 8006a00:	781b      	ldrb	r3, [r3, #0]
}
 8006a02:	0018      	movs	r0, r3
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b004      	add	sp, #16
 8006a08:	bdb0      	pop	{r4, r5, r7, pc}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	fffffefe 	.word	0xfffffefe

08006a10 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d102      	bne.n	8006a30 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e014      	b.n	8006a5a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d10b      	bne.n	8006a56 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a42:	2220      	movs	r2, #32
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2250      	movs	r2, #80	; 0x50
 8006a4e:	2100      	movs	r1, #0
 8006a50:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e06c      	b.n	8006b30 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8006a56:	230c      	movs	r3, #12
 8006a58:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006a5a:	f7fe fb0c 	bl	8005076 <HAL_GetTick>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006a62:	e019      	b.n	8006a98 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	3301      	adds	r3, #1
 8006a68:	d016      	beq.n	8006a98 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <HAL_ADC_PollForConversion+0x70>
 8006a70:	f7fe fb01 	bl	8005076 <HAL_GetTick>
 8006a74:	0002      	movs	r2, r0
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d20b      	bcs.n	8006a98 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a84:	2204      	movs	r2, #4
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2250      	movs	r2, #80	; 0x50
 8006a90:	2100      	movs	r1, #0
 8006a92:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e04b      	b.n	8006b30 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	d0df      	beq.n	8006a64 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa8:	2280      	movs	r2, #128	; 0x80
 8006aaa:	0092      	lsls	r2, r2, #2
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	23c0      	movs	r3, #192	; 0xc0
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	4013      	ands	r3, r2
 8006abe:	d12e      	bne.n	8006b1e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d129      	bne.n	8006b1e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d122      	bne.n	8006b1e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2204      	movs	r2, #4
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	d110      	bne.n	8006b06 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	210c      	movs	r1, #12
 8006af0:	438a      	bics	r2, r1
 8006af2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af8:	4a0f      	ldr	r2, [pc, #60]	; (8006b38 <HAL_ADC_PollForConversion+0x128>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	2201      	movs	r2, #1
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	655a      	str	r2, [r3, #84]	; 0x54
 8006b04:	e00b      	b.n	8006b1e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	2201      	movs	r2, #1
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	220c      	movs	r2, #12
 8006b2c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	0018      	movs	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b004      	add	sp, #16
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	fffffefe 	.word	0xfffffefe

08006b3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	b002      	add	sp, #8
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2250      	movs	r2, #80	; 0x50
 8006b62:	5c9b      	ldrb	r3, [r3, r2]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_ADC_ConfigChannel+0x18>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e06c      	b.n	8006c46 <HAL_ADC_ConfigChannel+0xf2>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2250      	movs	r2, #80	; 0x50
 8006b70:	2101      	movs	r1, #1
 8006b72:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2204      	movs	r2, #4
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d00b      	beq.n	8006b98 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b84:	2220      	movs	r2, #32
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2250      	movs	r2, #80	; 0x50
 8006b90:	2100      	movs	r1, #0
 8006b92:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e056      	b.n	8006c46 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4a2c      	ldr	r2, [pc, #176]	; (8006c50 <HAL_ADC_ConfigChannel+0xfc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d028      	beq.n	8006bf4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	035b      	lsls	r3, r3, #13
 8006bae:	0b5a      	lsrs	r2, r3, #13
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	2380      	movs	r3, #128	; 0x80
 8006bbe:	02db      	lsls	r3, r3, #11
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	d009      	beq.n	8006bd8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006bc4:	4b23      	ldr	r3, [pc, #140]	; (8006c54 <HAL_ADC_ConfigChannel+0x100>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	4b22      	ldr	r3, [pc, #136]	; (8006c54 <HAL_ADC_ConfigChannel+0x100>)
 8006bca:	2180      	movs	r1, #128	; 0x80
 8006bcc:	0409      	lsls	r1, r1, #16
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006bd2:	200a      	movs	r0, #10
 8006bd4:	f000 f94a 	bl	8006e6c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	2380      	movs	r3, #128	; 0x80
 8006bde:	029b      	lsls	r3, r3, #10
 8006be0:	4013      	ands	r3, r2
 8006be2:	d02b      	beq.n	8006c3c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006be4:	4b1b      	ldr	r3, [pc, #108]	; (8006c54 <HAL_ADC_ConfigChannel+0x100>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <HAL_ADC_ConfigChannel+0x100>)
 8006bea:	2180      	movs	r1, #128	; 0x80
 8006bec:	03c9      	lsls	r1, r1, #15
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e023      	b.n	8006c3c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	035b      	lsls	r3, r3, #13
 8006c00:	0b5b      	lsrs	r3, r3, #13
 8006c02:	43d9      	mvns	r1, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	400a      	ands	r2, r1
 8006c0a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	2380      	movs	r3, #128	; 0x80
 8006c12:	02db      	lsls	r3, r3, #11
 8006c14:	4013      	ands	r3, r2
 8006c16:	d005      	beq.n	8006c24 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006c18:	4b0e      	ldr	r3, [pc, #56]	; (8006c54 <HAL_ADC_ConfigChannel+0x100>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <HAL_ADC_ConfigChannel+0x100>)
 8006c1e:	490e      	ldr	r1, [pc, #56]	; (8006c58 <HAL_ADC_ConfigChannel+0x104>)
 8006c20:	400a      	ands	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	029b      	lsls	r3, r3, #10
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d005      	beq.n	8006c3c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006c30:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <HAL_ADC_ConfigChannel+0x100>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	4b07      	ldr	r3, [pc, #28]	; (8006c54 <HAL_ADC_ConfigChannel+0x100>)
 8006c36:	4909      	ldr	r1, [pc, #36]	; (8006c5c <HAL_ADC_ConfigChannel+0x108>)
 8006c38:	400a      	ands	r2, r1
 8006c3a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2250      	movs	r2, #80	; 0x50
 8006c40:	2100      	movs	r1, #0
 8006c42:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	0018      	movs	r0, r3
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b002      	add	sp, #8
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	00001001 	.word	0x00001001
 8006c54:	40012708 	.word	0x40012708
 8006c58:	ff7fffff 	.word	0xff7fffff
 8006c5c:	ffbfffff 	.word	0xffbfffff

08006c60 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2203      	movs	r2, #3
 8006c74:	4013      	ands	r3, r2
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d108      	bne.n	8006c8c <ADC_Enable+0x2c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2201      	movs	r2, #1
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <ADC_Enable+0x2c>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <ADC_Enable+0x2e>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d13f      	bne.n	8006d12 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4a20      	ldr	r2, [pc, #128]	; (8006d1c <ADC_Enable+0xbc>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d00d      	beq.n	8006cba <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca2:	2210      	movs	r2, #16
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cae:	2201      	movs	r2, #1
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e02c      	b.n	8006d14 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006cca:	2001      	movs	r0, #1
 8006ccc:	f000 f8ce 	bl	8006e6c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006cd0:	f7fe f9d1 	bl	8005076 <HAL_GetTick>
 8006cd4:	0003      	movs	r3, r0
 8006cd6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006cd8:	e014      	b.n	8006d04 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006cda:	f7fe f9cc 	bl	8005076 <HAL_GetTick>
 8006cde:	0002      	movs	r2, r0
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b0a      	cmp	r3, #10
 8006ce6:	d90d      	bls.n	8006d04 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cec:	2210      	movs	r2, #16
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e007      	b.n	8006d14 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d1e3      	bne.n	8006cda <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	0018      	movs	r0, r3
 8006d16:	46bd      	mov	sp, r7
 8006d18:	b004      	add	sp, #16
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	80000017 	.word	0x80000017

08006d20 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2203      	movs	r2, #3
 8006d34:	4013      	ands	r3, r2
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d108      	bne.n	8006d4c <ADC_Disable+0x2c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2201      	movs	r2, #1
 8006d42:	4013      	ands	r3, r2
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <ADC_Disable+0x2c>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <ADC_Disable+0x2e>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d041      	beq.n	8006dd6 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	2205      	movs	r2, #5
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d110      	bne.n	8006d82 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2102      	movs	r1, #2
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	609a      	str	r2, [r3, #8]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2203      	movs	r2, #3
 8006d76:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d78:	f7fe f97d 	bl	8005076 <HAL_GetTick>
 8006d7c:	0003      	movs	r3, r0
 8006d7e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006d80:	e022      	b.n	8006dc8 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d86:	2210      	movs	r2, #16
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d92:	2201      	movs	r2, #1
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e01c      	b.n	8006dd8 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d9e:	f7fe f96a 	bl	8005076 <HAL_GetTick>
 8006da2:	0002      	movs	r2, r0
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b0a      	cmp	r3, #10
 8006daa:	d90d      	bls.n	8006dc8 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db0:	2210      	movs	r2, #16
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e007      	b.n	8006dd8 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d0e3      	beq.n	8006d9e <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	0018      	movs	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b004      	add	sp, #16
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	2204      	movs	r2, #4
 8006df4:	4013      	ands	r3, r2
 8006df6:	d034      	beq.n	8006e62 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	4013      	ands	r3, r2
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d10d      	bne.n	8006e22 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006e10:	d107      	bne.n	8006e22 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2110      	movs	r1, #16
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006e22:	f7fe f928 	bl	8005076 <HAL_GetTick>
 8006e26:	0003      	movs	r3, r0
 8006e28:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006e2a:	e014      	b.n	8006e56 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006e2c:	f7fe f923 	bl	8005076 <HAL_GetTick>
 8006e30:	0002      	movs	r2, r0
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b0a      	cmp	r3, #10
 8006e38:	d90d      	bls.n	8006e56 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3e:	2210      	movs	r2, #16
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e006      	b.n	8006e64 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2204      	movs	r2, #4
 8006e5e:	4013      	ands	r3, r2
 8006e60:	d1e4      	bne.n	8006e2c <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	0018      	movs	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b004      	add	sp, #16
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006e74:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <ADC_DelayMicroSecond+0x38>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	490b      	ldr	r1, [pc, #44]	; (8006ea8 <ADC_DelayMicroSecond+0x3c>)
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	f7f9 f94c 	bl	8000118 <__udivsi3>
 8006e80:	0003      	movs	r3, r0
 8006e82:	001a      	movs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4353      	muls	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006e8a:	e002      	b.n	8006e92 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1f9      	bne.n	8006e8c <ADC_DelayMicroSecond+0x20>
  } 
}
 8006e98:	46c0      	nop			; (mov r8, r8)
 8006e9a:	46c0      	nop			; (mov r8, r8)
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	b004      	add	sp, #16
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	20000070 	.word	0x20000070
 8006ea8:	000f4240 	.word	0x000f4240

08006eac <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006eb6:	2317      	movs	r3, #23
 8006eb8:	18fb      	adds	r3, r7, r3
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2250      	movs	r2, #80	; 0x50
 8006eca:	5c9b      	ldrb	r3, [r3, r2]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_ADCEx_Calibration_Start+0x28>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e07a      	b.n	8006fca <HAL_ADCEx_Calibration_Start+0x11e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2250      	movs	r2, #80	; 0x50
 8006ed8:	2101      	movs	r1, #1
 8006eda:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d108      	bne.n	8006efc <HAL_ADCEx_Calibration_Start+0x50>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d101      	bne.n	8006efc <HAL_ADCEx_Calibration_Start+0x50>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e000      	b.n	8006efe <HAL_ADCEx_Calibration_Start+0x52>
 8006efc:	2300      	movs	r3, #0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d152      	bne.n	8006fa8 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	4a33      	ldr	r2, [pc, #204]	; (8006fd4 <HAL_ADCEx_Calibration_Start+0x128>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	2203      	movs	r2, #3
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2103      	movs	r1, #3
 8006f2a:	438a      	bics	r2, r1
 8006f2c:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2180      	movs	r1, #128	; 0x80
 8006f3a:	0609      	lsls	r1, r1, #24
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006f40:	f7fe f899 	bl	8005076 <HAL_GetTick>
 8006f44:	0003      	movs	r3, r0
 8006f46:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006f48:	e014      	b.n	8006f74 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006f4a:	f7fe f894 	bl	8005076 <HAL_GetTick>
 8006f4e:	0002      	movs	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b0a      	cmp	r3, #10
 8006f56:	d90d      	bls.n	8006f74 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5c:	2212      	movs	r2, #18
 8006f5e:	4393      	bics	r3, r2
 8006f60:	2210      	movs	r2, #16
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2250      	movs	r2, #80	; 0x50
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e02a      	b.n	8006fca <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	0fdb      	lsrs	r3, r3, #31
 8006f7c:	07da      	lsls	r2, r3, #31
 8006f7e:	2380      	movs	r3, #128	; 0x80
 8006f80:	061b      	lsls	r3, r3, #24
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d0e1      	beq.n	8006f4a <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68d9      	ldr	r1, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	4393      	bics	r3, r2
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	655a      	str	r2, [r3, #84]	; 0x54
 8006fa6:	e009      	b.n	8006fbc <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fac:	2220      	movs	r2, #32
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8006fb4:	2317      	movs	r3, #23
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	2201      	movs	r2, #1
 8006fba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2250      	movs	r2, #80	; 0x50
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006fc4:	2317      	movs	r3, #23
 8006fc6:	18fb      	adds	r3, r7, r3
 8006fc8:	781b      	ldrb	r3, [r3, #0]
}
 8006fca:	0018      	movs	r0, r3
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	b006      	add	sp, #24
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	fffffefd 	.word	0xfffffefd

08006fd8 <__NVIC_EnableIRQ>:
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	0002      	movs	r2, r0
 8006fe0:	1dfb      	adds	r3, r7, #7
 8006fe2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006fe4:	1dfb      	adds	r3, r7, #7
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b7f      	cmp	r3, #127	; 0x7f
 8006fea:	d809      	bhi.n	8007000 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fec:	1dfb      	adds	r3, r7, #7
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	001a      	movs	r2, r3
 8006ff2:	231f      	movs	r3, #31
 8006ff4:	401a      	ands	r2, r3
 8006ff6:	4b04      	ldr	r3, [pc, #16]	; (8007008 <__NVIC_EnableIRQ+0x30>)
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	4091      	lsls	r1, r2
 8006ffc:	000a      	movs	r2, r1
 8006ffe:	601a      	str	r2, [r3, #0]
}
 8007000:	46c0      	nop			; (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b002      	add	sp, #8
 8007006:	bd80      	pop	{r7, pc}
 8007008:	e000e100 	.word	0xe000e100

0800700c <__NVIC_DisableIRQ>:
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	0002      	movs	r2, r0
 8007014:	1dfb      	adds	r3, r7, #7
 8007016:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007018:	1dfb      	adds	r3, r7, #7
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b7f      	cmp	r3, #127	; 0x7f
 800701e:	d810      	bhi.n	8007042 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007020:	1dfb      	adds	r3, r7, #7
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	001a      	movs	r2, r3
 8007026:	231f      	movs	r3, #31
 8007028:	4013      	ands	r3, r2
 800702a:	4908      	ldr	r1, [pc, #32]	; (800704c <__NVIC_DisableIRQ+0x40>)
 800702c:	2201      	movs	r2, #1
 800702e:	409a      	lsls	r2, r3
 8007030:	0013      	movs	r3, r2
 8007032:	2280      	movs	r2, #128	; 0x80
 8007034:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007036:	f3bf 8f4f 	dsb	sy
}
 800703a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800703c:	f3bf 8f6f 	isb	sy
}
 8007040:	46c0      	nop			; (mov r8, r8)
}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	46bd      	mov	sp, r7
 8007046:	b002      	add	sp, #8
 8007048:	bd80      	pop	{r7, pc}
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	e000e100 	.word	0xe000e100

08007050 <__NVIC_SetPriority>:
{
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	0002      	movs	r2, r0
 8007058:	6039      	str	r1, [r7, #0]
 800705a:	1dfb      	adds	r3, r7, #7
 800705c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800705e:	1dfb      	adds	r3, r7, #7
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b7f      	cmp	r3, #127	; 0x7f
 8007064:	d828      	bhi.n	80070b8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007066:	4a2f      	ldr	r2, [pc, #188]	; (8007124 <__NVIC_SetPriority+0xd4>)
 8007068:	1dfb      	adds	r3, r7, #7
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	b25b      	sxtb	r3, r3
 800706e:	089b      	lsrs	r3, r3, #2
 8007070:	33c0      	adds	r3, #192	; 0xc0
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	589b      	ldr	r3, [r3, r2]
 8007076:	1dfa      	adds	r2, r7, #7
 8007078:	7812      	ldrb	r2, [r2, #0]
 800707a:	0011      	movs	r1, r2
 800707c:	2203      	movs	r2, #3
 800707e:	400a      	ands	r2, r1
 8007080:	00d2      	lsls	r2, r2, #3
 8007082:	21ff      	movs	r1, #255	; 0xff
 8007084:	4091      	lsls	r1, r2
 8007086:	000a      	movs	r2, r1
 8007088:	43d2      	mvns	r2, r2
 800708a:	401a      	ands	r2, r3
 800708c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	019b      	lsls	r3, r3, #6
 8007092:	22ff      	movs	r2, #255	; 0xff
 8007094:	401a      	ands	r2, r3
 8007096:	1dfb      	adds	r3, r7, #7
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	0018      	movs	r0, r3
 800709c:	2303      	movs	r3, #3
 800709e:	4003      	ands	r3, r0
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070a4:	481f      	ldr	r0, [pc, #124]	; (8007124 <__NVIC_SetPriority+0xd4>)
 80070a6:	1dfb      	adds	r3, r7, #7
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	b25b      	sxtb	r3, r3
 80070ac:	089b      	lsrs	r3, r3, #2
 80070ae:	430a      	orrs	r2, r1
 80070b0:	33c0      	adds	r3, #192	; 0xc0
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	501a      	str	r2, [r3, r0]
}
 80070b6:	e031      	b.n	800711c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070b8:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <__NVIC_SetPriority+0xd8>)
 80070ba:	1dfb      	adds	r3, r7, #7
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	0019      	movs	r1, r3
 80070c0:	230f      	movs	r3, #15
 80070c2:	400b      	ands	r3, r1
 80070c4:	3b08      	subs	r3, #8
 80070c6:	089b      	lsrs	r3, r3, #2
 80070c8:	3306      	adds	r3, #6
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	18d3      	adds	r3, r2, r3
 80070ce:	3304      	adds	r3, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	1dfa      	adds	r2, r7, #7
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	0011      	movs	r1, r2
 80070d8:	2203      	movs	r2, #3
 80070da:	400a      	ands	r2, r1
 80070dc:	00d2      	lsls	r2, r2, #3
 80070de:	21ff      	movs	r1, #255	; 0xff
 80070e0:	4091      	lsls	r1, r2
 80070e2:	000a      	movs	r2, r1
 80070e4:	43d2      	mvns	r2, r2
 80070e6:	401a      	ands	r2, r3
 80070e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	019b      	lsls	r3, r3, #6
 80070ee:	22ff      	movs	r2, #255	; 0xff
 80070f0:	401a      	ands	r2, r3
 80070f2:	1dfb      	adds	r3, r7, #7
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	0018      	movs	r0, r3
 80070f8:	2303      	movs	r3, #3
 80070fa:	4003      	ands	r3, r0
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007100:	4809      	ldr	r0, [pc, #36]	; (8007128 <__NVIC_SetPriority+0xd8>)
 8007102:	1dfb      	adds	r3, r7, #7
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	001c      	movs	r4, r3
 8007108:	230f      	movs	r3, #15
 800710a:	4023      	ands	r3, r4
 800710c:	3b08      	subs	r3, #8
 800710e:	089b      	lsrs	r3, r3, #2
 8007110:	430a      	orrs	r2, r1
 8007112:	3306      	adds	r3, #6
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	18c3      	adds	r3, r0, r3
 8007118:	3304      	adds	r3, #4
 800711a:	601a      	str	r2, [r3, #0]
}
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	46bd      	mov	sp, r7
 8007120:	b003      	add	sp, #12
 8007122:	bd90      	pop	{r4, r7, pc}
 8007124:	e000e100 	.word	0xe000e100
 8007128:	e000ed00 	.word	0xe000ed00

0800712c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
 8007136:	210f      	movs	r1, #15
 8007138:	187b      	adds	r3, r7, r1
 800713a:	1c02      	adds	r2, r0, #0
 800713c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	187b      	adds	r3, r7, r1
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	b25b      	sxtb	r3, r3
 8007146:	0011      	movs	r1, r2
 8007148:	0018      	movs	r0, r3
 800714a:	f7ff ff81 	bl	8007050 <__NVIC_SetPriority>
}
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	46bd      	mov	sp, r7
 8007152:	b004      	add	sp, #16
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	0002      	movs	r2, r0
 800715e:	1dfb      	adds	r3, r7, #7
 8007160:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007162:	1dfb      	adds	r3, r7, #7
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	b25b      	sxtb	r3, r3
 8007168:	0018      	movs	r0, r3
 800716a:	f7ff ff35 	bl	8006fd8 <__NVIC_EnableIRQ>
}
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	46bd      	mov	sp, r7
 8007172:	b002      	add	sp, #8
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	0002      	movs	r2, r0
 800717e:	1dfb      	adds	r3, r7, #7
 8007180:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007182:	1dfb      	adds	r3, r7, #7
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	b25b      	sxtb	r3, r3
 8007188:	0018      	movs	r0, r3
 800718a:	f7ff ff3f 	bl	800700c <__NVIC_DisableIRQ>
}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	46bd      	mov	sp, r7
 8007192:	b002      	add	sp, #8
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e061      	b.n	800726e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a32      	ldr	r2, [pc, #200]	; (8007278 <HAL_DMA_Init+0xe0>)
 80071b0:	4694      	mov	ip, r2
 80071b2:	4463      	add	r3, ip
 80071b4:	2114      	movs	r1, #20
 80071b6:	0018      	movs	r0, r3
 80071b8:	f7f8 ffae 	bl	8000118 <__udivsi3>
 80071bc:	0003      	movs	r3, r0
 80071be:	009a      	lsls	r2, r3, #2
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a2d      	ldr	r2, [pc, #180]	; (800727c <HAL_DMA_Init+0xe4>)
 80071c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2225      	movs	r2, #37	; 0x25
 80071ce:	2102      	movs	r1, #2
 80071d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4a28      	ldr	r2, [pc, #160]	; (8007280 <HAL_DMA_Init+0xe8>)
 80071de:	4013      	ands	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80071ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007202:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	2380      	movs	r3, #128	; 0x80
 800721e:	01db      	lsls	r3, r3, #7
 8007220:	429a      	cmp	r2, r3
 8007222:	d018      	beq.n	8007256 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007224:	4b17      	ldr	r3, [pc, #92]	; (8007284 <HAL_DMA_Init+0xec>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722c:	211c      	movs	r1, #28
 800722e:	400b      	ands	r3, r1
 8007230:	210f      	movs	r1, #15
 8007232:	4099      	lsls	r1, r3
 8007234:	000b      	movs	r3, r1
 8007236:	43d9      	mvns	r1, r3
 8007238:	4b12      	ldr	r3, [pc, #72]	; (8007284 <HAL_DMA_Init+0xec>)
 800723a:	400a      	ands	r2, r1
 800723c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800723e:	4b11      	ldr	r3, [pc, #68]	; (8007284 <HAL_DMA_Init+0xec>)
 8007240:	6819      	ldr	r1, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	201c      	movs	r0, #28
 800724c:	4003      	ands	r3, r0
 800724e:	409a      	lsls	r2, r3
 8007250:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <HAL_DMA_Init+0xec>)
 8007252:	430a      	orrs	r2, r1
 8007254:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2225      	movs	r2, #37	; 0x25
 8007260:	2101      	movs	r1, #1
 8007262:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2224      	movs	r2, #36	; 0x24
 8007268:	2100      	movs	r1, #0
 800726a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	0018      	movs	r0, r3
 8007270:	46bd      	mov	sp, r7
 8007272:	b004      	add	sp, #16
 8007274:	bd80      	pop	{r7, pc}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	bffdfff8 	.word	0xbffdfff8
 800727c:	40020000 	.word	0x40020000
 8007280:	ffff800f 	.word	0xffff800f
 8007284:	400200a8 	.word	0x400200a8

08007288 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e04a      	b.n	8007330 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2101      	movs	r1, #1
 80072a6:	438a      	bics	r2, r1
 80072a8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a22      	ldr	r2, [pc, #136]	; (8007338 <HAL_DMA_DeInit+0xb0>)
 80072b0:	4694      	mov	ip, r2
 80072b2:	4463      	add	r3, ip
 80072b4:	2114      	movs	r1, #20
 80072b6:	0018      	movs	r0, r3
 80072b8:	f7f8 ff2e 	bl	8000118 <__udivsi3>
 80072bc:	0003      	movs	r3, r0
 80072be:	009a      	lsls	r2, r3, #2
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a1d      	ldr	r2, [pc, #116]	; (800733c <HAL_DMA_DeInit+0xb4>)
 80072c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d6:	221c      	movs	r2, #28
 80072d8:	401a      	ands	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	2101      	movs	r1, #1
 80072e0:	4091      	lsls	r1, r2
 80072e2:	000a      	movs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80072e6:	4b16      	ldr	r3, [pc, #88]	; (8007340 <HAL_DMA_DeInit+0xb8>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ee:	211c      	movs	r1, #28
 80072f0:	400b      	ands	r3, r1
 80072f2:	210f      	movs	r1, #15
 80072f4:	4099      	lsls	r1, r3
 80072f6:	000b      	movs	r3, r1
 80072f8:	43d9      	mvns	r1, r3
 80072fa:	4b11      	ldr	r3, [pc, #68]	; (8007340 <HAL_DMA_DeInit+0xb8>)
 80072fc:	400a      	ands	r2, r1
 80072fe:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2225      	movs	r2, #37	; 0x25
 8007322:	2100      	movs	r1, #0
 8007324:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2224      	movs	r2, #36	; 0x24
 800732a:	2100      	movs	r1, #0
 800732c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	0018      	movs	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	b002      	add	sp, #8
 8007336:	bd80      	pop	{r7, pc}
 8007338:	bffdfff8 	.word	0xbffdfff8
 800733c:	40020000 	.word	0x40020000
 8007340:	400200a8 	.word	0x400200a8

08007344 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007352:	2317      	movs	r3, #23
 8007354:	18fb      	adds	r3, r7, r3
 8007356:	2200      	movs	r2, #0
 8007358:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2224      	movs	r2, #36	; 0x24
 800735e:	5c9b      	ldrb	r3, [r3, r2]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d101      	bne.n	8007368 <HAL_DMA_Start_IT+0x24>
 8007364:	2302      	movs	r3, #2
 8007366:	e04f      	b.n	8007408 <HAL_DMA_Start_IT+0xc4>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2224      	movs	r2, #36	; 0x24
 800736c:	2101      	movs	r1, #1
 800736e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2225      	movs	r2, #37	; 0x25
 8007374:	5c9b      	ldrb	r3, [r3, r2]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	d13a      	bne.n	80073f2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2225      	movs	r2, #37	; 0x25
 8007380:	2102      	movs	r1, #2
 8007382:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2101      	movs	r1, #1
 8007396:	438a      	bics	r2, r1
 8007398:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f96a 	bl	800767a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d008      	beq.n	80073c0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	210e      	movs	r1, #14
 80073ba:	430a      	orrs	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	e00f      	b.n	80073e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2104      	movs	r1, #4
 80073cc:	438a      	bics	r2, r1
 80073ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	210a      	movs	r1, #10
 80073dc:	430a      	orrs	r2, r1
 80073de:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2101      	movs	r1, #1
 80073ec:	430a      	orrs	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	e007      	b.n	8007402 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2224      	movs	r2, #36	; 0x24
 80073f6:	2100      	movs	r1, #0
 80073f8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80073fa:	2317      	movs	r3, #23
 80073fc:	18fb      	adds	r3, r7, r3
 80073fe:	2202      	movs	r2, #2
 8007400:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8007402:	2317      	movs	r3, #23
 8007404:	18fb      	adds	r3, r7, r3
 8007406:	781b      	ldrb	r3, [r3, #0]
}
 8007408:	0018      	movs	r0, r3
 800740a:	46bd      	mov	sp, r7
 800740c:	b006      	add	sp, #24
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007418:	230f      	movs	r3, #15
 800741a:	18fb      	adds	r3, r7, r3
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2225      	movs	r2, #37	; 0x25
 8007424:	5c9b      	ldrb	r3, [r3, r2]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d008      	beq.n	800743e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2204      	movs	r2, #4
 8007430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2224      	movs	r2, #36	; 0x24
 8007436:	2100      	movs	r1, #0
 8007438:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e024      	b.n	8007488 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	210e      	movs	r1, #14
 800744a:	438a      	bics	r2, r1
 800744c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2101      	movs	r1, #1
 800745a:	438a      	bics	r2, r1
 800745c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007462:	221c      	movs	r2, #28
 8007464:	401a      	ands	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	2101      	movs	r1, #1
 800746c:	4091      	lsls	r1, r2
 800746e:	000a      	movs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2225      	movs	r2, #37	; 0x25
 8007476:	2101      	movs	r1, #1
 8007478:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2224      	movs	r2, #36	; 0x24
 800747e:	2100      	movs	r1, #0
 8007480:	5499      	strb	r1, [r3, r2]

    return status;
 8007482:	230f      	movs	r3, #15
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b004      	add	sp, #16
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007498:	210f      	movs	r1, #15
 800749a:	187b      	adds	r3, r7, r1
 800749c:	2200      	movs	r2, #0
 800749e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2225      	movs	r2, #37	; 0x25
 80074a4:	5c9b      	ldrb	r3, [r3, r2]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d006      	beq.n	80074ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2204      	movs	r2, #4
 80074b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80074b2:	187b      	adds	r3, r7, r1
 80074b4:	2201      	movs	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	e02a      	b.n	8007510 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	210e      	movs	r1, #14
 80074c6:	438a      	bics	r2, r1
 80074c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2101      	movs	r1, #1
 80074d6:	438a      	bics	r2, r1
 80074d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074de:	221c      	movs	r2, #28
 80074e0:	401a      	ands	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	2101      	movs	r1, #1
 80074e8:	4091      	lsls	r1, r2
 80074ea:	000a      	movs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2225      	movs	r2, #37	; 0x25
 80074f2:	2101      	movs	r1, #1
 80074f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2224      	movs	r2, #36	; 0x24
 80074fa:	2100      	movs	r1, #0
 80074fc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	0010      	movs	r0, r2
 800750e:	4798      	blx	r3
    }
  }
  return status;
 8007510:	230f      	movs	r3, #15
 8007512:	18fb      	adds	r3, r7, r3
 8007514:	781b      	ldrb	r3, [r3, #0]
}
 8007516:	0018      	movs	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	b004      	add	sp, #16
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753a:	221c      	movs	r2, #28
 800753c:	4013      	ands	r3, r2
 800753e:	2204      	movs	r2, #4
 8007540:	409a      	lsls	r2, r3
 8007542:	0013      	movs	r3, r2
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4013      	ands	r3, r2
 8007548:	d026      	beq.n	8007598 <HAL_DMA_IRQHandler+0x7a>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2204      	movs	r2, #4
 800754e:	4013      	ands	r3, r2
 8007550:	d022      	beq.n	8007598 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2220      	movs	r2, #32
 800755a:	4013      	ands	r3, r2
 800755c:	d107      	bne.n	800756e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2104      	movs	r1, #4
 800756a:	438a      	bics	r2, r1
 800756c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	221c      	movs	r2, #28
 8007574:	401a      	ands	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	2104      	movs	r1, #4
 800757c:	4091      	lsls	r1, r2
 800757e:	000a      	movs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	2b00      	cmp	r3, #0
 8007588:	d100      	bne.n	800758c <HAL_DMA_IRQHandler+0x6e>
 800758a:	e071      	b.n	8007670 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	0010      	movs	r0, r2
 8007594:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8007596:	e06b      	b.n	8007670 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759c:	221c      	movs	r2, #28
 800759e:	4013      	ands	r3, r2
 80075a0:	2202      	movs	r2, #2
 80075a2:	409a      	lsls	r2, r3
 80075a4:	0013      	movs	r3, r2
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4013      	ands	r3, r2
 80075aa:	d02d      	beq.n	8007608 <HAL_DMA_IRQHandler+0xea>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2202      	movs	r2, #2
 80075b0:	4013      	ands	r3, r2
 80075b2:	d029      	beq.n	8007608 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2220      	movs	r2, #32
 80075bc:	4013      	ands	r3, r2
 80075be:	d10b      	bne.n	80075d8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	210a      	movs	r1, #10
 80075cc:	438a      	bics	r2, r1
 80075ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2225      	movs	r2, #37	; 0x25
 80075d4:	2101      	movs	r1, #1
 80075d6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075dc:	221c      	movs	r2, #28
 80075de:	401a      	ands	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	2102      	movs	r1, #2
 80075e6:	4091      	lsls	r1, r2
 80075e8:	000a      	movs	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2224      	movs	r2, #36	; 0x24
 80075f0:	2100      	movs	r1, #0
 80075f2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d039      	beq.n	8007670 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	0010      	movs	r0, r2
 8007604:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007606:	e033      	b.n	8007670 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760c:	221c      	movs	r2, #28
 800760e:	4013      	ands	r3, r2
 8007610:	2208      	movs	r2, #8
 8007612:	409a      	lsls	r2, r3
 8007614:	0013      	movs	r3, r2
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4013      	ands	r3, r2
 800761a:	d02a      	beq.n	8007672 <HAL_DMA_IRQHandler+0x154>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2208      	movs	r2, #8
 8007620:	4013      	ands	r3, r2
 8007622:	d026      	beq.n	8007672 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	210e      	movs	r1, #14
 8007630:	438a      	bics	r2, r1
 8007632:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007638:	221c      	movs	r2, #28
 800763a:	401a      	ands	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	2101      	movs	r1, #1
 8007642:	4091      	lsls	r1, r2
 8007644:	000a      	movs	r2, r1
 8007646:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2225      	movs	r2, #37	; 0x25
 8007652:	2101      	movs	r1, #1
 8007654:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2224      	movs	r2, #36	; 0x24
 800765a:	2100      	movs	r1, #0
 800765c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	0010      	movs	r0, r2
 800766e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007670:	46c0      	nop			; (mov r8, r8)
 8007672:	46c0      	nop			; (mov r8, r8)
}
 8007674:	46bd      	mov	sp, r7
 8007676:	b004      	add	sp, #16
 8007678:	bd80      	pop	{r7, pc}

0800767a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768c:	221c      	movs	r2, #28
 800768e:	401a      	ands	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	2101      	movs	r1, #1
 8007696:	4091      	lsls	r1, r2
 8007698:	000a      	movs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d108      	bne.n	80076be <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80076bc:	e007      	b.n	80076ce <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	60da      	str	r2, [r3, #12]
}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	46bd      	mov	sp, r7
 80076d2:	b004      	add	sp, #16
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	200b      	movs	r0, #11
 80076e2:	183b      	adds	r3, r7, r0
 80076e4:	1c0a      	adds	r2, r1, #0
 80076e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076e8:	2317      	movs	r3, #23
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 80076f0:	183b      	adds	r3, r7, r0
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d103      	bne.n	8007700 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	605a      	str	r2, [r3, #4]
      break;
 80076fe:	e004      	b.n	800770a <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 8007700:	2317      	movs	r3, #23
 8007702:	18fb      	adds	r3, r7, r3
 8007704:	2201      	movs	r2, #1
 8007706:	701a      	strb	r2, [r3, #0]
      break;
 8007708:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800770a:	2317      	movs	r3, #23
 800770c:	18fb      	adds	r3, r7, r3
 800770e:	781b      	ldrb	r3, [r3, #0]
}
 8007710:	0018      	movs	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	b006      	add	sp, #24
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e003      	b.n	8007734 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007732:	2300      	movs	r3, #0
  }
}
 8007734:	0018      	movs	r0, r3
 8007736:	46bd      	mov	sp, r7
 8007738:	b002      	add	sp, #8
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	221f      	movs	r2, #31
 800774a:	4013      	ands	r3, r2
 800774c:	2201      	movs	r2, #1
 800774e:	409a      	lsls	r2, r3
 8007750:	0013      	movs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8007754:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <HAL_EXTI_IRQHandler+0x44>)
 8007756:	695a      	ldr	r2, [r3, #20]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4013      	ands	r3, r2
 800775c:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d009      	beq.n	8007778 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <HAL_EXTI_IRQHandler+0x44>)
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	4798      	blx	r3
    }
  }
}
 8007778:	46c0      	nop			; (mov r8, r8)
 800777a:	46bd      	mov	sp, r7
 800777c:	b004      	add	sp, #16
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40010400 	.word	0x40010400

08007784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007796:	2300      	movs	r3, #0
 8007798:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800779a:	e155      	b.n	8007a48 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2101      	movs	r1, #1
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	4091      	lsls	r1, r2
 80077a6:	000a      	movs	r2, r1
 80077a8:	4013      	ands	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d100      	bne.n	80077b4 <HAL_GPIO_Init+0x30>
 80077b2:	e146      	b.n	8007a42 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d00b      	beq.n	80077d4 <HAL_GPIO_Init+0x50>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d007      	beq.n	80077d4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077c8:	2b11      	cmp	r3, #17
 80077ca:	d003      	beq.n	80077d4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	2b12      	cmp	r3, #18
 80077d2:	d130      	bne.n	8007836 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	2203      	movs	r2, #3
 80077e0:	409a      	lsls	r2, r3
 80077e2:	0013      	movs	r3, r2
 80077e4:	43da      	mvns	r2, r3
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	4013      	ands	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	409a      	lsls	r2, r3
 80077f6:	0013      	movs	r3, r2
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800780a:	2201      	movs	r2, #1
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	409a      	lsls	r2, r3
 8007810:	0013      	movs	r3, r2
 8007812:	43da      	mvns	r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	4013      	ands	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	091b      	lsrs	r3, r3, #4
 8007820:	2201      	movs	r2, #1
 8007822:	401a      	ands	r2, r3
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	409a      	lsls	r2, r3
 8007828:	0013      	movs	r3, r2
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	4313      	orrs	r3, r2
 800782e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	2203      	movs	r2, #3
 8007842:	409a      	lsls	r2, r3
 8007844:	0013      	movs	r3, r2
 8007846:	43da      	mvns	r2, r3
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	4013      	ands	r3, r2
 800784c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	409a      	lsls	r2, r3
 8007858:	0013      	movs	r3, r2
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	4313      	orrs	r3, r2
 800785e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d003      	beq.n	8007876 <HAL_GPIO_Init+0xf2>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2b12      	cmp	r3, #18
 8007874:	d123      	bne.n	80078be <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	08da      	lsrs	r2, r3, #3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3208      	adds	r2, #8
 800787e:	0092      	lsls	r2, r2, #2
 8007880:	58d3      	ldr	r3, [r2, r3]
 8007882:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	2207      	movs	r2, #7
 8007888:	4013      	ands	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	220f      	movs	r2, #15
 800788e:	409a      	lsls	r2, r3
 8007890:	0013      	movs	r3, r2
 8007892:	43da      	mvns	r2, r3
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	4013      	ands	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	691a      	ldr	r2, [r3, #16]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2107      	movs	r1, #7
 80078a2:	400b      	ands	r3, r1
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	409a      	lsls	r2, r3
 80078a8:	0013      	movs	r3, r2
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	08da      	lsrs	r2, r3, #3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3208      	adds	r2, #8
 80078b8:	0092      	lsls	r2, r2, #2
 80078ba:	6939      	ldr	r1, [r7, #16]
 80078bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	2203      	movs	r2, #3
 80078ca:	409a      	lsls	r2, r3
 80078cc:	0013      	movs	r3, r2
 80078ce:	43da      	mvns	r2, r3
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4013      	ands	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	2203      	movs	r2, #3
 80078dc:	401a      	ands	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	409a      	lsls	r2, r3
 80078e4:	0013      	movs	r3, r2
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	2380      	movs	r3, #128	; 0x80
 80078f8:	055b      	lsls	r3, r3, #21
 80078fa:	4013      	ands	r3, r2
 80078fc:	d100      	bne.n	8007900 <HAL_GPIO_Init+0x17c>
 80078fe:	e0a0      	b.n	8007a42 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007900:	4b57      	ldr	r3, [pc, #348]	; (8007a60 <HAL_GPIO_Init+0x2dc>)
 8007902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007904:	4b56      	ldr	r3, [pc, #344]	; (8007a60 <HAL_GPIO_Init+0x2dc>)
 8007906:	2101      	movs	r1, #1
 8007908:	430a      	orrs	r2, r1
 800790a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800790c:	4a55      	ldr	r2, [pc, #340]	; (8007a64 <HAL_GPIO_Init+0x2e0>)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	089b      	lsrs	r3, r3, #2
 8007912:	3302      	adds	r3, #2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	589b      	ldr	r3, [r3, r2]
 8007918:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2203      	movs	r2, #3
 800791e:	4013      	ands	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	220f      	movs	r2, #15
 8007924:	409a      	lsls	r2, r3
 8007926:	0013      	movs	r3, r2
 8007928:	43da      	mvns	r2, r3
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	4013      	ands	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	23a0      	movs	r3, #160	; 0xa0
 8007934:	05db      	lsls	r3, r3, #23
 8007936:	429a      	cmp	r2, r3
 8007938:	d01f      	beq.n	800797a <HAL_GPIO_Init+0x1f6>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a4a      	ldr	r2, [pc, #296]	; (8007a68 <HAL_GPIO_Init+0x2e4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d019      	beq.n	8007976 <HAL_GPIO_Init+0x1f2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a49      	ldr	r2, [pc, #292]	; (8007a6c <HAL_GPIO_Init+0x2e8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d013      	beq.n	8007972 <HAL_GPIO_Init+0x1ee>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a48      	ldr	r2, [pc, #288]	; (8007a70 <HAL_GPIO_Init+0x2ec>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00d      	beq.n	800796e <HAL_GPIO_Init+0x1ea>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a47      	ldr	r2, [pc, #284]	; (8007a74 <HAL_GPIO_Init+0x2f0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d007      	beq.n	800796a <HAL_GPIO_Init+0x1e6>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a46      	ldr	r2, [pc, #280]	; (8007a78 <HAL_GPIO_Init+0x2f4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d101      	bne.n	8007966 <HAL_GPIO_Init+0x1e2>
 8007962:	2305      	movs	r3, #5
 8007964:	e00a      	b.n	800797c <HAL_GPIO_Init+0x1f8>
 8007966:	2306      	movs	r3, #6
 8007968:	e008      	b.n	800797c <HAL_GPIO_Init+0x1f8>
 800796a:	2304      	movs	r3, #4
 800796c:	e006      	b.n	800797c <HAL_GPIO_Init+0x1f8>
 800796e:	2303      	movs	r3, #3
 8007970:	e004      	b.n	800797c <HAL_GPIO_Init+0x1f8>
 8007972:	2302      	movs	r3, #2
 8007974:	e002      	b.n	800797c <HAL_GPIO_Init+0x1f8>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <HAL_GPIO_Init+0x1f8>
 800797a:	2300      	movs	r3, #0
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	2103      	movs	r1, #3
 8007980:	400a      	ands	r2, r1
 8007982:	0092      	lsls	r2, r2, #2
 8007984:	4093      	lsls	r3, r2
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800798c:	4935      	ldr	r1, [pc, #212]	; (8007a64 <HAL_GPIO_Init+0x2e0>)
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	089b      	lsrs	r3, r3, #2
 8007992:	3302      	adds	r3, #2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800799a:	4b38      	ldr	r3, [pc, #224]	; (8007a7c <HAL_GPIO_Init+0x2f8>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	43da      	mvns	r2, r3
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4013      	ands	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	2380      	movs	r3, #128	; 0x80
 80079b0:	025b      	lsls	r3, r3, #9
 80079b2:	4013      	ands	r3, r2
 80079b4:	d003      	beq.n	80079be <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80079be:	4b2f      	ldr	r3, [pc, #188]	; (8007a7c <HAL_GPIO_Init+0x2f8>)
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80079c4:	4b2d      	ldr	r3, [pc, #180]	; (8007a7c <HAL_GPIO_Init+0x2f8>)
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	43da      	mvns	r2, r3
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	4013      	ands	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	2380      	movs	r3, #128	; 0x80
 80079da:	029b      	lsls	r3, r3, #10
 80079dc:	4013      	ands	r3, r2
 80079de:	d003      	beq.n	80079e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80079e8:	4b24      	ldr	r3, [pc, #144]	; (8007a7c <HAL_GPIO_Init+0x2f8>)
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079ee:	4b23      	ldr	r3, [pc, #140]	; (8007a7c <HAL_GPIO_Init+0x2f8>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	43da      	mvns	r2, r3
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	4013      	ands	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	2380      	movs	r3, #128	; 0x80
 8007a04:	035b      	lsls	r3, r3, #13
 8007a06:	4013      	ands	r3, r2
 8007a08:	d003      	beq.n	8007a12 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007a12:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <HAL_GPIO_Init+0x2f8>)
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007a18:	4b18      	ldr	r3, [pc, #96]	; (8007a7c <HAL_GPIO_Init+0x2f8>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	43da      	mvns	r2, r3
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	4013      	ands	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	2380      	movs	r3, #128	; 0x80
 8007a2e:	039b      	lsls	r3, r3, #14
 8007a30:	4013      	ands	r3, r2
 8007a32:	d003      	beq.n	8007a3c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <HAL_GPIO_Init+0x2f8>)
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	3301      	adds	r3, #1
 8007a46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	40da      	lsrs	r2, r3
 8007a50:	1e13      	subs	r3, r2, #0
 8007a52:	d000      	beq.n	8007a56 <HAL_GPIO_Init+0x2d2>
 8007a54:	e6a2      	b.n	800779c <HAL_GPIO_Init+0x18>
  }
}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	46c0      	nop			; (mov r8, r8)
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b006      	add	sp, #24
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40021000 	.word	0x40021000
 8007a64:	40010000 	.word	0x40010000
 8007a68:	50000400 	.word	0x50000400
 8007a6c:	50000800 	.word	0x50000800
 8007a70:	50000c00 	.word	0x50000c00
 8007a74:	50001000 	.word	0x50001000
 8007a78:	50001c00 	.word	0x50001c00
 8007a7c:	40010400 	.word	0x40010400

08007a80 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8007a96:	e0bc      	b.n	8007c12 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8007a98:	2201      	movs	r2, #1
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	409a      	lsls	r2, r3
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d100      	bne.n	8007aac <HAL_GPIO_DeInit+0x2c>
 8007aaa:	e0af      	b.n	8007c0c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8007aac:	4a5e      	ldr	r2, [pc, #376]	; (8007c28 <HAL_GPIO_DeInit+0x1a8>)
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	089b      	lsrs	r3, r3, #2
 8007ab2:	3302      	adds	r3, #2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	589b      	ldr	r3, [r3, r2]
 8007ab8:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2203      	movs	r2, #3
 8007abe:	4013      	ands	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	220f      	movs	r2, #15
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	23a0      	movs	r3, #160	; 0xa0
 8007ad0:	05db      	lsls	r3, r3, #23
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d01f      	beq.n	8007b16 <HAL_GPIO_DeInit+0x96>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a54      	ldr	r2, [pc, #336]	; (8007c2c <HAL_GPIO_DeInit+0x1ac>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d019      	beq.n	8007b12 <HAL_GPIO_DeInit+0x92>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a53      	ldr	r2, [pc, #332]	; (8007c30 <HAL_GPIO_DeInit+0x1b0>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <HAL_GPIO_DeInit+0x8e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a52      	ldr	r2, [pc, #328]	; (8007c34 <HAL_GPIO_DeInit+0x1b4>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00d      	beq.n	8007b0a <HAL_GPIO_DeInit+0x8a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a51      	ldr	r2, [pc, #324]	; (8007c38 <HAL_GPIO_DeInit+0x1b8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d007      	beq.n	8007b06 <HAL_GPIO_DeInit+0x86>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a50      	ldr	r2, [pc, #320]	; (8007c3c <HAL_GPIO_DeInit+0x1bc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d101      	bne.n	8007b02 <HAL_GPIO_DeInit+0x82>
 8007afe:	2305      	movs	r3, #5
 8007b00:	e00a      	b.n	8007b18 <HAL_GPIO_DeInit+0x98>
 8007b02:	2306      	movs	r3, #6
 8007b04:	e008      	b.n	8007b18 <HAL_GPIO_DeInit+0x98>
 8007b06:	2304      	movs	r3, #4
 8007b08:	e006      	b.n	8007b18 <HAL_GPIO_DeInit+0x98>
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e004      	b.n	8007b18 <HAL_GPIO_DeInit+0x98>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e002      	b.n	8007b18 <HAL_GPIO_DeInit+0x98>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <HAL_GPIO_DeInit+0x98>
 8007b16:	2300      	movs	r3, #0
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	2103      	movs	r1, #3
 8007b1c:	400a      	ands	r2, r1
 8007b1e:	0092      	lsls	r2, r2, #2
 8007b20:	4093      	lsls	r3, r2
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d132      	bne.n	8007b8e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b28:	4b45      	ldr	r3, [pc, #276]	; (8007c40 <HAL_GPIO_DeInit+0x1c0>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	43d9      	mvns	r1, r3
 8007b30:	4b43      	ldr	r3, [pc, #268]	; (8007c40 <HAL_GPIO_DeInit+0x1c0>)
 8007b32:	400a      	ands	r2, r1
 8007b34:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b36:	4b42      	ldr	r3, [pc, #264]	; (8007c40 <HAL_GPIO_DeInit+0x1c0>)
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	43d9      	mvns	r1, r3
 8007b3e:	4b40      	ldr	r3, [pc, #256]	; (8007c40 <HAL_GPIO_DeInit+0x1c0>)
 8007b40:	400a      	ands	r2, r1
 8007b42:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b44:	4b3e      	ldr	r3, [pc, #248]	; (8007c40 <HAL_GPIO_DeInit+0x1c0>)
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	43d9      	mvns	r1, r3
 8007b4c:	4b3c      	ldr	r3, [pc, #240]	; (8007c40 <HAL_GPIO_DeInit+0x1c0>)
 8007b4e:	400a      	ands	r2, r1
 8007b50:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b52:	4b3b      	ldr	r3, [pc, #236]	; (8007c40 <HAL_GPIO_DeInit+0x1c0>)
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	43d9      	mvns	r1, r3
 8007b5a:	4b39      	ldr	r3, [pc, #228]	; (8007c40 <HAL_GPIO_DeInit+0x1c0>)
 8007b5c:	400a      	ands	r2, r1
 8007b5e:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2203      	movs	r2, #3
 8007b64:	4013      	ands	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	220f      	movs	r2, #15
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	0013      	movs	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007b70:	4a2d      	ldr	r2, [pc, #180]	; (8007c28 <HAL_GPIO_DeInit+0x1a8>)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	089b      	lsrs	r3, r3, #2
 8007b76:	3302      	adds	r3, #2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	589a      	ldr	r2, [r3, r2]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	43d9      	mvns	r1, r3
 8007b80:	4829      	ldr	r0, [pc, #164]	; (8007c28 <HAL_GPIO_DeInit+0x1a8>)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	089b      	lsrs	r3, r3, #2
 8007b86:	400a      	ands	r2, r1
 8007b88:	3302      	adds	r3, #2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	2103      	movs	r1, #3
 8007b98:	4099      	lsls	r1, r3
 8007b9a:	000b      	movs	r3, r1
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	08da      	lsrs	r2, r3, #3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3208      	adds	r2, #8
 8007baa:	0092      	lsls	r2, r2, #2
 8007bac:	58d3      	ldr	r3, [r2, r3]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	2107      	movs	r1, #7
 8007bb2:	400a      	ands	r2, r1
 8007bb4:	0092      	lsls	r2, r2, #2
 8007bb6:	210f      	movs	r1, #15
 8007bb8:	4091      	lsls	r1, r2
 8007bba:	000a      	movs	r2, r1
 8007bbc:	43d1      	mvns	r1, r2
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	08d2      	lsrs	r2, r2, #3
 8007bc2:	4019      	ands	r1, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3208      	adds	r2, #8
 8007bc8:	0092      	lsls	r2, r2, #2
 8007bca:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	0052      	lsls	r2, r2, #1
 8007bd4:	2103      	movs	r1, #3
 8007bd6:	4091      	lsls	r1, r2
 8007bd8:	000a      	movs	r2, r1
 8007bda:	43d2      	mvns	r2, r2
 8007bdc:	401a      	ands	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2101      	movs	r1, #1
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4091      	lsls	r1, r2
 8007bec:	000a      	movs	r2, r1
 8007bee:	43d2      	mvns	r2, r2
 8007bf0:	401a      	ands	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	0052      	lsls	r2, r2, #1
 8007bfe:	2103      	movs	r1, #3
 8007c00:	4091      	lsls	r1, r2
 8007c02:	000a      	movs	r2, r1
 8007c04:	43d2      	mvns	r2, r2
 8007c06:	401a      	ands	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	609a      	str	r2, [r3, #8]
    }
    position++;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	40da      	lsrs	r2, r3
 8007c18:	1e13      	subs	r3, r2, #0
 8007c1a:	d000      	beq.n	8007c1e <HAL_GPIO_DeInit+0x19e>
 8007c1c:	e73c      	b.n	8007a98 <HAL_GPIO_DeInit+0x18>
  }
}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	46c0      	nop			; (mov r8, r8)
 8007c22:	46bd      	mov	sp, r7
 8007c24:	b006      	add	sp, #24
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	40010000 	.word	0x40010000
 8007c2c:	50000400 	.word	0x50000400
 8007c30:	50000800 	.word	0x50000800
 8007c34:	50000c00 	.word	0x50000c00
 8007c38:	50001000 	.word	0x50001000
 8007c3c:	50001c00 	.word	0x50001c00
 8007c40:	40010400 	.word	0x40010400

08007c44 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	000a      	movs	r2, r1
 8007c4e:	1cbb      	adds	r3, r7, #2
 8007c50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	1cba      	adds	r2, r7, #2
 8007c58:	8812      	ldrh	r2, [r2, #0]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	d004      	beq.n	8007c68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007c5e:	230f      	movs	r3, #15
 8007c60:	18fb      	adds	r3, r7, r3
 8007c62:	2201      	movs	r2, #1
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	e003      	b.n	8007c70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c68:	230f      	movs	r3, #15
 8007c6a:	18fb      	adds	r3, r7, r3
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007c70:	230f      	movs	r3, #15
 8007c72:	18fb      	adds	r3, r7, r3
 8007c74:	781b      	ldrb	r3, [r3, #0]
}
 8007c76:	0018      	movs	r0, r3
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	b004      	add	sp, #16
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	0008      	movs	r0, r1
 8007c88:	0011      	movs	r1, r2
 8007c8a:	1cbb      	adds	r3, r7, #2
 8007c8c:	1c02      	adds	r2, r0, #0
 8007c8e:	801a      	strh	r2, [r3, #0]
 8007c90:	1c7b      	adds	r3, r7, #1
 8007c92:	1c0a      	adds	r2, r1, #0
 8007c94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c96:	1c7b      	adds	r3, r7, #1
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d004      	beq.n	8007ca8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c9e:	1cbb      	adds	r3, r7, #2
 8007ca0:	881a      	ldrh	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007ca6:	e003      	b.n	8007cb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007ca8:	1cbb      	adds	r3, r7, #2
 8007caa:	881a      	ldrh	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007cb0:	46c0      	nop			; (mov r8, r8)
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	b002      	add	sp, #8
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	000a      	movs	r2, r1
 8007cc2:	1cbb      	adds	r3, r7, #2
 8007cc4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ccc:	1cbb      	adds	r3, r7, #2
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	041a      	lsls	r2, r3, #16
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	1cb9      	adds	r1, r7, #2
 8007cdc:	8809      	ldrh	r1, [r1, #0]
 8007cde:	400b      	ands	r3, r1
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	619a      	str	r2, [r3, #24]
}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	b004      	add	sp, #16
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e082      	b.n	8007e08 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2241      	movs	r2, #65	; 0x41
 8007d06:	5c9b      	ldrb	r3, [r3, r2]
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d107      	bne.n	8007d1e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2240      	movs	r2, #64	; 0x40
 8007d12:	2100      	movs	r1, #0
 8007d14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f000 f87f 	bl	8007e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2241      	movs	r2, #65	; 0x41
 8007d22:	2124      	movs	r1, #36	; 0x24
 8007d24:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2101      	movs	r1, #1
 8007d32:	438a      	bics	r2, r1
 8007d34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4934      	ldr	r1, [pc, #208]	; (8007e10 <HAL_I2C_Init+0x120>)
 8007d40:	400a      	ands	r2, r1
 8007d42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4931      	ldr	r1, [pc, #196]	; (8007e14 <HAL_I2C_Init+0x124>)
 8007d50:	400a      	ands	r2, r1
 8007d52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d108      	bne.n	8007d6e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2180      	movs	r1, #128	; 0x80
 8007d66:	0209      	lsls	r1, r1, #8
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	609a      	str	r2, [r3, #8]
 8007d6c:	e007      	b.n	8007d7e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689a      	ldr	r2, [r3, #8]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2184      	movs	r1, #132	; 0x84
 8007d78:	0209      	lsls	r1, r1, #8
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d104      	bne.n	8007d90 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2280      	movs	r2, #128	; 0x80
 8007d8c:	0112      	lsls	r2, r2, #4
 8007d8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	491f      	ldr	r1, [pc, #124]	; (8007e18 <HAL_I2C_Init+0x128>)
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	491a      	ldr	r1, [pc, #104]	; (8007e14 <HAL_I2C_Init+0x124>)
 8007dac:	400a      	ands	r2, r1
 8007dae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691a      	ldr	r2, [r3, #16]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	431a      	orrs	r2, r3
 8007dba:	0011      	movs	r1, r2
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	021a      	lsls	r2, r3, #8
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69d9      	ldr	r1, [r3, #28]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1a      	ldr	r2, [r3, #32]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2101      	movs	r1, #1
 8007de6:	430a      	orrs	r2, r1
 8007de8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2241      	movs	r2, #65	; 0x41
 8007df4:	2120      	movs	r1, #32
 8007df6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2242      	movs	r2, #66	; 0x42
 8007e02:	2100      	movs	r1, #0
 8007e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	0018      	movs	r0, r3
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	f0ffffff 	.word	0xf0ffffff
 8007e14:	ffff7fff 	.word	0xffff7fff
 8007e18:	02008000 	.word	0x02008000

08007e1c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007e24:	46c0      	nop			; (mov r8, r8)
 8007e26:	46bd      	mov	sp, r7
 8007e28:	b002      	add	sp, #8
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e2c:	b590      	push	{r4, r7, lr}
 8007e2e:	b089      	sub	sp, #36	; 0x24
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	000c      	movs	r4, r1
 8007e36:	0010      	movs	r0, r2
 8007e38:	0019      	movs	r1, r3
 8007e3a:	230a      	movs	r3, #10
 8007e3c:	18fb      	adds	r3, r7, r3
 8007e3e:	1c22      	adds	r2, r4, #0
 8007e40:	801a      	strh	r2, [r3, #0]
 8007e42:	2308      	movs	r3, #8
 8007e44:	18fb      	adds	r3, r7, r3
 8007e46:	1c02      	adds	r2, r0, #0
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	1dbb      	adds	r3, r7, #6
 8007e4c:	1c0a      	adds	r2, r1, #0
 8007e4e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2241      	movs	r2, #65	; 0x41
 8007e54:	5c9b      	ldrb	r3, [r3, r2]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	d000      	beq.n	8007e5e <HAL_I2C_Mem_Write+0x32>
 8007e5c:	e10c      	b.n	8008078 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <HAL_I2C_Mem_Write+0x42>
 8007e64:	232c      	movs	r3, #44	; 0x2c
 8007e66:	18fb      	adds	r3, r7, r3
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d105      	bne.n	8007e7a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2280      	movs	r2, #128	; 0x80
 8007e72:	0092      	lsls	r2, r2, #2
 8007e74:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e0ff      	b.n	800807a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2240      	movs	r2, #64	; 0x40
 8007e7e:	5c9b      	ldrb	r3, [r3, r2]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_I2C_Mem_Write+0x5c>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e0f8      	b.n	800807a <HAL_I2C_Mem_Write+0x24e>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2240      	movs	r2, #64	; 0x40
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e90:	f7fd f8f1 	bl	8005076 <HAL_GetTick>
 8007e94:	0003      	movs	r3, r0
 8007e96:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e98:	2380      	movs	r3, #128	; 0x80
 8007e9a:	0219      	lsls	r1, r3, #8
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	2319      	movs	r3, #25
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f000 fb17 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 8007eaa:	1e03      	subs	r3, r0, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e0e3      	b.n	800807a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2241      	movs	r2, #65	; 0x41
 8007eb6:	2121      	movs	r1, #33	; 0x21
 8007eb8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2242      	movs	r2, #66	; 0x42
 8007ebe:	2140      	movs	r1, #64	; 0x40
 8007ec0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	222c      	movs	r2, #44	; 0x2c
 8007ed2:	18ba      	adds	r2, r7, r2
 8007ed4:	8812      	ldrh	r2, [r2, #0]
 8007ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ede:	1dbb      	adds	r3, r7, #6
 8007ee0:	881c      	ldrh	r4, [r3, #0]
 8007ee2:	2308      	movs	r3, #8
 8007ee4:	18fb      	adds	r3, r7, r3
 8007ee6:	881a      	ldrh	r2, [r3, #0]
 8007ee8:	230a      	movs	r3, #10
 8007eea:	18fb      	adds	r3, r7, r3
 8007eec:	8819      	ldrh	r1, [r3, #0]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	9301      	str	r3, [sp, #4]
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	0023      	movs	r3, r4
 8007efa:	f000 fa05 	bl	8008308 <I2C_RequestMemoryWrite>
 8007efe:	1e03      	subs	r3, r0, #0
 8007f00:	d005      	beq.n	8007f0e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2240      	movs	r2, #64	; 0x40
 8007f06:	2100      	movs	r1, #0
 8007f08:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e0b5      	b.n	800807a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	2bff      	cmp	r3, #255	; 0xff
 8007f16:	d911      	bls.n	8007f3c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	22ff      	movs	r2, #255	; 0xff
 8007f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	2380      	movs	r3, #128	; 0x80
 8007f26:	045c      	lsls	r4, r3, #17
 8007f28:	230a      	movs	r3, #10
 8007f2a:	18fb      	adds	r3, r7, r3
 8007f2c:	8819      	ldrh	r1, [r3, #0]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	2300      	movs	r3, #0
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	0023      	movs	r3, r4
 8007f36:	f000 fbef 	bl	8008718 <I2C_TransferConfig>
 8007f3a:	e012      	b.n	8007f62 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	2380      	movs	r3, #128	; 0x80
 8007f4e:	049c      	lsls	r4, r3, #18
 8007f50:	230a      	movs	r3, #10
 8007f52:	18fb      	adds	r3, r7, r3
 8007f54:	8819      	ldrh	r1, [r3, #0]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	0023      	movs	r3, r4
 8007f5e:	f000 fbdb 	bl	8008718 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	0018      	movs	r0, r3
 8007f6a:	f000 faf4 	bl	8008556 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f6e:	1e03      	subs	r3, r0, #0
 8007f70:	d001      	beq.n	8007f76 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e081      	b.n	800807a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d03a      	beq.n	8008026 <HAL_I2C_Mem_Write+0x1fa>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d136      	bne.n	8008026 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	0013      	movs	r3, r2
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2180      	movs	r1, #128	; 0x80
 8007fc6:	f000 fa87 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 8007fca:	1e03      	subs	r3, r0, #0
 8007fcc:	d001      	beq.n	8007fd2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e053      	b.n	800807a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2bff      	cmp	r3, #255	; 0xff
 8007fda:	d911      	bls.n	8008000 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	22ff      	movs	r2, #255	; 0xff
 8007fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	2380      	movs	r3, #128	; 0x80
 8007fea:	045c      	lsls	r4, r3, #17
 8007fec:	230a      	movs	r3, #10
 8007fee:	18fb      	adds	r3, r7, r3
 8007ff0:	8819      	ldrh	r1, [r3, #0]
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	0023      	movs	r3, r4
 8007ffa:	f000 fb8d 	bl	8008718 <I2C_TransferConfig>
 8007ffe:	e012      	b.n	8008026 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800e:	b2da      	uxtb	r2, r3
 8008010:	2380      	movs	r3, #128	; 0x80
 8008012:	049c      	lsls	r4, r3, #18
 8008014:	230a      	movs	r3, #10
 8008016:	18fb      	adds	r3, r7, r3
 8008018:	8819      	ldrh	r1, [r3, #0]
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	2300      	movs	r3, #0
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	0023      	movs	r3, r4
 8008022:	f000 fb79 	bl	8008718 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802a:	b29b      	uxth	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	d198      	bne.n	8007f62 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	0018      	movs	r0, r3
 8008038:	f000 facc 	bl	80085d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800803c:	1e03      	subs	r3, r0, #0
 800803e:	d001      	beq.n	8008044 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e01a      	b.n	800807a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2220      	movs	r2, #32
 800804a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	490b      	ldr	r1, [pc, #44]	; (8008084 <HAL_I2C_Mem_Write+0x258>)
 8008058:	400a      	ands	r2, r1
 800805a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2241      	movs	r2, #65	; 0x41
 8008060:	2120      	movs	r1, #32
 8008062:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2242      	movs	r2, #66	; 0x42
 8008068:	2100      	movs	r1, #0
 800806a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2240      	movs	r2, #64	; 0x40
 8008070:	2100      	movs	r1, #0
 8008072:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	e000      	b.n	800807a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8008078:	2302      	movs	r3, #2
  }
}
 800807a:	0018      	movs	r0, r3
 800807c:	46bd      	mov	sp, r7
 800807e:	b007      	add	sp, #28
 8008080:	bd90      	pop	{r4, r7, pc}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	fe00e800 	.word	0xfe00e800

08008088 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008088:	b590      	push	{r4, r7, lr}
 800808a:	b089      	sub	sp, #36	; 0x24
 800808c:	af02      	add	r7, sp, #8
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	000c      	movs	r4, r1
 8008092:	0010      	movs	r0, r2
 8008094:	0019      	movs	r1, r3
 8008096:	230a      	movs	r3, #10
 8008098:	18fb      	adds	r3, r7, r3
 800809a:	1c22      	adds	r2, r4, #0
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	2308      	movs	r3, #8
 80080a0:	18fb      	adds	r3, r7, r3
 80080a2:	1c02      	adds	r2, r0, #0
 80080a4:	801a      	strh	r2, [r3, #0]
 80080a6:	1dbb      	adds	r3, r7, #6
 80080a8:	1c0a      	adds	r2, r1, #0
 80080aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2241      	movs	r2, #65	; 0x41
 80080b0:	5c9b      	ldrb	r3, [r3, r2]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d000      	beq.n	80080ba <HAL_I2C_Mem_Read+0x32>
 80080b8:	e110      	b.n	80082dc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d004      	beq.n	80080ca <HAL_I2C_Mem_Read+0x42>
 80080c0:	232c      	movs	r3, #44	; 0x2c
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2280      	movs	r2, #128	; 0x80
 80080ce:	0092      	lsls	r2, r2, #2
 80080d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e103      	b.n	80082de <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2240      	movs	r2, #64	; 0x40
 80080da:	5c9b      	ldrb	r3, [r3, r2]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d101      	bne.n	80080e4 <HAL_I2C_Mem_Read+0x5c>
 80080e0:	2302      	movs	r3, #2
 80080e2:	e0fc      	b.n	80082de <HAL_I2C_Mem_Read+0x256>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2240      	movs	r2, #64	; 0x40
 80080e8:	2101      	movs	r1, #1
 80080ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080ec:	f7fc ffc3 	bl	8005076 <HAL_GetTick>
 80080f0:	0003      	movs	r3, r0
 80080f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080f4:	2380      	movs	r3, #128	; 0x80
 80080f6:	0219      	lsls	r1, r3, #8
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	2319      	movs	r3, #25
 8008100:	2201      	movs	r2, #1
 8008102:	f000 f9e9 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 8008106:	1e03      	subs	r3, r0, #0
 8008108:	d001      	beq.n	800810e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e0e7      	b.n	80082de <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2241      	movs	r2, #65	; 0x41
 8008112:	2122      	movs	r1, #34	; 0x22
 8008114:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2242      	movs	r2, #66	; 0x42
 800811a:	2140      	movs	r1, #64	; 0x40
 800811c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	222c      	movs	r2, #44	; 0x2c
 800812e:	18ba      	adds	r2, r7, r2
 8008130:	8812      	ldrh	r2, [r2, #0]
 8008132:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800813a:	1dbb      	adds	r3, r7, #6
 800813c:	881c      	ldrh	r4, [r3, #0]
 800813e:	2308      	movs	r3, #8
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	881a      	ldrh	r2, [r3, #0]
 8008144:	230a      	movs	r3, #10
 8008146:	18fb      	adds	r3, r7, r3
 8008148:	8819      	ldrh	r1, [r3, #0]
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	0023      	movs	r3, r4
 8008156:	f000 f93b 	bl	80083d0 <I2C_RequestMemoryRead>
 800815a:	1e03      	subs	r3, r0, #0
 800815c:	d005      	beq.n	800816a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2240      	movs	r2, #64	; 0x40
 8008162:	2100      	movs	r1, #0
 8008164:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e0b9      	b.n	80082de <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816e:	b29b      	uxth	r3, r3
 8008170:	2bff      	cmp	r3, #255	; 0xff
 8008172:	d911      	bls.n	8008198 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	22ff      	movs	r2, #255	; 0xff
 8008178:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800817e:	b2da      	uxtb	r2, r3
 8008180:	2380      	movs	r3, #128	; 0x80
 8008182:	045c      	lsls	r4, r3, #17
 8008184:	230a      	movs	r3, #10
 8008186:	18fb      	adds	r3, r7, r3
 8008188:	8819      	ldrh	r1, [r3, #0]
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	4b56      	ldr	r3, [pc, #344]	; (80082e8 <HAL_I2C_Mem_Read+0x260>)
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	0023      	movs	r3, r4
 8008192:	f000 fac1 	bl	8008718 <I2C_TransferConfig>
 8008196:	e012      	b.n	80081be <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800819c:	b29a      	uxth	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	2380      	movs	r3, #128	; 0x80
 80081aa:	049c      	lsls	r4, r3, #18
 80081ac:	230a      	movs	r3, #10
 80081ae:	18fb      	adds	r3, r7, r3
 80081b0:	8819      	ldrh	r1, [r3, #0]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	4b4c      	ldr	r3, [pc, #304]	; (80082e8 <HAL_I2C_Mem_Read+0x260>)
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	0023      	movs	r3, r4
 80081ba:	f000 faad 	bl	8008718 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80081be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	0013      	movs	r3, r2
 80081c8:	2200      	movs	r2, #0
 80081ca:	2104      	movs	r1, #4
 80081cc:	f000 f984 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 80081d0:	1e03      	subs	r3, r0, #0
 80081d2:	d001      	beq.n	80081d8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e082      	b.n	80082de <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f4:	3b01      	subs	r3, #1
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008200:	b29b      	uxth	r3, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	b29a      	uxth	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800820e:	b29b      	uxth	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d03a      	beq.n	800828a <HAL_I2C_Mem_Read+0x202>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008218:	2b00      	cmp	r3, #0
 800821a:	d136      	bne.n	800828a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800821c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	0013      	movs	r3, r2
 8008226:	2200      	movs	r2, #0
 8008228:	2180      	movs	r1, #128	; 0x80
 800822a:	f000 f955 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 800822e:	1e03      	subs	r3, r0, #0
 8008230:	d001      	beq.n	8008236 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e053      	b.n	80082de <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800823a:	b29b      	uxth	r3, r3
 800823c:	2bff      	cmp	r3, #255	; 0xff
 800823e:	d911      	bls.n	8008264 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	22ff      	movs	r2, #255	; 0xff
 8008244:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800824a:	b2da      	uxtb	r2, r3
 800824c:	2380      	movs	r3, #128	; 0x80
 800824e:	045c      	lsls	r4, r3, #17
 8008250:	230a      	movs	r3, #10
 8008252:	18fb      	adds	r3, r7, r3
 8008254:	8819      	ldrh	r1, [r3, #0]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	2300      	movs	r3, #0
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	0023      	movs	r3, r4
 800825e:	f000 fa5b 	bl	8008718 <I2C_TransferConfig>
 8008262:	e012      	b.n	800828a <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008272:	b2da      	uxtb	r2, r3
 8008274:	2380      	movs	r3, #128	; 0x80
 8008276:	049c      	lsls	r4, r3, #18
 8008278:	230a      	movs	r3, #10
 800827a:	18fb      	adds	r3, r7, r3
 800827c:	8819      	ldrh	r1, [r3, #0]
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	2300      	movs	r3, #0
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	0023      	movs	r3, r4
 8008286:	f000 fa47 	bl	8008718 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d194      	bne.n	80081be <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	0018      	movs	r0, r3
 800829c:	f000 f99a 	bl	80085d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082a0:	1e03      	subs	r3, r0, #0
 80082a2:	d001      	beq.n	80082a8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e01a      	b.n	80082de <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2220      	movs	r2, #32
 80082ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	490c      	ldr	r1, [pc, #48]	; (80082ec <HAL_I2C_Mem_Read+0x264>)
 80082bc:	400a      	ands	r2, r1
 80082be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2241      	movs	r2, #65	; 0x41
 80082c4:	2120      	movs	r1, #32
 80082c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2242      	movs	r2, #66	; 0x42
 80082cc:	2100      	movs	r1, #0
 80082ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2240      	movs	r2, #64	; 0x40
 80082d4:	2100      	movs	r1, #0
 80082d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	e000      	b.n	80082de <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80082dc:	2302      	movs	r3, #2
  }
}
 80082de:	0018      	movs	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	b007      	add	sp, #28
 80082e4:	bd90      	pop	{r4, r7, pc}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	80002400 	.word	0x80002400
 80082ec:	fe00e800 	.word	0xfe00e800

080082f0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2241      	movs	r2, #65	; 0x41
 80082fc:	5c9b      	ldrb	r3, [r3, r2]
 80082fe:	b2db      	uxtb	r3, r3
}
 8008300:	0018      	movs	r0, r3
 8008302:	46bd      	mov	sp, r7
 8008304:	b002      	add	sp, #8
 8008306:	bd80      	pop	{r7, pc}

08008308 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008308:	b5b0      	push	{r4, r5, r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af02      	add	r7, sp, #8
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	000c      	movs	r4, r1
 8008312:	0010      	movs	r0, r2
 8008314:	0019      	movs	r1, r3
 8008316:	250a      	movs	r5, #10
 8008318:	197b      	adds	r3, r7, r5
 800831a:	1c22      	adds	r2, r4, #0
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	2308      	movs	r3, #8
 8008320:	18fb      	adds	r3, r7, r3
 8008322:	1c02      	adds	r2, r0, #0
 8008324:	801a      	strh	r2, [r3, #0]
 8008326:	1dbb      	adds	r3, r7, #6
 8008328:	1c0a      	adds	r2, r1, #0
 800832a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800832c:	1dbb      	adds	r3, r7, #6
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b2da      	uxtb	r2, r3
 8008332:	2380      	movs	r3, #128	; 0x80
 8008334:	045c      	lsls	r4, r3, #17
 8008336:	197b      	adds	r3, r7, r5
 8008338:	8819      	ldrh	r1, [r3, #0]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	4b23      	ldr	r3, [pc, #140]	; (80083cc <I2C_RequestMemoryWrite+0xc4>)
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	0023      	movs	r3, r4
 8008342:	f000 f9e9 	bl	8008718 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008348:	6a39      	ldr	r1, [r7, #32]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	0018      	movs	r0, r3
 800834e:	f000 f902 	bl	8008556 <I2C_WaitOnTXISFlagUntilTimeout>
 8008352:	1e03      	subs	r3, r0, #0
 8008354:	d001      	beq.n	800835a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e033      	b.n	80083c2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800835a:	1dbb      	adds	r3, r7, #6
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d107      	bne.n	8008372 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008362:	2308      	movs	r3, #8
 8008364:	18fb      	adds	r3, r7, r3
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b2da      	uxtb	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	629a      	str	r2, [r3, #40]	; 0x28
 8008370:	e019      	b.n	80083a6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008372:	2308      	movs	r3, #8
 8008374:	18fb      	adds	r3, r7, r3
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	0a1b      	lsrs	r3, r3, #8
 800837a:	b29b      	uxth	r3, r3
 800837c:	b2da      	uxtb	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008386:	6a39      	ldr	r1, [r7, #32]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	0018      	movs	r0, r3
 800838c:	f000 f8e3 	bl	8008556 <I2C_WaitOnTXISFlagUntilTimeout>
 8008390:	1e03      	subs	r3, r0, #0
 8008392:	d001      	beq.n	8008398 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e014      	b.n	80083c2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008398:	2308      	movs	r3, #8
 800839a:	18fb      	adds	r3, r7, r3
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80083a6:	6a3a      	ldr	r2, [r7, #32]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	0013      	movs	r3, r2
 80083b0:	2200      	movs	r2, #0
 80083b2:	2180      	movs	r1, #128	; 0x80
 80083b4:	f000 f890 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 80083b8:	1e03      	subs	r3, r0, #0
 80083ba:	d001      	beq.n	80083c0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e000      	b.n	80083c2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	0018      	movs	r0, r3
 80083c4:	46bd      	mov	sp, r7
 80083c6:	b004      	add	sp, #16
 80083c8:	bdb0      	pop	{r4, r5, r7, pc}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	80002000 	.word	0x80002000

080083d0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80083d0:	b5b0      	push	{r4, r5, r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af02      	add	r7, sp, #8
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	000c      	movs	r4, r1
 80083da:	0010      	movs	r0, r2
 80083dc:	0019      	movs	r1, r3
 80083de:	250a      	movs	r5, #10
 80083e0:	197b      	adds	r3, r7, r5
 80083e2:	1c22      	adds	r2, r4, #0
 80083e4:	801a      	strh	r2, [r3, #0]
 80083e6:	2308      	movs	r3, #8
 80083e8:	18fb      	adds	r3, r7, r3
 80083ea:	1c02      	adds	r2, r0, #0
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	1dbb      	adds	r3, r7, #6
 80083f0:	1c0a      	adds	r2, r1, #0
 80083f2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80083f4:	1dbb      	adds	r3, r7, #6
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	197b      	adds	r3, r7, r5
 80083fc:	8819      	ldrh	r1, [r3, #0]
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	4b23      	ldr	r3, [pc, #140]	; (8008490 <I2C_RequestMemoryRead+0xc0>)
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	2300      	movs	r3, #0
 8008406:	f000 f987 	bl	8008718 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800840a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840c:	6a39      	ldr	r1, [r7, #32]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	0018      	movs	r0, r3
 8008412:	f000 f8a0 	bl	8008556 <I2C_WaitOnTXISFlagUntilTimeout>
 8008416:	1e03      	subs	r3, r0, #0
 8008418:	d001      	beq.n	800841e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e033      	b.n	8008486 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800841e:	1dbb      	adds	r3, r7, #6
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d107      	bne.n	8008436 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008426:	2308      	movs	r3, #8
 8008428:	18fb      	adds	r3, r7, r3
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b2da      	uxtb	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	629a      	str	r2, [r3, #40]	; 0x28
 8008434:	e019      	b.n	800846a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008436:	2308      	movs	r3, #8
 8008438:	18fb      	adds	r3, r7, r3
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	0a1b      	lsrs	r3, r3, #8
 800843e:	b29b      	uxth	r3, r3
 8008440:	b2da      	uxtb	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800844a:	6a39      	ldr	r1, [r7, #32]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	0018      	movs	r0, r3
 8008450:	f000 f881 	bl	8008556 <I2C_WaitOnTXISFlagUntilTimeout>
 8008454:	1e03      	subs	r3, r0, #0
 8008456:	d001      	beq.n	800845c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e014      	b.n	8008486 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800845c:	2308      	movs	r3, #8
 800845e:	18fb      	adds	r3, r7, r3
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b2da      	uxtb	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800846a:	6a3a      	ldr	r2, [r7, #32]
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	0013      	movs	r3, r2
 8008474:	2200      	movs	r2, #0
 8008476:	2140      	movs	r1, #64	; 0x40
 8008478:	f000 f82e 	bl	80084d8 <I2C_WaitOnFlagUntilTimeout>
 800847c:	1e03      	subs	r3, r0, #0
 800847e:	d001      	beq.n	8008484 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e000      	b.n	8008486 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	0018      	movs	r0, r3
 8008488:	46bd      	mov	sp, r7
 800848a:	b004      	add	sp, #16
 800848c:	bdb0      	pop	{r4, r5, r7, pc}
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	80002000 	.word	0x80002000

08008494 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	2202      	movs	r2, #2
 80084a4:	4013      	ands	r3, r2
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d103      	bne.n	80084b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2200      	movs	r2, #0
 80084b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	2201      	movs	r2, #1
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d007      	beq.n	80084d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2101      	movs	r1, #1
 80084cc:	430a      	orrs	r2, r1
 80084ce:	619a      	str	r2, [r3, #24]
  }
}
 80084d0:	46c0      	nop			; (mov r8, r8)
 80084d2:	46bd      	mov	sp, r7
 80084d4:	b002      	add	sp, #8
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	1dfb      	adds	r3, r7, #7
 80084e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084e8:	e021      	b.n	800852e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	3301      	adds	r3, #1
 80084ee:	d01e      	beq.n	800852e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084f0:	f7fc fdc1 	bl	8005076 <HAL_GetTick>
 80084f4:	0002      	movs	r2, r0
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d302      	bcc.n	8008506 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d113      	bne.n	800852e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850a:	2220      	movs	r2, #32
 800850c:	431a      	orrs	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2241      	movs	r2, #65	; 0x41
 8008516:	2120      	movs	r1, #32
 8008518:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2242      	movs	r2, #66	; 0x42
 800851e:	2100      	movs	r1, #0
 8008520:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2240      	movs	r2, #64	; 0x40
 8008526:	2100      	movs	r1, #0
 8008528:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e00f      	b.n	800854e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	4013      	ands	r3, r2
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	425a      	negs	r2, r3
 800853e:	4153      	adcs	r3, r2
 8008540:	b2db      	uxtb	r3, r3
 8008542:	001a      	movs	r2, r3
 8008544:	1dfb      	adds	r3, r7, #7
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	429a      	cmp	r2, r3
 800854a:	d0ce      	beq.n	80084ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	0018      	movs	r0, r3
 8008550:	46bd      	mov	sp, r7
 8008552:	b004      	add	sp, #16
 8008554:	bd80      	pop	{r7, pc}

08008556 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008562:	e02b      	b.n	80085bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	68b9      	ldr	r1, [r7, #8]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	0018      	movs	r0, r3
 800856c:	f000 f86e 	bl	800864c <I2C_IsAcknowledgeFailed>
 8008570:	1e03      	subs	r3, r0, #0
 8008572:	d001      	beq.n	8008578 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e029      	b.n	80085cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	3301      	adds	r3, #1
 800857c:	d01e      	beq.n	80085bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800857e:	f7fc fd7a 	bl	8005076 <HAL_GetTick>
 8008582:	0002      	movs	r2, r0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	429a      	cmp	r2, r3
 800858c:	d302      	bcc.n	8008594 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d113      	bne.n	80085bc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008598:	2220      	movs	r2, #32
 800859a:	431a      	orrs	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2241      	movs	r2, #65	; 0x41
 80085a4:	2120      	movs	r1, #32
 80085a6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2242      	movs	r2, #66	; 0x42
 80085ac:	2100      	movs	r1, #0
 80085ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2240      	movs	r2, #64	; 0x40
 80085b4:	2100      	movs	r1, #0
 80085b6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e007      	b.n	80085cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	2202      	movs	r2, #2
 80085c4:	4013      	ands	r3, r2
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d1cc      	bne.n	8008564 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	0018      	movs	r0, r3
 80085ce:	46bd      	mov	sp, r7
 80085d0:	b004      	add	sp, #16
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085e0:	e028      	b.n	8008634 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	0018      	movs	r0, r3
 80085ea:	f000 f82f 	bl	800864c <I2C_IsAcknowledgeFailed>
 80085ee:	1e03      	subs	r3, r0, #0
 80085f0:	d001      	beq.n	80085f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e026      	b.n	8008644 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f6:	f7fc fd3e 	bl	8005076 <HAL_GetTick>
 80085fa:	0002      	movs	r2, r0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	429a      	cmp	r2, r3
 8008604:	d302      	bcc.n	800860c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d113      	bne.n	8008634 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008610:	2220      	movs	r2, #32
 8008612:	431a      	orrs	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2241      	movs	r2, #65	; 0x41
 800861c:	2120      	movs	r1, #32
 800861e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2242      	movs	r2, #66	; 0x42
 8008624:	2100      	movs	r1, #0
 8008626:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2240      	movs	r2, #64	; 0x40
 800862c:	2100      	movs	r1, #0
 800862e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e007      	b.n	8008644 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	2220      	movs	r2, #32
 800863c:	4013      	ands	r3, r2
 800863e:	2b20      	cmp	r3, #32
 8008640:	d1cf      	bne.n	80085e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	0018      	movs	r0, r3
 8008646:	46bd      	mov	sp, r7
 8008648:	b004      	add	sp, #16
 800864a:	bd80      	pop	{r7, pc}

0800864c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	2210      	movs	r2, #16
 8008660:	4013      	ands	r3, r2
 8008662:	2b10      	cmp	r3, #16
 8008664:	d151      	bne.n	800870a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008666:	e021      	b.n	80086ac <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	3301      	adds	r3, #1
 800866c:	d01e      	beq.n	80086ac <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800866e:	f7fc fd02 	bl	8005076 <HAL_GetTick>
 8008672:	0002      	movs	r2, r0
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	429a      	cmp	r2, r3
 800867c:	d302      	bcc.n	8008684 <I2C_IsAcknowledgeFailed+0x38>
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d113      	bne.n	80086ac <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008688:	2220      	movs	r2, #32
 800868a:	431a      	orrs	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2241      	movs	r2, #65	; 0x41
 8008694:	2120      	movs	r1, #32
 8008696:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2242      	movs	r2, #66	; 0x42
 800869c:	2100      	movs	r1, #0
 800869e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2240      	movs	r2, #64	; 0x40
 80086a4:	2100      	movs	r1, #0
 80086a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e02f      	b.n	800870c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	2220      	movs	r2, #32
 80086b4:	4013      	ands	r3, r2
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d1d6      	bne.n	8008668 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2210      	movs	r2, #16
 80086c0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2220      	movs	r2, #32
 80086c8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	0018      	movs	r0, r3
 80086ce:	f7ff fee1 	bl	8008494 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	490d      	ldr	r1, [pc, #52]	; (8008714 <I2C_IsAcknowledgeFailed+0xc8>)
 80086de:	400a      	ands	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e6:	2204      	movs	r2, #4
 80086e8:	431a      	orrs	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2241      	movs	r2, #65	; 0x41
 80086f2:	2120      	movs	r1, #32
 80086f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2242      	movs	r2, #66	; 0x42
 80086fa:	2100      	movs	r1, #0
 80086fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2240      	movs	r2, #64	; 0x40
 8008702:	2100      	movs	r1, #0
 8008704:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	0018      	movs	r0, r3
 800870e:	46bd      	mov	sp, r7
 8008710:	b004      	add	sp, #16
 8008712:	bd80      	pop	{r7, pc}
 8008714:	fe00e800 	.word	0xfe00e800

08008718 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008718:	b590      	push	{r4, r7, lr}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	0008      	movs	r0, r1
 8008722:	0011      	movs	r1, r2
 8008724:	607b      	str	r3, [r7, #4]
 8008726:	240a      	movs	r4, #10
 8008728:	193b      	adds	r3, r7, r4
 800872a:	1c02      	adds	r2, r0, #0
 800872c:	801a      	strh	r2, [r3, #0]
 800872e:	2009      	movs	r0, #9
 8008730:	183b      	adds	r3, r7, r0
 8008732:	1c0a      	adds	r2, r1, #0
 8008734:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	6a3a      	ldr	r2, [r7, #32]
 800873e:	0d51      	lsrs	r1, r2, #21
 8008740:	2280      	movs	r2, #128	; 0x80
 8008742:	00d2      	lsls	r2, r2, #3
 8008744:	400a      	ands	r2, r1
 8008746:	490e      	ldr	r1, [pc, #56]	; (8008780 <I2C_TransferConfig+0x68>)
 8008748:	430a      	orrs	r2, r1
 800874a:	43d2      	mvns	r2, r2
 800874c:	401a      	ands	r2, r3
 800874e:	0011      	movs	r1, r2
 8008750:	193b      	adds	r3, r7, r4
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	059b      	lsls	r3, r3, #22
 8008756:	0d9a      	lsrs	r2, r3, #22
 8008758:	183b      	adds	r3, r7, r0
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	0418      	lsls	r0, r3, #16
 800875e:	23ff      	movs	r3, #255	; 0xff
 8008760:	041b      	lsls	r3, r3, #16
 8008762:	4003      	ands	r3, r0
 8008764:	431a      	orrs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	431a      	orrs	r2, r3
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	431a      	orrs	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008776:	46c0      	nop			; (mov r8, r8)
 8008778:	46bd      	mov	sp, r7
 800877a:	b005      	add	sp, #20
 800877c:	bd90      	pop	{r4, r7, pc}
 800877e:	46c0      	nop			; (mov r8, r8)
 8008780:	03ff63ff 	.word	0x03ff63ff

08008784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2241      	movs	r2, #65	; 0x41
 8008792:	5c9b      	ldrb	r3, [r3, r2]
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b20      	cmp	r3, #32
 8008798:	d138      	bne.n	800880c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2240      	movs	r2, #64	; 0x40
 800879e:	5c9b      	ldrb	r3, [r3, r2]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80087a4:	2302      	movs	r3, #2
 80087a6:	e032      	b.n	800880e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2240      	movs	r2, #64	; 0x40
 80087ac:	2101      	movs	r1, #1
 80087ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2241      	movs	r2, #65	; 0x41
 80087b4:	2124      	movs	r1, #36	; 0x24
 80087b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2101      	movs	r1, #1
 80087c4:	438a      	bics	r2, r1
 80087c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4911      	ldr	r1, [pc, #68]	; (8008818 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80087d4:	400a      	ands	r2, r1
 80087d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6819      	ldr	r1, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	430a      	orrs	r2, r1
 80087e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2101      	movs	r1, #1
 80087f4:	430a      	orrs	r2, r1
 80087f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2241      	movs	r2, #65	; 0x41
 80087fc:	2120      	movs	r1, #32
 80087fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2240      	movs	r2, #64	; 0x40
 8008804:	2100      	movs	r1, #0
 8008806:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	e000      	b.n	800880e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800880c:	2302      	movs	r3, #2
  }
}
 800880e:	0018      	movs	r0, r3
 8008810:	46bd      	mov	sp, r7
 8008812:	b002      	add	sp, #8
 8008814:	bd80      	pop	{r7, pc}
 8008816:	46c0      	nop			; (mov r8, r8)
 8008818:	ffffefff 	.word	0xffffefff

0800881c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2241      	movs	r2, #65	; 0x41
 800882a:	5c9b      	ldrb	r3, [r3, r2]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b20      	cmp	r3, #32
 8008830:	d139      	bne.n	80088a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2240      	movs	r2, #64	; 0x40
 8008836:	5c9b      	ldrb	r3, [r3, r2]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800883c:	2302      	movs	r3, #2
 800883e:	e033      	b.n	80088a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2240      	movs	r2, #64	; 0x40
 8008844:	2101      	movs	r1, #1
 8008846:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2241      	movs	r2, #65	; 0x41
 800884c:	2124      	movs	r1, #36	; 0x24
 800884e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2101      	movs	r1, #1
 800885c:	438a      	bics	r2, r1
 800885e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4a11      	ldr	r2, [pc, #68]	; (80088b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800886c:	4013      	ands	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	4313      	orrs	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2101      	movs	r1, #1
 800888e:	430a      	orrs	r2, r1
 8008890:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2241      	movs	r2, #65	; 0x41
 8008896:	2120      	movs	r1, #32
 8008898:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2240      	movs	r2, #64	; 0x40
 800889e:	2100      	movs	r1, #0
 80088a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	e000      	b.n	80088a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80088a6:	2302      	movs	r3, #2
  }
}
 80088a8:	0018      	movs	r0, r3
 80088aa:	46bd      	mov	sp, r7
 80088ac:	b004      	add	sp, #16
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	fffff0ff 	.word	0xfffff0ff

080088b4 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80088b8:	4b04      	ldr	r3, [pc, #16]	; (80088cc <HAL_PWR_DisablePVD+0x18>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	4b03      	ldr	r3, [pc, #12]	; (80088cc <HAL_PWR_DisablePVD+0x18>)
 80088be:	2110      	movs	r1, #16
 80088c0:	438a      	bics	r2, r1
 80088c2:	601a      	str	r2, [r3, #0]
}
 80088c4:	46c0      	nop			; (mov r8, r8)
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	40007000 	.word	0x40007000

080088d0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	000a      	movs	r2, r1
 80088da:	1cfb      	adds	r3, r7, #3
 80088dc:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80088e2:	4b23      	ldr	r3, [pc, #140]	; (8008970 <HAL_PWR_EnterSLEEPMode+0xa0>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	2380      	movs	r3, #128	; 0x80
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4013      	ands	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80088ee:	4b21      	ldr	r3, [pc, #132]	; (8008974 <HAL_PWR_EnterSLEEPMode+0xa4>)
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	2201      	movs	r2, #1
 80088f4:	4013      	ands	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d008      	beq.n	8008910 <HAL_PWR_EnterSLEEPMode+0x40>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008904:	4b1a      	ldr	r3, [pc, #104]	; (8008970 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	4b19      	ldr	r3, [pc, #100]	; (8008970 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800890a:	491b      	ldr	r1, [pc, #108]	; (8008978 <HAL_PWR_EnterSLEEPMode+0xa8>)
 800890c:	400a      	ands	r2, r1
 800890e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008910:	4b17      	ldr	r3, [pc, #92]	; (8008970 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2203      	movs	r2, #3
 800891a:	4393      	bics	r3, r2
 800891c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008926:	4b12      	ldr	r3, [pc, #72]	; (8008970 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800892c:	4b13      	ldr	r3, [pc, #76]	; (800897c <HAL_PWR_EnterSLEEPMode+0xac>)
 800892e:	691a      	ldr	r2, [r3, #16]
 8008930:	4b12      	ldr	r3, [pc, #72]	; (800897c <HAL_PWR_EnterSLEEPMode+0xac>)
 8008932:	2104      	movs	r1, #4
 8008934:	438a      	bics	r2, r1
 8008936:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008938:	1cfb      	adds	r3, r7, #3
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008940:	bf30      	wfi
 8008942:	e002      	b.n	800894a <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008944:	bf40      	sev
    __WFE();
 8008946:	bf20      	wfe
    __WFE();
 8008948:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d009      	beq.n	8008964 <HAL_PWR_EnterSLEEPMode+0x94>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d006      	beq.n	8008964 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008956:	4b06      	ldr	r3, [pc, #24]	; (8008970 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <HAL_PWR_EnterSLEEPMode+0xa0>)
 800895c:	2180      	movs	r1, #128	; 0x80
 800895e:	0089      	lsls	r1, r1, #2
 8008960:	430a      	orrs	r2, r1
 8008962:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8008964:	46c0      	nop			; (mov r8, r8)

}
 8008966:	46c0      	nop			; (mov r8, r8)
 8008968:	46bd      	mov	sp, r7
 800896a:	b006      	add	sp, #24
 800896c:	bd80      	pop	{r7, pc}
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	40007000 	.word	0x40007000
 8008974:	40010000 	.word	0x40010000
 8008978:	fffffdff 	.word	0xfffffdff
 800897c:	e000ed00 	.word	0xe000ed00

08008980 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	000a      	movs	r2, r1
 800898a:	1cfb      	adds	r3, r7, #3
 800898c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008992:	4b25      	ldr	r3, [pc, #148]	; (8008a28 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	2380      	movs	r3, #128	; 0x80
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4013      	ands	r3, r2
 800899c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800899e:	4b23      	ldr	r3, [pc, #140]	; (8008a2c <HAL_PWR_EnterSTOPMode+0xac>)
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	2201      	movs	r2, #1
 80089a4:	4013      	ands	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <HAL_PWR_EnterSTOPMode+0x40>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d005      	beq.n	80089c0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80089b4:	4b1c      	ldr	r3, [pc, #112]	; (8008a28 <HAL_PWR_EnterSTOPMode+0xa8>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <HAL_PWR_EnterSTOPMode+0xa8>)
 80089ba:	491d      	ldr	r1, [pc, #116]	; (8008a30 <HAL_PWR_EnterSTOPMode+0xb0>)
 80089bc:	400a      	ands	r2, r1
 80089be:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80089c0:	4b19      	ldr	r3, [pc, #100]	; (8008a28 <HAL_PWR_EnterSTOPMode+0xa8>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2203      	movs	r2, #3
 80089ca:	4393      	bics	r3, r2
 80089cc:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80089d6:	4b14      	ldr	r3, [pc, #80]	; (8008a28 <HAL_PWR_EnterSTOPMode+0xa8>)
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80089dc:	4b15      	ldr	r3, [pc, #84]	; (8008a34 <HAL_PWR_EnterSTOPMode+0xb4>)
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	4b14      	ldr	r3, [pc, #80]	; (8008a34 <HAL_PWR_EnterSTOPMode+0xb4>)
 80089e2:	2104      	movs	r1, #4
 80089e4:	430a      	orrs	r2, r1
 80089e6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80089e8:	1cfb      	adds	r3, r7, #3
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80089f0:	bf30      	wfi
 80089f2:	e002      	b.n	80089fa <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80089f4:	bf40      	sev
    __WFE();
 80089f6:	bf20      	wfe
    __WFE();
 80089f8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80089fa:	4b0e      	ldr	r3, [pc, #56]	; (8008a34 <HAL_PWR_EnterSTOPMode+0xb4>)
 80089fc:	691a      	ldr	r2, [r3, #16]
 80089fe:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008a00:	2104      	movs	r1, #4
 8008a02:	438a      	bics	r2, r1
 8008a04:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <HAL_PWR_EnterSTOPMode+0xa0>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d006      	beq.n	8008a20 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008a18:	2180      	movs	r1, #128	; 0x80
 8008a1a:	0089      	lsls	r1, r1, #2
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	601a      	str	r2, [r3, #0]
  }
}
 8008a20:	46c0      	nop			; (mov r8, r8)
 8008a22:	46bd      	mov	sp, r7
 8008a24:	b006      	add	sp, #24
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	40007000 	.word	0x40007000
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	fffffdff 	.word	0xfffffdff
 8008a34:	e000ed00 	.word	0xe000ed00

08008a38 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008a3c:	4b04      	ldr	r3, [pc, #16]	; (8008a50 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	4b03      	ldr	r3, [pc, #12]	; (8008a50 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008a42:	2180      	movs	r1, #128	; 0x80
 8008a44:	00c9      	lsls	r1, r1, #3
 8008a46:	430a      	orrs	r2, r1
 8008a48:	601a      	str	r2, [r3, #0]
}
 8008a4a:	46c0      	nop			; (mov r8, r8)
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	40007000 	.word	0x40007000

08008a54 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	4b03      	ldr	r3, [pc, #12]	; (8008a6c <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008a5e:	2180      	movs	r1, #128	; 0x80
 8008a60:	0089      	lsls	r1, r1, #2
 8008a62:	430a      	orrs	r2, r1
 8008a64:	601a      	str	r2, [r3, #0]
}
 8008a66:	46c0      	nop			; (mov r8, r8)
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	40007000 	.word	0x40007000

08008a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a70:	b5b0      	push	{r4, r5, r7, lr}
 8008a72:	b08a      	sub	sp, #40	; 0x28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d102      	bne.n	8008a84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f000 fbbf 	bl	8009202 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a84:	4bc9      	ldr	r3, [pc, #804]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	220c      	movs	r2, #12
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a8e:	4bc7      	ldr	r3, [pc, #796]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	2380      	movs	r3, #128	; 0x80
 8008a94:	025b      	lsls	r3, r3, #9
 8008a96:	4013      	ands	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	d100      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x36>
 8008aa4:	e07e      	b.n	8008ba4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	2b08      	cmp	r3, #8
 8008aaa:	d007      	beq.n	8008abc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	2b0c      	cmp	r3, #12
 8008ab0:	d112      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x68>
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	2380      	movs	r3, #128	; 0x80
 8008ab6:	025b      	lsls	r3, r3, #9
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d10d      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008abc:	4bbb      	ldr	r3, [pc, #748]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	2380      	movs	r3, #128	; 0x80
 8008ac2:	029b      	lsls	r3, r3, #10
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	d100      	bne.n	8008aca <HAL_RCC_OscConfig+0x5a>
 8008ac8:	e06b      	b.n	8008ba2 <HAL_RCC_OscConfig+0x132>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d167      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f000 fb95 	bl	8009202 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	2380      	movs	r3, #128	; 0x80
 8008ade:	025b      	lsls	r3, r3, #9
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d107      	bne.n	8008af4 <HAL_RCC_OscConfig+0x84>
 8008ae4:	4bb1      	ldr	r3, [pc, #708]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	4bb0      	ldr	r3, [pc, #704]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008aea:	2180      	movs	r1, #128	; 0x80
 8008aec:	0249      	lsls	r1, r1, #9
 8008aee:	430a      	orrs	r2, r1
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	e027      	b.n	8008b44 <HAL_RCC_OscConfig+0xd4>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	23a0      	movs	r3, #160	; 0xa0
 8008afa:	02db      	lsls	r3, r3, #11
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d10e      	bne.n	8008b1e <HAL_RCC_OscConfig+0xae>
 8008b00:	4baa      	ldr	r3, [pc, #680]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	4ba9      	ldr	r3, [pc, #676]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b06:	2180      	movs	r1, #128	; 0x80
 8008b08:	02c9      	lsls	r1, r1, #11
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	4ba7      	ldr	r3, [pc, #668]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4ba6      	ldr	r3, [pc, #664]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b14:	2180      	movs	r1, #128	; 0x80
 8008b16:	0249      	lsls	r1, r1, #9
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	e012      	b.n	8008b44 <HAL_RCC_OscConfig+0xd4>
 8008b1e:	4ba3      	ldr	r3, [pc, #652]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4ba2      	ldr	r3, [pc, #648]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b24:	49a2      	ldr	r1, [pc, #648]	; (8008db0 <HAL_RCC_OscConfig+0x340>)
 8008b26:	400a      	ands	r2, r1
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	4ba0      	ldr	r3, [pc, #640]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	2380      	movs	r3, #128	; 0x80
 8008b30:	025b      	lsls	r3, r3, #9
 8008b32:	4013      	ands	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	4b9c      	ldr	r3, [pc, #624]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	4b9b      	ldr	r3, [pc, #620]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b3e:	499d      	ldr	r1, [pc, #628]	; (8008db4 <HAL_RCC_OscConfig+0x344>)
 8008b40:	400a      	ands	r2, r1
 8008b42:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d015      	beq.n	8008b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b4c:	f7fc fa93 	bl	8005076 <HAL_GetTick>
 8008b50:	0003      	movs	r3, r0
 8008b52:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b54:	e009      	b.n	8008b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b56:	f7fc fa8e 	bl	8005076 <HAL_GetTick>
 8008b5a:	0002      	movs	r2, r0
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2b64      	cmp	r3, #100	; 0x64
 8008b62:	d902      	bls.n	8008b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	f000 fb4c 	bl	8009202 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b6a:	4b90      	ldr	r3, [pc, #576]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	2380      	movs	r3, #128	; 0x80
 8008b70:	029b      	lsls	r3, r3, #10
 8008b72:	4013      	ands	r3, r2
 8008b74:	d0ef      	beq.n	8008b56 <HAL_RCC_OscConfig+0xe6>
 8008b76:	e015      	b.n	8008ba4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b78:	f7fc fa7d 	bl	8005076 <HAL_GetTick>
 8008b7c:	0003      	movs	r3, r0
 8008b7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008b80:	e008      	b.n	8008b94 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b82:	f7fc fa78 	bl	8005076 <HAL_GetTick>
 8008b86:	0002      	movs	r2, r0
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b64      	cmp	r3, #100	; 0x64
 8008b8e:	d901      	bls.n	8008b94 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e336      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008b94:	4b85      	ldr	r3, [pc, #532]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	029b      	lsls	r3, r3, #10
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	d1f0      	bne.n	8008b82 <HAL_RCC_OscConfig+0x112>
 8008ba0:	e000      	b.n	8008ba4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ba2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	4013      	ands	r3, r2
 8008bac:	d100      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x140>
 8008bae:	e099      	b.n	8008ce4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb8:	2220      	movs	r2, #32
 8008bba:	4013      	ands	r3, r2
 8008bbc:	d009      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8008bbe:	4b7b      	ldr	r3, [pc, #492]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b7a      	ldr	r3, [pc, #488]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008bc4:	2120      	movs	r1, #32
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	2220      	movs	r2, #32
 8008bce:	4393      	bics	r3, r2
 8008bd0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d005      	beq.n	8008be4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	2b0c      	cmp	r3, #12
 8008bdc:	d13e      	bne.n	8008c5c <HAL_RCC_OscConfig+0x1ec>
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d13b      	bne.n	8008c5c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008be4:	4b71      	ldr	r3, [pc, #452]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2204      	movs	r2, #4
 8008bea:	4013      	ands	r3, r2
 8008bec:	d004      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x188>
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e304      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bf8:	4b6c      	ldr	r3, [pc, #432]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	4a6e      	ldr	r2, [pc, #440]	; (8008db8 <HAL_RCC_OscConfig+0x348>)
 8008bfe:	4013      	ands	r3, r2
 8008c00:	0019      	movs	r1, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	021a      	lsls	r2, r3, #8
 8008c08:	4b68      	ldr	r3, [pc, #416]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008c0e:	4b67      	ldr	r3, [pc, #412]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2209      	movs	r2, #9
 8008c14:	4393      	bics	r3, r2
 8008c16:	0019      	movs	r1, r3
 8008c18:	4b64      	ldr	r3, [pc, #400]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c20:	f000 fc42 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 8008c24:	0001      	movs	r1, r0
 8008c26:	4b61      	ldr	r3, [pc, #388]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	091b      	lsrs	r3, r3, #4
 8008c2c:	220f      	movs	r2, #15
 8008c2e:	4013      	ands	r3, r2
 8008c30:	4a62      	ldr	r2, [pc, #392]	; (8008dbc <HAL_RCC_OscConfig+0x34c>)
 8008c32:	5cd3      	ldrb	r3, [r2, r3]
 8008c34:	000a      	movs	r2, r1
 8008c36:	40da      	lsrs	r2, r3
 8008c38:	4b61      	ldr	r3, [pc, #388]	; (8008dc0 <HAL_RCC_OscConfig+0x350>)
 8008c3a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008c3c:	4b61      	ldr	r3, [pc, #388]	; (8008dc4 <HAL_RCC_OscConfig+0x354>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2513      	movs	r5, #19
 8008c42:	197c      	adds	r4, r7, r5
 8008c44:	0018      	movs	r0, r3
 8008c46:	f7fc fa0d 	bl	8005064 <HAL_InitTick>
 8008c4a:	0003      	movs	r3, r0
 8008c4c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008c4e:	197b      	adds	r3, r7, r5
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d046      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8008c56:	197b      	adds	r3, r7, r5
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	e2d2      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d027      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008c62:	4b52      	ldr	r3, [pc, #328]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2209      	movs	r2, #9
 8008c68:	4393      	bics	r3, r2
 8008c6a:	0019      	movs	r1, r3
 8008c6c:	4b4f      	ldr	r3, [pc, #316]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c70:	430a      	orrs	r2, r1
 8008c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c74:	f7fc f9ff 	bl	8005076 <HAL_GetTick>
 8008c78:	0003      	movs	r3, r0
 8008c7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c7c:	e008      	b.n	8008c90 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c7e:	f7fc f9fa 	bl	8005076 <HAL_GetTick>
 8008c82:	0002      	movs	r2, r0
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d901      	bls.n	8008c90 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e2b8      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c90:	4b46      	ldr	r3, [pc, #280]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2204      	movs	r2, #4
 8008c96:	4013      	ands	r3, r2
 8008c98:	d0f1      	beq.n	8008c7e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c9a:	4b44      	ldr	r3, [pc, #272]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	4a46      	ldr	r2, [pc, #280]	; (8008db8 <HAL_RCC_OscConfig+0x348>)
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	0019      	movs	r1, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	021a      	lsls	r2, r3, #8
 8008caa:	4b40      	ldr	r3, [pc, #256]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008cac:	430a      	orrs	r2, r1
 8008cae:	605a      	str	r2, [r3, #4]
 8008cb0:	e018      	b.n	8008ce4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cb2:	4b3e      	ldr	r3, [pc, #248]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	4b3d      	ldr	r3, [pc, #244]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008cb8:	2101      	movs	r1, #1
 8008cba:	438a      	bics	r2, r1
 8008cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cbe:	f7fc f9da 	bl	8005076 <HAL_GetTick>
 8008cc2:	0003      	movs	r3, r0
 8008cc4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008cc6:	e008      	b.n	8008cda <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cc8:	f7fc f9d5 	bl	8005076 <HAL_GetTick>
 8008ccc:	0002      	movs	r2, r0
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e293      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008cda:	4b34      	ldr	r3, [pc, #208]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2204      	movs	r2, #4
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	d1f1      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2210      	movs	r2, #16
 8008cea:	4013      	ands	r3, r2
 8008cec:	d100      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x280>
 8008cee:	e0a2      	b.n	8008e36 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d140      	bne.n	8008d78 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008cf6:	4b2d      	ldr	r3, [pc, #180]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	2380      	movs	r3, #128	; 0x80
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4013      	ands	r3, r2
 8008d00:	d005      	beq.n	8008d0e <HAL_RCC_OscConfig+0x29e>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e279      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d0e:	4b27      	ldr	r3, [pc, #156]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	4a2d      	ldr	r2, [pc, #180]	; (8008dc8 <HAL_RCC_OscConfig+0x358>)
 8008d14:	4013      	ands	r3, r2
 8008d16:	0019      	movs	r1, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d1c:	4b23      	ldr	r3, [pc, #140]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d22:	4b22      	ldr	r3, [pc, #136]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	021b      	lsls	r3, r3, #8
 8008d28:	0a19      	lsrs	r1, r3, #8
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	061a      	lsls	r2, r3, #24
 8008d30:	4b1e      	ldr	r3, [pc, #120]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008d32:	430a      	orrs	r2, r1
 8008d34:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	0b5b      	lsrs	r3, r3, #13
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	2280      	movs	r2, #128	; 0x80
 8008d40:	0212      	lsls	r2, r2, #8
 8008d42:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008d44:	4b19      	ldr	r3, [pc, #100]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	091b      	lsrs	r3, r3, #4
 8008d4a:	210f      	movs	r1, #15
 8008d4c:	400b      	ands	r3, r1
 8008d4e:	491b      	ldr	r1, [pc, #108]	; (8008dbc <HAL_RCC_OscConfig+0x34c>)
 8008d50:	5ccb      	ldrb	r3, [r1, r3]
 8008d52:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008d54:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <HAL_RCC_OscConfig+0x350>)
 8008d56:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8008d58:	4b1a      	ldr	r3, [pc, #104]	; (8008dc4 <HAL_RCC_OscConfig+0x354>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2513      	movs	r5, #19
 8008d5e:	197c      	adds	r4, r7, r5
 8008d60:	0018      	movs	r0, r3
 8008d62:	f7fc f97f 	bl	8005064 <HAL_InitTick>
 8008d66:	0003      	movs	r3, r0
 8008d68:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008d6a:	197b      	adds	r3, r7, r5
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d061      	beq.n	8008e36 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8008d72:	197b      	adds	r3, r7, r5
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	e244      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d040      	beq.n	8008e02 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008d80:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	4b09      	ldr	r3, [pc, #36]	; (8008dac <HAL_RCC_OscConfig+0x33c>)
 8008d86:	2180      	movs	r1, #128	; 0x80
 8008d88:	0049      	lsls	r1, r1, #1
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d8e:	f7fc f972 	bl	8005076 <HAL_GetTick>
 8008d92:	0003      	movs	r3, r0
 8008d94:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008d96:	e019      	b.n	8008dcc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d98:	f7fc f96d 	bl	8005076 <HAL_GetTick>
 8008d9c:	0002      	movs	r2, r0
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d912      	bls.n	8008dcc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e22b      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	40021000 	.word	0x40021000
 8008db0:	fffeffff 	.word	0xfffeffff
 8008db4:	fffbffff 	.word	0xfffbffff
 8008db8:	ffffe0ff 	.word	0xffffe0ff
 8008dbc:	0801e514 	.word	0x0801e514
 8008dc0:	20000070 	.word	0x20000070
 8008dc4:	20000074 	.word	0x20000074
 8008dc8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008dcc:	4bca      	ldr	r3, [pc, #808]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	2380      	movs	r3, #128	; 0x80
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	d0df      	beq.n	8008d98 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008dd8:	4bc7      	ldr	r3, [pc, #796]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	4ac7      	ldr	r2, [pc, #796]	; (80090fc <HAL_RCC_OscConfig+0x68c>)
 8008dde:	4013      	ands	r3, r2
 8008de0:	0019      	movs	r1, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008de6:	4bc4      	ldr	r3, [pc, #784]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008de8:	430a      	orrs	r2, r1
 8008dea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008dec:	4bc2      	ldr	r3, [pc, #776]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	021b      	lsls	r3, r3, #8
 8008df2:	0a19      	lsrs	r1, r3, #8
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	061a      	lsls	r2, r3, #24
 8008dfa:	4bbf      	ldr	r3, [pc, #764]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	605a      	str	r2, [r3, #4]
 8008e00:	e019      	b.n	8008e36 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008e02:	4bbd      	ldr	r3, [pc, #756]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4bbc      	ldr	r3, [pc, #752]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008e08:	49bd      	ldr	r1, [pc, #756]	; (8009100 <HAL_RCC_OscConfig+0x690>)
 8008e0a:	400a      	ands	r2, r1
 8008e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e0e:	f7fc f932 	bl	8005076 <HAL_GetTick>
 8008e12:	0003      	movs	r3, r0
 8008e14:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008e16:	e008      	b.n	8008e2a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008e18:	f7fc f92d 	bl	8005076 <HAL_GetTick>
 8008e1c:	0002      	movs	r2, r0
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d901      	bls.n	8008e2a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e1eb      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008e2a:	4bb3      	ldr	r3, [pc, #716]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	2380      	movs	r3, #128	; 0x80
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4013      	ands	r3, r2
 8008e34:	d1f0      	bne.n	8008e18 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2208      	movs	r2, #8
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	d036      	beq.n	8008eae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d019      	beq.n	8008e7c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e48:	4bab      	ldr	r3, [pc, #684]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e4c:	4baa      	ldr	r3, [pc, #680]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008e4e:	2101      	movs	r1, #1
 8008e50:	430a      	orrs	r2, r1
 8008e52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e54:	f7fc f90f 	bl	8005076 <HAL_GetTick>
 8008e58:	0003      	movs	r3, r0
 8008e5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e5c:	e008      	b.n	8008e70 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e5e:	f7fc f90a 	bl	8005076 <HAL_GetTick>
 8008e62:	0002      	movs	r2, r0
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e1c8      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e70:	4ba1      	ldr	r3, [pc, #644]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e74:	2202      	movs	r2, #2
 8008e76:	4013      	ands	r3, r2
 8008e78:	d0f1      	beq.n	8008e5e <HAL_RCC_OscConfig+0x3ee>
 8008e7a:	e018      	b.n	8008eae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e7c:	4b9e      	ldr	r3, [pc, #632]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e80:	4b9d      	ldr	r3, [pc, #628]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008e82:	2101      	movs	r1, #1
 8008e84:	438a      	bics	r2, r1
 8008e86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e88:	f7fc f8f5 	bl	8005076 <HAL_GetTick>
 8008e8c:	0003      	movs	r3, r0
 8008e8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e90:	e008      	b.n	8008ea4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e92:	f7fc f8f0 	bl	8005076 <HAL_GetTick>
 8008e96:	0002      	movs	r2, r0
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d901      	bls.n	8008ea4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e1ae      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ea4:	4b94      	ldr	r3, [pc, #592]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	4013      	ands	r3, r2
 8008eac:	d1f1      	bne.n	8008e92 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2204      	movs	r2, #4
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	d100      	bne.n	8008eba <HAL_RCC_OscConfig+0x44a>
 8008eb8:	e0ae      	b.n	8009018 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008eba:	2023      	movs	r0, #35	; 0x23
 8008ebc:	183b      	adds	r3, r7, r0
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ec2:	4b8d      	ldr	r3, [pc, #564]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec6:	2380      	movs	r3, #128	; 0x80
 8008ec8:	055b      	lsls	r3, r3, #21
 8008eca:	4013      	ands	r3, r2
 8008ecc:	d109      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ece:	4b8a      	ldr	r3, [pc, #552]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed2:	4b89      	ldr	r3, [pc, #548]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008ed4:	2180      	movs	r1, #128	; 0x80
 8008ed6:	0549      	lsls	r1, r1, #21
 8008ed8:	430a      	orrs	r2, r1
 8008eda:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008edc:	183b      	adds	r3, r7, r0
 8008ede:	2201      	movs	r2, #1
 8008ee0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ee2:	4b88      	ldr	r3, [pc, #544]	; (8009104 <HAL_RCC_OscConfig+0x694>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	2380      	movs	r3, #128	; 0x80
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	4013      	ands	r3, r2
 8008eec:	d11a      	bne.n	8008f24 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008eee:	4b85      	ldr	r3, [pc, #532]	; (8009104 <HAL_RCC_OscConfig+0x694>)
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	4b84      	ldr	r3, [pc, #528]	; (8009104 <HAL_RCC_OscConfig+0x694>)
 8008ef4:	2180      	movs	r1, #128	; 0x80
 8008ef6:	0049      	lsls	r1, r1, #1
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008efc:	f7fc f8bb 	bl	8005076 <HAL_GetTick>
 8008f00:	0003      	movs	r3, r0
 8008f02:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f04:	e008      	b.n	8008f18 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f06:	f7fc f8b6 	bl	8005076 <HAL_GetTick>
 8008f0a:	0002      	movs	r2, r0
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	2b64      	cmp	r3, #100	; 0x64
 8008f12:	d901      	bls.n	8008f18 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e174      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f18:	4b7a      	ldr	r3, [pc, #488]	; (8009104 <HAL_RCC_OscConfig+0x694>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	2380      	movs	r3, #128	; 0x80
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	4013      	ands	r3, r2
 8008f22:	d0f0      	beq.n	8008f06 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	2380      	movs	r3, #128	; 0x80
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d107      	bne.n	8008f40 <HAL_RCC_OscConfig+0x4d0>
 8008f30:	4b71      	ldr	r3, [pc, #452]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f34:	4b70      	ldr	r3, [pc, #448]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f36:	2180      	movs	r1, #128	; 0x80
 8008f38:	0049      	lsls	r1, r1, #1
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	651a      	str	r2, [r3, #80]	; 0x50
 8008f3e:	e031      	b.n	8008fa4 <HAL_RCC_OscConfig+0x534>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10c      	bne.n	8008f62 <HAL_RCC_OscConfig+0x4f2>
 8008f48:	4b6b      	ldr	r3, [pc, #428]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f4c:	4b6a      	ldr	r3, [pc, #424]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f4e:	496c      	ldr	r1, [pc, #432]	; (8009100 <HAL_RCC_OscConfig+0x690>)
 8008f50:	400a      	ands	r2, r1
 8008f52:	651a      	str	r2, [r3, #80]	; 0x50
 8008f54:	4b68      	ldr	r3, [pc, #416]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f58:	4b67      	ldr	r3, [pc, #412]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f5a:	496b      	ldr	r1, [pc, #428]	; (8009108 <HAL_RCC_OscConfig+0x698>)
 8008f5c:	400a      	ands	r2, r1
 8008f5e:	651a      	str	r2, [r3, #80]	; 0x50
 8008f60:	e020      	b.n	8008fa4 <HAL_RCC_OscConfig+0x534>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	23a0      	movs	r3, #160	; 0xa0
 8008f68:	00db      	lsls	r3, r3, #3
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d10e      	bne.n	8008f8c <HAL_RCC_OscConfig+0x51c>
 8008f6e:	4b62      	ldr	r3, [pc, #392]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f72:	4b61      	ldr	r3, [pc, #388]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f74:	2180      	movs	r1, #128	; 0x80
 8008f76:	00c9      	lsls	r1, r1, #3
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	651a      	str	r2, [r3, #80]	; 0x50
 8008f7c:	4b5e      	ldr	r3, [pc, #376]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f80:	4b5d      	ldr	r3, [pc, #372]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f82:	2180      	movs	r1, #128	; 0x80
 8008f84:	0049      	lsls	r1, r1, #1
 8008f86:	430a      	orrs	r2, r1
 8008f88:	651a      	str	r2, [r3, #80]	; 0x50
 8008f8a:	e00b      	b.n	8008fa4 <HAL_RCC_OscConfig+0x534>
 8008f8c:	4b5a      	ldr	r3, [pc, #360]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f90:	4b59      	ldr	r3, [pc, #356]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f92:	495b      	ldr	r1, [pc, #364]	; (8009100 <HAL_RCC_OscConfig+0x690>)
 8008f94:	400a      	ands	r2, r1
 8008f96:	651a      	str	r2, [r3, #80]	; 0x50
 8008f98:	4b57      	ldr	r3, [pc, #348]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f9c:	4b56      	ldr	r3, [pc, #344]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008f9e:	495a      	ldr	r1, [pc, #360]	; (8009108 <HAL_RCC_OscConfig+0x698>)
 8008fa0:	400a      	ands	r2, r1
 8008fa2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d015      	beq.n	8008fd8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fac:	f7fc f863 	bl	8005076 <HAL_GetTick>
 8008fb0:	0003      	movs	r3, r0
 8008fb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fb4:	e009      	b.n	8008fca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fb6:	f7fc f85e 	bl	8005076 <HAL_GetTick>
 8008fba:	0002      	movs	r2, r0
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	4a52      	ldr	r2, [pc, #328]	; (800910c <HAL_RCC_OscConfig+0x69c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e11b      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fca:	4b4b      	ldr	r3, [pc, #300]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008fcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fce:	2380      	movs	r3, #128	; 0x80
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	d0ef      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x546>
 8008fd6:	e014      	b.n	8009002 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fd8:	f7fc f84d 	bl	8005076 <HAL_GetTick>
 8008fdc:	0003      	movs	r3, r0
 8008fde:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008fe0:	e009      	b.n	8008ff6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fe2:	f7fc f848 	bl	8005076 <HAL_GetTick>
 8008fe6:	0002      	movs	r2, r0
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	4a47      	ldr	r2, [pc, #284]	; (800910c <HAL_RCC_OscConfig+0x69c>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d901      	bls.n	8008ff6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e105      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ff6:	4b40      	ldr	r3, [pc, #256]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8008ff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ffa:	2380      	movs	r3, #128	; 0x80
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4013      	ands	r3, r2
 8009000:	d1ef      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009002:	2323      	movs	r3, #35	; 0x23
 8009004:	18fb      	adds	r3, r7, r3
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d105      	bne.n	8009018 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800900c:	4b3a      	ldr	r3, [pc, #232]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 800900e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009010:	4b39      	ldr	r3, [pc, #228]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8009012:	493f      	ldr	r1, [pc, #252]	; (8009110 <HAL_RCC_OscConfig+0x6a0>)
 8009014:	400a      	ands	r2, r1
 8009016:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2220      	movs	r2, #32
 800901e:	4013      	ands	r3, r2
 8009020:	d049      	beq.n	80090b6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d026      	beq.n	8009078 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800902a:	4b33      	ldr	r3, [pc, #204]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 800902c:	689a      	ldr	r2, [r3, #8]
 800902e:	4b32      	ldr	r3, [pc, #200]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8009030:	2101      	movs	r1, #1
 8009032:	430a      	orrs	r2, r1
 8009034:	609a      	str	r2, [r3, #8]
 8009036:	4b30      	ldr	r3, [pc, #192]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 8009038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800903a:	4b2f      	ldr	r3, [pc, #188]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 800903c:	2101      	movs	r1, #1
 800903e:	430a      	orrs	r2, r1
 8009040:	635a      	str	r2, [r3, #52]	; 0x34
 8009042:	4b34      	ldr	r3, [pc, #208]	; (8009114 <HAL_RCC_OscConfig+0x6a4>)
 8009044:	6a1a      	ldr	r2, [r3, #32]
 8009046:	4b33      	ldr	r3, [pc, #204]	; (8009114 <HAL_RCC_OscConfig+0x6a4>)
 8009048:	2180      	movs	r1, #128	; 0x80
 800904a:	0189      	lsls	r1, r1, #6
 800904c:	430a      	orrs	r2, r1
 800904e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009050:	f7fc f811 	bl	8005076 <HAL_GetTick>
 8009054:	0003      	movs	r3, r0
 8009056:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009058:	e008      	b.n	800906c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800905a:	f7fc f80c 	bl	8005076 <HAL_GetTick>
 800905e:	0002      	movs	r2, r0
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d901      	bls.n	800906c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e0ca      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800906c:	4b22      	ldr	r3, [pc, #136]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	2202      	movs	r2, #2
 8009072:	4013      	ands	r3, r2
 8009074:	d0f1      	beq.n	800905a <HAL_RCC_OscConfig+0x5ea>
 8009076:	e01e      	b.n	80090b6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8009078:	4b1f      	ldr	r3, [pc, #124]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	4b1e      	ldr	r3, [pc, #120]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 800907e:	2101      	movs	r1, #1
 8009080:	438a      	bics	r2, r1
 8009082:	609a      	str	r2, [r3, #8]
 8009084:	4b23      	ldr	r3, [pc, #140]	; (8009114 <HAL_RCC_OscConfig+0x6a4>)
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	4b22      	ldr	r3, [pc, #136]	; (8009114 <HAL_RCC_OscConfig+0x6a4>)
 800908a:	4923      	ldr	r1, [pc, #140]	; (8009118 <HAL_RCC_OscConfig+0x6a8>)
 800908c:	400a      	ands	r2, r1
 800908e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009090:	f7fb fff1 	bl	8005076 <HAL_GetTick>
 8009094:	0003      	movs	r3, r0
 8009096:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009098:	e008      	b.n	80090ac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800909a:	f7fb ffec 	bl	8005076 <HAL_GetTick>
 800909e:	0002      	movs	r2, r0
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d901      	bls.n	80090ac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e0aa      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090ac:	4b12      	ldr	r3, [pc, #72]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	2202      	movs	r2, #2
 80090b2:	4013      	ands	r3, r2
 80090b4:	d1f1      	bne.n	800909a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d100      	bne.n	80090c0 <HAL_RCC_OscConfig+0x650>
 80090be:	e09f      	b.n	8009200 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	2b0c      	cmp	r3, #12
 80090c4:	d100      	bne.n	80090c8 <HAL_RCC_OscConfig+0x658>
 80090c6:	e078      	b.n	80091ba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d159      	bne.n	8009184 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090d0:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	4b08      	ldr	r3, [pc, #32]	; (80090f8 <HAL_RCC_OscConfig+0x688>)
 80090d6:	4911      	ldr	r1, [pc, #68]	; (800911c <HAL_RCC_OscConfig+0x6ac>)
 80090d8:	400a      	ands	r2, r1
 80090da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090dc:	f7fb ffcb 	bl	8005076 <HAL_GetTick>
 80090e0:	0003      	movs	r3, r0
 80090e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80090e4:	e01c      	b.n	8009120 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090e6:	f7fb ffc6 	bl	8005076 <HAL_GetTick>
 80090ea:	0002      	movs	r2, r0
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d915      	bls.n	8009120 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e084      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
 80090f8:	40021000 	.word	0x40021000
 80090fc:	ffff1fff 	.word	0xffff1fff
 8009100:	fffffeff 	.word	0xfffffeff
 8009104:	40007000 	.word	0x40007000
 8009108:	fffffbff 	.word	0xfffffbff
 800910c:	00001388 	.word	0x00001388
 8009110:	efffffff 	.word	0xefffffff
 8009114:	40010000 	.word	0x40010000
 8009118:	ffffdfff 	.word	0xffffdfff
 800911c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009120:	4b3a      	ldr	r3, [pc, #232]	; (800920c <HAL_RCC_OscConfig+0x79c>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	2380      	movs	r3, #128	; 0x80
 8009126:	049b      	lsls	r3, r3, #18
 8009128:	4013      	ands	r3, r2
 800912a:	d1dc      	bne.n	80090e6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800912c:	4b37      	ldr	r3, [pc, #220]	; (800920c <HAL_RCC_OscConfig+0x79c>)
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	4a37      	ldr	r2, [pc, #220]	; (8009210 <HAL_RCC_OscConfig+0x7a0>)
 8009132:	4013      	ands	r3, r2
 8009134:	0019      	movs	r1, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	431a      	orrs	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009144:	431a      	orrs	r2, r3
 8009146:	4b31      	ldr	r3, [pc, #196]	; (800920c <HAL_RCC_OscConfig+0x79c>)
 8009148:	430a      	orrs	r2, r1
 800914a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800914c:	4b2f      	ldr	r3, [pc, #188]	; (800920c <HAL_RCC_OscConfig+0x79c>)
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	4b2e      	ldr	r3, [pc, #184]	; (800920c <HAL_RCC_OscConfig+0x79c>)
 8009152:	2180      	movs	r1, #128	; 0x80
 8009154:	0449      	lsls	r1, r1, #17
 8009156:	430a      	orrs	r2, r1
 8009158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800915a:	f7fb ff8c 	bl	8005076 <HAL_GetTick>
 800915e:	0003      	movs	r3, r0
 8009160:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009162:	e008      	b.n	8009176 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009164:	f7fb ff87 	bl	8005076 <HAL_GetTick>
 8009168:	0002      	movs	r2, r0
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	2b02      	cmp	r3, #2
 8009170:	d901      	bls.n	8009176 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e045      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009176:	4b25      	ldr	r3, [pc, #148]	; (800920c <HAL_RCC_OscConfig+0x79c>)
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	2380      	movs	r3, #128	; 0x80
 800917c:	049b      	lsls	r3, r3, #18
 800917e:	4013      	ands	r3, r2
 8009180:	d0f0      	beq.n	8009164 <HAL_RCC_OscConfig+0x6f4>
 8009182:	e03d      	b.n	8009200 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009184:	4b21      	ldr	r3, [pc, #132]	; (800920c <HAL_RCC_OscConfig+0x79c>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4b20      	ldr	r3, [pc, #128]	; (800920c <HAL_RCC_OscConfig+0x79c>)
 800918a:	4922      	ldr	r1, [pc, #136]	; (8009214 <HAL_RCC_OscConfig+0x7a4>)
 800918c:	400a      	ands	r2, r1
 800918e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009190:	f7fb ff71 	bl	8005076 <HAL_GetTick>
 8009194:	0003      	movs	r3, r0
 8009196:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009198:	e008      	b.n	80091ac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800919a:	f7fb ff6c 	bl	8005076 <HAL_GetTick>
 800919e:	0002      	movs	r2, r0
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d901      	bls.n	80091ac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e02a      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80091ac:	4b17      	ldr	r3, [pc, #92]	; (800920c <HAL_RCC_OscConfig+0x79c>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	2380      	movs	r3, #128	; 0x80
 80091b2:	049b      	lsls	r3, r3, #18
 80091b4:	4013      	ands	r3, r2
 80091b6:	d1f0      	bne.n	800919a <HAL_RCC_OscConfig+0x72a>
 80091b8:	e022      	b.n	8009200 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e01d      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80091c6:	4b11      	ldr	r3, [pc, #68]	; (800920c <HAL_RCC_OscConfig+0x79c>)
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	2380      	movs	r3, #128	; 0x80
 80091d0:	025b      	lsls	r3, r3, #9
 80091d2:	401a      	ands	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d8:	429a      	cmp	r2, r3
 80091da:	d10f      	bne.n	80091fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	23f0      	movs	r3, #240	; 0xf0
 80091e0:	039b      	lsls	r3, r3, #14
 80091e2:	401a      	ands	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d107      	bne.n	80091fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	23c0      	movs	r3, #192	; 0xc0
 80091f0:	041b      	lsls	r3, r3, #16
 80091f2:	401a      	ands	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d001      	beq.n	8009200 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e000      	b.n	8009202 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	0018      	movs	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	b00a      	add	sp, #40	; 0x28
 8009208:	bdb0      	pop	{r4, r5, r7, pc}
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	40021000 	.word	0x40021000
 8009210:	ff02ffff 	.word	0xff02ffff
 8009214:	feffffff 	.word	0xfeffffff

08009218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009218:	b5b0      	push	{r4, r5, r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e128      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800922c:	4b96      	ldr	r3, [pc, #600]	; (8009488 <HAL_RCC_ClockConfig+0x270>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2201      	movs	r2, #1
 8009232:	4013      	ands	r3, r2
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d91e      	bls.n	8009278 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800923a:	4b93      	ldr	r3, [pc, #588]	; (8009488 <HAL_RCC_ClockConfig+0x270>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2201      	movs	r2, #1
 8009240:	4393      	bics	r3, r2
 8009242:	0019      	movs	r1, r3
 8009244:	4b90      	ldr	r3, [pc, #576]	; (8009488 <HAL_RCC_ClockConfig+0x270>)
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	430a      	orrs	r2, r1
 800924a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800924c:	f7fb ff13 	bl	8005076 <HAL_GetTick>
 8009250:	0003      	movs	r3, r0
 8009252:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009254:	e009      	b.n	800926a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009256:	f7fb ff0e 	bl	8005076 <HAL_GetTick>
 800925a:	0002      	movs	r2, r0
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	4a8a      	ldr	r2, [pc, #552]	; (800948c <HAL_RCC_ClockConfig+0x274>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d901      	bls.n	800926a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e109      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800926a:	4b87      	ldr	r3, [pc, #540]	; (8009488 <HAL_RCC_ClockConfig+0x270>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2201      	movs	r2, #1
 8009270:	4013      	ands	r3, r2
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d1ee      	bne.n	8009256 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2202      	movs	r2, #2
 800927e:	4013      	ands	r3, r2
 8009280:	d009      	beq.n	8009296 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009282:	4b83      	ldr	r3, [pc, #524]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	22f0      	movs	r2, #240	; 0xf0
 8009288:	4393      	bics	r3, r2
 800928a:	0019      	movs	r1, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	4b7f      	ldr	r3, [pc, #508]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 8009292:	430a      	orrs	r2, r1
 8009294:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2201      	movs	r2, #1
 800929c:	4013      	ands	r3, r2
 800929e:	d100      	bne.n	80092a2 <HAL_RCC_ClockConfig+0x8a>
 80092a0:	e089      	b.n	80093b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d107      	bne.n	80092ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092aa:	4b79      	ldr	r3, [pc, #484]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	2380      	movs	r3, #128	; 0x80
 80092b0:	029b      	lsls	r3, r3, #10
 80092b2:	4013      	ands	r3, r2
 80092b4:	d120      	bne.n	80092f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e0e1      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d107      	bne.n	80092d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092c2:	4b73      	ldr	r3, [pc, #460]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	2380      	movs	r3, #128	; 0x80
 80092c8:	049b      	lsls	r3, r3, #18
 80092ca:	4013      	ands	r3, r2
 80092cc:	d114      	bne.n	80092f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e0d5      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d106      	bne.n	80092e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092da:	4b6d      	ldr	r3, [pc, #436]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2204      	movs	r2, #4
 80092e0:	4013      	ands	r3, r2
 80092e2:	d109      	bne.n	80092f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e0ca      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80092e8:	4b69      	ldr	r3, [pc, #420]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	2380      	movs	r3, #128	; 0x80
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4013      	ands	r3, r2
 80092f2:	d101      	bne.n	80092f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e0c2      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092f8:	4b65      	ldr	r3, [pc, #404]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	2203      	movs	r2, #3
 80092fe:	4393      	bics	r3, r2
 8009300:	0019      	movs	r1, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	4b62      	ldr	r3, [pc, #392]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 8009308:	430a      	orrs	r2, r1
 800930a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800930c:	f7fb feb3 	bl	8005076 <HAL_GetTick>
 8009310:	0003      	movs	r3, r0
 8009312:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d111      	bne.n	8009340 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800931c:	e009      	b.n	8009332 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800931e:	f7fb feaa 	bl	8005076 <HAL_GetTick>
 8009322:	0002      	movs	r2, r0
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	4a58      	ldr	r2, [pc, #352]	; (800948c <HAL_RCC_ClockConfig+0x274>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d901      	bls.n	8009332 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e0a5      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009332:	4b57      	ldr	r3, [pc, #348]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	220c      	movs	r2, #12
 8009338:	4013      	ands	r3, r2
 800933a:	2b08      	cmp	r3, #8
 800933c:	d1ef      	bne.n	800931e <HAL_RCC_ClockConfig+0x106>
 800933e:	e03a      	b.n	80093b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d111      	bne.n	800936c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009348:	e009      	b.n	800935e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800934a:	f7fb fe94 	bl	8005076 <HAL_GetTick>
 800934e:	0002      	movs	r2, r0
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	4a4d      	ldr	r2, [pc, #308]	; (800948c <HAL_RCC_ClockConfig+0x274>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d901      	bls.n	800935e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e08f      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800935e:	4b4c      	ldr	r3, [pc, #304]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	220c      	movs	r2, #12
 8009364:	4013      	ands	r3, r2
 8009366:	2b0c      	cmp	r3, #12
 8009368:	d1ef      	bne.n	800934a <HAL_RCC_ClockConfig+0x132>
 800936a:	e024      	b.n	80093b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d11b      	bne.n	80093ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009374:	e009      	b.n	800938a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009376:	f7fb fe7e 	bl	8005076 <HAL_GetTick>
 800937a:	0002      	movs	r2, r0
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	4a42      	ldr	r2, [pc, #264]	; (800948c <HAL_RCC_ClockConfig+0x274>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d901      	bls.n	800938a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e079      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800938a:	4b41      	ldr	r3, [pc, #260]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	220c      	movs	r2, #12
 8009390:	4013      	ands	r3, r2
 8009392:	2b04      	cmp	r3, #4
 8009394:	d1ef      	bne.n	8009376 <HAL_RCC_ClockConfig+0x15e>
 8009396:	e00e      	b.n	80093b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009398:	f7fb fe6d 	bl	8005076 <HAL_GetTick>
 800939c:	0002      	movs	r2, r0
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	4a3a      	ldr	r2, [pc, #232]	; (800948c <HAL_RCC_ClockConfig+0x274>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d901      	bls.n	80093ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e068      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80093ac:	4b38      	ldr	r3, [pc, #224]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	220c      	movs	r2, #12
 80093b2:	4013      	ands	r3, r2
 80093b4:	d1f0      	bne.n	8009398 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093b6:	4b34      	ldr	r3, [pc, #208]	; (8009488 <HAL_RCC_ClockConfig+0x270>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2201      	movs	r2, #1
 80093bc:	4013      	ands	r3, r2
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d21e      	bcs.n	8009402 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093c4:	4b30      	ldr	r3, [pc, #192]	; (8009488 <HAL_RCC_ClockConfig+0x270>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2201      	movs	r2, #1
 80093ca:	4393      	bics	r3, r2
 80093cc:	0019      	movs	r1, r3
 80093ce:	4b2e      	ldr	r3, [pc, #184]	; (8009488 <HAL_RCC_ClockConfig+0x270>)
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80093d6:	f7fb fe4e 	bl	8005076 <HAL_GetTick>
 80093da:	0003      	movs	r3, r0
 80093dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093de:	e009      	b.n	80093f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093e0:	f7fb fe49 	bl	8005076 <HAL_GetTick>
 80093e4:	0002      	movs	r2, r0
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	4a28      	ldr	r2, [pc, #160]	; (800948c <HAL_RCC_ClockConfig+0x274>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d901      	bls.n	80093f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e044      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093f4:	4b24      	ldr	r3, [pc, #144]	; (8009488 <HAL_RCC_ClockConfig+0x270>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2201      	movs	r2, #1
 80093fa:	4013      	ands	r3, r2
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d1ee      	bne.n	80093e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2204      	movs	r2, #4
 8009408:	4013      	ands	r3, r2
 800940a:	d009      	beq.n	8009420 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800940c:	4b20      	ldr	r3, [pc, #128]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	4a20      	ldr	r2, [pc, #128]	; (8009494 <HAL_RCC_ClockConfig+0x27c>)
 8009412:	4013      	ands	r3, r2
 8009414:	0019      	movs	r1, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	4b1d      	ldr	r3, [pc, #116]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 800941c:	430a      	orrs	r2, r1
 800941e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2208      	movs	r2, #8
 8009426:	4013      	ands	r3, r2
 8009428:	d00a      	beq.n	8009440 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800942a:	4b19      	ldr	r3, [pc, #100]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	4a1a      	ldr	r2, [pc, #104]	; (8009498 <HAL_RCC_ClockConfig+0x280>)
 8009430:	4013      	ands	r3, r2
 8009432:	0019      	movs	r1, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	00da      	lsls	r2, r3, #3
 800943a:	4b15      	ldr	r3, [pc, #84]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 800943c:	430a      	orrs	r2, r1
 800943e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009440:	f000 f832 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 8009444:	0001      	movs	r1, r0
 8009446:	4b12      	ldr	r3, [pc, #72]	; (8009490 <HAL_RCC_ClockConfig+0x278>)
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	091b      	lsrs	r3, r3, #4
 800944c:	220f      	movs	r2, #15
 800944e:	4013      	ands	r3, r2
 8009450:	4a12      	ldr	r2, [pc, #72]	; (800949c <HAL_RCC_ClockConfig+0x284>)
 8009452:	5cd3      	ldrb	r3, [r2, r3]
 8009454:	000a      	movs	r2, r1
 8009456:	40da      	lsrs	r2, r3
 8009458:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <HAL_RCC_ClockConfig+0x288>)
 800945a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800945c:	4b11      	ldr	r3, [pc, #68]	; (80094a4 <HAL_RCC_ClockConfig+0x28c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	250b      	movs	r5, #11
 8009462:	197c      	adds	r4, r7, r5
 8009464:	0018      	movs	r0, r3
 8009466:	f7fb fdfd 	bl	8005064 <HAL_InitTick>
 800946a:	0003      	movs	r3, r0
 800946c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800946e:	197b      	adds	r3, r7, r5
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8009476:	197b      	adds	r3, r7, r5
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	e000      	b.n	800947e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	0018      	movs	r0, r3
 8009480:	46bd      	mov	sp, r7
 8009482:	b004      	add	sp, #16
 8009484:	bdb0      	pop	{r4, r5, r7, pc}
 8009486:	46c0      	nop			; (mov r8, r8)
 8009488:	40022000 	.word	0x40022000
 800948c:	00001388 	.word	0x00001388
 8009490:	40021000 	.word	0x40021000
 8009494:	fffff8ff 	.word	0xfffff8ff
 8009498:	ffffc7ff 	.word	0xffffc7ff
 800949c:	0801e514 	.word	0x0801e514
 80094a0:	20000070 	.word	0x20000070
 80094a4:	20000074 	.word	0x20000074

080094a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094a8:	b5b0      	push	{r4, r5, r7, lr}
 80094aa:	b08e      	sub	sp, #56	; 0x38
 80094ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80094ae:	4b4c      	ldr	r3, [pc, #304]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80094b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b6:	230c      	movs	r3, #12
 80094b8:	4013      	ands	r3, r2
 80094ba:	2b0c      	cmp	r3, #12
 80094bc:	d014      	beq.n	80094e8 <HAL_RCC_GetSysClockFreq+0x40>
 80094be:	d900      	bls.n	80094c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80094c0:	e07b      	b.n	80095ba <HAL_RCC_GetSysClockFreq+0x112>
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d002      	beq.n	80094cc <HAL_RCC_GetSysClockFreq+0x24>
 80094c6:	2b08      	cmp	r3, #8
 80094c8:	d00b      	beq.n	80094e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80094ca:	e076      	b.n	80095ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80094cc:	4b44      	ldr	r3, [pc, #272]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2210      	movs	r2, #16
 80094d2:	4013      	ands	r3, r2
 80094d4:	d002      	beq.n	80094dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80094d6:	4b43      	ldr	r3, [pc, #268]	; (80095e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80094d8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80094da:	e07c      	b.n	80095d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80094dc:	4b42      	ldr	r3, [pc, #264]	; (80095e8 <HAL_RCC_GetSysClockFreq+0x140>)
 80094de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80094e0:	e079      	b.n	80095d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80094e2:	4b42      	ldr	r3, [pc, #264]	; (80095ec <HAL_RCC_GetSysClockFreq+0x144>)
 80094e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80094e6:	e076      	b.n	80095d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80094e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ea:	0c9a      	lsrs	r2, r3, #18
 80094ec:	230f      	movs	r3, #15
 80094ee:	401a      	ands	r2, r3
 80094f0:	4b3f      	ldr	r3, [pc, #252]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x148>)
 80094f2:	5c9b      	ldrb	r3, [r3, r2]
 80094f4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	0d9a      	lsrs	r2, r3, #22
 80094fa:	2303      	movs	r3, #3
 80094fc:	4013      	ands	r3, r2
 80094fe:	3301      	adds	r3, #1
 8009500:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009502:	4b37      	ldr	r3, [pc, #220]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	2380      	movs	r3, #128	; 0x80
 8009508:	025b      	lsls	r3, r3, #9
 800950a:	4013      	ands	r3, r2
 800950c:	d01a      	beq.n	8009544 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	61bb      	str	r3, [r7, #24]
 8009512:	2300      	movs	r3, #0
 8009514:	61fb      	str	r3, [r7, #28]
 8009516:	4a35      	ldr	r2, [pc, #212]	; (80095ec <HAL_RCC_GetSysClockFreq+0x144>)
 8009518:	2300      	movs	r3, #0
 800951a:	69b8      	ldr	r0, [r7, #24]
 800951c:	69f9      	ldr	r1, [r7, #28]
 800951e:	f7f7 f82d 	bl	800057c <__aeabi_lmul>
 8009522:	0002      	movs	r2, r0
 8009524:	000b      	movs	r3, r1
 8009526:	0010      	movs	r0, r2
 8009528:	0019      	movs	r1, r3
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	613b      	str	r3, [r7, #16]
 800952e:	2300      	movs	r3, #0
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f7f7 f801 	bl	800053c <__aeabi_uldivmod>
 800953a:	0002      	movs	r2, r0
 800953c:	000b      	movs	r3, r1
 800953e:	0013      	movs	r3, r2
 8009540:	637b      	str	r3, [r7, #52]	; 0x34
 8009542:	e037      	b.n	80095b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009544:	4b26      	ldr	r3, [pc, #152]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2210      	movs	r2, #16
 800954a:	4013      	ands	r3, r2
 800954c:	d01a      	beq.n	8009584 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009550:	60bb      	str	r3, [r7, #8]
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	4a23      	ldr	r2, [pc, #140]	; (80095e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009558:	2300      	movs	r3, #0
 800955a:	68b8      	ldr	r0, [r7, #8]
 800955c:	68f9      	ldr	r1, [r7, #12]
 800955e:	f7f7 f80d 	bl	800057c <__aeabi_lmul>
 8009562:	0002      	movs	r2, r0
 8009564:	000b      	movs	r3, r1
 8009566:	0010      	movs	r0, r2
 8009568:	0019      	movs	r1, r3
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	603b      	str	r3, [r7, #0]
 800956e:	2300      	movs	r3, #0
 8009570:	607b      	str	r3, [r7, #4]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f7f6 ffe1 	bl	800053c <__aeabi_uldivmod>
 800957a:	0002      	movs	r2, r0
 800957c:	000b      	movs	r3, r1
 800957e:	0013      	movs	r3, r2
 8009580:	637b      	str	r3, [r7, #52]	; 0x34
 8009582:	e017      	b.n	80095b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	0018      	movs	r0, r3
 8009588:	2300      	movs	r3, #0
 800958a:	0019      	movs	r1, r3
 800958c:	4a16      	ldr	r2, [pc, #88]	; (80095e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800958e:	2300      	movs	r3, #0
 8009590:	f7f6 fff4 	bl	800057c <__aeabi_lmul>
 8009594:	0002      	movs	r2, r0
 8009596:	000b      	movs	r3, r1
 8009598:	0010      	movs	r0, r2
 800959a:	0019      	movs	r1, r3
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	001c      	movs	r4, r3
 80095a0:	2300      	movs	r3, #0
 80095a2:	001d      	movs	r5, r3
 80095a4:	0022      	movs	r2, r4
 80095a6:	002b      	movs	r3, r5
 80095a8:	f7f6 ffc8 	bl	800053c <__aeabi_uldivmod>
 80095ac:	0002      	movs	r2, r0
 80095ae:	000b      	movs	r3, r1
 80095b0:	0013      	movs	r3, r2
 80095b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80095b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80095b8:	e00d      	b.n	80095d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80095ba:	4b09      	ldr	r3, [pc, #36]	; (80095e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	0b5b      	lsrs	r3, r3, #13
 80095c0:	2207      	movs	r2, #7
 80095c2:	4013      	ands	r3, r2
 80095c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	3301      	adds	r3, #1
 80095ca:	2280      	movs	r2, #128	; 0x80
 80095cc:	0212      	lsls	r2, r2, #8
 80095ce:	409a      	lsls	r2, r3
 80095d0:	0013      	movs	r3, r2
 80095d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80095d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80095d8:	0018      	movs	r0, r3
 80095da:	46bd      	mov	sp, r7
 80095dc:	b00e      	add	sp, #56	; 0x38
 80095de:	bdb0      	pop	{r4, r5, r7, pc}
 80095e0:	40021000 	.word	0x40021000
 80095e4:	003d0900 	.word	0x003d0900
 80095e8:	00f42400 	.word	0x00f42400
 80095ec:	007a1200 	.word	0x007a1200
 80095f0:	0801e52c 	.word	0x0801e52c

080095f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095f8:	4b02      	ldr	r3, [pc, #8]	; (8009604 <HAL_RCC_GetHCLKFreq+0x10>)
 80095fa:	681b      	ldr	r3, [r3, #0]
}
 80095fc:	0018      	movs	r0, r3
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	46c0      	nop			; (mov r8, r8)
 8009604:	20000070 	.word	0x20000070

08009608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800960c:	f7ff fff2 	bl	80095f4 <HAL_RCC_GetHCLKFreq>
 8009610:	0001      	movs	r1, r0
 8009612:	4b06      	ldr	r3, [pc, #24]	; (800962c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	0a1b      	lsrs	r3, r3, #8
 8009618:	2207      	movs	r2, #7
 800961a:	4013      	ands	r3, r2
 800961c:	4a04      	ldr	r2, [pc, #16]	; (8009630 <HAL_RCC_GetPCLK1Freq+0x28>)
 800961e:	5cd3      	ldrb	r3, [r2, r3]
 8009620:	40d9      	lsrs	r1, r3
 8009622:	000b      	movs	r3, r1
}
 8009624:	0018      	movs	r0, r3
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	46c0      	nop			; (mov r8, r8)
 800962c:	40021000 	.word	0x40021000
 8009630:	0801e524 	.word	0x0801e524

08009634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009638:	f7ff ffdc 	bl	80095f4 <HAL_RCC_GetHCLKFreq>
 800963c:	0001      	movs	r1, r0
 800963e:	4b06      	ldr	r3, [pc, #24]	; (8009658 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	0adb      	lsrs	r3, r3, #11
 8009644:	2207      	movs	r2, #7
 8009646:	4013      	ands	r3, r2
 8009648:	4a04      	ldr	r2, [pc, #16]	; (800965c <HAL_RCC_GetPCLK2Freq+0x28>)
 800964a:	5cd3      	ldrb	r3, [r2, r3]
 800964c:	40d9      	lsrs	r1, r3
 800964e:	000b      	movs	r3, r1
}
 8009650:	0018      	movs	r0, r3
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	46c0      	nop			; (mov r8, r8)
 8009658:	40021000 	.word	0x40021000
 800965c:	0801e524 	.word	0x0801e524

08009660 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8009668:	2017      	movs	r0, #23
 800966a:	183b      	adds	r3, r7, r0
 800966c:	2200      	movs	r2, #0
 800966e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2220      	movs	r2, #32
 8009676:	4013      	ands	r3, r2
 8009678:	d100      	bne.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800967a:	e0c2      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800967c:	4b98      	ldr	r3, [pc, #608]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800967e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009680:	2380      	movs	r3, #128	; 0x80
 8009682:	055b      	lsls	r3, r3, #21
 8009684:	4013      	ands	r3, r2
 8009686:	d109      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009688:	4b95      	ldr	r3, [pc, #596]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800968a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800968c:	4b94      	ldr	r3, [pc, #592]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800968e:	2180      	movs	r1, #128	; 0x80
 8009690:	0549      	lsls	r1, r1, #21
 8009692:	430a      	orrs	r2, r1
 8009694:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8009696:	183b      	adds	r3, r7, r0
 8009698:	2201      	movs	r2, #1
 800969a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800969c:	4b91      	ldr	r3, [pc, #580]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	2380      	movs	r3, #128	; 0x80
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	4013      	ands	r3, r2
 80096a6:	d11a      	bne.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096a8:	4b8e      	ldr	r3, [pc, #568]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	4b8d      	ldr	r3, [pc, #564]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80096ae:	2180      	movs	r1, #128	; 0x80
 80096b0:	0049      	lsls	r1, r1, #1
 80096b2:	430a      	orrs	r2, r1
 80096b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096b6:	f7fb fcde 	bl	8005076 <HAL_GetTick>
 80096ba:	0003      	movs	r3, r0
 80096bc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096be:	e008      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096c0:	f7fb fcd9 	bl	8005076 <HAL_GetTick>
 80096c4:	0002      	movs	r2, r0
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	2b64      	cmp	r3, #100	; 0x64
 80096cc:	d901      	bls.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e102      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096d2:	4b84      	ldr	r3, [pc, #528]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	2380      	movs	r3, #128	; 0x80
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	4013      	ands	r3, r2
 80096dc:	d0f0      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80096de:	4b80      	ldr	r3, [pc, #512]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	23c0      	movs	r3, #192	; 0xc0
 80096e4:	039b      	lsls	r3, r3, #14
 80096e6:	4013      	ands	r3, r2
 80096e8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	23c0      	movs	r3, #192	; 0xc0
 80096f0:	039b      	lsls	r3, r3, #14
 80096f2:	4013      	ands	r3, r2
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d013      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	23c0      	movs	r3, #192	; 0xc0
 8009700:	029b      	lsls	r3, r3, #10
 8009702:	401a      	ands	r2, r3
 8009704:	23c0      	movs	r3, #192	; 0xc0
 8009706:	029b      	lsls	r3, r3, #10
 8009708:	429a      	cmp	r2, r3
 800970a:	d10a      	bne.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800970c:	4b74      	ldr	r3, [pc, #464]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	2380      	movs	r3, #128	; 0x80
 8009712:	029b      	lsls	r3, r3, #10
 8009714:	401a      	ands	r2, r3
 8009716:	2380      	movs	r3, #128	; 0x80
 8009718:	029b      	lsls	r3, r3, #10
 800971a:	429a      	cmp	r2, r3
 800971c:	d101      	bne.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e0da      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8009722:	4b6f      	ldr	r3, [pc, #444]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009726:	23c0      	movs	r3, #192	; 0xc0
 8009728:	029b      	lsls	r3, r3, #10
 800972a:	4013      	ands	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d03b      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	23c0      	movs	r3, #192	; 0xc0
 800973a:	029b      	lsls	r3, r3, #10
 800973c:	4013      	ands	r3, r2
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	429a      	cmp	r2, r3
 8009742:	d033      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2220      	movs	r2, #32
 800974a:	4013      	ands	r3, r2
 800974c:	d02e      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800974e:	4b64      	ldr	r3, [pc, #400]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009752:	4a65      	ldr	r2, [pc, #404]	; (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009754:	4013      	ands	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009758:	4b61      	ldr	r3, [pc, #388]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800975a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800975c:	4b60      	ldr	r3, [pc, #384]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800975e:	2180      	movs	r1, #128	; 0x80
 8009760:	0309      	lsls	r1, r1, #12
 8009762:	430a      	orrs	r2, r1
 8009764:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009766:	4b5e      	ldr	r3, [pc, #376]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800976a:	4b5d      	ldr	r3, [pc, #372]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800976c:	495f      	ldr	r1, [pc, #380]	; (80098ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800976e:	400a      	ands	r2, r1
 8009770:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009772:	4b5b      	ldr	r3, [pc, #364]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	2380      	movs	r3, #128	; 0x80
 800977c:	005b      	lsls	r3, r3, #1
 800977e:	4013      	ands	r3, r2
 8009780:	d014      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009782:	f7fb fc78 	bl	8005076 <HAL_GetTick>
 8009786:	0003      	movs	r3, r0
 8009788:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800978a:	e009      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800978c:	f7fb fc73 	bl	8005076 <HAL_GetTick>
 8009790:	0002      	movs	r2, r0
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	4a56      	ldr	r2, [pc, #344]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d901      	bls.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e09b      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097a0:	4b4f      	ldr	r3, [pc, #316]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097a4:	2380      	movs	r3, #128	; 0x80
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4013      	ands	r3, r2
 80097aa:	d0ef      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	23c0      	movs	r3, #192	; 0xc0
 80097b2:	029b      	lsls	r3, r3, #10
 80097b4:	401a      	ands	r2, r3
 80097b6:	23c0      	movs	r3, #192	; 0xc0
 80097b8:	029b      	lsls	r3, r3, #10
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d10c      	bne.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80097be:	4b48      	ldr	r3, [pc, #288]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a4c      	ldr	r2, [pc, #304]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	0019      	movs	r1, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	23c0      	movs	r3, #192	; 0xc0
 80097ce:	039b      	lsls	r3, r3, #14
 80097d0:	401a      	ands	r2, r3
 80097d2:	4b43      	ldr	r3, [pc, #268]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097d4:	430a      	orrs	r2, r1
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	4b41      	ldr	r3, [pc, #260]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	23c0      	movs	r3, #192	; 0xc0
 80097e2:	029b      	lsls	r3, r3, #10
 80097e4:	401a      	ands	r2, r3
 80097e6:	4b3e      	ldr	r3, [pc, #248]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097e8:	430a      	orrs	r2, r1
 80097ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80097ec:	2317      	movs	r3, #23
 80097ee:	18fb      	adds	r3, r7, r3
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d105      	bne.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097f6:	4b3a      	ldr	r3, [pc, #232]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097fa:	4b39      	ldr	r3, [pc, #228]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097fc:	493e      	ldr	r1, [pc, #248]	; (80098f8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80097fe:	400a      	ands	r2, r1
 8009800:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2201      	movs	r2, #1
 8009808:	4013      	ands	r3, r2
 800980a:	d009      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800980c:	4b34      	ldr	r3, [pc, #208]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800980e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009810:	2203      	movs	r2, #3
 8009812:	4393      	bics	r3, r2
 8009814:	0019      	movs	r1, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689a      	ldr	r2, [r3, #8]
 800981a:	4b31      	ldr	r3, [pc, #196]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800981c:	430a      	orrs	r2, r1
 800981e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2202      	movs	r2, #2
 8009826:	4013      	ands	r3, r2
 8009828:	d009      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800982a:	4b2d      	ldr	r3, [pc, #180]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800982c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800982e:	220c      	movs	r2, #12
 8009830:	4393      	bics	r3, r2
 8009832:	0019      	movs	r1, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68da      	ldr	r2, [r3, #12]
 8009838:	4b29      	ldr	r3, [pc, #164]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800983a:	430a      	orrs	r2, r1
 800983c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2204      	movs	r2, #4
 8009844:	4013      	ands	r3, r2
 8009846:	d009      	beq.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009848:	4b25      	ldr	r3, [pc, #148]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800984a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800984c:	4a2b      	ldr	r2, [pc, #172]	; (80098fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800984e:	4013      	ands	r3, r2
 8009850:	0019      	movs	r1, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	691a      	ldr	r2, [r3, #16]
 8009856:	4b22      	ldr	r3, [pc, #136]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009858:	430a      	orrs	r2, r1
 800985a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2208      	movs	r2, #8
 8009862:	4013      	ands	r3, r2
 8009864:	d009      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009866:	4b1e      	ldr	r3, [pc, #120]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800986a:	4a25      	ldr	r2, [pc, #148]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800986c:	4013      	ands	r3, r2
 800986e:	0019      	movs	r1, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	695a      	ldr	r2, [r3, #20]
 8009874:	4b1a      	ldr	r3, [pc, #104]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009876:	430a      	orrs	r2, r1
 8009878:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	2380      	movs	r3, #128	; 0x80
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	4013      	ands	r3, r2
 8009884:	d009      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009886:	4b16      	ldr	r3, [pc, #88]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800988a:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800988c:	4013      	ands	r3, r2
 800988e:	0019      	movs	r1, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	699a      	ldr	r2, [r3, #24]
 8009894:	4b12      	ldr	r3, [pc, #72]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009896:	430a      	orrs	r2, r1
 8009898:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2240      	movs	r2, #64	; 0x40
 80098a0:	4013      	ands	r3, r2
 80098a2:	d009      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098a4:	4b0e      	ldr	r3, [pc, #56]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a8:	4a16      	ldr	r2, [pc, #88]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80098aa:	4013      	ands	r3, r2
 80098ac:	0019      	movs	r1, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1a      	ldr	r2, [r3, #32]
 80098b2:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098b4:	430a      	orrs	r2, r1
 80098b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2280      	movs	r2, #128	; 0x80
 80098be:	4013      	ands	r3, r2
 80098c0:	d009      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80098c2:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c6:	4a10      	ldr	r2, [pc, #64]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	0019      	movs	r1, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	69da      	ldr	r2, [r3, #28]
 80098d0:	4b03      	ldr	r3, [pc, #12]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098d2:	430a      	orrs	r2, r1
 80098d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	0018      	movs	r0, r3
 80098da:	46bd      	mov	sp, r7
 80098dc:	b006      	add	sp, #24
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	40021000 	.word	0x40021000
 80098e4:	40007000 	.word	0x40007000
 80098e8:	fffcffff 	.word	0xfffcffff
 80098ec:	fff7ffff 	.word	0xfff7ffff
 80098f0:	00001388 	.word	0x00001388
 80098f4:	ffcfffff 	.word	0xffcfffff
 80098f8:	efffffff 	.word	0xefffffff
 80098fc:	fffff3ff 	.word	0xfffff3ff
 8009900:	ffffcfff 	.word	0xffffcfff
 8009904:	fbffffff 	.word	0xfbffffff
 8009908:	fff3ffff 	.word	0xfff3ffff

0800990c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e08e      	b.n	8009a3c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2221      	movs	r2, #33	; 0x21
 8009922:	5c9b      	ldrb	r3, [r3, r2]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d107      	bne.n	800993a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2220      	movs	r2, #32
 800992e:	2100      	movs	r1, #0
 8009930:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	0018      	movs	r0, r3
 8009936:	f7fa fa09 	bl	8003d4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2221      	movs	r2, #33	; 0x21
 800993e:	2102      	movs	r1, #2
 8009940:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	22ca      	movs	r2, #202	; 0xca
 8009948:	625a      	str	r2, [r3, #36]	; 0x24
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2253      	movs	r2, #83	; 0x53
 8009950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	0018      	movs	r0, r3
 8009956:	f000 fcf4 	bl	800a342 <RTC_EnterInitMode>
 800995a:	1e03      	subs	r3, r0, #0
 800995c:	d009      	beq.n	8009972 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	22ff      	movs	r2, #255	; 0xff
 8009964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2221      	movs	r2, #33	; 0x21
 800996a:	2104      	movs	r1, #4
 800996c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e064      	b.n	8009a3c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	689a      	ldr	r2, [r3, #8]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4931      	ldr	r1, [pc, #196]	; (8009a44 <HAL_RTC_Init+0x138>)
 800997e:	400a      	ands	r2, r1
 8009980:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6899      	ldr	r1, [r3, #8]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	431a      	orrs	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	430a      	orrs	r2, r1
 800999e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	68d2      	ldr	r2, [r2, #12]
 80099a8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6919      	ldr	r1, [r3, #16]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	041a      	lsls	r2, r3, #16
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2180      	movs	r1, #128	; 0x80
 80099ca:	438a      	bics	r2, r1
 80099cc:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2103      	movs	r1, #3
 80099da:	438a      	bics	r2, r1
 80099dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	69da      	ldr	r2, [r3, #28]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	431a      	orrs	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	2220      	movs	r2, #32
 80099fe:	4013      	ands	r3, r2
 8009a00:	d113      	bne.n	8009a2a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	0018      	movs	r0, r3
 8009a06:	f000 fc75 	bl	800a2f4 <HAL_RTC_WaitForSynchro>
 8009a0a:	1e03      	subs	r3, r0, #0
 8009a0c:	d00d      	beq.n	8009a2a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	22ff      	movs	r2, #255	; 0xff
 8009a14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2221      	movs	r2, #33	; 0x21
 8009a1a:	2104      	movs	r1, #4
 8009a1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	2100      	movs	r1, #0
 8009a24:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e008      	b.n	8009a3c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	22ff      	movs	r2, #255	; 0xff
 8009a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2221      	movs	r2, #33	; 0x21
 8009a36:	2101      	movs	r1, #1
 8009a38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
  }
}
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b002      	add	sp, #8
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	ff8fffbf 	.word	0xff8fffbf

08009a48 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009a48:	b590      	push	{r4, r7, lr}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2220      	movs	r2, #32
 8009a58:	5c9b      	ldrb	r3, [r3, r2]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d101      	bne.n	8009a62 <HAL_RTC_SetTime+0x1a>
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e0ad      	b.n	8009bbe <HAL_RTC_SetTime+0x176>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2220      	movs	r2, #32
 8009a66:	2101      	movs	r1, #1
 8009a68:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2221      	movs	r2, #33	; 0x21
 8009a6e:	2102      	movs	r1, #2
 8009a70:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d125      	bne.n	8009ac4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	2240      	movs	r2, #64	; 0x40
 8009a80:	4013      	ands	r3, r2
 8009a82:	d102      	bne.n	8009a8a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2200      	movs	r2, #0
 8009a88:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	0018      	movs	r0, r3
 8009a90:	f000 fc81 	bl	800a396 <RTC_ByteToBcd2>
 8009a94:	0003      	movs	r3, r0
 8009a96:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	785b      	ldrb	r3, [r3, #1]
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	f000 fc7a 	bl	800a396 <RTC_ByteToBcd2>
 8009aa2:	0003      	movs	r3, r0
 8009aa4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009aa6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	789b      	ldrb	r3, [r3, #2]
 8009aac:	0018      	movs	r0, r3
 8009aae:	f000 fc72 	bl	800a396 <RTC_ByteToBcd2>
 8009ab2:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009ab4:	0022      	movs	r2, r4
 8009ab6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	78db      	ldrb	r3, [r3, #3]
 8009abc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	e017      	b.n	8009af4 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	2240      	movs	r2, #64	; 0x40
 8009acc:	4013      	ands	r3, r2
 8009ace:	d102      	bne.n	8009ad6 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	785b      	ldrb	r3, [r3, #1]
 8009ae0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009ae2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009ae8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	78db      	ldrb	r3, [r3, #3]
 8009aee:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009af0:	4313      	orrs	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	22ca      	movs	r2, #202	; 0xca
 8009afa:	625a      	str	r2, [r3, #36]	; 0x24
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2253      	movs	r2, #83	; 0x53
 8009b02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	0018      	movs	r0, r3
 8009b08:	f000 fc1b 	bl	800a342 <RTC_EnterInitMode>
 8009b0c:	1e03      	subs	r3, r0, #0
 8009b0e:	d00d      	beq.n	8009b2c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	22ff      	movs	r2, #255	; 0xff
 8009b16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2221      	movs	r2, #33	; 0x21
 8009b1c:	2104      	movs	r1, #4
 8009b1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2220      	movs	r2, #32
 8009b24:	2100      	movs	r1, #0
 8009b26:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e048      	b.n	8009bbe <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	4925      	ldr	r1, [pc, #148]	; (8009bc8 <HAL_RTC_SetTime+0x180>)
 8009b34:	400a      	ands	r2, r1
 8009b36:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	689a      	ldr	r2, [r3, #8]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4922      	ldr	r1, [pc, #136]	; (8009bcc <HAL_RTC_SetTime+0x184>)
 8009b44:	400a      	ands	r2, r1
 8009b46:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6899      	ldr	r1, [r3, #8]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	431a      	orrs	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	430a      	orrs	r2, r1
 8009b5e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2180      	movs	r1, #128	; 0x80
 8009b6c:	438a      	bics	r2, r1
 8009b6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	2220      	movs	r2, #32
 8009b78:	4013      	ands	r3, r2
 8009b7a:	d113      	bne.n	8009ba4 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f000 fbb8 	bl	800a2f4 <HAL_RTC_WaitForSynchro>
 8009b84:	1e03      	subs	r3, r0, #0
 8009b86:	d00d      	beq.n	8009ba4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	22ff      	movs	r2, #255	; 0xff
 8009b8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2221      	movs	r2, #33	; 0x21
 8009b94:	2104      	movs	r1, #4
 8009b96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e00c      	b.n	8009bbe <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	22ff      	movs	r2, #255	; 0xff
 8009baa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2221      	movs	r2, #33	; 0x21
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	2100      	movs	r1, #0
 8009bba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
  }
}
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	b007      	add	sp, #28
 8009bc4:	bd90      	pop	{r4, r7, pc}
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	007f7f7f 	.word	0x007f7f7f
 8009bcc:	fffbffff 	.word	0xfffbffff

08009bd0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	045b      	lsls	r3, r3, #17
 8009bee:	0c5a      	lsrs	r2, r3, #17
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a22      	ldr	r2, [pc, #136]	; (8009c84 <HAL_RTC_GetTime+0xb4>)
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	0c1b      	lsrs	r3, r3, #16
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	223f      	movs	r2, #63	; 0x3f
 8009c08:	4013      	ands	r3, r2
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	0a1b      	lsrs	r3, r3, #8
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	227f      	movs	r2, #127	; 0x7f
 8009c18:	4013      	ands	r3, r2
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	227f      	movs	r2, #127	; 0x7f
 8009c26:	4013      	ands	r3, r2
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	0c1b      	lsrs	r3, r3, #16
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2240      	movs	r2, #64	; 0x40
 8009c36:	4013      	ands	r3, r2
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d11a      	bne.n	8009c7a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	0018      	movs	r0, r3
 8009c4a:	f000 fbcc 	bl	800a3e6 <RTC_Bcd2ToByte>
 8009c4e:	0003      	movs	r3, r0
 8009c50:	001a      	movs	r2, r3
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	785b      	ldrb	r3, [r3, #1]
 8009c5a:	0018      	movs	r0, r3
 8009c5c:	f000 fbc3 	bl	800a3e6 <RTC_Bcd2ToByte>
 8009c60:	0003      	movs	r3, r0
 8009c62:	001a      	movs	r2, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	789b      	ldrb	r3, [r3, #2]
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	f000 fbba 	bl	800a3e6 <RTC_Bcd2ToByte>
 8009c72:	0003      	movs	r3, r0
 8009c74:	001a      	movs	r2, r3
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	0018      	movs	r0, r3
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	b006      	add	sp, #24
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	007f7f7f 	.word	0x007f7f7f

08009c88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009c88:	b590      	push	{r4, r7, lr}
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2220      	movs	r2, #32
 8009c98:	5c9b      	ldrb	r3, [r3, r2]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d101      	bne.n	8009ca2 <HAL_RTC_SetDate+0x1a>
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	e099      	b.n	8009dd6 <HAL_RTC_SetDate+0x14e>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2220      	movs	r2, #32
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2221      	movs	r2, #33	; 0x21
 8009cae:	2102      	movs	r1, #2
 8009cb0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10e      	bne.n	8009cd6 <HAL_RTC_SetDate+0x4e>
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	785b      	ldrb	r3, [r3, #1]
 8009cbc:	001a      	movs	r2, r3
 8009cbe:	2310      	movs	r3, #16
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	d008      	beq.n	8009cd6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	785b      	ldrb	r3, [r3, #1]
 8009cc8:	2210      	movs	r2, #16
 8009cca:	4393      	bics	r3, r2
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	330a      	adds	r3, #10
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d11c      	bne.n	8009d16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	78db      	ldrb	r3, [r3, #3]
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f000 fb58 	bl	800a396 <RTC_ByteToBcd2>
 8009ce6:	0003      	movs	r3, r0
 8009ce8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	785b      	ldrb	r3, [r3, #1]
 8009cee:	0018      	movs	r0, r3
 8009cf0:	f000 fb51 	bl	800a396 <RTC_ByteToBcd2>
 8009cf4:	0003      	movs	r3, r0
 8009cf6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009cf8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	789b      	ldrb	r3, [r3, #2]
 8009cfe:	0018      	movs	r0, r3
 8009d00:	f000 fb49 	bl	800a396 <RTC_ByteToBcd2>
 8009d04:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009d06:	0022      	movs	r2, r4
 8009d08:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009d10:	4313      	orrs	r3, r2
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e00e      	b.n	8009d34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	78db      	ldrb	r3, [r3, #3]
 8009d1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	785b      	ldrb	r3, [r3, #1]
 8009d20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009d22:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009d28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009d30:	4313      	orrs	r3, r2
 8009d32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	22ca      	movs	r2, #202	; 0xca
 8009d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2253      	movs	r2, #83	; 0x53
 8009d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	0018      	movs	r0, r3
 8009d48:	f000 fafb 	bl	800a342 <RTC_EnterInitMode>
 8009d4c:	1e03      	subs	r3, r0, #0
 8009d4e:	d00d      	beq.n	8009d6c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	22ff      	movs	r2, #255	; 0xff
 8009d56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2221      	movs	r2, #33	; 0x21
 8009d5c:	2104      	movs	r1, #4
 8009d5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2220      	movs	r2, #32
 8009d64:	2100      	movs	r1, #0
 8009d66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e034      	b.n	8009dd6 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	491b      	ldr	r1, [pc, #108]	; (8009de0 <HAL_RTC_SetDate+0x158>)
 8009d74:	400a      	ands	r2, r1
 8009d76:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68da      	ldr	r2, [r3, #12]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2180      	movs	r1, #128	; 0x80
 8009d84:	438a      	bics	r2, r1
 8009d86:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	2220      	movs	r2, #32
 8009d90:	4013      	ands	r3, r2
 8009d92:	d113      	bne.n	8009dbc <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	0018      	movs	r0, r3
 8009d98:	f000 faac 	bl	800a2f4 <HAL_RTC_WaitForSynchro>
 8009d9c:	1e03      	subs	r3, r0, #0
 8009d9e:	d00d      	beq.n	8009dbc <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	22ff      	movs	r2, #255	; 0xff
 8009da6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2221      	movs	r2, #33	; 0x21
 8009dac:	2104      	movs	r1, #4
 8009dae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2220      	movs	r2, #32
 8009db4:	2100      	movs	r1, #0
 8009db6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e00c      	b.n	8009dd6 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	22ff      	movs	r2, #255	; 0xff
 8009dc2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2221      	movs	r2, #33	; 0x21
 8009dc8:	2101      	movs	r1, #1
 8009dca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
  }
}
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	b007      	add	sp, #28
 8009ddc:	bd90      	pop	{r4, r7, pc}
 8009dde:	46c0      	nop			; (mov r8, r8)
 8009de0:	00ffff3f 	.word	0x00ffff3f

08009de4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	4a21      	ldr	r2, [pc, #132]	; (8009e7c <HAL_RTC_GetDate+0x98>)
 8009df8:	4013      	ands	r3, r2
 8009dfa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	0c1b      	lsrs	r3, r3, #16
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	0a1b      	lsrs	r3, r3, #8
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	221f      	movs	r2, #31
 8009e0e:	4013      	ands	r3, r2
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	223f      	movs	r2, #63	; 0x3f
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	0b5b      	lsrs	r3, r3, #13
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2207      	movs	r2, #7
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d11a      	bne.n	8009e70 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	78db      	ldrb	r3, [r3, #3]
 8009e3e:	0018      	movs	r0, r3
 8009e40:	f000 fad1 	bl	800a3e6 <RTC_Bcd2ToByte>
 8009e44:	0003      	movs	r3, r0
 8009e46:	001a      	movs	r2, r3
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	0018      	movs	r0, r3
 8009e52:	f000 fac8 	bl	800a3e6 <RTC_Bcd2ToByte>
 8009e56:	0003      	movs	r3, r0
 8009e58:	001a      	movs	r2, r3
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	789b      	ldrb	r3, [r3, #2]
 8009e62:	0018      	movs	r0, r3
 8009e64:	f000 fabf 	bl	800a3e6 <RTC_Bcd2ToByte>
 8009e68:	0003      	movs	r3, r0
 8009e6a:	001a      	movs	r2, r3
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	0018      	movs	r0, r3
 8009e74:	46bd      	mov	sp, r7
 8009e76:	b006      	add	sp, #24
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	00ffff3f 	.word	0x00ffff3f

08009e80 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009e80:	b590      	push	{r4, r7, lr}
 8009e82:	b089      	sub	sp, #36	; 0x24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	5c9b      	ldrb	r3, [r3, r2]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d101      	bne.n	8009e9a <HAL_RTC_SetAlarm_IT+0x1a>
 8009e96:	2302      	movs	r3, #2
 8009e98:	e130      	b.n	800a0fc <HAL_RTC_SetAlarm_IT+0x27c>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2221      	movs	r2, #33	; 0x21
 8009ea6:	2102      	movs	r1, #2
 8009ea8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d136      	bne.n	8009f1e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	2240      	movs	r2, #64	; 0x40
 8009eb8:	4013      	ands	r3, r2
 8009eba:	d102      	bne.n	8009ec2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	f000 fa65 	bl	800a396 <RTC_ByteToBcd2>
 8009ecc:	0003      	movs	r3, r0
 8009ece:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	f000 fa5e 	bl	800a396 <RTC_ByteToBcd2>
 8009eda:	0003      	movs	r3, r0
 8009edc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009ede:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	789b      	ldrb	r3, [r3, #2]
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f000 fa56 	bl	800a396 <RTC_ByteToBcd2>
 8009eea:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009eec:	0022      	movs	r2, r4
 8009eee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	78db      	ldrb	r3, [r3, #3]
 8009ef4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	2220      	movs	r2, #32
 8009efe:	5c9b      	ldrb	r3, [r3, r2]
 8009f00:	0018      	movs	r0, r3
 8009f02:	f000 fa48 	bl	800a396 <RTC_ByteToBcd2>
 8009f06:	0003      	movs	r3, r0
 8009f08:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009f0a:	0022      	movs	r2, r4
 8009f0c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009f12:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	61fb      	str	r3, [r7, #28]
 8009f1c:	e022      	b.n	8009f64 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	2240      	movs	r2, #64	; 0x40
 8009f26:	4013      	ands	r3, r2
 8009f28:	d102      	bne.n	8009f30 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	785b      	ldrb	r3, [r3, #1]
 8009f3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009f3c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009f42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	78db      	ldrb	r3, [r3, #3]
 8009f48:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009f4a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2120      	movs	r1, #32
 8009f50:	5c5b      	ldrb	r3, [r3, r1]
 8009f52:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009f54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009f5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009f60:	4313      	orrs	r3, r2
 8009f62:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	22ca      	movs	r2, #202	; 0xca
 8009f76:	625a      	str	r2, [r3, #36]	; 0x24
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2253      	movs	r2, #83	; 0x53
 8009f7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f84:	2380      	movs	r3, #128	; 0x80
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d14e      	bne.n	800a02a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	689a      	ldr	r2, [r3, #8]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	495b      	ldr	r1, [pc, #364]	; (800a104 <HAL_RTC_SetAlarm_IT+0x284>)
 8009f98:	400a      	ands	r2, r1
 8009f9a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	22ff      	movs	r2, #255	; 0xff
 8009fa4:	401a      	ands	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4957      	ldr	r1, [pc, #348]	; (800a108 <HAL_RTC_SetAlarm_IT+0x288>)
 8009fac:	430a      	orrs	r2, r1
 8009fae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009fb0:	f7fb f861 	bl	8005076 <HAL_GetTick>
 8009fb4:	0003      	movs	r3, r0
 8009fb6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009fb8:	e016      	b.n	8009fe8 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009fba:	f7fb f85c 	bl	8005076 <HAL_GetTick>
 8009fbe:	0002      	movs	r2, r0
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	1ad2      	subs	r2, r2, r3
 8009fc4:	23fa      	movs	r3, #250	; 0xfa
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d90d      	bls.n	8009fe8 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	22ff      	movs	r2, #255	; 0xff
 8009fd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2221      	movs	r2, #33	; 0x21
 8009fd8:	2103      	movs	r1, #3
 8009fda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2220      	movs	r2, #32
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e089      	b.n	800a0fc <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	d0e2      	beq.n	8009fba <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	69fa      	ldr	r2, [r7, #28]
 8009ffa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689a      	ldr	r2, [r3, #8]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2180      	movs	r1, #128	; 0x80
 800a010:	0049      	lsls	r1, r1, #1
 800a012:	430a      	orrs	r2, r1
 800a014:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2180      	movs	r1, #128	; 0x80
 800a022:	0149      	lsls	r1, r1, #5
 800a024:	430a      	orrs	r2, r1
 800a026:	609a      	str	r2, [r3, #8]
 800a028:	e04d      	b.n	800a0c6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4935      	ldr	r1, [pc, #212]	; (800a10c <HAL_RTC_SetAlarm_IT+0x28c>)
 800a036:	400a      	ands	r2, r1
 800a038:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	22ff      	movs	r2, #255	; 0xff
 800a042:	401a      	ands	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4931      	ldr	r1, [pc, #196]	; (800a110 <HAL_RTC_SetAlarm_IT+0x290>)
 800a04a:	430a      	orrs	r2, r1
 800a04c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a04e:	f7fb f812 	bl	8005076 <HAL_GetTick>
 800a052:	0003      	movs	r3, r0
 800a054:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a056:	e016      	b.n	800a086 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a058:	f7fb f80d 	bl	8005076 <HAL_GetTick>
 800a05c:	0002      	movs	r2, r0
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	1ad2      	subs	r2, r2, r3
 800a062:	23fa      	movs	r3, #250	; 0xfa
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	429a      	cmp	r2, r3
 800a068:	d90d      	bls.n	800a086 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	22ff      	movs	r2, #255	; 0xff
 800a070:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2221      	movs	r2, #33	; 0x21
 800a076:	2103      	movs	r1, #3
 800a078:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2220      	movs	r2, #32
 800a07e:	2100      	movs	r1, #0
 800a080:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e03a      	b.n	800a0fc <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	2202      	movs	r2, #2
 800a08e:	4013      	ands	r3, r2
 800a090:	d0e2      	beq.n	800a058 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	69ba      	ldr	r2, [r7, #24]
 800a0a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689a      	ldr	r2, [r3, #8]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2180      	movs	r1, #128	; 0x80
 800a0ae:	0089      	lsls	r1, r1, #2
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2180      	movs	r1, #128	; 0x80
 800a0c0:	0189      	lsls	r1, r1, #6
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a0c6:	4b13      	ldr	r3, [pc, #76]	; (800a114 <HAL_RTC_SetAlarm_IT+0x294>)
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	4b12      	ldr	r3, [pc, #72]	; (800a114 <HAL_RTC_SetAlarm_IT+0x294>)
 800a0cc:	2180      	movs	r1, #128	; 0x80
 800a0ce:	0289      	lsls	r1, r1, #10
 800a0d0:	430a      	orrs	r2, r1
 800a0d2:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a0d4:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <HAL_RTC_SetAlarm_IT+0x294>)
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	4b0e      	ldr	r3, [pc, #56]	; (800a114 <HAL_RTC_SetAlarm_IT+0x294>)
 800a0da:	2180      	movs	r1, #128	; 0x80
 800a0dc:	0289      	lsls	r1, r1, #10
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	22ff      	movs	r2, #255	; 0xff
 800a0e8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2221      	movs	r2, #33	; 0x21
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2220      	movs	r2, #32
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	46bd      	mov	sp, r7
 800a100:	b009      	add	sp, #36	; 0x24
 800a102:	bd90      	pop	{r4, r7, pc}
 800a104:	fffffeff 	.word	0xfffffeff
 800a108:	fffffe7f 	.word	0xfffffe7f
 800a10c:	fffffdff 	.word	0xfffffdff
 800a110:	fffffd7f 	.word	0xfffffd7f
 800a114:	40010400 	.word	0x40010400

0800a118 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2220      	movs	r2, #32
 800a126:	5c9b      	ldrb	r3, [r3, r2]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d101      	bne.n	800a130 <HAL_RTC_DeactivateAlarm+0x18>
 800a12c:	2302      	movs	r3, #2
 800a12e:	e086      	b.n	800a23e <HAL_RTC_DeactivateAlarm+0x126>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2220      	movs	r2, #32
 800a134:	2101      	movs	r1, #1
 800a136:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2221      	movs	r2, #33	; 0x21
 800a13c:	2102      	movs	r1, #2
 800a13e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	22ca      	movs	r2, #202	; 0xca
 800a146:	625a      	str	r2, [r3, #36]	; 0x24
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2253      	movs	r2, #83	; 0x53
 800a14e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	2380      	movs	r3, #128	; 0x80
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	429a      	cmp	r2, r3
 800a158:	d132      	bne.n	800a1c0 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689a      	ldr	r2, [r3, #8]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4938      	ldr	r1, [pc, #224]	; (800a248 <HAL_RTC_DeactivateAlarm+0x130>)
 800a166:	400a      	ands	r2, r1
 800a168:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4935      	ldr	r1, [pc, #212]	; (800a24c <HAL_RTC_DeactivateAlarm+0x134>)
 800a176:	400a      	ands	r2, r1
 800a178:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a17a:	f7fa ff7c 	bl	8005076 <HAL_GetTick>
 800a17e:	0003      	movs	r3, r0
 800a180:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a182:	e016      	b.n	800a1b2 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a184:	f7fa ff77 	bl	8005076 <HAL_GetTick>
 800a188:	0002      	movs	r2, r0
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	1ad2      	subs	r2, r2, r3
 800a18e:	23fa      	movs	r3, #250	; 0xfa
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	429a      	cmp	r2, r3
 800a194:	d90d      	bls.n	800a1b2 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	22ff      	movs	r2, #255	; 0xff
 800a19c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2221      	movs	r2, #33	; 0x21
 800a1a2:	2103      	movs	r1, #3
 800a1a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e045      	b.n	800a23e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	d0e2      	beq.n	800a184 <HAL_RTC_DeactivateAlarm+0x6c>
 800a1be:	e031      	b.n	800a224 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	689a      	ldr	r2, [r3, #8]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4921      	ldr	r1, [pc, #132]	; (800a250 <HAL_RTC_DeactivateAlarm+0x138>)
 800a1cc:	400a      	ands	r2, r1
 800a1ce:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689a      	ldr	r2, [r3, #8]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	491e      	ldr	r1, [pc, #120]	; (800a254 <HAL_RTC_DeactivateAlarm+0x13c>)
 800a1dc:	400a      	ands	r2, r1
 800a1de:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a1e0:	f7fa ff49 	bl	8005076 <HAL_GetTick>
 800a1e4:	0003      	movs	r3, r0
 800a1e6:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a1e8:	e016      	b.n	800a218 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1ea:	f7fa ff44 	bl	8005076 <HAL_GetTick>
 800a1ee:	0002      	movs	r2, r0
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	1ad2      	subs	r2, r2, r3
 800a1f4:	23fa      	movs	r3, #250	; 0xfa
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d90d      	bls.n	800a218 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	22ff      	movs	r2, #255	; 0xff
 800a202:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2221      	movs	r2, #33	; 0x21
 800a208:	2103      	movs	r1, #3
 800a20a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	2100      	movs	r1, #0
 800a212:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e012      	b.n	800a23e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	2202      	movs	r2, #2
 800a220:	4013      	ands	r3, r2
 800a222:	d0e2      	beq.n	800a1ea <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	22ff      	movs	r2, #255	; 0xff
 800a22a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2221      	movs	r2, #33	; 0x21
 800a230:	2101      	movs	r1, #1
 800a232:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2220      	movs	r2, #32
 800a238:	2100      	movs	r1, #0
 800a23a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	0018      	movs	r0, r3
 800a240:	46bd      	mov	sp, r7
 800a242:	b004      	add	sp, #16
 800a244:	bd80      	pop	{r7, pc}
 800a246:	46c0      	nop			; (mov r8, r8)
 800a248:	fffffeff 	.word	0xfffffeff
 800a24c:	ffffefff 	.word	0xffffefff
 800a250:	fffffdff 	.word	0xfffffdff
 800a254:	ffffdfff 	.word	0xffffdfff

0800a258 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	2380      	movs	r3, #128	; 0x80
 800a268:	015b      	lsls	r3, r3, #5
 800a26a:	4013      	ands	r3, r2
 800a26c:	d014      	beq.n	800a298 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68da      	ldr	r2, [r3, #12]
 800a274:	2380      	movs	r3, #128	; 0x80
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	4013      	ands	r3, r2
 800a27a:	d00d      	beq.n	800a298 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	0018      	movs	r0, r3
 800a280:	f7f9 fef5 	bl	800406e <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	22ff      	movs	r2, #255	; 0xff
 800a28c:	401a      	ands	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4915      	ldr	r1, [pc, #84]	; (800a2e8 <HAL_RTC_AlarmIRQHandler+0x90>)
 800a294:	430a      	orrs	r2, r1
 800a296:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	689a      	ldr	r2, [r3, #8]
 800a29e:	2380      	movs	r3, #128	; 0x80
 800a2a0:	019b      	lsls	r3, r3, #6
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	d014      	beq.n	800a2d0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68da      	ldr	r2, [r3, #12]
 800a2ac:	2380      	movs	r3, #128	; 0x80
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	d00d      	beq.n	800a2d0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	f000 f910 	bl	800a4dc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	22ff      	movs	r2, #255	; 0xff
 800a2c4:	401a      	ands	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4908      	ldr	r1, [pc, #32]	; (800a2ec <HAL_RTC_AlarmIRQHandler+0x94>)
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a2d0:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <HAL_RTC_AlarmIRQHandler+0x98>)
 800a2d2:	2280      	movs	r2, #128	; 0x80
 800a2d4:	0292      	lsls	r2, r2, #10
 800a2d6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2221      	movs	r2, #33	; 0x21
 800a2dc:	2101      	movs	r1, #1
 800a2de:	5499      	strb	r1, [r3, r2]
}
 800a2e0:	46c0      	nop			; (mov r8, r8)
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	b002      	add	sp, #8
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	fffffe7f 	.word	0xfffffe7f
 800a2ec:	fffffd7f 	.word	0xfffffd7f
 800a2f0:	40010400 	.word	0x40010400

0800a2f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68da      	ldr	r2, [r3, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	21a0      	movs	r1, #160	; 0xa0
 800a308:	438a      	bics	r2, r1
 800a30a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a30c:	f7fa feb3 	bl	8005076 <HAL_GetTick>
 800a310:	0003      	movs	r3, r0
 800a312:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a314:	e00a      	b.n	800a32c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a316:	f7fa feae 	bl	8005076 <HAL_GetTick>
 800a31a:	0002      	movs	r2, r0
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	1ad2      	subs	r2, r2, r3
 800a320:	23fa      	movs	r3, #250	; 0xfa
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	429a      	cmp	r2, r3
 800a326:	d901      	bls.n	800a32c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e006      	b.n	800a33a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	2220      	movs	r2, #32
 800a334:	4013      	ands	r3, r2
 800a336:	d0ee      	beq.n	800a316 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	0018      	movs	r0, r3
 800a33c:	46bd      	mov	sp, r7
 800a33e:	b004      	add	sp, #16
 800a340:	bd80      	pop	{r7, pc}

0800a342 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	2240      	movs	r2, #64	; 0x40
 800a352:	4013      	ands	r3, r2
 800a354:	d11a      	bne.n	800a38c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2201      	movs	r2, #1
 800a35c:	4252      	negs	r2, r2
 800a35e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a360:	f7fa fe89 	bl	8005076 <HAL_GetTick>
 800a364:	0003      	movs	r3, r0
 800a366:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a368:	e00a      	b.n	800a380 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a36a:	f7fa fe84 	bl	8005076 <HAL_GetTick>
 800a36e:	0002      	movs	r2, r0
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	1ad2      	subs	r2, r2, r3
 800a374:	23fa      	movs	r3, #250	; 0xfa
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	429a      	cmp	r2, r3
 800a37a:	d901      	bls.n	800a380 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e006      	b.n	800a38e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	2240      	movs	r2, #64	; 0x40
 800a388:	4013      	ands	r3, r2
 800a38a:	d0ee      	beq.n	800a36a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	0018      	movs	r0, r3
 800a390:	46bd      	mov	sp, r7
 800a392:	b004      	add	sp, #16
 800a394:	bd80      	pop	{r7, pc}

0800a396 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	0002      	movs	r2, r0
 800a39e:	1dfb      	adds	r3, r7, #7
 800a3a0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800a3a6:	230b      	movs	r3, #11
 800a3a8:	18fb      	adds	r3, r7, r3
 800a3aa:	1dfa      	adds	r2, r7, #7
 800a3ac:	7812      	ldrb	r2, [r2, #0]
 800a3ae:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800a3b0:	e008      	b.n	800a3c4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800a3b8:	220b      	movs	r2, #11
 800a3ba:	18bb      	adds	r3, r7, r2
 800a3bc:	18ba      	adds	r2, r7, r2
 800a3be:	7812      	ldrb	r2, [r2, #0]
 800a3c0:	3a0a      	subs	r2, #10
 800a3c2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800a3c4:	210b      	movs	r1, #11
 800a3c6:	187b      	adds	r3, r7, r1
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b09      	cmp	r3, #9
 800a3cc:	d8f1      	bhi.n	800a3b2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	011b      	lsls	r3, r3, #4
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	187b      	adds	r3, r7, r1
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	b2db      	uxtb	r3, r3
}
 800a3de:	0018      	movs	r0, r3
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	b004      	add	sp, #16
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	0002      	movs	r2, r0
 800a3ee:	1dfb      	adds	r3, r7, #7
 800a3f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800a3f2:	1dfb      	adds	r3, r7, #7
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	091b      	lsrs	r3, r3, #4
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	001a      	movs	r2, r3
 800a3fc:	0013      	movs	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	189b      	adds	r3, r3, r2
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	1dfb      	adds	r3, r7, #7
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	210f      	movs	r1, #15
 800a410:	400b      	ands	r3, r1
 800a412:	b2db      	uxtb	r3, r3
 800a414:	18d3      	adds	r3, r2, r3
 800a416:	b2db      	uxtb	r3, r3
}
 800a418:	0018      	movs	r0, r3
 800a41a:	46bd      	mov	sp, r7
 800a41c:	b004      	add	sp, #16
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3350      	adds	r3, #80	; 0x50
 800a432:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	18d3      	adds	r3, r2, r3
 800a43c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	601a      	str	r2, [r3, #0]
}
 800a444:	46c0      	nop			; (mov r8, r8)
 800a446:	46bd      	mov	sp, r7
 800a448:	b006      	add	sp, #24
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3350      	adds	r3, #80	; 0x50
 800a45c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	18d3      	adds	r3, r2, r3
 800a466:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
}
 800a46c:	0018      	movs	r0, r3
 800a46e:	46bd      	mov	sp, r7
 800a470:	b004      	add	sp, #16
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2220      	movs	r2, #32
 800a480:	5c9b      	ldrb	r3, [r3, r2]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d101      	bne.n	800a48a <HAL_RTCEx_EnableBypassShadow+0x16>
 800a486:	2302      	movs	r3, #2
 800a488:	e024      	b.n	800a4d4 <HAL_RTCEx_EnableBypassShadow+0x60>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2220      	movs	r2, #32
 800a48e:	2101      	movs	r1, #1
 800a490:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2221      	movs	r2, #33	; 0x21
 800a496:	2102      	movs	r1, #2
 800a498:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	22ca      	movs	r2, #202	; 0xca
 800a4a0:	625a      	str	r2, [r3, #36]	; 0x24
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2253      	movs	r2, #83	; 0x53
 800a4a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	689a      	ldr	r2, [r3, #8]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2120      	movs	r1, #32
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	22ff      	movs	r2, #255	; 0xff
 800a4c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2221      	movs	r2, #33	; 0x21
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	b002      	add	sp, #8
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a4e4:	46c0      	nop			; (mov r8, r8)
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	b002      	add	sp, #8
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e083      	b.n	800a606 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a502:	2b00      	cmp	r3, #0
 800a504:	d109      	bne.n	800a51a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	2382      	movs	r3, #130	; 0x82
 800a50c:	005b      	lsls	r3, r3, #1
 800a50e:	429a      	cmp	r2, r3
 800a510:	d009      	beq.n	800a526 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	61da      	str	r2, [r3, #28]
 800a518:	e005      	b.n	800a526 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2251      	movs	r2, #81	; 0x51
 800a530:	5c9b      	ldrb	r3, [r3, r2]
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b00      	cmp	r3, #0
 800a536:	d107      	bne.n	800a548 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2250      	movs	r2, #80	; 0x50
 800a53c:	2100      	movs	r1, #0
 800a53e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	0018      	movs	r0, r3
 800a544:	f000 f866 	bl	800a614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2251      	movs	r2, #81	; 0x51
 800a54c:	2102      	movs	r1, #2
 800a54e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2140      	movs	r1, #64	; 0x40
 800a55c:	438a      	bics	r2, r1
 800a55e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	2382      	movs	r3, #130	; 0x82
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	401a      	ands	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6899      	ldr	r1, [r3, #8]
 800a56e:	2384      	movs	r3, #132	; 0x84
 800a570:	021b      	lsls	r3, r3, #8
 800a572:	400b      	ands	r3, r1
 800a574:	431a      	orrs	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68d9      	ldr	r1, [r3, #12]
 800a57a:	2380      	movs	r3, #128	; 0x80
 800a57c:	011b      	lsls	r3, r3, #4
 800a57e:	400b      	ands	r3, r1
 800a580:	431a      	orrs	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	2102      	movs	r1, #2
 800a588:	400b      	ands	r3, r1
 800a58a:	431a      	orrs	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	2101      	movs	r1, #1
 800a592:	400b      	ands	r3, r1
 800a594:	431a      	orrs	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6999      	ldr	r1, [r3, #24]
 800a59a:	2380      	movs	r3, #128	; 0x80
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	400b      	ands	r3, r1
 800a5a0:	431a      	orrs	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	69db      	ldr	r3, [r3, #28]
 800a5a6:	2138      	movs	r1, #56	; 0x38
 800a5a8:	400b      	ands	r3, r1
 800a5aa:	431a      	orrs	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a1b      	ldr	r3, [r3, #32]
 800a5b0:	2180      	movs	r1, #128	; 0x80
 800a5b2:	400b      	ands	r3, r1
 800a5b4:	431a      	orrs	r2, r3
 800a5b6:	0011      	movs	r1, r2
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5bc:	2380      	movs	r3, #128	; 0x80
 800a5be:	019b      	lsls	r3, r3, #6
 800a5c0:	401a      	ands	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	0c1b      	lsrs	r3, r3, #16
 800a5d0:	2204      	movs	r2, #4
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	0019      	movs	r1, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	2210      	movs	r2, #16
 800a5dc:	401a      	ands	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	69da      	ldr	r2, [r3, #28]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4907      	ldr	r1, [pc, #28]	; (800a610 <HAL_SPI_Init+0x124>)
 800a5f2:	400a      	ands	r2, r1
 800a5f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2251      	movs	r2, #81	; 0x51
 800a600:	2101      	movs	r1, #1
 800a602:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	0018      	movs	r0, r3
 800a608:	46bd      	mov	sp, r7
 800a60a:	b002      	add	sp, #8
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	46c0      	nop			; (mov r8, r8)
 800a610:	fffff7ff 	.word	0xfffff7ff

0800a614 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a61c:	46c0      	nop			; (mov r8, r8)
 800a61e:	46bd      	mov	sp, r7
 800a620:	b002      	add	sp, #8
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b08c      	sub	sp, #48	; 0x30
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	001a      	movs	r2, r3
 800a632:	1cbb      	adds	r3, r7, #2
 800a634:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a636:	2301      	movs	r3, #1
 800a638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a63a:	232b      	movs	r3, #43	; 0x2b
 800a63c:	18fb      	adds	r3, r7, r3
 800a63e:	2200      	movs	r2, #0
 800a640:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2250      	movs	r2, #80	; 0x50
 800a646:	5c9b      	ldrb	r3, [r3, r2]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d101      	bne.n	800a650 <HAL_SPI_TransmitReceive+0x2c>
 800a64c:	2302      	movs	r3, #2
 800a64e:	e1a0      	b.n	800a992 <HAL_SPI_TransmitReceive+0x36e>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2250      	movs	r2, #80	; 0x50
 800a654:	2101      	movs	r1, #1
 800a656:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a658:	f7fa fd0d 	bl	8005076 <HAL_GetTick>
 800a65c:	0003      	movs	r3, r0
 800a65e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a660:	2023      	movs	r0, #35	; 0x23
 800a662:	183b      	adds	r3, r7, r0
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	2151      	movs	r1, #81	; 0x51
 800a668:	5c52      	ldrb	r2, [r2, r1]
 800a66a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a672:	231a      	movs	r3, #26
 800a674:	18fb      	adds	r3, r7, r3
 800a676:	1cba      	adds	r2, r7, #2
 800a678:	8812      	ldrh	r2, [r2, #0]
 800a67a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a67c:	183b      	adds	r3, r7, r0
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d011      	beq.n	800a6a8 <HAL_SPI_TransmitReceive+0x84>
 800a684:	69fa      	ldr	r2, [r7, #28]
 800a686:	2382      	movs	r3, #130	; 0x82
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d107      	bne.n	800a69e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d103      	bne.n	800a69e <HAL_SPI_TransmitReceive+0x7a>
 800a696:	183b      	adds	r3, r7, r0
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d004      	beq.n	800a6a8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800a69e:	232b      	movs	r3, #43	; 0x2b
 800a6a0:	18fb      	adds	r3, r7, r3
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	701a      	strb	r2, [r3, #0]
    goto error;
 800a6a6:	e169      	b.n	800a97c <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d006      	beq.n	800a6bc <HAL_SPI_TransmitReceive+0x98>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d003      	beq.n	800a6bc <HAL_SPI_TransmitReceive+0x98>
 800a6b4:	1cbb      	adds	r3, r7, #2
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d104      	bne.n	800a6c6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800a6bc:	232b      	movs	r3, #43	; 0x2b
 800a6be:	18fb      	adds	r3, r7, r3
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	701a      	strb	r2, [r3, #0]
    goto error;
 800a6c4:	e15a      	b.n	800a97c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2251      	movs	r2, #81	; 0x51
 800a6ca:	5c9b      	ldrb	r3, [r3, r2]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b04      	cmp	r3, #4
 800a6d0:	d003      	beq.n	800a6da <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2251      	movs	r2, #81	; 0x51
 800a6d6:	2105      	movs	r1, #5
 800a6d8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	1cba      	adds	r2, r7, #2
 800a6ea:	8812      	ldrh	r2, [r2, #0]
 800a6ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1cba      	adds	r2, r7, #2
 800a6f2:	8812      	ldrh	r2, [r2, #0]
 800a6f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	1cba      	adds	r2, r7, #2
 800a700:	8812      	ldrh	r2, [r2, #0]
 800a702:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	1cba      	adds	r2, r7, #2
 800a708:	8812      	ldrh	r2, [r2, #0]
 800a70a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2240      	movs	r2, #64	; 0x40
 800a720:	4013      	ands	r3, r2
 800a722:	2b40      	cmp	r3, #64	; 0x40
 800a724:	d007      	beq.n	800a736 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2140      	movs	r1, #64	; 0x40
 800a732:	430a      	orrs	r2, r1
 800a734:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	68da      	ldr	r2, [r3, #12]
 800a73a:	2380      	movs	r3, #128	; 0x80
 800a73c:	011b      	lsls	r3, r3, #4
 800a73e:	429a      	cmp	r2, r3
 800a740:	d000      	beq.n	800a744 <HAL_SPI_TransmitReceive+0x120>
 800a742:	e07a      	b.n	800a83a <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d004      	beq.n	800a756 <HAL_SPI_TransmitReceive+0x132>
 800a74c:	231a      	movs	r3, #26
 800a74e:	18fb      	adds	r3, r7, r3
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d166      	bne.n	800a824 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75a:	881a      	ldrh	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a766:	1c9a      	adds	r2, r3, #2
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a770:	b29b      	uxth	r3, r3
 800a772:	3b01      	subs	r3, #1
 800a774:	b29a      	uxth	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a77a:	e053      	b.n	800a824 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	2202      	movs	r2, #2
 800a784:	4013      	ands	r3, r2
 800a786:	2b02      	cmp	r3, #2
 800a788:	d11b      	bne.n	800a7c2 <HAL_SPI_TransmitReceive+0x19e>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a78e:	b29b      	uxth	r3, r3
 800a790:	2b00      	cmp	r3, #0
 800a792:	d016      	beq.n	800a7c2 <HAL_SPI_TransmitReceive+0x19e>
 800a794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a796:	2b01      	cmp	r3, #1
 800a798:	d113      	bne.n	800a7c2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79e:	881a      	ldrh	r2, [r3, #0]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7aa:	1c9a      	adds	r2, r3, #2
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d119      	bne.n	800a804 <HAL_SPI_TransmitReceive+0x1e0>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d014      	beq.n	800a804 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68da      	ldr	r2, [r3, #12]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e4:	b292      	uxth	r2, r2
 800a7e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ec:	1c9a      	adds	r2, r3, #2
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a800:	2301      	movs	r3, #1
 800a802:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a804:	f7fa fc37 	bl	8005076 <HAL_GetTick>
 800a808:	0002      	movs	r2, r0
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a810:	429a      	cmp	r2, r3
 800a812:	d807      	bhi.n	800a824 <HAL_SPI_TransmitReceive+0x200>
 800a814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a816:	3301      	adds	r3, #1
 800a818:	d004      	beq.n	800a824 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800a81a:	232b      	movs	r3, #43	; 0x2b
 800a81c:	18fb      	adds	r3, r7, r3
 800a81e:	2203      	movs	r2, #3
 800a820:	701a      	strb	r2, [r3, #0]
        goto error;
 800a822:	e0ab      	b.n	800a97c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a828:	b29b      	uxth	r3, r3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1a6      	bne.n	800a77c <HAL_SPI_TransmitReceive+0x158>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a832:	b29b      	uxth	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1a1      	bne.n	800a77c <HAL_SPI_TransmitReceive+0x158>
 800a838:	e07f      	b.n	800a93a <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d005      	beq.n	800a84e <HAL_SPI_TransmitReceive+0x22a>
 800a842:	231a      	movs	r3, #26
 800a844:	18fb      	adds	r3, r7, r3
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d000      	beq.n	800a84e <HAL_SPI_TransmitReceive+0x22a>
 800a84c:	e06b      	b.n	800a926 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	330c      	adds	r3, #12
 800a858:	7812      	ldrb	r2, [r2, #0]
 800a85a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	3b01      	subs	r3, #1
 800a86e:	b29a      	uxth	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a874:	e057      	b.n	800a926 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	2202      	movs	r2, #2
 800a87e:	4013      	ands	r3, r2
 800a880:	2b02      	cmp	r3, #2
 800a882:	d11c      	bne.n	800a8be <HAL_SPI_TransmitReceive+0x29a>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a888:	b29b      	uxth	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d017      	beq.n	800a8be <HAL_SPI_TransmitReceive+0x29a>
 800a88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a890:	2b01      	cmp	r3, #1
 800a892:	d114      	bne.n	800a8be <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	330c      	adds	r3, #12
 800a89e:	7812      	ldrb	r2, [r2, #0]
 800a8a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d119      	bne.n	800a900 <HAL_SPI_TransmitReceive+0x2dc>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d014      	beq.n	800a900 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68da      	ldr	r2, [r3, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e0:	b2d2      	uxtb	r2, r2
 800a8e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a900:	f7fa fbb9 	bl	8005076 <HAL_GetTick>
 800a904:	0002      	movs	r2, r0
 800a906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d802      	bhi.n	800a916 <HAL_SPI_TransmitReceive+0x2f2>
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	3301      	adds	r3, #1
 800a914:	d102      	bne.n	800a91c <HAL_SPI_TransmitReceive+0x2f8>
 800a916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d104      	bne.n	800a926 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800a91c:	232b      	movs	r3, #43	; 0x2b
 800a91e:	18fb      	adds	r3, r7, r3
 800a920:	2203      	movs	r2, #3
 800a922:	701a      	strb	r2, [r3, #0]
        goto error;
 800a924:	e02a      	b.n	800a97c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1a2      	bne.n	800a876 <HAL_SPI_TransmitReceive+0x252>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a934:	b29b      	uxth	r3, r3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d19d      	bne.n	800a876 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a93c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	0018      	movs	r0, r3
 800a942:	f000 f8c5 	bl	800aad0 <SPI_EndRxTxTransaction>
 800a946:	1e03      	subs	r3, r0, #0
 800a948:	d007      	beq.n	800a95a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800a94a:	232b      	movs	r3, #43	; 0x2b
 800a94c:	18fb      	adds	r3, r7, r3
 800a94e:	2201      	movs	r2, #1
 800a950:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2220      	movs	r2, #32
 800a956:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a958:	e010      	b.n	800a97c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10b      	bne.n	800a97a <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a962:	2300      	movs	r3, #0
 800a964:	617b      	str	r3, [r7, #20]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	617b      	str	r3, [r7, #20]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	617b      	str	r3, [r7, #20]
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	e000      	b.n	800a97c <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800a97a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2251      	movs	r2, #81	; 0x51
 800a980:	2101      	movs	r1, #1
 800a982:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2250      	movs	r2, #80	; 0x50
 800a988:	2100      	movs	r1, #0
 800a98a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a98c:	232b      	movs	r3, #43	; 0x2b
 800a98e:	18fb      	adds	r3, r7, r3
 800a990:	781b      	ldrb	r3, [r3, #0]
}
 800a992:	0018      	movs	r0, r3
 800a994:	46bd      	mov	sp, r7
 800a996:	b00c      	add	sp, #48	; 0x30
 800a998:	bd80      	pop	{r7, pc}

0800a99a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b082      	sub	sp, #8
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2251      	movs	r2, #81	; 0x51
 800a9a6:	5c9b      	ldrb	r3, [r3, r2]
 800a9a8:	b2db      	uxtb	r3, r3
}
 800a9aa:	0018      	movs	r0, r3
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	b002      	add	sp, #8
 800a9b0:	bd80      	pop	{r7, pc}
	...

0800a9b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	603b      	str	r3, [r7, #0]
 800a9c0:	1dfb      	adds	r3, r7, #7
 800a9c2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a9c4:	f7fa fb57 	bl	8005076 <HAL_GetTick>
 800a9c8:	0002      	movs	r2, r0
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	1a9b      	subs	r3, r3, r2
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	18d3      	adds	r3, r2, r3
 800a9d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a9d4:	f7fa fb4f 	bl	8005076 <HAL_GetTick>
 800a9d8:	0003      	movs	r3, r0
 800a9da:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a9dc:	4b3a      	ldr	r3, [pc, #232]	; (800aac8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	015b      	lsls	r3, r3, #5
 800a9e2:	0d1b      	lsrs	r3, r3, #20
 800a9e4:	69fa      	ldr	r2, [r7, #28]
 800a9e6:	4353      	muls	r3, r2
 800a9e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a9ea:	e058      	b.n	800aa9e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	d055      	beq.n	800aa9e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a9f2:	f7fa fb40 	bl	8005076 <HAL_GetTick>
 800a9f6:	0002      	movs	r2, r0
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	69fa      	ldr	r2, [r7, #28]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d902      	bls.n	800aa08 <SPI_WaitFlagStateUntilTimeout+0x54>
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d142      	bne.n	800aa8e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	21e0      	movs	r1, #224	; 0xe0
 800aa14:	438a      	bics	r2, r1
 800aa16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	2382      	movs	r3, #130	; 0x82
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d113      	bne.n	800aa4c <SPI_WaitFlagStateUntilTimeout+0x98>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	689a      	ldr	r2, [r3, #8]
 800aa28:	2380      	movs	r3, #128	; 0x80
 800aa2a:	021b      	lsls	r3, r3, #8
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d005      	beq.n	800aa3c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	689a      	ldr	r2, [r3, #8]
 800aa34:	2380      	movs	r3, #128	; 0x80
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d107      	bne.n	800aa4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2140      	movs	r1, #64	; 0x40
 800aa48:	438a      	bics	r2, r1
 800aa4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa50:	2380      	movs	r3, #128	; 0x80
 800aa52:	019b      	lsls	r3, r3, #6
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d110      	bne.n	800aa7a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	491a      	ldr	r1, [pc, #104]	; (800aacc <SPI_WaitFlagStateUntilTimeout+0x118>)
 800aa64:	400a      	ands	r2, r1
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2180      	movs	r1, #128	; 0x80
 800aa74:	0189      	lsls	r1, r1, #6
 800aa76:	430a      	orrs	r2, r1
 800aa78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2251      	movs	r2, #81	; 0x51
 800aa7e:	2101      	movs	r1, #1
 800aa80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2250      	movs	r2, #80	; 0x50
 800aa86:	2100      	movs	r1, #0
 800aa88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e017      	b.n	800aabe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d101      	bne.n	800aa98 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	425a      	negs	r2, r3
 800aaae:	4153      	adcs	r3, r2
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	001a      	movs	r2, r3
 800aab4:	1dfb      	adds	r3, r7, #7
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d197      	bne.n	800a9ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	0018      	movs	r0, r3
 800aac0:	46bd      	mov	sp, r7
 800aac2:	b008      	add	sp, #32
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	46c0      	nop			; (mov r8, r8)
 800aac8:	20000070 	.word	0x20000070
 800aacc:	ffffdfff 	.word	0xffffdfff

0800aad0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af02      	add	r7, sp, #8
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aadc:	4b1d      	ldr	r3, [pc, #116]	; (800ab54 <SPI_EndRxTxTransaction+0x84>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	491d      	ldr	r1, [pc, #116]	; (800ab58 <SPI_EndRxTxTransaction+0x88>)
 800aae2:	0018      	movs	r0, r3
 800aae4:	f7f5 fb18 	bl	8000118 <__udivsi3>
 800aae8:	0003      	movs	r3, r0
 800aaea:	001a      	movs	r2, r3
 800aaec:	0013      	movs	r3, r2
 800aaee:	015b      	lsls	r3, r3, #5
 800aaf0:	1a9b      	subs	r3, r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	189b      	adds	r3, r3, r2
 800aaf6:	00db      	lsls	r3, r3, #3
 800aaf8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	2382      	movs	r3, #130	; 0x82
 800ab00:	005b      	lsls	r3, r3, #1
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d112      	bne.n	800ab2c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	0013      	movs	r3, r2
 800ab10:	2200      	movs	r2, #0
 800ab12:	2180      	movs	r1, #128	; 0x80
 800ab14:	f7ff ff4e 	bl	800a9b4 <SPI_WaitFlagStateUntilTimeout>
 800ab18:	1e03      	subs	r3, r0, #0
 800ab1a:	d016      	beq.n	800ab4a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab20:	2220      	movs	r2, #32
 800ab22:	431a      	orrs	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	e00f      	b.n	800ab4c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00a      	beq.n	800ab48 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	3b01      	subs	r3, #1
 800ab36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	2280      	movs	r2, #128	; 0x80
 800ab40:	4013      	ands	r3, r2
 800ab42:	2b80      	cmp	r3, #128	; 0x80
 800ab44:	d0f2      	beq.n	800ab2c <SPI_EndRxTxTransaction+0x5c>
 800ab46:	e000      	b.n	800ab4a <SPI_EndRxTxTransaction+0x7a>
        break;
 800ab48:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	0018      	movs	r0, r3
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	b006      	add	sp, #24
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	20000070 	.word	0x20000070
 800ab58:	016e3600 	.word	0x016e3600

0800ab5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e044      	b.n	800abf8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d107      	bne.n	800ab86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2274      	movs	r2, #116	; 0x74
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	0018      	movs	r0, r3
 800ab82:	f7fa fb5f 	bl	8005244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2224      	movs	r2, #36	; 0x24
 800ab8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2101      	movs	r1, #1
 800ab98:	438a      	bics	r2, r1
 800ab9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	0018      	movs	r0, r3
 800aba0:	f000 fb3a 	bl	800b218 <UART_SetConfig>
 800aba4:	0003      	movs	r3, r0
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d101      	bne.n	800abae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e024      	b.n	800abf8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	0018      	movs	r0, r3
 800abba:	f000 fdeb 	bl	800b794 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	490d      	ldr	r1, [pc, #52]	; (800ac00 <HAL_UART_Init+0xa4>)
 800abca:	400a      	ands	r2, r1
 800abcc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	689a      	ldr	r2, [r3, #8]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	212a      	movs	r1, #42	; 0x2a
 800abda:	438a      	bics	r2, r1
 800abdc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2101      	movs	r1, #1
 800abea:	430a      	orrs	r2, r1
 800abec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	0018      	movs	r0, r3
 800abf2:	f000 fe83 	bl	800b8fc <UART_CheckIdleState>
 800abf6:	0003      	movs	r3, r0
}
 800abf8:	0018      	movs	r0, r3
 800abfa:	46bd      	mov	sp, r7
 800abfc:	b002      	add	sp, #8
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	ffffb7ff 	.word	0xffffb7ff

0800ac04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	1dbb      	adds	r3, r7, #6
 800ac10:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac16:	2b20      	cmp	r3, #32
 800ac18:	d144      	bne.n	800aca4 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d003      	beq.n	800ac28 <HAL_UART_Receive_IT+0x24>
 800ac20:	1dbb      	adds	r3, r7, #6
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e03c      	b.n	800aca6 <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	2380      	movs	r3, #128	; 0x80
 800ac32:	015b      	lsls	r3, r3, #5
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d109      	bne.n	800ac4c <HAL_UART_Receive_IT+0x48>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d105      	bne.n	800ac4c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2201      	movs	r2, #1
 800ac44:	4013      	ands	r3, r2
 800ac46:	d001      	beq.n	800ac4c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e02c      	b.n	800aca6 <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2274      	movs	r2, #116	; 0x74
 800ac50:	5c9b      	ldrb	r3, [r3, r2]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d101      	bne.n	800ac5a <HAL_UART_Receive_IT+0x56>
 800ac56:	2302      	movs	r3, #2
 800ac58:	e025      	b.n	800aca6 <HAL_UART_Receive_IT+0xa2>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2274      	movs	r2, #116	; 0x74
 800ac5e:	2101      	movs	r1, #1
 800ac60:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a10      	ldr	r2, [pc, #64]	; (800acb0 <HAL_UART_Receive_IT+0xac>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d00f      	beq.n	800ac92 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	2380      	movs	r3, #128	; 0x80
 800ac7a:	041b      	lsls	r3, r3, #16
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	d008      	beq.n	800ac92 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2180      	movs	r1, #128	; 0x80
 800ac8c:	04c9      	lsls	r1, r1, #19
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800ac92:	1dbb      	adds	r3, r7, #6
 800ac94:	881a      	ldrh	r2, [r3, #0]
 800ac96:	68b9      	ldr	r1, [r7, #8]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	0018      	movs	r0, r3
 800ac9c:	f000 fef4 	bl	800ba88 <UART_Start_Receive_IT>
 800aca0:	0003      	movs	r3, r0
 800aca2:	e000      	b.n	800aca6 <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800aca4:	2302      	movs	r3, #2
  }
}
 800aca6:	0018      	movs	r0, r3
 800aca8:	46bd      	mov	sp, r7
 800acaa:	b004      	add	sp, #16
 800acac:	bd80      	pop	{r7, pc}
 800acae:	46c0      	nop			; (mov r8, r8)
 800acb0:	40004800 	.word	0x40004800

0800acb4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	1dbb      	adds	r3, r7, #6
 800acc0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acc6:	2b20      	cmp	r3, #32
 800acc8:	d000      	beq.n	800accc <HAL_UART_Transmit_DMA+0x18>
 800acca:	e079      	b.n	800adc0 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <HAL_UART_Transmit_DMA+0x26>
 800acd2:	1dbb      	adds	r3, r7, #6
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e071      	b.n	800adc2 <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	689a      	ldr	r2, [r3, #8]
 800ace2:	2380      	movs	r3, #128	; 0x80
 800ace4:	015b      	lsls	r3, r3, #5
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d109      	bne.n	800acfe <HAL_UART_Transmit_DMA+0x4a>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d105      	bne.n	800acfe <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	2201      	movs	r2, #1
 800acf6:	4013      	ands	r3, r2
 800acf8:	d001      	beq.n	800acfe <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e061      	b.n	800adc2 <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2274      	movs	r2, #116	; 0x74
 800ad02:	5c9b      	ldrb	r3, [r3, r2]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d101      	bne.n	800ad0c <HAL_UART_Transmit_DMA+0x58>
 800ad08:	2302      	movs	r3, #2
 800ad0a:	e05a      	b.n	800adc2 <HAL_UART_Transmit_DMA+0x10e>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2274      	movs	r2, #116	; 0x74
 800ad10:	2101      	movs	r1, #1
 800ad12:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	1dba      	adds	r2, r7, #6
 800ad1e:	2150      	movs	r1, #80	; 0x50
 800ad20:	8812      	ldrh	r2, [r2, #0]
 800ad22:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	1dba      	adds	r2, r7, #6
 800ad28:	2152      	movs	r1, #82	; 0x52
 800ad2a:	8812      	ldrh	r2, [r2, #0]
 800ad2c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2280      	movs	r2, #128	; 0x80
 800ad32:	2100      	movs	r1, #0
 800ad34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2221      	movs	r2, #33	; 0x21
 800ad3a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d02b      	beq.n	800ad9c <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad48:	4a20      	ldr	r2, [pc, #128]	; (800adcc <HAL_UART_Transmit_DMA+0x118>)
 800ad4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad50:	4a1f      	ldr	r2, [pc, #124]	; (800add0 <HAL_UART_Transmit_DMA+0x11c>)
 800ad52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad58:	4a1e      	ldr	r2, [pc, #120]	; (800add4 <HAL_UART_Transmit_DMA+0x120>)
 800ad5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad60:	2200      	movs	r2, #0
 800ad62:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad6c:	0019      	movs	r1, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3328      	adds	r3, #40	; 0x28
 800ad74:	001a      	movs	r2, r3
 800ad76:	1dbb      	adds	r3, r7, #6
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	f7fc fae3 	bl	8007344 <HAL_DMA_Start_IT>
 800ad7e:	1e03      	subs	r3, r0, #0
 800ad80:	d00c      	beq.n	800ad9c <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2280      	movs	r2, #128	; 0x80
 800ad86:	2110      	movs	r1, #16
 800ad88:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2274      	movs	r2, #116	; 0x74
 800ad8e:	2100      	movs	r1, #0
 800ad90:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2220      	movs	r2, #32
 800ad96:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e012      	b.n	800adc2 <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2240      	movs	r2, #64	; 0x40
 800ada2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2274      	movs	r2, #116	; 0x74
 800ada8:	2100      	movs	r1, #0
 800adaa:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2180      	movs	r1, #128	; 0x80
 800adb8:	430a      	orrs	r2, r1
 800adba:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	e000      	b.n	800adc2 <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800adc0:	2302      	movs	r3, #2
  }
}
 800adc2:	0018      	movs	r0, r3
 800adc4:	46bd      	mov	sp, r7
 800adc6:	b004      	add	sp, #16
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	0800bc2d 	.word	0x0800bc2d
 800add0:	0800bc81 	.word	0x0800bc81
 800add4:	0800bc9f 	.word	0x0800bc9f

0800add8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b088      	sub	sp, #32
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	69db      	ldr	r3, [r3, #28]
 800ade6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	4ab5      	ldr	r2, [pc, #724]	; (800b0d0 <HAL_UART_IRQHandler+0x2f8>)
 800adfc:	4013      	ands	r3, r2
 800adfe:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d112      	bne.n	800ae2c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	2220      	movs	r2, #32
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	d00e      	beq.n	800ae2c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	2220      	movs	r2, #32
 800ae12:	4013      	ands	r3, r2
 800ae14:	d00a      	beq.n	800ae2c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d100      	bne.n	800ae20 <HAL_UART_IRQHandler+0x48>
 800ae1e:	e1d1      	b.n	800b1c4 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	0010      	movs	r0, r2
 800ae28:	4798      	blx	r3
      }
      return;
 800ae2a:	e1cb      	b.n	800b1c4 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d100      	bne.n	800ae34 <HAL_UART_IRQHandler+0x5c>
 800ae32:	e0d9      	b.n	800afe8 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2201      	movs	r2, #1
 800ae38:	4013      	ands	r3, r2
 800ae3a:	d104      	bne.n	800ae46 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	4aa5      	ldr	r2, [pc, #660]	; (800b0d4 <HAL_UART_IRQHandler+0x2fc>)
 800ae40:	4013      	ands	r3, r2
 800ae42:	d100      	bne.n	800ae46 <HAL_UART_IRQHandler+0x6e>
 800ae44:	e0d0      	b.n	800afe8 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	d010      	beq.n	800ae70 <HAL_UART_IRQHandler+0x98>
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	2380      	movs	r3, #128	; 0x80
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	4013      	ands	r3, r2
 800ae56:	d00b      	beq.n	800ae70 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2280      	movs	r2, #128	; 0x80
 800ae64:	589b      	ldr	r3, [r3, r2]
 800ae66:	2201      	movs	r2, #1
 800ae68:	431a      	orrs	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2180      	movs	r1, #128	; 0x80
 800ae6e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	2202      	movs	r2, #2
 800ae74:	4013      	ands	r3, r2
 800ae76:	d00f      	beq.n	800ae98 <HAL_UART_IRQHandler+0xc0>
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	d00b      	beq.n	800ae98 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2202      	movs	r2, #2
 800ae86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2280      	movs	r2, #128	; 0x80
 800ae8c:	589b      	ldr	r3, [r3, r2]
 800ae8e:	2204      	movs	r2, #4
 800ae90:	431a      	orrs	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2180      	movs	r1, #128	; 0x80
 800ae96:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	2204      	movs	r2, #4
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	d00f      	beq.n	800aec0 <HAL_UART_IRQHandler+0xe8>
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	2201      	movs	r2, #1
 800aea4:	4013      	ands	r3, r2
 800aea6:	d00b      	beq.n	800aec0 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2204      	movs	r2, #4
 800aeae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2280      	movs	r2, #128	; 0x80
 800aeb4:	589b      	ldr	r3, [r3, r2]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	431a      	orrs	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2180      	movs	r1, #128	; 0x80
 800aebe:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	2208      	movs	r2, #8
 800aec4:	4013      	ands	r3, r2
 800aec6:	d013      	beq.n	800aef0 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	2220      	movs	r2, #32
 800aecc:	4013      	ands	r3, r2
 800aece:	d103      	bne.n	800aed8 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	2201      	movs	r2, #1
 800aed4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aed6:	d00b      	beq.n	800aef0 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2208      	movs	r2, #8
 800aede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2280      	movs	r2, #128	; 0x80
 800aee4:	589b      	ldr	r3, [r3, r2]
 800aee6:	2208      	movs	r2, #8
 800aee8:	431a      	orrs	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2180      	movs	r1, #128	; 0x80
 800aeee:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aef0:	69fa      	ldr	r2, [r7, #28]
 800aef2:	2380      	movs	r3, #128	; 0x80
 800aef4:	011b      	lsls	r3, r3, #4
 800aef6:	4013      	ands	r3, r2
 800aef8:	d011      	beq.n	800af1e <HAL_UART_IRQHandler+0x146>
 800aefa:	69ba      	ldr	r2, [r7, #24]
 800aefc:	2380      	movs	r3, #128	; 0x80
 800aefe:	04db      	lsls	r3, r3, #19
 800af00:	4013      	ands	r3, r2
 800af02:	d00c      	beq.n	800af1e <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2280      	movs	r2, #128	; 0x80
 800af0a:	0112      	lsls	r2, r2, #4
 800af0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2280      	movs	r2, #128	; 0x80
 800af12:	589b      	ldr	r3, [r3, r2]
 800af14:	2220      	movs	r2, #32
 800af16:	431a      	orrs	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2180      	movs	r1, #128	; 0x80
 800af1c:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2280      	movs	r2, #128	; 0x80
 800af22:	589b      	ldr	r3, [r3, r2]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d100      	bne.n	800af2a <HAL_UART_IRQHandler+0x152>
 800af28:	e14e      	b.n	800b1c8 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	2220      	movs	r2, #32
 800af2e:	4013      	ands	r3, r2
 800af30:	d00c      	beq.n	800af4c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	2220      	movs	r2, #32
 800af36:	4013      	ands	r3, r2
 800af38:	d008      	beq.n	800af4c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d004      	beq.n	800af4c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	0010      	movs	r0, r2
 800af4a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2280      	movs	r2, #128	; 0x80
 800af50:	589b      	ldr	r3, [r3, r2]
 800af52:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	2240      	movs	r2, #64	; 0x40
 800af5c:	4013      	ands	r3, r2
 800af5e:	2b40      	cmp	r3, #64	; 0x40
 800af60:	d003      	beq.n	800af6a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2228      	movs	r2, #40	; 0x28
 800af66:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af68:	d033      	beq.n	800afd2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	0018      	movs	r0, r3
 800af6e:	f000 fe2d 	bl	800bbcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	2240      	movs	r2, #64	; 0x40
 800af7a:	4013      	ands	r3, r2
 800af7c:	2b40      	cmp	r3, #64	; 0x40
 800af7e:	d123      	bne.n	800afc8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	689a      	ldr	r2, [r3, #8]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2140      	movs	r1, #64	; 0x40
 800af8c:	438a      	bics	r2, r1
 800af8e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af94:	2b00      	cmp	r3, #0
 800af96:	d012      	beq.n	800afbe <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9c:	4a4e      	ldr	r2, [pc, #312]	; (800b0d8 <HAL_UART_IRQHandler+0x300>)
 800af9e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa4:	0018      	movs	r0, r3
 800afa6:	f7fc fa73 	bl	8007490 <HAL_DMA_Abort_IT>
 800afaa:	1e03      	subs	r3, r0, #0
 800afac:	d01a      	beq.n	800afe4 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb8:	0018      	movs	r0, r3
 800afba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afbc:	e012      	b.n	800afe4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	0018      	movs	r0, r3
 800afc2:	f000 f915 	bl	800b1f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afc6:	e00d      	b.n	800afe4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	0018      	movs	r0, r3
 800afcc:	f000 f910 	bl	800b1f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd0:	e008      	b.n	800afe4 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	0018      	movs	r0, r3
 800afd6:	f000 f90b 	bl	800b1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2280      	movs	r2, #128	; 0x80
 800afde:	2100      	movs	r1, #0
 800afe0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800afe2:	e0f1      	b.n	800b1c8 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe4:	46c0      	nop			; (mov r8, r8)
    return;
 800afe6:	e0ef      	b.n	800b1c8 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afec:	2b01      	cmp	r3, #1
 800afee:	d000      	beq.n	800aff2 <HAL_UART_IRQHandler+0x21a>
 800aff0:	e0b5      	b.n	800b15e <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	2210      	movs	r2, #16
 800aff6:	4013      	ands	r3, r2
 800aff8:	d100      	bne.n	800affc <HAL_UART_IRQHandler+0x224>
 800affa:	e0b0      	b.n	800b15e <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	2210      	movs	r2, #16
 800b000:	4013      	ands	r3, r2
 800b002:	d100      	bne.n	800b006 <HAL_UART_IRQHandler+0x22e>
 800b004:	e0ab      	b.n	800b15e <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2210      	movs	r2, #16
 800b00c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	2240      	movs	r2, #64	; 0x40
 800b016:	4013      	ands	r3, r2
 800b018:	2b40      	cmp	r3, #64	; 0x40
 800b01a:	d161      	bne.n	800b0e0 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	2108      	movs	r1, #8
 800b026:	187b      	adds	r3, r7, r1
 800b028:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800b02a:	187b      	adds	r3, r7, r1
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d100      	bne.n	800b034 <HAL_UART_IRQHandler+0x25c>
 800b032:	e0cb      	b.n	800b1cc <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2258      	movs	r2, #88	; 0x58
 800b038:	5a9b      	ldrh	r3, [r3, r2]
 800b03a:	187a      	adds	r2, r7, r1
 800b03c:	8812      	ldrh	r2, [r2, #0]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d300      	bcc.n	800b044 <HAL_UART_IRQHandler+0x26c>
 800b042:	e0c3      	b.n	800b1cc <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	187a      	adds	r2, r7, r1
 800b048:	215a      	movs	r1, #90	; 0x5a
 800b04a:	8812      	ldrh	r2, [r2, #0]
 800b04c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2220      	movs	r2, #32
 800b058:	4013      	ands	r3, r2
 800b05a:	d12a      	bne.n	800b0b2 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	491d      	ldr	r1, [pc, #116]	; (800b0dc <HAL_UART_IRQHandler+0x304>)
 800b068:	400a      	ands	r2, r1
 800b06a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689a      	ldr	r2, [r3, #8]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2101      	movs	r1, #1
 800b078:	438a      	bics	r2, r1
 800b07a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689a      	ldr	r2, [r3, #8]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2140      	movs	r1, #64	; 0x40
 800b088:	438a      	bics	r2, r1
 800b08a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2220      	movs	r2, #32
 800b090:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2110      	movs	r1, #16
 800b0a4:	438a      	bics	r2, r1
 800b0a6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ac:	0018      	movs	r0, r3
 800b0ae:	f7fc f9af 	bl	8007410 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2258      	movs	r2, #88	; 0x58
 800b0b6:	5a9a      	ldrh	r2, [r3, r2]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	215a      	movs	r1, #90	; 0x5a
 800b0bc:	5a5b      	ldrh	r3, [r3, r1]
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	0011      	movs	r1, r2
 800b0c8:	0018      	movs	r0, r3
 800b0ca:	f000 f899 	bl	800b200 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b0ce:	e07d      	b.n	800b1cc <HAL_UART_IRQHandler+0x3f4>
 800b0d0:	0000080f 	.word	0x0000080f
 800b0d4:	04000120 	.word	0x04000120
 800b0d8:	0800bd21 	.word	0x0800bd21
 800b0dc:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2258      	movs	r2, #88	; 0x58
 800b0e4:	5a99      	ldrh	r1, [r3, r2]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	225a      	movs	r2, #90	; 0x5a
 800b0ea:	5a9b      	ldrh	r3, [r3, r2]
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	200a      	movs	r0, #10
 800b0f0:	183b      	adds	r3, r7, r0
 800b0f2:	1a8a      	subs	r2, r1, r2
 800b0f4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	225a      	movs	r2, #90	; 0x5a
 800b0fa:	5a9b      	ldrh	r3, [r3, r2]
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d100      	bne.n	800b104 <HAL_UART_IRQHandler+0x32c>
 800b102:	e065      	b.n	800b1d0 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800b104:	183b      	adds	r3, r7, r0
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d061      	beq.n	800b1d0 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4931      	ldr	r1, [pc, #196]	; (800b1dc <HAL_UART_IRQHandler+0x404>)
 800b118:	400a      	ands	r2, r1
 800b11a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	689a      	ldr	r2, [r3, #8]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2101      	movs	r1, #1
 800b128:	438a      	bics	r2, r1
 800b12a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2220      	movs	r2, #32
 800b130:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2110      	movs	r1, #16
 800b14a:	438a      	bics	r2, r1
 800b14c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b14e:	183b      	adds	r3, r7, r0
 800b150:	881a      	ldrh	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	0011      	movs	r1, r2
 800b156:	0018      	movs	r0, r3
 800b158:	f000 f852 	bl	800b200 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b15c:	e038      	b.n	800b1d0 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b15e:	69fa      	ldr	r2, [r7, #28]
 800b160:	2380      	movs	r3, #128	; 0x80
 800b162:	035b      	lsls	r3, r3, #13
 800b164:	4013      	ands	r3, r2
 800b166:	d00e      	beq.n	800b186 <HAL_UART_IRQHandler+0x3ae>
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	2380      	movs	r3, #128	; 0x80
 800b16c:	03db      	lsls	r3, r3, #15
 800b16e:	4013      	ands	r3, r2
 800b170:	d009      	beq.n	800b186 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2280      	movs	r2, #128	; 0x80
 800b178:	0352      	lsls	r2, r2, #13
 800b17a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	0018      	movs	r0, r3
 800b180:	f000 fee8 	bl	800bf54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b184:	e027      	b.n	800b1d6 <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	2280      	movs	r2, #128	; 0x80
 800b18a:	4013      	ands	r3, r2
 800b18c:	d00d      	beq.n	800b1aa <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	2280      	movs	r2, #128	; 0x80
 800b192:	4013      	ands	r3, r2
 800b194:	d009      	beq.n	800b1aa <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d01a      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	0010      	movs	r0, r2
 800b1a6:	4798      	blx	r3
    }
    return;
 800b1a8:	e014      	b.n	800b1d4 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	2240      	movs	r2, #64	; 0x40
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	d011      	beq.n	800b1d6 <HAL_UART_IRQHandler+0x3fe>
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	2240      	movs	r2, #64	; 0x40
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	d00d      	beq.n	800b1d6 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	0018      	movs	r0, r3
 800b1be:	f000 fdc6 	bl	800bd4e <UART_EndTransmit_IT>
    return;
 800b1c2:	e008      	b.n	800b1d6 <HAL_UART_IRQHandler+0x3fe>
      return;
 800b1c4:	46c0      	nop			; (mov r8, r8)
 800b1c6:	e006      	b.n	800b1d6 <HAL_UART_IRQHandler+0x3fe>
    return;
 800b1c8:	46c0      	nop			; (mov r8, r8)
 800b1ca:	e004      	b.n	800b1d6 <HAL_UART_IRQHandler+0x3fe>
      return;
 800b1cc:	46c0      	nop			; (mov r8, r8)
 800b1ce:	e002      	b.n	800b1d6 <HAL_UART_IRQHandler+0x3fe>
      return;
 800b1d0:	46c0      	nop			; (mov r8, r8)
 800b1d2:	e000      	b.n	800b1d6 <HAL_UART_IRQHandler+0x3fe>
    return;
 800b1d4:	46c0      	nop			; (mov r8, r8)
  }

}
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	b008      	add	sp, #32
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	fffffedf 	.word	0xfffffedf

0800b1e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b1e8:	46c0      	nop			; (mov r8, r8)
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	b002      	add	sp, #8
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b1f8:	46c0      	nop			; (mov r8, r8)
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	b002      	add	sp, #8
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	000a      	movs	r2, r1
 800b20a:	1cbb      	adds	r3, r7, #2
 800b20c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b20e:	46c0      	nop			; (mov r8, r8)
 800b210:	46bd      	mov	sp, r7
 800b212:	b002      	add	sp, #8
 800b214:	bd80      	pop	{r7, pc}
	...

0800b218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b218:	b5b0      	push	{r4, r5, r7, lr}
 800b21a:	b08e      	sub	sp, #56	; 0x38
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b220:	231a      	movs	r3, #26
 800b222:	2218      	movs	r2, #24
 800b224:	4694      	mov	ip, r2
 800b226:	44bc      	add	ip, r7
 800b228:	4463      	add	r3, ip
 800b22a:	2200      	movs	r2, #0
 800b22c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	689a      	ldr	r2, [r3, #8]
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	431a      	orrs	r2, r3
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	431a      	orrs	r2, r3
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	4313      	orrs	r3, r2
 800b244:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4ab0      	ldr	r2, [pc, #704]	; (800b510 <UART_SetConfig+0x2f8>)
 800b24e:	4013      	ands	r3, r2
 800b250:	0019      	movs	r1, r3
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b258:	430a      	orrs	r2, r1
 800b25a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	4aac      	ldr	r2, [pc, #688]	; (800b514 <UART_SetConfig+0x2fc>)
 800b264:	4013      	ands	r3, r2
 800b266:	0019      	movs	r1, r3
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	68da      	ldr	r2, [r3, #12]
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	430a      	orrs	r2, r1
 800b272:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4aa6      	ldr	r2, [pc, #664]	; (800b518 <UART_SetConfig+0x300>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d004      	beq.n	800b28e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	6a1b      	ldr	r3, [r3, #32]
 800b288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b28a:	4313      	orrs	r3, r2
 800b28c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	4aa1      	ldr	r2, [pc, #644]	; (800b51c <UART_SetConfig+0x304>)
 800b296:	4013      	ands	r3, r2
 800b298:	0019      	movs	r1, r3
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a9d      	ldr	r2, [pc, #628]	; (800b520 <UART_SetConfig+0x308>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d136      	bne.n	800b31c <UART_SetConfig+0x104>
 800b2ae:	4b9d      	ldr	r3, [pc, #628]	; (800b524 <UART_SetConfig+0x30c>)
 800b2b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d020      	beq.n	800b2fc <UART_SetConfig+0xe4>
 800b2ba:	d827      	bhi.n	800b30c <UART_SetConfig+0xf4>
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d00d      	beq.n	800b2dc <UART_SetConfig+0xc4>
 800b2c0:	d824      	bhi.n	800b30c <UART_SetConfig+0xf4>
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <UART_SetConfig+0xb4>
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d010      	beq.n	800b2ec <UART_SetConfig+0xd4>
 800b2ca:	e01f      	b.n	800b30c <UART_SetConfig+0xf4>
 800b2cc:	231b      	movs	r3, #27
 800b2ce:	2218      	movs	r2, #24
 800b2d0:	4694      	mov	ip, r2
 800b2d2:	44bc      	add	ip, r7
 800b2d4:	4463      	add	r3, ip
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	701a      	strb	r2, [r3, #0]
 800b2da:	e0c5      	b.n	800b468 <UART_SetConfig+0x250>
 800b2dc:	231b      	movs	r3, #27
 800b2de:	2218      	movs	r2, #24
 800b2e0:	4694      	mov	ip, r2
 800b2e2:	44bc      	add	ip, r7
 800b2e4:	4463      	add	r3, ip
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	701a      	strb	r2, [r3, #0]
 800b2ea:	e0bd      	b.n	800b468 <UART_SetConfig+0x250>
 800b2ec:	231b      	movs	r3, #27
 800b2ee:	2218      	movs	r2, #24
 800b2f0:	4694      	mov	ip, r2
 800b2f2:	44bc      	add	ip, r7
 800b2f4:	4463      	add	r3, ip
 800b2f6:	2204      	movs	r2, #4
 800b2f8:	701a      	strb	r2, [r3, #0]
 800b2fa:	e0b5      	b.n	800b468 <UART_SetConfig+0x250>
 800b2fc:	231b      	movs	r3, #27
 800b2fe:	2218      	movs	r2, #24
 800b300:	4694      	mov	ip, r2
 800b302:	44bc      	add	ip, r7
 800b304:	4463      	add	r3, ip
 800b306:	2208      	movs	r2, #8
 800b308:	701a      	strb	r2, [r3, #0]
 800b30a:	e0ad      	b.n	800b468 <UART_SetConfig+0x250>
 800b30c:	231b      	movs	r3, #27
 800b30e:	2218      	movs	r2, #24
 800b310:	4694      	mov	ip, r2
 800b312:	44bc      	add	ip, r7
 800b314:	4463      	add	r3, ip
 800b316:	2210      	movs	r2, #16
 800b318:	701a      	strb	r2, [r3, #0]
 800b31a:	e0a5      	b.n	800b468 <UART_SetConfig+0x250>
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a81      	ldr	r2, [pc, #516]	; (800b528 <UART_SetConfig+0x310>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d136      	bne.n	800b394 <UART_SetConfig+0x17c>
 800b326:	4b7f      	ldr	r3, [pc, #508]	; (800b524 <UART_SetConfig+0x30c>)
 800b328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b32a:	220c      	movs	r2, #12
 800b32c:	4013      	ands	r3, r2
 800b32e:	2b0c      	cmp	r3, #12
 800b330:	d020      	beq.n	800b374 <UART_SetConfig+0x15c>
 800b332:	d827      	bhi.n	800b384 <UART_SetConfig+0x16c>
 800b334:	2b08      	cmp	r3, #8
 800b336:	d00d      	beq.n	800b354 <UART_SetConfig+0x13c>
 800b338:	d824      	bhi.n	800b384 <UART_SetConfig+0x16c>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d002      	beq.n	800b344 <UART_SetConfig+0x12c>
 800b33e:	2b04      	cmp	r3, #4
 800b340:	d010      	beq.n	800b364 <UART_SetConfig+0x14c>
 800b342:	e01f      	b.n	800b384 <UART_SetConfig+0x16c>
 800b344:	231b      	movs	r3, #27
 800b346:	2218      	movs	r2, #24
 800b348:	4694      	mov	ip, r2
 800b34a:	44bc      	add	ip, r7
 800b34c:	4463      	add	r3, ip
 800b34e:	2200      	movs	r2, #0
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	e089      	b.n	800b468 <UART_SetConfig+0x250>
 800b354:	231b      	movs	r3, #27
 800b356:	2218      	movs	r2, #24
 800b358:	4694      	mov	ip, r2
 800b35a:	44bc      	add	ip, r7
 800b35c:	4463      	add	r3, ip
 800b35e:	2202      	movs	r2, #2
 800b360:	701a      	strb	r2, [r3, #0]
 800b362:	e081      	b.n	800b468 <UART_SetConfig+0x250>
 800b364:	231b      	movs	r3, #27
 800b366:	2218      	movs	r2, #24
 800b368:	4694      	mov	ip, r2
 800b36a:	44bc      	add	ip, r7
 800b36c:	4463      	add	r3, ip
 800b36e:	2204      	movs	r2, #4
 800b370:	701a      	strb	r2, [r3, #0]
 800b372:	e079      	b.n	800b468 <UART_SetConfig+0x250>
 800b374:	231b      	movs	r3, #27
 800b376:	2218      	movs	r2, #24
 800b378:	4694      	mov	ip, r2
 800b37a:	44bc      	add	ip, r7
 800b37c:	4463      	add	r3, ip
 800b37e:	2208      	movs	r2, #8
 800b380:	701a      	strb	r2, [r3, #0]
 800b382:	e071      	b.n	800b468 <UART_SetConfig+0x250>
 800b384:	231b      	movs	r3, #27
 800b386:	2218      	movs	r2, #24
 800b388:	4694      	mov	ip, r2
 800b38a:	44bc      	add	ip, r7
 800b38c:	4463      	add	r3, ip
 800b38e:	2210      	movs	r2, #16
 800b390:	701a      	strb	r2, [r3, #0]
 800b392:	e069      	b.n	800b468 <UART_SetConfig+0x250>
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a64      	ldr	r2, [pc, #400]	; (800b52c <UART_SetConfig+0x314>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d107      	bne.n	800b3ae <UART_SetConfig+0x196>
 800b39e:	231b      	movs	r3, #27
 800b3a0:	2218      	movs	r2, #24
 800b3a2:	4694      	mov	ip, r2
 800b3a4:	44bc      	add	ip, r7
 800b3a6:	4463      	add	r3, ip
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	e05c      	b.n	800b468 <UART_SetConfig+0x250>
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a5f      	ldr	r2, [pc, #380]	; (800b530 <UART_SetConfig+0x318>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d107      	bne.n	800b3c8 <UART_SetConfig+0x1b0>
 800b3b8:	231b      	movs	r3, #27
 800b3ba:	2218      	movs	r2, #24
 800b3bc:	4694      	mov	ip, r2
 800b3be:	44bc      	add	ip, r7
 800b3c0:	4463      	add	r3, ip
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	e04f      	b.n	800b468 <UART_SetConfig+0x250>
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a52      	ldr	r2, [pc, #328]	; (800b518 <UART_SetConfig+0x300>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d143      	bne.n	800b45a <UART_SetConfig+0x242>
 800b3d2:	4b54      	ldr	r3, [pc, #336]	; (800b524 <UART_SetConfig+0x30c>)
 800b3d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3d6:	23c0      	movs	r3, #192	; 0xc0
 800b3d8:	011b      	lsls	r3, r3, #4
 800b3da:	4013      	ands	r3, r2
 800b3dc:	22c0      	movs	r2, #192	; 0xc0
 800b3de:	0112      	lsls	r2, r2, #4
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d02a      	beq.n	800b43a <UART_SetConfig+0x222>
 800b3e4:	22c0      	movs	r2, #192	; 0xc0
 800b3e6:	0112      	lsls	r2, r2, #4
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d82e      	bhi.n	800b44a <UART_SetConfig+0x232>
 800b3ec:	2280      	movs	r2, #128	; 0x80
 800b3ee:	0112      	lsls	r2, r2, #4
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d012      	beq.n	800b41a <UART_SetConfig+0x202>
 800b3f4:	2280      	movs	r2, #128	; 0x80
 800b3f6:	0112      	lsls	r2, r2, #4
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d826      	bhi.n	800b44a <UART_SetConfig+0x232>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d004      	beq.n	800b40a <UART_SetConfig+0x1f2>
 800b400:	2280      	movs	r2, #128	; 0x80
 800b402:	00d2      	lsls	r2, r2, #3
 800b404:	4293      	cmp	r3, r2
 800b406:	d010      	beq.n	800b42a <UART_SetConfig+0x212>
 800b408:	e01f      	b.n	800b44a <UART_SetConfig+0x232>
 800b40a:	231b      	movs	r3, #27
 800b40c:	2218      	movs	r2, #24
 800b40e:	4694      	mov	ip, r2
 800b410:	44bc      	add	ip, r7
 800b412:	4463      	add	r3, ip
 800b414:	2200      	movs	r2, #0
 800b416:	701a      	strb	r2, [r3, #0]
 800b418:	e026      	b.n	800b468 <UART_SetConfig+0x250>
 800b41a:	231b      	movs	r3, #27
 800b41c:	2218      	movs	r2, #24
 800b41e:	4694      	mov	ip, r2
 800b420:	44bc      	add	ip, r7
 800b422:	4463      	add	r3, ip
 800b424:	2202      	movs	r2, #2
 800b426:	701a      	strb	r2, [r3, #0]
 800b428:	e01e      	b.n	800b468 <UART_SetConfig+0x250>
 800b42a:	231b      	movs	r3, #27
 800b42c:	2218      	movs	r2, #24
 800b42e:	4694      	mov	ip, r2
 800b430:	44bc      	add	ip, r7
 800b432:	4463      	add	r3, ip
 800b434:	2204      	movs	r2, #4
 800b436:	701a      	strb	r2, [r3, #0]
 800b438:	e016      	b.n	800b468 <UART_SetConfig+0x250>
 800b43a:	231b      	movs	r3, #27
 800b43c:	2218      	movs	r2, #24
 800b43e:	4694      	mov	ip, r2
 800b440:	44bc      	add	ip, r7
 800b442:	4463      	add	r3, ip
 800b444:	2208      	movs	r2, #8
 800b446:	701a      	strb	r2, [r3, #0]
 800b448:	e00e      	b.n	800b468 <UART_SetConfig+0x250>
 800b44a:	231b      	movs	r3, #27
 800b44c:	2218      	movs	r2, #24
 800b44e:	4694      	mov	ip, r2
 800b450:	44bc      	add	ip, r7
 800b452:	4463      	add	r3, ip
 800b454:	2210      	movs	r2, #16
 800b456:	701a      	strb	r2, [r3, #0]
 800b458:	e006      	b.n	800b468 <UART_SetConfig+0x250>
 800b45a:	231b      	movs	r3, #27
 800b45c:	2218      	movs	r2, #24
 800b45e:	4694      	mov	ip, r2
 800b460:	44bc      	add	ip, r7
 800b462:	4463      	add	r3, ip
 800b464:	2210      	movs	r2, #16
 800b466:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a2a      	ldr	r2, [pc, #168]	; (800b518 <UART_SetConfig+0x300>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d000      	beq.n	800b474 <UART_SetConfig+0x25c>
 800b472:	e09e      	b.n	800b5b2 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b474:	231b      	movs	r3, #27
 800b476:	2218      	movs	r2, #24
 800b478:	4694      	mov	ip, r2
 800b47a:	44bc      	add	ip, r7
 800b47c:	4463      	add	r3, ip
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b08      	cmp	r3, #8
 800b482:	d01d      	beq.n	800b4c0 <UART_SetConfig+0x2a8>
 800b484:	dc20      	bgt.n	800b4c8 <UART_SetConfig+0x2b0>
 800b486:	2b04      	cmp	r3, #4
 800b488:	d015      	beq.n	800b4b6 <UART_SetConfig+0x29e>
 800b48a:	dc1d      	bgt.n	800b4c8 <UART_SetConfig+0x2b0>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <UART_SetConfig+0x27e>
 800b490:	2b02      	cmp	r3, #2
 800b492:	d005      	beq.n	800b4a0 <UART_SetConfig+0x288>
 800b494:	e018      	b.n	800b4c8 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b496:	f7fe f8b7 	bl	8009608 <HAL_RCC_GetPCLK1Freq>
 800b49a:	0003      	movs	r3, r0
 800b49c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b49e:	e01d      	b.n	800b4dc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4a0:	4b20      	ldr	r3, [pc, #128]	; (800b524 <UART_SetConfig+0x30c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2210      	movs	r2, #16
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	d002      	beq.n	800b4b0 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b4aa:	4b22      	ldr	r3, [pc, #136]	; (800b534 <UART_SetConfig+0x31c>)
 800b4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4ae:	e015      	b.n	800b4dc <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800b4b0:	4b21      	ldr	r3, [pc, #132]	; (800b538 <UART_SetConfig+0x320>)
 800b4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4b4:	e012      	b.n	800b4dc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4b6:	f7fd fff7 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 800b4ba:	0003      	movs	r3, r0
 800b4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4be:	e00d      	b.n	800b4dc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4c0:	2380      	movs	r3, #128	; 0x80
 800b4c2:	021b      	lsls	r3, r3, #8
 800b4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4c6:	e009      	b.n	800b4dc <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b4cc:	231a      	movs	r3, #26
 800b4ce:	2218      	movs	r2, #24
 800b4d0:	4694      	mov	ip, r2
 800b4d2:	44bc      	add	ip, r7
 800b4d4:	4463      	add	r3, ip
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	701a      	strb	r2, [r3, #0]
        break;
 800b4da:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d100      	bne.n	800b4e4 <UART_SetConfig+0x2cc>
 800b4e2:	e13c      	b.n	800b75e <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	0013      	movs	r3, r2
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	189b      	adds	r3, r3, r2
 800b4ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d305      	bcc.n	800b500 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b4fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d91d      	bls.n	800b53c <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800b500:	231a      	movs	r3, #26
 800b502:	2218      	movs	r2, #24
 800b504:	4694      	mov	ip, r2
 800b506:	44bc      	add	ip, r7
 800b508:	4463      	add	r3, ip
 800b50a:	2201      	movs	r2, #1
 800b50c:	701a      	strb	r2, [r3, #0]
 800b50e:	e126      	b.n	800b75e <UART_SetConfig+0x546>
 800b510:	efff69f3 	.word	0xefff69f3
 800b514:	ffffcfff 	.word	0xffffcfff
 800b518:	40004800 	.word	0x40004800
 800b51c:	fffff4ff 	.word	0xfffff4ff
 800b520:	40013800 	.word	0x40013800
 800b524:	40021000 	.word	0x40021000
 800b528:	40004400 	.word	0x40004400
 800b52c:	40004c00 	.word	0x40004c00
 800b530:	40005000 	.word	0x40005000
 800b534:	003d0900 	.word	0x003d0900
 800b538:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53e:	613b      	str	r3, [r7, #16]
 800b540:	2300      	movs	r3, #0
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	6939      	ldr	r1, [r7, #16]
 800b546:	697a      	ldr	r2, [r7, #20]
 800b548:	000b      	movs	r3, r1
 800b54a:	0e1b      	lsrs	r3, r3, #24
 800b54c:	0010      	movs	r0, r2
 800b54e:	0205      	lsls	r5, r0, #8
 800b550:	431d      	orrs	r5, r3
 800b552:	000b      	movs	r3, r1
 800b554:	021c      	lsls	r4, r3, #8
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	085b      	lsrs	r3, r3, #1
 800b55c:	60bb      	str	r3, [r7, #8]
 800b55e:	2300      	movs	r3, #0
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	68b8      	ldr	r0, [r7, #8]
 800b564:	68f9      	ldr	r1, [r7, #12]
 800b566:	1900      	adds	r0, r0, r4
 800b568:	4169      	adcs	r1, r5
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	603b      	str	r3, [r7, #0]
 800b570:	2300      	movs	r3, #0
 800b572:	607b      	str	r3, [r7, #4]
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f7f4 ffe0 	bl	800053c <__aeabi_uldivmod>
 800b57c:	0002      	movs	r2, r0
 800b57e:	000b      	movs	r3, r1
 800b580:	0013      	movs	r3, r2
 800b582:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b586:	23c0      	movs	r3, #192	; 0xc0
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d309      	bcc.n	800b5a2 <UART_SetConfig+0x38a>
 800b58e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b590:	2380      	movs	r3, #128	; 0x80
 800b592:	035b      	lsls	r3, r3, #13
 800b594:	429a      	cmp	r2, r3
 800b596:	d204      	bcs.n	800b5a2 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b59e:	60da      	str	r2, [r3, #12]
 800b5a0:	e0dd      	b.n	800b75e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800b5a2:	231a      	movs	r3, #26
 800b5a4:	2218      	movs	r2, #24
 800b5a6:	4694      	mov	ip, r2
 800b5a8:	44bc      	add	ip, r7
 800b5aa:	4463      	add	r3, ip
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	701a      	strb	r2, [r3, #0]
 800b5b0:	e0d5      	b.n	800b75e <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	69da      	ldr	r2, [r3, #28]
 800b5b6:	2380      	movs	r3, #128	; 0x80
 800b5b8:	021b      	lsls	r3, r3, #8
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d000      	beq.n	800b5c0 <UART_SetConfig+0x3a8>
 800b5be:	e074      	b.n	800b6aa <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800b5c0:	231b      	movs	r3, #27
 800b5c2:	2218      	movs	r2, #24
 800b5c4:	4694      	mov	ip, r2
 800b5c6:	44bc      	add	ip, r7
 800b5c8:	4463      	add	r3, ip
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	2b08      	cmp	r3, #8
 800b5ce:	d822      	bhi.n	800b616 <UART_SetConfig+0x3fe>
 800b5d0:	009a      	lsls	r2, r3, #2
 800b5d2:	4b6b      	ldr	r3, [pc, #428]	; (800b780 <UART_SetConfig+0x568>)
 800b5d4:	18d3      	adds	r3, r2, r3
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5da:	f7fe f815 	bl	8009608 <HAL_RCC_GetPCLK1Freq>
 800b5de:	0003      	movs	r3, r0
 800b5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5e2:	e022      	b.n	800b62a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5e4:	f7fe f826 	bl	8009634 <HAL_RCC_GetPCLK2Freq>
 800b5e8:	0003      	movs	r3, r0
 800b5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5ec:	e01d      	b.n	800b62a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5ee:	4b65      	ldr	r3, [pc, #404]	; (800b784 <UART_SetConfig+0x56c>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2210      	movs	r2, #16
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	d002      	beq.n	800b5fe <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b5f8:	4b63      	ldr	r3, [pc, #396]	; (800b788 <UART_SetConfig+0x570>)
 800b5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5fc:	e015      	b.n	800b62a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800b5fe:	4b63      	ldr	r3, [pc, #396]	; (800b78c <UART_SetConfig+0x574>)
 800b600:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b602:	e012      	b.n	800b62a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b604:	f7fd ff50 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 800b608:	0003      	movs	r3, r0
 800b60a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b60c:	e00d      	b.n	800b62a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b60e:	2380      	movs	r3, #128	; 0x80
 800b610:	021b      	lsls	r3, r3, #8
 800b612:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b614:	e009      	b.n	800b62a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800b616:	2300      	movs	r3, #0
 800b618:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b61a:	231a      	movs	r3, #26
 800b61c:	2218      	movs	r2, #24
 800b61e:	4694      	mov	ip, r2
 800b620:	44bc      	add	ip, r7
 800b622:	4463      	add	r3, ip
 800b624:	2201      	movs	r2, #1
 800b626:	701a      	strb	r2, [r3, #0]
        break;
 800b628:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d100      	bne.n	800b632 <UART_SetConfig+0x41a>
 800b630:	e095      	b.n	800b75e <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b634:	005a      	lsls	r2, r3, #1
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	085b      	lsrs	r3, r3, #1
 800b63c:	18d2      	adds	r2, r2, r3
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	0019      	movs	r1, r3
 800b644:	0010      	movs	r0, r2
 800b646:	f7f4 fd67 	bl	8000118 <__udivsi3>
 800b64a:	0003      	movs	r3, r0
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	2b0f      	cmp	r3, #15
 800b654:	d921      	bls.n	800b69a <UART_SetConfig+0x482>
 800b656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b658:	2380      	movs	r3, #128	; 0x80
 800b65a:	025b      	lsls	r3, r3, #9
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d21c      	bcs.n	800b69a <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b662:	b29a      	uxth	r2, r3
 800b664:	200e      	movs	r0, #14
 800b666:	2418      	movs	r4, #24
 800b668:	193b      	adds	r3, r7, r4
 800b66a:	181b      	adds	r3, r3, r0
 800b66c:	210f      	movs	r1, #15
 800b66e:	438a      	bics	r2, r1
 800b670:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b674:	085b      	lsrs	r3, r3, #1
 800b676:	b29b      	uxth	r3, r3
 800b678:	2207      	movs	r2, #7
 800b67a:	4013      	ands	r3, r2
 800b67c:	b299      	uxth	r1, r3
 800b67e:	193b      	adds	r3, r7, r4
 800b680:	181b      	adds	r3, r3, r0
 800b682:	193a      	adds	r2, r7, r4
 800b684:	1812      	adds	r2, r2, r0
 800b686:	8812      	ldrh	r2, [r2, #0]
 800b688:	430a      	orrs	r2, r1
 800b68a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	193a      	adds	r2, r7, r4
 800b692:	1812      	adds	r2, r2, r0
 800b694:	8812      	ldrh	r2, [r2, #0]
 800b696:	60da      	str	r2, [r3, #12]
 800b698:	e061      	b.n	800b75e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b69a:	231a      	movs	r3, #26
 800b69c:	2218      	movs	r2, #24
 800b69e:	4694      	mov	ip, r2
 800b6a0:	44bc      	add	ip, r7
 800b6a2:	4463      	add	r3, ip
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	701a      	strb	r2, [r3, #0]
 800b6a8:	e059      	b.n	800b75e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6aa:	231b      	movs	r3, #27
 800b6ac:	2218      	movs	r2, #24
 800b6ae:	4694      	mov	ip, r2
 800b6b0:	44bc      	add	ip, r7
 800b6b2:	4463      	add	r3, ip
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	2b08      	cmp	r3, #8
 800b6b8:	d822      	bhi.n	800b700 <UART_SetConfig+0x4e8>
 800b6ba:	009a      	lsls	r2, r3, #2
 800b6bc:	4b34      	ldr	r3, [pc, #208]	; (800b790 <UART_SetConfig+0x578>)
 800b6be:	18d3      	adds	r3, r2, r3
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6c4:	f7fd ffa0 	bl	8009608 <HAL_RCC_GetPCLK1Freq>
 800b6c8:	0003      	movs	r3, r0
 800b6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6cc:	e022      	b.n	800b714 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6ce:	f7fd ffb1 	bl	8009634 <HAL_RCC_GetPCLK2Freq>
 800b6d2:	0003      	movs	r3, r0
 800b6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6d6:	e01d      	b.n	800b714 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6d8:	4b2a      	ldr	r3, [pc, #168]	; (800b784 <UART_SetConfig+0x56c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2210      	movs	r2, #16
 800b6de:	4013      	ands	r3, r2
 800b6e0:	d002      	beq.n	800b6e8 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b6e2:	4b29      	ldr	r3, [pc, #164]	; (800b788 <UART_SetConfig+0x570>)
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6e6:	e015      	b.n	800b714 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800b6e8:	4b28      	ldr	r3, [pc, #160]	; (800b78c <UART_SetConfig+0x574>)
 800b6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6ec:	e012      	b.n	800b714 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6ee:	f7fd fedb 	bl	80094a8 <HAL_RCC_GetSysClockFreq>
 800b6f2:	0003      	movs	r3, r0
 800b6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6f6:	e00d      	b.n	800b714 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6f8:	2380      	movs	r3, #128	; 0x80
 800b6fa:	021b      	lsls	r3, r3, #8
 800b6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6fe:	e009      	b.n	800b714 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b704:	231a      	movs	r3, #26
 800b706:	2218      	movs	r2, #24
 800b708:	4694      	mov	ip, r2
 800b70a:	44bc      	add	ip, r7
 800b70c:	4463      	add	r3, ip
 800b70e:	2201      	movs	r2, #1
 800b710:	701a      	strb	r2, [r3, #0]
        break;
 800b712:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	2b00      	cmp	r3, #0
 800b718:	d021      	beq.n	800b75e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	085a      	lsrs	r2, r3, #1
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	18d2      	adds	r2, r2, r3
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	0019      	movs	r1, r3
 800b72a:	0010      	movs	r0, r2
 800b72c:	f7f4 fcf4 	bl	8000118 <__udivsi3>
 800b730:	0003      	movs	r3, r0
 800b732:	b29b      	uxth	r3, r3
 800b734:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	2b0f      	cmp	r3, #15
 800b73a:	d909      	bls.n	800b750 <UART_SetConfig+0x538>
 800b73c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b73e:	2380      	movs	r3, #128	; 0x80
 800b740:	025b      	lsls	r3, r3, #9
 800b742:	429a      	cmp	r2, r3
 800b744:	d204      	bcs.n	800b750 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b74c:	60da      	str	r2, [r3, #12]
 800b74e:	e006      	b.n	800b75e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b750:	231a      	movs	r3, #26
 800b752:	2218      	movs	r2, #24
 800b754:	4694      	mov	ip, r2
 800b756:	44bc      	add	ip, r7
 800b758:	4463      	add	r3, ip
 800b75a:	2201      	movs	r2, #1
 800b75c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	2200      	movs	r2, #0
 800b762:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	2200      	movs	r2, #0
 800b768:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b76a:	231a      	movs	r3, #26
 800b76c:	2218      	movs	r2, #24
 800b76e:	4694      	mov	ip, r2
 800b770:	44bc      	add	ip, r7
 800b772:	4463      	add	r3, ip
 800b774:	781b      	ldrb	r3, [r3, #0]
}
 800b776:	0018      	movs	r0, r3
 800b778:	46bd      	mov	sp, r7
 800b77a:	b00e      	add	sp, #56	; 0x38
 800b77c:	bdb0      	pop	{r4, r5, r7, pc}
 800b77e:	46c0      	nop			; (mov r8, r8)
 800b780:	0801e538 	.word	0x0801e538
 800b784:	40021000 	.word	0x40021000
 800b788:	003d0900 	.word	0x003d0900
 800b78c:	00f42400 	.word	0x00f42400
 800b790:	0801e55c 	.word	0x0801e55c

0800b794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	d00b      	beq.n	800b7be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	4a4a      	ldr	r2, [pc, #296]	; (800b8d8 <UART_AdvFeatureConfig+0x144>)
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	0019      	movs	r1, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	430a      	orrs	r2, r1
 800b7bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	d00b      	beq.n	800b7e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	4a43      	ldr	r2, [pc, #268]	; (800b8dc <UART_AdvFeatureConfig+0x148>)
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	0019      	movs	r1, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e4:	2204      	movs	r2, #4
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	d00b      	beq.n	800b802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	4a3b      	ldr	r2, [pc, #236]	; (800b8e0 <UART_AdvFeatureConfig+0x14c>)
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	0019      	movs	r1, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	430a      	orrs	r2, r1
 800b800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	2208      	movs	r2, #8
 800b808:	4013      	ands	r3, r2
 800b80a:	d00b      	beq.n	800b824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	4a34      	ldr	r2, [pc, #208]	; (800b8e4 <UART_AdvFeatureConfig+0x150>)
 800b814:	4013      	ands	r3, r2
 800b816:	0019      	movs	r1, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b828:	2210      	movs	r2, #16
 800b82a:	4013      	ands	r3, r2
 800b82c:	d00b      	beq.n	800b846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	4a2c      	ldr	r2, [pc, #176]	; (800b8e8 <UART_AdvFeatureConfig+0x154>)
 800b836:	4013      	ands	r3, r2
 800b838:	0019      	movs	r1, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	430a      	orrs	r2, r1
 800b844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84a:	2220      	movs	r2, #32
 800b84c:	4013      	ands	r3, r2
 800b84e:	d00b      	beq.n	800b868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	4a25      	ldr	r2, [pc, #148]	; (800b8ec <UART_AdvFeatureConfig+0x158>)
 800b858:	4013      	ands	r3, r2
 800b85a:	0019      	movs	r1, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	430a      	orrs	r2, r1
 800b866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	2240      	movs	r2, #64	; 0x40
 800b86e:	4013      	ands	r3, r2
 800b870:	d01d      	beq.n	800b8ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	4a1d      	ldr	r2, [pc, #116]	; (800b8f0 <UART_AdvFeatureConfig+0x15c>)
 800b87a:	4013      	ands	r3, r2
 800b87c:	0019      	movs	r1, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	430a      	orrs	r2, r1
 800b888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b88e:	2380      	movs	r3, #128	; 0x80
 800b890:	035b      	lsls	r3, r3, #13
 800b892:	429a      	cmp	r2, r3
 800b894:	d10b      	bne.n	800b8ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	4a15      	ldr	r2, [pc, #84]	; (800b8f4 <UART_AdvFeatureConfig+0x160>)
 800b89e:	4013      	ands	r3, r2
 800b8a0:	0019      	movs	r1, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b2:	2280      	movs	r2, #128	; 0x80
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	d00b      	beq.n	800b8d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	4a0e      	ldr	r2, [pc, #56]	; (800b8f8 <UART_AdvFeatureConfig+0x164>)
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	0019      	movs	r1, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	605a      	str	r2, [r3, #4]
  }
}
 800b8d0:	46c0      	nop			; (mov r8, r8)
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	b002      	add	sp, #8
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	fffdffff 	.word	0xfffdffff
 800b8dc:	fffeffff 	.word	0xfffeffff
 800b8e0:	fffbffff 	.word	0xfffbffff
 800b8e4:	ffff7fff 	.word	0xffff7fff
 800b8e8:	ffffefff 	.word	0xffffefff
 800b8ec:	ffffdfff 	.word	0xffffdfff
 800b8f0:	ffefffff 	.word	0xffefffff
 800b8f4:	ff9fffff 	.word	0xff9fffff
 800b8f8:	fff7ffff 	.word	0xfff7ffff

0800b8fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af02      	add	r7, sp, #8
 800b902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2280      	movs	r2, #128	; 0x80
 800b908:	2100      	movs	r1, #0
 800b90a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b90c:	f7f9 fbb3 	bl	8005076 <HAL_GetTick>
 800b910:	0003      	movs	r3, r0
 800b912:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2208      	movs	r2, #8
 800b91c:	4013      	ands	r3, r2
 800b91e:	2b08      	cmp	r3, #8
 800b920:	d10c      	bne.n	800b93c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2280      	movs	r2, #128	; 0x80
 800b926:	0391      	lsls	r1, r2, #14
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	4a17      	ldr	r2, [pc, #92]	; (800b988 <UART_CheckIdleState+0x8c>)
 800b92c:	9200      	str	r2, [sp, #0]
 800b92e:	2200      	movs	r2, #0
 800b930:	f000 f82c 	bl	800b98c <UART_WaitOnFlagUntilTimeout>
 800b934:	1e03      	subs	r3, r0, #0
 800b936:	d001      	beq.n	800b93c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b938:	2303      	movs	r3, #3
 800b93a:	e021      	b.n	800b980 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2204      	movs	r2, #4
 800b944:	4013      	ands	r3, r2
 800b946:	2b04      	cmp	r3, #4
 800b948:	d10c      	bne.n	800b964 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2280      	movs	r2, #128	; 0x80
 800b94e:	03d1      	lsls	r1, r2, #15
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	4a0d      	ldr	r2, [pc, #52]	; (800b988 <UART_CheckIdleState+0x8c>)
 800b954:	9200      	str	r2, [sp, #0]
 800b956:	2200      	movs	r2, #0
 800b958:	f000 f818 	bl	800b98c <UART_WaitOnFlagUntilTimeout>
 800b95c:	1e03      	subs	r3, r0, #0
 800b95e:	d001      	beq.n	800b964 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b960:	2303      	movs	r3, #3
 800b962:	e00d      	b.n	800b980 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2220      	movs	r2, #32
 800b968:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2220      	movs	r2, #32
 800b96e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2274      	movs	r2, #116	; 0x74
 800b97a:	2100      	movs	r1, #0
 800b97c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	0018      	movs	r0, r3
 800b982:	46bd      	mov	sp, r7
 800b984:	b004      	add	sp, #16
 800b986:	bd80      	pop	{r7, pc}
 800b988:	01ffffff 	.word	0x01ffffff

0800b98c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	603b      	str	r3, [r7, #0]
 800b998:	1dfb      	adds	r3, r7, #7
 800b99a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b99c:	e05e      	b.n	800ba5c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	d05b      	beq.n	800ba5c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9a4:	f7f9 fb67 	bl	8005076 <HAL_GetTick>
 800b9a8:	0002      	movs	r2, r0
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	69ba      	ldr	r2, [r7, #24]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d302      	bcc.n	800b9ba <UART_WaitOnFlagUntilTimeout+0x2e>
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d11b      	bne.n	800b9f2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	492f      	ldr	r1, [pc, #188]	; (800ba84 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800b9c6:	400a      	ands	r2, r1
 800b9c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	438a      	bics	r2, r1
 800b9d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2220      	movs	r2, #32
 800b9e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2274      	movs	r2, #116	; 0x74
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b9ee:	2303      	movs	r3, #3
 800b9f0:	e044      	b.n	800ba7c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2204      	movs	r2, #4
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	d02e      	beq.n	800ba5c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69da      	ldr	r2, [r3, #28]
 800ba04:	2380      	movs	r3, #128	; 0x80
 800ba06:	011b      	lsls	r3, r3, #4
 800ba08:	401a      	ands	r2, r3
 800ba0a:	2380      	movs	r3, #128	; 0x80
 800ba0c:	011b      	lsls	r3, r3, #4
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d124      	bne.n	800ba5c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2280      	movs	r2, #128	; 0x80
 800ba18:	0112      	lsls	r2, r2, #4
 800ba1a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4917      	ldr	r1, [pc, #92]	; (800ba84 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800ba28:	400a      	ands	r2, r1
 800ba2a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689a      	ldr	r2, [r3, #8]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2101      	movs	r1, #1
 800ba38:	438a      	bics	r2, r1
 800ba3a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2220      	movs	r2, #32
 800ba40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2220      	movs	r2, #32
 800ba46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2280      	movs	r2, #128	; 0x80
 800ba4c:	2120      	movs	r1, #32
 800ba4e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2274      	movs	r2, #116	; 0x74
 800ba54:	2100      	movs	r1, #0
 800ba56:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e00f      	b.n	800ba7c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	69db      	ldr	r3, [r3, #28]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	4013      	ands	r3, r2
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	425a      	negs	r2, r3
 800ba6c:	4153      	adcs	r3, r2
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	001a      	movs	r2, r3
 800ba72:	1dfb      	adds	r3, r7, #7
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d091      	beq.n	800b99e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	0018      	movs	r0, r3
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	b004      	add	sp, #16
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	fffffe5f 	.word	0xfffffe5f

0800ba88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	1dbb      	adds	r3, r7, #6
 800ba94:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	1dba      	adds	r2, r7, #6
 800baa0:	2158      	movs	r1, #88	; 0x58
 800baa2:	8812      	ldrh	r2, [r2, #0]
 800baa4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	1dba      	adds	r2, r7, #6
 800baaa:	215a      	movs	r1, #90	; 0x5a
 800baac:	8812      	ldrh	r2, [r2, #0]
 800baae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	689a      	ldr	r2, [r3, #8]
 800baba:	2380      	movs	r3, #128	; 0x80
 800babc:	015b      	lsls	r3, r3, #5
 800babe:	429a      	cmp	r2, r3
 800bac0:	d10d      	bne.n	800bade <UART_Start_Receive_IT+0x56>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d104      	bne.n	800bad4 <UART_Start_Receive_IT+0x4c>
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	225c      	movs	r2, #92	; 0x5c
 800bace:	4932      	ldr	r1, [pc, #200]	; (800bb98 <UART_Start_Receive_IT+0x110>)
 800bad0:	5299      	strh	r1, [r3, r2]
 800bad2:	e02e      	b.n	800bb32 <UART_Start_Receive_IT+0xaa>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	225c      	movs	r2, #92	; 0x5c
 800bad8:	21ff      	movs	r1, #255	; 0xff
 800bada:	5299      	strh	r1, [r3, r2]
 800badc:	e029      	b.n	800bb32 <UART_Start_Receive_IT+0xaa>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10d      	bne.n	800bb02 <UART_Start_Receive_IT+0x7a>
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d104      	bne.n	800baf8 <UART_Start_Receive_IT+0x70>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	225c      	movs	r2, #92	; 0x5c
 800baf2:	21ff      	movs	r1, #255	; 0xff
 800baf4:	5299      	strh	r1, [r3, r2]
 800baf6:	e01c      	b.n	800bb32 <UART_Start_Receive_IT+0xaa>
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	225c      	movs	r2, #92	; 0x5c
 800bafc:	217f      	movs	r1, #127	; 0x7f
 800bafe:	5299      	strh	r1, [r3, r2]
 800bb00:	e017      	b.n	800bb32 <UART_Start_Receive_IT+0xaa>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	689a      	ldr	r2, [r3, #8]
 800bb06:	2380      	movs	r3, #128	; 0x80
 800bb08:	055b      	lsls	r3, r3, #21
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d10d      	bne.n	800bb2a <UART_Start_Receive_IT+0xa2>
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d104      	bne.n	800bb20 <UART_Start_Receive_IT+0x98>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	225c      	movs	r2, #92	; 0x5c
 800bb1a:	217f      	movs	r1, #127	; 0x7f
 800bb1c:	5299      	strh	r1, [r3, r2]
 800bb1e:	e008      	b.n	800bb32 <UART_Start_Receive_IT+0xaa>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	225c      	movs	r2, #92	; 0x5c
 800bb24:	213f      	movs	r1, #63	; 0x3f
 800bb26:	5299      	strh	r1, [r3, r2]
 800bb28:	e003      	b.n	800bb32 <UART_Start_Receive_IT+0xaa>
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	225c      	movs	r2, #92	; 0x5c
 800bb2e:	2100      	movs	r1, #0
 800bb30:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2280      	movs	r2, #128	; 0x80
 800bb36:	2100      	movs	r1, #0
 800bb38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2222      	movs	r2, #34	; 0x22
 800bb3e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689a      	ldr	r2, [r3, #8]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	430a      	orrs	r2, r1
 800bb4e:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	689a      	ldr	r2, [r3, #8]
 800bb54:	2380      	movs	r3, #128	; 0x80
 800bb56:	015b      	lsls	r3, r3, #5
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d107      	bne.n	800bb6c <UART_Start_Receive_IT+0xe4>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d103      	bne.n	800bb6c <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	4a0d      	ldr	r2, [pc, #52]	; (800bb9c <UART_Start_Receive_IT+0x114>)
 800bb68:	665a      	str	r2, [r3, #100]	; 0x64
 800bb6a:	e002      	b.n	800bb72 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4a0c      	ldr	r2, [pc, #48]	; (800bba0 <UART_Start_Receive_IT+0x118>)
 800bb70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2274      	movs	r2, #116	; 0x74
 800bb76:	2100      	movs	r1, #0
 800bb78:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2190      	movs	r1, #144	; 0x90
 800bb86:	0049      	lsls	r1, r1, #1
 800bb88:	430a      	orrs	r2, r1
 800bb8a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	0018      	movs	r0, r3
 800bb90:	46bd      	mov	sp, r7
 800bb92:	b004      	add	sp, #16
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	46c0      	nop			; (mov r8, r8)
 800bb98:	000001ff 	.word	0x000001ff
 800bb9c:	0800be6d 	.word	0x0800be6d
 800bba0:	0800bd85 	.word	0x0800bd85

0800bba4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	21c0      	movs	r1, #192	; 0xc0
 800bbb8:	438a      	bics	r2, r1
 800bbba:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2220      	movs	r2, #32
 800bbc0:	679a      	str	r2, [r3, #120]	; 0x78
}
 800bbc2:	46c0      	nop			; (mov r8, r8)
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	b002      	add	sp, #8
 800bbc8:	bd80      	pop	{r7, pc}
	...

0800bbcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4912      	ldr	r1, [pc, #72]	; (800bc28 <UART_EndRxTransfer+0x5c>)
 800bbe0:	400a      	ands	r2, r1
 800bbe2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	689a      	ldr	r2, [r3, #8]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2101      	movs	r1, #1
 800bbf0:	438a      	bics	r2, r1
 800bbf2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d107      	bne.n	800bc0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2110      	movs	r1, #16
 800bc08:	438a      	bics	r2, r1
 800bc0a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bc1e:	46c0      	nop			; (mov r8, r8)
 800bc20:	46bd      	mov	sp, r7
 800bc22:	b002      	add	sp, #8
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	46c0      	nop			; (mov r8, r8)
 800bc28:	fffffedf 	.word	0xfffffedf

0800bc2c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc38:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2220      	movs	r2, #32
 800bc42:	4013      	ands	r3, r2
 800bc44:	d114      	bne.n	800bc70 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2252      	movs	r2, #82	; 0x52
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689a      	ldr	r2, [r3, #8]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2180      	movs	r1, #128	; 0x80
 800bc5a:	438a      	bics	r2, r1
 800bc5c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2140      	movs	r1, #64	; 0x40
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc6e:	e003      	b.n	800bc78 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	0018      	movs	r0, r3
 800bc74:	f7f9 fc6a 	bl	800554c <HAL_UART_TxCpltCallback>
}
 800bc78:	46c0      	nop			; (mov r8, r8)
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	b004      	add	sp, #16
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	0018      	movs	r0, r3
 800bc92:	f7ff faa5 	bl	800b1e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc96:	46c0      	nop			; (mov r8, r8)
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	b004      	add	sp, #16
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b086      	sub	sp, #24
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcaa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcb0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcb6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	2280      	movs	r2, #128	; 0x80
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	2b80      	cmp	r3, #128	; 0x80
 800bcc4:	d10a      	bne.n	800bcdc <UART_DMAError+0x3e>
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	2b21      	cmp	r3, #33	; 0x21
 800bcca:	d107      	bne.n	800bcdc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	2252      	movs	r2, #82	; 0x52
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	0018      	movs	r0, r3
 800bcd8:	f7ff ff64 	bl	800bba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	2240      	movs	r2, #64	; 0x40
 800bce4:	4013      	ands	r3, r2
 800bce6:	2b40      	cmp	r3, #64	; 0x40
 800bce8:	d10a      	bne.n	800bd00 <UART_DMAError+0x62>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2b22      	cmp	r3, #34	; 0x22
 800bcee:	d107      	bne.n	800bd00 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	225a      	movs	r2, #90	; 0x5a
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	0018      	movs	r0, r3
 800bcfc:	f7ff ff66 	bl	800bbcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2280      	movs	r2, #128	; 0x80
 800bd04:	589b      	ldr	r3, [r3, r2]
 800bd06:	2210      	movs	r2, #16
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	2180      	movs	r1, #128	; 0x80
 800bd0e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	0018      	movs	r0, r3
 800bd14:	f7ff fa6c 	bl	800b1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd18:	46c0      	nop			; (mov r8, r8)
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	b006      	add	sp, #24
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	225a      	movs	r2, #90	; 0x5a
 800bd32:	2100      	movs	r1, #0
 800bd34:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2252      	movs	r2, #82	; 0x52
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	0018      	movs	r0, r3
 800bd42:	f7ff fa55 	bl	800b1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd46:	46c0      	nop			; (mov r8, r8)
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	b004      	add	sp, #16
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b082      	sub	sp, #8
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2140      	movs	r1, #64	; 0x40
 800bd62:	438a      	bics	r2, r1
 800bd64:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2220      	movs	r2, #32
 800bd6a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	0018      	movs	r0, r3
 800bd76:	f7f9 fbe9 	bl	800554c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd7a:	46c0      	nop			; (mov r8, r8)
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	b002      	add	sp, #8
 800bd80:	bd80      	pop	{r7, pc}
	...

0800bd84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bd8c:	200e      	movs	r0, #14
 800bd8e:	183b      	adds	r3, r7, r0
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	215c      	movs	r1, #92	; 0x5c
 800bd94:	5a52      	ldrh	r2, [r2, r1]
 800bd96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd9c:	2b22      	cmp	r3, #34	; 0x22
 800bd9e:	d157      	bne.n	800be50 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bda6:	210c      	movs	r1, #12
 800bda8:	187b      	adds	r3, r7, r1
 800bdaa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bdac:	187b      	adds	r3, r7, r1
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	183b      	adds	r3, r7, r0
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	b2d9      	uxtb	r1, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdbc:	400a      	ands	r2, r1
 800bdbe:	b2d2      	uxtb	r2, r2
 800bdc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdc6:	1c5a      	adds	r2, r3, #1
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	225a      	movs	r2, #90	; 0x5a
 800bdd0:	5a9b      	ldrh	r3, [r3, r2]
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	b299      	uxth	r1, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	225a      	movs	r2, #90	; 0x5a
 800bddc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	225a      	movs	r2, #90	; 0x5a
 800bde2:	5a9b      	ldrh	r3, [r3, r2]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d13a      	bne.n	800be60 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	491c      	ldr	r1, [pc, #112]	; (800be68 <UART_RxISR_8BIT+0xe4>)
 800bdf6:	400a      	ands	r2, r1
 800bdf8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	689a      	ldr	r2, [r3, #8]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2101      	movs	r1, #1
 800be06:	438a      	bics	r2, r1
 800be08:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2220      	movs	r2, #32
 800be0e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d110      	bne.n	800be40 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2110      	movs	r1, #16
 800be2a:	438a      	bics	r2, r1
 800be2c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2258      	movs	r2, #88	; 0x58
 800be32:	5a9a      	ldrh	r2, [r3, r2]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	0011      	movs	r1, r2
 800be38:	0018      	movs	r0, r3
 800be3a:	f7ff f9e1 	bl	800b200 <HAL_UARTEx_RxEventCallback>
 800be3e:	e003      	b.n	800be48 <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	0018      	movs	r0, r3
 800be44:	f7f9 fb90 	bl	8005568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be4e:	e007      	b.n	800be60 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	699a      	ldr	r2, [r3, #24]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2108      	movs	r1, #8
 800be5c:	430a      	orrs	r2, r1
 800be5e:	619a      	str	r2, [r3, #24]
}
 800be60:	46c0      	nop			; (mov r8, r8)
 800be62:	46bd      	mov	sp, r7
 800be64:	b004      	add	sp, #16
 800be66:	bd80      	pop	{r7, pc}
 800be68:	fffffedf 	.word	0xfffffedf

0800be6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800be74:	200e      	movs	r0, #14
 800be76:	183b      	adds	r3, r7, r0
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	215c      	movs	r1, #92	; 0x5c
 800be7c:	5a52      	ldrh	r2, [r2, r1]
 800be7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be84:	2b22      	cmp	r3, #34	; 0x22
 800be86:	d157      	bne.n	800bf38 <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be8e:	210c      	movs	r1, #12
 800be90:	187b      	adds	r3, r7, r1
 800be92:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be98:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800be9a:	187b      	adds	r3, r7, r1
 800be9c:	183a      	adds	r2, r7, r0
 800be9e:	881b      	ldrh	r3, [r3, #0]
 800bea0:	8812      	ldrh	r2, [r2, #0]
 800bea2:	4013      	ands	r3, r2
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beae:	1c9a      	adds	r2, r3, #2
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	225a      	movs	r2, #90	; 0x5a
 800beb8:	5a9b      	ldrh	r3, [r3, r2]
 800beba:	b29b      	uxth	r3, r3
 800bebc:	3b01      	subs	r3, #1
 800bebe:	b299      	uxth	r1, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	225a      	movs	r2, #90	; 0x5a
 800bec4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	225a      	movs	r2, #90	; 0x5a
 800beca:	5a9b      	ldrh	r3, [r3, r2]
 800becc:	b29b      	uxth	r3, r3
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d13a      	bne.n	800bf48 <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	491c      	ldr	r1, [pc, #112]	; (800bf50 <UART_RxISR_16BIT+0xe4>)
 800bede:	400a      	ands	r2, r1
 800bee0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	689a      	ldr	r2, [r3, #8]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2101      	movs	r1, #1
 800beee:	438a      	bics	r2, r1
 800bef0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2220      	movs	r2, #32
 800bef6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d110      	bne.n	800bf28 <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2110      	movs	r1, #16
 800bf12:	438a      	bics	r2, r1
 800bf14:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2258      	movs	r2, #88	; 0x58
 800bf1a:	5a9a      	ldrh	r2, [r3, r2]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	0011      	movs	r1, r2
 800bf20:	0018      	movs	r0, r3
 800bf22:	f7ff f96d 	bl	800b200 <HAL_UARTEx_RxEventCallback>
 800bf26:	e003      	b.n	800bf30 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	0018      	movs	r0, r3
 800bf2c:	f7f9 fb1c 	bl	8005568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf36:	e007      	b.n	800bf48 <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	699a      	ldr	r2, [r3, #24]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2108      	movs	r1, #8
 800bf44:	430a      	orrs	r2, r1
 800bf46:	619a      	str	r2, [r3, #24]
}
 800bf48:	46c0      	nop			; (mov r8, r8)
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	b004      	add	sp, #16
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	fffffedf 	.word	0xfffffedf

0800bf54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bf5c:	46c0      	nop			; (mov r8, r8)
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	b002      	add	sp, #8
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b088      	sub	sp, #32
 800bf68:	af02      	add	r7, sp, #8
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	1d3b      	adds	r3, r7, #4
 800bf6e:	6019      	str	r1, [r3, #0]
 800bf70:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf72:	2317      	movs	r3, #23
 800bf74:	18fb      	adds	r3, r7, r3
 800bf76:	2200      	movs	r2, #0
 800bf78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2274      	movs	r2, #116	; 0x74
 800bf7e:	5c9b      	ldrb	r3, [r3, r2]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d101      	bne.n	800bf88 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800bf84:	2302      	movs	r3, #2
 800bf86:	e04a      	b.n	800c01e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2274      	movs	r2, #116	; 0x74
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2224      	movs	r2, #36	; 0x24
 800bf94:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	438a      	bics	r2, r1
 800bfa4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	4a1e      	ldr	r2, [pc, #120]	; (800c028 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800bfae:	4013      	ands	r3, r2
 800bfb0:	0019      	movs	r1, r3
 800bfb2:	1d3b      	adds	r3, r7, #4
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	430a      	orrs	r2, r1
 800bfbc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800bfbe:	1d3b      	adds	r3, r7, #4
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d105      	bne.n	800bfd2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800bfc6:	1d3b      	adds	r3, r7, #4
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	6819      	ldr	r1, [r3, #0]
 800bfcc:	685a      	ldr	r2, [r3, #4]
 800bfce:	f000 f84f 	bl	800c070 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2101      	movs	r1, #1
 800bfde:	430a      	orrs	r2, r1
 800bfe0:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfe2:	f7f9 f848 	bl	8005076 <HAL_GetTick>
 800bfe6:	0003      	movs	r3, r0
 800bfe8:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	2280      	movs	r2, #128	; 0x80
 800bfee:	03d1      	lsls	r1, r2, #15
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	4a0e      	ldr	r2, [pc, #56]	; (800c02c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800bff4:	9200      	str	r2, [sp, #0]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f7ff fcc8 	bl	800b98c <UART_WaitOnFlagUntilTimeout>
 800bffc:	1e03      	subs	r3, r0, #0
 800bffe:	d004      	beq.n	800c00a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800c000:	2317      	movs	r3, #23
 800c002:	18fb      	adds	r3, r7, r3
 800c004:	2203      	movs	r2, #3
 800c006:	701a      	strb	r2, [r3, #0]
 800c008:	e002      	b.n	800c010 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2220      	movs	r2, #32
 800c00e:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2274      	movs	r2, #116	; 0x74
 800c014:	2100      	movs	r1, #0
 800c016:	5499      	strb	r1, [r3, r2]

  return status;
 800c018:	2317      	movs	r3, #23
 800c01a:	18fb      	adds	r3, r7, r3
 800c01c:	781b      	ldrb	r3, [r3, #0]
}
 800c01e:	0018      	movs	r0, r3
 800c020:	46bd      	mov	sp, r7
 800c022:	b006      	add	sp, #24
 800c024:	bd80      	pop	{r7, pc}
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	ffcfffff 	.word	0xffcfffff
 800c02c:	01ffffff 	.word	0x01ffffff

0800c030 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2274      	movs	r2, #116	; 0x74
 800c03c:	5c9b      	ldrb	r3, [r3, r2]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d101      	bne.n	800c046 <HAL_UARTEx_EnableStopMode+0x16>
 800c042:	2302      	movs	r3, #2
 800c044:	e010      	b.n	800c068 <HAL_UARTEx_EnableStopMode+0x38>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2274      	movs	r2, #116	; 0x74
 800c04a:	2101      	movs	r1, #1
 800c04c:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2102      	movs	r1, #2
 800c05a:	430a      	orrs	r2, r1
 800c05c:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2274      	movs	r2, #116	; 0x74
 800c062:	2100      	movs	r1, #0
 800c064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	0018      	movs	r0, r3
 800c06a:	46bd      	mov	sp, r7
 800c06c:	b002      	add	sp, #8
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	1d3b      	adds	r3, r7, #4
 800c07a:	6019      	str	r1, [r3, #0]
 800c07c:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	2210      	movs	r2, #16
 800c086:	4393      	bics	r3, r2
 800c088:	001a      	movs	r2, r3
 800c08a:	1d3b      	adds	r3, r7, #4
 800c08c:	889b      	ldrh	r3, [r3, #4]
 800c08e:	0019      	movs	r1, r3
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	430a      	orrs	r2, r1
 800c096:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	021b      	lsls	r3, r3, #8
 800c0a0:	0a19      	lsrs	r1, r3, #8
 800c0a2:	1d3b      	adds	r3, r7, #4
 800c0a4:	799b      	ldrb	r3, [r3, #6]
 800c0a6:	061a      	lsls	r2, r3, #24
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	430a      	orrs	r2, r1
 800c0ae:	605a      	str	r2, [r3, #4]
}
 800c0b0:	46c0      	nop			; (mov r8, r8)
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	b004      	add	sp, #16
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	33f1      	adds	r3, #241	; 0xf1
 800c0c4:	2210      	movs	r2, #16
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	0018      	movs	r0, r3
 800c0ca:	f00d f951 	bl	8019370 <memset1>
    ctx->M_n = 0;
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	238a      	movs	r3, #138	; 0x8a
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	22f0      	movs	r2, #240	; 0xf0
 800c0dc:	2100      	movs	r1, #0
 800c0de:	0018      	movs	r0, r3
 800c0e0:	f00d f946 	bl	8019370 <memset1>
}
 800c0e4:	46c0      	nop			; (mov r8, r8)
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	b002      	add	sp, #8
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	2110      	movs	r1, #16
 800c0fc:	0018      	movs	r0, r3
 800c0fe:	f000 feaf 	bl	800ce60 <lorawan_aes_set_key>
}
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	46bd      	mov	sp, r7
 800c106:	b002      	add	sp, #8
 800c108:	bd80      	pop	{r7, pc}

0800c10a <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c10a:	b590      	push	{r4, r7, lr}
 800c10c:	b08d      	sub	sp, #52	; 0x34
 800c10e:	af00      	add	r7, sp, #0
 800c110:	60f8      	str	r0, [r7, #12]
 800c112:	60b9      	str	r1, [r7, #8]
 800c114:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	238a      	movs	r3, #138	; 0x8a
 800c11a:	005b      	lsls	r3, r3, #1
 800c11c:	58d3      	ldr	r3, [r2, r3]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d100      	bne.n	800c124 <AES_CMAC_Update+0x1a>
 800c122:	e0a4      	b.n	800c26e <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	238a      	movs	r3, #138	; 0x8a
 800c128:	005b      	lsls	r3, r3, #1
 800c12a:	58d3      	ldr	r3, [r2, r3]
 800c12c:	2210      	movs	r2, #16
 800c12e:	1ad2      	subs	r2, r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4293      	cmp	r3, r2
 800c134:	d900      	bls.n	800c138 <AES_CMAC_Update+0x2e>
 800c136:	0013      	movs	r3, r2
 800c138:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	1c9a      	adds	r2, r3, #2
 800c13e:	32ff      	adds	r2, #255	; 0xff
 800c140:	68f9      	ldr	r1, [r7, #12]
 800c142:	238a      	movs	r3, #138	; 0x8a
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	58cb      	ldr	r3, [r1, r3]
 800c148:	18d3      	adds	r3, r2, r3
 800c14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c14c:	b292      	uxth	r2, r2
 800c14e:	68b9      	ldr	r1, [r7, #8]
 800c150:	0018      	movs	r0, r3
 800c152:	f00d f8cf 	bl	80192f4 <memcpy1>
        ctx->M_n += mlen;
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	238a      	movs	r3, #138	; 0x8a
 800c15a:	005b      	lsls	r3, r3, #1
 800c15c:	58d2      	ldr	r2, [r2, r3]
 800c15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c160:	18d1      	adds	r1, r2, r3
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	238a      	movs	r3, #138	; 0x8a
 800c166:	005b      	lsls	r3, r3, #1
 800c168:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	238a      	movs	r3, #138	; 0x8a
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	58d3      	ldr	r3, [r2, r3]
 800c172:	2b0f      	cmp	r3, #15
 800c174:	d800      	bhi.n	800c178 <AES_CMAC_Update+0x6e>
 800c176:	e08c      	b.n	800c292 <AES_CMAC_Update+0x188>
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d100      	bne.n	800c182 <AES_CMAC_Update+0x78>
 800c180:	e087      	b.n	800c292 <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800c182:	2300      	movs	r3, #0
 800c184:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c186:	e018      	b.n	800c1ba <AES_CMAC_Update+0xb0>
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	21f1      	movs	r1, #241	; 0xf1
 800c18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18e:	18d3      	adds	r3, r2, r3
 800c190:	185b      	adds	r3, r3, r1
 800c192:	781a      	ldrb	r2, [r3, #0]
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	2302      	movs	r3, #2
 800c198:	33ff      	adds	r3, #255	; 0xff
 800c19a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c19c:	1841      	adds	r1, r0, r1
 800c19e:	18cb      	adds	r3, r1, r3
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	4053      	eors	r3, r2
 800c1a4:	b2d8      	uxtb	r0, r3
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	21f1      	movs	r1, #241	; 0xf1
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	18d3      	adds	r3, r2, r3
 800c1ae:	185b      	adds	r3, r3, r1
 800c1b0:	1c02      	adds	r2, r0, #0
 800c1b2:	701a      	strb	r2, [r3, #0]
 800c1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1bc:	2b0f      	cmp	r3, #15
 800c1be:	dde3      	ble.n	800c188 <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	33f1      	adds	r3, #241	; 0xf1
 800c1c4:	0019      	movs	r1, r3
 800c1c6:	2414      	movs	r4, #20
 800c1c8:	193b      	adds	r3, r7, r4
 800c1ca:	2210      	movs	r2, #16
 800c1cc:	0018      	movs	r0, r3
 800c1ce:	f00d f891 	bl	80192f4 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	1939      	adds	r1, r7, r4
 800c1d6:	193b      	adds	r3, r7, r4
 800c1d8:	0018      	movs	r0, r3
 800c1da:	f000 ff7d 	bl	800d0d8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	33f1      	adds	r3, #241	; 0xf1
 800c1e2:	1939      	adds	r1, r7, r4
 800c1e4:	2210      	movs	r2, #16
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	f00d f884 	bl	80192f4 <memcpy1>

        data += mlen;
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f0:	18d3      	adds	r3, r2, r3
 800c1f2:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c1fc:	e037      	b.n	800c26e <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800c1fe:	2300      	movs	r3, #0
 800c200:	62bb      	str	r3, [r7, #40]	; 0x28
 800c202:	e015      	b.n	800c230 <AES_CMAC_Update+0x126>
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	21f1      	movs	r1, #241	; 0xf1
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	18d3      	adds	r3, r2, r3
 800c20c:	185b      	adds	r3, r3, r1
 800c20e:	781a      	ldrb	r2, [r3, #0]
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	18cb      	adds	r3, r1, r3
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	4053      	eors	r3, r2
 800c21a:	b2d8      	uxtb	r0, r3
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	21f1      	movs	r1, #241	; 0xf1
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	18d3      	adds	r3, r2, r3
 800c224:	185b      	adds	r3, r3, r1
 800c226:	1c02      	adds	r2, r0, #0
 800c228:	701a      	strb	r2, [r3, #0]
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	3301      	adds	r3, #1
 800c22e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c232:	2b0f      	cmp	r3, #15
 800c234:	dde6      	ble.n	800c204 <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	33f1      	adds	r3, #241	; 0xf1
 800c23a:	0019      	movs	r1, r3
 800c23c:	2414      	movs	r4, #20
 800c23e:	193b      	adds	r3, r7, r4
 800c240:	2210      	movs	r2, #16
 800c242:	0018      	movs	r0, r3
 800c244:	f00d f856 	bl	80192f4 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	1939      	adds	r1, r7, r4
 800c24c:	193b      	adds	r3, r7, r4
 800c24e:	0018      	movs	r0, r3
 800c250:	f000 ff42 	bl	800d0d8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	33f1      	adds	r3, #241	; 0xf1
 800c258:	1939      	adds	r1, r7, r4
 800c25a:	2210      	movs	r2, #16
 800c25c:	0018      	movs	r0, r3
 800c25e:	f00d f849 	bl	80192f4 <memcpy1>

        data += 16;
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	3310      	adds	r3, #16
 800c266:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	3b10      	subs	r3, #16
 800c26c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b10      	cmp	r3, #16
 800c272:	d8c4      	bhi.n	800c1fe <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	3302      	adds	r3, #2
 800c278:	33ff      	adds	r3, #255	; 0xff
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	b292      	uxth	r2, r2
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	0018      	movs	r0, r3
 800c282:	f00d f837 	bl	80192f4 <memcpy1>
    ctx->M_n = len;
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	238a      	movs	r3, #138	; 0x8a
 800c28a:	005b      	lsls	r3, r3, #1
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	50d1      	str	r1, [r2, r3]
 800c290:	e000      	b.n	800c294 <AES_CMAC_Update+0x18a>
            return;
 800c292:	46c0      	nop			; (mov r8, r8)
}
 800c294:	46bd      	mov	sp, r7
 800c296:	b00d      	add	sp, #52	; 0x34
 800c298:	bd90      	pop	{r4, r7, pc}

0800c29a <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c29a:	b590      	push	{r4, r7, lr}
 800c29c:	b093      	sub	sp, #76	; 0x4c
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
 800c2a2:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c2a4:	241c      	movs	r4, #28
 800c2a6:	193b      	adds	r3, r7, r4
 800c2a8:	2210      	movs	r2, #16
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	0018      	movs	r0, r3
 800c2ae:	f00d f85f 	bl	8019370 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	1939      	adds	r1, r7, r4
 800c2b6:	193b      	adds	r3, r7, r4
 800c2b8:	0018      	movs	r0, r3
 800c2ba:	f000 ff0d 	bl	800d0d8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c2be:	193b      	adds	r3, r7, r4
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	b25b      	sxtb	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	da2e      	bge.n	800c326 <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	647b      	str	r3, [r7, #68]	; 0x44
 800c2cc:	e018      	b.n	800c300 <AES_CMAC_Final+0x66>
 800c2ce:	201c      	movs	r0, #28
 800c2d0:	183a      	adds	r2, r7, r0
 800c2d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2d4:	18d3      	adds	r3, r2, r3
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	005b      	lsls	r3, r3, #1
 800c2da:	b25a      	sxtb	r2, r3
 800c2dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2de:	3301      	adds	r3, #1
 800c2e0:	1839      	adds	r1, r7, r0
 800c2e2:	5ccb      	ldrb	r3, [r1, r3]
 800c2e4:	09db      	lsrs	r3, r3, #7
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	b25b      	sxtb	r3, r3
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	b25b      	sxtb	r3, r3
 800c2ee:	b2d9      	uxtb	r1, r3
 800c2f0:	183a      	adds	r2, r7, r0
 800c2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2f4:	18d3      	adds	r3, r2, r3
 800c2f6:	1c0a      	adds	r2, r1, #0
 800c2f8:	701a      	strb	r2, [r3, #0]
 800c2fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	647b      	str	r3, [r7, #68]	; 0x44
 800c300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c302:	2b0e      	cmp	r3, #14
 800c304:	dde3      	ble.n	800c2ce <AES_CMAC_Final+0x34>
 800c306:	211c      	movs	r1, #28
 800c308:	187b      	adds	r3, r7, r1
 800c30a:	7bdb      	ldrb	r3, [r3, #15]
 800c30c:	18db      	adds	r3, r3, r3
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	187b      	adds	r3, r7, r1
 800c312:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800c314:	187b      	adds	r3, r7, r1
 800c316:	7bdb      	ldrb	r3, [r3, #15]
 800c318:	2279      	movs	r2, #121	; 0x79
 800c31a:	4252      	negs	r2, r2
 800c31c:	4053      	eors	r3, r2
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	187b      	adds	r3, r7, r1
 800c322:	73da      	strb	r2, [r3, #15]
 800c324:	e025      	b.n	800c372 <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800c326:	2300      	movs	r3, #0
 800c328:	643b      	str	r3, [r7, #64]	; 0x40
 800c32a:	e018      	b.n	800c35e <AES_CMAC_Final+0xc4>
 800c32c:	201c      	movs	r0, #28
 800c32e:	183a      	adds	r2, r7, r0
 800c330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c332:	18d3      	adds	r3, r2, r3
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	b25a      	sxtb	r2, r3
 800c33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c33c:	3301      	adds	r3, #1
 800c33e:	1839      	adds	r1, r7, r0
 800c340:	5ccb      	ldrb	r3, [r1, r3]
 800c342:	09db      	lsrs	r3, r3, #7
 800c344:	b2db      	uxtb	r3, r3
 800c346:	b25b      	sxtb	r3, r3
 800c348:	4313      	orrs	r3, r2
 800c34a:	b25b      	sxtb	r3, r3
 800c34c:	b2d9      	uxtb	r1, r3
 800c34e:	183a      	adds	r2, r7, r0
 800c350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c352:	18d3      	adds	r3, r2, r3
 800c354:	1c0a      	adds	r2, r1, #0
 800c356:	701a      	strb	r2, [r3, #0]
 800c358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c35a:	3301      	adds	r3, #1
 800c35c:	643b      	str	r3, [r7, #64]	; 0x40
 800c35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c360:	2b0e      	cmp	r3, #14
 800c362:	dde3      	ble.n	800c32c <AES_CMAC_Final+0x92>
 800c364:	211c      	movs	r1, #28
 800c366:	187b      	adds	r3, r7, r1
 800c368:	7bdb      	ldrb	r3, [r3, #15]
 800c36a:	18db      	adds	r3, r3, r3
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	187b      	adds	r3, r7, r1
 800c370:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	238a      	movs	r3, #138	; 0x8a
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	58d3      	ldr	r3, [r2, r3]
 800c37a:	2b10      	cmp	r3, #16
 800c37c:	d11f      	bne.n	800c3be <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c37e:	2300      	movs	r3, #0
 800c380:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c382:	e018      	b.n	800c3b6 <AES_CMAC_Final+0x11c>
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	2302      	movs	r3, #2
 800c388:	33ff      	adds	r3, #255	; 0xff
 800c38a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c38c:	188a      	adds	r2, r1, r2
 800c38e:	18d3      	adds	r3, r2, r3
 800c390:	781a      	ldrb	r2, [r3, #0]
 800c392:	231c      	movs	r3, #28
 800c394:	18f9      	adds	r1, r7, r3
 800c396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c398:	18cb      	adds	r3, r1, r3
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	4053      	eors	r3, r2
 800c39e:	b2d8      	uxtb	r0, r3
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	33ff      	adds	r3, #255	; 0xff
 800c3a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3a8:	188a      	adds	r2, r1, r2
 800c3aa:	18d3      	adds	r3, r2, r3
 800c3ac:	1c02      	adds	r2, r0, #0
 800c3ae:	701a      	strb	r2, [r3, #0]
 800c3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b8:	2b0f      	cmp	r3, #15
 800c3ba:	dde3      	ble.n	800c384 <AES_CMAC_Final+0xea>
 800c3bc:	e09f      	b.n	800c4fe <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c3be:	231c      	movs	r3, #28
 800c3c0:	18fb      	adds	r3, r7, r3
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	b25b      	sxtb	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	da2e      	bge.n	800c428 <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3ce:	e018      	b.n	800c402 <AES_CMAC_Final+0x168>
 800c3d0:	201c      	movs	r0, #28
 800c3d2:	183a      	adds	r2, r7, r0
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d6:	18d3      	adds	r3, r2, r3
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	b25a      	sxtb	r2, r3
 800c3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	1839      	adds	r1, r7, r0
 800c3e4:	5ccb      	ldrb	r3, [r1, r3]
 800c3e6:	09db      	lsrs	r3, r3, #7
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	b25b      	sxtb	r3, r3
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	b25b      	sxtb	r3, r3
 800c3f0:	b2d9      	uxtb	r1, r3
 800c3f2:	183a      	adds	r2, r7, r0
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	18d3      	adds	r3, r2, r3
 800c3f8:	1c0a      	adds	r2, r1, #0
 800c3fa:	701a      	strb	r2, [r3, #0]
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	3301      	adds	r3, #1
 800c400:	63bb      	str	r3, [r7, #56]	; 0x38
 800c402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c404:	2b0e      	cmp	r3, #14
 800c406:	dde3      	ble.n	800c3d0 <AES_CMAC_Final+0x136>
 800c408:	211c      	movs	r1, #28
 800c40a:	187b      	adds	r3, r7, r1
 800c40c:	7bdb      	ldrb	r3, [r3, #15]
 800c40e:	18db      	adds	r3, r3, r3
 800c410:	b2da      	uxtb	r2, r3
 800c412:	187b      	adds	r3, r7, r1
 800c414:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800c416:	187b      	adds	r3, r7, r1
 800c418:	7bdb      	ldrb	r3, [r3, #15]
 800c41a:	2279      	movs	r2, #121	; 0x79
 800c41c:	4252      	negs	r2, r2
 800c41e:	4053      	eors	r3, r2
 800c420:	b2da      	uxtb	r2, r3
 800c422:	187b      	adds	r3, r7, r1
 800c424:	73da      	strb	r2, [r3, #15]
 800c426:	e025      	b.n	800c474 <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800c428:	2300      	movs	r3, #0
 800c42a:	637b      	str	r3, [r7, #52]	; 0x34
 800c42c:	e018      	b.n	800c460 <AES_CMAC_Final+0x1c6>
 800c42e:	201c      	movs	r0, #28
 800c430:	183a      	adds	r2, r7, r0
 800c432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c434:	18d3      	adds	r3, r2, r3
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	005b      	lsls	r3, r3, #1
 800c43a:	b25a      	sxtb	r2, r3
 800c43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43e:	3301      	adds	r3, #1
 800c440:	1839      	adds	r1, r7, r0
 800c442:	5ccb      	ldrb	r3, [r1, r3]
 800c444:	09db      	lsrs	r3, r3, #7
 800c446:	b2db      	uxtb	r3, r3
 800c448:	b25b      	sxtb	r3, r3
 800c44a:	4313      	orrs	r3, r2
 800c44c:	b25b      	sxtb	r3, r3
 800c44e:	b2d9      	uxtb	r1, r3
 800c450:	183a      	adds	r2, r7, r0
 800c452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c454:	18d3      	adds	r3, r2, r3
 800c456:	1c0a      	adds	r2, r1, #0
 800c458:	701a      	strb	r2, [r3, #0]
 800c45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c45c:	3301      	adds	r3, #1
 800c45e:	637b      	str	r3, [r7, #52]	; 0x34
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c462:	2b0e      	cmp	r3, #14
 800c464:	dde3      	ble.n	800c42e <AES_CMAC_Final+0x194>
 800c466:	211c      	movs	r1, #28
 800c468:	187b      	adds	r3, r7, r1
 800c46a:	7bdb      	ldrb	r3, [r3, #15]
 800c46c:	18db      	adds	r3, r3, r3
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	187b      	adds	r3, r7, r1
 800c472:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	238a      	movs	r3, #138	; 0x8a
 800c478:	005b      	lsls	r3, r3, #1
 800c47a:	58d2      	ldr	r2, [r2, r3]
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	2302      	movs	r3, #2
 800c480:	33ff      	adds	r3, #255	; 0xff
 800c482:	188a      	adds	r2, r1, r2
 800c484:	18d3      	adds	r3, r2, r3
 800c486:	2280      	movs	r2, #128	; 0x80
 800c488:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c48a:	e00a      	b.n	800c4a2 <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	238a      	movs	r3, #138	; 0x8a
 800c490:	005b      	lsls	r3, r3, #1
 800c492:	58d2      	ldr	r2, [r2, r3]
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	2302      	movs	r3, #2
 800c498:	33ff      	adds	r3, #255	; 0xff
 800c49a:	188a      	adds	r2, r1, r2
 800c49c:	18d3      	adds	r3, r2, r3
 800c49e:	2200      	movs	r2, #0
 800c4a0:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c4a2:	683a      	ldr	r2, [r7, #0]
 800c4a4:	238a      	movs	r3, #138	; 0x8a
 800c4a6:	005b      	lsls	r3, r3, #1
 800c4a8:	58d3      	ldr	r3, [r2, r3]
 800c4aa:	1c59      	adds	r1, r3, #1
 800c4ac:	683a      	ldr	r2, [r7, #0]
 800c4ae:	238a      	movs	r3, #138	; 0x8a
 800c4b0:	005b      	lsls	r3, r3, #1
 800c4b2:	50d1      	str	r1, [r2, r3]
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	238a      	movs	r3, #138	; 0x8a
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	58d3      	ldr	r3, [r2, r3]
 800c4bc:	2b0f      	cmp	r3, #15
 800c4be:	d9e5      	bls.n	800c48c <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	633b      	str	r3, [r7, #48]	; 0x30
 800c4c4:	e018      	b.n	800c4f8 <AES_CMAC_Final+0x25e>
 800c4c6:	6839      	ldr	r1, [r7, #0]
 800c4c8:	2302      	movs	r3, #2
 800c4ca:	33ff      	adds	r3, #255	; 0xff
 800c4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ce:	188a      	adds	r2, r1, r2
 800c4d0:	18d3      	adds	r3, r2, r3
 800c4d2:	781a      	ldrb	r2, [r3, #0]
 800c4d4:	231c      	movs	r3, #28
 800c4d6:	18f9      	adds	r1, r7, r3
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	18cb      	adds	r3, r1, r3
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	4053      	eors	r3, r2
 800c4e0:	b2d8      	uxtb	r0, r3
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	2302      	movs	r3, #2
 800c4e6:	33ff      	adds	r3, #255	; 0xff
 800c4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ea:	188a      	adds	r2, r1, r2
 800c4ec:	18d3      	adds	r3, r2, r3
 800c4ee:	1c02      	adds	r2, r0, #0
 800c4f0:	701a      	strb	r2, [r3, #0]
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	633b      	str	r3, [r7, #48]	; 0x30
 800c4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fa:	2b0f      	cmp	r3, #15
 800c4fc:	dde3      	ble.n	800c4c6 <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800c4fe:	2300      	movs	r3, #0
 800c500:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c502:	e018      	b.n	800c536 <AES_CMAC_Final+0x29c>
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	21f1      	movs	r1, #241	; 0xf1
 800c508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50a:	18d3      	adds	r3, r2, r3
 800c50c:	185b      	adds	r3, r3, r1
 800c50e:	781a      	ldrb	r2, [r3, #0]
 800c510:	6838      	ldr	r0, [r7, #0]
 800c512:	2302      	movs	r3, #2
 800c514:	33ff      	adds	r3, #255	; 0xff
 800c516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c518:	1841      	adds	r1, r0, r1
 800c51a:	18cb      	adds	r3, r1, r3
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	4053      	eors	r3, r2
 800c520:	b2d8      	uxtb	r0, r3
 800c522:	683a      	ldr	r2, [r7, #0]
 800c524:	21f1      	movs	r1, #241	; 0xf1
 800c526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c528:	18d3      	adds	r3, r2, r3
 800c52a:	185b      	adds	r3, r3, r1
 800c52c:	1c02      	adds	r2, r0, #0
 800c52e:	701a      	strb	r2, [r3, #0]
 800c530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c532:	3301      	adds	r3, #1
 800c534:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	2b0f      	cmp	r3, #15
 800c53a:	dde3      	ble.n	800c504 <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	33f1      	adds	r3, #241	; 0xf1
 800c540:	0019      	movs	r1, r3
 800c542:	240c      	movs	r4, #12
 800c544:	193b      	adds	r3, r7, r4
 800c546:	2210      	movs	r2, #16
 800c548:	0018      	movs	r0, r3
 800c54a:	f00c fed3 	bl	80192f4 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c54e:	683a      	ldr	r2, [r7, #0]
 800c550:	6879      	ldr	r1, [r7, #4]
 800c552:	193b      	adds	r3, r7, r4
 800c554:	0018      	movs	r0, r3
 800c556:	f000 fdbf 	bl	800d0d8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c55a:	231c      	movs	r3, #28
 800c55c:	18fb      	adds	r3, r7, r3
 800c55e:	2210      	movs	r2, #16
 800c560:	2100      	movs	r1, #0
 800c562:	0018      	movs	r0, r3
 800c564:	f00c ff04 	bl	8019370 <memset1>
}
 800c568:	46c0      	nop			; (mov r8, r8)
 800c56a:	46bd      	mov	sp, r7
 800c56c:	b013      	add	sp, #76	; 0x4c
 800c56e:	bd90      	pop	{r4, r7, pc}

0800c570 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	781a      	ldrb	r2, [r3, #0]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	3301      	adds	r3, #1
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	7852      	ldrb	r2, [r2, #1]
 800c58a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	3302      	adds	r3, #2
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	7892      	ldrb	r2, [r2, #2]
 800c594:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	3303      	adds	r3, #3
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	78d2      	ldrb	r2, [r2, #3]
 800c59e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3304      	adds	r3, #4
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	7912      	ldrb	r2, [r2, #4]
 800c5a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	3305      	adds	r3, #5
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	7952      	ldrb	r2, [r2, #5]
 800c5b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3306      	adds	r3, #6
 800c5b8:	683a      	ldr	r2, [r7, #0]
 800c5ba:	7992      	ldrb	r2, [r2, #6]
 800c5bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	3307      	adds	r3, #7
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	79d2      	ldrb	r2, [r2, #7]
 800c5c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	3308      	adds	r3, #8
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	7a12      	ldrb	r2, [r2, #8]
 800c5d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	3309      	adds	r3, #9
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	7a52      	ldrb	r2, [r2, #9]
 800c5da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	330a      	adds	r3, #10
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	7a92      	ldrb	r2, [r2, #10]
 800c5e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	330b      	adds	r3, #11
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	7ad2      	ldrb	r2, [r2, #11]
 800c5ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	330c      	adds	r3, #12
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	7b12      	ldrb	r2, [r2, #12]
 800c5f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	330d      	adds	r3, #13
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	7b52      	ldrb	r2, [r2, #13]
 800c602:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	330e      	adds	r3, #14
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	7b92      	ldrb	r2, [r2, #14]
 800c60c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	330f      	adds	r3, #15
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	7bd2      	ldrb	r2, [r2, #15]
 800c616:	701a      	strb	r2, [r3, #0]
#endif
}
 800c618:	46c0      	nop			; (mov r8, r8)
 800c61a:	46bd      	mov	sp, r7
 800c61c:	b002      	add	sp, #8
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	1dfb      	adds	r3, r7, #7
 800c62c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c62e:	e007      	b.n	800c640 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	1c53      	adds	r3, r2, #1
 800c634:	60bb      	str	r3, [r7, #8]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	1c59      	adds	r1, r3, #1
 800c63a:	60f9      	str	r1, [r7, #12]
 800c63c:	7812      	ldrb	r2, [r2, #0]
 800c63e:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c640:	1dfb      	adds	r3, r7, #7
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	1dfa      	adds	r2, r7, #7
 800c646:	1e59      	subs	r1, r3, #1
 800c648:	7011      	strb	r1, [r2, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1f0      	bne.n	800c630 <copy_block_nn+0x10>
}
 800c64e:	46c0      	nop			; (mov r8, r8)
 800c650:	46c0      	nop			; (mov r8, r8)
 800c652:	46bd      	mov	sp, r7
 800c654:	b004      	add	sp, #16
 800c656:	bd80      	pop	{r7, pc}

0800c658 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	781a      	ldrb	r2, [r3, #0]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	4053      	eors	r3, r2
 800c66c:	b2da      	uxtb	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	3301      	adds	r3, #1
 800c676:	7819      	ldrb	r1, [r3, #0]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	3301      	adds	r3, #1
 800c67c:	781a      	ldrb	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	3301      	adds	r3, #1
 800c682:	404a      	eors	r2, r1
 800c684:	b2d2      	uxtb	r2, r2
 800c686:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	3302      	adds	r3, #2
 800c68c:	7819      	ldrb	r1, [r3, #0]
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	3302      	adds	r3, #2
 800c692:	781a      	ldrb	r2, [r3, #0]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3302      	adds	r3, #2
 800c698:	404a      	eors	r2, r1
 800c69a:	b2d2      	uxtb	r2, r2
 800c69c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	3303      	adds	r3, #3
 800c6a2:	7819      	ldrb	r1, [r3, #0]
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	3303      	adds	r3, #3
 800c6a8:	781a      	ldrb	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	3303      	adds	r3, #3
 800c6ae:	404a      	eors	r2, r1
 800c6b0:	b2d2      	uxtb	r2, r2
 800c6b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	7819      	ldrb	r1, [r3, #0]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	781a      	ldrb	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	404a      	eors	r2, r1
 800c6c6:	b2d2      	uxtb	r2, r2
 800c6c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	3305      	adds	r3, #5
 800c6ce:	7819      	ldrb	r1, [r3, #0]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	3305      	adds	r3, #5
 800c6d4:	781a      	ldrb	r2, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3305      	adds	r3, #5
 800c6da:	404a      	eors	r2, r1
 800c6dc:	b2d2      	uxtb	r2, r2
 800c6de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3306      	adds	r3, #6
 800c6e4:	7819      	ldrb	r1, [r3, #0]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	3306      	adds	r3, #6
 800c6ea:	781a      	ldrb	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	3306      	adds	r3, #6
 800c6f0:	404a      	eors	r2, r1
 800c6f2:	b2d2      	uxtb	r2, r2
 800c6f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	3307      	adds	r3, #7
 800c6fa:	7819      	ldrb	r1, [r3, #0]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	3307      	adds	r3, #7
 800c700:	781a      	ldrb	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	3307      	adds	r3, #7
 800c706:	404a      	eors	r2, r1
 800c708:	b2d2      	uxtb	r2, r2
 800c70a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3308      	adds	r3, #8
 800c710:	7819      	ldrb	r1, [r3, #0]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	3308      	adds	r3, #8
 800c716:	781a      	ldrb	r2, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	3308      	adds	r3, #8
 800c71c:	404a      	eors	r2, r1
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3309      	adds	r3, #9
 800c726:	7819      	ldrb	r1, [r3, #0]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	3309      	adds	r3, #9
 800c72c:	781a      	ldrb	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	3309      	adds	r3, #9
 800c732:	404a      	eors	r2, r1
 800c734:	b2d2      	uxtb	r2, r2
 800c736:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	330a      	adds	r3, #10
 800c73c:	7819      	ldrb	r1, [r3, #0]
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	330a      	adds	r3, #10
 800c742:	781a      	ldrb	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	330a      	adds	r3, #10
 800c748:	404a      	eors	r2, r1
 800c74a:	b2d2      	uxtb	r2, r2
 800c74c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	330b      	adds	r3, #11
 800c752:	7819      	ldrb	r1, [r3, #0]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	330b      	adds	r3, #11
 800c758:	781a      	ldrb	r2, [r3, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	330b      	adds	r3, #11
 800c75e:	404a      	eors	r2, r1
 800c760:	b2d2      	uxtb	r2, r2
 800c762:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	330c      	adds	r3, #12
 800c768:	7819      	ldrb	r1, [r3, #0]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	330c      	adds	r3, #12
 800c76e:	781a      	ldrb	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	330c      	adds	r3, #12
 800c774:	404a      	eors	r2, r1
 800c776:	b2d2      	uxtb	r2, r2
 800c778:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	330d      	adds	r3, #13
 800c77e:	7819      	ldrb	r1, [r3, #0]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	330d      	adds	r3, #13
 800c784:	781a      	ldrb	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	330d      	adds	r3, #13
 800c78a:	404a      	eors	r2, r1
 800c78c:	b2d2      	uxtb	r2, r2
 800c78e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	330e      	adds	r3, #14
 800c794:	7819      	ldrb	r1, [r3, #0]
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	330e      	adds	r3, #14
 800c79a:	781a      	ldrb	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	330e      	adds	r3, #14
 800c7a0:	404a      	eors	r2, r1
 800c7a2:	b2d2      	uxtb	r2, r2
 800c7a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	330f      	adds	r3, #15
 800c7aa:	7819      	ldrb	r1, [r3, #0]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	330f      	adds	r3, #15
 800c7b0:	781a      	ldrb	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	330f      	adds	r3, #15
 800c7b6:	404a      	eors	r2, r1
 800c7b8:	b2d2      	uxtb	r2, r2
 800c7ba:	701a      	strb	r2, [r3, #0]
#endif
}
 800c7bc:	46c0      	nop			; (mov r8, r8)
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	b002      	add	sp, #8
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	781a      	ldrb	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	4053      	eors	r3, r2
 800c7da:	b2da      	uxtb	r2, r3
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	7819      	ldrb	r1, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	781a      	ldrb	r2, [r3, #0]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	404a      	eors	r2, r1
 800c7f2:	b2d2      	uxtb	r2, r2
 800c7f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	3302      	adds	r3, #2
 800c7fa:	7819      	ldrb	r1, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3302      	adds	r3, #2
 800c800:	781a      	ldrb	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	3302      	adds	r3, #2
 800c806:	404a      	eors	r2, r1
 800c808:	b2d2      	uxtb	r2, r2
 800c80a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	3303      	adds	r3, #3
 800c810:	7819      	ldrb	r1, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3303      	adds	r3, #3
 800c816:	781a      	ldrb	r2, [r3, #0]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	3303      	adds	r3, #3
 800c81c:	404a      	eors	r2, r1
 800c81e:	b2d2      	uxtb	r2, r2
 800c820:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	3304      	adds	r3, #4
 800c826:	7819      	ldrb	r1, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3304      	adds	r3, #4
 800c82c:	781a      	ldrb	r2, [r3, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3304      	adds	r3, #4
 800c832:	404a      	eors	r2, r1
 800c834:	b2d2      	uxtb	r2, r2
 800c836:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	3305      	adds	r3, #5
 800c83c:	7819      	ldrb	r1, [r3, #0]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	3305      	adds	r3, #5
 800c842:	781a      	ldrb	r2, [r3, #0]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3305      	adds	r3, #5
 800c848:	404a      	eors	r2, r1
 800c84a:	b2d2      	uxtb	r2, r2
 800c84c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	3306      	adds	r3, #6
 800c852:	7819      	ldrb	r1, [r3, #0]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	3306      	adds	r3, #6
 800c858:	781a      	ldrb	r2, [r3, #0]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3306      	adds	r3, #6
 800c85e:	404a      	eors	r2, r1
 800c860:	b2d2      	uxtb	r2, r2
 800c862:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	3307      	adds	r3, #7
 800c868:	7819      	ldrb	r1, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	3307      	adds	r3, #7
 800c86e:	781a      	ldrb	r2, [r3, #0]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	3307      	adds	r3, #7
 800c874:	404a      	eors	r2, r1
 800c876:	b2d2      	uxtb	r2, r2
 800c878:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	3308      	adds	r3, #8
 800c87e:	7819      	ldrb	r1, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	3308      	adds	r3, #8
 800c884:	781a      	ldrb	r2, [r3, #0]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	3308      	adds	r3, #8
 800c88a:	404a      	eors	r2, r1
 800c88c:	b2d2      	uxtb	r2, r2
 800c88e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	3309      	adds	r3, #9
 800c894:	7819      	ldrb	r1, [r3, #0]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3309      	adds	r3, #9
 800c89a:	781a      	ldrb	r2, [r3, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3309      	adds	r3, #9
 800c8a0:	404a      	eors	r2, r1
 800c8a2:	b2d2      	uxtb	r2, r2
 800c8a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	330a      	adds	r3, #10
 800c8aa:	7819      	ldrb	r1, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	330a      	adds	r3, #10
 800c8b0:	781a      	ldrb	r2, [r3, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	330a      	adds	r3, #10
 800c8b6:	404a      	eors	r2, r1
 800c8b8:	b2d2      	uxtb	r2, r2
 800c8ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	330b      	adds	r3, #11
 800c8c0:	7819      	ldrb	r1, [r3, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	330b      	adds	r3, #11
 800c8c6:	781a      	ldrb	r2, [r3, #0]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	330b      	adds	r3, #11
 800c8cc:	404a      	eors	r2, r1
 800c8ce:	b2d2      	uxtb	r2, r2
 800c8d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	330c      	adds	r3, #12
 800c8d6:	7819      	ldrb	r1, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	330c      	adds	r3, #12
 800c8dc:	781a      	ldrb	r2, [r3, #0]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	330c      	adds	r3, #12
 800c8e2:	404a      	eors	r2, r1
 800c8e4:	b2d2      	uxtb	r2, r2
 800c8e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	330d      	adds	r3, #13
 800c8ec:	7819      	ldrb	r1, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	330d      	adds	r3, #13
 800c8f2:	781a      	ldrb	r2, [r3, #0]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	330d      	adds	r3, #13
 800c8f8:	404a      	eors	r2, r1
 800c8fa:	b2d2      	uxtb	r2, r2
 800c8fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	330e      	adds	r3, #14
 800c902:	7819      	ldrb	r1, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	330e      	adds	r3, #14
 800c908:	781a      	ldrb	r2, [r3, #0]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	330e      	adds	r3, #14
 800c90e:	404a      	eors	r2, r1
 800c910:	b2d2      	uxtb	r2, r2
 800c912:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	330f      	adds	r3, #15
 800c918:	7819      	ldrb	r1, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	330f      	adds	r3, #15
 800c91e:	781a      	ldrb	r2, [r3, #0]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	330f      	adds	r3, #15
 800c924:	404a      	eors	r2, r1
 800c926:	b2d2      	uxtb	r2, r2
 800c928:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c92a:	46c0      	nop			; (mov r8, r8)
 800c92c:	46bd      	mov	sp, r7
 800c92e:	b004      	add	sp, #16
 800c930:	bd80      	pop	{r7, pc}

0800c932 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b082      	sub	sp, #8
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c93c:	683a      	ldr	r2, [r7, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	0011      	movs	r1, r2
 800c942:	0018      	movs	r0, r3
 800c944:	f7ff fe88 	bl	800c658 <xor_block>
}
 800c948:	46c0      	nop			; (mov r8, r8)
 800c94a:	46bd      	mov	sp, r7
 800c94c:	b002      	add	sp, #8
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	001a      	movs	r2, r3
 800c95e:	4b4c      	ldr	r3, [pc, #304]	; (800ca90 <shift_sub_rows+0x140>)
 800c960:	5c9a      	ldrb	r2, [r3, r2]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	701a      	strb	r2, [r3, #0]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	3304      	adds	r3, #4
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	0019      	movs	r1, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	3304      	adds	r3, #4
 800c972:	4a47      	ldr	r2, [pc, #284]	; (800ca90 <shift_sub_rows+0x140>)
 800c974:	5c52      	ldrb	r2, [r2, r1]
 800c976:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	3308      	adds	r3, #8
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	0019      	movs	r1, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3308      	adds	r3, #8
 800c984:	4a42      	ldr	r2, [pc, #264]	; (800ca90 <shift_sub_rows+0x140>)
 800c986:	5c52      	ldrb	r2, [r2, r1]
 800c988:	701a      	strb	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	330c      	adds	r3, #12
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	0019      	movs	r1, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	330c      	adds	r3, #12
 800c996:	4a3e      	ldr	r2, [pc, #248]	; (800ca90 <shift_sub_rows+0x140>)
 800c998:	5c52      	ldrb	r2, [r2, r1]
 800c99a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c99c:	200f      	movs	r0, #15
 800c99e:	183b      	adds	r3, r7, r0
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	7852      	ldrb	r2, [r2, #1]
 800c9a4:	701a      	strb	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	3305      	adds	r3, #5
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	0019      	movs	r1, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	4a37      	ldr	r2, [pc, #220]	; (800ca90 <shift_sub_rows+0x140>)
 800c9b4:	5c52      	ldrb	r2, [r2, r1]
 800c9b6:	701a      	strb	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	3309      	adds	r3, #9
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	0019      	movs	r1, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	3305      	adds	r3, #5
 800c9c4:	4a32      	ldr	r2, [pc, #200]	; (800ca90 <shift_sub_rows+0x140>)
 800c9c6:	5c52      	ldrb	r2, [r2, r1]
 800c9c8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	330d      	adds	r3, #13
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	0019      	movs	r1, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	3309      	adds	r3, #9
 800c9d6:	4a2e      	ldr	r2, [pc, #184]	; (800ca90 <shift_sub_rows+0x140>)
 800c9d8:	5c52      	ldrb	r2, [r2, r1]
 800c9da:	701a      	strb	r2, [r3, #0]
 800c9dc:	183b      	adds	r3, r7, r0
 800c9de:	781a      	ldrb	r2, [r3, #0]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	330d      	adds	r3, #13
 800c9e4:	492a      	ldr	r1, [pc, #168]	; (800ca90 <shift_sub_rows+0x140>)
 800c9e6:	5c8a      	ldrb	r2, [r1, r2]
 800c9e8:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c9ea:	183b      	adds	r3, r7, r0
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	7892      	ldrb	r2, [r2, #2]
 800c9f0:	701a      	strb	r2, [r3, #0]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	330a      	adds	r3, #10
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	0019      	movs	r1, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	3302      	adds	r3, #2
 800c9fe:	4a24      	ldr	r2, [pc, #144]	; (800ca90 <shift_sub_rows+0x140>)
 800ca00:	5c52      	ldrb	r2, [r2, r1]
 800ca02:	701a      	strb	r2, [r3, #0]
 800ca04:	183b      	adds	r3, r7, r0
 800ca06:	781a      	ldrb	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	330a      	adds	r3, #10
 800ca0c:	4920      	ldr	r1, [pc, #128]	; (800ca90 <shift_sub_rows+0x140>)
 800ca0e:	5c8a      	ldrb	r2, [r1, r2]
 800ca10:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ca12:	183b      	adds	r3, r7, r0
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	7992      	ldrb	r2, [r2, #6]
 800ca18:	701a      	strb	r2, [r3, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	330e      	adds	r3, #14
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	0019      	movs	r1, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3306      	adds	r3, #6
 800ca26:	4a1a      	ldr	r2, [pc, #104]	; (800ca90 <shift_sub_rows+0x140>)
 800ca28:	5c52      	ldrb	r2, [r2, r1]
 800ca2a:	701a      	strb	r2, [r3, #0]
 800ca2c:	183b      	adds	r3, r7, r0
 800ca2e:	781a      	ldrb	r2, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	330e      	adds	r3, #14
 800ca34:	4916      	ldr	r1, [pc, #88]	; (800ca90 <shift_sub_rows+0x140>)
 800ca36:	5c8a      	ldrb	r2, [r1, r2]
 800ca38:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ca3a:	183b      	adds	r3, r7, r0
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	7bd2      	ldrb	r2, [r2, #15]
 800ca40:	701a      	strb	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	330b      	adds	r3, #11
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	0019      	movs	r1, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	330f      	adds	r3, #15
 800ca4e:	4a10      	ldr	r2, [pc, #64]	; (800ca90 <shift_sub_rows+0x140>)
 800ca50:	5c52      	ldrb	r2, [r2, r1]
 800ca52:	701a      	strb	r2, [r3, #0]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3307      	adds	r3, #7
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	0019      	movs	r1, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	330b      	adds	r3, #11
 800ca60:	4a0b      	ldr	r2, [pc, #44]	; (800ca90 <shift_sub_rows+0x140>)
 800ca62:	5c52      	ldrb	r2, [r2, r1]
 800ca64:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	3303      	adds	r3, #3
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	0019      	movs	r1, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3307      	adds	r3, #7
 800ca72:	4a07      	ldr	r2, [pc, #28]	; (800ca90 <shift_sub_rows+0x140>)
 800ca74:	5c52      	ldrb	r2, [r2, r1]
 800ca76:	701a      	strb	r2, [r3, #0]
 800ca78:	183b      	adds	r3, r7, r0
 800ca7a:	781a      	ldrb	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3303      	adds	r3, #3
 800ca80:	4903      	ldr	r1, [pc, #12]	; (800ca90 <shift_sub_rows+0x140>)
 800ca82:	5c8a      	ldrb	r2, [r1, r2]
 800ca84:	701a      	strb	r2, [r3, #0]
}
 800ca86:	46c0      	nop			; (mov r8, r8)
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	b004      	add	sp, #16
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	46c0      	nop			; (mov r8, r8)
 800ca90:	0801e580 	.word	0x0801e580

0800ca94 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ca94:	b590      	push	{r4, r7, lr}
 800ca96:	b087      	sub	sp, #28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	2408      	movs	r4, #8
 800caa0:	193b      	adds	r3, r7, r4
 800caa2:	0011      	movs	r1, r2
 800caa4:	0018      	movs	r0, r3
 800caa6:	f7ff fd63 	bl	800c570 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800caaa:	0020      	movs	r0, r4
 800caac:	183b      	adds	r3, r7, r0
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	001a      	movs	r2, r3
 800cab2:	4be8      	ldr	r3, [pc, #928]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cab4:	5c9a      	ldrb	r2, [r3, r2]
 800cab6:	183b      	adds	r3, r7, r0
 800cab8:	795b      	ldrb	r3, [r3, #5]
 800caba:	0019      	movs	r1, r3
 800cabc:	4be6      	ldr	r3, [pc, #920]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cabe:	5c5b      	ldrb	r3, [r3, r1]
 800cac0:	4053      	eors	r3, r2
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	183b      	adds	r3, r7, r0
 800cac6:	7a9b      	ldrb	r3, [r3, #10]
 800cac8:	0019      	movs	r1, r3
 800caca:	4be4      	ldr	r3, [pc, #912]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cacc:	5c5b      	ldrb	r3, [r3, r1]
 800cace:	4053      	eors	r3, r2
 800cad0:	b2da      	uxtb	r2, r3
 800cad2:	183b      	adds	r3, r7, r0
 800cad4:	7bdb      	ldrb	r3, [r3, #15]
 800cad6:	0019      	movs	r1, r3
 800cad8:	4be0      	ldr	r3, [pc, #896]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cada:	5c5b      	ldrb	r3, [r3, r1]
 800cadc:	4053      	eors	r3, r2
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cae4:	183b      	adds	r3, r7, r0
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	001a      	movs	r2, r3
 800caea:	4bdc      	ldr	r3, [pc, #880]	; (800ce5c <mix_sub_columns+0x3c8>)
 800caec:	5c9a      	ldrb	r2, [r3, r2]
 800caee:	183b      	adds	r3, r7, r0
 800caf0:	795b      	ldrb	r3, [r3, #5]
 800caf2:	0019      	movs	r1, r3
 800caf4:	4bd7      	ldr	r3, [pc, #860]	; (800ce54 <mix_sub_columns+0x3c0>)
 800caf6:	5c5b      	ldrb	r3, [r3, r1]
 800caf8:	4053      	eors	r3, r2
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	183b      	adds	r3, r7, r0
 800cafe:	7a9b      	ldrb	r3, [r3, #10]
 800cb00:	0019      	movs	r1, r3
 800cb02:	4bd5      	ldr	r3, [pc, #852]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cb04:	5c5b      	ldrb	r3, [r3, r1]
 800cb06:	4053      	eors	r3, r2
 800cb08:	b2d9      	uxtb	r1, r3
 800cb0a:	183b      	adds	r3, r7, r0
 800cb0c:	7bdb      	ldrb	r3, [r3, #15]
 800cb0e:	001a      	movs	r2, r3
 800cb10:	4bd2      	ldr	r3, [pc, #840]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cb12:	5c9a      	ldrb	r2, [r3, r2]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3301      	adds	r3, #1
 800cb18:	404a      	eors	r2, r1
 800cb1a:	b2d2      	uxtb	r2, r2
 800cb1c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800cb1e:	183b      	adds	r3, r7, r0
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	001a      	movs	r2, r3
 800cb24:	4bcd      	ldr	r3, [pc, #820]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cb26:	5c9a      	ldrb	r2, [r3, r2]
 800cb28:	183b      	adds	r3, r7, r0
 800cb2a:	795b      	ldrb	r3, [r3, #5]
 800cb2c:	0019      	movs	r1, r3
 800cb2e:	4bcb      	ldr	r3, [pc, #812]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cb30:	5c5b      	ldrb	r3, [r3, r1]
 800cb32:	4053      	eors	r3, r2
 800cb34:	b2da      	uxtb	r2, r3
 800cb36:	183b      	adds	r3, r7, r0
 800cb38:	7a9b      	ldrb	r3, [r3, #10]
 800cb3a:	0019      	movs	r1, r3
 800cb3c:	4bc5      	ldr	r3, [pc, #788]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cb3e:	5c5b      	ldrb	r3, [r3, r1]
 800cb40:	4053      	eors	r3, r2
 800cb42:	b2d9      	uxtb	r1, r3
 800cb44:	183b      	adds	r3, r7, r0
 800cb46:	7bdb      	ldrb	r3, [r3, #15]
 800cb48:	001a      	movs	r2, r3
 800cb4a:	4bc3      	ldr	r3, [pc, #780]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cb4c:	5c9a      	ldrb	r2, [r3, r2]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	3302      	adds	r3, #2
 800cb52:	404a      	eors	r2, r1
 800cb54:	b2d2      	uxtb	r2, r2
 800cb56:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cb58:	183b      	adds	r3, r7, r0
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	001a      	movs	r2, r3
 800cb5e:	4bbe      	ldr	r3, [pc, #760]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cb60:	5c9a      	ldrb	r2, [r3, r2]
 800cb62:	183b      	adds	r3, r7, r0
 800cb64:	795b      	ldrb	r3, [r3, #5]
 800cb66:	0019      	movs	r1, r3
 800cb68:	4bbc      	ldr	r3, [pc, #752]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cb6a:	5c5b      	ldrb	r3, [r3, r1]
 800cb6c:	4053      	eors	r3, r2
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	183b      	adds	r3, r7, r0
 800cb72:	7a9b      	ldrb	r3, [r3, #10]
 800cb74:	0019      	movs	r1, r3
 800cb76:	4bb9      	ldr	r3, [pc, #740]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cb78:	5c5b      	ldrb	r3, [r3, r1]
 800cb7a:	4053      	eors	r3, r2
 800cb7c:	b2d9      	uxtb	r1, r3
 800cb7e:	183b      	adds	r3, r7, r0
 800cb80:	7bdb      	ldrb	r3, [r3, #15]
 800cb82:	001a      	movs	r2, r3
 800cb84:	4bb3      	ldr	r3, [pc, #716]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cb86:	5c9a      	ldrb	r2, [r3, r2]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	3303      	adds	r3, #3
 800cb8c:	404a      	eors	r2, r1
 800cb8e:	b2d2      	uxtb	r2, r2
 800cb90:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cb92:	183b      	adds	r3, r7, r0
 800cb94:	791b      	ldrb	r3, [r3, #4]
 800cb96:	001a      	movs	r2, r3
 800cb98:	4bae      	ldr	r3, [pc, #696]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cb9a:	5c9a      	ldrb	r2, [r3, r2]
 800cb9c:	183b      	adds	r3, r7, r0
 800cb9e:	7a5b      	ldrb	r3, [r3, #9]
 800cba0:	0019      	movs	r1, r3
 800cba2:	4bad      	ldr	r3, [pc, #692]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cba4:	5c5b      	ldrb	r3, [r3, r1]
 800cba6:	4053      	eors	r3, r2
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	183b      	adds	r3, r7, r0
 800cbac:	7b9b      	ldrb	r3, [r3, #14]
 800cbae:	0019      	movs	r1, r3
 800cbb0:	4baa      	ldr	r3, [pc, #680]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cbb2:	5c5b      	ldrb	r3, [r3, r1]
 800cbb4:	4053      	eors	r3, r2
 800cbb6:	b2d9      	uxtb	r1, r3
 800cbb8:	183b      	adds	r3, r7, r0
 800cbba:	78db      	ldrb	r3, [r3, #3]
 800cbbc:	001a      	movs	r2, r3
 800cbbe:	4ba7      	ldr	r3, [pc, #668]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cbc0:	5c9a      	ldrb	r2, [r3, r2]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	404a      	eors	r2, r1
 800cbc8:	b2d2      	uxtb	r2, r2
 800cbca:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cbcc:	183b      	adds	r3, r7, r0
 800cbce:	791b      	ldrb	r3, [r3, #4]
 800cbd0:	001a      	movs	r2, r3
 800cbd2:	4ba2      	ldr	r3, [pc, #648]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cbd4:	5c9a      	ldrb	r2, [r3, r2]
 800cbd6:	183b      	adds	r3, r7, r0
 800cbd8:	7a5b      	ldrb	r3, [r3, #9]
 800cbda:	0019      	movs	r1, r3
 800cbdc:	4b9d      	ldr	r3, [pc, #628]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cbde:	5c5b      	ldrb	r3, [r3, r1]
 800cbe0:	4053      	eors	r3, r2
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	183b      	adds	r3, r7, r0
 800cbe6:	7b9b      	ldrb	r3, [r3, #14]
 800cbe8:	0019      	movs	r1, r3
 800cbea:	4b9b      	ldr	r3, [pc, #620]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cbec:	5c5b      	ldrb	r3, [r3, r1]
 800cbee:	4053      	eors	r3, r2
 800cbf0:	b2d9      	uxtb	r1, r3
 800cbf2:	183b      	adds	r3, r7, r0
 800cbf4:	78db      	ldrb	r3, [r3, #3]
 800cbf6:	001a      	movs	r2, r3
 800cbf8:	4b98      	ldr	r3, [pc, #608]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cbfa:	5c9a      	ldrb	r2, [r3, r2]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	3305      	adds	r3, #5
 800cc00:	404a      	eors	r2, r1
 800cc02:	b2d2      	uxtb	r2, r2
 800cc04:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800cc06:	183b      	adds	r3, r7, r0
 800cc08:	791b      	ldrb	r3, [r3, #4]
 800cc0a:	001a      	movs	r2, r3
 800cc0c:	4b93      	ldr	r3, [pc, #588]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cc0e:	5c9a      	ldrb	r2, [r3, r2]
 800cc10:	183b      	adds	r3, r7, r0
 800cc12:	7a5b      	ldrb	r3, [r3, #9]
 800cc14:	0019      	movs	r1, r3
 800cc16:	4b91      	ldr	r3, [pc, #580]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cc18:	5c5b      	ldrb	r3, [r3, r1]
 800cc1a:	4053      	eors	r3, r2
 800cc1c:	b2da      	uxtb	r2, r3
 800cc1e:	183b      	adds	r3, r7, r0
 800cc20:	7b9b      	ldrb	r3, [r3, #14]
 800cc22:	0019      	movs	r1, r3
 800cc24:	4b8b      	ldr	r3, [pc, #556]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cc26:	5c5b      	ldrb	r3, [r3, r1]
 800cc28:	4053      	eors	r3, r2
 800cc2a:	b2d9      	uxtb	r1, r3
 800cc2c:	183b      	adds	r3, r7, r0
 800cc2e:	78db      	ldrb	r3, [r3, #3]
 800cc30:	001a      	movs	r2, r3
 800cc32:	4b89      	ldr	r3, [pc, #548]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cc34:	5c9a      	ldrb	r2, [r3, r2]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	3306      	adds	r3, #6
 800cc3a:	404a      	eors	r2, r1
 800cc3c:	b2d2      	uxtb	r2, r2
 800cc3e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800cc40:	183b      	adds	r3, r7, r0
 800cc42:	791b      	ldrb	r3, [r3, #4]
 800cc44:	001a      	movs	r2, r3
 800cc46:	4b84      	ldr	r3, [pc, #528]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cc48:	5c9a      	ldrb	r2, [r3, r2]
 800cc4a:	183b      	adds	r3, r7, r0
 800cc4c:	7a5b      	ldrb	r3, [r3, #9]
 800cc4e:	0019      	movs	r1, r3
 800cc50:	4b82      	ldr	r3, [pc, #520]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cc52:	5c5b      	ldrb	r3, [r3, r1]
 800cc54:	4053      	eors	r3, r2
 800cc56:	b2da      	uxtb	r2, r3
 800cc58:	183b      	adds	r3, r7, r0
 800cc5a:	7b9b      	ldrb	r3, [r3, #14]
 800cc5c:	0019      	movs	r1, r3
 800cc5e:	4b7f      	ldr	r3, [pc, #508]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cc60:	5c5b      	ldrb	r3, [r3, r1]
 800cc62:	4053      	eors	r3, r2
 800cc64:	b2d9      	uxtb	r1, r3
 800cc66:	183b      	adds	r3, r7, r0
 800cc68:	78db      	ldrb	r3, [r3, #3]
 800cc6a:	001a      	movs	r2, r3
 800cc6c:	4b79      	ldr	r3, [pc, #484]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cc6e:	5c9a      	ldrb	r2, [r3, r2]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	3307      	adds	r3, #7
 800cc74:	404a      	eors	r2, r1
 800cc76:	b2d2      	uxtb	r2, r2
 800cc78:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800cc7a:	183b      	adds	r3, r7, r0
 800cc7c:	7a1b      	ldrb	r3, [r3, #8]
 800cc7e:	001a      	movs	r2, r3
 800cc80:	4b74      	ldr	r3, [pc, #464]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cc82:	5c9a      	ldrb	r2, [r3, r2]
 800cc84:	183b      	adds	r3, r7, r0
 800cc86:	7b5b      	ldrb	r3, [r3, #13]
 800cc88:	0019      	movs	r1, r3
 800cc8a:	4b73      	ldr	r3, [pc, #460]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cc8c:	5c5b      	ldrb	r3, [r3, r1]
 800cc8e:	4053      	eors	r3, r2
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	183b      	adds	r3, r7, r0
 800cc94:	789b      	ldrb	r3, [r3, #2]
 800cc96:	0019      	movs	r1, r3
 800cc98:	4b70      	ldr	r3, [pc, #448]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cc9a:	5c5b      	ldrb	r3, [r3, r1]
 800cc9c:	4053      	eors	r3, r2
 800cc9e:	b2d9      	uxtb	r1, r3
 800cca0:	183b      	adds	r3, r7, r0
 800cca2:	79db      	ldrb	r3, [r3, #7]
 800cca4:	001a      	movs	r2, r3
 800cca6:	4b6d      	ldr	r3, [pc, #436]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cca8:	5c9a      	ldrb	r2, [r3, r2]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	3308      	adds	r3, #8
 800ccae:	404a      	eors	r2, r1
 800ccb0:	b2d2      	uxtb	r2, r2
 800ccb2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ccb4:	183b      	adds	r3, r7, r0
 800ccb6:	7a1b      	ldrb	r3, [r3, #8]
 800ccb8:	001a      	movs	r2, r3
 800ccba:	4b68      	ldr	r3, [pc, #416]	; (800ce5c <mix_sub_columns+0x3c8>)
 800ccbc:	5c9a      	ldrb	r2, [r3, r2]
 800ccbe:	183b      	adds	r3, r7, r0
 800ccc0:	7b5b      	ldrb	r3, [r3, #13]
 800ccc2:	0019      	movs	r1, r3
 800ccc4:	4b63      	ldr	r3, [pc, #396]	; (800ce54 <mix_sub_columns+0x3c0>)
 800ccc6:	5c5b      	ldrb	r3, [r3, r1]
 800ccc8:	4053      	eors	r3, r2
 800ccca:	b2da      	uxtb	r2, r3
 800cccc:	183b      	adds	r3, r7, r0
 800ccce:	789b      	ldrb	r3, [r3, #2]
 800ccd0:	0019      	movs	r1, r3
 800ccd2:	4b61      	ldr	r3, [pc, #388]	; (800ce58 <mix_sub_columns+0x3c4>)
 800ccd4:	5c5b      	ldrb	r3, [r3, r1]
 800ccd6:	4053      	eors	r3, r2
 800ccd8:	b2d9      	uxtb	r1, r3
 800ccda:	183b      	adds	r3, r7, r0
 800ccdc:	79db      	ldrb	r3, [r3, #7]
 800ccde:	001a      	movs	r2, r3
 800cce0:	4b5e      	ldr	r3, [pc, #376]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cce2:	5c9a      	ldrb	r2, [r3, r2]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3309      	adds	r3, #9
 800cce8:	404a      	eors	r2, r1
 800ccea:	b2d2      	uxtb	r2, r2
 800ccec:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ccee:	183b      	adds	r3, r7, r0
 800ccf0:	7a1b      	ldrb	r3, [r3, #8]
 800ccf2:	001a      	movs	r2, r3
 800ccf4:	4b59      	ldr	r3, [pc, #356]	; (800ce5c <mix_sub_columns+0x3c8>)
 800ccf6:	5c9a      	ldrb	r2, [r3, r2]
 800ccf8:	183b      	adds	r3, r7, r0
 800ccfa:	7b5b      	ldrb	r3, [r3, #13]
 800ccfc:	0019      	movs	r1, r3
 800ccfe:	4b57      	ldr	r3, [pc, #348]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cd00:	5c5b      	ldrb	r3, [r3, r1]
 800cd02:	4053      	eors	r3, r2
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	183b      	adds	r3, r7, r0
 800cd08:	789b      	ldrb	r3, [r3, #2]
 800cd0a:	0019      	movs	r1, r3
 800cd0c:	4b51      	ldr	r3, [pc, #324]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cd0e:	5c5b      	ldrb	r3, [r3, r1]
 800cd10:	4053      	eors	r3, r2
 800cd12:	b2d9      	uxtb	r1, r3
 800cd14:	183b      	adds	r3, r7, r0
 800cd16:	79db      	ldrb	r3, [r3, #7]
 800cd18:	001a      	movs	r2, r3
 800cd1a:	4b4f      	ldr	r3, [pc, #316]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cd1c:	5c9a      	ldrb	r2, [r3, r2]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	330a      	adds	r3, #10
 800cd22:	404a      	eors	r2, r1
 800cd24:	b2d2      	uxtb	r2, r2
 800cd26:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800cd28:	183b      	adds	r3, r7, r0
 800cd2a:	7a1b      	ldrb	r3, [r3, #8]
 800cd2c:	001a      	movs	r2, r3
 800cd2e:	4b4a      	ldr	r3, [pc, #296]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cd30:	5c9a      	ldrb	r2, [r3, r2]
 800cd32:	183b      	adds	r3, r7, r0
 800cd34:	7b5b      	ldrb	r3, [r3, #13]
 800cd36:	0019      	movs	r1, r3
 800cd38:	4b48      	ldr	r3, [pc, #288]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cd3a:	5c5b      	ldrb	r3, [r3, r1]
 800cd3c:	4053      	eors	r3, r2
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	183b      	adds	r3, r7, r0
 800cd42:	789b      	ldrb	r3, [r3, #2]
 800cd44:	0019      	movs	r1, r3
 800cd46:	4b45      	ldr	r3, [pc, #276]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cd48:	5c5b      	ldrb	r3, [r3, r1]
 800cd4a:	4053      	eors	r3, r2
 800cd4c:	b2d9      	uxtb	r1, r3
 800cd4e:	183b      	adds	r3, r7, r0
 800cd50:	79db      	ldrb	r3, [r3, #7]
 800cd52:	001a      	movs	r2, r3
 800cd54:	4b3f      	ldr	r3, [pc, #252]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cd56:	5c9a      	ldrb	r2, [r3, r2]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	330b      	adds	r3, #11
 800cd5c:	404a      	eors	r2, r1
 800cd5e:	b2d2      	uxtb	r2, r2
 800cd60:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800cd62:	183b      	adds	r3, r7, r0
 800cd64:	7b1b      	ldrb	r3, [r3, #12]
 800cd66:	001a      	movs	r2, r3
 800cd68:	4b3a      	ldr	r3, [pc, #232]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cd6a:	5c9a      	ldrb	r2, [r3, r2]
 800cd6c:	183b      	adds	r3, r7, r0
 800cd6e:	785b      	ldrb	r3, [r3, #1]
 800cd70:	0019      	movs	r1, r3
 800cd72:	4b39      	ldr	r3, [pc, #228]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cd74:	5c5b      	ldrb	r3, [r3, r1]
 800cd76:	4053      	eors	r3, r2
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	183b      	adds	r3, r7, r0
 800cd7c:	799b      	ldrb	r3, [r3, #6]
 800cd7e:	0019      	movs	r1, r3
 800cd80:	4b36      	ldr	r3, [pc, #216]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cd82:	5c5b      	ldrb	r3, [r3, r1]
 800cd84:	4053      	eors	r3, r2
 800cd86:	b2d9      	uxtb	r1, r3
 800cd88:	183b      	adds	r3, r7, r0
 800cd8a:	7adb      	ldrb	r3, [r3, #11]
 800cd8c:	001a      	movs	r2, r3
 800cd8e:	4b33      	ldr	r3, [pc, #204]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cd90:	5c9a      	ldrb	r2, [r3, r2]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	330c      	adds	r3, #12
 800cd96:	404a      	eors	r2, r1
 800cd98:	b2d2      	uxtb	r2, r2
 800cd9a:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800cd9c:	183b      	adds	r3, r7, r0
 800cd9e:	7b1b      	ldrb	r3, [r3, #12]
 800cda0:	001a      	movs	r2, r3
 800cda2:	4b2e      	ldr	r3, [pc, #184]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cda4:	5c9a      	ldrb	r2, [r3, r2]
 800cda6:	183b      	adds	r3, r7, r0
 800cda8:	785b      	ldrb	r3, [r3, #1]
 800cdaa:	0019      	movs	r1, r3
 800cdac:	4b29      	ldr	r3, [pc, #164]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cdae:	5c5b      	ldrb	r3, [r3, r1]
 800cdb0:	4053      	eors	r3, r2
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	183b      	adds	r3, r7, r0
 800cdb6:	799b      	ldrb	r3, [r3, #6]
 800cdb8:	0019      	movs	r1, r3
 800cdba:	4b27      	ldr	r3, [pc, #156]	; (800ce58 <mix_sub_columns+0x3c4>)
 800cdbc:	5c5b      	ldrb	r3, [r3, r1]
 800cdbe:	4053      	eors	r3, r2
 800cdc0:	b2d9      	uxtb	r1, r3
 800cdc2:	183b      	adds	r3, r7, r0
 800cdc4:	7adb      	ldrb	r3, [r3, #11]
 800cdc6:	001a      	movs	r2, r3
 800cdc8:	4b24      	ldr	r3, [pc, #144]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cdca:	5c9a      	ldrb	r2, [r3, r2]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	330d      	adds	r3, #13
 800cdd0:	404a      	eors	r2, r1
 800cdd2:	b2d2      	uxtb	r2, r2
 800cdd4:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800cdd6:	183b      	adds	r3, r7, r0
 800cdd8:	7b1b      	ldrb	r3, [r3, #12]
 800cdda:	001a      	movs	r2, r3
 800cddc:	4b1f      	ldr	r3, [pc, #124]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cdde:	5c9a      	ldrb	r2, [r3, r2]
 800cde0:	183b      	adds	r3, r7, r0
 800cde2:	785b      	ldrb	r3, [r3, #1]
 800cde4:	0019      	movs	r1, r3
 800cde6:	4b1d      	ldr	r3, [pc, #116]	; (800ce5c <mix_sub_columns+0x3c8>)
 800cde8:	5c5b      	ldrb	r3, [r3, r1]
 800cdea:	4053      	eors	r3, r2
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	183b      	adds	r3, r7, r0
 800cdf0:	799b      	ldrb	r3, [r3, #6]
 800cdf2:	0019      	movs	r1, r3
 800cdf4:	4b17      	ldr	r3, [pc, #92]	; (800ce54 <mix_sub_columns+0x3c0>)
 800cdf6:	5c5b      	ldrb	r3, [r3, r1]
 800cdf8:	4053      	eors	r3, r2
 800cdfa:	b2d9      	uxtb	r1, r3
 800cdfc:	183b      	adds	r3, r7, r0
 800cdfe:	7adb      	ldrb	r3, [r3, #11]
 800ce00:	001a      	movs	r2, r3
 800ce02:	4b15      	ldr	r3, [pc, #84]	; (800ce58 <mix_sub_columns+0x3c4>)
 800ce04:	5c9a      	ldrb	r2, [r3, r2]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	330e      	adds	r3, #14
 800ce0a:	404a      	eors	r2, r1
 800ce0c:	b2d2      	uxtb	r2, r2
 800ce0e:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ce10:	183b      	adds	r3, r7, r0
 800ce12:	7b1b      	ldrb	r3, [r3, #12]
 800ce14:	001a      	movs	r2, r3
 800ce16:	4b10      	ldr	r3, [pc, #64]	; (800ce58 <mix_sub_columns+0x3c4>)
 800ce18:	5c9a      	ldrb	r2, [r3, r2]
 800ce1a:	183b      	adds	r3, r7, r0
 800ce1c:	785b      	ldrb	r3, [r3, #1]
 800ce1e:	0019      	movs	r1, r3
 800ce20:	4b0e      	ldr	r3, [pc, #56]	; (800ce5c <mix_sub_columns+0x3c8>)
 800ce22:	5c5b      	ldrb	r3, [r3, r1]
 800ce24:	4053      	eors	r3, r2
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	183b      	adds	r3, r7, r0
 800ce2a:	799b      	ldrb	r3, [r3, #6]
 800ce2c:	0019      	movs	r1, r3
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <mix_sub_columns+0x3c8>)
 800ce30:	5c5b      	ldrb	r3, [r3, r1]
 800ce32:	4053      	eors	r3, r2
 800ce34:	b2d9      	uxtb	r1, r3
 800ce36:	183b      	adds	r3, r7, r0
 800ce38:	7adb      	ldrb	r3, [r3, #11]
 800ce3a:	001a      	movs	r2, r3
 800ce3c:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <mix_sub_columns+0x3c0>)
 800ce3e:	5c9a      	ldrb	r2, [r3, r2]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	330f      	adds	r3, #15
 800ce44:	404a      	eors	r2, r1
 800ce46:	b2d2      	uxtb	r2, r2
 800ce48:	701a      	strb	r2, [r3, #0]
  }
 800ce4a:	46c0      	nop			; (mov r8, r8)
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	b007      	add	sp, #28
 800ce50:	bd90      	pop	{r4, r7, pc}
 800ce52:	46c0      	nop			; (mov r8, r8)
 800ce54:	0801e680 	.word	0x0801e680
 800ce58:	0801e780 	.word	0x0801e780
 800ce5c:	0801e580 	.word	0x0801e580

0800ce60 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ce60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce62:	b087      	sub	sp, #28
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	607a      	str	r2, [r7, #4]
 800ce6a:	200b      	movs	r0, #11
 800ce6c:	183b      	adds	r3, r7, r0
 800ce6e:	1c0a      	adds	r2, r1, #0
 800ce70:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ce72:	183b      	adds	r3, r7, r0
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	3b10      	subs	r3, #16
 800ce78:	2210      	movs	r2, #16
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	4192      	sbcs	r2, r2
 800ce7e:	4252      	negs	r2, r2
 800ce80:	b2d2      	uxtb	r2, r2
 800ce82:	2a00      	cmp	r2, #0
 800ce84:	d109      	bne.n	800ce9a <lorawan_aes_set_key+0x3a>
 800ce86:	2201      	movs	r2, #1
 800ce88:	409a      	lsls	r2, r3
 800ce8a:	0013      	movs	r3, r2
 800ce8c:	4a90      	ldr	r2, [pc, #576]	; (800d0d0 <lorawan_aes_set_key+0x270>)
 800ce8e:	4013      	ands	r3, r2
 800ce90:	1e5a      	subs	r2, r3, #1
 800ce92:	4193      	sbcs	r3, r2
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d105      	bne.n	800cea6 <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	22f0      	movs	r2, #240	; 0xf0
 800ce9e:	2100      	movs	r1, #0
 800cea0:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800cea2:	23ff      	movs	r3, #255	; 0xff
 800cea4:	e10f      	b.n	800d0c6 <lorawan_aes_set_key+0x266>
        break;
 800cea6:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	240b      	movs	r4, #11
 800ceac:	193b      	adds	r3, r7, r4
 800ceae:	781a      	ldrb	r2, [r3, #0]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	0019      	movs	r1, r3
 800ceb4:	f7ff fbb4 	bl	800c620 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800ceb8:	0020      	movs	r0, r4
 800ceba:	183b      	adds	r3, r7, r0
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	331c      	adds	r3, #28
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	2111      	movs	r1, #17
 800cec4:	187b      	adds	r3, r7, r1
 800cec6:	0092      	lsls	r2, r2, #2
 800cec8:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800ceca:	187b      	adds	r3, r7, r1
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	091b      	lsrs	r3, r3, #4
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	3b01      	subs	r3, #1
 800ced4:	b2d9      	uxtb	r1, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	22f0      	movs	r2, #240	; 0xf0
 800ceda:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800cedc:	2317      	movs	r3, #23
 800cede:	18fb      	adds	r3, r7, r3
 800cee0:	183a      	adds	r2, r7, r0
 800cee2:	7812      	ldrb	r2, [r2, #0]
 800cee4:	701a      	strb	r2, [r3, #0]
 800cee6:	2316      	movs	r3, #22
 800cee8:	18fb      	adds	r3, r7, r3
 800ceea:	2201      	movs	r2, #1
 800ceec:	701a      	strb	r2, [r3, #0]
 800ceee:	e0e0      	b.n	800d0b2 <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800cef0:	2017      	movs	r0, #23
 800cef2:	183b      	adds	r3, r7, r0
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	1f1a      	subs	r2, r3, #4
 800cef8:	2415      	movs	r4, #21
 800cefa:	193b      	adds	r3, r7, r4
 800cefc:	6879      	ldr	r1, [r7, #4]
 800cefe:	5c8a      	ldrb	r2, [r1, r2]
 800cf00:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800cf02:	183b      	adds	r3, r7, r0
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	1eda      	subs	r2, r3, #3
 800cf08:	2514      	movs	r5, #20
 800cf0a:	197b      	adds	r3, r7, r5
 800cf0c:	6879      	ldr	r1, [r7, #4]
 800cf0e:	5c8a      	ldrb	r2, [r1, r2]
 800cf10:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800cf12:	183b      	adds	r3, r7, r0
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	1e9a      	subs	r2, r3, #2
 800cf18:	2613      	movs	r6, #19
 800cf1a:	19bb      	adds	r3, r7, r6
 800cf1c:	6879      	ldr	r1, [r7, #4]
 800cf1e:	5c8a      	ldrb	r2, [r1, r2]
 800cf20:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800cf22:	183b      	adds	r3, r7, r0
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	1e5a      	subs	r2, r3, #1
 800cf28:	2312      	movs	r3, #18
 800cf2a:	18fb      	adds	r3, r7, r3
 800cf2c:	6879      	ldr	r1, [r7, #4]
 800cf2e:	5c8a      	ldrb	r2, [r1, r2]
 800cf30:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800cf32:	183a      	adds	r2, r7, r0
 800cf34:	210b      	movs	r1, #11
 800cf36:	187b      	adds	r3, r7, r1
 800cf38:	7812      	ldrb	r2, [r2, #0]
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	0019      	movs	r1, r3
 800cf3e:	0010      	movs	r0, r2
 800cf40:	f7f3 f970 	bl	8000224 <__aeabi_uidivmod>
 800cf44:	000b      	movs	r3, r1
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d13b      	bne.n	800cfc4 <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800cf4c:	2210      	movs	r2, #16
 800cf4e:	18bb      	adds	r3, r7, r2
 800cf50:	193a      	adds	r2, r7, r4
 800cf52:	7812      	ldrb	r2, [r2, #0]
 800cf54:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800cf56:	197b      	adds	r3, r7, r5
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	4a5e      	ldr	r2, [pc, #376]	; (800d0d4 <lorawan_aes_set_key+0x274>)
 800cf5c:	5cd1      	ldrb	r1, [r2, r3]
 800cf5e:	193b      	adds	r3, r7, r4
 800cf60:	2016      	movs	r0, #22
 800cf62:	183a      	adds	r2, r7, r0
 800cf64:	7812      	ldrb	r2, [r2, #0]
 800cf66:	404a      	eors	r2, r1
 800cf68:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800cf6a:	19bb      	adds	r3, r7, r6
 800cf6c:	781a      	ldrb	r2, [r3, #0]
 800cf6e:	197b      	adds	r3, r7, r5
 800cf70:	4958      	ldr	r1, [pc, #352]	; (800d0d4 <lorawan_aes_set_key+0x274>)
 800cf72:	5c8a      	ldrb	r2, [r1, r2]
 800cf74:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800cf76:	2412      	movs	r4, #18
 800cf78:	193b      	adds	r3, r7, r4
 800cf7a:	781a      	ldrb	r2, [r3, #0]
 800cf7c:	19bb      	adds	r3, r7, r6
 800cf7e:	4955      	ldr	r1, [pc, #340]	; (800d0d4 <lorawan_aes_set_key+0x274>)
 800cf80:	5c8a      	ldrb	r2, [r1, r2]
 800cf82:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800cf84:	2210      	movs	r2, #16
 800cf86:	18bb      	adds	r3, r7, r2
 800cf88:	781a      	ldrb	r2, [r3, #0]
 800cf8a:	193b      	adds	r3, r7, r4
 800cf8c:	4951      	ldr	r1, [pc, #324]	; (800d0d4 <lorawan_aes_set_key+0x274>)
 800cf8e:	5c8a      	ldrb	r2, [r1, r2]
 800cf90:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800cf92:	183b      	adds	r3, r7, r0
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	b25a      	sxtb	r2, r3
 800cf9a:	0004      	movs	r4, r0
 800cf9c:	183b      	adds	r3, r7, r0
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	09db      	lsrs	r3, r3, #7
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	1c19      	adds	r1, r3, #0
 800cfa6:	1c0b      	adds	r3, r1, #0
 800cfa8:	18db      	adds	r3, r3, r3
 800cfaa:	185b      	adds	r3, r3, r1
 800cfac:	1c19      	adds	r1, r3, #0
 800cfae:	00c8      	lsls	r0, r1, #3
 800cfb0:	1c19      	adds	r1, r3, #0
 800cfb2:	1c03      	adds	r3, r0, #0
 800cfb4:	18cb      	adds	r3, r1, r3
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	b25b      	sxtb	r3, r3
 800cfba:	4053      	eors	r3, r2
 800cfbc:	b25a      	sxtb	r2, r3
 800cfbe:	193b      	adds	r3, r7, r4
 800cfc0:	701a      	strb	r2, [r3, #0]
 800cfc2:	e02d      	b.n	800d020 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800cfc4:	210b      	movs	r1, #11
 800cfc6:	187b      	adds	r3, r7, r1
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	2b18      	cmp	r3, #24
 800cfcc:	d928      	bls.n	800d020 <lorawan_aes_set_key+0x1c0>
 800cfce:	2317      	movs	r3, #23
 800cfd0:	18fa      	adds	r2, r7, r3
 800cfd2:	187b      	adds	r3, r7, r1
 800cfd4:	7812      	ldrb	r2, [r2, #0]
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	0019      	movs	r1, r3
 800cfda:	0010      	movs	r0, r2
 800cfdc:	f7f3 f922 	bl	8000224 <__aeabi_uidivmod>
 800cfe0:	000b      	movs	r3, r1
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b10      	cmp	r3, #16
 800cfe6:	d11b      	bne.n	800d020 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800cfe8:	2115      	movs	r1, #21
 800cfea:	187b      	adds	r3, r7, r1
 800cfec:	781a      	ldrb	r2, [r3, #0]
 800cfee:	187b      	adds	r3, r7, r1
 800cff0:	4938      	ldr	r1, [pc, #224]	; (800d0d4 <lorawan_aes_set_key+0x274>)
 800cff2:	5c8a      	ldrb	r2, [r1, r2]
 800cff4:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800cff6:	2114      	movs	r1, #20
 800cff8:	187b      	adds	r3, r7, r1
 800cffa:	781a      	ldrb	r2, [r3, #0]
 800cffc:	187b      	adds	r3, r7, r1
 800cffe:	4935      	ldr	r1, [pc, #212]	; (800d0d4 <lorawan_aes_set_key+0x274>)
 800d000:	5c8a      	ldrb	r2, [r1, r2]
 800d002:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800d004:	2113      	movs	r1, #19
 800d006:	187b      	adds	r3, r7, r1
 800d008:	781a      	ldrb	r2, [r3, #0]
 800d00a:	187b      	adds	r3, r7, r1
 800d00c:	4931      	ldr	r1, [pc, #196]	; (800d0d4 <lorawan_aes_set_key+0x274>)
 800d00e:	5c8a      	ldrb	r2, [r1, r2]
 800d010:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800d012:	2112      	movs	r1, #18
 800d014:	187b      	adds	r3, r7, r1
 800d016:	781a      	ldrb	r2, [r3, #0]
 800d018:	187b      	adds	r3, r7, r1
 800d01a:	492e      	ldr	r1, [pc, #184]	; (800d0d4 <lorawan_aes_set_key+0x274>)
 800d01c:	5c8a      	ldrb	r2, [r1, r2]
 800d01e:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800d020:	2410      	movs	r4, #16
 800d022:	193b      	adds	r3, r7, r4
 800d024:	2017      	movs	r0, #23
 800d026:	1839      	adds	r1, r7, r0
 800d028:	220b      	movs	r2, #11
 800d02a:	18ba      	adds	r2, r7, r2
 800d02c:	7809      	ldrb	r1, [r1, #0]
 800d02e:	7812      	ldrb	r2, [r2, #0]
 800d030:	1a8a      	subs	r2, r1, r2
 800d032:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d034:	193b      	adds	r3, r7, r4
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	5cd1      	ldrb	r1, [r2, r3]
 800d03c:	183b      	adds	r3, r7, r0
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	2215      	movs	r2, #21
 800d042:	18ba      	adds	r2, r7, r2
 800d044:	7812      	ldrb	r2, [r2, #0]
 800d046:	404a      	eors	r2, r1
 800d048:	b2d1      	uxtb	r1, r2
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d04e:	193b      	adds	r3, r7, r4
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	3301      	adds	r3, #1
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	5cd1      	ldrb	r1, [r2, r3]
 800d058:	183b      	adds	r3, r7, r0
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	3301      	adds	r3, #1
 800d05e:	2214      	movs	r2, #20
 800d060:	18ba      	adds	r2, r7, r2
 800d062:	7812      	ldrb	r2, [r2, #0]
 800d064:	404a      	eors	r2, r1
 800d066:	b2d1      	uxtb	r1, r2
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d06c:	193b      	adds	r3, r7, r4
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	3302      	adds	r3, #2
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	5cd1      	ldrb	r1, [r2, r3]
 800d076:	183b      	adds	r3, r7, r0
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	3302      	adds	r3, #2
 800d07c:	2213      	movs	r2, #19
 800d07e:	18ba      	adds	r2, r7, r2
 800d080:	7812      	ldrb	r2, [r2, #0]
 800d082:	404a      	eors	r2, r1
 800d084:	b2d1      	uxtb	r1, r2
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d08a:	193b      	adds	r3, r7, r4
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	3303      	adds	r3, #3
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	5cd1      	ldrb	r1, [r2, r3]
 800d094:	183b      	adds	r3, r7, r0
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	3303      	adds	r3, #3
 800d09a:	2212      	movs	r2, #18
 800d09c:	18ba      	adds	r2, r7, r2
 800d09e:	7812      	ldrb	r2, [r2, #0]
 800d0a0:	404a      	eors	r2, r1
 800d0a2:	b2d1      	uxtb	r1, r2
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d0a8:	183b      	adds	r3, r7, r0
 800d0aa:	183a      	adds	r2, r7, r0
 800d0ac:	7812      	ldrb	r2, [r2, #0]
 800d0ae:	3204      	adds	r2, #4
 800d0b0:	701a      	strb	r2, [r3, #0]
 800d0b2:	2317      	movs	r3, #23
 800d0b4:	18fa      	adds	r2, r7, r3
 800d0b6:	2311      	movs	r3, #17
 800d0b8:	18fb      	adds	r3, r7, r3
 800d0ba:	7812      	ldrb	r2, [r2, #0]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d200      	bcs.n	800d0c4 <lorawan_aes_set_key+0x264>
 800d0c2:	e715      	b.n	800cef0 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	0018      	movs	r0, r3
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	b007      	add	sp, #28
 800d0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ce:	46c0      	nop			; (mov r8, r8)
 800d0d0:	00010101 	.word	0x00010101
 800d0d4:	0801e580 	.word	0x0801e580

0800d0d8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d0d8:	b5b0      	push	{r4, r5, r7, lr}
 800d0da:	b08a      	sub	sp, #40	; 0x28
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	22f0      	movs	r2, #240	; 0xf0
 800d0e8:	5c9b      	ldrb	r3, [r3, r2]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d039      	beq.n	800d162 <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	68f9      	ldr	r1, [r7, #12]
 800d0f2:	2314      	movs	r3, #20
 800d0f4:	18fb      	adds	r3, r7, r3
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	f7ff fb64 	bl	800c7c4 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d0fc:	2327      	movs	r3, #39	; 0x27
 800d0fe:	18fb      	adds	r3, r7, r3
 800d100:	2201      	movs	r2, #1
 800d102:	701a      	strb	r2, [r3, #0]
 800d104:	e014      	b.n	800d130 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d106:	2514      	movs	r5, #20
 800d108:	197b      	adds	r3, r7, r5
 800d10a:	0018      	movs	r0, r3
 800d10c:	f7ff fcc2 	bl	800ca94 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2427      	movs	r4, #39	; 0x27
 800d114:	193a      	adds	r2, r7, r4
 800d116:	7812      	ldrb	r2, [r2, #0]
 800d118:	0112      	lsls	r2, r2, #4
 800d11a:	189a      	adds	r2, r3, r2
 800d11c:	197b      	adds	r3, r7, r5
 800d11e:	0011      	movs	r1, r2
 800d120:	0018      	movs	r0, r3
 800d122:	f7ff fc06 	bl	800c932 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d126:	193b      	adds	r3, r7, r4
 800d128:	193a      	adds	r2, r7, r4
 800d12a:	7812      	ldrb	r2, [r2, #0]
 800d12c:	3201      	adds	r2, #1
 800d12e:	701a      	strb	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	22f0      	movs	r2, #240	; 0xf0
 800d134:	5c9b      	ldrb	r3, [r3, r2]
 800d136:	2427      	movs	r4, #39	; 0x27
 800d138:	193a      	adds	r2, r7, r4
 800d13a:	7812      	ldrb	r2, [r2, #0]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d3e2      	bcc.n	800d106 <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d140:	2514      	movs	r5, #20
 800d142:	197b      	adds	r3, r7, r5
 800d144:	0018      	movs	r0, r3
 800d146:	f7ff fc03 	bl	800c950 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	193a      	adds	r2, r7, r4
 800d14e:	7812      	ldrb	r2, [r2, #0]
 800d150:	0112      	lsls	r2, r2, #4
 800d152:	189a      	adds	r2, r3, r2
 800d154:	1979      	adds	r1, r7, r5
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	0018      	movs	r0, r3
 800d15a:	f7ff fb33 	bl	800c7c4 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	e000      	b.n	800d164 <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800d162:	23ff      	movs	r3, #255	; 0xff
}
 800d164:	0018      	movs	r0, r3
 800d166:	46bd      	mov	sp, r7
 800d168:	b00a      	add	sp, #40	; 0x28
 800d16a:	bdb0      	pop	{r4, r5, r7, pc}

0800d16c <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	0002      	movs	r2, r0
 800d174:	6039      	str	r1, [r7, #0]
 800d176:	1dfb      	adds	r3, r7, #7
 800d178:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d17a:	230f      	movs	r3, #15
 800d17c:	18fb      	adds	r3, r7, r3
 800d17e:	2200      	movs	r2, #0
 800d180:	701a      	strb	r2, [r3, #0]
 800d182:	e020      	b.n	800d1c6 <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d184:	200f      	movs	r0, #15
 800d186:	183b      	adds	r3, r7, r0
 800d188:	781a      	ldrb	r2, [r3, #0]
 800d18a:	4914      	ldr	r1, [pc, #80]	; (800d1dc <GetKeyByID+0x70>)
 800d18c:	0013      	movs	r3, r2
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	189b      	adds	r3, r3, r2
 800d192:	18cb      	adds	r3, r1, r3
 800d194:	3310      	adds	r3, #16
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	1dfa      	adds	r2, r7, #7
 800d19a:	7812      	ldrb	r2, [r2, #0]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d10c      	bne.n	800d1ba <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800d1a0:	183b      	adds	r3, r7, r0
 800d1a2:	781a      	ldrb	r2, [r3, #0]
 800d1a4:	0013      	movs	r3, r2
 800d1a6:	011b      	lsls	r3, r3, #4
 800d1a8:	189b      	adds	r3, r3, r2
 800d1aa:	3310      	adds	r3, #16
 800d1ac:	001a      	movs	r2, r3
 800d1ae:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <GetKeyByID+0x70>)
 800d1b0:	18d2      	adds	r2, r2, r3
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e00b      	b.n	800d1d2 <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d1ba:	210f      	movs	r1, #15
 800d1bc:	187b      	adds	r3, r7, r1
 800d1be:	781a      	ldrb	r2, [r3, #0]
 800d1c0:	187b      	adds	r3, r7, r1
 800d1c2:	3201      	adds	r2, #1
 800d1c4:	701a      	strb	r2, [r3, #0]
 800d1c6:	230f      	movs	r3, #15
 800d1c8:	18fb      	adds	r3, r7, r3
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	2b09      	cmp	r3, #9
 800d1ce:	d9d9      	bls.n	800d184 <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d1d0:	2303      	movs	r3, #3
}
 800d1d2:	0018      	movs	r0, r3
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	b004      	add	sp, #16
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	46c0      	nop			; (mov r8, r8)
 800d1dc:	2000007c 	.word	0x2000007c

0800d1e0 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	af00      	add	r7, sp, #0
  return;
 800d1e4:	46c0      	nop			; (mov r8, r8)
}
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
	...

0800d1ec <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800d1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ee:	b0d1      	sub	sp, #324	; 0x144
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	0019      	movs	r1, r3
 800d1f8:	4b40      	ldr	r3, [pc, #256]	; (800d2fc <ComputeCmac+0x110>)
 800d1fa:	20a0      	movs	r0, #160	; 0xa0
 800d1fc:	0040      	lsls	r0, r0, #1
 800d1fe:	4684      	mov	ip, r0
 800d200:	44bc      	add	ip, r7
 800d202:	4463      	add	r3, ip
 800d204:	801a      	strh	r2, [r3, #0]
 800d206:	4b3e      	ldr	r3, [pc, #248]	; (800d300 <ComputeCmac+0x114>)
 800d208:	22a0      	movs	r2, #160	; 0xa0
 800d20a:	0052      	lsls	r2, r2, #1
 800d20c:	4694      	mov	ip, r2
 800d20e:	44bc      	add	ip, r7
 800d210:	4463      	add	r3, ip
 800d212:	1c0a      	adds	r2, r1, #0
 800d214:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d216:	2340      	movs	r3, #64	; 0x40
 800d218:	33ff      	adds	r3, #255	; 0xff
 800d21a:	18fb      	adds	r3, r7, r3
 800d21c:	2206      	movs	r2, #6
 800d21e:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d008      	beq.n	800d238 <ComputeCmac+0x4c>
 800d226:	23a8      	movs	r3, #168	; 0xa8
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	2208      	movs	r2, #8
 800d22c:	4694      	mov	ip, r2
 800d22e:	44bc      	add	ip, r7
 800d230:	4463      	add	r3, ip
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <ComputeCmac+0x50>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d238:	2302      	movs	r3, #2
 800d23a:	e05a      	b.n	800d2f2 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800d23c:	2514      	movs	r5, #20
 800d23e:	197b      	adds	r3, r7, r5
 800d240:	0018      	movs	r0, r3
 800d242:	f7fe ff39 	bl	800c0b8 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800d246:	2640      	movs	r6, #64	; 0x40
 800d248:	36ff      	adds	r6, #255	; 0xff
 800d24a:	19bc      	adds	r4, r7, r6
 800d24c:	2310      	movs	r3, #16
 800d24e:	18fa      	adds	r2, r7, r3
 800d250:	4b2b      	ldr	r3, [pc, #172]	; (800d300 <ComputeCmac+0x114>)
 800d252:	21a0      	movs	r1, #160	; 0xa0
 800d254:	0049      	lsls	r1, r1, #1
 800d256:	468c      	mov	ip, r1
 800d258:	44bc      	add	ip, r7
 800d25a:	4463      	add	r3, ip
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	0011      	movs	r1, r2
 800d260:	0018      	movs	r0, r3
 800d262:	f7ff ff83 	bl	800d16c <GetKeyByID>
 800d266:	0003      	movs	r3, r0
 800d268:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800d26a:	19bb      	adds	r3, r7, r6
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d13b      	bne.n	800d2ea <ComputeCmac+0xfe>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	1c5a      	adds	r2, r3, #1
 800d276:	197b      	adds	r3, r7, r5
 800d278:	0011      	movs	r1, r2
 800d27a:	0018      	movs	r0, r3
 800d27c:	f7fe ff36 	bl	800c0ec <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d005      	beq.n	800d292 <ComputeCmac+0xa6>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800d286:	68f9      	ldr	r1, [r7, #12]
 800d288:	197b      	adds	r3, r7, r5
 800d28a:	2210      	movs	r2, #16
 800d28c:	0018      	movs	r0, r3
 800d28e:	f7fe ff3c 	bl	800c10a <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800d292:	4b1a      	ldr	r3, [pc, #104]	; (800d2fc <ComputeCmac+0x110>)
 800d294:	22a0      	movs	r2, #160	; 0xa0
 800d296:	0052      	lsls	r2, r2, #1
 800d298:	4694      	mov	ip, r2
 800d29a:	44bc      	add	ip, r7
 800d29c:	4463      	add	r3, ip
 800d29e:	881a      	ldrh	r2, [r3, #0]
 800d2a0:	68b9      	ldr	r1, [r7, #8]
 800d2a2:	2414      	movs	r4, #20
 800d2a4:	193b      	adds	r3, r7, r4
 800d2a6:	0018      	movs	r0, r3
 800d2a8:	f7fe ff2f 	bl	800c10a <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800d2ac:	193a      	adds	r2, r7, r4
 800d2ae:	2496      	movs	r4, #150	; 0x96
 800d2b0:	0064      	lsls	r4, r4, #1
 800d2b2:	193b      	adds	r3, r7, r4
 800d2b4:	0011      	movs	r1, r2
 800d2b6:	0018      	movs	r0, r3
 800d2b8:	f7fe ffef 	bl	800c29a <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d2bc:	0021      	movs	r1, r4
 800d2be:	187b      	adds	r3, r7, r1
 800d2c0:	78db      	ldrb	r3, [r3, #3]
 800d2c2:	061a      	lsls	r2, r3, #24
 800d2c4:	187b      	adds	r3, r7, r1
 800d2c6:	789b      	ldrb	r3, [r3, #2]
 800d2c8:	041b      	lsls	r3, r3, #16
 800d2ca:	431a      	orrs	r2, r3
 800d2cc:	187b      	adds	r3, r7, r1
 800d2ce:	785b      	ldrb	r3, [r3, #1]
 800d2d0:	021b      	lsls	r3, r3, #8
 800d2d2:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800d2d4:	187a      	adds	r2, r7, r1
 800d2d6:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d2d8:	431a      	orrs	r2, r3
 800d2da:	23a8      	movs	r3, #168	; 0xa8
 800d2dc:	005b      	lsls	r3, r3, #1
 800d2de:	2108      	movs	r1, #8
 800d2e0:	468c      	mov	ip, r1
 800d2e2:	44bc      	add	ip, r7
 800d2e4:	4463      	add	r3, ip
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d2ea:	2340      	movs	r3, #64	; 0x40
 800d2ec:	33ff      	adds	r3, #255	; 0xff
 800d2ee:	18fb      	adds	r3, r7, r3
 800d2f0:	781b      	ldrb	r3, [r3, #0]
}
 800d2f2:	0018      	movs	r0, r3
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	b051      	add	sp, #324	; 0x144
 800d2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2fa:	46c0      	nop			; (mov r8, r8)
 800d2fc:	fffffec6 	.word	0xfffffec6
 800d300:	fffffec5 	.word	0xfffffec5

0800d304 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800d304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d306:	46de      	mov	lr, fp
 800d308:	4657      	mov	r7, sl
 800d30a:	464e      	mov	r6, r9
 800d30c:	4645      	mov	r5, r8
 800d30e:	b5e0      	push	{r5, r6, r7, lr}
 800d310:	b099      	sub	sp, #100	; 0x64
 800d312:	af10      	add	r7, sp, #64	; 0x40
 800d314:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d316:	250f      	movs	r5, #15
 800d318:	2610      	movs	r6, #16
 800d31a:	19bb      	adds	r3, r7, r6
 800d31c:	195b      	adds	r3, r3, r5
 800d31e:	2206      	movs	r2, #6
 800d320:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800d322:	49dd      	ldr	r1, [pc, #884]	; (800d698 <SecureElementInit+0x394>)
 800d324:	4bdd      	ldr	r3, [pc, #884]	; (800d69c <SecureElementInit+0x398>)
 800d326:	22aa      	movs	r2, #170	; 0xaa
 800d328:	0018      	movs	r0, r3
 800d32a:	f00b ffe3 	bl	80192f4 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800d32e:	19bb      	adds	r3, r7, r6
 800d330:	195c      	adds	r4, r3, r5
 800d332:	2308      	movs	r3, #8
 800d334:	2210      	movs	r2, #16
 800d336:	4694      	mov	ip, r2
 800d338:	44bc      	add	ip, r7
 800d33a:	4463      	add	r3, ip
 800d33c:	0019      	movs	r1, r3
 800d33e:	2000      	movs	r0, #0
 800d340:	f7ff ff14 	bl	800d16c <GetKeyByID>
 800d344:	0003      	movs	r3, r0
 800d346:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d348:	4bd5      	ldr	r3, [pc, #852]	; (800d6a0 <SecureElementInit+0x39c>)
 800d34a:	2200      	movs	r2, #0
 800d34c:	2100      	movs	r1, #0
 800d34e:	2002      	movs	r0, #2
 800d350:	f00e fc44 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d354:	19bb      	adds	r3, r7, r6
 800d356:	195b      	adds	r3, r3, r5
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d14f      	bne.n	800d3fe <SecureElementInit+0xfa>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	785b      	ldrb	r3, [r3, #1]
 800d362:	001d      	movs	r5, r3
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	789b      	ldrb	r3, [r3, #2]
 800d368:	001e      	movs	r6, r3
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	78db      	ldrb	r3, [r3, #3]
 800d36e:	469c      	mov	ip, r3
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	791b      	ldrb	r3, [r3, #4]
 800d374:	4698      	mov	r8, r3
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	795b      	ldrb	r3, [r3, #5]
 800d37a:	4699      	mov	r9, r3
 800d37c:	69bb      	ldr	r3, [r7, #24]
 800d37e:	799b      	ldrb	r3, [r3, #6]
 800d380:	469a      	mov	sl, r3
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	79db      	ldrb	r3, [r3, #7]
 800d386:	469b      	mov	fp, r3
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	7a1b      	ldrb	r3, [r3, #8]
 800d38c:	613b      	str	r3, [r7, #16]
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	7a5b      	ldrb	r3, [r3, #9]
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	7a9b      	ldrb	r3, [r3, #10]
 800d398:	60bb      	str	r3, [r7, #8]
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	7adb      	ldrb	r3, [r3, #11]
 800d39e:	607b      	str	r3, [r7, #4]
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	7b1b      	ldrb	r3, [r3, #12]
 800d3a4:	603b      	str	r3, [r7, #0]
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	7b5b      	ldrb	r3, [r3, #13]
 800d3aa:	001c      	movs	r4, r3
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	7b9b      	ldrb	r3, [r3, #14]
 800d3b0:	0018      	movs	r0, r3
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	7bdb      	ldrb	r3, [r3, #15]
 800d3b6:	0019      	movs	r1, r3
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	7c1b      	ldrb	r3, [r3, #16]
 800d3bc:	4ab9      	ldr	r2, [pc, #740]	; (800d6a4 <SecureElementInit+0x3a0>)
 800d3be:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3c0:	910e      	str	r1, [sp, #56]	; 0x38
 800d3c2:	900d      	str	r0, [sp, #52]	; 0x34
 800d3c4:	940c      	str	r4, [sp, #48]	; 0x30
 800d3c6:	6839      	ldr	r1, [r7, #0]
 800d3c8:	910b      	str	r1, [sp, #44]	; 0x2c
 800d3ca:	6879      	ldr	r1, [r7, #4]
 800d3cc:	910a      	str	r1, [sp, #40]	; 0x28
 800d3ce:	68b9      	ldr	r1, [r7, #8]
 800d3d0:	9109      	str	r1, [sp, #36]	; 0x24
 800d3d2:	68f9      	ldr	r1, [r7, #12]
 800d3d4:	9108      	str	r1, [sp, #32]
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	9307      	str	r3, [sp, #28]
 800d3da:	465b      	mov	r3, fp
 800d3dc:	9306      	str	r3, [sp, #24]
 800d3de:	4653      	mov	r3, sl
 800d3e0:	9305      	str	r3, [sp, #20]
 800d3e2:	464b      	mov	r3, r9
 800d3e4:	9304      	str	r3, [sp, #16]
 800d3e6:	4643      	mov	r3, r8
 800d3e8:	9303      	str	r3, [sp, #12]
 800d3ea:	4663      	mov	r3, ip
 800d3ec:	9302      	str	r3, [sp, #8]
 800d3ee:	9601      	str	r6, [sp, #4]
 800d3f0:	9500      	str	r5, [sp, #0]
 800d3f2:	0013      	movs	r3, r2
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	2002      	movs	r0, #2
 800d3fa:	f00e fbef 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800d3fe:	250f      	movs	r5, #15
 800d400:	2610      	movs	r6, #16
 800d402:	19bb      	adds	r3, r7, r6
 800d404:	195c      	adds	r4, r3, r5
 800d406:	2308      	movs	r3, #8
 800d408:	2210      	movs	r2, #16
 800d40a:	4694      	mov	ip, r2
 800d40c:	44bc      	add	ip, r7
 800d40e:	4463      	add	r3, ip
 800d410:	0019      	movs	r1, r3
 800d412:	2001      	movs	r0, #1
 800d414:	f7ff feaa 	bl	800d16c <GetKeyByID>
 800d418:	0003      	movs	r3, r0
 800d41a:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d41c:	19bb      	adds	r3, r7, r6
 800d41e:	195b      	adds	r3, r3, r5
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d14f      	bne.n	800d4c6 <SecureElementInit+0x1c2>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	785b      	ldrb	r3, [r3, #1]
 800d42a:	001d      	movs	r5, r3
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	789b      	ldrb	r3, [r3, #2]
 800d430:	001e      	movs	r6, r3
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	78db      	ldrb	r3, [r3, #3]
 800d436:	469c      	mov	ip, r3
 800d438:	69bb      	ldr	r3, [r7, #24]
 800d43a:	791b      	ldrb	r3, [r3, #4]
 800d43c:	4698      	mov	r8, r3
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	795b      	ldrb	r3, [r3, #5]
 800d442:	4699      	mov	r9, r3
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	799b      	ldrb	r3, [r3, #6]
 800d448:	469a      	mov	sl, r3
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	79db      	ldrb	r3, [r3, #7]
 800d44e:	469b      	mov	fp, r3
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	7a1b      	ldrb	r3, [r3, #8]
 800d454:	613b      	str	r3, [r7, #16]
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	7a5b      	ldrb	r3, [r3, #9]
 800d45a:	60fb      	str	r3, [r7, #12]
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	7a9b      	ldrb	r3, [r3, #10]
 800d460:	60bb      	str	r3, [r7, #8]
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	7adb      	ldrb	r3, [r3, #11]
 800d466:	607b      	str	r3, [r7, #4]
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	7b1b      	ldrb	r3, [r3, #12]
 800d46c:	603b      	str	r3, [r7, #0]
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	7b5b      	ldrb	r3, [r3, #13]
 800d472:	001c      	movs	r4, r3
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	7b9b      	ldrb	r3, [r3, #14]
 800d478:	0018      	movs	r0, r3
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	7bdb      	ldrb	r3, [r3, #15]
 800d47e:	0019      	movs	r1, r3
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	7c1b      	ldrb	r3, [r3, #16]
 800d484:	4a88      	ldr	r2, [pc, #544]	; (800d6a8 <SecureElementInit+0x3a4>)
 800d486:	930f      	str	r3, [sp, #60]	; 0x3c
 800d488:	910e      	str	r1, [sp, #56]	; 0x38
 800d48a:	900d      	str	r0, [sp, #52]	; 0x34
 800d48c:	940c      	str	r4, [sp, #48]	; 0x30
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	910b      	str	r1, [sp, #44]	; 0x2c
 800d492:	6879      	ldr	r1, [r7, #4]
 800d494:	910a      	str	r1, [sp, #40]	; 0x28
 800d496:	68b9      	ldr	r1, [r7, #8]
 800d498:	9109      	str	r1, [sp, #36]	; 0x24
 800d49a:	68f9      	ldr	r1, [r7, #12]
 800d49c:	9108      	str	r1, [sp, #32]
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	9307      	str	r3, [sp, #28]
 800d4a2:	465b      	mov	r3, fp
 800d4a4:	9306      	str	r3, [sp, #24]
 800d4a6:	4653      	mov	r3, sl
 800d4a8:	9305      	str	r3, [sp, #20]
 800d4aa:	464b      	mov	r3, r9
 800d4ac:	9304      	str	r3, [sp, #16]
 800d4ae:	4643      	mov	r3, r8
 800d4b0:	9303      	str	r3, [sp, #12]
 800d4b2:	4663      	mov	r3, ip
 800d4b4:	9302      	str	r3, [sp, #8]
 800d4b6:	9601      	str	r6, [sp, #4]
 800d4b8:	9500      	str	r5, [sp, #0]
 800d4ba:	0013      	movs	r3, r2
 800d4bc:	2200      	movs	r2, #0
 800d4be:	2100      	movs	r1, #0
 800d4c0:	2002      	movs	r0, #2
 800d4c2:	f00e fb8b 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d4c6:	4b79      	ldr	r3, [pc, #484]	; (800d6ac <SecureElementInit+0x3a8>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	2002      	movs	r0, #2
 800d4ce:	f00e fb85 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800d4d2:	250f      	movs	r5, #15
 800d4d4:	2610      	movs	r6, #16
 800d4d6:	19bb      	adds	r3, r7, r6
 800d4d8:	195c      	adds	r4, r3, r5
 800d4da:	2308      	movs	r3, #8
 800d4dc:	2210      	movs	r2, #16
 800d4de:	4694      	mov	ip, r2
 800d4e0:	44bc      	add	ip, r7
 800d4e2:	4463      	add	r3, ip
 800d4e4:	0019      	movs	r1, r3
 800d4e6:	2003      	movs	r0, #3
 800d4e8:	f7ff fe40 	bl	800d16c <GetKeyByID>
 800d4ec:	0003      	movs	r3, r0
 800d4ee:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d4f0:	19bb      	adds	r3, r7, r6
 800d4f2:	195b      	adds	r3, r3, r5
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d14f      	bne.n	800d59a <SecureElementInit+0x296>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d4fa:	69bb      	ldr	r3, [r7, #24]
 800d4fc:	785b      	ldrb	r3, [r3, #1]
 800d4fe:	001d      	movs	r5, r3
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	789b      	ldrb	r3, [r3, #2]
 800d504:	001e      	movs	r6, r3
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	78db      	ldrb	r3, [r3, #3]
 800d50a:	469c      	mov	ip, r3
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	791b      	ldrb	r3, [r3, #4]
 800d510:	4698      	mov	r8, r3
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	795b      	ldrb	r3, [r3, #5]
 800d516:	4699      	mov	r9, r3
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	799b      	ldrb	r3, [r3, #6]
 800d51c:	469a      	mov	sl, r3
 800d51e:	69bb      	ldr	r3, [r7, #24]
 800d520:	79db      	ldrb	r3, [r3, #7]
 800d522:	469b      	mov	fp, r3
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	7a1b      	ldrb	r3, [r3, #8]
 800d528:	613b      	str	r3, [r7, #16]
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	7a5b      	ldrb	r3, [r3, #9]
 800d52e:	60fb      	str	r3, [r7, #12]
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	7a9b      	ldrb	r3, [r3, #10]
 800d534:	60bb      	str	r3, [r7, #8]
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	7adb      	ldrb	r3, [r3, #11]
 800d53a:	607b      	str	r3, [r7, #4]
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	7b1b      	ldrb	r3, [r3, #12]
 800d540:	603b      	str	r3, [r7, #0]
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	7b5b      	ldrb	r3, [r3, #13]
 800d546:	001c      	movs	r4, r3
 800d548:	69bb      	ldr	r3, [r7, #24]
 800d54a:	7b9b      	ldrb	r3, [r3, #14]
 800d54c:	0018      	movs	r0, r3
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	7bdb      	ldrb	r3, [r3, #15]
 800d552:	0019      	movs	r1, r3
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	7c1b      	ldrb	r3, [r3, #16]
 800d558:	4a55      	ldr	r2, [pc, #340]	; (800d6b0 <SecureElementInit+0x3ac>)
 800d55a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d55c:	910e      	str	r1, [sp, #56]	; 0x38
 800d55e:	900d      	str	r0, [sp, #52]	; 0x34
 800d560:	940c      	str	r4, [sp, #48]	; 0x30
 800d562:	6839      	ldr	r1, [r7, #0]
 800d564:	910b      	str	r1, [sp, #44]	; 0x2c
 800d566:	6879      	ldr	r1, [r7, #4]
 800d568:	910a      	str	r1, [sp, #40]	; 0x28
 800d56a:	68b9      	ldr	r1, [r7, #8]
 800d56c:	9109      	str	r1, [sp, #36]	; 0x24
 800d56e:	68f9      	ldr	r1, [r7, #12]
 800d570:	9108      	str	r1, [sp, #32]
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	9307      	str	r3, [sp, #28]
 800d576:	465b      	mov	r3, fp
 800d578:	9306      	str	r3, [sp, #24]
 800d57a:	4653      	mov	r3, sl
 800d57c:	9305      	str	r3, [sp, #20]
 800d57e:	464b      	mov	r3, r9
 800d580:	9304      	str	r3, [sp, #16]
 800d582:	4643      	mov	r3, r8
 800d584:	9303      	str	r3, [sp, #12]
 800d586:	4663      	mov	r3, ip
 800d588:	9302      	str	r3, [sp, #8]
 800d58a:	9601      	str	r6, [sp, #4]
 800d58c:	9500      	str	r5, [sp, #0]
 800d58e:	0013      	movs	r3, r2
 800d590:	2200      	movs	r2, #0
 800d592:	2100      	movs	r1, #0
 800d594:	2002      	movs	r0, #2
 800d596:	f00e fb21 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800d59a:	250f      	movs	r5, #15
 800d59c:	2610      	movs	r6, #16
 800d59e:	19bb      	adds	r3, r7, r6
 800d5a0:	195c      	adds	r4, r3, r5
 800d5a2:	2308      	movs	r3, #8
 800d5a4:	2210      	movs	r2, #16
 800d5a6:	4694      	mov	ip, r2
 800d5a8:	44bc      	add	ip, r7
 800d5aa:	4463      	add	r3, ip
 800d5ac:	0019      	movs	r1, r3
 800d5ae:	2002      	movs	r0, #2
 800d5b0:	f7ff fddc 	bl	800d16c <GetKeyByID>
 800d5b4:	0003      	movs	r3, r0
 800d5b6:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d5b8:	19bb      	adds	r3, r7, r6
 800d5ba:	195b      	adds	r3, r3, r5
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d14f      	bne.n	800d662 <SecureElementInit+0x35e>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	785b      	ldrb	r3, [r3, #1]
 800d5c6:	001d      	movs	r5, r3
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	789b      	ldrb	r3, [r3, #2]
 800d5cc:	001e      	movs	r6, r3
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	78db      	ldrb	r3, [r3, #3]
 800d5d2:	469c      	mov	ip, r3
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	791b      	ldrb	r3, [r3, #4]
 800d5d8:	4698      	mov	r8, r3
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	795b      	ldrb	r3, [r3, #5]
 800d5de:	4699      	mov	r9, r3
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	799b      	ldrb	r3, [r3, #6]
 800d5e4:	469a      	mov	sl, r3
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	79db      	ldrb	r3, [r3, #7]
 800d5ea:	469b      	mov	fp, r3
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	7a1b      	ldrb	r3, [r3, #8]
 800d5f0:	613b      	str	r3, [r7, #16]
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	7a5b      	ldrb	r3, [r3, #9]
 800d5f6:	60fb      	str	r3, [r7, #12]
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	7a9b      	ldrb	r3, [r3, #10]
 800d5fc:	60bb      	str	r3, [r7, #8]
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	7adb      	ldrb	r3, [r3, #11]
 800d602:	607b      	str	r3, [r7, #4]
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	7b1b      	ldrb	r3, [r3, #12]
 800d608:	603b      	str	r3, [r7, #0]
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	7b5b      	ldrb	r3, [r3, #13]
 800d60e:	001c      	movs	r4, r3
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	7b9b      	ldrb	r3, [r3, #14]
 800d614:	0018      	movs	r0, r3
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	7bdb      	ldrb	r3, [r3, #15]
 800d61a:	0019      	movs	r1, r3
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	7c1b      	ldrb	r3, [r3, #16]
 800d620:	4a24      	ldr	r2, [pc, #144]	; (800d6b4 <SecureElementInit+0x3b0>)
 800d622:	930f      	str	r3, [sp, #60]	; 0x3c
 800d624:	910e      	str	r1, [sp, #56]	; 0x38
 800d626:	900d      	str	r0, [sp, #52]	; 0x34
 800d628:	940c      	str	r4, [sp, #48]	; 0x30
 800d62a:	6839      	ldr	r1, [r7, #0]
 800d62c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d62e:	6879      	ldr	r1, [r7, #4]
 800d630:	910a      	str	r1, [sp, #40]	; 0x28
 800d632:	68b9      	ldr	r1, [r7, #8]
 800d634:	9109      	str	r1, [sp, #36]	; 0x24
 800d636:	68f9      	ldr	r1, [r7, #12]
 800d638:	9108      	str	r1, [sp, #32]
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	9307      	str	r3, [sp, #28]
 800d63e:	465b      	mov	r3, fp
 800d640:	9306      	str	r3, [sp, #24]
 800d642:	4653      	mov	r3, sl
 800d644:	9305      	str	r3, [sp, #20]
 800d646:	464b      	mov	r3, r9
 800d648:	9304      	str	r3, [sp, #16]
 800d64a:	4643      	mov	r3, r8
 800d64c:	9303      	str	r3, [sp, #12]
 800d64e:	4663      	mov	r3, ip
 800d650:	9302      	str	r3, [sp, #8]
 800d652:	9601      	str	r6, [sp, #4]
 800d654:	9500      	str	r5, [sp, #0]
 800d656:	0013      	movs	r3, r2
 800d658:	2200      	movs	r2, #0
 800d65a:	2100      	movs	r1, #0
 800d65c:	2002      	movs	r0, #2
 800d65e:	f00e fabd 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <SecureElementInit+0x36c>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800d668:	4b13      	ldr	r3, [pc, #76]	; (800d6b8 <SecureElementInit+0x3b4>)
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	601a      	str	r2, [r3, #0]
 800d66e:	e002      	b.n	800d676 <SecureElementInit+0x372>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800d670:	4b11      	ldr	r3, [pc, #68]	; (800d6b8 <SecureElementInit+0x3b4>)
 800d672:	4a12      	ldr	r2, [pc, #72]	; (800d6bc <SecureElementInit+0x3b8>)
 800d674:	601a      	str	r2, [r3, #0]
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 800d676:	4b12      	ldr	r3, [pc, #72]	; (800d6c0 <SecureElementInit+0x3bc>)
 800d678:	0018      	movs	r0, r3
 800d67a:	f7f7 fbcc 	bl	8004e16 <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800d67e:	4b0e      	ldr	r3, [pc, #56]	; (800d6b8 <SecureElementInit+0x3b4>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800d684:	2300      	movs	r3, #0
}
 800d686:	0018      	movs	r0, r3
 800d688:	46bd      	mov	sp, r7
 800d68a:	b009      	add	sp, #36	; 0x24
 800d68c:	bcf0      	pop	{r4, r5, r6, r7}
 800d68e:	46bb      	mov	fp, r7
 800d690:	46b2      	mov	sl, r6
 800d692:	46a9      	mov	r9, r5
 800d694:	46a0      	mov	r8, r4
 800d696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d698:	0801e880 	.word	0x0801e880
 800d69c:	2000008c 	.word	0x2000008c
 800d6a0:	0801e92c 	.word	0x0801e92c
 800d6a4:	0801e944 	.word	0x0801e944
 800d6a8:	0801e9a8 	.word	0x0801e9a8
 800d6ac:	0801ea0c 	.word	0x0801ea0c
 800d6b0:	0801ea24 	.word	0x0801ea24
 800d6b4:	0801ea88 	.word	0x0801ea88
 800d6b8:	200003ac 	.word	0x200003ac
 800d6bc:	0800d1e1 	.word	0x0800d1e1
 800d6c0:	2000007c 	.word	0x2000007c

0800d6c4 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d007      	beq.n	800d6e2 <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800d6d2:	6879      	ldr	r1, [r7, #4]
 800d6d4:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <SecureElementRestoreNvmCtx+0x28>)
 800d6d6:	22ba      	movs	r2, #186	; 0xba
 800d6d8:	0018      	movs	r0, r3
 800d6da:	f00b fe0b 	bl	80192f4 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e000      	b.n	800d6e4 <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d6e2:	2302      	movs	r3, #2
  }
}
 800d6e4:	0018      	movs	r0, r3
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	b002      	add	sp, #8
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	2000007c 	.word	0x2000007c

0800d6f0 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	22ba      	movs	r2, #186	; 0xba
 800d6fc:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800d6fe:	4b02      	ldr	r3, [pc, #8]	; (800d708 <SecureElementGetNvmCtx+0x18>)
}
 800d700:	0018      	movs	r0, r3
 800d702:	46bd      	mov	sp, r7
 800d704:	b002      	add	sp, #8
 800d706:	bd80      	pop	{r7, pc}
 800d708:	2000007c 	.word	0x2000007c

0800d70c <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800d70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d70e:	b089      	sub	sp, #36	; 0x24
 800d710:	af00      	add	r7, sp, #0
 800d712:	0002      	movs	r2, r0
 800d714:	6039      	str	r1, [r7, #0]
 800d716:	1dfb      	adds	r3, r7, #7
 800d718:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d101      	bne.n	800d724 <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d720:	2302      	movs	r3, #2
 800d722:	e064      	b.n	800d7ee <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d724:	231f      	movs	r3, #31
 800d726:	18fb      	adds	r3, r7, r3
 800d728:	2200      	movs	r2, #0
 800d72a:	701a      	strb	r2, [r3, #0]
 800d72c:	e059      	b.n	800d7e2 <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d72e:	231f      	movs	r3, #31
 800d730:	18fb      	adds	r3, r7, r3
 800d732:	781a      	ldrb	r2, [r3, #0]
 800d734:	4930      	ldr	r1, [pc, #192]	; (800d7f8 <SecureElementSetKey+0xec>)
 800d736:	0013      	movs	r3, r2
 800d738:	011b      	lsls	r3, r3, #4
 800d73a:	189b      	adds	r3, r3, r2
 800d73c:	18cb      	adds	r3, r1, r3
 800d73e:	3310      	adds	r3, #16
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	1dfa      	adds	r2, r7, #7
 800d744:	7812      	ldrb	r2, [r2, #0]
 800d746:	429a      	cmp	r2, r3
 800d748:	d145      	bne.n	800d7d6 <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800d74a:	1dfb      	adds	r3, r7, #7
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	2b80      	cmp	r3, #128	; 0x80
 800d750:	d12c      	bne.n	800d7ac <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d752:	251e      	movs	r5, #30
 800d754:	197b      	adds	r3, r7, r5
 800d756:	2206      	movs	r2, #6
 800d758:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800d75a:	260c      	movs	r6, #12
 800d75c:	19bb      	adds	r3, r7, r6
 800d75e:	2200      	movs	r2, #0
 800d760:	601a      	str	r2, [r3, #0]
 800d762:	3304      	adds	r3, #4
 800d764:	220c      	movs	r2, #12
 800d766:	2100      	movs	r1, #0
 800d768:	0018      	movs	r0, r3
 800d76a:	f010 fb1a 	bl	801dda2 <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800d76e:	197c      	adds	r4, r7, r5
 800d770:	19bb      	adds	r3, r7, r6
 800d772:	6838      	ldr	r0, [r7, #0]
 800d774:	227f      	movs	r2, #127	; 0x7f
 800d776:	2110      	movs	r1, #16
 800d778:	f000 f8a5 	bl	800d8c6 <SecureElementAesEncrypt>
 800d77c:	0003      	movs	r3, r0
 800d77e:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800d780:	231f      	movs	r3, #31
 800d782:	18fb      	adds	r3, r7, r3
 800d784:	781a      	ldrb	r2, [r3, #0]
 800d786:	0013      	movs	r3, r2
 800d788:	011b      	lsls	r3, r3, #4
 800d78a:	189b      	adds	r3, r3, r2
 800d78c:	3310      	adds	r3, #16
 800d78e:	001a      	movs	r2, r3
 800d790:	4b19      	ldr	r3, [pc, #100]	; (800d7f8 <SecureElementSetKey+0xec>)
 800d792:	18d3      	adds	r3, r2, r3
 800d794:	3301      	adds	r3, #1
 800d796:	19b9      	adds	r1, r7, r6
 800d798:	2210      	movs	r2, #16
 800d79a:	0018      	movs	r0, r3
 800d79c:	f00b fdaa 	bl	80192f4 <memcpy1>
        SeNvmCtxChanged();
 800d7a0:	4b16      	ldr	r3, [pc, #88]	; (800d7fc <SecureElementSetKey+0xf0>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4798      	blx	r3

        return retval;
 800d7a6:	197b      	adds	r3, r7, r5
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	e020      	b.n	800d7ee <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800d7ac:	231f      	movs	r3, #31
 800d7ae:	18fb      	adds	r3, r7, r3
 800d7b0:	781a      	ldrb	r2, [r3, #0]
 800d7b2:	0013      	movs	r3, r2
 800d7b4:	011b      	lsls	r3, r3, #4
 800d7b6:	189b      	adds	r3, r3, r2
 800d7b8:	3310      	adds	r3, #16
 800d7ba:	001a      	movs	r2, r3
 800d7bc:	4b0e      	ldr	r3, [pc, #56]	; (800d7f8 <SecureElementSetKey+0xec>)
 800d7be:	18d3      	adds	r3, r2, r3
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	2210      	movs	r2, #16
 800d7c6:	0018      	movs	r0, r3
 800d7c8:	f00b fd94 	bl	80192f4 <memcpy1>
        SeNvmCtxChanged();
 800d7cc:	4b0b      	ldr	r3, [pc, #44]	; (800d7fc <SecureElementSetKey+0xf0>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e00b      	b.n	800d7ee <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d7d6:	211f      	movs	r1, #31
 800d7d8:	187b      	adds	r3, r7, r1
 800d7da:	781a      	ldrb	r2, [r3, #0]
 800d7dc:	187b      	adds	r3, r7, r1
 800d7de:	3201      	adds	r2, #1
 800d7e0:	701a      	strb	r2, [r3, #0]
 800d7e2:	231f      	movs	r3, #31
 800d7e4:	18fb      	adds	r3, r7, r3
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	2b09      	cmp	r3, #9
 800d7ea:	d9a0      	bls.n	800d72e <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d7ec:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800d7ee:	0018      	movs	r0, r3
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	b009      	add	sp, #36	; 0x24
 800d7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7f6:	46c0      	nop			; (mov r8, r8)
 800d7f8:	2000007c 	.word	0x2000007c
 800d7fc:	200003ac 	.word	0x200003ac

0800d800 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800d800:	b590      	push	{r4, r7, lr}
 800d802:	b087      	sub	sp, #28
 800d804:	af02      	add	r7, sp, #8
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	0019      	movs	r1, r3
 800d80c:	1dbb      	adds	r3, r7, #6
 800d80e:	801a      	strh	r2, [r3, #0]
 800d810:	1d7b      	adds	r3, r7, #5
 800d812:	1c0a      	adds	r2, r1, #0
 800d814:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800d816:	1d7b      	adds	r3, r7, #5
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	2b7e      	cmp	r3, #126	; 0x7e
 800d81c:	d901      	bls.n	800d822 <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d81e:	2303      	movs	r3, #3
 800d820:	e00b      	b.n	800d83a <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800d822:	1d7b      	adds	r3, r7, #5
 800d824:	781c      	ldrb	r4, [r3, #0]
 800d826:	1dbb      	adds	r3, r7, #6
 800d828:	881a      	ldrh	r2, [r3, #0]
 800d82a:	68b9      	ldr	r1, [r7, #8]
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	6a3b      	ldr	r3, [r7, #32]
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	0023      	movs	r3, r4
 800d834:	f7ff fcda 	bl	800d1ec <ComputeCmac>
 800d838:	0003      	movs	r3, r0
}
 800d83a:	0018      	movs	r0, r3
 800d83c:	46bd      	mov	sp, r7
 800d83e:	b005      	add	sp, #20
 800d840:	bd90      	pop	{r4, r7, pc}

0800d842 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800d842:	b5b0      	push	{r4, r5, r7, lr}
 800d844:	b088      	sub	sp, #32
 800d846:	af02      	add	r7, sp, #8
 800d848:	60f8      	str	r0, [r7, #12]
 800d84a:	0008      	movs	r0, r1
 800d84c:	607a      	str	r2, [r7, #4]
 800d84e:	0019      	movs	r1, r3
 800d850:	230a      	movs	r3, #10
 800d852:	18fb      	adds	r3, r7, r3
 800d854:	1c02      	adds	r2, r0, #0
 800d856:	801a      	strh	r2, [r3, #0]
 800d858:	2309      	movs	r3, #9
 800d85a:	18fb      	adds	r3, r7, r3
 800d85c:	1c0a      	adds	r2, r1, #0
 800d85e:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d860:	2317      	movs	r3, #23
 800d862:	18fb      	adds	r3, r7, r3
 800d864:	2206      	movs	r2, #6
 800d866:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d101      	bne.n	800d872 <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d86e:	2302      	movs	r3, #2
 800d870:	e025      	b.n	800d8be <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800d872:	2300      	movs	r3, #0
 800d874:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800d876:	2517      	movs	r5, #23
 800d878:	197c      	adds	r4, r7, r5
 800d87a:	2309      	movs	r3, #9
 800d87c:	18fb      	adds	r3, r7, r3
 800d87e:	7818      	ldrb	r0, [r3, #0]
 800d880:	230a      	movs	r3, #10
 800d882:	18fb      	adds	r3, r7, r3
 800d884:	881a      	ldrh	r2, [r3, #0]
 800d886:	68f9      	ldr	r1, [r7, #12]
 800d888:	2310      	movs	r3, #16
 800d88a:	18fb      	adds	r3, r7, r3
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	0003      	movs	r3, r0
 800d890:	2000      	movs	r0, #0
 800d892:	f7ff fcab 	bl	800d1ec <ComputeCmac>
 800d896:	0003      	movs	r3, r0
 800d898:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800d89a:	197b      	adds	r3, r7, r5
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d002      	beq.n	800d8a8 <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800d8a2:	197b      	adds	r3, r7, r5
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	e00a      	b.n	800d8be <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d003      	beq.n	800d8b8 <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800d8b0:	2317      	movs	r3, #23
 800d8b2:	18fb      	adds	r3, r7, r3
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800d8b8:	2317      	movs	r3, #23
 800d8ba:	18fb      	adds	r3, r7, r3
 800d8bc:	781b      	ldrb	r3, [r3, #0]
}
 800d8be:	0018      	movs	r0, r3
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	b006      	add	sp, #24
 800d8c4:	bdb0      	pop	{r4, r5, r7, pc}

0800d8c6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800d8c6:	b5b0      	push	{r4, r5, r7, lr}
 800d8c8:	b0c2      	sub	sp, #264	; 0x108
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	60f8      	str	r0, [r7, #12]
 800d8ce:	0008      	movs	r0, r1
 800d8d0:	0011      	movs	r1, r2
 800d8d2:	607b      	str	r3, [r7, #4]
 800d8d4:	230a      	movs	r3, #10
 800d8d6:	18fb      	adds	r3, r7, r3
 800d8d8:	1c02      	adds	r2, r0, #0
 800d8da:	801a      	strh	r2, [r3, #0]
 800d8dc:	2309      	movs	r3, #9
 800d8de:	18fb      	adds	r3, r7, r3
 800d8e0:	1c0a      	adds	r2, r1, #0
 800d8e2:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d8e4:	1dfb      	adds	r3, r7, #7
 800d8e6:	33ff      	adds	r3, #255	; 0xff
 800d8e8:	2206      	movs	r2, #6
 800d8ea:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <SecureElementAesEncrypt+0x32>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d101      	bne.n	800d8fc <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d8f8:	2302      	movs	r3, #2
 800d8fa:	e051      	b.n	800d9a0 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800d8fc:	230a      	movs	r3, #10
 800d8fe:	18fb      	adds	r3, r7, r3
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	220f      	movs	r2, #15
 800d904:	4013      	ands	r3, r2
 800d906:	b29b      	uxth	r3, r3
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d001      	beq.n	800d910 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d90c:	2305      	movs	r3, #5
 800d90e:	e047      	b.n	800d9a0 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800d910:	2514      	movs	r5, #20
 800d912:	197b      	adds	r3, r7, r5
 800d914:	22f0      	movs	r2, #240	; 0xf0
 800d916:	2100      	movs	r1, #0
 800d918:	0018      	movs	r0, r3
 800d91a:	f00b fd29 	bl	8019370 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800d91e:	1dfc      	adds	r4, r7, #7
 800d920:	34ff      	adds	r4, #255	; 0xff
 800d922:	2310      	movs	r3, #16
 800d924:	18fa      	adds	r2, r7, r3
 800d926:	2309      	movs	r3, #9
 800d928:	18fb      	adds	r3, r7, r3
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	0011      	movs	r1, r2
 800d92e:	0018      	movs	r0, r3
 800d930:	f7ff fc1c 	bl	800d16c <GetKeyByID>
 800d934:	0003      	movs	r3, r0
 800d936:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800d938:	1dfb      	adds	r3, r7, #7
 800d93a:	33ff      	adds	r3, #255	; 0xff
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d12b      	bne.n	800d99a <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	3301      	adds	r3, #1
 800d946:	197a      	adds	r2, r7, r5
 800d948:	2110      	movs	r1, #16
 800d94a:	0018      	movs	r0, r3
 800d94c:	f7ff fa88 	bl	800ce60 <lorawan_aes_set_key>

    uint8_t block = 0;
 800d950:	2308      	movs	r3, #8
 800d952:	33ff      	adds	r3, #255	; 0xff
 800d954:	18fb      	adds	r3, r7, r3
 800d956:	2200      	movs	r2, #0
 800d958:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800d95a:	e019      	b.n	800d990 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800d95c:	2408      	movs	r4, #8
 800d95e:	34ff      	adds	r4, #255	; 0xff
 800d960:	193b      	adds	r3, r7, r4
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	18d0      	adds	r0, r2, r3
 800d968:	193b      	adds	r3, r7, r4
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	18d3      	adds	r3, r2, r3
 800d970:	2214      	movs	r2, #20
 800d972:	18ba      	adds	r2, r7, r2
 800d974:	0019      	movs	r1, r3
 800d976:	f7ff fbaf 	bl	800d0d8 <lorawan_aes_encrypt>
      block = block + 16;
 800d97a:	193b      	adds	r3, r7, r4
 800d97c:	193a      	adds	r2, r7, r4
 800d97e:	7812      	ldrb	r2, [r2, #0]
 800d980:	3210      	adds	r2, #16
 800d982:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800d984:	220a      	movs	r2, #10
 800d986:	18bb      	adds	r3, r7, r2
 800d988:	18ba      	adds	r2, r7, r2
 800d98a:	8812      	ldrh	r2, [r2, #0]
 800d98c:	3a10      	subs	r2, #16
 800d98e:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800d990:	230a      	movs	r3, #10
 800d992:	18fb      	adds	r3, r7, r3
 800d994:	881b      	ldrh	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1e0      	bne.n	800d95c <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d99a:	1dfb      	adds	r3, r7, #7
 800d99c:	33ff      	adds	r3, #255	; 0xff
 800d99e:	781b      	ldrb	r3, [r3, #0]
}
 800d9a0:	0018      	movs	r0, r3
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	b042      	add	sp, #264	; 0x108
 800d9a6:	bdb0      	pop	{r4, r5, r7, pc}

0800d9a8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800d9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9aa:	b08b      	sub	sp, #44	; 0x2c
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	0019      	movs	r1, r3
 800d9b4:	1dfb      	adds	r3, r7, #7
 800d9b6:	701a      	strb	r2, [r3, #0]
 800d9b8:	1dbb      	adds	r3, r7, #6
 800d9ba:	1c0a      	adds	r2, r1, #0
 800d9bc:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d9be:	2327      	movs	r3, #39	; 0x27
 800d9c0:	18fb      	adds	r3, r7, r3
 800d9c2:	2206      	movs	r2, #6
 800d9c4:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d9cc:	2302      	movs	r3, #2
 800d9ce:	e03c      	b.n	800da4a <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800d9d0:	1dbb      	adds	r3, r7, #6
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	2b7f      	cmp	r3, #127	; 0x7f
 800d9d6:	d105      	bne.n	800d9e4 <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800d9d8:	1dfb      	adds	r3, r7, #7
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	2b04      	cmp	r3, #4
 800d9de:	d001      	beq.n	800d9e4 <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	e032      	b.n	800da4a <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800d9e4:	2614      	movs	r6, #20
 800d9e6:	19bb      	adds	r3, r7, r6
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	601a      	str	r2, [r3, #0]
 800d9ec:	3304      	adds	r3, #4
 800d9ee:	220c      	movs	r2, #12
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	0018      	movs	r0, r3
 800d9f4:	f010 f9d5 	bl	801dda2 <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800d9f8:	2527      	movs	r5, #39	; 0x27
 800d9fa:	197c      	adds	r4, r7, r5
 800d9fc:	19b9      	adds	r1, r7, r6
 800d9fe:	1dfb      	adds	r3, r7, #7
 800da00:	781a      	ldrb	r2, [r3, #0]
 800da02:	68b8      	ldr	r0, [r7, #8]
 800da04:	000b      	movs	r3, r1
 800da06:	2110      	movs	r1, #16
 800da08:	f7ff ff5d 	bl	800d8c6 <SecureElementAesEncrypt>
 800da0c:	0003      	movs	r3, r0
 800da0e:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800da10:	197b      	adds	r3, r7, r5
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d002      	beq.n	800da1e <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800da18:	197b      	adds	r3, r7, r5
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	e015      	b.n	800da4a <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800da1e:	2527      	movs	r5, #39	; 0x27
 800da20:	197c      	adds	r4, r7, r5
 800da22:	2314      	movs	r3, #20
 800da24:	18fa      	adds	r2, r7, r3
 800da26:	1dbb      	adds	r3, r7, #6
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	0011      	movs	r1, r2
 800da2c:	0018      	movs	r0, r3
 800da2e:	f7ff fe6d 	bl	800d70c <SecureElementSetKey>
 800da32:	0003      	movs	r3, r0
 800da34:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800da36:	197b      	adds	r3, r7, r5
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d002      	beq.n	800da44 <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800da3e:	197b      	adds	r3, r7, r5
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	e002      	b.n	800da4a <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800da44:	2327      	movs	r3, #39	; 0x27
 800da46:	18fb      	adds	r3, r7, r3
 800da48:	781b      	ldrb	r3, [r3, #0]
}
 800da4a:	0018      	movs	r0, r3
 800da4c:	46bd      	mov	sp, r7
 800da4e:	b00b      	add	sp, #44	; 0x2c
 800da50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da52 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800da52:	b5b0      	push	{r4, r5, r7, lr}
 800da54:	b086      	sub	sp, #24
 800da56:	af00      	add	r7, sp, #0
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	0011      	movs	r1, r2
 800da5c:	607b      	str	r3, [r7, #4]
 800da5e:	230f      	movs	r3, #15
 800da60:	18fb      	adds	r3, r7, r3
 800da62:	1c02      	adds	r2, r0, #0
 800da64:	701a      	strb	r2, [r3, #0]
 800da66:	230c      	movs	r3, #12
 800da68:	18fb      	adds	r3, r7, r3
 800da6a:	1c0a      	adds	r2, r1, #0
 800da6c:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d005      	beq.n	800da80 <SecureElementProcessJoinAccept+0x2e>
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	2b00      	cmp	r3, #0
 800da78:	d002      	beq.n	800da80 <SecureElementProcessJoinAccept+0x2e>
 800da7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d101      	bne.n	800da84 <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800da80:	2302      	movs	r3, #2
 800da82:	e069      	b.n	800db58 <SecureElementProcessJoinAccept+0x106>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800da84:	2328      	movs	r3, #40	; 0x28
 800da86:	18fb      	adds	r3, r7, r3
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	2b21      	cmp	r3, #33	; 0x21
 800da8c:	d901      	bls.n	800da92 <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800da8e:	2305      	movs	r3, #5
 800da90:	e062      	b.n	800db58 <SecureElementProcessJoinAccept+0x106>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800da92:	2517      	movs	r5, #23
 800da94:	197b      	adds	r3, r7, r5
 800da96:	2201      	movs	r2, #1
 800da98:	701a      	strb	r2, [r3, #0]
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800da9a:	2428      	movs	r4, #40	; 0x28
 800da9c:	193b      	adds	r3, r7, r4
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	6879      	ldr	r1, [r7, #4]
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	0018      	movs	r0, r3
 800daa8:	f00b fc24 	bl	80192f4 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	1c58      	adds	r0, r3, #1
 800dab0:	193b      	adds	r3, r7, r4
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	3b01      	subs	r3, #1
 800dab8:	b299      	uxth	r1, r3
 800daba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabc:	1c5c      	adds	r4, r3, #1
 800dabe:	197b      	adds	r3, r7, r5
 800dac0:	781a      	ldrb	r2, [r3, #0]
 800dac2:	0023      	movs	r3, r4
 800dac4:	f7ff feff 	bl	800d8c6 <SecureElementAesEncrypt>
 800dac8:	1e03      	subs	r3, r0, #0
 800daca:	d001      	beq.n	800dad0 <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800dacc:	2307      	movs	r3, #7
 800dace:	e043      	b.n	800db58 <SecureElementProcessJoinAccept+0x106>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	330b      	adds	r3, #11
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	09db      	lsrs	r3, r3, #7
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800dade:	2300      	movs	r3, #0
 800dae0:	613b      	str	r3, [r7, #16]

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800dae2:	2128      	movs	r1, #40	; 0x28
 800dae4:	187b      	adds	r3, r7, r1
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	3b04      	subs	r3, #4
 800daea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daec:	18d3      	adds	r3, r2, r3
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800daf2:	187b      	adds	r3, r7, r1
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	3b03      	subs	r3, #3
 800daf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dafa:	18d3      	adds	r3, r2, r3
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	021b      	lsls	r3, r3, #8
 800db00:	693a      	ldr	r2, [r7, #16]
 800db02:	4313      	orrs	r3, r2
 800db04:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800db06:	187b      	adds	r3, r7, r1
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	3b02      	subs	r3, #2
 800db0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db0e:	18d3      	adds	r3, r2, r3
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	041b      	lsls	r3, r3, #16
 800db14:	693a      	ldr	r2, [r7, #16]
 800db16:	4313      	orrs	r3, r2
 800db18:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800db1a:	187b      	adds	r3, r7, r1
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	3b01      	subs	r3, #1
 800db20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db22:	18d3      	adds	r3, r2, r3
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	061b      	lsls	r3, r3, #24
 800db28:	693a      	ldr	r2, [r7, #16]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	613b      	str	r3, [r7, #16]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10d      	bne.n	800db52 <SecureElementProcessJoinAccept+0x100>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800db36:	187b      	adds	r3, r7, r1
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	3b04      	subs	r3, #4
 800db3e:	b299      	uxth	r1, r3
 800db40:	693a      	ldr	r2, [r7, #16]
 800db42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db44:	2301      	movs	r3, #1
 800db46:	f7ff fe7c 	bl	800d842 <SecureElementVerifyAesCmac>
 800db4a:	1e03      	subs	r3, r0, #0
 800db4c:	d003      	beq.n	800db56 <SecureElementProcessJoinAccept+0x104>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800db4e:	2301      	movs	r3, #1
 800db50:	e002      	b.n	800db58 <SecureElementProcessJoinAccept+0x106>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800db52:	2304      	movs	r3, #4
 800db54:	e000      	b.n	800db58 <SecureElementProcessJoinAccept+0x106>
  }

  return SECURE_ELEMENT_SUCCESS;
 800db56:	2300      	movs	r3, #0
}
 800db58:	0018      	movs	r0, r3
 800db5a:	46bd      	mov	sp, r7
 800db5c:	b006      	add	sp, #24
 800db5e:	bdb0      	pop	{r4, r5, r7, pc}

0800db60 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d101      	bne.n	800db72 <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800db6e:	2302      	movs	r3, #2
 800db70:	e006      	b.n	800db80 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800db72:	4b05      	ldr	r3, [pc, #20]	; (800db88 <SecureElementRandomNumber+0x28>)
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	4798      	blx	r3
 800db78:	0002      	movs	r2, r0
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800db7e:	2300      	movs	r3, #0
}
 800db80:	0018      	movs	r0, r3
 800db82:	46bd      	mov	sp, r7
 800db84:	b002      	add	sp, #8
 800db86:	bd80      	pop	{r7, pc}
 800db88:	0801f0b4 	.word	0x0801f0b4

0800db8c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d101      	bne.n	800db9e <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800db9a:	2302      	movs	r3, #2
 800db9c:	e009      	b.n	800dbb2 <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800db9e:	6879      	ldr	r1, [r7, #4]
 800dba0:	4b06      	ldr	r3, [pc, #24]	; (800dbbc <SecureElementSetDevEui+0x30>)
 800dba2:	2208      	movs	r2, #8
 800dba4:	0018      	movs	r0, r3
 800dba6:	f00b fba5 	bl	80192f4 <memcpy1>
  SeNvmCtxChanged();
 800dbaa:	4b05      	ldr	r3, [pc, #20]	; (800dbc0 <SecureElementSetDevEui+0x34>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	0018      	movs	r0, r3
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	b002      	add	sp, #8
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	46c0      	nop			; (mov r8, r8)
 800dbbc:	2000007c 	.word	0x2000007c
 800dbc0:	200003ac 	.word	0x200003ac

0800dbc4 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800dbc8:	4b01      	ldr	r3, [pc, #4]	; (800dbd0 <SecureElementGetDevEui+0xc>)
}
 800dbca:	0018      	movs	r0, r3
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	2000007c 	.word	0x2000007c

0800dbd4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d101      	bne.n	800dbe6 <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dbe2:	2302      	movs	r3, #2
 800dbe4:	e009      	b.n	800dbfa <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800dbe6:	6879      	ldr	r1, [r7, #4]
 800dbe8:	4b06      	ldr	r3, [pc, #24]	; (800dc04 <SecureElementSetJoinEui+0x30>)
 800dbea:	2208      	movs	r2, #8
 800dbec:	0018      	movs	r0, r3
 800dbee:	f00b fb81 	bl	80192f4 <memcpy1>
  SeNvmCtxChanged();
 800dbf2:	4b05      	ldr	r3, [pc, #20]	; (800dc08 <SecureElementSetJoinEui+0x34>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	b002      	add	sp, #8
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	46c0      	nop			; (mov r8, r8)
 800dc04:	20000084 	.word	0x20000084
 800dc08:	200003ac 	.word	0x200003ac

0800dc0c <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800dc10:	4b01      	ldr	r3, [pc, #4]	; (800dc18 <SecureElementGetJoinEui+0xc>)
}
 800dc12:	0018      	movs	r0, r3
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	20000084 	.word	0x20000084

0800dc1c <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800dc24:	6879      	ldr	r1, [r7, #4]
 800dc26:	4b17      	ldr	r3, [pc, #92]	; (800dc84 <LmHandlerInit+0x68>)
 800dc28:	2220      	movs	r2, #32
 800dc2a:	0018      	movs	r0, r3
 800dc2c:	f00e fb56 	bl	801c2dc <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800dc30:	4b15      	ldr	r3, [pc, #84]	; (800dc88 <LmHandlerInit+0x6c>)
 800dc32:	4a16      	ldr	r2, [pc, #88]	; (800dc8c <LmHandlerInit+0x70>)
 800dc34:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800dc36:	4b14      	ldr	r3, [pc, #80]	; (800dc88 <LmHandlerInit+0x6c>)
 800dc38:	4a15      	ldr	r2, [pc, #84]	; (800dc90 <LmHandlerInit+0x74>)
 800dc3a:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800dc3c:	4b12      	ldr	r3, [pc, #72]	; (800dc88 <LmHandlerInit+0x6c>)
 800dc3e:	4a15      	ldr	r2, [pc, #84]	; (800dc94 <LmHandlerInit+0x78>)
 800dc40:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800dc42:	4b11      	ldr	r3, [pc, #68]	; (800dc88 <LmHandlerInit+0x6c>)
 800dc44:	4a14      	ldr	r2, [pc, #80]	; (800dc98 <LmHandlerInit+0x7c>)
 800dc46:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800dc48:	4b0e      	ldr	r3, [pc, #56]	; (800dc84 <LmHandlerInit+0x68>)
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	4b13      	ldr	r3, [pc, #76]	; (800dc9c <LmHandlerInit+0x80>)
 800dc4e:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800dc50:	4b0c      	ldr	r3, [pc, #48]	; (800dc84 <LmHandlerInit+0x68>)
 800dc52:	685a      	ldr	r2, [r3, #4]
 800dc54:	4b11      	ldr	r3, [pc, #68]	; (800dc9c <LmHandlerInit+0x80>)
 800dc56:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800dc58:	4b10      	ldr	r3, [pc, #64]	; (800dc9c <LmHandlerInit+0x80>)
 800dc5a:	4a11      	ldr	r2, [pc, #68]	; (800dca0 <LmHandlerInit+0x84>)
 800dc5c:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800dc5e:	4b09      	ldr	r3, [pc, #36]	; (800dc84 <LmHandlerInit+0x68>)
 800dc60:	689a      	ldr	r2, [r3, #8]
 800dc62:	4b0e      	ldr	r3, [pc, #56]	; (800dc9c <LmHandlerInit+0x80>)
 800dc64:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800dc66:	4b0f      	ldr	r3, [pc, #60]	; (800dca4 <LmHandlerInit+0x88>)
 800dc68:	0019      	movs	r1, r3
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	f000 fb18 	bl	800e2a0 <LmHandlerPackageRegister>
 800dc70:	1e03      	subs	r3, r0, #0
 800dc72:	d002      	beq.n	800dc7a <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800dc74:	2301      	movs	r3, #1
 800dc76:	425b      	negs	r3, r3
 800dc78:	e000      	b.n	800dc7c <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800dc7a:	2300      	movs	r3, #0
}
 800dc7c:	0018      	movs	r0, r3
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	b002      	add	sp, #8
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	200003cc 	.word	0x200003cc
 800dc88:	200003ec 	.word	0x200003ec
 800dc8c:	0800e40d 	.word	0x0800e40d
 800dc90:	0800e479 	.word	0x0800e479
 800dc94:	0800e565 	.word	0x0800e565
 800dc98:	0800e60d 	.word	0x0800e60d
 800dc9c:	200003fc 	.word	0x200003fc
 800dca0:	0800edab 	.word	0x0800edab
 800dca4:	20000150 	.word	0x20000150

0800dca8 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800dca8:	b590      	push	{r4, r7, lr}
 800dcaa:	b091      	sub	sp, #68	; 0x44
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800dcb0:	6879      	ldr	r1, [r7, #4]
 800dcb2:	4b50      	ldr	r3, [pc, #320]	; (800ddf4 <LmHandlerConfigure+0x14c>)
 800dcb4:	2206      	movs	r2, #6
 800dcb6:	0018      	movs	r0, r3
 800dcb8:	f00e fb10 	bl	801c2dc <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800dcbc:	f7f5 fd3a 	bl	8003734 <LoraInfo_GetPtr>
 800dcc0:	0003      	movs	r3, r0
 800dcc2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800dcc4:	4b4b      	ldr	r3, [pc, #300]	; (800ddf4 <LmHandlerConfigure+0x14c>)
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	001a      	movs	r2, r3
 800dcca:	2301      	movs	r3, #1
 800dccc:	4093      	lsls	r3, r2
 800dcce:	001a      	movs	r2, r3
 800dcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	4013      	ands	r3, r2
 800dcd6:	d00b      	beq.n	800dcf0 <LmHandlerConfigure+0x48>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800dcd8:	4b46      	ldr	r3, [pc, #280]	; (800ddf4 <LmHandlerConfigure+0x14c>)
 800dcda:	781a      	ldrb	r2, [r3, #0]
 800dcdc:	4946      	ldr	r1, [pc, #280]	; (800ddf8 <LmHandlerConfigure+0x150>)
 800dcde:	4b47      	ldr	r3, [pc, #284]	; (800ddfc <LmHandlerConfigure+0x154>)
 800dce0:	0018      	movs	r0, r3
 800dce2:	f004 ff87 	bl	8012bf4 <LoRaMacInitialization>
 800dce6:	1e03      	subs	r3, r0, #0
 800dce8:	d009      	beq.n	800dcfe <LmHandlerConfigure+0x56>
    {
      return LORAMAC_HANDLER_ERROR;
 800dcea:	2301      	movs	r3, #1
 800dcec:	425b      	negs	r3, r3
 800dcee:	e07d      	b.n	800ddec <LmHandlerConfigure+0x144>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800dcf0:	4b43      	ldr	r3, [pc, #268]	; (800de00 <LmHandlerConfigure+0x158>)
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	f00d ff70 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800dcfc:	e7fe      	b.n	800dcfc <LmHandlerConfigure+0x54>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800dcfe:	f001 f864 	bl	800edca <NvmCtxMgmtRestore>
 800dd02:	1e03      	subs	r3, r0, #0
 800dd04:	d103      	bne.n	800dd0e <LmHandlerConfigure+0x66>
  {
    CtxRestoreDone = true;
 800dd06:	4b3f      	ldr	r3, [pc, #252]	; (800de04 <LmHandlerConfigure+0x15c>)
 800dd08:	2201      	movs	r2, #1
 800dd0a:	701a      	strb	r2, [r3, #0]
 800dd0c:	e021      	b.n	800dd52 <LmHandlerConfigure+0xaa>
  }
  else
  {
    CtxRestoreDone = false;
 800dd0e:	4b3d      	ldr	r3, [pc, #244]	; (800de04 <LmHandlerConfigure+0x15c>)
 800dd10:	2200      	movs	r2, #0
 800dd12:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800dd14:	2418      	movs	r4, #24
 800dd16:	193b      	adds	r3, r7, r4
 800dd18:	2202      	movs	r2, #2
 800dd1a:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800dd1c:	193b      	adds	r3, r7, r4
 800dd1e:	0018      	movs	r0, r3
 800dd20:	f005 fbca 	bl	80134b8 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800dd24:	193b      	adds	r3, r7, r4
 800dd26:	6859      	ldr	r1, [r3, #4]
 800dd28:	4b37      	ldr	r3, [pc, #220]	; (800de08 <LmHandlerConfigure+0x160>)
 800dd2a:	2208      	movs	r2, #8
 800dd2c:	0018      	movs	r0, r3
 800dd2e:	f00b fae1 	bl	80192f4 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800dd32:	0021      	movs	r1, r4
 800dd34:	187b      	adds	r3, r7, r1
 800dd36:	2203      	movs	r2, #3
 800dd38:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800dd3a:	000c      	movs	r4, r1
 800dd3c:	187b      	adds	r3, r7, r1
 800dd3e:	0018      	movs	r0, r3
 800dd40:	f005 fbba 	bl	80134b8 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800dd44:	193b      	adds	r3, r7, r4
 800dd46:	6859      	ldr	r1, [r3, #4]
 800dd48:	4b30      	ldr	r3, [pc, #192]	; (800de0c <LmHandlerConfigure+0x164>)
 800dd4a:	2208      	movs	r2, #8
 800dd4c:	0018      	movs	r0, r3
 800dd4e:	f00b fad1 	bl	80192f4 <memcpy1>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800dd52:	2118      	movs	r1, #24
 800dd54:	187b      	adds	r3, r7, r1
 800dd56:	220f      	movs	r2, #15
 800dd58:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800dd5a:	187b      	adds	r3, r7, r1
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800dd60:	000c      	movs	r4, r1
 800dd62:	187b      	adds	r3, r7, r1
 800dd64:	0018      	movs	r0, r3
 800dd66:	f005 fd05 	bl	8013774 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800dd6a:	0021      	movs	r1, r4
 800dd6c:	187b      	adds	r3, r7, r1
 800dd6e:	2210      	movs	r2, #16
 800dd70:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800dd72:	187b      	adds	r3, r7, r1
 800dd74:	2200      	movs	r2, #0
 800dd76:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800dd78:	000c      	movs	r4, r1
 800dd7a:	187b      	adds	r3, r7, r1
 800dd7c:	0018      	movs	r0, r3
 800dd7e:	f005 fcf9 	bl	8013774 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800dd82:	0021      	movs	r1, r4
 800dd84:	187b      	adds	r3, r7, r1
 800dd86:	2204      	movs	r2, #4
 800dd88:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800dd8a:	4b1a      	ldr	r3, [pc, #104]	; (800ddf4 <LmHandlerConfigure+0x14c>)
 800dd8c:	789a      	ldrb	r2, [r3, #2]
 800dd8e:	187b      	adds	r3, r7, r1
 800dd90:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800dd92:	000c      	movs	r4, r1
 800dd94:	187b      	adds	r3, r7, r1
 800dd96:	0018      	movs	r0, r3
 800dd98:	f005 fcec 	bl	8013774 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800dd9c:	0021      	movs	r1, r4
 800dd9e:	187b      	adds	r3, r7, r1
 800dda0:	2222      	movs	r2, #34	; 0x22
 800dda2:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800dda4:	187b      	adds	r3, r7, r1
 800dda6:	2214      	movs	r2, #20
 800dda8:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800ddaa:	187b      	adds	r3, r7, r1
 800ddac:	0018      	movs	r0, r3
 800ddae:	f005 fce1 	bl	8013774 <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800ddb2:	2110      	movs	r1, #16
 800ddb4:	187b      	adds	r3, r7, r1
 800ddb6:	220f      	movs	r2, #15
 800ddb8:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800ddba:	4b0e      	ldr	r3, [pc, #56]	; (800ddf4 <LmHandlerConfigure+0x14c>)
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	187a      	adds	r2, r7, r1
 800ddc0:	0011      	movs	r1, r2
 800ddc2:	0018      	movs	r0, r3
 800ddc4:	f008 fe17 	bl	80169f6 <RegionGetPhyParam>
 800ddc8:	0003      	movs	r3, r0
 800ddca:	001a      	movs	r2, r3
 800ddcc:	210c      	movs	r1, #12
 800ddce:	187b      	adds	r3, r7, r1
 800ddd0:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800ddd2:	187b      	adds	r3, r7, r1
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	1e5a      	subs	r2, r3, #1
 800ddd8:	4193      	sbcs	r3, r2
 800ddda:	b2da      	uxtb	r2, r3
 800dddc:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <LmHandlerConfigure+0x14c>)
 800ddde:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800dde0:	4b04      	ldr	r3, [pc, #16]	; (800ddf4 <LmHandlerConfigure+0x14c>)
 800dde2:	791b      	ldrb	r3, [r3, #4]
 800dde4:	0018      	movs	r0, r3
 800dde6:	f006 faf1 	bl	80143cc <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	0018      	movs	r0, r3
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	b011      	add	sp, #68	; 0x44
 800ddf2:	bd90      	pop	{r4, r7, pc}
 800ddf4:	200003c4 	.word	0x200003c4
 800ddf8:	200003fc 	.word	0x200003fc
 800ddfc:	200003ec 	.word	0x200003ec
 800de00:	0801eafc 	.word	0x0801eafc
 800de04:	20000516 	.word	0x20000516
 800de08:	20000138 	.word	0x20000138
 800de0c:	20000140 	.word	0x20000140

0800de10 <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800de16:	f004 fea7 	bl	8012b68 <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800de1a:	1dfb      	adds	r3, r7, #7
 800de1c:	2200      	movs	r2, #0
 800de1e:	701a      	strb	r2, [r3, #0]
 800de20:	e027      	b.n	800de72 <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800de22:	1dfb      	adds	r3, r7, #7
 800de24:	2200      	movs	r2, #0
 800de26:	569a      	ldrsb	r2, [r3, r2]
 800de28:	4b17      	ldr	r3, [pc, #92]	; (800de88 <LmHandlerProcess+0x78>)
 800de2a:	0092      	lsls	r2, r2, #2
 800de2c:	58d3      	ldr	r3, [r2, r3]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d017      	beq.n	800de62 <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800de32:	1dfb      	adds	r3, r7, #7
 800de34:	2200      	movs	r2, #0
 800de36:	569a      	ldrsb	r2, [r3, r2]
 800de38:	4b13      	ldr	r3, [pc, #76]	; (800de88 <LmHandlerProcess+0x78>)
 800de3a:	0092      	lsls	r2, r2, #2
 800de3c:	58d3      	ldr	r3, [r2, r3]
 800de3e:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00e      	beq.n	800de62 <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800de44:	1dfb      	adds	r3, r7, #7
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	0018      	movs	r0, r3
 800de4a:	f000 fbf1 	bl	800e630 <LmHandlerPackageIsInitialized>
 800de4e:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800de50:	d007      	beq.n	800de62 <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800de52:	1dfb      	adds	r3, r7, #7
 800de54:	2200      	movs	r2, #0
 800de56:	569a      	ldrsb	r2, [r3, r2]
 800de58:	4b0b      	ldr	r3, [pc, #44]	; (800de88 <LmHandlerProcess+0x78>)
 800de5a:	0092      	lsls	r2, r2, #2
 800de5c:	58d3      	ldr	r3, [r2, r3]
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800de62:	1dfb      	adds	r3, r7, #7
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	b25b      	sxtb	r3, r3
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	3301      	adds	r3, #1
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	1dfb      	adds	r3, r7, #7
 800de70:	701a      	strb	r2, [r3, #0]
 800de72:	1dfb      	adds	r3, r7, #7
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	b25b      	sxtb	r3, r3
 800de78:	2b04      	cmp	r3, #4
 800de7a:	ddd2      	ble.n	800de22 <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800de7c:	f000 ff9f 	bl	800edbe <NvmCtxMgmtStore>
}
 800de80:	46c0      	nop			; (mov r8, r8)
 800de82:	46bd      	mov	sp, r7
 800de84:	b002      	add	sp, #8
 800de86:	bd80      	pop	{r7, pc}
 800de88:	200003b0 	.word	0x200003b0

0800de8c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800de8c:	b5b0      	push	{r4, r5, r7, lr}
 800de8e:	b08a      	sub	sp, #40	; 0x28
 800de90:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800de92:	003b      	movs	r3, r7
 800de94:	2201      	movs	r2, #1
 800de96:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800de98:	2527      	movs	r5, #39	; 0x27
 800de9a:	197c      	adds	r4, r7, r5
 800de9c:	003b      	movs	r3, r7
 800de9e:	0018      	movs	r0, r3
 800dea0:	f005 fb0a 	bl	80134b8 <LoRaMacMibGetRequestConfirm>
 800dea4:	0003      	movs	r3, r0
 800dea6:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800dea8:	197b      	adds	r3, r7, r5
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d107      	bne.n	800dec0 <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800deb0:	003b      	movs	r3, r7
 800deb2:	791b      	ldrb	r3, [r3, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d101      	bne.n	800debc <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800deb8:	2300      	movs	r3, #0
 800deba:	e002      	b.n	800dec2 <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800debc:	2301      	movs	r3, #1
 800debe:	e000      	b.n	800dec2 <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800dec0:	2300      	movs	r3, #0
  }
}
 800dec2:	0018      	movs	r0, r3
 800dec4:	46bd      	mov	sp, r7
 800dec6:	b00a      	add	sp, #40	; 0x28
 800dec8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800decc <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800decc:	b590      	push	{r4, r7, lr}
 800dece:	b093      	sub	sp, #76	; 0x4c
 800ded0:	af02      	add	r7, sp, #8
 800ded2:	0002      	movs	r2, r0
 800ded4:	1dfb      	adds	r3, r7, #7
 800ded6:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800ded8:	1dfb      	adds	r3, r7, #7
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d113      	bne.n	800df08 <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800dee0:	4b37      	ldr	r3, [pc, #220]	; (800dfc0 <LmHandlerJoin+0xf4>)
 800dee2:	2202      	movs	r2, #2
 800dee4:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800dee6:	f005 fa2d 	bl	8013344 <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800deea:	2108      	movs	r1, #8
 800deec:	187b      	adds	r3, r7, r1
 800deee:	2201      	movs	r2, #1
 800def0:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800def2:	4b34      	ldr	r3, [pc, #208]	; (800dfc4 <LmHandlerJoin+0xf8>)
 800def4:	78db      	ldrb	r3, [r3, #3]
 800def6:	b25b      	sxtb	r3, r3
 800def8:	b2da      	uxtb	r2, r3
 800defa:	187b      	adds	r3, r7, r1
 800defc:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800defe:	187b      	adds	r3, r7, r1
 800df00:	0018      	movs	r0, r3
 800df02:	f005 ffbd 	bl	8013e80 <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800df06:	e057      	b.n	800dfb8 <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800df08:	4b2d      	ldr	r3, [pc, #180]	; (800dfc0 <LmHandlerJoin+0xf4>)
 800df0a:	2201      	movs	r2, #1
 800df0c:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800df0e:	4b2c      	ldr	r3, [pc, #176]	; (800dfc0 <LmHandlerJoin+0xf4>)
 800df10:	2200      	movs	r2, #0
 800df12:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800df14:	4b2c      	ldr	r3, [pc, #176]	; (800dfc8 <LmHandlerJoin+0xfc>)
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	2201      	movs	r2, #1
 800df1a:	4053      	eors	r3, r2
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d033      	beq.n	800df8a <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800df22:	211c      	movs	r1, #28
 800df24:	187b      	adds	r3, r7, r1
 800df26:	2227      	movs	r2, #39	; 0x27
 800df28:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800df2a:	187b      	adds	r3, r7, r1
 800df2c:	4a27      	ldr	r2, [pc, #156]	; (800dfcc <LmHandlerJoin+0x100>)
 800df2e:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800df30:	000c      	movs	r4, r1
 800df32:	187b      	adds	r3, r7, r1
 800df34:	0018      	movs	r0, r3
 800df36:	f005 fc1d 	bl	8013774 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800df3a:	0021      	movs	r1, r4
 800df3c:	187b      	adds	r3, r7, r1
 800df3e:	2205      	movs	r2, #5
 800df40:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800df42:	4b23      	ldr	r3, [pc, #140]	; (800dfd0 <LmHandlerJoin+0x104>)
 800df44:	691a      	ldr	r2, [r3, #16]
 800df46:	187b      	adds	r3, r7, r1
 800df48:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800df4a:	000c      	movs	r4, r1
 800df4c:	187b      	adds	r3, r7, r1
 800df4e:	0018      	movs	r0, r3
 800df50:	f005 fc10 	bl	8013774 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800df54:	f7f6 ffa0 	bl	8004e98 <GetDevAddr>
 800df58:	0002      	movs	r2, r0
 800df5a:	4b1d      	ldr	r3, [pc, #116]	; (800dfd0 <LmHandlerJoin+0x104>)
 800df5c:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800df5e:	0021      	movs	r1, r4
 800df60:	187b      	adds	r3, r7, r1
 800df62:	2206      	movs	r2, #6
 800df64:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800df66:	4b1a      	ldr	r3, [pc, #104]	; (800dfd0 <LmHandlerJoin+0x104>)
 800df68:	695a      	ldr	r2, [r3, #20]
 800df6a:	187b      	adds	r3, r7, r1
 800df6c:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800df6e:	187b      	adds	r3, r7, r1
 800df70:	0018      	movs	r0, r3
 800df72:	f005 fbff 	bl	8013774 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800df76:	4b16      	ldr	r3, [pc, #88]	; (800dfd0 <LmHandlerJoin+0x104>)
 800df78:	695b      	ldr	r3, [r3, #20]
 800df7a:	4a16      	ldr	r2, [pc, #88]	; (800dfd4 <LmHandlerJoin+0x108>)
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	0013      	movs	r3, r2
 800df80:	2200      	movs	r2, #0
 800df82:	2100      	movs	r1, #0
 800df84:	2002      	movs	r0, #2
 800df86:	f00d fe29 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800df8a:	f005 f9db 	bl	8013344 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800df8e:	211c      	movs	r1, #28
 800df90:	187b      	adds	r3, r7, r1
 800df92:	2201      	movs	r2, #1
 800df94:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800df96:	187b      	adds	r3, r7, r1
 800df98:	2201      	movs	r2, #1
 800df9a:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800df9c:	187b      	adds	r3, r7, r1
 800df9e:	0018      	movs	r0, r3
 800dfa0:	f005 fbe8 	bl	8013774 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800dfa4:	4b0c      	ldr	r3, [pc, #48]	; (800dfd8 <LmHandlerJoin+0x10c>)
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	4a05      	ldr	r2, [pc, #20]	; (800dfc0 <LmHandlerJoin+0xf4>)
 800dfaa:	0010      	movs	r0, r2
 800dfac:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800dfae:	4b05      	ldr	r3, [pc, #20]	; (800dfc4 <LmHandlerJoin+0xf8>)
 800dfb0:	785b      	ldrb	r3, [r3, #1]
 800dfb2:	0018      	movs	r0, r3
 800dfb4:	f000 f8e4 	bl	800e180 <LmHandlerRequestClass>
}
 800dfb8:	46c0      	nop			; (mov r8, r8)
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	b011      	add	sp, #68	; 0x44
 800dfbe:	bd90      	pop	{r4, r7, pc}
 800dfc0:	2000015c 	.word	0x2000015c
 800dfc4:	200003c4 	.word	0x200003c4
 800dfc8:	20000516 	.word	0x20000516
 800dfcc:	01000300 	.word	0x01000300
 800dfd0:	20000138 	.word	0x20000138
 800dfd4:	0801eb48 	.word	0x0801eb48
 800dfd8:	200003cc 	.word	0x200003cc

0800dfdc <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800dfdc:	b5b0      	push	{r4, r5, r7, lr}
 800dfde:	b08c      	sub	sp, #48	; 0x30
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	0008      	movs	r0, r1
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	0019      	movs	r1, r3
 800dfea:	230b      	movs	r3, #11
 800dfec:	18fb      	adds	r3, r7, r3
 800dfee:	1c02      	adds	r2, r0, #0
 800dff0:	701a      	strb	r2, [r3, #0]
 800dff2:	230a      	movs	r3, #10
 800dff4:	18fb      	adds	r3, r7, r3
 800dff6:	1c0a      	adds	r2, r1, #0
 800dff8:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800dffa:	232f      	movs	r3, #47	; 0x2f
 800dffc:	18fb      	adds	r3, r7, r3
 800dffe:	22ff      	movs	r2, #255	; 0xff
 800e000:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800e002:	f004 fd99 	bl	8012b38 <LoRaMacIsBusy>
 800e006:	1e03      	subs	r3, r0, #0
 800e008:	d002      	beq.n	800e010 <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800e00a:	2302      	movs	r3, #2
 800e00c:	425b      	negs	r3, r3
 800e00e:	e0a9      	b.n	800e164 <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e010:	f7ff ff3c 	bl	800de8c <LmHandlerJoinStatus>
 800e014:	0003      	movs	r3, r0
 800e016:	2b01      	cmp	r3, #1
 800e018:	d007      	beq.n	800e02a <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800e01a:	4b54      	ldr	r3, [pc, #336]	; (800e16c <LmHandlerSend+0x190>)
 800e01c:	789b      	ldrb	r3, [r3, #2]
 800e01e:	0018      	movs	r0, r3
 800e020:	f7ff ff54 	bl	800decc <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e024:	2303      	movs	r3, #3
 800e026:	425b      	negs	r3, r3
 800e028:	e09c      	b.n	800e164 <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800e02a:	4b51      	ldr	r3, [pc, #324]	; (800e170 <LmHandlerSend+0x194>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	4798      	blx	r3
 800e032:	1e03      	subs	r3, r0, #0
 800e034:	d00d      	beq.n	800e052 <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	781a      	ldrb	r2, [r3, #0]
 800e03a:	4b4d      	ldr	r3, [pc, #308]	; (800e170 <LmHandlerSend+0x194>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	429a      	cmp	r2, r3
 800e042:	d006      	beq.n	800e052 <LmHandlerSend+0x76>
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e04c:	2304      	movs	r3, #4
 800e04e:	425b      	negs	r3, r3
 800e050:	e088      	b.n	800e164 <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e052:	4b48      	ldr	r3, [pc, #288]	; (800e174 <LmHandlerSend+0x198>)
 800e054:	2203      	movs	r2, #3
 800e056:	569a      	ldrsb	r2, [r3, r2]
 800e058:	2418      	movs	r4, #24
 800e05a:	193b      	adds	r3, r7, r4
 800e05c:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	785b      	ldrb	r3, [r3, #1]
 800e062:	2214      	movs	r2, #20
 800e064:	18ba      	adds	r2, r7, r2
 800e066:	0011      	movs	r1, r2
 800e068:	0018      	movs	r0, r3
 800e06a:	f005 f979 	bl	8013360 <LoRaMacQueryTxPossible>
 800e06e:	1e03      	subs	r3, r0, #0
 800e070:	d00c      	beq.n	800e08c <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e072:	4b41      	ldr	r3, [pc, #260]	; (800e178 <LmHandlerSend+0x19c>)
 800e074:	2200      	movs	r2, #0
 800e076:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800e078:	193b      	adds	r3, r7, r4
 800e07a:	2200      	movs	r2, #0
 800e07c:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e07e:	193b      	adds	r3, r7, r4
 800e080:	2200      	movs	r2, #0
 800e082:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e084:	193b      	adds	r3, r7, r4
 800e086:	2200      	movs	r2, #0
 800e088:	819a      	strh	r2, [r3, #12]
 800e08a:	e021      	b.n	800e0d0 <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800e08c:	4b3a      	ldr	r3, [pc, #232]	; (800e178 <LmHandlerSend+0x19c>)
 800e08e:	200b      	movs	r0, #11
 800e090:	183a      	adds	r2, r7, r0
 800e092:	7812      	ldrb	r2, [r2, #0]
 800e094:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	781a      	ldrb	r2, [r3, #0]
 800e09a:	2118      	movs	r1, #24
 800e09c:	187b      	adds	r3, r7, r1
 800e09e:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	785b      	ldrb	r3, [r3, #1]
 800e0a4:	b29a      	uxth	r2, r3
 800e0a6:	187b      	adds	r3, r7, r1
 800e0a8:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	685a      	ldr	r2, [r3, #4]
 800e0ae:	187b      	adds	r3, r7, r1
 800e0b0:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800e0b2:	183b      	adds	r3, r7, r0
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d103      	bne.n	800e0c2 <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800e0ba:	187b      	adds	r3, r7, r1
 800e0bc:	2200      	movs	r2, #0
 800e0be:	701a      	strb	r2, [r3, #0]
 800e0c0:	e006      	b.n	800e0d0 <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800e0c2:	2118      	movs	r1, #24
 800e0c4:	187b      	adds	r3, r7, r1
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800e0ca:	187b      	adds	r3, r7, r1
 800e0cc:	2208      	movs	r2, #8
 800e0ce:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800e0d0:	4b29      	ldr	r3, [pc, #164]	; (800e178 <LmHandlerSend+0x19c>)
 800e0d2:	68fa      	ldr	r2, [r7, #12]
 800e0d4:	330c      	adds	r3, #12
 800e0d6:	ca03      	ldmia	r2!, {r0, r1}
 800e0d8:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e0da:	4b26      	ldr	r3, [pc, #152]	; (800e174 <LmHandlerSend+0x198>)
 800e0dc:	2203      	movs	r2, #3
 800e0de:	569a      	ldrsb	r2, [r3, r2]
 800e0e0:	4b25      	ldr	r3, [pc, #148]	; (800e178 <LmHandlerSend+0x19c>)
 800e0e2:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e0e4:	232e      	movs	r3, #46	; 0x2e
 800e0e6:	18fc      	adds	r4, r7, r3
 800e0e8:	230a      	movs	r3, #10
 800e0ea:	18fb      	adds	r3, r7, r3
 800e0ec:	781a      	ldrb	r2, [r3, #0]
 800e0ee:	2518      	movs	r5, #24
 800e0f0:	197b      	adds	r3, r7, r5
 800e0f2:	0011      	movs	r1, r2
 800e0f4:	0018      	movs	r0, r3
 800e0f6:	f006 f81b 	bl	8014130 <LoRaMacMcpsRequest>
 800e0fa:	0003      	movs	r3, r0
 800e0fc:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d003      	beq.n	800e10c <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e104:	197b      	adds	r3, r7, r5
 800e106:	691a      	ldr	r2, [r3, #16]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800e10c:	232e      	movs	r3, #46	; 0x2e
 800e10e:	18fb      	adds	r3, r7, r3
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b11      	cmp	r3, #17
 800e114:	d81d      	bhi.n	800e152 <LmHandlerSend+0x176>
 800e116:	009a      	lsls	r2, r3, #2
 800e118:	4b18      	ldr	r3, [pc, #96]	; (800e17c <LmHandlerSend+0x1a0>)
 800e11a:	18d3      	adds	r3, r2, r3
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e120:	232f      	movs	r3, #47	; 0x2f
 800e122:	18fb      	adds	r3, r7, r3
 800e124:	2200      	movs	r2, #0
 800e126:	701a      	strb	r2, [r3, #0]
    break;
 800e128:	e018      	b.n	800e15c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e12a:	232f      	movs	r3, #47	; 0x2f
 800e12c:	18fb      	adds	r3, r7, r3
 800e12e:	22fe      	movs	r2, #254	; 0xfe
 800e130:	701a      	strb	r2, [r3, #0]
    break;
 800e132:	e013      	b.n	800e15c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e134:	232f      	movs	r3, #47	; 0x2f
 800e136:	18fb      	adds	r3, r7, r3
 800e138:	22fd      	movs	r2, #253	; 0xfd
 800e13a:	701a      	strb	r2, [r3, #0]
    break;
 800e13c:	e00e      	b.n	800e15c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e13e:	232f      	movs	r3, #47	; 0x2f
 800e140:	18fb      	adds	r3, r7, r3
 800e142:	22fb      	movs	r2, #251	; 0xfb
 800e144:	701a      	strb	r2, [r3, #0]
    break;
 800e146:	e009      	b.n	800e15c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e148:	232f      	movs	r3, #47	; 0x2f
 800e14a:	18fb      	adds	r3, r7, r3
 800e14c:	22fa      	movs	r2, #250	; 0xfa
 800e14e:	701a      	strb	r2, [r3, #0]
    break;
 800e150:	e004      	b.n	800e15c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800e152:	232f      	movs	r3, #47	; 0x2f
 800e154:	18fb      	adds	r3, r7, r3
 800e156:	22ff      	movs	r2, #255	; 0xff
 800e158:	701a      	strb	r2, [r3, #0]
    break;
 800e15a:	46c0      	nop			; (mov r8, r8)
  }
      
  return lmhStatus;
 800e15c:	232f      	movs	r3, #47	; 0x2f
 800e15e:	18fb      	adds	r3, r7, r3
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	b25b      	sxtb	r3, r3
}
 800e164:	0018      	movs	r0, r3
 800e166:	46bd      	mov	sp, r7
 800e168:	b00c      	add	sp, #48	; 0x30
 800e16a:	bdb0      	pop	{r4, r5, r7, pc}
 800e16c:	2000015c 	.word	0x2000015c
 800e170:	200003b0 	.word	0x200003b0
 800e174:	200003c4 	.word	0x200003c4
 800e178:	2000040c 	.word	0x2000040c
 800e17c:	0801eb64 	.word	0x0801eb64

0800e180 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b08c      	sub	sp, #48	; 0x30
 800e184:	af00      	add	r7, sp, #0
 800e186:	0002      	movs	r2, r0
 800e188:	1dfb      	adds	r3, r7, #7
 800e18a:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e18c:	232f      	movs	r3, #47	; 0x2f
 800e18e:	18fb      	adds	r3, r7, r3
 800e190:	2200      	movs	r2, #0
 800e192:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e194:	f7ff fe7a 	bl	800de8c <LmHandlerJoinStatus>
 800e198:	0003      	movs	r3, r0
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d002      	beq.n	800e1a4 <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e19e:	2303      	movs	r3, #3
 800e1a0:	425b      	negs	r3, r3
 800e1a2:	e077      	b.n	800e294 <LmHandlerRequestClass+0x114>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e1a4:	2108      	movs	r1, #8
 800e1a6:	187b      	adds	r3, r7, r1
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e1ac:	187b      	adds	r3, r7, r1
 800e1ae:	0018      	movs	r0, r3
 800e1b0:	f005 f982 	bl	80134b8 <LoRaMacMibGetRequestConfirm>
 800e1b4:	1e03      	subs	r3, r0, #0
 800e1b6:	d002      	beq.n	800e1be <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	425b      	negs	r3, r3
 800e1bc:	e06a      	b.n	800e294 <LmHandlerRequestClass+0x114>
  }
  currentClass = mibReq.Param.Class;
 800e1be:	212e      	movs	r1, #46	; 0x2e
 800e1c0:	187b      	adds	r3, r7, r1
 800e1c2:	2208      	movs	r2, #8
 800e1c4:	18ba      	adds	r2, r7, r2
 800e1c6:	7912      	ldrb	r2, [r2, #4]
 800e1c8:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800e1ca:	187a      	adds	r2, r7, r1
 800e1cc:	1dfb      	adds	r3, r7, #7
 800e1ce:	7812      	ldrb	r2, [r2, #0]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d053      	beq.n	800e27e <LmHandlerRequestClass+0xfe>
  {
    switch (newClass)
 800e1d6:	1dfb      	adds	r3, r7, #7
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d02a      	beq.n	800e234 <LmHandlerRequestClass+0xb4>
 800e1de:	dc50      	bgt.n	800e282 <LmHandlerRequestClass+0x102>
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d002      	beq.n	800e1ea <LmHandlerRequestClass+0x6a>
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d020      	beq.n	800e22a <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800e1e8:	e04b      	b.n	800e282 <LmHandlerRequestClass+0x102>
        if (currentClass != CLASS_A)
 800e1ea:	232e      	movs	r3, #46	; 0x2e
 800e1ec:	18fb      	adds	r3, r7, r3
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d048      	beq.n	800e286 <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_A;
 800e1f4:	2108      	movs	r1, #8
 800e1f6:	187b      	adds	r3, r7, r1
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e1fc:	187b      	adds	r3, r7, r1
 800e1fe:	0018      	movs	r0, r3
 800e200:	f005 fab8 	bl	8013774 <LoRaMacMibSetRequestConfirm>
 800e204:	1e03      	subs	r3, r0, #0
 800e206:	d10b      	bne.n	800e220 <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800e208:	2000      	movs	r0, #0
 800e20a:	f000 fac9 	bl	800e7a0 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e20e:	4b23      	ldr	r3, [pc, #140]	; (800e29c <LmHandlerRequestClass+0x11c>)
 800e210:	699b      	ldr	r3, [r3, #24]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d037      	beq.n	800e286 <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800e216:	4b21      	ldr	r3, [pc, #132]	; (800e29c <LmHandlerRequestClass+0x11c>)
 800e218:	699b      	ldr	r3, [r3, #24]
 800e21a:	2000      	movs	r0, #0
 800e21c:	4798      	blx	r3
      break;
 800e21e:	e032      	b.n	800e286 <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e220:	232f      	movs	r3, #47	; 0x2f
 800e222:	18fb      	adds	r3, r7, r3
 800e224:	22ff      	movs	r2, #255	; 0xff
 800e226:	701a      	strb	r2, [r3, #0]
      break;
 800e228:	e02d      	b.n	800e286 <LmHandlerRequestClass+0x106>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800e22a:	232f      	movs	r3, #47	; 0x2f
 800e22c:	18fb      	adds	r3, r7, r3
 800e22e:	22ff      	movs	r2, #255	; 0xff
 800e230:	701a      	strb	r2, [r3, #0]
      break;
 800e232:	e02b      	b.n	800e28c <LmHandlerRequestClass+0x10c>
        if (currentClass != CLASS_A)
 800e234:	232e      	movs	r3, #46	; 0x2e
 800e236:	18fb      	adds	r3, r7, r3
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d004      	beq.n	800e248 <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800e23e:	232f      	movs	r3, #47	; 0x2f
 800e240:	18fb      	adds	r3, r7, r3
 800e242:	22ff      	movs	r2, #255	; 0xff
 800e244:	701a      	strb	r2, [r3, #0]
      break;
 800e246:	e020      	b.n	800e28a <LmHandlerRequestClass+0x10a>
          mibReq.Param.Class = CLASS_C;
 800e248:	2108      	movs	r1, #8
 800e24a:	187b      	adds	r3, r7, r1
 800e24c:	2202      	movs	r2, #2
 800e24e:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e250:	187b      	adds	r3, r7, r1
 800e252:	0018      	movs	r0, r3
 800e254:	f005 fa8e 	bl	8013774 <LoRaMacMibSetRequestConfirm>
 800e258:	1e03      	subs	r3, r0, #0
 800e25a:	d10b      	bne.n	800e274 <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800e25c:	2002      	movs	r0, #2
 800e25e:	f000 fa9f 	bl	800e7a0 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e262:	4b0e      	ldr	r3, [pc, #56]	; (800e29c <LmHandlerRequestClass+0x11c>)
 800e264:	699b      	ldr	r3, [r3, #24]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00f      	beq.n	800e28a <LmHandlerRequestClass+0x10a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800e26a:	4b0c      	ldr	r3, [pc, #48]	; (800e29c <LmHandlerRequestClass+0x11c>)
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	2002      	movs	r0, #2
 800e270:	4798      	blx	r3
      break;
 800e272:	e00a      	b.n	800e28a <LmHandlerRequestClass+0x10a>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e274:	232f      	movs	r3, #47	; 0x2f
 800e276:	18fb      	adds	r3, r7, r3
 800e278:	22ff      	movs	r2, #255	; 0xff
 800e27a:	701a      	strb	r2, [r3, #0]
      break;
 800e27c:	e005      	b.n	800e28a <LmHandlerRequestClass+0x10a>
    }
  }
 800e27e:	46c0      	nop			; (mov r8, r8)
 800e280:	e004      	b.n	800e28c <LmHandlerRequestClass+0x10c>
        break;
 800e282:	46c0      	nop			; (mov r8, r8)
 800e284:	e002      	b.n	800e28c <LmHandlerRequestClass+0x10c>
      break;
 800e286:	46c0      	nop			; (mov r8, r8)
 800e288:	e000      	b.n	800e28c <LmHandlerRequestClass+0x10c>
      break;
 800e28a:	46c0      	nop			; (mov r8, r8)
  return errorStatus;
 800e28c:	232f      	movs	r3, #47	; 0x2f
 800e28e:	18fb      	adds	r3, r7, r3
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	b25b      	sxtb	r3, r3
}
 800e294:	0018      	movs	r0, r3
 800e296:	46bd      	mov	sp, r7
 800e298:	b00c      	add	sp, #48	; 0x30
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	200003cc 	.word	0x200003cc

0800e2a0 <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800e2a0:	b590      	push	{r4, r7, lr}
 800e2a2:	b085      	sub	sp, #20
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	0002      	movs	r2, r0
 800e2a8:	6039      	str	r1, [r7, #0]
 800e2aa:	1dfb      	adds	r3, r7, #7
 800e2ac:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	60fb      	str	r3, [r7, #12]
  switch (id)
 800e2b2:	1dfb      	adds	r3, r7, #7
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d104      	bne.n	800e2c4 <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800e2ba:	f000 fa8b 	bl	800e7d4 <LmphCompliancePackageFactory>
 800e2be:	0003      	movs	r3, r0
 800e2c0:	60fb      	str	r3, [r7, #12]
      break;
 800e2c2:	e000      	b.n	800e2c6 <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800e2c4:	46c0      	nop			; (mov r8, r8)
  }

  if (package != NULL)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d028      	beq.n	800e31e <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800e2cc:	1dfb      	adds	r3, r7, #7
 800e2ce:	781a      	ldrb	r2, [r3, #0]
 800e2d0:	4b16      	ldr	r3, [pc, #88]	; (800e32c <LmHandlerPackageRegister+0x8c>)
 800e2d2:	0092      	lsls	r2, r2, #2
 800e2d4:	68f9      	ldr	r1, [r7, #12]
 800e2d6:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e2d8:	1dfb      	adds	r3, r7, #7
 800e2da:	781a      	ldrb	r2, [r3, #0]
 800e2dc:	4b13      	ldr	r3, [pc, #76]	; (800e32c <LmHandlerPackageRegister+0x8c>)
 800e2de:	0092      	lsls	r2, r2, #2
 800e2e0:	58d3      	ldr	r3, [r2, r3]
 800e2e2:	4a13      	ldr	r2, [pc, #76]	; (800e330 <LmHandlerPackageRegister+0x90>)
 800e2e4:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800e2e6:	1dfb      	adds	r3, r7, #7
 800e2e8:	781a      	ldrb	r2, [r3, #0]
 800e2ea:	4b10      	ldr	r3, [pc, #64]	; (800e32c <LmHandlerPackageRegister+0x8c>)
 800e2ec:	0092      	lsls	r2, r2, #2
 800e2ee:	58d3      	ldr	r3, [r2, r3]
 800e2f0:	4a10      	ldr	r2, [pc, #64]	; (800e334 <LmHandlerPackageRegister+0x94>)
 800e2f2:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e2f4:	1dfb      	adds	r3, r7, #7
 800e2f6:	781a      	ldrb	r2, [r3, #0]
 800e2f8:	4b0c      	ldr	r3, [pc, #48]	; (800e32c <LmHandlerPackageRegister+0x8c>)
 800e2fa:	0092      	lsls	r2, r2, #2
 800e2fc:	58d3      	ldr	r3, [r2, r3]
 800e2fe:	4a0e      	ldr	r2, [pc, #56]	; (800e338 <LmHandlerPackageRegister+0x98>)
 800e300:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800e302:	1dfb      	adds	r3, r7, #7
 800e304:	781a      	ldrb	r2, [r3, #0]
 800e306:	4b09      	ldr	r3, [pc, #36]	; (800e32c <LmHandlerPackageRegister+0x8c>)
 800e308:	0092      	lsls	r2, r2, #2
 800e30a:	58d3      	ldr	r3, [r2, r3]
 800e30c:	685c      	ldr	r4, [r3, #4]
 800e30e:	4b0b      	ldr	r3, [pc, #44]	; (800e33c <LmHandlerPackageRegister+0x9c>)
 800e310:	6859      	ldr	r1, [r3, #4]
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	22f2      	movs	r2, #242	; 0xf2
 800e316:	0018      	movs	r0, r3
 800e318:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800e31a:	2300      	movs	r3, #0
 800e31c:	e001      	b.n	800e322 <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	425b      	negs	r3, r3
  }
}
 800e322:	0018      	movs	r0, r3
 800e324:	46bd      	mov	sp, r7
 800e326:	b005      	add	sp, #20
 800e328:	bd90      	pop	{r4, r7, pc}
 800e32a:	46c0      	nop			; (mov r8, r8)
 800e32c:	200003b0 	.word	0x200003b0
 800e330:	0800decd 	.word	0x0800decd
 800e334:	0800dfdd 	.word	0x0800dfdd
 800e338:	0800e3d9 	.word	0x0800e3d9
 800e33c:	20000170 	.word	0x20000170

0800e340 <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b08c      	sub	sp, #48	; 0x30
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d102      	bne.n	800e354 <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e34e:	2301      	movs	r3, #1
 800e350:	425b      	negs	r3, r3
 800e352:	e012      	b.n	800e37a <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e354:	210c      	movs	r1, #12
 800e356:	187b      	adds	r3, r7, r1
 800e358:	2200      	movs	r2, #0
 800e35a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e35c:	187b      	adds	r3, r7, r1
 800e35e:	0018      	movs	r0, r3
 800e360:	f005 f8aa 	bl	80134b8 <LoRaMacMibGetRequestConfirm>
 800e364:	1e03      	subs	r3, r0, #0
 800e366:	d002      	beq.n	800e36e <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	425b      	negs	r3, r3
 800e36c:	e005      	b.n	800e37a <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800e36e:	230c      	movs	r3, #12
 800e370:	18fb      	adds	r3, r7, r3
 800e372:	791a      	ldrb	r2, [r3, #4]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	0018      	movs	r0, r3
 800e37c:	46bd      	mov	sp, r7
 800e37e:	b00c      	add	sp, #48	; 0x30
 800e380:	bd80      	pop	{r7, pc}
	...

0800e384 <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08c      	sub	sp, #48	; 0x30
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d102      	bne.n	800e398 <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e392:	2301      	movs	r3, #1
 800e394:	425b      	negs	r3, r3
 800e396:	e018      	b.n	800e3ca <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800e398:	210c      	movs	r1, #12
 800e39a:	187b      	adds	r3, r7, r1
 800e39c:	221f      	movs	r2, #31
 800e39e:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800e3a0:	187b      	adds	r3, r7, r1
 800e3a2:	0018      	movs	r0, r3
 800e3a4:	f005 f888 	bl	80134b8 <LoRaMacMibGetRequestConfirm>
 800e3a8:	1e03      	subs	r3, r0, #0
 800e3aa:	d002      	beq.n	800e3b2 <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	425b      	negs	r3, r3
 800e3b0:	e00b      	b.n	800e3ca <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800e3b2:	210c      	movs	r1, #12
 800e3b4:	187b      	adds	r3, r7, r1
 800e3b6:	2204      	movs	r2, #4
 800e3b8:	569a      	ldrsb	r2, [r3, r2]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800e3be:	187b      	adds	r3, r7, r1
 800e3c0:	2204      	movs	r2, #4
 800e3c2:	569a      	ldrsb	r2, [r3, r2]
 800e3c4:	4b03      	ldr	r3, [pc, #12]	; (800e3d4 <LmHandlerGetTxDatarate+0x50>)
 800e3c6:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	0018      	movs	r0, r3
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	b00c      	add	sp, #48	; 0x30
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	46c0      	nop			; (mov r8, r8)
 800e3d4:	200003c4 	.word	0x200003c4

0800e3d8 <LmHandlerDeviceTimeReq>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800e3d8:	b5b0      	push	{r4, r5, r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800e3de:	003b      	movs	r3, r7
 800e3e0:	220a      	movs	r2, #10
 800e3e2:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800e3e4:	2517      	movs	r5, #23
 800e3e6:	197c      	adds	r4, r7, r5
 800e3e8:	003b      	movs	r3, r7
 800e3ea:	0018      	movs	r0, r3
 800e3ec:	f005 fd48 	bl	8013e80 <LoRaMacMlmeRequest>
 800e3f0:	0003      	movs	r3, r0
 800e3f2:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e3f4:	197b      	adds	r3, r7, r5
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d101      	bne.n	800e400 <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	e001      	b.n	800e404 <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e400:	2301      	movs	r3, #1
 800e402:	425b      	negs	r3, r3
  }
}
 800e404:	0018      	movs	r0, r3
 800e406:	46bd      	mov	sp, r7
 800e408:	b006      	add	sp, #24
 800e40a:	bdb0      	pop	{r4, r5, r7, pc}

0800e40c <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1; // Здесь выставляется будет ли подтверждение или нет
 800e414:	4b16      	ldr	r3, [pc, #88]	; (800e470 <McpsConfirm+0x64>)
 800e416:	2201      	movs	r2, #1
 800e418:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	785a      	ldrb	r2, [r3, #1]
 800e41e:	4b14      	ldr	r3, [pc, #80]	; (800e470 <McpsConfirm+0x64>)
 800e420:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	789b      	ldrb	r3, [r3, #2]
 800e426:	b25a      	sxtb	r2, r3
 800e428:	4b11      	ldr	r3, [pc, #68]	; (800e470 <McpsConfirm+0x64>)
 800e42a:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	68da      	ldr	r2, [r3, #12]
 800e430:	4b0f      	ldr	r3, [pc, #60]	; (800e470 <McpsConfirm+0x64>)
 800e432:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2203      	movs	r2, #3
 800e438:	569a      	ldrsb	r2, [r3, r2]
 800e43a:	4b0d      	ldr	r3, [pc, #52]	; (800e470 <McpsConfirm+0x64>)
 800e43c:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	691b      	ldr	r3, [r3, #16]
 800e442:	b2da      	uxtb	r2, r3
 800e444:	4b0a      	ldr	r3, [pc, #40]	; (800e470 <McpsConfirm+0x64>)
 800e446:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	791b      	ldrb	r3, [r3, #4]
 800e44c:	001a      	movs	r2, r3
 800e44e:	4b08      	ldr	r3, [pc, #32]	; (800e470 <McpsConfirm+0x64>)
 800e450:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800e452:	4b08      	ldr	r3, [pc, #32]	; (800e474 <McpsConfirm+0x68>)
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	4a06      	ldr	r2, [pc, #24]	; (800e470 <McpsConfirm+0x64>)
 800e458:	0010      	movs	r0, r2
 800e45a:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	0019      	movs	r1, r3
 800e460:	2000      	movs	r0, #0
 800e462:	f000 f907 	bl	800e674 <LmHandlerPackagesNotify>
}
 800e466:	46c0      	nop			; (mov r8, r8)
 800e468:	46bd      	mov	sp, r7
 800e46a:	b002      	add	sp, #8
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	46c0      	nop			; (mov r8, r8)
 800e470:	2000040c 	.word	0x2000040c
 800e474:	200003cc 	.word	0x200003cc

0800e478 <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800e478:	b590      	push	{r4, r7, lr}
 800e47a:	b089      	sub	sp, #36	; 0x24
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800e480:	4b36      	ldr	r3, [pc, #216]	; (800e55c <McpsIndication+0xe4>)
 800e482:	2201      	movs	r2, #1
 800e484:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	785a      	ldrb	r2, [r3, #1]
 800e48a:	4b34      	ldr	r3, [pc, #208]	; (800e55c <McpsIndication+0xe4>)
 800e48c:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800e48e:	4b33      	ldr	r3, [pc, #204]	; (800e55c <McpsIndication+0xe4>)
 800e490:	785b      	ldrb	r3, [r3, #1]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d15e      	bne.n	800e554 <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	7b1b      	ldrb	r3, [r3, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d02c      	beq.n	800e4f8 <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	791b      	ldrb	r3, [r3, #4]
 800e4a2:	b25a      	sxtb	r2, r3
 800e4a4:	4b2d      	ldr	r3, [pc, #180]	; (800e55c <McpsIndication+0xe4>)
 800e4a6:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	220e      	movs	r2, #14
 800e4ac:	5e9b      	ldrsh	r3, [r3, r2]
 800e4ae:	b25a      	sxtb	r2, r3
 800e4b0:	4b2a      	ldr	r3, [pc, #168]	; (800e55c <McpsIndication+0xe4>)
 800e4b2:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2210      	movs	r2, #16
 800e4b8:	569a      	ldrsb	r2, [r3, r2]
 800e4ba:	4b28      	ldr	r3, [pc, #160]	; (800e55c <McpsIndication+0xe4>)
 800e4bc:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	695a      	ldr	r2, [r3, #20]
 800e4c2:	4b26      	ldr	r3, [pc, #152]	; (800e55c <McpsIndication+0xe4>)
 800e4c4:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	7c5b      	ldrb	r3, [r3, #17]
 800e4ca:	b25a      	sxtb	r2, r3
 800e4cc:	4b23      	ldr	r3, [pc, #140]	; (800e55c <McpsIndication+0xe4>)
 800e4ce:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	78da      	ldrb	r2, [r3, #3]
 800e4d4:	2118      	movs	r1, #24
 800e4d6:	187b      	adds	r3, r7, r1
 800e4d8:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	7b1a      	ldrb	r2, [r3, #12]
 800e4de:	187b      	adds	r3, r7, r1
 800e4e0:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	689a      	ldr	r2, [r3, #8]
 800e4e6:	0008      	movs	r0, r1
 800e4e8:	187b      	adds	r3, r7, r1
 800e4ea:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800e4ec:	4b1c      	ldr	r3, [pc, #112]	; (800e560 <McpsIndication+0xe8>)
 800e4ee:	695b      	ldr	r3, [r3, #20]
 800e4f0:	491a      	ldr	r1, [pc, #104]	; (800e55c <McpsIndication+0xe4>)
 800e4f2:	183a      	adds	r2, r7, r0
 800e4f4:	0010      	movs	r0, r2
 800e4f6:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	7f1b      	ldrb	r3, [r3, #28]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d006      	beq.n	800e50e <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800e500:	4b17      	ldr	r3, [pc, #92]	; (800e560 <McpsIndication+0xe8>)
 800e502:	69db      	ldr	r3, [r3, #28]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d002      	beq.n	800e50e <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800e508:	4b15      	ldr	r3, [pc, #84]	; (800e560 <McpsIndication+0xe8>)
 800e50a:	69db      	ldr	r3, [r3, #28]
 800e50c:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	0019      	movs	r1, r3
 800e512:	2001      	movs	r0, #1
 800e514:	f000 f8ae 	bl	800e674 <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800e518:	2417      	movs	r4, #23
 800e51a:	193b      	adds	r3, r7, r4
 800e51c:	0018      	movs	r0, r3
 800e51e:	f7ff ff0f 	bl	800e340 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	795b      	ldrb	r3, [r3, #5]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d115      	bne.n	800e556 <McpsIndication+0xde>
 800e52a:	193b      	adds	r3, r7, r4
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d111      	bne.n	800e556 <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800e532:	210c      	movs	r1, #12
 800e534:	187b      	adds	r3, r7, r1
 800e536:	2200      	movs	r2, #0
 800e538:	701a      	strb	r2, [r3, #0]
 800e53a:	187b      	adds	r3, r7, r1
 800e53c:	2200      	movs	r2, #0
 800e53e:	705a      	strb	r2, [r3, #1]
 800e540:	187b      	adds	r3, r7, r1
 800e542:	2200      	movs	r2, #0
 800e544:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800e546:	1878      	adds	r0, r7, r1
 800e548:	2301      	movs	r3, #1
 800e54a:	2200      	movs	r2, #0
 800e54c:	2100      	movs	r1, #0
 800e54e:	f7ff fd45 	bl	800dfdc <LmHandlerSend>
 800e552:	e000      	b.n	800e556 <McpsIndication+0xde>
    return;
 800e554:	46c0      	nop			; (mov r8, r8)
  }
}
 800e556:	46bd      	mov	sp, r7
 800e558:	b009      	add	sp, #36	; 0x24
 800e55a:	bd90      	pop	{r4, r7, pc}
 800e55c:	20000160 	.word	0x20000160
 800e560:	200003cc 	.word	0x200003cc

0800e564 <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800e564:	b590      	push	{r4, r7, lr}
 800e566:	b08d      	sub	sp, #52	; 0x34
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800e56c:	4b22      	ldr	r3, [pc, #136]	; (800e5f8 <MlmeConfirm+0x94>)
 800e56e:	2200      	movs	r2, #0
 800e570:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	785a      	ldrb	r2, [r3, #1]
 800e576:	4b20      	ldr	r3, [pc, #128]	; (800e5f8 <MlmeConfirm+0x94>)
 800e578:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	0019      	movs	r1, r3
 800e57e:	2002      	movs	r0, #2
 800e580:	f000 f878 	bl	800e674 <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	2b0a      	cmp	r3, #10
 800e58a:	d02c      	beq.n	800e5e6 <MlmeConfirm+0x82>
 800e58c:	dc2d      	bgt.n	800e5ea <MlmeConfirm+0x86>
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d002      	beq.n	800e598 <MlmeConfirm+0x34>
 800e592:	2b04      	cmp	r3, #4
 800e594:	d02b      	beq.n	800e5ee <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e596:	e028      	b.n	800e5ea <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800e598:	210c      	movs	r1, #12
 800e59a:	187b      	adds	r3, r7, r1
 800e59c:	2206      	movs	r2, #6
 800e59e:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800e5a0:	000c      	movs	r4, r1
 800e5a2:	187b      	adds	r3, r7, r1
 800e5a4:	0018      	movs	r0, r3
 800e5a6:	f004 ff87 	bl	80134b8 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e5aa:	193b      	adds	r3, r7, r4
 800e5ac:	685a      	ldr	r2, [r3, #4]
 800e5ae:	4b13      	ldr	r3, [pc, #76]	; (800e5fc <MlmeConfirm+0x98>)
 800e5b0:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800e5b2:	4b13      	ldr	r3, [pc, #76]	; (800e600 <MlmeConfirm+0x9c>)
 800e5b4:	0018      	movs	r0, r3
 800e5b6:	f7ff fee5 	bl	800e384 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	785b      	ldrb	r3, [r3, #1]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d108      	bne.n	800e5d4 <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e5c2:	4b0f      	ldr	r3, [pc, #60]	; (800e600 <MlmeConfirm+0x9c>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e5c8:	4b0e      	ldr	r3, [pc, #56]	; (800e604 <MlmeConfirm+0xa0>)
 800e5ca:	785b      	ldrb	r3, [r3, #1]
 800e5cc:	0018      	movs	r0, r3
 800e5ce:	f7ff fdd7 	bl	800e180 <LmHandlerRequestClass>
 800e5d2:	e002      	b.n	800e5da <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e5d4:	4b0a      	ldr	r3, [pc, #40]	; (800e600 <MlmeConfirm+0x9c>)
 800e5d6:	22ff      	movs	r2, #255	; 0xff
 800e5d8:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e5da:	4b0b      	ldr	r3, [pc, #44]	; (800e608 <MlmeConfirm+0xa4>)
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	4a08      	ldr	r2, [pc, #32]	; (800e600 <MlmeConfirm+0x9c>)
 800e5e0:	0010      	movs	r0, r2
 800e5e2:	4798      	blx	r3
    break;
 800e5e4:	e004      	b.n	800e5f0 <MlmeConfirm+0x8c>
    break;
 800e5e6:	46c0      	nop			; (mov r8, r8)
 800e5e8:	e002      	b.n	800e5f0 <MlmeConfirm+0x8c>
      break;
 800e5ea:	46c0      	nop			; (mov r8, r8)
 800e5ec:	e000      	b.n	800e5f0 <MlmeConfirm+0x8c>
    break;
 800e5ee:	46c0      	nop			; (mov r8, r8)
  }
}
 800e5f0:	46c0      	nop			; (mov r8, r8)
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	b00d      	add	sp, #52	; 0x34
 800e5f6:	bd90      	pop	{r4, r7, pc}
 800e5f8:	2000040c 	.word	0x2000040c
 800e5fc:	20000138 	.word	0x20000138
 800e600:	2000015c 	.word	0x2000015c
 800e604:	200003c4 	.word	0x200003c4
 800e608:	200003cc 	.word	0x200003cc

0800e60c <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800e614:	4b05      	ldr	r3, [pc, #20]	; (800e62c <MlmeIndication+0x20>)
 800e616:	2200      	movs	r2, #0
 800e618:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	785a      	ldrb	r2, [r3, #1]
 800e61e:	4b03      	ldr	r3, [pc, #12]	; (800e62c <MlmeIndication+0x20>)
 800e620:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e622:	46c0      	nop			; (mov r8, r8)
  }
}
 800e624:	46c0      	nop			; (mov r8, r8)
 800e626:	46bd      	mov	sp, r7
 800e628:	b002      	add	sp, #8
 800e62a:	bd80      	pop	{r7, pc}
 800e62c:	20000160 	.word	0x20000160

0800e630 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	0002      	movs	r2, r0
 800e638:	1dfb      	adds	r3, r7, #7
 800e63a:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800e63c:	1dfb      	adds	r3, r7, #7
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	2b04      	cmp	r3, #4
 800e642:	d810      	bhi.n	800e666 <LmHandlerPackageIsInitialized+0x36>
 800e644:	1dfb      	adds	r3, r7, #7
 800e646:	781a      	ldrb	r2, [r3, #0]
 800e648:	4b09      	ldr	r3, [pc, #36]	; (800e670 <LmHandlerPackageIsInitialized+0x40>)
 800e64a:	0092      	lsls	r2, r2, #2
 800e64c:	58d3      	ldr	r3, [r2, r3]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d008      	beq.n	800e666 <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800e654:	1dfb      	adds	r3, r7, #7
 800e656:	781a      	ldrb	r2, [r3, #0]
 800e658:	4b05      	ldr	r3, [pc, #20]	; (800e670 <LmHandlerPackageIsInitialized+0x40>)
 800e65a:	0092      	lsls	r2, r2, #2
 800e65c:	58d3      	ldr	r3, [r2, r3]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	4798      	blx	r3
 800e662:	0003      	movs	r3, r0
 800e664:	e000      	b.n	800e668 <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800e666:	2300      	movs	r3, #0
  }
}
 800e668:	0018      	movs	r0, r3
 800e66a:	46bd      	mov	sp, r7
 800e66c:	b002      	add	sp, #8
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	200003b0 	.word	0x200003b0

0800e674 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	0002      	movs	r2, r0
 800e67c:	6039      	str	r1, [r7, #0]
 800e67e:	1dfb      	adds	r3, r7, #7
 800e680:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e682:	230f      	movs	r3, #15
 800e684:	18fb      	adds	r3, r7, r3
 800e686:	2200      	movs	r2, #0
 800e688:	701a      	strb	r2, [r3, #0]
 800e68a:	e07b      	b.n	800e784 <LmHandlerPackagesNotify+0x110>
  {
    if (LmHandlerPackages[i] != NULL)
 800e68c:	230f      	movs	r3, #15
 800e68e:	18fb      	adds	r3, r7, r3
 800e690:	2200      	movs	r2, #0
 800e692:	569a      	ldrsb	r2, [r3, r2]
 800e694:	4b41      	ldr	r3, [pc, #260]	; (800e79c <LmHandlerPackagesNotify+0x128>)
 800e696:	0092      	lsls	r2, r2, #2
 800e698:	58d3      	ldr	r3, [r2, r3]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d100      	bne.n	800e6a0 <LmHandlerPackagesNotify+0x2c>
 800e69e:	e05f      	b.n	800e760 <LmHandlerPackagesNotify+0xec>
    {
      switch (notifyType)
 800e6a0:	1dfb      	adds	r3, r7, #7
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	2b02      	cmp	r3, #2
 800e6a6:	d046      	beq.n	800e736 <LmHandlerPackagesNotify+0xc2>
 800e6a8:	dc5c      	bgt.n	800e764 <LmHandlerPackagesNotify+0xf0>
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d002      	beq.n	800e6b4 <LmHandlerPackagesNotify+0x40>
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d015      	beq.n	800e6de <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800e6b2:	e057      	b.n	800e764 <LmHandlerPackagesNotify+0xf0>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800e6b4:	210f      	movs	r1, #15
 800e6b6:	187b      	adds	r3, r7, r1
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	569a      	ldrsb	r2, [r3, r2]
 800e6bc:	4b37      	ldr	r3, [pc, #220]	; (800e79c <LmHandlerPackagesNotify+0x128>)
 800e6be:	0092      	lsls	r2, r2, #2
 800e6c0:	58d3      	ldr	r3, [r2, r3]
 800e6c2:	695b      	ldr	r3, [r3, #20]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d04f      	beq.n	800e768 <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800e6c8:	187b      	adds	r3, r7, r1
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	569a      	ldrsb	r2, [r3, r2]
 800e6ce:	4b33      	ldr	r3, [pc, #204]	; (800e79c <LmHandlerPackagesNotify+0x128>)
 800e6d0:	0092      	lsls	r2, r2, #2
 800e6d2:	58d3      	ldr	r3, [r2, r3]
 800e6d4:	695b      	ldr	r3, [r3, #20]
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	0010      	movs	r0, r2
 800e6da:	4798      	blx	r3
          break;
 800e6dc:	e044      	b.n	800e768 <LmHandlerPackagesNotify+0xf4>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e6de:	210f      	movs	r1, #15
 800e6e0:	187b      	adds	r3, r7, r1
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	569a      	ldrsb	r2, [r3, r2]
 800e6e6:	4b2d      	ldr	r3, [pc, #180]	; (800e79c <LmHandlerPackagesNotify+0x128>)
 800e6e8:	0092      	lsls	r2, r2, #2
 800e6ea:	58d3      	ldr	r3, [r2, r3]
 800e6ec:	699b      	ldr	r3, [r3, #24]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d03c      	beq.n	800e76c <LmHandlerPackagesNotify+0xf8>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e6f2:	187b      	adds	r3, r7, r1
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	569a      	ldrsb	r2, [r3, r2]
 800e6f8:	4b28      	ldr	r3, [pc, #160]	; (800e79c <LmHandlerPackagesNotify+0x128>)
 800e6fa:	0092      	lsls	r2, r2, #2
 800e6fc:	58d3      	ldr	r3, [r2, r3]
 800e6fe:	781a      	ldrb	r2, [r3, #0]
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e704:	429a      	cmp	r2, r3
 800e706:	d00a      	beq.n	800e71e <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e708:	187b      	adds	r3, r7, r1
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	b25b      	sxtb	r3, r3
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d12c      	bne.n	800e76c <LmHandlerPackagesNotify+0xf8>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800e712:	4b22      	ldr	r3, [pc, #136]	; (800e79c <LmHandlerPackagesNotify+0x128>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	4798      	blx	r3
 800e71a:	1e03      	subs	r3, r0, #0
 800e71c:	d026      	beq.n	800e76c <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800e71e:	230f      	movs	r3, #15
 800e720:	18fb      	adds	r3, r7, r3
 800e722:	2200      	movs	r2, #0
 800e724:	569a      	ldrsb	r2, [r3, r2]
 800e726:	4b1d      	ldr	r3, [pc, #116]	; (800e79c <LmHandlerPackagesNotify+0x128>)
 800e728:	0092      	lsls	r2, r2, #2
 800e72a:	58d3      	ldr	r3, [r2, r3]
 800e72c:	699b      	ldr	r3, [r3, #24]
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	0010      	movs	r0, r2
 800e732:	4798      	blx	r3
          break;
 800e734:	e01a      	b.n	800e76c <LmHandlerPackagesNotify+0xf8>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800e736:	210f      	movs	r1, #15
 800e738:	187b      	adds	r3, r7, r1
 800e73a:	2200      	movs	r2, #0
 800e73c:	569a      	ldrsb	r2, [r3, r2]
 800e73e:	4b17      	ldr	r3, [pc, #92]	; (800e79c <LmHandlerPackagesNotify+0x128>)
 800e740:	0092      	lsls	r2, r2, #2
 800e742:	58d3      	ldr	r3, [r2, r3]
 800e744:	69db      	ldr	r3, [r3, #28]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d012      	beq.n	800e770 <LmHandlerPackagesNotify+0xfc>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800e74a:	187b      	adds	r3, r7, r1
 800e74c:	2200      	movs	r2, #0
 800e74e:	569a      	ldrsb	r2, [r3, r2]
 800e750:	4b12      	ldr	r3, [pc, #72]	; (800e79c <LmHandlerPackagesNotify+0x128>)
 800e752:	0092      	lsls	r2, r2, #2
 800e754:	58d3      	ldr	r3, [r2, r3]
 800e756:	69db      	ldr	r3, [r3, #28]
 800e758:	683a      	ldr	r2, [r7, #0]
 800e75a:	0010      	movs	r0, r2
 800e75c:	4798      	blx	r3
          break;
 800e75e:	e007      	b.n	800e770 <LmHandlerPackagesNotify+0xfc>
      }
    }
 800e760:	46c0      	nop			; (mov r8, r8)
 800e762:	e006      	b.n	800e772 <LmHandlerPackagesNotify+0xfe>
          break;
 800e764:	46c0      	nop			; (mov r8, r8)
 800e766:	e004      	b.n	800e772 <LmHandlerPackagesNotify+0xfe>
          break;
 800e768:	46c0      	nop			; (mov r8, r8)
 800e76a:	e002      	b.n	800e772 <LmHandlerPackagesNotify+0xfe>
          break;
 800e76c:	46c0      	nop			; (mov r8, r8)
 800e76e:	e000      	b.n	800e772 <LmHandlerPackagesNotify+0xfe>
          break;
 800e770:	46c0      	nop			; (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e772:	210f      	movs	r1, #15
 800e774:	187b      	adds	r3, r7, r1
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	b25b      	sxtb	r3, r3
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	3301      	adds	r3, #1
 800e77e:	b2da      	uxtb	r2, r3
 800e780:	187b      	adds	r3, r7, r1
 800e782:	701a      	strb	r2, [r3, #0]
 800e784:	230f      	movs	r3, #15
 800e786:	18fb      	adds	r3, r7, r3
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	b25b      	sxtb	r3, r3
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	dc00      	bgt.n	800e792 <LmHandlerPackagesNotify+0x11e>
 800e790:	e77c      	b.n	800e68c <LmHandlerPackagesNotify+0x18>
  }
}
 800e792:	46c0      	nop			; (mov r8, r8)
 800e794:	46c0      	nop			; (mov r8, r8)
 800e796:	46bd      	mov	sp, r7
 800e798:	b004      	add	sp, #16
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	200003b0 	.word	0x200003b0

0800e7a0 <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af02      	add	r7, sp, #8
 800e7a6:	0002      	movs	r2, r0
 800e7a8:	1dfb      	adds	r3, r7, #7
 800e7aa:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e7ac:	1dfb      	adds	r3, r7, #7
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	4a06      	ldr	r2, [pc, #24]	; (800e7cc <DisplayClassUpdate+0x2c>)
 800e7b2:	5cd3      	ldrb	r3, [r2, r3]
 800e7b4:	001a      	movs	r2, r3
 800e7b6:	4b06      	ldr	r3, [pc, #24]	; (800e7d0 <DisplayClassUpdate+0x30>)
 800e7b8:	9200      	str	r2, [sp, #0]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	2100      	movs	r1, #0
 800e7be:	2002      	movs	r0, #2
 800e7c0:	f00d fa0c 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
}
 800e7c4:	46c0      	nop			; (mov r8, r8)
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	b002      	add	sp, #8
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	0801ebc8 	.word	0x0801ebc8
 800e7d0:	0801ebac 	.word	0x0801ebac

0800e7d4 <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800e7d8:	4b01      	ldr	r3, [pc, #4]	; (800e7e0 <LmphCompliancePackageFactory+0xc>)
}
 800e7da:	0018      	movs	r0, r3
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	20000178 	.word	0x20000178

0800e7e4 <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	1dfb      	adds	r3, r7, #7
 800e7f0:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d010      	beq.n	800e81a <LmhpComplianceInit+0x36>
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00d      	beq.n	800e81a <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800e7fe:	4b0c      	ldr	r3, [pc, #48]	; (800e830 <LmhpComplianceInit+0x4c>)
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800e804:	4b0b      	ldr	r3, [pc, #44]	; (800e834 <LmhpComplianceInit+0x50>)
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e80a:	4b0a      	ldr	r3, [pc, #40]	; (800e834 <LmhpComplianceInit+0x50>)
 800e80c:	1dfa      	adds	r2, r7, #7
 800e80e:	7812      	ldrb	r2, [r2, #0]
 800e810:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800e812:	4b08      	ldr	r3, [pc, #32]	; (800e834 <LmhpComplianceInit+0x50>)
 800e814:	2201      	movs	r2, #1
 800e816:	701a      	strb	r2, [r3, #0]
 800e818:	e006      	b.n	800e828 <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800e81a:	4b05      	ldr	r3, [pc, #20]	; (800e830 <LmhpComplianceInit+0x4c>)
 800e81c:	2200      	movs	r2, #0
 800e81e:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800e820:	4b04      	ldr	r3, [pc, #16]	; (800e834 <LmhpComplianceInit+0x50>)
 800e822:	2200      	movs	r2, #0
 800e824:	701a      	strb	r2, [r3, #0]
  }
}
 800e826:	46c0      	nop			; (mov r8, r8)
 800e828:	46c0      	nop			; (mov r8, r8)
 800e82a:	46bd      	mov	sp, r7
 800e82c:	b004      	add	sp, #16
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	20000544 	.word	0x20000544
 800e834:	20000530 	.word	0x20000530

0800e838 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800e83c:	4b02      	ldr	r3, [pc, #8]	; (800e848 <LmhpComplianceIsInitialized+0x10>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
}
 800e840:	0018      	movs	r0, r3
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	46c0      	nop			; (mov r8, r8)
 800e848:	20000530 	.word	0x20000530

0800e84c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800e850:	4b06      	ldr	r3, [pc, #24]	; (800e86c <LmhpComplianceIsRunning+0x20>)
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	2201      	movs	r2, #1
 800e856:	4053      	eors	r3, r2
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800e85e:	2300      	movs	r3, #0
 800e860:	e001      	b.n	800e866 <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800e862:	4b02      	ldr	r3, [pc, #8]	; (800e86c <LmhpComplianceIsRunning+0x20>)
 800e864:	785b      	ldrb	r3, [r3, #1]
}
 800e866:	0018      	movs	r0, r3
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	20000530 	.word	0x20000530

0800e870 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800e878:	4b0e      	ldr	r3, [pc, #56]	; (800e8b4 <LmhpComplianceOnMcpsConfirm+0x44>)
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	2201      	movs	r2, #1
 800e87e:	4053      	eors	r3, r2
 800e880:	b2db      	uxtb	r3, r3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d112      	bne.n	800e8ac <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800e886:	4b0b      	ldr	r3, [pc, #44]	; (800e8b4 <LmhpComplianceOnMcpsConfirm+0x44>)
 800e888:	785b      	ldrb	r3, [r3, #1]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d00f      	beq.n	800e8ae <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800e892:	2b01      	cmp	r3, #1
 800e894:	d10b      	bne.n	800e8ae <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d007      	beq.n	800e8ae <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800e89e:	4b05      	ldr	r3, [pc, #20]	; (800e8b4 <LmhpComplianceOnMcpsConfirm+0x44>)
 800e8a0:	899b      	ldrh	r3, [r3, #12]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	4b03      	ldr	r3, [pc, #12]	; (800e8b4 <LmhpComplianceOnMcpsConfirm+0x44>)
 800e8a8:	819a      	strh	r2, [r3, #12]
 800e8aa:	e000      	b.n	800e8ae <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800e8ac:	46c0      	nop			; (mov r8, r8)
  }
}
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	b002      	add	sp, #8
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	20000530 	.word	0x20000530

0800e8b8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800e8c0:	4b0d      	ldr	r3, [pc, #52]	; (800e8f8 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	4053      	eors	r3, r2
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d10f      	bne.n	800e8ee <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	2b04      	cmp	r3, #4
 800e8d4:	d10c      	bne.n	800e8f0 <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800e8d6:	4b08      	ldr	r3, [pc, #32]	; (800e8f8 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e8d8:	2201      	movs	r2, #1
 800e8da:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	7a1a      	ldrb	r2, [r3, #8]
 800e8e0:	4b05      	ldr	r3, [pc, #20]	; (800e8f8 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e8e2:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	7a5a      	ldrb	r2, [r3, #9]
 800e8e8:	4b03      	ldr	r3, [pc, #12]	; (800e8f8 <LmhpComplianceOnMlmeConfirm+0x40>)
 800e8ea:	741a      	strb	r2, [r3, #16]
 800e8ec:	e000      	b.n	800e8f0 <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800e8ee:	46c0      	nop			; (mov r8, r8)
  }
}
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	b002      	add	sp, #8
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	46c0      	nop			; (mov r8, r8)
 800e8f8:	20000530 	.word	0x20000530

0800e8fc <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800e8fc:	b5b0      	push	{r4, r5, r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800e902:	4b32      	ldr	r3, [pc, #200]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	2201      	movs	r2, #1
 800e908:	4053      	eors	r3, r2
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800e910:	2301      	movs	r3, #1
 800e912:	425b      	negs	r3, r3
 800e914:	e056      	b.n	800e9c4 <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800e916:	4b2d      	ldr	r3, [pc, #180]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e918:	7b9b      	ldrb	r3, [r3, #14]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d019      	beq.n	800e952 <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800e91e:	4b2b      	ldr	r3, [pc, #172]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e920:	2200      	movs	r2, #0
 800e922:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800e924:	4b29      	ldr	r3, [pc, #164]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e926:	2203      	movs	r2, #3
 800e928:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800e92a:	4b28      	ldr	r3, [pc, #160]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	2205      	movs	r2, #5
 800e930:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800e932:	4b26      	ldr	r3, [pc, #152]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e934:	689b      	ldr	r3, [r3, #8]
 800e936:	3301      	adds	r3, #1
 800e938:	4a24      	ldr	r2, [pc, #144]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e93a:	7bd2      	ldrb	r2, [r2, #15]
 800e93c:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800e93e:	4b23      	ldr	r3, [pc, #140]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	3302      	adds	r3, #2
 800e944:	4a21      	ldr	r2, [pc, #132]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e946:	7c12      	ldrb	r2, [r2, #16]
 800e948:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800e94a:	4b20      	ldr	r3, [pc, #128]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e94c:	2201      	movs	r2, #1
 800e94e:	709a      	strb	r2, [r3, #2]
 800e950:	e01c      	b.n	800e98c <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800e952:	4b1e      	ldr	r3, [pc, #120]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e954:	789b      	ldrb	r3, [r3, #2]
 800e956:	2b01      	cmp	r3, #1
 800e958:	d005      	beq.n	800e966 <LmhpComplianceTxProcess+0x6a>
 800e95a:	2b04      	cmp	r3, #4
 800e95c:	d116      	bne.n	800e98c <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800e95e:	4b1b      	ldr	r3, [pc, #108]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e960:	2201      	movs	r2, #1
 800e962:	709a      	strb	r2, [r3, #2]
        break;
 800e964:	e012      	b.n	800e98c <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800e966:	4b19      	ldr	r3, [pc, #100]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e968:	2202      	movs	r2, #2
 800e96a:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800e96c:	4b17      	ldr	r3, [pc, #92]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e96e:	899b      	ldrh	r3, [r3, #12]
 800e970:	0a1b      	lsrs	r3, r3, #8
 800e972:	b29a      	uxth	r2, r3
 800e974:	4b15      	ldr	r3, [pc, #84]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	b2d2      	uxtb	r2, r2
 800e97a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800e97c:	4b13      	ldr	r3, [pc, #76]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e97e:	899a      	ldrh	r2, [r3, #12]
 800e980:	4b12      	ldr	r3, [pc, #72]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	3301      	adds	r3, #1
 800e986:	b2d2      	uxtb	r2, r2
 800e988:	701a      	strb	r2, [r3, #0]
        break;
 800e98a:	46c0      	nop			; (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800e98c:	2508      	movs	r5, #8
 800e98e:	197b      	adds	r3, r7, r5
 800e990:	22e0      	movs	r2, #224	; 0xe0
 800e992:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800e994:	4b0d      	ldr	r3, [pc, #52]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e996:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800e998:	197b      	adds	r3, r7, r5
 800e99a:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800e99c:	4b0b      	ldr	r3, [pc, #44]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e99e:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800e9a0:	197b      	adds	r3, r7, r5
 800e9a2:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800e9a8:	4b09      	ldr	r3, [pc, #36]	; (800e9d0 <LmhpComplianceTxProcess+0xd4>)
 800e9aa:	0018      	movs	r0, r3
 800e9ac:	f00d ffe2 	bl	801c974 <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800e9b0:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <LmhpComplianceTxProcess+0xd8>)
 800e9b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e9b4:	4b05      	ldr	r3, [pc, #20]	; (800e9cc <LmhpComplianceTxProcess+0xd0>)
 800e9b6:	791b      	ldrb	r3, [r3, #4]
 800e9b8:	0019      	movs	r1, r3
 800e9ba:	1d3a      	adds	r2, r7, #4
 800e9bc:	1978      	adds	r0, r7, r5
 800e9be:	2301      	movs	r3, #1
 800e9c0:	47a0      	blx	r4
 800e9c2:	0003      	movs	r3, r0
                                             true);
}
 800e9c4:	0018      	movs	r0, r3
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	b004      	add	sp, #16
 800e9ca:	bdb0      	pop	{r4, r5, r7, pc}
 800e9cc:	20000530 	.word	0x20000530
 800e9d0:	20000518 	.word	0x20000518
 800e9d4:	20000178 	.word	0x20000178

0800e9d8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b0a2      	sub	sp, #136	; 0x88
 800e9dc:	af02      	add	r7, sp, #8
 800e9de:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800e9e0:	4be1      	ldr	r3, [pc, #900]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	4053      	eors	r3, r2
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d000      	beq.n	800e9f0 <LmhpComplianceOnMcpsIndication+0x18>
 800e9ee:	e1b2      	b.n	800ed56 <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	7b5b      	ldrb	r3, [r3, #13]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	4053      	eors	r3, r2
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d000      	beq.n	800ea00 <LmhpComplianceOnMcpsIndication+0x28>
 800e9fe:	e1ac      	b.n	800ed5a <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800ea00:	4bd9      	ldr	r3, [pc, #868]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea02:	785b      	ldrb	r3, [r3, #1]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00c      	beq.n	800ea22 <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	7c9b      	ldrb	r3, [r3, #18]
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	4053      	eors	r3, r2
 800ea10:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d005      	beq.n	800ea22 <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800ea16:	4bd4      	ldr	r3, [pc, #848]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea18:	899b      	ldrh	r3, [r3, #12]
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	4bd2      	ldr	r3, [pc, #840]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea20:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	78db      	ldrb	r3, [r3, #3]
 800ea26:	2be0      	cmp	r3, #224	; 0xe0
 800ea28:	d000      	beq.n	800ea2c <LmhpComplianceOnMcpsIndication+0x54>
 800ea2a:	e198      	b.n	800ed5e <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800ea2c:	4bce      	ldr	r3, [pc, #824]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea2e:	785b      	ldrb	r3, [r3, #1]
 800ea30:	2201      	movs	r2, #1
 800ea32:	4053      	eors	r3, r2
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d063      	beq.n	800eb02 <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	7b1b      	ldrb	r3, [r3, #12]
 800ea3e:	2b04      	cmp	r3, #4
 800ea40:	d000      	beq.n	800ea44 <LmhpComplianceOnMcpsIndication+0x6c>
 800ea42:	e1a0      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d000      	beq.n	800ea50 <LmhpComplianceOnMcpsIndication+0x78>
 800ea4e:	e19a      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	3301      	adds	r3, #1
 800ea56:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d000      	beq.n	800ea5e <LmhpComplianceOnMcpsIndication+0x86>
 800ea5c:	e193      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	3302      	adds	r3, #2
 800ea64:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d000      	beq.n	800ea6c <LmhpComplianceOnMcpsIndication+0x94>
 800ea6a:	e18c      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	3303      	adds	r3, #3
 800ea72:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d000      	beq.n	800ea7a <LmhpComplianceOnMcpsIndication+0xa2>
 800ea78:	e185      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800ea7a:	4bbb      	ldr	r3, [pc, #748]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800ea80:	4bb9      	ldr	r3, [pc, #740]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea82:	22e0      	movs	r2, #224	; 0xe0
 800ea84:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800ea86:	4bb8      	ldr	r3, [pc, #736]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea88:	2202      	movs	r2, #2
 800ea8a:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800ea8c:	4bb6      	ldr	r3, [pc, #728]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea8e:	2200      	movs	r2, #0
 800ea90:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800ea92:	4bb5      	ldr	r3, [pc, #724]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800ea98:	4bb3      	ldr	r3, [pc, #716]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800ea9e:	4bb2      	ldr	r3, [pc, #712]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800eaa4:	4bb0      	ldr	r3, [pc, #704]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800eaaa:	4baf      	ldr	r3, [pc, #700]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eaac:	2201      	movs	r2, #1
 800eaae:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800eab0:	2108      	movs	r1, #8
 800eab2:	187b      	adds	r3, r7, r1
 800eab4:	2204      	movs	r2, #4
 800eab6:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800eab8:	187b      	adds	r3, r7, r1
 800eaba:	2201      	movs	r2, #1
 800eabc:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800eabe:	187b      	adds	r3, r7, r1
 800eac0:	0018      	movs	r0, r3
 800eac2:	f004 fe57 	bl	8013774 <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800eac6:	2000      	movs	r0, #0
 800eac8:	f005 fc80 	bl	80143cc <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800eacc:	4ba7      	ldr	r3, [pc, #668]	; (800ed6c <LmhpComplianceOnMcpsIndication+0x394>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d003      	beq.n	800eade <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800ead6:	4ba5      	ldr	r3, [pc, #660]	; (800ed6c <LmhpComplianceOnMcpsIndication+0x394>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800eade:	4ba4      	ldr	r3, [pc, #656]	; (800ed70 <LmhpComplianceOnMcpsIndication+0x398>)
 800eae0:	2201      	movs	r2, #1
 800eae2:	4251      	negs	r1, r2
 800eae4:	48a3      	ldr	r0, [pc, #652]	; (800ed74 <LmhpComplianceOnMcpsIndication+0x39c>)
 800eae6:	2200      	movs	r2, #0
 800eae8:	9200      	str	r2, [sp, #0]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f00d ff0a 	bl	801c904 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800eaf0:	4aa1      	ldr	r2, [pc, #644]	; (800ed78 <LmhpComplianceOnMcpsIndication+0x3a0>)
 800eaf2:	4ba0      	ldr	r3, [pc, #640]	; (800ed74 <LmhpComplianceOnMcpsIndication+0x39c>)
 800eaf4:	0011      	movs	r1, r2
 800eaf6:	0018      	movs	r0, r3
 800eaf8:	f00e f82c 	bl	801cb54 <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800eafc:	f7ff fefe 	bl	800e8fc <LmhpComplianceTxProcess>
 800eb00:	e141      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	781a      	ldrb	r2, [r3, #0]
 800eb08:	4b97      	ldr	r3, [pc, #604]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb0a:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800eb0c:	4b96      	ldr	r3, [pc, #600]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb0e:	789b      	ldrb	r3, [r3, #2]
 800eb10:	2b0a      	cmp	r3, #10
 800eb12:	d900      	bls.n	800eb16 <LmhpComplianceOnMcpsIndication+0x13e>
 800eb14:	e125      	b.n	800ed62 <LmhpComplianceOnMcpsIndication+0x38a>
 800eb16:	009a      	lsls	r2, r3, #2
 800eb18:	4b98      	ldr	r3, [pc, #608]	; (800ed7c <LmhpComplianceOnMcpsIndication+0x3a4>)
 800eb1a:	18d3      	adds	r3, r2, r3
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800eb20:	4b94      	ldr	r3, [pc, #592]	; (800ed74 <LmhpComplianceOnMcpsIndication+0x39c>)
 800eb22:	0018      	movs	r0, r3
 800eb24:	f00d ff9e 	bl	801ca64 <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800eb28:	4b8f      	ldr	r3, [pc, #572]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800eb2e:	4b8e      	ldr	r3, [pc, #568]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800eb34:	2108      	movs	r1, #8
 800eb36:	187b      	adds	r3, r7, r1
 800eb38:	2204      	movs	r2, #4
 800eb3a:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800eb3c:	4b8b      	ldr	r3, [pc, #556]	; (800ed6c <LmhpComplianceOnMcpsIndication+0x394>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	781a      	ldrb	r2, [r3, #0]
 800eb42:	187b      	adds	r3, r7, r1
 800eb44:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800eb46:	187b      	adds	r3, r7, r1
 800eb48:	0018      	movs	r0, r3
 800eb4a:	f004 fe13 	bl	8013774 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800eb4e:	4b87      	ldr	r3, [pc, #540]	; (800ed6c <LmhpComplianceOnMcpsIndication+0x394>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	785b      	ldrb	r3, [r3, #1]
 800eb54:	0018      	movs	r0, r3
 800eb56:	f005 fc39 	bl	80143cc <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800eb5a:	4b84      	ldr	r3, [pc, #528]	; (800ed6c <LmhpComplianceOnMcpsIndication+0x394>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d100      	bne.n	800eb66 <LmhpComplianceOnMcpsIndication+0x18e>
 800eb64:	e10e      	b.n	800ed84 <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800eb66:	4b81      	ldr	r3, [pc, #516]	; (800ed6c <LmhpComplianceOnMcpsIndication+0x394>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	4798      	blx	r3
        }
      }
      break;
 800eb6e:	e109      	b.n	800ed84 <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800eb70:	4b7d      	ldr	r3, [pc, #500]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb72:	2202      	movs	r2, #2
 800eb74:	71da      	strb	r2, [r3, #7]
        break;
 800eb76:	e106      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800eb78:	4b7b      	ldr	r3, [pc, #492]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800eb7e:	4b7a      	ldr	r3, [pc, #488]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb80:	2201      	movs	r2, #1
 800eb82:	709a      	strb	r2, [r3, #2]
        break;
 800eb84:	e0ff      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800eb86:	4b78      	ldr	r3, [pc, #480]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800eb8c:	4b76      	ldr	r3, [pc, #472]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb8e:	2201      	movs	r2, #1
 800eb90:	709a      	strb	r2, [r3, #2]
        break;
 800eb92:	e0f8      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	7b1a      	ldrb	r2, [r3, #12]
 800eb98:	4b73      	ldr	r3, [pc, #460]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb9a:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800eb9c:	4b72      	ldr	r3, [pc, #456]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	2204      	movs	r2, #4
 800eba2:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800eba4:	237f      	movs	r3, #127	; 0x7f
 800eba6:	18fb      	adds	r3, r7, r3
 800eba8:	2201      	movs	r2, #1
 800ebaa:	701a      	strb	r2, [r3, #0]
 800ebac:	e013      	b.n	800ebd6 <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	689a      	ldr	r2, [r3, #8]
 800ebb2:	207f      	movs	r0, #127	; 0x7f
 800ebb4:	183b      	adds	r3, r7, r0
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	18d3      	adds	r3, r2, r3
 800ebba:	781a      	ldrb	r2, [r3, #0]
 800ebbc:	4b6a      	ldr	r3, [pc, #424]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebbe:	6899      	ldr	r1, [r3, #8]
 800ebc0:	183b      	adds	r3, r7, r0
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	18cb      	adds	r3, r1, r3
 800ebc6:	3201      	adds	r2, #1
 800ebc8:	b2d2      	uxtb	r2, r2
 800ebca:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800ebcc:	183b      	adds	r3, r7, r0
 800ebce:	781a      	ldrb	r2, [r3, #0]
 800ebd0:	183b      	adds	r3, r7, r0
 800ebd2:	3201      	adds	r2, #1
 800ebd4:	701a      	strb	r2, [r3, #0]
 800ebd6:	4b64      	ldr	r3, [pc, #400]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebd8:	799a      	ldrb	r2, [r3, #6]
 800ebda:	4b63      	ldr	r3, [pc, #396]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebdc:	79db      	ldrb	r3, [r3, #7]
 800ebde:	1c18      	adds	r0, r3, #0
 800ebe0:	1c11      	adds	r1, r2, #0
 800ebe2:	b2ca      	uxtb	r2, r1
 800ebe4:	b2c3      	uxtb	r3, r0
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d900      	bls.n	800ebec <LmhpComplianceOnMcpsIndication+0x214>
 800ebea:	1c01      	adds	r1, r0, #0
 800ebec:	b2cb      	uxtb	r3, r1
 800ebee:	227f      	movs	r2, #127	; 0x7f
 800ebf0:	18ba      	adds	r2, r7, r2
 800ebf2:	7812      	ldrb	r2, [r2, #0]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d3da      	bcc.n	800ebae <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800ebf8:	e0c5      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800ebfa:	2168      	movs	r1, #104	; 0x68
 800ebfc:	187b      	adds	r3, r7, r1
 800ebfe:	2204      	movs	r2, #4
 800ec00:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800ec02:	187b      	adds	r3, r7, r1
 800ec04:	0018      	movs	r0, r3
 800ec06:	f005 f93b 	bl	8013e80 <LoRaMacMlmeRequest>
      }
      break;
 800ec0a:	e0bc      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800ec0c:	4b59      	ldr	r3, [pc, #356]	; (800ed74 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ec0e:	0018      	movs	r0, r3
 800ec10:	f00d ff28 	bl	801ca64 <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800ec14:	4b54      	ldr	r3, [pc, #336]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec16:	2200      	movs	r2, #0
 800ec18:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800ec1a:	4b53      	ldr	r3, [pc, #332]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800ec20:	2108      	movs	r1, #8
 800ec22:	187b      	adds	r3, r7, r1
 800ec24:	2204      	movs	r2, #4
 800ec26:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ec28:	4b50      	ldr	r3, [pc, #320]	; (800ed6c <LmhpComplianceOnMcpsIndication+0x394>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	781a      	ldrb	r2, [r3, #0]
 800ec2e:	187b      	adds	r3, r7, r1
 800ec30:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ec32:	187b      	adds	r3, r7, r1
 800ec34:	0018      	movs	r0, r3
 800ec36:	f004 fd9d 	bl	8013774 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800ec3a:	4b4c      	ldr	r3, [pc, #304]	; (800ed6c <LmhpComplianceOnMcpsIndication+0x394>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	785b      	ldrb	r3, [r3, #1]
 800ec40:	0018      	movs	r0, r3
 800ec42:	f005 fbc3 	bl	80143cc <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800ec46:	4b49      	ldr	r3, [pc, #292]	; (800ed6c <LmhpComplianceOnMcpsIndication+0x394>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d003      	beq.n	800ec58 <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800ec50:	4b46      	ldr	r3, [pc, #280]	; (800ed6c <LmhpComplianceOnMcpsIndication+0x394>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	689b      	ldr	r3, [r3, #8]
 800ec56:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800ec58:	4b49      	ldr	r3, [pc, #292]	; (800ed80 <LmhpComplianceOnMcpsIndication+0x3a8>)
 800ec5a:	6a1b      	ldr	r3, [r3, #32]
 800ec5c:	2002      	movs	r0, #2
 800ec5e:	4798      	blx	r3
      }
      break;
 800ec60:	e091      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	7b1b      	ldrb	r3, [r3, #12]
 800ec66:	2b03      	cmp	r3, #3
 800ec68:	d114      	bne.n	800ec94 <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800ec6a:	2154      	movs	r1, #84	; 0x54
 800ec6c:	187b      	adds	r3, r7, r1
 800ec6e:	2205      	movs	r2, #5
 800ec70:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	3301      	adds	r3, #1
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	021b      	lsls	r3, r3, #8
 800ec7c:	b21a      	sxth	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	3302      	adds	r3, #2
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	b21b      	sxth	r3, r3
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	b21b      	sxth	r3, r3
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	187b      	adds	r3, r7, r1
 800ec90:	809a      	strh	r2, [r3, #4]
 800ec92:	e031      	b.n	800ecf8 <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	7b1b      	ldrb	r3, [r3, #12]
 800ec98:	2b07      	cmp	r3, #7
 800ec9a:	d12d      	bne.n	800ecf8 <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800ec9c:	2154      	movs	r1, #84	; 0x54
 800ec9e:	187b      	adds	r3, r7, r1
 800eca0:	2206      	movs	r2, #6
 800eca2:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	021b      	lsls	r3, r3, #8
 800ecae:	b21a      	sxth	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	3302      	adds	r3, #2
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	b21b      	sxth	r3, r3
 800ecba:	4313      	orrs	r3, r2
 800ecbc:	b21b      	sxth	r3, r3
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	187b      	adds	r3, r7, r1
 800ecc2:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	3303      	adds	r3, #3
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	041a      	lsls	r2, r3, #16
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	3304      	adds	r3, #4
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	021b      	lsls	r3, r3, #8
 800ecd8:	431a      	orrs	r2, r3
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	689b      	ldr	r3, [r3, #8]
 800ecde:	3305      	adds	r3, #5
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	4313      	orrs	r3, r2
 800ece4:	001a      	movs	r2, r3
 800ece6:	2364      	movs	r3, #100	; 0x64
 800ece8:	435a      	muls	r2, r3
 800ecea:	187b      	adds	r3, r7, r1
 800ecec:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	799a      	ldrb	r2, [r3, #6]
 800ecf4:	187b      	adds	r3, r7, r1
 800ecf6:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800ecf8:	2354      	movs	r3, #84	; 0x54
 800ecfa:	18fb      	adds	r3, r7, r3
 800ecfc:	0018      	movs	r0, r3
 800ecfe:	f005 f8bf 	bl	8013e80 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800ed02:	4b19      	ldr	r3, [pc, #100]	; (800ed68 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed04:	2201      	movs	r2, #1
 800ed06:	709a      	strb	r2, [r3, #2]
      }
      break;
 800ed08:	e03d      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800ed0a:	2140      	movs	r1, #64	; 0x40
 800ed0c:	187b      	adds	r3, r7, r1
 800ed0e:	220a      	movs	r2, #10
 800ed10:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800ed12:	187b      	adds	r3, r7, r1
 800ed14:	0018      	movs	r0, r3
 800ed16:	f005 f8b3 	bl	8013e80 <LoRaMacMlmeRequest>
      }
      break;
 800ed1a:	e034      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800ed1c:	2108      	movs	r1, #8
 800ed1e:	187b      	adds	r3, r7, r1
 800ed20:	2200      	movs	r2, #0
 800ed22:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	3301      	adds	r3, #1
 800ed2a:	781a      	ldrb	r2, [r3, #0]
 800ed2c:	187b      	adds	r3, r7, r1
 800ed2e:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ed30:	187b      	adds	r3, r7, r1
 800ed32:	0018      	movs	r0, r3
 800ed34:	f004 fd1e 	bl	8013774 <LoRaMacMibSetRequestConfirm>
      }
      break;
 800ed38:	e025      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800ed3a:	212c      	movs	r1, #44	; 0x2c
 800ed3c:	187b      	adds	r3, r7, r1
 800ed3e:	220d      	movs	r2, #13
 800ed40:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	785a      	ldrb	r2, [r3, #1]
 800ed48:	187b      	adds	r3, r7, r1
 800ed4a:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800ed4c:	187b      	adds	r3, r7, r1
 800ed4e:	0018      	movs	r0, r3
 800ed50:	f005 f896 	bl	8013e80 <LoRaMacMlmeRequest>
      }
      break;
 800ed54:	e017      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ed56:	46c0      	nop			; (mov r8, r8)
 800ed58:	e015      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ed5a:	46c0      	nop			; (mov r8, r8)
 800ed5c:	e013      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ed5e:	46c0      	nop			; (mov r8, r8)
 800ed60:	e011      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800ed62:	46c0      	nop			; (mov r8, r8)
 800ed64:	e00f      	b.n	800ed86 <LmhpComplianceOnMcpsIndication+0x3ae>
 800ed66:	46c0      	nop			; (mov r8, r8)
 800ed68:	20000530 	.word	0x20000530
 800ed6c:	20000544 	.word	0x20000544
 800ed70:	0800ed97 	.word	0x0800ed97
 800ed74:	20000518 	.word	0x20000518
 800ed78:	00004e20 	.word	0x00004e20
 800ed7c:	0801ebdc 	.word	0x0801ebdc
 800ed80:	20000178 	.word	0x20000178
      break;
 800ed84:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800ed86:	46bd      	mov	sp, r7
 800ed88:	b020      	add	sp, #128	; 0x80
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800ed90:	46c0      	nop			; (mov r8, r8)
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b082      	sub	sp, #8
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800ed9e:	f7ff fdad 	bl	800e8fc <LmhpComplianceTxProcess>
}
 800eda2:	46c0      	nop			; (mov r8, r8)
 800eda4:	46bd      	mov	sp, r7
 800eda6:	b002      	add	sp, #8
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b082      	sub	sp, #8
 800edae:	af00      	add	r7, sp, #0
 800edb0:	0002      	movs	r2, r0
 800edb2:	1dfb      	adds	r3, r7, #7
 800edb4:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800edb6:	46c0      	nop			; (mov r8, r8)
 800edb8:	46bd      	mov	sp, r7
 800edba:	b002      	add	sp, #8
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800edc2:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800edc4:	0018      	movs	r0, r3
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800edce:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800edd0:	0018      	movs	r0, r3
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800edd8:	b5b0      	push	{r4, r5, r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800edde:	f00d ff71 	bl	801ccc4 <UTIL_TIMER_GetCurrentTime>
 800ede2:	0002      	movs	r2, r0
 800ede4:	4b14      	ldr	r3, [pc, #80]	; (800ee38 <OnRadioTxDone+0x60>)
 800ede6:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ede8:	4d14      	ldr	r5, [pc, #80]	; (800ee3c <OnRadioTxDone+0x64>)
 800edea:	23ce      	movs	r3, #206	; 0xce
 800edec:	009c      	lsls	r4, r3, #2
 800edee:	003b      	movs	r3, r7
 800edf0:	0018      	movs	r0, r3
 800edf2:	f00d fd15 	bl	801c820 <SysTimeGet>
 800edf6:	003a      	movs	r2, r7
 800edf8:	192b      	adds	r3, r5, r4
 800edfa:	ca03      	ldmia	r2!, {r0, r1}
 800edfc:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800edfe:	4b10      	ldr	r3, [pc, #64]	; (800ee40 <OnRadioTxDone+0x68>)
 800ee00:	781a      	ldrb	r2, [r3, #0]
 800ee02:	2110      	movs	r1, #16
 800ee04:	430a      	orrs	r2, r1
 800ee06:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ee08:	4a0c      	ldr	r2, [pc, #48]	; (800ee3c <OnRadioTxDone+0x64>)
 800ee0a:	23d2      	movs	r3, #210	; 0xd2
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	58d3      	ldr	r3, [r2, r3]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00c      	beq.n	800ee2e <OnRadioTxDone+0x56>
 800ee14:	4a09      	ldr	r2, [pc, #36]	; (800ee3c <OnRadioTxDone+0x64>)
 800ee16:	23d2      	movs	r3, #210	; 0xd2
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	58d3      	ldr	r3, [r2, r3]
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d005      	beq.n	800ee2e <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ee22:	4a06      	ldr	r2, [pc, #24]	; (800ee3c <OnRadioTxDone+0x64>)
 800ee24:	23d2      	movs	r3, #210	; 0xd2
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	58d3      	ldr	r3, [r2, r3]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800ee2e:	46c0      	nop			; (mov r8, r8)
 800ee30:	46bd      	mov	sp, r7
 800ee32:	b002      	add	sp, #8
 800ee34:	bdb0      	pop	{r4, r5, r7, pc}
 800ee36:	46c0      	nop			; (mov r8, r8)
 800ee38:	2000166c 	.word	0x2000166c
 800ee3c:	20000548 	.word	0x20000548
 800ee40:	20000b78 	.word	0x20000b78

0800ee44 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ee44:	b5b0      	push	{r4, r5, r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	000c      	movs	r4, r1
 800ee4e:	0010      	movs	r0, r2
 800ee50:	0019      	movs	r1, r3
 800ee52:	250a      	movs	r5, #10
 800ee54:	197b      	adds	r3, r7, r5
 800ee56:	1c22      	adds	r2, r4, #0
 800ee58:	801a      	strh	r2, [r3, #0]
 800ee5a:	2408      	movs	r4, #8
 800ee5c:	193b      	adds	r3, r7, r4
 800ee5e:	1c02      	adds	r2, r0, #0
 800ee60:	801a      	strh	r2, [r3, #0]
 800ee62:	1dfb      	adds	r3, r7, #7
 800ee64:	1c0a      	adds	r2, r1, #0
 800ee66:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ee68:	f00d ff2c 	bl	801ccc4 <UTIL_TIMER_GetCurrentTime>
 800ee6c:	0002      	movs	r2, r0
 800ee6e:	4b16      	ldr	r3, [pc, #88]	; (800eec8 <OnRadioRxDone+0x84>)
 800ee70:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800ee72:	4b15      	ldr	r3, [pc, #84]	; (800eec8 <OnRadioRxDone+0x84>)
 800ee74:	68fa      	ldr	r2, [r7, #12]
 800ee76:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800ee78:	4b13      	ldr	r3, [pc, #76]	; (800eec8 <OnRadioRxDone+0x84>)
 800ee7a:	197a      	adds	r2, r7, r5
 800ee7c:	8812      	ldrh	r2, [r2, #0]
 800ee7e:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800ee80:	4b11      	ldr	r3, [pc, #68]	; (800eec8 <OnRadioRxDone+0x84>)
 800ee82:	193a      	adds	r2, r7, r4
 800ee84:	8812      	ldrh	r2, [r2, #0]
 800ee86:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800ee88:	4b0f      	ldr	r3, [pc, #60]	; (800eec8 <OnRadioRxDone+0x84>)
 800ee8a:	1dfa      	adds	r2, r7, #7
 800ee8c:	7812      	ldrb	r2, [r2, #0]
 800ee8e:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800ee90:	4b0e      	ldr	r3, [pc, #56]	; (800eecc <OnRadioRxDone+0x88>)
 800ee92:	781a      	ldrb	r2, [r3, #0]
 800ee94:	2108      	movs	r1, #8
 800ee96:	430a      	orrs	r2, r1
 800ee98:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ee9a:	4a0d      	ldr	r2, [pc, #52]	; (800eed0 <OnRadioRxDone+0x8c>)
 800ee9c:	23d2      	movs	r3, #210	; 0xd2
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	58d3      	ldr	r3, [r2, r3]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00c      	beq.n	800eec0 <OnRadioRxDone+0x7c>
 800eea6:	4a0a      	ldr	r2, [pc, #40]	; (800eed0 <OnRadioRxDone+0x8c>)
 800eea8:	23d2      	movs	r3, #210	; 0xd2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	58d3      	ldr	r3, [r2, r3]
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d005      	beq.n	800eec0 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eeb4:	4a06      	ldr	r2, [pc, #24]	; (800eed0 <OnRadioRxDone+0x8c>)
 800eeb6:	23d2      	movs	r3, #210	; 0xd2
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	58d3      	ldr	r3, [r2, r3]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800eec0:	46c0      	nop			; (mov r8, r8)
 800eec2:	46bd      	mov	sp, r7
 800eec4:	b004      	add	sp, #16
 800eec6:	bdb0      	pop	{r4, r5, r7, pc}
 800eec8:	20001670 	.word	0x20001670
 800eecc:	20000b78 	.word	0x20000b78
 800eed0:	20000548 	.word	0x20000548

0800eed4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800eed8:	4b0d      	ldr	r3, [pc, #52]	; (800ef10 <OnRadioTxTimeout+0x3c>)
 800eeda:	781a      	ldrb	r2, [r3, #0]
 800eedc:	2104      	movs	r1, #4
 800eede:	430a      	orrs	r2, r1
 800eee0:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eee2:	4a0c      	ldr	r2, [pc, #48]	; (800ef14 <OnRadioTxTimeout+0x40>)
 800eee4:	23d2      	movs	r3, #210	; 0xd2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	58d3      	ldr	r3, [r2, r3]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d00c      	beq.n	800ef08 <OnRadioTxTimeout+0x34>
 800eeee:	4a09      	ldr	r2, [pc, #36]	; (800ef14 <OnRadioTxTimeout+0x40>)
 800eef0:	23d2      	movs	r3, #210	; 0xd2
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	58d3      	ldr	r3, [r2, r3]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d005      	beq.n	800ef08 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eefc:	4a05      	ldr	r2, [pc, #20]	; (800ef14 <OnRadioTxTimeout+0x40>)
 800eefe:	23d2      	movs	r3, #210	; 0xd2
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	58d3      	ldr	r3, [r2, r3]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800ef08:	46c0      	nop			; (mov r8, r8)
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	46c0      	nop			; (mov r8, r8)
 800ef10:	20000b78 	.word	0x20000b78
 800ef14:	20000548 	.word	0x20000548

0800ef18 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800ef1c:	4b0d      	ldr	r3, [pc, #52]	; (800ef54 <OnRadioRxError+0x3c>)
 800ef1e:	781a      	ldrb	r2, [r3, #0]
 800ef20:	2102      	movs	r1, #2
 800ef22:	430a      	orrs	r2, r1
 800ef24:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ef26:	4a0c      	ldr	r2, [pc, #48]	; (800ef58 <OnRadioRxError+0x40>)
 800ef28:	23d2      	movs	r3, #210	; 0xd2
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	58d3      	ldr	r3, [r2, r3]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d00c      	beq.n	800ef4c <OnRadioRxError+0x34>
 800ef32:	4a09      	ldr	r2, [pc, #36]	; (800ef58 <OnRadioRxError+0x40>)
 800ef34:	23d2      	movs	r3, #210	; 0xd2
 800ef36:	009b      	lsls	r3, r3, #2
 800ef38:	58d3      	ldr	r3, [r2, r3]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d005      	beq.n	800ef4c <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ef40:	4a05      	ldr	r2, [pc, #20]	; (800ef58 <OnRadioRxError+0x40>)
 800ef42:	23d2      	movs	r3, #210	; 0xd2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	58d3      	ldr	r3, [r2, r3]
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	4798      	blx	r3
    }
}
 800ef4c:	46c0      	nop			; (mov r8, r8)
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	46c0      	nop			; (mov r8, r8)
 800ef54:	20000b78 	.word	0x20000b78
 800ef58:	20000548 	.word	0x20000548

0800ef5c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ef60:	4b0d      	ldr	r3, [pc, #52]	; (800ef98 <OnRadioRxTimeout+0x3c>)
 800ef62:	781a      	ldrb	r2, [r3, #0]
 800ef64:	2101      	movs	r1, #1
 800ef66:	430a      	orrs	r2, r1
 800ef68:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ef6a:	4a0c      	ldr	r2, [pc, #48]	; (800ef9c <OnRadioRxTimeout+0x40>)
 800ef6c:	23d2      	movs	r3, #210	; 0xd2
 800ef6e:	009b      	lsls	r3, r3, #2
 800ef70:	58d3      	ldr	r3, [r2, r3]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00c      	beq.n	800ef90 <OnRadioRxTimeout+0x34>
 800ef76:	4a09      	ldr	r2, [pc, #36]	; (800ef9c <OnRadioRxTimeout+0x40>)
 800ef78:	23d2      	movs	r3, #210	; 0xd2
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	58d3      	ldr	r3, [r2, r3]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d005      	beq.n	800ef90 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ef84:	4a05      	ldr	r2, [pc, #20]	; (800ef9c <OnRadioRxTimeout+0x40>)
 800ef86:	23d2      	movs	r3, #210	; 0xd2
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	58d3      	ldr	r3, [r2, r3]
 800ef8c:	68db      	ldr	r3, [r3, #12]
 800ef8e:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800ef90:	46c0      	nop			; (mov r8, r8)
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	46c0      	nop			; (mov r8, r8)
 800ef98:	20000b78 	.word	0x20000b78
 800ef9c:	20000548 	.word	0x20000548

0800efa0 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800efa4:	4b0a      	ldr	r3, [pc, #40]	; (800efd0 <UpdateRxSlotIdleState+0x30>)
 800efa6:	4a0b      	ldr	r2, [pc, #44]	; (800efd4 <UpdateRxSlotIdleState+0x34>)
 800efa8:	589b      	ldr	r3, [r3, r2]
 800efaa:	227c      	movs	r2, #124	; 0x7c
 800efac:	5c9b      	ldrb	r3, [r3, r2]
 800efae:	2b02      	cmp	r3, #2
 800efb0:	d005      	beq.n	800efbe <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800efb2:	4a07      	ldr	r2, [pc, #28]	; (800efd0 <UpdateRxSlotIdleState+0x30>)
 800efb4:	2390      	movs	r3, #144	; 0x90
 800efb6:	00db      	lsls	r3, r3, #3
 800efb8:	2106      	movs	r1, #6
 800efba:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800efbc:	e004      	b.n	800efc8 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800efbe:	4a04      	ldr	r2, [pc, #16]	; (800efd0 <UpdateRxSlotIdleState+0x30>)
 800efc0:	2390      	movs	r3, #144	; 0x90
 800efc2:	00db      	lsls	r3, r3, #3
 800efc4:	2102      	movs	r1, #2
 800efc6:	54d1      	strb	r1, [r2, r3]
}
 800efc8:	46c0      	nop			; (mov r8, r8)
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	46c0      	nop			; (mov r8, r8)
 800efd0:	20000548 	.word	0x20000548
 800efd4:	00000484 	.word	0x00000484

0800efd8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800efd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efda:	b08f      	sub	sp, #60	; 0x3c
 800efdc:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800efde:	4b59      	ldr	r3, [pc, #356]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800efe0:	4a59      	ldr	r2, [pc, #356]	; (800f148 <ProcessRadioTxDone+0x170>)
 800efe2:	589b      	ldr	r3, [r3, r2]
 800efe4:	227c      	movs	r2, #124	; 0x7c
 800efe6:	5c9b      	ldrb	r3, [r3, r2]
 800efe8:	2b02      	cmp	r3, #2
 800efea:	d002      	beq.n	800eff2 <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800efec:	4b57      	ldr	r3, [pc, #348]	; (800f14c <ProcessRadioTxDone+0x174>)
 800efee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff0:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800eff2:	4a54      	ldr	r2, [pc, #336]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800eff4:	23ec      	movs	r3, #236	; 0xec
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	58d2      	ldr	r2, [r2, r3]
 800effa:	4b55      	ldr	r3, [pc, #340]	; (800f150 <ProcessRadioTxDone+0x178>)
 800effc:	0011      	movs	r1, r2
 800effe:	0018      	movs	r0, r3
 800f000:	f00d fda8 	bl	801cb54 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f004:	4b52      	ldr	r3, [pc, #328]	; (800f150 <ProcessRadioTxDone+0x178>)
 800f006:	0018      	movs	r0, r3
 800f008:	f00d fcb4 	bl	801c974 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f00c:	4a4d      	ldr	r2, [pc, #308]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f00e:	23ed      	movs	r3, #237	; 0xed
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	58d2      	ldr	r2, [r2, r3]
 800f014:	4b4f      	ldr	r3, [pc, #316]	; (800f154 <ProcessRadioTxDone+0x17c>)
 800f016:	0011      	movs	r1, r2
 800f018:	0018      	movs	r0, r3
 800f01a:	f00d fd9b 	bl	801cb54 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f01e:	4b4d      	ldr	r3, [pc, #308]	; (800f154 <ProcessRadioTxDone+0x17c>)
 800f020:	0018      	movs	r0, r3
 800f022:	f00d fca7 	bl	801c974 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f026:	4b47      	ldr	r3, [pc, #284]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f028:	4a47      	ldr	r2, [pc, #284]	; (800f148 <ProcessRadioTxDone+0x170>)
 800f02a:	589b      	ldr	r3, [r3, r2]
 800f02c:	227c      	movs	r2, #124	; 0x7c
 800f02e:	5c9b      	ldrb	r3, [r3, r2]
 800f030:	2b02      	cmp	r3, #2
 800f032:	d004      	beq.n	800f03e <ProcessRadioTxDone+0x66>
 800f034:	4b43      	ldr	r3, [pc, #268]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f036:	4a48      	ldr	r2, [pc, #288]	; (800f158 <ProcessRadioTxDone+0x180>)
 800f038:	5c9b      	ldrb	r3, [r3, r2]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d021      	beq.n	800f082 <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f03e:	2120      	movs	r1, #32
 800f040:	187b      	adds	r3, r7, r1
 800f042:	2216      	movs	r2, #22
 800f044:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f046:	4b3f      	ldr	r3, [pc, #252]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f048:	4a3f      	ldr	r2, [pc, #252]	; (800f148 <ProcessRadioTxDone+0x170>)
 800f04a:	589b      	ldr	r3, [r3, r2]
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	187a      	adds	r2, r7, r1
 800f050:	0011      	movs	r1, r2
 800f052:	0018      	movs	r0, r3
 800f054:	f007 fccf 	bl	80169f6 <RegionGetPhyParam>
 800f058:	0003      	movs	r3, r0
 800f05a:	001a      	movs	r2, r3
 800f05c:	211c      	movs	r1, #28
 800f05e:	187b      	adds	r3, r7, r1
 800f060:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f062:	4a38      	ldr	r2, [pc, #224]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f064:	23ed      	movs	r3, #237	; 0xed
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	58d2      	ldr	r2, [r2, r3]
 800f06a:	187b      	adds	r3, r7, r1
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	18d2      	adds	r2, r2, r3
 800f070:	4b3a      	ldr	r3, [pc, #232]	; (800f15c <ProcessRadioTxDone+0x184>)
 800f072:	0011      	movs	r1, r2
 800f074:	0018      	movs	r0, r3
 800f076:	f00d fd6d 	bl	801cb54 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f07a:	4b38      	ldr	r3, [pc, #224]	; (800f15c <ProcessRadioTxDone+0x184>)
 800f07c:	0018      	movs	r0, r3
 800f07e:	f00d fc79 	bl	801c974 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800f082:	4b30      	ldr	r3, [pc, #192]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f084:	4a30      	ldr	r2, [pc, #192]	; (800f148 <ProcessRadioTxDone+0x170>)
 800f086:	589a      	ldr	r2, [r3, r2]
 800f088:	4b35      	ldr	r3, [pc, #212]	; (800f160 <ProcessRadioTxDone+0x188>)
 800f08a:	6819      	ldr	r1, [r3, #0]
 800f08c:	23a8      	movs	r3, #168	; 0xa8
 800f08e:	005b      	lsls	r3, r3, #1
 800f090:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f092:	4b2c      	ldr	r3, [pc, #176]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f094:	4a33      	ldr	r2, [pc, #204]	; (800f164 <ProcessRadioTxDone+0x18c>)
 800f096:	5c9a      	ldrb	r2, [r3, r2]
 800f098:	2408      	movs	r4, #8
 800f09a:	193b      	adds	r3, r7, r4
 800f09c:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f09e:	4b30      	ldr	r3, [pc, #192]	; (800f160 <ProcessRadioTxDone+0x188>)
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	193b      	adds	r3, r7, r4
 800f0a4:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800f0a6:	2328      	movs	r3, #40	; 0x28
 800f0a8:	18fb      	adds	r3, r7, r3
 800f0aa:	0018      	movs	r0, r3
 800f0ac:	f00d fbfa 	bl	801c8a4 <SysTimeGetMcuTime>
 800f0b0:	4b24      	ldr	r3, [pc, #144]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f0b2:	4a25      	ldr	r2, [pc, #148]	; (800f148 <ProcessRadioTxDone+0x170>)
 800f0b4:	5898      	ldr	r0, [r3, r2]
 800f0b6:	193d      	adds	r5, r7, r4
 800f0b8:	003e      	movs	r6, r7
 800f0ba:	23ac      	movs	r3, #172	; 0xac
 800f0bc:	0059      	lsls	r1, r3, #1
 800f0be:	2328      	movs	r3, #40	; 0x28
 800f0c0:	18fa      	adds	r2, r7, r3
 800f0c2:	2404      	movs	r4, #4
 800f0c4:	1843      	adds	r3, r0, r1
 800f0c6:	191c      	adds	r4, r3, r4
 800f0c8:	466b      	mov	r3, sp
 800f0ca:	6824      	ldr	r4, [r4, #0]
 800f0cc:	601c      	str	r4, [r3, #0]
 800f0ce:	5843      	ldr	r3, [r0, r1]
 800f0d0:	6811      	ldr	r1, [r2, #0]
 800f0d2:	6852      	ldr	r2, [r2, #4]
 800f0d4:	0030      	movs	r0, r6
 800f0d6:	f00d fb17 	bl	801c708 <SysTimeSub>
 800f0da:	003a      	movs	r2, r7
 800f0dc:	002b      	movs	r3, r5
 800f0de:	330c      	adds	r3, #12
 800f0e0:	ca21      	ldmia	r2!, {r0, r5}
 800f0e2:	c321      	stmia	r3!, {r0, r5}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f0e4:	4a17      	ldr	r2, [pc, #92]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f0e6:	2383      	movs	r3, #131	; 0x83
 800f0e8:	00db      	lsls	r3, r3, #3
 800f0ea:	58d2      	ldr	r2, [r2, r3]
 800f0ec:	2108      	movs	r1, #8
 800f0ee:	187b      	adds	r3, r7, r1
 800f0f0:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800f0f2:	187b      	adds	r3, r7, r1
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800f0f8:	4b12      	ldr	r3, [pc, #72]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f0fa:	4a13      	ldr	r2, [pc, #76]	; (800f148 <ProcessRadioTxDone+0x170>)
 800f0fc:	589a      	ldr	r2, [r3, r2]
 800f0fe:	23b2      	movs	r3, #178	; 0xb2
 800f100:	005b      	lsls	r3, r3, #1
 800f102:	5cd3      	ldrb	r3, [r2, r3]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d102      	bne.n	800f10e <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800f108:	187b      	adds	r3, r7, r1
 800f10a:	2200      	movs	r2, #0
 800f10c:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800f10e:	4b0d      	ldr	r3, [pc, #52]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f110:	4a0d      	ldr	r2, [pc, #52]	; (800f148 <ProcessRadioTxDone+0x170>)
 800f112:	589b      	ldr	r3, [r3, r2]
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	2208      	movs	r2, #8
 800f118:	18ba      	adds	r2, r7, r2
 800f11a:	0011      	movs	r1, r2
 800f11c:	0018      	movs	r0, r3
 800f11e:	f007 fc92 	bl	8016a46 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800f122:	4b08      	ldr	r3, [pc, #32]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f124:	4a0c      	ldr	r2, [pc, #48]	; (800f158 <ProcessRadioTxDone+0x180>)
 800f126:	5c9b      	ldrb	r3, [r3, r2]
 800f128:	2201      	movs	r2, #1
 800f12a:	4053      	eors	r3, r2
 800f12c:	b2db      	uxtb	r3, r3
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d003      	beq.n	800f13a <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f132:	4b04      	ldr	r3, [pc, #16]	; (800f144 <ProcessRadioTxDone+0x16c>)
 800f134:	4a0c      	ldr	r2, [pc, #48]	; (800f168 <ProcessRadioTxDone+0x190>)
 800f136:	2100      	movs	r1, #0
 800f138:	5499      	strb	r1, [r3, r2]
    }
}
 800f13a:	46c0      	nop			; (mov r8, r8)
 800f13c:	46bd      	mov	sp, r7
 800f13e:	b00d      	add	sp, #52	; 0x34
 800f140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f142:	46c0      	nop			; (mov r8, r8)
 800f144:	20000548 	.word	0x20000548
 800f148:	00000484 	.word	0x00000484
 800f14c:	0801f0b4 	.word	0x0801f0b4
 800f150:	200008c8 	.word	0x200008c8
 800f154:	200008e0 	.word	0x200008e0
 800f158:	00000414 	.word	0x00000414
 800f15c:	20000940 	.word	0x20000940
 800f160:	2000166c 	.word	0x2000166c
 800f164:	00000415 	.word	0x00000415
 800f168:	0000043d 	.word	0x0000043d

0800f16c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f170:	4a11      	ldr	r2, [pc, #68]	; (800f1b8 <PrepareRxDoneAbort+0x4c>)
 800f172:	23d0      	movs	r3, #208	; 0xd0
 800f174:	009b      	lsls	r3, r3, #2
 800f176:	58d3      	ldr	r3, [r2, r3]
 800f178:	2280      	movs	r2, #128	; 0x80
 800f17a:	431a      	orrs	r2, r3
 800f17c:	0011      	movs	r1, r2
 800f17e:	4a0e      	ldr	r2, [pc, #56]	; (800f1b8 <PrepareRxDoneAbort+0x4c>)
 800f180:	23d0      	movs	r3, #208	; 0xd0
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800f186:	4b0c      	ldr	r3, [pc, #48]	; (800f1b8 <PrepareRxDoneAbort+0x4c>)
 800f188:	4a0c      	ldr	r2, [pc, #48]	; (800f1bc <PrepareRxDoneAbort+0x50>)
 800f18a:	5c9b      	ldrb	r3, [r3, r2]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d002      	beq.n	800f196 <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800f190:	2000      	movs	r0, #0
 800f192:	f001 f98d 	bl	80104b0 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f196:	4b08      	ldr	r3, [pc, #32]	; (800f1b8 <PrepareRxDoneAbort+0x4c>)
 800f198:	4a09      	ldr	r2, [pc, #36]	; (800f1c0 <PrepareRxDoneAbort+0x54>)
 800f19a:	5c99      	ldrb	r1, [r3, r2]
 800f19c:	2002      	movs	r0, #2
 800f19e:	4301      	orrs	r1, r0
 800f1a0:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f1a2:	4b05      	ldr	r3, [pc, #20]	; (800f1b8 <PrepareRxDoneAbort+0x4c>)
 800f1a4:	4a06      	ldr	r2, [pc, #24]	; (800f1c0 <PrepareRxDoneAbort+0x54>)
 800f1a6:	5c99      	ldrb	r1, [r3, r2]
 800f1a8:	2020      	movs	r0, #32
 800f1aa:	4301      	orrs	r1, r0
 800f1ac:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f1ae:	f7ff fef7 	bl	800efa0 <UpdateRxSlotIdleState>
}
 800f1b2:	46c0      	nop			; (mov r8, r8)
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	20000548 	.word	0x20000548
 800f1bc:	00000414 	.word	0x00000414
 800f1c0:	00000481 	.word	0x00000481

0800f1c4 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1c6:	b0a7      	sub	sp, #156	; 0x9c
 800f1c8:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f1ca:	2380      	movs	r3, #128	; 0x80
 800f1cc:	18fb      	adds	r3, r7, r3
 800f1ce:	2213      	movs	r2, #19
 800f1d0:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f1d2:	4bdf      	ldr	r3, [pc, #892]	; (800f550 <ProcessRadioRxDone+0x38c>)
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800f1d8:	267a      	movs	r6, #122	; 0x7a
 800f1da:	19bb      	adds	r3, r7, r6
 800f1dc:	4adc      	ldr	r2, [pc, #880]	; (800f550 <ProcessRadioRxDone+0x38c>)
 800f1de:	8912      	ldrh	r2, [r2, #8]
 800f1e0:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800f1e2:	2478      	movs	r4, #120	; 0x78
 800f1e4:	193b      	adds	r3, r7, r4
 800f1e6:	4ada      	ldr	r2, [pc, #872]	; (800f550 <ProcessRadioRxDone+0x38c>)
 800f1e8:	8952      	ldrh	r2, [r2, #10]
 800f1ea:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800f1ec:	2577      	movs	r5, #119	; 0x77
 800f1ee:	197b      	adds	r3, r7, r5
 800f1f0:	4ad7      	ldr	r2, [pc, #860]	; (800f550 <ProcessRadioRxDone+0x38c>)
 800f1f2:	7b12      	ldrb	r2, [r2, #12]
 800f1f4:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800f1f6:	2376      	movs	r3, #118	; 0x76
 800f1f8:	18fb      	adds	r3, r7, r3
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800f1fe:	2300      	movs	r3, #0
 800f200:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800f202:	4bd4      	ldr	r3, [pc, #848]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f204:	4ad4      	ldr	r2, [pc, #848]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f206:	589b      	ldr	r3, [r3, r2]
 800f208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f20a:	2284      	movs	r2, #132	; 0x84
 800f20c:	18ba      	adds	r2, r7, r2
 800f20e:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800f210:	2383      	movs	r3, #131	; 0x83
 800f212:	18fb      	adds	r3, r7, r3
 800f214:	2200      	movs	r2, #0
 800f216:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f218:	2382      	movs	r3, #130	; 0x82
 800f21a:	18fb      	adds	r3, r7, r3
 800f21c:	2201      	movs	r2, #1
 800f21e:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800f220:	4acc      	ldr	r2, [pc, #816]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f222:	2388      	movs	r3, #136	; 0x88
 800f224:	00db      	lsls	r3, r3, #3
 800f226:	2100      	movs	r1, #0
 800f228:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800f22a:	4bca      	ldr	r3, [pc, #808]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f22c:	193a      	adds	r2, r7, r4
 800f22e:	49cb      	ldr	r1, [pc, #812]	; (800f55c <ProcessRadioRxDone+0x398>)
 800f230:	8812      	ldrh	r2, [r2, #0]
 800f232:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800f234:	4bc7      	ldr	r3, [pc, #796]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f236:	197a      	adds	r2, r7, r5
 800f238:	49c9      	ldr	r1, [pc, #804]	; (800f560 <ProcessRadioRxDone+0x39c>)
 800f23a:	7812      	ldrb	r2, [r2, #0]
 800f23c:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800f23e:	4ac5      	ldr	r2, [pc, #788]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f240:	2390      	movs	r3, #144	; 0x90
 800f242:	00db      	lsls	r3, r3, #3
 800f244:	5cd1      	ldrb	r1, [r2, r3]
 800f246:	4bc3      	ldr	r3, [pc, #780]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f248:	4ac6      	ldr	r2, [pc, #792]	; (800f564 <ProcessRadioRxDone+0x3a0>)
 800f24a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800f24c:	4bc1      	ldr	r3, [pc, #772]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f24e:	4ac6      	ldr	r2, [pc, #792]	; (800f568 <ProcessRadioRxDone+0x3a4>)
 800f250:	2100      	movs	r1, #0
 800f252:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800f254:	4bbf      	ldr	r3, [pc, #764]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f256:	4ac5      	ldr	r2, [pc, #788]	; (800f56c <ProcessRadioRxDone+0x3a8>)
 800f258:	2100      	movs	r1, #0
 800f25a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800f25c:	4bbd      	ldr	r3, [pc, #756]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f25e:	4ac4      	ldr	r2, [pc, #784]	; (800f570 <ProcessRadioRxDone+0x3ac>)
 800f260:	2100      	movs	r1, #0
 800f262:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800f264:	4bbb      	ldr	r3, [pc, #748]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f266:	4ac3      	ldr	r2, [pc, #780]	; (800f574 <ProcessRadioRxDone+0x3b0>)
 800f268:	2100      	movs	r1, #0
 800f26a:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800f26c:	4ab9      	ldr	r2, [pc, #740]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f26e:	2385      	movs	r3, #133	; 0x85
 800f270:	00db      	lsls	r3, r3, #3
 800f272:	2100      	movs	r1, #0
 800f274:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800f276:	4bb7      	ldr	r3, [pc, #732]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f278:	4abf      	ldr	r2, [pc, #764]	; (800f578 <ProcessRadioRxDone+0x3b4>)
 800f27a:	2100      	movs	r1, #0
 800f27c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800f27e:	4bb5      	ldr	r3, [pc, #724]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f280:	4abe      	ldr	r2, [pc, #760]	; (800f57c <ProcessRadioRxDone+0x3b8>)
 800f282:	2100      	movs	r1, #0
 800f284:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f286:	4ab3      	ldr	r2, [pc, #716]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f288:	2386      	movs	r3, #134	; 0x86
 800f28a:	00db      	lsls	r3, r3, #3
 800f28c:	2100      	movs	r1, #0
 800f28e:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f290:	4bb0      	ldr	r3, [pc, #704]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f292:	4abb      	ldr	r2, [pc, #748]	; (800f580 <ProcessRadioRxDone+0x3bc>)
 800f294:	2100      	movs	r1, #0
 800f296:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800f298:	4bae      	ldr	r3, [pc, #696]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f29a:	4aba      	ldr	r2, [pc, #744]	; (800f584 <ProcessRadioRxDone+0x3c0>)
 800f29c:	2100      	movs	r1, #0
 800f29e:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f2a0:	4aac      	ldr	r2, [pc, #688]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f2a2:	2387      	movs	r3, #135	; 0x87
 800f2a4:	00db      	lsls	r3, r3, #3
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800f2aa:	4bb7      	ldr	r3, [pc, #732]	; (800f588 <ProcessRadioRxDone+0x3c4>)
 800f2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ae:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f2b0:	4bb6      	ldr	r3, [pc, #728]	; (800f58c <ProcessRadioRxDone+0x3c8>)
 800f2b2:	0018      	movs	r0, r3
 800f2b4:	f00d fbd6 	bl	801ca64 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f2b8:	19bb      	adds	r3, r7, r6
 800f2ba:	881a      	ldrh	r2, [r3, #0]
 800f2bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f2be:	0011      	movs	r1, r2
 800f2c0:	0018      	movs	r0, r3
 800f2c2:	f005 f9f1 	bl	80146a8 <LoRaMacClassBRxBeacon>
 800f2c6:	1e03      	subs	r3, r0, #0
 800f2c8:	d00c      	beq.n	800f2e4 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f2ca:	4ba2      	ldr	r3, [pc, #648]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f2cc:	193a      	adds	r2, r7, r4
 800f2ce:	49b0      	ldr	r1, [pc, #704]	; (800f590 <ProcessRadioRxDone+0x3cc>)
 800f2d0:	8812      	ldrh	r2, [r2, #0]
 800f2d2:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f2d4:	4a9f      	ldr	r2, [pc, #636]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f2d6:	1979      	adds	r1, r7, r5
 800f2d8:	238f      	movs	r3, #143	; 0x8f
 800f2da:	00db      	lsls	r3, r3, #3
 800f2dc:	7809      	ldrb	r1, [r1, #0]
 800f2de:	54d1      	strb	r1, [r2, r3]
        return;
 800f2e0:	f000 fc9e 	bl	800fc20 <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f2e4:	4b9b      	ldr	r3, [pc, #620]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f2e6:	4a9c      	ldr	r2, [pc, #624]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f2e8:	589b      	ldr	r3, [r3, r2]
 800f2ea:	227c      	movs	r2, #124	; 0x7c
 800f2ec:	5c9b      	ldrb	r3, [r3, r2]
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d11c      	bne.n	800f32c <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f2f2:	f005 f9eb 	bl	80146cc <LoRaMacClassBIsPingExpected>
 800f2f6:	1e03      	subs	r3, r0, #0
 800f2f8:	d00a      	beq.n	800f310 <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f2fa:	2000      	movs	r0, #0
 800f2fc:	f005 f9a2 	bl	8014644 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f300:	2000      	movs	r0, #0
 800f302:	f005 f9c1 	bl	8014688 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f306:	4b93      	ldr	r3, [pc, #588]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f308:	4a96      	ldr	r2, [pc, #600]	; (800f564 <ProcessRadioRxDone+0x3a0>)
 800f30a:	2104      	movs	r1, #4
 800f30c:	5499      	strb	r1, [r3, r2]
 800f30e:	e00d      	b.n	800f32c <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f310:	f005 f9e2 	bl	80146d8 <LoRaMacClassBIsMulticastExpected>
 800f314:	1e03      	subs	r3, r0, #0
 800f316:	d009      	beq.n	800f32c <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f318:	2000      	movs	r0, #0
 800f31a:	f005 f99d 	bl	8014658 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f31e:	2000      	movs	r0, #0
 800f320:	f005 f9ba 	bl	8014698 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f324:	4b8b      	ldr	r3, [pc, #556]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f326:	4a8f      	ldr	r2, [pc, #572]	; (800f564 <ProcessRadioRxDone+0x3a0>)
 800f328:	2105      	movs	r1, #5
 800f32a:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f32c:	2276      	movs	r2, #118	; 0x76
 800f32e:	18bb      	adds	r3, r7, r2
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	18ba      	adds	r2, r7, r2
 800f334:	1c59      	adds	r1, r3, #1
 800f336:	7011      	strb	r1, [r2, #0]
 800f338:	001a      	movs	r2, r3
 800f33a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f33c:	189b      	adds	r3, r3, r2
 800f33e:	781a      	ldrb	r2, [r3, #0]
 800f340:	2174      	movs	r1, #116	; 0x74
 800f342:	187b      	adds	r3, r7, r1
 800f344:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800f346:	187b      	adds	r3, r7, r1
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	061b      	lsls	r3, r3, #24
 800f34c:	0f5b      	lsrs	r3, r3, #29
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	2b07      	cmp	r3, #7
 800f352:	d101      	bne.n	800f358 <ProcessRadioRxDone+0x194>
 800f354:	f000 fc0c 	bl	800fb70 <ProcessRadioRxDone+0x9ac>
 800f358:	dd01      	ble.n	800f35e <ProcessRadioRxDone+0x19a>
 800f35a:	f000 fc38 	bl	800fbce <ProcessRadioRxDone+0xa0a>
 800f35e:	2b05      	cmp	r3, #5
 800f360:	d100      	bne.n	800f364 <ProcessRadioRxDone+0x1a0>
 800f362:	e119      	b.n	800f598 <ProcessRadioRxDone+0x3d4>
 800f364:	dd01      	ble.n	800f36a <ProcessRadioRxDone+0x1a6>
 800f366:	f000 fc32 	bl	800fbce <ProcessRadioRxDone+0xa0a>
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d004      	beq.n	800f378 <ProcessRadioRxDone+0x1b4>
 800f36e:	2b03      	cmp	r3, #3
 800f370:	d100      	bne.n	800f374 <ProcessRadioRxDone+0x1b0>
 800f372:	e115      	b.n	800f5a0 <ProcessRadioRxDone+0x3dc>
 800f374:	f000 fc2b 	bl	800fbce <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f378:	237a      	movs	r3, #122	; 0x7a
 800f37a:	18fb      	adds	r3, r7, r3
 800f37c:	881b      	ldrh	r3, [r3, #0]
 800f37e:	2b10      	cmp	r3, #16
 800f380:	d807      	bhi.n	800f392 <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f382:	4b74      	ldr	r3, [pc, #464]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f384:	4a83      	ldr	r2, [pc, #524]	; (800f594 <ProcessRadioRxDone+0x3d0>)
 800f386:	2101      	movs	r1, #1
 800f388:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f38a:	f7ff feef 	bl	800f16c <PrepareRxDoneAbort>
                return;
 800f38e:	f000 fc47 	bl	800fc20 <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800f392:	2108      	movs	r1, #8
 800f394:	187b      	adds	r3, r7, r1
 800f396:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f398:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800f39a:	237a      	movs	r3, #122	; 0x7a
 800f39c:	18fb      	adds	r3, r7, r3
 800f39e:	881b      	ldrh	r3, [r3, #0]
 800f3a0:	b2da      	uxtb	r2, r3
 800f3a2:	187b      	adds	r3, r7, r1
 800f3a4:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800f3a6:	4b6b      	ldr	r3, [pc, #428]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f3a8:	4a6b      	ldr	r2, [pc, #428]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f3aa:	589a      	ldr	r2, [r3, r2]
 800f3ac:	23b2      	movs	r3, #178	; 0xb2
 800f3ae:	005b      	lsls	r3, r3, #1
 800f3b0:	5cd3      	ldrb	r3, [r2, r3]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d007      	beq.n	800f3c6 <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f3b6:	4b67      	ldr	r3, [pc, #412]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f3b8:	4a76      	ldr	r2, [pc, #472]	; (800f594 <ProcessRadioRxDone+0x3d0>)
 800f3ba:	2101      	movs	r1, #1
 800f3bc:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f3be:	f7ff fed5 	bl	800f16c <PrepareRxDoneAbort>
                return;
 800f3c2:	f000 fc2d 	bl	800fc20 <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800f3c6:	f7fe fc21 	bl	800dc0c <SecureElementGetJoinEui>
 800f3ca:	0001      	movs	r1, r0
 800f3cc:	2680      	movs	r6, #128	; 0x80
 800f3ce:	19bc      	adds	r4, r7, r6
 800f3d0:	2508      	movs	r5, #8
 800f3d2:	197b      	adds	r3, r7, r5
 800f3d4:	001a      	movs	r2, r3
 800f3d6:	20ff      	movs	r0, #255	; 0xff
 800f3d8:	f006 fcba 	bl	8015d50 <LoRaMacCryptoHandleJoinAccept>
 800f3dc:	0003      	movs	r3, r0
 800f3de:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f3e0:	19bb      	adds	r3, r7, r6
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d000      	beq.n	800f3ea <ProcessRadioRxDone+0x226>
 800f3e8:	e0a7      	b.n	800f53a <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f3ea:	002c      	movs	r4, r5
 800f3ec:	193b      	adds	r3, r7, r4
 800f3ee:	7a59      	ldrb	r1, [r3, #9]
 800f3f0:	4b58      	ldr	r3, [pc, #352]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f3f2:	4a59      	ldr	r2, [pc, #356]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f3f4:	589b      	ldr	r3, [r3, r2]
 800f3f6:	000a      	movs	r2, r1
 800f3f8:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f3fa:	4b56      	ldr	r3, [pc, #344]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f3fc:	4a56      	ldr	r2, [pc, #344]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f3fe:	589b      	ldr	r3, [r3, r2]
 800f400:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f402:	193b      	adds	r3, r7, r4
 800f404:	7a9b      	ldrb	r3, [r3, #10]
 800f406:	021a      	lsls	r2, r3, #8
 800f408:	4b52      	ldr	r3, [pc, #328]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f40a:	4853      	ldr	r0, [pc, #332]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f40c:	581b      	ldr	r3, [r3, r0]
 800f40e:	430a      	orrs	r2, r1
 800f410:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f412:	4b50      	ldr	r3, [pc, #320]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f414:	4a50      	ldr	r2, [pc, #320]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f416:	589b      	ldr	r3, [r3, r2]
 800f418:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f41a:	193b      	adds	r3, r7, r4
 800f41c:	7adb      	ldrb	r3, [r3, #11]
 800f41e:	041a      	lsls	r2, r3, #16
 800f420:	4b4c      	ldr	r3, [pc, #304]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f422:	484d      	ldr	r0, [pc, #308]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f424:	581b      	ldr	r3, [r3, r0]
 800f426:	430a      	orrs	r2, r1
 800f428:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800f42a:	4b4a      	ldr	r3, [pc, #296]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f42c:	4a4a      	ldr	r2, [pc, #296]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f42e:	589b      	ldr	r3, [r3, r2]
 800f430:	0020      	movs	r0, r4
 800f432:	183a      	adds	r2, r7, r0
 800f434:	68d2      	ldr	r2, [r2, #12]
 800f436:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f438:	183b      	adds	r3, r7, r0
 800f43a:	7c1b      	ldrb	r3, [r3, #16]
 800f43c:	065b      	lsls	r3, r3, #25
 800f43e:	0f5b      	lsrs	r3, r3, #29
 800f440:	b2d9      	uxtb	r1, r3
 800f442:	4b44      	ldr	r3, [pc, #272]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f444:	4a44      	ldr	r2, [pc, #272]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f446:	589b      	ldr	r3, [r3, r2]
 800f448:	22a5      	movs	r2, #165	; 0xa5
 800f44a:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f44c:	183b      	adds	r3, r7, r0
 800f44e:	7c1b      	ldrb	r3, [r3, #16]
 800f450:	071b      	lsls	r3, r3, #28
 800f452:	0f1b      	lsrs	r3, r3, #28
 800f454:	b2d9      	uxtb	r1, r3
 800f456:	4b3f      	ldr	r3, [pc, #252]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f458:	4a3f      	ldr	r2, [pc, #252]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f45a:	589b      	ldr	r3, [r3, r2]
 800f45c:	22ac      	movs	r2, #172	; 0xac
 800f45e:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f460:	183b      	adds	r3, r7, r0
 800f462:	7c1b      	ldrb	r3, [r3, #16]
 800f464:	071b      	lsls	r3, r3, #28
 800f466:	0f1b      	lsrs	r3, r3, #28
 800f468:	b2d9      	uxtb	r1, r3
 800f46a:	4b3a      	ldr	r3, [pc, #232]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f46c:	4a3a      	ldr	r2, [pc, #232]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f46e:	589b      	ldr	r3, [r3, r2]
 800f470:	22b4      	movs	r2, #180	; 0xb4
 800f472:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f474:	183b      	adds	r3, r7, r0
 800f476:	7c59      	ldrb	r1, [r3, #17]
 800f478:	4b36      	ldr	r3, [pc, #216]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f47a:	4a37      	ldr	r2, [pc, #220]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f47c:	589b      	ldr	r3, [r3, r2]
 800f47e:	2294      	movs	r2, #148	; 0x94
 800f480:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800f482:	4b34      	ldr	r3, [pc, #208]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f484:	4a34      	ldr	r2, [pc, #208]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f486:	589b      	ldr	r3, [r3, r2]
 800f488:	2294      	movs	r2, #148	; 0x94
 800f48a:	589b      	ldr	r3, [r3, r2]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d105      	bne.n	800f49c <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800f490:	4b30      	ldr	r3, [pc, #192]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f492:	4a31      	ldr	r2, [pc, #196]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f494:	589b      	ldr	r3, [r3, r2]
 800f496:	2294      	movs	r2, #148	; 0x94
 800f498:	2101      	movs	r1, #1
 800f49a:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800f49c:	4b2d      	ldr	r3, [pc, #180]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f49e:	4a2e      	ldr	r2, [pc, #184]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f4a0:	589b      	ldr	r3, [r3, r2]
 800f4a2:	2294      	movs	r2, #148	; 0x94
 800f4a4:	589a      	ldr	r2, [r3, r2]
 800f4a6:	4b2b      	ldr	r3, [pc, #172]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f4a8:	492b      	ldr	r1, [pc, #172]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f4aa:	5859      	ldr	r1, [r3, r1]
 800f4ac:	0013      	movs	r3, r2
 800f4ae:	015b      	lsls	r3, r3, #5
 800f4b0:	1a9b      	subs	r3, r3, r2
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	189b      	adds	r3, r3, r2
 800f4b6:	00db      	lsls	r3, r3, #3
 800f4b8:	001a      	movs	r2, r3
 800f4ba:	2394      	movs	r3, #148	; 0x94
 800f4bc:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800f4be:	4b25      	ldr	r3, [pc, #148]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f4c0:	4a25      	ldr	r2, [pc, #148]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f4c2:	589b      	ldr	r3, [r3, r2]
 800f4c4:	2294      	movs	r2, #148	; 0x94
 800f4c6:	589b      	ldr	r3, [r3, r2]
 800f4c8:	4a22      	ldr	r2, [pc, #136]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f4ca:	4923      	ldr	r1, [pc, #140]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f4cc:	5852      	ldr	r2, [r2, r1]
 800f4ce:	21fa      	movs	r1, #250	; 0xfa
 800f4d0:	0089      	lsls	r1, r1, #2
 800f4d2:	468c      	mov	ip, r1
 800f4d4:	4463      	add	r3, ip
 800f4d6:	2198      	movs	r1, #152	; 0x98
 800f4d8:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800f4da:	4b1e      	ldr	r3, [pc, #120]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f4dc:	4a1e      	ldr	r2, [pc, #120]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f4de:	589a      	ldr	r2, [r3, r2]
 800f4e0:	23b1      	movs	r3, #177	; 0xb1
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f4e8:	216c      	movs	r1, #108	; 0x6c
 800f4ea:	187b      	adds	r3, r7, r1
 800f4ec:	2208      	movs	r2, #8
 800f4ee:	18ba      	adds	r2, r7, r2
 800f4f0:	3212      	adds	r2, #18
 800f4f2:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f4f4:	237a      	movs	r3, #122	; 0x7a
 800f4f6:	18fb      	adds	r3, r7, r3
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	3b11      	subs	r3, #17
 800f4fe:	b2da      	uxtb	r2, r3
 800f500:	187b      	adds	r3, r7, r1
 800f502:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800f504:	4b13      	ldr	r3, [pc, #76]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f506:	4a14      	ldr	r2, [pc, #80]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f508:	589b      	ldr	r3, [r3, r2]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	187a      	adds	r2, r7, r1
 800f50e:	0011      	movs	r1, r2
 800f510:	0018      	movs	r0, r3
 800f512:	f007 faf4 	bl	8016afe <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f516:	4b0f      	ldr	r3, [pc, #60]	; (800f554 <ProcessRadioRxDone+0x390>)
 800f518:	4a0f      	ldr	r2, [pc, #60]	; (800f558 <ProcessRadioRxDone+0x394>)
 800f51a:	589a      	ldr	r2, [r3, r2]
 800f51c:	23b2      	movs	r3, #178	; 0xb2
 800f51e:	005b      	lsls	r3, r3, #1
 800f520:	2102      	movs	r1, #2
 800f522:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f524:	2001      	movs	r0, #1
 800f526:	f005 fe49 	bl	80151bc <LoRaMacConfirmQueueIsCmdActive>
 800f52a:	1e03      	subs	r3, r0, #0
 800f52c:	d100      	bne.n	800f530 <ProcessRadioRxDone+0x36c>
 800f52e:	e355      	b.n	800fbdc <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f530:	2101      	movs	r1, #1
 800f532:	2000      	movs	r0, #0
 800f534:	f005 fda6 	bl	8015084 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800f538:	e350      	b.n	800fbdc <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f53a:	2001      	movs	r0, #1
 800f53c:	f005 fe3e 	bl	80151bc <LoRaMacConfirmQueueIsCmdActive>
 800f540:	1e03      	subs	r3, r0, #0
 800f542:	d100      	bne.n	800f546 <ProcessRadioRxDone+0x382>
 800f544:	e34a      	b.n	800fbdc <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f546:	2101      	movs	r1, #1
 800f548:	2007      	movs	r0, #7
 800f54a:	f005 fd9b 	bl	8015084 <LoRaMacConfirmQueueSetStatus>
            break;
 800f54e:	e345      	b.n	800fbdc <ProcessRadioRxDone+0xa18>
 800f550:	20001670 	.word	0x20001670
 800f554:	20000548 	.word	0x20000548
 800f558:	00000484 	.word	0x00000484
 800f55c:	0000042a 	.word	0x0000042a
 800f560:	0000042c 	.word	0x0000042c
 800f564:	0000042d 	.word	0x0000042d
 800f568:	0000041f 	.word	0x0000041f
 800f56c:	0000041e 	.word	0x0000041e
 800f570:	00000421 	.word	0x00000421
 800f574:	00000424 	.word	0x00000424
 800f578:	00000429 	.word	0x00000429
 800f57c:	0000042e 	.word	0x0000042e
 800f580:	0000041c 	.word	0x0000041c
 800f584:	00000434 	.word	0x00000434
 800f588:	0801f0b4 	.word	0x0801f0b4
 800f58c:	200008e0 	.word	0x200008e0
 800f590:	00000476 	.word	0x00000476
 800f594:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f598:	4bd5      	ldr	r3, [pc, #852]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f59a:	4ad6      	ldr	r2, [pc, #856]	; (800f8f4 <ProcessRadioRxDone+0x730>)
 800f59c:	2101      	movs	r1, #1
 800f59e:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f5a0:	4bd3      	ldr	r3, [pc, #844]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f5a2:	4ad5      	ldr	r2, [pc, #852]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f5a4:	589b      	ldr	r3, [r3, r2]
 800f5a6:	22b9      	movs	r2, #185	; 0xb9
 800f5a8:	5c9a      	ldrb	r2, [r3, r2]
 800f5aa:	2164      	movs	r1, #100	; 0x64
 800f5ac:	187b      	adds	r3, r7, r1
 800f5ae:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f5b0:	4acf      	ldr	r2, [pc, #828]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f5b2:	2384      	movs	r3, #132	; 0x84
 800f5b4:	00db      	lsls	r3, r3, #3
 800f5b6:	5cd3      	ldrb	r3, [r2, r3]
 800f5b8:	b25a      	sxtb	r2, r3
 800f5ba:	187b      	adds	r3, r7, r1
 800f5bc:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f5be:	187b      	adds	r3, r7, r1
 800f5c0:	220d      	movs	r2, #13
 800f5c2:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800f5c4:	4bca      	ldr	r3, [pc, #808]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f5c6:	4acc      	ldr	r2, [pc, #816]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f5c8:	589b      	ldr	r3, [r3, r2]
 800f5ca:	22ca      	movs	r2, #202	; 0xca
 800f5cc:	5c9b      	ldrb	r3, [r3, r2]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d002      	beq.n	800f5d8 <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f5d2:	187b      	adds	r3, r7, r1
 800f5d4:	220e      	movs	r2, #14
 800f5d6:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f5d8:	4bc5      	ldr	r3, [pc, #788]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f5da:	4ac7      	ldr	r2, [pc, #796]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f5dc:	589b      	ldr	r3, [r3, r2]
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	2264      	movs	r2, #100	; 0x64
 800f5e2:	18ba      	adds	r2, r7, r2
 800f5e4:	0011      	movs	r1, r2
 800f5e6:	0018      	movs	r0, r3
 800f5e8:	f007 fa05 	bl	80169f6 <RegionGetPhyParam>
 800f5ec:	0003      	movs	r3, r0
 800f5ee:	001a      	movs	r2, r3
 800f5f0:	2360      	movs	r3, #96	; 0x60
 800f5f2:	18fb      	adds	r3, r7, r3
 800f5f4:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f5f6:	237a      	movs	r3, #122	; 0x7a
 800f5f8:	18fb      	adds	r3, r7, r3
 800f5fa:	881b      	ldrh	r3, [r3, #0]
 800f5fc:	3b0d      	subs	r3, #13
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	b21b      	sxth	r3, r3
 800f602:	1c1a      	adds	r2, r3, #0
 800f604:	b213      	sxth	r3, r2
 800f606:	2b00      	cmp	r3, #0
 800f608:	da01      	bge.n	800f60e <ProcessRadioRxDone+0x44a>
 800f60a:	2300      	movs	r3, #0
 800f60c:	1c1a      	adds	r2, r3, #0
 800f60e:	b212      	sxth	r2, r2
 800f610:	2360      	movs	r3, #96	; 0x60
 800f612:	18fb      	adds	r3, r7, r3
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	b21b      	sxth	r3, r3
 800f618:	429a      	cmp	r2, r3
 800f61a:	dc04      	bgt.n	800f626 <ProcessRadioRxDone+0x462>
 800f61c:	237a      	movs	r3, #122	; 0x7a
 800f61e:	18fb      	adds	r3, r7, r3
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	2b0b      	cmp	r3, #11
 800f624:	d806      	bhi.n	800f634 <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f626:	4bb2      	ldr	r3, [pc, #712]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f628:	4ab4      	ldr	r2, [pc, #720]	; (800f8fc <ProcessRadioRxDone+0x738>)
 800f62a:	2101      	movs	r1, #1
 800f62c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f62e:	f7ff fd9d 	bl	800f16c <PrepareRxDoneAbort>
                return;
 800f632:	e2f5      	b.n	800fc20 <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 800f634:	2130      	movs	r1, #48	; 0x30
 800f636:	187b      	adds	r3, r7, r1
 800f638:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f63a:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800f63c:	237a      	movs	r3, #122	; 0x7a
 800f63e:	18fb      	adds	r3, r7, r3
 800f640:	881b      	ldrh	r3, [r3, #0]
 800f642:	b2da      	uxtb	r2, r3
 800f644:	187b      	adds	r3, r7, r1
 800f646:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f648:	187b      	adds	r3, r7, r1
 800f64a:	4aad      	ldr	r2, [pc, #692]	; (800f900 <ProcessRadioRxDone+0x73c>)
 800f64c:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f64e:	0008      	movs	r0, r1
 800f650:	187b      	adds	r3, r7, r1
 800f652:	2228      	movs	r2, #40	; 0x28
 800f654:	21ff      	movs	r1, #255	; 0xff
 800f656:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f658:	183b      	adds	r3, r7, r0
 800f65a:	0018      	movs	r0, r3
 800f65c:	f006 fee4 	bl	8016428 <LoRaMacParserData>
 800f660:	1e03      	subs	r3, r0, #0
 800f662:	d006      	beq.n	800f672 <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f664:	4ba2      	ldr	r3, [pc, #648]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f666:	4aa5      	ldr	r2, [pc, #660]	; (800f8fc <ProcessRadioRxDone+0x738>)
 800f668:	2101      	movs	r1, #1
 800f66a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f66c:	f7ff fd7e 	bl	800f16c <PrepareRxDoneAbort>
                return;
 800f670:	e2d6      	b.n	800fc20 <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f672:	2030      	movs	r0, #48	; 0x30
 800f674:	183b      	adds	r3, r7, r0
 800f676:	689a      	ldr	r2, [r3, #8]
 800f678:	4b9d      	ldr	r3, [pc, #628]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f67a:	49a2      	ldr	r1, [pc, #648]	; (800f904 <ProcessRadioRxDone+0x740>)
 800f67c:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f67e:	1cba      	adds	r2, r7, #2
 800f680:	183b      	adds	r3, r7, r0
 800f682:	0011      	movs	r1, r2
 800f684:	0018      	movs	r0, r3
 800f686:	f003 f861 	bl	801274c <DetermineFrameType>
 800f68a:	1e03      	subs	r3, r0, #0
 800f68c:	d006      	beq.n	800f69c <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f68e:	4b98      	ldr	r3, [pc, #608]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f690:	4a9a      	ldr	r2, [pc, #616]	; (800f8fc <ProcessRadioRxDone+0x738>)
 800f692:	2101      	movs	r1, #1
 800f694:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f696:	f7ff fd69 	bl	800f16c <PrepareRxDoneAbort>
                return;
 800f69a:	e2c1      	b.n	800fc20 <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f69c:	2383      	movs	r3, #131	; 0x83
 800f69e:	18fb      	adds	r3, r7, r3
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f6a8:	2381      	movs	r3, #129	; 0x81
 800f6aa:	18fb      	adds	r3, r7, r3
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	701a      	strb	r2, [r3, #0]
 800f6b0:	e05b      	b.n	800f76a <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f6b2:	4b8f      	ldr	r3, [pc, #572]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f6b4:	4a90      	ldr	r2, [pc, #576]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f6b6:	589a      	ldr	r2, [r3, r2]
 800f6b8:	2481      	movs	r4, #129	; 0x81
 800f6ba:	193b      	adds	r3, r7, r4
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	212c      	movs	r1, #44	; 0x2c
 800f6c0:	434b      	muls	r3, r1
 800f6c2:	18d3      	adds	r3, r2, r3
 800f6c4:	3354      	adds	r3, #84	; 0x54
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	2330      	movs	r3, #48	; 0x30
 800f6ca:	18fb      	adds	r3, r7, r3
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d145      	bne.n	800f75e <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f6d2:	4b87      	ldr	r3, [pc, #540]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f6d4:	4a88      	ldr	r2, [pc, #544]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f6d6:	589a      	ldr	r2, [r3, r2]
 800f6d8:	193b      	adds	r3, r7, r4
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	2152      	movs	r1, #82	; 0x52
 800f6de:	202c      	movs	r0, #44	; 0x2c
 800f6e0:	4343      	muls	r3, r0
 800f6e2:	18d3      	adds	r3, r2, r3
 800f6e4:	185b      	adds	r3, r3, r1
 800f6e6:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d038      	beq.n	800f75e <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 800f6ec:	2383      	movs	r3, #131	; 0x83
 800f6ee:	18fb      	adds	r3, r7, r3
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800f6f4:	4b7e      	ldr	r3, [pc, #504]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f6f6:	4a80      	ldr	r2, [pc, #512]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f6f8:	5899      	ldr	r1, [r3, r2]
 800f6fa:	0025      	movs	r5, r4
 800f6fc:	193b      	adds	r3, r7, r4
 800f6fe:	781a      	ldrb	r2, [r3, #0]
 800f700:	2382      	movs	r3, #130	; 0x82
 800f702:	18fb      	adds	r3, r7, r3
 800f704:	2053      	movs	r0, #83	; 0x53
 800f706:	242c      	movs	r4, #44	; 0x2c
 800f708:	4362      	muls	r2, r4
 800f70a:	188a      	adds	r2, r1, r2
 800f70c:	1812      	adds	r2, r2, r0
 800f70e:	7812      	ldrb	r2, [r2, #0]
 800f710:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800f712:	4b77      	ldr	r3, [pc, #476]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f714:	4a78      	ldr	r2, [pc, #480]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f716:	589a      	ldr	r2, [r3, r2]
 800f718:	002c      	movs	r4, r5
 800f71a:	193b      	adds	r3, r7, r4
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	212c      	movs	r1, #44	; 0x2c
 800f720:	434b      	muls	r3, r1
 800f722:	18d3      	adds	r3, r2, r3
 800f724:	3370      	adds	r3, #112	; 0x70
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800f72c:	4b70      	ldr	r3, [pc, #448]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f72e:	4a72      	ldr	r2, [pc, #456]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f730:	589a      	ldr	r2, [r3, r2]
 800f732:	193b      	adds	r3, r7, r4
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	212c      	movs	r1, #44	; 0x2c
 800f738:	434b      	muls	r3, r1
 800f73a:	18d3      	adds	r3, r2, r3
 800f73c:	3354      	adds	r3, #84	; 0x54
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2284      	movs	r2, #132	; 0x84
 800f742:	18ba      	adds	r2, r7, r2
 800f744:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f746:	4b6a      	ldr	r3, [pc, #424]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f748:	4a6b      	ldr	r2, [pc, #428]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f74a:	589b      	ldr	r3, [r3, r2]
 800f74c:	227c      	movs	r2, #124	; 0x7c
 800f74e:	5c9b      	ldrb	r3, [r3, r2]
 800f750:	2b02      	cmp	r3, #2
 800f752:	d110      	bne.n	800f776 <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f754:	4b66      	ldr	r3, [pc, #408]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f756:	4a6c      	ldr	r2, [pc, #432]	; (800f908 <ProcessRadioRxDone+0x744>)
 800f758:	2103      	movs	r1, #3
 800f75a:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800f75c:	e00b      	b.n	800f776 <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f75e:	2181      	movs	r1, #129	; 0x81
 800f760:	187b      	adds	r3, r7, r1
 800f762:	781a      	ldrb	r2, [r3, #0]
 800f764:	187b      	adds	r3, r7, r1
 800f766:	3201      	adds	r2, #1
 800f768:	701a      	strb	r2, [r3, #0]
 800f76a:	2381      	movs	r3, #129	; 0x81
 800f76c:	18fb      	adds	r3, r7, r3
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d09e      	beq.n	800f6b2 <ProcessRadioRxDone+0x4ee>
 800f774:	e000      	b.n	800f778 <ProcessRadioRxDone+0x5b4>
                    break;
 800f776:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f778:	2383      	movs	r3, #131	; 0x83
 800f77a:	18fb      	adds	r3, r7, r3
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d119      	bne.n	800f7b6 <ProcessRadioRxDone+0x5f2>
 800f782:	1cbb      	adds	r3, r7, #2
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	2b03      	cmp	r3, #3
 800f788:	d10e      	bne.n	800f7a8 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f78a:	2130      	movs	r1, #48	; 0x30
 800f78c:	187b      	adds	r3, r7, r1
 800f78e:	7b1b      	ldrb	r3, [r3, #12]
 800f790:	2220      	movs	r2, #32
 800f792:	4013      	ands	r3, r2
 800f794:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f796:	2b00      	cmp	r3, #0
 800f798:	d106      	bne.n	800f7a8 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f79a:	187b      	adds	r3, r7, r1
 800f79c:	7b1b      	ldrb	r3, [r3, #12]
 800f79e:	2240      	movs	r2, #64	; 0x40
 800f7a0:	4013      	ands	r3, r2
 800f7a2:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d006      	beq.n	800f7b6 <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f7a8:	4b51      	ldr	r3, [pc, #324]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f7aa:	4a54      	ldr	r2, [pc, #336]	; (800f8fc <ProcessRadioRxDone+0x738>)
 800f7ac:	2101      	movs	r1, #1
 800f7ae:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f7b0:	f7ff fcdc 	bl	800f16c <PrepareRxDoneAbort>
                return;
 800f7b4:	e234      	b.n	800fc20 <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800f7b6:	2164      	movs	r1, #100	; 0x64
 800f7b8:	187b      	adds	r3, r7, r1
 800f7ba:	2215      	movs	r2, #21
 800f7bc:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f7be:	4b4c      	ldr	r3, [pc, #304]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f7c0:	4a4d      	ldr	r2, [pc, #308]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f7c2:	589b      	ldr	r3, [r3, r2]
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	187a      	adds	r2, r7, r1
 800f7c8:	0011      	movs	r1, r2
 800f7ca:	0018      	movs	r0, r3
 800f7cc:	f007 f913 	bl	80169f6 <RegionGetPhyParam>
 800f7d0:	0003      	movs	r3, r0
 800f7d2:	001a      	movs	r2, r3
 800f7d4:	2060      	movs	r0, #96	; 0x60
 800f7d6:	183b      	adds	r3, r7, r0
 800f7d8:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800f7da:	1cbb      	adds	r3, r7, #2
 800f7dc:	781d      	ldrb	r5, [r3, #0]
 800f7de:	4b44      	ldr	r3, [pc, #272]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f7e0:	4a45      	ldr	r2, [pc, #276]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f7e2:	5899      	ldr	r1, [r3, r2]
 800f7e4:	183b      	adds	r3, r7, r0
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	2280      	movs	r2, #128	; 0x80
 800f7ec:	18bc      	adds	r4, r7, r2
 800f7ee:	22b0      	movs	r2, #176	; 0xb0
 800f7f0:	0052      	lsls	r2, r2, #1
 800f7f2:	588e      	ldr	r6, [r1, r2]
 800f7f4:	2130      	movs	r1, #48	; 0x30
 800f7f6:	1879      	adds	r1, r7, r1
 800f7f8:	2082      	movs	r0, #130	; 0x82
 800f7fa:	183a      	adds	r2, r7, r0
 800f7fc:	7810      	ldrb	r0, [r2, #0]
 800f7fe:	1d3a      	adds	r2, r7, #4
 800f800:	9202      	str	r2, [sp, #8]
 800f802:	1cfa      	adds	r2, r7, #3
 800f804:	9201      	str	r2, [sp, #4]
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	0033      	movs	r3, r6
 800f80a:	000a      	movs	r2, r1
 800f80c:	0029      	movs	r1, r5
 800f80e:	f000 fe91 	bl	8010534 <GetFCntDown>
 800f812:	0003      	movs	r3, r0
 800f814:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f816:	2280      	movs	r2, #128	; 0x80
 800f818:	18bb      	adds	r3, r7, r2
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d040      	beq.n	800f8a2 <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f820:	18bb      	adds	r3, r7, r2
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	2b07      	cmp	r3, #7
 800f826:	d126      	bne.n	800f876 <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f828:	4b31      	ldr	r3, [pc, #196]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f82a:	4a34      	ldr	r2, [pc, #208]	; (800f8fc <ProcessRadioRxDone+0x738>)
 800f82c:	2108      	movs	r1, #8
 800f82e:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800f830:	4b2f      	ldr	r3, [pc, #188]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f832:	4a31      	ldr	r2, [pc, #196]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f834:	589a      	ldr	r2, [r3, r2]
 800f836:	23b1      	movs	r3, #177	; 0xb1
 800f838:	005b      	lsls	r3, r3, #1
 800f83a:	5cd3      	ldrb	r3, [r2, r3]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d128      	bne.n	800f892 <ProcessRadioRxDone+0x6ce>
 800f840:	2374      	movs	r3, #116	; 0x74
 800f842:	18fb      	adds	r3, r7, r3
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	221f      	movs	r2, #31
 800f848:	4393      	bics	r3, r2
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	2ba0      	cmp	r3, #160	; 0xa0
 800f84e:	d120      	bne.n	800f892 <ProcessRadioRxDone+0x6ce>
 800f850:	4b27      	ldr	r3, [pc, #156]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f852:	4a29      	ldr	r2, [pc, #164]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f854:	589a      	ldr	r2, [r3, r2]
 800f856:	23b4      	movs	r3, #180	; 0xb4
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	58d2      	ldr	r2, [r2, r3]
 800f85c:	2130      	movs	r1, #48	; 0x30
 800f85e:	187b      	adds	r3, r7, r1
 800f860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f862:	429a      	cmp	r2, r3
 800f864:	d115      	bne.n	800f892 <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800f866:	4b22      	ldr	r3, [pc, #136]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f868:	4a23      	ldr	r2, [pc, #140]	; (800f8f8 <ProcessRadioRxDone+0x734>)
 800f86a:	589a      	ldr	r2, [r3, r2]
 800f86c:	234c      	movs	r3, #76	; 0x4c
 800f86e:	33ff      	adds	r3, #255	; 0xff
 800f870:	2101      	movs	r1, #1
 800f872:	54d1      	strb	r1, [r2, r3]
 800f874:	e00d      	b.n	800f892 <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800f876:	2380      	movs	r3, #128	; 0x80
 800f878:	18fb      	adds	r3, r7, r3
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	2b08      	cmp	r3, #8
 800f87e:	d104      	bne.n	800f88a <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800f880:	4b1b      	ldr	r3, [pc, #108]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f882:	4a1e      	ldr	r2, [pc, #120]	; (800f8fc <ProcessRadioRxDone+0x738>)
 800f884:	210a      	movs	r1, #10
 800f886:	5499      	strb	r1, [r3, r2]
 800f888:	e003      	b.n	800f892 <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f88a:	4b19      	ldr	r3, [pc, #100]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f88c:	4a1b      	ldr	r2, [pc, #108]	; (800f8fc <ProcessRadioRxDone+0x738>)
 800f88e:	2101      	movs	r1, #1
 800f890:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f892:	6879      	ldr	r1, [r7, #4]
 800f894:	4a16      	ldr	r2, [pc, #88]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f896:	2386      	movs	r3, #134	; 0x86
 800f898:	00db      	lsls	r3, r3, #3
 800f89a:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800f89c:	f7ff fc66 	bl	800f16c <PrepareRxDoneAbort>
                return;
 800f8a0:	e1be      	b.n	800fc20 <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f8a2:	1cfb      	adds	r3, r7, #3
 800f8a4:	781a      	ldrb	r2, [r3, #0]
 800f8a6:	687d      	ldr	r5, [r7, #4]
 800f8a8:	2680      	movs	r6, #128	; 0x80
 800f8aa:	19bc      	adds	r4, r7, r6
 800f8ac:	2384      	movs	r3, #132	; 0x84
 800f8ae:	18fb      	adds	r3, r7, r3
 800f8b0:	6819      	ldr	r1, [r3, #0]
 800f8b2:	2382      	movs	r3, #130	; 0x82
 800f8b4:	18fb      	adds	r3, r7, r3
 800f8b6:	7818      	ldrb	r0, [r3, #0]
 800f8b8:	2330      	movs	r3, #48	; 0x30
 800f8ba:	18fb      	adds	r3, r7, r3
 800f8bc:	9300      	str	r3, [sp, #0]
 800f8be:	002b      	movs	r3, r5
 800f8c0:	f006 fb9c 	bl	8015ffc <LoRaMacCryptoUnsecureMessage>
 800f8c4:	0003      	movs	r3, r0
 800f8c6:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f8c8:	19bb      	adds	r3, r7, r6
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d01d      	beq.n	800f90c <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f8d0:	19bb      	adds	r3, r7, r6
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d104      	bne.n	800f8e2 <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f8d8:	4b05      	ldr	r3, [pc, #20]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f8da:	4a08      	ldr	r2, [pc, #32]	; (800f8fc <ProcessRadioRxDone+0x738>)
 800f8dc:	210b      	movs	r1, #11
 800f8de:	5499      	strb	r1, [r3, r2]
 800f8e0:	e003      	b.n	800f8ea <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f8e2:	4b03      	ldr	r3, [pc, #12]	; (800f8f0 <ProcessRadioRxDone+0x72c>)
 800f8e4:	4a05      	ldr	r2, [pc, #20]	; (800f8fc <ProcessRadioRxDone+0x738>)
 800f8e6:	210c      	movs	r1, #12
 800f8e8:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800f8ea:	f7ff fc3f 	bl	800f16c <PrepareRxDoneAbort>
                return;
 800f8ee:	e197      	b.n	800fc20 <ProcessRadioRxDone+0xa5c>
 800f8f0:	20000548 	.word	0x20000548
 800f8f4:	0000041c 	.word	0x0000041c
 800f8f8:	00000484 	.word	0x00000484
 800f8fc:	0000041d 	.word	0x0000041d
 800f900:	20000780 	.word	0x20000780
 800f904:	00000434 	.word	0x00000434
 800f908:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f90c:	4bc6      	ldr	r3, [pc, #792]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f90e:	4ac7      	ldr	r2, [pc, #796]	; (800fc2c <ProcessRadioRxDone+0xa68>)
 800f910:	2100      	movs	r1, #0
 800f912:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800f914:	4bc4      	ldr	r3, [pc, #784]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f916:	2283      	movs	r2, #131	; 0x83
 800f918:	18ba      	adds	r2, r7, r2
 800f91a:	49c5      	ldr	r1, [pc, #788]	; (800fc30 <ProcessRadioRxDone+0xa6c>)
 800f91c:	7812      	ldrb	r2, [r2, #0]
 800f91e:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f920:	2030      	movs	r0, #48	; 0x30
 800f922:	183b      	adds	r3, r7, r0
 800f924:	7b1b      	ldrb	r3, [r3, #12]
 800f926:	06db      	lsls	r3, r3, #27
 800f928:	0fdb      	lsrs	r3, r3, #31
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	0019      	movs	r1, r3
 800f92e:	4bbe      	ldr	r3, [pc, #760]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f930:	4ac0      	ldr	r2, [pc, #768]	; (800fc34 <ProcessRadioRxDone+0xa70>)
 800f932:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800f934:	4bbc      	ldr	r3, [pc, #752]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f936:	4ac0      	ldr	r2, [pc, #768]	; (800fc38 <ProcessRadioRxDone+0xa74>)
 800f938:	2100      	movs	r1, #0
 800f93a:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800f93c:	4aba      	ldr	r2, [pc, #744]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f93e:	2385      	movs	r3, #133	; 0x85
 800f940:	00db      	lsls	r3, r3, #3
 800f942:	2100      	movs	r1, #0
 800f944:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f946:	6879      	ldr	r1, [r7, #4]
 800f948:	4ab7      	ldr	r2, [pc, #732]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f94a:	2386      	movs	r3, #134	; 0x86
 800f94c:	00db      	lsls	r3, r3, #3
 800f94e:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f950:	183b      	adds	r3, r7, r0
 800f952:	7b1b      	ldrb	r3, [r3, #12]
 800f954:	069b      	lsls	r3, r3, #26
 800f956:	0fdb      	lsrs	r3, r3, #31
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	1e5a      	subs	r2, r3, #1
 800f95c:	4193      	sbcs	r3, r2
 800f95e:	b2d9      	uxtb	r1, r3
 800f960:	4bb1      	ldr	r3, [pc, #708]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f962:	4ab6      	ldr	r2, [pc, #728]	; (800fc3c <ProcessRadioRxDone+0xa78>)
 800f964:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f966:	4bb0      	ldr	r3, [pc, #704]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f968:	4ab5      	ldr	r2, [pc, #724]	; (800fc40 <ProcessRadioRxDone+0xa7c>)
 800f96a:	2100      	movs	r1, #0
 800f96c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f96e:	183b      	adds	r3, r7, r0
 800f970:	7b1b      	ldrb	r3, [r3, #12]
 800f972:	069b      	lsls	r3, r3, #26
 800f974:	0fdb      	lsrs	r3, r3, #31
 800f976:	b2db      	uxtb	r3, r3
 800f978:	1e5a      	subs	r2, r3, #1
 800f97a:	4193      	sbcs	r3, r2
 800f97c:	b2d9      	uxtb	r1, r3
 800f97e:	4aaa      	ldr	r2, [pc, #680]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f980:	2388      	movs	r3, #136	; 0x88
 800f982:	00db      	lsls	r3, r3, #3
 800f984:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800f986:	4ba8      	ldr	r3, [pc, #672]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f988:	4aae      	ldr	r2, [pc, #696]	; (800fc44 <ProcessRadioRxDone+0xa80>)
 800f98a:	5c9b      	ldrb	r3, [r3, r2]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d004      	beq.n	800f99a <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800f990:	4ba5      	ldr	r3, [pc, #660]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f992:	4aac      	ldr	r2, [pc, #688]	; (800fc44 <ProcessRadioRxDone+0xa80>)
 800f994:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800f996:	2b01      	cmp	r3, #1
 800f998:	d105      	bne.n	800f9a6 <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800f99a:	4ba3      	ldr	r3, [pc, #652]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f99c:	4aaa      	ldr	r2, [pc, #680]	; (800fc48 <ProcessRadioRxDone+0xa84>)
 800f99e:	589b      	ldr	r3, [r3, r2]
 800f9a0:	2280      	movs	r2, #128	; 0x80
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f9a6:	2383      	movs	r3, #131	; 0x83
 800f9a8:	18fb      	adds	r3, r7, r3
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d104      	bne.n	800f9ba <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f9b0:	4b9d      	ldr	r3, [pc, #628]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f9b2:	4aa6      	ldr	r2, [pc, #664]	; (800fc4c <ProcessRadioRxDone+0xa88>)
 800f9b4:	2102      	movs	r1, #2
 800f9b6:	5499      	strb	r1, [r3, r2]
 800f9b8:	e02f      	b.n	800fa1a <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f9ba:	2374      	movs	r3, #116	; 0x74
 800f9bc:	18fb      	adds	r3, r7, r3
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	221f      	movs	r2, #31
 800f9c2:	4393      	bics	r3, r2
 800f9c4:	b2db      	uxtb	r3, r3
 800f9c6:	2ba0      	cmp	r3, #160	; 0xa0
 800f9c8:	d11c      	bne.n	800fa04 <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800f9ca:	4b97      	ldr	r3, [pc, #604]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f9cc:	4a9e      	ldr	r2, [pc, #632]	; (800fc48 <ProcessRadioRxDone+0xa84>)
 800f9ce:	589a      	ldr	r2, [r3, r2]
 800f9d0:	234c      	movs	r3, #76	; 0x4c
 800f9d2:	33ff      	adds	r3, #255	; 0xff
 800f9d4:	2101      	movs	r1, #1
 800f9d6:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800f9d8:	4b93      	ldr	r3, [pc, #588]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f9da:	4a9b      	ldr	r2, [pc, #620]	; (800fc48 <ProcessRadioRxDone+0xa84>)
 800f9dc:	589a      	ldr	r2, [r3, r2]
 800f9de:	23b1      	movs	r3, #177	; 0xb1
 800f9e0:	005b      	lsls	r3, r3, #1
 800f9e2:	5cd3      	ldrb	r3, [r2, r3]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d108      	bne.n	800f9fa <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800f9e8:	4b8f      	ldr	r3, [pc, #572]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f9ea:	4a97      	ldr	r2, [pc, #604]	; (800fc48 <ProcessRadioRxDone+0xa84>)
 800f9ec:	589a      	ldr	r2, [r3, r2]
 800f9ee:	2330      	movs	r3, #48	; 0x30
 800f9f0:	18fb      	adds	r3, r7, r3
 800f9f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f9f4:	23b4      	movs	r3, #180	; 0xb4
 800f9f6:	005b      	lsls	r3, r3, #1
 800f9f8:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f9fa:	4b8b      	ldr	r3, [pc, #556]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800f9fc:	4a93      	ldr	r2, [pc, #588]	; (800fc4c <ProcessRadioRxDone+0xa88>)
 800f9fe:	2101      	movs	r1, #1
 800fa00:	5499      	strb	r1, [r3, r2]
 800fa02:	e00a      	b.n	800fa1a <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800fa04:	4b88      	ldr	r3, [pc, #544]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fa06:	4a90      	ldr	r2, [pc, #576]	; (800fc48 <ProcessRadioRxDone+0xa84>)
 800fa08:	589a      	ldr	r2, [r3, r2]
 800fa0a:	234c      	movs	r3, #76	; 0x4c
 800fa0c:	33ff      	adds	r3, #255	; 0xff
 800fa0e:	2100      	movs	r1, #0
 800fa10:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fa12:	4b85      	ldr	r3, [pc, #532]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fa14:	4a8d      	ldr	r2, [pc, #564]	; (800fc4c <ProcessRadioRxDone+0xa88>)
 800fa16:	2100      	movs	r1, #0
 800fa18:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fa1a:	4b83      	ldr	r3, [pc, #524]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fa1c:	4a89      	ldr	r2, [pc, #548]	; (800fc44 <ProcessRadioRxDone+0xa80>)
 800fa1e:	5c98      	ldrb	r0, [r3, r2]
 800fa20:	4b81      	ldr	r3, [pc, #516]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fa22:	4a8b      	ldr	r2, [pc, #556]	; (800fc50 <ProcessRadioRxDone+0xa8c>)
 800fa24:	5c9a      	ldrb	r2, [r3, r2]
 800fa26:	2330      	movs	r3, #48	; 0x30
 800fa28:	18fb      	adds	r3, r7, r3
 800fa2a:	7b1b      	ldrb	r3, [r3, #12]
 800fa2c:	1c19      	adds	r1, r3, #0
 800fa2e:	f002 f94f 	bl	8011cd0 <RemoveMacCommands>

            switch( fType )
 800fa32:	1cbb      	adds	r3, r7, #2
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	2b03      	cmp	r3, #3
 800fa38:	d100      	bne.n	800fa3c <ProcessRadioRxDone+0x878>
 800fa3a:	e073      	b.n	800fb24 <ProcessRadioRxDone+0x960>
 800fa3c:	dd00      	ble.n	800fa40 <ProcessRadioRxDone+0x87c>
 800fa3e:	e089      	b.n	800fb54 <ProcessRadioRxDone+0x990>
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	d055      	beq.n	800faf0 <ProcessRadioRxDone+0x92c>
 800fa44:	dd00      	ble.n	800fa48 <ProcessRadioRxDone+0x884>
 800fa46:	e085      	b.n	800fb54 <ProcessRadioRxDone+0x990>
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d002      	beq.n	800fa52 <ProcessRadioRxDone+0x88e>
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d030      	beq.n	800fab2 <ProcessRadioRxDone+0x8ee>
 800fa50:	e080      	b.n	800fb54 <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fa52:	2030      	movs	r0, #48	; 0x30
 800fa54:	183b      	adds	r3, r7, r0
 800fa56:	7b1b      	ldrb	r3, [r3, #12]
 800fa58:	071b      	lsls	r3, r3, #28
 800fa5a:	0f1b      	lsrs	r3, r3, #28
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	001c      	movs	r4, r3
 800fa60:	4b71      	ldr	r3, [pc, #452]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fa62:	4a78      	ldr	r2, [pc, #480]	; (800fc44 <ProcessRadioRxDone+0xa80>)
 800fa64:	5c9b      	ldrb	r3, [r3, r2]
 800fa66:	2277      	movs	r2, #119	; 0x77
 800fa68:	18ba      	adds	r2, r7, r2
 800fa6a:	2100      	movs	r1, #0
 800fa6c:	5651      	ldrsb	r1, [r2, r1]
 800fa6e:	0005      	movs	r5, r0
 800fa70:	183a      	adds	r2, r7, r0
 800fa72:	3210      	adds	r2, #16
 800fa74:	0010      	movs	r0, r2
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	000b      	movs	r3, r1
 800fa7a:	0022      	movs	r2, r4
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	f000 ff4f 	bl	8010920 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fa82:	0028      	movs	r0, r5
 800fa84:	183b      	adds	r3, r7, r0
 800fa86:	2220      	movs	r2, #32
 800fa88:	5c99      	ldrb	r1, [r3, r2]
 800fa8a:	4b67      	ldr	r3, [pc, #412]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fa8c:	4a71      	ldr	r2, [pc, #452]	; (800fc54 <ProcessRadioRxDone+0xa90>)
 800fa8e:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fa90:	183b      	adds	r3, r7, r0
 800fa92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa94:	4b64      	ldr	r3, [pc, #400]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fa96:	4968      	ldr	r1, [pc, #416]	; (800fc38 <ProcessRadioRxDone+0xa74>)
 800fa98:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fa9a:	183b      	adds	r3, r7, r0
 800fa9c:	2228      	movs	r2, #40	; 0x28
 800fa9e:	5c99      	ldrb	r1, [r3, r2]
 800faa0:	4a61      	ldr	r2, [pc, #388]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800faa2:	2385      	movs	r3, #133	; 0x85
 800faa4:	00db      	lsls	r3, r3, #3
 800faa6:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800faa8:	4b5f      	ldr	r3, [pc, #380]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800faaa:	4a6b      	ldr	r2, [pc, #428]	; (800fc58 <ProcessRadioRxDone+0xa94>)
 800faac:	2101      	movs	r1, #1
 800faae:	5499      	strb	r1, [r3, r2]
                    break;
 800fab0:	e057      	b.n	800fb62 <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fab2:	2030      	movs	r0, #48	; 0x30
 800fab4:	183b      	adds	r3, r7, r0
 800fab6:	7b1b      	ldrb	r3, [r3, #12]
 800fab8:	071b      	lsls	r3, r3, #28
 800faba:	0f1b      	lsrs	r3, r3, #28
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	001c      	movs	r4, r3
 800fac0:	4b59      	ldr	r3, [pc, #356]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fac2:	4a60      	ldr	r2, [pc, #384]	; (800fc44 <ProcessRadioRxDone+0xa80>)
 800fac4:	5c9b      	ldrb	r3, [r3, r2]
 800fac6:	2277      	movs	r2, #119	; 0x77
 800fac8:	18ba      	adds	r2, r7, r2
 800faca:	2100      	movs	r1, #0
 800facc:	5651      	ldrsb	r1, [r2, r1]
 800face:	0005      	movs	r5, r0
 800fad0:	183a      	adds	r2, r7, r0
 800fad2:	3210      	adds	r2, #16
 800fad4:	0010      	movs	r0, r2
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	000b      	movs	r3, r1
 800fada:	0022      	movs	r2, r4
 800fadc:	2100      	movs	r1, #0
 800fade:	f000 ff1f 	bl	8010920 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fae2:	197b      	adds	r3, r7, r5
 800fae4:	2220      	movs	r2, #32
 800fae6:	5c99      	ldrb	r1, [r3, r2]
 800fae8:	4b4f      	ldr	r3, [pc, #316]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800faea:	4a5a      	ldr	r2, [pc, #360]	; (800fc54 <ProcessRadioRxDone+0xa90>)
 800faec:	5499      	strb	r1, [r3, r2]
                    break;
 800faee:	e038      	b.n	800fb62 <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800faf0:	2430      	movs	r4, #48	; 0x30
 800faf2:	193b      	adds	r3, r7, r4
 800faf4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800faf6:	193b      	adds	r3, r7, r4
 800faf8:	2228      	movs	r2, #40	; 0x28
 800fafa:	5c99      	ldrb	r1, [r3, r2]
 800fafc:	4b4a      	ldr	r3, [pc, #296]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fafe:	4a51      	ldr	r2, [pc, #324]	; (800fc44 <ProcessRadioRxDone+0xa80>)
 800fb00:	5c9b      	ldrb	r3, [r3, r2]
 800fb02:	2277      	movs	r2, #119	; 0x77
 800fb04:	18ba      	adds	r2, r7, r2
 800fb06:	7812      	ldrb	r2, [r2, #0]
 800fb08:	b252      	sxtb	r2, r2
 800fb0a:	9300      	str	r3, [sp, #0]
 800fb0c:	0013      	movs	r3, r2
 800fb0e:	000a      	movs	r2, r1
 800fb10:	2100      	movs	r1, #0
 800fb12:	f000 ff05 	bl	8010920 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fb16:	193b      	adds	r3, r7, r4
 800fb18:	2220      	movs	r2, #32
 800fb1a:	5c99      	ldrb	r1, [r3, r2]
 800fb1c:	4b42      	ldr	r3, [pc, #264]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fb1e:	4a4d      	ldr	r2, [pc, #308]	; (800fc54 <ProcessRadioRxDone+0xa90>)
 800fb20:	5499      	strb	r1, [r3, r2]
                    break;
 800fb22:	e01e      	b.n	800fb62 <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fb24:	2030      	movs	r0, #48	; 0x30
 800fb26:	183b      	adds	r3, r7, r0
 800fb28:	2220      	movs	r2, #32
 800fb2a:	5c99      	ldrb	r1, [r3, r2]
 800fb2c:	4b3e      	ldr	r3, [pc, #248]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fb2e:	4a49      	ldr	r2, [pc, #292]	; (800fc54 <ProcessRadioRxDone+0xa90>)
 800fb30:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fb32:	183b      	adds	r3, r7, r0
 800fb34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb36:	4b3c      	ldr	r3, [pc, #240]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fb38:	493f      	ldr	r1, [pc, #252]	; (800fc38 <ProcessRadioRxDone+0xa74>)
 800fb3a:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fb3c:	183b      	adds	r3, r7, r0
 800fb3e:	2228      	movs	r2, #40	; 0x28
 800fb40:	5c99      	ldrb	r1, [r3, r2]
 800fb42:	4a39      	ldr	r2, [pc, #228]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fb44:	2385      	movs	r3, #133	; 0x85
 800fb46:	00db      	lsls	r3, r3, #3
 800fb48:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fb4a:	4b37      	ldr	r3, [pc, #220]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fb4c:	4a42      	ldr	r2, [pc, #264]	; (800fc58 <ProcessRadioRxDone+0xa94>)
 800fb4e:	2101      	movs	r1, #1
 800fb50:	5499      	strb	r1, [r3, r2]
                    break;
 800fb52:	e006      	b.n	800fb62 <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb54:	4b34      	ldr	r3, [pc, #208]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fb56:	4a35      	ldr	r2, [pc, #212]	; (800fc2c <ProcessRadioRxDone+0xa68>)
 800fb58:	2101      	movs	r1, #1
 800fb5a:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800fb5c:	f7ff fb06 	bl	800f16c <PrepareRxDoneAbort>
                    break;
 800fb60:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fb62:	4b31      	ldr	r3, [pc, #196]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fb64:	4a3d      	ldr	r2, [pc, #244]	; (800fc5c <ProcessRadioRxDone+0xa98>)
 800fb66:	5c99      	ldrb	r1, [r3, r2]
 800fb68:	2002      	movs	r0, #2
 800fb6a:	4301      	orrs	r1, r0
 800fb6c:	5499      	strb	r1, [r3, r2]

            break;
 800fb6e:	e036      	b.n	800fbde <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fb70:	2476      	movs	r4, #118	; 0x76
 800fb72:	193b      	adds	r3, r7, r4
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb78:	18d1      	adds	r1, r2, r3
 800fb7a:	193b      	adds	r3, r7, r4
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	257a      	movs	r5, #122	; 0x7a
 800fb82:	197a      	adds	r2, r7, r5
 800fb84:	8812      	ldrh	r2, [r2, #0]
 800fb86:	1ad3      	subs	r3, r2, r3
 800fb88:	b29a      	uxth	r2, r3
 800fb8a:	4b35      	ldr	r3, [pc, #212]	; (800fc60 <ProcessRadioRxDone+0xa9c>)
 800fb8c:	0018      	movs	r0, r3
 800fb8e:	f009 fbb1 	bl	80192f4 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800fb92:	4b25      	ldr	r3, [pc, #148]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fb94:	4a2d      	ldr	r2, [pc, #180]	; (800fc4c <ProcessRadioRxDone+0xa88>)
 800fb96:	2103      	movs	r1, #3
 800fb98:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fb9a:	4b23      	ldr	r3, [pc, #140]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fb9c:	4a23      	ldr	r2, [pc, #140]	; (800fc2c <ProcessRadioRxDone+0xa68>)
 800fb9e:	2100      	movs	r1, #0
 800fba0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fba2:	4b21      	ldr	r3, [pc, #132]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fba4:	4924      	ldr	r1, [pc, #144]	; (800fc38 <ProcessRadioRxDone+0xa74>)
 800fba6:	4a2e      	ldr	r2, [pc, #184]	; (800fc60 <ProcessRadioRxDone+0xa9c>)
 800fba8:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fbaa:	197b      	adds	r3, r7, r5
 800fbac:	881b      	ldrh	r3, [r3, #0]
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	193b      	adds	r3, r7, r4
 800fbb2:	781b      	ldrb	r3, [r3, #0]
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	b2d9      	uxtb	r1, r3
 800fbb8:	4a1b      	ldr	r2, [pc, #108]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fbba:	2385      	movs	r3, #133	; 0x85
 800fbbc:	00db      	lsls	r3, r3, #3
 800fbbe:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fbc0:	4b19      	ldr	r3, [pc, #100]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fbc2:	4a26      	ldr	r2, [pc, #152]	; (800fc5c <ProcessRadioRxDone+0xa98>)
 800fbc4:	5c99      	ldrb	r1, [r3, r2]
 800fbc6:	2002      	movs	r0, #2
 800fbc8:	4301      	orrs	r1, r0
 800fbca:	5499      	strb	r1, [r3, r2]
            break;
 800fbcc:	e007      	b.n	800fbde <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fbce:	4b16      	ldr	r3, [pc, #88]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fbd0:	4a16      	ldr	r2, [pc, #88]	; (800fc2c <ProcessRadioRxDone+0xa68>)
 800fbd2:	2101      	movs	r1, #1
 800fbd4:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800fbd6:	f7ff fac9 	bl	800f16c <PrepareRxDoneAbort>
            break;
 800fbda:	e000      	b.n	800fbde <ProcessRadioRxDone+0xa1a>
            break;
 800fbdc:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800fbde:	4b12      	ldr	r3, [pc, #72]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fbe0:	4a20      	ldr	r2, [pc, #128]	; (800fc64 <ProcessRadioRxDone+0xaa0>)
 800fbe2:	5c9b      	ldrb	r3, [r3, r2]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d009      	beq.n	800fbfc <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800fbe8:	4a0f      	ldr	r2, [pc, #60]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fbea:	2388      	movs	r3, #136	; 0x88
 800fbec:	00db      	lsls	r3, r3, #3
 800fbee:	5cd3      	ldrb	r3, [r2, r3]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d00d      	beq.n	800fc10 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	f000 fc5b 	bl	80104b0 <OnAckTimeoutTimerEvent>
 800fbfa:	e009      	b.n	800fc10 <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800fbfc:	4b0a      	ldr	r3, [pc, #40]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fbfe:	4a12      	ldr	r2, [pc, #72]	; (800fc48 <ProcessRadioRxDone+0xa84>)
 800fc00:	589b      	ldr	r3, [r3, r2]
 800fc02:	227c      	movs	r2, #124	; 0x7c
 800fc04:	5c9b      	ldrb	r3, [r3, r2]
 800fc06:	2b02      	cmp	r3, #2
 800fc08:	d102      	bne.n	800fc10 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fc0a:	2000      	movs	r0, #0
 800fc0c:	f000 fc50 	bl	80104b0 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fc10:	4b05      	ldr	r3, [pc, #20]	; (800fc28 <ProcessRadioRxDone+0xa64>)
 800fc12:	4a12      	ldr	r2, [pc, #72]	; (800fc5c <ProcessRadioRxDone+0xa98>)
 800fc14:	5c99      	ldrb	r1, [r3, r2]
 800fc16:	2020      	movs	r0, #32
 800fc18:	4301      	orrs	r1, r0
 800fc1a:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800fc1c:	f7ff f9c0 	bl	800efa0 <UpdateRxSlotIdleState>
}
 800fc20:	46bd      	mov	sp, r7
 800fc22:	b023      	add	sp, #140	; 0x8c
 800fc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc26:	46c0      	nop			; (mov r8, r8)
 800fc28:	20000548 	.word	0x20000548
 800fc2c:	0000041d 	.word	0x0000041d
 800fc30:	0000041e 	.word	0x0000041e
 800fc34:	00000421 	.word	0x00000421
 800fc38:	00000424 	.word	0x00000424
 800fc3c:	0000042e 	.word	0x0000042e
 800fc40:	0000043d 	.word	0x0000043d
 800fc44:	0000042d 	.word	0x0000042d
 800fc48:	00000484 	.word	0x00000484
 800fc4c:	0000041c 	.word	0x0000041c
 800fc50:	0000043c 	.word	0x0000043c
 800fc54:	0000041f 	.word	0x0000041f
 800fc58:	00000429 	.word	0x00000429
 800fc5c:	00000481 	.word	0x00000481
 800fc60:	20000780 	.word	0x20000780
 800fc64:	00000414 	.word	0x00000414

0800fc68 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fc6c:	4b12      	ldr	r3, [pc, #72]	; (800fcb8 <ProcessRadioTxTimeout+0x50>)
 800fc6e:	4a13      	ldr	r2, [pc, #76]	; (800fcbc <ProcessRadioTxTimeout+0x54>)
 800fc70:	589b      	ldr	r3, [r3, r2]
 800fc72:	227c      	movs	r2, #124	; 0x7c
 800fc74:	5c9b      	ldrb	r3, [r3, r2]
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	d002      	beq.n	800fc80 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800fc7a:	4b11      	ldr	r3, [pc, #68]	; (800fcc0 <ProcessRadioTxTimeout+0x58>)
 800fc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc7e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800fc80:	f7ff f98e 	bl	800efa0 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800fc84:	4b0c      	ldr	r3, [pc, #48]	; (800fcb8 <ProcessRadioTxTimeout+0x50>)
 800fc86:	4a0f      	ldr	r2, [pc, #60]	; (800fcc4 <ProcessRadioTxTimeout+0x5c>)
 800fc88:	2102      	movs	r1, #2
 800fc8a:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800fc8c:	2002      	movs	r0, #2
 800fc8e:	f005 fa5b 	bl	8015148 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800fc92:	4b09      	ldr	r3, [pc, #36]	; (800fcb8 <ProcessRadioTxTimeout+0x50>)
 800fc94:	4a0c      	ldr	r2, [pc, #48]	; (800fcc8 <ProcessRadioTxTimeout+0x60>)
 800fc96:	5c9b      	ldrb	r3, [r3, r2]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d003      	beq.n	800fca4 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800fc9c:	4b06      	ldr	r3, [pc, #24]	; (800fcb8 <ProcessRadioTxTimeout+0x50>)
 800fc9e:	4a0b      	ldr	r2, [pc, #44]	; (800fccc <ProcessRadioTxTimeout+0x64>)
 800fca0:	2101      	movs	r1, #1
 800fca2:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fca4:	4b04      	ldr	r3, [pc, #16]	; (800fcb8 <ProcessRadioTxTimeout+0x50>)
 800fca6:	4a0a      	ldr	r2, [pc, #40]	; (800fcd0 <ProcessRadioTxTimeout+0x68>)
 800fca8:	5c99      	ldrb	r1, [r3, r2]
 800fcaa:	2020      	movs	r0, #32
 800fcac:	4301      	orrs	r1, r0
 800fcae:	5499      	strb	r1, [r3, r2]
}
 800fcb0:	46c0      	nop			; (mov r8, r8)
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	46c0      	nop			; (mov r8, r8)
 800fcb8:	20000548 	.word	0x20000548
 800fcbc:	00000484 	.word	0x00000484
 800fcc0:	0801f0b4 	.word	0x0801f0b4
 800fcc4:	0000043d 	.word	0x0000043d
 800fcc8:	00000414 	.word	0x00000414
 800fccc:	00000413 	.word	0x00000413
 800fcd0:	00000481 	.word	0x00000481

0800fcd4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	0002      	movs	r2, r0
 800fcdc:	1dfb      	adds	r3, r7, #7
 800fcde:	701a      	strb	r2, [r3, #0]
 800fce0:	1dbb      	adds	r3, r7, #6
 800fce2:	1c0a      	adds	r2, r1, #0
 800fce4:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800fce6:	230f      	movs	r3, #15
 800fce8:	18fb      	adds	r3, r7, r3
 800fcea:	2200      	movs	r2, #0
 800fcec:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fcee:	4b4a      	ldr	r3, [pc, #296]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fcf0:	4a4a      	ldr	r2, [pc, #296]	; (800fe1c <HandleRadioRxErrorTimeout+0x148>)
 800fcf2:	589b      	ldr	r3, [r3, r2]
 800fcf4:	227c      	movs	r2, #124	; 0x7c
 800fcf6:	5c9b      	ldrb	r3, [r3, r2]
 800fcf8:	2b02      	cmp	r3, #2
 800fcfa:	d002      	beq.n	800fd02 <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800fcfc:	4b48      	ldr	r3, [pc, #288]	; (800fe20 <HandleRadioRxErrorTimeout+0x14c>)
 800fcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd00:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fd02:	f004 fcdd 	bl	80146c0 <LoRaMacClassBIsBeaconExpected>
 800fd06:	1e03      	subs	r3, r0, #0
 800fd08:	d009      	beq.n	800fd1e <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800fd0a:	2002      	movs	r0, #2
 800fd0c:	f004 fc90 	bl	8014630 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800fd10:	2000      	movs	r0, #0
 800fd12:	f004 fcb1 	bl	8014678 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800fd16:	230f      	movs	r3, #15
 800fd18:	18fb      	adds	r3, r7, r3
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800fd1e:	4b3e      	ldr	r3, [pc, #248]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fd20:	4a3e      	ldr	r2, [pc, #248]	; (800fe1c <HandleRadioRxErrorTimeout+0x148>)
 800fd22:	589b      	ldr	r3, [r3, r2]
 800fd24:	227c      	movs	r2, #124	; 0x7c
 800fd26:	5c9b      	ldrb	r3, [r3, r2]
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d11b      	bne.n	800fd64 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fd2c:	f004 fcce 	bl	80146cc <LoRaMacClassBIsPingExpected>
 800fd30:	1e03      	subs	r3, r0, #0
 800fd32:	d009      	beq.n	800fd48 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fd34:	2000      	movs	r0, #0
 800fd36:	f004 fc85 	bl	8014644 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	f004 fca4 	bl	8014688 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800fd40:	230f      	movs	r3, #15
 800fd42:	18fb      	adds	r3, r7, r3
 800fd44:	2201      	movs	r2, #1
 800fd46:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fd48:	f004 fcc6 	bl	80146d8 <LoRaMacClassBIsMulticastExpected>
 800fd4c:	1e03      	subs	r3, r0, #0
 800fd4e:	d009      	beq.n	800fd64 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fd50:	2000      	movs	r0, #0
 800fd52:	f004 fc81 	bl	8014658 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fd56:	2000      	movs	r0, #0
 800fd58:	f004 fc9e 	bl	8014698 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800fd5c:	230f      	movs	r3, #15
 800fd5e:	18fb      	adds	r3, r7, r3
 800fd60:	2201      	movs	r2, #1
 800fd62:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800fd64:	230f      	movs	r3, #15
 800fd66:	18fb      	adds	r3, r7, r3
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	4053      	eors	r3, r2
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d04b      	beq.n	800fe0c <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fd74:	4a28      	ldr	r2, [pc, #160]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fd76:	2390      	movs	r3, #144	; 0x90
 800fd78:	00db      	lsls	r3, r3, #3
 800fd7a:	5cd3      	ldrb	r3, [r2, r3]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d129      	bne.n	800fdd4 <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 800fd80:	4b25      	ldr	r3, [pc, #148]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fd82:	4a28      	ldr	r2, [pc, #160]	; (800fe24 <HandleRadioRxErrorTimeout+0x150>)
 800fd84:	5c9b      	ldrb	r3, [r3, r2]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d004      	beq.n	800fd94 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800fd8a:	4b23      	ldr	r3, [pc, #140]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fd8c:	1dfa      	adds	r2, r7, #7
 800fd8e:	4926      	ldr	r1, [pc, #152]	; (800fe28 <HandleRadioRxErrorTimeout+0x154>)
 800fd90:	7812      	ldrb	r2, [r2, #0]
 800fd92:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800fd94:	1dfb      	adds	r3, r7, #7
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	0018      	movs	r0, r3
 800fd9a:	f005 f9d5 	bl	8015148 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800fd9e:	4b1e      	ldr	r3, [pc, #120]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fda0:	4a1e      	ldr	r2, [pc, #120]	; (800fe1c <HandleRadioRxErrorTimeout+0x148>)
 800fda2:	589a      	ldr	r2, [r3, r2]
 800fda4:	23a8      	movs	r3, #168	; 0xa8
 800fda6:	005b      	lsls	r3, r3, #1
 800fda8:	58d3      	ldr	r3, [r2, r3]
 800fdaa:	0018      	movs	r0, r3
 800fdac:	f00c ff9e 	bl	801ccec <UTIL_TIMER_GetElapsedTime>
 800fdb0:	0001      	movs	r1, r0
 800fdb2:	4a19      	ldr	r2, [pc, #100]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fdb4:	23ed      	movs	r3, #237	; 0xed
 800fdb6:	009b      	lsls	r3, r3, #2
 800fdb8:	58d3      	ldr	r3, [r2, r3]
 800fdba:	4299      	cmp	r1, r3
 800fdbc:	d326      	bcc.n	800fe0c <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800fdbe:	4b1b      	ldr	r3, [pc, #108]	; (800fe2c <HandleRadioRxErrorTimeout+0x158>)
 800fdc0:	0018      	movs	r0, r3
 800fdc2:	f00c fe4f 	bl	801ca64 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fdc6:	4b14      	ldr	r3, [pc, #80]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fdc8:	4a19      	ldr	r2, [pc, #100]	; (800fe30 <HandleRadioRxErrorTimeout+0x15c>)
 800fdca:	5c99      	ldrb	r1, [r3, r2]
 800fdcc:	2020      	movs	r0, #32
 800fdce:	4301      	orrs	r1, r0
 800fdd0:	5499      	strb	r1, [r3, r2]
 800fdd2:	e01b      	b.n	800fe0c <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800fdd4:	4b10      	ldr	r3, [pc, #64]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fdd6:	4a13      	ldr	r2, [pc, #76]	; (800fe24 <HandleRadioRxErrorTimeout+0x150>)
 800fdd8:	5c9b      	ldrb	r3, [r3, r2]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d004      	beq.n	800fde8 <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800fdde:	4b0e      	ldr	r3, [pc, #56]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fde0:	1dba      	adds	r2, r7, #6
 800fde2:	4911      	ldr	r1, [pc, #68]	; (800fe28 <HandleRadioRxErrorTimeout+0x154>)
 800fde4:	7812      	ldrb	r2, [r2, #0]
 800fde6:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800fde8:	1dbb      	adds	r3, r7, #6
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	0018      	movs	r0, r3
 800fdee:	f005 f9ab 	bl	8015148 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fdf2:	4b09      	ldr	r3, [pc, #36]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fdf4:	4a09      	ldr	r2, [pc, #36]	; (800fe1c <HandleRadioRxErrorTimeout+0x148>)
 800fdf6:	589b      	ldr	r3, [r3, r2]
 800fdf8:	227c      	movs	r2, #124	; 0x7c
 800fdfa:	5c9b      	ldrb	r3, [r3, r2]
 800fdfc:	2b02      	cmp	r3, #2
 800fdfe:	d005      	beq.n	800fe0c <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fe00:	4b05      	ldr	r3, [pc, #20]	; (800fe18 <HandleRadioRxErrorTimeout+0x144>)
 800fe02:	4a0b      	ldr	r2, [pc, #44]	; (800fe30 <HandleRadioRxErrorTimeout+0x15c>)
 800fe04:	5c99      	ldrb	r1, [r3, r2]
 800fe06:	2020      	movs	r0, #32
 800fe08:	4301      	orrs	r1, r0
 800fe0a:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 800fe0c:	f7ff f8c8 	bl	800efa0 <UpdateRxSlotIdleState>
}
 800fe10:	46c0      	nop			; (mov r8, r8)
 800fe12:	46bd      	mov	sp, r7
 800fe14:	b004      	add	sp, #16
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	20000548 	.word	0x20000548
 800fe1c:	00000484 	.word	0x00000484
 800fe20:	0801f0b4 	.word	0x0801f0b4
 800fe24:	00000414 	.word	0x00000414
 800fe28:	0000043d 	.word	0x0000043d
 800fe2c:	200008e0 	.word	0x200008e0
 800fe30:	00000481 	.word	0x00000481

0800fe34 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800fe38:	2106      	movs	r1, #6
 800fe3a:	2005      	movs	r0, #5
 800fe3c:	f7ff ff4a 	bl	800fcd4 <HandleRadioRxErrorTimeout>
}
 800fe40:	46c0      	nop			; (mov r8, r8)
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800fe4a:	2104      	movs	r1, #4
 800fe4c:	2003      	movs	r0, #3
 800fe4e:	f7ff ff41 	bl	800fcd4 <HandleRadioRxErrorTimeout>
}
 800fe52:	46c0      	nop			; (mov r8, r8)
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe5e:	f3ef 8310 	mrs	r3, PRIMASK
 800fe62:	607b      	str	r3, [r7, #4]
  return(result);
 800fe64:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800fe66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe68:	b672      	cpsid	i
}
 800fe6a:	46c0      	nop			; (mov r8, r8)
    events = LoRaMacRadioEvents;
 800fe6c:	4b1f      	ldr	r3, [pc, #124]	; (800feec <LoRaMacHandleIrqEvents+0x94>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800fe72:	4b1e      	ldr	r3, [pc, #120]	; (800feec <LoRaMacHandleIrqEvents+0x94>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	601a      	str	r2, [r3, #0]
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	f383 8810 	msr	PRIMASK, r3
}
 800fe82:	46c0      	nop			; (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d02c      	beq.n	800fee4 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 800fe8a:	003b      	movs	r3, r7
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	2210      	movs	r2, #16
 800fe90:	4013      	ands	r3, r2
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d001      	beq.n	800fe9c <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 800fe98:	f7ff f89e 	bl	800efd8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800fe9c:	003b      	movs	r3, r7
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	2208      	movs	r2, #8
 800fea2:	4013      	ands	r3, r2
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d001      	beq.n	800feae <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 800feaa:	f7ff f98b 	bl	800f1c4 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800feae:	003b      	movs	r3, r7
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	2204      	movs	r2, #4
 800feb4:	4013      	ands	r3, r2
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d001      	beq.n	800fec0 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 800febc:	f7ff fed4 	bl	800fc68 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800fec0:	003b      	movs	r3, r7
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	2202      	movs	r2, #2
 800fec6:	4013      	ands	r3, r2
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d001      	beq.n	800fed2 <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 800fece:	f7ff ffb1 	bl	800fe34 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800fed2:	003b      	movs	r3, r7
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	2201      	movs	r2, #1
 800fed8:	4013      	ands	r3, r2
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d001      	beq.n	800fee4 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 800fee0:	f7ff ffb1 	bl	800fe46 <ProcessRadioRxTimeout>
        }
    }
}
 800fee4:	46c0      	nop			; (mov r8, r8)
 800fee6:	46bd      	mov	sp, r7
 800fee8:	b004      	add	sp, #16
 800feea:	bd80      	pop	{r7, pc}
 800feec:	20000b78 	.word	0x20000b78

0800fef0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	0002      	movs	r2, r0
 800fef8:	1dfb      	adds	r3, r7, #7
 800fefa:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800fefc:	4b04      	ldr	r3, [pc, #16]	; (800ff10 <LoRaMacEnableRequests+0x20>)
 800fefe:	1dfa      	adds	r2, r7, #7
 800ff00:	4904      	ldr	r1, [pc, #16]	; (800ff14 <LoRaMacEnableRequests+0x24>)
 800ff02:	7812      	ldrb	r2, [r2, #0]
 800ff04:	545a      	strb	r2, [r3, r1]
}
 800ff06:	46c0      	nop			; (mov r8, r8)
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	b002      	add	sp, #8
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	46c0      	nop			; (mov r8, r8)
 800ff10:	20000548 	.word	0x20000548
 800ff14:	00000482 	.word	0x00000482

0800ff18 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800ff1e:	1d3b      	adds	r3, r7, #4
 800ff20:	4a2c      	ldr	r2, [pc, #176]	; (800ffd4 <LoRaMacHandleRequestEvents+0xbc>)
 800ff22:	492d      	ldr	r1, [pc, #180]	; (800ffd8 <LoRaMacHandleRequestEvents+0xc0>)
 800ff24:	5c52      	ldrb	r2, [r2, r1]
 800ff26:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ff28:	4a2a      	ldr	r2, [pc, #168]	; (800ffd4 <LoRaMacHandleRequestEvents+0xbc>)
 800ff2a:	23d0      	movs	r3, #208	; 0xd0
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	58d3      	ldr	r3, [r2, r3]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d14a      	bne.n	800ffca <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ff34:	4b27      	ldr	r3, [pc, #156]	; (800ffd4 <LoRaMacHandleRequestEvents+0xbc>)
 800ff36:	4a28      	ldr	r2, [pc, #160]	; (800ffd8 <LoRaMacHandleRequestEvents+0xc0>)
 800ff38:	5c9b      	ldrb	r3, [r3, r2]
 800ff3a:	2201      	movs	r2, #1
 800ff3c:	4013      	ands	r3, r2
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d005      	beq.n	800ff50 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ff44:	4b23      	ldr	r3, [pc, #140]	; (800ffd4 <LoRaMacHandleRequestEvents+0xbc>)
 800ff46:	4a24      	ldr	r2, [pc, #144]	; (800ffd8 <LoRaMacHandleRequestEvents+0xc0>)
 800ff48:	5c99      	ldrb	r1, [r3, r2]
 800ff4a:	2001      	movs	r0, #1
 800ff4c:	4381      	bics	r1, r0
 800ff4e:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ff50:	4b20      	ldr	r3, [pc, #128]	; (800ffd4 <LoRaMacHandleRequestEvents+0xbc>)
 800ff52:	4a21      	ldr	r2, [pc, #132]	; (800ffd8 <LoRaMacHandleRequestEvents+0xc0>)
 800ff54:	5c9b      	ldrb	r3, [r3, r2]
 800ff56:	2204      	movs	r2, #4
 800ff58:	4013      	ands	r3, r2
 800ff5a:	b2db      	uxtb	r3, r3
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d005      	beq.n	800ff6c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ff60:	4b1c      	ldr	r3, [pc, #112]	; (800ffd4 <LoRaMacHandleRequestEvents+0xbc>)
 800ff62:	4a1d      	ldr	r2, [pc, #116]	; (800ffd8 <LoRaMacHandleRequestEvents+0xc0>)
 800ff64:	5c99      	ldrb	r1, [r3, r2]
 800ff66:	2004      	movs	r0, #4
 800ff68:	4381      	bics	r1, r0
 800ff6a:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ff6c:	2001      	movs	r0, #1
 800ff6e:	f7ff ffbf 	bl	800fef0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800ff72:	1d3b      	adds	r3, r7, #4
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	2201      	movs	r2, #1
 800ff78:	4013      	ands	r3, r2
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d007      	beq.n	800ff90 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ff80:	4a14      	ldr	r2, [pc, #80]	; (800ffd4 <LoRaMacHandleRequestEvents+0xbc>)
 800ff82:	23d1      	movs	r3, #209	; 0xd1
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	58d3      	ldr	r3, [r2, r3]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a14      	ldr	r2, [pc, #80]	; (800ffdc <LoRaMacHandleRequestEvents+0xc4>)
 800ff8c:	0010      	movs	r0, r2
 800ff8e:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ff90:	1d3b      	adds	r3, r7, #4
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	2204      	movs	r2, #4
 800ff96:	4013      	ands	r3, r2
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d00d      	beq.n	800ffba <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800ff9e:	4b10      	ldr	r3, [pc, #64]	; (800ffe0 <LoRaMacHandleRequestEvents+0xc8>)
 800ffa0:	0018      	movs	r0, r3
 800ffa2:	f005 f925 	bl	80151f0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800ffa6:	f005 f985 	bl	80152b4 <LoRaMacConfirmQueueGetCnt>
 800ffaa:	1e03      	subs	r3, r0, #0
 800ffac:	d005      	beq.n	800ffba <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ffae:	4b09      	ldr	r3, [pc, #36]	; (800ffd4 <LoRaMacHandleRequestEvents+0xbc>)
 800ffb0:	4a09      	ldr	r2, [pc, #36]	; (800ffd8 <LoRaMacHandleRequestEvents+0xc0>)
 800ffb2:	5c99      	ldrb	r1, [r3, r2]
 800ffb4:	2004      	movs	r0, #4
 800ffb6:	4301      	orrs	r1, r0
 800ffb8:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800ffba:	f004 fba8 	bl	801470e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800ffbe:	4b05      	ldr	r3, [pc, #20]	; (800ffd4 <LoRaMacHandleRequestEvents+0xbc>)
 800ffc0:	4a05      	ldr	r2, [pc, #20]	; (800ffd8 <LoRaMacHandleRequestEvents+0xc0>)
 800ffc2:	5c99      	ldrb	r1, [r3, r2]
 800ffc4:	2020      	movs	r0, #32
 800ffc6:	4381      	bics	r1, r0
 800ffc8:	5499      	strb	r1, [r3, r2]
    }
}
 800ffca:	46c0      	nop			; (mov r8, r8)
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	b002      	add	sp, #8
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	46c0      	nop			; (mov r8, r8)
 800ffd4:	20000548 	.word	0x20000548
 800ffd8:	00000481 	.word	0x00000481
 800ffdc:	20000984 	.word	0x20000984
 800ffe0:	20000998 	.word	0x20000998

0800ffe4 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800ffea:	4a0b      	ldr	r2, [pc, #44]	; (8010018 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 800ffec:	23d0      	movs	r3, #208	; 0xd0
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	58d3      	ldr	r3, [r2, r3]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d10c      	bne.n	8010010 <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800fff6:	1dfb      	adds	r3, r7, #7
 800fff8:	2200      	movs	r2, #0
 800fffa:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800fffc:	1dfb      	adds	r3, r7, #7
 800fffe:	0018      	movs	r0, r3
 8010000:	f004 fe94 	bl	8014d2c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8010004:	1dfb      	adds	r3, r7, #7
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d001      	beq.n	8010010 <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 801000c:	f000 fc78 	bl	8010900 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 8010010:	46c0      	nop			; (mov r8, r8)
 8010012:	46bd      	mov	sp, r7
 8010014:	b002      	add	sp, #8
 8010016:	bd80      	pop	{r7, pc}
 8010018:	20000548 	.word	0x20000548

0801001c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b088      	sub	sp, #32
 8010020:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010022:	4b26      	ldr	r3, [pc, #152]	; (80100bc <LoRaMacHandleIndicationEvents+0xa0>)
 8010024:	4a26      	ldr	r2, [pc, #152]	; (80100c0 <LoRaMacHandleIndicationEvents+0xa4>)
 8010026:	5c9b      	ldrb	r3, [r3, r2]
 8010028:	2208      	movs	r2, #8
 801002a:	4013      	ands	r3, r2
 801002c:	b2db      	uxtb	r3, r3
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00d      	beq.n	801004e <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010032:	4b22      	ldr	r3, [pc, #136]	; (80100bc <LoRaMacHandleIndicationEvents+0xa0>)
 8010034:	4a22      	ldr	r2, [pc, #136]	; (80100c0 <LoRaMacHandleIndicationEvents+0xa4>)
 8010036:	5c99      	ldrb	r1, [r3, r2]
 8010038:	2008      	movs	r0, #8
 801003a:	4381      	bics	r1, r0
 801003c:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 801003e:	4a1f      	ldr	r2, [pc, #124]	; (80100bc <LoRaMacHandleIndicationEvents+0xa0>)
 8010040:	23d1      	movs	r3, #209	; 0xd1
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	58d3      	ldr	r3, [r2, r3]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	4a1e      	ldr	r2, [pc, #120]	; (80100c4 <LoRaMacHandleIndicationEvents+0xa8>)
 801004a:	0010      	movs	r0, r2
 801004c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 801004e:	4b1b      	ldr	r3, [pc, #108]	; (80100bc <LoRaMacHandleIndicationEvents+0xa0>)
 8010050:	4a1b      	ldr	r2, [pc, #108]	; (80100c0 <LoRaMacHandleIndicationEvents+0xa4>)
 8010052:	5c9b      	ldrb	r3, [r3, r2]
 8010054:	2210      	movs	r2, #16
 8010056:	4013      	ands	r3, r2
 8010058:	b2db      	uxtb	r3, r3
 801005a:	2b00      	cmp	r3, #0
 801005c:	d013      	beq.n	8010086 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 801005e:	1d3b      	adds	r3, r7, #4
 8010060:	2207      	movs	r2, #7
 8010062:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010064:	1d3b      	adds	r3, r7, #4
 8010066:	2200      	movs	r2, #0
 8010068:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 801006a:	4a14      	ldr	r2, [pc, #80]	; (80100bc <LoRaMacHandleIndicationEvents+0xa0>)
 801006c:	23d1      	movs	r3, #209	; 0xd1
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	58d3      	ldr	r3, [r2, r3]
 8010072:	68db      	ldr	r3, [r3, #12]
 8010074:	1d3a      	adds	r2, r7, #4
 8010076:	0010      	movs	r0, r2
 8010078:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 801007a:	4b10      	ldr	r3, [pc, #64]	; (80100bc <LoRaMacHandleIndicationEvents+0xa0>)
 801007c:	4a10      	ldr	r2, [pc, #64]	; (80100c0 <LoRaMacHandleIndicationEvents+0xa4>)
 801007e:	5c99      	ldrb	r1, [r3, r2]
 8010080:	2010      	movs	r0, #16
 8010082:	4381      	bics	r1, r0
 8010084:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010086:	4b0d      	ldr	r3, [pc, #52]	; (80100bc <LoRaMacHandleIndicationEvents+0xa0>)
 8010088:	4a0d      	ldr	r2, [pc, #52]	; (80100c0 <LoRaMacHandleIndicationEvents+0xa4>)
 801008a:	5c9b      	ldrb	r3, [r3, r2]
 801008c:	2202      	movs	r2, #2
 801008e:	4013      	ands	r3, r2
 8010090:	b2db      	uxtb	r3, r3
 8010092:	2b00      	cmp	r3, #0
 8010094:	d00d      	beq.n	80100b2 <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010096:	4b09      	ldr	r3, [pc, #36]	; (80100bc <LoRaMacHandleIndicationEvents+0xa0>)
 8010098:	4a09      	ldr	r2, [pc, #36]	; (80100c0 <LoRaMacHandleIndicationEvents+0xa4>)
 801009a:	5c99      	ldrb	r1, [r3, r2]
 801009c:	2002      	movs	r0, #2
 801009e:	4381      	bics	r1, r0
 80100a0:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80100a2:	4a06      	ldr	r2, [pc, #24]	; (80100bc <LoRaMacHandleIndicationEvents+0xa0>)
 80100a4:	23d1      	movs	r3, #209	; 0xd1
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	58d3      	ldr	r3, [r2, r3]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	4a06      	ldr	r2, [pc, #24]	; (80100c8 <LoRaMacHandleIndicationEvents+0xac>)
 80100ae:	0010      	movs	r0, r2
 80100b0:	4798      	blx	r3
    }
}
 80100b2:	46c0      	nop			; (mov r8, r8)
 80100b4:	46bd      	mov	sp, r7
 80100b6:	b008      	add	sp, #32
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	46c0      	nop			; (mov r8, r8)
 80100bc:	20000548 	.word	0x20000548
 80100c0:	00000481 	.word	0x00000481
 80100c4:	200009ac 	.word	0x200009ac
 80100c8:	20000964 	.word	0x20000964

080100cc <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 80100cc:	b590      	push	{r4, r7, lr}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80100d2:	4b39      	ldr	r3, [pc, #228]	; (80101b8 <LoRaMacHandleMcpsRequest+0xec>)
 80100d4:	4a39      	ldr	r2, [pc, #228]	; (80101bc <LoRaMacHandleMcpsRequest+0xf0>)
 80100d6:	5c9b      	ldrb	r3, [r3, r2]
 80100d8:	2201      	movs	r2, #1
 80100da:	4013      	ands	r3, r2
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d066      	beq.n	80101b0 <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 80100e2:	1dfb      	adds	r3, r7, #7
 80100e4:	2200      	movs	r2, #0
 80100e6:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 80100e8:	1dbb      	adds	r3, r7, #6
 80100ea:	2200      	movs	r2, #0
 80100ec:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80100ee:	4b32      	ldr	r3, [pc, #200]	; (80101b8 <LoRaMacHandleMcpsRequest+0xec>)
 80100f0:	4a33      	ldr	r2, [pc, #204]	; (80101c0 <LoRaMacHandleMcpsRequest+0xf4>)
 80100f2:	5c9b      	ldrb	r3, [r3, r2]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d004      	beq.n	8010102 <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 80100f8:	4b2f      	ldr	r3, [pc, #188]	; (80101b8 <LoRaMacHandleMcpsRequest+0xec>)
 80100fa:	4a31      	ldr	r2, [pc, #196]	; (80101c0 <LoRaMacHandleMcpsRequest+0xf4>)
 80100fc:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80100fe:	2b03      	cmp	r3, #3
 8010100:	d105      	bne.n	801010e <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010102:	1dfc      	adds	r4, r7, #7
 8010104:	f002 fb70 	bl	80127e8 <CheckRetransUnconfirmedUplink>
 8010108:	0003      	movs	r3, r0
 801010a:	7023      	strb	r3, [r4, #0]
 801010c:	e026      	b.n	801015c <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 801010e:	4b2a      	ldr	r3, [pc, #168]	; (80101b8 <LoRaMacHandleMcpsRequest+0xec>)
 8010110:	4a2b      	ldr	r2, [pc, #172]	; (80101c0 <LoRaMacHandleMcpsRequest+0xf4>)
 8010112:	5c9b      	ldrb	r3, [r3, r2]
 8010114:	2b01      	cmp	r3, #1
 8010116:	d121      	bne.n	801015c <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 8010118:	4b27      	ldr	r3, [pc, #156]	; (80101b8 <LoRaMacHandleMcpsRequest+0xec>)
 801011a:	4a2a      	ldr	r2, [pc, #168]	; (80101c4 <LoRaMacHandleMcpsRequest+0xf8>)
 801011c:	5c9b      	ldrb	r3, [r3, r2]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d019      	beq.n	8010156 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010122:	1dfc      	adds	r4, r7, #7
 8010124:	f002 fb94 	bl	8012850 <CheckRetransConfirmedUplink>
 8010128:	0003      	movs	r3, r0
 801012a:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 801012c:	4b22      	ldr	r3, [pc, #136]	; (80101b8 <LoRaMacHandleMcpsRequest+0xec>)
 801012e:	4a26      	ldr	r2, [pc, #152]	; (80101c8 <LoRaMacHandleMcpsRequest+0xfc>)
 8010130:	589a      	ldr	r2, [r3, r2]
 8010132:	23b1      	movs	r3, #177	; 0xb1
 8010134:	005b      	lsls	r3, r3, #1
 8010136:	5cd3      	ldrb	r3, [r2, r3]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d10f      	bne.n	801015c <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 801013c:	1dfb      	adds	r3, r7, #7
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	2201      	movs	r2, #1
 8010142:	4053      	eors	r3, r2
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	d002      	beq.n	8010150 <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 801014a:	f002 fbf5 	bl	8012938 <AckTimeoutRetriesProcess>
 801014e:	e005      	b.n	801015c <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8010150:	f002 fc40 	bl	80129d4 <AckTimeoutRetriesFinalize>
 8010154:	e002      	b.n	801015c <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8010156:	1dbb      	adds	r3, r7, #6
 8010158:	2201      	movs	r2, #1
 801015a:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 801015c:	1dfb      	adds	r3, r7, #7
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d011      	beq.n	8010188 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010164:	4b19      	ldr	r3, [pc, #100]	; (80101cc <LoRaMacHandleMcpsRequest+0x100>)
 8010166:	0018      	movs	r0, r3
 8010168:	f00c fc7c 	bl	801ca64 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801016c:	4a12      	ldr	r2, [pc, #72]	; (80101b8 <LoRaMacHandleMcpsRequest+0xec>)
 801016e:	23d0      	movs	r3, #208	; 0xd0
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	58d3      	ldr	r3, [r2, r3]
 8010174:	2220      	movs	r2, #32
 8010176:	4393      	bics	r3, r2
 8010178:	0019      	movs	r1, r3
 801017a:	4a0f      	ldr	r2, [pc, #60]	; (80101b8 <LoRaMacHandleMcpsRequest+0xec>)
 801017c:	23d0      	movs	r3, #208	; 0xd0
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 8010182:	f002 fb8d 	bl	80128a0 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8010186:	e013      	b.n	80101b0 <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 8010188:	1dbb      	adds	r3, r7, #6
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	2201      	movs	r2, #1
 801018e:	4053      	eors	r3, r2
 8010190:	b2db      	uxtb	r3, r3
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00c      	beq.n	80101b0 <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010196:	4b08      	ldr	r3, [pc, #32]	; (80101b8 <LoRaMacHandleMcpsRequest+0xec>)
 8010198:	4a08      	ldr	r2, [pc, #32]	; (80101bc <LoRaMacHandleMcpsRequest+0xf0>)
 801019a:	5c99      	ldrb	r1, [r3, r2]
 801019c:	2020      	movs	r0, #32
 801019e:	4381      	bics	r1, r0
 80101a0:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 80101a2:	4b05      	ldr	r3, [pc, #20]	; (80101b8 <LoRaMacHandleMcpsRequest+0xec>)
 80101a4:	4a07      	ldr	r2, [pc, #28]	; (80101c4 <LoRaMacHandleMcpsRequest+0xf8>)
 80101a6:	2100      	movs	r1, #0
 80101a8:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 80101aa:	2000      	movs	r0, #0
 80101ac:	f000 f8a2 	bl	80102f4 <OnTxDelayedTimerEvent>
}
 80101b0:	46c0      	nop			; (mov r8, r8)
 80101b2:	46bd      	mov	sp, r7
 80101b4:	b003      	add	sp, #12
 80101b6:	bd90      	pop	{r4, r7, pc}
 80101b8:	20000548 	.word	0x20000548
 80101bc:	00000481 	.word	0x00000481
 80101c0:	0000043c 	.word	0x0000043c
 80101c4:	00000413 	.word	0x00000413
 80101c8:	00000484 	.word	0x00000484
 80101cc:	200008b0 	.word	0x200008b0

080101d0 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80101d4:	4b1d      	ldr	r3, [pc, #116]	; (801024c <LoRaMacHandleMlmeRequest+0x7c>)
 80101d6:	4a1e      	ldr	r2, [pc, #120]	; (8010250 <LoRaMacHandleMlmeRequest+0x80>)
 80101d8:	5c9b      	ldrb	r3, [r3, r2]
 80101da:	2204      	movs	r2, #4
 80101dc:	4013      	ands	r3, r2
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d02f      	beq.n	8010244 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80101e4:	2001      	movs	r0, #1
 80101e6:	f004 ffe9 	bl	80151bc <LoRaMacConfirmQueueIsCmdActive>
 80101ea:	1e03      	subs	r3, r0, #0
 80101ec:	d015      	beq.n	801021a <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80101ee:	2001      	movs	r0, #1
 80101f0:	f004 ff7c 	bl	80150ec <LoRaMacConfirmQueueGetStatus>
 80101f4:	1e03      	subs	r3, r0, #0
 80101f6:	d104      	bne.n	8010202 <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 80101f8:	4a14      	ldr	r2, [pc, #80]	; (801024c <LoRaMacHandleMlmeRequest+0x7c>)
 80101fa:	2382      	movs	r3, #130	; 0x82
 80101fc:	00db      	lsls	r3, r3, #3
 80101fe:	2100      	movs	r1, #0
 8010200:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010202:	4a12      	ldr	r2, [pc, #72]	; (801024c <LoRaMacHandleMlmeRequest+0x7c>)
 8010204:	23d0      	movs	r3, #208	; 0xd0
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	58d3      	ldr	r3, [r2, r3]
 801020a:	2202      	movs	r2, #2
 801020c:	4393      	bics	r3, r2
 801020e:	0019      	movs	r1, r3
 8010210:	4a0e      	ldr	r2, [pc, #56]	; (801024c <LoRaMacHandleMlmeRequest+0x7c>)
 8010212:	23d0      	movs	r3, #208	; 0xd0
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 8010218:	e014      	b.n	8010244 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801021a:	2005      	movs	r0, #5
 801021c:	f004 ffce 	bl	80151bc <LoRaMacConfirmQueueIsCmdActive>
 8010220:	1e03      	subs	r3, r0, #0
 8010222:	d104      	bne.n	801022e <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8010224:	2006      	movs	r0, #6
 8010226:	f004 ffc9 	bl	80151bc <LoRaMacConfirmQueueIsCmdActive>
 801022a:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801022c:	d00a      	beq.n	8010244 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801022e:	4a07      	ldr	r2, [pc, #28]	; (801024c <LoRaMacHandleMlmeRequest+0x7c>)
 8010230:	23d0      	movs	r3, #208	; 0xd0
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	58d3      	ldr	r3, [r2, r3]
 8010236:	2202      	movs	r2, #2
 8010238:	4393      	bics	r3, r2
 801023a:	0019      	movs	r1, r3
 801023c:	4a03      	ldr	r2, [pc, #12]	; (801024c <LoRaMacHandleMlmeRequest+0x7c>)
 801023e:	23d0      	movs	r3, #208	; 0xd0
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	50d1      	str	r1, [r2, r3]
}
 8010244:	46c0      	nop			; (mov r8, r8)
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	46c0      	nop			; (mov r8, r8)
 801024c:	20000548 	.word	0x20000548
 8010250:	00000481 	.word	0x00000481

08010254 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010258:	200c      	movs	r0, #12
 801025a:	f004 ffaf 	bl	80151bc <LoRaMacConfirmQueueIsCmdActive>
 801025e:	1e03      	subs	r3, r0, #0
 8010260:	d01c      	beq.n	801029c <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010262:	4b10      	ldr	r3, [pc, #64]	; (80102a4 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010264:	4a10      	ldr	r2, [pc, #64]	; (80102a8 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010266:	5c9b      	ldrb	r3, [r3, r2]
 8010268:	2201      	movs	r2, #1
 801026a:	4013      	ands	r3, r2
 801026c:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801026e:	2b00      	cmp	r3, #0
 8010270:	d114      	bne.n	801029c <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010272:	4b0c      	ldr	r3, [pc, #48]	; (80102a4 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010274:	4a0c      	ldr	r2, [pc, #48]	; (80102a8 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010276:	5c9b      	ldrb	r3, [r3, r2]
 8010278:	2204      	movs	r2, #4
 801027a:	4013      	ands	r3, r2
 801027c:	b2db      	uxtb	r3, r3
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00c      	beq.n	801029c <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010282:	4a08      	ldr	r2, [pc, #32]	; (80102a4 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010284:	23d0      	movs	r3, #208	; 0xd0
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	58d3      	ldr	r3, [r2, r3]
 801028a:	2202      	movs	r2, #2
 801028c:	4393      	bics	r3, r2
 801028e:	0019      	movs	r1, r3
 8010290:	4a04      	ldr	r2, [pc, #16]	; (80102a4 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010292:	23d0      	movs	r3, #208	; 0xd0
 8010294:	009b      	lsls	r3, r3, #2
 8010296:	50d1      	str	r1, [r2, r3]
            return 0x01;
 8010298:	2301      	movs	r3, #1
 801029a:	e000      	b.n	801029e <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 801029c:	2300      	movs	r3, #0
}
 801029e:	0018      	movs	r0, r3
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}
 80102a4:	20000548 	.word	0x20000548
 80102a8:	00000481 	.word	0x00000481

080102ac <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80102b0:	4a0f      	ldr	r2, [pc, #60]	; (80102f0 <LoRaMacCheckForRxAbort+0x44>)
 80102b2:	23d0      	movs	r3, #208	; 0xd0
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	58d3      	ldr	r3, [r2, r3]
 80102b8:	2280      	movs	r2, #128	; 0x80
 80102ba:	4013      	ands	r3, r2
 80102bc:	d015      	beq.n	80102ea <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80102be:	4a0c      	ldr	r2, [pc, #48]	; (80102f0 <LoRaMacCheckForRxAbort+0x44>)
 80102c0:	23d0      	movs	r3, #208	; 0xd0
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	58d3      	ldr	r3, [r2, r3]
 80102c6:	2280      	movs	r2, #128	; 0x80
 80102c8:	4393      	bics	r3, r2
 80102ca:	0019      	movs	r1, r3
 80102cc:	4a08      	ldr	r2, [pc, #32]	; (80102f0 <LoRaMacCheckForRxAbort+0x44>)
 80102ce:	23d0      	movs	r3, #208	; 0xd0
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80102d4:	4a06      	ldr	r2, [pc, #24]	; (80102f0 <LoRaMacCheckForRxAbort+0x44>)
 80102d6:	23d0      	movs	r3, #208	; 0xd0
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	58d3      	ldr	r3, [r2, r3]
 80102dc:	2202      	movs	r2, #2
 80102de:	4393      	bics	r3, r2
 80102e0:	0019      	movs	r1, r3
 80102e2:	4a03      	ldr	r2, [pc, #12]	; (80102f0 <LoRaMacCheckForRxAbort+0x44>)
 80102e4:	23d0      	movs	r3, #208	; 0xd0
 80102e6:	009b      	lsls	r3, r3, #2
 80102e8:	50d1      	str	r1, [r2, r3]
    }
}
 80102ea:	46c0      	nop			; (mov r8, r8)
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}
 80102f0:	20000548 	.word	0x20000548

080102f4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 80102fc:	4b19      	ldr	r3, [pc, #100]	; (8010364 <OnTxDelayedTimerEvent+0x70>)
 80102fe:	0018      	movs	r0, r3
 8010300:	f00c fbb0 	bl	801ca64 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010304:	4a18      	ldr	r2, [pc, #96]	; (8010368 <OnTxDelayedTimerEvent+0x74>)
 8010306:	23d0      	movs	r3, #208	; 0xd0
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	58d3      	ldr	r3, [r2, r3]
 801030c:	2220      	movs	r2, #32
 801030e:	4393      	bics	r3, r2
 8010310:	0019      	movs	r1, r3
 8010312:	4a15      	ldr	r2, [pc, #84]	; (8010368 <OnTxDelayedTimerEvent+0x74>)
 8010314:	23d0      	movs	r3, #208	; 0xd0
 8010316:	009b      	lsls	r3, r3, #2
 8010318:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801031a:	2001      	movs	r0, #1
 801031c:	f001 fb5a 	bl	80119d4 <ScheduleTx>
 8010320:	1e03      	subs	r3, r0, #0
 8010322:	d01a      	beq.n	801035a <OnTxDelayedTimerEvent+0x66>
 8010324:	2b0b      	cmp	r3, #11
 8010326:	d018      	beq.n	801035a <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010328:	4b0f      	ldr	r3, [pc, #60]	; (8010368 <OnTxDelayedTimerEvent+0x74>)
 801032a:	4a10      	ldr	r2, [pc, #64]	; (801036c <OnTxDelayedTimerEvent+0x78>)
 801032c:	589b      	ldr	r3, [r3, r2]
 801032e:	2285      	movs	r2, #133	; 0x85
 8010330:	569b      	ldrsb	r3, [r3, r2]
 8010332:	b2d9      	uxtb	r1, r3
 8010334:	4b0c      	ldr	r3, [pc, #48]	; (8010368 <OnTxDelayedTimerEvent+0x74>)
 8010336:	4a0e      	ldr	r2, [pc, #56]	; (8010370 <OnTxDelayedTimerEvent+0x7c>)
 8010338:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801033a:	4b0b      	ldr	r3, [pc, #44]	; (8010368 <OnTxDelayedTimerEvent+0x74>)
 801033c:	4a0d      	ldr	r2, [pc, #52]	; (8010374 <OnTxDelayedTimerEvent+0x80>)
 801033e:	5c99      	ldrb	r1, [r3, r2]
 8010340:	4b09      	ldr	r3, [pc, #36]	; (8010368 <OnTxDelayedTimerEvent+0x74>)
 8010342:	4a0d      	ldr	r2, [pc, #52]	; (8010378 <OnTxDelayedTimerEvent+0x84>)
 8010344:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010346:	4b08      	ldr	r3, [pc, #32]	; (8010368 <OnTxDelayedTimerEvent+0x74>)
 8010348:	4a0c      	ldr	r2, [pc, #48]	; (801037c <OnTxDelayedTimerEvent+0x88>)
 801034a:	2109      	movs	r1, #9
 801034c:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801034e:	2009      	movs	r0, #9
 8010350:	f004 fefa 	bl	8015148 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010354:	f002 faa4 	bl	80128a0 <StopRetransmission>
            break;
 8010358:	e000      	b.n	801035c <OnTxDelayedTimerEvent+0x68>
            break;
 801035a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801035c:	46c0      	nop			; (mov r8, r8)
 801035e:	46bd      	mov	sp, r7
 8010360:	b002      	add	sp, #8
 8010362:	bd80      	pop	{r7, pc}
 8010364:	200008b0 	.word	0x200008b0
 8010368:	20000548 	.word	0x20000548
 801036c:	00000484 	.word	0x00000484
 8010370:	0000043e 	.word	0x0000043e
 8010374:	00000412 	.word	0x00000412
 8010378:	00000441 	.word	0x00000441
 801037c:	0000043d 	.word	0x0000043d

08010380 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010388:	4b19      	ldr	r3, [pc, #100]	; (80103f0 <OnRxWindow1TimerEvent+0x70>)
 801038a:	4a1a      	ldr	r2, [pc, #104]	; (80103f4 <OnRxWindow1TimerEvent+0x74>)
 801038c:	5c99      	ldrb	r1, [r3, r2]
 801038e:	4a18      	ldr	r2, [pc, #96]	; (80103f0 <OnRxWindow1TimerEvent+0x70>)
 8010390:	23ee      	movs	r3, #238	; 0xee
 8010392:	009b      	lsls	r3, r3, #2
 8010394:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 8010396:	4b16      	ldr	r3, [pc, #88]	; (80103f0 <OnRxWindow1TimerEvent+0x70>)
 8010398:	4a17      	ldr	r2, [pc, #92]	; (80103f8 <OnRxWindow1TimerEvent+0x78>)
 801039a:	589b      	ldr	r3, [r3, r2]
 801039c:	22a5      	movs	r2, #165	; 0xa5
 801039e:	5c9b      	ldrb	r3, [r3, r2]
 80103a0:	b259      	sxtb	r1, r3
 80103a2:	4b13      	ldr	r3, [pc, #76]	; (80103f0 <OnRxWindow1TimerEvent+0x70>)
 80103a4:	4a15      	ldr	r2, [pc, #84]	; (80103fc <OnRxWindow1TimerEvent+0x7c>)
 80103a6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80103a8:	4b11      	ldr	r3, [pc, #68]	; (80103f0 <OnRxWindow1TimerEvent+0x70>)
 80103aa:	4a13      	ldr	r2, [pc, #76]	; (80103f8 <OnRxWindow1TimerEvent+0x78>)
 80103ac:	589b      	ldr	r3, [r3, r2]
 80103ae:	22b9      	movs	r2, #185	; 0xb9
 80103b0:	5c99      	ldrb	r1, [r3, r2]
 80103b2:	4a0f      	ldr	r2, [pc, #60]	; (80103f0 <OnRxWindow1TimerEvent+0x70>)
 80103b4:	23f2      	movs	r3, #242	; 0xf2
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80103ba:	4b0d      	ldr	r3, [pc, #52]	; (80103f0 <OnRxWindow1TimerEvent+0x70>)
 80103bc:	4a0e      	ldr	r2, [pc, #56]	; (80103f8 <OnRxWindow1TimerEvent+0x78>)
 80103be:	589b      	ldr	r3, [r3, r2]
 80103c0:	22ca      	movs	r2, #202	; 0xca
 80103c2:	5c99      	ldrb	r1, [r3, r2]
 80103c4:	4b0a      	ldr	r3, [pc, #40]	; (80103f0 <OnRxWindow1TimerEvent+0x70>)
 80103c6:	4a0e      	ldr	r2, [pc, #56]	; (8010400 <OnRxWindow1TimerEvent+0x80>)
 80103c8:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 80103ca:	4b09      	ldr	r3, [pc, #36]	; (80103f0 <OnRxWindow1TimerEvent+0x70>)
 80103cc:	4a0d      	ldr	r2, [pc, #52]	; (8010404 <OnRxWindow1TimerEvent+0x84>)
 80103ce:	2100      	movs	r1, #0
 80103d0:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80103d2:	4b07      	ldr	r3, [pc, #28]	; (80103f0 <OnRxWindow1TimerEvent+0x70>)
 80103d4:	4a0c      	ldr	r2, [pc, #48]	; (8010408 <OnRxWindow1TimerEvent+0x88>)
 80103d6:	2100      	movs	r1, #0
 80103d8:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80103da:	4a0c      	ldr	r2, [pc, #48]	; (801040c <OnRxWindow1TimerEvent+0x8c>)
 80103dc:	4b0c      	ldr	r3, [pc, #48]	; (8010410 <OnRxWindow1TimerEvent+0x90>)
 80103de:	0011      	movs	r1, r2
 80103e0:	0018      	movs	r0, r3
 80103e2:	f001 fd9d 	bl	8011f20 <RxWindowSetup>
}
 80103e6:	46c0      	nop			; (mov r8, r8)
 80103e8:	46bd      	mov	sp, r7
 80103ea:	b002      	add	sp, #8
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	46c0      	nop			; (mov r8, r8)
 80103f0:	20000548 	.word	0x20000548
 80103f4:	00000415 	.word	0x00000415
 80103f8:	00000484 	.word	0x00000484
 80103fc:	000003bb 	.word	0x000003bb
 8010400:	000003c9 	.word	0x000003c9
 8010404:	000003ca 	.word	0x000003ca
 8010408:	000003cb 	.word	0x000003cb
 801040c:	20000900 	.word	0x20000900
 8010410:	200008c8 	.word	0x200008c8

08010414 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801041c:	4a1c      	ldr	r2, [pc, #112]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 801041e:	2390      	movs	r3, #144	; 0x90
 8010420:	00db      	lsls	r3, r3, #3
 8010422:	5cd3      	ldrb	r3, [r2, r3]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d02f      	beq.n	8010488 <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010428:	4b19      	ldr	r3, [pc, #100]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 801042a:	4a1a      	ldr	r2, [pc, #104]	; (8010494 <OnRxWindow2TimerEvent+0x80>)
 801042c:	5c99      	ldrb	r1, [r3, r2]
 801042e:	4a18      	ldr	r2, [pc, #96]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 8010430:	23f3      	movs	r3, #243	; 0xf3
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8010436:	4b16      	ldr	r3, [pc, #88]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 8010438:	4a17      	ldr	r2, [pc, #92]	; (8010498 <OnRxWindow2TimerEvent+0x84>)
 801043a:	589b      	ldr	r3, [r3, r2]
 801043c:	22a8      	movs	r2, #168	; 0xa8
 801043e:	5899      	ldr	r1, [r3, r2]
 8010440:	4a13      	ldr	r2, [pc, #76]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 8010442:	23f4      	movs	r3, #244	; 0xf4
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010448:	4b11      	ldr	r3, [pc, #68]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 801044a:	4a13      	ldr	r2, [pc, #76]	; (8010498 <OnRxWindow2TimerEvent+0x84>)
 801044c:	589b      	ldr	r3, [r3, r2]
 801044e:	22b9      	movs	r2, #185	; 0xb9
 8010450:	5c99      	ldrb	r1, [r3, r2]
 8010452:	4a0f      	ldr	r2, [pc, #60]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 8010454:	23f7      	movs	r3, #247	; 0xf7
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801045a:	4b0d      	ldr	r3, [pc, #52]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 801045c:	4a0e      	ldr	r2, [pc, #56]	; (8010498 <OnRxWindow2TimerEvent+0x84>)
 801045e:	589b      	ldr	r3, [r3, r2]
 8010460:	22ca      	movs	r2, #202	; 0xca
 8010462:	5c99      	ldrb	r1, [r3, r2]
 8010464:	4b0a      	ldr	r3, [pc, #40]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 8010466:	4a0d      	ldr	r2, [pc, #52]	; (801049c <OnRxWindow2TimerEvent+0x88>)
 8010468:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 801046a:	4b09      	ldr	r3, [pc, #36]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 801046c:	4a0c      	ldr	r2, [pc, #48]	; (80104a0 <OnRxWindow2TimerEvent+0x8c>)
 801046e:	2100      	movs	r1, #0
 8010470:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010472:	4b07      	ldr	r3, [pc, #28]	; (8010490 <OnRxWindow2TimerEvent+0x7c>)
 8010474:	4a0b      	ldr	r2, [pc, #44]	; (80104a4 <OnRxWindow2TimerEvent+0x90>)
 8010476:	2101      	movs	r1, #1
 8010478:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 801047a:	4a0b      	ldr	r2, [pc, #44]	; (80104a8 <OnRxWindow2TimerEvent+0x94>)
 801047c:	4b0b      	ldr	r3, [pc, #44]	; (80104ac <OnRxWindow2TimerEvent+0x98>)
 801047e:	0011      	movs	r1, r2
 8010480:	0018      	movs	r0, r3
 8010482:	f001 fd4d 	bl	8011f20 <RxWindowSetup>
 8010486:	e000      	b.n	801048a <OnRxWindow2TimerEvent+0x76>
        return;
 8010488:	46c0      	nop			; (mov r8, r8)
}
 801048a:	46bd      	mov	sp, r7
 801048c:	b002      	add	sp, #8
 801048e:	bd80      	pop	{r7, pc}
 8010490:	20000548 	.word	0x20000548
 8010494:	00000415 	.word	0x00000415
 8010498:	00000484 	.word	0x00000484
 801049c:	000003dd 	.word	0x000003dd
 80104a0:	000003de 	.word	0x000003de
 80104a4:	000003df 	.word	0x000003df
 80104a8:	20000914 	.word	0x20000914
 80104ac:	200008e0 	.word	0x200008e0

080104b0 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 80104b8:	4b18      	ldr	r3, [pc, #96]	; (801051c <OnAckTimeoutTimerEvent+0x6c>)
 80104ba:	0018      	movs	r0, r3
 80104bc:	f00c fad2 	bl	801ca64 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80104c0:	4b17      	ldr	r3, [pc, #92]	; (8010520 <OnAckTimeoutTimerEvent+0x70>)
 80104c2:	4a18      	ldr	r2, [pc, #96]	; (8010524 <OnAckTimeoutTimerEvent+0x74>)
 80104c4:	5c9b      	ldrb	r3, [r3, r2]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d003      	beq.n	80104d2 <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 80104ca:	4b15      	ldr	r3, [pc, #84]	; (8010520 <OnAckTimeoutTimerEvent+0x70>)
 80104cc:	4a16      	ldr	r2, [pc, #88]	; (8010528 <OnAckTimeoutTimerEvent+0x78>)
 80104ce:	2101      	movs	r1, #1
 80104d0:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80104d2:	4b13      	ldr	r3, [pc, #76]	; (8010520 <OnAckTimeoutTimerEvent+0x70>)
 80104d4:	4a15      	ldr	r2, [pc, #84]	; (801052c <OnAckTimeoutTimerEvent+0x7c>)
 80104d6:	589b      	ldr	r3, [r3, r2]
 80104d8:	227c      	movs	r2, #124	; 0x7c
 80104da:	5c9b      	ldrb	r3, [r3, r2]
 80104dc:	2b02      	cmp	r3, #2
 80104de:	d105      	bne.n	80104ec <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80104e0:	4b0f      	ldr	r3, [pc, #60]	; (8010520 <OnAckTimeoutTimerEvent+0x70>)
 80104e2:	4a13      	ldr	r2, [pc, #76]	; (8010530 <OnAckTimeoutTimerEvent+0x80>)
 80104e4:	5c99      	ldrb	r1, [r3, r2]
 80104e6:	2020      	movs	r0, #32
 80104e8:	4301      	orrs	r1, r0
 80104ea:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80104ec:	4a0c      	ldr	r2, [pc, #48]	; (8010520 <OnAckTimeoutTimerEvent+0x70>)
 80104ee:	23d2      	movs	r3, #210	; 0xd2
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	58d3      	ldr	r3, [r2, r3]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d00c      	beq.n	8010512 <OnAckTimeoutTimerEvent+0x62>
 80104f8:	4a09      	ldr	r2, [pc, #36]	; (8010520 <OnAckTimeoutTimerEvent+0x70>)
 80104fa:	23d2      	movs	r3, #210	; 0xd2
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	58d3      	ldr	r3, [r2, r3]
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d005      	beq.n	8010512 <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010506:	4a06      	ldr	r2, [pc, #24]	; (8010520 <OnAckTimeoutTimerEvent+0x70>)
 8010508:	23d2      	movs	r3, #210	; 0xd2
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	58d3      	ldr	r3, [r2, r3]
 801050e:	68db      	ldr	r3, [r3, #12]
 8010510:	4798      	blx	r3
    }
}
 8010512:	46c0      	nop			; (mov r8, r8)
 8010514:	46bd      	mov	sp, r7
 8010516:	b002      	add	sp, #8
 8010518:	bd80      	pop	{r7, pc}
 801051a:	46c0      	nop			; (mov r8, r8)
 801051c:	20000940 	.word	0x20000940
 8010520:	20000548 	.word	0x20000548
 8010524:	00000414 	.word	0x00000414
 8010528:	00000413 	.word	0x00000413
 801052c:	00000484 	.word	0x00000484
 8010530:	00000481 	.word	0x00000481

08010534 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010534:	b590      	push	{r4, r7, lr}
 8010536:	b085      	sub	sp, #20
 8010538:	af00      	add	r7, sp, #0
 801053a:	60ba      	str	r2, [r7, #8]
 801053c:	607b      	str	r3, [r7, #4]
 801053e:	230f      	movs	r3, #15
 8010540:	18fb      	adds	r3, r7, r3
 8010542:	1c02      	adds	r2, r0, #0
 8010544:	701a      	strb	r2, [r3, #0]
 8010546:	230e      	movs	r3, #14
 8010548:	18fb      	adds	r3, r7, r3
 801054a:	1c0a      	adds	r2, r1, #0
 801054c:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d005      	beq.n	8010560 <GetFCntDown+0x2c>
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010556:	2b00      	cmp	r3, #0
 8010558:	d002      	beq.n	8010560 <GetFCntDown+0x2c>
 801055a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055c:	2b00      	cmp	r3, #0
 801055e:	d101      	bne.n	8010564 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010560:	230a      	movs	r3, #10
 8010562:	e033      	b.n	80105cc <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010564:	230f      	movs	r3, #15
 8010566:	18fb      	adds	r3, r7, r3
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d01a      	beq.n	80105a4 <GetFCntDown+0x70>
 801056e:	2b01      	cmp	r3, #1
 8010570:	d11c      	bne.n	80105ac <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010572:	1d3b      	adds	r3, r7, #4
 8010574:	789b      	ldrb	r3, [r3, #2]
 8010576:	2b01      	cmp	r3, #1
 8010578:	d110      	bne.n	801059c <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 801057a:	220e      	movs	r2, #14
 801057c:	18bb      	adds	r3, r7, r2
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d003      	beq.n	801058c <GetFCntDown+0x58>
 8010584:	18bb      	adds	r3, r7, r2
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	2b03      	cmp	r3, #3
 801058a:	d103      	bne.n	8010594 <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	2202      	movs	r2, #2
 8010590:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010592:	e00d      	b.n	80105b0 <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 8010594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010596:	2201      	movs	r2, #1
 8010598:	701a      	strb	r2, [r3, #0]
            break;
 801059a:	e009      	b.n	80105b0 <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 801059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059e:	2203      	movs	r2, #3
 80105a0:	701a      	strb	r2, [r3, #0]
            break;
 80105a2:	e005      	b.n	80105b0 <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80105a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a6:	2204      	movs	r2, #4
 80105a8:	701a      	strb	r2, [r3, #0]
            break;
 80105aa:	e001      	b.n	80105b0 <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80105ac:	2305      	movs	r3, #5
 80105ae:	e00d      	b.n	80105cc <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80105b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b2:	7818      	ldrb	r0, [r3, #0]
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	89db      	ldrh	r3, [r3, #14]
 80105b8:	001c      	movs	r4, r3
 80105ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105bc:	2320      	movs	r3, #32
 80105be:	18fb      	adds	r3, r7, r3
 80105c0:	8819      	ldrh	r1, [r3, #0]
 80105c2:	0013      	movs	r3, r2
 80105c4:	0022      	movs	r2, r4
 80105c6:	f005 faa1 	bl	8015b0c <LoRaMacCryptoGetFCntDown>
 80105ca:	0003      	movs	r3, r0
}
 80105cc:	0018      	movs	r0, r3
 80105ce:	46bd      	mov	sp, r7
 80105d0:	b005      	add	sp, #20
 80105d2:	bd90      	pop	{r4, r7, pc}

080105d4 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80105d4:	b5b0      	push	{r4, r5, r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	0002      	movs	r2, r0
 80105dc:	1dfb      	adds	r3, r7, #7
 80105de:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80105e0:	230f      	movs	r3, #15
 80105e2:	18fb      	adds	r3, r7, r3
 80105e4:	2203      	movs	r2, #3
 80105e6:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 80105e8:	4b82      	ldr	r3, [pc, #520]	; (80107f4 <SwitchClass+0x220>)
 80105ea:	4a83      	ldr	r2, [pc, #524]	; (80107f8 <SwitchClass+0x224>)
 80105ec:	589b      	ldr	r3, [r3, r2]
 80105ee:	227c      	movs	r2, #124	; 0x7c
 80105f0:	5c9b      	ldrb	r3, [r3, r2]
 80105f2:	2b02      	cmp	r3, #2
 80105f4:	d100      	bne.n	80105f8 <SwitchClass+0x24>
 80105f6:	e0de      	b.n	80107b6 <SwitchClass+0x1e2>
 80105f8:	dd00      	ble.n	80105fc <SwitchClass+0x28>
 80105fa:	e0f4      	b.n	80107e6 <SwitchClass+0x212>
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d003      	beq.n	8010608 <SwitchClass+0x34>
 8010600:	2b01      	cmp	r3, #1
 8010602:	d100      	bne.n	8010606 <SwitchClass+0x32>
 8010604:	e0c2      	b.n	801078c <SwitchClass+0x1b8>
 8010606:	e0ee      	b.n	80107e6 <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010608:	1dfb      	adds	r3, r7, #7
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d10b      	bne.n	8010628 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8010610:	4b78      	ldr	r3, [pc, #480]	; (80107f4 <SwitchClass+0x220>)
 8010612:	4a79      	ldr	r2, [pc, #484]	; (80107f8 <SwitchClass+0x224>)
 8010614:	589a      	ldr	r2, [r3, r2]
 8010616:	4b77      	ldr	r3, [pc, #476]	; (80107f4 <SwitchClass+0x220>)
 8010618:	4977      	ldr	r1, [pc, #476]	; (80107f8 <SwitchClass+0x224>)
 801061a:	585b      	ldr	r3, [r3, r1]
 801061c:	20b0      	movs	r0, #176	; 0xb0
 801061e:	21a8      	movs	r1, #168	; 0xa8
 8010620:	181b      	adds	r3, r3, r0
 8010622:	1852      	adds	r2, r2, r1
 8010624:	ca03      	ldmia	r2!, {r0, r1}
 8010626:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8010628:	1dfb      	adds	r3, r7, #7
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d113      	bne.n	8010658 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010630:	250f      	movs	r5, #15
 8010632:	197c      	adds	r4, r7, r5
 8010634:	1dfb      	adds	r3, r7, #7
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	0018      	movs	r0, r3
 801063a:	f004 f86d 	bl	8014718 <LoRaMacClassBSwitchClass>
 801063e:	0003      	movs	r3, r0
 8010640:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 8010642:	197b      	adds	r3, r7, r5
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d106      	bne.n	8010658 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 801064a:	4b6a      	ldr	r3, [pc, #424]	; (80107f4 <SwitchClass+0x220>)
 801064c:	4a6a      	ldr	r2, [pc, #424]	; (80107f8 <SwitchClass+0x224>)
 801064e:	589b      	ldr	r3, [r3, r2]
 8010650:	1dfa      	adds	r2, r7, #7
 8010652:	217c      	movs	r1, #124	; 0x7c
 8010654:	7812      	ldrb	r2, [r2, #0]
 8010656:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 8010658:	1dfb      	adds	r3, r7, #7
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	2b02      	cmp	r3, #2
 801065e:	d000      	beq.n	8010662 <SwitchClass+0x8e>
 8010660:	e0bc      	b.n	80107dc <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010662:	4b64      	ldr	r3, [pc, #400]	; (80107f4 <SwitchClass+0x220>)
 8010664:	4a64      	ldr	r2, [pc, #400]	; (80107f8 <SwitchClass+0x224>)
 8010666:	589b      	ldr	r3, [r3, r2]
 8010668:	1dfa      	adds	r2, r7, #7
 801066a:	217c      	movs	r1, #124	; 0x7c
 801066c:	7812      	ldrb	r2, [r2, #0]
 801066e:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010670:	4860      	ldr	r0, [pc, #384]	; (80107f4 <SwitchClass+0x220>)
 8010672:	23f8      	movs	r3, #248	; 0xf8
 8010674:	009b      	lsls	r3, r3, #2
 8010676:	495f      	ldr	r1, [pc, #380]	; (80107f4 <SwitchClass+0x220>)
 8010678:	22f3      	movs	r2, #243	; 0xf3
 801067a:	0092      	lsls	r2, r2, #2
 801067c:	18c3      	adds	r3, r0, r3
 801067e:	188a      	adds	r2, r1, r2
 8010680:	ca13      	ldmia	r2!, {r0, r1, r4}
 8010682:	c313      	stmia	r3!, {r0, r1, r4}
 8010684:	ca03      	ldmia	r2!, {r0, r1}
 8010686:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010688:	4b5a      	ldr	r3, [pc, #360]	; (80107f4 <SwitchClass+0x220>)
 801068a:	4a5c      	ldr	r2, [pc, #368]	; (80107fc <SwitchClass+0x228>)
 801068c:	2102      	movs	r1, #2
 801068e:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010690:	230e      	movs	r3, #14
 8010692:	18fb      	adds	r3, r7, r3
 8010694:	2200      	movs	r2, #0
 8010696:	701a      	strb	r2, [r3, #0]
 8010698:	e064      	b.n	8010764 <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 801069a:	4b56      	ldr	r3, [pc, #344]	; (80107f4 <SwitchClass+0x220>)
 801069c:	4a56      	ldr	r2, [pc, #344]	; (80107f8 <SwitchClass+0x224>)
 801069e:	589a      	ldr	r2, [r3, r2]
 80106a0:	240e      	movs	r4, #14
 80106a2:	193b      	adds	r3, r7, r4
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	b25b      	sxtb	r3, r3
 80106a8:	2152      	movs	r1, #82	; 0x52
 80106aa:	202c      	movs	r0, #44	; 0x2c
 80106ac:	4343      	muls	r3, r0
 80106ae:	18d3      	adds	r3, r2, r3
 80106b0:	185b      	adds	r3, r3, r1
 80106b2:	781b      	ldrb	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d04c      	beq.n	8010752 <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80106b8:	4b4e      	ldr	r3, [pc, #312]	; (80107f4 <SwitchClass+0x220>)
 80106ba:	4a4f      	ldr	r2, [pc, #316]	; (80107f8 <SwitchClass+0x224>)
 80106bc:	5899      	ldr	r1, [r3, r2]
 80106be:	193b      	adds	r3, r7, r4
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	b25b      	sxtb	r3, r3
 80106c4:	4a4b      	ldr	r2, [pc, #300]	; (80107f4 <SwitchClass+0x220>)
 80106c6:	484c      	ldr	r0, [pc, #304]	; (80107f8 <SwitchClass+0x224>)
 80106c8:	5812      	ldr	r2, [r2, r0]
 80106ca:	202c      	movs	r0, #44	; 0x2c
 80106cc:	4343      	muls	r3, r0
 80106ce:	18cb      	adds	r3, r1, r3
 80106d0:	3368      	adds	r3, #104	; 0x68
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	21b0      	movs	r1, #176	; 0xb0
 80106d6:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80106d8:	4b46      	ldr	r3, [pc, #280]	; (80107f4 <SwitchClass+0x220>)
 80106da:	4a47      	ldr	r2, [pc, #284]	; (80107f8 <SwitchClass+0x224>)
 80106dc:	589a      	ldr	r2, [r3, r2]
 80106de:	193b      	adds	r3, r7, r4
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	b25b      	sxtb	r3, r3
 80106e4:	216c      	movs	r1, #108	; 0x6c
 80106e6:	202c      	movs	r0, #44	; 0x2c
 80106e8:	4343      	muls	r3, r0
 80106ea:	18d3      	adds	r3, r2, r3
 80106ec:	185b      	adds	r3, r3, r1
 80106ee:	2100      	movs	r1, #0
 80106f0:	5659      	ldrsb	r1, [r3, r1]
 80106f2:	4b40      	ldr	r3, [pc, #256]	; (80107f4 <SwitchClass+0x220>)
 80106f4:	4a40      	ldr	r2, [pc, #256]	; (80107f8 <SwitchClass+0x224>)
 80106f6:	589b      	ldr	r3, [r3, r2]
 80106f8:	b2c9      	uxtb	r1, r1
 80106fa:	22b4      	movs	r2, #180	; 0xb4
 80106fc:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80106fe:	4b3d      	ldr	r3, [pc, #244]	; (80107f4 <SwitchClass+0x220>)
 8010700:	4a3f      	ldr	r2, [pc, #252]	; (8010800 <SwitchClass+0x22c>)
 8010702:	5c99      	ldrb	r1, [r3, r2]
 8010704:	4a3b      	ldr	r2, [pc, #236]	; (80107f4 <SwitchClass+0x220>)
 8010706:	23f8      	movs	r3, #248	; 0xf8
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 801070c:	4b39      	ldr	r3, [pc, #228]	; (80107f4 <SwitchClass+0x220>)
 801070e:	4a3a      	ldr	r2, [pc, #232]	; (80107f8 <SwitchClass+0x224>)
 8010710:	589b      	ldr	r3, [r3, r2]
 8010712:	22b0      	movs	r2, #176	; 0xb0
 8010714:	5899      	ldr	r1, [r3, r2]
 8010716:	4a37      	ldr	r2, [pc, #220]	; (80107f4 <SwitchClass+0x220>)
 8010718:	23f9      	movs	r3, #249	; 0xf9
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801071e:	4b35      	ldr	r3, [pc, #212]	; (80107f4 <SwitchClass+0x220>)
 8010720:	4a35      	ldr	r2, [pc, #212]	; (80107f8 <SwitchClass+0x224>)
 8010722:	589b      	ldr	r3, [r3, r2]
 8010724:	22b9      	movs	r2, #185	; 0xb9
 8010726:	5c99      	ldrb	r1, [r3, r2]
 8010728:	4a32      	ldr	r2, [pc, #200]	; (80107f4 <SwitchClass+0x220>)
 801072a:	23fc      	movs	r3, #252	; 0xfc
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010730:	4b30      	ldr	r3, [pc, #192]	; (80107f4 <SwitchClass+0x220>)
 8010732:	4a31      	ldr	r2, [pc, #196]	; (80107f8 <SwitchClass+0x224>)
 8010734:	589b      	ldr	r3, [r3, r2]
 8010736:	22ca      	movs	r2, #202	; 0xca
 8010738:	5c99      	ldrb	r1, [r3, r2]
 801073a:	4b2e      	ldr	r3, [pc, #184]	; (80107f4 <SwitchClass+0x220>)
 801073c:	4a31      	ldr	r2, [pc, #196]	; (8010804 <SwitchClass+0x230>)
 801073e:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010740:	4b2c      	ldr	r3, [pc, #176]	; (80107f4 <SwitchClass+0x220>)
 8010742:	4a2e      	ldr	r2, [pc, #184]	; (80107fc <SwitchClass+0x228>)
 8010744:	2103      	movs	r1, #3
 8010746:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010748:	4b2a      	ldr	r3, [pc, #168]	; (80107f4 <SwitchClass+0x220>)
 801074a:	4a2f      	ldr	r2, [pc, #188]	; (8010808 <SwitchClass+0x234>)
 801074c:	2101      	movs	r1, #1
 801074e:	5499      	strb	r1, [r3, r2]
                        break;
 8010750:	e00e      	b.n	8010770 <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010752:	210e      	movs	r1, #14
 8010754:	187b      	adds	r3, r7, r1
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	b25b      	sxtb	r3, r3
 801075a:	b2db      	uxtb	r3, r3
 801075c:	3301      	adds	r3, #1
 801075e:	b2da      	uxtb	r2, r3
 8010760:	187b      	adds	r3, r7, r1
 8010762:	701a      	strb	r2, [r3, #0]
 8010764:	230e      	movs	r3, #14
 8010766:	18fb      	adds	r3, r7, r3
 8010768:	781b      	ldrb	r3, [r3, #0]
 801076a:	b25b      	sxtb	r3, r3
 801076c:	2b00      	cmp	r3, #0
 801076e:	dd94      	ble.n	801069a <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010770:	4b20      	ldr	r3, [pc, #128]	; (80107f4 <SwitchClass+0x220>)
 8010772:	4a26      	ldr	r2, [pc, #152]	; (801080c <SwitchClass+0x238>)
 8010774:	2100      	movs	r1, #0
 8010776:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010778:	4b25      	ldr	r3, [pc, #148]	; (8010810 <SwitchClass+0x23c>)
 801077a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801077c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801077e:	f001 fc01 	bl	8011f84 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010782:	230f      	movs	r3, #15
 8010784:	18fb      	adds	r3, r7, r3
 8010786:	2200      	movs	r2, #0
 8010788:	701a      	strb	r2, [r3, #0]
            }
            break;
 801078a:	e027      	b.n	80107dc <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 801078c:	250f      	movs	r5, #15
 801078e:	197c      	adds	r4, r7, r5
 8010790:	1dfb      	adds	r3, r7, #7
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	0018      	movs	r0, r3
 8010796:	f003 ffbf 	bl	8014718 <LoRaMacClassBSwitchClass>
 801079a:	0003      	movs	r3, r0
 801079c:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 801079e:	197b      	adds	r3, r7, r5
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d11c      	bne.n	80107e0 <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80107a6:	4b13      	ldr	r3, [pc, #76]	; (80107f4 <SwitchClass+0x220>)
 80107a8:	4a13      	ldr	r2, [pc, #76]	; (80107f8 <SwitchClass+0x224>)
 80107aa:	589b      	ldr	r3, [r3, r2]
 80107ac:	1dfa      	adds	r2, r7, #7
 80107ae:	217c      	movs	r1, #124	; 0x7c
 80107b0:	7812      	ldrb	r2, [r2, #0]
 80107b2:	545a      	strb	r2, [r3, r1]
            }
            break;
 80107b4:	e014      	b.n	80107e0 <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80107b6:	1dfb      	adds	r3, r7, #7
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d112      	bne.n	80107e4 <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80107be:	4b0d      	ldr	r3, [pc, #52]	; (80107f4 <SwitchClass+0x220>)
 80107c0:	4a0d      	ldr	r2, [pc, #52]	; (80107f8 <SwitchClass+0x224>)
 80107c2:	589b      	ldr	r3, [r3, r2]
 80107c4:	1dfa      	adds	r2, r7, #7
 80107c6:	217c      	movs	r1, #124	; 0x7c
 80107c8:	7812      	ldrb	r2, [r2, #0]
 80107ca:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80107cc:	4b10      	ldr	r3, [pc, #64]	; (8010810 <SwitchClass+0x23c>)
 80107ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107d0:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80107d2:	230f      	movs	r3, #15
 80107d4:	18fb      	adds	r3, r7, r3
 80107d6:	2200      	movs	r2, #0
 80107d8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80107da:	e003      	b.n	80107e4 <SwitchClass+0x210>
            break;
 80107dc:	46c0      	nop			; (mov r8, r8)
 80107de:	e002      	b.n	80107e6 <SwitchClass+0x212>
            break;
 80107e0:	46c0      	nop			; (mov r8, r8)
 80107e2:	e000      	b.n	80107e6 <SwitchClass+0x212>
            break;
 80107e4:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 80107e6:	230f      	movs	r3, #15
 80107e8:	18fb      	adds	r3, r7, r3
 80107ea:	781b      	ldrb	r3, [r3, #0]
}
 80107ec:	0018      	movs	r0, r3
 80107ee:	46bd      	mov	sp, r7
 80107f0:	b004      	add	sp, #16
 80107f2:	bdb0      	pop	{r4, r5, r7, pc}
 80107f4:	20000548 	.word	0x20000548
 80107f8:	00000484 	.word	0x00000484
 80107fc:	000003f3 	.word	0x000003f3
 8010800:	00000415 	.word	0x00000415
 8010804:	000003f1 	.word	0x000003f1
 8010808:	000003f2 	.word	0x000003f2
 801080c:	00000414 	.word	0x00000414
 8010810:	0801f0b4 	.word	0x0801f0b4

08010814 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b086      	sub	sp, #24
 8010818:	af00      	add	r7, sp, #0
 801081a:	0002      	movs	r2, r0
 801081c:	1dfb      	adds	r3, r7, #7
 801081e:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010820:	4b17      	ldr	r3, [pc, #92]	; (8010880 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010822:	4a18      	ldr	r2, [pc, #96]	; (8010884 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010824:	589b      	ldr	r3, [r3, r2]
 8010826:	22b8      	movs	r2, #184	; 0xb8
 8010828:	5c9a      	ldrb	r2, [r3, r2]
 801082a:	2110      	movs	r1, #16
 801082c:	187b      	adds	r3, r7, r1
 801082e:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 8010830:	187b      	adds	r3, r7, r1
 8010832:	1dfa      	adds	r2, r7, #7
 8010834:	7812      	ldrb	r2, [r2, #0]
 8010836:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010838:	187b      	adds	r3, r7, r1
 801083a:	220d      	movs	r2, #13
 801083c:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 801083e:	4b10      	ldr	r3, [pc, #64]	; (8010880 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010840:	4a10      	ldr	r2, [pc, #64]	; (8010884 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010842:	589b      	ldr	r3, [r3, r2]
 8010844:	22ca      	movs	r2, #202	; 0xca
 8010846:	5c9b      	ldrb	r3, [r3, r2]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d002      	beq.n	8010852 <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801084c:	187b      	adds	r3, r7, r1
 801084e:	220e      	movs	r2, #14
 8010850:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010852:	4b0b      	ldr	r3, [pc, #44]	; (8010880 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010854:	4a0b      	ldr	r2, [pc, #44]	; (8010884 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010856:	589b      	ldr	r3, [r3, r2]
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	2210      	movs	r2, #16
 801085c:	18ba      	adds	r2, r7, r2
 801085e:	0011      	movs	r1, r2
 8010860:	0018      	movs	r0, r3
 8010862:	f006 f8c8 	bl	80169f6 <RegionGetPhyParam>
 8010866:	0003      	movs	r3, r0
 8010868:	001a      	movs	r2, r3
 801086a:	210c      	movs	r1, #12
 801086c:	187b      	adds	r3, r7, r1
 801086e:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 8010870:	187b      	adds	r3, r7, r1
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	b2db      	uxtb	r3, r3
}
 8010876:	0018      	movs	r0, r3
 8010878:	46bd      	mov	sp, r7
 801087a:	b006      	add	sp, #24
 801087c:	bd80      	pop	{r7, pc}
 801087e:	46c0      	nop			; (mov r8, r8)
 8010880:	20000548 	.word	0x20000548
 8010884:	00000484 	.word	0x00000484

08010888 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010888:	b5b0      	push	{r4, r5, r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	0004      	movs	r4, r0
 8010890:	0008      	movs	r0, r1
 8010892:	0011      	movs	r1, r2
 8010894:	1dfb      	adds	r3, r7, #7
 8010896:	1c22      	adds	r2, r4, #0
 8010898:	701a      	strb	r2, [r3, #0]
 801089a:	1dbb      	adds	r3, r7, #6
 801089c:	1c02      	adds	r2, r0, #0
 801089e:	701a      	strb	r2, [r3, #0]
 80108a0:	1d7b      	adds	r3, r7, #5
 80108a2:	1c0a      	adds	r2, r1, #0
 80108a4:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 80108a6:	250e      	movs	r5, #14
 80108a8:	197b      	adds	r3, r7, r5
 80108aa:	2200      	movs	r2, #0
 80108ac:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 80108ae:	240c      	movs	r4, #12
 80108b0:	193b      	adds	r3, r7, r4
 80108b2:	2200      	movs	r2, #0
 80108b4:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80108b6:	1dbb      	adds	r3, r7, #6
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	b25b      	sxtb	r3, r3
 80108bc:	0018      	movs	r0, r3
 80108be:	f7ff ffa9 	bl	8010814 <GetMaxAppPayloadWithoutFOptsLength>
 80108c2:	0003      	movs	r3, r0
 80108c4:	001a      	movs	r2, r3
 80108c6:	0028      	movs	r0, r5
 80108c8:	183b      	adds	r3, r7, r0
 80108ca:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80108cc:	1dfb      	adds	r3, r7, #7
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	b299      	uxth	r1, r3
 80108d2:	1d7b      	adds	r3, r7, #5
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	b29a      	uxth	r2, r3
 80108d8:	193b      	adds	r3, r7, r4
 80108da:	188a      	adds	r2, r1, r2
 80108dc:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80108de:	193a      	adds	r2, r7, r4
 80108e0:	183b      	adds	r3, r7, r0
 80108e2:	8812      	ldrh	r2, [r2, #0]
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d805      	bhi.n	80108f6 <ValidatePayloadLength+0x6e>
 80108ea:	193b      	adds	r3, r7, r4
 80108ec:	881b      	ldrh	r3, [r3, #0]
 80108ee:	2bff      	cmp	r3, #255	; 0xff
 80108f0:	d801      	bhi.n	80108f6 <ValidatePayloadLength+0x6e>
    {
        return true;
 80108f2:	2301      	movs	r3, #1
 80108f4:	e000      	b.n	80108f8 <ValidatePayloadLength+0x70>
    }
    return false;
 80108f6:	2300      	movs	r3, #0
}
 80108f8:	0018      	movs	r0, r3
 80108fa:	46bd      	mov	sp, r7
 80108fc:	b004      	add	sp, #16
 80108fe:	bdb0      	pop	{r4, r5, r7, pc}

08010900 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 8010900:	b580      	push	{r7, lr}
 8010902:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8010904:	4b04      	ldr	r3, [pc, #16]	; (8010918 <SetMlmeScheduleUplinkIndication+0x18>)
 8010906:	4a05      	ldr	r2, [pc, #20]	; (801091c <SetMlmeScheduleUplinkIndication+0x1c>)
 8010908:	5c99      	ldrb	r1, [r3, r2]
 801090a:	2010      	movs	r0, #16
 801090c:	4301      	orrs	r1, r0
 801090e:	5499      	strb	r1, [r3, r2]
}
 8010910:	46c0      	nop			; (mov r8, r8)
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	46c0      	nop			; (mov r8, r8)
 8010918:	20000548 	.word	0x20000548
 801091c:	00000481 	.word	0x00000481

08010920 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010922:	b0a5      	sub	sp, #148	; 0x94
 8010924:	af02      	add	r7, sp, #8
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	000c      	movs	r4, r1
 801092a:	0010      	movs	r0, r2
 801092c:	0019      	movs	r1, r3
 801092e:	1cfb      	adds	r3, r7, #3
 8010930:	1c22      	adds	r2, r4, #0
 8010932:	701a      	strb	r2, [r3, #0]
 8010934:	1cbb      	adds	r3, r7, #2
 8010936:	1c02      	adds	r2, r0, #0
 8010938:	701a      	strb	r2, [r3, #0]
 801093a:	1c7b      	adds	r3, r7, #1
 801093c:	1c0a      	adds	r2, r1, #0
 801093e:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 8010940:	236b      	movs	r3, #107	; 0x6b
 8010942:	18fb      	adds	r3, r7, r3
 8010944:	2200      	movs	r2, #0
 8010946:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 8010948:	2387      	movs	r3, #135	; 0x87
 801094a:	18fb      	adds	r3, r7, r3
 801094c:	2200      	movs	r2, #0
 801094e:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010950:	2368      	movs	r3, #104	; 0x68
 8010952:	18fb      	adds	r3, r7, r3
 8010954:	2200      	movs	r2, #0
 8010956:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 8010958:	f000 fd58 	bl	801140c <ProcessMacCommands+0xaec>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 801095c:	1cfb      	adds	r3, r7, #3
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	18d3      	adds	r3, r2, r3
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	0018      	movs	r0, r3
 8010968:	f004 fa06 	bl	8014d78 <LoRaMacCommandsGetCmdSize>
 801096c:	0003      	movs	r3, r0
 801096e:	001a      	movs	r2, r3
 8010970:	1cfb      	adds	r3, r7, #3
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	18d2      	adds	r2, r2, r3
 8010976:	1cbb      	adds	r3, r7, #2
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	429a      	cmp	r2, r3
 801097c:	dd01      	ble.n	8010982 <ProcessMacCommands+0x62>
 801097e:	f000 fd4e 	bl	801141e <ProcessMacCommands+0xafe>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010982:	1cfb      	adds	r3, r7, #3
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	1cfa      	adds	r2, r7, #3
 8010988:	1c59      	adds	r1, r3, #1
 801098a:	7011      	strb	r1, [r2, #0]
 801098c:	001a      	movs	r2, r3
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	189b      	adds	r3, r3, r2
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	2b13      	cmp	r3, #19
 8010996:	d901      	bls.n	801099c <ProcessMacCommands+0x7c>
 8010998:	f000 fd43 	bl	8011422 <ProcessMacCommands+0xb02>
 801099c:	009a      	lsls	r2, r3, #2
 801099e:	4bee      	ldr	r3, [pc, #952]	; (8010d58 <ProcessMacCommands+0x438>)
 80109a0:	18d3      	adds	r3, r2, r3
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80109a6:	2004      	movs	r0, #4
 80109a8:	f004 fc08 	bl	80151bc <LoRaMacConfirmQueueIsCmdActive>
 80109ac:	1e03      	subs	r3, r0, #0
 80109ae:	d101      	bne.n	80109b4 <ProcessMacCommands+0x94>
 80109b0:	f000 fd2c 	bl	801140c <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80109b4:	2104      	movs	r1, #4
 80109b6:	2000      	movs	r0, #0
 80109b8:	f004 fb64 	bl	8015084 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80109bc:	1cfb      	adds	r3, r7, #3
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	1cfa      	adds	r2, r7, #3
 80109c2:	1c59      	adds	r1, r3, #1
 80109c4:	7011      	strb	r1, [r2, #0]
 80109c6:	001a      	movs	r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	189b      	adds	r3, r3, r2
 80109cc:	7819      	ldrb	r1, [r3, #0]
 80109ce:	4ae3      	ldr	r2, [pc, #908]	; (8010d5c <ProcessMacCommands+0x43c>)
 80109d0:	238b      	movs	r3, #139	; 0x8b
 80109d2:	00db      	lsls	r3, r3, #3
 80109d4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80109d6:	1cfb      	adds	r3, r7, #3
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	1cfa      	adds	r2, r7, #3
 80109dc:	1c59      	adds	r1, r3, #1
 80109de:	7011      	strb	r1, [r2, #0]
 80109e0:	001a      	movs	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	189b      	adds	r3, r3, r2
 80109e6:	7819      	ldrb	r1, [r3, #0]
 80109e8:	4bdc      	ldr	r3, [pc, #880]	; (8010d5c <ProcessMacCommands+0x43c>)
 80109ea:	4add      	ldr	r2, [pc, #884]	; (8010d60 <ProcessMacCommands+0x440>)
 80109ec:	5499      	strb	r1, [r3, r2]
                }
                break;
 80109ee:	f000 fd0d 	bl	801140c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80109f2:	2657      	movs	r6, #87	; 0x57
 80109f4:	19bb      	adds	r3, r7, r6
 80109f6:	2200      	movs	r2, #0
 80109f8:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 80109fa:	2456      	movs	r4, #86	; 0x56
 80109fc:	193b      	adds	r3, r7, r4
 80109fe:	2200      	movs	r2, #0
 8010a00:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 8010a02:	2555      	movs	r5, #85	; 0x55
 8010a04:	197b      	adds	r3, r7, r5
 8010a06:	2200      	movs	r2, #0
 8010a08:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8010a0a:	2354      	movs	r3, #84	; 0x54
 8010a0c:	18fb      	adds	r3, r7, r3
 8010a0e:	2200      	movs	r2, #0
 8010a10:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 8010a12:	2187      	movs	r1, #135	; 0x87
 8010a14:	187b      	adds	r3, r7, r1
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	2201      	movs	r2, #1
 8010a1a:	4053      	eors	r3, r2
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d100      	bne.n	8010a24 <ProcessMacCommands+0x104>
 8010a22:	e09d      	b.n	8010b60 <ProcessMacCommands+0x240>
                {
                    adrBlockFound = true;
 8010a24:	187b      	adds	r3, r7, r1
 8010a26:	2201      	movs	r2, #1
 8010a28:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010a2a:	1cfb      	adds	r3, r7, #3
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	3b01      	subs	r3, #1
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	18d2      	adds	r2, r2, r3
 8010a34:	2158      	movs	r1, #88	; 0x58
 8010a36:	187b      	adds	r3, r7, r1
 8010a38:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010a3a:	1cba      	adds	r2, r7, #2
 8010a3c:	1cfb      	adds	r3, r7, #3
 8010a3e:	7812      	ldrb	r2, [r2, #0]
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	1ad3      	subs	r3, r2, r3
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	3301      	adds	r3, #1
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	000d      	movs	r5, r1
 8010a4c:	197b      	adds	r3, r7, r5
 8010a4e:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8010a50:	4bc2      	ldr	r3, [pc, #776]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010a52:	4ac4      	ldr	r2, [pc, #784]	; (8010d64 <ProcessMacCommands+0x444>)
 8010a54:	589b      	ldr	r3, [r3, r2]
 8010a56:	227e      	movs	r2, #126	; 0x7e
 8010a58:	5c9a      	ldrb	r2, [r3, r2]
 8010a5a:	197b      	adds	r3, r7, r5
 8010a5c:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010a5e:	4bbf      	ldr	r3, [pc, #764]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010a60:	4ac0      	ldr	r2, [pc, #768]	; (8010d64 <ProcessMacCommands+0x444>)
 8010a62:	589b      	ldr	r3, [r3, r2]
 8010a64:	22b8      	movs	r2, #184	; 0xb8
 8010a66:	5c9a      	ldrb	r2, [r3, r2]
 8010a68:	197b      	adds	r3, r7, r5
 8010a6a:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010a6c:	4bbb      	ldr	r3, [pc, #748]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010a6e:	4abd      	ldr	r2, [pc, #756]	; (8010d64 <ProcessMacCommands+0x444>)
 8010a70:	589b      	ldr	r3, [r3, r2]
 8010a72:	2285      	movs	r2, #133	; 0x85
 8010a74:	569a      	ldrsb	r2, [r3, r2]
 8010a76:	197b      	adds	r3, r7, r5
 8010a78:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010a7a:	4bb8      	ldr	r3, [pc, #736]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010a7c:	4ab9      	ldr	r2, [pc, #740]	; (8010d64 <ProcessMacCommands+0x444>)
 8010a7e:	589b      	ldr	r3, [r3, r2]
 8010a80:	2284      	movs	r2, #132	; 0x84
 8010a82:	569a      	ldrsb	r2, [r3, r2]
 8010a84:	197b      	adds	r3, r7, r5
 8010a86:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8010a88:	4bb4      	ldr	r3, [pc, #720]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010a8a:	4ab6      	ldr	r2, [pc, #728]	; (8010d64 <ProcessMacCommands+0x444>)
 8010a8c:	589b      	ldr	r3, [r3, r2]
 8010a8e:	22a4      	movs	r2, #164	; 0xa4
 8010a90:	5c9a      	ldrb	r2, [r3, r2]
 8010a92:	197b      	adds	r3, r7, r5
 8010a94:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8010a96:	4bb1      	ldr	r3, [pc, #708]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010a98:	4ab2      	ldr	r2, [pc, #712]	; (8010d64 <ProcessMacCommands+0x444>)
 8010a9a:	5899      	ldr	r1, [r3, r2]
 8010a9c:	197b      	adds	r3, r7, r5
 8010a9e:	22b0      	movs	r2, #176	; 0xb0
 8010aa0:	0052      	lsls	r2, r2, #1
 8010aa2:	588a      	ldr	r2, [r1, r2]
 8010aa4:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8010aa6:	4bad      	ldr	r3, [pc, #692]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010aa8:	4aae      	ldr	r2, [pc, #696]	; (8010d64 <ProcessMacCommands+0x444>)
 8010aaa:	589b      	ldr	r3, [r3, r2]
 8010aac:	7818      	ldrb	r0, [r3, #0]
 8010aae:	193c      	adds	r4, r7, r4
 8010ab0:	19ba      	adds	r2, r7, r6
 8010ab2:	1979      	adds	r1, r7, r5
 8010ab4:	2354      	movs	r3, #84	; 0x54
 8010ab6:	18fb      	adds	r3, r7, r3
 8010ab8:	9301      	str	r3, [sp, #4]
 8010aba:	2555      	movs	r5, #85	; 0x55
 8010abc:	197b      	adds	r3, r7, r5
 8010abe:	9300      	str	r3, [sp, #0]
 8010ac0:	0023      	movs	r3, r4
 8010ac2:	f006 f8a0 	bl	8016c06 <RegionLinkAdrReq>
 8010ac6:	0003      	movs	r3, r0
 8010ac8:	001a      	movs	r2, r3
 8010aca:	216b      	movs	r1, #107	; 0x6b
 8010acc:	187b      	adds	r3, r7, r1
 8010ace:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8010ad0:	187b      	adds	r3, r7, r1
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	001a      	movs	r2, r3
 8010ad6:	2307      	movs	r3, #7
 8010ad8:	4013      	ands	r3, r2
 8010ada:	2b07      	cmp	r3, #7
 8010adc:	d117      	bne.n	8010b0e <ProcessMacCommands+0x1ee>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8010ade:	4b9f      	ldr	r3, [pc, #636]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010ae0:	4aa0      	ldr	r2, [pc, #640]	; (8010d64 <ProcessMacCommands+0x444>)
 8010ae2:	589b      	ldr	r3, [r3, r2]
 8010ae4:	19ba      	adds	r2, r7, r6
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	5651      	ldrsb	r1, [r2, r1]
 8010aea:	2285      	movs	r2, #133	; 0x85
 8010aec:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8010aee:	4b9b      	ldr	r3, [pc, #620]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010af0:	4a9c      	ldr	r2, [pc, #624]	; (8010d64 <ProcessMacCommands+0x444>)
 8010af2:	589b      	ldr	r3, [r3, r2]
 8010af4:	2456      	movs	r4, #86	; 0x56
 8010af6:	193a      	adds	r2, r7, r4
 8010af8:	2100      	movs	r1, #0
 8010afa:	5651      	ldrsb	r1, [r2, r1]
 8010afc:	2284      	movs	r2, #132	; 0x84
 8010afe:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010b00:	4b96      	ldr	r3, [pc, #600]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010b02:	4a98      	ldr	r2, [pc, #608]	; (8010d64 <ProcessMacCommands+0x444>)
 8010b04:	589b      	ldr	r3, [r3, r2]
 8010b06:	197a      	adds	r2, r7, r5
 8010b08:	7811      	ldrb	r1, [r2, #0]
 8010b0a:	22a4      	movs	r2, #164	; 0xa4
 8010b0c:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010b0e:	2386      	movs	r3, #134	; 0x86
 8010b10:	18fb      	adds	r3, r7, r3
 8010b12:	2200      	movs	r2, #0
 8010b14:	701a      	strb	r2, [r3, #0]
 8010b16:	e00c      	b.n	8010b32 <ProcessMacCommands+0x212>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010b18:	236b      	movs	r3, #107	; 0x6b
 8010b1a:	18fb      	adds	r3, r7, r3
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	0019      	movs	r1, r3
 8010b20:	2003      	movs	r0, #3
 8010b22:	f003 ffb9 	bl	8014a98 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010b26:	2186      	movs	r1, #134	; 0x86
 8010b28:	187b      	adds	r3, r7, r1
 8010b2a:	781a      	ldrb	r2, [r3, #0]
 8010b2c:	187b      	adds	r3, r7, r1
 8010b2e:	3201      	adds	r2, #1
 8010b30:	701a      	strb	r2, [r3, #0]
 8010b32:	2454      	movs	r4, #84	; 0x54
 8010b34:	193b      	adds	r3, r7, r4
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	2105      	movs	r1, #5
 8010b3a:	0018      	movs	r0, r3
 8010b3c:	f7ef faec 	bl	8000118 <__udivsi3>
 8010b40:	0003      	movs	r3, r0
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	2286      	movs	r2, #134	; 0x86
 8010b46:	18ba      	adds	r2, r7, r2
 8010b48:	7812      	ldrb	r2, [r2, #0]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d3e4      	bcc.n	8010b18 <ProcessMacCommands+0x1f8>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8010b4e:	193b      	adds	r3, r7, r4
 8010b50:	781a      	ldrb	r2, [r3, #0]
 8010b52:	1cfb      	adds	r3, r7, #3
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	18d3      	adds	r3, r2, r3
 8010b58:	b2da      	uxtb	r2, r3
 8010b5a:	1cfb      	adds	r3, r7, #3
 8010b5c:	3a01      	subs	r2, #1
 8010b5e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8010b60:	46c0      	nop			; (mov r8, r8)
 8010b62:	f000 fc53 	bl	801140c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8010b66:	1cfb      	adds	r3, r7, #3
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	1cfa      	adds	r2, r7, #3
 8010b6c:	1c59      	adds	r1, r3, #1
 8010b6e:	7011      	strb	r1, [r2, #0]
 8010b70:	001a      	movs	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	189b      	adds	r3, r3, r2
 8010b76:	781a      	ldrb	r2, [r3, #0]
 8010b78:	4b78      	ldr	r3, [pc, #480]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010b7a:	497a      	ldr	r1, [pc, #488]	; (8010d64 <ProcessMacCommands+0x444>)
 8010b7c:	585b      	ldr	r3, [r3, r1]
 8010b7e:	210f      	movs	r1, #15
 8010b80:	400a      	ands	r2, r1
 8010b82:	b2d1      	uxtb	r1, r2
 8010b84:	22c8      	movs	r2, #200	; 0xc8
 8010b86:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8010b88:	4b74      	ldr	r3, [pc, #464]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010b8a:	4a76      	ldr	r2, [pc, #472]	; (8010d64 <ProcessMacCommands+0x444>)
 8010b8c:	589b      	ldr	r3, [r3, r2]
 8010b8e:	22c8      	movs	r2, #200	; 0xc8
 8010b90:	5c9b      	ldrb	r3, [r3, r2]
 8010b92:	001a      	movs	r2, r3
 8010b94:	2301      	movs	r3, #1
 8010b96:	4093      	lsls	r3, r2
 8010b98:	0019      	movs	r1, r3
 8010b9a:	4b70      	ldr	r3, [pc, #448]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010b9c:	4a71      	ldr	r2, [pc, #452]	; (8010d64 <ProcessMacCommands+0x444>)
 8010b9e:	589a      	ldr	r2, [r3, r2]
 8010ba0:	b289      	uxth	r1, r1
 8010ba2:	23a6      	movs	r3, #166	; 0xa6
 8010ba4:	005b      	lsls	r3, r3, #1
 8010ba6:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010ba8:	2368      	movs	r3, #104	; 0x68
 8010baa:	18fb      	adds	r3, r7, r3
 8010bac:	2200      	movs	r2, #0
 8010bae:	0019      	movs	r1, r3
 8010bb0:	2004      	movs	r0, #4
 8010bb2:	f003 ff71 	bl	8014a98 <LoRaMacCommandsAddCmd>
                break;
 8010bb6:	f000 fc29 	bl	801140c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010bba:	256b      	movs	r5, #107	; 0x6b
 8010bbc:	197b      	adds	r3, r7, r5
 8010bbe:	2207      	movs	r2, #7
 8010bc0:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010bc2:	1cfb      	adds	r3, r7, #3
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	18d3      	adds	r3, r2, r3
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	091b      	lsrs	r3, r3, #4
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	b25b      	sxtb	r3, r3
 8010bd2:	2207      	movs	r2, #7
 8010bd4:	4013      	ands	r3, r2
 8010bd6:	b25a      	sxtb	r2, r3
 8010bd8:	204c      	movs	r0, #76	; 0x4c
 8010bda:	183b      	adds	r3, r7, r0
 8010bdc:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010bde:	1cfb      	adds	r3, r7, #3
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	18d3      	adds	r3, r2, r3
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	b25b      	sxtb	r3, r3
 8010bea:	220f      	movs	r2, #15
 8010bec:	4013      	ands	r3, r2
 8010bee:	b25a      	sxtb	r2, r3
 8010bf0:	183b      	adds	r3, r7, r0
 8010bf2:	701a      	strb	r2, [r3, #0]
                macIndex++;
 8010bf4:	1cfb      	adds	r3, r7, #3
 8010bf6:	781a      	ldrb	r2, [r3, #0]
 8010bf8:	1cfb      	adds	r3, r7, #3
 8010bfa:	3201      	adds	r2, #1
 8010bfc:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010bfe:	1cfb      	adds	r3, r7, #3
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	1cfa      	adds	r2, r7, #3
 8010c04:	1c59      	adds	r1, r3, #1
 8010c06:	7011      	strb	r1, [r2, #0]
 8010c08:	001a      	movs	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	189b      	adds	r3, r3, r2
 8010c0e:	781b      	ldrb	r3, [r3, #0]
 8010c10:	001a      	movs	r2, r3
 8010c12:	183b      	adds	r3, r7, r0
 8010c14:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010c16:	1cfb      	adds	r3, r7, #3
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	1cfa      	adds	r2, r7, #3
 8010c1c:	1c59      	adds	r1, r3, #1
 8010c1e:	7011      	strb	r1, [r2, #0]
 8010c20:	001a      	movs	r2, r3
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	189b      	adds	r3, r3, r2
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	021a      	lsls	r2, r3, #8
 8010c2a:	183b      	adds	r3, r7, r0
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	431a      	orrs	r2, r3
 8010c30:	183b      	adds	r3, r7, r0
 8010c32:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010c34:	1cfb      	adds	r3, r7, #3
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	1cfa      	adds	r2, r7, #3
 8010c3a:	1c59      	adds	r1, r3, #1
 8010c3c:	7011      	strb	r1, [r2, #0]
 8010c3e:	001a      	movs	r2, r3
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	189b      	adds	r3, r3, r2
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	041a      	lsls	r2, r3, #16
 8010c48:	183b      	adds	r3, r7, r0
 8010c4a:	685b      	ldr	r3, [r3, #4]
 8010c4c:	431a      	orrs	r2, r3
 8010c4e:	0004      	movs	r4, r0
 8010c50:	193b      	adds	r3, r7, r4
 8010c52:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 8010c54:	193b      	adds	r3, r7, r4
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	2264      	movs	r2, #100	; 0x64
 8010c5a:	435a      	muls	r2, r3
 8010c5c:	193b      	adds	r3, r7, r4
 8010c5e:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8010c60:	4b3e      	ldr	r3, [pc, #248]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010c62:	4a40      	ldr	r2, [pc, #256]	; (8010d64 <ProcessMacCommands+0x444>)
 8010c64:	589b      	ldr	r3, [r3, r2]
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	193a      	adds	r2, r7, r4
 8010c6a:	0011      	movs	r1, r2
 8010c6c:	0018      	movs	r0, r3
 8010c6e:	f005 ffe8 	bl	8016c42 <RegionRxParamSetupReq>
 8010c72:	0003      	movs	r3, r0
 8010c74:	001a      	movs	r2, r3
 8010c76:	197b      	adds	r3, r7, r5
 8010c78:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 8010c7a:	197b      	adds	r3, r7, r5
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	001a      	movs	r2, r3
 8010c80:	2307      	movs	r3, #7
 8010c82:	4013      	ands	r3, r2
 8010c84:	2b07      	cmp	r3, #7
 8010c86:	d128      	bne.n	8010cda <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010c88:	193b      	adds	r3, r7, r4
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	5659      	ldrsb	r1, [r3, r1]
 8010c8e:	4b33      	ldr	r3, [pc, #204]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010c90:	4a34      	ldr	r2, [pc, #208]	; (8010d64 <ProcessMacCommands+0x444>)
 8010c92:	589b      	ldr	r3, [r3, r2]
 8010c94:	b2c9      	uxtb	r1, r1
 8010c96:	22ac      	movs	r2, #172	; 0xac
 8010c98:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010c9a:	193b      	adds	r3, r7, r4
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	5659      	ldrsb	r1, [r3, r1]
 8010ca0:	4b2e      	ldr	r3, [pc, #184]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010ca2:	4a30      	ldr	r2, [pc, #192]	; (8010d64 <ProcessMacCommands+0x444>)
 8010ca4:	589b      	ldr	r3, [r3, r2]
 8010ca6:	b2c9      	uxtb	r1, r1
 8010ca8:	22b4      	movs	r2, #180	; 0xb4
 8010caa:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010cac:	4b2b      	ldr	r3, [pc, #172]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010cae:	4a2d      	ldr	r2, [pc, #180]	; (8010d64 <ProcessMacCommands+0x444>)
 8010cb0:	589a      	ldr	r2, [r3, r2]
 8010cb2:	193b      	adds	r3, r7, r4
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	21a8      	movs	r1, #168	; 0xa8
 8010cb8:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010cba:	4b28      	ldr	r3, [pc, #160]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010cbc:	4a29      	ldr	r2, [pc, #164]	; (8010d64 <ProcessMacCommands+0x444>)
 8010cbe:	589a      	ldr	r2, [r3, r2]
 8010cc0:	193b      	adds	r3, r7, r4
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	21b0      	movs	r1, #176	; 0xb0
 8010cc6:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010cc8:	193b      	adds	r3, r7, r4
 8010cca:	2101      	movs	r1, #1
 8010ccc:	5659      	ldrsb	r1, [r3, r1]
 8010cce:	4b23      	ldr	r3, [pc, #140]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010cd0:	4a24      	ldr	r2, [pc, #144]	; (8010d64 <ProcessMacCommands+0x444>)
 8010cd2:	589b      	ldr	r3, [r3, r2]
 8010cd4:	b2c9      	uxtb	r1, r1
 8010cd6:	22a5      	movs	r2, #165	; 0xa5
 8010cd8:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 8010cda:	236b      	movs	r3, #107	; 0x6b
 8010cdc:	18fb      	adds	r3, r7, r3
 8010cde:	781a      	ldrb	r2, [r3, #0]
 8010ce0:	2168      	movs	r1, #104	; 0x68
 8010ce2:	187b      	adds	r3, r7, r1
 8010ce4:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010ce6:	187b      	adds	r3, r7, r1
 8010ce8:	2201      	movs	r2, #1
 8010cea:	0019      	movs	r1, r3
 8010cec:	2005      	movs	r0, #5
 8010cee:	f003 fed3 	bl	8014a98 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010cf2:	f7ff fe05 	bl	8010900 <SetMlmeScheduleUplinkIndication>
                break;
 8010cf6:	46c0      	nop			; (mov r8, r8)
 8010cf8:	e388      	b.n	801140c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010cfa:	2185      	movs	r1, #133	; 0x85
 8010cfc:	187b      	adds	r3, r7, r1
 8010cfe:	22ff      	movs	r2, #255	; 0xff
 8010d00:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010d02:	4a16      	ldr	r2, [pc, #88]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010d04:	23d2      	movs	r3, #210	; 0xd2
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	58d3      	ldr	r3, [r2, r3]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00f      	beq.n	8010d2e <ProcessMacCommands+0x40e>
 8010d0e:	4a13      	ldr	r2, [pc, #76]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010d10:	23d2      	movs	r3, #210	; 0xd2
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	58d3      	ldr	r3, [r2, r3]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d008      	beq.n	8010d2e <ProcessMacCommands+0x40e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010d1c:	4a0f      	ldr	r2, [pc, #60]	; (8010d5c <ProcessMacCommands+0x43c>)
 8010d1e:	23d2      	movs	r3, #210	; 0xd2
 8010d20:	009b      	lsls	r3, r3, #2
 8010d22:	58d3      	ldr	r3, [r2, r3]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	187c      	adds	r4, r7, r1
 8010d28:	4798      	blx	r3
 8010d2a:	0003      	movs	r3, r0
 8010d2c:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 8010d2e:	2168      	movs	r1, #104	; 0x68
 8010d30:	187b      	adds	r3, r7, r1
 8010d32:	2285      	movs	r2, #133	; 0x85
 8010d34:	18ba      	adds	r2, r7, r2
 8010d36:	7812      	ldrb	r2, [r2, #0]
 8010d38:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010d3a:	1c7b      	adds	r3, r7, #1
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	223f      	movs	r2, #63	; 0x3f
 8010d40:	4013      	ands	r3, r2
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	187b      	adds	r3, r7, r1
 8010d46:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010d48:	187b      	adds	r3, r7, r1
 8010d4a:	2202      	movs	r2, #2
 8010d4c:	0019      	movs	r1, r3
 8010d4e:	2006      	movs	r0, #6
 8010d50:	f003 fea2 	bl	8014a98 <LoRaMacCommandsAddCmd>
                break;
 8010d54:	e35a      	b.n	801140c <ProcessMacCommands+0xaec>
 8010d56:	46c0      	nop			; (mov r8, r8)
 8010d58:	0801ec18 	.word	0x0801ec18
 8010d5c:	20000548 	.word	0x20000548
 8010d60:	00000459 	.word	0x00000459
 8010d64:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010d68:	246b      	movs	r4, #107	; 0x6b
 8010d6a:	193b      	adds	r3, r7, r4
 8010d6c:	2203      	movs	r2, #3
 8010d6e:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 8010d70:	1cfb      	adds	r3, r7, #3
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	1cfa      	adds	r2, r7, #3
 8010d76:	1c59      	adds	r1, r3, #1
 8010d78:	7011      	strb	r1, [r2, #0]
 8010d7a:	001a      	movs	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	189b      	adds	r3, r3, r2
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	b25a      	sxtb	r2, r3
 8010d84:	2544      	movs	r5, #68	; 0x44
 8010d86:	197b      	adds	r3, r7, r5
 8010d88:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 8010d8a:	197b      	adds	r3, r7, r5
 8010d8c:	2038      	movs	r0, #56	; 0x38
 8010d8e:	183a      	adds	r2, r7, r0
 8010d90:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010d92:	1cfb      	adds	r3, r7, #3
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	1cfa      	adds	r2, r7, #3
 8010d98:	1c59      	adds	r1, r3, #1
 8010d9a:	7011      	strb	r1, [r2, #0]
 8010d9c:	001a      	movs	r2, r3
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	189b      	adds	r3, r3, r2
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	001a      	movs	r2, r3
 8010da6:	183b      	adds	r3, r7, r0
 8010da8:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010daa:	1cfb      	adds	r3, r7, #3
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	1cfa      	adds	r2, r7, #3
 8010db0:	1c59      	adds	r1, r3, #1
 8010db2:	7011      	strb	r1, [r2, #0]
 8010db4:	001a      	movs	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	189b      	adds	r3, r3, r2
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	021a      	lsls	r2, r3, #8
 8010dbe:	183b      	adds	r3, r7, r0
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	431a      	orrs	r2, r3
 8010dc4:	183b      	adds	r3, r7, r0
 8010dc6:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010dc8:	1cfb      	adds	r3, r7, #3
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	1cfa      	adds	r2, r7, #3
 8010dce:	1c59      	adds	r1, r3, #1
 8010dd0:	7011      	strb	r1, [r2, #0]
 8010dd2:	001a      	movs	r2, r3
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	189b      	adds	r3, r3, r2
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	041a      	lsls	r2, r3, #16
 8010ddc:	183b      	adds	r3, r7, r0
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	431a      	orrs	r2, r3
 8010de2:	183b      	adds	r3, r7, r0
 8010de4:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 8010de6:	183b      	adds	r3, r7, r0
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	2264      	movs	r2, #100	; 0x64
 8010dec:	435a      	muls	r2, r3
 8010dee:	183b      	adds	r3, r7, r0
 8010df0:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 8010df2:	183b      	adds	r3, r7, r0
 8010df4:	2200      	movs	r2, #0
 8010df6:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 8010df8:	1cfb      	adds	r3, r7, #3
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	1cfa      	adds	r2, r7, #3
 8010dfe:	1c59      	adds	r1, r3, #1
 8010e00:	7011      	strb	r1, [r2, #0]
 8010e02:	001a      	movs	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	189b      	adds	r3, r3, r2
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	b25a      	sxtb	r2, r3
 8010e0c:	183b      	adds	r3, r7, r0
 8010e0e:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8010e10:	4ba0      	ldr	r3, [pc, #640]	; (8011094 <ProcessMacCommands+0x774>)
 8010e12:	4aa1      	ldr	r2, [pc, #644]	; (8011098 <ProcessMacCommands+0x778>)
 8010e14:	589b      	ldr	r3, [r3, r2]
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	197a      	adds	r2, r7, r5
 8010e1a:	0011      	movs	r1, r2
 8010e1c:	0018      	movs	r0, r3
 8010e1e:	f005 ff26 	bl	8016c6e <RegionNewChannelReq>
 8010e22:	0003      	movs	r3, r0
 8010e24:	001a      	movs	r2, r3
 8010e26:	193b      	adds	r3, r7, r4
 8010e28:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 8010e2a:	193b      	adds	r3, r7, r4
 8010e2c:	781a      	ldrb	r2, [r3, #0]
 8010e2e:	2168      	movs	r1, #104	; 0x68
 8010e30:	187b      	adds	r3, r7, r1
 8010e32:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010e34:	187b      	adds	r3, r7, r1
 8010e36:	2201      	movs	r2, #1
 8010e38:	0019      	movs	r1, r3
 8010e3a:	2007      	movs	r0, #7
 8010e3c:	f003 fe2c 	bl	8014a98 <LoRaMacCommandsAddCmd>
                break;
 8010e40:	46c0      	nop			; (mov r8, r8)
 8010e42:	e2e3      	b.n	801140c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010e44:	1cfb      	adds	r3, r7, #3
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	1cfa      	adds	r2, r7, #3
 8010e4a:	1c59      	adds	r1, r3, #1
 8010e4c:	7011      	strb	r1, [r2, #0]
 8010e4e:	001a      	movs	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	189b      	adds	r3, r3, r2
 8010e54:	781a      	ldrb	r2, [r3, #0]
 8010e56:	2084      	movs	r0, #132	; 0x84
 8010e58:	183b      	adds	r3, r7, r0
 8010e5a:	210f      	movs	r1, #15
 8010e5c:	400a      	ands	r2, r1
 8010e5e:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 8010e60:	183b      	adds	r3, r7, r0
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d104      	bne.n	8010e72 <ProcessMacCommands+0x552>
                {
                    delay++;
 8010e68:	183b      	adds	r3, r7, r0
 8010e6a:	781a      	ldrb	r2, [r3, #0]
 8010e6c:	183b      	adds	r3, r7, r0
 8010e6e:	3201      	adds	r2, #1
 8010e70:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8010e72:	2384      	movs	r3, #132	; 0x84
 8010e74:	18fb      	adds	r3, r7, r3
 8010e76:	781a      	ldrb	r2, [r3, #0]
 8010e78:	0013      	movs	r3, r2
 8010e7a:	015b      	lsls	r3, r3, #5
 8010e7c:	1a9b      	subs	r3, r3, r2
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	189b      	adds	r3, r3, r2
 8010e82:	00db      	lsls	r3, r3, #3
 8010e84:	0019      	movs	r1, r3
 8010e86:	4b83      	ldr	r3, [pc, #524]	; (8011094 <ProcessMacCommands+0x774>)
 8010e88:	4a83      	ldr	r2, [pc, #524]	; (8011098 <ProcessMacCommands+0x778>)
 8010e8a:	589b      	ldr	r3, [r3, r2]
 8010e8c:	2294      	movs	r2, #148	; 0x94
 8010e8e:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8010e90:	4b80      	ldr	r3, [pc, #512]	; (8011094 <ProcessMacCommands+0x774>)
 8010e92:	4a81      	ldr	r2, [pc, #516]	; (8011098 <ProcessMacCommands+0x778>)
 8010e94:	589b      	ldr	r3, [r3, r2]
 8010e96:	2294      	movs	r2, #148	; 0x94
 8010e98:	589b      	ldr	r3, [r3, r2]
 8010e9a:	4a7e      	ldr	r2, [pc, #504]	; (8011094 <ProcessMacCommands+0x774>)
 8010e9c:	497e      	ldr	r1, [pc, #504]	; (8011098 <ProcessMacCommands+0x778>)
 8010e9e:	5852      	ldr	r2, [r2, r1]
 8010ea0:	21fa      	movs	r1, #250	; 0xfa
 8010ea2:	0089      	lsls	r1, r1, #2
 8010ea4:	468c      	mov	ip, r1
 8010ea6:	4463      	add	r3, ip
 8010ea8:	2198      	movs	r1, #152	; 0x98
 8010eaa:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010eac:	2368      	movs	r3, #104	; 0x68
 8010eae:	18fb      	adds	r3, r7, r3
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	0019      	movs	r1, r3
 8010eb4:	2008      	movs	r0, #8
 8010eb6:	f003 fdef 	bl	8014a98 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010eba:	f7ff fd21 	bl	8010900 <SetMlmeScheduleUplinkIndication>
                break;
 8010ebe:	e2a5      	b.n	801140c <ProcessMacCommands+0xaec>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010ec0:	1cfb      	adds	r3, r7, #3
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	1cfa      	adds	r2, r7, #3
 8010ec6:	1c59      	adds	r1, r3, #1
 8010ec8:	7011      	strb	r1, [r2, #0]
 8010eca:	001a      	movs	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	189a      	adds	r2, r3, r2
 8010ed0:	2076      	movs	r0, #118	; 0x76
 8010ed2:	183b      	adds	r3, r7, r0
 8010ed4:	7812      	ldrb	r2, [r2, #0]
 8010ed6:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 8010ed8:	2134      	movs	r1, #52	; 0x34
 8010eda:	187b      	adds	r3, r7, r1
 8010edc:	2200      	movs	r2, #0
 8010ede:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 8010ee0:	187b      	adds	r3, r7, r1
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010ee6:	183b      	adds	r3, r7, r0
 8010ee8:	781b      	ldrb	r3, [r3, #0]
 8010eea:	2220      	movs	r2, #32
 8010eec:	4013      	ands	r3, r2
 8010eee:	d002      	beq.n	8010ef6 <ProcessMacCommands+0x5d6>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010ef0:	187b      	adds	r3, r7, r1
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010ef6:	2376      	movs	r3, #118	; 0x76
 8010ef8:	18fb      	adds	r3, r7, r3
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	2210      	movs	r2, #16
 8010efe:	4013      	ands	r3, r2
 8010f00:	d003      	beq.n	8010f0a <ProcessMacCommands+0x5ea>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010f02:	2334      	movs	r3, #52	; 0x34
 8010f04:	18fb      	adds	r3, r7, r3
 8010f06:	2201      	movs	r2, #1
 8010f08:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8010f0a:	2376      	movs	r3, #118	; 0x76
 8010f0c:	18fb      	adds	r3, r7, r3
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	220f      	movs	r2, #15
 8010f12:	4013      	ands	r3, r2
 8010f14:	b2da      	uxtb	r2, r3
 8010f16:	2434      	movs	r4, #52	; 0x34
 8010f18:	193b      	adds	r3, r7, r4
 8010f1a:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8010f1c:	4b5d      	ldr	r3, [pc, #372]	; (8011094 <ProcessMacCommands+0x774>)
 8010f1e:	4a5e      	ldr	r2, [pc, #376]	; (8011098 <ProcessMacCommands+0x778>)
 8010f20:	589b      	ldr	r3, [r3, r2]
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	193a      	adds	r2, r7, r4
 8010f26:	0011      	movs	r1, r2
 8010f28:	0018      	movs	r0, r3
 8010f2a:	f005 feb6 	bl	8016c9a <RegionTxParamSetupReq>
 8010f2e:	0003      	movs	r3, r0
 8010f30:	3301      	adds	r3, #1
 8010f32:	d050      	beq.n	8010fd6 <ProcessMacCommands+0x6b6>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010f34:	4b57      	ldr	r3, [pc, #348]	; (8011094 <ProcessMacCommands+0x774>)
 8010f36:	4a58      	ldr	r2, [pc, #352]	; (8011098 <ProcessMacCommands+0x778>)
 8010f38:	589b      	ldr	r3, [r3, r2]
 8010f3a:	193a      	adds	r2, r7, r4
 8010f3c:	7811      	ldrb	r1, [r2, #0]
 8010f3e:	22b8      	movs	r2, #184	; 0xb8
 8010f40:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010f42:	4b54      	ldr	r3, [pc, #336]	; (8011094 <ProcessMacCommands+0x774>)
 8010f44:	4a54      	ldr	r2, [pc, #336]	; (8011098 <ProcessMacCommands+0x778>)
 8010f46:	589b      	ldr	r3, [r3, r2]
 8010f48:	193a      	adds	r2, r7, r4
 8010f4a:	7851      	ldrb	r1, [r2, #1]
 8010f4c:	22b9      	movs	r2, #185	; 0xb9
 8010f4e:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010f50:	193b      	adds	r3, r7, r4
 8010f52:	789b      	ldrb	r3, [r3, #2]
 8010f54:	001a      	movs	r2, r3
 8010f56:	4b51      	ldr	r3, [pc, #324]	; (801109c <ProcessMacCommands+0x77c>)
 8010f58:	5c9a      	ldrb	r2, [r3, r2]
 8010f5a:	4b4e      	ldr	r3, [pc, #312]	; (8011094 <ProcessMacCommands+0x774>)
 8010f5c:	494e      	ldr	r1, [pc, #312]	; (8011098 <ProcessMacCommands+0x778>)
 8010f5e:	585c      	ldr	r4, [r3, r1]
 8010f60:	0010      	movs	r0, r2
 8010f62:	f7f0 f84b 	bl	8000ffc <__aeabi_ui2f>
 8010f66:	1c03      	adds	r3, r0, #0
 8010f68:	22bc      	movs	r2, #188	; 0xbc
 8010f6a:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010f6c:	212c      	movs	r1, #44	; 0x2c
 8010f6e:	187b      	adds	r3, r7, r1
 8010f70:	2202      	movs	r2, #2
 8010f72:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010f74:	4b47      	ldr	r3, [pc, #284]	; (8011094 <ProcessMacCommands+0x774>)
 8010f76:	4a48      	ldr	r2, [pc, #288]	; (8011098 <ProcessMacCommands+0x778>)
 8010f78:	589b      	ldr	r3, [r3, r2]
 8010f7a:	22b8      	movs	r2, #184	; 0xb8
 8010f7c:	5c9a      	ldrb	r2, [r3, r2]
 8010f7e:	187b      	adds	r3, r7, r1
 8010f80:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010f82:	4b44      	ldr	r3, [pc, #272]	; (8011094 <ProcessMacCommands+0x774>)
 8010f84:	4a44      	ldr	r2, [pc, #272]	; (8011098 <ProcessMacCommands+0x778>)
 8010f86:	589b      	ldr	r3, [r3, r2]
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	187a      	adds	r2, r7, r1
 8010f8c:	0011      	movs	r1, r2
 8010f8e:	0018      	movs	r0, r3
 8010f90:	f005 fd31 	bl	80169f6 <RegionGetPhyParam>
 8010f94:	0003      	movs	r3, r0
 8010f96:	001a      	movs	r2, r3
 8010f98:	2128      	movs	r1, #40	; 0x28
 8010f9a:	187b      	adds	r3, r7, r1
 8010f9c:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010f9e:	187b      	adds	r3, r7, r1
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	b259      	sxtb	r1, r3
 8010fa4:	4b3b      	ldr	r3, [pc, #236]	; (8011094 <ProcessMacCommands+0x774>)
 8010fa6:	4a3c      	ldr	r2, [pc, #240]	; (8011098 <ProcessMacCommands+0x778>)
 8010fa8:	589b      	ldr	r3, [r3, r2]
 8010faa:	2285      	movs	r2, #133	; 0x85
 8010fac:	5698      	ldrsb	r0, [r3, r2]
 8010fae:	4b39      	ldr	r3, [pc, #228]	; (8011094 <ProcessMacCommands+0x774>)
 8010fb0:	4a39      	ldr	r2, [pc, #228]	; (8011098 <ProcessMacCommands+0x778>)
 8010fb2:	589b      	ldr	r3, [r3, r2]
 8010fb4:	1c04      	adds	r4, r0, #0
 8010fb6:	1c08      	adds	r0, r1, #0
 8010fb8:	b241      	sxtb	r1, r0
 8010fba:	b262      	sxtb	r2, r4
 8010fbc:	4291      	cmp	r1, r2
 8010fbe:	da00      	bge.n	8010fc2 <ProcessMacCommands+0x6a2>
 8010fc0:	1c20      	adds	r0, r4, #0
 8010fc2:	b241      	sxtb	r1, r0
 8010fc4:	2285      	movs	r2, #133	; 0x85
 8010fc6:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010fc8:	2368      	movs	r3, #104	; 0x68
 8010fca:	18fb      	adds	r3, r7, r3
 8010fcc:	2200      	movs	r2, #0
 8010fce:	0019      	movs	r1, r3
 8010fd0:	2009      	movs	r0, #9
 8010fd2:	f003 fd61 	bl	8014a98 <LoRaMacCommandsAddCmd>
                }
                break;
 8010fd6:	46c0      	nop			; (mov r8, r8)
 8010fd8:	e218      	b.n	801140c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010fda:	246b      	movs	r4, #107	; 0x6b
 8010fdc:	193b      	adds	r3, r7, r4
 8010fde:	2203      	movs	r2, #3
 8010fe0:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 8010fe2:	1cfb      	adds	r3, r7, #3
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	1cfa      	adds	r2, r7, #3
 8010fe8:	1c59      	adds	r1, r3, #1
 8010fea:	7011      	strb	r1, [r2, #0]
 8010fec:	001a      	movs	r2, r3
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	189b      	adds	r3, r3, r2
 8010ff2:	781a      	ldrb	r2, [r3, #0]
 8010ff4:	2020      	movs	r0, #32
 8010ff6:	183b      	adds	r3, r7, r0
 8010ff8:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010ffa:	1cfb      	adds	r3, r7, #3
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	1cfa      	adds	r2, r7, #3
 8011000:	1c59      	adds	r1, r3, #1
 8011002:	7011      	strb	r1, [r2, #0]
 8011004:	001a      	movs	r2, r3
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	189b      	adds	r3, r3, r2
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	001a      	movs	r2, r3
 801100e:	183b      	adds	r3, r7, r0
 8011010:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011012:	1cfb      	adds	r3, r7, #3
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	1cfa      	adds	r2, r7, #3
 8011018:	1c59      	adds	r1, r3, #1
 801101a:	7011      	strb	r1, [r2, #0]
 801101c:	001a      	movs	r2, r3
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	189b      	adds	r3, r3, r2
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	021a      	lsls	r2, r3, #8
 8011026:	183b      	adds	r3, r7, r0
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	431a      	orrs	r2, r3
 801102c:	183b      	adds	r3, r7, r0
 801102e:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011030:	1cfb      	adds	r3, r7, #3
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	1cfa      	adds	r2, r7, #3
 8011036:	1c59      	adds	r1, r3, #1
 8011038:	7011      	strb	r1, [r2, #0]
 801103a:	001a      	movs	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	189b      	adds	r3, r3, r2
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	041a      	lsls	r2, r3, #16
 8011044:	183b      	adds	r3, r7, r0
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	431a      	orrs	r2, r3
 801104a:	0001      	movs	r1, r0
 801104c:	187b      	adds	r3, r7, r1
 801104e:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 8011050:	187b      	adds	r3, r7, r1
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	2264      	movs	r2, #100	; 0x64
 8011056:	435a      	muls	r2, r3
 8011058:	187b      	adds	r3, r7, r1
 801105a:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 801105c:	4b0d      	ldr	r3, [pc, #52]	; (8011094 <ProcessMacCommands+0x774>)
 801105e:	4a0e      	ldr	r2, [pc, #56]	; (8011098 <ProcessMacCommands+0x778>)
 8011060:	589b      	ldr	r3, [r3, r2]
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	187a      	adds	r2, r7, r1
 8011066:	0011      	movs	r1, r2
 8011068:	0018      	movs	r0, r3
 801106a:	f005 fe2c 	bl	8016cc6 <RegionDlChannelReq>
 801106e:	0003      	movs	r3, r0
 8011070:	001a      	movs	r2, r3
 8011072:	193b      	adds	r3, r7, r4
 8011074:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8011076:	193b      	adds	r3, r7, r4
 8011078:	781a      	ldrb	r2, [r3, #0]
 801107a:	2168      	movs	r1, #104	; 0x68
 801107c:	187b      	adds	r3, r7, r1
 801107e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8011080:	187b      	adds	r3, r7, r1
 8011082:	2201      	movs	r2, #1
 8011084:	0019      	movs	r1, r3
 8011086:	200a      	movs	r0, #10
 8011088:	f003 fd06 	bl	8014a98 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 801108c:	f7ff fc38 	bl	8010900 <SetMlmeScheduleUplinkIndication>
                break;
 8011090:	46c0      	nop			; (mov r8, r8)
 8011092:	e1bb      	b.n	801140c <ProcessMacCommands+0xaec>
 8011094:	20000548 	.word	0x20000548
 8011098:	00000484 	.word	0x00000484
 801109c:	0801ec08 	.word	0x0801ec08
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80110a0:	200a      	movs	r0, #10
 80110a2:	f004 f88b 	bl	80151bc <LoRaMacConfirmQueueIsCmdActive>
 80110a6:	1e03      	subs	r3, r0, #0
 80110a8:	d100      	bne.n	80110ac <ProcessMacCommands+0x78c>
 80110aa:	e1af      	b.n	801140c <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80110ac:	210a      	movs	r1, #10
 80110ae:	2000      	movs	r0, #0
 80110b0:	f003 ffe8 	bl	8015084 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80110b4:	2418      	movs	r4, #24
 80110b6:	193b      	adds	r3, r7, r4
 80110b8:	0018      	movs	r0, r3
 80110ba:	2308      	movs	r3, #8
 80110bc:	001a      	movs	r2, r3
 80110be:	2100      	movs	r1, #0
 80110c0:	f00c fe6f 	bl	801dda2 <memset>
                    SysTime_t sysTime = { 0 };
 80110c4:	2510      	movs	r5, #16
 80110c6:	197b      	adds	r3, r7, r5
 80110c8:	0018      	movs	r0, r3
 80110ca:	2308      	movs	r3, #8
 80110cc:	001a      	movs	r2, r3
 80110ce:	2100      	movs	r1, #0
 80110d0:	f00c fe67 	bl	801dda2 <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 80110d4:	2608      	movs	r6, #8
 80110d6:	19bb      	adds	r3, r7, r6
 80110d8:	0018      	movs	r0, r3
 80110da:	2308      	movs	r3, #8
 80110dc:	001a      	movs	r2, r3
 80110de:	2100      	movs	r1, #0
 80110e0:	f00c fe5f 	bl	801dda2 <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80110e4:	1cfb      	adds	r3, r7, #3
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	1cfa      	adds	r2, r7, #3
 80110ea:	1c59      	adds	r1, r3, #1
 80110ec:	7011      	strb	r1, [r2, #0]
 80110ee:	001a      	movs	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	189b      	adds	r3, r3, r2
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	001a      	movs	r2, r3
 80110f8:	193b      	adds	r3, r7, r4
 80110fa:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80110fc:	1cfb      	adds	r3, r7, #3
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	1cfa      	adds	r2, r7, #3
 8011102:	1c59      	adds	r1, r3, #1
 8011104:	7011      	strb	r1, [r2, #0]
 8011106:	001a      	movs	r2, r3
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	189b      	adds	r3, r3, r2
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	021a      	lsls	r2, r3, #8
 8011110:	193b      	adds	r3, r7, r4
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	431a      	orrs	r2, r3
 8011116:	0020      	movs	r0, r4
 8011118:	193b      	adds	r3, r7, r4
 801111a:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801111c:	1cfb      	adds	r3, r7, #3
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	1cfa      	adds	r2, r7, #3
 8011122:	1c59      	adds	r1, r3, #1
 8011124:	7011      	strb	r1, [r2, #0]
 8011126:	001a      	movs	r2, r3
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	189b      	adds	r3, r3, r2
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	041a      	lsls	r2, r3, #16
 8011130:	183b      	adds	r3, r7, r0
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	431a      	orrs	r2, r3
 8011136:	183b      	adds	r3, r7, r0
 8011138:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 801113a:	1cfb      	adds	r3, r7, #3
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	1cfa      	adds	r2, r7, #3
 8011140:	1c59      	adds	r1, r3, #1
 8011142:	7011      	strb	r1, [r2, #0]
 8011144:	001a      	movs	r2, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	189b      	adds	r3, r3, r2
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	061a      	lsls	r2, r3, #24
 801114e:	183b      	adds	r3, r7, r0
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	431a      	orrs	r2, r3
 8011154:	183b      	adds	r3, r7, r0
 8011156:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8011158:	1cfb      	adds	r3, r7, #3
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	1cfa      	adds	r2, r7, #3
 801115e:	1c59      	adds	r1, r3, #1
 8011160:	7011      	strb	r1, [r2, #0]
 8011162:	001a      	movs	r2, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	189b      	adds	r3, r3, r2
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	b21a      	sxth	r2, r3
 801116c:	183b      	adds	r3, r7, r0
 801116e:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011170:	0001      	movs	r1, r0
 8011172:	183b      	adds	r3, r7, r0
 8011174:	2204      	movs	r2, #4
 8011176:	5e9b      	ldrsh	r3, [r3, r2]
 8011178:	001a      	movs	r2, r3
 801117a:	0013      	movs	r3, r2
 801117c:	015b      	lsls	r3, r3, #5
 801117e:	1a9b      	subs	r3, r3, r2
 8011180:	009b      	lsls	r3, r3, #2
 8011182:	189b      	adds	r3, r3, r2
 8011184:	00db      	lsls	r3, r3, #3
 8011186:	121b      	asrs	r3, r3, #8
 8011188:	b21a      	sxth	r2, r3
 801118a:	187b      	adds	r3, r7, r1
 801118c:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801118e:	197a      	adds	r2, r7, r5
 8011190:	187b      	adds	r3, r7, r1
 8011192:	0010      	movs	r0, r2
 8011194:	0019      	movs	r1, r3
 8011196:	2308      	movs	r3, #8
 8011198:	001a      	movs	r2, r3
 801119a:	f00c fdf9 	bl	801dd90 <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801119e:	197b      	adds	r3, r7, r5
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	4aa2      	ldr	r2, [pc, #648]	; (801142c <ProcessMacCommands+0xb0c>)
 80111a4:	189a      	adds	r2, r3, r2
 80111a6:	002c      	movs	r4, r5
 80111a8:	197b      	adds	r3, r7, r5
 80111aa:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80111ac:	19bb      	adds	r3, r7, r6
 80111ae:	0018      	movs	r0, r3
 80111b0:	f00b fb36 	bl	801c820 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80111b4:	236c      	movs	r3, #108	; 0x6c
 80111b6:	18fd      	adds	r5, r7, r3
 80111b8:	489d      	ldr	r0, [pc, #628]	; (8011430 <ProcessMacCommands+0xb10>)
 80111ba:	23ce      	movs	r3, #206	; 0xce
 80111bc:	0099      	lsls	r1, r3, #2
 80111be:	0026      	movs	r6, r4
 80111c0:	193a      	adds	r2, r7, r4
 80111c2:	2404      	movs	r4, #4
 80111c4:	1843      	adds	r3, r0, r1
 80111c6:	191c      	adds	r4, r3, r4
 80111c8:	466b      	mov	r3, sp
 80111ca:	6824      	ldr	r4, [r4, #0]
 80111cc:	601c      	str	r4, [r3, #0]
 80111ce:	5843      	ldr	r3, [r0, r1]
 80111d0:	6811      	ldr	r1, [r2, #0]
 80111d2:	6852      	ldr	r2, [r2, #4]
 80111d4:	0028      	movs	r0, r5
 80111d6:	f00b fa97 	bl	801c708 <SysTimeSub>
 80111da:	0035      	movs	r5, r6
 80111dc:	197c      	adds	r4, r7, r5
 80111de:	236c      	movs	r3, #108	; 0x6c
 80111e0:	18fb      	adds	r3, r7, r3
 80111e2:	2608      	movs	r6, #8
 80111e4:	19ba      	adds	r2, r7, r6
 80111e6:	4669      	mov	r1, sp
 80111e8:	6858      	ldr	r0, [r3, #4]
 80111ea:	6008      	str	r0, [r1, #0]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	6811      	ldr	r1, [r2, #0]
 80111f0:	6852      	ldr	r2, [r2, #4]
 80111f2:	0020      	movs	r0, r4
 80111f4:	f00b fa32 	bl	801c65c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80111f8:	197b      	adds	r3, r7, r5
 80111fa:	6818      	ldr	r0, [r3, #0]
 80111fc:	6859      	ldr	r1, [r3, #4]
 80111fe:	f00b fad7 	bl	801c7b0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011202:	f003 fac5 	bl	8014790 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011206:	4a8a      	ldr	r2, [pc, #552]	; (8011430 <ProcessMacCommands+0xb10>)
 8011208:	2387      	movs	r3, #135	; 0x87
 801120a:	00db      	lsls	r3, r3, #3
 801120c:	2101      	movs	r1, #1
 801120e:	54d1      	strb	r1, [r2, r3]
                }
                break;
 8011210:	e0fc      	b.n	801140c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011212:	200d      	movs	r0, #13
 8011214:	f003 ffd2 	bl	80151bc <LoRaMacConfirmQueueIsCmdActive>
 8011218:	1e03      	subs	r3, r0, #0
 801121a:	d100      	bne.n	801121e <ProcessMacCommands+0x8fe>
 801121c:	e0f6      	b.n	801140c <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801121e:	210d      	movs	r1, #13
 8011220:	2000      	movs	r0, #0
 8011222:	f003 ff2f 	bl	8015084 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011226:	4a82      	ldr	r2, [pc, #520]	; (8011430 <ProcessMacCommands+0xb10>)
 8011228:	2390      	movs	r3, #144	; 0x90
 801122a:	00db      	lsls	r3, r3, #3
 801122c:	5cd3      	ldrb	r3, [r2, r3]
 801122e:	2b04      	cmp	r3, #4
 8011230:	d100      	bne.n	8011234 <ProcessMacCommands+0x914>
 8011232:	e0eb      	b.n	801140c <ProcessMacCommands+0xaec>
 8011234:	4a7e      	ldr	r2, [pc, #504]	; (8011430 <ProcessMacCommands+0xb10>)
 8011236:	2390      	movs	r3, #144	; 0x90
 8011238:	00db      	lsls	r3, r3, #3
 801123a:	5cd3      	ldrb	r3, [r2, r3]
 801123c:	2b05      	cmp	r3, #5
 801123e:	d100      	bne.n	8011242 <ProcessMacCommands+0x922>
 8011240:	e0e4      	b.n	801140c <ProcessMacCommands+0xaec>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011242:	f003 fa86 	bl	8014752 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011246:	e0e1      	b.n	801140c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011248:	207c      	movs	r0, #124	; 0x7c
 801124a:	183b      	adds	r3, r7, r0
 801124c:	2203      	movs	r2, #3
 801124e:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 8011250:	2300      	movs	r3, #0
 8011252:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011254:	1cfb      	adds	r3, r7, #3
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	1cfa      	adds	r2, r7, #3
 801125a:	1c59      	adds	r1, r3, #1
 801125c:	7011      	strb	r1, [r2, #0]
 801125e:	001a      	movs	r2, r3
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	189b      	adds	r3, r3, r2
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011268:	1cfb      	adds	r3, r7, #3
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	1cfa      	adds	r2, r7, #3
 801126e:	1c59      	adds	r1, r3, #1
 8011270:	7011      	strb	r1, [r2, #0]
 8011272:	001a      	movs	r2, r3
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	189b      	adds	r3, r3, r2
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	021b      	lsls	r3, r3, #8
 801127c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801127e:	4313      	orrs	r3, r2
 8011280:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011282:	1cfb      	adds	r3, r7, #3
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	1cfa      	adds	r2, r7, #3
 8011288:	1c59      	adds	r1, r3, #1
 801128a:	7011      	strb	r1, [r2, #0]
 801128c:	001a      	movs	r2, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	189b      	adds	r3, r3, r2
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	041b      	lsls	r3, r3, #16
 8011296:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011298:	4313      	orrs	r3, r2
 801129a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 801129c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801129e:	2264      	movs	r2, #100	; 0x64
 80112a0:	4353      	muls	r3, r2
 80112a2:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80112a4:	1cfb      	adds	r3, r7, #3
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	1cfa      	adds	r2, r7, #3
 80112aa:	1c59      	adds	r1, r3, #1
 80112ac:	7011      	strb	r1, [r2, #0]
 80112ae:	001a      	movs	r2, r3
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	189b      	adds	r3, r3, r2
 80112b4:	781a      	ldrb	r2, [r3, #0]
 80112b6:	2677      	movs	r6, #119	; 0x77
 80112b8:	19bb      	adds	r3, r7, r6
 80112ba:	210f      	movs	r1, #15
 80112bc:	400a      	ands	r2, r1
 80112be:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80112c0:	0005      	movs	r5, r0
 80112c2:	183c      	adds	r4, r7, r0
 80112c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80112c6:	19bb      	adds	r3, r7, r6
 80112c8:	781b      	ldrb	r3, [r3, #0]
 80112ca:	0011      	movs	r1, r2
 80112cc:	0018      	movs	r0, r3
 80112ce:	f003 fa45 	bl	801475c <LoRaMacClassBPingSlotChannelReq>
 80112d2:	0003      	movs	r3, r0
 80112d4:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 80112d6:	2168      	movs	r1, #104	; 0x68
 80112d8:	187b      	adds	r3, r7, r1
 80112da:	197a      	adds	r2, r7, r5
 80112dc:	7812      	ldrb	r2, [r2, #0]
 80112de:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80112e0:	187b      	adds	r3, r7, r1
 80112e2:	2201      	movs	r2, #1
 80112e4:	0019      	movs	r1, r3
 80112e6:	2011      	movs	r0, #17
 80112e8:	f003 fbd6 	bl	8014a98 <LoRaMacCommandsAddCmd>
                break;
 80112ec:	e08e      	b.n	801140c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80112ee:	200e      	movs	r0, #14
 80112f0:	f003 ff64 	bl	80151bc <LoRaMacConfirmQueueIsCmdActive>
 80112f4:	1e03      	subs	r3, r0, #0
 80112f6:	d100      	bne.n	80112fa <ProcessMacCommands+0x9da>
 80112f8:	e088      	b.n	801140c <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80112fa:	210e      	movs	r1, #14
 80112fc:	2000      	movs	r0, #0
 80112fe:	f003 fec1 	bl	8015084 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011302:	207e      	movs	r0, #126	; 0x7e
 8011304:	183b      	adds	r3, r7, r0
 8011306:	2200      	movs	r2, #0
 8011308:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 801130a:	247d      	movs	r4, #125	; 0x7d
 801130c:	193b      	adds	r3, r7, r4
 801130e:	2200      	movs	r2, #0
 8011310:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011312:	1cfb      	adds	r3, r7, #3
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	1cfa      	adds	r2, r7, #3
 8011318:	1c59      	adds	r1, r3, #1
 801131a:	7011      	strb	r1, [r2, #0]
 801131c:	001a      	movs	r2, r3
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	189b      	adds	r3, r3, r2
 8011322:	781a      	ldrb	r2, [r3, #0]
 8011324:	183b      	adds	r3, r7, r0
 8011326:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011328:	1cfb      	adds	r3, r7, #3
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	1cfa      	adds	r2, r7, #3
 801132e:	1c59      	adds	r1, r3, #1
 8011330:	7011      	strb	r1, [r2, #0]
 8011332:	001a      	movs	r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	189b      	adds	r3, r3, r2
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	021b      	lsls	r3, r3, #8
 801133c:	b21a      	sxth	r2, r3
 801133e:	183b      	adds	r3, r7, r0
 8011340:	2100      	movs	r1, #0
 8011342:	5e5b      	ldrsh	r3, [r3, r1]
 8011344:	4313      	orrs	r3, r2
 8011346:	b21a      	sxth	r2, r3
 8011348:	183b      	adds	r3, r7, r0
 801134a:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 801134c:	1cfb      	adds	r3, r7, #3
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	1cfa      	adds	r2, r7, #3
 8011352:	1c59      	adds	r1, r3, #1
 8011354:	7011      	strb	r1, [r2, #0]
 8011356:	001a      	movs	r2, r3
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	189a      	adds	r2, r3, r2
 801135c:	193b      	adds	r3, r7, r4
 801135e:	7812      	ldrb	r2, [r2, #0]
 8011360:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011362:	4b34      	ldr	r3, [pc, #208]	; (8011434 <ProcessMacCommands+0xb14>)
 8011364:	681a      	ldr	r2, [r3, #0]
 8011366:	193b      	adds	r3, r7, r4
 8011368:	7819      	ldrb	r1, [r3, #0]
 801136a:	183b      	adds	r3, r7, r0
 801136c:	881b      	ldrh	r3, [r3, #0]
 801136e:	0018      	movs	r0, r3
 8011370:	f003 fa00 	bl	8014774 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011374:	e04a      	b.n	801140c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011376:	2300      	movs	r3, #0
 8011378:	2080      	movs	r0, #128	; 0x80
 801137a:	183a      	adds	r2, r7, r0
 801137c:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 801137e:	1cfb      	adds	r3, r7, #3
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	1cfa      	adds	r2, r7, #3
 8011384:	1c59      	adds	r1, r3, #1
 8011386:	7011      	strb	r1, [r2, #0]
 8011388:	001a      	movs	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	189b      	adds	r3, r3, r2
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	183a      	adds	r2, r7, r0
 8011392:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011394:	1cfb      	adds	r3, r7, #3
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	1cfa      	adds	r2, r7, #3
 801139a:	1c59      	adds	r1, r3, #1
 801139c:	7011      	strb	r1, [r2, #0]
 801139e:	001a      	movs	r2, r3
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	189b      	adds	r3, r3, r2
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	021b      	lsls	r3, r3, #8
 80113a8:	183a      	adds	r2, r7, r0
 80113aa:	6812      	ldr	r2, [r2, #0]
 80113ac:	4313      	orrs	r3, r2
 80113ae:	183a      	adds	r2, r7, r0
 80113b0:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80113b2:	1cfb      	adds	r3, r7, #3
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	1cfa      	adds	r2, r7, #3
 80113b8:	1c59      	adds	r1, r3, #1
 80113ba:	7011      	strb	r1, [r2, #0]
 80113bc:	001a      	movs	r2, r3
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	189b      	adds	r3, r3, r2
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	041b      	lsls	r3, r3, #16
 80113c6:	183a      	adds	r2, r7, r0
 80113c8:	6812      	ldr	r2, [r2, #0]
 80113ca:	4313      	orrs	r3, r2
 80113cc:	183a      	adds	r2, r7, r0
 80113ce:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 80113d0:	183b      	adds	r3, r7, r0
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	2264      	movs	r2, #100	; 0x64
 80113d6:	4353      	muls	r3, r2
 80113d8:	183a      	adds	r2, r7, r0
 80113da:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80113dc:	183b      	adds	r3, r7, r0
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	0018      	movs	r0, r3
 80113e2:	f003 f9da 	bl	801479a <LoRaMacClassBBeaconFreqReq>
 80113e6:	1e03      	subs	r3, r0, #0
 80113e8:	d004      	beq.n	80113f4 <ProcessMacCommands+0xad4>
                    {
                        macCmdPayload[0] = 1;
 80113ea:	2368      	movs	r3, #104	; 0x68
 80113ec:	18fb      	adds	r3, r7, r3
 80113ee:	2201      	movs	r2, #1
 80113f0:	701a      	strb	r2, [r3, #0]
 80113f2:	e003      	b.n	80113fc <ProcessMacCommands+0xadc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80113f4:	2368      	movs	r3, #104	; 0x68
 80113f6:	18fb      	adds	r3, r7, r3
 80113f8:	2200      	movs	r2, #0
 80113fa:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80113fc:	2368      	movs	r3, #104	; 0x68
 80113fe:	18fb      	adds	r3, r7, r3
 8011400:	2201      	movs	r2, #1
 8011402:	0019      	movs	r1, r3
 8011404:	2013      	movs	r0, #19
 8011406:	f003 fb47 	bl	8014a98 <LoRaMacCommandsAddCmd>
                }
                break;
 801140a:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 801140c:	1cfa      	adds	r2, r7, #3
 801140e:	1cbb      	adds	r3, r7, #2
 8011410:	7812      	ldrb	r2, [r2, #0]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	429a      	cmp	r2, r3
 8011416:	d201      	bcs.n	801141c <ProcessMacCommands+0xafc>
 8011418:	f7ff faa0 	bl	801095c <ProcessMacCommands+0x3c>
 801141c:	e002      	b.n	8011424 <ProcessMacCommands+0xb04>
            return;
 801141e:	46c0      	nop			; (mov r8, r8)
 8011420:	e000      	b.n	8011424 <ProcessMacCommands+0xb04>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011422:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8011424:	46bd      	mov	sp, r7
 8011426:	b023      	add	sp, #140	; 0x8c
 8011428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801142a:	46c0      	nop			; (mov r8, r8)
 801142c:	12d53d80 	.word	0x12d53d80
 8011430:	20000548 	.word	0x20000548
 8011434:	20001670 	.word	0x20001670

08011438 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801143a:	b08f      	sub	sp, #60	; 0x3c
 801143c:	af02      	add	r7, sp, #8
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	0008      	movs	r0, r1
 8011442:	607a      	str	r2, [r7, #4]
 8011444:	0019      	movs	r1, r3
 8011446:	230b      	movs	r3, #11
 8011448:	18fb      	adds	r3, r7, r3
 801144a:	1c02      	adds	r2, r0, #0
 801144c:	701a      	strb	r2, [r3, #0]
 801144e:	2308      	movs	r3, #8
 8011450:	18fb      	adds	r3, r7, r3
 8011452:	1c0a      	adds	r2, r1, #0
 8011454:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011456:	232f      	movs	r3, #47	; 0x2f
 8011458:	18fb      	adds	r3, r7, r3
 801145a:	2203      	movs	r2, #3
 801145c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801145e:	4b90      	ldr	r3, [pc, #576]	; (80116a0 <Send+0x268>)
 8011460:	4a90      	ldr	r2, [pc, #576]	; (80116a4 <Send+0x26c>)
 8011462:	589a      	ldr	r2, [r3, r2]
 8011464:	232e      	movs	r3, #46	; 0x2e
 8011466:	18fb      	adds	r3, r7, r3
 8011468:	2185      	movs	r1, #133	; 0x85
 801146a:	5c52      	ldrb	r2, [r2, r1]
 801146c:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801146e:	4b8c      	ldr	r3, [pc, #560]	; (80116a0 <Send+0x268>)
 8011470:	4a8c      	ldr	r2, [pc, #560]	; (80116a4 <Send+0x26c>)
 8011472:	589a      	ldr	r2, [r3, r2]
 8011474:	232d      	movs	r3, #45	; 0x2d
 8011476:	18fb      	adds	r3, r7, r3
 8011478:	2184      	movs	r1, #132	; 0x84
 801147a:	5c52      	ldrb	r2, [r2, r1]
 801147c:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801147e:	4b88      	ldr	r3, [pc, #544]	; (80116a0 <Send+0x268>)
 8011480:	4a88      	ldr	r2, [pc, #544]	; (80116a4 <Send+0x26c>)
 8011482:	589b      	ldr	r3, [r3, r2]
 8011484:	2280      	movs	r2, #128	; 0x80
 8011486:	589b      	ldr	r3, [r3, r2]
 8011488:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 801148a:	4b85      	ldr	r3, [pc, #532]	; (80116a0 <Send+0x268>)
 801148c:	4a85      	ldr	r2, [pc, #532]	; (80116a4 <Send+0x26c>)
 801148e:	589a      	ldr	r2, [r3, r2]
 8011490:	23b2      	movs	r3, #178	; 0xb2
 8011492:	005b      	lsls	r3, r3, #1
 8011494:	5cd3      	ldrb	r3, [r2, r3]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d101      	bne.n	801149e <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801149a:	2307      	movs	r3, #7
 801149c:	e0fb      	b.n	8011696 <Send+0x25e>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 801149e:	4b80      	ldr	r3, [pc, #512]	; (80116a0 <Send+0x268>)
 80114a0:	4a80      	ldr	r2, [pc, #512]	; (80116a4 <Send+0x26c>)
 80114a2:	589b      	ldr	r3, [r3, r2]
 80114a4:	22c8      	movs	r2, #200	; 0xc8
 80114a6:	5c9b      	ldrb	r3, [r3, r2]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d106      	bne.n	80114ba <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 80114ac:	4b7c      	ldr	r3, [pc, #496]	; (80116a0 <Send+0x268>)
 80114ae:	4a7d      	ldr	r2, [pc, #500]	; (80116a4 <Send+0x26c>)
 80114b0:	589a      	ldr	r2, [r3, r2]
 80114b2:	23aa      	movs	r3, #170	; 0xaa
 80114b4:	005b      	lsls	r3, r3, #1
 80114b6:	2100      	movs	r1, #0
 80114b8:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 80114ba:	242c      	movs	r4, #44	; 0x2c
 80114bc:	193b      	adds	r3, r7, r4
 80114be:	2200      	movs	r2, #0
 80114c0:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 80114c2:	193b      	adds	r3, r7, r4
 80114c4:	781a      	ldrb	r2, [r3, #0]
 80114c6:	210f      	movs	r1, #15
 80114c8:	438a      	bics	r2, r1
 80114ca:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 80114cc:	4b74      	ldr	r3, [pc, #464]	; (80116a0 <Send+0x268>)
 80114ce:	4a75      	ldr	r2, [pc, #468]	; (80116a4 <Send+0x26c>)
 80114d0:	589b      	ldr	r3, [r3, r2]
 80114d2:	227e      	movs	r2, #126	; 0x7e
 80114d4:	5c9a      	ldrb	r2, [r3, r2]
 80114d6:	193b      	adds	r3, r7, r4
 80114d8:	01d0      	lsls	r0, r2, #7
 80114da:	781a      	ldrb	r2, [r3, #0]
 80114dc:	217f      	movs	r1, #127	; 0x7f
 80114de:	400a      	ands	r2, r1
 80114e0:	1c11      	adds	r1, r2, #0
 80114e2:	1c02      	adds	r2, r0, #0
 80114e4:	430a      	orrs	r2, r1
 80114e6:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80114e8:	4b6d      	ldr	r3, [pc, #436]	; (80116a0 <Send+0x268>)
 80114ea:	4a6e      	ldr	r2, [pc, #440]	; (80116a4 <Send+0x26c>)
 80114ec:	589b      	ldr	r3, [r3, r2]
 80114ee:	227c      	movs	r2, #124	; 0x7c
 80114f0:	5c9b      	ldrb	r3, [r3, r2]
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	d105      	bne.n	8011502 <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 80114f6:	193b      	adds	r3, r7, r4
 80114f8:	781a      	ldrb	r2, [r3, #0]
 80114fa:	2110      	movs	r1, #16
 80114fc:	430a      	orrs	r2, r1
 80114fe:	701a      	strb	r2, [r3, #0]
 8011500:	e005      	b.n	801150e <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011502:	232c      	movs	r3, #44	; 0x2c
 8011504:	18fb      	adds	r3, r7, r3
 8011506:	781a      	ldrb	r2, [r3, #0]
 8011508:	2110      	movs	r1, #16
 801150a:	438a      	bics	r2, r1
 801150c:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 801150e:	4b64      	ldr	r3, [pc, #400]	; (80116a0 <Send+0x268>)
 8011510:	4a64      	ldr	r2, [pc, #400]	; (80116a4 <Send+0x26c>)
 8011512:	589a      	ldr	r2, [r3, r2]
 8011514:	234c      	movs	r3, #76	; 0x4c
 8011516:	33ff      	adds	r3, #255	; 0xff
 8011518:	5cd3      	ldrb	r3, [r2, r3]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d005      	beq.n	801152a <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 801151e:	232c      	movs	r3, #44	; 0x2c
 8011520:	18fb      	adds	r3, r7, r3
 8011522:	781a      	ldrb	r2, [r3, #0]
 8011524:	2120      	movs	r1, #32
 8011526:	430a      	orrs	r2, r1
 8011528:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 801152a:	4b5d      	ldr	r3, [pc, #372]	; (80116a0 <Send+0x268>)
 801152c:	4a5d      	ldr	r2, [pc, #372]	; (80116a4 <Send+0x26c>)
 801152e:	5899      	ldr	r1, [r3, r2]
 8011530:	2014      	movs	r0, #20
 8011532:	183b      	adds	r3, r7, r0
 8011534:	22b0      	movs	r2, #176	; 0xb0
 8011536:	0052      	lsls	r2, r2, #1
 8011538:	588a      	ldr	r2, [r1, r2]
 801153a:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 801153c:	0001      	movs	r1, r0
 801153e:	187b      	adds	r3, r7, r1
 8011540:	2201      	movs	r2, #1
 8011542:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011544:	242c      	movs	r4, #44	; 0x2c
 8011546:	193b      	adds	r3, r7, r4
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	061b      	lsls	r3, r3, #24
 801154c:	0fdb      	lsrs	r3, r3, #31
 801154e:	b2db      	uxtb	r3, r3
 8011550:	1e5a      	subs	r2, r3, #1
 8011552:	4193      	sbcs	r3, r2
 8011554:	b2da      	uxtb	r2, r3
 8011556:	187b      	adds	r3, r7, r1
 8011558:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801155a:	4b51      	ldr	r3, [pc, #324]	; (80116a0 <Send+0x268>)
 801155c:	4a51      	ldr	r2, [pc, #324]	; (80116a4 <Send+0x26c>)
 801155e:	589b      	ldr	r3, [r3, r2]
 8011560:	2280      	movs	r2, #128	; 0x80
 8011562:	589a      	ldr	r2, [r3, r2]
 8011564:	0008      	movs	r0, r1
 8011566:	183b      	adds	r3, r7, r0
 8011568:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801156a:	4a4d      	ldr	r2, [pc, #308]	; (80116a0 <Send+0x268>)
 801156c:	23fd      	movs	r3, #253	; 0xfd
 801156e:	009b      	lsls	r3, r3, #2
 8011570:	5ad2      	ldrh	r2, [r2, r3]
 8011572:	183b      	adds	r3, r7, r0
 8011574:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011576:	4b4a      	ldr	r3, [pc, #296]	; (80116a0 <Send+0x268>)
 8011578:	4a4b      	ldr	r2, [pc, #300]	; (80116a8 <Send+0x270>)
 801157a:	5a9a      	ldrh	r2, [r3, r2]
 801157c:	183b      	adds	r3, r7, r0
 801157e:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011580:	4b47      	ldr	r3, [pc, #284]	; (80116a0 <Send+0x268>)
 8011582:	4a48      	ldr	r2, [pc, #288]	; (80116a4 <Send+0x26c>)
 8011584:	589b      	ldr	r3, [r3, r2]
 8011586:	2285      	movs	r2, #133	; 0x85
 8011588:	569a      	ldrsb	r2, [r3, r2]
 801158a:	183b      	adds	r3, r7, r0
 801158c:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801158e:	4b44      	ldr	r3, [pc, #272]	; (80116a0 <Send+0x268>)
 8011590:	4a44      	ldr	r2, [pc, #272]	; (80116a4 <Send+0x26c>)
 8011592:	589b      	ldr	r3, [r3, r2]
 8011594:	2284      	movs	r2, #132	; 0x84
 8011596:	569a      	ldrsb	r2, [r3, r2]
 8011598:	183b      	adds	r3, r7, r0
 801159a:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801159c:	4b40      	ldr	r3, [pc, #256]	; (80116a0 <Send+0x268>)
 801159e:	4a41      	ldr	r2, [pc, #260]	; (80116a4 <Send+0x26c>)
 80115a0:	589b      	ldr	r3, [r3, r2]
 80115a2:	22b8      	movs	r2, #184	; 0xb8
 80115a4:	5c9a      	ldrb	r2, [r3, r2]
 80115a6:	183b      	adds	r3, r7, r0
 80115a8:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 80115aa:	4b3d      	ldr	r3, [pc, #244]	; (80116a0 <Send+0x268>)
 80115ac:	4a3d      	ldr	r2, [pc, #244]	; (80116a4 <Send+0x26c>)
 80115ae:	589b      	ldr	r3, [r3, r2]
 80115b0:	781a      	ldrb	r2, [r3, #0]
 80115b2:	183b      	adds	r3, r7, r0
 80115b4:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80115b6:	4b3a      	ldr	r3, [pc, #232]	; (80116a0 <Send+0x268>)
 80115b8:	4a3a      	ldr	r2, [pc, #232]	; (80116a4 <Send+0x26c>)
 80115ba:	589b      	ldr	r3, [r3, r2]
 80115bc:	3385      	adds	r3, #133	; 0x85
 80115be:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 80115c0:	4b37      	ldr	r3, [pc, #220]	; (80116a0 <Send+0x268>)
 80115c2:	4a38      	ldr	r2, [pc, #224]	; (80116a4 <Send+0x26c>)
 80115c4:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80115c6:	3384      	adds	r3, #132	; 0x84
 80115c8:	001a      	movs	r2, r3
 80115ca:	2328      	movs	r3, #40	; 0x28
 80115cc:	18fb      	adds	r3, r7, r3
 80115ce:	1838      	adds	r0, r7, r0
 80115d0:	f002 fff7 	bl	80145c2 <LoRaMacAdrCalcNext>
 80115d4:	0003      	movs	r3, r0
 80115d6:	0019      	movs	r1, r3
 80115d8:	0026      	movs	r6, r4
 80115da:	193b      	adds	r3, r7, r4
 80115dc:	2201      	movs	r2, #1
 80115de:	400a      	ands	r2, r1
 80115e0:	0190      	lsls	r0, r2, #6
 80115e2:	781a      	ldrb	r2, [r3, #0]
 80115e4:	2140      	movs	r1, #64	; 0x40
 80115e6:	438a      	bics	r2, r1
 80115e8:	1c11      	adds	r1, r2, #0
 80115ea:	1c02      	adds	r2, r0, #0
 80115ec:	430a      	orrs	r2, r1
 80115ee:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80115f0:	222f      	movs	r2, #47	; 0x2f
 80115f2:	18bc      	adds	r4, r7, r2
 80115f4:	687d      	ldr	r5, [r7, #4]
 80115f6:	230b      	movs	r3, #11
 80115f8:	18fb      	adds	r3, r7, r3
 80115fa:	781a      	ldrb	r2, [r3, #0]
 80115fc:	19b9      	adds	r1, r7, r6
 80115fe:	68f8      	ldr	r0, [r7, #12]
 8011600:	2308      	movs	r3, #8
 8011602:	18fb      	adds	r3, r7, r3
 8011604:	881b      	ldrh	r3, [r3, #0]
 8011606:	9300      	str	r3, [sp, #0]
 8011608:	002b      	movs	r3, r5
 801160a:	f000 fd07 	bl	801201c <PrepareFrame>
 801160e:	0003      	movs	r3, r0
 8011610:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011612:	222f      	movs	r2, #47	; 0x2f
 8011614:	18bb      	adds	r3, r7, r2
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d003      	beq.n	8011624 <Send+0x1ec>
 801161c:	18bb      	adds	r3, r7, r2
 801161e:	781b      	ldrb	r3, [r3, #0]
 8011620:	2b0a      	cmp	r3, #10
 8011622:	d10c      	bne.n	801163e <Send+0x206>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011624:	232f      	movs	r3, #47	; 0x2f
 8011626:	18fc      	adds	r4, r7, r3
 8011628:	2340      	movs	r3, #64	; 0x40
 801162a:	2208      	movs	r2, #8
 801162c:	4694      	mov	ip, r2
 801162e:	44bc      	add	ip, r7
 8011630:	4463      	add	r3, ip
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	0018      	movs	r0, r3
 8011636:	f000 f9cd 	bl	80119d4 <ScheduleTx>
 801163a:	0003      	movs	r3, r0
 801163c:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801163e:	232f      	movs	r3, #47	; 0x2f
 8011640:	18fb      	adds	r3, r7, r3
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d010      	beq.n	801166a <Send+0x232>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8011648:	4b15      	ldr	r3, [pc, #84]	; (80116a0 <Send+0x268>)
 801164a:	4a16      	ldr	r2, [pc, #88]	; (80116a4 <Send+0x26c>)
 801164c:	589b      	ldr	r3, [r3, r2]
 801164e:	222e      	movs	r2, #46	; 0x2e
 8011650:	18ba      	adds	r2, r7, r2
 8011652:	2185      	movs	r1, #133	; 0x85
 8011654:	7812      	ldrb	r2, [r2, #0]
 8011656:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8011658:	4b11      	ldr	r3, [pc, #68]	; (80116a0 <Send+0x268>)
 801165a:	4a12      	ldr	r2, [pc, #72]	; (80116a4 <Send+0x26c>)
 801165c:	589b      	ldr	r3, [r3, r2]
 801165e:	222d      	movs	r2, #45	; 0x2d
 8011660:	18ba      	adds	r2, r7, r2
 8011662:	2184      	movs	r1, #132	; 0x84
 8011664:	7812      	ldrb	r2, [r2, #0]
 8011666:	545a      	strb	r2, [r3, r1]
 8011668:	e012      	b.n	8011690 <Send+0x258>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 801166a:	4b0d      	ldr	r3, [pc, #52]	; (80116a0 <Send+0x268>)
 801166c:	4a0d      	ldr	r2, [pc, #52]	; (80116a4 <Send+0x26c>)
 801166e:	589a      	ldr	r2, [r3, r2]
 8011670:	234c      	movs	r3, #76	; 0x4c
 8011672:	33ff      	adds	r3, #255	; 0xff
 8011674:	2100      	movs	r1, #0
 8011676:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8011678:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <Send+0x268>)
 801167a:	4a0a      	ldr	r2, [pc, #40]	; (80116a4 <Send+0x26c>)
 801167c:	589b      	ldr	r3, [r3, r2]
 801167e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011680:	2180      	movs	r1, #128	; 0x80
 8011682:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011684:	f003 fa92 	bl	8014bac <LoRaMacCommandsRemoveNoneStickyCmds>
 8011688:	1e03      	subs	r3, r0, #0
 801168a:	d001      	beq.n	8011690 <Send+0x258>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801168c:	2313      	movs	r3, #19
 801168e:	e002      	b.n	8011696 <Send+0x25e>
        }
    }
    return status;
 8011690:	232f      	movs	r3, #47	; 0x2f
 8011692:	18fb      	adds	r3, r7, r3
 8011694:	781b      	ldrb	r3, [r3, #0]
}
 8011696:	0018      	movs	r0, r3
 8011698:	46bd      	mov	sp, r7
 801169a:	b00d      	add	sp, #52	; 0x34
 801169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801169e:	46c0      	nop			; (mov r8, r8)
 80116a0:	20000548 	.word	0x20000548
 80116a4:	00000484 	.word	0x00000484
 80116a8:	000003f6 	.word	0x000003f6

080116ac <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 80116ac:	b5b0      	push	{r4, r5, r7, lr}
 80116ae:	b084      	sub	sp, #16
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	0002      	movs	r2, r0
 80116b4:	1dfb      	adds	r3, r7, #7
 80116b6:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80116b8:	230e      	movs	r3, #14
 80116ba:	18fb      	adds	r3, r7, r3
 80116bc:	2200      	movs	r2, #0
 80116be:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 80116c0:	240c      	movs	r4, #12
 80116c2:	193b      	adds	r3, r7, r4
 80116c4:	2200      	movs	r2, #0
 80116c6:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 80116c8:	250f      	movs	r5, #15
 80116ca:	197b      	adds	r3, r7, r5
 80116cc:	2201      	movs	r2, #1
 80116ce:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 80116d0:	1dfb      	adds	r3, r7, #7
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	2bff      	cmp	r3, #255	; 0xff
 80116d6:	d130      	bne.n	801173a <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80116d8:	2000      	movs	r0, #0
 80116da:	f7fe ff7b 	bl	80105d4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80116de:	4a21      	ldr	r2, [pc, #132]	; (8011764 <SendReJoinReq+0xb8>)
 80116e0:	2382      	movs	r3, #130	; 0x82
 80116e2:	005b      	lsls	r3, r3, #1
 80116e4:	2100      	movs	r1, #0
 80116e6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80116e8:	4a1e      	ldr	r2, [pc, #120]	; (8011764 <SendReJoinReq+0xb8>)
 80116ea:	2384      	movs	r3, #132	; 0x84
 80116ec:	005b      	lsls	r3, r3, #1
 80116ee:	491e      	ldr	r1, [pc, #120]	; (8011768 <SendReJoinReq+0xbc>)
 80116f0:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80116f2:	4a1c      	ldr	r2, [pc, #112]	; (8011764 <SendReJoinReq+0xb8>)
 80116f4:	2386      	movs	r3, #134	; 0x86
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	21ff      	movs	r1, #255	; 0xff
 80116fa:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80116fc:	193b      	adds	r3, r7, r4
 80116fe:	781a      	ldrb	r2, [r3, #0]
 8011700:	211f      	movs	r1, #31
 8011702:	400a      	ands	r2, r1
 8011704:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011706:	193b      	adds	r3, r7, r4
 8011708:	7819      	ldrb	r1, [r3, #0]
 801170a:	4a16      	ldr	r2, [pc, #88]	; (8011764 <SendReJoinReq+0xb8>)
 801170c:	230e      	movs	r3, #14
 801170e:	33ff      	adds	r3, #255	; 0xff
 8011710:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011712:	f7fc fa7b 	bl	800dc0c <SecureElementGetJoinEui>
 8011716:	0001      	movs	r1, r0
 8011718:	4b14      	ldr	r3, [pc, #80]	; (801176c <SendReJoinReq+0xc0>)
 801171a:	2208      	movs	r2, #8
 801171c:	0018      	movs	r0, r3
 801171e:	f007 fde9 	bl	80192f4 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8011722:	f7fc fa4f 	bl	800dbc4 <SecureElementGetDevEui>
 8011726:	0001      	movs	r1, r0
 8011728:	4b11      	ldr	r3, [pc, #68]	; (8011770 <SendReJoinReq+0xc4>)
 801172a:	2208      	movs	r2, #8
 801172c:	0018      	movs	r0, r3
 801172e:	f007 fde1 	bl	80192f4 <memcpy1>

            allowDelayedTx = false;
 8011732:	197b      	adds	r3, r7, r5
 8011734:	2200      	movs	r2, #0
 8011736:	701a      	strb	r2, [r3, #0]

            break;
 8011738:	e004      	b.n	8011744 <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801173a:	230e      	movs	r3, #14
 801173c:	18fb      	adds	r3, r7, r3
 801173e:	2202      	movs	r2, #2
 8011740:	701a      	strb	r2, [r3, #0]
            break;
 8011742:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011744:	250e      	movs	r5, #14
 8011746:	197c      	adds	r4, r7, r5
 8011748:	230f      	movs	r3, #15
 801174a:	18fb      	adds	r3, r7, r3
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	0018      	movs	r0, r3
 8011750:	f000 f940 	bl	80119d4 <ScheduleTx>
 8011754:	0003      	movs	r3, r0
 8011756:	7023      	strb	r3, [r4, #0]
    return status;
 8011758:	197b      	adds	r3, r7, r5
 801175a:	781b      	ldrb	r3, [r3, #0]
}
 801175c:	0018      	movs	r0, r3
 801175e:	46bd      	mov	sp, r7
 8011760:	b004      	add	sp, #16
 8011762:	bdb0      	pop	{r4, r5, r7, pc}
 8011764:	20000548 	.word	0x20000548
 8011768:	2000054a 	.word	0x2000054a
 801176c:	20000656 	.word	0x20000656
 8011770:	2000065e 	.word	0x2000065e

08011774 <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011774:	b580      	push	{r7, lr}
 8011776:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011778:	f002 ffa2 	bl	80146c0 <LoRaMacClassBIsBeaconExpected>
 801177c:	1e03      	subs	r3, r0, #0
 801177e:	d001      	beq.n	8011784 <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011780:	230e      	movs	r3, #14
 8011782:	e013      	b.n	80117ac <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011784:	4b0b      	ldr	r3, [pc, #44]	; (80117b4 <CheckForClassBCollision+0x40>)
 8011786:	4a0c      	ldr	r2, [pc, #48]	; (80117b8 <CheckForClassBCollision+0x44>)
 8011788:	589b      	ldr	r3, [r3, r2]
 801178a:	227c      	movs	r2, #124	; 0x7c
 801178c:	5c9b      	ldrb	r3, [r3, r2]
 801178e:	2b01      	cmp	r3, #1
 8011790:	d10b      	bne.n	80117aa <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011792:	f002 ff9b 	bl	80146cc <LoRaMacClassBIsPingExpected>
 8011796:	1e03      	subs	r3, r0, #0
 8011798:	d001      	beq.n	801179e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801179a:	230f      	movs	r3, #15
 801179c:	e006      	b.n	80117ac <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801179e:	f002 ff9b 	bl	80146d8 <LoRaMacClassBIsMulticastExpected>
 80117a2:	1e03      	subs	r3, r0, #0
 80117a4:	d001      	beq.n	80117aa <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80117a6:	230f      	movs	r3, #15
 80117a8:	e000      	b.n	80117ac <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 80117aa:	2300      	movs	r3, #0
}
 80117ac:	0018      	movs	r0, r3
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	46c0      	nop			; (mov r8, r8)
 80117b4:	20000548 	.word	0x20000548
 80117b8:	00000484 	.word	0x00000484

080117bc <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80117bc:	b5b0      	push	{r4, r5, r7, lr}
 80117be:	b082      	sub	sp, #8
 80117c0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80117c2:	4b44      	ldr	r3, [pc, #272]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80117c4:	4a44      	ldr	r2, [pc, #272]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 80117c6:	589b      	ldr	r3, [r3, r2]
 80117c8:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80117ca:	4b42      	ldr	r3, [pc, #264]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80117cc:	4a42      	ldr	r2, [pc, #264]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 80117ce:	589b      	ldr	r3, [r3, r2]
 80117d0:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 80117d2:	4b40      	ldr	r3, [pc, #256]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80117d4:	4a40      	ldr	r2, [pc, #256]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 80117d6:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80117d8:	22b9      	movs	r2, #185	; 0xb9
 80117da:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80117dc:	4b3d      	ldr	r3, [pc, #244]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80117de:	4a3e      	ldr	r2, [pc, #248]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 80117e0:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80117e2:	2285      	movs	r2, #133	; 0x85
 80117e4:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 80117e6:	4b3b      	ldr	r3, [pc, #236]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80117e8:	4d3b      	ldr	r5, [pc, #236]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 80117ea:	595b      	ldr	r3, [r3, r5]
 80117ec:	25a5      	movs	r5, #165	; 0xa5
 80117ee:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80117f0:	b25b      	sxtb	r3, r3
 80117f2:	f005 fad1 	bl	8016d98 <RegionApplyDrOffset>
 80117f6:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80117f8:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80117fa:	4b36      	ldr	r3, [pc, #216]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80117fc:	4a36      	ldr	r2, [pc, #216]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 80117fe:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011800:	228c      	movs	r2, #140	; 0x8c
 8011802:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011804:	4b33      	ldr	r3, [pc, #204]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 8011806:	4834      	ldr	r0, [pc, #208]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 8011808:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801180a:	2088      	movs	r0, #136	; 0x88
 801180c:	5818      	ldr	r0, [r3, r0]
 801180e:	4b33      	ldr	r3, [pc, #204]	; (80118dc <ComputeRxWindowParameters+0x120>)
 8011810:	9300      	str	r3, [sp, #0]
 8011812:	0003      	movs	r3, r0
 8011814:	0020      	movs	r0, r4
 8011816:	f005 f99d 	bl	8016b54 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801181a:	4b2e      	ldr	r3, [pc, #184]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 801181c:	4a2e      	ldr	r2, [pc, #184]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 801181e:	589b      	ldr	r3, [r3, r2]
 8011820:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8011822:	4b2c      	ldr	r3, [pc, #176]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 8011824:	4a2c      	ldr	r2, [pc, #176]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 8011826:	589b      	ldr	r3, [r3, r2]
 8011828:	22ac      	movs	r2, #172	; 0xac
 801182a:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801182c:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 801182e:	4b29      	ldr	r3, [pc, #164]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 8011830:	4a29      	ldr	r2, [pc, #164]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 8011832:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011834:	228c      	movs	r2, #140	; 0x8c
 8011836:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011838:	4b26      	ldr	r3, [pc, #152]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 801183a:	4c27      	ldr	r4, [pc, #156]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 801183c:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801183e:	2488      	movs	r4, #136	; 0x88
 8011840:	591c      	ldr	r4, [r3, r4]
 8011842:	4b27      	ldr	r3, [pc, #156]	; (80118e0 <ComputeRxWindowParameters+0x124>)
 8011844:	9300      	str	r3, [sp, #0]
 8011846:	0023      	movs	r3, r4
 8011848:	f005 f984 	bl	8016b54 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801184c:	4b21      	ldr	r3, [pc, #132]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 801184e:	4a22      	ldr	r2, [pc, #136]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 8011850:	589b      	ldr	r3, [r3, r2]
 8011852:	2294      	movs	r2, #148	; 0x94
 8011854:	589b      	ldr	r3, [r3, r2]
 8011856:	491f      	ldr	r1, [pc, #124]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 8011858:	22f1      	movs	r2, #241	; 0xf1
 801185a:	0092      	lsls	r2, r2, #2
 801185c:	588a      	ldr	r2, [r1, r2]
 801185e:	1899      	adds	r1, r3, r2
 8011860:	4a1c      	ldr	r2, [pc, #112]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 8011862:	23ec      	movs	r3, #236	; 0xec
 8011864:	009b      	lsls	r3, r3, #2
 8011866:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011868:	4b1a      	ldr	r3, [pc, #104]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 801186a:	4a1b      	ldr	r2, [pc, #108]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 801186c:	589b      	ldr	r3, [r3, r2]
 801186e:	2298      	movs	r2, #152	; 0x98
 8011870:	589b      	ldr	r3, [r3, r2]
 8011872:	4918      	ldr	r1, [pc, #96]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 8011874:	22f6      	movs	r2, #246	; 0xf6
 8011876:	0092      	lsls	r2, r2, #2
 8011878:	588a      	ldr	r2, [r1, r2]
 801187a:	1899      	adds	r1, r3, r2
 801187c:	4a15      	ldr	r2, [pc, #84]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 801187e:	23ed      	movs	r3, #237	; 0xed
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011884:	4b13      	ldr	r3, [pc, #76]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 8011886:	4a14      	ldr	r2, [pc, #80]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 8011888:	589a      	ldr	r2, [r3, r2]
 801188a:	23b2      	movs	r3, #178	; 0xb2
 801188c:	005b      	lsls	r3, r3, #1
 801188e:	5cd3      	ldrb	r3, [r2, r3]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d11b      	bne.n	80118cc <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011894:	4b0f      	ldr	r3, [pc, #60]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 8011896:	4a10      	ldr	r2, [pc, #64]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 8011898:	589b      	ldr	r3, [r3, r2]
 801189a:	229c      	movs	r2, #156	; 0x9c
 801189c:	589b      	ldr	r3, [r3, r2]
 801189e:	490d      	ldr	r1, [pc, #52]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80118a0:	22f1      	movs	r2, #241	; 0xf1
 80118a2:	0092      	lsls	r2, r2, #2
 80118a4:	588a      	ldr	r2, [r1, r2]
 80118a6:	1899      	adds	r1, r3, r2
 80118a8:	4a0a      	ldr	r2, [pc, #40]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80118aa:	23ec      	movs	r3, #236	; 0xec
 80118ac:	009b      	lsls	r3, r3, #2
 80118ae:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80118b0:	4b08      	ldr	r3, [pc, #32]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80118b2:	4a09      	ldr	r2, [pc, #36]	; (80118d8 <ComputeRxWindowParameters+0x11c>)
 80118b4:	589b      	ldr	r3, [r3, r2]
 80118b6:	22a0      	movs	r2, #160	; 0xa0
 80118b8:	589b      	ldr	r3, [r3, r2]
 80118ba:	4906      	ldr	r1, [pc, #24]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80118bc:	22f6      	movs	r2, #246	; 0xf6
 80118be:	0092      	lsls	r2, r2, #2
 80118c0:	588a      	ldr	r2, [r1, r2]
 80118c2:	1899      	adds	r1, r3, r2
 80118c4:	4a03      	ldr	r2, [pc, #12]	; (80118d4 <ComputeRxWindowParameters+0x118>)
 80118c6:	23ed      	movs	r3, #237	; 0xed
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	50d1      	str	r1, [r2, r3]
    }
}
 80118cc:	46c0      	nop			; (mov r8, r8)
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bdb0      	pop	{r4, r5, r7, pc}
 80118d2:	46c0      	nop			; (mov r8, r8)
 80118d4:	20000548 	.word	0x20000548
 80118d8:	00000484 	.word	0x00000484
 80118dc:	20000900 	.word	0x20000900
 80118e0:	20000914 	.word	0x20000914

080118e4 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80118ea:	2300      	movs	r3, #0
 80118ec:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 80118ee:	4b15      	ldr	r3, [pc, #84]	; (8011944 <VerifyTxFrame+0x60>)
 80118f0:	4a15      	ldr	r2, [pc, #84]	; (8011948 <VerifyTxFrame+0x64>)
 80118f2:	589a      	ldr	r2, [r3, r2]
 80118f4:	23b2      	movs	r3, #178	; 0xb2
 80118f6:	005b      	lsls	r3, r3, #1
 80118f8:	5cd3      	ldrb	r3, [r2, r3]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d01d      	beq.n	801193a <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80118fe:	1d3b      	adds	r3, r7, #4
 8011900:	0018      	movs	r0, r3
 8011902:	f003 f99f 	bl	8014c44 <LoRaMacCommandsGetSizeSerializedCmds>
 8011906:	1e03      	subs	r3, r0, #0
 8011908:	d001      	beq.n	801190e <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801190a:	2313      	movs	r3, #19
 801190c:	e016      	b.n	801193c <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 801190e:	4b0d      	ldr	r3, [pc, #52]	; (8011944 <VerifyTxFrame+0x60>)
 8011910:	4a0e      	ldr	r2, [pc, #56]	; (801194c <VerifyTxFrame+0x68>)
 8011912:	5c98      	ldrb	r0, [r3, r2]
 8011914:	4b0b      	ldr	r3, [pc, #44]	; (8011944 <VerifyTxFrame+0x60>)
 8011916:	4a0c      	ldr	r2, [pc, #48]	; (8011948 <VerifyTxFrame+0x64>)
 8011918:	589b      	ldr	r3, [r3, r2]
 801191a:	2285      	movs	r2, #133	; 0x85
 801191c:	569b      	ldrsb	r3, [r3, r2]
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	b2d2      	uxtb	r2, r2
 8011922:	0019      	movs	r1, r3
 8011924:	f7fe ffb0 	bl	8010888 <ValidatePayloadLength>
 8011928:	0003      	movs	r3, r0
 801192a:	001a      	movs	r2, r3
 801192c:	2301      	movs	r3, #1
 801192e:	4053      	eors	r3, r2
 8011930:	b2db      	uxtb	r3, r3
 8011932:	2b00      	cmp	r3, #0
 8011934:	d001      	beq.n	801193a <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011936:	2308      	movs	r3, #8
 8011938:	e000      	b.n	801193c <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 801193a:	2300      	movs	r3, #0
}
 801193c:	0018      	movs	r0, r3
 801193e:	46bd      	mov	sp, r7
 8011940:	b002      	add	sp, #8
 8011942:	bd80      	pop	{r7, pc}
 8011944:	20000548 	.word	0x20000548
 8011948:	00000484 	.word	0x00000484
 801194c:	00000237 	.word	0x00000237

08011950 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011950:	b590      	push	{r4, r7, lr}
 8011952:	b083      	sub	sp, #12
 8011954:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011956:	4a1d      	ldr	r2, [pc, #116]	; (80119cc <SerializeTxFrame+0x7c>)
 8011958:	2382      	movs	r3, #130	; 0x82
 801195a:	005b      	lsls	r3, r3, #1
 801195c:	5cd3      	ldrb	r3, [r2, r3]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d002      	beq.n	8011968 <SerializeTxFrame+0x18>
 8011962:	2b04      	cmp	r3, #4
 8011964:	d015      	beq.n	8011992 <SerializeTxFrame+0x42>
 8011966:	e029      	b.n	80119bc <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011968:	1dfc      	adds	r4, r7, #7
 801196a:	4b19      	ldr	r3, [pc, #100]	; (80119d0 <SerializeTxFrame+0x80>)
 801196c:	0018      	movs	r0, r3
 801196e:	f004 fe6b 	bl	8016648 <LoRaMacSerializerJoinRequest>
 8011972:	0003      	movs	r3, r0
 8011974:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011976:	1dfb      	adds	r3, r7, #7
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d001      	beq.n	8011982 <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801197e:	2311      	movs	r3, #17
 8011980:	e01f      	b.n	80119c2 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011982:	4a12      	ldr	r2, [pc, #72]	; (80119cc <SerializeTxFrame+0x7c>)
 8011984:	2386      	movs	r3, #134	; 0x86
 8011986:	005b      	lsls	r3, r3, #1
 8011988:	5cd3      	ldrb	r3, [r2, r3]
 801198a:	b29a      	uxth	r2, r3
 801198c:	4b0f      	ldr	r3, [pc, #60]	; (80119cc <SerializeTxFrame+0x7c>)
 801198e:	801a      	strh	r2, [r3, #0]
            break;
 8011990:	e016      	b.n	80119c0 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011992:	1dfc      	adds	r4, r7, #7
 8011994:	4b0e      	ldr	r3, [pc, #56]	; (80119d0 <SerializeTxFrame+0x80>)
 8011996:	0018      	movs	r0, r3
 8011998:	f004 fef1 	bl	801677e <LoRaMacSerializerData>
 801199c:	0003      	movs	r3, r0
 801199e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80119a0:	1dfb      	adds	r3, r7, #7
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d001      	beq.n	80119ac <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80119a8:	2311      	movs	r3, #17
 80119aa:	e00a      	b.n	80119c2 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80119ac:	4a07      	ldr	r2, [pc, #28]	; (80119cc <SerializeTxFrame+0x7c>)
 80119ae:	2386      	movs	r3, #134	; 0x86
 80119b0:	005b      	lsls	r3, r3, #1
 80119b2:	5cd3      	ldrb	r3, [r2, r3]
 80119b4:	b29a      	uxth	r2, r3
 80119b6:	4b05      	ldr	r3, [pc, #20]	; (80119cc <SerializeTxFrame+0x7c>)
 80119b8:	801a      	strh	r2, [r3, #0]
            break;
 80119ba:	e001      	b.n	80119c0 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80119bc:	2303      	movs	r3, #3
 80119be:	e000      	b.n	80119c2 <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 80119c0:	2300      	movs	r3, #0
}
 80119c2:	0018      	movs	r0, r3
 80119c4:	46bd      	mov	sp, r7
 80119c6:	b003      	add	sp, #12
 80119c8:	bd90      	pop	{r4, r7, pc}
 80119ca:	46c0      	nop			; (mov r8, r8)
 80119cc:	20000548 	.word	0x20000548
 80119d0:	20000650 	.word	0x20000650

080119d4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80119d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119d6:	b091      	sub	sp, #68	; 0x44
 80119d8:	af02      	add	r7, sp, #8
 80119da:	0002      	movs	r2, r0
 80119dc:	230f      	movs	r3, #15
 80119de:	18fb      	adds	r3, r7, r3
 80119e0:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119e2:	2537      	movs	r5, #55	; 0x37
 80119e4:	197b      	adds	r3, r7, r5
 80119e6:	2203      	movs	r2, #3
 80119e8:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80119ea:	197c      	adds	r4, r7, r5
 80119ec:	f7ff fec2 	bl	8011774 <CheckForClassBCollision>
 80119f0:	0003      	movs	r3, r0
 80119f2:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80119f4:	002a      	movs	r2, r5
 80119f6:	18bb      	adds	r3, r7, r2
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d002      	beq.n	8011a04 <ScheduleTx+0x30>
    {
        return status;
 80119fe:	18bb      	adds	r3, r7, r2
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	e0c3      	b.n	8011b8c <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 8011a04:	f000 f940 	bl	8011c88 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011a08:	2537      	movs	r5, #55	; 0x37
 8011a0a:	197c      	adds	r4, r7, r5
 8011a0c:	f7ff ffa0 	bl	8011950 <SerializeTxFrame>
 8011a10:	0003      	movs	r3, r0
 8011a12:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011a14:	002a      	movs	r2, r5
 8011a16:	18bb      	adds	r3, r7, r2
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d002      	beq.n	8011a24 <ScheduleTx+0x50>
    {
        return status;
 8011a1e:	18bb      	adds	r3, r7, r2
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	e0b3      	b.n	8011b8c <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8011a24:	4b5b      	ldr	r3, [pc, #364]	; (8011b94 <ScheduleTx+0x1c0>)
 8011a26:	4a5c      	ldr	r2, [pc, #368]	; (8011b98 <ScheduleTx+0x1c4>)
 8011a28:	589a      	ldr	r2, [r3, r2]
 8011a2a:	23aa      	movs	r3, #170	; 0xaa
 8011a2c:	005b      	lsls	r3, r3, #1
 8011a2e:	58d2      	ldr	r2, [r2, r3]
 8011a30:	2414      	movs	r4, #20
 8011a32:	193b      	adds	r3, r7, r4
 8011a34:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011a36:	4b57      	ldr	r3, [pc, #348]	; (8011b94 <ScheduleTx+0x1c0>)
 8011a38:	4a57      	ldr	r2, [pc, #348]	; (8011b98 <ScheduleTx+0x1c4>)
 8011a3a:	589b      	ldr	r3, [r3, r2]
 8011a3c:	2285      	movs	r2, #133	; 0x85
 8011a3e:	569a      	ldrsb	r2, [r3, r2]
 8011a40:	193b      	adds	r3, r7, r4
 8011a42:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8011a44:	4b53      	ldr	r3, [pc, #332]	; (8011b94 <ScheduleTx+0x1c0>)
 8011a46:	4a54      	ldr	r2, [pc, #336]	; (8011b98 <ScheduleTx+0x1c4>)
 8011a48:	589b      	ldr	r3, [r3, r2]
 8011a4a:	22c9      	movs	r2, #201	; 0xc9
 8011a4c:	5c9a      	ldrb	r2, [r3, r2]
 8011a4e:	193b      	adds	r3, r7, r4
 8011a50:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8011a52:	232c      	movs	r3, #44	; 0x2c
 8011a54:	18fb      	adds	r3, r7, r3
 8011a56:	0018      	movs	r0, r3
 8011a58:	f00a ff24 	bl	801c8a4 <SysTimeGetMcuTime>
 8011a5c:	4b4d      	ldr	r3, [pc, #308]	; (8011b94 <ScheduleTx+0x1c0>)
 8011a5e:	4a4e      	ldr	r2, [pc, #312]	; (8011b98 <ScheduleTx+0x1c4>)
 8011a60:	5898      	ldr	r0, [r3, r2]
 8011a62:	193d      	adds	r5, r7, r4
 8011a64:	003e      	movs	r6, r7
 8011a66:	23ac      	movs	r3, #172	; 0xac
 8011a68:	0059      	lsls	r1, r3, #1
 8011a6a:	232c      	movs	r3, #44	; 0x2c
 8011a6c:	18fa      	adds	r2, r7, r3
 8011a6e:	2404      	movs	r4, #4
 8011a70:	1843      	adds	r3, r0, r1
 8011a72:	191c      	adds	r4, r3, r4
 8011a74:	466b      	mov	r3, sp
 8011a76:	6824      	ldr	r4, [r4, #0]
 8011a78:	601c      	str	r4, [r3, #0]
 8011a7a:	5843      	ldr	r3, [r0, r1]
 8011a7c:	6811      	ldr	r1, [r2, #0]
 8011a7e:	6852      	ldr	r2, [r2, #4]
 8011a80:	0030      	movs	r0, r6
 8011a82:	f00a fe41 	bl	801c708 <SysTimeSub>
 8011a86:	003a      	movs	r2, r7
 8011a88:	002b      	movs	r3, r5
 8011a8a:	330c      	adds	r3, #12
 8011a8c:	ca21      	ldmia	r2!, {r0, r5}
 8011a8e:	c321      	stmia	r3!, {r0, r5}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8011a90:	4b40      	ldr	r3, [pc, #256]	; (8011b94 <ScheduleTx+0x1c0>)
 8011a92:	4a41      	ldr	r2, [pc, #260]	; (8011b98 <ScheduleTx+0x1c4>)
 8011a94:	589a      	ldr	r2, [r3, r2]
 8011a96:	23a8      	movs	r3, #168	; 0xa8
 8011a98:	005b      	lsls	r3, r3, #1
 8011a9a:	58d2      	ldr	r2, [r2, r3]
 8011a9c:	2114      	movs	r1, #20
 8011a9e:	187b      	adds	r3, r7, r1
 8011aa0:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 8011aa2:	187b      	adds	r3, r7, r1
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8011aa8:	187b      	adds	r3, r7, r1
 8011aaa:	2201      	movs	r2, #1
 8011aac:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011aae:	4b39      	ldr	r3, [pc, #228]	; (8011b94 <ScheduleTx+0x1c0>)
 8011ab0:	881a      	ldrh	r2, [r3, #0]
 8011ab2:	187b      	adds	r3, r7, r1
 8011ab4:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011ab6:	4b37      	ldr	r3, [pc, #220]	; (8011b94 <ScheduleTx+0x1c0>)
 8011ab8:	4a37      	ldr	r2, [pc, #220]	; (8011b98 <ScheduleTx+0x1c4>)
 8011aba:	589a      	ldr	r2, [r3, r2]
 8011abc:	23b2      	movs	r3, #178	; 0xb2
 8011abe:	005b      	lsls	r3, r3, #1
 8011ac0:	5cd3      	ldrb	r3, [r2, r3]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d105      	bne.n	8011ad2 <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011ac6:	187b      	adds	r3, r7, r1
 8011ac8:	2201      	movs	r2, #1
 8011aca:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 8011acc:	187b      	adds	r3, r7, r1
 8011ace:	2200      	movs	r2, #0
 8011ad0:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8011ad2:	4b30      	ldr	r3, [pc, #192]	; (8011b94 <ScheduleTx+0x1c0>)
 8011ad4:	4a30      	ldr	r2, [pc, #192]	; (8011b98 <ScheduleTx+0x1c4>)
 8011ad6:	589b      	ldr	r3, [r3, r2]
 8011ad8:	7818      	ldrb	r0, [r3, #0]
 8011ada:	4b2e      	ldr	r3, [pc, #184]	; (8011b94 <ScheduleTx+0x1c0>)
 8011adc:	4a2e      	ldr	r2, [pc, #184]	; (8011b98 <ScheduleTx+0x1c4>)
 8011ade:	589b      	ldr	r3, [r3, r2]
 8011ae0:	3355      	adds	r3, #85	; 0x55
 8011ae2:	33ff      	adds	r3, #255	; 0xff
 8011ae4:	2637      	movs	r6, #55	; 0x37
 8011ae6:	19bc      	adds	r4, r7, r6
 8011ae8:	4d2c      	ldr	r5, [pc, #176]	; (8011b9c <ScheduleTx+0x1c8>)
 8011aea:	4a2d      	ldr	r2, [pc, #180]	; (8011ba0 <ScheduleTx+0x1cc>)
 8011aec:	2114      	movs	r1, #20
 8011aee:	1879      	adds	r1, r7, r1
 8011af0:	9300      	str	r3, [sp, #0]
 8011af2:	002b      	movs	r3, r5
 8011af4:	f005 f920 	bl	8016d38 <RegionNextChannel>
 8011af8:	0003      	movs	r3, r0
 8011afa:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 8011afc:	19bb      	adds	r3, r7, r6
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d02c      	beq.n	8011b5e <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011b04:	19bb      	adds	r3, r7, r6
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	2b0b      	cmp	r3, #11
 8011b0a:	d124      	bne.n	8011b56 <ScheduleTx+0x182>
 8011b0c:	230f      	movs	r3, #15
 8011b0e:	18fb      	adds	r3, r7, r3
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d01f      	beq.n	8011b56 <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011b16:	4a1f      	ldr	r2, [pc, #124]	; (8011b94 <ScheduleTx+0x1c0>)
 8011b18:	2391      	movs	r3, #145	; 0x91
 8011b1a:	00db      	lsls	r3, r3, #3
 8011b1c:	58d3      	ldr	r3, [r2, r3]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d017      	beq.n	8011b52 <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011b22:	4a1c      	ldr	r2, [pc, #112]	; (8011b94 <ScheduleTx+0x1c0>)
 8011b24:	23d0      	movs	r3, #208	; 0xd0
 8011b26:	009b      	lsls	r3, r3, #2
 8011b28:	58d3      	ldr	r3, [r2, r3]
 8011b2a:	2220      	movs	r2, #32
 8011b2c:	431a      	orrs	r2, r3
 8011b2e:	0011      	movs	r1, r2
 8011b30:	4a18      	ldr	r2, [pc, #96]	; (8011b94 <ScheduleTx+0x1c0>)
 8011b32:	23d0      	movs	r3, #208	; 0xd0
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011b38:	4a16      	ldr	r2, [pc, #88]	; (8011b94 <ScheduleTx+0x1c0>)
 8011b3a:	2391      	movs	r3, #145	; 0x91
 8011b3c:	00db      	lsls	r3, r3, #3
 8011b3e:	58d2      	ldr	r2, [r2, r3]
 8011b40:	4b18      	ldr	r3, [pc, #96]	; (8011ba4 <ScheduleTx+0x1d0>)
 8011b42:	0011      	movs	r1, r2
 8011b44:	0018      	movs	r0, r3
 8011b46:	f00b f805 	bl	801cb54 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011b4a:	4b16      	ldr	r3, [pc, #88]	; (8011ba4 <ScheduleTx+0x1d0>)
 8011b4c:	0018      	movs	r0, r3
 8011b4e:	f00a ff11 	bl	801c974 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011b52:	2300      	movs	r3, #0
 8011b54:	e01a      	b.n	8011b8c <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011b56:	2337      	movs	r3, #55	; 0x37
 8011b58:	18fb      	adds	r3, r7, r3
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	e016      	b.n	8011b8c <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011b5e:	f7ff fe2d 	bl	80117bc <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011b62:	2537      	movs	r5, #55	; 0x37
 8011b64:	197c      	adds	r4, r7, r5
 8011b66:	f7ff febd 	bl	80118e4 <VerifyTxFrame>
 8011b6a:	0003      	movs	r3, r0
 8011b6c:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011b6e:	002a      	movs	r2, r5
 8011b70:	18bb      	adds	r3, r7, r2
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d002      	beq.n	8011b7e <ScheduleTx+0x1aa>
    {
        return status;
 8011b78:	18bb      	adds	r3, r7, r2
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	e006      	b.n	8011b8c <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011b7e:	4b05      	ldr	r3, [pc, #20]	; (8011b94 <ScheduleTx+0x1c0>)
 8011b80:	4a09      	ldr	r2, [pc, #36]	; (8011ba8 <ScheduleTx+0x1d4>)
 8011b82:	5c9b      	ldrb	r3, [r3, r2]
 8011b84:	0018      	movs	r0, r3
 8011b86:	f000 fb99 	bl	80122bc <SendFrameOnChannel>
 8011b8a:	0003      	movs	r3, r0
}
 8011b8c:	0018      	movs	r0, r3
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	b00f      	add	sp, #60	; 0x3c
 8011b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b94:	20000548 	.word	0x20000548
 8011b98:	00000484 	.word	0x00000484
 8011b9c:	200009d0 	.word	0x200009d0
 8011ba0:	2000095d 	.word	0x2000095d
 8011ba4:	200008b0 	.word	0x200008b0
 8011ba8:	00000415 	.word	0x00000415

08011bac <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bae:	b085      	sub	sp, #20
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	0002      	movs	r2, r0
 8011bb4:	1dfb      	adds	r3, r7, #7
 8011bb6:	701a      	strb	r2, [r3, #0]
 8011bb8:	1dbb      	adds	r3, r7, #6
 8011bba:	1c0a      	adds	r2, r1, #0
 8011bbc:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011bbe:	230f      	movs	r3, #15
 8011bc0:	18fb      	adds	r3, r7, r3
 8011bc2:	2213      	movs	r2, #19
 8011bc4:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011bca:	4a2c      	ldr	r2, [pc, #176]	; (8011c7c <SecureFrame+0xd0>)
 8011bcc:	2382      	movs	r3, #130	; 0x82
 8011bce:	005b      	lsls	r3, r3, #1
 8011bd0:	5cd3      	ldrb	r3, [r2, r3]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d002      	beq.n	8011bdc <SecureFrame+0x30>
 8011bd6:	2b04      	cmp	r3, #4
 8011bd8:	d016      	beq.n	8011c08 <SecureFrame+0x5c>
 8011bda:	e047      	b.n	8011c6c <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011bdc:	250f      	movs	r5, #15
 8011bde:	197c      	adds	r4, r7, r5
 8011be0:	4b27      	ldr	r3, [pc, #156]	; (8011c80 <SecureFrame+0xd4>)
 8011be2:	0018      	movs	r0, r3
 8011be4:	f004 f86a 	bl	8015cbc <LoRaMacCryptoPrepareJoinRequest>
 8011be8:	0003      	movs	r3, r0
 8011bea:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011bec:	197b      	adds	r3, r7, r5
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d001      	beq.n	8011bf8 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011bf4:	2311      	movs	r3, #17
 8011bf6:	e03c      	b.n	8011c72 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011bf8:	4a20      	ldr	r2, [pc, #128]	; (8011c7c <SecureFrame+0xd0>)
 8011bfa:	2386      	movs	r3, #134	; 0x86
 8011bfc:	005b      	lsls	r3, r3, #1
 8011bfe:	5cd3      	ldrb	r3, [r2, r3]
 8011c00:	b29a      	uxth	r2, r3
 8011c02:	4b1e      	ldr	r3, [pc, #120]	; (8011c7c <SecureFrame+0xd0>)
 8011c04:	801a      	strh	r2, [r3, #0]
            break;
 8011c06:	e033      	b.n	8011c70 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011c08:	2308      	movs	r3, #8
 8011c0a:	18fb      	adds	r3, r7, r3
 8011c0c:	0018      	movs	r0, r3
 8011c0e:	f003 ff67 	bl	8015ae0 <LoRaMacCryptoGetFCntUp>
 8011c12:	1e03      	subs	r3, r0, #0
 8011c14:	d001      	beq.n	8011c1a <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011c16:	2312      	movs	r3, #18
 8011c18:	e02b      	b.n	8011c72 <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011c1a:	4a18      	ldr	r2, [pc, #96]	; (8011c7c <SecureFrame+0xd0>)
 8011c1c:	2382      	movs	r3, #130	; 0x82
 8011c1e:	00db      	lsls	r3, r3, #3
 8011c20:	5cd3      	ldrb	r3, [r2, r3]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d104      	bne.n	8011c30 <SecureFrame+0x84>
 8011c26:	4b15      	ldr	r3, [pc, #84]	; (8011c7c <SecureFrame+0xd0>)
 8011c28:	4a16      	ldr	r2, [pc, #88]	; (8011c84 <SecureFrame+0xd8>)
 8011c2a:	5c9b      	ldrb	r3, [r3, r2]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d902      	bls.n	8011c36 <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	3b01      	subs	r3, #1
 8011c34:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011c36:	68b8      	ldr	r0, [r7, #8]
 8011c38:	260f      	movs	r6, #15
 8011c3a:	19bc      	adds	r4, r7, r6
 8011c3c:	4d10      	ldr	r5, [pc, #64]	; (8011c80 <SecureFrame+0xd4>)
 8011c3e:	1dbb      	adds	r3, r7, #6
 8011c40:	781a      	ldrb	r2, [r3, #0]
 8011c42:	1dfb      	adds	r3, r7, #7
 8011c44:	7819      	ldrb	r1, [r3, #0]
 8011c46:	002b      	movs	r3, r5
 8011c48:	f004 f942 	bl	8015ed0 <LoRaMacCryptoSecureMessage>
 8011c4c:	0003      	movs	r3, r0
 8011c4e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011c50:	19bb      	adds	r3, r7, r6
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d001      	beq.n	8011c5c <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011c58:	2311      	movs	r3, #17
 8011c5a:	e00a      	b.n	8011c72 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011c5c:	4a07      	ldr	r2, [pc, #28]	; (8011c7c <SecureFrame+0xd0>)
 8011c5e:	2386      	movs	r3, #134	; 0x86
 8011c60:	005b      	lsls	r3, r3, #1
 8011c62:	5cd3      	ldrb	r3, [r2, r3]
 8011c64:	b29a      	uxth	r2, r3
 8011c66:	4b05      	ldr	r3, [pc, #20]	; (8011c7c <SecureFrame+0xd0>)
 8011c68:	801a      	strh	r2, [r3, #0]
            break;
 8011c6a:	e001      	b.n	8011c70 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c6c:	2303      	movs	r3, #3
 8011c6e:	e000      	b.n	8011c72 <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 8011c70:	2300      	movs	r3, #0
}
 8011c72:	0018      	movs	r0, r3
 8011c74:	46bd      	mov	sp, r7
 8011c76:	b005      	add	sp, #20
 8011c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c7a:	46c0      	nop			; (mov r8, r8)
 8011c7c:	20000548 	.word	0x20000548
 8011c80:	20000650 	.word	0x20000650
 8011c84:	00000412 	.word	0x00000412

08011c88 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8011c8c:	4b0e      	ldr	r3, [pc, #56]	; (8011cc8 <CalculateBackOff+0x40>)
 8011c8e:	4a0f      	ldr	r2, [pc, #60]	; (8011ccc <CalculateBackOff+0x44>)
 8011c90:	589a      	ldr	r2, [r3, r2]
 8011c92:	23aa      	movs	r3, #170	; 0xaa
 8011c94:	005b      	lsls	r3, r3, #1
 8011c96:	58d3      	ldr	r3, [r2, r3]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d111      	bne.n	8011cc0 <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011c9c:	4b0a      	ldr	r3, [pc, #40]	; (8011cc8 <CalculateBackOff+0x40>)
 8011c9e:	4a0b      	ldr	r2, [pc, #44]	; (8011ccc <CalculateBackOff+0x44>)
 8011ca0:	589a      	ldr	r2, [r3, r2]
 8011ca2:	23a6      	movs	r3, #166	; 0xa6
 8011ca4:	005b      	lsls	r3, r3, #1
 8011ca6:	5ad3      	ldrh	r3, [r2, r3]
 8011ca8:	3b01      	subs	r3, #1
 8011caa:	4907      	ldr	r1, [pc, #28]	; (8011cc8 <CalculateBackOff+0x40>)
 8011cac:	2283      	movs	r2, #131	; 0x83
 8011cae:	00d2      	lsls	r2, r2, #3
 8011cb0:	5889      	ldr	r1, [r1, r2]
 8011cb2:	4a05      	ldr	r2, [pc, #20]	; (8011cc8 <CalculateBackOff+0x40>)
 8011cb4:	4805      	ldr	r0, [pc, #20]	; (8011ccc <CalculateBackOff+0x44>)
 8011cb6:	5812      	ldr	r2, [r2, r0]
 8011cb8:	4359      	muls	r1, r3
 8011cba:	23aa      	movs	r3, #170	; 0xaa
 8011cbc:	005b      	lsls	r3, r3, #1
 8011cbe:	50d1      	str	r1, [r2, r3]
    }
}
 8011cc0:	46c0      	nop			; (mov r8, r8)
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	46c0      	nop			; (mov r8, r8)
 8011cc8:	20000548 	.word	0x20000548
 8011ccc:	00000484 	.word	0x00000484

08011cd0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	1d3b      	adds	r3, r7, #4
 8011cd8:	7019      	strb	r1, [r3, #0]
 8011cda:	0011      	movs	r1, r2
 8011cdc:	1dfb      	adds	r3, r7, #7
 8011cde:	1c02      	adds	r2, r0, #0
 8011ce0:	701a      	strb	r2, [r3, #0]
 8011ce2:	1dbb      	adds	r3, r7, #6
 8011ce4:	1c0a      	adds	r2, r1, #0
 8011ce6:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011ce8:	1dfb      	adds	r3, r7, #7
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d003      	beq.n	8011cf8 <RemoveMacCommands+0x28>
 8011cf0:	1dfb      	adds	r3, r7, #7
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d10f      	bne.n	8011d18 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011cf8:	1dbb      	adds	r3, r7, #6
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d109      	bne.n	8011d14 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011d00:	1d3b      	adds	r3, r7, #4
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	2220      	movs	r2, #32
 8011d06:	4013      	ands	r3, r2
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d004      	beq.n	8011d18 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011d0e:	f002 ff75 	bl	8014bfc <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011d12:	e001      	b.n	8011d18 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011d14:	f002 ff72 	bl	8014bfc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011d18:	46c0      	nop			; (mov r8, r8)
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	b002      	add	sp, #8
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011d20:	b590      	push	{r4, r7, lr}
 8011d22:	b083      	sub	sp, #12
 8011d24:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8011d26:	4b72      	ldr	r3, [pc, #456]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d28:	4a72      	ldr	r2, [pc, #456]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011d2a:	589a      	ldr	r2, [r3, r2]
 8011d2c:	23b2      	movs	r3, #178	; 0xb2
 8011d2e:	005b      	lsls	r3, r3, #1
 8011d30:	2100      	movs	r1, #0
 8011d32:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8011d34:	4b6e      	ldr	r3, [pc, #440]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d36:	4a6f      	ldr	r2, [pc, #444]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011d38:	589b      	ldr	r3, [r3, r2]
 8011d3a:	2280      	movs	r2, #128	; 0x80
 8011d3c:	2100      	movs	r1, #0
 8011d3e:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 8011d40:	4a6b      	ldr	r2, [pc, #428]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d42:	2382      	movs	r3, #130	; 0x82
 8011d44:	00db      	lsls	r3, r3, #3
 8011d46:	2100      	movs	r1, #0
 8011d48:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 8011d4a:	4b69      	ldr	r3, [pc, #420]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d4c:	4a6a      	ldr	r2, [pc, #424]	; (8011ef8 <ResetMacParameters+0x1d8>)
 8011d4e:	2101      	movs	r1, #1
 8011d50:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 8011d52:	4b67      	ldr	r3, [pc, #412]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d54:	4a69      	ldr	r2, [pc, #420]	; (8011efc <ResetMacParameters+0x1dc>)
 8011d56:	2101      	movs	r1, #1
 8011d58:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8011d5a:	4b65      	ldr	r3, [pc, #404]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d5c:	4a68      	ldr	r2, [pc, #416]	; (8011f00 <ResetMacParameters+0x1e0>)
 8011d5e:	2100      	movs	r1, #0
 8011d60:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 8011d62:	4b63      	ldr	r3, [pc, #396]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d64:	4a63      	ldr	r2, [pc, #396]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011d66:	589b      	ldr	r3, [r3, r2]
 8011d68:	22c8      	movs	r2, #200	; 0xc8
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8011d6e:	4b60      	ldr	r3, [pc, #384]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d70:	4a60      	ldr	r2, [pc, #384]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011d72:	589a      	ldr	r2, [r3, r2]
 8011d74:	23a6      	movs	r3, #166	; 0xa6
 8011d76:	005b      	lsls	r3, r3, #1
 8011d78:	2101      	movs	r1, #1
 8011d7a:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8011d7c:	4b5c      	ldr	r3, [pc, #368]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d7e:	4a5d      	ldr	r2, [pc, #372]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011d80:	589a      	ldr	r2, [r3, r2]
 8011d82:	4b5b      	ldr	r3, [pc, #364]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d84:	495b      	ldr	r1, [pc, #364]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011d86:	585b      	ldr	r3, [r3, r1]
 8011d88:	2104      	movs	r1, #4
 8011d8a:	5651      	ldrsb	r1, [r2, r1]
 8011d8c:	2284      	movs	r2, #132	; 0x84
 8011d8e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8011d90:	4b57      	ldr	r3, [pc, #348]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d92:	4a58      	ldr	r2, [pc, #352]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011d94:	589a      	ldr	r2, [r3, r2]
 8011d96:	4b56      	ldr	r3, [pc, #344]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011d98:	4956      	ldr	r1, [pc, #344]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011d9a:	585b      	ldr	r3, [r3, r1]
 8011d9c:	2105      	movs	r1, #5
 8011d9e:	5651      	ldrsb	r1, [r2, r1]
 8011da0:	2285      	movs	r2, #133	; 0x85
 8011da2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8011da4:	4b52      	ldr	r3, [pc, #328]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011da6:	4a53      	ldr	r2, [pc, #332]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011da8:	589a      	ldr	r2, [r3, r2]
 8011daa:	4b51      	ldr	r3, [pc, #324]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011dac:	4951      	ldr	r1, [pc, #324]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011dae:	585b      	ldr	r3, [r3, r1]
 8011db0:	2125      	movs	r1, #37	; 0x25
 8011db2:	5c51      	ldrb	r1, [r2, r1]
 8011db4:	22a5      	movs	r2, #165	; 0xa5
 8011db6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8011db8:	4b4d      	ldr	r3, [pc, #308]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011dba:	4a4e      	ldr	r2, [pc, #312]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011dbc:	589a      	ldr	r2, [r3, r2]
 8011dbe:	4b4c      	ldr	r3, [pc, #304]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011dc0:	494c      	ldr	r1, [pc, #304]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011dc2:	585b      	ldr	r3, [r3, r1]
 8011dc4:	21a8      	movs	r1, #168	; 0xa8
 8011dc6:	185b      	adds	r3, r3, r1
 8011dc8:	3228      	adds	r2, #40	; 0x28
 8011dca:	ca03      	ldmia	r2!, {r0, r1}
 8011dcc:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8011dce:	4b48      	ldr	r3, [pc, #288]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011dd0:	4a48      	ldr	r2, [pc, #288]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011dd2:	589a      	ldr	r2, [r3, r2]
 8011dd4:	4b46      	ldr	r3, [pc, #280]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011dd6:	4947      	ldr	r1, [pc, #284]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011dd8:	585b      	ldr	r3, [r3, r1]
 8011dda:	21b0      	movs	r1, #176	; 0xb0
 8011ddc:	185b      	adds	r3, r3, r1
 8011dde:	3230      	adds	r2, #48	; 0x30
 8011de0:	ca03      	ldmia	r2!, {r0, r1}
 8011de2:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8011de4:	4b42      	ldr	r3, [pc, #264]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011de6:	4a43      	ldr	r2, [pc, #268]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011de8:	589a      	ldr	r2, [r3, r2]
 8011dea:	4b41      	ldr	r3, [pc, #260]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011dec:	4941      	ldr	r1, [pc, #260]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011dee:	585b      	ldr	r3, [r3, r1]
 8011df0:	2138      	movs	r1, #56	; 0x38
 8011df2:	5c51      	ldrb	r1, [r2, r1]
 8011df4:	22b8      	movs	r2, #184	; 0xb8
 8011df6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8011df8:	4b3d      	ldr	r3, [pc, #244]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011dfa:	4a3e      	ldr	r2, [pc, #248]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011dfc:	589a      	ldr	r2, [r3, r2]
 8011dfe:	4b3c      	ldr	r3, [pc, #240]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e00:	493c      	ldr	r1, [pc, #240]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011e02:	585b      	ldr	r3, [r3, r1]
 8011e04:	2139      	movs	r1, #57	; 0x39
 8011e06:	5c51      	ldrb	r1, [r2, r1]
 8011e08:	22b9      	movs	r2, #185	; 0xb9
 8011e0a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8011e0c:	4b38      	ldr	r3, [pc, #224]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e0e:	4a39      	ldr	r2, [pc, #228]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011e10:	589b      	ldr	r3, [r3, r2]
 8011e12:	4a37      	ldr	r2, [pc, #220]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e14:	4937      	ldr	r1, [pc, #220]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011e16:	5852      	ldr	r2, [r2, r1]
 8011e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e1a:	21bc      	movs	r1, #188	; 0xbc
 8011e1c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8011e1e:	4b34      	ldr	r3, [pc, #208]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e20:	4a34      	ldr	r2, [pc, #208]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011e22:	589b      	ldr	r3, [r3, r2]
 8011e24:	4a32      	ldr	r2, [pc, #200]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e26:	4933      	ldr	r1, [pc, #204]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011e28:	5852      	ldr	r2, [r2, r1]
 8011e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e2c:	21c0      	movs	r1, #192	; 0xc0
 8011e2e:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 8011e30:	4b2f      	ldr	r3, [pc, #188]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e32:	4a34      	ldr	r2, [pc, #208]	; (8011f04 <ResetMacParameters+0x1e4>)
 8011e34:	2100      	movs	r1, #0
 8011e36:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8011e38:	4b2d      	ldr	r3, [pc, #180]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e3a:	4a2e      	ldr	r2, [pc, #184]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011e3c:	589a      	ldr	r2, [r3, r2]
 8011e3e:	234c      	movs	r3, #76	; 0x4c
 8011e40:	33ff      	adds	r3, #255	; 0xff
 8011e42:	2100      	movs	r1, #0
 8011e44:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8011e46:	003b      	movs	r3, r7
 8011e48:	2201      	movs	r2, #1
 8011e4a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 8011e4c:	003b      	movs	r3, r7
 8011e4e:	2200      	movs	r2, #0
 8011e50:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8011e52:	4b27      	ldr	r3, [pc, #156]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e54:	4a27      	ldr	r2, [pc, #156]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011e56:	589b      	ldr	r3, [r3, r2]
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	003a      	movs	r2, r7
 8011e5c:	0011      	movs	r1, r2
 8011e5e:	0018      	movs	r0, r3
 8011e60:	f004 fe05 	bl	8016a6e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8011e64:	4b22      	ldr	r3, [pc, #136]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e66:	4a28      	ldr	r2, [pc, #160]	; (8011f08 <ResetMacParameters+0x1e8>)
 8011e68:	2100      	movs	r1, #0
 8011e6a:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011e6c:	4b20      	ldr	r3, [pc, #128]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e6e:	4a26      	ldr	r2, [pc, #152]	; (8011f08 <ResetMacParameters+0x1e8>)
 8011e70:	5c99      	ldrb	r1, [r3, r2]
 8011e72:	4a1f      	ldr	r2, [pc, #124]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e74:	23f3      	movs	r3, #243	; 0xf3
 8011e76:	009b      	lsls	r3, r3, #2
 8011e78:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8011e7a:	4b1d      	ldr	r3, [pc, #116]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e7c:	4a1d      	ldr	r2, [pc, #116]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011e7e:	589b      	ldr	r3, [r3, r2]
 8011e80:	22a8      	movs	r2, #168	; 0xa8
 8011e82:	5899      	ldr	r1, [r3, r2]
 8011e84:	4a1a      	ldr	r2, [pc, #104]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e86:	23f4      	movs	r3, #244	; 0xf4
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8011e8c:	4b18      	ldr	r3, [pc, #96]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e8e:	4a19      	ldr	r2, [pc, #100]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011e90:	589b      	ldr	r3, [r3, r2]
 8011e92:	22b9      	movs	r2, #185	; 0xb9
 8011e94:	5c99      	ldrb	r1, [r3, r2]
 8011e96:	4a16      	ldr	r2, [pc, #88]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011e98:	23f7      	movs	r3, #247	; 0xf7
 8011e9a:	009b      	lsls	r3, r3, #2
 8011e9c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8011e9e:	4b14      	ldr	r3, [pc, #80]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011ea0:	4a14      	ldr	r2, [pc, #80]	; (8011ef4 <ResetMacParameters+0x1d4>)
 8011ea2:	589b      	ldr	r3, [r3, r2]
 8011ea4:	22ca      	movs	r2, #202	; 0xca
 8011ea6:	5c99      	ldrb	r1, [r3, r2]
 8011ea8:	4b11      	ldr	r3, [pc, #68]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011eaa:	4a18      	ldr	r2, [pc, #96]	; (8011f0c <ResetMacParameters+0x1ec>)
 8011eac:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011eae:	4b10      	ldr	r3, [pc, #64]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011eb0:	4a17      	ldr	r2, [pc, #92]	; (8011f10 <ResetMacParameters+0x1f0>)
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011eb6:	4b0e      	ldr	r3, [pc, #56]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011eb8:	4a16      	ldr	r2, [pc, #88]	; (8011f14 <ResetMacParameters+0x1f4>)
 8011eba:	2101      	movs	r1, #1
 8011ebc:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011ebe:	480c      	ldr	r0, [pc, #48]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011ec0:	23f8      	movs	r3, #248	; 0xf8
 8011ec2:	009b      	lsls	r3, r3, #2
 8011ec4:	490a      	ldr	r1, [pc, #40]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011ec6:	22f3      	movs	r2, #243	; 0xf3
 8011ec8:	0092      	lsls	r2, r2, #2
 8011eca:	18c3      	adds	r3, r0, r3
 8011ecc:	188a      	adds	r2, r1, r2
 8011ece:	ca13      	ldmia	r2!, {r0, r1, r4}
 8011ed0:	c313      	stmia	r3!, {r0, r1, r4}
 8011ed2:	ca03      	ldmia	r2!, {r0, r1}
 8011ed4:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011ed6:	4b06      	ldr	r3, [pc, #24]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011ed8:	4a0f      	ldr	r2, [pc, #60]	; (8011f18 <ResetMacParameters+0x1f8>)
 8011eda:	2101      	movs	r1, #1
 8011edc:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011ede:	4b04      	ldr	r3, [pc, #16]	; (8011ef0 <ResetMacParameters+0x1d0>)
 8011ee0:	4a0e      	ldr	r2, [pc, #56]	; (8011f1c <ResetMacParameters+0x1fc>)
 8011ee2:	2102      	movs	r1, #2
 8011ee4:	5499      	strb	r1, [r3, r2]

}
 8011ee6:	46c0      	nop			; (mov r8, r8)
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	b003      	add	sp, #12
 8011eec:	bd90      	pop	{r4, r7, pc}
 8011eee:	46c0      	nop			; (mov r8, r8)
 8011ef0:	20000548 	.word	0x20000548
 8011ef4:	00000484 	.word	0x00000484
 8011ef8:	00000411 	.word	0x00000411
 8011efc:	00000412 	.word	0x00000412
 8011f00:	00000413 	.word	0x00000413
 8011f04:	00000414 	.word	0x00000414
 8011f08:	00000415 	.word	0x00000415
 8011f0c:	000003dd 	.word	0x000003dd
 8011f10:	000003de 	.word	0x000003de
 8011f14:	000003df 	.word	0x000003df
 8011f18:	000003f2 	.word	0x000003f2
 8011f1c:	000003f3 	.word	0x000003f3

08011f20 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	0018      	movs	r0, r3
 8011f2e:	f00a fd99 	bl	801ca64 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8011f32:	4b10      	ldr	r3, [pc, #64]	; (8011f74 <RxWindowSetup+0x54>)
 8011f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f36:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011f38:	4b0f      	ldr	r3, [pc, #60]	; (8011f78 <RxWindowSetup+0x58>)
 8011f3a:	4a10      	ldr	r2, [pc, #64]	; (8011f7c <RxWindowSetup+0x5c>)
 8011f3c:	589b      	ldr	r3, [r3, r2]
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	4a0f      	ldr	r2, [pc, #60]	; (8011f80 <RxWindowSetup+0x60>)
 8011f42:	6839      	ldr	r1, [r7, #0]
 8011f44:	0018      	movs	r0, r3
 8011f46:	f004 fe29 	bl	8016b9c <RegionRxConfig>
 8011f4a:	1e03      	subs	r3, r0, #0
 8011f4c:	d00e      	beq.n	8011f6c <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8011f4e:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <RxWindowSetup+0x54>)
 8011f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f52:	4a09      	ldr	r2, [pc, #36]	; (8011f78 <RxWindowSetup+0x58>)
 8011f54:	4909      	ldr	r1, [pc, #36]	; (8011f7c <RxWindowSetup+0x5c>)
 8011f56:	5852      	ldr	r2, [r2, r1]
 8011f58:	2190      	movs	r1, #144	; 0x90
 8011f5a:	5852      	ldr	r2, [r2, r1]
 8011f5c:	0010      	movs	r0, r2
 8011f5e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	7cd9      	ldrb	r1, [r3, #19]
 8011f64:	4a04      	ldr	r2, [pc, #16]	; (8011f78 <RxWindowSetup+0x58>)
 8011f66:	2390      	movs	r3, #144	; 0x90
 8011f68:	00db      	lsls	r3, r3, #3
 8011f6a:	54d1      	strb	r1, [r2, r3]
    }
}
 8011f6c:	46c0      	nop			; (mov r8, r8)
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	b002      	add	sp, #8
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	0801f0b4 	.word	0x0801f0b4
 8011f78:	20000548 	.word	0x20000548
 8011f7c:	00000484 	.word	0x00000484
 8011f80:	20000968 	.word	0x20000968

08011f84 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011f84:	b590      	push	{r4, r7, lr}
 8011f86:	b083      	sub	sp, #12
 8011f88:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011f8a:	4b1d      	ldr	r3, [pc, #116]	; (8012000 <OpenContinuousRxCWindow+0x7c>)
 8011f8c:	4a1d      	ldr	r2, [pc, #116]	; (8012004 <OpenContinuousRxCWindow+0x80>)
 8011f8e:	589b      	ldr	r3, [r3, r2]
 8011f90:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8011f92:	4b1b      	ldr	r3, [pc, #108]	; (8012000 <OpenContinuousRxCWindow+0x7c>)
 8011f94:	4a1b      	ldr	r2, [pc, #108]	; (8012004 <OpenContinuousRxCWindow+0x80>)
 8011f96:	589b      	ldr	r3, [r3, r2]
 8011f98:	22b4      	movs	r2, #180	; 0xb4
 8011f9a:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011f9c:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011f9e:	4b18      	ldr	r3, [pc, #96]	; (8012000 <OpenContinuousRxCWindow+0x7c>)
 8011fa0:	4a18      	ldr	r2, [pc, #96]	; (8012004 <OpenContinuousRxCWindow+0x80>)
 8011fa2:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011fa4:	228c      	movs	r2, #140	; 0x8c
 8011fa6:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011fa8:	4b15      	ldr	r3, [pc, #84]	; (8012000 <OpenContinuousRxCWindow+0x7c>)
 8011faa:	4c16      	ldr	r4, [pc, #88]	; (8012004 <OpenContinuousRxCWindow+0x80>)
 8011fac:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011fae:	2488      	movs	r4, #136	; 0x88
 8011fb0:	591c      	ldr	r4, [r3, r4]
 8011fb2:	4b15      	ldr	r3, [pc, #84]	; (8012008 <OpenContinuousRxCWindow+0x84>)
 8011fb4:	9300      	str	r3, [sp, #0]
 8011fb6:	0023      	movs	r3, r4
 8011fb8:	f004 fdcc 	bl	8016b54 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011fbc:	4b10      	ldr	r3, [pc, #64]	; (8012000 <OpenContinuousRxCWindow+0x7c>)
 8011fbe:	4a13      	ldr	r2, [pc, #76]	; (801200c <OpenContinuousRxCWindow+0x88>)
 8011fc0:	2102      	movs	r1, #2
 8011fc2:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011fc4:	4b0e      	ldr	r3, [pc, #56]	; (8012000 <OpenContinuousRxCWindow+0x7c>)
 8011fc6:	4a12      	ldr	r2, [pc, #72]	; (8012010 <OpenContinuousRxCWindow+0x8c>)
 8011fc8:	2101      	movs	r1, #1
 8011fca:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011fcc:	4b0c      	ldr	r3, [pc, #48]	; (8012000 <OpenContinuousRxCWindow+0x7c>)
 8011fce:	4a0d      	ldr	r2, [pc, #52]	; (8012004 <OpenContinuousRxCWindow+0x80>)
 8011fd0:	589b      	ldr	r3, [r3, r2]
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	4a0f      	ldr	r2, [pc, #60]	; (8012014 <OpenContinuousRxCWindow+0x90>)
 8011fd6:	490c      	ldr	r1, [pc, #48]	; (8012008 <OpenContinuousRxCWindow+0x84>)
 8011fd8:	0018      	movs	r0, r3
 8011fda:	f004 fddf 	bl	8016b9c <RegionRxConfig>
 8011fde:	1e03      	subs	r3, r0, #0
 8011fe0:	d00a      	beq.n	8011ff8 <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 8011fe2:	4b0d      	ldr	r3, [pc, #52]	; (8012018 <OpenContinuousRxCWindow+0x94>)
 8011fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fe6:	2000      	movs	r0, #0
 8011fe8:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011fea:	4b05      	ldr	r3, [pc, #20]	; (8012000 <OpenContinuousRxCWindow+0x7c>)
 8011fec:	4a07      	ldr	r2, [pc, #28]	; (801200c <OpenContinuousRxCWindow+0x88>)
 8011fee:	5c99      	ldrb	r1, [r3, r2]
 8011ff0:	4a03      	ldr	r2, [pc, #12]	; (8012000 <OpenContinuousRxCWindow+0x7c>)
 8011ff2:	2390      	movs	r3, #144	; 0x90
 8011ff4:	00db      	lsls	r3, r3, #3
 8011ff6:	54d1      	strb	r1, [r2, r3]
    }
}
 8011ff8:	46c0      	nop			; (mov r8, r8)
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	b001      	add	sp, #4
 8011ffe:	bd90      	pop	{r4, r7, pc}
 8012000:	20000548 	.word	0x20000548
 8012004:	00000484 	.word	0x00000484
 8012008:	20000928 	.word	0x20000928
 801200c:	000003f3 	.word	0x000003f3
 8012010:	000003f2 	.word	0x000003f2
 8012014:	20000968 	.word	0x20000968
 8012018:	0801f0b4 	.word	0x0801f0b4

0801201c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 801201c:	b590      	push	{r4, r7, lr}
 801201e:	b089      	sub	sp, #36	; 0x24
 8012020:	af00      	add	r7, sp, #0
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	60b9      	str	r1, [r7, #8]
 8012026:	603b      	str	r3, [r7, #0]
 8012028:	1dfb      	adds	r3, r7, #7
 801202a:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 801202c:	4b9a      	ldr	r3, [pc, #616]	; (8012298 <PrepareFrame+0x27c>)
 801202e:	2200      	movs	r2, #0
 8012030:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012032:	4b99      	ldr	r3, [pc, #612]	; (8012298 <PrepareFrame+0x27c>)
 8012034:	4a99      	ldr	r2, [pc, #612]	; (801229c <PrepareFrame+0x280>)
 8012036:	2100      	movs	r1, #0
 8012038:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 801203a:	2300      	movs	r3, #0
 801203c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801203e:	2300      	movs	r3, #0
 8012040:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012042:	231f      	movs	r3, #31
 8012044:	18fb      	adds	r3, r7, r3
 8012046:	2200      	movs	r2, #0
 8012048:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d103      	bne.n	8012058 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 8012050:	2330      	movs	r3, #48	; 0x30
 8012052:	18fb      	adds	r3, r7, r3
 8012054:	2200      	movs	r2, #0
 8012056:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012058:	2430      	movs	r4, #48	; 0x30
 801205a:	193b      	adds	r3, r7, r4
 801205c:	881a      	ldrh	r2, [r3, #0]
 801205e:	6839      	ldr	r1, [r7, #0]
 8012060:	4b8f      	ldr	r3, [pc, #572]	; (80122a0 <PrepareFrame+0x284>)
 8012062:	0018      	movs	r0, r3
 8012064:	f007 f946 	bl	80192f4 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012068:	193b      	adds	r3, r7, r4
 801206a:	881b      	ldrh	r3, [r3, #0]
 801206c:	b2d9      	uxtb	r1, r3
 801206e:	4b8a      	ldr	r3, [pc, #552]	; (8012298 <PrepareFrame+0x27c>)
 8012070:	4a8c      	ldr	r2, [pc, #560]	; (80122a4 <PrepareFrame+0x288>)
 8012072:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	781a      	ldrb	r2, [r3, #0]
 8012078:	4b87      	ldr	r3, [pc, #540]	; (8012298 <PrepareFrame+0x27c>)
 801207a:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	061b      	lsls	r3, r3, #24
 8012082:	0f5b      	lsrs	r3, r3, #29
 8012084:	b2db      	uxtb	r3, r3
 8012086:	2b07      	cmp	r3, #7
 8012088:	d100      	bne.n	801208c <PrepareFrame+0x70>
 801208a:	e0e0      	b.n	801224e <PrepareFrame+0x232>
 801208c:	dd00      	ble.n	8012090 <PrepareFrame+0x74>
 801208e:	e0f8      	b.n	8012282 <PrepareFrame+0x266>
 8012090:	2b02      	cmp	r3, #2
 8012092:	d006      	beq.n	80120a2 <PrepareFrame+0x86>
 8012094:	2b04      	cmp	r3, #4
 8012096:	d000      	beq.n	801209a <PrepareFrame+0x7e>
 8012098:	e0f3      	b.n	8012282 <PrepareFrame+0x266>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801209a:	4b7f      	ldr	r3, [pc, #508]	; (8012298 <PrepareFrame+0x27c>)
 801209c:	4a7f      	ldr	r2, [pc, #508]	; (801229c <PrepareFrame+0x280>)
 801209e:	2101      	movs	r1, #1
 80120a0:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80120a2:	4a7d      	ldr	r2, [pc, #500]	; (8012298 <PrepareFrame+0x27c>)
 80120a4:	2382      	movs	r3, #130	; 0x82
 80120a6:	005b      	lsls	r3, r3, #1
 80120a8:	2104      	movs	r1, #4
 80120aa:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80120ac:	4a7a      	ldr	r2, [pc, #488]	; (8012298 <PrepareFrame+0x27c>)
 80120ae:	2384      	movs	r3, #132	; 0x84
 80120b0:	005b      	lsls	r3, r3, #1
 80120b2:	497d      	ldr	r1, [pc, #500]	; (80122a8 <PrepareFrame+0x28c>)
 80120b4:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80120b6:	4a78      	ldr	r2, [pc, #480]	; (8012298 <PrepareFrame+0x27c>)
 80120b8:	2386      	movs	r3, #134	; 0x86
 80120ba:	005b      	lsls	r3, r3, #1
 80120bc:	21ff      	movs	r1, #255	; 0xff
 80120be:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	7819      	ldrb	r1, [r3, #0]
 80120c4:	4a74      	ldr	r2, [pc, #464]	; (8012298 <PrepareFrame+0x27c>)
 80120c6:	230e      	movs	r3, #14
 80120c8:	33ff      	adds	r3, #255	; 0xff
 80120ca:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80120cc:	4a72      	ldr	r2, [pc, #456]	; (8012298 <PrepareFrame+0x27c>)
 80120ce:	1df9      	adds	r1, r7, #7
 80120d0:	2394      	movs	r3, #148	; 0x94
 80120d2:	005b      	lsls	r3, r3, #1
 80120d4:	7809      	ldrb	r1, [r1, #0]
 80120d6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 80120d8:	4b6f      	ldr	r3, [pc, #444]	; (8012298 <PrepareFrame+0x27c>)
 80120da:	4a74      	ldr	r2, [pc, #464]	; (80122ac <PrepareFrame+0x290>)
 80120dc:	589b      	ldr	r3, [r3, r2]
 80120de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80120e0:	4a6d      	ldr	r2, [pc, #436]	; (8012298 <PrepareFrame+0x27c>)
 80120e2:	2388      	movs	r3, #136	; 0x88
 80120e4:	005b      	lsls	r3, r3, #1
 80120e6:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	7819      	ldrb	r1, [r3, #0]
 80120ec:	4a6a      	ldr	r2, [pc, #424]	; (8012298 <PrepareFrame+0x27c>)
 80120ee:	238a      	movs	r3, #138	; 0x8a
 80120f0:	005b      	lsls	r3, r3, #1
 80120f2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80120f4:	4b68      	ldr	r3, [pc, #416]	; (8012298 <PrepareFrame+0x27c>)
 80120f6:	4a6b      	ldr	r2, [pc, #428]	; (80122a4 <PrepareFrame+0x288>)
 80120f8:	5c99      	ldrb	r1, [r3, r2]
 80120fa:	4a67      	ldr	r2, [pc, #412]	; (8012298 <PrepareFrame+0x27c>)
 80120fc:	2398      	movs	r3, #152	; 0x98
 80120fe:	005b      	lsls	r3, r3, #1
 8012100:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8012102:	4a65      	ldr	r2, [pc, #404]	; (8012298 <PrepareFrame+0x27c>)
 8012104:	2396      	movs	r3, #150	; 0x96
 8012106:	005b      	lsls	r3, r3, #1
 8012108:	4965      	ldr	r1, [pc, #404]	; (80122a0 <PrepareFrame+0x284>)
 801210a:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801210c:	2318      	movs	r3, #24
 801210e:	18fb      	adds	r3, r7, r3
 8012110:	0018      	movs	r0, r3
 8012112:	f003 fce5 	bl	8015ae0 <LoRaMacCryptoGetFCntUp>
 8012116:	1e03      	subs	r3, r0, #0
 8012118:	d001      	beq.n	801211e <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801211a:	2312      	movs	r3, #18
 801211c:	e0b7      	b.n	801228e <PrepareFrame+0x272>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	b299      	uxth	r1, r3
 8012122:	4a5d      	ldr	r2, [pc, #372]	; (8012298 <PrepareFrame+0x27c>)
 8012124:	238b      	movs	r3, #139	; 0x8b
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 801212a:	4b5b      	ldr	r3, [pc, #364]	; (8012298 <PrepareFrame+0x27c>)
 801212c:	4a60      	ldr	r2, [pc, #384]	; (80122b0 <PrepareFrame+0x294>)
 801212e:	2100      	movs	r1, #0
 8012130:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 8012132:	4a59      	ldr	r2, [pc, #356]	; (8012298 <PrepareFrame+0x27c>)
 8012134:	2388      	movs	r3, #136	; 0x88
 8012136:	00db      	lsls	r3, r3, #3
 8012138:	2100      	movs	r1, #0
 801213a:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801213c:	69b9      	ldr	r1, [r7, #24]
 801213e:	4a56      	ldr	r2, [pc, #344]	; (8012298 <PrepareFrame+0x27c>)
 8012140:	2389      	movs	r3, #137	; 0x89
 8012142:	00db      	lsls	r3, r3, #3
 8012144:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012146:	2314      	movs	r3, #20
 8012148:	18fb      	adds	r3, r7, r3
 801214a:	0018      	movs	r0, r3
 801214c:	f002 fd7a 	bl	8014c44 <LoRaMacCommandsGetSizeSerializedCmds>
 8012150:	1e03      	subs	r3, r0, #0
 8012152:	d001      	beq.n	8012158 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012154:	2313      	movs	r3, #19
 8012156:	e09a      	b.n	801228e <PrepareFrame+0x272>
            }

            if( macCmdsSize > 0 )
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d100      	bne.n	8012160 <PrepareFrame+0x144>
 801215e:	e092      	b.n	8012286 <PrepareFrame+0x26a>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8012160:	4b4d      	ldr	r3, [pc, #308]	; (8012298 <PrepareFrame+0x27c>)
 8012162:	4a52      	ldr	r2, [pc, #328]	; (80122ac <PrepareFrame+0x290>)
 8012164:	589b      	ldr	r3, [r3, r2]
 8012166:	2285      	movs	r2, #133	; 0x85
 8012168:	569b      	ldrsb	r3, [r3, r2]
 801216a:	221f      	movs	r2, #31
 801216c:	18bc      	adds	r4, r7, r2
 801216e:	0018      	movs	r0, r3
 8012170:	f7fe fb50 	bl	8010814 <GetMaxAppPayloadWithoutFOptsLength>
 8012174:	0003      	movs	r3, r0
 8012176:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012178:	4b47      	ldr	r3, [pc, #284]	; (8012298 <PrepareFrame+0x27c>)
 801217a:	4a4a      	ldr	r2, [pc, #296]	; (80122a4 <PrepareFrame+0x288>)
 801217c:	5c9b      	ldrb	r3, [r3, r2]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d024      	beq.n	80121cc <PrepareFrame+0x1b0>
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	2b0f      	cmp	r3, #15
 8012186:	d821      	bhi.n	80121cc <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8012188:	4a4a      	ldr	r2, [pc, #296]	; (80122b4 <PrepareFrame+0x298>)
 801218a:	2314      	movs	r3, #20
 801218c:	18fb      	adds	r3, r7, r3
 801218e:	0019      	movs	r1, r3
 8012190:	200f      	movs	r0, #15
 8012192:	f002 fd6d 	bl	8014c70 <LoRaMacCommandsSerializeCmds>
 8012196:	1e03      	subs	r3, r0, #0
 8012198:	d001      	beq.n	801219e <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801219a:	2313      	movs	r3, #19
 801219c:	e077      	b.n	801228e <PrepareFrame+0x272>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	1c1a      	adds	r2, r3, #0
 80121a2:	230f      	movs	r3, #15
 80121a4:	4013      	ands	r3, r2
 80121a6:	b2da      	uxtb	r2, r3
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	210f      	movs	r1, #15
 80121ac:	400a      	ands	r2, r1
 80121ae:	0010      	movs	r0, r2
 80121b0:	781a      	ldrb	r2, [r3, #0]
 80121b2:	210f      	movs	r1, #15
 80121b4:	438a      	bics	r2, r1
 80121b6:	1c11      	adds	r1, r2, #0
 80121b8:	1c02      	adds	r2, r0, #0
 80121ba:	430a      	orrs	r2, r1
 80121bc:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	7819      	ldrb	r1, [r3, #0]
 80121c2:	4a35      	ldr	r2, [pc, #212]	; (8012298 <PrepareFrame+0x27c>)
 80121c4:	238a      	movs	r3, #138	; 0x8a
 80121c6:	005b      	lsls	r3, r3, #1
 80121c8:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80121ca:	e05c      	b.n	8012286 <PrepareFrame+0x26a>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80121cc:	4b32      	ldr	r3, [pc, #200]	; (8012298 <PrepareFrame+0x27c>)
 80121ce:	4a35      	ldr	r2, [pc, #212]	; (80122a4 <PrepareFrame+0x288>)
 80121d0:	5c9b      	ldrb	r3, [r3, r2]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d015      	beq.n	8012202 <PrepareFrame+0x1e6>
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	2b0f      	cmp	r3, #15
 80121da:	d912      	bls.n	8012202 <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80121dc:	231f      	movs	r3, #31
 80121de:	18fb      	adds	r3, r7, r3
 80121e0:	7818      	ldrb	r0, [r3, #0]
 80121e2:	4b2d      	ldr	r3, [pc, #180]	; (8012298 <PrepareFrame+0x27c>)
 80121e4:	4a31      	ldr	r2, [pc, #196]	; (80122ac <PrepareFrame+0x290>)
 80121e6:	589b      	ldr	r3, [r3, r2]
 80121e8:	33cb      	adds	r3, #203	; 0xcb
 80121ea:	001a      	movs	r2, r3
 80121ec:	2314      	movs	r3, #20
 80121ee:	18fb      	adds	r3, r7, r3
 80121f0:	0019      	movs	r1, r3
 80121f2:	f002 fd3d 	bl	8014c70 <LoRaMacCommandsSerializeCmds>
 80121f6:	1e03      	subs	r3, r0, #0
 80121f8:	d001      	beq.n	80121fe <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80121fa:	2313      	movs	r3, #19
 80121fc:	e047      	b.n	801228e <PrepareFrame+0x272>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80121fe:	230a      	movs	r3, #10
 8012200:	e045      	b.n	801228e <PrepareFrame+0x272>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012202:	231f      	movs	r3, #31
 8012204:	18fb      	adds	r3, r7, r3
 8012206:	7818      	ldrb	r0, [r3, #0]
 8012208:	4b23      	ldr	r3, [pc, #140]	; (8012298 <PrepareFrame+0x27c>)
 801220a:	4a28      	ldr	r2, [pc, #160]	; (80122ac <PrepareFrame+0x290>)
 801220c:	589b      	ldr	r3, [r3, r2]
 801220e:	33cb      	adds	r3, #203	; 0xcb
 8012210:	001a      	movs	r2, r3
 8012212:	2314      	movs	r3, #20
 8012214:	18fb      	adds	r3, r7, r3
 8012216:	0019      	movs	r1, r3
 8012218:	f002 fd2a 	bl	8014c70 <LoRaMacCommandsSerializeCmds>
 801221c:	1e03      	subs	r3, r0, #0
 801221e:	d001      	beq.n	8012224 <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012220:	2313      	movs	r3, #19
 8012222:	e034      	b.n	801228e <PrepareFrame+0x272>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012224:	4a1c      	ldr	r2, [pc, #112]	; (8012298 <PrepareFrame+0x27c>)
 8012226:	2394      	movs	r3, #148	; 0x94
 8012228:	005b      	lsls	r3, r3, #1
 801222a:	2100      	movs	r1, #0
 801222c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 801222e:	4b1a      	ldr	r3, [pc, #104]	; (8012298 <PrepareFrame+0x27c>)
 8012230:	4a1e      	ldr	r2, [pc, #120]	; (80122ac <PrepareFrame+0x290>)
 8012232:	589b      	ldr	r3, [r3, r2]
 8012234:	33cb      	adds	r3, #203	; 0xcb
 8012236:	0019      	movs	r1, r3
 8012238:	4a17      	ldr	r2, [pc, #92]	; (8012298 <PrepareFrame+0x27c>)
 801223a:	2396      	movs	r3, #150	; 0x96
 801223c:	005b      	lsls	r3, r3, #1
 801223e:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	b2d9      	uxtb	r1, r3
 8012244:	4a14      	ldr	r2, [pc, #80]	; (8012298 <PrepareFrame+0x27c>)
 8012246:	2398      	movs	r3, #152	; 0x98
 8012248:	005b      	lsls	r3, r3, #1
 801224a:	54d1      	strb	r1, [r2, r3]
            break;
 801224c:	e01b      	b.n	8012286 <PrepareFrame+0x26a>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d01a      	beq.n	801228a <PrepareFrame+0x26e>
 8012254:	4b10      	ldr	r3, [pc, #64]	; (8012298 <PrepareFrame+0x27c>)
 8012256:	4a13      	ldr	r2, [pc, #76]	; (80122a4 <PrepareFrame+0x288>)
 8012258:	5c9b      	ldrb	r3, [r3, r2]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d015      	beq.n	801228a <PrepareFrame+0x26e>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801225e:	4816      	ldr	r0, [pc, #88]	; (80122b8 <PrepareFrame+0x29c>)
 8012260:	4b0d      	ldr	r3, [pc, #52]	; (8012298 <PrepareFrame+0x27c>)
 8012262:	4a10      	ldr	r2, [pc, #64]	; (80122a4 <PrepareFrame+0x288>)
 8012264:	5c9b      	ldrb	r3, [r3, r2]
 8012266:	b29a      	uxth	r2, r3
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	0019      	movs	r1, r3
 801226c:	f007 f842 	bl	80192f4 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012270:	4b09      	ldr	r3, [pc, #36]	; (8012298 <PrepareFrame+0x27c>)
 8012272:	4a0c      	ldr	r2, [pc, #48]	; (80122a4 <PrepareFrame+0x288>)
 8012274:	5c9b      	ldrb	r3, [r3, r2]
 8012276:	b29b      	uxth	r3, r3
 8012278:	3301      	adds	r3, #1
 801227a:	b29a      	uxth	r2, r3
 801227c:	4b06      	ldr	r3, [pc, #24]	; (8012298 <PrepareFrame+0x27c>)
 801227e:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012280:	e003      	b.n	801228a <PrepareFrame+0x26e>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012282:	2302      	movs	r3, #2
 8012284:	e003      	b.n	801228e <PrepareFrame+0x272>
            break;
 8012286:	46c0      	nop			; (mov r8, r8)
 8012288:	e000      	b.n	801228c <PrepareFrame+0x270>
            break;
 801228a:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 801228c:	2300      	movs	r3, #0
}
 801228e:	0018      	movs	r0, r3
 8012290:	46bd      	mov	sp, r7
 8012292:	b009      	add	sp, #36	; 0x24
 8012294:	bd90      	pop	{r4, r7, pc}
 8012296:	46c0      	nop			; (mov r8, r8)
 8012298:	20000548 	.word	0x20000548
 801229c:	00000414 	.word	0x00000414
 80122a0:	20000680 	.word	0x20000680
 80122a4:	00000237 	.word	0x00000237
 80122a8:	2000054a 	.word	0x2000054a
 80122ac:	00000484 	.word	0x00000484
 80122b0:	00000441 	.word	0x00000441
 80122b4:	20000660 	.word	0x20000660
 80122b8:	2000054b 	.word	0x2000054b

080122bc <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80122bc:	b5b0      	push	{r4, r5, r7, lr}
 80122be:	b08a      	sub	sp, #40	; 0x28
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	0002      	movs	r2, r0
 80122c4:	1dfb      	adds	r3, r7, #7
 80122c6:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122c8:	2327      	movs	r3, #39	; 0x27
 80122ca:	18fb      	adds	r3, r7, r3
 80122cc:	2203      	movs	r2, #3
 80122ce:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 10;
 80122d0:	240f      	movs	r4, #15
 80122d2:	193b      	adds	r3, r7, r4
 80122d4:	220a      	movs	r2, #10
 80122d6:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 80122d8:	2110      	movs	r1, #16
 80122da:	187b      	adds	r3, r7, r1
 80122dc:	1dfa      	adds	r2, r7, #7
 80122de:	7812      	ldrb	r2, [r2, #0]
 80122e0:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80122e2:	4b57      	ldr	r3, [pc, #348]	; (8012440 <SendFrameOnChannel+0x184>)
 80122e4:	4a57      	ldr	r2, [pc, #348]	; (8012444 <SendFrameOnChannel+0x188>)
 80122e6:	589b      	ldr	r3, [r3, r2]
 80122e8:	2285      	movs	r2, #133	; 0x85
 80122ea:	569a      	ldrsb	r2, [r3, r2]
 80122ec:	187b      	adds	r3, r7, r1
 80122ee:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80122f0:	4b53      	ldr	r3, [pc, #332]	; (8012440 <SendFrameOnChannel+0x184>)
 80122f2:	4a54      	ldr	r2, [pc, #336]	; (8012444 <SendFrameOnChannel+0x188>)
 80122f4:	589b      	ldr	r3, [r3, r2]
 80122f6:	2284      	movs	r2, #132	; 0x84
 80122f8:	569a      	ldrsb	r2, [r3, r2]
 80122fa:	187b      	adds	r3, r7, r1
 80122fc:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80122fe:	4b50      	ldr	r3, [pc, #320]	; (8012440 <SendFrameOnChannel+0x184>)
 8012300:	4a50      	ldr	r2, [pc, #320]	; (8012444 <SendFrameOnChannel+0x188>)
 8012302:	589b      	ldr	r3, [r3, r2]
 8012304:	22bc      	movs	r2, #188	; 0xbc
 8012306:	589a      	ldr	r2, [r3, r2]
 8012308:	187b      	adds	r3, r7, r1
 801230a:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 801230c:	4b4c      	ldr	r3, [pc, #304]	; (8012440 <SendFrameOnChannel+0x184>)
 801230e:	4a4d      	ldr	r2, [pc, #308]	; (8012444 <SendFrameOnChannel+0x188>)
 8012310:	589b      	ldr	r3, [r3, r2]
 8012312:	22c0      	movs	r2, #192	; 0xc0
 8012314:	589a      	ldr	r2, [r3, r2]
 8012316:	187b      	adds	r3, r7, r1
 8012318:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801231a:	4b49      	ldr	r3, [pc, #292]	; (8012440 <SendFrameOnChannel+0x184>)
 801231c:	881a      	ldrh	r2, [r3, #0]
 801231e:	187b      	adds	r3, r7, r1
 8012320:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012322:	4b47      	ldr	r3, [pc, #284]	; (8012440 <SendFrameOnChannel+0x184>)
 8012324:	4a47      	ldr	r2, [pc, #284]	; (8012444 <SendFrameOnChannel+0x188>)
 8012326:	589b      	ldr	r3, [r3, r2]
 8012328:	7818      	ldrb	r0, [r3, #0]
 801232a:	4b47      	ldr	r3, [pc, #284]	; (8012448 <SendFrameOnChannel+0x18c>)
 801232c:	193a      	adds	r2, r7, r4
 801232e:	1879      	adds	r1, r7, r1
 8012330:	f004 fc4e 	bl	8016bd0 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012334:	4b42      	ldr	r3, [pc, #264]	; (8012440 <SendFrameOnChannel+0x184>)
 8012336:	4a45      	ldr	r2, [pc, #276]	; (801244c <SendFrameOnChannel+0x190>)
 8012338:	2101      	movs	r1, #1
 801233a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801233c:	4b40      	ldr	r3, [pc, #256]	; (8012440 <SendFrameOnChannel+0x184>)
 801233e:	4a41      	ldr	r2, [pc, #260]	; (8012444 <SendFrameOnChannel+0x188>)
 8012340:	589b      	ldr	r3, [r3, r2]
 8012342:	2285      	movs	r2, #133	; 0x85
 8012344:	569b      	ldrsb	r3, [r3, r2]
 8012346:	b2d9      	uxtb	r1, r3
 8012348:	4b3d      	ldr	r3, [pc, #244]	; (8012440 <SendFrameOnChannel+0x184>)
 801234a:	4a41      	ldr	r2, [pc, #260]	; (8012450 <SendFrameOnChannel+0x194>)
 801234c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 801234e:	193b      	adds	r3, r7, r4
 8012350:	2100      	movs	r1, #0
 8012352:	5659      	ldrsb	r1, [r3, r1]
 8012354:	4b3a      	ldr	r3, [pc, #232]	; (8012440 <SendFrameOnChannel+0x184>)
 8012356:	4a3f      	ldr	r2, [pc, #252]	; (8012454 <SendFrameOnChannel+0x198>)
 8012358:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 801235a:	1dfb      	adds	r3, r7, #7
 801235c:	781a      	ldrb	r2, [r3, #0]
 801235e:	4b38      	ldr	r3, [pc, #224]	; (8012440 <SendFrameOnChannel+0x184>)
 8012360:	493d      	ldr	r1, [pc, #244]	; (8012458 <SendFrameOnChannel+0x19c>)
 8012362:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012364:	4a36      	ldr	r2, [pc, #216]	; (8012440 <SendFrameOnChannel+0x184>)
 8012366:	2383      	movs	r3, #131	; 0x83
 8012368:	00db      	lsls	r3, r3, #3
 801236a:	58d2      	ldr	r2, [r2, r3]
 801236c:	4b34      	ldr	r3, [pc, #208]	; (8012440 <SendFrameOnChannel+0x184>)
 801236e:	493b      	ldr	r1, [pc, #236]	; (801245c <SendFrameOnChannel+0x1a0>)
 8012370:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012372:	4a33      	ldr	r2, [pc, #204]	; (8012440 <SendFrameOnChannel+0x184>)
 8012374:	2383      	movs	r3, #131	; 0x83
 8012376:	00db      	lsls	r3, r3, #3
 8012378:	58d2      	ldr	r2, [r2, r3]
 801237a:	4b31      	ldr	r3, [pc, #196]	; (8012440 <SendFrameOnChannel+0x184>)
 801237c:	4938      	ldr	r1, [pc, #224]	; (8012460 <SendFrameOnChannel+0x1a4>)
 801237e:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012380:	f002 f9b0 	bl	80146e4 <LoRaMacClassBIsBeaconModeActive>
 8012384:	1e03      	subs	r3, r0, #0
 8012386:	d00d      	beq.n	80123a4 <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012388:	4a2d      	ldr	r2, [pc, #180]	; (8012440 <SendFrameOnChannel+0x184>)
 801238a:	2383      	movs	r3, #131	; 0x83
 801238c:	00db      	lsls	r3, r3, #3
 801238e:	58d3      	ldr	r3, [r2, r3]
 8012390:	0018      	movs	r0, r3
 8012392:	f002 fa0b 	bl	80147ac <LoRaMacClassBIsUplinkCollision>
 8012396:	0003      	movs	r3, r0
 8012398:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 801239a:	6a3b      	ldr	r3, [r7, #32]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d001      	beq.n	80123a4 <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80123a0:	2310      	movs	r3, #16
 80123a2:	e048      	b.n	8012436 <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80123a4:	4b26      	ldr	r3, [pc, #152]	; (8012440 <SendFrameOnChannel+0x184>)
 80123a6:	4a27      	ldr	r2, [pc, #156]	; (8012444 <SendFrameOnChannel+0x188>)
 80123a8:	589b      	ldr	r3, [r3, r2]
 80123aa:	227c      	movs	r2, #124	; 0x7c
 80123ac:	5c9b      	ldrb	r3, [r3, r2]
 80123ae:	2b01      	cmp	r3, #1
 80123b0:	d101      	bne.n	80123b6 <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80123b2:	f002 fa04 	bl	80147be <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80123b6:	f002 f9a5 	bl	8014704 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80123ba:	4b21      	ldr	r3, [pc, #132]	; (8012440 <SendFrameOnChannel+0x184>)
 80123bc:	4a21      	ldr	r2, [pc, #132]	; (8012444 <SendFrameOnChannel+0x188>)
 80123be:	589b      	ldr	r3, [r3, r2]
 80123c0:	2285      	movs	r2, #133	; 0x85
 80123c2:	569b      	ldrsb	r3, [r3, r2]
 80123c4:	b2da      	uxtb	r2, r3
 80123c6:	4b1e      	ldr	r3, [pc, #120]	; (8012440 <SendFrameOnChannel+0x184>)
 80123c8:	4926      	ldr	r1, [pc, #152]	; (8012464 <SendFrameOnChannel+0x1a8>)
 80123ca:	5c5b      	ldrb	r3, [r3, r1]
 80123cc:	2527      	movs	r5, #39	; 0x27
 80123ce:	197c      	adds	r4, r7, r5
 80123d0:	0019      	movs	r1, r3
 80123d2:	0010      	movs	r0, r2
 80123d4:	f7ff fbea 	bl	8011bac <SecureFrame>
 80123d8:	0003      	movs	r3, r0
 80123da:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80123dc:	197b      	adds	r3, r7, r5
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d002      	beq.n	80123ea <SendFrameOnChannel+0x12e>
    {
        return status;
 80123e4:	197b      	adds	r3, r7, r5
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	e025      	b.n	8012436 <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80123ea:	4a15      	ldr	r2, [pc, #84]	; (8012440 <SendFrameOnChannel+0x184>)
 80123ec:	23d0      	movs	r3, #208	; 0xd0
 80123ee:	009b      	lsls	r3, r3, #2
 80123f0:	58d3      	ldr	r3, [r2, r3]
 80123f2:	2202      	movs	r2, #2
 80123f4:	431a      	orrs	r2, r3
 80123f6:	0011      	movs	r1, r2
 80123f8:	4a11      	ldr	r2, [pc, #68]	; (8012440 <SendFrameOnChannel+0x184>)
 80123fa:	23d0      	movs	r3, #208	; 0xd0
 80123fc:	009b      	lsls	r3, r3, #2
 80123fe:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8012400:	4b0f      	ldr	r3, [pc, #60]	; (8012440 <SendFrameOnChannel+0x184>)
 8012402:	4a19      	ldr	r2, [pc, #100]	; (8012468 <SendFrameOnChannel+0x1ac>)
 8012404:	5c9b      	ldrb	r3, [r3, r2]
 8012406:	2201      	movs	r2, #1
 8012408:	4053      	eors	r3, r2
 801240a:	b2db      	uxtb	r3, r3
 801240c:	2b00      	cmp	r3, #0
 801240e:	d009      	beq.n	8012424 <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012410:	4a0b      	ldr	r2, [pc, #44]	; (8012440 <SendFrameOnChannel+0x184>)
 8012412:	2382      	movs	r3, #130	; 0x82
 8012414:	00db      	lsls	r3, r3, #3
 8012416:	5cd3      	ldrb	r3, [r2, r3]
 8012418:	3301      	adds	r3, #1
 801241a:	b2d9      	uxtb	r1, r3
 801241c:	4a08      	ldr	r2, [pc, #32]	; (8012440 <SendFrameOnChannel+0x184>)
 801241e:	2382      	movs	r3, #130	; 0x82
 8012420:	00db      	lsls	r3, r3, #3
 8012422:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012424:	4b11      	ldr	r3, [pc, #68]	; (801246c <SendFrameOnChannel+0x1b0>)
 8012426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012428:	4a05      	ldr	r2, [pc, #20]	; (8012440 <SendFrameOnChannel+0x184>)
 801242a:	8812      	ldrh	r2, [r2, #0]
 801242c:	b2d1      	uxtb	r1, r2
 801242e:	4a10      	ldr	r2, [pc, #64]	; (8012470 <SendFrameOnChannel+0x1b4>)
 8012430:	0010      	movs	r0, r2
 8012432:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012434:	2300      	movs	r3, #0
}
 8012436:	0018      	movs	r0, r3
 8012438:	46bd      	mov	sp, r7
 801243a:	b00a      	add	sp, #40	; 0x28
 801243c:	bdb0      	pop	{r4, r5, r7, pc}
 801243e:	46c0      	nop			; (mov r8, r8)
 8012440:	20000548 	.word	0x20000548
 8012444:	00000484 	.word	0x00000484
 8012448:	20000960 	.word	0x20000960
 801244c:	0000043d 	.word	0x0000043d
 8012450:	0000043e 	.word	0x0000043e
 8012454:	0000043f 	.word	0x0000043f
 8012458:	0000044c 	.word	0x0000044c
 801245c:	00000444 	.word	0x00000444
 8012460:	00000454 	.word	0x00000454
 8012464:	00000415 	.word	0x00000415
 8012468:	00000414 	.word	0x00000414
 801246c:	0801f0b4 	.word	0x0801f0b4
 8012470:	2000054a 	.word	0x2000054a

08012474 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b086      	sub	sp, #24
 8012478:	af00      	add	r7, sp, #0
 801247a:	0002      	movs	r2, r0
 801247c:	1dbb      	adds	r3, r7, #6
 801247e:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8012480:	4b1f      	ldr	r3, [pc, #124]	; (8012500 <SetTxContinuousWave+0x8c>)
 8012482:	4a20      	ldr	r2, [pc, #128]	; (8012504 <SetTxContinuousWave+0x90>)
 8012484:	5c9a      	ldrb	r2, [r3, r2]
 8012486:	2108      	movs	r1, #8
 8012488:	187b      	adds	r3, r7, r1
 801248a:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801248c:	4b1c      	ldr	r3, [pc, #112]	; (8012500 <SetTxContinuousWave+0x8c>)
 801248e:	4a1e      	ldr	r2, [pc, #120]	; (8012508 <SetTxContinuousWave+0x94>)
 8012490:	589b      	ldr	r3, [r3, r2]
 8012492:	2285      	movs	r2, #133	; 0x85
 8012494:	569a      	ldrsb	r2, [r3, r2]
 8012496:	187b      	adds	r3, r7, r1
 8012498:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801249a:	4b19      	ldr	r3, [pc, #100]	; (8012500 <SetTxContinuousWave+0x8c>)
 801249c:	4a1a      	ldr	r2, [pc, #104]	; (8012508 <SetTxContinuousWave+0x94>)
 801249e:	589b      	ldr	r3, [r3, r2]
 80124a0:	2284      	movs	r2, #132	; 0x84
 80124a2:	569a      	ldrsb	r2, [r3, r2]
 80124a4:	187b      	adds	r3, r7, r1
 80124a6:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80124a8:	4b15      	ldr	r3, [pc, #84]	; (8012500 <SetTxContinuousWave+0x8c>)
 80124aa:	4a17      	ldr	r2, [pc, #92]	; (8012508 <SetTxContinuousWave+0x94>)
 80124ac:	589b      	ldr	r3, [r3, r2]
 80124ae:	22bc      	movs	r2, #188	; 0xbc
 80124b0:	589a      	ldr	r2, [r3, r2]
 80124b2:	187b      	adds	r3, r7, r1
 80124b4:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80124b6:	4b12      	ldr	r3, [pc, #72]	; (8012500 <SetTxContinuousWave+0x8c>)
 80124b8:	4a13      	ldr	r2, [pc, #76]	; (8012508 <SetTxContinuousWave+0x94>)
 80124ba:	589b      	ldr	r3, [r3, r2]
 80124bc:	22c0      	movs	r2, #192	; 0xc0
 80124be:	589a      	ldr	r2, [r3, r2]
 80124c0:	187b      	adds	r3, r7, r1
 80124c2:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 80124c4:	187b      	adds	r3, r7, r1
 80124c6:	1dba      	adds	r2, r7, #6
 80124c8:	8812      	ldrh	r2, [r2, #0]
 80124ca:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 80124cc:	4b0c      	ldr	r3, [pc, #48]	; (8012500 <SetTxContinuousWave+0x8c>)
 80124ce:	4a0e      	ldr	r2, [pc, #56]	; (8012508 <SetTxContinuousWave+0x94>)
 80124d0:	589b      	ldr	r3, [r3, r2]
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	187a      	adds	r2, r7, r1
 80124d6:	0011      	movs	r1, r2
 80124d8:	0018      	movs	r0, r3
 80124da:	f004 fc48 	bl	8016d6e <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80124de:	4a08      	ldr	r2, [pc, #32]	; (8012500 <SetTxContinuousWave+0x8c>)
 80124e0:	23d0      	movs	r3, #208	; 0xd0
 80124e2:	009b      	lsls	r3, r3, #2
 80124e4:	58d3      	ldr	r3, [r2, r3]
 80124e6:	2202      	movs	r2, #2
 80124e8:	431a      	orrs	r2, r3
 80124ea:	0011      	movs	r1, r2
 80124ec:	4a04      	ldr	r2, [pc, #16]	; (8012500 <SetTxContinuousWave+0x8c>)
 80124ee:	23d0      	movs	r3, #208	; 0xd0
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 80124f4:	2300      	movs	r3, #0
}
 80124f6:	0018      	movs	r0, r3
 80124f8:	46bd      	mov	sp, r7
 80124fa:	b006      	add	sp, #24
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	46c0      	nop			; (mov r8, r8)
 8012500:	20000548 	.word	0x20000548
 8012504:	00000415 	.word	0x00000415
 8012508:	00000484 	.word	0x00000484

0801250c <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b082      	sub	sp, #8
 8012510:	af00      	add	r7, sp, #0
 8012512:	6039      	str	r1, [r7, #0]
 8012514:	0011      	movs	r1, r2
 8012516:	1dbb      	adds	r3, r7, #6
 8012518:	1c02      	adds	r2, r0, #0
 801251a:	801a      	strh	r2, [r3, #0]
 801251c:	1d7b      	adds	r3, r7, #5
 801251e:	1c0a      	adds	r2, r1, #0
 8012520:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012522:	4b0c      	ldr	r3, [pc, #48]	; (8012554 <SetTxContinuousWave1+0x48>)
 8012524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012526:	1d7a      	adds	r2, r7, #5
 8012528:	2100      	movs	r1, #0
 801252a:	5651      	ldrsb	r1, [r2, r1]
 801252c:	1dba      	adds	r2, r7, #6
 801252e:	8812      	ldrh	r2, [r2, #0]
 8012530:	6838      	ldr	r0, [r7, #0]
 8012532:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012534:	4a08      	ldr	r2, [pc, #32]	; (8012558 <SetTxContinuousWave1+0x4c>)
 8012536:	23d0      	movs	r3, #208	; 0xd0
 8012538:	009b      	lsls	r3, r3, #2
 801253a:	58d3      	ldr	r3, [r2, r3]
 801253c:	2202      	movs	r2, #2
 801253e:	431a      	orrs	r2, r3
 8012540:	0011      	movs	r1, r2
 8012542:	4a05      	ldr	r2, [pc, #20]	; (8012558 <SetTxContinuousWave1+0x4c>)
 8012544:	23d0      	movs	r3, #208	; 0xd0
 8012546:	009b      	lsls	r3, r3, #2
 8012548:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 801254a:	2300      	movs	r3, #0
}
 801254c:	0018      	movs	r0, r3
 801254e:	46bd      	mov	sp, r7
 8012550:	b002      	add	sp, #8
 8012552:	bd80      	pop	{r7, pc}
 8012554:	0801f0b4 	.word	0x0801f0b4
 8012558:	20000548 	.word	0x20000548

0801255c <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8012562:	4b20      	ldr	r3, [pc, #128]	; (80125e4 <GetCtxs+0x88>)
 8012564:	4a20      	ldr	r2, [pc, #128]	; (80125e8 <GetCtxs+0x8c>)
 8012566:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8012568:	4b1e      	ldr	r3, [pc, #120]	; (80125e4 <GetCtxs+0x88>)
 801256a:	22b6      	movs	r2, #182	; 0xb6
 801256c:	0052      	lsls	r2, r2, #1
 801256e:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8012570:	4b1e      	ldr	r3, [pc, #120]	; (80125ec <GetCtxs+0x90>)
 8012572:	0018      	movs	r0, r3
 8012574:	f003 faa6 	bl	8015ac4 <LoRaMacCryptoGetNvmCtx>
 8012578:	0002      	movs	r2, r0
 801257a:	4b1a      	ldr	r3, [pc, #104]	; (80125e4 <GetCtxs+0x88>)
 801257c:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 801257e:	2300      	movs	r3, #0
 8012580:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8012582:	4b1b      	ldr	r3, [pc, #108]	; (80125f0 <GetCtxs+0x94>)
 8012584:	4a1b      	ldr	r2, [pc, #108]	; (80125f4 <GetCtxs+0x98>)
 8012586:	589b      	ldr	r3, [r3, r2]
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	1d3a      	adds	r2, r7, #4
 801258c:	0011      	movs	r1, r2
 801258e:	0018      	movs	r0, r3
 8012590:	f004 fa82 	bl	8016a98 <RegionGetNvmCtx>
 8012594:	0002      	movs	r2, r0
 8012596:	4b13      	ldr	r3, [pc, #76]	; (80125e4 <GetCtxs+0x88>)
 8012598:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 801259a:	687a      	ldr	r2, [r7, #4]
 801259c:	4b11      	ldr	r3, [pc, #68]	; (80125e4 <GetCtxs+0x88>)
 801259e:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 80125a0:	4b15      	ldr	r3, [pc, #84]	; (80125f8 <GetCtxs+0x9c>)
 80125a2:	0018      	movs	r0, r3
 80125a4:	f7fb f8a4 	bl	800d6f0 <SecureElementGetNvmCtx>
 80125a8:	0002      	movs	r2, r0
 80125aa:	4b0e      	ldr	r3, [pc, #56]	; (80125e4 <GetCtxs+0x88>)
 80125ac:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 80125ae:	4b13      	ldr	r3, [pc, #76]	; (80125fc <GetCtxs+0xa0>)
 80125b0:	0018      	movs	r0, r3
 80125b2:	f002 fa63 	bl	8014a7c <LoRaMacCommandsGetNvmCtx>
 80125b6:	0002      	movs	r2, r0
 80125b8:	4b0a      	ldr	r3, [pc, #40]	; (80125e4 <GetCtxs+0x88>)
 80125ba:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 80125bc:	4b10      	ldr	r3, [pc, #64]	; (8012600 <GetCtxs+0xa4>)
 80125be:	0018      	movs	r0, r3
 80125c0:	f002 f82a 	bl	8014618 <LoRaMacClassBGetNvmCtx>
 80125c4:	0002      	movs	r2, r0
 80125c6:	4b07      	ldr	r3, [pc, #28]	; (80125e4 <GetCtxs+0x88>)
 80125c8:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 80125ca:	4b0e      	ldr	r3, [pc, #56]	; (8012604 <GetCtxs+0xa8>)
 80125cc:	0018      	movs	r0, r3
 80125ce:	f002 fcf5 	bl	8014fbc <LoRaMacConfirmQueueGetNvmCtx>
 80125d2:	0002      	movs	r2, r0
 80125d4:	4b03      	ldr	r3, [pc, #12]	; (80125e4 <GetCtxs+0x88>)
 80125d6:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 80125d8:	4b02      	ldr	r3, [pc, #8]	; (80125e4 <GetCtxs+0x88>)
}
 80125da:	0018      	movs	r0, r3
 80125dc:	46bd      	mov	sp, r7
 80125de:	b002      	add	sp, #8
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	46c0      	nop			; (mov r8, r8)
 80125e4:	20000b40 	.word	0x20000b40
 80125e8:	200009d4 	.word	0x200009d4
 80125ec:	20000b54 	.word	0x20000b54
 80125f0:	20000548 	.word	0x20000548
 80125f4:	00000484 	.word	0x00000484
 80125f8:	20000b5c 	.word	0x20000b5c
 80125fc:	20000b64 	.word	0x20000b64
 8012600:	20000b6c 	.word	0x20000b6c
 8012604:	20000b74 	.word	0x20000b74

08012608 <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d101      	bne.n	801261a <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012616:	2303      	movs	r3, #3
 8012618:	e086      	b.n	8012728 <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801261a:	4a45      	ldr	r2, [pc, #276]	; (8012730 <RestoreCtxs+0x128>)
 801261c:	23d0      	movs	r3, #208	; 0xd0
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	58d3      	ldr	r3, [r2, r3]
 8012622:	2b01      	cmp	r3, #1
 8012624:	d001      	beq.n	801262a <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8012626:	2301      	movs	r3, #1
 8012628:	e07e      	b.n	8012728 <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d008      	beq.n	8012644 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6819      	ldr	r1, [r3, #0]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	b29a      	uxth	r2, r3
 801263c:	4b3d      	ldr	r3, [pc, #244]	; (8012734 <RestoreCtxs+0x12c>)
 801263e:	0018      	movs	r0, r3
 8012640:	f006 fe58 	bl	80192f4 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8012644:	2108      	movs	r1, #8
 8012646:	187b      	adds	r3, r7, r1
 8012648:	2203      	movs	r2, #3
 801264a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	689a      	ldr	r2, [r3, #8]
 8012650:	187b      	adds	r3, r7, r1
 8012652:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012654:	4b36      	ldr	r3, [pc, #216]	; (8012730 <RestoreCtxs+0x128>)
 8012656:	4a38      	ldr	r2, [pc, #224]	; (8012738 <RestoreCtxs+0x130>)
 8012658:	589b      	ldr	r3, [r3, r2]
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	187a      	adds	r2, r7, r1
 801265e:	0011      	movs	r1, r2
 8012660:	0018      	movs	r0, r3
 8012662:	f004 fa04 	bl	8016a6e <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012666:	4b32      	ldr	r3, [pc, #200]	; (8012730 <RestoreCtxs+0x128>)
 8012668:	4a34      	ldr	r2, [pc, #208]	; (801273c <RestoreCtxs+0x134>)
 801266a:	5c99      	ldrb	r1, [r3, r2]
 801266c:	4a30      	ldr	r2, [pc, #192]	; (8012730 <RestoreCtxs+0x128>)
 801266e:	23f8      	movs	r3, #248	; 0xf8
 8012670:	009b      	lsls	r3, r3, #2
 8012672:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8012674:	4b2e      	ldr	r3, [pc, #184]	; (8012730 <RestoreCtxs+0x128>)
 8012676:	4a30      	ldr	r2, [pc, #192]	; (8012738 <RestoreCtxs+0x130>)
 8012678:	589b      	ldr	r3, [r3, r2]
 801267a:	22b0      	movs	r2, #176	; 0xb0
 801267c:	5899      	ldr	r1, [r3, r2]
 801267e:	4a2c      	ldr	r2, [pc, #176]	; (8012730 <RestoreCtxs+0x128>)
 8012680:	23f9      	movs	r3, #249	; 0xf9
 8012682:	009b      	lsls	r3, r3, #2
 8012684:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8012686:	4b2a      	ldr	r3, [pc, #168]	; (8012730 <RestoreCtxs+0x128>)
 8012688:	4a2b      	ldr	r2, [pc, #172]	; (8012738 <RestoreCtxs+0x130>)
 801268a:	589b      	ldr	r3, [r3, r2]
 801268c:	22b9      	movs	r2, #185	; 0xb9
 801268e:	5c99      	ldrb	r1, [r3, r2]
 8012690:	4a27      	ldr	r2, [pc, #156]	; (8012730 <RestoreCtxs+0x128>)
 8012692:	23fc      	movs	r3, #252	; 0xfc
 8012694:	009b      	lsls	r3, r3, #2
 8012696:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8012698:	4b25      	ldr	r3, [pc, #148]	; (8012730 <RestoreCtxs+0x128>)
 801269a:	4a27      	ldr	r2, [pc, #156]	; (8012738 <RestoreCtxs+0x130>)
 801269c:	589b      	ldr	r3, [r3, r2]
 801269e:	22ca      	movs	r2, #202	; 0xca
 80126a0:	5c99      	ldrb	r1, [r3, r2]
 80126a2:	4b23      	ldr	r3, [pc, #140]	; (8012730 <RestoreCtxs+0x128>)
 80126a4:	4a26      	ldr	r2, [pc, #152]	; (8012740 <RestoreCtxs+0x138>)
 80126a6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80126a8:	4b21      	ldr	r3, [pc, #132]	; (8012730 <RestoreCtxs+0x128>)
 80126aa:	4a26      	ldr	r2, [pc, #152]	; (8012744 <RestoreCtxs+0x13c>)
 80126ac:	2101      	movs	r1, #1
 80126ae:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80126b0:	4b1f      	ldr	r3, [pc, #124]	; (8012730 <RestoreCtxs+0x128>)
 80126b2:	4a25      	ldr	r2, [pc, #148]	; (8012748 <RestoreCtxs+0x140>)
 80126b4:	2102      	movs	r1, #2
 80126b6:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	699b      	ldr	r3, [r3, #24]
 80126bc:	0018      	movs	r0, r3
 80126be:	f7fb f801 	bl	800d6c4 <SecureElementRestoreNvmCtx>
 80126c2:	1e03      	subs	r3, r0, #0
 80126c4:	d001      	beq.n	80126ca <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80126c6:	2311      	movs	r3, #17
 80126c8:	e02e      	b.n	8012728 <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	691b      	ldr	r3, [r3, #16]
 80126ce:	0018      	movs	r0, r3
 80126d0:	f003 f9e2 	bl	8015a98 <LoRaMacCryptoRestoreNvmCtx>
 80126d4:	1e03      	subs	r3, r0, #0
 80126d6:	d001      	beq.n	80126dc <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80126d8:	2311      	movs	r3, #17
 80126da:	e025      	b.n	8012728 <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6a1b      	ldr	r3, [r3, #32]
 80126e0:	0018      	movs	r0, r3
 80126e2:	f002 f9b5 	bl	8014a50 <LoRaMacCommandsRestoreNvmCtx>
 80126e6:	1e03      	subs	r3, r0, #0
 80126e8:	d001      	beq.n	80126ee <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80126ea:	2313      	movs	r3, #19
 80126ec:	e01c      	b.n	8012728 <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126f2:	0018      	movs	r0, r3
 80126f4:	f001 ff87 	bl	8014606 <LoRaMacClassBRestoreNvmCtx>
 80126f8:	0003      	movs	r3, r0
 80126fa:	001a      	movs	r2, r3
 80126fc:	2301      	movs	r3, #1
 80126fe:	4053      	eors	r3, r2
 8012700:	b2db      	uxtb	r3, r3
 8012702:	2b00      	cmp	r3, #0
 8012704:	d001      	beq.n	801270a <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8012706:	2314      	movs	r3, #20
 8012708:	e00e      	b.n	8012728 <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801270e:	0018      	movs	r0, r3
 8012710:	f002 fc3e 	bl	8014f90 <LoRaMacConfirmQueueRestoreNvmCtx>
 8012714:	0003      	movs	r3, r0
 8012716:	001a      	movs	r2, r3
 8012718:	2301      	movs	r3, #1
 801271a:	4053      	eors	r3, r2
 801271c:	b2db      	uxtb	r3, r3
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8012722:	2315      	movs	r3, #21
 8012724:	e000      	b.n	8012728 <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 8012726:	2300      	movs	r3, #0
}
 8012728:	0018      	movs	r0, r3
 801272a:	46bd      	mov	sp, r7
 801272c:	b004      	add	sp, #16
 801272e:	bd80      	pop	{r7, pc}
 8012730:	20000548 	.word	0x20000548
 8012734:	200009d4 	.word	0x200009d4
 8012738:	00000484 	.word	0x00000484
 801273c:	00000415 	.word	0x00000415
 8012740:	000003f1 	.word	0x000003f1
 8012744:	000003f2 	.word	0x000003f2
 8012748:	000003f3 	.word	0x000003f3

0801274c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b082      	sub	sp, #8
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
 8012754:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d002      	beq.n	8012762 <DetermineFrameType+0x16>
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d101      	bne.n	8012766 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012762:	2303      	movs	r3, #3
 8012764:	e03b      	b.n	80127de <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	7b1b      	ldrb	r3, [r3, #12]
 801276a:	220f      	movs	r2, #15
 801276c:	4013      	ands	r3, r2
 801276e:	b2db      	uxtb	r3, r3
 8012770:	2b00      	cmp	r3, #0
 8012772:	d008      	beq.n	8012786 <DetermineFrameType+0x3a>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2220      	movs	r2, #32
 8012778:	5c9b      	ldrb	r3, [r3, r2]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d003      	beq.n	8012786 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	2200      	movs	r2, #0
 8012782:	701a      	strb	r2, [r3, #0]
 8012784:	e02a      	b.n	80127dc <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2228      	movs	r2, #40	; 0x28
 801278a:	5c9b      	ldrb	r3, [r3, r2]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d103      	bne.n	8012798 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	2201      	movs	r2, #1
 8012794:	701a      	strb	r2, [r3, #0]
 8012796:	e021      	b.n	80127dc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	7b1b      	ldrb	r3, [r3, #12]
 801279c:	220f      	movs	r2, #15
 801279e:	4013      	ands	r3, r2
 80127a0:	b2db      	uxtb	r3, r3
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d108      	bne.n	80127b8 <DetermineFrameType+0x6c>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2220      	movs	r2, #32
 80127aa:	5c9b      	ldrb	r3, [r3, r2]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d103      	bne.n	80127b8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	2202      	movs	r2, #2
 80127b4:	701a      	strb	r2, [r3, #0]
 80127b6:	e011      	b.n	80127dc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	7b1b      	ldrb	r3, [r3, #12]
 80127bc:	220f      	movs	r2, #15
 80127be:	4013      	ands	r3, r2
 80127c0:	b2db      	uxtb	r3, r3
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d108      	bne.n	80127d8 <DetermineFrameType+0x8c>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2220      	movs	r2, #32
 80127ca:	5c9b      	ldrb	r3, [r3, r2]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d003      	beq.n	80127d8 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	2203      	movs	r2, #3
 80127d4:	701a      	strb	r2, [r3, #0]
 80127d6:	e001      	b.n	80127dc <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80127d8:	2317      	movs	r3, #23
 80127da:	e000      	b.n	80127de <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80127dc:	2300      	movs	r3, #0
}
 80127de:	0018      	movs	r0, r3
 80127e0:	46bd      	mov	sp, r7
 80127e2:	b002      	add	sp, #8
 80127e4:	bd80      	pop	{r7, pc}
	...

080127e8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80127ec:	4a14      	ldr	r2, [pc, #80]	; (8012840 <CheckRetransUnconfirmedUplink+0x58>)
 80127ee:	2382      	movs	r3, #130	; 0x82
 80127f0:	00db      	lsls	r3, r3, #3
 80127f2:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 80127f4:	4b12      	ldr	r3, [pc, #72]	; (8012840 <CheckRetransUnconfirmedUplink+0x58>)
 80127f6:	4913      	ldr	r1, [pc, #76]	; (8012844 <CheckRetransUnconfirmedUplink+0x5c>)
 80127f8:	585b      	ldr	r3, [r3, r1]
 80127fa:	21a4      	movs	r1, #164	; 0xa4
 80127fc:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 80127fe:	429a      	cmp	r2, r3
 8012800:	d301      	bcc.n	8012806 <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 8012802:	2301      	movs	r3, #1
 8012804:	e018      	b.n	8012838 <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012806:	4b0e      	ldr	r3, [pc, #56]	; (8012840 <CheckRetransUnconfirmedUplink+0x58>)
 8012808:	4a0f      	ldr	r2, [pc, #60]	; (8012848 <CheckRetransUnconfirmedUplink+0x60>)
 801280a:	5c9b      	ldrb	r3, [r3, r2]
 801280c:	2202      	movs	r2, #2
 801280e:	4013      	ands	r3, r2
 8012810:	b2db      	uxtb	r3, r3
 8012812:	2b00      	cmp	r3, #0
 8012814:	d00f      	beq.n	8012836 <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8012816:	4b0a      	ldr	r3, [pc, #40]	; (8012840 <CheckRetransUnconfirmedUplink+0x58>)
 8012818:	4a0a      	ldr	r2, [pc, #40]	; (8012844 <CheckRetransUnconfirmedUplink+0x5c>)
 801281a:	589b      	ldr	r3, [r3, r2]
 801281c:	227c      	movs	r2, #124	; 0x7c
 801281e:	5c9b      	ldrb	r3, [r3, r2]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d101      	bne.n	8012828 <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 8012824:	2301      	movs	r3, #1
 8012826:	e007      	b.n	8012838 <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8012828:	4b05      	ldr	r3, [pc, #20]	; (8012840 <CheckRetransUnconfirmedUplink+0x58>)
 801282a:	4a08      	ldr	r2, [pc, #32]	; (801284c <CheckRetransUnconfirmedUplink+0x64>)
 801282c:	5c9b      	ldrb	r3, [r3, r2]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d101      	bne.n	8012836 <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 8012832:	2301      	movs	r3, #1
 8012834:	e000      	b.n	8012838 <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 8012836:	2300      	movs	r3, #0
}
 8012838:	0018      	movs	r0, r3
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}
 801283e:	46c0      	nop			; (mov r8, r8)
 8012840:	20000548 	.word	0x20000548
 8012844:	00000484 	.word	0x00000484
 8012848:	00000481 	.word	0x00000481
 801284c:	0000042d 	.word	0x0000042d

08012850 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012850:	b580      	push	{r7, lr}
 8012852:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012854:	4b0e      	ldr	r3, [pc, #56]	; (8012890 <CheckRetransConfirmedUplink+0x40>)
 8012856:	4a0f      	ldr	r2, [pc, #60]	; (8012894 <CheckRetransConfirmedUplink+0x44>)
 8012858:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 801285a:	4b0d      	ldr	r3, [pc, #52]	; (8012890 <CheckRetransConfirmedUplink+0x40>)
 801285c:	490e      	ldr	r1, [pc, #56]	; (8012898 <CheckRetransConfirmedUplink+0x48>)
 801285e:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012860:	429a      	cmp	r2, r3
 8012862:	d301      	bcc.n	8012868 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8012864:	2301      	movs	r3, #1
 8012866:	e010      	b.n	801288a <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012868:	4b09      	ldr	r3, [pc, #36]	; (8012890 <CheckRetransConfirmedUplink+0x40>)
 801286a:	4a0c      	ldr	r2, [pc, #48]	; (801289c <CheckRetransConfirmedUplink+0x4c>)
 801286c:	5c9b      	ldrb	r3, [r3, r2]
 801286e:	2202      	movs	r2, #2
 8012870:	4013      	ands	r3, r2
 8012872:	b2db      	uxtb	r3, r3
 8012874:	2b00      	cmp	r3, #0
 8012876:	d007      	beq.n	8012888 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012878:	4a05      	ldr	r2, [pc, #20]	; (8012890 <CheckRetransConfirmedUplink+0x40>)
 801287a:	2388      	movs	r3, #136	; 0x88
 801287c:	00db      	lsls	r3, r3, #3
 801287e:	5cd3      	ldrb	r3, [r2, r3]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d001      	beq.n	8012888 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8012884:	2301      	movs	r3, #1
 8012886:	e000      	b.n	801288a <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8012888:	2300      	movs	r3, #0
}
 801288a:	0018      	movs	r0, r3
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	20000548 	.word	0x20000548
 8012894:	00000412 	.word	0x00000412
 8012898:	00000411 	.word	0x00000411
 801289c:	00000481 	.word	0x00000481

080128a0 <StopRetransmission>:

static bool StopRetransmission( void )
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80128a4:	4b1e      	ldr	r3, [pc, #120]	; (8012920 <StopRetransmission+0x80>)
 80128a6:	4a1f      	ldr	r2, [pc, #124]	; (8012924 <StopRetransmission+0x84>)
 80128a8:	5c9b      	ldrb	r3, [r3, r2]
 80128aa:	2202      	movs	r2, #2
 80128ac:	4013      	ands	r3, r2
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d009      	beq.n	80128c8 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 80128b4:	4b1a      	ldr	r3, [pc, #104]	; (8012920 <StopRetransmission+0x80>)
 80128b6:	4a1c      	ldr	r2, [pc, #112]	; (8012928 <StopRetransmission+0x88>)
 80128b8:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d013      	beq.n	80128e6 <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 80128be:	4b18      	ldr	r3, [pc, #96]	; (8012920 <StopRetransmission+0x80>)
 80128c0:	4a19      	ldr	r2, [pc, #100]	; (8012928 <StopRetransmission+0x88>)
 80128c2:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 80128c4:	2b01      	cmp	r3, #1
 80128c6:	d00e      	beq.n	80128e6 <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 80128c8:	4b15      	ldr	r3, [pc, #84]	; (8012920 <StopRetransmission+0x80>)
 80128ca:	4a18      	ldr	r2, [pc, #96]	; (801292c <StopRetransmission+0x8c>)
 80128cc:	589b      	ldr	r3, [r3, r2]
 80128ce:	227e      	movs	r2, #126	; 0x7e
 80128d0:	5c9b      	ldrb	r3, [r3, r2]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d007      	beq.n	80128e6 <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 80128d6:	4b12      	ldr	r3, [pc, #72]	; (8012920 <StopRetransmission+0x80>)
 80128d8:	4a14      	ldr	r2, [pc, #80]	; (801292c <StopRetransmission+0x8c>)
 80128da:	589b      	ldr	r3, [r3, r2]
 80128dc:	2280      	movs	r2, #128	; 0x80
 80128de:	589a      	ldr	r2, [r3, r2]
 80128e0:	3201      	adds	r2, #1
 80128e2:	2180      	movs	r1, #128	; 0x80
 80128e4:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80128e6:	4a0e      	ldr	r2, [pc, #56]	; (8012920 <StopRetransmission+0x80>)
 80128e8:	2382      	movs	r3, #130	; 0x82
 80128ea:	00db      	lsls	r3, r3, #3
 80128ec:	2100      	movs	r1, #0
 80128ee:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 80128f0:	4b0b      	ldr	r3, [pc, #44]	; (8012920 <StopRetransmission+0x80>)
 80128f2:	4a0f      	ldr	r2, [pc, #60]	; (8012930 <StopRetransmission+0x90>)
 80128f4:	2100      	movs	r1, #0
 80128f6:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 80128f8:	4b09      	ldr	r3, [pc, #36]	; (8012920 <StopRetransmission+0x80>)
 80128fa:	4a0e      	ldr	r2, [pc, #56]	; (8012934 <StopRetransmission+0x94>)
 80128fc:	2100      	movs	r1, #0
 80128fe:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012900:	4a07      	ldr	r2, [pc, #28]	; (8012920 <StopRetransmission+0x80>)
 8012902:	23d0      	movs	r3, #208	; 0xd0
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	58d3      	ldr	r3, [r2, r3]
 8012908:	2202      	movs	r2, #2
 801290a:	4393      	bics	r3, r2
 801290c:	0019      	movs	r1, r3
 801290e:	4a04      	ldr	r2, [pc, #16]	; (8012920 <StopRetransmission+0x80>)
 8012910:	23d0      	movs	r3, #208	; 0xd0
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	50d1      	str	r1, [r2, r3]

    return true;
 8012916:	2301      	movs	r3, #1
}
 8012918:	0018      	movs	r0, r3
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	46c0      	nop			; (mov r8, r8)
 8012920:	20000548 	.word	0x20000548
 8012924:	00000481 	.word	0x00000481
 8012928:	0000042d 	.word	0x0000042d
 801292c:	00000484 	.word	0x00000484
 8012930:	00000414 	.word	0x00000414
 8012934:	00000413 	.word	0x00000413

08012938 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801293e:	4b21      	ldr	r3, [pc, #132]	; (80129c4 <AckTimeoutRetriesProcess+0x8c>)
 8012940:	4a21      	ldr	r2, [pc, #132]	; (80129c8 <AckTimeoutRetriesProcess+0x90>)
 8012942:	5c9a      	ldrb	r2, [r3, r2]
 8012944:	4b1f      	ldr	r3, [pc, #124]	; (80129c4 <AckTimeoutRetriesProcess+0x8c>)
 8012946:	4921      	ldr	r1, [pc, #132]	; (80129cc <AckTimeoutRetriesProcess+0x94>)
 8012948:	5c5b      	ldrb	r3, [r3, r1]
 801294a:	429a      	cmp	r2, r3
 801294c:	d236      	bcs.n	80129bc <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801294e:	4b1d      	ldr	r3, [pc, #116]	; (80129c4 <AckTimeoutRetriesProcess+0x8c>)
 8012950:	4a1d      	ldr	r2, [pc, #116]	; (80129c8 <AckTimeoutRetriesProcess+0x90>)
 8012952:	5c9b      	ldrb	r3, [r3, r2]
 8012954:	3301      	adds	r3, #1
 8012956:	b2d9      	uxtb	r1, r3
 8012958:	4b1a      	ldr	r3, [pc, #104]	; (80129c4 <AckTimeoutRetriesProcess+0x8c>)
 801295a:	4a1b      	ldr	r2, [pc, #108]	; (80129c8 <AckTimeoutRetriesProcess+0x90>)
 801295c:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801295e:	4b19      	ldr	r3, [pc, #100]	; (80129c4 <AckTimeoutRetriesProcess+0x8c>)
 8012960:	4a19      	ldr	r2, [pc, #100]	; (80129c8 <AckTimeoutRetriesProcess+0x90>)
 8012962:	5c9b      	ldrb	r3, [r3, r2]
 8012964:	2201      	movs	r2, #1
 8012966:	4013      	ands	r3, r2
 8012968:	b2db      	uxtb	r3, r3
 801296a:	2b00      	cmp	r3, #0
 801296c:	d026      	beq.n	80129bc <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801296e:	2108      	movs	r1, #8
 8012970:	187b      	adds	r3, r7, r1
 8012972:	2222      	movs	r2, #34	; 0x22
 8012974:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012976:	4b13      	ldr	r3, [pc, #76]	; (80129c4 <AckTimeoutRetriesProcess+0x8c>)
 8012978:	4a15      	ldr	r2, [pc, #84]	; (80129d0 <AckTimeoutRetriesProcess+0x98>)
 801297a:	589b      	ldr	r3, [r3, r2]
 801297c:	22b8      	movs	r2, #184	; 0xb8
 801297e:	5c9a      	ldrb	r2, [r3, r2]
 8012980:	187b      	adds	r3, r7, r1
 8012982:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012984:	4b0f      	ldr	r3, [pc, #60]	; (80129c4 <AckTimeoutRetriesProcess+0x8c>)
 8012986:	4a12      	ldr	r2, [pc, #72]	; (80129d0 <AckTimeoutRetriesProcess+0x98>)
 8012988:	589b      	ldr	r3, [r3, r2]
 801298a:	2285      	movs	r2, #133	; 0x85
 801298c:	569a      	ldrsb	r2, [r3, r2]
 801298e:	187b      	adds	r3, r7, r1
 8012990:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012992:	4b0c      	ldr	r3, [pc, #48]	; (80129c4 <AckTimeoutRetriesProcess+0x8c>)
 8012994:	4a0e      	ldr	r2, [pc, #56]	; (80129d0 <AckTimeoutRetriesProcess+0x98>)
 8012996:	589b      	ldr	r3, [r3, r2]
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	187a      	adds	r2, r7, r1
 801299c:	0011      	movs	r1, r2
 801299e:	0018      	movs	r0, r3
 80129a0:	f004 f829 	bl	80169f6 <RegionGetPhyParam>
 80129a4:	0003      	movs	r3, r0
 80129a6:	001a      	movs	r2, r3
 80129a8:	1d3b      	adds	r3, r7, #4
 80129aa:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 80129ac:	1d3b      	adds	r3, r7, #4
 80129ae:	6819      	ldr	r1, [r3, #0]
 80129b0:	4b04      	ldr	r3, [pc, #16]	; (80129c4 <AckTimeoutRetriesProcess+0x8c>)
 80129b2:	4a07      	ldr	r2, [pc, #28]	; (80129d0 <AckTimeoutRetriesProcess+0x98>)
 80129b4:	589b      	ldr	r3, [r3, r2]
 80129b6:	b249      	sxtb	r1, r1
 80129b8:	2285      	movs	r2, #133	; 0x85
 80129ba:	5499      	strb	r1, [r3, r2]
        }
    }
}
 80129bc:	46c0      	nop			; (mov r8, r8)
 80129be:	46bd      	mov	sp, r7
 80129c0:	b004      	add	sp, #16
 80129c2:	bd80      	pop	{r7, pc}
 80129c4:	20000548 	.word	0x20000548
 80129c8:	00000412 	.word	0x00000412
 80129cc:	00000411 	.word	0x00000411
 80129d0:	00000484 	.word	0x00000484

080129d4 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80129da:	4a16      	ldr	r2, [pc, #88]	; (8012a34 <AckTimeoutRetriesFinalize+0x60>)
 80129dc:	2388      	movs	r3, #136	; 0x88
 80129de:	00db      	lsls	r3, r3, #3
 80129e0:	5cd3      	ldrb	r3, [r2, r3]
 80129e2:	2201      	movs	r2, #1
 80129e4:	4053      	eors	r3, r2
 80129e6:	b2db      	uxtb	r3, r3
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d018      	beq.n	8012a1e <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80129ec:	003b      	movs	r3, r7
 80129ee:	2202      	movs	r2, #2
 80129f0:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 80129f2:	4b11      	ldr	r3, [pc, #68]	; (8012a38 <AckTimeoutRetriesFinalize+0x64>)
 80129f4:	689a      	ldr	r2, [r3, #8]
 80129f6:	003b      	movs	r3, r7
 80129f8:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80129fa:	4b0e      	ldr	r3, [pc, #56]	; (8012a34 <AckTimeoutRetriesFinalize+0x60>)
 80129fc:	4a0f      	ldr	r2, [pc, #60]	; (8012a3c <AckTimeoutRetriesFinalize+0x68>)
 80129fe:	589b      	ldr	r3, [r3, r2]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	003a      	movs	r2, r7
 8012a04:	0011      	movs	r1, r2
 8012a06:	0018      	movs	r0, r3
 8012a08:	f004 f831 	bl	8016a6e <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012a0c:	4b09      	ldr	r3, [pc, #36]	; (8012a34 <AckTimeoutRetriesFinalize+0x60>)
 8012a0e:	4a0c      	ldr	r2, [pc, #48]	; (8012a40 <AckTimeoutRetriesFinalize+0x6c>)
 8012a10:	2100      	movs	r1, #0
 8012a12:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 8012a14:	4a07      	ldr	r2, [pc, #28]	; (8012a34 <AckTimeoutRetriesFinalize+0x60>)
 8012a16:	2388      	movs	r3, #136	; 0x88
 8012a18:	00db      	lsls	r3, r3, #3
 8012a1a:	2100      	movs	r1, #0
 8012a1c:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012a1e:	4b05      	ldr	r3, [pc, #20]	; (8012a34 <AckTimeoutRetriesFinalize+0x60>)
 8012a20:	4a08      	ldr	r2, [pc, #32]	; (8012a44 <AckTimeoutRetriesFinalize+0x70>)
 8012a22:	5c99      	ldrb	r1, [r3, r2]
 8012a24:	4b03      	ldr	r3, [pc, #12]	; (8012a34 <AckTimeoutRetriesFinalize+0x60>)
 8012a26:	4a08      	ldr	r2, [pc, #32]	; (8012a48 <AckTimeoutRetriesFinalize+0x74>)
 8012a28:	5499      	strb	r1, [r3, r2]
}
 8012a2a:	46c0      	nop			; (mov r8, r8)
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	b002      	add	sp, #8
 8012a30:	bd80      	pop	{r7, pc}
 8012a32:	46c0      	nop			; (mov r8, r8)
 8012a34:	20000548 	.word	0x20000548
 8012a38:	20000b40 	.word	0x20000b40
 8012a3c:	00000484 	.word	0x00000484
 8012a40:	00000414 	.word	0x00000414
 8012a44:	00000412 	.word	0x00000412
 8012a48:	00000441 	.word	0x00000441

08012a4c <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b082      	sub	sp, #8
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	0002      	movs	r2, r0
 8012a54:	1dfb      	adds	r3, r7, #7
 8012a56:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8012a58:	4a0c      	ldr	r2, [pc, #48]	; (8012a8c <CallNvmCtxCallback+0x40>)
 8012a5a:	23d2      	movs	r3, #210	; 0xd2
 8012a5c:	009b      	lsls	r3, r3, #2
 8012a5e:	58d3      	ldr	r3, [r2, r3]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d00f      	beq.n	8012a84 <CallNvmCtxCallback+0x38>
 8012a64:	4a09      	ldr	r2, [pc, #36]	; (8012a8c <CallNvmCtxCallback+0x40>)
 8012a66:	23d2      	movs	r3, #210	; 0xd2
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	58d3      	ldr	r3, [r2, r3]
 8012a6c:	689b      	ldr	r3, [r3, #8]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d008      	beq.n	8012a84 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8012a72:	4a06      	ldr	r2, [pc, #24]	; (8012a8c <CallNvmCtxCallback+0x40>)
 8012a74:	23d2      	movs	r3, #210	; 0xd2
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	58d3      	ldr	r3, [r2, r3]
 8012a7a:	689b      	ldr	r3, [r3, #8]
 8012a7c:	1dfa      	adds	r2, r7, #7
 8012a7e:	7812      	ldrb	r2, [r2, #0]
 8012a80:	0010      	movs	r0, r2
 8012a82:	4798      	blx	r3
    }
}
 8012a84:	46c0      	nop			; (mov r8, r8)
 8012a86:	46bd      	mov	sp, r7
 8012a88:	b002      	add	sp, #8
 8012a8a:	bd80      	pop	{r7, pc}
 8012a8c:	20000548 	.word	0x20000548

08012a90 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8012a94:	2000      	movs	r0, #0
 8012a96:	f7ff ffd9 	bl	8012a4c <CallNvmCtxCallback>
}
 8012a9a:	46c0      	nop			; (mov r8, r8)
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}

08012aa0 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8012aa4:	2001      	movs	r0, #1
 8012aa6:	f7ff ffd1 	bl	8012a4c <CallNvmCtxCallback>
}
 8012aaa:	46c0      	nop			; (mov r8, r8)
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8012ab4:	2002      	movs	r0, #2
 8012ab6:	f7ff ffc9 	bl	8012a4c <CallNvmCtxCallback>
}
 8012aba:	46c0      	nop			; (mov r8, r8)
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8012ac4:	2003      	movs	r0, #3
 8012ac6:	f7ff ffc1 	bl	8012a4c <CallNvmCtxCallback>
}
 8012aca:	46c0      	nop			; (mov r8, r8)
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}

08012ad0 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8012ad4:	2004      	movs	r0, #4
 8012ad6:	f7ff ffb9 	bl	8012a4c <CallNvmCtxCallback>
}
 8012ada:	46c0      	nop			; (mov r8, r8)
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8012ae4:	2005      	movs	r0, #5
 8012ae6:	f7ff ffb1 	bl	8012a4c <CallNvmCtxCallback>
}
 8012aea:	46c0      	nop			; (mov r8, r8)
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8012af4:	2006      	movs	r0, #6
 8012af6:	f7ff ffa9 	bl	8012a4c <CallNvmCtxCallback>
}
 8012afa:	46c0      	nop			; (mov r8, r8)
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012b04:	4b0a      	ldr	r3, [pc, #40]	; (8012b30 <IsRequestPending+0x30>)
 8012b06:	4a0b      	ldr	r2, [pc, #44]	; (8012b34 <IsRequestPending+0x34>)
 8012b08:	5c9b      	ldrb	r3, [r3, r2]
 8012b0a:	2204      	movs	r2, #4
 8012b0c:	4013      	ands	r3, r2
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d107      	bne.n	8012b24 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012b14:	4b06      	ldr	r3, [pc, #24]	; (8012b30 <IsRequestPending+0x30>)
 8012b16:	4a07      	ldr	r2, [pc, #28]	; (8012b34 <IsRequestPending+0x34>)
 8012b18:	5c9b      	ldrb	r3, [r3, r2]
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	4013      	ands	r3, r2
 8012b1e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d001      	beq.n	8012b28 <IsRequestPending+0x28>
    {
        return 1;
 8012b24:	2301      	movs	r3, #1
 8012b26:	e000      	b.n	8012b2a <IsRequestPending+0x2a>
    }
    return 0;
 8012b28:	2300      	movs	r3, #0
}
 8012b2a:	0018      	movs	r0, r3
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}
 8012b30:	20000548 	.word	0x20000548
 8012b34:	00000481 	.word	0x00000481

08012b38 <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012b3c:	4a08      	ldr	r2, [pc, #32]	; (8012b60 <LoRaMacIsBusy+0x28>)
 8012b3e:	23d0      	movs	r3, #208	; 0xd0
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	58d3      	ldr	r3, [r2, r3]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d106      	bne.n	8012b56 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8012b48:	4b05      	ldr	r3, [pc, #20]	; (8012b60 <LoRaMacIsBusy+0x28>)
 8012b4a:	4a06      	ldr	r2, [pc, #24]	; (8012b64 <LoRaMacIsBusy+0x2c>)
 8012b4c:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	d101      	bne.n	8012b56 <LoRaMacIsBusy+0x1e>
    {
        return false;
 8012b52:	2300      	movs	r3, #0
 8012b54:	e000      	b.n	8012b58 <LoRaMacIsBusy+0x20>
    }
    return true;
 8012b56:	2301      	movs	r3, #1
}
 8012b58:	0018      	movs	r0, r3
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	46c0      	nop			; (mov r8, r8)
 8012b60:	20000548 	.word	0x20000548
 8012b64:	00000482 	.word	0x00000482

08012b68 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 8012b6e:	1dfb      	adds	r3, r7, #7
 8012b70:	2200      	movs	r2, #0
 8012b72:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 8012b74:	f7fd f970 	bl	800fe58 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012b78:	f001 fe26 	bl	80147c8 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012b7c:	4b1b      	ldr	r3, [pc, #108]	; (8012bec <LoRaMacProcess+0x84>)
 8012b7e:	4a1c      	ldr	r2, [pc, #112]	; (8012bf0 <LoRaMacProcess+0x88>)
 8012b80:	5c9b      	ldrb	r3, [r3, r2]
 8012b82:	2220      	movs	r2, #32
 8012b84:	4013      	ands	r3, r2
 8012b86:	b2db      	uxtb	r3, r3
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d020      	beq.n	8012bce <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012b8c:	2000      	movs	r0, #0
 8012b8e:	f7fd f9af 	bl	800fef0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8012b92:	f7fd fb8b 	bl	80102ac <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012b96:	f7ff ffb3 	bl	8012b00 <IsRequestPending>
 8012b9a:	1e03      	subs	r3, r0, #0
 8012b9c:	d008      	beq.n	8012bb0 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8012b9e:	f7fd fb59 	bl	8010254 <LoRaMacCheckForBeaconAcquisition>
 8012ba2:	0003      	movs	r3, r0
 8012ba4:	0019      	movs	r1, r3
 8012ba6:	1dfb      	adds	r3, r7, #7
 8012ba8:	1dfa      	adds	r2, r7, #7
 8012baa:	7812      	ldrb	r2, [r2, #0]
 8012bac:	430a      	orrs	r2, r1
 8012bae:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8012bb0:	1dfb      	adds	r3, r7, #7
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d103      	bne.n	8012bc0 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8012bb8:	f7fd fb0a 	bl	80101d0 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012bbc:	f7fd fa86 	bl	80100cc <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012bc0:	f7fd f9aa 	bl	800ff18 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8012bc4:	f7fd fa0e 	bl	800ffe4 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012bc8:	2001      	movs	r0, #1
 8012bca:	f7fd f991 	bl	800fef0 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8012bce:	f7fd fa25 	bl	801001c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8012bd2:	4a06      	ldr	r2, [pc, #24]	; (8012bec <LoRaMacProcess+0x84>)
 8012bd4:	2390      	movs	r3, #144	; 0x90
 8012bd6:	00db      	lsls	r3, r3, #3
 8012bd8:	5cd3      	ldrb	r3, [r2, r3]
 8012bda:	2b02      	cmp	r3, #2
 8012bdc:	d101      	bne.n	8012be2 <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 8012bde:	f7ff f9d1 	bl	8011f84 <OpenContinuousRxCWindow>
    }
}
 8012be2:	46c0      	nop			; (mov r8, r8)
 8012be4:	46bd      	mov	sp, r7
 8012be6:	b002      	add	sp, #8
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	46c0      	nop			; (mov r8, r8)
 8012bec:	20000548 	.word	0x20000548
 8012bf0:	00000481 	.word	0x00000481

08012bf4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012bf4:	b5b0      	push	{r4, r5, r7, lr}
 8012bf6:	b098      	sub	sp, #96	; 0x60
 8012bf8:	af02      	add	r7, sp, #8
 8012bfa:	6178      	str	r0, [r7, #20]
 8012bfc:	6139      	str	r1, [r7, #16]
 8012bfe:	230f      	movs	r3, #15
 8012c00:	18fb      	adds	r3, r7, r3
 8012c02:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d002      	beq.n	8012c10 <LoRaMacInitialization+0x1c>
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d101      	bne.n	8012c14 <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c10:	2303      	movs	r3, #3
 8012c12:	e35e      	b.n	80132d2 <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d00b      	beq.n	8012c34 <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d007      	beq.n	8012c34 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d003      	beq.n	8012c34 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 8012c2c:	697b      	ldr	r3, [r7, #20]
 8012c2e:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d101      	bne.n	8012c38 <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c34:	2303      	movs	r3, #3
 8012c36:	e34c      	b.n	80132d2 <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012c38:	230f      	movs	r3, #15
 8012c3a:	18fb      	adds	r3, r7, r3
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	0018      	movs	r0, r3
 8012c40:	f003 fec8 	bl	80169d4 <RegionIsActive>
 8012c44:	0003      	movs	r3, r0
 8012c46:	001a      	movs	r2, r3
 8012c48:	2301      	movs	r3, #1
 8012c4a:	4053      	eors	r3, r2
 8012c4c:	b2db      	uxtb	r3, r3
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d001      	beq.n	8012c56 <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012c52:	2309      	movs	r3, #9
 8012c54:	e33d      	b.n	80132d2 <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8012c56:	4afd      	ldr	r2, [pc, #1012]	; (801304c <LoRaMacInitialization+0x458>)
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	0011      	movs	r1, r2
 8012c5c:	0018      	movs	r0, r3
 8012c5e:	f002 f967 	bl	8014f30 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8012c62:	23b6      	movs	r3, #182	; 0xb6
 8012c64:	005a      	lsls	r2, r3, #1
 8012c66:	4bfa      	ldr	r3, [pc, #1000]	; (8013050 <LoRaMacInitialization+0x45c>)
 8012c68:	2100      	movs	r1, #0
 8012c6a:	0018      	movs	r0, r3
 8012c6c:	f006 fb80 	bl	8019370 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012c70:	4af8      	ldr	r2, [pc, #992]	; (8013054 <LoRaMacInitialization+0x460>)
 8012c72:	4bf9      	ldr	r3, [pc, #996]	; (8013058 <LoRaMacInitialization+0x464>)
 8012c74:	2100      	movs	r1, #0
 8012c76:	0018      	movs	r0, r3
 8012c78:	f006 fb7a 	bl	8019370 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 8012c7c:	4bf6      	ldr	r3, [pc, #984]	; (8013058 <LoRaMacInitialization+0x464>)
 8012c7e:	49f7      	ldr	r1, [pc, #988]	; (801305c <LoRaMacInitialization+0x468>)
 8012c80:	4af3      	ldr	r2, [pc, #972]	; (8013050 <LoRaMacInitialization+0x45c>)
 8012c82:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012c84:	4bf4      	ldr	r3, [pc, #976]	; (8013058 <LoRaMacInitialization+0x464>)
 8012c86:	4af6      	ldr	r2, [pc, #984]	; (8013060 <LoRaMacInitialization+0x46c>)
 8012c88:	2101      	movs	r1, #1
 8012c8a:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 8012c8c:	4bf2      	ldr	r3, [pc, #968]	; (8013058 <LoRaMacInitialization+0x464>)
 8012c8e:	4af5      	ldr	r2, [pc, #980]	; (8013064 <LoRaMacInitialization+0x470>)
 8012c90:	2101      	movs	r1, #1
 8012c92:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 8012c94:	4bf0      	ldr	r3, [pc, #960]	; (8013058 <LoRaMacInitialization+0x464>)
 8012c96:	4af1      	ldr	r2, [pc, #964]	; (801305c <LoRaMacInitialization+0x468>)
 8012c98:	589b      	ldr	r3, [r3, r2]
 8012c9a:	220f      	movs	r2, #15
 8012c9c:	18ba      	adds	r2, r7, r2
 8012c9e:	7812      	ldrb	r2, [r2, #0]
 8012ca0:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8012ca2:	4bed      	ldr	r3, [pc, #948]	; (8013058 <LoRaMacInitialization+0x464>)
 8012ca4:	4aed      	ldr	r2, [pc, #948]	; (801305c <LoRaMacInitialization+0x468>)
 8012ca6:	589b      	ldr	r3, [r3, r2]
 8012ca8:	227c      	movs	r2, #124	; 0x7c
 8012caa:	2100      	movs	r1, #0
 8012cac:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8012cae:	4bea      	ldr	r3, [pc, #936]	; (8013058 <LoRaMacInitialization+0x464>)
 8012cb0:	4aea      	ldr	r2, [pc, #936]	; (801305c <LoRaMacInitialization+0x468>)
 8012cb2:	589b      	ldr	r3, [r3, r2]
 8012cb4:	22ca      	movs	r2, #202	; 0xca
 8012cb6:	2100      	movs	r1, #0
 8012cb8:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8012cba:	4be7      	ldr	r3, [pc, #924]	; (8013058 <LoRaMacInitialization+0x464>)
 8012cbc:	4ae7      	ldr	r2, [pc, #924]	; (801305c <LoRaMacInitialization+0x468>)
 8012cbe:	589a      	ldr	r2, [r3, r2]
 8012cc0:	23b0      	movs	r3, #176	; 0xb0
 8012cc2:	005b      	lsls	r3, r3, #1
 8012cc4:	49e8      	ldr	r1, [pc, #928]	; (8013068 <LoRaMacInitialization+0x474>)
 8012cc6:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012cc8:	2550      	movs	r5, #80	; 0x50
 8012cca:	197b      	adds	r3, r7, r5
 8012ccc:	220f      	movs	r2, #15
 8012cce:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012cd0:	4be1      	ldr	r3, [pc, #900]	; (8013058 <LoRaMacInitialization+0x464>)
 8012cd2:	4ae2      	ldr	r2, [pc, #904]	; (801305c <LoRaMacInitialization+0x468>)
 8012cd4:	589b      	ldr	r3, [r3, r2]
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	197a      	adds	r2, r7, r5
 8012cda:	0011      	movs	r1, r2
 8012cdc:	0018      	movs	r0, r3
 8012cde:	f003 fe8a 	bl	80169f6 <RegionGetPhyParam>
 8012ce2:	0003      	movs	r3, r0
 8012ce4:	001a      	movs	r2, r3
 8012ce6:	244c      	movs	r4, #76	; 0x4c
 8012ce8:	193b      	adds	r3, r7, r4
 8012cea:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8012cec:	193b      	adds	r3, r7, r4
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	4bd9      	ldr	r3, [pc, #868]	; (8013058 <LoRaMacInitialization+0x464>)
 8012cf2:	49da      	ldr	r1, [pc, #872]	; (801305c <LoRaMacInitialization+0x468>)
 8012cf4:	585b      	ldr	r3, [r3, r1]
 8012cf6:	1e51      	subs	r1, r2, #1
 8012cf8:	418a      	sbcs	r2, r1
 8012cfa:	b2d1      	uxtb	r1, r2
 8012cfc:	22c9      	movs	r2, #201	; 0xc9
 8012cfe:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012d00:	197b      	adds	r3, r7, r5
 8012d02:	220a      	movs	r2, #10
 8012d04:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012d06:	4bd4      	ldr	r3, [pc, #848]	; (8013058 <LoRaMacInitialization+0x464>)
 8012d08:	4ad4      	ldr	r2, [pc, #848]	; (801305c <LoRaMacInitialization+0x468>)
 8012d0a:	589b      	ldr	r3, [r3, r2]
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	197a      	adds	r2, r7, r5
 8012d10:	0011      	movs	r1, r2
 8012d12:	0018      	movs	r0, r3
 8012d14:	f003 fe6f 	bl	80169f6 <RegionGetPhyParam>
 8012d18:	0003      	movs	r3, r0
 8012d1a:	001a      	movs	r2, r3
 8012d1c:	193b      	adds	r3, r7, r4
 8012d1e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8012d20:	193b      	adds	r3, r7, r4
 8012d22:	6819      	ldr	r1, [r3, #0]
 8012d24:	4bcc      	ldr	r3, [pc, #816]	; (8013058 <LoRaMacInitialization+0x464>)
 8012d26:	4acd      	ldr	r2, [pc, #820]	; (801305c <LoRaMacInitialization+0x468>)
 8012d28:	589b      	ldr	r3, [r3, r2]
 8012d2a:	b24a      	sxtb	r2, r1
 8012d2c:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012d2e:	197b      	adds	r3, r7, r5
 8012d30:	2206      	movs	r2, #6
 8012d32:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012d34:	4bc8      	ldr	r3, [pc, #800]	; (8013058 <LoRaMacInitialization+0x464>)
 8012d36:	4ac9      	ldr	r2, [pc, #804]	; (801305c <LoRaMacInitialization+0x468>)
 8012d38:	589b      	ldr	r3, [r3, r2]
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	197a      	adds	r2, r7, r5
 8012d3e:	0011      	movs	r1, r2
 8012d40:	0018      	movs	r0, r3
 8012d42:	f003 fe58 	bl	80169f6 <RegionGetPhyParam>
 8012d46:	0003      	movs	r3, r0
 8012d48:	001a      	movs	r2, r3
 8012d4a:	193b      	adds	r3, r7, r4
 8012d4c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8012d4e:	193b      	adds	r3, r7, r4
 8012d50:	6819      	ldr	r1, [r3, #0]
 8012d52:	4bc1      	ldr	r3, [pc, #772]	; (8013058 <LoRaMacInitialization+0x464>)
 8012d54:	4ac1      	ldr	r2, [pc, #772]	; (801305c <LoRaMacInitialization+0x468>)
 8012d56:	589b      	ldr	r3, [r3, r2]
 8012d58:	b24a      	sxtb	r2, r1
 8012d5a:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012d5c:	197b      	adds	r3, r7, r5
 8012d5e:	2210      	movs	r2, #16
 8012d60:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012d62:	4bbd      	ldr	r3, [pc, #756]	; (8013058 <LoRaMacInitialization+0x464>)
 8012d64:	4abd      	ldr	r2, [pc, #756]	; (801305c <LoRaMacInitialization+0x468>)
 8012d66:	589b      	ldr	r3, [r3, r2]
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	197a      	adds	r2, r7, r5
 8012d6c:	0011      	movs	r1, r2
 8012d6e:	0018      	movs	r0, r3
 8012d70:	f003 fe41 	bl	80169f6 <RegionGetPhyParam>
 8012d74:	0003      	movs	r3, r0
 8012d76:	001a      	movs	r2, r3
 8012d78:	193b      	adds	r3, r7, r4
 8012d7a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012d7c:	4bb6      	ldr	r3, [pc, #728]	; (8013058 <LoRaMacInitialization+0x464>)
 8012d7e:	4ab7      	ldr	r2, [pc, #732]	; (801305c <LoRaMacInitialization+0x468>)
 8012d80:	589b      	ldr	r3, [r3, r2]
 8012d82:	193a      	adds	r2, r7, r4
 8012d84:	6812      	ldr	r2, [r2, #0]
 8012d86:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012d88:	197b      	adds	r3, r7, r5
 8012d8a:	2211      	movs	r2, #17
 8012d8c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012d8e:	4bb2      	ldr	r3, [pc, #712]	; (8013058 <LoRaMacInitialization+0x464>)
 8012d90:	4ab2      	ldr	r2, [pc, #712]	; (801305c <LoRaMacInitialization+0x468>)
 8012d92:	589b      	ldr	r3, [r3, r2]
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	197a      	adds	r2, r7, r5
 8012d98:	0011      	movs	r1, r2
 8012d9a:	0018      	movs	r0, r3
 8012d9c:	f003 fe2b 	bl	80169f6 <RegionGetPhyParam>
 8012da0:	0003      	movs	r3, r0
 8012da2:	001a      	movs	r2, r3
 8012da4:	193b      	adds	r3, r7, r4
 8012da6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012da8:	4bab      	ldr	r3, [pc, #684]	; (8013058 <LoRaMacInitialization+0x464>)
 8012daa:	4aac      	ldr	r2, [pc, #688]	; (801305c <LoRaMacInitialization+0x468>)
 8012dac:	589b      	ldr	r3, [r3, r2]
 8012dae:	193a      	adds	r2, r7, r4
 8012db0:	6812      	ldr	r2, [r2, #0]
 8012db2:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012db4:	197b      	adds	r3, r7, r5
 8012db6:	2212      	movs	r2, #18
 8012db8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012dba:	4ba7      	ldr	r3, [pc, #668]	; (8013058 <LoRaMacInitialization+0x464>)
 8012dbc:	4aa7      	ldr	r2, [pc, #668]	; (801305c <LoRaMacInitialization+0x468>)
 8012dbe:	589b      	ldr	r3, [r3, r2]
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	197a      	adds	r2, r7, r5
 8012dc4:	0011      	movs	r1, r2
 8012dc6:	0018      	movs	r0, r3
 8012dc8:	f003 fe15 	bl	80169f6 <RegionGetPhyParam>
 8012dcc:	0003      	movs	r3, r0
 8012dce:	001a      	movs	r2, r3
 8012dd0:	193b      	adds	r3, r7, r4
 8012dd2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012dd4:	4ba0      	ldr	r3, [pc, #640]	; (8013058 <LoRaMacInitialization+0x464>)
 8012dd6:	4aa1      	ldr	r2, [pc, #644]	; (801305c <LoRaMacInitialization+0x468>)
 8012dd8:	589b      	ldr	r3, [r3, r2]
 8012dda:	193a      	adds	r2, r7, r4
 8012ddc:	6812      	ldr	r2, [r2, #0]
 8012dde:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012de0:	197b      	adds	r3, r7, r5
 8012de2:	2213      	movs	r2, #19
 8012de4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012de6:	4b9c      	ldr	r3, [pc, #624]	; (8013058 <LoRaMacInitialization+0x464>)
 8012de8:	4a9c      	ldr	r2, [pc, #624]	; (801305c <LoRaMacInitialization+0x468>)
 8012dea:	589b      	ldr	r3, [r3, r2]
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	197a      	adds	r2, r7, r5
 8012df0:	0011      	movs	r1, r2
 8012df2:	0018      	movs	r0, r3
 8012df4:	f003 fdff 	bl	80169f6 <RegionGetPhyParam>
 8012df8:	0003      	movs	r3, r0
 8012dfa:	001a      	movs	r2, r3
 8012dfc:	193b      	adds	r3, r7, r4
 8012dfe:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8012e00:	4b95      	ldr	r3, [pc, #596]	; (8013058 <LoRaMacInitialization+0x464>)
 8012e02:	4a96      	ldr	r2, [pc, #600]	; (801305c <LoRaMacInitialization+0x468>)
 8012e04:	589b      	ldr	r3, [r3, r2]
 8012e06:	193a      	adds	r2, r7, r4
 8012e08:	6812      	ldr	r2, [r2, #0]
 8012e0a:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012e0c:	197b      	adds	r3, r7, r5
 8012e0e:	2214      	movs	r2, #20
 8012e10:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012e12:	4b91      	ldr	r3, [pc, #580]	; (8013058 <LoRaMacInitialization+0x464>)
 8012e14:	4a91      	ldr	r2, [pc, #580]	; (801305c <LoRaMacInitialization+0x468>)
 8012e16:	589b      	ldr	r3, [r3, r2]
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	197a      	adds	r2, r7, r5
 8012e1c:	0011      	movs	r1, r2
 8012e1e:	0018      	movs	r0, r3
 8012e20:	f003 fde9 	bl	80169f6 <RegionGetPhyParam>
 8012e24:	0003      	movs	r3, r0
 8012e26:	001a      	movs	r2, r3
 8012e28:	193b      	adds	r3, r7, r4
 8012e2a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012e2c:	4b8a      	ldr	r3, [pc, #552]	; (8013058 <LoRaMacInitialization+0x464>)
 8012e2e:	4a8b      	ldr	r2, [pc, #556]	; (801305c <LoRaMacInitialization+0x468>)
 8012e30:	589b      	ldr	r3, [r3, r2]
 8012e32:	193a      	adds	r2, r7, r4
 8012e34:	6812      	ldr	r2, [r2, #0]
 8012e36:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8012e38:	197b      	adds	r3, r7, r5
 8012e3a:	2217      	movs	r2, #23
 8012e3c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012e3e:	4b86      	ldr	r3, [pc, #536]	; (8013058 <LoRaMacInitialization+0x464>)
 8012e40:	4a86      	ldr	r2, [pc, #536]	; (801305c <LoRaMacInitialization+0x468>)
 8012e42:	589b      	ldr	r3, [r3, r2]
 8012e44:	781b      	ldrb	r3, [r3, #0]
 8012e46:	197a      	adds	r2, r7, r5
 8012e48:	0011      	movs	r1, r2
 8012e4a:	0018      	movs	r0, r3
 8012e4c:	f003 fdd3 	bl	80169f6 <RegionGetPhyParam>
 8012e50:	0003      	movs	r3, r0
 8012e52:	001a      	movs	r2, r3
 8012e54:	193b      	adds	r3, r7, r4
 8012e56:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012e58:	193b      	adds	r3, r7, r4
 8012e5a:	6819      	ldr	r1, [r3, #0]
 8012e5c:	4b7e      	ldr	r3, [pc, #504]	; (8013058 <LoRaMacInitialization+0x464>)
 8012e5e:	4a7f      	ldr	r2, [pc, #508]	; (801305c <LoRaMacInitialization+0x468>)
 8012e60:	589b      	ldr	r3, [r3, r2]
 8012e62:	b2c9      	uxtb	r1, r1
 8012e64:	2225      	movs	r2, #37	; 0x25
 8012e66:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012e68:	197b      	adds	r3, r7, r5
 8012e6a:	2218      	movs	r2, #24
 8012e6c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012e6e:	4b7a      	ldr	r3, [pc, #488]	; (8013058 <LoRaMacInitialization+0x464>)
 8012e70:	4a7a      	ldr	r2, [pc, #488]	; (801305c <LoRaMacInitialization+0x468>)
 8012e72:	589b      	ldr	r3, [r3, r2]
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	197a      	adds	r2, r7, r5
 8012e78:	0011      	movs	r1, r2
 8012e7a:	0018      	movs	r0, r3
 8012e7c:	f003 fdbb 	bl	80169f6 <RegionGetPhyParam>
 8012e80:	0003      	movs	r3, r0
 8012e82:	001a      	movs	r2, r3
 8012e84:	193b      	adds	r3, r7, r4
 8012e86:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8012e88:	4b73      	ldr	r3, [pc, #460]	; (8013058 <LoRaMacInitialization+0x464>)
 8012e8a:	4a74      	ldr	r2, [pc, #464]	; (801305c <LoRaMacInitialization+0x468>)
 8012e8c:	589b      	ldr	r3, [r3, r2]
 8012e8e:	193a      	adds	r2, r7, r4
 8012e90:	6812      	ldr	r2, [r2, #0]
 8012e92:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012e94:	4b70      	ldr	r3, [pc, #448]	; (8013058 <LoRaMacInitialization+0x464>)
 8012e96:	4a71      	ldr	r2, [pc, #452]	; (801305c <LoRaMacInitialization+0x468>)
 8012e98:	589b      	ldr	r3, [r3, r2]
 8012e9a:	193a      	adds	r2, r7, r4
 8012e9c:	6812      	ldr	r2, [r2, #0]
 8012e9e:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8012ea0:	197b      	adds	r3, r7, r5
 8012ea2:	2219      	movs	r2, #25
 8012ea4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012ea6:	4b6c      	ldr	r3, [pc, #432]	; (8013058 <LoRaMacInitialization+0x464>)
 8012ea8:	4a6c      	ldr	r2, [pc, #432]	; (801305c <LoRaMacInitialization+0x468>)
 8012eaa:	589b      	ldr	r3, [r3, r2]
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	197a      	adds	r2, r7, r5
 8012eb0:	0011      	movs	r1, r2
 8012eb2:	0018      	movs	r0, r3
 8012eb4:	f003 fd9f 	bl	80169f6 <RegionGetPhyParam>
 8012eb8:	0003      	movs	r3, r0
 8012eba:	001a      	movs	r2, r3
 8012ebc:	193b      	adds	r3, r7, r4
 8012ebe:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8012ec0:	193b      	adds	r3, r7, r4
 8012ec2:	6819      	ldr	r1, [r3, #0]
 8012ec4:	4b64      	ldr	r3, [pc, #400]	; (8013058 <LoRaMacInitialization+0x464>)
 8012ec6:	4a65      	ldr	r2, [pc, #404]	; (801305c <LoRaMacInitialization+0x468>)
 8012ec8:	589b      	ldr	r3, [r3, r2]
 8012eca:	b2c9      	uxtb	r1, r1
 8012ecc:	222c      	movs	r2, #44	; 0x2c
 8012ece:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8012ed0:	193b      	adds	r3, r7, r4
 8012ed2:	6819      	ldr	r1, [r3, #0]
 8012ed4:	4b60      	ldr	r3, [pc, #384]	; (8013058 <LoRaMacInitialization+0x464>)
 8012ed6:	4a61      	ldr	r2, [pc, #388]	; (801305c <LoRaMacInitialization+0x468>)
 8012ed8:	589b      	ldr	r3, [r3, r2]
 8012eda:	b2c9      	uxtb	r1, r1
 8012edc:	2234      	movs	r2, #52	; 0x34
 8012ede:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8012ee0:	197b      	adds	r3, r7, r5
 8012ee2:	221e      	movs	r2, #30
 8012ee4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012ee6:	4b5c      	ldr	r3, [pc, #368]	; (8013058 <LoRaMacInitialization+0x464>)
 8012ee8:	4a5c      	ldr	r2, [pc, #368]	; (801305c <LoRaMacInitialization+0x468>)
 8012eea:	589b      	ldr	r3, [r3, r2]
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	197a      	adds	r2, r7, r5
 8012ef0:	0011      	movs	r1, r2
 8012ef2:	0018      	movs	r0, r3
 8012ef4:	f003 fd7f 	bl	80169f6 <RegionGetPhyParam>
 8012ef8:	0003      	movs	r3, r0
 8012efa:	001a      	movs	r2, r3
 8012efc:	193b      	adds	r3, r7, r4
 8012efe:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8012f00:	193b      	adds	r3, r7, r4
 8012f02:	6819      	ldr	r1, [r3, #0]
 8012f04:	4b54      	ldr	r3, [pc, #336]	; (8013058 <LoRaMacInitialization+0x464>)
 8012f06:	4a55      	ldr	r2, [pc, #340]	; (801305c <LoRaMacInitialization+0x468>)
 8012f08:	589b      	ldr	r3, [r3, r2]
 8012f0a:	b2c9      	uxtb	r1, r1
 8012f0c:	2238      	movs	r2, #56	; 0x38
 8012f0e:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8012f10:	197b      	adds	r3, r7, r5
 8012f12:	221f      	movs	r2, #31
 8012f14:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f16:	4b50      	ldr	r3, [pc, #320]	; (8013058 <LoRaMacInitialization+0x464>)
 8012f18:	4a50      	ldr	r2, [pc, #320]	; (801305c <LoRaMacInitialization+0x468>)
 8012f1a:	589b      	ldr	r3, [r3, r2]
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	197a      	adds	r2, r7, r5
 8012f20:	0011      	movs	r1, r2
 8012f22:	0018      	movs	r0, r3
 8012f24:	f003 fd67 	bl	80169f6 <RegionGetPhyParam>
 8012f28:	0003      	movs	r3, r0
 8012f2a:	001a      	movs	r2, r3
 8012f2c:	193b      	adds	r3, r7, r4
 8012f2e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8012f30:	193b      	adds	r3, r7, r4
 8012f32:	6819      	ldr	r1, [r3, #0]
 8012f34:	4b48      	ldr	r3, [pc, #288]	; (8013058 <LoRaMacInitialization+0x464>)
 8012f36:	4a49      	ldr	r2, [pc, #292]	; (801305c <LoRaMacInitialization+0x468>)
 8012f38:	589b      	ldr	r3, [r3, r2]
 8012f3a:	b2c9      	uxtb	r1, r1
 8012f3c:	2239      	movs	r2, #57	; 0x39
 8012f3e:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012f40:	197b      	adds	r3, r7, r5
 8012f42:	2220      	movs	r2, #32
 8012f44:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f46:	4b44      	ldr	r3, [pc, #272]	; (8013058 <LoRaMacInitialization+0x464>)
 8012f48:	4a44      	ldr	r2, [pc, #272]	; (801305c <LoRaMacInitialization+0x468>)
 8012f4a:	589b      	ldr	r3, [r3, r2]
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	197a      	adds	r2, r7, r5
 8012f50:	0011      	movs	r1, r2
 8012f52:	0018      	movs	r0, r3
 8012f54:	f003 fd4f 	bl	80169f6 <RegionGetPhyParam>
 8012f58:	0003      	movs	r3, r0
 8012f5a:	001a      	movs	r2, r3
 8012f5c:	193b      	adds	r3, r7, r4
 8012f5e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012f60:	4b3d      	ldr	r3, [pc, #244]	; (8013058 <LoRaMacInitialization+0x464>)
 8012f62:	4a3e      	ldr	r2, [pc, #248]	; (801305c <LoRaMacInitialization+0x468>)
 8012f64:	589b      	ldr	r3, [r3, r2]
 8012f66:	193a      	adds	r2, r7, r4
 8012f68:	6812      	ldr	r2, [r2, #0]
 8012f6a:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8012f6c:	197b      	adds	r3, r7, r5
 8012f6e:	2221      	movs	r2, #33	; 0x21
 8012f70:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f72:	4b39      	ldr	r3, [pc, #228]	; (8013058 <LoRaMacInitialization+0x464>)
 8012f74:	4a39      	ldr	r2, [pc, #228]	; (801305c <LoRaMacInitialization+0x468>)
 8012f76:	589b      	ldr	r3, [r3, r2]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	197a      	adds	r2, r7, r5
 8012f7c:	0011      	movs	r1, r2
 8012f7e:	0018      	movs	r0, r3
 8012f80:	f003 fd39 	bl	80169f6 <RegionGetPhyParam>
 8012f84:	0003      	movs	r3, r0
 8012f86:	001a      	movs	r2, r3
 8012f88:	193b      	adds	r3, r7, r4
 8012f8a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012f8c:	4b32      	ldr	r3, [pc, #200]	; (8013058 <LoRaMacInitialization+0x464>)
 8012f8e:	4a33      	ldr	r2, [pc, #204]	; (801305c <LoRaMacInitialization+0x468>)
 8012f90:	589b      	ldr	r3, [r3, r2]
 8012f92:	193a      	adds	r2, r7, r4
 8012f94:	6812      	ldr	r2, [r2, #0]
 8012f96:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012f98:	197b      	adds	r3, r7, r5
 8012f9a:	220b      	movs	r2, #11
 8012f9c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f9e:	4b2e      	ldr	r3, [pc, #184]	; (8013058 <LoRaMacInitialization+0x464>)
 8012fa0:	4a2e      	ldr	r2, [pc, #184]	; (801305c <LoRaMacInitialization+0x468>)
 8012fa2:	589b      	ldr	r3, [r3, r2]
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	197a      	adds	r2, r7, r5
 8012fa8:	0011      	movs	r1, r2
 8012faa:	0018      	movs	r0, r3
 8012fac:	f003 fd23 	bl	80169f6 <RegionGetPhyParam>
 8012fb0:	0003      	movs	r3, r0
 8012fb2:	001a      	movs	r2, r3
 8012fb4:	193b      	adds	r3, r7, r4
 8012fb6:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 8012fb8:	193b      	adds	r3, r7, r4
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	b299      	uxth	r1, r3
 8012fbe:	4a26      	ldr	r2, [pc, #152]	; (8013058 <LoRaMacInitialization+0x464>)
 8012fc0:	23fd      	movs	r3, #253	; 0xfd
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012fc6:	197b      	adds	r3, r7, r5
 8012fc8:	220c      	movs	r2, #12
 8012fca:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012fcc:	4b22      	ldr	r3, [pc, #136]	; (8013058 <LoRaMacInitialization+0x464>)
 8012fce:	4a23      	ldr	r2, [pc, #140]	; (801305c <LoRaMacInitialization+0x468>)
 8012fd0:	589b      	ldr	r3, [r3, r2]
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	197a      	adds	r2, r7, r5
 8012fd6:	0011      	movs	r1, r2
 8012fd8:	0018      	movs	r0, r3
 8012fda:	f003 fd0c 	bl	80169f6 <RegionGetPhyParam>
 8012fde:	0003      	movs	r3, r0
 8012fe0:	001a      	movs	r2, r3
 8012fe2:	193b      	adds	r3, r7, r4
 8012fe4:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 8012fe6:	193b      	adds	r3, r7, r4
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	b299      	uxth	r1, r3
 8012fec:	4b1a      	ldr	r3, [pc, #104]	; (8013058 <LoRaMacInitialization+0x464>)
 8012fee:	4a1f      	ldr	r2, [pc, #124]	; (801306c <LoRaMacInitialization+0x478>)
 8012ff0:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8012ff2:	4b19      	ldr	r3, [pc, #100]	; (8013058 <LoRaMacInitialization+0x464>)
 8012ff4:	4a19      	ldr	r2, [pc, #100]	; (801305c <LoRaMacInitialization+0x468>)
 8012ff6:	589b      	ldr	r3, [r3, r2]
 8012ff8:	2224      	movs	r2, #36	; 0x24
 8012ffa:	2101      	movs	r1, #1
 8012ffc:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8012ffe:	4b16      	ldr	r3, [pc, #88]	; (8013058 <LoRaMacInitialization+0x464>)
 8013000:	4a16      	ldr	r2, [pc, #88]	; (801305c <LoRaMacInitialization+0x468>)
 8013002:	589b      	ldr	r3, [r3, r2]
 8013004:	220a      	movs	r2, #10
 8013006:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8013008:	4b13      	ldr	r3, [pc, #76]	; (8013058 <LoRaMacInitialization+0x464>)
 801300a:	4a14      	ldr	r2, [pc, #80]	; (801305c <LoRaMacInitialization+0x468>)
 801300c:	589b      	ldr	r3, [r3, r2]
 801300e:	2206      	movs	r2, #6
 8013010:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8013012:	4b11      	ldr	r3, [pc, #68]	; (8013058 <LoRaMacInitialization+0x464>)
 8013014:	4a11      	ldr	r2, [pc, #68]	; (801305c <LoRaMacInitialization+0x468>)
 8013016:	589b      	ldr	r3, [r3, r2]
 8013018:	4a0f      	ldr	r2, [pc, #60]	; (8013058 <LoRaMacInitialization+0x464>)
 801301a:	4910      	ldr	r1, [pc, #64]	; (801305c <LoRaMacInitialization+0x468>)
 801301c:	5852      	ldr	r2, [r2, r1]
 801301e:	689b      	ldr	r3, [r3, #8]
 8013020:	2188      	movs	r1, #136	; 0x88
 8013022:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8013024:	4b0c      	ldr	r3, [pc, #48]	; (8013058 <LoRaMacInitialization+0x464>)
 8013026:	4a0d      	ldr	r2, [pc, #52]	; (801305c <LoRaMacInitialization+0x468>)
 8013028:	589a      	ldr	r2, [r3, r2]
 801302a:	4b0b      	ldr	r3, [pc, #44]	; (8013058 <LoRaMacInitialization+0x464>)
 801302c:	490b      	ldr	r1, [pc, #44]	; (801305c <LoRaMacInitialization+0x468>)
 801302e:	585b      	ldr	r3, [r3, r1]
 8013030:	7b11      	ldrb	r1, [r2, #12]
 8013032:	228c      	movs	r2, #140	; 0x8c
 8013034:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8013036:	4b08      	ldr	r3, [pc, #32]	; (8013058 <LoRaMacInitialization+0x464>)
 8013038:	4a08      	ldr	r2, [pc, #32]	; (801305c <LoRaMacInitialization+0x468>)
 801303a:	589b      	ldr	r3, [r3, r2]
 801303c:	4a06      	ldr	r2, [pc, #24]	; (8013058 <LoRaMacInitialization+0x464>)
 801303e:	4907      	ldr	r1, [pc, #28]	; (801305c <LoRaMacInitialization+0x468>)
 8013040:	5852      	ldr	r2, [r2, r1]
 8013042:	691b      	ldr	r3, [r3, #16]
 8013044:	2190      	movs	r1, #144	; 0x90
 8013046:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8013048:	4b03      	ldr	r3, [pc, #12]	; (8013058 <LoRaMacInitialization+0x464>)
 801304a:	e011      	b.n	8013070 <LoRaMacInitialization+0x47c>
 801304c:	08012af1 	.word	0x08012af1
 8013050:	200009d4 	.word	0x200009d4
 8013054:	0000048c 	.word	0x0000048c
 8013058:	20000548 	.word	0x20000548
 801305c:	00000484 	.word	0x00000484
 8013060:	00000412 	.word	0x00000412
 8013064:	00000411 	.word	0x00000411
 8013068:	01000300 	.word	0x01000300
 801306c:	000003f6 	.word	0x000003f6
 8013070:	4a9a      	ldr	r2, [pc, #616]	; (80132dc <LoRaMacInitialization+0x6e8>)
 8013072:	589b      	ldr	r3, [r3, r2]
 8013074:	4a9a      	ldr	r2, [pc, #616]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013076:	4999      	ldr	r1, [pc, #612]	; (80132dc <LoRaMacInitialization+0x6e8>)
 8013078:	5852      	ldr	r2, [r2, r1]
 801307a:	695b      	ldr	r3, [r3, #20]
 801307c:	2194      	movs	r1, #148	; 0x94
 801307e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 8013080:	4b97      	ldr	r3, [pc, #604]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013082:	4a96      	ldr	r2, [pc, #600]	; (80132dc <LoRaMacInitialization+0x6e8>)
 8013084:	589b      	ldr	r3, [r3, r2]
 8013086:	4a96      	ldr	r2, [pc, #600]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013088:	4994      	ldr	r1, [pc, #592]	; (80132dc <LoRaMacInitialization+0x6e8>)
 801308a:	5852      	ldr	r2, [r2, r1]
 801308c:	699b      	ldr	r3, [r3, #24]
 801308e:	2198      	movs	r1, #152	; 0x98
 8013090:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8013092:	4b93      	ldr	r3, [pc, #588]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013094:	4a91      	ldr	r2, [pc, #580]	; (80132dc <LoRaMacInitialization+0x6e8>)
 8013096:	589b      	ldr	r3, [r3, r2]
 8013098:	4a91      	ldr	r2, [pc, #580]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 801309a:	4990      	ldr	r1, [pc, #576]	; (80132dc <LoRaMacInitialization+0x6e8>)
 801309c:	5852      	ldr	r2, [r2, r1]
 801309e:	69db      	ldr	r3, [r3, #28]
 80130a0:	219c      	movs	r1, #156	; 0x9c
 80130a2:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 80130a4:	4b8e      	ldr	r3, [pc, #568]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80130a6:	4a8d      	ldr	r2, [pc, #564]	; (80132dc <LoRaMacInitialization+0x6e8>)
 80130a8:	589b      	ldr	r3, [r3, r2]
 80130aa:	4a8d      	ldr	r2, [pc, #564]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80130ac:	498b      	ldr	r1, [pc, #556]	; (80132dc <LoRaMacInitialization+0x6e8>)
 80130ae:	5852      	ldr	r2, [r2, r1]
 80130b0:	6a1b      	ldr	r3, [r3, #32]
 80130b2:	21a0      	movs	r1, #160	; 0xa0
 80130b4:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 80130b6:	4b8a      	ldr	r3, [pc, #552]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80130b8:	4a88      	ldr	r2, [pc, #544]	; (80132dc <LoRaMacInitialization+0x6e8>)
 80130ba:	589a      	ldr	r2, [r3, r2]
 80130bc:	4b88      	ldr	r3, [pc, #544]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80130be:	4987      	ldr	r1, [pc, #540]	; (80132dc <LoRaMacInitialization+0x6e8>)
 80130c0:	585b      	ldr	r3, [r3, r1]
 80130c2:	2124      	movs	r1, #36	; 0x24
 80130c4:	5c51      	ldrb	r1, [r2, r1]
 80130c6:	22a4      	movs	r2, #164	; 0xa4
 80130c8:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80130ca:	211c      	movs	r1, #28
 80130cc:	187b      	adds	r3, r7, r1
 80130ce:	2200      	movs	r2, #0
 80130d0:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 80130d2:	187b      	adds	r3, r7, r1
 80130d4:	2200      	movs	r2, #0
 80130d6:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80130d8:	4b81      	ldr	r3, [pc, #516]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80130da:	4a80      	ldr	r2, [pc, #512]	; (80132dc <LoRaMacInitialization+0x6e8>)
 80130dc:	589b      	ldr	r3, [r3, r2]
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	187a      	adds	r2, r7, r1
 80130e2:	0011      	movs	r1, r2
 80130e4:	0018      	movs	r0, r3
 80130e6:	f003 fcc2 	bl	8016a6e <RegionInitDefaults>

    ResetMacParameters( );
 80130ea:	f7fe fe19 	bl	8011d20 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 80130ee:	4b7c      	ldr	r3, [pc, #496]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80130f0:	4a7a      	ldr	r2, [pc, #488]	; (80132dc <LoRaMacInitialization+0x6e8>)
 80130f2:	589b      	ldr	r3, [r3, r2]
 80130f4:	227d      	movs	r2, #125	; 0x7d
 80130f6:	2101      	movs	r1, #1
 80130f8:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 80130fa:	4a79      	ldr	r2, [pc, #484]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80130fc:	23d1      	movs	r3, #209	; 0xd1
 80130fe:	009b      	lsls	r3, r3, #2
 8013100:	6979      	ldr	r1, [r7, #20]
 8013102:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 8013104:	4a76      	ldr	r2, [pc, #472]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013106:	23d2      	movs	r3, #210	; 0xd2
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	6939      	ldr	r1, [r7, #16]
 801310c:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 801310e:	4b74      	ldr	r3, [pc, #464]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013110:	4a74      	ldr	r2, [pc, #464]	; (80132e4 <LoRaMacInitialization+0x6f0>)
 8013112:	2100      	movs	r1, #0
 8013114:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 8013116:	4a72      	ldr	r2, [pc, #456]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013118:	23d0      	movs	r3, #208	; 0xd0
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	2101      	movs	r1, #1
 801311e:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8013120:	4b6f      	ldr	r3, [pc, #444]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013122:	4a6e      	ldr	r2, [pc, #440]	; (80132dc <LoRaMacInitialization+0x6e8>)
 8013124:	589a      	ldr	r2, [r3, r2]
 8013126:	23a8      	movs	r3, #168	; 0xa8
 8013128:	005b      	lsls	r3, r3, #1
 801312a:	2100      	movs	r1, #0
 801312c:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 801312e:	4b6c      	ldr	r3, [pc, #432]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013130:	4a6a      	ldr	r2, [pc, #424]	; (80132dc <LoRaMacInitialization+0x6e8>)
 8013132:	589a      	ldr	r2, [r3, r2]
 8013134:	23aa      	movs	r3, #170	; 0xaa
 8013136:	005b      	lsls	r3, r3, #1
 8013138:	2100      	movs	r1, #0
 801313a:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801313c:	4b6a      	ldr	r3, [pc, #424]	; (80132e8 <LoRaMacInitialization+0x6f4>)
 801313e:	2201      	movs	r2, #1
 8013140:	4251      	negs	r1, r2
 8013142:	486a      	ldr	r0, [pc, #424]	; (80132ec <LoRaMacInitialization+0x6f8>)
 8013144:	2200      	movs	r2, #0
 8013146:	9200      	str	r2, [sp, #0]
 8013148:	2200      	movs	r2, #0
 801314a:	f009 fbdb 	bl	801c904 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801314e:	4b68      	ldr	r3, [pc, #416]	; (80132f0 <LoRaMacInitialization+0x6fc>)
 8013150:	2201      	movs	r2, #1
 8013152:	4251      	negs	r1, r2
 8013154:	4867      	ldr	r0, [pc, #412]	; (80132f4 <LoRaMacInitialization+0x700>)
 8013156:	2200      	movs	r2, #0
 8013158:	9200      	str	r2, [sp, #0]
 801315a:	2200      	movs	r2, #0
 801315c:	f009 fbd2 	bl	801c904 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013160:	4b65      	ldr	r3, [pc, #404]	; (80132f8 <LoRaMacInitialization+0x704>)
 8013162:	2201      	movs	r2, #1
 8013164:	4251      	negs	r1, r2
 8013166:	4865      	ldr	r0, [pc, #404]	; (80132fc <LoRaMacInitialization+0x708>)
 8013168:	2200      	movs	r2, #0
 801316a:	9200      	str	r2, [sp, #0]
 801316c:	2200      	movs	r2, #0
 801316e:	f009 fbc9 	bl	801c904 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013172:	4b63      	ldr	r3, [pc, #396]	; (8013300 <LoRaMacInitialization+0x70c>)
 8013174:	2201      	movs	r2, #1
 8013176:	4251      	negs	r1, r2
 8013178:	4862      	ldr	r0, [pc, #392]	; (8013304 <LoRaMacInitialization+0x710>)
 801317a:	2200      	movs	r2, #0
 801317c:	9200      	str	r2, [sp, #0]
 801317e:	2200      	movs	r2, #0
 8013180:	f009 fbc0 	bl	801c904 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 8013184:	4b56      	ldr	r3, [pc, #344]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013186:	4a55      	ldr	r2, [pc, #340]	; (80132dc <LoRaMacInitialization+0x6e8>)
 8013188:	589d      	ldr	r5, [r3, r2]
 801318a:	23ac      	movs	r3, #172	; 0xac
 801318c:	005c      	lsls	r4, r3, #1
 801318e:	003b      	movs	r3, r7
 8013190:	0018      	movs	r0, r3
 8013192:	f009 fb87 	bl	801c8a4 <SysTimeGetMcuTime>
 8013196:	003a      	movs	r2, r7
 8013198:	192b      	adds	r3, r5, r4
 801319a:	ca03      	ldmia	r2!, {r0, r1}
 801319c:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801319e:	4a50      	ldr	r2, [pc, #320]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80131a0:	23d3      	movs	r3, #211	; 0xd3
 80131a2:	009b      	lsls	r3, r3, #2
 80131a4:	4958      	ldr	r1, [pc, #352]	; (8013308 <LoRaMacInitialization+0x714>)
 80131a6:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80131a8:	4a4d      	ldr	r2, [pc, #308]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80131aa:	23d5      	movs	r3, #213	; 0xd5
 80131ac:	009b      	lsls	r3, r3, #2
 80131ae:	4957      	ldr	r1, [pc, #348]	; (801330c <LoRaMacInitialization+0x718>)
 80131b0:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80131b2:	4a4b      	ldr	r2, [pc, #300]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80131b4:	23d7      	movs	r3, #215	; 0xd7
 80131b6:	009b      	lsls	r3, r3, #2
 80131b8:	4955      	ldr	r1, [pc, #340]	; (8013310 <LoRaMacInitialization+0x71c>)
 80131ba:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80131bc:	4a48      	ldr	r2, [pc, #288]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80131be:	23d4      	movs	r3, #212	; 0xd4
 80131c0:	009b      	lsls	r3, r3, #2
 80131c2:	4954      	ldr	r1, [pc, #336]	; (8013314 <LoRaMacInitialization+0x720>)
 80131c4:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80131c6:	4a46      	ldr	r2, [pc, #280]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80131c8:	23d6      	movs	r3, #214	; 0xd6
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	4952      	ldr	r1, [pc, #328]	; (8013318 <LoRaMacInitialization+0x724>)
 80131ce:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 80131d0:	4b52      	ldr	r3, [pc, #328]	; (801331c <LoRaMacInitialization+0x728>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	4a52      	ldr	r2, [pc, #328]	; (8013320 <LoRaMacInitialization+0x72c>)
 80131d6:	0010      	movs	r0, r2
 80131d8:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 80131da:	4b52      	ldr	r3, [pc, #328]	; (8013324 <LoRaMacInitialization+0x730>)
 80131dc:	0018      	movs	r0, r3
 80131de:	f7fa f891 	bl	800d304 <SecureElementInit>
 80131e2:	1e03      	subs	r3, r0, #0
 80131e4:	d001      	beq.n	80131ea <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80131e6:	2311      	movs	r3, #17
 80131e8:	e073      	b.n	80132d2 <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 80131ea:	4b4f      	ldr	r3, [pc, #316]	; (8013328 <LoRaMacInitialization+0x734>)
 80131ec:	0018      	movs	r0, r3
 80131ee:	f002 fc0d 	bl	8015a0c <LoRaMacCryptoInit>
 80131f2:	1e03      	subs	r3, r0, #0
 80131f4:	d001      	beq.n	80131fa <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80131f6:	2311      	movs	r3, #17
 80131f8:	e06b      	b.n	80132d2 <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 80131fa:	4b4c      	ldr	r3, [pc, #304]	; (801332c <LoRaMacInitialization+0x738>)
 80131fc:	0018      	movs	r0, r3
 80131fe:	f001 fc0d 	bl	8014a1c <LoRaMacCommandsInit>
 8013202:	1e03      	subs	r3, r0, #0
 8013204:	d001      	beq.n	801320a <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013206:	2313      	movs	r3, #19
 8013208:	e063      	b.n	80132d2 <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801320a:	4b35      	ldr	r3, [pc, #212]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 801320c:	4a33      	ldr	r2, [pc, #204]	; (80132dc <LoRaMacInitialization+0x6e8>)
 801320e:	589b      	ldr	r3, [r3, r2]
 8013210:	3350      	adds	r3, #80	; 0x50
 8013212:	0018      	movs	r0, r3
 8013214:	f002 fd10 	bl	8015c38 <LoRaMacCryptoSetMulticastReference>
 8013218:	1e03      	subs	r3, r0, #0
 801321a:	d001      	beq.n	8013220 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801321c:	2311      	movs	r3, #17
 801321e:	e058      	b.n	80132d2 <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013220:	4b3e      	ldr	r3, [pc, #248]	; (801331c <LoRaMacInitialization+0x728>)
 8013222:	695b      	ldr	r3, [r3, #20]
 8013224:	4798      	blx	r3
 8013226:	0003      	movs	r3, r0
 8013228:	0018      	movs	r0, r3
 801322a:	f006 f83f 	bl	80192ac <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 801322e:	4b3b      	ldr	r3, [pc, #236]	; (801331c <LoRaMacInitialization+0x728>)
 8013230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013232:	4a2b      	ldr	r2, [pc, #172]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013234:	4929      	ldr	r1, [pc, #164]	; (80132dc <LoRaMacInitialization+0x6e8>)
 8013236:	5852      	ldr	r2, [r2, r1]
 8013238:	217d      	movs	r1, #125	; 0x7d
 801323a:	5c52      	ldrb	r2, [r2, r1]
 801323c:	0010      	movs	r0, r2
 801323e:	4798      	blx	r3
    Radio.Sleep( );
 8013240:	4b36      	ldr	r3, [pc, #216]	; (801331c <LoRaMacInitialization+0x728>)
 8013242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013244:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013246:	2144      	movs	r1, #68	; 0x44
 8013248:	187b      	adds	r3, r7, r1
 801324a:	2200      	movs	r2, #0
 801324c:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 801324e:	187b      	adds	r3, r7, r1
 8013250:	2200      	movs	r2, #0
 8013252:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d007      	beq.n	801326a <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	685a      	ldr	r2, [r3, #4]
 801325e:	187b      	adds	r3, r7, r1
 8013260:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	68da      	ldr	r2, [r3, #12]
 8013266:	187b      	adds	r3, r7, r1
 8013268:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801326a:	2124      	movs	r1, #36	; 0x24
 801326c:	187b      	adds	r3, r7, r1
 801326e:	4a30      	ldr	r2, [pc, #192]	; (8013330 <LoRaMacInitialization+0x73c>)
 8013270:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013272:	187b      	adds	r3, r7, r1
 8013274:	4a2f      	ldr	r2, [pc, #188]	; (8013334 <LoRaMacInitialization+0x740>)
 8013276:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013278:	187b      	adds	r3, r7, r1
 801327a:	4a2f      	ldr	r2, [pc, #188]	; (8013338 <LoRaMacInitialization+0x744>)
 801327c:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801327e:	187b      	adds	r3, r7, r1
 8013280:	4a2e      	ldr	r2, [pc, #184]	; (801333c <LoRaMacInitialization+0x748>)
 8013282:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 8013284:	4b16      	ldr	r3, [pc, #88]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013286:	4a15      	ldr	r2, [pc, #84]	; (80132dc <LoRaMacInitialization+0x6e8>)
 8013288:	589b      	ldr	r3, [r3, r2]
 801328a:	334c      	adds	r3, #76	; 0x4c
 801328c:	001a      	movs	r2, r3
 801328e:	187b      	adds	r3, r7, r1
 8013290:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 8013292:	4b13      	ldr	r3, [pc, #76]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 8013294:	4a11      	ldr	r2, [pc, #68]	; (80132dc <LoRaMacInitialization+0x6e8>)
 8013296:	589b      	ldr	r3, [r3, r2]
 8013298:	001a      	movs	r2, r3
 801329a:	187b      	adds	r3, r7, r1
 801329c:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 801329e:	4b10      	ldr	r3, [pc, #64]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80132a0:	4a0e      	ldr	r2, [pc, #56]	; (80132dc <LoRaMacInitialization+0x6e8>)
 80132a2:	589b      	ldr	r3, [r3, r2]
 80132a4:	3384      	adds	r3, #132	; 0x84
 80132a6:	001a      	movs	r2, r3
 80132a8:	187b      	adds	r3, r7, r1
 80132aa:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 80132ac:	4b0c      	ldr	r3, [pc, #48]	; (80132e0 <LoRaMacInitialization+0x6ec>)
 80132ae:	4a0b      	ldr	r2, [pc, #44]	; (80132dc <LoRaMacInitialization+0x6e8>)
 80132b0:	589b      	ldr	r3, [r3, r2]
 80132b2:	3350      	adds	r3, #80	; 0x50
 80132b4:	001a      	movs	r2, r3
 80132b6:	0008      	movs	r0, r1
 80132b8:	187b      	adds	r3, r7, r1
 80132ba:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80132bc:	4a20      	ldr	r2, [pc, #128]	; (8013340 <LoRaMacInitialization+0x74c>)
 80132be:	2344      	movs	r3, #68	; 0x44
 80132c0:	18f9      	adds	r1, r7, r3
 80132c2:	183b      	adds	r3, r7, r0
 80132c4:	0018      	movs	r0, r3
 80132c6:	f001 f994 	bl	80145f2 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80132ca:	2001      	movs	r0, #1
 80132cc:	f7fc fe10 	bl	800fef0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80132d0:	2300      	movs	r3, #0
}
 80132d2:	0018      	movs	r0, r3
 80132d4:	46bd      	mov	sp, r7
 80132d6:	b016      	add	sp, #88	; 0x58
 80132d8:	bdb0      	pop	{r4, r5, r7, pc}
 80132da:	46c0      	nop			; (mov r8, r8)
 80132dc:	00000484 	.word	0x00000484
 80132e0:	20000548 	.word	0x20000548
 80132e4:	00000481 	.word	0x00000481
 80132e8:	080102f5 	.word	0x080102f5
 80132ec:	200008b0 	.word	0x200008b0
 80132f0:	08010381 	.word	0x08010381
 80132f4:	200008c8 	.word	0x200008c8
 80132f8:	08010415 	.word	0x08010415
 80132fc:	200008e0 	.word	0x200008e0
 8013300:	080104b1 	.word	0x080104b1
 8013304:	20000940 	.word	0x20000940
 8013308:	0800edd9 	.word	0x0800edd9
 801330c:	0800ee45 	.word	0x0800ee45
 8013310:	0800ef19 	.word	0x0800ef19
 8013314:	0800eed5 	.word	0x0800eed5
 8013318:	0800ef5d 	.word	0x0800ef5d
 801331c:	0801f0b4 	.word	0x0801f0b4
 8013320:	20000894 	.word	0x20000894
 8013324:	08012ac1 	.word	0x08012ac1
 8013328:	08012ab1 	.word	0x08012ab1
 801332c:	08012ad1 	.word	0x08012ad1
 8013330:	200009ac 	.word	0x200009ac
 8013334:	20000964 	.word	0x20000964
 8013338:	20000998 	.word	0x20000998
 801333c:	200009c9 	.word	0x200009c9
 8013340:	08012ae1 	.word	0x08012ae1

08013344 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013344:	b580      	push	{r7, lr}
 8013346:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013348:	4a04      	ldr	r2, [pc, #16]	; (801335c <LoRaMacStart+0x18>)
 801334a:	23d0      	movs	r3, #208	; 0xd0
 801334c:	009b      	lsls	r3, r3, #2
 801334e:	2100      	movs	r1, #0
 8013350:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8013352:	2300      	movs	r3, #0
}
 8013354:	0018      	movs	r0, r3
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}
 801335a:	46c0      	nop			; (mov r8, r8)
 801335c:	20000548 	.word	0x20000548

08013360 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013360:	b590      	push	{r4, r7, lr}
 8013362:	b08b      	sub	sp, #44	; 0x2c
 8013364:	af00      	add	r7, sp, #0
 8013366:	0002      	movs	r2, r0
 8013368:	6039      	str	r1, [r7, #0]
 801336a:	1dfb      	adds	r3, r7, #7
 801336c:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801336e:	4b4f      	ldr	r3, [pc, #316]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 8013370:	4a4f      	ldr	r2, [pc, #316]	; (80134b0 <LoRaMacQueryTxPossible+0x150>)
 8013372:	589b      	ldr	r3, [r3, r2]
 8013374:	2280      	movs	r2, #128	; 0x80
 8013376:	589b      	ldr	r3, [r3, r2]
 8013378:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 801337a:	4b4c      	ldr	r3, [pc, #304]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 801337c:	4a4c      	ldr	r2, [pc, #304]	; (80134b0 <LoRaMacQueryTxPossible+0x150>)
 801337e:	589b      	ldr	r3, [r3, r2]
 8013380:	2205      	movs	r2, #5
 8013382:	569a      	ldrsb	r2, [r3, r2]
 8013384:	230f      	movs	r3, #15
 8013386:	18fb      	adds	r3, r7, r3
 8013388:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 801338a:	4b48      	ldr	r3, [pc, #288]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 801338c:	4a48      	ldr	r2, [pc, #288]	; (80134b0 <LoRaMacQueryTxPossible+0x150>)
 801338e:	589b      	ldr	r3, [r3, r2]
 8013390:	2204      	movs	r2, #4
 8013392:	569a      	ldrsb	r2, [r3, r2]
 8013394:	230e      	movs	r3, #14
 8013396:	18fb      	adds	r3, r7, r3
 8013398:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 801339a:	2300      	movs	r3, #0
 801339c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d101      	bne.n	80133a8 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80133a4:	2303      	movs	r3, #3
 80133a6:	e07d      	b.n	80134a4 <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 80133a8:	4b40      	ldr	r3, [pc, #256]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 80133aa:	4a41      	ldr	r2, [pc, #260]	; (80134b0 <LoRaMacQueryTxPossible+0x150>)
 80133ac:	5899      	ldr	r1, [r3, r2]
 80133ae:	2014      	movs	r0, #20
 80133b0:	183b      	adds	r3, r7, r0
 80133b2:	22b0      	movs	r2, #176	; 0xb0
 80133b4:	0052      	lsls	r2, r2, #1
 80133b6:	588a      	ldr	r2, [r1, r2]
 80133b8:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 80133ba:	183b      	adds	r3, r7, r0
 80133bc:	2200      	movs	r2, #0
 80133be:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80133c0:	4b3a      	ldr	r3, [pc, #232]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 80133c2:	4a3b      	ldr	r2, [pc, #236]	; (80134b0 <LoRaMacQueryTxPossible+0x150>)
 80133c4:	589b      	ldr	r3, [r3, r2]
 80133c6:	227e      	movs	r2, #126	; 0x7e
 80133c8:	5c9a      	ldrb	r2, [r3, r2]
 80133ca:	183b      	adds	r3, r7, r0
 80133cc:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80133ce:	4b37      	ldr	r3, [pc, #220]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 80133d0:	4a37      	ldr	r2, [pc, #220]	; (80134b0 <LoRaMacQueryTxPossible+0x150>)
 80133d2:	589b      	ldr	r3, [r3, r2]
 80133d4:	2280      	movs	r2, #128	; 0x80
 80133d6:	589a      	ldr	r2, [r3, r2]
 80133d8:	183b      	adds	r3, r7, r0
 80133da:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80133dc:	4a33      	ldr	r2, [pc, #204]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 80133de:	23fd      	movs	r3, #253	; 0xfd
 80133e0:	009b      	lsls	r3, r3, #2
 80133e2:	5ad2      	ldrh	r2, [r2, r3]
 80133e4:	183b      	adds	r3, r7, r0
 80133e6:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80133e8:	4b30      	ldr	r3, [pc, #192]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 80133ea:	4a32      	ldr	r2, [pc, #200]	; (80134b4 <LoRaMacQueryTxPossible+0x154>)
 80133ec:	5a9a      	ldrh	r2, [r3, r2]
 80133ee:	183b      	adds	r3, r7, r0
 80133f0:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80133f2:	4b2e      	ldr	r3, [pc, #184]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 80133f4:	4a2e      	ldr	r2, [pc, #184]	; (80134b0 <LoRaMacQueryTxPossible+0x150>)
 80133f6:	589b      	ldr	r3, [r3, r2]
 80133f8:	2285      	movs	r2, #133	; 0x85
 80133fa:	569a      	ldrsb	r2, [r3, r2]
 80133fc:	183b      	adds	r3, r7, r0
 80133fe:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013400:	4b2a      	ldr	r3, [pc, #168]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 8013402:	4a2b      	ldr	r2, [pc, #172]	; (80134b0 <LoRaMacQueryTxPossible+0x150>)
 8013404:	589b      	ldr	r3, [r3, r2]
 8013406:	2284      	movs	r2, #132	; 0x84
 8013408:	569a      	ldrsb	r2, [r3, r2]
 801340a:	183b      	adds	r3, r7, r0
 801340c:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801340e:	4b27      	ldr	r3, [pc, #156]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 8013410:	4a27      	ldr	r2, [pc, #156]	; (80134b0 <LoRaMacQueryTxPossible+0x150>)
 8013412:	589b      	ldr	r3, [r3, r2]
 8013414:	22b8      	movs	r2, #184	; 0xb8
 8013416:	5c9a      	ldrb	r2, [r3, r2]
 8013418:	183b      	adds	r3, r7, r0
 801341a:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 801341c:	4b23      	ldr	r3, [pc, #140]	; (80134ac <LoRaMacQueryTxPossible+0x14c>)
 801341e:	4a24      	ldr	r2, [pc, #144]	; (80134b0 <LoRaMacQueryTxPossible+0x150>)
 8013420:	589b      	ldr	r3, [r3, r2]
 8013422:	781a      	ldrb	r2, [r3, #0]
 8013424:	183b      	adds	r3, r7, r0
 8013426:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8013428:	2310      	movs	r3, #16
 801342a:	18fb      	adds	r3, r7, r3
 801342c:	220e      	movs	r2, #14
 801342e:	18ba      	adds	r2, r7, r2
 8013430:	240f      	movs	r4, #15
 8013432:	1939      	adds	r1, r7, r4
 8013434:	1838      	adds	r0, r7, r0
 8013436:	f001 f8c4 	bl	80145c2 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801343a:	193b      	adds	r3, r7, r4
 801343c:	781b      	ldrb	r3, [r3, #0]
 801343e:	b25b      	sxtb	r3, r3
 8013440:	0018      	movs	r0, r3
 8013442:	f7fd f9e7 	bl	8010814 <GetMaxAppPayloadWithoutFOptsLength>
 8013446:	0003      	movs	r3, r0
 8013448:	001a      	movs	r2, r3
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801344e:	2308      	movs	r3, #8
 8013450:	18fb      	adds	r3, r7, r3
 8013452:	0018      	movs	r0, r3
 8013454:	f001 fbf6 	bl	8014c44 <LoRaMacCommandsGetSizeSerializedCmds>
 8013458:	1e03      	subs	r3, r0, #0
 801345a:	d001      	beq.n	8013460 <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801345c:	2313      	movs	r3, #19
 801345e:	e021      	b.n	80134a4 <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	2b0f      	cmp	r3, #15
 8013464:	d81a      	bhi.n	801349c <LoRaMacQueryTxPossible+0x13c>
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	785b      	ldrb	r3, [r3, #1]
 801346a:	001a      	movs	r2, r3
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	429a      	cmp	r2, r3
 8013470:	d314      	bcc.n	801349c <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	785a      	ldrb	r2, [r3, #1]
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	b2db      	uxtb	r3, r3
 801347a:	1ad3      	subs	r3, r2, r3
 801347c:	b2da      	uxtb	r2, r3
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	785b      	ldrb	r3, [r3, #1]
 8013486:	0019      	movs	r1, r3
 8013488:	1dfb      	adds	r3, r7, #7
 801348a:	781a      	ldrb	r2, [r3, #0]
 801348c:	68bb      	ldr	r3, [r7, #8]
 801348e:	18d3      	adds	r3, r2, r3
 8013490:	4299      	cmp	r1, r3
 8013492:	d301      	bcc.n	8013498 <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 8013494:	2300      	movs	r3, #0
 8013496:	e005      	b.n	80134a4 <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013498:	2308      	movs	r3, #8
 801349a:	e003      	b.n	80134a4 <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	2200      	movs	r2, #0
 80134a0:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80134a2:	2308      	movs	r3, #8
    }
}
 80134a4:	0018      	movs	r0, r3
 80134a6:	46bd      	mov	sp, r7
 80134a8:	b00b      	add	sp, #44	; 0x2c
 80134aa:	bd90      	pop	{r4, r7, pc}
 80134ac:	20000548 	.word	0x20000548
 80134b0:	00000484 	.word	0x00000484
 80134b4:	000003f6 	.word	0x000003f6

080134b8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80134b8:	b590      	push	{r4, r7, lr}
 80134ba:	b087      	sub	sp, #28
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80134c0:	2317      	movs	r3, #23
 80134c2:	18fb      	adds	r3, r7, r3
 80134c4:	2200      	movs	r2, #0
 80134c6:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d101      	bne.n	80134d2 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80134ce:	2303      	movs	r3, #3
 80134d0:	e146      	b.n	8013760 <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	2b28      	cmp	r3, #40	; 0x28
 80134d8:	d900      	bls.n	80134dc <LoRaMacMibGetRequestConfirm+0x24>
 80134da:	e135      	b.n	8013748 <LoRaMacMibGetRequestConfirm+0x290>
 80134dc:	009a      	lsls	r2, r3, #2
 80134de:	4ba2      	ldr	r3, [pc, #648]	; (8013768 <LoRaMacMibGetRequestConfirm+0x2b0>)
 80134e0:	18d3      	adds	r3, r2, r3
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 80134e6:	4ba1      	ldr	r3, [pc, #644]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80134e8:	4aa1      	ldr	r2, [pc, #644]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80134ea:	589b      	ldr	r3, [r3, r2]
 80134ec:	227c      	movs	r2, #124	; 0x7c
 80134ee:	5c9a      	ldrb	r2, [r3, r2]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	711a      	strb	r2, [r3, #4]
            break;
 80134f4:	e131      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 80134f6:	4b9d      	ldr	r3, [pc, #628]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80134f8:	4a9d      	ldr	r2, [pc, #628]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80134fa:	589a      	ldr	r2, [r3, r2]
 80134fc:	23b2      	movs	r3, #178	; 0xb2
 80134fe:	005b      	lsls	r3, r3, #1
 8013500:	5cd2      	ldrb	r2, [r2, r3]
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	711a      	strb	r2, [r3, #4]
            break;
 8013506:	e128      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8013508:	f7fa fb5c 	bl	800dbc4 <SecureElementGetDevEui>
 801350c:	0002      	movs	r2, r0
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	605a      	str	r2, [r3, #4]
            break;
 8013512:	e122      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8013514:	f7fa fb7a 	bl	800dc0c <SecureElementGetJoinEui>
 8013518:	0002      	movs	r2, r0
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	605a      	str	r2, [r3, #4]
            break;
 801351e:	e11c      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8013520:	4b92      	ldr	r3, [pc, #584]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013522:	4a93      	ldr	r2, [pc, #588]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013524:	589b      	ldr	r3, [r3, r2]
 8013526:	227e      	movs	r2, #126	; 0x7e
 8013528:	5c9a      	ldrb	r2, [r3, r2]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	711a      	strb	r2, [r3, #4]
            break;
 801352e:	e114      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8013530:	4b8e      	ldr	r3, [pc, #568]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013532:	4a8f      	ldr	r2, [pc, #572]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013534:	589b      	ldr	r3, [r3, r2]
 8013536:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	605a      	str	r2, [r3, #4]
            break;
 801353c:	e10d      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 801353e:	4b8b      	ldr	r3, [pc, #556]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013540:	4a8b      	ldr	r2, [pc, #556]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013542:	589b      	ldr	r3, [r3, r2]
 8013544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	605a      	str	r2, [r3, #4]
            break;
 801354a:	e106      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 801354c:	4b87      	ldr	r3, [pc, #540]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801354e:	4a88      	ldr	r2, [pc, #544]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013550:	589b      	ldr	r3, [r3, r2]
 8013552:	227d      	movs	r2, #125	; 0x7d
 8013554:	5c9a      	ldrb	r2, [r3, r2]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	711a      	strb	r2, [r3, #4]
            break;
 801355a:	e0fe      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801355c:	4b83      	ldr	r3, [pc, #524]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801355e:	4a84      	ldr	r2, [pc, #528]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013560:	589b      	ldr	r3, [r3, r2]
 8013562:	22ca      	movs	r2, #202	; 0xca
 8013564:	5c9a      	ldrb	r2, [r3, r2]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	711a      	strb	r2, [r3, #4]
            break;
 801356a:	e0f6      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 801356c:	2110      	movs	r1, #16
 801356e:	187b      	adds	r3, r7, r1
 8013570:	221d      	movs	r2, #29
 8013572:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013574:	4b7d      	ldr	r3, [pc, #500]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013576:	4a7e      	ldr	r2, [pc, #504]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013578:	589b      	ldr	r3, [r3, r2]
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	187a      	adds	r2, r7, r1
 801357e:	0011      	movs	r1, r2
 8013580:	0018      	movs	r0, r3
 8013582:	f003 fa38 	bl	80169f6 <RegionGetPhyParam>
 8013586:	0003      	movs	r3, r0
 8013588:	001a      	movs	r2, r3
 801358a:	210c      	movs	r1, #12
 801358c:	187b      	adds	r3, r7, r1
 801358e:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013590:	187b      	adds	r3, r7, r1
 8013592:	681a      	ldr	r2, [r3, #0]
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	605a      	str	r2, [r3, #4]
            break;
 8013598:	e0df      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 801359a:	4b74      	ldr	r3, [pc, #464]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801359c:	4a74      	ldr	r2, [pc, #464]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801359e:	589a      	ldr	r2, [r3, r2]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	21a8      	movs	r1, #168	; 0xa8
 80135a4:	3304      	adds	r3, #4
 80135a6:	1852      	adds	r2, r2, r1
 80135a8:	ca03      	ldmia	r2!, {r0, r1}
 80135aa:	c303      	stmia	r3!, {r0, r1}
            break;
 80135ac:	e0d5      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80135ae:	4b6f      	ldr	r3, [pc, #444]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80135b0:	4a6f      	ldr	r2, [pc, #444]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80135b2:	589a      	ldr	r2, [r3, r2]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	3304      	adds	r3, #4
 80135b8:	3228      	adds	r2, #40	; 0x28
 80135ba:	ca03      	ldmia	r2!, {r0, r1}
 80135bc:	c303      	stmia	r3!, {r0, r1}
            break;
 80135be:	e0cc      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 80135c0:	4b6a      	ldr	r3, [pc, #424]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80135c2:	4a6b      	ldr	r2, [pc, #428]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80135c4:	589a      	ldr	r2, [r3, r2]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	21b0      	movs	r1, #176	; 0xb0
 80135ca:	3304      	adds	r3, #4
 80135cc:	1852      	adds	r2, r2, r1
 80135ce:	ca03      	ldmia	r2!, {r0, r1}
 80135d0:	c303      	stmia	r3!, {r0, r1}
            break;
 80135d2:	e0c2      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80135d4:	4b65      	ldr	r3, [pc, #404]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80135d6:	4a66      	ldr	r2, [pc, #408]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80135d8:	589a      	ldr	r2, [r3, r2]
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	3304      	adds	r3, #4
 80135de:	3230      	adds	r2, #48	; 0x30
 80135e0:	ca03      	ldmia	r2!, {r0, r1}
 80135e2:	c303      	stmia	r3!, {r0, r1}
            break;
 80135e4:	e0b9      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80135e6:	2110      	movs	r1, #16
 80135e8:	187b      	adds	r3, r7, r1
 80135ea:	221b      	movs	r2, #27
 80135ec:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80135ee:	4b5f      	ldr	r3, [pc, #380]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80135f0:	4a5f      	ldr	r2, [pc, #380]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80135f2:	589b      	ldr	r3, [r3, r2]
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	187a      	adds	r2, r7, r1
 80135f8:	0011      	movs	r1, r2
 80135fa:	0018      	movs	r0, r3
 80135fc:	f003 f9fb 	bl	80169f6 <RegionGetPhyParam>
 8013600:	0003      	movs	r3, r0
 8013602:	001a      	movs	r2, r3
 8013604:	210c      	movs	r1, #12
 8013606:	187b      	adds	r3, r7, r1
 8013608:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801360a:	187b      	adds	r3, r7, r1
 801360c:	681a      	ldr	r2, [r3, #0]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	605a      	str	r2, [r3, #4]
            break;
 8013612:	e0a2      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013614:	2110      	movs	r1, #16
 8013616:	187b      	adds	r3, r7, r1
 8013618:	221a      	movs	r2, #26
 801361a:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801361c:	4b53      	ldr	r3, [pc, #332]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801361e:	4a54      	ldr	r2, [pc, #336]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013620:	589b      	ldr	r3, [r3, r2]
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	187a      	adds	r2, r7, r1
 8013626:	0011      	movs	r1, r2
 8013628:	0018      	movs	r0, r3
 801362a:	f003 f9e4 	bl	80169f6 <RegionGetPhyParam>
 801362e:	0003      	movs	r3, r0
 8013630:	001a      	movs	r2, r3
 8013632:	210c      	movs	r1, #12
 8013634:	187b      	adds	r3, r7, r1
 8013636:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8013638:	187b      	adds	r3, r7, r1
 801363a:	681a      	ldr	r2, [r3, #0]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	605a      	str	r2, [r3, #4]
            break;
 8013640:	e08b      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8013642:	4b4a      	ldr	r3, [pc, #296]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013644:	4a4a      	ldr	r2, [pc, #296]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013646:	589b      	ldr	r3, [r3, r2]
 8013648:	22a4      	movs	r2, #164	; 0xa4
 801364a:	5c9a      	ldrb	r2, [r3, r2]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	711a      	strb	r2, [r3, #4]
            break;
 8013650:	e083      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8013652:	4b46      	ldr	r3, [pc, #280]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013654:	4a46      	ldr	r2, [pc, #280]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013656:	589b      	ldr	r3, [r3, r2]
 8013658:	2290      	movs	r2, #144	; 0x90
 801365a:	589a      	ldr	r2, [r3, r2]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	605a      	str	r2, [r3, #4]
            break;
 8013660:	e07b      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8013662:	4b42      	ldr	r3, [pc, #264]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013664:	4a42      	ldr	r2, [pc, #264]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013666:	589b      	ldr	r3, [r3, r2]
 8013668:	2294      	movs	r2, #148	; 0x94
 801366a:	589a      	ldr	r2, [r3, r2]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	605a      	str	r2, [r3, #4]
            break;
 8013670:	e073      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8013672:	4b3e      	ldr	r3, [pc, #248]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013674:	4a3e      	ldr	r2, [pc, #248]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013676:	589b      	ldr	r3, [r3, r2]
 8013678:	2298      	movs	r2, #152	; 0x98
 801367a:	589a      	ldr	r2, [r3, r2]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	605a      	str	r2, [r3, #4]
            break;
 8013680:	e06b      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8013682:	4b3a      	ldr	r3, [pc, #232]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013684:	4a3a      	ldr	r2, [pc, #232]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013686:	589b      	ldr	r3, [r3, r2]
 8013688:	229c      	movs	r2, #156	; 0x9c
 801368a:	589a      	ldr	r2, [r3, r2]
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	605a      	str	r2, [r3, #4]
            break;
 8013690:	e063      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8013692:	4b36      	ldr	r3, [pc, #216]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013694:	4a36      	ldr	r2, [pc, #216]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013696:	589b      	ldr	r3, [r3, r2]
 8013698:	22a0      	movs	r2, #160	; 0xa0
 801369a:	589a      	ldr	r2, [r3, r2]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	605a      	str	r2, [r3, #4]
            break;
 80136a0:	e05b      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80136a2:	4b32      	ldr	r3, [pc, #200]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136a4:	4a32      	ldr	r2, [pc, #200]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136a6:	589b      	ldr	r3, [r3, r2]
 80136a8:	2205      	movs	r2, #5
 80136aa:	569a      	ldrsb	r2, [r3, r2]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	711a      	strb	r2, [r3, #4]
            break;
 80136b0:	e053      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80136b2:	4b2e      	ldr	r3, [pc, #184]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136b4:	4a2e      	ldr	r2, [pc, #184]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136b6:	589b      	ldr	r3, [r3, r2]
 80136b8:	2285      	movs	r2, #133	; 0x85
 80136ba:	569a      	ldrsb	r2, [r3, r2]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	711a      	strb	r2, [r3, #4]
            break;
 80136c0:	e04b      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80136c2:	4b2a      	ldr	r3, [pc, #168]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136c4:	4a2a      	ldr	r2, [pc, #168]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136c6:	589b      	ldr	r3, [r3, r2]
 80136c8:	2204      	movs	r2, #4
 80136ca:	569a      	ldrsb	r2, [r3, r2]
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	711a      	strb	r2, [r3, #4]
            break;
 80136d0:	e043      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80136d2:	4b26      	ldr	r3, [pc, #152]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136d4:	4a26      	ldr	r2, [pc, #152]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136d6:	589b      	ldr	r3, [r3, r2]
 80136d8:	2284      	movs	r2, #132	; 0x84
 80136da:	569a      	ldrsb	r2, [r3, r2]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	711a      	strb	r2, [r3, #4]
            break;
 80136e0:	e03b      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 80136e2:	4b22      	ldr	r3, [pc, #136]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136e4:	4a22      	ldr	r2, [pc, #136]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136e6:	589b      	ldr	r3, [r3, r2]
 80136e8:	2288      	movs	r2, #136	; 0x88
 80136ea:	589a      	ldr	r2, [r3, r2]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	605a      	str	r2, [r3, #4]
            break;
 80136f0:	e033      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 80136f2:	4b1e      	ldr	r3, [pc, #120]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136f4:	4a1e      	ldr	r2, [pc, #120]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136f6:	589b      	ldr	r3, [r3, r2]
 80136f8:	228c      	movs	r2, #140	; 0x8c
 80136fa:	5c9a      	ldrb	r2, [r3, r2]
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	711a      	strb	r2, [r3, #4]
            break;
 8013700:	e02b      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8013702:	4b1a      	ldr	r3, [pc, #104]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013704:	4a1a      	ldr	r2, [pc, #104]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013706:	589b      	ldr	r3, [r3, r2]
 8013708:	22c0      	movs	r2, #192	; 0xc0
 801370a:	589a      	ldr	r2, [r3, r2]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	605a      	str	r2, [r3, #4]
            break;
 8013710:	e023      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 8013712:	f7fe ff23 	bl	801255c <GetCtxs>
 8013716:	0002      	movs	r2, r0
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	605a      	str	r2, [r3, #4]
            break;
 801371c:	e01d      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 801371e:	4b13      	ldr	r3, [pc, #76]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013720:	4a13      	ldr	r2, [pc, #76]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013722:	589b      	ldr	r3, [r3, r2]
 8013724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	605a      	str	r2, [r3, #4]
            break;
 801372a:	e016      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 801372c:	4b0f      	ldr	r3, [pc, #60]	; (801376c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801372e:	4a10      	ldr	r2, [pc, #64]	; (8013770 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013730:	5899      	ldr	r1, [r3, r2]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	22b0      	movs	r2, #176	; 0xb0
 8013736:	0052      	lsls	r2, r2, #1
 8013738:	588a      	ldr	r2, [r1, r2]
 801373a:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801373c:	687c      	ldr	r4, [r7, #4]
 801373e:	f003 fb55 	bl	8016dec <RegionGetVersion>
 8013742:	0003      	movs	r3, r0
 8013744:	60a3      	str	r3, [r4, #8]
            break;
 8013746:	e008      	b.n	801375a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013748:	2317      	movs	r3, #23
 801374a:	18fc      	adds	r4, r7, r3
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	0018      	movs	r0, r3
 8013750:	f000 ffed 	bl	801472e <LoRaMacClassBMibGetRequestConfirm>
 8013754:	0003      	movs	r3, r0
 8013756:	7023      	strb	r3, [r4, #0]
            break;
 8013758:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 801375a:	2317      	movs	r3, #23
 801375c:	18fb      	adds	r3, r7, r3
 801375e:	781b      	ldrb	r3, [r3, #0]
}
 8013760:	0018      	movs	r0, r3
 8013762:	46bd      	mov	sp, r7
 8013764:	b007      	add	sp, #28
 8013766:	bd90      	pop	{r4, r7, pc}
 8013768:	0801ec68 	.word	0x0801ec68
 801376c:	20000548 	.word	0x20000548
 8013770:	00000484 	.word	0x00000484

08013774 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013774:	b590      	push	{r4, r7, lr}
 8013776:	b087      	sub	sp, #28
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801377c:	2317      	movs	r3, #23
 801377e:	18fb      	adds	r3, r7, r3
 8013780:	2200      	movs	r2, #0
 8013782:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d102      	bne.n	8013790 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801378a:	2303      	movs	r3, #3
 801378c:	f000 fb74 	bl	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013790:	4ac3      	ldr	r2, [pc, #780]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013792:	23d0      	movs	r3, #208	; 0xd0
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	58d3      	ldr	r3, [r2, r3]
 8013798:	2202      	movs	r2, #2
 801379a:	4013      	ands	r3, r2
 801379c:	d002      	beq.n	80137a4 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 801379e:	2301      	movs	r3, #1
 80137a0:	f000 fb6a 	bl	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
    }

    switch( mibSet->Type )
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	2b27      	cmp	r3, #39	; 0x27
 80137aa:	d900      	bls.n	80137ae <LoRaMacMibSetRequestConfirm+0x3a>
 80137ac:	e333      	b.n	8013e16 <LoRaMacMibSetRequestConfirm+0x6a2>
 80137ae:	009a      	lsls	r2, r3, #2
 80137b0:	4bbc      	ldr	r3, [pc, #752]	; (8013aa4 <LoRaMacMibSetRequestConfirm+0x330>)
 80137b2:	18d3      	adds	r3, r2, r3
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	791b      	ldrb	r3, [r3, #4]
 80137bc:	2217      	movs	r2, #23
 80137be:	18bc      	adds	r4, r7, r2
 80137c0:	0018      	movs	r0, r3
 80137c2:	f7fc ff07 	bl	80105d4 <SwitchClass>
 80137c6:	0003      	movs	r3, r0
 80137c8:	7023      	strb	r3, [r4, #0]
            break;
 80137ca:	e34e      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	791b      	ldrb	r3, [r3, #4]
 80137d0:	2b02      	cmp	r3, #2
 80137d2:	d008      	beq.n	80137e6 <LoRaMacMibSetRequestConfirm+0x72>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 80137d4:	4bb2      	ldr	r3, [pc, #712]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 80137d6:	4ab4      	ldr	r2, [pc, #720]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 80137d8:	589a      	ldr	r2, [r3, r2]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	7919      	ldrb	r1, [r3, #4]
 80137de:	23b2      	movs	r3, #178	; 0xb2
 80137e0:	005b      	lsls	r3, r3, #1
 80137e2:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80137e4:	e341      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80137e6:	2317      	movs	r3, #23
 80137e8:	18fb      	adds	r3, r7, r3
 80137ea:	2203      	movs	r2, #3
 80137ec:	701a      	strb	r2, [r3, #0]
            break;
 80137ee:	e33c      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	0018      	movs	r0, r3
 80137f6:	f7fa f9c9 	bl	800db8c <SecureElementSetDevEui>
 80137fa:	1e03      	subs	r3, r0, #0
 80137fc:	d100      	bne.n	8013800 <LoRaMacMibSetRequestConfirm+0x8c>
 80137fe:	e319      	b.n	8013e34 <LoRaMacMibSetRequestConfirm+0x6c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013800:	2317      	movs	r3, #23
 8013802:	18fb      	adds	r3, r7, r3
 8013804:	2203      	movs	r2, #3
 8013806:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013808:	e314      	b.n	8013e34 <LoRaMacMibSetRequestConfirm+0x6c0>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	0018      	movs	r0, r3
 8013810:	f7fa f9e0 	bl	800dbd4 <SecureElementSetJoinEui>
 8013814:	1e03      	subs	r3, r0, #0
 8013816:	d100      	bne.n	801381a <LoRaMacMibSetRequestConfirm+0xa6>
 8013818:	e30e      	b.n	8013e38 <LoRaMacMibSetRequestConfirm+0x6c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801381a:	2317      	movs	r3, #23
 801381c:	18fb      	adds	r3, r7, r3
 801381e:	2203      	movs	r2, #3
 8013820:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013822:	e309      	b.n	8013e38 <LoRaMacMibSetRequestConfirm+0x6c4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8013824:	4b9e      	ldr	r3, [pc, #632]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013826:	4aa0      	ldr	r2, [pc, #640]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013828:	589b      	ldr	r3, [r3, r2]
 801382a:	687a      	ldr	r2, [r7, #4]
 801382c:	7911      	ldrb	r1, [r2, #4]
 801382e:	227e      	movs	r2, #126	; 0x7e
 8013830:	5499      	strb	r1, [r3, r2]
            break;
 8013832:	e31a      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8013834:	4b9a      	ldr	r3, [pc, #616]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013836:	4a9c      	ldr	r2, [pc, #624]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013838:	589b      	ldr	r3, [r3, r2]
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	6852      	ldr	r2, [r2, #4]
 801383e:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8013840:	e313      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8013842:	4b97      	ldr	r3, [pc, #604]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013844:	4a98      	ldr	r2, [pc, #608]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013846:	589b      	ldr	r3, [r3, r2]
 8013848:	687a      	ldr	r2, [r7, #4]
 801384a:	6852      	ldr	r2, [r2, #4]
 801384c:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 801384e:	e30c      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	685b      	ldr	r3, [r3, #4]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00a      	beq.n	801386e <LoRaMacMibSetRequestConfirm+0xfa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	0019      	movs	r1, r3
 801385e:	2000      	movs	r0, #0
 8013860:	f002 fa00 	bl	8015c64 <LoRaMacCryptoSetKey>
 8013864:	1e03      	subs	r3, r0, #0
 8013866:	d100      	bne.n	801386a <LoRaMacMibSetRequestConfirm+0xf6>
 8013868:	e2e8      	b.n	8013e3c <LoRaMacMibSetRequestConfirm+0x6c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801386a:	2311      	movs	r3, #17
 801386c:	e304      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801386e:	2317      	movs	r3, #23
 8013870:	18fb      	adds	r3, r7, r3
 8013872:	2203      	movs	r2, #3
 8013874:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013876:	e2e1      	b.n	8013e3c <LoRaMacMibSetRequestConfirm+0x6c8>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d00a      	beq.n	8013896 <LoRaMacMibSetRequestConfirm+0x122>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	0019      	movs	r1, r3
 8013886:	2001      	movs	r0, #1
 8013888:	f002 f9ec 	bl	8015c64 <LoRaMacCryptoSetKey>
 801388c:	1e03      	subs	r3, r0, #0
 801388e:	d100      	bne.n	8013892 <LoRaMacMibSetRequestConfirm+0x11e>
 8013890:	e2d6      	b.n	8013e40 <LoRaMacMibSetRequestConfirm+0x6cc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013892:	2311      	movs	r3, #17
 8013894:	e2f0      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013896:	2317      	movs	r3, #23
 8013898:	18fb      	adds	r3, r7, r3
 801389a:	2203      	movs	r2, #3
 801389c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801389e:	e2cf      	b.n	8013e40 <LoRaMacMibSetRequestConfirm+0x6cc>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d00a      	beq.n	80138be <LoRaMacMibSetRequestConfirm+0x14a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	685b      	ldr	r3, [r3, #4]
 80138ac:	0019      	movs	r1, r3
 80138ae:	2002      	movs	r0, #2
 80138b0:	f002 f9d8 	bl	8015c64 <LoRaMacCryptoSetKey>
 80138b4:	1e03      	subs	r3, r0, #0
 80138b6:	d100      	bne.n	80138ba <LoRaMacMibSetRequestConfirm+0x146>
 80138b8:	e2c4      	b.n	8013e44 <LoRaMacMibSetRequestConfirm+0x6d0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138ba:	2311      	movs	r3, #17
 80138bc:	e2dc      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138be:	2317      	movs	r3, #23
 80138c0:	18fb      	adds	r3, r7, r3
 80138c2:	2203      	movs	r2, #3
 80138c4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80138c6:	e2bd      	b.n	8013e44 <LoRaMacMibSetRequestConfirm+0x6d0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d00a      	beq.n	80138e6 <LoRaMacMibSetRequestConfirm+0x172>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	0019      	movs	r1, r3
 80138d6:	2003      	movs	r0, #3
 80138d8:	f002 f9c4 	bl	8015c64 <LoRaMacCryptoSetKey>
 80138dc:	1e03      	subs	r3, r0, #0
 80138de:	d100      	bne.n	80138e2 <LoRaMacMibSetRequestConfirm+0x16e>
 80138e0:	e2b2      	b.n	8013e48 <LoRaMacMibSetRequestConfirm+0x6d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80138e2:	2311      	movs	r3, #17
 80138e4:	e2c8      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138e6:	2317      	movs	r3, #23
 80138e8:	18fb      	adds	r3, r7, r3
 80138ea:	2203      	movs	r2, #3
 80138ec:	701a      	strb	r2, [r3, #0]
            }
            break;
 80138ee:	e2ab      	b.n	8013e48 <LoRaMacMibSetRequestConfirm+0x6d4>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d00a      	beq.n	801390e <LoRaMacMibSetRequestConfirm+0x19a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	0019      	movs	r1, r3
 80138fe:	207f      	movs	r0, #127	; 0x7f
 8013900:	f002 f9b0 	bl	8015c64 <LoRaMacCryptoSetKey>
 8013904:	1e03      	subs	r3, r0, #0
 8013906:	d100      	bne.n	801390a <LoRaMacMibSetRequestConfirm+0x196>
 8013908:	e2a0      	b.n	8013e4c <LoRaMacMibSetRequestConfirm+0x6d8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801390a:	2311      	movs	r3, #17
 801390c:	e2b4      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801390e:	2317      	movs	r3, #23
 8013910:	18fb      	adds	r3, r7, r3
 8013912:	2203      	movs	r2, #3
 8013914:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013916:	e299      	b.n	8013e4c <LoRaMacMibSetRequestConfirm+0x6d8>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d00a      	beq.n	8013936 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	0019      	movs	r1, r3
 8013926:	2080      	movs	r0, #128	; 0x80
 8013928:	f002 f99c 	bl	8015c64 <LoRaMacCryptoSetKey>
 801392c:	1e03      	subs	r3, r0, #0
 801392e:	d100      	bne.n	8013932 <LoRaMacMibSetRequestConfirm+0x1be>
 8013930:	e28e      	b.n	8013e50 <LoRaMacMibSetRequestConfirm+0x6dc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013932:	2311      	movs	r3, #17
 8013934:	e2a0      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013936:	2317      	movs	r3, #23
 8013938:	18fb      	adds	r3, r7, r3
 801393a:	2203      	movs	r2, #3
 801393c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801393e:	e287      	b.n	8013e50 <LoRaMacMibSetRequestConfirm+0x6dc>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d00a      	beq.n	801395e <LoRaMacMibSetRequestConfirm+0x1ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	685b      	ldr	r3, [r3, #4]
 801394c:	0019      	movs	r1, r3
 801394e:	2081      	movs	r0, #129	; 0x81
 8013950:	f002 f988 	bl	8015c64 <LoRaMacCryptoSetKey>
 8013954:	1e03      	subs	r3, r0, #0
 8013956:	d100      	bne.n	801395a <LoRaMacMibSetRequestConfirm+0x1e6>
 8013958:	e27c      	b.n	8013e54 <LoRaMacMibSetRequestConfirm+0x6e0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801395a:	2311      	movs	r3, #17
 801395c:	e28c      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801395e:	2317      	movs	r3, #23
 8013960:	18fb      	adds	r3, r7, r3
 8013962:	2203      	movs	r2, #3
 8013964:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013966:	e275      	b.n	8013e54 <LoRaMacMibSetRequestConfirm+0x6e0>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	685b      	ldr	r3, [r3, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d00a      	beq.n	8013986 <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	0019      	movs	r1, r3
 8013976:	2082      	movs	r0, #130	; 0x82
 8013978:	f002 f974 	bl	8015c64 <LoRaMacCryptoSetKey>
 801397c:	1e03      	subs	r3, r0, #0
 801397e:	d100      	bne.n	8013982 <LoRaMacMibSetRequestConfirm+0x20e>
 8013980:	e26a      	b.n	8013e58 <LoRaMacMibSetRequestConfirm+0x6e4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013982:	2311      	movs	r3, #17
 8013984:	e278      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013986:	2317      	movs	r3, #23
 8013988:	18fb      	adds	r3, r7, r3
 801398a:	2203      	movs	r2, #3
 801398c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801398e:	e263      	b.n	8013e58 <LoRaMacMibSetRequestConfirm+0x6e4>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013990:	4b43      	ldr	r3, [pc, #268]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013992:	4a45      	ldr	r2, [pc, #276]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013994:	589b      	ldr	r3, [r3, r2]
 8013996:	687a      	ldr	r2, [r7, #4]
 8013998:	7911      	ldrb	r1, [r2, #4]
 801399a:	227d      	movs	r2, #125	; 0x7d
 801399c:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 801399e:	4b43      	ldr	r3, [pc, #268]	; (8013aac <LoRaMacMibSetRequestConfirm+0x338>)
 80139a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139a2:	4a3f      	ldr	r2, [pc, #252]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 80139a4:	4940      	ldr	r1, [pc, #256]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 80139a6:	5852      	ldr	r2, [r2, r1]
 80139a8:	217d      	movs	r1, #125	; 0x7d
 80139aa:	5c52      	ldrb	r2, [r2, r1]
 80139ac:	0010      	movs	r0, r2
 80139ae:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80139b0:	4b3e      	ldr	r3, [pc, #248]	; (8013aac <LoRaMacMibSetRequestConfirm+0x338>)
 80139b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139b4:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80139b6:	e258      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80139b8:	4b39      	ldr	r3, [pc, #228]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 80139ba:	4a3b      	ldr	r2, [pc, #236]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 80139bc:	589b      	ldr	r3, [r3, r2]
 80139be:	687a      	ldr	r2, [r7, #4]
 80139c0:	7911      	ldrb	r1, [r2, #4]
 80139c2:	22ca      	movs	r2, #202	; 0xca
 80139c4:	5499      	strb	r1, [r3, r2]
            break;
 80139c6:	e250      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	7a1b      	ldrb	r3, [r3, #8]
 80139cc:	b25a      	sxtb	r2, r3
 80139ce:	2108      	movs	r1, #8
 80139d0:	187b      	adds	r3, r7, r1
 80139d2:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80139d4:	4b32      	ldr	r3, [pc, #200]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 80139d6:	4a34      	ldr	r2, [pc, #208]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 80139d8:	589b      	ldr	r3, [r3, r2]
 80139da:	22b9      	movs	r2, #185	; 0xb9
 80139dc:	5c9a      	ldrb	r2, [r3, r2]
 80139de:	187b      	adds	r3, r7, r1
 80139e0:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 80139e2:	4b2f      	ldr	r3, [pc, #188]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 80139e4:	4a30      	ldr	r2, [pc, #192]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 80139e6:	589b      	ldr	r3, [r3, r2]
 80139e8:	781b      	ldrb	r3, [r3, #0]
 80139ea:	1879      	adds	r1, r7, r1
 80139ec:	2207      	movs	r2, #7
 80139ee:	0018      	movs	r0, r3
 80139f0:	f003 f868 	bl	8016ac4 <RegionVerify>
 80139f4:	0003      	movs	r3, r0
 80139f6:	001a      	movs	r2, r3
 80139f8:	2301      	movs	r3, #1
 80139fa:	4053      	eors	r3, r2
 80139fc:	b2db      	uxtb	r3, r3
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d004      	beq.n	8013a0c <LoRaMacMibSetRequestConfirm+0x298>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a02:	2317      	movs	r3, #23
 8013a04:	18fb      	adds	r3, r7, r3
 8013a06:	2203      	movs	r2, #3
 8013a08:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8013a0a:	e22e      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	685a      	ldr	r2, [r3, #4]
 8013a10:	2108      	movs	r1, #8
 8013a12:	187b      	adds	r3, r7, r1
 8013a14:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 8013a16:	4b22      	ldr	r3, [pc, #136]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a18:	4a23      	ldr	r2, [pc, #140]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a1a:	589b      	ldr	r3, [r3, r2]
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	1879      	adds	r1, r7, r1
 8013a20:	2200      	movs	r2, #0
 8013a22:	0018      	movs	r0, r3
 8013a24:	f003 f84e 	bl	8016ac4 <RegionVerify>
 8013a28:	0003      	movs	r3, r0
 8013a2a:	001a      	movs	r2, r3
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	4053      	eors	r3, r2
 8013a30:	b2db      	uxtb	r3, r3
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d004      	beq.n	8013a40 <LoRaMacMibSetRequestConfirm+0x2cc>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a36:	2317      	movs	r3, #23
 8013a38:	18fb      	adds	r3, r7, r3
 8013a3a:	2203      	movs	r2, #3
 8013a3c:	701a      	strb	r2, [r3, #0]
            break;
 8013a3e:	e214      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013a40:	4b17      	ldr	r3, [pc, #92]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a42:	4a19      	ldr	r2, [pc, #100]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a44:	589b      	ldr	r3, [r3, r2]
 8013a46:	21a8      	movs	r1, #168	; 0xa8
 8013a48:	687a      	ldr	r2, [r7, #4]
 8013a4a:	185b      	adds	r3, r3, r1
 8013a4c:	3204      	adds	r2, #4
 8013a4e:	ca03      	ldmia	r2!, {r0, r1}
 8013a50:	c303      	stmia	r3!, {r0, r1}
            break;
 8013a52:	e20a      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	7a1b      	ldrb	r3, [r3, #8]
 8013a58:	b25a      	sxtb	r2, r3
 8013a5a:	2108      	movs	r1, #8
 8013a5c:	187b      	adds	r3, r7, r1
 8013a5e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013a60:	4b0f      	ldr	r3, [pc, #60]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a62:	4a11      	ldr	r2, [pc, #68]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a64:	589b      	ldr	r3, [r3, r2]
 8013a66:	22b9      	movs	r2, #185	; 0xb9
 8013a68:	5c9a      	ldrb	r2, [r3, r2]
 8013a6a:	187b      	adds	r3, r7, r1
 8013a6c:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013a6e:	4b0c      	ldr	r3, [pc, #48]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a70:	4a0d      	ldr	r2, [pc, #52]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a72:	589b      	ldr	r3, [r3, r2]
 8013a74:	781b      	ldrb	r3, [r3, #0]
 8013a76:	1879      	adds	r1, r7, r1
 8013a78:	2207      	movs	r2, #7
 8013a7a:	0018      	movs	r0, r3
 8013a7c:	f003 f822 	bl	8016ac4 <RegionVerify>
 8013a80:	1e03      	subs	r3, r0, #0
 8013a82:	d008      	beq.n	8013a96 <LoRaMacMibSetRequestConfirm+0x322>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013a84:	4b06      	ldr	r3, [pc, #24]	; (8013aa0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a86:	4a08      	ldr	r2, [pc, #32]	; (8013aa8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a88:	589b      	ldr	r3, [r3, r2]
 8013a8a:	687a      	ldr	r2, [r7, #4]
 8013a8c:	3328      	adds	r3, #40	; 0x28
 8013a8e:	3204      	adds	r2, #4
 8013a90:	ca03      	ldmia	r2!, {r0, r1}
 8013a92:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a94:	e1e9      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a96:	2317      	movs	r3, #23
 8013a98:	18fb      	adds	r3, r7, r3
 8013a9a:	2203      	movs	r2, #3
 8013a9c:	701a      	strb	r2, [r3, #0]
            break;
 8013a9e:	e1e4      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
 8013aa0:	20000548 	.word	0x20000548
 8013aa4:	0801ed0c 	.word	0x0801ed0c
 8013aa8:	00000484 	.word	0x00000484
 8013aac:	0801f0b4 	.word	0x0801f0b4
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	7a1b      	ldrb	r3, [r3, #8]
 8013ab4:	b25a      	sxtb	r2, r3
 8013ab6:	2108      	movs	r1, #8
 8013ab8:	187b      	adds	r3, r7, r1
 8013aba:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013abc:	4bda      	ldr	r3, [pc, #872]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013abe:	4adb      	ldr	r2, [pc, #876]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ac0:	589b      	ldr	r3, [r3, r2]
 8013ac2:	22b9      	movs	r2, #185	; 0xb9
 8013ac4:	5c9a      	ldrb	r2, [r3, r2]
 8013ac6:	187b      	adds	r3, r7, r1
 8013ac8:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013aca:	4bd7      	ldr	r3, [pc, #860]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013acc:	4ad7      	ldr	r2, [pc, #860]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ace:	589b      	ldr	r3, [r3, r2]
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	1879      	adds	r1, r7, r1
 8013ad4:	2207      	movs	r2, #7
 8013ad6:	0018      	movs	r0, r3
 8013ad8:	f002 fff4 	bl	8016ac4 <RegionVerify>
 8013adc:	1e03      	subs	r3, r0, #0
 8013ade:	d01f      	beq.n	8013b20 <LoRaMacMibSetRequestConfirm+0x3ac>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013ae0:	4bd1      	ldr	r3, [pc, #836]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ae2:	4ad2      	ldr	r2, [pc, #840]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ae4:	589b      	ldr	r3, [r3, r2]
 8013ae6:	21b0      	movs	r1, #176	; 0xb0
 8013ae8:	687a      	ldr	r2, [r7, #4]
 8013aea:	185b      	adds	r3, r3, r1
 8013aec:	3204      	adds	r2, #4
 8013aee:	ca03      	ldmia	r2!, {r0, r1}
 8013af0:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013af2:	4bcd      	ldr	r3, [pc, #820]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013af4:	4acd      	ldr	r2, [pc, #820]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013af6:	589b      	ldr	r3, [r3, r2]
 8013af8:	227c      	movs	r2, #124	; 0x7c
 8013afa:	5c9b      	ldrb	r3, [r3, r2]
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d000      	beq.n	8013b02 <LoRaMacMibSetRequestConfirm+0x38e>
 8013b00:	e1ac      	b.n	8013e5c <LoRaMacMibSetRequestConfirm+0x6e8>
 8013b02:	4bc9      	ldr	r3, [pc, #804]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b04:	4ac9      	ldr	r2, [pc, #804]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b06:	589a      	ldr	r2, [r3, r2]
 8013b08:	23b2      	movs	r3, #178	; 0xb2
 8013b0a:	005b      	lsls	r3, r3, #1
 8013b0c:	5cd3      	ldrb	r3, [r2, r3]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d100      	bne.n	8013b14 <LoRaMacMibSetRequestConfirm+0x3a0>
 8013b12:	e1a3      	b.n	8013e5c <LoRaMacMibSetRequestConfirm+0x6e8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013b14:	4bc6      	ldr	r3, [pc, #792]	; (8013e30 <LoRaMacMibSetRequestConfirm+0x6bc>)
 8013b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b18:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013b1a:	f7fe fa33 	bl	8011f84 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b1e:	e19d      	b.n	8013e5c <LoRaMacMibSetRequestConfirm+0x6e8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b20:	2317      	movs	r3, #23
 8013b22:	18fb      	adds	r3, r7, r3
 8013b24:	2203      	movs	r2, #3
 8013b26:	701a      	strb	r2, [r3, #0]
            break;
 8013b28:	e198      	b.n	8013e5c <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	7a1b      	ldrb	r3, [r3, #8]
 8013b2e:	b25a      	sxtb	r2, r3
 8013b30:	2108      	movs	r1, #8
 8013b32:	187b      	adds	r3, r7, r1
 8013b34:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013b36:	4bbc      	ldr	r3, [pc, #752]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b38:	4abc      	ldr	r2, [pc, #752]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b3a:	589b      	ldr	r3, [r3, r2]
 8013b3c:	22b9      	movs	r2, #185	; 0xb9
 8013b3e:	5c9a      	ldrb	r2, [r3, r2]
 8013b40:	187b      	adds	r3, r7, r1
 8013b42:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013b44:	4bb8      	ldr	r3, [pc, #736]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b46:	4ab9      	ldr	r2, [pc, #740]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b48:	589b      	ldr	r3, [r3, r2]
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	1879      	adds	r1, r7, r1
 8013b4e:	2207      	movs	r2, #7
 8013b50:	0018      	movs	r0, r3
 8013b52:	f002 ffb7 	bl	8016ac4 <RegionVerify>
 8013b56:	1e03      	subs	r3, r0, #0
 8013b58:	d008      	beq.n	8013b6c <LoRaMacMibSetRequestConfirm+0x3f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013b5a:	4bb3      	ldr	r3, [pc, #716]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b5c:	4ab3      	ldr	r2, [pc, #716]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b5e:	589b      	ldr	r3, [r3, r2]
 8013b60:	687a      	ldr	r2, [r7, #4]
 8013b62:	3330      	adds	r3, #48	; 0x30
 8013b64:	3204      	adds	r2, #4
 8013b66:	ca03      	ldmia	r2!, {r0, r1}
 8013b68:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013b6a:	e17e      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b6c:	2317      	movs	r3, #23
 8013b6e:	18fb      	adds	r3, r7, r3
 8013b70:	2203      	movs	r2, #3
 8013b72:	701a      	strb	r2, [r3, #0]
            break;
 8013b74:	e179      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	685a      	ldr	r2, [r3, #4]
 8013b7a:	210c      	movs	r1, #12
 8013b7c:	187b      	adds	r3, r7, r1
 8013b7e:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013b80:	187b      	adds	r3, r7, r1
 8013b82:	2201      	movs	r2, #1
 8013b84:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013b86:	4ba8      	ldr	r3, [pc, #672]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013b88:	4aa8      	ldr	r2, [pc, #672]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013b8a:	589b      	ldr	r3, [r3, r2]
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	187a      	adds	r2, r7, r1
 8013b90:	0011      	movs	r1, r2
 8013b92:	0018      	movs	r0, r3
 8013b94:	f002 ffc8 	bl	8016b28 <RegionChanMaskSet>
 8013b98:	0003      	movs	r3, r0
 8013b9a:	001a      	movs	r2, r3
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	4053      	eors	r3, r2
 8013ba0:	b2db      	uxtb	r3, r3
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d100      	bne.n	8013ba8 <LoRaMacMibSetRequestConfirm+0x434>
 8013ba6:	e15b      	b.n	8013e60 <LoRaMacMibSetRequestConfirm+0x6ec>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ba8:	2317      	movs	r3, #23
 8013baa:	18fb      	adds	r3, r7, r3
 8013bac:	2203      	movs	r2, #3
 8013bae:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013bb0:	e156      	b.n	8013e60 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	685a      	ldr	r2, [r3, #4]
 8013bb6:	210c      	movs	r1, #12
 8013bb8:	187b      	adds	r3, r7, r1
 8013bba:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013bbc:	187b      	adds	r3, r7, r1
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013bc2:	4b99      	ldr	r3, [pc, #612]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013bc4:	4a99      	ldr	r2, [pc, #612]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013bc6:	589b      	ldr	r3, [r3, r2]
 8013bc8:	781b      	ldrb	r3, [r3, #0]
 8013bca:	187a      	adds	r2, r7, r1
 8013bcc:	0011      	movs	r1, r2
 8013bce:	0018      	movs	r0, r3
 8013bd0:	f002 ffaa 	bl	8016b28 <RegionChanMaskSet>
 8013bd4:	0003      	movs	r3, r0
 8013bd6:	001a      	movs	r2, r3
 8013bd8:	2301      	movs	r3, #1
 8013bda:	4053      	eors	r3, r2
 8013bdc:	b2db      	uxtb	r3, r3
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d100      	bne.n	8013be4 <LoRaMacMibSetRequestConfirm+0x470>
 8013be2:	e13f      	b.n	8013e64 <LoRaMacMibSetRequestConfirm+0x6f0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013be4:	2317      	movs	r3, #23
 8013be6:	18fb      	adds	r3, r7, r3
 8013be8:	2203      	movs	r2, #3
 8013bea:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013bec:	e13a      	b.n	8013e64 <LoRaMacMibSetRequestConfirm+0x6f0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	791b      	ldrb	r3, [r3, #4]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d00b      	beq.n	8013c0e <LoRaMacMibSetRequestConfirm+0x49a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013bfa:	2b0f      	cmp	r3, #15
 8013bfc:	d807      	bhi.n	8013c0e <LoRaMacMibSetRequestConfirm+0x49a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013bfe:	4b8a      	ldr	r3, [pc, #552]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c00:	4a8a      	ldr	r2, [pc, #552]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c02:	589b      	ldr	r3, [r3, r2]
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	7911      	ldrb	r1, [r2, #4]
 8013c08:	22a4      	movs	r2, #164	; 0xa4
 8013c0a:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013c0c:	e12d      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c0e:	2317      	movs	r3, #23
 8013c10:	18fb      	adds	r3, r7, r3
 8013c12:	2203      	movs	r2, #3
 8013c14:	701a      	strb	r2, [r3, #0]
            break;
 8013c16:	e128      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013c18:	4b83      	ldr	r3, [pc, #524]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c1a:	4a84      	ldr	r2, [pc, #528]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c1c:	589a      	ldr	r2, [r3, r2]
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	2190      	movs	r1, #144	; 0x90
 8013c24:	5053      	str	r3, [r2, r1]
            break;
 8013c26:	e120      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013c28:	4b7f      	ldr	r3, [pc, #508]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c2a:	4a80      	ldr	r2, [pc, #512]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c2c:	589a      	ldr	r2, [r3, r2]
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	685b      	ldr	r3, [r3, #4]
 8013c32:	2194      	movs	r1, #148	; 0x94
 8013c34:	5053      	str	r3, [r2, r1]
            break;
 8013c36:	e118      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013c38:	4b7b      	ldr	r3, [pc, #492]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c3a:	4a7c      	ldr	r2, [pc, #496]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c3c:	589a      	ldr	r2, [r3, r2]
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	685b      	ldr	r3, [r3, #4]
 8013c42:	2198      	movs	r1, #152	; 0x98
 8013c44:	5053      	str	r3, [r2, r1]
            break;
 8013c46:	e110      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013c48:	4b77      	ldr	r3, [pc, #476]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c4a:	4a78      	ldr	r2, [pc, #480]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c4c:	589a      	ldr	r2, [r3, r2]
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	219c      	movs	r1, #156	; 0x9c
 8013c54:	5053      	str	r3, [r2, r1]
            break;
 8013c56:	e108      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013c58:	4b73      	ldr	r3, [pc, #460]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c5a:	4a74      	ldr	r2, [pc, #464]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c5c:	589a      	ldr	r2, [r3, r2]
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	21a0      	movs	r1, #160	; 0xa0
 8013c64:	5053      	str	r3, [r2, r1]
            break;
 8013c66:	e100      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2204      	movs	r2, #4
 8013c6c:	569a      	ldrsb	r2, [r3, r2]
 8013c6e:	2408      	movs	r4, #8
 8013c70:	193b      	adds	r3, r7, r4
 8013c72:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8013c74:	4b6c      	ldr	r3, [pc, #432]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c76:	4a6d      	ldr	r2, [pc, #436]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c78:	589b      	ldr	r3, [r3, r2]
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	1939      	adds	r1, r7, r4
 8013c7e:	2206      	movs	r2, #6
 8013c80:	0018      	movs	r0, r3
 8013c82:	f002 ff1f 	bl	8016ac4 <RegionVerify>
 8013c86:	1e03      	subs	r3, r0, #0
 8013c88:	d007      	beq.n	8013c9a <LoRaMacMibSetRequestConfirm+0x526>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013c8a:	4b67      	ldr	r3, [pc, #412]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013c8c:	4a67      	ldr	r2, [pc, #412]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013c8e:	589b      	ldr	r3, [r3, r2]
 8013c90:	193a      	adds	r2, r7, r4
 8013c92:	7812      	ldrb	r2, [r2, #0]
 8013c94:	b252      	sxtb	r2, r2
 8013c96:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013c98:	e0e7      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c9a:	2317      	movs	r3, #23
 8013c9c:	18fb      	adds	r3, r7, r3
 8013c9e:	2203      	movs	r2, #3
 8013ca0:	701a      	strb	r2, [r3, #0]
            break;
 8013ca2:	e0e2      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2204      	movs	r2, #4
 8013ca8:	569a      	ldrsb	r2, [r3, r2]
 8013caa:	2408      	movs	r4, #8
 8013cac:	193b      	adds	r3, r7, r4
 8013cae:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013cb0:	4b5d      	ldr	r3, [pc, #372]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cb2:	4a5e      	ldr	r2, [pc, #376]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cb4:	589b      	ldr	r3, [r3, r2]
 8013cb6:	22b8      	movs	r2, #184	; 0xb8
 8013cb8:	5c9a      	ldrb	r2, [r3, r2]
 8013cba:	193b      	adds	r3, r7, r4
 8013cbc:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8013cbe:	4b5a      	ldr	r3, [pc, #360]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cc0:	4a5a      	ldr	r2, [pc, #360]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cc2:	589b      	ldr	r3, [r3, r2]
 8013cc4:	781b      	ldrb	r3, [r3, #0]
 8013cc6:	1939      	adds	r1, r7, r4
 8013cc8:	2205      	movs	r2, #5
 8013cca:	0018      	movs	r0, r3
 8013ccc:	f002 fefa 	bl	8016ac4 <RegionVerify>
 8013cd0:	1e03      	subs	r3, r0, #0
 8013cd2:	d008      	beq.n	8013ce6 <LoRaMacMibSetRequestConfirm+0x572>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013cd4:	4b54      	ldr	r3, [pc, #336]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cd6:	4a55      	ldr	r2, [pc, #340]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cd8:	589b      	ldr	r3, [r3, r2]
 8013cda:	193a      	adds	r2, r7, r4
 8013cdc:	2100      	movs	r1, #0
 8013cde:	5651      	ldrsb	r1, [r2, r1]
 8013ce0:	2285      	movs	r2, #133	; 0x85
 8013ce2:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ce4:	e0c1      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ce6:	2317      	movs	r3, #23
 8013ce8:	18fb      	adds	r3, r7, r3
 8013cea:	2203      	movs	r2, #3
 8013cec:	701a      	strb	r2, [r3, #0]
            break;
 8013cee:	e0bc      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2204      	movs	r2, #4
 8013cf4:	569a      	ldrsb	r2, [r3, r2]
 8013cf6:	2408      	movs	r4, #8
 8013cf8:	193b      	adds	r3, r7, r4
 8013cfa:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013cfc:	4b4a      	ldr	r3, [pc, #296]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cfe:	4a4b      	ldr	r2, [pc, #300]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d00:	589b      	ldr	r3, [r3, r2]
 8013d02:	781b      	ldrb	r3, [r3, #0]
 8013d04:	1939      	adds	r1, r7, r4
 8013d06:	220a      	movs	r2, #10
 8013d08:	0018      	movs	r0, r3
 8013d0a:	f002 fedb 	bl	8016ac4 <RegionVerify>
 8013d0e:	1e03      	subs	r3, r0, #0
 8013d10:	d007      	beq.n	8013d22 <LoRaMacMibSetRequestConfirm+0x5ae>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8013d12:	4b45      	ldr	r3, [pc, #276]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d14:	4a45      	ldr	r2, [pc, #276]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d16:	589b      	ldr	r3, [r3, r2]
 8013d18:	193a      	adds	r2, r7, r4
 8013d1a:	7812      	ldrb	r2, [r2, #0]
 8013d1c:	b252      	sxtb	r2, r2
 8013d1e:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d20:	e0a3      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d22:	2317      	movs	r3, #23
 8013d24:	18fb      	adds	r3, r7, r3
 8013d26:	2203      	movs	r2, #3
 8013d28:	701a      	strb	r2, [r3, #0]
            break;
 8013d2a:	e09e      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2204      	movs	r2, #4
 8013d30:	569a      	ldrsb	r2, [r3, r2]
 8013d32:	2408      	movs	r4, #8
 8013d34:	193b      	adds	r3, r7, r4
 8013d36:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8013d38:	4b3b      	ldr	r3, [pc, #236]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d3a:	4a3c      	ldr	r2, [pc, #240]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d3c:	589b      	ldr	r3, [r3, r2]
 8013d3e:	781b      	ldrb	r3, [r3, #0]
 8013d40:	1939      	adds	r1, r7, r4
 8013d42:	2209      	movs	r2, #9
 8013d44:	0018      	movs	r0, r3
 8013d46:	f002 febd 	bl	8016ac4 <RegionVerify>
 8013d4a:	1e03      	subs	r3, r0, #0
 8013d4c:	d008      	beq.n	8013d60 <LoRaMacMibSetRequestConfirm+0x5ec>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8013d4e:	4b36      	ldr	r3, [pc, #216]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d50:	4a36      	ldr	r2, [pc, #216]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d52:	589b      	ldr	r3, [r3, r2]
 8013d54:	193a      	adds	r2, r7, r4
 8013d56:	2100      	movs	r1, #0
 8013d58:	5651      	ldrsb	r1, [r2, r1]
 8013d5a:	2284      	movs	r2, #132	; 0x84
 8013d5c:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d5e:	e084      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d60:	2317      	movs	r3, #23
 8013d62:	18fb      	adds	r3, r7, r3
 8013d64:	2203      	movs	r2, #3
 8013d66:	701a      	strb	r2, [r3, #0]
            break;
 8013d68:	e07f      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013d6a:	4b2f      	ldr	r3, [pc, #188]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d6c:	4a2f      	ldr	r2, [pc, #188]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d6e:	589b      	ldr	r3, [r3, r2]
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	6852      	ldr	r2, [r2, #4]
 8013d74:	609a      	str	r2, [r3, #8]
 8013d76:	4a2c      	ldr	r2, [pc, #176]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d78:	492c      	ldr	r1, [pc, #176]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d7a:	5852      	ldr	r2, [r2, r1]
 8013d7c:	689b      	ldr	r3, [r3, #8]
 8013d7e:	2188      	movs	r1, #136	; 0x88
 8013d80:	5053      	str	r3, [r2, r1]
            break;
 8013d82:	e072      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013d84:	4b28      	ldr	r3, [pc, #160]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d86:	4a29      	ldr	r2, [pc, #164]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d88:	589b      	ldr	r3, [r3, r2]
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	7912      	ldrb	r2, [r2, #4]
 8013d8e:	731a      	strb	r2, [r3, #12]
 8013d90:	4a25      	ldr	r2, [pc, #148]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d92:	4926      	ldr	r1, [pc, #152]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d94:	5852      	ldr	r2, [r2, r1]
 8013d96:	7b19      	ldrb	r1, [r3, #12]
 8013d98:	238c      	movs	r3, #140	; 0x8c
 8013d9a:	54d1      	strb	r1, [r2, r3]
            break;
 8013d9c:	e065      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013d9e:	4b22      	ldr	r3, [pc, #136]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013da0:	4a22      	ldr	r2, [pc, #136]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013da2:	589a      	ldr	r2, [r3, r2]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	685b      	ldr	r3, [r3, #4]
 8013da8:	21c0      	movs	r1, #192	; 0xc0
 8013daa:	5053      	str	r3, [r2, r1]
            break;
 8013dac:	e05d      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013dae:	4b1e      	ldr	r3, [pc, #120]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013db0:	4a1e      	ldr	r2, [pc, #120]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013db2:	589b      	ldr	r3, [r3, r2]
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	6852      	ldr	r2, [r2, #4]
 8013db8:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 8013dba:	e056      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	685b      	ldr	r3, [r3, #4]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d009      	beq.n	8013dd8 <LoRaMacMibSetRequestConfirm+0x664>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	685b      	ldr	r3, [r3, #4]
 8013dc8:	2217      	movs	r2, #23
 8013dca:	18bc      	adds	r4, r7, r2
 8013dcc:	0018      	movs	r0, r3
 8013dce:	f7fe fc1b 	bl	8012608 <RestoreCtxs>
 8013dd2:	0003      	movs	r3, r0
 8013dd4:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013dd6:	e048      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013dd8:	2317      	movs	r3, #23
 8013dda:	18fb      	adds	r3, r7, r3
 8013ddc:	2203      	movs	r2, #3
 8013dde:	701a      	strb	r2, [r3, #0]
            break;
 8013de0:	e043      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	799b      	ldrb	r3, [r3, #6]
 8013de6:	2b01      	cmp	r3, #1
 8013de8:	d810      	bhi.n	8013e0c <LoRaMacMibSetRequestConfirm+0x698>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8013dea:	4b0f      	ldr	r3, [pc, #60]	; (8013e28 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013dec:	4a0f      	ldr	r2, [pc, #60]	; (8013e2c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013dee:	5899      	ldr	r1, [r3, r2]
 8013df0:	23b0      	movs	r3, #176	; 0xb0
 8013df2:	005a      	lsls	r2, r3, #1
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	685b      	ldr	r3, [r3, #4]
 8013dfe:	0018      	movs	r0, r3
 8013e00:	f001 fe3a 	bl	8015a78 <LoRaMacCryptoSetLrWanVersion>
 8013e04:	1e03      	subs	r3, r0, #0
 8013e06:	d02f      	beq.n	8013e68 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013e08:	2311      	movs	r3, #17
 8013e0a:	e035      	b.n	8013e78 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e0c:	2317      	movs	r3, #23
 8013e0e:	18fb      	adds	r3, r7, r3
 8013e10:	2203      	movs	r2, #3
 8013e12:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013e14:	e028      	b.n	8013e68 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8013e16:	2317      	movs	r3, #23
 8013e18:	18fc      	adds	r4, r7, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	0018      	movs	r0, r3
 8013e1e:	f000 fc8f 	bl	8014740 <LoRaMacMibClassBSetRequestConfirm>
 8013e22:	0003      	movs	r3, r0
 8013e24:	7023      	strb	r3, [r4, #0]
            break;
 8013e26:	e020      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
 8013e28:	20000548 	.word	0x20000548
 8013e2c:	00000484 	.word	0x00000484
 8013e30:	0801f0b4 	.word	0x0801f0b4
            break;
 8013e34:	46c0      	nop			; (mov r8, r8)
 8013e36:	e018      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e38:	46c0      	nop			; (mov r8, r8)
 8013e3a:	e016      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e3c:	46c0      	nop			; (mov r8, r8)
 8013e3e:	e014      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e40:	46c0      	nop			; (mov r8, r8)
 8013e42:	e012      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e44:	46c0      	nop			; (mov r8, r8)
 8013e46:	e010      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e48:	46c0      	nop			; (mov r8, r8)
 8013e4a:	e00e      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e4c:	46c0      	nop			; (mov r8, r8)
 8013e4e:	e00c      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e50:	46c0      	nop			; (mov r8, r8)
 8013e52:	e00a      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e54:	46c0      	nop			; (mov r8, r8)
 8013e56:	e008      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e58:	46c0      	nop			; (mov r8, r8)
 8013e5a:	e006      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e5c:	46c0      	nop			; (mov r8, r8)
 8013e5e:	e004      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e60:	46c0      	nop			; (mov r8, r8)
 8013e62:	e002      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e64:	46c0      	nop			; (mov r8, r8)
 8013e66:	e000      	b.n	8013e6a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8013e68:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 8013e6a:	f7fe fe19 	bl	8012aa0 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 8013e6e:	f7fe fe0f 	bl	8012a90 <EventMacNvmCtxChanged>
    return status;
 8013e72:	2317      	movs	r3, #23
 8013e74:	18fb      	adds	r3, r7, r3
 8013e76:	781b      	ldrb	r3, [r3, #0]
}
 8013e78:	0018      	movs	r0, r3
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	b007      	add	sp, #28
 8013e7e:	bd90      	pop	{r4, r7, pc}

08013e80 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8013e80:	b5b0      	push	{r4, r5, r7, lr}
 8013e82:	b086      	sub	sp, #24
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013e88:	2317      	movs	r3, #23
 8013e8a:	18fb      	adds	r3, r7, r3
 8013e8c:	2202      	movs	r2, #2
 8013e8e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013e90:	230c      	movs	r3, #12
 8013e92:	18fb      	adds	r3, r7, r3
 8013e94:	2200      	movs	r2, #0
 8013e96:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d101      	bne.n	8013ea2 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e9e:	2303      	movs	r3, #3
 8013ea0:	e133      	b.n	801410a <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 8013ea2:	f7fe fe49 	bl	8012b38 <LoRaMacIsBusy>
 8013ea6:	1e03      	subs	r3, r0, #0
 8013ea8:	d001      	beq.n	8013eae <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 8013eaa:	2301      	movs	r3, #1
 8013eac:	e12d      	b.n	801410a <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013eae:	f001 fa0b 	bl	80152c8 <LoRaMacConfirmQueueIsFull>
 8013eb2:	1e03      	subs	r3, r0, #0
 8013eb4:	d001      	beq.n	8013eba <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	e127      	b.n	801410a <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013eba:	f001 f9fb 	bl	80152b4 <LoRaMacConfirmQueueGetCnt>
 8013ebe:	1e03      	subs	r3, r0, #0
 8013ec0:	d105      	bne.n	8013ece <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013ec2:	4b94      	ldr	r3, [pc, #592]	; (8014114 <LoRaMacMlmeRequest+0x294>)
 8013ec4:	2214      	movs	r2, #20
 8013ec6:	2100      	movs	r1, #0
 8013ec8:	0018      	movs	r0, r3
 8013eca:	f005 fa51 	bl	8019370 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013ece:	4b92      	ldr	r3, [pc, #584]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 8013ed0:	4a92      	ldr	r2, [pc, #584]	; (801411c <LoRaMacMlmeRequest+0x29c>)
 8013ed2:	2101      	movs	r1, #1
 8013ed4:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8013ed6:	4b90      	ldr	r3, [pc, #576]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 8013ed8:	4a91      	ldr	r2, [pc, #580]	; (8014120 <LoRaMacMlmeRequest+0x2a0>)
 8013eda:	5c99      	ldrb	r1, [r3, r2]
 8013edc:	2004      	movs	r0, #4
 8013ede:	4301      	orrs	r1, r0
 8013ee0:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	781a      	ldrb	r2, [r3, #0]
 8013ee6:	2110      	movs	r1, #16
 8013ee8:	187b      	adds	r3, r7, r1
 8013eea:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013eec:	187b      	adds	r3, r7, r1
 8013eee:	2201      	movs	r2, #1
 8013ef0:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8013ef2:	187b      	adds	r3, r7, r1
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	2b0e      	cmp	r3, #14
 8013efe:	d900      	bls.n	8013f02 <LoRaMacMlmeRequest+0x82>
 8013f00:	e0d4      	b.n	80140ac <LoRaMacMlmeRequest+0x22c>
 8013f02:	009a      	lsls	r2, r3, #2
 8013f04:	4b87      	ldr	r3, [pc, #540]	; (8014124 <LoRaMacMlmeRequest+0x2a4>)
 8013f06:	18d3      	adds	r3, r2, r3
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013f0c:	4a82      	ldr	r2, [pc, #520]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 8013f0e:	23d0      	movs	r3, #208	; 0xd0
 8013f10:	009b      	lsls	r3, r3, #2
 8013f12:	58d3      	ldr	r3, [r2, r3]
 8013f14:	2220      	movs	r2, #32
 8013f16:	4013      	ands	r3, r2
 8013f18:	d001      	beq.n	8013f1e <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	e0f5      	b.n	801410a <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 8013f1e:	f7fd feff 	bl	8011d20 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8013f22:	4b7d      	ldr	r3, [pc, #500]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 8013f24:	4a80      	ldr	r2, [pc, #512]	; (8014128 <LoRaMacMlmeRequest+0x2a8>)
 8013f26:	589b      	ldr	r3, [r3, r2]
 8013f28:	7818      	ldrb	r0, [r3, #0]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	791b      	ldrb	r3, [r3, #4]
 8013f2e:	b259      	sxtb	r1, r3
 8013f30:	4b79      	ldr	r3, [pc, #484]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 8013f32:	4a7d      	ldr	r2, [pc, #500]	; (8014128 <LoRaMacMlmeRequest+0x2a8>)
 8013f34:	589c      	ldr	r4, [r3, r2]
 8013f36:	2200      	movs	r2, #0
 8013f38:	f002 fedb 	bl	8016cf2 <RegionAlternateDr>
 8013f3c:	0003      	movs	r3, r0
 8013f3e:	001a      	movs	r2, r3
 8013f40:	2385      	movs	r3, #133	; 0x85
 8013f42:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8013f44:	2310      	movs	r3, #16
 8013f46:	18fb      	adds	r3, r7, r3
 8013f48:	2207      	movs	r2, #7
 8013f4a:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 8013f4c:	2517      	movs	r5, #23
 8013f4e:	197c      	adds	r4, r7, r5
 8013f50:	20ff      	movs	r0, #255	; 0xff
 8013f52:	f7fd fbab 	bl	80116ac <SendReJoinReq>
 8013f56:	0003      	movs	r3, r0
 8013f58:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 8013f5a:	197b      	adds	r3, r7, r5
 8013f5c:	781b      	ldrb	r3, [r3, #0]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d100      	bne.n	8013f64 <LoRaMacMlmeRequest+0xe4>
 8013f62:	e0a5      	b.n	80140b0 <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8013f64:	4b6c      	ldr	r3, [pc, #432]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 8013f66:	4a70      	ldr	r2, [pc, #448]	; (8014128 <LoRaMacMlmeRequest+0x2a8>)
 8013f68:	589b      	ldr	r3, [r3, r2]
 8013f6a:	7818      	ldrb	r0, [r3, #0]
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	791b      	ldrb	r3, [r3, #4]
 8013f70:	b259      	sxtb	r1, r3
 8013f72:	4b69      	ldr	r3, [pc, #420]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 8013f74:	4a6c      	ldr	r2, [pc, #432]	; (8014128 <LoRaMacMlmeRequest+0x2a8>)
 8013f76:	589c      	ldr	r4, [r3, r2]
 8013f78:	2201      	movs	r2, #1
 8013f7a:	f002 feba 	bl	8016cf2 <RegionAlternateDr>
 8013f7e:	0003      	movs	r3, r0
 8013f80:	001a      	movs	r2, r3
 8013f82:	2385      	movs	r3, #133	; 0x85
 8013f84:	54e2      	strb	r2, [r4, r3]
            }
            break;
 8013f86:	e093      	b.n	80140b0 <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013f88:	2417      	movs	r4, #23
 8013f8a:	193b      	adds	r3, r7, r4
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013f90:	230c      	movs	r3, #12
 8013f92:	18fb      	adds	r3, r7, r3
 8013f94:	2200      	movs	r2, #0
 8013f96:	0019      	movs	r1, r3
 8013f98:	2002      	movs	r0, #2
 8013f9a:	f000 fd7d 	bl	8014a98 <LoRaMacCommandsAddCmd>
 8013f9e:	1e03      	subs	r3, r0, #0
 8013fa0:	d100      	bne.n	8013fa4 <LoRaMacMlmeRequest+0x124>
 8013fa2:	e087      	b.n	80140b4 <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013fa4:	193b      	adds	r3, r7, r4
 8013fa6:	2213      	movs	r2, #19
 8013fa8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013faa:	e083      	b.n	80140b4 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	889b      	ldrh	r3, [r3, #4]
 8013fb0:	2217      	movs	r2, #23
 8013fb2:	18bc      	adds	r4, r7, r2
 8013fb4:	0018      	movs	r0, r3
 8013fb6:	f7fe fa5d 	bl	8012474 <SetTxContinuousWave>
 8013fba:	0003      	movs	r3, r0
 8013fbc:	7023      	strb	r3, [r4, #0]
            break;
 8013fbe:	e080      	b.n	80140c2 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	8898      	ldrh	r0, [r3, #4]
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6899      	ldr	r1, [r3, #8]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	7b1b      	ldrb	r3, [r3, #12]
 8013fcc:	2217      	movs	r2, #23
 8013fce:	18bc      	adds	r4, r7, r2
 8013fd0:	001a      	movs	r2, r3
 8013fd2:	f7fe fa9b 	bl	801250c <SetTxContinuousWave1>
 8013fd6:	0003      	movs	r3, r0
 8013fd8:	7023      	strb	r3, [r4, #0]
            break;
 8013fda:	e072      	b.n	80140c2 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8013fdc:	2417      	movs	r4, #23
 8013fde:	193b      	adds	r3, r7, r4
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013fe4:	230c      	movs	r3, #12
 8013fe6:	18fb      	adds	r3, r7, r3
 8013fe8:	2200      	movs	r2, #0
 8013fea:	0019      	movs	r1, r3
 8013fec:	200d      	movs	r0, #13
 8013fee:	f000 fd53 	bl	8014a98 <LoRaMacCommandsAddCmd>
 8013ff2:	1e03      	subs	r3, r0, #0
 8013ff4:	d060      	beq.n	80140b8 <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013ff6:	193b      	adds	r3, r7, r4
 8013ff8:	2213      	movs	r2, #19
 8013ffa:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013ffc:	e05c      	b.n	80140b8 <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8013ffe:	4b46      	ldr	r3, [pc, #280]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 8014000:	4a49      	ldr	r2, [pc, #292]	; (8014128 <LoRaMacMlmeRequest+0x2a8>)
 8014002:	589b      	ldr	r3, [r3, r2]
 8014004:	227c      	movs	r2, #124	; 0x7c
 8014006:	5c9b      	ldrb	r3, [r3, r2]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d157      	bne.n	80140bc <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801400c:	2416      	movs	r4, #22
 801400e:	193b      	adds	r3, r7, r4
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	7912      	ldrb	r2, [r2, #4]
 8014014:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	791b      	ldrb	r3, [r3, #4]
 801401a:	075b      	lsls	r3, r3, #29
 801401c:	0f5b      	lsrs	r3, r3, #29
 801401e:	b2db      	uxtb	r3, r3
 8014020:	0018      	movs	r0, r3
 8014022:	f000 fb65 	bl	80146f0 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014026:	210c      	movs	r1, #12
 8014028:	187b      	adds	r3, r7, r1
 801402a:	193a      	adds	r2, r7, r4
 801402c:	7812      	ldrb	r2, [r2, #0]
 801402e:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8014030:	2417      	movs	r4, #23
 8014032:	193b      	adds	r3, r7, r4
 8014034:	2200      	movs	r2, #0
 8014036:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014038:	187b      	adds	r3, r7, r1
 801403a:	2201      	movs	r2, #1
 801403c:	0019      	movs	r1, r3
 801403e:	2010      	movs	r0, #16
 8014040:	f000 fd2a 	bl	8014a98 <LoRaMacCommandsAddCmd>
 8014044:	1e03      	subs	r3, r0, #0
 8014046:	d039      	beq.n	80140bc <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014048:	193b      	adds	r3, r7, r4
 801404a:	2213      	movs	r2, #19
 801404c:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 801404e:	e035      	b.n	80140bc <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014050:	2417      	movs	r4, #23
 8014052:	193b      	adds	r3, r7, r4
 8014054:	2200      	movs	r2, #0
 8014056:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014058:	230c      	movs	r3, #12
 801405a:	18fb      	adds	r3, r7, r3
 801405c:	2200      	movs	r2, #0
 801405e:	0019      	movs	r1, r3
 8014060:	2012      	movs	r0, #18
 8014062:	f000 fd19 	bl	8014a98 <LoRaMacCommandsAddCmd>
 8014066:	1e03      	subs	r3, r0, #0
 8014068:	d02a      	beq.n	80140c0 <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801406a:	193b      	adds	r3, r7, r4
 801406c:	2213      	movs	r2, #19
 801406e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014070:	e026      	b.n	80140c0 <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014072:	2310      	movs	r3, #16
 8014074:	18fb      	adds	r3, r7, r3
 8014076:	2201      	movs	r2, #1
 8014078:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801407a:	f000 faf7 	bl	801466c <LoRaMacClassBIsAcquisitionInProgress>
 801407e:	0003      	movs	r3, r0
 8014080:	001a      	movs	r2, r3
 8014082:	2301      	movs	r3, #1
 8014084:	4053      	eors	r3, r2
 8014086:	b2db      	uxtb	r3, r3
 8014088:	2b00      	cmp	r3, #0
 801408a:	d00a      	beq.n	80140a2 <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 801408c:	2000      	movs	r0, #0
 801408e:	f000 facf 	bl	8014630 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8014092:	2000      	movs	r0, #0
 8014094:	f000 faf0 	bl	8014678 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014098:	2317      	movs	r3, #23
 801409a:	18fb      	adds	r3, r7, r3
 801409c:	2200      	movs	r2, #0
 801409e:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80140a0:	e00f      	b.n	80140c2 <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 80140a2:	2317      	movs	r3, #23
 80140a4:	18fb      	adds	r3, r7, r3
 80140a6:	2201      	movs	r2, #1
 80140a8:	701a      	strb	r2, [r3, #0]
            break;
 80140aa:	e00a      	b.n	80140c2 <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 80140ac:	46c0      	nop			; (mov r8, r8)
 80140ae:	e008      	b.n	80140c2 <LoRaMacMlmeRequest+0x242>
            break;
 80140b0:	46c0      	nop			; (mov r8, r8)
 80140b2:	e006      	b.n	80140c2 <LoRaMacMlmeRequest+0x242>
            break;
 80140b4:	46c0      	nop			; (mov r8, r8)
 80140b6:	e004      	b.n	80140c2 <LoRaMacMlmeRequest+0x242>
            break;
 80140b8:	46c0      	nop			; (mov r8, r8)
 80140ba:	e002      	b.n	80140c2 <LoRaMacMlmeRequest+0x242>
            break;
 80140bc:	46c0      	nop			; (mov r8, r8)
 80140be:	e000      	b.n	80140c2 <LoRaMacMlmeRequest+0x242>
            break;
 80140c0:	46c0      	nop			; (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80140c2:	4a15      	ldr	r2, [pc, #84]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 80140c4:	2391      	movs	r3, #145	; 0x91
 80140c6:	00db      	lsls	r3, r3, #3
 80140c8:	58d2      	ldr	r2, [r2, r3]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80140ce:	2317      	movs	r3, #23
 80140d0:	18fb      	adds	r3, r7, r3
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d00e      	beq.n	80140f6 <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80140d8:	f001 f8ec 	bl	80152b4 <LoRaMacConfirmQueueGetCnt>
 80140dc:	1e03      	subs	r3, r0, #0
 80140de:	d111      	bne.n	8014104 <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 80140e0:	4b0d      	ldr	r3, [pc, #52]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 80140e2:	4a12      	ldr	r2, [pc, #72]	; (801412c <LoRaMacMlmeRequest+0x2ac>)
 80140e4:	2100      	movs	r1, #0
 80140e6:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80140e8:	4b0b      	ldr	r3, [pc, #44]	; (8014118 <LoRaMacMlmeRequest+0x298>)
 80140ea:	4a0d      	ldr	r2, [pc, #52]	; (8014120 <LoRaMacMlmeRequest+0x2a0>)
 80140ec:	5c99      	ldrb	r1, [r3, r2]
 80140ee:	2004      	movs	r0, #4
 80140f0:	4381      	bics	r1, r0
 80140f2:	5499      	strb	r1, [r3, r2]
 80140f4:	e006      	b.n	8014104 <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80140f6:	2310      	movs	r3, #16
 80140f8:	18fb      	adds	r3, r7, r3
 80140fa:	0018      	movs	r0, r3
 80140fc:	f000 ff6c 	bl	8014fd8 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8014100:	f7fe fcc6 	bl	8012a90 <EventMacNvmCtxChanged>
    }
    return status;
 8014104:	2317      	movs	r3, #23
 8014106:	18fb      	adds	r3, r7, r3
 8014108:	781b      	ldrb	r3, [r3, #0]
}
 801410a:	0018      	movs	r0, r3
 801410c:	46bd      	mov	sp, r7
 801410e:	b006      	add	sp, #24
 8014110:	bdb0      	pop	{r4, r5, r7, pc}
 8014112:	46c0      	nop			; (mov r8, r8)
 8014114:	20000998 	.word	0x20000998
 8014118:	20000548 	.word	0x20000548
 801411c:	00000451 	.word	0x00000451
 8014120:	00000481 	.word	0x00000481
 8014124:	0801edac 	.word	0x0801edac
 8014128:	00000484 	.word	0x00000484
 801412c:	00000414 	.word	0x00000414

08014130 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014132:	b08d      	sub	sp, #52	; 0x34
 8014134:	af02      	add	r7, sp, #8
 8014136:	6078      	str	r0, [r7, #4]
 8014138:	000a      	movs	r2, r1
 801413a:	1cfb      	adds	r3, r7, #3
 801413c:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801413e:	2327      	movs	r3, #39	; 0x27
 8014140:	18fb      	adds	r3, r7, r3
 8014142:	2202      	movs	r2, #2
 8014144:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014146:	2326      	movs	r3, #38	; 0x26
 8014148:	18fb      	adds	r3, r7, r3
 801414a:	2200      	movs	r2, #0
 801414c:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 801414e:	231d      	movs	r3, #29
 8014150:	18fb      	adds	r3, r7, r3
 8014152:	2200      	movs	r2, #0
 8014154:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 8014156:	231c      	movs	r3, #28
 8014158:	18fb      	adds	r3, r7, r3
 801415a:	2200      	movs	r2, #0
 801415c:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d101      	bne.n	8014168 <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014164:	2303      	movs	r3, #3
 8014166:	e11b      	b.n	80143a0 <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 8014168:	f7fe fce6 	bl	8012b38 <LoRaMacIsBusy>
 801416c:	1e03      	subs	r3, r0, #0
 801416e:	d001      	beq.n	8014174 <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8014170:	2301      	movs	r3, #1
 8014172:	e115      	b.n	80143a0 <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 8014174:	230c      	movs	r3, #12
 8014176:	18fb      	adds	r3, r7, r3
 8014178:	2200      	movs	r2, #0
 801417a:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 801417c:	4b8a      	ldr	r3, [pc, #552]	; (80143a8 <LoRaMacMcpsRequest+0x278>)
 801417e:	2214      	movs	r2, #20
 8014180:	2100      	movs	r1, #0
 8014182:	0018      	movs	r0, r3
 8014184:	f005 f8f4 	bl	8019370 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014188:	4b88      	ldr	r3, [pc, #544]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 801418a:	4a89      	ldr	r2, [pc, #548]	; (80143b0 <LoRaMacMcpsRequest+0x280>)
 801418c:	2101      	movs	r1, #1
 801418e:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014190:	4b86      	ldr	r3, [pc, #536]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014192:	4a88      	ldr	r2, [pc, #544]	; (80143b4 <LoRaMacMcpsRequest+0x284>)
 8014194:	2101      	movs	r1, #1
 8014196:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	2b03      	cmp	r3, #3
 801419e:	d056      	beq.n	801424e <LoRaMacMcpsRequest+0x11e>
 80141a0:	dc72      	bgt.n	8014288 <LoRaMacMcpsRequest+0x158>
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d002      	beq.n	80141ac <LoRaMacMcpsRequest+0x7c>
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	d024      	beq.n	80141f4 <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80141aa:	e06d      	b.n	8014288 <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 80141ac:	231c      	movs	r3, #28
 80141ae:	18fb      	adds	r3, r7, r3
 80141b0:	2201      	movs	r2, #1
 80141b2:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 80141b4:	4b7d      	ldr	r3, [pc, #500]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 80141b6:	4a80      	ldr	r2, [pc, #512]	; (80143b8 <LoRaMacMcpsRequest+0x288>)
 80141b8:	2101      	movs	r1, #1
 80141ba:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80141bc:	230c      	movs	r3, #12
 80141be:	18fb      	adds	r3, r7, r3
 80141c0:	781a      	ldrb	r2, [r3, #0]
 80141c2:	211f      	movs	r1, #31
 80141c4:	400a      	ands	r2, r1
 80141c6:	1c11      	adds	r1, r2, #0
 80141c8:	2240      	movs	r2, #64	; 0x40
 80141ca:	430a      	orrs	r2, r1
 80141cc:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80141ce:	2326      	movs	r3, #38	; 0x26
 80141d0:	18fb      	adds	r3, r7, r3
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	7912      	ldrb	r2, [r2, #4]
 80141d6:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	689b      	ldr	r3, [r3, #8]
 80141dc:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80141de:	231e      	movs	r3, #30
 80141e0:	18fb      	adds	r3, r7, r3
 80141e2:	687a      	ldr	r2, [r7, #4]
 80141e4:	8992      	ldrh	r2, [r2, #12]
 80141e6:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80141e8:	231d      	movs	r3, #29
 80141ea:	18fb      	adds	r3, r7, r3
 80141ec:	687a      	ldr	r2, [r7, #4]
 80141ee:	7b92      	ldrb	r2, [r2, #14]
 80141f0:	701a      	strb	r2, [r3, #0]
            break;
 80141f2:	e04a      	b.n	801428a <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 80141f4:	231c      	movs	r3, #28
 80141f6:	18fb      	adds	r3, r7, r3
 80141f8:	2201      	movs	r2, #1
 80141fa:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	7bdb      	ldrb	r3, [r3, #15]
 8014200:	1c1a      	adds	r2, r3, #0
 8014202:	b2d3      	uxtb	r3, r2
 8014204:	2b08      	cmp	r3, #8
 8014206:	d901      	bls.n	801420c <LoRaMacMcpsRequest+0xdc>
 8014208:	2308      	movs	r3, #8
 801420a:	1c1a      	adds	r2, r3, #0
 801420c:	b2d1      	uxtb	r1, r2
 801420e:	4b67      	ldr	r3, [pc, #412]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014210:	4a69      	ldr	r2, [pc, #420]	; (80143b8 <LoRaMacMcpsRequest+0x288>)
 8014212:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014214:	230c      	movs	r3, #12
 8014216:	18fb      	adds	r3, r7, r3
 8014218:	781a      	ldrb	r2, [r3, #0]
 801421a:	211f      	movs	r1, #31
 801421c:	400a      	ands	r2, r1
 801421e:	1c11      	adds	r1, r2, #0
 8014220:	2280      	movs	r2, #128	; 0x80
 8014222:	4252      	negs	r2, r2
 8014224:	430a      	orrs	r2, r1
 8014226:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8014228:	2326      	movs	r3, #38	; 0x26
 801422a:	18fb      	adds	r3, r7, r3
 801422c:	687a      	ldr	r2, [r7, #4]
 801422e:	7912      	ldrb	r2, [r2, #4]
 8014230:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	689b      	ldr	r3, [r3, #8]
 8014236:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8014238:	231e      	movs	r3, #30
 801423a:	18fb      	adds	r3, r7, r3
 801423c:	687a      	ldr	r2, [r7, #4]
 801423e:	8992      	ldrh	r2, [r2, #12]
 8014240:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8014242:	231d      	movs	r3, #29
 8014244:	18fb      	adds	r3, r7, r3
 8014246:	687a      	ldr	r2, [r7, #4]
 8014248:	7b92      	ldrb	r2, [r2, #14]
 801424a:	701a      	strb	r2, [r3, #0]
            break;
 801424c:	e01d      	b.n	801428a <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 801424e:	231c      	movs	r3, #28
 8014250:	18fb      	adds	r3, r7, r3
 8014252:	2201      	movs	r2, #1
 8014254:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8014256:	4b55      	ldr	r3, [pc, #340]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014258:	4a57      	ldr	r2, [pc, #348]	; (80143b8 <LoRaMacMcpsRequest+0x288>)
 801425a:	2101      	movs	r1, #1
 801425c:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801425e:	230c      	movs	r3, #12
 8014260:	18fb      	adds	r3, r7, r3
 8014262:	781a      	ldrb	r2, [r3, #0]
 8014264:	2120      	movs	r1, #32
 8014266:	4249      	negs	r1, r1
 8014268:	430a      	orrs	r2, r1
 801426a:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8014272:	231e      	movs	r3, #30
 8014274:	18fb      	adds	r3, r7, r3
 8014276:	687a      	ldr	r2, [r7, #4]
 8014278:	8912      	ldrh	r2, [r2, #8]
 801427a:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801427c:	231d      	movs	r3, #29
 801427e:	18fb      	adds	r3, r7, r3
 8014280:	687a      	ldr	r2, [r7, #4]
 8014282:	7a92      	ldrb	r2, [r2, #10]
 8014284:	701a      	strb	r2, [r3, #0]
            break;
 8014286:	e000      	b.n	801428a <LoRaMacMcpsRequest+0x15a>
            break;
 8014288:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801428a:	2114      	movs	r1, #20
 801428c:	187b      	adds	r3, r7, r1
 801428e:	2202      	movs	r2, #2
 8014290:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014292:	4b46      	ldr	r3, [pc, #280]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014294:	4a49      	ldr	r2, [pc, #292]	; (80143bc <LoRaMacMcpsRequest+0x28c>)
 8014296:	589b      	ldr	r3, [r3, r2]
 8014298:	22b8      	movs	r2, #184	; 0xb8
 801429a:	5c9a      	ldrb	r2, [r3, r2]
 801429c:	187b      	adds	r3, r7, r1
 801429e:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80142a0:	4b42      	ldr	r3, [pc, #264]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 80142a2:	4a46      	ldr	r2, [pc, #280]	; (80143bc <LoRaMacMcpsRequest+0x28c>)
 80142a4:	589b      	ldr	r3, [r3, r2]
 80142a6:	781b      	ldrb	r3, [r3, #0]
 80142a8:	187a      	adds	r2, r7, r1
 80142aa:	0011      	movs	r1, r2
 80142ac:	0018      	movs	r0, r3
 80142ae:	f002 fba2 	bl	80169f6 <RegionGetPhyParam>
 80142b2:	0003      	movs	r3, r0
 80142b4:	001a      	movs	r2, r3
 80142b6:	2110      	movs	r1, #16
 80142b8:	187b      	adds	r3, r7, r1
 80142ba:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80142bc:	187b      	adds	r3, r7, r1
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	b259      	sxtb	r1, r3
 80142c2:	231d      	movs	r3, #29
 80142c4:	18fa      	adds	r2, r7, r3
 80142c6:	18fb      	adds	r3, r7, r3
 80142c8:	1c0c      	adds	r4, r1, #0
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	b258      	sxtb	r0, r3
 80142ce:	b261      	sxtb	r1, r4
 80142d0:	4288      	cmp	r0, r1
 80142d2:	da00      	bge.n	80142d6 <LoRaMacMcpsRequest+0x1a6>
 80142d4:	1c23      	adds	r3, r4, #0
 80142d6:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 80142d8:	231c      	movs	r3, #28
 80142da:	18fb      	adds	r3, r7, r3
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d055      	beq.n	801438e <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 80142e2:	4b32      	ldr	r3, [pc, #200]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 80142e4:	4a35      	ldr	r2, [pc, #212]	; (80143bc <LoRaMacMcpsRequest+0x28c>)
 80142e6:	589b      	ldr	r3, [r3, r2]
 80142e8:	227e      	movs	r2, #126	; 0x7e
 80142ea:	5c9b      	ldrb	r3, [r3, r2]
 80142ec:	2201      	movs	r2, #1
 80142ee:	4053      	eors	r3, r2
 80142f0:	b2db      	uxtb	r3, r3
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d022      	beq.n	801433c <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 80142f6:	2408      	movs	r4, #8
 80142f8:	193b      	adds	r3, r7, r4
 80142fa:	221d      	movs	r2, #29
 80142fc:	18ba      	adds	r2, r7, r2
 80142fe:	7812      	ldrb	r2, [r2, #0]
 8014300:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014302:	4b2a      	ldr	r3, [pc, #168]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014304:	4a2d      	ldr	r2, [pc, #180]	; (80143bc <LoRaMacMcpsRequest+0x28c>)
 8014306:	589b      	ldr	r3, [r3, r2]
 8014308:	22b8      	movs	r2, #184	; 0xb8
 801430a:	5c9a      	ldrb	r2, [r3, r2]
 801430c:	193b      	adds	r3, r7, r4
 801430e:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8014310:	4b26      	ldr	r3, [pc, #152]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014312:	4a2a      	ldr	r2, [pc, #168]	; (80143bc <LoRaMacMcpsRequest+0x28c>)
 8014314:	589b      	ldr	r3, [r3, r2]
 8014316:	781b      	ldrb	r3, [r3, #0]
 8014318:	1939      	adds	r1, r7, r4
 801431a:	2205      	movs	r2, #5
 801431c:	0018      	movs	r0, r3
 801431e:	f002 fbd1 	bl	8016ac4 <RegionVerify>
 8014322:	1e03      	subs	r3, r0, #0
 8014324:	d008      	beq.n	8014338 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014326:	4b21      	ldr	r3, [pc, #132]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014328:	4a24      	ldr	r2, [pc, #144]	; (80143bc <LoRaMacMcpsRequest+0x28c>)
 801432a:	589b      	ldr	r3, [r3, r2]
 801432c:	193a      	adds	r2, r7, r4
 801432e:	2100      	movs	r1, #0
 8014330:	5651      	ldrsb	r1, [r2, r1]
 8014332:	2285      	movs	r2, #133	; 0x85
 8014334:	5499      	strb	r1, [r3, r2]
 8014336:	e001      	b.n	801433c <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014338:	2303      	movs	r3, #3
 801433a:	e031      	b.n	80143a0 <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 801433c:	2627      	movs	r6, #39	; 0x27
 801433e:	19bc      	adds	r4, r7, r6
 8014340:	231e      	movs	r3, #30
 8014342:	18fb      	adds	r3, r7, r3
 8014344:	881d      	ldrh	r5, [r3, #0]
 8014346:	6a3a      	ldr	r2, [r7, #32]
 8014348:	2326      	movs	r3, #38	; 0x26
 801434a:	18fb      	adds	r3, r7, r3
 801434c:	7819      	ldrb	r1, [r3, #0]
 801434e:	230c      	movs	r3, #12
 8014350:	18f8      	adds	r0, r7, r3
 8014352:	1cfb      	adds	r3, r7, #3
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	9300      	str	r3, [sp, #0]
 8014358:	002b      	movs	r3, r5
 801435a:	f7fd f86d 	bl	8011438 <Send>
 801435e:	0003      	movs	r3, r0
 8014360:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 8014362:	19bb      	adds	r3, r7, r6
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d10d      	bne.n	8014386 <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	7819      	ldrb	r1, [r3, #0]
 801436e:	4b0f      	ldr	r3, [pc, #60]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014370:	4a13      	ldr	r2, [pc, #76]	; (80143c0 <LoRaMacMcpsRequest+0x290>)
 8014372:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014374:	4b0d      	ldr	r3, [pc, #52]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014376:	4a13      	ldr	r2, [pc, #76]	; (80143c4 <LoRaMacMcpsRequest+0x294>)
 8014378:	5c99      	ldrb	r1, [r3, r2]
 801437a:	2001      	movs	r0, #1
 801437c:	4301      	orrs	r1, r0
 801437e:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 8014380:	f7fe fb86 	bl	8012a90 <EventMacNvmCtxChanged>
 8014384:	e003      	b.n	801438e <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014386:	4b09      	ldr	r3, [pc, #36]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014388:	4a0f      	ldr	r2, [pc, #60]	; (80143c8 <LoRaMacMcpsRequest+0x298>)
 801438a:	2100      	movs	r1, #0
 801438c:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801438e:	4a07      	ldr	r2, [pc, #28]	; (80143ac <LoRaMacMcpsRequest+0x27c>)
 8014390:	2391      	movs	r3, #145	; 0x91
 8014392:	00db      	lsls	r3, r3, #3
 8014394:	58d2      	ldr	r2, [r2, r3]
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	611a      	str	r2, [r3, #16]

    return status;
 801439a:	2327      	movs	r3, #39	; 0x27
 801439c:	18fb      	adds	r3, r7, r3
 801439e:	781b      	ldrb	r3, [r3, #0]
}
 80143a0:	0018      	movs	r0, r3
 80143a2:	46bd      	mov	sp, r7
 80143a4:	b00b      	add	sp, #44	; 0x2c
 80143a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143a8:	20000984 	.word	0x20000984
 80143ac:	20000548 	.word	0x20000548
 80143b0:	0000043d 	.word	0x0000043d
 80143b4:	00000412 	.word	0x00000412
 80143b8:	00000411 	.word	0x00000411
 80143bc:	00000484 	.word	0x00000484
 80143c0:	0000043c 	.word	0x0000043c
 80143c4:	00000481 	.word	0x00000481
 80143c8:	00000414 	.word	0x00000414

080143cc <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b084      	sub	sp, #16
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	0002      	movs	r2, r0
 80143d4:	1dfb      	adds	r3, r7, #7
 80143d6:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80143d8:	210c      	movs	r1, #12
 80143da:	187b      	adds	r3, r7, r1
 80143dc:	1dfa      	adds	r2, r7, #7
 80143de:	7812      	ldrb	r2, [r2, #0]
 80143e0:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 80143e2:	4b0b      	ldr	r3, [pc, #44]	; (8014410 <LoRaMacTestSetDutyCycleOn+0x44>)
 80143e4:	4a0b      	ldr	r2, [pc, #44]	; (8014414 <LoRaMacTestSetDutyCycleOn+0x48>)
 80143e6:	589b      	ldr	r3, [r3, r2]
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	1879      	adds	r1, r7, r1
 80143ec:	220f      	movs	r2, #15
 80143ee:	0018      	movs	r0, r3
 80143f0:	f002 fb68 	bl	8016ac4 <RegionVerify>
 80143f4:	1e03      	subs	r3, r0, #0
 80143f6:	d006      	beq.n	8014406 <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 80143f8:	4b05      	ldr	r3, [pc, #20]	; (8014410 <LoRaMacTestSetDutyCycleOn+0x44>)
 80143fa:	4a06      	ldr	r2, [pc, #24]	; (8014414 <LoRaMacTestSetDutyCycleOn+0x48>)
 80143fc:	589b      	ldr	r3, [r3, r2]
 80143fe:	1dfa      	adds	r2, r7, #7
 8014400:	21c9      	movs	r1, #201	; 0xc9
 8014402:	7812      	ldrb	r2, [r2, #0]
 8014404:	545a      	strb	r2, [r3, r1]
    }
}
 8014406:	46c0      	nop			; (mov r8, r8)
 8014408:	46bd      	mov	sp, r7
 801440a:	b004      	add	sp, #16
 801440c:	bd80      	pop	{r7, pc}
 801440e:	46c0      	nop			; (mov r8, r8)
 8014410:	20000548 	.word	0x20000548
 8014414:	00000484 	.word	0x00000484

08014418 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801441a:	b08b      	sub	sp, #44	; 0x2c
 801441c:	af00      	add	r7, sp, #0
 801441e:	60f8      	str	r0, [r7, #12]
 8014420:	60b9      	str	r1, [r7, #8]
 8014422:	607a      	str	r2, [r7, #4]
 8014424:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014426:	2327      	movs	r3, #39	; 0x27
 8014428:	18fb      	adds	r3, r7, r3
 801442a:	2200      	movs	r2, #0
 801442c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 801442e:	2426      	movs	r4, #38	; 0x26
 8014430:	193b      	adds	r3, r7, r4
 8014432:	68fa      	ldr	r2, [r7, #12]
 8014434:	7c12      	ldrb	r2, [r2, #16]
 8014436:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8014438:	2325      	movs	r3, #37	; 0x25
 801443a:	18fb      	adds	r3, r7, r3
 801443c:	68fa      	ldr	r2, [r7, #12]
 801443e:	7c52      	ldrb	r2, [r2, #17]
 8014440:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	689a      	ldr	r2, [r3, #8]
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	795b      	ldrb	r3, [r3, #5]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d100      	bne.n	8014454 <CalcNextV10X+0x3c>
 8014452:	e0a5      	b.n	80145a0 <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014454:	211c      	movs	r1, #28
 8014456:	187b      	adds	r3, r7, r1
 8014458:	2202      	movs	r2, #2
 801445a:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	7c9a      	ldrb	r2, [r3, #18]
 8014460:	187b      	adds	r3, r7, r1
 8014462:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	7cdb      	ldrb	r3, [r3, #19]
 8014468:	187a      	adds	r2, r7, r1
 801446a:	0011      	movs	r1, r2
 801446c:	0018      	movs	r0, r3
 801446e:	f002 fac2 	bl	80169f6 <RegionGetPhyParam>
 8014472:	0003      	movs	r3, r0
 8014474:	001a      	movs	r2, r3
 8014476:	2118      	movs	r1, #24
 8014478:	187b      	adds	r3, r7, r1
 801447a:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 801447c:	187b      	adds	r3, r7, r1
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	2124      	movs	r1, #36	; 0x24
 8014482:	187b      	adds	r3, r7, r1
 8014484:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 8014486:	193a      	adds	r2, r7, r4
 8014488:	187b      	adds	r3, r7, r1
 801448a:	1939      	adds	r1, r7, r4
 801448c:	780c      	ldrb	r4, [r1, #0]
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	b258      	sxtb	r0, r3
 8014492:	b261      	sxtb	r1, r4
 8014494:	4288      	cmp	r0, r1
 8014496:	da00      	bge.n	801449a <CalcNextV10X+0x82>
 8014498:	1c23      	adds	r3, r4, #0
 801449a:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 801449c:	2326      	movs	r3, #38	; 0x26
 801449e:	18fa      	adds	r2, r7, r3
 80144a0:	2324      	movs	r3, #36	; 0x24
 80144a2:	18fb      	adds	r3, r7, r3
 80144a4:	7812      	ldrb	r2, [r2, #0]
 80144a6:	b252      	sxtb	r2, r2
 80144a8:	781b      	ldrb	r3, [r3, #0]
 80144aa:	b25b      	sxtb	r3, r3
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d107      	bne.n	80144c0 <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	2200      	movs	r2, #0
 80144b4:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80144b6:	2327      	movs	r3, #39	; 0x27
 80144b8:	18fb      	adds	r3, r7, r3
 80144ba:	2200      	movs	r2, #0
 80144bc:	701a      	strb	r2, [r3, #0]
 80144be:	e06f      	b.n	80145a0 <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	689b      	ldr	r3, [r3, #8]
 80144c4:	68fa      	ldr	r2, [r7, #12]
 80144c6:	8992      	ldrh	r2, [r2, #12]
 80144c8:	4293      	cmp	r3, r2
 80144ca:	d304      	bcc.n	80144d6 <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 80144cc:	2327      	movs	r3, #39	; 0x27
 80144ce:	18fb      	adds	r3, r7, r3
 80144d0:	2201      	movs	r2, #1
 80144d2:	701a      	strb	r2, [r3, #0]
 80144d4:	e003      	b.n	80144de <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 80144d6:	2327      	movs	r3, #39	; 0x27
 80144d8:	18fb      	adds	r3, r7, r3
 80144da:	2200      	movs	r2, #0
 80144dc:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	689b      	ldr	r3, [r3, #8]
 80144e2:	68fa      	ldr	r2, [r7, #12]
 80144e4:	8992      	ldrh	r2, [r2, #12]
 80144e6:	0011      	movs	r1, r2
 80144e8:	68fa      	ldr	r2, [r7, #12]
 80144ea:	89d2      	ldrh	r2, [r2, #14]
 80144ec:	188a      	adds	r2, r1, r2
 80144ee:	4293      	cmp	r3, r2
 80144f0:	d356      	bcc.n	80145a0 <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80144f2:	241c      	movs	r4, #28
 80144f4:	193b      	adds	r3, r7, r4
 80144f6:	2208      	movs	r2, #8
 80144f8:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	7cdb      	ldrb	r3, [r3, #19]
 80144fe:	193a      	adds	r2, r7, r4
 8014500:	0011      	movs	r1, r2
 8014502:	0018      	movs	r0, r3
 8014504:	f002 fa77 	bl	80169f6 <RegionGetPhyParam>
 8014508:	0003      	movs	r3, r0
 801450a:	001a      	movs	r2, r3
 801450c:	2518      	movs	r5, #24
 801450e:	197b      	adds	r3, r7, r5
 8014510:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 8014512:	197b      	adds	r3, r7, r5
 8014514:	681a      	ldr	r2, [r3, #0]
 8014516:	2325      	movs	r3, #37	; 0x25
 8014518:	18fb      	adds	r3, r7, r3
 801451a:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	689a      	ldr	r2, [r3, #8]
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	89db      	ldrh	r3, [r3, #14]
 8014524:	0019      	movs	r1, r3
 8014526:	0010      	movs	r0, r2
 8014528:	f7eb fe7c 	bl	8000224 <__aeabi_uidivmod>
 801452c:	000b      	movs	r3, r1
 801452e:	2b01      	cmp	r3, #1
 8014530:	d136      	bne.n	80145a0 <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014532:	193b      	adds	r3, r7, r4
 8014534:	2222      	movs	r2, #34	; 0x22
 8014536:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 8014538:	193b      	adds	r3, r7, r4
 801453a:	2626      	movs	r6, #38	; 0x26
 801453c:	19ba      	adds	r2, r7, r6
 801453e:	7812      	ldrb	r2, [r2, #0]
 8014540:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	7c9a      	ldrb	r2, [r3, #18]
 8014546:	193b      	adds	r3, r7, r4
 8014548:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	7cdb      	ldrb	r3, [r3, #19]
 801454e:	193a      	adds	r2, r7, r4
 8014550:	0011      	movs	r1, r2
 8014552:	0018      	movs	r0, r3
 8014554:	f002 fa4f 	bl	80169f6 <RegionGetPhyParam>
 8014558:	0003      	movs	r3, r0
 801455a:	001a      	movs	r2, r3
 801455c:	197b      	adds	r3, r7, r5
 801455e:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8014560:	197b      	adds	r3, r7, r5
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	19bb      	adds	r3, r7, r6
 8014566:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8014568:	19ba      	adds	r2, r7, r6
 801456a:	2324      	movs	r3, #36	; 0x24
 801456c:	18fb      	adds	r3, r7, r3
 801456e:	7812      	ldrb	r2, [r2, #0]
 8014570:	b252      	sxtb	r2, r2
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	b25b      	sxtb	r3, r3
 8014576:	429a      	cmp	r2, r3
 8014578:	d112      	bne.n	80145a0 <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801457a:	2327      	movs	r3, #39	; 0x27
 801457c:	18fb      	adds	r3, r7, r3
 801457e:	2200      	movs	r2, #0
 8014580:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	791b      	ldrb	r3, [r3, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d00a      	beq.n	80145a0 <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801458a:	2110      	movs	r1, #16
 801458c:	187b      	adds	r3, r7, r1
 801458e:	2202      	movs	r2, #2
 8014590:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	7cdb      	ldrb	r3, [r3, #19]
 8014596:	187a      	adds	r2, r7, r1
 8014598:	0011      	movs	r1, r2
 801459a:	0018      	movs	r0, r3
 801459c:	f002 fa67 	bl	8016a6e <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	2226      	movs	r2, #38	; 0x26
 80145a4:	18ba      	adds	r2, r7, r2
 80145a6:	7812      	ldrb	r2, [r2, #0]
 80145a8:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2225      	movs	r2, #37	; 0x25
 80145ae:	18ba      	adds	r2, r7, r2
 80145b0:	7812      	ldrb	r2, [r2, #0]
 80145b2:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80145b4:	2327      	movs	r3, #39	; 0x27
 80145b6:	18fb      	adds	r3, r7, r3
 80145b8:	781b      	ldrb	r3, [r3, #0]
}
 80145ba:	0018      	movs	r0, r3
 80145bc:	46bd      	mov	sp, r7
 80145be:	b00b      	add	sp, #44	; 0x2c
 80145c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080145c2 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80145c2:	b580      	push	{r7, lr}
 80145c4:	b084      	sub	sp, #16
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	60f8      	str	r0, [r7, #12]
 80145ca:	60b9      	str	r1, [r7, #8]
 80145cc:	607a      	str	r2, [r7, #4]
 80145ce:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	789b      	ldrb	r3, [r3, #2]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d107      	bne.n	80145e8 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	687a      	ldr	r2, [r7, #4]
 80145dc:	68b9      	ldr	r1, [r7, #8]
 80145de:	68f8      	ldr	r0, [r7, #12]
 80145e0:	f7ff ff1a 	bl	8014418 <CalcNextV10X>
 80145e4:	0003      	movs	r3, r0
 80145e6:	e000      	b.n	80145ea <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80145e8:	2300      	movs	r3, #0
}
 80145ea:	0018      	movs	r0, r3
 80145ec:	46bd      	mov	sp, r7
 80145ee:	b004      	add	sp, #16
 80145f0:	bd80      	pop	{r7, pc}

080145f2 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 80145f2:	b580      	push	{r7, lr}
 80145f4:	b084      	sub	sp, #16
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	60f8      	str	r0, [r7, #12]
 80145fa:	60b9      	str	r1, [r7, #8]
 80145fc:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80145fe:	46c0      	nop			; (mov r8, r8)
 8014600:	46bd      	mov	sp, r7
 8014602:	b004      	add	sp, #16
 8014604:	bd80      	pop	{r7, pc}

08014606 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 8014606:	b580      	push	{r7, lr}
 8014608:	b082      	sub	sp, #8
 801460a:	af00      	add	r7, sp, #0
 801460c:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 801460e:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8014610:	0018      	movs	r0, r3
 8014612:	46bd      	mov	sp, r7
 8014614:	b002      	add	sp, #8
 8014616:	bd80      	pop	{r7, pc}

08014618 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b082      	sub	sp, #8
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2200      	movs	r2, #0
 8014624:	601a      	str	r2, [r3, #0]
    return NULL;
 8014626:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014628:	0018      	movs	r0, r3
 801462a:	46bd      	mov	sp, r7
 801462c:	b002      	add	sp, #8
 801462e:	bd80      	pop	{r7, pc}

08014630 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b082      	sub	sp, #8
 8014634:	af00      	add	r7, sp, #0
 8014636:	0002      	movs	r2, r0
 8014638:	1dfb      	adds	r3, r7, #7
 801463a:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 801463c:	46c0      	nop			; (mov r8, r8)
 801463e:	46bd      	mov	sp, r7
 8014640:	b002      	add	sp, #8
 8014642:	bd80      	pop	{r7, pc}

08014644 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b082      	sub	sp, #8
 8014648:	af00      	add	r7, sp, #0
 801464a:	0002      	movs	r2, r0
 801464c:	1dfb      	adds	r3, r7, #7
 801464e:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014650:	46c0      	nop			; (mov r8, r8)
 8014652:	46bd      	mov	sp, r7
 8014654:	b002      	add	sp, #8
 8014656:	bd80      	pop	{r7, pc}

08014658 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b082      	sub	sp, #8
 801465c:	af00      	add	r7, sp, #0
 801465e:	0002      	movs	r2, r0
 8014660:	1dfb      	adds	r3, r7, #7
 8014662:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014664:	46c0      	nop			; (mov r8, r8)
 8014666:	46bd      	mov	sp, r7
 8014668:	b002      	add	sp, #8
 801466a:	bd80      	pop	{r7, pc}

0801466c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801466c:	b580      	push	{r7, lr}
 801466e:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014670:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014672:	0018      	movs	r0, r3
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}

08014678 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014680:	46c0      	nop			; (mov r8, r8)
 8014682:	46bd      	mov	sp, r7
 8014684:	b002      	add	sp, #8
 8014686:	bd80      	pop	{r7, pc}

08014688 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b082      	sub	sp, #8
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014690:	46c0      	nop			; (mov r8, r8)
 8014692:	46bd      	mov	sp, r7
 8014694:	b002      	add	sp, #8
 8014696:	bd80      	pop	{r7, pc}

08014698 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b082      	sub	sp, #8
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80146a0:	46c0      	nop			; (mov r8, r8)
 80146a2:	46bd      	mov	sp, r7
 80146a4:	b002      	add	sp, #8
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	000a      	movs	r2, r1
 80146b2:	1cbb      	adds	r3, r7, #2
 80146b4:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80146b6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80146b8:	0018      	movs	r0, r3
 80146ba:	46bd      	mov	sp, r7
 80146bc:	b002      	add	sp, #8
 80146be:	bd80      	pop	{r7, pc}

080146c0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80146c4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80146c6:	0018      	movs	r0, r3
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}

080146cc <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80146d0:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80146d2:	0018      	movs	r0, r3
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80146dc:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80146de:	0018      	movs	r0, r3
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}

080146e4 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80146e8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80146ea:	0018      	movs	r0, r3
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	0002      	movs	r2, r0
 80146f8:	1dfb      	adds	r3, r7, #7
 80146fa:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80146fc:	46c0      	nop			; (mov r8, r8)
 80146fe:	46bd      	mov	sp, r7
 8014700:	b002      	add	sp, #8
 8014702:	bd80      	pop	{r7, pc}

08014704 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014704:	b580      	push	{r7, lr}
 8014706:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014708:	46c0      	nop			; (mov r8, r8)
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}

0801470e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801470e:	b580      	push	{r7, lr}
 8014710:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014712:	46c0      	nop			; (mov r8, r8)
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}

08014718 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b082      	sub	sp, #8
 801471c:	af00      	add	r7, sp, #0
 801471e:	0002      	movs	r2, r0
 8014720:	1dfb      	adds	r3, r7, #7
 8014722:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014724:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014726:	0018      	movs	r0, r3
 8014728:	46bd      	mov	sp, r7
 801472a:	b002      	add	sp, #8
 801472c:	bd80      	pop	{r7, pc}

0801472e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801472e:	b580      	push	{r7, lr}
 8014730:	b082      	sub	sp, #8
 8014732:	af00      	add	r7, sp, #0
 8014734:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014736:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014738:	0018      	movs	r0, r3
 801473a:	46bd      	mov	sp, r7
 801473c:	b002      	add	sp, #8
 801473e:	bd80      	pop	{r7, pc}

08014740 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014748:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 801474a:	0018      	movs	r0, r3
 801474c:	46bd      	mov	sp, r7
 801474e:	b002      	add	sp, #8
 8014750:	bd80      	pop	{r7, pc}

08014752 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014752:	b580      	push	{r7, lr}
 8014754:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014756:	46c0      	nop			; (mov r8, r8)
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}

0801475c <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	0002      	movs	r2, r0
 8014764:	6039      	str	r1, [r7, #0]
 8014766:	1dfb      	adds	r3, r7, #7
 8014768:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 801476a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801476c:	0018      	movs	r0, r3
 801476e:	46bd      	mov	sp, r7
 8014770:	b002      	add	sp, #8
 8014772:	bd80      	pop	{r7, pc}

08014774 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	603a      	str	r2, [r7, #0]
 801477c:	1dbb      	adds	r3, r7, #6
 801477e:	1c02      	adds	r2, r0, #0
 8014780:	801a      	strh	r2, [r3, #0]
 8014782:	1d7b      	adds	r3, r7, #5
 8014784:	1c0a      	adds	r2, r1, #0
 8014786:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014788:	46c0      	nop			; (mov r8, r8)
 801478a:	46bd      	mov	sp, r7
 801478c:	b002      	add	sp, #8
 801478e:	bd80      	pop	{r7, pc}

08014790 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014790:	b580      	push	{r7, lr}
 8014792:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014794:	46c0      	nop			; (mov r8, r8)
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}

0801479a <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801479a:	b580      	push	{r7, lr}
 801479c:	b082      	sub	sp, #8
 801479e:	af00      	add	r7, sp, #0
 80147a0:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 80147a2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80147a4:	0018      	movs	r0, r3
 80147a6:	46bd      	mov	sp, r7
 80147a8:	b002      	add	sp, #8
 80147aa:	bd80      	pop	{r7, pc}

080147ac <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80147b4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80147b6:	0018      	movs	r0, r3
 80147b8:	46bd      	mov	sp, r7
 80147ba:	b002      	add	sp, #8
 80147bc:	bd80      	pop	{r7, pc}

080147be <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80147be:	b580      	push	{r7, lr}
 80147c0:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80147c2:	46c0      	nop			; (mov r8, r8)
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80147cc:	46c0      	nop			; (mov r8, r8)
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b084      	sub	sp, #16
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80147de:	230e      	movs	r3, #14
 80147e0:	18fb      	adds	r3, r7, r3
 80147e2:	2200      	movs	r2, #0
 80147e4:	801a      	strh	r2, [r3, #0]
 80147e6:	e00f      	b.n	8014808 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 80147e8:	230e      	movs	r3, #14
 80147ea:	18fb      	adds	r3, r7, r3
 80147ec:	881b      	ldrh	r3, [r3, #0]
 80147ee:	68ba      	ldr	r2, [r7, #8]
 80147f0:	18d3      	adds	r3, r2, r3
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d001      	beq.n	80147fc <IsSlotFree+0x2a>
        {
            return false;
 80147f8:	2300      	movs	r3, #0
 80147fa:	e00b      	b.n	8014814 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80147fc:	210e      	movs	r1, #14
 80147fe:	187b      	adds	r3, r7, r1
 8014800:	881a      	ldrh	r2, [r3, #0]
 8014802:	187b      	adds	r3, r7, r1
 8014804:	3201      	adds	r2, #1
 8014806:	801a      	strh	r2, [r3, #0]
 8014808:	230e      	movs	r3, #14
 801480a:	18fb      	adds	r3, r7, r3
 801480c:	881b      	ldrh	r3, [r3, #0]
 801480e:	2b0f      	cmp	r3, #15
 8014810:	d9ea      	bls.n	80147e8 <IsSlotFree+0x16>
        }
    }
    return true;
 8014812:	2301      	movs	r3, #1
}
 8014814:	0018      	movs	r0, r3
 8014816:	46bd      	mov	sp, r7
 8014818:	b004      	add	sp, #16
 801481a:	bd80      	pop	{r7, pc}

0801481c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014822:	1dfb      	adds	r3, r7, #7
 8014824:	2200      	movs	r2, #0
 8014826:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014828:	e00a      	b.n	8014840 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 801482a:	1dfb      	adds	r3, r7, #7
 801482c:	781a      	ldrb	r2, [r3, #0]
 801482e:	1dfb      	adds	r3, r7, #7
 8014830:	3201      	adds	r2, #1
 8014832:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014834:	1dfb      	adds	r3, r7, #7
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	2b0f      	cmp	r3, #15
 801483a:	d101      	bne.n	8014840 <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 801483c:	2300      	movs	r3, #0
 801483e:	e017      	b.n	8014870 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014840:	1dfb      	adds	r3, r7, #7
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	011b      	lsls	r3, r3, #4
 8014846:	3308      	adds	r3, #8
 8014848:	001a      	movs	r2, r3
 801484a:	4b0b      	ldr	r3, [pc, #44]	; (8014878 <MallocNewMacCommandSlot+0x5c>)
 801484c:	18d3      	adds	r3, r2, r3
 801484e:	0018      	movs	r0, r3
 8014850:	f7ff ffbf 	bl	80147d2 <IsSlotFree>
 8014854:	0003      	movs	r3, r0
 8014856:	001a      	movs	r2, r3
 8014858:	2301      	movs	r3, #1
 801485a:	4053      	eors	r3, r2
 801485c:	b2db      	uxtb	r3, r3
 801485e:	2b00      	cmp	r3, #0
 8014860:	d1e3      	bne.n	801482a <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8014862:	1dfb      	adds	r3, r7, #7
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	011b      	lsls	r3, r3, #4
 8014868:	3308      	adds	r3, #8
 801486a:	001a      	movs	r2, r3
 801486c:	4b02      	ldr	r3, [pc, #8]	; (8014878 <MallocNewMacCommandSlot+0x5c>)
 801486e:	18d3      	adds	r3, r2, r3
}
 8014870:	0018      	movs	r0, r3
 8014872:	46bd      	mov	sp, r7
 8014874:	b002      	add	sp, #8
 8014876:	bd80      	pop	{r7, pc}
 8014878:	20000b80 	.word	0x20000b80

0801487c <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d101      	bne.n	801488e <FreeMacCommandSlot+0x12>
    {
        return false;
 801488a:	2300      	movs	r3, #0
 801488c:	e006      	b.n	801489c <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2210      	movs	r2, #16
 8014892:	2100      	movs	r1, #0
 8014894:	0018      	movs	r0, r3
 8014896:	f004 fd6b 	bl	8019370 <memset1>

    return true;
 801489a:	2301      	movs	r3, #1
}
 801489c:	0018      	movs	r0, r3
 801489e:	46bd      	mov	sp, r7
 80148a0:	b002      	add	sp, #8
 80148a2:	bd80      	pop	{r7, pc}

080148a4 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b082      	sub	sp, #8
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d101      	bne.n	80148b6 <LinkedListInit+0x12>
    {
        return false;
 80148b2:	2300      	movs	r3, #0
 80148b4:	e006      	b.n	80148c4 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2200      	movs	r2, #0
 80148ba:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2200      	movs	r2, #0
 80148c0:	605a      	str	r2, [r3, #4]

    return true;
 80148c2:	2301      	movs	r3, #1
}
 80148c4:	0018      	movs	r0, r3
 80148c6:	46bd      	mov	sp, r7
 80148c8:	b002      	add	sp, #8
 80148ca:	bd80      	pop	{r7, pc}

080148cc <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
 80148d4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d002      	beq.n	80148e2 <LinkedListAdd+0x16>
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d101      	bne.n	80148e6 <LinkedListAdd+0x1a>
    {
        return false;
 80148e2:	2300      	movs	r3, #0
 80148e4:	e015      	b.n	8014912 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d102      	bne.n	80148f4 <LinkedListAdd+0x28>
    {
        list->First = element;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	683a      	ldr	r2, [r7, #0]
 80148f2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d003      	beq.n	8014904 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	685b      	ldr	r3, [r3, #4]
 8014900:	683a      	ldr	r2, [r7, #0]
 8014902:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	2200      	movs	r2, #0
 8014908:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	683a      	ldr	r2, [r7, #0]
 801490e:	605a      	str	r2, [r3, #4]

    return true;
 8014910:	2301      	movs	r3, #1
}
 8014912:	0018      	movs	r0, r3
 8014914:	46bd      	mov	sp, r7
 8014916:	b002      	add	sp, #8
 8014918:	bd80      	pop	{r7, pc}

0801491a <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801491a:	b580      	push	{r7, lr}
 801491c:	b084      	sub	sp, #16
 801491e:	af00      	add	r7, sp, #0
 8014920:	6078      	str	r0, [r7, #4]
 8014922:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d002      	beq.n	8014930 <LinkedListGetPrevious+0x16>
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d101      	bne.n	8014934 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014930:	2300      	movs	r3, #0
 8014932:	e016      	b.n	8014962 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801493a:	683a      	ldr	r2, [r7, #0]
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	429a      	cmp	r2, r3
 8014940:	d00c      	beq.n	801495c <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014942:	e002      	b.n	801494a <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d007      	beq.n	8014960 <LinkedListGetPrevious+0x46>
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	683a      	ldr	r2, [r7, #0]
 8014956:	429a      	cmp	r2, r3
 8014958:	d1f4      	bne.n	8014944 <LinkedListGetPrevious+0x2a>
 801495a:	e001      	b.n	8014960 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801495c:	2300      	movs	r3, #0
 801495e:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014960:	68fb      	ldr	r3, [r7, #12]
}
 8014962:	0018      	movs	r0, r3
 8014964:	46bd      	mov	sp, r7
 8014966:	b004      	add	sp, #16
 8014968:	bd80      	pop	{r7, pc}

0801496a <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801496a:	b580      	push	{r7, lr}
 801496c:	b084      	sub	sp, #16
 801496e:	af00      	add	r7, sp, #0
 8014970:	6078      	str	r0, [r7, #4]
 8014972:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d002      	beq.n	8014980 <LinkedListRemove+0x16>
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d101      	bne.n	8014984 <LinkedListRemove+0x1a>
    {
        return false;
 8014980:	2300      	movs	r3, #0
 8014982:	e023      	b.n	80149cc <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014984:	683a      	ldr	r2, [r7, #0]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	0011      	movs	r1, r2
 801498a:	0018      	movs	r0, r3
 801498c:	f7ff ffc5 	bl	801491a <LinkedListGetPrevious>
 8014990:	0003      	movs	r3, r0
 8014992:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	683a      	ldr	r2, [r7, #0]
 801499a:	429a      	cmp	r2, r3
 801499c:	d103      	bne.n	80149a6 <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	683a      	ldr	r2, [r7, #0]
 80149ac:	429a      	cmp	r2, r3
 80149ae:	d102      	bne.n	80149b6 <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	68fa      	ldr	r2, [r7, #12]
 80149b4:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d003      	beq.n	80149c4 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	2200      	movs	r2, #0
 80149c8:	601a      	str	r2, [r3, #0]

    return true;
 80149ca:	2301      	movs	r3, #1
}
 80149cc:	0018      	movs	r0, r3
 80149ce:	46bd      	mov	sp, r7
 80149d0:	b004      	add	sp, #16
 80149d2:	bd80      	pop	{r7, pc}

080149d4 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
 80149da:	0002      	movs	r2, r0
 80149dc:	1dfb      	adds	r3, r7, #7
 80149de:	701a      	strb	r2, [r3, #0]
    switch( cid )
 80149e0:	1dfb      	adds	r3, r7, #7
 80149e2:	781b      	ldrb	r3, [r3, #0]
 80149e4:	2b05      	cmp	r3, #5
 80149e6:	d003      	beq.n	80149f0 <IsSticky+0x1c>
 80149e8:	db04      	blt.n	80149f4 <IsSticky+0x20>
 80149ea:	3b08      	subs	r3, #8
 80149ec:	2b02      	cmp	r3, #2
 80149ee:	d801      	bhi.n	80149f4 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 80149f0:	2301      	movs	r3, #1
 80149f2:	e000      	b.n	80149f6 <IsSticky+0x22>
        default:
            return false;
 80149f4:	2300      	movs	r3, #0
    }
}
 80149f6:	0018      	movs	r0, r3
 80149f8:	46bd      	mov	sp, r7
 80149fa:	b002      	add	sp, #8
 80149fc:	bd80      	pop	{r7, pc}
	...

08014a00 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 8014a04:	4b04      	ldr	r3, [pc, #16]	; (8014a18 <NvmCtxCallback+0x18>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d002      	beq.n	8014a12 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8014a0c:	4b02      	ldr	r3, [pc, #8]	; (8014a18 <NvmCtxCallback+0x18>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	4798      	blx	r3
    }
}
 8014a12:	46c0      	nop			; (mov r8, r8)
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}
 8014a18:	20000b7c 	.word	0x20000b7c

08014a1c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8014a24:	4b08      	ldr	r3, [pc, #32]	; (8014a48 <LoRaMacCommandsInit+0x2c>)
 8014a26:	22fc      	movs	r2, #252	; 0xfc
 8014a28:	2100      	movs	r1, #0
 8014a2a:	0018      	movs	r0, r3
 8014a2c:	f004 fca0 	bl	8019370 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 8014a30:	4b05      	ldr	r3, [pc, #20]	; (8014a48 <LoRaMacCommandsInit+0x2c>)
 8014a32:	0018      	movs	r0, r3
 8014a34:	f7ff ff36 	bl	80148a4 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8014a38:	4b04      	ldr	r3, [pc, #16]	; (8014a4c <LoRaMacCommandsInit+0x30>)
 8014a3a:	687a      	ldr	r2, [r7, #4]
 8014a3c:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 8014a3e:	2300      	movs	r3, #0
}
 8014a40:	0018      	movs	r0, r3
 8014a42:	46bd      	mov	sp, r7
 8014a44:	b002      	add	sp, #8
 8014a46:	bd80      	pop	{r7, pc}
 8014a48:	20000b80 	.word	0x20000b80
 8014a4c:	20000b7c 	.word	0x20000b7c

08014a50 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b082      	sub	sp, #8
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d007      	beq.n	8014a6e <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 8014a5e:	6879      	ldr	r1, [r7, #4]
 8014a60:	4b05      	ldr	r3, [pc, #20]	; (8014a78 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 8014a62:	22fc      	movs	r2, #252	; 0xfc
 8014a64:	0018      	movs	r0, r3
 8014a66:	f004 fc45 	bl	80192f4 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	e000      	b.n	8014a70 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014a6e:	2301      	movs	r3, #1
    }
}
 8014a70:	0018      	movs	r0, r3
 8014a72:	46bd      	mov	sp, r7
 8014a74:	b002      	add	sp, #8
 8014a76:	bd80      	pop	{r7, pc}
 8014a78:	20000b80 	.word	0x20000b80

08014a7c <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b082      	sub	sp, #8
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	22fc      	movs	r2, #252	; 0xfc
 8014a88:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8014a8a:	4b02      	ldr	r3, [pc, #8]	; (8014a94 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8014a8c:	0018      	movs	r0, r3
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	b002      	add	sp, #8
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	20000b80 	.word	0x20000b80

08014a98 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014a98:	b590      	push	{r4, r7, lr}
 8014a9a:	b087      	sub	sp, #28
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	60b9      	str	r1, [r7, #8]
 8014aa0:	607a      	str	r2, [r7, #4]
 8014aa2:	230f      	movs	r3, #15
 8014aa4:	18fb      	adds	r3, r7, r3
 8014aa6:	1c02      	adds	r2, r0, #0
 8014aa8:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d101      	bne.n	8014ab4 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	e03c      	b.n	8014b2e <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014ab4:	f7ff feb2 	bl	801481c <MallocNewMacCommandSlot>
 8014ab8:	0003      	movs	r3, r0
 8014aba:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d101      	bne.n	8014ac6 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014ac2:	2302      	movs	r3, #2
 8014ac4:	e033      	b.n	8014b2e <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 8014ac6:	697a      	ldr	r2, [r7, #20]
 8014ac8:	4b1b      	ldr	r3, [pc, #108]	; (8014b38 <LoRaMacCommandsAddCmd+0xa0>)
 8014aca:	0011      	movs	r1, r2
 8014acc:	0018      	movs	r0, r3
 8014ace:	f7ff fefd 	bl	80148cc <LinkedListAdd>
 8014ad2:	0003      	movs	r3, r0
 8014ad4:	001a      	movs	r2, r3
 8014ad6:	2301      	movs	r3, #1
 8014ad8:	4053      	eors	r3, r2
 8014ada:	b2db      	uxtb	r3, r3
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d001      	beq.n	8014ae4 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014ae0:	2305      	movs	r3, #5
 8014ae2:	e024      	b.n	8014b2e <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	240f      	movs	r4, #15
 8014ae8:	193a      	adds	r2, r7, r4
 8014aea:	7812      	ldrb	r2, [r2, #0]
 8014aec:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014aee:	697b      	ldr	r3, [r7, #20]
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	3305      	adds	r3, #5
 8014af8:	687a      	ldr	r2, [r7, #4]
 8014afa:	b292      	uxth	r2, r2
 8014afc:	68b9      	ldr	r1, [r7, #8]
 8014afe:	0018      	movs	r0, r3
 8014b00:	f004 fbf8 	bl	80192f4 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014b04:	193b      	adds	r3, r7, r4
 8014b06:	781b      	ldrb	r3, [r3, #0]
 8014b08:	0018      	movs	r0, r3
 8014b0a:	f7ff ff63 	bl	80149d4 <IsSticky>
 8014b0e:	0003      	movs	r3, r0
 8014b10:	001a      	movs	r2, r3
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014b16:	4b08      	ldr	r3, [pc, #32]	; (8014b38 <LoRaMacCommandsAddCmd+0xa0>)
 8014b18:	22f8      	movs	r2, #248	; 0xf8
 8014b1a:	589a      	ldr	r2, [r3, r2]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	18d3      	adds	r3, r2, r3
 8014b20:	1c5a      	adds	r2, r3, #1
 8014b22:	4b05      	ldr	r3, [pc, #20]	; (8014b38 <LoRaMacCommandsAddCmd+0xa0>)
 8014b24:	21f8      	movs	r1, #248	; 0xf8
 8014b26:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8014b28:	f7ff ff6a 	bl	8014a00 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014b2c:	2300      	movs	r3, #0
}
 8014b2e:	0018      	movs	r0, r3
 8014b30:	46bd      	mov	sp, r7
 8014b32:	b007      	add	sp, #28
 8014b34:	bd90      	pop	{r4, r7, pc}
 8014b36:	46c0      	nop			; (mov r8, r8)
 8014b38:	20000b80 	.word	0x20000b80

08014b3c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b082      	sub	sp, #8
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d101      	bne.n	8014b4e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	e028      	b.n	8014ba0 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	4b15      	ldr	r3, [pc, #84]	; (8014ba8 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014b52:	0011      	movs	r1, r2
 8014b54:	0018      	movs	r0, r3
 8014b56:	f7ff ff08 	bl	801496a <LinkedListRemove>
 8014b5a:	0003      	movs	r3, r0
 8014b5c:	001a      	movs	r2, r3
 8014b5e:	2301      	movs	r3, #1
 8014b60:	4053      	eors	r3, r2
 8014b62:	b2db      	uxtb	r3, r3
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d001      	beq.n	8014b6c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014b68:	2303      	movs	r3, #3
 8014b6a:	e019      	b.n	8014ba0 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014b6c:	4b0e      	ldr	r3, [pc, #56]	; (8014ba8 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014b6e:	22f8      	movs	r2, #248	; 0xf8
 8014b70:	589a      	ldr	r2, [r3, r2]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	689b      	ldr	r3, [r3, #8]
 8014b76:	1ad3      	subs	r3, r2, r3
 8014b78:	1e5a      	subs	r2, r3, #1
 8014b7a:	4b0b      	ldr	r3, [pc, #44]	; (8014ba8 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014b7c:	21f8      	movs	r1, #248	; 0xf8
 8014b7e:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	0018      	movs	r0, r3
 8014b84:	f7ff fe7a 	bl	801487c <FreeMacCommandSlot>
 8014b88:	0003      	movs	r3, r0
 8014b8a:	001a      	movs	r2, r3
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	4053      	eors	r3, r2
 8014b90:	b2db      	uxtb	r3, r3
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d001      	beq.n	8014b9a <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014b96:	2305      	movs	r3, #5
 8014b98:	e002      	b.n	8014ba0 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8014b9a:	f7ff ff31 	bl	8014a00 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014b9e:	2300      	movs	r3, #0
}
 8014ba0:	0018      	movs	r0, r3
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	b002      	add	sp, #8
 8014ba6:	bd80      	pop	{r7, pc}
 8014ba8:	20000b80 	.word	0x20000b80

08014bac <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b082      	sub	sp, #8
 8014bb0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014bb2:	4b11      	ldr	r3, [pc, #68]	; (8014bf8 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014bb8:	e013      	b.n	8014be2 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	7b1b      	ldrb	r3, [r3, #12]
 8014bbe:	2201      	movs	r2, #1
 8014bc0:	4053      	eors	r3, r2
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d009      	beq.n	8014bdc <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	0018      	movs	r0, r3
 8014bd2:	f7ff ffb3 	bl	8014b3c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	607b      	str	r3, [r7, #4]
 8014bda:	e002      	b.n	8014be2 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d1e8      	bne.n	8014bba <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8014be8:	f7ff ff0a 	bl	8014a00 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014bec:	2300      	movs	r3, #0
}
 8014bee:	0018      	movs	r0, r3
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	b002      	add	sp, #8
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	46c0      	nop			; (mov r8, r8)
 8014bf8:	20000b80 	.word	0x20000b80

08014bfc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b082      	sub	sp, #8
 8014c00:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014c02:	4b0f      	ldr	r3, [pc, #60]	; (8014c40 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014c08:	e00f      	b.n	8014c2a <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	791b      	ldrb	r3, [r3, #4]
 8014c14:	0018      	movs	r0, r3
 8014c16:	f7ff fedd 	bl	80149d4 <IsSticky>
 8014c1a:	1e03      	subs	r3, r0, #0
 8014c1c:	d003      	beq.n	8014c26 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	0018      	movs	r0, r3
 8014c22:	f7ff ff8b 	bl	8014b3c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d1ec      	bne.n	8014c0a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 8014c30:	f7ff fee6 	bl	8014a00 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014c34:	2300      	movs	r3, #0
}
 8014c36:	0018      	movs	r0, r3
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	b002      	add	sp, #8
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	46c0      	nop			; (mov r8, r8)
 8014c40:	20000b80 	.word	0x20000b80

08014c44 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b082      	sub	sp, #8
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d101      	bne.n	8014c56 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014c52:	2301      	movs	r3, #1
 8014c54:	e005      	b.n	8014c62 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8014c56:	4b05      	ldr	r3, [pc, #20]	; (8014c6c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014c58:	22f8      	movs	r2, #248	; 0xf8
 8014c5a:	589a      	ldr	r2, [r3, r2]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014c60:	2300      	movs	r3, #0
}
 8014c62:	0018      	movs	r0, r3
 8014c64:	46bd      	mov	sp, r7
 8014c66:	b002      	add	sp, #8
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	46c0      	nop			; (mov r8, r8)
 8014c6c:	20000b80 	.word	0x20000b80

08014c70 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014c70:	b590      	push	{r4, r7, lr}
 8014c72:	b089      	sub	sp, #36	; 0x24
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	60f8      	str	r0, [r7, #12]
 8014c78:	60b9      	str	r1, [r7, #8]
 8014c7a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 8014c7c:	4b2a      	ldr	r3, [pc, #168]	; (8014d28 <LoRaMacCommandsSerializeCmds+0xb8>)
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014c82:	231b      	movs	r3, #27
 8014c84:	18fb      	adds	r3, r7, r3
 8014c86:	2200      	movs	r2, #0
 8014c88:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d002      	beq.n	8014c96 <LoRaMacCommandsSerializeCmds+0x26>
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d12d      	bne.n	8014cf2 <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014c96:	2301      	movs	r3, #1
 8014c98:	e042      	b.n	8014d20 <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014c9a:	241b      	movs	r4, #27
 8014c9c:	193b      	adds	r3, r7, r4
 8014c9e:	781b      	ldrb	r3, [r3, #0]
 8014ca0:	68fa      	ldr	r2, [r7, #12]
 8014ca2:	1ad2      	subs	r2, r2, r3
 8014ca4:	69fb      	ldr	r3, [r7, #28]
 8014ca6:	689b      	ldr	r3, [r3, #8]
 8014ca8:	3301      	adds	r3, #1
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d325      	bcc.n	8014cfa <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 8014cae:	193b      	adds	r3, r7, r4
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	193a      	adds	r2, r7, r4
 8014cb4:	1c59      	adds	r1, r3, #1
 8014cb6:	7011      	strb	r1, [r2, #0]
 8014cb8:	001a      	movs	r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	189b      	adds	r3, r3, r2
 8014cbe:	69fa      	ldr	r2, [r7, #28]
 8014cc0:	7912      	ldrb	r2, [r2, #4]
 8014cc2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014cc4:	193b      	adds	r3, r7, r4
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	687a      	ldr	r2, [r7, #4]
 8014cca:	18d0      	adds	r0, r2, r3
 8014ccc:	69fb      	ldr	r3, [r7, #28]
 8014cce:	1d59      	adds	r1, r3, #5
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	689b      	ldr	r3, [r3, #8]
 8014cd4:	b29b      	uxth	r3, r3
 8014cd6:	001a      	movs	r2, r3
 8014cd8:	f004 fb0c 	bl	80192f4 <memcpy1>
            itr += curElement->PayloadSize;
 8014cdc:	69fb      	ldr	r3, [r7, #28]
 8014cde:	689b      	ldr	r3, [r3, #8]
 8014ce0:	b2d9      	uxtb	r1, r3
 8014ce2:	193b      	adds	r3, r7, r4
 8014ce4:	193a      	adds	r2, r7, r4
 8014ce6:	7812      	ldrb	r2, [r2, #0]
 8014ce8:	188a      	adds	r2, r1, r2
 8014cea:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014cec:	69fb      	ldr	r3, [r7, #28]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014cf2:	69fb      	ldr	r3, [r7, #28]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d1d0      	bne.n	8014c9a <LoRaMacCommandsSerializeCmds+0x2a>
 8014cf8:	e00a      	b.n	8014d10 <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 8014cfa:	46c0      	nop			; (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014cfc:	e008      	b.n	8014d10 <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014cfe:	69fb      	ldr	r3, [r7, #28]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	0018      	movs	r0, r3
 8014d08:	f7ff ff18 	bl	8014b3c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014d10:	69fb      	ldr	r3, [r7, #28]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d1f3      	bne.n	8014cfe <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014d16:	68bb      	ldr	r3, [r7, #8]
 8014d18:	0018      	movs	r0, r3
 8014d1a:	f7ff ff93 	bl	8014c44 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014d1e:	2300      	movs	r3, #0
}
 8014d20:	0018      	movs	r0, r3
 8014d22:	46bd      	mov	sp, r7
 8014d24:	b009      	add	sp, #36	; 0x24
 8014d26:	bd90      	pop	{r4, r7, pc}
 8014d28:	20000b80 	.word	0x20000b80

08014d2c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b084      	sub	sp, #16
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d101      	bne.n	8014d3e <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d3a:	2301      	movs	r3, #1
 8014d3c:	e016      	b.n	8014d6c <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8014d3e:	4b0d      	ldr	r3, [pc, #52]	; (8014d74 <LoRaMacCommandsStickyCmdsPending+0x48>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2200      	movs	r2, #0
 8014d48:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8014d4a:	e00b      	b.n	8014d64 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	7b1b      	ldrb	r3, [r3, #12]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d004      	beq.n	8014d5e <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	2201      	movs	r2, #1
 8014d58:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	e006      	b.n	8014d6c <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d1f0      	bne.n	8014d4c <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014d6a:	2300      	movs	r3, #0
}
 8014d6c:	0018      	movs	r0, r3
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	b004      	add	sp, #16
 8014d72:	bd80      	pop	{r7, pc}
 8014d74:	20000b80 	.word	0x20000b80

08014d78 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b084      	sub	sp, #16
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	0002      	movs	r2, r0
 8014d80:	1dfb      	adds	r3, r7, #7
 8014d82:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 8014d84:	230f      	movs	r3, #15
 8014d86:	18fb      	adds	r3, r7, r3
 8014d88:	2200      	movs	r2, #0
 8014d8a:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 8014d8c:	1dfb      	adds	r3, r7, #7
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	2b13      	cmp	r3, #19
 8014d92:	d84a      	bhi.n	8014e2a <LoRaMacCommandsGetCmdSize+0xb2>
 8014d94:	009a      	lsls	r2, r3, #2
 8014d96:	4b29      	ldr	r3, [pc, #164]	; (8014e3c <LoRaMacCommandsGetCmdSize+0xc4>)
 8014d98:	18d3      	adds	r3, r2, r3
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014d9e:	230f      	movs	r3, #15
 8014da0:	18fb      	adds	r3, r7, r3
 8014da2:	2203      	movs	r2, #3
 8014da4:	701a      	strb	r2, [r3, #0]
            break;
 8014da6:	e041      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014da8:	230f      	movs	r3, #15
 8014daa:	18fb      	adds	r3, r7, r3
 8014dac:	2205      	movs	r2, #5
 8014dae:	701a      	strb	r2, [r3, #0]
            break;
 8014db0:	e03c      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014db2:	230f      	movs	r3, #15
 8014db4:	18fb      	adds	r3, r7, r3
 8014db6:	2202      	movs	r2, #2
 8014db8:	701a      	strb	r2, [r3, #0]
            break;
 8014dba:	e037      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014dbc:	230f      	movs	r3, #15
 8014dbe:	18fb      	adds	r3, r7, r3
 8014dc0:	2205      	movs	r2, #5
 8014dc2:	701a      	strb	r2, [r3, #0]
            break;
 8014dc4:	e032      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014dc6:	230f      	movs	r3, #15
 8014dc8:	18fb      	adds	r3, r7, r3
 8014dca:	2201      	movs	r2, #1
 8014dcc:	701a      	strb	r2, [r3, #0]
            break;
 8014dce:	e02d      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014dd0:	230f      	movs	r3, #15
 8014dd2:	18fb      	adds	r3, r7, r3
 8014dd4:	2206      	movs	r2, #6
 8014dd6:	701a      	strb	r2, [r3, #0]
            break;
 8014dd8:	e028      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014dda:	230f      	movs	r3, #15
 8014ddc:	18fb      	adds	r3, r7, r3
 8014dde:	2202      	movs	r2, #2
 8014de0:	701a      	strb	r2, [r3, #0]
            break;
 8014de2:	e023      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014de4:	230f      	movs	r3, #15
 8014de6:	18fb      	adds	r3, r7, r3
 8014de8:	2202      	movs	r2, #2
 8014dea:	701a      	strb	r2, [r3, #0]
            break;
 8014dec:	e01e      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014dee:	230f      	movs	r3, #15
 8014df0:	18fb      	adds	r3, r7, r3
 8014df2:	2205      	movs	r2, #5
 8014df4:	701a      	strb	r2, [r3, #0]
            break;
 8014df6:	e019      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014df8:	230f      	movs	r3, #15
 8014dfa:	18fb      	adds	r3, r7, r3
 8014dfc:	2206      	movs	r2, #6
 8014dfe:	701a      	strb	r2, [r3, #0]
            break;
 8014e00:	e014      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8014e02:	230f      	movs	r3, #15
 8014e04:	18fb      	adds	r3, r7, r3
 8014e06:	2201      	movs	r2, #1
 8014e08:	701a      	strb	r2, [r3, #0]
            break;
 8014e0a:	e00f      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8014e0c:	230f      	movs	r3, #15
 8014e0e:	18fb      	adds	r3, r7, r3
 8014e10:	2205      	movs	r2, #5
 8014e12:	701a      	strb	r2, [r3, #0]
            break;
 8014e14:	e00a      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8014e16:	230f      	movs	r3, #15
 8014e18:	18fb      	adds	r3, r7, r3
 8014e1a:	2204      	movs	r2, #4
 8014e1c:	701a      	strb	r2, [r3, #0]
            break;
 8014e1e:	e005      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8014e20:	230f      	movs	r3, #15
 8014e22:	18fb      	adds	r3, r7, r3
 8014e24:	2204      	movs	r2, #4
 8014e26:	701a      	strb	r2, [r3, #0]
            break;
 8014e28:	e000      	b.n	8014e2c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8014e2a:	46c0      	nop			; (mov r8, r8)
        }
    }
    return cidSize;
 8014e2c:	230f      	movs	r3, #15
 8014e2e:	18fb      	adds	r3, r7, r3
 8014e30:	781b      	ldrb	r3, [r3, #0]
}
 8014e32:	0018      	movs	r0, r3
 8014e34:	46bd      	mov	sp, r7
 8014e36:	b004      	add	sp, #16
 8014e38:	bd80      	pop	{r7, pc}
 8014e3a:	46c0      	nop			; (mov r8, r8)
 8014e3c:	0801edf8 	.word	0x0801edf8

08014e40 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b082      	sub	sp, #8
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8014e48:	4b08      	ldr	r3, [pc, #32]	; (8014e6c <IncreaseBufferPointer+0x2c>)
 8014e4a:	691b      	ldr	r3, [r3, #16]
 8014e4c:	3310      	adds	r3, #16
 8014e4e:	687a      	ldr	r2, [r7, #4]
 8014e50:	429a      	cmp	r2, r3
 8014e52:	d103      	bne.n	8014e5c <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014e54:	4b05      	ldr	r3, [pc, #20]	; (8014e6c <IncreaseBufferPointer+0x2c>)
 8014e56:	691b      	ldr	r3, [r3, #16]
 8014e58:	607b      	str	r3, [r7, #4]
 8014e5a:	e002      	b.n	8014e62 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	3304      	adds	r3, #4
 8014e60:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8014e62:	687b      	ldr	r3, [r7, #4]
}
 8014e64:	0018      	movs	r0, r3
 8014e66:	46bd      	mov	sp, r7
 8014e68:	b002      	add	sp, #8
 8014e6a:	bd80      	pop	{r7, pc}
 8014e6c:	20000c94 	.word	0x20000c94

08014e70 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b082      	sub	sp, #8
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	0002      	movs	r2, r0
 8014e78:	1dfb      	adds	r3, r7, #7
 8014e7a:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 8014e7c:	1dfb      	adds	r3, r7, #7
 8014e7e:	781b      	ldrb	r3, [r3, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d101      	bne.n	8014e88 <IsListEmpty+0x18>
    {
        return true;
 8014e84:	2301      	movs	r3, #1
 8014e86:	e000      	b.n	8014e8a <IsListEmpty+0x1a>
    }
    return false;
 8014e88:	2300      	movs	r3, #0
}
 8014e8a:	0018      	movs	r0, r3
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	b002      	add	sp, #8
 8014e90:	bd80      	pop	{r7, pc}

08014e92 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8014e92:	b580      	push	{r7, lr}
 8014e94:	b082      	sub	sp, #8
 8014e96:	af00      	add	r7, sp, #0
 8014e98:	0002      	movs	r2, r0
 8014e9a:	1dfb      	adds	r3, r7, #7
 8014e9c:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8014e9e:	1dfb      	adds	r3, r7, #7
 8014ea0:	781b      	ldrb	r3, [r3, #0]
 8014ea2:	2b04      	cmp	r3, #4
 8014ea4:	d901      	bls.n	8014eaa <IsListFull+0x18>
    {
        return true;
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	e000      	b.n	8014eac <IsListFull+0x1a>
    }
    return false;
 8014eaa:	2300      	movs	r3, #0
}
 8014eac:	0018      	movs	r0, r3
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	b002      	add	sp, #8
 8014eb2:	bd80      	pop	{r7, pc}

08014eb4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b086      	sub	sp, #24
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	60b9      	str	r1, [r7, #8]
 8014ebc:	607a      	str	r2, [r7, #4]
 8014ebe:	230f      	movs	r3, #15
 8014ec0:	18fb      	adds	r3, r7, r3
 8014ec2:	1c02      	adds	r2, r0, #0
 8014ec4:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014eca:	4b18      	ldr	r3, [pc, #96]	; (8014f2c <GetElement+0x78>)
 8014ecc:	691b      	ldr	r3, [r3, #16]
 8014ece:	7d1b      	ldrb	r3, [r3, #20]
 8014ed0:	0018      	movs	r0, r3
 8014ed2:	f7ff ffcd 	bl	8014e70 <IsListEmpty>
 8014ed6:	1e03      	subs	r3, r0, #0
 8014ed8:	d001      	beq.n	8014ede <GetElement+0x2a>
    {
        return NULL;
 8014eda:	2300      	movs	r3, #0
 8014edc:	e022      	b.n	8014f24 <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8014ede:	2313      	movs	r3, #19
 8014ee0:	18fb      	adds	r3, r7, r3
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	701a      	strb	r2, [r3, #0]
 8014ee6:	e014      	b.n	8014f12 <GetElement+0x5e>
    {
        if( element->Request == request )
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	781b      	ldrb	r3, [r3, #0]
 8014eec:	220f      	movs	r2, #15
 8014eee:	18ba      	adds	r2, r7, r2
 8014ef0:	7812      	ldrb	r2, [r2, #0]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d101      	bne.n	8014efa <GetElement+0x46>
        {
            // We have found the element
            return element;
 8014ef6:	697b      	ldr	r3, [r7, #20]
 8014ef8:	e014      	b.n	8014f24 <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	0018      	movs	r0, r3
 8014efe:	f7ff ff9f 	bl	8014e40 <IncreaseBufferPointer>
 8014f02:	0003      	movs	r3, r0
 8014f04:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8014f06:	2113      	movs	r1, #19
 8014f08:	187b      	adds	r3, r7, r1
 8014f0a:	781a      	ldrb	r2, [r3, #0]
 8014f0c:	187b      	adds	r3, r7, r1
 8014f0e:	3201      	adds	r2, #1
 8014f10:	701a      	strb	r2, [r3, #0]
 8014f12:	4b06      	ldr	r3, [pc, #24]	; (8014f2c <GetElement+0x78>)
 8014f14:	691b      	ldr	r3, [r3, #16]
 8014f16:	7d1b      	ldrb	r3, [r3, #20]
 8014f18:	2213      	movs	r2, #19
 8014f1a:	18ba      	adds	r2, r7, r2
 8014f1c:	7812      	ldrb	r2, [r2, #0]
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	d3e2      	bcc.n	8014ee8 <GetElement+0x34>
    }

    return NULL;
 8014f22:	2300      	movs	r3, #0
}
 8014f24:	0018      	movs	r0, r3
 8014f26:	46bd      	mov	sp, r7
 8014f28:	b006      	add	sp, #24
 8014f2a:	bd80      	pop	{r7, pc}
 8014f2c:	20000c94 	.word	0x20000c94

08014f30 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 8014f3a:	4b13      	ldr	r3, [pc, #76]	; (8014f88 <LoRaMacConfirmQueueInit+0x58>)
 8014f3c:	687a      	ldr	r2, [r7, #4]
 8014f3e:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8014f40:	4b11      	ldr	r3, [pc, #68]	; (8014f88 <LoRaMacConfirmQueueInit+0x58>)
 8014f42:	4a12      	ldr	r2, [pc, #72]	; (8014f8c <LoRaMacConfirmQueueInit+0x5c>)
 8014f44:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8014f46:	4b10      	ldr	r3, [pc, #64]	; (8014f88 <LoRaMacConfirmQueueInit+0x58>)
 8014f48:	691b      	ldr	r3, [r3, #16]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014f4e:	4b0e      	ldr	r3, [pc, #56]	; (8014f88 <LoRaMacConfirmQueueInit+0x58>)
 8014f50:	691b      	ldr	r3, [r3, #16]
 8014f52:	001a      	movs	r2, r3
 8014f54:	4b0c      	ldr	r3, [pc, #48]	; (8014f88 <LoRaMacConfirmQueueInit+0x58>)
 8014f56:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8014f58:	4b0b      	ldr	r3, [pc, #44]	; (8014f88 <LoRaMacConfirmQueueInit+0x58>)
 8014f5a:	691b      	ldr	r3, [r3, #16]
 8014f5c:	001a      	movs	r2, r3
 8014f5e:	4b0a      	ldr	r3, [pc, #40]	; (8014f88 <LoRaMacConfirmQueueInit+0x58>)
 8014f60:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8014f62:	4b09      	ldr	r3, [pc, #36]	; (8014f88 <LoRaMacConfirmQueueInit+0x58>)
 8014f64:	691b      	ldr	r3, [r3, #16]
 8014f66:	2214      	movs	r2, #20
 8014f68:	21ff      	movs	r1, #255	; 0xff
 8014f6a:	0018      	movs	r0, r3
 8014f6c:	f004 fa00 	bl	8019370 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014f70:	4b05      	ldr	r3, [pc, #20]	; (8014f88 <LoRaMacConfirmQueueInit+0x58>)
 8014f72:	691b      	ldr	r3, [r3, #16]
 8014f74:	2201      	movs	r2, #1
 8014f76:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8014f78:	4b03      	ldr	r3, [pc, #12]	; (8014f88 <LoRaMacConfirmQueueInit+0x58>)
 8014f7a:	683a      	ldr	r2, [r7, #0]
 8014f7c:	60da      	str	r2, [r3, #12]
}
 8014f7e:	46c0      	nop			; (mov r8, r8)
 8014f80:	46bd      	mov	sp, r7
 8014f82:	b002      	add	sp, #8
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	46c0      	nop			; (mov r8, r8)
 8014f88:	20000c94 	.word	0x20000c94
 8014f8c:	20000c7c 	.word	0x20000c7c

08014f90 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d007      	beq.n	8014fae <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 8014f9e:	6879      	ldr	r1, [r7, #4]
 8014fa0:	4b05      	ldr	r3, [pc, #20]	; (8014fb8 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 8014fa2:	2216      	movs	r2, #22
 8014fa4:	0018      	movs	r0, r3
 8014fa6:	f004 f9a5 	bl	80192f4 <memcpy1>
        return true;
 8014faa:	2301      	movs	r3, #1
 8014fac:	e000      	b.n	8014fb0 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 8014fae:	2300      	movs	r3, #0
    }
}
 8014fb0:	0018      	movs	r0, r3
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	b002      	add	sp, #8
 8014fb6:	bd80      	pop	{r7, pc}
 8014fb8:	20000c7c 	.word	0x20000c7c

08014fbc <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b082      	sub	sp, #8
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	2216      	movs	r2, #22
 8014fc8:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8014fca:	4b02      	ldr	r3, [pc, #8]	; (8014fd4 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8014fcc:	0018      	movs	r0, r3
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	b002      	add	sp, #8
 8014fd2:	bd80      	pop	{r7, pc}
 8014fd4:	20000c7c 	.word	0x20000c7c

08014fd8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8014fe0:	4b17      	ldr	r3, [pc, #92]	; (8015040 <LoRaMacConfirmQueueAdd+0x68>)
 8014fe2:	691b      	ldr	r3, [r3, #16]
 8014fe4:	7d1b      	ldrb	r3, [r3, #20]
 8014fe6:	0018      	movs	r0, r3
 8014fe8:	f7ff ff53 	bl	8014e92 <IsListFull>
 8014fec:	1e03      	subs	r3, r0, #0
 8014fee:	d001      	beq.n	8014ff4 <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	e021      	b.n	8015038 <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014ff4:	4b12      	ldr	r3, [pc, #72]	; (8015040 <LoRaMacConfirmQueueAdd+0x68>)
 8014ff6:	689b      	ldr	r3, [r3, #8]
 8014ff8:	687a      	ldr	r2, [r7, #4]
 8014ffa:	7812      	ldrb	r2, [r2, #0]
 8014ffc:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014ffe:	4b10      	ldr	r3, [pc, #64]	; (8015040 <LoRaMacConfirmQueueAdd+0x68>)
 8015000:	689b      	ldr	r3, [r3, #8]
 8015002:	687a      	ldr	r2, [r7, #4]
 8015004:	7852      	ldrb	r2, [r2, #1]
 8015006:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015008:	4b0d      	ldr	r3, [pc, #52]	; (8015040 <LoRaMacConfirmQueueAdd+0x68>)
 801500a:	689b      	ldr	r3, [r3, #8]
 801500c:	687a      	ldr	r2, [r7, #4]
 801500e:	78d2      	ldrb	r2, [r2, #3]
 8015010:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015012:	4b0b      	ldr	r3, [pc, #44]	; (8015040 <LoRaMacConfirmQueueAdd+0x68>)
 8015014:	689b      	ldr	r3, [r3, #8]
 8015016:	2200      	movs	r2, #0
 8015018:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 801501a:	4b09      	ldr	r3, [pc, #36]	; (8015040 <LoRaMacConfirmQueueAdd+0x68>)
 801501c:	691b      	ldr	r3, [r3, #16]
 801501e:	7d1a      	ldrb	r2, [r3, #20]
 8015020:	3201      	adds	r2, #1
 8015022:	b2d2      	uxtb	r2, r2
 8015024:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015026:	4b06      	ldr	r3, [pc, #24]	; (8015040 <LoRaMacConfirmQueueAdd+0x68>)
 8015028:	689b      	ldr	r3, [r3, #8]
 801502a:	0018      	movs	r0, r3
 801502c:	f7ff ff08 	bl	8014e40 <IncreaseBufferPointer>
 8015030:	0002      	movs	r2, r0
 8015032:	4b03      	ldr	r3, [pc, #12]	; (8015040 <LoRaMacConfirmQueueAdd+0x68>)
 8015034:	609a      	str	r2, [r3, #8]

    return true;
 8015036:	2301      	movs	r3, #1
}
 8015038:	0018      	movs	r0, r3
 801503a:	46bd      	mov	sp, r7
 801503c:	b002      	add	sp, #8
 801503e:	bd80      	pop	{r7, pc}
 8015040:	20000c94 	.word	0x20000c94

08015044 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015044:	b580      	push	{r7, lr}
 8015046:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015048:	4b0d      	ldr	r3, [pc, #52]	; (8015080 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801504a:	691b      	ldr	r3, [r3, #16]
 801504c:	7d1b      	ldrb	r3, [r3, #20]
 801504e:	0018      	movs	r0, r3
 8015050:	f7ff ff0e 	bl	8014e70 <IsListEmpty>
 8015054:	1e03      	subs	r3, r0, #0
 8015056:	d001      	beq.n	801505c <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 8015058:	2300      	movs	r3, #0
 801505a:	e00e      	b.n	801507a <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 801505c:	4b08      	ldr	r3, [pc, #32]	; (8015080 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801505e:	691b      	ldr	r3, [r3, #16]
 8015060:	7d1a      	ldrb	r2, [r3, #20]
 8015062:	3a01      	subs	r2, #1
 8015064:	b2d2      	uxtb	r2, r2
 8015066:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015068:	4b05      	ldr	r3, [pc, #20]	; (8015080 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801506a:	685b      	ldr	r3, [r3, #4]
 801506c:	0018      	movs	r0, r3
 801506e:	f7ff fee7 	bl	8014e40 <IncreaseBufferPointer>
 8015072:	0002      	movs	r2, r0
 8015074:	4b02      	ldr	r3, [pc, #8]	; (8015080 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015076:	605a      	str	r2, [r3, #4]

    return true;
 8015078:	2301      	movs	r3, #1
}
 801507a:	0018      	movs	r0, r3
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	20000c94 	.word	0x20000c94

08015084 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b084      	sub	sp, #16
 8015088:	af00      	add	r7, sp, #0
 801508a:	0002      	movs	r2, r0
 801508c:	1dfb      	adds	r3, r7, #7
 801508e:	701a      	strb	r2, [r3, #0]
 8015090:	1dbb      	adds	r3, r7, #6
 8015092:	1c0a      	adds	r2, r1, #0
 8015094:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8015096:	2300      	movs	r3, #0
 8015098:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 801509a:	4b13      	ldr	r3, [pc, #76]	; (80150e8 <LoRaMacConfirmQueueSetStatus+0x64>)
 801509c:	691b      	ldr	r3, [r3, #16]
 801509e:	7d1b      	ldrb	r3, [r3, #20]
 80150a0:	0018      	movs	r0, r3
 80150a2:	f7ff fee5 	bl	8014e70 <IsListEmpty>
 80150a6:	0003      	movs	r3, r0
 80150a8:	001a      	movs	r2, r3
 80150aa:	2301      	movs	r3, #1
 80150ac:	4053      	eors	r3, r2
 80150ae:	b2db      	uxtb	r3, r3
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d014      	beq.n	80150de <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80150b4:	4b0c      	ldr	r3, [pc, #48]	; (80150e8 <LoRaMacConfirmQueueSetStatus+0x64>)
 80150b6:	6859      	ldr	r1, [r3, #4]
 80150b8:	4b0b      	ldr	r3, [pc, #44]	; (80150e8 <LoRaMacConfirmQueueSetStatus+0x64>)
 80150ba:	689a      	ldr	r2, [r3, #8]
 80150bc:	1dbb      	adds	r3, r7, #6
 80150be:	781b      	ldrb	r3, [r3, #0]
 80150c0:	0018      	movs	r0, r3
 80150c2:	f7ff fef7 	bl	8014eb4 <GetElement>
 80150c6:	0003      	movs	r3, r0
 80150c8:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d006      	beq.n	80150de <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	1dfa      	adds	r2, r7, #7
 80150d4:	7812      	ldrb	r2, [r2, #0]
 80150d6:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2201      	movs	r2, #1
 80150dc:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80150de:	46c0      	nop			; (mov r8, r8)
 80150e0:	46bd      	mov	sp, r7
 80150e2:	b004      	add	sp, #16
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	46c0      	nop			; (mov r8, r8)
 80150e8:	20000c94 	.word	0x20000c94

080150ec <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b084      	sub	sp, #16
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	0002      	movs	r2, r0
 80150f4:	1dfb      	adds	r3, r7, #7
 80150f6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80150f8:	2300      	movs	r3, #0
 80150fa:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 80150fc:	4b11      	ldr	r3, [pc, #68]	; (8015144 <LoRaMacConfirmQueueGetStatus+0x58>)
 80150fe:	691b      	ldr	r3, [r3, #16]
 8015100:	7d1b      	ldrb	r3, [r3, #20]
 8015102:	0018      	movs	r0, r3
 8015104:	f7ff feb4 	bl	8014e70 <IsListEmpty>
 8015108:	0003      	movs	r3, r0
 801510a:	001a      	movs	r2, r3
 801510c:	2301      	movs	r3, #1
 801510e:	4053      	eors	r3, r2
 8015110:	b2db      	uxtb	r3, r3
 8015112:	2b00      	cmp	r3, #0
 8015114:	d010      	beq.n	8015138 <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015116:	4b0b      	ldr	r3, [pc, #44]	; (8015144 <LoRaMacConfirmQueueGetStatus+0x58>)
 8015118:	6859      	ldr	r1, [r3, #4]
 801511a:	4b0a      	ldr	r3, [pc, #40]	; (8015144 <LoRaMacConfirmQueueGetStatus+0x58>)
 801511c:	689a      	ldr	r2, [r3, #8]
 801511e:	1dfb      	adds	r3, r7, #7
 8015120:	781b      	ldrb	r3, [r3, #0]
 8015122:	0018      	movs	r0, r3
 8015124:	f7ff fec6 	bl	8014eb4 <GetElement>
 8015128:	0003      	movs	r3, r0
 801512a:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d002      	beq.n	8015138 <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	785b      	ldrb	r3, [r3, #1]
 8015136:	e000      	b.n	801513a <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015138:	2301      	movs	r3, #1
}
 801513a:	0018      	movs	r0, r3
 801513c:	46bd      	mov	sp, r7
 801513e:	b004      	add	sp, #16
 8015140:	bd80      	pop	{r7, pc}
 8015142:	46c0      	nop			; (mov r8, r8)
 8015144:	20000c94 	.word	0x20000c94

08015148 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	0002      	movs	r2, r0
 8015150:	1dfb      	adds	r3, r7, #7
 8015152:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015154:	4b18      	ldr	r3, [pc, #96]	; (80151b8 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015156:	685b      	ldr	r3, [r3, #4]
 8015158:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 801515a:	4b17      	ldr	r3, [pc, #92]	; (80151b8 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 801515c:	691b      	ldr	r3, [r3, #16]
 801515e:	1dfa      	adds	r2, r7, #7
 8015160:	7812      	ldrb	r2, [r2, #0]
 8015162:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015164:	4b14      	ldr	r3, [pc, #80]	; (80151b8 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015166:	691b      	ldr	r3, [r3, #16]
 8015168:	7d1b      	ldrb	r3, [r3, #20]
 801516a:	0018      	movs	r0, r3
 801516c:	f7ff fe80 	bl	8014e70 <IsListEmpty>
 8015170:	0003      	movs	r3, r0
 8015172:	001a      	movs	r2, r3
 8015174:	2301      	movs	r3, #1
 8015176:	4053      	eors	r3, r2
 8015178:	b2db      	uxtb	r3, r3
 801517a:	2b00      	cmp	r3, #0
 801517c:	d018      	beq.n	80151b0 <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	1dfa      	adds	r2, r7, #7
 8015182:	7812      	ldrb	r2, [r2, #0]
 8015184:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	78db      	ldrb	r3, [r3, #3]
 801518a:	2201      	movs	r2, #1
 801518c:	4053      	eors	r3, r2
 801518e:	b2db      	uxtb	r3, r3
 8015190:	2b00      	cmp	r3, #0
 8015192:	d002      	beq.n	801519a <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	2201      	movs	r2, #1
 8015198:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	0018      	movs	r0, r3
 801519e:	f7ff fe4f 	bl	8014e40 <IncreaseBufferPointer>
 80151a2:	0003      	movs	r3, r0
 80151a4:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80151a6:	4b04      	ldr	r3, [pc, #16]	; (80151b8 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80151a8:	689b      	ldr	r3, [r3, #8]
 80151aa:	68fa      	ldr	r2, [r7, #12]
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d1e6      	bne.n	801517e <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 80151b0:	46c0      	nop			; (mov r8, r8)
 80151b2:	46bd      	mov	sp, r7
 80151b4:	b004      	add	sp, #16
 80151b6:	bd80      	pop	{r7, pc}
 80151b8:	20000c94 	.word	0x20000c94

080151bc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	0002      	movs	r2, r0
 80151c4:	1dfb      	adds	r3, r7, #7
 80151c6:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80151c8:	4b08      	ldr	r3, [pc, #32]	; (80151ec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80151ca:	6859      	ldr	r1, [r3, #4]
 80151cc:	4b07      	ldr	r3, [pc, #28]	; (80151ec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80151ce:	689a      	ldr	r2, [r3, #8]
 80151d0:	1dfb      	adds	r3, r7, #7
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	0018      	movs	r0, r3
 80151d6:	f7ff fe6d 	bl	8014eb4 <GetElement>
 80151da:	1e03      	subs	r3, r0, #0
 80151dc:	d001      	beq.n	80151e2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 80151de:	2301      	movs	r3, #1
 80151e0:	e000      	b.n	80151e4 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 80151e2:	2300      	movs	r3, #0
}
 80151e4:	0018      	movs	r0, r3
 80151e6:	46bd      	mov	sp, r7
 80151e8:	b002      	add	sp, #8
 80151ea:	bd80      	pop	{r7, pc}
 80151ec:	20000c94 	.word	0x20000c94

080151f0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b084      	sub	sp, #16
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80151f8:	4b2d      	ldr	r3, [pc, #180]	; (80152b0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80151fa:	691a      	ldr	r2, [r3, #16]
 80151fc:	230e      	movs	r3, #14
 80151fe:	18fb      	adds	r3, r7, r3
 8015200:	7d12      	ldrb	r2, [r2, #20]
 8015202:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 8015204:	230d      	movs	r3, #13
 8015206:	18fb      	adds	r3, r7, r3
 8015208:	2200      	movs	r2, #0
 801520a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 801520c:	230f      	movs	r3, #15
 801520e:	18fb      	adds	r3, r7, r3
 8015210:	2200      	movs	r2, #0
 8015212:	701a      	strb	r2, [r3, #0]
 8015214:	e03f      	b.n	8015296 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015216:	4b26      	ldr	r3, [pc, #152]	; (80152b0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015218:	685b      	ldr	r3, [r3, #4]
 801521a:	781a      	ldrb	r2, [r3, #0]
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015220:	4b23      	ldr	r3, [pc, #140]	; (80152b0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015222:	685b      	ldr	r3, [r3, #4]
 8015224:	785a      	ldrb	r2, [r3, #1]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801522a:	4b21      	ldr	r3, [pc, #132]	; (80152b0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801522c:	685a      	ldr	r2, [r3, #4]
 801522e:	210d      	movs	r1, #13
 8015230:	187b      	adds	r3, r7, r1
 8015232:	7892      	ldrb	r2, [r2, #2]
 8015234:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 8015236:	187b      	adds	r3, r7, r1
 8015238:	781b      	ldrb	r3, [r3, #0]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d006      	beq.n	801524c <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 801523e:	4b1c      	ldr	r3, [pc, #112]	; (80152b0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	689b      	ldr	r3, [r3, #8]
 8015244:	687a      	ldr	r2, [r7, #4]
 8015246:	0010      	movs	r0, r2
 8015248:	4798      	blx	r3
 801524a:	e00f      	b.n	801526c <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801524c:	4b18      	ldr	r3, [pc, #96]	; (80152b0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	781a      	ldrb	r2, [r3, #0]
 8015252:	2108      	movs	r1, #8
 8015254:	187b      	adds	r3, r7, r1
 8015256:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015258:	4b15      	ldr	r3, [pc, #84]	; (80152b0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801525a:	685b      	ldr	r3, [r3, #4]
 801525c:	785a      	ldrb	r2, [r3, #1]
 801525e:	187b      	adds	r3, r7, r1
 8015260:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015262:	4b13      	ldr	r3, [pc, #76]	; (80152b0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	78da      	ldrb	r2, [r3, #3]
 8015268:	187b      	adds	r3, r7, r1
 801526a:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801526c:	f7ff feea 	bl	8015044 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015270:	230d      	movs	r3, #13
 8015272:	18fb      	adds	r3, r7, r3
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	2201      	movs	r2, #1
 8015278:	4053      	eors	r3, r2
 801527a:	b2db      	uxtb	r3, r3
 801527c:	2b00      	cmp	r3, #0
 801527e:	d004      	beq.n	801528a <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015280:	2308      	movs	r3, #8
 8015282:	18fb      	adds	r3, r7, r3
 8015284:	0018      	movs	r0, r3
 8015286:	f7ff fea7 	bl	8014fd8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801528a:	210f      	movs	r1, #15
 801528c:	187b      	adds	r3, r7, r1
 801528e:	781a      	ldrb	r2, [r3, #0]
 8015290:	187b      	adds	r3, r7, r1
 8015292:	3201      	adds	r2, #1
 8015294:	701a      	strb	r2, [r3, #0]
 8015296:	230f      	movs	r3, #15
 8015298:	18fa      	adds	r2, r7, r3
 801529a:	230e      	movs	r3, #14
 801529c:	18fb      	adds	r3, r7, r3
 801529e:	7812      	ldrb	r2, [r2, #0]
 80152a0:	781b      	ldrb	r3, [r3, #0]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d3b7      	bcc.n	8015216 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 80152a6:	46c0      	nop			; (mov r8, r8)
 80152a8:	46c0      	nop			; (mov r8, r8)
 80152aa:	46bd      	mov	sp, r7
 80152ac:	b004      	add	sp, #16
 80152ae:	bd80      	pop	{r7, pc}
 80152b0:	20000c94 	.word	0x20000c94

080152b4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80152b8:	4b02      	ldr	r3, [pc, #8]	; (80152c4 <LoRaMacConfirmQueueGetCnt+0x10>)
 80152ba:	691b      	ldr	r3, [r3, #16]
 80152bc:	7d1b      	ldrb	r3, [r3, #20]
}
 80152be:	0018      	movs	r0, r3
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}
 80152c4:	20000c94 	.word	0x20000c94

080152c8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80152cc:	4b06      	ldr	r3, [pc, #24]	; (80152e8 <LoRaMacConfirmQueueIsFull+0x20>)
 80152ce:	691b      	ldr	r3, [r3, #16]
 80152d0:	7d1b      	ldrb	r3, [r3, #20]
 80152d2:	0018      	movs	r0, r3
 80152d4:	f7ff fddd 	bl	8014e92 <IsListFull>
 80152d8:	1e03      	subs	r3, r0, #0
 80152da:	d001      	beq.n	80152e0 <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 80152dc:	2301      	movs	r3, #1
 80152de:	e000      	b.n	80152e2 <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 80152e0:	2300      	movs	r3, #0
    }
}
 80152e2:	0018      	movs	r0, r3
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd80      	pop	{r7, pc}
 80152e8:	20000c94 	.word	0x20000c94

080152ec <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80152ec:	b590      	push	{r4, r7, lr}
 80152ee:	b08f      	sub	sp, #60	; 0x3c
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	60f8      	str	r0, [r7, #12]
 80152f4:	0008      	movs	r0, r1
 80152f6:	0011      	movs	r1, r2
 80152f8:	607b      	str	r3, [r7, #4]
 80152fa:	230a      	movs	r3, #10
 80152fc:	18fb      	adds	r3, r7, r3
 80152fe:	1c02      	adds	r2, r0, #0
 8015300:	801a      	strh	r2, [r3, #0]
 8015302:	2309      	movs	r3, #9
 8015304:	18fb      	adds	r3, r7, r3
 8015306:	1c0a      	adds	r2, r1, #0
 8015308:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d101      	bne.n	8015314 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015310:	230a      	movs	r3, #10
 8015312:	e0ae      	b.n	8015472 <PayloadEncrypt+0x186>
    }

    uint8_t bufferIndex = 0;
 8015314:	2337      	movs	r3, #55	; 0x37
 8015316:	18fb      	adds	r3, r7, r3
 8015318:	2200      	movs	r2, #0
 801531a:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 801531c:	2334      	movs	r3, #52	; 0x34
 801531e:	18fb      	adds	r3, r7, r3
 8015320:	2201      	movs	r2, #1
 8015322:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8015324:	2320      	movs	r3, #32
 8015326:	18fb      	adds	r3, r7, r3
 8015328:	2200      	movs	r2, #0
 801532a:	601a      	str	r2, [r3, #0]
 801532c:	3304      	adds	r3, #4
 801532e:	220c      	movs	r2, #12
 8015330:	2100      	movs	r1, #0
 8015332:	0018      	movs	r0, r3
 8015334:	f008 fd35 	bl	801dda2 <memset>
    uint8_t aBlock[16] = { 0 };
 8015338:	2410      	movs	r4, #16
 801533a:	193b      	adds	r3, r7, r4
 801533c:	2200      	movs	r2, #0
 801533e:	601a      	str	r2, [r3, #0]
 8015340:	3304      	adds	r3, #4
 8015342:	220c      	movs	r2, #12
 8015344:	2100      	movs	r1, #0
 8015346:	0018      	movs	r0, r3
 8015348:	f008 fd2b 	bl	801dda2 <memset>

    aBlock[0] = 0x01;
 801534c:	0021      	movs	r1, r4
 801534e:	187b      	adds	r3, r7, r1
 8015350:	2201      	movs	r2, #1
 8015352:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8015354:	187a      	adds	r2, r7, r1
 8015356:	2340      	movs	r3, #64	; 0x40
 8015358:	2008      	movs	r0, #8
 801535a:	4684      	mov	ip, r0
 801535c:	44bc      	add	ip, r7
 801535e:	4463      	add	r3, ip
 8015360:	781b      	ldrb	r3, [r3, #0]
 8015362:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	b2da      	uxtb	r2, r3
 8015368:	187b      	adds	r3, r7, r1
 801536a:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	0a1b      	lsrs	r3, r3, #8
 8015370:	b2da      	uxtb	r2, r3
 8015372:	187b      	adds	r3, r7, r1
 8015374:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	0c1b      	lsrs	r3, r3, #16
 801537a:	b2da      	uxtb	r2, r3
 801537c:	187b      	adds	r3, r7, r1
 801537e:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	0e1b      	lsrs	r3, r3, #24
 8015384:	b2da      	uxtb	r2, r3
 8015386:	187b      	adds	r3, r7, r1
 8015388:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 801538a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801538c:	b2da      	uxtb	r2, r3
 801538e:	187b      	adds	r3, r7, r1
 8015390:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015394:	0a1b      	lsrs	r3, r3, #8
 8015396:	b2da      	uxtb	r2, r3
 8015398:	187b      	adds	r3, r7, r1
 801539a:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801539e:	0c1b      	lsrs	r3, r3, #16
 80153a0:	b2da      	uxtb	r2, r3
 80153a2:	187b      	adds	r3, r7, r1
 80153a4:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80153a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80153a8:	0e1b      	lsrs	r3, r3, #24
 80153aa:	b2da      	uxtb	r2, r3
 80153ac:	187b      	adds	r3, r7, r1
 80153ae:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 80153b0:	e058      	b.n	8015464 <PayloadEncrypt+0x178>
    {
        aBlock[15] = ctr & 0xFF;
 80153b2:	2134      	movs	r1, #52	; 0x34
 80153b4:	187b      	adds	r3, r7, r1
 80153b6:	881b      	ldrh	r3, [r3, #0]
 80153b8:	b2da      	uxtb	r2, r3
 80153ba:	2010      	movs	r0, #16
 80153bc:	183b      	adds	r3, r7, r0
 80153be:	73da      	strb	r2, [r3, #15]
        ctr++;
 80153c0:	187b      	adds	r3, r7, r1
 80153c2:	881a      	ldrh	r2, [r3, #0]
 80153c4:	187b      	adds	r3, r7, r1
 80153c6:	3201      	adds	r2, #1
 80153c8:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80153ca:	2320      	movs	r3, #32
 80153cc:	18f9      	adds	r1, r7, r3
 80153ce:	2309      	movs	r3, #9
 80153d0:	18fb      	adds	r3, r7, r3
 80153d2:	781a      	ldrb	r2, [r3, #0]
 80153d4:	1838      	adds	r0, r7, r0
 80153d6:	000b      	movs	r3, r1
 80153d8:	2110      	movs	r1, #16
 80153da:	f7f8 fa74 	bl	800d8c6 <SecureElementAesEncrypt>
 80153de:	1e03      	subs	r3, r0, #0
 80153e0:	d001      	beq.n	80153e6 <PayloadEncrypt+0xfa>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80153e2:	230f      	movs	r3, #15
 80153e4:	e045      	b.n	8015472 <PayloadEncrypt+0x186>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80153e6:	2333      	movs	r3, #51	; 0x33
 80153e8:	18fb      	adds	r3, r7, r3
 80153ea:	2200      	movs	r2, #0
 80153ec:	701a      	strb	r2, [r3, #0]
 80153ee:	e01f      	b.n	8015430 <PayloadEncrypt+0x144>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80153f0:	2037      	movs	r0, #55	; 0x37
 80153f2:	183b      	adds	r3, r7, r0
 80153f4:	781a      	ldrb	r2, [r3, #0]
 80153f6:	2433      	movs	r4, #51	; 0x33
 80153f8:	193b      	adds	r3, r7, r4
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	18d3      	adds	r3, r2, r3
 80153fe:	001a      	movs	r2, r3
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	189b      	adds	r3, r3, r2
 8015404:	7819      	ldrb	r1, [r3, #0]
 8015406:	193b      	adds	r3, r7, r4
 8015408:	781b      	ldrb	r3, [r3, #0]
 801540a:	2220      	movs	r2, #32
 801540c:	18ba      	adds	r2, r7, r2
 801540e:	5cd2      	ldrb	r2, [r2, r3]
 8015410:	183b      	adds	r3, r7, r0
 8015412:	7818      	ldrb	r0, [r3, #0]
 8015414:	193b      	adds	r3, r7, r4
 8015416:	781b      	ldrb	r3, [r3, #0]
 8015418:	18c3      	adds	r3, r0, r3
 801541a:	0018      	movs	r0, r3
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	181b      	adds	r3, r3, r0
 8015420:	404a      	eors	r2, r1
 8015422:	b2d2      	uxtb	r2, r2
 8015424:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015426:	193b      	adds	r3, r7, r4
 8015428:	781a      	ldrb	r2, [r3, #0]
 801542a:	193b      	adds	r3, r7, r4
 801542c:	3201      	adds	r2, #1
 801542e:	701a      	strb	r2, [r3, #0]
 8015430:	2333      	movs	r3, #51	; 0x33
 8015432:	18fb      	adds	r3, r7, r3
 8015434:	781a      	ldrb	r2, [r3, #0]
 8015436:	230a      	movs	r3, #10
 8015438:	18fb      	adds	r3, r7, r3
 801543a:	881b      	ldrh	r3, [r3, #0]
 801543c:	b219      	sxth	r1, r3
 801543e:	2910      	cmp	r1, #16
 8015440:	dd00      	ble.n	8015444 <PayloadEncrypt+0x158>
 8015442:	2310      	movs	r3, #16
 8015444:	b21b      	sxth	r3, r3
 8015446:	429a      	cmp	r2, r3
 8015448:	dbd2      	blt.n	80153f0 <PayloadEncrypt+0x104>
        }
        size -= 16;
 801544a:	210a      	movs	r1, #10
 801544c:	187b      	adds	r3, r7, r1
 801544e:	881b      	ldrh	r3, [r3, #0]
 8015450:	3b10      	subs	r3, #16
 8015452:	b29a      	uxth	r2, r3
 8015454:	187b      	adds	r3, r7, r1
 8015456:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8015458:	2237      	movs	r2, #55	; 0x37
 801545a:	18bb      	adds	r3, r7, r2
 801545c:	18ba      	adds	r2, r7, r2
 801545e:	7812      	ldrb	r2, [r2, #0]
 8015460:	3210      	adds	r2, #16
 8015462:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8015464:	230a      	movs	r3, #10
 8015466:	18fb      	adds	r3, r7, r3
 8015468:	2200      	movs	r2, #0
 801546a:	5e9b      	ldrsh	r3, [r3, r2]
 801546c:	2b00      	cmp	r3, #0
 801546e:	dca0      	bgt.n	80153b2 <PayloadEncrypt+0xc6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015470:	2300      	movs	r3, #0
}
 8015472:	0018      	movs	r0, r3
 8015474:	46bd      	mov	sp, r7
 8015476:	b00f      	add	sp, #60	; 0x3c
 8015478:	bd90      	pop	{r4, r7, pc}

0801547a <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801547a:	b5b0      	push	{r4, r5, r7, lr}
 801547c:	b082      	sub	sp, #8
 801547e:	af00      	add	r7, sp, #0
 8015480:	0005      	movs	r5, r0
 8015482:	000c      	movs	r4, r1
 8015484:	0010      	movs	r0, r2
 8015486:	0019      	movs	r1, r3
 8015488:	1dbb      	adds	r3, r7, #6
 801548a:	1c2a      	adds	r2, r5, #0
 801548c:	801a      	strh	r2, [r3, #0]
 801548e:	1d7b      	adds	r3, r7, #5
 8015490:	1c22      	adds	r2, r4, #0
 8015492:	701a      	strb	r2, [r3, #0]
 8015494:	1d3b      	adds	r3, r7, #4
 8015496:	1c02      	adds	r2, r0, #0
 8015498:	701a      	strb	r2, [r3, #0]
 801549a:	1cfb      	adds	r3, r7, #3
 801549c:	1c0a      	adds	r2, r1, #0
 801549e:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 80154a0:	6a3b      	ldr	r3, [r7, #32]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d101      	bne.n	80154aa <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80154a6:	230a      	movs	r3, #10
 80154a8:	e050      	b.n	801554c <PrepareB0+0xd2>
    }

    b0[0] = 0x49;
 80154aa:	6a3b      	ldr	r3, [r7, #32]
 80154ac:	2249      	movs	r2, #73	; 0x49
 80154ae:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80154b0:	6a3b      	ldr	r3, [r7, #32]
 80154b2:	3301      	adds	r3, #1
 80154b4:	2200      	movs	r2, #0
 80154b6:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80154b8:	6a3b      	ldr	r3, [r7, #32]
 80154ba:	3302      	adds	r3, #2
 80154bc:	2200      	movs	r2, #0
 80154be:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80154c0:	6a3b      	ldr	r3, [r7, #32]
 80154c2:	3303      	adds	r3, #3
 80154c4:	2200      	movs	r2, #0
 80154c6:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80154c8:	6a3b      	ldr	r3, [r7, #32]
 80154ca:	3304      	adds	r3, #4
 80154cc:	2200      	movs	r2, #0
 80154ce:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80154d0:	6a3b      	ldr	r3, [r7, #32]
 80154d2:	3305      	adds	r3, #5
 80154d4:	1cfa      	adds	r2, r7, #3
 80154d6:	7812      	ldrb	r2, [r2, #0]
 80154d8:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80154da:	6a3b      	ldr	r3, [r7, #32]
 80154dc:	3306      	adds	r3, #6
 80154de:	69ba      	ldr	r2, [r7, #24]
 80154e0:	b2d2      	uxtb	r2, r2
 80154e2:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80154e4:	69bb      	ldr	r3, [r7, #24]
 80154e6:	0a1a      	lsrs	r2, r3, #8
 80154e8:	6a3b      	ldr	r3, [r7, #32]
 80154ea:	3307      	adds	r3, #7
 80154ec:	b2d2      	uxtb	r2, r2
 80154ee:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80154f0:	69bb      	ldr	r3, [r7, #24]
 80154f2:	0c1a      	lsrs	r2, r3, #16
 80154f4:	6a3b      	ldr	r3, [r7, #32]
 80154f6:	3308      	adds	r3, #8
 80154f8:	b2d2      	uxtb	r2, r2
 80154fa:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80154fc:	69bb      	ldr	r3, [r7, #24]
 80154fe:	0e1a      	lsrs	r2, r3, #24
 8015500:	6a3b      	ldr	r3, [r7, #32]
 8015502:	3309      	adds	r3, #9
 8015504:	b2d2      	uxtb	r2, r2
 8015506:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015508:	6a3b      	ldr	r3, [r7, #32]
 801550a:	330a      	adds	r3, #10
 801550c:	69fa      	ldr	r2, [r7, #28]
 801550e:	b2d2      	uxtb	r2, r2
 8015510:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	0a1a      	lsrs	r2, r3, #8
 8015516:	6a3b      	ldr	r3, [r7, #32]
 8015518:	330b      	adds	r3, #11
 801551a:	b2d2      	uxtb	r2, r2
 801551c:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801551e:	69fb      	ldr	r3, [r7, #28]
 8015520:	0c1a      	lsrs	r2, r3, #16
 8015522:	6a3b      	ldr	r3, [r7, #32]
 8015524:	330c      	adds	r3, #12
 8015526:	b2d2      	uxtb	r2, r2
 8015528:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801552a:	69fb      	ldr	r3, [r7, #28]
 801552c:	0e1a      	lsrs	r2, r3, #24
 801552e:	6a3b      	ldr	r3, [r7, #32]
 8015530:	330d      	adds	r3, #13
 8015532:	b2d2      	uxtb	r2, r2
 8015534:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015536:	6a3b      	ldr	r3, [r7, #32]
 8015538:	330e      	adds	r3, #14
 801553a:	2200      	movs	r2, #0
 801553c:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 801553e:	6a3b      	ldr	r3, [r7, #32]
 8015540:	330f      	adds	r3, #15
 8015542:	1dba      	adds	r2, r7, #6
 8015544:	8812      	ldrh	r2, [r2, #0]
 8015546:	b2d2      	uxtb	r2, r2
 8015548:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801554a:	2300      	movs	r3, #0
}
 801554c:	0018      	movs	r0, r3
 801554e:	46bd      	mov	sp, r7
 8015550:	b002      	add	sp, #8
 8015552:	bdb0      	pop	{r4, r5, r7, pc}

08015554 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015554:	b5b0      	push	{r4, r5, r7, lr}
 8015556:	b08a      	sub	sp, #40	; 0x28
 8015558:	af04      	add	r7, sp, #16
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	000c      	movs	r4, r1
 801555e:	0010      	movs	r0, r2
 8015560:	0019      	movs	r1, r3
 8015562:	1cbb      	adds	r3, r7, #2
 8015564:	1c22      	adds	r2, r4, #0
 8015566:	801a      	strh	r2, [r3, #0]
 8015568:	1c7b      	adds	r3, r7, #1
 801556a:	1c02      	adds	r2, r0, #0
 801556c:	701a      	strb	r2, [r3, #0]
 801556e:	003b      	movs	r3, r7
 8015570:	1c0a      	adds	r2, r1, #0
 8015572:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d002      	beq.n	8015580 <ComputeCmacB0+0x2c>
 801557a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801557c:	2b00      	cmp	r3, #0
 801557e:	d101      	bne.n	8015584 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015580:	230a      	movs	r3, #10
 8015582:	e02a      	b.n	80155da <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015584:	1cbb      	adds	r3, r7, #2
 8015586:	881a      	ldrh	r2, [r3, #0]
 8015588:	2380      	movs	r3, #128	; 0x80
 801558a:	005b      	lsls	r3, r3, #1
 801558c:	429a      	cmp	r2, r3
 801558e:	d901      	bls.n	8015594 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015590:	230e      	movs	r3, #14
 8015592:	e022      	b.n	80155da <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015594:	2328      	movs	r3, #40	; 0x28
 8015596:	18fb      	adds	r3, r7, r3
 8015598:	781c      	ldrb	r4, [r3, #0]
 801559a:	003b      	movs	r3, r7
 801559c:	781a      	ldrb	r2, [r3, #0]
 801559e:	1c7b      	adds	r3, r7, #1
 80155a0:	7819      	ldrb	r1, [r3, #0]
 80155a2:	1cbb      	adds	r3, r7, #2
 80155a4:	8818      	ldrh	r0, [r3, #0]
 80155a6:	2508      	movs	r5, #8
 80155a8:	197b      	adds	r3, r7, r5
 80155aa:	9302      	str	r3, [sp, #8]
 80155ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ae:	9301      	str	r3, [sp, #4]
 80155b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b2:	9300      	str	r3, [sp, #0]
 80155b4:	0023      	movs	r3, r4
 80155b6:	f7ff ff60 	bl	801547a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80155ba:	1c7b      	adds	r3, r7, #1
 80155bc:	781c      	ldrb	r4, [r3, #0]
 80155be:	1cbb      	adds	r3, r7, #2
 80155c0:	881a      	ldrh	r2, [r3, #0]
 80155c2:	6879      	ldr	r1, [r7, #4]
 80155c4:	1978      	adds	r0, r7, r5
 80155c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155c8:	9300      	str	r3, [sp, #0]
 80155ca:	0023      	movs	r3, r4
 80155cc:	f7f8 f918 	bl	800d800 <SecureElementComputeAesCmac>
 80155d0:	1e03      	subs	r3, r0, #0
 80155d2:	d001      	beq.n	80155d8 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80155d4:	230f      	movs	r3, #15
 80155d6:	e000      	b.n	80155da <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80155d8:	2300      	movs	r3, #0
}
 80155da:	0018      	movs	r0, r3
 80155dc:	46bd      	mov	sp, r7
 80155de:	b006      	add	sp, #24
 80155e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080155e4 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80155e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155e6:	b0cd      	sub	sp, #308	; 0x134
 80155e8:	af04      	add	r7, sp, #16
 80155ea:	6078      	str	r0, [r7, #4]
 80155ec:	000c      	movs	r4, r1
 80155ee:	0010      	movs	r0, r2
 80155f0:	0019      	movs	r1, r3
 80155f2:	4b52      	ldr	r3, [pc, #328]	; (801573c <VerifyCmacB0+0x158>)
 80155f4:	2290      	movs	r2, #144	; 0x90
 80155f6:	0052      	lsls	r2, r2, #1
 80155f8:	4694      	mov	ip, r2
 80155fa:	44bc      	add	ip, r7
 80155fc:	4463      	add	r3, ip
 80155fe:	1c22      	adds	r2, r4, #0
 8015600:	801a      	strh	r2, [r3, #0]
 8015602:	4b4f      	ldr	r3, [pc, #316]	; (8015740 <VerifyCmacB0+0x15c>)
 8015604:	2290      	movs	r2, #144	; 0x90
 8015606:	0052      	lsls	r2, r2, #1
 8015608:	4694      	mov	ip, r2
 801560a:	44bc      	add	ip, r7
 801560c:	4463      	add	r3, ip
 801560e:	1c02      	adds	r2, r0, #0
 8015610:	701a      	strb	r2, [r3, #0]
 8015612:	4b4c      	ldr	r3, [pc, #304]	; (8015744 <VerifyCmacB0+0x160>)
 8015614:	2290      	movs	r2, #144	; 0x90
 8015616:	0052      	lsls	r2, r2, #1
 8015618:	4694      	mov	ip, r2
 801561a:	44bc      	add	ip, r7
 801561c:	4463      	add	r3, ip
 801561e:	1c0a      	adds	r2, r1, #0
 8015620:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d101      	bne.n	801562c <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015628:	230a      	movs	r3, #10
 801562a:	e083      	b.n	8015734 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801562c:	4b43      	ldr	r3, [pc, #268]	; (801573c <VerifyCmacB0+0x158>)
 801562e:	2290      	movs	r2, #144	; 0x90
 8015630:	0052      	lsls	r2, r2, #1
 8015632:	4694      	mov	ip, r2
 8015634:	44bc      	add	ip, r7
 8015636:	4463      	add	r3, ip
 8015638:	881a      	ldrh	r2, [r3, #0]
 801563a:	2380      	movs	r3, #128	; 0x80
 801563c:	005b      	lsls	r3, r3, #1
 801563e:	429a      	cmp	r2, r3
 8015640:	d901      	bls.n	8015646 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015642:	230e      	movs	r3, #14
 8015644:	e076      	b.n	8015734 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8015646:	2388      	movs	r3, #136	; 0x88
 8015648:	005a      	lsls	r2, r3, #1
 801564a:	250c      	movs	r5, #12
 801564c:	197b      	adds	r3, r7, r5
 801564e:	2100      	movs	r1, #0
 8015650:	0018      	movs	r0, r3
 8015652:	f003 fe8d 	bl	8019370 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015656:	2398      	movs	r3, #152	; 0x98
 8015658:	005b      	lsls	r3, r3, #1
 801565a:	2208      	movs	r2, #8
 801565c:	4694      	mov	ip, r2
 801565e:	44bc      	add	ip, r7
 8015660:	4463      	add	r3, ip
 8015662:	781c      	ldrb	r4, [r3, #0]
 8015664:	4b37      	ldr	r3, [pc, #220]	; (8015744 <VerifyCmacB0+0x160>)
 8015666:	2290      	movs	r2, #144	; 0x90
 8015668:	0052      	lsls	r2, r2, #1
 801566a:	4694      	mov	ip, r2
 801566c:	44bc      	add	ip, r7
 801566e:	4463      	add	r3, ip
 8015670:	781a      	ldrb	r2, [r3, #0]
 8015672:	4b33      	ldr	r3, [pc, #204]	; (8015740 <VerifyCmacB0+0x15c>)
 8015674:	2190      	movs	r1, #144	; 0x90
 8015676:	0049      	lsls	r1, r1, #1
 8015678:	468c      	mov	ip, r1
 801567a:	44bc      	add	ip, r7
 801567c:	4463      	add	r3, ip
 801567e:	7819      	ldrb	r1, [r3, #0]
 8015680:	4b2e      	ldr	r3, [pc, #184]	; (801573c <VerifyCmacB0+0x158>)
 8015682:	2090      	movs	r0, #144	; 0x90
 8015684:	0040      	lsls	r0, r0, #1
 8015686:	4684      	mov	ip, r0
 8015688:	44bc      	add	ip, r7
 801568a:	4463      	add	r3, ip
 801568c:	8818      	ldrh	r0, [r3, #0]
 801568e:	197b      	adds	r3, r7, r5
 8015690:	9302      	str	r3, [sp, #8]
 8015692:	239c      	movs	r3, #156	; 0x9c
 8015694:	005b      	lsls	r3, r3, #1
 8015696:	2608      	movs	r6, #8
 8015698:	46b4      	mov	ip, r6
 801569a:	44bc      	add	ip, r7
 801569c:	4463      	add	r3, ip
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	9301      	str	r3, [sp, #4]
 80156a2:	239a      	movs	r3, #154	; 0x9a
 80156a4:	005b      	lsls	r3, r3, #1
 80156a6:	2608      	movs	r6, #8
 80156a8:	46b4      	mov	ip, r6
 80156aa:	44bc      	add	ip, r7
 80156ac:	4463      	add	r3, ip
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	9300      	str	r3, [sp, #0]
 80156b2:	0023      	movs	r3, r4
 80156b4:	f7ff fee1 	bl	801547a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80156b8:	197b      	adds	r3, r7, r5
 80156ba:	3310      	adds	r3, #16
 80156bc:	4a1f      	ldr	r2, [pc, #124]	; (801573c <VerifyCmacB0+0x158>)
 80156be:	2190      	movs	r1, #144	; 0x90
 80156c0:	0049      	lsls	r1, r1, #1
 80156c2:	468c      	mov	ip, r1
 80156c4:	44bc      	add	ip, r7
 80156c6:	4462      	add	r2, ip
 80156c8:	8812      	ldrh	r2, [r2, #0]
 80156ca:	6879      	ldr	r1, [r7, #4]
 80156cc:	0018      	movs	r0, r3
 80156ce:	f003 fe11 	bl	80192f4 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80156d2:	2620      	movs	r6, #32
 80156d4:	36ff      	adds	r6, #255	; 0xff
 80156d6:	19bb      	adds	r3, r7, r6
 80156d8:	2206      	movs	r2, #6
 80156da:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80156dc:	4b17      	ldr	r3, [pc, #92]	; (801573c <VerifyCmacB0+0x158>)
 80156de:	2290      	movs	r2, #144	; 0x90
 80156e0:	0052      	lsls	r2, r2, #1
 80156e2:	4694      	mov	ip, r2
 80156e4:	44bc      	add	ip, r7
 80156e6:	4463      	add	r3, ip
 80156e8:	881b      	ldrh	r3, [r3, #0]
 80156ea:	3310      	adds	r3, #16
 80156ec:	b299      	uxth	r1, r3
 80156ee:	19bc      	adds	r4, r7, r6
 80156f0:	4b13      	ldr	r3, [pc, #76]	; (8015740 <VerifyCmacB0+0x15c>)
 80156f2:	2290      	movs	r2, #144	; 0x90
 80156f4:	0052      	lsls	r2, r2, #1
 80156f6:	4694      	mov	ip, r2
 80156f8:	44bc      	add	ip, r7
 80156fa:	4463      	add	r3, ip
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	229e      	movs	r2, #158	; 0x9e
 8015700:	0052      	lsls	r2, r2, #1
 8015702:	2008      	movs	r0, #8
 8015704:	4684      	mov	ip, r0
 8015706:	44bc      	add	ip, r7
 8015708:	4462      	add	r2, ip
 801570a:	6812      	ldr	r2, [r2, #0]
 801570c:	1978      	adds	r0, r7, r5
 801570e:	f7f8 f898 	bl	800d842 <SecureElementVerifyAesCmac>
 8015712:	0003      	movs	r3, r0
 8015714:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015716:	19bb      	adds	r3, r7, r6
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d101      	bne.n	8015722 <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801571e:	2300      	movs	r3, #0
 8015720:	e008      	b.n	8015734 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015722:	2320      	movs	r3, #32
 8015724:	33ff      	adds	r3, #255	; 0xff
 8015726:	18fb      	adds	r3, r7, r3
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	2b01      	cmp	r3, #1
 801572c:	d101      	bne.n	8015732 <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801572e:	2301      	movs	r3, #1
 8015730:	e000      	b.n	8015734 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015732:	230f      	movs	r3, #15
}
 8015734:	0018      	movs	r0, r3
 8015736:	46bd      	mov	sp, r7
 8015738:	b049      	add	sp, #292	; 0x124
 801573a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801573c:	fffffee2 	.word	0xfffffee2
 8015740:	fffffee1 	.word	0xfffffee1
 8015744:	fffffee0 	.word	0xfffffee0

08015748 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b084      	sub	sp, #16
 801574c:	af00      	add	r7, sp, #0
 801574e:	0002      	movs	r2, r0
 8015750:	6039      	str	r1, [r7, #0]
 8015752:	1dfb      	adds	r3, r7, #7
 8015754:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015756:	230f      	movs	r3, #15
 8015758:	18fb      	adds	r3, r7, r3
 801575a:	2200      	movs	r2, #0
 801575c:	701a      	strb	r2, [r3, #0]
 801575e:	e018      	b.n	8015792 <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015760:	210f      	movs	r1, #15
 8015762:	187b      	adds	r3, r7, r1
 8015764:	781a      	ldrb	r2, [r3, #0]
 8015766:	4b10      	ldr	r3, [pc, #64]	; (80157a8 <GetKeyAddrItem+0x60>)
 8015768:	0092      	lsls	r2, r2, #2
 801576a:	5cd3      	ldrb	r3, [r2, r3]
 801576c:	1dfa      	adds	r2, r7, #7
 801576e:	7812      	ldrb	r2, [r2, #0]
 8015770:	429a      	cmp	r2, r3
 8015772:	d108      	bne.n	8015786 <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 8015774:	187b      	adds	r3, r7, r1
 8015776:	781b      	ldrb	r3, [r3, #0]
 8015778:	009a      	lsls	r2, r3, #2
 801577a:	4b0b      	ldr	r3, [pc, #44]	; (80157a8 <GetKeyAddrItem+0x60>)
 801577c:	18d2      	adds	r2, r2, r3
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015782:	2300      	movs	r3, #0
 8015784:	e00b      	b.n	801579e <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015786:	210f      	movs	r1, #15
 8015788:	187b      	adds	r3, r7, r1
 801578a:	781a      	ldrb	r2, [r3, #0]
 801578c:	187b      	adds	r3, r7, r1
 801578e:	3201      	adds	r2, #1
 8015790:	701a      	strb	r2, [r3, #0]
 8015792:	230f      	movs	r3, #15
 8015794:	18fb      	adds	r3, r7, r3
 8015796:	781b      	ldrb	r3, [r3, #0]
 8015798:	2b01      	cmp	r3, #1
 801579a:	d9e1      	bls.n	8015760 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801579c:	230c      	movs	r3, #12
}
 801579e:	0018      	movs	r0, r3
 80157a0:	46bd      	mov	sp, r7
 80157a2:	b004      	add	sp, #16
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	46c0      	nop			; (mov r8, r8)
 80157a8:	200001a4 	.word	0x200001a4

080157ac <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 80157ac:	b590      	push	{r4, r7, lr}
 80157ae:	b089      	sub	sp, #36	; 0x24
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60b9      	str	r1, [r7, #8]
 80157b4:	607a      	str	r2, [r7, #4]
 80157b6:	603b      	str	r3, [r7, #0]
 80157b8:	230f      	movs	r3, #15
 80157ba:	18fb      	adds	r3, r7, r3
 80157bc:	1c02      	adds	r2, r0, #0
 80157be:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d005      	beq.n	80157d2 <DeriveSessionKey10x+0x26>
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d002      	beq.n	80157d2 <DeriveSessionKey10x+0x26>
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d101      	bne.n	80157d6 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157d2:	230a      	movs	r3, #10
 80157d4:	e043      	b.n	801585e <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 80157d6:	2310      	movs	r3, #16
 80157d8:	18fb      	adds	r3, r7, r3
 80157da:	2200      	movs	r2, #0
 80157dc:	601a      	str	r2, [r3, #0]
 80157de:	3304      	adds	r3, #4
 80157e0:	220c      	movs	r2, #12
 80157e2:	2100      	movs	r1, #0
 80157e4:	0018      	movs	r0, r3
 80157e6:	f008 fadc 	bl	801dda2 <memset>

    switch( keyID )
 80157ea:	230f      	movs	r3, #15
 80157ec:	18fb      	adds	r3, r7, r3
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	2b02      	cmp	r3, #2
 80157f2:	d002      	beq.n	80157fa <DeriveSessionKey10x+0x4e>
 80157f4:	2b03      	cmp	r3, #3
 80157f6:	d005      	beq.n	8015804 <DeriveSessionKey10x+0x58>
 80157f8:	e009      	b.n	801580e <DeriveSessionKey10x+0x62>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80157fa:	2310      	movs	r3, #16
 80157fc:	18fb      	adds	r3, r7, r3
 80157fe:	2201      	movs	r2, #1
 8015800:	701a      	strb	r2, [r3, #0]
            break;
 8015802:	e006      	b.n	8015812 <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015804:	2310      	movs	r3, #16
 8015806:	18fb      	adds	r3, r7, r3
 8015808:	2202      	movs	r2, #2
 801580a:	701a      	strb	r2, [r3, #0]
            break;
 801580c:	e001      	b.n	8015812 <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801580e:	230b      	movs	r3, #11
 8015810:	e025      	b.n	801585e <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8015812:	2410      	movs	r4, #16
 8015814:	193b      	adds	r3, r7, r4
 8015816:	3301      	adds	r3, #1
 8015818:	68b9      	ldr	r1, [r7, #8]
 801581a:	2203      	movs	r2, #3
 801581c:	0018      	movs	r0, r3
 801581e:	f003 fd69 	bl	80192f4 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8015822:	193b      	adds	r3, r7, r4
 8015824:	3304      	adds	r3, #4
 8015826:	6879      	ldr	r1, [r7, #4]
 8015828:	2203      	movs	r2, #3
 801582a:	0018      	movs	r0, r3
 801582c:	f003 fd62 	bl	80192f4 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8015830:	193b      	adds	r3, r7, r4
 8015832:	3307      	adds	r3, #7
 8015834:	6839      	ldr	r1, [r7, #0]
 8015836:	2202      	movs	r2, #2
 8015838:	0018      	movs	r0, r3
 801583a:	f003 fd5b 	bl	80192f4 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801583e:	4b0a      	ldr	r3, [pc, #40]	; (8015868 <DeriveSessionKey10x+0xbc>)
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	220f      	movs	r2, #15
 8015844:	18ba      	adds	r2, r7, r2
 8015846:	7812      	ldrb	r2, [r2, #0]
 8015848:	1939      	adds	r1, r7, r4
 801584a:	6818      	ldr	r0, [r3, #0]
 801584c:	0013      	movs	r3, r2
 801584e:	2201      	movs	r2, #1
 8015850:	f7f8 f8aa 	bl	800d9a8 <SecureElementDeriveAndStoreKey>
 8015854:	1e03      	subs	r3, r0, #0
 8015856:	d001      	beq.n	801585c <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015858:	230f      	movs	r3, #15
 801585a:	e000      	b.n	801585e <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801585c:	2300      	movs	r3, #0
}
 801585e:	0018      	movs	r0, r3
 8015860:	46bd      	mov	sp, r7
 8015862:	b009      	add	sp, #36	; 0x24
 8015864:	bd90      	pop	{r4, r7, pc}
 8015866:	46c0      	nop			; (mov r8, r8)
 8015868:	20000ca8 	.word	0x20000ca8

0801586c <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b082      	sub	sp, #8
 8015870:	af00      	add	r7, sp, #0
 8015872:	0002      	movs	r2, r0
 8015874:	6039      	str	r1, [r7, #0]
 8015876:	1dfb      	adds	r3, r7, #7
 8015878:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d101      	bne.n	8015884 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015880:	230a      	movs	r3, #10
 8015882:	e039      	b.n	80158f8 <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 8015884:	1dfb      	adds	r3, r7, #7
 8015886:	781b      	ldrb	r3, [r3, #0]
 8015888:	2b04      	cmp	r3, #4
 801588a:	d02c      	beq.n	80158e6 <GetLastFcntDown+0x7a>
 801588c:	dc31      	bgt.n	80158f2 <GetLastFcntDown+0x86>
 801588e:	2b03      	cmp	r3, #3
 8015890:	d01d      	beq.n	80158ce <GetLastFcntDown+0x62>
 8015892:	dc2e      	bgt.n	80158f2 <GetLastFcntDown+0x86>
 8015894:	2b01      	cmp	r3, #1
 8015896:	d002      	beq.n	801589e <GetLastFcntDown+0x32>
 8015898:	2b02      	cmp	r3, #2
 801589a:	d00c      	beq.n	80158b6 <GetLastFcntDown+0x4a>
 801589c:	e029      	b.n	80158f2 <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 801589e:	4b18      	ldr	r3, [pc, #96]	; (8015900 <GetLastFcntDown+0x94>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	691a      	ldr	r2, [r3, #16]
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 80158a8:	4b15      	ldr	r3, [pc, #84]	; (8015900 <GetLastFcntDown+0x94>)
 80158aa:	681a      	ldr	r2, [r3, #0]
 80158ac:	4b14      	ldr	r3, [pc, #80]	; (8015900 <GetLastFcntDown+0x94>)
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	3210      	adds	r2, #16
 80158b2:	621a      	str	r2, [r3, #32]
            break;
 80158b4:	e01f      	b.n	80158f6 <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80158b6:	4b12      	ldr	r3, [pc, #72]	; (8015900 <GetLastFcntDown+0x94>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	695a      	ldr	r2, [r3, #20]
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80158c0:	4b0f      	ldr	r3, [pc, #60]	; (8015900 <GetLastFcntDown+0x94>)
 80158c2:	681a      	ldr	r2, [r3, #0]
 80158c4:	4b0e      	ldr	r3, [pc, #56]	; (8015900 <GetLastFcntDown+0x94>)
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	3214      	adds	r2, #20
 80158ca:	621a      	str	r2, [r3, #32]
            break;
 80158cc:	e013      	b.n	80158f6 <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 80158ce:	4b0c      	ldr	r3, [pc, #48]	; (8015900 <GetLastFcntDown+0x94>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	699a      	ldr	r2, [r3, #24]
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 80158d8:	4b09      	ldr	r3, [pc, #36]	; (8015900 <GetLastFcntDown+0x94>)
 80158da:	681a      	ldr	r2, [r3, #0]
 80158dc:	4b08      	ldr	r3, [pc, #32]	; (8015900 <GetLastFcntDown+0x94>)
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	3218      	adds	r2, #24
 80158e2:	621a      	str	r2, [r3, #32]
            break;
 80158e4:	e007      	b.n	80158f6 <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 80158e6:	4b06      	ldr	r3, [pc, #24]	; (8015900 <GetLastFcntDown+0x94>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	69da      	ldr	r2, [r3, #28]
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	601a      	str	r2, [r3, #0]
            break;
 80158f0:	e001      	b.n	80158f6 <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80158f2:	2305      	movs	r3, #5
 80158f4:	e000      	b.n	80158f8 <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80158f6:	2300      	movs	r3, #0
}
 80158f8:	0018      	movs	r0, r3
 80158fa:	46bd      	mov	sp, r7
 80158fc:	b002      	add	sp, #8
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	20000ca8 	.word	0x20000ca8

08015904 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b084      	sub	sp, #16
 8015908:	af00      	add	r7, sp, #0
 801590a:	0002      	movs	r2, r0
 801590c:	6039      	str	r1, [r7, #0]
 801590e:	1dfb      	adds	r3, r7, #7
 8015910:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015912:	2300      	movs	r3, #0
 8015914:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015916:	230c      	movs	r3, #12
 8015918:	18fa      	adds	r2, r7, r3
 801591a:	1dfb      	adds	r3, r7, #7
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	0011      	movs	r1, r2
 8015920:	0018      	movs	r0, r3
 8015922:	f7ff ffa3 	bl	801586c <GetLastFcntDown>
 8015926:	1e03      	subs	r3, r0, #0
 8015928:	d001      	beq.n	801592e <CheckFCntDown+0x2a>
    {
        return false;
 801592a:	2300      	movs	r3, #0
 801592c:	e009      	b.n	8015942 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	683a      	ldr	r2, [r7, #0]
 8015932:	429a      	cmp	r2, r3
 8015934:	d802      	bhi.n	801593c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8015936:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015938:	3301      	adds	r3, #1
 801593a:	d101      	bne.n	8015940 <CheckFCntDown+0x3c>
    {
        return true;
 801593c:	2301      	movs	r3, #1
 801593e:	e000      	b.n	8015942 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015940:	2300      	movs	r3, #0
    }
}
 8015942:	0018      	movs	r0, r3
 8015944:	46bd      	mov	sp, r7
 8015946:	b004      	add	sp, #16
 8015948:	bd80      	pop	{r7, pc}
	...

0801594c <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b082      	sub	sp, #8
 8015950:	af00      	add	r7, sp, #0
 8015952:	0002      	movs	r2, r0
 8015954:	6039      	str	r1, [r7, #0]
 8015956:	1dfb      	adds	r3, r7, #7
 8015958:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 801595a:	1dfb      	adds	r3, r7, #7
 801595c:	781b      	ldrb	r3, [r3, #0]
 801595e:	2b04      	cmp	r3, #4
 8015960:	d017      	beq.n	8015992 <UpdateFCntDown+0x46>
 8015962:	dc1b      	bgt.n	801599c <UpdateFCntDown+0x50>
 8015964:	2b03      	cmp	r3, #3
 8015966:	d00f      	beq.n	8015988 <UpdateFCntDown+0x3c>
 8015968:	dc18      	bgt.n	801599c <UpdateFCntDown+0x50>
 801596a:	2b01      	cmp	r3, #1
 801596c:	d002      	beq.n	8015974 <UpdateFCntDown+0x28>
 801596e:	2b02      	cmp	r3, #2
 8015970:	d005      	beq.n	801597e <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 8015972:	e013      	b.n	801599c <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8015974:	4b0d      	ldr	r3, [pc, #52]	; (80159ac <UpdateFCntDown+0x60>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	683a      	ldr	r2, [r7, #0]
 801597a:	611a      	str	r2, [r3, #16]
            break;
 801597c:	e00f      	b.n	801599e <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 801597e:	4b0b      	ldr	r3, [pc, #44]	; (80159ac <UpdateFCntDown+0x60>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	683a      	ldr	r2, [r7, #0]
 8015984:	615a      	str	r2, [r3, #20]
            break;
 8015986:	e00a      	b.n	801599e <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8015988:	4b08      	ldr	r3, [pc, #32]	; (80159ac <UpdateFCntDown+0x60>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	683a      	ldr	r2, [r7, #0]
 801598e:	619a      	str	r2, [r3, #24]
            break;
 8015990:	e005      	b.n	801599e <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8015992:	4b06      	ldr	r3, [pc, #24]	; (80159ac <UpdateFCntDown+0x60>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	683a      	ldr	r2, [r7, #0]
 8015998:	61da      	str	r2, [r3, #28]
            break;
 801599a:	e000      	b.n	801599e <UpdateFCntDown+0x52>
            break;
 801599c:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801599e:	4b03      	ldr	r3, [pc, #12]	; (80159ac <UpdateFCntDown+0x60>)
 80159a0:	685b      	ldr	r3, [r3, #4]
 80159a2:	4798      	blx	r3
}
 80159a4:	46c0      	nop			; (mov r8, r8)
 80159a6:	46bd      	mov	sp, r7
 80159a8:	b002      	add	sp, #8
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	20000ca8 	.word	0x20000ca8

080159b0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 80159b4:	4b11      	ldr	r3, [pc, #68]	; (80159fc <ResetFCnts+0x4c>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	2200      	movs	r2, #0
 80159ba:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80159bc:	4b0f      	ldr	r3, [pc, #60]	; (80159fc <ResetFCnts+0x4c>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2201      	movs	r2, #1
 80159c2:	4252      	negs	r2, r2
 80159c4:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80159c6:	4b0d      	ldr	r3, [pc, #52]	; (80159fc <ResetFCnts+0x4c>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	2201      	movs	r2, #1
 80159cc:	4252      	negs	r2, r2
 80159ce:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80159d0:	4b0a      	ldr	r3, [pc, #40]	; (80159fc <ResetFCnts+0x4c>)
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2201      	movs	r2, #1
 80159d6:	4252      	negs	r2, r2
 80159d8:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 80159da:	4b08      	ldr	r3, [pc, #32]	; (80159fc <ResetFCnts+0x4c>)
 80159dc:	681a      	ldr	r2, [r3, #0]
 80159de:	4b07      	ldr	r3, [pc, #28]	; (80159fc <ResetFCnts+0x4c>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	3218      	adds	r2, #24
 80159e4:	621a      	str	r2, [r3, #32]

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 80159e6:	4b05      	ldr	r3, [pc, #20]	; (80159fc <ResetFCnts+0x4c>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	2201      	movs	r2, #1
 80159ec:	4252      	negs	r2, r2
 80159ee:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80159f0:	4b02      	ldr	r3, [pc, #8]	; (80159fc <ResetFCnts+0x4c>)
 80159f2:	685b      	ldr	r3, [r3, #4]
 80159f4:	4798      	blx	r3
}
 80159f6:	46c0      	nop			; (mov r8, r8)
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}
 80159fc:	20000ca8 	.word	0x20000ca8

08015a00 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	af00      	add	r7, sp, #0
    return;
 8015a04:	46c0      	nop			; (mov r8, r8)
}
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}
	...

08015a0c <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8015a14:	4b15      	ldr	r3, [pc, #84]	; (8015a6c <LoRaMacCryptoInit+0x60>)
 8015a16:	4a16      	ldr	r2, [pc, #88]	; (8015a70 <LoRaMacCryptoInit+0x64>)
 8015a18:	601a      	str	r2, [r3, #0]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d003      	beq.n	8015a28 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8015a20:	4b12      	ldr	r3, [pc, #72]	; (8015a6c <LoRaMacCryptoInit+0x60>)
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	605a      	str	r2, [r3, #4]
 8015a26:	e002      	b.n	8015a2e <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8015a28:	4b10      	ldr	r3, [pc, #64]	; (8015a6c <LoRaMacCryptoInit+0x60>)
 8015a2a:	4a12      	ldr	r2, [pc, #72]	; (8015a74 <LoRaMacCryptoInit+0x68>)
 8015a2c:	605a      	str	r2, [r3, #4]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8015a2e:	4b0f      	ldr	r3, [pc, #60]	; (8015a6c <LoRaMacCryptoInit+0x60>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2224      	movs	r2, #36	; 0x24
 8015a34:	2100      	movs	r1, #0
 8015a36:	0018      	movs	r0, r3
 8015a38:	f003 fc9a 	bl	8019370 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 8015a3c:	4b0b      	ldr	r3, [pc, #44]	; (8015a6c <LoRaMacCryptoInit+0x60>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	2201      	movs	r2, #1
 8015a42:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8015a44:	4b09      	ldr	r3, [pc, #36]	; (8015a6c <LoRaMacCryptoInit+0x60>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	2201      	movs	r2, #1
 8015a4a:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 8015a4c:	4b07      	ldr	r3, [pc, #28]	; (8015a6c <LoRaMacCryptoInit+0x60>)
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	2201      	movs	r2, #1
 8015a52:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 8015a54:	4b05      	ldr	r3, [pc, #20]	; (8015a6c <LoRaMacCryptoInit+0x60>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	2200      	movs	r2, #0
 8015a5a:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8015a5c:	f7ff ffa8 	bl	80159b0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015a60:	2300      	movs	r3, #0
}
 8015a62:	0018      	movs	r0, r3
 8015a64:	46bd      	mov	sp, r7
 8015a66:	b002      	add	sp, #8
 8015a68:	bd80      	pop	{r7, pc}
 8015a6a:	46c0      	nop			; (mov r8, r8)
 8015a6c:	20000ca8 	.word	0x20000ca8
 8015a70:	20000cb0 	.word	0x20000cb0
 8015a74:	08015a01 	.word	0x08015a01

08015a78 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8015a80:	4b04      	ldr	r3, [pc, #16]	; (8015a94 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015a88:	2300      	movs	r3, #0
}
 8015a8a:	0018      	movs	r0, r3
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	b002      	add	sp, #8
 8015a90:	bd80      	pop	{r7, pc}
 8015a92:	46c0      	nop			; (mov r8, r8)
 8015a94:	20000ca8 	.word	0x20000ca8

08015a98 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b082      	sub	sp, #8
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d007      	beq.n	8015ab6 <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8015aa6:	6879      	ldr	r1, [r7, #4]
 8015aa8:	4b05      	ldr	r3, [pc, #20]	; (8015ac0 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8015aaa:	2224      	movs	r2, #36	; 0x24
 8015aac:	0018      	movs	r0, r3
 8015aae:	f003 fc21 	bl	80192f4 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	e000      	b.n	8015ab8 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015ab6:	230a      	movs	r3, #10
    }
}
 8015ab8:	0018      	movs	r0, r3
 8015aba:	46bd      	mov	sp, r7
 8015abc:	b002      	add	sp, #8
 8015abe:	bd80      	pop	{r7, pc}
 8015ac0:	20000cb0 	.word	0x20000cb0

08015ac4 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b082      	sub	sp, #8
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	2224      	movs	r2, #36	; 0x24
 8015ad0:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8015ad2:	4b02      	ldr	r3, [pc, #8]	; (8015adc <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8015ad4:	0018      	movs	r0, r3
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	b002      	add	sp, #8
 8015ada:	bd80      	pop	{r7, pc}
 8015adc:	20000cb0 	.word	0x20000cb0

08015ae0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b082      	sub	sp, #8
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d101      	bne.n	8015af2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015aee:	230a      	movs	r3, #10
 8015af0:	e006      	b.n	8015b00 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8015af2:	4b05      	ldr	r3, [pc, #20]	; (8015b08 <LoRaMacCryptoGetFCntUp+0x28>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	68db      	ldr	r3, [r3, #12]
 8015af8:	1c5a      	adds	r2, r3, #1
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015afe:	2300      	movs	r3, #0
}
 8015b00:	0018      	movs	r0, r3
 8015b02:	46bd      	mov	sp, r7
 8015b04:	b002      	add	sp, #8
 8015b06:	bd80      	pop	{r7, pc}
 8015b08:	20000ca8 	.word	0x20000ca8

08015b0c <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b0e:	b08d      	sub	sp, #52	; 0x34
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	61ba      	str	r2, [r7, #24]
 8015b14:	617b      	str	r3, [r7, #20]
 8015b16:	230f      	movs	r3, #15
 8015b18:	2210      	movs	r2, #16
 8015b1a:	4694      	mov	ip, r2
 8015b1c:	44bc      	add	ip, r7
 8015b1e:	4463      	add	r3, ip
 8015b20:	1c02      	adds	r2, r0, #0
 8015b22:	701a      	strb	r2, [r3, #0]
 8015b24:	230c      	movs	r3, #12
 8015b26:	2210      	movs	r2, #16
 8015b28:	4694      	mov	ip, r2
 8015b2a:	44bc      	add	ip, r7
 8015b2c:	4463      	add	r3, ip
 8015b2e:	1c0a      	adds	r2, r1, #0
 8015b30:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015b32:	2300      	movs	r3, #0
 8015b34:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 8015b36:	2300      	movs	r3, #0
 8015b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8015b3a:	231b      	movs	r3, #27
 8015b3c:	2210      	movs	r2, #16
 8015b3e:	4694      	mov	ip, r2
 8015b40:	44bc      	add	ip, r7
 8015b42:	4463      	add	r3, ip
 8015b44:	2213      	movs	r2, #19
 8015b46:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d101      	bne.n	8015b52 <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b4e:	230a      	movs	r3, #10
 8015b50:	e06b      	b.n	8015c2a <LoRaMacCryptoGetFCntDown+0x11e>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015b52:	221b      	movs	r2, #27
 8015b54:	2110      	movs	r1, #16
 8015b56:	187b      	adds	r3, r7, r1
 8015b58:	189e      	adds	r6, r3, r2
 8015b5a:	2314      	movs	r3, #20
 8015b5c:	187a      	adds	r2, r7, r1
 8015b5e:	18d2      	adds	r2, r2, r3
 8015b60:	230f      	movs	r3, #15
 8015b62:	2010      	movs	r0, #16
 8015b64:	4684      	mov	ip, r0
 8015b66:	44bc      	add	ip, r7
 8015b68:	4463      	add	r3, ip
 8015b6a:	781b      	ldrb	r3, [r3, #0]
 8015b6c:	0011      	movs	r1, r2
 8015b6e:	0018      	movs	r0, r3
 8015b70:	f7ff fe7c 	bl	801586c <GetLastFcntDown>
 8015b74:	0003      	movs	r3, r0
 8015b76:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015b78:	221b      	movs	r2, #27
 8015b7a:	2110      	movs	r1, #16
 8015b7c:	187b      	adds	r3, r7, r1
 8015b7e:	189b      	adds	r3, r3, r2
 8015b80:	781b      	ldrb	r3, [r3, #0]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d003      	beq.n	8015b8e <LoRaMacCryptoGetFCntDown+0x82>
    {
        return cryptoStatus;
 8015b86:	187b      	adds	r3, r7, r1
 8015b88:	189b      	adds	r3, r3, r2
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	e04d      	b.n	8015c2a <LoRaMacCryptoGetFCntDown+0x11e>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8015b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b90:	3301      	adds	r3, #1
 8015b92:	d103      	bne.n	8015b9c <LoRaMacCryptoGetFCntDown+0x90>
    {
        *currentDown = frameFcnt;
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	69ba      	ldr	r2, [r7, #24]
 8015b98:	601a      	str	r2, [r3, #0]
 8015b9a:	e020      	b.n	8015bde <LoRaMacCryptoGetFCntDown+0xd2>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b9e:	041b      	lsls	r3, r3, #16
 8015ba0:	0c1b      	lsrs	r3, r3, #16
 8015ba2:	69ba      	ldr	r2, [r7, #24]
 8015ba4:	1ad3      	subs	r3, r2, r3
 8015ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8015ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	dd05      	ble.n	8015bba <LoRaMacCryptoGetFCntDown+0xae>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb2:	18d2      	adds	r2, r2, r3
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	601a      	str	r2, [r3, #0]
 8015bb8:	e011      	b.n	8015bde <LoRaMacCryptoGetFCntDown+0xd2>
        }
        else if( fCntDiff == 0 )
 8015bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d104      	bne.n	8015bca <LoRaMacCryptoGetFCntDown+0xbe>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015bc6:	2307      	movs	r3, #7
 8015bc8:	e02f      	b.n	8015c2a <LoRaMacCryptoGetFCntDown+0x11e>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bcc:	0c1b      	lsrs	r3, r3, #16
 8015bce:	041a      	lsls	r2, r3, #16
 8015bd0:	69bb      	ldr	r3, [r7, #24]
 8015bd2:	18d3      	adds	r3, r2, r3
 8015bd4:	2280      	movs	r2, #128	; 0x80
 8015bd6:	0252      	lsls	r2, r2, #9
 8015bd8:	189a      	adds	r2, r3, r2
 8015bda:	697b      	ldr	r3, [r7, #20]
 8015bdc:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015bde:	4b15      	ldr	r3, [pc, #84]	; (8015c34 <LoRaMacCryptoGetFCntDown+0x128>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	789b      	ldrb	r3, [r3, #2]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d11f      	bne.n	8015c28 <LoRaMacCryptoGetFCntDown+0x11c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	60bb      	str	r3, [r7, #8]
 8015bee:	2300      	movs	r3, #0
 8015bf0:	60fb      	str	r3, [r7, #12]
 8015bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf4:	603b      	str	r3, [r7, #0]
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	607b      	str	r3, [r7, #4]
 8015bfa:	68ba      	ldr	r2, [r7, #8]
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	6838      	ldr	r0, [r7, #0]
 8015c00:	6879      	ldr	r1, [r7, #4]
 8015c02:	1a12      	subs	r2, r2, r0
 8015c04:	418b      	sbcs	r3, r1
 8015c06:	210c      	movs	r1, #12
 8015c08:	2010      	movs	r0, #16
 8015c0a:	4684      	mov	ip, r0
 8015c0c:	44bc      	add	ip, r7
 8015c0e:	4461      	add	r1, ip
 8015c10:	8809      	ldrh	r1, [r1, #0]
 8015c12:	b289      	uxth	r1, r1
 8015c14:	000c      	movs	r4, r1
 8015c16:	2100      	movs	r1, #0
 8015c18:	000d      	movs	r5, r1
 8015c1a:	429d      	cmp	r5, r3
 8015c1c:	dc04      	bgt.n	8015c28 <LoRaMacCryptoGetFCntDown+0x11c>
 8015c1e:	d101      	bne.n	8015c24 <LoRaMacCryptoGetFCntDown+0x118>
 8015c20:	4294      	cmp	r4, r2
 8015c22:	d801      	bhi.n	8015c28 <LoRaMacCryptoGetFCntDown+0x11c>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8015c24:	2308      	movs	r3, #8
 8015c26:	e000      	b.n	8015c2a <LoRaMacCryptoGetFCntDown+0x11e>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015c28:	2300      	movs	r3, #0
}
 8015c2a:	0018      	movs	r0, r3
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	b00d      	add	sp, #52	; 0x34
 8015c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c32:	46c0      	nop			; (mov r8, r8)
 8015c34:	20000ca8 	.word	0x20000ca8

08015c38 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d101      	bne.n	8015c4a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015c46:	230a      	movs	r3, #10
 8015c48:	e006      	b.n	8015c58 <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8015c4a:	4b05      	ldr	r3, [pc, #20]	; (8015c60 <LoRaMacCryptoSetMulticastReference+0x28>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	331c      	adds	r3, #28
 8015c50:	001a      	movs	r2, r3
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 8015c56:	2300      	movs	r3, #0
}
 8015c58:	0018      	movs	r0, r3
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	b002      	add	sp, #8
 8015c5e:	bd80      	pop	{r7, pc}
 8015c60:	20000ca8 	.word	0x20000ca8

08015c64 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b082      	sub	sp, #8
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	0002      	movs	r2, r0
 8015c6c:	6039      	str	r1, [r7, #0]
 8015c6e:	1dfb      	adds	r3, r7, #7
 8015c70:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015c72:	683a      	ldr	r2, [r7, #0]
 8015c74:	1dfb      	adds	r3, r7, #7
 8015c76:	781b      	ldrb	r3, [r3, #0]
 8015c78:	0011      	movs	r1, r2
 8015c7a:	0018      	movs	r0, r3
 8015c7c:	f7f7 fd46 	bl	800d70c <SecureElementSetKey>
 8015c80:	1e03      	subs	r3, r0, #0
 8015c82:	d001      	beq.n	8015c88 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015c84:	230f      	movs	r3, #15
 8015c86:	e014      	b.n	8015cb2 <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 8015c88:	1dfb      	adds	r3, r7, #7
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d10f      	bne.n	8015cb0 <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015c90:	1dfb      	adds	r3, r7, #7
 8015c92:	781b      	ldrb	r3, [r3, #0]
 8015c94:	0018      	movs	r0, r3
 8015c96:	f000 fa79 	bl	801618c <LoRaMacCryptoDeriveMcRootKey>
 8015c9a:	1e03      	subs	r3, r0, #0
 8015c9c:	d001      	beq.n	8015ca2 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015c9e:	230f      	movs	r3, #15
 8015ca0:	e007      	b.n	8015cb2 <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015ca2:	2004      	movs	r0, #4
 8015ca4:	f000 faa6 	bl	80161f4 <LoRaMacCryptoDeriveMcKEKey>
 8015ca8:	1e03      	subs	r3, r0, #0
 8015caa:	d001      	beq.n	8015cb0 <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015cac:	230f      	movs	r3, #15
 8015cae:	e000      	b.n	8015cb2 <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015cb0:	2300      	movs	r3, #0
}
 8015cb2:	0018      	movs	r0, r3
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	b002      	add	sp, #8
 8015cb8:	bd80      	pop	{r7, pc}
	...

08015cbc <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b086      	sub	sp, #24
 8015cc0:	af02      	add	r7, sp, #8
 8015cc2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d101      	bne.n	8015cce <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015cca:	230a      	movs	r3, #10
 8015ccc:	e039      	b.n	8015d42 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015cce:	230f      	movs	r3, #15
 8015cd0:	18fb      	adds	r3, r7, r3
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8015cda:	2308      	movs	r3, #8
 8015cdc:	18fb      	adds	r3, r7, r3
 8015cde:	0018      	movs	r0, r3
 8015ce0:	f7f7 ff3e 	bl	800db60 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8015ce4:	68ba      	ldr	r2, [r7, #8]
 8015ce6:	4b19      	ldr	r3, [pc, #100]	; (8015d4c <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	b292      	uxth	r2, r2
 8015cec:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015cee:	4b17      	ldr	r3, [pc, #92]	; (8015d4c <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015cf0:	685b      	ldr	r3, [r3, #4]
 8015cf2:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8015cf4:	4b15      	ldr	r3, [pc, #84]	; (8015d4c <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	889a      	ldrh	r2, [r3, #4]
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	0018      	movs	r0, r3
 8015d02:	f000 fca1 	bl	8016648 <LoRaMacSerializerJoinRequest>
 8015d06:	1e03      	subs	r3, r0, #0
 8015d08:	d001      	beq.n	8015d0e <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015d0a:	2311      	movs	r3, #17
 8015d0c:	e019      	b.n	8015d42 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6819      	ldr	r1, [r3, #0]
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	3318      	adds	r3, #24
 8015d16:	220f      	movs	r2, #15
 8015d18:	18ba      	adds	r2, r7, r2
 8015d1a:	7812      	ldrb	r2, [r2, #0]
 8015d1c:	9300      	str	r3, [sp, #0]
 8015d1e:	0013      	movs	r3, r2
 8015d20:	2213      	movs	r2, #19
 8015d22:	2000      	movs	r0, #0
 8015d24:	f7f7 fd6c 	bl	800d800 <SecureElementComputeAesCmac>
 8015d28:	1e03      	subs	r3, r0, #0
 8015d2a:	d001      	beq.n	8015d30 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015d2c:	230f      	movs	r3, #15
 8015d2e:	e008      	b.n	8015d42 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	0018      	movs	r0, r3
 8015d34:	f000 fc88 	bl	8016648 <LoRaMacSerializerJoinRequest>
 8015d38:	1e03      	subs	r3, r0, #0
 8015d3a:	d001      	beq.n	8015d40 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015d3c:	2311      	movs	r3, #17
 8015d3e:	e000      	b.n	8015d42 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015d40:	2300      	movs	r3, #0
}
 8015d42:	0018      	movs	r0, r3
 8015d44:	46bd      	mov	sp, r7
 8015d46:	b004      	add	sp, #16
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	46c0      	nop			; (mov r8, r8)
 8015d4c:	20000ca8 	.word	0x20000ca8

08015d50 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d52:	b095      	sub	sp, #84	; 0x54
 8015d54:	af04      	add	r7, sp, #16
 8015d56:	60b9      	str	r1, [r7, #8]
 8015d58:	607a      	str	r2, [r7, #4]
 8015d5a:	230f      	movs	r3, #15
 8015d5c:	18fb      	adds	r3, r7, r3
 8015d5e:	1c02      	adds	r2, r0, #0
 8015d60:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d002      	beq.n	8015d6e <LoRaMacCryptoHandleJoinAccept+0x1e>
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d101      	bne.n	8015d72 <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d6e:	230a      	movs	r3, #10
 8015d70:	e0a7      	b.n	8015ec2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015d72:	233f      	movs	r3, #63	; 0x3f
 8015d74:	18fb      	adds	r3, r7, r3
 8015d76:	2213      	movs	r2, #19
 8015d78:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015d7a:	2614      	movs	r6, #20
 8015d7c:	19bb      	adds	r3, r7, r6
 8015d7e:	2200      	movs	r2, #0
 8015d80:	601a      	str	r2, [r3, #0]
 8015d82:	3304      	adds	r3, #4
 8015d84:	221d      	movs	r2, #29
 8015d86:	2100      	movs	r1, #0
 8015d88:	0018      	movs	r0, r3
 8015d8a:	f008 f80a 	bl	801dda2 <memset>
    uint8_t versionMinor         = 0;
 8015d8e:	2313      	movs	r3, #19
 8015d90:	18fb      	adds	r3, r7, r3
 8015d92:	2200      	movs	r2, #0
 8015d94:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 8015d96:	4b4d      	ldr	r3, [pc, #308]	; (8015ecc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	3304      	adds	r3, #4
 8015d9c:	63bb      	str	r3, [r7, #56]	; 0x38
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 8015d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015da0:	781b      	ldrb	r3, [r3, #0]
 8015da2:	b29c      	uxth	r4, r3
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681d      	ldr	r5, [r3, #0]
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	791b      	ldrb	r3, [r3, #4]
 8015dac:	68b9      	ldr	r1, [r7, #8]
 8015dae:	200f      	movs	r0, #15
 8015db0:	183a      	adds	r2, r7, r0
 8015db2:	7810      	ldrb	r0, [r2, #0]
 8015db4:	2213      	movs	r2, #19
 8015db6:	18ba      	adds	r2, r7, r2
 8015db8:	9202      	str	r2, [sp, #8]
 8015dba:	19ba      	adds	r2, r7, r6
 8015dbc:	9201      	str	r2, [sp, #4]
 8015dbe:	9300      	str	r3, [sp, #0]
 8015dc0:	002b      	movs	r3, r5
 8015dc2:	0022      	movs	r2, r4
 8015dc4:	f7f7 fe45 	bl	800da52 <SecureElementProcessJoinAccept>
 8015dc8:	1e03      	subs	r3, r0, #0
 8015dca:	d001      	beq.n	8015dd0 <LoRaMacCryptoHandleJoinAccept+0x80>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015dcc:	230f      	movs	r3, #15
 8015dce:	e078      	b.n	8015ec2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	6818      	ldr	r0, [r3, #0]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	791b      	ldrb	r3, [r3, #4]
 8015dd8:	b29a      	uxth	r2, r3
 8015dda:	2314      	movs	r3, #20
 8015ddc:	18fb      	adds	r3, r7, r3
 8015dde:	0019      	movs	r1, r3
 8015de0:	f003 fa88 	bl	80192f4 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	0018      	movs	r0, r3
 8015de8:	f000 fa2e 	bl	8016248 <LoRaMacParserJoinAccept>
 8015dec:	1e03      	subs	r3, r0, #0
 8015dee:	d001      	beq.n	8015df4 <LoRaMacCryptoHandleJoinAccept+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015df0:	2310      	movs	r3, #16
 8015df2:	e066      	b.n	8015ec2 <LoRaMacCryptoHandleJoinAccept+0x172>
            return retval;
        }
    }
#else
    // Operating in LoRaWAN 1.0.x mode
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 8015df4:	253f      	movs	r5, #63	; 0x3f
 8015df6:	197c      	adds	r4, r7, r5
 8015df8:	2000      	movs	r0, #0
 8015dfa:	f000 f9c7 	bl	801618c <LoRaMacCryptoDeriveMcRootKey>
 8015dfe:	0003      	movs	r3, r0
 8015e00:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e02:	002a      	movs	r2, r5
 8015e04:	18bb      	adds	r3, r7, r2
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d002      	beq.n	8015e12 <LoRaMacCryptoHandleJoinAccept+0xc2>
    {
        return retval;
 8015e0c:	18bb      	adds	r3, r7, r2
 8015e0e:	781b      	ldrb	r3, [r3, #0]
 8015e10:	e057      	b.n	8015ec2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8015e12:	253f      	movs	r5, #63	; 0x3f
 8015e14:	197c      	adds	r4, r7, r5
 8015e16:	2004      	movs	r0, #4
 8015e18:	f000 f9ec 	bl	80161f4 <LoRaMacCryptoDeriveMcKEKey>
 8015e1c:	0003      	movs	r3, r0
 8015e1e:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e20:	002a      	movs	r2, r5
 8015e22:	18bb      	adds	r3, r7, r2
 8015e24:	781b      	ldrb	r3, [r3, #0]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d002      	beq.n	8015e30 <LoRaMacCryptoHandleJoinAccept+0xe0>
    {
        return retval;
 8015e2a:	18bb      	adds	r3, r7, r2
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	e048      	b.n	8015ec2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	1d99      	adds	r1, r3, #6
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	3309      	adds	r3, #9
 8015e38:	001a      	movs	r2, r3
 8015e3a:	4b24      	ldr	r3, [pc, #144]	; (8015ecc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	3304      	adds	r3, #4
 8015e40:	253f      	movs	r5, #63	; 0x3f
 8015e42:	197c      	adds	r4, r7, r5
 8015e44:	2003      	movs	r0, #3
 8015e46:	f7ff fcb1 	bl	80157ac <DeriveSessionKey10x>
 8015e4a:	0003      	movs	r3, r0
 8015e4c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e4e:	197b      	adds	r3, r7, r5
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d002      	beq.n	8015e5c <LoRaMacCryptoHandleJoinAccept+0x10c>
    {
        return retval;
 8015e56:	197b      	adds	r3, r7, r5
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	e032      	b.n	8015ec2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	1d99      	adds	r1, r3, #6
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	3309      	adds	r3, #9
 8015e64:	001a      	movs	r2, r3
 8015e66:	4b19      	ldr	r3, [pc, #100]	; (8015ecc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	3304      	adds	r3, #4
 8015e6c:	253f      	movs	r5, #63	; 0x3f
 8015e6e:	197c      	adds	r4, r7, r5
 8015e70:	2002      	movs	r0, #2
 8015e72:	f7ff fc9b 	bl	80157ac <DeriveSessionKey10x>
 8015e76:	0003      	movs	r3, r0
 8015e78:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015e7a:	197b      	adds	r3, r7, r5
 8015e7c:	781b      	ldrb	r3, [r3, #0]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d002      	beq.n	8015e88 <LoRaMacCryptoHandleJoinAccept+0x138>
    {
        return retval;
 8015e82:	197b      	adds	r3, r7, r5
 8015e84:	781b      	ldrb	r3, [r3, #0]
 8015e86:	e01c      	b.n	8015ec2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 8015e88:	4b10      	ldr	r3, [pc, #64]	; (8015ecc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	2213      	movs	r2, #19
 8015e8e:	18ba      	adds	r2, r7, r2
 8015e90:	7812      	ldrb	r2, [r2, #0]
 8015e92:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8015e94:	4b0d      	ldr	r3, [pc, #52]	; (8015ecc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	2200      	movs	r2, #0
 8015e9a:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015e9c:	4b0b      	ldr	r3, [pc, #44]	; (8015ecc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	2201      	movs	r2, #1
 8015ea2:	4252      	negs	r2, r2
 8015ea4:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015ea6:	4b09      	ldr	r3, [pc, #36]	; (8015ecc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	2201      	movs	r2, #1
 8015eac:	4252      	negs	r2, r2
 8015eae:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015eb0:	4b06      	ldr	r3, [pc, #24]	; (8015ecc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	2201      	movs	r2, #1
 8015eb6:	4252      	negs	r2, r2
 8015eb8:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015eba:	4b04      	ldr	r3, [pc, #16]	; (8015ecc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8015ec0:	2300      	movs	r3, #0
}
 8015ec2:	0018      	movs	r0, r3
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	b011      	add	sp, #68	; 0x44
 8015ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015eca:	46c0      	nop			; (mov r8, r8)
 8015ecc:	20000ca8 	.word	0x20000ca8

08015ed0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8015ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ed2:	b08b      	sub	sp, #44	; 0x2c
 8015ed4:	af04      	add	r7, sp, #16
 8015ed6:	60f8      	str	r0, [r7, #12]
 8015ed8:	0008      	movs	r0, r1
 8015eda:	0011      	movs	r1, r2
 8015edc:	607b      	str	r3, [r7, #4]
 8015ede:	230b      	movs	r3, #11
 8015ee0:	18fb      	adds	r3, r7, r3
 8015ee2:	1c02      	adds	r2, r0, #0
 8015ee4:	701a      	strb	r2, [r3, #0]
 8015ee6:	230a      	movs	r3, #10
 8015ee8:	18fb      	adds	r3, r7, r3
 8015eea:	1c0a      	adds	r2, r1, #0
 8015eec:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015eee:	2316      	movs	r3, #22
 8015ef0:	18fb      	adds	r3, r7, r3
 8015ef2:	2213      	movs	r2, #19
 8015ef4:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8015ef6:	2317      	movs	r3, #23
 8015ef8:	18fb      	adds	r3, r7, r3
 8015efa:	2203      	movs	r2, #3
 8015efc:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d101      	bne.n	8015f08 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f04:	230a      	movs	r3, #10
 8015f06:	e072      	b.n	8015fee <LoRaMacCryptoSecureMessage+0x11e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8015f08:	4b3b      	ldr	r3, [pc, #236]	; (8015ff8 <LoRaMacCryptoSecureMessage+0x128>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	68db      	ldr	r3, [r3, #12]
 8015f0e:	68fa      	ldr	r2, [r7, #12]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d201      	bcs.n	8015f18 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8015f14:	2306      	movs	r3, #6
 8015f16:	e06a      	b.n	8015fee <LoRaMacCryptoSecureMessage+0x11e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	2220      	movs	r2, #32
 8015f1c:	5c9b      	ldrb	r3, [r3, r2]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d103      	bne.n	8015f2a <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015f22:	2317      	movs	r3, #23
 8015f24:	18fb      	adds	r3, r7, r3
 8015f26:	2202      	movs	r2, #2
 8015f28:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8015f2a:	4b33      	ldr	r3, [pc, #204]	; (8015ff8 <LoRaMacCryptoSecureMessage+0x128>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	68db      	ldr	r3, [r3, #12]
 8015f30:	68fa      	ldr	r2, [r7, #12]
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d91c      	bls.n	8015f70 <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	2228      	movs	r2, #40	; 0x28
 8015f3e:	5c9b      	ldrb	r3, [r3, r2]
 8015f40:	b219      	sxth	r1, r3
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	689d      	ldr	r5, [r3, #8]
 8015f46:	2616      	movs	r6, #22
 8015f48:	19bc      	adds	r4, r7, r6
 8015f4a:	2317      	movs	r3, #23
 8015f4c:	18fb      	adds	r3, r7, r3
 8015f4e:	781a      	ldrb	r2, [r3, #0]
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	9301      	str	r3, [sp, #4]
 8015f54:	2300      	movs	r3, #0
 8015f56:	9300      	str	r3, [sp, #0]
 8015f58:	002b      	movs	r3, r5
 8015f5a:	f7ff f9c7 	bl	80152ec <PayloadEncrypt>
 8015f5e:	0003      	movs	r3, r0
 8015f60:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015f62:	19bb      	adds	r3, r7, r6
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d002      	beq.n	8015f70 <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 8015f6a:	19bb      	adds	r3, r7, r6
 8015f6c:	781b      	ldrb	r3, [r3, #0]
 8015f6e:	e03e      	b.n	8015fee <LoRaMacCryptoSecureMessage+0x11e>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	0018      	movs	r0, r3
 8015f74:	f000 fc03 	bl	801677e <LoRaMacSerializerData>
 8015f78:	1e03      	subs	r3, r0, #0
 8015f7a:	d001      	beq.n	8015f80 <LoRaMacCryptoSecureMessage+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015f7c:	2311      	movs	r3, #17
 8015f7e:	e036      	b.n	8015fee <LoRaMacCryptoSecureMessage+0x11e>
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8015f80:	2117      	movs	r1, #23
 8015f82:	187b      	adds	r3, r7, r1
 8015f84:	2202      	movs	r2, #2
 8015f86:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6818      	ldr	r0, [r3, #0]
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	791b      	ldrb	r3, [r3, #4]
 8015f90:	b29b      	uxth	r3, r3
 8015f92:	3b04      	subs	r3, #4
 8015f94:	b29d      	uxth	r5, r3
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	689b      	ldr	r3, [r3, #8]
 8015f9a:	687a      	ldr	r2, [r7, #4]
 8015f9c:	322c      	adds	r2, #44	; 0x2c
 8015f9e:	2616      	movs	r6, #22
 8015fa0:	19bc      	adds	r4, r7, r6
 8015fa2:	1879      	adds	r1, r7, r1
 8015fa4:	7809      	ldrb	r1, [r1, #0]
 8015fa6:	9203      	str	r2, [sp, #12]
 8015fa8:	68fa      	ldr	r2, [r7, #12]
 8015faa:	9202      	str	r2, [sp, #8]
 8015fac:	9301      	str	r3, [sp, #4]
 8015fae:	2300      	movs	r3, #0
 8015fb0:	9300      	str	r3, [sp, #0]
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	000a      	movs	r2, r1
 8015fb6:	0029      	movs	r1, r5
 8015fb8:	f7ff facc 	bl	8015554 <ComputeCmacB0>
 8015fbc:	0003      	movs	r3, r0
 8015fbe:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8015fc0:	19bb      	adds	r3, r7, r6
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d002      	beq.n	8015fce <LoRaMacCryptoSecureMessage+0xfe>
        {
            return retval;
 8015fc8:	19bb      	adds	r3, r7, r6
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	e00f      	b.n	8015fee <LoRaMacCryptoSecureMessage+0x11e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	0018      	movs	r0, r3
 8015fd2:	f000 fbd4 	bl	801677e <LoRaMacSerializerData>
 8015fd6:	1e03      	subs	r3, r0, #0
 8015fd8:	d001      	beq.n	8015fde <LoRaMacCryptoSecureMessage+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015fda:	2311      	movs	r3, #17
 8015fdc:	e007      	b.n	8015fee <LoRaMacCryptoSecureMessage+0x11e>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8015fde:	4b06      	ldr	r3, [pc, #24]	; (8015ff8 <LoRaMacCryptoSecureMessage+0x128>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	68fa      	ldr	r2, [r7, #12]
 8015fe4:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015fe6:	4b04      	ldr	r3, [pc, #16]	; (8015ff8 <LoRaMacCryptoSecureMessage+0x128>)
 8015fe8:	685b      	ldr	r3, [r3, #4]
 8015fea:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8015fec:	2300      	movs	r3, #0
}
 8015fee:	0018      	movs	r0, r3
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	b007      	add	sp, #28
 8015ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ff6:	46c0      	nop			; (mov r8, r8)
 8015ff8:	20000ca8 	.word	0x20000ca8

08015ffc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8015ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ffe:	b08b      	sub	sp, #44	; 0x2c
 8016000:	af04      	add	r7, sp, #16
 8016002:	60b9      	str	r1, [r7, #8]
 8016004:	0011      	movs	r1, r2
 8016006:	607b      	str	r3, [r7, #4]
 8016008:	230f      	movs	r3, #15
 801600a:	18fb      	adds	r3, r7, r3
 801600c:	1c02      	adds	r2, r0, #0
 801600e:	701a      	strb	r2, [r3, #0]
 8016010:	230e      	movs	r3, #14
 8016012:	18fb      	adds	r3, r7, r3
 8016014:	1c0a      	adds	r2, r1, #0
 8016016:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8016018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801601a:	2b00      	cmp	r3, #0
 801601c:	d101      	bne.n	8016022 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801601e:	230a      	movs	r3, #10
 8016020:	e0ae      	b.n	8016180 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	230e      	movs	r3, #14
 8016026:	18fb      	adds	r3, r7, r3
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	0011      	movs	r1, r2
 801602c:	0018      	movs	r0, r3
 801602e:	f7ff fc69 	bl	8015904 <CheckFCntDown>
 8016032:	0003      	movs	r3, r0
 8016034:	001a      	movs	r2, r3
 8016036:	2301      	movs	r3, #1
 8016038:	4053      	eors	r3, r2
 801603a:	b2db      	uxtb	r3, r3
 801603c:	2b00      	cmp	r3, #0
 801603e:	d001      	beq.n	8016044 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016040:	2306      	movs	r3, #6
 8016042:	e09d      	b.n	8016180 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016044:	2315      	movs	r3, #21
 8016046:	18fb      	adds	r3, r7, r3
 8016048:	2213      	movs	r2, #19
 801604a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801604c:	2317      	movs	r3, #23
 801604e:	18fb      	adds	r3, r7, r3
 8016050:	2203      	movs	r2, #3
 8016052:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016054:	2314      	movs	r3, #20
 8016056:	18fb      	adds	r3, r7, r3
 8016058:	2202      	movs	r2, #2
 801605a:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605e:	0018      	movs	r0, r3
 8016060:	f000 f9e2 	bl	8016428 <LoRaMacParserData>
 8016064:	1e03      	subs	r3, r0, #0
 8016066:	d001      	beq.n	801606c <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016068:	2310      	movs	r3, #16
 801606a:	e089      	b.n	8016180 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801606c:	2515      	movs	r5, #21
 801606e:	197c      	adds	r4, r7, r5
 8016070:	2310      	movs	r3, #16
 8016072:	18fa      	adds	r2, r7, r3
 8016074:	230f      	movs	r3, #15
 8016076:	18fb      	adds	r3, r7, r3
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	0011      	movs	r1, r2
 801607c:	0018      	movs	r0, r3
 801607e:	f7ff fb63 	bl	8015748 <GetKeyAddrItem>
 8016082:	0003      	movs	r3, r0
 8016084:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016086:	197b      	adds	r3, r7, r5
 8016088:	781b      	ldrb	r3, [r3, #0]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d002      	beq.n	8016094 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 801608e:	197b      	adds	r3, r7, r5
 8016090:	781b      	ldrb	r3, [r3, #0]
 8016092:	e075      	b.n	8016180 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016094:	693a      	ldr	r2, [r7, #16]
 8016096:	2317      	movs	r3, #23
 8016098:	18fb      	adds	r3, r7, r3
 801609a:	7852      	ldrb	r2, [r2, #1]
 801609c:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 801609e:	693a      	ldr	r2, [r7, #16]
 80160a0:	2314      	movs	r3, #20
 80160a2:	18fb      	adds	r3, r7, r3
 80160a4:	7892      	ldrb	r2, [r2, #2]
 80160a6:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80160a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160aa:	689b      	ldr	r3, [r3, #8]
 80160ac:	68ba      	ldr	r2, [r7, #8]
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d001      	beq.n	80160b6 <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80160b2:	2302      	movs	r3, #2
 80160b4:	e064      	b.n	8016180 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80160b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160b8:	7b1b      	ldrb	r3, [r3, #12]
 80160ba:	069b      	lsls	r3, r3, #26
 80160bc:	0fdb      	lsrs	r3, r3, #31
 80160be:	b2db      	uxtb	r3, r3
 80160c0:	001a      	movs	r2, r3
 80160c2:	2016      	movs	r0, #22
 80160c4:	183b      	adds	r3, r7, r0
 80160c6:	1e51      	subs	r1, r2, #1
 80160c8:	418a      	sbcs	r2, r1
 80160ca:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80160cc:	4b2e      	ldr	r3, [pc, #184]	; (8016188 <LoRaMacCryptoUnsecureMessage+0x18c>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	789b      	ldrb	r3, [r3, #2]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d102      	bne.n	80160dc <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80160d6:	183b      	adds	r3, r7, r0
 80160d8:	2200      	movs	r2, #0
 80160da:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80160dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160de:	6818      	ldr	r0, [r3, #0]
 80160e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e2:	791b      	ldrb	r3, [r3, #4]
 80160e4:	b29b      	uxth	r3, r3
 80160e6:	3b04      	subs	r3, #4
 80160e8:	b299      	uxth	r1, r3
 80160ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160ee:	2615      	movs	r6, #21
 80160f0:	19bc      	adds	r4, r7, r6
 80160f2:	2216      	movs	r2, #22
 80160f4:	18ba      	adds	r2, r7, r2
 80160f6:	7815      	ldrb	r5, [r2, #0]
 80160f8:	2214      	movs	r2, #20
 80160fa:	18ba      	adds	r2, r7, r2
 80160fc:	7812      	ldrb	r2, [r2, #0]
 80160fe:	9303      	str	r3, [sp, #12]
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	9302      	str	r3, [sp, #8]
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	9301      	str	r3, [sp, #4]
 8016108:	2301      	movs	r3, #1
 801610a:	9300      	str	r3, [sp, #0]
 801610c:	002b      	movs	r3, r5
 801610e:	f7ff fa69 	bl	80155e4 <VerifyCmacB0>
 8016112:	0003      	movs	r3, r0
 8016114:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016116:	19bb      	adds	r3, r7, r6
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d002      	beq.n	8016124 <LoRaMacCryptoUnsecureMessage+0x128>
    {
        return retval;
 801611e:	19bb      	adds	r3, r7, r6
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	e02d      	b.n	8016180 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016126:	2220      	movs	r2, #32
 8016128:	5c9b      	ldrb	r3, [r3, r2]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d103      	bne.n	8016136 <LoRaMacCryptoUnsecureMessage+0x13a>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801612e:	2317      	movs	r3, #23
 8016130:	18fb      	adds	r3, r7, r3
 8016132:	2202      	movs	r2, #2
 8016134:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016138:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801613c:	2228      	movs	r2, #40	; 0x28
 801613e:	5c9b      	ldrb	r3, [r3, r2]
 8016140:	b219      	sxth	r1, r3
 8016142:	2615      	movs	r6, #21
 8016144:	19bc      	adds	r4, r7, r6
 8016146:	68bd      	ldr	r5, [r7, #8]
 8016148:	2317      	movs	r3, #23
 801614a:	18fb      	adds	r3, r7, r3
 801614c:	781a      	ldrb	r2, [r3, #0]
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	9301      	str	r3, [sp, #4]
 8016152:	2301      	movs	r3, #1
 8016154:	9300      	str	r3, [sp, #0]
 8016156:	002b      	movs	r3, r5
 8016158:	f7ff f8c8 	bl	80152ec <PayloadEncrypt>
 801615c:	0003      	movs	r3, r0
 801615e:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016160:	19bb      	adds	r3, r7, r6
 8016162:	781b      	ldrb	r3, [r3, #0]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d002      	beq.n	801616e <LoRaMacCryptoUnsecureMessage+0x172>
    {
        return retval;
 8016168:	19bb      	adds	r3, r7, r6
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	e008      	b.n	8016180 <LoRaMacCryptoUnsecureMessage+0x184>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	230e      	movs	r3, #14
 8016172:	18fb      	adds	r3, r7, r3
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	0011      	movs	r1, r2
 8016178:	0018      	movs	r0, r3
 801617a:	f7ff fbe7 	bl	801594c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801617e:	2300      	movs	r3, #0
}
 8016180:	0018      	movs	r0, r3
 8016182:	46bd      	mov	sp, r7
 8016184:	b007      	add	sp, #28
 8016186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016188:	20000ca8 	.word	0x20000ca8

0801618c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 801618c:	b590      	push	{r4, r7, lr}
 801618e:	b087      	sub	sp, #28
 8016190:	af00      	add	r7, sp, #0
 8016192:	0002      	movs	r2, r0
 8016194:	1dfb      	adds	r3, r7, #7
 8016196:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8016198:	1dfb      	adds	r3, r7, #7
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d001      	beq.n	80161a4 <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80161a0:	230b      	movs	r3, #11
 80161a2:	e020      	b.n	80161e6 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 80161a4:	2408      	movs	r4, #8
 80161a6:	193b      	adds	r3, r7, r4
 80161a8:	2200      	movs	r2, #0
 80161aa:	601a      	str	r2, [r3, #0]
 80161ac:	3304      	adds	r3, #4
 80161ae:	220c      	movs	r2, #12
 80161b0:	2100      	movs	r1, #0
 80161b2:	0018      	movs	r0, r3
 80161b4:	f007 fdf5 	bl	801dda2 <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 80161b8:	4b0d      	ldr	r3, [pc, #52]	; (80161f0 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	789b      	ldrb	r3, [r3, #2]
 80161be:	2b01      	cmp	r3, #1
 80161c0:	d102      	bne.n	80161c8 <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 80161c2:	193b      	adds	r3, r7, r4
 80161c4:	2220      	movs	r2, #32
 80161c6:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80161c8:	4b09      	ldr	r3, [pc, #36]	; (80161f0 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	1dfa      	adds	r2, r7, #7
 80161ce:	7812      	ldrb	r2, [r2, #0]
 80161d0:	2108      	movs	r1, #8
 80161d2:	1879      	adds	r1, r7, r1
 80161d4:	6818      	ldr	r0, [r3, #0]
 80161d6:	2304      	movs	r3, #4
 80161d8:	f7f7 fbe6 	bl	800d9a8 <SecureElementDeriveAndStoreKey>
 80161dc:	1e03      	subs	r3, r0, #0
 80161de:	d001      	beq.n	80161e4 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80161e0:	230f      	movs	r3, #15
 80161e2:	e000      	b.n	80161e6 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80161e4:	2300      	movs	r3, #0
}
 80161e6:	0018      	movs	r0, r3
 80161e8:	46bd      	mov	sp, r7
 80161ea:	b007      	add	sp, #28
 80161ec:	bd90      	pop	{r4, r7, pc}
 80161ee:	46c0      	nop			; (mov r8, r8)
 80161f0:	20000ca8 	.word	0x20000ca8

080161f4 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80161f4:	b590      	push	{r4, r7, lr}
 80161f6:	b087      	sub	sp, #28
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	0002      	movs	r2, r0
 80161fc:	1dfb      	adds	r3, r7, #7
 80161fe:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8016200:	1dfb      	adds	r3, r7, #7
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	2b04      	cmp	r3, #4
 8016206:	d001      	beq.n	801620c <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016208:	230b      	movs	r3, #11
 801620a:	e017      	b.n	801623c <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 801620c:	2408      	movs	r4, #8
 801620e:	193b      	adds	r3, r7, r4
 8016210:	2200      	movs	r2, #0
 8016212:	601a      	str	r2, [r3, #0]
 8016214:	3304      	adds	r3, #4
 8016216:	220c      	movs	r2, #12
 8016218:	2100      	movs	r1, #0
 801621a:	0018      	movs	r0, r3
 801621c:	f007 fdc1 	bl	801dda2 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016220:	4b08      	ldr	r3, [pc, #32]	; (8016244 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	1dfa      	adds	r2, r7, #7
 8016226:	7812      	ldrb	r2, [r2, #0]
 8016228:	1939      	adds	r1, r7, r4
 801622a:	6818      	ldr	r0, [r3, #0]
 801622c:	237f      	movs	r3, #127	; 0x7f
 801622e:	f7f7 fbbb 	bl	800d9a8 <SecureElementDeriveAndStoreKey>
 8016232:	1e03      	subs	r3, r0, #0
 8016234:	d001      	beq.n	801623a <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016236:	230f      	movs	r3, #15
 8016238:	e000      	b.n	801623c <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801623a:	2300      	movs	r3, #0
}
 801623c:	0018      	movs	r0, r3
 801623e:	46bd      	mov	sp, r7
 8016240:	b007      	add	sp, #28
 8016242:	bd90      	pop	{r4, r7, pc}
 8016244:	20000ca8 	.word	0x20000ca8

08016248 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016248:	b590      	push	{r4, r7, lr}
 801624a:	b085      	sub	sp, #20
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d003      	beq.n	801625e <LoRaMacParserJoinAccept+0x16>
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d101      	bne.n	8016262 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801625e:	2302      	movs	r3, #2
 8016260:	e0de      	b.n	8016420 <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 8016262:	240e      	movs	r4, #14
 8016264:	193b      	adds	r3, r7, r4
 8016266:	2200      	movs	r2, #0
 8016268:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681a      	ldr	r2, [r3, #0]
 801626e:	193b      	adds	r3, r7, r4
 8016270:	881b      	ldrh	r3, [r3, #0]
 8016272:	1939      	adds	r1, r7, r4
 8016274:	1c58      	adds	r0, r3, #1
 8016276:	8008      	strh	r0, [r1, #0]
 8016278:	18d3      	adds	r3, r2, r3
 801627a:	781a      	ldrb	r2, [r3, #0]
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	1d98      	adds	r0, r3, #6
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	681a      	ldr	r2, [r3, #0]
 8016288:	193b      	adds	r3, r7, r4
 801628a:	881b      	ldrh	r3, [r3, #0]
 801628c:	18d3      	adds	r3, r2, r3
 801628e:	2203      	movs	r2, #3
 8016290:	0019      	movs	r1, r3
 8016292:	f003 f82f 	bl	80192f4 <memcpy1>
    bufItr = bufItr + 3;
 8016296:	193b      	adds	r3, r7, r4
 8016298:	193a      	adds	r2, r7, r4
 801629a:	8812      	ldrh	r2, [r2, #0]
 801629c:	3203      	adds	r2, #3
 801629e:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	3309      	adds	r3, #9
 80162a4:	0018      	movs	r0, r3
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	681a      	ldr	r2, [r3, #0]
 80162aa:	193b      	adds	r3, r7, r4
 80162ac:	881b      	ldrh	r3, [r3, #0]
 80162ae:	18d3      	adds	r3, r2, r3
 80162b0:	2203      	movs	r2, #3
 80162b2:	0019      	movs	r1, r3
 80162b4:	f003 f81e 	bl	80192f4 <memcpy1>
    bufItr = bufItr + 3;
 80162b8:	193b      	adds	r3, r7, r4
 80162ba:	193a      	adds	r2, r7, r4
 80162bc:	8812      	ldrh	r2, [r2, #0]
 80162be:	3203      	adds	r2, #3
 80162c0:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	193b      	adds	r3, r7, r4
 80162c8:	881b      	ldrh	r3, [r3, #0]
 80162ca:	1939      	adds	r1, r7, r4
 80162cc:	1c58      	adds	r0, r3, #1
 80162ce:	8008      	strh	r0, [r1, #0]
 80162d0:	18d3      	adds	r3, r2, r3
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	001a      	movs	r2, r3
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	681a      	ldr	r2, [r3, #0]
 80162de:	193b      	adds	r3, r7, r4
 80162e0:	881b      	ldrh	r3, [r3, #0]
 80162e2:	1939      	adds	r1, r7, r4
 80162e4:	1c58      	adds	r0, r3, #1
 80162e6:	8008      	strh	r0, [r1, #0]
 80162e8:	18d3      	adds	r3, r2, r3
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	021a      	lsls	r2, r3, #8
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	68db      	ldr	r3, [r3, #12]
 80162f2:	431a      	orrs	r2, r3
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	681a      	ldr	r2, [r3, #0]
 80162fc:	193b      	adds	r3, r7, r4
 80162fe:	881b      	ldrh	r3, [r3, #0]
 8016300:	1939      	adds	r1, r7, r4
 8016302:	1c58      	adds	r0, r3, #1
 8016304:	8008      	strh	r0, [r1, #0]
 8016306:	18d3      	adds	r3, r2, r3
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	041a      	lsls	r2, r3, #16
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	68db      	ldr	r3, [r3, #12]
 8016310:	431a      	orrs	r2, r3
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681a      	ldr	r2, [r3, #0]
 801631a:	193b      	adds	r3, r7, r4
 801631c:	881b      	ldrh	r3, [r3, #0]
 801631e:	1939      	adds	r1, r7, r4
 8016320:	1c58      	adds	r0, r3, #1
 8016322:	8008      	strh	r0, [r1, #0]
 8016324:	18d3      	adds	r3, r2, r3
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	061a      	lsls	r2, r3, #24
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	68db      	ldr	r3, [r3, #12]
 801632e:	431a      	orrs	r2, r3
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681a      	ldr	r2, [r3, #0]
 8016338:	193b      	adds	r3, r7, r4
 801633a:	881b      	ldrh	r3, [r3, #0]
 801633c:	1939      	adds	r1, r7, r4
 801633e:	1c58      	adds	r0, r3, #1
 8016340:	8008      	strh	r0, [r1, #0]
 8016342:	18d3      	adds	r3, r2, r3
 8016344:	781a      	ldrb	r2, [r3, #0]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681a      	ldr	r2, [r3, #0]
 801634e:	193b      	adds	r3, r7, r4
 8016350:	881b      	ldrh	r3, [r3, #0]
 8016352:	1939      	adds	r1, r7, r4
 8016354:	1c58      	adds	r0, r3, #1
 8016356:	8008      	strh	r0, [r1, #0]
 8016358:	18d3      	adds	r3, r2, r3
 801635a:	781a      	ldrb	r2, [r3, #0]
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	791b      	ldrb	r3, [r3, #4]
 8016364:	1f1a      	subs	r2, r3, #4
 8016366:	193b      	adds	r3, r7, r4
 8016368:	881b      	ldrh	r3, [r3, #0]
 801636a:	1ad3      	subs	r3, r2, r3
 801636c:	2b10      	cmp	r3, #16
 801636e:	d111      	bne.n	8016394 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	3312      	adds	r3, #18
 8016374:	0018      	movs	r0, r3
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681a      	ldr	r2, [r3, #0]
 801637a:	193b      	adds	r3, r7, r4
 801637c:	881b      	ldrh	r3, [r3, #0]
 801637e:	18d3      	adds	r3, r2, r3
 8016380:	2210      	movs	r2, #16
 8016382:	0019      	movs	r1, r3
 8016384:	f002 ffb6 	bl	80192f4 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8016388:	193b      	adds	r3, r7, r4
 801638a:	193a      	adds	r2, r7, r4
 801638c:	8812      	ldrh	r2, [r2, #0]
 801638e:	3210      	adds	r2, #16
 8016390:	801a      	strh	r2, [r3, #0]
 8016392:	e00a      	b.n	80163aa <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	791b      	ldrb	r3, [r3, #4]
 8016398:	1f1a      	subs	r2, r3, #4
 801639a:	230e      	movs	r3, #14
 801639c:	18fb      	adds	r3, r7, r3
 801639e:	881b      	ldrh	r3, [r3, #0]
 80163a0:	1ad3      	subs	r3, r2, r3
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	dd01      	ble.n	80163aa <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 80163a6:	2301      	movs	r3, #1
 80163a8:	e03a      	b.n	8016420 <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681a      	ldr	r2, [r3, #0]
 80163ae:	240e      	movs	r4, #14
 80163b0:	193b      	adds	r3, r7, r4
 80163b2:	881b      	ldrh	r3, [r3, #0]
 80163b4:	1939      	adds	r1, r7, r4
 80163b6:	1c58      	adds	r0, r3, #1
 80163b8:	8008      	strh	r0, [r1, #0]
 80163ba:	18d3      	adds	r3, r2, r3
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	001a      	movs	r2, r3
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681a      	ldr	r2, [r3, #0]
 80163c8:	193b      	adds	r3, r7, r4
 80163ca:	881b      	ldrh	r3, [r3, #0]
 80163cc:	1939      	adds	r1, r7, r4
 80163ce:	1c58      	adds	r0, r3, #1
 80163d0:	8008      	strh	r0, [r1, #0]
 80163d2:	18d3      	adds	r3, r2, r3
 80163d4:	781b      	ldrb	r3, [r3, #0]
 80163d6:	021a      	lsls	r2, r3, #8
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163dc:	431a      	orrs	r2, r3
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681a      	ldr	r2, [r3, #0]
 80163e6:	193b      	adds	r3, r7, r4
 80163e8:	881b      	ldrh	r3, [r3, #0]
 80163ea:	1939      	adds	r1, r7, r4
 80163ec:	1c58      	adds	r0, r3, #1
 80163ee:	8008      	strh	r0, [r1, #0]
 80163f0:	18d3      	adds	r3, r2, r3
 80163f2:	781b      	ldrb	r3, [r3, #0]
 80163f4:	041a      	lsls	r2, r3, #16
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163fa:	431a      	orrs	r2, r3
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	681a      	ldr	r2, [r3, #0]
 8016404:	193b      	adds	r3, r7, r4
 8016406:	881b      	ldrh	r3, [r3, #0]
 8016408:	1939      	adds	r1, r7, r4
 801640a:	1c58      	adds	r0, r3, #1
 801640c:	8008      	strh	r0, [r1, #0]
 801640e:	18d3      	adds	r3, r2, r3
 8016410:	781b      	ldrb	r3, [r3, #0]
 8016412:	061a      	lsls	r2, r3, #24
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016418:	431a      	orrs	r2, r3
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801641e:	2300      	movs	r3, #0
}
 8016420:	0018      	movs	r0, r3
 8016422:	46bd      	mov	sp, r7
 8016424:	b005      	add	sp, #20
 8016426:	bd90      	pop	{r4, r7, pc}

08016428 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016428:	b590      	push	{r4, r7, lr}
 801642a:	b085      	sub	sp, #20
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d003      	beq.n	801643e <LoRaMacParserData+0x16>
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d101      	bne.n	8016442 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801643e:	2302      	movs	r3, #2
 8016440:	e0fe      	b.n	8016640 <LoRaMacParserData+0x218>
    }

    uint16_t bufItr = 0;
 8016442:	240e      	movs	r4, #14
 8016444:	193b      	adds	r3, r7, r4
 8016446:	2200      	movs	r2, #0
 8016448:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681a      	ldr	r2, [r3, #0]
 801644e:	193b      	adds	r3, r7, r4
 8016450:	881b      	ldrh	r3, [r3, #0]
 8016452:	1939      	adds	r1, r7, r4
 8016454:	1c58      	adds	r0, r3, #1
 8016456:	8008      	strh	r0, [r1, #0]
 8016458:	18d3      	adds	r3, r2, r3
 801645a:	781a      	ldrb	r2, [r3, #0]
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681a      	ldr	r2, [r3, #0]
 8016464:	193b      	adds	r3, r7, r4
 8016466:	881b      	ldrh	r3, [r3, #0]
 8016468:	1939      	adds	r1, r7, r4
 801646a:	1c58      	adds	r0, r3, #1
 801646c:	8008      	strh	r0, [r1, #0]
 801646e:	18d3      	adds	r3, r2, r3
 8016470:	781b      	ldrb	r3, [r3, #0]
 8016472:	001a      	movs	r2, r3
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681a      	ldr	r2, [r3, #0]
 801647c:	193b      	adds	r3, r7, r4
 801647e:	881b      	ldrh	r3, [r3, #0]
 8016480:	1939      	adds	r1, r7, r4
 8016482:	1c58      	adds	r0, r3, #1
 8016484:	8008      	strh	r0, [r1, #0]
 8016486:	18d3      	adds	r3, r2, r3
 8016488:	781b      	ldrb	r3, [r3, #0]
 801648a:	021a      	lsls	r2, r3, #8
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	689b      	ldr	r3, [r3, #8]
 8016490:	431a      	orrs	r2, r3
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681a      	ldr	r2, [r3, #0]
 801649a:	193b      	adds	r3, r7, r4
 801649c:	881b      	ldrh	r3, [r3, #0]
 801649e:	1939      	adds	r1, r7, r4
 80164a0:	1c58      	adds	r0, r3, #1
 80164a2:	8008      	strh	r0, [r1, #0]
 80164a4:	18d3      	adds	r3, r2, r3
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	041a      	lsls	r2, r3, #16
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	689b      	ldr	r3, [r3, #8]
 80164ae:	431a      	orrs	r2, r3
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681a      	ldr	r2, [r3, #0]
 80164b8:	193b      	adds	r3, r7, r4
 80164ba:	881b      	ldrh	r3, [r3, #0]
 80164bc:	1939      	adds	r1, r7, r4
 80164be:	1c58      	adds	r0, r3, #1
 80164c0:	8008      	strh	r0, [r1, #0]
 80164c2:	18d3      	adds	r3, r2, r3
 80164c4:	781b      	ldrb	r3, [r3, #0]
 80164c6:	061a      	lsls	r2, r3, #24
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	689b      	ldr	r3, [r3, #8]
 80164cc:	431a      	orrs	r2, r3
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	681a      	ldr	r2, [r3, #0]
 80164d6:	193b      	adds	r3, r7, r4
 80164d8:	881b      	ldrh	r3, [r3, #0]
 80164da:	1939      	adds	r1, r7, r4
 80164dc:	1c58      	adds	r0, r3, #1
 80164de:	8008      	strh	r0, [r1, #0]
 80164e0:	18d3      	adds	r3, r2, r3
 80164e2:	781a      	ldrb	r2, [r3, #0]
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681a      	ldr	r2, [r3, #0]
 80164ec:	193b      	adds	r3, r7, r4
 80164ee:	881b      	ldrh	r3, [r3, #0]
 80164f0:	1939      	adds	r1, r7, r4
 80164f2:	1c58      	adds	r0, r3, #1
 80164f4:	8008      	strh	r0, [r1, #0]
 80164f6:	18d3      	adds	r3, r2, r3
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	b29a      	uxth	r2, r3
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681a      	ldr	r2, [r3, #0]
 8016504:	193b      	adds	r3, r7, r4
 8016506:	881b      	ldrh	r3, [r3, #0]
 8016508:	1939      	adds	r1, r7, r4
 801650a:	1c58      	adds	r0, r3, #1
 801650c:	8008      	strh	r0, [r1, #0]
 801650e:	18d3      	adds	r3, r2, r3
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	0219      	lsls	r1, r3, #8
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	89db      	ldrh	r3, [r3, #14]
 8016518:	b21a      	sxth	r2, r3
 801651a:	b20b      	sxth	r3, r1
 801651c:	4313      	orrs	r3, r2
 801651e:	b21b      	sxth	r3, r3
 8016520:	b29a      	uxth	r2, r3
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	3310      	adds	r3, #16
 801652a:	0018      	movs	r0, r3
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681a      	ldr	r2, [r3, #0]
 8016530:	193b      	adds	r3, r7, r4
 8016532:	881b      	ldrh	r3, [r3, #0]
 8016534:	18d1      	adds	r1, r2, r3
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	7b1b      	ldrb	r3, [r3, #12]
 801653a:	071b      	lsls	r3, r3, #28
 801653c:	0f1b      	lsrs	r3, r3, #28
 801653e:	b2db      	uxtb	r3, r3
 8016540:	b29b      	uxth	r3, r3
 8016542:	001a      	movs	r2, r3
 8016544:	f002 fed6 	bl	80192f4 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	7b1b      	ldrb	r3, [r3, #12]
 801654c:	071b      	lsls	r3, r3, #28
 801654e:	0f1b      	lsrs	r3, r3, #28
 8016550:	b2db      	uxtb	r3, r3
 8016552:	b299      	uxth	r1, r3
 8016554:	193b      	adds	r3, r7, r4
 8016556:	193a      	adds	r2, r7, r4
 8016558:	8812      	ldrh	r2, [r2, #0]
 801655a:	188a      	adds	r2, r1, r2
 801655c:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	2220      	movs	r2, #32
 8016562:	2100      	movs	r1, #0
 8016564:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2228      	movs	r2, #40	; 0x28
 801656a:	2100      	movs	r1, #0
 801656c:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	791b      	ldrb	r3, [r3, #4]
 8016572:	001a      	movs	r2, r3
 8016574:	193b      	adds	r3, r7, r4
 8016576:	881b      	ldrh	r3, [r3, #0]
 8016578:	1ad3      	subs	r3, r2, r3
 801657a:	2b04      	cmp	r3, #4
 801657c:	dd2e      	ble.n	80165dc <LoRaMacParserData+0x1b4>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681a      	ldr	r2, [r3, #0]
 8016582:	193b      	adds	r3, r7, r4
 8016584:	881b      	ldrh	r3, [r3, #0]
 8016586:	1939      	adds	r1, r7, r4
 8016588:	1c58      	adds	r0, r3, #1
 801658a:	8008      	strh	r0, [r1, #0]
 801658c:	18d3      	adds	r3, r2, r3
 801658e:	7819      	ldrb	r1, [r3, #0]
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2220      	movs	r2, #32
 8016594:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	791a      	ldrb	r2, [r3, #4]
 801659a:	193b      	adds	r3, r7, r4
 801659c:	881b      	ldrh	r3, [r3, #0]
 801659e:	b2db      	uxtb	r3, r3
 80165a0:	1ad3      	subs	r3, r2, r3
 80165a2:	b2db      	uxtb	r3, r3
 80165a4:	3b04      	subs	r3, #4
 80165a6:	b2d9      	uxtb	r1, r3
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2228      	movs	r2, #40	; 0x28
 80165ac:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681a      	ldr	r2, [r3, #0]
 80165b6:	193b      	adds	r3, r7, r4
 80165b8:	881b      	ldrh	r3, [r3, #0]
 80165ba:	18d1      	adds	r1, r2, r3
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2228      	movs	r2, #40	; 0x28
 80165c0:	5c9b      	ldrb	r3, [r3, r2]
 80165c2:	b29b      	uxth	r3, r3
 80165c4:	001a      	movs	r2, r3
 80165c6:	f002 fe95 	bl	80192f4 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	2228      	movs	r2, #40	; 0x28
 80165ce:	5c9b      	ldrb	r3, [r3, r2]
 80165d0:	b299      	uxth	r1, r3
 80165d2:	193b      	adds	r3, r7, r4
 80165d4:	193a      	adds	r2, r7, r4
 80165d6:	8812      	ldrh	r2, [r2, #0]
 80165d8:	188a      	adds	r2, r1, r2
 80165da:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	681a      	ldr	r2, [r3, #0]
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	791b      	ldrb	r3, [r3, #4]
 80165e4:	3b04      	subs	r3, #4
 80165e6:	18d3      	adds	r3, r2, r3
 80165e8:	781b      	ldrb	r3, [r3, #0]
 80165ea:	001a      	movs	r2, r3
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	6819      	ldr	r1, [r3, #0]
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	791b      	ldrb	r3, [r3, #4]
 80165fc:	3b03      	subs	r3, #3
 80165fe:	18cb      	adds	r3, r1, r3
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	021b      	lsls	r3, r3, #8
 8016604:	431a      	orrs	r2, r3
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	6819      	ldr	r1, [r3, #0]
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	791b      	ldrb	r3, [r3, #4]
 8016616:	3b02      	subs	r3, #2
 8016618:	18cb      	adds	r3, r1, r3
 801661a:	781b      	ldrb	r3, [r3, #0]
 801661c:	041b      	lsls	r3, r3, #16
 801661e:	431a      	orrs	r2, r3
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	6819      	ldr	r1, [r3, #0]
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	791b      	ldrb	r3, [r3, #4]
 8016630:	3b01      	subs	r3, #1
 8016632:	18cb      	adds	r3, r1, r3
 8016634:	781b      	ldrb	r3, [r3, #0]
 8016636:	061b      	lsls	r3, r3, #24
 8016638:	431a      	orrs	r2, r3
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801663e:	2300      	movs	r3, #0
}
 8016640:	0018      	movs	r0, r3
 8016642:	46bd      	mov	sp, r7
 8016644:	b005      	add	sp, #20
 8016646:	bd90      	pop	{r4, r7, pc}

08016648 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016648:	b5b0      	push	{r4, r5, r7, lr}
 801664a:	b084      	sub	sp, #16
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d003      	beq.n	801665e <LoRaMacSerializerJoinRequest+0x16>
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d101      	bne.n	8016662 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801665e:	2301      	movs	r3, #1
 8016660:	e089      	b.n	8016776 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8016662:	230e      	movs	r3, #14
 8016664:	18fb      	adds	r3, r7, r3
 8016666:	2200      	movs	r2, #0
 8016668:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	791b      	ldrb	r3, [r3, #4]
 801666e:	2b16      	cmp	r3, #22
 8016670:	d801      	bhi.n	8016676 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016672:	2302      	movs	r3, #2
 8016674:	e07f      	b.n	8016776 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	681a      	ldr	r2, [r3, #0]
 801667a:	240e      	movs	r4, #14
 801667c:	193b      	adds	r3, r7, r4
 801667e:	881b      	ldrh	r3, [r3, #0]
 8016680:	1939      	adds	r1, r7, r4
 8016682:	1c58      	adds	r0, r3, #1
 8016684:	8008      	strh	r0, [r1, #0]
 8016686:	18d3      	adds	r3, r2, r3
 8016688:	687a      	ldr	r2, [r7, #4]
 801668a:	7952      	ldrb	r2, [r2, #5]
 801668c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681a      	ldr	r2, [r3, #0]
 8016692:	193b      	adds	r3, r7, r4
 8016694:	881b      	ldrh	r3, [r3, #0]
 8016696:	18d0      	adds	r0, r2, r3
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	3306      	adds	r3, #6
 801669c:	2208      	movs	r2, #8
 801669e:	0019      	movs	r1, r3
 80166a0:	f002 fe44 	bl	801932c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80166a4:	193b      	adds	r3, r7, r4
 80166a6:	193a      	adds	r2, r7, r4
 80166a8:	8812      	ldrh	r2, [r2, #0]
 80166aa:	3208      	adds	r2, #8
 80166ac:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	681a      	ldr	r2, [r3, #0]
 80166b2:	193b      	adds	r3, r7, r4
 80166b4:	881b      	ldrh	r3, [r3, #0]
 80166b6:	18d0      	adds	r0, r2, r3
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	330e      	adds	r3, #14
 80166bc:	2208      	movs	r2, #8
 80166be:	0019      	movs	r1, r3
 80166c0:	f002 fe34 	bl	801932c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80166c4:	193b      	adds	r3, r7, r4
 80166c6:	0025      	movs	r5, r4
 80166c8:	193a      	adds	r2, r7, r4
 80166ca:	8812      	ldrh	r2, [r2, #0]
 80166cc:	3208      	adds	r2, #8
 80166ce:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	8ad8      	ldrh	r0, [r3, #22]
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681a      	ldr	r2, [r3, #0]
 80166d8:	197b      	adds	r3, r7, r5
 80166da:	881b      	ldrh	r3, [r3, #0]
 80166dc:	1979      	adds	r1, r7, r5
 80166de:	1c5c      	adds	r4, r3, #1
 80166e0:	800c      	strh	r4, [r1, #0]
 80166e2:	18d3      	adds	r3, r2, r3
 80166e4:	b2c2      	uxtb	r2, r0
 80166e6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	8adb      	ldrh	r3, [r3, #22]
 80166ec:	0a1b      	lsrs	r3, r3, #8
 80166ee:	b298      	uxth	r0, r3
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681a      	ldr	r2, [r3, #0]
 80166f4:	197b      	adds	r3, r7, r5
 80166f6:	881b      	ldrh	r3, [r3, #0]
 80166f8:	1979      	adds	r1, r7, r5
 80166fa:	1c5c      	adds	r4, r3, #1
 80166fc:	800c      	strh	r4, [r1, #0]
 80166fe:	18d3      	adds	r3, r2, r3
 8016700:	b2c2      	uxtb	r2, r0
 8016702:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6998      	ldr	r0, [r3, #24]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681a      	ldr	r2, [r3, #0]
 801670c:	197b      	adds	r3, r7, r5
 801670e:	881b      	ldrh	r3, [r3, #0]
 8016710:	1979      	adds	r1, r7, r5
 8016712:	1c5c      	adds	r4, r3, #1
 8016714:	800c      	strh	r4, [r1, #0]
 8016716:	18d3      	adds	r3, r2, r3
 8016718:	b2c2      	uxtb	r2, r0
 801671a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	699b      	ldr	r3, [r3, #24]
 8016720:	0a18      	lsrs	r0, r3, #8
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681a      	ldr	r2, [r3, #0]
 8016726:	197b      	adds	r3, r7, r5
 8016728:	881b      	ldrh	r3, [r3, #0]
 801672a:	1979      	adds	r1, r7, r5
 801672c:	1c5c      	adds	r4, r3, #1
 801672e:	800c      	strh	r4, [r1, #0]
 8016730:	18d3      	adds	r3, r2, r3
 8016732:	b2c2      	uxtb	r2, r0
 8016734:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	699b      	ldr	r3, [r3, #24]
 801673a:	0c18      	lsrs	r0, r3, #16
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681a      	ldr	r2, [r3, #0]
 8016740:	197b      	adds	r3, r7, r5
 8016742:	881b      	ldrh	r3, [r3, #0]
 8016744:	1979      	adds	r1, r7, r5
 8016746:	1c5c      	adds	r4, r3, #1
 8016748:	800c      	strh	r4, [r1, #0]
 801674a:	18d3      	adds	r3, r2, r3
 801674c:	b2c2      	uxtb	r2, r0
 801674e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	699b      	ldr	r3, [r3, #24]
 8016754:	0e18      	lsrs	r0, r3, #24
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	681a      	ldr	r2, [r3, #0]
 801675a:	197b      	adds	r3, r7, r5
 801675c:	881b      	ldrh	r3, [r3, #0]
 801675e:	1979      	adds	r1, r7, r5
 8016760:	1c5c      	adds	r4, r3, #1
 8016762:	800c      	strh	r4, [r1, #0]
 8016764:	18d3      	adds	r3, r2, r3
 8016766:	b2c2      	uxtb	r2, r0
 8016768:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801676a:	197b      	adds	r3, r7, r5
 801676c:	881b      	ldrh	r3, [r3, #0]
 801676e:	b2da      	uxtb	r2, r3
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016774:	2300      	movs	r3, #0
}
 8016776:	0018      	movs	r0, r3
 8016778:	46bd      	mov	sp, r7
 801677a:	b004      	add	sp, #16
 801677c:	bdb0      	pop	{r4, r5, r7, pc}

0801677e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801677e:	b5b0      	push	{r4, r5, r7, lr}
 8016780:	b084      	sub	sp, #16
 8016782:	af00      	add	r7, sp, #0
 8016784:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d003      	beq.n	8016794 <LoRaMacSerializerData+0x16>
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d101      	bne.n	8016798 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016794:	2301      	movs	r3, #1
 8016796:	e119      	b.n	80169cc <LoRaMacSerializerData+0x24e>
    }

    uint16_t bufItr = 0;
 8016798:	230e      	movs	r3, #14
 801679a:	18fb      	adds	r3, r7, r3
 801679c:	2200      	movs	r2, #0
 801679e:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80167a0:	200c      	movs	r0, #12
 80167a2:	183b      	adds	r3, r7, r0
 80167a4:	2208      	movs	r2, #8
 80167a6:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	7b1b      	ldrb	r3, [r3, #12]
 80167ac:	071b      	lsls	r3, r3, #28
 80167ae:	0f1b      	lsrs	r3, r3, #28
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	b299      	uxth	r1, r3
 80167b4:	183b      	adds	r3, r7, r0
 80167b6:	183a      	adds	r2, r7, r0
 80167b8:	8812      	ldrh	r2, [r2, #0]
 80167ba:	188a      	adds	r2, r1, r2
 80167bc:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	2228      	movs	r2, #40	; 0x28
 80167c2:	5c9b      	ldrb	r3, [r3, r2]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d004      	beq.n	80167d2 <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80167c8:	183b      	adds	r3, r7, r0
 80167ca:	183a      	adds	r2, r7, r0
 80167cc:	8812      	ldrh	r2, [r2, #0]
 80167ce:	3201      	adds	r2, #1
 80167d0:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	2228      	movs	r2, #40	; 0x28
 80167d6:	5c9b      	ldrb	r3, [r3, r2]
 80167d8:	b299      	uxth	r1, r3
 80167da:	200c      	movs	r0, #12
 80167dc:	183b      	adds	r3, r7, r0
 80167de:	183a      	adds	r2, r7, r0
 80167e0:	8812      	ldrh	r2, [r2, #0]
 80167e2:	188a      	adds	r2, r1, r2
 80167e4:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80167e6:	0001      	movs	r1, r0
 80167e8:	187b      	adds	r3, r7, r1
 80167ea:	187a      	adds	r2, r7, r1
 80167ec:	8812      	ldrh	r2, [r2, #0]
 80167ee:	3204      	adds	r2, #4
 80167f0:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	791b      	ldrb	r3, [r3, #4]
 80167f6:	b29b      	uxth	r3, r3
 80167f8:	187a      	adds	r2, r7, r1
 80167fa:	8812      	ldrh	r2, [r2, #0]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d901      	bls.n	8016804 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016800:	2302      	movs	r3, #2
 8016802:	e0e3      	b.n	80169cc <LoRaMacSerializerData+0x24e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681a      	ldr	r2, [r3, #0]
 8016808:	250e      	movs	r5, #14
 801680a:	197b      	adds	r3, r7, r5
 801680c:	881b      	ldrh	r3, [r3, #0]
 801680e:	1979      	adds	r1, r7, r5
 8016810:	1c58      	adds	r0, r3, #1
 8016812:	8008      	strh	r0, [r1, #0]
 8016814:	18d3      	adds	r3, r2, r3
 8016816:	687a      	ldr	r2, [r7, #4]
 8016818:	7952      	ldrb	r2, [r2, #5]
 801681a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6898      	ldr	r0, [r3, #8]
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681a      	ldr	r2, [r3, #0]
 8016824:	197b      	adds	r3, r7, r5
 8016826:	881b      	ldrh	r3, [r3, #0]
 8016828:	1979      	adds	r1, r7, r5
 801682a:	1c5c      	adds	r4, r3, #1
 801682c:	800c      	strh	r4, [r1, #0]
 801682e:	18d3      	adds	r3, r2, r3
 8016830:	b2c2      	uxtb	r2, r0
 8016832:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	689b      	ldr	r3, [r3, #8]
 8016838:	0a18      	lsrs	r0, r3, #8
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681a      	ldr	r2, [r3, #0]
 801683e:	197b      	adds	r3, r7, r5
 8016840:	881b      	ldrh	r3, [r3, #0]
 8016842:	1979      	adds	r1, r7, r5
 8016844:	1c5c      	adds	r4, r3, #1
 8016846:	800c      	strh	r4, [r1, #0]
 8016848:	18d3      	adds	r3, r2, r3
 801684a:	b2c2      	uxtb	r2, r0
 801684c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	689b      	ldr	r3, [r3, #8]
 8016852:	0c18      	lsrs	r0, r3, #16
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681a      	ldr	r2, [r3, #0]
 8016858:	197b      	adds	r3, r7, r5
 801685a:	881b      	ldrh	r3, [r3, #0]
 801685c:	1979      	adds	r1, r7, r5
 801685e:	1c5c      	adds	r4, r3, #1
 8016860:	800c      	strh	r4, [r1, #0]
 8016862:	18d3      	adds	r3, r2, r3
 8016864:	b2c2      	uxtb	r2, r0
 8016866:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	689b      	ldr	r3, [r3, #8]
 801686c:	0e18      	lsrs	r0, r3, #24
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681a      	ldr	r2, [r3, #0]
 8016872:	197b      	adds	r3, r7, r5
 8016874:	881b      	ldrh	r3, [r3, #0]
 8016876:	1979      	adds	r1, r7, r5
 8016878:	1c5c      	adds	r4, r3, #1
 801687a:	800c      	strh	r4, [r1, #0]
 801687c:	18d3      	adds	r3, r2, r3
 801687e:	b2c2      	uxtb	r2, r0
 8016880:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681a      	ldr	r2, [r3, #0]
 8016886:	197b      	adds	r3, r7, r5
 8016888:	881b      	ldrh	r3, [r3, #0]
 801688a:	1979      	adds	r1, r7, r5
 801688c:	1c58      	adds	r0, r3, #1
 801688e:	8008      	strh	r0, [r1, #0]
 8016890:	18d3      	adds	r3, r2, r3
 8016892:	687a      	ldr	r2, [r7, #4]
 8016894:	7b12      	ldrb	r2, [r2, #12]
 8016896:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	89d8      	ldrh	r0, [r3, #14]
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681a      	ldr	r2, [r3, #0]
 80168a0:	197b      	adds	r3, r7, r5
 80168a2:	881b      	ldrh	r3, [r3, #0]
 80168a4:	1979      	adds	r1, r7, r5
 80168a6:	1c5c      	adds	r4, r3, #1
 80168a8:	800c      	strh	r4, [r1, #0]
 80168aa:	18d3      	adds	r3, r2, r3
 80168ac:	b2c2      	uxtb	r2, r0
 80168ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	89db      	ldrh	r3, [r3, #14]
 80168b4:	0a1b      	lsrs	r3, r3, #8
 80168b6:	b298      	uxth	r0, r3
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	681a      	ldr	r2, [r3, #0]
 80168bc:	197b      	adds	r3, r7, r5
 80168be:	881b      	ldrh	r3, [r3, #0]
 80168c0:	1979      	adds	r1, r7, r5
 80168c2:	1c5c      	adds	r4, r3, #1
 80168c4:	800c      	strh	r4, [r1, #0]
 80168c6:	18d3      	adds	r3, r2, r3
 80168c8:	b2c2      	uxtb	r2, r0
 80168ca:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681a      	ldr	r2, [r3, #0]
 80168d0:	002c      	movs	r4, r5
 80168d2:	197b      	adds	r3, r7, r5
 80168d4:	881b      	ldrh	r3, [r3, #0]
 80168d6:	18d0      	adds	r0, r2, r3
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	3310      	adds	r3, #16
 80168dc:	0019      	movs	r1, r3
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	7b1b      	ldrb	r3, [r3, #12]
 80168e2:	071b      	lsls	r3, r3, #28
 80168e4:	0f1b      	lsrs	r3, r3, #28
 80168e6:	b2db      	uxtb	r3, r3
 80168e8:	b29b      	uxth	r3, r3
 80168ea:	001a      	movs	r2, r3
 80168ec:	f002 fd02 	bl	80192f4 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	7b1b      	ldrb	r3, [r3, #12]
 80168f4:	071b      	lsls	r3, r3, #28
 80168f6:	0f1b      	lsrs	r3, r3, #28
 80168f8:	b2db      	uxtb	r3, r3
 80168fa:	b299      	uxth	r1, r3
 80168fc:	193b      	adds	r3, r7, r4
 80168fe:	193a      	adds	r2, r7, r4
 8016900:	8812      	ldrh	r2, [r2, #0]
 8016902:	188a      	adds	r2, r1, r2
 8016904:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2228      	movs	r2, #40	; 0x28
 801690a:	5c9b      	ldrb	r3, [r3, r2]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d00b      	beq.n	8016928 <LoRaMacSerializerData+0x1aa>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	681a      	ldr	r2, [r3, #0]
 8016914:	193b      	adds	r3, r7, r4
 8016916:	881b      	ldrh	r3, [r3, #0]
 8016918:	1939      	adds	r1, r7, r4
 801691a:	1c58      	adds	r0, r3, #1
 801691c:	8008      	strh	r0, [r1, #0]
 801691e:	18d3      	adds	r3, r2, r3
 8016920:	687a      	ldr	r2, [r7, #4]
 8016922:	2120      	movs	r1, #32
 8016924:	5c52      	ldrb	r2, [r2, r1]
 8016926:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	681a      	ldr	r2, [r3, #0]
 801692c:	240e      	movs	r4, #14
 801692e:	193b      	adds	r3, r7, r4
 8016930:	881b      	ldrh	r3, [r3, #0]
 8016932:	18d0      	adds	r0, r2, r3
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2228      	movs	r2, #40	; 0x28
 801693c:	5c9b      	ldrb	r3, [r3, r2]
 801693e:	b29b      	uxth	r3, r3
 8016940:	001a      	movs	r2, r3
 8016942:	f002 fcd7 	bl	80192f4 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	2228      	movs	r2, #40	; 0x28
 801694a:	5c9b      	ldrb	r3, [r3, r2]
 801694c:	b299      	uxth	r1, r3
 801694e:	193b      	adds	r3, r7, r4
 8016950:	193a      	adds	r2, r7, r4
 8016952:	8812      	ldrh	r2, [r2, #0]
 8016954:	188a      	adds	r2, r1, r2
 8016956:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	681a      	ldr	r2, [r3, #0]
 8016960:	193b      	adds	r3, r7, r4
 8016962:	881b      	ldrh	r3, [r3, #0]
 8016964:	0025      	movs	r5, r4
 8016966:	1939      	adds	r1, r7, r4
 8016968:	1c5c      	adds	r4, r3, #1
 801696a:	800c      	strh	r4, [r1, #0]
 801696c:	18d3      	adds	r3, r2, r3
 801696e:	b2c2      	uxtb	r2, r0
 8016970:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016976:	0a18      	lsrs	r0, r3, #8
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	681a      	ldr	r2, [r3, #0]
 801697c:	197b      	adds	r3, r7, r5
 801697e:	881b      	ldrh	r3, [r3, #0]
 8016980:	1979      	adds	r1, r7, r5
 8016982:	1c5c      	adds	r4, r3, #1
 8016984:	800c      	strh	r4, [r1, #0]
 8016986:	18d3      	adds	r3, r2, r3
 8016988:	b2c2      	uxtb	r2, r0
 801698a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016990:	0c18      	lsrs	r0, r3, #16
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	681a      	ldr	r2, [r3, #0]
 8016996:	197b      	adds	r3, r7, r5
 8016998:	881b      	ldrh	r3, [r3, #0]
 801699a:	1979      	adds	r1, r7, r5
 801699c:	1c5c      	adds	r4, r3, #1
 801699e:	800c      	strh	r4, [r1, #0]
 80169a0:	18d3      	adds	r3, r2, r3
 80169a2:	b2c2      	uxtb	r2, r0
 80169a4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169aa:	0e18      	lsrs	r0, r3, #24
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681a      	ldr	r2, [r3, #0]
 80169b0:	197b      	adds	r3, r7, r5
 80169b2:	881b      	ldrh	r3, [r3, #0]
 80169b4:	1979      	adds	r1, r7, r5
 80169b6:	1c5c      	adds	r4, r3, #1
 80169b8:	800c      	strh	r4, [r1, #0]
 80169ba:	18d3      	adds	r3, r2, r3
 80169bc:	b2c2      	uxtb	r2, r0
 80169be:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80169c0:	197b      	adds	r3, r7, r5
 80169c2:	881b      	ldrh	r3, [r3, #0]
 80169c4:	b2da      	uxtb	r2, r3
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80169ca:	2300      	movs	r3, #0
}
 80169cc:	0018      	movs	r0, r3
 80169ce:	46bd      	mov	sp, r7
 80169d0:	b004      	add	sp, #16
 80169d2:	bdb0      	pop	{r4, r5, r7, pc}

080169d4 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
 80169da:	0002      	movs	r2, r0
 80169dc:	1dfb      	adds	r3, r7, #7
 80169de:	701a      	strb	r2, [r3, #0]
    switch( region )
 80169e0:	1dfb      	adds	r3, r7, #7
 80169e2:	781b      	ldrb	r3, [r3, #0]
 80169e4:	2b05      	cmp	r3, #5
 80169e6:	d101      	bne.n	80169ec <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80169e8:	2301      	movs	r3, #1
 80169ea:	e000      	b.n	80169ee <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80169ec:	2300      	movs	r3, #0
        }
    }
}
 80169ee:	0018      	movs	r0, r3
 80169f0:	46bd      	mov	sp, r7
 80169f2:	b002      	add	sp, #8
 80169f4:	bd80      	pop	{r7, pc}

080169f6 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80169f6:	b580      	push	{r7, lr}
 80169f8:	b084      	sub	sp, #16
 80169fa:	af00      	add	r7, sp, #0
 80169fc:	0002      	movs	r2, r0
 80169fe:	6039      	str	r1, [r7, #0]
 8016a00:	1dfb      	adds	r3, r7, #7
 8016a02:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8016a04:	2308      	movs	r3, #8
 8016a06:	18fb      	adds	r3, r7, r3
 8016a08:	2200      	movs	r2, #0
 8016a0a:	601a      	str	r2, [r3, #0]
    switch( region )
 8016a0c:	1dfb      	adds	r3, r7, #7
 8016a0e:	781b      	ldrb	r3, [r3, #0]
 8016a10:	2b05      	cmp	r3, #5
 8016a12:	d109      	bne.n	8016a28 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	0018      	movs	r0, r3
 8016a18:	f001 fa4e 	bl	8017eb8 <RegionEU868GetPhyParam>
 8016a1c:	0003      	movs	r3, r0
 8016a1e:	001a      	movs	r2, r3
 8016a20:	230c      	movs	r3, #12
 8016a22:	18fb      	adds	r3, r7, r3
 8016a24:	601a      	str	r2, [r3, #0]
 8016a26:	e005      	b.n	8016a34 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016a28:	230c      	movs	r3, #12
 8016a2a:	18fb      	adds	r3, r7, r3
 8016a2c:	2208      	movs	r2, #8
 8016a2e:	18ba      	adds	r2, r7, r2
 8016a30:	6812      	ldr	r2, [r2, #0]
 8016a32:	601a      	str	r2, [r3, #0]
 8016a34:	230c      	movs	r3, #12
 8016a36:	18fb      	adds	r3, r7, r3
 8016a38:	2200      	movs	r2, #0
 8016a3a:	681a      	ldr	r2, [r3, #0]
 8016a3c:	0013      	movs	r3, r2
        }
    }
}
 8016a3e:	0018      	movs	r0, r3
 8016a40:	46bd      	mov	sp, r7
 8016a42:	b004      	add	sp, #16
 8016a44:	bd80      	pop	{r7, pc}

08016a46 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016a46:	b580      	push	{r7, lr}
 8016a48:	b082      	sub	sp, #8
 8016a4a:	af00      	add	r7, sp, #0
 8016a4c:	0002      	movs	r2, r0
 8016a4e:	6039      	str	r1, [r7, #0]
 8016a50:	1dfb      	adds	r3, r7, #7
 8016a52:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016a54:	1dfb      	adds	r3, r7, #7
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	2b05      	cmp	r3, #5
 8016a5a:	d104      	bne.n	8016a66 <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	0018      	movs	r0, r3
 8016a60:	f001 fb4a 	bl	80180f8 <RegionEU868SetBandTxDone>
 8016a64:	e000      	b.n	8016a68 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016a66:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	b002      	add	sp, #8
 8016a6c:	bd80      	pop	{r7, pc}

08016a6e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016a6e:	b580      	push	{r7, lr}
 8016a70:	b082      	sub	sp, #8
 8016a72:	af00      	add	r7, sp, #0
 8016a74:	0002      	movs	r2, r0
 8016a76:	6039      	str	r1, [r7, #0]
 8016a78:	1dfb      	adds	r3, r7, #7
 8016a7a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016a7c:	1dfb      	adds	r3, r7, #7
 8016a7e:	781b      	ldrb	r3, [r3, #0]
 8016a80:	2b05      	cmp	r3, #5
 8016a82:	d104      	bne.n	8016a8e <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016a84:	683b      	ldr	r3, [r7, #0]
 8016a86:	0018      	movs	r0, r3
 8016a88:	f001 fb62 	bl	8018150 <RegionEU868InitDefaults>
 8016a8c:	e000      	b.n	8016a90 <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016a8e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016a90:	46c0      	nop			; (mov r8, r8)
 8016a92:	46bd      	mov	sp, r7
 8016a94:	b002      	add	sp, #8
 8016a96:	bd80      	pop	{r7, pc}

08016a98 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b082      	sub	sp, #8
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	0002      	movs	r2, r0
 8016aa0:	6039      	str	r1, [r7, #0]
 8016aa2:	1dfb      	adds	r3, r7, #7
 8016aa4:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016aa6:	1dfb      	adds	r3, r7, #7
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	2b05      	cmp	r3, #5
 8016aac:	d105      	bne.n	8016aba <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	0018      	movs	r0, r3
 8016ab2:	f001 fbe1 	bl	8018278 <RegionEU868GetNvmCtx>
 8016ab6:	0003      	movs	r3, r0
 8016ab8:	e000      	b.n	8016abc <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8016aba:	2300      	movs	r3, #0
        }
    }
}
 8016abc:	0018      	movs	r0, r3
 8016abe:	46bd      	mov	sp, r7
 8016ac0:	b002      	add	sp, #8
 8016ac2:	bd80      	pop	{r7, pc}

08016ac4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	b082      	sub	sp, #8
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6039      	str	r1, [r7, #0]
 8016acc:	0011      	movs	r1, r2
 8016ace:	1dfb      	adds	r3, r7, #7
 8016ad0:	1c02      	adds	r2, r0, #0
 8016ad2:	701a      	strb	r2, [r3, #0]
 8016ad4:	1dbb      	adds	r3, r7, #6
 8016ad6:	1c0a      	adds	r2, r1, #0
 8016ad8:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016ada:	1dfb      	adds	r3, r7, #7
 8016adc:	781b      	ldrb	r3, [r3, #0]
 8016ade:	2b05      	cmp	r3, #5
 8016ae0:	d108      	bne.n	8016af4 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016ae2:	1dbb      	adds	r3, r7, #6
 8016ae4:	781a      	ldrb	r2, [r3, #0]
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	0011      	movs	r1, r2
 8016aea:	0018      	movs	r0, r3
 8016aec:	f001 fbd4 	bl	8018298 <RegionEU868Verify>
 8016af0:	0003      	movs	r3, r0
 8016af2:	e000      	b.n	8016af6 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016af4:	2300      	movs	r3, #0
        }
    }
}
 8016af6:	0018      	movs	r0, r3
 8016af8:	46bd      	mov	sp, r7
 8016afa:	b002      	add	sp, #8
 8016afc:	bd80      	pop	{r7, pc}

08016afe <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b082      	sub	sp, #8
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	0002      	movs	r2, r0
 8016b06:	6039      	str	r1, [r7, #0]
 8016b08:	1dfb      	adds	r3, r7, #7
 8016b0a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016b0c:	1dfb      	adds	r3, r7, #7
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	2b05      	cmp	r3, #5
 8016b12:	d104      	bne.n	8016b1e <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8016b14:	683b      	ldr	r3, [r7, #0]
 8016b16:	0018      	movs	r0, r3
 8016b18:	f001 fc18 	bl	801834c <RegionEU868ApplyCFList>
 8016b1c:	e000      	b.n	8016b20 <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016b1e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016b20:	46c0      	nop			; (mov r8, r8)
 8016b22:	46bd      	mov	sp, r7
 8016b24:	b002      	add	sp, #8
 8016b26:	bd80      	pop	{r7, pc}

08016b28 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	0002      	movs	r2, r0
 8016b30:	6039      	str	r1, [r7, #0]
 8016b32:	1dfb      	adds	r3, r7, #7
 8016b34:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016b36:	1dfb      	adds	r3, r7, #7
 8016b38:	781b      	ldrb	r3, [r3, #0]
 8016b3a:	2b05      	cmp	r3, #5
 8016b3c:	d105      	bne.n	8016b4a <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	0018      	movs	r0, r3
 8016b42:	f001 fc93 	bl	801846c <RegionEU868ChanMaskSet>
 8016b46:	0003      	movs	r3, r0
 8016b48:	e000      	b.n	8016b4c <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016b4a:	2300      	movs	r3, #0
        }
    }
}
 8016b4c:	0018      	movs	r0, r3
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	b002      	add	sp, #8
 8016b52:	bd80      	pop	{r7, pc}

08016b54 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016b54:	b590      	push	{r4, r7, lr}
 8016b56:	b083      	sub	sp, #12
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	0004      	movs	r4, r0
 8016b5c:	0008      	movs	r0, r1
 8016b5e:	0011      	movs	r1, r2
 8016b60:	603b      	str	r3, [r7, #0]
 8016b62:	1dfb      	adds	r3, r7, #7
 8016b64:	1c22      	adds	r2, r4, #0
 8016b66:	701a      	strb	r2, [r3, #0]
 8016b68:	1dbb      	adds	r3, r7, #6
 8016b6a:	1c02      	adds	r2, r0, #0
 8016b6c:	701a      	strb	r2, [r3, #0]
 8016b6e:	1d7b      	adds	r3, r7, #5
 8016b70:	1c0a      	adds	r2, r1, #0
 8016b72:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016b74:	1dfb      	adds	r3, r7, #7
 8016b76:	781b      	ldrb	r3, [r3, #0]
 8016b78:	2b05      	cmp	r3, #5
 8016b7a:	d10a      	bne.n	8016b92 <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016b7c:	69bc      	ldr	r4, [r7, #24]
 8016b7e:	683a      	ldr	r2, [r7, #0]
 8016b80:	1d7b      	adds	r3, r7, #5
 8016b82:	7819      	ldrb	r1, [r3, #0]
 8016b84:	1dbb      	adds	r3, r7, #6
 8016b86:	2000      	movs	r0, #0
 8016b88:	5618      	ldrsb	r0, [r3, r0]
 8016b8a:	0023      	movs	r3, r4
 8016b8c:	f001 fc94 	bl	80184b8 <RegionEU868ComputeRxWindowParameters>
 8016b90:	e000      	b.n	8016b94 <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016b92:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016b94:	46c0      	nop			; (mov r8, r8)
 8016b96:	46bd      	mov	sp, r7
 8016b98:	b003      	add	sp, #12
 8016b9a:	bd90      	pop	{r4, r7, pc}

08016b9c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b084      	sub	sp, #16
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	60b9      	str	r1, [r7, #8]
 8016ba4:	607a      	str	r2, [r7, #4]
 8016ba6:	210f      	movs	r1, #15
 8016ba8:	187b      	adds	r3, r7, r1
 8016baa:	1c02      	adds	r2, r0, #0
 8016bac:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016bae:	187b      	adds	r3, r7, r1
 8016bb0:	781b      	ldrb	r3, [r3, #0]
 8016bb2:	2b05      	cmp	r3, #5
 8016bb4:	d107      	bne.n	8016bc6 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016bb6:	687a      	ldr	r2, [r7, #4]
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	0011      	movs	r1, r2
 8016bbc:	0018      	movs	r0, r3
 8016bbe:	f001 fcdd 	bl	801857c <RegionEU868RxConfig>
 8016bc2:	0003      	movs	r3, r0
 8016bc4:	e000      	b.n	8016bc8 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016bc6:	2300      	movs	r3, #0
        }
    }
}
 8016bc8:	0018      	movs	r0, r3
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	b004      	add	sp, #16
 8016bce:	bd80      	pop	{r7, pc}

08016bd0 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b084      	sub	sp, #16
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	60b9      	str	r1, [r7, #8]
 8016bd8:	607a      	str	r2, [r7, #4]
 8016bda:	603b      	str	r3, [r7, #0]
 8016bdc:	210f      	movs	r1, #15
 8016bde:	187b      	adds	r3, r7, r1
 8016be0:	1c02      	adds	r2, r0, #0
 8016be2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016be4:	187b      	adds	r3, r7, r1
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	2b05      	cmp	r3, #5
 8016bea:	d107      	bne.n	8016bfc <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016bec:	683a      	ldr	r2, [r7, #0]
 8016bee:	6879      	ldr	r1, [r7, #4]
 8016bf0:	68bb      	ldr	r3, [r7, #8]
 8016bf2:	0018      	movs	r0, r3
 8016bf4:	f001 fdb6 	bl	8018764 <RegionEU868TxConfig>
 8016bf8:	0003      	movs	r3, r0
 8016bfa:	e000      	b.n	8016bfe <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016bfc:	2300      	movs	r3, #0
        }
    }
}
 8016bfe:	0018      	movs	r0, r3
 8016c00:	46bd      	mov	sp, r7
 8016c02:	b004      	add	sp, #16
 8016c04:	bd80      	pop	{r7, pc}

08016c06 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016c06:	b590      	push	{r4, r7, lr}
 8016c08:	b087      	sub	sp, #28
 8016c0a:	af02      	add	r7, sp, #8
 8016c0c:	60b9      	str	r1, [r7, #8]
 8016c0e:	607a      	str	r2, [r7, #4]
 8016c10:	603b      	str	r3, [r7, #0]
 8016c12:	210f      	movs	r1, #15
 8016c14:	187b      	adds	r3, r7, r1
 8016c16:	1c02      	adds	r2, r0, #0
 8016c18:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c1a:	187b      	adds	r3, r7, r1
 8016c1c:	781b      	ldrb	r3, [r3, #0]
 8016c1e:	2b05      	cmp	r3, #5
 8016c20:	d10a      	bne.n	8016c38 <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016c22:	6a3c      	ldr	r4, [r7, #32]
 8016c24:	683a      	ldr	r2, [r7, #0]
 8016c26:	6879      	ldr	r1, [r7, #4]
 8016c28:	68b8      	ldr	r0, [r7, #8]
 8016c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c2c:	9300      	str	r3, [sp, #0]
 8016c2e:	0023      	movs	r3, r4
 8016c30:	f001 fe84 	bl	801893c <RegionEU868LinkAdrReq>
 8016c34:	0003      	movs	r3, r0
 8016c36:	e000      	b.n	8016c3a <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016c38:	2300      	movs	r3, #0
        }
    }
}
 8016c3a:	0018      	movs	r0, r3
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	b005      	add	sp, #20
 8016c40:	bd90      	pop	{r4, r7, pc}

08016c42 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016c42:	b580      	push	{r7, lr}
 8016c44:	b082      	sub	sp, #8
 8016c46:	af00      	add	r7, sp, #0
 8016c48:	0002      	movs	r2, r0
 8016c4a:	6039      	str	r1, [r7, #0]
 8016c4c:	1dfb      	adds	r3, r7, #7
 8016c4e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c50:	1dfb      	adds	r3, r7, #7
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	2b05      	cmp	r3, #5
 8016c56:	d105      	bne.n	8016c64 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	0018      	movs	r0, r3
 8016c5c:	f001 ffc6 	bl	8018bec <RegionEU868RxParamSetupReq>
 8016c60:	0003      	movs	r3, r0
 8016c62:	e000      	b.n	8016c66 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016c64:	2300      	movs	r3, #0
        }
    }
}
 8016c66:	0018      	movs	r0, r3
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	b002      	add	sp, #8
 8016c6c:	bd80      	pop	{r7, pc}

08016c6e <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016c6e:	b580      	push	{r7, lr}
 8016c70:	b082      	sub	sp, #8
 8016c72:	af00      	add	r7, sp, #0
 8016c74:	0002      	movs	r2, r0
 8016c76:	6039      	str	r1, [r7, #0]
 8016c78:	1dfb      	adds	r3, r7, #7
 8016c7a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c7c:	1dfb      	adds	r3, r7, #7
 8016c7e:	781b      	ldrb	r3, [r3, #0]
 8016c80:	2b05      	cmp	r3, #5
 8016c82:	d105      	bne.n	8016c90 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	0018      	movs	r0, r3
 8016c88:	f001 fff9 	bl	8018c7e <RegionEU868NewChannelReq>
 8016c8c:	0003      	movs	r3, r0
 8016c8e:	e000      	b.n	8016c92 <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016c90:	2300      	movs	r3, #0
        }
    }
}
 8016c92:	0018      	movs	r0, r3
 8016c94:	46bd      	mov	sp, r7
 8016c96:	b002      	add	sp, #8
 8016c98:	bd80      	pop	{r7, pc}

08016c9a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016c9a:	b580      	push	{r7, lr}
 8016c9c:	b082      	sub	sp, #8
 8016c9e:	af00      	add	r7, sp, #0
 8016ca0:	0002      	movs	r2, r0
 8016ca2:	6039      	str	r1, [r7, #0]
 8016ca4:	1dfb      	adds	r3, r7, #7
 8016ca6:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016ca8:	1dfb      	adds	r3, r7, #7
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	2b05      	cmp	r3, #5
 8016cae:	d105      	bne.n	8016cbc <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8016cb0:	683b      	ldr	r3, [r7, #0]
 8016cb2:	0018      	movs	r0, r3
 8016cb4:	f002 f84b 	bl	8018d4e <RegionEU868TxParamSetupReq>
 8016cb8:	0003      	movs	r3, r0
 8016cba:	e000      	b.n	8016cbe <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016cbc:	2300      	movs	r3, #0
        }
    }
}
 8016cbe:	0018      	movs	r0, r3
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	b002      	add	sp, #8
 8016cc4:	bd80      	pop	{r7, pc}

08016cc6 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016cc6:	b580      	push	{r7, lr}
 8016cc8:	b082      	sub	sp, #8
 8016cca:	af00      	add	r7, sp, #0
 8016ccc:	0002      	movs	r2, r0
 8016cce:	6039      	str	r1, [r7, #0]
 8016cd0:	1dfb      	adds	r3, r7, #7
 8016cd2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016cd4:	1dfb      	adds	r3, r7, #7
 8016cd6:	781b      	ldrb	r3, [r3, #0]
 8016cd8:	2b05      	cmp	r3, #5
 8016cda:	d105      	bne.n	8016ce8 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	0018      	movs	r0, r3
 8016ce0:	f002 f840 	bl	8018d64 <RegionEU868DlChannelReq>
 8016ce4:	0003      	movs	r3, r0
 8016ce6:	e000      	b.n	8016cea <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016ce8:	2300      	movs	r3, #0
        }
    }
}
 8016cea:	0018      	movs	r0, r3
 8016cec:	46bd      	mov	sp, r7
 8016cee:	b002      	add	sp, #8
 8016cf0:	bd80      	pop	{r7, pc}

08016cf2 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016cf2:	b590      	push	{r4, r7, lr}
 8016cf4:	b083      	sub	sp, #12
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	0004      	movs	r4, r0
 8016cfa:	0008      	movs	r0, r1
 8016cfc:	0011      	movs	r1, r2
 8016cfe:	1dfb      	adds	r3, r7, #7
 8016d00:	1c22      	adds	r2, r4, #0
 8016d02:	701a      	strb	r2, [r3, #0]
 8016d04:	1dbb      	adds	r3, r7, #6
 8016d06:	1c02      	adds	r2, r0, #0
 8016d08:	701a      	strb	r2, [r3, #0]
 8016d0a:	1d7b      	adds	r3, r7, #5
 8016d0c:	1c0a      	adds	r2, r1, #0
 8016d0e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d10:	1dfb      	adds	r3, r7, #7
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	2b05      	cmp	r3, #5
 8016d16:	d10a      	bne.n	8016d2e <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016d18:	1d7b      	adds	r3, r7, #5
 8016d1a:	781a      	ldrb	r2, [r3, #0]
 8016d1c:	1dbb      	adds	r3, r7, #6
 8016d1e:	781b      	ldrb	r3, [r3, #0]
 8016d20:	b25b      	sxtb	r3, r3
 8016d22:	0011      	movs	r1, r2
 8016d24:	0018      	movs	r0, r3
 8016d26:	f002 f86b 	bl	8018e00 <RegionEU868AlternateDr>
 8016d2a:	0003      	movs	r3, r0
 8016d2c:	e000      	b.n	8016d30 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016d2e:	2300      	movs	r3, #0
        }
    }
}
 8016d30:	0018      	movs	r0, r3
 8016d32:	46bd      	mov	sp, r7
 8016d34:	b003      	add	sp, #12
 8016d36:	bd90      	pop	{r4, r7, pc}

08016d38 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b084      	sub	sp, #16
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	60b9      	str	r1, [r7, #8]
 8016d40:	607a      	str	r2, [r7, #4]
 8016d42:	603b      	str	r3, [r7, #0]
 8016d44:	210f      	movs	r1, #15
 8016d46:	187b      	adds	r3, r7, r1
 8016d48:	1c02      	adds	r2, r0, #0
 8016d4a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d4c:	187b      	adds	r3, r7, r1
 8016d4e:	781b      	ldrb	r3, [r3, #0]
 8016d50:	2b05      	cmp	r3, #5
 8016d52:	d107      	bne.n	8016d64 <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016d54:	69bb      	ldr	r3, [r7, #24]
 8016d56:	683a      	ldr	r2, [r7, #0]
 8016d58:	6879      	ldr	r1, [r7, #4]
 8016d5a:	68b8      	ldr	r0, [r7, #8]
 8016d5c:	f002 f860 	bl	8018e20 <RegionEU868NextChannel>
 8016d60:	0003      	movs	r3, r0
 8016d62:	e000      	b.n	8016d66 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016d64:	2309      	movs	r3, #9
        }
    }
}
 8016d66:	0018      	movs	r0, r3
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	b004      	add	sp, #16
 8016d6c:	bd80      	pop	{r7, pc}

08016d6e <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8016d6e:	b580      	push	{r7, lr}
 8016d70:	b082      	sub	sp, #8
 8016d72:	af00      	add	r7, sp, #0
 8016d74:	0002      	movs	r2, r0
 8016d76:	6039      	str	r1, [r7, #0]
 8016d78:	1dfb      	adds	r3, r7, #7
 8016d7a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d7c:	1dfb      	adds	r3, r7, #7
 8016d7e:	781b      	ldrb	r3, [r3, #0]
 8016d80:	2b05      	cmp	r3, #5
 8016d82:	d104      	bne.n	8016d8e <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8016d84:	683b      	ldr	r3, [r7, #0]
 8016d86:	0018      	movs	r0, r3
 8016d88:	f002 f9f4 	bl	8019174 <RegionEU868SetContinuousWave>
 8016d8c:	e000      	b.n	8016d90 <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8016d8e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016d90:	46c0      	nop			; (mov r8, r8)
 8016d92:	46bd      	mov	sp, r7
 8016d94:	b002      	add	sp, #8
 8016d96:	bd80      	pop	{r7, pc}

08016d98 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016d98:	b5b0      	push	{r4, r5, r7, lr}
 8016d9a:	b082      	sub	sp, #8
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	0005      	movs	r5, r0
 8016da0:	000c      	movs	r4, r1
 8016da2:	0010      	movs	r0, r2
 8016da4:	0019      	movs	r1, r3
 8016da6:	1dfb      	adds	r3, r7, #7
 8016da8:	1c2a      	adds	r2, r5, #0
 8016daa:	701a      	strb	r2, [r3, #0]
 8016dac:	1dbb      	adds	r3, r7, #6
 8016dae:	1c22      	adds	r2, r4, #0
 8016db0:	701a      	strb	r2, [r3, #0]
 8016db2:	1d7b      	adds	r3, r7, #5
 8016db4:	1c02      	adds	r2, r0, #0
 8016db6:	701a      	strb	r2, [r3, #0]
 8016db8:	1d3b      	adds	r3, r7, #4
 8016dba:	1c0a      	adds	r2, r1, #0
 8016dbc:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016dbe:	1dfb      	adds	r3, r7, #7
 8016dc0:	781b      	ldrb	r3, [r3, #0]
 8016dc2:	2b05      	cmp	r3, #5
 8016dc4:	d10c      	bne.n	8016de0 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016dc6:	1d3b      	adds	r3, r7, #4
 8016dc8:	2200      	movs	r2, #0
 8016dca:	569a      	ldrsb	r2, [r3, r2]
 8016dcc:	1d7b      	adds	r3, r7, #5
 8016dce:	2100      	movs	r1, #0
 8016dd0:	5659      	ldrsb	r1, [r3, r1]
 8016dd2:	1dbb      	adds	r3, r7, #6
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	0018      	movs	r0, r3
 8016dd8:	f002 fa24 	bl	8019224 <RegionEU868ApplyDrOffset>
 8016ddc:	0003      	movs	r3, r0
 8016dde:	e001      	b.n	8016de4 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8016de0:	1d7b      	adds	r3, r7, #5
 8016de2:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8016de4:	0018      	movs	r0, r3
 8016de6:	46bd      	mov	sp, r7
 8016de8:	b002      	add	sp, #8
 8016dea:	bdb0      	pop	{r4, r5, r7, pc}

08016dec <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b082      	sub	sp, #8
 8016df0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8016df2:	4b03      	ldr	r3, [pc, #12]	; (8016e00 <RegionGetVersion+0x14>)
 8016df4:	607b      	str	r3, [r7, #4]

    return version;
 8016df6:	687b      	ldr	r3, [r7, #4]
}
 8016df8:	0018      	movs	r0, r3
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	b002      	add	sp, #8
 8016dfe:	bd80      	pop	{r7, pc}
 8016e00:	01000300 	.word	0x01000300

08016e04 <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e06:	b087      	sub	sp, #28
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	0008      	movs	r0, r1
 8016e0e:	0039      	movs	r1, r7
 8016e10:	600a      	str	r2, [r1, #0]
 8016e12:	604b      	str	r3, [r1, #4]
 8016e14:	230b      	movs	r3, #11
 8016e16:	18fb      	adds	r3, r7, r3
 8016e18:	1c02      	adds	r2, r0, #0
 8016e1a:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8016e1c:	2514      	movs	r5, #20
 8016e1e:	197c      	adds	r4, r7, r5
 8016e20:	003b      	movs	r3, r7
 8016e22:	6818      	ldr	r0, [r3, #0]
 8016e24:	6859      	ldr	r1, [r3, #4]
 8016e26:	f000 f91b 	bl	8017060 <RegionCommonGetJoinDc>
 8016e2a:	0003      	movs	r3, r0
 8016e2c:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 8016e2e:	2616      	movs	r6, #22
 8016e30:	19bb      	adds	r3, r7, r6
 8016e32:	68fa      	ldr	r2, [r7, #12]
 8016e34:	8812      	ldrh	r2, [r2, #0]
 8016e36:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 8016e38:	230b      	movs	r3, #11
 8016e3a:	18fb      	adds	r3, r7, r3
 8016e3c:	781b      	ldrb	r3, [r3, #0]
 8016e3e:	2201      	movs	r2, #1
 8016e40:	4053      	eors	r3, r2
 8016e42:	b2db      	uxtb	r3, r3
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d012      	beq.n	8016e6e <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8016e48:	197c      	adds	r4, r7, r5
 8016e4a:	003b      	movs	r3, r7
 8016e4c:	6818      	ldr	r0, [r3, #0]
 8016e4e:	6859      	ldr	r1, [r3, #4]
 8016e50:	f000 f906 	bl	8017060 <RegionCommonGetJoinDc>
 8016e54:	0003      	movs	r3, r0
 8016e56:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016e58:	19ba      	adds	r2, r7, r6
 8016e5a:	197b      	adds	r3, r7, r5
 8016e5c:	19b9      	adds	r1, r7, r6
 8016e5e:	880c      	ldrh	r4, [r1, #0]
 8016e60:	881b      	ldrh	r3, [r3, #0]
 8016e62:	b298      	uxth	r0, r3
 8016e64:	b2a1      	uxth	r1, r4
 8016e66:	4288      	cmp	r0, r1
 8016e68:	d200      	bcs.n	8016e6c <GetDutyCycle+0x68>
 8016e6a:	1c23      	adds	r3, r4, #0
 8016e6c:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016e6e:	2216      	movs	r2, #22
 8016e70:	18bb      	adds	r3, r7, r2
 8016e72:	881b      	ldrh	r3, [r3, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d102      	bne.n	8016e7e <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 8016e78:	18bb      	adds	r3, r7, r2
 8016e7a:	2201      	movs	r2, #1
 8016e7c:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 8016e7e:	2316      	movs	r3, #22
 8016e80:	18fb      	adds	r3, r7, r3
 8016e82:	881b      	ldrh	r3, [r3, #0]
}
 8016e84:	0018      	movs	r0, r3
 8016e86:	46bd      	mov	sp, r7
 8016e88:	b007      	add	sp, #28
 8016e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016e8c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e8e:	b087      	sub	sp, #28
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	60f8      	str	r0, [r7, #12]
 8016e94:	0008      	movs	r0, r1
 8016e96:	0039      	movs	r1, r7
 8016e98:	600a      	str	r2, [r1, #0]
 8016e9a:	604b      	str	r3, [r1, #4]
 8016e9c:	210b      	movs	r1, #11
 8016e9e:	187b      	adds	r3, r7, r1
 8016ea0:	1c02      	adds	r2, r0, #0
 8016ea2:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 8016ea4:	2614      	movs	r6, #20
 8016ea6:	19bb      	adds	r3, r7, r6
 8016ea8:	68fa      	ldr	r2, [r7, #12]
 8016eaa:	8812      	ldrh	r2, [r2, #0]
 8016eac:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 8016eae:	2317      	movs	r3, #23
 8016eb0:	18fb      	adds	r3, r7, r3
 8016eb2:	2201      	movs	r2, #1
 8016eb4:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016eb6:	19bc      	adds	r4, r7, r6
 8016eb8:	003b      	movs	r3, r7
 8016eba:	000d      	movs	r5, r1
 8016ebc:	187a      	adds	r2, r7, r1
 8016ebe:	7811      	ldrb	r1, [r2, #0]
 8016ec0:	68f8      	ldr	r0, [r7, #12]
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	685b      	ldr	r3, [r3, #4]
 8016ec6:	f7ff ff9d 	bl	8016e04 <GetDutyCycle>
 8016eca:	0003      	movs	r3, r0
 8016ecc:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8016ece:	197b      	adds	r3, r7, r5
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	2201      	movs	r2, #1
 8016ed4:	4053      	eors	r3, r2
 8016ed6:	b2db      	uxtb	r3, r3
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d00a      	beq.n	8016ef2 <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 8016edc:	19bb      	adds	r3, r7, r6
 8016ede:	881b      	ldrh	r3, [r3, #0]
 8016ee0:	2164      	movs	r1, #100	; 0x64
 8016ee2:	0018      	movs	r0, r3
 8016ee4:	f7e9 f918 	bl	8000118 <__udivsi3>
 8016ee8:	0003      	movs	r3, r0
 8016eea:	b29a      	uxth	r2, r3
 8016eec:	2317      	movs	r3, #23
 8016eee:	18fb      	adds	r3, r7, r3
 8016ef0:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 8016ef2:	2317      	movs	r3, #23
 8016ef4:	18fb      	adds	r3, r7, r3
 8016ef6:	781b      	ldrb	r3, [r3, #0]
 8016ef8:	4a09      	ldr	r2, [pc, #36]	; (8016f20 <SetMaxTimeCredits+0x94>)
 8016efa:	4353      	muls	r3, r2
 8016efc:	001a      	movs	r2, r3
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	685b      	ldr	r3, [r3, #4]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d103      	bne.n	8016f12 <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	68da      	ldr	r2, [r3, #12]
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 8016f12:	2314      	movs	r3, #20
 8016f14:	18fb      	adds	r3, r7, r3
 8016f16:	881b      	ldrh	r3, [r3, #0]
}
 8016f18:	0018      	movs	r0, r3
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	b007      	add	sp, #28
 8016f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f20:	0036ee80 	.word	0x0036ee80

08016f24 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016f24:	b590      	push	{r4, r7, lr}
 8016f26:	b085      	sub	sp, #20
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
 8016f2c:	000c      	movs	r4, r1
 8016f2e:	0010      	movs	r0, r2
 8016f30:	0019      	movs	r1, r3
 8016f32:	1cfb      	adds	r3, r7, #3
 8016f34:	1c22      	adds	r2, r4, #0
 8016f36:	701a      	strb	r2, [r3, #0]
 8016f38:	1cbb      	adds	r3, r7, #2
 8016f3a:	1c02      	adds	r2, r0, #0
 8016f3c:	701a      	strb	r2, [r3, #0]
 8016f3e:	1c7b      	adds	r3, r7, #1
 8016f40:	1c0a      	adds	r2, r1, #0
 8016f42:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 8016f44:	230e      	movs	r3, #14
 8016f46:	18fc      	adds	r4, r7, r3
 8016f48:	2320      	movs	r3, #32
 8016f4a:	18fb      	adds	r3, r7, r3
 8016f4c:	1cfa      	adds	r2, r7, #3
 8016f4e:	7811      	ldrb	r1, [r2, #0]
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	681a      	ldr	r2, [r3, #0]
 8016f54:	685b      	ldr	r3, [r3, #4]
 8016f56:	f7ff ff99 	bl	8016e8c <SetMaxTimeCredits>
 8016f5a:	0003      	movs	r3, r0
 8016f5c:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8016f5e:	1cfb      	adds	r3, r7, #3
 8016f60:	781b      	ldrb	r3, [r3, #0]
 8016f62:	2201      	movs	r2, #1
 8016f64:	4053      	eors	r3, r2
 8016f66:	b2db      	uxtb	r3, r3
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d012      	beq.n	8016f92 <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 8016f6c:	1cbb      	adds	r3, r7, #2
 8016f6e:	781b      	ldrb	r3, [r3, #0]
 8016f70:	2201      	movs	r2, #1
 8016f72:	4053      	eors	r3, r2
 8016f74:	b2db      	uxtb	r3, r3
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d016      	beq.n	8016fa8 <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 8016f7a:	1c7b      	adds	r3, r7, #1
 8016f7c:	781b      	ldrb	r3, [r3, #0]
 8016f7e:	2201      	movs	r2, #1
 8016f80:	4053      	eors	r3, r2
 8016f82:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d00f      	beq.n	8016fa8 <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	68da      	ldr	r2, [r3, #12]
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	609a      	str	r2, [r3, #8]
 8016f90:	e00a      	b.n	8016fa8 <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016f92:	1cbb      	adds	r3, r7, #2
 8016f94:	781b      	ldrb	r3, [r3, #0]
 8016f96:	2201      	movs	r2, #1
 8016f98:	4053      	eors	r3, r2
 8016f9a:	b2db      	uxtb	r3, r3
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d003      	beq.n	8016fa8 <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	68da      	ldr	r2, [r3, #12]
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	685b      	ldr	r3, [r3, #4]
 8016fac:	0018      	movs	r0, r3
 8016fae:	f005 fe9d 	bl	801ccec <UTIL_TIMER_GetElapsedTime>
 8016fb2:	0002      	movs	r2, r0
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	689b      	ldr	r3, [r3, #8]
 8016fb8:	18d2      	adds	r2, r2, r3
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	689a      	ldr	r2, [r3, #8]
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	68db      	ldr	r3, [r3, #12]
 8016fc6:	429a      	cmp	r2, r3
 8016fc8:	d903      	bls.n	8016fd2 <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	68da      	ldr	r2, [r3, #12]
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016fd6:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8016fd8:	230e      	movs	r3, #14
 8016fda:	18fb      	adds	r3, r7, r3
 8016fdc:	881b      	ldrh	r3, [r3, #0]
}
 8016fde:	0018      	movs	r0, r3
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	b005      	add	sp, #20
 8016fe4:	bd90      	pop	{r4, r7, pc}

08016fe6 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016fe6:	b580      	push	{r7, lr}
 8016fe8:	b084      	sub	sp, #16
 8016fea:	af00      	add	r7, sp, #0
 8016fec:	0002      	movs	r2, r0
 8016fee:	1dbb      	adds	r3, r7, #6
 8016ff0:	801a      	strh	r2, [r3, #0]
 8016ff2:	1d7b      	adds	r3, r7, #5
 8016ff4:	1c0a      	adds	r2, r1, #0
 8016ff6:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8016ff8:	230f      	movs	r3, #15
 8016ffa:	18fb      	adds	r3, r7, r3
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017000:	230e      	movs	r3, #14
 8017002:	18fb      	adds	r3, r7, r3
 8017004:	2200      	movs	r2, #0
 8017006:	701a      	strb	r2, [r3, #0]
 8017008:	e01b      	b.n	8017042 <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801700a:	1dbb      	adds	r3, r7, #6
 801700c:	881b      	ldrh	r3, [r3, #0]
 801700e:	200e      	movs	r0, #14
 8017010:	183a      	adds	r2, r7, r0
 8017012:	7812      	ldrb	r2, [r2, #0]
 8017014:	2101      	movs	r1, #1
 8017016:	4091      	lsls	r1, r2
 8017018:	000a      	movs	r2, r1
 801701a:	401a      	ands	r2, r3
 801701c:	183b      	adds	r3, r7, r0
 801701e:	781b      	ldrb	r3, [r3, #0]
 8017020:	2101      	movs	r1, #1
 8017022:	4099      	lsls	r1, r3
 8017024:	000b      	movs	r3, r1
 8017026:	429a      	cmp	r2, r3
 8017028:	d105      	bne.n	8017036 <CountChannels+0x50>
        {
            nbActiveBits++;
 801702a:	210f      	movs	r1, #15
 801702c:	187b      	adds	r3, r7, r1
 801702e:	781a      	ldrb	r2, [r3, #0]
 8017030:	187b      	adds	r3, r7, r1
 8017032:	3201      	adds	r2, #1
 8017034:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017036:	210e      	movs	r1, #14
 8017038:	187b      	adds	r3, r7, r1
 801703a:	781a      	ldrb	r2, [r3, #0]
 801703c:	187b      	adds	r3, r7, r1
 801703e:	3201      	adds	r2, #1
 8017040:	701a      	strb	r2, [r3, #0]
 8017042:	230e      	movs	r3, #14
 8017044:	18fa      	adds	r2, r7, r3
 8017046:	1d7b      	adds	r3, r7, #5
 8017048:	7812      	ldrb	r2, [r2, #0]
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	429a      	cmp	r2, r3
 801704e:	d3dc      	bcc.n	801700a <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8017050:	230f      	movs	r3, #15
 8017052:	18fb      	adds	r3, r7, r3
 8017054:	781b      	ldrb	r3, [r3, #0]
}
 8017056:	0018      	movs	r0, r3
 8017058:	46bd      	mov	sp, r7
 801705a:	b004      	add	sp, #16
 801705c:	bd80      	pop	{r7, pc}
	...

08017060 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b084      	sub	sp, #16
 8017064:	af00      	add	r7, sp, #0
 8017066:	003b      	movs	r3, r7
 8017068:	6018      	str	r0, [r3, #0]
 801706a:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 801706c:	210e      	movs	r1, #14
 801706e:	187b      	adds	r3, r7, r1
 8017070:	2200      	movs	r2, #0
 8017072:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 8017074:	003b      	movs	r3, r7
 8017076:	681a      	ldr	r2, [r3, #0]
 8017078:	23e1      	movs	r3, #225	; 0xe1
 801707a:	011b      	lsls	r3, r3, #4
 801707c:	429a      	cmp	r2, r3
 801707e:	d203      	bcs.n	8017088 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8017080:	187b      	adds	r3, r7, r1
 8017082:	2264      	movs	r2, #100	; 0x64
 8017084:	801a      	strh	r2, [r3, #0]
 8017086:	e00e      	b.n	80170a6 <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 8017088:	003b      	movs	r3, r7
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	4a09      	ldr	r2, [pc, #36]	; (80170b4 <RegionCommonGetJoinDc+0x54>)
 801708e:	4293      	cmp	r3, r2
 8017090:	d805      	bhi.n	801709e <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8017092:	230e      	movs	r3, #14
 8017094:	18fb      	adds	r3, r7, r3
 8017096:	22fa      	movs	r2, #250	; 0xfa
 8017098:	0092      	lsls	r2, r2, #2
 801709a:	801a      	strh	r2, [r3, #0]
 801709c:	e003      	b.n	80170a6 <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 801709e:	230e      	movs	r3, #14
 80170a0:	18fb      	adds	r3, r7, r3
 80170a2:	4a05      	ldr	r2, [pc, #20]	; (80170b8 <RegionCommonGetJoinDc+0x58>)
 80170a4:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 80170a6:	230e      	movs	r3, #14
 80170a8:	18fb      	adds	r3, r7, r3
 80170aa:	881b      	ldrh	r3, [r3, #0]
}
 80170ac:	0018      	movs	r0, r3
 80170ae:	46bd      	mov	sp, r7
 80170b0:	b004      	add	sp, #16
 80170b2:	bd80      	pop	{r7, pc}
 80170b4:	00009aaf 	.word	0x00009aaf
 80170b8:	00002710 	.word	0x00002710

080170bc <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80170bc:	b590      	push	{r4, r7, lr}
 80170be:	b085      	sub	sp, #20
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	0004      	movs	r4, r0
 80170c4:	6039      	str	r1, [r7, #0]
 80170c6:	0010      	movs	r0, r2
 80170c8:	0019      	movs	r1, r3
 80170ca:	1dfb      	adds	r3, r7, #7
 80170cc:	1c22      	adds	r2, r4, #0
 80170ce:	701a      	strb	r2, [r3, #0]
 80170d0:	1dbb      	adds	r3, r7, #6
 80170d2:	1c02      	adds	r2, r0, #0
 80170d4:	701a      	strb	r2, [r3, #0]
 80170d6:	1d7b      	adds	r3, r7, #5
 80170d8:	1c0a      	adds	r2, r1, #0
 80170da:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80170dc:	2320      	movs	r3, #32
 80170de:	18fb      	adds	r3, r7, r3
 80170e0:	2200      	movs	r2, #0
 80170e2:	569a      	ldrsb	r2, [r3, r2]
 80170e4:	1d7b      	adds	r3, r7, #5
 80170e6:	2100      	movs	r1, #0
 80170e8:	5659      	ldrsb	r1, [r3, r1]
 80170ea:	1dbb      	adds	r3, r7, #6
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	b25b      	sxtb	r3, r3
 80170f0:	0018      	movs	r0, r3
 80170f2:	f000 f87c 	bl	80171ee <RegionCommonValueInRange>
 80170f6:	1e03      	subs	r3, r0, #0
 80170f8:	d101      	bne.n	80170fe <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 80170fa:	2300      	movs	r3, #0
 80170fc:	e073      	b.n	80171e6 <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80170fe:	230f      	movs	r3, #15
 8017100:	18fb      	adds	r3, r7, r3
 8017102:	2200      	movs	r2, #0
 8017104:	701a      	strb	r2, [r3, #0]
 8017106:	230e      	movs	r3, #14
 8017108:	18fb      	adds	r3, r7, r3
 801710a:	2200      	movs	r2, #0
 801710c:	701a      	strb	r2, [r3, #0]
 801710e:	e062      	b.n	80171d6 <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017110:	230d      	movs	r3, #13
 8017112:	18fb      	adds	r3, r7, r3
 8017114:	2200      	movs	r2, #0
 8017116:	701a      	strb	r2, [r3, #0]
 8017118:	e04c      	b.n	80171b4 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801711a:	230e      	movs	r3, #14
 801711c:	18fb      	adds	r3, r7, r3
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	005b      	lsls	r3, r3, #1
 8017122:	683a      	ldr	r2, [r7, #0]
 8017124:	18d3      	adds	r3, r2, r3
 8017126:	881b      	ldrh	r3, [r3, #0]
 8017128:	001a      	movs	r2, r3
 801712a:	200d      	movs	r0, #13
 801712c:	183b      	adds	r3, r7, r0
 801712e:	781b      	ldrb	r3, [r3, #0]
 8017130:	411a      	asrs	r2, r3
 8017132:	0013      	movs	r3, r2
 8017134:	2201      	movs	r2, #1
 8017136:	4013      	ands	r3, r2
 8017138:	d036      	beq.n	80171a8 <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801713a:	240f      	movs	r4, #15
 801713c:	193b      	adds	r3, r7, r4
 801713e:	781a      	ldrb	r2, [r3, #0]
 8017140:	183b      	adds	r3, r7, r0
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	18d3      	adds	r3, r2, r3
 8017146:	001a      	movs	r2, r3
 8017148:	0013      	movs	r3, r2
 801714a:	005b      	lsls	r3, r3, #1
 801714c:	189b      	adds	r3, r3, r2
 801714e:	009b      	lsls	r3, r3, #2
 8017150:	001a      	movs	r2, r3
 8017152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017154:	189b      	adds	r3, r3, r2
 8017156:	7a1b      	ldrb	r3, [r3, #8]
 8017158:	011b      	lsls	r3, r3, #4
 801715a:	b25b      	sxtb	r3, r3
 801715c:	111b      	asrs	r3, r3, #4
 801715e:	b25b      	sxtb	r3, r3
 8017160:	001a      	movs	r2, r3
 8017162:	230f      	movs	r3, #15
 8017164:	4013      	ands	r3, r2
 8017166:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017168:	193b      	adds	r3, r7, r4
 801716a:	781a      	ldrb	r2, [r3, #0]
 801716c:	183b      	adds	r3, r7, r0
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	18d3      	adds	r3, r2, r3
 8017172:	001a      	movs	r2, r3
 8017174:	0013      	movs	r3, r2
 8017176:	005b      	lsls	r3, r3, #1
 8017178:	189b      	adds	r3, r3, r2
 801717a:	009b      	lsls	r3, r3, #2
 801717c:	001a      	movs	r2, r3
 801717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017180:	189b      	adds	r3, r3, r2
 8017182:	7a1b      	ldrb	r3, [r3, #8]
 8017184:	b25b      	sxtb	r3, r3
 8017186:	111b      	asrs	r3, r3, #4
 8017188:	b25b      	sxtb	r3, r3
 801718a:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801718c:	230f      	movs	r3, #15
 801718e:	4013      	ands	r3, r2
 8017190:	b25a      	sxtb	r2, r3
 8017192:	1dbb      	adds	r3, r7, #6
 8017194:	781b      	ldrb	r3, [r3, #0]
 8017196:	b25b      	sxtb	r3, r3
 8017198:	0018      	movs	r0, r3
 801719a:	f000 f828 	bl	80171ee <RegionCommonValueInRange>
 801719e:	0003      	movs	r3, r0
 80171a0:	2b01      	cmp	r3, #1
 80171a2:	d101      	bne.n	80171a8 <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80171a4:	2301      	movs	r3, #1
 80171a6:	e01e      	b.n	80171e6 <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 80171a8:	210d      	movs	r1, #13
 80171aa:	187b      	adds	r3, r7, r1
 80171ac:	781a      	ldrb	r2, [r3, #0]
 80171ae:	187b      	adds	r3, r7, r1
 80171b0:	3201      	adds	r2, #1
 80171b2:	701a      	strb	r2, [r3, #0]
 80171b4:	230d      	movs	r3, #13
 80171b6:	18fb      	adds	r3, r7, r3
 80171b8:	781b      	ldrb	r3, [r3, #0]
 80171ba:	2b0f      	cmp	r3, #15
 80171bc:	d9ad      	bls.n	801711a <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80171be:	220f      	movs	r2, #15
 80171c0:	18bb      	adds	r3, r7, r2
 80171c2:	18ba      	adds	r2, r7, r2
 80171c4:	7812      	ldrb	r2, [r2, #0]
 80171c6:	3210      	adds	r2, #16
 80171c8:	701a      	strb	r2, [r3, #0]
 80171ca:	210e      	movs	r1, #14
 80171cc:	187b      	adds	r3, r7, r1
 80171ce:	781a      	ldrb	r2, [r3, #0]
 80171d0:	187b      	adds	r3, r7, r1
 80171d2:	3201      	adds	r2, #1
 80171d4:	701a      	strb	r2, [r3, #0]
 80171d6:	230f      	movs	r3, #15
 80171d8:	18fa      	adds	r2, r7, r3
 80171da:	1dfb      	adds	r3, r7, #7
 80171dc:	7812      	ldrb	r2, [r2, #0]
 80171de:	781b      	ldrb	r3, [r3, #0]
 80171e0:	429a      	cmp	r2, r3
 80171e2:	d395      	bcc.n	8017110 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 80171e4:	2300      	movs	r3, #0
}
 80171e6:	0018      	movs	r0, r3
 80171e8:	46bd      	mov	sp, r7
 80171ea:	b005      	add	sp, #20
 80171ec:	bd90      	pop	{r4, r7, pc}

080171ee <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80171ee:	b590      	push	{r4, r7, lr}
 80171f0:	b083      	sub	sp, #12
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	0004      	movs	r4, r0
 80171f6:	0008      	movs	r0, r1
 80171f8:	0011      	movs	r1, r2
 80171fa:	1dfb      	adds	r3, r7, #7
 80171fc:	1c22      	adds	r2, r4, #0
 80171fe:	701a      	strb	r2, [r3, #0]
 8017200:	1dbb      	adds	r3, r7, #6
 8017202:	1c02      	adds	r2, r0, #0
 8017204:	701a      	strb	r2, [r3, #0]
 8017206:	1d7b      	adds	r3, r7, #5
 8017208:	1c0a      	adds	r2, r1, #0
 801720a:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 801720c:	1dfa      	adds	r2, r7, #7
 801720e:	1dbb      	adds	r3, r7, #6
 8017210:	7812      	ldrb	r2, [r2, #0]
 8017212:	b252      	sxtb	r2, r2
 8017214:	781b      	ldrb	r3, [r3, #0]
 8017216:	b25b      	sxtb	r3, r3
 8017218:	429a      	cmp	r2, r3
 801721a:	db09      	blt.n	8017230 <RegionCommonValueInRange+0x42>
 801721c:	1dfa      	adds	r2, r7, #7
 801721e:	1d7b      	adds	r3, r7, #5
 8017220:	7812      	ldrb	r2, [r2, #0]
 8017222:	b252      	sxtb	r2, r2
 8017224:	781b      	ldrb	r3, [r3, #0]
 8017226:	b25b      	sxtb	r3, r3
 8017228:	429a      	cmp	r2, r3
 801722a:	dc01      	bgt.n	8017230 <RegionCommonValueInRange+0x42>
    {
        return 1;
 801722c:	2301      	movs	r3, #1
 801722e:	e000      	b.n	8017232 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8017230:	2300      	movs	r3, #0
}
 8017232:	0018      	movs	r0, r3
 8017234:	46bd      	mov	sp, r7
 8017236:	b003      	add	sp, #12
 8017238:	bd90      	pop	{r4, r7, pc}

0801723a <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801723a:	b580      	push	{r7, lr}
 801723c:	b084      	sub	sp, #16
 801723e:	af00      	add	r7, sp, #0
 8017240:	6078      	str	r0, [r7, #4]
 8017242:	0008      	movs	r0, r1
 8017244:	0011      	movs	r1, r2
 8017246:	1cfb      	adds	r3, r7, #3
 8017248:	1c02      	adds	r2, r0, #0
 801724a:	701a      	strb	r2, [r3, #0]
 801724c:	1cbb      	adds	r3, r7, #2
 801724e:	1c0a      	adds	r2, r1, #0
 8017250:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8017252:	210f      	movs	r1, #15
 8017254:	187b      	adds	r3, r7, r1
 8017256:	1cfa      	adds	r2, r7, #3
 8017258:	7812      	ldrb	r2, [r2, #0]
 801725a:	0912      	lsrs	r2, r2, #4
 801725c:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801725e:	1cbb      	adds	r3, r7, #2
 8017260:	781b      	ldrb	r3, [r3, #0]
 8017262:	091b      	lsrs	r3, r3, #4
 8017264:	b2db      	uxtb	r3, r3
 8017266:	187a      	adds	r2, r7, r1
 8017268:	7812      	ldrb	r2, [r2, #0]
 801726a:	429a      	cmp	r2, r3
 801726c:	d805      	bhi.n	801727a <RegionCommonChanDisable+0x40>
 801726e:	1cfa      	adds	r2, r7, #3
 8017270:	1cbb      	adds	r3, r7, #2
 8017272:	7812      	ldrb	r2, [r2, #0]
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	429a      	cmp	r2, r3
 8017278:	d301      	bcc.n	801727e <RegionCommonChanDisable+0x44>
    {
        return false;
 801727a:	2300      	movs	r3, #0
 801727c:	e01b      	b.n	80172b6 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801727e:	200f      	movs	r0, #15
 8017280:	183b      	adds	r3, r7, r0
 8017282:	781b      	ldrb	r3, [r3, #0]
 8017284:	005b      	lsls	r3, r3, #1
 8017286:	687a      	ldr	r2, [r7, #4]
 8017288:	18d3      	adds	r3, r2, r3
 801728a:	881b      	ldrh	r3, [r3, #0]
 801728c:	b21b      	sxth	r3, r3
 801728e:	1cfa      	adds	r2, r7, #3
 8017290:	7812      	ldrb	r2, [r2, #0]
 8017292:	210f      	movs	r1, #15
 8017294:	400a      	ands	r2, r1
 8017296:	2101      	movs	r1, #1
 8017298:	4091      	lsls	r1, r2
 801729a:	000a      	movs	r2, r1
 801729c:	b212      	sxth	r2, r2
 801729e:	43d2      	mvns	r2, r2
 80172a0:	b212      	sxth	r2, r2
 80172a2:	4013      	ands	r3, r2
 80172a4:	b219      	sxth	r1, r3
 80172a6:	183b      	adds	r3, r7, r0
 80172a8:	781b      	ldrb	r3, [r3, #0]
 80172aa:	005b      	lsls	r3, r3, #1
 80172ac:	687a      	ldr	r2, [r7, #4]
 80172ae:	18d3      	adds	r3, r2, r3
 80172b0:	b28a      	uxth	r2, r1
 80172b2:	801a      	strh	r2, [r3, #0]

    return true;
 80172b4:	2301      	movs	r3, #1
}
 80172b6:	0018      	movs	r0, r3
 80172b8:	46bd      	mov	sp, r7
 80172ba:	b004      	add	sp, #16
 80172bc:	bd80      	pop	{r7, pc}

080172be <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80172be:	b590      	push	{r4, r7, lr}
 80172c0:	b085      	sub	sp, #20
 80172c2:	af00      	add	r7, sp, #0
 80172c4:	6078      	str	r0, [r7, #4]
 80172c6:	0008      	movs	r0, r1
 80172c8:	0011      	movs	r1, r2
 80172ca:	1cfb      	adds	r3, r7, #3
 80172cc:	1c02      	adds	r2, r0, #0
 80172ce:	701a      	strb	r2, [r3, #0]
 80172d0:	1cbb      	adds	r3, r7, #2
 80172d2:	1c0a      	adds	r2, r1, #0
 80172d4:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 80172d6:	230f      	movs	r3, #15
 80172d8:	18fb      	adds	r3, r7, r3
 80172da:	2200      	movs	r2, #0
 80172dc:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d101      	bne.n	80172e8 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 80172e4:	2300      	movs	r3, #0
 80172e6:	e027      	b.n	8017338 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80172e8:	230e      	movs	r3, #14
 80172ea:	18fb      	adds	r3, r7, r3
 80172ec:	1cfa      	adds	r2, r7, #3
 80172ee:	7812      	ldrb	r2, [r2, #0]
 80172f0:	701a      	strb	r2, [r3, #0]
 80172f2:	e017      	b.n	8017324 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80172f4:	240e      	movs	r4, #14
 80172f6:	193b      	adds	r3, r7, r4
 80172f8:	781b      	ldrb	r3, [r3, #0]
 80172fa:	005b      	lsls	r3, r3, #1
 80172fc:	687a      	ldr	r2, [r7, #4]
 80172fe:	18d3      	adds	r3, r2, r3
 8017300:	881b      	ldrh	r3, [r3, #0]
 8017302:	2110      	movs	r1, #16
 8017304:	0018      	movs	r0, r3
 8017306:	f7ff fe6e 	bl	8016fe6 <CountChannels>
 801730a:	0003      	movs	r3, r0
 801730c:	0019      	movs	r1, r3
 801730e:	220f      	movs	r2, #15
 8017310:	18bb      	adds	r3, r7, r2
 8017312:	18ba      	adds	r2, r7, r2
 8017314:	7812      	ldrb	r2, [r2, #0]
 8017316:	188a      	adds	r2, r1, r2
 8017318:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801731a:	193b      	adds	r3, r7, r4
 801731c:	781a      	ldrb	r2, [r3, #0]
 801731e:	193b      	adds	r3, r7, r4
 8017320:	3201      	adds	r2, #1
 8017322:	701a      	strb	r2, [r3, #0]
 8017324:	230e      	movs	r3, #14
 8017326:	18fa      	adds	r2, r7, r3
 8017328:	1cbb      	adds	r3, r7, #2
 801732a:	7812      	ldrb	r2, [r2, #0]
 801732c:	781b      	ldrb	r3, [r3, #0]
 801732e:	429a      	cmp	r2, r3
 8017330:	d3e0      	bcc.n	80172f4 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8017332:	230f      	movs	r3, #15
 8017334:	18fb      	adds	r3, r7, r3
 8017336:	781b      	ldrb	r3, [r3, #0]
}
 8017338:	0018      	movs	r0, r3
 801733a:	46bd      	mov	sp, r7
 801733c:	b005      	add	sp, #20
 801733e:	bd90      	pop	{r4, r7, pc}

08017340 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b086      	sub	sp, #24
 8017344:	af00      	add	r7, sp, #0
 8017346:	60f8      	str	r0, [r7, #12]
 8017348:	60b9      	str	r1, [r7, #8]
 801734a:	1dfb      	adds	r3, r7, #7
 801734c:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d020      	beq.n	8017396 <RegionCommonChanMaskCopy+0x56>
 8017354:	68bb      	ldr	r3, [r7, #8]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d01d      	beq.n	8017396 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 801735a:	2317      	movs	r3, #23
 801735c:	18fb      	adds	r3, r7, r3
 801735e:	2200      	movs	r2, #0
 8017360:	701a      	strb	r2, [r3, #0]
 8017362:	e011      	b.n	8017388 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017364:	2017      	movs	r0, #23
 8017366:	183b      	adds	r3, r7, r0
 8017368:	781b      	ldrb	r3, [r3, #0]
 801736a:	005b      	lsls	r3, r3, #1
 801736c:	68ba      	ldr	r2, [r7, #8]
 801736e:	18d2      	adds	r2, r2, r3
 8017370:	183b      	adds	r3, r7, r0
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	005b      	lsls	r3, r3, #1
 8017376:	68f9      	ldr	r1, [r7, #12]
 8017378:	18cb      	adds	r3, r1, r3
 801737a:	8812      	ldrh	r2, [r2, #0]
 801737c:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801737e:	183b      	adds	r3, r7, r0
 8017380:	781a      	ldrb	r2, [r3, #0]
 8017382:	183b      	adds	r3, r7, r0
 8017384:	3201      	adds	r2, #1
 8017386:	701a      	strb	r2, [r3, #0]
 8017388:	2317      	movs	r3, #23
 801738a:	18fa      	adds	r2, r7, r3
 801738c:	1dfb      	adds	r3, r7, #7
 801738e:	7812      	ldrb	r2, [r2, #0]
 8017390:	781b      	ldrb	r3, [r3, #0]
 8017392:	429a      	cmp	r2, r3
 8017394:	d3e6      	bcc.n	8017364 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8017396:	46c0      	nop			; (mov r8, r8)
 8017398:	46bd      	mov	sp, r7
 801739a:	b006      	add	sp, #24
 801739c:	bd80      	pop	{r7, pc}

0801739e <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801739e:	b082      	sub	sp, #8
 80173a0:	b5b0      	push	{r4, r5, r7, lr}
 80173a2:	b086      	sub	sp, #24
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	60f8      	str	r0, [r7, #12]
 80173a8:	60b9      	str	r1, [r7, #8]
 80173aa:	0011      	movs	r1, r2
 80173ac:	2204      	movs	r2, #4
 80173ae:	2028      	movs	r0, #40	; 0x28
 80173b0:	4684      	mov	ip, r0
 80173b2:	44bc      	add	ip, r7
 80173b4:	4462      	add	r2, ip
 80173b6:	6013      	str	r3, [r2, #0]
 80173b8:	1dfb      	adds	r3, r7, #7
 80173ba:	1c0a      	adds	r2, r1, #0
 80173bc:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80173be:	2516      	movs	r5, #22
 80173c0:	197c      	adds	r4, r7, r5
 80173c2:	2304      	movs	r3, #4
 80173c4:	2228      	movs	r2, #40	; 0x28
 80173c6:	4694      	mov	ip, r2
 80173c8:	44bc      	add	ip, r7
 80173ca:	4463      	add	r3, ip
 80173cc:	1dfa      	adds	r2, r7, #7
 80173ce:	7811      	ldrb	r1, [r2, #0]
 80173d0:	68f8      	ldr	r0, [r7, #12]
 80173d2:	681a      	ldr	r2, [r3, #0]
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	f7ff fd15 	bl	8016e04 <GetDutyCycle>
 80173da:	0003      	movs	r3, r0
 80173dc:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	689a      	ldr	r2, [r3, #8]
 80173e2:	197b      	adds	r3, r7, r5
 80173e4:	881b      	ldrh	r3, [r3, #0]
 80173e6:	68b9      	ldr	r1, [r7, #8]
 80173e8:	434b      	muls	r3, r1
 80173ea:	429a      	cmp	r2, r3
 80173ec:	d909      	bls.n	8017402 <RegionCommonSetBandTxDone+0x64>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	689a      	ldr	r2, [r3, #8]
 80173f2:	197b      	adds	r3, r7, r5
 80173f4:	881b      	ldrh	r3, [r3, #0]
 80173f6:	68b9      	ldr	r1, [r7, #8]
 80173f8:	434b      	muls	r3, r1
 80173fa:	1ad2      	subs	r2, r2, r3
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017400:	e002      	b.n	8017408 <RegionCommonSetBandTxDone+0x6a>
        band->TimeCredits = 0;
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	2200      	movs	r2, #0
 8017406:	609a      	str	r2, [r3, #8]
}
 8017408:	46c0      	nop			; (mov r8, r8)
 801740a:	46bd      	mov	sp, r7
 801740c:	b006      	add	sp, #24
 801740e:	bcb0      	pop	{r4, r5, r7}
 8017410:	bc08      	pop	{r3}
 8017412:	b002      	add	sp, #8
 8017414:	4718      	bx	r3

08017416 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017418:	46c6      	mov	lr, r8
 801741a:	b500      	push	{lr}
 801741c:	b08c      	sub	sp, #48	; 0x30
 801741e:	af04      	add	r7, sp, #16
 8017420:	0004      	movs	r4, r0
 8017422:	6039      	str	r1, [r7, #0]
 8017424:	0010      	movs	r0, r2
 8017426:	0019      	movs	r1, r3
 8017428:	1dfb      	adds	r3, r7, #7
 801742a:	1c22      	adds	r2, r4, #0
 801742c:	701a      	strb	r2, [r3, #0]
 801742e:	1dbb      	adds	r3, r7, #6
 8017430:	1c02      	adds	r2, r0, #0
 8017432:	701a      	strb	r2, [r3, #0]
 8017434:	1d7b      	adds	r3, r7, #5
 8017436:	1c0a      	adds	r2, r1, #0
 8017438:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801743a:	2301      	movs	r3, #1
 801743c:	425b      	negs	r3, r3
 801743e:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017440:	f005 fc40 	bl	801ccc4 <UTIL_TIMER_GetCurrentTime>
 8017444:	0003      	movs	r3, r0
 8017446:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 8017448:	2300      	movs	r3, #0
 801744a:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 801744c:	230e      	movs	r3, #14
 801744e:	18fb      	adds	r3, r7, r3
 8017450:	2201      	movs	r2, #1
 8017452:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 8017454:	231b      	movs	r3, #27
 8017456:	18fb      	adds	r3, r7, r3
 8017458:	2200      	movs	r2, #0
 801745a:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 801745c:	231a      	movs	r3, #26
 801745e:	18fb      	adds	r3, r7, r3
 8017460:	2200      	movs	r2, #0
 8017462:	701a      	strb	r2, [r3, #0]
 8017464:	e089      	b.n	801757a <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017466:	231a      	movs	r3, #26
 8017468:	18fb      	adds	r3, r7, r3
 801746a:	781a      	ldrb	r2, [r3, #0]
 801746c:	0013      	movs	r3, r2
 801746e:	009b      	lsls	r3, r3, #2
 8017470:	189b      	adds	r3, r3, r2
 8017472:	009b      	lsls	r3, r3, #2
 8017474:	001a      	movs	r2, r3
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	469c      	mov	ip, r3
 801747a:	4494      	add	ip, r2
 801747c:	220e      	movs	r2, #14
 801747e:	18bc      	adds	r4, r7, r2
 8017480:	2138      	movs	r1, #56	; 0x38
 8017482:	000a      	movs	r2, r1
 8017484:	187b      	adds	r3, r7, r1
 8017486:	781e      	ldrb	r6, [r3, #0]
 8017488:	1d7b      	adds	r3, r7, #5
 801748a:	781d      	ldrb	r5, [r3, #0]
 801748c:	1dfb      	adds	r3, r7, #7
 801748e:	781b      	ldrb	r3, [r3, #0]
 8017490:	4698      	mov	r8, r3
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	9302      	str	r3, [sp, #8]
 8017496:	2304      	movs	r3, #4
 8017498:	18ba      	adds	r2, r7, r2
 801749a:	18d2      	adds	r2, r2, r3
 801749c:	466b      	mov	r3, sp
 801749e:	ca03      	ldmia	r2!, {r0, r1}
 80174a0:	c303      	stmia	r3!, {r0, r1}
 80174a2:	0033      	movs	r3, r6
 80174a4:	002a      	movs	r2, r5
 80174a6:	4641      	mov	r1, r8
 80174a8:	4660      	mov	r0, ip
 80174aa:	f7ff fd3b 	bl	8016f24 <UpdateTimeCredits>
 80174ae:	0003      	movs	r3, r0
 80174b0:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80174b2:	220e      	movs	r2, #14
 80174b4:	18bb      	adds	r3, r7, r2
 80174b6:	881a      	ldrh	r2, [r3, #0]
 80174b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174ba:	4353      	muls	r3, r2
 80174bc:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80174be:	231a      	movs	r3, #26
 80174c0:	18fb      	adds	r3, r7, r3
 80174c2:	781a      	ldrb	r2, [r3, #0]
 80174c4:	0013      	movs	r3, r2
 80174c6:	009b      	lsls	r3, r3, #2
 80174c8:	189b      	adds	r3, r3, r2
 80174ca:	009b      	lsls	r3, r3, #2
 80174cc:	001a      	movs	r2, r3
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	189b      	adds	r3, r3, r2
 80174d2:	689b      	ldr	r3, [r3, #8]
 80174d4:	693a      	ldr	r2, [r7, #16]
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d306      	bcc.n	80174e8 <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 80174da:	1d7b      	adds	r3, r7, #5
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	2201      	movs	r2, #1
 80174e0:	4053      	eors	r3, r2
 80174e2:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d012      	beq.n	801750e <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 80174e8:	231a      	movs	r3, #26
 80174ea:	18fb      	adds	r3, r7, r3
 80174ec:	781a      	ldrb	r2, [r3, #0]
 80174ee:	0013      	movs	r3, r2
 80174f0:	009b      	lsls	r3, r3, #2
 80174f2:	189b      	adds	r3, r3, r2
 80174f4:	009b      	lsls	r3, r3, #2
 80174f6:	001a      	movs	r2, r3
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	189b      	adds	r3, r3, r2
 80174fc:	2201      	movs	r2, #1
 80174fe:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017500:	211b      	movs	r1, #27
 8017502:	187b      	adds	r3, r7, r1
 8017504:	781a      	ldrb	r2, [r3, #0]
 8017506:	187b      	adds	r3, r7, r1
 8017508:	3201      	adds	r2, #1
 801750a:	701a      	strb	r2, [r3, #0]
 801750c:	e02f      	b.n	801756e <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801750e:	211a      	movs	r1, #26
 8017510:	187b      	adds	r3, r7, r1
 8017512:	781a      	ldrb	r2, [r3, #0]
 8017514:	0013      	movs	r3, r2
 8017516:	009b      	lsls	r3, r3, #2
 8017518:	189b      	adds	r3, r3, r2
 801751a:	009b      	lsls	r3, r3, #2
 801751c:	001a      	movs	r2, r3
 801751e:	683b      	ldr	r3, [r7, #0]
 8017520:	189b      	adds	r3, r3, r2
 8017522:	2200      	movs	r2, #0
 8017524:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 8017526:	187b      	adds	r3, r7, r1
 8017528:	781a      	ldrb	r2, [r3, #0]
 801752a:	0013      	movs	r3, r2
 801752c:	009b      	lsls	r3, r3, #2
 801752e:	189b      	adds	r3, r3, r2
 8017530:	009b      	lsls	r3, r3, #2
 8017532:	001a      	movs	r2, r3
 8017534:	683b      	ldr	r3, [r7, #0]
 8017536:	189b      	adds	r3, r3, r2
 8017538:	68db      	ldr	r3, [r3, #12]
 801753a:	693a      	ldr	r2, [r7, #16]
 801753c:	429a      	cmp	r2, r3
 801753e:	d216      	bcs.n	801756e <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017540:	187b      	adds	r3, r7, r1
 8017542:	781a      	ldrb	r2, [r3, #0]
 8017544:	0013      	movs	r3, r2
 8017546:	009b      	lsls	r3, r3, #2
 8017548:	189b      	adds	r3, r3, r2
 801754a:	009b      	lsls	r3, r3, #2
 801754c:	001a      	movs	r2, r3
 801754e:	683b      	ldr	r3, [r7, #0]
 8017550:	189b      	adds	r3, r3, r2
 8017552:	689b      	ldr	r3, [r3, #8]
 8017554:	693a      	ldr	r2, [r7, #16]
 8017556:	1ad2      	subs	r2, r2, r3
 8017558:	69fb      	ldr	r3, [r7, #28]
 801755a:	4293      	cmp	r3, r2
 801755c:	d900      	bls.n	8017560 <RegionCommonUpdateBandTimeOff+0x14a>
 801755e:	0013      	movs	r3, r2
 8017560:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017562:	211b      	movs	r1, #27
 8017564:	187b      	adds	r3, r7, r1
 8017566:	781a      	ldrb	r2, [r3, #0]
 8017568:	187b      	adds	r3, r7, r1
 801756a:	3201      	adds	r2, #1
 801756c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 801756e:	211a      	movs	r1, #26
 8017570:	187b      	adds	r3, r7, r1
 8017572:	781a      	ldrb	r2, [r3, #0]
 8017574:	187b      	adds	r3, r7, r1
 8017576:	3201      	adds	r2, #1
 8017578:	701a      	strb	r2, [r3, #0]
 801757a:	231a      	movs	r3, #26
 801757c:	18fa      	adds	r2, r7, r3
 801757e:	1dbb      	adds	r3, r7, #6
 8017580:	7812      	ldrb	r2, [r2, #0]
 8017582:	781b      	ldrb	r3, [r3, #0]
 8017584:	429a      	cmp	r2, r3
 8017586:	d200      	bcs.n	801758a <RegionCommonUpdateBandTimeOff+0x174>
 8017588:	e76d      	b.n	8017466 <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 801758a:	231b      	movs	r3, #27
 801758c:	18fb      	adds	r3, r7, r3
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d102      	bne.n	801759a <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017594:	2301      	movs	r3, #1
 8017596:	425b      	negs	r3, r3
 8017598:	e000      	b.n	801759c <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 801759a:	69fb      	ldr	r3, [r7, #28]
}
 801759c:	0018      	movs	r0, r3
 801759e:	46bd      	mov	sp, r7
 80175a0:	b008      	add	sp, #32
 80175a2:	bc80      	pop	{r7}
 80175a4:	46b8      	mov	r8, r7
 80175a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080175a8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b084      	sub	sp, #16
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
 80175b0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80175b2:	210f      	movs	r1, #15
 80175b4:	187b      	adds	r3, r7, r1
 80175b6:	2200      	movs	r2, #0
 80175b8:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	2b03      	cmp	r3, #3
 80175c0:	d140      	bne.n	8017644 <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	3301      	adds	r3, #1
 80175c6:	781b      	ldrb	r3, [r3, #0]
 80175c8:	b25a      	sxtb	r2, r3
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80175ce:	683b      	ldr	r3, [r7, #0]
 80175d0:	785b      	ldrb	r3, [r3, #1]
 80175d2:	b25b      	sxtb	r3, r3
 80175d4:	220f      	movs	r2, #15
 80175d6:	4013      	ands	r3, r2
 80175d8:	b25a      	sxtb	r2, r3
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80175de:	683b      	ldr	r3, [r7, #0]
 80175e0:	785b      	ldrb	r3, [r3, #1]
 80175e2:	b25b      	sxtb	r3, r3
 80175e4:	b2db      	uxtb	r3, r3
 80175e6:	091b      	lsrs	r3, r3, #4
 80175e8:	b2db      	uxtb	r3, r3
 80175ea:	b25a      	sxtb	r2, r3
 80175ec:	683b      	ldr	r3, [r7, #0]
 80175ee:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	3302      	adds	r3, #2
 80175f4:	781b      	ldrb	r3, [r3, #0]
 80175f6:	b29a      	uxth	r2, r3
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80175fc:	683b      	ldr	r3, [r7, #0]
 80175fe:	889b      	ldrh	r3, [r3, #4]
 8017600:	b21a      	sxth	r2, r3
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	3303      	adds	r3, #3
 8017606:	781b      	ldrb	r3, [r3, #0]
 8017608:	021b      	lsls	r3, r3, #8
 801760a:	b21b      	sxth	r3, r3
 801760c:	4313      	orrs	r3, r2
 801760e:	b21b      	sxth	r3, r3
 8017610:	b29a      	uxth	r2, r3
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	791a      	ldrb	r2, [r3, #4]
 801761a:	683b      	ldr	r3, [r7, #0]
 801761c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801761e:	683b      	ldr	r3, [r7, #0]
 8017620:	781b      	ldrb	r3, [r3, #0]
 8017622:	091b      	lsrs	r3, r3, #4
 8017624:	b2db      	uxtb	r3, r3
 8017626:	2207      	movs	r2, #7
 8017628:	4013      	ands	r3, r2
 801762a:	b2da      	uxtb	r2, r3
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017630:	683b      	ldr	r3, [r7, #0]
 8017632:	781b      	ldrb	r3, [r3, #0]
 8017634:	220f      	movs	r2, #15
 8017636:	4013      	ands	r3, r2
 8017638:	b2da      	uxtb	r2, r3
 801763a:	683b      	ldr	r3, [r7, #0]
 801763c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801763e:	187b      	adds	r3, r7, r1
 8017640:	2205      	movs	r2, #5
 8017642:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8017644:	230f      	movs	r3, #15
 8017646:	18fb      	adds	r3, r7, r3
 8017648:	781b      	ldrb	r3, [r3, #0]
}
 801764a:	0018      	movs	r0, r3
 801764c:	46bd      	mov	sp, r7
 801764e:	b004      	add	sp, #16
 8017650:	bd80      	pop	{r7, pc}

08017652 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017654:	b089      	sub	sp, #36	; 0x24
 8017656:	af02      	add	r7, sp, #8
 8017658:	60f8      	str	r0, [r7, #12]
 801765a:	60b9      	str	r1, [r7, #8]
 801765c:	607a      	str	r2, [r7, #4]
 801765e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017660:	2317      	movs	r3, #23
 8017662:	18fb      	adds	r3, r7, r3
 8017664:	68fa      	ldr	r2, [r7, #12]
 8017666:	7912      	ldrb	r2, [r2, #4]
 8017668:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 801766a:	2116      	movs	r1, #22
 801766c:	187b      	adds	r3, r7, r1
 801766e:	68fa      	ldr	r2, [r7, #12]
 8017670:	7992      	ldrb	r2, [r2, #6]
 8017672:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8017674:	2015      	movs	r0, #21
 8017676:	183b      	adds	r3, r7, r0
 8017678:	68fa      	ldr	r2, [r7, #12]
 801767a:	79d2      	ldrb	r2, [r2, #7]
 801767c:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	7a1a      	ldrb	r2, [r3, #8]
 8017682:	2414      	movs	r4, #20
 8017684:	193b      	adds	r3, r7, r4
 8017686:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	795b      	ldrb	r3, [r3, #5]
 801768c:	2201      	movs	r2, #1
 801768e:	4053      	eors	r3, r2
 8017690:	b2db      	uxtb	r3, r3
 8017692:	2b00      	cmp	r3, #0
 8017694:	d00b      	beq.n	80176ae <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017696:	193b      	adds	r3, r7, r4
 8017698:	68fa      	ldr	r2, [r7, #12]
 801769a:	7ad2      	ldrb	r2, [r2, #11]
 801769c:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 801769e:	187b      	adds	r3, r7, r1
 80176a0:	68fa      	ldr	r2, [r7, #12]
 80176a2:	7a52      	ldrb	r2, [r2, #9]
 80176a4:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 80176a6:	183b      	adds	r3, r7, r0
 80176a8:	68fa      	ldr	r2, [r7, #12]
 80176aa:	7a92      	ldrb	r2, [r2, #10]
 80176ac:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 80176ae:	2617      	movs	r6, #23
 80176b0:	19bb      	adds	r3, r7, r6
 80176b2:	781b      	ldrb	r3, [r3, #0]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d046      	beq.n	8017746 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	7b18      	ldrb	r0, [r3, #12]
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	691c      	ldr	r4, [r3, #16]
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	2514      	movs	r5, #20
 80176c4:	575d      	ldrsb	r5, [r3, r5]
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	2215      	movs	r2, #21
 80176ca:	569a      	ldrsb	r2, [r3, r2]
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	699b      	ldr	r3, [r3, #24]
 80176d0:	2116      	movs	r1, #22
 80176d2:	1879      	adds	r1, r7, r1
 80176d4:	7809      	ldrb	r1, [r1, #0]
 80176d6:	b249      	sxtb	r1, r1
 80176d8:	9301      	str	r3, [sp, #4]
 80176da:	9200      	str	r2, [sp, #0]
 80176dc:	002b      	movs	r3, r5
 80176de:	000a      	movs	r2, r1
 80176e0:	0021      	movs	r1, r4
 80176e2:	f7ff fceb 	bl	80170bc <RegionCommonChanVerifyDr>
 80176e6:	0003      	movs	r3, r0
 80176e8:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80176ea:	2301      	movs	r3, #1
 80176ec:	4053      	eors	r3, r2
 80176ee:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d005      	beq.n	8017700 <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 80176f4:	19bb      	adds	r3, r7, r6
 80176f6:	19ba      	adds	r2, r7, r6
 80176f8:	7812      	ldrb	r2, [r2, #0]
 80176fa:	2102      	movs	r1, #2
 80176fc:	438a      	bics	r2, r1
 80176fe:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	211d      	movs	r1, #29
 8017704:	5659      	ldrsb	r1, [r3, r1]
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	221c      	movs	r2, #28
 801770a:	569a      	ldrsb	r2, [r3, r2]
 801770c:	2415      	movs	r4, #21
 801770e:	193b      	adds	r3, r7, r4
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	b25b      	sxtb	r3, r3
 8017714:	0018      	movs	r0, r3
 8017716:	f7ff fd6a 	bl	80171ee <RegionCommonValueInRange>
 801771a:	1e03      	subs	r3, r0, #0
 801771c:	d113      	bne.n	8017746 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	7f5b      	ldrb	r3, [r3, #29]
 8017722:	b25b      	sxtb	r3, r3
 8017724:	193a      	adds	r2, r7, r4
 8017726:	7812      	ldrb	r2, [r2, #0]
 8017728:	b252      	sxtb	r2, r2
 801772a:	429a      	cmp	r2, r3
 801772c:	da04      	bge.n	8017738 <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801772e:	193b      	adds	r3, r7, r4
 8017730:	68fa      	ldr	r2, [r7, #12]
 8017732:	7f52      	ldrb	r2, [r2, #29]
 8017734:	701a      	strb	r2, [r3, #0]
 8017736:	e006      	b.n	8017746 <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017738:	2217      	movs	r2, #23
 801773a:	18bb      	adds	r3, r7, r2
 801773c:	18ba      	adds	r2, r7, r2
 801773e:	7812      	ldrb	r2, [r2, #0]
 8017740:	2104      	movs	r1, #4
 8017742:	438a      	bics	r2, r1
 8017744:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017746:	2317      	movs	r3, #23
 8017748:	18fb      	adds	r3, r7, r3
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	2b07      	cmp	r3, #7
 801774e:	d108      	bne.n	8017762 <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 8017750:	2214      	movs	r2, #20
 8017752:	18bb      	adds	r3, r7, r2
 8017754:	781b      	ldrb	r3, [r3, #0]
 8017756:	b25b      	sxtb	r3, r3
 8017758:	2b00      	cmp	r3, #0
 801775a:	d102      	bne.n	8017762 <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801775c:	18bb      	adds	r3, r7, r2
 801775e:	2201      	movs	r2, #1
 8017760:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	2216      	movs	r2, #22
 8017766:	18ba      	adds	r2, r7, r2
 8017768:	7812      	ldrb	r2, [r2, #0]
 801776a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	2215      	movs	r2, #21
 8017770:	18ba      	adds	r2, r7, r2
 8017772:	7812      	ldrb	r2, [r2, #0]
 8017774:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017776:	2314      	movs	r3, #20
 8017778:	18fb      	adds	r3, r7, r3
 801777a:	781a      	ldrb	r2, [r3, #0]
 801777c:	683b      	ldr	r3, [r7, #0]
 801777e:	701a      	strb	r2, [r3, #0]

    return status;
 8017780:	2317      	movs	r3, #23
 8017782:	18fb      	adds	r3, r7, r3
 8017784:	781b      	ldrb	r3, [r3, #0]
}
 8017786:	0018      	movs	r0, r3
 8017788:	46bd      	mov	sp, r7
 801778a:	b007      	add	sp, #28
 801778c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017790 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b082      	sub	sp, #8
 8017794:	af00      	add	r7, sp, #0
 8017796:	0002      	movs	r2, r0
 8017798:	6039      	str	r1, [r7, #0]
 801779a:	1dfb      	adds	r3, r7, #7
 801779c:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 801779e:	6839      	ldr	r1, [r7, #0]
 80177a0:	4806      	ldr	r0, [pc, #24]	; (80177bc <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 80177a2:	f7e8 fcb9 	bl	8000118 <__udivsi3>
 80177a6:	0003      	movs	r3, r0
 80177a8:	001a      	movs	r2, r3
 80177aa:	1dfb      	adds	r3, r7, #7
 80177ac:	781b      	ldrb	r3, [r3, #0]
 80177ae:	409a      	lsls	r2, r3
 80177b0:	0013      	movs	r3, r2
}
 80177b2:	0018      	movs	r0, r3
 80177b4:	46bd      	mov	sp, r7
 80177b6:	b002      	add	sp, #8
 80177b8:	bd80      	pop	{r7, pc}
 80177ba:	46c0      	nop			; (mov r8, r8)
 80177bc:	3b9aca00 	.word	0x3b9aca00

080177c0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b082      	sub	sp, #8
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	0002      	movs	r2, r0
 80177c8:	1dfb      	adds	r3, r7, #7
 80177ca:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 80177cc:	4b02      	ldr	r3, [pc, #8]	; (80177d8 <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 80177ce:	0018      	movs	r0, r3
 80177d0:	46bd      	mov	sp, r7
 80177d2:	b002      	add	sp, #8
 80177d4:	bd80      	pop	{r7, pc}
 80177d6:	46c0      	nop			; (mov r8, r8)
 80177d8:	00027100 	.word	0x00027100

080177dc <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 80177dc:	b5b0      	push	{r4, r5, r7, lr}
 80177de:	b084      	sub	sp, #16
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	60f8      	str	r0, [r7, #12]
 80177e4:	607a      	str	r2, [r7, #4]
 80177e6:	603b      	str	r3, [r7, #0]
 80177e8:	200b      	movs	r0, #11
 80177ea:	183b      	adds	r3, r7, r0
 80177ec:	1c0a      	adds	r2, r1, #0
 80177ee:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 80177f0:	0002      	movs	r2, r0
 80177f2:	18bb      	adds	r3, r7, r2
 80177f4:	781d      	ldrb	r5, [r3, #0]
 80177f6:	18bb      	adds	r3, r7, r2
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	4a1c      	ldr	r2, [pc, #112]	; (801786c <RegionCommonComputeRxWindowParameters+0x90>)
 80177fc:	4694      	mov	ip, r2
 80177fe:	4463      	add	r3, ip
 8017800:	005c      	lsls	r4, r3, #1
 8017802:	6879      	ldr	r1, [r7, #4]
 8017804:	000a      	movs	r2, r1
 8017806:	0152      	lsls	r2, r2, #5
 8017808:	1a52      	subs	r2, r2, r1
 801780a:	0193      	lsls	r3, r2, #6
 801780c:	1a9b      	subs	r3, r3, r2
 801780e:	00db      	lsls	r3, r3, #3
 8017810:	185b      	adds	r3, r3, r1
 8017812:	01db      	lsls	r3, r3, #7
 8017814:	001a      	movs	r2, r3
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	18d3      	adds	r3, r2, r3
 801781a:	3b01      	subs	r3, #1
 801781c:	68f9      	ldr	r1, [r7, #12]
 801781e:	0018      	movs	r0, r3
 8017820:	f7e8 fc7a 	bl	8000118 <__udivsi3>
 8017824:	0003      	movs	r3, r0
 8017826:	18e2      	adds	r2, r4, r3
 8017828:	002b      	movs	r3, r5
 801782a:	4293      	cmp	r3, r2
 801782c:	d200      	bcs.n	8017830 <RegionCommonComputeRxWindowParameters+0x54>
 801782e:	0013      	movs	r3, r2
 8017830:	6a3a      	ldr	r2, [r7, #32]
 8017832:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	009a      	lsls	r2, r3, #2
 8017838:	6a3b      	ldr	r3, [r7, #32]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	68f9      	ldr	r1, [r7, #12]
 801783e:	434b      	muls	r3, r1
 8017840:	085b      	lsrs	r3, r3, #1
 8017842:	1ad3      	subs	r3, r2, r3
 8017844:	4a0a      	ldr	r2, [pc, #40]	; (8017870 <RegionCommonComputeRxWindowParameters+0x94>)
 8017846:	4694      	mov	ip, r2
 8017848:	4463      	add	r3, ip
 801784a:	490a      	ldr	r1, [pc, #40]	; (8017874 <RegionCommonComputeRxWindowParameters+0x98>)
 801784c:	0018      	movs	r0, r3
 801784e:	f7e8 fced 	bl	800022c <__divsi3>
 8017852:	0003      	movs	r3, r0
 8017854:	001a      	movs	r2, r3
 8017856:	683b      	ldr	r3, [r7, #0]
 8017858:	1ad3      	subs	r3, r2, r3
 801785a:	3b01      	subs	r3, #1
 801785c:	001a      	movs	r2, r3
 801785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017860:	601a      	str	r2, [r3, #0]
}
 8017862:	46c0      	nop			; (mov r8, r8)
 8017864:	46bd      	mov	sp, r7
 8017866:	b004      	add	sp, #16
 8017868:	bdb0      	pop	{r4, r5, r7, pc}
 801786a:	46c0      	nop			; (mov r8, r8)
 801786c:	7ffffffc 	.word	0x7ffffffc
 8017870:	000f423f 	.word	0x000f423f
 8017874:	000f4240 	.word	0x000f4240

08017878 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017878:	b5b0      	push	{r4, r5, r7, lr}
 801787a:	b086      	sub	sp, #24
 801787c:	af00      	add	r7, sp, #0
 801787e:	60b9      	str	r1, [r7, #8]
 8017880:	607a      	str	r2, [r7, #4]
 8017882:	210f      	movs	r1, #15
 8017884:	187b      	adds	r3, r7, r1
 8017886:	1c02      	adds	r2, r0, #0
 8017888:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 801788a:	2417      	movs	r4, #23
 801788c:	193b      	adds	r3, r7, r4
 801788e:	2200      	movs	r2, #0
 8017890:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017892:	187b      	adds	r3, r7, r1
 8017894:	781b      	ldrb	r3, [r3, #0]
 8017896:	b25b      	sxtb	r3, r3
 8017898:	005b      	lsls	r3, r3, #1
 801789a:	0018      	movs	r0, r3
 801789c:	f7e9 fbae 	bl	8000ffc <__aeabi_ui2f>
 80178a0:	1c03      	adds	r3, r0, #0
 80178a2:	1c19      	adds	r1, r3, #0
 80178a4:	68b8      	ldr	r0, [r7, #8]
 80178a6:	f7e9 f97b 	bl	8000ba0 <__aeabi_fsub>
 80178aa:	1c03      	adds	r3, r0, #0
 80178ac:	6879      	ldr	r1, [r7, #4]
 80178ae:	1c18      	adds	r0, r3, #0
 80178b0:	f7e9 f976 	bl	8000ba0 <__aeabi_fsub>
 80178b4:	1c03      	adds	r3, r0, #0
 80178b6:	1c18      	adds	r0, r3, #0
 80178b8:	f7eb f9d6 	bl	8002c68 <__aeabi_f2d>
 80178bc:	0002      	movs	r2, r0
 80178be:	000b      	movs	r3, r1
 80178c0:	0010      	movs	r0, r2
 80178c2:	0019      	movs	r1, r3
 80178c4:	f006 fa76 	bl	801ddb4 <floor>
 80178c8:	0002      	movs	r2, r0
 80178ca:	000b      	movs	r3, r1
 80178cc:	0025      	movs	r5, r4
 80178ce:	193c      	adds	r4, r7, r4
 80178d0:	0010      	movs	r0, r2
 80178d2:	0019      	movs	r1, r3
 80178d4:	f7eb f93c 	bl	8002b50 <__aeabi_d2iz>
 80178d8:	0003      	movs	r3, r0
 80178da:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 80178dc:	197b      	adds	r3, r7, r5
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	b25b      	sxtb	r3, r3
}
 80178e2:	0018      	movs	r0, r3
 80178e4:	46bd      	mov	sp, r7
 80178e6:	b006      	add	sp, #24
 80178e8:	bdb0      	pop	{r4, r5, r7, pc}

080178ea <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80178ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178ec:	b087      	sub	sp, #28
 80178ee:	af00      	add	r7, sp, #0
 80178f0:	60f8      	str	r0, [r7, #12]
 80178f2:	60b9      	str	r1, [r7, #8]
 80178f4:	607a      	str	r2, [r7, #4]
 80178f6:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80178f8:	2317      	movs	r3, #23
 80178fa:	18fb      	adds	r3, r7, r3
 80178fc:	2200      	movs	r2, #0
 80178fe:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 8017900:	2316      	movs	r3, #22
 8017902:	18fb      	adds	r3, r7, r3
 8017904:	2200      	movs	r2, #0
 8017906:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017908:	2315      	movs	r3, #21
 801790a:	18fb      	adds	r3, r7, r3
 801790c:	2200      	movs	r2, #0
 801790e:	701a      	strb	r2, [r3, #0]
 8017910:	2314      	movs	r3, #20
 8017912:	18fb      	adds	r3, r7, r3
 8017914:	2200      	movs	r2, #0
 8017916:	701a      	strb	r2, [r3, #0]
 8017918:	e0bf      	b.n	8017a9a <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801791a:	2313      	movs	r3, #19
 801791c:	18fb      	adds	r3, r7, r3
 801791e:	2200      	movs	r2, #0
 8017920:	701a      	strb	r2, [r3, #0]
 8017922:	e0a8      	b.n	8017a76 <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	685a      	ldr	r2, [r3, #4]
 8017928:	2314      	movs	r3, #20
 801792a:	18fb      	adds	r3, r7, r3
 801792c:	781b      	ldrb	r3, [r3, #0]
 801792e:	005b      	lsls	r3, r3, #1
 8017930:	18d3      	adds	r3, r2, r3
 8017932:	881b      	ldrh	r3, [r3, #0]
 8017934:	001a      	movs	r2, r3
 8017936:	2013      	movs	r0, #19
 8017938:	183b      	adds	r3, r7, r0
 801793a:	781b      	ldrb	r3, [r3, #0]
 801793c:	411a      	asrs	r2, r3
 801793e:	0013      	movs	r3, r2
 8017940:	2201      	movs	r2, #1
 8017942:	4013      	ands	r3, r2
 8017944:	d100      	bne.n	8017948 <RegionCommonCountNbOfEnabledChannels+0x5e>
 8017946:	e090      	b.n	8017a6a <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	689a      	ldr	r2, [r3, #8]
 801794c:	2315      	movs	r3, #21
 801794e:	18fb      	adds	r3, r7, r3
 8017950:	7819      	ldrb	r1, [r3, #0]
 8017952:	183b      	adds	r3, r7, r0
 8017954:	781b      	ldrb	r3, [r3, #0]
 8017956:	18cb      	adds	r3, r1, r3
 8017958:	0019      	movs	r1, r3
 801795a:	000b      	movs	r3, r1
 801795c:	005b      	lsls	r3, r3, #1
 801795e:	185b      	adds	r3, r3, r1
 8017960:	009b      	lsls	r3, r3, #2
 8017962:	18d3      	adds	r3, r2, r3
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d100      	bne.n	801796c <RegionCommonCountNbOfEnabledChannels+0x82>
 801796a:	e079      	b.n	8017a60 <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	781b      	ldrb	r3, [r3, #0]
 8017970:	2201      	movs	r2, #1
 8017972:	4053      	eors	r3, r2
 8017974:	b2db      	uxtb	r3, r3
 8017976:	2b00      	cmp	r3, #0
 8017978:	d00d      	beq.n	8017996 <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801797e:	2b00      	cmp	r3, #0
 8017980:	d009      	beq.n	8017996 <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	8a5b      	ldrh	r3, [r3, #18]
 8017986:	001a      	movs	r2, r3
 8017988:	183b      	adds	r3, r7, r0
 801798a:	781b      	ldrb	r3, [r3, #0]
 801798c:	411a      	asrs	r2, r3
 801798e:	0013      	movs	r3, r2
 8017990:	2201      	movs	r2, #1
 8017992:	4013      	ands	r3, r2
 8017994:	d066      	beq.n	8017a64 <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	785b      	ldrb	r3, [r3, #1]
 801799a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	689a      	ldr	r2, [r3, #8]
 80179a0:	2515      	movs	r5, #21
 80179a2:	197b      	adds	r3, r7, r5
 80179a4:	7819      	ldrb	r1, [r3, #0]
 80179a6:	2613      	movs	r6, #19
 80179a8:	19bb      	adds	r3, r7, r6
 80179aa:	781b      	ldrb	r3, [r3, #0]
 80179ac:	18cb      	adds	r3, r1, r3
 80179ae:	0019      	movs	r1, r3
 80179b0:	000b      	movs	r3, r1
 80179b2:	005b      	lsls	r3, r3, #1
 80179b4:	185b      	adds	r3, r3, r1
 80179b6:	009b      	lsls	r3, r3, #2
 80179b8:	18d3      	adds	r3, r2, r3
 80179ba:	7a1b      	ldrb	r3, [r3, #8]
 80179bc:	011b      	lsls	r3, r3, #4
 80179be:	b25b      	sxtb	r3, r3
 80179c0:	111b      	asrs	r3, r3, #4
 80179c2:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80179c4:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	689a      	ldr	r2, [r3, #8]
 80179ca:	197b      	adds	r3, r7, r5
 80179cc:	7819      	ldrb	r1, [r3, #0]
 80179ce:	19bb      	adds	r3, r7, r6
 80179d0:	781b      	ldrb	r3, [r3, #0]
 80179d2:	18cb      	adds	r3, r1, r3
 80179d4:	0019      	movs	r1, r3
 80179d6:	000b      	movs	r3, r1
 80179d8:	005b      	lsls	r3, r3, #1
 80179da:	185b      	adds	r3, r3, r1
 80179dc:	009b      	lsls	r3, r3, #2
 80179de:	18d3      	adds	r3, r2, r3
 80179e0:	7a1b      	ldrb	r3, [r3, #8]
 80179e2:	b25b      	sxtb	r3, r3
 80179e4:	111b      	asrs	r3, r3, #4
 80179e6:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80179e8:	001a      	movs	r2, r3
 80179ea:	0021      	movs	r1, r4
 80179ec:	f7ff fbff 	bl	80171ee <RegionCommonValueInRange>
 80179f0:	1e03      	subs	r3, r0, #0
 80179f2:	d039      	beq.n	8017a68 <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	68da      	ldr	r2, [r3, #12]
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	6899      	ldr	r1, [r3, #8]
 80179fc:	197b      	adds	r3, r7, r5
 80179fe:	7818      	ldrb	r0, [r3, #0]
 8017a00:	19bb      	adds	r3, r7, r6
 8017a02:	781b      	ldrb	r3, [r3, #0]
 8017a04:	18c3      	adds	r3, r0, r3
 8017a06:	0018      	movs	r0, r3
 8017a08:	0003      	movs	r3, r0
 8017a0a:	005b      	lsls	r3, r3, #1
 8017a0c:	181b      	adds	r3, r3, r0
 8017a0e:	009b      	lsls	r3, r3, #2
 8017a10:	18cb      	adds	r3, r1, r3
 8017a12:	7a5b      	ldrb	r3, [r3, #9]
 8017a14:	0019      	movs	r1, r3
 8017a16:	000b      	movs	r3, r1
 8017a18:	009b      	lsls	r3, r3, #2
 8017a1a:	185b      	adds	r3, r3, r1
 8017a1c:	009b      	lsls	r3, r3, #2
 8017a1e:	18d3      	adds	r3, r2, r3
 8017a20:	7c1b      	ldrb	r3, [r3, #16]
 8017a22:	2201      	movs	r2, #1
 8017a24:	4053      	eors	r3, r2
 8017a26:	b2db      	uxtb	r3, r3
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d006      	beq.n	8017a3a <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017a2c:	2116      	movs	r1, #22
 8017a2e:	187b      	adds	r3, r7, r1
 8017a30:	781a      	ldrb	r2, [r3, #0]
 8017a32:	187b      	adds	r3, r7, r1
 8017a34:	3201      	adds	r2, #1
 8017a36:	701a      	strb	r2, [r3, #0]
                    continue;
 8017a38:	e017      	b.n	8017a6a <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017a3a:	2217      	movs	r2, #23
 8017a3c:	18bb      	adds	r3, r7, r2
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	18ba      	adds	r2, r7, r2
 8017a42:	1c59      	adds	r1, r3, #1
 8017a44:	7011      	strb	r1, [r2, #0]
 8017a46:	001a      	movs	r2, r3
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	189b      	adds	r3, r3, r2
 8017a4c:	2215      	movs	r2, #21
 8017a4e:	18b9      	adds	r1, r7, r2
 8017a50:	2213      	movs	r2, #19
 8017a52:	18ba      	adds	r2, r7, r2
 8017a54:	7809      	ldrb	r1, [r1, #0]
 8017a56:	7812      	ldrb	r2, [r2, #0]
 8017a58:	188a      	adds	r2, r1, r2
 8017a5a:	b2d2      	uxtb	r2, r2
 8017a5c:	701a      	strb	r2, [r3, #0]
 8017a5e:	e004      	b.n	8017a6a <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017a60:	46c0      	nop			; (mov r8, r8)
 8017a62:	e002      	b.n	8017a6a <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 8017a64:	46c0      	nop			; (mov r8, r8)
 8017a66:	e000      	b.n	8017a6a <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017a68:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8017a6a:	2113      	movs	r1, #19
 8017a6c:	187b      	adds	r3, r7, r1
 8017a6e:	781a      	ldrb	r2, [r3, #0]
 8017a70:	187b      	adds	r3, r7, r1
 8017a72:	3201      	adds	r2, #1
 8017a74:	701a      	strb	r2, [r3, #0]
 8017a76:	2313      	movs	r3, #19
 8017a78:	18fb      	adds	r3, r7, r3
 8017a7a:	781b      	ldrb	r3, [r3, #0]
 8017a7c:	2b0f      	cmp	r3, #15
 8017a7e:	d800      	bhi.n	8017a82 <RegionCommonCountNbOfEnabledChannels+0x198>
 8017a80:	e750      	b.n	8017924 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017a82:	2215      	movs	r2, #21
 8017a84:	18bb      	adds	r3, r7, r2
 8017a86:	18ba      	adds	r2, r7, r2
 8017a88:	7812      	ldrb	r2, [r2, #0]
 8017a8a:	3210      	adds	r2, #16
 8017a8c:	701a      	strb	r2, [r3, #0]
 8017a8e:	2114      	movs	r1, #20
 8017a90:	187b      	adds	r3, r7, r1
 8017a92:	781a      	ldrb	r2, [r3, #0]
 8017a94:	187b      	adds	r3, r7, r1
 8017a96:	3201      	adds	r2, #1
 8017a98:	701a      	strb	r2, [r3, #0]
 8017a9a:	2315      	movs	r3, #21
 8017a9c:	18fb      	adds	r3, r7, r3
 8017a9e:	781b      	ldrb	r3, [r3, #0]
 8017aa0:	b29a      	uxth	r2, r3
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	8a1b      	ldrh	r3, [r3, #16]
 8017aa6:	429a      	cmp	r2, r3
 8017aa8:	d200      	bcs.n	8017aac <RegionCommonCountNbOfEnabledChannels+0x1c2>
 8017aaa:	e736      	b.n	801791a <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2217      	movs	r2, #23
 8017ab0:	18ba      	adds	r2, r7, r2
 8017ab2:	7812      	ldrb	r2, [r2, #0]
 8017ab4:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017ab6:	683b      	ldr	r3, [r7, #0]
 8017ab8:	2216      	movs	r2, #22
 8017aba:	18ba      	adds	r2, r7, r2
 8017abc:	7812      	ldrb	r2, [r2, #0]
 8017abe:	701a      	strb	r2, [r3, #0]
}
 8017ac0:	46c0      	nop			; (mov r8, r8)
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	b007      	add	sp, #28
 8017ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017ac8 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aca:	46c6      	mov	lr, r8
 8017acc:	b500      	push	{lr}
 8017ace:	b08a      	sub	sp, #40	; 0x28
 8017ad0:	af04      	add	r7, sp, #16
 8017ad2:	60f8      	str	r0, [r7, #12]
 8017ad4:	60b9      	str	r1, [r7, #8]
 8017ad6:	607a      	str	r2, [r7, #4]
 8017ad8:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	685b      	ldr	r3, [r3, #4]
 8017ade:	0018      	movs	r0, r3
 8017ae0:	f005 f904 	bl	801ccec <UTIL_TIMER_GetElapsedTime>
 8017ae4:	0003      	movs	r3, r0
 8017ae6:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	681a      	ldr	r2, [r3, #0]
 8017aec:	697b      	ldr	r3, [r7, #20]
 8017aee:	1ad2      	subs	r2, r2, r3
 8017af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017af2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af6:	2201      	movs	r2, #1
 8017af8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	2200      	movs	r2, #0
 8017afe:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	685b      	ldr	r3, [r3, #4]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d004      	beq.n	8017b12 <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017b0c:	697a      	ldr	r2, [r7, #20]
 8017b0e:	429a      	cmp	r2, r3
 8017b10:	d32b      	bcc.n	8017b6a <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017b12:	68bb      	ldr	r3, [r7, #8]
 8017b14:	2200      	movs	r2, #0
 8017b16:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	69db      	ldr	r3, [r3, #28]
 8017b1c:	781b      	ldrb	r3, [r3, #0]
 8017b1e:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017b24:	68dc      	ldr	r4, [r3, #12]
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	7a5d      	ldrb	r5, [r3, #9]
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	7a1e      	ldrb	r6, [r3, #8]
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	7d1b      	ldrb	r3, [r3, #20]
 8017b32:	4698      	mov	r8, r3
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	699b      	ldr	r3, [r3, #24]
 8017b38:	9303      	str	r3, [sp, #12]
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	2204      	movs	r2, #4
 8017b3e:	446a      	add	r2, sp
 8017b40:	330c      	adds	r3, #12
 8017b42:	cb03      	ldmia	r3!, {r0, r1}
 8017b44:	c203      	stmia	r2!, {r0, r1}
 8017b46:	4643      	mov	r3, r8
 8017b48:	9300      	str	r3, [sp, #0]
 8017b4a:	0033      	movs	r3, r6
 8017b4c:	002a      	movs	r2, r5
 8017b4e:	0021      	movs	r1, r4
 8017b50:	4660      	mov	r0, ip
 8017b52:	f7ff fc60 	bl	8017416 <RegionCommonUpdateBandTimeOff>
 8017b56:	0002      	movs	r2, r0
 8017b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b5a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	69d8      	ldr	r0, [r3, #28]
 8017b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b62:	683a      	ldr	r2, [r7, #0]
 8017b64:	6879      	ldr	r1, [r7, #4]
 8017b66:	f7ff fec0 	bl	80178ea <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017b6a:	683b      	ldr	r3, [r7, #0]
 8017b6c:	781b      	ldrb	r3, [r3, #0]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d004      	beq.n	8017b7c <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 8017b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b74:	2200      	movs	r2, #0
 8017b76:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017b78:	2300      	movs	r3, #0
 8017b7a:	e006      	b.n	8017b8a <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 8017b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d001      	beq.n	8017b88 <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017b84:	230b      	movs	r3, #11
 8017b86:	e000      	b.n	8017b8a <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017b88:	230c      	movs	r3, #12
    }
}
 8017b8a:	0018      	movs	r0, r3
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	b006      	add	sp, #24
 8017b90:	bc80      	pop	{r7}
 8017b92:	46b8      	mov	r8, r7
 8017b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017b98 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017b98:	b590      	push	{r4, r7, lr}
 8017b9a:	b089      	sub	sp, #36	; 0x24
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6039      	str	r1, [r7, #0]
 8017ba0:	0011      	movs	r1, r2
 8017ba2:	1dfb      	adds	r3, r7, #7
 8017ba4:	1c02      	adds	r2, r0, #0
 8017ba6:	701a      	strb	r2, [r3, #0]
 8017ba8:	1dbb      	adds	r3, r7, #6
 8017baa:	1c0a      	adds	r2, r1, #0
 8017bac:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8017bae:	2308      	movs	r3, #8
 8017bb0:	18fb      	adds	r3, r7, r3
 8017bb2:	4a04      	ldr	r2, [pc, #16]	; (8017bc4 <RegionCommonRxConfigPrint+0x2c>)
 8017bb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017bb6:	c313      	stmia	r3!, {r0, r1, r4}
 8017bb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017bba:	c313      	stmia	r3!, {r0, r1, r4}
    }
    else
    {
//        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017bbc:	46c0      	nop			; (mov r8, r8)
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	b009      	add	sp, #36	; 0x24
 8017bc2:	bd90      	pop	{r4, r7, pc}
 8017bc4:	0801ee98 	.word	0x0801ee98

08017bc8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b088      	sub	sp, #32
 8017bcc:	af04      	add	r7, sp, #16
 8017bce:	6078      	str	r0, [r7, #4]
 8017bd0:	000a      	movs	r2, r1
 8017bd2:	1cfb      	adds	r3, r7, #3
 8017bd4:	701a      	strb	r2, [r3, #0]
	uint32_t freq_mhz = frequency / 1000000; // Конвертируем частоту в мегагерцы
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	4912      	ldr	r1, [pc, #72]	; (8017c24 <RegionCommonTxConfigPrint+0x5c>)
 8017bda:	0018      	movs	r0, r3
 8017bdc:	f7e8 fa9c 	bl	8000118 <__udivsi3>
 8017be0:	0003      	movs	r3, r0
 8017be2:	60fb      	str	r3, [r7, #12]
	uint32_t freq_decimal = (frequency % 1000000) / 100000; // Получаем 1-ю цифру после запятой
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	490f      	ldr	r1, [pc, #60]	; (8017c24 <RegionCommonTxConfigPrint+0x5c>)
 8017be8:	0018      	movs	r0, r3
 8017bea:	f7e8 fb1b 	bl	8000224 <__aeabi_uidivmod>
 8017bee:	000b      	movs	r3, r1
 8017bf0:	490d      	ldr	r1, [pc, #52]	; (8017c28 <RegionCommonTxConfigPrint+0x60>)
 8017bf2:	0018      	movs	r0, r3
 8017bf4:	f7e8 fa90 	bl	8000118 <__udivsi3>
 8017bf8:	0003      	movs	r3, r0
 8017bfa:	60bb      	str	r3, [r7, #8]
//	float freq_mhz2 = frequency / 1000000.0f; // Конвертируем частоту в мегагерцы
//    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
    MW_LOG(TS_OFF, VLEVEL_M,  "Отправка на частоте %d.%d МГц по каналу скорости передачи DR %d\r\n", freq_mhz, freq_decimal, dr );
 8017bfc:	1cfb      	adds	r3, r7, #3
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	b25b      	sxtb	r3, r3
 8017c02:	4a0a      	ldr	r2, [pc, #40]	; (8017c2c <RegionCommonTxConfigPrint+0x64>)
 8017c04:	9302      	str	r3, [sp, #8]
 8017c06:	68bb      	ldr	r3, [r7, #8]
 8017c08:	9301      	str	r3, [sp, #4]
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	9300      	str	r3, [sp, #0]
 8017c0e:	0013      	movs	r3, r2
 8017c10:	2200      	movs	r2, #0
 8017c12:	2100      	movs	r1, #0
 8017c14:	2002      	movs	r0, #2
 8017c16:	f003 ffe1 	bl	801bbdc <UTIL_ADV_TRACE_COND_FSend>
}
 8017c1a:	46c0      	nop			; (mov r8, r8)
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	b004      	add	sp, #16
 8017c20:	bd80      	pop	{r7, pc}
 8017c22:	46c0      	nop			; (mov r8, r8)
 8017c24:	000f4240 	.word	0x000f4240
 8017c28:	000186a0 	.word	0x000186a0
 8017c2c:	0801eeb0 	.word	0x0801eeb0

08017c30 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b084      	sub	sp, #16
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	0002      	movs	r2, r0
 8017c38:	1dfb      	adds	r3, r7, #7
 8017c3a:	701a      	strb	r2, [r3, #0]
 8017c3c:	1dbb      	adds	r3, r7, #6
 8017c3e:	1c0a      	adds	r2, r1, #0
 8017c40:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8017c42:	210f      	movs	r1, #15
 8017c44:	187b      	adds	r3, r7, r1
 8017c46:	2200      	movs	r2, #0
 8017c48:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8017c4a:	1dfa      	adds	r2, r7, #7
 8017c4c:	1dbb      	adds	r3, r7, #6
 8017c4e:	7812      	ldrb	r2, [r2, #0]
 8017c50:	b252      	sxtb	r2, r2
 8017c52:	781b      	ldrb	r3, [r3, #0]
 8017c54:	b25b      	sxtb	r3, r3
 8017c56:	429a      	cmp	r2, r3
 8017c58:	d104      	bne.n	8017c64 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 8017c5a:	187b      	adds	r3, r7, r1
 8017c5c:	1dba      	adds	r2, r7, #6
 8017c5e:	7812      	ldrb	r2, [r2, #0]
 8017c60:	701a      	strb	r2, [r3, #0]
 8017c62:	e005      	b.n	8017c70 <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 8017c64:	1dfb      	adds	r3, r7, #7
 8017c66:	781a      	ldrb	r2, [r3, #0]
 8017c68:	230f      	movs	r3, #15
 8017c6a:	18fb      	adds	r3, r7, r3
 8017c6c:	3a01      	subs	r2, #1
 8017c6e:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8017c70:	230f      	movs	r3, #15
 8017c72:	18fb      	adds	r3, r7, r3
 8017c74:	781b      	ldrb	r3, [r3, #0]
 8017c76:	b25b      	sxtb	r3, r3
}
 8017c78:	0018      	movs	r0, r3
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	b004      	add	sp, #16
 8017c7e:	bd80      	pop	{r7, pc}

08017c80 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8017c88:	4b09      	ldr	r3, [pc, #36]	; (8017cb0 <GetBandwidth+0x30>)
 8017c8a:	687a      	ldr	r2, [r7, #4]
 8017c8c:	0092      	lsls	r2, r2, #2
 8017c8e:	58d3      	ldr	r3, [r2, r3]
 8017c90:	4a08      	ldr	r2, [pc, #32]	; (8017cb4 <GetBandwidth+0x34>)
 8017c92:	4293      	cmp	r3, r2
 8017c94:	d004      	beq.n	8017ca0 <GetBandwidth+0x20>
 8017c96:	4a08      	ldr	r2, [pc, #32]	; (8017cb8 <GetBandwidth+0x38>)
 8017c98:	4293      	cmp	r3, r2
 8017c9a:	d003      	beq.n	8017ca4 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	e002      	b.n	8017ca6 <GetBandwidth+0x26>
        case 250000:
            return 1;
 8017ca0:	2301      	movs	r3, #1
 8017ca2:	e000      	b.n	8017ca6 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8017ca4:	2302      	movs	r3, #2
    }
}
 8017ca6:	0018      	movs	r0, r3
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	b002      	add	sp, #8
 8017cac:	bd80      	pop	{r7, pc}
 8017cae:	46c0      	nop			; (mov r8, r8)
 8017cb0:	0801ef38 	.word	0x0801ef38
 8017cb4:	0003d090 	.word	0x0003d090
 8017cb8:	0007a120 	.word	0x0007a120

08017cbc <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017cbc:	b590      	push	{r4, r7, lr}
 8017cbe:	b085      	sub	sp, #20
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	0004      	movs	r4, r0
 8017cc4:	0008      	movs	r0, r1
 8017cc6:	0011      	movs	r1, r2
 8017cc8:	603b      	str	r3, [r7, #0]
 8017cca:	1dfb      	adds	r3, r7, #7
 8017ccc:	1c22      	adds	r2, r4, #0
 8017cce:	701a      	strb	r2, [r3, #0]
 8017cd0:	1dbb      	adds	r3, r7, #6
 8017cd2:	1c02      	adds	r2, r0, #0
 8017cd4:	701a      	strb	r2, [r3, #0]
 8017cd6:	1d7b      	adds	r3, r7, #5
 8017cd8:	1c0a      	adds	r2, r1, #0
 8017cda:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8017cdc:	210f      	movs	r1, #15
 8017cde:	187b      	adds	r3, r7, r1
 8017ce0:	1dfa      	adds	r2, r7, #7
 8017ce2:	7812      	ldrb	r2, [r2, #0]
 8017ce4:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8017ce6:	187a      	adds	r2, r7, r1
 8017ce8:	1dbb      	adds	r3, r7, #6
 8017cea:	1df9      	adds	r1, r7, #7
 8017cec:	780c      	ldrb	r4, [r1, #0]
 8017cee:	781b      	ldrb	r3, [r3, #0]
 8017cf0:	b258      	sxtb	r0, r3
 8017cf2:	b261      	sxtb	r1, r4
 8017cf4:	4288      	cmp	r0, r1
 8017cf6:	da00      	bge.n	8017cfa <LimitTxPower+0x3e>
 8017cf8:	1c23      	adds	r3, r4, #0
 8017cfa:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8017cfc:	230f      	movs	r3, #15
 8017cfe:	18fb      	adds	r3, r7, r3
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	b25b      	sxtb	r3, r3
}
 8017d04:	0018      	movs	r0, r3
 8017d06:	46bd      	mov	sp, r7
 8017d08:	b005      	add	sp, #20
 8017d0a:	bd90      	pop	{r4, r7, pc}

08017d0c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b082      	sub	sp, #8
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
 8017d14:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017d16:	4b2e      	ldr	r3, [pc, #184]	; (8017dd0 <VerifyRfFreq+0xc4>)
 8017d18:	6a1b      	ldr	r3, [r3, #32]
 8017d1a:	687a      	ldr	r2, [r7, #4]
 8017d1c:	0010      	movs	r0, r2
 8017d1e:	4798      	blx	r3
 8017d20:	0003      	movs	r3, r0
 8017d22:	001a      	movs	r2, r3
 8017d24:	2301      	movs	r3, #1
 8017d26:	4053      	eors	r3, r2
 8017d28:	b2db      	uxtb	r3, r3
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d001      	beq.n	8017d32 <VerifyRfFreq+0x26>
    {
        return false;
 8017d2e:	2300      	movs	r3, #0
 8017d30:	e04a      	b.n	8017dc8 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	4a27      	ldr	r2, [pc, #156]	; (8017dd4 <VerifyRfFreq+0xc8>)
 8017d36:	4293      	cmp	r3, r2
 8017d38:	d907      	bls.n	8017d4a <VerifyRfFreq+0x3e>
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	4a26      	ldr	r2, [pc, #152]	; (8017dd8 <VerifyRfFreq+0xcc>)
 8017d3e:	4293      	cmp	r3, r2
 8017d40:	d803      	bhi.n	8017d4a <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8017d42:	683b      	ldr	r3, [r7, #0]
 8017d44:	2202      	movs	r2, #2
 8017d46:	701a      	strb	r2, [r3, #0]
 8017d48:	e03d      	b.n	8017dc6 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	4a22      	ldr	r2, [pc, #136]	; (8017dd8 <VerifyRfFreq+0xcc>)
 8017d4e:	4293      	cmp	r3, r2
 8017d50:	d907      	bls.n	8017d62 <VerifyRfFreq+0x56>
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	4a21      	ldr	r2, [pc, #132]	; (8017ddc <VerifyRfFreq+0xd0>)
 8017d56:	4293      	cmp	r3, r2
 8017d58:	d803      	bhi.n	8017d62 <VerifyRfFreq+0x56>
    {
        *band = 0;
 8017d5a:	683b      	ldr	r3, [r7, #0]
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	701a      	strb	r2, [r3, #0]
 8017d60:	e031      	b.n	8017dc6 <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	4a1d      	ldr	r2, [pc, #116]	; (8017ddc <VerifyRfFreq+0xd0>)
 8017d66:	4293      	cmp	r3, r2
 8017d68:	d907      	bls.n	8017d7a <VerifyRfFreq+0x6e>
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	4a1c      	ldr	r2, [pc, #112]	; (8017de0 <VerifyRfFreq+0xd4>)
 8017d6e:	4293      	cmp	r3, r2
 8017d70:	d803      	bhi.n	8017d7a <VerifyRfFreq+0x6e>
    {
        *band = 1;
 8017d72:	683b      	ldr	r3, [r7, #0]
 8017d74:	2201      	movs	r2, #1
 8017d76:	701a      	strb	r2, [r3, #0]
 8017d78:	e025      	b.n	8017dc6 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	4a19      	ldr	r2, [pc, #100]	; (8017de4 <VerifyRfFreq+0xd8>)
 8017d7e:	4293      	cmp	r3, r2
 8017d80:	d907      	bls.n	8017d92 <VerifyRfFreq+0x86>
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	4a18      	ldr	r2, [pc, #96]	; (8017de8 <VerifyRfFreq+0xdc>)
 8017d86:	4293      	cmp	r3, r2
 8017d88:	d803      	bhi.n	8017d92 <VerifyRfFreq+0x86>
    {
        *band = 5;
 8017d8a:	683b      	ldr	r3, [r7, #0]
 8017d8c:	2205      	movs	r2, #5
 8017d8e:	701a      	strb	r2, [r3, #0]
 8017d90:	e019      	b.n	8017dc6 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	4a15      	ldr	r2, [pc, #84]	; (8017dec <VerifyRfFreq+0xe0>)
 8017d96:	4293      	cmp	r3, r2
 8017d98:	d907      	bls.n	8017daa <VerifyRfFreq+0x9e>
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	4a14      	ldr	r2, [pc, #80]	; (8017df0 <VerifyRfFreq+0xe4>)
 8017d9e:	4293      	cmp	r3, r2
 8017da0:	d803      	bhi.n	8017daa <VerifyRfFreq+0x9e>
    {
        *band = 3;
 8017da2:	683b      	ldr	r3, [r7, #0]
 8017da4:	2203      	movs	r2, #3
 8017da6:	701a      	strb	r2, [r3, #0]
 8017da8:	e00d      	b.n	8017dc6 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	4a11      	ldr	r2, [pc, #68]	; (8017df4 <VerifyRfFreq+0xe8>)
 8017dae:	4293      	cmp	r3, r2
 8017db0:	d907      	bls.n	8017dc2 <VerifyRfFreq+0xb6>
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	4a10      	ldr	r2, [pc, #64]	; (8017df8 <VerifyRfFreq+0xec>)
 8017db6:	4293      	cmp	r3, r2
 8017db8:	d803      	bhi.n	8017dc2 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 8017dba:	683b      	ldr	r3, [r7, #0]
 8017dbc:	2204      	movs	r2, #4
 8017dbe:	701a      	strb	r2, [r3, #0]
 8017dc0:	e001      	b.n	8017dc6 <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	e000      	b.n	8017dc8 <VerifyRfFreq+0xbc>
    }
    return true;
 8017dc6:	2301      	movs	r3, #1
}
 8017dc8:	0018      	movs	r0, r3
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	b002      	add	sp, #8
 8017dce:	bd80      	pop	{r7, pc}
 8017dd0:	0801f0b4 	.word	0x0801f0b4
 8017dd4:	337055bf 	.word	0x337055bf
 8017dd8:	338eda3f 	.word	0x338eda3f
 8017ddc:	33bca100 	.word	0x33bca100
 8017de0:	33c5c8c0 	.word	0x33c5c8c0
 8017de4:	33c74f5f 	.word	0x33c74f5f
 8017de8:	33cef080 	.word	0x33cef080
 8017dec:	33d1fdbf 	.word	0x33d1fdbf
 8017df0:	33d5ce50 	.word	0x33d5ce50
 8017df4:	33d6919f 	.word	0x33d6919f
 8017df8:	33db2580 	.word	0x33db2580

08017dfc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8017dfc:	b5b0      	push	{r4, r5, r7, lr}
 8017dfe:	b08a      	sub	sp, #40	; 0x28
 8017e00:	af04      	add	r7, sp, #16
 8017e02:	0002      	movs	r2, r0
 8017e04:	1dfb      	adds	r3, r7, #7
 8017e06:	701a      	strb	r2, [r3, #0]
 8017e08:	1d3b      	adds	r3, r7, #4
 8017e0a:	1c0a      	adds	r2, r1, #0
 8017e0c:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 8017e0e:	1dfb      	adds	r3, r7, #7
 8017e10:	781b      	ldrb	r3, [r3, #0]
 8017e12:	b25b      	sxtb	r3, r3
 8017e14:	4a26      	ldr	r2, [pc, #152]	; (8017eb0 <GetTimeOnAir+0xb4>)
 8017e16:	5cd2      	ldrb	r2, [r2, r3]
 8017e18:	2513      	movs	r5, #19
 8017e1a:	197b      	adds	r3, r7, r5
 8017e1c:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 8017e1e:	1dfb      	adds	r3, r7, #7
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	b25b      	sxtb	r3, r3
 8017e24:	0018      	movs	r0, r3
 8017e26:	f7ff ff2b 	bl	8017c80 <GetBandwidth>
 8017e2a:	0003      	movs	r3, r0
 8017e2c:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8017e2e:	2300      	movs	r3, #0
 8017e30:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8017e32:	1dfb      	adds	r3, r7, #7
 8017e34:	781b      	ldrb	r3, [r3, #0]
 8017e36:	b25b      	sxtb	r3, r3
 8017e38:	2b07      	cmp	r3, #7
 8017e3a:	d11d      	bne.n	8017e78 <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8017e3c:	4b1d      	ldr	r3, [pc, #116]	; (8017eb4 <GetTimeOnAir+0xb8>)
 8017e3e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017e40:	197b      	adds	r3, r7, r5
 8017e42:	2200      	movs	r2, #0
 8017e44:	569a      	ldrsb	r2, [r3, r2]
 8017e46:	0013      	movs	r3, r2
 8017e48:	015b      	lsls	r3, r3, #5
 8017e4a:	1a9b      	subs	r3, r3, r2
 8017e4c:	009b      	lsls	r3, r3, #2
 8017e4e:	189b      	adds	r3, r3, r2
 8017e50:	00db      	lsls	r3, r3, #3
 8017e52:	0018      	movs	r0, r3
 8017e54:	1d3b      	adds	r3, r7, #4
 8017e56:	881b      	ldrh	r3, [r3, #0]
 8017e58:	b2db      	uxtb	r3, r3
 8017e5a:	68f9      	ldr	r1, [r7, #12]
 8017e5c:	2201      	movs	r2, #1
 8017e5e:	9203      	str	r2, [sp, #12]
 8017e60:	9302      	str	r3, [sp, #8]
 8017e62:	2300      	movs	r3, #0
 8017e64:	9301      	str	r3, [sp, #4]
 8017e66:	2305      	movs	r3, #5
 8017e68:	9300      	str	r3, [sp, #0]
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	0002      	movs	r2, r0
 8017e6e:	2000      	movs	r0, #0
 8017e70:	47a0      	blx	r4
 8017e72:	0003      	movs	r3, r0
 8017e74:	617b      	str	r3, [r7, #20]
 8017e76:	e015      	b.n	8017ea4 <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8017e78:	4b0e      	ldr	r3, [pc, #56]	; (8017eb4 <GetTimeOnAir+0xb8>)
 8017e7a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017e7c:	2313      	movs	r3, #19
 8017e7e:	18fb      	adds	r3, r7, r3
 8017e80:	2200      	movs	r2, #0
 8017e82:	569a      	ldrsb	r2, [r3, r2]
 8017e84:	1d3b      	adds	r3, r7, #4
 8017e86:	881b      	ldrh	r3, [r3, #0]
 8017e88:	b2db      	uxtb	r3, r3
 8017e8a:	68f9      	ldr	r1, [r7, #12]
 8017e8c:	2001      	movs	r0, #1
 8017e8e:	9003      	str	r0, [sp, #12]
 8017e90:	9302      	str	r3, [sp, #8]
 8017e92:	2300      	movs	r3, #0
 8017e94:	9301      	str	r3, [sp, #4]
 8017e96:	2308      	movs	r3, #8
 8017e98:	9300      	str	r3, [sp, #0]
 8017e9a:	2301      	movs	r3, #1
 8017e9c:	2001      	movs	r0, #1
 8017e9e:	47a0      	blx	r4
 8017ea0:	0003      	movs	r3, r0
 8017ea2:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 8017ea4:	697b      	ldr	r3, [r7, #20]
}
 8017ea6:	0018      	movs	r0, r3
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	b006      	add	sp, #24
 8017eac:	bdb0      	pop	{r4, r5, r7, pc}
 8017eae:	46c0      	nop			; (mov r8, r8)
 8017eb0:	0801ef30 	.word	0x0801ef30
 8017eb4:	0801f0b4 	.word	0x0801f0b4

08017eb8 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b084      	sub	sp, #16
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017ec0:	2308      	movs	r3, #8
 8017ec2:	18fb      	adds	r3, r7, r3
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	781b      	ldrb	r3, [r3, #0]
 8017ecc:	2b39      	cmp	r3, #57	; 0x39
 8017ece:	d900      	bls.n	8017ed2 <RegionEU868GetPhyParam+0x1a>
 8017ed0:	e0e9      	b.n	80180a6 <RegionEU868GetPhyParam+0x1ee>
 8017ed2:	009a      	lsls	r2, r3, #2
 8017ed4:	4b7b      	ldr	r3, [pc, #492]	; (80180c4 <RegionEU868GetPhyParam+0x20c>)
 8017ed6:	18d3      	adds	r3, r2, r3
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8017edc:	2308      	movs	r3, #8
 8017ede:	18fb      	adds	r3, r7, r3
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	601a      	str	r2, [r3, #0]
            break;
 8017ee4:	e0e0      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8017ee6:	2308      	movs	r3, #8
 8017ee8:	18fb      	adds	r3, r7, r3
 8017eea:	2200      	movs	r2, #0
 8017eec:	601a      	str	r2, [r3, #0]
            break;
 8017eee:	e0db      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8017ef0:	2308      	movs	r3, #8
 8017ef2:	18fb      	adds	r3, r7, r3
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	601a      	str	r2, [r3, #0]
            break;
 8017ef8:	e0d6      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	785b      	ldrb	r3, [r3, #1]
 8017efe:	b25b      	sxtb	r3, r3
 8017f00:	2100      	movs	r1, #0
 8017f02:	0018      	movs	r0, r3
 8017f04:	f7ff fe94 	bl	8017c30 <GetNextLowerTxDr>
 8017f08:	0003      	movs	r3, r0
 8017f0a:	001a      	movs	r2, r3
 8017f0c:	2308      	movs	r3, #8
 8017f0e:	18fb      	adds	r3, r7, r3
 8017f10:	601a      	str	r2, [r3, #0]
            break;
 8017f12:	e0c9      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8017f14:	2308      	movs	r3, #8
 8017f16:	18fb      	adds	r3, r7, r3
 8017f18:	2200      	movs	r2, #0
 8017f1a:	601a      	str	r2, [r3, #0]
            break;
 8017f1c:	e0c4      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8017f1e:	2308      	movs	r3, #8
 8017f20:	18fb      	adds	r3, r7, r3
 8017f22:	2200      	movs	r2, #0
 8017f24:	601a      	str	r2, [r3, #0]
            break;
 8017f26:	e0bf      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8017f28:	2308      	movs	r3, #8
 8017f2a:	18fb      	adds	r3, r7, r3
 8017f2c:	2240      	movs	r2, #64	; 0x40
 8017f2e:	601a      	str	r2, [r3, #0]
            break;
 8017f30:	e0ba      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8017f32:	2308      	movs	r3, #8
 8017f34:	18fb      	adds	r3, r7, r3
 8017f36:	2220      	movs	r2, #32
 8017f38:	601a      	str	r2, [r3, #0]
            break;
 8017f3a:	e0b5      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	785b      	ldrb	r3, [r3, #1]
 8017f40:	b25b      	sxtb	r3, r3
 8017f42:	001a      	movs	r2, r3
 8017f44:	4b60      	ldr	r3, [pc, #384]	; (80180c8 <RegionEU868GetPhyParam+0x210>)
 8017f46:	5c9b      	ldrb	r3, [r3, r2]
 8017f48:	001a      	movs	r2, r3
 8017f4a:	2308      	movs	r3, #8
 8017f4c:	18fb      	adds	r3, r7, r3
 8017f4e:	601a      	str	r2, [r3, #0]
            break;
 8017f50:	e0aa      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	785b      	ldrb	r3, [r3, #1]
 8017f56:	b25b      	sxtb	r3, r3
 8017f58:	001a      	movs	r2, r3
 8017f5a:	4b5c      	ldr	r3, [pc, #368]	; (80180cc <RegionEU868GetPhyParam+0x214>)
 8017f5c:	5c9b      	ldrb	r3, [r3, r2]
 8017f5e:	001a      	movs	r2, r3
 8017f60:	2308      	movs	r3, #8
 8017f62:	18fb      	adds	r3, r7, r3
 8017f64:	601a      	str	r2, [r3, #0]
            break;
 8017f66:	e09f      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8017f68:	2308      	movs	r3, #8
 8017f6a:	18fb      	adds	r3, r7, r3
 8017f6c:	2201      	movs	r2, #1
 8017f6e:	601a      	str	r2, [r3, #0]
            break;
 8017f70:	e09a      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8017f72:	2308      	movs	r3, #8
 8017f74:	18fb      	adds	r3, r7, r3
 8017f76:	4a56      	ldr	r2, [pc, #344]	; (80180d0 <RegionEU868GetPhyParam+0x218>)
 8017f78:	601a      	str	r2, [r3, #0]
            break;
 8017f7a:	e095      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8017f7c:	2308      	movs	r3, #8
 8017f7e:	18fb      	adds	r3, r7, r3
 8017f80:	22fa      	movs	r2, #250	; 0xfa
 8017f82:	0092      	lsls	r2, r2, #2
 8017f84:	601a      	str	r2, [r3, #0]
            break;
 8017f86:	e08f      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8017f88:	2308      	movs	r3, #8
 8017f8a:	18fb      	adds	r3, r7, r3
 8017f8c:	22fa      	movs	r2, #250	; 0xfa
 8017f8e:	00d2      	lsls	r2, r2, #3
 8017f90:	601a      	str	r2, [r3, #0]
            break;
 8017f92:	e089      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8017f94:	2308      	movs	r3, #8
 8017f96:	18fb      	adds	r3, r7, r3
 8017f98:	4a4e      	ldr	r2, [pc, #312]	; (80180d4 <RegionEU868GetPhyParam+0x21c>)
 8017f9a:	601a      	str	r2, [r3, #0]
            break;
 8017f9c:	e084      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8017f9e:	2308      	movs	r3, #8
 8017fa0:	18fb      	adds	r3, r7, r3
 8017fa2:	4a4d      	ldr	r2, [pc, #308]	; (80180d8 <RegionEU868GetPhyParam+0x220>)
 8017fa4:	601a      	str	r2, [r3, #0]
            break;
 8017fa6:	e07f      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8017fa8:	2308      	movs	r3, #8
 8017faa:	18fb      	adds	r3, r7, r3
 8017fac:	2280      	movs	r2, #128	; 0x80
 8017fae:	01d2      	lsls	r2, r2, #7
 8017fb0:	601a      	str	r2, [r3, #0]
            break;
 8017fb2:	e079      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8017fb4:	23fa      	movs	r3, #250	; 0xfa
 8017fb6:	009b      	lsls	r3, r3, #2
 8017fb8:	4a48      	ldr	r2, [pc, #288]	; (80180dc <RegionEU868GetPhyParam+0x224>)
 8017fba:	0019      	movs	r1, r3
 8017fbc:	0010      	movs	r0, r2
 8017fbe:	f001 f983 	bl	80192c8 <randr>
 8017fc2:	0003      	movs	r3, r0
 8017fc4:	22fa      	movs	r2, #250	; 0xfa
 8017fc6:	00d2      	lsls	r2, r2, #3
 8017fc8:	4694      	mov	ip, r2
 8017fca:	4463      	add	r3, ip
 8017fcc:	001a      	movs	r2, r3
 8017fce:	2308      	movs	r3, #8
 8017fd0:	18fb      	adds	r3, r7, r3
 8017fd2:	601a      	str	r2, [r3, #0]
            break;
 8017fd4:	e068      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8017fd6:	2308      	movs	r3, #8
 8017fd8:	18fb      	adds	r3, r7, r3
 8017fda:	2200      	movs	r2, #0
 8017fdc:	601a      	str	r2, [r3, #0]
            break;
 8017fde:	e063      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8017fe0:	2308      	movs	r3, #8
 8017fe2:	18fb      	adds	r3, r7, r3
 8017fe4:	4a3e      	ldr	r2, [pc, #248]	; (80180e0 <RegionEU868GetPhyParam+0x228>)
 8017fe6:	601a      	str	r2, [r3, #0]
            break;
 8017fe8:	e05e      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8017fea:	2308      	movs	r3, #8
 8017fec:	18fb      	adds	r3, r7, r3
 8017fee:	2200      	movs	r2, #0
 8017ff0:	601a      	str	r2, [r3, #0]
            break;
 8017ff2:	e059      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8017ff4:	2308      	movs	r3, #8
 8017ff6:	18fb      	adds	r3, r7, r3
 8017ff8:	4a3a      	ldr	r2, [pc, #232]	; (80180e4 <RegionEU868GetPhyParam+0x22c>)
 8017ffa:	601a      	str	r2, [r3, #0]
            break;
 8017ffc:	e054      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8017ffe:	2308      	movs	r3, #8
 8018000:	18fb      	adds	r3, r7, r3
 8018002:	4a39      	ldr	r2, [pc, #228]	; (80180e8 <RegionEU868GetPhyParam+0x230>)
 8018004:	601a      	str	r2, [r3, #0]
            break;
 8018006:	e04f      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018008:	2308      	movs	r3, #8
 801800a:	18fb      	adds	r3, r7, r3
 801800c:	2210      	movs	r2, #16
 801800e:	601a      	str	r2, [r3, #0]
            break;
 8018010:	e04a      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8018012:	2308      	movs	r3, #8
 8018014:	18fb      	adds	r3, r7, r3
 8018016:	4a35      	ldr	r2, [pc, #212]	; (80180ec <RegionEU868GetPhyParam+0x234>)
 8018018:	601a      	str	r2, [r3, #0]
            break;
 801801a:	e045      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 801801c:	2308      	movs	r3, #8
 801801e:	18fb      	adds	r3, r7, r3
 8018020:	2200      	movs	r2, #0
 8018022:	601a      	str	r2, [r3, #0]
            break;
 8018024:	e040      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018026:	2308      	movs	r3, #8
 8018028:	18fb      	adds	r3, r7, r3
 801802a:	2283      	movs	r2, #131	; 0x83
 801802c:	05d2      	lsls	r2, r2, #23
 801802e:	601a      	str	r2, [r3, #0]
            break;
 8018030:	e03a      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018032:	2308      	movs	r3, #8
 8018034:	18fb      	adds	r3, r7, r3
 8018036:	4a2e      	ldr	r2, [pc, #184]	; (80180f0 <RegionEU868GetPhyParam+0x238>)
 8018038:	601a      	str	r2, [r3, #0]
            break;
 801803a:	e035      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801803c:	2308      	movs	r3, #8
 801803e:	18fb      	adds	r3, r7, r3
 8018040:	4a27      	ldr	r2, [pc, #156]	; (80180e0 <RegionEU868GetPhyParam+0x228>)
 8018042:	601a      	str	r2, [r3, #0]
            break;
 8018044:	e030      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018046:	2108      	movs	r1, #8
 8018048:	187b      	adds	r3, r7, r1
 801804a:	2211      	movs	r2, #17
 801804c:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801804e:	187b      	adds	r3, r7, r1
 8018050:	2202      	movs	r2, #2
 8018052:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018054:	187b      	adds	r3, r7, r1
 8018056:	2200      	movs	r2, #0
 8018058:	709a      	strb	r2, [r3, #2]
            break;
 801805a:	e025      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801805c:	2308      	movs	r3, #8
 801805e:	18fb      	adds	r3, r7, r3
 8018060:	2203      	movs	r2, #3
 8018062:	601a      	str	r2, [r3, #0]
            break;
 8018064:	e020      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018066:	2308      	movs	r3, #8
 8018068:	18fb      	adds	r3, r7, r3
 801806a:	4a1d      	ldr	r2, [pc, #116]	; (80180e0 <RegionEU868GetPhyParam+0x228>)
 801806c:	601a      	str	r2, [r3, #0]
            break;
 801806e:	e01b      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018070:	2308      	movs	r3, #8
 8018072:	18fb      	adds	r3, r7, r3
 8018074:	2203      	movs	r2, #3
 8018076:	601a      	str	r2, [r3, #0]
            break;
 8018078:	e016      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	785b      	ldrb	r3, [r3, #1]
 801807e:	b25b      	sxtb	r3, r3
 8018080:	001a      	movs	r2, r3
 8018082:	4b1c      	ldr	r3, [pc, #112]	; (80180f4 <RegionEU868GetPhyParam+0x23c>)
 8018084:	5c9b      	ldrb	r3, [r3, r2]
 8018086:	001a      	movs	r2, r3
 8018088:	2308      	movs	r3, #8
 801808a:	18fb      	adds	r3, r7, r3
 801808c:	601a      	str	r2, [r3, #0]
            break;
 801808e:	e00b      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	785b      	ldrb	r3, [r3, #1]
 8018094:	b25b      	sxtb	r3, r3
 8018096:	0018      	movs	r0, r3
 8018098:	f7ff fdf2 	bl	8017c80 <GetBandwidth>
 801809c:	0002      	movs	r2, r0
 801809e:	2308      	movs	r3, #8
 80180a0:	18fb      	adds	r3, r7, r3
 80180a2:	601a      	str	r2, [r3, #0]
            break;
 80180a4:	e000      	b.n	80180a8 <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 80180a6:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80180a8:	210c      	movs	r1, #12
 80180aa:	187b      	adds	r3, r7, r1
 80180ac:	2208      	movs	r2, #8
 80180ae:	18ba      	adds	r2, r7, r2
 80180b0:	6812      	ldr	r2, [r2, #0]
 80180b2:	601a      	str	r2, [r3, #0]
 80180b4:	187b      	adds	r3, r7, r1
 80180b6:	2200      	movs	r2, #0
 80180b8:	681a      	ldr	r2, [r3, #0]
 80180ba:	0013      	movs	r3, r2
}
 80180bc:	0018      	movs	r0, r3
 80180be:	46bd      	mov	sp, r7
 80180c0:	b004      	add	sp, #16
 80180c2:	bd80      	pop	{r7, pc}
 80180c4:	0801ef68 	.word	0x0801ef68
 80180c8:	0801ef58 	.word	0x0801ef58
 80180cc:	0801ef60 	.word	0x0801ef60
 80180d0:	00000bb8 	.word	0x00000bb8
 80180d4:	00001388 	.word	0x00001388
 80180d8:	00001770 	.word	0x00001770
 80180dc:	fffffc18 	.word	0xfffffc18
 80180e0:	33d3e608 	.word	0x33d3e608
 80180e4:	20000e0c 	.word	0x20000e0c
 80180e8:	20000e0e 	.word	0x20000e0e
 80180ec:	20000cd4 	.word	0x20000cd4
 80180f0:	4009999a 	.word	0x4009999a
 80180f4:	0801ef30 	.word	0x0801ef30

080180f8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80180f8:	b5b0      	push	{r4, r5, r7, lr}
 80180fa:	b084      	sub	sp, #16
 80180fc:	af02      	add	r7, sp, #8
 80180fe:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	781b      	ldrb	r3, [r3, #0]
 8018104:	0019      	movs	r1, r3
 8018106:	4a11      	ldr	r2, [pc, #68]	; (801814c <RegionEU868SetBandTxDone+0x54>)
 8018108:	000b      	movs	r3, r1
 801810a:	005b      	lsls	r3, r3, #1
 801810c:	185b      	adds	r3, r3, r1
 801810e:	009b      	lsls	r3, r3, #2
 8018110:	18d3      	adds	r3, r2, r3
 8018112:	3309      	adds	r3, #9
 8018114:	781b      	ldrb	r3, [r3, #0]
 8018116:	001a      	movs	r2, r3
 8018118:	0013      	movs	r3, r2
 801811a:	009b      	lsls	r3, r3, #2
 801811c:	189b      	adds	r3, r3, r2
 801811e:	009b      	lsls	r3, r3, #2
 8018120:	33c0      	adds	r3, #192	; 0xc0
 8018122:	001a      	movs	r2, r3
 8018124:	4b09      	ldr	r3, [pc, #36]	; (801814c <RegionEU868SetBandTxDone+0x54>)
 8018126:	18d0      	adds	r0, r2, r3
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	689c      	ldr	r4, [r3, #8]
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	785d      	ldrb	r5, [r3, #1]
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	466a      	mov	r2, sp
 8018134:	6919      	ldr	r1, [r3, #16]
 8018136:	6011      	str	r1, [r2, #0]
 8018138:	68db      	ldr	r3, [r3, #12]
 801813a:	002a      	movs	r2, r5
 801813c:	0021      	movs	r1, r4
 801813e:	f7ff f92e 	bl	801739e <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 8018142:	46c0      	nop			; (mov r8, r8)
 8018144:	46bd      	mov	sp, r7
 8018146:	b002      	add	sp, #8
 8018148:	bdb0      	pop	{r4, r5, r7, pc}
 801814a:	46c0      	nop			; (mov r8, r8)
 801814c:	20000cd4 	.word	0x20000cd4

08018150 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018150:	b590      	push	{r4, r7, lr}
 8018152:	b0ab      	sub	sp, #172	; 0xac
 8018154:	af00      	add	r7, sp, #0
 8018156:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018158:	2430      	movs	r4, #48	; 0x30
 801815a:	193b      	adds	r3, r7, r4
 801815c:	0018      	movs	r0, r3
 801815e:	2378      	movs	r3, #120	; 0x78
 8018160:	001a      	movs	r2, r3
 8018162:	2100      	movs	r1, #0
 8018164:	f005 fe1d 	bl	801dda2 <memset>
 8018168:	0021      	movs	r1, r4
 801816a:	187b      	adds	r3, r7, r1
 801816c:	2264      	movs	r2, #100	; 0x64
 801816e:	801a      	strh	r2, [r3, #0]
 8018170:	187b      	adds	r3, r7, r1
 8018172:	2264      	movs	r2, #100	; 0x64
 8018174:	829a      	strh	r2, [r3, #20]
 8018176:	187b      	adds	r3, r7, r1
 8018178:	22fa      	movs	r2, #250	; 0xfa
 801817a:	0092      	lsls	r2, r2, #2
 801817c:	851a      	strh	r2, [r3, #40]	; 0x28
 801817e:	187b      	adds	r3, r7, r1
 8018180:	220a      	movs	r2, #10
 8018182:	879a      	strh	r2, [r3, #60]	; 0x3c
 8018184:	0008      	movs	r0, r1
 8018186:	187b      	adds	r3, r7, r1
 8018188:	2250      	movs	r2, #80	; 0x50
 801818a:	2164      	movs	r1, #100	; 0x64
 801818c:	5299      	strh	r1, [r3, r2]
 801818e:	183b      	adds	r3, r7, r0
 8018190:	2264      	movs	r2, #100	; 0x64
 8018192:	21fa      	movs	r1, #250	; 0xfa
 8018194:	0089      	lsls	r1, r1, #2
 8018196:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	791b      	ldrb	r3, [r3, #4]
 801819c:	2b03      	cmp	r3, #3
 801819e:	d048      	beq.n	8018232 <RegionEU868InitDefaults+0xe2>
 80181a0:	dc54      	bgt.n	801824c <RegionEU868InitDefaults+0xfc>
 80181a2:	2b02      	cmp	r3, #2
 80181a4:	d036      	beq.n	8018214 <RegionEU868InitDefaults+0xc4>
 80181a6:	dc51      	bgt.n	801824c <RegionEU868InitDefaults+0xfc>
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d002      	beq.n	80181b2 <RegionEU868InitDefaults+0x62>
 80181ac:	2b01      	cmp	r3, #1
 80181ae:	d021      	beq.n	80181f4 <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 80181b0:	e04c      	b.n	801824c <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80181b2:	2330      	movs	r3, #48	; 0x30
 80181b4:	18f9      	adds	r1, r7, r3
 80181b6:	4b29      	ldr	r3, [pc, #164]	; (801825c <RegionEU868InitDefaults+0x10c>)
 80181b8:	2278      	movs	r2, #120	; 0x78
 80181ba:	0018      	movs	r0, r3
 80181bc:	f001 f89a 	bl	80192f4 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80181c0:	4b27      	ldr	r3, [pc, #156]	; (8018260 <RegionEU868InitDefaults+0x110>)
 80181c2:	4a28      	ldr	r2, [pc, #160]	; (8018264 <RegionEU868InitDefaults+0x114>)
 80181c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80181c6:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80181c8:	4b25      	ldr	r3, [pc, #148]	; (8018260 <RegionEU868InitDefaults+0x110>)
 80181ca:	4a27      	ldr	r2, [pc, #156]	; (8018268 <RegionEU868InitDefaults+0x118>)
 80181cc:	330c      	adds	r3, #12
 80181ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80181d0:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80181d2:	4b23      	ldr	r3, [pc, #140]	; (8018260 <RegionEU868InitDefaults+0x110>)
 80181d4:	4a25      	ldr	r2, [pc, #148]	; (801826c <RegionEU868InitDefaults+0x11c>)
 80181d6:	3318      	adds	r3, #24
 80181d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80181da:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80181dc:	4a20      	ldr	r2, [pc, #128]	; (8018260 <RegionEU868InitDefaults+0x110>)
 80181de:	239d      	movs	r3, #157	; 0x9d
 80181e0:	005b      	lsls	r3, r3, #1
 80181e2:	2107      	movs	r1, #7
 80181e4:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80181e6:	4922      	ldr	r1, [pc, #136]	; (8018270 <RegionEU868InitDefaults+0x120>)
 80181e8:	4b22      	ldr	r3, [pc, #136]	; (8018274 <RegionEU868InitDefaults+0x124>)
 80181ea:	2201      	movs	r2, #1
 80181ec:	0018      	movs	r0, r3
 80181ee:	f7ff f8a7 	bl	8017340 <RegionCommonChanMaskCopy>
            break;
 80181f2:	e02e      	b.n	8018252 <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 80181f4:	4b1a      	ldr	r3, [pc, #104]	; (8018260 <RegionEU868InitDefaults+0x110>)
 80181f6:	2200      	movs	r2, #0
 80181f8:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 80181fa:	4b19      	ldr	r3, [pc, #100]	; (8018260 <RegionEU868InitDefaults+0x110>)
 80181fc:	2200      	movs	r2, #0
 80181fe:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 8018200:	4b17      	ldr	r3, [pc, #92]	; (8018260 <RegionEU868InitDefaults+0x110>)
 8018202:	2200      	movs	r2, #0
 8018204:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018206:	491a      	ldr	r1, [pc, #104]	; (8018270 <RegionEU868InitDefaults+0x120>)
 8018208:	4b1a      	ldr	r3, [pc, #104]	; (8018274 <RegionEU868InitDefaults+0x124>)
 801820a:	2201      	movs	r2, #1
 801820c:	0018      	movs	r0, r3
 801820e:	f7ff f897 	bl	8017340 <RegionCommonChanMaskCopy>
            break;
 8018212:	e01e      	b.n	8018252 <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8018214:	4a12      	ldr	r2, [pc, #72]	; (8018260 <RegionEU868InitDefaults+0x110>)
 8018216:	239c      	movs	r3, #156	; 0x9c
 8018218:	005b      	lsls	r3, r3, #1
 801821a:	5ad2      	ldrh	r2, [r2, r3]
 801821c:	4910      	ldr	r1, [pc, #64]	; (8018260 <RegionEU868InitDefaults+0x110>)
 801821e:	239d      	movs	r3, #157	; 0x9d
 8018220:	005b      	lsls	r3, r3, #1
 8018222:	5acb      	ldrh	r3, [r1, r3]
 8018224:	4313      	orrs	r3, r2
 8018226:	b299      	uxth	r1, r3
 8018228:	4a0d      	ldr	r2, [pc, #52]	; (8018260 <RegionEU868InitDefaults+0x110>)
 801822a:	239c      	movs	r3, #156	; 0x9c
 801822c:	005b      	lsls	r3, r3, #1
 801822e:	52d1      	strh	r1, [r2, r3]
            break;
 8018230:	e00f      	b.n	8018252 <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d00a      	beq.n	8018250 <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	6819      	ldr	r1, [r3, #0]
 801823e:	239e      	movs	r3, #158	; 0x9e
 8018240:	005a      	lsls	r2, r3, #1
 8018242:	4b07      	ldr	r3, [pc, #28]	; (8018260 <RegionEU868InitDefaults+0x110>)
 8018244:	0018      	movs	r0, r3
 8018246:	f001 f855 	bl	80192f4 <memcpy1>
            break;
 801824a:	e001      	b.n	8018250 <RegionEU868InitDefaults+0x100>
            break;
 801824c:	46c0      	nop			; (mov r8, r8)
 801824e:	e000      	b.n	8018252 <RegionEU868InitDefaults+0x102>
            break;
 8018250:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018252:	46c0      	nop			; (mov r8, r8)
 8018254:	46bd      	mov	sp, r7
 8018256:	b02b      	add	sp, #172	; 0xac
 8018258:	bd90      	pop	{r4, r7, pc}
 801825a:	46c0      	nop			; (mov r8, r8)
 801825c:	20000d94 	.word	0x20000d94
 8018260:	20000cd4 	.word	0x20000cd4
 8018264:	0801f050 	.word	0x0801f050
 8018268:	0801f05c 	.word	0x0801f05c
 801826c:	0801f068 	.word	0x0801f068
 8018270:	20000e0e 	.word	0x20000e0e
 8018274:	20000e0c 	.word	0x20000e0c

08018278 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b082      	sub	sp, #8
 801827c:	af00      	add	r7, sp, #0
 801827e:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	229e      	movs	r2, #158	; 0x9e
 8018284:	0052      	lsls	r2, r2, #1
 8018286:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8018288:	4b02      	ldr	r3, [pc, #8]	; (8018294 <RegionEU868GetNvmCtx+0x1c>)
}
 801828a:	0018      	movs	r0, r3
 801828c:	46bd      	mov	sp, r7
 801828e:	b002      	add	sp, #8
 8018290:	bd80      	pop	{r7, pc}
 8018292:	46c0      	nop			; (mov r8, r8)
 8018294:	20000cd4 	.word	0x20000cd4

08018298 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b084      	sub	sp, #16
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
 80182a0:	000a      	movs	r2, r1
 80182a2:	1cfb      	adds	r3, r7, #3
 80182a4:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 80182a6:	1cfb      	adds	r3, r7, #3
 80182a8:	781b      	ldrb	r3, [r3, #0]
 80182aa:	2b0f      	cmp	r3, #15
 80182ac:	d847      	bhi.n	801833e <RegionEU868Verify+0xa6>
 80182ae:	009a      	lsls	r2, r3, #2
 80182b0:	4b25      	ldr	r3, [pc, #148]	; (8018348 <RegionEU868Verify+0xb0>)
 80182b2:	18d3      	adds	r3, r2, r3
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80182b8:	210f      	movs	r1, #15
 80182ba:	187b      	adds	r3, r7, r1
 80182bc:	2200      	movs	r2, #0
 80182be:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	187a      	adds	r2, r7, r1
 80182c6:	0011      	movs	r1, r2
 80182c8:	0018      	movs	r0, r3
 80182ca:	f7ff fd1f 	bl	8017d0c <VerifyRfFreq>
 80182ce:	0003      	movs	r3, r0
 80182d0:	e036      	b.n	8018340 <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	781b      	ldrb	r3, [r3, #0]
 80182d6:	b25b      	sxtb	r3, r3
 80182d8:	2207      	movs	r2, #7
 80182da:	2100      	movs	r1, #0
 80182dc:	0018      	movs	r0, r3
 80182de:	f7fe ff86 	bl	80171ee <RegionCommonValueInRange>
 80182e2:	0003      	movs	r3, r0
 80182e4:	1e5a      	subs	r2, r3, #1
 80182e6:	4193      	sbcs	r3, r2
 80182e8:	b2db      	uxtb	r3, r3
 80182ea:	e029      	b.n	8018340 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	781b      	ldrb	r3, [r3, #0]
 80182f0:	b25b      	sxtb	r3, r3
 80182f2:	2205      	movs	r2, #5
 80182f4:	2100      	movs	r1, #0
 80182f6:	0018      	movs	r0, r3
 80182f8:	f7fe ff79 	bl	80171ee <RegionCommonValueInRange>
 80182fc:	0003      	movs	r3, r0
 80182fe:	1e5a      	subs	r2, r3, #1
 8018300:	4193      	sbcs	r3, r2
 8018302:	b2db      	uxtb	r3, r3
 8018304:	e01c      	b.n	8018340 <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	781b      	ldrb	r3, [r3, #0]
 801830a:	b25b      	sxtb	r3, r3
 801830c:	2207      	movs	r2, #7
 801830e:	2100      	movs	r1, #0
 8018310:	0018      	movs	r0, r3
 8018312:	f7fe ff6c 	bl	80171ee <RegionCommonValueInRange>
 8018316:	0003      	movs	r3, r0
 8018318:	1e5a      	subs	r2, r3, #1
 801831a:	4193      	sbcs	r3, r2
 801831c:	b2db      	uxtb	r3, r3
 801831e:	e00f      	b.n	8018340 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	781b      	ldrb	r3, [r3, #0]
 8018324:	b25b      	sxtb	r3, r3
 8018326:	2207      	movs	r2, #7
 8018328:	2100      	movs	r1, #0
 801832a:	0018      	movs	r0, r3
 801832c:	f7fe ff5f 	bl	80171ee <RegionCommonValueInRange>
 8018330:	0003      	movs	r3, r0
 8018332:	1e5a      	subs	r2, r3, #1
 8018334:	4193      	sbcs	r3, r2
 8018336:	b2db      	uxtb	r3, r3
 8018338:	e002      	b.n	8018340 <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801833a:	2301      	movs	r3, #1
 801833c:	e000      	b.n	8018340 <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 801833e:	2300      	movs	r3, #0
    }
}
 8018340:	0018      	movs	r0, r3
 8018342:	46bd      	mov	sp, r7
 8018344:	b004      	add	sp, #16
 8018346:	bd80      	pop	{r7, pc}
 8018348:	0801f074 	.word	0x0801f074

0801834c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801834c:	b590      	push	{r4, r7, lr}
 801834e:	b08b      	sub	sp, #44	; 0x2c
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018354:	2318      	movs	r3, #24
 8018356:	18fb      	adds	r3, r7, r3
 8018358:	2250      	movs	r2, #80	; 0x50
 801835a:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	791b      	ldrb	r3, [r3, #4]
 8018360:	2b10      	cmp	r3, #16
 8018362:	d000      	beq.n	8018366 <RegionEU868ApplyCFList+0x1a>
 8018364:	e07c      	b.n	8018460 <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	330f      	adds	r3, #15
 801836c:	781b      	ldrb	r3, [r3, #0]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d000      	beq.n	8018374 <RegionEU868ApplyCFList+0x28>
 8018372:	e077      	b.n	8018464 <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018374:	2327      	movs	r3, #39	; 0x27
 8018376:	18fb      	adds	r3, r7, r3
 8018378:	2200      	movs	r2, #0
 801837a:	701a      	strb	r2, [r3, #0]
 801837c:	2326      	movs	r3, #38	; 0x26
 801837e:	18fb      	adds	r3, r7, r3
 8018380:	2203      	movs	r2, #3
 8018382:	701a      	strb	r2, [r3, #0]
 8018384:	e066      	b.n	8018454 <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8018386:	2326      	movs	r3, #38	; 0x26
 8018388:	18fb      	adds	r3, r7, r3
 801838a:	781b      	ldrb	r3, [r3, #0]
 801838c:	2b07      	cmp	r3, #7
 801838e:	d82e      	bhi.n	80183ee <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681a      	ldr	r2, [r3, #0]
 8018394:	2427      	movs	r4, #39	; 0x27
 8018396:	193b      	adds	r3, r7, r4
 8018398:	781b      	ldrb	r3, [r3, #0]
 801839a:	18d3      	adds	r3, r2, r3
 801839c:	781b      	ldrb	r3, [r3, #0]
 801839e:	001a      	movs	r2, r3
 80183a0:	2018      	movs	r0, #24
 80183a2:	183b      	adds	r3, r7, r0
 80183a4:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80183a6:	183b      	adds	r3, r7, r0
 80183a8:	681a      	ldr	r2, [r3, #0]
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	6819      	ldr	r1, [r3, #0]
 80183ae:	193b      	adds	r3, r7, r4
 80183b0:	781b      	ldrb	r3, [r3, #0]
 80183b2:	3301      	adds	r3, #1
 80183b4:	18cb      	adds	r3, r1, r3
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	021b      	lsls	r3, r3, #8
 80183ba:	431a      	orrs	r2, r3
 80183bc:	183b      	adds	r3, r7, r0
 80183be:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80183c0:	183b      	adds	r3, r7, r0
 80183c2:	681a      	ldr	r2, [r3, #0]
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	6819      	ldr	r1, [r3, #0]
 80183c8:	193b      	adds	r3, r7, r4
 80183ca:	781b      	ldrb	r3, [r3, #0]
 80183cc:	3302      	adds	r3, #2
 80183ce:	18cb      	adds	r3, r1, r3
 80183d0:	781b      	ldrb	r3, [r3, #0]
 80183d2:	041b      	lsls	r3, r3, #16
 80183d4:	431a      	orrs	r2, r3
 80183d6:	183b      	adds	r3, r7, r0
 80183d8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80183da:	183b      	adds	r3, r7, r0
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	2264      	movs	r2, #100	; 0x64
 80183e0:	435a      	muls	r2, r3
 80183e2:	183b      	adds	r3, r7, r0
 80183e4:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80183e6:	183b      	adds	r3, r7, r0
 80183e8:	2200      	movs	r2, #0
 80183ea:	605a      	str	r2, [r3, #4]
 80183ec:	e009      	b.n	8018402 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 80183ee:	2118      	movs	r1, #24
 80183f0:	187b      	adds	r3, r7, r1
 80183f2:	2200      	movs	r2, #0
 80183f4:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 80183f6:	187b      	adds	r3, r7, r1
 80183f8:	2200      	movs	r2, #0
 80183fa:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 80183fc:	187b      	adds	r3, r7, r1
 80183fe:	2200      	movs	r2, #0
 8018400:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8018402:	2218      	movs	r2, #24
 8018404:	18bb      	adds	r3, r7, r2
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d00d      	beq.n	8018428 <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 801840c:	2110      	movs	r1, #16
 801840e:	187b      	adds	r3, r7, r1
 8018410:	18ba      	adds	r2, r7, r2
 8018412:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8018414:	187b      	adds	r3, r7, r1
 8018416:	2226      	movs	r2, #38	; 0x26
 8018418:	18ba      	adds	r2, r7, r2
 801841a:	7812      	ldrb	r2, [r2, #0]
 801841c:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801841e:	187b      	adds	r3, r7, r1
 8018420:	0018      	movs	r0, r3
 8018422:	f000 fdb5 	bl	8018f90 <RegionEU868ChannelAdd>
 8018426:	e009      	b.n	801843c <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018428:	210c      	movs	r1, #12
 801842a:	187b      	adds	r3, r7, r1
 801842c:	2226      	movs	r2, #38	; 0x26
 801842e:	18ba      	adds	r2, r7, r2
 8018430:	7812      	ldrb	r2, [r2, #0]
 8018432:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8018434:	187b      	adds	r3, r7, r1
 8018436:	0018      	movs	r0, r3
 8018438:	f000 fe6e 	bl	8019118 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801843c:	2227      	movs	r2, #39	; 0x27
 801843e:	18bb      	adds	r3, r7, r2
 8018440:	18ba      	adds	r2, r7, r2
 8018442:	7812      	ldrb	r2, [r2, #0]
 8018444:	3203      	adds	r2, #3
 8018446:	701a      	strb	r2, [r3, #0]
 8018448:	2126      	movs	r1, #38	; 0x26
 801844a:	187b      	adds	r3, r7, r1
 801844c:	781a      	ldrb	r2, [r3, #0]
 801844e:	187b      	adds	r3, r7, r1
 8018450:	3201      	adds	r2, #1
 8018452:	701a      	strb	r2, [r3, #0]
 8018454:	2326      	movs	r3, #38	; 0x26
 8018456:	18fb      	adds	r3, r7, r3
 8018458:	781b      	ldrb	r3, [r3, #0]
 801845a:	2b0f      	cmp	r3, #15
 801845c:	d993      	bls.n	8018386 <RegionEU868ApplyCFList+0x3a>
 801845e:	e002      	b.n	8018466 <RegionEU868ApplyCFList+0x11a>
        return;
 8018460:	46c0      	nop			; (mov r8, r8)
 8018462:	e000      	b.n	8018466 <RegionEU868ApplyCFList+0x11a>
        return;
 8018464:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018466:	46bd      	mov	sp, r7
 8018468:	b00b      	add	sp, #44	; 0x2c
 801846a:	bd90      	pop	{r4, r7, pc}

0801846c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	791b      	ldrb	r3, [r3, #4]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d002      	beq.n	8018482 <RegionEU868ChanMaskSet+0x16>
 801847c:	2b01      	cmp	r3, #1
 801847e:	d008      	beq.n	8018492 <RegionEU868ChanMaskSet+0x26>
 8018480:	e00f      	b.n	80184a2 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	6819      	ldr	r1, [r3, #0]
 8018486:	4b0a      	ldr	r3, [pc, #40]	; (80184b0 <RegionEU868ChanMaskSet+0x44>)
 8018488:	2201      	movs	r2, #1
 801848a:	0018      	movs	r0, r3
 801848c:	f7fe ff58 	bl	8017340 <RegionCommonChanMaskCopy>
            break;
 8018490:	e009      	b.n	80184a6 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	6819      	ldr	r1, [r3, #0]
 8018496:	4b07      	ldr	r3, [pc, #28]	; (80184b4 <RegionEU868ChanMaskSet+0x48>)
 8018498:	2201      	movs	r2, #1
 801849a:	0018      	movs	r0, r3
 801849c:	f7fe ff50 	bl	8017340 <RegionCommonChanMaskCopy>
            break;
 80184a0:	e001      	b.n	80184a6 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 80184a2:	2300      	movs	r3, #0
 80184a4:	e000      	b.n	80184a8 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 80184a6:	2301      	movs	r3, #1
}
 80184a8:	0018      	movs	r0, r3
 80184aa:	46bd      	mov	sp, r7
 80184ac:	b002      	add	sp, #8
 80184ae:	bd80      	pop	{r7, pc}
 80184b0:	20000e0c 	.word	0x20000e0c
 80184b4:	20000e0e 	.word	0x20000e0e

080184b8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80184b8:	b5b0      	push	{r4, r5, r7, lr}
 80184ba:	b088      	sub	sp, #32
 80184bc:	af02      	add	r7, sp, #8
 80184be:	60ba      	str	r2, [r7, #8]
 80184c0:	607b      	str	r3, [r7, #4]
 80184c2:	240f      	movs	r4, #15
 80184c4:	193b      	adds	r3, r7, r4
 80184c6:	1c02      	adds	r2, r0, #0
 80184c8:	701a      	strb	r2, [r3, #0]
 80184ca:	230e      	movs	r3, #14
 80184cc:	18fb      	adds	r3, r7, r3
 80184ce:	1c0a      	adds	r2, r1, #0
 80184d0:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 80184d2:	2300      	movs	r3, #0
 80184d4:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80184d6:	193b      	adds	r3, r7, r4
 80184d8:	781b      	ldrb	r3, [r3, #0]
 80184da:	b25a      	sxtb	r2, r3
 80184dc:	2a07      	cmp	r2, #7
 80184de:	dd00      	ble.n	80184e2 <RegionEU868ComputeRxWindowParameters+0x2a>
 80184e0:	2307      	movs	r3, #7
 80184e2:	b25a      	sxtb	r2, r3
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	785b      	ldrb	r3, [r3, #1]
 80184ec:	b25b      	sxtb	r3, r3
 80184ee:	0018      	movs	r0, r3
 80184f0:	f7ff fbc6 	bl	8017c80 <GetBandwidth>
 80184f4:	0003      	movs	r3, r0
 80184f6:	b2da      	uxtb	r2, r3
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	785b      	ldrb	r3, [r3, #1]
 8018500:	b25b      	sxtb	r3, r3
 8018502:	2b07      	cmp	r3, #7
 8018504:	d10b      	bne.n	801851e <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	785b      	ldrb	r3, [r3, #1]
 801850a:	b25b      	sxtb	r3, r3
 801850c:	001a      	movs	r2, r3
 801850e:	4b18      	ldr	r3, [pc, #96]	; (8018570 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8018510:	5c9b      	ldrb	r3, [r3, r2]
 8018512:	0018      	movs	r0, r3
 8018514:	f7ff f954 	bl	80177c0 <RegionCommonComputeSymbolTimeFsk>
 8018518:	0003      	movs	r3, r0
 801851a:	617b      	str	r3, [r7, #20]
 801851c:	e011      	b.n	8018542 <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	785b      	ldrb	r3, [r3, #1]
 8018522:	b25b      	sxtb	r3, r3
 8018524:	001a      	movs	r2, r3
 8018526:	4b12      	ldr	r3, [pc, #72]	; (8018570 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8018528:	5c98      	ldrb	r0, [r3, r2]
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	785b      	ldrb	r3, [r3, #1]
 801852e:	b25b      	sxtb	r3, r3
 8018530:	001a      	movs	r2, r3
 8018532:	4b10      	ldr	r3, [pc, #64]	; (8018574 <RegionEU868ComputeRxWindowParameters+0xbc>)
 8018534:	0092      	lsls	r2, r2, #2
 8018536:	58d3      	ldr	r3, [r2, r3]
 8018538:	0019      	movs	r1, r3
 801853a:	f7ff f929 	bl	8017790 <RegionCommonComputeSymbolTimeLoRa>
 801853e:	0003      	movs	r3, r0
 8018540:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018542:	4b0d      	ldr	r3, [pc, #52]	; (8018578 <RegionEU868ComputeRxWindowParameters+0xc0>)
 8018544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018546:	4798      	blx	r3
 8018548:	0005      	movs	r5, r0
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	3308      	adds	r3, #8
 801854e:	687a      	ldr	r2, [r7, #4]
 8018550:	320c      	adds	r2, #12
 8018552:	68bc      	ldr	r4, [r7, #8]
 8018554:	210e      	movs	r1, #14
 8018556:	1879      	adds	r1, r7, r1
 8018558:	7809      	ldrb	r1, [r1, #0]
 801855a:	6978      	ldr	r0, [r7, #20]
 801855c:	9201      	str	r2, [sp, #4]
 801855e:	9300      	str	r3, [sp, #0]
 8018560:	002b      	movs	r3, r5
 8018562:	0022      	movs	r2, r4
 8018564:	f7ff f93a 	bl	80177dc <RegionCommonComputeRxWindowParameters>
}
 8018568:	46c0      	nop			; (mov r8, r8)
 801856a:	46bd      	mov	sp, r7
 801856c:	b006      	add	sp, #24
 801856e:	bdb0      	pop	{r4, r5, r7, pc}
 8018570:	0801ef30 	.word	0x0801ef30
 8018574:	0801ef38 	.word	0x0801ef38
 8018578:	0801f0b4 	.word	0x0801f0b4

0801857c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801857c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801857e:	b091      	sub	sp, #68	; 0x44
 8018580:	af0a      	add	r7, sp, #40	; 0x28
 8018582:	6078      	str	r0, [r7, #4]
 8018584:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018586:	230f      	movs	r3, #15
 8018588:	18fb      	adds	r3, r7, r3
 801858a:	687a      	ldr	r2, [r7, #4]
 801858c:	7852      	ldrb	r2, [r2, #1]
 801858e:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8018590:	2316      	movs	r3, #22
 8018592:	18fb      	adds	r3, r7, r3
 8018594:	2200      	movs	r2, #0
 8018596:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8018598:	230e      	movs	r3, #14
 801859a:	18fb      	adds	r3, r7, r3
 801859c:	2200      	movs	r2, #0
 801859e:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	685b      	ldr	r3, [r3, #4]
 80185a4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80185a6:	4b68      	ldr	r3, [pc, #416]	; (8018748 <RegionEU868RxConfig+0x1cc>)
 80185a8:	685b      	ldr	r3, [r3, #4]
 80185aa:	4798      	blx	r3
 80185ac:	1e03      	subs	r3, r0, #0
 80185ae:	d001      	beq.n	80185b4 <RegionEU868RxConfig+0x38>
    {
        return false;
 80185b0:	2300      	movs	r3, #0
 80185b2:	e0c4      	b.n	801873e <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	7cdb      	ldrb	r3, [r3, #19]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d122      	bne.n	8018602 <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	781b      	ldrb	r3, [r3, #0]
 80185c0:	0019      	movs	r1, r3
 80185c2:	4a62      	ldr	r2, [pc, #392]	; (801874c <RegionEU868RxConfig+0x1d0>)
 80185c4:	000b      	movs	r3, r1
 80185c6:	005b      	lsls	r3, r3, #1
 80185c8:	185b      	adds	r3, r3, r1
 80185ca:	009b      	lsls	r3, r3, #2
 80185cc:	589b      	ldr	r3, [r3, r2]
 80185ce:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	781b      	ldrb	r3, [r3, #0]
 80185d4:	0019      	movs	r1, r3
 80185d6:	4a5d      	ldr	r2, [pc, #372]	; (801874c <RegionEU868RxConfig+0x1d0>)
 80185d8:	000b      	movs	r3, r1
 80185da:	005b      	lsls	r3, r3, #1
 80185dc:	185b      	adds	r3, r3, r1
 80185de:	009b      	lsls	r3, r3, #2
 80185e0:	18d3      	adds	r3, r2, r3
 80185e2:	3304      	adds	r3, #4
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d00b      	beq.n	8018602 <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	781b      	ldrb	r3, [r3, #0]
 80185ee:	0019      	movs	r1, r3
 80185f0:	4a56      	ldr	r2, [pc, #344]	; (801874c <RegionEU868RxConfig+0x1d0>)
 80185f2:	000b      	movs	r3, r1
 80185f4:	005b      	lsls	r3, r3, #1
 80185f6:	185b      	adds	r3, r3, r1
 80185f8:	009b      	lsls	r3, r3, #2
 80185fa:	18d3      	adds	r3, r2, r3
 80185fc:	3304      	adds	r3, #4
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018602:	240f      	movs	r4, #15
 8018604:	193b      	adds	r3, r7, r4
 8018606:	781b      	ldrb	r3, [r3, #0]
 8018608:	b25b      	sxtb	r3, r3
 801860a:	4a51      	ldr	r2, [pc, #324]	; (8018750 <RegionEU868RxConfig+0x1d4>)
 801860c:	5cd2      	ldrb	r2, [r2, r3]
 801860e:	250e      	movs	r5, #14
 8018610:	197b      	adds	r3, r7, r5
 8018612:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8018614:	4b4c      	ldr	r3, [pc, #304]	; (8018748 <RegionEU868RxConfig+0x1cc>)
 8018616:	68db      	ldr	r3, [r3, #12]
 8018618:	693a      	ldr	r2, [r7, #16]
 801861a:	0010      	movs	r0, r2
 801861c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801861e:	193b      	adds	r3, r7, r4
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	b25b      	sxtb	r3, r3
 8018624:	2b07      	cmp	r3, #7
 8018626:	d12e      	bne.n	8018686 <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 8018628:	2117      	movs	r1, #23
 801862a:	187b      	adds	r3, r7, r1
 801862c:	2200      	movs	r2, #0
 801862e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018630:	4b45      	ldr	r3, [pc, #276]	; (8018748 <RegionEU868RxConfig+0x1cc>)
 8018632:	699c      	ldr	r4, [r3, #24]
 8018634:	197b      	adds	r3, r7, r5
 8018636:	2200      	movs	r2, #0
 8018638:	569a      	ldrsb	r2, [r3, r2]
 801863a:	0013      	movs	r3, r2
 801863c:	015b      	lsls	r3, r3, #5
 801863e:	1a9b      	subs	r3, r3, r2
 8018640:	009b      	lsls	r3, r3, #2
 8018642:	189b      	adds	r3, r3, r2
 8018644:	00db      	lsls	r3, r3, #3
 8018646:	001e      	movs	r6, r3
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	689b      	ldr	r3, [r3, #8]
 801864c:	b29b      	uxth	r3, r3
 801864e:	687a      	ldr	r2, [r7, #4]
 8018650:	7c92      	ldrb	r2, [r2, #18]
 8018652:	4d40      	ldr	r5, [pc, #256]	; (8018754 <RegionEU868RxConfig+0x1d8>)
 8018654:	1879      	adds	r1, r7, r1
 8018656:	7808      	ldrb	r0, [r1, #0]
 8018658:	9209      	str	r2, [sp, #36]	; 0x24
 801865a:	2200      	movs	r2, #0
 801865c:	9208      	str	r2, [sp, #32]
 801865e:	2200      	movs	r2, #0
 8018660:	9207      	str	r2, [sp, #28]
 8018662:	2200      	movs	r2, #0
 8018664:	9206      	str	r2, [sp, #24]
 8018666:	2201      	movs	r2, #1
 8018668:	9205      	str	r2, [sp, #20]
 801866a:	2200      	movs	r2, #0
 801866c:	9204      	str	r2, [sp, #16]
 801866e:	2200      	movs	r2, #0
 8018670:	9203      	str	r2, [sp, #12]
 8018672:	9302      	str	r3, [sp, #8]
 8018674:	2305      	movs	r3, #5
 8018676:	9301      	str	r3, [sp, #4]
 8018678:	4b37      	ldr	r3, [pc, #220]	; (8018758 <RegionEU868RxConfig+0x1dc>)
 801867a:	9300      	str	r3, [sp, #0]
 801867c:	2300      	movs	r3, #0
 801867e:	0032      	movs	r2, r6
 8018680:	0029      	movs	r1, r5
 8018682:	47a0      	blx	r4
 8018684:	e029      	b.n	80186da <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 8018686:	2117      	movs	r1, #23
 8018688:	187b      	adds	r3, r7, r1
 801868a:	2201      	movs	r2, #1
 801868c:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801868e:	4b2e      	ldr	r3, [pc, #184]	; (8018748 <RegionEU868RxConfig+0x1cc>)
 8018690:	699c      	ldr	r4, [r3, #24]
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	789b      	ldrb	r3, [r3, #2]
 8018696:	001e      	movs	r6, r3
 8018698:	230e      	movs	r3, #14
 801869a:	18fb      	adds	r3, r7, r3
 801869c:	2500      	movs	r5, #0
 801869e:	575d      	ldrsb	r5, [r3, r5]
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	689b      	ldr	r3, [r3, #8]
 80186a4:	b29b      	uxth	r3, r3
 80186a6:	687a      	ldr	r2, [r7, #4]
 80186a8:	7c92      	ldrb	r2, [r2, #18]
 80186aa:	1879      	adds	r1, r7, r1
 80186ac:	7808      	ldrb	r0, [r1, #0]
 80186ae:	9209      	str	r2, [sp, #36]	; 0x24
 80186b0:	2201      	movs	r2, #1
 80186b2:	9208      	str	r2, [sp, #32]
 80186b4:	2200      	movs	r2, #0
 80186b6:	9207      	str	r2, [sp, #28]
 80186b8:	2200      	movs	r2, #0
 80186ba:	9206      	str	r2, [sp, #24]
 80186bc:	2200      	movs	r2, #0
 80186be:	9205      	str	r2, [sp, #20]
 80186c0:	2200      	movs	r2, #0
 80186c2:	9204      	str	r2, [sp, #16]
 80186c4:	2200      	movs	r2, #0
 80186c6:	9203      	str	r2, [sp, #12]
 80186c8:	9302      	str	r3, [sp, #8]
 80186ca:	2308      	movs	r3, #8
 80186cc:	9301      	str	r3, [sp, #4]
 80186ce:	2300      	movs	r3, #0
 80186d0:	9300      	str	r3, [sp, #0]
 80186d2:	2301      	movs	r3, #1
 80186d4:	002a      	movs	r2, r5
 80186d6:	0031      	movs	r1, r6
 80186d8:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	7c5b      	ldrb	r3, [r3, #17]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d009      	beq.n	80186f6 <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80186e2:	230f      	movs	r3, #15
 80186e4:	18fb      	adds	r3, r7, r3
 80186e6:	2200      	movs	r2, #0
 80186e8:	569a      	ldrsb	r2, [r3, r2]
 80186ea:	2316      	movs	r3, #22
 80186ec:	18fb      	adds	r3, r7, r3
 80186ee:	491b      	ldr	r1, [pc, #108]	; (801875c <RegionEU868RxConfig+0x1e0>)
 80186f0:	5c8a      	ldrb	r2, [r1, r2]
 80186f2:	701a      	strb	r2, [r3, #0]
 80186f4:	e008      	b.n	8018708 <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80186f6:	230f      	movs	r3, #15
 80186f8:	18fb      	adds	r3, r7, r3
 80186fa:	2200      	movs	r2, #0
 80186fc:	569a      	ldrsb	r2, [r3, r2]
 80186fe:	2316      	movs	r3, #22
 8018700:	18fb      	adds	r3, r7, r3
 8018702:	4917      	ldr	r1, [pc, #92]	; (8018760 <RegionEU868RxConfig+0x1e4>)
 8018704:	5c8a      	ldrb	r2, [r1, r2]
 8018706:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018708:	4b0f      	ldr	r3, [pc, #60]	; (8018748 <RegionEU868RxConfig+0x1cc>)
 801870a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801870c:	2216      	movs	r2, #22
 801870e:	18ba      	adds	r2, r7, r2
 8018710:	7812      	ldrb	r2, [r2, #0]
 8018712:	320d      	adds	r2, #13
 8018714:	b2d1      	uxtb	r1, r2
 8018716:	2217      	movs	r2, #23
 8018718:	18ba      	adds	r2, r7, r2
 801871a:	7812      	ldrb	r2, [r2, #0]
 801871c:	0010      	movs	r0, r2
 801871e:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	7cd8      	ldrb	r0, [r3, #19]
 8018724:	240f      	movs	r4, #15
 8018726:	193b      	adds	r3, r7, r4
 8018728:	2200      	movs	r2, #0
 801872a:	569a      	ldrsb	r2, [r3, r2]
 801872c:	693b      	ldr	r3, [r7, #16]
 801872e:	0019      	movs	r1, r3
 8018730:	f7ff fa32 	bl	8017b98 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8018734:	683b      	ldr	r3, [r7, #0]
 8018736:	193a      	adds	r2, r7, r4
 8018738:	7812      	ldrb	r2, [r2, #0]
 801873a:	701a      	strb	r2, [r3, #0]
    return true;
 801873c:	2301      	movs	r3, #1
}
 801873e:	0018      	movs	r0, r3
 8018740:	46bd      	mov	sp, r7
 8018742:	b007      	add	sp, #28
 8018744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018746:	46c0      	nop			; (mov r8, r8)
 8018748:	0801f0b4 	.word	0x0801f0b4
 801874c:	20000cd4 	.word	0x20000cd4
 8018750:	0801ef30 	.word	0x0801ef30
 8018754:	0000c350 	.word	0x0000c350
 8018758:	00014585 	.word	0x00014585
 801875c:	0801ef60 	.word	0x0801ef60
 8018760:	0801ef58 	.word	0x0801ef58

08018764 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018766:	b093      	sub	sp, #76	; 0x4c
 8018768:	af0a      	add	r7, sp, #40	; 0x28
 801876a:	60f8      	str	r0, [r7, #12]
 801876c:	60b9      	str	r1, [r7, #8]
 801876e:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	785b      	ldrb	r3, [r3, #1]
 8018774:	b25b      	sxtb	r3, r3
 8018776:	001a      	movs	r2, r3
 8018778:	4b6b      	ldr	r3, [pc, #428]	; (8018928 <RegionEU868TxConfig+0x1c4>)
 801877a:	5c9a      	ldrb	r2, [r3, r2]
 801877c:	251e      	movs	r5, #30
 801877e:	197b      	adds	r3, r7, r5
 8018780:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	2002      	movs	r0, #2
 8018786:	5618      	ldrsb	r0, [r3, r0]
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	781b      	ldrb	r3, [r3, #0]
 801878c:	0019      	movs	r1, r3
 801878e:	4a67      	ldr	r2, [pc, #412]	; (801892c <RegionEU868TxConfig+0x1c8>)
 8018790:	000b      	movs	r3, r1
 8018792:	005b      	lsls	r3, r3, #1
 8018794:	185b      	adds	r3, r3, r1
 8018796:	009b      	lsls	r3, r3, #2
 8018798:	18d3      	adds	r3, r2, r3
 801879a:	3309      	adds	r3, #9
 801879c:	781b      	ldrb	r3, [r3, #0]
 801879e:	001c      	movs	r4, r3
 80187a0:	4a62      	ldr	r2, [pc, #392]	; (801892c <RegionEU868TxConfig+0x1c8>)
 80187a2:	21c2      	movs	r1, #194	; 0xc2
 80187a4:	0023      	movs	r3, r4
 80187a6:	009b      	lsls	r3, r3, #2
 80187a8:	191b      	adds	r3, r3, r4
 80187aa:	009b      	lsls	r3, r3, #2
 80187ac:	18d3      	adds	r3, r2, r3
 80187ae:	185b      	adds	r3, r3, r1
 80187b0:	2100      	movs	r1, #0
 80187b2:	5659      	ldrsb	r1, [r3, r1]
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	2201      	movs	r2, #1
 80187b8:	569a      	ldrsb	r2, [r3, r2]
 80187ba:	261d      	movs	r6, #29
 80187bc:	19bc      	adds	r4, r7, r6
 80187be:	4b5c      	ldr	r3, [pc, #368]	; (8018930 <RegionEU868TxConfig+0x1cc>)
 80187c0:	f7ff fa7c 	bl	8017cbc <LimitTxPower>
 80187c4:	0003      	movs	r3, r0
 80187c6:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	785b      	ldrb	r3, [r3, #1]
 80187cc:	b25b      	sxtb	r3, r3
 80187ce:	0018      	movs	r0, r3
 80187d0:	f7ff fa56 	bl	8017c80 <GetBandwidth>
 80187d4:	0003      	movs	r3, r0
 80187d6:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80187d8:	2017      	movs	r0, #23
 80187da:	183b      	adds	r3, r7, r0
 80187dc:	2200      	movs	r2, #0
 80187de:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	6859      	ldr	r1, [r3, #4]
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	689a      	ldr	r2, [r3, #8]
 80187e8:	183c      	adds	r4, r7, r0
 80187ea:	19bb      	adds	r3, r7, r6
 80187ec:	781b      	ldrb	r3, [r3, #0]
 80187ee:	b25b      	sxtb	r3, r3
 80187f0:	0018      	movs	r0, r3
 80187f2:	f7ff f841 	bl	8017878 <RegionCommonComputeTxPower>
 80187f6:	0003      	movs	r3, r0
 80187f8:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80187fa:	4b4e      	ldr	r3, [pc, #312]	; (8018934 <RegionEU868TxConfig+0x1d0>)
 80187fc:	68da      	ldr	r2, [r3, #12]
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	781b      	ldrb	r3, [r3, #0]
 8018802:	0018      	movs	r0, r3
 8018804:	4949      	ldr	r1, [pc, #292]	; (801892c <RegionEU868TxConfig+0x1c8>)
 8018806:	0003      	movs	r3, r0
 8018808:	005b      	lsls	r3, r3, #1
 801880a:	181b      	adds	r3, r3, r0
 801880c:	009b      	lsls	r3, r3, #2
 801880e:	585b      	ldr	r3, [r3, r1]
 8018810:	0018      	movs	r0, r3
 8018812:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	785b      	ldrb	r3, [r3, #1]
 8018818:	b25b      	sxtb	r3, r3
 801881a:	2b07      	cmp	r3, #7
 801881c:	d12e      	bne.n	801887c <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801881e:	231f      	movs	r3, #31
 8018820:	18fb      	adds	r3, r7, r3
 8018822:	2200      	movs	r2, #0
 8018824:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018826:	4b43      	ldr	r3, [pc, #268]	; (8018934 <RegionEU868TxConfig+0x1d0>)
 8018828:	69dc      	ldr	r4, [r3, #28]
 801882a:	197b      	adds	r3, r7, r5
 801882c:	2200      	movs	r2, #0
 801882e:	569a      	ldrsb	r2, [r3, r2]
 8018830:	0013      	movs	r3, r2
 8018832:	015b      	lsls	r3, r3, #5
 8018834:	1a9b      	subs	r3, r3, r2
 8018836:	009b      	lsls	r3, r3, #2
 8018838:	189b      	adds	r3, r3, r2
 801883a:	00db      	lsls	r3, r3, #3
 801883c:	001e      	movs	r6, r3
 801883e:	69ba      	ldr	r2, [r7, #24]
 8018840:	4d3d      	ldr	r5, [pc, #244]	; (8018938 <RegionEU868TxConfig+0x1d4>)
 8018842:	2017      	movs	r0, #23
 8018844:	183b      	adds	r3, r7, r0
 8018846:	2100      	movs	r1, #0
 8018848:	5659      	ldrsb	r1, [r3, r1]
 801884a:	231f      	movs	r3, #31
 801884c:	18fb      	adds	r3, r7, r3
 801884e:	7818      	ldrb	r0, [r3, #0]
 8018850:	23fa      	movs	r3, #250	; 0xfa
 8018852:	011b      	lsls	r3, r3, #4
 8018854:	9308      	str	r3, [sp, #32]
 8018856:	2300      	movs	r3, #0
 8018858:	9307      	str	r3, [sp, #28]
 801885a:	2300      	movs	r3, #0
 801885c:	9306      	str	r3, [sp, #24]
 801885e:	2300      	movs	r3, #0
 8018860:	9305      	str	r3, [sp, #20]
 8018862:	2301      	movs	r3, #1
 8018864:	9304      	str	r3, [sp, #16]
 8018866:	2300      	movs	r3, #0
 8018868:	9303      	str	r3, [sp, #12]
 801886a:	2305      	movs	r3, #5
 801886c:	9302      	str	r3, [sp, #8]
 801886e:	2300      	movs	r3, #0
 8018870:	9301      	str	r3, [sp, #4]
 8018872:	9600      	str	r6, [sp, #0]
 8018874:	0013      	movs	r3, r2
 8018876:	002a      	movs	r2, r5
 8018878:	47a0      	blx	r4
 801887a:	e025      	b.n	80188c8 <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 801887c:	201f      	movs	r0, #31
 801887e:	183b      	adds	r3, r7, r0
 8018880:	2201      	movs	r2, #1
 8018882:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018884:	4b2b      	ldr	r3, [pc, #172]	; (8018934 <RegionEU868TxConfig+0x1d0>)
 8018886:	69dc      	ldr	r4, [r3, #28]
 8018888:	231e      	movs	r3, #30
 801888a:	18fb      	adds	r3, r7, r3
 801888c:	781b      	ldrb	r3, [r3, #0]
 801888e:	b25b      	sxtb	r3, r3
 8018890:	69bd      	ldr	r5, [r7, #24]
 8018892:	2217      	movs	r2, #23
 8018894:	18ba      	adds	r2, r7, r2
 8018896:	2100      	movs	r1, #0
 8018898:	5651      	ldrsb	r1, [r2, r1]
 801889a:	183a      	adds	r2, r7, r0
 801889c:	7810      	ldrb	r0, [r2, #0]
 801889e:	22fa      	movs	r2, #250	; 0xfa
 80188a0:	0112      	lsls	r2, r2, #4
 80188a2:	9208      	str	r2, [sp, #32]
 80188a4:	2200      	movs	r2, #0
 80188a6:	9207      	str	r2, [sp, #28]
 80188a8:	2200      	movs	r2, #0
 80188aa:	9206      	str	r2, [sp, #24]
 80188ac:	2200      	movs	r2, #0
 80188ae:	9205      	str	r2, [sp, #20]
 80188b0:	2201      	movs	r2, #1
 80188b2:	9204      	str	r2, [sp, #16]
 80188b4:	2200      	movs	r2, #0
 80188b6:	9203      	str	r2, [sp, #12]
 80188b8:	2208      	movs	r2, #8
 80188ba:	9202      	str	r2, [sp, #8]
 80188bc:	2201      	movs	r2, #1
 80188be:	9201      	str	r2, [sp, #4]
 80188c0:	9300      	str	r3, [sp, #0]
 80188c2:	002b      	movs	r3, r5
 80188c4:	2200      	movs	r2, #0
 80188c6:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	0019      	movs	r1, r3
 80188ce:	4a17      	ldr	r2, [pc, #92]	; (801892c <RegionEU868TxConfig+0x1c8>)
 80188d0:	000b      	movs	r3, r1
 80188d2:	005b      	lsls	r3, r3, #1
 80188d4:	185b      	adds	r3, r3, r1
 80188d6:	009b      	lsls	r3, r3, #2
 80188d8:	589a      	ldr	r2, [r3, r2]
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	785b      	ldrb	r3, [r3, #1]
 80188de:	b25b      	sxtb	r3, r3
 80188e0:	0019      	movs	r1, r3
 80188e2:	0010      	movs	r0, r2
 80188e4:	f7ff f970 	bl	8017bc8 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	2201      	movs	r2, #1
 80188ec:	569a      	ldrsb	r2, [r3, r2]
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	899b      	ldrh	r3, [r3, #12]
 80188f2:	0019      	movs	r1, r3
 80188f4:	0010      	movs	r0, r2
 80188f6:	f7ff fa81 	bl	8017dfc <GetTimeOnAir>
 80188fa:	0002      	movs	r2, r0
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018900:	4b0c      	ldr	r3, [pc, #48]	; (8018934 <RegionEU868TxConfig+0x1d0>)
 8018902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018904:	68fa      	ldr	r2, [r7, #12]
 8018906:	8992      	ldrh	r2, [r2, #12]
 8018908:	b2d1      	uxtb	r1, r2
 801890a:	221f      	movs	r2, #31
 801890c:	18ba      	adds	r2, r7, r2
 801890e:	7812      	ldrb	r2, [r2, #0]
 8018910:	0010      	movs	r0, r2
 8018912:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018914:	68bb      	ldr	r3, [r7, #8]
 8018916:	221d      	movs	r2, #29
 8018918:	18ba      	adds	r2, r7, r2
 801891a:	7812      	ldrb	r2, [r2, #0]
 801891c:	701a      	strb	r2, [r3, #0]
    return true;
 801891e:	2301      	movs	r3, #1
}
 8018920:	0018      	movs	r0, r3
 8018922:	46bd      	mov	sp, r7
 8018924:	b009      	add	sp, #36	; 0x24
 8018926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018928:	0801ef30 	.word	0x0801ef30
 801892c:	20000cd4 	.word	0x20000cd4
 8018930:	20000e0c 	.word	0x20000e0c
 8018934:	0801f0b4 	.word	0x0801f0b4
 8018938:	000061a8 	.word	0x000061a8

0801893c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801893c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801893e:	b093      	sub	sp, #76	; 0x4c
 8018940:	af00      	add	r7, sp, #0
 8018942:	60f8      	str	r0, [r7, #12]
 8018944:	60b9      	str	r1, [r7, #8]
 8018946:	607a      	str	r2, [r7, #4]
 8018948:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801894a:	2347      	movs	r3, #71	; 0x47
 801894c:	18fb      	adds	r3, r7, r3
 801894e:	2207      	movs	r2, #7
 8018950:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018952:	233c      	movs	r3, #60	; 0x3c
 8018954:	18fb      	adds	r3, r7, r3
 8018956:	0018      	movs	r0, r3
 8018958:	2306      	movs	r3, #6
 801895a:	001a      	movs	r2, r3
 801895c:	2100      	movs	r1, #0
 801895e:	f005 fa20 	bl	801dda2 <memset>
    uint8_t nextIndex = 0;
 8018962:	2344      	movs	r3, #68	; 0x44
 8018964:	18fb      	adds	r3, r7, r3
 8018966:	2200      	movs	r2, #0
 8018968:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801896a:	2346      	movs	r3, #70	; 0x46
 801896c:	18fb      	adds	r3, r7, r3
 801896e:	2200      	movs	r2, #0
 8018970:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8018972:	233a      	movs	r3, #58	; 0x3a
 8018974:	18fb      	adds	r3, r7, r3
 8018976:	2200      	movs	r2, #0
 8018978:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801897a:	e098      	b.n	8018aae <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	685a      	ldr	r2, [r3, #4]
 8018980:	2546      	movs	r5, #70	; 0x46
 8018982:	197b      	adds	r3, r7, r5
 8018984:	781b      	ldrb	r3, [r3, #0]
 8018986:	18d3      	adds	r3, r2, r3
 8018988:	2644      	movs	r6, #68	; 0x44
 801898a:	19bc      	adds	r4, r7, r6
 801898c:	203c      	movs	r0, #60	; 0x3c
 801898e:	183a      	adds	r2, r7, r0
 8018990:	0011      	movs	r1, r2
 8018992:	0018      	movs	r0, r3
 8018994:	f7fe fe08 	bl	80175a8 <RegionCommonParseLinkAdrReq>
 8018998:	0003      	movs	r3, r0
 801899a:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 801899c:	0032      	movs	r2, r6
 801899e:	18bb      	adds	r3, r7, r2
 80189a0:	781b      	ldrb	r3, [r3, #0]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d100      	bne.n	80189a8 <RegionEU868LinkAdrReq+0x6c>
 80189a6:	e08b      	b.n	8018ac0 <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80189a8:	197b      	adds	r3, r7, r5
 80189aa:	1979      	adds	r1, r7, r5
 80189ac:	18ba      	adds	r2, r7, r2
 80189ae:	7809      	ldrb	r1, [r1, #0]
 80189b0:	7812      	ldrb	r2, [r2, #0]
 80189b2:	188a      	adds	r2, r1, r2
 80189b4:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80189b6:	2147      	movs	r1, #71	; 0x47
 80189b8:	187b      	adds	r3, r7, r1
 80189ba:	2207      	movs	r2, #7
 80189bc:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80189be:	203c      	movs	r0, #60	; 0x3c
 80189c0:	183b      	adds	r3, r7, r0
 80189c2:	889a      	ldrh	r2, [r3, #4]
 80189c4:	243a      	movs	r4, #58	; 0x3a
 80189c6:	193b      	adds	r3, r7, r4
 80189c8:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80189ca:	183b      	adds	r3, r7, r0
 80189cc:	78db      	ldrb	r3, [r3, #3]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d10a      	bne.n	80189e8 <RegionEU868LinkAdrReq+0xac>
 80189d2:	193b      	adds	r3, r7, r4
 80189d4:	881b      	ldrh	r3, [r3, #0]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d106      	bne.n	80189e8 <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 80189da:	187b      	adds	r3, r7, r1
 80189dc:	187a      	adds	r2, r7, r1
 80189de:	7812      	ldrb	r2, [r2, #0]
 80189e0:	2101      	movs	r1, #1
 80189e2:	438a      	bics	r2, r1
 80189e4:	701a      	strb	r2, [r3, #0]
 80189e6:	e062      	b.n	8018aae <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80189e8:	223c      	movs	r2, #60	; 0x3c
 80189ea:	18bb      	adds	r3, r7, r2
 80189ec:	78db      	ldrb	r3, [r3, #3]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d003      	beq.n	80189fa <RegionEU868LinkAdrReq+0xbe>
 80189f2:	18bb      	adds	r3, r7, r2
 80189f4:	78db      	ldrb	r3, [r3, #3]
 80189f6:	2b05      	cmp	r3, #5
 80189f8:	d904      	bls.n	8018a04 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80189fa:	233c      	movs	r3, #60	; 0x3c
 80189fc:	18fb      	adds	r3, r7, r3
 80189fe:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018a00:	2b06      	cmp	r3, #6
 8018a02:	d907      	bls.n	8018a14 <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018a04:	2247      	movs	r2, #71	; 0x47
 8018a06:	18bb      	adds	r3, r7, r2
 8018a08:	18ba      	adds	r2, r7, r2
 8018a0a:	7812      	ldrb	r2, [r2, #0]
 8018a0c:	2101      	movs	r1, #1
 8018a0e:	438a      	bics	r2, r1
 8018a10:	701a      	strb	r2, [r3, #0]
 8018a12:	e04c      	b.n	8018aae <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018a14:	2345      	movs	r3, #69	; 0x45
 8018a16:	18fb      	adds	r3, r7, r3
 8018a18:	2200      	movs	r2, #0
 8018a1a:	701a      	strb	r2, [r3, #0]
 8018a1c:	e042      	b.n	8018aa4 <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018a1e:	233c      	movs	r3, #60	; 0x3c
 8018a20:	18fb      	adds	r3, r7, r3
 8018a22:	78db      	ldrb	r3, [r3, #3]
 8018a24:	2b06      	cmp	r3, #6
 8018a26:	d11a      	bne.n	8018a5e <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8018a28:	2045      	movs	r0, #69	; 0x45
 8018a2a:	183b      	adds	r3, r7, r0
 8018a2c:	781a      	ldrb	r2, [r3, #0]
 8018a2e:	496d      	ldr	r1, [pc, #436]	; (8018be4 <RegionEU868LinkAdrReq+0x2a8>)
 8018a30:	0013      	movs	r3, r2
 8018a32:	005b      	lsls	r3, r3, #1
 8018a34:	189b      	adds	r3, r3, r2
 8018a36:	009b      	lsls	r3, r3, #2
 8018a38:	585b      	ldr	r3, [r3, r1]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d02c      	beq.n	8018a98 <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 8018a3e:	183b      	adds	r3, r7, r0
 8018a40:	781b      	ldrb	r3, [r3, #0]
 8018a42:	2201      	movs	r2, #1
 8018a44:	409a      	lsls	r2, r3
 8018a46:	0013      	movs	r3, r2
 8018a48:	b21a      	sxth	r2, r3
 8018a4a:	213a      	movs	r1, #58	; 0x3a
 8018a4c:	187b      	adds	r3, r7, r1
 8018a4e:	881b      	ldrh	r3, [r3, #0]
 8018a50:	b21b      	sxth	r3, r3
 8018a52:	4313      	orrs	r3, r2
 8018a54:	b21b      	sxth	r3, r3
 8018a56:	b29a      	uxth	r2, r3
 8018a58:	187b      	adds	r3, r7, r1
 8018a5a:	801a      	strh	r2, [r3, #0]
 8018a5c:	e01c      	b.n	8018a98 <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018a5e:	233a      	movs	r3, #58	; 0x3a
 8018a60:	18fb      	adds	r3, r7, r3
 8018a62:	881b      	ldrh	r3, [r3, #0]
 8018a64:	001a      	movs	r2, r3
 8018a66:	2145      	movs	r1, #69	; 0x45
 8018a68:	187b      	adds	r3, r7, r1
 8018a6a:	781b      	ldrb	r3, [r3, #0]
 8018a6c:	411a      	asrs	r2, r3
 8018a6e:	0013      	movs	r3, r2
 8018a70:	2201      	movs	r2, #1
 8018a72:	4013      	ands	r3, r2
 8018a74:	d010      	beq.n	8018a98 <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8018a76:	187b      	adds	r3, r7, r1
 8018a78:	781a      	ldrb	r2, [r3, #0]
 8018a7a:	495a      	ldr	r1, [pc, #360]	; (8018be4 <RegionEU868LinkAdrReq+0x2a8>)
 8018a7c:	0013      	movs	r3, r2
 8018a7e:	005b      	lsls	r3, r3, #1
 8018a80:	189b      	adds	r3, r3, r2
 8018a82:	009b      	lsls	r3, r3, #2
 8018a84:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d106      	bne.n	8018a98 <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8018a8a:	2247      	movs	r2, #71	; 0x47
 8018a8c:	18bb      	adds	r3, r7, r2
 8018a8e:	18ba      	adds	r2, r7, r2
 8018a90:	7812      	ldrb	r2, [r2, #0]
 8018a92:	2101      	movs	r1, #1
 8018a94:	438a      	bics	r2, r1
 8018a96:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018a98:	2145      	movs	r1, #69	; 0x45
 8018a9a:	187b      	adds	r3, r7, r1
 8018a9c:	781a      	ldrb	r2, [r3, #0]
 8018a9e:	187b      	adds	r3, r7, r1
 8018aa0:	3201      	adds	r2, #1
 8018aa2:	701a      	strb	r2, [r3, #0]
 8018aa4:	2345      	movs	r3, #69	; 0x45
 8018aa6:	18fb      	adds	r3, r7, r3
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	2b0f      	cmp	r3, #15
 8018aac:	d9b7      	bls.n	8018a1e <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	7a1b      	ldrb	r3, [r3, #8]
 8018ab2:	2246      	movs	r2, #70	; 0x46
 8018ab4:	18ba      	adds	r2, r7, r2
 8018ab6:	7812      	ldrb	r2, [r2, #0]
 8018ab8:	429a      	cmp	r2, r3
 8018aba:	d200      	bcs.n	8018abe <RegionEU868LinkAdrReq+0x182>
 8018abc:	e75e      	b.n	801897c <RegionEU868LinkAdrReq+0x40>
 8018abe:	e000      	b.n	8018ac2 <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 8018ac0:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018ac2:	2134      	movs	r1, #52	; 0x34
 8018ac4:	187b      	adds	r3, r7, r1
 8018ac6:	2202      	movs	r2, #2
 8018ac8:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	7a5a      	ldrb	r2, [r3, #9]
 8018ace:	187b      	adds	r3, r7, r1
 8018ad0:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018ad2:	187b      	adds	r3, r7, r1
 8018ad4:	0018      	movs	r0, r3
 8018ad6:	f7ff f9ef 	bl	8017eb8 <RegionEU868GetPhyParam>
 8018ada:	0003      	movs	r3, r0
 8018adc:	001a      	movs	r2, r3
 8018ade:	2030      	movs	r0, #48	; 0x30
 8018ae0:	183b      	adds	r3, r7, r0
 8018ae2:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8018ae4:	2110      	movs	r1, #16
 8018ae6:	187b      	adds	r3, r7, r1
 8018ae8:	2447      	movs	r4, #71	; 0x47
 8018aea:	193a      	adds	r2, r7, r4
 8018aec:	7812      	ldrb	r2, [r2, #0]
 8018aee:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	7a9a      	ldrb	r2, [r3, #10]
 8018af4:	187b      	adds	r3, r7, r1
 8018af6:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018af8:	253c      	movs	r5, #60	; 0x3c
 8018afa:	197b      	adds	r3, r7, r5
 8018afc:	2201      	movs	r2, #1
 8018afe:	569a      	ldrsb	r2, [r3, r2]
 8018b00:	187b      	adds	r3, r7, r1
 8018b02:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018b04:	197b      	adds	r3, r7, r5
 8018b06:	2202      	movs	r2, #2
 8018b08:	569a      	ldrsb	r2, [r3, r2]
 8018b0a:	187b      	adds	r3, r7, r1
 8018b0c:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018b0e:	197b      	adds	r3, r7, r5
 8018b10:	781a      	ldrb	r2, [r3, #0]
 8018b12:	187b      	adds	r3, r7, r1
 8018b14:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	220b      	movs	r2, #11
 8018b1a:	569a      	ldrsb	r2, [r3, r2]
 8018b1c:	187b      	adds	r3, r7, r1
 8018b1e:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	220c      	movs	r2, #12
 8018b24:	569a      	ldrsb	r2, [r3, r2]
 8018b26:	187b      	adds	r3, r7, r1
 8018b28:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	7b5b      	ldrb	r3, [r3, #13]
 8018b2e:	b25a      	sxtb	r2, r3
 8018b30:	187b      	adds	r3, r7, r1
 8018b32:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018b34:	187b      	adds	r3, r7, r1
 8018b36:	2210      	movs	r2, #16
 8018b38:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8018b3a:	187b      	adds	r3, r7, r1
 8018b3c:	223a      	movs	r2, #58	; 0x3a
 8018b3e:	18ba      	adds	r2, r7, r2
 8018b40:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018b42:	183b      	adds	r3, r7, r0
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	b25a      	sxtb	r2, r3
 8018b48:	0008      	movs	r0, r1
 8018b4a:	183b      	adds	r3, r7, r0
 8018b4c:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8018b4e:	183b      	adds	r3, r7, r0
 8018b50:	2207      	movs	r2, #7
 8018b52:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8018b54:	183b      	adds	r3, r7, r0
 8018b56:	4a23      	ldr	r2, [pc, #140]	; (8018be4 <RegionEU868LinkAdrReq+0x2a8>)
 8018b58:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018b5a:	183b      	adds	r3, r7, r0
 8018b5c:	2207      	movs	r2, #7
 8018b5e:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018b60:	183b      	adds	r3, r7, r0
 8018b62:	2200      	movs	r2, #0
 8018b64:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018b66:	183b      	adds	r3, r7, r0
 8018b68:	68fa      	ldr	r2, [r7, #12]
 8018b6a:	6812      	ldr	r2, [r2, #0]
 8018b6c:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018b6e:	0026      	movs	r6, r4
 8018b70:	193c      	adds	r4, r7, r4
 8018b72:	0029      	movs	r1, r5
 8018b74:	187d      	adds	r5, r7, r1
 8018b76:	187b      	adds	r3, r7, r1
 8018b78:	1c9a      	adds	r2, r3, #2
 8018b7a:	187b      	adds	r3, r7, r1
 8018b7c:	1c59      	adds	r1, r3, #1
 8018b7e:	1838      	adds	r0, r7, r0
 8018b80:	002b      	movs	r3, r5
 8018b82:	f7fe fd66 	bl	8017652 <RegionCommonLinkAdrReqVerifyParams>
 8018b86:	0003      	movs	r3, r0
 8018b88:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018b8a:	19bb      	adds	r3, r7, r6
 8018b8c:	781b      	ldrb	r3, [r3, #0]
 8018b8e:	2b07      	cmp	r3, #7
 8018b90:	d10c      	bne.n	8018bac <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8018b92:	4b15      	ldr	r3, [pc, #84]	; (8018be8 <RegionEU868LinkAdrReq+0x2ac>)
 8018b94:	2202      	movs	r2, #2
 8018b96:	2100      	movs	r1, #0
 8018b98:	0018      	movs	r0, r3
 8018b9a:	f000 fbe9 	bl	8019370 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8018b9e:	223a      	movs	r2, #58	; 0x3a
 8018ba0:	18bb      	adds	r3, r7, r2
 8018ba2:	8819      	ldrh	r1, [r3, #0]
 8018ba4:	4a0f      	ldr	r2, [pc, #60]	; (8018be4 <RegionEU868LinkAdrReq+0x2a8>)
 8018ba6:	239c      	movs	r3, #156	; 0x9c
 8018ba8:	005b      	lsls	r3, r3, #1
 8018baa:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018bac:	213c      	movs	r1, #60	; 0x3c
 8018bae:	187b      	adds	r3, r7, r1
 8018bb0:	2201      	movs	r2, #1
 8018bb2:	569a      	ldrsb	r2, [r3, r2]
 8018bb4:	68bb      	ldr	r3, [r7, #8]
 8018bb6:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018bb8:	187b      	adds	r3, r7, r1
 8018bba:	2202      	movs	r2, #2
 8018bbc:	569a      	ldrsb	r2, [r3, r2]
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018bc2:	187b      	adds	r3, r7, r1
 8018bc4:	781a      	ldrb	r2, [r3, #0]
 8018bc6:	683b      	ldr	r3, [r7, #0]
 8018bc8:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018bcc:	2246      	movs	r2, #70	; 0x46
 8018bce:	18ba      	adds	r2, r7, r2
 8018bd0:	7812      	ldrb	r2, [r2, #0]
 8018bd2:	701a      	strb	r2, [r3, #0]

    return status;
 8018bd4:	2347      	movs	r3, #71	; 0x47
 8018bd6:	18fb      	adds	r3, r7, r3
 8018bd8:	781b      	ldrb	r3, [r3, #0]
}
 8018bda:	0018      	movs	r0, r3
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	b013      	add	sp, #76	; 0x4c
 8018be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018be2:	46c0      	nop			; (mov r8, r8)
 8018be4:	20000cd4 	.word	0x20000cd4
 8018be8:	20000e0c 	.word	0x20000e0c

08018bec <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018bec:	b590      	push	{r4, r7, lr}
 8018bee:	b085      	sub	sp, #20
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018bf4:	240f      	movs	r4, #15
 8018bf6:	193b      	adds	r3, r7, r4
 8018bf8:	2207      	movs	r2, #7
 8018bfa:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018bfc:	210e      	movs	r1, #14
 8018bfe:	187b      	adds	r3, r7, r1
 8018c00:	2200      	movs	r2, #0
 8018c02:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	685b      	ldr	r3, [r3, #4]
 8018c08:	187a      	adds	r2, r7, r1
 8018c0a:	0011      	movs	r1, r2
 8018c0c:	0018      	movs	r0, r3
 8018c0e:	f7ff f87d 	bl	8017d0c <VerifyRfFreq>
 8018c12:	0003      	movs	r3, r0
 8018c14:	001a      	movs	r2, r3
 8018c16:	2301      	movs	r3, #1
 8018c18:	4053      	eors	r3, r2
 8018c1a:	b2db      	uxtb	r3, r3
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d005      	beq.n	8018c2c <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 8018c20:	193b      	adds	r3, r7, r4
 8018c22:	193a      	adds	r2, r7, r4
 8018c24:	7812      	ldrb	r2, [r2, #0]
 8018c26:	2101      	movs	r1, #1
 8018c28:	438a      	bics	r2, r1
 8018c2a:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	781b      	ldrb	r3, [r3, #0]
 8018c30:	b25b      	sxtb	r3, r3
 8018c32:	2207      	movs	r2, #7
 8018c34:	2100      	movs	r1, #0
 8018c36:	0018      	movs	r0, r3
 8018c38:	f7fe fad9 	bl	80171ee <RegionCommonValueInRange>
 8018c3c:	1e03      	subs	r3, r0, #0
 8018c3e:	d106      	bne.n	8018c4e <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 8018c40:	220f      	movs	r2, #15
 8018c42:	18bb      	adds	r3, r7, r2
 8018c44:	18ba      	adds	r2, r7, r2
 8018c46:	7812      	ldrb	r2, [r2, #0]
 8018c48:	2102      	movs	r1, #2
 8018c4a:	438a      	bics	r2, r1
 8018c4c:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	785b      	ldrb	r3, [r3, #1]
 8018c52:	b25b      	sxtb	r3, r3
 8018c54:	2205      	movs	r2, #5
 8018c56:	2100      	movs	r1, #0
 8018c58:	0018      	movs	r0, r3
 8018c5a:	f7fe fac8 	bl	80171ee <RegionCommonValueInRange>
 8018c5e:	1e03      	subs	r3, r0, #0
 8018c60:	d106      	bne.n	8018c70 <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018c62:	220f      	movs	r2, #15
 8018c64:	18bb      	adds	r3, r7, r2
 8018c66:	18ba      	adds	r2, r7, r2
 8018c68:	7812      	ldrb	r2, [r2, #0]
 8018c6a:	2104      	movs	r1, #4
 8018c6c:	438a      	bics	r2, r1
 8018c6e:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8018c70:	230f      	movs	r3, #15
 8018c72:	18fb      	adds	r3, r7, r3
 8018c74:	781b      	ldrb	r3, [r3, #0]
}
 8018c76:	0018      	movs	r0, r3
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	b005      	add	sp, #20
 8018c7c:	bd90      	pop	{r4, r7, pc}

08018c7e <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018c7e:	b590      	push	{r4, r7, lr}
 8018c80:	b087      	sub	sp, #28
 8018c82:	af00      	add	r7, sp, #0
 8018c84:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018c86:	2417      	movs	r4, #23
 8018c88:	193b      	adds	r3, r7, r4
 8018c8a:	2203      	movs	r2, #3
 8018c8c:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d118      	bne.n	8018cca <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	791b      	ldrb	r3, [r3, #4]
 8018c9c:	b25b      	sxtb	r3, r3
 8018c9e:	b2da      	uxtb	r2, r3
 8018ca0:	2108      	movs	r1, #8
 8018ca2:	187b      	adds	r3, r7, r1
 8018ca4:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018ca6:	187b      	adds	r3, r7, r1
 8018ca8:	0018      	movs	r0, r3
 8018caa:	f000 fa35 	bl	8019118 <RegionEU868ChannelsRemove>
 8018cae:	0003      	movs	r3, r0
 8018cb0:	001a      	movs	r2, r3
 8018cb2:	2301      	movs	r3, #1
 8018cb4:	4053      	eors	r3, r2
 8018cb6:	b2db      	uxtb	r3, r3
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d041      	beq.n	8018d40 <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 8018cbc:	193b      	adds	r3, r7, r4
 8018cbe:	193a      	adds	r2, r7, r4
 8018cc0:	7812      	ldrb	r2, [r2, #0]
 8018cc2:	2103      	movs	r1, #3
 8018cc4:	438a      	bics	r2, r1
 8018cc6:	701a      	strb	r2, [r3, #0]
 8018cc8:	e03a      	b.n	8018d40 <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681a      	ldr	r2, [r3, #0]
 8018cce:	210c      	movs	r1, #12
 8018cd0:	187b      	adds	r3, r7, r1
 8018cd2:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	791b      	ldrb	r3, [r3, #4]
 8018cd8:	b25b      	sxtb	r3, r3
 8018cda:	b2da      	uxtb	r2, r3
 8018cdc:	187b      	adds	r3, r7, r1
 8018cde:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018ce0:	187b      	adds	r3, r7, r1
 8018ce2:	0018      	movs	r0, r3
 8018ce4:	f000 f954 	bl	8018f90 <RegionEU868ChannelAdd>
 8018ce8:	0003      	movs	r3, r0
 8018cea:	2b06      	cmp	r3, #6
 8018cec:	d017      	beq.n	8018d1e <RegionEU868NewChannelReq+0xa0>
 8018cee:	dc1e      	bgt.n	8018d2e <RegionEU868NewChannelReq+0xb0>
 8018cf0:	2b05      	cmp	r3, #5
 8018cf2:	d00c      	beq.n	8018d0e <RegionEU868NewChannelReq+0x90>
 8018cf4:	dc1b      	bgt.n	8018d2e <RegionEU868NewChannelReq+0xb0>
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d021      	beq.n	8018d3e <RegionEU868NewChannelReq+0xc0>
 8018cfa:	2b04      	cmp	r3, #4
 8018cfc:	d117      	bne.n	8018d2e <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018cfe:	2217      	movs	r2, #23
 8018d00:	18bb      	adds	r3, r7, r2
 8018d02:	18ba      	adds	r2, r7, r2
 8018d04:	7812      	ldrb	r2, [r2, #0]
 8018d06:	2101      	movs	r1, #1
 8018d08:	438a      	bics	r2, r1
 8018d0a:	701a      	strb	r2, [r3, #0]
                break;
 8018d0c:	e018      	b.n	8018d40 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8018d0e:	2217      	movs	r2, #23
 8018d10:	18bb      	adds	r3, r7, r2
 8018d12:	18ba      	adds	r2, r7, r2
 8018d14:	7812      	ldrb	r2, [r2, #0]
 8018d16:	2102      	movs	r1, #2
 8018d18:	438a      	bics	r2, r1
 8018d1a:	701a      	strb	r2, [r3, #0]
                break;
 8018d1c:	e010      	b.n	8018d40 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018d1e:	2217      	movs	r2, #23
 8018d20:	18bb      	adds	r3, r7, r2
 8018d22:	18ba      	adds	r2, r7, r2
 8018d24:	7812      	ldrb	r2, [r2, #0]
 8018d26:	2103      	movs	r1, #3
 8018d28:	438a      	bics	r2, r1
 8018d2a:	701a      	strb	r2, [r3, #0]
                break;
 8018d2c:	e008      	b.n	8018d40 <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 8018d2e:	2217      	movs	r2, #23
 8018d30:	18bb      	adds	r3, r7, r2
 8018d32:	18ba      	adds	r2, r7, r2
 8018d34:	7812      	ldrb	r2, [r2, #0]
 8018d36:	2103      	movs	r1, #3
 8018d38:	438a      	bics	r2, r1
 8018d3a:	701a      	strb	r2, [r3, #0]
                break;
 8018d3c:	e000      	b.n	8018d40 <RegionEU868NewChannelReq+0xc2>
                break;
 8018d3e:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8018d40:	2317      	movs	r3, #23
 8018d42:	18fb      	adds	r3, r7, r3
 8018d44:	781b      	ldrb	r3, [r3, #0]
}
 8018d46:	0018      	movs	r0, r3
 8018d48:	46bd      	mov	sp, r7
 8018d4a:	b007      	add	sp, #28
 8018d4c:	bd90      	pop	{r4, r7, pc}

08018d4e <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018d4e:	b580      	push	{r7, lr}
 8018d50:	b082      	sub	sp, #8
 8018d52:	af00      	add	r7, sp, #0
 8018d54:	6078      	str	r0, [r7, #4]
    return -1;
 8018d56:	2301      	movs	r3, #1
 8018d58:	425b      	negs	r3, r3
}
 8018d5a:	0018      	movs	r0, r3
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	b002      	add	sp, #8
 8018d60:	bd80      	pop	{r7, pc}
	...

08018d64 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018d64:	b590      	push	{r4, r7, lr}
 8018d66:	b085      	sub	sp, #20
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018d6c:	240f      	movs	r4, #15
 8018d6e:	193b      	adds	r3, r7, r4
 8018d70:	2203      	movs	r2, #3
 8018d72:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018d74:	210e      	movs	r1, #14
 8018d76:	187b      	adds	r3, r7, r1
 8018d78:	2200      	movs	r2, #0
 8018d7a:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	685b      	ldr	r3, [r3, #4]
 8018d80:	187a      	adds	r2, r7, r1
 8018d82:	0011      	movs	r1, r2
 8018d84:	0018      	movs	r0, r3
 8018d86:	f7fe ffc1 	bl	8017d0c <VerifyRfFreq>
 8018d8a:	0003      	movs	r3, r0
 8018d8c:	001a      	movs	r2, r3
 8018d8e:	2301      	movs	r3, #1
 8018d90:	4053      	eors	r3, r2
 8018d92:	b2db      	uxtb	r3, r3
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d005      	beq.n	8018da4 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8018d98:	193b      	adds	r3, r7, r4
 8018d9a:	193a      	adds	r2, r7, r4
 8018d9c:	7812      	ldrb	r2, [r2, #0]
 8018d9e:	2101      	movs	r1, #1
 8018da0:	438a      	bics	r2, r1
 8018da2:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	781b      	ldrb	r3, [r3, #0]
 8018da8:	0019      	movs	r1, r3
 8018daa:	4a14      	ldr	r2, [pc, #80]	; (8018dfc <RegionEU868DlChannelReq+0x98>)
 8018dac:	000b      	movs	r3, r1
 8018dae:	005b      	lsls	r3, r3, #1
 8018db0:	185b      	adds	r3, r3, r1
 8018db2:	009b      	lsls	r3, r3, #2
 8018db4:	589b      	ldr	r3, [r3, r2]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d106      	bne.n	8018dc8 <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 8018dba:	220f      	movs	r2, #15
 8018dbc:	18bb      	adds	r3, r7, r2
 8018dbe:	18ba      	adds	r2, r7, r2
 8018dc0:	7812      	ldrb	r2, [r2, #0]
 8018dc2:	2102      	movs	r1, #2
 8018dc4:	438a      	bics	r2, r1
 8018dc6:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018dc8:	230f      	movs	r3, #15
 8018dca:	18fb      	adds	r3, r7, r3
 8018dcc:	781b      	ldrb	r3, [r3, #0]
 8018dce:	2b03      	cmp	r3, #3
 8018dd0:	d10c      	bne.n	8018dec <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	781b      	ldrb	r3, [r3, #0]
 8018dd6:	0018      	movs	r0, r3
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	685a      	ldr	r2, [r3, #4]
 8018ddc:	4907      	ldr	r1, [pc, #28]	; (8018dfc <RegionEU868DlChannelReq+0x98>)
 8018dde:	0003      	movs	r3, r0
 8018de0:	005b      	lsls	r3, r3, #1
 8018de2:	181b      	adds	r3, r3, r0
 8018de4:	009b      	lsls	r3, r3, #2
 8018de6:	18cb      	adds	r3, r1, r3
 8018de8:	3304      	adds	r3, #4
 8018dea:	601a      	str	r2, [r3, #0]
    }

    return status;
 8018dec:	230f      	movs	r3, #15
 8018dee:	18fb      	adds	r3, r7, r3
 8018df0:	781b      	ldrb	r3, [r3, #0]
}
 8018df2:	0018      	movs	r0, r3
 8018df4:	46bd      	mov	sp, r7
 8018df6:	b005      	add	sp, #20
 8018df8:	bd90      	pop	{r4, r7, pc}
 8018dfa:	46c0      	nop			; (mov r8, r8)
 8018dfc:	20000cd4 	.word	0x20000cd4

08018e00 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b082      	sub	sp, #8
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	0002      	movs	r2, r0
 8018e08:	1dfb      	adds	r3, r7, #7
 8018e0a:	701a      	strb	r2, [r3, #0]
 8018e0c:	1dbb      	adds	r3, r7, #6
 8018e0e:	1c0a      	adds	r2, r1, #0
 8018e10:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8018e12:	1dfb      	adds	r3, r7, #7
 8018e14:	781b      	ldrb	r3, [r3, #0]
 8018e16:	b25b      	sxtb	r3, r3
}
 8018e18:	0018      	movs	r0, r3
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	b002      	add	sp, #8
 8018e1e:	bd80      	pop	{r7, pc}

08018e20 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e22:	b099      	sub	sp, #100	; 0x64
 8018e24:	af02      	add	r7, sp, #8
 8018e26:	60f8      	str	r0, [r7, #12]
 8018e28:	60b9      	str	r1, [r7, #8]
 8018e2a:	607a      	str	r2, [r7, #4]
 8018e2c:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8018e2e:	2356      	movs	r3, #86	; 0x56
 8018e30:	18fb      	adds	r3, r7, r3
 8018e32:	2200      	movs	r2, #0
 8018e34:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 8018e36:	2355      	movs	r3, #85	; 0x55
 8018e38:	18fb      	adds	r3, r7, r3
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8018e3e:	2344      	movs	r3, #68	; 0x44
 8018e40:	18fb      	adds	r3, r7, r3
 8018e42:	2200      	movs	r2, #0
 8018e44:	601a      	str	r2, [r3, #0]
 8018e46:	3304      	adds	r3, #4
 8018e48:	220c      	movs	r2, #12
 8018e4a:	2100      	movs	r1, #0
 8018e4c:	0018      	movs	r0, r3
 8018e4e:	f004 ffa8 	bl	801dda2 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018e52:	2357      	movs	r3, #87	; 0x57
 8018e54:	18fb      	adds	r3, r7, r3
 8018e56:	220c      	movs	r2, #12
 8018e58:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8018e5a:	4b4a      	ldr	r3, [pc, #296]	; (8018f84 <RegionEU868NextChannel+0x164>)
 8018e5c:	2201      	movs	r2, #1
 8018e5e:	2100      	movs	r1, #0
 8018e60:	0018      	movs	r0, r3
 8018e62:	f7fe fa2c 	bl	80172be <RegionCommonCountChannels>
 8018e66:	1e03      	subs	r3, r0, #0
 8018e68:	d10a      	bne.n	8018e80 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018e6a:	4a47      	ldr	r2, [pc, #284]	; (8018f88 <RegionEU868NextChannel+0x168>)
 8018e6c:	239c      	movs	r3, #156	; 0x9c
 8018e6e:	005b      	lsls	r3, r3, #1
 8018e70:	5ad3      	ldrh	r3, [r2, r3]
 8018e72:	2207      	movs	r2, #7
 8018e74:	4313      	orrs	r3, r2
 8018e76:	b299      	uxth	r1, r3
 8018e78:	4a43      	ldr	r2, [pc, #268]	; (8018f88 <RegionEU868NextChannel+0x168>)
 8018e7a:	239c      	movs	r3, #156	; 0x9c
 8018e7c:	005b      	lsls	r3, r3, #1
 8018e7e:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	7a5a      	ldrb	r2, [r3, #9]
 8018e84:	2110      	movs	r1, #16
 8018e86:	187b      	adds	r3, r7, r1
 8018e88:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	7a1b      	ldrb	r3, [r3, #8]
 8018e8e:	b25b      	sxtb	r3, r3
 8018e90:	b2da      	uxtb	r2, r3
 8018e92:	187b      	adds	r3, r7, r1
 8018e94:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 8018e96:	000d      	movs	r5, r1
 8018e98:	197b      	adds	r3, r7, r5
 8018e9a:	4a3a      	ldr	r2, [pc, #232]	; (8018f84 <RegionEU868NextChannel+0x164>)
 8018e9c:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 8018e9e:	197b      	adds	r3, r7, r5
 8018ea0:	4a39      	ldr	r2, [pc, #228]	; (8018f88 <RegionEU868NextChannel+0x168>)
 8018ea2:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 8018ea4:	197b      	adds	r3, r7, r5
 8018ea6:	4a39      	ldr	r2, [pc, #228]	; (8018f8c <RegionEU868NextChannel+0x16c>)
 8018ea8:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8018eaa:	197b      	adds	r3, r7, r5
 8018eac:	2210      	movs	r2, #16
 8018eae:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 8018eb0:	197b      	adds	r3, r7, r5
 8018eb2:	2207      	movs	r2, #7
 8018eb4:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	681a      	ldr	r2, [r3, #0]
 8018eba:	2424      	movs	r4, #36	; 0x24
 8018ebc:	193b      	adds	r3, r7, r4
 8018ebe:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	685a      	ldr	r2, [r3, #4]
 8018ec4:	193b      	adds	r3, r7, r4
 8018ec6:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	7a9a      	ldrb	r2, [r3, #10]
 8018ecc:	193b      	adds	r3, r7, r4
 8018ece:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8018ed0:	193b      	adds	r3, r7, r4
 8018ed2:	2206      	movs	r2, #6
 8018ed4:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018ed6:	193b      	adds	r3, r7, r4
 8018ed8:	68fa      	ldr	r2, [r7, #12]
 8018eda:	330c      	adds	r3, #12
 8018edc:	320c      	adds	r2, #12
 8018ede:	ca03      	ldmia	r2!, {r0, r1}
 8018ee0:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	7d1a      	ldrb	r2, [r3, #20]
 8018ee6:	193b      	adds	r3, r7, r4
 8018ee8:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	2208      	movs	r2, #8
 8018eee:	569a      	ldrsb	r2, [r3, r2]
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	8adb      	ldrh	r3, [r3, #22]
 8018ef4:	0019      	movs	r1, r3
 8018ef6:	0010      	movs	r0, r2
 8018ef8:	f7fe ff80 	bl	8017dfc <GetTimeOnAir>
 8018efc:	0002      	movs	r2, r0
 8018efe:	0020      	movs	r0, r4
 8018f00:	183b      	adds	r3, r7, r0
 8018f02:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018f04:	183b      	adds	r3, r7, r0
 8018f06:	197a      	adds	r2, r7, r5
 8018f08:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018f0a:	2657      	movs	r6, #87	; 0x57
 8018f0c:	19bc      	adds	r4, r7, r6
 8018f0e:	2356      	movs	r3, #86	; 0x56
 8018f10:	18fd      	adds	r5, r7, r3
 8018f12:	2244      	movs	r2, #68	; 0x44
 8018f14:	18ba      	adds	r2, r7, r2
 8018f16:	6839      	ldr	r1, [r7, #0]
 8018f18:	1838      	adds	r0, r7, r0
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	9301      	str	r3, [sp, #4]
 8018f1e:	2355      	movs	r3, #85	; 0x55
 8018f20:	18fb      	adds	r3, r7, r3
 8018f22:	9300      	str	r3, [sp, #0]
 8018f24:	002b      	movs	r3, r5
 8018f26:	f7fe fdcf 	bl	8017ac8 <RegionCommonIdentifyChannels>
 8018f2a:	0003      	movs	r3, r0
 8018f2c:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018f2e:	19bb      	adds	r3, r7, r6
 8018f30:	781b      	ldrb	r3, [r3, #0]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d10e      	bne.n	8018f54 <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018f36:	2356      	movs	r3, #86	; 0x56
 8018f38:	18fb      	adds	r3, r7, r3
 8018f3a:	781b      	ldrb	r3, [r3, #0]
 8018f3c:	3b01      	subs	r3, #1
 8018f3e:	0019      	movs	r1, r3
 8018f40:	2000      	movs	r0, #0
 8018f42:	f000 f9c1 	bl	80192c8 <randr>
 8018f46:	0002      	movs	r2, r0
 8018f48:	2344      	movs	r3, #68	; 0x44
 8018f4a:	18fb      	adds	r3, r7, r3
 8018f4c:	5c9a      	ldrb	r2, [r3, r2]
 8018f4e:	68bb      	ldr	r3, [r7, #8]
 8018f50:	701a      	strb	r2, [r3, #0]
 8018f52:	e00f      	b.n	8018f74 <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8018f54:	2357      	movs	r3, #87	; 0x57
 8018f56:	18fb      	adds	r3, r7, r3
 8018f58:	781b      	ldrb	r3, [r3, #0]
 8018f5a:	2b0c      	cmp	r3, #12
 8018f5c:	d10a      	bne.n	8018f74 <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8018f5e:	4a0a      	ldr	r2, [pc, #40]	; (8018f88 <RegionEU868NextChannel+0x168>)
 8018f60:	239c      	movs	r3, #156	; 0x9c
 8018f62:	005b      	lsls	r3, r3, #1
 8018f64:	5ad3      	ldrh	r3, [r2, r3]
 8018f66:	2207      	movs	r2, #7
 8018f68:	4313      	orrs	r3, r2
 8018f6a:	b299      	uxth	r1, r3
 8018f6c:	4a06      	ldr	r2, [pc, #24]	; (8018f88 <RegionEU868NextChannel+0x168>)
 8018f6e:	239c      	movs	r3, #156	; 0x9c
 8018f70:	005b      	lsls	r3, r3, #1
 8018f72:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 8018f74:	2357      	movs	r3, #87	; 0x57
 8018f76:	18fb      	adds	r3, r7, r3
 8018f78:	781b      	ldrb	r3, [r3, #0]
}
 8018f7a:	0018      	movs	r0, r3
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	b017      	add	sp, #92	; 0x5c
 8018f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f82:	46c0      	nop			; (mov r8, r8)
 8018f84:	20000e0c 	.word	0x20000e0c
 8018f88:	20000cd4 	.word	0x20000cd4
 8018f8c:	20000d94 	.word	0x20000d94

08018f90 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8018f90:	b590      	push	{r4, r7, lr}
 8018f92:	b085      	sub	sp, #20
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8018f98:	230c      	movs	r3, #12
 8018f9a:	18fb      	adds	r3, r7, r3
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 8018fa0:	230f      	movs	r3, #15
 8018fa2:	18fb      	adds	r3, r7, r3
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8018fa8:	230e      	movs	r3, #14
 8018faa:	18fb      	adds	r3, r7, r3
 8018fac:	2200      	movs	r2, #0
 8018fae:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8018fb0:	210d      	movs	r1, #13
 8018fb2:	187b      	adds	r3, r7, r1
 8018fb4:	687a      	ldr	r2, [r7, #4]
 8018fb6:	7912      	ldrb	r2, [r2, #4]
 8018fb8:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8018fba:	187b      	adds	r3, r7, r1
 8018fbc:	781b      	ldrb	r3, [r3, #0]
 8018fbe:	2b02      	cmp	r3, #2
 8018fc0:	d801      	bhi.n	8018fc6 <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8018fc2:	2306      	movs	r3, #6
 8018fc4:	e0a1      	b.n	801910a <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8018fc6:	230d      	movs	r3, #13
 8018fc8:	18fb      	adds	r3, r7, r3
 8018fca:	781b      	ldrb	r3, [r3, #0]
 8018fcc:	2b0f      	cmp	r3, #15
 8018fce:	d901      	bls.n	8018fd4 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018fd0:	2303      	movs	r3, #3
 8018fd2:	e09a      	b.n	801910a <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	7a1b      	ldrb	r3, [r3, #8]
 8018fda:	011b      	lsls	r3, r3, #4
 8018fdc:	b25b      	sxtb	r3, r3
 8018fde:	111b      	asrs	r3, r3, #4
 8018fe0:	b25b      	sxtb	r3, r3
 8018fe2:	2207      	movs	r2, #7
 8018fe4:	2100      	movs	r1, #0
 8018fe6:	0018      	movs	r0, r3
 8018fe8:	f7fe f901 	bl	80171ee <RegionCommonValueInRange>
 8018fec:	1e03      	subs	r3, r0, #0
 8018fee:	d103      	bne.n	8018ff8 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8018ff0:	230f      	movs	r3, #15
 8018ff2:	18fb      	adds	r3, r7, r3
 8018ff4:	2201      	movs	r2, #1
 8018ff6:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	7a1b      	ldrb	r3, [r3, #8]
 8018ffe:	b25b      	sxtb	r3, r3
 8019000:	111b      	asrs	r3, r3, #4
 8019002:	b25b      	sxtb	r3, r3
 8019004:	2207      	movs	r2, #7
 8019006:	2100      	movs	r1, #0
 8019008:	0018      	movs	r0, r3
 801900a:	f7fe f8f0 	bl	80171ee <RegionCommonValueInRange>
 801900e:	1e03      	subs	r3, r0, #0
 8019010:	d103      	bne.n	801901a <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8019012:	230f      	movs	r3, #15
 8019014:	18fb      	adds	r3, r7, r3
 8019016:	2201      	movs	r2, #1
 8019018:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	7a1b      	ldrb	r3, [r3, #8]
 8019020:	011b      	lsls	r3, r3, #4
 8019022:	b25b      	sxtb	r3, r3
 8019024:	111b      	asrs	r3, r3, #4
 8019026:	b25a      	sxtb	r2, r3
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	7a1b      	ldrb	r3, [r3, #8]
 801902e:	b25b      	sxtb	r3, r3
 8019030:	111b      	asrs	r3, r3, #4
 8019032:	b25b      	sxtb	r3, r3
 8019034:	429a      	cmp	r2, r3
 8019036:	dd03      	ble.n	8019040 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8019038:	230f      	movs	r3, #15
 801903a:	18fb      	adds	r3, r7, r3
 801903c:	2201      	movs	r2, #1
 801903e:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8019040:	240e      	movs	r4, #14
 8019042:	193b      	adds	r3, r7, r4
 8019044:	781b      	ldrb	r3, [r3, #0]
 8019046:	2201      	movs	r2, #1
 8019048:	4053      	eors	r3, r2
 801904a:	b2db      	uxtb	r3, r3
 801904c:	2b00      	cmp	r3, #0
 801904e:	d012      	beq.n	8019076 <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	220c      	movs	r2, #12
 8019058:	18ba      	adds	r2, r7, r2
 801905a:	0011      	movs	r1, r2
 801905c:	0018      	movs	r0, r3
 801905e:	f7fe fe55 	bl	8017d0c <VerifyRfFreq>
 8019062:	0003      	movs	r3, r0
 8019064:	001a      	movs	r2, r3
 8019066:	2301      	movs	r3, #1
 8019068:	4053      	eors	r3, r2
 801906a:	b2db      	uxtb	r3, r3
 801906c:	2b00      	cmp	r3, #0
 801906e:	d002      	beq.n	8019076 <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 8019070:	193b      	adds	r3, r7, r4
 8019072:	2201      	movs	r2, #1
 8019074:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019076:	230f      	movs	r3, #15
 8019078:	18fb      	adds	r3, r7, r3
 801907a:	781b      	ldrb	r3, [r3, #0]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d006      	beq.n	801908e <RegionEU868ChannelAdd+0xfe>
 8019080:	230e      	movs	r3, #14
 8019082:	18fb      	adds	r3, r7, r3
 8019084:	781b      	ldrb	r3, [r3, #0]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d001      	beq.n	801908e <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801908a:	2306      	movs	r3, #6
 801908c:	e03d      	b.n	801910a <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 801908e:	230f      	movs	r3, #15
 8019090:	18fb      	adds	r3, r7, r3
 8019092:	781b      	ldrb	r3, [r3, #0]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d001      	beq.n	801909c <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019098:	2305      	movs	r3, #5
 801909a:	e036      	b.n	801910a <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 801909c:	230e      	movs	r3, #14
 801909e:	18fb      	adds	r3, r7, r3
 80190a0:	781b      	ldrb	r3, [r3, #0]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d001      	beq.n	80190aa <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80190a6:	2304      	movs	r3, #4
 80190a8:	e02f      	b.n	801910a <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80190aa:	240d      	movs	r4, #13
 80190ac:	193b      	adds	r3, r7, r4
 80190ae:	781a      	ldrb	r2, [r3, #0]
 80190b0:	0013      	movs	r3, r2
 80190b2:	005b      	lsls	r3, r3, #1
 80190b4:	189b      	adds	r3, r3, r2
 80190b6:	009b      	lsls	r3, r3, #2
 80190b8:	4a16      	ldr	r2, [pc, #88]	; (8019114 <RegionEU868ChannelAdd+0x184>)
 80190ba:	1898      	adds	r0, r3, r2
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	220c      	movs	r2, #12
 80190c2:	0019      	movs	r1, r3
 80190c4:	f000 f916 	bl	80192f4 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 80190c8:	193b      	adds	r3, r7, r4
 80190ca:	781a      	ldrb	r2, [r3, #0]
 80190cc:	230c      	movs	r3, #12
 80190ce:	18fb      	adds	r3, r7, r3
 80190d0:	7818      	ldrb	r0, [r3, #0]
 80190d2:	4910      	ldr	r1, [pc, #64]	; (8019114 <RegionEU868ChannelAdd+0x184>)
 80190d4:	0013      	movs	r3, r2
 80190d6:	005b      	lsls	r3, r3, #1
 80190d8:	189b      	adds	r3, r3, r2
 80190da:	009b      	lsls	r3, r3, #2
 80190dc:	18cb      	adds	r3, r1, r3
 80190de:	3309      	adds	r3, #9
 80190e0:	1c02      	adds	r2, r0, #0
 80190e2:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 80190e4:	4a0b      	ldr	r2, [pc, #44]	; (8019114 <RegionEU868ChannelAdd+0x184>)
 80190e6:	239c      	movs	r3, #156	; 0x9c
 80190e8:	005b      	lsls	r3, r3, #1
 80190ea:	5ad3      	ldrh	r3, [r2, r3]
 80190ec:	b21a      	sxth	r2, r3
 80190ee:	193b      	adds	r3, r7, r4
 80190f0:	781b      	ldrb	r3, [r3, #0]
 80190f2:	2101      	movs	r1, #1
 80190f4:	4099      	lsls	r1, r3
 80190f6:	000b      	movs	r3, r1
 80190f8:	b21b      	sxth	r3, r3
 80190fa:	4313      	orrs	r3, r2
 80190fc:	b21b      	sxth	r3, r3
 80190fe:	b299      	uxth	r1, r3
 8019100:	4a04      	ldr	r2, [pc, #16]	; (8019114 <RegionEU868ChannelAdd+0x184>)
 8019102:	239c      	movs	r3, #156	; 0x9c
 8019104:	005b      	lsls	r3, r3, #1
 8019106:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8019108:	2300      	movs	r3, #0
}
 801910a:	0018      	movs	r0, r3
 801910c:	46bd      	mov	sp, r7
 801910e:	b005      	add	sp, #20
 8019110:	bd90      	pop	{r4, r7, pc}
 8019112:	46c0      	nop			; (mov r8, r8)
 8019114:	20000cd4 	.word	0x20000cd4

08019118 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019118:	b590      	push	{r4, r7, lr}
 801911a:	b087      	sub	sp, #28
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8019120:	2117      	movs	r1, #23
 8019122:	187b      	adds	r3, r7, r1
 8019124:	687a      	ldr	r2, [r7, #4]
 8019126:	7812      	ldrb	r2, [r2, #0]
 8019128:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801912a:	187b      	adds	r3, r7, r1
 801912c:	781b      	ldrb	r3, [r3, #0]
 801912e:	2b02      	cmp	r3, #2
 8019130:	d801      	bhi.n	8019136 <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8019132:	2300      	movs	r3, #0
 8019134:	e015      	b.n	8019162 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019136:	2417      	movs	r4, #23
 8019138:	193b      	adds	r3, r7, r4
 801913a:	781a      	ldrb	r2, [r3, #0]
 801913c:	490b      	ldr	r1, [pc, #44]	; (801916c <RegionEU868ChannelsRemove+0x54>)
 801913e:	0013      	movs	r3, r2
 8019140:	005b      	lsls	r3, r3, #1
 8019142:	189b      	adds	r3, r3, r2
 8019144:	009b      	lsls	r3, r3, #2
 8019146:	18cb      	adds	r3, r1, r3
 8019148:	220c      	movs	r2, #12
 801914a:	2100      	movs	r1, #0
 801914c:	0018      	movs	r0, r3
 801914e:	f004 fe28 	bl	801dda2 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019152:	193b      	adds	r3, r7, r4
 8019154:	7819      	ldrb	r1, [r3, #0]
 8019156:	4b06      	ldr	r3, [pc, #24]	; (8019170 <RegionEU868ChannelsRemove+0x58>)
 8019158:	2210      	movs	r2, #16
 801915a:	0018      	movs	r0, r3
 801915c:	f7fe f86d 	bl	801723a <RegionCommonChanDisable>
 8019160:	0003      	movs	r3, r0
}
 8019162:	0018      	movs	r0, r3
 8019164:	46bd      	mov	sp, r7
 8019166:	b007      	add	sp, #28
 8019168:	bd90      	pop	{r4, r7, pc}
 801916a:	46c0      	nop			; (mov r8, r8)
 801916c:	20000cd4 	.word	0x20000cd4
 8019170:	20000e0c 	.word	0x20000e0c

08019174 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019176:	b085      	sub	sp, #20
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	2002      	movs	r0, #2
 8019180:	5618      	ldrsb	r0, [r3, r0]
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	781b      	ldrb	r3, [r3, #0]
 8019186:	0019      	movs	r1, r3
 8019188:	4a23      	ldr	r2, [pc, #140]	; (8019218 <RegionEU868SetContinuousWave+0xa4>)
 801918a:	000b      	movs	r3, r1
 801918c:	005b      	lsls	r3, r3, #1
 801918e:	185b      	adds	r3, r3, r1
 8019190:	009b      	lsls	r3, r3, #2
 8019192:	18d3      	adds	r3, r2, r3
 8019194:	3309      	adds	r3, #9
 8019196:	781b      	ldrb	r3, [r3, #0]
 8019198:	001c      	movs	r4, r3
 801919a:	4a1f      	ldr	r2, [pc, #124]	; (8019218 <RegionEU868SetContinuousWave+0xa4>)
 801919c:	21c2      	movs	r1, #194	; 0xc2
 801919e:	0023      	movs	r3, r4
 80191a0:	009b      	lsls	r3, r3, #2
 80191a2:	191b      	adds	r3, r3, r4
 80191a4:	009b      	lsls	r3, r3, #2
 80191a6:	18d3      	adds	r3, r2, r3
 80191a8:	185b      	adds	r3, r3, r1
 80191aa:	2100      	movs	r1, #0
 80191ac:	5659      	ldrsb	r1, [r3, r1]
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	2201      	movs	r2, #1
 80191b2:	569a      	ldrsb	r2, [r3, r2]
 80191b4:	260f      	movs	r6, #15
 80191b6:	19bc      	adds	r4, r7, r6
 80191b8:	4b18      	ldr	r3, [pc, #96]	; (801921c <RegionEU868SetContinuousWave+0xa8>)
 80191ba:	f7fe fd7f 	bl	8017cbc <LimitTxPower>
 80191be:	0003      	movs	r3, r0
 80191c0:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80191c2:	200e      	movs	r0, #14
 80191c4:	183b      	adds	r3, r7, r0
 80191c6:	2200      	movs	r2, #0
 80191c8:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	781b      	ldrb	r3, [r3, #0]
 80191ce:	0019      	movs	r1, r3
 80191d0:	4a11      	ldr	r2, [pc, #68]	; (8019218 <RegionEU868SetContinuousWave+0xa4>)
 80191d2:	000b      	movs	r3, r1
 80191d4:	005b      	lsls	r3, r3, #1
 80191d6:	185b      	adds	r3, r3, r1
 80191d8:	009b      	lsls	r3, r3, #2
 80191da:	589b      	ldr	r3, [r3, r2]
 80191dc:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	6859      	ldr	r1, [r3, #4]
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	689a      	ldr	r2, [r3, #8]
 80191e6:	0005      	movs	r5, r0
 80191e8:	183c      	adds	r4, r7, r0
 80191ea:	19bb      	adds	r3, r7, r6
 80191ec:	781b      	ldrb	r3, [r3, #0]
 80191ee:	b25b      	sxtb	r3, r3
 80191f0:	0018      	movs	r0, r3
 80191f2:	f7fe fb41 	bl	8017878 <RegionCommonComputeTxPower>
 80191f6:	0003      	movs	r3, r0
 80191f8:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80191fa:	4b09      	ldr	r3, [pc, #36]	; (8019220 <RegionEU868SetContinuousWave+0xac>)
 80191fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80191fe:	687a      	ldr	r2, [r7, #4]
 8019200:	8994      	ldrh	r4, [r2, #12]
 8019202:	197a      	adds	r2, r7, r5
 8019204:	2100      	movs	r1, #0
 8019206:	5651      	ldrsb	r1, [r2, r1]
 8019208:	68b8      	ldr	r0, [r7, #8]
 801920a:	0022      	movs	r2, r4
 801920c:	4798      	blx	r3
}
 801920e:	46c0      	nop			; (mov r8, r8)
 8019210:	46bd      	mov	sp, r7
 8019212:	b005      	add	sp, #20
 8019214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019216:	46c0      	nop			; (mov r8, r8)
 8019218:	20000cd4 	.word	0x20000cd4
 801921c:	20000e0c 	.word	0x20000e0c
 8019220:	0801f0b4 	.word	0x0801f0b4

08019224 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019224:	b590      	push	{r4, r7, lr}
 8019226:	b085      	sub	sp, #20
 8019228:	af00      	add	r7, sp, #0
 801922a:	0004      	movs	r4, r0
 801922c:	0008      	movs	r0, r1
 801922e:	0011      	movs	r1, r2
 8019230:	1dfb      	adds	r3, r7, #7
 8019232:	1c22      	adds	r2, r4, #0
 8019234:	701a      	strb	r2, [r3, #0]
 8019236:	1dbb      	adds	r3, r7, #6
 8019238:	1c02      	adds	r2, r0, #0
 801923a:	701a      	strb	r2, [r3, #0]
 801923c:	1d7b      	adds	r3, r7, #5
 801923e:	1c0a      	adds	r2, r1, #0
 8019240:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8019242:	1dbb      	adds	r3, r7, #6
 8019244:	781a      	ldrb	r2, [r3, #0]
 8019246:	1d7b      	adds	r3, r7, #5
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	1ad3      	subs	r3, r2, r3
 801924c:	b2da      	uxtb	r2, r3
 801924e:	210f      	movs	r1, #15
 8019250:	187b      	adds	r3, r7, r1
 8019252:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8019254:	000a      	movs	r2, r1
 8019256:	18bb      	adds	r3, r7, r2
 8019258:	781b      	ldrb	r3, [r3, #0]
 801925a:	2b7f      	cmp	r3, #127	; 0x7f
 801925c:	d902      	bls.n	8019264 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 801925e:	18bb      	adds	r3, r7, r2
 8019260:	2200      	movs	r2, #0
 8019262:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8019264:	230f      	movs	r3, #15
 8019266:	18fb      	adds	r3, r7, r3
 8019268:	781b      	ldrb	r3, [r3, #0]
}
 801926a:	0018      	movs	r0, r3
 801926c:	46bd      	mov	sp, r7
 801926e:	b005      	add	sp, #20
 8019270:	bd90      	pop	{r4, r7, pc}
	...

08019274 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019274:	b580      	push	{r7, lr}
 8019276:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019278:	4b08      	ldr	r3, [pc, #32]	; (801929c <rand1+0x28>)
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	4a08      	ldr	r2, [pc, #32]	; (80192a0 <rand1+0x2c>)
 801927e:	4353      	muls	r3, r2
 8019280:	4a08      	ldr	r2, [pc, #32]	; (80192a4 <rand1+0x30>)
 8019282:	189a      	adds	r2, r3, r2
 8019284:	4b05      	ldr	r3, [pc, #20]	; (801929c <rand1+0x28>)
 8019286:	601a      	str	r2, [r3, #0]
 8019288:	4b04      	ldr	r3, [pc, #16]	; (801929c <rand1+0x28>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	4906      	ldr	r1, [pc, #24]	; (80192a8 <rand1+0x34>)
 801928e:	0018      	movs	r0, r3
 8019290:	f7e6 ffc8 	bl	8000224 <__aeabi_uidivmod>
 8019294:	000b      	movs	r3, r1
}
 8019296:	0018      	movs	r0, r3
 8019298:	46bd      	mov	sp, r7
 801929a:	bd80      	pop	{r7, pc}
 801929c:	200001ac 	.word	0x200001ac
 80192a0:	41c64e6d 	.word	0x41c64e6d
 80192a4:	00003039 	.word	0x00003039
 80192a8:	7fffffff 	.word	0x7fffffff

080192ac <srand1>:

void srand1( uint32_t seed )
{
 80192ac:	b580      	push	{r7, lr}
 80192ae:	b082      	sub	sp, #8
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	6078      	str	r0, [r7, #4]
    next = seed;
 80192b4:	4b03      	ldr	r3, [pc, #12]	; (80192c4 <srand1+0x18>)
 80192b6:	687a      	ldr	r2, [r7, #4]
 80192b8:	601a      	str	r2, [r3, #0]
}
 80192ba:	46c0      	nop			; (mov r8, r8)
 80192bc:	46bd      	mov	sp, r7
 80192be:	b002      	add	sp, #8
 80192c0:	bd80      	pop	{r7, pc}
 80192c2:	46c0      	nop			; (mov r8, r8)
 80192c4:	200001ac 	.word	0x200001ac

080192c8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b082      	sub	sp, #8
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]
 80192d0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80192d2:	f7ff ffcf 	bl	8019274 <rand1>
 80192d6:	683a      	ldr	r2, [r7, #0]
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	1ad3      	subs	r3, r2, r3
 80192dc:	3301      	adds	r3, #1
 80192de:	0019      	movs	r1, r3
 80192e0:	f7e7 f88a 	bl	80003f8 <__aeabi_idivmod>
 80192e4:	000b      	movs	r3, r1
 80192e6:	001a      	movs	r2, r3
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	18d3      	adds	r3, r2, r3
}
 80192ec:	0018      	movs	r0, r3
 80192ee:	46bd      	mov	sp, r7
 80192f0:	b002      	add	sp, #8
 80192f2:	bd80      	pop	{r7, pc}

080192f4 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b084      	sub	sp, #16
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	60f8      	str	r0, [r7, #12]
 80192fc:	60b9      	str	r1, [r7, #8]
 80192fe:	1dbb      	adds	r3, r7, #6
 8019300:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8019302:	e007      	b.n	8019314 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019304:	68ba      	ldr	r2, [r7, #8]
 8019306:	1c53      	adds	r3, r2, #1
 8019308:	60bb      	str	r3, [r7, #8]
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	1c59      	adds	r1, r3, #1
 801930e:	60f9      	str	r1, [r7, #12]
 8019310:	7812      	ldrb	r2, [r2, #0]
 8019312:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019314:	1dbb      	adds	r3, r7, #6
 8019316:	881b      	ldrh	r3, [r3, #0]
 8019318:	1dba      	adds	r2, r7, #6
 801931a:	1e59      	subs	r1, r3, #1
 801931c:	8011      	strh	r1, [r2, #0]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d1f0      	bne.n	8019304 <memcpy1+0x10>
    }
}
 8019322:	46c0      	nop			; (mov r8, r8)
 8019324:	46c0      	nop			; (mov r8, r8)
 8019326:	46bd      	mov	sp, r7
 8019328:	b004      	add	sp, #16
 801932a:	bd80      	pop	{r7, pc}

0801932c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b084      	sub	sp, #16
 8019330:	af00      	add	r7, sp, #0
 8019332:	60f8      	str	r0, [r7, #12]
 8019334:	60b9      	str	r1, [r7, #8]
 8019336:	1dbb      	adds	r3, r7, #6
 8019338:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 801933a:	1dbb      	adds	r3, r7, #6
 801933c:	881b      	ldrh	r3, [r3, #0]
 801933e:	3b01      	subs	r3, #1
 8019340:	68fa      	ldr	r2, [r7, #12]
 8019342:	18d3      	adds	r3, r2, r3
 8019344:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019346:	e007      	b.n	8019358 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8019348:	68ba      	ldr	r2, [r7, #8]
 801934a:	1c53      	adds	r3, r2, #1
 801934c:	60bb      	str	r3, [r7, #8]
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	1e59      	subs	r1, r3, #1
 8019352:	60f9      	str	r1, [r7, #12]
 8019354:	7812      	ldrb	r2, [r2, #0]
 8019356:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019358:	1dbb      	adds	r3, r7, #6
 801935a:	881b      	ldrh	r3, [r3, #0]
 801935c:	1dba      	adds	r2, r7, #6
 801935e:	1e59      	subs	r1, r3, #1
 8019360:	8011      	strh	r1, [r2, #0]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d1f0      	bne.n	8019348 <memcpyr+0x1c>
    }
}
 8019366:	46c0      	nop			; (mov r8, r8)
 8019368:	46c0      	nop			; (mov r8, r8)
 801936a:	46bd      	mov	sp, r7
 801936c:	b004      	add	sp, #16
 801936e:	bd80      	pop	{r7, pc}

08019370 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b082      	sub	sp, #8
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
 8019378:	0008      	movs	r0, r1
 801937a:	0011      	movs	r1, r2
 801937c:	1cfb      	adds	r3, r7, #3
 801937e:	1c02      	adds	r2, r0, #0
 8019380:	701a      	strb	r2, [r3, #0]
 8019382:	003b      	movs	r3, r7
 8019384:	1c0a      	adds	r2, r1, #0
 8019386:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8019388:	e005      	b.n	8019396 <memset1+0x26>
    {
        *dst++ = value;
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	1c5a      	adds	r2, r3, #1
 801938e:	607a      	str	r2, [r7, #4]
 8019390:	1cfa      	adds	r2, r7, #3
 8019392:	7812      	ldrb	r2, [r2, #0]
 8019394:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019396:	003b      	movs	r3, r7
 8019398:	881b      	ldrh	r3, [r3, #0]
 801939a:	003a      	movs	r2, r7
 801939c:	1e59      	subs	r1, r3, #1
 801939e:	8011      	strh	r1, [r2, #0]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d1f2      	bne.n	801938a <memset1+0x1a>
    }
}
 80193a4:	46c0      	nop			; (mov r8, r8)
 80193a6:	46c0      	nop			; (mov r8, r8)
 80193a8:	46bd      	mov	sp, r7
 80193aa:	b002      	add	sp, #8
 80193ac:	bd80      	pop	{r7, pc}
	...

080193b0 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 80193b0:	b590      	push	{r4, r7, lr}
 80193b2:	b087      	sub	sp, #28
 80193b4:	af02      	add	r7, sp, #8
 80193b6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80193b8:	4b34      	ldr	r3, [pc, #208]	; (801948c <SX1276Init+0xdc>)
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80193be:	4b34      	ldr	r3, [pc, #208]	; (8019490 <SX1276Init+0xe0>)
 80193c0:	2201      	movs	r2, #1
 80193c2:	4251      	negs	r1, r2
 80193c4:	4833      	ldr	r0, [pc, #204]	; (8019494 <SX1276Init+0xe4>)
 80193c6:	2200      	movs	r2, #0
 80193c8:	9200      	str	r2, [sp, #0]
 80193ca:	2200      	movs	r2, #0
 80193cc:	f003 fa9a 	bl	801c904 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80193d0:	4b2f      	ldr	r3, [pc, #188]	; (8019490 <SX1276Init+0xe0>)
 80193d2:	2201      	movs	r2, #1
 80193d4:	4251      	negs	r1, r2
 80193d6:	4830      	ldr	r0, [pc, #192]	; (8019498 <SX1276Init+0xe8>)
 80193d8:	2200      	movs	r2, #0
 80193da:	9200      	str	r2, [sp, #0]
 80193dc:	2200      	movs	r2, #0
 80193de:	f003 fa91 	bl	801c904 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80193e2:	4b2b      	ldr	r3, [pc, #172]	; (8019490 <SX1276Init+0xe0>)
 80193e4:	2201      	movs	r2, #1
 80193e6:	4251      	negs	r1, r2
 80193e8:	482c      	ldr	r0, [pc, #176]	; (801949c <SX1276Init+0xec>)
 80193ea:	2200      	movs	r2, #0
 80193ec:	9200      	str	r2, [sp, #0]
 80193ee:	2200      	movs	r2, #0
 80193f0:	f003 fa88 	bl	801c904 <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 80193f4:	2001      	movs	r0, #1
 80193f6:	f7ec fc75 	bl	8005ce4 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 80193fa:	f001 fbf1 	bl	801abe0 <SX1276Reset>

    RxChainCalibration( );
 80193fe:	f000 f937 	bl	8019670 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8019402:	2000      	movs	r0, #0
 8019404:	f001 fbf3 	bl	801abee <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 8019408:	4b25      	ldr	r3, [pc, #148]	; (80194a0 <SX1276Init+0xf0>)
 801940a:	0018      	movs	r0, r3
 801940c:	f7ec fdca 	bl	8005fa4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019410:	230f      	movs	r3, #15
 8019412:	18fb      	adds	r3, r7, r3
 8019414:	2200      	movs	r2, #0
 8019416:	701a      	strb	r2, [r3, #0]
 8019418:	e025      	b.n	8019466 <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 801941a:	240f      	movs	r4, #15
 801941c:	193b      	adds	r3, r7, r4
 801941e:	781a      	ldrb	r2, [r3, #0]
 8019420:	4920      	ldr	r1, [pc, #128]	; (80194a4 <SX1276Init+0xf4>)
 8019422:	0013      	movs	r3, r2
 8019424:	005b      	lsls	r3, r3, #1
 8019426:	189b      	adds	r3, r3, r2
 8019428:	5c5b      	ldrb	r3, [r3, r1]
 801942a:	0018      	movs	r0, r3
 801942c:	f001 fc4c 	bl	801acc8 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8019430:	193b      	adds	r3, r7, r4
 8019432:	781a      	ldrb	r2, [r3, #0]
 8019434:	491b      	ldr	r1, [pc, #108]	; (80194a4 <SX1276Init+0xf4>)
 8019436:	0013      	movs	r3, r2
 8019438:	005b      	lsls	r3, r3, #1
 801943a:	189b      	adds	r3, r3, r2
 801943c:	18cb      	adds	r3, r1, r3
 801943e:	3301      	adds	r3, #1
 8019440:	781b      	ldrb	r3, [r3, #0]
 8019442:	0018      	movs	r0, r3
 8019444:	193b      	adds	r3, r7, r4
 8019446:	781a      	ldrb	r2, [r3, #0]
 8019448:	4916      	ldr	r1, [pc, #88]	; (80194a4 <SX1276Init+0xf4>)
 801944a:	0013      	movs	r3, r2
 801944c:	005b      	lsls	r3, r3, #1
 801944e:	189b      	adds	r3, r3, r2
 8019450:	18cb      	adds	r3, r1, r3
 8019452:	3302      	adds	r3, #2
 8019454:	781b      	ldrb	r3, [r3, #0]
 8019456:	0019      	movs	r1, r3
 8019458:	f001 fc90 	bl	801ad7c <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801945c:	193b      	adds	r3, r7, r4
 801945e:	781a      	ldrb	r2, [r3, #0]
 8019460:	193b      	adds	r3, r7, r4
 8019462:	3201      	adds	r2, #1
 8019464:	701a      	strb	r2, [r3, #0]
 8019466:	230f      	movs	r3, #15
 8019468:	18fb      	adds	r3, r7, r3
 801946a:	781b      	ldrb	r3, [r3, #0]
 801946c:	2b0f      	cmp	r3, #15
 801946e:	d9d4      	bls.n	801941a <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 8019470:	2000      	movs	r0, #0
 8019472:	f001 fc29 	bl	801acc8 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8019476:	4b0c      	ldr	r3, [pc, #48]	; (80194a8 <SX1276Init+0xf8>)
 8019478:	2200      	movs	r2, #0
 801947a:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801947c:	f7ec fc2c 	bl	8005cd8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8019480:	0003      	movs	r3, r0
 8019482:	3302      	adds	r3, #2
}
 8019484:	0018      	movs	r0, r3
 8019486:	46bd      	mov	sp, r7
 8019488:	b005      	add	sp, #20
 801948a:	bd90      	pop	{r4, r7, pc}
 801948c:	20000e10 	.word	0x20000e10
 8019490:	0801b1f5 	.word	0x0801b1f5
 8019494:	20001680 	.word	0x20001680
 8019498:	20001718 	.word	0x20001718
 801949c:	20001698 	.word	0x20001698
 80194a0:	200001b0 	.word	0x200001b0
 80194a4:	0801f120 	.word	0x0801f120
 80194a8:	200016b0 	.word	0x200016b0

080194ac <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 80194b0:	4b02      	ldr	r3, [pc, #8]	; (80194bc <SX1276GetStatus+0x10>)
 80194b2:	791b      	ldrb	r3, [r3, #4]
}
 80194b4:	0018      	movs	r0, r3
 80194b6:	46bd      	mov	sp, r7
 80194b8:	bd80      	pop	{r7, pc}
 80194ba:	46c0      	nop			; (mov r8, r8)
 80194bc:	200016b0 	.word	0x200016b0

080194c0 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80194c0:	b590      	push	{r4, r7, lr}
 80194c2:	b087      	sub	sp, #28
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 80194c8:	4b1d      	ldr	r3, [pc, #116]	; (8019540 <SX1276SetChannel+0x80>)
 80194ca:	687a      	ldr	r2, [r7, #4]
 80194cc:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	491c      	ldr	r1, [pc, #112]	; (8019544 <SX1276SetChannel+0x84>)
 80194d2:	0018      	movs	r0, r3
 80194d4:	f7e6 fe20 	bl	8000118 <__udivsi3>
 80194d8:	0003      	movs	r3, r0
 80194da:	617b      	str	r3, [r7, #20]
 80194dc:	6979      	ldr	r1, [r7, #20]
 80194de:	000b      	movs	r3, r1
 80194e0:	015b      	lsls	r3, r3, #5
 80194e2:	1a5b      	subs	r3, r3, r1
 80194e4:	019a      	lsls	r2, r3, #6
 80194e6:	1ad2      	subs	r2, r2, r3
 80194e8:	00d2      	lsls	r2, r2, #3
 80194ea:	1853      	adds	r3, r2, r1
 80194ec:	687a      	ldr	r2, [r7, #4]
 80194ee:	1ad3      	subs	r3, r2, r3
 80194f0:	613b      	str	r3, [r7, #16]
 80194f2:	697b      	ldr	r3, [r7, #20]
 80194f4:	021c      	lsls	r4, r3, #8
 80194f6:	693b      	ldr	r3, [r7, #16]
 80194f8:	021b      	lsls	r3, r3, #8
 80194fa:	4a13      	ldr	r2, [pc, #76]	; (8019548 <SX1276SetChannel+0x88>)
 80194fc:	4694      	mov	ip, r2
 80194fe:	4463      	add	r3, ip
 8019500:	4910      	ldr	r1, [pc, #64]	; (8019544 <SX1276SetChannel+0x84>)
 8019502:	0018      	movs	r0, r3
 8019504:	f7e6 fe08 	bl	8000118 <__udivsi3>
 8019508:	0003      	movs	r3, r0
 801950a:	18e3      	adds	r3, r4, r3
 801950c:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	0c1b      	lsrs	r3, r3, #16
 8019512:	b2db      	uxtb	r3, r3
 8019514:	0019      	movs	r1, r3
 8019516:	2006      	movs	r0, #6
 8019518:	f001 fc30 	bl	801ad7c <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	0a1b      	lsrs	r3, r3, #8
 8019520:	b2db      	uxtb	r3, r3
 8019522:	0019      	movs	r1, r3
 8019524:	2007      	movs	r0, #7
 8019526:	f001 fc29 	bl	801ad7c <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	b2db      	uxtb	r3, r3
 801952e:	0019      	movs	r1, r3
 8019530:	2008      	movs	r0, #8
 8019532:	f001 fc23 	bl	801ad7c <SX1276Write>
}
 8019536:	46c0      	nop			; (mov r8, r8)
 8019538:	46bd      	mov	sp, r7
 801953a:	b007      	add	sp, #28
 801953c:	bd90      	pop	{r4, r7, pc}
 801953e:	46c0      	nop			; (mov r8, r8)
 8019540:	200016b0 	.word	0x200016b0
 8019544:	00003d09 	.word	0x00003d09
 8019548:	00001e84 	.word	0x00001e84

0801954c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801954c:	b5b0      	push	{r4, r5, r7, lr}
 801954e:	b086      	sub	sp, #24
 8019550:	af00      	add	r7, sp, #0
 8019552:	60f8      	str	r0, [r7, #12]
 8019554:	60b9      	str	r1, [r7, #8]
 8019556:	603b      	str	r3, [r7, #0]
 8019558:	1dbb      	adds	r3, r7, #6
 801955a:	801a      	strh	r2, [r3, #0]
    bool status = true;
 801955c:	2317      	movs	r3, #23
 801955e:	18fb      	adds	r3, r7, r3
 8019560:	2201      	movs	r2, #1
 8019562:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8019564:	2314      	movs	r3, #20
 8019566:	18fb      	adds	r3, r7, r3
 8019568:	2200      	movs	r2, #0
 801956a:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 801956c:	2300      	movs	r3, #0
 801956e:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 8019570:	f001 f80c 	bl	801a58c <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 8019574:	2000      	movs	r0, #0
 8019576:	f001 fba7 	bl	801acc8 <SX1276SetModem>

    SX1276SetChannel( freq );
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	0018      	movs	r0, r3
 801957e:	f7ff ff9f 	bl	80194c0 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8019582:	68bb      	ldr	r3, [r7, #8]
 8019584:	0018      	movs	r0, r3
 8019586:	f001 fd07 	bl	801af98 <GetFskBandwidthRegValue>
 801958a:	0003      	movs	r3, r0
 801958c:	0019      	movs	r1, r3
 801958e:	2012      	movs	r0, #18
 8019590:	f001 fbf4 	bl	801ad7c <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	0018      	movs	r0, r3
 8019598:	f001 fcfe 	bl	801af98 <GetFskBandwidthRegValue>
 801959c:	0003      	movs	r3, r0
 801959e:	0019      	movs	r1, r3
 80195a0:	2013      	movs	r0, #19
 80195a2:	f001 fbeb 	bl	801ad7c <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80195a6:	2005      	movs	r0, #5
 80195a8:	f001 fb21 	bl	801abee <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 80195ac:	2001      	movs	r0, #1
 80195ae:	f7eb fd6a 	bl	8005086 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80195b2:	f003 fb87 	bl	801ccc4 <UTIL_TIMER_GetCurrentTime>
 80195b6:	0003      	movs	r3, r0
 80195b8:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80195ba:	e013      	b.n	80195e4 <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 80195bc:	2514      	movs	r5, #20
 80195be:	197c      	adds	r4, r7, r5
 80195c0:	2000      	movs	r0, #0
 80195c2:	f001 fac1 	bl	801ab48 <SX1276ReadRssi>
 80195c6:	0003      	movs	r3, r0
 80195c8:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 80195ca:	197a      	adds	r2, r7, r5
 80195cc:	1dbb      	adds	r3, r7, #6
 80195ce:	2100      	movs	r1, #0
 80195d0:	5e52      	ldrsh	r2, [r2, r1]
 80195d2:	2100      	movs	r1, #0
 80195d4:	5e5b      	ldrsh	r3, [r3, r1]
 80195d6:	429a      	cmp	r2, r3
 80195d8:	dd04      	ble.n	80195e4 <SX1276IsChannelFree+0x98>
        {
            status = false;
 80195da:	2317      	movs	r3, #23
 80195dc:	18fb      	adds	r3, r7, r3
 80195de:	2200      	movs	r2, #0
 80195e0:	701a      	strb	r2, [r3, #0]
            break;
 80195e2:	e007      	b.n	80195f4 <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80195e4:	693b      	ldr	r3, [r7, #16]
 80195e6:	0018      	movs	r0, r3
 80195e8:	f003 fb80 	bl	801ccec <UTIL_TIMER_GetElapsedTime>
 80195ec:	0002      	movs	r2, r0
 80195ee:	683b      	ldr	r3, [r7, #0]
 80195f0:	4293      	cmp	r3, r2
 80195f2:	d8e3      	bhi.n	80195bc <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 80195f4:	f000 ffca 	bl	801a58c <SX1276SetSleep>
    return status;
 80195f8:	2317      	movs	r3, #23
 80195fa:	18fb      	adds	r3, r7, r3
 80195fc:	781b      	ldrb	r3, [r3, #0]
}
 80195fe:	0018      	movs	r0, r3
 8019600:	46bd      	mov	sp, r7
 8019602:	b006      	add	sp, #24
 8019604:	bdb0      	pop	{r4, r5, r7, pc}

08019606 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8019606:	b580      	push	{r7, lr}
 8019608:	b082      	sub	sp, #8
 801960a:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 801960c:	2300      	movs	r3, #0
 801960e:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8019610:	2001      	movs	r0, #1
 8019612:	f001 fb59 	bl	801acc8 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8019616:	21ff      	movs	r1, #255	; 0xff
 8019618:	2011      	movs	r0, #17
 801961a:	f001 fbaf 	bl	801ad7c <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801961e:	2005      	movs	r0, #5
 8019620:	f001 fae5 	bl	801abee <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8019624:	1dfb      	adds	r3, r7, #7
 8019626:	2200      	movs	r2, #0
 8019628:	701a      	strb	r2, [r3, #0]
 801962a:	e015      	b.n	8019658 <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 801962c:	2001      	movs	r0, #1
 801962e:	f7eb fd2a 	bl	8005086 <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8019632:	202c      	movs	r0, #44	; 0x2c
 8019634:	f001 fbb3 	bl	801ad9e <SX1276Read>
 8019638:	0003      	movs	r3, r0
 801963a:	001a      	movs	r2, r3
 801963c:	2301      	movs	r3, #1
 801963e:	401a      	ands	r2, r3
 8019640:	1dfb      	adds	r3, r7, #7
 8019642:	781b      	ldrb	r3, [r3, #0]
 8019644:	409a      	lsls	r2, r3
 8019646:	0013      	movs	r3, r2
 8019648:	683a      	ldr	r2, [r7, #0]
 801964a:	4313      	orrs	r3, r2
 801964c:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 801964e:	1dfb      	adds	r3, r7, #7
 8019650:	781a      	ldrb	r2, [r3, #0]
 8019652:	1dfb      	adds	r3, r7, #7
 8019654:	3201      	adds	r2, #1
 8019656:	701a      	strb	r2, [r3, #0]
 8019658:	1dfb      	adds	r3, r7, #7
 801965a:	781b      	ldrb	r3, [r3, #0]
 801965c:	2b1f      	cmp	r3, #31
 801965e:	d9e5      	bls.n	801962c <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8019660:	f000 ff94 	bl	801a58c <SX1276SetSleep>

    return rnd;
 8019664:	683b      	ldr	r3, [r7, #0]
}
 8019666:	0018      	movs	r0, r3
 8019668:	46bd      	mov	sp, r7
 801966a:	b002      	add	sp, #8
 801966c:	bd80      	pop	{r7, pc}
	...

08019670 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8019670:	b590      	push	{r4, r7, lr}
 8019672:	b087      	sub	sp, #28
 8019674:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8019676:	2317      	movs	r3, #23
 8019678:	18fc      	adds	r4, r7, r3
 801967a:	2009      	movs	r0, #9
 801967c:	f001 fb8f 	bl	801ad9e <SX1276Read>
 8019680:	0003      	movs	r3, r0
 8019682:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8019684:	2006      	movs	r0, #6
 8019686:	f001 fb8a 	bl	801ad9e <SX1276Read>
 801968a:	0003      	movs	r3, r0
 801968c:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801968e:	2007      	movs	r0, #7
 8019690:	f001 fb85 	bl	801ad9e <SX1276Read>
 8019694:	0003      	movs	r3, r0
 8019696:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8019698:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 801969a:	2008      	movs	r0, #8
 801969c:	f001 fb7f 	bl	801ad9e <SX1276Read>
 80196a0:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80196a2:	4323      	orrs	r3, r4
 80196a4:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80196a6:	693b      	ldr	r3, [r7, #16]
 80196a8:	0a1b      	lsrs	r3, r3, #8
 80196aa:	60fb      	str	r3, [r7, #12]
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	021b      	lsls	r3, r3, #8
 80196b0:	693a      	ldr	r2, [r7, #16]
 80196b2:	1ad3      	subs	r3, r2, r3
 80196b4:	60bb      	str	r3, [r7, #8]
 80196b6:	68f9      	ldr	r1, [r7, #12]
 80196b8:	000b      	movs	r3, r1
 80196ba:	015b      	lsls	r3, r3, #5
 80196bc:	1a5b      	subs	r3, r3, r1
 80196be:	019a      	lsls	r2, r3, #6
 80196c0:	1ad2      	subs	r2, r2, r3
 80196c2:	00d2      	lsls	r2, r2, #3
 80196c4:	1850      	adds	r0, r2, r1
 80196c6:	68b9      	ldr	r1, [r7, #8]
 80196c8:	000b      	movs	r3, r1
 80196ca:	015b      	lsls	r3, r3, #5
 80196cc:	1a5b      	subs	r3, r3, r1
 80196ce:	019a      	lsls	r2, r3, #6
 80196d0:	1ad2      	subs	r2, r2, r3
 80196d2:	00d2      	lsls	r2, r2, #3
 80196d4:	1853      	adds	r3, r2, r1
 80196d6:	3380      	adds	r3, #128	; 0x80
 80196d8:	0a1b      	lsrs	r3, r3, #8
 80196da:	18c3      	adds	r3, r0, r3
 80196dc:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 80196de:	2100      	movs	r1, #0
 80196e0:	2009      	movs	r0, #9
 80196e2:	f001 fb4b 	bl	801ad7c <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80196e6:	203b      	movs	r0, #59	; 0x3b
 80196e8:	f001 fb59 	bl	801ad9e <SX1276Read>
 80196ec:	0003      	movs	r3, r0
 80196ee:	001a      	movs	r2, r3
 80196f0:	2340      	movs	r3, #64	; 0x40
 80196f2:	4313      	orrs	r3, r2
 80196f4:	b2db      	uxtb	r3, r3
 80196f6:	0019      	movs	r1, r3
 80196f8:	203b      	movs	r0, #59	; 0x3b
 80196fa:	f001 fb3f 	bl	801ad7c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80196fe:	46c0      	nop			; (mov r8, r8)
 8019700:	203b      	movs	r0, #59	; 0x3b
 8019702:	f001 fb4c 	bl	801ad9e <SX1276Read>
 8019706:	0003      	movs	r3, r0
 8019708:	001a      	movs	r2, r3
 801970a:	2320      	movs	r3, #32
 801970c:	4013      	ands	r3, r2
 801970e:	2b20      	cmp	r3, #32
 8019710:	d0f6      	beq.n	8019700 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8019712:	4b14      	ldr	r3, [pc, #80]	; (8019764 <RxChainCalibration+0xf4>)
 8019714:	0018      	movs	r0, r3
 8019716:	f7ff fed3 	bl	80194c0 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801971a:	203b      	movs	r0, #59	; 0x3b
 801971c:	f001 fb3f 	bl	801ad9e <SX1276Read>
 8019720:	0003      	movs	r3, r0
 8019722:	001a      	movs	r2, r3
 8019724:	2340      	movs	r3, #64	; 0x40
 8019726:	4313      	orrs	r3, r2
 8019728:	b2db      	uxtb	r3, r3
 801972a:	0019      	movs	r1, r3
 801972c:	203b      	movs	r0, #59	; 0x3b
 801972e:	f001 fb25 	bl	801ad7c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8019732:	46c0      	nop			; (mov r8, r8)
 8019734:	203b      	movs	r0, #59	; 0x3b
 8019736:	f001 fb32 	bl	801ad9e <SX1276Read>
 801973a:	0003      	movs	r3, r0
 801973c:	001a      	movs	r2, r3
 801973e:	2320      	movs	r3, #32
 8019740:	4013      	ands	r3, r2
 8019742:	2b20      	cmp	r3, #32
 8019744:	d0f6      	beq.n	8019734 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8019746:	2317      	movs	r3, #23
 8019748:	18fb      	adds	r3, r7, r3
 801974a:	781b      	ldrb	r3, [r3, #0]
 801974c:	0019      	movs	r1, r3
 801974e:	2009      	movs	r0, #9
 8019750:	f001 fb14 	bl	801ad7c <SX1276Write>
    SX1276SetChannel( initialFreq );
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	0018      	movs	r0, r3
 8019758:	f7ff feb2 	bl	80194c0 <SX1276SetChannel>
}
 801975c:	46c0      	nop			; (mov r8, r8)
 801975e:	46bd      	mov	sp, r7
 8019760:	b007      	add	sp, #28
 8019762:	bd90      	pop	{r4, r7, pc}
 8019764:	33bca100 	.word	0x33bca100

08019768 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8019768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801976a:	46c6      	mov	lr, r8
 801976c:	b500      	push	{lr}
 801976e:	b084      	sub	sp, #16
 8019770:	af00      	add	r7, sp, #0
 8019772:	60b9      	str	r1, [r7, #8]
 8019774:	607a      	str	r2, [r7, #4]
 8019776:	0019      	movs	r1, r3
 8019778:	240f      	movs	r4, #15
 801977a:	193b      	adds	r3, r7, r4
 801977c:	1c02      	adds	r2, r0, #0
 801977e:	701a      	strb	r2, [r3, #0]
 8019780:	230e      	movs	r3, #14
 8019782:	18fb      	adds	r3, r7, r3
 8019784:	1c0a      	adds	r2, r1, #0
 8019786:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8019788:	193b      	adds	r3, r7, r4
 801978a:	781b      	ldrb	r3, [r3, #0]
 801978c:	0018      	movs	r0, r3
 801978e:	f001 fa9b 	bl	801acc8 <SX1276SetModem>

    switch( modem )
 8019792:	193b      	adds	r3, r7, r4
 8019794:	781b      	ldrb	r3, [r3, #0]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d003      	beq.n	80197a2 <SX1276SetRxConfig+0x3a>
 801979a:	2b01      	cmp	r3, #1
 801979c:	d100      	bne.n	80197a0 <SX1276SetRxConfig+0x38>
 801979e:	e0fb      	b.n	8019998 <SX1276SetRxConfig+0x230>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80197a0:	e26e      	b.n	8019c80 <SX1276SetRxConfig+0x518>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80197a2:	4bbd      	ldr	r3, [pc, #756]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80197a4:	68ba      	ldr	r2, [r7, #8]
 80197a6:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80197a8:	4bbb      	ldr	r3, [pc, #748]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80197aa:	687a      	ldr	r2, [r7, #4]
 80197ac:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80197ae:	4bba      	ldr	r3, [pc, #744]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80197b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80197b2:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80197b4:	4bb8      	ldr	r3, [pc, #736]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80197b6:	222c      	movs	r2, #44	; 0x2c
 80197b8:	2108      	movs	r1, #8
 80197ba:	468c      	mov	ip, r1
 80197bc:	44bc      	add	ip, r7
 80197be:	4462      	add	r2, ip
 80197c0:	2122      	movs	r1, #34	; 0x22
 80197c2:	7812      	ldrb	r2, [r2, #0]
 80197c4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80197c6:	4bb4      	ldr	r3, [pc, #720]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80197c8:	2130      	movs	r1, #48	; 0x30
 80197ca:	2408      	movs	r4, #8
 80197cc:	193a      	adds	r2, r7, r4
 80197ce:	1852      	adds	r2, r2, r1
 80197d0:	2123      	movs	r1, #35	; 0x23
 80197d2:	7812      	ldrb	r2, [r2, #0]
 80197d4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80197d6:	4bb0      	ldr	r3, [pc, #704]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80197d8:	2034      	movs	r0, #52	; 0x34
 80197da:	193a      	adds	r2, r7, r4
 80197dc:	1812      	adds	r2, r2, r0
 80197de:	2124      	movs	r1, #36	; 0x24
 80197e0:	7812      	ldrb	r2, [r2, #0]
 80197e2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80197e4:	4bac      	ldr	r3, [pc, #688]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80197e6:	2220      	movs	r2, #32
 80197e8:	2020      	movs	r0, #32
 80197ea:	4684      	mov	ip, r0
 80197ec:	2108      	movs	r1, #8
 80197ee:	4688      	mov	r8, r1
 80197f0:	44b8      	add	r8, r7
 80197f2:	44c4      	add	ip, r8
 80197f4:	4462      	add	r2, ip
 80197f6:	2125      	movs	r1, #37	; 0x25
 80197f8:	7812      	ldrb	r2, [r2, #0]
 80197fa:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80197fc:	4ba6      	ldr	r3, [pc, #664]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80197fe:	2224      	movs	r2, #36	; 0x24
 8019800:	2020      	movs	r0, #32
 8019802:	4684      	mov	ip, r0
 8019804:	2108      	movs	r1, #8
 8019806:	4688      	mov	r8, r1
 8019808:	44b8      	add	r8, r7
 801980a:	44c4      	add	ip, r8
 801980c:	4462      	add	r2, ip
 801980e:	2126      	movs	r1, #38	; 0x26
 8019810:	7812      	ldrb	r2, [r2, #0]
 8019812:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019814:	4ba0      	ldr	r3, [pc, #640]	; (8019a98 <SX1276SetRxConfig+0x330>)
 8019816:	2624      	movs	r6, #36	; 0x24
 8019818:	193a      	adds	r2, r7, r4
 801981a:	1992      	adds	r2, r2, r6
 801981c:	8812      	ldrh	r2, [r2, #0]
 801981e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8019820:	2328      	movs	r3, #40	; 0x28
 8019822:	2208      	movs	r2, #8
 8019824:	4694      	mov	ip, r2
 8019826:	44bc      	add	ip, r7
 8019828:	4463      	add	r3, ip
 801982a:	881b      	ldrh	r3, [r3, #0]
 801982c:	0018      	movs	r0, r3
 801982e:	f7e9 f9c5 	bl	8002bbc <__aeabi_i2d>
 8019832:	0004      	movs	r4, r0
 8019834:	000d      	movs	r5, r1
 8019836:	6878      	ldr	r0, [r7, #4]
 8019838:	f7e9 f9f0 	bl	8002c1c <__aeabi_ui2d>
 801983c:	0002      	movs	r2, r0
 801983e:	000b      	movs	r3, r1
 8019840:	2000      	movs	r0, #0
 8019842:	4996      	ldr	r1, [pc, #600]	; (8019a9c <SX1276SetRxConfig+0x334>)
 8019844:	f7e7 ff80 	bl	8001748 <__aeabi_ddiv>
 8019848:	0002      	movs	r2, r0
 801984a:	000b      	movs	r3, r1
 801984c:	0010      	movs	r0, r2
 801984e:	0019      	movs	r1, r3
 8019850:	2200      	movs	r2, #0
 8019852:	4b93      	ldr	r3, [pc, #588]	; (8019aa0 <SX1276SetRxConfig+0x338>)
 8019854:	f7e8 fb7e 	bl	8001f54 <__aeabi_dmul>
 8019858:	0002      	movs	r2, r0
 801985a:	000b      	movs	r3, r1
 801985c:	0020      	movs	r0, r4
 801985e:	0029      	movs	r1, r5
 8019860:	f7e8 fb78 	bl	8001f54 <__aeabi_dmul>
 8019864:	0002      	movs	r2, r0
 8019866:	000b      	movs	r3, r1
 8019868:	0010      	movs	r0, r2
 801986a:	0019      	movs	r1, r3
 801986c:	2200      	movs	r2, #0
 801986e:	4b8d      	ldr	r3, [pc, #564]	; (8019aa4 <SX1276SetRxConfig+0x33c>)
 8019870:	f7e8 fb70 	bl	8001f54 <__aeabi_dmul>
 8019874:	0002      	movs	r2, r0
 8019876:	000b      	movs	r3, r1
 8019878:	0010      	movs	r0, r2
 801987a:	0019      	movs	r1, r3
 801987c:	f7e6 febe 	bl	80005fc <__aeabi_d2uiz>
 8019880:	0002      	movs	r2, r0
 8019882:	4b85      	ldr	r3, [pc, #532]	; (8019a98 <SX1276SetRxConfig+0x330>)
 8019884:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019886:	6878      	ldr	r0, [r7, #4]
 8019888:	f7e9 f9c8 	bl	8002c1c <__aeabi_ui2d>
 801988c:	0002      	movs	r2, r0
 801988e:	000b      	movs	r3, r1
 8019890:	2000      	movs	r0, #0
 8019892:	4985      	ldr	r1, [pc, #532]	; (8019aa8 <SX1276SetRxConfig+0x340>)
 8019894:	f7e7 ff58 	bl	8001748 <__aeabi_ddiv>
 8019898:	0002      	movs	r2, r0
 801989a:	000b      	movs	r3, r1
 801989c:	0010      	movs	r0, r2
 801989e:	0019      	movs	r1, r3
 80198a0:	f7e6 feac 	bl	80005fc <__aeabi_d2uiz>
 80198a4:	0003      	movs	r3, r0
 80198a6:	b29b      	uxth	r3, r3
 80198a8:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	0a1b      	lsrs	r3, r3, #8
 80198ae:	b2db      	uxtb	r3, r3
 80198b0:	0019      	movs	r1, r3
 80198b2:	2002      	movs	r0, #2
 80198b4:	f001 fa62 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	b2db      	uxtb	r3, r3
 80198bc:	0019      	movs	r1, r3
 80198be:	2003      	movs	r0, #3
 80198c0:	f001 fa5c 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 80198c4:	68bb      	ldr	r3, [r7, #8]
 80198c6:	0018      	movs	r0, r3
 80198c8:	f001 fb66 	bl	801af98 <GetFskBandwidthRegValue>
 80198cc:	0003      	movs	r3, r0
 80198ce:	0019      	movs	r1, r3
 80198d0:	2012      	movs	r0, #18
 80198d2:	f001 fa53 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 80198d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198d8:	0018      	movs	r0, r3
 80198da:	f001 fb5d 	bl	801af98 <GetFskBandwidthRegValue>
 80198de:	0003      	movs	r3, r0
 80198e0:	0019      	movs	r1, r3
 80198e2:	2013      	movs	r0, #19
 80198e4:	f001 fa4a 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80198e8:	2408      	movs	r4, #8
 80198ea:	193b      	adds	r3, r7, r4
 80198ec:	199b      	adds	r3, r3, r6
 80198ee:	881b      	ldrh	r3, [r3, #0]
 80198f0:	0a1b      	lsrs	r3, r3, #8
 80198f2:	b29b      	uxth	r3, r3
 80198f4:	b2db      	uxtb	r3, r3
 80198f6:	0019      	movs	r1, r3
 80198f8:	2025      	movs	r0, #37	; 0x25
 80198fa:	f001 fa3f 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80198fe:	193b      	adds	r3, r7, r4
 8019900:	199b      	adds	r3, r3, r6
 8019902:	881b      	ldrh	r3, [r3, #0]
 8019904:	b2db      	uxtb	r3, r3
 8019906:	0019      	movs	r1, r3
 8019908:	2026      	movs	r0, #38	; 0x26
 801990a:	f001 fa37 	bl	801ad7c <SX1276Write>
            if( fixLen == 1 )
 801990e:	222c      	movs	r2, #44	; 0x2c
 8019910:	193b      	adds	r3, r7, r4
 8019912:	189b      	adds	r3, r3, r2
 8019914:	781b      	ldrb	r3, [r3, #0]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d008      	beq.n	801992c <SX1276SetRxConfig+0x1c4>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 801991a:	2130      	movs	r1, #48	; 0x30
 801991c:	193b      	adds	r3, r7, r4
 801991e:	185b      	adds	r3, r3, r1
 8019920:	781b      	ldrb	r3, [r3, #0]
 8019922:	0019      	movs	r1, r3
 8019924:	2032      	movs	r0, #50	; 0x32
 8019926:	f001 fa29 	bl	801ad7c <SX1276Write>
 801992a:	e003      	b.n	8019934 <SX1276SetRxConfig+0x1cc>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 801992c:	21ff      	movs	r1, #255	; 0xff
 801992e:	2032      	movs	r0, #50	; 0x32
 8019930:	f001 fa24 	bl	801ad7c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019934:	2030      	movs	r0, #48	; 0x30
 8019936:	f001 fa32 	bl	801ad9e <SX1276Read>
 801993a:	0003      	movs	r3, r0
 801993c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801993e:	226f      	movs	r2, #111	; 0x6f
 8019940:	4013      	ands	r3, r2
 8019942:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019944:	232c      	movs	r3, #44	; 0x2c
 8019946:	2108      	movs	r1, #8
 8019948:	468c      	mov	ip, r1
 801994a:	44bc      	add	ip, r7
 801994c:	4463      	add	r3, ip
 801994e:	781b      	ldrb	r3, [r3, #0]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d001      	beq.n	8019958 <SX1276SetRxConfig+0x1f0>
 8019954:	2300      	movs	r3, #0
 8019956:	e001      	b.n	801995c <SX1276SetRxConfig+0x1f4>
 8019958:	2380      	movs	r3, #128	; 0x80
 801995a:	425b      	negs	r3, r3
 801995c:	4313      	orrs	r3, r2
 801995e:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019960:	2334      	movs	r3, #52	; 0x34
 8019962:	2108      	movs	r1, #8
 8019964:	468c      	mov	ip, r1
 8019966:	44bc      	add	ip, r7
 8019968:	4463      	add	r3, ip
 801996a:	781b      	ldrb	r3, [r3, #0]
 801996c:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801996e:	b25b      	sxtb	r3, r3
 8019970:	4313      	orrs	r3, r2
 8019972:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8019974:	b2db      	uxtb	r3, r3
 8019976:	0019      	movs	r1, r3
 8019978:	2030      	movs	r0, #48	; 0x30
 801997a:	f001 f9ff 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801997e:	2031      	movs	r0, #49	; 0x31
 8019980:	f001 fa0d 	bl	801ad9e <SX1276Read>
 8019984:	0003      	movs	r3, r0
 8019986:	001a      	movs	r2, r3
 8019988:	2340      	movs	r3, #64	; 0x40
 801998a:	4313      	orrs	r3, r2
 801998c:	b2db      	uxtb	r3, r3
 801998e:	0019      	movs	r1, r3
 8019990:	2031      	movs	r0, #49	; 0x31
 8019992:	f001 f9f3 	bl	801ad7c <SX1276Write>
        break;
 8019996:	e173      	b.n	8019c80 <SX1276SetRxConfig+0x518>
            if( bandwidth > 2 )
 8019998:	68bb      	ldr	r3, [r7, #8]
 801999a:	2b02      	cmp	r3, #2
 801999c:	d900      	bls.n	80199a0 <SX1276SetRxConfig+0x238>
                while( 1 );
 801999e:	e7fe      	b.n	801999e <SX1276SetRxConfig+0x236>
            bandwidth += 7;
 80199a0:	68bb      	ldr	r3, [r7, #8]
 80199a2:	3307      	adds	r3, #7
 80199a4:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80199a6:	4b3c      	ldr	r3, [pc, #240]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80199a8:	68ba      	ldr	r2, [r7, #8]
 80199aa:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80199ac:	4b3a      	ldr	r3, [pc, #232]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80199b2:	4b39      	ldr	r3, [pc, #228]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80199b4:	220e      	movs	r2, #14
 80199b6:	18ba      	adds	r2, r7, r2
 80199b8:	214d      	movs	r1, #77	; 0x4d
 80199ba:	7812      	ldrb	r2, [r2, #0]
 80199bc:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80199be:	4b36      	ldr	r3, [pc, #216]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80199c0:	2224      	movs	r2, #36	; 0x24
 80199c2:	2108      	movs	r1, #8
 80199c4:	468c      	mov	ip, r1
 80199c6:	44bc      	add	ip, r7
 80199c8:	4462      	add	r2, ip
 80199ca:	214e      	movs	r1, #78	; 0x4e
 80199cc:	8812      	ldrh	r2, [r2, #0]
 80199ce:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80199d0:	4b31      	ldr	r3, [pc, #196]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80199d2:	222c      	movs	r2, #44	; 0x2c
 80199d4:	2108      	movs	r1, #8
 80199d6:	468c      	mov	ip, r1
 80199d8:	44bc      	add	ip, r7
 80199da:	4462      	add	r2, ip
 80199dc:	2150      	movs	r1, #80	; 0x50
 80199de:	7812      	ldrb	r2, [r2, #0]
 80199e0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80199e2:	4b2d      	ldr	r3, [pc, #180]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80199e4:	2230      	movs	r2, #48	; 0x30
 80199e6:	2108      	movs	r1, #8
 80199e8:	468c      	mov	ip, r1
 80199ea:	44bc      	add	ip, r7
 80199ec:	4462      	add	r2, ip
 80199ee:	2151      	movs	r1, #81	; 0x51
 80199f0:	7812      	ldrb	r2, [r2, #0]
 80199f2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80199f4:	4b28      	ldr	r3, [pc, #160]	; (8019a98 <SX1276SetRxConfig+0x330>)
 80199f6:	2234      	movs	r2, #52	; 0x34
 80199f8:	2108      	movs	r1, #8
 80199fa:	468c      	mov	ip, r1
 80199fc:	44bc      	add	ip, r7
 80199fe:	4462      	add	r2, ip
 8019a00:	2152      	movs	r1, #82	; 0x52
 8019a02:	7812      	ldrb	r2, [r2, #0]
 8019a04:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019a06:	4b24      	ldr	r3, [pc, #144]	; (8019a98 <SX1276SetRxConfig+0x330>)
 8019a08:	2238      	movs	r2, #56	; 0x38
 8019a0a:	2108      	movs	r1, #8
 8019a0c:	468c      	mov	ip, r1
 8019a0e:	44bc      	add	ip, r7
 8019a10:	4462      	add	r2, ip
 8019a12:	2153      	movs	r1, #83	; 0x53
 8019a14:	7812      	ldrb	r2, [r2, #0]
 8019a16:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019a18:	4b1f      	ldr	r3, [pc, #124]	; (8019a98 <SX1276SetRxConfig+0x330>)
 8019a1a:	223c      	movs	r2, #60	; 0x3c
 8019a1c:	2108      	movs	r1, #8
 8019a1e:	468c      	mov	ip, r1
 8019a20:	44bc      	add	ip, r7
 8019a22:	4462      	add	r2, ip
 8019a24:	2154      	movs	r1, #84	; 0x54
 8019a26:	7812      	ldrb	r2, [r2, #0]
 8019a28:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019a2a:	4b1b      	ldr	r3, [pc, #108]	; (8019a98 <SX1276SetRxConfig+0x330>)
 8019a2c:	2220      	movs	r2, #32
 8019a2e:	2120      	movs	r1, #32
 8019a30:	468c      	mov	ip, r1
 8019a32:	2108      	movs	r1, #8
 8019a34:	4688      	mov	r8, r1
 8019a36:	44b8      	add	r8, r7
 8019a38:	44c4      	add	ip, r8
 8019a3a:	4462      	add	r2, ip
 8019a3c:	2155      	movs	r1, #85	; 0x55
 8019a3e:	7812      	ldrb	r2, [r2, #0]
 8019a40:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8019a42:	4b15      	ldr	r3, [pc, #84]	; (8019a98 <SX1276SetRxConfig+0x330>)
 8019a44:	2224      	movs	r2, #36	; 0x24
 8019a46:	2120      	movs	r1, #32
 8019a48:	468c      	mov	ip, r1
 8019a4a:	2108      	movs	r1, #8
 8019a4c:	4688      	mov	r8, r1
 8019a4e:	44b8      	add	r8, r7
 8019a50:	44c4      	add	ip, r8
 8019a52:	4462      	add	r2, ip
 8019a54:	2156      	movs	r1, #86	; 0x56
 8019a56:	7812      	ldrb	r2, [r2, #0]
 8019a58:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	2b0c      	cmp	r3, #12
 8019a5e:	d902      	bls.n	8019a66 <SX1276SetRxConfig+0x2fe>
                datarate = 12;
 8019a60:	230c      	movs	r3, #12
 8019a62:	607b      	str	r3, [r7, #4]
 8019a64:	e004      	b.n	8019a70 <SX1276SetRxConfig+0x308>
            else if( datarate < 6 )
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	2b05      	cmp	r3, #5
 8019a6a:	d801      	bhi.n	8019a70 <SX1276SetRxConfig+0x308>
                datarate = 6;
 8019a6c:	2306      	movs	r3, #6
 8019a6e:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019a70:	68bb      	ldr	r3, [r7, #8]
 8019a72:	2b07      	cmp	r3, #7
 8019a74:	d105      	bne.n	8019a82 <SX1276SetRxConfig+0x31a>
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	2b0b      	cmp	r3, #11
 8019a7a:	d008      	beq.n	8019a8e <SX1276SetRxConfig+0x326>
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	2b0c      	cmp	r3, #12
 8019a80:	d005      	beq.n	8019a8e <SX1276SetRxConfig+0x326>
 8019a82:	68bb      	ldr	r3, [r7, #8]
 8019a84:	2b08      	cmp	r3, #8
 8019a86:	d111      	bne.n	8019aac <SX1276SetRxConfig+0x344>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	2b0c      	cmp	r3, #12
 8019a8c:	d10e      	bne.n	8019aac <SX1276SetRxConfig+0x344>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019a8e:	4b02      	ldr	r3, [pc, #8]	; (8019a98 <SX1276SetRxConfig+0x330>)
 8019a90:	224c      	movs	r2, #76	; 0x4c
 8019a92:	2101      	movs	r1, #1
 8019a94:	5499      	strb	r1, [r3, r2]
 8019a96:	e00d      	b.n	8019ab4 <SX1276SetRxConfig+0x34c>
 8019a98:	200016b0 	.word	0x200016b0
 8019a9c:	3ff00000 	.word	0x3ff00000
 8019aa0:	40200000 	.word	0x40200000
 8019aa4:	408f4000 	.word	0x408f4000
 8019aa8:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019aac:	4b77      	ldr	r3, [pc, #476]	; (8019c8c <SX1276SetRxConfig+0x524>)
 8019aae:	224c      	movs	r2, #76	; 0x4c
 8019ab0:	2100      	movs	r1, #0
 8019ab2:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019ab4:	201d      	movs	r0, #29
 8019ab6:	f001 f972 	bl	801ad9e <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019aba:	68bb      	ldr	r3, [r7, #8]
 8019abc:	b2db      	uxtb	r3, r3
 8019abe:	011b      	lsls	r3, r3, #4
 8019ac0:	b2da      	uxtb	r2, r3
 8019ac2:	230e      	movs	r3, #14
 8019ac4:	18fb      	adds	r3, r7, r3
 8019ac6:	781b      	ldrb	r3, [r3, #0]
 8019ac8:	18db      	adds	r3, r3, r3
 8019aca:	b2db      	uxtb	r3, r3
 8019acc:	4313      	orrs	r3, r2
 8019ace:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019ad0:	242c      	movs	r4, #44	; 0x2c
 8019ad2:	2608      	movs	r6, #8
 8019ad4:	19bb      	adds	r3, r7, r6
 8019ad6:	191b      	adds	r3, r3, r4
 8019ad8:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019ada:	4313      	orrs	r3, r2
 8019adc:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019ade:	0019      	movs	r1, r3
 8019ae0:	201d      	movs	r0, #29
 8019ae2:	f001 f94b 	bl	801ad7c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8019ae6:	201e      	movs	r0, #30
 8019ae8:	f001 f959 	bl	801ad9e <SX1276Read>
 8019aec:	0003      	movs	r3, r0
 8019aee:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8019af0:	2308      	movs	r3, #8
 8019af2:	4013      	ands	r3, r2
 8019af4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	b2db      	uxtb	r3, r3
 8019afa:	011b      	lsls	r3, r3, #4
 8019afc:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8019afe:	4313      	orrs	r3, r2
 8019b00:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019b02:	2334      	movs	r3, #52	; 0x34
 8019b04:	2108      	movs	r1, #8
 8019b06:	468c      	mov	ip, r1
 8019b08:	44bc      	add	ip, r7
 8019b0a:	4463      	add	r3, ip
 8019b0c:	781b      	ldrb	r3, [r3, #0]
 8019b0e:	009b      	lsls	r3, r3, #2
 8019b10:	b2db      	uxtb	r3, r3
 8019b12:	4313      	orrs	r3, r2
 8019b14:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8019b16:	2528      	movs	r5, #40	; 0x28
 8019b18:	19bb      	adds	r3, r7, r6
 8019b1a:	195b      	adds	r3, r3, r5
 8019b1c:	881b      	ldrh	r3, [r3, #0]
 8019b1e:	0a1b      	lsrs	r3, r3, #8
 8019b20:	b29b      	uxth	r3, r3
 8019b22:	b2db      	uxtb	r3, r3
 8019b24:	2103      	movs	r1, #3
 8019b26:	400b      	ands	r3, r1
 8019b28:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019b2a:	4313      	orrs	r3, r2
 8019b2c:	b2db      	uxtb	r3, r3
 8019b2e:	0019      	movs	r1, r3
 8019b30:	201e      	movs	r0, #30
 8019b32:	f001 f923 	bl	801ad7c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019b36:	2026      	movs	r0, #38	; 0x26
 8019b38:	f001 f931 	bl	801ad9e <SX1276Read>
 8019b3c:	0003      	movs	r3, r0
 8019b3e:	b25b      	sxtb	r3, r3
 8019b40:	2208      	movs	r2, #8
 8019b42:	4393      	bics	r3, r2
 8019b44:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019b46:	4b51      	ldr	r3, [pc, #324]	; (8019c8c <SX1276SetRxConfig+0x524>)
 8019b48:	214c      	movs	r1, #76	; 0x4c
 8019b4a:	5c5b      	ldrb	r3, [r3, r1]
 8019b4c:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019b4e:	b25b      	sxtb	r3, r3
 8019b50:	4313      	orrs	r3, r2
 8019b52:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019b54:	b2db      	uxtb	r3, r3
 8019b56:	0019      	movs	r1, r3
 8019b58:	2026      	movs	r0, #38	; 0x26
 8019b5a:	f001 f90f 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8019b5e:	19bb      	adds	r3, r7, r6
 8019b60:	195b      	adds	r3, r3, r5
 8019b62:	881b      	ldrh	r3, [r3, #0]
 8019b64:	b2db      	uxtb	r3, r3
 8019b66:	0019      	movs	r1, r3
 8019b68:	201f      	movs	r0, #31
 8019b6a:	f001 f907 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019b6e:	2524      	movs	r5, #36	; 0x24
 8019b70:	19bb      	adds	r3, r7, r6
 8019b72:	195b      	adds	r3, r3, r5
 8019b74:	881b      	ldrh	r3, [r3, #0]
 8019b76:	0a1b      	lsrs	r3, r3, #8
 8019b78:	b29b      	uxth	r3, r3
 8019b7a:	b2db      	uxtb	r3, r3
 8019b7c:	0019      	movs	r1, r3
 8019b7e:	2020      	movs	r0, #32
 8019b80:	f001 f8fc 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019b84:	19bb      	adds	r3, r7, r6
 8019b86:	195b      	adds	r3, r3, r5
 8019b88:	881b      	ldrh	r3, [r3, #0]
 8019b8a:	b2db      	uxtb	r3, r3
 8019b8c:	0019      	movs	r1, r3
 8019b8e:	2021      	movs	r0, #33	; 0x21
 8019b90:	f001 f8f4 	bl	801ad7c <SX1276Write>
            if( fixLen == 1 )
 8019b94:	19bb      	adds	r3, r7, r6
 8019b96:	191b      	adds	r3, r3, r4
 8019b98:	781b      	ldrb	r3, [r3, #0]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d009      	beq.n	8019bb2 <SX1276SetRxConfig+0x44a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8019b9e:	2330      	movs	r3, #48	; 0x30
 8019ba0:	2208      	movs	r2, #8
 8019ba2:	4694      	mov	ip, r2
 8019ba4:	44bc      	add	ip, r7
 8019ba6:	4463      	add	r3, ip
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	0019      	movs	r1, r3
 8019bac:	2022      	movs	r0, #34	; 0x22
 8019bae:	f001 f8e5 	bl	801ad7c <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019bb2:	4b36      	ldr	r3, [pc, #216]	; (8019c8c <SX1276SetRxConfig+0x524>)
 8019bb4:	2253      	movs	r2, #83	; 0x53
 8019bb6:	5c9b      	ldrb	r3, [r3, r2]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d013      	beq.n	8019be4 <SX1276SetRxConfig+0x47c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019bbc:	2044      	movs	r0, #68	; 0x44
 8019bbe:	f001 f8ee 	bl	801ad9e <SX1276Read>
 8019bc2:	0003      	movs	r3, r0
 8019bc4:	001a      	movs	r2, r3
 8019bc6:	2380      	movs	r3, #128	; 0x80
 8019bc8:	425b      	negs	r3, r3
 8019bca:	4313      	orrs	r3, r2
 8019bcc:	b2db      	uxtb	r3, r3
 8019bce:	0019      	movs	r1, r3
 8019bd0:	2044      	movs	r0, #68	; 0x44
 8019bd2:	f001 f8d3 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8019bd6:	4b2d      	ldr	r3, [pc, #180]	; (8019c8c <SX1276SetRxConfig+0x524>)
 8019bd8:	2254      	movs	r2, #84	; 0x54
 8019bda:	5c9b      	ldrb	r3, [r3, r2]
 8019bdc:	0019      	movs	r1, r3
 8019bde:	2024      	movs	r0, #36	; 0x24
 8019be0:	f001 f8cc 	bl	801ad7c <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	2b09      	cmp	r3, #9
 8019be8:	d10d      	bne.n	8019c06 <SX1276SetRxConfig+0x49e>
 8019bea:	4b28      	ldr	r3, [pc, #160]	; (8019c8c <SX1276SetRxConfig+0x524>)
 8019bec:	689b      	ldr	r3, [r3, #8]
 8019bee:	4a28      	ldr	r2, [pc, #160]	; (8019c90 <SX1276SetRxConfig+0x528>)
 8019bf0:	4293      	cmp	r3, r2
 8019bf2:	d908      	bls.n	8019c06 <SX1276SetRxConfig+0x49e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019bf4:	2102      	movs	r1, #2
 8019bf6:	2036      	movs	r0, #54	; 0x36
 8019bf8:	f001 f8c0 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8019bfc:	2164      	movs	r1, #100	; 0x64
 8019bfe:	203a      	movs	r0, #58	; 0x3a
 8019c00:	f001 f8bc 	bl	801ad7c <SX1276Write>
 8019c04:	e00f      	b.n	8019c26 <SX1276SetRxConfig+0x4be>
            else if( bandwidth == 9 )
 8019c06:	68bb      	ldr	r3, [r7, #8]
 8019c08:	2b09      	cmp	r3, #9
 8019c0a:	d108      	bne.n	8019c1e <SX1276SetRxConfig+0x4b6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019c0c:	2102      	movs	r1, #2
 8019c0e:	2036      	movs	r0, #54	; 0x36
 8019c10:	f001 f8b4 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8019c14:	217f      	movs	r1, #127	; 0x7f
 8019c16:	203a      	movs	r0, #58	; 0x3a
 8019c18:	f001 f8b0 	bl	801ad7c <SX1276Write>
 8019c1c:	e003      	b.n	8019c26 <SX1276SetRxConfig+0x4be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8019c1e:	2103      	movs	r1, #3
 8019c20:	2036      	movs	r0, #54	; 0x36
 8019c22:	f001 f8ab 	bl	801ad7c <SX1276Write>
            if( datarate == 6 )
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	2b06      	cmp	r3, #6
 8019c2a:	d114      	bne.n	8019c56 <SX1276SetRxConfig+0x4ee>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019c2c:	2031      	movs	r0, #49	; 0x31
 8019c2e:	f001 f8b6 	bl	801ad9e <SX1276Read>
 8019c32:	0003      	movs	r3, r0
 8019c34:	b25b      	sxtb	r3, r3
 8019c36:	2207      	movs	r2, #7
 8019c38:	4393      	bics	r3, r2
 8019c3a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019c3c:	2205      	movs	r2, #5
 8019c3e:	4313      	orrs	r3, r2
 8019c40:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019c42:	b2db      	uxtb	r3, r3
 8019c44:	0019      	movs	r1, r3
 8019c46:	2031      	movs	r0, #49	; 0x31
 8019c48:	f001 f898 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019c4c:	210c      	movs	r1, #12
 8019c4e:	2037      	movs	r0, #55	; 0x37
 8019c50:	f001 f894 	bl	801ad7c <SX1276Write>
        break;
 8019c54:	e013      	b.n	8019c7e <SX1276SetRxConfig+0x516>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019c56:	2031      	movs	r0, #49	; 0x31
 8019c58:	f001 f8a1 	bl	801ad9e <SX1276Read>
 8019c5c:	0003      	movs	r3, r0
 8019c5e:	b25b      	sxtb	r3, r3
 8019c60:	2207      	movs	r2, #7
 8019c62:	4393      	bics	r3, r2
 8019c64:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019c66:	2203      	movs	r2, #3
 8019c68:	4313      	orrs	r3, r2
 8019c6a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019c6c:	b2db      	uxtb	r3, r3
 8019c6e:	0019      	movs	r1, r3
 8019c70:	2031      	movs	r0, #49	; 0x31
 8019c72:	f001 f883 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019c76:	210a      	movs	r1, #10
 8019c78:	2037      	movs	r0, #55	; 0x37
 8019c7a:	f001 f87f 	bl	801ad7c <SX1276Write>
        break;
 8019c7e:	46c0      	nop			; (mov r8, r8)
}
 8019c80:	46c0      	nop			; (mov r8, r8)
 8019c82:	46bd      	mov	sp, r7
 8019c84:	b004      	add	sp, #16
 8019c86:	bc80      	pop	{r7}
 8019c88:	46b8      	mov	r8, r7
 8019c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c8c:	200016b0 	.word	0x200016b0
 8019c90:	1f4add40 	.word	0x1f4add40

08019c94 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c96:	46c6      	mov	lr, r8
 8019c98:	b500      	push	{lr}
 8019c9a:	b084      	sub	sp, #16
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	60ba      	str	r2, [r7, #8]
 8019ca0:	607b      	str	r3, [r7, #4]
 8019ca2:	240f      	movs	r4, #15
 8019ca4:	193b      	adds	r3, r7, r4
 8019ca6:	1c02      	adds	r2, r0, #0
 8019ca8:	701a      	strb	r2, [r3, #0]
 8019caa:	230e      	movs	r3, #14
 8019cac:	18fb      	adds	r3, r7, r3
 8019cae:	1c0a      	adds	r2, r1, #0
 8019cb0:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8019cb2:	4bb7      	ldr	r3, [pc, #732]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019cb4:	791b      	ldrb	r3, [r3, #4]
 8019cb6:	2b01      	cmp	r3, #1
 8019cb8:	d108      	bne.n	8019ccc <SX1276SetTxConfig+0x38>
 8019cba:	193b      	adds	r3, r7, r4
 8019cbc:	781b      	ldrb	r3, [r3, #0]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d104      	bne.n	8019ccc <SX1276SetTxConfig+0x38>
    {
        SX1276SetSleep( );
 8019cc2:	f000 fc63 	bl	801a58c <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8019cc6:	2001      	movs	r0, #1
 8019cc8:	f7eb f9dd 	bl	8005086 <HAL_Delay>
    }

    SX1276SetModem( modem );
 8019ccc:	240f      	movs	r4, #15
 8019cce:	193b      	adds	r3, r7, r4
 8019cd0:	781b      	ldrb	r3, [r3, #0]
 8019cd2:	0018      	movs	r0, r3
 8019cd4:	f000 fff8 	bl	801acc8 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8019cd8:	250e      	movs	r5, #14
 8019cda:	197b      	adds	r3, r7, r5
 8019cdc:	781b      	ldrb	r3, [r3, #0]
 8019cde:	b25b      	sxtb	r3, r3
 8019ce0:	0018      	movs	r0, r3
 8019ce2:	f000 fb41 	bl	801a368 <SX1276SetRfTxPower>
    power = 7;  // Изменение параметра мощности передачи
 8019ce6:	197b      	adds	r3, r7, r5
 8019ce8:	2207      	movs	r2, #7
 8019cea:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8019cec:	193b      	adds	r3, r7, r4
 8019cee:	781b      	ldrb	r3, [r3, #0]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d003      	beq.n	8019cfc <SX1276SetTxConfig+0x68>
 8019cf4:	2b01      	cmp	r3, #1
 8019cf6:	d100      	bne.n	8019cfa <SX1276SetTxConfig+0x66>
 8019cf8:	e0c1      	b.n	8019e7e <SX1276SetTxConfig+0x1ea>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8019cfa:	e207      	b.n	801a10c <SX1276SetTxConfig+0x478>
            SX1276.Settings.Fsk.Power = power;
 8019cfc:	4ba4      	ldr	r3, [pc, #656]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019cfe:	220e      	movs	r2, #14
 8019d00:	18ba      	adds	r2, r7, r2
 8019d02:	7812      	ldrb	r2, [r2, #0]
 8019d04:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8019d06:	4ba2      	ldr	r3, [pc, #648]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019d08:	68ba      	ldr	r2, [r7, #8]
 8019d0a:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8019d0c:	4ba0      	ldr	r3, [pc, #640]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019d0e:	687a      	ldr	r2, [r7, #4]
 8019d10:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8019d12:	4b9f      	ldr	r3, [pc, #636]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d16:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019d18:	4b9d      	ldr	r3, [pc, #628]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019d1a:	2420      	movs	r4, #32
 8019d1c:	2608      	movs	r6, #8
 8019d1e:	2208      	movs	r2, #8
 8019d20:	18ba      	adds	r2, r7, r2
 8019d22:	1992      	adds	r2, r2, r6
 8019d24:	1912      	adds	r2, r2, r4
 8019d26:	8812      	ldrh	r2, [r2, #0]
 8019d28:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019d2a:	4b99      	ldr	r3, [pc, #612]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019d2c:	2524      	movs	r5, #36	; 0x24
 8019d2e:	2208      	movs	r2, #8
 8019d30:	18ba      	adds	r2, r7, r2
 8019d32:	1992      	adds	r2, r2, r6
 8019d34:	1952      	adds	r2, r2, r5
 8019d36:	2122      	movs	r1, #34	; 0x22
 8019d38:	7812      	ldrb	r2, [r2, #0]
 8019d3a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019d3c:	4b94      	ldr	r3, [pc, #592]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019d3e:	2228      	movs	r2, #40	; 0x28
 8019d40:	2108      	movs	r1, #8
 8019d42:	468c      	mov	ip, r1
 8019d44:	2108      	movs	r1, #8
 8019d46:	4688      	mov	r8, r1
 8019d48:	44b8      	add	r8, r7
 8019d4a:	44c4      	add	ip, r8
 8019d4c:	4462      	add	r2, ip
 8019d4e:	2124      	movs	r1, #36	; 0x24
 8019d50:	7812      	ldrb	r2, [r2, #0]
 8019d52:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019d54:	4b8e      	ldr	r3, [pc, #568]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019d56:	2234      	movs	r2, #52	; 0x34
 8019d58:	2108      	movs	r1, #8
 8019d5a:	468c      	mov	ip, r1
 8019d5c:	2108      	movs	r1, #8
 8019d5e:	4688      	mov	r8, r1
 8019d60:	44b8      	add	r8, r7
 8019d62:	44c4      	add	ip, r8
 8019d64:	4462      	add	r2, ip
 8019d66:	2125      	movs	r1, #37	; 0x25
 8019d68:	7812      	ldrb	r2, [r2, #0]
 8019d6a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8019d6c:	4b88      	ldr	r3, [pc, #544]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019d70:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8019d72:	68b8      	ldr	r0, [r7, #8]
 8019d74:	f7e8 ff52 	bl	8002c1c <__aeabi_ui2d>
 8019d78:	2200      	movs	r2, #0
 8019d7a:	4b86      	ldr	r3, [pc, #536]	; (8019f94 <SX1276SetTxConfig+0x300>)
 8019d7c:	f7e7 fce4 	bl	8001748 <__aeabi_ddiv>
 8019d80:	0002      	movs	r2, r0
 8019d82:	000b      	movs	r3, r1
 8019d84:	0010      	movs	r0, r2
 8019d86:	0019      	movs	r1, r3
 8019d88:	f7e6 fc38 	bl	80005fc <__aeabi_d2uiz>
 8019d8c:	0003      	movs	r3, r0
 8019d8e:	b29b      	uxth	r3, r3
 8019d90:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8019d92:	68bb      	ldr	r3, [r7, #8]
 8019d94:	0a1b      	lsrs	r3, r3, #8
 8019d96:	b2db      	uxtb	r3, r3
 8019d98:	0019      	movs	r1, r3
 8019d9a:	2004      	movs	r0, #4
 8019d9c:	f000 ffee 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8019da0:	68bb      	ldr	r3, [r7, #8]
 8019da2:	b2db      	uxtb	r3, r3
 8019da4:	0019      	movs	r1, r3
 8019da6:	2005      	movs	r0, #5
 8019da8:	f000 ffe8 	bl	801ad7c <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019dae:	f7e8 ff35 	bl	8002c1c <__aeabi_ui2d>
 8019db2:	0002      	movs	r2, r0
 8019db4:	000b      	movs	r3, r1
 8019db6:	2000      	movs	r0, #0
 8019db8:	4977      	ldr	r1, [pc, #476]	; (8019f98 <SX1276SetTxConfig+0x304>)
 8019dba:	f7e7 fcc5 	bl	8001748 <__aeabi_ddiv>
 8019dbe:	0002      	movs	r2, r0
 8019dc0:	000b      	movs	r3, r1
 8019dc2:	0010      	movs	r0, r2
 8019dc4:	0019      	movs	r1, r3
 8019dc6:	f7e6 fc19 	bl	80005fc <__aeabi_d2uiz>
 8019dca:	0003      	movs	r3, r0
 8019dcc:	b29b      	uxth	r3, r3
 8019dce:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8019dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dd2:	0a1b      	lsrs	r3, r3, #8
 8019dd4:	b2db      	uxtb	r3, r3
 8019dd6:	0019      	movs	r1, r3
 8019dd8:	2002      	movs	r0, #2
 8019dda:	f000 ffcf 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8019dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019de0:	b2db      	uxtb	r3, r3
 8019de2:	0019      	movs	r1, r3
 8019de4:	2003      	movs	r0, #3
 8019de6:	f000 ffc9 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8019dea:	2308      	movs	r3, #8
 8019dec:	18fb      	adds	r3, r7, r3
 8019dee:	199b      	adds	r3, r3, r6
 8019df0:	191b      	adds	r3, r3, r4
 8019df2:	881b      	ldrh	r3, [r3, #0]
 8019df4:	0a1b      	lsrs	r3, r3, #8
 8019df6:	b29b      	uxth	r3, r3
 8019df8:	b2db      	uxtb	r3, r3
 8019dfa:	0019      	movs	r1, r3
 8019dfc:	2025      	movs	r0, #37	; 0x25
 8019dfe:	f000 ffbd 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8019e02:	2308      	movs	r3, #8
 8019e04:	18fb      	adds	r3, r7, r3
 8019e06:	199b      	adds	r3, r3, r6
 8019e08:	191b      	adds	r3, r3, r4
 8019e0a:	881b      	ldrh	r3, [r3, #0]
 8019e0c:	b2db      	uxtb	r3, r3
 8019e0e:	0019      	movs	r1, r3
 8019e10:	2026      	movs	r0, #38	; 0x26
 8019e12:	f000 ffb3 	bl	801ad7c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019e16:	2030      	movs	r0, #48	; 0x30
 8019e18:	f000 ffc1 	bl	801ad9e <SX1276Read>
 8019e1c:	0003      	movs	r3, r0
 8019e1e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8019e20:	226f      	movs	r2, #111	; 0x6f
 8019e22:	4013      	ands	r3, r2
 8019e24:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019e26:	2308      	movs	r3, #8
 8019e28:	18fb      	adds	r3, r7, r3
 8019e2a:	199b      	adds	r3, r3, r6
 8019e2c:	195b      	adds	r3, r3, r5
 8019e2e:	781b      	ldrb	r3, [r3, #0]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d001      	beq.n	8019e38 <SX1276SetTxConfig+0x1a4>
 8019e34:	2300      	movs	r3, #0
 8019e36:	e001      	b.n	8019e3c <SX1276SetTxConfig+0x1a8>
 8019e38:	2380      	movs	r3, #128	; 0x80
 8019e3a:	425b      	negs	r3, r3
 8019e3c:	4313      	orrs	r3, r2
 8019e3e:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019e40:	2328      	movs	r3, #40	; 0x28
 8019e42:	2108      	movs	r1, #8
 8019e44:	468c      	mov	ip, r1
 8019e46:	2108      	movs	r1, #8
 8019e48:	4688      	mov	r8, r1
 8019e4a:	44b8      	add	r8, r7
 8019e4c:	44c4      	add	ip, r8
 8019e4e:	4463      	add	r3, ip
 8019e50:	781b      	ldrb	r3, [r3, #0]
 8019e52:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8019e54:	b25b      	sxtb	r3, r3
 8019e56:	4313      	orrs	r3, r2
 8019e58:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8019e5a:	b2db      	uxtb	r3, r3
 8019e5c:	0019      	movs	r1, r3
 8019e5e:	2030      	movs	r0, #48	; 0x30
 8019e60:	f000 ff8c 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8019e64:	2031      	movs	r0, #49	; 0x31
 8019e66:	f000 ff9a 	bl	801ad9e <SX1276Read>
 8019e6a:	0003      	movs	r3, r0
 8019e6c:	001a      	movs	r2, r3
 8019e6e:	2340      	movs	r3, #64	; 0x40
 8019e70:	4313      	orrs	r3, r2
 8019e72:	b2db      	uxtb	r3, r3
 8019e74:	0019      	movs	r1, r3
 8019e76:	2031      	movs	r0, #49	; 0x31
 8019e78:	f000 ff80 	bl	801ad7c <SX1276Write>
        break;
 8019e7c:	e146      	b.n	801a10c <SX1276SetTxConfig+0x478>
            SX1276.Settings.LoRa.Power = power;
 8019e7e:	4b44      	ldr	r3, [pc, #272]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019e80:	220e      	movs	r2, #14
 8019e82:	18ba      	adds	r2, r7, r2
 8019e84:	2140      	movs	r1, #64	; 0x40
 8019e86:	7812      	ldrb	r2, [r2, #0]
 8019e88:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	2b02      	cmp	r3, #2
 8019e8e:	d900      	bls.n	8019e92 <SX1276SetTxConfig+0x1fe>
                while( 1 );
 8019e90:	e7fe      	b.n	8019e90 <SX1276SetTxConfig+0x1fc>
            bandwidth += 7;
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	3307      	adds	r3, #7
 8019e96:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8019e98:	4b3d      	ldr	r3, [pc, #244]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019e9a:	687a      	ldr	r2, [r7, #4]
 8019e9c:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8019e9e:	4b3c      	ldr	r3, [pc, #240]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ea2:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8019ea4:	4b3a      	ldr	r3, [pc, #232]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019ea6:	221c      	movs	r2, #28
 8019ea8:	2108      	movs	r1, #8
 8019eaa:	468c      	mov	ip, r1
 8019eac:	2108      	movs	r1, #8
 8019eae:	4688      	mov	r8, r1
 8019eb0:	44b8      	add	r8, r7
 8019eb2:	44c4      	add	ip, r8
 8019eb4:	4462      	add	r2, ip
 8019eb6:	214d      	movs	r1, #77	; 0x4d
 8019eb8:	7812      	ldrb	r2, [r2, #0]
 8019eba:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8019ebc:	4b34      	ldr	r3, [pc, #208]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019ebe:	2220      	movs	r2, #32
 8019ec0:	2108      	movs	r1, #8
 8019ec2:	468c      	mov	ip, r1
 8019ec4:	2108      	movs	r1, #8
 8019ec6:	4688      	mov	r8, r1
 8019ec8:	44b8      	add	r8, r7
 8019eca:	44c4      	add	ip, r8
 8019ecc:	4462      	add	r2, ip
 8019ece:	214e      	movs	r1, #78	; 0x4e
 8019ed0:	8812      	ldrh	r2, [r2, #0]
 8019ed2:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019ed4:	4b2e      	ldr	r3, [pc, #184]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019ed6:	2224      	movs	r2, #36	; 0x24
 8019ed8:	2108      	movs	r1, #8
 8019eda:	468c      	mov	ip, r1
 8019edc:	2108      	movs	r1, #8
 8019ede:	4688      	mov	r8, r1
 8019ee0:	44b8      	add	r8, r7
 8019ee2:	44c4      	add	ip, r8
 8019ee4:	4462      	add	r2, ip
 8019ee6:	2150      	movs	r1, #80	; 0x50
 8019ee8:	7812      	ldrb	r2, [r2, #0]
 8019eea:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019eec:	4b28      	ldr	r3, [pc, #160]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019eee:	222c      	movs	r2, #44	; 0x2c
 8019ef0:	2108      	movs	r1, #8
 8019ef2:	468c      	mov	ip, r1
 8019ef4:	2108      	movs	r1, #8
 8019ef6:	4688      	mov	r8, r1
 8019ef8:	44b8      	add	r8, r7
 8019efa:	44c4      	add	ip, r8
 8019efc:	4462      	add	r2, ip
 8019efe:	2153      	movs	r1, #83	; 0x53
 8019f00:	7812      	ldrb	r2, [r2, #0]
 8019f02:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019f04:	4b22      	ldr	r3, [pc, #136]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019f06:	2230      	movs	r2, #48	; 0x30
 8019f08:	2108      	movs	r1, #8
 8019f0a:	468c      	mov	ip, r1
 8019f0c:	2108      	movs	r1, #8
 8019f0e:	4688      	mov	r8, r1
 8019f10:	44b8      	add	r8, r7
 8019f12:	44c4      	add	ip, r8
 8019f14:	4462      	add	r2, ip
 8019f16:	2154      	movs	r1, #84	; 0x54
 8019f18:	7812      	ldrb	r2, [r2, #0]
 8019f1a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019f1c:	4b1c      	ldr	r3, [pc, #112]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019f1e:	2228      	movs	r2, #40	; 0x28
 8019f20:	2108      	movs	r1, #8
 8019f22:	468c      	mov	ip, r1
 8019f24:	2108      	movs	r1, #8
 8019f26:	4688      	mov	r8, r1
 8019f28:	44b8      	add	r8, r7
 8019f2a:	44c4      	add	ip, r8
 8019f2c:	4462      	add	r2, ip
 8019f2e:	2152      	movs	r1, #82	; 0x52
 8019f30:	7812      	ldrb	r2, [r2, #0]
 8019f32:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019f34:	4b16      	ldr	r3, [pc, #88]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019f36:	2234      	movs	r2, #52	; 0x34
 8019f38:	2108      	movs	r1, #8
 8019f3a:	468c      	mov	ip, r1
 8019f3c:	2108      	movs	r1, #8
 8019f3e:	4688      	mov	r8, r1
 8019f40:	44b8      	add	r8, r7
 8019f42:	44c4      	add	ip, r8
 8019f44:	4462      	add	r2, ip
 8019f46:	2155      	movs	r1, #85	; 0x55
 8019f48:	7812      	ldrb	r2, [r2, #0]
 8019f4a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8019f4c:	4b10      	ldr	r3, [pc, #64]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019f50:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8019f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f54:	2b0c      	cmp	r3, #12
 8019f56:	d902      	bls.n	8019f5e <SX1276SetTxConfig+0x2ca>
                datarate = 12;
 8019f58:	230c      	movs	r3, #12
 8019f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f5c:	e004      	b.n	8019f68 <SX1276SetTxConfig+0x2d4>
            else if( datarate < 6 )
 8019f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f60:	2b05      	cmp	r3, #5
 8019f62:	d801      	bhi.n	8019f68 <SX1276SetTxConfig+0x2d4>
                datarate = 6;
 8019f64:	2306      	movs	r3, #6
 8019f66:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	2b07      	cmp	r3, #7
 8019f6c:	d105      	bne.n	8019f7a <SX1276SetTxConfig+0x2e6>
 8019f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f70:	2b0b      	cmp	r3, #11
 8019f72:	d008      	beq.n	8019f86 <SX1276SetTxConfig+0x2f2>
 8019f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f76:	2b0c      	cmp	r3, #12
 8019f78:	d005      	beq.n	8019f86 <SX1276SetTxConfig+0x2f2>
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2b08      	cmp	r3, #8
 8019f7e:	d10d      	bne.n	8019f9c <SX1276SetTxConfig+0x308>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f82:	2b0c      	cmp	r3, #12
 8019f84:	d10a      	bne.n	8019f9c <SX1276SetTxConfig+0x308>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019f86:	4b02      	ldr	r3, [pc, #8]	; (8019f90 <SX1276SetTxConfig+0x2fc>)
 8019f88:	224c      	movs	r2, #76	; 0x4c
 8019f8a:	2101      	movs	r1, #1
 8019f8c:	5499      	strb	r1, [r3, r2]
 8019f8e:	e009      	b.n	8019fa4 <SX1276SetTxConfig+0x310>
 8019f90:	200016b0 	.word	0x200016b0
 8019f94:	404e8480 	.word	0x404e8480
 8019f98:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019f9c:	4b5e      	ldr	r3, [pc, #376]	; (801a118 <SX1276SetTxConfig+0x484>)
 8019f9e:	224c      	movs	r2, #76	; 0x4c
 8019fa0:	2100      	movs	r1, #0
 8019fa2:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019fa4:	4b5c      	ldr	r3, [pc, #368]	; (801a118 <SX1276SetTxConfig+0x484>)
 8019fa6:	2253      	movs	r2, #83	; 0x53
 8019fa8:	5c9b      	ldrb	r3, [r3, r2]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d013      	beq.n	8019fd6 <SX1276SetTxConfig+0x342>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019fae:	2044      	movs	r0, #68	; 0x44
 8019fb0:	f000 fef5 	bl	801ad9e <SX1276Read>
 8019fb4:	0003      	movs	r3, r0
 8019fb6:	001a      	movs	r2, r3
 8019fb8:	2380      	movs	r3, #128	; 0x80
 8019fba:	425b      	negs	r3, r3
 8019fbc:	4313      	orrs	r3, r2
 8019fbe:	b2db      	uxtb	r3, r3
 8019fc0:	0019      	movs	r1, r3
 8019fc2:	2044      	movs	r0, #68	; 0x44
 8019fc4:	f000 feda 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8019fc8:	4b53      	ldr	r3, [pc, #332]	; (801a118 <SX1276SetTxConfig+0x484>)
 8019fca:	2254      	movs	r2, #84	; 0x54
 8019fcc:	5c9b      	ldrb	r3, [r3, r2]
 8019fce:	0019      	movs	r1, r3
 8019fd0:	2024      	movs	r0, #36	; 0x24
 8019fd2:	f000 fed3 	bl	801ad7c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019fd6:	201d      	movs	r0, #29
 8019fd8:	f000 fee1 	bl	801ad9e <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	b2db      	uxtb	r3, r3
 8019fe0:	011b      	lsls	r3, r3, #4
 8019fe2:	b2da      	uxtb	r2, r3
 8019fe4:	231c      	movs	r3, #28
 8019fe6:	2108      	movs	r1, #8
 8019fe8:	468c      	mov	ip, r1
 8019fea:	2108      	movs	r1, #8
 8019fec:	4688      	mov	r8, r1
 8019fee:	44b8      	add	r8, r7
 8019ff0:	44c4      	add	ip, r8
 8019ff2:	4463      	add	r3, ip
 8019ff4:	781b      	ldrb	r3, [r3, #0]
 8019ff6:	18db      	adds	r3, r3, r3
 8019ff8:	b2db      	uxtb	r3, r3
 8019ffa:	4313      	orrs	r3, r2
 8019ffc:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019ffe:	2324      	movs	r3, #36	; 0x24
 801a000:	2108      	movs	r1, #8
 801a002:	468c      	mov	ip, r1
 801a004:	2108      	movs	r1, #8
 801a006:	4688      	mov	r8, r1
 801a008:	44b8      	add	r8, r7
 801a00a:	44c4      	add	ip, r8
 801a00c:	4463      	add	r3, ip
 801a00e:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a010:	4313      	orrs	r3, r2
 801a012:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a014:	0019      	movs	r1, r3
 801a016:	201d      	movs	r0, #29
 801a018:	f000 feb0 	bl	801ad7c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801a01c:	201e      	movs	r0, #30
 801a01e:	f000 febe 	bl	801ad9e <SX1276Read>
 801a022:	0003      	movs	r3, r0
 801a024:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 801a026:	230b      	movs	r3, #11
 801a028:	4013      	ands	r3, r2
 801a02a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a02e:	b2db      	uxtb	r3, r3
 801a030:	011b      	lsls	r3, r3, #4
 801a032:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 801a034:	4313      	orrs	r3, r2
 801a036:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a038:	2328      	movs	r3, #40	; 0x28
 801a03a:	2108      	movs	r1, #8
 801a03c:	468c      	mov	ip, r1
 801a03e:	2108      	movs	r1, #8
 801a040:	4688      	mov	r8, r1
 801a042:	44b8      	add	r8, r7
 801a044:	44c4      	add	ip, r8
 801a046:	4463      	add	r3, ip
 801a048:	781b      	ldrb	r3, [r3, #0]
 801a04a:	009b      	lsls	r3, r3, #2
 801a04c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801a04e:	4313      	orrs	r3, r2
 801a050:	b2db      	uxtb	r3, r3
 801a052:	0019      	movs	r1, r3
 801a054:	201e      	movs	r0, #30
 801a056:	f000 fe91 	bl	801ad7c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801a05a:	2026      	movs	r0, #38	; 0x26
 801a05c:	f000 fe9f 	bl	801ad9e <SX1276Read>
 801a060:	0003      	movs	r3, r0
 801a062:	b25b      	sxtb	r3, r3
 801a064:	2208      	movs	r2, #8
 801a066:	4393      	bics	r3, r2
 801a068:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801a06a:	4b2b      	ldr	r3, [pc, #172]	; (801a118 <SX1276SetTxConfig+0x484>)
 801a06c:	214c      	movs	r1, #76	; 0x4c
 801a06e:	5c5b      	ldrb	r3, [r3, r1]
 801a070:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801a072:	b25b      	sxtb	r3, r3
 801a074:	4313      	orrs	r3, r2
 801a076:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801a078:	b2db      	uxtb	r3, r3
 801a07a:	0019      	movs	r1, r3
 801a07c:	2026      	movs	r0, #38	; 0x26
 801a07e:	f000 fe7d 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801a082:	2420      	movs	r4, #32
 801a084:	2508      	movs	r5, #8
 801a086:	2308      	movs	r3, #8
 801a088:	18fb      	adds	r3, r7, r3
 801a08a:	195b      	adds	r3, r3, r5
 801a08c:	191b      	adds	r3, r3, r4
 801a08e:	881b      	ldrh	r3, [r3, #0]
 801a090:	0a1b      	lsrs	r3, r3, #8
 801a092:	b29b      	uxth	r3, r3
 801a094:	b2db      	uxtb	r3, r3
 801a096:	0019      	movs	r1, r3
 801a098:	2020      	movs	r0, #32
 801a09a:	f000 fe6f 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 801a09e:	2308      	movs	r3, #8
 801a0a0:	18fb      	adds	r3, r7, r3
 801a0a2:	195b      	adds	r3, r3, r5
 801a0a4:	191b      	adds	r3, r3, r4
 801a0a6:	881b      	ldrh	r3, [r3, #0]
 801a0a8:	b2db      	uxtb	r3, r3
 801a0aa:	0019      	movs	r1, r3
 801a0ac:	2021      	movs	r0, #33	; 0x21
 801a0ae:	f000 fe65 	bl	801ad7c <SX1276Write>
            if( datarate == 6 )
 801a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0b4:	2b06      	cmp	r3, #6
 801a0b6:	d114      	bne.n	801a0e2 <SX1276SetTxConfig+0x44e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a0b8:	2031      	movs	r0, #49	; 0x31
 801a0ba:	f000 fe70 	bl	801ad9e <SX1276Read>
 801a0be:	0003      	movs	r3, r0
 801a0c0:	b25b      	sxtb	r3, r3
 801a0c2:	2207      	movs	r2, #7
 801a0c4:	4393      	bics	r3, r2
 801a0c6:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a0c8:	2205      	movs	r2, #5
 801a0ca:	4313      	orrs	r3, r2
 801a0cc:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a0ce:	b2db      	uxtb	r3, r3
 801a0d0:	0019      	movs	r1, r3
 801a0d2:	2031      	movs	r0, #49	; 0x31
 801a0d4:	f000 fe52 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a0d8:	210c      	movs	r1, #12
 801a0da:	2037      	movs	r0, #55	; 0x37
 801a0dc:	f000 fe4e 	bl	801ad7c <SX1276Write>
        break;
 801a0e0:	e013      	b.n	801a10a <SX1276SetTxConfig+0x476>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a0e2:	2031      	movs	r0, #49	; 0x31
 801a0e4:	f000 fe5b 	bl	801ad9e <SX1276Read>
 801a0e8:	0003      	movs	r3, r0
 801a0ea:	b25b      	sxtb	r3, r3
 801a0ec:	2207      	movs	r2, #7
 801a0ee:	4393      	bics	r3, r2
 801a0f0:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a0f2:	2203      	movs	r2, #3
 801a0f4:	4313      	orrs	r3, r2
 801a0f6:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a0f8:	b2db      	uxtb	r3, r3
 801a0fa:	0019      	movs	r1, r3
 801a0fc:	2031      	movs	r0, #49	; 0x31
 801a0fe:	f000 fe3d 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a102:	210a      	movs	r1, #10
 801a104:	2037      	movs	r0, #55	; 0x37
 801a106:	f000 fe39 	bl	801ad7c <SX1276Write>
        break;
 801a10a:	46c0      	nop			; (mov r8, r8)
}
 801a10c:	46c0      	nop			; (mov r8, r8)
 801a10e:	46bd      	mov	sp, r7
 801a110:	b004      	add	sp, #16
 801a112:	bc80      	pop	{r7}
 801a114:	46b8      	mov	r8, r7
 801a116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a118:	200016b0 	.word	0x200016b0

0801a11c <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801a11c:	b590      	push	{r4, r7, lr}
 801a11e:	b08b      	sub	sp, #44	; 0x2c
 801a120:	af04      	add	r7, sp, #16
 801a122:	60b9      	str	r1, [r7, #8]
 801a124:	607a      	str	r2, [r7, #4]
 801a126:	0019      	movs	r1, r3
 801a128:	240f      	movs	r4, #15
 801a12a:	193b      	adds	r3, r7, r4
 801a12c:	1c02      	adds	r2, r0, #0
 801a12e:	701a      	strb	r2, [r3, #0]
 801a130:	230e      	movs	r3, #14
 801a132:	18fb      	adds	r3, r7, r3
 801a134:	1c0a      	adds	r2, r1, #0
 801a136:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 801a138:	2300      	movs	r3, #0
 801a13a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a13c:	2301      	movs	r3, #1
 801a13e:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a140:	193b      	adds	r3, r7, r4
 801a142:	781b      	ldrb	r3, [r3, #0]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d002      	beq.n	801a14e <SX1276GetTimeOnAir+0x32>
 801a148:	2b01      	cmp	r3, #1
 801a14a:	d01a      	beq.n	801a182 <SX1276GetTimeOnAir+0x66>
 801a14c:	e03f      	b.n	801a1ce <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 801a14e:	2334      	movs	r3, #52	; 0x34
 801a150:	18fb      	adds	r3, r7, r3
 801a152:	781c      	ldrb	r4, [r3, #0]
 801a154:	2330      	movs	r3, #48	; 0x30
 801a156:	18fb      	adds	r3, r7, r3
 801a158:	781a      	ldrb	r2, [r3, #0]
 801a15a:	232c      	movs	r3, #44	; 0x2c
 801a15c:	18fb      	adds	r3, r7, r3
 801a15e:	7819      	ldrb	r1, [r3, #0]
 801a160:	2328      	movs	r3, #40	; 0x28
 801a162:	18fb      	adds	r3, r7, r3
 801a164:	8818      	ldrh	r0, [r3, #0]
 801a166:	0023      	movs	r3, r4
 801a168:	f000 ff7e 	bl	801b068 <SX1276GetGfskTimeOnAirNumerator>
 801a16c:	0002      	movs	r2, r0
 801a16e:	0013      	movs	r3, r2
 801a170:	015b      	lsls	r3, r3, #5
 801a172:	1a9b      	subs	r3, r3, r2
 801a174:	009b      	lsls	r3, r3, #2
 801a176:	189b      	adds	r3, r3, r2
 801a178:	00db      	lsls	r3, r3, #3
 801a17a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	613b      	str	r3, [r7, #16]
        }
        break;
 801a180:	e025      	b.n	801a1ce <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 801a182:	2328      	movs	r3, #40	; 0x28
 801a184:	18fb      	adds	r3, r7, r3
 801a186:	881c      	ldrh	r4, [r3, #0]
 801a188:	230e      	movs	r3, #14
 801a18a:	18fb      	adds	r3, r7, r3
 801a18c:	781a      	ldrb	r2, [r3, #0]
 801a18e:	6879      	ldr	r1, [r7, #4]
 801a190:	68b8      	ldr	r0, [r7, #8]
 801a192:	2334      	movs	r3, #52	; 0x34
 801a194:	18fb      	adds	r3, r7, r3
 801a196:	781b      	ldrb	r3, [r3, #0]
 801a198:	9302      	str	r3, [sp, #8]
 801a19a:	2330      	movs	r3, #48	; 0x30
 801a19c:	18fb      	adds	r3, r7, r3
 801a19e:	781b      	ldrb	r3, [r3, #0]
 801a1a0:	9301      	str	r3, [sp, #4]
 801a1a2:	232c      	movs	r3, #44	; 0x2c
 801a1a4:	18fb      	adds	r3, r7, r3
 801a1a6:	781b      	ldrb	r3, [r3, #0]
 801a1a8:	9300      	str	r3, [sp, #0]
 801a1aa:	0023      	movs	r3, r4
 801a1ac:	f000 ff96 	bl	801b0dc <SX1276GetLoRaTimeOnAirNumerator>
 801a1b0:	0002      	movs	r2, r0
 801a1b2:	0013      	movs	r3, r2
 801a1b4:	015b      	lsls	r3, r3, #5
 801a1b6:	1a9b      	subs	r3, r3, r2
 801a1b8:	009b      	lsls	r3, r3, #2
 801a1ba:	189b      	adds	r3, r3, r2
 801a1bc:	00db      	lsls	r3, r3, #3
 801a1be:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 801a1c0:	68bb      	ldr	r3, [r7, #8]
 801a1c2:	0018      	movs	r0, r3
 801a1c4:	f000 ff1e 	bl	801b004 <SX1276GetLoRaBandwidthInHz>
 801a1c8:	0003      	movs	r3, r0
 801a1ca:	613b      	str	r3, [r7, #16]
        }
        break;
 801a1cc:	46c0      	nop			; (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 801a1ce:	697a      	ldr	r2, [r7, #20]
 801a1d0:	693b      	ldr	r3, [r7, #16]
 801a1d2:	18d3      	adds	r3, r2, r3
 801a1d4:	3b01      	subs	r3, #1
 801a1d6:	6939      	ldr	r1, [r7, #16]
 801a1d8:	0018      	movs	r0, r3
 801a1da:	f7e5 ff9d 	bl	8000118 <__udivsi3>
 801a1de:	0003      	movs	r3, r0
}
 801a1e0:	0018      	movs	r0, r3
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	b007      	add	sp, #28
 801a1e6:	bd90      	pop	{r4, r7, pc}

0801a1e8 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b084      	sub	sp, #16
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	6078      	str	r0, [r7, #4]
 801a1f0:	000a      	movs	r2, r1
 801a1f2:	1cfb      	adds	r3, r7, #3
 801a1f4:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 801a1fa:	4b59      	ldr	r3, [pc, #356]	; (801a360 <SX1276Send+0x178>)
 801a1fc:	795b      	ldrb	r3, [r3, #5]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d002      	beq.n	801a208 <SX1276Send+0x20>
 801a202:	2b01      	cmp	r3, #1
 801a204:	d04c      	beq.n	801a2a0 <SX1276Send+0xb8>
 801a206:	e0a2      	b.n	801a34e <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a208:	4b55      	ldr	r3, [pc, #340]	; (801a360 <SX1276Send+0x178>)
 801a20a:	2200      	movs	r2, #0
 801a20c:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801a20e:	1cfb      	adds	r3, r7, #3
 801a210:	781b      	ldrb	r3, [r3, #0]
 801a212:	b29a      	uxth	r2, r3
 801a214:	4b52      	ldr	r3, [pc, #328]	; (801a360 <SX1276Send+0x178>)
 801a216:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 801a218:	4b51      	ldr	r3, [pc, #324]	; (801a360 <SX1276Send+0x178>)
 801a21a:	2222      	movs	r2, #34	; 0x22
 801a21c:	5c9b      	ldrb	r3, [r3, r2]
 801a21e:	2201      	movs	r2, #1
 801a220:	4053      	eors	r3, r2
 801a222:	b2db      	uxtb	r3, r3
 801a224:	2b00      	cmp	r3, #0
 801a226:	d005      	beq.n	801a234 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 801a228:	1cfb      	adds	r3, r7, #3
 801a22a:	2101      	movs	r1, #1
 801a22c:	0018      	movs	r0, r3
 801a22e:	f000 fe31 	bl	801ae94 <SX1276WriteFifo>
 801a232:	e005      	b.n	801a240 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 801a234:	1cfb      	adds	r3, r7, #3
 801a236:	781b      	ldrb	r3, [r3, #0]
 801a238:	0019      	movs	r1, r3
 801a23a:	2032      	movs	r0, #50	; 0x32
 801a23c:	f000 fd9e 	bl	801ad7c <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801a240:	1cfb      	adds	r3, r7, #3
 801a242:	781b      	ldrb	r3, [r3, #0]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d009      	beq.n	801a25c <SX1276Send+0x74>
 801a248:	1cfb      	adds	r3, r7, #3
 801a24a:	781b      	ldrb	r3, [r3, #0]
 801a24c:	2b40      	cmp	r3, #64	; 0x40
 801a24e:	d805      	bhi.n	801a25c <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801a250:	1cfb      	adds	r3, r7, #3
 801a252:	7819      	ldrb	r1, [r3, #0]
 801a254:	4b42      	ldr	r3, [pc, #264]	; (801a360 <SX1276Send+0x178>)
 801a256:	223f      	movs	r2, #63	; 0x3f
 801a258:	5499      	strb	r1, [r3, r2]
 801a25a:	e00b      	b.n	801a274 <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 801a25c:	1cfb      	adds	r3, r7, #3
 801a25e:	781b      	ldrb	r3, [r3, #0]
 801a260:	b29a      	uxth	r2, r3
 801a262:	6879      	ldr	r1, [r7, #4]
 801a264:	4b3f      	ldr	r3, [pc, #252]	; (801a364 <SX1276Send+0x17c>)
 801a266:	0018      	movs	r0, r3
 801a268:	f002 f838 	bl	801c2dc <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801a26c:	4b3c      	ldr	r3, [pc, #240]	; (801a360 <SX1276Send+0x178>)
 801a26e:	223f      	movs	r2, #63	; 0x3f
 801a270:	2120      	movs	r1, #32
 801a272:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801a274:	4b3a      	ldr	r3, [pc, #232]	; (801a360 <SX1276Send+0x178>)
 801a276:	223f      	movs	r2, #63	; 0x3f
 801a278:	5c9a      	ldrb	r2, [r3, r2]
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	0011      	movs	r1, r2
 801a27e:	0018      	movs	r0, r3
 801a280:	f000 fe08 	bl	801ae94 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801a284:	4b36      	ldr	r3, [pc, #216]	; (801a360 <SX1276Send+0x178>)
 801a286:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801a288:	4b35      	ldr	r3, [pc, #212]	; (801a360 <SX1276Send+0x178>)
 801a28a:	213f      	movs	r1, #63	; 0x3f
 801a28c:	5c5b      	ldrb	r3, [r3, r1]
 801a28e:	b29b      	uxth	r3, r3
 801a290:	18d3      	adds	r3, r2, r3
 801a292:	b29a      	uxth	r2, r3
 801a294:	4b32      	ldr	r3, [pc, #200]	; (801a360 <SX1276Send+0x178>)
 801a296:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 801a298:	4b31      	ldr	r3, [pc, #196]	; (801a360 <SX1276Send+0x178>)
 801a29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a29c:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a29e:	e056      	b.n	801a34e <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a2a0:	4b2f      	ldr	r3, [pc, #188]	; (801a360 <SX1276Send+0x178>)
 801a2a2:	2255      	movs	r2, #85	; 0x55
 801a2a4:	5c9b      	ldrb	r3, [r3, r2]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d011      	beq.n	801a2ce <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801a2aa:	2033      	movs	r0, #51	; 0x33
 801a2ac:	f000 fd77 	bl	801ad9e <SX1276Read>
 801a2b0:	0003      	movs	r3, r0
 801a2b2:	001a      	movs	r2, r3
 801a2b4:	2341      	movs	r3, #65	; 0x41
 801a2b6:	439a      	bics	r2, r3
 801a2b8:	0013      	movs	r3, r2
 801a2ba:	b2db      	uxtb	r3, r3
 801a2bc:	0019      	movs	r1, r3
 801a2be:	2033      	movs	r0, #51	; 0x33
 801a2c0:	f000 fd5c 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a2c4:	2119      	movs	r1, #25
 801a2c6:	203b      	movs	r0, #59	; 0x3b
 801a2c8:	f000 fd58 	bl	801ad7c <SX1276Write>
 801a2cc:	e013      	b.n	801a2f6 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a2ce:	2033      	movs	r0, #51	; 0x33
 801a2d0:	f000 fd65 	bl	801ad9e <SX1276Read>
 801a2d4:	0003      	movs	r3, r0
 801a2d6:	b25b      	sxtb	r3, r3
 801a2d8:	2241      	movs	r2, #65	; 0x41
 801a2da:	4393      	bics	r3, r2
 801a2dc:	b25b      	sxtb	r3, r3
 801a2de:	2201      	movs	r2, #1
 801a2e0:	4313      	orrs	r3, r2
 801a2e2:	b25b      	sxtb	r3, r3
 801a2e4:	b2db      	uxtb	r3, r3
 801a2e6:	0019      	movs	r1, r3
 801a2e8:	2033      	movs	r0, #51	; 0x33
 801a2ea:	f000 fd47 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a2ee:	211d      	movs	r1, #29
 801a2f0:	203b      	movs	r0, #59	; 0x3b
 801a2f2:	f000 fd43 	bl	801ad7c <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 801a2f6:	1cfb      	adds	r3, r7, #3
 801a2f8:	7819      	ldrb	r1, [r3, #0]
 801a2fa:	4b19      	ldr	r3, [pc, #100]	; (801a360 <SX1276Send+0x178>)
 801a2fc:	2264      	movs	r2, #100	; 0x64
 801a2fe:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801a300:	1cfb      	adds	r3, r7, #3
 801a302:	781b      	ldrb	r3, [r3, #0]
 801a304:	0019      	movs	r1, r3
 801a306:	2022      	movs	r0, #34	; 0x22
 801a308:	f000 fd38 	bl	801ad7c <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 801a30c:	2100      	movs	r1, #0
 801a30e:	200e      	movs	r0, #14
 801a310:	f000 fd34 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801a314:	2100      	movs	r1, #0
 801a316:	200d      	movs	r0, #13
 801a318:	f000 fd30 	bl	801ad7c <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 801a31c:	2001      	movs	r0, #1
 801a31e:	f000 fd3e 	bl	801ad9e <SX1276Read>
 801a322:	0003      	movs	r3, r0
 801a324:	001a      	movs	r2, r3
 801a326:	23f8      	movs	r3, #248	; 0xf8
 801a328:	439a      	bics	r2, r3
 801a32a:	1e13      	subs	r3, r2, #0
 801a32c:	d104      	bne.n	801a338 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801a32e:	f000 f94f 	bl	801a5d0 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 801a332:	2001      	movs	r0, #1
 801a334:	f7ea fea7 	bl	8005086 <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 801a338:	1cfb      	adds	r3, r7, #3
 801a33a:	781a      	ldrb	r2, [r3, #0]
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	0011      	movs	r1, r2
 801a340:	0018      	movs	r0, r3
 801a342:	f000 fda7 	bl	801ae94 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 801a346:	4b06      	ldr	r3, [pc, #24]	; (801a360 <SX1276Send+0x178>)
 801a348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a34a:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a34c:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	0018      	movs	r0, r3
 801a352:	f000 faf3 	bl	801a93c <SX1276SetTx>
}
 801a356:	46c0      	nop			; (mov r8, r8)
 801a358:	46bd      	mov	sp, r7
 801a35a:	b004      	add	sp, #16
 801a35c:	bd80      	pop	{r7, pc}
 801a35e:	46c0      	nop			; (mov r8, r8)
 801a360:	200016b0 	.word	0x200016b0
 801a364:	20000e14 	.word	0x20000e14

0801a368 <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 801a368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a36a:	b085      	sub	sp, #20
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	0002      	movs	r2, r0
 801a370:	1dfb      	adds	r3, r7, #7
 801a372:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 801a374:	210f      	movs	r1, #15
 801a376:	187b      	adds	r3, r7, r1
 801a378:	2200      	movs	r2, #0
 801a37a:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 801a37c:	250e      	movs	r5, #14
 801a37e:	197b      	adds	r3, r7, r5
 801a380:	2200      	movs	r2, #0
 801a382:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 801a384:	260d      	movs	r6, #13
 801a386:	19bb      	adds	r3, r7, r6
 801a388:	2200      	movs	r2, #0
 801a38a:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 801a38c:	187c      	adds	r4, r7, r1
 801a38e:	2009      	movs	r0, #9
 801a390:	f000 fd05 	bl	801ad9e <SX1276Read>
 801a394:	0003      	movs	r3, r0
 801a396:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 801a398:	197c      	adds	r4, r7, r5
 801a39a:	204d      	movs	r0, #77	; 0x4d
 801a39c:	f000 fcff 	bl	801ad9e <SX1276Read>
 801a3a0:	0003      	movs	r3, r0
 801a3a2:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 801a3a4:	4b78      	ldr	r3, [pc, #480]	; (801a588 <SX1276SetRfTxPower+0x220>)
 801a3a6:	689b      	ldr	r3, [r3, #8]
 801a3a8:	0018      	movs	r0, r3
 801a3aa:	f7eb fe4f 	bl	800604c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 801a3ae:	0003      	movs	r3, r0
 801a3b0:	2b03      	cmp	r3, #3
 801a3b2:	d01f      	beq.n	801a3f4 <SX1276SetRfTxPower+0x8c>
 801a3b4:	dc23      	bgt.n	801a3fe <SX1276SetRfTxPower+0x96>
 801a3b6:	2b02      	cmp	r3, #2
 801a3b8:	d008      	beq.n	801a3cc <SX1276SetRfTxPower+0x64>
 801a3ba:	dc20      	bgt.n	801a3fe <SX1276SetRfTxPower+0x96>
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d00a      	beq.n	801a3d6 <SX1276SetRfTxPower+0x6e>
 801a3c0:	2b01      	cmp	r3, #1
 801a3c2:	d11c      	bne.n	801a3fe <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 801a3c4:	19bb      	adds	r3, r7, r6
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	701a      	strb	r2, [r3, #0]
        break;
 801a3ca:	e019      	b.n	801a400 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a3cc:	230d      	movs	r3, #13
 801a3ce:	18fb      	adds	r3, r7, r3
 801a3d0:	2280      	movs	r2, #128	; 0x80
 801a3d2:	701a      	strb	r2, [r3, #0]
        break;
 801a3d4:	e014      	b.n	801a400 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 801a3d6:	1dfb      	adds	r3, r7, #7
 801a3d8:	781b      	ldrb	r3, [r3, #0]
 801a3da:	b25b      	sxtb	r3, r3
 801a3dc:	2b0e      	cmp	r3, #14
 801a3de:	dd04      	ble.n	801a3ea <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a3e0:	230d      	movs	r3, #13
 801a3e2:	18fb      	adds	r3, r7, r3
 801a3e4:	2280      	movs	r2, #128	; 0x80
 801a3e6:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 801a3e8:	e00a      	b.n	801a400 <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 801a3ea:	230d      	movs	r3, #13
 801a3ec:	18fb      	adds	r3, r7, r3
 801a3ee:	2200      	movs	r2, #0
 801a3f0:	701a      	strb	r2, [r3, #0]
        break;
 801a3f2:	e005      	b.n	801a400 <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 801a3f4:	230d      	movs	r3, #13
 801a3f6:	18fb      	adds	r3, r7, r3
 801a3f8:	2280      	movs	r2, #128	; 0x80
 801a3fa:	701a      	strb	r2, [r3, #0]
          break;
 801a3fc:	e000      	b.n	801a400 <SX1276SetRfTxPower+0x98>
        default:
        break;
 801a3fe:	46c0      	nop			; (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 801a400:	210f      	movs	r1, #15
 801a402:	187b      	adds	r3, r7, r1
 801a404:	781b      	ldrb	r3, [r3, #0]
 801a406:	b25b      	sxtb	r3, r3
 801a408:	227f      	movs	r2, #127	; 0x7f
 801a40a:	4013      	ands	r3, r2
 801a40c:	b25a      	sxtb	r2, r3
 801a40e:	230d      	movs	r3, #13
 801a410:	18fb      	adds	r3, r7, r3
 801a412:	781b      	ldrb	r3, [r3, #0]
 801a414:	b25b      	sxtb	r3, r3
 801a416:	4313      	orrs	r3, r2
 801a418:	b25a      	sxtb	r2, r3
 801a41a:	187b      	adds	r3, r7, r1
 801a41c:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a41e:	187b      	adds	r3, r7, r1
 801a420:	781b      	ldrb	r3, [r3, #0]
 801a422:	b25b      	sxtb	r3, r3
 801a424:	2b00      	cmp	r3, #0
 801a426:	da67      	bge.n	801a4f8 <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 801a428:	1dfb      	adds	r3, r7, #7
 801a42a:	781b      	ldrb	r3, [r3, #0]
 801a42c:	b25b      	sxtb	r3, r3
 801a42e:	2b11      	cmp	r3, #17
 801a430:	dd07      	ble.n	801a442 <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801a432:	220e      	movs	r2, #14
 801a434:	18bb      	adds	r3, r7, r2
 801a436:	18ba      	adds	r2, r7, r2
 801a438:	7812      	ldrb	r2, [r2, #0]
 801a43a:	2107      	movs	r1, #7
 801a43c:	430a      	orrs	r2, r1
 801a43e:	701a      	strb	r2, [r3, #0]
 801a440:	e00b      	b.n	801a45a <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801a442:	210e      	movs	r1, #14
 801a444:	187b      	adds	r3, r7, r1
 801a446:	781b      	ldrb	r3, [r3, #0]
 801a448:	b25b      	sxtb	r3, r3
 801a44a:	2207      	movs	r2, #7
 801a44c:	4393      	bics	r3, r2
 801a44e:	b25b      	sxtb	r3, r3
 801a450:	2204      	movs	r2, #4
 801a452:	4313      	orrs	r3, r2
 801a454:	b25a      	sxtb	r2, r3
 801a456:	187b      	adds	r3, r7, r1
 801a458:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801a45a:	230e      	movs	r3, #14
 801a45c:	18fb      	adds	r3, r7, r3
 801a45e:	781b      	ldrb	r3, [r3, #0]
 801a460:	2207      	movs	r2, #7
 801a462:	4013      	ands	r3, r2
 801a464:	2b07      	cmp	r3, #7
 801a466:	d123      	bne.n	801a4b0 <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 801a468:	1dfb      	adds	r3, r7, #7
 801a46a:	781b      	ldrb	r3, [r3, #0]
 801a46c:	b25b      	sxtb	r3, r3
 801a46e:	2b04      	cmp	r3, #4
 801a470:	dc02      	bgt.n	801a478 <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 801a472:	1dfb      	adds	r3, r7, #7
 801a474:	2205      	movs	r2, #5
 801a476:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801a478:	1dfb      	adds	r3, r7, #7
 801a47a:	781b      	ldrb	r3, [r3, #0]
 801a47c:	b25b      	sxtb	r3, r3
 801a47e:	2b14      	cmp	r3, #20
 801a480:	dd02      	ble.n	801a488 <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 801a482:	1dfb      	adds	r3, r7, #7
 801a484:	2214      	movs	r2, #20
 801a486:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801a488:	200f      	movs	r0, #15
 801a48a:	183b      	adds	r3, r7, r0
 801a48c:	781b      	ldrb	r3, [r3, #0]
 801a48e:	b25b      	sxtb	r3, r3
 801a490:	220f      	movs	r2, #15
 801a492:	4393      	bics	r3, r2
 801a494:	b25a      	sxtb	r2, r3
 801a496:	1dfb      	adds	r3, r7, #7
 801a498:	781b      	ldrb	r3, [r3, #0]
 801a49a:	3b05      	subs	r3, #5
 801a49c:	b2db      	uxtb	r3, r3
 801a49e:	b25b      	sxtb	r3, r3
 801a4a0:	210f      	movs	r1, #15
 801a4a2:	400b      	ands	r3, r1
 801a4a4:	b25b      	sxtb	r3, r3
 801a4a6:	4313      	orrs	r3, r2
 801a4a8:	b25a      	sxtb	r2, r3
 801a4aa:	183b      	adds	r3, r7, r0
 801a4ac:	701a      	strb	r2, [r3, #0]
 801a4ae:	e059      	b.n	801a564 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 801a4b0:	1dfb      	adds	r3, r7, #7
 801a4b2:	781b      	ldrb	r3, [r3, #0]
 801a4b4:	b25b      	sxtb	r3, r3
 801a4b6:	2b01      	cmp	r3, #1
 801a4b8:	dc02      	bgt.n	801a4c0 <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 801a4ba:	1dfb      	adds	r3, r7, #7
 801a4bc:	2202      	movs	r2, #2
 801a4be:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801a4c0:	1dfb      	adds	r3, r7, #7
 801a4c2:	781b      	ldrb	r3, [r3, #0]
 801a4c4:	b25b      	sxtb	r3, r3
 801a4c6:	2b11      	cmp	r3, #17
 801a4c8:	dd02      	ble.n	801a4d0 <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 801a4ca:	1dfb      	adds	r3, r7, #7
 801a4cc:	2211      	movs	r2, #17
 801a4ce:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801a4d0:	200f      	movs	r0, #15
 801a4d2:	183b      	adds	r3, r7, r0
 801a4d4:	781b      	ldrb	r3, [r3, #0]
 801a4d6:	b25b      	sxtb	r3, r3
 801a4d8:	220f      	movs	r2, #15
 801a4da:	4393      	bics	r3, r2
 801a4dc:	b25a      	sxtb	r2, r3
 801a4de:	1dfb      	adds	r3, r7, #7
 801a4e0:	781b      	ldrb	r3, [r3, #0]
 801a4e2:	3b02      	subs	r3, #2
 801a4e4:	b2db      	uxtb	r3, r3
 801a4e6:	b25b      	sxtb	r3, r3
 801a4e8:	210f      	movs	r1, #15
 801a4ea:	400b      	ands	r3, r1
 801a4ec:	b25b      	sxtb	r3, r3
 801a4ee:	4313      	orrs	r3, r2
 801a4f0:	b25a      	sxtb	r2, r3
 801a4f2:	183b      	adds	r3, r7, r0
 801a4f4:	701a      	strb	r2, [r3, #0]
 801a4f6:	e035      	b.n	801a564 <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 801a4f8:	1dfb      	adds	r3, r7, #7
 801a4fa:	781b      	ldrb	r3, [r3, #0]
 801a4fc:	b25b      	sxtb	r3, r3
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	dd18      	ble.n	801a534 <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 801a502:	1dfb      	adds	r3, r7, #7
 801a504:	781b      	ldrb	r3, [r3, #0]
 801a506:	b25b      	sxtb	r3, r3
 801a508:	2b0f      	cmp	r3, #15
 801a50a:	dd02      	ble.n	801a512 <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 801a50c:	1dfb      	adds	r3, r7, #7
 801a50e:	220f      	movs	r2, #15
 801a510:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 801a512:	210f      	movs	r1, #15
 801a514:	187b      	adds	r3, r7, r1
 801a516:	781b      	ldrb	r3, [r3, #0]
 801a518:	b25b      	sxtb	r3, r3
 801a51a:	227f      	movs	r2, #127	; 0x7f
 801a51c:	4393      	bics	r3, r2
 801a51e:	b25b      	sxtb	r3, r3
 801a520:	2270      	movs	r2, #112	; 0x70
 801a522:	4313      	orrs	r3, r2
 801a524:	b25a      	sxtb	r2, r3
 801a526:	1dfb      	adds	r3, r7, #7
 801a528:	781b      	ldrb	r3, [r3, #0]
 801a52a:	4313      	orrs	r3, r2
 801a52c:	b25a      	sxtb	r2, r3
 801a52e:	187b      	adds	r3, r7, r1
 801a530:	701a      	strb	r2, [r3, #0]
 801a532:	e017      	b.n	801a564 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 801a534:	1dfb      	adds	r3, r7, #7
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	b25b      	sxtb	r3, r3
 801a53a:	3304      	adds	r3, #4
 801a53c:	da02      	bge.n	801a544 <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 801a53e:	1dfb      	adds	r3, r7, #7
 801a540:	22fc      	movs	r2, #252	; 0xfc
 801a542:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 801a544:	210f      	movs	r1, #15
 801a546:	187b      	adds	r3, r7, r1
 801a548:	781b      	ldrb	r3, [r3, #0]
 801a54a:	b25b      	sxtb	r3, r3
 801a54c:	227f      	movs	r2, #127	; 0x7f
 801a54e:	4393      	bics	r3, r2
 801a550:	b25a      	sxtb	r2, r3
 801a552:	1dfb      	adds	r3, r7, #7
 801a554:	781b      	ldrb	r3, [r3, #0]
 801a556:	3304      	adds	r3, #4
 801a558:	b2db      	uxtb	r3, r3
 801a55a:	b25b      	sxtb	r3, r3
 801a55c:	4313      	orrs	r3, r2
 801a55e:	b25a      	sxtb	r2, r3
 801a560:	187b      	adds	r3, r7, r1
 801a562:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801a564:	230f      	movs	r3, #15
 801a566:	18fb      	adds	r3, r7, r3
 801a568:	781b      	ldrb	r3, [r3, #0]
 801a56a:	0019      	movs	r1, r3
 801a56c:	2009      	movs	r0, #9
 801a56e:	f000 fc05 	bl	801ad7c <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801a572:	230e      	movs	r3, #14
 801a574:	18fb      	adds	r3, r7, r3
 801a576:	781b      	ldrb	r3, [r3, #0]
 801a578:	0019      	movs	r1, r3
 801a57a:	204d      	movs	r0, #77	; 0x4d
 801a57c:	f000 fbfe 	bl	801ad7c <SX1276Write>
}
 801a580:	46c0      	nop			; (mov r8, r8)
 801a582:	46bd      	mov	sp, r7
 801a584:	b005      	add	sp, #20
 801a586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a588:	200016b0 	.word	0x200016b0

0801a58c <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 801a590:	4b0b      	ldr	r3, [pc, #44]	; (801a5c0 <SX1276SetSleep+0x34>)
 801a592:	0018      	movs	r0, r3
 801a594:	f002 fa66 	bl	801ca64 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a598:	4b0a      	ldr	r3, [pc, #40]	; (801a5c4 <SX1276SetSleep+0x38>)
 801a59a:	0018      	movs	r0, r3
 801a59c:	f002 fa62 	bl	801ca64 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a5a0:	4b09      	ldr	r3, [pc, #36]	; (801a5c8 <SX1276SetSleep+0x3c>)
 801a5a2:	0018      	movs	r0, r3
 801a5a4:	f002 fa5e 	bl	801ca64 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a5a8:	2000      	movs	r0, #0
 801a5aa:	f000 fb20 	bl	801abee <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 801a5ae:	2000      	movs	r0, #0
 801a5b0:	f7eb fb98 	bl	8005ce4 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 801a5b4:	4b05      	ldr	r3, [pc, #20]	; (801a5cc <SX1276SetSleep+0x40>)
 801a5b6:	2200      	movs	r2, #0
 801a5b8:	711a      	strb	r2, [r3, #4]
}
 801a5ba:	46c0      	nop			; (mov r8, r8)
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	bd80      	pop	{r7, pc}
 801a5c0:	20001718 	.word	0x20001718
 801a5c4:	20001680 	.word	0x20001680
 801a5c8:	20001698 	.word	0x20001698
 801a5cc:	200016b0 	.word	0x200016b0

0801a5d0 <SX1276SetStby>:

void SX1276SetStby( void )
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 801a5d4:	4b0a      	ldr	r3, [pc, #40]	; (801a600 <SX1276SetStby+0x30>)
 801a5d6:	0018      	movs	r0, r3
 801a5d8:	f002 fa44 	bl	801ca64 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a5dc:	4b09      	ldr	r3, [pc, #36]	; (801a604 <SX1276SetStby+0x34>)
 801a5de:	0018      	movs	r0, r3
 801a5e0:	f002 fa40 	bl	801ca64 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a5e4:	4b08      	ldr	r3, [pc, #32]	; (801a608 <SX1276SetStby+0x38>)
 801a5e6:	0018      	movs	r0, r3
 801a5e8:	f002 fa3c 	bl	801ca64 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801a5ec:	2001      	movs	r0, #1
 801a5ee:	f000 fafe 	bl	801abee <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801a5f2:	4b06      	ldr	r3, [pc, #24]	; (801a60c <SX1276SetStby+0x3c>)
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	711a      	strb	r2, [r3, #4]
}
 801a5f8:	46c0      	nop			; (mov r8, r8)
 801a5fa:	46bd      	mov	sp, r7
 801a5fc:	bd80      	pop	{r7, pc}
 801a5fe:	46c0      	nop			; (mov r8, r8)
 801a600:	20001718 	.word	0x20001718
 801a604:	20001680 	.word	0x20001680
 801a608:	20001698 	.word	0x20001698
 801a60c:	200016b0 	.word	0x200016b0

0801a610 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b084      	sub	sp, #16
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 801a618:	230f      	movs	r3, #15
 801a61a:	18fb      	adds	r3, r7, r3
 801a61c:	2200      	movs	r2, #0
 801a61e:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 801a620:	4bba      	ldr	r3, [pc, #744]	; (801a90c <SX1276SetRx+0x2fc>)
 801a622:	0018      	movs	r0, r3
 801a624:	f002 fa1e 	bl	801ca64 <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 801a628:	4bb9      	ldr	r3, [pc, #740]	; (801a910 <SX1276SetRx+0x300>)
 801a62a:	795b      	ldrb	r3, [r3, #5]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d002      	beq.n	801a636 <SX1276SetRx+0x26>
 801a630:	2b01      	cmp	r3, #1
 801a632:	d041      	beq.n	801a6b8 <SX1276SetRx+0xa8>
 801a634:	e127      	b.n	801a886 <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801a636:	230f      	movs	r3, #15
 801a638:	18fb      	adds	r3, r7, r3
 801a63a:	4ab5      	ldr	r2, [pc, #724]	; (801a910 <SX1276SetRx+0x300>)
 801a63c:	2126      	movs	r1, #38	; 0x26
 801a63e:	5c52      	ldrb	r2, [r2, r1]
 801a640:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a642:	2040      	movs	r0, #64	; 0x40
 801a644:	f000 fbab 	bl	801ad9e <SX1276Read>
 801a648:	0003      	movs	r3, r0
 801a64a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801a64c:	2203      	movs	r2, #3
 801a64e:	4013      	ands	r3, r2
 801a650:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801a652:	220c      	movs	r2, #12
 801a654:	4313      	orrs	r3, r2
 801a656:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a658:	b2db      	uxtb	r3, r3
 801a65a:	0019      	movs	r1, r3
 801a65c:	2040      	movs	r0, #64	; 0x40
 801a65e:	f000 fb8d 	bl	801ad7c <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a662:	2041      	movs	r0, #65	; 0x41
 801a664:	f000 fb9b 	bl	801ad9e <SX1276Read>
 801a668:	0003      	movs	r3, r0
 801a66a:	001a      	movs	r2, r3
 801a66c:	233f      	movs	r3, #63	; 0x3f
 801a66e:	425b      	negs	r3, r3
 801a670:	4313      	orrs	r3, r2
 801a672:	b2db      	uxtb	r3, r3
 801a674:	0019      	movs	r1, r3
 801a676:	2041      	movs	r0, #65	; 0x41
 801a678:	f000 fb80 	bl	801ad7c <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a67c:	2035      	movs	r0, #53	; 0x35
 801a67e:	f000 fb8e 	bl	801ad9e <SX1276Read>
 801a682:	0003      	movs	r3, r0
 801a684:	001a      	movs	r2, r3
 801a686:	233f      	movs	r3, #63	; 0x3f
 801a688:	4013      	ands	r3, r2
 801a68a:	b2d9      	uxtb	r1, r3
 801a68c:	4ba0      	ldr	r3, [pc, #640]	; (801a910 <SX1276SetRx+0x300>)
 801a68e:	223e      	movs	r2, #62	; 0x3e
 801a690:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801a692:	211e      	movs	r1, #30
 801a694:	200d      	movs	r0, #13
 801a696:	f000 fb71 	bl	801ad7c <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a69a:	4b9d      	ldr	r3, [pc, #628]	; (801a910 <SX1276SetRx+0x300>)
 801a69c:	2230      	movs	r2, #48	; 0x30
 801a69e:	2100      	movs	r1, #0
 801a6a0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a6a2:	4b9b      	ldr	r3, [pc, #620]	; (801a910 <SX1276SetRx+0x300>)
 801a6a4:	2231      	movs	r2, #49	; 0x31
 801a6a6:	2100      	movs	r1, #0
 801a6a8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a6aa:	4b99      	ldr	r3, [pc, #612]	; (801a910 <SX1276SetRx+0x300>)
 801a6ac:	2200      	movs	r2, #0
 801a6ae:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801a6b0:	4b97      	ldr	r3, [pc, #604]	; (801a910 <SX1276SetRx+0x300>)
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801a6b6:	e0e6      	b.n	801a886 <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a6b8:	4b95      	ldr	r3, [pc, #596]	; (801a910 <SX1276SetRx+0x300>)
 801a6ba:	2255      	movs	r2, #85	; 0x55
 801a6bc:	5c9b      	ldrb	r3, [r3, r2]
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d010      	beq.n	801a6e4 <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801a6c2:	2033      	movs	r0, #51	; 0x33
 801a6c4:	f000 fb6b 	bl	801ad9e <SX1276Read>
 801a6c8:	0003      	movs	r3, r0
 801a6ca:	001a      	movs	r2, r3
 801a6cc:	2341      	movs	r3, #65	; 0x41
 801a6ce:	4313      	orrs	r3, r2
 801a6d0:	b2db      	uxtb	r3, r3
 801a6d2:	0019      	movs	r1, r3
 801a6d4:	2033      	movs	r0, #51	; 0x33
 801a6d6:	f000 fb51 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a6da:	2119      	movs	r1, #25
 801a6dc:	203b      	movs	r0, #59	; 0x3b
 801a6de:	f000 fb4d 	bl	801ad7c <SX1276Write>
 801a6e2:	e013      	b.n	801a70c <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a6e4:	2033      	movs	r0, #51	; 0x33
 801a6e6:	f000 fb5a 	bl	801ad9e <SX1276Read>
 801a6ea:	0003      	movs	r3, r0
 801a6ec:	b25b      	sxtb	r3, r3
 801a6ee:	2241      	movs	r2, #65	; 0x41
 801a6f0:	4393      	bics	r3, r2
 801a6f2:	b25b      	sxtb	r3, r3
 801a6f4:	2201      	movs	r2, #1
 801a6f6:	4313      	orrs	r3, r2
 801a6f8:	b25b      	sxtb	r3, r3
 801a6fa:	b2db      	uxtb	r3, r3
 801a6fc:	0019      	movs	r1, r3
 801a6fe:	2033      	movs	r0, #51	; 0x33
 801a700:	f000 fb3c 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a704:	211d      	movs	r1, #29
 801a706:	203b      	movs	r0, #59	; 0x3b
 801a708:	f000 fb38 	bl	801ad7c <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801a70c:	4b80      	ldr	r3, [pc, #512]	; (801a910 <SX1276SetRx+0x300>)
 801a70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a710:	2b08      	cmp	r3, #8
 801a712:	d900      	bls.n	801a716 <SX1276SetRx+0x106>
 801a714:	e075      	b.n	801a802 <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801a716:	2031      	movs	r0, #49	; 0x31
 801a718:	f000 fb41 	bl	801ad9e <SX1276Read>
 801a71c:	0003      	movs	r3, r0
 801a71e:	001a      	movs	r2, r3
 801a720:	237f      	movs	r3, #127	; 0x7f
 801a722:	4013      	ands	r3, r2
 801a724:	b2db      	uxtb	r3, r3
 801a726:	0019      	movs	r1, r3
 801a728:	2031      	movs	r0, #49	; 0x31
 801a72a:	f000 fb27 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801a72e:	2100      	movs	r1, #0
 801a730:	2030      	movs	r0, #48	; 0x30
 801a732:	f000 fb23 	bl	801ad7c <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801a736:	4b76      	ldr	r3, [pc, #472]	; (801a910 <SX1276SetRx+0x300>)
 801a738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a73a:	2b08      	cmp	r3, #8
 801a73c:	d86e      	bhi.n	801a81c <SX1276SetRx+0x20c>
 801a73e:	009a      	lsls	r2, r3, #2
 801a740:	4b74      	ldr	r3, [pc, #464]	; (801a914 <SX1276SetRx+0x304>)
 801a742:	18d3      	adds	r3, r2, r3
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801a748:	2148      	movs	r1, #72	; 0x48
 801a74a:	202f      	movs	r0, #47	; 0x2f
 801a74c:	f000 fb16 	bl	801ad7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801a750:	4b6f      	ldr	r3, [pc, #444]	; (801a910 <SX1276SetRx+0x300>)
 801a752:	689b      	ldr	r3, [r3, #8]
 801a754:	4a70      	ldr	r2, [pc, #448]	; (801a918 <SX1276SetRx+0x308>)
 801a756:	4694      	mov	ip, r2
 801a758:	4463      	add	r3, ip
 801a75a:	0018      	movs	r0, r3
 801a75c:	f7fe feb0 	bl	80194c0 <SX1276SetChannel>
                    break;
 801a760:	e05c      	b.n	801a81c <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a762:	2144      	movs	r1, #68	; 0x44
 801a764:	202f      	movs	r0, #47	; 0x2f
 801a766:	f000 fb09 	bl	801ad7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801a76a:	4b69      	ldr	r3, [pc, #420]	; (801a910 <SX1276SetRx+0x300>)
 801a76c:	689b      	ldr	r3, [r3, #8]
 801a76e:	4a6b      	ldr	r2, [pc, #428]	; (801a91c <SX1276SetRx+0x30c>)
 801a770:	4694      	mov	ip, r2
 801a772:	4463      	add	r3, ip
 801a774:	0018      	movs	r0, r3
 801a776:	f7fe fea3 	bl	80194c0 <SX1276SetChannel>
                    break;
 801a77a:	e04f      	b.n	801a81c <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a77c:	2144      	movs	r1, #68	; 0x44
 801a77e:	202f      	movs	r0, #47	; 0x2f
 801a780:	f000 fafc 	bl	801ad7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801a784:	4b62      	ldr	r3, [pc, #392]	; (801a910 <SX1276SetRx+0x300>)
 801a786:	689b      	ldr	r3, [r3, #8]
 801a788:	4a65      	ldr	r2, [pc, #404]	; (801a920 <SX1276SetRx+0x310>)
 801a78a:	4694      	mov	ip, r2
 801a78c:	4463      	add	r3, ip
 801a78e:	0018      	movs	r0, r3
 801a790:	f7fe fe96 	bl	80194c0 <SX1276SetChannel>
                    break;
 801a794:	e042      	b.n	801a81c <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a796:	2144      	movs	r1, #68	; 0x44
 801a798:	202f      	movs	r0, #47	; 0x2f
 801a79a:	f000 faef 	bl	801ad7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801a79e:	4b5c      	ldr	r3, [pc, #368]	; (801a910 <SX1276SetRx+0x300>)
 801a7a0:	689b      	ldr	r3, [r3, #8]
 801a7a2:	4a60      	ldr	r2, [pc, #384]	; (801a924 <SX1276SetRx+0x314>)
 801a7a4:	4694      	mov	ip, r2
 801a7a6:	4463      	add	r3, ip
 801a7a8:	0018      	movs	r0, r3
 801a7aa:	f7fe fe89 	bl	80194c0 <SX1276SetChannel>
                    break;
 801a7ae:	e035      	b.n	801a81c <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a7b0:	2144      	movs	r1, #68	; 0x44
 801a7b2:	202f      	movs	r0, #47	; 0x2f
 801a7b4:	f000 fae2 	bl	801ad7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801a7b8:	4b55      	ldr	r3, [pc, #340]	; (801a910 <SX1276SetRx+0x300>)
 801a7ba:	689b      	ldr	r3, [r3, #8]
 801a7bc:	4a5a      	ldr	r2, [pc, #360]	; (801a928 <SX1276SetRx+0x318>)
 801a7be:	4694      	mov	ip, r2
 801a7c0:	4463      	add	r3, ip
 801a7c2:	0018      	movs	r0, r3
 801a7c4:	f7fe fe7c 	bl	80194c0 <SX1276SetChannel>
                    break;
 801a7c8:	e028      	b.n	801a81c <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a7ca:	2144      	movs	r1, #68	; 0x44
 801a7cc:	202f      	movs	r0, #47	; 0x2f
 801a7ce:	f000 fad5 	bl	801ad7c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801a7d2:	4b4f      	ldr	r3, [pc, #316]	; (801a910 <SX1276SetRx+0x300>)
 801a7d4:	689b      	ldr	r3, [r3, #8]
 801a7d6:	4a55      	ldr	r2, [pc, #340]	; (801a92c <SX1276SetRx+0x31c>)
 801a7d8:	4694      	mov	ip, r2
 801a7da:	4463      	add	r3, ip
 801a7dc:	0018      	movs	r0, r3
 801a7de:	f7fe fe6f 	bl	80194c0 <SX1276SetChannel>
                    break;
 801a7e2:	e01b      	b.n	801a81c <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a7e4:	2140      	movs	r1, #64	; 0x40
 801a7e6:	202f      	movs	r0, #47	; 0x2f
 801a7e8:	f000 fac8 	bl	801ad7c <SX1276Write>
                    break;
 801a7ec:	e016      	b.n	801a81c <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a7ee:	2140      	movs	r1, #64	; 0x40
 801a7f0:	202f      	movs	r0, #47	; 0x2f
 801a7f2:	f000 fac3 	bl	801ad7c <SX1276Write>
                    break;
 801a7f6:	e011      	b.n	801a81c <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a7f8:	2140      	movs	r1, #64	; 0x40
 801a7fa:	202f      	movs	r0, #47	; 0x2f
 801a7fc:	f000 fabe 	bl	801ad7c <SX1276Write>
                    break;
 801a800:	e00c      	b.n	801a81c <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801a802:	2031      	movs	r0, #49	; 0x31
 801a804:	f000 facb 	bl	801ad9e <SX1276Read>
 801a808:	0003      	movs	r3, r0
 801a80a:	001a      	movs	r2, r3
 801a80c:	2380      	movs	r3, #128	; 0x80
 801a80e:	425b      	negs	r3, r3
 801a810:	4313      	orrs	r3, r2
 801a812:	b2db      	uxtb	r3, r3
 801a814:	0019      	movs	r1, r3
 801a816:	2031      	movs	r0, #49	; 0x31
 801a818:	f000 fab0 	bl	801ad7c <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801a81c:	230f      	movs	r3, #15
 801a81e:	18fb      	adds	r3, r7, r3
 801a820:	4a3b      	ldr	r2, [pc, #236]	; (801a910 <SX1276SetRx+0x300>)
 801a822:	2156      	movs	r1, #86	; 0x56
 801a824:	5c52      	ldrb	r2, [r2, r1]
 801a826:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a828:	4b39      	ldr	r3, [pc, #228]	; (801a910 <SX1276SetRx+0x300>)
 801a82a:	2253      	movs	r2, #83	; 0x53
 801a82c:	5c9b      	ldrb	r3, [r3, r2]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d010      	beq.n	801a854 <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801a832:	211d      	movs	r1, #29
 801a834:	2011      	movs	r0, #17
 801a836:	f000 faa1 	bl	801ad7c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801a83a:	2040      	movs	r0, #64	; 0x40
 801a83c:	f000 faaf 	bl	801ad9e <SX1276Read>
 801a840:	0003      	movs	r3, r0
 801a842:	001a      	movs	r2, r3
 801a844:	2333      	movs	r3, #51	; 0x33
 801a846:	4013      	ands	r3, r2
 801a848:	b2db      	uxtb	r3, r3
 801a84a:	0019      	movs	r1, r3
 801a84c:	2040      	movs	r0, #64	; 0x40
 801a84e:	f000 fa95 	bl	801ad7c <SX1276Write>
 801a852:	e00f      	b.n	801a874 <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801a854:	211f      	movs	r1, #31
 801a856:	2011      	movs	r0, #17
 801a858:	f000 fa90 	bl	801ad7c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801a85c:	2040      	movs	r0, #64	; 0x40
 801a85e:	f000 fa9e 	bl	801ad9e <SX1276Read>
 801a862:	0003      	movs	r3, r0
 801a864:	001a      	movs	r2, r3
 801a866:	233f      	movs	r3, #63	; 0x3f
 801a868:	4013      	ands	r3, r2
 801a86a:	b2db      	uxtb	r3, r3
 801a86c:	0019      	movs	r1, r3
 801a86e:	2040      	movs	r0, #64	; 0x40
 801a870:	f000 fa84 	bl	801ad7c <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801a874:	2100      	movs	r1, #0
 801a876:	200f      	movs	r0, #15
 801a878:	f000 fa80 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801a87c:	2100      	movs	r1, #0
 801a87e:	200d      	movs	r0, #13
 801a880:	f000 fa7c 	bl	801ad7c <SX1276Write>
        }
        break;
 801a884:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801a886:	2380      	movs	r3, #128	; 0x80
 801a888:	005a      	lsls	r2, r3, #1
 801a88a:	4b29      	ldr	r3, [pc, #164]	; (801a930 <SX1276SetRx+0x320>)
 801a88c:	2100      	movs	r1, #0
 801a88e:	0018      	movs	r0, r3
 801a890:	f003 fa87 	bl	801dda2 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801a894:	4b1e      	ldr	r3, [pc, #120]	; (801a910 <SX1276SetRx+0x300>)
 801a896:	2201      	movs	r2, #1
 801a898:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d009      	beq.n	801a8b4 <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a8a0:	687a      	ldr	r2, [r7, #4]
 801a8a2:	4b24      	ldr	r3, [pc, #144]	; (801a934 <SX1276SetRx+0x324>)
 801a8a4:	0011      	movs	r1, r2
 801a8a6:	0018      	movs	r0, r3
 801a8a8:	f002 f954 	bl	801cb54 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a8ac:	4b21      	ldr	r3, [pc, #132]	; (801a934 <SX1276SetRx+0x324>)
 801a8ae:	0018      	movs	r0, r3
 801a8b0:	f002 f860 	bl	801c974 <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801a8b4:	4b16      	ldr	r3, [pc, #88]	; (801a910 <SX1276SetRx+0x300>)
 801a8b6:	795b      	ldrb	r3, [r3, #5]
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d116      	bne.n	801a8ea <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801a8bc:	2005      	movs	r0, #5
 801a8be:	f000 f996 	bl	801abee <SX1276SetOpMode>

        if( rxContinuous == false )
 801a8c2:	230f      	movs	r3, #15
 801a8c4:	18fb      	adds	r3, r7, r3
 801a8c6:	781b      	ldrb	r3, [r3, #0]
 801a8c8:	2201      	movs	r2, #1
 801a8ca:	4053      	eors	r3, r2
 801a8cc:	b2db      	uxtb	r3, r3
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d017      	beq.n	801a902 <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801a8d2:	4b0f      	ldr	r3, [pc, #60]	; (801a910 <SX1276SetRx+0x300>)
 801a8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8d6:	4b18      	ldr	r3, [pc, #96]	; (801a938 <SX1276SetRx+0x328>)
 801a8d8:	0011      	movs	r1, r2
 801a8da:	0018      	movs	r0, r3
 801a8dc:	f002 f93a 	bl	801cb54 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 801a8e0:	4b15      	ldr	r3, [pc, #84]	; (801a938 <SX1276SetRx+0x328>)
 801a8e2:	0018      	movs	r0, r3
 801a8e4:	f002 f846 	bl	801c974 <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801a8e8:	e00b      	b.n	801a902 <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 801a8ea:	230f      	movs	r3, #15
 801a8ec:	18fb      	adds	r3, r7, r3
 801a8ee:	781b      	ldrb	r3, [r3, #0]
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d003      	beq.n	801a8fc <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801a8f4:	2005      	movs	r0, #5
 801a8f6:	f000 f97a 	bl	801abee <SX1276SetOpMode>
}
 801a8fa:	e002      	b.n	801a902 <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801a8fc:	2006      	movs	r0, #6
 801a8fe:	f000 f976 	bl	801abee <SX1276SetOpMode>
}
 801a902:	46c0      	nop			; (mov r8, r8)
 801a904:	46bd      	mov	sp, r7
 801a906:	b004      	add	sp, #16
 801a908:	bd80      	pop	{r7, pc}
 801a90a:	46c0      	nop			; (mov r8, r8)
 801a90c:	20001680 	.word	0x20001680
 801a910:	200016b0 	.word	0x200016b0
 801a914:	0801f200 	.word	0x0801f200
 801a918:	00001e82 	.word	0x00001e82
 801a91c:	000028b4 	.word	0x000028b4
 801a920:	00003d04 	.word	0x00003d04
 801a924:	0000515e 	.word	0x0000515e
 801a928:	00007a12 	.word	0x00007a12
 801a92c:	0000a2c6 	.word	0x0000a2c6
 801a930:	20000e14 	.word	0x20000e14
 801a934:	20001718 	.word	0x20001718
 801a938:	20001698 	.word	0x20001698

0801a93c <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 801a93c:	b580      	push	{r7, lr}
 801a93e:	b082      	sub	sp, #8
 801a940:	af00      	add	r7, sp, #0
 801a942:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 801a944:	4b38      	ldr	r3, [pc, #224]	; (801aa28 <SX1276SetTx+0xec>)
 801a946:	0018      	movs	r0, r3
 801a948:	f002 f88c 	bl	801ca64 <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a94c:	687a      	ldr	r2, [r7, #4]
 801a94e:	4b37      	ldr	r3, [pc, #220]	; (801aa2c <SX1276SetTx+0xf0>)
 801a950:	0011      	movs	r1, r2
 801a952:	0018      	movs	r0, r3
 801a954:	f002 f8fe 	bl	801cb54 <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 801a958:	4b35      	ldr	r3, [pc, #212]	; (801aa30 <SX1276SetTx+0xf4>)
 801a95a:	795b      	ldrb	r3, [r3, #5]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d002      	beq.n	801a966 <SX1276SetTx+0x2a>
 801a960:	2b01      	cmp	r3, #1
 801a962:	d024      	beq.n	801a9ae <SX1276SetTx+0x72>
 801a964:	e052      	b.n	801aa0c <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a966:	2040      	movs	r0, #64	; 0x40
 801a968:	f000 fa19 	bl	801ad9e <SX1276Read>
 801a96c:	0003      	movs	r3, r0
 801a96e:	001a      	movs	r2, r3
 801a970:	2303      	movs	r3, #3
 801a972:	4013      	ands	r3, r2
 801a974:	b2db      	uxtb	r3, r3
 801a976:	0019      	movs	r1, r3
 801a978:	2040      	movs	r0, #64	; 0x40
 801a97a:	f000 f9ff 	bl	801ad7c <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a97e:	2041      	movs	r0, #65	; 0x41
 801a980:	f000 fa0d 	bl	801ad9e <SX1276Read>
 801a984:	0003      	movs	r3, r0
 801a986:	001a      	movs	r2, r3
 801a988:	233e      	movs	r3, #62	; 0x3e
 801a98a:	4013      	ands	r3, r2
 801a98c:	b2db      	uxtb	r3, r3
 801a98e:	0019      	movs	r1, r3
 801a990:	2041      	movs	r0, #65	; 0x41
 801a992:	f000 f9f3 	bl	801ad7c <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a996:	2035      	movs	r0, #53	; 0x35
 801a998:	f000 fa01 	bl	801ad9e <SX1276Read>
 801a99c:	0003      	movs	r3, r0
 801a99e:	001a      	movs	r2, r3
 801a9a0:	233f      	movs	r3, #63	; 0x3f
 801a9a2:	4013      	ands	r3, r2
 801a9a4:	b2d9      	uxtb	r1, r3
 801a9a6:	4b22      	ldr	r3, [pc, #136]	; (801aa30 <SX1276SetTx+0xf4>)
 801a9a8:	223e      	movs	r2, #62	; 0x3e
 801a9aa:	5499      	strb	r1, [r3, r2]
        }
        break;
 801a9ac:	e02e      	b.n	801aa0c <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a9ae:	4b20      	ldr	r3, [pc, #128]	; (801aa30 <SX1276SetTx+0xf4>)
 801a9b0:	2253      	movs	r2, #83	; 0x53
 801a9b2:	5c9b      	ldrb	r3, [r3, r2]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d014      	beq.n	801a9e2 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a9b8:	21f5      	movs	r1, #245	; 0xf5
 801a9ba:	2011      	movs	r0, #17
 801a9bc:	f000 f9de 	bl	801ad7c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801a9c0:	2040      	movs	r0, #64	; 0x40
 801a9c2:	f000 f9ec 	bl	801ad9e <SX1276Read>
 801a9c6:	0003      	movs	r3, r0
 801a9c8:	b25b      	sxtb	r3, r3
 801a9ca:	2233      	movs	r2, #51	; 0x33
 801a9cc:	4013      	ands	r3, r2
 801a9ce:	b25b      	sxtb	r3, r3
 801a9d0:	2240      	movs	r2, #64	; 0x40
 801a9d2:	4313      	orrs	r3, r2
 801a9d4:	b25b      	sxtb	r3, r3
 801a9d6:	b2db      	uxtb	r3, r3
 801a9d8:	0019      	movs	r1, r3
 801a9da:	2040      	movs	r0, #64	; 0x40
 801a9dc:	f000 f9ce 	bl	801ad7c <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801a9e0:	e013      	b.n	801aa0a <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801a9e2:	21f7      	movs	r1, #247	; 0xf7
 801a9e4:	2011      	movs	r0, #17
 801a9e6:	f000 f9c9 	bl	801ad7c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801a9ea:	2040      	movs	r0, #64	; 0x40
 801a9ec:	f000 f9d7 	bl	801ad9e <SX1276Read>
 801a9f0:	0003      	movs	r3, r0
 801a9f2:	b25b      	sxtb	r3, r3
 801a9f4:	223f      	movs	r2, #63	; 0x3f
 801a9f6:	4013      	ands	r3, r2
 801a9f8:	b25b      	sxtb	r3, r3
 801a9fa:	2240      	movs	r2, #64	; 0x40
 801a9fc:	4313      	orrs	r3, r2
 801a9fe:	b25b      	sxtb	r3, r3
 801aa00:	b2db      	uxtb	r3, r3
 801aa02:	0019      	movs	r1, r3
 801aa04:	2040      	movs	r0, #64	; 0x40
 801aa06:	f000 f9b9 	bl	801ad7c <SX1276Write>
        break;
 801aa0a:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801aa0c:	4b08      	ldr	r3, [pc, #32]	; (801aa30 <SX1276SetTx+0xf4>)
 801aa0e:	2202      	movs	r2, #2
 801aa10:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801aa12:	4b06      	ldr	r3, [pc, #24]	; (801aa2c <SX1276SetTx+0xf0>)
 801aa14:	0018      	movs	r0, r3
 801aa16:	f001 ffad 	bl	801c974 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801aa1a:	2003      	movs	r0, #3
 801aa1c:	f000 f8e7 	bl	801abee <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 801aa20:	46c0      	nop			; (mov r8, r8)
 801aa22:	46bd      	mov	sp, r7
 801aa24:	b002      	add	sp, #8
 801aa26:	bd80      	pop	{r7, pc}
 801aa28:	20001718 	.word	0x20001718
 801aa2c:	20001680 	.word	0x20001680
 801aa30:	200016b0 	.word	0x200016b0

0801aa34 <SX1276StartCad>:

void SX1276StartCad( void )
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801aa38:	4b11      	ldr	r3, [pc, #68]	; (801aa80 <SX1276StartCad+0x4c>)
 801aa3a:	795b      	ldrb	r3, [r3, #5]
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d01a      	beq.n	801aa76 <SX1276StartCad+0x42>
 801aa40:	2b01      	cmp	r3, #1
 801aa42:	d000      	beq.n	801aa46 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801aa44:	e018      	b.n	801aa78 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801aa46:	21fa      	movs	r1, #250	; 0xfa
 801aa48:	2011      	movs	r0, #17
 801aa4a:	f000 f997 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801aa4e:	2040      	movs	r0, #64	; 0x40
 801aa50:	f000 f9a5 	bl	801ad9e <SX1276Read>
 801aa54:	0003      	movs	r3, r0
 801aa56:	001a      	movs	r2, r3
 801aa58:	2303      	movs	r3, #3
 801aa5a:	439a      	bics	r2, r3
 801aa5c:	0013      	movs	r3, r2
 801aa5e:	b2db      	uxtb	r3, r3
 801aa60:	0019      	movs	r1, r3
 801aa62:	2040      	movs	r0, #64	; 0x40
 801aa64:	f000 f98a 	bl	801ad7c <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801aa68:	4b05      	ldr	r3, [pc, #20]	; (801aa80 <SX1276StartCad+0x4c>)
 801aa6a:	2203      	movs	r2, #3
 801aa6c:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801aa6e:	2007      	movs	r0, #7
 801aa70:	f000 f8bd 	bl	801abee <SX1276SetOpMode>
        break;
 801aa74:	e000      	b.n	801aa78 <SX1276StartCad+0x44>
        break;
 801aa76:	46c0      	nop			; (mov r8, r8)
    }
}
 801aa78:	46c0      	nop			; (mov r8, r8)
 801aa7a:	46bd      	mov	sp, r7
 801aa7c:	bd80      	pop	{r7, pc}
 801aa7e:	46c0      	nop			; (mov r8, r8)
 801aa80:	200016b0 	.word	0x200016b0

0801aa84 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801aa84:	b580      	push	{r7, lr}
 801aa86:	b08e      	sub	sp, #56	; 0x38
 801aa88:	af0a      	add	r7, sp, #40	; 0x28
 801aa8a:	6078      	str	r0, [r7, #4]
 801aa8c:	0008      	movs	r0, r1
 801aa8e:	0011      	movs	r1, r2
 801aa90:	1cfb      	adds	r3, r7, #3
 801aa92:	1c02      	adds	r2, r0, #0
 801aa94:	701a      	strb	r2, [r3, #0]
 801aa96:	003b      	movs	r3, r7
 801aa98:	1c0a      	adds	r2, r1, #0
 801aa9a:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801aa9c:	003b      	movs	r3, r7
 801aa9e:	881a      	ldrh	r2, [r3, #0]
 801aaa0:	0013      	movs	r3, r2
 801aaa2:	015b      	lsls	r3, r3, #5
 801aaa4:	1a9b      	subs	r3, r3, r2
 801aaa6:	009b      	lsls	r3, r3, #2
 801aaa8:	189b      	adds	r3, r3, r2
 801aaaa:	00db      	lsls	r3, r3, #3
 801aaac:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	0018      	movs	r0, r3
 801aab2:	f7fe fd05 	bl	80194c0 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801aab6:	1cfb      	adds	r3, r7, #3
 801aab8:	2100      	movs	r1, #0
 801aaba:	5659      	ldrsb	r1, [r3, r1]
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	9308      	str	r3, [sp, #32]
 801aac0:	2300      	movs	r3, #0
 801aac2:	9307      	str	r3, [sp, #28]
 801aac4:	2300      	movs	r3, #0
 801aac6:	9306      	str	r3, [sp, #24]
 801aac8:	2300      	movs	r3, #0
 801aaca:	9305      	str	r3, [sp, #20]
 801aacc:	2300      	movs	r3, #0
 801aace:	9304      	str	r3, [sp, #16]
 801aad0:	2300      	movs	r3, #0
 801aad2:	9303      	str	r3, [sp, #12]
 801aad4:	2305      	movs	r3, #5
 801aad6:	9302      	str	r3, [sp, #8]
 801aad8:	2300      	movs	r3, #0
 801aada:	9301      	str	r3, [sp, #4]
 801aadc:	2396      	movs	r3, #150	; 0x96
 801aade:	015b      	lsls	r3, r3, #5
 801aae0:	9300      	str	r3, [sp, #0]
 801aae2:	2300      	movs	r3, #0
 801aae4:	2200      	movs	r2, #0
 801aae6:	2000      	movs	r0, #0
 801aae8:	f7ff f8d4 	bl	8019c94 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801aaec:	2031      	movs	r0, #49	; 0x31
 801aaee:	f000 f956 	bl	801ad9e <SX1276Read>
 801aaf2:	0003      	movs	r3, r0
 801aaf4:	001a      	movs	r2, r3
 801aaf6:	2340      	movs	r3, #64	; 0x40
 801aaf8:	439a      	bics	r2, r3
 801aafa:	0013      	movs	r3, r2
 801aafc:	b2db      	uxtb	r3, r3
 801aafe:	0019      	movs	r1, r3
 801ab00:	2031      	movs	r0, #49	; 0x31
 801ab02:	f000 f93b 	bl	801ad7c <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801ab06:	21f0      	movs	r1, #240	; 0xf0
 801ab08:	2040      	movs	r0, #64	; 0x40
 801ab0a:	f000 f937 	bl	801ad7c <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801ab0e:	21a0      	movs	r1, #160	; 0xa0
 801ab10:	2041      	movs	r0, #65	; 0x41
 801ab12:	f000 f933 	bl	801ad7c <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ab16:	68fa      	ldr	r2, [r7, #12]
 801ab18:	4b09      	ldr	r3, [pc, #36]	; (801ab40 <SX1276SetTxContinuousWave+0xbc>)
 801ab1a:	0011      	movs	r1, r2
 801ab1c:	0018      	movs	r0, r3
 801ab1e:	f002 f819 	bl	801cb54 <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801ab22:	4b08      	ldr	r3, [pc, #32]	; (801ab44 <SX1276SetTxContinuousWave+0xc0>)
 801ab24:	2202      	movs	r2, #2
 801ab26:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801ab28:	4b05      	ldr	r3, [pc, #20]	; (801ab40 <SX1276SetTxContinuousWave+0xbc>)
 801ab2a:	0018      	movs	r0, r3
 801ab2c:	f001 ff22 	bl	801c974 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801ab30:	2003      	movs	r0, #3
 801ab32:	f000 f85c 	bl	801abee <SX1276SetOpMode>
}
 801ab36:	46c0      	nop			; (mov r8, r8)
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	b004      	add	sp, #16
 801ab3c:	bd80      	pop	{r7, pc}
 801ab3e:	46c0      	nop			; (mov r8, r8)
 801ab40:	20001680 	.word	0x20001680
 801ab44:	200016b0 	.word	0x200016b0

0801ab48 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801ab48:	b580      	push	{r7, lr}
 801ab4a:	b084      	sub	sp, #16
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	0002      	movs	r2, r0
 801ab50:	1dfb      	adds	r3, r7, #7
 801ab52:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801ab54:	230e      	movs	r3, #14
 801ab56:	18fb      	adds	r3, r7, r3
 801ab58:	2200      	movs	r2, #0
 801ab5a:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801ab5c:	1dfb      	adds	r3, r7, #7
 801ab5e:	781b      	ldrb	r3, [r3, #0]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d002      	beq.n	801ab6a <SX1276ReadRssi+0x22>
 801ab64:	2b01      	cmp	r3, #1
 801ab66:	d00d      	beq.n	801ab84 <SX1276ReadRssi+0x3c>
 801ab68:	e027      	b.n	801abba <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801ab6a:	2011      	movs	r0, #17
 801ab6c:	f000 f917 	bl	801ad9e <SX1276Read>
 801ab70:	0003      	movs	r3, r0
 801ab72:	085b      	lsrs	r3, r3, #1
 801ab74:	b2db      	uxtb	r3, r3
 801ab76:	b29b      	uxth	r3, r3
 801ab78:	425b      	negs	r3, r3
 801ab7a:	b29a      	uxth	r2, r3
 801ab7c:	230e      	movs	r3, #14
 801ab7e:	18fb      	adds	r3, r7, r3
 801ab80:	801a      	strh	r2, [r3, #0]
        break;
 801ab82:	e020      	b.n	801abc6 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801ab84:	4b14      	ldr	r3, [pc, #80]	; (801abd8 <SX1276ReadRssi+0x90>)
 801ab86:	689b      	ldr	r3, [r3, #8]
 801ab88:	4a14      	ldr	r2, [pc, #80]	; (801abdc <SX1276ReadRssi+0x94>)
 801ab8a:	4293      	cmp	r3, r2
 801ab8c:	d90a      	bls.n	801aba4 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801ab8e:	201b      	movs	r0, #27
 801ab90:	f000 f905 	bl	801ad9e <SX1276Read>
 801ab94:	0003      	movs	r3, r0
 801ab96:	b29b      	uxth	r3, r3
 801ab98:	3b9d      	subs	r3, #157	; 0x9d
 801ab9a:	b29a      	uxth	r2, r3
 801ab9c:	230e      	movs	r3, #14
 801ab9e:	18fb      	adds	r3, r7, r3
 801aba0:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801aba2:	e010      	b.n	801abc6 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801aba4:	201b      	movs	r0, #27
 801aba6:	f000 f8fa 	bl	801ad9e <SX1276Read>
 801abaa:	0003      	movs	r3, r0
 801abac:	b29b      	uxth	r3, r3
 801abae:	3ba4      	subs	r3, #164	; 0xa4
 801abb0:	b29a      	uxth	r2, r3
 801abb2:	230e      	movs	r3, #14
 801abb4:	18fb      	adds	r3, r7, r3
 801abb6:	801a      	strh	r2, [r3, #0]
        break;
 801abb8:	e005      	b.n	801abc6 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801abba:	230e      	movs	r3, #14
 801abbc:	18fb      	adds	r3, r7, r3
 801abbe:	2201      	movs	r2, #1
 801abc0:	4252      	negs	r2, r2
 801abc2:	801a      	strh	r2, [r3, #0]
        break;
 801abc4:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801abc6:	230e      	movs	r3, #14
 801abc8:	18fb      	adds	r3, r7, r3
 801abca:	2200      	movs	r2, #0
 801abcc:	5e9b      	ldrsh	r3, [r3, r2]
}
 801abce:	0018      	movs	r0, r3
 801abd0:	46bd      	mov	sp, r7
 801abd2:	b004      	add	sp, #16
 801abd4:	bd80      	pop	{r7, pc}
 801abd6:	46c0      	nop			; (mov r8, r8)
 801abd8:	200016b0 	.word	0x200016b0
 801abdc:	1f4add40 	.word	0x1f4add40

0801abe0 <SX1276Reset>:

static void SX1276Reset( void )
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801abe4:	f7eb fa9c 	bl	8006120 <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801abe8:	46c0      	nop			; (mov r8, r8)
 801abea:	46bd      	mov	sp, r7
 801abec:	bd80      	pop	{r7, pc}

0801abee <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801abee:	b5b0      	push	{r4, r5, r7, lr}
 801abf0:	b084      	sub	sp, #16
 801abf2:	af00      	add	r7, sp, #0
 801abf4:	0002      	movs	r2, r0
 801abf6:	1dfb      	adds	r3, r7, #7
 801abf8:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801abfa:	1dfb      	adds	r3, r7, #7
 801abfc:	781b      	ldrb	r3, [r3, #0]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d118      	bne.n	801ac34 <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ac02:	2001      	movs	r0, #1
 801ac04:	f000 f8cb 	bl	801ad9e <SX1276Read>
 801ac08:	0003      	movs	r3, r0
 801ac0a:	b25b      	sxtb	r3, r3
 801ac0c:	2207      	movs	r2, #7
 801ac0e:	4393      	bics	r3, r2
 801ac10:	b25a      	sxtb	r2, r3
 801ac12:	1dfb      	adds	r3, r7, #7
 801ac14:	781b      	ldrb	r3, [r3, #0]
 801ac16:	b25b      	sxtb	r3, r3
 801ac18:	4313      	orrs	r3, r2
 801ac1a:	b25b      	sxtb	r3, r3
 801ac1c:	b2db      	uxtb	r3, r3
 801ac1e:	0019      	movs	r1, r3
 801ac20:	2001      	movs	r0, #1
 801ac22:	f000 f8ab 	bl	801ad7c <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801ac26:	2000      	movs	r0, #0
 801ac28:	f7eb fa1a 	bl	8006060 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801ac2c:	2000      	movs	r0, #0
 801ac2e:	f7eb f859 	bl	8005ce4 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801ac32:	e044      	b.n	801acbe <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801ac34:	1dfb      	adds	r3, r7, #7
 801ac36:	781b      	ldrb	r3, [r3, #0]
 801ac38:	2b05      	cmp	r3, #5
 801ac3a:	d118      	bne.n	801ac6e <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801ac3c:	2001      	movs	r0, #1
 801ac3e:	f7eb f851 	bl	8005ce4 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801ac42:	2001      	movs	r0, #1
 801ac44:	f7eb fa0c 	bl	8006060 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ac48:	2001      	movs	r0, #1
 801ac4a:	f000 f8a8 	bl	801ad9e <SX1276Read>
 801ac4e:	0003      	movs	r3, r0
 801ac50:	b25b      	sxtb	r3, r3
 801ac52:	2207      	movs	r2, #7
 801ac54:	4393      	bics	r3, r2
 801ac56:	b25a      	sxtb	r2, r3
 801ac58:	1dfb      	adds	r3, r7, #7
 801ac5a:	781b      	ldrb	r3, [r3, #0]
 801ac5c:	b25b      	sxtb	r3, r3
 801ac5e:	4313      	orrs	r3, r2
 801ac60:	b25b      	sxtb	r3, r3
 801ac62:	b2db      	uxtb	r3, r3
 801ac64:	0019      	movs	r1, r3
 801ac66:	2001      	movs	r0, #1
 801ac68:	f000 f888 	bl	801ad7c <SX1276Write>
}
 801ac6c:	e027      	b.n	801acbe <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801ac6e:	250f      	movs	r5, #15
 801ac70:	197c      	adds	r4, r7, r5
 801ac72:	2009      	movs	r0, #9
 801ac74:	f000 f893 	bl	801ad9e <SX1276Read>
 801ac78:	0003      	movs	r3, r0
 801ac7a:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801ac7c:	2001      	movs	r0, #1
 801ac7e:	f7eb f831 	bl	8005ce4 <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801ac82:	197b      	adds	r3, r7, r5
 801ac84:	781b      	ldrb	r3, [r3, #0]
 801ac86:	b25b      	sxtb	r3, r3
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	da03      	bge.n	801ac94 <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801ac8c:	2003      	movs	r0, #3
 801ac8e:	f7eb f9e7 	bl	8006060 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801ac92:	e002      	b.n	801ac9a <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801ac94:	2002      	movs	r0, #2
 801ac96:	f7eb f9e3 	bl	8006060 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ac9a:	2001      	movs	r0, #1
 801ac9c:	f000 f87f 	bl	801ad9e <SX1276Read>
 801aca0:	0003      	movs	r3, r0
 801aca2:	b25b      	sxtb	r3, r3
 801aca4:	2207      	movs	r2, #7
 801aca6:	4393      	bics	r3, r2
 801aca8:	b25a      	sxtb	r2, r3
 801acaa:	1dfb      	adds	r3, r7, #7
 801acac:	781b      	ldrb	r3, [r3, #0]
 801acae:	b25b      	sxtb	r3, r3
 801acb0:	4313      	orrs	r3, r2
 801acb2:	b25b      	sxtb	r3, r3
 801acb4:	b2db      	uxtb	r3, r3
 801acb6:	0019      	movs	r1, r3
 801acb8:	2001      	movs	r0, #1
 801acba:	f000 f85f 	bl	801ad7c <SX1276Write>
}
 801acbe:	46c0      	nop			; (mov r8, r8)
 801acc0:	46bd      	mov	sp, r7
 801acc2:	b004      	add	sp, #16
 801acc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801acc8 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801acc8:	b580      	push	{r7, lr}
 801acca:	b082      	sub	sp, #8
 801accc:	af00      	add	r7, sp, #0
 801acce:	0002      	movs	r2, r0
 801acd0:	1dfb      	adds	r3, r7, #7
 801acd2:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801acd4:	2001      	movs	r0, #1
 801acd6:	f000 f862 	bl	801ad9e <SX1276Read>
 801acda:	0003      	movs	r3, r0
 801acdc:	b25b      	sxtb	r3, r3
 801acde:	2b00      	cmp	r3, #0
 801ace0:	da03      	bge.n	801acea <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801ace2:	4b25      	ldr	r3, [pc, #148]	; (801ad78 <SX1276SetModem+0xb0>)
 801ace4:	2201      	movs	r2, #1
 801ace6:	715a      	strb	r2, [r3, #5]
 801ace8:	e002      	b.n	801acf0 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801acea:	4b23      	ldr	r3, [pc, #140]	; (801ad78 <SX1276SetModem+0xb0>)
 801acec:	2200      	movs	r2, #0
 801acee:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801acf0:	4b21      	ldr	r3, [pc, #132]	; (801ad78 <SX1276SetModem+0xb0>)
 801acf2:	795b      	ldrb	r3, [r3, #5]
 801acf4:	1dfa      	adds	r2, r7, #7
 801acf6:	7812      	ldrb	r2, [r2, #0]
 801acf8:	429a      	cmp	r2, r3
 801acfa:	d038      	beq.n	801ad6e <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801acfc:	4b1e      	ldr	r3, [pc, #120]	; (801ad78 <SX1276SetModem+0xb0>)
 801acfe:	1dfa      	adds	r2, r7, #7
 801ad00:	7812      	ldrb	r2, [r2, #0]
 801ad02:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801ad04:	4b1c      	ldr	r3, [pc, #112]	; (801ad78 <SX1276SetModem+0xb0>)
 801ad06:	795b      	ldrb	r3, [r3, #5]
 801ad08:	2b01      	cmp	r3, #1
 801ad0a:	d017      	beq.n	801ad3c <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801ad0c:	2000      	movs	r0, #0
 801ad0e:	f7ff ff6e 	bl	801abee <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801ad12:	2001      	movs	r0, #1
 801ad14:	f000 f843 	bl	801ad9e <SX1276Read>
 801ad18:	0003      	movs	r3, r0
 801ad1a:	001a      	movs	r2, r3
 801ad1c:	237f      	movs	r3, #127	; 0x7f
 801ad1e:	4013      	ands	r3, r2
 801ad20:	b2db      	uxtb	r3, r3
 801ad22:	0019      	movs	r1, r3
 801ad24:	2001      	movs	r0, #1
 801ad26:	f000 f829 	bl	801ad7c <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801ad2a:	2100      	movs	r1, #0
 801ad2c:	2040      	movs	r0, #64	; 0x40
 801ad2e:	f000 f825 	bl	801ad7c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801ad32:	2130      	movs	r1, #48	; 0x30
 801ad34:	2041      	movs	r0, #65	; 0x41
 801ad36:	f000 f821 	bl	801ad7c <SX1276Write>
        break;
 801ad3a:	e019      	b.n	801ad70 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801ad3c:	2000      	movs	r0, #0
 801ad3e:	f7ff ff56 	bl	801abee <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801ad42:	2001      	movs	r0, #1
 801ad44:	f000 f82b 	bl	801ad9e <SX1276Read>
 801ad48:	0003      	movs	r3, r0
 801ad4a:	001a      	movs	r2, r3
 801ad4c:	2380      	movs	r3, #128	; 0x80
 801ad4e:	425b      	negs	r3, r3
 801ad50:	4313      	orrs	r3, r2
 801ad52:	b2db      	uxtb	r3, r3
 801ad54:	0019      	movs	r1, r3
 801ad56:	2001      	movs	r0, #1
 801ad58:	f000 f810 	bl	801ad7c <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801ad5c:	2100      	movs	r1, #0
 801ad5e:	2040      	movs	r0, #64	; 0x40
 801ad60:	f000 f80c 	bl	801ad7c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801ad64:	2100      	movs	r1, #0
 801ad66:	2041      	movs	r0, #65	; 0x41
 801ad68:	f000 f808 	bl	801ad7c <SX1276Write>
        break;
 801ad6c:	e000      	b.n	801ad70 <SX1276SetModem+0xa8>
        return;
 801ad6e:	46c0      	nop			; (mov r8, r8)
    }
}
 801ad70:	46bd      	mov	sp, r7
 801ad72:	b002      	add	sp, #8
 801ad74:	bd80      	pop	{r7, pc}
 801ad76:	46c0      	nop			; (mov r8, r8)
 801ad78:	200016b0 	.word	0x200016b0

0801ad7c <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b082      	sub	sp, #8
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	6078      	str	r0, [r7, #4]
 801ad84:	000a      	movs	r2, r1
 801ad86:	1cfb      	adds	r3, r7, #3
 801ad88:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801ad8a:	1cf9      	adds	r1, r7, #3
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	2201      	movs	r2, #1
 801ad90:	0018      	movs	r0, r3
 801ad92:	f000 f815 	bl	801adc0 <SX1276WriteBuffer>
}
 801ad96:	46c0      	nop			; (mov r8, r8)
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	b002      	add	sp, #8
 801ad9c:	bd80      	pop	{r7, pc}

0801ad9e <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801ad9e:	b590      	push	{r4, r7, lr}
 801ada0:	b085      	sub	sp, #20
 801ada2:	af00      	add	r7, sp, #0
 801ada4:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801ada6:	240f      	movs	r4, #15
 801ada8:	1939      	adds	r1, r7, r4
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	2201      	movs	r2, #1
 801adae:	0018      	movs	r0, r3
 801adb0:	f000 f83a 	bl	801ae28 <SX1276ReadBuffer>
    return data;
 801adb4:	193b      	adds	r3, r7, r4
 801adb6:	781b      	ldrb	r3, [r3, #0]
}
 801adb8:	0018      	movs	r0, r3
 801adba:	46bd      	mov	sp, r7
 801adbc:	b005      	add	sp, #20
 801adbe:	bd90      	pop	{r4, r7, pc}

0801adc0 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801adc0:	b590      	push	{r4, r7, lr}
 801adc2:	b087      	sub	sp, #28
 801adc4:	af00      	add	r7, sp, #0
 801adc6:	60f8      	str	r0, [r7, #12]
 801adc8:	60b9      	str	r1, [r7, #8]
 801adca:	1dfb      	adds	r3, r7, #7
 801adcc:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801adce:	2000      	movs	r0, #0
 801add0:	f7eb f9f8 	bl	80061c4 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	b29b      	uxth	r3, r3
 801add8:	2280      	movs	r2, #128	; 0x80
 801adda:	4313      	orrs	r3, r2
 801addc:	b29b      	uxth	r3, r3
 801adde:	0018      	movs	r0, r3
 801ade0:	f7eb f9dd 	bl	800619e <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801ade4:	2317      	movs	r3, #23
 801ade6:	18fb      	adds	r3, r7, r3
 801ade8:	2200      	movs	r2, #0
 801adea:	701a      	strb	r2, [r3, #0]
 801adec:	e00e      	b.n	801ae0c <SX1276WriteBuffer+0x4c>
    {
        Sx_Board_SendRecv( buffer[i] );
 801adee:	2417      	movs	r4, #23
 801adf0:	193b      	adds	r3, r7, r4
 801adf2:	781b      	ldrb	r3, [r3, #0]
 801adf4:	68ba      	ldr	r2, [r7, #8]
 801adf6:	18d3      	adds	r3, r2, r3
 801adf8:	781b      	ldrb	r3, [r3, #0]
 801adfa:	b29b      	uxth	r3, r3
 801adfc:	0018      	movs	r0, r3
 801adfe:	f7eb f9ce 	bl	800619e <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801ae02:	193b      	adds	r3, r7, r4
 801ae04:	781a      	ldrb	r2, [r3, #0]
 801ae06:	193b      	adds	r3, r7, r4
 801ae08:	3201      	adds	r2, #1
 801ae0a:	701a      	strb	r2, [r3, #0]
 801ae0c:	2317      	movs	r3, #23
 801ae0e:	18fa      	adds	r2, r7, r3
 801ae10:	1dfb      	adds	r3, r7, #7
 801ae12:	7812      	ldrb	r2, [r2, #0]
 801ae14:	781b      	ldrb	r3, [r3, #0]
 801ae16:	429a      	cmp	r2, r3
 801ae18:	d3e9      	bcc.n	801adee <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801ae1a:	2001      	movs	r0, #1
 801ae1c:	f7eb f9d2 	bl	80061c4 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801ae20:	46c0      	nop			; (mov r8, r8)
 801ae22:	46bd      	mov	sp, r7
 801ae24:	b007      	add	sp, #28
 801ae26:	bd90      	pop	{r4, r7, pc}

0801ae28 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b086      	sub	sp, #24
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	60f8      	str	r0, [r7, #12]
 801ae30:	60b9      	str	r1, [r7, #8]
 801ae32:	1dfb      	adds	r3, r7, #7
 801ae34:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801ae36:	2000      	movs	r0, #0
 801ae38:	f7eb f9c4 	bl	80061c4 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	b29b      	uxth	r3, r3
 801ae40:	227f      	movs	r2, #127	; 0x7f
 801ae42:	4013      	ands	r3, r2
 801ae44:	b29b      	uxth	r3, r3
 801ae46:	0018      	movs	r0, r3
 801ae48:	f7eb f9a9 	bl	800619e <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801ae4c:	2317      	movs	r3, #23
 801ae4e:	18fb      	adds	r3, r7, r3
 801ae50:	2200      	movs	r2, #0
 801ae52:	701a      	strb	r2, [r3, #0]
 801ae54:	e010      	b.n	801ae78 <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801ae56:	2000      	movs	r0, #0
 801ae58:	f7eb f9a1 	bl	800619e <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801ae5c:	0003      	movs	r3, r0
 801ae5e:	0019      	movs	r1, r3
 801ae60:	2017      	movs	r0, #23
 801ae62:	183b      	adds	r3, r7, r0
 801ae64:	781b      	ldrb	r3, [r3, #0]
 801ae66:	68ba      	ldr	r2, [r7, #8]
 801ae68:	18d3      	adds	r3, r2, r3
 801ae6a:	b2ca      	uxtb	r2, r1
 801ae6c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801ae6e:	183b      	adds	r3, r7, r0
 801ae70:	781a      	ldrb	r2, [r3, #0]
 801ae72:	183b      	adds	r3, r7, r0
 801ae74:	3201      	adds	r2, #1
 801ae76:	701a      	strb	r2, [r3, #0]
 801ae78:	2317      	movs	r3, #23
 801ae7a:	18fa      	adds	r2, r7, r3
 801ae7c:	1dfb      	adds	r3, r7, #7
 801ae7e:	7812      	ldrb	r2, [r2, #0]
 801ae80:	781b      	ldrb	r3, [r3, #0]
 801ae82:	429a      	cmp	r2, r3
 801ae84:	d3e7      	bcc.n	801ae56 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801ae86:	2001      	movs	r0, #1
 801ae88:	f7eb f99c 	bl	80061c4 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801ae8c:	46c0      	nop			; (mov r8, r8)
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	b006      	add	sp, #24
 801ae92:	bd80      	pop	{r7, pc}

0801ae94 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b082      	sub	sp, #8
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	6078      	str	r0, [r7, #4]
 801ae9c:	000a      	movs	r2, r1
 801ae9e:	1cfb      	adds	r3, r7, #3
 801aea0:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801aea2:	1cfb      	adds	r3, r7, #3
 801aea4:	781a      	ldrb	r2, [r3, #0]
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	0019      	movs	r1, r3
 801aeaa:	2000      	movs	r0, #0
 801aeac:	f7ff ff88 	bl	801adc0 <SX1276WriteBuffer>
}
 801aeb0:	46c0      	nop			; (mov r8, r8)
 801aeb2:	46bd      	mov	sp, r7
 801aeb4:	b002      	add	sp, #8
 801aeb6:	bd80      	pop	{r7, pc}

0801aeb8 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b082      	sub	sp, #8
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	6078      	str	r0, [r7, #4]
 801aec0:	000a      	movs	r2, r1
 801aec2:	1cfb      	adds	r3, r7, #3
 801aec4:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801aec6:	1cfb      	adds	r3, r7, #3
 801aec8:	781a      	ldrb	r2, [r3, #0]
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	0019      	movs	r1, r3
 801aece:	2000      	movs	r0, #0
 801aed0:	f7ff ffaa 	bl	801ae28 <SX1276ReadBuffer>
}
 801aed4:	46c0      	nop			; (mov r8, r8)
 801aed6:	46bd      	mov	sp, r7
 801aed8:	b002      	add	sp, #8
 801aeda:	bd80      	pop	{r7, pc}

0801aedc <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801aedc:	b580      	push	{r7, lr}
 801aede:	b082      	sub	sp, #8
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	0002      	movs	r2, r0
 801aee4:	1dfb      	adds	r3, r7, #7
 801aee6:	701a      	strb	r2, [r3, #0]
 801aee8:	1dbb      	adds	r3, r7, #6
 801aeea:	1c0a      	adds	r2, r1, #0
 801aeec:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801aeee:	1dfb      	adds	r3, r7, #7
 801aef0:	781b      	ldrb	r3, [r3, #0]
 801aef2:	0018      	movs	r0, r3
 801aef4:	f7ff fee8 	bl	801acc8 <SX1276SetModem>

    switch( modem )
 801aef8:	1dfb      	adds	r3, r7, #7
 801aefa:	781b      	ldrb	r3, [r3, #0]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d002      	beq.n	801af06 <SX1276SetMaxPayloadLength+0x2a>
 801af00:	2b01      	cmp	r3, #1
 801af02:	d00f      	beq.n	801af24 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801af04:	e016      	b.n	801af34 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801af06:	4b0d      	ldr	r3, [pc, #52]	; (801af3c <SX1276SetMaxPayloadLength+0x60>)
 801af08:	2222      	movs	r2, #34	; 0x22
 801af0a:	5c9b      	ldrb	r3, [r3, r2]
 801af0c:	2201      	movs	r2, #1
 801af0e:	4053      	eors	r3, r2
 801af10:	b2db      	uxtb	r3, r3
 801af12:	2b00      	cmp	r3, #0
 801af14:	d00d      	beq.n	801af32 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801af16:	1dbb      	adds	r3, r7, #6
 801af18:	781b      	ldrb	r3, [r3, #0]
 801af1a:	0019      	movs	r1, r3
 801af1c:	2032      	movs	r0, #50	; 0x32
 801af1e:	f7ff ff2d 	bl	801ad7c <SX1276Write>
        break;
 801af22:	e006      	b.n	801af32 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801af24:	1dbb      	adds	r3, r7, #6
 801af26:	781b      	ldrb	r3, [r3, #0]
 801af28:	0019      	movs	r1, r3
 801af2a:	2023      	movs	r0, #35	; 0x23
 801af2c:	f7ff ff26 	bl	801ad7c <SX1276Write>
        break;
 801af30:	e000      	b.n	801af34 <SX1276SetMaxPayloadLength+0x58>
        break;
 801af32:	46c0      	nop			; (mov r8, r8)
}
 801af34:	46c0      	nop			; (mov r8, r8)
 801af36:	46bd      	mov	sp, r7
 801af38:	b002      	add	sp, #8
 801af3a:	bd80      	pop	{r7, pc}
 801af3c:	200016b0 	.word	0x200016b0

0801af40 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801af40:	b580      	push	{r7, lr}
 801af42:	b082      	sub	sp, #8
 801af44:	af00      	add	r7, sp, #0
 801af46:	0002      	movs	r2, r0
 801af48:	1dfb      	adds	r3, r7, #7
 801af4a:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801af4c:	2001      	movs	r0, #1
 801af4e:	f7ff febb 	bl	801acc8 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801af52:	4b0b      	ldr	r3, [pc, #44]	; (801af80 <SX1276SetPublicNetwork+0x40>)
 801af54:	1dfa      	adds	r2, r7, #7
 801af56:	215c      	movs	r1, #92	; 0x5c
 801af58:	7812      	ldrb	r2, [r2, #0]
 801af5a:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801af5c:	1dfb      	adds	r3, r7, #7
 801af5e:	781b      	ldrb	r3, [r3, #0]
 801af60:	2b00      	cmp	r3, #0
 801af62:	d004      	beq.n	801af6e <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801af64:	2134      	movs	r1, #52	; 0x34
 801af66:	2039      	movs	r0, #57	; 0x39
 801af68:	f7ff ff08 	bl	801ad7c <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801af6c:	e003      	b.n	801af76 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801af6e:	2112      	movs	r1, #18
 801af70:	2039      	movs	r0, #57	; 0x39
 801af72:	f7ff ff03 	bl	801ad7c <SX1276Write>
}
 801af76:	46c0      	nop			; (mov r8, r8)
 801af78:	46bd      	mov	sp, r7
 801af7a:	b002      	add	sp, #8
 801af7c:	bd80      	pop	{r7, pc}
 801af7e:	46c0      	nop			; (mov r8, r8)
 801af80:	200016b0 	.word	0x200016b0

0801af84 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801af84:	b580      	push	{r7, lr}
 801af86:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801af88:	f7ea fea6 	bl	8005cd8 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801af8c:	0003      	movs	r3, r0
 801af8e:	3302      	adds	r3, #2
}
 801af90:	0018      	movs	r0, r3
 801af92:	46bd      	mov	sp, r7
 801af94:	bd80      	pop	{r7, pc}
	...

0801af98 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b084      	sub	sp, #16
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801afa0:	230f      	movs	r3, #15
 801afa2:	18fb      	adds	r3, r7, r3
 801afa4:	2200      	movs	r2, #0
 801afa6:	701a      	strb	r2, [r3, #0]
 801afa8:	e01f      	b.n	801afea <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801afaa:	210f      	movs	r1, #15
 801afac:	187b      	adds	r3, r7, r1
 801afae:	781a      	ldrb	r2, [r3, #0]
 801afb0:	4b13      	ldr	r3, [pc, #76]	; (801b000 <GetFskBandwidthRegValue+0x68>)
 801afb2:	00d2      	lsls	r2, r2, #3
 801afb4:	58d3      	ldr	r3, [r2, r3]
 801afb6:	687a      	ldr	r2, [r7, #4]
 801afb8:	429a      	cmp	r2, r3
 801afba:	d310      	bcc.n	801afde <GetFskBandwidthRegValue+0x46>
 801afbc:	187b      	adds	r3, r7, r1
 801afbe:	781b      	ldrb	r3, [r3, #0]
 801afc0:	1c5a      	adds	r2, r3, #1
 801afc2:	4b0f      	ldr	r3, [pc, #60]	; (801b000 <GetFskBandwidthRegValue+0x68>)
 801afc4:	00d2      	lsls	r2, r2, #3
 801afc6:	58d3      	ldr	r3, [r2, r3]
 801afc8:	687a      	ldr	r2, [r7, #4]
 801afca:	429a      	cmp	r2, r3
 801afcc:	d207      	bcs.n	801afde <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801afce:	187b      	adds	r3, r7, r1
 801afd0:	781b      	ldrb	r3, [r3, #0]
 801afd2:	4a0b      	ldr	r2, [pc, #44]	; (801b000 <GetFskBandwidthRegValue+0x68>)
 801afd4:	00db      	lsls	r3, r3, #3
 801afd6:	18d3      	adds	r3, r2, r3
 801afd8:	3304      	adds	r3, #4
 801afda:	781b      	ldrb	r3, [r3, #0]
 801afdc:	e00b      	b.n	801aff6 <GetFskBandwidthRegValue+0x5e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801afde:	210f      	movs	r1, #15
 801afe0:	187b      	adds	r3, r7, r1
 801afe2:	781a      	ldrb	r2, [r3, #0]
 801afe4:	187b      	adds	r3, r7, r1
 801afe6:	3201      	adds	r2, #1
 801afe8:	701a      	strb	r2, [r3, #0]
 801afea:	230f      	movs	r3, #15
 801afec:	18fb      	adds	r3, r7, r3
 801afee:	781b      	ldrb	r3, [r3, #0]
 801aff0:	2b14      	cmp	r3, #20
 801aff2:	d9da      	bls.n	801afaa <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801aff4:	e7fe      	b.n	801aff4 <GetFskBandwidthRegValue+0x5c>
}
 801aff6:	0018      	movs	r0, r3
 801aff8:	46bd      	mov	sp, r7
 801affa:	b004      	add	sp, #16
 801affc:	bd80      	pop	{r7, pc}
 801affe:	46c0      	nop			; (mov r8, r8)
 801b000:	0801f150 	.word	0x0801f150

0801b004 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b084      	sub	sp, #16
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801b00c:	2300      	movs	r3, #0
 801b00e:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	2b03      	cmp	r3, #3
 801b014:	d018      	beq.n	801b048 <SX1276GetLoRaBandwidthInHz+0x44>
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	2b03      	cmp	r3, #3
 801b01a:	d818      	bhi.n	801b04e <SX1276GetLoRaBandwidthInHz+0x4a>
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	2b02      	cmp	r3, #2
 801b020:	d00f      	beq.n	801b042 <SX1276GetLoRaBandwidthInHz+0x3e>
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	2b02      	cmp	r3, #2
 801b026:	d812      	bhi.n	801b04e <SX1276GetLoRaBandwidthInHz+0x4a>
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d003      	beq.n	801b036 <SX1276GetLoRaBandwidthInHz+0x32>
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	2b01      	cmp	r3, #1
 801b032:	d003      	beq.n	801b03c <SX1276GetLoRaBandwidthInHz+0x38>
 801b034:	e00b      	b.n	801b04e <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801b036:	4b08      	ldr	r3, [pc, #32]	; (801b058 <SX1276GetLoRaBandwidthInHz+0x54>)
 801b038:	60fb      	str	r3, [r7, #12]
        break;
 801b03a:	e008      	b.n	801b04e <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801b03c:	4b07      	ldr	r3, [pc, #28]	; (801b05c <SX1276GetLoRaBandwidthInHz+0x58>)
 801b03e:	60fb      	str	r3, [r7, #12]
        break;
 801b040:	e005      	b.n	801b04e <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801b042:	4b07      	ldr	r3, [pc, #28]	; (801b060 <SX1276GetLoRaBandwidthInHz+0x5c>)
 801b044:	60fb      	str	r3, [r7, #12]
        break;
 801b046:	e002      	b.n	801b04e <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801b048:	4b06      	ldr	r3, [pc, #24]	; (801b064 <SX1276GetLoRaBandwidthInHz+0x60>)
 801b04a:	60fb      	str	r3, [r7, #12]
            break;
 801b04c:	46c0      	nop			; (mov r8, r8)
    }

    return bandwidthInHz;
 801b04e:	68fb      	ldr	r3, [r7, #12]
}
 801b050:	0018      	movs	r0, r3
 801b052:	46bd      	mov	sp, r7
 801b054:	b004      	add	sp, #16
 801b056:	bd80      	pop	{r7, pc}
 801b058:	0001e848 	.word	0x0001e848
 801b05c:	0003d090 	.word	0x0003d090
 801b060:	0007a120 	.word	0x0007a120
 801b064:	0000f424 	.word	0x0000f424

0801b068 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801b068:	b5b0      	push	{r4, r5, r7, lr}
 801b06a:	b084      	sub	sp, #16
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	0005      	movs	r5, r0
 801b070:	000c      	movs	r4, r1
 801b072:	0010      	movs	r0, r2
 801b074:	0019      	movs	r1, r3
 801b076:	1dbb      	adds	r3, r7, #6
 801b078:	1c2a      	adds	r2, r5, #0
 801b07a:	801a      	strh	r2, [r3, #0]
 801b07c:	1d7b      	adds	r3, r7, #5
 801b07e:	1c22      	adds	r2, r4, #0
 801b080:	701a      	strb	r2, [r3, #0]
 801b082:	1d3b      	adds	r3, r7, #4
 801b084:	1c02      	adds	r2, r0, #0
 801b086:	701a      	strb	r2, [r3, #0]
 801b088:	1cfb      	adds	r3, r7, #3
 801b08a:	1c0a      	adds	r2, r1, #0
 801b08c:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801b08e:	230f      	movs	r3, #15
 801b090:	18fb      	adds	r3, r7, r3
 801b092:	2203      	movs	r2, #3
 801b094:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801b096:	1dbb      	adds	r3, r7, #6
 801b098:	881b      	ldrh	r3, [r3, #0]
 801b09a:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b09c:	1d7b      	adds	r3, r7, #5
 801b09e:	781b      	ldrb	r3, [r3, #0]
 801b0a0:	2101      	movs	r1, #1
 801b0a2:	404b      	eors	r3, r1
 801b0a4:	b2db      	uxtb	r3, r3
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d001      	beq.n	801b0ae <SX1276GetGfskTimeOnAirNumerator+0x46>
 801b0aa:	2308      	movs	r3, #8
 801b0ac:	e000      	b.n	801b0b0 <SX1276GetGfskTimeOnAirNumerator+0x48>
 801b0ae:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801b0b0:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801b0b2:	230f      	movs	r3, #15
 801b0b4:	18fb      	adds	r3, r7, r3
 801b0b6:	781b      	ldrb	r3, [r3, #0]
 801b0b8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b0ba:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801b0bc:	1d3b      	adds	r3, r7, #4
 801b0be:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801b0c0:	1cfb      	adds	r3, r7, #3
 801b0c2:	781b      	ldrb	r3, [r3, #0]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d001      	beq.n	801b0cc <SX1276GetGfskTimeOnAirNumerator+0x64>
 801b0c8:	2302      	movs	r3, #2
 801b0ca:	e000      	b.n	801b0ce <SX1276GetGfskTimeOnAirNumerator+0x66>
 801b0cc:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801b0ce:	185b      	adds	r3, r3, r1
               ) << 3 
 801b0d0:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801b0d2:	18d3      	adds	r3, r2, r3
             );
}
 801b0d4:	0018      	movs	r0, r3
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	b004      	add	sp, #16
 801b0da:	bdb0      	pop	{r4, r5, r7, pc}

0801b0dc <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b08a      	sub	sp, #40	; 0x28
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	60f8      	str	r0, [r7, #12]
 801b0e4:	60b9      	str	r1, [r7, #8]
 801b0e6:	0019      	movs	r1, r3
 801b0e8:	1dfb      	adds	r3, r7, #7
 801b0ea:	701a      	strb	r2, [r3, #0]
 801b0ec:	1d3b      	adds	r3, r7, #4
 801b0ee:	1c0a      	adds	r2, r1, #0
 801b0f0:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801b0f2:	1dfb      	adds	r3, r7, #7
 801b0f4:	781b      	ldrb	r3, [r3, #0]
 801b0f6:	3304      	adds	r3, #4
 801b0f8:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801b0fa:	2327      	movs	r3, #39	; 0x27
 801b0fc:	18fb      	adds	r3, r7, r3
 801b0fe:	2200      	movs	r2, #0
 801b100:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801b102:	68bb      	ldr	r3, [r7, #8]
 801b104:	2b05      	cmp	r3, #5
 801b106:	d002      	beq.n	801b10e <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801b108:	68bb      	ldr	r3, [r7, #8]
 801b10a:	2b06      	cmp	r3, #6
 801b10c:	d106      	bne.n	801b11c <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801b10e:	1d3b      	adds	r3, r7, #4
 801b110:	881b      	ldrh	r3, [r3, #0]
 801b112:	2b0b      	cmp	r3, #11
 801b114:	d802      	bhi.n	801b11c <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801b116:	1d3b      	adds	r3, r7, #4
 801b118:	220c      	movs	r2, #12
 801b11a:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d105      	bne.n	801b12e <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801b122:	68bb      	ldr	r3, [r7, #8]
 801b124:	2b0b      	cmp	r3, #11
 801b126:	d008      	beq.n	801b13a <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b128:	68bb      	ldr	r3, [r7, #8]
 801b12a:	2b0c      	cmp	r3, #12
 801b12c:	d005      	beq.n	801b13a <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	2b01      	cmp	r3, #1
 801b132:	d106      	bne.n	801b142 <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801b134:	68bb      	ldr	r3, [r7, #8]
 801b136:	2b0c      	cmp	r3, #12
 801b138:	d103      	bne.n	801b142 <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801b13a:	2327      	movs	r3, #39	; 0x27
 801b13c:	18fb      	adds	r3, r7, r3
 801b13e:	2201      	movs	r2, #1
 801b140:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b142:	2334      	movs	r3, #52	; 0x34
 801b144:	18fb      	adds	r3, r7, r3
 801b146:	781b      	ldrb	r3, [r3, #0]
 801b148:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801b14a:	2338      	movs	r3, #56	; 0x38
 801b14c:	18fb      	adds	r3, r7, r3
 801b14e:	781b      	ldrb	r3, [r3, #0]
 801b150:	2b00      	cmp	r3, #0
 801b152:	d001      	beq.n	801b158 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801b154:	2310      	movs	r3, #16
 801b156:	e000      	b.n	801b15a <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801b158:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b15a:	189b      	adds	r3, r3, r2
 801b15c:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801b15e:	68bb      	ldr	r3, [r7, #8]
 801b160:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801b162:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801b164:	2330      	movs	r3, #48	; 0x30
 801b166:	18fb      	adds	r3, r7, r3
 801b168:	781b      	ldrb	r3, [r3, #0]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d001      	beq.n	801b172 <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801b16e:	2300      	movs	r3, #0
 801b170:	e000      	b.n	801b174 <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801b172:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801b174:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b176:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801b178:	68bb      	ldr	r3, [r7, #8]
 801b17a:	2b06      	cmp	r3, #6
 801b17c:	d803      	bhi.n	801b186 <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801b17e:	68bb      	ldr	r3, [r7, #8]
 801b180:	009b      	lsls	r3, r3, #2
 801b182:	623b      	str	r3, [r7, #32]
 801b184:	e00f      	b.n	801b1a6 <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801b186:	69fb      	ldr	r3, [r7, #28]
 801b188:	3308      	adds	r3, #8
 801b18a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801b18c:	2327      	movs	r3, #39	; 0x27
 801b18e:	18fb      	adds	r3, r7, r3
 801b190:	781b      	ldrb	r3, [r3, #0]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d004      	beq.n	801b1a0 <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801b196:	68bb      	ldr	r3, [r7, #8]
 801b198:	3b02      	subs	r3, #2
 801b19a:	009b      	lsls	r3, r3, #2
 801b19c:	623b      	str	r3, [r7, #32]
 801b19e:	e002      	b.n	801b1a6 <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801b1a0:	68bb      	ldr	r3, [r7, #8]
 801b1a2:	009b      	lsls	r3, r3, #2
 801b1a4:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801b1a6:	69fb      	ldr	r3, [r7, #28]
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	da01      	bge.n	801b1b0 <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801b1ac:	2300      	movs	r3, #0
 801b1ae:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801b1b0:	69fa      	ldr	r2, [r7, #28]
 801b1b2:	6a3b      	ldr	r3, [r7, #32]
 801b1b4:	18d3      	adds	r3, r2, r3
 801b1b6:	3b01      	subs	r3, #1
 801b1b8:	6a39      	ldr	r1, [r7, #32]
 801b1ba:	0018      	movs	r0, r3
 801b1bc:	f7e5 f836 	bl	800022c <__divsi3>
 801b1c0:	0003      	movs	r3, r0
 801b1c2:	001a      	movs	r2, r3
 801b1c4:	697b      	ldr	r3, [r7, #20]
 801b1c6:	435a      	muls	r2, r3
 801b1c8:	1d3b      	adds	r3, r7, #4
 801b1ca:	881b      	ldrh	r3, [r3, #0]
 801b1cc:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801b1ce:	330c      	adds	r3, #12
 801b1d0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801b1d2:	68bb      	ldr	r3, [r7, #8]
 801b1d4:	2b06      	cmp	r3, #6
 801b1d6:	d802      	bhi.n	801b1de <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801b1d8:	69bb      	ldr	r3, [r7, #24]
 801b1da:	3302      	adds	r3, #2
 801b1dc:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801b1de:	69bb      	ldr	r3, [r7, #24]
 801b1e0:	009b      	lsls	r3, r3, #2
 801b1e2:	1c5a      	adds	r2, r3, #1
 801b1e4:	68bb      	ldr	r3, [r7, #8]
 801b1e6:	3b02      	subs	r3, #2
 801b1e8:	409a      	lsls	r2, r3
 801b1ea:	0013      	movs	r3, r2
}
 801b1ec:	0018      	movs	r0, r3
 801b1ee:	46bd      	mov	sp, r7
 801b1f0:	b00a      	add	sp, #40	; 0x28
 801b1f2:	bd80      	pop	{r7, pc}

0801b1f4 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801b1f4:	b590      	push	{r4, r7, lr}
 801b1f6:	b085      	sub	sp, #20
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801b1fc:	4b4f      	ldr	r3, [pc, #316]	; (801b33c <SX1276OnTimeoutIrq+0x148>)
 801b1fe:	791b      	ldrb	r3, [r3, #4]
 801b200:	2b01      	cmp	r3, #1
 801b202:	d002      	beq.n	801b20a <SX1276OnTimeoutIrq+0x16>
 801b204:	2b02      	cmp	r3, #2
 801b206:	d041      	beq.n	801b28c <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801b208:	e094      	b.n	801b334 <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801b20a:	4b4c      	ldr	r3, [pc, #304]	; (801b33c <SX1276OnTimeoutIrq+0x148>)
 801b20c:	795b      	ldrb	r3, [r3, #5]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d12e      	bne.n	801b270 <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b212:	4b4a      	ldr	r3, [pc, #296]	; (801b33c <SX1276OnTimeoutIrq+0x148>)
 801b214:	2230      	movs	r2, #48	; 0x30
 801b216:	2100      	movs	r1, #0
 801b218:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b21a:	4b48      	ldr	r3, [pc, #288]	; (801b33c <SX1276OnTimeoutIrq+0x148>)
 801b21c:	2231      	movs	r2, #49	; 0x31
 801b21e:	2100      	movs	r1, #0
 801b220:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b222:	4b46      	ldr	r3, [pc, #280]	; (801b33c <SX1276OnTimeoutIrq+0x148>)
 801b224:	2200      	movs	r2, #0
 801b226:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801b228:	4b44      	ldr	r3, [pc, #272]	; (801b33c <SX1276OnTimeoutIrq+0x148>)
 801b22a:	2200      	movs	r2, #0
 801b22c:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b22e:	210b      	movs	r1, #11
 801b230:	203e      	movs	r0, #62	; 0x3e
 801b232:	f7ff fda3 	bl	801ad7c <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b236:	2110      	movs	r1, #16
 801b238:	203f      	movs	r0, #63	; 0x3f
 801b23a:	f7ff fd9f 	bl	801ad7c <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801b23e:	4b3f      	ldr	r3, [pc, #252]	; (801b33c <SX1276OnTimeoutIrq+0x148>)
 801b240:	2226      	movs	r2, #38	; 0x26
 801b242:	5c9b      	ldrb	r3, [r3, r2]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d00c      	beq.n	801b262 <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b248:	200d      	movs	r0, #13
 801b24a:	f7ff fda8 	bl	801ad9e <SX1276Read>
 801b24e:	0003      	movs	r3, r0
 801b250:	001a      	movs	r2, r3
 801b252:	2340      	movs	r3, #64	; 0x40
 801b254:	4313      	orrs	r3, r2
 801b256:	b2db      	uxtb	r3, r3
 801b258:	0019      	movs	r1, r3
 801b25a:	200d      	movs	r0, #13
 801b25c:	f7ff fd8e 	bl	801ad7c <SX1276Write>
 801b260:	e006      	b.n	801b270 <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801b262:	4b36      	ldr	r3, [pc, #216]	; (801b33c <SX1276OnTimeoutIrq+0x148>)
 801b264:	2200      	movs	r2, #0
 801b266:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801b268:	4b35      	ldr	r3, [pc, #212]	; (801b340 <SX1276OnTimeoutIrq+0x14c>)
 801b26a:	0018      	movs	r0, r3
 801b26c:	f001 fbfa 	bl	801ca64 <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b270:	4b34      	ldr	r3, [pc, #208]	; (801b344 <SX1276OnTimeoutIrq+0x150>)
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d05a      	beq.n	801b32e <SX1276OnTimeoutIrq+0x13a>
 801b278:	4b32      	ldr	r3, [pc, #200]	; (801b344 <SX1276OnTimeoutIrq+0x150>)
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	68db      	ldr	r3, [r3, #12]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d055      	beq.n	801b32e <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801b282:	4b30      	ldr	r3, [pc, #192]	; (801b344 <SX1276OnTimeoutIrq+0x150>)
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	68db      	ldr	r3, [r3, #12]
 801b288:	4798      	blx	r3
        break;
 801b28a:	e050      	b.n	801b32e <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801b28c:	f7ff fca8 	bl	801abe0 <SX1276Reset>
        RxChainCalibration( );
 801b290:	f7fe f9ee 	bl	8019670 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b294:	2000      	movs	r0, #0
 801b296:	f7ff fcaa 	bl	801abee <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b29a:	230f      	movs	r3, #15
 801b29c:	18fb      	adds	r3, r7, r3
 801b29e:	2200      	movs	r2, #0
 801b2a0:	701a      	strb	r2, [r3, #0]
 801b2a2:	e025      	b.n	801b2f0 <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801b2a4:	240f      	movs	r4, #15
 801b2a6:	193b      	adds	r3, r7, r4
 801b2a8:	781a      	ldrb	r2, [r3, #0]
 801b2aa:	4927      	ldr	r1, [pc, #156]	; (801b348 <SX1276OnTimeoutIrq+0x154>)
 801b2ac:	0013      	movs	r3, r2
 801b2ae:	005b      	lsls	r3, r3, #1
 801b2b0:	189b      	adds	r3, r3, r2
 801b2b2:	5c5b      	ldrb	r3, [r3, r1]
 801b2b4:	0018      	movs	r0, r3
 801b2b6:	f7ff fd07 	bl	801acc8 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801b2ba:	193b      	adds	r3, r7, r4
 801b2bc:	781a      	ldrb	r2, [r3, #0]
 801b2be:	4922      	ldr	r1, [pc, #136]	; (801b348 <SX1276OnTimeoutIrq+0x154>)
 801b2c0:	0013      	movs	r3, r2
 801b2c2:	005b      	lsls	r3, r3, #1
 801b2c4:	189b      	adds	r3, r3, r2
 801b2c6:	18cb      	adds	r3, r1, r3
 801b2c8:	3301      	adds	r3, #1
 801b2ca:	781b      	ldrb	r3, [r3, #0]
 801b2cc:	0018      	movs	r0, r3
 801b2ce:	193b      	adds	r3, r7, r4
 801b2d0:	781a      	ldrb	r2, [r3, #0]
 801b2d2:	491d      	ldr	r1, [pc, #116]	; (801b348 <SX1276OnTimeoutIrq+0x154>)
 801b2d4:	0013      	movs	r3, r2
 801b2d6:	005b      	lsls	r3, r3, #1
 801b2d8:	189b      	adds	r3, r3, r2
 801b2da:	18cb      	adds	r3, r1, r3
 801b2dc:	3302      	adds	r3, #2
 801b2de:	781b      	ldrb	r3, [r3, #0]
 801b2e0:	0019      	movs	r1, r3
 801b2e2:	f7ff fd4b 	bl	801ad7c <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b2e6:	193b      	adds	r3, r7, r4
 801b2e8:	781a      	ldrb	r2, [r3, #0]
 801b2ea:	193b      	adds	r3, r7, r4
 801b2ec:	3201      	adds	r2, #1
 801b2ee:	701a      	strb	r2, [r3, #0]
 801b2f0:	230f      	movs	r3, #15
 801b2f2:	18fb      	adds	r3, r7, r3
 801b2f4:	781b      	ldrb	r3, [r3, #0]
 801b2f6:	2b0f      	cmp	r3, #15
 801b2f8:	d9d4      	bls.n	801b2a4 <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801b2fa:	2000      	movs	r0, #0
 801b2fc:	f7ff fce4 	bl	801acc8 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801b300:	4b0e      	ldr	r3, [pc, #56]	; (801b33c <SX1276OnTimeoutIrq+0x148>)
 801b302:	225c      	movs	r2, #92	; 0x5c
 801b304:	5c9b      	ldrb	r3, [r3, r2]
 801b306:	0018      	movs	r0, r3
 801b308:	f7ff fe1a 	bl	801af40 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801b30c:	4b0b      	ldr	r3, [pc, #44]	; (801b33c <SX1276OnTimeoutIrq+0x148>)
 801b30e:	2200      	movs	r2, #0
 801b310:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b312:	4b0c      	ldr	r3, [pc, #48]	; (801b344 <SX1276OnTimeoutIrq+0x150>)
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d00b      	beq.n	801b332 <SX1276OnTimeoutIrq+0x13e>
 801b31a:	4b0a      	ldr	r3, [pc, #40]	; (801b344 <SX1276OnTimeoutIrq+0x150>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	685b      	ldr	r3, [r3, #4]
 801b320:	2b00      	cmp	r3, #0
 801b322:	d006      	beq.n	801b332 <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801b324:	4b07      	ldr	r3, [pc, #28]	; (801b344 <SX1276OnTimeoutIrq+0x150>)
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	685b      	ldr	r3, [r3, #4]
 801b32a:	4798      	blx	r3
        break;
 801b32c:	e001      	b.n	801b332 <SX1276OnTimeoutIrq+0x13e>
        break;
 801b32e:	46c0      	nop			; (mov r8, r8)
 801b330:	e000      	b.n	801b334 <SX1276OnTimeoutIrq+0x140>
        break;
 801b332:	46c0      	nop			; (mov r8, r8)
    }
}
 801b334:	46c0      	nop			; (mov r8, r8)
 801b336:	46bd      	mov	sp, r7
 801b338:	b005      	add	sp, #20
 801b33a:	bd90      	pop	{r4, r7, pc}
 801b33c:	200016b0 	.word	0x200016b0
 801b340:	20001698 	.word	0x20001698
 801b344:	20000e10 	.word	0x20000e10
 801b348:	0801f120 	.word	0x0801f120

0801b34c <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801b34c:	b590      	push	{r4, r7, lr}
 801b34e:	b083      	sub	sp, #12
 801b350:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801b352:	1d7b      	adds	r3, r7, #5
 801b354:	2200      	movs	r2, #0
 801b356:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801b358:	4bc3      	ldr	r3, [pc, #780]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b35a:	791b      	ldrb	r3, [r3, #4]
 801b35c:	2b01      	cmp	r3, #1
 801b35e:	d003      	beq.n	801b368 <SX1276OnDio0Irq+0x1c>
 801b360:	2b02      	cmp	r3, #2
 801b362:	d100      	bne.n	801b366 <SX1276OnDio0Irq+0x1a>
 801b364:	e1e2      	b.n	801b72c <SX1276OnDio0Irq+0x3e0>
                }
                break;
            }
            break;
        default:
            break;
 801b366:	e1ff      	b.n	801b768 <SX1276OnDio0Irq+0x41c>
            switch( SX1276.Settings.Modem )
 801b368:	4bbf      	ldr	r3, [pc, #764]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b36a:	795b      	ldrb	r3, [r3, #5]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d003      	beq.n	801b378 <SX1276OnDio0Irq+0x2c>
 801b370:	2b01      	cmp	r3, #1
 801b372:	d100      	bne.n	801b376 <SX1276OnDio0Irq+0x2a>
 801b374:	e0e2      	b.n	801b53c <SX1276OnDio0Irq+0x1f0>
                break;
 801b376:	e1d8      	b.n	801b72a <SX1276OnDio0Irq+0x3de>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801b378:	4bbb      	ldr	r3, [pc, #748]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b37a:	2224      	movs	r2, #36	; 0x24
 801b37c:	5c9b      	ldrb	r3, [r3, r2]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d052      	beq.n	801b428 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801b382:	203f      	movs	r0, #63	; 0x3f
 801b384:	f7ff fd0b 	bl	801ad9e <SX1276Read>
 801b388:	0003      	movs	r3, r0
 801b38a:	001a      	movs	r2, r3
 801b38c:	1d7b      	adds	r3, r7, #5
 801b38e:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801b390:	1d7b      	adds	r3, r7, #5
 801b392:	781b      	ldrb	r3, [r3, #0]
 801b394:	b2db      	uxtb	r3, r3
 801b396:	001a      	movs	r2, r3
 801b398:	2302      	movs	r3, #2
 801b39a:	4013      	ands	r3, r2
 801b39c:	2b02      	cmp	r3, #2
 801b39e:	d043      	beq.n	801b428 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b3a0:	210b      	movs	r1, #11
 801b3a2:	203e      	movs	r0, #62	; 0x3e
 801b3a4:	f7ff fcea 	bl	801ad7c <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b3a8:	2110      	movs	r1, #16
 801b3aa:	203f      	movs	r0, #63	; 0x3f
 801b3ac:	f7ff fce6 	bl	801ad7c <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801b3b0:	4bae      	ldr	r3, [pc, #696]	; (801b66c <SX1276OnDio0Irq+0x320>)
 801b3b2:	0018      	movs	r0, r3
 801b3b4:	f001 fb56 	bl	801ca64 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801b3b8:	4bab      	ldr	r3, [pc, #684]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b3ba:	2226      	movs	r2, #38	; 0x26
 801b3bc:	5c9b      	ldrb	r3, [r3, r2]
 801b3be:	2201      	movs	r2, #1
 801b3c0:	4053      	eors	r3, r2
 801b3c2:	b2db      	uxtb	r3, r3
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d007      	beq.n	801b3d8 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801b3c8:	4ba9      	ldr	r3, [pc, #676]	; (801b670 <SX1276OnDio0Irq+0x324>)
 801b3ca:	0018      	movs	r0, r3
 801b3cc:	f001 fb4a 	bl	801ca64 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801b3d0:	4ba5      	ldr	r3, [pc, #660]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	711a      	strb	r2, [r3, #4]
 801b3d6:	e00b      	b.n	801b3f0 <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b3d8:	200d      	movs	r0, #13
 801b3da:	f7ff fce0 	bl	801ad9e <SX1276Read>
 801b3de:	0003      	movs	r3, r0
 801b3e0:	001a      	movs	r2, r3
 801b3e2:	2340      	movs	r3, #64	; 0x40
 801b3e4:	4313      	orrs	r3, r2
 801b3e6:	b2db      	uxtb	r3, r3
 801b3e8:	0019      	movs	r1, r3
 801b3ea:	200d      	movs	r0, #13
 801b3ec:	f7ff fcc6 	bl	801ad7c <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b3f0:	4ba0      	ldr	r3, [pc, #640]	; (801b674 <SX1276OnDio0Irq+0x328>)
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d008      	beq.n	801b40a <SX1276OnDio0Irq+0xbe>
 801b3f8:	4b9e      	ldr	r3, [pc, #632]	; (801b674 <SX1276OnDio0Irq+0x328>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	691b      	ldr	r3, [r3, #16]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d003      	beq.n	801b40a <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801b402:	4b9c      	ldr	r3, [pc, #624]	; (801b674 <SX1276OnDio0Irq+0x328>)
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	691b      	ldr	r3, [r3, #16]
 801b408:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b40a:	4b97      	ldr	r3, [pc, #604]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b40c:	2230      	movs	r2, #48	; 0x30
 801b40e:	2100      	movs	r1, #0
 801b410:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b412:	4b95      	ldr	r3, [pc, #596]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b414:	2231      	movs	r2, #49	; 0x31
 801b416:	2100      	movs	r1, #0
 801b418:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b41a:	4b93      	ldr	r3, [pc, #588]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b41c:	2200      	movs	r2, #0
 801b41e:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801b420:	4b91      	ldr	r3, [pc, #580]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b422:	2200      	movs	r2, #0
 801b424:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801b426:	e180      	b.n	801b72a <SX1276OnDio0Irq+0x3de>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b428:	4b8f      	ldr	r3, [pc, #572]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b42a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d12d      	bne.n	801b48c <SX1276OnDio0Irq+0x140>
 801b430:	4b8d      	ldr	r3, [pc, #564]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b432:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b434:	2b00      	cmp	r3, #0
 801b436:	d129      	bne.n	801b48c <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b438:	4b8b      	ldr	r3, [pc, #556]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b43a:	2222      	movs	r2, #34	; 0x22
 801b43c:	5c9b      	ldrb	r3, [r3, r2]
 801b43e:	2201      	movs	r2, #1
 801b440:	4053      	eors	r3, r2
 801b442:	b2db      	uxtb	r3, r3
 801b444:	2b00      	cmp	r3, #0
 801b446:	d005      	beq.n	801b454 <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b448:	4b8b      	ldr	r3, [pc, #556]	; (801b678 <SX1276OnDio0Irq+0x32c>)
 801b44a:	2101      	movs	r1, #1
 801b44c:	0018      	movs	r0, r3
 801b44e:	f7ff fd33 	bl	801aeb8 <SX1276ReadFifo>
 801b452:	e006      	b.n	801b462 <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b454:	2032      	movs	r0, #50	; 0x32
 801b456:	f7ff fca2 	bl	801ad9e <SX1276Read>
 801b45a:	0003      	movs	r3, r0
 801b45c:	b29a      	uxth	r2, r3
 801b45e:	4b82      	ldr	r3, [pc, #520]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b460:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b462:	4b81      	ldr	r3, [pc, #516]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b464:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b466:	001a      	movs	r2, r3
 801b468:	4b84      	ldr	r3, [pc, #528]	; (801b67c <SX1276OnDio0Irq+0x330>)
 801b46a:	18d0      	adds	r0, r2, r3
 801b46c:	4b7e      	ldr	r3, [pc, #504]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b46e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b470:	b2da      	uxtb	r2, r3
 801b472:	4b7d      	ldr	r3, [pc, #500]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b474:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b476:	b2db      	uxtb	r3, r3
 801b478:	1ad3      	subs	r3, r2, r3
 801b47a:	b2db      	uxtb	r3, r3
 801b47c:	0019      	movs	r1, r3
 801b47e:	f7ff fd1b 	bl	801aeb8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b482:	4b79      	ldr	r3, [pc, #484]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b484:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b486:	4b78      	ldr	r3, [pc, #480]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b488:	879a      	strh	r2, [r3, #60]	; 0x3c
 801b48a:	e013      	b.n	801b4b4 <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b48c:	4b76      	ldr	r3, [pc, #472]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b48e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b490:	001a      	movs	r2, r3
 801b492:	4b7a      	ldr	r3, [pc, #488]	; (801b67c <SX1276OnDio0Irq+0x330>)
 801b494:	18d0      	adds	r0, r2, r3
 801b496:	4b74      	ldr	r3, [pc, #464]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b498:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b49a:	b2da      	uxtb	r2, r3
 801b49c:	4b72      	ldr	r3, [pc, #456]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b49e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b4a0:	b2db      	uxtb	r3, r3
 801b4a2:	1ad3      	subs	r3, r2, r3
 801b4a4:	b2db      	uxtb	r3, r3
 801b4a6:	0019      	movs	r1, r3
 801b4a8:	f7ff fd06 	bl	801aeb8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b4ac:	4b6e      	ldr	r3, [pc, #440]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b4ae:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b4b0:	4b6d      	ldr	r3, [pc, #436]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b4b2:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801b4b4:	4b6d      	ldr	r3, [pc, #436]	; (801b66c <SX1276OnDio0Irq+0x320>)
 801b4b6:	0018      	movs	r0, r3
 801b4b8:	f001 fad4 	bl	801ca64 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801b4bc:	4b6a      	ldr	r3, [pc, #424]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b4be:	2226      	movs	r2, #38	; 0x26
 801b4c0:	5c9b      	ldrb	r3, [r3, r2]
 801b4c2:	2201      	movs	r2, #1
 801b4c4:	4053      	eors	r3, r2
 801b4c6:	b2db      	uxtb	r3, r3
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d007      	beq.n	801b4dc <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801b4cc:	4b66      	ldr	r3, [pc, #408]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b4ce:	2200      	movs	r2, #0
 801b4d0:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801b4d2:	4b67      	ldr	r3, [pc, #412]	; (801b670 <SX1276OnDio0Irq+0x324>)
 801b4d4:	0018      	movs	r0, r3
 801b4d6:	f001 fac5 	bl	801ca64 <UTIL_TIMER_Stop>
 801b4da:	e00b      	b.n	801b4f4 <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b4dc:	200d      	movs	r0, #13
 801b4de:	f7ff fc5e 	bl	801ad9e <SX1276Read>
 801b4e2:	0003      	movs	r3, r0
 801b4e4:	001a      	movs	r2, r3
 801b4e6:	2340      	movs	r3, #64	; 0x40
 801b4e8:	4313      	orrs	r3, r2
 801b4ea:	b2db      	uxtb	r3, r3
 801b4ec:	0019      	movs	r1, r3
 801b4ee:	200d      	movs	r0, #13
 801b4f0:	f7ff fc44 	bl	801ad7c <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b4f4:	4b5f      	ldr	r3, [pc, #380]	; (801b674 <SX1276OnDio0Irq+0x328>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d010      	beq.n	801b51e <SX1276OnDio0Irq+0x1d2>
 801b4fc:	4b5d      	ldr	r3, [pc, #372]	; (801b674 <SX1276OnDio0Irq+0x328>)
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	689b      	ldr	r3, [r3, #8]
 801b502:	2b00      	cmp	r3, #0
 801b504:	d00b      	beq.n	801b51e <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801b506:	4b5b      	ldr	r3, [pc, #364]	; (801b674 <SX1276OnDio0Irq+0x328>)
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	689c      	ldr	r4, [r3, #8]
 801b50c:	4b56      	ldr	r3, [pc, #344]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b50e:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801b510:	4b55      	ldr	r3, [pc, #340]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b512:	2232      	movs	r2, #50	; 0x32
 801b514:	569b      	ldrsb	r3, [r3, r2]
 801b516:	b21a      	sxth	r2, r3
 801b518:	4858      	ldr	r0, [pc, #352]	; (801b67c <SX1276OnDio0Irq+0x330>)
 801b51a:	2300      	movs	r3, #0
 801b51c:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b51e:	4b52      	ldr	r3, [pc, #328]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b520:	2230      	movs	r2, #48	; 0x30
 801b522:	2100      	movs	r1, #0
 801b524:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b526:	4b50      	ldr	r3, [pc, #320]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b528:	2231      	movs	r2, #49	; 0x31
 801b52a:	2100      	movs	r1, #0
 801b52c:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b52e:	4b4e      	ldr	r3, [pc, #312]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b530:	2200      	movs	r2, #0
 801b532:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801b534:	4b4c      	ldr	r3, [pc, #304]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b536:	2200      	movs	r2, #0
 801b538:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801b53a:	e0f6      	b.n	801b72a <SX1276OnDio0Irq+0x3de>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801b53c:	2140      	movs	r1, #64	; 0x40
 801b53e:	2012      	movs	r0, #18
 801b540:	f7ff fc1c 	bl	801ad7c <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801b544:	2012      	movs	r0, #18
 801b546:	f7ff fc2a 	bl	801ad9e <SX1276Read>
 801b54a:	0003      	movs	r3, r0
 801b54c:	001a      	movs	r2, r3
 801b54e:	1d7b      	adds	r3, r7, #5
 801b550:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801b552:	1d7b      	adds	r3, r7, #5
 801b554:	781b      	ldrb	r3, [r3, #0]
 801b556:	b2db      	uxtb	r3, r3
 801b558:	001a      	movs	r2, r3
 801b55a:	2320      	movs	r3, #32
 801b55c:	4013      	ands	r3, r2
 801b55e:	2b20      	cmp	r3, #32
 801b560:	d122      	bne.n	801b5a8 <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801b562:	2120      	movs	r1, #32
 801b564:	2012      	movs	r0, #18
 801b566:	f7ff fc09 	bl	801ad7c <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801b56a:	4b3f      	ldr	r3, [pc, #252]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b56c:	2256      	movs	r2, #86	; 0x56
 801b56e:	5c9b      	ldrb	r3, [r3, r2]
 801b570:	2201      	movs	r2, #1
 801b572:	4053      	eors	r3, r2
 801b574:	b2db      	uxtb	r3, r3
 801b576:	2b00      	cmp	r3, #0
 801b578:	d002      	beq.n	801b580 <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801b57a:	4b3b      	ldr	r3, [pc, #236]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b57c:	2200      	movs	r2, #0
 801b57e:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801b580:	4b3a      	ldr	r3, [pc, #232]	; (801b66c <SX1276OnDio0Irq+0x320>)
 801b582:	0018      	movs	r0, r3
 801b584:	f001 fa6e 	bl	801ca64 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b588:	4b3a      	ldr	r3, [pc, #232]	; (801b674 <SX1276OnDio0Irq+0x328>)
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d100      	bne.n	801b592 <SX1276OnDio0Irq+0x246>
 801b590:	e0c8      	b.n	801b724 <SX1276OnDio0Irq+0x3d8>
 801b592:	4b38      	ldr	r3, [pc, #224]	; (801b674 <SX1276OnDio0Irq+0x328>)
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	691b      	ldr	r3, [r3, #16]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d100      	bne.n	801b59e <SX1276OnDio0Irq+0x252>
 801b59c:	e0c2      	b.n	801b724 <SX1276OnDio0Irq+0x3d8>
                            RadioEvents->RxError( );
 801b59e:	4b35      	ldr	r3, [pc, #212]	; (801b674 <SX1276OnDio0Irq+0x328>)
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	691b      	ldr	r3, [r3, #16]
 801b5a4:	4798      	blx	r3
                        break;
 801b5a6:	e0bd      	b.n	801b724 <SX1276OnDio0Irq+0x3d8>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801b5a8:	2019      	movs	r0, #25
 801b5aa:	f7ff fbf8 	bl	801ad9e <SX1276Read>
 801b5ae:	0003      	movs	r3, r0
 801b5b0:	b25b      	sxtb	r3, r3
 801b5b2:	3302      	adds	r3, #2
 801b5b4:	109b      	asrs	r3, r3, #2
 801b5b6:	b259      	sxtb	r1, r3
 801b5b8:	4b2b      	ldr	r3, [pc, #172]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b5ba:	2260      	movs	r2, #96	; 0x60
 801b5bc:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801b5be:	201a      	movs	r0, #26
 801b5c0:	f7ff fbed 	bl	801ad9e <SX1276Read>
 801b5c4:	0003      	movs	r3, r0
 801b5c6:	001a      	movs	r2, r3
 801b5c8:	1dbb      	adds	r3, r7, #6
 801b5ca:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801b5cc:	4b26      	ldr	r3, [pc, #152]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b5ce:	2260      	movs	r2, #96	; 0x60
 801b5d0:	569b      	ldrsb	r3, [r3, r2]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	da32      	bge.n	801b63c <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b5d6:	4b24      	ldr	r3, [pc, #144]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b5d8:	689b      	ldr	r3, [r3, #8]
 801b5da:	4a29      	ldr	r2, [pc, #164]	; (801b680 <SX1276OnDio0Irq+0x334>)
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	d916      	bls.n	801b60e <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b5e0:	1dbb      	adds	r3, r7, #6
 801b5e2:	2200      	movs	r2, #0
 801b5e4:	5e9b      	ldrsh	r3, [r3, r2]
 801b5e6:	111b      	asrs	r3, r3, #4
 801b5e8:	b21b      	sxth	r3, r3
 801b5ea:	b29a      	uxth	r2, r3
 801b5ec:	1dbb      	adds	r3, r7, #6
 801b5ee:	881b      	ldrh	r3, [r3, #0]
 801b5f0:	18d3      	adds	r3, r2, r3
 801b5f2:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b5f4:	4b1c      	ldr	r3, [pc, #112]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b5f6:	2160      	movs	r1, #96	; 0x60
 801b5f8:	565b      	ldrsb	r3, [r3, r1]
 801b5fa:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b5fc:	18d3      	adds	r3, r2, r3
 801b5fe:	b29b      	uxth	r3, r3
 801b600:	3b9d      	subs	r3, #157	; 0x9d
 801b602:	b29b      	uxth	r3, r3
 801b604:	b219      	sxth	r1, r3
 801b606:	4b18      	ldr	r3, [pc, #96]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b608:	2262      	movs	r2, #98	; 0x62
 801b60a:	5299      	strh	r1, [r3, r2]
 801b60c:	e04a      	b.n	801b6a4 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b60e:	1dbb      	adds	r3, r7, #6
 801b610:	2200      	movs	r2, #0
 801b612:	5e9b      	ldrsh	r3, [r3, r2]
 801b614:	111b      	asrs	r3, r3, #4
 801b616:	b21b      	sxth	r3, r3
 801b618:	b29a      	uxth	r2, r3
 801b61a:	1dbb      	adds	r3, r7, #6
 801b61c:	881b      	ldrh	r3, [r3, #0]
 801b61e:	18d3      	adds	r3, r2, r3
 801b620:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b622:	4b11      	ldr	r3, [pc, #68]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b624:	2160      	movs	r1, #96	; 0x60
 801b626:	565b      	ldrsb	r3, [r3, r1]
 801b628:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b62a:	18d3      	adds	r3, r2, r3
 801b62c:	b29b      	uxth	r3, r3
 801b62e:	3ba4      	subs	r3, #164	; 0xa4
 801b630:	b29b      	uxth	r3, r3
 801b632:	b219      	sxth	r1, r3
 801b634:	4b0c      	ldr	r3, [pc, #48]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b636:	2262      	movs	r2, #98	; 0x62
 801b638:	5299      	strh	r1, [r3, r2]
 801b63a:	e033      	b.n	801b6a4 <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b63c:	4b0a      	ldr	r3, [pc, #40]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b63e:	689b      	ldr	r3, [r3, #8]
 801b640:	4a0f      	ldr	r2, [pc, #60]	; (801b680 <SX1276OnDio0Irq+0x334>)
 801b642:	4293      	cmp	r3, r2
 801b644:	d91e      	bls.n	801b684 <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801b646:	1dbb      	adds	r3, r7, #6
 801b648:	2200      	movs	r2, #0
 801b64a:	5e9b      	ldrsh	r3, [r3, r2]
 801b64c:	111b      	asrs	r3, r3, #4
 801b64e:	b21b      	sxth	r3, r3
 801b650:	b29a      	uxth	r2, r3
 801b652:	1dbb      	adds	r3, r7, #6
 801b654:	881b      	ldrh	r3, [r3, #0]
 801b656:	18d3      	adds	r3, r2, r3
 801b658:	b29b      	uxth	r3, r3
 801b65a:	3b9d      	subs	r3, #157	; 0x9d
 801b65c:	b29b      	uxth	r3, r3
 801b65e:	b219      	sxth	r1, r3
 801b660:	4b01      	ldr	r3, [pc, #4]	; (801b668 <SX1276OnDio0Irq+0x31c>)
 801b662:	2262      	movs	r2, #98	; 0x62
 801b664:	5299      	strh	r1, [r3, r2]
 801b666:	e01d      	b.n	801b6a4 <SX1276OnDio0Irq+0x358>
 801b668:	200016b0 	.word	0x200016b0
 801b66c:	20001718 	.word	0x20001718
 801b670:	20001698 	.word	0x20001698
 801b674:	20000e10 	.word	0x20000e10
 801b678:	200016ea 	.word	0x200016ea
 801b67c:	20000e14 	.word	0x20000e14
 801b680:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801b684:	1dbb      	adds	r3, r7, #6
 801b686:	2200      	movs	r2, #0
 801b688:	5e9b      	ldrsh	r3, [r3, r2]
 801b68a:	111b      	asrs	r3, r3, #4
 801b68c:	b21b      	sxth	r3, r3
 801b68e:	b29a      	uxth	r2, r3
 801b690:	1dbb      	adds	r3, r7, #6
 801b692:	881b      	ldrh	r3, [r3, #0]
 801b694:	18d3      	adds	r3, r2, r3
 801b696:	b29b      	uxth	r3, r3
 801b698:	3ba4      	subs	r3, #164	; 0xa4
 801b69a:	b29b      	uxth	r3, r3
 801b69c:	b219      	sxth	r1, r3
 801b69e:	4b34      	ldr	r3, [pc, #208]	; (801b770 <SX1276OnDio0Irq+0x424>)
 801b6a0:	2262      	movs	r2, #98	; 0x62
 801b6a2:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801b6a4:	2013      	movs	r0, #19
 801b6a6:	f7ff fb7a 	bl	801ad9e <SX1276Read>
 801b6aa:	0003      	movs	r3, r0
 801b6ac:	0019      	movs	r1, r3
 801b6ae:	4b30      	ldr	r3, [pc, #192]	; (801b770 <SX1276OnDio0Irq+0x424>)
 801b6b0:	2264      	movs	r2, #100	; 0x64
 801b6b2:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801b6b4:	2010      	movs	r0, #16
 801b6b6:	f7ff fb72 	bl	801ad9e <SX1276Read>
 801b6ba:	0003      	movs	r3, r0
 801b6bc:	0019      	movs	r1, r3
 801b6be:	200d      	movs	r0, #13
 801b6c0:	f7ff fb5c 	bl	801ad7c <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801b6c4:	4b2a      	ldr	r3, [pc, #168]	; (801b770 <SX1276OnDio0Irq+0x424>)
 801b6c6:	2264      	movs	r2, #100	; 0x64
 801b6c8:	5c9a      	ldrb	r2, [r3, r2]
 801b6ca:	4b2a      	ldr	r3, [pc, #168]	; (801b774 <SX1276OnDio0Irq+0x428>)
 801b6cc:	0011      	movs	r1, r2
 801b6ce:	0018      	movs	r0, r3
 801b6d0:	f7ff fbf2 	bl	801aeb8 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801b6d4:	4b26      	ldr	r3, [pc, #152]	; (801b770 <SX1276OnDio0Irq+0x424>)
 801b6d6:	2256      	movs	r2, #86	; 0x56
 801b6d8:	5c9b      	ldrb	r3, [r3, r2]
 801b6da:	2201      	movs	r2, #1
 801b6dc:	4053      	eors	r3, r2
 801b6de:	b2db      	uxtb	r3, r3
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d002      	beq.n	801b6ea <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801b6e4:	4b22      	ldr	r3, [pc, #136]	; (801b770 <SX1276OnDio0Irq+0x424>)
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801b6ea:	4b23      	ldr	r3, [pc, #140]	; (801b778 <SX1276OnDio0Irq+0x42c>)
 801b6ec:	0018      	movs	r0, r3
 801b6ee:	f001 f9b9 	bl	801ca64 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b6f2:	4b22      	ldr	r3, [pc, #136]	; (801b77c <SX1276OnDio0Irq+0x430>)
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d016      	beq.n	801b728 <SX1276OnDio0Irq+0x3dc>
 801b6fa:	4b20      	ldr	r3, [pc, #128]	; (801b77c <SX1276OnDio0Irq+0x430>)
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	689b      	ldr	r3, [r3, #8]
 801b700:	2b00      	cmp	r3, #0
 801b702:	d011      	beq.n	801b728 <SX1276OnDio0Irq+0x3dc>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801b704:	4b1d      	ldr	r3, [pc, #116]	; (801b77c <SX1276OnDio0Irq+0x430>)
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	689c      	ldr	r4, [r3, #8]
 801b70a:	4b19      	ldr	r3, [pc, #100]	; (801b770 <SX1276OnDio0Irq+0x424>)
 801b70c:	2264      	movs	r2, #100	; 0x64
 801b70e:	5c9b      	ldrb	r3, [r3, r2]
 801b710:	b299      	uxth	r1, r3
 801b712:	4b17      	ldr	r3, [pc, #92]	; (801b770 <SX1276OnDio0Irq+0x424>)
 801b714:	2262      	movs	r2, #98	; 0x62
 801b716:	5e9a      	ldrsh	r2, [r3, r2]
 801b718:	4b15      	ldr	r3, [pc, #84]	; (801b770 <SX1276OnDio0Irq+0x424>)
 801b71a:	2060      	movs	r0, #96	; 0x60
 801b71c:	561b      	ldrsb	r3, [r3, r0]
 801b71e:	4815      	ldr	r0, [pc, #84]	; (801b774 <SX1276OnDio0Irq+0x428>)
 801b720:	47a0      	blx	r4
                break;
 801b722:	e001      	b.n	801b728 <SX1276OnDio0Irq+0x3dc>
                        break;
 801b724:	46c0      	nop			; (mov r8, r8)
 801b726:	e01f      	b.n	801b768 <SX1276OnDio0Irq+0x41c>
                break;
 801b728:	46c0      	nop			; (mov r8, r8)
            break;
 801b72a:	e01d      	b.n	801b768 <SX1276OnDio0Irq+0x41c>
            TimerStop( &TxTimeoutTimer );
 801b72c:	4b14      	ldr	r3, [pc, #80]	; (801b780 <SX1276OnDio0Irq+0x434>)
 801b72e:	0018      	movs	r0, r3
 801b730:	f001 f998 	bl	801ca64 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801b734:	4b0e      	ldr	r3, [pc, #56]	; (801b770 <SX1276OnDio0Irq+0x424>)
 801b736:	795b      	ldrb	r3, [r3, #5]
 801b738:	2b01      	cmp	r3, #1
 801b73a:	d103      	bne.n	801b744 <SX1276OnDio0Irq+0x3f8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801b73c:	2108      	movs	r1, #8
 801b73e:	2012      	movs	r0, #18
 801b740:	f7ff fb1c 	bl	801ad7c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b744:	4b0a      	ldr	r3, [pc, #40]	; (801b770 <SX1276OnDio0Irq+0x424>)
 801b746:	2200      	movs	r2, #0
 801b748:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b74a:	4b0c      	ldr	r3, [pc, #48]	; (801b77c <SX1276OnDio0Irq+0x430>)
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d008      	beq.n	801b764 <SX1276OnDio0Irq+0x418>
 801b752:	4b0a      	ldr	r3, [pc, #40]	; (801b77c <SX1276OnDio0Irq+0x430>)
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	681b      	ldr	r3, [r3, #0]
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d003      	beq.n	801b764 <SX1276OnDio0Irq+0x418>
                    RadioEvents->TxDone( );
 801b75c:	4b07      	ldr	r3, [pc, #28]	; (801b77c <SX1276OnDio0Irq+0x430>)
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	4798      	blx	r3
                break;
 801b764:	46c0      	nop			; (mov r8, r8)
            break;
 801b766:	46c0      	nop			; (mov r8, r8)
    }
}
 801b768:	46c0      	nop			; (mov r8, r8)
 801b76a:	46bd      	mov	sp, r7
 801b76c:	b003      	add	sp, #12
 801b76e:	bd90      	pop	{r4, r7, pc}
 801b770:	200016b0 	.word	0x200016b0
 801b774:	20000e14 	.word	0x20000e14
 801b778:	20001718 	.word	0x20001718
 801b77c:	20000e10 	.word	0x20000e10
 801b780:	20001680 	.word	0x20001680

0801b784 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801b784:	b580      	push	{r7, lr}
 801b786:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801b788:	4b6c      	ldr	r3, [pc, #432]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b78a:	791b      	ldrb	r3, [r3, #4]
 801b78c:	2b01      	cmp	r3, #1
 801b78e:	d003      	beq.n	801b798 <SX1276OnDio1Irq+0x14>
 801b790:	2b02      	cmp	r3, #2
 801b792:	d100      	bne.n	801b796 <SX1276OnDio1Irq+0x12>
 801b794:	e08b      	b.n	801b8ae <SX1276OnDio1Irq+0x12a>
            default:
                break;
            }
            break;
        default:
            break;
 801b796:	e0ce      	b.n	801b936 <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801b798:	4b68      	ldr	r3, [pc, #416]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b79a:	795b      	ldrb	r3, [r3, #5]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d002      	beq.n	801b7a6 <SX1276OnDio1Irq+0x22>
 801b7a0:	2b01      	cmp	r3, #1
 801b7a2:	d061      	beq.n	801b868 <SX1276OnDio1Irq+0xe4>
                break;
 801b7a4:	e082      	b.n	801b8ac <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801b7a6:	f7ea fd29 	bl	80061fc <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b7aa:	1e03      	subs	r3, r0, #0
 801b7ac:	d100      	bne.n	801b7b0 <SX1276OnDio1Irq+0x2c>
 801b7ae:	e078      	b.n	801b8a2 <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutSyncWord );
 801b7b0:	4b63      	ldr	r3, [pc, #396]	; (801b940 <SX1276OnDio1Irq+0x1bc>)
 801b7b2:	0018      	movs	r0, r3
 801b7b4:	f001 f956 	bl	801ca64 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b7b8:	4b60      	ldr	r3, [pc, #384]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b7ba:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d118      	bne.n	801b7f2 <SX1276OnDio1Irq+0x6e>
 801b7c0:	4b5e      	ldr	r3, [pc, #376]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b7c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d114      	bne.n	801b7f2 <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b7c8:	4b5c      	ldr	r3, [pc, #368]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b7ca:	2222      	movs	r2, #34	; 0x22
 801b7cc:	5c9b      	ldrb	r3, [r3, r2]
 801b7ce:	2201      	movs	r2, #1
 801b7d0:	4053      	eors	r3, r2
 801b7d2:	b2db      	uxtb	r3, r3
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d005      	beq.n	801b7e4 <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b7d8:	4b5a      	ldr	r3, [pc, #360]	; (801b944 <SX1276OnDio1Irq+0x1c0>)
 801b7da:	2101      	movs	r1, #1
 801b7dc:	0018      	movs	r0, r3
 801b7de:	f7ff fb6b 	bl	801aeb8 <SX1276ReadFifo>
 801b7e2:	e006      	b.n	801b7f2 <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b7e4:	2032      	movs	r0, #50	; 0x32
 801b7e6:	f7ff fada 	bl	801ad9e <SX1276Read>
 801b7ea:	0003      	movs	r3, r0
 801b7ec:	b29a      	uxth	r2, r3
 801b7ee:	4b53      	ldr	r3, [pc, #332]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b7f0:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801b7f2:	4b52      	ldr	r3, [pc, #328]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b7f4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b7f6:	001a      	movs	r2, r3
 801b7f8:	4b50      	ldr	r3, [pc, #320]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b7fa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b7fc:	1ad3      	subs	r3, r2, r3
 801b7fe:	4a4f      	ldr	r2, [pc, #316]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b800:	213e      	movs	r1, #62	; 0x3e
 801b802:	5c52      	ldrb	r2, [r2, r1]
 801b804:	4293      	cmp	r3, r2
 801b806:	db1a      	blt.n	801b83e <SX1276OnDio1Irq+0xba>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801b808:	4b4c      	ldr	r3, [pc, #304]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b80a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b80c:	001a      	movs	r2, r3
 801b80e:	4b4e      	ldr	r3, [pc, #312]	; (801b948 <SX1276OnDio1Irq+0x1c4>)
 801b810:	18d2      	adds	r2, r2, r3
 801b812:	4b4a      	ldr	r3, [pc, #296]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b814:	213e      	movs	r1, #62	; 0x3e
 801b816:	5c5b      	ldrb	r3, [r3, r1]
 801b818:	3b01      	subs	r3, #1
 801b81a:	b2db      	uxtb	r3, r3
 801b81c:	0019      	movs	r1, r3
 801b81e:	0010      	movs	r0, r2
 801b820:	f7ff fb4a 	bl	801aeb8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801b824:	4b45      	ldr	r3, [pc, #276]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b826:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801b828:	4b44      	ldr	r3, [pc, #272]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b82a:	213e      	movs	r1, #62	; 0x3e
 801b82c:	5c5b      	ldrb	r3, [r3, r1]
 801b82e:	b29b      	uxth	r3, r3
 801b830:	18d3      	adds	r3, r2, r3
 801b832:	b29b      	uxth	r3, r3
 801b834:	3b01      	subs	r3, #1
 801b836:	b29a      	uxth	r2, r3
 801b838:	4b40      	ldr	r3, [pc, #256]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b83a:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b83c:	e036      	b.n	801b8ac <SX1276OnDio1Irq+0x128>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b83e:	4b3f      	ldr	r3, [pc, #252]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b840:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b842:	001a      	movs	r2, r3
 801b844:	4b40      	ldr	r3, [pc, #256]	; (801b948 <SX1276OnDio1Irq+0x1c4>)
 801b846:	18d0      	adds	r0, r2, r3
 801b848:	4b3c      	ldr	r3, [pc, #240]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b84a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b84c:	b2da      	uxtb	r2, r3
 801b84e:	4b3b      	ldr	r3, [pc, #236]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b850:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b852:	b2db      	uxtb	r3, r3
 801b854:	1ad3      	subs	r3, r2, r3
 801b856:	b2db      	uxtb	r3, r3
 801b858:	0019      	movs	r1, r3
 801b85a:	f7ff fb2d 	bl	801aeb8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b85e:	4b37      	ldr	r3, [pc, #220]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b860:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b862:	4b36      	ldr	r3, [pc, #216]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b864:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b866:	e021      	b.n	801b8ac <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801b868:	f7ea fcc8 	bl	80061fc <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b86c:	1e03      	subs	r3, r0, #0
 801b86e:	d01a      	beq.n	801b8a6 <SX1276OnDio1Irq+0x122>
                TimerStop( &RxTimeoutTimer );
 801b870:	4b36      	ldr	r3, [pc, #216]	; (801b94c <SX1276OnDio1Irq+0x1c8>)
 801b872:	0018      	movs	r0, r3
 801b874:	f001 f8f6 	bl	801ca64 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801b878:	2180      	movs	r1, #128	; 0x80
 801b87a:	2012      	movs	r0, #18
 801b87c:	f7ff fa7e 	bl	801ad7c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b880:	4b2e      	ldr	r3, [pc, #184]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b882:	2200      	movs	r2, #0
 801b884:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b886:	4b32      	ldr	r3, [pc, #200]	; (801b950 <SX1276OnDio1Irq+0x1cc>)
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d00d      	beq.n	801b8aa <SX1276OnDio1Irq+0x126>
 801b88e:	4b30      	ldr	r3, [pc, #192]	; (801b950 <SX1276OnDio1Irq+0x1cc>)
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	68db      	ldr	r3, [r3, #12]
 801b894:	2b00      	cmp	r3, #0
 801b896:	d008      	beq.n	801b8aa <SX1276OnDio1Irq+0x126>
                    RadioEvents->RxTimeout( );
 801b898:	4b2d      	ldr	r3, [pc, #180]	; (801b950 <SX1276OnDio1Irq+0x1cc>)
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	68db      	ldr	r3, [r3, #12]
 801b89e:	4798      	blx	r3
                break;
 801b8a0:	e003      	b.n	801b8aa <SX1276OnDio1Irq+0x126>
                    break;
 801b8a2:	46c0      	nop			; (mov r8, r8)
 801b8a4:	e047      	b.n	801b936 <SX1276OnDio1Irq+0x1b2>
                    break;
 801b8a6:	46c0      	nop			; (mov r8, r8)
 801b8a8:	e045      	b.n	801b936 <SX1276OnDio1Irq+0x1b2>
                break;
 801b8aa:	46c0      	nop			; (mov r8, r8)
            break;
 801b8ac:	e043      	b.n	801b936 <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801b8ae:	4b23      	ldr	r3, [pc, #140]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b8b0:	795b      	ldrb	r3, [r3, #5]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d13b      	bne.n	801b92e <SX1276OnDio1Irq+0x1aa>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801b8b6:	f7ea fca1 	bl	80061fc <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b8ba:	0003      	movs	r3, r0
 801b8bc:	2b01      	cmp	r3, #1
 801b8be:	d038      	beq.n	801b932 <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801b8c0:	4b1e      	ldr	r3, [pc, #120]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b8c2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b8c4:	001a      	movs	r2, r3
 801b8c6:	4b1d      	ldr	r3, [pc, #116]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b8c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b8ca:	1ad3      	subs	r3, r2, r3
 801b8cc:	4a1b      	ldr	r2, [pc, #108]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b8ce:	213f      	movs	r1, #63	; 0x3f
 801b8d0:	5c52      	ldrb	r2, [r2, r1]
 801b8d2:	4293      	cmp	r3, r2
 801b8d4:	dd16      	ble.n	801b904 <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801b8d6:	4b19      	ldr	r3, [pc, #100]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b8d8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b8da:	001a      	movs	r2, r3
 801b8dc:	4b1a      	ldr	r3, [pc, #104]	; (801b948 <SX1276OnDio1Irq+0x1c4>)
 801b8de:	18d2      	adds	r2, r2, r3
 801b8e0:	4b16      	ldr	r3, [pc, #88]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b8e2:	213f      	movs	r1, #63	; 0x3f
 801b8e4:	5c5b      	ldrb	r3, [r3, r1]
 801b8e6:	0019      	movs	r1, r3
 801b8e8:	0010      	movs	r0, r2
 801b8ea:	f7ff fad3 	bl	801ae94 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801b8ee:	4b13      	ldr	r3, [pc, #76]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b8f0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801b8f2:	4b12      	ldr	r3, [pc, #72]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b8f4:	213f      	movs	r1, #63	; 0x3f
 801b8f6:	5c5b      	ldrb	r3, [r3, r1]
 801b8f8:	b29b      	uxth	r3, r3
 801b8fa:	18d3      	adds	r3, r2, r3
 801b8fc:	b29a      	uxth	r2, r3
 801b8fe:	4b0f      	ldr	r3, [pc, #60]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b900:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b902:	e017      	b.n	801b934 <SX1276OnDio1Irq+0x1b0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b904:	4b0d      	ldr	r3, [pc, #52]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b906:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b908:	001a      	movs	r2, r3
 801b90a:	4b0f      	ldr	r3, [pc, #60]	; (801b948 <SX1276OnDio1Irq+0x1c4>)
 801b90c:	18d0      	adds	r0, r2, r3
 801b90e:	4b0b      	ldr	r3, [pc, #44]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b910:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b912:	b2da      	uxtb	r2, r3
 801b914:	4b09      	ldr	r3, [pc, #36]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b916:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b918:	b2db      	uxtb	r3, r3
 801b91a:	1ad3      	subs	r3, r2, r3
 801b91c:	b2db      	uxtb	r3, r3
 801b91e:	0019      	movs	r1, r3
 801b920:	f7ff fab8 	bl	801ae94 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801b924:	4b05      	ldr	r3, [pc, #20]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b926:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b928:	4b04      	ldr	r3, [pc, #16]	; (801b93c <SX1276OnDio1Irq+0x1b8>)
 801b92a:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801b92c:	e002      	b.n	801b934 <SX1276OnDio1Irq+0x1b0>
                break;
 801b92e:	46c0      	nop			; (mov r8, r8)
 801b930:	e000      	b.n	801b934 <SX1276OnDio1Irq+0x1b0>
                    break;
 801b932:	46c0      	nop			; (mov r8, r8)
            break;
 801b934:	46c0      	nop			; (mov r8, r8)
    }
}
 801b936:	46c0      	nop			; (mov r8, r8)
 801b938:	46bd      	mov	sp, r7
 801b93a:	bd80      	pop	{r7, pc}
 801b93c:	200016b0 	.word	0x200016b0
 801b940:	20001698 	.word	0x20001698
 801b944:	200016ea 	.word	0x200016ea
 801b948:	20000e14 	.word	0x20000e14
 801b94c:	20001718 	.word	0x20001718
 801b950:	20000e10 	.word	0x20000e10

0801b954 <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801b954:	b590      	push	{r4, r7, lr}
 801b956:	b085      	sub	sp, #20
 801b958:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801b95a:	2300      	movs	r3, #0
 801b95c:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801b95e:	4b5d      	ldr	r3, [pc, #372]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801b960:	791b      	ldrb	r3, [r3, #4]
 801b962:	2b01      	cmp	r3, #1
 801b964:	d003      	beq.n	801b96e <SX1276OnDio2Irq+0x1a>
 801b966:	2b02      	cmp	r3, #2
 801b968:	d100      	bne.n	801b96c <SX1276OnDio2Irq+0x18>
 801b96a:	e083      	b.n	801ba74 <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801b96c:	e0ae      	b.n	801bacc <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801b96e:	4b59      	ldr	r3, [pc, #356]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801b970:	795b      	ldrb	r3, [r3, #5]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d002      	beq.n	801b97c <SX1276OnDio2Irq+0x28>
 801b976:	2b01      	cmp	r3, #1
 801b978:	d058      	beq.n	801ba2c <SX1276OnDio2Irq+0xd8>
                break;
 801b97a:	e07a      	b.n	801ba72 <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801b97c:	4b55      	ldr	r3, [pc, #340]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801b97e:	2230      	movs	r2, #48	; 0x30
 801b980:	2101      	movs	r1, #1
 801b982:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801b984:	4b53      	ldr	r3, [pc, #332]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801b986:	2230      	movs	r2, #48	; 0x30
 801b988:	5c9b      	ldrb	r3, [r3, r2]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d06e      	beq.n	801ba6c <SX1276OnDio2Irq+0x118>
 801b98e:	4b51      	ldr	r3, [pc, #324]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801b990:	2231      	movs	r2, #49	; 0x31
 801b992:	5c9b      	ldrb	r3, [r3, r2]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d169      	bne.n	801ba6c <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801b998:	4b4f      	ldr	r3, [pc, #316]	; (801bad8 <SX1276OnDio2Irq+0x184>)
 801b99a:	0018      	movs	r0, r3
 801b99c:	f001 f862 	bl	801ca64 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801b9a0:	4b4c      	ldr	r3, [pc, #304]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801b9a2:	2231      	movs	r2, #49	; 0x31
 801b9a4:	2101      	movs	r1, #1
 801b9a6:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801b9a8:	2011      	movs	r0, #17
 801b9aa:	f7ff f9f8 	bl	801ad9e <SX1276Read>
 801b9ae:	0003      	movs	r3, r0
 801b9b0:	085b      	lsrs	r3, r3, #1
 801b9b2:	b2db      	uxtb	r3, r3
 801b9b4:	425b      	negs	r3, r3
 801b9b6:	b2db      	uxtb	r3, r3
 801b9b8:	b259      	sxtb	r1, r3
 801b9ba:	4b46      	ldr	r3, [pc, #280]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801b9bc:	2232      	movs	r2, #50	; 0x32
 801b9be:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801b9c0:	201b      	movs	r0, #27
 801b9c2:	f7ff f9ec 	bl	801ad9e <SX1276Read>
 801b9c6:	0003      	movs	r3, r0
 801b9c8:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801b9ca:	201c      	movs	r0, #28
 801b9cc:	f7ff f9e7 	bl	801ad9e <SX1276Read>
 801b9d0:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801b9d2:	4323      	orrs	r3, r4
 801b9d4:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	0a1b      	lsrs	r3, r3, #8
 801b9da:	60bb      	str	r3, [r7, #8]
 801b9dc:	68bb      	ldr	r3, [r7, #8]
 801b9de:	021b      	lsls	r3, r3, #8
 801b9e0:	68fa      	ldr	r2, [r7, #12]
 801b9e2:	1ad3      	subs	r3, r2, r3
 801b9e4:	607b      	str	r3, [r7, #4]
 801b9e6:	68b9      	ldr	r1, [r7, #8]
 801b9e8:	000b      	movs	r3, r1
 801b9ea:	015b      	lsls	r3, r3, #5
 801b9ec:	1a5b      	subs	r3, r3, r1
 801b9ee:	019a      	lsls	r2, r3, #6
 801b9f0:	1ad2      	subs	r2, r2, r3
 801b9f2:	00d2      	lsls	r2, r2, #3
 801b9f4:	1850      	adds	r0, r2, r1
 801b9f6:	6879      	ldr	r1, [r7, #4]
 801b9f8:	000b      	movs	r3, r1
 801b9fa:	015b      	lsls	r3, r3, #5
 801b9fc:	1a5b      	subs	r3, r3, r1
 801b9fe:	019a      	lsls	r2, r3, #6
 801ba00:	1ad2      	subs	r2, r2, r3
 801ba02:	00d2      	lsls	r2, r2, #3
 801ba04:	1853      	adds	r3, r2, r1
 801ba06:	3380      	adds	r3, #128	; 0x80
 801ba08:	0a1b      	lsrs	r3, r3, #8
 801ba0a:	18c3      	adds	r3, r0, r3
 801ba0c:	001a      	movs	r2, r3
 801ba0e:	4b31      	ldr	r3, [pc, #196]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801ba10:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801ba12:	200c      	movs	r0, #12
 801ba14:	f7ff f9c3 	bl	801ad9e <SX1276Read>
 801ba18:	0003      	movs	r3, r0
 801ba1a:	095b      	lsrs	r3, r3, #5
 801ba1c:	b2db      	uxtb	r3, r3
 801ba1e:	2207      	movs	r2, #7
 801ba20:	4013      	ands	r3, r2
 801ba22:	b2d9      	uxtb	r1, r3
 801ba24:	4b2b      	ldr	r3, [pc, #172]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801ba26:	2238      	movs	r2, #56	; 0x38
 801ba28:	5499      	strb	r1, [r3, r2]
                break;
 801ba2a:	e01f      	b.n	801ba6c <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801ba2c:	4b29      	ldr	r3, [pc, #164]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801ba2e:	2253      	movs	r2, #83	; 0x53
 801ba30:	5c9b      	ldrb	r3, [r3, r2]
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	d01c      	beq.n	801ba70 <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801ba36:	2102      	movs	r1, #2
 801ba38:	2012      	movs	r0, #18
 801ba3a:	f7ff f99f 	bl	801ad7c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801ba3e:	4b27      	ldr	r3, [pc, #156]	; (801badc <SX1276OnDio2Irq+0x188>)
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d014      	beq.n	801ba70 <SX1276OnDio2Irq+0x11c>
 801ba46:	4b25      	ldr	r3, [pc, #148]	; (801badc <SX1276OnDio2Irq+0x188>)
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	695b      	ldr	r3, [r3, #20]
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d00f      	beq.n	801ba70 <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801ba50:	4b22      	ldr	r3, [pc, #136]	; (801badc <SX1276OnDio2Irq+0x188>)
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	695c      	ldr	r4, [r3, #20]
 801ba56:	201c      	movs	r0, #28
 801ba58:	f7ff f9a1 	bl	801ad9e <SX1276Read>
 801ba5c:	0003      	movs	r3, r0
 801ba5e:	001a      	movs	r2, r3
 801ba60:	233f      	movs	r3, #63	; 0x3f
 801ba62:	4013      	ands	r3, r2
 801ba64:	b2db      	uxtb	r3, r3
 801ba66:	0018      	movs	r0, r3
 801ba68:	47a0      	blx	r4
                break;
 801ba6a:	e001      	b.n	801ba70 <SX1276OnDio2Irq+0x11c>
                break;
 801ba6c:	46c0      	nop			; (mov r8, r8)
 801ba6e:	e02d      	b.n	801bacc <SX1276OnDio2Irq+0x178>
                break;
 801ba70:	46c0      	nop			; (mov r8, r8)
            break;
 801ba72:	e02b      	b.n	801bacc <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801ba74:	4b17      	ldr	r3, [pc, #92]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801ba76:	795b      	ldrb	r3, [r3, #5]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d021      	beq.n	801bac0 <SX1276OnDio2Irq+0x16c>
 801ba7c:	2b01      	cmp	r3, #1
 801ba7e:	d121      	bne.n	801bac4 <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801ba80:	4b14      	ldr	r3, [pc, #80]	; (801bad4 <SX1276OnDio2Irq+0x180>)
 801ba82:	2253      	movs	r2, #83	; 0x53
 801ba84:	5c9b      	ldrb	r3, [r3, r2]
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d01e      	beq.n	801bac8 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801ba8a:	2102      	movs	r1, #2
 801ba8c:	2012      	movs	r0, #18
 801ba8e:	f7ff f975 	bl	801ad7c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801ba92:	4b12      	ldr	r3, [pc, #72]	; (801badc <SX1276OnDio2Irq+0x188>)
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d016      	beq.n	801bac8 <SX1276OnDio2Irq+0x174>
 801ba9a:	4b10      	ldr	r3, [pc, #64]	; (801badc <SX1276OnDio2Irq+0x188>)
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	695b      	ldr	r3, [r3, #20]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d011      	beq.n	801bac8 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801baa4:	4b0d      	ldr	r3, [pc, #52]	; (801badc <SX1276OnDio2Irq+0x188>)
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	695c      	ldr	r4, [r3, #20]
 801baaa:	201c      	movs	r0, #28
 801baac:	f7ff f977 	bl	801ad9e <SX1276Read>
 801bab0:	0003      	movs	r3, r0
 801bab2:	001a      	movs	r2, r3
 801bab4:	233f      	movs	r3, #63	; 0x3f
 801bab6:	4013      	ands	r3, r2
 801bab8:	b2db      	uxtb	r3, r3
 801baba:	0018      	movs	r0, r3
 801babc:	47a0      	blx	r4
                break;
 801babe:	e003      	b.n	801bac8 <SX1276OnDio2Irq+0x174>
                break;
 801bac0:	46c0      	nop			; (mov r8, r8)
 801bac2:	e002      	b.n	801baca <SX1276OnDio2Irq+0x176>
                break;
 801bac4:	46c0      	nop			; (mov r8, r8)
 801bac6:	e000      	b.n	801baca <SX1276OnDio2Irq+0x176>
                break;
 801bac8:	46c0      	nop			; (mov r8, r8)
            break;
 801baca:	46c0      	nop			; (mov r8, r8)
    }
}
 801bacc:	46c0      	nop			; (mov r8, r8)
 801bace:	46bd      	mov	sp, r7
 801bad0:	b005      	add	sp, #20
 801bad2:	bd90      	pop	{r4, r7, pc}
 801bad4:	200016b0 	.word	0x200016b0
 801bad8:	20001698 	.word	0x20001698
 801badc:	20000e10 	.word	0x20000e10

0801bae0 <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801bae0:	b580      	push	{r7, lr}
 801bae2:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801bae4:	4b1d      	ldr	r3, [pc, #116]	; (801bb5c <SX1276OnDio3Irq+0x7c>)
 801bae6:	795b      	ldrb	r3, [r3, #5]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d031      	beq.n	801bb50 <SX1276OnDio3Irq+0x70>
 801baec:	2b01      	cmp	r3, #1
 801baee:	d000      	beq.n	801baf2 <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801baf0:	e031      	b.n	801bb56 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801baf2:	2012      	movs	r0, #18
 801baf4:	f7ff f953 	bl	801ad9e <SX1276Read>
 801baf8:	0003      	movs	r3, r0
 801bafa:	001a      	movs	r2, r3
 801bafc:	2301      	movs	r3, #1
 801bafe:	4013      	ands	r3, r2
 801bb00:	2b01      	cmp	r3, #1
 801bb02:	d112      	bne.n	801bb2a <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801bb04:	2105      	movs	r1, #5
 801bb06:	2012      	movs	r0, #18
 801bb08:	f7ff f938 	bl	801ad7c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bb0c:	4b14      	ldr	r3, [pc, #80]	; (801bb60 <SX1276OnDio3Irq+0x80>)
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d01f      	beq.n	801bb54 <SX1276OnDio3Irq+0x74>
 801bb14:	4b12      	ldr	r3, [pc, #72]	; (801bb60 <SX1276OnDio3Irq+0x80>)
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	699b      	ldr	r3, [r3, #24]
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d01a      	beq.n	801bb54 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801bb1e:	4b10      	ldr	r3, [pc, #64]	; (801bb60 <SX1276OnDio3Irq+0x80>)
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	699b      	ldr	r3, [r3, #24]
 801bb24:	2001      	movs	r0, #1
 801bb26:	4798      	blx	r3
        break;
 801bb28:	e014      	b.n	801bb54 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801bb2a:	2104      	movs	r1, #4
 801bb2c:	2012      	movs	r0, #18
 801bb2e:	f7ff f925 	bl	801ad7c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bb32:	4b0b      	ldr	r3, [pc, #44]	; (801bb60 <SX1276OnDio3Irq+0x80>)
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d00c      	beq.n	801bb54 <SX1276OnDio3Irq+0x74>
 801bb3a:	4b09      	ldr	r3, [pc, #36]	; (801bb60 <SX1276OnDio3Irq+0x80>)
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	699b      	ldr	r3, [r3, #24]
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d007      	beq.n	801bb54 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801bb44:	4b06      	ldr	r3, [pc, #24]	; (801bb60 <SX1276OnDio3Irq+0x80>)
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	699b      	ldr	r3, [r3, #24]
 801bb4a:	2000      	movs	r0, #0
 801bb4c:	4798      	blx	r3
        break;
 801bb4e:	e001      	b.n	801bb54 <SX1276OnDio3Irq+0x74>
        break;
 801bb50:	46c0      	nop			; (mov r8, r8)
 801bb52:	e000      	b.n	801bb56 <SX1276OnDio3Irq+0x76>
        break;
 801bb54:	46c0      	nop			; (mov r8, r8)
    }
}
 801bb56:	46c0      	nop			; (mov r8, r8)
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	bd80      	pop	{r7, pc}
 801bb5c:	200016b0 	.word	0x200016b0
 801bb60:	20000e10 	.word	0x20000e10

0801bb64 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801bb64:	b580      	push	{r7, lr}
 801bb66:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801bb68:	4b0b      	ldr	r3, [pc, #44]	; (801bb98 <SX1276OnDio4Irq+0x34>)
 801bb6a:	795b      	ldrb	r3, [r3, #5]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d002      	beq.n	801bb76 <SX1276OnDio4Irq+0x12>
 801bb70:	2b01      	cmp	r3, #1
 801bb72:	d00a      	beq.n	801bb8a <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801bb74:	e00c      	b.n	801bb90 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801bb76:	4b08      	ldr	r3, [pc, #32]	; (801bb98 <SX1276OnDio4Irq+0x34>)
 801bb78:	2230      	movs	r2, #48	; 0x30
 801bb7a:	5c9b      	ldrb	r3, [r3, r2]
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d106      	bne.n	801bb8e <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801bb80:	4b05      	ldr	r3, [pc, #20]	; (801bb98 <SX1276OnDio4Irq+0x34>)
 801bb82:	2230      	movs	r2, #48	; 0x30
 801bb84:	2101      	movs	r1, #1
 801bb86:	5499      	strb	r1, [r3, r2]
        break;
 801bb88:	e001      	b.n	801bb8e <SX1276OnDio4Irq+0x2a>
        break;
 801bb8a:	46c0      	nop			; (mov r8, r8)
 801bb8c:	e000      	b.n	801bb90 <SX1276OnDio4Irq+0x2c>
        break;
 801bb8e:	46c0      	nop			; (mov r8, r8)
    }
}
 801bb90:	46c0      	nop			; (mov r8, r8)
 801bb92:	46bd      	mov	sp, r7
 801bb94:	bd80      	pop	{r7, pc}
 801bb96:	46c0      	nop			; (mov r8, r8)
 801bb98:	200016b0 	.word	0x200016b0

0801bb9c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bba0:	4b0a      	ldr	r3, [pc, #40]	; (801bbcc <UTIL_ADV_TRACE_Init+0x30>)
 801bba2:	2218      	movs	r2, #24
 801bba4:	2100      	movs	r1, #0
 801bba6:	0018      	movs	r0, r3
 801bba8:	f000 fbb8 	bl	801c31c <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bbac:	2380      	movs	r3, #128	; 0x80
 801bbae:	009a      	lsls	r2, r3, #2
 801bbb0:	4b07      	ldr	r3, [pc, #28]	; (801bbd0 <UTIL_ADV_TRACE_Init+0x34>)
 801bbb2:	2100      	movs	r1, #0
 801bbb4:	0018      	movs	r0, r3
 801bbb6:	f000 fbb1 	bl	801c31c <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801bbba:	4b06      	ldr	r3, [pc, #24]	; (801bbd4 <UTIL_ADV_TRACE_Init+0x38>)
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	4a06      	ldr	r2, [pc, #24]	; (801bbd8 <UTIL_ADV_TRACE_Init+0x3c>)
 801bbc0:	0010      	movs	r0, r2
 801bbc2:	4798      	blx	r3
 801bbc4:	0003      	movs	r3, r0
}
 801bbc6:	0018      	movs	r0, r3
 801bbc8:	46bd      	mov	sp, r7
 801bbca:	bd80      	pop	{r7, pc}
 801bbcc:	20000f14 	.word	0x20000f14
 801bbd0:	20000f2c 	.word	0x20000f2c
 801bbd4:	0801e484 	.word	0x0801e484
 801bbd8:	0801be5d 	.word	0x0801be5d

0801bbdc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801bbdc:	b408      	push	{r3}
 801bbde:	b590      	push	{r4, r7, lr}
 801bbe0:	b08c      	sub	sp, #48	; 0x30
 801bbe2:	af00      	add	r7, sp, #0
 801bbe4:	60f8      	str	r0, [r7, #12]
 801bbe6:	60b9      	str	r1, [r7, #8]
 801bbe8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801bbea:	2316      	movs	r3, #22
 801bbec:	18fb      	adds	r3, r7, r3
 801bbee:	2200      	movs	r2, #0
 801bbf0:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801bbf2:	232c      	movs	r3, #44	; 0x2c
 801bbf4:	18fb      	adds	r3, r7, r3
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801bbfa:	4b41      	ldr	r3, [pc, #260]	; (801bd00 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bbfc:	7a1b      	ldrb	r3, [r3, #8]
 801bbfe:	001a      	movs	r2, r3
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	4293      	cmp	r3, r2
 801bc04:	d902      	bls.n	801bc0c <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801bc06:	2305      	movs	r3, #5
 801bc08:	425b      	negs	r3, r3
 801bc0a:	e072      	b.n	801bcf2 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801bc0c:	4b3c      	ldr	r3, [pc, #240]	; (801bd00 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bc0e:	68db      	ldr	r3, [r3, #12]
 801bc10:	68ba      	ldr	r2, [r7, #8]
 801bc12:	4013      	ands	r3, r2
 801bc14:	68ba      	ldr	r2, [r7, #8]
 801bc16:	429a      	cmp	r2, r3
 801bc18:	d002      	beq.n	801bc20 <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801bc1a:	2306      	movs	r3, #6
 801bc1c:	425b      	negs	r3, r3
 801bc1e:	e068      	b.n	801bcf2 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801bc20:	4b37      	ldr	r3, [pc, #220]	; (801bd00 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bc22:	685b      	ldr	r3, [r3, #4]
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	d00a      	beq.n	801bc3e <UTIL_ADV_TRACE_COND_FSend+0x62>
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d007      	beq.n	801bc3e <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801bc2e:	4b34      	ldr	r3, [pc, #208]	; (801bd00 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bc30:	685b      	ldr	r3, [r3, #4]
 801bc32:	2216      	movs	r2, #22
 801bc34:	18b9      	adds	r1, r7, r2
 801bc36:	2218      	movs	r2, #24
 801bc38:	18ba      	adds	r2, r7, r2
 801bc3a:	0010      	movs	r0, r2
 801bc3c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801bc3e:	2340      	movs	r3, #64	; 0x40
 801bc40:	18fb      	adds	r3, r7, r3
 801bc42:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bc48:	2180      	movs	r1, #128	; 0x80
 801bc4a:	0049      	lsls	r1, r1, #1
 801bc4c:	482d      	ldr	r0, [pc, #180]	; (801bd04 <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801bc4e:	f001 fa13 	bl	801d078 <tiny_vsnprintf_like>
 801bc52:	0002      	movs	r2, r0
 801bc54:	242c      	movs	r4, #44	; 0x2c
 801bc56:	193b      	adds	r3, r7, r4
 801bc58:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801bc5a:	f000 fa23 	bl	801c0a4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801bc5e:	2316      	movs	r3, #22
 801bc60:	18fb      	adds	r3, r7, r3
 801bc62:	881a      	ldrh	r2, [r3, #0]
 801bc64:	193b      	adds	r3, r7, r4
 801bc66:	881b      	ldrh	r3, [r3, #0]
 801bc68:	18d3      	adds	r3, r2, r3
 801bc6a:	b29b      	uxth	r3, r3
 801bc6c:	2214      	movs	r2, #20
 801bc6e:	18ba      	adds	r2, r7, r2
 801bc70:	0011      	movs	r1, r2
 801bc72:	0018      	movs	r0, r3
 801bc74:	f000 f97c 	bl	801bf70 <TRACE_AllocateBufer>
 801bc78:	0003      	movs	r3, r0
 801bc7a:	3301      	adds	r3, #1
 801bc7c:	d035      	beq.n	801bcea <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801bc7e:	232e      	movs	r3, #46	; 0x2e
 801bc80:	18fb      	adds	r3, r7, r3
 801bc82:	2200      	movs	r2, #0
 801bc84:	801a      	strh	r2, [r3, #0]
 801bc86:	e016      	b.n	801bcb6 <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801bc88:	202e      	movs	r0, #46	; 0x2e
 801bc8a:	183b      	adds	r3, r7, r0
 801bc8c:	881b      	ldrh	r3, [r3, #0]
 801bc8e:	2414      	movs	r4, #20
 801bc90:	193a      	adds	r2, r7, r4
 801bc92:	8812      	ldrh	r2, [r2, #0]
 801bc94:	0011      	movs	r1, r2
 801bc96:	2218      	movs	r2, #24
 801bc98:	18ba      	adds	r2, r7, r2
 801bc9a:	5cd2      	ldrb	r2, [r2, r3]
 801bc9c:	4b1a      	ldr	r3, [pc, #104]	; (801bd08 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bc9e:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801bca0:	193b      	adds	r3, r7, r4
 801bca2:	881b      	ldrh	r3, [r3, #0]
 801bca4:	3301      	adds	r3, #1
 801bca6:	b29a      	uxth	r2, r3
 801bca8:	193b      	adds	r3, r7, r4
 801bcaa:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801bcac:	183b      	adds	r3, r7, r0
 801bcae:	881a      	ldrh	r2, [r3, #0]
 801bcb0:	183b      	adds	r3, r7, r0
 801bcb2:	3201      	adds	r2, #1
 801bcb4:	801a      	strh	r2, [r3, #0]
 801bcb6:	2316      	movs	r3, #22
 801bcb8:	18fb      	adds	r3, r7, r3
 801bcba:	881b      	ldrh	r3, [r3, #0]
 801bcbc:	222e      	movs	r2, #46	; 0x2e
 801bcbe:	18ba      	adds	r2, r7, r2
 801bcc0:	8812      	ldrh	r2, [r2, #0]
 801bcc2:	429a      	cmp	r2, r3
 801bcc4:	d3e0      	bcc.n	801bc88 <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bcc6:	2314      	movs	r3, #20
 801bcc8:	18fb      	adds	r3, r7, r3
 801bcca:	881b      	ldrh	r3, [r3, #0]
 801bccc:	001a      	movs	r2, r3
 801bcce:	4b0e      	ldr	r3, [pc, #56]	; (801bd08 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bcd0:	18d0      	adds	r0, r2, r3
 801bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bcd6:	2180      	movs	r1, #128	; 0x80
 801bcd8:	0049      	lsls	r1, r1, #1
 801bcda:	f001 f9cd 	bl	801d078 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801bcde:	f000 f9fd 	bl	801c0dc <TRACE_UnLock>

    return TRACE_Send();
 801bce2:	f000 f831 	bl	801bd48 <TRACE_Send>
 801bce6:	0003      	movs	r3, r0
 801bce8:	e003      	b.n	801bcf2 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801bcea:	f000 f9f7 	bl	801c0dc <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801bcee:	2303      	movs	r3, #3
 801bcf0:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801bcf2:	0018      	movs	r0, r3
 801bcf4:	46bd      	mov	sp, r7
 801bcf6:	b00c      	add	sp, #48	; 0x30
 801bcf8:	bc90      	pop	{r4, r7}
 801bcfa:	bc08      	pop	{r3}
 801bcfc:	b001      	add	sp, #4
 801bcfe:	4718      	bx	r3
 801bd00:	20000f14 	.word	0x20000f14
 801bd04:	2000112c 	.word	0x2000112c
 801bd08:	20000f2c 	.word	0x20000f2c

0801bd0c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801bd0c:	b580      	push	{r7, lr}
 801bd0e:	b082      	sub	sp, #8
 801bd10:	af00      	add	r7, sp, #0
 801bd12:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801bd14:	4b03      	ldr	r3, [pc, #12]	; (801bd24 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801bd16:	687a      	ldr	r2, [r7, #4]
 801bd18:	605a      	str	r2, [r3, #4]
}
 801bd1a:	46c0      	nop			; (mov r8, r8)
 801bd1c:	46bd      	mov	sp, r7
 801bd1e:	b002      	add	sp, #8
 801bd20:	bd80      	pop	{r7, pc}
 801bd22:	46c0      	nop			; (mov r8, r8)
 801bd24:	20000f14 	.word	0x20000f14

0801bd28 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b082      	sub	sp, #8
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	0002      	movs	r2, r0
 801bd30:	1dfb      	adds	r3, r7, #7
 801bd32:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801bd34:	4b03      	ldr	r3, [pc, #12]	; (801bd44 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801bd36:	1dfa      	adds	r2, r7, #7
 801bd38:	7812      	ldrb	r2, [r2, #0]
 801bd3a:	721a      	strb	r2, [r3, #8]
}
 801bd3c:	46c0      	nop			; (mov r8, r8)
 801bd3e:	46bd      	mov	sp, r7
 801bd40:	b002      	add	sp, #8
 801bd42:	bd80      	pop	{r7, pc}
 801bd44:	20000f14 	.word	0x20000f14

0801bd48 <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801bd48:	b590      	push	{r4, r7, lr}
 801bd4a:	b089      	sub	sp, #36	; 0x24
 801bd4c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801bd4e:	231f      	movs	r3, #31
 801bd50:	18fb      	adds	r3, r7, r3
 801bd52:	2200      	movs	r2, #0
 801bd54:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801bd56:	2300      	movs	r3, #0
 801bd58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd5a:	f3ef 8310 	mrs	r3, PRIMASK
 801bd5e:	613b      	str	r3, [r7, #16]
  return(result);
 801bd60:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801bd62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd64:	b672      	cpsid	i
}
 801bd66:	46c0      	nop			; (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801bd68:	f000 f9d4 	bl	801c114 <TRACE_IsLocked>
 801bd6c:	1e03      	subs	r3, r0, #0
 801bd6e:	d160      	bne.n	801be32 <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801bd70:	f000 f998 	bl	801c0a4 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801bd74:	4b36      	ldr	r3, [pc, #216]	; (801be50 <TRACE_Send+0x108>)
 801bd76:	8a1a      	ldrh	r2, [r3, #16]
 801bd78:	4b35      	ldr	r3, [pc, #212]	; (801be50 <TRACE_Send+0x108>)
 801bd7a:	8a5b      	ldrh	r3, [r3, #18]
 801bd7c:	429a      	cmp	r2, r3
 801bd7e:	d050      	beq.n	801be22 <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bd80:	4b33      	ldr	r3, [pc, #204]	; (801be50 <TRACE_Send+0x108>)
 801bd82:	789b      	ldrb	r3, [r3, #2]
 801bd84:	2b01      	cmp	r3, #1
 801bd86:	d117      	bne.n	801bdb8 <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801bd88:	4b31      	ldr	r3, [pc, #196]	; (801be50 <TRACE_Send+0x108>)
 801bd8a:	881a      	ldrh	r2, [r3, #0]
 801bd8c:	4b30      	ldr	r3, [pc, #192]	; (801be50 <TRACE_Send+0x108>)
 801bd8e:	8a1b      	ldrh	r3, [r3, #16]
 801bd90:	1ad3      	subs	r3, r2, r3
 801bd92:	b29a      	uxth	r2, r3
 801bd94:	4b2e      	ldr	r3, [pc, #184]	; (801be50 <TRACE_Send+0x108>)
 801bd96:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bd98:	4b2d      	ldr	r3, [pc, #180]	; (801be50 <TRACE_Send+0x108>)
 801bd9a:	2202      	movs	r2, #2
 801bd9c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bd9e:	4b2c      	ldr	r3, [pc, #176]	; (801be50 <TRACE_Send+0x108>)
 801bda0:	2200      	movs	r2, #0
 801bda2:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801bda4:	4b2a      	ldr	r3, [pc, #168]	; (801be50 <TRACE_Send+0x108>)
 801bda6:	8a9b      	ldrh	r3, [r3, #20]
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d105      	bne.n	801bdb8 <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bdac:	4b28      	ldr	r3, [pc, #160]	; (801be50 <TRACE_Send+0x108>)
 801bdae:	2200      	movs	r2, #0
 801bdb0:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bdb2:	4b27      	ldr	r3, [pc, #156]	; (801be50 <TRACE_Send+0x108>)
 801bdb4:	2200      	movs	r2, #0
 801bdb6:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bdb8:	4b25      	ldr	r3, [pc, #148]	; (801be50 <TRACE_Send+0x108>)
 801bdba:	789b      	ldrb	r3, [r3, #2]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d116      	bne.n	801bdee <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bdc0:	4b23      	ldr	r3, [pc, #140]	; (801be50 <TRACE_Send+0x108>)
 801bdc2:	8a5a      	ldrh	r2, [r3, #18]
 801bdc4:	4b22      	ldr	r3, [pc, #136]	; (801be50 <TRACE_Send+0x108>)
 801bdc6:	8a1b      	ldrh	r3, [r3, #16]
 801bdc8:	429a      	cmp	r2, r3
 801bdca:	d908      	bls.n	801bdde <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bdcc:	4b20      	ldr	r3, [pc, #128]	; (801be50 <TRACE_Send+0x108>)
 801bdce:	8a5a      	ldrh	r2, [r3, #18]
 801bdd0:	4b1f      	ldr	r3, [pc, #124]	; (801be50 <TRACE_Send+0x108>)
 801bdd2:	8a1b      	ldrh	r3, [r3, #16]
 801bdd4:	1ad3      	subs	r3, r2, r3
 801bdd6:	b29a      	uxth	r2, r3
 801bdd8:	4b1d      	ldr	r3, [pc, #116]	; (801be50 <TRACE_Send+0x108>)
 801bdda:	829a      	strh	r2, [r3, #20]
 801bddc:	e007      	b.n	801bdee <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bdde:	4b1c      	ldr	r3, [pc, #112]	; (801be50 <TRACE_Send+0x108>)
 801bde0:	8a1b      	ldrh	r3, [r3, #16]
 801bde2:	2280      	movs	r2, #128	; 0x80
 801bde4:	0092      	lsls	r2, r2, #2
 801bde6:	1ad3      	subs	r3, r2, r3
 801bde8:	b29a      	uxth	r2, r3
 801bdea:	4b19      	ldr	r3, [pc, #100]	; (801be50 <TRACE_Send+0x108>)
 801bdec:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bdee:	4b18      	ldr	r3, [pc, #96]	; (801be50 <TRACE_Send+0x108>)
 801bdf0:	8a1b      	ldrh	r3, [r3, #16]
 801bdf2:	001a      	movs	r2, r3
 801bdf4:	4b17      	ldr	r3, [pc, #92]	; (801be54 <TRACE_Send+0x10c>)
 801bdf6:	18d3      	adds	r3, r2, r3
 801bdf8:	61bb      	str	r3, [r7, #24]
 801bdfa:	697b      	ldr	r3, [r7, #20]
 801bdfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	f383 8810 	msr	PRIMASK, r3
}
 801be04:	46c0      	nop			; (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801be06:	f7e9 f905 	bl	8005014 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801be0a:	4b13      	ldr	r3, [pc, #76]	; (801be58 <TRACE_Send+0x110>)
 801be0c:	68db      	ldr	r3, [r3, #12]
 801be0e:	4a10      	ldr	r2, [pc, #64]	; (801be50 <TRACE_Send+0x108>)
 801be10:	8a91      	ldrh	r1, [r2, #20]
 801be12:	221f      	movs	r2, #31
 801be14:	18bc      	adds	r4, r7, r2
 801be16:	69ba      	ldr	r2, [r7, #24]
 801be18:	0010      	movs	r0, r2
 801be1a:	4798      	blx	r3
 801be1c:	0003      	movs	r3, r0
 801be1e:	7023      	strb	r3, [r4, #0]
 801be20:	e00d      	b.n	801be3e <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801be22:	f000 f95b 	bl	801c0dc <TRACE_UnLock>
 801be26:	697b      	ldr	r3, [r7, #20]
 801be28:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be2a:	68bb      	ldr	r3, [r7, #8]
 801be2c:	f383 8810 	msr	PRIMASK, r3
}
 801be30:	e005      	b.n	801be3e <TRACE_Send+0xf6>
 801be32:	697b      	ldr	r3, [r7, #20]
 801be34:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	f383 8810 	msr	PRIMASK, r3
}
 801be3c:	46c0      	nop			; (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801be3e:	231f      	movs	r3, #31
 801be40:	18fb      	adds	r3, r7, r3
 801be42:	781b      	ldrb	r3, [r3, #0]
 801be44:	b25b      	sxtb	r3, r3
}
 801be46:	0018      	movs	r0, r3
 801be48:	46bd      	mov	sp, r7
 801be4a:	b009      	add	sp, #36	; 0x24
 801be4c:	bd90      	pop	{r4, r7, pc}
 801be4e:	46c0      	nop			; (mov r8, r8)
 801be50:	20000f14 	.word	0x20000f14
 801be54:	20000f2c 	.word	0x20000f2c
 801be58:	0801e484 	.word	0x0801e484

0801be5c <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801be5c:	b580      	push	{r7, lr}
 801be5e:	b086      	sub	sp, #24
 801be60:	af00      	add	r7, sp, #0
 801be62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be64:	f3ef 8310 	mrs	r3, PRIMASK
 801be68:	613b      	str	r3, [r7, #16]
  return(result);
 801be6a:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801be6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801be6e:	b672      	cpsid	i
}
 801be70:	46c0      	nop			; (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801be72:	4b3c      	ldr	r3, [pc, #240]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801be74:	789b      	ldrb	r3, [r3, #2]
 801be76:	2b02      	cmp	r3, #2
 801be78:	d106      	bne.n	801be88 <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801be7a:	4b3a      	ldr	r3, [pc, #232]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801be7c:	2200      	movs	r2, #0
 801be7e:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801be80:	4b38      	ldr	r3, [pc, #224]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801be82:	2200      	movs	r2, #0
 801be84:	821a      	strh	r2, [r3, #16]
 801be86:	e00a      	b.n	801be9e <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801be88:	4b36      	ldr	r3, [pc, #216]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801be8a:	8a1a      	ldrh	r2, [r3, #16]
 801be8c:	4b35      	ldr	r3, [pc, #212]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801be8e:	8a9b      	ldrh	r3, [r3, #20]
 801be90:	18d3      	adds	r3, r2, r3
 801be92:	b29b      	uxth	r3, r3
 801be94:	05db      	lsls	r3, r3, #23
 801be96:	0ddb      	lsrs	r3, r3, #23
 801be98:	b29a      	uxth	r2, r3
 801be9a:	4b32      	ldr	r3, [pc, #200]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801be9c:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801be9e:	4b31      	ldr	r3, [pc, #196]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bea0:	8a1a      	ldrh	r2, [r3, #16]
 801bea2:	4b30      	ldr	r3, [pc, #192]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bea4:	8a5b      	ldrh	r3, [r3, #18]
 801bea6:	429a      	cmp	r2, r3
 801bea8:	d04c      	beq.n	801bf44 <TRACE_TxCpltCallback+0xe8>
 801beaa:	4b2e      	ldr	r3, [pc, #184]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801beac:	8adb      	ldrh	r3, [r3, #22]
 801beae:	2b01      	cmp	r3, #1
 801beb0:	d148      	bne.n	801bf44 <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801beb2:	4b2c      	ldr	r3, [pc, #176]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801beb4:	789b      	ldrb	r3, [r3, #2]
 801beb6:	2b01      	cmp	r3, #1
 801beb8:	d117      	bne.n	801beea <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801beba:	4b2a      	ldr	r3, [pc, #168]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bebc:	881a      	ldrh	r2, [r3, #0]
 801bebe:	4b29      	ldr	r3, [pc, #164]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bec0:	8a1b      	ldrh	r3, [r3, #16]
 801bec2:	1ad3      	subs	r3, r2, r3
 801bec4:	b29a      	uxth	r2, r3
 801bec6:	4b27      	ldr	r3, [pc, #156]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bec8:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801beca:	4b26      	ldr	r3, [pc, #152]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801becc:	2202      	movs	r2, #2
 801bece:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bed0:	4b24      	ldr	r3, [pc, #144]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bed2:	2200      	movs	r2, #0
 801bed4:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801bed6:	4b23      	ldr	r3, [pc, #140]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bed8:	8a9b      	ldrh	r3, [r3, #20]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d105      	bne.n	801beea <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bede:	4b21      	ldr	r3, [pc, #132]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bee0:	2200      	movs	r2, #0
 801bee2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bee4:	4b1f      	ldr	r3, [pc, #124]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bee6:	2200      	movs	r2, #0
 801bee8:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801beea:	4b1e      	ldr	r3, [pc, #120]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801beec:	789b      	ldrb	r3, [r3, #2]
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d116      	bne.n	801bf20 <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bef2:	4b1c      	ldr	r3, [pc, #112]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bef4:	8a5a      	ldrh	r2, [r3, #18]
 801bef6:	4b1b      	ldr	r3, [pc, #108]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bef8:	8a1b      	ldrh	r3, [r3, #16]
 801befa:	429a      	cmp	r2, r3
 801befc:	d908      	bls.n	801bf10 <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801befe:	4b19      	ldr	r3, [pc, #100]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bf00:	8a5a      	ldrh	r2, [r3, #18]
 801bf02:	4b18      	ldr	r3, [pc, #96]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bf04:	8a1b      	ldrh	r3, [r3, #16]
 801bf06:	1ad3      	subs	r3, r2, r3
 801bf08:	b29a      	uxth	r2, r3
 801bf0a:	4b16      	ldr	r3, [pc, #88]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bf0c:	829a      	strh	r2, [r3, #20]
 801bf0e:	e007      	b.n	801bf20 <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bf10:	4b14      	ldr	r3, [pc, #80]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bf12:	8a1b      	ldrh	r3, [r3, #16]
 801bf14:	2280      	movs	r2, #128	; 0x80
 801bf16:	0092      	lsls	r2, r2, #2
 801bf18:	1ad3      	subs	r3, r2, r3
 801bf1a:	b29a      	uxth	r2, r3
 801bf1c:	4b11      	ldr	r3, [pc, #68]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bf1e:	829a      	strh	r2, [r3, #20]
 801bf20:	697b      	ldr	r3, [r7, #20]
 801bf22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	f383 8810 	msr	PRIMASK, r3
}
 801bf2a:	46c0      	nop			; (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801bf2c:	4b0e      	ldr	r3, [pc, #56]	; (801bf68 <TRACE_TxCpltCallback+0x10c>)
 801bf2e:	68db      	ldr	r3, [r3, #12]
 801bf30:	4a0c      	ldr	r2, [pc, #48]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bf32:	8a12      	ldrh	r2, [r2, #16]
 801bf34:	0011      	movs	r1, r2
 801bf36:	4a0d      	ldr	r2, [pc, #52]	; (801bf6c <TRACE_TxCpltCallback+0x110>)
 801bf38:	1888      	adds	r0, r1, r2
 801bf3a:	4a0a      	ldr	r2, [pc, #40]	; (801bf64 <TRACE_TxCpltCallback+0x108>)
 801bf3c:	8a92      	ldrh	r2, [r2, #20]
 801bf3e:	0011      	movs	r1, r2
 801bf40:	4798      	blx	r3
 801bf42:	e00a      	b.n	801bf5a <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801bf44:	f7e9 f86f 	bl	8005026 <UTIL_ADV_TRACE_PostSendHook>
 801bf48:	697b      	ldr	r3, [r7, #20]
 801bf4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf4c:	68bb      	ldr	r3, [r7, #8]
 801bf4e:	f383 8810 	msr	PRIMASK, r3
}
 801bf52:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801bf54:	f000 f8c2 	bl	801c0dc <TRACE_UnLock>
  }
}
 801bf58:	46c0      	nop			; (mov r8, r8)
 801bf5a:	46c0      	nop			; (mov r8, r8)
 801bf5c:	46bd      	mov	sp, r7
 801bf5e:	b006      	add	sp, #24
 801bf60:	bd80      	pop	{r7, pc}
 801bf62:	46c0      	nop			; (mov r8, r8)
 801bf64:	20000f14 	.word	0x20000f14
 801bf68:	0801e484 	.word	0x0801e484
 801bf6c:	20000f2c 	.word	0x20000f2c

0801bf70 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801bf70:	b580      	push	{r7, lr}
 801bf72:	b086      	sub	sp, #24
 801bf74:	af00      	add	r7, sp, #0
 801bf76:	0002      	movs	r2, r0
 801bf78:	6039      	str	r1, [r7, #0]
 801bf7a:	1dbb      	adds	r3, r7, #6
 801bf7c:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801bf7e:	2314      	movs	r3, #20
 801bf80:	18fb      	adds	r3, r7, r3
 801bf82:	2201      	movs	r2, #1
 801bf84:	4252      	negs	r2, r2
 801bf86:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf88:	f3ef 8310 	mrs	r3, PRIMASK
 801bf8c:	60fb      	str	r3, [r7, #12]
  return(result);
 801bf8e:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bf90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf92:	b672      	cpsid	i
}
 801bf94:	46c0      	nop			; (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bf96:	4b42      	ldr	r3, [pc, #264]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bf98:	8a5a      	ldrh	r2, [r3, #18]
 801bf9a:	4b41      	ldr	r3, [pc, #260]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bf9c:	8a1b      	ldrh	r3, [r3, #16]
 801bf9e:	429a      	cmp	r2, r3
 801bfa0:	d123      	bne.n	801bfea <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bfa2:	4b3f      	ldr	r3, [pc, #252]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bfa4:	8a5a      	ldrh	r2, [r3, #18]
 801bfa6:	2016      	movs	r0, #22
 801bfa8:	183b      	adds	r3, r7, r0
 801bfaa:	2180      	movs	r1, #128	; 0x80
 801bfac:	0089      	lsls	r1, r1, #2
 801bfae:	1a8a      	subs	r2, r1, r2
 801bfb0:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801bfb2:	1dba      	adds	r2, r7, #6
 801bfb4:	0001      	movs	r1, r0
 801bfb6:	187b      	adds	r3, r7, r1
 801bfb8:	8812      	ldrh	r2, [r2, #0]
 801bfba:	881b      	ldrh	r3, [r3, #0]
 801bfbc:	429a      	cmp	r2, r3
 801bfbe:	d346      	bcc.n	801c04e <TRACE_AllocateBufer+0xde>
 801bfc0:	4b37      	ldr	r3, [pc, #220]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bfc2:	8a1b      	ldrh	r3, [r3, #16]
 801bfc4:	1dba      	adds	r2, r7, #6
 801bfc6:	8812      	ldrh	r2, [r2, #0]
 801bfc8:	429a      	cmp	r2, r3
 801bfca:	d240      	bcs.n	801c04e <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bfcc:	4b34      	ldr	r3, [pc, #208]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bfce:	2201      	movs	r2, #1
 801bfd0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801bfd2:	4b33      	ldr	r3, [pc, #204]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bfd4:	8a5a      	ldrh	r2, [r3, #18]
 801bfd6:	4b32      	ldr	r3, [pc, #200]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bfd8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bfda:	187b      	adds	r3, r7, r1
 801bfdc:	4a30      	ldr	r2, [pc, #192]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bfde:	8a12      	ldrh	r2, [r2, #16]
 801bfe0:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bfe2:	4b2f      	ldr	r3, [pc, #188]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bfe4:	2200      	movs	r2, #0
 801bfe6:	825a      	strh	r2, [r3, #18]
 801bfe8:	e031      	b.n	801c04e <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bfea:	4b2d      	ldr	r3, [pc, #180]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bfec:	8a5a      	ldrh	r2, [r3, #18]
 801bfee:	4b2c      	ldr	r3, [pc, #176]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bff0:	8a1b      	ldrh	r3, [r3, #16]
 801bff2:	429a      	cmp	r2, r3
 801bff4:	d923      	bls.n	801c03e <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bff6:	4b2a      	ldr	r3, [pc, #168]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801bff8:	8a5a      	ldrh	r2, [r3, #18]
 801bffa:	2016      	movs	r0, #22
 801bffc:	183b      	adds	r3, r7, r0
 801bffe:	2180      	movs	r1, #128	; 0x80
 801c000:	0089      	lsls	r1, r1, #2
 801c002:	1a8a      	subs	r2, r1, r2
 801c004:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c006:	1dba      	adds	r2, r7, #6
 801c008:	0001      	movs	r1, r0
 801c00a:	187b      	adds	r3, r7, r1
 801c00c:	8812      	ldrh	r2, [r2, #0]
 801c00e:	881b      	ldrh	r3, [r3, #0]
 801c010:	429a      	cmp	r2, r3
 801c012:	d31c      	bcc.n	801c04e <TRACE_AllocateBufer+0xde>
 801c014:	4b22      	ldr	r3, [pc, #136]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c016:	8a1b      	ldrh	r3, [r3, #16]
 801c018:	1dba      	adds	r2, r7, #6
 801c01a:	8812      	ldrh	r2, [r2, #0]
 801c01c:	429a      	cmp	r2, r3
 801c01e:	d216      	bcs.n	801c04e <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c020:	4b1f      	ldr	r3, [pc, #124]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c022:	2201      	movs	r2, #1
 801c024:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c026:	4b1e      	ldr	r3, [pc, #120]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c028:	8a5a      	ldrh	r2, [r3, #18]
 801c02a:	4b1d      	ldr	r3, [pc, #116]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c02c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c02e:	187b      	adds	r3, r7, r1
 801c030:	4a1b      	ldr	r2, [pc, #108]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c032:	8a12      	ldrh	r2, [r2, #16]
 801c034:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c036:	4b1a      	ldr	r3, [pc, #104]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c038:	2200      	movs	r2, #0
 801c03a:	825a      	strh	r2, [r3, #18]
 801c03c:	e007      	b.n	801c04e <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c03e:	4b18      	ldr	r3, [pc, #96]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c040:	8a19      	ldrh	r1, [r3, #16]
 801c042:	4b17      	ldr	r3, [pc, #92]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c044:	8a5a      	ldrh	r2, [r3, #18]
 801c046:	2316      	movs	r3, #22
 801c048:	18fb      	adds	r3, r7, r3
 801c04a:	1a8a      	subs	r2, r1, r2
 801c04c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801c04e:	2316      	movs	r3, #22
 801c050:	18fa      	adds	r2, r7, r3
 801c052:	1dbb      	adds	r3, r7, #6
 801c054:	8812      	ldrh	r2, [r2, #0]
 801c056:	881b      	ldrh	r3, [r3, #0]
 801c058:	429a      	cmp	r2, r3
 801c05a:	d912      	bls.n	801c082 <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c05c:	4b10      	ldr	r3, [pc, #64]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c05e:	8a5a      	ldrh	r2, [r3, #18]
 801c060:	683b      	ldr	r3, [r7, #0]
 801c062:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c064:	4b0e      	ldr	r3, [pc, #56]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c066:	8a5a      	ldrh	r2, [r3, #18]
 801c068:	1dbb      	adds	r3, r7, #6
 801c06a:	881b      	ldrh	r3, [r3, #0]
 801c06c:	18d3      	adds	r3, r2, r3
 801c06e:	b29b      	uxth	r3, r3
 801c070:	05db      	lsls	r3, r3, #23
 801c072:	0ddb      	lsrs	r3, r3, #23
 801c074:	b29a      	uxth	r2, r3
 801c076:	4b0a      	ldr	r3, [pc, #40]	; (801c0a0 <TRACE_AllocateBufer+0x130>)
 801c078:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c07a:	2314      	movs	r3, #20
 801c07c:	18fb      	adds	r3, r7, r3
 801c07e:	2200      	movs	r2, #0
 801c080:	801a      	strh	r2, [r3, #0]
 801c082:	693b      	ldr	r3, [r7, #16]
 801c084:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c086:	68bb      	ldr	r3, [r7, #8]
 801c088:	f383 8810 	msr	PRIMASK, r3
}
 801c08c:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801c08e:	2314      	movs	r3, #20
 801c090:	18fb      	adds	r3, r7, r3
 801c092:	2200      	movs	r2, #0
 801c094:	5e9b      	ldrsh	r3, [r3, r2]
}
 801c096:	0018      	movs	r0, r3
 801c098:	46bd      	mov	sp, r7
 801c09a:	b006      	add	sp, #24
 801c09c:	bd80      	pop	{r7, pc}
 801c09e:	46c0      	nop			; (mov r8, r8)
 801c0a0:	20000f14 	.word	0x20000f14

0801c0a4 <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b084      	sub	sp, #16
 801c0a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0aa:	f3ef 8310 	mrs	r3, PRIMASK
 801c0ae:	607b      	str	r3, [r7, #4]
  return(result);
 801c0b0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c0b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0b4:	b672      	cpsid	i
}
 801c0b6:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801c0b8:	4b07      	ldr	r3, [pc, #28]	; (801c0d8 <TRACE_Lock+0x34>)
 801c0ba:	8adb      	ldrh	r3, [r3, #22]
 801c0bc:	3301      	adds	r3, #1
 801c0be:	b29a      	uxth	r2, r3
 801c0c0:	4b05      	ldr	r3, [pc, #20]	; (801c0d8 <TRACE_Lock+0x34>)
 801c0c2:	82da      	strh	r2, [r3, #22]
 801c0c4:	68fb      	ldr	r3, [r7, #12]
 801c0c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0c8:	68bb      	ldr	r3, [r7, #8]
 801c0ca:	f383 8810 	msr	PRIMASK, r3
}
 801c0ce:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c0d0:	46c0      	nop			; (mov r8, r8)
 801c0d2:	46bd      	mov	sp, r7
 801c0d4:	b004      	add	sp, #16
 801c0d6:	bd80      	pop	{r7, pc}
 801c0d8:	20000f14 	.word	0x20000f14

0801c0dc <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b084      	sub	sp, #16
 801c0e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0e2:	f3ef 8310 	mrs	r3, PRIMASK
 801c0e6:	607b      	str	r3, [r7, #4]
  return(result);
 801c0e8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c0ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0ec:	b672      	cpsid	i
}
 801c0ee:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801c0f0:	4b07      	ldr	r3, [pc, #28]	; (801c110 <TRACE_UnLock+0x34>)
 801c0f2:	8adb      	ldrh	r3, [r3, #22]
 801c0f4:	3b01      	subs	r3, #1
 801c0f6:	b29a      	uxth	r2, r3
 801c0f8:	4b05      	ldr	r3, [pc, #20]	; (801c110 <TRACE_UnLock+0x34>)
 801c0fa:	82da      	strh	r2, [r3, #22]
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c100:	68bb      	ldr	r3, [r7, #8]
 801c102:	f383 8810 	msr	PRIMASK, r3
}
 801c106:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c108:	46c0      	nop			; (mov r8, r8)
 801c10a:	46bd      	mov	sp, r7
 801c10c:	b004      	add	sp, #16
 801c10e:	bd80      	pop	{r7, pc}
 801c110:	20000f14 	.word	0x20000f14

0801c114 <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801c114:	b580      	push	{r7, lr}
 801c116:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c118:	4b03      	ldr	r3, [pc, #12]	; (801c128 <TRACE_IsLocked+0x14>)
 801c11a:	8adb      	ldrh	r3, [r3, #22]
 801c11c:	1e5a      	subs	r2, r3, #1
 801c11e:	4193      	sbcs	r3, r2
 801c120:	b2db      	uxtb	r3, r3
}
 801c122:	0018      	movs	r0, r3
 801c124:	46bd      	mov	sp, r7
 801c126:	bd80      	pop	{r7, pc}
 801c128:	20000f14 	.word	0x20000f14

0801c12c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c12c:	b580      	push	{r7, lr}
 801c12e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c130:	4b04      	ldr	r3, [pc, #16]	; (801c144 <UTIL_LPM_Init+0x18>)
 801c132:	2200      	movs	r2, #0
 801c134:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c136:	4b04      	ldr	r3, [pc, #16]	; (801c148 <UTIL_LPM_Init+0x1c>)
 801c138:	2200      	movs	r2, #0
 801c13a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c13c:	46c0      	nop			; (mov r8, r8)
 801c13e:	46bd      	mov	sp, r7
 801c140:	bd80      	pop	{r7, pc}
 801c142:	46c0      	nop			; (mov r8, r8)
 801c144:	2000122c 	.word	0x2000122c
 801c148:	20001230 	.word	0x20001230

0801c14c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c14c:	b580      	push	{r7, lr}
 801c14e:	b086      	sub	sp, #24
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
 801c154:	000a      	movs	r2, r1
 801c156:	1cfb      	adds	r3, r7, #3
 801c158:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c15a:	f3ef 8310 	mrs	r3, PRIMASK
 801c15e:	613b      	str	r3, [r7, #16]
  return(result);
 801c160:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c162:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c164:	b672      	cpsid	i
}
 801c166:	46c0      	nop			; (mov r8, r8)
  
  switch( state )
 801c168:	1cfb      	adds	r3, r7, #3
 801c16a:	781b      	ldrb	r3, [r3, #0]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d008      	beq.n	801c182 <UTIL_LPM_SetStopMode+0x36>
 801c170:	2b01      	cmp	r3, #1
 801c172:	d10e      	bne.n	801c192 <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c174:	4b0c      	ldr	r3, [pc, #48]	; (801c1a8 <UTIL_LPM_SetStopMode+0x5c>)
 801c176:	681a      	ldr	r2, [r3, #0]
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	431a      	orrs	r2, r3
 801c17c:	4b0a      	ldr	r3, [pc, #40]	; (801c1a8 <UTIL_LPM_SetStopMode+0x5c>)
 801c17e:	601a      	str	r2, [r3, #0]
      break;
 801c180:	e008      	b.n	801c194 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	43da      	mvns	r2, r3
 801c186:	4b08      	ldr	r3, [pc, #32]	; (801c1a8 <UTIL_LPM_SetStopMode+0x5c>)
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	401a      	ands	r2, r3
 801c18c:	4b06      	ldr	r3, [pc, #24]	; (801c1a8 <UTIL_LPM_SetStopMode+0x5c>)
 801c18e:	601a      	str	r2, [r3, #0]
      break;
 801c190:	e000      	b.n	801c194 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801c192:	46c0      	nop			; (mov r8, r8)
 801c194:	697b      	ldr	r3, [r7, #20]
 801c196:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	f383 8810 	msr	PRIMASK, r3
}
 801c19e:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c1a0:	46c0      	nop			; (mov r8, r8)
 801c1a2:	46bd      	mov	sp, r7
 801c1a4:	b006      	add	sp, #24
 801c1a6:	bd80      	pop	{r7, pc}
 801c1a8:	2000122c 	.word	0x2000122c

0801c1ac <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c1ac:	b580      	push	{r7, lr}
 801c1ae:	b086      	sub	sp, #24
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	6078      	str	r0, [r7, #4]
 801c1b4:	000a      	movs	r2, r1
 801c1b6:	1cfb      	adds	r3, r7, #3
 801c1b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1ba:	f3ef 8310 	mrs	r3, PRIMASK
 801c1be:	613b      	str	r3, [r7, #16]
  return(result);
 801c1c0:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c1c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1c4:	b672      	cpsid	i
}
 801c1c6:	46c0      	nop			; (mov r8, r8)
  
  switch(state)
 801c1c8:	1cfb      	adds	r3, r7, #3
 801c1ca:	781b      	ldrb	r3, [r3, #0]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d008      	beq.n	801c1e2 <UTIL_LPM_SetOffMode+0x36>
 801c1d0:	2b01      	cmp	r3, #1
 801c1d2:	d10e      	bne.n	801c1f2 <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c1d4:	4b0c      	ldr	r3, [pc, #48]	; (801c208 <UTIL_LPM_SetOffMode+0x5c>)
 801c1d6:	681a      	ldr	r2, [r3, #0]
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	431a      	orrs	r2, r3
 801c1dc:	4b0a      	ldr	r3, [pc, #40]	; (801c208 <UTIL_LPM_SetOffMode+0x5c>)
 801c1de:	601a      	str	r2, [r3, #0]
      break;
 801c1e0:	e008      	b.n	801c1f4 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	43da      	mvns	r2, r3
 801c1e6:	4b08      	ldr	r3, [pc, #32]	; (801c208 <UTIL_LPM_SetOffMode+0x5c>)
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	401a      	ands	r2, r3
 801c1ec:	4b06      	ldr	r3, [pc, #24]	; (801c208 <UTIL_LPM_SetOffMode+0x5c>)
 801c1ee:	601a      	str	r2, [r3, #0]
      break;
 801c1f0:	e000      	b.n	801c1f4 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801c1f2:	46c0      	nop			; (mov r8, r8)
 801c1f4:	697b      	ldr	r3, [r7, #20]
 801c1f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	f383 8810 	msr	PRIMASK, r3
}
 801c1fe:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c200:	46c0      	nop			; (mov r8, r8)
 801c202:	46bd      	mov	sp, r7
 801c204:	b006      	add	sp, #24
 801c206:	bd80      	pop	{r7, pc}
 801c208:	20001230 	.word	0x20001230

0801c20c <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b084      	sub	sp, #16
 801c210:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c212:	f3ef 8310 	mrs	r3, PRIMASK
 801c216:	607b      	str	r3, [r7, #4]
  return(result);
 801c218:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c21a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801c21c:	b672      	cpsid	i
}
 801c21e:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c220:	4b11      	ldr	r3, [pc, #68]	; (801c268 <UTIL_LPM_GetMode+0x5c>)
 801c222:	681b      	ldr	r3, [r3, #0]
 801c224:	2b00      	cmp	r3, #0
 801c226:	d004      	beq.n	801c232 <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801c228:	230f      	movs	r3, #15
 801c22a:	18fb      	adds	r3, r7, r3
 801c22c:	2200      	movs	r2, #0
 801c22e:	701a      	strb	r2, [r3, #0]
 801c230:	e00c      	b.n	801c24c <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c232:	4b0e      	ldr	r3, [pc, #56]	; (801c26c <UTIL_LPM_GetMode+0x60>)
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	2b00      	cmp	r3, #0
 801c238:	d004      	beq.n	801c244 <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801c23a:	230f      	movs	r3, #15
 801c23c:	18fb      	adds	r3, r7, r3
 801c23e:	2201      	movs	r2, #1
 801c240:	701a      	strb	r2, [r3, #0]
 801c242:	e003      	b.n	801c24c <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801c244:	230f      	movs	r3, #15
 801c246:	18fb      	adds	r3, r7, r3
 801c248:	2202      	movs	r2, #2
 801c24a:	701a      	strb	r2, [r3, #0]
 801c24c:	68bb      	ldr	r3, [r7, #8]
 801c24e:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c250:	683b      	ldr	r3, [r7, #0]
 801c252:	f383 8810 	msr	PRIMASK, r3
}
 801c256:	46c0      	nop			; (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801c258:	230f      	movs	r3, #15
 801c25a:	18fb      	adds	r3, r7, r3
 801c25c:	781b      	ldrb	r3, [r3, #0]
}
 801c25e:	0018      	movs	r0, r3
 801c260:	46bd      	mov	sp, r7
 801c262:	b004      	add	sp, #16
 801c264:	bd80      	pop	{r7, pc}
 801c266:	46c0      	nop			; (mov r8, r8)
 801c268:	2000122c 	.word	0x2000122c
 801c26c:	20001230 	.word	0x20001230

0801c270 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b084      	sub	sp, #16
 801c274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c276:	f3ef 8310 	mrs	r3, PRIMASK
 801c27a:	60bb      	str	r3, [r7, #8]
  return(result);
 801c27c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c27e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c280:	b672      	cpsid	i
}
 801c282:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c284:	4b12      	ldr	r3, [pc, #72]	; (801c2d0 <UTIL_LPM_EnterLowPower+0x60>)
 801c286:	681b      	ldr	r3, [r3, #0]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d006      	beq.n	801c29a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c28c:	4b11      	ldr	r3, [pc, #68]	; (801c2d4 <UTIL_LPM_EnterLowPower+0x64>)
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c292:	4b10      	ldr	r3, [pc, #64]	; (801c2d4 <UTIL_LPM_EnterLowPower+0x64>)
 801c294:	685b      	ldr	r3, [r3, #4]
 801c296:	4798      	blx	r3
 801c298:	e010      	b.n	801c2bc <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c29a:	4b0f      	ldr	r3, [pc, #60]	; (801c2d8 <UTIL_LPM_EnterLowPower+0x68>)
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d006      	beq.n	801c2b0 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c2a2:	4b0c      	ldr	r3, [pc, #48]	; (801c2d4 <UTIL_LPM_EnterLowPower+0x64>)
 801c2a4:	689b      	ldr	r3, [r3, #8]
 801c2a6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c2a8:	4b0a      	ldr	r3, [pc, #40]	; (801c2d4 <UTIL_LPM_EnterLowPower+0x64>)
 801c2aa:	68db      	ldr	r3, [r3, #12]
 801c2ac:	4798      	blx	r3
 801c2ae:	e005      	b.n	801c2bc <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c2b0:	4b08      	ldr	r3, [pc, #32]	; (801c2d4 <UTIL_LPM_EnterLowPower+0x64>)
 801c2b2:	691b      	ldr	r3, [r3, #16]
 801c2b4:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c2b6:	4b07      	ldr	r3, [pc, #28]	; (801c2d4 <UTIL_LPM_EnterLowPower+0x64>)
 801c2b8:	695b      	ldr	r3, [r3, #20]
 801c2ba:	4798      	blx	r3
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	f383 8810 	msr	PRIMASK, r3
}
 801c2c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c2c8:	46c0      	nop			; (mov r8, r8)
 801c2ca:	46bd      	mov	sp, r7
 801c2cc:	b004      	add	sp, #16
 801c2ce:	bd80      	pop	{r7, pc}
 801c2d0:	2000122c 	.word	0x2000122c
 801c2d4:	0801e460 	.word	0x0801e460
 801c2d8:	20001230 	.word	0x20001230

0801c2dc <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b086      	sub	sp, #24
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	60f8      	str	r0, [r7, #12]
 801c2e4:	60b9      	str	r1, [r7, #8]
 801c2e6:	1dbb      	adds	r3, r7, #6
 801c2e8:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c2ea:	68fb      	ldr	r3, [r7, #12]
 801c2ec:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c2ee:	68bb      	ldr	r3, [r7, #8]
 801c2f0:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c2f2:	e007      	b.n	801c304 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c2f4:	693a      	ldr	r2, [r7, #16]
 801c2f6:	1c53      	adds	r3, r2, #1
 801c2f8:	613b      	str	r3, [r7, #16]
 801c2fa:	697b      	ldr	r3, [r7, #20]
 801c2fc:	1c59      	adds	r1, r3, #1
 801c2fe:	6179      	str	r1, [r7, #20]
 801c300:	7812      	ldrb	r2, [r2, #0]
 801c302:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c304:	1dbb      	adds	r3, r7, #6
 801c306:	881b      	ldrh	r3, [r3, #0]
 801c308:	1dba      	adds	r2, r7, #6
 801c30a:	1e59      	subs	r1, r3, #1
 801c30c:	8011      	strh	r1, [r2, #0]
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d1f0      	bne.n	801c2f4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c312:	46c0      	nop			; (mov r8, r8)
 801c314:	46c0      	nop			; (mov r8, r8)
 801c316:	46bd      	mov	sp, r7
 801c318:	b006      	add	sp, #24
 801c31a:	bd80      	pop	{r7, pc}

0801c31c <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c31c:	b580      	push	{r7, lr}
 801c31e:	b084      	sub	sp, #16
 801c320:	af00      	add	r7, sp, #0
 801c322:	6078      	str	r0, [r7, #4]
 801c324:	0008      	movs	r0, r1
 801c326:	0011      	movs	r1, r2
 801c328:	1cfb      	adds	r3, r7, #3
 801c32a:	1c02      	adds	r2, r0, #0
 801c32c:	701a      	strb	r2, [r3, #0]
 801c32e:	003b      	movs	r3, r7
 801c330:	1c0a      	adds	r2, r1, #0
 801c332:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c338:	e005      	b.n	801c346 <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801c33a:	68fb      	ldr	r3, [r7, #12]
 801c33c:	1c5a      	adds	r2, r3, #1
 801c33e:	60fa      	str	r2, [r7, #12]
 801c340:	1cfa      	adds	r2, r7, #3
 801c342:	7812      	ldrb	r2, [r2, #0]
 801c344:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c346:	003b      	movs	r3, r7
 801c348:	881b      	ldrh	r3, [r3, #0]
 801c34a:	003a      	movs	r2, r7
 801c34c:	1e59      	subs	r1, r3, #1
 801c34e:	8011      	strh	r1, [r2, #0]
 801c350:	2b00      	cmp	r3, #0
 801c352:	d1f2      	bne.n	801c33a <UTIL_MEM_set_8+0x1e>
  }
}
 801c354:	46c0      	nop			; (mov r8, r8)
 801c356:	46c0      	nop			; (mov r8, r8)
 801c358:	46bd      	mov	sp, r7
 801c35a:	b004      	add	sp, #16
 801c35c:	bd80      	pop	{r7, pc}
	...

0801c360 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b08c      	sub	sp, #48	; 0x30
 801c364:	af00      	add	r7, sp, #0
 801c366:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c368:	4b66      	ldr	r3, [pc, #408]	; (801c504 <UTIL_SEQ_Run+0x1a4>)
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c36e:	4b65      	ldr	r3, [pc, #404]	; (801c504 <UTIL_SEQ_Run+0x1a4>)
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	687a      	ldr	r2, [r7, #4]
 801c374:	401a      	ands	r2, r3
 801c376:	4b63      	ldr	r3, [pc, #396]	; (801c504 <UTIL_SEQ_Run+0x1a4>)
 801c378:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c37a:	e086      	b.n	801c48a <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801c37c:	2300      	movs	r3, #0
 801c37e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c380:	e002      	b.n	801c388 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c384:	3301      	adds	r3, #1
 801c386:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c388:	4b5f      	ldr	r3, [pc, #380]	; (801c508 <UTIL_SEQ_Run+0x1a8>)
 801c38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c38c:	00d2      	lsls	r2, r2, #3
 801c38e:	58d2      	ldr	r2, [r2, r3]
 801c390:	4b5e      	ldr	r3, [pc, #376]	; (801c50c <UTIL_SEQ_Run+0x1ac>)
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	401a      	ands	r2, r3
 801c396:	4b5b      	ldr	r3, [pc, #364]	; (801c504 <UTIL_SEQ_Run+0x1a4>)
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	4013      	ands	r3, r2
 801c39c:	d0f1      	beq.n	801c382 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801c39e:	4b5a      	ldr	r3, [pc, #360]	; (801c508 <UTIL_SEQ_Run+0x1a8>)
 801c3a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c3a2:	00d2      	lsls	r2, r2, #3
 801c3a4:	58d2      	ldr	r2, [r2, r3]
 801c3a6:	4b59      	ldr	r3, [pc, #356]	; (801c50c <UTIL_SEQ_Run+0x1ac>)
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	401a      	ands	r2, r3
 801c3ac:	4b55      	ldr	r3, [pc, #340]	; (801c504 <UTIL_SEQ_Run+0x1a4>)
 801c3ae:	681b      	ldr	r3, [r3, #0]
 801c3b0:	4013      	ands	r3, r2
 801c3b2:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c3b4:	4a54      	ldr	r2, [pc, #336]	; (801c508 <UTIL_SEQ_Run+0x1a8>)
 801c3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3b8:	00db      	lsls	r3, r3, #3
 801c3ba:	18d3      	adds	r3, r2, r3
 801c3bc:	3304      	adds	r3, #4
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3c2:	4013      	ands	r3, r2
 801c3c4:	d107      	bne.n	801c3d6 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c3c6:	4a50      	ldr	r2, [pc, #320]	; (801c508 <UTIL_SEQ_Run+0x1a8>)
 801c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3ca:	00db      	lsls	r3, r3, #3
 801c3cc:	18d3      	adds	r3, r2, r3
 801c3ce:	3304      	adds	r3, #4
 801c3d0:	2201      	movs	r2, #1
 801c3d2:	4252      	negs	r2, r2
 801c3d4:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c3d6:	4a4c      	ldr	r2, [pc, #304]	; (801c508 <UTIL_SEQ_Run+0x1a8>)
 801c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3da:	00db      	lsls	r3, r3, #3
 801c3dc:	18d3      	adds	r3, r2, r3
 801c3de:	3304      	adds	r3, #4
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c3e4:	4013      	ands	r3, r2
 801c3e6:	0018      	movs	r0, r3
 801c3e8:	f000 f8f6 	bl	801c5d8 <SEQ_BitPosition>
 801c3ec:	0003      	movs	r3, r0
 801c3ee:	001a      	movs	r2, r3
 801c3f0:	4b47      	ldr	r3, [pc, #284]	; (801c510 <UTIL_SEQ_Run+0x1b0>)
 801c3f2:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c3f4:	4a44      	ldr	r2, [pc, #272]	; (801c508 <UTIL_SEQ_Run+0x1a8>)
 801c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c3f8:	00db      	lsls	r3, r3, #3
 801c3fa:	18d3      	adds	r3, r2, r3
 801c3fc:	3304      	adds	r3, #4
 801c3fe:	681a      	ldr	r2, [r3, #0]
 801c400:	4b43      	ldr	r3, [pc, #268]	; (801c510 <UTIL_SEQ_Run+0x1b0>)
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	2101      	movs	r1, #1
 801c406:	4099      	lsls	r1, r3
 801c408:	000b      	movs	r3, r1
 801c40a:	43db      	mvns	r3, r3
 801c40c:	401a      	ands	r2, r3
 801c40e:	493e      	ldr	r1, [pc, #248]	; (801c508 <UTIL_SEQ_Run+0x1a8>)
 801c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c412:	00db      	lsls	r3, r3, #3
 801c414:	18cb      	adds	r3, r1, r3
 801c416:	3304      	adds	r3, #4
 801c418:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c41a:	f3ef 8310 	mrs	r3, PRIMASK
 801c41e:	61bb      	str	r3, [r7, #24]
  return(result);
 801c420:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c422:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c424:	b672      	cpsid	i
}
 801c426:	46c0      	nop			; (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c428:	4b39      	ldr	r3, [pc, #228]	; (801c510 <UTIL_SEQ_Run+0x1b0>)
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	2201      	movs	r2, #1
 801c42e:	409a      	lsls	r2, r3
 801c430:	0013      	movs	r3, r2
 801c432:	43da      	mvns	r2, r3
 801c434:	4b37      	ldr	r3, [pc, #220]	; (801c514 <UTIL_SEQ_Run+0x1b4>)
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	401a      	ands	r2, r3
 801c43a:	4b36      	ldr	r3, [pc, #216]	; (801c514 <UTIL_SEQ_Run+0x1b4>)
 801c43c:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c43e:	2302      	movs	r3, #2
 801c440:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c442:	e013      	b.n	801c46c <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c446:	1e5a      	subs	r2, r3, #1
 801c448:	4b2f      	ldr	r3, [pc, #188]	; (801c508 <UTIL_SEQ_Run+0x1a8>)
 801c44a:	00d2      	lsls	r2, r2, #3
 801c44c:	58d1      	ldr	r1, [r2, r3]
 801c44e:	4b30      	ldr	r3, [pc, #192]	; (801c510 <UTIL_SEQ_Run+0x1b0>)
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	2201      	movs	r2, #1
 801c454:	409a      	lsls	r2, r3
 801c456:	0013      	movs	r3, r2
 801c458:	43db      	mvns	r3, r3
 801c45a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c45c:	3a01      	subs	r2, #1
 801c45e:	4019      	ands	r1, r3
 801c460:	4b29      	ldr	r3, [pc, #164]	; (801c508 <UTIL_SEQ_Run+0x1a8>)
 801c462:	00d2      	lsls	r2, r2, #3
 801c464:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c468:	3b01      	subs	r3, #1
 801c46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d1e8      	bne.n	801c444 <UTIL_SEQ_Run+0xe4>
 801c472:	6a3b      	ldr	r3, [r7, #32]
 801c474:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c476:	697b      	ldr	r3, [r7, #20]
 801c478:	f383 8810 	msr	PRIMASK, r3
}
 801c47c:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c47e:	4b24      	ldr	r3, [pc, #144]	; (801c510 <UTIL_SEQ_Run+0x1b0>)
 801c480:	681a      	ldr	r2, [r3, #0]
 801c482:	4b25      	ldr	r3, [pc, #148]	; (801c518 <UTIL_SEQ_Run+0x1b8>)
 801c484:	0092      	lsls	r2, r2, #2
 801c486:	58d3      	ldr	r3, [r2, r3]
 801c488:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c48a:	4b22      	ldr	r3, [pc, #136]	; (801c514 <UTIL_SEQ_Run+0x1b4>)
 801c48c:	681a      	ldr	r2, [r3, #0]
 801c48e:	4b1f      	ldr	r3, [pc, #124]	; (801c50c <UTIL_SEQ_Run+0x1ac>)
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	401a      	ands	r2, r3
 801c494:	4b1b      	ldr	r3, [pc, #108]	; (801c504 <UTIL_SEQ_Run+0x1a4>)
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	4013      	ands	r3, r2
 801c49a:	d006      	beq.n	801c4aa <UTIL_SEQ_Run+0x14a>
 801c49c:	4b1f      	ldr	r3, [pc, #124]	; (801c51c <UTIL_SEQ_Run+0x1bc>)
 801c49e:	681a      	ldr	r2, [r3, #0]
 801c4a0:	4b1f      	ldr	r3, [pc, #124]	; (801c520 <UTIL_SEQ_Run+0x1c0>)
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	4013      	ands	r3, r2
 801c4a6:	d100      	bne.n	801c4aa <UTIL_SEQ_Run+0x14a>
 801c4a8:	e768      	b.n	801c37c <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c4aa:	4b19      	ldr	r3, [pc, #100]	; (801c510 <UTIL_SEQ_Run+0x1b0>)
 801c4ac:	2201      	movs	r2, #1
 801c4ae:	4252      	negs	r2, r2
 801c4b0:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c4b2:	f000 f887 	bl	801c5c4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4b6:	f3ef 8310 	mrs	r3, PRIMASK
 801c4ba:	613b      	str	r3, [r7, #16]
  return(result);
 801c4bc:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c4be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4c0:	b672      	cpsid	i
}
 801c4c2:	46c0      	nop			; (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c4c4:	4b13      	ldr	r3, [pc, #76]	; (801c514 <UTIL_SEQ_Run+0x1b4>)
 801c4c6:	681a      	ldr	r2, [r3, #0]
 801c4c8:	4b10      	ldr	r3, [pc, #64]	; (801c50c <UTIL_SEQ_Run+0x1ac>)
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	401a      	ands	r2, r3
 801c4ce:	4b0d      	ldr	r3, [pc, #52]	; (801c504 <UTIL_SEQ_Run+0x1a4>)
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	4013      	ands	r3, r2
 801c4d4:	d107      	bne.n	801c4e6 <UTIL_SEQ_Run+0x186>
 801c4d6:	4b11      	ldr	r3, [pc, #68]	; (801c51c <UTIL_SEQ_Run+0x1bc>)
 801c4d8:	681a      	ldr	r2, [r3, #0]
 801c4da:	4b11      	ldr	r3, [pc, #68]	; (801c520 <UTIL_SEQ_Run+0x1c0>)
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	4013      	ands	r3, r2
 801c4e0:	d101      	bne.n	801c4e6 <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801c4e2:	f7e8 fc3f 	bl	8004d64 <UTIL_SEQ_Idle>
 801c4e6:	69fb      	ldr	r3, [r7, #28]
 801c4e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	f383 8810 	msr	PRIMASK, r3
}
 801c4f0:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c4f2:	f000 f86c 	bl	801c5ce <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c4f6:	4b03      	ldr	r3, [pc, #12]	; (801c504 <UTIL_SEQ_Run+0x1a4>)
 801c4f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c4fa:	601a      	str	r2, [r3, #0]

  return;
 801c4fc:	46c0      	nop			; (mov r8, r8)
}
 801c4fe:	46bd      	mov	sp, r7
 801c500:	b00c      	add	sp, #48	; 0x30
 801c502:	bd80      	pop	{r7, pc}
 801c504:	200001cc 	.word	0x200001cc
 801c508:	200012c4 	.word	0x200012c4
 801c50c:	200001c8 	.word	0x200001c8
 801c510:	20001240 	.word	0x20001240
 801c514:	20001234 	.word	0x20001234
 801c518:	20001244 	.word	0x20001244
 801c51c:	20001238 	.word	0x20001238
 801c520:	2000123c 	.word	0x2000123c

0801c524 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c524:	b580      	push	{r7, lr}
 801c526:	b088      	sub	sp, #32
 801c528:	af00      	add	r7, sp, #0
 801c52a:	60f8      	str	r0, [r7, #12]
 801c52c:	60b9      	str	r1, [r7, #8]
 801c52e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c530:	f3ef 8310 	mrs	r3, PRIMASK
 801c534:	617b      	str	r3, [r7, #20]
  return(result);
 801c536:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c53a:	b672      	cpsid	i
}
 801c53c:	46c0      	nop			; (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	0018      	movs	r0, r3
 801c542:	f000 f849 	bl	801c5d8 <SEQ_BitPosition>
 801c546:	0003      	movs	r3, r0
 801c548:	001a      	movs	r2, r3
 801c54a:	4b07      	ldr	r3, [pc, #28]	; (801c568 <UTIL_SEQ_RegTask+0x44>)
 801c54c:	0092      	lsls	r2, r2, #2
 801c54e:	6879      	ldr	r1, [r7, #4]
 801c550:	50d1      	str	r1, [r2, r3]
 801c552:	69fb      	ldr	r3, [r7, #28]
 801c554:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c556:	69bb      	ldr	r3, [r7, #24]
 801c558:	f383 8810 	msr	PRIMASK, r3
}
 801c55c:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c55e:	46c0      	nop			; (mov r8, r8)
}
 801c560:	46bd      	mov	sp, r7
 801c562:	b008      	add	sp, #32
 801c564:	bd80      	pop	{r7, pc}
 801c566:	46c0      	nop			; (mov r8, r8)
 801c568:	20001244 	.word	0x20001244

0801c56c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c56c:	b580      	push	{r7, lr}
 801c56e:	b086      	sub	sp, #24
 801c570:	af00      	add	r7, sp, #0
 801c572:	6078      	str	r0, [r7, #4]
 801c574:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c576:	f3ef 8310 	mrs	r3, PRIMASK
 801c57a:	60fb      	str	r3, [r7, #12]
  return(result);
 801c57c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c57e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c580:	b672      	cpsid	i
}
 801c582:	46c0      	nop			; (mov r8, r8)

  TaskSet |= TaskId_bm;
 801c584:	4b0d      	ldr	r3, [pc, #52]	; (801c5bc <UTIL_SEQ_SetTask+0x50>)
 801c586:	681a      	ldr	r2, [r3, #0]
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	431a      	orrs	r2, r3
 801c58c:	4b0b      	ldr	r3, [pc, #44]	; (801c5bc <UTIL_SEQ_SetTask+0x50>)
 801c58e:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c590:	4b0b      	ldr	r3, [pc, #44]	; (801c5c0 <UTIL_SEQ_SetTask+0x54>)
 801c592:	683a      	ldr	r2, [r7, #0]
 801c594:	00d2      	lsls	r2, r2, #3
 801c596:	58d2      	ldr	r2, [r2, r3]
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	431a      	orrs	r2, r3
 801c59c:	0011      	movs	r1, r2
 801c59e:	4b08      	ldr	r3, [pc, #32]	; (801c5c0 <UTIL_SEQ_SetTask+0x54>)
 801c5a0:	683a      	ldr	r2, [r7, #0]
 801c5a2:	00d2      	lsls	r2, r2, #3
 801c5a4:	50d1      	str	r1, [r2, r3]
 801c5a6:	697b      	ldr	r3, [r7, #20]
 801c5a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5aa:	693b      	ldr	r3, [r7, #16]
 801c5ac:	f383 8810 	msr	PRIMASK, r3
}
 801c5b0:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c5b2:	46c0      	nop			; (mov r8, r8)
}
 801c5b4:	46bd      	mov	sp, r7
 801c5b6:	b006      	add	sp, #24
 801c5b8:	bd80      	pop	{r7, pc}
 801c5ba:	46c0      	nop			; (mov r8, r8)
 801c5bc:	20001234 	.word	0x20001234
 801c5c0:	200012c4 	.word	0x200012c4

0801c5c4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c5c8:	46c0      	nop			; (mov r8, r8)
}
 801c5ca:	46bd      	mov	sp, r7
 801c5cc:	bd80      	pop	{r7, pc}

0801c5ce <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c5ce:	b580      	push	{r7, lr}
 801c5d0:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c5d2:	46c0      	nop			; (mov r8, r8)
}
 801c5d4:	46bd      	mov	sp, r7
 801c5d6:	bd80      	pop	{r7, pc}

0801c5d8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c5d8:	b580      	push	{r7, lr}
 801c5da:	b084      	sub	sp, #16
 801c5dc:	af00      	add	r7, sp, #0
 801c5de:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801c5e0:	210f      	movs	r1, #15
 801c5e2:	187b      	adds	r3, r7, r1
 801c5e4:	2200      	movs	r2, #0
 801c5e6:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	0c1b      	lsrs	r3, r3, #16
 801c5ec:	041b      	lsls	r3, r3, #16
 801c5ee:	d105      	bne.n	801c5fc <SEQ_BitPosition+0x24>
 801c5f0:	187b      	adds	r3, r7, r1
 801c5f2:	2210      	movs	r2, #16
 801c5f4:	701a      	strb	r2, [r3, #0]
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	041b      	lsls	r3, r3, #16
 801c5fa:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	0e1b      	lsrs	r3, r3, #24
 801c600:	061b      	lsls	r3, r3, #24
 801c602:	d108      	bne.n	801c616 <SEQ_BitPosition+0x3e>
 801c604:	220f      	movs	r2, #15
 801c606:	18bb      	adds	r3, r7, r2
 801c608:	18ba      	adds	r2, r7, r2
 801c60a:	7812      	ldrb	r2, [r2, #0]
 801c60c:	3208      	adds	r2, #8
 801c60e:	701a      	strb	r2, [r3, #0]
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	021b      	lsls	r3, r3, #8
 801c614:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	0f1b      	lsrs	r3, r3, #28
 801c61a:	071b      	lsls	r3, r3, #28
 801c61c:	d108      	bne.n	801c630 <SEQ_BitPosition+0x58>
 801c61e:	220f      	movs	r2, #15
 801c620:	18bb      	adds	r3, r7, r2
 801c622:	18ba      	adds	r2, r7, r2
 801c624:	7812      	ldrb	r2, [r2, #0]
 801c626:	3204      	adds	r2, #4
 801c628:	701a      	strb	r2, [r3, #0]
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	011b      	lsls	r3, r3, #4
 801c62e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	0f1b      	lsrs	r3, r3, #28
 801c634:	4a08      	ldr	r2, [pc, #32]	; (801c658 <SEQ_BitPosition+0x80>)
 801c636:	5cd1      	ldrb	r1, [r2, r3]
 801c638:	200f      	movs	r0, #15
 801c63a:	183b      	adds	r3, r7, r0
 801c63c:	183a      	adds	r2, r7, r0
 801c63e:	7812      	ldrb	r2, [r2, #0]
 801c640:	188a      	adds	r2, r1, r2
 801c642:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801c644:	183b      	adds	r3, r7, r0
 801c646:	781b      	ldrb	r3, [r3, #0]
 801c648:	221f      	movs	r2, #31
 801c64a:	1ad3      	subs	r3, r2, r3
 801c64c:	b2db      	uxtb	r3, r3
}
 801c64e:	0018      	movs	r0, r3
 801c650:	46bd      	mov	sp, r7
 801c652:	b004      	add	sp, #16
 801c654:	bd80      	pop	{r7, pc}
 801c656:	46c0      	nop			; (mov r8, r8)
 801c658:	0801f224 	.word	0x0801f224

0801c65c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c65c:	b082      	sub	sp, #8
 801c65e:	b580      	push	{r7, lr}
 801c660:	b086      	sub	sp, #24
 801c662:	af00      	add	r7, sp, #0
 801c664:	60f8      	str	r0, [r7, #12]
 801c666:	1d38      	adds	r0, r7, #4
 801c668:	6001      	str	r1, [r0, #0]
 801c66a:	6042      	str	r2, [r0, #4]
 801c66c:	2204      	movs	r2, #4
 801c66e:	2120      	movs	r1, #32
 801c670:	468c      	mov	ip, r1
 801c672:	44bc      	add	ip, r7
 801c674:	4462      	add	r2, ip
 801c676:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c678:	2110      	movs	r1, #16
 801c67a:	187b      	adds	r3, r7, r1
 801c67c:	2200      	movs	r2, #0
 801c67e:	601a      	str	r2, [r3, #0]
 801c680:	187b      	adds	r3, r7, r1
 801c682:	2200      	movs	r2, #0
 801c684:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801c686:	1d3b      	adds	r3, r7, #4
 801c688:	681a      	ldr	r2, [r3, #0]
 801c68a:	2304      	movs	r3, #4
 801c68c:	2020      	movs	r0, #32
 801c68e:	4684      	mov	ip, r0
 801c690:	44bc      	add	ip, r7
 801c692:	4463      	add	r3, ip
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	18d2      	adds	r2, r2, r3
 801c698:	187b      	adds	r3, r7, r1
 801c69a:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c69c:	1d3b      	adds	r3, r7, #4
 801c69e:	2204      	movs	r2, #4
 801c6a0:	5e9b      	ldrsh	r3, [r3, r2]
 801c6a2:	b29a      	uxth	r2, r3
 801c6a4:	2304      	movs	r3, #4
 801c6a6:	2020      	movs	r0, #32
 801c6a8:	4684      	mov	ip, r0
 801c6aa:	44bc      	add	ip, r7
 801c6ac:	4463      	add	r3, ip
 801c6ae:	2004      	movs	r0, #4
 801c6b0:	5e1b      	ldrsh	r3, [r3, r0]
 801c6b2:	b29b      	uxth	r3, r3
 801c6b4:	18d3      	adds	r3, r2, r3
 801c6b6:	b29b      	uxth	r3, r3
 801c6b8:	b21a      	sxth	r2, r3
 801c6ba:	187b      	adds	r3, r7, r1
 801c6bc:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801c6be:	187b      	adds	r3, r7, r1
 801c6c0:	2204      	movs	r2, #4
 801c6c2:	5e9a      	ldrsh	r2, [r3, r2]
 801c6c4:	23fa      	movs	r3, #250	; 0xfa
 801c6c6:	009b      	lsls	r3, r3, #2
 801c6c8:	429a      	cmp	r2, r3
 801c6ca:	db0f      	blt.n	801c6ec <SysTimeAdd+0x90>
  {
    c.Seconds++;
 801c6cc:	187b      	adds	r3, r7, r1
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	1c5a      	adds	r2, r3, #1
 801c6d2:	187b      	adds	r3, r7, r1
 801c6d4:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801c6d6:	187b      	adds	r3, r7, r1
 801c6d8:	2204      	movs	r2, #4
 801c6da:	5e9b      	ldrsh	r3, [r3, r2]
 801c6dc:	b29b      	uxth	r3, r3
 801c6de:	4a09      	ldr	r2, [pc, #36]	; (801c704 <SysTimeAdd+0xa8>)
 801c6e0:	4694      	mov	ip, r2
 801c6e2:	4463      	add	r3, ip
 801c6e4:	b29b      	uxth	r3, r3
 801c6e6:	b21a      	sxth	r2, r3
 801c6e8:	187b      	adds	r3, r7, r1
 801c6ea:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	2210      	movs	r2, #16
 801c6f0:	18ba      	adds	r2, r7, r2
 801c6f2:	ca03      	ldmia	r2!, {r0, r1}
 801c6f4:	c303      	stmia	r3!, {r0, r1}
}
 801c6f6:	68f8      	ldr	r0, [r7, #12]
 801c6f8:	46bd      	mov	sp, r7
 801c6fa:	b006      	add	sp, #24
 801c6fc:	bc80      	pop	{r7}
 801c6fe:	bc08      	pop	{r3}
 801c700:	b002      	add	sp, #8
 801c702:	4718      	bx	r3
 801c704:	fffffc18 	.word	0xfffffc18

0801c708 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c708:	b082      	sub	sp, #8
 801c70a:	b580      	push	{r7, lr}
 801c70c:	b086      	sub	sp, #24
 801c70e:	af00      	add	r7, sp, #0
 801c710:	60f8      	str	r0, [r7, #12]
 801c712:	1d38      	adds	r0, r7, #4
 801c714:	6001      	str	r1, [r0, #0]
 801c716:	6042      	str	r2, [r0, #4]
 801c718:	2204      	movs	r2, #4
 801c71a:	2120      	movs	r1, #32
 801c71c:	468c      	mov	ip, r1
 801c71e:	44bc      	add	ip, r7
 801c720:	4462      	add	r2, ip
 801c722:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c724:	2110      	movs	r1, #16
 801c726:	187b      	adds	r3, r7, r1
 801c728:	2200      	movs	r2, #0
 801c72a:	601a      	str	r2, [r3, #0]
 801c72c:	187b      	adds	r3, r7, r1
 801c72e:	2200      	movs	r2, #0
 801c730:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801c732:	1d3b      	adds	r3, r7, #4
 801c734:	681a      	ldr	r2, [r3, #0]
 801c736:	2304      	movs	r3, #4
 801c738:	2020      	movs	r0, #32
 801c73a:	4684      	mov	ip, r0
 801c73c:	44bc      	add	ip, r7
 801c73e:	4463      	add	r3, ip
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	1ad2      	subs	r2, r2, r3
 801c744:	187b      	adds	r3, r7, r1
 801c746:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c748:	1d3b      	adds	r3, r7, #4
 801c74a:	2204      	movs	r2, #4
 801c74c:	5e9b      	ldrsh	r3, [r3, r2]
 801c74e:	b29a      	uxth	r2, r3
 801c750:	2304      	movs	r3, #4
 801c752:	2020      	movs	r0, #32
 801c754:	4684      	mov	ip, r0
 801c756:	44bc      	add	ip, r7
 801c758:	4463      	add	r3, ip
 801c75a:	2004      	movs	r0, #4
 801c75c:	5e1b      	ldrsh	r3, [r3, r0]
 801c75e:	b29b      	uxth	r3, r3
 801c760:	1ad3      	subs	r3, r2, r3
 801c762:	b29b      	uxth	r3, r3
 801c764:	b21a      	sxth	r2, r3
 801c766:	187b      	adds	r3, r7, r1
 801c768:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801c76a:	187b      	adds	r3, r7, r1
 801c76c:	2204      	movs	r2, #4
 801c76e:	5e9b      	ldrsh	r3, [r3, r2]
 801c770:	2b00      	cmp	r3, #0
 801c772:	da10      	bge.n	801c796 <SysTimeSub+0x8e>
  {
    c.Seconds--;
 801c774:	187b      	adds	r3, r7, r1
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	1e5a      	subs	r2, r3, #1
 801c77a:	187b      	adds	r3, r7, r1
 801c77c:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801c77e:	187b      	adds	r3, r7, r1
 801c780:	2204      	movs	r2, #4
 801c782:	5e9b      	ldrsh	r3, [r3, r2]
 801c784:	b29b      	uxth	r3, r3
 801c786:	22fa      	movs	r2, #250	; 0xfa
 801c788:	0092      	lsls	r2, r2, #2
 801c78a:	4694      	mov	ip, r2
 801c78c:	4463      	add	r3, ip
 801c78e:	b29b      	uxth	r3, r3
 801c790:	b21a      	sxth	r2, r3
 801c792:	187b      	adds	r3, r7, r1
 801c794:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	2210      	movs	r2, #16
 801c79a:	18ba      	adds	r2, r7, r2
 801c79c:	ca03      	ldmia	r2!, {r0, r1}
 801c79e:	c303      	stmia	r3!, {r0, r1}
}
 801c7a0:	68f8      	ldr	r0, [r7, #12]
 801c7a2:	46bd      	mov	sp, r7
 801c7a4:	b006      	add	sp, #24
 801c7a6:	bc80      	pop	{r7}
 801c7a8:	bc08      	pop	{r3}
 801c7aa:	b002      	add	sp, #8
 801c7ac:	4718      	bx	r3
	...

0801c7b0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c7b0:	b5b0      	push	{r4, r5, r7, lr}
 801c7b2:	b088      	sub	sp, #32
 801c7b4:	af02      	add	r7, sp, #8
 801c7b6:	003b      	movs	r3, r7
 801c7b8:	6018      	str	r0, [r3, #0]
 801c7ba:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c7bc:	2108      	movs	r1, #8
 801c7be:	187b      	adds	r3, r7, r1
 801c7c0:	2200      	movs	r2, #0
 801c7c2:	601a      	str	r2, [r3, #0]
 801c7c4:	187b      	adds	r3, r7, r1
 801c7c6:	2200      	movs	r2, #0
 801c7c8:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c7ca:	4b14      	ldr	r3, [pc, #80]	; (801c81c <SysTimeSet+0x6c>)
 801c7cc:	691b      	ldr	r3, [r3, #16]
 801c7ce:	000c      	movs	r4, r1
 801c7d0:	187a      	adds	r2, r7, r1
 801c7d2:	3204      	adds	r2, #4
 801c7d4:	0010      	movs	r0, r2
 801c7d6:	4798      	blx	r3
 801c7d8:	0002      	movs	r2, r0
 801c7da:	0021      	movs	r1, r4
 801c7dc:	187b      	adds	r3, r7, r1
 801c7de:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c7e0:	2510      	movs	r5, #16
 801c7e2:	197c      	adds	r4, r7, r5
 801c7e4:	187b      	adds	r3, r7, r1
 801c7e6:	003a      	movs	r2, r7
 801c7e8:	4669      	mov	r1, sp
 801c7ea:	6858      	ldr	r0, [r3, #4]
 801c7ec:	6008      	str	r0, [r1, #0]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	6811      	ldr	r1, [r2, #0]
 801c7f2:	6852      	ldr	r2, [r2, #4]
 801c7f4:	0020      	movs	r0, r4
 801c7f6:	f7ff ff87 	bl	801c708 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c7fa:	4b08      	ldr	r3, [pc, #32]	; (801c81c <SysTimeSet+0x6c>)
 801c7fc:	681a      	ldr	r2, [r3, #0]
 801c7fe:	197b      	adds	r3, r7, r5
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	0018      	movs	r0, r3
 801c804:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c806:	4b05      	ldr	r3, [pc, #20]	; (801c81c <SysTimeSet+0x6c>)
 801c808:	689b      	ldr	r3, [r3, #8]
 801c80a:	197a      	adds	r2, r7, r5
 801c80c:	2104      	movs	r1, #4
 801c80e:	5e52      	ldrsh	r2, [r2, r1]
 801c810:	0010      	movs	r0, r2
 801c812:	4798      	blx	r3
}
 801c814:	46c0      	nop			; (mov r8, r8)
 801c816:	46bd      	mov	sp, r7
 801c818:	b006      	add	sp, #24
 801c81a:	bdb0      	pop	{r4, r5, r7, pc}
 801c81c:	0801e44c 	.word	0x0801e44c

0801c820 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c820:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c822:	b08b      	sub	sp, #44	; 0x2c
 801c824:	af02      	add	r7, sp, #8
 801c826:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c828:	2518      	movs	r5, #24
 801c82a:	197b      	adds	r3, r7, r5
 801c82c:	2200      	movs	r2, #0
 801c82e:	601a      	str	r2, [r3, #0]
 801c830:	197b      	adds	r3, r7, r5
 801c832:	2200      	movs	r2, #0
 801c834:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c836:	2410      	movs	r4, #16
 801c838:	193b      	adds	r3, r7, r4
 801c83a:	2200      	movs	r2, #0
 801c83c:	601a      	str	r2, [r3, #0]
 801c83e:	193b      	adds	r3, r7, r4
 801c840:	2200      	movs	r2, #0
 801c842:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c844:	4b16      	ldr	r3, [pc, #88]	; (801c8a0 <SysTimeGet+0x80>)
 801c846:	691b      	ldr	r3, [r3, #16]
 801c848:	197a      	adds	r2, r7, r5
 801c84a:	3204      	adds	r2, #4
 801c84c:	0010      	movs	r0, r2
 801c84e:	4798      	blx	r3
 801c850:	0002      	movs	r2, r0
 801c852:	197b      	adds	r3, r7, r5
 801c854:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c856:	4b12      	ldr	r3, [pc, #72]	; (801c8a0 <SysTimeGet+0x80>)
 801c858:	68db      	ldr	r3, [r3, #12]
 801c85a:	4798      	blx	r3
 801c85c:	0003      	movs	r3, r0
 801c85e:	b21a      	sxth	r2, r3
 801c860:	2608      	movs	r6, #8
 801c862:	19bb      	adds	r3, r7, r6
 801c864:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c866:	4b0e      	ldr	r3, [pc, #56]	; (801c8a0 <SysTimeGet+0x80>)
 801c868:	685b      	ldr	r3, [r3, #4]
 801c86a:	4798      	blx	r3
 801c86c:	0002      	movs	r2, r0
 801c86e:	0031      	movs	r1, r6
 801c870:	187b      	adds	r3, r7, r1
 801c872:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c874:	0026      	movs	r6, r4
 801c876:	193c      	adds	r4, r7, r4
 801c878:	197b      	adds	r3, r7, r5
 801c87a:	187a      	adds	r2, r7, r1
 801c87c:	4669      	mov	r1, sp
 801c87e:	6858      	ldr	r0, [r3, #4]
 801c880:	6008      	str	r0, [r1, #0]
 801c882:	681b      	ldr	r3, [r3, #0]
 801c884:	6811      	ldr	r1, [r2, #0]
 801c886:	6852      	ldr	r2, [r2, #4]
 801c888:	0020      	movs	r0, r4
 801c88a:	f7ff fee7 	bl	801c65c <SysTimeAdd>

  return sysTime;
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	19ba      	adds	r2, r7, r6
 801c892:	ca03      	ldmia	r2!, {r0, r1}
 801c894:	c303      	stmia	r3!, {r0, r1}
}
 801c896:	6878      	ldr	r0, [r7, #4]
 801c898:	46bd      	mov	sp, r7
 801c89a:	b009      	add	sp, #36	; 0x24
 801c89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c89e:	46c0      	nop			; (mov r8, r8)
 801c8a0:	0801e44c 	.word	0x0801e44c

0801c8a4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c8a4:	b590      	push	{r4, r7, lr}
 801c8a6:	b085      	sub	sp, #20
 801c8a8:	af00      	add	r7, sp, #0
 801c8aa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c8ac:	2108      	movs	r1, #8
 801c8ae:	187b      	adds	r3, r7, r1
 801c8b0:	2200      	movs	r2, #0
 801c8b2:	601a      	str	r2, [r3, #0]
 801c8b4:	187b      	adds	r3, r7, r1
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c8ba:	4b09      	ldr	r3, [pc, #36]	; (801c8e0 <SysTimeGetMcuTime+0x3c>)
 801c8bc:	691b      	ldr	r3, [r3, #16]
 801c8be:	000c      	movs	r4, r1
 801c8c0:	187a      	adds	r2, r7, r1
 801c8c2:	3204      	adds	r2, #4
 801c8c4:	0010      	movs	r0, r2
 801c8c6:	4798      	blx	r3
 801c8c8:	0002      	movs	r2, r0
 801c8ca:	193b      	adds	r3, r7, r4
 801c8cc:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	193a      	adds	r2, r7, r4
 801c8d2:	ca03      	ldmia	r2!, {r0, r1}
 801c8d4:	c303      	stmia	r3!, {r0, r1}
}
 801c8d6:	6878      	ldr	r0, [r7, #4]
 801c8d8:	46bd      	mov	sp, r7
 801c8da:	b005      	add	sp, #20
 801c8dc:	bd90      	pop	{r4, r7, pc}
 801c8de:	46c0      	nop			; (mov r8, r8)
 801c8e0:	0801e44c 	.word	0x0801e44c

0801c8e4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c8e8:	4b04      	ldr	r3, [pc, #16]	; (801c8fc <UTIL_TIMER_Init+0x18>)
 801c8ea:	2200      	movs	r2, #0
 801c8ec:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c8ee:	4b04      	ldr	r3, [pc, #16]	; (801c900 <UTIL_TIMER_Init+0x1c>)
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	4798      	blx	r3
 801c8f4:	0003      	movs	r3, r0
}
 801c8f6:	0018      	movs	r0, r3
 801c8f8:	46bd      	mov	sp, r7
 801c8fa:	bd80      	pop	{r7, pc}
 801c8fc:	200012d4 	.word	0x200012d4
 801c900:	0801e420 	.word	0x0801e420

0801c904 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c904:	b580      	push	{r7, lr}
 801c906:	b084      	sub	sp, #16
 801c908:	af00      	add	r7, sp, #0
 801c90a:	60f8      	str	r0, [r7, #12]
 801c90c:	60b9      	str	r1, [r7, #8]
 801c90e:	603b      	str	r3, [r7, #0]
 801c910:	1dfb      	adds	r3, r7, #7
 801c912:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d025      	beq.n	801c966 <UTIL_TIMER_Create+0x62>
 801c91a:	683b      	ldr	r3, [r7, #0]
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d022      	beq.n	801c966 <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	2200      	movs	r2, #0
 801c924:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c926:	4b12      	ldr	r3, [pc, #72]	; (801c970 <UTIL_TIMER_Create+0x6c>)
 801c928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c92a:	68ba      	ldr	r2, [r7, #8]
 801c92c:	0010      	movs	r0, r2
 801c92e:	4798      	blx	r3
 801c930:	0002      	movs	r2, r0
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	2200      	movs	r2, #0
 801c93a:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	2200      	movs	r2, #0
 801c940:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	2200      	movs	r2, #0
 801c946:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	683a      	ldr	r2, [r7, #0]
 801c94c:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	69ba      	ldr	r2, [r7, #24]
 801c952:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	1dfa      	adds	r2, r7, #7
 801c958:	7812      	ldrb	r2, [r2, #0]
 801c95a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	2200      	movs	r2, #0
 801c960:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c962:	2300      	movs	r3, #0
 801c964:	e000      	b.n	801c968 <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c966:	2301      	movs	r3, #1
  }
}
 801c968:	0018      	movs	r0, r3
 801c96a:	46bd      	mov	sp, r7
 801c96c:	b004      	add	sp, #16
 801c96e:	bd80      	pop	{r7, pc}
 801c970:	0801e420 	.word	0x0801e420

0801c974 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c974:	b580      	push	{r7, lr}
 801c976:	b08a      	sub	sp, #40	; 0x28
 801c978:	af00      	add	r7, sp, #0
 801c97a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c97c:	2327      	movs	r3, #39	; 0x27
 801c97e:	18fb      	adds	r3, r7, r3
 801c980:	2200      	movs	r2, #0
 801c982:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	2b00      	cmp	r3, #0
 801c988:	d05d      	beq.n	801ca46 <UTIL_TIMER_Start+0xd2>
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	0018      	movs	r0, r3
 801c98e:	f000 f9cb 	bl	801cd28 <TimerExists>
 801c992:	0003      	movs	r3, r0
 801c994:	001a      	movs	r2, r3
 801c996:	2301      	movs	r3, #1
 801c998:	4053      	eors	r3, r2
 801c99a:	b2db      	uxtb	r3, r3
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d052      	beq.n	801ca46 <UTIL_TIMER_Start+0xd2>
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	7a5b      	ldrb	r3, [r3, #9]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d14e      	bne.n	801ca46 <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c9a8:	f3ef 8310 	mrs	r3, PRIMASK
 801c9ac:	613b      	str	r3, [r7, #16]
  return(result);
 801c9ae:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c9b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c9b2:	b672      	cpsid	i
}
 801c9b4:	46c0      	nop			; (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	685b      	ldr	r3, [r3, #4]
 801c9ba:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c9bc:	4b27      	ldr	r3, [pc, #156]	; (801ca5c <UTIL_TIMER_Start+0xe8>)
 801c9be:	6a1b      	ldr	r3, [r3, #32]
 801c9c0:	4798      	blx	r3
 801c9c2:	0003      	movs	r3, r0
 801c9c4:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801c9c6:	6a3a      	ldr	r2, [r7, #32]
 801c9c8:	69bb      	ldr	r3, [r7, #24]
 801c9ca:	429a      	cmp	r2, r3
 801c9cc:	d201      	bcs.n	801c9d2 <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801c9ce:	69bb      	ldr	r3, [r7, #24]
 801c9d0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	6a3a      	ldr	r2, [r7, #32]
 801c9d6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	2200      	movs	r2, #0
 801c9dc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	2201      	movs	r2, #1
 801c9e2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	2200      	movs	r2, #0
 801c9e8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c9ea:	4b1d      	ldr	r3, [pc, #116]	; (801ca60 <UTIL_TIMER_Start+0xec>)
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d107      	bne.n	801ca02 <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c9f2:	4b1a      	ldr	r3, [pc, #104]	; (801ca5c <UTIL_TIMER_Start+0xe8>)
 801c9f4:	691b      	ldr	r3, [r3, #16]
 801c9f6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	0018      	movs	r0, r3
 801c9fc:	f000 fa08 	bl	801ce10 <TimerInsertNewHeadTimer>
 801ca00:	e01a      	b.n	801ca38 <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ca02:	4b16      	ldr	r3, [pc, #88]	; (801ca5c <UTIL_TIMER_Start+0xe8>)
 801ca04:	699b      	ldr	r3, [r3, #24]
 801ca06:	4798      	blx	r3
 801ca08:	0003      	movs	r3, r0
 801ca0a:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	681a      	ldr	r2, [r3, #0]
 801ca10:	697b      	ldr	r3, [r7, #20]
 801ca12:	18d2      	adds	r2, r2, r3
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	681a      	ldr	r2, [r3, #0]
 801ca1c:	4b10      	ldr	r3, [pc, #64]	; (801ca60 <UTIL_TIMER_Start+0xec>)
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	429a      	cmp	r2, r3
 801ca24:	d204      	bcs.n	801ca30 <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	0018      	movs	r0, r3
 801ca2a:	f000 f9f1 	bl	801ce10 <TimerInsertNewHeadTimer>
 801ca2e:	e003      	b.n	801ca38 <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	0018      	movs	r0, r3
 801ca34:	f000 f9be 	bl	801cdb4 <TimerInsertTimer>
 801ca38:	69fb      	ldr	r3, [r7, #28]
 801ca3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca3c:	68fb      	ldr	r3, [r7, #12]
 801ca3e:	f383 8810 	msr	PRIMASK, r3
}
 801ca42:	46c0      	nop			; (mov r8, r8)
  {
 801ca44:	e003      	b.n	801ca4e <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801ca46:	2327      	movs	r3, #39	; 0x27
 801ca48:	18fb      	adds	r3, r7, r3
 801ca4a:	2201      	movs	r2, #1
 801ca4c:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801ca4e:	2327      	movs	r3, #39	; 0x27
 801ca50:	18fb      	adds	r3, r7, r3
 801ca52:	781b      	ldrb	r3, [r3, #0]
}
 801ca54:	0018      	movs	r0, r3
 801ca56:	46bd      	mov	sp, r7
 801ca58:	b00a      	add	sp, #40	; 0x28
 801ca5a:	bd80      	pop	{r7, pc}
 801ca5c:	0801e420 	.word	0x0801e420
 801ca60:	200012d4 	.word	0x200012d4

0801ca64 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ca64:	b580      	push	{r7, lr}
 801ca66:	b088      	sub	sp, #32
 801ca68:	af00      	add	r7, sp, #0
 801ca6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ca6c:	231f      	movs	r3, #31
 801ca6e:	18fb      	adds	r3, r7, r3
 801ca70:	2200      	movs	r2, #0
 801ca72:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d05d      	beq.n	801cb36 <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca7a:	f3ef 8310 	mrs	r3, PRIMASK
 801ca7e:	60fb      	str	r3, [r7, #12]
  return(result);
 801ca80:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ca82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca84:	b672      	cpsid	i
}
 801ca86:	46c0      	nop			; (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801ca88:	4b30      	ldr	r3, [pc, #192]	; (801cb4c <UTIL_TIMER_Stop+0xe8>)
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801ca8e:	4b2f      	ldr	r3, [pc, #188]	; (801cb4c <UTIL_TIMER_Stop+0xe8>)
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	2201      	movs	r2, #1
 801ca98:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801ca9a:	4b2c      	ldr	r3, [pc, #176]	; (801cb4c <UTIL_TIMER_Stop+0xe8>)
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d043      	beq.n	801cb2a <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	2200      	movs	r2, #0
 801caa6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801caa8:	4b28      	ldr	r3, [pc, #160]	; (801cb4c <UTIL_TIMER_Stop+0xe8>)
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	687a      	ldr	r2, [r7, #4]
 801caae:	429a      	cmp	r2, r3
 801cab0:	d134      	bne.n	801cb1c <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801cab2:	4b26      	ldr	r3, [pc, #152]	; (801cb4c <UTIL_TIMER_Stop+0xe8>)
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	2200      	movs	r2, #0
 801cab8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801caba:	4b24      	ldr	r3, [pc, #144]	; (801cb4c <UTIL_TIMER_Stop+0xe8>)
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	695b      	ldr	r3, [r3, #20]
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d00a      	beq.n	801cada <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801cac4:	4b21      	ldr	r3, [pc, #132]	; (801cb4c <UTIL_TIMER_Stop+0xe8>)
 801cac6:	681b      	ldr	r3, [r3, #0]
 801cac8:	695a      	ldr	r2, [r3, #20]
 801caca:	4b20      	ldr	r3, [pc, #128]	; (801cb4c <UTIL_TIMER_Stop+0xe8>)
 801cacc:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801cace:	4b1f      	ldr	r3, [pc, #124]	; (801cb4c <UTIL_TIMER_Stop+0xe8>)
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	0018      	movs	r0, r3
 801cad4:	f000 f944 	bl	801cd60 <TimerSetTimeout>
 801cad8:	e023      	b.n	801cb22 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801cada:	4b1d      	ldr	r3, [pc, #116]	; (801cb50 <UTIL_TIMER_Stop+0xec>)
 801cadc:	68db      	ldr	r3, [r3, #12]
 801cade:	4798      	blx	r3
            TimerListHead = NULL;
 801cae0:	4b1a      	ldr	r3, [pc, #104]	; (801cb4c <UTIL_TIMER_Stop+0xe8>)
 801cae2:	2200      	movs	r2, #0
 801cae4:	601a      	str	r2, [r3, #0]
 801cae6:	e01c      	b.n	801cb22 <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801cae8:	697a      	ldr	r2, [r7, #20]
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	429a      	cmp	r2, r3
 801caee:	d110      	bne.n	801cb12 <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801caf0:	697b      	ldr	r3, [r7, #20]
 801caf2:	695b      	ldr	r3, [r3, #20]
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d006      	beq.n	801cb06 <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801caf8:	697b      	ldr	r3, [r7, #20]
 801cafa:	695b      	ldr	r3, [r3, #20]
 801cafc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cafe:	69bb      	ldr	r3, [r7, #24]
 801cb00:	697a      	ldr	r2, [r7, #20]
 801cb02:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801cb04:	e00d      	b.n	801cb22 <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801cb06:	2300      	movs	r3, #0
 801cb08:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cb0a:	69bb      	ldr	r3, [r7, #24]
 801cb0c:	697a      	ldr	r2, [r7, #20]
 801cb0e:	615a      	str	r2, [r3, #20]
            break;
 801cb10:	e007      	b.n	801cb22 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801cb12:	697b      	ldr	r3, [r7, #20]
 801cb14:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801cb16:	697b      	ldr	r3, [r7, #20]
 801cb18:	695b      	ldr	r3, [r3, #20]
 801cb1a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801cb1c:	697b      	ldr	r3, [r7, #20]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d1e2      	bne.n	801cae8 <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801cb22:	231f      	movs	r3, #31
 801cb24:	18fb      	adds	r3, r7, r3
 801cb26:	2200      	movs	r2, #0
 801cb28:	701a      	strb	r2, [r3, #0]
 801cb2a:	693b      	ldr	r3, [r7, #16]
 801cb2c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb2e:	68bb      	ldr	r3, [r7, #8]
 801cb30:	f383 8810 	msr	PRIMASK, r3
}
 801cb34:	e003      	b.n	801cb3e <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801cb36:	231f      	movs	r3, #31
 801cb38:	18fb      	adds	r3, r7, r3
 801cb3a:	2201      	movs	r2, #1
 801cb3c:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801cb3e:	231f      	movs	r3, #31
 801cb40:	18fb      	adds	r3, r7, r3
 801cb42:	781b      	ldrb	r3, [r3, #0]
}
 801cb44:	0018      	movs	r0, r3
 801cb46:	46bd      	mov	sp, r7
 801cb48:	b008      	add	sp, #32
 801cb4a:	bd80      	pop	{r7, pc}
 801cb4c:	200012d4 	.word	0x200012d4
 801cb50:	0801e420 	.word	0x0801e420

0801cb54 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801cb54:	b590      	push	{r4, r7, lr}
 801cb56:	b085      	sub	sp, #20
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	6078      	str	r0, [r7, #4]
 801cb5c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cb5e:	210f      	movs	r1, #15
 801cb60:	187b      	adds	r3, r7, r1
 801cb62:	2200      	movs	r2, #0
 801cb64:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d103      	bne.n	801cb74 <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801cb6c:	187b      	adds	r3, r7, r1
 801cb6e:	2201      	movs	r2, #1
 801cb70:	701a      	strb	r2, [r3, #0]
 801cb72:	e019      	b.n	801cba8 <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801cb74:	4b10      	ldr	r3, [pc, #64]	; (801cbb8 <UTIL_TIMER_SetPeriod+0x64>)
 801cb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb78:	683a      	ldr	r2, [r7, #0]
 801cb7a:	0010      	movs	r0, r2
 801cb7c:	4798      	blx	r3
 801cb7e:	0002      	movs	r2, r0
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	0018      	movs	r0, r3
 801cb88:	f000 f8ce 	bl	801cd28 <TimerExists>
 801cb8c:	1e03      	subs	r3, r0, #0
 801cb8e:	d00b      	beq.n	801cba8 <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	0018      	movs	r0, r3
 801cb94:	f7ff ff66 	bl	801ca64 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801cb98:	230f      	movs	r3, #15
 801cb9a:	18fc      	adds	r4, r7, r3
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	0018      	movs	r0, r3
 801cba0:	f7ff fee8 	bl	801c974 <UTIL_TIMER_Start>
 801cba4:	0003      	movs	r3, r0
 801cba6:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801cba8:	230f      	movs	r3, #15
 801cbaa:	18fb      	adds	r3, r7, r3
 801cbac:	781b      	ldrb	r3, [r3, #0]
}
 801cbae:	0018      	movs	r0, r3
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	b005      	add	sp, #20
 801cbb4:	bd90      	pop	{r4, r7, pc}
 801cbb6:	46c0      	nop			; (mov r8, r8)
 801cbb8:	0801e420 	.word	0x0801e420

0801cbbc <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801cbbc:	b590      	push	{r4, r7, lr}
 801cbbe:	b089      	sub	sp, #36	; 0x24
 801cbc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbc2:	f3ef 8310 	mrs	r3, PRIMASK
 801cbc6:	60bb      	str	r3, [r7, #8]
  return(result);
 801cbc8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cbca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801cbcc:	b672      	cpsid	i
}
 801cbce:	46c0      	nop			; (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801cbd0:	4b3a      	ldr	r3, [pc, #232]	; (801ccbc <UTIL_TIMER_IRQ_Handler+0x100>)
 801cbd2:	695b      	ldr	r3, [r3, #20]
 801cbd4:	4798      	blx	r3
 801cbd6:	0003      	movs	r3, r0
 801cbd8:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801cbda:	4b38      	ldr	r3, [pc, #224]	; (801ccbc <UTIL_TIMER_IRQ_Handler+0x100>)
 801cbdc:	691b      	ldr	r3, [r3, #16]
 801cbde:	4798      	blx	r3
 801cbe0:	0003      	movs	r3, r0
 801cbe2:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801cbe4:	693a      	ldr	r2, [r7, #16]
 801cbe6:	697b      	ldr	r3, [r7, #20]
 801cbe8:	1ad3      	subs	r3, r2, r3
 801cbea:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801cbec:	4b34      	ldr	r3, [pc, #208]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d038      	beq.n	801cc66 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801cbf4:	4b32      	ldr	r3, [pc, #200]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801cbfa:	69fb      	ldr	r3, [r7, #28]
 801cbfc:	681b      	ldr	r3, [r3, #0]
 801cbfe:	68fa      	ldr	r2, [r7, #12]
 801cc00:	429a      	cmp	r2, r3
 801cc02:	d206      	bcs.n	801cc12 <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801cc04:	69fb      	ldr	r3, [r7, #28]
 801cc06:	681a      	ldr	r2, [r3, #0]
 801cc08:	68fb      	ldr	r3, [r7, #12]
 801cc0a:	1ad2      	subs	r2, r2, r3
 801cc0c:	69fb      	ldr	r3, [r7, #28]
 801cc0e:	601a      	str	r2, [r3, #0]
 801cc10:	e002      	b.n	801cc18 <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801cc12:	69fb      	ldr	r3, [r7, #28]
 801cc14:	2200      	movs	r2, #0
 801cc16:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801cc18:	69fb      	ldr	r3, [r7, #28]
 801cc1a:	695b      	ldr	r3, [r3, #20]
 801cc1c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801cc1e:	69fb      	ldr	r3, [r7, #28]
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d1ea      	bne.n	801cbfa <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cc24:	e01f      	b.n	801cc66 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801cc26:	4b26      	ldr	r3, [pc, #152]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801cc2c:	4b24      	ldr	r3, [pc, #144]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	695a      	ldr	r2, [r3, #20]
 801cc32:	4b23      	ldr	r3, [pc, #140]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc34:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801cc36:	69fb      	ldr	r3, [r7, #28]
 801cc38:	2200      	movs	r2, #0
 801cc3a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801cc3c:	69fb      	ldr	r3, [r7, #28]
 801cc3e:	2200      	movs	r2, #0
 801cc40:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801cc42:	69fb      	ldr	r3, [r7, #28]
 801cc44:	68da      	ldr	r2, [r3, #12]
 801cc46:	69fb      	ldr	r3, [r7, #28]
 801cc48:	691b      	ldr	r3, [r3, #16]
 801cc4a:	0018      	movs	r0, r3
 801cc4c:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801cc4e:	69fb      	ldr	r3, [r7, #28]
 801cc50:	7adb      	ldrb	r3, [r3, #11]
 801cc52:	2b01      	cmp	r3, #1
 801cc54:	d107      	bne.n	801cc66 <UTIL_TIMER_IRQ_Handler+0xaa>
 801cc56:	69fb      	ldr	r3, [r7, #28]
 801cc58:	7a9b      	ldrb	r3, [r3, #10]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d103      	bne.n	801cc66 <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801cc5e:	69fb      	ldr	r3, [r7, #28]
 801cc60:	0018      	movs	r0, r3
 801cc62:	f7ff fe87 	bl	801c974 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cc66:	4b16      	ldr	r3, [pc, #88]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc68:	681b      	ldr	r3, [r3, #0]
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d00d      	beq.n	801cc8a <UTIL_TIMER_IRQ_Handler+0xce>
 801cc6e:	4b14      	ldr	r3, [pc, #80]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d0d6      	beq.n	801cc26 <UTIL_TIMER_IRQ_Handler+0x6a>
 801cc78:	4b11      	ldr	r3, [pc, #68]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	681c      	ldr	r4, [r3, #0]
 801cc7e:	4b0f      	ldr	r3, [pc, #60]	; (801ccbc <UTIL_TIMER_IRQ_Handler+0x100>)
 801cc80:	699b      	ldr	r3, [r3, #24]
 801cc82:	4798      	blx	r3
 801cc84:	0003      	movs	r3, r0
 801cc86:	429c      	cmp	r4, r3
 801cc88:	d3cd      	bcc.n	801cc26 <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801cc8a:	4b0d      	ldr	r3, [pc, #52]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	d009      	beq.n	801cca6 <UTIL_TIMER_IRQ_Handler+0xea>
 801cc92:	4b0b      	ldr	r3, [pc, #44]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	7a1b      	ldrb	r3, [r3, #8]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d104      	bne.n	801cca6 <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801cc9c:	4b08      	ldr	r3, [pc, #32]	; (801ccc0 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	0018      	movs	r0, r3
 801cca2:	f000 f85d 	bl	801cd60 <TimerSetTimeout>
 801cca6:	69bb      	ldr	r3, [r7, #24]
 801cca8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	f383 8810 	msr	PRIMASK, r3
}
 801ccb0:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ccb2:	46c0      	nop			; (mov r8, r8)
 801ccb4:	46bd      	mov	sp, r7
 801ccb6:	b009      	add	sp, #36	; 0x24
 801ccb8:	bd90      	pop	{r4, r7, pc}
 801ccba:	46c0      	nop			; (mov r8, r8)
 801ccbc:	0801e420 	.word	0x0801e420
 801ccc0:	200012d4 	.word	0x200012d4

0801ccc4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b082      	sub	sp, #8
 801ccc8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ccca:	4b07      	ldr	r3, [pc, #28]	; (801cce8 <UTIL_TIMER_GetCurrentTime+0x24>)
 801cccc:	69db      	ldr	r3, [r3, #28]
 801ccce:	4798      	blx	r3
 801ccd0:	0003      	movs	r3, r0
 801ccd2:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ccd4:	4b04      	ldr	r3, [pc, #16]	; (801cce8 <UTIL_TIMER_GetCurrentTime+0x24>)
 801ccd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ccd8:	687a      	ldr	r2, [r7, #4]
 801ccda:	0010      	movs	r0, r2
 801ccdc:	4798      	blx	r3
 801ccde:	0003      	movs	r3, r0
}
 801cce0:	0018      	movs	r0, r3
 801cce2:	46bd      	mov	sp, r7
 801cce4:	b002      	add	sp, #8
 801cce6:	bd80      	pop	{r7, pc}
 801cce8:	0801e420 	.word	0x0801e420

0801ccec <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801ccec:	b580      	push	{r7, lr}
 801ccee:	b084      	sub	sp, #16
 801ccf0:	af00      	add	r7, sp, #0
 801ccf2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801ccf4:	4b0b      	ldr	r3, [pc, #44]	; (801cd24 <UTIL_TIMER_GetElapsedTime+0x38>)
 801ccf6:	69db      	ldr	r3, [r3, #28]
 801ccf8:	4798      	blx	r3
 801ccfa:	0003      	movs	r3, r0
 801ccfc:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801ccfe:	4b09      	ldr	r3, [pc, #36]	; (801cd24 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd02:	687a      	ldr	r2, [r7, #4]
 801cd04:	0010      	movs	r0, r2
 801cd06:	4798      	blx	r3
 801cd08:	0003      	movs	r3, r0
 801cd0a:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cd0c:	4b05      	ldr	r3, [pc, #20]	; (801cd24 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cd0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd10:	68f9      	ldr	r1, [r7, #12]
 801cd12:	68ba      	ldr	r2, [r7, #8]
 801cd14:	1a8a      	subs	r2, r1, r2
 801cd16:	0010      	movs	r0, r2
 801cd18:	4798      	blx	r3
 801cd1a:	0003      	movs	r3, r0
}
 801cd1c:	0018      	movs	r0, r3
 801cd1e:	46bd      	mov	sp, r7
 801cd20:	b004      	add	sp, #16
 801cd22:	bd80      	pop	{r7, pc}
 801cd24:	0801e420 	.word	0x0801e420

0801cd28 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b084      	sub	sp, #16
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cd30:	4b0a      	ldr	r3, [pc, #40]	; (801cd5c <TimerExists+0x34>)
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cd36:	e008      	b.n	801cd4a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cd38:	68fa      	ldr	r2, [r7, #12]
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	429a      	cmp	r2, r3
 801cd3e:	d101      	bne.n	801cd44 <TimerExists+0x1c>
    {
      return true;
 801cd40:	2301      	movs	r3, #1
 801cd42:	e006      	b.n	801cd52 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	695b      	ldr	r3, [r3, #20]
 801cd48:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801cd4a:	68fb      	ldr	r3, [r7, #12]
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	d1f3      	bne.n	801cd38 <TimerExists+0x10>
  }
  return false;
 801cd50:	2300      	movs	r3, #0
}
 801cd52:	0018      	movs	r0, r3
 801cd54:	46bd      	mov	sp, r7
 801cd56:	b004      	add	sp, #16
 801cd58:	bd80      	pop	{r7, pc}
 801cd5a:	46c0      	nop			; (mov r8, r8)
 801cd5c:	200012d4 	.word	0x200012d4

0801cd60 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cd60:	b590      	push	{r4, r7, lr}
 801cd62:	b085      	sub	sp, #20
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cd68:	4b11      	ldr	r3, [pc, #68]	; (801cdb0 <TimerSetTimeout+0x50>)
 801cd6a:	6a1b      	ldr	r3, [r3, #32]
 801cd6c:	4798      	blx	r3
 801cd6e:	0003      	movs	r3, r0
 801cd70:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	2201      	movs	r2, #1
 801cd76:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	681c      	ldr	r4, [r3, #0]
 801cd7c:	4b0c      	ldr	r3, [pc, #48]	; (801cdb0 <TimerSetTimeout+0x50>)
 801cd7e:	699b      	ldr	r3, [r3, #24]
 801cd80:	4798      	blx	r3
 801cd82:	0002      	movs	r2, r0
 801cd84:	68fb      	ldr	r3, [r7, #12]
 801cd86:	18d3      	adds	r3, r2, r3
 801cd88:	429c      	cmp	r4, r3
 801cd8a:	d207      	bcs.n	801cd9c <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cd8c:	4b08      	ldr	r3, [pc, #32]	; (801cdb0 <TimerSetTimeout+0x50>)
 801cd8e:	699b      	ldr	r3, [r3, #24]
 801cd90:	4798      	blx	r3
 801cd92:	0002      	movs	r2, r0
 801cd94:	68fb      	ldr	r3, [r7, #12]
 801cd96:	18d2      	adds	r2, r2, r3
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cd9c:	4b04      	ldr	r3, [pc, #16]	; (801cdb0 <TimerSetTimeout+0x50>)
 801cd9e:	689a      	ldr	r2, [r3, #8]
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	681b      	ldr	r3, [r3, #0]
 801cda4:	0018      	movs	r0, r3
 801cda6:	4790      	blx	r2
}
 801cda8:	46c0      	nop			; (mov r8, r8)
 801cdaa:	46bd      	mov	sp, r7
 801cdac:	b005      	add	sp, #20
 801cdae:	bd90      	pop	{r4, r7, pc}
 801cdb0:	0801e420 	.word	0x0801e420

0801cdb4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801cdb4:	b580      	push	{r7, lr}
 801cdb6:	b084      	sub	sp, #16
 801cdb8:	af00      	add	r7, sp, #0
 801cdba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cdbc:	4b13      	ldr	r3, [pc, #76]	; (801ce0c <TimerInsertTimer+0x58>)
 801cdbe:	681b      	ldr	r3, [r3, #0]
 801cdc0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801cdc2:	4b12      	ldr	r3, [pc, #72]	; (801ce0c <TimerInsertTimer+0x58>)
 801cdc4:	681b      	ldr	r3, [r3, #0]
 801cdc6:	695b      	ldr	r3, [r3, #20]
 801cdc8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801cdca:	e012      	b.n	801cdf2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	681a      	ldr	r2, [r3, #0]
 801cdd0:	68bb      	ldr	r3, [r7, #8]
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	429a      	cmp	r2, r3
 801cdd6:	d905      	bls.n	801cde4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801cdd8:	68bb      	ldr	r3, [r7, #8]
 801cdda:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801cddc:	68bb      	ldr	r3, [r7, #8]
 801cdde:	695b      	ldr	r3, [r3, #20]
 801cde0:	60bb      	str	r3, [r7, #8]
 801cde2:	e006      	b.n	801cdf2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801cde4:	68fb      	ldr	r3, [r7, #12]
 801cde6:	687a      	ldr	r2, [r7, #4]
 801cde8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	68ba      	ldr	r2, [r7, #8]
 801cdee:	615a      	str	r2, [r3, #20]
        return;
 801cdf0:	e009      	b.n	801ce06 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801cdf2:	68fb      	ldr	r3, [r7, #12]
 801cdf4:	695b      	ldr	r3, [r3, #20]
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d1e8      	bne.n	801cdcc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	687a      	ldr	r2, [r7, #4]
 801cdfe:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	2200      	movs	r2, #0
 801ce04:	615a      	str	r2, [r3, #20]
}
 801ce06:	46bd      	mov	sp, r7
 801ce08:	b004      	add	sp, #16
 801ce0a:	bd80      	pop	{r7, pc}
 801ce0c:	200012d4 	.word	0x200012d4

0801ce10 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b084      	sub	sp, #16
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ce18:	4b0b      	ldr	r3, [pc, #44]	; (801ce48 <TimerInsertNewHeadTimer+0x38>)
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d002      	beq.n	801ce2a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	2200      	movs	r2, #0
 801ce28:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	68fa      	ldr	r2, [r7, #12]
 801ce2e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ce30:	4b05      	ldr	r3, [pc, #20]	; (801ce48 <TimerInsertNewHeadTimer+0x38>)
 801ce32:	687a      	ldr	r2, [r7, #4]
 801ce34:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801ce36:	4b04      	ldr	r3, [pc, #16]	; (801ce48 <TimerInsertNewHeadTimer+0x38>)
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	0018      	movs	r0, r3
 801ce3c:	f7ff ff90 	bl	801cd60 <TimerSetTimeout>
}
 801ce40:	46c0      	nop			; (mov r8, r8)
 801ce42:	46bd      	mov	sp, r7
 801ce44:	b004      	add	sp, #16
 801ce46:	bd80      	pop	{r7, pc}
 801ce48:	200012d4 	.word	0x200012d4

0801ce4c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b084      	sub	sp, #16
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ce54:	2300      	movs	r3, #0
 801ce56:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ce58:	e00e      	b.n	801ce78 <ee_skip_atoi+0x2c>
 801ce5a:	68fa      	ldr	r2, [r7, #12]
 801ce5c:	0013      	movs	r3, r2
 801ce5e:	009b      	lsls	r3, r3, #2
 801ce60:	189b      	adds	r3, r3, r2
 801ce62:	005b      	lsls	r3, r3, #1
 801ce64:	0018      	movs	r0, r3
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	1c59      	adds	r1, r3, #1
 801ce6c:	687a      	ldr	r2, [r7, #4]
 801ce6e:	6011      	str	r1, [r2, #0]
 801ce70:	781b      	ldrb	r3, [r3, #0]
 801ce72:	18c3      	adds	r3, r0, r3
 801ce74:	3b30      	subs	r3, #48	; 0x30
 801ce76:	60fb      	str	r3, [r7, #12]
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	781b      	ldrb	r3, [r3, #0]
 801ce7e:	2b2f      	cmp	r3, #47	; 0x2f
 801ce80:	d904      	bls.n	801ce8c <ee_skip_atoi+0x40>
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	781b      	ldrb	r3, [r3, #0]
 801ce88:	2b39      	cmp	r3, #57	; 0x39
 801ce8a:	d9e6      	bls.n	801ce5a <ee_skip_atoi+0xe>
  return i;
 801ce8c:	68fb      	ldr	r3, [r7, #12]
}
 801ce8e:	0018      	movs	r0, r3
 801ce90:	46bd      	mov	sp, r7
 801ce92:	b004      	add	sp, #16
 801ce94:	bd80      	pop	{r7, pc}
	...

0801ce98 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801ce98:	b580      	push	{r7, lr}
 801ce9a:	b098      	sub	sp, #96	; 0x60
 801ce9c:	af00      	add	r7, sp, #0
 801ce9e:	60f8      	str	r0, [r7, #12]
 801cea0:	60b9      	str	r1, [r7, #8]
 801cea2:	607a      	str	r2, [r7, #4]
 801cea4:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801cea6:	4b72      	ldr	r3, [pc, #456]	; (801d070 <ee_number+0x1d8>)
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801ceac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ceae:	2240      	movs	r2, #64	; 0x40
 801ceb0:	4013      	ands	r3, r2
 801ceb2:	d002      	beq.n	801ceba <ee_number+0x22>
 801ceb4:	4b6f      	ldr	r3, [pc, #444]	; (801d074 <ee_number+0x1dc>)
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ceba:	683b      	ldr	r3, [r7, #0]
 801cebc:	2b01      	cmp	r3, #1
 801cebe:	dd02      	ble.n	801cec6 <ee_number+0x2e>
 801cec0:	683b      	ldr	r3, [r7, #0]
 801cec2:	2b24      	cmp	r3, #36	; 0x24
 801cec4:	dd01      	ble.n	801ceca <ee_number+0x32>
 801cec6:	2300      	movs	r3, #0
 801cec8:	e0cd      	b.n	801d066 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801ceca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cecc:	2201      	movs	r2, #1
 801cece:	4013      	ands	r3, r2
 801ced0:	d001      	beq.n	801ced6 <ee_number+0x3e>
 801ced2:	2230      	movs	r2, #48	; 0x30
 801ced4:	e000      	b.n	801ced8 <ee_number+0x40>
 801ced6:	2220      	movs	r2, #32
 801ced8:	2353      	movs	r3, #83	; 0x53
 801ceda:	18fb      	adds	r3, r7, r3
 801cedc:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801cede:	215f      	movs	r1, #95	; 0x5f
 801cee0:	187b      	adds	r3, r7, r1
 801cee2:	2200      	movs	r2, #0
 801cee4:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801cee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cee8:	2202      	movs	r2, #2
 801ceea:	4013      	ands	r3, r2
 801ceec:	d00b      	beq.n	801cf06 <ee_number+0x6e>
  {
    if (num < 0)
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	da08      	bge.n	801cf06 <ee_number+0x6e>
    {
      sign = '-';
 801cef4:	187b      	adds	r3, r7, r1
 801cef6:	222d      	movs	r2, #45	; 0x2d
 801cef8:	701a      	strb	r2, [r3, #0]
      num = -num;
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	425b      	negs	r3, r3
 801cefe:	607b      	str	r3, [r7, #4]
      size--;
 801cf00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf02:	3b01      	subs	r3, #1
 801cf04:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801cf06:	2300      	movs	r3, #0
 801cf08:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	2b00      	cmp	r3, #0
 801cf0e:	d120      	bne.n	801cf52 <ee_number+0xba>
    tmp[i++] = '0';
 801cf10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf12:	1c5a      	adds	r2, r3, #1
 801cf14:	657a      	str	r2, [r7, #84]	; 0x54
 801cf16:	2210      	movs	r2, #16
 801cf18:	18ba      	adds	r2, r7, r2
 801cf1a:	2130      	movs	r1, #48	; 0x30
 801cf1c:	54d1      	strb	r1, [r2, r3]
 801cf1e:	e01b      	b.n	801cf58 <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	683a      	ldr	r2, [r7, #0]
 801cf24:	0011      	movs	r1, r2
 801cf26:	0018      	movs	r0, r3
 801cf28:	f7e3 f97c 	bl	8000224 <__aeabi_uidivmod>
 801cf2c:	000b      	movs	r3, r1
 801cf2e:	001a      	movs	r2, r3
 801cf30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cf32:	189a      	adds	r2, r3, r2
 801cf34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf36:	1c59      	adds	r1, r3, #1
 801cf38:	6579      	str	r1, [r7, #84]	; 0x54
 801cf3a:	7811      	ldrb	r1, [r2, #0]
 801cf3c:	2210      	movs	r2, #16
 801cf3e:	18ba      	adds	r2, r7, r2
 801cf40:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	683a      	ldr	r2, [r7, #0]
 801cf46:	0011      	movs	r1, r2
 801cf48:	0018      	movs	r0, r3
 801cf4a:	f7e3 f8e5 	bl	8000118 <__udivsi3>
 801cf4e:	0003      	movs	r3, r0
 801cf50:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d1e3      	bne.n	801cf20 <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801cf58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cf5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cf5c:	429a      	cmp	r2, r3
 801cf5e:	dd01      	ble.n	801cf64 <ee_number+0xcc>
 801cf60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf62:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801cf64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cf66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cf68:	1ad3      	subs	r3, r2, r3
 801cf6a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801cf6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf6e:	2201      	movs	r2, #1
 801cf70:	4013      	ands	r3, r2
 801cf72:	d112      	bne.n	801cf9a <ee_number+0x102>
 801cf74:	e00c      	b.n	801cf90 <ee_number+0xf8>
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	1c5a      	adds	r2, r3, #1
 801cf7a:	60fa      	str	r2, [r7, #12]
 801cf7c:	2220      	movs	r2, #32
 801cf7e:	701a      	strb	r2, [r3, #0]
 801cf80:	68bb      	ldr	r3, [r7, #8]
 801cf82:	3b01      	subs	r3, #1
 801cf84:	60bb      	str	r3, [r7, #8]
 801cf86:	68bb      	ldr	r3, [r7, #8]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d101      	bne.n	801cf90 <ee_number+0xf8>
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	e06a      	b.n	801d066 <ee_number+0x1ce>
 801cf90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf92:	1e5a      	subs	r2, r3, #1
 801cf94:	66ba      	str	r2, [r7, #104]	; 0x68
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	dced      	bgt.n	801cf76 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801cf9a:	215f      	movs	r1, #95	; 0x5f
 801cf9c:	187b      	adds	r3, r7, r1
 801cf9e:	781b      	ldrb	r3, [r3, #0]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d01c      	beq.n	801cfde <ee_number+0x146>
 801cfa4:	68fb      	ldr	r3, [r7, #12]
 801cfa6:	1c5a      	adds	r2, r3, #1
 801cfa8:	60fa      	str	r2, [r7, #12]
 801cfaa:	187a      	adds	r2, r7, r1
 801cfac:	7812      	ldrb	r2, [r2, #0]
 801cfae:	701a      	strb	r2, [r3, #0]
 801cfb0:	68bb      	ldr	r3, [r7, #8]
 801cfb2:	3b01      	subs	r3, #1
 801cfb4:	60bb      	str	r3, [r7, #8]
 801cfb6:	68bb      	ldr	r3, [r7, #8]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d110      	bne.n	801cfde <ee_number+0x146>
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	e052      	b.n	801d066 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	1c5a      	adds	r2, r3, #1
 801cfc4:	60fa      	str	r2, [r7, #12]
 801cfc6:	2253      	movs	r2, #83	; 0x53
 801cfc8:	18ba      	adds	r2, r7, r2
 801cfca:	7812      	ldrb	r2, [r2, #0]
 801cfcc:	701a      	strb	r2, [r3, #0]
 801cfce:	68bb      	ldr	r3, [r7, #8]
 801cfd0:	3b01      	subs	r3, #1
 801cfd2:	60bb      	str	r3, [r7, #8]
 801cfd4:	68bb      	ldr	r3, [r7, #8]
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d101      	bne.n	801cfde <ee_number+0x146>
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	e043      	b.n	801d066 <ee_number+0x1ce>
 801cfde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cfe0:	1e5a      	subs	r2, r3, #1
 801cfe2:	66ba      	str	r2, [r7, #104]	; 0x68
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	dceb      	bgt.n	801cfc0 <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801cfe8:	e00c      	b.n	801d004 <ee_number+0x16c>
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	1c5a      	adds	r2, r3, #1
 801cfee:	60fa      	str	r2, [r7, #12]
 801cff0:	2230      	movs	r2, #48	; 0x30
 801cff2:	701a      	strb	r2, [r3, #0]
 801cff4:	68bb      	ldr	r3, [r7, #8]
 801cff6:	3b01      	subs	r3, #1
 801cff8:	60bb      	str	r3, [r7, #8]
 801cffa:	68bb      	ldr	r3, [r7, #8]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d101      	bne.n	801d004 <ee_number+0x16c>
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	e030      	b.n	801d066 <ee_number+0x1ce>
 801d004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d006:	1e5a      	subs	r2, r3, #1
 801d008:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d00a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d00c:	429a      	cmp	r2, r3
 801d00e:	dbec      	blt.n	801cfea <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d010:	e010      	b.n	801d034 <ee_number+0x19c>
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	1c5a      	adds	r2, r3, #1
 801d016:	60fa      	str	r2, [r7, #12]
 801d018:	2210      	movs	r2, #16
 801d01a:	18b9      	adds	r1, r7, r2
 801d01c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d01e:	188a      	adds	r2, r1, r2
 801d020:	7812      	ldrb	r2, [r2, #0]
 801d022:	701a      	strb	r2, [r3, #0]
 801d024:	68bb      	ldr	r3, [r7, #8]
 801d026:	3b01      	subs	r3, #1
 801d028:	60bb      	str	r3, [r7, #8]
 801d02a:	68bb      	ldr	r3, [r7, #8]
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d101      	bne.n	801d034 <ee_number+0x19c>
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	e018      	b.n	801d066 <ee_number+0x1ce>
 801d034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d036:	1e5a      	subs	r2, r3, #1
 801d038:	657a      	str	r2, [r7, #84]	; 0x54
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	dce9      	bgt.n	801d012 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801d03e:	e00c      	b.n	801d05a <ee_number+0x1c2>
 801d040:	68fb      	ldr	r3, [r7, #12]
 801d042:	1c5a      	adds	r2, r3, #1
 801d044:	60fa      	str	r2, [r7, #12]
 801d046:	2220      	movs	r2, #32
 801d048:	701a      	strb	r2, [r3, #0]
 801d04a:	68bb      	ldr	r3, [r7, #8]
 801d04c:	3b01      	subs	r3, #1
 801d04e:	60bb      	str	r3, [r7, #8]
 801d050:	68bb      	ldr	r3, [r7, #8]
 801d052:	2b00      	cmp	r3, #0
 801d054:	d101      	bne.n	801d05a <ee_number+0x1c2>
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	e005      	b.n	801d066 <ee_number+0x1ce>
 801d05a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d05c:	1e5a      	subs	r2, r3, #1
 801d05e:	66ba      	str	r2, [r7, #104]	; 0x68
 801d060:	2b00      	cmp	r3, #0
 801d062:	dced      	bgt.n	801d040 <ee_number+0x1a8>

  return str;
 801d064:	68fb      	ldr	r3, [r7, #12]
}
 801d066:	0018      	movs	r0, r3
 801d068:	46bd      	mov	sp, r7
 801d06a:	b018      	add	sp, #96	; 0x60
 801d06c:	bd80      	pop	{r7, pc}
 801d06e:	46c0      	nop			; (mov r8, r8)
 801d070:	200001d0 	.word	0x200001d0
 801d074:	200001d4 	.word	0x200001d4

0801d078 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d078:	b590      	push	{r4, r7, lr}
 801d07a:	b093      	sub	sp, #76	; 0x4c
 801d07c:	af04      	add	r7, sp, #16
 801d07e:	60f8      	str	r0, [r7, #12]
 801d080:	60b9      	str	r1, [r7, #8]
 801d082:	607a      	str	r2, [r7, #4]
 801d084:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d086:	68bb      	ldr	r3, [r7, #8]
 801d088:	2b00      	cmp	r3, #0
 801d08a:	dc01      	bgt.n	801d090 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d08c:	2300      	movs	r3, #0
 801d08e:	e104      	b.n	801d29a <tiny_vsnprintf_like+0x222>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d094:	e0ec      	b.n	801d270 <tiny_vsnprintf_like+0x1f8>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d098:	68fb      	ldr	r3, [r7, #12]
 801d09a:	1ad2      	subs	r2, r2, r3
 801d09c:	68bb      	ldr	r3, [r7, #8]
 801d09e:	3b01      	subs	r3, #1
 801d0a0:	429a      	cmp	r2, r3
 801d0a2:	db00      	blt.n	801d0a6 <tiny_vsnprintf_like+0x2e>
 801d0a4:	e0f2      	b.n	801d28c <tiny_vsnprintf_like+0x214>
    
    if (*fmt != '%')
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	781b      	ldrb	r3, [r3, #0]
 801d0aa:	2b25      	cmp	r3, #37	; 0x25
 801d0ac:	d006      	beq.n	801d0bc <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d0ae:	687a      	ldr	r2, [r7, #4]
 801d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0b2:	1c59      	adds	r1, r3, #1
 801d0b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d0b6:	7812      	ldrb	r2, [r2, #0]
 801d0b8:	701a      	strb	r2, [r3, #0]
      continue;
 801d0ba:	e0d6      	b.n	801d26a <tiny_vsnprintf_like+0x1f2>
    }
                  
    // Process flags
    flags = 0;
 801d0bc:	2300      	movs	r3, #0
 801d0be:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	3301      	adds	r3, #1
 801d0c4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	781b      	ldrb	r3, [r3, #0]
 801d0ca:	2b30      	cmp	r3, #48	; 0x30
 801d0cc:	d103      	bne.n	801d0d6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d0ce:	6a3b      	ldr	r3, [r7, #32]
 801d0d0:	2201      	movs	r2, #1
 801d0d2:	4313      	orrs	r3, r2
 801d0d4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801d0d6:	2301      	movs	r3, #1
 801d0d8:	425b      	negs	r3, r3
 801d0da:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	781b      	ldrb	r3, [r3, #0]
 801d0e0:	2b2f      	cmp	r3, #47	; 0x2f
 801d0e2:	d909      	bls.n	801d0f8 <tiny_vsnprintf_like+0x80>
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	781b      	ldrb	r3, [r3, #0]
 801d0e8:	2b39      	cmp	r3, #57	; 0x39
 801d0ea:	d805      	bhi.n	801d0f8 <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801d0ec:	1d3b      	adds	r3, r7, #4
 801d0ee:	0018      	movs	r0, r3
 801d0f0:	f7ff feac 	bl	801ce4c <ee_skip_atoi>
 801d0f4:	0003      	movs	r3, r0
 801d0f6:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801d0f8:	2301      	movs	r3, #1
 801d0fa:	425b      	negs	r3, r3
 801d0fc:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801d0fe:	2301      	movs	r3, #1
 801d100:	425b      	negs	r3, r3
 801d102:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801d104:	230a      	movs	r3, #10
 801d106:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	781b      	ldrb	r3, [r3, #0]
 801d10c:	3b58      	subs	r3, #88	; 0x58
 801d10e:	2b20      	cmp	r3, #32
 801d110:	d854      	bhi.n	801d1bc <tiny_vsnprintf_like+0x144>
 801d112:	009a      	lsls	r2, r3, #2
 801d114:	4b63      	ldr	r3, [pc, #396]	; (801d2a4 <tiny_vsnprintf_like+0x22c>)
 801d116:	18d3      	adds	r3, r2, r3
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d11e:	1c5a      	adds	r2, r3, #1
 801d120:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d122:	2220      	movs	r2, #32
 801d124:	701a      	strb	r2, [r3, #0]
 801d126:	69fb      	ldr	r3, [r7, #28]
 801d128:	3b01      	subs	r3, #1
 801d12a:	61fb      	str	r3, [r7, #28]
 801d12c:	69fb      	ldr	r3, [r7, #28]
 801d12e:	2b00      	cmp	r3, #0
 801d130:	dcf4      	bgt.n	801d11c <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801d132:	683b      	ldr	r3, [r7, #0]
 801d134:	1d1a      	adds	r2, r3, #4
 801d136:	603a      	str	r2, [r7, #0]
 801d138:	6819      	ldr	r1, [r3, #0]
 801d13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d13c:	1c5a      	adds	r2, r3, #1
 801d13e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d140:	b2ca      	uxtb	r2, r1
 801d142:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d144:	e091      	b.n	801d26a <tiny_vsnprintf_like+0x1f2>

      case 's':
        s = va_arg(args, char *);
 801d146:	683b      	ldr	r3, [r7, #0]
 801d148:	1d1a      	adds	r2, r3, #4
 801d14a:	603a      	str	r2, [r7, #0]
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d152:	2b00      	cmp	r3, #0
 801d154:	d101      	bne.n	801d15a <tiny_vsnprintf_like+0xe2>
 801d156:	4b54      	ldr	r3, [pc, #336]	; (801d2a8 <tiny_vsnprintf_like+0x230>)
 801d158:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d15c:	0018      	movs	r0, r3
 801d15e:	f7e2 ffd3 	bl	8000108 <strlen>
 801d162:	0003      	movs	r3, r0
 801d164:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d166:	e004      	b.n	801d172 <tiny_vsnprintf_like+0xfa>
 801d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d16a:	1c5a      	adds	r2, r3, #1
 801d16c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d16e:	2220      	movs	r2, #32
 801d170:	701a      	strb	r2, [r3, #0]
 801d172:	69fb      	ldr	r3, [r7, #28]
 801d174:	1e5a      	subs	r2, r3, #1
 801d176:	61fa      	str	r2, [r7, #28]
 801d178:	693a      	ldr	r2, [r7, #16]
 801d17a:	429a      	cmp	r2, r3
 801d17c:	dbf4      	blt.n	801d168 <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d17e:	2300      	movs	r3, #0
 801d180:	62bb      	str	r3, [r7, #40]	; 0x28
 801d182:	e00a      	b.n	801d19a <tiny_vsnprintf_like+0x122>
 801d184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d186:	1c53      	adds	r3, r2, #1
 801d188:	627b      	str	r3, [r7, #36]	; 0x24
 801d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d18c:	1c59      	adds	r1, r3, #1
 801d18e:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d190:	7812      	ldrb	r2, [r2, #0]
 801d192:	701a      	strb	r2, [r3, #0]
 801d194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d196:	3301      	adds	r3, #1
 801d198:	62bb      	str	r3, [r7, #40]	; 0x28
 801d19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d19c:	693b      	ldr	r3, [r7, #16]
 801d19e:	429a      	cmp	r2, r3
 801d1a0:	dbf0      	blt.n	801d184 <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d1a2:	e062      	b.n	801d26a <tiny_vsnprintf_like+0x1f2>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801d1a4:	6a3b      	ldr	r3, [r7, #32]
 801d1a6:	2240      	movs	r2, #64	; 0x40
 801d1a8:	4313      	orrs	r3, r2
 801d1aa:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d1ac:	2310      	movs	r3, #16
 801d1ae:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d1b0:	e02d      	b.n	801d20e <tiny_vsnprintf_like+0x196>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d1b2:	6a3b      	ldr	r3, [r7, #32]
 801d1b4:	2202      	movs	r2, #2
 801d1b6:	4313      	orrs	r3, r2
 801d1b8:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d1ba:	e025      	b.n	801d208 <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	781b      	ldrb	r3, [r3, #0]
 801d1c0:	2b25      	cmp	r3, #37	; 0x25
 801d1c2:	d004      	beq.n	801d1ce <tiny_vsnprintf_like+0x156>
 801d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1c6:	1c5a      	adds	r2, r3, #1
 801d1c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d1ca:	2225      	movs	r2, #37	; 0x25
 801d1cc:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d1ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	1ad2      	subs	r2, r2, r3
 801d1d4:	68bb      	ldr	r3, [r7, #8]
 801d1d6:	3b01      	subs	r3, #1
 801d1d8:	429a      	cmp	r2, r3
 801d1da:	da17      	bge.n	801d20c <tiny_vsnprintf_like+0x194>
        if (*fmt)
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	781b      	ldrb	r3, [r3, #0]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d006      	beq.n	801d1f2 <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801d1e4:	687a      	ldr	r2, [r7, #4]
 801d1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1e8:	1c59      	adds	r1, r3, #1
 801d1ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d1ec:	7812      	ldrb	r2, [r2, #0]
 801d1ee:	701a      	strb	r2, [r3, #0]
 801d1f0:	e002      	b.n	801d1f8 <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	3b01      	subs	r3, #1
 801d1f6:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d1f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	1ad2      	subs	r2, r2, r3
 801d1fe:	68bb      	ldr	r3, [r7, #8]
 801d200:	3b01      	subs	r3, #1
 801d202:	429a      	cmp	r2, r3
 801d204:	db30      	blt.n	801d268 <tiny_vsnprintf_like+0x1f0>
 801d206:	e002      	b.n	801d20e <tiny_vsnprintf_like+0x196>
        break;
 801d208:	46c0      	nop			; (mov r8, r8)
 801d20a:	e000      	b.n	801d20e <tiny_vsnprintf_like+0x196>
        CHECK_STR_SIZE(buf, str, size);
 801d20c:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801d20e:	697b      	ldr	r3, [r7, #20]
 801d210:	2b6c      	cmp	r3, #108	; 0x6c
 801d212:	d105      	bne.n	801d220 <tiny_vsnprintf_like+0x1a8>
      num = va_arg(args, unsigned long);
 801d214:	683b      	ldr	r3, [r7, #0]
 801d216:	1d1a      	adds	r2, r3, #4
 801d218:	603a      	str	r2, [r7, #0]
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	637b      	str	r3, [r7, #52]	; 0x34
 801d21e:	e00e      	b.n	801d23e <tiny_vsnprintf_like+0x1c6>
    else if (flags & SIGN)
 801d220:	6a3b      	ldr	r3, [r7, #32]
 801d222:	2202      	movs	r2, #2
 801d224:	4013      	ands	r3, r2
 801d226:	d005      	beq.n	801d234 <tiny_vsnprintf_like+0x1bc>
      num = va_arg(args, int);
 801d228:	683b      	ldr	r3, [r7, #0]
 801d22a:	1d1a      	adds	r2, r3, #4
 801d22c:	603a      	str	r2, [r7, #0]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	637b      	str	r3, [r7, #52]	; 0x34
 801d232:	e004      	b.n	801d23e <tiny_vsnprintf_like+0x1c6>
    else
      num = va_arg(args, unsigned int);
 801d234:	683b      	ldr	r3, [r7, #0]
 801d236:	1d1a      	adds	r2, r3, #4
 801d238:	603a      	str	r2, [r7, #0]
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d23e:	68bb      	ldr	r3, [r7, #8]
 801d240:	1e5a      	subs	r2, r3, #1
 801d242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	1acb      	subs	r3, r1, r3
 801d248:	1ad1      	subs	r1, r2, r3
 801d24a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d24c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801d24e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d250:	6a3b      	ldr	r3, [r7, #32]
 801d252:	9302      	str	r3, [sp, #8]
 801d254:	69bb      	ldr	r3, [r7, #24]
 801d256:	9301      	str	r3, [sp, #4]
 801d258:	69fb      	ldr	r3, [r7, #28]
 801d25a:	9300      	str	r3, [sp, #0]
 801d25c:	0023      	movs	r3, r4
 801d25e:	f7ff fe1b 	bl	801ce98 <ee_number>
 801d262:	0003      	movs	r3, r0
 801d264:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d266:	e000      	b.n	801d26a <tiny_vsnprintf_like+0x1f2>
        continue;
 801d268:	46c0      	nop			; (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	3301      	adds	r3, #1
 801d26e:	607b      	str	r3, [r7, #4]
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	781b      	ldrb	r3, [r3, #0]
 801d274:	2b00      	cmp	r3, #0
 801d276:	d000      	beq.n	801d27a <tiny_vsnprintf_like+0x202>
 801d278:	e70d      	b.n	801d096 <tiny_vsnprintf_like+0x1e>
 801d27a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d27c:	68fb      	ldr	r3, [r7, #12]
 801d27e:	1ad2      	subs	r2, r2, r3
 801d280:	68bb      	ldr	r3, [r7, #8]
 801d282:	3b01      	subs	r3, #1
 801d284:	429a      	cmp	r2, r3
 801d286:	db00      	blt.n	801d28a <tiny_vsnprintf_like+0x212>
 801d288:	e705      	b.n	801d096 <tiny_vsnprintf_like+0x1e>
 801d28a:	e000      	b.n	801d28e <tiny_vsnprintf_like+0x216>
    CHECK_STR_SIZE(buf, str, size);
 801d28c:	46c0      	nop			; (mov r8, r8)
  }

  *str = '\0';
 801d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d290:	2200      	movs	r2, #0
 801d292:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d296:	68fb      	ldr	r3, [r7, #12]
 801d298:	1ad3      	subs	r3, r2, r3
}
 801d29a:	0018      	movs	r0, r3
 801d29c:	46bd      	mov	sp, r7
 801d29e:	b00f      	add	sp, #60	; 0x3c
 801d2a0:	bd90      	pop	{r4, r7, pc}
 801d2a2:	46c0      	nop			; (mov r8, r8)
 801d2a4:	0801f28c 	.word	0x0801f28c
 801d2a8:	0801f284 	.word	0x0801f284

0801d2ac <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b082      	sub	sp, #8
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	2203      	movs	r2, #3
 801d2b8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	2200      	movs	r2, #0
 801d2be:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	2203      	movs	r2, #3
 801d2c4:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	2203      	movs	r2, #3
 801d2ca:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	2203      	movs	r2, #3
 801d2d0:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	2203      	movs	r2, #3
 801d2d6:	715a      	strb	r2, [r3, #5]
}
 801d2d8:	46c0      	nop			; (mov r8, r8)
 801d2da:	46bd      	mov	sp, r7
 801d2dc:	b002      	add	sp, #8
 801d2de:	bd80      	pop	{r7, pc}

0801d2e0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801d2e0:	b590      	push	{r4, r7, lr}
 801d2e2:	b08b      	sub	sp, #44	; 0x2c
 801d2e4:	af04      	add	r7, sp, #16
 801d2e6:	60f8      	str	r0, [r7, #12]
 801d2e8:	607a      	str	r2, [r7, #4]
 801d2ea:	240b      	movs	r4, #11
 801d2ec:	193b      	adds	r3, r7, r4
 801d2ee:	1c0a      	adds	r2, r1, #0
 801d2f0:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d2f6:	2116      	movs	r1, #22
 801d2f8:	187a      	adds	r2, r7, r1
 801d2fa:	18db      	adds	r3, r3, r3
 801d2fc:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d302:	193b      	adds	r3, r7, r4
 801d304:	781b      	ldrb	r3, [r3, #0]
 801d306:	b29a      	uxth	r2, r3
 801d308:	187b      	adds	r3, r7, r1
 801d30a:	8819      	ldrh	r1, [r3, #0]
 801d30c:	4b0f      	ldr	r3, [pc, #60]	; (801d34c <read_register16+0x6c>)
 801d30e:	9302      	str	r3, [sp, #8]
 801d310:	2302      	movs	r3, #2
 801d312:	9301      	str	r3, [sp, #4]
 801d314:	2414      	movs	r4, #20
 801d316:	193b      	adds	r3, r7, r4
 801d318:	9300      	str	r3, [sp, #0]
 801d31a:	2301      	movs	r3, #1
 801d31c:	f7ea feb4 	bl	8008088 <HAL_I2C_Mem_Read>
 801d320:	1e03      	subs	r3, r0, #0
 801d322:	d10e      	bne.n	801d342 <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801d324:	0021      	movs	r1, r4
 801d326:	187b      	adds	r3, r7, r1
 801d328:	785b      	ldrb	r3, [r3, #1]
 801d32a:	021b      	lsls	r3, r3, #8
 801d32c:	b21a      	sxth	r2, r3
 801d32e:	187b      	adds	r3, r7, r1
 801d330:	781b      	ldrb	r3, [r3, #0]
 801d332:	b21b      	sxth	r3, r3
 801d334:	4313      	orrs	r3, r2
 801d336:	b21b      	sxth	r3, r3
 801d338:	b29a      	uxth	r2, r3
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	801a      	strh	r2, [r3, #0]
		return true;
 801d33e:	2301      	movs	r3, #1
 801d340:	e000      	b.n	801d344 <read_register16+0x64>
	} else
		return false;
 801d342:	2300      	movs	r3, #0

}
 801d344:	0018      	movs	r0, r3
 801d346:	46bd      	mov	sp, r7
 801d348:	b007      	add	sp, #28
 801d34a:	bd90      	pop	{r4, r7, pc}
 801d34c:	00001388 	.word	0x00001388

0801d350 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801d350:	b5b0      	push	{r4, r5, r7, lr}
 801d352:	b08a      	sub	sp, #40	; 0x28
 801d354:	af04      	add	r7, sp, #16
 801d356:	60f8      	str	r0, [r7, #12]
 801d358:	0008      	movs	r0, r1
 801d35a:	607a      	str	r2, [r7, #4]
 801d35c:	0019      	movs	r1, r3
 801d35e:	240b      	movs	r4, #11
 801d360:	193b      	adds	r3, r7, r4
 801d362:	1c02      	adds	r2, r0, #0
 801d364:	701a      	strb	r2, [r3, #0]
 801d366:	250a      	movs	r5, #10
 801d368:	197b      	adds	r3, r7, r5
 801d36a:	1c0a      	adds	r2, r1, #0
 801d36c:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801d36e:	68fb      	ldr	r3, [r7, #12]
 801d370:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d372:	2116      	movs	r1, #22
 801d374:	187a      	adds	r2, r7, r1
 801d376:	18db      	adds	r3, r3, r3
 801d378:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d37e:	193b      	adds	r3, r7, r4
 801d380:	781b      	ldrb	r3, [r3, #0]
 801d382:	b29c      	uxth	r4, r3
 801d384:	197b      	adds	r3, r7, r5
 801d386:	781b      	ldrb	r3, [r3, #0]
 801d388:	b29b      	uxth	r3, r3
 801d38a:	187a      	adds	r2, r7, r1
 801d38c:	8811      	ldrh	r1, [r2, #0]
 801d38e:	4a09      	ldr	r2, [pc, #36]	; (801d3b4 <read_data+0x64>)
 801d390:	9202      	str	r2, [sp, #8]
 801d392:	9301      	str	r3, [sp, #4]
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	9300      	str	r3, [sp, #0]
 801d398:	2301      	movs	r3, #1
 801d39a:	0022      	movs	r2, r4
 801d39c:	f7ea fe74 	bl	8008088 <HAL_I2C_Mem_Read>
 801d3a0:	1e03      	subs	r3, r0, #0
 801d3a2:	d101      	bne.n	801d3a8 <read_data+0x58>
		return 0;
 801d3a4:	2300      	movs	r3, #0
 801d3a6:	e000      	b.n	801d3aa <read_data+0x5a>
	else
		return 1;
 801d3a8:	2301      	movs	r3, #1

}
 801d3aa:	0018      	movs	r0, r3
 801d3ac:	46bd      	mov	sp, r7
 801d3ae:	b006      	add	sp, #24
 801d3b0:	bdb0      	pop	{r4, r5, r7, pc}
 801d3b2:	46c0      	nop			; (mov r8, r8)
 801d3b4:	00001388 	.word	0x00001388

0801d3b8 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801d3b8:	b580      	push	{r7, lr}
 801d3ba:	b082      	sub	sp, #8
 801d3bc:	af00      	add	r7, sp, #0
 801d3be:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801d3c0:	687a      	ldr	r2, [r7, #4]
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	2188      	movs	r1, #136	; 0x88
 801d3c6:	0018      	movs	r0, r3
 801d3c8:	f7ff ff8a 	bl	801d2e0 <read_register16>
 801d3cc:	1e03      	subs	r3, r0, #0
 801d3ce:	d100      	bne.n	801d3d2 <read_calibration_data+0x1a>
 801d3d0:	e06d      	b.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	1c9a      	adds	r2, r3, #2
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	218a      	movs	r1, #138	; 0x8a
 801d3da:	0018      	movs	r0, r3
 801d3dc:	f7ff ff80 	bl	801d2e0 <read_register16>
 801d3e0:	1e03      	subs	r3, r0, #0
 801d3e2:	d100      	bne.n	801d3e6 <read_calibration_data+0x2e>
 801d3e4:	e063      	b.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	1d1a      	adds	r2, r3, #4
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	218c      	movs	r1, #140	; 0x8c
 801d3ee:	0018      	movs	r0, r3
 801d3f0:	f7ff ff76 	bl	801d2e0 <read_register16>
 801d3f4:	1e03      	subs	r3, r0, #0
 801d3f6:	d05a      	beq.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	1d9a      	adds	r2, r3, #6
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	218e      	movs	r1, #142	; 0x8e
 801d400:	0018      	movs	r0, r3
 801d402:	f7ff ff6d 	bl	801d2e0 <read_register16>
 801d406:	1e03      	subs	r3, r0, #0
 801d408:	d051      	beq.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	3308      	adds	r3, #8
 801d40e:	001a      	movs	r2, r3
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	2190      	movs	r1, #144	; 0x90
 801d414:	0018      	movs	r0, r3
 801d416:	f7ff ff63 	bl	801d2e0 <read_register16>
 801d41a:	1e03      	subs	r3, r0, #0
 801d41c:	d047      	beq.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	330a      	adds	r3, #10
 801d422:	001a      	movs	r2, r3
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	2192      	movs	r1, #146	; 0x92
 801d428:	0018      	movs	r0, r3
 801d42a:	f7ff ff59 	bl	801d2e0 <read_register16>
 801d42e:	1e03      	subs	r3, r0, #0
 801d430:	d03d      	beq.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	330c      	adds	r3, #12
 801d436:	001a      	movs	r2, r3
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	2194      	movs	r1, #148	; 0x94
 801d43c:	0018      	movs	r0, r3
 801d43e:	f7ff ff4f 	bl	801d2e0 <read_register16>
 801d442:	1e03      	subs	r3, r0, #0
 801d444:	d033      	beq.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	330e      	adds	r3, #14
 801d44a:	001a      	movs	r2, r3
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	2196      	movs	r1, #150	; 0x96
 801d450:	0018      	movs	r0, r3
 801d452:	f7ff ff45 	bl	801d2e0 <read_register16>
 801d456:	1e03      	subs	r3, r0, #0
 801d458:	d029      	beq.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	3310      	adds	r3, #16
 801d45e:	001a      	movs	r2, r3
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	2198      	movs	r1, #152	; 0x98
 801d464:	0018      	movs	r0, r3
 801d466:	f7ff ff3b 	bl	801d2e0 <read_register16>
 801d46a:	1e03      	subs	r3, r0, #0
 801d46c:	d01f      	beq.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	3312      	adds	r3, #18
 801d472:	001a      	movs	r2, r3
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	219a      	movs	r1, #154	; 0x9a
 801d478:	0018      	movs	r0, r3
 801d47a:	f7ff ff31 	bl	801d2e0 <read_register16>
 801d47e:	1e03      	subs	r3, r0, #0
 801d480:	d015      	beq.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	3314      	adds	r3, #20
 801d486:	001a      	movs	r2, r3
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	219c      	movs	r1, #156	; 0x9c
 801d48c:	0018      	movs	r0, r3
 801d48e:	f7ff ff27 	bl	801d2e0 <read_register16>
 801d492:	1e03      	subs	r3, r0, #0
 801d494:	d00b      	beq.n	801d4ae <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	3316      	adds	r3, #22
 801d49a:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	219e      	movs	r1, #158	; 0x9e
 801d4a0:	0018      	movs	r0, r3
 801d4a2:	f7ff ff1d 	bl	801d2e0 <read_register16>
 801d4a6:	1e03      	subs	r3, r0, #0
 801d4a8:	d001      	beq.n	801d4ae <read_calibration_data+0xf6>

		return true;
 801d4aa:	2301      	movs	r3, #1
 801d4ac:	e000      	b.n	801d4b0 <read_calibration_data+0xf8>
	}

	return false;
 801d4ae:	2300      	movs	r3, #0
}
 801d4b0:	0018      	movs	r0, r3
 801d4b2:	46bd      	mov	sp, r7
 801d4b4:	b002      	add	sp, #8
 801d4b6:	bd80      	pop	{r7, pc}

0801d4b8 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801d4b8:	b5b0      	push	{r4, r5, r7, lr}
 801d4ba:	b084      	sub	sp, #16
 801d4bc:	af00      	add	r7, sp, #0
 801d4be:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	3318      	adds	r3, #24
 801d4c4:	001a      	movs	r2, r3
 801d4c6:	6878      	ldr	r0, [r7, #4]
 801d4c8:	2301      	movs	r3, #1
 801d4ca:	21a1      	movs	r1, #161	; 0xa1
 801d4cc:	f7ff ff40 	bl	801d350 <read_data>
 801d4d0:	1e03      	subs	r3, r0, #0
 801d4d2:	d14b      	bne.n	801d56c <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	331a      	adds	r3, #26
 801d4d8:	001a      	movs	r2, r3
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	21e1      	movs	r1, #225	; 0xe1
 801d4de:	0018      	movs	r0, r3
 801d4e0:	f7ff fefe 	bl	801d2e0 <read_register16>
 801d4e4:	1e03      	subs	r3, r0, #0
 801d4e6:	d041      	beq.n	801d56c <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	331c      	adds	r3, #28
 801d4ec:	001a      	movs	r2, r3
 801d4ee:	6878      	ldr	r0, [r7, #4]
 801d4f0:	2301      	movs	r3, #1
 801d4f2:	21e3      	movs	r1, #227	; 0xe3
 801d4f4:	f7ff ff2c 	bl	801d350 <read_data>
 801d4f8:	1e03      	subs	r3, r0, #0
 801d4fa:	d137      	bne.n	801d56c <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 801d4fc:	240e      	movs	r4, #14
 801d4fe:	193a      	adds	r2, r7, r4
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	21e4      	movs	r1, #228	; 0xe4
 801d504:	0018      	movs	r0, r3
 801d506:	f7ff feeb 	bl	801d2e0 <read_register16>
 801d50a:	1e03      	subs	r3, r0, #0
 801d50c:	d02e      	beq.n	801d56c <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 801d50e:	250c      	movs	r5, #12
 801d510:	197a      	adds	r2, r7, r5
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	21e5      	movs	r1, #229	; 0xe5
 801d516:	0018      	movs	r0, r3
 801d518:	f7ff fee2 	bl	801d2e0 <read_register16>
 801d51c:	1e03      	subs	r3, r0, #0
 801d51e:	d025      	beq.n	801d56c <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	3322      	adds	r3, #34	; 0x22
 801d524:	001a      	movs	r2, r3
 801d526:	6878      	ldr	r0, [r7, #4]
 801d528:	2301      	movs	r3, #1
 801d52a:	21e7      	movs	r1, #231	; 0xe7
 801d52c:	f7ff ff10 	bl	801d350 <read_data>
 801d530:	1e03      	subs	r3, r0, #0
 801d532:	d11b      	bne.n	801d56c <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801d534:	193b      	adds	r3, r7, r4
 801d536:	881b      	ldrh	r3, [r3, #0]
 801d538:	011b      	lsls	r3, r3, #4
 801d53a:	b21a      	sxth	r2, r3
 801d53c:	23ff      	movs	r3, #255	; 0xff
 801d53e:	011b      	lsls	r3, r3, #4
 801d540:	4013      	ands	r3, r2
 801d542:	b21a      	sxth	r2, r3
 801d544:	193b      	adds	r3, r7, r4
 801d546:	881b      	ldrh	r3, [r3, #0]
 801d548:	121b      	asrs	r3, r3, #8
 801d54a:	b21b      	sxth	r3, r3
 801d54c:	210f      	movs	r1, #15
 801d54e:	400b      	ands	r3, r1
 801d550:	b21b      	sxth	r3, r3
 801d552:	4313      	orrs	r3, r2
 801d554:	b21a      	sxth	r2, r3
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801d55a:	197b      	adds	r3, r7, r5
 801d55c:	881b      	ldrh	r3, [r3, #0]
 801d55e:	091b      	lsrs	r3, r3, #4
 801d560:	b29b      	uxth	r3, r3
 801d562:	b21a      	sxth	r2, r3
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	841a      	strh	r2, [r3, #32]

		return true;
 801d568:	2301      	movs	r3, #1
 801d56a:	e000      	b.n	801d56e <read_hum_calibration_data+0xb6>
	}

	return false;
 801d56c:	2300      	movs	r3, #0
}
 801d56e:	0018      	movs	r0, r3
 801d570:	46bd      	mov	sp, r7
 801d572:	b004      	add	sp, #16
 801d574:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d578 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801d578:	b580      	push	{r7, lr}
 801d57a:	b088      	sub	sp, #32
 801d57c:	af04      	add	r7, sp, #16
 801d57e:	6078      	str	r0, [r7, #4]
 801d580:	0008      	movs	r0, r1
 801d582:	0011      	movs	r1, r2
 801d584:	1cfb      	adds	r3, r7, #3
 801d586:	1c02      	adds	r2, r0, #0
 801d588:	701a      	strb	r2, [r3, #0]
 801d58a:	1cbb      	adds	r3, r7, #2
 801d58c:	1c0a      	adds	r2, r1, #0
 801d58e:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d594:	210e      	movs	r1, #14
 801d596:	187a      	adds	r2, r7, r1
 801d598:	18db      	adds	r3, r3, r3
 801d59a:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d5a0:	1cfb      	adds	r3, r7, #3
 801d5a2:	781b      	ldrb	r3, [r3, #0]
 801d5a4:	b29a      	uxth	r2, r3
 801d5a6:	187b      	adds	r3, r7, r1
 801d5a8:	8819      	ldrh	r1, [r3, #0]
 801d5aa:	4b09      	ldr	r3, [pc, #36]	; (801d5d0 <write_register8+0x58>)
 801d5ac:	9302      	str	r3, [sp, #8]
 801d5ae:	2301      	movs	r3, #1
 801d5b0:	9301      	str	r3, [sp, #4]
 801d5b2:	1cbb      	adds	r3, r7, #2
 801d5b4:	9300      	str	r3, [sp, #0]
 801d5b6:	2301      	movs	r3, #1
 801d5b8:	f7ea fc38 	bl	8007e2c <HAL_I2C_Mem_Write>
 801d5bc:	1e03      	subs	r3, r0, #0
 801d5be:	d101      	bne.n	801d5c4 <write_register8+0x4c>
		return false;
 801d5c0:	2300      	movs	r3, #0
 801d5c2:	e000      	b.n	801d5c6 <write_register8+0x4e>
	else
		return true;
 801d5c4:	2301      	movs	r3, #1
}
 801d5c6:	0018      	movs	r0, r3
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	b004      	add	sp, #16
 801d5cc:	bd80      	pop	{r7, pc}
 801d5ce:	46c0      	nop			; (mov r8, r8)
 801d5d0:	00002710 	.word	0x00002710

0801d5d4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801d5d4:	b590      	push	{r4, r7, lr}
 801d5d6:	b085      	sub	sp, #20
 801d5d8:	af00      	add	r7, sp, #0
 801d5da:	6078      	str	r0, [r7, #4]
 801d5dc:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d5e2:	2b76      	cmp	r3, #118	; 0x76
 801d5e4:	d005      	beq.n	801d5f2 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d5ea:	2b77      	cmp	r3, #119	; 0x77
 801d5ec:	d001      	beq.n	801d5f2 <bmp280_init+0x1e>

		return false;
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	e0a3      	b.n	801d73a <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	3332      	adds	r3, #50	; 0x32
 801d5f6:	001a      	movs	r2, r3
 801d5f8:	6878      	ldr	r0, [r7, #4]
 801d5fa:	2301      	movs	r3, #1
 801d5fc:	21d0      	movs	r1, #208	; 0xd0
 801d5fe:	f7ff fea7 	bl	801d350 <read_data>
 801d602:	1e03      	subs	r3, r0, #0
 801d604:	d001      	beq.n	801d60a <bmp280_init+0x36>
		return false;
 801d606:	2300      	movs	r3, #0
 801d608:	e097      	b.n	801d73a <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	2232      	movs	r2, #50	; 0x32
 801d60e:	5c9b      	ldrb	r3, [r3, r2]
 801d610:	2b58      	cmp	r3, #88	; 0x58
 801d612:	d006      	beq.n	801d622 <bmp280_init+0x4e>
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	2232      	movs	r2, #50	; 0x32
 801d618:	5c9b      	ldrb	r3, [r3, r2]
 801d61a:	2b60      	cmp	r3, #96	; 0x60
 801d61c:	d001      	beq.n	801d622 <bmp280_init+0x4e>

		return false;
 801d61e:	2300      	movs	r3, #0
 801d620:	e08b      	b.n	801d73a <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	22b6      	movs	r2, #182	; 0xb6
 801d626:	21e0      	movs	r1, #224	; 0xe0
 801d628:	0018      	movs	r0, r3
 801d62a:	f7ff ffa5 	bl	801d578 <write_register8>
 801d62e:	1e03      	subs	r3, r0, #0
 801d630:	d001      	beq.n	801d636 <bmp280_init+0x62>
		return false;
 801d632:	2300      	movs	r3, #0
 801d634:	e081      	b.n	801d73a <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801d636:	240c      	movs	r4, #12
 801d638:	193a      	adds	r2, r7, r4
 801d63a:	6878      	ldr	r0, [r7, #4]
 801d63c:	2301      	movs	r3, #1
 801d63e:	21f3      	movs	r1, #243	; 0xf3
 801d640:	f7ff fe86 	bl	801d350 <read_data>
 801d644:	1e03      	subs	r3, r0, #0
 801d646:	d1f6      	bne.n	801d636 <bmp280_init+0x62>
				&& (status & 1) == 0)
 801d648:	193b      	adds	r3, r7, r4
 801d64a:	781b      	ldrb	r3, [r3, #0]
 801d64c:	001a      	movs	r2, r3
 801d64e:	2301      	movs	r3, #1
 801d650:	4013      	ands	r3, r2
 801d652:	d1f0      	bne.n	801d636 <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	0018      	movs	r0, r3
 801d658:	f7ff feae 	bl	801d3b8 <read_calibration_data>
 801d65c:	0003      	movs	r3, r0
 801d65e:	001a      	movs	r2, r3
 801d660:	2301      	movs	r3, #1
 801d662:	4053      	eors	r3, r2
 801d664:	b2db      	uxtb	r3, r3
 801d666:	2b00      	cmp	r3, #0
 801d668:	d100      	bne.n	801d66c <bmp280_init+0x98>
 801d66a:	e001      	b.n	801d670 <bmp280_init+0x9c>
		return false;
 801d66c:	2300      	movs	r3, #0
 801d66e:	e064      	b.n	801d73a <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	2232      	movs	r2, #50	; 0x32
 801d674:	5c9b      	ldrb	r3, [r3, r2]
 801d676:	2b60      	cmp	r3, #96	; 0x60
 801d678:	d10c      	bne.n	801d694 <bmp280_init+0xc0>
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	0018      	movs	r0, r3
 801d67e:	f7ff ff1b 	bl	801d4b8 <read_hum_calibration_data>
 801d682:	0003      	movs	r3, r0
 801d684:	001a      	movs	r2, r3
 801d686:	2301      	movs	r3, #1
 801d688:	4053      	eors	r3, r2
 801d68a:	b2db      	uxtb	r3, r3
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d001      	beq.n	801d694 <bmp280_init+0xc0>
		return false;
 801d690:	2300      	movs	r3, #0
 801d692:	e052      	b.n	801d73a <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801d694:	683b      	ldr	r3, [r7, #0]
 801d696:	795b      	ldrb	r3, [r3, #5]
 801d698:	015b      	lsls	r3, r3, #5
 801d69a:	b25a      	sxtb	r2, r3
 801d69c:	683b      	ldr	r3, [r7, #0]
 801d69e:	785b      	ldrb	r3, [r3, #1]
 801d6a0:	009b      	lsls	r3, r3, #2
 801d6a2:	b25b      	sxtb	r3, r3
 801d6a4:	4313      	orrs	r3, r2
 801d6a6:	b25a      	sxtb	r2, r3
 801d6a8:	210f      	movs	r1, #15
 801d6aa:	187b      	adds	r3, r7, r1
 801d6ac:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801d6ae:	187b      	adds	r3, r7, r1
 801d6b0:	781a      	ldrb	r2, [r3, #0]
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	21f5      	movs	r1, #245	; 0xf5
 801d6b6:	0018      	movs	r0, r3
 801d6b8:	f7ff ff5e 	bl	801d578 <write_register8>
 801d6bc:	1e03      	subs	r3, r0, #0
 801d6be:	d001      	beq.n	801d6c4 <bmp280_init+0xf0>
		return false;
 801d6c0:	2300      	movs	r3, #0
 801d6c2:	e03a      	b.n	801d73a <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801d6c4:	683b      	ldr	r3, [r7, #0]
 801d6c6:	781b      	ldrb	r3, [r3, #0]
 801d6c8:	2b01      	cmp	r3, #1
 801d6ca:	d102      	bne.n	801d6d2 <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801d6cc:	683b      	ldr	r3, [r7, #0]
 801d6ce:	2200      	movs	r2, #0
 801d6d0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d6d2:	683b      	ldr	r3, [r7, #0]
 801d6d4:	78db      	ldrb	r3, [r3, #3]
 801d6d6:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801d6d8:	b25a      	sxtb	r2, r3
 801d6da:	683b      	ldr	r3, [r7, #0]
 801d6dc:	789b      	ldrb	r3, [r3, #2]
 801d6de:	009b      	lsls	r3, r3, #2
 801d6e0:	b25b      	sxtb	r3, r3
 801d6e2:	4313      	orrs	r3, r2
 801d6e4:	b25a      	sxtb	r2, r3
 801d6e6:	683b      	ldr	r3, [r7, #0]
 801d6e8:	781b      	ldrb	r3, [r3, #0]
 801d6ea:	b25b      	sxtb	r3, r3
 801d6ec:	4313      	orrs	r3, r2
 801d6ee:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d6f0:	230e      	movs	r3, #14
 801d6f2:	18fb      	adds	r3, r7, r3
 801d6f4:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	2232      	movs	r2, #50	; 0x32
 801d6fa:	5c9b      	ldrb	r3, [r3, r2]
 801d6fc:	2b60      	cmp	r3, #96	; 0x60
 801d6fe:	d10f      	bne.n	801d720 <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801d700:	210d      	movs	r1, #13
 801d702:	187b      	adds	r3, r7, r1
 801d704:	683a      	ldr	r2, [r7, #0]
 801d706:	7912      	ldrb	r2, [r2, #4]
 801d708:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801d70a:	187b      	adds	r3, r7, r1
 801d70c:	781a      	ldrb	r2, [r3, #0]
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	21f2      	movs	r1, #242	; 0xf2
 801d712:	0018      	movs	r0, r3
 801d714:	f7ff ff30 	bl	801d578 <write_register8>
 801d718:	1e03      	subs	r3, r0, #0
 801d71a:	d001      	beq.n	801d720 <bmp280_init+0x14c>
			return false;
 801d71c:	2300      	movs	r3, #0
 801d71e:	e00c      	b.n	801d73a <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801d720:	230e      	movs	r3, #14
 801d722:	18fb      	adds	r3, r7, r3
 801d724:	781a      	ldrb	r2, [r3, #0]
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	21f4      	movs	r1, #244	; 0xf4
 801d72a:	0018      	movs	r0, r3
 801d72c:	f7ff ff24 	bl	801d578 <write_register8>
 801d730:	1e03      	subs	r3, r0, #0
 801d732:	d001      	beq.n	801d738 <bmp280_init+0x164>
		return false;
 801d734:	2300      	movs	r3, #0
 801d736:	e000      	b.n	801d73a <bmp280_init+0x166>
	}

	return true;
 801d738:	2301      	movs	r3, #1
}
 801d73a:	0018      	movs	r0, r3
 801d73c:	46bd      	mov	sp, r7
 801d73e:	b005      	add	sp, #20
 801d740:	bd90      	pop	{r4, r7, pc}

0801d742 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801d742:	b580      	push	{r7, lr}
 801d744:	b086      	sub	sp, #24
 801d746:	af00      	add	r7, sp, #0
 801d748:	60f8      	str	r0, [r7, #12]
 801d74a:	60b9      	str	r1, [r7, #8]
 801d74c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d74e:	68bb      	ldr	r3, [r7, #8]
 801d750:	10da      	asrs	r2, r3, #3
 801d752:	68fb      	ldr	r3, [r7, #12]
 801d754:	881b      	ldrh	r3, [r3, #0]
 801d756:	005b      	lsls	r3, r3, #1
 801d758:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801d75a:	68fa      	ldr	r2, [r7, #12]
 801d75c:	2102      	movs	r1, #2
 801d75e:	5e52      	ldrsh	r2, [r2, r1]
 801d760:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d762:	12db      	asrs	r3, r3, #11
 801d764:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d766:	68bb      	ldr	r3, [r7, #8]
 801d768:	111b      	asrs	r3, r3, #4
 801d76a:	68fa      	ldr	r2, [r7, #12]
 801d76c:	8812      	ldrh	r2, [r2, #0]
 801d76e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801d770:	68ba      	ldr	r2, [r7, #8]
 801d772:	1112      	asrs	r2, r2, #4
 801d774:	68f9      	ldr	r1, [r7, #12]
 801d776:	8809      	ldrh	r1, [r1, #0]
 801d778:	1a52      	subs	r2, r2, r1
 801d77a:	4353      	muls	r3, r2
 801d77c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801d77e:	68fa      	ldr	r2, [r7, #12]
 801d780:	2104      	movs	r1, #4
 801d782:	5e52      	ldrsh	r2, [r2, r1]
 801d784:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d786:	139b      	asrs	r3, r3, #14
 801d788:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801d78a:	697a      	ldr	r2, [r7, #20]
 801d78c:	693b      	ldr	r3, [r7, #16]
 801d78e:	18d2      	adds	r2, r2, r3
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	681a      	ldr	r2, [r3, #0]
 801d798:	0013      	movs	r3, r2
 801d79a:	009b      	lsls	r3, r3, #2
 801d79c:	189b      	adds	r3, r3, r2
 801d79e:	3380      	adds	r3, #128	; 0x80
 801d7a0:	121b      	asrs	r3, r3, #8
}
 801d7a2:	0018      	movs	r0, r3
 801d7a4:	46bd      	mov	sp, r7
 801d7a6:	b006      	add	sp, #24
 801d7a8:	bd80      	pop	{r7, pc}
	...

0801d7ac <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801d7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7ae:	b0af      	sub	sp, #188	; 0xbc
 801d7b0:	af00      	add	r7, sp, #0
 801d7b2:	239c      	movs	r3, #156	; 0x9c
 801d7b4:	18fe      	adds	r6, r7, r3
 801d7b6:	6030      	str	r0, [r6, #0]
 801d7b8:	2098      	movs	r0, #152	; 0x98
 801d7ba:	1838      	adds	r0, r7, r0
 801d7bc:	6001      	str	r1, [r0, #0]
 801d7be:	2194      	movs	r1, #148	; 0x94
 801d7c0:	1878      	adds	r0, r7, r1
 801d7c2:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801d7c4:	187a      	adds	r2, r7, r1
 801d7c6:	6813      	ldr	r3, [r2, #0]
 801d7c8:	65bb      	str	r3, [r7, #88]	; 0x58
 801d7ca:	17db      	asrs	r3, r3, #31
 801d7cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d7ce:	4ace      	ldr	r2, [pc, #824]	; (801db08 <compensate_pressure+0x35c>)
 801d7d0:	2301      	movs	r3, #1
 801d7d2:	425b      	negs	r3, r3
 801d7d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d7d6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801d7d8:	1880      	adds	r0, r0, r2
 801d7da:	4159      	adcs	r1, r3
 801d7dc:	0002      	movs	r2, r0
 801d7de:	000b      	movs	r3, r1
 801d7e0:	26b0      	movs	r6, #176	; 0xb0
 801d7e2:	19b9      	adds	r1, r7, r6
 801d7e4:	600a      	str	r2, [r1, #0]
 801d7e6:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801d7e8:	19ba      	adds	r2, r7, r6
 801d7ea:	6853      	ldr	r3, [r2, #4]
 801d7ec:	6812      	ldr	r2, [r2, #0]
 801d7ee:	19b9      	adds	r1, r7, r6
 801d7f0:	6808      	ldr	r0, [r1, #0]
 801d7f2:	6849      	ldr	r1, [r1, #4]
 801d7f4:	f7e2 fec2 	bl	800057c <__aeabi_lmul>
 801d7f8:	0002      	movs	r2, r0
 801d7fa:	000b      	movs	r3, r1
 801d7fc:	0010      	movs	r0, r2
 801d7fe:	0019      	movs	r1, r3
 801d800:	239c      	movs	r3, #156	; 0x9c
 801d802:	18fa      	adds	r2, r7, r3
 801d804:	6813      	ldr	r3, [r2, #0]
 801d806:	2210      	movs	r2, #16
 801d808:	5e9b      	ldrsh	r3, [r3, r2]
 801d80a:	653b      	str	r3, [r7, #80]	; 0x50
 801d80c:	17db      	asrs	r3, r3, #31
 801d80e:	657b      	str	r3, [r7, #84]	; 0x54
 801d810:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801d812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d814:	f7e2 feb2 	bl	800057c <__aeabi_lmul>
 801d818:	0002      	movs	r2, r0
 801d81a:	000b      	movs	r3, r1
 801d81c:	21a8      	movs	r1, #168	; 0xa8
 801d81e:	1878      	adds	r0, r7, r1
 801d820:	6002      	str	r2, [r0, #0]
 801d822:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801d824:	239c      	movs	r3, #156	; 0x9c
 801d826:	18fa      	adds	r2, r7, r3
 801d828:	6813      	ldr	r3, [r2, #0]
 801d82a:	220e      	movs	r2, #14
 801d82c:	5e9b      	ldrsh	r3, [r3, r2]
 801d82e:	64bb      	str	r3, [r7, #72]	; 0x48
 801d830:	17db      	asrs	r3, r3, #31
 801d832:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d834:	19ba      	adds	r2, r7, r6
 801d836:	6853      	ldr	r3, [r2, #4]
 801d838:	6812      	ldr	r2, [r2, #0]
 801d83a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801d83c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d83e:	f7e2 fe9d 	bl	800057c <__aeabi_lmul>
 801d842:	0002      	movs	r2, r0
 801d844:	000b      	movs	r3, r1
 801d846:	0bd1      	lsrs	r1, r2, #15
 801d848:	045d      	lsls	r5, r3, #17
 801d84a:	430d      	orrs	r5, r1
 801d84c:	0454      	lsls	r4, r2, #17
 801d84e:	21a8      	movs	r1, #168	; 0xa8
 801d850:	187a      	adds	r2, r7, r1
 801d852:	6853      	ldr	r3, [r2, #4]
 801d854:	6812      	ldr	r2, [r2, #0]
 801d856:	1912      	adds	r2, r2, r4
 801d858:	416b      	adcs	r3, r5
 801d85a:	1878      	adds	r0, r7, r1
 801d85c:	6002      	str	r2, [r0, #0]
 801d85e:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801d860:	259c      	movs	r5, #156	; 0x9c
 801d862:	197b      	adds	r3, r7, r5
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	220c      	movs	r2, #12
 801d868:	5e9b      	ldrsh	r3, [r3, r2]
 801d86a:	643b      	str	r3, [r7, #64]	; 0x40
 801d86c:	17db      	asrs	r3, r3, #31
 801d86e:	647b      	str	r3, [r7, #68]	; 0x44
 801d870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d872:	00db      	lsls	r3, r3, #3
 801d874:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d876:	2300      	movs	r3, #0
 801d878:	63bb      	str	r3, [r7, #56]	; 0x38
 801d87a:	000c      	movs	r4, r1
 801d87c:	187b      	adds	r3, r7, r1
 801d87e:	681a      	ldr	r2, [r3, #0]
 801d880:	685b      	ldr	r3, [r3, #4]
 801d882:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d886:	1812      	adds	r2, r2, r0
 801d888:	414b      	adcs	r3, r1
 801d88a:	1939      	adds	r1, r7, r4
 801d88c:	600a      	str	r2, [r1, #0]
 801d88e:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801d890:	0034      	movs	r4, r6
 801d892:	193b      	adds	r3, r7, r4
 801d894:	681a      	ldr	r2, [r3, #0]
 801d896:	685b      	ldr	r3, [r3, #4]
 801d898:	1939      	adds	r1, r7, r4
 801d89a:	6808      	ldr	r0, [r1, #0]
 801d89c:	6849      	ldr	r1, [r1, #4]
 801d89e:	f7e2 fe6d 	bl	800057c <__aeabi_lmul>
 801d8a2:	0002      	movs	r2, r0
 801d8a4:	000b      	movs	r3, r1
 801d8a6:	0010      	movs	r0, r2
 801d8a8:	0019      	movs	r1, r3
 801d8aa:	197b      	adds	r3, r7, r5
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	220a      	movs	r2, #10
 801d8b0:	5e9b      	ldrsh	r3, [r3, r2]
 801d8b2:	633b      	str	r3, [r7, #48]	; 0x30
 801d8b4:	17db      	asrs	r3, r3, #31
 801d8b6:	637b      	str	r3, [r7, #52]	; 0x34
 801d8b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8bc:	f7e2 fe5e 	bl	800057c <__aeabi_lmul>
 801d8c0:	0002      	movs	r2, r0
 801d8c2:	000b      	movs	r3, r1
 801d8c4:	0619      	lsls	r1, r3, #24
 801d8c6:	468c      	mov	ip, r1
 801d8c8:	0a10      	lsrs	r0, r2, #8
 801d8ca:	2688      	movs	r6, #136	; 0x88
 801d8cc:	19b9      	adds	r1, r7, r6
 801d8ce:	6008      	str	r0, [r1, #0]
 801d8d0:	19b8      	adds	r0, r7, r6
 801d8d2:	6800      	ldr	r0, [r0, #0]
 801d8d4:	4661      	mov	r1, ip
 801d8d6:	4308      	orrs	r0, r1
 801d8d8:	19b9      	adds	r1, r7, r6
 801d8da:	6008      	str	r0, [r1, #0]
 801d8dc:	121b      	asrs	r3, r3, #8
 801d8de:	228c      	movs	r2, #140	; 0x8c
 801d8e0:	18ba      	adds	r2, r7, r2
 801d8e2:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801d8e4:	197b      	adds	r3, r7, r5
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	2208      	movs	r2, #8
 801d8ea:	5e9b      	ldrsh	r3, [r3, r2]
 801d8ec:	62bb      	str	r3, [r7, #40]	; 0x28
 801d8ee:	17db      	asrs	r3, r3, #31
 801d8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d8f2:	193b      	adds	r3, r7, r4
 801d8f4:	681a      	ldr	r2, [r3, #0]
 801d8f6:	685b      	ldr	r3, [r3, #4]
 801d8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d8fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d8fc:	f7e2 fe3e 	bl	800057c <__aeabi_lmul>
 801d900:	0002      	movs	r2, r0
 801d902:	000b      	movs	r3, r1
 801d904:	0d11      	lsrs	r1, r2, #20
 801d906:	468c      	mov	ip, r1
 801d908:	0318      	lsls	r0, r3, #12
 801d90a:	2184      	movs	r1, #132	; 0x84
 801d90c:	1879      	adds	r1, r7, r1
 801d90e:	6008      	str	r0, [r1, #0]
 801d910:	2084      	movs	r0, #132	; 0x84
 801d912:	1839      	adds	r1, r7, r0
 801d914:	6808      	ldr	r0, [r1, #0]
 801d916:	4661      	mov	r1, ip
 801d918:	4308      	orrs	r0, r1
 801d91a:	2184      	movs	r1, #132	; 0x84
 801d91c:	1879      	adds	r1, r7, r1
 801d91e:	6008      	str	r0, [r1, #0]
 801d920:	0313      	lsls	r3, r2, #12
 801d922:	2180      	movs	r1, #128	; 0x80
 801d924:	187a      	adds	r2, r7, r1
 801d926:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801d928:	19bb      	adds	r3, r7, r6
 801d92a:	681a      	ldr	r2, [r3, #0]
 801d92c:	685b      	ldr	r3, [r3, #4]
 801d92e:	1879      	adds	r1, r7, r1
 801d930:	6808      	ldr	r0, [r1, #0]
 801d932:	6849      	ldr	r1, [r1, #4]
 801d934:	1812      	adds	r2, r2, r0
 801d936:	414b      	adcs	r3, r1
 801d938:	1939      	adds	r1, r7, r4
 801d93a:	600a      	str	r2, [r1, #0]
 801d93c:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801d93e:	193b      	adds	r3, r7, r4
 801d940:	6818      	ldr	r0, [r3, #0]
 801d942:	6859      	ldr	r1, [r3, #4]
 801d944:	2200      	movs	r2, #0
 801d946:	2380      	movs	r3, #128	; 0x80
 801d948:	021b      	lsls	r3, r3, #8
 801d94a:	1880      	adds	r0, r0, r2
 801d94c:	4159      	adcs	r1, r3
 801d94e:	197b      	adds	r3, r7, r5
 801d950:	681b      	ldr	r3, [r3, #0]
 801d952:	88db      	ldrh	r3, [r3, #6]
 801d954:	623b      	str	r3, [r7, #32]
 801d956:	2300      	movs	r3, #0
 801d958:	627b      	str	r3, [r7, #36]	; 0x24
 801d95a:	6a3a      	ldr	r2, [r7, #32]
 801d95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d95e:	f7e2 fe0d 	bl	800057c <__aeabi_lmul>
 801d962:	0002      	movs	r2, r0
 801d964:	000b      	movs	r3, r1
 801d966:	1059      	asrs	r1, r3, #1
 801d968:	1938      	adds	r0, r7, r4
 801d96a:	6001      	str	r1, [r0, #0]
 801d96c:	17db      	asrs	r3, r3, #31
 801d96e:	21b4      	movs	r1, #180	; 0xb4
 801d970:	187a      	adds	r2, r7, r1
 801d972:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 801d974:	193b      	adds	r3, r7, r4
 801d976:	681a      	ldr	r2, [r3, #0]
 801d978:	187b      	adds	r3, r7, r1
 801d97a:	681b      	ldr	r3, [r3, #0]
 801d97c:	431a      	orrs	r2, r3
 801d97e:	d101      	bne.n	801d984 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 801d980:	2300      	movs	r3, #0
 801d982:	e0bc      	b.n	801dafe <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 801d984:	2398      	movs	r3, #152	; 0x98
 801d986:	18fb      	adds	r3, r7, r3
 801d988:	681a      	ldr	r2, [r3, #0]
 801d98a:	2380      	movs	r3, #128	; 0x80
 801d98c:	035b      	lsls	r3, r3, #13
 801d98e:	1a9b      	subs	r3, r3, r2
 801d990:	24a0      	movs	r4, #160	; 0xa0
 801d992:	193a      	adds	r2, r7, r4
 801d994:	6013      	str	r3, [r2, #0]
 801d996:	17db      	asrs	r3, r3, #31
 801d998:	25a4      	movs	r5, #164	; 0xa4
 801d99a:	197a      	adds	r2, r7, r5
 801d99c:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 801d99e:	193b      	adds	r3, r7, r4
 801d9a0:	681b      	ldr	r3, [r3, #0]
 801d9a2:	105b      	asrs	r3, r3, #1
 801d9a4:	61fb      	str	r3, [r7, #28]
 801d9a6:	193b      	adds	r3, r7, r4
 801d9a8:	681b      	ldr	r3, [r3, #0]
 801d9aa:	07db      	lsls	r3, r3, #31
 801d9ac:	61bb      	str	r3, [r7, #24]
 801d9ae:	20a8      	movs	r0, #168	; 0xa8
 801d9b0:	183a      	adds	r2, r7, r0
 801d9b2:	6853      	ldr	r3, [r2, #4]
 801d9b4:	6812      	ldr	r2, [r2, #0]
 801d9b6:	69b8      	ldr	r0, [r7, #24]
 801d9b8:	69f9      	ldr	r1, [r7, #28]
 801d9ba:	1a80      	subs	r0, r0, r2
 801d9bc:	4199      	sbcs	r1, r3
 801d9be:	4a53      	ldr	r2, [pc, #332]	; (801db0c <compensate_pressure+0x360>)
 801d9c0:	2300      	movs	r3, #0
 801d9c2:	f7e2 fddb 	bl	800057c <__aeabi_lmul>
 801d9c6:	0002      	movs	r2, r0
 801d9c8:	000b      	movs	r3, r1
 801d9ca:	0010      	movs	r0, r2
 801d9cc:	0019      	movs	r1, r3
 801d9ce:	23b0      	movs	r3, #176	; 0xb0
 801d9d0:	18fa      	adds	r2, r7, r3
 801d9d2:	6853      	ldr	r3, [r2, #4]
 801d9d4:	6812      	ldr	r2, [r2, #0]
 801d9d6:	f7e2 fd8d 	bl	80004f4 <__aeabi_ldivmod>
 801d9da:	0002      	movs	r2, r0
 801d9dc:	000b      	movs	r3, r1
 801d9de:	1939      	adds	r1, r7, r4
 801d9e0:	600a      	str	r2, [r1, #0]
 801d9e2:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801d9e4:	269c      	movs	r6, #156	; 0x9c
 801d9e6:	19ba      	adds	r2, r7, r6
 801d9e8:	6813      	ldr	r3, [r2, #0]
 801d9ea:	2216      	movs	r2, #22
 801d9ec:	5e9b      	ldrsh	r3, [r3, r2]
 801d9ee:	613b      	str	r3, [r7, #16]
 801d9f0:	17db      	asrs	r3, r3, #31
 801d9f2:	617b      	str	r3, [r7, #20]
 801d9f4:	197a      	adds	r2, r7, r5
 801d9f6:	6813      	ldr	r3, [r2, #0]
 801d9f8:	04da      	lsls	r2, r3, #19
 801d9fa:	1939      	adds	r1, r7, r4
 801d9fc:	680b      	ldr	r3, [r1, #0]
 801d9fe:	0b5b      	lsrs	r3, r3, #13
 801da00:	67bb      	str	r3, [r7, #120]	; 0x78
 801da02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801da04:	4313      	orrs	r3, r2
 801da06:	67bb      	str	r3, [r7, #120]	; 0x78
 801da08:	197a      	adds	r2, r7, r5
 801da0a:	6813      	ldr	r3, [r2, #0]
 801da0c:	135b      	asrs	r3, r3, #13
 801da0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 801da10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801da12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801da14:	6938      	ldr	r0, [r7, #16]
 801da16:	6979      	ldr	r1, [r7, #20]
 801da18:	f7e2 fdb0 	bl	800057c <__aeabi_lmul>
 801da1c:	0002      	movs	r2, r0
 801da1e:	000b      	movs	r3, r1
 801da20:	0010      	movs	r0, r2
 801da22:	0019      	movs	r1, r3
 801da24:	197a      	adds	r2, r7, r5
 801da26:	6813      	ldr	r3, [r2, #0]
 801da28:	04da      	lsls	r2, r3, #19
 801da2a:	193b      	adds	r3, r7, r4
 801da2c:	681b      	ldr	r3, [r3, #0]
 801da2e:	0b5b      	lsrs	r3, r3, #13
 801da30:	673b      	str	r3, [r7, #112]	; 0x70
 801da32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da34:	4313      	orrs	r3, r2
 801da36:	673b      	str	r3, [r7, #112]	; 0x70
 801da38:	197a      	adds	r2, r7, r5
 801da3a:	6813      	ldr	r3, [r2, #0]
 801da3c:	135b      	asrs	r3, r3, #13
 801da3e:	677b      	str	r3, [r7, #116]	; 0x74
 801da40:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801da42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801da44:	f7e2 fd9a 	bl	800057c <__aeabi_lmul>
 801da48:	0002      	movs	r2, r0
 801da4a:	000b      	movs	r3, r1
 801da4c:	01d9      	lsls	r1, r3, #7
 801da4e:	0e50      	lsrs	r0, r2, #25
 801da50:	4301      	orrs	r1, r0
 801da52:	25b0      	movs	r5, #176	; 0xb0
 801da54:	1978      	adds	r0, r7, r5
 801da56:	6001      	str	r1, [r0, #0]
 801da58:	165b      	asrs	r3, r3, #25
 801da5a:	22b4      	movs	r2, #180	; 0xb4
 801da5c:	18ba      	adds	r2, r7, r2
 801da5e:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801da60:	19ba      	adds	r2, r7, r6
 801da62:	6813      	ldr	r3, [r2, #0]
 801da64:	2214      	movs	r2, #20
 801da66:	5e9b      	ldrsh	r3, [r3, r2]
 801da68:	60bb      	str	r3, [r7, #8]
 801da6a:	17db      	asrs	r3, r3, #31
 801da6c:	60fb      	str	r3, [r7, #12]
 801da6e:	193a      	adds	r2, r7, r4
 801da70:	6853      	ldr	r3, [r2, #4]
 801da72:	6812      	ldr	r2, [r2, #0]
 801da74:	68b8      	ldr	r0, [r7, #8]
 801da76:	68f9      	ldr	r1, [r7, #12]
 801da78:	f7e2 fd80 	bl	800057c <__aeabi_lmul>
 801da7c:	0002      	movs	r2, r0
 801da7e:	000b      	movs	r3, r1
 801da80:	0359      	lsls	r1, r3, #13
 801da82:	0cd0      	lsrs	r0, r2, #19
 801da84:	4301      	orrs	r1, r0
 801da86:	20a8      	movs	r0, #168	; 0xa8
 801da88:	1838      	adds	r0, r7, r0
 801da8a:	6001      	str	r1, [r0, #0]
 801da8c:	14db      	asrs	r3, r3, #19
 801da8e:	22ac      	movs	r2, #172	; 0xac
 801da90:	18ba      	adds	r2, r7, r2
 801da92:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801da94:	193a      	adds	r2, r7, r4
 801da96:	6810      	ldr	r0, [r2, #0]
 801da98:	6851      	ldr	r1, [r2, #4]
 801da9a:	197a      	adds	r2, r7, r5
 801da9c:	6853      	ldr	r3, [r2, #4]
 801da9e:	6812      	ldr	r2, [r2, #0]
 801daa0:	1880      	adds	r0, r0, r2
 801daa2:	4159      	adcs	r1, r3
 801daa4:	23a8      	movs	r3, #168	; 0xa8
 801daa6:	18fb      	adds	r3, r7, r3
 801daa8:	681a      	ldr	r2, [r3, #0]
 801daaa:	685b      	ldr	r3, [r3, #4]
 801daac:	1812      	adds	r2, r2, r0
 801daae:	414b      	adcs	r3, r1
 801dab0:	0619      	lsls	r1, r3, #24
 801dab2:	0a10      	lsrs	r0, r2, #8
 801dab4:	66b8      	str	r0, [r7, #104]	; 0x68
 801dab6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801dab8:	4308      	orrs	r0, r1
 801daba:	66b8      	str	r0, [r7, #104]	; 0x68
 801dabc:	121b      	asrs	r3, r3, #8
 801dabe:	66fb      	str	r3, [r7, #108]	; 0x6c
 801dac0:	19bb      	adds	r3, r7, r6
 801dac2:	681b      	ldr	r3, [r3, #0]
 801dac4:	2212      	movs	r2, #18
 801dac6:	5e9b      	ldrsh	r3, [r3, r2]
 801dac8:	603b      	str	r3, [r7, #0]
 801daca:	17db      	asrs	r3, r3, #31
 801dacc:	607b      	str	r3, [r7, #4]
 801dace:	6839      	ldr	r1, [r7, #0]
 801dad0:	687a      	ldr	r2, [r7, #4]
 801dad2:	000b      	movs	r3, r1
 801dad4:	0f1b      	lsrs	r3, r3, #28
 801dad6:	0010      	movs	r0, r2
 801dad8:	0100      	lsls	r0, r0, #4
 801dada:	6678      	str	r0, [r7, #100]	; 0x64
 801dadc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801dade:	4318      	orrs	r0, r3
 801dae0:	6678      	str	r0, [r7, #100]	; 0x64
 801dae2:	000b      	movs	r3, r1
 801dae4:	011b      	lsls	r3, r3, #4
 801dae6:	663b      	str	r3, [r7, #96]	; 0x60
 801dae8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801daea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801daec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801daee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801daf0:	1812      	adds	r2, r2, r0
 801daf2:	414b      	adcs	r3, r1
 801daf4:	1939      	adds	r1, r7, r4
 801daf6:	600a      	str	r2, [r1, #0]
 801daf8:	604b      	str	r3, [r1, #4]
	return p;
 801dafa:	193b      	adds	r3, r7, r4
 801dafc:	681b      	ldr	r3, [r3, #0]
}
 801dafe:	0018      	movs	r0, r3
 801db00:	46bd      	mov	sp, r7
 801db02:	b02f      	add	sp, #188	; 0xbc
 801db04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db06:	46c0      	nop			; (mov r8, r8)
 801db08:	fffe0c00 	.word	0xfffe0c00
 801db0c:	00000c35 	.word	0x00000c35

0801db10 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801db10:	b580      	push	{r7, lr}
 801db12:	b086      	sub	sp, #24
 801db14:	af00      	add	r7, sp, #0
 801db16:	60f8      	str	r0, [r7, #12]
 801db18:	60b9      	str	r1, [r7, #8]
 801db1a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	4a2c      	ldr	r2, [pc, #176]	; (801dbd0 <compensate_humidity+0xc0>)
 801db20:	4694      	mov	ip, r2
 801db22:	4463      	add	r3, ip
 801db24:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801db26:	68bb      	ldr	r3, [r7, #8]
 801db28:	039a      	lsls	r2, r3, #14
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	211e      	movs	r1, #30
 801db2e:	5e5b      	ldrsh	r3, [r3, r1]
 801db30:	051b      	lsls	r3, r3, #20
 801db32:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801db34:	68fb      	ldr	r3, [r7, #12]
 801db36:	2120      	movs	r1, #32
 801db38:	5e5b      	ldrsh	r3, [r3, r1]
 801db3a:	0019      	movs	r1, r3
 801db3c:	697b      	ldr	r3, [r7, #20]
 801db3e:	434b      	muls	r3, r1
 801db40:	1ad3      	subs	r3, r2, r3
 801db42:	2280      	movs	r2, #128	; 0x80
 801db44:	01d2      	lsls	r2, r2, #7
 801db46:	4694      	mov	ip, r2
 801db48:	4463      	add	r3, ip
 801db4a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801db4c:	68fa      	ldr	r2, [r7, #12]
 801db4e:	2122      	movs	r1, #34	; 0x22
 801db50:	5652      	ldrsb	r2, [r2, r1]
 801db52:	0011      	movs	r1, r2
 801db54:	697a      	ldr	r2, [r7, #20]
 801db56:	434a      	muls	r2, r1
 801db58:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801db5a:	68f9      	ldr	r1, [r7, #12]
 801db5c:	7f09      	ldrb	r1, [r1, #28]
 801db5e:	0008      	movs	r0, r1
 801db60:	6979      	ldr	r1, [r7, #20]
 801db62:	4341      	muls	r1, r0
 801db64:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801db66:	2080      	movs	r0, #128	; 0x80
 801db68:	0200      	lsls	r0, r0, #8
 801db6a:	4684      	mov	ip, r0
 801db6c:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801db6e:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801db70:	1292      	asrs	r2, r2, #10
 801db72:	2180      	movs	r1, #128	; 0x80
 801db74:	0389      	lsls	r1, r1, #14
 801db76:	468c      	mov	ip, r1
 801db78:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801db7a:	68f9      	ldr	r1, [r7, #12]
 801db7c:	201a      	movs	r0, #26
 801db7e:	5e09      	ldrsh	r1, [r1, r0]
 801db80:	434a      	muls	r2, r1
 801db82:	2180      	movs	r1, #128	; 0x80
 801db84:	0189      	lsls	r1, r1, #6
 801db86:	468c      	mov	ip, r1
 801db88:	4462      	add	r2, ip
 801db8a:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801db8c:	4353      	muls	r3, r2
 801db8e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801db90:	697b      	ldr	r3, [r7, #20]
 801db92:	13db      	asrs	r3, r3, #15
 801db94:	697a      	ldr	r2, [r7, #20]
 801db96:	13d2      	asrs	r2, r2, #15
 801db98:	4353      	muls	r3, r2
 801db9a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801db9c:	68fa      	ldr	r2, [r7, #12]
 801db9e:	7e12      	ldrb	r2, [r2, #24]
 801dba0:	4353      	muls	r3, r2
 801dba2:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801dba4:	697a      	ldr	r2, [r7, #20]
 801dba6:	1ad3      	subs	r3, r2, r3
 801dba8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801dbaa:	697b      	ldr	r3, [r7, #20]
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	da00      	bge.n	801dbb2 <compensate_humidity+0xa2>
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801dbb4:	697b      	ldr	r3, [r7, #20]
 801dbb6:	22c8      	movs	r2, #200	; 0xc8
 801dbb8:	0552      	lsls	r2, r2, #21
 801dbba:	4293      	cmp	r3, r2
 801dbbc:	dd01      	ble.n	801dbc2 <compensate_humidity+0xb2>
 801dbbe:	23c8      	movs	r3, #200	; 0xc8
 801dbc0:	055b      	lsls	r3, r3, #21
 801dbc2:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801dbc4:	697b      	ldr	r3, [r7, #20]
 801dbc6:	131b      	asrs	r3, r3, #12
}
 801dbc8:	0018      	movs	r0, r3
 801dbca:	46bd      	mov	sp, r7
 801dbcc:	b006      	add	sp, #24
 801dbce:	bd80      	pop	{r7, pc}
 801dbd0:	fffed400 	.word	0xfffed400

0801dbd4 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801dbd4:	b590      	push	{r4, r7, lr}
 801dbd6:	b08d      	sub	sp, #52	; 0x34
 801dbd8:	af00      	add	r7, sp, #0
 801dbda:	60f8      	str	r0, [r7, #12]
 801dbdc:	60b9      	str	r1, [r7, #8]
 801dbde:	607a      	str	r2, [r7, #4]
 801dbe0:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	2232      	movs	r2, #50	; 0x32
 801dbe6:	5c9b      	ldrb	r3, [r3, r2]
 801dbe8:	2b60      	cmp	r3, #96	; 0x60
 801dbea:	d007      	beq.n	801dbfc <bmp280_read_fixed+0x28>
		if (humidity)
 801dbec:	683b      	ldr	r3, [r7, #0]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d002      	beq.n	801dbf8 <bmp280_read_fixed+0x24>
			*humidity = 0;
 801dbf2:	683b      	ldr	r3, [r7, #0]
 801dbf4:	2200      	movs	r2, #0
 801dbf6:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801dbfc:	683b      	ldr	r3, [r7, #0]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d001      	beq.n	801dc06 <bmp280_read_fixed+0x32>
 801dc02:	2308      	movs	r3, #8
 801dc04:	e000      	b.n	801dc08 <bmp280_read_fixed+0x34>
 801dc06:	2306      	movs	r3, #6
 801dc08:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801dc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc0c:	b2db      	uxtb	r3, r3
 801dc0e:	2218      	movs	r2, #24
 801dc10:	18ba      	adds	r2, r7, r2
 801dc12:	68f8      	ldr	r0, [r7, #12]
 801dc14:	21f7      	movs	r1, #247	; 0xf7
 801dc16:	f7ff fb9b 	bl	801d350 <read_data>
 801dc1a:	1e03      	subs	r3, r0, #0
 801dc1c:	d001      	beq.n	801dc22 <bmp280_read_fixed+0x4e>
		return false;
 801dc1e:	2300      	movs	r3, #0
 801dc20:	e041      	b.n	801dca6 <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801dc22:	2418      	movs	r4, #24
 801dc24:	193b      	adds	r3, r7, r4
 801dc26:	781b      	ldrb	r3, [r3, #0]
 801dc28:	031a      	lsls	r2, r3, #12
 801dc2a:	193b      	adds	r3, r7, r4
 801dc2c:	785b      	ldrb	r3, [r3, #1]
 801dc2e:	011b      	lsls	r3, r3, #4
 801dc30:	4313      	orrs	r3, r2
 801dc32:	193a      	adds	r2, r7, r4
 801dc34:	7892      	ldrb	r2, [r2, #2]
 801dc36:	0912      	lsrs	r2, r2, #4
 801dc38:	b2d2      	uxtb	r2, r2
 801dc3a:	4313      	orrs	r3, r2
 801dc3c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801dc3e:	193b      	adds	r3, r7, r4
 801dc40:	78db      	ldrb	r3, [r3, #3]
 801dc42:	031a      	lsls	r2, r3, #12
 801dc44:	193b      	adds	r3, r7, r4
 801dc46:	791b      	ldrb	r3, [r3, #4]
 801dc48:	011b      	lsls	r3, r3, #4
 801dc4a:	4313      	orrs	r3, r2
 801dc4c:	193a      	adds	r2, r7, r4
 801dc4e:	7952      	ldrb	r2, [r2, #5]
 801dc50:	0912      	lsrs	r2, r2, #4
 801dc52:	b2d2      	uxtb	r2, r2
 801dc54:	4313      	orrs	r3, r2
 801dc56:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801dc58:	2314      	movs	r3, #20
 801dc5a:	18fa      	adds	r2, r7, r3
 801dc5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dc5e:	68fb      	ldr	r3, [r7, #12]
 801dc60:	0018      	movs	r0, r3
 801dc62:	f7ff fd6e 	bl	801d742 <compensate_temperature>
 801dc66:	0002      	movs	r2, r0
 801dc68:	68bb      	ldr	r3, [r7, #8]
 801dc6a:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801dc6c:	697a      	ldr	r2, [r7, #20]
 801dc6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	0018      	movs	r0, r3
 801dc74:	f7ff fd9a 	bl	801d7ac <compensate_pressure>
 801dc78:	0002      	movs	r2, r0
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801dc7e:	683b      	ldr	r3, [r7, #0]
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d00f      	beq.n	801dca4 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801dc84:	193b      	adds	r3, r7, r4
 801dc86:	799b      	ldrb	r3, [r3, #6]
 801dc88:	021b      	lsls	r3, r3, #8
 801dc8a:	193a      	adds	r2, r7, r4
 801dc8c:	79d2      	ldrb	r2, [r2, #7]
 801dc8e:	4313      	orrs	r3, r2
 801dc90:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801dc92:	697a      	ldr	r2, [r7, #20]
 801dc94:	6a39      	ldr	r1, [r7, #32]
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	0018      	movs	r0, r3
 801dc9a:	f7ff ff39 	bl	801db10 <compensate_humidity>
 801dc9e:	0002      	movs	r2, r0
 801dca0:	683b      	ldr	r3, [r7, #0]
 801dca2:	601a      	str	r2, [r3, #0]
	}

	return true;
 801dca4:	2301      	movs	r3, #1
}
 801dca6:	0018      	movs	r0, r3
 801dca8:	46bd      	mov	sp, r7
 801dcaa:	b00d      	add	sp, #52	; 0x34
 801dcac:	bd90      	pop	{r4, r7, pc}
	...

0801dcb0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 801dcb0:	b580      	push	{r7, lr}
 801dcb2:	b088      	sub	sp, #32
 801dcb4:	af00      	add	r7, sp, #0
 801dcb6:	60f8      	str	r0, [r7, #12]
 801dcb8:	60b9      	str	r1, [r7, #8]
 801dcba:	607a      	str	r2, [r7, #4]
 801dcbc:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 801dcbe:	683b      	ldr	r3, [r7, #0]
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d002      	beq.n	801dcca <bmp280_read_float+0x1a>
 801dcc4:	2314      	movs	r3, #20
 801dcc6:	18fb      	adds	r3, r7, r3
 801dcc8:	e000      	b.n	801dccc <bmp280_read_float+0x1c>
 801dcca:	2300      	movs	r3, #0
 801dccc:	2218      	movs	r2, #24
 801dcce:	18ba      	adds	r2, r7, r2
 801dcd0:	211c      	movs	r1, #28
 801dcd2:	1879      	adds	r1, r7, r1
 801dcd4:	68f8      	ldr	r0, [r7, #12]
 801dcd6:	f7ff ff7d 	bl	801dbd4 <bmp280_read_fixed>
 801dcda:	1e03      	subs	r3, r0, #0
 801dcdc:	d02d      	beq.n	801dd3a <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 801dcde:	69fb      	ldr	r3, [r7, #28]
 801dce0:	0018      	movs	r0, r3
 801dce2:	f7e3 f945 	bl	8000f70 <__aeabi_i2f>
 801dce6:	1c03      	adds	r3, r0, #0
 801dce8:	4916      	ldr	r1, [pc, #88]	; (801dd44 <bmp280_read_float+0x94>)
 801dcea:	1c18      	adds	r0, r3, #0
 801dcec:	f7e2 fd8e 	bl	800080c <__aeabi_fdiv>
 801dcf0:	1c03      	adds	r3, r0, #0
 801dcf2:	1c1a      	adds	r2, r3, #0
 801dcf4:	68bb      	ldr	r3, [r7, #8]
 801dcf6:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 801dcf8:	69bb      	ldr	r3, [r7, #24]
 801dcfa:	0018      	movs	r0, r3
 801dcfc:	f7e3 f97e 	bl	8000ffc <__aeabi_ui2f>
 801dd00:	1c03      	adds	r3, r0, #0
 801dd02:	2187      	movs	r1, #135	; 0x87
 801dd04:	05c9      	lsls	r1, r1, #23
 801dd06:	1c18      	adds	r0, r3, #0
 801dd08:	f7e2 fd80 	bl	800080c <__aeabi_fdiv>
 801dd0c:	1c03      	adds	r3, r0, #0
 801dd0e:	1c1a      	adds	r2, r3, #0
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	601a      	str	r2, [r3, #0]
		if (humidity)
 801dd14:	683b      	ldr	r3, [r7, #0]
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d00d      	beq.n	801dd36 <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 801dd1a:	697b      	ldr	r3, [r7, #20]
 801dd1c:	0018      	movs	r0, r3
 801dd1e:	f7e3 f96d 	bl	8000ffc <__aeabi_ui2f>
 801dd22:	1c03      	adds	r3, r0, #0
 801dd24:	2189      	movs	r1, #137	; 0x89
 801dd26:	05c9      	lsls	r1, r1, #23
 801dd28:	1c18      	adds	r0, r3, #0
 801dd2a:	f7e2 fd6f 	bl	800080c <__aeabi_fdiv>
 801dd2e:	1c03      	adds	r3, r0, #0
 801dd30:	1c1a      	adds	r2, r3, #0
 801dd32:	683b      	ldr	r3, [r7, #0]
 801dd34:	601a      	str	r2, [r3, #0]
		return true;
 801dd36:	2301      	movs	r3, #1
 801dd38:	e000      	b.n	801dd3c <bmp280_read_float+0x8c>
	}

	return false;
 801dd3a:	2300      	movs	r3, #0
}
 801dd3c:	0018      	movs	r0, r3
 801dd3e:	46bd      	mov	sp, r7
 801dd40:	b008      	add	sp, #32
 801dd42:	bd80      	pop	{r7, pc}
 801dd44:	42c80000 	.word	0x42c80000

0801dd48 <__libc_init_array>:
 801dd48:	b570      	push	{r4, r5, r6, lr}
 801dd4a:	2600      	movs	r6, #0
 801dd4c:	4d0c      	ldr	r5, [pc, #48]	; (801dd80 <__libc_init_array+0x38>)
 801dd4e:	4c0d      	ldr	r4, [pc, #52]	; (801dd84 <__libc_init_array+0x3c>)
 801dd50:	1b64      	subs	r4, r4, r5
 801dd52:	10a4      	asrs	r4, r4, #2
 801dd54:	42a6      	cmp	r6, r4
 801dd56:	d109      	bne.n	801dd6c <__libc_init_array+0x24>
 801dd58:	2600      	movs	r6, #0
 801dd5a:	f000 f8b5 	bl	801dec8 <_init>
 801dd5e:	4d0a      	ldr	r5, [pc, #40]	; (801dd88 <__libc_init_array+0x40>)
 801dd60:	4c0a      	ldr	r4, [pc, #40]	; (801dd8c <__libc_init_array+0x44>)
 801dd62:	1b64      	subs	r4, r4, r5
 801dd64:	10a4      	asrs	r4, r4, #2
 801dd66:	42a6      	cmp	r6, r4
 801dd68:	d105      	bne.n	801dd76 <__libc_init_array+0x2e>
 801dd6a:	bd70      	pop	{r4, r5, r6, pc}
 801dd6c:	00b3      	lsls	r3, r6, #2
 801dd6e:	58eb      	ldr	r3, [r5, r3]
 801dd70:	4798      	blx	r3
 801dd72:	3601      	adds	r6, #1
 801dd74:	e7ee      	b.n	801dd54 <__libc_init_array+0xc>
 801dd76:	00b3      	lsls	r3, r6, #2
 801dd78:	58eb      	ldr	r3, [r5, r3]
 801dd7a:	4798      	blx	r3
 801dd7c:	3601      	adds	r6, #1
 801dd7e:	e7f2      	b.n	801dd66 <__libc_init_array+0x1e>
 801dd80:	0801f418 	.word	0x0801f418
 801dd84:	0801f418 	.word	0x0801f418
 801dd88:	0801f418 	.word	0x0801f418
 801dd8c:	0801f41c 	.word	0x0801f41c

0801dd90 <memcpy>:
 801dd90:	2300      	movs	r3, #0
 801dd92:	b510      	push	{r4, lr}
 801dd94:	429a      	cmp	r2, r3
 801dd96:	d100      	bne.n	801dd9a <memcpy+0xa>
 801dd98:	bd10      	pop	{r4, pc}
 801dd9a:	5ccc      	ldrb	r4, [r1, r3]
 801dd9c:	54c4      	strb	r4, [r0, r3]
 801dd9e:	3301      	adds	r3, #1
 801dda0:	e7f8      	b.n	801dd94 <memcpy+0x4>

0801dda2 <memset>:
 801dda2:	0003      	movs	r3, r0
 801dda4:	1882      	adds	r2, r0, r2
 801dda6:	4293      	cmp	r3, r2
 801dda8:	d100      	bne.n	801ddac <memset+0xa>
 801ddaa:	4770      	bx	lr
 801ddac:	7019      	strb	r1, [r3, #0]
 801ddae:	3301      	adds	r3, #1
 801ddb0:	e7f9      	b.n	801dda6 <memset+0x4>
	...

0801ddb4 <floor>:
 801ddb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ddb6:	004b      	lsls	r3, r1, #1
 801ddb8:	4a3d      	ldr	r2, [pc, #244]	; (801deb0 <floor+0xfc>)
 801ddba:	0d5b      	lsrs	r3, r3, #21
 801ddbc:	189f      	adds	r7, r3, r2
 801ddbe:	4684      	mov	ip, r0
 801ddc0:	000e      	movs	r6, r1
 801ddc2:	000d      	movs	r5, r1
 801ddc4:	0004      	movs	r4, r0
 801ddc6:	9001      	str	r0, [sp, #4]
 801ddc8:	2f13      	cmp	r7, #19
 801ddca:	dc34      	bgt.n	801de36 <floor+0x82>
 801ddcc:	2f00      	cmp	r7, #0
 801ddce:	da16      	bge.n	801ddfe <floor+0x4a>
 801ddd0:	4a38      	ldr	r2, [pc, #224]	; (801deb4 <floor+0x100>)
 801ddd2:	4b39      	ldr	r3, [pc, #228]	; (801deb8 <floor+0x104>)
 801ddd4:	4660      	mov	r0, ip
 801ddd6:	0031      	movs	r1, r6
 801ddd8:	f7e3 f94c 	bl	8001074 <__aeabi_dadd>
 801dddc:	2200      	movs	r2, #0
 801ddde:	2300      	movs	r3, #0
 801dde0:	f7e2 fb3a 	bl	8000458 <__aeabi_dcmpgt>
 801dde4:	2800      	cmp	r0, #0
 801dde6:	d007      	beq.n	801ddf8 <floor+0x44>
 801dde8:	2e00      	cmp	r6, #0
 801ddea:	da5d      	bge.n	801dea8 <floor+0xf4>
 801ddec:	0073      	lsls	r3, r6, #1
 801ddee:	085b      	lsrs	r3, r3, #1
 801ddf0:	431c      	orrs	r4, r3
 801ddf2:	d001      	beq.n	801ddf8 <floor+0x44>
 801ddf4:	2400      	movs	r4, #0
 801ddf6:	4d31      	ldr	r5, [pc, #196]	; (801debc <floor+0x108>)
 801ddf8:	46a4      	mov	ip, r4
 801ddfa:	002e      	movs	r6, r5
 801ddfc:	e029      	b.n	801de52 <floor+0x9e>
 801ddfe:	4b30      	ldr	r3, [pc, #192]	; (801dec0 <floor+0x10c>)
 801de00:	413b      	asrs	r3, r7
 801de02:	9300      	str	r3, [sp, #0]
 801de04:	400b      	ands	r3, r1
 801de06:	4303      	orrs	r3, r0
 801de08:	d023      	beq.n	801de52 <floor+0x9e>
 801de0a:	4a2a      	ldr	r2, [pc, #168]	; (801deb4 <floor+0x100>)
 801de0c:	4b2a      	ldr	r3, [pc, #168]	; (801deb8 <floor+0x104>)
 801de0e:	4660      	mov	r0, ip
 801de10:	0031      	movs	r1, r6
 801de12:	f7e3 f92f 	bl	8001074 <__aeabi_dadd>
 801de16:	2200      	movs	r2, #0
 801de18:	2300      	movs	r3, #0
 801de1a:	f7e2 fb1d 	bl	8000458 <__aeabi_dcmpgt>
 801de1e:	2800      	cmp	r0, #0
 801de20:	d0ea      	beq.n	801ddf8 <floor+0x44>
 801de22:	2e00      	cmp	r6, #0
 801de24:	da03      	bge.n	801de2e <floor+0x7a>
 801de26:	2380      	movs	r3, #128	; 0x80
 801de28:	035b      	lsls	r3, r3, #13
 801de2a:	413b      	asrs	r3, r7
 801de2c:	18f5      	adds	r5, r6, r3
 801de2e:	9b00      	ldr	r3, [sp, #0]
 801de30:	2400      	movs	r4, #0
 801de32:	439d      	bics	r5, r3
 801de34:	e7e0      	b.n	801ddf8 <floor+0x44>
 801de36:	2f33      	cmp	r7, #51	; 0x33
 801de38:	dd0f      	ble.n	801de5a <floor+0xa6>
 801de3a:	2380      	movs	r3, #128	; 0x80
 801de3c:	00db      	lsls	r3, r3, #3
 801de3e:	429f      	cmp	r7, r3
 801de40:	d107      	bne.n	801de52 <floor+0x9e>
 801de42:	0002      	movs	r2, r0
 801de44:	000b      	movs	r3, r1
 801de46:	4660      	mov	r0, ip
 801de48:	0031      	movs	r1, r6
 801de4a:	f7e3 f913 	bl	8001074 <__aeabi_dadd>
 801de4e:	4684      	mov	ip, r0
 801de50:	000e      	movs	r6, r1
 801de52:	4660      	mov	r0, ip
 801de54:	0031      	movs	r1, r6
 801de56:	b003      	add	sp, #12
 801de58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de5a:	4a1a      	ldr	r2, [pc, #104]	; (801dec4 <floor+0x110>)
 801de5c:	189b      	adds	r3, r3, r2
 801de5e:	2201      	movs	r2, #1
 801de60:	4252      	negs	r2, r2
 801de62:	40da      	lsrs	r2, r3
 801de64:	9200      	str	r2, [sp, #0]
 801de66:	4210      	tst	r0, r2
 801de68:	d0f3      	beq.n	801de52 <floor+0x9e>
 801de6a:	4a12      	ldr	r2, [pc, #72]	; (801deb4 <floor+0x100>)
 801de6c:	4b12      	ldr	r3, [pc, #72]	; (801deb8 <floor+0x104>)
 801de6e:	4660      	mov	r0, ip
 801de70:	0031      	movs	r1, r6
 801de72:	f7e3 f8ff 	bl	8001074 <__aeabi_dadd>
 801de76:	2200      	movs	r2, #0
 801de78:	2300      	movs	r3, #0
 801de7a:	f7e2 faed 	bl	8000458 <__aeabi_dcmpgt>
 801de7e:	2800      	cmp	r0, #0
 801de80:	d0ba      	beq.n	801ddf8 <floor+0x44>
 801de82:	2e00      	cmp	r6, #0
 801de84:	da02      	bge.n	801de8c <floor+0xd8>
 801de86:	2f14      	cmp	r7, #20
 801de88:	d103      	bne.n	801de92 <floor+0xde>
 801de8a:	3501      	adds	r5, #1
 801de8c:	9b00      	ldr	r3, [sp, #0]
 801de8e:	439c      	bics	r4, r3
 801de90:	e7b2      	b.n	801ddf8 <floor+0x44>
 801de92:	2334      	movs	r3, #52	; 0x34
 801de94:	1bdf      	subs	r7, r3, r7
 801de96:	3b33      	subs	r3, #51	; 0x33
 801de98:	40bb      	lsls	r3, r7
 801de9a:	18e4      	adds	r4, r4, r3
 801de9c:	9b01      	ldr	r3, [sp, #4]
 801de9e:	429c      	cmp	r4, r3
 801dea0:	419b      	sbcs	r3, r3
 801dea2:	425b      	negs	r3, r3
 801dea4:	18f5      	adds	r5, r6, r3
 801dea6:	e7f1      	b.n	801de8c <floor+0xd8>
 801dea8:	2400      	movs	r4, #0
 801deaa:	0025      	movs	r5, r4
 801deac:	e7a4      	b.n	801ddf8 <floor+0x44>
 801deae:	46c0      	nop			; (mov r8, r8)
 801deb0:	fffffc01 	.word	0xfffffc01
 801deb4:	8800759c 	.word	0x8800759c
 801deb8:	7e37e43c 	.word	0x7e37e43c
 801debc:	bff00000 	.word	0xbff00000
 801dec0:	000fffff 	.word	0x000fffff
 801dec4:	fffffbed 	.word	0xfffffbed

0801dec8 <_init>:
 801dec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deca:	46c0      	nop			; (mov r8, r8)
 801decc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dece:	bc08      	pop	{r3}
 801ded0:	469e      	mov	lr, r3
 801ded2:	4770      	bx	lr

0801ded4 <_fini>:
 801ded4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ded6:	46c0      	nop			; (mov r8, r8)
 801ded8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801deda:	bc08      	pop	{r3}
 801dedc:	469e      	mov	lr, r3
 801dede:	4770      	bx	lr
